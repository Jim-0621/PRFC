File: android/autodispose-android/src/main/java/autodispose2/android/DetachEventCompletable.java
Patch:
@@ -77,6 +77,7 @@ public void onViewAttachedToWindow(View v) {}
     public void onViewDetachedFromWindow(View v) {
       if (!isDisposed()) {
         observer.onComplete();
+        v.removeOnAttachStateChangeListener(this);
       }
     }
 

File: autodispose-lifecycle/src/main/java/autodispose2/lifecycle/LifecycleScopeProvider.java
Patch:
@@ -16,7 +16,7 @@
 package autodispose2.lifecycle;
 
 import autodispose2.ScopeProvider;
-import autodispose2.internal.DoNotMock;
+import com.google.errorprone.annotations.DoNotMock;
 import io.reactivex.rxjava3.annotations.CheckReturnValue;
 import io.reactivex.rxjava3.annotations.NonNull;
 import io.reactivex.rxjava3.annotations.Nullable;

File: autodispose/src/main/java/autodispose2/ScopeProvider.java
Patch:
@@ -15,7 +15,7 @@
  */
 package autodispose2;
 
-import autodispose2.internal.DoNotMock;
+import com.google.errorprone.annotations.DoNotMock;
 import io.reactivex.rxjava3.annotations.CheckReturnValue;
 import io.reactivex.rxjava3.core.Completable;
 import io.reactivex.rxjava3.core.CompletableSource;

File: autodispose/src/main/java/autodispose2/AutoDispose.java
Patch:
@@ -19,6 +19,7 @@
 import static autodispose2.Scopes.completableOf;
 
 import io.reactivex.rxjava3.annotations.NonNull;
+import io.reactivex.rxjava3.annotations.Nullable;
 import io.reactivex.rxjava3.core.Completable;
 import io.reactivex.rxjava3.core.CompletableObserver;
 import io.reactivex.rxjava3.core.CompletableSource;
@@ -360,7 +361,8 @@ public Disposable subscribe(Consumer<? super T> onSuccess) {
           }
 
           @Override
-          public Disposable subscribe(BiConsumer<? super T, ? super Throwable> biConsumer) {
+          public Disposable subscribe(
+              BiConsumer<@Nullable ? super T, @Nullable ? super Throwable> biConsumer) {
             return new AutoDisposeSingle<>(upstream, scope).subscribe(biConsumer);
           }
 

File: autodispose/src/main/java/autodispose2/SingleSubscribeProxy.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.reactivex.rxjava3.annotations.CheckReturnValue;
 import io.reactivex.rxjava3.annotations.NonNull;
+import io.reactivex.rxjava3.annotations.Nullable;
 import io.reactivex.rxjava3.core.Single;
 import io.reactivex.rxjava3.core.SingleObserver;
 import io.reactivex.rxjava3.disposables.Disposable;
@@ -46,7 +47,7 @@ public interface SingleSubscribeProxy<@NonNull T> {
    *
    * @return a {@link Disposable}
    */
-  Disposable subscribe(BiConsumer<? super T, ? super Throwable> biConsumer);
+  Disposable subscribe(BiConsumer<@Nullable ? super T, @Nullable ? super Throwable> biConsumer);
 
   /**
    * Proxy for {@link Single#subscribe(Consumer, Consumer)}.

File: autodispose-lifecycle/src/test/java/autodispose2/lifecycle/LifecycleScopeProviderCompletableTest.java
Patch:
@@ -39,7 +39,7 @@ public class LifecycleScopeProviderCompletableTest {
           System.out.println(
               LifecycleScopeProviderCompletableTest.class.getSimpleName() + ": " + message);
 
-  @Rule public RxErrorsRule rule = new RxErrorsRule();
+  @Rule public final RxErrorsRule rule = new RxErrorsRule();
 
   @Before
   @After

File: autodispose-lifecycle/src/test/java/autodispose2/lifecycle/LifecycleScopeProviderMaybeTest.java
Patch:
@@ -39,7 +39,7 @@ public class LifecycleScopeProviderMaybeTest {
           System.out.println(
               LifecycleScopeProviderMaybeTest.class.getSimpleName() + ": " + message);
 
-  @Rule public RxErrorsRule rule = new RxErrorsRule();
+  @Rule public final RxErrorsRule rule = new RxErrorsRule();
 
   @Before
   @After

File: autodispose-lifecycle/src/test/java/autodispose2/lifecycle/LifecycleScopeProviderObservableTest.java
Patch:
@@ -39,7 +39,7 @@ public class LifecycleScopeProviderObservableTest {
           System.out.println(
               LifecycleScopeProviderObservableTest.class.getSimpleName() + ": " + message);
 
-  @Rule public RxErrorsRule rule = new RxErrorsRule();
+  @Rule public final RxErrorsRule rule = new RxErrorsRule();
 
   @Before
   @After

File: autodispose-lifecycle/src/test/java/autodispose2/lifecycle/LifecycleScopeProviderSingleTest.java
Patch:
@@ -39,7 +39,7 @@ public class LifecycleScopeProviderSingleTest {
           System.out.println(
               LifecycleScopeProviderSingleTest.class.getSimpleName() + ": " + message);
 
-  @Rule public RxErrorsRule rule = new RxErrorsRule();
+  @Rule public final RxErrorsRule rule = new RxErrorsRule();
 
   @Before
   @After

File: autodispose-lifecycle/src/test/java/autodispose2/lifecycle/LifecycleScopeProviderSubscriberTest.java
Patch:
@@ -33,7 +33,7 @@
 
 public class LifecycleScopeProviderSubscriberTest {
 
-  @Rule public RxErrorsRule rule = new RxErrorsRule();
+  @Rule public final RxErrorsRule rule = new RxErrorsRule();
 
   @Before
   @After

File: autodispose/src/main/java/autodispose2/ScopeProvider.java
Patch:
@@ -34,7 +34,8 @@ public interface ScopeProvider {
   ScopeProvider UNBOUND = Completable::never;
 
   /**
-   * @return a {@link CompletableSource} that, upon completion, will trigger disposal.
+   * Returns a {@link CompletableSource} that, upon completion, will trigger disposal.
+   *
    * @throws Exception scope retrievals throws an exception, such as {@link OutsideScopeException}
    */
   @CheckReturnValue

File: autodispose/src/main/java/autodispose2/Scopes.java
Patch:
@@ -24,8 +24,8 @@ public final class Scopes {
   private Scopes() {}
 
   /**
-   * @return a {@link Completable} representation of the given {@code scopeProvider}. This will be
-   *     deferred appropriately and handle {@link OutsideScopeException OutsideScopeExceptions}.
+   * Returns a {@link Completable} representation of the given {@code scopeProvider}. This will be
+   * deferred appropriately and handle {@link OutsideScopeException OutsideScopeExceptions}.
    */
   public static Completable completableOf(ScopeProvider scopeProvider) {
     return Completable.defer(

File: autodispose/src/main/java/autodispose2/observers/AutoDisposingCompletableObserver.java
Patch:
@@ -25,8 +25,8 @@
 public interface AutoDisposingCompletableObserver extends CompletableObserver, Disposable {
 
   /**
-   * @return The delegate {@link CompletableObserver} that is used under the hood for introspection
-   *     purposes.
+   * Returns the delegate {@link CompletableObserver} that is used under the hood for introspection
+   * purposes.
    */
   CompletableObserver delegateObserver();
 }

File: autodispose/src/main/java/autodispose2/observers/AutoDisposingMaybeObserver.java
Patch:
@@ -25,8 +25,8 @@
 public interface AutoDisposingMaybeObserver<T> extends MaybeObserver<T>, Disposable {
 
   /**
-   * @return The delegate {@link MaybeObserver} that is used under the hood for introspection
-   *     purposes.
+   * Returns the delegate {@link MaybeObserver} that is used under the hood for introspection
+   * purposes.
    */
   MaybeObserver<? super T> delegateObserver();
 }

File: autodispose/src/main/java/autodispose2/observers/AutoDisposingObserver.java
Patch:
@@ -25,7 +25,7 @@
 public interface AutoDisposingObserver<T> extends Observer<T>, Disposable {
 
   /**
-   * @return The delegate {@link Observer} that is used under the hood for introspection purposes.
+   * Returns the delegate {@link Observer} that is used under the hood for introspection purposes.
    */
   Observer<? super T> delegateObserver();
 }

File: autodispose/src/main/java/autodispose2/observers/AutoDisposingSingleObserver.java
Patch:
@@ -25,8 +25,8 @@
 public interface AutoDisposingSingleObserver<T> extends SingleObserver<T>, Disposable {
 
   /**
-   * @return The delegate {@link SingleObserver} that is used under the hood for introspection
-   *     purposes.
+   * Returns the delegate {@link SingleObserver} that is used under the hood for introspection
+   * purposes.
    */
   SingleObserver<? super T> delegateObserver();
 }

File: autodispose/src/main/java/autodispose2/observers/AutoDisposingSubscriber.java
Patch:
@@ -28,7 +28,7 @@ public interface AutoDisposingSubscriber<T>
     extends FlowableSubscriber<T>, Subscription, Disposable {
 
   /**
-   * @return The delegate {@link Subscriber} that is used under the hood for introspection purposes.
+   * Returns the delegate {@link Subscriber} that is used under the hood for introspection purposes.
    */
   Subscriber<? super T> delegateSubscriber();
 }

File: autodispose/src/test/java/autodispose2/AutoDisposeCompletableObserverTest.java
Patch:
@@ -40,7 +40,7 @@ public class AutoDisposeCompletableObserverTest extends PluginsMatrixTest {
           System.out.println(
               AutoDisposeCompletableObserverTest.class.getSimpleName() + ": " + message);
 
-  @Rule public RxErrorsRule rule = new RxErrorsRule();
+  @Rule public final RxErrorsRule rule = new RxErrorsRule();
 
   public AutoDisposeCompletableObserverTest(boolean hideProxies) {
     super(hideProxies);

File: autodispose/src/test/java/autodispose2/AutoDisposeMaybeObserverTest.java
Patch:
@@ -41,7 +41,7 @@ public class AutoDisposeMaybeObserverTest extends PluginsMatrixTest {
       message ->
           System.out.println(AutoDisposeMaybeObserverTest.class.getSimpleName() + ": " + message);
 
-  @Rule public RxErrorsRule rule = new RxErrorsRule();
+  @Rule public final RxErrorsRule rule = new RxErrorsRule();
 
   public AutoDisposeMaybeObserverTest(boolean hideProxies) {
     super(hideProxies);

File: autodispose/src/test/java/autodispose2/AutoDisposeObserverTest.java
Patch:
@@ -41,7 +41,7 @@ public class AutoDisposeObserverTest extends PluginsMatrixTest {
   private static final RecordingObserver.Logger LOGGER =
       message -> System.out.println(AutoDisposeObserverTest.class.getSimpleName() + ": " + message);
 
-  @Rule public RxErrorsRule rule = new RxErrorsRule();
+  @Rule public final RxErrorsRule rule = new RxErrorsRule();
 
   public AutoDisposeObserverTest(boolean hideProxies) {
     super(hideProxies);

File: autodispose/src/test/java/autodispose2/AutoDisposeSingleObserverTest.java
Patch:
@@ -41,7 +41,7 @@ public class AutoDisposeSingleObserverTest extends PluginsMatrixTest {
       message ->
           System.out.println(AutoDisposeSingleObserverTest.class.getSimpleName() + ": " + message);
 
-  @Rule public RxErrorsRule rule = new RxErrorsRule();
+  @Rule public final RxErrorsRule rule = new RxErrorsRule();
 
   public AutoDisposeSingleObserverTest(boolean hideProxies) {
     super(hideProxies);

File: autodispose/src/test/java/autodispose2/AutoDisposeSubscriberTest.java
Patch:
@@ -37,7 +37,7 @@
 
 public class AutoDisposeSubscriberTest extends PluginsMatrixTest {
 
-  @Rule public RxErrorsRule rule = new RxErrorsRule();
+  @Rule public final RxErrorsRule rule = new RxErrorsRule();
 
   public AutoDisposeSubscriberTest(boolean hideProxies) {
     super(hideProxies);

File: static-analysis/autodispose-error-prone/src/test/java/autodispose2/errorprone/UseAutoDisposeTest.java
Patch:
@@ -27,7 +27,7 @@
 @RunWith(JUnit4.class)
 public final class UseAutoDisposeTest {
 
-  @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();
+  @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();
 
   private CompilationTestHelper compilationHelper;
 

File: test-utils/src/main/java/autodispose2/test/RecordingObserver.java
Patch:
@@ -118,6 +118,7 @@ public void assertOnComplete() {
     takeEvent(OnCompleted.class);
   }
 
+  @SuppressWarnings("EmptyCatch")
   public void assertNoMoreEvents() {
     try {
       Object event = takeEvent(Object.class);

File: static-analysis/autodispose-error-prone/src/main/java/autodispose2/errorprone/UseAutoDispose.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.uber.autodispose.errorprone;
+package autodispose2.errorprone;
 
 import static com.google.errorprone.BugPattern.SeverityLevel.ERROR;
 import static com.google.errorprone.BugPattern.StandardTags.CONCURRENCY;

File: static-analysis/autodispose-error-prone/src/test/java/autodispose2/errorprone/ComponentWithLifecycle.java
Patch:
@@ -13,6 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.uber.autodispose.errorprone;
+package autodispose2.errorprone;
 
 public class ComponentWithLifecycle {}

File: static-analysis/autodispose-error-prone/src/test/java/autodispose2/errorprone/UseAutoDisposeTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.uber.autodispose.errorprone;
+package autodispose2.errorprone;
 
 import com.google.common.collect.ImmutableList;
 import com.google.errorprone.CompilationTestHelper;

File: static-analysis/autodispose-error-prone/src/test/resources/autodispose2/errorprone/UseAutoDisposeCustomClassPositiveCases.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.uber.autodispose.errorprone;
+package autodispose2.errorprone;
 
 import io.reactivex.rxjava3.core.Completable;
 import io.reactivex.rxjava3.core.Flowable;

File: static-analysis/autodispose-error-prone/src/test/resources/autodispose2/errorprone/UseAutoDisposeDefaultClassPositiveCases.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.uber.autodispose.errorprone;
+package autodispose2.errorprone;
 
 import autodispose2.lifecycle.CorrespondingEventsFunction;
 import autodispose2.lifecycle.LifecycleEndedException;

File: static-analysis/autodispose-error-prone/src/test/resources/autodispose2/errorprone/UseAutoDisposeDefaultClassPositiveCasesLenient.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.uber.autodispose.errorprone;
+package autodispose2.errorprone;
 
 import autodispose2.lifecycle.CorrespondingEventsFunction;
 import autodispose2.lifecycle.LifecycleEndedException;

File: static-analysis/autodispose-error-prone/src/test/resources/autodispose2/errorprone/UseAutoDisposeNegativeCases.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.uber.autodispose.errorprone;
+package autodispose2.errorprone;
 
 import static autodispose2.AutoDispose.autoDisposable;
 

File: static-analysis/autodispose-error-prone/src/test/resources/autodispose2/errorprone/UseAutoDisposeNegativeCasesExcluded.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.uber.autodispose.errorprone;
+package autodispose2.errorprone;
 
 import static autodispose2.AutoDispose.autoDisposable;
 

File: static-analysis/autodispose-error-prone/src/test/resources/autodispose2/errorprone/UseAutoDisposeNegativeCasesLenient.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.uber.autodispose.errorprone;
+package autodispose2.errorprone;
 
 import static autodispose2.AutoDispose.autoDisposable;
 

File: android/autodispose-android-archcomponents/src/main/java/com/uber/autodispose/android/lifecycle/AndroidLifecycleScopeProvider.java
Patch:
@@ -22,8 +22,8 @@
 import com.uber.autodispose.lifecycle.LifecycleEndedException;
 import com.uber.autodispose.lifecycle.LifecycleScopeProvider;
 import com.uber.autodispose.lifecycle.LifecycleScopes;
-import io.reactivex.CompletableSource;
-import io.reactivex.Observable;
+import io.reactivex.rxjava3.core.CompletableSource;
+import io.reactivex.rxjava3.core.Observable;
 
 /**
  * A {@link LifecycleScopeProvider} that can provide scoping for Android {@link Lifecycle} and

File: android/autodispose-android-archcomponents/src/main/java/com/uber/autodispose/android/lifecycle/LifecycleEventsObservable.java
Patch:
@@ -30,9 +30,9 @@
 import androidx.lifecycle.LifecycleOwner;
 import androidx.lifecycle.OnLifecycleEvent;
 import com.uber.autodispose.android.internal.MainThreadDisposable;
-import io.reactivex.Observable;
-import io.reactivex.Observer;
-import io.reactivex.subjects.BehaviorSubject;
+import io.reactivex.rxjava3.core.Observable;
+import io.reactivex.rxjava3.core.Observer;
+import io.reactivex.rxjava3.subjects.BehaviorSubject;
 
 @RestrictTo(LIBRARY_GROUP)
 class LifecycleEventsObservable extends Observable<Event> {

File: android/autodispose-android/src/main/java/com/uber/autodispose/android/AutoDisposeAndroidPlugins.java
Patch:
@@ -16,8 +16,8 @@
 package com.uber.autodispose.android;
 
 import androidx.annotation.Nullable;
-import io.reactivex.exceptions.Exceptions;
-import io.reactivex.functions.BooleanSupplier;
+import io.reactivex.rxjava3.exceptions.Exceptions;
+import io.reactivex.rxjava3.functions.BooleanSupplier;
 
 /** Utility class to inject handlers to certain standard AutoDispose Android operations. */
 public final class AutoDisposeAndroidPlugins {
@@ -87,7 +87,7 @@ public static boolean onCheckMainThread(BooleanSupplier defaultChecker) {
       } else {
         return current.getAsBoolean();
       }
-    } catch (Exception ex) {
+    } catch (Throwable ex) {
       throw Exceptions.propagate(ex);
     }
   }

File: android/autodispose-android/src/main/java/com/uber/autodispose/android/DetachEventCompletable.java
Patch:
@@ -22,9 +22,9 @@
 import android.view.View;
 import androidx.annotation.RestrictTo;
 import com.uber.autodispose.OutsideScopeException;
-import io.reactivex.CompletableObserver;
-import io.reactivex.CompletableSource;
-import io.reactivex.android.MainThreadDisposable;
+import io.reactivex.rxjava3.android.MainThreadDisposable;
+import io.reactivex.rxjava3.core.CompletableObserver;
+import io.reactivex.rxjava3.core.CompletableSource;
 
 @RestrictTo(LIBRARY)
 final class DetachEventCompletable implements CompletableSource {

File: android/autodispose-android/src/main/java/com/uber/autodispose/android/ViewScopeProvider.java
Patch:
@@ -17,7 +17,7 @@
 
 import android.view.View;
 import com.uber.autodispose.ScopeProvider;
-import io.reactivex.CompletableSource;
+import io.reactivex.rxjava3.core.CompletableSource;
 
 /**
  * A {@link ScopeProvider} that can provide scoping for Android {@link View} classes.

File: android/autodispose-android/src/main/java/com/uber/autodispose/android/internal/AutoDisposeAndroidUtil.java
Patch:
@@ -20,7 +20,7 @@
 import android.os.Looper;
 import androidx.annotation.RestrictTo;
 import com.uber.autodispose.android.AutoDisposeAndroidPlugins;
-import io.reactivex.functions.BooleanSupplier;
+import io.reactivex.rxjava3.functions.BooleanSupplier;
 
 @RestrictTo(LIBRARY_GROUP)
 public class AutoDisposeAndroidUtil {

File: android/autodispose-android/src/main/java/com/uber/autodispose/android/internal/MainThreadDisposable.java
Patch:
@@ -18,8 +18,8 @@
 import static androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP;
 
 import androidx.annotation.RestrictTo;
-import io.reactivex.android.schedulers.AndroidSchedulers;
-import io.reactivex.disposables.Disposable;
+import io.reactivex.rxjava3.android.schedulers.AndroidSchedulers;
+import io.reactivex.rxjava3.disposables.Disposable;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 /**

File: autodispose-lifecycle/src/main/java/com/uber/autodispose/lifecycle/CorrespondingEventsFunction.java
Patch:
@@ -16,7 +16,7 @@
 package com.uber.autodispose.lifecycle;
 
 import com.uber.autodispose.OutsideScopeException;
-import io.reactivex.functions.Function;
+import io.reactivex.rxjava3.functions.Function;
 
 /**
  * A corresponding events function that acts as a normal {@link Function} but ensures a single event

File: autodispose-lifecycle/src/test/java/com/uber/autodispose/lifecycle/TestLifecycleScopeProviderTest.java
Patch:
@@ -19,7 +19,7 @@
 import static com.uber.autodispose.lifecycle.TestLifecycleScopeProvider.TestLifecycle.STARTED;
 import static com.uber.autodispose.lifecycle.TestLifecycleScopeProvider.TestLifecycle.STOPPED;
 
-import io.reactivex.subjects.Subject;
+import io.reactivex.rxjava3.subjects.Subject;
 import org.junit.Test;
 
 public class TestLifecycleScopeProviderTest {

File: autodispose-lifecycle/src/test/java/com/uber/autodispose/lifecycle/TestUtil.java
Patch:
@@ -15,9 +15,9 @@
  */
 package com.uber.autodispose.lifecycle;
 
-import io.reactivex.CompletableSource;
-import io.reactivex.Observable;
-import io.reactivex.subjects.BehaviorSubject;
+import io.reactivex.rxjava3.core.CompletableSource;
+import io.reactivex.rxjava3.core.Observable;
+import io.reactivex.rxjava3.subjects.BehaviorSubject;
 
 final class TestUtil {
   private static final CorrespondingEventsFunction<Integer> CORRESPONDING_EVENTS =

File: autodispose-rxlifecycle/src/main/java/com/ubercab/autodispose/rxlifecycle/RxLifecycleInterop.java
Patch:
@@ -40,7 +40,7 @@ private RxLifecycleInterop() {
    *
    * <pre><code>
    *   Observable.just(1)
-   *        .as(autoDisposable(RxLifecycleInterop.from(lifecycleProvider)))
+   *        .to(autoDisposable(RxLifecycleInterop.from(lifecycleProvider)))
    *        .subscribe(...)
    * </code></pre>
    *
@@ -59,7 +59,7 @@ public static <E> ScopeProvider from(final LifecycleProvider<E> provider) {
    *
    * <pre><code>
    *   Observable.just(1)
-   *        .as(autoDisposable(RxLifecycleInterop.from(lifecycleProvider, event)))
+   *        .to(autoDisposable(RxLifecycleInterop.from(lifecycleProvider, event)))
    *        .subscribe(...)
    * </code></pre>
    *

File: autodispose-rxlifecycle/src/test/java/com/ubercab/autodispose/rxlifecycle/TestLifecycleProvider.java
Patch:
@@ -19,9 +19,9 @@
 import com.trello.rxlifecycle2.LifecycleTransformer;
 import com.trello.rxlifecycle2.OutsideLifecycleException;
 import com.trello.rxlifecycle2.RxLifecycle;
-import io.reactivex.Observable;
-import io.reactivex.functions.Function;
-import io.reactivex.subjects.BehaviorSubject;
+import io.reactivex.rxjava3.core.Observable;
+import io.reactivex.rxjava3.functions.Function;
+import io.reactivex.rxjava3.subjects.BehaviorSubject;
 
 final class TestLifecycleProvider implements LifecycleProvider<TestLifecycleProvider.Event> {
 

File: autodispose-rxlifecycle3/src/main/java/com/ubercab/autodispose/rxlifecycle3/RxLifecycleInterop.java
Patch:
@@ -39,7 +39,7 @@ private RxLifecycleInterop() {
    *
    * <pre><code>
    *   Observable.just(1)
-   *        .as(autoDisposable(RxLifecycleInterop.from(lifecycleProvider)))
+   *        .to(autoDisposable(RxLifecycleInterop.from(lifecycleProvider)))
    *        .subscribe(...)
    * </code></pre>
    *
@@ -58,7 +58,7 @@ public static <E> ScopeProvider from(final LifecycleProvider<E> provider) {
    *
    * <pre><code>
    *   Observable.just(1)
-   *        .as(autoDisposable(RxLifecycleInterop.from(lifecycleProvider, event)))
+   *        .to(autoDisposable(RxLifecycleInterop.from(lifecycleProvider, event)))
    *        .subscribe(...)
    * </code></pre>
    *

File: autodispose-rxlifecycle3/src/test/java/com/ubercab/autodispose/rxlifecycle3/TestLifecycleProvider.java
Patch:
@@ -19,9 +19,9 @@
 import com.trello.rxlifecycle3.LifecycleTransformer;
 import com.trello.rxlifecycle3.OutsideLifecycleException;
 import com.trello.rxlifecycle3.RxLifecycle;
-import io.reactivex.Observable;
-import io.reactivex.functions.Function;
-import io.reactivex.subjects.BehaviorSubject;
+import io.reactivex.rxjava3.core.Observable;
+import io.reactivex.rxjava3.functions.Function;
+import io.reactivex.rxjava3.subjects.BehaviorSubject;
 
 final class TestLifecycleProvider implements LifecycleProvider<TestLifecycleProvider.Event> {
 

File: autodispose/src/main/java/com/uber/autodispose/AtomicThrowable.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.uber.autodispose;
 
-import io.reactivex.annotations.Nullable;
+import io.reactivex.rxjava3.annotations.Nullable;
 import java.util.concurrent.atomic.AtomicReference;
 
 /**

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposableHelper.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.uber.autodispose;
 
-import io.reactivex.disposables.Disposable;
+import io.reactivex.rxjava3.disposables.Disposable;
 import java.util.concurrent.atomic.AtomicReference;
 
 /**

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeCompletable.java
Patch:
@@ -15,9 +15,9 @@
  */
 package com.uber.autodispose;
 
-import io.reactivex.Completable;
-import io.reactivex.CompletableObserver;
-import io.reactivex.CompletableSource;
+import io.reactivex.rxjava3.core.Completable;
+import io.reactivex.rxjava3.core.CompletableObserver;
+import io.reactivex.rxjava3.core.CompletableSource;
 
 final class AutoDisposeCompletable extends Completable implements CompletableSubscribeProxy {
 

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeEndConsumerHelper.java
Patch:
@@ -14,9 +14,9 @@
 
 package com.uber.autodispose;
 
-import io.reactivex.disposables.Disposable;
-import io.reactivex.exceptions.ProtocolViolationException;
-import io.reactivex.plugins.RxJavaPlugins;
+import io.reactivex.rxjava3.disposables.Disposable;
+import io.reactivex.rxjava3.exceptions.ProtocolViolationException;
+import io.reactivex.rxjava3.plugins.RxJavaPlugins;
 import java.util.concurrent.atomic.AtomicReference;
 import org.reactivestreams.Subscription;
 

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeFlowable.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.uber.autodispose;
 
-import io.reactivex.CompletableSource;
-import io.reactivex.Flowable;
+import io.reactivex.rxjava3.core.CompletableSource;
+import io.reactivex.rxjava3.core.Flowable;
 import org.reactivestreams.Publisher;
 import org.reactivestreams.Subscriber;
 

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeParallelFlowable.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.uber.autodispose;
 
-import io.reactivex.CompletableSource;
-import io.reactivex.parallel.ParallelFlowable;
+import io.reactivex.rxjava3.core.CompletableSource;
+import io.reactivex.rxjava3.parallel.ParallelFlowable;
 import org.reactivestreams.Subscriber;
 
 final class AutoDisposeParallelFlowable<T> extends ParallelFlowable<T>

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposePlugins.java
Patch:
@@ -15,9 +15,9 @@
  */
 package com.uber.autodispose;
 
-import io.reactivex.Observable;
-import io.reactivex.annotations.Nullable;
-import io.reactivex.functions.Consumer;
+import io.reactivex.rxjava3.annotations.Nullable;
+import io.reactivex.rxjava3.core.Observable;
+import io.reactivex.rxjava3.functions.Consumer;
 
 /** Utility class to inject handlers to certain standard autodispose-lifecycle operations. */
 public final class AutoDisposePlugins {

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeUtil.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.uber.autodispose;
 
-import io.reactivex.annotations.Nullable;
+import io.reactivex.rxjava3.annotations.Nullable;
 
 final class AutoDisposeUtil {
 

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposingSubscriberImpl.java
Patch:
@@ -16,9 +16,9 @@
 package com.uber.autodispose;
 
 import com.uber.autodispose.observers.AutoDisposingSubscriber;
-import io.reactivex.CompletableSource;
-import io.reactivex.disposables.Disposable;
-import io.reactivex.observers.DisposableCompletableObserver;
+import io.reactivex.rxjava3.core.CompletableSource;
+import io.reactivex.rxjava3.disposables.Disposable;
+import io.reactivex.rxjava3.observers.DisposableCompletableObserver;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicReference;

File: autodispose/src/main/java/com/uber/autodispose/AutoSubscriptionHelper.java
Patch:
@@ -16,8 +16,8 @@
 
 package com.uber.autodispose;
 
-import io.reactivex.annotations.Nullable;
-import io.reactivex.plugins.RxJavaPlugins;
+import io.reactivex.rxjava3.annotations.Nullable;
+import io.reactivex.rxjava3.plugins.RxJavaPlugins;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicReference;
 import org.reactivestreams.Subscription;

File: autodispose/src/main/java/com/uber/autodispose/ExceptionHelper.java
Patch:
@@ -17,8 +17,8 @@
 
 package com.uber.autodispose;
 
-import io.reactivex.annotations.Nullable;
-import io.reactivex.exceptions.CompositeException;
+import io.reactivex.rxjava3.annotations.Nullable;
+import io.reactivex.rxjava3.exceptions.CompositeException;
 import java.util.concurrent.atomic.AtomicReference;
 
 /**

File: autodispose/src/main/java/com/uber/autodispose/HalfSerializer.java
Patch:
@@ -17,8 +17,8 @@
 
 package com.uber.autodispose;
 
-import io.reactivex.Observer;
-import io.reactivex.plugins.RxJavaPlugins;
+import io.reactivex.rxjava3.core.Observer;
+import io.reactivex.rxjava3.plugins.RxJavaPlugins;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.reactivestreams.Subscriber;
 

File: autodispose/src/main/java/com/uber/autodispose/ParallelFlowableSubscribeProxy.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.uber.autodispose;
 
-import io.reactivex.parallel.ParallelFlowable;
+import io.reactivex.rxjava3.parallel.ParallelFlowable;
 import org.reactivestreams.Subscriber;
 
 /** Subscribe proxy that matches {@link ParallelFlowable}'s subscribe overloads. */

File: autodispose/src/main/java/com/uber/autodispose/ScopeProvider.java
Patch:
@@ -16,9 +16,9 @@
 package com.uber.autodispose;
 
 import com.uber.autodispose.internal.DoNotMock;
-import io.reactivex.Completable;
-import io.reactivex.CompletableSource;
-import io.reactivex.annotations.CheckReturnValue;
+import io.reactivex.rxjava3.annotations.CheckReturnValue;
+import io.reactivex.rxjava3.core.Completable;
+import io.reactivex.rxjava3.core.CompletableSource;
 
 /**
  * Provides a {@link CompletableSource} representation of a scope. The emission of this is the

File: autodispose/src/main/java/com/uber/autodispose/Scopes.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.uber.autodispose;
 
-import io.reactivex.Completable;
-import io.reactivex.functions.Consumer;
+import io.reactivex.rxjava3.core.Completable;
+import io.reactivex.rxjava3.functions.Consumer;
 
 /** Utilities for dealing with AutoDispose scopes. */
 public final class Scopes {

File: autodispose/src/main/java/com/uber/autodispose/TestScopeProvider.java
Patch:
@@ -15,9 +15,9 @@
  */
 package com.uber.autodispose;
 
-import io.reactivex.Completable;
-import io.reactivex.CompletableSource;
-import io.reactivex.subjects.CompletableSubject;
+import io.reactivex.rxjava3.core.Completable;
+import io.reactivex.rxjava3.core.CompletableSource;
+import io.reactivex.rxjava3.subjects.CompletableSubject;
 
 /**
  * ScopeProvider implementation for testing. You can either back it with your own instance, or just

File: autodispose/src/main/java/com/uber/autodispose/observers/AutoDisposingCompletableObserver.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.uber.autodispose.observers;
 
-import io.reactivex.CompletableObserver;
-import io.reactivex.disposables.Disposable;
+import io.reactivex.rxjava3.core.CompletableObserver;
+import io.reactivex.rxjava3.disposables.Disposable;
 
 /**
  * A {@link Disposable} {@link CompletableObserver} that can automatically dispose itself. Interface

File: autodispose/src/main/java/com/uber/autodispose/observers/AutoDisposingMaybeObserver.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.uber.autodispose.observers;
 
-import io.reactivex.MaybeObserver;
-import io.reactivex.disposables.Disposable;
+import io.reactivex.rxjava3.core.MaybeObserver;
+import io.reactivex.rxjava3.disposables.Disposable;
 
 /**
  * A {@link Disposable} {@link MaybeObserver} that can automatically dispose itself. Interface here

File: autodispose/src/main/java/com/uber/autodispose/observers/AutoDisposingObserver.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.uber.autodispose.observers;
 
-import io.reactivex.Observer;
-import io.reactivex.disposables.Disposable;
+import io.reactivex.rxjava3.core.Observer;
+import io.reactivex.rxjava3.disposables.Disposable;
 
 /**
  * A {@link Disposable} {@link Observer} that can automatically dispose itself. Interface here for

File: autodispose/src/main/java/com/uber/autodispose/observers/AutoDisposingSingleObserver.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.uber.autodispose.observers;
 
-import io.reactivex.SingleObserver;
-import io.reactivex.disposables.Disposable;
+import io.reactivex.rxjava3.core.SingleObserver;
+import io.reactivex.rxjava3.disposables.Disposable;
 
 /**
  * A {@link Disposable} {@link SingleObserver} that can automatically dispose itself. Interface here

File: autodispose/src/main/java/com/uber/autodispose/observers/AutoDisposingSubscriber.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.uber.autodispose.observers;
 
-import io.reactivex.FlowableSubscriber;
-import io.reactivex.disposables.Disposable;
+import io.reactivex.rxjava3.core.FlowableSubscriber;
+import io.reactivex.rxjava3.disposables.Disposable;
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 

File: autodispose/src/main/java/com/uber/autodispose/package-info.java
Patch:
@@ -25,7 +25,7 @@
  * <p><code><pre>
  *   myObservable
  *     .doStuff()
- *     .as(autoDisposable(this))   // <-- AutoDispose
+ *     .to(autoDisposable(this))   // <-- AutoDispose
  *     .subscribe(s -> ...);
  * </pre></code>
  *

File: autodispose/src/test/java/com/uber/autodispose/TestScopeProviderTest.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.uber.autodispose;
 
-import io.reactivex.observers.TestObserver;
-import io.reactivex.subjects.CompletableSubject;
+import io.reactivex.rxjava3.observers.TestObserver;
+import io.reactivex.rxjava3.subjects.CompletableSubject;
 import org.junit.Test;
 
 public class TestScopeProviderTest {

File: autodispose/src/test/java/com/uber/autodispose/TestUtil.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.uber.autodispose;
 
-import io.reactivex.subjects.CompletableSubject;
+import io.reactivex.rxjava3.subjects.CompletableSubject;
 
 final class TestUtil {
 

File: sample/src/main/java/com/uber/autodispose/recipes/AutoDisposeActivity.java
Patch:
@@ -21,8 +21,8 @@
 import com.uber.autodispose.lifecycle.CorrespondingEventsFunction;
 import com.uber.autodispose.lifecycle.LifecycleEndedException;
 import com.uber.autodispose.lifecycle.LifecycleScopeProvider;
-import io.reactivex.Observable;
-import io.reactivex.subjects.BehaviorSubject;
+import io.reactivex.rxjava3.core.Observable;
+import io.reactivex.rxjava3.subjects.BehaviorSubject;
 
 /**
  * An {@link Activity} example implementation for making one implement {@link

File: sample/src/main/java/com/uber/autodispose/recipes/AutoDisposeFragment.java
Patch:
@@ -23,8 +23,8 @@
 import com.uber.autodispose.lifecycle.CorrespondingEventsFunction;
 import com.uber.autodispose.lifecycle.LifecycleEndedException;
 import com.uber.autodispose.lifecycle.LifecycleScopeProvider;
-import io.reactivex.Observable;
-import io.reactivex.subjects.BehaviorSubject;
+import io.reactivex.rxjava3.core.Observable;
+import io.reactivex.rxjava3.subjects.BehaviorSubject;
 
 /**
  * A {@link Fragment} example implementation for making one implement {@link

File: sample/src/main/java/com/uber/autodispose/recipes/AutoDisposeView.java
Patch:
@@ -25,8 +25,8 @@
 import com.uber.autodispose.lifecycle.CorrespondingEventsFunction;
 import com.uber.autodispose.lifecycle.LifecycleEndedException;
 import com.uber.autodispose.lifecycle.LifecycleScopeProvider;
-import io.reactivex.Observable;
-import io.reactivex.subjects.BehaviorSubject;
+import io.reactivex.rxjava3.core.Observable;
+import io.reactivex.rxjava3.subjects.BehaviorSubject;
 
 /**
  * An example implementation of an AutoDispose View with lifecycle handling and precondition checks

File: sample/src/main/java/com/uber/autodispose/recipes/AutoDisposeViewHolder.java
Patch:
@@ -20,9 +20,9 @@
 import com.uber.autodispose.lifecycle.CorrespondingEventsFunction;
 import com.uber.autodispose.lifecycle.LifecycleEndedException;
 import com.uber.autodispose.lifecycle.LifecycleScopeProvider;
-import io.reactivex.Observable;
-import io.reactivex.annotations.Nullable;
-import io.reactivex.subjects.BehaviorSubject;
+import io.reactivex.rxjava3.annotations.Nullable;
+import io.reactivex.rxjava3.core.Observable;
+import io.reactivex.rxjava3.subjects.BehaviorSubject;
 
 /**
  * Example implementation of a {@link androidx.recyclerview.widget.RecyclerView.ViewHolder}

File: sample/src/main/java/com/uber/autodispose/sample/ClassWithCustomScope.java
Patch:
@@ -18,14 +18,14 @@
 import static com.uber.autodispose.AutoDispose.autoDisposable;
 
 import com.uber.autodispose.ScopeProvider;
-import io.reactivex.Observable;
+import io.reactivex.rxjava3.core.Observable;
 
 public class ClassWithCustomScope implements CustomScope {
 
   void sampleCall() {
     // This class implements CustomScope, which we've informed the error prone and lint checks to
     // flag as a known type with a scope. If we comment out the autodispose line, this will fail
     // to compile or fail lint.
-    Observable.just(1).as(autoDisposable(ScopeProvider.UNBOUND)).subscribe();
+    Observable.just(1).to(autoDisposable(ScopeProvider.UNBOUND)).subscribe();
   }
 }

File: test-utils/src/main/java/com/uber/autodispose/test/RxErrorsRule.java
Patch:
@@ -17,9 +17,9 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-import io.reactivex.exceptions.CompositeException;
-import io.reactivex.exceptions.UndeliverableException;
-import io.reactivex.plugins.RxJavaPlugins;
+import io.reactivex.rxjava3.exceptions.CompositeException;
+import io.reactivex.rxjava3.exceptions.UndeliverableException;
+import io.reactivex.rxjava3.plugins.RxJavaPlugins;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.NoSuchElementException;

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeCompletable.java
Patch:
@@ -19,7 +19,7 @@
 import io.reactivex.CompletableObserver;
 import io.reactivex.CompletableSource;
 
-final class AutoDisposeCompletable extends Completable {
+final class AutoDisposeCompletable extends Completable implements CompletableSubscribeProxy {
 
   private final Completable source;
   private final CompletableSource scope;

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeFlowable.java
Patch:
@@ -20,7 +20,7 @@
 import org.reactivestreams.Publisher;
 import org.reactivestreams.Subscriber;
 
-final class AutoDisposeFlowable<T> extends Flowable<T> {
+final class AutoDisposeFlowable<T> extends Flowable<T> implements FlowableSubscribeProxy<T> {
   private final Publisher<T> source;
   private final CompletableSource scope;
 

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeMaybe.java
Patch:
@@ -20,7 +20,7 @@
 import io.reactivex.MaybeObserver;
 import io.reactivex.MaybeSource;
 
-final class AutoDisposeMaybe<T> extends Maybe<T> {
+final class AutoDisposeMaybe<T> extends Maybe<T> implements MaybeSubscribeProxy<T> {
   private final MaybeSource<T> source;
   private final CompletableSource scope;
 

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeObservable.java
Patch:
@@ -20,7 +20,7 @@
 import io.reactivex.ObservableSource;
 import io.reactivex.Observer;
 
-final class AutoDisposeObservable<T> extends Observable<T> {
+final class AutoDisposeObservable<T> extends Observable<T> implements ObservableSubscribeProxy<T> {
   private final ObservableSource<T> source;
   private final CompletableSource scope;
 

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeParallelFlowable.java
Patch:
@@ -19,7 +19,8 @@
 import io.reactivex.parallel.ParallelFlowable;
 import org.reactivestreams.Subscriber;
 
-final class AutoDisposeParallelFlowable<T> extends ParallelFlowable<T> {
+final class AutoDisposeParallelFlowable<T> extends ParallelFlowable<T>
+    implements ParallelFlowableSubscribeProxy<T> {
 
   private final ParallelFlowable<T> source;
   private final CompletableSource scope;

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeSingle.java
Patch:
@@ -20,7 +20,7 @@
 import io.reactivex.SingleObserver;
 import io.reactivex.SingleSource;
 
-final class AutoDisposeSingle<T> extends Single<T> {
+final class AutoDisposeSingle<T> extends Single<T> implements SingleSubscribeProxy<T> {
   private final SingleSource<T> source;
   private final CompletableSource scope;
 

File: autodispose/src/main/java/com/uber/autodispose/OutsideScopeException.java
Patch:
@@ -24,7 +24,7 @@ public OutsideScopeException(String s) {
 
   @Override
   public final synchronized Throwable fillInStackTrace() {
-    if (AutoDisposePlugins.getFillInOutsideScopeExceptionStacktraces()) {
+    if (AutoDisposePlugins.fillInOutsideScopeExceptionStacktraces) {
       return super.fillInStackTrace();
     } else {
       return this;

File: static-analysis/autodispose-error-prone/src/main/java/com/uber/autodispose/errorprone/AbstractReturnValueIgnored.java
Patch:
@@ -261,7 +261,7 @@ private Description describe(MethodInvocationTree methodInvocationTree, VisitorS
     String identifierStr = null;
     Type identifierType = null;
     if (identifierExpr != null) {
-      identifierStr = identifierExpr.toString();
+      identifierStr = state.getSourceForNode(identifierExpr);
       if (identifierExpr instanceof JCIdent) {
         identifierType = ((JCIdent) identifierExpr).sym.type;
       } else if (identifierExpr instanceof JCFieldAccess) {

File: static-analysis/autodispose-error-prone/src/main/java/com/uber/autodispose/errorprone/UseAutoDispose.java
Patch:
@@ -51,8 +51,8 @@
  */
 @AutoService(BugChecker.class)
 @BugPattern(name = "UseAutoDispose",
-    summary = "Always apply an AutoDispose scope before "
-        + "subscribing within defined scoped elements.",
+    summary = "Missing Disposable handling: Apply AutoDispose or cache "
+        + "the Disposable instance manually and enable lenient mode.",
     tags = CONCURRENCY,
     severity = ERROR)
 public final class UseAutoDispose extends AbstractReturnValueIgnored

File: sample/src/main/java/com/uber/autodispose/sample/CustomScope.java
Patch:
@@ -0,0 +1,3 @@
+package com.uber.autodispose.sample;
+
+public interface CustomScope {}

File: static-analysis/autodispose-error-prone-checker/src/main/java/com/uber/autodispose/errorprone/UseAutoDispose.java
Patch:
@@ -41,10 +41,10 @@
 
 /**
  * Checker for subscriptions not binding to lifecycle in components with lifecycle.
- * Use -XepOpt:ClassesWithScope flag to add support for custom components with lifecycle.
+ * Use -XepOpt:TypesWithScope flag to add support for custom components with lifecycle.
  * The sample configuration for Conductor:
  * <pre><code>
- *   -XepOpt:ClassesWithScope=com.bluelinelabs.conductor.Controller,android.app.Activity
+ *   -XepOpt:TypesWithScope=com.bluelinelabs.conductor.Controller,android.app.Activity
  * </code></pre>
  */
 @AutoService(BugChecker.class)
@@ -92,7 +92,7 @@ public UseAutoDispose() {
   @SuppressWarnings("WeakerAccess") // Public for ErrorProne
   public UseAutoDispose(ErrorProneFlags flags) {
     Optional<ImmutableSet<String>> inputClasses =
-        flags.getList("ClassesWithScope").map(ImmutableSet::copyOf);
+        flags.getList("TypesWithScope").map(ImmutableSet::copyOf);
 
     ImmutableSet<String> classesWithLifecycle = inputClasses.orElse(DEFAULT_CLASSES_WITH_LIFECYCLE);
     matcher = allOf(SUBSCRIBE_METHOD, matcher(classesWithLifecycle));

File: static-analysis/autodispose-error-prone-checker/src/test/java/com/uber/autodispose/errorprone/UseAutoDisposeTest.java
Patch:
@@ -41,7 +41,7 @@ public final class UseAutoDisposeTest {
   }
 
   @Test public void test_autodisposePositiveCasesWithCustomClass() {
-    compilationHelper.setArgs(ImmutableList.of("-XepOpt:ClassesWithScope"
+    compilationHelper.setArgs(ImmutableList.of("-XepOpt:TypesWithScope"
         + "=com.uber.autodispose.errorprone.ComponentWithLifecycle"));
     compilationHelper.addSourceFile("UseAutoDisposeCustomClassPositiveCases.java").doTest();
   }

File: autodispose/src/main/java/com/uber/autodispose/TestScopeProvider.java
Patch:
@@ -48,6 +48,7 @@ public static TestScopeProvider create(Completable delegate) {
 
   private final CompletableSubject innerScope = CompletableSubject.create();
 
+  @SuppressWarnings("AutoDisposeUsage")
   private TestScopeProvider(Completable delegate) {
     delegate.subscribe(innerScope);
   }

File: static-analysis/autodispose-error-prone-checker/src/test/resources/com/uber/autodispose/errorprone/UseAutoDisposeCustomClassPositiveCases.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.uber.autodispose.errorprone;
 
-import com.uber.autodispose.errorprone.ComponentWithLifecycle;
 import io.reactivex.Completable;
 import io.reactivex.Flowable;
 import io.reactivex.Maybe;
@@ -32,7 +31,7 @@ public void observable_subscribeWithoutAutoDispose() {
   }
 
   public void single_subscribeWithoutAutoDispose() {
-    Single.just(true)
+    Single.just(1)
         // BUG: Diagnostic contains: Always apply an AutoDispose scope before subscribing within defined scoped elements.
         .subscribe();
   }

File: lifecycle/autodispose-lifecycle/src/test/java/com/uber/autodispose/lifecycle/LifecycleScopesTest.java
Patch:
@@ -125,7 +125,7 @@ static class IntHolder {
 
     @Override public boolean equals(Object o) {
       if (this == o) return true;
-      if (o == null || getClass() != o.getClass()) return false;
+      if (!(o instanceof IntHolder)) return false;
 
       IntHolder intHolder = (IntHolder) o;
 

File: static-analysis/autodispose-error-prone-checker/src/main/java/com/uber/autodispose/errorprone/UseAutoDispose.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.uber.autodispose.error.prone.checker;
+package com.uber.autodispose.errorprone;
 
 import com.google.auto.service.AutoService;
 import com.google.common.collect.ImmutableList;

File: static-analysis/autodispose-error-prone-checker/src/test/java/com/uber/autodispose/errorprone/ComponentWithLifecycle.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 
-package com.uber.autodispose.error.prone.checker;
+package com.uber.autodispose.errorprone;
 
-public class ComponentWithLifeCycle {}
+public class ComponentWithLifecycle {}

File: static-analysis/autodispose-error-prone-checker/src/test/resources/com/uber/autodispose/errorprone/UseAutoDisposeCustomClassPositiveCases.java
Patch:
@@ -14,16 +14,17 @@
  * limitations under the License.
  */
 
-package com.uber.autodispose.error.prone.checker;
+package com.uber.autodispose.errorprone;
 
+import com.uber.autodispose.errorprone.ComponentWithLifecycle;
 import io.reactivex.Completable;
 import io.reactivex.Flowable;
 import io.reactivex.Maybe;
 import io.reactivex.Observable;
 import io.reactivex.Single;
 import org.reactivestreams.Subscriber;
 
-public class UseAutoDisposeCustomClassPositiveCases extends ComponentWithLifeCycle {
+public class UseAutoDisposeCustomClassPositiveCases extends ComponentWithLifecycle {
   public void observable_subscribeWithoutAutoDispose() {
     Observable.empty()
         // BUG: Diagnostic contains: Always apply an AutoDispose scope before subscribing within defined scoped elements.

File: static-analysis/autodispose-error-prone-checker/src/test/resources/com/uber/autodispose/errorprone/UseAutoDisposeDefaultClassPositiveCases.java
Patch:
@@ -14,8 +14,9 @@
  * limitations under the License.
  */
 
-package com.uber.autodispose.error.prone.checker;
+package com.uber.autodispose.errorprone;
 
+import com.uber.autodispose.errorprone.UseAutoDispose;
 import com.uber.autodispose.lifecycle.CorrespondingEventsFunction;
 import com.uber.autodispose.lifecycle.LifecycleEndedException;
 import com.uber.autodispose.lifecycle.LifecycleScopeProvider;

File: static-analysis/autodispose-error-prone-checker/src/test/resources/com/uber/autodispose/errorprone/UseAutoDisposeNegativeCases.java
Patch:
@@ -14,9 +14,10 @@
  * limitations under the License.
  */
 
-package com.uber.autodispose.error.prone.checker;
+package com.uber.autodispose.errorprone;
 
 import com.uber.autodispose.AutoDispose;
+import com.uber.autodispose.errorprone.UseAutoDispose;
 import com.uber.autodispose.lifecycle.CorrespondingEventsFunction;
 import com.uber.autodispose.lifecycle.LifecycleEndedException;
 import com.uber.autodispose.lifecycle.LifecycleScopeProvider;

File: lifecycle/autodispose-lifecycle-jdk8/src/test/java/com/uber/autodispose/lifecycle/jdk8/DefaultLifecycleScopeProviderTest.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.uber.autodispose.lifecycle.jdk8;
 
-import com.uber.autodispose.AutoDispose;
 import com.uber.autodispose.lifecycle.CorrespondingEventsFunction;
 import com.uber.autodispose.lifecycle.LifecycleEndedException;
 import com.uber.autodispose.test.RecordingObserver;
@@ -26,6 +25,7 @@
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
+import static com.uber.autodispose.AutoDispose.autoDisposable;
 
 public final class DefaultLifecycleScopeProviderTest {
 
@@ -67,7 +67,7 @@ static class ThingWithALifecycle implements DefaultLifecycleScopeProvider<Lifecy
     PublishSubject<Integer> source = PublishSubject.create();
     ThingWithALifecycle provider = new ThingWithALifecycle();
     BehaviorSubject<LifecycleEvent> lifecycle = provider.lifecycle;
-    source.as(AutoDispose.autoDisposable(provider))
+    source.as(autoDisposable(provider))
         .subscribe(o);
     o.takeSubscribe();
 

File: autodispose/src/main/java/com/uber/autodispose/AtomicThrowable.java
Patch:
@@ -17,8 +17,8 @@
 
 package com.uber.autodispose;
 
+import io.reactivex.annotations.Nullable;
 import java.util.concurrent.atomic.AtomicReference;
-import org.jetbrains.annotations.Nullable;
 
 /**
  * Atomic container for Throwables including combining and having a

File: autodispose/src/main/java/com/uber/autodispose/AutoDispose.java
Patch:
@@ -45,7 +45,7 @@
  * {@code as(...)} methods to transform them into auto-disposing streams.
  * <p>
  * There are several static {@code autoDisposable(...)} entry points, with the most basic being a
- * simple {@link #autoDisposable(Completable)}. The provided {@link Completable} is ultimately what
+ * simple {@link #autoDisposable(CompletableSource)}. The provided {@link CompletableSource} is ultimately what
  * every scope resolves to under the hood, and AutoDispose has some built-in understanding for
  * predefined types. The scope is considered ended upon onComplete emission of this
  * {@link Completable}.
@@ -98,7 +98,7 @@ public static <T> AutoDisposeConverter<T> autoDisposable(final ScopeProvider pro
   }
 
   /**
-   * Entry point for auto-disposing streams from a {@link Maybe}.
+   * Entry point for auto-disposing streams from a {@link CompletableSource}.
    * <p>
    * Example usage:
    * <pre><code>
@@ -112,7 +112,7 @@ public static <T> AutoDisposeConverter<T> autoDisposable(final ScopeProvider pro
    * @return an {@link AutoDisposeConverter} to transform with operators like
    * {@link Observable#as(ObservableConverter)}
    */
-  public static <T> AutoDisposeConverter<T> autoDisposable(final Completable scope) {
+  public static <T> AutoDisposeConverter<T> autoDisposable(final CompletableSource scope) {
     checkNotNull(scope, "scope == null");
     return new AutoDisposeConverter<T>() {
       @Override public ParallelFlowableSubscribeProxy<T> apply(final ParallelFlowable<T> upstream) {

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeCompletable.java
Patch:
@@ -18,13 +18,14 @@
 
 import io.reactivex.Completable;
 import io.reactivex.CompletableObserver;
+import io.reactivex.CompletableSource;
 
 final class AutoDisposeCompletable extends Completable {
 
   private final Completable source;
-  private final Completable scope;
+  private final CompletableSource scope;
 
-  AutoDisposeCompletable(Completable source, Completable scope) {
+  AutoDisposeCompletable(Completable source, CompletableSource scope) {
     this.source = source;
     this.scope = scope;
   }

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeFlowable.java
Patch:
@@ -16,16 +16,16 @@
 
 package com.uber.autodispose;
 
-import io.reactivex.Completable;
+import io.reactivex.CompletableSource;
 import io.reactivex.Flowable;
 import org.reactivestreams.Publisher;
 import org.reactivestreams.Subscriber;
 
 final class AutoDisposeFlowable<T> extends Flowable<T> {
   private final Publisher<T> source;
-  private final Completable scope;
+  private final CompletableSource scope;
 
-  AutoDisposeFlowable(Publisher<T> source, Completable scope) {
+  AutoDisposeFlowable(Publisher<T> source, CompletableSource scope) {
     this.source = source;
     this.scope = scope;
   }

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeMaybe.java
Patch:
@@ -17,16 +17,16 @@
 
 package com.uber.autodispose;
 
-import io.reactivex.Completable;
+import io.reactivex.CompletableSource;
 import io.reactivex.Maybe;
 import io.reactivex.MaybeObserver;
 import io.reactivex.MaybeSource;
 
 final class AutoDisposeMaybe<T> extends Maybe<T> {
   private final MaybeSource<T> source;
-  private final Completable scope;
+  private final CompletableSource scope;
 
-  AutoDisposeMaybe(MaybeSource<T> source, Completable scope) {
+  AutoDisposeMaybe(MaybeSource<T> source, CompletableSource scope) {
     this.source = source;
     this.scope = scope;
   }

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeObservable.java
Patch:
@@ -17,16 +17,16 @@
 
 package com.uber.autodispose;
 
-import io.reactivex.Completable;
+import io.reactivex.CompletableSource;
 import io.reactivex.Observable;
 import io.reactivex.ObservableSource;
 import io.reactivex.Observer;
 
 final class AutoDisposeObservable<T> extends Observable<T> {
   private final ObservableSource<T> source;
-  private final Completable scope;
+  private final CompletableSource scope;
 
-  AutoDisposeObservable(ObservableSource<T> source, Completable scope) {
+  AutoDisposeObservable(ObservableSource<T> source, CompletableSource scope) {
     this.source = source;
     this.scope = scope;
   }

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeParallelFlowable.java
Patch:
@@ -1,15 +1,15 @@
 package com.uber.autodispose;
 
-import io.reactivex.Completable;
+import io.reactivex.CompletableSource;
 import io.reactivex.parallel.ParallelFlowable;
 import org.reactivestreams.Subscriber;
 
 final class AutoDisposeParallelFlowable<T> extends ParallelFlowable<T> {
 
   private final ParallelFlowable<T> source;
-  private final Completable scope;
+  private final CompletableSource scope;
 
-  AutoDisposeParallelFlowable(ParallelFlowable<T> source, Completable scope) {
+  AutoDisposeParallelFlowable(ParallelFlowable<T> source, CompletableSource scope) {
     this.source = source;
     this.scope = scope;
   }

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposePlugins.java
Patch:
@@ -16,8 +16,8 @@
 
 package com.uber.autodispose;
 
+import io.reactivex.annotations.Nullable;
 import io.reactivex.functions.Consumer;
-import org.jetbrains.annotations.Nullable;
 
 /**
  * Utility class to inject handlers to certain standard autodispose-lifecycle operations.

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeSingle.java
Patch:
@@ -16,16 +16,16 @@
 
 package com.uber.autodispose;
 
-import io.reactivex.Completable;
+import io.reactivex.CompletableSource;
 import io.reactivex.Single;
 import io.reactivex.SingleObserver;
 import io.reactivex.SingleSource;
 
 final class AutoDisposeSingle<T> extends Single<T> {
   private final SingleSource<T> source;
-  private final Completable scope;
+  private final CompletableSource scope;
 
-  AutoDisposeSingle(SingleSource<T> source, Completable scope) {
+  AutoDisposeSingle(SingleSource<T> source, CompletableSource scope) {
     this.source = source;
     this.scope = scope;
   }

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeUtil.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.uber.autodispose;
 
-import org.jetbrains.annotations.Nullable;
+import io.reactivex.annotations.Nullable;
 
 final class AutoDisposeUtil {
 

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposingCompletableObserverImpl.java
Patch:
@@ -17,8 +17,8 @@
 package com.uber.autodispose;
 
 import com.uber.autodispose.observers.AutoDisposingCompletableObserver;
-import io.reactivex.Completable;
 import io.reactivex.CompletableObserver;
+import io.reactivex.CompletableSource;
 import io.reactivex.disposables.Disposable;
 import io.reactivex.observers.DisposableCompletableObserver;
 import java.util.concurrent.atomic.AtomicReference;
@@ -29,10 +29,10 @@ final class AutoDisposingCompletableObserverImpl implements AutoDisposingComplet
   final AtomicReference<Disposable> mainDisposable = new AtomicReference<>();
   @SuppressWarnings("WeakerAccess") // Package private for synthetic accessor saving
   final AtomicReference<Disposable> scopeDisposable = new AtomicReference<>();
-  private final Completable scope;
+  private final CompletableSource scope;
   private final CompletableObserver delegate;
 
-  AutoDisposingCompletableObserverImpl(Completable scope, CompletableObserver delegate) {
+  AutoDisposingCompletableObserverImpl(CompletableSource scope, CompletableObserver delegate) {
     this.scope = scope;
     this.delegate = delegate;
   }

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposingMaybeObserverImpl.java
Patch:
@@ -17,7 +17,7 @@
 package com.uber.autodispose;
 
 import com.uber.autodispose.observers.AutoDisposingMaybeObserver;
-import io.reactivex.Completable;
+import io.reactivex.CompletableSource;
 import io.reactivex.MaybeObserver;
 import io.reactivex.disposables.Disposable;
 import io.reactivex.observers.DisposableCompletableObserver;
@@ -29,10 +29,10 @@ final class AutoDisposingMaybeObserverImpl<T> implements AutoDisposingMaybeObser
   final AtomicReference<Disposable> mainDisposable = new AtomicReference<>();
   @SuppressWarnings("WeakerAccess") // Package private for synthetic accessor saving
   final AtomicReference<Disposable> scopeDisposable = new AtomicReference<>();
-  private final Completable scope;
+  private final CompletableSource scope;
   private final MaybeObserver<? super T> delegate;
 
-  AutoDisposingMaybeObserverImpl(Completable scope, MaybeObserver<? super T> delegate) {
+  AutoDisposingMaybeObserverImpl(CompletableSource scope, MaybeObserver<? super T> delegate) {
     this.scope = scope;
     this.delegate = delegate;
   }

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposingObserverImpl.java
Patch:
@@ -17,7 +17,7 @@
 package com.uber.autodispose;
 
 import com.uber.autodispose.observers.AutoDisposingObserver;
-import io.reactivex.Completable;
+import io.reactivex.CompletableSource;
 import io.reactivex.Observer;
 import io.reactivex.disposables.Disposable;
 import io.reactivex.observers.DisposableCompletableObserver;
@@ -31,10 +31,10 @@ final class AutoDisposingObserverImpl<T> extends AtomicInteger implements AutoDi
   @SuppressWarnings("WeakerAccess") // Package private for synthetic accessor saving
   final AtomicReference<Disposable> scopeDisposable = new AtomicReference<>();
   private final AtomicThrowable error = new AtomicThrowable();
-  private final Completable scope;
+  private final CompletableSource scope;
   private final Observer<? super T> delegate;
 
-  AutoDisposingObserverImpl(Completable scope, Observer<? super T> delegate) {
+  AutoDisposingObserverImpl(CompletableSource scope, Observer<? super T> delegate) {
     this.scope = scope;
     this.delegate = delegate;
   }

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposingSingleObserverImpl.java
Patch:
@@ -17,7 +17,7 @@
 package com.uber.autodispose;
 
 import com.uber.autodispose.observers.AutoDisposingSingleObserver;
-import io.reactivex.Completable;
+import io.reactivex.CompletableSource;
 import io.reactivex.SingleObserver;
 import io.reactivex.disposables.Disposable;
 import io.reactivex.observers.DisposableCompletableObserver;
@@ -29,10 +29,10 @@ final class AutoDisposingSingleObserverImpl<T> implements AutoDisposingSingleObs
   final AtomicReference<Disposable> mainDisposable = new AtomicReference<>();
   @SuppressWarnings("WeakerAccess") // Package private for synthetic accessor saving
   final AtomicReference<Disposable> scopeDisposable = new AtomicReference<>();
-  private final Completable scope;
+  private final CompletableSource scope;
   private final SingleObserver<? super T> delegate;
 
-  AutoDisposingSingleObserverImpl(Completable scope, SingleObserver<? super T> delegate) {
+  AutoDisposingSingleObserverImpl(CompletableSource scope, SingleObserver<? super T> delegate) {
     this.scope = scope;
     this.delegate = delegate;
   }

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposingSubscriberImpl.java
Patch:
@@ -17,7 +17,7 @@
 package com.uber.autodispose;
 
 import com.uber.autodispose.observers.AutoDisposingSubscriber;
-import io.reactivex.Completable;
+import io.reactivex.CompletableSource;
 import io.reactivex.disposables.Disposable;
 import io.reactivex.observers.DisposableCompletableObserver;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -35,10 +35,10 @@ final class AutoDisposingSubscriberImpl<T> extends AtomicInteger implements Auto
   private final AtomicThrowable error = new AtomicThrowable();
   private final AtomicReference<Subscription> ref = new AtomicReference<>();
   private final AtomicLong requested = new AtomicLong();
-  private final Completable scope;
+  private final CompletableSource scope;
   private final Subscriber<? super T> delegate;
 
-  AutoDisposingSubscriberImpl(Completable scope, Subscriber<? super T> delegate) {
+  AutoDisposingSubscriberImpl(CompletableSource scope, Subscriber<? super T> delegate) {
     this.scope = scope;
     this.delegate = delegate;
   }

File: autodispose/src/main/java/com/uber/autodispose/AutoSubscriptionHelper.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.uber.autodispose;
 
+import io.reactivex.annotations.Nullable;
 import io.reactivex.plugins.RxJavaPlugins;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicReference;
-import org.jetbrains.annotations.Nullable;
 import org.reactivestreams.Subscription;
 
 /**

File: autodispose/src/main/java/com/uber/autodispose/ExceptionHelper.java
Patch:
@@ -17,9 +17,9 @@
 
 package com.uber.autodispose;
 
+import io.reactivex.annotations.Nullable;
 import io.reactivex.exceptions.CompositeException;
 import java.util.concurrent.atomic.AtomicReference;
-import org.jetbrains.annotations.Nullable;
 
 /**
  * Terminal atomics for Throwable containers.

File: autodispose/src/main/java/com/uber/autodispose/ScopeProvider.java
Patch:
@@ -19,11 +19,10 @@
 import com.uber.autodispose.internal.DoNotMock;
 import io.reactivex.Completable;
 import io.reactivex.CompletableSource;
-import io.reactivex.Maybe;
 import io.reactivex.annotations.CheckReturnValue;
 
 /**
- * Proves a {@link Maybe} representation of a scope. The emission of this is the signal
+ * Provides a {@link CompletableSource} representation of a scope. The emission of this is the signal
  */
 @DoNotMock(value = "Use TestScopeProvider instead")
 public interface ScopeProvider {

File: autodispose/src/main/java/com/uber/autodispose/TestScopeProvider.java
Patch:
@@ -27,7 +27,7 @@
 public final class TestScopeProvider implements ScopeProvider {
 
   /**
-   * Creates a new provider backed by an internal MaybeSubject. Useful for stubbing or if you only
+   * Creates a new provider backed by an internal {@link CompletableSubject}. Useful for stubbing or if you only
    * want to use the emit APIs
    *
    * @return the created TestScopeProvider.

File: lifecycle/autodispose-lifecycle/src/main/java/com/uber/autodispose/lifecycle/TestLifecycleScopeProvider.java
Patch:
@@ -18,8 +18,8 @@
 
 import io.reactivex.CompletableSource;
 import io.reactivex.Observable;
+import io.reactivex.annotations.Nullable;
 import io.reactivex.subjects.BehaviorSubject;
-import org.jetbrains.annotations.Nullable;
 
 /**
  * Test utility to create {@link LifecycleScopeProvider} instances for tests.

File: sample/src/main/java/com/uber/autodispose/recipes/AutoDisposeViewHolder.java
Patch:
@@ -22,8 +22,8 @@
 import com.uber.autodispose.lifecycle.LifecycleEndedException;
 import com.uber.autodispose.lifecycle.LifecycleScopeProvider;
 import io.reactivex.Observable;
+import io.reactivex.annotations.Nullable;
 import io.reactivex.subjects.BehaviorSubject;
-import org.jetbrains.annotations.Nullable;
 
 /**
  * Example implementation of a {@link android.support.v7.widget.RecyclerView.ViewHolder}

File: static-analysis/autodispose-error-prone-checker/src/test/resources/com/uber/autodispose/error/prone/checker/UseAutoDisposeDefaultClassPositiveCases.java
Patch:
@@ -28,8 +28,8 @@
 import io.reactivex.Observable;
 import io.reactivex.Single;
 import io.reactivex.annotations.CheckReturnValue;
+import io.reactivex.annotations.Nullable;
 import io.reactivex.subjects.BehaviorSubject;
-import org.jetbrains.annotations.Nullable;
 import org.reactivestreams.Subscriber;
 
 /**

File: static-analysis/autodispose-error-prone-checker/src/test/resources/com/uber/autodispose/error/prone/checker/UseAutoDisposeNegativeCases.java
Patch:
@@ -29,8 +29,8 @@
 import io.reactivex.Observable;
 import io.reactivex.Single;
 import io.reactivex.annotations.CheckReturnValue;
+import io.reactivex.annotations.Nullable;
 import io.reactivex.subjects.BehaviorSubject;
-import org.jetbrains.annotations.Nullable;
 import org.reactivestreams.Subscriber;
 
 /**

File: android/autodispose-android-archcomponents-test/src/main/java/com/uber/autodispose/android/lifecycle/test/TestLifecycleOwner.java
Patch:
@@ -28,7 +28,8 @@
  * A test {@link LifecycleOwner} implementation for testing. You can either back it with
  * your own instance or just stub it in place and use its public emit() API.
  */
-@RestrictTo(TESTS) public final class TestLifecycleOwner implements LifecycleOwner {
+@RestrictTo(TESTS)
+public final class TestLifecycleOwner implements LifecycleOwner {
 
   private final LifecycleRegistry registry;
 

File: android/autodispose-android/src/androidTest/java/com/uber/autodispose/android/ViewScopeProviderTest.java
Patch:
@@ -35,7 +35,8 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-@RunWith(AndroidJUnit4.class) public final class ViewScopeProviderTest {
+@RunWith(AndroidJUnit4.class)
+public final class ViewScopeProviderTest {
 
   private static final RecordingObserver.Logger LOGGER = new RecordingObserver.Logger() {
     @Override public void log(String message) {

File: autodispose-rxlifecycle/src/test/java/com/ubercab/autodispose/rxlifecycle/RxLifecycleInteropTest.java
Patch:
@@ -39,9 +39,8 @@ public class RxLifecycleInteropTest {
     lifecycleProvider.emitCreate();
     TestObserver<Integer> o = new TestObserver<>();
     PublishSubject<Integer> source = PublishSubject.create();
-    Disposable d =
-        source.as(AutoDispose.<Integer>autoDisposable(RxLifecycleInterop.from(lifecycleProvider)))
-            .subscribeWith(o);
+    Disposable d = source.as(AutoDispose.<Integer>autoDisposable(RxLifecycleInterop.from(lifecycleProvider)))
+        .subscribeWith(o);
     o.assertSubscribed();
 
     assertThat(source.hasObservers()).isTrue();

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeConverter.java
Patch:
@@ -34,5 +34,4 @@ public interface AutoDisposeConverter<T> extends FlowableConverter<T, FlowableSu
     ObservableConverter<T, ObservableSubscribeProxy<T>>,
     MaybeConverter<T, MaybeSubscribeProxy<T>>,
     SingleConverter<T, SingleSubscribeProxy<T>>,
-    CompletableConverter<CompletableSubscribeProxy> {
-}
+    CompletableConverter<CompletableSubscribeProxy> {}

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeFlowable.java
Patch:
@@ -16,16 +16,16 @@
 
 package com.uber.autodispose;
 
+import io.reactivex.Completable;
 import io.reactivex.Flowable;
-import io.reactivex.Maybe;
 import org.reactivestreams.Publisher;
 import org.reactivestreams.Subscriber;
 
 final class AutoDisposeFlowable<T> extends Flowable<T> {
   private final Publisher<T> source;
-  private final Maybe<?> scope;
+  private final Completable scope;
 
-  AutoDisposeFlowable(Publisher<T> source, Maybe<?> scope) {
+  AutoDisposeFlowable(Publisher<T> source, Completable scope) {
     this.source = source;
     this.scope = scope;
   }

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeMaybe.java
Patch:
@@ -17,15 +17,16 @@
 
 package com.uber.autodispose;
 
+import io.reactivex.Completable;
 import io.reactivex.Maybe;
 import io.reactivex.MaybeObserver;
 import io.reactivex.MaybeSource;
 
 final class AutoDisposeMaybe<T> extends Maybe<T> {
   private final MaybeSource<T> source;
-  private final Maybe<?> scope;
+  private final Completable scope;
 
-  AutoDisposeMaybe(MaybeSource<T> source, Maybe<?> scope) {
+  AutoDisposeMaybe(MaybeSource<T> source, Completable scope) {
     this.source = source;
     this.scope = scope;
   }

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeObservable.java
Patch:
@@ -17,16 +17,16 @@
 
 package com.uber.autodispose;
 
-import io.reactivex.Maybe;
+import io.reactivex.Completable;
 import io.reactivex.Observable;
 import io.reactivex.ObservableSource;
 import io.reactivex.Observer;
 
 final class AutoDisposeObservable<T> extends Observable<T> {
   private final ObservableSource<T> source;
-  private final Maybe<?> scope;
+  private final Completable scope;
 
-  AutoDisposeObservable(ObservableSource<T> source, Maybe<?> scope) {
+  AutoDisposeObservable(ObservableSource<T> source, Completable scope) {
     this.source = source;
     this.scope = scope;
   }

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposePlugins.java
Patch:
@@ -70,8 +70,7 @@ public static boolean getFillInOutsideScopeExceptionStacktraces() {
   /**
    * @param handler the consumer for handling {@link OutsideScopeException} to set, null allowed
    */
-  public static void setOutsideScopeHandler(
-      @Nullable Consumer<? super OutsideScopeException> handler) {
+  public static void setOutsideScopeHandler(@Nullable Consumer<? super OutsideScopeException> handler) {
     if (lockdown) {
       throw new IllegalStateException("Plugins can't be changed anymore");
     }

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeSingle.java
Patch:
@@ -16,16 +16,16 @@
 
 package com.uber.autodispose;
 
-import io.reactivex.Maybe;
+import io.reactivex.Completable;
 import io.reactivex.Single;
 import io.reactivex.SingleObserver;
 import io.reactivex.SingleSource;
 
 final class AutoDisposeSingle<T> extends Single<T> {
   private final SingleSource<T> source;
-  private final Maybe<?> scope;
+  private final Completable scope;
 
-  AutoDisposeSingle(SingleSource<T> source, Maybe<?> scope) {
+  AutoDisposeSingle(SingleSource<T> source, Completable scope) {
     this.source = source;
     this.scope = scope;
   }

File: autodispose/src/main/java/com/uber/autodispose/AutoSubscriptionHelper.java
Patch:
@@ -224,9 +224,7 @@ static boolean cancel(AtomicReference<Subscription> field) {
    * @param s the new Subscription, not null (verified)
    * @return true if the Subscription was set the first time
    */
-  static boolean deferredSetOnce(AtomicReference<Subscription> field,
-      AtomicLong requested,
-      Subscription s) {
+  static boolean deferredSetOnce(AtomicReference<Subscription> field, AtomicLong requested, Subscription s) {
     if (AutoSubscriptionHelper.setOnce(field, s)) {
       long r = requested.getAndSet(0L);
       if (r != 0L) {

File: autodispose/src/main/java/com/uber/autodispose/MaybeSubscribeProxy.java
Patch:
@@ -55,8 +55,7 @@ public interface MaybeSubscribeProxy<T> {
    *
    * @return a {@link Disposable}
    */
-  Disposable subscribe(Consumer<? super T> onSuccess, Consumer<? super Throwable> onError,
-      Action onComplete);
+  Disposable subscribe(Consumer<? super T> onSuccess, Consumer<? super Throwable> onError, Action onComplete);
 
   /**
    * Proxy for {@link Maybe#subscribe(MaybeObserver)}.

File: autodispose/src/main/java/com/uber/autodispose/observers/AutoDisposingSubscriber.java
Patch:
@@ -25,8 +25,7 @@
  * A {@link Disposable} {@link Subscriber} that can automatically dispose itself. Interface here
  * for type safety but enforcement is left to the implementation.
  */
-public interface AutoDisposingSubscriber<T>
-        extends FlowableSubscriber<T>, Subscription, Disposable {
+public interface AutoDisposingSubscriber<T> extends FlowableSubscriber<T>, Subscription, Disposable {
 
   /**
    * @return The delegate {@link Subscriber} that is used under the hood for introspection

File: autodispose/src/main/java/com/uber/autodispose/observers/package-info.java
Patch:
@@ -16,7 +16,7 @@
 
 /**
  * These are Observers AutoDispose uses when scoping an observable. They are exposed as a public API
- *  to allow for consumers to watch for them if they want, such as in RxJava plugins.
+ * to allow for consumers to watch for them if they want, such as in RxJava plugins.
  */
 package com.uber.autodispose.observers;
 

File: lifecycle/autodispose-lifecycle-jdk8/src/main/java/com/uber/autodispose/lifecycle/jdk8/DefaultLifecycleScopeProvider.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.uber.autodispose.lifecycle.LifecycleScopeProvider;
 import com.uber.autodispose.lifecycle.LifecycleScopes;
-import io.reactivex.Maybe;
+import io.reactivex.CompletableSource;
 
 /**
  * A convenience {@link LifecycleScopeProvider} that has a default implementation for
@@ -28,7 +28,7 @@
  */
 public interface DefaultLifecycleScopeProvider<E> extends LifecycleScopeProvider<E> {
 
-  @Override default Maybe<?> requestScope() {
+  @Override default CompletableSource requestScope() {
     return LifecycleScopes.resolveScopeFromLifecycle(this);
   }
 }

File: lifecycle/autodispose-lifecycle/src/main/java/com/uber/autodispose/lifecycle/TestLifecycleScopeProvider.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.uber.autodispose.lifecycle;
 
-import io.reactivex.Maybe;
+import io.reactivex.CompletableSource;
 import io.reactivex.Observable;
 import io.reactivex.subjects.BehaviorSubject;
 import org.jetbrains.annotations.Nullable;
@@ -81,7 +81,7 @@ public static TestLifecycleScopeProvider createInitial(TestLifecycle initialValu
     return lifecycleSubject.getValue();
   }
 
-  @Override public Maybe<?> requestScope() {
+  @Override public CompletableSource requestScope() {
     return LifecycleScopes.resolveScopeFromLifecycle(this);
   }
 

File: static-analysis/autodispose-error-prone-checker/src/test/java/com/uber/autodispose/error/prone/checker/ComponentWithLifeCycle.java
Patch:
@@ -16,4 +16,4 @@
 
 package com.uber.autodispose.error.prone.checker;
 
-public class ComponentWithLifeCycle { }
+public class ComponentWithLifeCycle {}

File: test-utils/src/main/java/com/uber/autodispose/test/RecordingObserver.java
Patch:
@@ -75,8 +75,7 @@ private <E> E takeEvent(Class<E> wanted) {
       throw new RuntimeException(e);
     }
     if (event == null) {
-      throw new NoSuchElementException(
-          "No event found while waiting for " + wanted.getSimpleName());
+      throw new NoSuchElementException("No event found while waiting for " + wanted.getSimpleName());
     }
     assertThat(event).isInstanceOf(wanted);
     return wanted.cast(event);

File: test-utils/src/main/java/com/uber/autodispose/test/RxErrorsRule.java
Patch:
@@ -34,8 +34,8 @@
 /**
  * JUnit rule to record RxJava errors.
  */
-@SuppressWarnings("ThrowableResultOfMethodCallIgnored") public class RxErrorsRule
-    extends TestWatcher {
+@SuppressWarnings("ThrowableResultOfMethodCallIgnored")
+public class RxErrorsRule extends TestWatcher {
 
   private BlockingDeque<Throwable> errors = new LinkedBlockingDeque<>();
 

File: android/autodispose-android-archcomponents/src/androidTest/java/com/uber/autodispose/android/lifecycle/AndroidLifecycleScopeProviderTest.java
Patch:
@@ -21,7 +21,7 @@
 import android.support.test.runner.AndroidJUnit4;
 import android.util.Log;
 import com.uber.autodispose.AutoDispose;
-import com.uber.autodispose.LifecycleEndedException;
+import com.uber.autodispose.lifecycle.LifecycleEndedException;
 import com.uber.autodispose.android.lifecycle.test.TestLifecycleOwner;
 import com.uber.autodispose.test.RecordingObserver;
 import io.reactivex.disposables.Disposable;

File: android/autodispose-android/src/androidTest/java/com/uber/autodispose/android/ViewScopeProviderTest.java
Patch:
@@ -24,7 +24,7 @@
 import android.view.View;
 import android.widget.FrameLayout;
 import com.uber.autodispose.AutoDispose;
-import com.uber.autodispose.OutsideLifecycleException;
+import com.uber.autodispose.OutsideScopeException;
 import com.uber.autodispose.test.RecordingObserver;
 import io.reactivex.disposables.Disposable;
 import io.reactivex.subjects.PublishSubject;
@@ -128,7 +128,7 @@
 
     Disposable d = o.takeSubscribe();
     Throwable t = o.takeError();
-    assertThat(t).isInstanceOf(OutsideLifecycleException.class);
+    assertThat(t).isInstanceOf(OutsideScopeException.class);
     o.assertNoMoreEvents();
     assertThat(d.isDisposed()).isTrue();
   }
@@ -156,7 +156,7 @@
 
     Disposable d = o.takeSubscribe();
     Throwable t = o.takeError();
-    assertThat(t).isInstanceOf(OutsideLifecycleException.class);
+    assertThat(t).isInstanceOf(OutsideScopeException.class);
     o.assertNoMoreEvents();
     assertThat(d.isDisposed()).isTrue();
   }

File: android/autodispose-android/src/main/java/com/uber/autodispose/android/DetachEventMaybe.java
Patch:
@@ -19,7 +19,7 @@
 import android.os.Build;
 import android.support.annotation.RestrictTo;
 import android.view.View;
-import com.uber.autodispose.LifecycleNotStartedException;
+import com.uber.autodispose.OutsideScopeException;
 import io.reactivex.Maybe;
 import io.reactivex.MaybeObserver;
 import io.reactivex.android.MainThreadDisposable;
@@ -50,7 +50,7 @@ final class DetachEventMaybe extends Maybe<Object> {
         (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT && view.isAttachedToWindow())
             || view.getWindowToken() != null;
     if (!isAttached) {
-      observer.onError(new LifecycleNotStartedException("View is not attached!"));
+      observer.onError(new OutsideScopeException("View is not attached!"));
       return;
     }
 

File: android/autodispose-android/src/test/java/com/uber/autodispose/android/AutoDisposeAndroidPluginsTest.java
Patch:
@@ -20,13 +20,14 @@
 import com.uber.autodispose.android.internal.AutoDisposeAndroidUtil;
 import io.reactivex.functions.BooleanSupplier;
 import org.junit.After;
+import org.junit.Before;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
 
 public final class AutoDisposeAndroidPluginsTest {
 
-  @After public void tearDown() {
+  @Before @After public void resetPlugins() {
     AutoDisposePlugins.reset();
   }
 

File: autodispose-rxlifecycle/src/main/java/com/ubercab/autodispose/rxlifecycle/RxLifecycleInterop.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.trello.rxlifecycle2.LifecycleProvider;
 import com.trello.rxlifecycle2.OutsideLifecycleException;
-import com.uber.autodispose.LifecycleEndedException;
 import com.uber.autodispose.ScopeProvider;
 import io.reactivex.Maybe;
 
@@ -27,8 +26,7 @@
  * LifecycleProvider}s into {@link ScopeProvider} representations.
  *
  * <em>Note:</em> RxLifecycle treats the {@link OutsideLifecycleException}
- * as normal terminal event. There is no mapping to {@link LifecycleEndedException} and in such
- * cases the stream is just disposed.
+ * as normal terminal event. In such cases the stream is just disposed.
  */
 public final class RxLifecycleInterop {
 

File: autodispose/src/main/java/com/uber/autodispose/ScopeProvider.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.uber.autodispose;
 
+import com.uber.autodispose.internal.DoNotMock;
 import io.reactivex.Maybe;
 import io.reactivex.annotations.CheckReturnValue;
 
@@ -37,6 +38,7 @@ public interface ScopeProvider {
 
   /**
    * @return a Maybe that, upon emission, will trigger disposal.
+   * @throws Exception scope retrievals throws an exception, such as {@link OutsideScopeException}
    */
-  @CheckReturnValue Maybe<?> requestScope();
+  @CheckReturnValue Maybe<?> requestScope() throws Exception;
 }

File: autodispose/src/main/java/com/uber/autodispose/TestScopeProvider.java
Patch:
@@ -19,7 +19,7 @@
 import io.reactivex.Maybe;
 import io.reactivex.subjects.MaybeSubject;
 
-import static com.uber.autodispose.ScopeUtil.LifecycleEndNotification.INSTANCE;
+import static com.uber.autodispose.internal.ScopeEndNotification.INSTANCE;
 
 /**
  * ScopeProvider implementation for testing. You can either back it with your own instance, or just

File: android/autodispose-android-archcomponents/src/main/java/com/uber/autodispose/android/lifecycle/package-info.java
Patch:
@@ -17,6 +17,5 @@
 /**
  * Android Architecture Components extensions for AutoDispose.
  */
-@com.uber.javaxextras.FieldsMethodsAndParametersAreNonNullByDefault
 package com.uber.autodispose.android.lifecycle;
 

File: android/autodispose-android/src/main/java/com/uber/autodispose/android/package-info.java
Patch:
@@ -17,6 +17,5 @@
 /**
  * Android components for AutoDispose.
  */
-@com.uber.javaxextras.FieldsMethodsAndParametersAreNonNullByDefault
 package com.uber.autodispose.android;
 

File: autodispose-rxlifecycle/src/main/java/com/ubercab/autodispose/rxlifecycle/package-info.java
Patch:
@@ -18,6 +18,5 @@
  * AutoDispose extensions for interop with RxLifecycle. This namely supports
  * {@link com.trello.rxlifecycle2.LifecycleProvider}.
  */
-@com.uber.javaxextras.FieldsMethodsAndParametersAreNonNullByDefault
 package com.ubercab.autodispose.rxlifecycle;
 

File: autodispose/src/main/java/com/uber/autodispose/AtomicThrowable.java
Patch:
@@ -18,7 +18,7 @@
 package com.uber.autodispose;
 
 import java.util.concurrent.atomic.AtomicReference;
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Atomic container for Throwables including combining and having a

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposePlugins.java
Patch:
@@ -17,7 +17,7 @@
 package com.uber.autodispose;
 
 import io.reactivex.functions.Consumer;
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Utility class to inject handlers to certain standard AutoDispose operations.

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeUtil.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.uber.autodispose;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 final class AutoDisposeUtil {
 

File: autodispose/src/main/java/com/uber/autodispose/AutoSubscriptionHelper.java
Patch:
@@ -19,7 +19,7 @@
 import io.reactivex.plugins.RxJavaPlugins;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicReference;
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 import org.reactivestreams.Subscription;
 
 /**

File: autodispose/src/main/java/com/uber/autodispose/ExceptionHelper.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.reactivex.exceptions.CompositeException;
 import java.util.concurrent.atomic.AtomicReference;
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Terminal atomics for Throwable containers.

File: autodispose/src/main/java/com/uber/autodispose/LifecycleScopeProvider.java
Patch:
@@ -16,11 +16,10 @@
 
 package com.uber.autodispose;
 
-import com.google.errorprone.annotations.DoNotMock;
 import io.reactivex.Observable;
 import io.reactivex.annotations.CheckReturnValue;
 import io.reactivex.functions.Function;
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * An interface that, when implemented, provides information to AutoDispose to allow it to resolve

File: autodispose/src/main/java/com/uber/autodispose/ScopeProvider.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.uber.autodispose;
 
-import com.google.errorprone.annotations.DoNotMock;
 import io.reactivex.Maybe;
 import io.reactivex.annotations.CheckReturnValue;
 

File: autodispose/src/main/java/com/uber/autodispose/TestLifecycleScopeProvider.java
Patch:
@@ -19,7 +19,7 @@
 import io.reactivex.Observable;
 import io.reactivex.functions.Function;
 import io.reactivex.subjects.BehaviorSubject;
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Test utility to create {@link LifecycleScopeProvider} instances for tests.

File: autodispose/src/main/java/com/uber/autodispose/observers/package-info.java
Patch:
@@ -18,6 +18,5 @@
  * These are Observers AutoDispose uses when scoping an observable. They are exposed as a public API
  *  to allow for consumers to watch for them if they want, such as in RxJava plugins.
  */
-@com.uber.javaxextras.FieldsMethodsAndParametersAreNonNullByDefault
 package com.uber.autodispose.observers;
 

File: sample/src/main/java/com/uber/autodispose/recipes/AutoDisposeViewHolder.java
Patch:
@@ -22,7 +22,7 @@
 import com.uber.autodispose.LifecycleEndedException;
 import com.uber.autodispose.LifecycleScopeProvider;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import io.reactivex.Observable;
 import io.reactivex.functions.Function;

File: static-analysis/autodispose-error-prone-checker/src/test/resources/com/uber/autodispose/error/prone/checker/UseAutoDisposeDefaultClassPositiveCases.java
Patch:
@@ -28,7 +28,7 @@
 import io.reactivex.annotations.CheckReturnValue;
 import io.reactivex.functions.Function;
 import io.reactivex.subjects.BehaviorSubject;
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 import org.reactivestreams.Subscriber;
 
 /**

File: static-analysis/autodispose-error-prone-checker/src/test/resources/com/uber/autodispose/error/prone/checker/UseAutoDisposeNegativeCases.java
Patch:
@@ -29,7 +29,7 @@
 import io.reactivex.annotations.CheckReturnValue;
 import io.reactivex.functions.Function;
 import io.reactivex.subjects.BehaviorSubject;
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 import org.reactivestreams.Subscriber;
 
 /**

File: android/autodispose-android-archcomponents/src/main/java/com/uber/autodispose/android/lifecycle/LifecycleEventsObservable.java
Patch:
@@ -106,7 +106,8 @@ static final class ArchLifecycleObserver extends MainThreadDisposable
       lifecycle.removeObserver(this);
     }
 
-    @OnLifecycleEvent(Event.ON_ANY) void onStateChange(LifecycleOwner owner, Event event) {
+    @OnLifecycleEvent(Event.ON_ANY)
+    void onStateChange(@SuppressWarnings("unused") LifecycleOwner owner, Event event) {
       if (!isDisposed()) {
         if (!(event == ON_CREATE && eventsObservable.getValue() == event)) {
           // Due to the INITIALIZED->ON_CREATE mapping trick we do in backfill(),

File: autodispose/src/main/java/com/uber/autodispose/CompletableScoper.java
Patch:
@@ -45,7 +45,7 @@
  * @deprecated Use the static factories in {@link AutoDispose}. This will be removed in 1.0.
  */
 @Deprecated
-public class CompletableScoper extends Scoper
+public class CompletableScoper extends BaseAutoDisposeConverter
     implements Function<Completable, CompletableSubscribeProxy> {
 
   public CompletableScoper(ScopeProvider provider) {

File: autodispose/src/main/java/com/uber/autodispose/FlowableScoper.java
Patch:
@@ -48,7 +48,7 @@
  * @deprecated Use the static factories in {@link AutoDispose}. This will be removed in 1.0.
  */
 @Deprecated
-public class FlowableScoper<T> extends Scoper
+public class FlowableScoper<T> extends BaseAutoDisposeConverter
     implements Function<Flowable<? extends T>, FlowableSubscribeProxy<T>> {
 
   public FlowableScoper(ScopeProvider provider) {

File: autodispose/src/main/java/com/uber/autodispose/MaybeScoper.java
Patch:
@@ -45,7 +45,7 @@
  * @deprecated Use the static factories in {@link AutoDispose}. This will be removed in 1.0.
  */
 @Deprecated
-public class MaybeScoper<T> extends Scoper
+public class MaybeScoper<T> extends BaseAutoDisposeConverter
     implements Function<Maybe<? extends T>, MaybeSubscribeProxy<T>> {
 
   public MaybeScoper(ScopeProvider provider) {

File: autodispose/src/main/java/com/uber/autodispose/SingleScoper.java
Patch:
@@ -46,7 +46,7 @@
  * @deprecated Use the static factories in {@link AutoDispose}. This will be removed in 1.0.
  */
 @Deprecated
-public class SingleScoper<T> extends Scoper
+public class SingleScoper<T> extends BaseAutoDisposeConverter
     implements Function<Single<? extends T>, SingleSubscribeProxy<T>> {
 
   public SingleScoper(ScopeProvider provider) {

File: android/autodispose-android/src/main/java/com/uber/autodispose/android/ViewScopeProvider.java
Patch:
@@ -54,7 +54,7 @@ public class ViewScopeProvider implements LifecycleScopeProvider<ViewLifecycleEv
    * @param view the view to scope for
    * @return a {@link LifecycleScopeProvider} against this view.
    */
-  public static LifecycleScopeProvider from(View view) {
+  public static LifecycleScopeProvider<ViewLifecycleEvent> from(View view) {
     if (view == null) {
       throw new NullPointerException("view == null");
     }

File: autodispose/src/main/java/com/uber/autodispose/ParallelFlowableScoper.java
Patch:
@@ -36,7 +36,8 @@ static final class AutoDisposeParallelFlowable<T> extends ParallelFlowable<T> {
         return;
       }
 
-      Subscriber<? super T>[] newSubscribers = new Subscriber[subscribers.length];
+      @SuppressWarnings("unchecked") Subscriber<? super T>[] newSubscribers
+          = new Subscriber[subscribers.length];
       for (int i = 0; i < subscribers.length; i++) {
         AutoDisposingSubscriberImpl<? super T> subscriber =
             new AutoDisposingSubscriberImpl<>(scope, subscribers[i]);

File: sample/src/main/java/com/uber/autodispose/recipes/AutoDisposeActivity.java
Patch:
@@ -77,7 +77,7 @@ public enum ActivityEvent {
     return lifecycleEvents.getValue();
   }
 
-  @Override protected void onCreate(Bundle savedInstanceState) {
+  @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     lifecycleEvents.onNext(ActivityEvent.CREATE);
   }

File: sample/src/main/java/com/uber/autodispose/recipes/AutoDisposeFragment.java
Patch:
@@ -92,12 +92,12 @@ public enum FragmentEvent {
     lifecycleEvents.onNext(FragmentEvent.ATTACH);
   }
 
-  @Override public void onCreate(Bundle savedInstanceState) {
+  @Override public void onCreate(@Nullable Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     lifecycleEvents.onNext(FragmentEvent.CREATE);
   }
 
-  @Override public void onViewCreated(View view, Bundle savedInstanceState) {
+  @Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
     super.onViewCreated(view, savedInstanceState);
     lifecycleEvents.onNext(FragmentEvent.CREATE_VIEW);
   }

File: static-analysis/autodispose-error-prone-checker/src/main/java/com/uber/autodispose/error/prone/checker/UseAutoDispose.java
Patch:
@@ -150,7 +150,6 @@ public boolean matches(ExpressionTree tree, VisitorState state) {
   private static Matcher<MethodInvocationTree> matcher(List<String> classesWithLifecycle) {
     return (Matcher<MethodInvocationTree>) (tree, state) -> {
 
-      boolean matchFound = false;
       ExpressionTree methodSelectTree = tree.getMethodSelect();
 
       // MemberSelectTree is used only for member access expression.
@@ -164,7 +163,7 @@ private static Matcher<MethodInvocationTree> matcher(List<String> classesWithLif
         return false;
       }
 
-      matchFound = SUBSCRIBE_MATCHERS
+      boolean matchFound = SUBSCRIBE_MATCHERS
           .stream()
           .map(methodNameMatcher -> methodNameMatcher.matches(tree, state))
           .filter(Boolean::booleanValue) // Filtering the method invocation with name subscribe

File: autodispose/src/test/java/com/uber/autodispose/AutoDisposeObserverTest.java
Patch:
@@ -39,6 +39,7 @@
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
+import static com.uber.autodispose.AutoDispose.autoDisposable;
 
 public class AutoDisposeObserverTest {
 
@@ -322,7 +323,7 @@ public class AutoDisposeObserverTest {
 
   @Test public void autoDispose_withScopeProviderCompleted_shouldNotReportDoubleSubscriptions() {
     TestObserver<Object> o = PublishSubject.create()
-              .as(AutoDispose.autoDisposable(ScopeProvider.UNBOUND))
+              .as(autoDisposable(ScopeProvider.UNBOUND))
               .test();
     o.assertNoValues();
     o.assertNoErrors();

File: static-analysis/autodispose-error-prone-checker/src/main/java/com/uber/autodispose/error/prone/checker/UseAutoDispose.java
Patch:
@@ -41,10 +41,10 @@
 
 /**
  * Checker for subscriptions not binding to lifecycle in components with lifecycle.
- * Use -XepOpt:AutoDisposeLeakCheck flag to add support for custom components with lifecycle.
+ * Use -XepOpt:ClassesWithScope flag to add support for custom components with lifecycle.
  * The sample configuration for Conductor:
  * <pre><code>
- *   -XepOpt:AutoDisposeLeakCheck=com.bluelinelabs.conductor.Controller,android.app.Activity
+ *   -XepOpt:ClassesWithScope=com.bluelinelabs.conductor.Controller,android.app.Activity
  * </code></pre>
  */
 @AutoService(BugChecker.class)
@@ -70,7 +70,7 @@ public UseAutoDispose() {
   }
 
   public UseAutoDispose(ErrorProneFlags flags) {
-    Optional<ImmutableList<String>> inputClasses = flags.getList("AutoDisposeLeakCheck");
+    Optional<ImmutableList<String>> inputClasses = flags.getList("ClassesWithScope");
     ImmutableList<String> defaultClassesWithLifecycle = new ImmutableList.Builder<String>()
         .add("android.app.Activity")
         .add("android.app.Fragment")

File: static-analysis/autodispose-error-prone-checker/src/test/java/com/uber/autodispose/error/prone/checker/UseAutoDisposeTest.java
Patch:
@@ -49,7 +49,7 @@ public void test_autodisposePositiveCasesWithDefaultClass() {
   @Test
   public void test_autodisposePositiveCaseswithCustomClass() {
     compilationHelper.setArgs(
-        Collections.singletonList("-XepOpt:AutoDisposeLeakCheck"
+        Collections.singletonList("-XepOpt:ClassesWithScope"
             + "=com.uber.autodispose.error.prone.checker.ComponentWithLifeCycle"));
     compilationHelper
         .addSourceFile("UseAutoDisposeCustomClassPositiveCases.java")

File: autodispose/src/main/java/com/uber/autodispose/AutoDispose.java
Patch:
@@ -270,7 +270,7 @@ public <T> Function<Observable<? extends T>, ObservableSubscribeProxy<T>> forObs
    * Example usage:
    * <pre><code>
    *   Observable.just(1)
-   *        .to(AutoDispose.<Integer>autoDisposable(scope))
+   *        .as(AutoDispose.<Integer>autoDisposable(scope))
    *        .subscribe(...)
    * </code></pre>
    *
@@ -294,7 +294,7 @@ public static <T> AutoDisposeConverter<T> autoDisposable(final ScopeProvider pro
    * Example usage:
    * <pre><code>
    *   Observable.just(1)
-   *        .to(AutoDispose.<Integer>autoDisposable(scope))
+   *        .as(AutoDispose.<Integer>autoDisposable(scope))
    *        .subscribe(...)
    * </code></pre>
    *
@@ -314,7 +314,7 @@ public static <T> AutoDisposeConverter<T> autoDisposable(
    * Example usage:
    * <pre><code>
    *   Observable.just(1)
-   *        .to(AutoDispose.<Integer>autoDisposable(scope))
+   *        .as(AutoDispose.<Integer>autoDisposable(scope))
    *        .subscribe(...)
    * </code></pre>
    *

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeConverter.java
Patch:
@@ -21,6 +21,7 @@
 import io.reactivex.MaybeConverter;
 import io.reactivex.ObservableConverter;
 import io.reactivex.SingleConverter;
+import io.reactivex.parallel.ParallelFlowableConverter;
 
 /**
  * A custom converter that implements all the RxJava types converters, for use with the {@code as()}
@@ -29,6 +30,7 @@
  * @param <T> the type.
  */
 public interface AutoDisposeConverter<T> extends FlowableConverter<T, FlowableSubscribeProxy<T>>,
+    ParallelFlowableConverter<T, ParallelFlowableSubscribeProxy<T>>,
     ObservableConverter<T, ObservableSubscribeProxy<T>>,
     MaybeConverter<T, MaybeSubscribeProxy<T>>,
     SingleConverter<T, SingleSubscribeProxy<T>>,

File: autodispose/src/main/java/com/uber/autodispose/LifecycleScopeProvider.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.uber.autodispose;
 
+import com.google.errorprone.annotations.DoNotMock;
 import io.reactivex.Observable;
 import io.reactivex.annotations.CheckReturnValue;
 import io.reactivex.functions.Function;
@@ -28,6 +29,7 @@
  *
  * @param <E> the lifecycle event type.
  */
+@DoNotMock(value = "Use TestLifecycleScopeProvider instead")
 public interface LifecycleScopeProvider<E> {
 
   /**

File: autodispose/src/main/java/com/uber/autodispose/ScopeProvider.java
Patch:
@@ -16,12 +16,14 @@
 
 package com.uber.autodispose;
 
+import com.google.errorprone.annotations.DoNotMock;
 import io.reactivex.Maybe;
 import io.reactivex.annotations.CheckReturnValue;
 
 /**
  * Proves a {@link Maybe} representation of a scope. The emission of this is the signal
  */
+@DoNotMock(value = "Use TestScopeProvider instead")
 public interface ScopeProvider {
 
   /**

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposingCompletableObserverImpl.java
Patch:
@@ -52,7 +52,6 @@ final class AutoDisposingCompletableObserverImpl implements AutoDisposingComplet
       }
 
       @Override public void onComplete() {
-        mainDisposable.lazySet(AutoDisposableHelper.DISPOSED);
         lifecycleDisposable.lazySet(AutoDisposableHelper.DISPOSED);
         // Noop - we're unbound now
       }

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposingMaybeObserverImpl.java
Patch:
@@ -52,7 +52,6 @@ final class AutoDisposingMaybeObserverImpl<T> implements AutoDisposingMaybeObser
       }
 
       @Override public void onComplete() {
-        mainDisposable.lazySet(AutoDisposableHelper.DISPOSED);
         lifecycleDisposable.lazySet(AutoDisposableHelper.DISPOSED);
         // Noop - we're unbound now
       }

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposingObserverImpl.java
Patch:
@@ -54,7 +54,6 @@ final class AutoDisposingObserverImpl<T> extends AtomicInteger implements AutoDi
       }
 
       @Override public void onComplete() {
-        mainDisposable.lazySet(AutoDisposableHelper.DISPOSED);
         lifecycleDisposable.lazySet(AutoDisposableHelper.DISPOSED);
         // Noop - we're unbound now
       }

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposingSingleObserverImpl.java
Patch:
@@ -52,7 +52,6 @@ final class AutoDisposingSingleObserverImpl<T> implements AutoDisposingSingleObs
       }
 
       @Override public void onComplete() {
-        mainDisposable.lazySet(AutoDisposableHelper.DISPOSED);
         lifecycleDisposable.lazySet(AutoDisposableHelper.DISPOSED);
         // Noop - we're unbound now
       }

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposingSubscriberImpl.java
Patch:
@@ -59,7 +59,6 @@ final class AutoDisposingSubscriberImpl<T> extends AtomicInteger
       }
 
       @Override public void onComplete() {
-        mainSubscription.lazySet(AutoSubscriptionHelper.CANCELLED);
         lifecycleDisposable.lazySet(AutoDisposableHelper.DISPOSED);
         // Noop - we're unbound now
       }

File: autodispose/src/main/java/com/uber/autodispose/observers/AutoDisposingCompletableObserver.java
Patch:
@@ -27,7 +27,7 @@
 public interface AutoDisposingCompletableObserver extends CompletableObserver, Disposable {
 
   /**
-   * @return The delegate {@link CompletableObserver} that is used under the hood forintrospection
+   * @return The delegate {@link CompletableObserver} that is used under the hood for introspection
    * purposes. This will be updated once LambdaIntrospection is out of @Experimental in RxJava.
    */
   @Experimental

File: autodispose/src/main/java/com/uber/autodispose/observers/AutoDisposingObserver.java
Patch:
@@ -27,7 +27,7 @@
 public interface AutoDisposingObserver<T> extends Observer<T>, Disposable {
 
   /**
-   * @return The delegate {@link Observer} that is used under the hood for introspection purpose.
+   * @return The delegate {@link Observer} that is used under the hood for introspection purposes.
    * This will be updated once LambdaIntrospection is out of @Experimental in RxJava.
    */
   @Experimental

File: android/autodispose-android/src/main/java/com/uber/autodispose/android/internal/AutoDisposeAndroidUtil.java
Patch:
@@ -21,11 +21,13 @@
 import android.support.annotation.RestrictTo;
 import android.view.View;
 
-import static android.support.annotation.RestrictTo.Scope.LIBRARY;
 import static android.support.annotation.RestrictTo.Scope.LIBRARY_GROUP;
 
 @RestrictTo(LIBRARY_GROUP)
 public class AutoDisposeAndroidUtil {
+
+  private AutoDisposeAndroidUtil() { }
+
   public static boolean isMainThread() {
     try {
       return Looper.myLooper() == Looper.getMainLooper();

File: sample/src/main/java/com/uber/autodispose/recipes/AutoDisposeActivity.java
Patch:
@@ -43,7 +43,7 @@ public enum ActivityEvent {
    * symmetric boundary conditions. Create -> Destroy, Start -> Stop, etc. For anything after Resume
    * we dispose on the next immediate destruction event. Subscribing after Destroy is an error.
    */
-  private static Function<ActivityEvent, ActivityEvent> CORRESPONDING_EVENTS =
+  private static final Function<ActivityEvent, ActivityEvent> CORRESPONDING_EVENTS =
       new Function<ActivityEvent, ActivityEvent>() {
         @Override public ActivityEvent apply(ActivityEvent activityEvent) throws Exception {
           switch (activityEvent) {

File: sample/src/main/java/com/uber/autodispose/recipes/AutoDisposeFragment.java
Patch:
@@ -45,7 +45,7 @@ public enum FragmentEvent {
    * symmetric boundary conditions. Create -> Destroy, Start -> Stop, etc. For anything after Resume
    * we dispose on the next immediate destruction event. Subscribing after Detach is an error.
    */
-  private static Function<FragmentEvent, FragmentEvent> CORRESPONDING_EVENTS =
+  private static final Function<FragmentEvent, FragmentEvent> CORRESPONDING_EVENTS =
       new Function<FragmentEvent, FragmentEvent>() {
         @Override public FragmentEvent apply(FragmentEvent event) throws Exception {
           switch (event) {

File: sample/src/main/java/com/uber/autodispose/recipes/AutoDisposeView.java
Patch:
@@ -42,7 +42,7 @@ public abstract class AutoDisposeView extends View
    * "Attach" returns "Detach", then any stream subscribed to during Attach will autodispose on
    * Detach.
    */
-  private static Function<ViewEvent, ViewEvent> CORRESPONDING_EVENTS =
+  private static final Function<ViewEvent, ViewEvent> CORRESPONDING_EVENTS =
       new Function<ViewEvent, ViewEvent>() {
         @Override public ViewEvent apply(ViewEvent viewEvent) throws Exception {
           switch (viewEvent) {

File: sample/src/main/java/com/uber/autodispose/sample/MainActivity.java
Patch:
@@ -29,9 +29,9 @@
 import io.reactivex.functions.Consumer;
 
 /**
- * Demo activity, shamelessly borrowed from the RxLifecycle sample
+ * Demo activity, shamelessly borrowed from the RxLifecycle sample.
  * <p>
- * This leverages the Architecture Components support for the demo
+ * This leverages the Architecture Components support for the demo.
  */
 public class MainActivity extends AppCompatActivity {
 

File: autodispose/src/main/java/com/uber/autodispose/TestScopeProvider.java
Patch:
@@ -52,8 +52,9 @@ public static TestScopeProvider create(Maybe<?> delegate) {
    * scope is unbound.
    *
    * @return the created TestScopeProvider
+   * @deprecated in favor of {@link ScopeProvider#UNBOUND}. This method will be removed in 1.0.
    */
-  public static TestScopeProvider unbound() {
+  @Deprecated public static TestScopeProvider unbound() {
     return create(Maybe.empty());
   }
 

File: autodispose/src/test/java/com/uber/autodispose/AutoDisposeCompletableObserverTest.java
Patch:
@@ -22,7 +22,6 @@
 import io.reactivex.CompletableEmitter;
 import io.reactivex.CompletableObserver;
 import io.reactivex.CompletableOnSubscribe;
-import io.reactivex.Maybe;
 import io.reactivex.functions.BiFunction;
 import io.reactivex.functions.Cancellable;
 import io.reactivex.functions.Consumer;
@@ -311,7 +310,7 @@ public CompletableObserver apply(Completable source, CompletableObserver observe
             }
           });
       Completable.complete()
-          .to(AutoDispose.with(Maybe.never())
+          .to(AutoDispose.with(ScopeProvider.UNBOUND)
               .forCompletable())
           .subscribe();
 

File: autodispose/src/test/java/com/uber/autodispose/AutoDisposeMaybeObserverTest.java
Patch:
@@ -74,7 +74,7 @@ public class AutoDisposeMaybeObserverTest {
 
   @Test public void autoDispose_withSuperClassGenerics_compilesFine() {
     Maybe.just(new BClass())
-        .to(AutoDispose.with(Maybe.never()).<AClass>forMaybe())
+        .to(AutoDispose.with(ScopeProvider.UNBOUND).<AClass>forMaybe())
         .subscribe(new Consumer<AClass>() {
           @Override public void accept(AClass aClass) throws Exception {
 
@@ -84,7 +84,7 @@ public class AutoDisposeMaybeObserverTest {
 
   @Test public void autoDispose_noGenericsOnEmpty_isFine() {
     Maybe.just(new BClass())
-        .to(AutoDispose.with(Maybe.never())
+        .to(AutoDispose.with(ScopeProvider.UNBOUND)
             .forMaybe())
         .subscribe();
   }
@@ -343,7 +343,7 @@ public class AutoDisposeMaybeObserverTest {
         }
       });
       Maybe.just(1)
-          .to(AutoDispose.with(Maybe.never()).<Integer>forMaybe())
+          .to(AutoDispose.with(ScopeProvider.UNBOUND).<Integer>forMaybe())
           .subscribe();
 
       assertThat(atomicAutoDisposingObserver.get()).isNotNull();

File: android/autodispose-android-archcomponents/src/main/java/com/uber/autodispose/android/lifecycle/AndroidLifecycleScopeProvider.java
Patch:
@@ -49,7 +49,7 @@ public final class AndroidLifecycleScopeProvider
             case ON_STOP:
             case ON_DESTROY:
             default:
-              throw new LifecycleEndedException();
+              throw new LifecycleEndedException("Lifecycle has ended! Last event was " + lastEvent);
           }
         }
       };
@@ -145,6 +145,7 @@ private AndroidLifecycleScopeProvider(Lifecycle lifecycle,
   }
 
   @Override public Lifecycle.Event peekLifecycle() {
+    lifecycleObservable.backfillEvents();
     return lifecycleObservable.getValue();
   }
 

File: autodispose-android-archcomponents/src/main/java/com/uber/autodispose/android/lifecycle/TestAndroidLifecycle.java
Patch:
@@ -17,8 +17,8 @@
 package com.uber.autodispose.android.lifecycle;
 
 import android.arch.lifecycle.Lifecycle;
+import android.arch.lifecycle.LifecycleOwner;
 import android.arch.lifecycle.LifecycleRegistry;
-import android.arch.lifecycle.LifecycleRegistryOwner;
 import android.support.annotation.Nullable;
 import android.support.annotation.RestrictTo;
 
@@ -28,8 +28,7 @@
  * AndroidLifecycle implementation for testing. You can either back it with your own
  * instance, or just stub it in place and use its public emit() API.
  */
-@RestrictTo(TESTS) public final class TestAndroidLifecycle
-    implements LifecycleRegistryOwner {
+@RestrictTo(TESTS) public final class TestAndroidLifecycle implements LifecycleOwner {
 
   private final LifecycleRegistry registry;
 

File: autodispose-android-archcomponents/src/main/java/com/uber/autodispose/android/archcomponents/AndroidLifecycleScopeProvider.java
Patch:
@@ -28,9 +28,7 @@
  * {@link LifecycleOwner} classes.
  * <p>
  * <pre><code>
- *   myFooObservable
- *      .to(new ObservableScoper<Foo>(AndroidLifecycleScopeProvider.from(lifecycleOwner)))
- *      .subscribe();
+ *   AutoDispose.with(AndroidLifecycleScopeProvider.from(lifecycleOwner))
  * </code></pre>
  */
 public final class AndroidLifecycleScopeProvider

File: autodispose-android/src/main/java/com/uber/autodispose/android/ViewScopeProvider.java
Patch:
@@ -29,9 +29,7 @@
  * A {@link LifecycleScopeProvider} that can provide scoping for Android {@link View} classes.
  * <p>
  * <pre><code>
- *   AutoDispose.observable()
- *      .scopeWith(ViewScopeProvider.from(view))
- *      .empty();
+ *   AutoDispose.with(ViewScopeProvider.from(view));
  * </code></pre>
  */
 public class ViewScopeProvider implements LifecycleScopeProvider<ViewLifecycleEvent> {

File: autodispose/src/main/java/com/uber/autodispose/CompletableScoper.java
Patch:
@@ -40,7 +40,10 @@
  * under the hood, and AutoDispose has some built-in understanding for predefined types. The scope
  * is considered ended upon onSuccess emission of this {@link Maybe}. The most common use case would
  * probably be {@link #CompletableScoper(ScopeProvider)}.
+ *
+ * @deprecated Use the static factories in {@link AutoDispose}. This will be removed in 1.0.
  */
+@Deprecated
 public class CompletableScoper extends Scoper
     implements Function<Completable, CompletableSubscribeProxy> {
 

File: autodispose/src/main/java/com/uber/autodispose/FlowableScoper.java
Patch:
@@ -43,7 +43,9 @@
  * probably be {@link #FlowableScoper(ScopeProvider)}.
  *
  * @param <T> the stream type.
+ * @deprecated Use the static factories in {@link AutoDispose}. This will be removed in 1.0.
  */
+@Deprecated
 public class FlowableScoper<T> extends Scoper
     implements Function<Flowable<? extends T>, FlowableSubscribeProxy<T>> {
 

File: autodispose/src/main/java/com/uber/autodispose/MaybeScoper.java
Patch:
@@ -41,7 +41,9 @@
  * probably be {@link #MaybeScoper(ScopeProvider)}.
  *
  * @param <T> the stream type.
+ * @deprecated Use the static factories in {@link AutoDispose}. This will be removed in 1.0.
  */
+@Deprecated
 public class MaybeScoper<T> extends Scoper
     implements Function<Maybe<? extends T>, MaybeSubscribeProxy<T>> {
 

File: autodispose/src/main/java/com/uber/autodispose/ObservableScoper.java
Patch:
@@ -42,7 +42,9 @@
  * probably be {@link #ObservableScoper(ScopeProvider)}.
  *
  * @param <T> the stream type.
+ * @deprecated Use the static factories in {@link AutoDispose}. This will be removed in 1.0.
  */
+@Deprecated
 public class ObservableScoper<T> extends Scoper
     implements Function<Observable<? extends T>, ObservableSubscribeProxy<T>> {
 

File: autodispose/src/main/java/com/uber/autodispose/SingleScoper.java
Patch:
@@ -42,7 +42,9 @@
  * probably be {@link #SingleScoper(ScopeProvider)}.
  *
  * @param <T> the stream type.
+ * @deprecated Use the static factories in {@link AutoDispose}. This will be removed in 1.0.
  */
+@Deprecated
 public class SingleScoper<T> extends Scoper
     implements Function<Single<? extends T>, SingleSubscribeProxy<T>> {
 

File: autodispose-android-archcomponents/src/androidTest/java/com/uber/autodispose/android/archcomponents/AndroidLifecycleScopeProviderTest.java
Patch:
@@ -17,8 +17,8 @@
 package com.uber.autodispose.android.archcomponents;
 
 import android.arch.lifecycle.Lifecycle;
+import android.arch.lifecycle.LifecycleOwner;
 import android.arch.lifecycle.LifecycleRegistry;
-import android.arch.lifecycle.LifecycleRegistryOwner;
 import android.support.test.annotation.UiThreadTest;
 import android.support.test.rule.UiThreadTestRule;
 import android.support.test.runner.AndroidJUnit4;
@@ -150,7 +150,7 @@
     assertThat(d.isDisposed()).isTrue();
   }
 
-  private static class UninitializedLifecycleOwner implements LifecycleRegistryOwner {
+  private static class UninitializedLifecycleOwner implements LifecycleOwner {
 
     LifecycleRegistry registry = new LifecycleRegistry(this);
 

File: autodispose-android/src/androidTest/java/com/uber/autodispose/android/ViewScopeProviderTest.java
Patch:
@@ -36,7 +36,6 @@
 import static com.google.common.truth.Truth.assertThat;
 
 @RunWith(AndroidJUnit4.class)
-@SuppressWarnings("NullAway") // https://github.com/uber/NullAway/issues/18
 public final class ViewScopeProviderTest {
 
   private static final RecordingObserver.Logger LOGGER = new RecordingObserver.Logger() {

File: autodispose-android/src/androidTest/java/com/uber/autodispose/android/AutoDisposeTestActivity.java
Patch:
@@ -21,6 +21,7 @@
 import android.view.View;
 import android.widget.FrameLayout;
 
+@SuppressWarnings("NullAway") // https://github.com/uber/NullAway/issues/19
 public final class AutoDisposeTestActivity extends Activity {
   FrameLayout parent;
   View child;

File: autodispose-android/src/androidTest/java/com/uber/autodispose/android/ViewScopeProviderTest.java
Patch:
@@ -35,7 +35,9 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-@RunWith(AndroidJUnit4.class) public final class ViewScopeProviderTest {
+@RunWith(AndroidJUnit4.class)
+@SuppressWarnings("NullAway") // https://github.com/uber/NullAway/issues/18
+public final class ViewScopeProviderTest {
 
   private static final RecordingObserver.Logger LOGGER = new RecordingObserver.Logger() {
     @Override public void log(String message) {

File: autodispose-android/src/main/java/com/uber/autodispose/android/ViewAttachEventsObservable.java
Patch:
@@ -18,12 +18,13 @@
 
 import android.support.annotation.RestrictTo;
 import android.view.View;
+import com.uber.autodispose.android.internal.AutoDisposeAndroidUtil;
 import io.reactivex.Observable;
 import io.reactivex.Observer;
 import io.reactivex.android.MainThreadDisposable;
 
 import static android.support.annotation.RestrictTo.Scope.LIBRARY;
-import static com.uber.autodispose.android.AutoDisposeAndroidUtil.isMainThread;
+import static com.uber.autodispose.android.internal.AutoDisposeAndroidUtil.isMainThread;
 import static com.uber.autodispose.android.ViewLifecycleEvent.ATTACH;
 import static com.uber.autodispose.android.ViewLifecycleEvent.DETACH;
 

File: autodispose-android/src/main/java/com/uber/autodispose/android/ViewScopeProvider.java
Patch:
@@ -19,6 +19,7 @@
 import android.view.View;
 import com.uber.autodispose.LifecycleScopeProvider;
 import com.uber.autodispose.OutsideLifecycleException;
+import com.uber.autodispose.android.internal.AutoDisposeAndroidUtil;
 import io.reactivex.Observable;
 import io.reactivex.functions.Function;
 

File: autodispose-android/src/main/java/com/uber/autodispose/android/package-info.java
Patch:
@@ -17,6 +17,6 @@
 /**
  * Android components for AutoDispose.
  */
-@com.uber.autodispose.internal.EverythingNonNullByDefault
+@com.uber.javaxextras.FieldsMethodsAndParametersAreNonNullByDefault
 package com.uber.autodispose.android;
 

File: autodispose/src/main/java/com/uber/autodispose/observers/package-info.java
Patch:
@@ -18,6 +18,6 @@
  * These are Observers AutoDispose uses when scoping an observable. They are exposed as a public API
  *  to allow for consumers to watch for them if they want, such as in RxJava plugins.
  */
-@com.uber.autodispose.internal.EverythingNonNullByDefault
+@com.uber.javaxextras.FieldsMethodsAndParametersAreNonNullByDefault
 package com.uber.autodispose.observers;
 

File: autodispose/src/main/java/com/uber/autodispose/package-info.java
Patch:
@@ -18,6 +18,6 @@
  * AutoDispose is an RxJava 2 tool for automatically binding the execution of RxJava 2 streams to a
  * provided scope via disposal/cancellation.
  */
-@com.uber.autodispose.internal.EverythingNonNullByDefault
+@com.uber.javaxextras.FieldsMethodsAndParametersAreNonNullByDefault
 package com.uber.autodispose;
 

File: autodispose-android/src/androidTest/java/com/uber/autodispose/android/RecordingObserver.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.uber.autodispose.android;
 
-import com.google.common.truth.Platform;
 import io.reactivex.CompletableObserver;
 import io.reactivex.MaybeObserver;
 import io.reactivex.Observer;
@@ -87,7 +86,7 @@ public boolean hasNextEvent() {
     } catch (InterruptedException e) {
       throw new RuntimeException(e);
     }
-    return event != null && Platform.isInstanceOfType(event, OnNext.class);
+    return event != null && OnNext.class.isInstance(event);
   }
 
   public T takeNext() {

File: autodispose/src/main/java/com/uber/autodispose/package-info.java
Patch:
@@ -18,5 +18,6 @@
  * AutoDispose is an RxJava 2 tool for automatically binding the execution of RxJava 2 streams to a
  * provided scope via disposal/cancellation.
  */
-@javax.annotation.ParametersAreNonnullByDefault
+@com.uber.autodispose.internal.EverythingNonNullByDefault
 package com.uber.autodispose;
+

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposePlugins.java
Patch:
@@ -16,8 +16,8 @@
 
 package com.uber.autodispose;
 
-import io.reactivex.annotations.Nullable;
 import io.reactivex.functions.Consumer;
+import javax.annotation.Nullable;
 
 /**
  * Utility class to inject handlers to certain standard AutoDispose operations.

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeUtil.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.uber.autodispose;
 
-import io.reactivex.annotations.Nullable;
+import javax.annotation.Nullable;
 
 final class AutoDisposeUtil {
 

File: autodispose/src/main/java/com/uber/autodispose/LifecycleScopeProvider.java
Patch:
@@ -18,8 +18,8 @@
 
 import io.reactivex.Observable;
 import io.reactivex.annotations.CheckReturnValue;
-import io.reactivex.annotations.Nullable;
 import io.reactivex.functions.Function;
+import javax.annotation.Nullable;
 
 /**
  * An interface that, when implemented, provides information to AutoDispose to allow it to resolve

File: autodispose/src/main/java/com/uber/autodispose/TestLifecycleScopeProvider.java
Patch:
@@ -17,10 +17,9 @@
 package com.uber.autodispose;
 
 import io.reactivex.Observable;
-import io.reactivex.annotations.NonNull;
-import io.reactivex.annotations.Nullable;
 import io.reactivex.functions.Function;
 import io.reactivex.subjects.BehaviorSubject;
+import javax.annotation.Nullable;
 
 /**
  * Test utility to create {@link LifecycleScopeProvider} instances for tests.
@@ -66,7 +65,7 @@ public static TestLifecycleScopeProvider createInitial(TestLifecycle initialValu
 
   @Override public Function<TestLifecycle, TestLifecycle> correspondingEvents() {
     return new Function<TestLifecycle, TestLifecycle>() {
-      @Override public TestLifecycle apply(@NonNull TestLifecycle testLifecycle) {
+      @Override public TestLifecycle apply(TestLifecycle testLifecycle) {
         switch (testLifecycle) {
           case STARTED:
             return TestLifecycle.STOPPED;

File: autodispose/src/test/java/com/uber/autodispose/AutoDisposeObserverTest.java
Patch:
@@ -20,7 +20,6 @@
 import io.reactivex.Observable;
 import io.reactivex.ObservableEmitter;
 import io.reactivex.ObservableOnSubscribe;
-import io.reactivex.annotations.NonNull;
 import io.reactivex.disposables.Disposable;
 import io.reactivex.functions.Cancellable;
 import io.reactivex.functions.Consumer;
@@ -30,7 +29,6 @@
 import io.reactivex.subjects.MaybeSubject;
 import io.reactivex.subjects.PublishSubject;
 import java.util.concurrent.atomic.AtomicInteger;
-
 import org.junit.After;
 import org.junit.Test;
 
@@ -69,7 +67,7 @@ public class AutoDisposeObserverTest {
     Observable.just(new BClass())
         .to(new ObservableScoper<AClass>(Maybe.never()))
         .subscribe(new Consumer<AClass>() {
-          @Override public void accept(@NonNull AClass aClass) throws Exception {
+          @Override public void accept(AClass aClass) throws Exception {
 
           }
         });

File: autodispose/src/test/java/com/uber/autodispose/AutoDisposeSingleObserverTest.java
Patch:
@@ -20,7 +20,6 @@
 import io.reactivex.Single;
 import io.reactivex.SingleEmitter;
 import io.reactivex.SingleOnSubscribe;
-import io.reactivex.annotations.NonNull;
 import io.reactivex.functions.Cancellable;
 import io.reactivex.functions.Consumer;
 import io.reactivex.functions.Predicate;
@@ -29,7 +28,6 @@
 import io.reactivex.subjects.MaybeSubject;
 import io.reactivex.subjects.SingleSubject;
 import java.util.concurrent.atomic.AtomicInteger;
-
 import org.junit.After;
 import org.junit.Test;
 
@@ -68,7 +66,7 @@ public class AutoDisposeSingleObserverTest {
     Single.just(new BClass())
         .to(new SingleScoper<AClass>(Maybe.never()))
         .subscribe(new Consumer<AClass>() {
-          @Override public void accept(@NonNull AClass aClass) throws Exception {
+          @Override public void accept(AClass aClass) throws Exception {
 
           }
         });

File: autodispose/src/test/java/com/uber/autodispose/AutoDisposeSubscriberTest.java
Patch:
@@ -21,7 +21,6 @@
 import io.reactivex.FlowableEmitter;
 import io.reactivex.FlowableOnSubscribe;
 import io.reactivex.Maybe;
-import io.reactivex.annotations.NonNull;
 import io.reactivex.disposables.Disposable;
 import io.reactivex.functions.Cancellable;
 import io.reactivex.functions.Consumer;
@@ -32,7 +31,6 @@
 import io.reactivex.subscribers.TestSubscriber;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
-
 import org.junit.After;
 import org.junit.Test;
 
@@ -71,7 +69,7 @@ public class AutoDisposeSubscriberTest {
     Flowable.just(new BClass())
         .to(new FlowableScoper<AClass>(Maybe.never()))
         .subscribe(new Consumer<AClass>() {
-          @Override public void accept(@NonNull AClass aClass) throws Exception {
+          @Override public void accept(AClass aClass) throws Exception {
 
           }
         });

File: autodispose/src/test/java/com/uber/autodispose/TestUtil.java
Patch:
@@ -18,7 +18,6 @@
 
 import io.reactivex.Maybe;
 import io.reactivex.Observable;
-import io.reactivex.annotations.NonNull;
 import io.reactivex.functions.Function;
 import io.reactivex.subjects.BehaviorSubject;
 import io.reactivex.subjects.MaybeSubject;
@@ -53,11 +52,11 @@ static ScopeProvider makeProvider(final MaybeSubject<Integer> scope) {
   static LifecycleScopeProvider<Integer> makeLifecycleProvider(
       final BehaviorSubject<Integer> lifecycle) {
     return new LifecycleScopeProvider<Integer>() {
-      @NonNull @Override public Observable<Integer> lifecycle() {
+      @Override public Observable<Integer> lifecycle() {
         return lifecycle;
       }
 
-      @NonNull @Override public Function<Integer, Integer> correspondingEvents() {
+      @Override public Function<Integer, Integer> correspondingEvents() {
         return CORRESPONDING_EVENTS;
       }
 

File: autodispose-android/src/androidTest/java/com/uber/autodispose/android/RecordingObserver.java
Patch:
@@ -133,14 +133,14 @@ public String toString() {
     }
   }
 
-  private final class OnCompleted {
+  private static final class OnCompleted {
     @Override
     public String toString() {
       return "OnCompleted";
     }
   }
 
-  private final class OnError {
+  private static final class OnError {
     private final Throwable throwable;
 
     private OnError(Throwable throwable) {
@@ -153,7 +153,7 @@ public String toString() {
     }
   }
 
-  private final class OnSubscribe {
+  private static final class OnSubscribe {
     private final Disposable disposable;
 
     private OnSubscribe(Disposable disposable) {

File: autodispose-android/src/androidTest/java/com/uber/autodispose/android/ViewScopeProviderTest.java
Patch:
@@ -86,7 +86,8 @@
     d.dispose();
   }
 
-  @Test public void observable_offMainThread_shouldFail() {
+  @Test
+  public void observable_offMainThread_shouldFail() {
     RecordingObserver<Integer> o = new RecordingObserver<>();
     PublishSubject<Integer> subject = PublishSubject.create();
 

File: autodispose-android/src/main/java/com/uber/autodispose/android/ViewAttachEventsObservable.java
Patch:
@@ -38,6 +38,7 @@ final class ViewAttachEventsObservable extends Observable<ViewLifecycleEvent> {
   @Override protected void subscribeActual(Observer<? super ViewLifecycleEvent> observer) {
     if (!isMainThread()) {
       observer.onError(new IllegalStateException("Views can only be bound to on the main thread!"));
+      return;
     }
 
     if (AutoDisposeAndroidUtil.isAttached(view)) {

File: autodispose/src/test/java/com/uber/autodispose/RecordingObserver.java
Patch:
@@ -133,7 +133,7 @@ private final class OnCompleted {
     }
   }
 
-  private final class OnError {
+  private static final class OnError {
     private final Throwable throwable;
 
     private OnError(Throwable throwable) {

File: autodispose/src/main/java/com/uber/autodispose/LifecycleScopeProvider.java
Patch:
@@ -23,10 +23,10 @@
 
 /**
  * An interface that, when implemented, provides information to AutoDispose to allow it to resolve
- * the next lifecycle event and construct a Maybe representation of it from hte {@link #lifecycle()}
+ * the next lifecycle event and construct a Maybe representation of it from the {@link #lifecycle()}
  * stream.
  *
- * @param <E> the the lifecycle event type.
+ * @param <E> the lifecycle event type.
  */
 public interface LifecycleScopeProvider<E> {
 

File: autodispose/src/test/java/com/uber/autodispose/AutoDisposeMaybeObserverTest.java
Patch:
@@ -19,7 +19,6 @@
 import io.reactivex.Maybe;
 import io.reactivex.MaybeEmitter;
 import io.reactivex.MaybeOnSubscribe;
-import io.reactivex.Observable;
 import io.reactivex.annotations.NonNull;
 import io.reactivex.functions.Cancellable;
 import io.reactivex.functions.Consumer;

File: autodispose/src/test/java/com/uber/autodispose/AutoDisposeObserverTest.java
Patch:
@@ -22,7 +22,6 @@
 import io.reactivex.ObservableOnSubscribe;
 import io.reactivex.annotations.NonNull;
 import io.reactivex.disposables.Disposable;
-import io.reactivex.disposables.Disposables;
 import io.reactivex.functions.Cancellable;
 import io.reactivex.functions.Consumer;
 import io.reactivex.observers.TestObserver;

File: autodispose/src/test/java/com/uber/autodispose/AutoDisposeSingleObserverTest.java
Patch:
@@ -17,7 +17,6 @@
 package com.uber.autodispose;
 
 import io.reactivex.Maybe;
-import io.reactivex.Observable;
 import io.reactivex.Single;
 import io.reactivex.SingleEmitter;
 import io.reactivex.SingleOnSubscribe;

File: autodispose/src/test/java/com/uber/autodispose/AutoDisposeSubscriberTest.java
Patch:
@@ -21,7 +21,6 @@
 import io.reactivex.FlowableEmitter;
 import io.reactivex.FlowableOnSubscribe;
 import io.reactivex.Maybe;
-import io.reactivex.Single;
 import io.reactivex.annotations.NonNull;
 import io.reactivex.disposables.Disposable;
 import io.reactivex.functions.Cancellable;

File: autodispose/src/test/java/com/uber/autodispose/TestUtil.java
Patch:
@@ -18,10 +18,10 @@
 
 import io.reactivex.Maybe;
 import io.reactivex.Observable;
+import io.reactivex.annotations.NonNull;
 import io.reactivex.functions.Function;
 import io.reactivex.subjects.BehaviorSubject;
 import io.reactivex.subjects.MaybeSubject;
-import javax.annotation.Nonnull;
 
 final class TestUtil {
   private static final Function<Integer, Integer> CORRESPONDING_EVENTS =
@@ -53,11 +53,11 @@ static ScopeProvider makeProvider(final MaybeSubject<Integer> scope) {
   static LifecycleScopeProvider<Integer> makeLifecycleProvider(
       final BehaviorSubject<Integer> lifecycle) {
     return new LifecycleScopeProvider<Integer>() {
-      @Nonnull @Override public Observable<Integer> lifecycle() {
+      @NonNull @Override public Observable<Integer> lifecycle() {
         return lifecycle;
       }
 
-      @Nonnull @Override public Function<Integer, Integer> correspondingEvents() {
+      @NonNull @Override public Function<Integer, Integer> correspondingEvents() {
         return CORRESPONDING_EVENTS;
       }
 

File: autodispose/src/main/java/com/uber/autodispose/AutoDisposeUtil.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.uber.autodispose;
 
+import io.reactivex.annotations.Nullable;
 import io.reactivex.disposables.Disposable;
 import io.reactivex.functions.Action;
 import io.reactivex.functions.Consumer;
-import javax.annotation.Nullable;
 import org.reactivestreams.Subscription;
 
 final class AutoDisposeUtil {

File: autodispose/src/main/java/com/uber/autodispose/LifecycleScopeProvider.java
Patch:
@@ -18,8 +18,8 @@
 
 import io.reactivex.Observable;
 import io.reactivex.annotations.CheckReturnValue;
+import io.reactivex.annotations.Nullable;
 import io.reactivex.functions.Function;
-import javax.annotation.Nullable;
 
 /**
  * An interface that, when implemented, provides information to AutoDispose to allow it to resolve
@@ -37,7 +37,7 @@ public interface LifecycleScopeProvider<E> {
 
   /**
    * @return a sequence of lifecycle events. It's recommended to back this with a static instance to
-   * avoid unnecessary object allocationn.
+   * avoid unnecessary object allocation.
    */
   @CheckReturnValue Function<E, E> correspondingEvents();
 

File: autodispose-android/src/main/java/com/uber/autodispose/android/ViewLifecycleScopeProvider.java
Patch:
@@ -26,9 +26,9 @@
 import io.reactivex.functions.Cancellable;
 import io.reactivex.functions.Function;
 
+import static com.uber.autodispose.AutoDisposeUtil.checkNotNull;
 import static com.uber.autodispose.android.AutoDisposeAndroidUtil.isMainThread;
 import static com.uber.autodispose.android.ViewLifecycleEvent.DETACH;
-import static com.uber.autodispose.internal.AutoDisposeUtil.checkNotNull;
 
 public class ViewLifecycleScopeProvider implements LifecycleScopeProvider<ViewLifecycleEvent> {
   private static final Function<ViewLifecycleEvent, ViewLifecycleEvent> CORRESPONDING_EVENTS =

File: autodispose-android/src/main/java/com/uber/autodispose/android/ViewLifecycleScopeProvider.java
Patch:
@@ -30,7 +30,7 @@
 import static com.uber.autodispose.android.ViewLifecycleEvent.DETACH;
 import static com.uber.autodispose.internal.AutoDisposeUtil.checkNotNull;
 
-class ViewLifecycleScopeProvider implements LifecycleScopeProvider<ViewLifecycleEvent> {
+public class ViewLifecycleScopeProvider implements LifecycleScopeProvider<ViewLifecycleEvent> {
   private static final Function<ViewLifecycleEvent, ViewLifecycleEvent> CORRESPONDING_EVENTS =
       new Function<ViewLifecycleEvent, ViewLifecycleEvent>() {
         @Override public ViewLifecycleEvent apply(ViewLifecycleEvent lastEvent) throws Exception {

File: autodispose/src/test/java/com/uber/autodispose/AutoDisposeCompletableObserverTest.java
Patch:
@@ -120,6 +120,7 @@ public void autoDispose_withProvider_withoutStartingLifecycle_shouldFail() {
         .subscribe(AutoDispose.completable(provider)
             .around(o));
 
+    o.takeSubscribe();
     assertThat(o.takeError()).isInstanceOf(LifecycleNotStartedException.class);
   }
 
@@ -135,6 +136,7 @@ public void autoDispose_withProvider_afterLifecycle_shouldFail() {
         .subscribe(AutoDispose.completable(provider)
             .around(o));
 
+    o.takeSubscribe();
     assertThat(o.takeError()).isInstanceOf(LifecycleEndedException.class);
   }
 

File: autodispose/src/test/java/com/uber/autodispose/AutoDisposeMaybeObserverTest.java
Patch:
@@ -145,6 +145,7 @@ public void autoDispose_withProvider_withoutStartingLifecycle_shouldFail() {
         .subscribe(AutoDispose.maybe(provider)
             .around(o));
 
+    o.takeSubscribe();
     assertThat(o.takeError()).isInstanceOf(LifecycleNotStartedException.class);
   }
 
@@ -160,6 +161,7 @@ public void autoDispose_withProvider_afterLifecycle_shouldFail() {
         .subscribe(AutoDispose.maybe(provider)
             .around(o));
 
+    o.takeSubscribe();
     assertThat(o.takeError()).isInstanceOf(LifecycleEndedException.class);
   }
 

File: autodispose/src/test/java/com/uber/autodispose/AutoDisposeObserverTest.java
Patch:
@@ -100,6 +100,7 @@ public void autoDispose_withProvider_withoutStartingLifecycle_shouldFail() {
         .subscribe(AutoDispose.observable(provider)
             .around(o));
 
+    o.takeSubscribe();
     assertThat(o.takeError()).isInstanceOf(LifecycleNotStartedException.class);
   }
 
@@ -115,6 +116,7 @@ public void autoDispose_withProvider_afterLifecycle_shouldFail() {
         .subscribe(AutoDispose.observable(provider)
             .around(o));
 
+    o.takeSubscribe();
     assertThat(o.takeError()).isInstanceOf(LifecycleEndedException.class);
   }
 

File: autodispose/src/test/java/com/uber/autodispose/AutoDisposeSingleObserverTest.java
Patch:
@@ -120,6 +120,7 @@ public void autoDispose_withProvider_withoutStartingLifecycle_shouldFail() {
         .subscribe(AutoDispose.single(provider)
             .around(o));
 
+    o.takeSubscribe();
     assertThat(o.takeError()).isInstanceOf(LifecycleNotStartedException.class);
   }
 
@@ -135,6 +136,7 @@ public void autoDispose_withProvider_afterLifecycle_shouldFail() {
         .subscribe(AutoDispose.single(provider)
             .around(o));
 
+    o.takeSubscribe();
     assertThat(o.takeError()).isInstanceOf(LifecycleEndedException.class);
   }
 

