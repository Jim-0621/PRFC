File: sjk-test/src/main/java/org/gridkit/sjk/test/console/junit4/ConsoleRule.java
Patch:
@@ -77,7 +77,7 @@ public ConsoleRule lineEx(String pattern, String... vars) {
     }
 
     @Override
-	public String toString() {
+    public String toString() {
         return tracker.toString();
     }
 }

File: sjk-core/src/main/java/org/gridkit/jvmtool/GcCpuUsageMonitor.java
Patch:
@@ -20,5 +20,5 @@ public interface GcCpuUsageMonitor {
     public long getYoungGcCpu();
 
     public long getOldGcCpu();
-    
+
 }

File: sjk-core/src/main/java/org/gridkit/jvmtool/PerfCounterGcCpuUsageMonitor.java
Patch:
@@ -22,17 +22,17 @@ public class PerfCounterGcCpuUsageMonitor implements GcCpuUsageMonitor {
 
     TickCounter gc0;
     TickCounter gc1;
-    
+
     public PerfCounterGcCpuUsageMonitor(long pid) {
         JStatData jd = JStatData.connect(pid);
         gc0 = (TickCounter) jd.getAllCounters().get("sun.gc.collector.0.time");
         gc1 = (TickCounter) jd.getAllCounters().get("sun.gc.collector.1.time");
     }
-    
+
     public boolean isAvailable() {
         return gc0 != null && gc1 != null;
     }
-    
+
     @Override
     public long getYoungGcCpu() {
         return gc0 == null ? 0 : gc0.getNanos();

File: sjk-core/src/main/java/org/gridkit/jvmtool/SafePointMonitor.java
Patch:
@@ -3,9 +3,9 @@
 public interface SafePointMonitor {
 
     public long getSafePointCount();
-    
+
     public long getSafePointSyncTime();
 
     public long getSafePointTime();
-    
+
 }

File: sjk-core/src/main/java/org/gridkit/jvmtool/gcmon/GcEventSubscriber.java
Patch:
@@ -45,15 +45,15 @@ public boolean subscribe() {
         }
         return ok;
     }
-    
+
     public void unsubscribe() {
         for(GcTracker tracker: trackers) {
             try {
                 mserver.removeNotificationListener(tracker.name, LISTENER, null, tracker);
             }
             catch(Exception e) {
             }
-        }      
+        }
     }
 
     protected void subscribeTracker(GcTracker tracker) throws IOException, JMException {

File: sjk-core/src/main/java/org/gridkit/jvmtool/gcmon/MemoryPoolEventConsumer.java
Patch:
@@ -22,5 +22,5 @@ public interface MemoryPoolEventConsumer {
     public void consumePeakEvent(MemoryPoolInfoEvent event);
 
     public void consumeCollectionUsageEvent(MemoryPoolInfoEvent event);
-    
+
 }

File: sjk-core/src/main/java/org/gridkit/jvmtool/gcmon/MemoryPoolEventWriter.java
Patch:
@@ -19,5 +19,5 @@
 
 public interface MemoryPoolEventWriter extends TypedEventWriter {
 
-	public void storeMemPoolInfo(MemoryPoolInfoEvent event);
+    public void storeMemPoolInfo(MemoryPoolInfoEvent event);
 }

File: sjk-core/src/main/java/org/gridkit/jvmtool/gcmon/MemoryPoolInfo.java
Patch:
@@ -18,11 +18,11 @@
 public interface MemoryPoolInfo {
 
     public String name();
-    
+
     public boolean nonHeap();
-    
+
     public Iterable<String> memoryManagers();
-    
+
     public MemoryUsageBean peakUsage();
 
     public MemoryUsageBean currentUsage();

File: sjk-core/src/main/java/org/gridkit/jvmtool/gcmon/MemoryPoolInfoEvent.java
Patch:
@@ -27,7 +27,7 @@ public interface MemoryPoolInfoEvent extends MemoryPoolInfo, CommonEvent {
     public static final String MEM_POOL_MEMORY_USAGE = "jvm.memory-pool.memoryUsage";
     public static final String MEM_POOL_MEMORY_PEAK = "jvm.memory-pool.memoryPeak";
     public static final String MEM_POOL_COLLECTION_USAGE = "jvm.memory-pool.collectionUsage";
-    
+
     public static final String MEM_USAGE_INIT = "init";
     public static final String MEM_USAGE_USED = "used";
     public static final String MEM_USAGE_COMMITTED = "committed";

File: sjk-core/src/main/java/org/gridkit/util/formating/NumberFormat.java
Patch:
@@ -18,7 +18,7 @@
 public interface NumberFormat {
 
     public String formatLong(long v);
-    
+
     public String formatDouble(double v);
-    
+
 }

File: sjk-core/src/test/java/org/gridkit/jvmtools/gcmon/MemPoolEventTest.java
Patch:
@@ -14,9 +14,9 @@ public class MemPoolEventTest {
     @Test
     public void pollerSmoke() {
         MemoryPoolPoller poller = new MemoryPoolPoller(ManagementFactory.getPlatformMBeanServer(), new Consumer());
-        
+
         poller.poll();
-        
+
         List<Object> buf = new ArrayList<Object>();
         for(int i = 0; i != 10000; ++i) {
             if (i < 100) {
@@ -33,7 +33,7 @@ public void pollerSmoke() {
 
         poller.poll();
     }
-    
+
     public class Consumer implements MemoryPoolEventConsumer {
 
         @Override

File: sjk-agent/src/test/java/org/gridkit/jvmtool/agent/SjkAgentLocatorCheck.java
Patch:
@@ -22,7 +22,7 @@ public void checkFileURL() {
 
     @Test
     public void checkLocator() throws IOException, URISyntaxException {
-    	System.out.println(SjkAgentLocator.getJarPath());
+        System.out.println(SjkAgentLocator.getJarPath());
     }
 
 }

File: sjk-win32/src/main/java/org/gridkit/jvmtool/osdiag/ProcTimeHelper.java
Patch:
@@ -3,11 +3,11 @@
 public abstract class ProcTimeHelper {
 
     private static ProcTimeHelper INSTANCE = initHelper();
-    
+
     public ProcTimeHelper getInstance() {
         return INSTANCE;
     }
-    
+
     private static ProcTimeHelper initHelper() {
         // TODO Auto-generated method stub
         return null;
@@ -16,5 +16,5 @@ private static ProcTimeHelper initHelper() {
     public abstract boolean getProcessTime(long pid, TimeInfoMS time);
 
     public abstract boolean getThreadTime(long pid, TimeInfoMS time);
-    
+
 }

File: sjk-win32/src/main/java/org/gridkit/jvmtool/osdiag/TimeInfoMS.java
Patch:
@@ -5,5 +5,5 @@ public class TimeInfoMS {
     public double elapsedTimeMs;
     public double cpuTimeMs;
     public double kernelTimeMs;
-    
+
 }

File: sjk-win32/src/test/java/PropGen.java
Patch:
@@ -31,15 +31,15 @@ public byte[] load(String res) throws IOException {
         int n = is.read(buf);
         return Arrays.copyOf(buf, n);
     }
-    
+
     @Test
     public void printProps() throws IOException {
         byte[] dll32 = load("sjkwinh32.dll");
         String hash32 = digest(dll32, "SHA-256");
 
         byte[] dll64 = load("sjkwinh64.dll");
         String hash64 = digest(dll64, "SHA-256");
-        
+
         System.out.println("dll32.hash: " + hash32);
         System.out.println("dll32.len: " + dll32.length);
         System.out.println("dll64.hash: " + hash64);

File: sjk-win32/src/test/java/SjkWinHelperCheck.java
Patch:
@@ -34,7 +34,7 @@ public void cpu_by_tid() throws Throwable {
             SjkWinHelper helper = new SjkWinHelper();
             long[] buf = new long[2];
             int pid = 3164;
-            
+
             for(int i = 0; i != 10; ++i) {
                 if (helper.getThreadCpuTimes(pid, buf)) {
                     System.out.println("Thread [" + pid + "]  kernel: " + toSec(buf[0]) + " user: " +  toSec(buf[1]));
@@ -55,12 +55,12 @@ public void cpu_by_tid() throws Throwable {
     private String toSec(long us) {
         return String.format("%f", us * 0.000001d);
     }
-    
+
     @Test
     public void enum_threads() {
         SjkWinHelper helper = new SjkWinHelper();
         int pid = 10048;
-        
+
         int[] threads = helper.enumThreads(pid);
         System.out.println("PID " + pid + " threads " + threads.length);
         for(int t : threads) {

File: sjk-hflame/src/main/java/org/gridkit/jvmtool/hflame/FrameColorChooser.java
Patch:
@@ -17,5 +17,5 @@
 
 public interface FrameColorChooser {
 
-	public int getFrameColor(String frame);
+    public int getFrameColor(String frame);
 }

File: sjk-hflame/src/main/java/org/gridkit/jvmtool/hflame/FrameFormater.java
Patch:
@@ -19,5 +19,5 @@
 
 public interface FrameFormater {
 
-	public String toString(GenericStackElement element);
+    public String toString(GenericStackElement element);
 }

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/event/EventPredicate.java
Patch:
@@ -2,4 +2,4 @@
 
 public interface EventPredicate<T extends Event> extends EventMorpher<T, T> {
 
-}
\ No newline at end of file
+}

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/spi/parsers/InputStreamSource.java
Patch:
@@ -5,10 +5,10 @@
 
 /**
  * A simple interface for {@link InputStream} which can re reopen.
- *  
+ *
  * @author Alexey Ragozin (alexey.ragozin@gmail.com)
  */
 public interface InputStreamSource {
 
-	public InputStream open() throws IOException;
+    public InputStream open() throws IOException;
 }

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/AbstractFilteringStackTraceReader.java
Patch:
@@ -16,6 +16,6 @@ public boolean loadNext() throws IOException {
         }
         return false;
     }
-    
+
     protected abstract boolean evaluate();
-}
\ No newline at end of file
+}

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/AbstractStackFrameArray.java
Patch:
@@ -7,11 +7,11 @@
 public abstract class AbstractStackFrameArray implements StackFrameList {
 
     protected abstract StackFrame[] array();
-    
+
     protected abstract int from();
 
     protected abstract int to();
-    
+
     @Override
     public Iterator<StackFrame> iterator() {
         return new Iterator<StackFrame>() {
@@ -78,7 +78,7 @@ public StackFrameList fragment(int from, int to) {
     public StackFrame[] toArray() {
         return Arrays.copyOfRange(array(), from(), to());
     }
-    
+
     @Override
     public String toString() {
         return Arrays.asList(array()).subList(from(), to()).toString();

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/GenericStackElement.java
Patch:
@@ -3,8 +3,8 @@
 /**
  * Generic interface for stack trace element.
  * Introduced to allow analytical tools to be used with
- * synthetic stacks. 
- *  
+ * synthetic stacks.
+ *
  * @author Alexey Ragozin (alexey.ragozin@gmail.com)
  */
 public interface GenericStackElement {

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/StackFrameArray.java
Patch:
@@ -9,9 +9,9 @@ public class StackFrameArray extends AbstractStackFrameArray {
     final int to;
 
     public StackFrameArray(Collection<StackFrame> frames) {
-    	this(frames.toArray(new StackFrame[frames.size()]));
+        this(frames.toArray(new StackFrame[frames.size()]));
     }
-    
+
     public StackFrameArray(StackFrame[] array) {
         this(array, 0, array.length);
     }
@@ -25,7 +25,7 @@ public StackFrameArray(StackFrame[] array, int from, int to) {
     protected StackFrame[] array() {
         return array;
     }
-    
+
     protected int from() {
         return from;
     }

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/StackTraceEventReaderV4.java
Patch:
@@ -467,4 +467,4 @@ public CounterSet(TagCollection tags) {
             counters = new CounterArray(names, values);
         }
     }
-}
\ No newline at end of file
+}

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/StackTraceEventWriterV4.java
Patch:
@@ -525,4 +525,4 @@ public CapsuleException(Throwable cause) {
             super(cause);
         }
     }
-}
\ No newline at end of file
+}

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/StackTraceReaderV1.java
Patch:
@@ -142,4 +142,4 @@ private StackFrame readStackTraceElement() throws IOException {
         StackFrame e = new StackFrame(cp, cn, mtd, file, line);
         return e;
     }
-}
\ No newline at end of file
+}

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/StackTraceReaderV2.java
Patch:
@@ -202,4 +202,4 @@ private StackFrame readStackTraceElement() throws IOException {
         StackFrame e = new StackFrame(cp, cn, mtd, file, line);
         return e;
     }
-}
\ No newline at end of file
+}

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/StackTraceWriterV2.java
Patch:
@@ -160,4 +160,4 @@ public void close() {
         stringDic.clear();
         frameDic.clear();
     }
-}
\ No newline at end of file
+}

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/ThreadMXBeanEx.java
Patch:
@@ -9,7 +9,7 @@
 
 /**
  * Additional methods available in modern JVMs.
- * 
+ *
  * @author Alexey Ragozin (alexey.ragozin@gmail.com)
  */
 public interface ThreadMXBeanEx extends java.lang.management.ThreadMXBean {
@@ -21,7 +21,7 @@ public interface ThreadMXBeanEx extends java.lang.management.ThreadMXBean {
     public long[] getThreadUserTime(long[] ids);
 
     public long[] getThreadAllocatedBytes(long[] ids);
-    
+
     public static class BeanHelper {
 
         private static ObjectName name(String name) {
@@ -31,7 +31,7 @@ private static ObjectName name(String name) {
                 throw new RuntimeException(e);
             }
         }
-        
+
         public static ThreadMXBean connectThreadMXBean(MBeanServerConnection mserver) {
             ThreadMXBean bean;
             try {

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/ThreadNameFilter.java
Patch:
@@ -3,5 +3,5 @@
 public interface ThreadNameFilter {
 
     public boolean accept(String threadName);
-    
+
 }

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/analytics/FilteredStackTraceReader.java
Patch:
@@ -12,7 +12,7 @@ public class FilteredStackTraceReader extends ReaderProxy implements StackTraceR
 
     private final ThreadSnapshotFilter filter;
     private final StackTraceReader reader;
-    
+
     public FilteredStackTraceReader(ThreadSnapshotFilter filter, StackTraceReader reader) throws IOException {
         super(null);
         this.filter = filter;
@@ -76,7 +76,7 @@ private void seek() throws IOException {
             reader.loadNext();
         }
     }
-    
+
     @Override
     public boolean loadNext() throws IOException {
         reader.loadNext();

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/analytics/FrequencyHMAggregatorFactory.java
Patch:
@@ -8,8 +8,8 @@ class FrequencyHMAggregatorFactory implements ThreadDumpAggregator, ThreadDumpAg
     public ThreadDumpAggregator newInstance() {
         return new FrequencyHMAggregatorFactory();
     }
-    
-    
+
+
     long count = 0;
     double reciproicalTotal = 0;
     long lastTimestamp = Long.MAX_VALUE;
@@ -33,5 +33,5 @@ public Object info() {
         else {
             return Double.NaN;
         }
-    }    
+    }
 }

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/analytics/MaxTimestampAggregatorFactory.java
Patch:
@@ -13,7 +13,7 @@ public ThreadDumpAggregator newInstance() {
 
     @Override
     public void aggregate(ThreadSnapshot threadInfo) {
-        max = Math.max(max, threadInfo.timestamp());        
+        max = Math.max(max, threadInfo.timestamp());
     }
 
     @Override

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/analytics/MinTimestampAggregatorFactory.java
Patch:
@@ -13,11 +13,11 @@ public ThreadDumpAggregator newInstance() {
 
     @Override
     public void aggregate(ThreadSnapshot threadInfo) {
-        min = Math.min(min, threadInfo.timestamp());        
+        min = Math.min(min, threadInfo.timestamp());
     }
 
     @Override
     public Object info() {
         return min;
-    }    
+    }
 }

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/analytics/NativeAggregatorFactory.java
Patch:
@@ -11,14 +11,14 @@ public ThreadDumpAggregator newInstance() {
 
     long total;
     long matched;
-    
+
     @Override
     public void aggregate(ThreadSnapshot threadInfo) {
         ++total;
         if (threadInfo.stackTrace().isEmpty() || threadInfo.stackTrace().frameAt(0).isNative()) {
             ++matched;
         }
-        
+
     }
 
     @Override

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/analytics/ParserException.java
Patch:
@@ -3,10 +3,10 @@
 public class ParserException extends RuntimeException {
 
     private static final long serialVersionUID = 20151220L;
-    
+
     private String parseText;
     private int offset;
-    
+
     public ParserException(String parseText, int offset, String message) {
         super(message);
         this.parseText = parseText;
@@ -18,7 +18,7 @@ public ParserException(String parseText, int offset, String message, Exception e
         this.parseText = parseText;
         this.offset = offset;
     }
-    
+
     public String getParseText() {
         return parseText;
     }

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/analytics/PeriodCHMAggregatorFactory.java
Patch:
@@ -8,7 +8,7 @@ class PeriodCHMAggregatorFactory implements ThreadDumpAggregator, ThreadDumpAggr
     public ThreadDumpAggregator newInstance() {
         return new PeriodCHMAggregatorFactory();
     }
-    
+
     long count = 0;
     double total = 0;
     double totalSquares = 0;

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/analytics/PositionalStackMatcher.java
Patch:
@@ -7,9 +7,9 @@ public interface PositionalStackMatcher {
     /**
      * Find frame in trace matching a certain criteria.
      * Return index of matched frame (which will be greater of equal <code>matchFrom</code>).
-     * 
+     *
      * @return frame index or -1 if not found
      */
     public int matchNext(ThreadSnapshot snap, int matchFrom);
-    
+
 }

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/analytics/StackFrameMatcher.java
Patch:
@@ -5,5 +5,5 @@
 public interface StackFrameMatcher {
 
     public boolean evaluate(StackFrame frame);
-    
+
 }

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/analytics/ThreadIdAggregatorFactory.java
Patch:
@@ -10,7 +10,7 @@ public ThreadDumpAggregator newInstance() {
     }
 
     long id = -1;
-    
+
     @Override
     public void aggregate(ThreadSnapshot threadInfo) {
         id = threadInfo.threadId();

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/analytics/ThreadNameAggregatorFactory.java
Patch:
@@ -5,7 +5,7 @@
 class ThreadNameAggregatorFactory implements ThreadDumpAggregator, ThreadDumpAggregatorFactory {
 
     int lengthLimit;
-    
+
     public ThreadNameAggregatorFactory(int lengthLimit) {
         this.lengthLimit = lengthLimit;
     }
@@ -16,7 +16,7 @@ public ThreadDumpAggregator newInstance() {
     }
 
     String name = null;
-    
+
     @Override
     public void aggregate(ThreadSnapshot threadInfo) {
         name = threadInfo.threadName();

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/analytics/ThreadSnapshotCategorizer.java
Patch:
@@ -9,5 +9,5 @@ public interface ThreadSnapshotCategorizer {
     public List<String> getCategories();
 
     public String categorize(ThreadSnapshot snap);
-    
+
 }

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/analytics/ThreadStateAggregatorFactory.java
Patch:
@@ -7,19 +7,19 @@
 class ThreadStateAggregatorFactory implements ThreadDumpAggregator, ThreadDumpAggregatorFactory {
 
     private final State state;
-    
+
     public ThreadStateAggregatorFactory(State state) {
         this.state = state;
     }
-    
+
     @Override
     public ThreadDumpAggregator newInstance() {
         return new ThreadStateAggregatorFactory(state);
     }
 
     long total;
     long matched;
-    
+
     @Override
     public void aggregate(ThreadSnapshot threadInfo) {
         ++total;

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/analytics/TimeRangeFilter.java
Patch:
@@ -7,7 +7,7 @@
 public class TimeRangeFilter implements ThreadSnapshotFilter {
 
     private TimeRangeChecker checker;
-    
+
     public TimeRangeFilter(String lower, String upper, TimeZone tz) {
         this.checker = new TimeRangeChecker(lower, upper, tz);
     }

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/analytics/WaitCallsAggregatorFactory.java
Patch:
@@ -13,7 +13,7 @@ public ThreadDumpAggregator newInstance() {
     @Override
     public void aggregate(ThreadSnapshot threadInfo) {
         // TODO Auto-generated method stub
-        
+
     }
 
     @Override

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/analytics/flame/FlameColorPicker.java
Patch:
@@ -3,7 +3,7 @@
 import org.gridkit.jvmtool.stacktrace.GenericStackElement;
 
 public interface FlameColorPicker {
-    
+
     public int pickColor(GenericStackElement[] trace);
-    
-}
\ No newline at end of file
+
+}

File: sjk-stacktrace/src/test/java/org/gridkit/jvmtool/stacktrace/InProcessSamplerCheck.java
Patch:
@@ -13,16 +13,16 @@ public void testLocalAccess() throws IOException {
         ThreadDumpSampler sampler = new ThreadDumpSampler();
         sampler.connect(ManagementFactory.getThreadMXBean());
         sampler.collect(new StackTraceWriter() {
-            
+
             @Override
             public void write(ThreadSnapshot snap) throws IOException {
                 Assert.assertTrue(snap.counters().getValue(ThreadCounters.ALLOCATED_BYTES) >= 0);
             }
-            
+
             @Override
             public void close() {
             }
         });
     }
-    
+
 }

File: sjk-stacktrace/src/test/java/org/gridkit/jvmtool/stacktrace/StackFrameTest.java
Patch:
@@ -120,7 +120,7 @@ public void test_non_equality_with_prefix_mismatch() {
         StackFrame frame2 = new StackFrame("mypackage", "MyClass", "myMethod", "MyClass.java", 15);
 
         Assert.assertNotEquals(frame1.hashCode(), frame2.hashCode());
-        
+
         zeroHash(frame1);
         zeroHash(frame2);
 

File: sjk-stacktrace/src/test/java/org/gridkit/jvmtool/stacktrace/TraceLoader.java
Patch:
@@ -13,7 +13,7 @@ public class TraceLoader {
     public static StackFrame[] loadFrames(String res) {
         return loadFrames(res);
     }
-    
+
     public static StackFrame[] loadFrames(String res, int multiplier) {
         try {
             List<StackFrame> frames = new ArrayList<StackFrame>();

File: sjk-json/src/main/java/org/gridkit/jvmtool/jackson/CharacterEscapes.java
Patch:
@@ -29,7 +29,7 @@ public abstract class CharacterEscapes
      * sequence to output.
      */
     public final static int ESCAPE_CUSTOM = -2;
-    
+
     /**
      * Helper method that can be used to get a copy of standard JSON
      * escape definitions; this is useful when just wanting to slightly

File: sjk-json/src/main/java/org/gridkit/jvmtool/jackson/DefaultPrettyPrinter.java
Patch:
@@ -270,10 +270,10 @@ public void writeIndentation(JsonGenerator jg, int level)
             jg.writeRaw(SYSTEM_LINE_SEPARATOR);
             level += level; // 2 spaces per level
             while (level > SPACE_COUNT) { // should never happen but...
-                jg.writeRaw(SPACES, 0, SPACE_COUNT); 
+                jg.writeRaw(SPACES, 0, SPACE_COUNT);
                 level -= SPACE_COUNT;
             }
-            
+
             jg.writeRaw(SPACES, 0, level);
         }
     }

File: sjk-json/src/main/java/org/gridkit/jvmtool/jackson/JsonGenerationException.java
Patch:
@@ -10,7 +10,7 @@ public class JsonGenerationException
 {
     @SuppressWarnings("hiding")
     final static long serialVersionUID = 123; // Stupid eclipse...
-    
+
     public JsonGenerationException(Throwable rootCause)
     {
         super(rootCause);

File: sjk-json/src/main/java/org/gridkit/jvmtool/jackson/JsonProcessingException.java
Patch:
@@ -11,7 +11,7 @@ public class JsonProcessingException
     extends java.io.IOException
 {
     final static long serialVersionUID = 123; // Stupid eclipse...
-	
+
     protected JsonLocation mLocation;
 
     protected JsonProcessingException(String msg, JsonLocation loc, Throwable rootCause)

File: sjk-json/src/main/java/org/gridkit/jvmtool/jackson/PrettyPrinter.java
Patch:
@@ -163,4 +163,3 @@ public void beforeArrayValues(JsonGenerator jg)
     public void beforeObjectEntries(JsonGenerator jg)
         throws IOException, JsonGenerationException;
 }
-

File: sjk-core/src/main/java/org/gridkit/jvmtool/cmd/DumpExportCmd.java
Patch:
@@ -64,7 +64,7 @@ public Runnable newCommand(CommandLauncher host) {
 		return new DumpExport(host);
 	}
 
-	@Parameters(commandDescription = "[Dump Export] Extract metrics form compressed dump into tabular format")
+	@Parameters(commandDescription = "[Dump Export] Extract metrics from compressed dump into tabular format")
 	public static class DumpExport implements Runnable {
 
 		@ParametersDelegate

File: sjk-hflame/src/test/java/org/gridkit/jvmtool/hflame/FlameTemplateProcessorCheck.java
Patch:
@@ -40,6 +40,7 @@ public void simple_template_smoke_test() throws IOException {
 		Document doc = loadXml("flame_template.html");
 
 		FlameTemplateProcessor ftp = new FlameTemplateProcessor(doc);
+//		ftp.retainDebug(true);
 		
 		ftp.setDataSet("fg1", loadDataSet("hz1_dump.sjk"));
 		

File: sjk-core/src/main/java/org/gridkit/jvmtool/cmd/StackSampleAnalyzerCmd.java
Patch:
@@ -85,7 +85,7 @@ public static class SSA implements Runnable {
         @Parameter(names={"-nc", "--named-class"}, required = false, variableArity = true, description="May be used with some commands to define name stack trace classes\nUse <name>=<filter expression> notation")
         private List<String> namedClasses = new ArrayList<String>();
         
-        @Parameter(names={"-tz", "--time-zone"}, required = false, description="Time zone used for timestamps")
+        @Parameter(names={"-tz", "--time-zone"}, required = false, description="Time zone used for timestamps and time ranges")
         private String timeZone = "UTC";
 
         @Parameter(names={"-co", "--csv-output"}, required = false, description="Output data in CSV format")

File: sjk-core/src/main/java/org/gridkit/jvmtool/cmd/MxCmd.java
Patch:
@@ -133,7 +133,7 @@ class CallCmd implements Runnable {
 			@Parameter(names={"-op", "--operation"}, description="MBean operation name to be called")
 			String operation = null;
 
-			@Parameter(names={"-a", "--arguments"}, variableArity=true, description="Arguments for MBean operation invocation")
+			@Parameter(names={"-a", "--arguments"}, variableArity=true, splitter = Unsplitter.class, description="Arguments for MBean operation invocation")
 			List<String> arguments = new ArrayList<String>();
 
 			@Override

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/AbstractStackFrameArray.java
Patch:
@@ -66,7 +66,7 @@ public StackFrameList fragment(int from, int to) {
         }
         int nfrom = this.from() + from;
         int nto = this.from() + to;
-        if (nfrom >= this.to() || nfrom < this.from()) {
+        if (nfrom > this.to() || nfrom < this.from()) {
             throw new IndexOutOfBoundsException(nfrom + " > [" + this.from() + "," + this.to() + ")");
         }
         if (nto > this.to() || nto < this.from()) {

File: sjk-stacktrace/src/test/java/org/gridkit/jvmtool/stacktrace/RegExMicrobenchmark.java
Patch:
@@ -48,7 +48,7 @@ private static StackFrame[] loadFrames(String res, int multiplier) {
                         break;
                     }
                     if (line.trim().length() > 0)
-                    frames.add(StackFrame.parseTrace(line.trim()));
+                    frames.add(StackFrame.parseFrame(line.trim()));
                 }
             }
             return frames.toArray(new StackFrame[frames.size()]);

File: sjk-stacktrace/src/test/java/org/gridkit/jvmtool/stacktrace/TraceLoader.java
Patch:
@@ -26,7 +26,7 @@ public static StackFrame[] loadFrames(String res, int multiplier) {
                         break;
                     }
                     if (line.trim().length() > 0)
-                    frames.add(StackFrame.parseTrace(line.trim()));
+                    frames.add(StackFrame.parseFrame(line.trim()));
                 }
             }
             return frames.toArray(new StackFrame[frames.size()]);
@@ -45,7 +45,7 @@ public static StackFrame[] parseFrames(String trace) {
                     break;
                 }
                 if (line.trim().length() > 0)
-                    frames.add(StackFrame.parseTrace(line.trim()));
+                    frames.add(StackFrame.parseFrame(line.trim()));
             }
             return frames.toArray(new StackFrame[frames.size()]);
         } catch (IOException e) {

File: sjk-stacktrace/src/test/java/org/gridkit/jvmtool/stacktrace/analytics/FilterParserMatchingTest.java
Patch:
@@ -33,10 +33,10 @@ public Trace(String name) {
         
         public Trace t(String trace) {
             if (trace.indexOf('(') > 0) {
-                frame.add(StackFrame.parseTrace(trace));
+                frame.add(StackFrame.parseFrame(trace));
             }
             else {
-                frame.add(StackFrame.parseTrace(trace + "(X.java)"));
+                frame.add(StackFrame.parseFrame(trace + "(X.java)"));
             }
             return this;
         }

File: hprof-heap/src/main/java/org/gridkit/jvmtool/heapdump/SingletonDetector.java
Patch:
@@ -16,7 +16,6 @@ public void findSingletons(Heap heap) {
                 if (field instanceof ObjectFieldValue) {
                     long ref = ((ObjectFieldValue)field).getInstanceId();
                     if (ref != 0) {
-                        System.out.println(jc.getName() + "#" + field.getField().getName());
                         singletons.set(ref, true);
                     }
                 }

File: sjk-core/src/test/java/org/gridkit/jvmtool/CliCheck.java
Patch:
@@ -102,7 +102,7 @@ public void gc_self() {
 
 	@Test
 	public void hh_self() {
-		exec("hh", "-p", "3112");
+		exec("hh", "-p", PID);
 	}
 
 	@Test
@@ -297,7 +297,7 @@ public void ssa_thread_info_2() {
 
 	@Test
 	public void ssa_thread_info_3() {
-	    exec("ssa", "--thread-info", "-si", "NAME", "ALLOC", "Sock=java.net.SocketInputStream.socketRead0", "-f", "target/test.stp", "-X");
+	    exec("ssa", "--thread-info", "-si", "NAME8", "ALLOC", "Sock=java.net.SocketInputStream.socketRead0", "-f", "target/test.stp", "-X");
 	}
 
     @Test

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/StackFrame.java
Patch:
@@ -1,6 +1,6 @@
 package org.gridkit.jvmtool.stacktrace;
 
-public class StackFrame implements CharSequence {
+public class StackFrame implements CharSequence, GenericStackElement {
 
     private static final String NATIVE_METHOD = "Native Method";
     private static final String UNKNOWN_SOURCE = "Unknown Source";

File: sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/StackFrameList.java
Patch:
@@ -1,6 +1,6 @@
 package org.gridkit.jvmtool.stacktrace;
 
-public interface StackFrameList extends Iterable<StackFrame> {
+public interface StackFrameList extends Iterable<StackFrame>, GenericStackElementList<StackFrame> {
 
     /**
      * Stack has classical bottom up indexing.

File: sjk-stacktrace/src/test/java/org/gridkit/jvmtool/stacktrace/analytics/FlameCheck.java
Patch:
@@ -9,6 +9,7 @@
 
 import org.gridkit.jvmtool.stacktrace.StackTraceCodec;
 import org.gridkit.jvmtool.stacktrace.StackTraceReader;
+import org.gridkit.jvmtool.stacktrace.analytics.flame.FlameGraphGenerator;
 import org.junit.Test;
 
 public class FlameCheck {
@@ -21,7 +22,7 @@ public StackTraceReader read() throws FileNotFoundException, IOException {
     
     @Test
     public void check() throws IOException {
-        FlameGraph fg = new FlameGraph();
+        FlameGraphGenerator fg = new FlameGraphGenerator();
         StackTraceReader r = read();
         if (!r.isLoaded()) {
             r.loadNext();

File: sjk-core/src/main/java/org/gridkit/jvmtool/MBeanCpuUsageReporter.java
Patch:
@@ -313,7 +313,7 @@ public String report() {
 			}
 			if (currentSafePointCount > 0) {
 			    if (currentSafePointCount == lastSafePointCount) {
-			        sb.append(String.format("  no safe points"));			    
+			        sb.append(String.format("  no safe points\n"));			    
 			    }
 			    else {
     			    double spRate = (TimeUnit.SECONDS.toNanos(1) * (double)(currentSafePointCount - lastSafePointCount)) / timeSplit;

File: hprof-heap/src/test/java/org/gridkit/jvmtool/heapdump/example/JBossServerDumpExample.java
Patch:
@@ -16,12 +16,12 @@
 import org.gridkit.jvmtool.heapdump.HeapClusterAnalyzer.ClusterDetails;
 import org.gridkit.jvmtool.heapdump.HeapHistogram;
 import org.gridkit.jvmtool.heapdump.HeapHistogram.ClassRecord;
-import org.gridkit.jvmtool.heapdump.HeapTools;
 import org.gridkit.jvmtool.heapdump.StringCollector;
 import org.gridkit.jvmtool.util.TextTable;
 import org.junit.Before;
 import org.junit.Test;
 import org.netbeans.lib.profiler.heap.Heap;
+import org.netbeans.lib.profiler.heap.HeapFactory;
 import org.netbeans.lib.profiler.heap.Instance;
 import org.netbeans.lib.profiler.heap.JavaClass;
 
@@ -38,7 +38,7 @@ public class JBossServerDumpExample {
     @Before
     public void initHeapDump() throws IOException {
         String dumppath = ""; // path to dump file                
-        heap = HeapTools.openHeapDump(new File(dumppath));        
+        heap = HeapFactory.createFastHeap(new File(dumppath));        
     }
 
     /** Reports retained size of string object in dump */

File: hprof-heap/src/test/java/org/gridkit/jvmtool/heapdump/example/JsfTreeExample.java
Patch:
@@ -10,11 +10,11 @@
 import java.util.Set;
 
 import org.gridkit.jvmtool.heapdump.HeapHistogram;
-import org.gridkit.jvmtool.heapdump.HeapTools;
 import org.gridkit.jvmtool.heapdump.HeapWalker;
 import org.gridkit.jvmtool.util.TextTree;
 import org.junit.Test;
 import org.netbeans.lib.profiler.heap.Heap;
+import org.netbeans.lib.profiler.heap.HeapFactory;
 import org.netbeans.lib.profiler.heap.Instance;
 import org.netbeans.lib.profiler.heap.JavaClass;
 
@@ -29,7 +29,7 @@ public class JsfTreeExample {
     @Test
     public void check() throws FileNotFoundException, IOException {
         String dumppath = ""; // path to dump of JEE server
-        Heap heap = HeapTools.openHeapDump(new File(dumppath));
+        Heap heap = HeapFactory.createFastHeap(new File(dumppath));
         dumpComponentTree(heap);
     }
     

File: sjk-core/src/main/java/org/gridkit/util/formating/TextTable.java
Patch:
@@ -130,8 +130,8 @@ public String formatToCSV() {
         try {
             StringWriter sw = new StringWriter();
             CSVWriter writer = new CSVWriter(sw, ',', '"', '"', "\n");
-            for(String[] rows: rows) {
-                writer.writeNext(rows);
+            for(String[] row: rows) {
+                writer.writeNext(row);
             }
             writer.close();
             return sw.toString();

File: hprof-heap/src/main/java/org/gridkit/jvmtool/heapdump/HeapPath.java
Patch:
@@ -288,7 +288,7 @@ static Set<Move> track(Instance instance, PathStep[] steps) {
                 Iterator<Move> it = step.track(i.instance);
                 while(it.hasNext()) {
                     Move sub = it.next();
-                    if (sub != null) {
+                    if (sub.instance != null) {
                         next.add(new Move(i.pathSpec + sub.pathSpec, sub.instance));
                     }
                 }
@@ -301,7 +301,7 @@ static Set<Move> track(Instance instance, PathStep[] steps) {
             if (active.isEmpty()) {
                 return active;
             }
-    }
+        }
 
         return active;
     }

File: sjk-core/src/main/java/org/gridkit/jvmtool/JmxConnectionInfo.java
Patch:
@@ -54,7 +54,7 @@ public Long getPID() {
 	
 	public MBeanServerConnection getMServer() {
 		if (pid == null && sockAddr == null) {
-			SJK.failAndPrintUsage("JVM porcess is not specified");
+			SJK.failAndPrintUsage("JVM process is not specified");
 		}
 		
 		if (pid != null && sockAddr != null) {

File: sjk-core/src/main/java/org/gridkit/jvmtool/JmxConnectionInfo.java
Patch:
@@ -54,7 +54,7 @@ public Long getPID() {
 	
 	public MBeanServerConnection getMServer() {
 		if (pid == null && sockAddr == null) {
-			SJK.failAndPrintUsage("JVM porcess is not specified");
+			SJK.failAndPrintUsage("JVM process is not specified");
 		}
 		
 		if (pid != null && sockAddr != null) {

File: sjk-core/src/main/java/org/gridkit/jvmtool/cmd/StackCaptureCmd.java
Patch:
@@ -37,6 +37,7 @@
 import org.gridkit.jvmtool.stacktrace.StackTraceCodec;
 import org.gridkit.jvmtool.stacktrace.StackTraceWriter;
 import org.gridkit.jvmtool.stacktrace.ThreadDumpSampler;
+import org.gridkit.jvmtool.stacktrace.ThreadMXBeanEx;
 import org.gridkit.jvmtool.stacktrace.ThreadSnapshot;
 
 import com.beust.jcommander.Parameter;
@@ -109,7 +110,7 @@ public void run() {
 			
 			try {
 				MBeanServerConnection mserver = connInfo.getMServer();
-				ThreadMXBean bean = ThreadDumpSampler.connectThreadMXBean(mserver);
+				ThreadMXBean bean = ThreadMXBeanEx.BeanHelper.connectThreadMXBean(mserver);
 
 				sampler = new ThreadDumpSampler();
 				sampler.setThreadFilter(threadFilter);

File: sjk-core/src/main/java/org/gridkit/jvmtool/cmd/ThreadTopCmd.java
Patch:
@@ -60,7 +60,7 @@ public static class TTop implements Runnable {
 		private long reportIntervalMS = TimeUnit.SECONDS.toMillis(10);
 
 		@Parameter(names = {"-si", "--sampler-interval"}, converter = TimeIntervalConverter.class, description = "Interval between polling MBeans")
-		private long samplerIntervalMS = 50;
+		private long samplerIntervalMS = 500;
 		
 		@Parameter(names = {"-n", "--top-number"}, description = "Number of threads to show")
 		private int topNumber = Integer.MAX_VALUE;
@@ -132,6 +132,7 @@ else if ("NAME".equals(tag)){
 				while(true) {
 					while(System.currentTimeMillis() < deadline) {
 						Thread.sleep(samplerIntervalMS);
+						tmon.probe();
 					}
 					deadline += reportIntervalMS;
 					System.out.println();

File: sjk-core/src/test/java/org/gridkit/jvmtool/CliCheck.java
Patch:
@@ -74,7 +74,7 @@ public void jps_print_flags() {
 	@Test
 	public void ttop_self() {
 
-		exec("ttop", "-p", PID);
+		exec("ttop", "-p", PID, "-X");
 	}
 
 	@Test

File: sjk-core/src/main/java/org/gridkit/jvmtool/MBeanCpuUsageReporter.java
Patch:
@@ -337,7 +337,7 @@ private static class SysTimeComparator implements Comparator<ThreadLine> {
 		
 		@Override
 		public int compare(ThreadLine o1, ThreadLine o2) {
-			return Double.compare(o2.userT, o1.userT);
+			return Double.compare(o2.sysT, o1.sysT);
 		}
 	}
 

File: hprof-heap/src/test/java/org/netbeans/lib/profiler/heap/DummyA.java
Patch:
@@ -18,7 +18,7 @@
 public class DummyA {
 
     int[] values;
-
+    
     public DummyA() {
         values = new int[16];
     }

File: sjk-core/src/main/java/org/gridkit/jvmtool/JmxConnectionInfo.java
Patch:
@@ -89,6 +89,7 @@ else if (sockAddr != null) {
 		}		
 	}
 
+	@SuppressWarnings("resource")
 	private MBeanServerConnection connectJmx(String host, int port, Map<String, Object> props) {
 		try {
 			final String uri = "service:jmx:rmi:///jndi/rmi://" + host + ":" + port + "/jmxrmi";

File: sjk-core/src/main/java/org/gridkit/jvmtool/cmd/MxCmd.java
Patch:
@@ -46,7 +46,6 @@ public Runnable newCommand(SJK host) {
 	@Parameters(commandDescription = "MBean query and invokation")
 	public static class MX implements Runnable {
 		
-		@SuppressWarnings("unused")
 		@ParametersDelegate
 		private SJK host;
 		

File: sjk-core/src/main/java/org/gridkit/jvmtool/cmd/ThreadTopCmd.java
Patch:
@@ -53,7 +53,6 @@ public Runnable newCommand(SJK host) {
 	@Parameters(commandDescription = "[Thread Top] Displays threads from JVM process")
 	public static class TTop implements Runnable {
 
-		@SuppressWarnings("unused")
 		@ParametersDelegate
 		private SJK host;
 		

File: sjk-core/src/main/java/org/gridkit/jvmtool/stacktrace/StackTraceCodec.java
Patch:
@@ -262,7 +262,7 @@ private int intern(StackTraceElement ste) throws IOException {
                 String pkg = ste.getClassName();
                 int c = pkg.lastIndexOf('.');
                 String cn = c < 0 ? pkg : pkg.substring(c + 1);
-                pkg = c < 0 ? "" : pkg.substring(0, c);
+                pkg = c < 0 ? null : pkg.substring(0, c);
                 String mtd = ste.getMethodName();
                 String file = ste.getFileName();
                 int line = ste.getLineNumber() + 2;

File: hprof-heap/src/main/java/org/netbeans/lib/profiler/heap/HeapOffsetMap.java
Patch:
@@ -137,7 +137,7 @@ long offsetForCompressed(long cid) {
         }
         int shift = shiftMap[(int) (ref % pageSize)];
         if (shift < 0) {
-            throw new IllegalArgumentException("ID is not valid: " + cid);
+            throw new IllegalArgumentException("Compressed ID is not valid: " + cid);
         }
         long offs = baseOffs + shift;
         return offs;
@@ -164,7 +164,7 @@ private int scanPage(int page) {
                 
                 // number of pages to be added up front
                 int ps = (int) (((cidOffset - ciid + pageSize - 1) / (pageSize)));
-                long oldIdBase = cidOffset;
+                long oldCidBase = cidOffset;
                 cidOffset -= ps * pageSize;
                 long[] noffsetMap = new long[offsetMap.length + ps];
                 Arrays.fill(noffsetMap, 0, ps, 0); // explicitly nullify array to avoid possible JIT bug
@@ -177,7 +177,7 @@ private int scanPage(int page) {
                 nestedScan = true;
                 scanPage(ps - 1);
                 // another shift may have happen
-                ps = (int) (compressID(oldIdBase) / pageSize);
+                ps = (int) (compressID(oldCidBase << allignmentBits) / pageSize);
                 maxPage = savedMaxPage + ps;
                 nestedScan = savedNestedScan;
                 page += ps;

File: hprof-heap/src/main/java/org/netbeans/lib/profiler/heap/HprofByteBuffer.java
Patch:
@@ -79,8 +79,7 @@ static HprofByteBuffer createHprofByteBuffer(File dumpFile)
         long fileLen = dumpFile.length();
 
         if (fileLen < MINIMAL_SIZE) {
-            String errText = ResourceBundle.getBundle("org/netbeans/lib/profiler/heap/Bundle")
-                                           .getString("HprofByteBuffer_ShortFile"); // NOI18N
+            String errText = "File size is too small";
             throw new IOException(errText);
         }
 

File: sjk-core/src/main/java/org/gridkit/jvmtool/cmd/StackCaptureCmd.java
Patch:
@@ -143,7 +143,7 @@ public void run() {
 				System.out.println("Trace dumped: " + traceCounter);
 				
 			} catch (Exception e) {
-				SJK.fail("Unexpected error: " + e.toString());
+				SJK.fail("Unexpected error: " + e.toString(), e);
 			}			
 		}
 

File: sjk-core/src/main/java/org/gridkit/jvmtool/cmd/ThreadTopCmd.java
Patch:
@@ -143,7 +143,7 @@ else if ("NAME".equals(tag)){
 					}
 				}
 			} catch (Exception e) {
-				SJK.fail("Unexpected error: " + e.toString());
+				SJK.fail("Unexpected error: " + e.toString(), e);
 			}			
 		}
 	}

File: sjk-core/src/test/java/org/gridkit/jvmtool/CliCheck.java
Patch:
@@ -90,7 +90,7 @@ public void ttop_top_N_filtered() {
 
 	@Test
 	public void gc_self() {
-		exec("gc", "-p", PID);
+		exec("gc", "-p", "8084");
 	}
 
 	@Test

File: hprof-heap/src/main/java/org/netbeans/lib/profiler/heap/HeapOffsetMap.java
Patch:
@@ -131,7 +131,7 @@ private int scanPage(int page) {
             int cslot = n % cachePageId.length;
             cachePageId[cslot] = n;
             try {
-                readPage(n * pageSize, offsetMap[n], cachePageData[cslot]);
+                readPage(((long)n) * pageSize, offsetMap[n], cachePageData[cslot]);
             }
             catch(MalformedInstanceIdException e) {
                 // this one is tricky, we have encountered an address region outside of current bounds, 
@@ -233,7 +233,7 @@ private int[] getPage(int page) {
         }
         else {
             cachePageId[cslot] = page;
-            readPage((long)(page ) * pageSize, offsetMap[page], cachePageData[cslot]);
+            readPage((long)(page) * pageSize, offsetMap[page], cachePageData[cslot]);
             return cachePageData[cslot];
         }
     }

File: hprof-heap/src/main/java/org/gridkit/jvmtool/heapdump/TypeFilterStep.java
Patch:
@@ -68,14 +68,15 @@ private boolean match(JavaClass javaClass) {
         if (checkSuper) {
             JavaClass cc = javaClass.getSuperClass();
             while(cc != null) {
+                name = cc.getName();
                 for(MatchOption m: matchers) {
                     if (m.hierarchy) {
                         if (m.pattern.matcher(name).matches()) {
             return true;
         }
             }
                 }
-                cc = javaClass.getSuperClass();
+                cc = cc.getSuperClass();
             }
         }
 

File: hprof-heap/src/test/java/org/netbeans/lib/profiler/heap/BaseHeapTest.java
Patch:
@@ -156,23 +156,23 @@ public void verify_heap_walker_for_dummyB_over_map() {
             assertThat(testSet).isEqualTo(testSet("", no));
 
             testSet.clear();
-            for(Instance e :  HeapWalker.walk(i, "map.table?entrySet.key")) {
+            for(Instance e :  HeapWalker.walk(i, "map?entrySet.key")) {
                 if (e != null) {
                     testSet.add(stringValue(e));
                 }
             }
             assertThat(testSet).isEqualTo(testSet("k", no));
 
             testSet.clear();
-            for(Instance e :  HeapWalker.walk(i, "map.table?entrySet.value")) {
+            for(Instance e :  HeapWalker.walk(i, "map?entrySet.value")) {
                 if (e != null) {
                     testSet.add(stringValue(e));
                 }
             }
             assertThat(testSet).isEqualTo(testSet("v", no));
 
             if (testSet.size() > 5) {
-                assertThat(HeapWalker.valueOf(i, "map.table?entrySet[key=k3].value")).isEqualTo("v3");
+                assertThat(HeapWalker.valueOf(i, "map?entrySet[key=k3].value")).isEqualTo("v3");
             }
         }
 

File: hprof-heap/src/main/java/org/netbeans/lib/profiler/heap/LazyInstanceList.java
Patch:
@@ -46,7 +46,7 @@
 import java.util.Iterator;
 import java.util.NoSuchElementException;
 
-public class LazyInstanceList extends AbstractList<Instance> {
+class LazyInstanceList extends AbstractList<Instance> {
 
     private final Heap heap;
     private final JavaClass jclass;

File: hprof-heap/src/main/java/org/netbeans/lib/profiler/heap/Instance.java
Patch:
@@ -60,7 +60,7 @@ public interface Instance {
      * Speed: normal
      * @return list of {@link FieldValue} instance field values.
      */
-    List /*<FieldValue>*/ getFieldValues();
+    List<FieldValue> getFieldValues();
 
     /**
      * returns <CODE>true</CODE> if this is instance of GC root.
@@ -113,7 +113,7 @@ public interface Instance {
      * Speed: first invocation is slow, all subsequent invocations are fast
      * @return list of {@link Value} representing all references to this instance
      */
-    List /*<Value>*/ getReferences();
+    List<Value> getReferences();
 
     long getRetainedSize();
 
@@ -134,7 +134,7 @@ public interface Instance {
      * Speed: normal
      * @return list of {@link FieldValue} static field values.
      */
-    List /*<FieldValue>*/ getStaticFieldValues();
+    List<FieldValue> getStaticFieldValues();
 
     /**
      * Returns a value object that reflects the specified field of the instance

File: sjk-core/src/main/java/org/gridkit/jvmtool/MBeanCpuUsageReporter.java
Patch:
@@ -327,7 +327,7 @@ private static class CpuTimeComparator implements Comparator<ThreadLine> {
 		
 		@Override
 		public int compare(ThreadLine o1, ThreadLine o2) {
-			return Double.compare(o2.userT + o2.sysT, o1.userT + o1.userT);
+			return Double.compare(o2.userT + o2.sysT, o1.userT + o1.sysT);
 		}
 	}
 

File: sjk-core/src/main/java/org/gridkit/jvmtool/MBeanCpuUsageReporter.java
Patch:
@@ -327,7 +327,7 @@ private static class CpuTimeComparator implements Comparator<ThreadLine> {
 		
 		@Override
 		public int compare(ThreadLine o1, ThreadLine o2) {
-			return Double.compare(o2.userT + o2.sysT, o1.userT + o1.userT);
+			return Double.compare(o2.userT + o2.sysT, o1.userT + o1.sysT);
 		}
 	}
 

