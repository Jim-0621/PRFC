File: client/src/main/java/org/red5/client/Red5Client.java
Patch:
@@ -18,7 +18,7 @@ public final class Red5Client {
     /**
      * Current server version with revision
      */
-    public static final String VERSION = "Red5 Client 1.3.36";
+    public static final String VERSION = "Red5 Client 1.3.37";
 
     /**
      * Create a new Red5Client object using the connection local to the current thread A bit of magic that lets you access the red5 scope

File: common/src/main/java/org/red5/server/api/Red5.java
Patch:
@@ -57,7 +57,7 @@ public final class Red5 {
     /**
      * Server version with revision
      */
-    public static final String VERSION = "Red5 Server 1.3.36";
+    public static final String VERSION = "Red5 Server 1.3.37";
 
     /**
      * Server version for fmsVer requests

File: server/src/main/java/org/red5/net/websocket/WebSocketScopeManager.java
Patch:
@@ -181,6 +181,8 @@ public boolean addWebSocketScope(WebSocketScope webSocketScope) {
                                             log.debug("Removing unconnected connection: {} during ping loop", wsConn.getSessionId());
                                             // if the connection isn't connected, remove them
                                             wsScope.removeConnection(wsConn);
+                                            // if connection is not connected, close it (ensure closed / removed)
+                                            wsConn.close();
                                         }
                                     } catch (Exception e) {
                                         log.warn("Exception in WS pinger", e);

File: common/src/main/java/org/red5/server/net/rtmp/status/StatusObjectService.java
Patch:
@@ -14,7 +14,6 @@
 import org.apache.mina.core.buffer.IoBuffer;
 import org.red5.io.amf.Output;
 import org.red5.io.object.Serializer;
-import org.red5.io.utils.HexDump;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.InitializingBean;

File: server/src/test/java/org/red5/client/RemoteSOTest.java
Patch:
@@ -44,7 +44,7 @@ public void setUp() throws Exception {
             //System.err.println(e.getMessage());
             skipTest = true;
         } finally {
-            if (s.isConnected()) {
+            if (s != null && s.isConnected()) {
                 s.close();
             }
         }

File: client/src/main/java/org/red5/client/Red5Client.java
Patch:
@@ -18,7 +18,7 @@ public final class Red5Client {
     /**
      * Current server version with revision
      */
-    public static final String VERSION = "Red5 Client 1.3.34";
+    public static final String VERSION = "Red5 Client 1.3.35";
 
     /**
      * Create a new Red5Client object using the connection local to the current thread A bit of magic that lets you access the red5 scope

File: common/src/main/java/org/red5/server/AttributeStore.java
Patch:
@@ -153,7 +153,7 @@ public boolean setAttribute(final String name, final Object value) {
         boolean result = false;
         if (name != null && value != null) {
             // get previous value
-            final Object previous = attributes.putIfAbsent(name, value);
+            final Object previous = attributes.put(name, value);
             // previous will be null if the attribute didn't exist and if it does it will equal the previous value
             if (previous != null) {
                 // if the value is a collection, check the elements for modification

File: common/src/main/java/org/red5/server/api/Red5.java
Patch:
@@ -57,12 +57,12 @@ public final class Red5 {
     /**
      * Server version with revision
      */
-    public static final String VERSION = "Red5 Server 1.3.34";
+    public static final String VERSION = "Red5 Server 1.3.35";
 
     /**
      * Server version for fmsVer requests
      */
-    public static final String FMS_VERSION = "RED5/1,3,34,0";
+    public static final String FMS_VERSION = "RED5/1,3,35,0";
 
     /**
      * Server capabilities

File: common/src/main/java/org/red5/server/net/rtmp/codec/RTMPProtocolDecoder.java
Patch:
@@ -896,7 +896,7 @@ public Notify decodeStreamData(IoBuffer in) {
         if (encoding == Encoding.AMF3) {
             log.trace("Client indicates its using AMF3");
         }
-        //get the first datatype
+        // get the first datatype
         byte dataType = input.readDataType();
         log.debug("Data type: {}", dataType);
         if (dataType == DataTypes.CORE_STRING) {

File: io/src/main/java/org/red5/io/matroska/ParserUtils.java
Patch:
@@ -27,7 +27,7 @@
 import org.slf4j.LoggerFactory;
 
 public class ParserUtils {
- 
+
     private static Logger log = LoggerFactory.getLogger(ParserUtils.class);
 
     public static final int BIT_IN_BYTE = 8;

File: io/src/main/java/org/red5/io/matroska/dtd/TagFactory.java
Patch:
@@ -19,8 +19,8 @@
 
 /**
  * https://www.matroska.org/technical/tagging.html
- * 
- * factory for creating matroska tags, it use property file - matroska_type_definition_config.properties with structure: 
+ *
+ * factory for creating matroska tags, it use property file - matroska_type_definition_config.properties with structure:
  *   long id = "name provided specification","java class representing tag data"
  */
 public class TagFactory {
@@ -58,7 +58,7 @@ public static Tag createTag(VINT id, VINT size, InputStream inputStream) throws
                 tag = (Tag) nt.clazz.getConstructor(String.class, VINT.class, VINT.class, InputStream.class).newInstance(nt.name, id, size, inputStream);
             } catch (Exception e) {
                 log.error("Unexpected exception while creating tag", e);
-            }   
+            }
         } else {
             log.info("Unsupported matroska tag: {} {}", id, id.getBinary());
             //throw new ConverterException("not supported matroska tag: " + id.getBinary());

File: io/src/main/java/org/red5/io/object/Deserializer.java
Patch:
@@ -29,7 +29,7 @@ public class Deserializer {
 
     private static final Logger log = LoggerFactory.getLogger(Deserializer.class);
 
-    private static Set<String> BLACK_LIST;
+    private static Set<String> BLACK_LIST = Collections.emptySet();
 
     private Deserializer() {
     }

File: io/src/test/java/org/red5/io/webm/WebmTest.java
Patch:
@@ -9,7 +9,6 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
-import static org.junit.Assume.assumeTrue;
 
 import java.io.File;
 import java.io.FileInputStream;

File: client/src/main/java/org/red5/client/Red5Client.java
Patch:
@@ -18,7 +18,7 @@ public final class Red5Client {
     /**
      * Current server version with revision
      */
-    public static final String VERSION = "Red5 Client 1.3.27";
+    public static final String VERSION = "Red5 Client 1.3.28";
 
     /**
      * Create a new Red5Client object using the connection local to the current thread A bit of magic that lets you access the red5 scope

File: common/src/main/java/org/red5/server/api/Red5.java
Patch:
@@ -55,12 +55,12 @@ public final class Red5 {
     /**
      * Server version with revision
      */
-    public static final String VERSION = "Red5 Server 1.3.27";
+    public static final String VERSION = "Red5 Server 1.3.28";
 
     /**
      * Server version for fmsVer requests
      */
-    public static final String FMS_VERSION = "RED5/1,3,27,0";
+    public static final String FMS_VERSION = "RED5/1,3,28,0";
 
     /**
      * Server capabilities

File: common/src/main/java/org/red5/server/net/rtmp/RTMPMinaConnection.java
Patch:
@@ -124,7 +124,7 @@ public void operationComplete(CloseFuture future) {
                         if (future.isClosed()) {
                             log.info("Connection is closed: {}", getSessionId());
                             if (log.isTraceEnabled()) {
-                                log.trace("Session id - local: {} session: {}", getSessionId(), (String) ioSession.removeAttribute(RTMPConnection.RTMP_SESSION_ID));
+                                log.trace("Session id - local: {} session: {}", getSessionId(), (String) ioSession.getAttribute(RTMPConnection.RTMP_SESSION_ID));
                             }
                             handler.connectionClosed(self);
                         } else {
@@ -352,7 +352,7 @@ public void write(Packet out) {
             //if (log.isTraceEnabled()) {
             //    log.trace("Write lock wait count: {} closed: {}", lock.getQueueLength(), isClosed());
             //}
-            while (!isClosed()) {
+            while (state.getState() < RTMP.STATE_ERROR) {
                 boolean acquired = false;
                 try {
                     acquired = lock.tryAcquire(10, TimeUnit.MILLISECONDS);
@@ -392,7 +392,7 @@ public void write(Packet out) {
     public void writeRaw(IoBuffer out) {
         if (ioSession != null) {
             final Semaphore lock = getLock();
-            while (!isClosed()) {
+            while (state.getState() < RTMP.STATE_ERROR) {
                 boolean acquired = false;
                 try {
                     acquired = lock.tryAcquire(10, TimeUnit.MILLISECONDS);

File: server/src/test/java/org/red5/server/so/SharedObjectTest.java
Patch:
@@ -414,7 +414,7 @@ public void testAttributeBlastingWithPrimitive() throws Throwable {
         log.info("testAttributeBlastingWithPrimitive-end");
     }
 
-    @Test
+    //@Test
     public void testAttributeBlastingJSON() throws Throwable {
         log.info("testAttributeBlastingJSON");
         SOApplication app = (SOApplication) applicationContext.getBean("web.handler");

File: common/src/main/java/org/red5/server/scheduling/JDKSchedulingServiceJob.java
Patch:
@@ -65,9 +65,10 @@ public void run() {
             // remove the job
             if (autoRemove) {
                 service.removeScheduledJob(jobName);
+                // clear the map
+                jobDataMap.clear();
             }
-            // clear the map
-            jobDataMap.clear();
+
         }
     }
 

File: common/src/main/java/org/red5/server/scheduling/JDKSchedulingServiceJob.java
Patch:
@@ -65,9 +65,10 @@ public void run() {
             // remove the job
             if (autoRemove) {
                 service.removeScheduledJob(jobName);
+                // clear the map
+                jobDataMap.clear();
             }
-            // clear the map
-            jobDataMap.clear();
+
         }
     }
 

File: common/src/main/java/org/red5/server/net/rtmp/RTMPConnection.java
Patch:
@@ -78,6 +78,7 @@
 import org.red5.server.stream.StreamService;
 import org.red5.server.util.ScopeUtils;
 import org.springframework.core.task.TaskRejectedException;
+import org.springframework.lang.Nullable;
 import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
 import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;
 import org.springframework.util.concurrent.ListenableFuture;
@@ -1568,7 +1569,7 @@ public void onFailure(Throwable t) {
                         currentStreamTasks.removeTask(task);
                     }
 
-                    public void onSuccess(Packet packet) {
+                    public void onSuccess(@Nullable Packet packet) {
                         log.debug("ReceivedMessageTask success");
                         if (isDebug) {
                             log.debug("onSuccess - session: {}, msgType: {}, processingTime: {}, packetNum: {}", sessionId, messageType, getProcessingTime(), task.getPacketNumber());

File: client/src/main/java/org/red5/client/Red5Client.java
Patch:
@@ -18,7 +18,7 @@ public final class Red5Client {
     /**
      * Current server version with revision
      */
-    public static final String VERSION = "Red5 Client 1.3.16";
+    public static final String VERSION = "Red5 Client 1.3.17";
 
     /**
      * Create a new Red5Client object using the connection local to the current thread A bit of magic that lets you access the red5 scope

File: common/src/main/java/org/red5/server/api/Red5.java
Patch:
@@ -55,12 +55,12 @@ public final class Red5 {
     /**
      * Server version with revision
      */
-    public static final String VERSION = "Red5 Server 1.3.16";
+    public static final String VERSION = "Red5 Server 1.3.17";
 
     /**
      * Server version for fmsVer requests
      */
-    public static final String FMS_VERSION = "RED5/1,3,16,0";
+    public static final String FMS_VERSION = "RED5/1,3,17,0";
 
     /**
      * Server capabilities

File: server/src/main/java/org/red5/net/websocket/WSConstants.java
Patch:
@@ -14,6 +14,8 @@
  */
 public class WSConstants {
 
+    public final static String WS_UPGRADE_HANDLER = "ws.upgrader";
+
     public final static String WS_MANAGER = "ws.manager";
 
     public final static String WS_SCOPE = "ws.scope";

File: client/src/main/java/org/red5/client/Red5Client.java
Patch:
@@ -18,7 +18,7 @@ public final class Red5Client {
     /**
      * Current server version with revision
      */
-    public static final String VERSION = "Red5 Client 1.3.8";
+    public static final String VERSION = "Red5 Client 1.3.9";
 
     /**
      * Create a new Red5Client object using the connection local to the current thread A bit of magic that lets you access the red5 scope

File: common/src/main/java/org/red5/server/api/Red5.java
Patch:
@@ -55,12 +55,12 @@ public final class Red5 {
     /**
      * Server version with revision
      */
-    public static final String VERSION = "Red5 Server 1.3.8";
+    public static final String VERSION = "Red5 Server 1.3.9";
 
     /**
      * Server version for fmsVer requests
      */
-    public static final String FMS_VERSION = "RED5/1,3,8,0";
+    public static final String FMS_VERSION = "RED5/1,3,9,0";
 
     /**
      * Server capabilities

File: client/src/main/java/org/red5/client/Red5Client.java
Patch:
@@ -18,7 +18,7 @@ public final class Red5Client {
     /**
      * Current server version with revision
      */
-    public static final String VERSION = "Red5 Client 1.3.5";
+    public static final String VERSION = "Red5 Client 1.3.6";
 
     /**
      * Create a new Red5Client object using the connection local to the current thread A bit of magic that lets you access the red5 scope

File: common/src/main/java/org/red5/server/api/Red5.java
Patch:
@@ -55,12 +55,12 @@ public final class Red5 {
     /**
      * Server version with revision
      */
-    public static final String VERSION = "Red5 Server 1.3.5";
+    public static final String VERSION = "Red5 Server 1.3.6";
 
     /**
      * Server version for fmsVer requests
      */
-    public static final String FMS_VERSION = "RED5/1,3,5,0";
+    public static final String FMS_VERSION = "RED5/1,3,6,0";
 
     /**
      * Server capabilities

File: common/src/main/java/org/red5/server/stream/AbstractClientStream.java
Patch:
@@ -72,7 +72,8 @@ public void setConnection(IStreamCapableConnection conn) {
      * @return Stream capable connection object
      */
     public IStreamCapableConnection getConnection() {
-        return conn.get();
+        // prevent NPE on first call
+        return conn != null ? conn.get() : null;
     }
 
     /** {@inheritDoc} */

File: common/src/main/java/org/red5/server/stream/PlayEngine.java
Patch:
@@ -483,7 +483,7 @@ public void execute(ISchedulingService service) {
                 sendStreamNotFoundStatus(item);
                 throw new StreamNotFoundException(itemName);
         }
-        //continue with common play processes (live and vod)
+        // continue with common play processes (live and vod)
         if (sendNotifications) {
             if (withReset) {
                 sendReset();

File: server/src/main/java/org/red5/net/websocket/WebSocketScopeManager.java
Patch:
@@ -163,7 +163,7 @@ public boolean addWebSocketScope(WebSocketScope webSocketScope) {
                                 try {
                                     // ping connected websocket
                                     if (wsConn.isConnected()) {
-                                        log.debug("pinging ws: {} on scope: {}", wsConn.getWsSessionId(), sName);
+                                        log.trace("pinging ws: {} on scope: {}", wsConn.getWsSessionId(), sName);
                                         try {
                                             wsConn.sendPing(PING_BYTES);
                                         } catch (Exception e) {

File: server/src/test/java/org/red5/server/scope/ScopeTest.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 import org.junit.After;
-import org.junit.Assert;
 import org.junit.Before;
 import org.junit.FixMethodOrder;
 import org.junit.Test;

File: client/src/main/java/org/red5/client/Red5Client.java
Patch:
@@ -18,7 +18,7 @@ public final class Red5Client {
     /**
      * Current server version with revision
      */
-    public static final String VERSION = "Red5 Client 1.3.2";
+    public static final String VERSION = "Red5 Client 1.3.3";
 
     /**
      * Create a new Red5Client object using the connection local to the current thread A bit of magic that lets you access the red5 scope

File: common/src/main/java/org/red5/server/api/Red5.java
Patch:
@@ -55,12 +55,12 @@ public final class Red5 {
     /**
      * Server version with revision
      */
-    public static final String VERSION = "Red5 Server 1.3.2";
+    public static final String VERSION = "Red5 Server 1.3.3";
 
     /**
      * Server version for fmsVer requests
      */
-    public static final String FMS_VERSION = "RED5/1,3,2,0";
+    public static final String FMS_VERSION = "RED5/1,3,3,0";
 
     /**
      * Server capabilities

File: client/src/main/java/org/red5/client/Red5Client.java
Patch:
@@ -18,7 +18,7 @@ public final class Red5Client {
     /**
      * Current server version with revision
      */
-    public static final String VERSION = "Red5 Client 1.3.0";
+    public static final String VERSION = "Red5 Client 1.3.1";
 
     /**
      * Create a new Red5Client object using the connection local to the current thread A bit of magic that lets you access the red5 scope

File: common/src/main/java/org/red5/server/api/Red5.java
Patch:
@@ -55,12 +55,12 @@ public final class Red5 {
     /**
      * Server version with revision
      */
-    public static final String VERSION = "Red5 Server 1.3.0";
+    public static final String VERSION = "Red5 Server 1.3.1";
 
     /**
      * Server version for fmsVer requests
      */
-    public static final String FMS_VERSION = "RED5/1,3,0,0";
+    public static final String FMS_VERSION = "RED5/1,3,1,0";
 
     /**
      * Server capabilities

File: common/src/main/java/org/red5/server/adapter/MultiThreadedApplicationAdapter.java
Patch:
@@ -972,6 +972,7 @@ public String addScheduledJob(int interval, IScheduledJob job) {
         if (schedulingService == null) {
             schedulingService = (ISchedulingService) ScopeUtils.getScopeService(scope, ISchedulingService.class, JDKSchedulingService.class, false);
         }
+        // the caller is requred to call removal one they have finished with this job
         return schedulingService.addScheduledJob(interval, job);
     }
 
@@ -1025,6 +1026,7 @@ public String addScheduledJobAfterDelay(int interval, IScheduledJob job, int del
         if (schedulingService == null) {
             schedulingService = (ISchedulingService) ScopeUtils.getScopeService(scope, ISchedulingService.class, JDKSchedulingService.class, false);
         }
+        // the caller is requred to call removal one they have finished with this job
         return schedulingService.addScheduledJobAfterDelay(interval, job, delay);
     }
 

File: client/src/main/java/org/red5/client/Red5Client.java
Patch:
@@ -18,7 +18,7 @@ public final class Red5Client {
     /**
      * Current server version with revision
      */
-    public static final String VERSION = "Red5 Client 1.2.29";
+    public static final String VERSION = "Red5 Client 1.2.30";
 
     /**
      * Create a new Red5Client object using the connection local to the current thread A bit of magic that lets you access the red5 scope

File: common/src/main/java/org/red5/server/api/Red5.java
Patch:
@@ -55,12 +55,12 @@ public final class Red5 {
     /**
      * Server version with revision
      */
-    public static final String VERSION = "Red5 Server 1.2.29";
+    public static final String VERSION = "Red5 Server 1.2.30";
 
     /**
      * Server version for fmsVer requests
      */
-    public static final String FMS_VERSION = "RED5/1,2,29,0";
+    public static final String FMS_VERSION = "RED5/1,2,30,0";
 
     /**
      * Server capabilities

File: common/src/main/java/org/red5/server/stream/consumer/ConnectionConsumer.java
Patch:
@@ -156,8 +156,8 @@ public void pushMessage(IPipe pipe, IMessage message) {
             }
             // create a new header for the consumer if the message.body doesnt already have one
             final Header header = Optional.ofNullable(msg.getHeader()).orElse(new Header());
-            // XXX sets the timerbase, but should we do this if there's already a timerbase?
-            header.setTimerBase(eventTime);
+            // resets the header times
+            header.setTimer(eventTime);
             // data buffer
             IoBuffer buf = null;
             switch (dataType) {

File: server/src/main/java/org/red5/net/websocket/server/DefaultWebSocketEndpoint.java
Patch:
@@ -11,7 +11,6 @@
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
 import java.nio.ByteBuffer;
-import java.util.Optional;
 
 import javax.websocket.CloseReason;
 import javax.websocket.Endpoint;
@@ -24,7 +23,6 @@
 import org.red5.net.websocket.WSConstants;
 import org.red5.net.websocket.WebSocketConnection;
 import org.red5.net.websocket.WebSocketScope;
-import org.red5.net.websocket.WebSocketScopeManager;
 import org.red5.net.websocket.model.WSMessage;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -38,6 +36,7 @@ public class DefaultWebSocketEndpoint extends Endpoint {
 
     private final Logger log = LoggerFactory.getLogger(DefaultWebSocketEndpoint.class);
 
+    @SuppressWarnings("unused")
     private final boolean isDebug = log.isDebugEnabled();
 
     private final boolean isTrace = log.isTraceEnabled();

File: server/src/main/java/org/red5/net/websocket/server/UpgradeUtil.java
Patch:
@@ -184,8 +184,10 @@ public static void doUpgrade(DefaultWsServerContainer sc, HttpServletRequest req
         } catch (InstantiationException e) {
             throw new ServletException(e);
         }
+        log.debug("About to upgrade http session: {} qs: {}", wsRequest.getHttpSession(), wsRequest.getQueryString());
         WsHttpUpgradeHandler wsHandler = req.upgrade(WsHttpUpgradeHandler.class);
         wsHandler.preInit(ep, perSessionServerEndpointConfig, sc, wsRequest, negotiatedExtensionsPhase2, subProtocol, transformation, pathParams, req.isSecure());
+        log.debug("preinit completed");
     }
 
     private static List<Transformation> createTransformations(List<Extension> negotiatedExtensions) {

File: client/src/main/java/org/red5/client/Red5Client.java
Patch:
@@ -18,7 +18,7 @@ public final class Red5Client {
     /**
      * Current server version with revision
      */
-    public static final String VERSION = "Red5 Client 1.2.26";
+    public static final String VERSION = "Red5 Client 1.2.27";
 
     /**
      * Create a new Red5Client object using the connection local to the current thread A bit of magic that lets you access the red5 scope

File: common/src/main/java/org/red5/server/api/Red5.java
Patch:
@@ -55,12 +55,12 @@ public final class Red5 {
     /**
      * Server version with revision
      */
-    public static final String VERSION = "Red5 Server 1.2.26";
+    public static final String VERSION = "Red5 Server 1.2.27";
 
     /**
      * Server version for fmsVer requests
      */
-    public static final String FMS_VERSION = "RED5/1,2,26,0";
+    public static final String FMS_VERSION = "RED5/1,2,27,0";
 
     /**
      * Server capabilities

File: server/src/main/java/org/red5/server/net/rtmp/RTMPConnManager.java
Patch:
@@ -14,7 +14,6 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;

File: client/src/main/java/org/red5/client/Red5Client.java
Patch:
@@ -18,7 +18,7 @@ public final class Red5Client {
     /**
      * Current server version with revision
      */
-    public static final String VERSION = "Red5 Client 1.2.25";
+    public static final String VERSION = "Red5 Client 1.2.26";
 
     /**
      * Create a new Red5Client object using the connection local to the current thread A bit of magic that lets you access the red5 scope

File: common/src/main/java/org/red5/server/api/Red5.java
Patch:
@@ -55,12 +55,12 @@ public final class Red5 {
     /**
      * Server version with revision
      */
-    public static final String VERSION = "Red5 Server 1.2.25";
+    public static final String VERSION = "Red5 Server 1.2.26";
 
     /**
      * Server version for fmsVer requests
      */
-    public static final String FMS_VERSION = "RED5/1,2,25,0";
+    public static final String FMS_VERSION = "RED5/1,2,26,0";
 
     /**
      * Server capabilities

File: client/src/main/java/org/red5/client/Red5Client.java
Patch:
@@ -18,7 +18,7 @@ public final class Red5Client {
     /**
      * Current server version with revision
      */
-    public static final String VERSION = "Red5 Client 1.2.23";
+    public static final String VERSION = "Red5 Client 1.2.24";
 
     /**
      * Create a new Red5Client object using the connection local to the current thread A bit of magic that lets you access the red5 scope

File: common/src/main/java/org/red5/server/api/Red5.java
Patch:
@@ -55,12 +55,12 @@ public final class Red5 {
     /**
      * Server version with revision
      */
-    public static final String VERSION = "Red5 Server 1.2.23";
+    public static final String VERSION = "Red5 Server 1.2.24";
 
     /**
      * Server version for fmsVer requests
      */
-    public static final String FMS_VERSION = "RED5/1,2,23,0";
+    public static final String FMS_VERSION = "RED5/1,2,24,0";
 
     /**
      * Server capabilities

File: client/src/main/java/org/red5/client/Red5Client.java
Patch:
@@ -18,7 +18,7 @@ public final class Red5Client {
     /**
      * Current server version with revision
      */
-    public static final String VERSION = "Red5 Client 1.2.23";
+    public static final String VERSION = "Red5 Client 1.2.24";
 
     /**
      * Create a new Red5Client object using the connection local to the current thread A bit of magic that lets you access the red5 scope

File: common/src/main/java/org/red5/server/api/Red5.java
Patch:
@@ -55,12 +55,12 @@ public final class Red5 {
     /**
      * Server version with revision
      */
-    public static final String VERSION = "Red5 Server 1.2.23";
+    public static final String VERSION = "Red5 Server 1.2.24";
 
     /**
      * Server version for fmsVer requests
      */
-    public static final String FMS_VERSION = "RED5/1,2,23,0";
+    public static final String FMS_VERSION = "RED5/1,2,24,0";
 
     /**
      * Server capabilities

File: client/src/main/java/org/red5/client/Red5Client.java
Patch:
@@ -18,7 +18,7 @@ public final class Red5Client {
     /**
      * Current server version with revision
      */
-    public static final String VERSION = "Red5 Client 1.2.22";
+    public static final String VERSION = "Red5 Client 1.2.23";
 
     /**
      * Create a new Red5Client object using the connection local to the current thread A bit of magic that lets you access the red5 scope

File: common/src/main/java/org/red5/server/api/Red5.java
Patch:
@@ -55,12 +55,12 @@ public final class Red5 {
     /**
      * Server version with revision
      */
-    public static final String VERSION = "Red5 Server 1.2.22";
+    public static final String VERSION = "Red5 Server 1.2.23";
 
     /**
      * Server version for fmsVer requests
      */
-    public static final String FMS_VERSION = "RED5/1,2,22,0";
+    public static final String FMS_VERSION = "RED5/1,2,23,0";
 
     /**
      * Server capabilities

File: common/src/main/java/org/red5/server/scope/Scope.java
Patch:
@@ -1446,7 +1446,7 @@ public IBasicScope getBasicScope(ScopeType type, String name) {
                 // if its broadcast type then allow an alias match in addition to the name match
                 if (type == ScopeType.BROADCAST) {
                     // checks publish and subscribe aliases
-                    scope = stream().filter(child -> child.getType().equals(type) && (name.equals(child.getName()) || name.equals(((IBroadcastScope) child).getClientBroadcastStream().getAlias()) || ((IBroadcastScope) child).getClientBroadcastStream().containsAlias(name))).findFirst();
+                    scope = stream().filter(child -> child.getType().equals(type) && (name.equals(child.getName()) || ((IBroadcastScope) child).getClientBroadcastStream().containsAlias(name))).findFirst();
                 } else {
                     scope = stream().filter(child -> child.getType().equals(type) && name.equals(child.getName())).findFirst();
                 }

File: server/src/main/java/org/red5/server/net/rtmp/RTMPMinaIoHandler.java
Patch:
@@ -192,7 +192,7 @@ public void messageReceived(IoSession session, Object message) throws Exception
     /** {@inheritDoc} */
     @Override
     public void messageSent(IoSession session, Object message) throws Exception {
-        log.trace("messageSent session: {} message: {}", session, message);
+        log.info("messageSent session: {} message: {}", session, message);
         String sessionId = (String) session.getAttribute(RTMPConnection.RTMP_SESSION_ID);
         if (isTrace) {
             log.trace("Message sent on session: {} id: {}", session.getId(), sessionId);

File: src/main/java/org/red5/server/net/rtmpt/RTMPTConnection.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.mina.core.session.DummySession;
 import org.apache.mina.core.session.IoSession;
 import org.red5.logging.Red5LoggerFactory;
+import org.red5.server.api.IConnection;
 import org.red5.server.net.rtmp.RTMPConnection;
 import org.red5.server.net.rtmp.codec.RTMP;
 import org.red5.server.net.rtmp.message.Packet;
@@ -86,7 +87,7 @@ public class RTMPTConnection extends BaseRTMPTConnection {
 
     /** Constructs a new RTMPTConnection */
     RTMPTConnection() {
-        super(POLLING);
+        super(IConnection.Type.POLLING.name().toLowerCase());
         // create a DummySession for the HTTP-based connection to allow our Mina based system happy
         ioSession = new DummySession();
         ioSession.setAttribute(RTMPConnection.RTMP_SESSION_ID, sessionId);

File: src/main/java/org/red5/server/LoaderBase.java
Patch:
@@ -49,12 +49,12 @@ public abstract class LoaderBase implements ApplicationContextAware {
     /**
      * Current Red5 application context, set by the different loaders.
      */
-    public static final Map<String, IApplicationContext> red5AppCtx = new HashMap<String, IApplicationContext>();
+    public static final Map<String, IApplicationContext> red5AppCtx = new HashMap<>();
 
     /**
      * Loader for new applications.
      */
-    protected static ThreadLocal<IApplicationLoader> loader = new ThreadLocal<IApplicationLoader>();
+    protected static ThreadLocal<IApplicationLoader> loader = new ThreadLocal<>();
 
     /**
      * Folder containing the webapps.

File: src/main/java/org/red5/server/Launcher.java
Patch:
@@ -58,6 +58,9 @@ public void launch() throws Exception {
         Logger log = Red5LoggerFactory.getLogger(Launcher.class);
         // version info banner
         log.info("{} (https://github.com/Red5)", Red5.getVersion());
+        if (log.isDebugEnabled()) {
+            log.debug("fmsVer: {}", Red5.getFMSVersion());
+        }
         // create red5 app context
         @SuppressWarnings("resource")
         FileSystemXmlApplicationContext root = new FileSystemXmlApplicationContext(new String[] { "classpath:/red5.xml" }, false);

File: src/main/java/org/red5/server/net/proxy/ProxyFilter.java
Patch:
@@ -87,7 +87,7 @@ public void sessionClosed(NextFilter next, IoSession session) throws Exception {
             if (log.isDebugEnabled()) {
                 log.debug("[{}] Closing: {}", name, forward);
             }
-            forward.closeNow();
+            forward.close(true);
         }
         next.sessionClosed(session);
     }

File: src/main/java/org/red5/server/net/rtmp/RTMPMinaIoHandler.java
Patch:
@@ -234,7 +234,7 @@ private void cleanSession(final IoSession session, boolean immediately) {
             }
         }
         // force close the session
-        final CloseFuture future = immediately ? session.closeNow() : session.closeOnFlush();
+        final CloseFuture future = immediately ? session.close(false) : session.close(true);
         IoFutureListener<CloseFuture> listener = new IoFutureListener<CloseFuture>() {
             @SuppressWarnings({ "unchecked", "rawtypes" })
             public void operationComplete(CloseFuture future) {

File: src/test/java/org/red5/server/net/rtmp/ServerRTMPHandshakeTest.java
Patch:
@@ -129,6 +129,8 @@ public void testValidateFromFFMpeg() {
         log.info("\n testValidateFromFFMpeg");
         // server side handshake handler
         InboundHandshake in = new InboundHandshake((byte) 0x03);
+        // set whether or not unverified will be allowed
+        in.setUnvalidatedConnectionAllowed(true);
         // FFMPEG
         IoBuffer cc = IoBuffer.allocate(1536);
         // C1

File: src/main/java/org/red5/logging/LoggerContextFilter.java
Patch:
@@ -81,3 +81,4 @@ public void init(FilterConfig config) throws ServletException {
         contextName = config.getServletContext().getContextPath().replaceAll("/", "");
     }
 }
+

File: src/main/java/org/red5/logging/ContextLoggingListener.java
Patch:
@@ -32,9 +32,9 @@
  * To use it, add the following line to a web.xml file
  *
  * <pre>
- * 	&lt;listener&gt;
- * 		&lt;listener-class&gt;org.red5.logging.ContextLoggingListener&lt;/listener-class&gt;
- * 	&lt;/listener&gt;
+ *     &lt;listener&gt;
+ *         &lt;listener-class&gt;org.red5.logging.ContextLoggingListener&lt;/listener-class&gt;
+ *     &lt;/listener&gt;
  * </pre>
  *
  * @author Paul Gregoire (mondain@gmail.com)

File: src/main/java/org/red5/server/stream/PlayBuffer.java
Patch:
@@ -45,7 +45,7 @@ public class PlayBuffer {
     /**
      * Queue of RTMP messages
      */
-    private Queue<RTMPMessage> messageQueue = new LinkedList<RTMPMessage>();
+    private Queue<RTMPMessage> messageQueue = new LinkedList<>();
 
     /**
      * Create play buffer with given capacity

File: src/main/java/org/red5/logging/DerbyLogInterceptor.java
Patch:
@@ -28,7 +28,7 @@ public class DerbyLogInterceptor {
 
     protected static Logger log = LoggerFactory.getLogger(DerbyLogInterceptor.class);
 
-    private static ThreadLocal<StringBuilder> local = new ThreadLocal<StringBuilder>();
+    private static ThreadLocal<StringBuilder> local = new ThreadLocal<>();
 
     public static OutputStream handleDerbyLogFile() {
         return new OutputStream() {

File: src/main/java/org/red5/logging/LoggingContextSelector.java
Patch:
@@ -44,11 +44,11 @@ public class LoggingContextSelector implements ContextSelector {
 
     private static boolean debug = false;
 
-    private static final ConcurrentMap<String, LoggerContext> contextMap = new ConcurrentHashMap<String, LoggerContext>(6, 0.9f, 1);
+    private static final ConcurrentMap<String, LoggerContext> contextMap = new ConcurrentHashMap<>(6, 0.9f, 1);
 
     private static final Semaphore lock = new Semaphore(1, true);
 
-    private final ThreadLocal<LoggerContext> threadLocal = new ThreadLocal<LoggerContext>();
+    private final ThreadLocal<LoggerContext> threadLocal = new ThreadLocal<>();
 
     private final LoggerContext defaultContext;
 
@@ -159,7 +159,7 @@ public LoggerContext detachLoggerContext(String loggerContextName) {
     }
 
     public List<String> getContextNames() {
-        List<String> list = new ArrayList<String>();
+        List<String> list = new ArrayList<>();
         list.addAll(contextMap.keySet());
         return list;
     }

File: src/main/java/org/red5/logging/W3CAppender.java
Patch:
@@ -53,13 +53,13 @@ public class W3CAppender extends FileAppender<LoggingEvent> {
     private static String events;
 
     //linked list to preserve order
-    private static List<String> eventsList = new ArrayList<String>();
+    private static List<String> eventsList = new ArrayList<>();
 
     //fields that are to be logged
     private static String fields;
 
     //linked list to preserve order
-    private static LinkedList<String> fieldList = new LinkedList<String>();
+    private static LinkedList<String> fieldList = new LinkedList<>();
 
     public W3CAppender() {
         setPrudent(true);
@@ -122,7 +122,7 @@ public synchronized void doAppend(LoggingEvent event) {
         //break the message into pieces
         String[] arr = message.split(" ");
         //create a map
-        Map<String, String> elements = new HashMap<String, String>(arr.length);
+        Map<String, String> elements = new HashMap<>(arr.length);
         int i = 0;
         for (String s : arr) {
             if ((i = s.indexOf(':')) != -1) {

File: src/main/java/org/red5/logging/ContextLoggingListener.java
Patch:
@@ -44,7 +44,6 @@ public class ContextLoggingListener implements ServletContextListener {
     public void contextDestroyed(ServletContextEvent event) {
         System.out.println("Context destroying...");
         String contextName = pathToName(event);
-        //System.out.printf("About to detach context named %s\n", contextName);
         ContextSelector selector = Red5LoggerFactory.getContextSelector();
         LoggerContext context = selector.detachLoggerContext(contextName);
         if (context != null) {

File: src/main/java/org/red5/server/net/rtmp/InboundHandshake.java
Patch:
@@ -63,7 +63,7 @@ public InboundHandshake(byte handshakeType, int algorithm) {
     /**
      * Generates response for versioned connections.
      * 
-     * @param input incoming RTMP handshake bytes
+     * @param in incoming RTMP handshake bytes
      * @return outgoing handshake
      */
     public IoBuffer doHandshake(IoBuffer in) {
@@ -343,7 +343,7 @@ protected void createHandshakeBytes() {
     /**
      * Determines the validation scheme for given input.
      * 
-     * @param input handshake bytes from the client
+     * @param handshake handshake bytes from the client
      * @return true if client used a supported validation scheme, false if unsupported
      */
     @Override

File: src/main/java/org/red5/server/net/rtmp/RTMPConnManager.java
Patch:
@@ -33,7 +33,6 @@
 import javax.management.ObjectName;
 
 import org.apache.mina.core.session.IoSession;
-import org.red5.server.api.IConnection;
 import org.red5.server.api.Red5;
 import org.red5.server.api.scope.IBasicScope;
 import org.red5.server.jmx.mxbeans.RTMPMinaTransportMXBean;

File: src/main/java/org/red5/server/stream/provider/FileProvider.java
Patch:
@@ -275,7 +275,7 @@ public int seek(int ts) {
         }
         int frame = -1;
         for (int i = 0; i < keyFrameMeta.positions.length; i++) {
-            if (keyFrameMeta.timestamps[i] > ts) {
+            if (keyFrameMeta.timestamps[i] >= ts) {
                 frame = i;
                 break;
             }

File: src/main/java/org/red5/server/net/rtmpe/RTMPEIoFilter.java
Patch:
@@ -50,13 +50,12 @@ public class RTMPEIoFilter extends IoFilterAdapter {
     @Override
     public void messageReceived(NextFilter nextFilter, IoSession session, Object obj) throws Exception {
         log.trace("messageReceived nextFilter: {} session: {} message: {}", nextFilter, session, obj);
-        RTMP rtmp = null;
         String sessionId = (String) session.getAttribute(RTMPConnection.RTMP_SESSION_ID);
         if (sessionId != null) {
             log.trace("Session id: {}", sessionId);
             RTMPMinaConnection conn = (RTMPMinaConnection) RTMPConnManager.getInstance().getConnectionBySessionId(sessionId);
             // filter based on current connection state
-            rtmp = conn.getState();
+            RTMP rtmp = conn.getState();
             final byte connectionState = conn.getStateCode();
             // assume message is an IoBuffer
             IoBuffer message = (IoBuffer) obj;

File: src/main/java/org/red5/server/net/rtmps/RTMPSMinaIoHandler.java
Patch:
@@ -196,8 +196,6 @@ public void sessionCreated(IoSession session) throws Exception {
         chain.addFirst("sslFilter", sslFilter);
         session.setAttribute(SslFilter.USE_NOTIFICATION, Boolean.TRUE);
         log.debug("isSslStarted: {}", sslFilter.isSslStarted(session));
-        // add rtmpe filter
-        chain.addAfter("sslFilter", "rtmpeFilter", new RTMPEIoFilter());
         if (log.isTraceEnabled()) {
             chain.addLast("logger", new LoggingFilter());
         }
@@ -219,6 +217,8 @@ public void messageReceived(IoSession session, Object message) throws Exception
             session.replaceAttribute(RTMPConnection.RTMPS_STATE, "SESSION_UNSECURED", state);
             // create the session with super after we get the SESSION_SECURED message
             if ("SESSION_SECURED".equals(state)) {
+                // add rtmpe filter
+                session.getFilterChain().addAfter("sslFilter", "rtmpeFilter", new RTMPEIoFilter());
                 // set the handshake on the session
                 session.setAttribute(RTMPConnection.RTMP_HANDSHAKE, new InboundHandshake());
                 // create a connection
@@ -235,7 +235,7 @@ public void messageReceived(IoSession session, Object message) throws Exception
                 sessionClosed(session);
             }
         } else if ("SESSION_SECURED".equals(session.getAttribute(RTMPConnection.RTMPS_STATE, "SESSION_UNSECURED"))) {
-            log.debug("message received on secured session");
+            log.debug("Message received on secured session");
         } else {
             log.warn("Session is unsecure, message will not be received. Message: {}", message, new Exception("Unsecure session"));
         }

File: src/test/java/org/red5/server/net/rtmp/ServerRTMPHandshakeTest.java
Patch:
@@ -18,6 +18,7 @@
  * <pre>
  * rtmpdump -V -z -r "rtmp://localhost/live" -a "live" -W "http://localhost:5080/demos/publisher.swf" -p "http://localhost:5080/live" -y "test" -v -o t.flv
  * rtmpdump -V -z -r "rtmpe://localhost/live" -a "live" -W "http://localhost:5080/demos/publisher.swf" -p "http://localhost:5080/live" -y "test" -v -o t.flv
+ * rtmpdump -V -z -r "rtmp://localhost/oflaDemo" -a "oflaDemo" -W "http://localhost:5080/demos/publisher.swf" -p "http://localhost:5080/oflaDemo" -y "test" -v -o t.flv -f "WIN 10,0,7,2"
  * </pre>
  *
  * Test server

File: src/main/java/org/red5/server/net/rtmp/InboundHandshake.java
Patch:
@@ -297,7 +297,7 @@ public boolean decodeClientRequest2(IoBuffer in) {
      */
     private IoBuffer generateUnversionedHandshake(byte[] input) {
         log.debug("Using old style (un-versioned) handshake");
-        IoBuffer output = IoBuffer.allocate(HANDSHAKE_SIZE_SERVER);
+        IoBuffer output = IoBuffer.allocate((Constants.HANDSHAKE_SIZE * 2) + 1); // 3073
         // non-encrypted
         output.put(RTMPConnection.RTMP_NON_ENCRYPTED);
         // set server uptime in seconds

File: src/main/java/org/red5/server/Context.java
Patch:
@@ -51,7 +51,7 @@
  */
 public class Context implements IContext, ApplicationContextAware, ContextMXBean {
 
-    public static Logger logger = LoggerFactory.getLogger(Context.class);
+    public static final Logger logger = LoggerFactory.getLogger(Context.class);
 
     /**
      * Spring application context

File: src/main/java/org/red5/server/LoaderBase.java
Patch:
@@ -49,7 +49,7 @@ public abstract class LoaderBase implements ApplicationContextAware {
     /**
      * Current Red5 application context, set by the different loaders.
      */
-    public static Map<String, IApplicationContext> red5AppCtx = new HashMap<String, IApplicationContext>();
+    public static final Map<String, IApplicationContext> red5AppCtx = new HashMap<String, IApplicationContext>();
 
     /**
      * Loader for new applications.

File: src/main/java/org/red5/server/session/SessionManager.java
Patch:
@@ -53,7 +53,7 @@ public class SessionManager {
     private static ISchedulingService schedulingService;
 
     // Create a random generator
-    public static Random rnd = new Random();
+    public static final Random rnd = new Random();
 
     public void init() {
         if (schedulingService != null) {

File: src/main/java/org/red5/server/war/WarLoaderServlet.java
Patch:
@@ -61,7 +61,7 @@
 public class WarLoaderServlet extends ContextLoaderListener {
 
     // Initialize Logging
-    public static Logger logger = Red5LoggerFactory.getLogger(WarLoaderServlet.class);
+    public static final Logger logger = Red5LoggerFactory.getLogger(WarLoaderServlet.class);
 
     private static ArrayList<ServletContext> registeredContexts = new ArrayList<ServletContext>(3);
 

File: src/main/java/org/red5/logging/ContextLoggingListener.java
Patch:
@@ -59,7 +59,7 @@ public void contextDestroyed(ServletContextEvent event) {
     public void contextInitialized(ServletContextEvent event) {
         System.out.println("Context init...");
         String contextName = pathToName(event);
-        System.out.printf("Logger name for context: %s\n", contextName);
+        System.out.printf("Logger name for context: %s%n", contextName);
         LoggingContextSelector selector = null;
         try {
             selector = (LoggingContextSelector) Red5LoggerFactory.getContextSelector();
@@ -73,7 +73,7 @@ public void contextInitialized(ServletContextEvent event) {
                 System.err.printf("No context named %s was found", contextName);
             }
         } catch (Exception e) {
-            System.err.printf("LoggingContextSelector is not the correct type", e);
+            System.err.printf("LoggingContextSelector is not the correct type: %s", e.getMessage());
         } finally {
             //reset the name
             if (selector != null) {

File: src/main/java/org/red5/logging/LoggingContextSelector.java
Patch:
@@ -105,7 +105,7 @@ public LoggerContext getLoggerContext() {
                         contextConfigFile = String.format(overrideProperty, contextName);
                     }
                     if (debug) {
-                        System.out.printf("Context logger config file: %s\n", contextConfigFile);
+                        System.out.printf("Context logger config file: %s%n", contextConfigFile);
                     }
                     ClassLoader classloader = Thread.currentThread().getContextClassLoader();
                     //System.out.printf("Thread context cl: %s\n", classloader);
@@ -131,7 +131,7 @@ public LoggerContext getLoggerContext() {
                         }
                     }
                     if (debug) {
-                        System.out.printf("Adding logger context: %s to map for context: %s\n", loggerContext.getName(), contextName);
+                        System.out.printf("Adding logger context: %s to map for context: %s%n", loggerContext.getName(), contextName);
                     }
                     contextMap.put(contextName, loggerContext);
                 }
@@ -146,7 +146,7 @@ public LoggerContext getLoggerContext() {
 
     public LoggerContext getLoggerContext(String name) {
         if (debug) {
-            System.out.printf("getLoggerContext request for %s in context map %s\n", name, contextMap.containsKey(name));
+            System.out.printf("getLoggerContext request for %s in context map %s%n", name, contextMap.containsKey(name));
         }
         return contextMap.get(name);
     }

File: src/main/java/org/red5/server/Launcher.java
Patch:
@@ -48,7 +48,7 @@ public class Launcher {
      *             on error
      */
     public void launch() throws Exception {
-        System.out.printf("Root: %s\nDeploy type: %s\nLogback selector: %s\n", System.getProperty("red5.root"), System.getProperty("red5.deployment.type"), System.getProperty("logback.ContextSelector"));
+        System.out.printf("Root: %s%nDeploy type: %s%nLogback selector: %s%n", System.getProperty("red5.root"), System.getProperty("red5.deployment.type"), System.getProperty("logback.ContextSelector"));
         // install the slf4j bridge (mostly for JUL logging)
         SLF4JBridgeHandler.install();
         // log stdout and stderr to slf4j

File: src/main/java/org/red5/server/net/proxy/DebugProxyHandler.java
Patch:
@@ -123,9 +123,8 @@ public void sessionCreated(IoSession session) throws Exception {
         File rawFile = loader.getResource(dumpTo + fileName + ".raw").getFile();
         rawFile.createNewFile();
 
-        FileOutputStream headersFos = new FileOutputStream(headersFile);
-        FileOutputStream rawFos = new FileOutputStream(rawFile);
-        try {
+        try (FileOutputStream headersFos = new FileOutputStream(headersFile);
+             FileOutputStream rawFos = new FileOutputStream(rawFile)) {
             WritableByteChannel headers = headersFos.getChannel();
             WritableByteChannel raw = rawFos.getChannel();
 

File: src/main/java/org/red5/logging/ContextLoggingListener.java
Patch:
@@ -59,7 +59,7 @@ public void contextDestroyed(ServletContextEvent event) {
     public void contextInitialized(ServletContextEvent event) {
         System.out.println("Context init...");
         String contextName = pathToName(event);
-        System.out.printf("Logger name for context: %s\n", contextName);
+        System.out.printf("Logger name for context: %s%n", contextName);
         LoggingContextSelector selector = null;
         try {
             selector = (LoggingContextSelector) Red5LoggerFactory.getContextSelector();
@@ -73,7 +73,7 @@ public void contextInitialized(ServletContextEvent event) {
                 System.err.printf("No context named %s was found", contextName);
             }
         } catch (Exception e) {
-            System.err.printf("LoggingContextSelector is not the correct type", e);
+            System.err.printf("LoggingContextSelector is not the correct type: %s", e.getMessage());
         } finally {
             //reset the name
             if (selector != null) {

File: src/main/java/org/red5/logging/LoggingContextSelector.java
Patch:
@@ -105,7 +105,7 @@ public LoggerContext getLoggerContext() {
                         contextConfigFile = String.format(overrideProperty, contextName);
                     }
                     if (debug) {
-                        System.out.printf("Context logger config file: %s\n", contextConfigFile);
+                        System.out.printf("Context logger config file: %s%n", contextConfigFile);
                     }
                     ClassLoader classloader = Thread.currentThread().getContextClassLoader();
                     //System.out.printf("Thread context cl: %s\n", classloader);
@@ -131,7 +131,7 @@ public LoggerContext getLoggerContext() {
                         }
                     }
                     if (debug) {
-                        System.out.printf("Adding logger context: %s to map for context: %s\n", loggerContext.getName(), contextName);
+                        System.out.printf("Adding logger context: %s to map for context: %s%n", loggerContext.getName(), contextName);
                     }
                     contextMap.put(contextName, loggerContext);
                 }
@@ -146,7 +146,7 @@ public LoggerContext getLoggerContext() {
 
     public LoggerContext getLoggerContext(String name) {
         if (debug) {
-            System.out.printf("getLoggerContext request for %s in context map %s\n", name, contextMap.containsKey(name));
+            System.out.printf("getLoggerContext request for %s in context map %s%n", name, contextMap.containsKey(name));
         }
         return contextMap.get(name);
     }

File: src/main/java/org/red5/server/Launcher.java
Patch:
@@ -48,7 +48,7 @@ public class Launcher {
      *             on error
      */
     public void launch() throws Exception {
-        System.out.printf("Root: %s\nDeploy type: %s\nLogback selector: %s\n", System.getProperty("red5.root"), System.getProperty("red5.deployment.type"), System.getProperty("logback.ContextSelector"));
+        System.out.printf("Root: %s%nDeploy type: %s%nLogback selector: %s%n", System.getProperty("red5.root"), System.getProperty("red5.deployment.type"), System.getProperty("logback.ContextSelector"));
         // install the slf4j bridge (mostly for JUL logging)
         SLF4JBridgeHandler.install();
         // log stdout and stderr to slf4j

File: src/main/java/org/red5/server/Context.java
Patch:
@@ -51,7 +51,7 @@
  */
 public class Context implements IContext, ApplicationContextAware, ContextMXBean {
 
-    public static Logger logger = LoggerFactory.getLogger(Context.class);
+    public static final Logger logger = LoggerFactory.getLogger(Context.class);
 
     /**
      * Spring application context

File: src/main/java/org/red5/server/LoaderBase.java
Patch:
@@ -49,7 +49,7 @@ public abstract class LoaderBase implements ApplicationContextAware {
     /**
      * Current Red5 application context, set by the different loaders.
      */
-    public static Map<String, IApplicationContext> red5AppCtx = new HashMap<String, IApplicationContext>();
+    public static final Map<String, IApplicationContext> red5AppCtx = new HashMap<String, IApplicationContext>();
 
     /**
      * Loader for new applications.

File: src/main/java/org/red5/server/session/SessionManager.java
Patch:
@@ -53,7 +53,7 @@ public class SessionManager {
     private static ISchedulingService schedulingService;
 
     // Create a random generator
-    public static Random rnd = new Random();
+    public static final Random rnd = new Random();
 
     public void init() {
         if (schedulingService != null) {

File: src/main/java/org/red5/server/war/WarLoaderServlet.java
Patch:
@@ -61,7 +61,7 @@
 public class WarLoaderServlet extends ContextLoaderListener {
 
     // Initialize Logging
-    public static Logger logger = Red5LoggerFactory.getLogger(WarLoaderServlet.class);
+    public static final Logger logger = Red5LoggerFactory.getLogger(WarLoaderServlet.class);
 
     private static ArrayList<ServletContext> registeredContexts = new ArrayList<ServletContext>(3);
 

File: src/main/java/org/red5/server/net/servlet/AMFTunnelServlet.java
Patch:
@@ -123,7 +123,9 @@ protected void service(HttpServletRequest req, HttpServletResponse resp) throws
             }
         } catch (Exception ex) {
             log.error("", ex);
-            post.abort();
+            if (post != null) {
+                post.abort();
+            }
         }
     }
 }

File: src/main/java/org/red5/server/plugin/PluginLauncher.java
Patch:
@@ -78,7 +78,9 @@ public boolean accept(File dir, String name) {
                 } catch (Exception e1) {
                     log.warn("Error loading plugin manifest: {}", plugin);
                 } finally {
-                    jar.close();
+                    if (jar != null) {
+                        jar.close();
+                    }
                 }
                 if (manifest == null) {
                     continue;

File: src/main/java/org/red5/server/script/rhino/RhinoScriptUtils.java
Patch:
@@ -74,6 +74,7 @@ public static Object createRhinoObject(String scriptSource, Class[] interfaces,
         ScriptEngine engine = mgr.getEngineByExtension("js");
         if (null == engine) {
             log.warn("Javascript is not supported in this build");
+            return null;
         }
         // set engine scope namespace
         Bindings nameSpace = engine.getBindings(ScriptContext.ENGINE_SCOPE);

File: src/main/java/org/red5/server/persistence/FilePersistence.java
Patch:
@@ -380,6 +380,7 @@ private IPersistable doLoad(String name, IPersistable object) {
             }
             filename = fp.getAbsolutePath();
             input = new FileInputStream(filename);
+            input.close();
         } catch (FileNotFoundException e) {
             log.error("The file at {} does not exist", data.getFilename());
             return null;

File: src/main/java/org/red5/server/net/servlet/AMFTunnelServlet.java
Patch:
@@ -123,7 +123,9 @@ protected void service(HttpServletRequest req, HttpServletResponse resp) throws
             }
         } catch (Exception ex) {
             log.error("", ex);
-            post.abort();
+            if (post != null) {
+                post.abort();
+            }
         }
     }
 }

File: src/main/java/org/red5/server/plugin/PluginLauncher.java
Patch:
@@ -78,7 +78,9 @@ public boolean accept(File dir, String name) {
                 } catch (Exception e1) {
                     log.warn("Error loading plugin manifest: {}", plugin);
                 } finally {
-                    jar.close();
+                    if (jar != null) {
+                        jar.close();
+                    }
                 }
                 if (manifest == null) {
                     continue;

File: src/main/java/org/red5/server/script/rhino/RhinoScriptUtils.java
Patch:
@@ -74,6 +74,7 @@ public static Object createRhinoObject(String scriptSource, Class[] interfaces,
         ScriptEngine engine = mgr.getEngineByExtension("js");
         if (null == engine) {
             log.warn("Javascript is not supported in this build");
+            return null;
         }
         // set engine scope namespace
         Bindings nameSpace = engine.getBindings(ScriptContext.ENGINE_SCOPE);

File: src/main/java/org/red5/logging/ContextLoggingListener.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/logging/DerbyLogInterceptor.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/logging/LoggerContextFilter.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/logging/LoggingContextSelector.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/logging/W3CAppender.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/Context.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/ContextLoader.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/CoreHandler.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/LoaderBase.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/MappingStrategy.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/PersistableAttributeStore.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/adapter/ApplicationAdapter.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/adapter/ApplicationLifecycle.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/adapter/Config.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/adapter/MultiThreadedApplicationAdapter.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/api/IApplicationContext.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/api/IApplicationLoader.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/api/plugin/IRed5Plugin.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/api/plugin/IRed5PluginHandler.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/api/remoting/IRemotingConnection.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/api/scope/IScopeResolver.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/api/service/IBroadcastStreamService.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/api/service/IOnDemandStreamService.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/api/service/IServiceHandlerProviderAware.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/api/service/ISubscriberStreamService.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/api/service/ServiceUtils.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/api/session/ISession.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/api/statistics/IStatisticsService.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/api/stream/IBroadcastStreamService.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/api/stream/IOnDemandStream.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/api/stream/IOnDemandStreamService.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/api/stream/IServerStream.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/api/stream/IStreamHandler.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/api/stream/IStreamSecurityService.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/api/stream/IStreamableFile.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/api/stream/ISubscriberStreamService.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/api/stream/support/DenyAllStreamAccess.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/api/stream/support/StreamUtils.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/exception/AccessDeniedException.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/exception/ScopeHandlerNotFoundException.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/exception/ServiceNotFoundException.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/exception/SharedObjectException.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/exception/StreamControlException.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/exception/StreamDataException.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/jmx/JMXUtil.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/jmx/mxbeans/ApplicationMXBean.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/jmx/mxbeans/ClientMXBean.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/jmx/mxbeans/ConnectionMXBean.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/jmx/mxbeans/ContextLoaderMXBean.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/jmx/mxbeans/ContextMXBean.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/jmx/mxbeans/CoreHandlerMXBean.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/jmx/mxbeans/GlobalScopeMXBean.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/jmx/mxbeans/LoaderMXBean.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/jmx/mxbeans/Red5MXBean.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/jmx/mxbeans/WebScopeMXBean.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/messaging/IPullableProvider.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/messaging/InMemoryPullPullPipe.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/messaging/PipeUtils.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/messaging/ServiceAdapter.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/midi/MidiPlayer.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/midi/SharedMidiObject.java
Patch:
@@ -3,7 +3,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/midi/Test.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/net/IConnectionEventQueue.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/net/filter/DefaultMessageSizeEstimator.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/net/filter/IoEventQueueThrottler.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/net/filter/TrafficShapingFilter.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/net/proxy/DebugProxyHandler.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/net/proxy/NetworkDumpFilter.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/net/proxy/ProxyFilter.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/net/remoting/FlexMessagingService.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/net/remoting/RemotingConnection.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/net/remoting/codec/RemotingCodecFactory.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/net/remoting/codec/RemotingProtocolDecoder.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/net/remoting/codec/RemotingProtocolEncoder.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/net/remoting/message/RemotingCall.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/net/remoting/message/RemotingPacket.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/net/rtmp/IRTMPConnManager.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/net/rtmp/codec/MulticastEventProcessor.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/net/rtmp/codec/RTMPMinaCodecFactory.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/net/servlet/AMFGatewayServlet.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/net/servlet/AMFTunnelServlet.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/net/servlet/RedirectHTTPServlet.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/persistence/FilePersistence.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/plugin/PluginLauncher.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/plugin/PluginRegistry.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/plugin/Red5Plugin.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/scope/BroadcastScope.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/scope/GlobalScope.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/scope/ScopeResolver.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/scope/WebScope.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/script/jython/JythonScriptFactory.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/service/BaseStreamableFileService.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/service/ContextServiceResolver.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/service/HandlerServiceResolver.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/service/ScopeServiceResolver.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/service/flv/IFLVService.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/service/flv/impl/FLVService.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/service/m4a/IM4AService.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/service/m4a/impl/M4AService.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/service/mp3/IMP3Service.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/service/mp3/impl/MP3Service.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/service/mp4/IMP4Service.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/service/mp4/impl/MP4Service.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/session/Session.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/statistics/StatisticsService.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/stream/ConsumerService.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/stream/FileStreamSource.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/stream/ISeekableStreamSource.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/stream/IStreamControl.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/stream/IStreamSource.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/stream/ITokenBucket.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/stream/ITokenBucketService.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/stream/PlayBuffer.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/stream/ProviderService.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/stream/RtmpSampleAccess.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/stream/ServerStream.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/stream/filter/StreamBandwidthController.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/stream/provider/ConnectionProvider.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/util/ServerDetector.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/war/WarLoaderServlet.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/spring/ExtendedPropertyPlaceholderConfigurer.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/spring/InetAddressEditor.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/slf4j/impl/LoggerContextSelectorProvider.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/slf4j/impl/StaticLoggerBinder.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * RED5 Open Source Flash Server - https://github.com/Red5/
  * 
- * Copyright 2006-2015 by respective authors (see below). All rights reserved.
+ * Copyright 2006-2016 by respective authors (see below). All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/red5/server/net/rtmp/RTMPMinaTransport.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
-import java.util.concurrent.Executor;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;

File: src/main/java/org/red5/server/net/remoting/RemotingConnection.java
Patch:
@@ -579,12 +579,12 @@ public void removeListener(IConnectionListener listener) {
 		this.connectionListeners.remove(listener);
 	}
 
-	public int getStreamId() {
+	public Number getStreamId() {
 		notSupported();
 		return -1;
 	}
 
-	public void setStreamId(int id) {
+	public void setStreamId(Number id) {
 		notSupported();
 	}
 

File: src/main/java/org/red5/server/service/Installer.java
Patch:
@@ -158,7 +158,6 @@ public AsyncMessage getApplicationList() {
 	 * @param applicationWarName app war name
 	 * @return true if installed; false otherwise
 	 */
-	@SuppressWarnings("deprecation")
 	public boolean install(String applicationWarName) {
 		IConnection conn = Red5.getConnectionLocal();
 		boolean result = false;
@@ -222,8 +221,6 @@ public boolean install(String applicationWarName) {
 				try {
 					//try the war version first
 					method = new HttpGet(applicationRepositoryUrl + applicationWarName);
-					// set transfer encoding
-					method.getParams().setParameter("http.protocol.strict-transfer-encoding", Boolean.TRUE);
 					//we dont want any transformation - RFC2616
 					method.addHeader("Accept-Encoding", "identity");
 					// execute the method

File: src/main/java/org/red5/server/Launcher.java
Patch:
@@ -41,6 +41,8 @@ public class Launcher {
 
 	/**
 	 * Launch Red5 under it's own classloader
+	 * 
+	 * @throws Exception on error
 	 */
 	public void launch() throws Exception {
 		System.out.printf("Root: %s\nDeploy type: %s\nLogback selector: %s\n", System.getProperty("red5.root"), System.getProperty("red5.deployment.type"),

File: src/main/java/org/red5/server/adapter/ApplicationAdapter.java
Patch:
@@ -27,8 +27,8 @@
  * If you want to have maximum performance, use {@link MultiThreadedApplicationAdapter}
  * instead.
  * 
- * Using this class may lead to problems if accepting a client in the <code>*Connect</code>
- * or <code>*Join</code> methods takes too long, so using the multi-threaded version is
+ * Using this class may lead to problems if accepting a client in the <pre>*Connect</pre>
+ * or <pre>*Join</pre> methods takes too long, so using the multi-threaded version is
  * preferred.
  * 
  * @author The Red5 Project

File: src/main/java/org/red5/server/api/plugin/IRed5PluginHandler.java
Patch:
@@ -37,14 +37,14 @@ public interface IRed5PluginHandler {
 	/**
 	 * Set the application making use of this plug-in handler.
 	 * 
-	 * @param application
+	 * @param application application adapter
 	 */
 	void setApplication(MultiThreadedApplicationAdapter application);
 
 	/**
 	 * Set properties to be used by this handler.
 	 * 
-	 * @param props
+	 * @param props plugin properties map
 	 */
 	void setProperties(Map<String, Object> props);
 	

File: src/main/java/org/red5/server/api/statistics/IStatisticsService.java
Patch:
@@ -30,9 +30,9 @@
  * given elements inside the server. Statistics data will be stored as
  * properties of different shared objects.
  * 
- * Use <code>getScopeStatisticsSO</code> and <code>getSharedObjectStatisticsSO</code>
- * to get these shared objects. The property names are <code>scopeName</code>
- * for scope attributes and <code>scopeName|sharedObjectName</code> for
+ * Use <pre>getScopeStatisticsSO</pre> and <pre>getSharedObjectStatisticsSO</pre>
+ * to get these shared objects. The property names are <pre>scopeName</pre>
+ * for scope attributes and <pre>scopeName|sharedObjectName</pre> for
  * shared object attributes. Each property holds a Map containing key/value
  * mappings of the corresponding attributes.
  * 

File: src/main/java/org/red5/server/messaging/ServiceAdapter.java
Patch:
@@ -70,7 +70,7 @@ public void stop() {
 	 * CommandMessage is routed to the right service, its MessageRefType is set to the 
 	 * string name of the message type for messages handled by that service.
 	 * 
-	 * @param commandMessage
+	 * @param commandMessage message
 	 * @return Exception if not implemented
 	 */
 	public Object manage(CommandMessage commandMessage) {

File: src/main/java/org/red5/server/net/IConnectionEventQueue.java
Patch:
@@ -30,7 +30,7 @@ public interface IConnectionEventQueue {
     /**
      * Whether queue has waiting connection events
      * @param conn       Connection
-     * @return           <code>true</code> if queue has waiting events for connection, <code>false</code> otherwise
+     * @return           <pre>true</pre> if queue has waiting events for connection, <pre>false</pre> otherwise
      */
 	public boolean hasEventsWaiting(IConnection conn);
 

File: src/main/java/org/red5/server/net/filter/DefaultMessageSizeEstimator.java
Patch:
@@ -39,7 +39,7 @@
  * <p>
  * All the estimated sizes of classes are cached for performance improvement.
  * 
- * <br />
+ * <br>
  * This originated from the Mina sandbox.
  */
 public class DefaultMessageSizeEstimator implements IoEventSizeEstimator {

File: src/main/java/org/red5/server/net/filter/TrafficShapingFilter.java
Patch:
@@ -41,7 +41,7 @@
  * It is always recommended to add this filter in the first place of the
  * {@link IoFilterChain}.
  * 
- * <br />
+ * <br>
  * This originated from the Mina sandbox.
  */
 public class TrafficShapingFilter extends IoFilterAdapter {

File: src/main/java/org/red5/server/net/remoting/FlexMessagingService.java
Patch:
@@ -145,7 +145,7 @@ public static ErrorMessage returnError(AbstractMessage request, String faultCode
 	}
 
 	/**
-	 * Handle request coming from <code>mx:RemoteObject</code> tags.
+	 * Handle request coming from <pre>mx:RemoteObject</pre> tags.
 	 * 
 	 * @see <a href="http://livedocs.adobe.com/flex/2/langref/mx/rpc/remoting/mxml/RemoteObject.html">Adobe Livedocs (external)</a>
 	 *

File: src/main/java/org/red5/server/net/remoting/RemotingConnection.java
Patch:
@@ -124,7 +124,7 @@ public String toString() {
 	/**
 	 * Update the current packet.
 	 * 
-	 * @param packet
+	 * @param packet remoting packet
 	 */
 	protected void setPacket(RemotingPacket packet) {
 		this.packet = packet;

File: src/main/java/org/red5/server/net/remoting/codec/RemotingProtocolEncoder.java
Patch:
@@ -53,9 +53,9 @@ public class RemotingProtocolEncoder {
 	/**
 	 * Encodes the given buffer.
 	 * 
-	 * @param message
+	 * @param message message
 	 * @return buffer
-	 * @throws Exception
+	 * @throws Exception on exception
 	 */
 	public IoBuffer encode(Object message) throws Exception {
 		RemotingPacket resp = (RemotingPacket) message;

File: src/main/java/org/red5/server/net/rtmp/RTMPMinaTransport.java
Patch:
@@ -52,9 +52,9 @@
 /**
  * Transport setup class configures socket acceptor and thread pools for RTMP in Mina.
  * 
- * <br />
+ * <br>
  * <i>Note: This code originates from AsyncWeb. Originally modified by Luke Hubbard.</i>
- * <br />
+ * <br>
  * 
  * @author Luke Hubbard
  * @author Paul Gregoire

File: src/main/java/org/red5/server/net/rtmps/RTMPSMinaIoHandler.java
Patch:
@@ -153,7 +153,7 @@ private SSLContext getSslContext() {
 	/**
 	 * Password used to access the keystore file.
 	 * 
-	 * @param password
+	 * @param password keystore password
 	 */
 	public void setKeystorePassword(String password) {
 		this.keystorePassword = password;
@@ -162,7 +162,7 @@ public void setKeystorePassword(String password) {
 	/**
 	 * Password used to access the truststore file.
 	 * 
-	 * @param password
+	 * @param password truststore password
 	 */
 	public void setTruststorePassword(String password) {
 		this.truststorePassword = password;
@@ -189,7 +189,7 @@ public void setTruststoreFile(String path) {
 	/**
 	 * Set the key store type, JKS or PKCS12.
 	 * 
-	 * @param keyStoreType
+	 * @param keyStoreType key store type
 	 */
 	public void setKeyStoreType(String keyStoreType) {
 		this.keyStoreType = keyStoreType;

File: src/main/java/org/red5/server/persistence/FilePersistence.java
Patch:
@@ -465,7 +465,7 @@ public boolean load(IPersistable object) {
 	/**
 	 * Save persistable object
 	 * @param object           Persistable object
-	 * @return                 <code>true</code> on success, <code>false</code> otherwise
+	 * @return                 <pre>true</pre> on success, <pre>false</pre> otherwise
 	 */
 	protected boolean saveObject(IPersistable object) {
 		log.debug("saveObject - object: {}", object);

File: src/main/java/org/red5/server/plugin/Red5Plugin.java
Patch:
@@ -75,7 +75,7 @@ public void setServer(Server server) {
 	/**
 	 * Set the application making use of this plug-in.
 	 * 
-	 * @param application
+	 * @param application application
 	 */
 	public void setApplication(MultiThreadedApplicationAdapter application) {	
 	}

File: src/main/java/org/red5/server/scheduling/ApplicationSchedulingService.java
Patch:
@@ -58,7 +58,7 @@ public void setApplicationName(String applicationName) {
 	/**
 	 * Sets the scheduler factory in the servlet context.
 	 * 
-	 * @param servletContext
+	 * @param servletContext sevlet context
 	 */
 	public void setServletAttribute(ServletContext servletContext) {
 		log.debug("Storing the scheduler factory in the servlet context");

File: src/main/java/org/red5/server/script/groovy/GroovyScriptFactory.java
Patch:
@@ -88,7 +88,7 @@ public GroovyScriptFactory(String scriptSourceLocator) {
 	 * Interpreted by the post-processor that actually creates the script.
 	 * @param groovyObjectCustomizer a customizer that can set a custom metaclass
 	 * or make other changes to the GroovyObject created by this factory
-	 * (may be <code>null</code>)
+	 * (may be <pre>null</pre>)
 	 */
 	public GroovyScriptFactory(String scriptSourceLocator, GroovyObjectCustomizer groovyObjectCustomizer) {
 		Assert.hasText(scriptSourceLocator, "'scriptSourceLocator' must not be empty");
@@ -120,7 +120,7 @@ public String getScriptSourceLocator() {
 	/**
 	 * Groovy scripts determine their interfaces themselves,
 	 * hence we don't need to explicitly expose interfaces here.
-	 * @return <code>null</code> always
+	 * @return <pre>null</pre> always
 	 */
 	@SuppressWarnings({ "rawtypes", "unchecked" })
 	public Class[] getScriptInterfaces() {

File: src/main/java/org/red5/server/script/rhino/RhinoScriptUtils.java
Patch:
@@ -59,11 +59,11 @@ public class RhinoScriptUtils {
 	 * @param interfaces
 	 *            the interfaces that the scripted Java object is supposed to
 	 *            implement
-	 * @param extendedClass
+	 * @param extendedClass class
 	 * @return the scripted Java object
 	 * @throws ScriptCompilationException
 	 *             in case of Rhino parsing failure
-	 * @throws java.io.IOException
+	 * @throws IOException on IO error
 	 */
 	@SuppressWarnings("rawtypes")
 	public static Object createRhinoObject(String scriptSource, Class[] interfaces, Class extendedClass) throws ScriptCompilationException, IOException, Exception {

File: src/main/java/org/red5/server/service/flv/impl/FLVService.java
Patch:
@@ -64,7 +64,7 @@ public IStreamableFile getStreamableFile(File file) throws IOException {
 	/**
 	 * Generate metadata or not
 	 *
-	 * @param generate  <code>true</code> if there's need to generate metadata, <code>false</code> otherwise
+	 * @param generate  <pre>true</pre> if there's need to generate metadata, <pre>false</pre> otherwise
 	 */
 	public void setGenerateMetadata(boolean generate) {
 		generateMetadata = generate;

File: src/main/java/org/red5/server/stream/IStreamSource.java
Patch:
@@ -26,7 +26,7 @@
 public interface IStreamSource {
     /**
      * Is there something more to stream?
-     * @return      <code>true</code> if there's streamable data, <code>false</code> otherwise
+     * @return      <pre>true</pre> if there's streamable data, <pre>false</pre> otherwise
      */
 	public abstract boolean hasMore();
 

File: src/main/java/org/red5/spring/ExtendedPropertyPlaceholderConfigurer.java
Patch:
@@ -86,9 +86,8 @@ public Properties getMergedProperties() {
 	 * String[] of wildcard locations of properties that are converted to
 	 * Resource[] using using {@link PathMatchingResourcePatternResolver}
 	 * 
-	 * @param locations
-	 *            String[]
-	 * @throws IOException
+	 * @param locations String[]
+	 * @throws IOException on IO exception
 	 */
 	public void setWildcardLocations(String[] locations) throws IOException {
 

File: src/main/java/org/red5/server/persistence/FilePersistence.java
Patch:
@@ -114,7 +114,7 @@ public FilePersistence(IScope scope) {
 		if (ctx.hasBean(ISchedulingService.BEAN_NAME)) {
 			schedulingService = (ISchedulingService) ctx.getBean(ISchedulingService.BEAN_NAME);
 		} else {
-			//try the parent
+			// try the parent
 			schedulingService = (ISchedulingService) scope.getParent().getContext().getBean(ISchedulingService.BEAN_NAME);
 		}
 		// add the job

File: src/main/java/org/red5/server/scope/BroadcastScope.java
Patch:
@@ -46,12 +46,12 @@ public class BroadcastScope extends BasicScope implements IBroadcastScope, IPipe
 	/**
 	 * Broadcasting stream associated with this scope
 	 */
-	private IClientBroadcastStream clientBroadcastStream;
+	private transient IClientBroadcastStream clientBroadcastStream;
 	
 	/**
 	 * Simple in memory push pipe, triggered by an active provider to push messages to consumer
 	 */
-	private InMemoryPushPushPipe pipe;
+	private transient InMemoryPushPushPipe pipe;
 
 	/**
 	 * Number of components.

File: src/main/java/org/red5/server/scope/GlobalScope.java
Patch:
@@ -38,7 +38,7 @@
 public class GlobalScope extends Scope implements IGlobalScope, GlobalScopeMXBean {
 
 	// Red5 Server instance
-	protected IServer server;
+	protected transient IServer server;
 
 	{
 		type = ScopeType.GLOBAL;

File: src/main/java/org/red5/server/jmx/mxbeans/ScopeMXBean.java
Patch:
@@ -75,8 +75,10 @@ public interface ScopeMXBean {
 
 	/**
 	 * Destroys scope
+	 * 
+	 * @throws Exception 
 	 */
-	public void destroy();
+	public void destroy() throws Exception;
 
 	/**
 	 * Set scope persistence class

File: src/main/java/org/red5/server/scope/Scope.java
Patch:
@@ -312,8 +312,10 @@ public boolean createChildScope(String name) {
 
 	/**
 	 * Destroys scope
+	 * 
+	 * @throws Exception 
 	 */
-	public void destroy() {
+	public void destroy() throws Exception {
 		log.debug("Destroy scope");
 		if (hasParent()) {
 			parent.removeChildScope(this);

File: src/main/java/org/red5/server/net/rtmp/RTMPHandler.java
Patch:
@@ -485,6 +485,7 @@ protected void onCommand(RTMPConnection conn, Channel channel, Header source, IC
 				reply.setTransactionId(command.getTransactionId());
 				channel.write(reply);
 				if (disconnectOnReturn) {
+					log.debug("Close connection due to connect handling exception: {}", conn.getSessionId());
 					conn.close();
 				}
 			}

File: src/main/java/org/red5/server/net/remoting/RemotingClient.java
Patch:
@@ -101,7 +101,7 @@ public RemotingClient(String url) {
 	 * @param timeout Timeout for one request in milliseconds
 	 */
 	public RemotingClient(String url, int timeout) {
-		client = HttpConnectionUtil.getSoTimeoutClient(timeout);
+		client = HttpConnectionUtil.getClient(timeout);
 		this.url = url;
 		log.debug("RemotingClient created  - url: {} timeout: {}", url, timeout);
 	}

File: src/main/java/org/red5/server/util/HttpConnectionUtil.java
Patch:
@@ -62,7 +62,7 @@ public class HttpConnectionUtil {
 	 * 
 	 * @return client
 	 */
-	public static final DefaultHttpClient getClient() {
+	public static final HttpClient getClient() {
 		return getClient(connectionTimeout);
 	}
 
@@ -72,7 +72,7 @@ public static final DefaultHttpClient getClient() {
 	 * @param timeout - socket timeout to set
 	 * @return client
 	 */
-	public static final DefaultHttpClient getClient(int timeout) {
+	public static final HttpClient getClient(int timeout) {
 		HttpClientBuilder client = HttpClientBuilder.create();
 		client.setConnectionManager(connectionManager);
 		// dont retry

File: src/main/java/org/red5/server/util/HttpConnectionUtil.java
Patch:
@@ -62,7 +62,7 @@ public class HttpConnectionUtil {
 	 * 
 	 * @return client
 	 */
-	public static final DefaultHttpClient getClient() {
+	public static final HttpClient getClient() {
 		return getClient(connectionTimeout);
 	}
 
@@ -72,7 +72,7 @@ public static final DefaultHttpClient getClient() {
 	 * @param timeout - socket timeout to set
 	 * @return client
 	 */
-	public static final DefaultHttpClient getClient(int timeout) {
+	public static final HttpClient getClient(int timeout) {
 		HttpClientBuilder client = HttpClientBuilder.create();
 		client.setConnectionManager(connectionManager);
 		// dont retry

File: src/main/java/org/red5/server/net/remoting/RemotingClient.java
Patch:
@@ -101,7 +101,7 @@ public RemotingClient(String url) {
 	 * @param timeout Timeout for one request in milliseconds
 	 */
 	public RemotingClient(String url, int timeout) {
-		client = HttpConnectionUtil.getSoTimeoutClient(timeout);
+		client = HttpConnectionUtil.getClient(timeout);
 		this.url = url;
 		log.debug("RemotingClient created  - url: {} timeout: {}", url, timeout);
 	}

File: src/main/java/org/red5/server/scope/Scope.java
Patch:
@@ -897,13 +897,13 @@ public void init() {
 	 */
 	public void uninit() {
 		log.debug("Un-init scope");
-		setEnabled(false);
 		for (IBasicScope child : children.keySet()) {
 			if (child instanceof Scope) {
 				((Scope) child).uninit();
 			}
 		}
 		stop();
+		setEnabled(false);
 		if (hasParent()) {
 			if (parent.hasChildScope(name)) {
 				parent.removeChildScope(this);

File: src/main/java/org/red5/server/net/rtmp/IRTMPHandler.java
Patch:
@@ -36,7 +36,7 @@ public interface IRTMPHandler {
 	 * Message received.
 	 * 
 	 * @param conn Connection 
-	 * @param in IoBuffer or Packet containing an RTMP message
+	 * @param packet Packet containing an RTMP message
 	 * @throws Exception   
 	 */
 	public void messageReceived(RTMPConnection conn, Packet packet) throws Exception;
@@ -45,7 +45,7 @@ public interface IRTMPHandler {
 	 * Message sent.
 	 * 
 	 * @param conn Connection
-	 * @param message Message
+	 * @param packet RTMP message
 	 */
 	public void messageSent(RTMPConnection conn, Packet packet);
 

File: src/main/java/org/red5/server/net/rtmp/codec/RTMPProtocolDecoder.java
Patch:
@@ -258,7 +258,7 @@ public IoBuffer decodeHandshakeS2(RTMPConnection conn, RTMPDecodeState state, Io
 	 * Decodes an IoBuffer into a Packet.
 	 * 
 	 * @param conn Connection
-	 * @param rtmp RTMP protocol state
+	 * @param state RTMP protocol state
 	 * @param in IoBuffer
 	 * @return Packet
 	 */

File: src/main/java/org/red5/server/script/rhino/RhinoScriptUtils.java
Patch:
@@ -198,7 +198,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
 	 * create an instance of the javascript object.
 	 * 
 	 * @param scriptSource
-	 * @return
+	 * @return function name
 	 */
 	private static String getFunctionName(String scriptSource) {
 		String ret = "undefined";
@@ -215,7 +215,7 @@ private static String getFunctionName(String scriptSource) {
 		} catch (IndexOutOfBoundsException ex) {
 			log.error("Non-existent backreference used the replacement text");
 		}
-		log.debug("Got a function name: " + ret);
+		log.debug("Got a function name: {}", ret);
 		return ret;
 	}
 

File: src/main/java/org/red5/server/so/SharedObjectScope.java
Patch:
@@ -469,10 +469,9 @@ public Map<String, Object> getData() {
 	}
 
 	/**
-	 * Return security handlers for this shared object or <code>null</code> if
-	 * none are found.
+	 * Return security handlers for this shared object or <code>null</code> if none are found.
 	 * 
-	 * @return
+	 * @return set of security handlers
 	 */
 	private Set<ISharedObjectSecurity> getSecurityHandlers() {
 		ISharedObjectSecurityService security = (ISharedObjectSecurityService) ScopeUtils.getScopeService(getParent(), ISharedObjectSecurityService.class);

File: src/main/java/org/red5/server/stream/PlayEngine.java
Patch:
@@ -830,7 +830,7 @@ public void close() {
 	 * bandwidth as well as the requested client buffer into account.
 	 * 
 	 * @param message
-	 * @return
+	 * @return true if it is ok to send more, false otherwise
 	 */
 	private boolean okayToSendMessage(IRTMPEvent message) {
 		if (message instanceof IStreamData) {
@@ -1298,7 +1298,7 @@ private int sendVODSeekCM(IMessageInput msgIn, int position) {
 	 * Send VOD check video control message
 	 * 
 	 * @param msgIn
-	 * @return
+	 * @return result of oob control message
 	 */
 	private boolean sendCheckVideoCM(IMessageInput msgIn) {
 		OOBControlMessage oobCtrlMsg = new OOBControlMessage();

File: src/main/java/org/red5/server/util/FileUtil.java
Patch:
@@ -233,7 +233,7 @@ public static void rename(String from, String to) {
 	/**
 	 * Special method for capture of StdOut.
 	 * 
-	 * @return
+	 * @return stdOut thread
 	 */
 	private final static Thread stdOut(final Process p) {
 		final byte[] empty = new byte[128];

File: src/main/java/org/red5/server/util/UrlQueryStringMap.java
Patch:
@@ -21,7 +21,7 @@ public UrlQueryStringMap() {
 	 * Parse a given query string and return an instance of this class.
 	 * 
 	 * @param queryString
-	 * @return
+	 * @return query string items as map entries
 	 */
 	public static UrlQueryStringMap<String, String> parse(String queryString) {
 		UrlQueryStringMap<String, String> map = new UrlQueryStringMap<String, String>();

File: src/main/java/org/red5/server/stream/PlayEngine.java
Patch:
@@ -571,7 +571,7 @@ private final void playLive() throws IOException {
 					IAudioStreamCodec audioCodec = info.getAudioCodec();
 					log.debug("Audio codec: {}", audioCodec);
 					if (audioCodec != null) {
-						//check for decoder configuration to send
+						// check for decoder configuration to send
 						IoBuffer config = audioCodec.getDecoderConfiguration();
 						if (config != null) {
 							log.debug("Decoder configuration is available for {}", audioCodec.getName());

File: src/main/java/org/red5/server/Shutdown.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.io.EOFException;
 import java.lang.reflect.UndeclaredThrowableException;
+import java.rmi.UnmarshalException;
 import java.util.HashMap;
 
 import javax.management.JMX;
@@ -115,6 +116,8 @@ public static void main(String[] args) {
 			// ignore
 		} catch (NullPointerException e) {
 			// ignore
+		} catch (UnmarshalException e) {
+			// ignore
 		} catch (EOFException e) {
 			// ignore
 		} catch (Exception e) {

File: src/main/java/org/red5/server/stream/ClientBroadcastStream.java
Patch:
@@ -471,7 +471,7 @@ public void setRegisterJMX(boolean registerJMX) {
 	 *  Notifies handler on stream broadcast close
 	 */
 	private void notifyBroadcastClose() {
-		IStreamAwareScopeHandler handler = getStreamAwareHandler();
+		final IStreamAwareScopeHandler handler = getStreamAwareHandler();
 		if (handler != null) {
 			try {
 				handler.streamBroadcastClose(this);

File: src/main/java/org/red5/server/stream/consumer/FileConsumer.java
Patch:
@@ -344,7 +344,7 @@ private boolean acquireWriteFuture(int sliceLength) {
 					//wait n seconds for a result from the last writer
 					writeResult = writerFuture.get(timeout, TimeUnit.MILLISECONDS);
 				} catch (Exception e) {
-					log.warn("Exception waiting for write result", e);
+					log.warn("Exception waiting for write result. Timeout: {}ms", timeout, e);
 					return false;
 				}
 			}

