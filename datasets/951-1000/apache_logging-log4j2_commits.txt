File: log4j-layout-template-json-test/src/test/java/org/apache/logging/log4j/layout/template/json/resolver/MessageResolverTest.java
Patch:
@@ -228,6 +228,8 @@ void test_MultiformatMessage() {
 
     private static final class TestMultiformatMessage implements MultiformatMessage {
 
+        private static final long serialVersionUID = 1L;
+
         @Override
         public String getFormattedMessage() {
             return "{\"foo\": \"bar\"}";

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/ConfigurationStrSubstitutor.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Properties;
 
 /**
- * {@link RuntimeStrSubstitutor} is a {@link StrSubstitutor} which only supports recursive evaluation of lookups.
+ * {@link ConfigurationStrSubstitutor} is a {@link StrSubstitutor} which only supports recursive evaluation of lookups.
  * This can be dangerous when combined with user-provided inputs, and should only be used on data directly from
  * a configuration.
  */

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/RegexFilter.java
Patch:
@@ -148,7 +148,8 @@ public static RegexFilter createFilter(
             LOGGER.error("A regular expression must be provided for RegexFilter");
             return null;
         }
-        return new RegexFilter(useRawMsg, Pattern.compile(regex, toPatternFlags(patternFlags)), match, mismatch);
+        return new RegexFilter(
+                Boolean.TRUE.equals(useRawMsg), Pattern.compile(regex, toPatternFlags(patternFlags)), match, mismatch);
     }
 
     private static int toPatternFlags(final String[] patternFlags)

File: log4j-slf4j-impl/src/test/java/org/apache/logging/slf4j/message/ThrowableConsumingMessageFactoryTest.java
Patch:
@@ -36,7 +36,7 @@ class ThrowableConsumingMessageFactoryTest {
     private static final Object P8 = new Object();
     private static final Object P9 = new Object();
     private static final Object P10 = new Object();
-    private static final Object THROWABLE = new Throwable();
+    private static final Throwable THROWABLE = new Throwable();
 
     @Test
     void should_not_consume_last_object_parameter() {

File: log4j-slf4j2-impl/src/test/java/org/apache/logging/slf4j/message/ThrowableConsumingMessageFactoryTest.java
Patch:
@@ -36,7 +36,7 @@ class ThrowableConsumingMessageFactoryTest {
     private static final Object P8 = new Object();
     private static final Object P9 = new Object();
     private static final Object P10 = new Object();
-    private static final Object THROWABLE = new Throwable();
+    private static final Throwable THROWABLE = new Throwable();
 
     @Test
     void should_not_consume_last_object_parameter() {

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/util/internal/instant/InstantPatternThreadLocalCachedFormatterTest.java
Patch:
@@ -107,7 +107,7 @@ static Object[][] getterTestCases() {
     }
 
     @ParameterizedTest
-    @ValueSource(strings = {"S", "SSSS", "SSSSS", "SSSSSS", "SSSSSSS", "SSSSSSSS", "SSSSSSSSS", "n", "N"})
+    @ValueSource(strings = {"SSSS", "SSSSS", "SSSSSS", "SSSSSSS", "SSSSSSSS", "SSSSSSSSS", "n", "N"})
     void ofMilliPrecision_should_fail_on_inconsistent_precision(final String subMilliPattern) {
         final InstantPatternDynamicFormatter dynamicFormatter =
                 new InstantPatternDynamicFormatter(subMilliPattern, LOCALE, TIME_ZONE);

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/LoggerMessageFactoryCustomizationTest.java
Patch:
@@ -60,8 +60,8 @@ private static void assertTestMessageFactories(
             Logger logger,
             Class<? extends MessageFactory> messageFactoryClass,
             Class<? extends FlowMessageFactory> flowMessageFactoryClass) {
-        assertThat((MessageFactory) logger.getMessageFactory()).isInstanceOf(messageFactoryClass);
-        assertThat(logger.getFlowMessageFactory()).isInstanceOf(flowMessageFactoryClass);
+        assertThat(logger.getMessageFactory().getClass()).isEqualTo(messageFactoryClass);
+        assertThat(logger.getFlowMessageFactory().getClass()).isEqualTo(flowMessageFactoryClass);
     }
 
     public static class TestMessageFactory extends AbstractMessageFactory {

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/impl/ThreadContextDataInjectorTest.java
Patch:
@@ -33,7 +33,6 @@
 import org.apache.logging.log4j.ThreadContext;
 import org.apache.logging.log4j.core.ContextDataInjector;
 import org.apache.logging.log4j.spi.ThreadContextMap;
-import org.apache.logging.log4j.util.PropertiesUtil;
 import org.apache.logging.log4j.util.ProviderUtil;
 import org.apache.logging.log4j.util.SortedArrayStringMap;
 import org.apache.logging.log4j.util.StringMap;
@@ -59,7 +58,6 @@ public static Collection<String[]> threadContextMapClassNames() {
     public String threadContextMapClassName;
 
     private static void resetThreadContextMap() {
-        PropertiesUtil.getProperties().reload();
         final Log4jProvider provider = (Log4jProvider) ProviderUtil.getProvider();
         provider.resetThreadContextMap();
         ThreadContext.init();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java
Patch:
@@ -33,7 +33,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
-import java.util.stream.Collectors;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.ConfigurationFactory;
@@ -513,7 +512,7 @@ public Logger getLogger(final String name) {
      * @return a collection of the current loggers.
      */
     public Collection<Logger> getLoggers() {
-        return loggerRegistry.getLoggers().collect(Collectors.toList());
+        return loggerRegistry.getLoggers();
     }
 
     /**

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/processor/GraalVmProcessorTest.java
Patch:
@@ -65,6 +65,7 @@ class GraalVmProcessorTest {
             "fields",
             asList(
                     asMap("name", "attribute"),
+                    asMap("name", "attributeWithoutPublicSetterButWithSuppressAnnotation"),
                     asMap("name", "config"),
                     asMap("name", "layout"),
                     asMap("name", "loggerContext"),

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/JdbcAppender.java
Patch:
@@ -60,6 +60,7 @@ public static class Builder<B extends Builder<B>> extends AbstractDatabaseAppend
         private ConnectionSource connectionSource;
 
         @PluginBuilderAttribute
+        @SuppressWarnings("log4j.public.setter")
         private boolean immediateFail;
 
         @PluginBuilderAttribute
@@ -80,6 +81,7 @@ public static class Builder<B extends Builder<B>> extends AbstractDatabaseAppend
 
         // TODO Consider moving up to AbstractDatabaseAppender.Builder.
         @PluginBuilderAttribute
+        @SuppressWarnings("log4j.public.setter")
         private long reconnectIntervalMillis = DEFAULT_RECONNECT_INTERVAL_MILLIS;
 
         @Override

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/SocketPerformancePreferences.java
Patch:
@@ -40,14 +40,17 @@ public static SocketPerformancePreferences newBuilder() {
 
     @PluginBuilderAttribute
     @Required
+    @SuppressWarnings("log4j.public.setter")
     private int bandwidth;
 
     @PluginBuilderAttribute
     @Required
+    @SuppressWarnings("log4j.public.setter")
     private int connectionTime;
 
     @PluginBuilderAttribute
     @Required
+    @SuppressWarnings("log4j.public.setter")
     private int latency;
 
     public void apply(final Socket socket) {

File: log4j-jakarta-web/src/main/java/org/apache/logging/log4j/web/appender/ServletAppender.java
Patch:
@@ -40,6 +40,7 @@ public static class Builder<B extends Builder<B>> extends AbstractAppender.Build
             implements org.apache.logging.log4j.core.util.Builder<ServletAppender> {
 
         @PluginBuilderAttribute
+        @SuppressWarnings("log4j.public.setter")
         private boolean logThrowables;
 
         @Override

File: log4j-web/src/main/java/org/apache/logging/log4j/web/appender/ServletAppender.java
Patch:
@@ -40,6 +40,7 @@ public static class Builder<B extends Builder<B>> extends AbstractAppender.Build
             implements org.apache.logging.log4j.core.util.Builder<ServletAppender> {
 
         @PluginBuilderAttribute
+        @SuppressWarnings("log4j.public.setter") // The setter is not assignable.
         private boolean logThrowables;
 
         @Override

File: log4j-jul/src/test/java/org/apache/logging/log4j/jul/test/ApiLoggerTest.java
Patch:
@@ -16,8 +16,7 @@
  */
 package org.apache.logging.log4j.jul.test;
 
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.hamcrest.Matchers.equalTo;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 
@@ -46,7 +45,7 @@ public static void tearDownClass() {
     public void setUp() {
         logger = Logger.getLogger(LOGGER_NAME);
         logger.setFilter(null);
-        assertThat(logger.getLevel(), equalTo(java.util.logging.Level.FINE));
+        assertThat(getEffectiveLevel(logger)).isEqualTo(java.util.logging.Level.FINE);
         eventAppender = ListAppender.getListAppender("TestAppender");
         flowAppender = ListAppender.getListAppender("FlowAppender");
         stringAppender = ListAppender.getListAppender("StringAppender");

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/Log4jStaticResources.java
Patch:
@@ -16,13 +16,11 @@
  */
 package org.apache.logging.log4j.test.junit;
 
-import aQute.bnd.annotation.baseline.BaselineIgnore;
 import org.junit.jupiter.api.parallel.ResourceLock;
 
 /**
  * Constants to use the {@link ResourceLock} annotation.
  */
-@BaselineIgnore("2.24.0")
 public final class Log4jStaticResources {
 
     /**

File: log4j-api/src/main/java/org/apache/logging/log4j/Level.java
Patch:
@@ -18,7 +18,6 @@
 
 import static org.apache.logging.log4j.util.Strings.toRootUpperCase;
 
-import aQute.bnd.annotation.baseline.BaselineIgnore;
 import java.io.Serializable;
 import java.util.Objects;
 import java.util.concurrent.ConcurrentHashMap;
@@ -75,7 +74,6 @@
  * used in logging configurations.
  * </p>
  */
-@BaselineIgnore("2.22.0")
 public final class Level implements Comparable<Level>, Serializable {
 
     private static final Level[] EMPTY_ARRAY = {};

File: log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataId.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.logging.log4j.message;
 
-import aQute.bnd.annotation.baseline.BaselineIgnore;
 import com.google.errorprone.annotations.InlineMe;
 import java.io.Serializable;
 import org.apache.logging.log4j.util.StringBuilderFormattable;
@@ -257,7 +256,6 @@ public StructuredDataId makeId(final String defaultId, final String anEnterprise
      */
     @Deprecated
     // This method should have been `final` from the start, we don't expect anyone to override it.
-    @BaselineIgnore("2.22.0")
     @InlineMe(replacement = "this.makeId(defaultId, String.valueOf(anEnterpriseNumber))")
     public final StructuredDataId makeId(final String defaultId, final int anEnterpriseNumber) {
         return makeId(defaultId, String.valueOf(anEnterpriseNumber));

File: log4j-api/src/main/java/org/apache/logging/log4j/util/ServiceLoaderUtil.java
Patch:
@@ -18,7 +18,6 @@
 
 import static java.util.Objects.requireNonNull;
 
-import aQute.bnd.annotation.baseline.BaselineIgnore;
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -50,7 +49,6 @@
  * </ol>
  */
 @InternalApi
-@BaselineIgnore("2.24.0")
 public final class ServiceLoaderUtil {
 
     private static final int MAX_BROKEN_SERVICES = 8;

File: log4j-api/src/main/java/org/apache/logging/log4j/util/package-info.java
Patch:
@@ -20,7 +20,7 @@
  * There are no guarantees for binary or logical compatibility in this package.
  */
 @Export
-@Version("2.24.0")
+@Version("2.24.1")
 package org.apache.logging.log4j.util;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/JsonConstants.java
Patch:
@@ -16,12 +16,9 @@
  */
 package org.apache.logging.log4j.core.jackson;
 
-import aQute.bnd.annotation.baseline.BaselineIgnore;
-
 /**
  * Keeps constants separate from any class that may depend on third party jars.
  */
-@BaselineIgnore("2.24.0")
 public final class JsonConstants {
     public static final String ELT_CAUSE = "cause";
     public static final String ELT_CONTEXT_MAP = "contextMap";

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/package-info.java
Patch:
@@ -19,7 +19,7 @@
  * library.
  */
 @Export
-@Version("2.24.0")
+@Version("2.24.1")
 package org.apache.logging.log4j.core.jackson;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/package-info.java
Patch:
@@ -21,11 +21,9 @@
  */
 @Export
 @Header(name = Constants.BUNDLE_ACTIVATIONPOLICY, value = Constants.ACTIVATION_LAZY)
-@Version("2.23.0")
-@BaselineIgnore("2.23.0")
+@Version("2.23.1")
 package org.apache.logging.slf4j;
 
-import aQute.bnd.annotation.baseline.BaselineIgnore;
 import org.osgi.annotation.bundle.Export;
 import org.osgi.annotation.bundle.Header;
 import org.osgi.annotation.versioning.Version;

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rewrite/MapRewritePolicyTest.java
Patch:
@@ -163,16 +163,15 @@ private void checkUpdated(final Map<String, String> updatedMap) {
         assertThat("wrong size", updatedMap, hasSize(2));
     }
 
-    @SuppressWarnings("deprecation")
     private void compareLogEvents(final LogEvent orig, final LogEvent changed) {
         // Ensure that everything but the Mapped Data is still the same
         assertEquals(orig.getLoggerName(), changed.getLoggerName(), "LoggerName changed");
         assertEquals(orig.getMarker(), changed.getMarker(), "Marker changed");
         assertEquals(orig.getLoggerFqcn(), changed.getLoggerFqcn(), "FQCN changed");
         assertEquals(orig.getLevel(), changed.getLevel(), "Level changed");
         assertArrayEquals(
-                orig.getThrown() == null ? null : orig.getThrownProxy().getExtendedStackTrace(),
-                changed.getThrown() == null ? null : changed.getThrownProxy().getExtendedStackTrace(),
+                orig.getThrown() == null ? null : orig.getThrown().getStackTrace(),
+                changed.getThrown() == null ? null : changed.getThrown().getStackTrace(),
                 "Throwable changed");
         assertEquals(orig.getContextData(), changed.getContextData(), "ContextData changed");
         assertEquals(orig.getContextStack(), changed.getContextStack(), "ContextStack changed");

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/CsvLogEventLayout.java
Patch:
@@ -95,7 +95,7 @@ public String toSerializable(final LogEvent event) {
             format.print(event.getLoggerFqcn(), buffer, false);
             format.print(event.getLoggerName(), buffer, false);
             format.print(event.getMarker(), buffer, false);
-            format.print(event.getThrownProxy(), buffer, false);
+            format.print(event.getThrown(), buffer, false);
             format.print(event.getSource(), buffer, false);
             format.print(event.getContextData(), buffer, false);
             format.print(event.getContextStack(), buffer, false);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java
Patch:
@@ -212,7 +212,7 @@ public List<PatternFormatter> parse(
             list.add(new PatternFormatter(pc, field));
         }
         if (alwaysWriteExceptions && !handlesThrowable) {
-            final LogEventPatternConverter pc = ExtendedThrowablePatternConverter.newInstance(config, new String[0]);
+            final LogEventPatternConverter pc = ThrowablePatternConverter.newInstance(config, new String[0]);
             list.add(new PatternFormatter(pc, FormattingInfo.getDefault()));
         }
         return list;

File: log4j-mongodb/src/main/java/org/apache/logging/log4j/mongodb/package-info.java
Patch:
@@ -20,7 +20,7 @@
  */
 @Export
 @Open("org.apache.logging.log4j.core")
-@Version("2.24.0")
+@Version("2.25.0")
 package org.apache.logging.log4j.mongodb;
 
 import aQute.bnd.annotation.jpms.Open;

File: log4j-mongodb4/src/main/java/org/apache/logging/log4j/mongodb4/package-info.java
Patch:
@@ -20,7 +20,7 @@
  */
 @Export
 @Open("org.apache.logging.log4j.core")
-@Version("2.21.0")
+@Version("2.25.0")
 package org.apache.logging.log4j.mongodb4;
 
 import aQute.bnd.annotation.jpms.Open;

File: log4j-api/src/main/java/org/apache/logging/log4j/status/StatusData.java
Patch:
@@ -182,7 +182,7 @@ public String getFormattedStatus() {
             effectiveThrowable = throwable;
         }
         if (effectiveThrowable != null) {
-            sb.append(SPACE);
+            sb.append(System.lineSeparator());
             final ByteArrayOutputStream baos = new ByteArrayOutputStream();
             effectiveThrowable.printStackTrace(new PrintStream(baos));
             /*

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/action/AbstractActionTest.java
Patch:
@@ -47,8 +47,9 @@ void testExceptionsAreLoggedToStatusLogger() {
         assertThat(
                 formattedMessage,
                 containsString("Exception reported by action 'class org.apache."
-                        + "logging.log4j.core.appender.rolling.action.AbstractActionTest$TestAction' java.io.IOException: "
-                        + "failed" + System.lineSeparator()
+                        + "logging.log4j.core.appender.rolling.action.AbstractActionTest$TestAction'"
+                        + System.lineSeparator()
+                        + "java.io.IOException: failed" + System.lineSeparator()
                         + "\tat org.apache.logging.log4j.core.appender.rolling.action.AbstractActionTest"
                         + "$TestAction.execute(AbstractActionTest.java:"));
     }

File: log4j-1.2-api/src/main/java/org/apache/log4j/Level.java
Patch:
@@ -115,8 +115,7 @@ protected Level(
             final String levelStr,
             final int syslogEquivalent,
             final org.apache.logging.log4j.Level version2Equivalent) {
-        super(level, levelStr, syslogEquivalent);
-        this.version2Level = version2Equivalent != null ? version2Equivalent : OptionConverter.createLevel(this);
+        super(level, levelStr, syslogEquivalent, version2Equivalent);
     }
 
     /**
@@ -222,6 +221,7 @@ private void readObject(final ObjectInputStream s) throws IOException, ClassNotF
         if (levelStr == null) {
             levelStr = Strings.EMPTY;
         }
+        version2Level = OptionConverter.createLevel(this);
     }
 
     /**

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/categories/Layouts.java
Patch:
@@ -22,8 +22,6 @@
 public interface Layouts {
     interface Csv {}
 
-    interface Jansi {}
-
     interface Json {}
 
     interface Xml {}

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/categories/package-info.java
Patch:
@@ -20,8 +20,10 @@
  * integration tests, an appropriate category interface should be specified.
  */
 @Export
-@Version("2.20.1")
+@Version("2.20.2")
+@BaselineIgnore("2.25.0")
 package org.apache.logging.log4j.core.test.categories;
 
+import aQute.bnd.annotation.baseline.BaselineIgnore;
 import org.osgi.annotation.bundle.Export;
 import org.osgi.annotation.versioning.Version;

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/ConsoleAppenderAnsiMessagesMain.java
Patch:
@@ -30,16 +30,15 @@
  * </p>
  *
  * <pre>
- * java -classpath log4j-core\target\test-classes;log4j-core\target\classes;log4j-api\target\classes;%HOME%\.m2\repository\org\fusesource\jansi\jansi\1.14\jansi-1.14.jar; org.apache.logging.log4j.core.appender.ConsoleAppenderAnsiMessagesMain log4j-core/target/test-classes/log4j2-console.xml
+ * java -classpath log4j-core\target\test-classes;log4j-core\target\classes;log4j-api\target\classes org.apache.logging.log4j.core.appender.ConsoleAppenderAnsiMessagesMain log4j-core/target/test-classes/log4j2-console.xml
  * </pre>
  */
 public class ConsoleAppenderAnsiMessagesMain {
 
     private static final Logger LOG = LogManager.getLogger(ConsoleAppenderAnsiMessagesMain.class);
 
     public static void main(final String[] args) {
-        System.setProperty("log4j.skipJansi", "false"); // LOG4J2-2087: explicitly enable
-        try (final LoggerContext ctx = Configurator.initialize(
+        try (final LoggerContext ignored = Configurator.initialize(
                 ConsoleAppenderAnsiMessagesMain.class.getName(), "target/test-classes/log4j2-console.xml")) {
             LOG.fatal("\u001b[1;35mFatal message.\u001b[0m");
             LOG.error("\u001b[1;31mError message.\u001b[0m");

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/ConsoleAppenderAnsiStyleNameLayoutMain.java
Patch:
@@ -31,8 +31,7 @@ public class ConsoleAppenderAnsiStyleNameLayoutMain {
     private static final Logger LOG = LogManager.getLogger(ConsoleAppenderAnsiStyleNameLayoutMain.class);
 
     public static void main(final String[] args) {
-        System.setProperty("log4j.skipJansi", "false"); // LOG4J2-2087: explicitly enable
-        try (final LoggerContext ctx = Configurator.initialize(
+        try (final LoggerContext ignored = Configurator.initialize(
                 ConsoleAppenderAnsiMessagesMain.class.getName(),
                 "target/test-classes/log4j2-console-style-name-ansi.xml")) {
             LOG.fatal("Fatal message.");

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/ConsoleAppenderHighlightLayoutDefaultMain.java
Patch:
@@ -31,8 +31,7 @@ public class ConsoleAppenderHighlightLayoutDefaultMain {
     private static final Logger LOG = LogManager.getLogger(ConsoleAppenderHighlightLayoutDefaultMain.class);
 
     public static void main(final String[] args) {
-        System.setProperty("log4j.skipJansi", "false"); // LOG4J2-2087: explicitly enable
-        try (final LoggerContext ctx = Configurator.initialize(
+        try (final LoggerContext ignored = Configurator.initialize(
                 ConsoleAppenderAnsiMessagesMain.class.getName(),
                 "target/test-classes/log4j2-console-highlight-default.xml")) {
             LOG.fatal("Fatal message.");

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/ConsoleAppenderHighlightLayoutMain.java
Patch:
@@ -31,8 +31,7 @@ public class ConsoleAppenderHighlightLayoutMain {
     private static final Logger LOG = LogManager.getLogger(ConsoleAppenderHighlightLayoutMain.class);
 
     public static void main(final String[] args) {
-        System.setProperty("log4j.skipJansi", "false"); // LOG4J2-2087: explicitly enable
-        try (final LoggerContext ctx = Configurator.initialize(
+        try (final LoggerContext ignored = Configurator.initialize(
                 ConsoleAppenderAnsiMessagesMain.class.getName(), "target/test-classes/log4j2-console-highlight.xml")) {
             LOG.fatal("Fatal message.");
             LOG.error("Error message.");

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/ConsoleAppenderJira1002ShortThrowableLayoutMain.java
Patch:
@@ -21,7 +21,7 @@
  */
 public class ConsoleAppenderJira1002ShortThrowableLayoutMain {
 
-    public static void main(final String[] args) {
-        ConsoleAppenderNoAnsiStyleLayoutMain.test(args, "target/test-classes/log4j2-1002.xml");
+    public static void main() {
+        ConsoleAppenderNoAnsiStyleLayoutMain.test("target/test-classes/log4j2-1002.xml");
     }
 }

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/pattern/MessageAnsiConverterTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.junit.jupiter.api.Test;
 
 @LoggerContextSource("log4j-message-ansi.xml")
-public class MessageJansiConverterTest {
+public class MessageAnsiConverterTest {
 
     private static final String EXPECTED =
             "\u001B[31;1mWarning!\u001B[m Pants on \u001B[31mfire!\u001B[m" + Strings.LINE_SEPARATOR;
@@ -47,7 +47,7 @@ public void setUp(final LoggerContext context, @Named("List") final ListAppender
 
     @Test
     public void testReplacement() {
-        // See org.fusesource.jansi.AnsiRenderer
+        // See https://www.javadoc.io/doc/org.jline/jline/latest/org/jline/jansi/AnsiRenderer.html
         logger.error("@|red,bold Warning!|@ Pants on @|red fire!|@");
 
         final List<String> msgs = app.getMessages();

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/pattern/MessageStyledConverterTest.java
Patch:
@@ -47,7 +47,7 @@ public void setUp(final LoggerContext context, @Named("List") final ListAppender
 
     @Test
     public void testReplacement() {
-        // See org.fusesource.jansi.AnsiRenderer
+        // See https://www.javadoc.io/doc/org.jline/jline/latest/org/jline/jansi/AnsiRenderer.html
         logger.error("@|WarningStyle Warning!|@ Pants on @|WarningStyle fire!|@");
 
         final List<String> msgs = app.getMessages();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Log4j 2 private implementation classes.
  */
 @Export
-@Version("2.25.0")
+@Version("2.24.1")
 package org.apache.logging.log4j.core.impl;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Provides classes implementing format specifiers in conversion patterns.
  */
 @Export
-@Version("2.25.0")
+@Version("2.24.1")
 package org.apache.logging.log4j.core.pattern;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-jakarta-smtp/src/test/java/org/apache/logging/log4j/smtp/SmtpAppenderAsyncTest.java
Patch:
@@ -16,8 +16,8 @@
  */
 package org.apache.logging.log4j.smtp;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.fail;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.fail;
 
 import java.util.Iterator;
 import org.apache.logging.log4j.ThreadContext;

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/SetTestProperty.java
Patch:
@@ -39,8 +39,7 @@
 @Target({TYPE, METHOD})
 @Inherited
 @Documented
-@ExtendWith(ExtensionContextAnchor.class)
-@ExtendWith(TestPropertyResolver.class)
+@ExtendWith({ExtensionContextAnchor.class, TestPropertyResolver.class})
 @Repeatable(SetTestProperty.SetTestProperties.class)
 @ReadsSystemProperty
 @ReadsEnvironmentVariable
@@ -54,7 +53,7 @@
     @Target({TYPE, METHOD})
     @Documented
     @Inherited
-    public @interface SetTestProperties {
+    @interface SetTestProperties {
 
         SetTestProperty[] value();
     }

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/TempLoggingDir.java
Patch:
@@ -37,8 +37,7 @@
 @Target({FIELD, PARAMETER})
 @Inherited
 @Documented
-@ExtendWith(ExtensionContextAnchor.class)
-@ExtendWith(TempLoggingDirectory.class)
+@ExtendWith({ExtensionContextAnchor.class, TempLoggingDirectory.class})
 public @interface TempLoggingDir {
 
     CleanupMode cleanup() default CleanupMode.DEFAULT;

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/UsingStatusListener.java
Patch:
@@ -35,7 +35,5 @@
 @Retention(RUNTIME)
 @Target({TYPE, METHOD})
 @Documented
-@ExtendWith(ExtensionContextAnchor.class)
-@ExtendWith(TestPropertyResolver.class)
-@ExtendWith(StatusListenerExtension.class)
+@ExtendWith({ExtensionContextAnchor.class, TestPropertyResolver.class, StatusListenerExtension.class})
 public @interface UsingStatusListener {}

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/UsingTestProperties.java
Patch:
@@ -37,8 +37,7 @@
 @Target({TYPE, METHOD})
 @Inherited
 @Documented
-@ExtendWith(ExtensionContextAnchor.class)
-@ExtendWith(TestPropertyResolver.class)
+@ExtendWith({ExtensionContextAnchor.class, TestPropertyResolver.class})
 @ReadsSystemProperty
 @ReadsEnvironmentVariable
 public @interface UsingTestProperties {}

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/package-info.java
Patch:
@@ -15,10 +15,8 @@
  * limitations under the license.
  */
 @Export
-@Version("2.24.0")
-@BaselineIgnore("2.24.0")
+@Version("2.24.1")
 package org.apache.logging.log4j.test.junit;
 
-import aQute.bnd.annotation.baseline.BaselineIgnore;
 import org.osgi.annotation.bundle.Export;
 import org.osgi.annotation.versioning.Version;

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/junit/package-info.java
Patch:
@@ -20,7 +20,7 @@
  * @see org.junit.rules.TestRule
  */
 @Export
-@Version("2.23.0")
+@Version("2.23.1")
 package org.apache.logging.log4j.core.test.junit;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ThrowableInvertedStackTraceRenderer.java
Patch:
@@ -21,7 +21,7 @@
 import org.jspecify.annotations.Nullable;
 
 /**
- * {@link ThrowableStackTraceRenderer} variant where the stack trace causal chain is rendered in reverse order.
+ * {@link ThrowableStackTraceRenderer} variant where the stack trace causal chain is processed in reverse order.
  */
 final class ThrowableInvertedStackTraceRenderer
         extends ThrowableStackTraceRenderer<ThrowableStackTraceRenderer.Context> {

File: log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/JsonTemplateLayoutDefaults.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.logging.log4j.layout.template.json;
 
+import static org.apache.logging.log4j.util.Strings.LINE_SEPARATOR;
+
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 import java.util.Locale;
@@ -93,7 +95,7 @@ public static String getStackTraceElementTemplateUri() {
     }
 
     public static String getEventDelimiter() {
-        return PROPERTIES.getStringProperty("log4j.layout.jsonTemplate.eventDelimiter", System.lineSeparator());
+        return PROPERTIES.getStringProperty("log4j.layout.jsonTemplate.eventDelimiter", LINE_SEPARATOR);
     }
 
     public static boolean isNullEventDelimiterEnabled() {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/StringMatchFilter.java
Patch:
@@ -239,9 +239,9 @@ public static class Builder extends AbstractFilterBuilder<StringMatchFilter.Buil
         private String text = "";
 
         /**
-         * Sets the logging level to use.
-         * @param text the logging level to use
-         * @return this
+         * Sets the text to search in event messages.
+         * @param text the text to search in event messages.
+         * @return this instance.
          */
         public StringMatchFilter.Builder setMatchString(final String text) {
             this.text = text;

File: log4j-1.2-api/src/main/java/org/apache/log4j/xml/XmlConfiguration.java
Patch:
@@ -90,7 +90,6 @@ public class XmlConfiguration extends Log4j1Configuration {
     private static final String INTERNAL_DEBUG_ATTR = "debug";
     private static final String THRESHOLD_ATTR = "threshold";
     private static final String EMPTY_STR = "";
-    private static final Class<?>[] ONE_STRING_PARAM = new Class[] {String.class};
     private static final String dbfKey = "javax.xml.parsers.DocumentBuilderFactory";
     private static final String THROWABLE_RENDERER_TAG = "throwableRenderer";
 
@@ -504,7 +503,6 @@ private void parseErrorHandler(Element element, Appender appender) {
     /**
      * Used internally to parse a filter element.
      * @param filterElement The Filter Element.
-     * @return The Filter.
      */
     public void addFilter(final AtomicReference<Filter> ref, final Element filterElement) {
         final Filter value = parseFilters(filterElement);

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/SocketAppenderReconnectTest.java
Patch:
@@ -367,10 +367,10 @@ private static void verifyLoggingSuccess(
         await("first socket append")
                 .pollInterval(100, TimeUnit.MILLISECONDS)
                 .atMost(120, TimeUnit.SECONDS)
-                .until(() -> {
+                .ignoreExceptions()
+                .untilAsserted(() -> {
                     final String message = expectedMessages.get(0);
                     logger.info(message);
-                    return true;
                 });
 
         // Reset the error handler

File: log4j-1.2-api/src/main/java/org/apache/log4j/Logger.java
Patch:
@@ -30,7 +30,7 @@ public class Logger extends Category {
      */
     private static final String FQCN = Logger.class.getName();
 
-    public static Logger getLogger(final Class<?> clazz) {
+    public static Logger getLogger(@SuppressWarnings("rawtypes") final Class clazz) {
         // Depth 2 gets the call site of this method.
         return LogManager.getLogger(clazz.getName(), StackLocatorUtil.getCallerClassLoader(2));
     }

File: log4j-api/src/main/java/org/apache/logging/log4j/message/package-info.java
Patch:
@@ -19,7 +19,7 @@
  * Public Message Types used for Log4j 2. Users may implement their own Messages.
  */
 @Export
-@Version("2.25.0")
+@Version("2.24.2")
 package org.apache.logging.log4j.message;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-api/src/main/java/org/apache/logging/log4j/simple/package-info.java
Patch:
@@ -20,7 +20,7 @@
  * Providers are able to be loaded at runtime.
  */
 @Export
-@Version("2.25.0")
+@Version("2.24.1")
 package org.apache.logging.log4j.simple;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Provides Asynchronous Logger classes and interfaces for low-latency logging.
  */
 @Export
-@Version("2.25.0")
+@Version("2.24.1")
 package org.apache.logging.log4j.core.async;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Log4j 2 SSL support
  */
 @Export
-@Version("2.25.0")
+@Version("2.20.3")
 package org.apache.logging.log4j.core.net.ssl;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Implementation of Log4j 2.
  */
 @Export
-@Version("2.25.0")
+@Version("2.24.2")
 package org.apache.logging.log4j.core;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Log4j 2 helper classes.
  */
 @Export
-@Version("2.24.1")
+@Version("2.24.2")
 package org.apache.logging.log4j.core.util;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java
Patch:
@@ -457,7 +457,7 @@ private String applyRulesToString(final Calendar c) {
     }
 
     /**
-     * Creation method for new calender instances.
+     * Creation method for new calendar instances.
      * @return a new Calendar instance.
      */
     private Calendar newCalendar() {

File: log4j-jul/src/test/java/org/apache/logging/log4j/jul/test/Log4jBridgeHandlerTest.java
Patch:
@@ -393,7 +393,7 @@ private static void debugPrintJulLoggers(final String infoStr) {
 
     ////////////////
     ////////////////   INTERNAL DEVELOPER TESTS follow
-    ////////////////   (these are NOT neccessary for unit test but source is kept here for reference and info)
+    ////////////////   (these are NOT necessary for unit test but source is kept here for reference and info)
 
     static {
         if (DEVTEST) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Configuration of Log4j 2.
  */
 @Export
-@Version("2.24.0")
+@Version("2.24.1")
 package org.apache.logging.log4j.core.config;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.logging.log4j.status.StatusLogger;
 import org.apache.logging.log4j.util.LoaderUtil;
 import org.apache.logging.log4j.util.PropertiesUtil;
+import org.jspecify.annotations.Nullable;
 
 /**
  * Load resources (or images) from various sources.
@@ -84,9 +85,9 @@ public static ClassLoader getClassLoader(final Class<?> class1, final Class<?> c
      * </ol>
      * @param resource The resource to load.
      * @param defaultLoader The default ClassLoader.
-     * @return A URL to the resource.
+     * @return A URL to the resource or {@code null}.
      */
-    public static URL getResource(final String resource, final ClassLoader defaultLoader) {
+    public static @Nullable URL getResource(final String resource, final ClassLoader defaultLoader) {
         try {
             ClassLoader classLoader = getThreadContextClassLoader();
             if (classLoader != null) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Log4j 2 helper classes.
  */
 @Export
-@Version("2.24.0")
+@Version("2.24.1")
 package org.apache.logging.log4j.core.util;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Configuration of Log4j 2.
  */
 @Export
-@Version("2.24.0")
+@Version("2.24.1")
 package org.apache.logging.log4j.core.config;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.logging.log4j.status.StatusLogger;
 import org.apache.logging.log4j.util.LoaderUtil;
 import org.apache.logging.log4j.util.PropertiesUtil;
+import org.jspecify.annotations.Nullable;
 
 /**
  * Load resources (or images) from various sources.
@@ -84,9 +85,9 @@ public static ClassLoader getClassLoader(final Class<?> class1, final Class<?> c
      * </ol>
      * @param resource The resource to load.
      * @param defaultLoader The default ClassLoader.
-     * @return A URL to the resource.
+     * @return A URL to the resource or {@code null}.
      */
-    public static URL getResource(final String resource, final ClassLoader defaultLoader) {
+    public static @Nullable URL getResource(final String resource, final ClassLoader defaultLoader) {
         try {
             ClassLoader classLoader = getThreadContextClassLoader();
             if (classLoader != null) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Log4j 2 helper classes.
  */
 @Export
-@Version("2.24.0")
+@Version("2.24.1")
 package org.apache.logging.log4j.core.util;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-api/src/main/java/org/apache/logging/log4j/internal/map/UnmodifiableArrayBackedMap.java
Patch:
@@ -282,6 +282,7 @@ public UnmodifiableArrayBackedMap copyAndPutAll(Map<String, String> entriesToAdd
         // copy the contents of the current map (if any)
         if (numEntries > 0) {
             System.arraycopy(backingArray, 0, newMap.backingArray, 0, numEntries * 2 + 1);
+            newMap.numEntries = numEntries;
         }
 
         for (Map.Entry<String, String> entry : entriesToAdd.entrySet()) {

File: log4j-jakarta-web/src/main/java/org/apache/logging/log4j/web/package-info.java
Patch:
@@ -16,10 +16,10 @@
  */
 
 /**
- * The classes in this package are responsible for properly initializing and deinitializing Log4j in a Java EE web
+ * The classes in this package are responsible for properly initializing and deinitializing Log4j in a Jakarta EE web
  * application.
  *
- * @see <a href="https://logging.apache.org/log4j/2.x/manual/webapp.html">Using Log4j 2 in Web Applications</a>
+ * @see <a href="https://logging.apache.org/log4j/2.x/jakarta.html#log4j-jakarta-web">Integrating Log4j with Web Applications</a>
  */
 @Export
 @Version("2.20.1")

File: log4j-web/src/main/java/org/apache/logging/log4j/web/package-info.java
Patch:
@@ -19,7 +19,7 @@
  * The classes in this package are responsible for properly initializing and deinitializing Log4j in a Java EE web
  * application.
  *
- * @see <a href="https://logging.apache.org/log4j/2.x/manual/webapp.html">Using Log4j 2 in Web Applications</a>
+ * @see <a href="https://logging.apache.org/log4j/2.x/jakarta.html#log4j-jakarta-web">Integrating Log4j with Web Applications</a>
  */
 @Export
 @Version("2.20.1")

File: log4j-jakarta-web/src/main/java/org/apache/logging/log4j/web/package-info.java
Patch:
@@ -16,10 +16,10 @@
  */
 
 /**
- * The classes in this package are responsible for properly initializing and deinitializing Log4j in a Java EE web
+ * The classes in this package are responsible for properly initializing and deinitializing Log4j in a Jakarta EE web
  * application.
  *
- * @see <a href="https://logging.apache.org/log4j/2.x/manual/webapp.html">Using Log4j 2 in Web Applications</a>
+ * @see <a href="https://logging.apache.org/log4j/2.x/jakarta.html#log4j-jakarta-web">Integrating Log4j with Web Applications</a>
  */
 @Export
 @Version("2.20.1")

File: log4j-web/src/main/java/org/apache/logging/log4j/web/package-info.java
Patch:
@@ -19,7 +19,7 @@
  * The classes in this package are responsible for properly initializing and deinitializing Log4j in a Java EE web
  * application.
  *
- * @see <a href="https://logging.apache.org/log4j/2.x/manual/webapp.html">Using Log4j 2 in Web Applications</a>
+ * @see <a href="https://logging.apache.org/log4j/2.x/jakarta.html#log4j-jakarta-web">Integrating Log4j with Web Applications</a>
  */
 @Export
 @Version("2.20.1")

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/package-info.java
Patch:
@@ -15,8 +15,10 @@
  * limitations under the license.
  */
 @Export
-@Version("2.21.1")
+@Version("2.25.0")
+@BaselineIgnore("2.25.0")
 package org.apache.logging.log4j.core.test;
 
+import aQute.bnd.annotation.baseline.BaselineIgnore;
 import org.osgi.annotation.bundle.Export;
 import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/HttpURLConnectionManager.java
Patch:
@@ -100,7 +100,8 @@ public void send(final Layout<?> layout, final LogEvent event) throws IOExceptio
                     header.getName(), header.evaluate(getConfiguration().getStrSubstitutor()));
         }
         if (sslConfiguration != null) {
-            ((HttpsURLConnection) urlConnection).setSSLSocketFactory(sslConfiguration.getSslSocketFactory());
+            ((HttpsURLConnection) urlConnection)
+                    .setSSLSocketFactory(sslConfiguration.getSslContext().getSocketFactory());
         }
         if (isHttps && !verifyHostname) {
             ((HttpsURLConnection) urlConnection).setHostnameVerifier(LaxHostnameVerifier.INSTANCE);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/SmtpManager.java
Patch:
@@ -308,7 +308,8 @@ public SmtpManager createManager(final String name, final FactoryData data) {
             if (smtpProtocol.equals("smtps")) {
                 final SslConfiguration sslConfiguration = data.getSslConfiguration();
                 if (sslConfiguration != null) {
-                    final SSLSocketFactory sslSocketFactory = sslConfiguration.getSslSocketFactory();
+                    final SSLSocketFactory sslSocketFactory =
+                            sslConfiguration.getSslContext().getSocketFactory();
                     properties.put(prefix + ".ssl.socketFactory", sslSocketFactory);
                     properties.setProperty(
                             prefix + ".ssl.checkserveridentity", Boolean.toString(sslConfiguration.isVerifyHostName()));

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/UrlConnectionFactory.java
Patch:
@@ -102,7 +102,8 @@ public static <T extends URLConnection> T createConnection(
                 httpURLConnection.setIfModifiedSince(lastModifiedMillis);
             }
             if (url.getProtocol().equals(HTTPS) && sslConfiguration != null) {
-                ((HttpsURLConnection) httpURLConnection).setSSLSocketFactory(sslConfiguration.getSslSocketFactory());
+                ((HttpsURLConnection) httpURLConnection)
+                        .setSSLSocketFactory(sslConfiguration.getSslContext().getSocketFactory());
                 if (!sslConfiguration.isVerifyHostName()) {
                     ((HttpsURLConnection) httpURLConnection).setHostnameVerifier(LaxHostnameVerifier.INSTANCE);
                 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/PasswordProvider.java
Patch:
@@ -26,6 +26,7 @@
  * is no longer needed.
  * </p>
  */
+@FunctionalInterface
 public interface PasswordProvider {
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/SslConfigurationFactory.java
Patch:
@@ -27,7 +27,6 @@
 public class SslConfigurationFactory {
 
     private static final Logger LOGGER = StatusLogger.getLogger();
-    private static final SslConfiguration sslConfiguration = createSslConfiguration(PropertiesUtil.getProperties());
 
     private static final String trustStorelocation = "log4j2.trustStoreLocation";
     private static final String trustStorePassword = "log4j2.trustStorePassword";
@@ -111,6 +110,6 @@ private static char[] getPassword(final String password, final String keyStoreTy
     }
 
     public static SslConfiguration getSslConfiguration() {
-        return sslConfiguration;
+        return createSslConfiguration(PropertiesUtil.getProperties());
     }
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/StoreConfiguration.java
Patch:
@@ -58,7 +58,7 @@ public StoreConfiguration(final String location, final String password) {
      */
     public void clearSecrets() {
         this.location = null;
-        this.passwordProvider = null;
+        this.passwordProvider = new MemoryPasswordProvider(new char[0]);
     }
 
     public String getLocation() {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Log4j 2 SSL support
  */
 @Export
-@Version("2.20.2")
+@Version("2.25.0")
 package org.apache.logging.log4j.core.net.ssl;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-jakarta-smtp/src/main/java/org/apache/logging/log4j/smtp/SmtpManager.java
Patch:
@@ -262,7 +262,8 @@ public SmtpManager createManager(final String name, final FactoryData data) {
             if (smtpProtocol.equals("smtps")) {
                 final SslConfiguration sslConfiguration = data.getSslConfiguration();
                 if (sslConfiguration != null) {
-                    final SSLSocketFactory sslSocketFactory = sslConfiguration.getSslSocketFactory();
+                    final SSLSocketFactory sslSocketFactory =
+                            sslConfiguration.getSslContext().getSocketFactory();
                     properties.put(prefix + ".ssl.socketFactory", sslSocketFactory);
                     properties.setProperty(
                             prefix + ".ssl.checkserveridentity", Boolean.toString(sslConfiguration.isVerifyHostName()));

File: log4j-api-test/src/test/java/org/apache/logging/log4j/internal/map/UnmodifiableArrayBackedMapTest.java
Patch:
@@ -352,17 +352,17 @@ public void testState() {
         UnmodifiableArrayBackedMap newMap;
 
         originalMap = UnmodifiableArrayBackedMap.EMPTY_MAP;
-        newMap = UnmodifiableArrayBackedMap.getInstance(originalMap.getBackingArray());
+        newMap = UnmodifiableArrayBackedMap.getMap(originalMap.getBackingArray());
         assertEquals(originalMap, newMap);
 
         originalMap = UnmodifiableArrayBackedMap.EMPTY_MAP.copyAndPutAll(getTestParameters());
-        newMap = UnmodifiableArrayBackedMap.getInstance(originalMap.getBackingArray());
+        newMap = UnmodifiableArrayBackedMap.getMap(originalMap.getBackingArray());
         assertEquals(originalMap, newMap);
 
         originalMap = UnmodifiableArrayBackedMap.EMPTY_MAP
                 .copyAndPutAll(getTestParameters())
                 .copyAndRemove("1");
-        newMap = UnmodifiableArrayBackedMap.getInstance(originalMap.getBackingArray());
+        newMap = UnmodifiableArrayBackedMap.getMap(originalMap.getBackingArray());
         assertEquals(originalMap, newMap);
     }
 

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/CopyOnWrite.java
Patch:
@@ -21,5 +21,7 @@
  *
  * @see ReadOnlyThreadContextMap#getReadOnlyContextData()
  * @since 2.7
+ * @deprecated Since 2.24.0 no class implements this.
  */
+@Deprecated
 public interface CopyOnWrite {}

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/ThreadContextMapFactory.java
Patch:
@@ -48,12 +48,12 @@ public final class ThreadContextMapFactory {
      * and when Log4j is reconfigured.
      */
     public static void init() {
-        ProviderUtil.getProvider().resetThreadContextMap();
+        ProviderUtil.getProvider().getThreadContextMapInstance();
     }
 
     private ThreadContextMapFactory() {}
 
     public static ThreadContextMap createThreadContextMap() {
-        return ProviderUtil.getProvider().createThreadContextMap();
+        return ProviderUtil.getProvider().getThreadContextMapInstance();
     }
 }

File: log4j-perf-test/src/main/java/org/apache/logging/log4j/spi/GarbageFreeOpenHashMapThreadContextMap.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.log4j.spi;
 
+import org.apache.logging.log4j.core.context.internal.GarbageFreeSortedArrayThreadContextMap;
 import org.apache.logging.log4j.perf.nogc.OpenHashStringMap;
 import org.apache.logging.log4j.util.PropertiesUtil;
 import org.apache.logging.log4j.util.ReadOnlyStringMap;

File: log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JProvider.java
Patch:
@@ -21,18 +21,20 @@
 import org.apache.logging.log4j.spi.LoggerContextFactory;
 import org.apache.logging.log4j.spi.Provider;
 import org.apache.logging.log4j.spi.ThreadContextMap;
+import org.jspecify.annotations.NullMarked;
 
 /**
  * Bind the Log4j API to SLF4J.
  */
+@NullMarked
 @ServiceProvider(value = Provider.class, resolution = Resolution.OPTIONAL)
 public class SLF4JProvider extends Provider {
 
     private static final LoggerContextFactory CONTEXT_FACTORY = new SLF4JLoggerContextFactory();
     private static final ThreadContextMap THREAD_CONTEXT_MAP = new MDCContextMap();
 
     public SLF4JProvider() {
-        super(15, CURRENT_VERSION);
+        super(15, CURRENT_VERSION, SLF4JLoggerContextFactory.class, MDCContextMap.class);
     }
 
     @Override

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/ContextDataAsEntryListSerializer.java
Patch:
@@ -21,7 +21,6 @@
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.ser.std.StdSerializer;
 import java.io.IOException;
-import java.util.Map;
 import org.apache.logging.log4j.util.BiConsumer;
 import org.apache.logging.log4j.util.ReadOnlyStringMap;
 
@@ -35,7 +34,7 @@ public class ContextDataAsEntryListSerializer extends StdSerializer<ReadOnlyStri
     private static final long serialVersionUID = 1L;
 
     protected ContextDataAsEntryListSerializer() {
-        super(Map.class, false);
+        super(ReadOnlyStringMap.class);
     }
 
     @Override

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/ContextDataSerializer.java
Patch:
@@ -21,7 +21,6 @@
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.ser.std.StdSerializer;
 import java.io.IOException;
-import java.util.Map;
 import org.apache.logging.log4j.util.ReadOnlyStringMap;
 import org.apache.logging.log4j.util.TriConsumer;
 
@@ -35,7 +34,7 @@ public class ContextDataSerializer extends StdSerializer<ReadOnlyStringMap> {
     private static final long serialVersionUID = 1L;
 
     protected ContextDataSerializer() {
-        super(Map.class, false);
+        super(ReadOnlyStringMap.class);
     }
 
     @Override

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/Log4jXmlModule.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.logging.log4j.core.jackson;
 
 import com.fasterxml.jackson.dataformat.xml.JacksonXmlModule;
-import org.apache.logging.log4j.core.jackson.Initializers.SetupContextInitializer;
+import org.apache.logging.log4j.core.jackson.Initializers.SetupContextAsEntryListInitializer;
 import org.apache.logging.log4j.core.jackson.Initializers.SimpleModuleInitializer;
 
 /**
@@ -43,6 +43,6 @@ final class Log4jXmlModule extends JacksonXmlModule {
     public void setupModule(final SetupContext context) {
         // Calling super is a MUST!
         super.setupModule(context);
-        new SetupContextInitializer().setupModule(context, includeStacktrace, stacktraceAsString);
+        new SetupContextAsEntryListInitializer().setupModule(context, includeStacktrace, stacktraceAsString);
     }
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/Log4jYamlModule.java
Patch:
@@ -18,8 +18,8 @@
 
 import com.fasterxml.jackson.core.Version;
 import com.fasterxml.jackson.databind.module.SimpleModule;
+import org.apache.logging.log4j.core.jackson.Initializers.SetupContextAsEntryListInitializer;
 import org.apache.logging.log4j.core.jackson.Initializers.SetupContextInitializer;
-import org.apache.logging.log4j.core.jackson.Initializers.SetupContextJsonInitializer;
 import org.apache.logging.log4j.core.jackson.Initializers.SimpleModuleInitializer;
 
 /**
@@ -53,9 +53,9 @@ public void setupModule(final SetupContext context) {
         // Calling super is a MUST!
         super.setupModule(context);
         if (encodeThreadContextAsList) {
-            new SetupContextInitializer().setupModule(context, includeStacktrace, stacktraceAsString);
+            new SetupContextAsEntryListInitializer().setupModule(context, includeStacktrace, stacktraceAsString);
         } else {
-            new SetupContextJsonInitializer().setupModule(context, includeStacktrace, stacktraceAsString);
+            new SetupContextInitializer().setupModule(context, includeStacktrace, stacktraceAsString);
         }
     }
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/MapEntry.java
Patch:
@@ -32,7 +32,7 @@
  * </p>
  */
 @JsonPropertyOrder({"key", "value"})
-final class MapEntry {
+public final class MapEntry {
 
     @JsonProperty
     @JacksonXmlProperty(isAttribute = true)

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/package-info.java
Patch:
@@ -19,7 +19,7 @@
  * library.
  */
 @Export
-@Version("2.21.0")
+@Version("2.24.0")
 package org.apache.logging.log4j.core.jackson;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileManager.java
Patch:
@@ -43,8 +43,7 @@
  * memory and writes to this memory region.
  * <p>
  *
- * @see <a href="http://www.codeproject.com/Tips/683614/Things-to-Know-about-Memory-Mapped-File-in-Java">
- *      http://www.codeproject.com/Tips/683614/Things-to-Know-about-Memory-Mapped-File-in-Java</a>
+ * @see <a href="https://www.codeproject.com/Tips/683614/Things-to-Know-about-Memory-Mapped-File-in-Java">Things to Know about Memory Mapped File in Java</a>
  * @see <a href="https://bugs.openjdk.org/browse/JDK-6893654">JDK-6893654</a>
  * @see <a href="https://bugs.openjdk.org/browse/JDK-4724038">JDK-4724038</a>
  * @see <a href="https://stackoverflow.com/questions/9261316/memory-mapped-mappedbytebuffer-or-direct-bytebuffer-for-db-implementation">Memory-Mapped MappedByteBuffer or Direct ByteBuffer for DB Implementation?</a>

File: log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java
Patch:
@@ -29,7 +29,7 @@
  * values.
  * </p>
  *
- * @see <a href="https://tools.ietf.org/html/rfc5424">RFC 5424</a>
+ * @see <a href="https://datatracker.ietf.org/doc/html/rfc5424">RFC 5424</a>
  */
 @AsynchronouslyFormattable
 public class StructuredDataMessage extends MapMessage<StructuredDataMessage, String> {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileManager.java
Patch:
@@ -47,7 +47,7 @@
  *      http://www.codeproject.com/Tips/683614/Things-to-Know-about-Memory-Mapped-File-in-Java</a>
  * @see <a href="https://bugs.openjdk.org/browse/JDK-6893654">JDK-6893654</a>
  * @see <a href="https://bugs.openjdk.org/browse/JDK-4724038">JDK-4724038</a>
- * @see <a href="https://stackoverflow.com/q/9261316/11748454">Memory-Mapped MappedByteBuffer or Direct ByteBuffer for DB Implementation?</a>
+ * @see <a href="https://stackoverflow.com/questions/9261316/memory-mapped-mappedbytebuffer-or-direct-bytebuffer-for-db-implementation">Memory-Mapped MappedByteBuffer or Direct ByteBuffer for DB Implementation?</a>
  *
  * @since 2.1
  */

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Wraps messages that are formatted according to RFC 5425.
  *
- * @see <a href="https://tools.ietf.org/html/rfc5425">RFC 5425</a>
+ * @see <a href="https://datatracker.ietf.org/doc/html/rfc5425">RFC 5425</a>
  */
 public class TlsSyslogFrame {
     private final String message;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/Rfc1349TrafficClass.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.logging.log4j.core.net;
 
 /**
- * Enumerates the <a href="https://tools.ietf.org/html/rfc1349">RFC 1349</a> TOS field.
+ * Enumerates the <a href="https://datatracker.ietf.org/doc/html/rfc1349">RFC 1349</a> TOS field.
  *
  * <ul>
  * <li><code>IPTOS_LOWCOST (0x02)</code></li>

File: log4j-core/src/main/java/org/apache/logging/log4j/core/time/Instant.java
Patch:
@@ -23,7 +23,7 @@
  * Models a point in time, suitable for event timestamps.
  * <p>
  * Provides methods for obtaining high precision time information similar to the
- * <a href="https://docs.oracle.com/javase/9/docs/api/java/time/Instant.html">Instant</a> class introduced in Java 8,
+ * <a href="https://docs.oracle.com/javase/8/docs/api/java/time/Instant.html">Instant</a> class introduced in Java 8,
  * while also supporting the legacy millisecond precision API.
  * </p><p>
  * Depending on the platform, time sources ({@link Clock} implementations) may produce high precision or millisecond

File: log4j-core/src/main/java/org/apache/logging/log4j/core/time/MutableInstant.java
Patch:
@@ -35,7 +35,7 @@
 
 /**
  * An instantaneous point on the time line, used for high-precision log event timestamps.
- * Modeled on <a href="https://docs.oracle.com/javase/9/docs/api/index.html?java/time/class-use/Instant.html">java.time.Instant</a>,
+ * Modeled on <a href="https://docs.oracle.com/javase/8/docs/api/java/time/Instant.html">java.time.Instant</a>,
  * except that this version is mutable to prevent allocating temporary objects that need to be garbage-collected later.
  * <p>
  * Instances of this class are <em>not</em> thread-safe and should not be shared between threads.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/TypeUtil.java
Patch:
@@ -28,7 +28,7 @@
 
 /**
  * Utility class for working with Java {@link Type}s and derivatives. This class is adapted heavily from the
- * <a href="https://spring.io/projects/spring-framework">Spring Framework</a>, specifically the
+ * <a href="https://spring.io/projects/spring-framework/">Spring Framework</a>, specifically the
  * <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/util/TypeUtils.html">TypeUtils</a>
  * class.
  *

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileManager.java
Patch:
@@ -47,9 +47,7 @@
  *      http://www.codeproject.com/Tips/683614/Things-to-Know-about-Memory-Mapped-File-in-Java</a>
  * @see <a href="https://bugs.openjdk.org/browse/JDK-6893654">JDK-6893654</a>
  * @see <a href="https://bugs.openjdk.org/browse/JDK-4724038">JDK-4724038</a>
- * @see <a
- *      href="http://stackoverflow.com/questions/9261316/memory-mapped-mappedbytebuffer-or-direct-bytebuffer-for-db-implementation">
- *      http://stackoverflow.com/questions/9261316/memory-mapped-mappedbytebuffer-or-direct-bytebuffer-for-db-implementation</a>
+ * @see <a href="https://stackoverflow.com/q/9261316/11748454">Memory-Mapped MappedByteBuffer or Direct ByteBuffer for DB Implementation?</a>
  *
  * @since 2.1
  */

File: log4j-api/src/main/java/org/apache/logging/log4j/package-info.java
Patch:
@@ -29,7 +29,7 @@
  *     used through the {@link org.apache.logging.log4j.ThreadContext} class.
  * </p>
  *
- * @see <a href="http://logging.apache.org/log4j/2.x/manual/api.html">Log4j 2 API manual</a>
+ * @see <a href="https://logging.apache.org/log4j/2.x/manual/api.html">Log4j 2 API manual</a>
  */
 @Export
 @Version("2.24.0")

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/DeleteAction.java
Patch:
@@ -50,7 +50,7 @@ public class DeleteAction extends AbstractPathAction {
      *            means that only the starting file is visited, unless denied by the security manager. A value of
      *            MAX_VALUE may be used to indicate that all levels should be visited.
      * @param testMode if true, files are not deleted but instead a message is printed to the <a
-     *            href="http://logging.apache.org/log4j/2.x/manual/configuration.html#StatusMessages">status logger</a>
+     *            href="https://logging.apache.org/log4j/2.x/manual/status-logger.html">status logger</a>
      *            at INFO level. Users can use this to do a dry run to test if their configuration works as expected.
      * @param sorter sorts
      * @param pathConditions an array of path filters (if more than one, they all need to accept a path before it is

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/DeletingVisitor.java
Patch:
@@ -44,7 +44,7 @@ public class DeletingVisitor extends SimpleFileVisitor<Path> {
      * @param basePath used to relativize paths
      * @param pathConditions objects that need to confirm whether a file can be deleted
      * @param testMode if true, files are not deleted but instead a message is printed to the <a
-     *            href="http://logging.apache.org/log4j/2.x/manual/configuration.html#StatusMessages">status logger</a>
+     *            href="https://logging.apache.org/log4j/2.x/manual/status-logger.html">status logger</a>
      *            at INFO level. Users can use this to do a dry run to test if their configuration works as expected.
      */
     public DeletingVisitor(

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/SslConfiguration.java
Patch:
@@ -217,7 +217,7 @@ private KeyManagerFactory loadKeyManagerFactory() throws KeyStoreConfigurationEx
     /**
      * Creates an SslConfiguration from a KeyStoreConfiguration and a TrustStoreConfiguration.
      *
-     * @param protocol The protocol, see http://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#SSLContext
+     * @param protocol The protocol, see <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#SSLContext">SSLContext Algorithms</a>
      * @param keyStoreConfig The KeyStoreConfiguration.
      * @param trustStoreConfig The TrustStoreConfiguration.
      * @return a new SslConfiguration
@@ -235,7 +235,7 @@ public static SslConfiguration createSSLConfiguration(
     /**
      * Creates an SslConfiguration from a KeyStoreConfiguration and a TrustStoreConfiguration.
      *
-     * @param protocol The protocol, see http://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#SSLContext
+     * @param protocol The protocol, see <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#SSLContext">SSLContext Algorithms</a>
      * @param keyStoreConfig The KeyStoreConfiguration.
      * @param trustStoreConfig The TrustStoreConfiguration.
      * @param verifyHostName whether or not to perform host name verification

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/TypeUtil.java
Patch:
@@ -28,8 +28,8 @@
 
 /**
  * Utility class for working with Java {@link Type}s and derivatives. This class is adapted heavily from the
- * <a href="http://projects.spring.io/spring-framework/">Spring Framework</a>, specifically the
- * <a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/TypeUtils.html">TypeUtils</a>
+ * <a href="https://spring.io/projects/spring-framework">Spring Framework</a>, specifically the
+ * <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/util/TypeUtils.html">TypeUtils</a>
  * class.
  *
  * @see java.lang.reflect.Type

File: log4j-jakarta-web/src/main/java/org/apache/logging/log4j/web/package-info.java
Patch:
@@ -19,7 +19,7 @@
  * The classes in this package are responsible for properly initializing and deinitializing Log4j in a Java EE web
  * application.
  *
- * @see <a href="http://logging.apache.org/log4j/2.x/manual/webapp.html">Using Log4j 2 in Web Applications</a>
+ * @see <a href="https://logging.apache.org/log4j/2.x/manual/webapp.html">Using Log4j 2 in Web Applications</a>
  */
 @Export
 @Version("2.20.1")

File: log4j-web/src/main/java/org/apache/logging/log4j/web/package-info.java
Patch:
@@ -19,7 +19,7 @@
  * The classes in this package are responsible for properly initializing and deinitializing Log4j in a Java EE web
  * application.
  *
- * @see <a href="http://logging.apache.org/log4j/2.x/manual/webapp.html">Using Log4j 2 in Web Applications</a>
+ * @see <a href="https://logging.apache.org/log4j/2.x/manual/webapp.html">Using Log4j 2 in Web Applications</a>
  */
 @Export
 @Version("2.20.1")

File: log4j-api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java
Patch:
@@ -291,7 +291,7 @@ public static Config getInstance() {
 
         private static boolean readDebugEnabled(final Map<String, Object> normalizedProperties) {
             final String debug = PropertiesUtilsDouble.readProperty(normalizedProperties, DEBUG_PROPERTY_NAME);
-            return debug != null;
+            return debug != null && !"false".equalsIgnoreCase(debug);
         }
 
         private static int readBufferCapacity(final Map<String, Object> normalizedProperties) {

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/InitializesThreadContext.java
Patch:
@@ -35,5 +35,5 @@
 @Documented
 @Inherited
 @ExtendWith(ThreadContextInitializer.class)
-@ResourceLock(value = Resources.THREAD_CONTEXT, mode = ResourceAccessMode.READ_WRITE)
+@ResourceLock(value = Log4jStaticResources.THREAD_CONTEXT, mode = ResourceAccessMode.READ_WRITE)
 public @interface InitializesThreadContext {}

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/UsingThreadContextMap.java
Patch:
@@ -39,5 +39,5 @@
 @Inherited
 @ExtendWith(ThreadContextMapExtension.class)
 @ReadsSystemProperty
-@ResourceLock(value = Resources.THREAD_CONTEXT, mode = ResourceAccessMode.READ)
+@ResourceLock(value = Log4jStaticResources.THREAD_CONTEXT, mode = ResourceAccessMode.READ)
 public @interface UsingThreadContextMap {}

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/package-info.java
Patch:
@@ -15,8 +15,10 @@
  * limitations under the license.
  */
 @Export
-@Version("2.23.1")
+@Version("2.24.0")
+@BaselineIgnore("2.24.0")
 package org.apache.logging.log4j.test.junit;
 
+import aQute.bnd.annotation.baseline.BaselineIgnore;
 import org.osgi.annotation.bundle.Export;
 import org.osgi.annotation.versioning.Version;

File: log4j-api-test/src/test/java/org/apache/logging/log4j/AbstractLoggerTest.java
Patch:
@@ -34,7 +34,7 @@
 import org.apache.logging.log4j.spi.MessageFactory2Adapter;
 import org.apache.logging.log4j.status.StatusData;
 import org.apache.logging.log4j.status.StatusLogger;
-import org.apache.logging.log4j.test.junit.Resources;
+import org.apache.logging.log4j.test.junit.Log4jStaticResources;
 import org.apache.logging.log4j.test.junit.StatusLoggerLevel;
 import org.apache.logging.log4j.util.Constants;
 import org.apache.logging.log4j.util.MessageSupplier;
@@ -45,7 +45,7 @@
 import org.junitpioneer.jupiter.SetSystemProperty;
 
 @StatusLoggerLevel("WARN")
-@ResourceLock(value = Resources.MARKER_MANAGER, mode = ResourceAccessMode.READ)
+@ResourceLock(value = Log4jStaticResources.MARKER_MANAGER, mode = ResourceAccessMode.READ)
 @SetSystemProperty(key = "log4j2.status.entries", value = "200")
 @SetSystemProperty(key = "log4j2.StatusLogger.level", value = "WARN")
 public class AbstractLoggerTest {

File: log4j-api-test/src/test/java/org/apache/logging/log4j/LoggerTest.java
Patch:
@@ -41,7 +41,7 @@
 import org.apache.logging.log4j.message.StructuredDataMessage;
 import org.apache.logging.log4j.spi.MessageFactory2Adapter;
 import org.apache.logging.log4j.test.TestLogger;
-import org.apache.logging.log4j.test.junit.Resources;
+import org.apache.logging.log4j.test.junit.Log4jStaticResources;
 import org.apache.logging.log4j.test.junit.UsingThreadContextMap;
 import org.apache.logging.log4j.util.Strings;
 import org.apache.logging.log4j.util.Supplier;
@@ -51,7 +51,7 @@
 import org.junit.jupiter.api.parallel.ResourceLock;
 import org.junitpioneer.jupiter.ReadsSystemProperty;
 
-@ResourceLock(value = Resources.MARKER_MANAGER, mode = ResourceAccessMode.READ)
+@ResourceLock(value = Log4jStaticResources.MARKER_MANAGER, mode = ResourceAccessMode.READ)
 @ReadsSystemProperty
 public class LoggerTest {
 

File: log4j-api-test/src/test/java/org/apache/logging/log4j/MarkerTest.java
Patch:
@@ -21,13 +21,13 @@
 import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-import org.apache.logging.log4j.test.junit.Resources;
+import org.apache.logging.log4j.test.junit.Log4jStaticResources;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.parallel.ResourceAccessMode;
 import org.junit.jupiter.api.parallel.ResourceLock;
 
-@ResourceLock(value = Resources.MARKER_MANAGER, mode = ResourceAccessMode.READ_WRITE)
+@ResourceLock(value = Log4jStaticResources.MARKER_MANAGER, mode = ResourceAccessMode.READ_WRITE)
 public class MarkerTest {
 
     @BeforeEach

File: log4j-api-test/src/test/java/org/apache/logging/log4j/TestProvider.java
Patch:
@@ -24,6 +24,6 @@
  */
 public class TestProvider extends Provider {
     public TestProvider() {
-        super(0, "2.6.0", TestLoggerContextFactory.class);
+        super(5, CURRENT_VERSION, TestLoggerContextFactory.class);
     }
 }

File: log4j-api/src/main/java/org/apache/logging/log4j/internal/map/UnmodifiableArrayBackedMap.java
Patch:
@@ -177,12 +177,12 @@ static UnmodifiableArrayBackedMap getInstance(Object[] backingArray) {
 
     private int numEntries;
 
-    private UnmodifiableArrayBackedMap(int capacity) {
+    protected UnmodifiableArrayBackedMap(int capacity) {
         this.backingArray = new Object[capacity * 2 + 1];
         this.backingArray[0] = 0;
     }
 
-    private UnmodifiableArrayBackedMap(Object[] backingArray) {
+    protected UnmodifiableArrayBackedMap(Object[] backingArray) {
         this.numEntries = (backingArray == null ? 0 : (int) backingArray[0]);
         this.backingArray = backingArray;
     }

File: log4j-api/src/main/java/org/apache/logging/log4j/message/package-info.java
Patch:
@@ -20,9 +20,9 @@
  */
 @Export
 /**
- * Bumped to 2.22.0, since FormattedMessage behavior changed.
+ * Bumped to 2.24.0, since FormattedMessage behavior changed.
  */
-@Version("2.22.0")
+@Version("2.24.0")
 package org.apache.logging.log4j.message;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-api/src/main/java/org/apache/logging/log4j/package-info.java
Patch:
@@ -32,7 +32,7 @@
  * @see <a href="http://logging.apache.org/log4j/2.x/manual/api.html">Log4j 2 API manual</a>
  */
 @Export
-@Version("2.20.2")
+@Version("2.24.0")
 package org.apache.logging.log4j;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/NoOpThreadContextMap.java
Patch:
@@ -24,7 +24,10 @@
  * {@code disableThreadContext} is {@code true}. This implementation does nothing.
  *
  * @since 2.7
+ * @deprecated since 2.24.0. Return the {@value Provider#NO_OP_CONTEXT_MAP} constant in
+ * {@link Provider#getThreadContextMap()} instead.
  */
+@Deprecated
 public class NoOpThreadContextMap implements ThreadContextMap {
     @Override
     public void clear() {}

File: log4j-api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java
Patch:
@@ -530,7 +530,7 @@ private static final class InstanceHolder {
                 StatusLogger.class.getSimpleName(),
                 ParameterizedNoReferenceMessageFactory.INSTANCE,
                 Config.getInstance(),
-                new StatusConsoleListener(Config.getInstance().fallbackListenerLevel));
+                new StatusConsoleListener(requireNonNull(Config.getInstance().fallbackListenerLevel)));
     }
 
     /**

File: log4j-api/src/main/java/org/apache/logging/log4j/util/BiConsumer.java
Patch:
@@ -24,12 +24,14 @@
  * @see ReadOnlyStringMap
  * @since 2.7
  */
-public interface BiConsumer<K, V> {
+@FunctionalInterface
+public interface BiConsumer<K, V> extends java.util.function.BiConsumer<K, V> {
 
     /**
      * Performs the operation given the specified arguments.
      * @param k the first input argument
      * @param v the second input argument
      */
+    @Override
     void accept(K k, V v);
 }

File: log4j-api/src/main/java/org/apache/logging/log4j/util/LambdaUtil.java
Patch:
@@ -35,7 +35,6 @@ private LambdaUtil() {}
      * @return an array containing the results of evaluating the lambda expressions (or {@code null} if the suppliers
      *         array was {@code null}
      */
-    @SuppressWarnings("deprecation")
     public static Object[] getAll(final Supplier<?>... suppliers) {
         if (suppliers == null) {
             return null;
@@ -54,7 +53,6 @@ public static Object[] getAll(final Supplier<?>... suppliers) {
      * @return the results of evaluating the lambda expression (or {@code null} if the supplier
      *         was {@code null}
      */
-    @SuppressWarnings("deprecation")
     public static Object get(final Supplier<?> supplier) {
         if (supplier == null) {
             return null;
@@ -83,7 +81,6 @@ public static Message get(final MessageSupplier supplier) {
      * @return the Message resulting from evaluating the lambda expression or the Message created by the factory for
      * supplied values that are not of type Message
      */
-    @SuppressWarnings("deprecation")
     public static Message getMessage(final Supplier<?> supplier, final MessageFactory messageFactory) {
         if (supplier == null) {
             return null;

File: log4j-api/src/main/java/org/apache/logging/log4j/util/MessageSupplier.java
Patch:
@@ -33,12 +33,14 @@
  *
  * @since 2.4
  */
-public interface MessageSupplier {
+@FunctionalInterface
+public interface MessageSupplier extends Supplier<Message> {
 
     /**
      * Gets a Message.
      *
      * @return a Message
      */
+    @Override
     Message get();
 }

File: log4j-api/src/main/java/org/apache/logging/log4j/util/Strings.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * <em>Consider this class private.</em>
  *
- * @see <a href="http://commons.apache.org/proper/commons-lang/">Apache Commons Lang</a>
+ * @see <a href="https://commons.apache.org/proper/commons-lang/index.html">Apache Commons Lang</a>
  */
 @InternalApi
 public final class Strings {
@@ -52,8 +52,7 @@ public final class Strings {
      * OS-dependent line separator, defaults to {@code "\n"} if the system property {@code ""line.separator"} cannot be
      * read.
      */
-    public static final String LINE_SEPARATOR =
-            SystemPropertiesPropertySource.getSystemProperty("line.separator", "\n");
+    public static final String LINE_SEPARATOR = System.lineSeparator();
 
     /**
      * Returns a double quoted string.

File: log4j-api/src/main/java/org/apache/logging/log4j/util/Supplier.java
Patch:
@@ -31,14 +31,15 @@
  *
  * @since 2.4
  */
+@FunctionalInterface
 @InternalApi
-@Deprecated
-public interface Supplier<T> {
+public interface Supplier<T> extends java.util.function.Supplier<T> {
 
     /**
      * Gets a value.
      *
      * @return a value
      */
+    @Override
     T get();
 }

File: log4j-api/src/main/java/org/apache/logging/log4j/util/package-info.java
Patch:
@@ -20,7 +20,7 @@
  * There are no guarantees for binary or logical compatibility in this package.
  */
 @Export
-@Version("2.22.0")
+@Version("2.24.0")
 package org.apache.logging.log4j.util;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/EventParameterMemoryLeakTest.java
Patch:
@@ -39,9 +39,8 @@ public class EventParameterMemoryLeakTest {
 
     @BeforeAll
     public static void beforeClass() {
-        System.setProperty("log4j2.enable.threadlocals", "true");
-        System.setProperty("log4j2.enable.direct.encoders", "true");
-        System.setProperty("log4j2.is.webapp", "false");
+        System.setProperty("log4j2.enableThreadlocals", "true");
+        System.setProperty("log4j2.enableDirectEncoders", "true");
         System.setProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY, "EventParameterMemoryLeakTest.xml");
     }
 

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/routing/JsonRoutingAppender2Test.java
Patch:
@@ -34,7 +34,7 @@
  */
 public class JsonRoutingAppender2Test {
     private static final String CONFIG = "log4j-routing2.json";
-    private static final String LOG_FILENAME = "target/rolling1/rollingtest-Unknown.log";
+    private static final String LOG_FILENAME = "target/rolling1/routingtest2-Unknown.log";
 
     private final LoggerContextRule loggerContextRule = new LoggerContextRule(CONFIG);
 

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigErrorOnFormat.java
Patch:
@@ -42,15 +42,15 @@ public class AsyncLoggerConfigErrorOnFormat {
 
     @BeforeClass
     public static void beforeClass() {
-        System.setProperty("log4j2.is.webapp", "false");
+        System.setProperty("log4j2.enableThreadlocals", "true");
         System.setProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY, "AsyncLoggerConfigErrorOnFormat.xml");
         // Log4jLogEvent.toString invokes message.toString
         System.setProperty("log4j2.logEventFactory", DefaultLogEventFactory.class.getName());
     }
 
     @AfterClass
     public static void afterClass() {
-        System.clearProperty("log4j2.is.webapp");
+        System.clearProperty("log4j2.enableThreadlocals");
         System.clearProperty("log4j2.logEventFactory");
     }
 

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigTest.java
Patch:
@@ -100,7 +100,7 @@ public void testSingleFilterInvocation() {
                 .withLoggerName(FQCN)
                 .withConfig(configuration)
                 .withLevel(Level.INFO)
-                .withtFilter(filter)
+                .withFilter(filter)
                 .build();
         final Appender appender = mock(Appender.class);
         when(appender.isStarted()).thenReturn(true);

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/async/AsyncThreadContextCopyOnWriteTest.java
Patch:
@@ -27,14 +27,14 @@
 // ThreadContext initialization will result in static final fields being set in various components.
 // To use a different ThreadContextMap, the test needs to be run in a new JVM.
 @Tag(Tags.ASYNC_LOGGERS)
-public class AsyncThreadContextCopyOnWriteTest extends AbstractAsyncThreadContextTestBase {
+class AsyncThreadContextCopyOnWriteTest extends AbstractAsyncThreadContextTestBase {
 
     @TempLoggingDir
     private static Path loggingPath;
 
     @ParameterizedTest
     @EnumSource
-    public void testAsyncLogWritesToLog(Mode asyncMode) throws Exception {
+    void testAsyncLogWritesToLog(Mode asyncMode) throws Exception {
         testAsyncLogWritesToLog(ContextImpl.COPY_ON_WRITE, asyncMode, loggingPath);
     }
 }

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/async/AsyncThreadContextDefaultTest.java
Patch:
@@ -27,14 +27,14 @@
 // ThreadContext initialization will result in static final fields being set in various components.
 // To use a different ThreadContextMap, the test needs to be run in a new JVM.
 @Tag(Tags.ASYNC_LOGGERS)
-public class AsyncThreadContextDefaultTest extends AbstractAsyncThreadContextTestBase {
+class AsyncThreadContextDefaultTest extends AbstractAsyncThreadContextTestBase {
 
     @TempLoggingDir
     private static Path loggingPath;
 
     @ParameterizedTest
     @EnumSource
-    public void testAsyncLogWritesToLog(Mode asyncMode) throws Exception {
+    void testAsyncLogWritesToLog(Mode asyncMode) throws Exception {
         testAsyncLogWritesToLog(ContextImpl.WEBAPP, asyncMode, loggingPath);
     }
 }

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/async/AsyncThreadContextGarbageFreeTest.java
Patch:
@@ -27,14 +27,14 @@
 // ThreadContext initialization will result in static final fields being set in various components.
 // To use a different ThreadContextMap, the test needs to be run in a new JVM.
 @Tag(Tags.ASYNC_LOGGERS)
-public class AsyncThreadContextGarbageFreeTest extends AbstractAsyncThreadContextTestBase {
+class AsyncThreadContextGarbageFreeTest extends AbstractAsyncThreadContextTestBase {
 
     @TempLoggingDir
     private static Path loggingPath;
 
     @ParameterizedTest
     @EnumSource
-    public void testAsyncLogWritesToLog(Mode asyncMode) throws Exception {
+    void testAsyncLogWritesToLog(final Mode asyncMode) throws Exception {
         testAsyncLogWritesToLog(ContextImpl.GARBAGE_FREE, asyncMode, loggingPath);
     }
 }

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/InMemoryAdvertiser.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.net.Advertiser;
 
-@Plugin(name = "memory", category = Core.CATEGORY_NAME, elementType = "advertiser", printObject = false)
+@Plugin(name = "Memory", category = Core.CATEGORY_NAME, elementType = "advertiser", printObject = false)
 public class InMemoryAdvertiser implements Advertiser {
     private static Map<Object, Map<String, String>> properties = new HashMap<>();
 

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/LoggerConfigTest.java
Patch:
@@ -126,7 +126,7 @@ public void testSingleFilterInvocation() {
                 .withLoggerName(FQCN)
                 .withConfig(configuration)
                 .withLevel(Level.INFO)
-                .withtFilter(filter)
+                .withFilter(filter)
                 .build();
         final Appender appender = mock(Appender.class);
         when(appender.isStarted()).thenReturn(true);

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/impl/NestedLoggingFromThrowableMessageTest.java
Patch:
@@ -47,7 +47,7 @@ public class NestedLoggingFromThrowableMessageTest {
     public static void beforeClass() {
         file1.delete();
         file2.delete();
-        System.setProperty("log4j2.is.webapp", "false");
+        System.setProperty("log4j2.enableThreadlocals", "true");
     }
 
     @Rule

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/impl/ThreadContextDataInjectorTest.java
Patch:
@@ -91,7 +91,7 @@ private void testContextDataInjector() {
                         : readOnlythreadContextMap.getClass().getName(),
                 is(equalTo(readOnlythreadContextMapClassName)));
 
-        final ContextDataInjector contextDataInjector = createInjector();
+        final ContextDataInjector contextDataInjector = createInjector(true);
         final StringMap stringMap = contextDataInjector.injectContextData(null, new SortedArrayStringMap());
 
         assertThat("thread context map", ThreadContext.getContext(), allOf(hasEntry("foo", "bar"), not(hasKey("baz"))));

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/XmlLayoutTest.java
Patch:
@@ -150,8 +150,8 @@ private void testAllFeatures(
         final String str = layout.toSerializable(expected);
         // System.out.println(str);
         assertEquals(str, !compact, str.contains("\n"));
-        assertEquals(str, includeSource, str.contains("Source"));
-        assertEquals(str, includeContext, str.contains("ContextMap"));
+        assertEquals(str, includeSource, str.contains("<Source"));
+        assertEquals(str, includeContext, str.contains("<ContextMap"));
         final Log4jLogEvent actual = new Log4jXmlObjectMapper().readValue(str, Log4jLogEvent.class);
         LogEventFixtures.assertEqualLogEvents(expected, actual, includeSource, includeContext, includeStacktrace);
         if (includeContext) {

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/pattern/DatePatternConverterWithThreadLocalsTest.java
Patch:
@@ -19,8 +19,7 @@
 import org.apache.logging.log4j.test.junit.SetTestProperty;
 import org.apache.logging.log4j.test.junit.UsingTestProperties;
 
-@SetTestProperty(key = "log4j2.is.webapp", value = "false")
-@SetTestProperty(key = "log4j2.enable.threadlocals", value = "true")
+@SetTestProperty(key = "log4j2.enableThreadlocals", value = "true")
 @UsingTestProperties
 class DatePatternConverterWithThreadLocalsTest extends DatePatternConverterTestBase {
 

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/util/ShutdownCallbackRegistryTest.java
Patch:
@@ -39,14 +39,14 @@ public class ShutdownCallbackRegistryTest {
 
     @BeforeAll
     public static void setUpClass() {
-        System.setProperty("log4j2.is.webapp", "false");
+        System.setProperty("log4j2.shutdownHookEnabled", "true");
         System.setProperty(ShutdownCallbackRegistry.SHUTDOWN_CALLBACK_REGISTRY, Registry.class.getName());
     }
 
     @AfterAll
     public static void afterClass() {
         System.clearProperty(ShutdownCallbackRegistry.SHUTDOWN_CALLBACK_REGISTRY);
-        System.clearProperty("log4j2.is.webapp");
+        System.clearProperty("log4j2.shutdownHookEnabled");
     }
 
     @Test

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/util/WatchHttpTest.java
Patch:
@@ -91,7 +91,7 @@ public void testWatchManager(final WireMockRuntimeInfo info) throws Exception {
         try {
             watchManager.watch(
                     new Source(url), new HttpWatcher(configuration, null, listeners, previous.getTimeInMillis()));
-            final String str = queue.poll(2, TimeUnit.SECONDS);
+            final String str = queue.poll(3, TimeUnit.SECONDS);
             assertNotNull("File change not detected", str);
         } finally {
             watchManager.stop();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FailoversPlugin.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * The array of failover Appenders.
  */
-@Plugin(name = "failovers", category = Core.CATEGORY_NAME)
+@Plugin(name = "Failovers", category = Core.CATEGORY_NAME)
 public final class FailoversPlugin {
 
     private static final Logger LOGGER = StatusLogger.getLogger();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileManager.java
Patch:
@@ -45,8 +45,8 @@
  *
  * @see <a href="http://www.codeproject.com/Tips/683614/Things-to-Know-about-Memory-Mapped-File-in-Java">
  *      http://www.codeproject.com/Tips/683614/Things-to-Know-about-Memory-Mapped-File-in-Java</a>
- * @see <a href="http://bugs.java.com/view_bug.do?bug_id=6893654">http://bugs.java.com/view_bug.do?bug_id=6893654</a>
- * @see <a href="http://bugs.java.com/view_bug.do?bug_id=4724038">http://bugs.java.com/view_bug.do?bug_id=4724038</a>
+ * @see <a href="https://bugs.openjdk.org/browse/JDK-6893654">JDK-6893654</a>
+ * @see <a href="https://bugs.openjdk.org/browse/JDK-4724038">JDK-4724038</a>
  * @see <a
  *      href="http://stackoverflow.com/questions/9261316/memory-mapped-mappedbytebuffer-or-direct-bytebuffer-for-db-implementation">
  *      http://stackoverflow.com/questions/9261316/memory-mapped-mappedbytebuffer-or-direct-bytebuffer-for-db-implementation</a>

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Log4j 2 Appenders.
  */
 @Export
-@Version("2.20.2")
+@Version("2.20.3")
 package org.apache.logging.log4j.core.appender;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ScriptCondition.java
Patch:
@@ -89,8 +89,8 @@ public List<PathWithAttributes> selectFilesToDelete(
      *            <li>pathList - a {@code java.util.List} containing {@link org.apache.logging.log4j.core.appender.rolling.action.PathWithAttributes} objects. (The script is
      *            free to modify and return this list.)</li>
      *            <li>substitutor - a {@link org.apache.logging.log4j.core.lookup.StrSubstitutor} that can be used to look up variables embedded in the base
-     *            dir or other properties
-     *            <li>statusLogger - the {@link StatusLogger} that can be used to log events during script execution
+     *            dir or other properties</li>
+     *            <li>statusLogger - the {@link StatusLogger} that can be used to log events during script execution</li>
      *            <li>any properties declared in the configuration</li>
      *            </ul>
      * @param configuration the configuration

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Support classes for the Rolling File Appender.
  */
 @Export
-@Version("2.20.2")
+@Version("2.24.0")
 package org.apache.logging.log4j.core.appender.rolling.action;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java
Patch:
@@ -67,7 +67,7 @@
  * with immediateFlush=false, there will never be any items left in the buffer;
  * all log events will all be written to disk in a very efficient manner.
  */
-@Plugin(name = "asyncLogger", category = Node.CATEGORY, printObject = true)
+@Plugin(name = "AsyncLogger", category = Node.CATEGORY, printObject = true)
 public class AsyncLoggerConfig extends LoggerConfig {
 
     @PluginBuilderFactory
@@ -320,7 +320,7 @@ protected static boolean includeLocation(final String includeLocationConfigValue
     /**
      * An asynchronous root Logger.
      */
-    @Plugin(name = "asyncRoot", category = Core.CATEGORY_NAME, printObject = true)
+    @Plugin(name = "AsyncRoot", category = Core.CATEGORY_NAME, printObject = true)
     public static class RootLogger extends LoggerConfig {
 
         @PluginBuilderFactory

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java
Patch:
@@ -121,7 +121,9 @@ public void setValues(
         this.marker = aMarker;
         this.fqcn = theFqcn;
         this.location = aLocation;
-        this.contextData = mutableContextData;
+        if (mutableContextData != null) {
+            this.contextData = mutableContextData;
+        }
         this.contextStack = aContextStack;
         this.asyncLogger = anAsyncLogger;
         this.populated = true;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Provides Asynchronous Logger classes and interfaces for low-latency logging.
  */
 @Export
-@Version("2.23.0")
+@Version("2.24.0")
 package org.apache.logging.log4j.core.async;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppendersPlugin.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * An Appender container.
  */
-@Plugin(name = "appenders", category = Core.CATEGORY_NAME)
+@Plugin(name = "Appenders", category = Core.CATEGORY_NAME)
 public final class AppendersPlugin {
 
     private AppendersPlugin() {}

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultAdvertiser.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * The default advertiser does not do anything.
  */
-@Plugin(name = "default", category = Node.CATEGORY, elementType = "advertiser", printObject = false)
+@Plugin(name = "Default", category = Node.CATEGORY, elementType = "advertiser", printObject = false)
 public class DefaultAdvertiser implements Advertiser {
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggersPlugin.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Container of Logger objects.
  */
-@Plugin(name = "loggers", category = Node.CATEGORY)
+@Plugin(name = "Loggers", category = Node.CATEGORY)
 public final class LoggersPlugin {
 
     private LoggersPlugin() {}

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/PropertiesPlugin.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * Handles properties defined in the configuration.
  */
-@Plugin(name = "properties", category = Node.CATEGORY, printObject = true)
+@Plugin(name = "Properties", category = Node.CATEGORY, printObject = true)
 public final class PropertiesPlugin {
 
     private static final StrSubstitutor UNESCAPING_SUBSTITUTOR = createUnescapingSubstitutor();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/Property.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * Represents a key/value pair in the configuration.
  */
-@Plugin(name = "property", category = Node.CATEGORY, printObject = true)
+@Plugin(name = "Property", category = Node.CATEGORY, printObject = true)
 public final class Property {
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ScriptsPlugin.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * A  container of Scripts.
  */
-@Plugin(name = "scripts", category = Core.CATEGORY_NAME)
+@Plugin(name = "Scripts", category = Core.CATEGORY_NAME)
 public final class ScriptsPlugin {
 
     private ScriptsPlugin() {}

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Configuration of Log4j 2.
  */
 @Export
-@Version("2.21.0")
+@Version("2.24.0")
 package org.apache.logging.log4j.core.config;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/convert/package-info.java
Patch:
@@ -20,7 +20,7 @@
  * attributes in plugin factory methods.
  */
 @Export
-@Version("2.20.2")
+@Version("2.24.0")
 package org.apache.logging.log4j.core.config.plugins.convert;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java
Patch:
@@ -62,7 +62,6 @@ public class XmlConfiguration extends AbstractConfiguration implements Reconfigu
 
     private static final String XINCLUDE_FIXUP_LANGUAGE = "http://apache.org/xml/features/xinclude/fixup-language";
     private static final String XINCLUDE_FIXUP_BASE_URIS = "http://apache.org/xml/features/xinclude/fixup-base-uris";
-    private static final String LOG4J_XSD = "Log4j-config.xsd";
 
     private final List<Status> status = new ArrayList<>();
     private Element rootElement;
@@ -142,7 +141,7 @@ public XmlConfiguration(final LoggerContext loggerContext, final ConfigurationSo
             try (final InputStream is =
                     Loader.getResourceAsStream(schemaResource, XmlConfiguration.class.getClassLoader())) {
                 if (is != null) {
-                    final javax.xml.transform.Source src = new StreamSource(is, LOG4J_XSD);
+                    final javax.xml.transform.Source src = new StreamSource(is, schemaResource);
                     final SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
                     Schema schema = null;
                     try {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/CompositeFilter.java
Patch:
@@ -39,7 +39,7 @@
 /**
  * Composes and invokes one or more filters.
  */
-@Plugin(name = "filters", category = Node.CATEGORY, printObject = true)
+@Plugin(name = "Filters", category = Node.CATEGORY, printObject = true)
 @PerformanceSensitive("allocation")
 public final class CompositeFilter extends AbstractLifeCycle implements Iterable<Filter>, Filter {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/package-info.java
Patch:
@@ -22,7 +22,7 @@
  * {@link org.apache.logging.log4j.core.Filter#ELEMENT_TYPE filter}.
  */
 @Export
-@Version("2.21.0")
+@Version("2.24.0")
 package org.apache.logging.log4j.core.filter;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/JdkMapAdapterStringMap.java
Patch:
@@ -47,7 +47,7 @@ public class JdkMapAdapterStringMap implements StringMap {
     // It is a cache, no need to synchronise it between threads.
     private static Map<Class<?>, Void> UNMODIFIABLE_MAPS_CACHE = new WeakHashMap<>();
 
-    private final Map<String, String> map;
+    protected final Map<String, String> map;
     private boolean immutable = false;
     private transient String[] sortedKeys;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java
Patch:
@@ -46,9 +46,8 @@
 public class Log4jContextFactory implements LoggerContextFactory, ShutdownCallbackRegistry {
 
     private static final StatusLogger LOGGER = StatusLogger.getLogger();
-    private static final boolean SHUTDOWN_HOOK_ENABLED =
-            PropertiesUtil.getProperties().getBooleanProperty(ShutdownCallbackRegistry.SHUTDOWN_HOOK_ENABLED, true)
-                    && !Constants.IS_WEB_APP;
+    private static final boolean SHUTDOWN_HOOK_ENABLED = PropertiesUtil.getProperties()
+            .getBooleanProperty(ShutdownCallbackRegistry.SHUTDOWN_HOOK_ENABLED, !Constants.IS_WEB_APP);
 
     private final ContextSelector selector;
     private final ShutdownCallbackRegistry shutdownCallbackRegistry;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Log4j 2 private implementation classes.
  */
 @Export
-@Version("2.23.0")
+@Version("2.24.0")
 package org.apache.logging.log4j.core.impl;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java
Patch:
@@ -127,7 +127,7 @@ public static String escape(final String name) {
     }
 
     private static boolean isJmxDisabled() {
-        return PropertiesUtil.getProperties().getBooleanProperty(PROPERTY_DISABLE_JMX);
+        return PropertiesUtil.getProperties().getBooleanProperty(PROPERTY_DISABLE_JMX, true);
     }
 
     public static void reregisterMBeansAfterReconfigure() {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java
Patch:
@@ -67,7 +67,7 @@
  * This layout does not implement chunking.
  * </p>
  *
- * @see <a href="http://docs.graylog.org/en/latest/pages/gelf.html#gelf">GELF specification</a>
+ * @see <a href="https://go2docs.graylog.org/current/getting_in_log_data/gelf.html#GELFPayloadSpecification">GELF specification</a>
  */
 @Plugin(name = "GelfLayout", category = Node.CATEGORY, elementType = Layout.ELEMENT_TYPE, printObject = true)
 public final class GelfLayout extends AbstractStringLayout {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/XmlLayout.java
Patch:
@@ -29,7 +29,8 @@
 import org.apache.logging.log4j.core.util.KeyValuePair;
 
 /**
- * Appends a series of {@code event} elements as defined in the <a href="log4j.dtd">log4j.dtd</a>.
+ * Appends a series of {@code event} elements as defined in the
+ * <a href="https://raw.githubusercontent.com/apache/logging-log4j2/2.x/log4j-core/src/main/resources/Log4j-events.xsd">Log4j-events.xsd</a>.
  *
  * <h2>Complete well-formed XML vs. fragment XML</h2>
  * <p>

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/package-info.java
Patch:
@@ -21,7 +21,7 @@
  * {@link org.apache.logging.log4j.core.lookup.StrLookup#CATEGORY Lookup}.
  */
 @Export
-@Version("2.20.1")
+@Version("2.24.0")
 package org.apache.logging.log4j.core.lookup;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/MulticastDnsAdvertiser.java
Patch:
@@ -35,7 +35,7 @@
  * will be removed prior to advertisement.
  *
  */
-@Plugin(name = "multicastdns", category = Core.CATEGORY_NAME, elementType = "advertiser", printObject = false)
+@Plugin(name = "MulticastDns", category = Core.CATEGORY_NAME, elementType = "advertiser", printObject = false)
 public class MulticastDnsAdvertiser implements Advertiser {
     /**
      * Status logger.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/package-info.java
Patch:
@@ -25,7 +25,7 @@
  * </ul>
  */
 @Export
-@Version("2.20.2")
+@Version("2.20.3")
 package org.apache.logging.log4j.core.net;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/Activator.java
Patch:
@@ -21,8 +21,8 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.config.plugins.util.PluginRegistry;
+import org.apache.logging.log4j.core.impl.ContextData;
 import org.apache.logging.log4j.core.impl.Log4jProvider;
-import org.apache.logging.log4j.core.impl.ThreadContextDataInjector;
 import org.apache.logging.log4j.core.impl.ThreadContextDataProvider;
 import org.apache.logging.log4j.core.util.Constants;
 import org.apache.logging.log4j.core.util.ContextDataProvider;
@@ -99,7 +99,7 @@ private static void loadContextProviders(final BundleContext bundleContext) {
                     bundleContext.getServiceReferences(ContextDataProvider.class, null);
             for (final ServiceReference<ContextDataProvider> serviceReference : serviceReferences) {
                 final ContextDataProvider provider = bundleContext.getService(serviceReference);
-                ThreadContextDataInjector.contextDataProviders.add(provider);
+                ContextData.addProvider(provider);
             }
         } catch (final InvalidSyntaxException ex) {
             LOGGER.error("Error accessing context data provider", ex);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Implementation of Log4j 2.
  */
 @Export
-@Version("2.20.2")
+@Version("2.24.0")
 package org.apache.logging.log4j.core;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MaxLengthConverter.java
Patch:
@@ -29,7 +29,9 @@
  * On invalid length the default value 100 is used (and an error message is logged).
  * If max length is greater than 20, an abbreviated text will get ellipsis ("...") appended.
  * Example usage (for email subject):
- * {@code "%maxLen{[AppName, ${hostName}, ${web:contextPath}] %p: %c{1} - %m%notEmpty{ =>%ex{short}}}{160}"}
+ * <pre>{@code
+ * %maxLen{[AppName, ${hostName}, ${web:contextPath}] %p: %c{1} - %m%notEmpty{ =>%ex{short}}}{160}
+ * }</pre>
  *
  * @author Thies Wellpott
  */

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/RegexReplacement.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Replace tokens in the LogEvent message.
  */
-@Plugin(name = "replace", category = Core.CATEGORY_NAME, printObject = true)
+@Plugin(name = "Replace", category = Core.CATEGORY_NAME, printObject = true)
 public final class RegexReplacement {
 
     private static final Logger LOGGER = StatusLogger.getLogger();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Provides classes implementing format specifiers in conversion patterns.
  */
 @Export
-@Version("2.21.0")
+@Version("2.21.1")
 package org.apache.logging.log4j.core.pattern;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Log4j 2 helper classes.
  */
 @Export
-@Version("2.20.2")
+@Version("2.24.0")
 package org.apache.logging.log4j.core.util;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/resolver/TemplateResolverContext.java
Patch:
@@ -30,7 +30,7 @@
  *
  * @see TemplateResolverFactory
  */
-interface TemplateResolverContext<V, C extends TemplateResolverContext<V, C>> {
+public interface TemplateResolverContext<V, C extends TemplateResolverContext<V, C>> {
 
     Class<C> getContextClass();
 

File: log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/resolver/TemplateResolverStringSubstitutor.java
Patch:
@@ -28,8 +28,8 @@ public interface TemplateResolverStringSubstitutor<V> {
     StrSubstitutor getInternalSubstitutor();
 
     /**
-     * A substitutor is stable if the replacement doesn't vary with the provided
-     * value. In such a case, value is always set to {@code null}.
+     * A substitutor is stable if the replacement doesn't vary with the provided value.
+     * That is, in a stable substitutor, {@code value} argument of {@link #replace(Object, String)} is always ignored.
      */
     boolean isStable();
 

File: log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/resolver/package-info.java
Patch:
@@ -16,7 +16,7 @@
  */
 @Export
 @Open("org.apache.logging.log4j.core")
-@Version("2.20.1")
+@Version("2.21.0")
 package org.apache.logging.log4j.layout.template.json.resolver;
 
 import aQute.bnd.annotation.jpms.Open;

File: log4j-mongodb/src/test/java/org/apache/logging/log4j/mongodb/MongoDbTestConstants.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.logging.log4j.mongodb3;
+package org.apache.logging.log4j.mongodb;
 
-public class MongoDb3TestConstants {
+public class MongoDbTestConstants {
 
     public static final String PROP_NAME_PORT = "MongoDBTestPort";
     static final String COLLECTION_NAME = "testCollection";

File: log4j-mongodb/src/test/java/org/apache/logging/log4j/mongodb/UsingMongoDb.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.logging.log4j.mongodb3;
+package org.apache.logging.log4j.mongodb;
 
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.ElementType.TYPE;
@@ -32,5 +32,5 @@
 @Inherited
 @Documented
 @ExtendWith(ExtensionContextAnchor.class)
-@ExtendWith(MongoDb3Resolver.class)
-public @interface UsingMongoDb3 {}
+@ExtendWith(MongoDbResolver.class)
+public @interface UsingMongoDb {}

File: log4j-perf-test/src/main/java/org/apache/logging/log4j/perf/jmh/ConcurrentAsyncLoggerToFileBenchmark.java
Patch:
@@ -93,7 +93,7 @@ public static class BenchmarkState {
         @Setup
         public final void before() {
             new File("target/ConcurrentAsyncLoggerToFileBenchmark.log").delete();
-            System.setProperty("log4j2.is.webapp", "false");
+            System.setProperty("log4j2.enableThreadlocals", "true");
             asyncLoggerType.setProperties();
             queueFullPolicy.setProperties();
             logger = LogManager.getLogger(ConcurrentAsyncLoggerToFileBenchmark.class);

File: log4j-perf-test/src/main/java/org/apache/logging/log4j/perf/jmh/FileAppenderThrowableBenchmark.java
Patch:
@@ -57,8 +57,8 @@
 public class FileAppenderThrowableBenchmark {
     static {
         // log4j2
-        System.setProperty("log4j2.is.webapp", "false");
-        System.setProperty("log4j.configurationFile", "log4j2-perf-file-throwable.xml");
+        System.setProperty("log4j2.enableThreadlocals", "true");
+        System.setProperty("log4j2.configurationFile", "log4j2-perf-file-throwable.xml");
         // log4j 1.2
         System.setProperty("log4j.configuration", "log4j12-perf-file-throwable.xml");
         // logback

File: log4j-perf-test/src/main/java/org/apache/logging/log4j/perf/jmh/TextEncoderHelperBenchmark.java
Patch:
@@ -45,9 +45,9 @@
 // ============================== HOW TO RUN THIS TEST: ====================================
 //
 // single thread:
-// java -Dfile.encoding=ISO-8859-1 -Dlog4j2.is.webapp=false -Dlog4j2.enable.threadlocals=true -jar
+// java -Dfile.encoding=ISO-8859-1 -Dlog4j2.enableThreadlocals=true -jar
 // log4j-perf/target/benchmarks.jar ".*StringBuilderEncoder.*" -f 1 -wi 5 -i 10
-// java -Dfile.encoding=UTF8 -Dlog4j2.is.webapp=false -Dlog4j2.enable.threadlocals=true -jar
+// java -Dfile.encoding=UTF8 -Dlog4j2.enableThreadlocals=true -jar
 // log4j-perf/target/benchmarks.jar ".*StringBuilderEncoder.*" -f 1 -wi 5 -i 10
 //
 // Usage help:

File: log4j-to-jul/src/main/java/org/apache/logging/log4j/tojul/package-info.java
Patch:
@@ -21,7 +21,7 @@
  * @author <a href="http://www.vorburger.ch">Michael Vorburger.ch</a> for Google
  */
 @Export
-@Version("2.20.1")
+@Version("2.24.0")
 package org.apache.logging.log4j.tojul;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * SLF4J support.
  */
 @Export
-@Version("2.20.1")
+@Version("2.24.0")
 package org.apache.logging.slf4j;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/XmlLayoutTest.java
Patch:
@@ -150,8 +150,8 @@ private void testAllFeatures(
         final String str = layout.toSerializable(expected);
         // System.out.println(str);
         assertEquals(str, !compact, str.contains("\n"));
-        assertEquals(str, includeSource, str.contains("Source"));
-        assertEquals(str, includeContext, str.contains("ContextMap"));
+        assertEquals(str, includeSource, str.contains("<Source"));
+        assertEquals(str, includeContext, str.contains("<ContextMap"));
         final Log4jLogEvent actual = new Log4jXmlObjectMapper().readValue(str, Log4jLogEvent.class);
         LogEventFixtures.assertEqualLogEvents(expected, actual, includeSource, includeContext, includeStacktrace);
         if (includeContext) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java
Patch:
@@ -36,7 +36,7 @@
 
 /**
  * This ContextSelector chooses a LoggerContext based upon the ClassLoader of the caller. This allows Loggers assigned
- * to static variables to be released along with the classes that own then. Other ContextSelectors will generally cause
+ * to static variables to be released along with the classes that own them. Other ContextSelectors will generally cause
  * Loggers associated with classes loaded from different ClassLoaders to be co-mingled. This is a problem if, for
  * example, a web application is undeployed as some of the Loggers being released may be associated with a Class in a
  * parent ClassLoader, which will generally have negative consequences.

File: log4j-api/src/main/java/org/apache/logging/log4j/util/Strings.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * <em>Consider this class private.</em>
  *
- * @see <a href="http://commons.apache.org/proper/commons-lang/">Apache Commons Lang</a>
+ * @see <a href="https://commons.apache.org/proper/commons-lang/index.html">Apache Commons Lang</a>
  */
 @InternalApi
 public final class Strings {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileManager.java
Patch:
@@ -45,8 +45,8 @@
  *
  * @see <a href="http://www.codeproject.com/Tips/683614/Things-to-Know-about-Memory-Mapped-File-in-Java">
  *      http://www.codeproject.com/Tips/683614/Things-to-Know-about-Memory-Mapped-File-in-Java</a>
- * @see <a href="http://bugs.java.com/view_bug.do?bug_id=6893654">http://bugs.java.com/view_bug.do?bug_id=6893654</a>
- * @see <a href="http://bugs.java.com/view_bug.do?bug_id=4724038">http://bugs.java.com/view_bug.do?bug_id=4724038</a>
+ * @see <a href="https://bugs.openjdk.org/browse/JDK-6893654">JDK-6893654</a>
+ * @see <a href="https://bugs.openjdk.org/browse/JDK-4724038">JDK-4724038</a>
  * @see <a
  *      href="http://stackoverflow.com/questions/9261316/memory-mapped-mappedbytebuffer-or-direct-bytebuffer-for-db-implementation">
  *      http://stackoverflow.com/questions/9261316/memory-mapped-mappedbytebuffer-or-direct-bytebuffer-for-db-implementation</a>

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java
Patch:
@@ -67,7 +67,7 @@
  * This layout does not implement chunking.
  * </p>
  *
- * @see <a href="http://docs.graylog.org/en/latest/pages/gelf.html#gelf">GELF specification</a>
+ * @see <a href="https://go2docs.graylog.org/current/getting_in_log_data/gelf.html#GELFPayloadSpecification">GELF specification</a>
  */
 @Plugin(name = "GelfLayout", category = Node.CATEGORY, elementType = Layout.ELEMENT_TYPE, printObject = true)
 public final class GelfLayout extends AbstractStringLayout {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/XmlLayout.java
Patch:
@@ -29,7 +29,8 @@
 import org.apache.logging.log4j.core.util.KeyValuePair;
 
 /**
- * Appends a series of {@code event} elements as defined in the <a href="log4j.dtd">log4j.dtd</a>.
+ * Appends a series of {@code event} elements as defined in the
+ * <a href="https://raw.githubusercontent.com/apache/logging-log4j2/2.x/log4j-core/src/main/resources/Log4j-events.xsd">Log4j-events.xsd</a>.
  *
  * <h2>Complete well-formed XML vs. fragment XML</h2>
  * <p>

File: log4j-mongodb/src/test/java/org/apache/logging/log4j/mongodb/MongoDbResolver.java
Patch:
@@ -102,9 +102,8 @@ public void beforeAll(ExtensionContext context) throws Exception {
                     protected Package packageOf(
                             Command command, Distribution distribution, DistributionBaseUrl baseUrl) {
                         if (distribution.platform().operatingSystem().type() == OSType.Windows) {
-                            final Package relativePackage = legacyPackageResolverFactory()
-                                    .apply(command)
-                                    .packageFor(distribution);
+                            final Package relativePackage =
+                                    commandPackageResolver().apply(command).packageFor(distribution);
                             final FileSet.Builder fileSetBuilder = FileSet.builder()
                                     .addEntry(FileType.Library, "ssleay32.dll")
                                     .addEntry(FileType.Library, "libeay32.dll");

File: log4j-mongodb4/src/test/java/org/apache/logging/log4j/mongodb4/MongoDb4Resolver.java
Patch:
@@ -104,9 +104,8 @@ public void beforeAll(ExtensionContext context) throws Exception {
                     protected Package packageOf(
                             Command command, Distribution distribution, DistributionBaseUrl baseUrl) {
                         if (distribution.platform().operatingSystem().type() == OSType.Windows) {
-                            final Package relativePackage = legacyPackageResolverFactory()
-                                    .apply(command)
-                                    .packageFor(distribution);
+                            final Package relativePackage =
+                                    commandPackageResolver().apply(command).packageFor(distribution);
                             final FileSet.Builder fileSetBuilder = FileSet.builder()
                                     .addEntry(FileType.Library, "ssleay32.dll")
                                     .addEntry(FileType.Library, "libeay32.dll");

File: src/site/antora/modules/ROOT/examples/manual/markers/MarkerExample.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.MarkerManager;
 
 public final class MarkerExample {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Log4j 2 Appenders.
  */
 @Export
-@Version("2.20.2")
+@Version("2.20.3")
 package org.apache.logging.log4j.core.appender;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java
Patch:
@@ -837,7 +837,7 @@ protected final boolean hasAppenders() {
     /**
      * The root Logger.
      */
-    @Plugin(name = ROOT, category = Core.CATEGORY_NAME, printObject = true)
+    @Plugin(name = "Root", category = Core.CATEGORY_NAME, printObject = true)
     public static class RootLogger extends LoggerConfig {
 
         @PluginBuilderFactory

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/package-info.java
Patch:
@@ -25,7 +25,7 @@
  * </ul>
  */
 @Export
-@Version("2.20.2")
+@Version("2.20.3")
 package org.apache.logging.log4j.core.net;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Provides classes implementing format specifiers in conversion patterns.
  */
 @Export
-@Version("2.21.0")
+@Version("2.21.1")
 package org.apache.logging.log4j.core.pattern;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/InMemoryAdvertiser.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.net.Advertiser;
 
-@Plugin(name = "memory", category = Core.CATEGORY_NAME, elementType = "advertiser", printObject = false)
+@Plugin(name = "Memory", category = Core.CATEGORY_NAME, elementType = "advertiser", printObject = false)
 public class InMemoryAdvertiser implements Advertiser {
     private static Map<Object, Map<String, String>> properties = new HashMap<>();
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FailoversPlugin.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * The array of failover Appenders.
  */
-@Plugin(name = "failovers", category = Core.CATEGORY_NAME)
+@Plugin(name = "Failovers", category = Core.CATEGORY_NAME)
 public final class FailoversPlugin {
 
     private static final Logger LOGGER = StatusLogger.getLogger();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java
Patch:
@@ -67,7 +67,7 @@
  * with immediateFlush=false, there will never be any items left in the buffer;
  * all log events will all be written to disk in a very efficient manner.
  */
-@Plugin(name = "asyncLogger", category = Node.CATEGORY, printObject = true)
+@Plugin(name = "AsyncLogger", category = Node.CATEGORY, printObject = true)
 public class AsyncLoggerConfig extends LoggerConfig {
 
     @PluginBuilderFactory
@@ -320,7 +320,7 @@ protected static boolean includeLocation(final String includeLocationConfigValue
     /**
      * An asynchronous root Logger.
      */
-    @Plugin(name = "asyncRoot", category = Core.CATEGORY_NAME, printObject = true)
+    @Plugin(name = "AsyncRoot", category = Core.CATEGORY_NAME, printObject = true)
     public static class RootLogger extends LoggerConfig {
 
         @PluginBuilderFactory

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppendersPlugin.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * An Appender container.
  */
-@Plugin(name = "appenders", category = Core.CATEGORY_NAME)
+@Plugin(name = "Appenders", category = Core.CATEGORY_NAME)
 public final class AppendersPlugin {
 
     private AppendersPlugin() {}

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultAdvertiser.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * The default advertiser does not do anything.
  */
-@Plugin(name = "default", category = Node.CATEGORY, elementType = "advertiser", printObject = false)
+@Plugin(name = "Default", category = Node.CATEGORY, elementType = "advertiser", printObject = false)
 public class DefaultAdvertiser implements Advertiser {
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java
Patch:
@@ -59,7 +59,7 @@
 /**
  * Logger object that is created via configuration.
  */
-@Plugin(name = "logger", category = Node.CATEGORY, printObject = true)
+@Plugin(name = "Logger", category = Node.CATEGORY, printObject = true)
 public class LoggerConfig extends AbstractFilterable implements LocationAware {
 
     public static final String ROOT = "root";

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggersPlugin.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Container of Logger objects.
  */
-@Plugin(name = "loggers", category = Node.CATEGORY)
+@Plugin(name = "Loggers", category = Node.CATEGORY)
 public final class LoggersPlugin {
 
     private LoggersPlugin() {}

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/PropertiesPlugin.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * Handles properties defined in the configuration.
  */
-@Plugin(name = "properties", category = Node.CATEGORY, printObject = true)
+@Plugin(name = "Properties", category = Node.CATEGORY, printObject = true)
 public final class PropertiesPlugin {
 
     private static final StrSubstitutor UNESCAPING_SUBSTITUTOR = createUnescapingSubstitutor();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/Property.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * Represents a key/value pair in the configuration.
  */
-@Plugin(name = "property", category = Node.CATEGORY, printObject = true)
+@Plugin(name = "Property", category = Node.CATEGORY, printObject = true)
 public final class Property {
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ScriptsPlugin.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * A  container of Scripts.
  */
-@Plugin(name = "scripts", category = Core.CATEGORY_NAME)
+@Plugin(name = "Scripts", category = Core.CATEGORY_NAME)
 public final class ScriptsPlugin {
 
     private ScriptsPlugin() {}

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/CompositeFilter.java
Patch:
@@ -39,7 +39,7 @@
 /**
  * Composes and invokes one or more filters.
  */
-@Plugin(name = "filters", category = Node.CATEGORY, printObject = true)
+@Plugin(name = "Filters", category = Node.CATEGORY, printObject = true)
 @PerformanceSensitive("allocation")
 public final class CompositeFilter extends AbstractLifeCycle implements Iterable<Filter>, Filter {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/MulticastDnsAdvertiser.java
Patch:
@@ -35,7 +35,7 @@
  * will be removed prior to advertisement.
  *
  */
-@Plugin(name = "multicastdns", category = Core.CATEGORY_NAME, elementType = "advertiser", printObject = false)
+@Plugin(name = "MulticastDns", category = Core.CATEGORY_NAME, elementType = "advertiser", printObject = false)
 public class MulticastDnsAdvertiser implements Advertiser {
     /**
      * Status logger.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/RegexReplacement.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Replace tokens in the LogEvent message.
  */
-@Plugin(name = "replace", category = Core.CATEGORY_NAME, printObject = true)
+@Plugin(name = "Replace", category = Core.CATEGORY_NAME, printObject = true)
 public final class RegexReplacement {
 
     private static final Logger LOGGER = StatusLogger.getLogger();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/Constants.java
Patch:
@@ -35,7 +35,10 @@ public final class Constants {
 
     /**
      * Property name for the default status (internal log4j logging) level to use if not specified in configuration.
+     * @deprecated since 2.24.0 use
+     * {@link org.apache.logging.log4j.status.StatusLogger#DEFAULT_STATUS_LISTENER_LEVEL} instead.
      */
+    @Deprecated
     public static final String LOG4J_DEFAULT_STATUS_LEVEL = "Log4jDefaultStatusLevel";
 
     /**

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java
Patch:
@@ -326,10 +326,10 @@ public String getThreadContextMap() {
             return threadContextMapClass;
         }
         // Default based on properties
-        if (props.getBooleanProperty(GC_FREE_THREAD_CONTEXT_PROPERTY, !Constants.IS_WEB_APP)) {
+        if (props.getBooleanProperty(GC_FREE_THREAD_CONTEXT_PROPERTY)) {
             return GARBAGE_FREE_CONTEXT_MAP;
         }
-        return Constants.IS_WEB_APP ? WEB_APP_CONTEXT_MAP : COPY_ON_WRITE_CONTEXT_MAP;
+        return Constants.ENABLE_THREADLOCALS ? COPY_ON_WRITE_CONTEXT_MAP : WEB_APP_CONTEXT_MAP;
     }
 
     /**

File: log4j-mongodb/src/test/java/org/apache/logging/log4j/mongodb/MongoDbTestConstants.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.logging.log4j.mongodb3;
+package org.apache.logging.log4j.mongodb;
 
-public class MongoDb3TestConstants {
+public class MongoDbTestConstants {
 
     public static final String PROP_NAME_PORT = "MongoDBTestPort";
     static final String COLLECTION_NAME = "testCollection";

File: log4j-mongodb/src/test/java/org/apache/logging/log4j/mongodb/UsingMongoDb.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.logging.log4j.mongodb3;
+package org.apache.logging.log4j.mongodb;
 
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.ElementType.TYPE;
@@ -32,5 +32,5 @@
 @Inherited
 @Documented
 @ExtendWith(ExtensionContextAnchor.class)
-@ExtendWith(MongoDb3Resolver.class)
-public @interface UsingMongoDb3 {}
+@ExtendWith(MongoDbResolver.class)
+public @interface UsingMongoDb {}

File: log4j-mongodb4/src/test/java/org/apache/logging/log4j/mongodb4/MongoDb4Resolver.java
Patch:
@@ -146,7 +146,7 @@ private static final class MongoClientHolder implements CloseableResource, Suppl
         private final MongoClient mongoClient;
 
         public MongoClientHolder(final Mongod mongod, final TestProperties props) {
-            state = mongod.start(Version.Main.V4_4);
+            state = mongod.start(Version.Main.V7_0);
             final RunningMongodProcess mongodProcess = state.current();
             final ServerAddress addr = mongodProcess.getServerAddress();
             mongoClient = MongoClients.create(String.format("mongodb://%s:%d", addr.getHost(), addr.getPort()));

File: log4j-mongodb4/src/test/java/org/apache/logging/log4j/mongodb4/MongoDb4Resolver.java
Patch:
@@ -183,7 +183,7 @@ public void onProcessed() {
             // noop
         }
 
-        protected String stripLineEndings(String line) {
+        String stripLineEndings(String line) {
             // we still need to remove line endings that are passed on by
             // StreamToLineProcessor...
             return line.replaceAll("[\n\r]+", "");

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java
Patch:
@@ -127,7 +127,7 @@ public static String escape(final String name) {
     }
 
     private static boolean isJmxDisabled() {
-        return PropertiesUtil.getProperties().getBooleanProperty(PROPERTY_DISABLE_JMX);
+        return PropertiesUtil.getProperties().getBooleanProperty(PROPERTY_DISABLE_JMX, true);
     }
 
     public static void reregisterMBeansAfterReconfigure() {

File: log4j-api/src/main/java/org/apache/logging/log4j/message/package-info.java
Patch:
@@ -20,7 +20,7 @@
  */
 @Export
 /**
- * Bumped to 2.22.0, since FormattedMessage behavior changed.
+ * Bumped to 2.24.0, since FormattedMessage behavior changed.
  */
 @Version("2.24.0")
 package org.apache.logging.log4j.message;

File: log4j-api/src/main/java/org/apache/logging/log4j/package-info.java
Patch:
@@ -32,7 +32,7 @@
  * @see <a href="http://logging.apache.org/log4j/2.x/manual/api.html">Log4j 2 API manual</a>
  */
 @Export
-@Version("2.20.2")
+@Version("2.24.0")
 package org.apache.logging.log4j;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/routing/JsonRoutingAppender2Test.java
Patch:
@@ -34,7 +34,7 @@
  */
 public class JsonRoutingAppender2Test {
     private static final String CONFIG = "log4j-routing2.json";
-    private static final String LOG_FILENAME = "target/rolling1/rollingtest-Unknown.log";
+    private static final String LOG_FILENAME = "target/rolling1/routingtest2-Unknown.log";
 
     private final LoggerContextRule loggerContextRule = new LoggerContextRule(CONFIG);
 

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/impl/ThreadContextDataInjectorTest.java
Patch:
@@ -91,7 +91,7 @@ private void testContextDataInjector() {
                         : readOnlythreadContextMap.getClass().getName(),
                 is(equalTo(readOnlythreadContextMapClassName)));
 
-        final ContextDataInjector contextDataInjector = createInjector();
+        final ContextDataInjector contextDataInjector = createInjector(true);
         final StringMap stringMap = contextDataInjector.injectContextData(null, new SortedArrayStringMap());
 
         assertThat("thread context map", ThreadContext.getContext(), allOf(hasEntry("foo", "bar"), not(hasKey("baz"))));

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java
Patch:
@@ -121,7 +121,9 @@ public void setValues(
         this.marker = aMarker;
         this.fqcn = theFqcn;
         this.location = aLocation;
-        this.contextData = mutableContextData;
+        if (mutableContextData != null) {
+            this.contextData = mutableContextData;
+        }
         this.contextStack = aContextStack;
         this.asyncLogger = anAsyncLogger;
         this.populated = true;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/package-info.java
Patch:
@@ -22,7 +22,7 @@
  * {@link org.apache.logging.log4j.core.Filter#ELEMENT_TYPE filter}.
  */
 @Export
-@Version("2.21.0")
+@Version("2.24.0")
 package org.apache.logging.log4j.core.filter;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/JdkMapAdapterStringMap.java
Patch:
@@ -47,7 +47,7 @@ public class JdkMapAdapterStringMap implements StringMap {
     // It is a cache, no need to synchronise it between threads.
     private static Map<Class<?>, Void> UNMODIFIABLE_MAPS_CACHE = new WeakHashMap<>();
 
-    private final Map<String, String> map;
+    protected final Map<String, String> map;
     private boolean immutable = false;
     private transient String[] sortedKeys;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Log4j 2 private implementation classes.
  */
 @Export
-@Version("2.23.0")
+@Version("2.24.0")
 package org.apache.logging.log4j.core.impl;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/package-info.java
Patch:
@@ -21,7 +21,7 @@
  * {@link org.apache.logging.log4j.core.lookup.StrLookup#CATEGORY Lookup}.
  */
 @Export
-@Version("2.20.1")
+@Version("2.24.0")
 package org.apache.logging.log4j.core.lookup;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/Activator.java
Patch:
@@ -21,8 +21,8 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.config.plugins.util.PluginRegistry;
+import org.apache.logging.log4j.core.impl.ContextData;
 import org.apache.logging.log4j.core.impl.Log4jProvider;
-import org.apache.logging.log4j.core.impl.ThreadContextDataInjector;
 import org.apache.logging.log4j.core.impl.ThreadContextDataProvider;
 import org.apache.logging.log4j.core.util.Constants;
 import org.apache.logging.log4j.core.util.ContextDataProvider;
@@ -99,7 +99,7 @@ private static void loadContextProviders(final BundleContext bundleContext) {
                     bundleContext.getServiceReferences(ContextDataProvider.class, null);
             for (final ServiceReference<ContextDataProvider> serviceReference : serviceReferences) {
                 final ContextDataProvider provider = bundleContext.getService(serviceReference);
-                ThreadContextDataInjector.contextDataProviders.add(provider);
+                ContextData.addProvider(provider);
             }
         } catch (final InvalidSyntaxException ex) {
             LOGGER.error("Error accessing context data provider", ex);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Implementation of Log4j 2.
  */
 @Export
-@Version("2.20.2")
+@Version("2.24.0")
 package org.apache.logging.log4j.core;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Log4j 2 helper classes.
  */
 @Export
-@Version("2.20.2")
+@Version("2.24.0")
 package org.apache.logging.log4j.core.util;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-api-test/src/test/java/org/apache/logging/log4j/util/PropertiesUtilTest.java
Patch:
@@ -31,7 +31,6 @@
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 import java.time.Duration;
-import java.time.format.DateTimeParseException;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
@@ -144,7 +143,7 @@ static List<String> should_throw_on_invalid_duration() {
     @ParameterizedTest
     @MethodSource
     void should_throw_on_invalid_duration(final String value) {
-        assertThrows(DateTimeParseException.class, () -> PropertiesUtil.parseDuration(value));
+        assertThrows(IllegalArgumentException.class, () -> PropertiesUtil.parseDuration(value));
     }
 
     @Test

File: log4j-api/src/main/java/org/apache/logging/log4j/util/Strings.java
Patch:
@@ -52,8 +52,7 @@ public final class Strings {
      * OS-dependent line separator, defaults to {@code "\n"} if the system property {@code ""line.separator"} cannot be
      * read.
      */
-    public static final String LINE_SEPARATOR =
-            SystemPropertiesPropertySource.getSystemProperty("line.separator", "\n");
+    public static final String LINE_SEPARATOR = System.lineSeparator();
 
     /**
      * Returns a double quoted string.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/IfLastModified.java
Patch:
@@ -28,8 +28,8 @@
 import org.apache.logging.log4j.core.Core;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginBuilderAttribute;
+import org.apache.logging.log4j.core.config.plugins.PluginBuilderFactory;
 import org.apache.logging.log4j.core.config.plugins.PluginElement;
-import org.apache.logging.log4j.core.config.plugins.PluginFactory;
 import org.apache.logging.log4j.core.config.plugins.validation.constraints.Required;
 import org.apache.logging.log4j.core.util.Clock;
 import org.apache.logging.log4j.core.util.ClockFactory;
@@ -106,7 +106,7 @@ public String toString() {
     /**
      * @since 2.24.0
      */
-    @PluginFactory
+    @PluginBuilderFactory
     public static Builder newBuilder() {
         return new Builder();
     }
@@ -134,7 +134,7 @@ public Builder setNestedConditions(final PathCondition... nestedConditions) {
 
         @Override
         public IfLastModified build() {
-            return isValid() ? new IfLastModified(age, nestedConditions) : null;
+            return isValid() ? new IfLastModified(Duration.ofMillis(age.toMillis()), nestedConditions) : null;
         }
     }
 }

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/package-info.java
Patch:
@@ -16,7 +16,9 @@
  */
 @Export
 @Version("2.24.0")
+@BaselineIgnore("2.24.0")
 package org.apache.logging.log4j.test.junit;
 
+import aQute.bnd.annotation.baseline.BaselineIgnore;
 import org.osgi.annotation.bundle.Export;
 import org.osgi.annotation.versioning.Version;

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterFormatter.java
Patch:
@@ -246,13 +246,13 @@ static void formatMessage(
 
         // #2380: check if the count of placeholder is not equal to the count of arguments
         if (analysis.placeholderCount != argCount) {
-            final int realArgCount = args.length;
-            final int noThrowableArgCount = realArgCount - ((args[realArgCount - 1] instanceof Throwable) ? 1 : 0);
+            final int noThrowableArgCount =
+                    argCount < 1 ? 0 : argCount - ((args[argCount - 1] instanceof Throwable) ? 1 : 0);
             if (analysis.placeholderCount != noThrowableArgCount) {
                 STATUS_LOGGER.warn(
                         "found {} argument placeholders, but provided {} for pattern `{}`",
                         analysis.placeholderCount,
-                        Math.min(realArgCount, argCount),
+                        argCount,
                         pattern);
             }
         }

File: log4j-api-test/src/test/java/org/apache/logging/log4j/message/ParameterFormatterTest.java
Patch:
@@ -78,10 +78,10 @@ void test_pattern_analysis(
     }
 
     @ParameterizedTest
-    @CsvSource({"2,pan {} {},a,pan a {}", "3,pan {}{}{},a-b,pan ab{}", "1,pan {},a-b-c,pan a"})
-    void format_should_fail_on_insufficient_args(
+    @CsvSource({"2,pan {} {},a,pan a {}", "3,pan {}{}{},a b,pan ab{}", "1,pan {},a b c,pan a"})
+    void format_should_warn_on_insufficient_args(
             final int placeholderCount, final String pattern, final String argsStr, final String expectedMessage) {
-        final String[] args = argsStr.split("-");
+        final String[] args = argsStr.split(" ");
         final int argCount = args.length;
 
         String actualMessage = ParameterFormatter.format(pattern, args, argCount);

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/Resources.java
Patch:
@@ -16,11 +16,13 @@
  */
 package org.apache.logging.log4j.test.junit;
 
+import aQute.bnd.annotation.baseline.BaselineIgnore;
 import org.junit.jupiter.api.parallel.ResourceLock;
 
 /**
  * Constants to use the {@link ResourceLock} annotation.
  */
+@BaselineIgnore("2.24.0")
 public final class Resources {
 
     /**

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java
Patch:
@@ -374,7 +374,9 @@ public Class<? extends ThreadContextMap> loadThreadContextMap() {
 
     /**
      * Extension point for providers to create a {@link ThreadContextMap}
-     * @implNote The default implementation:
+     * <p>
+     *     The default implementation:
+     * </p>
      * <ol>
      *     <li>calls {@link #loadThreadContextMap},</li>
      *     <li>if the previous call returns {@code null}, it calls {@link #getThreadContextMap} to instantiate one of

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/StringArrayThreadContextMap.java
Patch:
@@ -28,8 +28,8 @@
  * An equivalent for DefaultThreadContxtMap, except that it's backed by
  * UnmodifiableArrayBackedMap. An instance of UnmodifiableArrayBackedMap can be
  * represented as a single Object[], which can safely be stored on the
- * ThreadLocal<> with no fear of classloader-related memory leaks. Performance
- * of the underlying UnmodifiableArrayBackedMap exceeds HashMap<> in all
+ * ThreadLocal with no fear of classloader-related memory leaks. Performance
+ * of the underlying UnmodifiableArrayBackedMap exceeds HashMap in all
  * supported operations other than get(). Note that get() performance scales
  * linearly with the current map size, and callers are advised to minimize this
  * work.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/DatePatternConverter.java
Patch:
@@ -359,7 +359,7 @@ public void format(final StringBuilder toAppendTo, final Object... objects) {
     /**
      * Gets the pattern string describing this date format.
      *
-     * @return the pattern string describing this date format.
+     * @return the pattern string describing this date format or {@code  null} if the format does not have a pattern.
      */
     public String getPattern() {
         return formatter.toPattern();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java
Patch:
@@ -665,6 +665,7 @@ protected void doConfigure() {
             final Map<String, String> map = this.getComponent(CONTEXT_PROPERTIES);
             final StrLookup lookup = map == null ? null : new PropertiesLookup(map);
             final Interpolator interpolator = new Interpolator(lookup, pluginPackages);
+            interpolator.setConfiguration(this);
             interpolator.setLoggerContext(loggerContext.get());
             runtimeStrSubstitutor.setVariableResolver(interpolator);
             configurationStrSubstitutor.setVariableResolver(interpolator);

File: log4j-api/src/main/java/org/apache/logging/log4j/status/package-info.java
Patch:
@@ -19,7 +19,7 @@
  * used by applications reporting on the status of the logging system
  */
 @Export
-@Version("2.23.0")
+@Version("2.23.1")
 package org.apache.logging.log4j.status;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-jul/src/main/java/org/apache/logging/log4j/jul/CoreLogger.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import org.apache.logging.log4j.core.config.Configurator;
 
 /**
  * Log4j Core implementation of the JUL {@link Logger} class. <strong>Note that this implementation does
@@ -44,7 +45,7 @@ public class CoreLogger extends ApiLogger {
     @Override
     public void setLevel(final Level level) throws SecurityException {
         super.doSetLevel(level); // checks permissions
-        logger.setLevel(LevelTranslator.toLevel(level));
+        Configurator.setLevel(logger, LevelTranslator.toLevel(level));
     }
 
     /**

File: log4j-api-test/src/test/java/org/apache/logging/log4j/message/ParameterizedMessageTest.java
Patch:
@@ -137,12 +137,12 @@ public void testSafeWithMutableParams() { // LOG4J2-763
         // modify parameter before calling msg.getFormattedMessage
         param.set("XYZ");
         final String actual = msg.getFormattedMessage();
-        assertThat("Should use current param value").isEqualTo("Test message XYZ", actual);
+        assertThat(actual).isEqualTo("Test message XYZ").as("Should use current param value");
 
         // modify parameter after calling msg.getFormattedMessage
         param.set("000");
         final String after = msg.getFormattedMessage();
-        assertThat("Should not change after rendered once").isEqualTo("Test message XYZ", after);
+        assertThat(after).isEqualTo("Test message XYZ").as("Should not change after rendered once");
     }
 
     static Stream<Object> testSerializable() {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Log4j 2 private implementation classes.
  */
 @Export
-@Version("2.20.1")
+@Version("2.23.0")
 package org.apache.logging.log4j.core.impl;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/impl/JdkMapAdapterStringMapTest.java
Patch:
@@ -49,6 +49,7 @@ public class JdkMapAdapterStringMapTest {
     @Test
     public void testConstructorDisallowsNull() {
         assertThrows(NullPointerException.class, () -> new JdkMapAdapterStringMap(null));
+        assertThrows(NullPointerException.class, () -> new JdkMapAdapterStringMap(null, false));
     }
 
     @Test

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/ContextDataProvider.java
Patch:
@@ -36,6 +36,6 @@ public interface ContextDataProvider {
      * @return the context data in a StringMap.
      */
     default StringMap supplyStringMap() {
-        return new JdkMapAdapterStringMap(supplyContextData());
+        return new JdkMapAdapterStringMap(supplyContextData(), true);
     }
 }

File: log4j-layout-template-json-test/src/test/java/org/apache/logging/log4j/layout/template/json/util/JsonWriterTest.java
Patch:
@@ -150,7 +150,7 @@ void test_writeObject_null_StringMap() {
 
     @Test
     void test_writeObject_StringMap() {
-        final StringMap map = new JdkMapAdapterStringMap(Collections.singletonMap("a", "b"));
+        final StringMap map = new JdkMapAdapterStringMap(Collections.singletonMap("a", "b"), true);
         final String expectedJson = "{'a':'b'}".replace('\'', '"');
         final String actualJson = withLockedWriterReturning(writer -> writer.use(() -> writer.writeObject(map)));
         Assertions.assertThat(actualJson).isEqualTo(expectedJson);
@@ -225,7 +225,7 @@ public String toString() {
                                         put("foo", "bar");
                                     }
                                 }),
-                                new JdkMapAdapterStringMap(Collections.singletonMap("a", "b"))));
+                                new JdkMapAdapterStringMap(Collections.singletonMap("a", "b"), true)));
                 put("key7", (StringBuilderFormattable) buffer -> buffer.append(7.7777777777777D));
             }
         };

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/package-info.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the license.
  */
 @Export
-@Version("2.21.1")
+@Version("2.23.0")
 package org.apache.logging.log4j.test.junit;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-api/src/main/java/org/apache/logging/log4j/util/FilteredObjectInputStream.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.ObjectStreamClass;
 import java.util.Collection;
 import java.util.Collections;
+import org.apache.logging.log4j.util.internal.SerializationUtil;
 
 /**
  * Extends {@link ObjectInputStream} to only allow some built-in Log4j classes and caller-specified classes to be
@@ -63,7 +64,7 @@ public Collection<String> getAllowedClasses() {
 
     @Override
     protected Class<?> resolveClass(final ObjectStreamClass desc) throws IOException, ClassNotFoundException {
-        final String name = desc.getName();
+        final String name = SerializationUtil.stripArray(desc.getName());
         if (!(isAllowedByDefault(name) || allowedExtraClasses.contains(name))) {
             throw new InvalidObjectException("Class is not allowed for deserialization: " + name);
         }

File: log4j-layout-template-json-test/src/test/java/org/apache/logging/log4j/layout/template/json/ThreadLocalRecyclerNestedLoggingTest.java
Patch:
@@ -38,6 +38,8 @@ public class ThreadLocalRecyclerNestedLoggingTest {
 
     private static final class ThrowableLoggingInGetMessage extends RuntimeException {
 
+        private static final long serialVersionUID = 10127;
+
         private final Logger logger;
 
         private ThrowableLoggingInGetMessage(final Logger logger) {

File: log4j-layout-template-json-test/src/test/java/org/apache/logging/log4j/layout/template/json/resolver/LevelResolverTest.java
Patch:
@@ -23,8 +23,6 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 import org.apache.logging.log4j.Level;
-import org.apache.logging.log4j.Marker;
-import org.apache.logging.log4j.MarkerManager;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.impl.Log4jLogEvent;
 import org.apache.logging.log4j.layout.template.json.JsonTemplateLayout;
@@ -49,7 +47,6 @@ void should_work_with_custom_levels() {
                 .build();
 
         // Create the log event.
-        final Marker marker = MarkerManager.getMarker("MARKER");
         Level level = Level.forName("CUSTOM_LEVEL", 250);
         final LogEvent logEvent = Log4jLogEvent.newBuilder().setLevel(level).build();
 

File: log4j-layout-template-json-test/src/test/java/org/apache/logging/log4j/layout/template/json/resolver/MessageResolverTest.java
Patch:
@@ -46,7 +46,7 @@
 class MessageResolverTest {
 
     /**
-     * @see <a href="https://issues.apache.org/jira/browse/LOG4J2-3080">LOG4J2-3080</a>
+     * A <a href="https://issues.apache.org/jira/browse/LOG4J2-3080">LOG4J2-3080</a> reproduction.
      */
     @Test
     @LoggerContextSource("messageFallbackKeyUsingJsonTemplateLayout.xml")

File: log4j-layout-template-json-test/src/test/java/org/apache/logging/log4j/layout/template/json/resolver/StackTraceStringResolverTest.java
Patch:
@@ -629,6 +629,7 @@ private static final class NonAsciiUtf8MethodNameContainingException extends Run
 
         private static final String NON_ASCII_UTF8_TEXT = "அஆஇฬ๘";
 
+        @SuppressWarnings("StaticAssignmentOfThrowable")
         private static final NonAsciiUtf8MethodNameContainingException INSTANCE = createInstance();
 
         @SuppressWarnings("UnicodeInCode")

File: log4j-layout-template-json-test/src/test/java/org/apache/logging/log4j/layout/template/json/resolver/TimestampResolverTest.java
Patch:
@@ -31,7 +31,7 @@
 class TimestampResolverTest {
 
     /**
-     * @see <a href="https://issues.apache.org/jira/browse/LOG4J2-3183">LOG4J2-3183</a>
+     * Reproduces <a href="https://issues.apache.org/jira/browse/LOG4J2-3183">LOG4J2-3183</a>.
      */
     @Test
     void epoch_nanos_should_not_overlap() {

File: log4j-layout-template-json-test/src/test/java/org/apache/logging/log4j/layout/template/json/util/InstantFormatterTest.java
Patch:
@@ -58,7 +58,7 @@ void nanoseconds_should_be_formatted() {
     }
 
     /**
-     * @see <a href="https://issues.apache.org/jira/browse/LOG4J2-3614">LOG4J2-3614</a>
+     * Reproduces <a href="https://issues.apache.org/jira/browse/LOG4J2-3614">LOG4J2-3614</a>.
      */
     @Test
     void FastDateFormat_failures_should_be_handled() {

File: log4j-layout-template-json-test/src/test/java/org/apache/logging/log4j/layout/template/json/util/JsonWriterTest.java
Patch:
@@ -41,7 +41,7 @@
 import org.assertj.core.api.SoftAssertions;
 import org.junit.jupiter.api.Test;
 
-@SuppressWarnings("DoubleBraceInitialization")
+@SuppressWarnings({"DoubleBraceInitialization", "UnnecessaryStringBuilder"})
 class JsonWriterTest {
 
     private static final JsonWriter WRITER = JsonWriter.newBuilder()

File: log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/resolver/MessageResolverFactory.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
 
 /**
- * @see MessageResolver
+ * A {@link MessageResolver} factory.
  */
 @Plugin(name = "MessageResolverFactory", category = TemplateResolverFactory.CATEGORY)
 public final class MessageResolverFactory implements EventResolverFactory {

File: log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/resolver/TemplateResolverFactories.java
Patch:
@@ -102,6 +102,7 @@ Map<String, F> populateFactoryByName(
         }
     }
 
+    @SuppressWarnings("TypeParameterUnusedInFormals")
     private static <V, C extends TemplateResolverContext<V, C>, F extends TemplateResolverFactory<V, C>> F castFactory(
             final Class<V> valueClass, final Class<C> contextClass, final TemplateResolverFactory<?, ?> factory) {
         final Class<?> factoryValueClass = factory.getValueClass();

File: log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/resolver/TemplateResolverInterceptors.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.logging.log4j.layout.template.json.resolver;
 
-import java.util.LinkedList;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -71,7 +71,7 @@ List<I> populateInterceptors(
                     final Map<String, PluginType<?>> pluginTypeByName,
                     final Class<V> valueClass,
                     final Class<C> contextClass) {
-        final List<I> interceptors = new LinkedList<>();
+        final List<I> interceptors = new ArrayList<>();
         final Set<String> pluginNames = pluginTypeByName.keySet();
         for (final String pluginName : pluginNames) {
             final PluginType<?> pluginType = pluginTypeByName.get(pluginName);
@@ -100,6 +100,7 @@ List<I> populateInterceptors(
         }
     }
 
+    @SuppressWarnings("TypeParameterUnusedInFormals")
     private static <V, C extends TemplateResolverContext<V, C>, I extends TemplateResolverInterceptor<V, C>>
             I castInterceptor(
                     final Class<V> valueClass,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
Patch:
@@ -536,8 +536,8 @@ private Configuration getConfiguration(
                     final ConfigurationSource source = ConfigurationSource.fromResource(configName, loader);
                     if (source != null) {
                         if (!factory.isActive()) {
-                            LOGGER.warn(
-                                    "Found configuration file {} for inactive ConfigurationFactory {}",
+                            LOGGER.error(
+                                    "Found configuration file `{}` for the inactive `{}`. This `ConfigurationFactory` implementation might be inactive due to a missing dependency.",
                                     configName,
                                     factory.getClass().getName());
                         }

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/LoggerTest.java
Patch:
@@ -133,7 +133,7 @@ public void builder() {
         final List<LogEvent> events = app.getEvents();
         assertEventCount(events, 3);
         assertEquals(
-                "org.apache.logging.log4j.core.LoggerTest.builder(LoggerTest.java:123)",
+                "org.apache.logging.log4j.core.LoggerTest.builder(LoggerTest.java:129)",
                 events.get(0).getSource().toString(),
                 "Incorrect location");
         assertEquals(Level.DEBUG, events.get(0).getLevel(), "Incorrect Level");

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/MemoryMappedFileAppenderTest.java
Patch:
@@ -118,7 +118,7 @@ void testMemMapLocation(final LoggerContext context) throws Exception {
                 both(hasSize(2))
                         .and(
                                 contains(
-                                        "org.apache.logging.log4j.core.appender.MemoryMappedFileAppenderTest.testMemMapLocation(MemoryMappedFileAppenderTest.java:103): Test log1",
-                                        "org.apache.logging.log4j.core.appender.MemoryMappedFileAppenderTest.testMemMapLocation(MemoryMappedFileAppenderTest.java:106): Test log2")));
+                                        "org.apache.logging.log4j.core.appender.MemoryMappedFileAppenderTest.testMemMapLocation(MemoryMappedFileAppenderTest.java:105): Test log1",
+                                        "org.apache.logging.log4j.core.appender.MemoryMappedFileAppenderTest.testMemMapLocation(MemoryMappedFileAppenderTest.java:108): Test log2")));
     }
 }

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/pattern/PatternParserTest.java
Patch:
@@ -115,7 +115,7 @@ public void testCustomPattern() {
             formatter.format(event, buf);
         }
         final String str = buf.toString();
-        final String expected = "INFO  [PatternParserTest        :98  ] - Hello, world" + Strings.LINE_SEPARATOR;
+        final String expected = "INFO  [PatternParserTest        :100 ] - Hello, world" + Strings.LINE_SEPARATOR;
         assertTrue(str.endsWith(expected), "Expected to end with: " + expected + ". Actual: " + str);
     }
 

File: log4j-slf4j-impl/src/test/java/org/apache/logging/slf4j/MarkerTest.java
Patch:
@@ -131,12 +131,10 @@ public void testEquals() {
         final Marker log4jParent = MarkerManager.getMarker(parentMakerName);
         final Marker log4jMarker = MarkerManager.getMarker(childMarkerName);
         final Marker log4jMarker2 = MarkerManager.getMarker(childMarkerName);
-        assertEquals(log4jParent, log4jParent);
-        assertEquals(log4jMarker, log4jMarker);
         assertEquals(log4jMarker, log4jMarker2);
         assertEquals(slf4jMarker, slf4jMarker2);
         assertNotEquals(log4jParent, log4jMarker);
-        assertNotEquals(log4jMarker, log4jParent);
+        assertNotEquals(slf4jParent, slf4jMarker);
     }
 
     @Test

File: log4j-slf4j2-impl/src/test/java/org/apache/logging/slf4j/MarkerTest.java
Patch:
@@ -131,12 +131,10 @@ public void testEquals() {
         final Marker log4jParent = MarkerManager.getMarker(parentMakerName);
         final Marker log4jMarker = MarkerManager.getMarker(childMarkerName);
         final Marker log4jMarker2 = MarkerManager.getMarker(childMarkerName);
-        assertEquals(log4jParent, log4jParent);
-        assertEquals(log4jMarker, log4jMarker);
         assertEquals(log4jMarker, log4jMarker2);
         assertEquals(slf4jMarker, slf4jMarker2);
         assertNotEquals(log4jParent, log4jMarker);
-        assertNotEquals(log4jMarker, log4jParent);
+        assertNotEquals(slf4jParent, slf4jMarker);
     }
 
     @Test

File: log4j-kubernetes/src/main/java/org/apache/logging/log4j/kubernetes/ContainerUtil.java
Patch:
@@ -40,8 +40,9 @@ public class ContainerUtil {
      * been much nicer if Kubernetes would just put the container id in a standard environment variable.
      *
      * @see <a href="http://stackoverflow.com/a/25729598/12916">Stackoverflow</a> for a discussion on retrieving the containerId.
-     * @see <a href="https://github.com/jenkinsci/docker-workflow-plugin/blob/master/src/main/java/org/jenkinsci/plugins/docker/workflow/client/ControlGroup.java>ControlGroup</a>
+     * @see <a href="https://github.com/jenkinsci/docker-workflow-plugin/blob/master/src/main/java/org/jenkinsci/plugins/docker/workflow/client/ControlGroup.java">ControlGroup</a>
      * for the original version of this. Not much is actually left but it provided good inspiration.
+     * @return The container id.
      */
     public static String getContainerId() {
         try {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java
Patch:
@@ -17,11 +17,11 @@
 package org.apache.logging.log4j.core.async;
 
 import com.lmax.disruptor.EventFactory;
+import com.lmax.disruptor.EventHandler;
 import com.lmax.disruptor.EventTranslatorTwoArg;
 import com.lmax.disruptor.ExceptionHandler;
 import com.lmax.disruptor.RingBuffer;
 import com.lmax.disruptor.Sequence;
-import com.lmax.disruptor.SequenceReportingEventHandler;
 import com.lmax.disruptor.TimeoutException;
 import com.lmax.disruptor.WaitStrategy;
 import com.lmax.disruptor.dsl.Disruptor;
@@ -92,7 +92,7 @@ public String toString() {
     /**
      * EventHandler performs the work in a separate thread.
      */
-    private static class Log4jEventWrapperHandler implements SequenceReportingEventHandler<Log4jEventWrapper> {
+    private static class Log4jEventWrapperHandler implements EventHandler<Log4jEventWrapper> {
         private static final int NOTIFY_PROGRESS_THRESHOLD = 50;
         private Sequence sequenceCallback;
         private int counter;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEventHandler.java
Patch:
@@ -16,17 +16,16 @@
  */
 package org.apache.logging.log4j.core.async;
 
-import com.lmax.disruptor.LifecycleAware;
+import com.lmax.disruptor.EventHandler;
 import com.lmax.disruptor.Sequence;
-import com.lmax.disruptor.SequenceReportingEventHandler;
 
 /**
  * This event handler gets passed messages from the RingBuffer as they become
  * available. Processing of these messages is done in a separate thread,
  * controlled by the {@code Executor} passed to the {@code Disruptor}
  * constructor.
  */
-public class RingBufferLogEventHandler implements SequenceReportingEventHandler<RingBufferLogEvent>, LifecycleAware {
+public class RingBufferLogEventHandler implements EventHandler<RingBufferLogEvent> {
 
     private static final int NOTIFY_PROGRESS_THRESHOLD = 50;
     private Sequence sequenceCallback;

File: log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/MDCContextMap.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.slf4j;
 
+import java.util.HashMap;
 import java.util.Map;
 import java.util.Map.Entry;
 import org.apache.logging.log4j.spi.CleanableThreadContextMap;
@@ -75,13 +76,12 @@ public boolean containsKey(final String key) {
     }
 
     @Override
-    @SuppressWarnings("unchecked") // nothing we can do about this, restricted by SLF4J API
     public Map<String, String> getCopy() {
-        return MDC.getCopyOfContextMap();
+        final Map<String, String> contextMap = MDC.getCopyOfContextMap();
+        return contextMap != null ? contextMap : new HashMap<>();
     }
 
     @Override
-    @SuppressWarnings("unchecked") // nothing we can do about this, restricted by SLF4J API
     public Map<String, String> getImmutableMapOrNull() {
         return MDC.getCopyOfContextMap();
     }

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/package-info.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the license.
  */
 @Export
-@Version("2.21.0")
+@Version("2.21.1")
 package org.apache.logging.log4j.test.junit;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/package-info.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the license.
  */
 @Export
-@Version("2.21.0")
+@Version("2.21.1")
 package org.apache.logging.log4j.test;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/appender/db/jdbc/package-info.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the license.
  */
 @Export
-@Version("2.20.2")
+@Version("2.20.3")
 package org.apache.logging.log4j.core.test.appender.db.jdbc;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/junit/package-info.java
Patch:
@@ -20,7 +20,7 @@
  * @see org.junit.rules.TestRule
  */
 @Export
-@Version("2.21.0")
+@Version("2.21.1")
 package org.apache.logging.log4j.core.test.junit;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/net/ssl/package-info.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the license.
  */
 @Export
-@Version("2.20.1")
+@Version("2.20.2")
 package org.apache.logging.log4j.core.test.net.ssl;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/package-info.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the license.
  */
 @Export
-@Version("2.21.0")
+@Version("2.21.1")
 package org.apache.logging.log4j.core.test;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/smtp/package-info.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the license.
  */
 @Export
-@Version("2.20.1")
+@Version("2.20.2")
 package org.apache.logging.log4j.core.test.smtp;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/TestLogger.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.log4j.test;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.io.ByteArrayOutputStream;
 import java.io.PrintStream;
 import java.util.ArrayList;
@@ -58,6 +59,7 @@ public void logMessage(
     }
 
     @Override
+    @SuppressFBWarnings("INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE")
     protected void log(
             final Level level,
             final Marker marker,

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/DirectoryCleaner.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.log4j.test.junit;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.io.IOException;
 import java.nio.file.FileVisitResult;
 import java.nio.file.Files;
@@ -29,6 +30,7 @@
 
 class DirectoryCleaner extends AbstractFileCleaner {
     @Override
+    @SuppressFBWarnings("PATH_TRAVERSAL_IN")
     Collection<Path> getPathsForTest(final ExtensionContext context) {
         final Collection<Path> paths = new HashSet<>();
         final CleanUpDirectories testClassAnnotation =

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/FileCleaner.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.log4j.test.junit;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
@@ -26,6 +27,7 @@
 
 class FileCleaner extends AbstractFileCleaner {
     @Override
+    @SuppressFBWarnings("PATH_TRAVERSAL_IN")
     Collection<Path> getPathsForTest(final ExtensionContext context) {
         final Collection<Path> paths = new HashSet<>();
         final CleanUpFiles testClassAnnotation = context.getRequiredTestClass().getAnnotation(CleanUpFiles.class);

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/SerialUtil.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.log4j.test.junit;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.ObjectInputStream;
@@ -54,6 +55,7 @@ public static byte[] serialize(final Serializable obj) {
      * @return the deserialized object
      */
     @SuppressWarnings("unchecked")
+    @SuppressFBWarnings("OBJECT_DESERIALIZATION")
     public static <T> T deserialize(final byte[] data) {
         try {
             final ByteArrayInputStream bas = new ByteArrayInputStream(data);

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/AvailablePortFinder.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.log4j.core.test;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.io.IOException;
 import java.net.DatagramSocket;
 import java.net.ServerSocket;
@@ -28,6 +29,7 @@
 /**
  * Finds currently available server ports.
  */
+@SuppressFBWarnings("UNENCRYPTED_SERVER_SOCKET")
 public final class AvailablePortFinder {
 
     /**

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/GcFreeLoggingTestUtil.java
Patch:
@@ -22,6 +22,7 @@
 
 import com.google.monitoring.runtime.instrumentation.AllocationRecorder;
 import com.google.monitoring.runtime.instrumentation.Sampler;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.io.File;
 import java.net.URL;
 import java.nio.charset.Charset;
@@ -206,6 +207,7 @@ private static void singleLoggingIteration(
         logger.fatal(mapMessage); // LOG4J2-1683
     }
 
+    @SuppressFBWarnings("COMMAND_INJECTION")
     public static void runTest(final Class<?> cls) throws Exception {
         final String javaHome = System.getProperty("java.home");
         final String javaBin = javaHome + File.separator + "bin" + File.separator + "java";

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/appender/db/jdbc/JdbcH2TestHelper.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.logging.log4j.core.appender.db.jdbc.AbstractConnectionSource;
 import org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource;
 
+@SuppressFBWarnings("HARD_CODE_PASSWORD")
 public class JdbcH2TestHelper {
 
     /**

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/junit/AbstractExternalFileCleaner.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.log4j.core.test.junit;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.io.File;
 import java.io.IOException;
 import java.io.PrintStream;
@@ -181,6 +182,7 @@ protected void println(final String msg) {
         }
     }
 
+    @SuppressFBWarnings("INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE")
     protected void printStackTrace(final Throwable t) {
         if (printStream != null) {
             t.printStackTrace(printStream);

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/junit/JdbcRule.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.log4j.core.test.junit;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.sql.Connection;
 import java.sql.SQLException;
 import java.sql.Statement;
@@ -33,6 +34,7 @@
  *
  * @since 2.8
  */
+@SuppressFBWarnings("SQL_INJECTION_JDBC")
 public class JdbcRule implements TestRule {
 
     private final ConnectionSource connectionSource;

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/net/mock/MockTcpSyslogServer.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.log4j.core.test.net.mock;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.ServerSocket;
@@ -34,6 +35,7 @@ public MockTcpSyslogServer() throws IOException {
         this(0);
     }
 
+    @SuppressFBWarnings("UNENCRYPTED_SERVER_SOCKET")
     private MockTcpSyslogServer(final int port) throws IOException {
         super(0, port);
         serverSocket = new ServerSocket(port);

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/net/ssl/TlsSyslogTestUtil.java
Patch:
@@ -16,9 +16,11 @@
  */
 package org.apache.logging.log4j.core.test.net.ssl;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.ArrayList;
 import java.util.Random;
 
+@SuppressFBWarnings("PREDICTABLE_RANDOM")
 public class TlsSyslogTestUtil {
     public static final String ABC = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
     public static final String NUMBERS = "0123456789";

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/smtp/SimpleSmtpServer.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.log4j.core.test.smtp;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
@@ -77,6 +78,7 @@ public SimpleSmtpServer(final int port) {
      * Main loop of the SMTP server.
      */
     @Override
+    @SuppressFBWarnings("UNENCRYPTED_SERVER_SOCKET")
     public void run() {
         stopped = false;
         try {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/Filter.java
Patch:
@@ -77,7 +77,7 @@ public static Result toResult(final String name) {
          *
          * @param name The Result enum name, case-insensitive. If null, returns, defaultResult
          * @param defaultResult the Result to return if name is null
-         * @return a Result enum value or null if name is null
+         * @return a Result enum value ({@code defaultResult} if name is null)
          */
         public static Result toResult(final String name, final Result defaultResult) {
             return EnglishEnums.valueOf(Result.class, name, defaultResult);

File: log4j-api-java9/src/test/java/org/apache/logging/log4j/util/java9/StackLocatorTest.java
Patch:
@@ -131,7 +131,7 @@ public void testCalcLocation() {
         final StackTraceElement element = new Foo().foo();
         assertEquals("org.apache.logging.log4j.util.java9.StackLocatorTest$Foo", element.getClassName());
         // The line number below may need adjustment if this file is changed.
-        assertEquals(100, element.getLineNumber());
+        assertEquals(99, element.getLineNumber());
     }
 
     @Test

File: log4j-api-test/src/test/java/org/apache/logging/log4j/LoggerTest.java
Patch:
@@ -76,7 +76,7 @@ public void builder() {
         assertThat(
                 "Incorrect message 1",
                 results.get(0),
-                equalTo(" DEBUG org.apache.logging.log4j.LoggerTest.builder(LoggerTest.java:73) Hello"));
+                equalTo(" DEBUG org.apache.logging.log4j.LoggerTest.builder(LoggerTest.java:72) Hello"));
         assertThat("Incorrect message 2", results.get(1), equalTo("test ERROR Hello John"));
         assertThat(
                 "Incorrect message 3",
@@ -85,7 +85,7 @@ public void builder() {
         assertThat(
                 "Throwable incorrect in message 3",
                 results.get(2),
-                containsString("org.apache.logging.log4j.LoggerTest.builder(LoggerTest.java:75)"));
+                containsString("org.apache.logging.log4j.LoggerTest.builder(LoggerTest.java:74)"));
     }
 
     @Test

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/LoggerTest.java
Patch:
@@ -127,7 +127,7 @@ public void builder() {
         final List<LogEvent> events = app.getEvents();
         assertEventCount(events, 3);
         assertEquals(
-                "org.apache.logging.log4j.core.LoggerTest.builder(LoggerTest.java:116)",
+                "org.apache.logging.log4j.core.LoggerTest.builder(LoggerTest.java:123)",
                 events.get(0).getSource().toString(),
                 "Incorrect location");
         assertEquals(Level.DEBUG, events.get(0).getLevel(), "Incorrect Level");

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/MemoryMappedFileAppenderTest.java
Patch:
@@ -116,7 +116,7 @@ void testMemMapLocation(final LoggerContext context) throws Exception {
                 both(hasSize(2))
                         .and(
                                 contains(
-                                        "org.apache.logging.log4j.core.appender.MemoryMappedFileAppenderTest.testMemMapLocation(MemoryMappedFileAppenderTest.java:104): Test log1",
-                                        "org.apache.logging.log4j.core.appender.MemoryMappedFileAppenderTest.testMemMapLocation(MemoryMappedFileAppenderTest.java:107): Test log2")));
+                                        "org.apache.logging.log4j.core.appender.MemoryMappedFileAppenderTest.testMemMapLocation(MemoryMappedFileAppenderTest.java:103): Test log1",
+                                        "org.apache.logging.log4j.core.appender.MemoryMappedFileAppenderTest.testMemMapLocation(MemoryMappedFileAppenderTest.java:106): Test log2")));
     }
 }

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/PatternSelectorTest.java
Patch:
@@ -57,7 +57,7 @@ public void testMarkerPatternSelector() throws Exception {
                 .build();
         final String result1 = new FauxLogger().formatEvent(event1, layout);
         final String expectSuffix1 =
-                String.format("====== PatternSelectorTest.testMarkerPatternSelector:53 entry ======%n");
+                String.format("====== PatternSelectorTest.testMarkerPatternSelector:58 entry ======%n");
         assertTrue(result1.endsWith(expectSuffix1), "Unexpected result: " + result1);
         final LogEvent event2 = Log4jLogEvent.newBuilder() //
                 .setLoggerName(this.getClass().getName())
@@ -89,7 +89,7 @@ public void testLevelPatternSelector() throws Exception {
                 .build();
         final String result1 = new FauxLogger().formatEvent(event1, layout);
         final String expectSuffix1 =
-                String.format("====== PatternSelectorTest.testLevelPatternSelector:78 entry ======%n");
+                String.format("====== PatternSelectorTest.testLevelPatternSelector:90 entry ======%n");
         assertTrue(result1.endsWith(expectSuffix1), "Unexpected result: " + result1);
         final LogEvent event2 = Log4jLogEvent.newBuilder() //
                 .setLoggerName(this.getClass().getName())

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/pattern/PatternParserTest.java
Patch:
@@ -113,7 +113,7 @@ public void testCustomPattern() {
             formatter.format(event, buf);
         }
         final String str = buf.toString();
-        final String expected = "INFO  [PatternParserTest        :99  ] - Hello, world" + Strings.LINE_SEPARATOR;
+        final String expected = "INFO  [PatternParserTest        :98  ] - Hello, world" + Strings.LINE_SEPARATOR;
         assertTrue(str.endsWith(expected), "Expected to end with: " + expected + ". Actual: " + str);
     }
 

File: log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataId.java
Patch:
@@ -252,6 +252,7 @@ public StructuredDataId makeId(final String defaultId, final String anEnterprise
      * @deprecated Use {@link StructuredDataId#makeId(String, String)} instead
      */
     @Deprecated
+    @InlineMe(replacement = "this.makeId(defaultId, String.valueOf(anEnterpriseNumber))")
     public StructuredDataId makeId(final String defaultId, final int anEnterpriseNumber) {
         return makeId(defaultId, String.valueOf(anEnterpriseNumber));
     }

File: log4j-api/src/main/java/org/apache/logging/log4j/util/Constants.java
Patch:
@@ -107,7 +107,8 @@ private static int getMajorVersion() {
     }
 
     static int getMajorVersion(final String version) {
-        final String[] parts = version.split("-|\\.", -1);
+        // Split into `major.minor.rest`
+        final String[] parts = version.split("-|\\.", 3);
         boolean isJEP223;
         try {
             final int token = Integer.parseInt(parts[0]);

File: log4j-api/src/main/java/org/apache/logging/log4j/util/ProcessIdUtil.java
Patch:
@@ -39,8 +39,8 @@ public static String getProcessId() {
 
             final Object runtimeMXBean = getRuntimeMXBean.invoke(null);
             final String name = (String) getName.invoke(runtimeMXBean);
-            //String name = ManagementFactory.getRuntimeMXBean().getName(); //JMX not allowed on Android
-            return name.split("@", -1)[0]; // likely works on most platforms
+            // Split into first@rest
+            return name.split("@", 2)[0]; // likely works on most platforms
         } catch (final Exception ex) {
             try {
                 return new File("/proc/self").getCanonicalFile().getName(); // try a Linux-specific way

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncQueueFullPolicyFactory.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.core.util.Loader;
 import org.apache.logging.log4j.status.StatusLogger;
 import org.apache.logging.log4j.util.LoaderUtil;
 import org.apache.logging.log4j.util.PropertiesUtil;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncWaitStrategyFactoryConfig.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.logging.log4j.core.config.plugins.PluginBuilderAttribute;
 import org.apache.logging.log4j.core.config.plugins.PluginBuilderFactory;
 import org.apache.logging.log4j.core.config.plugins.validation.constraints.Required;
-import org.apache.logging.log4j.core.util.Loader;
 import org.apache.logging.log4j.status.StatusLogger;
 import org.apache.logging.log4j.util.LoaderUtil;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.util.Constants;
 import org.apache.logging.log4j.core.util.Integers;
-import org.apache.logging.log4j.core.util.Loader;
 import org.apache.logging.log4j.status.StatusLogger;
 import org.apache.logging.log4j.util.LoaderUtil;
 import org.apache.logging.log4j.util.PropertiesUtil;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java
Patch:
@@ -51,11 +51,9 @@
 import org.apache.logging.log4j.core.lookup.StrSubstitutor;
 import org.apache.logging.log4j.core.util.Booleans;
 import org.apache.logging.log4j.core.util.Constants;
-import org.apache.logging.log4j.core.util.Loader;
 import org.apache.logging.log4j.message.Message;
 import org.apache.logging.log4j.util.LoaderUtil;
 import org.apache.logging.log4j.util.PerformanceSensitive;
-import org.apache.logging.log4j.util.PropertiesUtil;
 import org.apache.logging.log4j.util.StackLocatorUtil;
 import org.apache.logging.log4j.util.Strings;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ContextDataInjectorFactory.java
Patch:
@@ -19,13 +19,11 @@
 import org.apache.logging.log4j.ThreadContext;
 import org.apache.logging.log4j.core.ContextDataInjector;
 import org.apache.logging.log4j.core.LogEvent;
-import org.apache.logging.log4j.core.util.Loader;
 import org.apache.logging.log4j.spi.CopyOnWrite;
 import org.apache.logging.log4j.spi.DefaultThreadContextMap;
 import org.apache.logging.log4j.spi.ReadOnlyThreadContextMap;
 import org.apache.logging.log4j.status.StatusLogger;
 import org.apache.logging.log4j.util.LoaderUtil;
-import org.apache.logging.log4j.util.PropertiesUtil;
 import org.apache.logging.log4j.util.ReadOnlyStringMap;
 
 /**
@@ -43,7 +41,7 @@
  */
 public class ContextDataInjectorFactory {
 
-    public static final String CONTEXT_DATA_INJECTOR_PROPERTY = "log4j2.ContextDataInjector";
+    private static final String CONTEXT_DATA_INJECTOR_PROPERTY = "log4j2.ContextDataInjector";
 
     /**
      * Returns a new {@code ContextDataInjector} instance based on the value of system property

File: log4j-api/src/main/java/org/apache/logging/log4j/Logger.java
Patch:
@@ -70,7 +70,7 @@
  * </pre>
  *
  * <p>
- * Note that although {@link MessageSupplier} is provided, using {@link Supplier<Message>} works just the
+ * Note that although {@link MessageSupplier} is provided, using {@link Supplier Supplier&lt;Message&gt;} works just the
  * same. MessageSupplier was deprecated in 2.6 and un-deprecated in 2.8.1. Anonymous class usage of these APIs
  * should prefer using Supplier instead.
  * </p>

File: log4j-api/src/main/java/org/apache/logging/log4j/util/StackLocator.java
Patch:
@@ -22,7 +22,9 @@
 import java.util.function.Predicate;
 
 /**
- * <em>Consider this class private.</em> Provides various methods to determine the caller class. <h3>Background</h3>
+ * <em>Consider this class private.</em> Provides various methods to determine the caller class.
+ *
+ * <h2>Background</h2>
  * <p>
  * This method, available only in the Oracle/Sun/OpenJDK implementations of the Java Virtual Machine, is a much more
  * efficient mechanism for determining the {@link Class} of the caller of a particular method. When it is not available,

File: log4j-api/src/main/java/org/apache/logging/log4j/util/StackLocatorUtil.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.logging.log4j.status.StatusLogger;
 
 /**
- * <em>Consider this class private.</em> Provides various methods to determine the caller class. <h3>Background</h3>
+ * <em>Consider this class private.</em> Provides various methods to determine the caller class.
  */
 @InternalApi
 public final class StackLocatorUtil {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/SocketAppender.java
Patch:
@@ -55,12 +55,12 @@ public class SocketAppender extends AbstractOutputStreamAppender<AbstractSocketM
 
     /**
      * Subclasses can extend this abstract Builder.
-     * <h1>Defaults</h1>
+     * <h2>Defaults</h2>
      * <ul>
      * <li>host: "localhost"</li>
      * <li>protocol: "TCP"</li>
      * </ul>
-     * <h1>Changes</h1>
+     * <h2>Changes</h2>
      * <ul>
      * <li>Removed deprecated "delayMillis", use "reconnectionDelayMillis".</li>
      * <li>Removed deprecated "reconnectionDelay", use "reconnectionDelayMillis".</li>

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/YamlLayout.java
Patch:
@@ -33,12 +33,12 @@
 /**
  * Appends a series of YAML events as strings serialized as bytes.
  *
- * <h3>Encoding</h3>
+ * <h2>Encoding</h2>
  * <p>
  * Appenders using this layout should have their {@code charset} set to {@code UTF-8} or {@code UTF-16}, otherwise
  * events containing non ASCII characters could result in corrupted log files.
  * </p>
- * <h3>Additional Fields</h3>
+ * <h2>Additional Fields</h2>
  * <p>
  * This property allows addition of custom fields into generated JSON.
  * {@code <YamlLayout><KeyValuePair key="foo" value="bar"/></YamlLayout>} inserts {@code foo: "bar"} directly

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/StringBuilderWriter.java
Patch:
@@ -28,7 +28,7 @@
  * For safe usage with multiple {@link Thread}s then
  * <code>java.io.StringWriter</code> should be used.
  *
- * <h3>History</h3>
+ * <h2>History</h2>
  * <ol>
  * <li>Copied from Apache Commons IO revision 1681000.</li>
  * <li>Pick up Javadoc updates from revision 1722253.</li>

File: log4j-api-java9/src/main/java/org/apache/logging/log4j/util/Base64Util.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.log4j.util;
 
+import java.nio.charset.Charset;
 import java.util.Base64;
 
 
@@ -31,6 +32,6 @@ private Base64Util() {
     }
 
     public static String encode(final String str) {
-        return str != null ? encoder.encodeToString(str.getBytes()) : null;
+        return str != null ? encoder.encodeToString(str.getBytes(Charset.defaultCharset())) : null;
     }
 }

File: log4j-api-test/src/test/java/org/apache/logging/log4j/util/PropertySourceTokenizerTest.java
Patch:
@@ -53,7 +53,7 @@ public static Object[][] data() {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void testTokenize(final CharSequence value, final List<CharSequence> expectedTokens) {
+    public void testTokenize(final String value, final List<CharSequence> expectedTokens) {
         final List<CharSequence> tokens = PropertySource.Util.tokenize(value);
         assertEquals(expectedTokens, tokens);
     }

File: log4j-api/src/main/java/org/apache/logging/log4j/Level.java
Patch:
@@ -122,6 +122,8 @@ public final class Level implements Comparable<Level>, Serializable {
     public static final Level ALL = new Level("ALL", StandardLevel.ALL.intLevel());
 
     /**
+     * Category to be used by custom levels.
+     *
      * @since 2.1
      */
     public static final String CATEGORY = "Level";
@@ -365,7 +367,7 @@ public static <T extends Enum<T>> T valueOf(final Class<T> enumType, final Strin
     }
 
     // for deserialization
-    protected Object readResolve() {
+    private Object readResolve() {
         return Level.valueOf(this.name);
     }
 }

File: log4j-api/src/main/java/org/apache/logging/log4j/LogBuilder.java
Patch:
@@ -95,6 +95,7 @@ default void log(String message, Object... params) {
      * @param message The message.
      * @param params Parameters to the message.
      */
+    @SuppressWarnings("deprecation")
     default void log(String message, Supplier<?>... params) {
     }
 
@@ -109,6 +110,7 @@ default void log(Message message) {
      * Causes all the data collected to be logged along with the message. Interface default method does nothing.
      * @param messageSupplier The supplier of the message to log.
      */
+    @SuppressWarnings("deprecation")
     default void log(Supplier<Message> messageSupplier) {
     }
 
@@ -119,6 +121,7 @@ default void log(Supplier<Message> messageSupplier) {
      * @return the message logger or {@code null} if no logging occurred.
      * @since 2.20
      */
+    @SuppressWarnings("deprecation")
     default Message logAndGet(final Supplier<Message> messageSupplier) {
         return null;
     }

File: log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java
Patch:
@@ -65,7 +65,7 @@ public class LogManager {
 
     private static volatile LoggerContextFactory factory;
 
-    /**
+    /*
      * Scans the classpath to find all logging implementation. Currently, only one will be used but this could be
      * extended to allow multiple implementations to be used.
      */
@@ -92,7 +92,7 @@ public class LogManager {
                     final Class<? extends LoggerContextFactory> factoryClass = provider.loadLoggerContextFactory();
                     if (factoryClass != null) {
                         try {
-                            factories.put(provider.getPriority(), factoryClass.newInstance());
+                            factories.put(provider.getPriority(), factoryClass.getDeclaredConstructor().newInstance());
                         } catch (final Exception e) {
                             LOGGER.error("Unable to create class {} specified in provider URL {}",
                                     factoryClass.getName(), provider.getUrl(), e);

File: log4j-api/src/main/java/org/apache/logging/log4j/internal/DefaultLogBuilder.java
Patch:
@@ -116,6 +116,7 @@ public void log(Message message) {
     }
 
     @Override
+    @SuppressWarnings("deprecation")
     public Message logAndGet(final Supplier<Message> messageSupplier) {
         Message message = null;
         if (isValid() && isEnabled(message = messageSupplier.get())) {
@@ -146,6 +147,7 @@ public void log(String message, Object... params) {
     }
 
     @Override
+    @SuppressWarnings("deprecation")
     public void log(String message, Supplier<?>... params) {
         final Object[] objs;
         if (isValid() && isEnabled(message, objs = LambdaUtil.getAll(params))) {
@@ -154,6 +156,7 @@ public void log(String message, Supplier<?>... params) {
     }
 
     @Override
+    @SuppressWarnings("deprecation")
     public void log(final Supplier<Message> messageSupplier) {
         logAndGet(messageSupplier);
     }

File: log4j-api/src/main/java/org/apache/logging/log4j/message/DefaultFlowMessageFactory.java
Patch:
@@ -58,8 +58,8 @@ public DefaultFlowMessageFactory(final String entryText, final String exitText)
 
     private static MessageFactory createDefaultMessageFactory() {
         try {
-            return AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS.newInstance();
-        } catch (final InstantiationException | IllegalAccessException e) {
+            return AbstractLogger.DEFAULT_MESSAGE_FACTORY_CLASS.getDeclaredConstructor().newInstance();
+        } catch (final ReflectiveOperationException e) {
             throw new IllegalStateException(e);
         }
     }

File: log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java
Patch:
@@ -472,7 +472,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || this.getClass() != o.getClass()) {
+        if (!(o instanceof MapMessage)) {
             return false;
         }
 

File: log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessageJsonFormatter.java
Patch:
@@ -267,7 +267,7 @@ private static void formatNumber(final StringBuilder sb, final Number number) {
         } else {
             final long longNumber = number.longValue();
             final double doubleValue = number.doubleValue();
-            if (Double.compare(longNumber, doubleValue) == 0) {
+            if (Double.compare((double) longNumber, doubleValue) == 0) {
                 sb.append(longNumber);
             } else {
                 sb.append(doubleValue);

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ObjectMessage.java
Patch:
@@ -102,7 +102,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (!(o instanceof ObjectMessage)) {
             return false;
         }
 

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterFormatter.java
Patch:
@@ -151,7 +151,8 @@ static void analyzePattern(
     }
 
     /**
-     * @see #analyzePattern(String, int, MessagePatternAnalysis)
+     *See {@link #analyzePattern(String, int, MessagePatternAnalysis)}.
+
      */
     static final class MessagePatternAnalysis implements Serializable {
 

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableMessageFactory.java
Patch:
@@ -30,6 +30,7 @@
  * @since 2.6
  */
 @PerformanceSensitive("allocation")
+@SuppressWarnings("ThreadLocalUsage")
 public final class ReusableMessageFactory implements MessageFactory2, Serializable {
 
     /**

File: log4j-api/src/main/java/org/apache/logging/log4j/message/SimpleMessage.java
Patch:
@@ -89,11 +89,12 @@ public Object[] getParameters() {
     }
 
     @Override
+    @SuppressWarnings("UndefinedEquals")
     public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (!(o instanceof SimpleMessage)) {
             return false;
         }
 

File: log4j-api/src/main/java/org/apache/logging/log4j/message/StringFormattedMessage.java
Patch:
@@ -131,7 +131,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (!(o instanceof StringFormattedMessage)) {
             return false;
         }
 

File: log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java
Patch:
@@ -416,7 +416,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (!(o instanceof StructuredDataMessage)) {
             return false;
         }
 

File: log4j-api/src/main/java/org/apache/logging/log4j/message/package-info.java
Patch:
@@ -19,9 +19,6 @@
  * Public Message Types used for Log4j 2. Users may implement their own Messages.
  */
 @Export
-/**
- * Bumped to 2.21.0, since FormattedMessage behavior changed.
- */
 @Version("2.21.0")
 package org.apache.logging.log4j.message;
 

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/ExtendedLogger.java
Patch:
@@ -533,6 +533,7 @@ void logIfEnabled(String fqcn, Level level, Marker marker, String message, Objec
      * @param message The message format.
      * @param paramSuppliers An array of functions, which when called, produce the desired log message parameters.
      */
+    @SuppressWarnings("deprecation")
     void logIfEnabled(String fqcn, Level level, Marker marker, String message, Supplier<?>... paramSuppliers);
 
     /**
@@ -545,6 +546,7 @@ void logIfEnabled(String fqcn, Level level, Marker marker, String message, Objec
      * @param msgSupplier A function, which when called, produces the desired log message.
      * @param t the exception to log, including its stack trace.
      */
+    @SuppressWarnings("deprecation")
     void logIfEnabled(String fqcn, Level level, Marker marker, Supplier<?> msgSupplier, Throwable t);
 
 }

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java
Patch:
@@ -224,7 +224,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (!(o instanceof Provider)) {
             return false;
         }
 

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/ThreadContextMapFactory.java
Patch:
@@ -88,7 +88,7 @@ public static ThreadContextMap createThreadContextMap() {
             try {
                 final Class<?> clazz = cl.loadClass(ThreadContextMapName);
                 if (ThreadContextMap.class.isAssignableFrom(clazz)) {
-                    result = (ThreadContextMap) clazz.newInstance();
+                    result = (ThreadContextMap) clazz.getDeclaredConstructor().newInstance();
                 }
             } catch (final ClassNotFoundException cnfe) {
                 LOGGER.error("Unable to locate configured ThreadContextMap {}", ThreadContextMapName);
@@ -103,7 +103,7 @@ public static ThreadContextMap createThreadContextMap() {
                     final Class<? extends ThreadContextMap> clazz = provider.loadThreadContextMap();
                     if (clazz != null) {
                         try {
-                            result = clazz.newInstance();
+                            result = clazz.getDeclaredConstructor().newInstance();
                             break;
                         } catch (final Exception e) {
                             LOGGER.error("Unable to locate or load configured ThreadContextMap {}",

File: log4j-api/src/main/java/org/apache/logging/log4j/status/StatusData.java
Patch:
@@ -122,6 +122,7 @@ public Throwable getThrowable() {
             value = "INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE",
             justification = "Log4j prints stacktraces only to logs, which should be private."
     )
+    @SuppressWarnings("DefaultCharset")
     public String getFormattedStatus() {
         final StringBuilder sb = new StringBuilder();
         final SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss,SSS");

File: log4j-api/src/main/java/org/apache/logging/log4j/util/Base64Util.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.logging.log4j.util;
 
 import java.lang.reflect.Method;
+import java.nio.charset.Charset;
 
 import org.apache.logging.log4j.LoggingException;
 
@@ -53,7 +54,7 @@ public static String encode(final String str) {
         if (str == null) {
             return null;
         }
-        final byte [] data = str.getBytes();
+        final byte [] data = str.getBytes(Charset.defaultCharset());
         if (encodeMethod != null) {
             try {
                 return (String) encodeMethod.invoke(encoder, data);

File: log4j-api/src/main/java/org/apache/logging/log4j/util/Constants.java
Patch:
@@ -107,7 +107,7 @@ private static int getMajorVersion() {
     }
 
     static int getMajorVersion(final String version) {
-        final String[] parts = version.split("-|\\.");
+        final String[] parts = version.split("-|\\.", -1);
         boolean isJEP223;
         try {
             final int token = Integer.parseInt(parts[0]);

File: log4j-api/src/main/java/org/apache/logging/log4j/util/LambdaUtil.java
Patch:
@@ -37,6 +37,7 @@ private LambdaUtil() {
      * @return an array containing the results of evaluating the lambda expressions (or {@code null} if the suppliers
      *         array was {@code null}
      */
+    @SuppressWarnings("deprecation")
     public static Object[] getAll(final Supplier<?>... suppliers) {
         if (suppliers == null) {
             return null;
@@ -55,6 +56,7 @@ public static Object[] getAll(final Supplier<?>... suppliers) {
      * @return the results of evaluating the lambda expression (or {@code null} if the supplier
      *         was {@code null}
      */
+    @SuppressWarnings("deprecation")
     public static Object get(final Supplier<?> supplier) {
         if (supplier == null) {
             return null;
@@ -83,6 +85,7 @@ public static Message get(final MessageSupplier supplier) {
      * @return the Message resulting from evaluating the lambda expression or the Message created by the factory for
      * supplied values that are not of type Message
      */
+    @SuppressWarnings("deprecation")
     public static Message getMessage(final Supplier<?> supplier, final MessageFactory messageFactory) {
         if (supplier == null) {
             return null;

File: log4j-api/src/main/java/org/apache/logging/log4j/util/LoaderUtil.java
Patch:
@@ -484,7 +484,7 @@ public boolean equals(final Object o) {
             if (this == o) {
                 return true;
             }
-            if (o == null || getClass() != o.getClass()) {
+            if (!(o instanceof UrlResource)) {
                 return false;
             }
 

File: log4j-api/src/main/java/org/apache/logging/log4j/util/LowLevelLogUtil.java
Patch:
@@ -32,6 +32,7 @@
  */
 final class LowLevelLogUtil {
 
+    @SuppressWarnings("DefaultCharset")
     private static PrintWriter writer = new PrintWriter(System.err, true);
 
     /**
@@ -66,6 +67,7 @@ public static void logException(final String message, final Throwable exception)
      *
      * @param out the OutputStream to log to
      */
+    @SuppressWarnings("DefaultCharset")
     public static void setOutputStream(final OutputStream out) {
         LowLevelLogUtil.writer = new PrintWriter(Objects.requireNonNull(out), true);
     }

File: log4j-api/src/main/java/org/apache/logging/log4j/util/ProcessIdUtil.java
Patch:
@@ -21,6 +21,8 @@
 import java.lang.reflect.Method;
 
 /**
+ * Provides the PID of the current JVM.
+ *
  * @since 2.9
  */
 public class ProcessIdUtil {
@@ -38,7 +40,7 @@ public static String getProcessId() {
             final Object runtimeMXBean = getRuntimeMXBean.invoke(null);
             final String name = (String) getName.invoke(runtimeMXBean);
             //String name = ManagementFactory.getRuntimeMXBean().getName(); //JMX not allowed on Android
-            return name.split("@")[0]; // likely works on most platforms
+            return name.split("@", -1)[0]; // likely works on most platforms
         } catch (final Exception ex) {
             try {
                 return new File("/proc/self").getCanonicalFile().getName(); // try a Linux-specific way

File: log4j-api/src/main/java/org/apache/logging/log4j/util/ProviderActivator.java
Patch:
@@ -38,6 +38,7 @@ protected ProviderActivator(final Provider provider) {
     }
 
     @Override
+    @SuppressWarnings("JdkObsolete")
     public void start(final BundleContext context) throws Exception {
         final Hashtable<String, String> props = new Hashtable<>();
         props.put(API_VERSION, provider.getVersions());

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/FileOutputTest.java
Patch:
@@ -20,6 +20,7 @@
 import java.nio.file.Path;
 
 import org.apache.logging.log4j.core.test.junit.LoggerContextSource;
+import org.apache.logging.log4j.status.StatusLogger;
 import org.apache.logging.log4j.test.junit.TempLoggingDir;
 import org.junit.jupiter.api.Test;
 
@@ -38,6 +39,8 @@ public class FileOutputTest {
     public void testConfig() throws IOException {
         final Path logFile = loggingPath.resolve("status.log");
         assertThat(logFile).exists().isNotEmptyFile();
+        // Closes the current listeners
+        StatusLogger.getLogger().reset();
     }
 
 }

File: log4j-1.2-api/src/test/java/org/apache/log4j/LayoutTest.java
Patch:
@@ -30,20 +30,20 @@ public class LayoutTest extends TestCase {
      */
     private static final class MockLayout extends Layout {
         /**
-         * @{inheritDoc}
+         * {@inheritDoc}
          */
         public void activateOptions() {
         }
 
         /**
-         * @{inheritDoc}
+         * {@inheritDoc}
          */
         public String format(final LoggingEvent event) {
             return "Mock";
         }
 
         /**
-         * @{inheritDoc}
+         * {@inheritDoc}
          */
         public boolean ignoresThrowable() {
             return true;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/StringLayout.java
Patch:
@@ -19,7 +19,7 @@
 import java.nio.charset.Charset;
 
 /**
- * Instantiates the @{link Layout} type for String-based layouts.
+ * Instantiates the {@link Layout} type for String-based layouts.
  */
 public interface StringLayout extends Layout<String> {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/AbstractDriverManagerConnectionSource.java
Patch:
@@ -155,7 +155,7 @@ public Connection getConnection() throws SQLException {
         } else {
             connection = DriverManager.getConnection(actualConnectionString, toString(userName), toString(password));
         }
-        LOGGER.debug("{} acquired connection for '{}': {} ({}@{})", getClass().getSimpleName(), actualConnectionString,
+        LOGGER.debug("{} acquired connection for '{}': {} ({}{@})", getClass().getSimpleName(), actualConnectionString,
                 connection, connection.getClass().getName(), Integer.toHexString(connection.hashCode()));
         return connection;
     }

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/StatusLoggerExtension.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.io.IOException;
 import java.time.Instant;
+import java.time.ZoneId;
 import java.time.format.DateTimeFormatter;
 import java.util.ArrayList;
 import java.util.List;
@@ -141,13 +142,12 @@ public void handleException(final ExtensionContext context, final Throwable thro
                     PropertiesUtil.getProperties(),
                     System.err);
             logger.error("Test {} failed.\nDumping status data:", context.getDisplayName());
+            final DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_TIME.withZone(ZoneId.systemDefault());
             statusListener.getStatusData().forEach(data -> {
                 logger.atLevel(data.getLevel())
                         .withThrowable(data.getThrowable())
                         .withLocation(data.getStackTraceElement())
-                        .log("{} {}",
-                                DateTimeFormatter.ISO_LOCAL_TIME.format(Instant.ofEpochMilli(data.getTimestamp())),
-                                data.getMessage());
+                        .log("{} {}", formatter.format(Instant.ofEpochMilli(data.getTimestamp())), data.getMessage());
             });
         }
     }

File: log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/package-info.java
Patch:
@@ -19,7 +19,7 @@
  */
 @Export
 @Open("org.apache.logging.log4j.core")
-@Version("2.20.1")
+@Version("2.20.2")
 package org.apache.logging.log4j.flume.appender;
 
 import aQute.bnd.annotation.jpms.Open;

File: log4j-jul/src/main/java/org/apache/logging/log4j/jul/package-info.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the license.
  */
 @Export
-@Version("2.20.1")
+@Version("2.20.2")
 package org.apache.logging.log4j.jul;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-1.2-api/src/main/java/org/apache/log4j/helpers/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Log4j 1.x compatibility layer.
  */
 @Export
-@Version("2.20.1")
+@Version("2.20.2")
 package org.apache.log4j.helpers;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-1.2-api/src/main/java/org/apache/log4j/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Log4j 1.x compatibility layer.
  */
 @Export
-@Version("2.20.1")
+@Version("2.20.2")
 package org.apache.log4j;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-1.2-api/src/main/java/org/apache/log4j/xml/package-info.java
Patch:
@@ -18,7 +18,7 @@
  * Log4j 1.x compatibility layer.
  */
 @Export
-@Version("2.20.1")
+@Version("2.20.2")
 package org.apache.log4j.xml;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-api/src/main/java/org/apache/logging/log4j/simple/package-info.java
Patch:
@@ -20,7 +20,7 @@
  * Providers are able to be loaded at runtime.
  */
 @Export
-@Version("2.20.1")
+@Version("2.20.2")
 package org.apache.logging.log4j.simple;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-api/src/main/java/org/apache/logging/log4j/status/package-info.java
Patch:
@@ -19,7 +19,7 @@
  * used by applications reporting on the status of the logging system
  */
 @Export
-@Version("2.20.1")
+@Version("2.20.2")
 package org.apache.logging.log4j.status;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-api/src/main/java/org/apache/logging/log4j/util/package-info.java
Patch:
@@ -20,7 +20,7 @@
  * There are no guarantees for binary or logical compatibility in this package.
  */
 @Export
-@Version("2.22.0")
+@Version("2.21.0")
 package org.apache.logging.log4j.util;
 
 import org.osgi.annotation.bundle.Export;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java
Patch:
@@ -79,7 +79,6 @@
  * </p>
  *
  * @since Apache Commons Lang 3.2
- * @see FastDateParser
  */
 public class FastDatePrinter implements DatePrinter, Serializable {
     // A lot of the speed in this class comes from caching, but some comes

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MdcPatternConverter.java
Patch:
@@ -146,7 +146,7 @@ private static void appendSelectedKeys(final String[] keys, final ReadOnlyString
 
     @Override
     public String emptyVariableOutput() {
-        return "{}";
+        return key == null ? "{}" : "";
     }
 
 }

File: log4j-api-test/src/test/java/org/apache/logging/log4j/util/SortedArrayStringMapTest.java
Patch:
@@ -129,7 +129,7 @@ public void testDeserializationOfUnknownClass() throws Exception {
         }
         final String classpath = createClassPath(SortedArrayStringMap.class, DeserializerHelper.class);
         final Process process = new ProcessBuilder("java", "-cp", classpath,
-                DeserializerHelper.class.getName(), file.getPath()).start();
+                DeserializerHelper.class.getName(), file.getPath(), "org.junit.runner.Result").start();
         final BufferedReader in = new BufferedReader(new InputStreamReader(process.getErrorStream()));
         final int exitValue = process.waitFor();
 

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableParameterizedMessage.java
Patch:
@@ -347,4 +347,7 @@ public void clear() { // LOG4J2-1583
         }
     }
 
+    private Object writeReplace() {
+        return memento();
+    }
 }

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableMessageFactory.java
Patch:
@@ -38,9 +38,9 @@ public final class ReusableMessageFactory implements MessageFactory2, Serializab
     public static final ReusableMessageFactory INSTANCE = new ReusableMessageFactory();
 
     private static final long serialVersionUID = 1L;
-    private final ThreadLocal<ReusableParameterizedMessage> threadLocalParameterized = new ThreadLocal<>();
-    private final ThreadLocal<ReusableSimpleMessage> threadLocalSimpleMessage = new ThreadLocal<>();
-    private final ThreadLocal<ReusableObjectMessage> threadLocalObjectMessage = new ThreadLocal<>();
+    private transient final ThreadLocal<ReusableParameterizedMessage> threadLocalParameterized = new ThreadLocal<>();
+    private transient final ThreadLocal<ReusableSimpleMessage> threadLocalSimpleMessage = new ThreadLocal<>();
+    private transient final ThreadLocal<ReusableObjectMessage> threadLocalObjectMessage = new ThreadLocal<>();
 
     /**
      * Constructs a message factory.

File: log4j-layout-template-json-test/src/main/java/org/apache/logging/log4j/layout/template/json/BlackHoleByteBufferDestination.java
Patch:
@@ -35,6 +35,7 @@ public ByteBuffer getByteBuffer() {
     }
 
     @Override
+    @SuppressWarnings("ReferenceEquality")
     public ByteBuffer drain(final ByteBuffer byteBuffer) {
         byteBuffer.flip();
         if (this.byteBuffer != byteBuffer) {

File: log4j-osgi/src/test/java/org/apache/logging/log4j/osgi/tests/JULProviderTest.java
Patch:
@@ -51,7 +51,7 @@ public class JULProviderTest {
     public Option[] config() {
         return options(
                 linkBundle("org.apache.logging.log4j.api"),
-                linkBundle("org.apache.logging.log4j.to-jul"),
+                linkBundle("org.apache.logging.log4j.to.jul"),
                 // required by Pax Exam's logging
                 linkBundle("slf4j.api"),
                 linkBundle("ch.qos.logback.classic"),
@@ -62,7 +62,7 @@ public Option[] config() {
     @Test(timeout = 10_000L)
     public void testJulFactoryResolves() {
         final Optional<Bundle> julBundle = Stream.of(context.getBundles())
-                .filter(b -> "org.apache.logging.log4j.to-jul".equals(b.getSymbolicName()))
+                .filter(b -> "org.apache.logging.log4j.to.jul".equals(b.getSymbolicName()))
                 .findAny();
         assertTrue(julBundle.isPresent());
         final LoggerContextFactory factory = LogManager.getFactory();

File: log4j-osgi/src/test/java/org/apache/logging/log4j/osgi/tests/SLF4JProviderTest.java
Patch:
@@ -51,7 +51,7 @@ public class SLF4JProviderTest {
     public Option[] config() {
         return options(
                 linkBundle("org.apache.logging.log4j.api"),
-                linkBundle("org.apache.logging.log4j.to-slf4j"),
+                linkBundle("org.apache.logging.log4j.to.slf4j"),
                 linkBundle("slf4j.api"),
                 linkBundle("ch.qos.logback.classic"),
                 linkBundle("ch.qos.logback.core"),
@@ -61,7 +61,7 @@ public Option[] config() {
     @Test(timeout = 10_000L)
     public void testSlf4jFactoryResolves() {
         final Optional<Bundle> slf4jBundle = Stream.of(context.getBundles())
-                .filter(b -> "org.apache.logging.log4j.to-slf4j".equals(b.getSymbolicName()))
+                .filter(b -> "org.apache.logging.log4j.to.slf4j".equals(b.getSymbolicName()))
                 .findAny();
         assertTrue(slf4jBundle.isPresent());
         final LoggerContextFactory factory = LogManager.getFactory();

File: log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/Activator.java
Patch:
@@ -17,7 +17,10 @@
 package org.apache.logging.slf4j;
 
 import org.apache.logging.log4j.util.ProviderActivator;
+import org.osgi.annotation.bundle.Header;
 
+@Header(name = org.osgi.framework.Constants.BUNDLE_ACTIVATOR, value = "${@class}")
+@Header(name = org.osgi.framework.Constants.BUNDLE_ACTIVATIONPOLICY, value = org.osgi.framework.Constants.ACTIVATION_LAZY)
 public class Activator extends ProviderActivator {
 
     public Activator() {

File: log4j-api/src/main/java/org/apache/logging/log4j/BridgeAware.java
Patch:
@@ -24,10 +24,10 @@
 public interface BridgeAware {
 
     /**
-     * Fully qualified class name of the entry point to the logging system. This
+     * To set fully qualified class name of the entry point to the logging system. This
      * class will not appear in the location information.
      *
-     * @param fqcn
+     * @param fqcn fully qualified class name
      */
     void setEntryPoint(final String fqcn);
 }

File: log4j-api/src/main/java/org/apache/logging/log4j/Level.java
Patch:
@@ -28,7 +28,9 @@
 
 /**
  * Levels used for identifying the severity of an event. Levels are organized from most specific to least:
+ * <p>
  * <table>
+ * <caption>Level names with description</caption>
  * <tr>
  * <th>Name</th>
  * <th>Description</th>
@@ -66,6 +68,7 @@
  * <td>All events should be logged.</td>
  * </tr>
  * </table>
+ * </p>
  * <p>
  * Typically, configuring a level in a filter or on a logger will cause logging events of that level and those that are
  * more specific to pass through the filter. A special level, {@link #ALL}, is guaranteed to capture all levels when

File: log4j-api/src/main/java/org/apache/logging/log4j/message/AbstractMessageFactory.java
Patch:
@@ -24,7 +24,9 @@
  * <p>
  * This class is immutable.
  * </p>
- * <h4>Note to implementors</h4>
+ * <p>
+ * <strong>Note to implementors:</strong>
+ * </p>
  * <p>
  * Subclasses can implement the {@link MessageFactory2} methods when they can most effectively build {@link Message}
  * instances. If a subclass does not implement {@link MessageFactory2} methods, these calls are routed through

File: log4j-api/src/main/java/org/apache/logging/log4j/message/FormattedMessageFactory.java
Patch:
@@ -20,7 +20,9 @@
  * Creates {@link FormattedMessage} instances for {@link MessageFactory2} methods (and {@link MessageFactory} by
  * extension.)
  *
- * <h4>Note to implementors</h4>
+ * <p>
+ * <strong>Note to implementors:</strong>
+ * </p>
  * <p>
  * This class implements all {@link MessageFactory2} methods.
  * </p>

File: log4j-api/src/main/java/org/apache/logging/log4j/message/LocalizedMessageFactory.java
Patch:
@@ -22,7 +22,9 @@
  * Creates {@link FormattedMessage} instances for {@link MessageFactory2} methods (and {@link MessageFactory} by
  * extension.)
  *
- * <h4>Note to implementors</h4>
+ * <p>
+ * <strong>Note to implementors:</strong>
+ * </p>
  * <p>
  * This class does <em>not</em> implement any {@link MessageFactory2} methods and lets the superclass funnel those calls
  * through {@link #newMessage(String, Object...)}.

File: log4j-api/src/main/java/org/apache/logging/log4j/message/MessageFormatMessageFactory.java
Patch:
@@ -19,8 +19,9 @@
 /**
  * Creates {@link FormattedMessage} instances for {@link MessageFactory2} methods (and {@link MessageFactory} by
  * extension.)
- *
- * <h4>Note to implementors</h4>
+ * <p>
+ * <strong>Note to implementors:</strong>
+ * </p>
  * <p>
  * This class implements all {@link MessageFactory2} methods.
  * </p>

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterConsumer.java
Patch:
@@ -35,7 +35,7 @@ public interface ParameterConsumer<S> {
      *
      * @param parameter the parameter
      * @param parameterIndex Index of the parameter
-     * @param state
+     * @param state the state data
      */
     void accept(Object parameter, int parameterIndex, S state);
 

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterizedMessageFactory.java
Patch:
@@ -29,7 +29,9 @@
  * This class is immutable.
  * </p>
  *
- * <h4>Note to implementors</h4>
+ * <p>
+ * <strong>Note to implementors:</strong>
+ * </p>
  * <p>
  * This class implements all {@link MessageFactory2} methods.
  * </p>

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterizedNoReferenceMessageFactory.java
Patch:
@@ -31,7 +31,9 @@
  * <p>
  * This class is immutable.
  * </p>
- * <h4>Note to implementors</h4>
+ * <p>
+ * <strong>Note to implementors:</strong>
+ * </p>
  * <p>
  * This class does <em>not</em> implement any {@link MessageFactory2} methods and lets the superclass funnel those calls
  * through {@link #newMessage(String, Object...)}.

File: log4j-api/src/main/java/org/apache/logging/log4j/message/SimpleMessageFactory.java
Patch:
@@ -29,8 +29,9 @@
  * <p>
  * This class is immutable.
  * </p>
- *
- * <h4>Note to implementors</h4>
+ * <p>
+ * <strong>Note to implementors:</strong>
+ * </p>
  * <p>
  * This class implements all {@link MessageFactory2} methods.
  * </p>

File: log4j-api/src/main/java/org/apache/logging/log4j/message/StringFormattedMessage.java
Patch:
@@ -29,7 +29,9 @@
 /**
  * Handles messages that consist of a format string conforming to {@link java.util.Formatter}.
  *
- * <h4>Note to implementors</h4>
+ * <p>
+ * <strong>Note to implementors:</strong>
+ * </p>
  * <p>
  * This class implements the unrolled args API even though StringFormattedMessage does not. This leaves the room for
  * StringFormattedMessage to unroll itself later.

File: log4j-api/src/main/java/org/apache/logging/log4j/message/StringFormatterMessageFactory.java
Patch:
@@ -28,7 +28,9 @@
  * <p>
  * This class is immutable.
  * </p>
- * <h4>Note to implementors</h4>
+ * <p>
+ * <strong>Note to implementors:</strong>
+ * </p>
  * <p>
  * This class implements all {@link MessageFactory2} methods.
  * </p>

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/MutableThreadContextStack.java
Patch:
@@ -47,7 +47,7 @@ public MutableThreadContextStack() {
 
     /**
      * Constructs a new instance.
-     * @param list
+     * @param list Initial elements to be stored in this stack implementation.
      */
     public MutableThreadContextStack(final List<String> list) {
         this.list = new ArrayList<>(list);

File: log4j-api/src/main/java/org/apache/logging/log4j/util/EnglishEnums.java
Patch:
@@ -26,7 +26,7 @@
  * Helps convert English Strings to English Enum values.
  * </p>
  * <p>
- * Enum name arguments are converted internally to upper case with the {@linkplain Locale#ENGLISH ENGLISH} locale to
+ * Enum name arguments are converted internally to upper case with the {@linkplain java.util.Locale#ENGLISH ENGLISH} locale to
  * avoid problems on the Turkish locale. Do not use with Turkish enum values.
  * </p>
  */
@@ -38,7 +38,7 @@ private EnglishEnums() {
     /**
      * Returns the Result for the given string.
      * <p>
-     * The {@code name} is converted internally to upper case with the {@linkplain Locale#ENGLISH ENGLISH} locale to
+     * The {@code name} is converted internally to upper case with the {@linkplain java.util.Locale#ENGLISH ENGLISH} locale to
      * avoid problems on the Turkish locale. Do not use with Turkish enum values.
      * </p>
      *
@@ -54,7 +54,7 @@ public static <T extends Enum<T>> T valueOf(final Class<T> enumType, final Strin
     /**
      * Returns an enum value for the given string.
      * <p>
-     * The {@code name} is converted internally to upper case with the {@linkplain Locale#ENGLISH ENGLISH} locale to
+     * The {@code name} is converted internally to upper case with the {@linkplain java.util.Locale#ENGLISH ENGLISH} locale to
      * avoid problems on the Turkish locale. Do not use with Turkish enum values.
      * </p>
      *

File: log4j-api/src/main/java/org/apache/logging/log4j/util/ProcessIdUtil.java
Patch:
@@ -21,7 +21,7 @@
 import java.lang.reflect.Method;
 
 /**
- * @Since 2.9
+ * @since 2.9
  */
 public class ProcessIdUtil {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/DeleteAction.java
Patch:
@@ -189,8 +189,8 @@ protected FileVisitor<Path> createFileVisitor(final Path visitorBaseDir, final L
      *            href="http://logging.apache.org/log4j/2.x/manual/configuration.html#StatusMessages">status logger</a>
      *            at INFO level. Users can use this to do a dry run to test if their configuration works as expected.
      *            Default is false.
-     * @param PathSorter a plugin implementing the {@link PathSorter} interface
-     * @param PathConditions an array of path conditions (if more than one, they all need to accept a path before it is
+     * @param sorterParameter a plugin implementing the {@link PathSorter} interface
+     * @param pathConditions an array of path conditions (if more than one, they all need to accept a path before it is
      *            deleted).
      * @param config The Configuration.
      * @return A DeleteAction.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/SortingVisitor.java
Patch:
@@ -40,10 +40,9 @@ public class SortingVisitor extends SimpleFileVisitor<Path> {
     private final List<PathWithAttributes> collected = new ArrayList<>();
 
     /**
-     * Constructs a new DeletingVisitor.
+     * Constructs a new SortingVisitor.
      *
-     * @param basePath used to relativize paths
-     * @param pathFilters objects that need to confirm whether a file can be deleted
+     * @param sorter Interface implementation which can sort paths.
      */
     public SortingVisitor(final PathSorter sorter) {
         this.sorter = Objects.requireNonNull(sorter, "sorter");

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/PurgePolicy.java
Patch:
@@ -31,14 +31,14 @@ public interface PurgePolicy {
 
     /**
      * @param key routed appender key
-     * @param event
+     * @param event Provides contextual information about a logged message.
      */
     void update(String key, LogEvent event);
 
     /**
      * Initializes with routing appender
      *
-     * @param routingAppender
+     * @param routingAppender the routed appender for purging
      */
     void initialize(RoutingAppender routingAppender);
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/DiscardingAsyncQueueFullPolicy.java
Patch:
@@ -27,7 +27,7 @@
  * Discarding router extends the DefaultAsyncQueueFullPolicy by first verifying if the queue is fuller than the specified
  * threshold ratio; if this is the case, log events {@linkplain Level#isMoreSpecificThan(Level) more specific} than
  * the specified threshold level are dropped. If this is not the case, the {@linkplain DefaultAsyncQueueFullPolicy
- * default routing rules hold.
+ * default routing} rules hold.
  */
 public class DiscardingAsyncQueueFullPolicy extends DefaultAsyncQueueFullPolicy {
     private static final Logger LOGGER = StatusLogger.getLogger();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultAdvertiser.java
Patch:
@@ -39,7 +39,7 @@ public Object advertise(final Map<String, String> properties) {
 
     /**
      * Does nothing.
-     * @param advertisedObject
+     * @param advertisedObject the advertised object
      */
     @Override
     public void unadvertise(final Object advertisedObject) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/Property.java
Patch:
@@ -79,7 +79,7 @@ public String getValue() {
 
     /**
      * Returns {@code true} if the value contains a substitutable property that requires a lookup to be resolved.
-     * @return {@code true} if the value contains {@code "${"}, {@code false} otherwise
+     * @return {@code true} if the value contains {@code "${}"}, {@code false} otherwise
      */
     public boolean isValueNeedsLookup() {
         return valueNeedsLookup;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/convert/Base64Converter.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.logging.log4j.util.LoaderUtil;
 
 /**
- * @Since 2.9
+ * @since 2.9
  */
 public class Base64Converter {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/convert/HexConverter.java
Patch:
@@ -20,7 +20,7 @@
  * Converts Strings to hex. This is used in place of java.xml.bind.DataTypeConverter which is not available by
  * default in Java 9.
  *
- * @Since 2.9
+ * @since 2.9
  */
 public class HexConverter {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/RegexFilter.java
Patch:
@@ -119,8 +119,8 @@ public String toString() {
      * @param mismatch
      *        The action to perform when a mismatch occurs.
      * @return The RegexFilter.
-     * @throws IllegalAccessException
-     * @throws IllegalArgumentException
+     * @throws IllegalAccessException  When there is no access to the definition of the specified member.
+     * @throws IllegalArgumentException When passed an illegal or inappropriate argument.
      */
     // TODO Consider refactoring to use AbstractFilter.AbstractFilterBuilder
     @PluginFactory

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/StringMatchFilter.java
Patch:
@@ -158,7 +158,7 @@ public static class Builder extends AbstractFilterBuilder<StringMatchFilter.Buil
 
         /**
          * Sets the logging level to use.
-         * @param level the logging level to use.
+         * @param text the logging level to use
          * @return this
          */
         public StringMatchFilter.Builder setMatchString(final String text) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ExtendedClassInfo.java
Patch:
@@ -38,9 +38,9 @@ public final class ExtendedClassInfo implements Serializable {
     /**
      * Constructs a new instance.
      *
-     * @param exact
-     * @param location
-     * @param version
+     * @param exact Whether the class was obtained via {@code sun.reflect.Reflection#getCallerClass(int)}.
+     * @param location a classpath element or a jar
+     * @param version the string describing a version
      */
     public ExtendedClassInfo(final boolean exact, final String location, final String version) {
         this.exact = exact;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ExtendedStackTraceElement.java
Patch:
@@ -28,7 +28,7 @@
  * Complements a StackTraceElement with:
  * </p>
  * <ul>
- * <li>exact: whether the class was obtained via {@link sun.reflect.Reflection#getCallerClass(int)}</li>
+ * <li>exact: whether the class was obtained via {@code sun.reflect.Reflection#getCallerClass(int)}</li>
  * <li>location: a classpath element or a jar</li>
  * <li>version</li>
  * </ul>

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractLayout.java
Patch:
@@ -184,9 +184,9 @@ protected void markEvent() {
      * Subclasses can override this method to provide a garbage-free implementation. For text-based layouts,
      * {@code AbstractStringLayout} provides various convenience methods to help with this:
      * </p>
-     * <pre>@Plugin(name = "MyLayout", category = Node.CATEGORY, elementType = Layout.ELEMENT_TYPE, printObject = true)
+     * <pre> &#64;Plugin(name = "MyLayout", category = Node.CATEGORY, elementType = Layout.ELEMENT_TYPE, printObject = true)
      * public final class MyLayout extends AbstractStringLayout {
-     *     @Override
+     *     &#64;Override
      *     public void encode(LogEvent event, ByteBufferDestination destination) {
      *         StringBuilder text = getStringBuilder();
      *         convertLogEventToText(event, text);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/Facility.java
Patch:
@@ -20,8 +20,9 @@
 
 /**
  *  The facility codes used by the Syslog system.
- *
+ * <p>
  * <table>
+ *     <caption>Facility and corresponding numerical codes</caption>
  *     <tr>
  *         <th>Numerical Code</th>
  *         <th>Facility</th>
@@ -123,6 +124,7 @@
  *         <td>local use 7 (local7)</td>
  *     </tr>
  * </table>
+ * </p>
  */
 public enum Facility {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/MulticastDnsAdvertiser.java
Patch:
@@ -117,7 +117,7 @@ public Object advertise(final Map<String, String> properties) {
     /**
      * Unadvertise the previously advertised entity.
      *
-     * @param serviceInfo
+     * @param serviceInfo instance of {@code javax.jmdns.ServiceInfo}
      */
     @Override
     public void unadvertise(final Object serviceInfo) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NamePatternConverter.java
Patch:
@@ -51,7 +51,6 @@ protected NamePatternConverter(final String name, final String style, final Stri
      *
      * @param original string containing name.
      * @param destination the StringBuilder to write to
-     * @return The abbreviated name.
      */
     protected final void abbreviate(final String original, final StringBuilder destination) {
         abbreviator.abbreviate(original, destination);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/RootThrowablePatternConverter.java
Patch:
@@ -37,8 +37,8 @@ public final class RootThrowablePatternConverter extends ThrowablePatternConvert
     /**
      * Private constructor.
      *
-     * @param config
-     * @param options options, may be null.
+     * @param config the Configuration or {@code null}
+     * @param options Options, may be null.
      */
     private RootThrowablePatternConverter(final Configuration config, final String[] options) {
         super("RootThrowable", "throwable", options, config);
@@ -47,7 +47,7 @@ private RootThrowablePatternConverter(final Configuration config, final String[]
     /**
      * Gets an instance of the class.
      *
-     * @param config
+     * @param config The Configuration or {@code null}.
      * @param options pattern options, may be null.  If first element is "short",
      *                only the first line of the throwable will be formatted.
      * @return instance of class.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/CronExpression.java
Patch:
@@ -44,6 +44,7 @@
  * separated by white space. The fields respectively are described as follows:
  * <p/>
  * <table cellspacing="8">
+ * <caption>Cron Expressions Allowed Fields and Values</caption>
  * <tr>
  * <th align="left">Field Name</th>
  * <th align="left">&nbsp;</th>

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java
Patch:
@@ -132,8 +132,8 @@ public static void mkdir(final File dir, final boolean createDirectoryIfNotExist
     /**
      * Creates the parent directories for the given File.
      *
-     * @param file
-     * @throws IOException
+     * @param file For which parent directory is to be created.
+     * @throws IOException Thrown if the directory could not be created.
      */
     public static void makeParentDirs(final File file) throws IOException {
         final File parent = Objects.requireNonNull(file, "file").getCanonicalFile().getParentFile();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java
Patch:
@@ -362,7 +362,7 @@ public static boolean isJansiAvailable() {
     }
 
     /**
-     * Loads a class by name. This method respects the {@link #IGNORE_TCCL_PROPERTY} Log4j property. If this property is
+     * Loads a class by name. This method respects the {@link LoaderUtil#IGNORE_TCCL_PROPERTY IGNORE_TCCL_PROPERTY} Log4j property. If this property is
      * specified and set to anything besides {@code false}, then the default ClassLoader will be used.
      *
      * @param className The class name.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/ReflectionUtil.java
Patch:
@@ -179,7 +179,7 @@ public static <T> Constructor<T> getDefaultConstructor(final Class<T> clazz) {
      * @throws IllegalArgumentException if the given class is abstract, an interface, an array class, a primitive type,
      *                                  or void
      * @throws IllegalStateException    if access is denied to the constructor, or there are no default constructors
-     * @throws InternalException        wrapper of the underlying exception if checked
+     * @throws InternalError        wrapper of the underlying exception if checked
      */
     public static <T> T instantiate(final Class<T> clazz) {
         Objects.requireNonNull(clazz, "No class provided");

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java
Patch:
@@ -392,7 +392,8 @@ public Object parseObject(final String source, final ParsePosition pos) {
      * given by {@link ParsePosition#getIndex()} has been updated. If the input buffer has been fully
      * parsed, then the index will point to just after the end of the input buffer.
      *
-     * @see org.apache.commons.lang3.time.DateParser#parse(java.lang.String, java.text.ParsePosition)
+     * @see <a href="https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/time/DateParser.html#parse-java.lang.String-java.text.ParsePosition-">
+     *     org.apache.commons.lang3.time.DateParser#parse(String, ParsePosition)</a>
      */
     @Override
     public Date parse(final String source, final ParsePosition pos) {

File: log4j-api/src/main/java/org/apache/logging/log4j/util/SortedArrayStringMap.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.Map;
 import java.util.Objects;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import org.apache.logging.log4j.status.StatusLogger;
 
 /**
@@ -545,6 +546,8 @@ private static byte[] marshall(final Object obj) throws IOException {
         }
     }
 
+    @SuppressFBWarnings(value = "OBJECT_DESERIALIZATION", justification = "Object deserialization uses either Java 9 " +
+            "native filter or our custom filter to limit the kinds of classes deserialized.")
     private static Object unmarshall(final byte[] data, final ObjectInputStream inputStream)
             throws IOException, ClassNotFoundException {
         final ByteArrayInputStream bin = new ByteArrayInputStream(data);

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/appender/db/jdbc/JdbcH2TestHelper.java
Patch:
@@ -23,6 +23,7 @@
 import java.sql.DriverManager;
 import java.sql.SQLException;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import org.apache.commons.io.file.PathUtils;
 import org.apache.commons.lang3.SystemUtils;
 import org.apache.logging.log4j.core.appender.db.jdbc.AbstractConnectionSource;
@@ -67,10 +68,12 @@ public static void deleteDir() throws IOException {
         }
     }
 
+    @SuppressFBWarnings(value = "DMI_EMPTY_DB_PASSWORD")
     public static Connection getConnectionInMemory() throws SQLException {
         return DriverManager.getConnection(CONNECTION_STRING_IN_MEMORY, USER_NAME, PASSWORD);
     }
 
+    @SuppressFBWarnings(value = "DMI_EMPTY_DB_PASSWORD")
     public static Connection getConnectionTempDir() throws SQLException {
         return DriverManager.getConnection(CONNECTION_STRING_TEMP_DIR, USER_NAME, PASSWORD);
     }

File: log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAvroManager.java
Patch:
@@ -205,7 +205,7 @@ public void send(final Event event)  {
         } else {
             int eventCount;
             BatchEvent batch = null;
-            synchronized(batchEvent) {
+            synchronized(this) {
                 batchEvent.addEvent(event);
                 eventCount = batchEvent.size();
                 final long now = System.nanoTime();

File: log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AnnotationVsMarkerInterface.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.util.concurrent.TimeUnit;
 
-import org.apache.logging.log4j.util.PerformanceSensitive;
 import org.apache.logging.log4j.util.SortedArrayStringMap;
 import org.apache.logging.log4j.util.StringBuilderFormattable;
 import org.apache.logging.log4j.util.StringMap;
@@ -58,7 +57,7 @@ public class AnnotationVsMarkerInterface {
     @BenchmarkMode({Mode.Throughput, Mode.AverageTime, Mode.SampleTime, Mode.SingleShotTime})
     @OutputTimeUnit(TimeUnit.NANOSECONDS)
     public Object annotationMissing() {
-        return map.getClass().isAnnotationPresent(PerformanceSensitive.class);
+        return map.getClass().isAnnotationPresent(State.class);
     }
 
     @Benchmark

File: log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/JdbcAppenderBenchmark.java
Patch:
@@ -22,6 +22,7 @@
 import java.sql.Statement;
 import java.util.concurrent.TimeUnit;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.LoggerContext;
@@ -185,6 +186,7 @@ private String toCreateTableSqlStringHQLDB(final String tableName) {
     /**
      * Referred from log4j2-jdbc-appender.xml.
      */
+    @SuppressFBWarnings("DMI_EMPTY_DB_PASSWORD")
     public static Connection getConnectionH2() throws Exception {
         Class.forName("org.h2.Driver");
         return DriverManager.getConnection("jdbc:h2:mem:Log4j", "sa", "");
@@ -193,6 +195,7 @@ public static Connection getConnectionH2() throws Exception {
     /**
      * Referred from log4j2-jdbc-appender.xml.
      */
+    @SuppressFBWarnings("DMI_EMPTY_DB_PASSWORD")
     public static Connection getConnectionHSQLDB() throws Exception {
         Class.forName("org.hsqldb.jdbcDriver");
         return DriverManager.getConnection("jdbc:hsqldb:mem:Log4j", "sa", "");

File: log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/JpaAppenderBenchmark.java
Patch:
@@ -22,6 +22,7 @@
 import java.sql.Statement;
 import java.util.concurrent.TimeUnit;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.LoggerContext;
@@ -165,6 +166,7 @@ public void tearDown() throws SQLException {
     /**
      * Referred from log4j2-jdbc-appender.xml.
      */
+    @SuppressFBWarnings("DMI_EMPTY_DB_PASSWORD")
     public static Connection getConnectionH2() throws Exception {
         Class.forName("org.h2.Driver");
         final Connection connection = DriverManager.getConnection("jdbc:h2:mem:Log4j;MODE=PostgreSQL", "sa", "");
@@ -182,6 +184,7 @@ public static Connection getConnectionH2() throws Exception {
     /**
      * Referred from log4j2-jdbc-appender.xml.
      */
+    @SuppressFBWarnings("DMI_EMPTY_DB_PASSWORD")
     public static Connection getConnectionHSQLDB() throws Exception {
         Class.forName("org.hsqldb.jdbcDriver");
         final Connection connection = DriverManager.getConnection("jdbc:hsqldb:mem:Log4j", "sa", "");

File: log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/ThreadsafeDateFormatBenchmark.java
Patch:
@@ -90,7 +90,7 @@ public CachedTimeFixedFmt(final long timestamp) {
         }
     }
 
-    private class FormatterSimple {
+    private static class FormatterSimple {
         private final SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss.SSS");
         private long timestamp;
         private String formatted;
@@ -108,7 +108,7 @@ public String format(final long timestamp) {
         }
     }
 
-    private class FormatterFixedReuseBuffer {
+    private static class FormatterFixedReuseBuffer {
         private final FixedDateFormat customFormat = FixedDateFormat.createIfSupported("HH:mm:ss.SSS");
         private long timestamp;
         private String formatted;

File: log4j-perf/src/main/java/org/apache/logging/log4j/perf/nogc/NoGcMessage.java
Patch:
@@ -24,7 +24,7 @@
  * Reusable Message..
  */
 public class NoGcMessage implements Message {
-    class InternalState {
+    static class InternalState {
         private final Object[] params = new Object[10];
         private int paramCount;
         private final StringBuilder buffer = new StringBuilder(2048);

File: log4j-1.2-api/src/main/java/org/apache/log4j/builders/package-info.java
Patch:
@@ -16,7 +16,9 @@
  */
 @ExportTo("org.apache.logging.log4j.core")
 @Open("org.apache.logging.log4j.core")
+@Version("2.20.1")
 package org.apache.log4j.builders;
 
 import aQute.bnd.annotation.jpms.ExportTo;
 import aQute.bnd.annotation.jpms.Open;
+import org.osgi.annotation.versioning.Version;

File: log4j-1.2-api/src/main/java/org/apache/log4j/config/package-info.java
Patch:
@@ -18,8 +18,10 @@
  * Log4j 1.x compatibility layer.
  */
 @Export
+@Version("2.20.1")
 @Open("org.apache.logging.log4j.core")
 package org.apache.log4j.config;
 
 import aQute.bnd.annotation.jpms.Open;
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-1.2-api/src/main/java/org/apache/log4j/helpers/OptionConverter.java
Patch:
@@ -42,7 +42,7 @@
 /**
  * A convenience class to convert property values to specific types.
  */
-public final class OptionConverter {
+public class OptionConverter {
 
     private static class CharMap {
         final char key;

File: log4j-1.2-api/src/main/java/org/apache/log4j/helpers/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Log4j 1.x compatibility layer.
  */
 @Export
+@Version("2.20.1")
 package org.apache.log4j.helpers;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-1.2-api/src/main/java/org/apache/log4j/jmx/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * This package lets you manage log4j settings using JMX. It is unfortunately not of production quality.
  */
 @Export
+@Version("2.20.1")
 package org.apache.log4j.jmx;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-1.2-api/src/main/java/org/apache/log4j/or/jms/package-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the license.
  */
 @Export
+@Version("2.20.1")
 package org.apache.log4j.or.jms;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-1.2-api/src/main/java/org/apache/log4j/or/package-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the license.
  */
 @Export
+@Version("2.20.1")
 package org.apache.log4j.or;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-1.2-api/src/main/java/org/apache/log4j/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Log4j 1.x compatibility layer.
  */
 @Export
+@Version("2.20.1")
 package org.apache.log4j;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-1.2-api/src/main/java/org/apache/log4j/pattern/Log4j1LevelPatternConverter.java
Patch:
@@ -28,7 +28,7 @@
  */
 @Plugin(name = "Log4j1LevelPatternConverter", category = PatternConverter.CATEGORY)
 @ConverterKeys({"v1Level"})
-public final class Log4j1LevelPatternConverter extends LogEventPatternConverter {
+public class Log4j1LevelPatternConverter extends LogEventPatternConverter {
 
     private static final Log4j1LevelPatternConverter INSTANCE = new Log4j1LevelPatternConverter();
 

File: log4j-1.2-api/src/main/java/org/apache/log4j/pattern/package-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the license.
  */
 @Export
+@Version("2.20.1")
 package org.apache.log4j.pattern;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-1.2-api/src/main/java/org/apache/log4j/rewrite/package-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the license.
  */
 @Export
+@Version("2.20.1")
 package org.apache.log4j.rewrite;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-1.2-api/src/main/java/org/apache/log4j/spi/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Log4j 1.x compatibility layer.
  */
 @Export
+@Version("2.20.1")
 package org.apache.log4j.spi;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-1.2-api/src/main/java/org/apache/log4j/varia/package-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the license.
  */
 @Export
+@Version("2.20.1")
 package org.apache.log4j.varia;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-1.2-api/src/main/java/org/apache/log4j/xml/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Log4j 1.x compatibility layer.
  */
 @Export
+@Version("2.20.1")
 package org.apache.log4j.xml;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/ListStatusListener.java
Patch:
@@ -21,10 +21,12 @@
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.status.StatusData;
 import org.apache.logging.log4j.status.StatusListener;
+import org.osgi.annotation.versioning.ProviderType;
 
 /**
- * A {@link StatusListener}
+ * A {@link StatusListener} that collects messages for further inspection.
  */
+@ProviderType
 public interface ListStatusListener extends StatusListener {
 
     void clear();

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/SerialUtil.java
Patch:
@@ -25,7 +25,8 @@
 /**
  * Utility class to facilitate serializing and deserializing objects.
  */
-public final class SerialUtil {
+public class SerialUtil {
+
     private SerialUtil() {
     }
 

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/package-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the license.
  */
 @Export
+@Version("2.21.0")
 package org.apache.logging.log4j.test.junit;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/package-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the license.
  */
 @Export
+@Version("2.21.0")
 package org.apache.logging.log4j.test;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/util/package-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the license.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.test.util;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-api/src/main/java/org/apache/logging/log4j/CloseableThreadContext.java
Patch:
@@ -34,7 +34,7 @@
  *
  * @since 2.6
  */
-public final class CloseableThreadContext {
+public class CloseableThreadContext {
 
     private CloseableThreadContext() {
     }
@@ -100,7 +100,7 @@ public static CloseableThreadContext.Instance putAll(final Map<String, String> v
         return new CloseableThreadContext.Instance().putAll(values);
     }
 
-    public static final class Instance implements AutoCloseable {
+    public static class Instance implements AutoCloseable {
 
         private int pushCount = 0;
         private final Map<String, String> originalValues = new HashMap<>();

File: log4j-api/src/main/java/org/apache/logging/log4j/message/package-info.java
Patch:
@@ -19,6 +19,8 @@
  * Public Message Types used for Log4j 2. Users may implement their own Messages.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.message;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-api/src/main/java/org/apache/logging/log4j/package-info.java
Patch:
@@ -32,6 +32,8 @@
  * @see <a href="http://logging.apache.org/log4j/2.x/manual/api.html">Log4j 2 API manual</a>
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-api/src/main/java/org/apache/logging/log4j/simple/package-info.java
Patch:
@@ -20,6 +20,8 @@
  * Providers are able to be loaded at runtime.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.simple;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/package-info.java
Patch:
@@ -19,6 +19,8 @@
  * API classes.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.spi;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-api/src/main/java/org/apache/logging/log4j/status/package-info.java
Patch:
@@ -19,6 +19,8 @@
  * used by applications reporting on the status of the logging system
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.status;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-api/src/main/java/org/apache/logging/log4j/util/Unbox.java
Patch:
@@ -46,7 +46,7 @@
  * @since 2.6
  */
 @PerformanceSensitive("allocation")
-public final class Unbox {
+public class Unbox {
     private static final Logger LOGGER = StatusLogger.getLogger();
     private static final int BITS_PER_INT = 32;
     private static final int RINGBUFFER_MIN_SIZE = 32;

File: log4j-api/src/main/java/org/apache/logging/log4j/util/package-info.java
Patch:
@@ -20,6 +20,8 @@
  * There are no guarantees for binary or logical compatibility in this package.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.util;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-appserver/src/main/java/org/apache/logging/log4j/appserver/jetty/package-info.java
Patch:
@@ -19,7 +19,9 @@
  */
 @Open
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.appserver.jetty;
 
 import aQute.bnd.annotation.jpms.Open;
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-appserver/src/main/java/org/apache/logging/log4j/appserver/tomcat/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Log4j integration with Apache Tomcat 8.5 or greater.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.appserver.tomcat;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-cassandra/src/main/java/org/apache/logging/log4j/cassandra/CassandraAppender.java
Patch:
@@ -38,7 +38,7 @@
  * @see ColumnMapping
  */
 @Plugin(name = "Cassandra", category = Core.CATEGORY_NAME, elementType = CassandraAppender.ELEMENT_TYPE, printObject = true)
-public final class CassandraAppender extends AbstractDatabaseAppender<CassandraManager> {
+public class CassandraAppender extends AbstractDatabaseAppender<CassandraManager> {
 
     private CassandraAppender(final String name, final Filter filter, final boolean ignoreExceptions,
                               final Property[] properties, final CassandraManager manager) {

File: log4j-cassandra/src/main/java/org/apache/logging/log4j/cassandra/CassandraManager.java
Patch:
@@ -42,7 +42,7 @@
 /**
  * Manager for a Cassandra appender instance.
  */
-public final class CassandraManager extends AbstractDatabaseManager {
+public class CassandraManager extends AbstractDatabaseManager {
 
     private static final int DEFAULT_PORT = 9042;
 

File: log4j-cassandra/src/main/java/org/apache/logging/log4j/cassandra/package-info.java
Patch:
@@ -22,7 +22,9 @@
  */
 @Export
 @Open("org.apache.logging.log4j.core")
+@Version("2.20.1")
 package org.apache.logging.log4j.cassandra;
 
 import aQute.bnd.annotation.jpms.Open;
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/GcFreeLoggingTestUtil.java
Patch:
@@ -42,7 +42,8 @@
 /**
  * Utility methods for the GC-free logging tests.
  */
-public class GcFreeLoggingTestUtil {
+public enum GcFreeLoggingTestUtil {
+    ;
 
     public static void executeLogging(final String configurationFile,
                                       final Class<?> testClass) throws Exception {

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/appender/AlwaysFailAppender.java
Patch:
@@ -30,7 +30,7 @@
  *
  */
 @Plugin(name = "AlwaysFail", category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
-public final class AlwaysFailAppender extends AbstractAppender {
+public class AlwaysFailAppender extends AbstractAppender {
 
     private AlwaysFailAppender(final String name) {
         super(name, null, null, false, Property.EMPTY_ARRAY);

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/appender/BlockingAppender.java
Patch:
@@ -31,7 +31,7 @@
  *
  */
 @Plugin(name = "Block", category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
-public final class BlockingAppender extends AbstractAppender {
+public class BlockingAppender extends AbstractAppender {
     public volatile boolean running = true;
 
     private BlockingAppender(final String name) {

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/appender/FailOnceAppender.java
Patch:
@@ -35,7 +35,7 @@
  * An {@link Appender} that fails on the first use and works for the rest.
  */
 @Plugin(name = "FailOnce", category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
-public final class FailOnceAppender extends AbstractAppender {
+public class FailOnceAppender extends AbstractAppender {
 
     private final Supplier<Throwable> throwableSupplier;
 

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/appender/db/jdbc/package-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the license.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.test.appender.db.jdbc;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/appender/package-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the license.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.test.appender;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/appender/rolling/action/package-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the license.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.test.appender.rolling.action;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/categories/package-info.java
Patch:
@@ -20,6 +20,8 @@
  * integration tests, an appropriate category interface should be specified.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.test.categories;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/hamcrest/package-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the license.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.test.hamcrest;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/junit/package-info.java
Patch:
@@ -20,6 +20,8 @@
  * @see org.junit.rules.TestRule
  */
 @Export
+@Version("2.21.0")
 package org.apache.logging.log4j.core.test.junit;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/layout/package-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the license.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.test.layout;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/net/mock/MockSyslogServer.java
Patch:
@@ -43,7 +43,7 @@ public MockSyslogServer() {
 
     public abstract int getLocalPort();
 
-    public abstract void shutdown();
+    public void shutdown() {}
 
     public int getNumberOfReceivedMessages() {
         return messageList.size();

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/net/mock/package-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the license.
  */
 @Export
+@Version("2.21.0")
 package org.apache.logging.log4j.core.test.net.mock;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/net/ssl/package-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the license.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.test.net.ssl;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/package-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the license.
  */
 @Export
+@Version("2.21.0")
 package org.apache.logging.log4j.core.test;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/smtp/SmtpActionType.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * Represents an SMTP action or command.
  */
-public final class SmtpActionType {
+public class SmtpActionType {
     /**
      * Internal value for the action type.
      */

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/smtp/SmtpState.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * SMTP server state.
  */
-public final class SmtpState {
+public class SmtpState {
     /**
      * Internal representation of the state.
      */

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/smtp/package-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the license.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.test.smtp;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/util/package-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the license.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.test.util;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AppenderSet.java
Patch:
@@ -35,7 +35,7 @@
  * A deferred plugin for appenders.
  */
 @Plugin(name = "AppenderSet", category = Core.CATEGORY_NAME, printObject = true, deferChildren = true)
-public final class AppenderSet {
+public class AppenderSet {
 
     public static class Builder implements org.apache.logging.log4j.core.util.Builder<AppenderSet> {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/NullAppender.java
Patch:
@@ -29,7 +29,7 @@
  * and handy for composing a {@link ScriptAppenderSelector}.
  */
 @Plugin(name = NullAppender.PLUGIN_NAME, category = Core.CATEGORY_NAME, elementType = Appender.ELEMENT_TYPE, printObject = true)
-public final class NullAppender extends AbstractAppender {
+public class NullAppender extends AbstractAppender {
 
     public static final String PLUGIN_NAME = "Null";
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ScriptAppenderSelector.java
Patch:
@@ -38,7 +38,7 @@
 import org.apache.logging.log4j.core.script.ScriptManager;
 
 @Plugin(name = "ScriptAppenderSelector", category = Core.CATEGORY_NAME, elementType = Appender.ELEMENT_TYPE, printObject = true)
-public final class ScriptAppenderSelector extends AbstractAppender {
+public class ScriptAppenderSelector extends AbstractAppender {
 
     /**
      * Builds an appender.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/ColumnMapping.java
Patch:
@@ -43,7 +43,7 @@
  * @since 2.8
  */
 @Plugin(name = "ColumnMapping", category = Core.CATEGORY_NAME, printObject = true)
-public final class ColumnMapping {
+public class ColumnMapping {
 
     /**
      * The empty array.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/package-info.java
Patch:
@@ -19,6 +19,8 @@
  * a JDBC driver on your classpath for the database you wish to log to.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.appender.db.jdbc;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/package-info.java
Patch:
@@ -19,6 +19,8 @@
  * accessing databases.
  */
 @Export
+@Version("2.21.0")
 package org.apache.logging.log4j.core.appender.db;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/JmsAppender.java
Patch:
@@ -46,7 +46,7 @@
 @PluginAliases({ "JMSQueue", "JMSTopic" })
 public class JmsAppender extends AbstractAppender {
 
-    public static final class Builder<B extends Builder<B>> extends AbstractAppender.Builder<B>
+    public static class Builder<B extends Builder<B>> extends AbstractAppender.Builder<B>
             implements org.apache.logging.log4j.core.util.Builder<JmsAppender> {
 
         public static final int DEFAULT_RECONNECT_INTERVAL_MILLIS = 5000;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/JmsManager.java
Patch:
@@ -48,7 +48,7 @@
  * involving a configured ConnectionFactory and Destination.
  * </p>
  */
-public final class JmsManager extends AbstractManager {
+public class JmsManager extends AbstractManager {
 
     public static class JmsManagerConfiguration {
         private final Properties jndiProperties;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/jeromq/JeroMqManager.java
Patch:
@@ -41,7 +41,7 @@
  *
  * @since 2.6
  */
-public final class JeroMqManager extends AbstractManager {
+public class JeroMqManager extends AbstractManager {
 
     /**
      * System property to enable shutdown hook.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/jeromq/package-info.java
Patch:
@@ -21,6 +21,8 @@
  * @since 2.4
  */
 @Export
+@Version("2.21.0")
 package org.apache.logging.log4j.core.appender.mom.jeromq;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/kafka/package-info.java
Patch:
@@ -21,6 +21,8 @@
  * @since 2.4
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.appender.mom.kafka;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/package-info.java
Patch:
@@ -21,6 +21,8 @@
  * @since 2.1
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.appender.mom;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/nosql/package-info.java
Patch:
@@ -22,6 +22,8 @@
  * {@link org.apache.logging.log4j.core.appender.nosql.NoSqlProvider NoSqlProvider}.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.appender.nosql;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Log4j 2 Appenders.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.appender;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rewrite/LoggerNameLevelRewritePolicy.java
Patch:
@@ -37,7 +37,7 @@
  * @since 2.4
  */
 @Plugin(name = "LoggerNameLevelRewritePolicy", category = Core.CATEGORY_NAME, elementType = "rewritePolicy", printObject = true)
-public final class LoggerNameLevelRewritePolicy implements RewritePolicy {
+public class LoggerNameLevelRewritePolicy implements RewritePolicy {
 
     /**
      * Creates a policy to rewrite levels for a given logger name.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rewrite/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Apache Flume Appender. Requires the user specifically include Flume and its dependencies.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.appender.rewrite;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java
Patch:
@@ -30,7 +30,7 @@
  * Triggers a rollover on every restart, but only if the file size is greater than zero.
  */
 @Plugin(name = "OnStartupTriggeringPolicy", category = Core.CATEGORY_NAME, printObject = true)
-public final class OnStartupTriggeringPolicy extends AbstractTriggeringPolicy {
+public class OnStartupTriggeringPolicy extends AbstractTriggeringPolicy {
 
     private static final long JVM_START_TIME = initStartTime();
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/Duration.java
Patch:
@@ -31,7 +31,7 @@
  *
  * @see #parse(CharSequence)
  */
-public final class Duration implements Serializable, Comparable<Duration> {
+public class Duration implements Serializable, Comparable<Duration> {
     private static final long serialVersionUID = -3756810052716342061L;
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/PosixViewAttributeAction.java
Patch:
@@ -47,7 +47,7 @@
  * Allow to define file permissions, user and group for log files on POSIX supported OS.
  */
 @Plugin(name = "PosixViewAttribute", category = Core.CATEGORY_NAME, printObject = true)
-public final class PosixViewAttributeAction extends AbstractPathAction {
+public class PosixViewAttributeAction extends AbstractPathAction {
 
     /**
      * File permissions.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Support classes for the Rolling File Appender.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.appender.rolling.action;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Rolling File Appender and support classes.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.appender.rolling;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Apache Flume Appender. Requires the user specifically include Flume and its dependencies.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.appender.routing;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorBlockingQueueFactory.java
Patch:
@@ -31,7 +31,7 @@
  * @since 2.7
  */
 @Plugin(name = "DisruptorBlockingQueue", category = Node.CATEGORY, elementType = BlockingQueueFactory.ELEMENT_TYPE)
-public final class DisruptorBlockingQueueFactory<E> implements BlockingQueueFactory<E> {
+public class DisruptorBlockingQueueFactory<E> implements BlockingQueueFactory<E> {
 
     private final SpinPolicy spinPolicy;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/JCToolsBlockingQueueFactory.java
Patch:
@@ -33,7 +33,7 @@
  * @since 2.7
  */
 @Plugin(name = "JCToolsBlockingQueue", category = Node.CATEGORY, elementType = BlockingQueueFactory.ELEMENT_TYPE)
-public final class JCToolsBlockingQueueFactory<E> implements BlockingQueueFactory<E> {
+public class JCToolsBlockingQueueFactory<E> implements BlockingQueueFactory<E> {
 
     private final WaitStrategy waitStrategy;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Provides Asynchronous Logger classes and interfaces for low-latency logging.
  */
 @Export
+@Version("2.21.0")
 package org.apache.logging.log4j.core.async;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/arbiters/ClassArbiter.java
Patch:
@@ -27,7 +27,7 @@
  */
 @Plugin(name = "ClassArbiter", category = Node.CATEGORY, elementType = Arbiter.ELEMENT_TYPE,
         printObject = true, deferChildren = true)
-public final class ClassArbiter implements Arbiter {
+public class ClassArbiter implements Arbiter {
 
     private final String className;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/arbiters/ScriptArbiter.java
Patch:
@@ -36,7 +36,7 @@
  */
 @Plugin(name = "ScriptArbiter", category = Node.CATEGORY, elementType = Arbiter.ELEMENT_TYPE,
         deferChildren = true, printObject = true)
-public final class ScriptArbiter implements Arbiter {
+public class ScriptArbiter implements Arbiter {
 
     private final AbstractScript script;
     private final Configuration configuration;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/arbiters/SystemPropertyArbiter.java
Patch:
@@ -26,7 +26,7 @@
  */
 @Plugin(name = "SystemPropertyArbiter", category = Node.CATEGORY, elementType = Arbiter.ELEMENT_TYPE,
         deferChildren = true, printObject = true)
-public final class SystemPropertyArbiter implements Arbiter {
+public class SystemPropertyArbiter implements Arbiter {
 
     private final String propertyName;
     private final String propertyValue;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/arbiters/package-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  */
 @Export
+@Version("2.21.0")
 package org.apache.logging.log4j.core.config.arbiters;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/api/package-info.java
Patch:
@@ -20,6 +20,8 @@
  * @since 2.4
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.config.builder.api;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/package-info.java
Patch:
@@ -20,6 +20,8 @@
  * @since 2.4
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.config.builder.impl;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/package-info.java
Patch:
@@ -19,6 +19,8 @@
  * Support for composite configurations.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.config.composite;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Classes and interfaces supporting configuration of Log4j 2 with JSON.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.config.json;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Configuration of Log4j 2.
  */
 @Export
+@Version("2.21.0")
 package org.apache.logging.log4j.core.config;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/convert/TypeConverterRegistry.java
Patch:
@@ -37,7 +37,7 @@
  *
  * @since 2.1
  */
-public final class TypeConverterRegistry {
+public class TypeConverterRegistry {
 
     private static final Logger LOGGER = StatusLogger.getLogger();
     private static volatile TypeConverterRegistry INSTANCE;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/convert/package-info.java
Patch:
@@ -20,6 +20,8 @@
  * attributes in plugin factory methods.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.config.plugins.convert;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/package-info.java
Patch:
@@ -19,6 +19,8 @@
  * Annotations for Log4j 2 plugins.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.config.plugins;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/package-info.java
Patch:
@@ -20,6 +20,8 @@
  * executable {@link org.apache.logging.log4j.core.config.plugins.util.PluginManager} class in your build process.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.config.plugins.processor;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginRegistry.java
Patch:
@@ -45,7 +45,7 @@
 /**
  * Registry singleton for PluginType maps partitioned by source type and then by category names.
  */
-public final class PluginRegistry {
+public class PluginRegistry {
 
     private static final Logger LOGGER = StatusLogger.getLogger();
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/package-info.java
Patch:
@@ -19,6 +19,8 @@
  * Utility and manager classes for Log4j 2 plugins.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.config.plugins.util;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/validation/constraints/package-info.java
Patch:
@@ -21,6 +21,8 @@
  * @since 2.1
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.config.plugins.validation.constraints;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/validation/package-info.java
Patch:
@@ -21,6 +21,8 @@
  * @since 2.1
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.config.plugins.validation;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/validation/validators/package-info.java
Patch:
@@ -21,6 +21,8 @@
  * @since 2.1
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.config.plugins.validation.validators;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/visitors/package-info.java
Patch:
@@ -22,6 +22,8 @@
  * {@link org.apache.logging.log4j.core.config.plugins.PluginVisitorStrategy}.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.config.plugins.visitors;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Configuration using Properties files.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.config.properties;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/status/package-info.java
Patch:
@@ -19,6 +19,8 @@
  * Configuration classes for the {@link org.apache.logging.log4j.status.StatusLogger} API.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.config.status;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Classes and interfaces supporting configuration of Log4j 2 with XML.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.config.xml;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/yaml/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Classes and interfaces supporting configuration of Log4j 2 with YAML.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.config.yaml;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/MutableThreadContextMapFilter.java
Patch:
@@ -59,7 +59,7 @@
 @Plugin(name = "MutableThreadContextMapFilter", category = Node.CATEGORY, elementType = Filter.ELEMENT_TYPE, printObject = true)
 @PluginAliases("MutableContextMapFilter")
 @PerformanceSensitive("allocation")
-public final class MutableThreadContextMapFilter extends AbstractFilter {
+public class MutableThreadContextMapFilter extends AbstractFilter {
 
     private static final ObjectMapper MAPPER = new ObjectMapper()
             .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/mutable/package-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.filter.mutable;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/package-info.java
Patch:
@@ -22,6 +22,8 @@
  * {@link org.apache.logging.log4j.core.Filter#ELEMENT_TYPE filter}.
  */
 @Export
+@Version("2.21.0")
 package org.apache.logging.log4j.core.filter;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Log4j 2 private implementation classes.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.impl;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/package-info.java
Patch:
@@ -19,6 +19,8 @@
  * library.
  */
 @Export
+@Version("2.21.0")
 package org.apache.logging.log4j.core.jackson;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Log4j 2 JMX support.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.jmx;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java
Patch:
@@ -382,7 +382,7 @@ public static Builder newBuilder() {
         return new Builder();
     }
 
-    public static final class Builder implements org.apache.logging.log4j.core.util.Builder<HtmlLayout> {
+    public static class Builder implements org.apache.logging.log4j.core.util.Builder<HtmlLayout> {
 
         @PluginBuilderAttribute
         private boolean locationInfo = false;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java
Patch:
@@ -623,7 +623,7 @@ public static Builder newBuilder() {
     /**
      * Custom PatternLayout builder. Use the {@link PatternLayout#newBuilder() builder factory method} to create this.
      */
-    public static final class Builder implements org.apache.logging.log4j.core.util.Builder<PatternLayout> {
+    public static class Builder implements org.apache.logging.log4j.core.util.Builder<PatternLayout> {
 
         @PluginBuilderAttribute
         private String pattern = PatternLayout.DEFAULT_CONVERSION_PATTERN;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/ScriptPatternSelector.java
Patch:
@@ -49,7 +49,7 @@ public class ScriptPatternSelector implements PatternSelector, LocationAware {
     /**
      * Custom ScriptPatternSelector builder. Use the {@link #newBuilder() builder factory method} to create this.
      */
-    public static final class Builder implements org.apache.logging.log4j.core.util.Builder<ScriptPatternSelector> {
+    public static class Builder implements org.apache.logging.log4j.core.util.Builder<ScriptPatternSelector> {
 
         @PluginElement("Script")
         private AbstractScript script;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/TextEncoderHelper.java
Patch:
@@ -28,7 +28,7 @@
  *
  * @since 2.6
  */
-public final class TextEncoderHelper {
+public class TextEncoderHelper {
 
     private TextEncoderHelper() {
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/package-info.java
Patch:
@@ -22,6 +22,8 @@
  * {@link org.apache.logging.log4j.core.Layout#ELEMENT_TYPE layout}.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.layout;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/package-info.java
Patch:
@@ -21,6 +21,8 @@
  * {@link org.apache.logging.log4j.core.lookup.StrLookup#CATEGORY Lookup}.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.lookup;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/JndiManager.java
Patch:
@@ -35,7 +35,7 @@
  *
  * @since 2.1
  */
-public final class JndiManager extends AbstractManager {
+public class JndiManager extends AbstractManager {
 
     private static final JndiManagerFactory FACTORY = new JndiManagerFactory();
     private static final String PREFIX = "log4j2.enableJndi";

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/SocketAddress.java
Patch:
@@ -32,7 +32,7 @@
  * @since 2.8
  */
 @Plugin(name = "SocketAddress", category = Node.CATEGORY, printObject = true)
-public final class SocketAddress {
+public class SocketAddress {
 
     /**
      * Creates a SocketAddress corresponding to {@code localhost:0}.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/package-info.java
Patch:
@@ -25,6 +25,8 @@
  * </ul>
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.net;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/SslConfiguration.java
Patch:
@@ -41,7 +41,7 @@
  *  SSL Configuration
  */
 @Plugin(name = "Ssl", category = Core.CATEGORY_NAME, printObject = true)
-public final class SslConfiguration {
+public class SslConfiguration {
     private static final StatusLogger LOGGER = StatusLogger.getLogger();
     private final KeyStoreConfiguration keyStoreConfig;
     private final TrustStoreConfiguration trustStoreConfig;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Log4j 2 SSL support
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.net.ssl;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/package-info.java
Patch:
@@ -19,6 +19,8 @@
  * Collection of OSGi-specific classes for bundles.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.osgi;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Implementation of Log4j 2.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/parser/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Parsers for the output of various layouts.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.parser;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/LevelPatternConverter.java
Patch:
@@ -34,7 +34,7 @@
 @Plugin(name = "LevelPatternConverter", category = PatternConverter.CATEGORY)
 @ConverterKeys({"p", "level"})
 @PerformanceSensitive("allocation")
-public abstract class LevelPatternConverter extends LogEventPatternConverter {
+public class LevelPatternConverter extends LogEventPatternConverter {
     private static final String OPTION_LENGTH = "length";
     private static final String OPTION_LOWER = "lowerCase";
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MessagePatternConverter.java
Patch:
@@ -39,7 +39,7 @@
 @Plugin(name = "MessagePatternConverter", category = PatternConverter.CATEGORY)
 @ConverterKeys({"m", "msg", "message"})
 @PerformanceSensitive("allocation")
-public abstract class MessagePatternConverter extends LogEventPatternConverter {
+public class MessagePatternConverter extends LogEventPatternConverter {
 
     private static final String LOOKUPS = "lookups";
     private static final String NOLOOKUPS = "nolookups";

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Provides classes implementing format specifiers in conversion patterns.
  */
 @Export
+@Version("2.21.0")
 package org.apache.logging.log4j.core.pattern;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/script/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Log4j 2 Script support.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.script;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/selector/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Log4j 2 Context Selectors.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.selector;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/time/package-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.time;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/tools/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Log4j 2 command line tools.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.tools;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/NullOutputStream.java
Patch:
@@ -28,7 +28,7 @@
  *
  * @since 2.3
  */
-public final class NullOutputStream extends OutputStream {
+public class NullOutputStream extends OutputStream {
 
     private static final NullOutputStream INSTANCE = new NullOutputStream();
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/WatcherFactory.java
Patch:
@@ -34,7 +34,7 @@
 /**
  * Creates Watchers of various types.
  */
-public final class WatcherFactory {
+public class WatcherFactory {
 
     private static final Logger LOGGER = StatusLogger.getLogger();
     private static final PluginManager pluginManager = new PluginManager(Watcher.CATEGORY);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FixedDateFormat.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.concurrent.TimeUnit;
 
 import org.apache.logging.log4j.core.time.Instant;
+import org.osgi.annotation.versioning.ProviderType;
 
 /**
  * Custom time formatter that trades flexibility for performance. This formatter only supports the date patterns defined
@@ -32,6 +33,7 @@
  * /log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/ThreadsafeDateFormatBenchmark.java
  * </p>
  */
+@ProviderType
 public class FixedDateFormat {
 
     /**
@@ -515,7 +517,7 @@ public String getFormat() {
      *
      * @return the length of the resulting formatted date and time strings
      */
-    public int getLength() {
+    public final int getLength() {
         return length;
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Log4j 2 date formatting classes.
  */
 @Export
+@Version("2.21.0")
 package org.apache.logging.log4j.core.util.datetime;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Log4j 2 helper classes.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.util;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-couchdb/src/main/java/org/apache/logging/log4j/couchdb/package-info.java
Patch:
@@ -19,7 +19,9 @@
  */
 @Export
 @Open("org.apache.logging.log4j.core")
+@Version("2.20.1")
 package org.apache.logging.log4j.couchdb;
 
 import aQute.bnd.annotation.jpms.Open;
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-docker/src/main/java/org/apache/logging/log4j/docker/package-info.java
Patch:
@@ -16,7 +16,9 @@
  */
 @Export
 @Open("org.apache.logging.log4j.core")
+@Version("2.20.1")
 package org.apache.logging.log4j.docker;
 
 import aQute.bnd.annotation.jpms.Open;
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/package-info.java
Patch:
@@ -19,7 +19,9 @@
  */
 @Export
 @Open("org.apache.logging.log4j.core")
+@Version("2.20.1")
 package org.apache.logging.log4j.flume.appender;
 
 import aQute.bnd.annotation.jpms.Open;
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-iostreams/src/main/java/org/apache/logging/log4j/io/package-info.java
Patch:
@@ -19,6 +19,8 @@
  * TODO: introduction to IoBuilder
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.io;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-jakarta-web/src/main/java/org/apache/logging/log4j/web/appender/package-info.java
Patch:
@@ -16,7 +16,9 @@
  */
 @Export
 @Open("org.apache.logging.log4j.core")
+@Version("2.20.1")
 package org.apache.logging.log4j.web.appender;
 
 import aQute.bnd.annotation.Export;
 import aQute.bnd.annotation.jpms.Open;
+import org.osgi.annotation.versioning.Version;

File: log4j-jakarta-web/src/main/java/org/apache/logging/log4j/web/package-info.java
Patch:
@@ -22,6 +22,8 @@
  * @see <a href="http://logging.apache.org/log4j/2.x/manual/webapp.html">Using Log4j 2 in Web Applications</a>
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.web;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-jcl/src/main/java/org/apache/logging/log4j/jcl/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Log4j 2 adapter for Commons Logging.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.jcl;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-jdbc-dbcp2/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/PoolableConnectionFactoryConfig.java
Patch:
@@ -36,7 +36,7 @@
  * @since 2.11.2
  */
 @Plugin(name = "PoolableConnectionFactory", category = Core.CATEGORY_NAME, printObject = true)
-public final class PoolableConnectionFactoryConfig {
+public class PoolableConnectionFactoryConfig {
 
     public static class Builder implements org.apache.logging.log4j.core.util.Builder<PoolableConnectionFactoryConfig> {
 

File: log4j-jdbc-dbcp2/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/package-info.java
Patch:
@@ -16,7 +16,9 @@
  */
 @Export
 @Open("org.apache.logging.log4j.core")
+@Version("2.20.1")
 package org.apache.logging.log4j.core.appender.db.jdbc;
 
-import aQute.bnd.annotation.Export;
 import aQute.bnd.annotation.jpms.Open;
+import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-jpa/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/package-info.java
Patch:
@@ -29,6 +29,8 @@
  */
 //CHECKSTYLE:ON
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.core.appender.db.jpa.converter;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-jpa/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/package-info.java
Patch:
@@ -22,7 +22,9 @@
  */
 @Export
 @Open("org.apache.logging.log4j.core")
+@Version("2.20.1")
 package org.apache.logging.log4j.core.appender.db.jpa;
 
 import aQute.bnd.annotation.jpms.Open;
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-jpl/src/main/java/org/apache/logging/log4j/jpl/package-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the license.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.jpl;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-jul/src/main/java/org/apache/logging/log4j/jul/package-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the license.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.jul;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-kubernetes/src/main/java/org/apache/logging/log4j/kubernetes/package-info.java
Patch:
@@ -16,7 +16,9 @@
  */
 @Export
 @Open("org.apache.logging.log4j.core")
+@Version("2.20.1")
 package org.apache.logging.log4j.kubernetes;
 
 import aQute.bnd.annotation.jpms.Open;
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-layout-template-json-test/src/main/java/org/apache/logging/log4j/layout/template/json/package-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.layout.template.json;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/JsonTemplateLayout.java
Patch:
@@ -61,7 +61,7 @@
 @Plugin(name = "JsonTemplateLayout",
         category = Node.CATEGORY,
         elementType = Layout.ELEMENT_TYPE)
-public final class JsonTemplateLayout implements StringLayout, LocationAware {
+public class JsonTemplateLayout implements StringLayout, LocationAware {
 
     private static final Map<String, String> CONTENT_FORMAT =
             Collections.singletonMap("version", "1");

File: log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/package-info.java
Patch:
@@ -16,7 +16,9 @@
  */
 @Export
 @Open("org.apache.logging.log4j.core")
+@Version("2.21.0")
 package org.apache.logging.log4j.layout.template.json;
 
 import aQute.bnd.annotation.jpms.Open;
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/resolver/EventAdditionalFieldInterceptor.java
Patch:
@@ -28,7 +28,7 @@
  * additional fields} after event template read.
  */
 @Plugin(name = "EventAdditionalFieldInterceptor", category = TemplateResolverInterceptor.CATEGORY)
-public final class EventAdditionalFieldInterceptor implements EventResolverInterceptor {
+public class EventAdditionalFieldInterceptor implements EventResolverInterceptor {
 
     private static final EventAdditionalFieldInterceptor INSTANCE =
             new EventAdditionalFieldInterceptor();

File: log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/resolver/EventResolverContext.java
Patch:
@@ -150,7 +150,7 @@ public static Builder newBuilder() {
         return new Builder();
     }
 
-    public static final class Builder {
+    public static class Builder {
 
         private Configuration configuration;
 

File: log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/resolver/EventRootObjectKeyInterceptor.java
Patch:
@@ -28,7 +28,7 @@
  * @see JsonTemplateLayout.Builder#getEventTemplateRootObjectKey()
  */
 @Plugin(name = "EventRootObjectKeyInterceptor", category = TemplateResolverInterceptor.CATEGORY)
-public final class EventRootObjectKeyInterceptor implements EventResolverInterceptor {
+public class EventRootObjectKeyInterceptor implements EventResolverInterceptor {
 
     private static final EventRootObjectKeyInterceptor INSTANCE =
             new EventRootObjectKeyInterceptor();

File: log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/resolver/TemplateResolverInterceptors.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * Utility class for {@link TemplateResolverInterceptor}.
  */
-public final class TemplateResolverInterceptors {
+public class TemplateResolverInterceptors {
 
     private static final Logger LOGGER = StatusLogger.getLogger();
 

File: log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/resolver/package-info.java
Patch:
@@ -16,7 +16,9 @@
  */
 @Export
 @Open("org.apache.logging.log4j.core")
+@Version("2.20.1")
 package org.apache.logging.log4j.layout.template.json.resolver;
 
 import aQute.bnd.annotation.jpms.Open;
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-mongodb3/src/main/java/org/apache/logging/log4j/mongodb3/package-info.java
Patch:
@@ -19,7 +19,9 @@
  */
 @Export
 @Open("org.apache.logging.log4j.core")
+@Version("2.20.1")
 package org.apache.logging.log4j.mongodb3;
 
 import aQute.bnd.annotation.jpms.Open;
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-mongodb4/src/main/java/org/apache/logging/log4j/mongodb4/package-info.java
Patch:
@@ -20,7 +20,9 @@
  */
 @Export
 @Open("org.apache.logging.log4j.core")
+@Version("2.21.0")
 package org.apache.logging.log4j.mongodb4;
 
 import aQute.bnd.annotation.jpms.Open;
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/package-info.java
Patch:
@@ -21,8 +21,10 @@
  */
 @Export
 @Header(name = Constants.BUNDLE_ACTIVATIONPOLICY, value = Constants.ACTIVATION_LAZY)
+@Version("2.21.0")
 package org.apache.logging.slf4j;
 
 import org.osgi.annotation.bundle.Export;
 import org.osgi.annotation.bundle.Header;
+import org.osgi.annotation.versioning.Version;
 import org.osgi.framework.Constants;

File: log4j-slf4j-impl/src/main/java/org/slf4j/impl/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * Log4j 2.0 SLF4J Binding.
  */
 @Export
+@Version("2.20.1")
 package org.slf4j.impl;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-slf4j2-impl/src/main/java/org/apache/logging/slf4j/package-info.java
Patch:
@@ -21,8 +21,10 @@
  */
 @Export
 @Header(name = Constants.BUNDLE_ACTIVATIONPOLICY, value = Constants.ACTIVATION_LAZY)
+@Version("2.21.0")
 package org.apache.logging.slf4j;
 
 import org.osgi.annotation.bundle.Export;
 import org.osgi.annotation.bundle.Header;
+import org.osgi.annotation.versioning.Version;
 import org.osgi.framework.Constants;

File: log4j-spring-boot/src/main/java/org/apache/logging/log4j/spring/boot/package-info.java
Patch:
@@ -20,7 +20,9 @@
  */
 @Export
 @Open("org.apache.logging.log4j.core")
+@Version("2.20.1")
 package org.apache.logging.log4j.spring.boot;
 
 import aQute.bnd.annotation.jpms.Open;
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-spring-cloud-config/log4j-spring-cloud-config-client/src/main/java/org/apache/logging/log4j/spring/cloud/config/client/package-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the License.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.spring.cloud.config.client;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/package-info.java
Patch:
@@ -20,6 +20,8 @@
  * @since 2.0
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.taglib;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-to-jul/src/main/java/org/apache/logging/log4j/tojul/package-info.java
Patch:
@@ -21,6 +21,8 @@
  * @author <a href="http://www.vorburger.ch">Michael Vorburger.ch</a> for Google
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.tojul;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/package-info.java
Patch:
@@ -18,6 +18,8 @@
  * SLF4J support.
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.slf4j;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-web/src/main/java/org/apache/logging/log4j/web/appender/package-info.java
Patch:
@@ -16,7 +16,9 @@
  */
 @Export
 @Open("org.apache.logging.log4j.core")
+@Version("2.20.1")
 package org.apache.logging.log4j.web.appender;
 
 import aQute.bnd.annotation.Export;
 import aQute.bnd.annotation.jpms.Open;
+import org.osgi.annotation.versioning.Version;

File: log4j-web/src/main/java/org/apache/logging/log4j/web/package-info.java
Patch:
@@ -22,6 +22,8 @@
  * @see <a href="http://logging.apache.org/log4j/2.x/manual/webapp.html">Using Log4j 2 in Web Applications</a>
  */
 @Export
+@Version("2.20.1")
 package org.apache.logging.log4j.web;
 
 import org.osgi.annotation.bundle.Export;
+import org.osgi.annotation.versioning.Version;

File: log4j-spring-boot/src/main/java/org/apache/logging/log4j/spring/boot/SpringProfileArbiter.java
Patch:
@@ -108,8 +108,7 @@ public SpringProfileArbiter build() {
             if (loggerContext != null) {
                 environment = (Environment) loggerContext.getObject(Log4j2SpringBootLoggingSystem.ENVIRONMENT_KEY);
                 if (environment == null) {
-                    LOGGER.warn("Cannot create Arbiter, no Spring Environment provided");
-                    return null;
+                    LOGGER.debug("Creating Arbiter without a Spring Environment");
                 }
 
                 return new SpringProfileArbiter(profileNames, environment);

File: log4j-spring-boot/src/test/java/org/apache/logging/log4j/spring/boot/Log4j2SpringBootInitTest.java
Patch:
@@ -42,7 +42,7 @@ public void testEnvironment() {
         final ListAppender app = context.getConfiguration().getAppender("Out");
         assertNotNull(app);
         assertEquals(1, app.getMessages().size());
-        assertEquals("Started: log4j-spring-boot", app.getMessages().get(0));
+        assertEquals("prod: Started: log4j-spring-boot", app.getMessages().get(0));
     }
 
     @SpringBootApplication

File: log4j-spring-boot/src/main/java/org/apache/logging/log4j/spring/boot/SpringProfileArbiter.java
Patch:
@@ -108,8 +108,7 @@ public SpringProfileArbiter build() {
             if (loggerContext != null) {
                 environment = (Environment) loggerContext.getObject(Log4j2SpringBootLoggingSystem.ENVIRONMENT_KEY);
                 if (environment == null) {
-                    LOGGER.warn("Cannot create Arbiter, no Spring Environment provided");
-                    return null;
+                    LOGGER.debug("Creating Arbiter without a Spring Environment");
                 }
 
                 return new SpringProfileArbiter(profileNames, environment);

File: log4j-spring-boot/src/test/java/org/apache/logging/log4j/spring/boot/Log4j2SpringBootInitTest.java
Patch:
@@ -42,7 +42,7 @@ public void testEnvironment() {
         final ListAppender app = context.getConfiguration().getAppender("Out");
         assertNotNull(app);
         assertEquals(1, app.getMessages().size());
-        assertEquals("Started: log4j-spring-boot", app.getMessages().get(0));
+        assertEquals("prod: Started: log4j-spring-boot", app.getMessages().get(0));
     }
 
     @SpringBootApplication

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/AnsiEscape.java
Patch:
@@ -347,6 +347,7 @@ public enum AnsiEscape {
      * Bright white background color.
      */
     BG_BRIGHT_WHITE("107");
+    private static final StatusLogger LOGGER = StatusLogger.getLogger();
 
     private static final String DEFAULT_STYLE = CSI.getCode() + SUFFIX.getCode();
 
@@ -431,6 +432,8 @@ public static Map<String, String> createMap(final String[] values, final String[
                 final String value = keyValue[1];
                 final boolean escape = Arrays.binarySearch(sortedIgnoreKeys, key) < 0;
                 map.put(key, escape ? createSequence(value.split("\\s")) : value);
+            } else {
+                LOGGER.warn("Syntax error, missing '=': Expected \"{KEY1=VALUE, KEY2=VALUE, ...}");
             }
         }
         return map;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java
Patch:
@@ -154,7 +154,7 @@ public boolean requiresLocation() {
      *
      * @param configuration the current configuration
      * @param replace Allows portions of the resulting String to be replaced.
-     * @param pattern the current patternt
+     * @param pattern the current pattern
      * @param defaultPattern the default pattern
      * @param patternSelector Allows different patterns to be used with the PatternLayout based on some selection criteria.
      * @param alwaysWriteExceptions To always write exceptions even if the pattern contains no exception conversions.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/AnsiEscape.java
Patch:
@@ -347,6 +347,7 @@ public enum AnsiEscape {
      * Bright white background color.
      */
     BG_BRIGHT_WHITE("107");
+    private static final StatusLogger LOGGER = StatusLogger.getLogger();
 
     private static final String DEFAULT_STYLE = CSI.getCode() + SUFFIX.getCode();
 
@@ -431,6 +432,8 @@ public static Map<String, String> createMap(final String[] values, final String[
                 final String value = keyValue[1];
                 final boolean escape = Arrays.binarySearch(sortedIgnoreKeys, key) < 0;
                 map.put(key, escape ? createSequence(value.split("\\s")) : value);
+            } else {
+                LOGGER.warn("Syntax error, missing '=': Expected \"{KEY1=VALUE, KEY2=VALUE, ...}");
             }
         }
         return map;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/AnsiEscape.java
Patch:
@@ -347,6 +347,7 @@ public enum AnsiEscape {
      * Bright white background color.
      */
     BG_BRIGHT_WHITE("107");
+    private static final StatusLogger LOGGER = StatusLogger.getLogger();
 
     private static final String DEFAULT_STYLE = CSI.getCode() + SUFFIX.getCode();
 
@@ -431,6 +432,8 @@ public static Map<String, String> createMap(final String[] values, final String[
                 final String value = keyValue[1];
                 final boolean escape = Arrays.binarySearch(sortedIgnoreKeys, key) < 0;
                 map.put(key, escape ? createSequence(value.split("\\s")) : value);
+            } else {
+                LOGGER.warn("Syntax error, missing '=': Expected \"{KEY1=VALUE, KEY2=VALUE, ...}");
             }
         }
         return map;

File: log4j-1.2-api/src/main/java/org/apache/log4j/config/package-info.java
Patch:
@@ -17,9 +17,9 @@
 /**
  * Log4j 1.x compatibility layer.
  */
-@ExportTo("org.apache.logging.log4j.core")
+@Export
 @Open("org.apache.logging.log4j.core")
 package org.apache.log4j.config;
 
-import aQute.bnd.annotation.jpms.ExportTo;
 import aQute.bnd.annotation.jpms.Open;
+import org.osgi.annotation.bundle.Export;

File: log4j-api-test/src/test/java/org/apache/logging/log4j/message/ObjectMessageTest.java
Patch:
@@ -78,6 +78,7 @@ public void testSerializeWithSerializableParam() {
 
     @Test
     public void testDeserializeNonSerializableParamEqualIfToStringSame() {
+        @SuppressWarnings("EqualsHashCode")
         class NonSerializable {
             @Override
             public boolean equals(final Object other) {

File: log4j-core-its/src/test/java/org/apache/logging/log4j/PerformanceComparison.java
Patch:
@@ -110,7 +110,7 @@ private void doRun() {
     }
 
     //@Test
-    public void testRawPerformance() throws Exception {
+    private void testRawPerformance() throws Exception {
         final OutputStream os = new FileOutputStream("target/testos.log", true);
         final long result1 = writeToStream(COUNT, os);
         os.close();

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/CsvJsonParameterLayoutFileAppenderTest.java
Patch:
@@ -45,7 +45,7 @@ public class CsvJsonParameterLayoutFileAppenderTest {
     @Rule
     public RuleChain rule = loggerContextRule.withCleanFilesRule(FILE_PATH);
 
-    public void testNoNulCharacters(final String message, final String expected) throws IOException {
+    private void testNoNulCharacters(final String message, final String expected) throws IOException {
         @SuppressWarnings("resource")
         final LoggerContext loggerContext = loggerContextRule.getLoggerContext();
         final Logger logger = loggerContext.getLogger("com.example");
@@ -103,6 +103,7 @@ public void testNoNulCharactersOpenSquare() throws IOException {
         testNoNulCharacters("[", "[");
     }
 
+    @Test
     public void testNoNulCharactersThreeChars() throws IOException {
         testNoNulCharacters("ABC", "ABC");
     }

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/routing/RoutingAppenderWithJndiTest.java
Patch:
@@ -75,6 +75,7 @@ public void after() {
     }
 
     @Test
+    @SuppressWarnings("BanJNDI")
     public void routingTest() throws NamingException {
         // default route when there's no jndi resource
         StructuredDataMessage msg = new StructuredDataMessage("Test", "This is a message from unknown context", "Context");

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/lookup/MainInputArgumentsMapLookup.java
Patch:
@@ -34,7 +34,6 @@ public class MainInputArgumentsMapLookup extends MapLookup {
         final String[] args = null;
         for (final Map.Entry<Thread, StackTraceElement[]> entry : allStackTraces.entrySet()) {
             final StackTraceElement[] stackTraceElements = entry.getValue();
-            entry.getKey();
             // Can't use the thread name to look for "main" since anyone can set it.
             // Can't use thread ID since it can be any positive value, and is likely vendor dependent. Oracle seems to
             // use 1.

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/pattern/PatternParserTest.java
Patch:
@@ -204,7 +204,6 @@ private void testNestedPatternHighlight(final Level level, final String expected
         final List<PatternFormatter> formatters = parser.parse(nestedPatternHighlight);
         assertNotNull(formatters);
         final Throwable t = new Throwable();
-        t.getStackTrace();
         final LogEvent event = Log4jLogEvent.newBuilder() //
                 .setLoggerName("org.apache.logging.log4j.PatternParserTest") //
                 .setMarker(MarkerManager.getMarker("TEST")) //

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/tools/GenerateCustomLoggerTest.java
Patch:
@@ -56,6 +56,7 @@ public static void beforeClass() {
     }
 
     @Test
+    @SuppressWarnings("ReturnValueIgnored")
     public void testGenerateSource() throws Exception {
         final String CLASSNAME = "org.myorg.MyCustomLogger";
 

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/tools/GenerateExtendedLoggerTest.java
Patch:
@@ -57,6 +57,7 @@ public static void beforeClass() {
     }
 
     @Test
+    @SuppressWarnings("ReturnValueIgnored")
     public void testGenerateSource() throws Exception {
         final String CLASSNAME = "org.myorg.MyExtendedLogger";
 

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/util/datetime/FastDateParserTest.java
Patch:
@@ -315,7 +315,7 @@ public void testLANG_832() throws Exception {
 
     @Test
     public void testLang1121() throws ParseException {
-        final TimeZone kst = TimeZone.getTimeZone("KST");
+        final TimeZone kst = TimeZone.getTimeZone("Asia/Seoul");
         final DateParser fdp = getInstance("yyyyMMdd", kst, Locale.KOREA);
 
         try {

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/util/datetime/FixedDateFormatTest.java
Patch:
@@ -68,9 +68,9 @@ public void testConstructorDisallowsNullTimeZone() {
 
     @Test
     public void testCreateIfSupported_customTimeZoneIfOptionsArrayWithTimeZoneElement() {
-        final FixedDateFormat fmt = FixedDateFormat.createIfSupported(DEFAULT.getPattern(), "+08:00", "");
+        final FixedDateFormat fmt = FixedDateFormat.createIfSupported(DEFAULT.getPattern(), "GMT+08:00", "");
         assertEquals(DEFAULT.getPattern(), fmt.getFormat());
-        assertEquals(TimeZone.getTimeZone("+08:00"), fmt.getTimeZone());
+        assertEquals(TimeZone.getTimeZone("GMT+08:00"), fmt.getTimeZone());
     }
 
     @Test

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java
Patch:
@@ -891,7 +891,7 @@ public int hashCode() {
         result = 31 * result + (contextStack != null ? contextStack.hashCode() : 0);
         result = 31 * result + (int) (threadId ^ (threadId >>> 32));
         result = 31 * result + (threadName != null ? threadName.hashCode() : 0);
-        result = 31 * result + (threadPriority ^ (threadPriority >>> 32));
+        result = 31 * result + threadPriority;
         result = 31 * result + (source != null ? source.hashCode() : 0);
         result = 31 * result + (includeLocation ? 1 : 0);
         result = 31 * result + (endOfBatch ? 1 : 0);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java
Patch:
@@ -257,7 +257,7 @@ public static void unregisterLoggerContext(final String loggerContextName) {
      * @param mbs the MBean Server to unregister the instrumented objects from
      */
     public static void unregisterLoggerContext(final String contextName, final MBeanServer mbs) {
-        final String search = String.format(LoggerContextAdminMBean.PATTERN, escape(contextName), "*");
+        final String search = String.format(LoggerContextAdminMBean.PATTERN, escape(contextName));
         unregisterAllMatching(search, mbs); // unregister context mbean
 
         // now unregister all MBeans associated with this logger context
@@ -286,12 +286,12 @@ private static void registerContextSelector(final String contextName, final Cont
     }
 
     private static void unregisterStatusLogger(final String contextName, final MBeanServer mbs) {
-        final String search = String.format(StatusLoggerAdminMBean.PATTERN, escape(contextName), "*");
+        final String search = String.format(StatusLoggerAdminMBean.PATTERN, escape(contextName));
         unregisterAllMatching(search, mbs);
     }
 
     private static void unregisterContextSelector(final String contextName, final MBeanServer mbs) {
-        final String search = String.format(ContextSelectorAdminMBean.PATTERN, escape(contextName), "*");
+        final String search = String.format(ContextSelectorAdminMBean.PATTERN, escape(contextName));
         unregisterAllMatching(search, mbs);
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/JndiManager.java
Patch:
@@ -225,7 +225,7 @@ protected boolean releaseSub(final long timeout, final TimeUnit timeUnit) {
      * @return the named object if it could be located.
      * @throws  NamingException if a naming exception is encountered
      */
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({"unchecked", "BanJNDI"})
     public <T> T lookup(final String name) throws NamingException {
         if (context == null) {
             return null;

File: log4j-flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeEmbeddedAppenderTest.java
Patch:
@@ -196,7 +196,7 @@ public void testFailover() throws InterruptedException, IOException {
     }
     /* Flume 1.4.0 does not support interceptors on the embedded agent
     @Test      */
-    public void testHeaderAddedByInterceptor() {
+    private void testHeaderAddedByInterceptor() {
 
         final StructuredDataMessage msg = new StructuredDataMessage("Test", "Test Log4j", "Test");
         EventLogger.logEvent(msg);
@@ -208,7 +208,7 @@ public void testHeaderAddedByInterceptor() {
     }
 
     /* @Test */
-    public void testPerformance() throws Exception {
+    private void testPerformance() throws Exception {
         final long start = System.currentTimeMillis();
         final int count = 10000;
         for (int i = 0; i < count; ++i) {

File: log4j-jpa/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/JpaAppender.java
Patch:
@@ -91,7 +91,7 @@ public static JpaAppender createAppender(
                 LoaderUtil.loadClass(entityClassName).asSubclass(AbstractLogEventWrapperEntity.class);
 
             try {
-                entityClass.getConstructor();
+                final Constructor<?> ignored = entityClass.getConstructor();
             } catch (final NoSuchMethodException e) {
                 LOGGER.error("Entity class [{}] does not have a no-arg constructor. The JPA provider will reject it.",
                         entityClassName);

File: log4j-jpa/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/StackTraceElementAttributeConverter.java
Patch:
@@ -73,7 +73,7 @@ static StackTraceElement convertString(final String s) {
                     // we don't care
                 }
             } else {
-                fileName = parenthesisContents.substring(0);
+                fileName = parenthesisContents;
             }
         }
 

File: log4j-layout-template-json-test/src/test/java/org/apache/logging/log4j/layout/template/json/resolver/StackTraceStringResolverTest.java
Patch:
@@ -647,6 +647,7 @@ private static final class NonAsciiUtf8MethodNameContainingException extends Run
         private static final NonAsciiUtf8MethodNameContainingException INSTANCE =
                 createInstance();
 
+        @SuppressWarnings("UnicodeInCode")
         private static NonAsciiUtf8MethodNameContainingException createInstance() {
             try {
                 throwException_அஆஇฬ๘();
@@ -656,7 +657,7 @@ private static NonAsciiUtf8MethodNameContainingException createInstance() {
             }
         }
 
-        @SuppressWarnings("NonAsciiCharacters")
+        @SuppressWarnings({"NonAsciiCharacters", "UnicodeInCode"})
         private static void throwException_அஆஇฬ๘() {
             throw new NonAsciiUtf8MethodNameContainingException(
                     "exception with non-ASCII UTF-8 method name");

File: log4j-layout-template-json-test/src/test/java/org/apache/logging/log4j/layout/template/json/util/CharSequencePointerTest.java
Patch:
@@ -37,6 +37,7 @@ void charAt_should_fail_without_reset() {
     }
 
     @Test
+    @SuppressWarnings("ReturnValueIgnored")
     void toString_should_fail_without_reset() {
         // noinspection ResultOfMethodCallIgnored
         assertMissingReset(pointer::toString);

File: log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/ParameterizedMessageInliningBenchmark.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.log4j.perf.jmh;
 
+import java.util.Arrays;
 import java.util.concurrent.TimeUnit;
 
 import org.apache.logging.log4j.message.ParameterizedMessage;
@@ -184,7 +185,7 @@ public static String format0(final String messagePattern, final String[] argumen
                 result[pos++] = curChar;
             }
         }
-        return result.toString();
+        return Arrays.toString(result);
     }
 
     // 33 bytes

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/UsingStatusListener.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.logging.log4j.test.junit;
 
 import java.lang.annotation.Documented;
-import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -36,9 +35,9 @@
  */
 @Retention(RUNTIME)
 @Target({ TYPE, METHOD })
-@Inherited
 @Documented
 @ExtendWith(ExtensionContextAnchor.class)
+@ExtendWith(TestPropertyResolver.class)
 @ExtendWith(StatusLoggerExtension.class)
 public @interface UsingStatusListener {
 }

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/GcFreeLoggingTestUtil.java
Patch:
@@ -83,6 +83,7 @@ public static void executeLogging(final String configurationFile,
         final String[] exclude = new String[] {
                 "java/util/concurrent/locks/AbstractQueuedSynchronizer$Node", //
                 "com/google/monitoring/runtime/instrumentation/Sampler", //
+                "com/lmax/disruptor/InsufficientCapacityException"
         };
         final AtomicBoolean samplingEnabled = new AtomicBoolean(true);
         final Sampler sampler = (count, desc, newObj, size) -> {

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/util/ResolverUtilTest.java
Patch:
@@ -162,7 +162,9 @@ static URLClassLoader compileAndCreateClassLoader(final File tmpDir, final Strin
     }
 
     static void compile(final File tmpDir, final String suffix) throws Exception {
-        final File orig = new File(ResolverUtilTest.class.getResource("/customplugin/FixedStringLayout.java.source").toURI());
+        final URL resource = ResolverUtilTest.class.getResource("/customplugin/FixedStringLayout.java.source");
+        assertThat(resource).isNotNull();
+        final File orig = new File(resource.toURI());
         final File f = new File(tmpDir, "customplugin" + suffix + "/FixedString" + suffix + "Layout.java");
         final File parent = f.getParentFile();
         if (!parent.exists()) {

File: log4j-1.2-api/src/test/java/org/apache/log4j/config/SyslogAppenderTest.java
Patch:
@@ -37,7 +37,7 @@ public class SyslogAppenderTest {
     @BeforeAll
     public static void beforeClass() throws IOException {
         initTCPTestEnvironment(null);
-        System.setProperty("SyslogAppenderTest.port", Integer.toString(syslogServer.getLocalPort()));
+        System.setProperty("syslog.port", Integer.toString(syslogServer.getLocalPort()));
         System.setProperty(ConfigurationFactory.LOG4J1_CONFIGURATION_FILE_PROPERTY, "target/test-classes/log4j1-syslog.xml");
     }
 

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/TempLoggingDirectory.java
Patch:
@@ -64,7 +64,7 @@ private Path createLoggingPath(final ExtensionContext context, final CleanupMode
         final String baseDir = System.getProperty("basedir");
         final Path basePath = (baseDir != null ? Paths.get(baseDir, "target") : Paths.get(".")).resolve("logs");
         final Class<?> clazz = context.getRequiredTestClass();
-        final String dir = clazz.getName().replaceAll("[.$]", File.separator);
+        final String dir = clazz.getName().replaceAll("[.$]", File.separatorChar == '\\' ? "\\\\" : File.separator);
         final Path loggingPath = basePath.resolve(dir);
         Files.createDirectories(loggingPath);
         props.setProperty(TestProperties.LOGGING_PATH, loggingPath.toString());

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/mom/jeromq/JeroMqTestClient.java
Patch:
@@ -45,13 +45,15 @@ class JeroMqTestClient implements Callable<List<String>> {
     @Override
     public List<String> call() throws Exception {
         try (final ZMQ.Socket subscriber = context.socket(SocketType.SUB)) {
+            LOGGER.info("Starting JeroMqTestClient.");
             subscriber.connect(endpoint);
             subscriber.subscribe(ZMQ.SUBSCRIPTION_ALL);
+            LOGGER.info("Subscribing JeroMqTestClient to JeroMqAppender.");
             for (int messageNum = 0; messageNum < receiveCount
                     && !Thread.currentThread().isInterrupted(); messageNum++) {
                 // Use trim to remove the tailing '0' character
                 final String message = subscriber.recvStr(0).trim();
-                LOGGER.trace("Received 0MQ message: {}.", message);
+                LOGGER.debug("JeroMqTestClient received a message: {}.", message);
                 messages.add(message);
             }
         }

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/mom/jeromq/JeroMqTestClient.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.List;
 import java.util.concurrent.Callable;
 
-import org.apache.logging.log4j.util.Constants;
+import org.zeromq.SocketType;
 import org.zeromq.ZMQ;
 
 class JeroMqTestClient implements Callable<List<String>> {
@@ -40,9 +40,9 @@ class JeroMqTestClient implements Callable<List<String>> {
 
     @Override
     public List<String> call() throws Exception {
-        try (final ZMQ.Socket subscriber = context.socket(ZMQ.SUB)) {
+        try (final ZMQ.Socket subscriber = context.socket(SocketType.SUB)) {
             subscriber.connect(endpoint);
-            subscriber.subscribe(Constants.EMPTY_BYTE_ARRAY);
+            subscriber.subscribe(ZMQ.SUBSCRIPTION_ALL);
             for (int messageNum = 0; messageNum < receiveCount
                     && !Thread.currentThread().isInterrupted(); messageNum++) {
                 // Use trim to remove the tailing '0' character

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/jeromq/JeroMqAppender.java
Patch:
@@ -173,8 +173,8 @@ void resetSendRcs() {
     }
 
     // not public, handy for testing
-    byte[] recv(final int timeoutMs) {
-        return manager.recv(timeoutMs);
+    JeroMqManager getManager() {
+        return manager;
     }
 
     @Override

File: log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/RollingFileAppenderBuilder.java
Patch:
@@ -156,6 +156,7 @@ private Appender createAppender(final String name, final Log4j1Configuration con
         final RolloverStrategy strategy = DefaultRolloverStrategy.newBuilder()
                 .withConfig(config)
                 .withMax(maxBackups)
+                .withFileIndex("min")
                 .build();
         return AppenderWrapper.adapt(RollingFileAppender.newBuilder()
                 .setName(name)

File: log4j-1.2-api/src/test/java/org/apache/log4j/config/AbstractLog4j1ConfigurationTest.java
Patch:
@@ -207,6 +207,9 @@ private void testRollingFileAppender(final String configResource, final String n
         assertEquals(name, appender.getName());
         assertTrue(appender.getClass().getName(), appender instanceof RollingFileAppender);
         final RollingFileAppender rfa = (RollingFileAppender) appender;
+
+        assertTrue("defaultRolloverStrategy", rfa.getManager().getRolloverStrategy() instanceof DefaultRolloverStrategy);
+        assertFalse("rolloverStrategy", ((DefaultRolloverStrategy) rfa.getManager().getRolloverStrategy()).isUseMax());
         assertEquals("append", false, getAppendProperty(rfa));
         assertEquals("bufferSize", 1000, rfa.getManager().getBufferSize());
         assertEquals("immediateFlush", false, rfa.getImmediateFlush());

File: log4j-api-test/src/test/java/org/apache/logging/log4j/message/ParameterizedMessageTest.java
Patch:
@@ -115,7 +115,7 @@ public void testFormatStringArgsWithTrailingEscapedEscape() {
         final String testMsg = "Test message {}{} {}\\\\";
         final String[] args = { "a", "b", "c" };
         final String result = ParameterizedMessage.format(testMsg, args);
-        assertEquals("Test message ab c\\\\", result);
+        assertEquals("Test message ab c\\", result);
     }
 
     @Test

File: log4j-api-test/src/test/java/org/apache/logging/log4j/message/ReusableParameterizedMessageTest.java
Patch:
@@ -105,7 +105,7 @@ public void testFormatStringArgsWithTrailingEscapedEscape() {
         final String testMsg = "Test message {}{} {}\\\\";
         final String[] args = { "a", "b", "c" };
         final String result = new ReusableParameterizedMessage().set(testMsg, (Object[]) args).getFormattedMessage();
-        assertEquals("Test message ab c\\\\", result);
+        assertEquals("Test message ab c\\", result);
     }
 
     @Test

File: log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/RollingFileAppenderBuilder.java
Patch:
@@ -156,6 +156,7 @@ private Appender createAppender(final String name, final Log4j1Configuration con
         final RolloverStrategy strategy = DefaultRolloverStrategy.newBuilder()
                 .withConfig(config)
                 .withMax(maxBackups)
+                .withFileIndex("min")
                 .build();
         return AppenderWrapper.adapt(RollingFileAppender.newBuilder()
                 .setName(name)

File: log4j-1.2-api/src/test/java/org/apache/log4j/config/AbstractLog4j1ConfigurationTest.java
Patch:
@@ -207,6 +207,9 @@ private void testRollingFileAppender(final String configResource, final String n
         assertEquals(name, appender.getName());
         assertTrue(appender.getClass().getName(), appender instanceof RollingFileAppender);
         final RollingFileAppender rfa = (RollingFileAppender) appender;
+
+        assertTrue("defaultRolloverStrategy", rfa.getManager().getRolloverStrategy() instanceof DefaultRolloverStrategy);
+        assertFalse("rolloverStrategy", ((DefaultRolloverStrategy) rfa.getManager().getRolloverStrategy()).isUseMax());
         assertEquals("append", false, getAppendProperty(rfa));
         assertEquals("bufferSize", 1000, rfa.getManager().getBufferSize());
         assertEquals("immediateFlush", false, rfa.getImmediateFlush());

File: log4j-api/src/main/java/org/apache/logging/log4j/BridgeAware.java
Patch:
@@ -24,10 +24,10 @@
 public interface BridgeAware {
 
     /**
-     * Fully qualified class name of the entry point to the logging system. This
+     * To set fully qualified class name of the entry point to the logging system. This
      * class will not appear in the location information.
      *
-     * @param fqcn
+     * @param fqcn fully qualified class name
      */
     void setEntryPoint(final String fqcn);
 }

File: log4j-api/src/main/java/org/apache/logging/log4j/Level.java
Patch:
@@ -28,7 +28,9 @@
 
 /**
  * Levels used for identifying the severity of an event. Levels are organized from most specific to least:
+ * <p>
  * <table>
+ * <caption>Level names with description</caption>
  * <tr>
  * <th>Name</th>
  * <th>Description</th>
@@ -66,6 +68,7 @@
  * <td>All events should be logged.</td>
  * </tr>
  * </table>
+ * </p>
  * <p>
  * Typically, configuring a level in a filter or on a logger will cause logging events of that level and those that are
  * more specific to pass through the filter. A special level, {@link #ALL}, is guaranteed to capture all levels when

File: log4j-api/src/main/java/org/apache/logging/log4j/message/AbstractMessageFactory.java
Patch:
@@ -24,7 +24,9 @@
  * <p>
  * This class is immutable.
  * </p>
- * <h4>Note to implementors</h4>
+ * <p>
+ * <strong>Note to implementors:</strong>
+ * </p>
  * <p>
  * Subclasses can implement the {@link MessageFactory2} methods when they can most effectively build {@link Message}
  * instances. If a subclass does not implement {@link MessageFactory2} methods, these calls are routed through

File: log4j-api/src/main/java/org/apache/logging/log4j/message/FormattedMessageFactory.java
Patch:
@@ -20,7 +20,9 @@
  * Creates {@link FormattedMessage} instances for {@link MessageFactory2} methods (and {@link MessageFactory} by
  * extension.)
  *
- * <h4>Note to implementors</h4>
+ * <p>
+ * <strong>Note to implementors:</strong>
+ * </p>
  * <p>
  * This class implements all {@link MessageFactory2} methods.
  * </p>

File: log4j-api/src/main/java/org/apache/logging/log4j/message/LocalizedMessageFactory.java
Patch:
@@ -22,7 +22,9 @@
  * Creates {@link FormattedMessage} instances for {@link MessageFactory2} methods (and {@link MessageFactory} by
  * extension.)
  *
- * <h4>Note to implementors</h4>
+ * <p>
+ * <strong>Note to implementors:</strong>
+ * </p>
  * <p>
  * This class does <em>not</em> implement any {@link MessageFactory2} methods and lets the superclass funnel those calls
  * through {@link #newMessage(String, Object...)}.

File: log4j-api/src/main/java/org/apache/logging/log4j/message/MessageFormatMessageFactory.java
Patch:
@@ -19,8 +19,9 @@
 /**
  * Creates {@link FormattedMessage} instances for {@link MessageFactory2} methods (and {@link MessageFactory} by
  * extension.)
- *
- * <h4>Note to implementors</h4>
+ * <p>
+ * <strong>Note to implementors:</strong>
+ * </p>
  * <p>
  * This class implements all {@link MessageFactory2} methods.
  * </p>

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterConsumer.java
Patch:
@@ -35,7 +35,7 @@ public interface ParameterConsumer<S> {
      *
      * @param parameter the parameter
      * @param parameterIndex Index of the parameter
-     * @param state
+     * @param state the state data
      */
     void accept(Object parameter, int parameterIndex, S state);
 

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterizedMessageFactory.java
Patch:
@@ -29,7 +29,9 @@
  * This class is immutable.
  * </p>
  *
- * <h4>Note to implementors</h4>
+ * <p>
+ * <strong>Note to implementors:</strong>
+ * </p>
  * <p>
  * This class implements all {@link MessageFactory2} methods.
  * </p>

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterizedNoReferenceMessageFactory.java
Patch:
@@ -31,7 +31,9 @@
  * <p>
  * This class is immutable.
  * </p>
- * <h4>Note to implementors</h4>
+ * <p>
+ * <strong>Note to implementors:</strong>
+ * </p>
  * <p>
  * This class does <em>not</em> implement any {@link MessageFactory2} methods and lets the superclass funnel those calls
  * through {@link #newMessage(String, Object...)}.

File: log4j-api/src/main/java/org/apache/logging/log4j/message/SimpleMessageFactory.java
Patch:
@@ -29,8 +29,9 @@
  * <p>
  * This class is immutable.
  * </p>
- *
- * <h4>Note to implementors</h4>
+ * <p>
+ * <strong>Note to implementors:</strong>
+ * </p>
  * <p>
  * This class implements all {@link MessageFactory2} methods.
  * </p>

File: log4j-api/src/main/java/org/apache/logging/log4j/message/StringFormattedMessage.java
Patch:
@@ -29,7 +29,9 @@
 /**
  * Handles messages that consist of a format string conforming to {@link java.util.Formatter}.
  *
- * <h4>Note to implementors</h4>
+ * <p>
+ * <strong>Note to implementors:</strong>
+ * </p>
  * <p>
  * This class implements the unrolled args API even though StringFormattedMessage does not. This leaves the room for
  * StringFormattedMessage to unroll itself later.

File: log4j-api/src/main/java/org/apache/logging/log4j/message/StringFormatterMessageFactory.java
Patch:
@@ -28,7 +28,9 @@
  * <p>
  * This class is immutable.
  * </p>
- * <h4>Note to implementors</h4>
+ * <p>
+ * <strong>Note to implementors:</strong>
+ * </p>
  * <p>
  * This class implements all {@link MessageFactory2} methods.
  * </p>

File: log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataId.java
Patch:
@@ -79,9 +79,9 @@ public StructuredDataId(final String name, final int maxLength) {
 
     /**
      *
-     * @param name
-     * @param required
-     * @param optional
+     * @param name The name portion of the id.
+     * @param required The list of keys that are required for this id.
+     * @param optional The list of keys that are optional for this id.
      */
     public StructuredDataId(final String name, final String[] required, final String[] optional) {
         this(name, required, optional, MAX_LENGTH);

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/MutableThreadContextStack.java
Patch:
@@ -47,7 +47,7 @@ public MutableThreadContextStack() {
 
     /**
      * Constructs a new instance.
-     * @param list
+     * @param list Initial elements to be stored in this stack implementation.
      */
     public MutableThreadContextStack(final List<String> list) {
         this.list = new ArrayList<>(list);

File: log4j-api/src/main/java/org/apache/logging/log4j/util/EnglishEnums.java
Patch:
@@ -26,7 +26,7 @@
  * Helps convert English Strings to English Enum values.
  * </p>
  * <p>
- * Enum name arguments are converted internally to upper case with the {@linkplain Locale#ENGLISH ENGLISH} locale to
+ * Enum name arguments are converted internally to upper case with the {@linkplain java.util.Locale#ENGLISH ENGLISH} locale to
  * avoid problems on the Turkish locale. Do not use with Turkish enum values.
  * </p>
  */
@@ -38,7 +38,7 @@ private EnglishEnums() {
     /**
      * Returns the Result for the given string.
      * <p>
-     * The {@code name} is converted internally to upper case with the {@linkplain Locale#ENGLISH ENGLISH} locale to
+     * The {@code name} is converted internally to upper case with the {@linkplain java.util.Locale#ENGLISH ENGLISH} locale to
      * avoid problems on the Turkish locale. Do not use with Turkish enum values.
      * </p>
      *
@@ -54,7 +54,7 @@ public static <T extends Enum<T>> T valueOf(final Class<T> enumType, final Strin
     /**
      * Returns an enum value for the given string.
      * <p>
-     * The {@code name} is converted internally to upper case with the {@linkplain Locale#ENGLISH ENGLISH} locale to
+     * The {@code name} is converted internally to upper case with the {@linkplain java.util.Locale#ENGLISH ENGLISH} locale to
      * avoid problems on the Turkish locale. Do not use with Turkish enum values.
      * </p>
      *

File: log4j-api/src/main/java/org/apache/logging/log4j/util/ProcessIdUtil.java
Patch:
@@ -21,7 +21,7 @@
 import java.lang.reflect.Method;
 
 /**
- * @Since 2.9
+ * @since 2.9
  */
 public class ProcessIdUtil {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/DeleteAction.java
Patch:
@@ -189,8 +189,8 @@ protected FileVisitor<Path> createFileVisitor(final Path visitorBaseDir, final L
      *            href="http://logging.apache.org/log4j/2.x/manual/configuration.html#StatusMessages">status logger</a>
      *            at INFO level. Users can use this to do a dry run to test if their configuration works as expected.
      *            Default is false.
-     * @param PathSorter a plugin implementing the {@link PathSorter} interface
-     * @param PathConditions an array of path conditions (if more than one, they all need to accept a path before it is
+     * @param sorterParameter a plugin implementing the {@link PathSorter} interface
+     * @param pathConditions an array of path conditions (if more than one, they all need to accept a path before it is
      *            deleted).
      * @param config The Configuration.
      * @return A DeleteAction.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ScriptCondition.java
Patch:
@@ -61,9 +61,9 @@ public ScriptCondition(final AbstractScript script, final Configuration configur
     /**
      * Executes the script
      *
-     * @param baseDir
-     * @param candidates
-     * @return
+     * @param basePath base directory for files to delete
+     * @param candidates a list of paths, that can be deleted by the script
+     * @return a list of paths selected to delete by the script execution
      */
     @SuppressWarnings("unchecked")
     public List<PathWithAttributes> selectFilesToDelete(final Path basePath, final List<PathWithAttributes> candidates) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/SortingVisitor.java
Patch:
@@ -40,10 +40,9 @@ public class SortingVisitor extends SimpleFileVisitor<Path> {
     private final List<PathWithAttributes> collected = new ArrayList<>();
 
     /**
-     * Constructs a new DeletingVisitor.
+     * Constructs a new SortingVisitor.
      *
-     * @param basePath used to relativize paths
-     * @param pathFilters objects that need to confirm whether a file can be deleted
+     * @param sorter Interface implementation which can sort paths.
      */
     public SortingVisitor(final PathSorter sorter) {
         this.sorter = Objects.requireNonNull(sorter, "sorter");

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/PurgePolicy.java
Patch:
@@ -31,14 +31,14 @@ public interface PurgePolicy {
 
     /**
      * @param key routed appender key
-     * @param event
+     * @param event Provides contextual information about a logged message.
      */
     void update(String key, LogEvent event);
 
     /**
      * Initializes with routing appender
      *
-     * @param routingAppender
+     * @param routingAppender the routed appender for purging
      */
     void initialize(RoutingAppender routingAppender);
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/DiscardingAsyncQueueFullPolicy.java
Patch:
@@ -27,7 +27,7 @@
  * Discarding router extends the DefaultAsyncQueueFullPolicy by first verifying if the queue is fuller than the specified
  * threshold ratio; if this is the case, log events {@linkplain Level#isMoreSpecificThan(Level) more specific} than
  * the specified threshold level are dropped. If this is not the case, the {@linkplain DefaultAsyncQueueFullPolicy
- * default routing rules hold.
+ * default routing} rules hold.
  */
 public class DiscardingAsyncQueueFullPolicy extends DefaultAsyncQueueFullPolicy {
     private static final Logger LOGGER = StatusLogger.getLogger();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultAdvertiser.java
Patch:
@@ -39,7 +39,7 @@ public Object advertise(final Map<String, String> properties) {
 
     /**
      * Does nothing.
-     * @param advertisedObject
+     * @param advertisedObject the advertised object
      */
     @Override
     public void unadvertise(final Object advertisedObject) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/Property.java
Patch:
@@ -79,7 +79,7 @@ public String getValue() {
 
     /**
      * Returns {@code true} if the value contains a substitutable property that requires a lookup to be resolved.
-     * @return {@code true} if the value contains {@code "${"}, {@code false} otherwise
+     * @return {@code true} if the value contains {@code "${}"}, {@code false} otherwise
      */
     public boolean isValueNeedsLookup() {
         return valueNeedsLookup;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/convert/Base64Converter.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.logging.log4j.util.LoaderUtil;
 
 /**
- * @Since 2.9
+ * @since 2.9
  */
 public class Base64Converter {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/convert/HexConverter.java
Patch:
@@ -20,7 +20,7 @@
  * Converts Strings to hex. This is used in place of java.xml.bind.DataTypeConverter which is not available by
  * default in Java 9.
  *
- * @Since 2.9
+ * @since 2.9
  */
 public class HexConverter {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/RegexFilter.java
Patch:
@@ -119,8 +119,8 @@ public String toString() {
      * @param mismatch
      *        The action to perform when a mismatch occurs.
      * @return The RegexFilter.
-     * @throws IllegalAccessException
-     * @throws IllegalArgumentException
+     * @throws IllegalAccessException  When there is no access to the definition of the specified member.
+     * @throws IllegalArgumentException When passed an illegal or inappropriate argument.
      */
     // TODO Consider refactoring to use AbstractFilter.AbstractFilterBuilder
     @PluginFactory

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/StringMatchFilter.java
Patch:
@@ -158,7 +158,7 @@ public static class Builder extends AbstractFilterBuilder<StringMatchFilter.Buil
 
         /**
          * Sets the logging level to use.
-         * @param level the logging level to use.
+         * @param text the logging level to use
          * @return this
          */
         public StringMatchFilter.Builder setMatchString(final String text) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ExtendedClassInfo.java
Patch:
@@ -38,9 +38,9 @@ public final class ExtendedClassInfo implements Serializable {
     /**
      * Constructs a new instance.
      *
-     * @param exact
-     * @param location
-     * @param version
+     * @param exact Whether the class was obtained via {@link sun.reflect.Reflection#getCallerClass(int)}.
+     * @param location a classpath element or a jar
+     * @param version the string describing a version
      */
     public ExtendedClassInfo(final boolean exact, final String location, final String version) {
         this.exact = exact;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractLayout.java
Patch:
@@ -184,9 +184,9 @@ protected void markEvent() {
      * Subclasses can override this method to provide a garbage-free implementation. For text-based layouts,
      * {@code AbstractStringLayout} provides various convenience methods to help with this:
      * </p>
-     * <pre>@Plugin(name = "MyLayout", category = Node.CATEGORY, elementType = Layout.ELEMENT_TYPE, printObject = true)
+     * <pre> &#64;Plugin(name = "MyLayout", category = Node.CATEGORY, elementType = Layout.ELEMENT_TYPE, printObject = true)
      * public final class MyLayout extends AbstractStringLayout {
-     *     @Override
+     *     &#64;Override
      *     public void encode(LogEvent event, ByteBufferDestination destination) {
      *         StringBuilder text = getStringBuilder();
      *         convertLogEventToText(event, text);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/Facility.java
Patch:
@@ -20,8 +20,9 @@
 
 /**
  *  The facility codes used by the Syslog system.
- *
+ * <p>
  * <table>
+ *     <caption>Facility and corresponding numerical codes</caption>
  *     <tr>
  *         <th>Numerical Code</th>
  *         <th>Facility</th>
@@ -123,6 +124,7 @@
  *         <td>local use 7 (local7)</td>
  *     </tr>
  * </table>
+ * </p>
  */
 public enum Facility {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/MulticastDnsAdvertiser.java
Patch:
@@ -117,7 +117,7 @@ public Object advertise(final Map<String, String> properties) {
     /**
      * Unadvertise the previously advertised entity.
      *
-     * @param serviceInfo
+     * @param serviceInfo instance of {@code javax.jmdns.ServiceInfo}
      */
     @Override
     public void unadvertise(final Object serviceInfo) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NamePatternConverter.java
Patch:
@@ -51,7 +51,6 @@ protected NamePatternConverter(final String name, final String style, final Stri
      *
      * @param original string containing name.
      * @param destination the StringBuilder to write to
-     * @return The abbreviated name.
      */
     protected final void abbreviate(final String original, final StringBuilder destination) {
         abbreviator.abbreviate(original, destination);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/RootThrowablePatternConverter.java
Patch:
@@ -37,8 +37,8 @@ public final class RootThrowablePatternConverter extends ThrowablePatternConvert
     /**
      * Private constructor.
      *
-     * @param config
-     * @param options options, may be null.
+     * @param config the Configuration or {@code null}
+     * @param options Options, may be null.
      */
     private RootThrowablePatternConverter(final Configuration config, final String[] options) {
         super("RootThrowable", "throwable", options, config);
@@ -47,7 +47,7 @@ private RootThrowablePatternConverter(final Configuration config, final String[]
     /**
      * Gets an instance of the class.
      *
-     * @param config
+     * @param config The Configuration or {@code null}.
      * @param options pattern options, may be null.  If first element is "short",
      *                only the first line of the throwable will be formatted.
      * @return instance of class.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/CronExpression.java
Patch:
@@ -44,6 +44,7 @@
  * separated by white space. The fields respectively are described as follows:
  * <p/>
  * <table cellspacing="8">
+ * <caption>Cron Expressions Allowed Fields and Values</caption>
  * <tr>
  * <th align="left">Field Name</th>
  * <th align="left">&nbsp;</th>

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java
Patch:
@@ -132,8 +132,8 @@ public static void mkdir(final File dir, final boolean createDirectoryIfNotExist
     /**
      * Creates the parent directories for the given File.
      *
-     * @param file
-     * @throws IOException
+     * @param file For which parent directory is to be created.
+     * @throws IOException Thrown if the directory could not be created.
      */
     public static void makeParentDirs(final File file) throws IOException {
         final File parent = Objects.requireNonNull(file, "file").getCanonicalFile().getParentFile();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java
Patch:
@@ -362,7 +362,7 @@ public static boolean isJansiAvailable() {
     }
 
     /**
-     * Loads a class by name. This method respects the {@link #IGNORE_TCCL_PROPERTY} Log4j property. If this property is
+     * Loads a class by name. This method respects the {@link LoaderUtil#IGNORE_TCCL_PROPERTY IGNORE_TCCL_PROPERTY} Log4j property. If this property is
      * specified and set to anything besides {@code false}, then the default ClassLoader will be used.
      *
      * @param className The class name.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/ReflectionUtil.java
Patch:
@@ -179,7 +179,7 @@ public static <T> Constructor<T> getDefaultConstructor(final Class<T> clazz) {
      * @throws IllegalArgumentException if the given class is abstract, an interface, an array class, a primitive type,
      *                                  or void
      * @throws IllegalStateException    if access is denied to the constructor, or there are no default constructors
-     * @throws InternalException        wrapper of the underlying exception if checked
+     * @throws InternalError        wrapper of the underlying exception if checked
      */
     public static <T> T instantiate(final Class<T> clazz) {
         Objects.requireNonNull(clazz, "No class provided");

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/xml/XmlSchemaTest.java
Patch:
@@ -60,7 +60,8 @@ public class XmlSchemaTest {
             "perf-CountingNoOpAppender.xml", // uses test-appender CountingNoOp
             "reconfiguration-deadlock.xml", // uses test-appender ReconfigurationDeadlockTestAppender
             "AsyncWaitStrategy", // uses AsyncWaitStrategyFactory (LOG4J2-3472)
-            "XmlConfigurationSecurity.xml" // used for testing XML parser; shouldn't be parseable in secure settings
+            "XmlConfigurationSecurity.xml", // used for testing XML parser; shouldn't be parseable in secure settings
+            "InvalidConfig.xml", "InvalidXML.xml"
     );
 
     static Stream<Path> testXmlSchemaValidation() throws IOException {

File: log4j-layout-template-json-test/src/test/java/org/apache/logging/log4j/layout/template/json/GcpLayoutTest.java
Patch:
@@ -27,6 +27,7 @@
 import org.junit.jupiter.api.Test;
 
 import static org.apache.logging.log4j.layout.template.json.TestHelpers.CONFIGURATION;
+import static org.apache.logging.log4j.layout.template.json.TestHelpers.JAVA_BASE_PREFIX;
 import static org.apache.logging.log4j.layout.template.json.TestHelpers.usingSerializedLogEventAccessor;
 import static org.assertj.core.api.Assertions.assertThat;
 
@@ -88,7 +89,7 @@ private static void verifySerialization(final LogEvent logEvent) {
                         .contains(logEvent.getMessage().getFormattedMessage())
                         .contains(exception.getLocalizedMessage())
                         .contains("at org.apache.logging.log4j.layout.template.json")
-                        .contains("at java.lang.reflect.Method")
+                        .contains("at " + JAVA_BASE_PREFIX + "java.lang.reflect.Method")
                         .contains("at org.junit.platform.engine");
             }
 
@@ -158,7 +159,7 @@ private static void verifySerialization(final LogEvent logEvent) {
                         new String[]{"_exception", "stackTrace"}))
                         .contains(exception.getLocalizedMessage())
                         .contains("at org.apache.logging.log4j.layout.template.json")
-                        .contains("at java.lang.reflect.Method")
+                        .contains("at " + JAVA_BASE_PREFIX + "java.lang.reflect.Method")
                         .contains("at org.junit.platform.engine");
 
             } else {

File: log4j-layout-template-json-test/src/test/java/org/apache/logging/log4j/layout/template/json/JsonTemplateLayoutGcFreeTest.java
Patch:
@@ -35,6 +35,7 @@ void test_no_allocation_during_steady_state_logging() throws Exception {
     public static void main(final String[] args) throws Exception {
         System.setProperty("log4j.layout.jsonTemplate.recyclerFactory", "threadLocal");
         System.setProperty("log4j2.garbagefree.threadContextMap", "true");
+        System.setProperty("log4j2.clock", "SystemMillisClock");
         GcFreeLoggingTestUtil.executeLogging(
                 "gcFreeJsonTemplateLayoutLogging.xml",
                 JsonTemplateLayoutGcFreeTest.class);

File: log4j-layout-template-json-test/src/test/java/org/apache/logging/log4j/layout/template/json/TestHelpers.java
Patch:
@@ -35,11 +35,14 @@
 import org.apache.logging.log4j.layout.template.json.util.JsonReader;
 import org.apache.logging.log4j.layout.template.json.util.JsonWriter;
 import org.apache.logging.log4j.layout.template.json.util.MapAccessor;
+import org.apache.logging.log4j.util.Constants;
 
 public final class TestHelpers {
 
     public static final Configuration CONFIGURATION = new DefaultConfiguration();
 
+    public static final String JAVA_BASE_PREFIX = Constants.JAVA_MAJOR_VERSION > 8 ? "java.base/" : "";
+
     private static final JsonWriter JSON_WRITER = JsonWriter
             .newBuilder()
             .setMaxStringLength(10_000)

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/util/datetime/FixedDateFormatTest.java
Patch:
@@ -423,7 +423,7 @@ public void testFixedFormatLength(FixedFormat format) {
         ZoneId zone = ZoneId.of("Europe/Warsaw");
         long epochMillis = ZonedDateTime.of(date, time, zone).toInstant().toEpochMilli();
         MutableInstant instant = new MutableInstant();
-        instant.initFromEpochMilli(epochMillis, 0);
+        instant.initFromEpochMilli(epochMillis, 123_456);
         FixedDateFormat formatter = FixedDateFormat.create(format);
 
         String formatted = formatter.formatInstant(instant);

File: log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/util/InstantFormatter.java
Patch:
@@ -323,7 +323,8 @@ private static final class Log4jFixedFormatter implements Formatter {
 
         private Log4jFixedFormatter(final FixedDateFormat formatter) {
             this.formatter = formatter;
-            this.buffer = new char[formatter.getFormat().length()];
+            // double size for locales with lengthy DateFormatSymbols
+            this.buffer = new char[formatter.getLength() << 1];
         }
 
         @Override

File: log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ContextSelector.java
Patch:
@@ -79,7 +79,7 @@ default boolean hasContext(String fqcn, ClassLoader loader, boolean currentConte
      */
     default LoggerContext getContext(String fqcn, ClassLoader loader, Map.Entry<String, Object> entry, boolean currentContext) {
         final LoggerContext lc = getContext(fqcn, loader, currentContext);
-        if (lc != null) {
+        if (lc != null && entry != null) {
             lc.putObject(entry.getKey(), entry.getValue());
         }
         return lc;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ContextSelector.java
Patch:
@@ -108,7 +108,7 @@ default LoggerContext getContext(String fqcn, ClassLoader loader, Map.Entry<Stri
     default LoggerContext getContext(String fqcn, ClassLoader loader, Map.Entry<String, Object> entry,
             boolean currentContext, URI configLocation) {
         final LoggerContext lc = getContext(fqcn, loader, currentContext, configLocation);
-        if (lc != null) {
+        if (lc != null && entry != null) {
             lc.putObject(entry.getKey(), entry.getValue());
         }
         return lc;

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/ConfigurationSourceTest.java
Patch:
@@ -104,7 +104,7 @@ private long getOpenFileDescriptorCount() {
         return 0L;
     }
 
-    private static URL prepareJarConfigURL() throws IOException {
+    public static URL prepareJarConfigURL() throws IOException {
         if (!Files.exists(JAR_FILE)) {
             final Manifest manifest = new Manifest();
             manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0");

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationSource.java
Patch:
@@ -359,8 +359,9 @@ private static ConfigurationSource getConfigurationSource(final URL url) {
                     return new ConfigurationSource(urlConnection.getInputStream(), FileUtils.fileFromUri(url.toURI()));
                 } else if (urlConnection instanceof JarURLConnection) {
                     // Work around https://bugs.openjdk.java.net/browse/JDK-6956385.
-                    final long lastModified = new File(((JarURLConnection) urlConnection).getJarFile().getName())
-                            .lastModified();
+                    URL jarFileUrl = ((JarURLConnection)urlConnection).getJarFileURL();
+                    File jarFile = new File(jarFileUrl.getFile());
+                    long lastModified = jarFile.lastModified();
                     return new ConfigurationSource(urlConnection.getInputStream(), url, lastModified);
                 } else {
                     return new ConfigurationSource(urlConnection.getInputStream(), url, urlConnection.getLastModified());

File: log4j-api-test/src/test/java/org/apache/logging/log4j/message/MapMessageTest.java
Patch:
@@ -187,7 +187,8 @@ public void testJsonFormatterMaxDepthConformance() {
     public static String testJsonFormatterMaxDepth(final int depth) {
         List<Object> list = new LinkedList<>();
         list.add(1);
-        while (--depth > 0) {
+        int currentDepth = depth;
+        while (--currentDepth > 0) {
             list = new LinkedList<>(Collections.singletonList(list));
         }
         return new ObjectMapMessage()

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrMatcher.java
Patch:
@@ -359,8 +359,9 @@ public int isMatch(final char[] buffer, final int pos, final int bufferStart, fi
             if (pos + len > bufferEnd) {
                 return 0;
             }
-            for (int i = 0; i < chars.length; i++, pos++) {
-                if (chars[i] != buffer[pos]) {
+            int p = pos;
+            for (int i = 0; i < chars.length; i++, p++) {
+                if (chars[i] != buffer[p]) {
                     return 0;
                 }
             }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/LevelPatternConverter.java
Patch:
@@ -33,7 +33,7 @@
 @Plugin(name = "LevelPatternConverter", category = PatternConverter.CATEGORY)
 @ConverterKeys({"p", "level"})
 @PerformanceSensitive("allocation")
-public final class LevelPatternConverter extends LogEventPatternConverter {
+public abstract class LevelPatternConverter extends LogEventPatternConverter {
     private static final String OPTION_LENGTH = "length";
     private static final String OPTION_LOWER = "lowerCase";
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MessagePatternConverter.java
Patch:
@@ -38,7 +38,7 @@
 @Plugin(name = "MessagePatternConverter", category = PatternConverter.CATEGORY)
 @ConverterKeys({"m", "msg", "message"})
 @PerformanceSensitive("allocation")
-public final class MessagePatternConverter extends LogEventPatternConverter {
+public abstract class MessagePatternConverter extends LogEventPatternConverter {
 
     private static final String LOOKUPS = "lookups";
     private static final String NOLOOKUPS = "nolookups";

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JsonLayout.java
Patch:
@@ -242,7 +242,7 @@ public String getContentType() {
      * @param headerPattern
      *            The header pattern, defaults to {@code "["} if null.
      * @param footerPattern
-     *            The header pattern, defaults to {@code "]"} if null.
+     *            The footer pattern, defaults to {@code "]"} if null.
      * @param charset
      *            The character set to use, if {@code null}, uses "UTF-8".
      * @param includeStacktrace

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/YamlLayout.java
Patch:
@@ -167,7 +167,7 @@ public String getContentType() {
      * @param headerPattern
      *            The header pattern, defaults to {@code ""} if null.
      * @param footerPattern
-     *            The header pattern, defaults to {@code ""} if null.
+     *            The footer pattern, defaults to {@code ""} if null.
      * @param charset
      *            The character set to use, if {@code null}, uses "UTF-8".
      * @param includeStacktrace

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/Facility.java
Patch:
@@ -207,7 +207,7 @@ public enum Facility {
     /**
      * Returns the Facility for the given string.
      *
-     * @param name The Facility enum name, case-insensitive. If null, returns, null
+     * @param name The Facility enum name, case-insensitive. If null, returns null
      * @return a Facility enum value or null if name is null
      */
     public static Facility toFacility(final String name) {
@@ -219,7 +219,7 @@ public static Facility toFacility(final String name) {
      *
      * @param name The Facility enum name, case-insensitive. If null, returns, defaultFacility
      * @param defaultFacility the Facility to return if name is null
-     * @return a Facility enum value or null if name is null
+     * @return a Facility enum value or defaultFacility if name is null
      */
     public static Facility toFacility(final String name, final Facility defaultFacility) {
         return EnglishEnums.valueOf(Facility.class, name, defaultFacility);

File: log4j-api/src/main/java/org/apache/logging/log4j/BridgeAware.java
Patch:
@@ -28,7 +28,6 @@ public interface BridgeAware {
      * class will not appear in the location information.
      * 
      * @param fqcn
-     * @return this
      */
     public void setEntryPoint(final String fqcn);
 }

File: log4j-api/src/main/java/org/apache/logging/log4j/util/Constants.java
Patch:
@@ -50,7 +50,7 @@ public final class Constants {
      * Maximum size of the StringBuilders used in RingBuffer LogEvents to store the contents of reusable Messages.
      * After a large message has been delivered to the appenders, the StringBuilder is trimmed to this size.
      * <p>
-     * The default value is {@value}, which allows the StringBuilder to resize three times from its initial size.
+     * The default value is 518, which allows the StringBuilder to resize three times from its initial size.
      * Users can override with system property "log4j.maxReusableMsgSize".
      * </p>
      * @since 2.9

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/Resources.java
Patch:
@@ -19,7 +19,7 @@
 import org.junit.jupiter.api.parallel.ResourceLock;
 
 /**
- * Constants to use the the {@link ResourceLock} annotation.
+ * Constants to use the {@link ResourceLock} annotation.
  *
  */
 public class Resources {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/api/ComponentBuilder.java
Patch:
@@ -84,7 +84,7 @@ public interface ComponentBuilder<T extends ComponentBuilder<T>> extends Builder
 
     /**
      * Returns the name of the component, if any.
-     * @return The components name or null if it doesn't have one.
+     * @return The component's name or null if it doesn't have one.
      */
     String getName();
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JsonLayout.java
Patch:
@@ -139,7 +139,7 @@ public B setAdditionalFields(final KeyValuePair[] additionalFields) {
     @Deprecated
     protected JsonLayout(final Configuration config, final boolean locationInfo, final boolean properties,
             final boolean encodeThreadContextAsList,
-            final boolean complete, final boolean compact, final boolean eventEol, final String endOfLine,final String headerPattern,
+            final boolean complete, final boolean compact, final boolean eventEol, final String endOfLine, final String headerPattern,
             final String footerPattern, final Charset charset, final boolean includeStacktrace) {
         super(config, new JacksonFactory.JSON(encodeThreadContextAsList, includeStacktrace, false, false).newWriter(
                 locationInfo, properties, compact),

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java
Patch:
@@ -58,7 +58,7 @@
  * This class is especially useful in multi-threaded server environments.
  * <code>SimpleDateFormat</code> is not thread-safe in any JDK version,
  * nor will it be as Sun has closed the
- * <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4228335">bug</a>/RFE.
+ * <a href="https://bugs.openjdk.org/browse/JDK-4228335">bug</a>/RFE.
  * </p>
  *
  * <p>Only parsing is supported by this class, but all patterns are compatible with

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java
Patch:
@@ -744,7 +744,7 @@ public Builder withNoConsoleNoAnsi(final boolean noConsoleNoAnsi) {
 
         /**
          * @param header
-         *        The footer to place at the top of the document, once.
+         *        The header to place at the top of the document, once.
          */
         public Builder withHeader(final String header) {
             this.header = header;

File: log4j-1.2-api/src/main/java/org/apache/log4j/bridge/LayoutAdapter.java
Patch:
@@ -34,7 +34,7 @@ public class LayoutAdapter implements org.apache.logging.log4j.core.Layout<Strin
      * the result of
      * {@link LayoutWrapper#adapt(org.apache.logging.log4j.core.Layout)} should
      * return the original Log4j 2.x layout.
-     * 
+     *
      * @param layout a Log4j 1.x layout
      * @return a Log4j 2.x layout or {@code null} if the parameter is {@code null}
      */

File: log4j-1.2-api/src/main/java/org/apache/log4j/builders/AbstractBuilder.java
Patch:
@@ -16,9 +16,6 @@
  */
 package org.apache.log4j.builders;
 
-import static org.apache.log4j.xml.XmlConfiguration.NAME_ATTR;
-import static org.apache.log4j.xml.XmlConfiguration.VALUE_ATTR;
-
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Properties;
@@ -38,6 +35,9 @@
 import org.apache.logging.log4j.util.Strings;
 import org.w3c.dom.Element;
 
+import static org.apache.log4j.xml.XmlConfiguration.NAME_ATTR;
+import static org.apache.log4j.xml.XmlConfiguration.VALUE_ATTR;
+
 /**
  * Base class for Log4j 1 component builders.
  *

File: log4j-1.2-api/src/main/java/org/apache/log4j/builders/filter/LevelMatchFilterBuilder.java
Patch:
@@ -16,9 +16,6 @@
  */
 package org.apache.log4j.builders.filter;
 
-import static org.apache.log4j.builders.BuilderManager.CATEGORY;
-import static org.apache.log4j.xml.XmlConfiguration.forEachElement;
-
 import java.util.Properties;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicReference;
@@ -34,6 +31,9 @@
 import org.apache.logging.log4j.core.filter.LevelMatchFilter;
 import org.w3c.dom.Element;
 
+import static org.apache.log4j.builders.BuilderManager.CATEGORY;
+import static org.apache.log4j.xml.XmlConfiguration.forEachElement;
+
 /**
  * Build a Level match filter.
  */

File: log4j-1.2-api/src/main/java/org/apache/log4j/or/ObjectRenderer.java
Patch:
@@ -25,5 +25,5 @@ public interface ObjectRenderer {
      * @param o The object to render.
      * @return The String representation of the object.
      */
-	 String doRender(Object o);
+     String doRender(Object o);
 }

File: log4j-api-test/src/test/java/org/apache/logging/log4j/test/BetterService.java
Patch:
@@ -14,8 +14,7 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-
-package org.apache.logging.log4j.util.test;
+package org.apache.logging.log4j.test;
 
 public interface BetterService extends Service {
-}
\ No newline at end of file
+}

File: log4j-api-test/src/test/java/org/apache/logging/log4j/test/Service.java
Patch:
@@ -14,8 +14,7 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-
-package org.apache.logging.log4j.util.test;
+package org.apache.logging.log4j.test;
 
 public interface Service {
-}
\ No newline at end of file
+}

File: log4j-api-test/src/test/java/org/apache/logging/log4j/test/Service1.java
Patch:
@@ -14,8 +14,7 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-
-package org.apache.logging.log4j.util.test;
+package org.apache.logging.log4j.test;
 
 public class Service1 implements Service {
-}
\ No newline at end of file
+}

File: log4j-api-test/src/test/java/org/apache/logging/log4j/test/Service2.java
Patch:
@@ -14,8 +14,7 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-
-package org.apache.logging.log4j.util.test;
+package org.apache.logging.log4j.test;
 
 public class Service2 implements BetterService {
-}
\ No newline at end of file
+}

File: log4j-api/src/main/java/org/apache/logging/log4j/util/StackLocator.java
Patch:
@@ -54,7 +54,7 @@ public final class StackLocator {
     private static final Method GET_CALLER_CLASS_METHOD;
 
     private static final StackLocator INSTANCE;
-    
+
     /** TODO: Use Object.class. */
     private static final Class<?> DEFAULT_CALLER_CLASS = null;
 
@@ -203,7 +203,7 @@ public Deque<Class<?>> getCurrentStackTrace() {
         final Deque<Class<?>> classes = new ArrayDeque<>();
         Class<?> clazz;
         for (int i = 1; null != (clazz = getCallerClass(i)); i++) {
-            classes.push(clazz);
+            classes.addLast(clazz);
         }
         return classes;
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxyHelper.java
Patch:
@@ -85,7 +85,7 @@ static ExtendedStackTraceElement[] toExtendedStackTrace(
             stackLength = stackTrace.length;
         }
         final ExtendedStackTraceElement[] extStackTrace = new ExtendedStackTraceElement[stackLength];
-        Class<?> clazz = stack.isEmpty() ? null : stack.peek();
+        Class<?> clazz = stack.isEmpty() ? null : stack.peekLast();
         ClassLoader lastLoader = null;
         for (int i = stackLength - 1; i >= 0; --i) {
             final StackTraceElement stackTraceElement = stackTrace[i];
@@ -98,8 +98,8 @@ static ExtendedStackTraceElement[] toExtendedStackTrace(
                 final CacheEntry entry = toCacheEntry(clazz, true);
                 extClassInfo = entry.element;
                 lastLoader = entry.loader;
-                stack.pop();
-                clazz = stack.isEmpty() ? null : stack.peek();
+                stack.pollLast();
+                clazz = stack.isEmpty() ? null : stack.peekLast();
             } else {
                 final CacheEntry cacheEntry = map.get(className);
                 if (cacheEntry != null) {

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java
Patch:
@@ -108,7 +108,7 @@ public abstract class AbstractLogger implements ExtendedLogger, LocationAwareLog
     private final MessageFactory2 messageFactory;
     private final FlowMessageFactory flowMessageFactory;
     private static final ThreadLocal<int[]> recursionDepthHolder = new ThreadLocal<>(); // LOG4J2-1518, LOG4J2-2031
-    protected final transient ThreadLocal<DefaultLogBuilder> logBuilder;
+    private final transient ThreadLocal<DefaultLogBuilder> logBuilder;
 
     /**
      * Creates a new logger named after this class (or subclass).

File: log4j-slf4j2-impl/src/main/java/org/apache/logging/slf4j/Log4jLoggerFactory.java
Patch:
@@ -67,7 +67,7 @@ Log4jMarkerFactory getMarkerFactory() {
 
     private LoggerContext validateContext(final LoggerContext context) {
         if (TO_SLF4J_CONTEXT.equals(context.getClass().getName())) {
-            throw new LoggingException("log4j-slf4j-impl cannot be present with log4j-to-slf4j");
+            throw new LoggingException("log4j-slf4j2-impl cannot be present with log4j-to-slf4j");
         }
         return context;
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java
Patch:
@@ -319,7 +319,8 @@ public LoggerConfig build() {
                 LevelAndRefs container = LoggerConfig.getLevelAndRefs(getLevel(), getRefs(), getLevelAndRefs(),
                         getConfig());
                 return new AsyncLoggerConfig(LogManager.ROOT_LOGGER_NAME, container.refs, getFilter(), container.level,
-                        isAdditivity(), getProperties(), getConfig(), includeLocation(getIncludeLocation()));
+                        isAdditivity(), getProperties(), getConfig(),
+                        AsyncLoggerConfig.includeLocation(getIncludeLocation()));
             }
         }
 

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/TestProperties.java
Patch:
@@ -14,7 +14,6 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-
 package org.apache.logging.log4j.test;
 
 /**

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/ExtensionContextAnchor.java
Patch:
@@ -14,18 +14,17 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-
 package org.apache.logging.log4j.test.junit;
 
-import static org.junit.jupiter.api.Assertions.assertNotNull;
-
 import org.junit.jupiter.api.extension.AfterAllCallback;
 import org.junit.jupiter.api.extension.AfterEachCallback;
 import org.junit.jupiter.api.extension.BeforeAllCallback;
 import org.junit.jupiter.api.extension.BeforeEachCallback;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.ExtensionContext.Namespace;
 
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
 public class ExtensionContextAnchor
         implements BeforeAllCallback, BeforeEachCallback, AfterAllCallback, AfterEachCallback {
 

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/InitializesThreadContext.java
Patch:
@@ -14,7 +14,6 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-
 package org.apache.logging.log4j.test.junit;
 
 import java.lang.annotation.Documented;

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/Resources.java
Patch:
@@ -14,7 +14,6 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-
 package org.apache.logging.log4j.test.junit;
 
 import org.junit.jupiter.api.parallel.ResourceLock;

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/TestPropertySource.java
Patch:
@@ -14,7 +14,6 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-
 package org.apache.logging.log4j.test.junit;
 
 import org.apache.logging.log4j.test.TestProperties;

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/ThreadContextMapExtension.java
Patch:
@@ -14,7 +14,6 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-
 package org.apache.logging.log4j.test.junit;
 
 import java.util.Map;

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/UsingThreadContextMap.java
Patch:
@@ -14,7 +14,6 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-
 package org.apache.logging.log4j.test.junit;
 
 import java.lang.annotation.Documented;

File: log4j-api-test/src/test/java/org/apache/logging/log4j/LambdaLoggerTest.java
Patch:
@@ -14,7 +14,6 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-
 package org.apache.logging.log4j;
 
 import java.util.ArrayList;

File: log4j-api-test/src/test/java/org/apache/logging/log4j/MarkerTest.java
Patch:
@@ -60,7 +60,7 @@ public void testHasParents() {
         existing.setParents(parent);
         assertTrue(existing.hasParents());
     }
-    
+
     @Test
     public void testMarker() {
         // root (level 1)

File: log4j-api-test/src/test/java/org/apache/logging/log4j/spi/DefaultThreadContextMapTest.java
Patch:
@@ -134,7 +134,7 @@ private DefaultThreadContextMap createMap() {
         assertEquals("value2", map.get("key2"));
         return map;
     }
-    
+
     @Test
     public void testGetCopyReturnsMutableMap() {
         final DefaultThreadContextMap map = new DefaultThreadContextMap(true);
@@ -227,7 +227,7 @@ public void testThreadLocalNotInheritableByDefault() {
         final ThreadLocal<Map<String, String>> threadLocal = DefaultThreadContextMap.createThreadLocalMap(true);
         assertFalse(threadLocal instanceof InheritableThreadLocal<?>);
     }
-    
+
     @Test
     @SetSystemProperty(key = DefaultThreadContextMap.INHERITABLE_MAP, value = "true")
     @InitializesThreadContext

File: log4j-api-test/src/test/java/org/apache/logging/log4j/status/StatusConsoleListenerTest.java
Patch:
@@ -16,6 +16,9 @@
  */
 package org.apache.logging.log4j.status;
 
+import java.io.ByteArrayOutputStream;
+import java.io.PrintStream;
+
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogBuilder;
 import org.apache.logging.log4j.message.Message;
@@ -26,9 +29,6 @@
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
-import java.io.ByteArrayOutputStream;
-import java.io.PrintStream;
-
 public class StatusConsoleListenerTest {
 
     public static final MessageFactory MESSAGE_FACTORY = ParameterizedNoReferenceMessageFactory.INSTANCE;

File: log4j-api/src/main/java/org/apache/logging/log4j/ThreadContext.java
Patch:
@@ -14,7 +14,6 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-
 package org.apache.logging.log4j;
 
 import java.io.Serializable;
@@ -27,13 +26,13 @@
 import java.util.NoSuchElementException;
 
 import org.apache.logging.log4j.message.ParameterizedMessage;
+import org.apache.logging.log4j.spi.CleanableThreadContextMap;
 import org.apache.logging.log4j.spi.DefaultThreadContextMap;
 import org.apache.logging.log4j.spi.DefaultThreadContextStack;
 import org.apache.logging.log4j.spi.NoOpThreadContextMap;
 import org.apache.logging.log4j.spi.ReadOnlyThreadContextMap;
 import org.apache.logging.log4j.spi.ThreadContextMap;
 import org.apache.logging.log4j.spi.ThreadContextMap2;
-import org.apache.logging.log4j.spi.CleanableThreadContextMap;
 import org.apache.logging.log4j.spi.ThreadContextMapFactory;
 import org.apache.logging.log4j.spi.ThreadContextStack;
 import org.apache.logging.log4j.util.PropertiesUtil;

File: log4j-api/src/main/java/org/apache/logging/log4j/status/SimpleLoggerFactory.java
Patch:
@@ -16,13 +16,13 @@
  */
 package org.apache.logging.log4j.status;
 
+import java.io.PrintStream;
+
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.message.MessageFactory;
 import org.apache.logging.log4j.simple.SimpleLogger;
 import org.apache.logging.log4j.util.Strings;
 
-import java.io.PrintStream;
-
 /**
  * {@link org.apache.logging.log4j.simple.SimpleLogger} factory to be used by {@link StatusLogger} and {@link StatusConsoleListener}.
  */

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/junit/ConfigurationResolver.java
Patch:
@@ -14,7 +14,6 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-
 package org.apache.logging.log4j.core.test.junit;
 
 import org.apache.logging.log4j.core.LoggerContext;

File: log4j-core-test/src/main/java/org/apache/logging/log4j/core/test/junit/LoggerContextResolver.java
Patch:
@@ -14,16 +14,15 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-
 package org.apache.logging.log4j.core.test.junit;
 
 import java.lang.reflect.Method;
 import java.util.concurrent.TimeUnit;
 
-import org.apache.logging.log4j.test.junit.TypeBasedParameterResolver;
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.LoggerContextAccessor;
 import org.apache.logging.log4j.core.config.Configurator;
+import org.apache.logging.log4j.test.junit.TypeBasedParameterResolver;
 import org.junit.jupiter.api.extension.AfterAllCallback;
 import org.junit.jupiter.api.extension.AfterEachCallback;
 import org.junit.jupiter.api.extension.BeforeAllCallback;

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/mom/kafka/KafkaAppenderCloseTimeoutTest.java
Patch:
@@ -14,7 +14,6 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-
 package org.apache.logging.log4j.core.appender.mom.kafka;
 
 import java.time.Duration;

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/HtmlLayoutTest.java
Patch:
@@ -47,8 +47,8 @@
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
-import static org.junit.jupiter.api.Assertions.*;
 import static org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat;
+import static org.junit.jupiter.api.Assertions.*;
 
 @UsingAnyThreadContext
 public class HtmlLayoutTest {
@@ -266,7 +266,7 @@ private void testLayoutWithDatePatternFixedFormat(FixedFormat format, String tim
 
         // LOG4J2-3019 HtmlLayoutTest.testLayoutWithDatePatternFixedFormat test fails on windows
         // https://issues.apache.org/jira/browse/LOG4J2-3019
-        // java.time.format.DateTimeFormatterBuilder.toFormatter() defaults to using 
+        // java.time.format.DateTimeFormatterBuilder.toFormatter() defaults to using
         // Locale.getDefault(Locale.Category.FORMAT)
         final Locale formatLocale = Locale.getDefault(Locale.Category.FORMAT);
         final Locale locale = Locale.getDefault().equals(formatLocale) ? formatLocale : Locale.getDefault();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/kafka/KafkaAppender.java
Patch:
@@ -14,7 +14,6 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-
 package org.apache.logging.log4j.core.appender.mom.kafka;
 
 import java.io.Serializable;
@@ -175,7 +174,7 @@ public static <B extends Builder<B>> B newBuilder() {
         return new Builder<B>().asBuilder();
     }
 
-	private final Integer retryCount;
+    private final Integer retryCount;
 
     private final KafkaManager manager;
 

File: log4j-layout-template-json-test/src/test/java/org/apache/logging/log4j/layout/template/json/util/InstantFormatterTest.java
Patch:
@@ -16,6 +16,9 @@
  */
 package org.apache.logging.log4j.layout.template.json.util;
 
+import java.util.Locale;
+import java.util.TimeZone;
+
 import org.apache.logging.log4j.core.time.MutableInstant;
 import org.apache.logging.log4j.core.util.datetime.FastDateFormat;
 import org.apache.logging.log4j.core.util.datetime.FixedDateFormat;
@@ -24,9 +27,6 @@
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.CsvSource;
 
-import java.util.Locale;
-import java.util.TimeZone;
-
 class InstantFormatterTest {
 
     @ParameterizedTest

File: log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/JdbcAppenderBenchmark.java
Patch:
@@ -14,7 +14,6 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-
 package org.apache.logging.log4j.perf.jmh;
 
 import java.sql.Connection;

File: log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/JpaAppenderBenchmark.java
Patch:
@@ -14,7 +14,6 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-
 package org.apache.logging.log4j.perf.jmh;
 
 import java.sql.Connection;

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java
Patch:
@@ -117,7 +117,8 @@ public abstract class AbstractLogger implements ExtendedLogger, LocationAwareLog
      * Creates a new logger named after this class (or subclass).
      */
     public AbstractLogger() {
-        this.name = getClass().getName();
+        final String canonicalName = getClass().getCanonicalName();
+        this.name = canonicalName != null ? canonicalName : getClass().getName();
         this.messageFactory = createDefaultMessageFactory();
         this.flowMessageFactory = createDefaultFlowMessageFactory();
         this.logBuilder = new LocalLogBuilder(this);

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/ThreadContextUtilityClass.java
Patch:
@@ -14,10 +14,11 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-package org.apache.logging.log4j;
+package org.apache.logging.log4j.test;
 
 import java.util.Map;
 
+import org.apache.logging.log4j.ThreadContext;
 import org.apache.logging.log4j.util.Timer;
 
 import static org.junit.Assert.assertNotSame;

File: log4j-api-test/src/test/java/org/apache/logging/log4j/ThreadContextInheritanceTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.logging.log4j;
 
 import org.apache.logging.log4j.spi.DefaultThreadContextMap;
+import org.apache.logging.log4j.test.ThreadContextUtilityClass;
 import org.apache.logging.log4j.test.junit.InitializesThreadContext;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;

File: log4j-api-test/src/test/java/org/apache/logging/log4j/ThreadContextTest.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.apache.logging.log4j.test.ThreadContextUtilityClass;
 import org.apache.logging.log4j.test.junit.UsingAnyThreadContext;
 import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;

File: log4j-api/src/main/java/org/apache/logging/log4j/ThreadContext.java
Patch:
@@ -209,7 +209,7 @@ private ThreadContext() {
     /**
      * <em>Consider private, used for testing.</em>
      */
-    static void init() {
+    public static void init() {
         ThreadContextMapFactory.init();
         contextMap = null;
         final PropertiesUtil managerProps = PropertiesUtil.getProperties();

File: log4j-core-test/src/test/java/org/apache/logging/log4j/core/impl/ThreadContextDataInjectorTest.java
Patch:
@@ -20,9 +20,9 @@
 import java.util.concurrent.ExecutionException;
 
 import org.apache.logging.log4j.ThreadContext;
-import org.apache.logging.log4j.ThreadContextUtilityClass;
 import org.apache.logging.log4j.core.ContextDataInjector;
 import org.apache.logging.log4j.spi.ReadOnlyThreadContextMap;
+import org.apache.logging.log4j.test.ThreadContextUtilityClass;
 import org.apache.logging.log4j.util.PropertiesUtil;
 import org.apache.logging.log4j.util.SortedArrayStringMap;
 import org.apache.logging.log4j.util.StringMap;

File: log4j-api-test/src/main/java/org/apache/logging/log4j/test/junit/InitializesThreadContext.java
Patch:
@@ -33,7 +33,7 @@
  * Marks a test class that initializes the {@link ThreadContext} class;
  */
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.TYPE)
+@Target({ ElementType.TYPE, ElementType.METHOD })
 @Documented
 @Inherited
 @ExtendWith(ThreadContextInitializer.class)

File: log4j-api-test/src/test/java/org/apache/logging/log4j/NoopThreadContextTest.java
Patch:
@@ -21,13 +21,13 @@
 import org.junit.jupiter.api.Test;
 import org.junitpioneer.jupiter.SetSystemProperty;
 
-import static org.junit.Assert.assertNull;
+import static org.junit.jupiter.api.Assertions.assertNull;
 
 /**
  * Tests {@link ThreadContext}.
  */
-@SetSystemProperty(key = "disableThreadContext", value = "true")
-@SetSystemProperty(key = "disableThreadContextMap", value = "true")
+@SetSystemProperty(key = "log4j2.disableThreadContext", value = "true")
+@SetSystemProperty(key = "log4j2.disableThreadContextMap", value = "true")
 @InitializesThreadContext
 @UsingThreadContextMap
 public class NoopThreadContextTest {

File: log4j-api-test/src/test/java/org/apache/logging/log4j/ThreadContextInheritanceTest.java
Patch:
@@ -58,9 +58,11 @@ public void testPush() {
     }
 
     @Test
+
+    @SetSystemProperty(key = DefaultThreadContextMap.INHERITABLE_MAP, value = "true")
+    @InitializesThreadContext
     public void testInheritanceSwitchedOn() throws Exception {
         System.setProperty(DefaultThreadContextMap.INHERITABLE_MAP, "true");
-        ThreadContext.init();
         try {
             ThreadContext.clearMap();
             ThreadContext.put("Greeting", "Hello");

File: log4j-api-test/src/test/java/org/apache/logging/log4j/ThreadContextTest.java
Patch:
@@ -31,9 +31,6 @@
 
 @UsingAnyThreadContext
 public class ThreadContextTest {
-    public static void reinitThreadContext() {
-        ThreadContext.init();
-    }
 
     @Test
     public void testPush() {

File: log4j-api-test/src/test/java/org/apache/logging/log4j/EventLoggerTest.java
Patch:
@@ -16,15 +16,15 @@
  */
 package org.apache.logging.log4j;
 
+import java.util.List;
+import java.util.Locale;
+
 import org.apache.logging.log4j.message.StructuredDataMessage;
 import org.apache.logging.log4j.test.TestLogger;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.parallel.ResourceLock;
 
-import java.util.List;
-import java.util.Locale;
-
 import static org.assertj.core.api.Assertions.assertThat;
 
 @ResourceLock("log4j2.TestLogger")

File: log4j-api-test/src/test/java/org/apache/logging/log4j/LevelTest.java
Patch:
@@ -16,15 +16,15 @@
  */
 package org.apache.logging.log4j;
 
+import org.junit.jupiter.api.Test;
+
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.junit.jupiter.api.Assertions.assertThrowsExactly;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-import org.junit.jupiter.api.Test;
-
 public class LevelTest {
 
     @Test

File: log4j-api-test/src/test/java/org/apache/logging/log4j/LogManagerTest.java
Patch:
@@ -16,15 +16,15 @@
  */
 package org.apache.logging.log4j;
 
+import java.io.Closeable;
+import java.io.IOException;
+
 import org.apache.logging.log4j.message.ParameterizedMessageFactory;
 import org.apache.logging.log4j.spi.LoggerContext;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.parallel.ResourceAccessMode;
 import org.junit.jupiter.api.parallel.ResourceLock;
 
-import java.io.Closeable;
-import java.io.IOException;
-
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 

File: log4j-api-test/src/test/java/org/apache/logging/log4j/TraceLoggingTest.java
Patch:
@@ -28,7 +28,9 @@
 import org.apache.logging.log4j.spi.AbstractLogger;
 import org.junit.jupiter.api.Test;
 
-import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.fail;
 
 public class TraceLoggingTest extends AbstractLogger {
     static final StringBuilder CHAR_SEQ = new StringBuilder("CharSeq");

File: log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/JdbcAppenderBenchmark.java
Patch:
@@ -173,7 +173,7 @@ private void createTable(final Connection connection, final String createSQL) th
 
     private String toCreateTableSqlStringH2(final String tableName) {
         return "CREATE TABLE " + tableName + " ( "
-                + "id INTEGER IDENTITY, eventDate DATETIME, literalColumn VARCHAR(255), level NVARCHAR(10), "
+                + "id INTEGER GENERATED ALWAYS AS IDENTITY, eventDate DATETIME, literalColumn VARCHAR(255), level NVARCHAR(10), "
                 + "logger NVARCHAR(255), message VARCHAR(1024), exception NCLOB" + " )";
     }
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/impl/ThreadContextDataInjectorTest.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.concurrent.ExecutionException;
 
 import org.apache.logging.log4j.ThreadContext;
-import org.apache.logging.log4j.ThreadContextTest;
+import org.apache.logging.log4j.ThreadContextUtilityClass;
 import org.apache.logging.log4j.core.ContextDataInjector;
 import org.apache.logging.log4j.spi.ReadOnlyThreadContextMap;
 import org.apache.logging.log4j.util.PropertiesUtil;
@@ -109,7 +109,7 @@ private void testContextDataInjector() {
     private void prepareThreadContext(final boolean isThreadContextMapInheritable) {
         System.setProperty("log4j2.isThreadContextMapInheritable", Boolean.toString(isThreadContextMapInheritable));
         PropertiesUtil.getProperties().reload();
-        ThreadContextTest.reinitThreadContext();
+        ThreadContextUtilityClass.reset();
         ThreadContext.remove("baz");
         ThreadContext.put("foo", "bar");
     }

File: log4j-osgi/src/test/java/org/apache/logging/log4j/osgi/tests/AbstractLoadBundleTest.java
Patch:
@@ -80,7 +80,7 @@ private Bundle get12ApiBundle() throws BundleException {
     }
 
     private Bundle getApiTestsBundle() throws BundleException {
-        return installBundle("org.apache.logging.log4j.api.tests");
+        return installBundle("org.apache.logging.log4j.api-test");
     }
 
     protected abstract FrameworkFactory getFactory();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/AbstractKeyStoreConfiguration.java
Patch:
@@ -75,7 +75,7 @@ protected KeyStore load() throws StoreConfigurationException {
                 final KeyStore ks = KeyStore.getInstance(this.keyStoreType);
                 final char[] password = this.getPasswordAsCharArray();
                 try {
-                    ks.load(fin, password != null ? password : DEFAULT_PASSWORD);
+                    ks.load(fin, password);
                 } finally {
                     if (password != null) {
                         Arrays.fill(password, '\0');

File: log4j-1.2-api/src/main/java/org/apache/log4j/Category.java
Patch:
@@ -426,7 +426,7 @@ public Level getEffectiveLevel() {
     }
 
     /**
-     * Gets the the {@link LoggerRepository} where this <code>Category</code> instance is attached.
+     * Gets the {@link LoggerRepository} where this <code>Category</code> instance is attached.
      *
      * @deprecated Please use {@link #getLoggerRepository()} instead.
      * @since 1.1
@@ -449,7 +449,7 @@ org.apache.logging.log4j.Logger getLogger() {
     }
 
     /**
-     * Gets the the {@link LoggerRepository} where this <code>Category</code> is attached.
+     * Gets the {@link LoggerRepository} where this <code>Category</code> is attached.
      *
      * @since 1.2
      */

File: log4j-1.2-api/src/main/java/org/apache/log4j/helpers/OptionConverter.java
Patch:
@@ -557,7 +557,7 @@ public static int toInt(final String value, final int dEfault) {
      * </p>
      *
      * <p>
-     * Case of <code>value</code> is insignificant for the level level, but is
+     * Case of <code>value</code> is insignificant for the level, but is
      * significant for the class name part, if present.
      * </p>
      * 

File: log4j-1.2-api/src/main/java/org/apache/log4j/spi/AppenderAttachable.java
Patch:
@@ -48,7 +48,7 @@ public interface AppenderAttachable {
 
     /**
      * Returns <code>true</code> if the specified appender is in list of
-     * attached attached, <code>false</code> otherwise.
+     * attached, <code>false</code> otherwise.
      * @param appender The Appender to check.
      * @return true if the Appender is attached.
      *

File: log4j-1.2-api/src/test/java/org/apache/log4j/xml/XLevel.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.log4j.Level;
 
 /**
- * This class introduces a new level level called TRACE. TRACE has lower level than DEBUG.
+ * This class introduces a new level called TRACE. TRACE has lower level than DEBUG.
  */
 public class XLevel extends Level {
     private static final long serialVersionUID = 7288304330257085144L;

File: log4j-api/src/main/java/org/apache/logging/log4j/util/Strings.java
Patch:
@@ -62,7 +62,7 @@ public static String dquote(final String str) {
      * {@code null}, empty, or all characters are {@link Character#isWhitespace(char)}.
      *
      * @param s the String to check, may be {@code null}
-     * @return {@code true} if the String is {@code null}, empty, or or all characters are {@link Character#isWhitespace(char)}
+     * @return {@code true} if the String is {@code null}, empty, or all characters are {@link Character#isWhitespace(char)}
      */
     public static boolean isBlank(final String s) {
         if (s == null || s.isEmpty()) {

File: log4j-api/src/test/java/org/apache/logging/log4j/util/Log4jCharsetsPropertiesTest.java
Patch:
@@ -42,7 +42,7 @@ public void testLoadAll() {
             String value = resourceBundle.getString(key);
             assertTrue(
                     Charset.isSupported(value),
-                    String.format("The Charset %s is is not available and is mapped from %s", value, key));
+                    String.format("The Charset %s is not available and is mapped from %s", value, key));
         }
     }
 }

File: log4j-core-its/src/test/java/org/apache/logging/log4j/core/async/perftest/Histogram.java
Patch:
@@ -120,7 +120,7 @@ public long getCountAt(final int index)
      * Add an observation to the histogram and increment the counter for the interval it matches.
      *
      * @param value for the observation to be added.
-     * @return return true if in the range of intervals and successfully added observation; otherwise false.
+     * @return true if in the range of intervals and successfully added observation; otherwise false.
      */
     public boolean addObservation(final long value)
     {

File: log4j-core-its/src/test/java/org/apache/logging/log4j/core/async/perftest/IdleStrategy.java
Patch:
@@ -21,7 +21,7 @@
  *
  * <h3>Note regarding potential for TTSP(Time To Safe Point) issues</h3>
  *
- * If the caller spins in a 'counted' loop, and the implementation does not include a a safepoint poll this may cause a TTSP
+ * If the caller spins in a 'counted' loop, and the implementation does not include a safepoint poll this may cause a TTSP
  * (Time To SafePoint) problem. If this is the case for your application you can solve it by preventing the idle method from
  * being inlined by using a Hotspot compiler command as a JVM argument e.g:
  * <code>-XX:CompileCommand=dontinline,org.apache.logging.log4j.core.async.perftest.NoOpIdleStrategy::idle</code>

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AppenderSet.java
Patch:
@@ -65,7 +65,7 @@ public AppenderSet build() {
             for (final Node childNode : children) {
                 final String key = childNode.getAttributes().get("name");
                 if (key == null) {
-                    LOGGER.error("The attribute 'name' is missing from from the node {} in AppenderSet {}",
+                    LOGGER.error("The attribute 'name' is missing from the node {} in AppenderSet {}",
                             childNode, children);
                 } else {
                     map.put(key, childNode);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java
Patch:
@@ -422,7 +422,7 @@ public ConcurrentMap<Object, Object> getScriptStaticVariables() {
      * LOG4J2-2629: PurgePolicy implementations can invoke {@link #deleteAppender(String)} after we have looked up
      * an instance of a target appender but before events are appended, which could result in events not being
      * recorded to any appender.
-     * This extension of {@link AppenderControl} allows to to mark usage of an appender, allowing deferral of
+     * This extension of {@link AppenderControl} allows to mark usage of an appender, allowing deferral of
      * {@link Appender#stop()} until events have successfully been recorded.
      * Alternative approaches considered:
      * - More aggressive synchronization: Appenders may do expensive I/O that shouldn't block routing.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/BasicAsyncLoggerContextSelector.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * Returns either this Thread's context or the default {@link AsyncLoggerContext}.
  * Single-application instances should prefer this implementation over the {@link AsyncLoggerContextSelector}
- * due the the reduced overhead avoiding classloader lookups.
+ * due to the reduced overhead avoiding classloader lookups.
  */
 public class BasicAsyncLoggerContextSelector implements ContextSelector {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/DateLookup.java
Patch:
@@ -48,7 +48,7 @@ public String lookup(final String key) {
     }
 
     /**
-     * Looks up the the current date or the date in the LogEvent.
+     * Looks up d the current date or the date in the LogEvent.
      * @param event The LogEvent for which the date is returned. If null, current date is returned.
      * @param key the format to use. If null, the default DateFormat will be used.
      * @return The formatted date, never null.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java
Patch:
@@ -80,7 +80,7 @@ public static ClassLoader getClassLoader(final Class<?> class1, final Class<?> c
      * class ({@code Loader}). Under JDK 1.1, only the class
      * loader that loaded this class ({@code Loader}) is used.</li>
      * <li>Try one last time with
-     * {@code ClassLoader.getSystemResource(resource)}, that is is
+     * {@code ClassLoader.getSystemResource(resource)}, that is
      * using the system class loader in JDK 1.2 and virtual machine's
      * built-in class loader in JDK 1.1.</li>
      * </ol>
@@ -142,7 +142,7 @@ public static URL getResource(final String resource, final ClassLoader defaultLo
      * class ({@code Loader}). Under JDK 1.1, only the class
      * loader that loaded this class ({@code Loader}) is used.</li>
      * <li>Try one last time with
-     * {@code ClassLoader.getSystemResource(resource)}, that is is
+     * {@code ClassLoader.getSystemResource(resource)}, that is
      * using the system class loader in JDK 1.2 and virtual machine's
      * built-in class loader in JDK 1.1.</li>
      * </ol>

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/Source.java
Patch:
@@ -145,7 +145,7 @@ public Source(final URI uri, final long lastModified) {
      * Constructs a new {@code Source} from the specified URL.
      *
      * @param url the URL where the input stream originated
-     * @throws IllegalArgumentException if this URL is not formatted strictly according to to RFC2396 and cannot be
+     * @throws IllegalArgumentException if this URL is not formatted strictly according to RFC2396 and cannot be
      *         converted to a URI.
      */
     public Source(final URL url) {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/MemoryMappedFileAppenderTest.java
Patch:
@@ -35,7 +35,7 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 /**
- * Tests that logged strings appear in the file, that the initial file size is the specified specified region length,
+ * Tests that logged strings appear in the file, that the initial file size is the specified region length,
  * that the file is extended by region length when necessary, and that the file is shrunk to its actual usage when done.
  *
  * @since 2.1

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/ReconfigureAppenderTest.java
Patch:
@@ -46,7 +46,7 @@ public void addAndRemoveAppenderTest()
 		this.createAndAddAppender();
 
 		// let's write something to the logger to ensure the output stream is opened.
-		// We expect this call to create a a new output stream (which is does).
+		// We expect this call to create a new output stream (which is does).
 		// see OutputStreamManager.writeToDestination(...).
 		Logger logger = (Logger)LogManager.getLogger(this.getClass());
 		logger.info("test message 1");

File: log4j-docker/src/main/java/org/apache/logging/log4j/docker/DockerLookup.java
Patch:
@@ -35,7 +35,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 /**
- * Lookups up keys for for a Docker container.
+ * Lookups up keys for a Docker container.
  */
 @Plugin(name = "docker", category = StrLookup.CATEGORY)
 public class DockerLookup extends AbstractLookup {

File: log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java
Patch:
@@ -249,10 +249,10 @@ public static FlumeAppender createAppender(@PluginElement("Agents") final Agent[
         final int delayMillis = Integers.parseInt(maxDelayMillis, DEFAULT_MAX_DELAY);
 
         if (layout == null) {
-            final String enterpriseNumber = Rfc5424Layout.DEFAULT_ENTERPRISE_NUMBER;
+            final int enterpriseNumber = Rfc5424Layout.DEFAULT_ENTERPRISE_NUMBER;
             layout = new Rfc5424Layout.Rfc5424LayoutBuilder()
                     .setFacility(Facility.LOCAL0)
-                    .setEin(enterpriseNumber)
+                    .setEin(String.valueOf(enterpriseNumber))
                     .setIncludeMDC(true)
                     .setMdcId(Rfc5424Layout.DEFAULT_MDCID)
                     .setMdcPrefix(mdcPrefix)

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/SyslogAppender.java
Patch:
@@ -57,7 +57,7 @@ public static class Builder<B extends Builder<B>> extends AbstractBuilder<B>
         private String id;
 
         @PluginBuilderAttribute(value = "enterpriseNumber")
-        private String enterpriseNumber = Rfc5424Layout.DEFAULT_ENTERPRISE_NUMBER;
+        private String enterpriseNumber = String.valueOf(Rfc5424Layout.DEFAULT_ENTERPRISE_NUMBER);
 
         @PluginBuilderAttribute(value = "includeMdc")
         private boolean includeMdc = true;

File: log4j-to-jul/src/main/java/org/apache/logging/log4j/tojul/JULLogger.java
Patch:
@@ -153,7 +153,8 @@ private java.util.logging.Level getEffectiveJULLevel() {
             return current.getLevel();
         }
         // This is a safety fallback that is typically never reached, because usually the root Logger.getLogger("") has a Level.
-        return Logger.getGlobal().getLevel();
+        // Since JDK 8 the LogManager$RootLogger does not have a default level, just a default effective level of INFO.
+        return java.util.logging.Level.INFO;
     }
 
     private boolean isEnabledFor(final Level level, final Marker marker) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java
Patch:
@@ -19,6 +19,7 @@
 import java.io.ObjectStreamException;
 import java.io.Serializable;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -299,7 +300,7 @@ public Map<String, Appender> getAppenders() {
     public Iterator<Filter> getFilters() {
         final Filter filter = privateConfig.loggerConfig.getFilter();
         if (filter == null) {
-            return new ArrayList<Filter>().iterator();
+            return Collections.emptyIterator();
         } else if (filter instanceof CompositeFilter) {
             return ((CompositeFilter) filter).iterator();
         } else {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/arbiters/SystemPropertyArbiter.java
Patch:
@@ -74,11 +74,11 @@ public Builder setPropertyName(final String propertyName) {
 
         /**
          * Sets the Property Value.
-         * @param propertyValue the property name.
+         * @param propertyValue the property value.
          * @return this
          */
         public Builder setPropertyValue(final String propertyValue) {
-            this.propertyName = propertyValue;
+            this.propertyValue = propertyValue;
             return asBuilder();
         }
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/db/jdbc/JdbcH2TestHelper.java
Patch:
@@ -36,7 +36,7 @@ public class JdbcH2TestHelper {
     /**
      * A JDBC connection string for an H2 database in the Java temporary directory.
      */
-    static final String CONNECTION_STRING_TEMP_DIR = "jdbc:h2:" + getH2Path() + ";TRACE_LEVEL_SYSTEM_OUT=0";
+    static final String CONNECTION_STRING_TEMP_DIR = "jdbc:h2:" + getH2Path() + "/test_log4j;TRACE_LEVEL_SYSTEM_OUT=0";
 
     static final String USER_NAME = "sa";
     static final String PASSWORD = "";
@@ -56,7 +56,7 @@ public Connection getConnection() throws SQLException {
     };
 
     /** Directory used in configuration files and connection strings. */
-    static final String H2_TEST_RELATIVE_DIR = "h2/test_log4j";
+    static final String H2_TEST_RELATIVE_DIR = "h2";
 
     static void deleteDir() throws IOException {
         final Path resolve = getH2Path();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java
Patch:
@@ -85,7 +85,7 @@ public LoggerConfig build() {
             LevelAndRefs container = LoggerConfig.getLevelAndRefs(getLevel(), getRefs(), getLevelAndRefs(),
                     getConfig());
             return new AsyncLoggerConfig(name, container.refs,getFilter(), container.level, isAdditivity(),
-                    getProperties(), getConfig(), includeLocation(getIncludeLocation(), getConfig()));
+                    getProperties(), getConfig(), includeLocation(getIncludeLocation()));
         }
     }
 
@@ -319,8 +319,7 @@ public LoggerConfig build() {
                 LevelAndRefs container = LoggerConfig.getLevelAndRefs(getLevel(), getRefs(), getLevelAndRefs(),
                         getConfig());
                 return new AsyncLoggerConfig(LogManager.ROOT_LOGGER_NAME, container.refs, getFilter(), container.level,
-                        isAdditivity(), getProperties(), getConfig(), includeLocation(getIncludeLocation(),
-                        getConfig()));
+                        isAdditivity(), getProperties(), getConfig(), includeLocation(getIncludeLocation()));
             }
         }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java
Patch:
@@ -752,9 +752,7 @@ public static LoggerConfig createLogger(
     }
 
     /**
-     * @deprecated Please use {@link #includeLocation(String, Configuration)}
      */
-    @Deprecated
     protected static boolean includeLocation(final String includeLocationConfigValue) {
         return includeLocation(includeLocationConfigValue, null);
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/arbiters/ClassArbiter.java
Patch:
@@ -41,8 +41,8 @@ public boolean isCondition() {
     }
 
     @PluginBuilderFactory
-    public static SystemPropertyArbiter.Builder newBuilder() {
-        return new SystemPropertyArbiter.Builder();
+    public static ClassArbiter.Builder newBuilder() {
+        return new ClassArbiter.Builder();
     }
 
     public static class Builder implements org.apache.logging.log4j.core.util.Builder<ClassArbiter> {

File: log4j-spring-boot/src/main/java/org/apache/logging/log4j/spring/boot/SpringPropertySource.java
Patch:
@@ -24,14 +24,16 @@
  */
 public class SpringPropertySource extends SpringEnvironmentHolder implements PropertySource {
 
+    private static final int DEFAULT_PRIORITY = -100;
+
     /**
      * System properties take precendence followed by properties in Log4j properties files. Spring properties
      * follow.
      * @return This PropertySource's priority.
      */
     @Override
     public int getPriority() {
-        return -50;
+        return DEFAULT_PRIORITY ;
     }
 
     @Override

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java
Patch:
@@ -25,7 +25,6 @@
 import com.lmax.disruptor.BusySpinWaitStrategy;
 import com.lmax.disruptor.ExceptionHandler;
 import com.lmax.disruptor.SleepingWaitStrategy;
-import com.lmax.disruptor.TimeoutBlockingWaitStrategy;
 import com.lmax.disruptor.WaitStrategy;
 import com.lmax.disruptor.YieldingWaitStrategy;
 import org.apache.logging.log4j.Logger;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncWaitStrategyFactoryConfigGlobalLoggersTest.java
Patch:
@@ -63,7 +63,7 @@ public void testConfigWaitStrategyAndFactory() throws Exception {
 
         AsyncLoggerDisruptor delegate = logger.getAsyncLoggerDisruptor();
 
-        assertEquals(YieldingWaitStrategy.class, delegate.waitStrategy.getClass());
-        assertThat("waitstrategy is YieldingWaitStrategy", delegate.waitStrategy instanceof YieldingWaitStrategy);
+        assertEquals(YieldingWaitStrategy.class, delegate.getWaitStrategy().getClass());
+        assertThat("waitstrategy is YieldingWaitStrategy", delegate.getWaitStrategy() instanceof YieldingWaitStrategy);
     }
 }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncWaitStrategyFactoryIncorrectConfigGlobalLoggersTest.java
Patch:
@@ -60,7 +60,7 @@ public void testIncorrectConfigWaitStrategyFactory() throws Exception {
 
         AsyncLogger logger = (AsyncLogger) context.getRootLogger();
         AsyncLoggerDisruptor delegate = logger.getAsyncLoggerDisruptor();
-        assertEquals(TimeoutBlockingWaitStrategy.class, delegate.waitStrategy.getClass());
-        assertThat("waitstrategy is TimeoutBlockingWaitStrategy", delegate.waitStrategy instanceof TimeoutBlockingWaitStrategy);
+        assertEquals(TimeoutBlockingWaitStrategy.class, delegate.getWaitStrategy().getClass());
+        assertThat("waitstrategy is TimeoutBlockingWaitStrategy", delegate.getWaitStrategy() instanceof TimeoutBlockingWaitStrategy);
     }
 }

File: log4j-api-java9/src/main/java/module-info.java
Patch:
@@ -15,6 +15,8 @@
  * limitations under the license.
  */
 module org.apache.logging.log4j {
+    requires java.base;
+
     exports org.apache.logging.log4j;
     exports org.apache.logging.log4j.message;
     exports org.apache.logging.log4j.simple;

File: log4j-api-java9/src/test/java/org/apache/logging/log4j/util/java9/ProcessIdUtilTest.java
Patch:
@@ -16,11 +16,11 @@
  */
 package org.apache.logging.log4j.util.java9;
 
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
+
 import org.apache.logging.log4j.util.ProcessIdUtil;
 import org.junit.jupiter.api.Test;
 
-import static org.junit.jupiter.api.Assertions.assertNotEquals;
-
 public class ProcessIdUtilTest {
 
     @Test

File: log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.logging.log4j.message.Message;
 import org.apache.logging.log4j.message.MessageFactory;
 import org.apache.logging.log4j.spi.ExtendedLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 /**
  * Log4j API implementation of the JUL {@link Logger} class. <strong>Note that this implementation does
@@ -91,7 +92,8 @@ public String getName() {
 
     @Override
     public void setLevel(final Level newLevel) throws SecurityException {
-        throw new UnsupportedOperationException("Cannot set level through log4j-api");
+        StatusLogger.getLogger().error("Cannot set JUL log level through log4j-api: " +
+                "ignoring call to Logger.setLevel({})", newLevel);
     }
 
     /**

File: log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java
Patch:
@@ -93,7 +93,7 @@ public String getName() {
     @Override
     public void setLevel(final Level newLevel) throws SecurityException {
         StatusLogger.getLogger().error("Cannot set JUL log level through log4j-api: " +
-                "ignoring call to Logger.setLevel(" + newLevel + ")");
+                "ignoring call to Logger.setLevel({})", newLevel);
     }
 
     /**

File: log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.logging.log4j.message.Message;
 import org.apache.logging.log4j.message.MessageFactory;
 import org.apache.logging.log4j.spi.ExtendedLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 /**
  * Log4j API implementation of the JUL {@link Logger} class. <strong>Note that this implementation does
@@ -91,7 +92,8 @@ public String getName() {
 
     @Override
     public void setLevel(final Level newLevel) throws SecurityException {
-        throw new UnsupportedOperationException("Cannot set level through log4j-api");
+        StatusLogger.getLogger().error("Cannot set JUL log level through log4j-api: " +
+                "ignoring call to Logger.setLevel(" + newLevel + ")");
     }
 
     /**

File: log4j-api/src/main/java/org/apache/logging/log4j/LogBuilder.java
Patch:
@@ -25,8 +25,8 @@
  * by calling one of the Logger methods that return a LogBuilder.
  */
 public interface LogBuilder {
-
-    public static final LogBuilder NOOP = new LogBuilder() {};
+    /** NOOP Logbuilder */
+    LogBuilder NOOP = new LogBuilder() { };
 
     /**
      * Includes a Marker in the log event. Interface default method does nothing.

File: log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java
Patch:
@@ -94,8 +94,8 @@ public class LogManager {
                         try {
                             factories.put(provider.getPriority(), factoryClass.newInstance());
                         } catch (final Exception e) {
-                            LOGGER.error("Unable to create class {} specified in provider URL {}", factoryClass.getName(), provider
-                                    .getUrl(), e);
+                            LOGGER.error("Unable to create class {} specified in provider URL {}",
+                                    factoryClass.getName(), provider.getUrl(), e);
                         }
                     }
                 }
@@ -351,7 +351,7 @@ protected static LoggerContext getContext(final String fqcn, final ClassLoader l
      * @return a LoggerContext.
      */
     protected static LoggerContext getContext(final String fqcn, final ClassLoader loader,
-                                              final boolean currentContext, final URI configLocation, final String name) {
+                                          final boolean currentContext, final URI configLocation, final String name) {
         try {
             return factory.getContext(fqcn, loader, null, currentContext, configLocation, name);
         } catch (final IllegalStateException ex) {

File: log4j-1.2-api/src/main/java/org/apache/log4j/AppenderSkeleton.java
Patch:
@@ -107,7 +107,7 @@ public boolean isAsSevereAsThreshold(final Priority priority) {
     }
 
     @Override
-    public void doAppend(final LoggingEvent event) {
+    public synchronized void doAppend(final LoggingEvent event) {
         // Threshold checks and filtering is performed by the AppenderWrapper.
         append(event);
     }

File: log4j-1.2-api/src/main/java/org/apache/log4j/builders/layout/PatternLayoutBuilder.java
Patch:
@@ -87,20 +87,20 @@ Layout createLayout(String pattern, final Log4j1Configuration config) {
         return LayoutWrapper.adapt(PatternLayout.newBuilder()
                 .withPattern(pattern
                         // Log4j 2 and Log4j 1 level names differ for custom levels
-                        .replaceAll("%([-\\.\\d]*)p", "%$1v1Level")
+                        .replaceAll("%([-\\.\\d]*)p(?!\\w)", "%$1v1Level")
                         // Log4j 2's %x (NDC) is not compatible with Log4j 1's
                         // %x
                         // Log4j 1: "foo bar baz"
                         // Log4j 2: "[foo, bar, baz]"
                         // Use %ndc to get the Log4j 1 format
-                        .replaceAll("%([-\\.\\d]*)x", "%$1ndc")
+                        .replaceAll("%([-\\.\\d]*)x(?!\\w)", "%$1ndc")
 
                         // Log4j 2's %X (MDC) is not compatible with Log4j 1's
                         // %X
                         // Log4j 1: "{{foo,bar}{hoo,boo}}"
                         // Log4j 2: "{foo=bar,hoo=boo}"
                         // Use %properties to get the Log4j 1 format
-                        .replaceAll("%([-\\.\\d]*)X", "%$1properties"))
+                        .replaceAll("%([-\\.\\d]*)X(?!\\w)", "%$1properties"))
                 .withConfiguration(config)
                 .build());
     }

File: log4j-1.2-api/src/main/java/org/apache/log4j/config/Log4j1ConfigurationParser.java
Patch:
@@ -298,20 +298,20 @@ private void buildAppenderLayout(final String name, final AppenderComponentBuild
                 if (pattern != null) {
                     pattern = pattern
                             // Log4j 2 and Log4j 1 level names differ for custom levels
-                            .replaceAll("%([-\\.\\d]*)p", "%$1v1Level")
+                            .replaceAll("%([-\\.\\d]*)p(?!\\w)", "%$1v1Level")
                             // Log4j 2's %x (NDC) is not compatible with Log4j 1's
                             // %x
                             // Log4j 1: "foo bar baz"
                             // Log4j 2: "[foo, bar, baz]"
                             // Use %ndc to get the Log4j 1 format
-                            .replaceAll("%([-\\.\\d]*)x", "%$1ndc")
+                            .replaceAll("%([-\\.\\d]*)x(?!\\w)", "%$1ndc")
 
                             // Log4j 2's %X (MDC) is not compatible with Log4j 1's
                             // %X
                             // Log4j 1: "{{foo,bar}{hoo,boo}}"
                             // Log4j 2: "{foo=bar,hoo=boo}"
                             // Use %properties to get the Log4j 1 format
-                            .replaceAll("%([-\\.\\d]*)X", "%$1properties");
+                            .replaceAll("%([-\\.\\d]*)X(?!\\w)", "%$1properties");
                 } else {
                     pattern = "%m%n";
                 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/AbstractKeyStoreConfiguration.java
Patch:
@@ -33,6 +33,8 @@
  * Configuration of the KeyStore
  */
 public class AbstractKeyStoreConfiguration extends StoreConfiguration<KeyStore> {
+    static final char[] DEFAULT_PASSWORD = "changeit".toCharArray();
+
     private final KeyStore keyStore;
     private final String keyStoreType;
 
@@ -73,7 +75,7 @@ protected KeyStore load() throws StoreConfigurationException {
                 final KeyStore ks = KeyStore.getInstance(this.keyStoreType);
                 final char[] password = this.getPasswordAsCharArray();
                 try {
-                    ks.load(fin, password);
+                    ks.load(fin, password != null ? password : DEFAULT_PASSWORD);
                 } finally {
                     if (password != null) {
                         Arrays.fill(password, '\0');

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/KeyStoreConfiguration.java
Patch:
@@ -169,7 +169,7 @@ public KeyManagerFactory initKeyManagerFactory() throws NoSuchAlgorithmException
         final KeyManagerFactory kmFactory = KeyManagerFactory.getInstance(this.keyManagerFactoryAlgorithm);
         final char[] password = this.getPasswordAsCharArray();
         try {
-            kmFactory.init(this.getKeyStore(), password);
+            kmFactory.init(this.getKeyStore(), password != null ? password : DEFAULT_PASSWORD);
         } finally {
             if (password != null) {
                 Arrays.fill(password, '\0');

File: log4j-1.2-api/src/main/java/org/apache/log4j/spi/ThrowableInformation.java
Patch:
@@ -53,7 +53,7 @@ public class ThrowableInformation implements Serializable {
      * @param r String representation of throwable.
      */
     public ThrowableInformation(final String[] r) {
-        this.rep = rep != null ? r.clone() : null;
+        this.rep = r != null ? r.clone() : null;
     }
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/AbstractWatcher.java
Patch:
@@ -39,7 +39,7 @@ public AbstractWatcher(final Configuration configuration, final Reconfigurable r
         this.reconfigurable = reconfigurable;
         this.configurationListeners = configurationListeners;
         this.threadFactory = configurationListeners != null ?
-            Log4jThreadFactory.createDaemonThreadFactory("ConfiguratonFileWatcher") : null;
+            Log4jThreadFactory.createDaemonThreadFactory("ConfigurationFileWatcher") : null;
     }
 
     @Override

File: log4j-jpa/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/JpaH2AppenderTest.java
Patch:
@@ -39,13 +39,13 @@ protected Connection setUpConnection() throws SQLException {
 
         try (Statement statement = connection.createStatement()) {
             statement.executeUpdate("CREATE TABLE jpaBaseLogEntry ( "
-                    + "id INTEGER IDENTITY, eventDate DATETIME, instant NVARCHAR(64), level NVARCHAR(10), "
+                    + "id INTEGER GENERATED ALWAYS AS IDENTITY, eventDate DATETIME, instant NVARCHAR(64), level NVARCHAR(10), "
                     + "logger NVARCHAR(255), message NVARCHAR(1024), exception NVARCHAR(1048576) )");
         }
 
         try (Statement statement = connection.createStatement()) {
             statement.executeUpdate("CREATE TABLE jpaBasicLogEntry ( "
-                    + "id INTEGER IDENTITY, timemillis BIGINT, instant NVARCHAR(64), nanoTime BIGINT, "
+                    + "id INTEGER GENERATED ALWAYS AS IDENTITY, timemillis BIGINT, instant NVARCHAR(64), nanoTime BIGINT, "
                     + "level NVARCHAR(10), loggerName NVARCHAR(255), message NVARCHAR(1024), "
                     + "thrown NVARCHAR(1048576), contextMapJson NVARCHAR(1048576), loggerFQCN NVARCHAR(1024), "
                     + "contextStack NVARCHAR(1048576), marker NVARCHAR(255), source NVARCHAR(2048),"

File: log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/DailyRollingFileAppenderBuilder.java
Patch:
@@ -150,7 +150,7 @@ private <T extends Log4j1Configuration> Appender createAppender(final String nam
         }
         final org.apache.logging.log4j.core.Filter fileFilter = buildFilters(level, filter);
         if (fileName == null) {
-            LOGGER.warn("Unable to create File Appender, no file name provided");
+            LOGGER.error("Unable to create DailyRollingFileAppender, no file name provided");
             return null;
         }
         final String filePattern = fileName + "%d{" + datePattern + "}";

File: log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/FileAppenderBuilder.java
Patch:
@@ -136,7 +136,7 @@ private Appender createAppender(final String name, final Log4j1Configuration con
         }
         final org.apache.logging.log4j.core.Filter fileFilter = buildFilters(level, filter);
         if (fileName == null) {
-            LOGGER.warn("Unable to create File Appender, no file name provided");
+            LOGGER.error("Unable to create FileAppender, no file name provided");
             return null;
         }
         return new AppenderWrapper(FileAppender.newBuilder()

File: log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/RollingFileAppenderBuilder.java
Patch:
@@ -152,7 +152,7 @@ private Appender createAppender(final String name, final Log4j1Configuration con
         }
         final org.apache.logging.log4j.core.Filter fileFilter = buildFilters(level, filter);
         if (fileName == null) {
-            LOGGER.warn("Unable to create File Appender, no file name provided");
+            LOGGER.error("Unable to create RollingFileAppender, no file name provided");
             return null;
         }
         final String filePattern = fileName + ".%i";

File: log4j-1.2-api/src/main/java/org/apache/log4j/config/PropertiesConfiguration.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.log4j.bridge.AppenderAdapter;
 import org.apache.log4j.bridge.AppenderWrapper;
 import org.apache.log4j.bridge.FilterAdapter;
+import org.apache.log4j.builders.BuilderManager;
 import org.apache.log4j.helpers.OptionConverter;
 import org.apache.log4j.spi.ErrorHandler;
 import org.apache.log4j.spi.Filter;
@@ -498,7 +499,7 @@ public Layout parseLayout(final String layoutPrefix, final String appenderName,
         if (layoutClass == null) {
             return null;
         }
-        Layout layout = manager.parse(layoutClass, layoutPrefix, props, this);
+        Layout layout = manager.parse(layoutClass, layoutPrefix, props, this, BuilderManager.INVALID_LAYOUT);
         if (layout == null) {
             layout = buildLayout(layoutPrefix, layoutClass, appenderName, props);
         }
@@ -574,7 +575,7 @@ public Filter parseAppenderFilters(final Properties props, final String filterPr
             final String clazz = props.getProperty(entry.getKey());
             Filter filter = null;
             if (clazz != null) {
-                filter = manager.parse(clazz, entry.getKey(), props, this);
+                filter = manager.parse(clazz, entry.getKey(), props, this, BuilderManager.INVALID_FILTER);
                 if (filter == null) {
                     LOGGER.debug("Filter key: [{}] class: [{}] props: {}", entry.getKey(), clazz, entry.getValue());
                     filter = buildFilter(clazz, appenderName, entry.getValue());

File: log4j-jpa/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/JpaH2AppenderTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.sql.Statement;
 
 import org.apache.logging.log4j.categories.Appenders;
-import org.apache.logging.log4j.util.Strings;
 import org.junit.experimental.categories.Category;
 
 @Category(Appenders.Jpa.class)
@@ -41,7 +40,7 @@ protected Connection setUpConnection() throws SQLException {
         try (Statement statement = connection.createStatement()) {
             statement.executeUpdate("CREATE TABLE jpaBaseLogEntry ( "
                     + "id INTEGER IDENTITY, eventDate DATETIME, instant NVARCHAR(64), level NVARCHAR(10), "
-                    + "logger NVARCHAR(255), message NVARCHAR(1024), exception NVARCHAR(1048576)" + " )");
+                    + "logger NVARCHAR(255), message NVARCHAR(1024), exception NVARCHAR(1048576) )");
         }
 
         try (Statement statement = connection.createStatement()) {
@@ -50,7 +49,7 @@ protected Connection setUpConnection() throws SQLException {
                     + "level NVARCHAR(10), loggerName NVARCHAR(255), message NVARCHAR(1024), "
                     + "thrown NVARCHAR(1048576), contextMapJson NVARCHAR(1048576), loggerFQCN NVARCHAR(1024), "
                     + "contextStack NVARCHAR(1048576), marker NVARCHAR(255), source NVARCHAR(2048),"
-                    + "threadId BIGINT, threadName NVARCHAR(255), threadPriority INTEGER" + " )");
+                    + "threadId BIGINT, threadName NVARCHAR(255), threadPriority INTEGER )");
         }
 
         return connection;

File: log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java
Patch:
@@ -122,8 +122,8 @@ public class LogManager {
                         + "Please add log4j-core to the classpath. Using SimpleLogger to log to the console...");
                 factory = SimpleLoggerContextFactory.INSTANCE;
             }
-            LogManagerStatus.setInitialized(true);
         }
+        LogManagerStatus.setInitialized(true);
     }
 
     /**

File: log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/DailyRollingFileAppenderBuilder.java
Patch:
@@ -85,7 +85,7 @@ public Appender parseAppender(final Element appenderElement, final XmlConfigurat
                     layout.set(config.parseLayout(currentElement));
                     break;
                 case FILTER_TAG:
-                    filter.set(config.parseFilters(currentElement));
+                    config.addFilter(filter, currentElement);
                     break;
                 case PARAM_TAG:
                     switch (getNameAttributeKey(currentElement)) {

File: log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/FileAppenderBuilder.java
Patch:
@@ -76,7 +76,7 @@ public Appender parseAppender(final Element appenderElement, final XmlConfigurat
                     layout.set(config.parseLayout(currentElement));
                     break;
                 case FILTER_TAG:
-                    filter.set(config.parseFilters(currentElement));
+                    config.addFilter(filter, currentElement);
                     break;
                 case PARAM_TAG:
                     switch (getNameAttributeKey(currentElement)) {

File: log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/RewriteAppenderBuilder.java
Patch:
@@ -86,7 +86,7 @@ public Appender parseAppender(final Element appenderElement, final XmlConfigurat
                     }
                     break;
                 case FILTER_TAG:
-                    filter.set(config.parseFilters(currentElement));
+                    config.addFilter(filter, currentElement);
                     break;
                 case PARAM_TAG:
                     if (getNameAttributeKey(currentElement).equalsIgnoreCase(THRESHOLD_PARAM)) {

File: log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/RollingFileAppenderBuilder.java
Patch:
@@ -85,7 +85,7 @@ public Appender parseAppender(final Element appenderElement, final XmlConfigurat
                     layout.set(config.parseLayout(currentElement));
                     break;
                 case FILTER_TAG:
-                    filter.set(config.parseFilters(currentElement));
+                    config.addFilter(filter, currentElement);
                     break;
                 case PARAM_TAG:
                     switch (getNameAttributeKey(currentElement)) {

File: log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/SyslogAppenderBuilder.java
Patch:
@@ -84,7 +84,7 @@ public Appender parseAppender(final Element appenderElement, final XmlConfigurat
                     layout.set(config.parseLayout(currentElement));
                     break;
                 case FILTER_TAG:
-                    filter.set(config.parseFilters(currentElement));
+                    config.addFilter(filter, currentElement);
                     break;
                 case PARAM_TAG:
                     switch (getNameAttributeKey(currentElement)) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/CompositeFilter.java
Patch:
@@ -62,9 +62,9 @@ public CompositeFilter addFilter(final Filter filter) {
         if (filter instanceof CompositeFilter) {
             final int size = this.filters.length + ((CompositeFilter) filter).size();
             final Filter[] copy = Arrays.copyOf(this.filters, size);
-            final int index = this.filters.length;
+            int index = this.filters.length;
             for (final Filter currentFilter : ((CompositeFilter) filter).filters) {
-                copy[index] = currentFilter;
+                copy[index++] = currentFilter;
             }
             return new CompositeFilter(copy);
         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractAppender.java
Patch:
@@ -76,14 +76,14 @@ public String getName() {
 
         public Layout<? extends Serializable> getOrCreateLayout() {
             if (layout == null) {
-                return PatternLayout.createDefaultLayout();
+                return PatternLayout.createDefaultLayout(configuration);
             }
             return layout;
         }
 
         public Layout<? extends Serializable> getOrCreateLayout(final Charset charset) {
             if (layout == null) {
-                return PatternLayout.newBuilder().withCharset(charset).build();
+                return PatternLayout.newBuilder().withCharset(charset).withConfiguration(configuration).build();
             }
             return layout;
         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractLayout.java
Patch:
@@ -129,7 +129,7 @@ public AbstractLayout(final byte[] header, final byte[] footer) {
      * Constructs a layout with an optional header and footer.
      *
      * @param configuration
-     *            The configuration
+     *            The configuration. May be null.
      * @param header
      *            The header to include when the stream is opened. May be null.
      * @param footer

File: log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/util/JsonWriter.java
Patch:
@@ -854,7 +854,7 @@ public void close() {
 
     private void trimStringBuilder(final StringBuilder stringBuilder, final int length) {
         final int trimLength = Math.max(maxStringLength, length);
-        if (stringBuilder.length() > trimLength) {
+        if (stringBuilder.capacity() > trimLength) {
             stringBuilder.setLength(trimLength);
             stringBuilder.trimToSize();
         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java
Patch:
@@ -141,7 +141,8 @@ public DefaultRolloverStrategy build() {
                     }
                 }
             }
-            final int compressionLevel = Integers.parseInt(compressionLevelStr.trim(), Deflater.DEFAULT_COMPRESSION);
+            final String trimmedCompressionLevelStr = compressionLevelStr != null ? compressionLevelStr.trim() : compressionLevelStr;
+            final int compressionLevel = Integers.parseInt(trimmedCompressionLevelStr, Deflater.DEFAULT_COMPRESSION);
             // The config object can be null when this object is built programmatically.
             final StrSubstitutor nonNullStrSubstitutor = config != null ? config.getStrSubstitutor() : new StrSubstitutor();
 			return new DefaultRolloverStrategy(minIndex, maxIndex, useMax, compressionLevel, nonNullStrSubstitutor,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java
Patch:
@@ -126,7 +126,7 @@ public DefaultRolloverStrategy build() {
                 useMax = fileIndex == null ? true : fileIndex.equalsIgnoreCase("max");
                 minIndex = MIN_WINDOW_SIZE;
                 if (min != null) {
-                    minIndex = Integer.parseInt(min);
+                    minIndex = Integer.parseInt(min.trim());
                     if (minIndex < 1) {
                         LOGGER.error("Minimum window size too small. Limited to " + MIN_WINDOW_SIZE);
                         minIndex = MIN_WINDOW_SIZE;
@@ -141,7 +141,7 @@ public DefaultRolloverStrategy build() {
                     }
                 }
             }
-            final int compressionLevel = Integers.parseInt(compressionLevelStr, Deflater.DEFAULT_COMPRESSION);
+            final int compressionLevel = Integers.parseInt(compressionLevelStr.trim(), Deflater.DEFAULT_COMPRESSION);
             // The config object can be null when this object is built programmatically.
             final StrSubstitutor nonNullStrSubstitutor = config != null ? config.getStrSubstitutor() : new StrSubstitutor();
 			return new DefaultRolloverStrategy(minIndex, maxIndex, useMax, compressionLevel, nonNullStrSubstitutor,

File: log4j-api/src/main/java/org/apache/logging/log4j/util/Strings.java
Patch:
@@ -201,7 +201,7 @@ public static String join(final Iterator<?> iterator, final char separator) {
     }
 
     public static String[] splitList(String string) {
-        return string.split(COMMA_DELIMITED_RE);
+        return string != null ? string.split(COMMA_DELIMITED_RE) : new String[0];
     }
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/BasicAuthorizationProvider.java
Patch:
@@ -17,6 +17,8 @@
 package org.apache.logging.log4j.core.util;
 
 import java.net.URLConnection;
+import java.util.Properties;
+
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.status.StatusLogger;
 import org.apache.logging.log4j.util.Base64Util;
@@ -27,7 +29,7 @@
  * Provides the Basic Authorization header to a request.
  */
 public class BasicAuthorizationProvider implements AuthorizationProvider {
-    private static final String[] PREFIXES = {"log4j2.config.", "logging.auth."};
+    private static final String[] PREFIXES = {"log4j2.config.", "log4j2.Configuration.", "logging.auth."};
     private static final String AUTH_USER_NAME = "username";
     private static final String AUTH_PASSWORD = "password";
     private static final String AUTH_PASSWORD_DECRYPTOR = "passwordDecryptor";

File: log4j-core/src/test/java/org/apache/logging/log4j/core/util/WatchHttpTest.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.logging.log4j.core.config.DefaultConfiguration;
 import org.apache.logging.log4j.core.config.HttpWatcher;
 import org.apache.logging.log4j.core.config.Reconfigurable;
+import org.apache.logging.log4j.core.net.UrlConnectionFactory;
 import org.apache.logging.log4j.core.net.ssl.TestConstants;
 import org.apache.logging.log4j.core.util.datetime.FastDateFormat;
 import org.apache.logging.log4j.util.PropertiesUtil;
@@ -66,6 +67,7 @@ public class WatchHttpTest {
 
     @BeforeClass
     public static void beforeClass() {
+        System.setProperty(UrlConnectionFactory.ALLOWED_PROTOCOLS, "http,https");
         try {
             formatter = FastDateFormat.getInstance("EEE, dd MMM yyyy HH:mm:ss", TimeZone.getTimeZone("UTC"));
         } catch (Exception ex) {

File: log4j-mongodb3/src/main/java/org/apache/logging/log4j/mongodb3/MongoDbDocumentObject.java
Patch:
@@ -37,12 +37,12 @@ public MongoDbDocumentObject() {
 
     @Override
     public void set(final String field, final NoSqlObject<Document> value) {
-        this.document.append(field, value.unwrap());
+        this.document.append(field, value != null ? value.unwrap() : null);
     }
 
     @Override
     public void set(final String field, final NoSqlObject<Document>[] values) {
-        this.document.append(field, Arrays.asList(values));
+        this.document.append(field, values != null ? Arrays.asList(values) : null);
     }
 
     @Override
@@ -52,7 +52,7 @@ public void set(final String field, final Object value) {
 
     @Override
     public void set(final String field, final Object[] values) {
-        this.document.append(field, Arrays.asList(values));
+        this.document.append(field, values != null ? Arrays.asList(values) : null);
     }
 
     @Override

File: log4j-mongodb4/src/main/java/org/apache/logging/log4j/mongodb4/MongoDb4DocumentObject.java
Patch:
@@ -37,12 +37,12 @@ public MongoDb4DocumentObject() {
 
     @Override
     public void set(final String field, final NoSqlObject<Document> value) {
-        this.document.append(field, value.unwrap());
+        this.document.append(field, value != null ? value.unwrap() : null);
     }
 
     @Override
     public void set(final String field, final NoSqlObject<Document>[] values) {
-        this.document.append(field, Arrays.asList(values));
+        this.document.append(field, values != null ? Arrays.asList(values) : null);
     }
 
     @Override
@@ -52,7 +52,7 @@ public void set(final String field, final Object value) {
 
     @Override
     public void set(final String field, final Object[] values) {
-        this.document.append(field, Arrays.asList(values));
+        this.document.append(field, values != null ? Arrays.asList(values) : null);
     }
 
     @Override

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/HttpURLConnectionManager.java
Patch:
@@ -92,7 +92,7 @@ public void send(final Layout<?> layout, final LogEvent event) throws IOExceptio
         for (final Property header : headers) {
             urlConnection.setRequestProperty(
                 header.getName(),
-                header.isValueNeedsLookup() ? getConfiguration().getStrSubstitutor().replace(event, header.getValue()) : header.getValue());
+                header.evaluate(getConfiguration().getStrSubstitutor()));
         }
         if (sslConfiguration != null) {
             ((HttpsURLConnection)urlConnection).setSSLSocketFactory(sslConfiguration.getSslSocketFactory());

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java
Patch:
@@ -496,9 +496,7 @@ private void onPropertiesPresent(final RingBufferLogEvent event, final List<Prop
             if (contextData.getValue(prop.getName()) != null) {
                 continue; // contextMap overrides config properties
             }
-            final String value = prop.isValueNeedsLookup() //
-                    ? privateConfig.config.getStrSubstitutor().replace(event, prop.getValue()) //
-                    : prop.getValue();
+            final String value = prop.evaluate(privateConfig.config.getStrSubstitutor());
             contextData.putValue(prop.getName(), value);
         }
         event.setContextData(contextData);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/PluginValue.java
Patch:
@@ -37,4 +37,7 @@
 public @interface PluginValue {
 
     String value();
+
+    /** If false, standard configuration value substitution is not done on the referenced value. */
+    boolean substitute() default true;
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/visitors/PluginValueVisitor.java
Patch:
@@ -49,7 +49,9 @@ public Object visit(final Configuration configuration, final Node node, final Lo
         } else {
             rawValue = removeAttributeValue(node.getAttributes(), name);
         }
-        final String value = this.substitutor.replace(event, rawValue);
+        final String value = this.annotation.substitute()
+                ? this.substitutor.replace(event, rawValue)
+                : rawValue;
         StringBuilders.appendKeyDqValue(log, name, value);
         return value;
     }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/action/ScriptConditionTest.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.logging.log4j.core.config.DefaultConfiguration;
 import org.apache.logging.log4j.core.script.Script;
 import org.apache.logging.log4j.core.util.Constants;
-import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junitpioneer.jupiter.SetSystemProperty;
@@ -41,13 +40,13 @@ public class ScriptConditionTest {
 
     @Test
     public void testConstructorDisallowsNullScript() {
-        assertThrows(NullPointerException.class, () -> new ScriptCondition(null, new DefaultConfiguration()));
+        assertNull(ScriptCondition.createCondition(null, new DefaultConfiguration()));
     }
 
     @Test
     public void testConstructorDisallowsNullConfig() {
         assertThrows(NullPointerException.class,
-                () -> new ScriptCondition(new Script("test", "js", "print('hi')"), null));
+                () -> ScriptCondition.createCondition(new Script("test", "js", "print('hi')"), null));
     }
 
     @Test

File: log4j-1.2-api/src/main/java/org/apache/log4j/config/PropertiesConfiguration.java
Patch:
@@ -594,7 +594,7 @@ private static <T> T newInstanceOf(final String className, final String type) {
         try {
             return LoaderUtil.newInstanceOf(className);
         } catch (ReflectiveOperationException ex) {
-            LOGGER.error("Unable to create {} {} due to {}:{}", type, className, ex.getClass().getSimpleName(), ex.getMessage());
+            LOGGER.error("Unable to create {} {} due to {}:{}", type, className, ex.getClass().getSimpleName(), ex.getMessage(), ex);
             return null;
         }
     }

File: log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/ConsoleAppenderBuilder.java
Patch:
@@ -124,7 +124,7 @@ public Appender parseAppender(final Element appenderElement, final XmlConfigurat
                             if (value == null) {
                                 LOGGER.warn("No value supplied for ImmediateFlush parameter. Using default of {}", true);
                             } else if (!Boolean.getBoolean(name)) {
-                                LOGGER.warn("The value {} for ImmediateFlush parameter is not supported.", false);
+                                LOGGER.warn("The value {} for ImmediateFlush parameter is not supported.", value);
                             }
                             break;
                         }

File: log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/ConsoleAppenderBuilder.java
Patch:
@@ -153,7 +153,7 @@ public Appender parseAppender(final String name, final String appenderPrefix, fi
         Filter filter = configuration.parseAppenderFilters(props, filterPrefix, name);
         String level = getProperty(THRESHOLD_PARAM);
         String target = getProperty(TARGET_PARAM);
-        boolean follow = getBooleanProperty(FOLLOW_PARAM, false);
+        boolean follow = getBooleanProperty(FOLLOW_PARAM);
         return createAppender(name, layout, filter, level, target, follow, configuration);
     }
 

File: log4j-1.2-api/src/main/java/org/apache/log4j/builders/layout/HtmlLayoutBuilder.java
Patch:
@@ -70,7 +70,7 @@ public Layout parseLayout(Element layoutElement, XmlConfiguration config) {
     @Override
     public Layout parseLayout(PropertiesConfiguration config) {
         String title = getProperty(TITLE_PARAM, DEFAULT_TITLE);
-        boolean locationInfo = getBooleanProperty(LOCATION_INFO_PARAM, false);
+        boolean locationInfo = getBooleanProperty(LOCATION_INFO_PARAM);
         return createLayout(title, locationInfo);
     }
 

File: log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/ConsoleAppenderBuilder.java
Patch:
@@ -72,7 +72,7 @@ public Appender parseAppender(final Element appenderElement, final XmlConfigurat
         AtomicReference<Layout> layout = new AtomicReference<>();
         AtomicReference<List<Filter>> filters = new AtomicReference<>(new ArrayList<>());
         AtomicReference<String> level = new AtomicReference<>();
-        AtomicBoolean follow = new AtomicBoolean(false);
+        AtomicBoolean follow = new AtomicBoolean();
         forEachElement(appenderElement.getChildNodes(), currentElement -> {
             switch (currentElement.getTagName()) {
                 case LAYOUT_TAG:

File: log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/DailyRollingFileAppenderBuilder.java
Patch:
@@ -76,7 +76,7 @@ public Appender parseAppender(final Element appenderElement, final XmlConfigurat
         AtomicReference<String> level = new AtomicReference<>();
         AtomicBoolean immediateFlush = new AtomicBoolean(true);
         AtomicBoolean append = new AtomicBoolean(true);
-        AtomicBoolean bufferedIo = new AtomicBoolean(false);
+        AtomicBoolean bufferedIo = new AtomicBoolean();
         AtomicInteger bufferSize = new AtomicInteger(8192);
         AtomicReference<String> datePattern = new AtomicReference<String>(DEFAULT_DATE_PATTERN);
         forEachElement(appenderElement.getChildNodes(), currentElement -> {

File: log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/FileAppenderBuilder.java
Patch:
@@ -68,7 +68,7 @@ public Appender parseAppender(Element appenderElement, XmlConfiguration config)
         AtomicReference<String> level = new AtomicReference<>();
         AtomicBoolean immediateFlush = new AtomicBoolean(true);
         AtomicBoolean append = new AtomicBoolean(true);
-        AtomicBoolean bufferedIo = new AtomicBoolean(false);
+        AtomicBoolean bufferedIo = new AtomicBoolean();
         AtomicInteger bufferSize = new AtomicInteger(8192);
         forEachElement(appenderElement.getChildNodes(), currentElement -> {
             switch (currentElement.getTagName()) {

File: log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/RollingFileAppenderBuilder.java
Patch:
@@ -74,7 +74,7 @@ public Appender parseAppender(Element appenderElement, XmlConfiguration config)
         AtomicReference<String> fileName = new AtomicReference<>();
         AtomicBoolean immediateFlush = new AtomicBoolean(true);
         AtomicBoolean append = new AtomicBoolean(true);
-        AtomicBoolean bufferedIo = new AtomicBoolean(false);
+        AtomicBoolean bufferedIo = new AtomicBoolean();
         AtomicInteger bufferSize = new AtomicInteger(8192);
         AtomicReference<String> maxSize = new AtomicReference<>(DEFAULT_MAX_SIZE);
         AtomicReference<String> maxBackups = new AtomicReference<>(DEFAULT_MAX_BACKUPS);

File: log4j-1.2-api/src/main/java/org/apache/log4j/builders/layout/HtmlLayoutBuilder.java
Patch:
@@ -54,7 +54,7 @@ public HtmlLayoutBuilder(String prefix, Properties props) {
     @Override
     public Layout parseLayout(Element layoutElement, XmlConfiguration config) {
         final AtomicReference<String> title = new AtomicReference<>("Log4J Log Messages");
-        final AtomicBoolean locationInfo = new AtomicBoolean(false);
+        final AtomicBoolean locationInfo = new AtomicBoolean();
         forEachElement(layoutElement.getElementsByTagName("param"), currentElement -> {
             if (currentElement.getTagName().equals(PARAM_TAG)) {
                 if (TITLE_PARAM.equalsIgnoreCase(currentElement.getAttribute("name"))) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppenderEventDispatcher.java
Patch:
@@ -56,7 +56,7 @@ class AsyncAppenderEventDispatcher extends Log4jThread {
         this.errorAppender = errorAppender;
         this.appenders = appenders;
         this.queue = queue;
-        this.stoppedRef = new AtomicBoolean(false);
+        this.stoppedRef = new AtomicBoolean();
     }
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/nosql/AbstractNoSqlConnection.java
Patch:
@@ -29,7 +29,7 @@
  */
 public abstract class AbstractNoSqlConnection<W, T extends NoSqlObject<W>> implements NoSqlConnection<W, T> {
 
-    private final AtomicBoolean closed = new AtomicBoolean(false);
+    private final AtomicBoolean closed = new AtomicBoolean();
 
     @Override
     public void close() {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/AwaitCompletionReliabilityStrategy.java
Patch:
@@ -38,7 +38,7 @@
 public class AwaitCompletionReliabilityStrategy implements ReliabilityStrategy, LocationAwareReliabilityStrategy {
     private static final int MAX_RETRIES = 3;
     private final AtomicInteger counter = new AtomicInteger();
-    private final AtomicBoolean shutdown = new AtomicBoolean(false);
+    private final AtomicBoolean shutdown = new AtomicBoolean();
     private final Lock shutdownLock = new ReentrantLock();
     private final Condition noLogEvents = shutdownLock.newCondition(); // should only be used when shutdown == true
     private final LoggerConfig loggerConfig;

File: log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/LoggerConfigBenchmark.java
Patch:
@@ -58,7 +58,7 @@ public class LoggerConfigBenchmark {
     private final boolean includeLocation = true;
     private LoggerConfig parent;
     private final AtomicInteger counter = new AtomicInteger();
-    private final AtomicBoolean shutdown = new AtomicBoolean(false);
+    private final AtomicBoolean shutdown = new AtomicBoolean();
     private final Lock shutdownLock = new ReentrantLock();
     private final Condition noLogEvents = shutdownLock.newCondition(); // should only be used when shutdown == true
     private final LogEvent LOGEVENT = createLogEventWithoutException();

File: log4j-1.2-api/src/main/java/org/apache/log4j/builders/AbstractBuilder.java
Patch:
@@ -47,9 +47,11 @@ public abstract class AbstractBuilder implements Builder {
     protected static final String APPEND_PARAM = "Append";
     protected static final String BUFFERED_IO_PARAM = "BufferedIO";
     protected static final String BUFFER_SIZE_PARAM = "BufferSize";
+    protected static final String IMMEDIATE_FLUSH_PARAM = "ImmediateFlush";
     protected static final String MAX_SIZE_PARAM = "MaxFileSize";
     protected static final String MAX_BACKUP_INDEX = "MaxBackupIndex";
     protected static final String RELATIVE = "RELATIVE";
+    protected static final String NULL = "NULL";
 
     private final String prefix;
     private final Properties properties;

File: log4j-1.2-api/src/main/java/org/apache/log4j/builders/layout/TTCCLayoutBuilder.java
Patch:
@@ -103,7 +103,7 @@ private Layout createLayout(boolean threadPrinting, boolean categoryPrefixing, b
         if (dateFormat != null) {
             if (RELATIVE.equalsIgnoreCase(dateFormat)) {
                 sb.append("%r ");
-            } else {
+            } else if (!NULL.equalsIgnoreCase(dateFormat)){
                 sb.append("%d{").append(dateFormat).append("}");
                 if (timezone != null) {
                     sb.append("{").append(timezone).append("}");

File: log4j-api/src/test/java/org/apache/logging/log4j/util/PropertiesUtilTest.java
Patch:
@@ -45,7 +45,8 @@ public void testExtractSubset() {
         assertHasAllProperties(PropertiesUtil.extractSubset(properties, "b."));
         assertHasAllProperties(PropertiesUtil.extractSubset(properties, "c.1"));
         assertHasAllProperties(PropertiesUtil.extractSubset(properties, "dd"));
-        assertEquals(0, properties.size());
+        // One invalid entry remains
+        assertEquals(1, properties.size());
     }
 
     @Test

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/SyslogAppender.java
Patch:
@@ -104,7 +104,7 @@ public static class Builder<B extends Builder<B>> extends AbstractBuilder<B>
         @PluginElement("LoggerFields")
         private LoggerFields[] loggerFields;
 
-        @SuppressWarnings({"resource", "unchecked"})
+        @SuppressWarnings({"resource"})
         @Override
         public SyslogAppender build() {
             final Protocol protocol = getProtocol();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/ExecutorServices.java
Patch:
@@ -78,4 +78,6 @@ public static boolean shutdown(final ExecutorService executorService, final long
         return true;
     }
 
+    /** no-op method which can be invoked to ensure this class has been initialized per jls-12.4.2. */
+    public static void ensureInitialized() {}
 }

File: log4j-api/src/main/java/org/apache/logging/log4j/Level.java
Patch:
@@ -283,11 +283,11 @@ public static Level getLevel(final String name) {
      * Converts the string passed as argument to a level. If the conversion fails, then this method returns
      * {@link #DEBUG}.
      *
-     * @param sArg The name of the desired Level.
+     * @param level The name of the desired Level.
      * @return The Level associated with the String.
      */
-    public static Level toLevel(final String sArg) {
-        return toLevel(sArg, Level.DEBUG);
+    public static Level toLevel(final String level) {
+        return toLevel(level, Level.DEBUG);
     }
 
     /**

File: log4j-api-java9/src/main/java/org/apache/logging/log4j/util/PrivateSecurityManagerStackTraceUtil.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.logging.log4j.util;
 
-import java.util.Stack;
+import java.util.Deque;
 
 /**
  * This is a dummy class and is only here to allow this module to compile. It will not
@@ -28,7 +28,7 @@ static boolean isEnabled() {
         return false;
     }
 
-    static Stack<Class<?>> getCurrentStackTrace() {
+    static Deque<Class<?>> getCurrentStackTrace() {
         return null;
     }
 }

File: log4j-api/src/main/java/org/apache/logging/log4j/util/PrivateSecurityManagerStackTraceUtil.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.logging.log4j.util;
 
 import java.util.ArrayDeque;
+import java.util.Collections;
 import java.util.Deque;
 
 /**
@@ -64,9 +65,7 @@ static boolean isEnabled() {
     static Deque<Class<?>> getCurrentStackTrace() {
         final Class<?>[] array = SECURITY_MANAGER.getClassContext();
         final Deque<Class<?>> classes = new ArrayDeque<>(array.length);
-        for (final Class<?> clazz : array) {
-            classes.push(clazz);
-        }
+        Collections.addAll(classes, array);
         return classes;
     }
 

File: log4j-api/src/test/java/org/apache/logging/log4j/util/StackLocatorUtilTest.java
Patch:
@@ -73,7 +73,7 @@ public void testGetCurrentStackTrace() throws Exception {
         final Stack<Class<?>> reversed = new Stack<>();
         reversed.ensureCapacity(classes.size());
         while (!classes.isEmpty()) {
-            reversed.push(classes.pop());
+            reversed.push(classes.removeLast());
         }
         while (reversed.peek() != StackLocatorUtil.class) {
             reversed.pop();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java
Patch:
@@ -112,7 +112,7 @@ public abstract class AbstractConfiguration extends AbstractFilterable implement
     /**
      * Shutdown timeout in milliseconds.
      */
-    protected long shutdownTimeoutMillis = 0;
+    protected long shutdownTimeoutMillis;
 
     /**
      * The Script manager.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java
Patch:
@@ -123,7 +123,7 @@ public abstract class AbstractConfiguration extends AbstractFilterable implement
      * The Advertiser which exposes appender configurations to external systems.
      */
     private Advertiser advertiser = new DefaultAdvertiser();
-    private Node advertiserNode = null;
+    private Node advertiserNode;
     private Object advertisement;
     private String name;
     private ConcurrentMap<String, Appender> appenders = new ConcurrentHashMap<>();
@@ -154,7 +154,6 @@ protected AbstractConfiguration(final LoggerContext loggerContext, final Configu
         pluginManager = new PluginManager(Node.CATEGORY);
         rootNode = new Node();
         setState(State.INITIALIZING);
-
     }
 
     @Override

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java
Patch:
@@ -59,7 +59,7 @@
  * The following example demonstrates this:
  * </p>
  * <pre>
- * Map valuesMap = HashMap();
+ * Map valuesMap = new HashMap&lt;&gt;();
  * valuesMap.put(&quot;animal&quot;, &quot;quick brown fox&quot;);
  * valuesMap.put(&quot;target&quot;, &quot;lazy dog&quot;);
  * String templateString = &quot;The ${animal} jumped over the ${target}.&quot;;
@@ -80,7 +80,7 @@
  * The following shows an example with variable default value settings:
  * </p>
  * <pre>
- * Map valuesMap = HashMap();
+ * Map valuesMap = new HashMap&lt;&gt;();
  * valuesMap.put(&quot;animal&quot;, &quot;quick brown fox&quot;);
  * valuesMap.put(&quot;target&quot;, &quot;lazy dog&quot;);
  * String templateString = &quot;The ${animal} jumped over the ${target}. ${undefined.number:-1234567890}.&quot;;

File: log4j-1.2-api/src/main/java/org/apache/log4j/config/PropertiesConfiguration.java
Patch:
@@ -100,8 +100,7 @@ public Configuration reconfigure() {
             if (source == null) {
                 return null;
             }
-            final PropertiesConfigurationFactory factory = new PropertiesConfigurationFactory();
-            final PropertiesConfiguration config = (PropertiesConfiguration) factory.getConfiguration(getLoggerContext(), source);
+            final Configuration config = new PropertiesConfigurationFactory().getConfiguration(getLoggerContext(), source);
             return config == null || config.getState() != State.INITIALIZING ? null : config;
         } catch (final IOException ex) {
             LOGGER.error("Cannot locate file {}: {}", getConfigurationSource(), ex);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/SocketAppenderReconnectTest.java
Patch:
@@ -201,7 +201,7 @@ private static void verifyLoggingSuccess(final LineReadingTcpServer server) thro
     private static void awaitUntilSucceeds(final Runnable runnable) {
         // These figures are collected via trial-and-error; nothing scientific to look for here.
         final long pollIntervalMillis = 1_000L;
-        final long timeoutSeconds = 15L;
+        final long timeoutSeconds = 60L;
         await()
                 .pollInterval(pollIntervalMillis, TimeUnit.MILLISECONDS)
                 .atMost(timeoutSeconds, TimeUnit.SECONDS)

File: log4j-1.2-api/src/main/java/org/apache/log4j/config/PropertiesConfiguration.java
Patch:
@@ -549,7 +549,7 @@ public Filter parseAppenderFilters(Properties props, String filterPrefix, String
             String clazz = props.getProperty(entry.getKey());
             Filter filter = null;
             if (clazz != null) {
-                filter = manager.parseFilter(clazz, filterPrefix, props, this);
+                filter = manager.parseFilter(clazz, entry.getKey(), props, this);
                 if (filter == null) {
                     LOGGER.debug("Filter key: [{}] class: [{}] props: {}", entry.getKey(), clazz, entry.getValue());
                     filter = buildFilter(clazz, appenderName, entry.getValue());

File: log4j-1.2-api/src/main/java/org/apache/log4j/LogManager.java
Patch:
@@ -17,8 +17,6 @@
 package org.apache.log4j;
 
 import java.util.Enumeration;
-import java.util.HashMap;
-import java.util.Map;
 
 import org.apache.log4j.helpers.NullEnumeration;
 import org.apache.log4j.legacy.core.ContextUtil;
@@ -109,7 +107,7 @@ public static Logger exists(final String name) {
 
     @SuppressWarnings("rawtypes")
     public static Enumeration getCurrentLoggers() {
-        return NullEnumeration.getInstance();
+        return getLoggerRepository().getCurrentLoggers();
     }
 
     static void reconfigure() {

File: log4j-api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java
Patch:
@@ -45,7 +45,7 @@
  * Records events that occur in the logging system. By default, only error messages are logged to {@link System#err}.
  * Normally, the Log4j StatusLogger is configured via the root {@code <Configuration status="LEVEL"/>} node in a Log4j
  * configuration file. However, this can be overridden via a system property named
- * "{@value SimpleLoggerContext#SYSTEM_PREFIX}StatusLogger.level" and will work with any Log4j provider.
+ * {@value #DEFAULT_STATUS_LISTENER_LEVEL} and will work with any Log4j provider.
  *
  * @see SimpleLogger
  * @see SimpleLoggerContext

File: log4j-1.2-api/src/test/java/org/apache/log4j/config/PropertiesConfigurationTest.java
Patch:
@@ -135,7 +135,7 @@ public void testSystemProperties() throws Exception {
             assertTrue(appender instanceof FileAppender);
             final FileAppender fileAppender = (FileAppender) appender;
             // Two slashes because that's how the config file is setup.
-            assertEquals(SystemUtils.getJavaIoTmpDir() + "//hadoop.log", fileAppender.getFileName());
+            assertEquals(SystemUtils.getJavaIoTmpDir() + File.separator + "/hadoop.log", fileAppender.getFileName());
         }
     }
 

File: log4j-1.2-api/src/main/java/org/apache/log4j/LogManager.java
Patch:
@@ -82,9 +82,6 @@ public final class LogManager {
         isLog4jCore = core;
     }
 
-    private LogManager() {
-    }
-
     public static Logger getRootLogger() {
         return Category.getInstance(PrivateManager.getContext(), Strings.EMPTY);
     }

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java
Patch:
@@ -2895,7 +2895,7 @@ public LogBuilder atFatal() {
         return atLevel(Level.FATAL);
     }
     /**
-     * Construct a fatal log event.
+     * Construct a log event that will always be logged.
      * @return a LogBuilder.
      * @since 2.13.0
      */

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/ExtendedLoggerWrapper.java
Patch:
@@ -218,7 +218,8 @@ public void logMessage(final String fqcn, final Level level, final Marker marker
         if (logger instanceof LocationAwareLogger && requiresLocation()) {
             ((LocationAwareLogger) logger).logMessage(level, marker, fqcn, StackLocatorUtil.calcLocation(fqcn),
                 message, t);
+        } else {
+            logger.logMessage(fqcn, level, marker, message, t);
         }
-        logger.logMessage(fqcn, level, marker, message, t);
     }
 }

File: log4j-1.2-api/src/main/java/org/apache/log4j/config/PropertiesConfiguration.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Properties;
 import java.util.SortedMap;
 import java.util.StringTokenizer;
@@ -330,9 +331,9 @@ private void configureRoot(Properties props) {
      * Parse non-root elements, such non-root categories and renderers.
      */
     private void parseLoggers(Properties props) {
-        Enumeration enumeration = props.propertyNames();
+        Enumeration<?> enumeration = props.propertyNames();
         while (enumeration.hasMoreElements()) {
-            String key = (String) enumeration.nextElement();
+            String key = Objects.toString(enumeration.nextElement(), null);
             if (key.startsWith(CATEGORY_PREFIX) || key.startsWith(LOGGER_PREFIX)) {
                 String loggerName = null;
                 if (key.startsWith(CATEGORY_PREFIX)) {

File: log4j-1.2-api/src/main/java/org/apache/log4j/helpers/AppenderAttachableImpl.java
Patch:
@@ -40,7 +40,7 @@ public void addAppender(Appender newAppender) {
     }
 
     @Override
-    public Enumeration getAllAppenders() {
+    public Enumeration<Appender> getAllAppenders() {
         return Collections.enumeration(appenders.values());
     }
 

File: log4j-to-slf4j/src/test/java/org/apache/logging/slf4j/LoggerTest.java
Patch:
@@ -122,7 +122,7 @@ public void getLogger_String_MessageFactoryMismatch() {
 
     @Test
     public void getLogger_String_MessageFactoryMismatchNull() {
-        final Logger testLogger =  testMessageFactoryMismatch("getLogger_String_MessageFactoryMismatchNull",
+        final Logger testLogger = testMessageFactoryMismatch("getLogger_String_MessageFactoryMismatchNull",
             StringFormatterMessageFactory.INSTANCE, null);
         testLogger.debug("%,d", Integer.MAX_VALUE);
         assertThat(list.strList, hasSize(1));
@@ -134,7 +134,7 @@ private Logger testMessageFactoryMismatch(final String name, final MessageFactor
         assertThat(testLogger, is(notNullValue()));
         checkMessageFactory(messageFactory1, testLogger);
         final Logger testLogger2 = LogManager.getLogger(name, messageFactory2);
-        checkMessageFactory(messageFactory1, testLogger2);
+        checkMessageFactory(messageFactory2, testLogger2);
         return testLogger;
     }
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/lookup/InterpolatorTest.java
Patch:
@@ -166,6 +166,6 @@ public void testInterpolatorMapMessageWithMapPrefix() {
                 .setLevel(Level.INFO)
                 .setMessage(new StringMapMessage(map))
                 .build();
-        assertEquals("configProperties", interpolator.lookup(event, "map:key"));
+        assertEquals("mapMessage", interpolator.lookup(event, "map:key"));
     }
 }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/util/OptionConverterTest.java
Patch:
@@ -28,7 +28,7 @@
 public class OptionConverterTest {
 
     @Test
-    public void testReplace() {
+    public void testSubstVars() {
         Properties props = new Properties();
         props.setProperty("key", "${key}");
         assertEquals("Value of key is ${key}.", OptionConverter.substVars("Value of key is ${key}.", props));

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java
Patch:
@@ -437,7 +437,7 @@ public static String replace(final Object source, final Map<String, String> valu
      */
     public static String replace(final Object source, final Properties valueProperties) {
         if (valueProperties == null) {
-            return source.toString();
+            return Objects.toString(source, null);
         }
         final Map<String, String> valueMap = new HashMap<>();
         final Enumeration<?> propNames = valueProperties.propertyNames();

File: log4j-1.2-api/src/main/java/org/apache/log4j/builders/AbstractBuilder.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.filter.CompositeFilter;
 import org.apache.logging.log4j.core.filter.ThresholdFilter;
+import org.apache.logging.log4j.core.lookup.ConfigurationStrSubstitutor;
 import org.apache.logging.log4j.core.lookup.StrSubstitutor;
 import org.apache.logging.log4j.status.StatusLogger;
 
@@ -54,7 +55,7 @@ public abstract class AbstractBuilder {
     public AbstractBuilder() {
         this.prefix = null;
         this.props = new Properties();
-        strSubstitutor = new StrSubstitutor(System.getProperties());
+        strSubstitutor = new ConfigurationStrSubstitutor(System.getProperties());
     }
 
     public AbstractBuilder(String prefix, Properties props) {
@@ -63,7 +64,7 @@ public AbstractBuilder(String prefix, Properties props) {
         Map<String, String> map = new HashMap<>();
         System.getProperties().forEach((k, v) -> map.put(k.toString(), v.toString()));
         props.forEach((k, v) -> map.put(k.toString(), v.toString()));
-        strSubstitutor = new StrSubstitutor(map);
+        strSubstitutor = new ConfigurationStrSubstitutor(map);
     }
 
     public String getProperty(String key) {

File: log4j-1.2-api/src/main/java/org/apache/log4j/config/Log4j1Configuration.java
Patch:
@@ -55,6 +55,7 @@ public BuilderManager getBuilderManager() {
     @Override
     public void initialize() {
         getStrSubstitutor().setConfiguration(this);
+        getConfigurationStrSubstitutor().setConfiguration(this);
         super.getScheduler().start();
         doConfigure();
         setState(State.INITIALIZED);

File: log4j-1.2-api/src/main/java/org/apache/log4j/config/Log4j1ConfigurationParser.java
Patch:
@@ -39,6 +39,7 @@
 import org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
 import org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
 import org.apache.logging.log4j.core.config.builder.impl.BuiltConfiguration;
+import org.apache.logging.log4j.core.lookup.ConfigurationStrSubstitutor;
 import org.apache.logging.log4j.core.lookup.StrSubstitutor;
 import org.apache.logging.log4j.status.StatusLogger;
 import org.apache.logging.log4j.util.Strings;
@@ -89,8 +90,8 @@ public ConfigurationBuilder<BuiltConfiguration> buildConfigurationBuilder(final
             throws IOException {
         try {
             properties.load(input);
-            strSubstitutorProperties = new StrSubstitutor(properties);
-            strSubstitutorSystem = new StrSubstitutor(System.getProperties());
+            strSubstitutorProperties = new ConfigurationStrSubstitutor(properties);
+            strSubstitutorSystem = new ConfigurationStrSubstitutor(System.getProperties());
             final String rootCategoryValue = getLog4jValue(ROOTCATEGORY);
             final String rootLoggerValue = getLog4jValue(ROOTLOGGER);
             if (rootCategoryValue == null && rootLoggerValue == null) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java
Patch:
@@ -161,8 +161,8 @@ private void tryCallAppender(final LogEvent event) {
             appender.append(event);
         } catch (final RuntimeException error) {
             handleAppenderError(event, error);
-        } catch (final Exception error) {
-            handleAppenderError(event, new AppenderLoggingException(error));
+        } catch (final Throwable throwable) {
+            handleAppenderError(event, new AppenderLoggingException(throwable));
         }
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.logging.log4j.core.config.composite.CompositeConfiguration;
 import org.apache.logging.log4j.core.config.plugins.util.PluginManager;
 import org.apache.logging.log4j.core.config.plugins.util.PluginType;
+import org.apache.logging.log4j.core.lookup.ConfigurationStrSubstitutor;
 import org.apache.logging.log4j.core.lookup.Interpolator;
 import org.apache.logging.log4j.core.lookup.StrSubstitutor;
 import org.apache.logging.log4j.core.net.UrlConnectionFactory;
@@ -141,7 +142,7 @@ public ConfigurationFactory() {
 
     private static ConfigurationFactory configFactory = new Factory();
 
-    protected final StrSubstitutor substitutor = new StrSubstitutor(new Interpolator());
+    protected final StrSubstitutor substitutor = new ConfigurationStrSubstitutor(new Interpolator());
 
     private static final Lock LOCK = new ReentrantLock();
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/CompositeConfiguration.java
Patch:
@@ -79,7 +79,7 @@ public CompositeConfiguration(final List<? extends AbstractConfiguration> config
                 .withStatus(getDefaultStatus());
         for (final Map.Entry<String, String> entry : rootNode.getAttributes().entrySet()) {
             final String key = entry.getKey();
-            final String value = getStrSubstitutor().replace(entry.getValue());
+            final String value = getConfigurationStrSubstitutor().replace(entry.getValue());
             if ("status".equalsIgnoreCase(key)) {
                 statusConfig.withStatus(value.toUpperCase());
             } else if ("dest".equalsIgnoreCase(key)) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java
Patch:
@@ -71,7 +71,7 @@ public JsonConfiguration(final LoggerContext loggerContext, final ConfigurationS
             int monitorIntervalSeconds = 0;
             for (final Map.Entry<String, String> entry : rootNode.getAttributes().entrySet()) {
                 final String key = entry.getKey();
-                final String value = getStrSubstitutor().replace(entry.getValue());
+                final String value = getConfigurationStrSubstitutor().replace(entry.getValue());
                 // TODO: this duplicates a lot of the XmlConfiguration constructor
                 if ("status".equalsIgnoreCase(key)) {
                     statusConfig.withStatus(value);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java
Patch:
@@ -110,7 +110,7 @@ public XmlConfiguration(final LoggerContext loggerContext, final ConfigurationSo
             int monitorIntervalSeconds = 0;
             for (final Map.Entry<String, String> entry : attrs.entrySet()) {
                 final String key = entry.getKey();
-                final String value = getStrSubstitutor().replace(entry.getValue());
+                final String value = getConfigurationStrSubstitutor().replace(entry.getValue());
                 if ("status".equalsIgnoreCase(key)) {
                     statusConfig.withStatus(value);
                 } else if ("dest".equalsIgnoreCase(key)) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/ContextMapLookup.java
Patch:
@@ -55,6 +55,6 @@ private ReadOnlyStringMap currentContextData() {
      */
     @Override
     public String lookup(final LogEvent event, final String key) {
-        return event.getContextData().getValue(key);
+        return event == null ? null : event.getContextData().getValue(key);
     }
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/DateLookup.java
Patch:
@@ -54,7 +54,7 @@ public String lookup(final String key) {
      */
     @Override
     public String lookup(final LogEvent event, final String key) {
-        return formatDate(event.getTimeMillis(), key);
+        return event == null ? lookup(key) : formatDate(event.getTimeMillis(), key);
     }
 
     private String formatDate(final long date, final String format) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/EventLookup.java
Patch:
@@ -33,6 +33,9 @@ public class EventLookup extends AbstractLookup {
      */
     @Override
     public String lookup(final LogEvent event, final String key) {
+        if (event == null) {
+            return null;
+        }
         switch (key) {
             case "Marker": {
                 return event.getMarker() != null ? event.getMarker().getName() : null;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManagerTest.java
Patch:
@@ -69,7 +69,7 @@ public RolloverDescription rollover(RollingFileManager manager) throws SecurityE
                     .withFilePattern("FilePattern")
                     .setName("RollingFileAppender")
                     .setConfiguration(config)
-                    .withStrategy(new CustomDirectFileRolloverStrategy(file, config.getStrSubstitutor()))
+                    .withStrategy(new CustomDirectFileRolloverStrategy(file, config.getConfigurationStrSubstitutor()))
                     .withPolicy(new SizeBasedTriggeringPolicy(100))
                     .build();
 

File: log4j-jakarta-web/src/main/java/org/apache/logging/log4j/web/Log4jWebInitializerImpl.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.logging.log4j.core.config.Configurator;
 import org.apache.logging.log4j.core.impl.ContextAnchor;
 import org.apache.logging.log4j.core.impl.Log4jContextFactory;
+import org.apache.logging.log4j.core.lookup.ConfigurationStrSubstitutor;
 import org.apache.logging.log4j.core.lookup.Interpolator;
 import org.apache.logging.log4j.core.lookup.StrSubstitutor;
 import org.apache.logging.log4j.core.selector.ContextSelector;
@@ -57,7 +58,7 @@ final class Log4jWebInitializerImpl extends AbstractLifeCycle implements Log4jWe
     }
 
     private final Map<String, String> map = new ConcurrentHashMap<>();
-    private final StrSubstitutor substitutor = new StrSubstitutor(new Interpolator(map));
+    private final StrSubstitutor substitutor = new ConfigurationStrSubstitutor(new Interpolator(map));
     private final ServletContext servletContext;
 
     private String name;

File: log4j-samples/log4j-samples-loggerProperties/src/main/java/org/apache/logging/log4j/lookup/CustomLookup.java
Patch:
@@ -50,6 +50,9 @@ public class CustomLookup extends AbstractLookup {
      */
     @Override
     public String lookup(final LogEvent event, final String key) {
+        if (event == null) {
+            return null;
+        }
         try {
             final Map<String, String> properties = loggerProperties.get(event.getLoggerName());
             if (properties == null) {

File: log4j-samples/log4j-samples-loggerProperties/src/main/java/org/apache/logging/log4j/lookup/MapMessageLookup.java
Patch:
@@ -51,6 +51,9 @@ public class MapMessageLookup extends AbstractLookup {
      */
     @Override
     public String lookup(final LogEvent event, final String key) {
+        if (event == null) {
+            return null;
+        }
         final Message msg = event.getMessage();
         if (msg instanceof MapMessage) {
             try {

File: log4j-web/src/main/java/org/apache/logging/log4j/web/Log4jWebInitializerImpl.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.logging.log4j.core.config.Configurator;
 import org.apache.logging.log4j.core.impl.ContextAnchor;
 import org.apache.logging.log4j.core.impl.Log4jContextFactory;
+import org.apache.logging.log4j.core.lookup.ConfigurationStrSubstitutor;
 import org.apache.logging.log4j.core.lookup.Interpolator;
 import org.apache.logging.log4j.core.lookup.StrSubstitutor;
 import org.apache.logging.log4j.core.selector.ContextSelector;
@@ -57,7 +58,7 @@ final class Log4jWebInitializerImpl extends AbstractLifeCycle implements Log4jWe
     }
 
     private final Map<String, String> map = new ConcurrentHashMap<>();
-    private final StrSubstitutor substitutor = new StrSubstitutor(new Interpolator(map));
+    private final StrSubstitutor substitutor = new ConfigurationStrSubstitutor(new Interpolator(map));
     private final ServletContext servletContext;
 
     private String name;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/JmsAppender.java
Patch:
@@ -225,6 +225,7 @@ public static Builder newBuilder() {
     private volatile JmsManager manager;
 
     /**
+     * Constructs a new instance.
      *
      * @throws JMSException not thrown as of 2.9 but retained in the signature for compatibility, will be removed in 3.0
      */
@@ -235,9 +236,10 @@ protected JmsAppender(final String name, final Filter filter, final Layout<? ext
     }
 
     /**
+     * Constructs a new instance.
      *
      * @throws JMSException not thrown as of 2.9 but retained in the signature for compatibility, will be removed in 3.0
-     * @deprecated
+     * @deprecated Use {@link #JmsAppender(String, Filter, Layout, boolean, Property[], JmsManager)}.
      */
     @Deprecated
     protected JmsAppender(final String name, final Filter filter, final Layout<? extends Serializable> layout,

File: log4j-1.2-api/src/main/java/org/apache/log4j/config/PropertiesConfiguration.java
Patch:
@@ -526,7 +526,7 @@ public Filter parseAppenderFilters(Properties props, String filterPrefix, String
         // name-value pairs associated to that filter
         int fIdx = filterPrefix.length();
         SortedMap<String, List<NameValue>> filters = new TreeMap<>();
-        Enumeration e = props.keys();
+        Enumeration<?> e = props.keys();
         String name = "";
         while (e.hasMoreElements()) {
             String key = (String) e.nextElement();

File: log4j-core-its/src/test/java/org/apache/logging/log4j/core/SimplePerfTest.java
Patch:
@@ -161,7 +161,7 @@ public int nextInt() {
     private static void bubbleSort(final int array[]) {
         final int length = array.length;
         for (int i = 0; i < length; i++) {
-            for (int j = 1; j > length - i; j++) {
+            for (int j = 1; j < length - i; j++) {
                 if (array[j-1] > array[j]) {
                     final int temp = array[j-1];
                     array[j-1] = array[j];

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/JmsManager.java
Patch:
@@ -124,7 +124,7 @@ private static class JmsManagerFactory implements ManagerFactory<JmsManager, Jms
 
         @Override
         public JmsManager createManager(final String name, final JmsManagerConfiguration data) {
-            if (JndiManager.isIsJndiEnabled()) {
+            if (JndiManager.isJndiEnabled()) {
                 try {
                     return new JmsManager(name, data);
                 } catch (final Exception e) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java
Patch:
@@ -78,7 +78,7 @@ public Interpolator(final StrLookup defaultLookup, final List<String> pluginPack
         for (final Map.Entry<String, PluginType<?>> entry : plugins.entrySet()) {
             try {
                 final Class<? extends StrLookup> clazz = entry.getValue().getPluginClass().asSubclass(StrLookup.class);
-                if (!clazz.getName().equals(JndiLookup.class.getName()) || JndiManager.isIsJndiEnabled()) {
+                if (!clazz.getName().equals(JndiLookup.class.getName()) || JndiManager.isJndiEnabled()) {
                     strLookupMap.put(entry.getKey().toLowerCase(), ReflectionUtil.instantiate(clazz));
                 }
             } catch (final Throwable t) {
@@ -109,7 +109,7 @@ public Interpolator(final Map<String, String> properties) {
         strLookupMap.put("lower", new LowerLookup());
         strLookupMap.put("upper", new UpperLookup());
         // JNDI
-        if (JndiManager.isIsJndiEnabled()) {
+        if (JndiManager.isJndiEnabled()) {
             try {
                 // [LOG4J2-703] We might be on Android
                 strLookupMap.put(LOOKUP_KEY_JNDI,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/JndiManager.java
Patch:
@@ -73,7 +73,7 @@ public class JndiManager extends AbstractManager {
 
     private final DirContext context;
 
-    public static boolean isIsJndiEnabled() {
+    public static boolean isJndiEnabled() {
         return PropertiesUtil.getProperties().getBooleanProperty("log4j2.enableJndi", false);
     }
 
@@ -280,7 +280,7 @@ private static class JndiManagerFactory implements ManagerFactory<JndiManager, P
 
         @Override
         public JndiManager createManager(final String name, final Properties data) {
-            if (isIsJndiEnabled()) {
+            if (isJndiEnabled()) {
                 String hosts = data != null ? data.getProperty(ALLOWED_HOSTS) : null;
                 String classes = data != null ? data.getProperty(ALLOWED_CLASSES) : null;
                 String protocols = data != null ? data.getProperty(ALLOWED_PROTOCOLS) : null;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/selector/JndiContextSelector.java
Patch:
@@ -94,7 +94,7 @@ public class JndiContextSelector implements NamedContextSelector {
     private static final StatusLogger LOGGER = StatusLogger.getLogger();
 
     public JndiContextSelector() {
-        if (!JndiManager.isIsJndiEnabled()) {
+        if (!JndiManager.isJndiEnabled()) {
             throw new IllegalStateException("JNDI must be enabled by setting log4j2.enableJndi=true");
         }
     }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/lookup/InterpolatorTest.java
Patch:
@@ -23,6 +23,7 @@
 
 import org.apache.logging.log4j.ThreadContext;
 import org.apache.logging.log4j.junit.JndiRule;
+import org.junit.BeforeClass;
 import org.junit.ClassRule;
 import org.junit.Test;
 import org.junit.rules.ExternalResource;
@@ -48,12 +49,14 @@ public class InterpolatorTest {
         protected void before() throws Throwable {
             System.setProperty(TESTKEY, TESTVAL);
             System.setProperty(TESTKEY2, TESTVAL);
+            System.setProperty("log4j2.enableJndi", "true");
         }
 
         @Override
         protected void after() {
             System.clearProperty(TESTKEY);
             System.clearProperty(TESTKEY2);
+            System.clearProperty("log4j2.enableJndi");
         }
     }).around(new JndiRule(
         JndiLookup.CONTAINER_JNDI_RESOURCE_PATH_PREFIX + TEST_CONTEXT_RESOURCE_NAME, TEST_CONTEXT_NAME));

File: log4j-core/src/test/java/org/apache/logging/log4j/core/lookup/JndiRestrictedLookupTest.java
Patch:
@@ -54,6 +54,7 @@ public class JndiRestrictedLookupTest {
     public static void beforeClass() {
         System.setProperty("log4j2.allowedLdapClasses", Level.class.getName());
         System.setProperty("log4j2.allowedJndiProtocols", "dns");
+        System.setProperty("log4j2.enableJndi", "true");
     }
 
     @Test

File: log4j-core/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutLookupDateTest.java
Patch:
@@ -29,7 +29,7 @@
  *
  * This shows the behavior this user wants to disable.
  */
-@LoggerContextSource("log4j-list.xml")
+@LoggerContextSource("log4j-list-lookups.xml")
 public class PatternLayoutLookupDateTest {
 
     @Test

File: log4j-core/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutNoLookupDateTest.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * See (LOG4J2-905) Ability to disable (date) lookup completely, compatibility issues with other libraries like camel.
  */
-@LoggerContextSource("log4j-list-nolookups.xml")
+@LoggerContextSource("log4j-list.xml")
 public class PatternLayoutNoLookupDateTest {
 
     @Test

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java
Patch:
@@ -479,7 +479,7 @@ public M createManager(final String name, final T data) {
                 os = socket.getOutputStream();
                 return createManager(name, os, socket, inetAddress, data);
             } catch (final IOException ex) {
-                LOGGER.error("TcpSocketManager ({}) caught exception and will continue:", name, ex, ex);
+                LOGGER.error("TcpSocketManager ({}) caught exception and will continue:", name, ex);
                 os = NullOutputStream.getInstance();
             }
             if (data.reconnectDelayMillis == 0) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/AbstractKeyStoreConfiguration.java
Patch:
@@ -95,7 +95,7 @@ protected KeyStore load() throws StoreConfigurationException {
             LOGGER.error("The keystore file {} is not found", loadLocation, e);
             throw new StoreConfigurationException(loadLocation, e);
         } catch (final IOException e) {
-            LOGGER.error("Something is wrong with the format of the keystore or the given password for location", loadLocation, e);
+            LOGGER.error("Something is wrong with the format of the keystore or the given password for location {}", loadLocation, e);
             throw new StoreConfigurationException(loadLocation, e);
         }
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/OptionConverter.java
Patch:
@@ -297,7 +297,7 @@ public static Object instantiateByClassName(final String className, final Class<
                     LOGGER.error("A \"{}\" object is not assignable to a \"{}\" variable.", className,
                         superClass.getName());
                     LOGGER.error("The class \"{}\" was loaded by [{}] whereas object of type [{}] was loaded by [{}].",
-                        superClass.getName(), superClass.getClassLoader(), classObj.getName());
+                        superClass.getName(), superClass.getClassLoader(), classObj.getTypeName(), classObj.getName());
                     return defaultValue;
                 }
                 return classObj.newInstance();

File: log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/Log4jEventSource.java
Patch:
@@ -58,7 +58,7 @@ public void send(final Event event) {
         try {
             getChannelProcessor().processEvent(event);
         } catch (final ChannelException ex) {
-            LOGGER.warn("Unable to process event {}" + event, ex);
+            LOGGER.warn("Unable to process event {}", event, ex);
             throw ex;
         }
         sourceCounter.incrementAppendAcceptedCount();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java
Patch:
@@ -48,8 +48,8 @@
 /**
  * AsyncLogger is a logger designed for high throughput and low latency logging. It does not perform any I/O in the
  * calling (application) thread, but instead hands off the work to another thread as soon as possible. The actual
- * logging is performed in the background thread. It uses the LMAX Disruptor library for inter-thread communication. (<a
- * href="http://lmax-exchange.github.com/disruptor/" >http://lmax-exchange.github.com/disruptor/</a>)
+ * logging is performed in the background thread. It uses <a href="https://lmax-exchange.github.io/disruptor/">LMAX
+ * Disruptor</a> for inter-thread communication.
  * <p>
  * To use AsyncLogger, specify the System property
  * {@code -DLog4jContextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector} before you obtain a

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java
Patch:
@@ -88,9 +88,10 @@ public boolean requiresLocation() {
         return false;
     }
 
-    public interface Serializer {
+    public interface Serializer extends Serializer2 {
         String toSerializable(final LogEvent event);
 
+        @Override
         default StringBuilder toSerializable(final LogEvent event, final StringBuilder builder) {
             builder.append(toSerializable(event));
             return builder;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/pattern/PatternParserTest.java
Patch:
@@ -362,7 +362,7 @@ public void testClosingBracketButWrongPlace() {
         assertNotNull(formatters);
         assertEquals(2, formatters.size());
 
-        validateConverter(formatters, 0, "Literal");
+        validateConverter(formatters, 0, "SimpleLiteral");
         validateConverter(formatters, 1, "Date");
     }
 

File: log4j-perf/src/main/java/org/apache/logging/log4j/layout/template/json/JsonTemplateLayoutBenchmarkState.java
Patch:
@@ -153,9 +153,9 @@ private static EcsLayout createEcsLayout() {
         final Charset layoutCharset = layout.getCharset();
         // Note that EcsLayout doesn't support charset configuration, though it
         // uses UTF-8 internally.
-        if (CHARSET.equals(layoutCharset)) {
+        if (!CHARSET.equals(layoutCharset)) {
             throw new IllegalArgumentException(
-                    "invalid EcsLayout charset: " + layoutCharset);
+                    "was expecting EcsLayout charset to be: " + CHARSET + ", found: " + layoutCharset);
         }
         return layout;
     }

File: log4j-api/src/main/java/org/apache/logging/log4j/util/Constants.java
Patch:
@@ -56,7 +56,7 @@ public final class Constants {
     /**
      * Name of the system property that will turn on TRACE level internal log4j2 status logging.
      * <p>
-     * If system property {@value} is defined, regardless of the property value, all internal log4j2 logging will be
+     * If system property {@value} is either defined empty or its value equals to {@code true} (ignoring case), all internal log4j2 logging will be
      * printed to the console. The presence of this system property overrides any value set in the configuration's
      * {@code <Configuration status="<level>" ...>} status attribute, as well as any value set for
      * system property {@code org.apache.logging.log4j.simplelog.StatusLogger.level}.

File: log4j-api/src/main/java/org/apache/logging/log4j/MarkerManager.java
Patch:
@@ -231,10 +231,11 @@ public String getName() {
 
         @Override
         public Marker[] getParents() {
-            if (this.parents == null) {
+            Marker[] parentsSnapshot = parents;
+            if (parentsSnapshot == null) {
                 return null;
             }
-            return Arrays.copyOf(this.parents, this.parents.length);
+            return Arrays.copyOf(parentsSnapshot, parentsSnapshot.length);
         }
 
         @Override

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FixedDateFormat.java
Patch:
@@ -714,7 +714,7 @@ private int daylightSavingTime(final int hourOfDay) {
      * Returns {@code true} if the old and new date values will result in the same formatted output, {@code false}
      * if results <i>may</i> differ.
      */
-    public final boolean isEquivalent(long oldEpochSecond, int oldNanoOfSecond, long epochSecond, int nanoOfSecond) {
+    public boolean isEquivalent(long oldEpochSecond, int oldNanoOfSecond, long epochSecond, int nanoOfSecond) {
         if (oldEpochSecond == epochSecond) {
             if (secondFractionDigits <= 3) {
                 // Convert nanos to milliseconds for comparison if the format only requires milliseconds.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/DatePatternConverter.java
Patch:
@@ -104,7 +104,7 @@ String format(final Instant instant) {
         void formatToBuffer(final Instant instant, final StringBuilder destination) {
             final long epochSecond = instant.getEpochSecond();
             final int nanoOfSecond = instant.getNanoOfSecond();
-            if (previousTime != epochSecond || nanos != nanoOfSecond) {
+            if (!fixedDateFormat.isEquivalent(previousTime, nanos, epochSecond, nanoOfSecond)) {
                 length = fixedDateFormat.formatInstant(instant, cachedBuffer, 0);
                 previousTime = epochSecond;
                 nanos = nanoOfSecond;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java
Patch:
@@ -46,9 +46,9 @@
  * <code>
  * &lt;Console name="console"&gt;<br>
  * &nbsp;&lt;PatternLayout pattern="%-5p %d{dd-MMM-yyyy HH:mm:ss} %x %t %m%n"/&gt;<br>
- * &nbsp;&lt;filters&gt;<br>
- * &nbsp;&nbsp;&lt;Burst level="INFO" rate="16" maxBurst="100"/&gt;<br>
- * &nbsp;&lt;/filters&gt;<br>
+ * &nbsp;&lt;Filters&gt;<br>
+ * &nbsp;&nbsp;&lt;BurstFilter level="INFO" rate="16" maxBurst="100"/&gt;<br>
+ * &nbsp;&lt;/Filters&gt;<br>
  * &lt;/Console&gt;<br>
  * </code><br>
  */

File: log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLoggerFactory.java
Patch:
@@ -45,7 +45,7 @@ protected LoggerContext getContext() {
                 ? StackLocatorUtil.getCallerClass(FQCN, PACKAGE, 1)
                 : null;
         return anchor == null
-                ? LogManager.getContext()
+                ? LogManager.getContext(false)
                 : getContext(anchor);
     }
     private LoggerContext validateContext(final LoggerContext context) {

File: log4j-slf4j18-impl/src/main/java/org/apache/logging/slf4j/Log4jLoggerFactory.java
Patch:
@@ -51,7 +51,7 @@ protected LoggerContext getContext() {
                 ? StackLocatorUtil.getCallerClass(FQCN, PACKAGE, 1)
                 : null;
         return anchor == null
-                ? LogManager.getContext()
+                ? LogManager.getContext(false)
                 : getContext(anchor);
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java
Patch:
@@ -671,7 +671,7 @@ private static class FieldWriter implements TriConsumer<String, Object, StringBu
         public void accept(final String key, final Object value, final StringBuilder stringBuilder) {
             if (checker.check(key)) {
                 stringBuilder.append(QU);
-                JsonUtils.quoteAsString(prefix + key, stringBuilder);
+                JsonUtils.quoteAsString(Strings.concat(prefix, key), stringBuilder);
                 stringBuilder.append("\":\"");
                 JsonUtils.quoteAsString(toNullSafeString(String.valueOf(value)), stringBuilder);
                 stringBuilder.append(QC);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/AbstractDatabaseManager.java
Patch:
@@ -44,7 +44,7 @@ protected abstract static class AbstractFactoryData {
          * Constructs the base factory data.
          *
          * @param bufferSize The size of the buffer.
-         * @param bufferSize The appender-level layout
+         * @param layout The appender-level layout
          */
         protected AbstractFactoryData(final int bufferSize, final Layout<? extends Serializable> layout) {
             this.bufferSize = bufferSize;

File: log4j-1.2-api/src/main/java/org/apache/log4j/bridge/LogEventAdapter.java
Patch:
@@ -153,7 +153,7 @@ public String getNDC() {
     }
 
     /*
-     Returns the the context corresponding to the <code>key</code> parameter.
+     Returns the context corresponding to the <code>key</code> parameter.
      */
     @Override
     public Object getMDC(String key) {

File: log4j-1.2-api/src/main/java/org/apache/log4j/spi/ErrorHandler.java
Patch:
@@ -49,7 +49,7 @@ public interface ErrorHandler {
 
     /**
      * Equivalent to the {@link #error(String, Exception, int,
-     * LoggingEvent)} with the the event parameter set to
+     * LoggingEvent)} with the event parameter set to
      * <code>null</code>.
      *
      * @param message   The message associated with the error.

File: log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java
Patch:
@@ -373,7 +373,7 @@ public String getFormattedMessage() {
     }
 
     /**
-     * Formats the message according the the specified format.
+     * Formats the message according to the specified format.
      * @param formats An array of Strings that provide extra information about how to format the message.
      * StructuredDataMessage accepts only a format of "FULL" which will cause the event type to be
      * prepended and the event message to be appended. Specifying any other value will cause only the

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/ThreadContextMap.java
Patch:
@@ -81,7 +81,7 @@ public interface ThreadContextMap {
     void put(final String key, final String value);
 
     /**
-     * Removes the the context identified by the <code>key</code>
+     * Removes the context identified by the <code>key</code>
      * parameter.
      * @param key The key to remove.
      */

File: log4j-api/src/main/java/org/apache/logging/log4j/util/Timer.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Primarily used in unit tests, but can be used to track elapsed time for a request or portion of any other operation
  * so long as all the timer methods are called on the same thread in which it was started. Calling start on
- * multiple threads will cause the the times to be aggregated.
+ * multiple threads will cause the times to be aggregated.
  */
 public class Timer implements Serializable, StringBuilderFormattable
 {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractManager.java
Patch:
@@ -36,7 +36,7 @@
  * This class implements {@link AutoCloseable} mostly to allow unit tests to be written safely and succinctly. While
  * managers do need to allocate resources (usually on construction) and then free these resources, a manager is longer
  * lived than other auto-closeable objects like streams. None the less, making a manager AutoCloseable forces readers to
- * be aware of the the pattern: allocate resources on construction and call {@link #close()} at some point.
+ * be aware of the pattern: allocate resources on construction and call {@link #close()} at some point.
  * </p>
  */
 public abstract class AbstractManager implements AutoCloseable {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java
Patch:
@@ -331,7 +331,7 @@ public ByteBuffer getByteBuffer() {
      * {@link #flushBuffer(ByteBuffer)} directly instead.
      * </p>
      *
-     * @param buf the buffer whose contents to write the the destination
+     * @param buf the buffer whose contents to write the destination
      * @return the specified buffer
      * @since 2.6
      */

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/AbstractPathAction.java
Patch:
@@ -138,7 +138,7 @@ public boolean isFollowSymbolicLinks() {
     }
 
     /**
-     * Returns the the maximum number of directory levels to visit.
+     * Returns the maximum number of directory levels to visit.
      *
      * @return the maxDepth
      */

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java
Patch:
@@ -77,7 +77,7 @@ public static ClassLoader getClassLoader(final Class<?> class1, final Class<?> c
      * <li>Search for {@code resource} using the thread context
      * class loader under Java2. If that fails, search for
      * {@code resource} using the class loader that loaded this
-     * class ({@code Loader}). Under JDK 1.1, only the the class
+     * class ({@code Loader}). Under JDK 1.1, only the class
      * loader that loaded this class ({@code Loader}) is used.</li>
      * <li>Try one last time with
      * {@code ClassLoader.getSystemResource(resource)}, that is is
@@ -139,7 +139,7 @@ public static URL getResource(final String resource, final ClassLoader defaultLo
      * <li>Search for {@code resource} using the thread context
      * class loader under Java2. If that fails, search for
      * {@code resource} using the class loader that loaded this
-     * class ({@code Loader}). Under JDK 1.1, only the the class
+     * class ({@code Loader}). Under JDK 1.1, only the class
      * loader that loaded this class ({@code Loader}) is used.</li>
      * <li>Try one last time with
      * {@code ClassLoader.getSystemResource(resource)}, that is is

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/ReflectionUtil.java
Patch:
@@ -180,6 +180,7 @@ public static <T> Constructor<T> getDefaultConstructor(final Class<T> clazz) {
      * @throws IllegalArgumentException if the given class is abstract, an interface, an array class, a primitive type,
      *                                  or void
      * @throws IllegalStateException    if access is denied to the constructor, or there are no default constructors
+     * @throws InternalException        wrapper of the underlying exception if checked
      */
     public static <T> T instantiate(final Class<T> clazz) {
         Objects.requireNonNull(clazz, "No class provided");

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/ReconfigureAppenderTest.java
Patch:
@@ -139,7 +139,7 @@ private void createAndAddAppender()
 			ConfigurationBuilderFactory.newConfigurationBuilder();
 
 		// All loggers must have a root logger. The default root logger logs ERRORs to the console.
-		// Override this with a root logger that does not log anywhere as we leave it up the the
+		// Override this with a root logger that does not log anywhere as we leave it up the
 		// appenders on the logger.
 		config_builder.add(config_builder.newRootLogger(Level.INFO));
 

File: log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/util/MapAccessor.java
Patch:
@@ -172,7 +172,7 @@ public boolean equals(final Object instance) {
         if (this == instance) {
             return true;
         }
-        if (instance == null || getClass() != instance.getClass()) {
+        if (!(instance instanceof MapAccessor)) {
             return false;
         }
         final MapAccessor that = (MapAccessor) instance;

File: log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/util/StringParameterParser.java
Patch:
@@ -58,7 +58,7 @@ private NullValue() {}
 
         @Override
         public String toString() {
-            return null;
+            return "null";
         }
 
     }

File: log4j-layout-template-json/src/test/java/org/apache/logging/log4j/layout/template/json/util/StringParameterParserTest.java
Patch:
@@ -378,7 +378,7 @@ void test_prematurely_ending_quoted_string_04() {
     void test_NullValue_toString() {
         final Map<String, Value> map = StringParameterParser.parse("a");
         final NullValue value = (NullValue) map.get("a");
-        Assertions.assertThat(value.toString()).isEqualTo(null);
+        Assertions.assertThat(value.toString()).isEqualTo("null");
     }
 
     @Test

File: log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/resolver/TemplateResolvers.java
Patch:
@@ -129,7 +129,7 @@ private static void appendAdditionalFields(
             for (final EventTemplateAdditionalField additionalField : additionalFields) {
                 final String additionalFieldKey = additionalField.getKey();
                 final Object additionalFieldValue;
-                switch (additionalField.getType()) {
+                switch (additionalField.getFormat()) {
                     case STRING:
                         additionalFieldValue = additionalField.getValue();
                         break;
@@ -145,8 +145,8 @@ private static void appendAdditionalFields(
                         break;
                     default: {
                         final String message = String.format(
-                                "unknown type %s for additional field: %s",
-                                additionalFieldKey, additionalField.getType());
+                                "unknown format %s for additional field: %s",
+                                additionalFieldKey, additionalField.getFormat());
                         throw new IllegalArgumentException(message);
                     }
                 }

File: log4j-layout-template-json/src/test/java/org/apache/logging/log4j/layout/template/json/JsonTemplateLayoutTest.java
Patch:
@@ -1359,7 +1359,7 @@ void test_event_template_additional_fields() {
                         .newBuilder()
                         .setKey("number")
                         .setValue("1")
-                        .setType(EventTemplateAdditionalField.Type.JSON)
+                        .setFormat(EventTemplateAdditionalField.Format.JSON)
                         .build(),
                 EventTemplateAdditionalField
                         .newBuilder()
@@ -1370,7 +1370,7 @@ void test_event_template_additional_fields() {
                         .newBuilder()
                         .setKey("level")
                         .setValue("{\"$resolver\": \"level\", \"field\": \"name\"}")
-                        .setType(EventTemplateAdditionalField.Type.JSON)
+                        .setFormat(EventTemplateAdditionalField.Format.JSON)
                         .build()
         };
         final JsonTemplateLayout layout = JsonTemplateLayout

File: log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/resolver/TemplateResolvers.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.logging.log4j.layout.template.json.JsonTemplateLayout.EventTemplateAdditionalField;
 import org.apache.logging.log4j.layout.template.json.util.JsonReader;
 import org.apache.logging.log4j.layout.template.json.util.JsonWriter;
-import org.apache.logging.log4j.message.ParameterizedMessage;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -404,7 +403,7 @@ private static <V, C extends TemplateResolverContext<V, C>> TemplateResolver<V>
     }
 
     private static <V> TemplateResolver<V> ofNumber(final Number number) {
-        final String numberString = ParameterizedMessage.deepToString(number);
+        final String numberString = String.valueOf(number);
         return (final V ignored, final JsonWriter jsonWriter) ->
                 jsonWriter.writeRawString(numberString);
     }

File: log4j-1.2-api/src/main/java/org/apache/log4j/xml/XmlConfiguration.java
Patch:
@@ -84,7 +84,7 @@ public class XmlConfiguration extends Log4j1Configuration {
     private static final String CONFIG_DEBUG_ATTR = "configDebug";
     private static final String INTERNAL_DEBUG_ATTR = "debug";
     private static final String EMPTY_STR = "";
-    private static final Class[] ONE_STRING_PARAM = new Class[] { String.class };
+    private static final Class<?>[] ONE_STRING_PARAM = new Class[] { String.class };
     private static final String dbfKey = "javax.xml.parsers.DocumentBuilderFactory";
     private static final String THROWABLE_RENDERER_TAG = "throwableRenderer";
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/status/StatusConfiguration.java
Patch:
@@ -43,7 +43,7 @@ public class StatusConfiguration {
     private static final Level DEFAULT_STATUS = Level.ERROR;
     private static final Verbosity DEFAULT_VERBOSITY = Verbosity.QUIET;
 
-    private final Collection<String> errorMessages = new LinkedBlockingQueue<String>();
+    private final Collection<String> errorMessages = new LinkedBlockingQueue<>();
     private final StatusLogger logger = StatusLogger.getLogger();
 
     private volatile boolean initialized;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/OptionConverter.java
Patch:
@@ -187,12 +187,11 @@ public static Level toLevel(String value, Level defaultValue) {
             + ":pri=[" + levelName + "]");
 
         try {
-            Class customLevel = Loader.loadClass(clazz);
+            Class<?> customLevel = Loader.loadClass(clazz);
 
             // get a ref to the specified class' static method
             // toLevel(String, org.apache.log4j.Level)
-            Class[] paramTypes = new Class[] { String.class, Level.class
-            };
+            Class<?>[] paramTypes = new Class[] { String.class, Level.class };
             java.lang.reflect.Method toLevelMethod =
                 customLevel.getMethod("toLevel", paramTypes);
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/QueueFullAbstractTest.java
Patch:
@@ -84,7 +84,7 @@ public String toString() {
         }
     }
 
-    static Stack transform(final List<LogEvent> logEvents) {
+    static Stack<String> transform(final List<LogEvent> logEvents) {
         final List<String> filtered = new ArrayList<>(logEvents.size());
         for (final LogEvent event : logEvents) {
             filtered.add(event.getMessage().getFormattedMessage());

File: log4j-core/src/test/java/org/apache/logging/log4j/core/lookup/MainLookupTest.java
Patch:
@@ -32,7 +32,7 @@ public class MainLookupTest {
     public void testMainArgs(){
         MainMapLookup.setMainArguments("--file", "foo.txt", "--verbose", "-x", "bar");
         String str ="${key} ${main:-1} ${main:0} ${main:1} ${main:2} ${main:3} ${main:4} ${main:\\--file} ${main:foo.txt} ${main:\\--verbose} ${main:\\-x} ${main:bar} ${main:\\--quiet:-true}";
-        Map<String, String> properties =  new HashMap<String, String>();
+        Map<String, String> properties =  new HashMap<>();
         properties.put("key", "value");
         properties.put("bar", "default_bar_value");
         Interpolator lookup = new Interpolator(properties);

File: log4j-core/src/test/java/org/apache/logging/log4j/test/appender/ListAppender.java
Patch:
@@ -199,12 +199,12 @@ public ListAppender clear() {
 
     /** Returns an immutable snapshot of captured log events */
     public List<LogEvent> getEvents() {
-        return Collections.<LogEvent>unmodifiableList(new ArrayList<LogEvent>(events));
+        return Collections.<LogEvent>unmodifiableList(new ArrayList<>(events));
     }
 
     /** Returns an immutable snapshot of captured messages */
     public List<String> getMessages() {
-        return Collections.<String>unmodifiableList(new ArrayList<String>(messages));
+        return Collections.<String>unmodifiableList(new ArrayList<>(messages));
     }
 
     /**
@@ -221,7 +221,7 @@ public List<String> getMessages(final int minSize, final long timeout, final Tim
 
     /** Returns an immutable snapshot of captured data */
     public List<byte[]> getData() {
-        return Collections.<byte[]>unmodifiableList(new ArrayList<byte[]>(data));
+        return Collections.<byte[]>unmodifiableList(new ArrayList<>(data));
     }
 
     public static ListAppender createAppender(final String name, final boolean newLine, final boolean raw,

File: log4j-jul/src/main/java/org/apache/logging/log4j/jul/LogManager.java
Patch:
@@ -97,10 +97,9 @@ public Logger getLogger(final String name) {
             } finally {
                 activeRequests.remove(name);
             }
-        } else {
-            LOGGER.warn("Recursive call to getLogger for {} ignored.", name);
-            return new NoOpLogger(name);
         }
+        LOGGER.warn("Recursive call to getLogger for {} ignored.", name);
+        return new NoOpLogger(name);
     }
 
     @Override

File: log4j-kubernetes/src/main/java/org/apache/logging/log4j/kubernetes/ContainerUtil.java
Patch:
@@ -53,9 +53,8 @@ public static String getContainerId() {
                         .findFirst().orElse(null);
                 LOGGER.debug("Found container id {}", id);
                 return id;
-            } else {
-                LOGGER.warn("Unable to access container information");
             }
+            LOGGER.warn("Unable to access container information");
         } catch (IOException ioe) {
             LOGGER.warn("Error obtaining container id: {}", ioe.getMessage());
         }

File: log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/util/DummyRecyclerFactory.java
Patch:
@@ -33,7 +33,7 @@ public static DummyRecyclerFactory getInstance() {
     public <V> Recycler<V> create(
             final Supplier<V> supplier,
             final Consumer<V> cleaner) {
-        return new DummyRecycler<V>(supplier);
+        return new DummyRecycler<>(supplier);
     }
 
 }

File: log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/util/QueueingRecyclerFactory.java
Patch:
@@ -34,7 +34,7 @@ public <V> Recycler<V> create(
             final Consumer<V> cleaner) {
         @SuppressWarnings("unchecked")
         final Queue<V> queue = (Queue<V>) queueSupplier.get();
-        return new QueueingRecycler<V>(supplier, cleaner, queue);
+        return new QueueingRecycler<>(supplier, cleaner, queue);
     }
 
 }

File: log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/ThreadsafeDateFormatBenchmark.java
Patch:
@@ -53,14 +53,14 @@ public class ThreadsafeDateFormatBenchmark {
     private final Date date = new Date();
     private final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss.SSS");
     private final SimpleDateFormat simpleDateFormat = new SimpleDateFormat("HH:mm:ss.SSS");
-    private final ThreadLocal<SimpleDateFormat> threadLocalSDFormat = new ThreadLocal<SimpleDateFormat>() {
+    private final ThreadLocal<SimpleDateFormat> threadLocalSDFormat = new ThreadLocal<>() {
         @Override
         protected SimpleDateFormat initialValue() {
             return new SimpleDateFormat("HH:mm:ss.SSS");
         }
     };
 
-    private final ThreadLocal<FormatterSimple> threadLocalCachedSDFormat = new ThreadLocal<FormatterSimple>() {
+    private final ThreadLocal<FormatterSimple> threadLocalCachedSDFormat = new ThreadLocal<>() {
         @Override
         protected FormatterSimple initialValue() {
             return new FormatterSimple();
@@ -113,7 +113,7 @@ private class FormatterFixedReuseBuffer {
         private final FixedDateFormat customFormat = FixedDateFormat.createIfSupported("HH:mm:ss.SSS");
         private long timestamp;
         private String formatted;
-        private final ThreadLocal<char[]> reusableBuffer = new ThreadLocal<char[]>() {
+        private final ThreadLocal<char[]> reusableBuffer = new ThreadLocal<>() {
             @Override
             protected char[] initialValue() {
                 return new char[255];

File: log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/TimeFormatBenchmark.java
Patch:
@@ -49,7 +49,7 @@
 @State(Scope.Benchmark)
 public class TimeFormatBenchmark {
 
-    ThreadLocal<SimpleDateFormat> threadLocalSimpleDateFormat = new ThreadLocal<SimpleDateFormat>() {
+    ThreadLocal<SimpleDateFormat> threadLocalSimpleDateFormat = new ThreadLocal<>() {
         @Override
         protected SimpleDateFormat initialValue() {
             return new SimpleDateFormat("HH:mm:ss.SSS");

File: log4j-spring-boot/src/main/java/org/apache/logging/log4j/spring/boot/Log4j2CloudConfigLoggingSystem.java
Patch:
@@ -199,9 +199,8 @@ private ConfigurationSource getConfigurationSource(URL url) throws IOException,
         try {
             if (file != null) {
                 return new ConfigurationSource(urlConnection.getInputStream(), FileUtils.fileFromUri(url.toURI()));
-            } else {
-                return new ConfigurationSource(urlConnection.getInputStream(), url, urlConnection.getLastModified());
             }
+            return new ConfigurationSource(urlConnection.getInputStream(), url, urlConnection.getLastModified());
         } catch (FileNotFoundException ex) {
             LOGGER.info("Unable to locate file {}, ignoring.", url.toString());
             return null;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/TestConfigurator.java
Patch:
@@ -261,14 +261,14 @@ public void testReconfiguration() throws Exception {
         }
         assertTrue(file.setLastModified(System.currentTimeMillis()), "setLastModified should have succeeded.");
         TimeUnit.SECONDS.sleep(config.getWatchManager().getIntervalSeconds()+1);
-        for (int i = 0; i < 17; ++i) {
+        for (int i = 0; i < 100; ++i) {
             logger.debug("Test message " + i);
         }
 
         // Sleep and check
-        Thread.sleep(50);
+        Thread.sleep(100);
         if (is(theInstance(config)).matches(ctx.getConfiguration())) {
-            Thread.sleep(500);
+            Thread.sleep(2000);
         }
         final Configuration newConfig = ctx.getConfiguration();
         assertThat("Configuration not reset", newConfig, is(not(theInstance(config))));

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/FailoverAppenderTest.java
Patch:
@@ -77,7 +77,7 @@ public void testRecovery() throws Exception {
         onceLogger.error("Second log message");
         events = app.getEvents();
         assertEquals(events.size(), 0, "Did not recover");
-        events = foApp.getEvents();
+        events = foApp.drainEvents();
         assertEquals(events.size(), 2, "Incorrect number of events in primary appender");
     }
 }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/FailoverFailedPrimaryAppenderTest.java
Patch:
@@ -84,7 +84,7 @@ public void testRecovery() throws Exception {
         onceLogger.error("Second log message");
         events = app.getEvents();
         assertEquals("Did not recover", events.size(), 0);
-        events = foApp.getEvents();
+        events = foApp.drainEvents();
         assertEquals("Incorrect number of events in primary appender", events.size(), 2);
     }
 }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/AppenderControlArraySetTest.java
Patch:
@@ -38,7 +38,7 @@ public void testInitiallyEmpty() throws Exception {
     }
 
     private AppenderControl createControl(final String name) {
-        final Appender appender = FailOnceAppender.createAppender(name);
+        final Appender appender = FailOnceAppender.createAppender(name, null);
         return new AppenderControl(appender, Level.INFO, null);
     }
 

File: log4j-api/src/test/java/org/apache/logging/log4j/LoggerTest.java
Patch:
@@ -67,12 +67,12 @@ public void builder() {
         logger.atWarn().withThrowable(new Throwable("This is a test")).log((Message) new SimpleMessage("Log4j rocks!"));
         assertEquals(3, results.size());
         assertThat("Incorrect message 1", results.get(0),
-                equalTo(" DEBUG org.apache.logging.log4j.LoggerTest.builder(LoggerTest.java:64) Hello"));
+                equalTo(" DEBUG org.apache.logging.log4j.LoggerTest.builder(LoggerTest.java:65) Hello"));
         assertThat("Incorrect message 2", results.get(1), equalTo("test ERROR Hello John"));
         assertThat("Incorrect message 3", results.get(2),
                 startsWith(" WARN Log4j rocks! java.lang.Throwable: This is a test"));
         assertThat("Throwable incorrect in message 3", results.get(2),
-                containsString("at org.apache.logging.log4j.LoggerTest.builder(LoggerTest.java:66)"));
+                containsString("at org.apache.logging.log4j.LoggerTest.builder(LoggerTest.java:67)"));
     }
 
     @Test

File: log4j-spring-boot/src/main/java/org/apache/logging/log4j/spring/boot/Log4j2CloudConfigLoggingSystem.java
Patch:
@@ -88,7 +88,7 @@ protected String[] getStandardConfigLocations() {
         PropertiesUtil props = new PropertiesUtil(new Properties());
         String location = props.getStringProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY);
         if (location != null) {
-            List<String> list = Arrays.asList(super.getStandardConfigLocations());
+            List<String> list = new ArrayList<>(Arrays.asList(super.getStandardConfigLocations()));
             list.add(location);
             locations = list.toArray(new String[0]);
         }

File: log4j-api/src/main/java/org/apache/logging/log4j/ThreadContext.java
Patch:
@@ -42,7 +42,8 @@
  * The ThreadContext allows applications to store information either in a Map or a Stack.
  * <p>
  * <b><em>The MDC is managed on a per thread basis</em></b>. To enable automatic inheritance of <i>copies</i> of the MDC
- * to newly created threads, enable the {@value DefaultThreadContextMap#INHERITABLE_MAP} Log4j system property.
+ * to newly created threads, enable the {@value org.apache.logging.log4j.spi.DefaultThreadContextMap#INHERITABLE_MAP}
+ * Log4j system property.
  * </p>
  * @see <a href="https://logging.apache.org/log4j/2.x/manual/thread-context.html">Thread Context Manual</a>
  */

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java
Patch:
@@ -195,7 +195,7 @@ protected OutputStream createOutputStream() throws IOException {
                 FileTime now = FileTime.fromMillis(System.currentTimeMillis());
                 Files.setAttribute(file.toPath(), "creationTime", now);
             } catch (Exception ex) {
-                LOGGER.warn("Unable to set current file tiem for {}", filename);
+                LOGGER.warn("Unable to set current file time for {}", filename);
             }
             writeHeader(fos);
         }

File: log4j-api/src/test/java/org/apache/logging/log4j/util/LegacyPropertiesCompatibilityTest.java
Patch:
@@ -39,7 +39,7 @@ public LegacyPropertiesCompatibilityTest(final CharSequence newName, final CharS
     public static Object[][] data() {
         return new Object[][]{
             {"log4j2.configurationFile", "log4j.configurationFile"},
-            {"log4j2.mergeFactory", "log4j.mergeFactory"},
+            {"log4j2.mergeStrategy", "log4j.mergeStrategy"},
             {"log4j2.contextSelector", "Log4jContextSelector"},
             {"log4j2.logEventFactory", "Log4jLogEventFactory"},
             {"log4j2.configurationFactory", "log4j.configurationFactory"},

File: log4j-api/src/main/java/org/apache/logging/log4j/util/StackLocatorUtil.java
Patch:
@@ -27,7 +27,7 @@
  */
 public final class StackLocatorUtil {
     private static StackLocator stackLocator = null;
-    private static volatile boolean errorLogged = false;
+    private static volatile boolean errorLogged;
 
     static {
         stackLocator = StackLocator.getInstance();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java
Patch:
@@ -89,7 +89,7 @@ public class LoggerContext extends AbstractLifeCycle
 
     private final LoggerRegistry<Logger> loggerRegistry = new LoggerRegistry<>();
     private final CopyOnWriteArrayList<PropertyChangeListener> propertyChangeListeners = new CopyOnWriteArrayList<>();
-    private volatile List<LoggerContextShutdownAware> listeners = null;
+    private volatile List<LoggerContextShutdownAware> listeners;
 
     /**
      * The Configuration is volatile to guarantee that initialization of the Configuration has completed before the

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java
Patch:
@@ -379,7 +379,7 @@ public AsyncAppender build() {
      */
     private class AsyncThread extends Log4jThread {
 
-        private volatile boolean shutdown = false;
+        private volatile boolean shutdown;
         private final List<AppenderControl> appenders;
         private final BlockingQueue<LogEvent> queue;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FailoverAppender.java
Patch:
@@ -60,7 +60,7 @@ public final class FailoverAppender extends AbstractAppender {
 
     private final long intervalNanos;
 
-    private volatile long nextCheckNanos = 0;
+    private volatile long nextCheckNanos;
 
     private FailoverAppender(final String name, final Filter filter, final String primary, final String[] failovers,
             final int intervalMillis, final Configuration config, final boolean ignoreExceptions,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/JdbcDatabaseManager.java
Patch:
@@ -162,7 +162,7 @@ public JdbcDatabaseManager createManager(final String name, final FactoryData da
     private final class Reconnector extends Log4jThread {
 
         private final CountDownLatch latch = new CountDownLatch(1);
-        private volatile boolean shutdown = false;
+        private volatile boolean shutdown;
 
         private Reconnector() {
             super("JdbcDatabaseManager-Reconnector");

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/JmsManager.java
Patch:
@@ -141,7 +141,7 @@ private class Reconnector extends Log4jThread {
 
         private final CountDownLatch latch = new CountDownLatch(1);
 
-        private volatile boolean shutdown = false;
+        private volatile boolean shutdown;
 
         private final Object owner;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java
Patch:
@@ -67,8 +67,8 @@ public class RollingFileManager extends FileManager {
     private final Log4jThreadFactory threadFactory = Log4jThreadFactory.createThreadFactory("RollingFileManager");
     private volatile TriggeringPolicy triggeringPolicy;
     private volatile RolloverStrategy rolloverStrategy;
-    private volatile boolean renameEmptyFiles = false;
-    private volatile boolean initialized = false;
+    private volatile boolean renameEmptyFiles;
+    private volatile boolean initialized;
     private volatile String fileName;
     private final boolean directWrite;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java
Patch:
@@ -435,7 +435,7 @@ private static abstract class RouteAppenderControl extends AppenderControl {
 
     private static final class CreatedRouteAppenderControl extends RouteAppenderControl {
 
-        private volatile boolean pendingDeletion = false;
+        private volatile boolean pendingDeletion;
         private final AtomicInteger depth = new AtomicInteger();
 
         CreatedRouteAppenderControl(Appender appender) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java
Patch:
@@ -185,7 +185,7 @@ public void translateTo(final Log4jEventWrapper ringBufferElement, final long se
     private long backgroundThreadId; // LOG4J2-471
     private EventFactory<Log4jEventWrapper> factory;
     private EventTranslatorTwoArg<Log4jEventWrapper, LogEvent, AsyncLoggerConfig> translator;
-    private volatile boolean alreadyLoggedWarning = false;
+    private volatile boolean alreadyLoggedWarning;
 
     private final Object queueFullEnqueueLock = new Object();
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
Patch:
@@ -138,7 +138,7 @@ public ConfigurationFactory() {
 
     private static final String OVERRIDE_PARAM = "override";
 
-    private static volatile List<ConfigurationFactory> factories = null;
+    private static volatile List<ConfigurationFactory> factories;
 
     private static ConfigurationFactory configFactory = new Factory();
 
@@ -149,7 +149,7 @@ public ConfigurationFactory() {
     private static final String HTTPS = "https";
     private static final String HTTP = "http";
 
-    private static volatile AuthorizationProvider authorizationProvider = null;
+    private static volatile AuthorizationProvider authorizationProvider;
 
     /**
      * Returns the ConfigurationFactory.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationSource.java
Patch:
@@ -61,7 +61,7 @@ public class ConfigurationSource {
     private final String location;
     private final InputStream stream;
     private volatile byte[] data;
-    private volatile Source source = null;
+    private volatile Source source;
     private final long lastModified;
     // Set when the configuration has been updated so reset can use it for the next lastModified timestamp.
     private volatile long modifiedMillis;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/LockingReliabilityStrategy.java
Patch:
@@ -34,7 +34,7 @@
 public class LockingReliabilityStrategy implements ReliabilityStrategy, LocationAwareReliabilityStrategy {
     private final LoggerConfig loggerConfig;
     private final ReadWriteLock reconfigureLock = new ReentrantReadWriteLock();
-    private volatile boolean isStopping = false;
+    private volatile boolean isStopping;
 
     public LockingReliabilityStrategy(final LoggerConfig loggerConfig) {
         this.loggerConfig = Objects.requireNonNull(loggerConfig, "loggerConfig was null");

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/status/StatusConfiguration.java
Patch:
@@ -46,7 +46,7 @@ public class StatusConfiguration {
     private final Collection<String> errorMessages = new LinkedBlockingQueue<String>();
     private final StatusLogger logger = StatusLogger.getLogger();
 
-    private volatile boolean initialized = false;
+    private volatile boolean initialized;
 
     private PrintStream destination = DEFAULT_STREAM;
     private Level status = DEFAULT_STATUS;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/WatcherFactory.java
Patch:
@@ -39,7 +39,7 @@ public class WatcherFactory {
     private static Logger LOGGER = StatusLogger.getLogger();
     private static PluginManager pluginManager = new PluginManager(Watcher.CATEGORY);
 
-    private static volatile WatcherFactory factory = null;
+    private static volatile WatcherFactory factory;
 
     private final Map<String, PluginType<?>> plugins;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FixedDateFormat.java
Patch:
@@ -388,8 +388,8 @@ private int write(final int offset, final char[] buffer, int pos) {
     private final int millisSeparatorLength;
     private final FixedTimeZoneFormat fixedTimeZoneFormat;
 
-    private volatile long midnightToday = 0;
-    private volatile long midnightTomorrow = 0;
+    private volatile long midnightToday;
+    private volatile long midnightTomorrow;
     private final int[] dstOffsets = new int[25];
 
     // cachedDate does not need to be volatile because

File: log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java
Patch:
@@ -63,7 +63,7 @@ public final class FlumeAppender extends AbstractAppender implements FlumeEventF
     private final FlumeEventFactory factory;
 
     private Timer timer = new Timer("FlumeEvent", 5000);
-    private volatile long count = 0;
+    private volatile long count;
 
     /**
      * Which Manager will be used by the appender instance.

File: log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAvroManager.java
Patch:
@@ -50,7 +50,7 @@ public class FlumeAvroManager extends AbstractFlumeManager {
 
     private final int current = 0;
 
-    private volatile RpcClient rpcClient = null;
+    private volatile RpcClient rpcClient;
 
     private BatchEvent batchEvent = new BatchEvent();
     private long nextSend = 0;

File: log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java
Patch:
@@ -469,7 +469,7 @@ public FlumePersistentManager createManager(final String name, final FactoryData
      * Thread that sends data to Flume and pulls it from Berkeley DB.
      */
     private static class WriterThread extends Log4jThread  {
-        private volatile boolean shutdown = false;
+        private volatile boolean shutdown;
         private final Database database;
         private final Environment environment;
         private final FlumePersistentManager manager;

File: log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/ClocksBenchmark.java
Patch:
@@ -152,7 +152,7 @@ private static final class OldCachedClock implements Clock {
         private static volatile OldCachedClock instance;
         private static final Object INSTANCE_LOCK = new Object();
         private volatile long millis = System.currentTimeMillis();
-        private volatile short count = 0;
+        private volatile short count;
 
         private OldCachedClock() {
             final Thread updater = new Thread(new Runnable() {

File: log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/LoggerConfigBenchmark.java
Patch:
@@ -53,7 +53,7 @@
 public class LoggerConfigBenchmark {
 
     private final CopyOnWriteArraySet<AppenderControl> appenderSet = new CopyOnWriteArraySet<>();
-    private volatile Filter filter = null;
+    private volatile Filter filter;
     private final boolean additive = true;
     private final boolean includeLocation = true;
     private LoggerConfig parent;

File: log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/TimeFormatBenchmark.java
Patch:
@@ -57,8 +57,8 @@ protected SimpleDateFormat initialValue() {
     };
     FastDateFormat fastDateFormat = FastDateFormat.getInstance("HH:mm:ss.SSS");
     FixedDateFormat fixedDateFormat = FixedDateFormat.createIfSupported(new String[]{"ABSOLUTE"});
-    volatile long midnightToday = 0;
-    volatile long midnightTomorrow = 0;
+    volatile long midnightToday;
+    volatile long midnightTomorrow;
 
     @State(Scope.Thread)
     public static class BufferState {

File: log4j-samples/log4j-samples-flume-common/src/main/java/org/apache/logging/log4j/samples/app/LoggingController.java
Patch:
@@ -45,7 +45,7 @@ public class LoggingController {
      */
     private static Logger logger = LogManager.getLogger(LoggingController.class);
 
-    private volatile boolean generateLog = false;
+    private volatile boolean generateLog;
     private final Random ran = new Random();
 
     private List<AuditEvent> events;

File: log4j-1.2-api/src/main/java/org/apache/log4j/config/PropertiesConfiguration.java
Patch:
@@ -389,7 +389,7 @@ private void parseLogger(Properties props, LoggerConfig logger, String optionKey
                         logger.getName());
                 logger.addAppender(getAppender(appenderName), null, null);
             } else {
-                LOGGER.debug("Appender named [{}}] not found.", appenderName);
+                LOGGER.debug("Appender named [{}] not found.", appenderName);
             }
         }
     }

File: log4j-1.2-api/src/main/java/org/apache/log4j/xml/XmlConfiguration.java
Patch:
@@ -382,7 +382,7 @@ private Appender buildAppender(String className, Element appenderElement) {
                                     appender.getName());
                             aa.addAppender(child);
                         } else {
-                            LOGGER.error("Requesting attachment of appender named [{}] to appender named [{}}]"
+                            LOGGER.error("Requesting attachment of appender named [{}] to appender named [{}]"
                                             + "which does not implement org.apache.log4j.spi.AppenderAttachable.",
                                     refName, appender.getName());
                         }
@@ -537,7 +537,7 @@ private void parseChildrenOfLoggerElement(Element catElement, LoggerConfig logge
                                 loggerConfig.getName());
                         loggerConfig.addAppender(getAppender(refName), null, null);
                     } else {
-                        LOGGER.debug("Appender named [{}}] not found.", refName);
+                        LOGGER.debug("Appender named [{}] not found.", refName);
                     }
                     break;
                 }
@@ -614,7 +614,7 @@ private void parseLevel(Element element, LoggerConfig logger, boolean isRoot) {
         }
 
         String priStr = subst(element.getAttribute(VALUE_ATTR));
-        LOGGER.debug("Level value for {} is [{}}].", catName, priStr);
+        LOGGER.debug("Level value for {} is [{}].", catName, priStr);
 
         if (INHERITED.equalsIgnoreCase(priStr) || NULL.equalsIgnoreCase(priStr)) {
             if (isRoot) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java
Patch:
@@ -228,7 +228,7 @@ private AppenderComponentBuilder createAppender(final String key, final Properti
     private FilterComponentBuilder createFilter(final String key, final Properties properties) {
         final String type = (String) properties.remove(CONFIG_TYPE);
         if (Strings.isEmpty(type)) {
-            throw new ConfigurationException("No type attribute provided for Appender " + key);
+            throw new ConfigurationException("No type attribute provided for Filter " + key);
         }
         final String onMatch = (String) properties.remove(AbstractFilterBuilder.ATTR_ON_MATCH);
         final String onMismatch = (String) properties.remove(AbstractFilterBuilder.ATTR_ON_MISMATCH);

File: log4j-mongodb2/src/test/java/org/apache/logging/log4j/mongodb2/MongoDbMapMessageTest.java
Patch:
@@ -55,7 +55,7 @@ public class MongoDbMapMessageTest {
     @Test
     public void test() {
         final Logger logger = LogManager.getLogger();
-        final MapMessage mapMessage = new MapMessage();
+        final MapMessage<?, Object> mapMessage = new MapMessage<>();
         mapMessage.with("SomeName", "SomeValue");
         mapMessage.with("SomeInt", 1);
         logger.info(mapMessage);

File: log4j-mongodb3/src/test/java/org/apache/logging/log4j/mongodb3/MongoDbMapMessageTest.java
Patch:
@@ -56,7 +56,7 @@ public class MongoDbMapMessageTest {
     @Test
     public void test() {
         final Logger logger = LogManager.getLogger();
-        final MapMessage mapMessage = new MapMessage();
+        final MapMessage<?, Object> mapMessage = new MapMessage<>();
         mapMessage.with("SomeName", "SomeValue");
         mapMessage.with("SomeInt", 1);
         logger.info(mapMessage);

File: log4j-mongodb2/src/test/java/org/apache/logging/log4j/mongodb2/MongoDbAuthFailureTest.java
Patch:
@@ -41,7 +41,7 @@
  */
 @Ignore("TODO Set up the log4j user in MongoDB")
 @Category(Appenders.MongoDb.class)
-public class MongoDbAuthFailureTestJava8 {
+public class MongoDbAuthFailureTest {
 
     private static LoggerContextRule loggerContextTestRule = new LoggerContextRule("log4j2-mongodb-auth-failure.xml");
 

File: log4j-mongodb2/src/test/java/org/apache/logging/log4j/mongodb2/MongoDbCappedTest.java
Patch:
@@ -38,7 +38,7 @@
  * This class name does NOT end in "Test" in order to only be picked up by {@link Java8Test}.
  */
 @Category(Appenders.MongoDb.class)
-public class MongoDbCappedTestJava8 {
+public class MongoDbCappedTest {
 
     private static LoggerContextRule loggerContextTestRule = new LoggerContextRule("log4j2-mongodb-capped.xml");
 

File: log4j-mongodb2/src/test/java/org/apache/logging/log4j/mongodb2/MongoDbMapMessageTest.java
Patch:
@@ -39,7 +39,7 @@
  * This class name does NOT end in "Test" in order to only be picked up by {@link Java8Test}.
  */
 @Category(Appenders.MongoDb.class)
-public class MongoDbMapMessageTestJava8 {
+public class MongoDbMapMessageTest {
 
     private static LoggerContextRule loggerContextTestRule = new LoggerContextRule("log4j2-mongodb-map-message.xml");
 

File: log4j-mongodb2/src/test/java/org/apache/logging/log4j/mongodb2/MongoDbTest.java
Patch:
@@ -38,7 +38,7 @@
  * This class name does NOT end in "Test" in order to only be picked up by {@link Java8Test}.
  */
 @Category(Appenders.MongoDb.class)
-public class MongoDbTestJava8 {
+public class MongoDbTest {
 
     private static LoggerContextRule loggerContextTestRule = new LoggerContextRule("log4j2-mongodb.xml");
 

File: log4j-mongodb3/src/test/java/org/apache/logging/log4j/mongodb3/MongoDbAuthFailureTest.java
Patch:
@@ -42,15 +42,15 @@
  */
 @Ignore("TODO Set up the log4j user in MongoDB")
 @Category(Appenders.MongoDb.class)
-public class MongoDbAuthFailureTestJava8 {
+public class MongoDbAuthFailureTest {
 
     private static LoggerContextRule loggerContextTestRule = new LoggerContextRule("log4j2-mongodb-auth-failure.xml");
 
     private static final AvailablePortSystemPropertyTestRule mongoDbPortTestRule = AvailablePortSystemPropertyTestRule
             .create(TestConstants.SYS_PROP_NAME_PORT);
 
     private static final MongoDbTestRule mongoDbTestRule = new MongoDbTestRule(mongoDbPortTestRule.getName(),
-            MongoDbAuthFailureTestJava8.class, LoggingTarget.NULL);
+            MongoDbAuthFailureTest.class, LoggingTarget.NULL);
 
     @ClassRule
     public static RuleChain ruleChain = RuleChainFactory.create(mongoDbPortTestRule, mongoDbTestRule,

File: log4j-mongodb3/src/test/java/org/apache/logging/log4j/mongodb3/MongoDbCappedTest.java
Patch:
@@ -38,15 +38,15 @@
  * This class name does NOT end in "Test" in order to only be picked up by {@link Java8Test}.
  */
 @Category(Appenders.MongoDb.class)
-public class MongoDbCappedTestJava8 {
+public class MongoDbCappedTest {
 
     private static LoggerContextRule loggerContextTestRule = new LoggerContextRule("log4j2-mongodb-capped.xml");
 
     private static final AvailablePortSystemPropertyTestRule mongoDbPortTestRule = AvailablePortSystemPropertyTestRule
             .create(TestConstants.SYS_PROP_NAME_PORT);
 
     private static final MongoDbTestRule mongoDbTestRule = new MongoDbTestRule(mongoDbPortTestRule.getName(),
-            MongoDbCappedTestJava8.class, LoggingTarget.NULL);
+            MongoDbCappedTest.class, LoggingTarget.NULL);
 
     @ClassRule
     public static RuleChain ruleChain = RuleChainFactory.create(mongoDbPortTestRule, mongoDbTestRule,

File: log4j-mongodb3/src/test/java/org/apache/logging/log4j/mongodb3/MongoDbMapMessageTest.java
Patch:
@@ -39,15 +39,15 @@
  * This class name does NOT end in "Test" in order to only be picked up by {@link Java8Test}.
  */
 @Category(Appenders.MongoDb.class)
-public class MongoDbMapMessageTestJava8 {
+public class MongoDbMapMessageTest {
 
     private static LoggerContextRule loggerContextTestRule = new LoggerContextRule("log4j2-mongodb-map-message.xml");
 
     private static final AvailablePortSystemPropertyTestRule mongoDbPortTestRule = AvailablePortSystemPropertyTestRule
             .create(TestConstants.SYS_PROP_NAME_PORT);
 
     private static final MongoDbTestRule mongoDbTestRule = new MongoDbTestRule(mongoDbPortTestRule.getName(),
-            MongoDbMapMessageTestJava8.class, LoggingTarget.NULL);
+            MongoDbMapMessageTest.class, LoggingTarget.NULL);
 
     @ClassRule
     public static RuleChain ruleChain = RuleChainFactory.create(mongoDbPortTestRule, mongoDbTestRule,

File: log4j-mongodb3/src/test/java/org/apache/logging/log4j/mongodb3/MongoDbTest.java
Patch:
@@ -38,15 +38,15 @@
  * This class name does NOT end in "Test" in order to only be picked up by {@link Java8Test}.
  */
 @Category(Appenders.MongoDb.class)
-public class MongoDbTestJava8 {
+public class MongoDbTest {
 
     private static LoggerContextRule loggerContextTestRule = new LoggerContextRule("log4j2-mongodb.xml");
 
     private static final AvailablePortSystemPropertyTestRule mongoDbPortTestRule = AvailablePortSystemPropertyTestRule
             .create(TestConstants.SYS_PROP_NAME_PORT);
 
     private static final MongoDbTestRule mongoDbTestRule = new MongoDbTestRule(mongoDbPortTestRule.getName(),
-            MongoDbTestJava8.class, LoggingTarget.NULL);
+            MongoDbTest.class, LoggingTarget.NULL);
 
     @ClassRule
     public static RuleChain ruleChain = RuleChainFactory.create(mongoDbPortTestRule, mongoDbTestRule,

File: log4j-mongodb3/src/test/java/org/apache/logging/log4j/mongodb3/MongoDbTestTestRuleTest.java
Patch:
@@ -37,13 +37,13 @@
  * The test framework {@code de.flapdoodle.embed.mongo} requires Java 8.
  * </p>
  */
-public class MongoDbTestTestRuleTestJava8 {
+public class MongoDbTestTestRuleTest {
 
     private static final AvailablePortSystemPropertyTestRule mongoDbPortTestRule = AvailablePortSystemPropertyTestRule
             .create(TestConstants.SYS_PROP_NAME_PORT);
 
     private static final MongoDbTestRule mongoDbTestRule = new MongoDbTestRule(mongoDbPortTestRule.getName(),
-            MongoDbTestTestRuleTestJava8.class, LoggingTarget.NULL);
+            MongoDbTestTestRuleTest.class, LoggingTarget.NULL);
 
     @ClassRule
     public static RuleChain mongoDbChain = RuleChainFactory.create(mongoDbPortTestRule, mongoDbTestRule);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThreadContextDataInjector.java
Patch:
@@ -208,7 +208,7 @@ public StringMap injectContextData(final List<Property> props, final StringMap i
                 // this will replace the LogEvent's context data with the returned instance
                 return providers.get(0).supplyStringMap();
             }
-            int count = props.size();
+            int count = props == null ? 0 : props.size();
             StringMap[] maps = new StringMap[providers.size()];
             for (int i = 0; i < providers.size(); ++i) {
                 maps[i] = providers.get(i).supplyStringMap();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/ScriptPatternSelector.java
Patch:
@@ -39,7 +39,9 @@
 import org.apache.logging.log4j.status.StatusLogger;
 
 /**
- * Selects the pattern to use based on the Marker in the LogEvent.
+ * Selects the pattern to use based on the result of executing a Script. The returned value will be used as the "key"
+ * to choose between one of the configured patterns. If no key is returned or there is no match the default
+ * pattern will be used.
  */
 @Plugin(name = "ScriptPatternSelector", category = Node.CATEGORY, elementType = PatternSelector.ELEMENT_TYPE, printObject = true)
 public class ScriptPatternSelector implements PatternSelector, LocationAware {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/SslConfiguration.java
Patch:
@@ -251,7 +251,7 @@ public static SslConfiguration createSSLConfiguration(
         @PluginAttribute("protocol") final String protocol,
         @PluginElement("KeyStore") final KeyStoreConfiguration keyStoreConfig,
         @PluginElement("TrustStore") final TrustStoreConfiguration trustStoreConfig,
-        @PluginElement("verifyHostName") final boolean verifyHostName) {
+        @PluginAttribute("verifyHostName") final boolean verifyHostName) {
         // @formatter:on
         return new SslConfiguration(protocol, keyStoreConfig, trustStoreConfig, verifyHostName);
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/FileSize.java
Patch:
@@ -61,7 +61,7 @@ public static long parse(final String string, final long defaultValue) {
         if (matcher.matches()) {
             try {
                 // Get double precision value
-                final long value = NumberFormat.getNumberInstance(Locale.getDefault()).parse(
+                final long value = NumberFormat.getNumberInstance(Locale.ROOT).parse(
                     matcher.group(1)).longValue();
 
                 // Get units specified

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
+
 import javax.xml.stream.XMLOutputFactory;
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamWriter;
@@ -382,7 +383,7 @@ public LoggerComponentBuilder newAsyncLogger(final String name, final String lev
 
     @Override
     public LoggerComponentBuilder newAsyncLogger(final String name, final String level, final boolean includeLocation) {
-        return new DefaultLoggerComponentBuilder(this, name, level, "AsyncLogger");
+        return new DefaultLoggerComponentBuilder(this, name, level, "AsyncLogger", includeLocation);
     }
 
     @Override

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/JdbcDatabaseManager.java
Patch:
@@ -853,7 +853,7 @@ protected void writeInternal(final LogEvent event, final Serializable serializab
                 logger().debug("addBatch for {}", this.statement);
                 this.statement.addBatch();
             } else {
-                int executeUpdate = this.statement.executeUpdate();
+                final int executeUpdate = this.statement.executeUpdate();
                 logger().debug("executeUpdate = {} for {}", executeUpdate, this.statement);
                 if (executeUpdate == 0) {
                     throw new AppenderLoggingException(

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/LogEventJsonMixIn.java
Patch:
@@ -41,7 +41,7 @@
 @JsonRootName(XmlConstants.ELT_EVENT)
 @JacksonXmlRootElement(namespace = XmlConstants.XML_NAMESPACE, localName = XmlConstants.ELT_EVENT)
 @JsonFilter("org.apache.logging.log4j.core.impl.Log4jLogEvent")
-@JsonPropertyOrder({ "timeMillis", XmlConstants.ELT_INSTANT, "threadName", "level", "loggerName", "marker", "message", "thrown", XmlConstants.ELT_CONTEXT_MAP,
+@JsonPropertyOrder({ "timeMillis", JsonConstants.ELT_INSTANT, "threadName", "level", "loggerName", "marker", "message", "thrown", XmlConstants.ELT_CONTEXT_MAP,
         JsonConstants.ELT_CONTEXT_STACK, "loggerFQCN", "Source", "endOfBatch" })
 abstract class LogEventJsonMixIn implements LogEvent {
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/layout/ConcurrentLoggingWithJsonLayoutTest.java
Patch:
@@ -85,7 +85,7 @@ public void uncaughtException(final Thread t, final Throwable e) {
         if (new File(PATH).exists()) {
             final List<String> lines = Files.readAllLines(new File(PATH).toPath(), Charset.defaultCharset());
             for (final String line : lines) {
-                assertThat(line, startsWith("{\"thread\":"));
+                assertThat(line, containsString("\"thread\":"));
                 assertThat(line, endsWith("\"threadPriority\":5}"));
             }
         }

File: log4j-1.2-api/src/main/java/org/apache/log4j/bridge/AppenderAdapter.java
Patch:
@@ -38,6 +38,7 @@ public class AppenderAdapter {
 
     /**
      * Constructor.
+     * @param appender The Appender to wrap.
      */
     public AppenderAdapter(Appender appender) {
         this.appender = appender;

File: log4j-1.2-api/src/main/java/org/apache/log4j/bridge/LogEventAdapter.java
Patch:
@@ -48,6 +48,7 @@ public LogEventAdapter(LogEvent event) {
     /**
      * Returns the time when the application started, in milliseconds
      * elapsed since 01.01.1970.
+     * @return the time when the JVM started.
      */
     public static long getStartTime() {
         return JVM_START_TIME;

File: log4j-1.2-api/src/main/java/org/apache/log4j/helpers/AppenderAttachableImpl.java
Patch:
@@ -71,6 +71,8 @@ public void removeAppender(String name) {
 
     /**
      * Call the <code>doAppend</code> method on all attached appenders.
+     * @param event The event to log.
+     * @return The number of appenders.
      */
     public int appendLoopOnAppenders(LoggingEvent event) {
         for (Appender appender : appenders.values()) {

File: log4j-1.2-api/src/main/java/org/apache/log4j/rewrite/PropertyRewritePolicy.java
Patch:
@@ -50,7 +50,7 @@ public PropertyRewritePolicy() {
      * <p>
      * Form: propname1=propvalue1,propname2=propvalue2
      *
-     * @param props
+     * @param props The properties.
      */
     public void setProperties(String props) {
         Map hashTable = new HashMap();

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java
Patch:
@@ -2857,7 +2857,7 @@ public LogBuilder atDebug() {
         return atLevel(Level.DEBUG);
     }
     /**
-     * Constuct an informational log event.
+     * Construct an informational log event.
      * @return a LogBuilder.
      * @since 2.13.0
      */
@@ -2875,7 +2875,7 @@ public LogBuilder atWarn() {
         return atLevel(Level.WARN);
     }
     /**
-     * Constuct an error log event.
+     * Construct an error log event.
      * @return a LogBuilder.
      * @since 2.13.0
      */
@@ -2884,7 +2884,7 @@ public LogBuilder atError() {
         return atLevel(Level.ERROR);
     }
     /**
-     * Constuct a fatal log event.
+     * Construct a fatal log event.
      * @return a LogBuilder.
      * @since 2.13.0
      */

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/MulticastDnsAdvertiser.java
Patch:
@@ -189,7 +189,7 @@ private static Object initializeJmDns() {
         try {
             jmDNSClass = LoaderUtil.loadClass("javax.jmdns.JmDNS");
             serviceInfoClass = LoaderUtil.loadClass("javax.jmdns.ServiceInfo");
-            // if version 3 is available, use it to constuct a serviceInfo instance, otherwise support the version1 API
+            // if version 3 is available, use it to construct a serviceInfo instance, otherwise support the version1 API
             boolean isVersion3 = false;
             try {
                 // create method is in version 3, not version 1

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderOnStartupTest.java
Patch:
@@ -97,6 +97,8 @@ public static void afterClass() throws Exception {
                 List<String> lines = Files.lines(path).collect(Collectors.toList());
                 assertTrue("No header present for " + path.toFile().getName(), lines.get(0).startsWith("<!DOCTYPE HTML"));
                 Files.delete(path);
+                System.out.println(path.toFile().toString() + " was deleted");
+                System.out.println(path.toFile().toString() + (path.toFile().exists() ? " exists" : " does not exist"));
             }
             assertTrue("File did not roll", rolled);
         }

File: log4j-web/src/main/java/org/apache/logging/log4j/web/Log4jServletContainerInitializer.java
Patch:
@@ -34,14 +34,14 @@
  */
 public class Log4jServletContainerInitializer implements ServletContainerInitializer {
 
-    private static final Logger LOGGER = StatusLogger.getLogger();
-
     @Override
     public void onStartup(final Set<Class<?>> classes, final ServletContext servletContext) throws ServletException {
         if (servletContext.getMajorVersion() > 2 && servletContext.getEffectiveMajorVersion() > 2 &&
                 !"true".equalsIgnoreCase(servletContext.getInitParameter(
                         Log4jWebSupport.IS_LOG4J_AUTO_INITIALIZATION_DISABLED
                 ))) {
+            final Logger LOGGER = StatusLogger.getLogger();
+
             LOGGER.debug("Log4jServletContainerInitializer starting up Log4j in Servlet 3.0+ environment.");
 
             final FilterRegistration.Dynamic filter =

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java
Patch:
@@ -164,6 +164,7 @@ public boolean hasOutputStream() {
     protected OutputStream getOutputStream() throws IOException {
         if (outputStream == null) {
             outputStream = createOutputStream();
+            setOutputStream(outputStream); // Needed so the header will be written
         }
         return outputStream;
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java
Patch:
@@ -142,7 +142,7 @@ protected RollingFileManager(final LoggerContext loggerContext, final String fil
             final String filePermissions, final String fileOwner, final String fileGroup,
             final boolean writeHeader, final ByteBuffer buffer) {
         super(loggerContext, fileName != null ? fileName : pattern, os, append, false, createOnDemand,
-			advertiseURI, layout, filePermissions, fileOwner, fileGroup, writeHeader, buffer);
+			advertiseURI, layout, filePermissions, fileOwner, fileGroup, false, buffer);
         this.size = size;
         this.initialTime = initialTime;
         this.triggeringPolicy = triggeringPolicy;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingFileAppender.java
Patch:
@@ -138,7 +138,7 @@ public RollingFileAppender build() {
                                         .build();
                 }
             } else if (fileName == null && !(strategy instanceof DirectFileRolloverStrategy)) {
-                LOGGER.error("RollingFileAppender '{}': When no file name is provided a DirectFilenameRolloverStrategy must be configured");
+                LOGGER.error("RollingFileAppender '{}': When no file name is provided a DirectFilenameRolloverStrategy must be configured", getName());
                 return null;
             }
 

File: log4j-api/src/main/java/org/apache/logging/log4j/internal/DefaultLogBuilder.java
Patch:
@@ -34,6 +34,8 @@
  * Collects data for a log event and then logs it. This class should be considered private.
  */
 public class DefaultLogBuilder implements LogBuilder, Serializable {
+
+    private static final long serialVersionUID = 8851553895299192531L;
     private static Message EMPTY_MESSAGE = new SimpleMessage("");
     private static final String FQCN = DefaultLogBuilder.class.getName();
     private static final Logger LOGGER = StatusLogger.getLogger();

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManagerTest.java
Patch:
@@ -66,11 +66,11 @@ public RolloverDescription rollover(RollingFileManager manager) throws SecurityE
             file.deleteOnExit();
 
             final RollingFileAppender appender = RollingFileAppender.newBuilder()
-                    .setFilePattern("FilePattern")
+                    .withFilePattern("FilePattern")
                     .setName("RollingFileAppender")
                     .setConfiguration(config)
-                    .setStrategy(new CustomDirectFileRolloverStrategy(file, config.getStrSubstitutor()))
-                    .setPolicy(new SizeBasedTriggeringPolicy(100))
+                    .withStrategy(new CustomDirectFileRolloverStrategy(file, config.getStrSubstitutor()))
+                    .withPolicy(new SizeBasedTriggeringPolicy(100))
                     .build();
 
             Assert.assertNotNull(appender);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java
Patch:
@@ -150,7 +150,7 @@ protected RollingFileManager(final LoggerContext loggerContext, final String fil
         this.patternProcessor = new PatternProcessor(pattern);
         this.patternProcessor.setPrevFileTime(initialTime);
         this.fileName = fileName;
-        this.directWrite = rolloverStrategy instanceof DirectWriteRolloverStrategy;
+        this.directWrite = rolloverStrategy instanceof DirectFileRolloverStrategy;
         this.fileExtension = FileExtension.lookupForFile(pattern);
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationSource.java
Patch:
@@ -149,6 +149,9 @@ private ConfigurationSource(final byte[] data, final URL url, long lastModified)
         this.url = url;
         this.location = null;
         this.lastModified = lastModified;
+        if ( url == null ) {
+        	this.data = data;
+        }
     }
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/Routes.java
Patch:
@@ -66,7 +66,7 @@ public Routes build() {
                 LOGGER.error("No Routes configured.");
                 return null;
             }
-            if (patternScript != null && pattern != null) {
+            if ((patternScript != null && pattern != null) || (patternScript == null && pattern == null)) {
                 LOGGER.warn("In a Routes element, you must configure either a Script element or a pattern attribute.");
             }
             if (patternScript != null) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java
Patch:
@@ -224,7 +224,8 @@ public void append(LogEvent event) {
             event = rewritePolicy.rewrite(event);
         }
         final String pattern = routes.getPattern(event, scriptStaticVariables);
-        final String key = pattern != null ? configuration.getStrSubstitutor().replace(event, pattern) : defaultRoute.getKey();
+        final String key = pattern != null ? configuration.getStrSubstitutor().replace(event, pattern) :
+                defaultRoute.getKey() != null ? defaultRoute.getKey() : DEFAULT_KEY;
         final RouteAppenderControl control = getControl(key, event);
         if (control != null) {
             try {

File: log4j-api/src/main/java/org/apache/logging/log4j/util/StackLocator.java
Patch:
@@ -104,6 +104,9 @@ public Class<?> getCallerClass(final int depth) {
         if (depth < 0) {
             throw new IndexOutOfBoundsException(Integer.toString(depth));
         }
+        if (GET_CALLER_CLASS == null) {
+            return null;
+        }
         // note that we need to add 1 to the depth value to compensate for this method, but not for the Method.invoke
         // since Reflection.getCallerClass ignores the call to Method.invoke()
         try {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java
Patch:
@@ -237,6 +237,7 @@ private void handleRingBufferFull(final RingBufferLogEventTranslator translator)
             AsyncQueueFullMessageUtil.logWarningToStatusLogger();
             logMessageInCurrentThread(translator.fqcn, translator.level, translator.marker, translator.message,
                     translator.thrown);
+            translator.clear();
             return;
         }
         final EventRoute eventRoute = loggerDisruptor.getEventRoute(translator.level);
@@ -247,8 +248,10 @@ private void handleRingBufferFull(final RingBufferLogEventTranslator translator)
             case SYNCHRONOUS:
                 logMessageInCurrentThread(translator.fqcn, translator.level, translator.marker, translator.message,
                         translator.thrown);
+                translator.clear();
                 break;
             case DISCARD:
+                translator.clear();
                 break;
             default:
                 throw new IllegalStateException("Unknown EventRoute " + eventRoute);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEventTranslator.java
Patch:
@@ -69,7 +69,7 @@ public void translateTo(final RingBufferLogEvent event, final long sequence) {
     /**
      * Release references held by this object to allow objects to be garbage-collected.
      */
-    private void clear() {
+    void clear() {
         setBasicValues(null, // asyncLogger
                 null, // loggerName
                 null, // marker

File: log4j-core/src/test/java/org/apache/logging/log4j/core/GarbageCollectionHelper.java
Patch:
@@ -29,7 +29,7 @@
 
 public final class GarbageCollectionHelper implements Closeable, Runnable {
     private static final OutputStream sink = ByteStreams.nullOutputStream();
-    public final AtomicBoolean running = new AtomicBoolean();
+    private final AtomicBoolean running = new AtomicBoolean();
     private final CountDownLatch latch = new CountDownLatch(1);
     private final Thread gcThread = new Thread(new Runnable() {
         @Override

File: log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/ReflectionBenchmark.java
Patch:
@@ -42,7 +42,7 @@
  * </p>
  *
  * <pre>
- *     T
+ *     java -jar benchmarks.jar ".*ReflectionBenchmark.*" -i 5 -f 1 -wi 5 -bm Throughput -tu ms
  * </pre>
  */
 public class ReflectionBenchmark {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
Patch:
@@ -174,7 +174,6 @@ public static ConfigurationFactory getInstance() {
                     // see above comments about double-checked locking
                     //noinspection NonThreadSafeLazyInitialization
                     factories = Collections.unmodifiableList(list);
-                    final String authClass = props.getStringProperty(AUTHORIZATION_PROVIDER);
                     authorizationProvider = authorizationProvider(props);
                 }
             } finally {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/visitors/PluginValueVisitor.java
Patch:
@@ -37,7 +37,7 @@ public Object visit(final Configuration configuration, final Node node, final Lo
             final StringBuilder log) {
         final String name = this.annotation.value();
         final String elementValue = node.getValue();
-        final String attributeValue = node.getAttributes().get("value");
+        final String attributeValue = node.getAttributes().get(name);
         String rawValue = null; // if neither is specified, return null (LOG4J2-1313)
         if (Strings.isNotEmpty(elementValue)) {
             if (Strings.isNotEmpty(attributeValue)) {
@@ -47,7 +47,7 @@ public Object visit(final Configuration configuration, final Node node, final Lo
             }
             rawValue = elementValue;
         } else {
-            rawValue = removeAttributeValue(node.getAttributes(), "value");
+            rawValue = removeAttributeValue(node.getAttributes(), name);
         }
         final String value = this.substitutor.replace(event, rawValue);
         StringBuilders.appendKeyDqValue(log, name, value);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDelegate.java
Patch:
@@ -57,7 +57,7 @@ public interface AsyncLoggerConfigDelegate {
 
     /**
      * Notifies the delegate what LogEventFactory an AsyncLoggerConfig is using, so the delegate can determine
-     * whether to populate the ring buffer with mutable log events or not. This method may be invoced multiple times
+     * whether to populate the ring buffer with mutable log events or not. This method may be invoked multiple times
      * for all AsyncLoggerConfigs that use this delegate.
      *
      * @param logEventFactory the factory used

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/CompositeConfiguration.java
Patch:
@@ -56,7 +56,7 @@ public class CompositeConfiguration extends AbstractConfiguration implements Rec
     private MergeStrategy mergeStrategy;
 
     /**
-     * Construct the ComponsiteConfiguration.
+     * Construct the CompositeConfiguration.
      *
      * @param configurations The List of Configurations to merge.
      */

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java
Patch:
@@ -41,7 +41,7 @@
  * configurations.</li>
  * <li>Filters are aggregated under a CompositeFilter if more than one Filter is defined. Since Filters are not named
  * duplicates may be present.</li>
- * <li>Scripts and ScriptFile references are aggregated. Duplicate definiations replace those in previous
+ * <li>Scripts and ScriptFile references are aggregated. Duplicate definitions replace those in previous
  * configurations.</li>
  * <li>Appenders are aggregated. Appenders with the same name are replaced by those in later configurations, including
  * all of the Appender's subcomponents.</li>

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/RegexFilter.java
Patch:
@@ -107,7 +107,7 @@ public String toString() {
      * @param regex
      *        The regular expression to match.
      * @param patternFlags
-     *        An array of Stirngs where each String is a {@link Pattern#compile(String, int)} compilation flag.
+     *        An array of Strings where each String is a {@link Pattern#compile(String, int)} compilation flag.
      * @param useRawMsg
      *        If true, the raw message will be used, otherwise the formatted message will be used.
      * @param match

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/SslConfiguration.java
Patch:
@@ -129,7 +129,7 @@ private SSLContext createSslContextWithDefaultKeyManagerFactory() throws TrustSt
         try {
             return createSslContext(true, false);
         } catch (final KeyStoreConfigurationException dummy) {
-             LOGGER.debug("Exception occured while using default keystore. This should be a BUG");
+             LOGGER.debug("Exception occurred while using default keystore. This should be a BUG");
              return null;
         }
     }
@@ -139,7 +139,7 @@ private SSLContext createSslContextWithDefaultTrustManagerFactory() throws KeySt
             return createSslContext(false, true);
         }
         catch (final TrustStoreConfigurationException dummy) {
-            LOGGER.debug("Exception occured while using default truststore. This should be a BUG");
+            LOGGER.debug("Exception occurred while using default truststore. This should be a BUG");
             return null;
         }
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/CronExpression.java
Patch:
@@ -1471,7 +1471,7 @@ public Date getTimeAfter(Date afterTime) {
                         cl.set(Calendar.MONTH, mon);
                         // no '- 1' here because we are promoting the month
                         continue;
-                    } else if (daysToAdd > 0) { // are we swithing days?
+                    } else if (daysToAdd > 0) { // are we switching days?
                         cl.set(Calendar.SECOND, 0);
                         cl.set(Calendar.MINUTE, 0);
                         cl.set(Calendar.HOUR_OF_DAY, 0);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/Watcher.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.util.List;
 
-import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.ConfigurationListener;
 import org.apache.logging.log4j.core.config.Reconfigurable;
 
@@ -40,7 +39,6 @@ public interface Watcher {
 
     /**
      * Called when the configuration has been modified.
-     * @param source The location of the configuration that was modified.
      */
     void modified();
 
@@ -52,7 +50,7 @@ public interface Watcher {
 
     /**
      * Returns the time the source was last modified or 0 if it is not available.
-     * @return the time the soruce was last modified.
+     * @return the time the source was last modified.
      */
     long getLastModified();
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/CronRolloverApp.java
Patch:
@@ -37,7 +37,7 @@ public static void main(final String[] args) {
             }
         } catch (final Exception e) {
             //e.printStackTrace();
-            logger.error("Excepcion general", e);
+            logger.error("Exception general", e);
         }
     }
 }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderSizeTest.java
Patch:
@@ -150,7 +150,7 @@ public void testAppender() throws Exception {
                         in = new CompressorStreamFactory().createCompressorInputStream(ext.name().toLowerCase(), fis);
                     } catch (final CompressorException ce) {
                         ce.printStackTrace();
-                        fail("Error creating intput stream from " + file.toString() + ": " + ce.getMessage());
+                        fail("Error creating input stream from " + file.toString() + ": " + ce.getMessage());
                     }
                     final ByteArrayOutputStream baos = new ByteArrayOutputStream();
                     assertNotNull("No input stream for " + file.getName(), in);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigTest.java
Patch:
@@ -71,14 +71,14 @@ public void testIncludeLocationDefaultsToFalse() {
     	final LoggerConfig rootLoggerConfig =
     			AsyncLoggerConfig.RootLogger.createLogger(
     					null, "INFO", null, new AppenderRef[0], null, new DefaultConfiguration(), null);
-    	assertFalse("Include location should default to false for async logggers",
+    	assertFalse("Include location should default to false for async loggers",
     			    rootLoggerConfig.isIncludeLocation());
 
     	final LoggerConfig loggerConfig =
     	        AsyncLoggerConfig.createLogger(
     	        		null, "INFO", "com.foo.Bar", null, new AppenderRef[0], null, new DefaultConfiguration(),
     	        		null);
-    	assertFalse("Include location should default to false for async logggers",
+    	assertFalse("Include location should default to false for async loggers",
     			    loggerConfig.isIncludeLocation());
     }
 }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncRootReloadTest.java
Patch:
@@ -51,7 +51,7 @@ public void testLog4j2_807() throws InterruptedException, URISyntaxException {
         final File configFile = FileUtils.fileFromUri(url.toURI());
 
         final Logger logger = LogManager.getLogger(AsyncRootReloadTest.class);
-        logger.info("Log4j configured, will be reconfigured in aprox. 5 sec");
+        logger.info("Log4j configured, will be reconfigured in approx. 5 sec");
 
         configFile.setLastModified(System.currentTimeMillis());
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/CompositeConfigurationTest.java
Patch:
@@ -157,7 +157,7 @@ public void evaluate() throws Throwable {
                 //Regression
                 //Check level on cat3 (not present in root config)
                 assertEquals("Expected cat3 log level to be ERROR", Level.ERROR, config.getLogger("cat3").getLevel());
-                //Check level on cat1 (not present in overriden config)
+                //Check level on cat1 (not present in overridden config)
                 assertEquals("Expected cat1 log level to be DEBUG", Level.DEBUG, config.getLogger("cat1").getLevel());
             }
         };

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/validators/RequiredValidatorTest.java
Patch:
@@ -38,7 +38,7 @@ public void setUp() throws Exception {
         final PluginManager manager = new PluginManager("Test");
         manager.collectPlugins();
         plugin = (PluginType<ValidatingPlugin>) manager.getPluginType("Validator");
-        assertNotNull("Rebuild this module to make sure annotaion processing kicks in.", plugin);
+        assertNotNull("Rebuild this module to make sure annotation processing kicks in.", plugin);
         node = new Node(null, "Validator", plugin);
     }
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/validators/ValidatingPluginWithGenericBuilderTest.java
Patch:
@@ -40,7 +40,7 @@ public void setUp() throws Exception {
         final PluginManager manager = new PluginManager("Test");
         manager.collectPlugins();
         plugin = (PluginType<ValidatingPluginWithGenericBuilder>) manager.getPluginType("ValidatingPluginWithGenericBuilder");
-        assertNotNull("Rebuild this module to make sure annotaion processing kicks in.", plugin);
+        assertNotNull("Rebuild this module to make sure annotation processing kicks in.", plugin);
         node = new Node(null, "Validator", plugin);
     }
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/validators/ValidatingPluginWithGenericSubclassFoo1BuilderTest.java
Patch:
@@ -40,7 +40,7 @@ public void setUp() throws Exception {
         final PluginManager manager = new PluginManager("Test");
         manager.collectPlugins();
         plugin = (PluginType<PluginWithGenericSubclassFoo1Builder>) manager.getPluginType("PluginWithGenericSubclassFoo1Builder");
-        assertNotNull("Rebuild this module to make sure annotaion processing kicks in.", plugin);
+        assertNotNull("Rebuild this module to make sure annotation processing kicks in.", plugin);
         node = new Node(null, "Validator", plugin);
     }
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/validators/ValidatingPluginWithTypedBuilderTest.java
Patch:
@@ -41,7 +41,7 @@ public void setUp() throws Exception {
         manager.collectPlugins();
         plugin = (PluginType<ValidatingPluginWithTypedBuilder>) manager
                 .getPluginType("ValidatingPluginWithTypedBuilder");
-        assertNotNull("Rebuild this module to make sure annotaion processing kicks in.", plugin);
+        assertNotNull("Rebuild this module to make sure annotation processing kicks in.", plugin);
         node = new Node(null, "Validator", plugin);
     }
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/lookup/MainInputArgumentsMapLookup.java
Patch:
@@ -34,7 +34,7 @@ public class MainInputArgumentsMapLookup extends MapLookup {
             final StackTraceElement[] stackTraceElements = entry.getValue();
             entry.getKey();
             // Can't use the thread name to look for "main" since anyone can set it.
-            // Can't use thread ID since it can be any positive value, and is likely vender dependent. Oracle seems to
+            // Can't use thread ID since it can be any positive value, and is likely vendor dependent. Oracle seems to
             // use 1.
             // We are left to look for "main" at the top of the stack
             if (stackTraceElements != null) {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/util/CronExpressionTest.java
Patch:
@@ -93,7 +93,7 @@ public void testPrevFireTime2() throws Exception {
     }
 
     /**
-     * 35,45, and 55 minutes past the hour evern hour.
+     * 35,45, and 55 minutes past the hour every hour.
      */
     @Test
     public void testPrevFireTime3() throws Exception {

File: log4j-core/src/test/java/org/apache/logging/log4j/test/appender/ListAppender.java
Patch:
@@ -83,7 +83,7 @@ public class ListAppender extends AbstractAppender {
      *     listAppender.countDownLatch = new CountDownLatch(1);
      *
      *     Logger logger = LogManager.getLogger();
-     *     logger.info("log one event anynchronously");
+     *     logger.info("log one event asynchronously");
      *
      *     // wait for the appender to finish processing this event (wait max 1 second)
      *     listAppender.countDownLatch.await(1, TimeUnit.SECONDS);

File: log4j-docker/src/main/java/org/apache/logging/log4j/docker/DockerLookup.java
Patch:
@@ -52,7 +52,7 @@ public DockerLookup() {
             baseUri = props.getStringProperty(DOCKER_URI);
         }
         if (baseUri == null) {
-            LOGGER.warn("No Docker URI provided. Docker information is unavailble");
+            LOGGER.warn("No Docker URI provided. Docker information is unavailable");
         }
         Container current = null;
         try {

File: log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/Log4jEventSource.java
Patch:
@@ -58,7 +58,7 @@ public void send(final Event event) {
         try {
             getChannelProcessor().processEvent(event);
         } catch (final ChannelException ex) {
-            LOGGER.warn("Unabled to process event {}" + event, ex);
+            LOGGER.warn("Unable to process event {}" + event, ex);
             throw ex;
         }
         sourceCounter.incrementAppendAcceptedCount();

File: log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalBufferedInputStream.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.logging.log4j.spi.ExtendedLogger;
 
 /**
- * Internal class that exists primiarly to allow location calculations to work.
+ * Internal class that exists primarly to allow location calculations to work.
  * @since 2.12
  */
 public class InternalBufferedInputStream extends BufferedInputStream {

File: log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalBufferedReader.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.logging.log4j.spi.ExtendedLogger;
 
 /**
- * Internal class that exists primiarly to allow location calculations to work.
+ * Internal class that exists primarly to allow location calculations to work.
  * @since 2.12
  */
 public class InternalBufferedReader extends BufferedReader {

File: log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalFilterOutputStream.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.logging.log4j.spi.ExtendedLogger;
 
 /**
- * Internal class that exists primiarly to allow location calculations to work.
+ * Internal class that exists primarly to allow location calculations to work.
  *
  * @since 2.12
  */

File: log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalPrintWriter.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.logging.log4j.spi.ExtendedLogger;
 
 /**
- * Internal class that exists primiarly to allow location calculations to work.
+ * Internal class that exists primarly to allow location calculations to work.
  *
  * @since 2.12
  */

File: log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalReader.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.logging.log4j.spi.ExtendedLogger;
 
 /**
- * Internal class that exists primiarly to allow location calculations to work.
+ * Internal class that exists primarly to allow location calculations to work.
  *
  * @since 2.12
  */

File: log4j-iostreams/src/main/java/org/apache/logging/log4j/io/internal/InternalWriter.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.logging.log4j.spi.ExtendedLogger;
 
 /**
- * Internal class that exists primiarly to allow location calculations to work.
+ * Internal class that exists primarly to allow location calculations to work.
  * @since 2.12
  */
 public class InternalWriter extends Writer {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java
Patch:
@@ -414,7 +414,7 @@ private int purgeAscending(final int lowIndex, final int highIndex, final Rollin
         final SortedMap<Integer, Path> eligibleFiles = getEligibleFiles(manager);
         final int maxFiles = highIndex - lowIndex + 1;
 
-        boolean renameFiles = false;
+        boolean renameFiles = !eligibleFiles.isEmpty() && eligibleFiles.lastKey() >= maxIndex;
         while (eligibleFiles.size() >= maxFiles) {
             try {
                 LOGGER.debug("Eligible files: {}", eligibleFiles);

File: log4j-api/src/main/java/org/apache/logging/log4j/util/StackLocator.java
Patch:
@@ -178,7 +178,7 @@ public StackTraceElement calcLocation(final String fqcnOfLogger) {
                 found = true;
                 continue;
             }
-            if (found) {
+            if (found && !fqcnOfLogger.equals(className)) {
                 return stackTrace[i];
             }
         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppender.java
Patch:
@@ -111,7 +111,7 @@ public RollingRandomAccessFileAppender build() {
                             .build();
                 }
             } else if (fileName == null && !(strategy instanceof DirectFileRolloverStrategy)) {
-                LOGGER.error("RollingFileAppender '{}': When no file name is provided a DirectFilenameRolloverStrategy must be configured");
+                LOGGER.error("RollingFileAppender '{}': When no file name is provided a DirectFileRolloverStrategy must be configured");
                 return null;
             }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java
Patch:
@@ -138,8 +138,8 @@ private Rfc5424Layout(final Configuration config, final Facility facility, final
         this.includeMdc = includeMDC;
         this.includeNewLine = includeNL;
         this.escapeNewLine = escapeNL == null ? null : Matcher.quoteReplacement(escapeNL);
-        this.mdcId = id == null ? DEFAULT_MDCID : id;
-        this.mdcSdId = new StructuredDataId(mdcId, enterpriseNumber, null, null);
+        this.mdcId = mdcId != null ? mdcId : id == null ? DEFAULT_MDCID : id;
+        this.mdcSdId = new StructuredDataId(this.mdcId, enterpriseNumber, null, null);
         this.mdcPrefix = mdcPrefix;
         this.eventPrefix = eventPrefix;
         this.appName = appName;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerThreadNameStrategyTest.java
Patch:
@@ -26,9 +26,7 @@
 
 @Category(AsyncLoggers.class)
 public class AsyncLoggerThreadNameStrategyTest {
-    static final String DEFAULT_STRATEGY = System.getProperty("java.version").compareTo("1.8.0_102") < 0
-            ? "CACHED" // LOG4J2-2052 JDK 8u102 removed the String allocation in Thread.getName()
-            : "UNCACHED";
+    static final String DEFAULT_STRATEGY = ThreadNameCachingStrategy.isAllocatingThreadGetName() ? "CACHED" : "UNCACHED";
 
     @After
     public void after() {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java
Patch:
@@ -178,7 +178,7 @@ private void handleRingBufferFull(final RingBufferLogEventTranslator translator)
         final EventRoute eventRoute = loggerDisruptor.getEventRoute(translator.level);
         switch (eventRoute) {
             case ENQUEUE:
-                loggerDisruptor.enqueueLogMessageInfo(translator);
+                loggerDisruptor.enqueueLogMessageWhenQueueFull(translator);
                 break;
             case SYNCHRONOUS:
                 logMessageInCurrentThread(translator.fqcn, translator.level, translator.marker, translator.message,
@@ -328,7 +328,7 @@ private void handleRingBufferFull(final StackTraceElement location,
         final EventRoute eventRoute = loggerDisruptor.getEventRoute(level);
         switch (eventRoute) {
             case ENQUEUE:
-                loggerDisruptor.getDisruptor().getRingBuffer().publishEvent(this,
+                loggerDisruptor.enqueueLogMessageWhenQueueFull(this,
                         this, // asyncLogger: 0
                         location, // location: 1
                         fqcn, // 2

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java
Patch:
@@ -136,8 +136,8 @@ public static <B extends Builder<B>> B newBuilder() {
     private Route defaultRoute;
     private final Configuration configuration;
     private final ConcurrentMap<String, CreatedRouteAppenderControl> createdAppenders = new ConcurrentHashMap<>();
-    private final Map<String, AppenderControl> createdAppendersUnmodifiableView
-            = Collections.unmodifiableMap(createdAppenders);
+    private final Map<String, AppenderControl> createdAppendersUnmodifiableView  = Collections.unmodifiableMap(
+            (Map<String, AppenderControl>) (Map<String, ?>) createdAppenders);
     private final ConcurrentMap<String, RouteAppenderControl> referencedAppenders = new ConcurrentHashMap<>();
     private final RewritePolicy rewritePolicy;
     private final PurgePolicy purgePolicy;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/visitors/PluginElementVisitor.java
Patch:
@@ -63,6 +63,7 @@ public Object visit(final Configuration configuration, final Node node, final Lo
                     }
                     if (childObject.getClass().isArray()) {
                         log.append(Arrays.toString((Object[]) childObject)).append('}');
+                        node.getChildren().removeAll(used);
                         return childObject;
                     }
                     log.append(child.toString());

File: log4j-core/src/test/java/org/apache/logging/log4j/junit/AbstractExternalFileCleaner.java
Patch:
@@ -166,7 +166,7 @@ protected void printf(final String format, final Object... args) {
 
 	protected void println(final String msg) {
 		if (printStream != null) {
-			println(msg);
+			printStream.println(msg);
 		}
 	}
 

File: log4j-api/src/test/java/org/apache/logging/log4j/ThreadContextUtilityClass.java
Patch:
@@ -18,8 +18,8 @@
 
 import java.util.Map;
 
-import org.apache.logging.log4j.Timer;
-import org.apache.logging.log4j.ThreadContext;
+import org.apache.logging.log4j.util.Timer;
+
 import static org.junit.Assert.*;
 
 

File: log4j-api/src/test/java/org/apache/logging/log4j/message/MessageFormatsPerfTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.logging.log4j.message;
 
-import org.apache.logging.log4j.Timer;
+import org.apache.logging.log4j.util.Timer;
 import org.junit.AfterClass;
 import org.junit.Test;
 

File: log4j-core-its/src/test/java/org/apache/logging/log4j/core/SimplePerfTest.java
Patch:
@@ -22,7 +22,7 @@
 
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Timer;
+import org.apache.logging.log4j.util.Timer;
 import org.apache.logging.log4j.categories.PerformanceTests;
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.DefaultConfiguration;

File: log4j-core-its/src/test/java/org/apache/logging/log4j/core/ThreadedPerfTest.java
Patch:
@@ -21,7 +21,7 @@
 
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Timer;
+import org.apache.logging.log4j.util.Timer;
 import org.apache.logging.log4j.categories.PerformanceTests;
 import org.junit.Test;
 import org.junit.experimental.categories.Category;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractJacksonLayout.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.logging.log4j.core.lookup.StrSubstitutor;
 import org.apache.logging.log4j.core.util.KeyValuePair;
 import org.apache.logging.log4j.core.util.StringBuilderWriter;
+import org.apache.logging.log4j.message.ReusableMessage;
 import org.apache.logging.log4j.util.Strings;
 
 import com.fasterxml.jackson.annotation.JsonAnyGetter;
@@ -277,7 +278,7 @@ private static LogEvent convertMutableToLog4jEvent(final LogEvent event) {
         // TODO Jackson-based layouts have certain filters set up for Log4jLogEvent.
         // TODO Need to set up the same filters for MutableLogEvent but don't know how...
         // This is a workaround.
-        return event instanceof Log4jLogEvent ? event : Log4jLogEvent.createMemento(event);
+        return event instanceof ReusableMessage ? Log4jLogEvent.createMemento(event) : event;
     }
 
     protected Object wrapLogEvent(final LogEvent event) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/WriterAppender.java
Patch:
@@ -148,8 +148,8 @@ private static WriterManager getManager(final Writer target, final boolean follo
     }
 
     @PluginBuilderFactory
-    public static Builder newBuilder() {
-        return new Builder();
+    public static <B extends Builder<B>> B newBuilder() {
+        return new Builder<B>().asBuilder();
     }
 
     private WriterAppender(final String name, final StringLayout layout, final Filter filter,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CompositeTriggeringPolicy.java
Patch:
@@ -50,7 +50,7 @@ public TriggeringPolicy[] getTriggeringPolicies() {
     @Override
     public void initialize(final RollingFileManager manager) {
         for (final TriggeringPolicy triggeringPolicy : triggeringPolicies) {
-            LOGGER.debug("Initializing trigering policy {}", triggeringPolicy.toString());
+            LOGGER.debug("Initializing triggering policy {}", triggeringPolicy.toString());
             triggeringPolicy.initialize(manager);
         }
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java
Patch:
@@ -72,7 +72,7 @@
 @Plugin(name = "asyncLogger", category = Node.CATEGORY, printObject = true)
 public class AsyncLoggerConfig extends LoggerConfig {
 
-    private static final ThreadLocal<Boolean> ASYNC_LOGGER_ENTERED = new ThreadLocal<>();
+    private static final ThreadLocal<Boolean> ASYNC_LOGGER_ENTERED = ThreadLocal.withInitial(() -> Boolean.FALSE);
     private final AsyncLoggerConfigDelegate delegate;
 
     protected AsyncLoggerConfig(final String name,
@@ -90,7 +90,7 @@ protected AsyncLoggerConfig(final String name,
     protected void log(final LogEvent event, final LoggerConfigPredicate predicate) {
         // See LOG4J2-2301
         if (predicate == LoggerConfigPredicate.ALL &&
-                ASYNC_LOGGER_ENTERED.get() == null &&
+                ASYNC_LOGGER_ENTERED.get() == Boolean.FALSE &&
                 // Optimization: AsyncLoggerConfig is identical to LoggerConfig
                 // when no appenders are present. Avoid splitting for synchronous
                 // and asynchronous execution paths until encountering an
@@ -109,7 +109,7 @@ protected void log(final LogEvent event, final LoggerConfigPredicate predicate)
                 // from reusable messages.
                 logToAsyncDelegate(event);
             } finally {
-                ASYNC_LOGGER_ENTERED.remove();
+                ASYNC_LOGGER_ENTERED.set(Boolean.FALSE);
             }
         } else {
             super.log(event, predicate);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java
Patch:
@@ -127,9 +127,6 @@ public void initialize(final RollingFileManager aManager) {
      */
     @Override
     public boolean isTriggeringEvent(final LogEvent event) {
-        if (manager.getFileSize() == 0) {
-            return false;
-        }
         final long nowMillis = event.getTimeMillis();
         if (nowMillis >= nextRolloverMillis) {
             nextRolloverMillis = ThreadLocalRandom.current().nextLong(0, 1 + maxRandomDelayMillis)

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DirectWriteRolloverStrategy.java
Patch:
@@ -316,8 +316,7 @@ public String getCurrentFileName(final RollingFileManager manager) {
             final SortedMap<Integer, Path> eligibleFiles = getEligibleFiles(manager);
             final int fileIndex = eligibleFiles.size() > 0 ? (nextIndex > 0 ? nextIndex : eligibleFiles.size()) : 1;
             final StringBuilder buf = new StringBuilder(255);
-            manager.getPatternProcessor().formatFileName(strSubstitutor, buf, true, usePrevTime, fileIndex);
-            usePrevTime = true;
+            manager.getPatternProcessor().formatFileName(strSubstitutor, buf, true, fileIndex);
             final int suffixLength = suffixLength(buf.toString());
             final String name = suffixLength > 0 ? buf.substring(0, buf.length() - suffixLength) : buf.toString();
             currentFileName = name;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java
Patch:
@@ -76,6 +76,7 @@ private static long initStartTime() {
     @Override
     public void initialize(final RollingFileManager manager) {
         if (manager.getFileTime() < JVM_START_TIME && manager.getFileSize() >= minSize) {
+            StatusLogger.getLogger().debug("Initiating rollover at startup");
             if (minSize == 0) {
                 manager.setRenameEmptyFiles(true);
             }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/PatternProcessor.java
Patch:
@@ -253,7 +253,7 @@ public final void formatFileName(final StringBuilder buf, final boolean useCurre
      * @param obj object to be evaluated in formatting, may not be null.
      */
     public final void formatFileName(final StrSubstitutor subst, final StringBuilder buf, final Object obj) {
-        formatFileName(subst, buf, false, false, obj);
+        formatFileName(subst, buf, false, obj);
     }
 
     /**
@@ -263,11 +263,11 @@ public final void formatFileName(final StrSubstitutor subst, final StringBuilder
      * @param obj object to be evaluated in formatting, may not be null.
      */
     public final void formatFileName(final StrSubstitutor subst, final StringBuilder buf, final boolean useCurrentTime,
-                                     final boolean usePrevTime, final Object obj) {
+                                     final Object obj) {
         // LOG4J2-628: we deliberately use System time, not the log4j.Clock time
         // for creating the file name of rolled-over files.
         final long time = useCurrentTime && currentFileTime != 0 ? currentFileTime :
-                usePrevTime && prevFileTime != 0 ? prevFileTime : System.currentTimeMillis();
+                prevFileTime != 0 ? prevFileTime : System.currentTimeMillis();
         formatFileName(buf, new Date(time), obj);
         final LogEvent event = new Log4jLogEvent.Builder().setTimeMillis(time).build();
         final String fileName = subst.replace(event, buf);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicyTest.java
Patch:
@@ -56,11 +56,13 @@ public class OnStartupTriggeringPolicyTest {
 
     @Test
     public void testPolicy() throws Exception {
+        //System.setProperty("log4j2.debug", "true");
+        //System.setProperty("log4j2.StatusLogger.level", "trace");
         final Configuration configuration = new DefaultConfiguration();
         final Path target = Paths.get(TARGET_FILE);
         Assert.assertFalse(Files.exists(target));
         target.toFile().getParentFile().mkdirs();
-        final long timeStamp = System.currentTimeMillis();
+        final long timeStamp = System.currentTimeMillis() - (1000 * 60 * 60 * 24);
         final String expectedDate = formatter.format(timeStamp);
         final String rolledFileName = ROLLED_FILE_PREFIX + expectedDate + ROLLED_FILE_SUFFIX;
         final Path rolled = Paths.get(rolledFileName);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicyTest.java
Patch:
@@ -52,12 +52,13 @@ public class OnStartupTriggeringPolicyTest {
     private static final FastDateFormat formatter = FastDateFormat.getInstance("MM-dd-yyyy");
 
     @Rule
-    public CleanFolders rule = new CleanFolders("target/rollOnStartup");
+    public CleanFolders rule = new CleanFolders(TARGET_FOLDER);
 
     @Test
     public void testPolicy() throws Exception {
         final Configuration configuration = new DefaultConfiguration();
         final Path target = Paths.get(TARGET_FILE);
+        Assert.assertFalse(Files.exists(target));
         target.toFile().getParentFile().mkdirs();
         final long timeStamp = System.currentTimeMillis();
         final String expectedDate = formatter.format(timeStamp);
@@ -71,7 +72,7 @@ public void testPolicy() throws Exception {
         assertTrue(size > 0);
         assertEquals(copied, size);
 
-        Assert.assertTrue(target.toFile().setLastModified(timeStamp));
+        Assert.assertTrue(target.toFile().setLastModified(0));
         final PatternLayout layout = PatternLayout.newBuilder().withPattern("%msg").withConfiguration(configuration)
                 .build();
         final RolloverStrategy strategy = DefaultRolloverStrategy.createStrategy(null, null, null, "0", null, true,

File: log4j-jdbc-dbcp2/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/PoolingDriverConnectionSource.java
Patch:
@@ -149,7 +149,7 @@ private void setupDriver(final String connectionString) throws SQLException {
         // any ObjectPool implementation will suffice.
         //
         @SuppressWarnings("resource")
-        // This GenericObjectPool will be closed on shutown
+        // This GenericObjectPool will be closed on shutdown
         final ObjectPool<PoolableConnection> connectionPool = new GenericObjectPool<>(poolableConnectionFactory);
 
         // Set the factory's pool property to the owning pool

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/JmsManager.java
Patch:
@@ -135,7 +135,7 @@ public JmsManager createManager(final String name, final JmsManagerConfiguration
     }
 
     /**
-     * Handles reconnecting to a Socket on a Thread.
+     * Handles reconnecting to JMS on a Thread.
      */
     private class Reconnector extends Log4jThread {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/JmsManager.java
Patch:
@@ -218,8 +218,8 @@ public void shutdown() {
      *            fails.
      * @param reconnectIntervalMillis
      *            How to log sleep in milliseconds before trying to reconnect to JMS.
-     * @param jndiManager
-     *            The JndiManager to look up JMS information through.
+     * @param jndiProperties
+     *            JNDI properties.
      * @return The JmsManager as configured.
      */
     public static JmsManager getJmsManager(final String name, final Properties jndiProperties,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java
Patch:
@@ -238,10 +238,10 @@ public static TimeFilter createFilter(
             @PluginAttribute("onMismatch") final Result mismatch) {
         final long s = parseTimestamp(start, 0);
         final long e = parseTimestamp(end, Long.MAX_VALUE);
-        final TimeZone timezone = tz == null ? TimeZone.getDefault() : TimeZone.getTimeZone(tz);
+        final TimeZone timeZone = tz == null ? TimeZone.getDefault() : TimeZone.getTimeZone(tz);
         final Result onMatch = match == null ? Result.NEUTRAL : match;
         final Result onMismatch = mismatch == null ? Result.DENY : mismatch;
-        return new TimeFilter(s, e, timezone, onMatch, onMismatch);
+        return new TimeFilter(s, e, timeZone, onMatch, onMismatch);
     }
 
     private static long parseTimestamp(final String timestamp, final long defaultValue) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java
Patch:
@@ -573,7 +573,7 @@ private Strategy getStrategy(final char f, final int width, final Calendar defin
         case 'K':  // Hour in am/pm (0-11)
             return HOUR_STRATEGY;
         case 'M':
-            return width>=3 ?getLocaleSpecificStrategy(Calendar.MONTH, definingCalendar) :NUMBER_MONTH_STRATEGY;
+            return width >= 3 ? getLocaleSpecificStrategy(Calendar.MONTH, definingCalendar) : NUMBER_MONTH_STRATEGY;
         case 'S':
             return MILLISECOND_STRATEGY;
         case 'W':

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java
Patch:
@@ -596,7 +596,7 @@ private Strategy getStrategy(final char f, final int width, final Calendar defin
             return WEEK_OF_YEAR_STRATEGY;
         case 'y':
         case 'Y':
-            return width>2 ?LITERAL_YEAR_STRATEGY :ABBREVIATED_YEAR_STRATEGY;
+            return width > 2 ? LITERAL_YEAR_STRATEGY : ABBREVIATED_YEAR_STRATEGY;
         case 'X':
             return ISO8601TimeZoneStrategy.getStrategy(width);
         case 'Z':

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/mom/JmsAppenderTest.java
Patch:
@@ -47,6 +47,7 @@
 import org.apache.logging.log4j.junit.LoggerContextRule;
 import org.apache.logging.log4j.message.Message;
 import org.apache.logging.log4j.message.SimpleMessage;
+import org.apache.logging.log4j.message.StringMapMessage;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -122,7 +123,7 @@ private Log4jLogEvent createLogEvent(final Message message) {
     }
 
     private Log4jLogEvent createMapMessageLogEvent() {
-        org.apache.logging.log4j.message.MapMessage<?, String> mapMessage = new org.apache.logging.log4j.message.MapMessage<>();
+        StringMapMessage mapMessage = new StringMapMessage();
         return createLogEvent(mapMessage.with("testMesage", LOG_MESSAGE));
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java
Patch:
@@ -164,7 +164,7 @@ protected FileManager(final LoggerContext loggerContext, final String fileName,
      * @param bufferSize buffer size for buffered IO
      * @param filePermissions File permissions
      * @param fileOwner File owner
-     * @param fileOwner File group
+     * @param fileGroup File group
      * @param configuration The configuration.
      * @return A FileManager for the File.
      */

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/AwaitCompletionReliabilityStrategy.java
Patch:
@@ -94,8 +94,7 @@ public LoggerConfig getActiveLoggerConfig(final Supplier<LoggerConfig> next) {
         LoggerConfig result = this.loggerConfig;
         if (!beforeLogEvent()) {
             result = next.get();
-            //return result == this.loggerConfig ? result : result.getReliabilityStrategy().getActiveLoggerConfig(next);
-            return result.getReliabilityStrategy().getActiveLoggerConfig(next);
+            return result == this.loggerConfig ? result : result.getReliabilityStrategy().getActiveLoggerConfig(next);
         }
         return result;
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/NullAppender.java
Patch:
@@ -34,7 +34,7 @@ public class NullAppender extends AbstractAppender {
 
 	@PluginFactory
 	public static NullAppender createAppender(
-			@PluginAttribute(value = "smtpPort", defaultString = "null") final String name) {
+			@PluginAttribute(value = "name", defaultString = "null") final String name) {
 		return new NullAppender(name);
 	}
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.java
Patch:
@@ -160,7 +160,7 @@ public void append(final LogEvent event) {
         try {
             tryAppend(event);
         } catch (final AppenderLoggingException ex) {
-            error("Unable to write to stream " + manager.getName() + " for appender " + getName() + ": " + ex);
+            error("Unable to write to stream " + manager.getName() + " for appender " + getName(), event, ex);
             throw ex;
         }
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractWriterAppender.java
Patch:
@@ -84,7 +84,7 @@ public void append(final LogEvent event) {
                 }
             }
         } catch (final AppenderLoggingException ex) {
-            error("Unable to write " + manager.getName() + " for appender " + getName() + ": " + ex);
+            error("Unable to write " + manager.getName() + " for appender " + getName(), event, ex);
             throw ex;
         } finally {
             readLock.unlock();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractAppender.java
Patch:
@@ -244,6 +244,7 @@ public boolean ignoreExceptions() {
     public void setHandler(final ErrorHandler handler) {
         if (handler == null) {
             LOGGER.error("The handler cannot be set to null");
+            return;
         }
         if (isStarted()) {
             LOGGER.error("The handler cannot be changed once the appender is started");

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java
Patch:
@@ -268,7 +268,7 @@ public void setLevel(final Level level) {
      * @return the logging Level.
      */
     public Level getLevel() {
-        return level == null ? parent.getLevel() : level;
+        return level == null ? parent == null ? Level.ERROR : parent.getLevel() : level;
     }
 
     /**

File: log4j-osgi/src/test/java/org/apache/logging/log4j/osgi/tests/AbstractLoadBundleTest.java
Patch:
@@ -292,7 +292,7 @@ public void testSimpleLogInAnOsgiContext() throws BundleException, ReflectiveOpe
 
 
     /**
-     * Tests the loading of the 1.2 Compatibitility API bundle, its classes should be loadable from the Core bundle, 
+     * Tests the loading of the 1.2 Compatibility API bundle, its classes should be loadable from the Core bundle, 
      * and the class loader should be the same between a class from core and a class from compat
      */
     @Test

File: log4j-core/src/test/java/org/apache/logging/log4j/junit/AbstractExternalFileCleaner.java
Patch:
@@ -160,7 +160,7 @@ public PrintStream getPrintStream() {
 
 	protected void printf(final String format, final Object... args) {
 		if (printStream != null) {
-			printf(format, args);
+			printStream.printf(format, args);
 		}
 	}
 

File: log4j-core/src/test/java/org/apache/logging/log4j/junit/CleanFolders.java
Patch:
@@ -53,7 +53,7 @@ public FileVisitResult postVisitDirectory(final Path dir, final IOException exc)
 
 		protected void printf(final String format, final Object... args) {
 			if (printStream != null) {
-				printf(format, args);
+				printStream.printf(format, args);
 			}
 		}
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java
Patch:
@@ -42,13 +42,11 @@ public class OutputStreamManager extends AbstractManager implements ByteBufferDe
 
     protected OutputStreamManager(final OutputStream os, final String streamName, final Layout<?> layout,
             final boolean writeHeader) {
-        // Can't use new ctor because it throws an exception
         this(os, streamName, layout, writeHeader, Constants.ENCODER_BYTE_BUFFER_SIZE);
     }
 
     protected OutputStreamManager(final OutputStream os, final String streamName, final Layout<?> layout,
             final boolean writeHeader, final int bufferSize) {
-        // Can't use new ctor because it throws an exception
         this(os, streamName, layout, writeHeader, ByteBuffer.wrap(new byte[bufferSize]));
     }
 

File: log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java
Patch:
@@ -100,7 +100,7 @@ private String toStateString(final int state) {
     }
 
     private void loadProvider(final BundleContext bundleContext, final BundleWiring bundleWiring) {
-        final String filter = "(APIVersion>=2.60)";
+        final String filter = "(APIVersion>=2.6.0)";
         try {
             final Collection<ServiceReference<Provider>> serviceReferences = bundleContext.getServiceReferences(Provider.class, filter);
             Provider maxProvider = null;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java
Patch:
@@ -214,7 +214,7 @@ public synchronized void start() {
         ringBufferSize = DisruptorUtil.calculateRingBufferSize("AsyncLoggerConfig.RingBufferSize");
         final WaitStrategy waitStrategy = DisruptorUtil.createWaitStrategy("AsyncLoggerConfig.WaitStrategy");
 
-        final ThreadFactory threadFactory = new Log4jThreadFactory("AsyncLoggerConfig-", true, Thread.NORM_PRIORITY) {
+        final ThreadFactory threadFactory = new Log4jThreadFactory("AsyncLoggerConfig", true, Thread.NORM_PRIORITY) {
             @Override
             public Thread newThread(final Runnable r) {
                 final Thread result = super.newThread(r);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java
Patch:
@@ -255,7 +255,7 @@ public synchronized void checkRollover(final LogEvent event) {
 
     @Override
     public boolean releaseSub(final long timeout, final TimeUnit timeUnit) {
-        LOGGER.debug("Shutting down RollingFileManager {}" + getName());
+        LOGGER.debug("Shutting down RollingFileManager {}", getName());
         boolean stopped = true;
         if (triggeringPolicy instanceof LifeCycle2) {
             stopped &= ((LifeCycle2) triggeringPolicy).stop(timeout, timeUnit);

File: log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java
Patch:
@@ -316,8 +316,7 @@ private static class Environment {
 
         private Environment(final PropertySource propertySource) {
             sources.add(propertySource);
-            Class<PropertySource> serviceClass = PropertySource.class;
-            for (final PropertySource source : ServiceLoader.load(serviceClass, serviceClass.getClassLoader())) {
+            for (final PropertySource source : ServiceLoader.load(PropertySource.class)) {
                 sources.add(source);
             }
             reload();

File: log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java
Patch:
@@ -316,7 +316,8 @@ private static class Environment {
 
         private Environment(final PropertySource propertySource) {
             sources.add(propertySource);
-            for (final PropertySource source : ServiceLoader.load(PropertySource.class)) {
+            Class<PropertySource> serviceClass = PropertySource.class;
+            for (final PropertySource source : ServiceLoader.load(serviceClass, serviceClass.getClassLoader())) {
                 sources.add(source);
             }
             reload();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ReusableLogEventFactory.java
Patch:
@@ -98,7 +98,9 @@ public LogEvent createEvent(final String loggerName, final Marker marker,
      */
     public static void release(final LogEvent logEvent) { // LOG4J2-1583
         if (logEvent instanceof MutableLogEvent) {
-            ((MutableLogEvent) logEvent).reserved = false;
+            MutableLogEvent mutableLogEvent = (MutableLogEvent) logEvent;
+            mutableLogEvent.clear();
+            mutableLogEvent.reserved = false;
         }
     }
 }

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java
Patch:
@@ -2181,7 +2181,8 @@ private void handleLogMessageException(final Exception exception, final String f
             throw (LoggingException) exception;
         }
         final String format = msg.getFormat();
-        final StringBuilder sb = new StringBuilder(format.length() + 100);
+        final int formatLength = format == null ? 4 : format.length();
+        final StringBuilder sb = new StringBuilder(formatLength + 100);
         sb.append(fqcn);
         sb.append(" caught ");
         sb.append(exception.getClass().getName());

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/perftest/AbstractRunQueue.java
Patch:
@@ -21,8 +21,6 @@
 
 import org.apache.logging.log4j.core.async.perftest.ResponseTimeTest.PrintingAsyncQueueFullPolicy;
 
-import com.lmax.disruptor.collections.Histogram;
-
 public abstract class AbstractRunQueue implements IPerfTestRunner {
 
     abstract BlockingQueue<String> createQueue(int capacity);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/perftest/IPerfTestRunner.java
Patch:
@@ -16,8 +16,6 @@
  */
 package org.apache.logging.log4j.core.async.perftest;
 
-import com.lmax.disruptor.collections.Histogram;
-
 public interface IPerfTestRunner {
     String LINE100 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!\"#$%&'()-=^~|\\@`[]{};:+*,.<>/?_123456";
     String THROUGHPUT_MSG = LINE100 + LINE100 + LINE100 + LINE100

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/perftest/MultiThreadPerfTest.java
Patch:
@@ -19,8 +19,6 @@
 import java.io.File;
 import java.util.concurrent.TimeUnit;
 
-import com.lmax.disruptor.collections.Histogram;
-
 public class MultiThreadPerfTest extends PerfTest {
 
     public static void main(final String[] args) throws Exception {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/perftest/PerfTest.java
Patch:
@@ -24,8 +24,6 @@
 
 import org.apache.logging.log4j.core.util.Loader;
 
-import com.lmax.disruptor.collections.Histogram;
-
 /**
  * Single-threaded performance test. Usually invoked from PerfTestDriver as part of a series of tests.
  * <p>

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/perftest/RunLog4j1.java
Patch:
@@ -19,8 +19,6 @@
 import org.apache.log4j.LogManager;
 import org.apache.log4j.Logger;
 
-import com.lmax.disruptor.collections.Histogram;
-
 public class RunLog4j1 implements IPerfTestRunner {
 
     final Logger LOGGER = LogManager.getLogger(getClass());

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/perftest/RunLog4j2.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.CoreLoggerContexts;
-import com.lmax.disruptor.collections.Histogram;
 
 public class RunLog4j2 implements IPerfTestRunner {
     final Logger LOGGER = LogManager.getLogger(getClass());

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/perftest/RunLogback.java
Patch:
@@ -21,8 +21,6 @@
 import ch.qos.logback.classic.Logger;
 import ch.qos.logback.core.spi.LifeCycle;
 
-import com.lmax.disruptor.collections.Histogram;
-
 public class RunLogback implements IPerfTestRunner {
     final Logger LOGGER = (Logger) LoggerFactory.getLogger(getClass());
 

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterConsumer.java
Patch:
@@ -21,6 +21,6 @@ public interface ParameterConsumer<S> {
      * @param parameterIndex Index of the parameter
      * @param state
      */
-    void accept(Object parameter, short parameterIndex, S state);
+    void accept(Object parameter, int parameterIndex, S state);
 
 }

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableObjectMessage.java
Patch:
@@ -114,7 +114,7 @@ public short getParameterCount() {
 
     @Override
     public <S> void forEachParameter(ParameterConsumer<S> action, S state) {
-        action.accept(obj, (short) 0, state);
+        action.accept(obj, 0, state);
     }
 
     @Override

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableObjectMessage.java
Patch:
@@ -55,7 +55,7 @@ public void formatTo(final StringBuilder buffer) {
      */
     @Override
     public String getFormat() {
-        return getFormattedMessage();
+        return obj instanceof String ? (String) obj : null;
     }
 
     /**

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableSimpleMessage.java
Patch:
@@ -43,7 +43,7 @@ public String getFormattedMessage() {
 
     @Override
     public String getFormat() {
-        return getFormattedMessage();
+        return charSequence instanceof String ? (String) charSequence : null;
     }
 
     @Override

File: log4j-api/src/main/java/org/apache/logging/log4j/message/SimpleMessage.java
Patch:
@@ -16,10 +16,11 @@
  */
 package org.apache.logging.log4j.message;
 
+import org.apache.logging.log4j.util.StringBuilderFormattable;
+
 import java.io.IOException;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
-import org.apache.logging.log4j.util.StringBuilderFormattable;
 
 /**
  * The simplest possible implementation of Message. It just returns the String given as the constructor argument.
@@ -75,7 +76,7 @@ public void formatTo(final StringBuilder buffer) {
      */
     @Override
     public String getFormat() {
-        return getFormattedMessage();
+        return message;
     }
 
     /**

File: log4j-api/src/test/java/org/apache/logging/log4j/message/ReusableObjectMessageTest.java
Patch:
@@ -49,8 +49,8 @@ public void testGetFormattedMessage_ReturnsLatestSetString() throws Exception {
     }
 
     @Test
-    public void testGetFormat_InitiallyNullString() throws Exception {
-        assertEquals("null", new ReusableObjectMessage().getFormat());
+    public void testGetFormat_InitiallyNull() throws Exception {
+        assertNull(new ReusableObjectMessage().getFormat());
     }
 
     @Test

File: log4j-api/src/test/java/org/apache/logging/log4j/message/ReusableSimpleMessageTest.java
Patch:
@@ -50,7 +50,7 @@ public void testGetFormattedMessage_ReturnsLatestSetString() throws Exception {
 
     @Test
     public void testGetFormat_InitiallyStringNull() throws Exception {
-        assertEquals("null", new ReusableSimpleMessage().getFormat());
+        assertNull(new ReusableSimpleMessage().getFormat());
     }
 
     @Test

File: log4j-api/src/main/java/org/apache/logging/log4j/util/Strings.java
Patch:
@@ -216,7 +216,7 @@ public static String join(final Iterator<?> iterator, final char separator) {
         }
         final Object first = iterator.next();
         if (!iterator.hasNext()) {
-            return Objects.toString(first);
+            return Objects.toString(first, EMPTY);
         }
 
         // two or more elements

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.logging.log4j.categories.AsyncLoggers;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.util.DummyNanoClock;
-import org.apache.logging.log4j.core.time.FixedPreciseClock;
+import org.apache.logging.log4j.core.time.internal.FixedPreciseClock;
 import org.apache.logging.log4j.util.FilteredObjectInputStream;
 import org.apache.logging.log4j.util.StringMap;
 import org.apache.logging.log4j.core.impl.ThrowableProxy;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/time/MutableInstantTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.log4j.core.time;
 
+import org.apache.logging.log4j.core.time.internal.FixedPreciseClock;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/util/MutableInstantTest.java
Patch:
@@ -183,7 +183,7 @@ public void testInstantToMillisAndNanos() {
     public void testInitFromClock() {
         MutableInstant instant = new MutableInstant();
 
-        PreciseClock clock = new DummyPreciseClock(123456, 789012);
+        PreciseClock clock = new FixedPreciseClock(123456, 789012);
         instant.initFrom(clock);
 
         assertEquals(123456, instant.getEpochMillisecond());

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/DatePatternConverter.java
Patch:
@@ -104,7 +104,7 @@ String format(final Instant instant) {
         void formatToBuffer(final Instant instant, final StringBuilder destination) {
             final long epochSecond = instant.getEpochSecond();
             final int nanoOfSecond = instant.getNanoOfSecond();
-            if (previousTime != epochSecond && nanos != nanoOfSecond) {
+            if (previousTime != epochSecond || nanos != nanoOfSecond) {
                 length = fixedDateFormat.formatInstant(instant, cachedBuffer, 0);
                 previousTime = epochSecond;
                 nanos = nanoOfSecond;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/Instant.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.logging.log4j.core.util;
 
+import org.apache.logging.log4j.util.StringBuilderFormattable;
+
 /**
  * Models a point in time, suitable for event timestamps.
  * <p>
@@ -31,7 +33,7 @@
  * </p>
  * @since 2.11
  */
-public interface Instant {
+public interface Instant extends StringBuilderFormattable {
     /**
      * Gets the number of seconds from the Java epoch of 1970-01-01T00:00:00Z.
      * <p>

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/ClockFactory.java
Patch:
@@ -71,6 +71,8 @@ private static Map<String, Supplier<Clock>> aliases() {
         result.put("SystemClock",       new Supplier<Clock>() { @Override public Clock get() { return new SystemClock(); } });
         result.put("CachedClock",       new Supplier<Clock>() { @Override public Clock get() { return CachedClock.instance(); } });
         result.put("CoarseCachedClock", new Supplier<Clock>() { @Override public Clock get() { return CoarseCachedClock.instance(); } });
+        result.put("org.apache.logging.log4j.core.util.CachedClock", new Supplier<Clock>() { @Override public Clock get() { return CachedClock.instance(); } });
+        result.put("org.apache.logging.log4j.core.util.CoarseCachedClock", new Supplier<Clock>() { @Override public Clock get() { return CoarseCachedClock.instance(); } });
         return result;
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/AbstractFilter.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Users should extend this class to implement filters. Filters can be either context wide or attached to
  * an appender. A filter may choose to support being called only from the context or only from an appender in
- * which case it will only implement the required method(s). The rest will default to return {@link Result#NEUTRAL}.
+ * which case it will only implement the required method(s). The rest will default to return {@link org.apache.logging.log4j.core.Filter.Result#NEUTRAL}.
  * <p>
  * Garbage-free note: the methods with unrolled varargs by default delegate to the
  * {@link #filter(Logger, Level, Marker, String, Object...) filter method with vararg parameters}.

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/CopyOnWriteSortedArrayThreadContextMap.java
Patch:
@@ -170,9 +170,9 @@ public String get(final String key) {
     }
 
     @Override
-    public Object getValue(final String key) {
+    public <V> V getValue(final String key) {
         final StringMap map = localMap.get();
-        return map == null ? null : map.getValue(key);
+        return map == null ? null : map.<V>getValue(key);
     }
 
     @Override

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/GarbageFreeSortedArrayThreadContextMap.java
Patch:
@@ -161,9 +161,9 @@ public String get(final String key) {
     }
 
     @Override
-    public Object getValue(final String key) {
+    public <V> V getValue(final String key) {
         final StringMap map = localMap.get();
-        return map == null ? null : map.getValue(key);
+        return map == null ? null : map.<V>getValue(key);
     }
 
     @Override

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/DefaultThreadContextMap.java
Patch:
@@ -42,7 +42,7 @@ public class DefaultThreadContextMap implements ThreadContextMap, ReadOnlyString
     private final boolean useMap;
     private final ThreadLocal<Map<String, String>> localMap;
 
-    private static boolean InheritableMap;
+    private static boolean inheritableMap;
     
     static {
         init();
@@ -51,7 +51,7 @@ public class DefaultThreadContextMap implements ThreadContextMap, ReadOnlyString
     // LOG4J2-479: by default, use a plain ThreadLocal, only use InheritableThreadLocal if configured.
     // (This method is package protected for JUnit tests.)
     static ThreadLocal<Map<String, String>> createThreadLocalMap(final boolean isMapEnabled) {
-        if (InheritableMap) {
+        if (inheritableMap) {
             return new InheritableThreadLocal<Map<String, String>>() {
                 @Override
                 protected Map<String, String> childValue(final Map<String, String> parentValue) {
@@ -66,7 +66,7 @@ protected Map<String, String> childValue(final Map<String, String> parentValue)
     }
 
     static void init() {
-        InheritableMap = PropertiesUtil.getProperties().getBooleanProperty(INHERITABLE_MAP);
+        inheritableMap = PropertiesUtil.getProperties().getBooleanProperty(INHERITABLE_MAP);
     }
     
     public DefaultThreadContextMap() {

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/ThreadContextMapFactory.java
Patch:
@@ -64,6 +64,7 @@ public final class ThreadContextMapFactory {
     public static void init() {
         CopyOnWriteSortedArrayThreadContextMap.init();
         GarbageFreeSortedArrayThreadContextMap.init();
+        DefaultThreadContextMap.init();
         initPrivate();
     }
 

File: log4j-api/src/test/java/org/apache/logging/log4j/spi/DefaultThreadContextMapTest.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.apache.logging.log4j.ThreadContext;
 import org.junit.Test;
 
 /**
@@ -223,6 +224,7 @@ public void testThreadLocalNotInheritableByDefault() {
     @Test
     public void testThreadLocalInheritableIfConfigured() {
         System.setProperty(DefaultThreadContextMap.INHERITABLE_MAP, "true");
+        ThreadContextMapFactory.init();
         try {
             final ThreadLocal<Map<String, String>> threadLocal = DefaultThreadContextMap.createThreadLocalMap(true);
             assertTrue(threadLocal instanceof InheritableThreadLocal<?>);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/nosql/AbstractNoSqlConnection.java
Patch:
@@ -24,8 +24,8 @@
  *
  * @param <W>
  *            See {@link NoSqlConnection}.
- * @param <T>See
- *            {@link NoSqlConnection}.
+ * @param <T>
+ *            See {@link NoSqlConnection}.
  */
 public abstract class AbstractNoSqlConnection<W, T extends NoSqlObject<W>> implements NoSqlConnection<W, T> {
 

File: log4j-osgi/src/test/java/org/apache/logging/log4j/osgi/tests/AbstractLoadBundleTest.java
Patch:
@@ -77,7 +77,7 @@ private Bundle getCoreBundle() throws BundleException {
     }
     
     private Bundle getDummyBundle() throws BundleException {
-        final Path dumyPath = here.resolveSibling("log4j-samples").resolve("configuration").resolve("target").resolve("log4j-samples-configuration-" + bundleTestInfo.getVersion() + ".jar");
+        final Path dumyPath = here.resolveSibling("log4j-samples").resolve("log4j-samples-configuration").resolve("target").resolve("log4j-samples-configuration-" + bundleTestInfo.getVersion() + ".jar");
         return bundleContext.installBundle(dumyPath.toUri().toString());
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/DriverManagerConnectionSource.java
Patch:
@@ -42,7 +42,7 @@
 public final class DriverManagerConnectionSource implements ConnectionSource {
 
     /**
-     * Builds ConsoleAppender instances.
+     * Builds DriverManagerConnectionSource instances.
      * 
      * @param <B>
      *            The type to build

File: log4j-mongodb/src/test/java/org/apache/logging/log4j/mongodb/MongoDbTestTestRuleTestJava8.java
Patch:
@@ -43,10 +43,10 @@ public static void beforeClass() {
         Assume.assumeTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8));
     }
 
-    public static final AvailablePortSystemPropertyTestRule mongoDbPortTestRule = AvailablePortSystemPropertyTestRule
-            .create(MongoDbTestTestRuleTestJava8.class.getName());
+    private static final AvailablePortSystemPropertyTestRule mongoDbPortTestRule = AvailablePortSystemPropertyTestRule
+            .create(TestConstants.SYS_PROP_NAME_PORT);
 
-    public static final MongoDbTestRule mongoDbTestRule = new MongoDbTestRule(mongoDbPortTestRule.getName());
+    private static final MongoDbTestRule mongoDbTestRule = new MongoDbTestRule(mongoDbPortTestRule.getName());
 
     @ClassRule
     public static RuleChain mongoDbChain = RuleChainFactory.create(mongoDbPortTestRule, mongoDbTestRule);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/db/AbstractDatabaseAppenderTest.java
Patch:
@@ -112,7 +112,7 @@ public void testAppend() {
 
     private static abstract class LocalAbstractDatabaseManager extends AbstractDatabaseManager {
         public LocalAbstractDatabaseManager(final String name, final int bufferSize) {
-            super(name, bufferSize;
+            super(name, bufferSize);
         }
     }
 

File: log4j-mongodb/src/test/java/org/apache/logging/log4j/mongodb/MongoDbMapMessageTestJava8.java
Patch:
@@ -54,7 +54,7 @@ public class MongoDbMapMessageTestJava8 {
     @Test
     public void test() {
         final Logger logger = LogManager.getLogger();
-        final MapMessage<?, Object> map = new MapMessage<>();
+        final MapMessage map = new MapMessage();
         map.with("SomeName", "SomeValue");
         map.with("SomeInt", 1);
         logger.info(map);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
Patch:
@@ -390,7 +390,8 @@ public Configuration getConfiguration(final LoggerContext loggerContext, final S
                 return config;
             }
             LOGGER.error("No Log4j 2 configuration file found. " +
-                    "Using default configuration: logging only errors to the console. " +
+                    "Using default configuration (logging only errors to the console), " +
+                    "or user programmatically provided configurations. " +
                     "Set system property 'log4j2.debug' " +
                     "to show Log4j 2 internal initialization logging. " +
                     "See https://logging.apache.org/log4j/2.x/manual/configuration.html for instructions on how to configure Log4j 2");

File: log4j-core/src/test/java/org/apache/logging/log4j/core/pattern/PatternParserTest.java
Patch:
@@ -117,7 +117,7 @@ public void testCustomPattern() {
             formatter.format(event, buf);
         }
         final String str = buf.toString();
-        final String expected = "INFO  [PatternParserTest        :102 ] - Hello, world" + Strings.LINE_SEPARATOR;
+        final String expected = "INFO  [PatternParserTest        :103 ] - Hello, world" + Strings.LINE_SEPARATOR;
         assertTrue("Expected to end with: " + expected + ". Actual: " + str, str.endsWith(expected));
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
Patch:
@@ -389,10 +389,11 @@ public Configuration getConfiguration(final LoggerContext loggerContext, final S
             if (config != null) {
                 return config;
             }
-            LOGGER.error("No log4j2 configuration file found. " +
+            LOGGER.error("No Log4j 2 configuration file found. " +
                     "Using default configuration: logging only errors to the console. " +
                     "Set system property 'log4j2.debug' " +
-                    "to show Log4j2 internal initialization logging.");
+                    "to show Log4j 2 internal initialization logging. " +
+                    "See https://logging.apache.org/log4j/2.x/manual/configuration.html for instructions on how to configure Log4j 2");
             return new DefaultConfiguration();
         }
 

File: log4j-api/src/main/java/org/apache/logging/log4j/util/SortedArrayStringMap.java
Patch:
@@ -139,7 +139,7 @@ public SortedArrayStringMap() {
 
     public SortedArrayStringMap(final int initialCapacity) {
         if (initialCapacity < 0) {
-            throw new IllegalArgumentException("Initial capacity must be at least one but was " + initialCapacity);
+            throw new IllegalArgumentException("Initial capacity must be at least zero but was " + initialCapacity);
         }
         threshold = ceilingNextPowerOfTwo(initialCapacity == 0 ? 1 : initialCapacity);
     }

File: log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.Map;
 
 import org.apache.logging.log4j.util.EnglishEnums;
-import org.apache.logging.log4j.util.MultiFormatStringBuilderFormattable;
 import org.apache.logging.log4j.util.StringBuilders;
 
 /**

File: log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java
Patch:
@@ -35,7 +35,7 @@
  * @see <a href="https://tools.ietf.org/html/rfc5424">RFC 5424</a>
  */
 @AsynchronouslyFormattable
-public class StructuredDataMessage extends MapMessage<StructuredDataMessage, String> implements MultiFormatStringBuilderFormattable {
+public class StructuredDataMessage extends MapMessage<StructuredDataMessage, String> {
 
     private static final long serialVersionUID = 1703221292892071920L;
     private static final int MAX_LENGTH = 32;

File: log4j-api/src/main/java/org/apache/logging/log4j/util/SortedArrayStringMap.java
Patch:
@@ -106,7 +106,7 @@ public void accept(final String key, final Object value, final StringMap context
         Method newMethod = null;
         try {
             if (setMethod != null) {
-                Class clazz = Class.forName("org.apache.logging.log4j.util.internal.DefaultObjectInputFilter");
+                Class<?> clazz = Class.forName("org.apache.logging.log4j.util.internal.DefaultObjectInputFilter");
                 methods = clazz.getMethods();
                 for (Method method : methods) {
                     if (method.getName().equals("newInstance") && Modifier.isStatic(method.getModifiers())) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java
Patch:
@@ -171,6 +171,8 @@ public void mergConfigurations(final Node target, final Node source, final Plugi
                                         if (!foundFilter) {
                                             final Node childNode = new Node(loggerNode, sourceLoggerChild.getName(),
                                                     sourceLoggerChild.getType());
+                                            childNode.getAttributes().putAll(sourceLoggerChild.getAttributes());
+                                            childNode.getChildren().addAll(sourceLoggerChild.getChildren());
                                             targetNode.getChildren().add(childNode);
                                         }
                                     } else {

File: log4j-api/src/main/java/org/apache/logging/log4j/util/StringBuilders.java
Patch:
@@ -95,6 +95,8 @@ public static boolean appendSpecificTypes(final StringBuilder stringBuilder, fin
             stringBuilder.append(((Short) obj).shortValue());
         } else if (obj instanceof Float) {
             stringBuilder.append(((Float) obj).floatValue());
+        } else if (obj instanceof Byte) {
+            stringBuilder.append(((Byte) obj).byteValue());
         } else {
             return false;
         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/Constants.java
Patch:
@@ -61,7 +61,7 @@ public final class Constants {
      * @since 2.10
      */
     public static final boolean FORMAT_MESSAGES_PATTERN_DISABLE_LOOKUPS = PropertiesUtil.getProperties().getBooleanProperty(
-            "log4j.formatMsgNoLookups", false);
+            "log4j2.formatMsgNoLookups", false);
 
     /**
      * {@code true} if we think we are running in a web container, based on the boolean value of system property

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/LevelMixIn.java
Patch:
@@ -34,8 +34,8 @@
 @JsonIgnoreProperties({ "name", "declaringClass", "standardLevel" })
 abstract class LevelMixIn {
 
-    @JsonCreator
-    public static Level getLevel(@JsonProperty("name") final String name) {
+    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
+    public static Level getLevel(final String name) {
         return null;
     }
 

File: log4j-api/src/test/java/org/apache/logging/log4j/message/ReusableParameterizedMessageTest.java
Patch:
@@ -42,7 +42,7 @@ public void testNoArgs() {
 
         msg.set(testMsg, (Object) null);
         result = msg.getFormattedMessage();
-        assertEquals(testMsg, result);
+        assertEquals("Test message null", result);
 
         msg.set(testMsg, null, null);
         result = msg.getFormattedMessage();
@@ -108,8 +108,8 @@ public void testFormatStringArgsWithTrailingEscapedEscape() {
     @Test
     public void testFormatStringArgsWithEscapedEscape() {
         final String testMsg = "Test message \\\\{}{} {}";
-        final String[] args = { "a", "b", "c" };
-        final String result = new ReusableParameterizedMessage().set(testMsg, (Object[]) args).getFormattedMessage();
+        final Object[] args = { "a", "b", "c" };
+        final String result = new ReusableParameterizedMessage().set(testMsg, args).getFormattedMessage();
         assertEquals("Test message \\ab c", result);
     }
 

File: log4j-api/src/main/java/org/apache/logging/log4j/util/StackLocator.java
Patch:
@@ -73,7 +73,7 @@ public final class StackLocator {
                 o = getCallerClass.invoke(null, 1);
                 if (o == sunReflectionClass) {
                     System.out.println("WARNING: Java 1.7.0_25 is in use which has a broken implementation of Reflection.getCallerClass(). " +
-                        " Plesae consider upgrading to Java 1.7.0_40 or later.");
+                        " Please consider upgrading to Java 1.7.0_40 or later.");
                     java7u25CompensationOffset = 1;
                 }
             }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/kafka/KafkaManager.java
Patch:
@@ -102,7 +102,6 @@ public void run() {
 
     public void send(final byte[] msg) throws ExecutionException, InterruptedException, TimeoutException {
         if (producer != null) {
-
             byte[] newKey = null;
 
             if(key != null && key.contains("${")) {

File: log4j-api/src/main/java/org/apache/logging/log4j/util/EnvironmentPropertySource.java
Patch:
@@ -23,7 +23,7 @@
  * with {@code LOG4J_} so as not to conflict with other variables. Normalized environment variables follow a scheme
  * like this: {@code log4j2.fooBarProperty} would normalize to {@code LOG4J_FOO_BAR_PROPERTY}.
  *
- * @since 2.9.1
+ * @since 2.10.0
  */
 public class EnvironmentPropertySource implements PropertySource {
     @Override

File: log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesPropertySource.java
Patch:
@@ -23,7 +23,7 @@
  * PropertySource backed by a {@link Properties} instance. Normalized property names follow a scheme like this:
  * {@code Log4jContextSelector} would normalize to {@code log4j2.contextSelector}.
  *
- * @since 2.9.1
+ * @since 2.10.0
  */
 public class PropertiesPropertySource implements PropertySource {
 

File: log4j-api/src/main/java/org/apache/logging/log4j/util/PropertyFilePropertySource.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * PropertySource backed by a properties file. Follows the same conventions as {@link PropertiesPropertySource}.
  *
- * @since 2.9.1
+ * @since 2.10.0
  */
 public class PropertyFilePropertySource extends PropertiesPropertySource {
 

File: log4j-api/src/main/java/org/apache/logging/log4j/util/PropertySource.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * A source for global configuration properties.
  *
- * @since 2.9.1
+ * @since 2.10.0
  */
 public interface PropertySource {
 
@@ -59,7 +59,7 @@ public interface PropertySource {
     /**
      * Comparator for ordering PropertySource instances by priority.
      *
-     * @since 2.9.1
+     * @since 2.10.0
      */
     class Comparator implements java.util.Comparator<PropertySource>, Serializable {
         private static final long serialVersionUID = 1L;
@@ -73,7 +73,7 @@ public int compare(final PropertySource o1, final PropertySource o2) {
     /**
      * Utility methods useful for PropertySource implementations.
      *
-     * @since 2.9.1
+     * @since 2.10.0
      */
     final class Util {
         private static final String PREFIXES = "(?i:^log4j2?[-._/]?|^org\\.apache\\.logging\\.log4j\\.)?";

File: log4j-api/src/main/java/org/apache/logging/log4j/util/SystemPropertiesPropertySource.java
Patch:
@@ -22,7 +22,7 @@
  * PropertySource backed by the current system properties. Other than having a higher priority over normal properties,
  * this follows the same rules as {@link PropertiesPropertySource}.
  *
- * @since 2.9.1
+ * @since 2.10.0
  */
 public class SystemPropertiesPropertySource implements PropertySource {
 

File: log4j-api/src/test/java/org/apache/logging/log4j/util/PropertiesPropertySourceTest.java
Patch:
@@ -27,9 +27,6 @@
 
 import static org.junit.Assert.assertEquals;
 
-/**
- *
- */
 @RunWith(Parameterized.class)
 public class PropertiesPropertySourceTest {
 

File: log4j-api/src/test/java/org/apache/logging/log4j/util/PropertySourceCamelCaseTest.java
Patch:
@@ -26,9 +26,6 @@
 
 import static org.junit.Assert.assertEquals;
 
-/**
- *
- */
 @RunWith(Parameterized.class)
 public class PropertySourceCamelCaseTest {
 

File: log4j-api/src/test/java/org/apache/logging/log4j/util/PropertySourceTokenizerTest.java
Patch:
@@ -26,9 +26,6 @@
 
 import static org.junit.Assert.assertEquals;
 
-/**
- *
- */
 @RunWith(Parameterized.class)
 public class PropertySourceTokenizerTest {
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.logging.log4j.core.config.ConfigurationFactory;
 import org.apache.logging.log4j.core.config.DefaultConfiguration;
 import org.apache.logging.log4j.status.StatusLogger;
+import org.apache.logging.log4j.util.PropertiesUtil;
 import org.junit.Test;
 import org.junit.experimental.categories.Category;
 
@@ -52,6 +53,7 @@ public void setUp(final String configFileName) throws SQLException {
 
         System.setProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY,
                 "org/apache/logging/log4j/core/appender/db/jpa/" + configFileName);
+        PropertiesUtil.getProperties().reload();
         final LoggerContext context = LoggerContext.getContext(false);
         if (context.getConfiguration() instanceof DefaultConfiguration) {
             context.reconfigure();
@@ -69,6 +71,7 @@ public void tearDown() throws SQLException {
             ((JpaAppender) appender).getManager().close();
         } finally {
             System.clearProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY);
+            PropertiesUtil.getProperties().reload();
             context.reconfigure();
             StatusLogger.getLogger().reset();
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/AbstractAsyncThreadContextTestBase.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.logging.log4j.spi.DefaultThreadContextMap;
 import org.apache.logging.log4j.spi.LoggerContext;
 import org.apache.logging.log4j.spi.ReadOnlyThreadContextMap;
+import org.apache.logging.log4j.util.PropertiesUtil;
 import org.apache.logging.log4j.util.Unbox;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
@@ -88,6 +89,7 @@ void init() {
             System.clearProperty("log4j2.threadContextMap");
             final String PACKAGE = "org.apache.logging.log4j.spi.";
             System.setProperty("log4j2.threadContextMap", PACKAGE + implClassSimpleName());
+            PropertiesUtil.getProperties().reload();
             ThreadContextTestAccess.init();
         }
 

File: log4j-api/src/test/java/org/apache/logging/log4j/util/CharsetForNameMain.java
Patch:
@@ -25,12 +25,13 @@ public class CharsetForNameMain {
      * Checks that the given Charset names can be loaded.
      */
     public static void main(String[] args) {
-        for (String charsetName : args) {
+        for (String value : args) {
+            final String charsetName = value.trim();
             if (Charset.isSupported(charsetName)) {
                 Charset cs = Charset.forName(charsetName);
                 System.out.println(String.format("%s -> %s  aliases: %s", charsetName, cs.name(), cs.aliases()));
             } else {
-                System.out.println("Cannot load " + charsetName);
+                System.err.println("Not supported:" + charsetName);
             }
         }
     }

File: log4j-api/src/main/java/org/apache/logging/log4j/util/LowLevelLogUtil.java
Patch:
@@ -34,7 +34,9 @@ final class LowLevelLogUtil {
     private static PrintWriter writer = new PrintWriter(System.err, true);
 
     public static void logException(final Throwable exception) {
-        exception.printStackTrace(writer);
+        if (exception != null) {
+            exception.printStackTrace(writer);
+        }
     }
 
     public static void logException(final String message, final Throwable exception) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JsonLayout.java
Patch:
@@ -62,7 +62,7 @@
  * <h3>Additional Fields</h3>
  * <p>
  * This property allows addition of custom fields into generated JSON.
- * {@code <JsonLayout><KeyValuePair key="foo" value="bar"/></JsonLayout>} inserts {@code "key":"bar"} directly
+ * {@code <JsonLayout><KeyValuePair key="foo" value="bar"/></JsonLayout>} inserts {@code "foo":"bar"} directly
  * into JSON output. Supports Lookup expressions.
  * </p>
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/QueueFullAsyncLoggerConfigLoggingFromToStringTest.java
Patch:
@@ -35,7 +35,7 @@
 import static org.junit.Assert.*;
 
 /**
- * Tests queue full scenarios with pure AsyncLoggers (all loggers async).
+ * Tests queue full scenarios with AsyncLoggers in configuration.
  */
 @RunWith(BlockJUnit4ClassRunner.class)
 @Category(AsyncLoggers.class)

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/QueueFullAsyncLoggerConfigTest.java
Patch:
@@ -39,7 +39,7 @@
 import static org.junit.Assert.*;
 
 /**
- * Tests queue full scenarios with pure AsyncLoggers (all loggers async).
+ * Tests queue full scenarios with AsyncLoggers in configuration.
  */
 @RunWith(BlockJUnit4ClassRunner.class)
 @Category(AsyncLoggers.class)

File: log4j-core/src/test/java/org/apache/logging/log4j/core/PropertiesFileConfigTest.java
Patch:
@@ -55,14 +55,14 @@ public void testReconfiguration() throws Exception {
         assertTrue("setLastModified should have succeeded.", file.setLastModified(newTime));
         TimeUnit.SECONDS.sleep(MONITOR_INTERVAL_SECONDS + 1);
         for (int i = 0; i < 17; ++i) {
-            logger.debug("Reconfigure");
+            logger.info("Reconfigure");
         }
-        final int loopCount = 0;
+        int loopCount = 0;
         Configuration newConfig;
         do {
             Thread.sleep(100);
             newConfig = context.getConfiguration();
-        } while (newConfig == oldConfig && loopCount < 5);
+        } while (newConfig == oldConfig && loopCount++ < 5);
         assertNotSame("Reconfiguration failed", newConfig, oldConfig);
     }
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java
Patch:
@@ -203,10 +203,10 @@ private boolean hasLog4jBeenShutDown(final Disruptor<RingBufferLogEvent> aDisrup
     }
 
     public boolean tryPublish(final RingBufferLogEventTranslator translator) {
-        // LOG4J2-639: catch NPE if disruptor field was set to null in stop()
         try {
             return disruptor.getRingBuffer().tryPublishEvent(translator);
         } catch (final NullPointerException npe) {
+            // LOG4J2-639: catch NPE if disruptor field was set to null in stop()
             LOGGER.warn("[{}] Ignoring log event after log4j was shut down: {} [{}] {}", contextName,
                     translator.level, translator.loggerName, translator.message.getFormattedMessage()
                             + (translator.thrown == null ? "" : Throwables.toStringList(translator.thrown)));
@@ -215,13 +215,13 @@ public boolean tryPublish(final RingBufferLogEventTranslator translator) {
     }
 
     void enqueueLogMessageInfo(final RingBufferLogEventTranslator translator) {
-        // LOG4J2-639: catch NPE if disruptor field was set to null in stop()
         try {
             // Note: we deliberately access the volatile disruptor field afresh here.
             // Avoiding this and using an older reference could result in adding a log event to the disruptor after it
             // was shut down, which could cause the publishEvent method to hang and never return.
             disruptor.publishEvent(translator);
         } catch (final NullPointerException npe) {
+            // LOG4J2-639: catch NPE if disruptor field was set to null in stop()
             LOGGER.warn("[{}] Ignoring log event after log4j was shut down: {} [{}] {}", contextName,
                     translator.level, translator.loggerName, translator.message.getFormattedMessage()
                             + (translator.thrown == null ? "" : Throwables.toStringList(translator.thrown)));

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/DefaultAsyncQueueFullPolicyTest.java
Patch:
@@ -38,10 +38,10 @@ private static long otherThreadId() {
     }
 
     @Test
-    public void testGetRouteSynchronousIfQueueFullAndCalledFromDifferentThread() throws Exception {
+    public void testGetRouteEnqueuesIfQueueFullAndCalledFromDifferentThread() throws Exception {
         final DefaultAsyncQueueFullPolicy router = new DefaultAsyncQueueFullPolicy();
-        assertEquals(EventRoute.SYNCHRONOUS, router.getRoute(otherThreadId(), Level.ALL));
-        assertEquals(EventRoute.SYNCHRONOUS, router.getRoute(otherThreadId(), Level.OFF));
+        assertEquals(EventRoute.ENQUEUE, router.getRoute(otherThreadId(), Level.ALL));
+        assertEquals(EventRoute.ENQUEUE, router.getRoute(otherThreadId(), Level.OFF));
     }
 
     @Test

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java
Patch:
@@ -60,7 +60,7 @@
 @Plugin(name = "Async", category = Core.CATEGORY_NAME, elementType = Appender.ELEMENT_TYPE, printObject = true)
 public final class AsyncAppender extends AbstractAppender {
 
-    private static final int DEFAULT_QUEUE_SIZE = 128;
+    private static final int DEFAULT_QUEUE_SIZE = 1024;
     private static final LogEvent SHUTDOWN_LOG_EVENT = new AbstractLogEvent() {
     };
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java
Patch:
@@ -213,7 +213,7 @@ private static void setFeature(final DocumentBuilderFactory factory, final Strin
             factory.setFeature(featureName, value);
         } catch (ParserConfigurationException e) {
             throw e;
-        } catch (Exception e) {
+        } catch (Exception | LinkageError e) {
             getStatusLogger().error("Caught {} setting feature {} to {} on DocumentBuilderFactory {}: {}",
                     e.getClass().getCanonicalName(), featureName, value, factory, e, e);
         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java
Patch:
@@ -138,7 +138,7 @@ private Rfc5424Layout(final Configuration config, final Facility facility, final
         this.includeMdc = includeMDC;
         this.includeNewLine = includeNL;
         this.escapeNewLine = escapeNL == null ? null : Matcher.quoteReplacement(escapeNL);
-        this.mdcId = mdcId;
+        this.mdcId = id == null ? DEFAULT_MDCID : id;
         this.mdcSdId = new StructuredDataId(mdcId, enterpriseNumber, null, null);
         this.mdcPrefix = mdcPrefix;
         this.eventPrefix = eventPrefix;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingFileAppenderUpdateDataTest.java
Patch:
@@ -88,8 +88,8 @@ public void testNotClosingLoggerContext() {
         validateAppender(loggerContext2, "foo.log.%d{yyyy-MM-dd-HH:mm:ss}.%i");
     }
 
-    private void validateAppender(final LoggerContext loggerContext1, final String expectedFilePattern) {
-        final RollingFileAppender appender = loggerContext1.getConfiguration().getAppender("fooAppender");
+    private void validateAppender(final LoggerContext loggerContext, final String expectedFilePattern) {
+        final RollingFileAppender appender = loggerContext.getConfiguration().getAppender("fooAppender");
         Assert.assertNotNull(appender);
         Assert.assertEquals(expectedFilePattern, appender.getFilePattern());
         LogManager.getLogger("root").info("just to show it works.");

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/api/ComponentBuilder.java
Patch:
@@ -62,15 +62,15 @@ public interface ComponentBuilder<T extends ComponentBuilder<T>> extends Builder
     /**
      * Adds a boolean attribute.
      * @param key The attribute key.
-     * @param value The integer value.
+     * @param value The boolean value.
      * @return This ComponentBuilder.
      */
     T addAttribute(String key, boolean value);
 
     /**
      * Adds an Object attribute.
      * @param key The attribute key.
-     * @param value The integer value.
+     * @param value The object value.
      * @return This ComponentBuilder.
      */
     T addAttribute(String key, Object value);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/StoreConfiguration.java
Patch:
@@ -90,7 +90,7 @@ public boolean equals(final Object obj) {
         if (getClass() != obj.getClass()) {
             return false;
         }
-        final StoreConfiguration other = (StoreConfiguration) obj;
+        final StoreConfiguration<?> other = (StoreConfiguration<?>) obj;
         if (location == null) {
             if (other.location != null) {
                 return false;

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java
Patch:
@@ -2126,9 +2126,9 @@ private void handleLogMessageException(final Exception exception, final String f
         final String format = msg.getFormat();
         final StringBuilder sb = new StringBuilder(format.length() + 100);
         sb.append(fqcn);
-        sb.append(": ");
+        sb.append(" caught ");
         sb.append(exception.getClass().getName());
-        sb.append(" logging a ");
+        sb.append(" logging ");
         sb.append(msg.getClass().getSimpleName());
         sb.append(": ");
         sb.append(format);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rewrite/MapRewritePolicy.java
Patch:
@@ -65,8 +65,7 @@ public LogEvent rewrite(final LogEvent source) {
         }
 
         @SuppressWarnings("unchecked")
-        final
-        MapMessage<?, Object> mapMsg = (MapMessage<?, Object>) msg;
+        final MapMessage<?, Object> mapMsg = (MapMessage<?, Object>) msg;
         final Map<String, Object> newMap = new HashMap<>(mapMsg.getData());
         switch (mode) {
             case Add: {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/parser/AbstractJacksonLogEventParser.java
Patch:
@@ -13,7 +13,8 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the license for the specific language governing permissions and
  * limitations under the license.
- */package org.apache.logging.log4j.core.parser;
+ */
+package org.apache.logging.log4j.core.parser;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/parser/XmlLogEventParserTest.java
Patch:
@@ -98,7 +98,7 @@ public void testStringInvalidXml() throws ParseException {
 
     @Test(expected = ParseException.class)
     public void testStringInvalidProperty() throws ParseException {
-        parser.parseFrom("{\"foo\":\"bar\"}");
+        parser.parseFrom("<Event><foo>bar</foo></Event>");
     }
 
     @Test

File: log4j-core/src/test/java/org/apache/logging/log4j/core/parser/YamlLogEventParserTest.java
Patch:
@@ -92,7 +92,7 @@ public void testStringInvalidYaml() throws ParseException {
 
     @Test(expected = ParseException.class)
     public void testStringInvalidProperty() throws ParseException {
-        parser.parseFrom("{\"foo\":\"bar\"}");
+        parser.parseFrom("---\nfoo: \"bar\"\n");
     }
 
     @Test

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/CommonsCompressAction.java
Patch:
@@ -33,10 +33,10 @@
  */
 public final class CommonsCompressAction extends AbstractAction {
 
-    private static final int BUF_SIZE = 8102;
+    private static final int BUF_SIZE = 8192;
 
     /**
-     * Compressor name. One of "gz", "bzip2", "xz", "pack200", or "deflate".
+     * Compressor name. One of "gz", "bzip2", "xz", "pack200" or "deflate".
      */
     private final String name;
 
@@ -140,7 +140,7 @@ protected void reportException(final Exception ex) {
 
     @Override
     public String toString() {
-        return CommonsCompressAction.class.getSimpleName() + '[' + source + " to " + destination //
+        return CommonsCompressAction.class.getSimpleName() + '[' + source + " to " + destination 
                 + ", deleteSource=" + deleteSource + ']';
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/DeleteAction.java
Patch:
@@ -199,7 +199,7 @@ protected FileVisitor<Path> createFileVisitor(final Path visitorBaseDir, final L
     @PluginFactory
     public static DeleteAction createDeleteAction(
             // @formatter:off
-            @PluginAttribute("basePath") final String basePath, //
+            @PluginAttribute("basePath") final String basePath, 
             @PluginAttribute(value = "followLinks") final boolean followLinks,
             @PluginAttribute(value = "maxDepth", defaultInt = 1) final int maxDepth,
             @PluginAttribute(value = "testMode") final boolean testMode,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java
Patch:
@@ -174,7 +174,7 @@ public static boolean execute(final File source, final File destination, final b
 
     @Override
     public String toString() {
-        return FileRenameAction.class.getSimpleName() + '[' + source + " to " + destination //
+        return FileRenameAction.class.getSimpleName() + '[' + source + " to " + destination
                 + ", renameEmptyFiles=" + renameEmptyFiles + ']';
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/GzCompressAction.java
Patch:
@@ -29,7 +29,7 @@
  */
 public final class GzCompressAction extends AbstractAction {
 
-    private static final int BUF_SIZE = 8102;
+    private static final int BUF_SIZE = 8192;
 
     /**
      * Source file.
@@ -121,7 +121,7 @@ protected void reportException(final Exception ex) {
 
     @Override
     public String toString() {
-        return GzCompressAction.class.getSimpleName() + '[' + source + " to " + destination //
+        return GzCompressAction.class.getSimpleName() + '[' + source + " to " + destination 
                 + ", deleteSource=" + deleteSource + ']';
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/IfAccumulatedFileCount.java
Patch:
@@ -94,7 +94,7 @@ public void beforeFileTreeWalk() {
      * @return An IfAccumulatedFileCount condition.
      */
     @PluginFactory
-    public static IfAccumulatedFileCount createFileCountCondition( //
+    public static IfAccumulatedFileCount createFileCountCondition( 
             // @formatter:off
             @PluginAttribute(value = "exceeds", defaultInt = Integer.MAX_VALUE) final int threshold,
             @PluginElement("PathConditions") final PathCondition... nestedConditions) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/IfAccumulatedFileSize.java
Patch:
@@ -96,7 +96,7 @@ public void beforeFileTreeWalk() {
      * @return An IfAccumulatedFileSize condition.
      */
     @PluginFactory
-    public static IfAccumulatedFileSize createFileSizeCondition( //
+    public static IfAccumulatedFileSize createFileSizeCondition( 
             // @formatter:off
             @PluginAttribute("exceeds") final String size,
             @PluginElement("PathConditions") final PathCondition... nestedConditions) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/IfAll.java
Patch:
@@ -105,7 +105,7 @@ public static void beforeFileTreeWalk(final PathCondition[] nestedConditions) {
      * @return A Composite PathCondition.
      */
     @PluginFactory
-    public static IfAll createAndCondition( //
+    public static IfAll createAndCondition( 
             @PluginElement("PathConditions") final PathCondition... components) {
         return new IfAll(components);
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/IfAny.java
Patch:
@@ -75,7 +75,7 @@ public void beforeFileTreeWalk() {
      * @return A Composite PathCondition.
      */
     @PluginFactory
-    public static IfAny createOrCondition( //
+    public static IfAny createOrCondition( 
             @PluginElement("PathConditions") final PathCondition... components) {
         return new IfAny(components);
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/IfFileName.java
Patch:
@@ -133,10 +133,10 @@ public void beforeFileTreeWalk() {
      * @see FileSystem#getPathMatcher(String)
      */
     @PluginFactory
-    public static IfFileName createNameCondition( //
+    public static IfFileName createNameCondition( 
             // @formatter:off
-            @PluginAttribute("glob") final String glob, //
-            @PluginAttribute("regex") final String regex, //
+            @PluginAttribute("glob") final String glob, 
+            @PluginAttribute("regex") final String regex, 
             @PluginElement("PathConditions") final PathCondition... nestedConditions) {
             // @formatter:on
         return new IfFileName(glob, regex, nestedConditions);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/IfLastModified.java
Patch:
@@ -98,9 +98,9 @@ public void beforeFileTreeWalk() {
      * @return An IfLastModified condition.
      */
     @PluginFactory
-    public static IfLastModified createAgeCondition( //
+    public static IfLastModified createAgeCondition( 
             // @formatter:off
-            @PluginAttribute("age") final Duration age, //
+            @PluginAttribute("age") final Duration age, 
             @PluginElement("PathConditions") final PathCondition... nestedConditions) {
             // @formatter:on
         return new IfLastModified(age, nestedConditions);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/IfNot.java
Patch:
@@ -66,7 +66,7 @@ public void beforeFileTreeWalk() {
      * @return An IfNot PathCondition.
      */
     @PluginFactory
-    public static IfNot createNotCondition( //
+    public static IfNot createNotCondition( 
             @PluginElement("PathConditions") final PathCondition condition) {
         return new IfNot(condition);
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ZipCompressAction.java
Patch:
@@ -29,7 +29,7 @@
  */
 public final class ZipCompressAction extends AbstractAction {
 
-    private static final int BUF_SIZE = 8102;
+    private static final int BUF_SIZE = 8192;
 
     /**
      * Source file.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java
Patch:
@@ -148,7 +148,7 @@ protected static void trimToMaxSize(final StringBuilder stringBuilder) {
     /**
      * The charset for the formatted message.
      */
-    // LOG4J2-1099: charset cannot be final due to serialization needs, so we serialize as charset name instead
+    // LOG4J2-1099: Charset cannot be final due to serialization needs, so we serialize as Charset name instead
     private transient Charset charset;
 
     private final String charsetName;

File: log4j-api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java
Patch:
@@ -108,7 +108,7 @@ private StatusLogger(final String name, final MessageFactory messageFactory) {
 
     // LOG4J2-1813 if system property "log4j2.debug" is defined, print all status logging
     private boolean isDebugPropertyEnabled() {
-        return PropertiesUtil.getProperties().hasProperty(Constants.LOG4J2_DEBUG);
+        return PropertiesUtil.getProperties().getBooleanProperty(Constants.LOG4J2_DEBUG, false, true);
     }
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/ThrowableProxyWithStacktraceAsStringMixIn.java
Patch:
@@ -58,6 +58,7 @@ abstract class ThrowableProxyWithStacktraceAsStringMixIn {
     public abstract String getCauseStackTraceAsString();
 
     @JsonProperty(JsonConstants.ELT_EXTENDED_STACK_TRACE)
+    @JacksonXmlProperty(namespace = XmlConstants.XML_NAMESPACE, localName = XmlConstants.ELT_EXTENDED_STACK_TRACE)
     public abstract String getExtendedStackTraceAsString();
 
     @JsonIgnore

File: log4j-core/src/test/java/org/apache/logging/log4j/core/layout/JsonLayoutTest.java
Patch:
@@ -373,11 +373,11 @@ public void testExcludeStacktrace() throws Exception {
     @Test
     public void testStacktraceAsString() throws Exception {
         final String str = prepareJSONForStacktraceTests(true);
-        assertTrue(str, str.contains("\"extendedStackTrace\":\""));
+        assertTrue(str, str.contains("\"extendedStackTrace\":\"java.lang.NullPointerException"));
     }
 
     @Test
-    public void testStacktraceAsMap() throws Exception {
+    public void testStacktraceAsNonString() throws Exception {
         final String str = prepareJSONForStacktraceTests(false);
         assertTrue(str, str.contains("\"extendedStackTrace\":["));
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/JmsManager.java
Patch:
@@ -261,7 +261,7 @@ private boolean closeConnection() {
             return true;
         } catch (final JMSException e) {
             StatusLogger.getLogger().debug(
-                    "Caught exception closing JMS Connection: {} ({}); contiuing JMS manager shutdown",
+                    "Caught exception closing JMS Connection: {} ({}); continuing JMS manager shutdown",
                     e.getLocalizedMessage(), temp, e);
             return false;
         }
@@ -288,7 +288,7 @@ private boolean closeMessageProducer() {
             return true;
         } catch (final JMSException e) {
             StatusLogger.getLogger().debug(
-                    "Caught exception closing JMS MessageProducer: {} ({}); contiuing JMS manager shutdown",
+                    "Caught exception closing JMS MessageProducer: {} ({}); continuing JMS manager shutdown",
                     e.getLocalizedMessage(), temp, e);
             return false;
         }
@@ -305,7 +305,7 @@ private boolean closeSession() {
             return true;
         } catch (final JMSException e) {
             StatusLogger.getLogger().debug(
-                    "Caught exception closing JMS Session: {} ({}); contiuing JMS manager shutdown",
+                    "Caught exception closing JMS Session: {} ({}); continuing JMS manager shutdown",
                     e.getLocalizedMessage(), temp, e);
             return false;
         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java
Patch:
@@ -210,7 +210,7 @@ protected void write(final byte[] bytes, final int offset, final int length, fin
                 reconnector.latch();
             }
             if (socket == null) {
-                final String msg = "Error writing to " + getName() + " socket not available";
+                final String msg = "Error writing to " + getName() + ": socket not available";
                 throw new AppenderLoggingException(msg);
             }
         }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/OutputStreamManagerTest.java
Patch:
@@ -51,7 +51,7 @@ public void narrow() throws Exception {
         assertEquals(Level.ERROR, data.getLevel());
         assertEquals("Could not create plugin of type class org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender for element RollingRandomAccessFile",
                 data.getMessage().getFormattedMessage());
-        assertEquals("org.apache.logging.log4j.core.config.ConfigurationException: Configuration has multiple incompatible Appenders pointing to the same file target/multiIncompatibleAppender.log",
+        assertEquals("org.apache.logging.log4j.core.config.ConfigurationException: Configuration has multiple incompatible Appenders pointing to the same resource 'target/multiIncompatibleAppender.log'",
                 data.getThrowable().toString());
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
Patch:
@@ -465,8 +465,8 @@ public Configuration getConfiguration(final LoggerContext loggerContext, final S
             }
             LOGGER.error("No log4j2 configuration file found. " +
                     "Using default configuration: logging only errors to the console. " +
-                    "Set system property 'org.apache.logging.log4j.simplelog.StatusLogger.level'" +
-                    " to TRACE to show Log4j2 internal initialization logging.");
+                    "Set system property 'log4j2.debug' " +
+                    "to show Log4j2 internal initialization logging.");
             return new DefaultConfiguration();
         }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileManager.java
Patch:
@@ -101,8 +101,8 @@ protected MemoryMappedFileManager(final RandomAccessFile file, final String file
     public static MemoryMappedFileManager getFileManager(final String fileName, final boolean append,
             final boolean immediateFlush, final int regionLength, final String advertiseURI,
             final Layout<? extends Serializable> layout) {
-        return (MemoryMappedFileManager) getManager(fileName, new FactoryData(append, immediateFlush, regionLength,
-                advertiseURI, layout), FACTORY);
+        return narrow(MemoryMappedFileManager.class, getManager(fileName, new FactoryData(append, immediateFlush,
+                regionLength, advertiseURI, layout), FACTORY));
     }
 
     public Boolean isEndOfBatch() {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RandomAccessFileManager.java
Patch:
@@ -71,8 +71,8 @@ protected RandomAccessFileManager(final LoggerContext loggerContext, final Rando
     public static RandomAccessFileManager getFileManager(final String fileName, final boolean append,
             final boolean isFlush, final int bufferSize, final String advertiseURI,
             final Layout<? extends Serializable> layout, final Configuration configuration) {
-        return (RandomAccessFileManager) getManager(fileName, new FactoryData(append,
-                isFlush, bufferSize, advertiseURI, layout, configuration), FACTORY);
+        return narrow(RandomAccessFileManager.class, getManager(fileName, new FactoryData(append,
+                isFlush, bufferSize, advertiseURI, layout, configuration), FACTORY));
     }
 
     public Boolean isEndOfBatch() {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java
Patch:
@@ -177,9 +177,9 @@ public static RollingFileManager getFileManager(final String fileName, final Str
             final String filePermissions, final String fileOwner, final String fileGroup,
             final Configuration configuration) {
         final String name = fileName == null ? pattern : fileName;
-        return (RollingFileManager) getManager(name, new FactoryData(fileName, pattern, append,
+        return narrow(RollingFileManager.class, getManager(name, new FactoryData(fileName, pattern, append,
             bufferedIO, policy, strategy, advertiseURI, layout, bufferSize, immediateFlush, createOnDemand,
-            filePermissions, fileOwner, fileGroup, configuration), factory);
+            filePermissions, fileOwner, fileGroup, configuration), factory));
     }
 
     /**
@@ -646,7 +646,7 @@ public RollingFileManager createManager(final String name, final FactoryData dat
     private static class EmptyQueue extends ArrayBlockingQueue<Runnable> {
 
         /**
-         * 
+         *
          */
         private static final long serialVersionUID = 1L;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java
Patch:
@@ -101,9 +101,9 @@ public static RollingRandomAccessFileManager getRollingRandomAccessFileManager(f
             final TriggeringPolicy policy, final RolloverStrategy strategy, final String advertiseURI,
             final Layout<? extends Serializable> layout, final String filePermissions, final String fileOwner, final String fileGroup,
             final Configuration configuration) {
-        return (RollingRandomAccessFileManager) getManager(fileName, new FactoryData(filePattern, isAppend,
+        return narrow(RollingRandomAccessFileManager.class, getManager(fileName, new FactoryData(filePattern, isAppend,
                 immediateFlush, bufferSize, policy, strategy, advertiseURI, layout,
-                filePermissions, fileOwner, fileGroup, configuration), FACTORY);
+                filePermissions, fileOwner, fileGroup, configuration), FACTORY));
     }
 
     public Boolean isEndOfBatch() {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java
Patch:
@@ -119,7 +119,7 @@ protected RollingFileManager(final LoggerContext loggerContext, final String fil
     }
 
     /**
-     * @since 2.8.3
+     * @since 2.9
      */
     protected RollingFileManager(final LoggerContext loggerContext, final String fileName, final String pattern, final OutputStream os,
             final boolean append, final boolean createOnDemand, final long size, final long time,
@@ -631,8 +631,8 @@ public RollingFileManager createManager(final String name, final FactoryData dat
                 RollingFileManager rm = new RollingFileManager(data.getLoggerContext(), data.fileName, data.pattern, os,
                     data.append, data.createOnDemand, size, time, data.policy, data.strategy, data.advertiseURI,
                     data.layout, data.filePermissions, data.fileOwner, data.fileGroup, writeHeader, buffer);
-                if (os != null && rm.isPosixSupported()) {
-                    rm.definePathAttributeView(file.toPath());
+                if (os != null && rm.isAttributeViewEnabled()) {
+                    rm.defineAttributeView(file.toPath());
                 }
 
                 return rm;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java
Patch:
@@ -207,8 +207,8 @@ public RollingRandomAccessFileManager createManager(final String name, final Fac
                 RollingRandomAccessFileManager rrm = new RollingRandomAccessFileManager(data.getLoggerContext(), raf, name, data.pattern,
                         NullOutputStream.getInstance(), data.append, data.immediateFlush, data.bufferSize, size, time, data.policy,
                         data.strategy, data.advertiseURI, data.layout, data.filePermissions, data.fileOwner, data.fileGroup, writeHeader);
-                if (rrm.isPosixSupported()) {
-                    rrm.definePathAttributeView(file.toPath());
+                if (rrm.isAttributeViewEnabled()) {
+                    rrm.defineAttributeView(file.toPath());
                 }
                 return rrm;
             } catch (final IOException ex) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/PosixViewAttributeAction.java
Patch:
@@ -122,13 +122,13 @@ public PosixViewAttributeAction build() {
 
             if (filePermissions == null && Strings.isEmpty(filePermissionsString)
                         && Strings.isEmpty(fileOwner) && Strings.isEmpty(fileGroup)) {
-                LOGGER.error("Posix file attribute view not valid because nor permissions, user and group defined.");
+                LOGGER.error("Posix file attribute view not valid because nor permissions, user or group defined.");
                 return null;
             }
 
             if (!FileUtils.isFilePosixAttributeViewSupported()) {
-                LOGGER.warn("Posix file attribute view defined but it is not supported by this file system.");
-//                return null; // FIXME Should we avoid operations not permitted or unsupported exception ?
+                LOGGER.warn("Posix file attribute view defined but it is not supported by this files system.");
+                return null;
             }
 
             return new PosixViewAttributeAction(basePath, followLinks, maxDepth, pathConditions,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/JmsAppender.java
Patch:
@@ -124,7 +124,6 @@ public JmsAppender build() {
                         userName, password);
                 actualJmsManager = AbstractManager.getManager(name, JmsManager.FACTORY, configuration);
             }
-            // TODO Try to reconnect later by letting the manager be null?
             if (actualJmsManager == null) {
                 // JmsManagerFactory has already logged an ERROR.
                 return null;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/HttpAppenderTest.java
Patch:
@@ -30,14 +30,12 @@
 import org.apache.logging.log4j.status.StatusData;
 import org.apache.logging.log4j.status.StatusListener;
 import org.apache.logging.log4j.status.StatusLogger;
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 
 import com.github.tomakehurst.wiremock.client.ResponseDefinitionBuilder;
 import com.github.tomakehurst.wiremock.junit.WireMockRule;
 
-@Ignore
 public class HttpAppenderTest {
 
     private static final String LOG_MESSAGE = "Hello, world!";

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/JmsManager.java
Patch:
@@ -76,15 +76,15 @@ private JmsManager(final String name, final JndiManager jndiManager, final Strin
      * @param jndiManager           The JndiManager to look up JMS information through.
      * @param connectionFactoryName The binding name for the {@link javax.jms.ConnectionFactory}.
      * @param destinationName       The binding name for the {@link javax.jms.Destination}.
-     * @param username              The username to connect with or {@code null} for no authentication.
+     * @param userName              The username to connect with or {@code null} for no authentication.
      * @param password              The password to use with the given username or {@code null} for no authentication.
      * @return The JmsManager as configured.
      */
     public static JmsManager getJmsManager(final String name, final JndiManager jndiManager,
                                            final String connectionFactoryName, final String destinationName,
-                                           final String username, final String password) {
+                                           final String userName, final String password) {
         final JmsConfiguration configuration = new JmsConfiguration(jndiManager, connectionFactoryName, destinationName,
-            username, password);
+            userName, password);
         return getManager(name, FACTORY, configuration);
     }
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/FilePermissionsTest.java
Patch:
@@ -57,7 +57,7 @@ public static Collection<Object[]> data() {
         return Arrays.asList(new Object[][] { //
               // @formatter:off
              {"rwxrwxrwx", true},
-             {"rw-rw-r--", false},
+             {"rw-r--r--", false},
              {"rw-------", true},
               });
               // @formatter:on
@@ -67,7 +67,7 @@ public static Collection<Object[]> data() {
     public static void beforeClass() {
         // TEMP
         // TODO Fix on non-Windows.
-        Assume.assumeTrue(SystemUtils.IS_OS_WINDOWS);
+        // Assume.assumeTrue(SystemUtils.IS_OS_WINDOWS);
     }
 
     private final boolean createOnDemand;

File: log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java
Patch:
@@ -94,7 +94,7 @@ public class LogManager {
                             factories.put(provider.getPriority(), factoryClass.newInstance());
                         } catch (final Exception e) {
                             LOGGER.error("Unable to create class {} specified in {}", factoryClass.getName(), provider
-                                    .getUrl().toString(), e);
+                                    .getUrl(), e);
                         }
                     }
                 }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/SecureSocketAppenderSocketOptionsTest.java
Patch:
@@ -120,6 +120,7 @@ public void testSocketOptions() throws IOException {
     @Test
     public void testSocketTrafficClass() throws IOException {
         Assume.assumeTrue("Run only on Java 7", System.getProperty("java.specification.version").equals("1.7"));
+        Assume.assumeFalse("Do not run on Travis CI", "true".equals(System.getenv("TRAVIS")));
         final SocketAppender appender = loggerContextRule.getAppender("socket", SocketAppender.class);
         final TcpSocketManager manager = (TcpSocketManager) appender.getManager();
         final Socket socket = manager.getSocket();

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/SocketAppenderSocketOptionsTest.java
Patch:
@@ -100,6 +100,7 @@ public void testSocketOptions() throws IOException {
     @Test
     public void testSocketTrafficClass() throws IOException {
         Assume.assumeTrue("Run only on Java 7", System.getProperty("java.specification.version").equals("1.7"));
+        Assume.assumeFalse("Do not run on Travis CI", "true".equals(System.getenv("TRAVIS")));
         final SocketAppender appender = loggerContextRule.getAppender("socket", SocketAppender.class);
         final TcpSocketManager manager = (TcpSocketManager) appender.getManager();
         final Socket socket = manager.getSocket();

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/AbstractAsyncThreadContextTestBase.java
Patch:
@@ -45,6 +45,7 @@ public abstract class AbstractAsyncThreadContextTestBase {
 
     @BeforeClass
     public static void beforeClass() {
+        System.setProperty("log4j2.is.webapp", "false");
         System.setProperty("AsyncLogger.RingBufferSize", "128"); // minimum ringbuffer size
         System.setProperty("AsyncLoggerConfig.RingBufferSize", "128"); // minimum ringbuffer size
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/kafka/KafkaManager.java
Patch:
@@ -104,7 +104,7 @@ public void send(final byte[] msg) throws ExecutionException, InterruptedExcepti
                 producer.send(newRecord, new Callback() {
                     public void onCompletion(RecordMetadata metadata, Exception e) {
                         if (e != null) {
-                            LOGGER.error("Unable to write to Kafka [" + getName() + "].", e);
+                            LOGGER.error("Unable to write to Kafka in appender [" + getName() + "]", e);
                         }
                     }
                 });

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java
Patch:
@@ -58,15 +58,15 @@
  * This layout does not implement chunking.
  * </p>
  * <p>
- * Configure as follows to send to a Graylog2 server:
+ * Configure as follows to send to a Graylog 2.x server:
  * </p>
  *
  * <pre>
  * &lt;Appenders&gt;
  *        &lt;Socket name="Graylog" protocol="udp" host="graylog.domain.com" port="12201"&gt;
- *            &lt;GelfLayout host="someserver" compressionType="GZIP" compressionThreshold="1024"&gt;
+ *            &lt;GelfLayout host="someserver" compressionType="ZLIB" compressionThreshold="1024"&gt;
  *                &lt;KeyValuePair key="additionalField1" value="additional value 1"/&gt;
- *                &lt;KeyValuePair key="additionalField2" value="additional value 2"/&gt;
+ *                &lt;KeyValuePair key="additionalField2" value="$${ctx:key}"/&gt;
  *            &lt;/GelfLayout&gt;
  *        &lt;/Socket&gt;
  * &lt;/Appenders&gt;

File: log4j-api/src/main/java/org/apache/logging/log4j/ThreadContext.java
Patch:
@@ -41,9 +41,10 @@
 /**
  * The ThreadContext allows applications to store information either in a Map or a Stack.
  * <p>
- * <b><em>The MDC is managed on a per thread basis</em></b>. A child thread automatically inherits a <em>copy</em> of
- * the mapped diagnostic context of its parent.
+ * <b><em>The MDC is managed on a per thread basis</em></b>. To enable automatic inheritance of <i>copies</i> of the MDC
+ * to newly created threads, enable the {@value DefaultThreadContextMap#INHERITABLE_MAP} Log4j system property.
  * </p>
+ * @see <a href="https://logging.apache.org/log4j/2.x/manual/thread-context.html">Thread Context Manual</a>
  */
 public final class ThreadContext {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/Order.java
Patch:
@@ -31,7 +31,7 @@
 @Target(ElementType.TYPE)
 public @interface Order {
     /**
-     * The priority of this annotated type. Larger numbers indicate lower priority with a lowest priority of
+     * The priority of this annotated type. Larger numbers indicate higher priority with a highest priority of
      * {@link Integer#MAX_VALUE}.
      */
     int value();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/OrderComparator.java
Patch:
@@ -54,7 +54,7 @@ public int compare(final Class<?> lhs, final Class<?> rhs) {
         if (lhsOrder == null) {
             return 1;
         }
-        // larger value means lower priority
+        // larger value means higher priority
         return Integer.signum(rhsOrder.value() - lhsOrder.value());
     }
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RandomAccessFileAppender.java
Patch:
@@ -53,7 +53,7 @@ public static class Builder<B extends Builder<B>> extends AbstractOutputStreamAp
         private String fileName;
 
         @PluginBuilderAttribute("append")
-        private boolean append;
+        private boolean append = true;
 
         @PluginBuilderAttribute("advertise")
         private boolean advertise;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java
Patch:
@@ -204,7 +204,7 @@ public List<PatternFormatter> parse(final String pattern, final boolean alwaysWr
             list.add(new PatternFormatter(pc, field));
         }
         if (alwaysWriteExceptions && !handlesThrowable) {
-            final LogEventPatternConverter pc = ExtendedThrowablePatternConverter.newInstance(null);
+            final LogEventPatternConverter pc = ExtendedThrowablePatternConverter.newInstance(config, null);
             list.add(new PatternFormatter(pc, FormattingInfo.getDefault()));
         }
         return list;

File: log4j-osgi/src/test/java/org/apache/logging/log4j/osgi/tests/junit/OsgiRule.java
Patch:
@@ -56,7 +56,9 @@ protected void before() throws Throwable {
         // Cleans framework before first init. Subsequent init invocations do not clean framework.
         configMap.put("org.osgi.framework.storage.clean", "onFirstInit");
         configMap.put("felix.log.level", "4");
-        configMap.put("eclipse.log.level", "ALL");        
+        configMap.put("eclipse.log.level", "ALL");
+        // Hack to get the build working on Windows. Could try newer versions of Felix.
+        configMap.put("felix.cache.locking", "false");        
         // Delegates loading of endorsed libraries to JVM classloader
         // config.put("org.osgi.framework.bootdelegation", "javax.*,org.w3c.*,org.xml.*");
         framework = factory.newFramework(configMap);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
Patch:
@@ -466,7 +466,7 @@ public Configuration getConfiguration(final LoggerContext loggerContext, final S
             LOGGER.error("No log4j2 configuration file found. " +
                     "Using default configuration: logging only errors to the console. " +
                     "Set system property 'org.apache.logging.log4j.simplelog.StatusLogger.level'" +
-                    " to TRACE to show Log4j2 initialization internal logging.");
+                    " to TRACE to show Log4j2 internal initialization logging.");
             return new DefaultConfiguration();
         }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncQueueFullPolicy.java
Patch:
@@ -38,7 +38,7 @@
  *     by older log events taken from the queue.</li>
  *   <li>Discard the event. Log4j offers a variation of this policy where log events that are more verbose than
  *     a certain threshold are discarded, and other events are sent to the underlying appenders.
- *     See {@link DiscardingAsyncQueueFullPolicy} for defaults.</li>
+ *     See {@link DiscardingAsyncQueueFullPolicy} for details.</li>
  * </ul>
  * <p>
  * See {@link AsyncQueueFullPolicyFactory} for how to install a custom policy.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/SocketAppender.java
Patch:
@@ -87,7 +87,7 @@ public static abstract class AbstractBuilder<B extends AbstractBuilder<B>> exten
         private Protocol protocol = Protocol.TCP;
 
         @PluginBuilderAttribute
-        @PluginAliases({ "reconnectDelay, reconnectionDelay, delayMillis" })
+        @PluginAliases({ "reconnectDelay", "reconnectionDelay", "delayMillis", "reconnectionDelayMillis" })
         private int reconnectDelayMillis;
         
         @PluginElement("SocketOptions")

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java
Patch:
@@ -203,8 +203,8 @@ private int purge(final int lowIndex, final int highIndex, final RollingFileMana
      * Purges and renames old log files in preparation for rollover. The oldest file will have the smallest index, the
      * newest the highest.
      *
-     * @param lowIndex low index
-     * @param highIndex high index. Log file associated with high index will be deleted if needed.
+     * @param lowIndex low index. Log file associated with low index will be deleted if needed.
+     * @param highIndex high index.
      * @param manager The RollingFileManager
      * @return true if purge was successful and rollover should be attempted.
      */

File: log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java
Patch:
@@ -143,7 +143,7 @@ public Charset getCharsetProperty(final String name) {
      */
     public Charset getCharsetProperty(final String name, final Charset defaultValue) {
         final String prop = getStringProperty(name);
-        return prop == null ? defaultValue : Charset.forName(name);
+        return prop == null ? defaultValue : Charset.forName(prop);
     }
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java
Patch:
@@ -22,7 +22,6 @@
 import java.io.OutputStream;
 import java.io.Serializable;
 import java.nio.ByteBuffer;
-import java.util.concurrent.Future;
 import java.util.concurrent.Semaphore;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
@@ -39,6 +38,7 @@
 import org.apache.logging.log4j.core.appender.rolling.action.Action;
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.util.Constants;
+import org.apache.logging.log4j.core.util.Log4jThreadFactory;
 
 /**
  * The Rolling File Manager.
@@ -52,6 +52,7 @@ public class RollingFileManager extends FileManager {
     private long initialTime;
     private final PatternProcessor patternProcessor;
     private final Semaphore semaphore = new Semaphore(1);
+    private final Log4jThreadFactory threadFactory = Log4jThreadFactory.createThreadFactory("RollingFileManager");
     private volatile TriggeringPolicy triggeringPolicy;
     private volatile RolloverStrategy rolloverStrategy;
     private volatile boolean renameEmptyFiles = false;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java
Patch:
@@ -304,7 +304,7 @@ private boolean rollover(final RolloverStrategy strategy) {
             }
             return false;
         } finally {
-            if (thread == null || thread.isAlive()) {
+            if (thread == null || !thread.isAlive()) {
                 semaphore.release();
             }
         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java
Patch:
@@ -58,7 +58,7 @@ public boolean stop(final long timeout, final TimeUnit timeUnit) {
             LOGGER.debug("{} shutting down threads in {}", SIMPLE_NAME, getExecutorService());
             executorService.shutdown();
             try {
-                executorService.awaitTermination(timeout, timeUnit);
+                executorService.awaitTermination(timeoutToUse, timeUnitToUse);
             } catch (final InterruptedException ie) {
                 executorService.shutdownNow();
                 try {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Set;
@@ -127,7 +128,7 @@ private PluginElementVisitor(final Elements elements) {
         public PluginEntry visitType(final TypeElement e, final Plugin plugin) {
             Objects.requireNonNull(plugin, "Plugin annotation is null.");
             final PluginEntry entry = new PluginEntry();
-            entry.setKey(plugin.name().toLowerCase());
+            entry.setKey(plugin.name().toLowerCase(Locale.US));
             entry.setClassName(elements.getBinaryName(e).toString());
             entry.setName(Plugin.EMPTY.equals(plugin.elementType()) ? plugin.name() : plugin.elementType());
             entry.setPrintable(plugin.printObject());
@@ -158,7 +159,7 @@ public Collection<PluginEntry> visitType(final TypeElement e, final Plugin plugi
             final Collection<PluginEntry> entries = new ArrayList<>(aliases.value().length);
             for (final String alias : aliases.value()) {
                 final PluginEntry entry = new PluginEntry();
-                entry.setKey(alias.toLowerCase());
+                entry.setKey(alias.toLowerCase(Locale.US));
                 entry.setClassName(elements.getBinaryName(e).toString());
                 entry.setName(Plugin.EMPTY.equals(plugin.elementType()) ? alias : plugin.elementType());
                 entry.setPrintable(plugin.printObject());

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.HashMap;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 
 import org.apache.logging.log4j.Logger;
@@ -171,7 +172,7 @@ public String lookup(final LogEvent event, String var) {
 
         final int prefixPos = var.indexOf(PREFIX_SEPARATOR);
         if (prefixPos >= 0) {
-            final String prefix = var.substring(0, prefixPos);
+            final String prefix = var.substring(0, prefixPos).toLowerCase(Locale.US);
             final String name = var.substring(prefixPos + 1);
             final StrLookup lookup = lookups.get(prefix);
             if (lookup instanceof ConfigurationAware) {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/layout/ConcurrentLoggingWithJsonLayoutTest.java
Patch:
@@ -28,6 +28,7 @@
 
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.junit.LoggerContextRule;
+import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.ClassRule;
 import org.junit.Test;
@@ -46,8 +47,8 @@ public class ConcurrentLoggingWithJsonLayoutTest {
     public static LoggerContextRule context = new LoggerContextRule("log4j2-json-layout.xml");
     private static final String PATH = "target/test-json-layout.log";
 
-    @Before
-    public void before() {
+    @AfterClass
+    public static void after() {
         new File(PATH).delete();
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java
Patch:
@@ -328,7 +328,7 @@ public void actualAsyncLog(final RingBufferLogEvent event) {
                 final String value = prop.isValueNeedsLookup() //
                         ? privateConfig.config.getStrSubstitutor().replace(event, prop.getValue()) //
                         : prop.getValue();
-                contextData.putValue(prop.getName(), prop.getValue());
+                contextData.putValue(prop.getName(), value);
             }
             event.setContextData(contextData);
         }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/layout/ConcurrentLoggingWithJsonLayoutTest.java
Patch:
@@ -83,7 +83,7 @@ public void uncaughtException(final Thread t, final Throwable e) {
         }
 
         // simple test to ensure content is not corrupted
-        final List<String> lines = Files.readAllLines(Paths.get(PATH), Charset.defaultCharset());
+        final List<String> lines = Files.readAllLines(new File(PATH).toPath(), Charset.defaultCharset());
         for (final String line : lines) {
             assertThat(line, startsWith("{\"timeMillis\":"));
             assertThat(line, endsWith("\"threadPriority\":5}"));

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/db/jdbc/JdbcH2AppenderTest.java
Patch:
@@ -49,7 +49,7 @@ protected Connection newConnection() throws SQLException {
     protected String toCreateTableSqlString(final String tableName) {
         return "CREATE TABLE " + tableName + " ( " +
                     "id INTEGER IDENTITY, eventDate DATETIME, literalColumn VARCHAR(255), level NVARCHAR(10), " +
-                    "logger NVARCHAR(255), message VARCHAR(1024), exception NCLOB" +
+                    "logger NVARCHAR(255), message VARCHAR(1024), exception NCLOB, anotherDate TIMESTAMP" +
                 " )";
     }
 }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/db/jdbc/JdbcHyperSqlAppenderTest.java
Patch:
@@ -50,7 +50,7 @@ protected Connection newConnection() throws SQLException {
     protected String toCreateTableSqlString(final String tableName) {
         return "CREATE TABLE " + tableName + " ( " +
                     "id INTEGER IDENTITY, eventDate DATETIME, literalColumn VARCHAR(255), level VARCHAR(10), " +
-                    "logger VARCHAR(255), message VARCHAR(1024), exception CLOB" +
+                    "logger VARCHAR(255), message VARCHAR(1024), exception CLOB, anotherDate TIMESTAMP" +
                 " )";
     }
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileAppender.java
Patch:
@@ -174,7 +174,7 @@ public B withLocking(final boolean locking) {
      * @deprecated Use {@link #newBuilder()}
      */
     @Deprecated
-    public static FileAppender createAppender(
+    public static <B extends Builder<B>> FileAppender createAppender(
             // @formatter:off
             final String fileName,
             final String append,
@@ -189,7 +189,7 @@ public static FileAppender createAppender(
             final String advertise,
             final String advertiseUri,
             final Configuration config) {
-        return newBuilder()
+        return FileAppender.<B>newBuilder()
             .withAdvertise(Boolean.parseBoolean(advertise))
             .withAdvertiseUri(advertiseUri)
             .withAppend(Booleans.parseBoolean(append, true))

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileAppender.java
Patch:
@@ -210,7 +210,7 @@ public int getRegionLength() {
      * @deprecated Use {@link #newBuilder()}.
      */
     @Deprecated
-    public static MemoryMappedFileAppender createAppender(
+    public static <B extends Builder<B>> MemoryMappedFileAppender createAppender(
             // @formatter:off
             final String fileName, //
             final String append, //
@@ -232,7 +232,7 @@ public static MemoryMappedFileAppender createAppender(
         final int regionLength = Integers.parseInt(regionLengthStr, MemoryMappedFileManager.DEFAULT_REGION_LENGTH);
 
         // @formatter:off
-        return newBuilder()
+        return MemoryMappedFileAppender.<B>newBuilder()
             .setAdvertise(isAdvertise)
             .setAdvertiseURI(advertiseURI)
             .setAppend(isAppend)

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RandomAccessFileAppender.java
Patch:
@@ -202,7 +202,7 @@ public int getBufferSize() {
      * @deprecated Use {@link #newBuilder()}.
      */
     @Deprecated
-    public static RandomAccessFileAppender createAppender(
+    public static <B extends Builder<B>> RandomAccessFileAppender createAppender(
             final String fileName,
             final String append,
             final String name,
@@ -221,7 +221,7 @@ public static RandomAccessFileAppender createAppender(
         final boolean isAdvertise = Boolean.parseBoolean(advertise);
         final int bufferSize = Integers.parseInt(bufferSizeStr, RandomAccessFileManager.DEFAULT_BUFFER_SIZE);
 
-        return newBuilder()
+        return RandomAccessFileAppender.<B>newBuilder()
             .setAdvertise(isAdvertise)
             .setAdvertiseURI(advertiseURI)
             .setAppend(isAppend)

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingFileAppender.java
Patch:
@@ -317,7 +317,7 @@ public <T extends TriggeringPolicy> T getTriggeringPolicy() {
      * @deprecated Use {@link #newBuilder()}.
      */
     @Deprecated
-    public static RollingFileAppender createAppender(
+    public static <B extends Builder<B>> RollingFileAppender createAppender(
             // @formatter:off
             final String fileName,
             final String filePattern,
@@ -337,7 +337,7 @@ public static RollingFileAppender createAppender(
             // @formatter:on
         final int bufferSize = Integers.parseInt(bufferSizeStr, DEFAULT_BUFFER_SIZE);
         // @formatter:off
-        return newBuilder()
+        return RollingFileAppender.<B>newBuilder()
                 .withAdvertise(Boolean.parseBoolean(advertise))
                 .withAdvertiseUri(advertiseUri)
                 .withAppend(Booleans.parseBoolean(append, true))

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppender.java
Patch:
@@ -273,7 +273,7 @@ public int getBufferSize() {
      * @deprecated Use {@link #newBuilder()}.
      */
     @Deprecated
-    public static RollingRandomAccessFileAppender createAppender(
+    public static <B extends Builder<B>> RollingRandomAccessFileAppender createAppender(
             final String fileName,
             final String filePattern,
             final String append,
@@ -295,7 +295,7 @@ public static RollingRandomAccessFileAppender createAppender(
         final boolean isAdvertise = Boolean.parseBoolean(advertise);
         final int bufferSize = Integers.parseInt(bufferSizeStr, RollingRandomAccessFileManager.DEFAULT_BUFFER_SIZE);
 
-        return newBuilder()
+        return RollingRandomAccessFileAppender.<B>newBuilder()
            .withAdvertise(isAdvertise)
            .withAdvertiseURI(advertiseURI)
            .withAppend(isAppend)

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/WriterManager.java
Patch:
@@ -122,9 +122,7 @@ protected void setWriter(final Writer writer) {
     /**
      * Some output streams synchronize writes while others do not. Synchronizing here insures that
      * log events won't be intertwined.
-     * @param bytes The serialized Log event.
-     * @param offset The offset into the byte array.
-     * @param length The number of bytes to write.
+     * @param str the string to write
      * @throws AppenderLoggingException if an error occurs.
      */
     protected synchronized void write(final String str)  {

File: log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/cassandra/CassandraManager.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.logging.log4j.core.net.SocketAddress;
 import org.apache.logging.log4j.spi.ThreadContextMap;
 import org.apache.logging.log4j.spi.ThreadContextStack;
+import org.apache.logging.log4j.util.ReadOnlyStringMap;
 import org.apache.logging.log4j.util.Strings;
 
 /**
@@ -92,7 +93,8 @@ protected void connectAndStart() {
     protected void writeInternal(final LogEvent event) {
         for (int i = 0; i < columnMappings.size(); i++) {
             final ColumnMapping columnMapping = columnMappings.get(i);
-            if (ThreadContextMap.class.isAssignableFrom(columnMapping.getType())) {
+            if (ThreadContextMap.class.isAssignableFrom(columnMapping.getType())
+                || ReadOnlyStringMap.class.isAssignableFrom(columnMapping.getType())) {
                 values[i] = event.getContextData().toMap();
             } else if (ThreadContextStack.class.isAssignableFrom(columnMapping.getType())) {
                 values[i] = event.getContextStack().asList();

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/convert/TypeConvertersTest.java
Patch:
@@ -31,6 +31,7 @@
 import java.security.Security;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.UUID;
 
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.core.Filter;
@@ -184,6 +185,8 @@ public static Collection<Object[]> data() throws Exception {
                 { "127.0.0.1", InetAddress.getByName("127.0.0.1"), null, InetAddress.class },
                 // JRE Path
                 { "/path/to/file", Paths.get("/path", "to", "file"), null, Path.class },
+                // JRE UUID
+                { "8fd389fb-9154-4096-b52e-435bde4a1835", UUID.fromString("8fd389fb-9154-4096-b52e-435bde4a1835"), null, UUID.class },
             }
         );
     }

File: log4j-osgi/src/test/java/org/apache/logging/log4j/osgi/tests/AbstractLoadBundleTest.java
Patch:
@@ -98,9 +98,9 @@ private void log(final Bundle dummy) throws ReflectiveOperationException {
         final Class<?> loggerClass = dummy.loadClass("org.apache.logging.log4j.configuration.CustomConfiguration");
 
         final Object logger = getLoggerMethod.invoke(null, loggerClass);
-        final Method infoMethod = logger.getClass().getMethod("error", Object.class);
+        final Method errorMethod = logger.getClass().getMethod("error", Object.class);
 
-        infoMethod.invoke(logger, "Test OK");
+        errorMethod.invoke(logger, "Test OK");
     }
 
     private PrintStream setupStream(final Bundle api, final PrintStream newStream) throws ReflectiveOperationException {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java
Patch:
@@ -148,7 +148,7 @@ protected synchronized void write(final byte[] bytes, final int offset, final in
      * @param bytes the array containing data
      * @param offset from where to write
      * @param length how many bytes to write
-     * @since 2.6
+     * @since 2.8
      */
     protected synchronized void writeToDestination(final byte[] bytes, final int offset, final int length) {
         if (isLocking) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java
Patch:
@@ -42,7 +42,7 @@ public class ConfigurationScheduler extends AbstractLifeCycle {
     public void start() {
         super.start();
         if (scheduledItems > 0) {
-            LOGGER.debug("{} starting {} threads", scheduledItems, SIMPLE_NAME);
+            LOGGER.debug("{} starting {} threads", SIMPLE_NAME, scheduledItems);
             scheduledItems = Math.min(scheduledItems, MAX_SCHEDULED_ITEMS);
             executorService = new ScheduledThreadPoolExecutor(scheduledItems,
                     Log4jThreadFactory.createDaemonThreadFactory("Scheduled"));

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java
Patch:
@@ -196,7 +196,7 @@ private Rfc5424Layout(final Configuration config, final Facility facility, final
 
     private Map<String, FieldFormatter> createFieldFormatters(final LoggerFields[] loggerFields,
             final Configuration config) {
-        final Map<String, FieldFormatter> sdIdMap = new HashMap<>(loggerFields.length);
+        final Map<String, FieldFormatter> sdIdMap = new HashMap<>(loggerFields == null ? 0 : loggerFields.length);
 
         if (loggerFields != null) {
             for (final LoggerFields loggerField : loggerFields) {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/SyslogAppenderTest.java
Patch:
@@ -103,7 +103,7 @@ protected void initTCPTestEnvironment(final String messageFormat) throws IOExcep
     protected void initAppender(final String transportFormat, final String messageFormat) {
         appender = createAppender(transportFormat, messageFormat);
         appender.start();
-       initRootLogger(appender);
+        initRootLogger(appender);
     }
 
     private SyslogAppender createAppender(final String protocol, final String format) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java
Patch:
@@ -171,6 +171,7 @@ private static class TlsSocketManagerFactoryException extends Exception {
             private static final long serialVersionUID = 1L;
         }
 
+        @SuppressWarnings("resource")
         @Override
         public SslSocketManager createManager(final String name, final SslFactoryData data) {
             InetAddress inetAddress = null;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.appender.ManagerFactory;
 import org.apache.logging.log4j.core.net.ssl.SslConfiguration;
+import org.apache.logging.log4j.core.util.Closer;
 import org.apache.logging.log4j.util.Strings;
 
 /**
@@ -185,6 +186,7 @@ public SslSocketManager createManager(final String name, final SslFactoryData da
                 os = new ByteArrayOutputStream();
             } catch (final TlsSocketManagerFactoryException e) {
                 LOGGER.catching(Level.DEBUG, e);
+                Closer.closeSilently(socket);
                 return null;
             }
             return new SslSocketManager(name, os, socket, data.sslConfiguration, inetAddress, data.host, data.port,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java
Patch:
@@ -76,7 +76,7 @@ public void run() {
                     try {
                         LOGGER.error(SHUTDOWN_HOOK_MARKER, "Caught exception executing shutdown hook {}", hook, t1);
                     } catch (final Throwable t2) {
-                        System.err.println("Caught exception logging exception");
+                        System.err.println("Caught exception " + t2.getClass() + " logging exception " + t1.getClass());
                         t1.printStackTrace();
                     }
                 }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/pattern/MapPatternConverterTest.java
Patch:
@@ -51,6 +51,8 @@ public void testConverter() {
         assertTrue("Missing or incorrect verb", str.contains(expected));
         expected = "object=Log4j";
         assertTrue("Missing or incorrect object", str.contains(expected));
+
+        assertEquals("{object=Log4j, subject=I, verb=love}", str);
     }
 
     @Test

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java
Patch:
@@ -246,7 +246,7 @@ private static PatternParser createPatternParser(final Configuration config,
      * <li>Key: "structured" Value: "true"</li>
      * <li>Key: "format" Value: "RFC5424"</li>
      * </ul>
-     * 
+     *
      * @return Map of content format keys supporting Rfc5424Layout
      */
     @Override
@@ -361,7 +361,7 @@ private void appendStructuredElements(final StringBuilder buffer, final LogEvent
         }
 
         final Map<String, StructuredDataElement> sdElements = new HashMap<>();
-        final Map<String, String> contextMap = event.getContextMap();
+        final Map<String, String> contextMap = event.getContextData().toMap();
 
         if (mdcRequired != null) {
             checkRequired(contextMap);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/layout/LogEventFixtures.java
Patch:
@@ -81,6 +81,7 @@ static Log4jLogEvent createLogEvent() {
         return expected;
     }
 
+    @SuppressWarnings("deprecation")
     static void assertEqualLogEvents(final LogEvent expected, final LogEvent actual, final boolean includeSource,
             final boolean includeContext, final boolean includeStacktrace) {
         assertEquals(expected.getClass(), actual.getClass());

File: log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeEvent.java
Patch:
@@ -89,7 +89,7 @@ public FlumeEvent(final LogEvent event, final String includes, final String excl
         if (eventPrefix == null) {
             eventPrefix = DEFAULT_EVENT_PREFIX;
         }
-        final Map<String, String> mdc = event.getContextMap();
+        final Map<String, String> mdc = event.getContextData().toMap();
         if (includes != null) {
             final String[] array = includes.split(Patterns.COMMA_SEPARATOR);
             if (array.length > 0) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/BasicLogEventEntity.java
Patch:
@@ -232,6 +232,7 @@ public ThrowableProxy getThrownProxy() {
      * @see ContextMapAttributeConverter
      * @see org.apache.logging.log4j.core.appender.db.jpa.converter.ContextMapJsonAttributeConverter
      */
+    @SuppressWarnings("deprecation")
     @Override
     @Convert(converter = ContextMapAttributeConverter.class)
     public Map<String, String> getContextMap() {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rewrite/PropertiesRewritePolicy.java
Patch:
@@ -64,7 +64,7 @@ private PropertiesRewritePolicy(final Configuration config, final List<Property>
      */
     @Override
     public LogEvent rewrite(final LogEvent source) {
-        final Map<String, String> props = new HashMap<>(source.getContextMap());
+        final Map<String, String> props = new HashMap<>(source.getContextData().toMap());
         for (final Map.Entry<Property, Boolean> entry : properties.entrySet()) {
             final Property prop = entry.getKey();
             props.put(prop.getName(), entry.getValue().booleanValue() ?

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/SocketAppenderTest.java
Patch:
@@ -156,7 +156,7 @@ static void testTcpAppender(final TcpSocketTestServer tcpTestServer, final Logge
         assertNotNull("No event retrieved", event);
         assertTrue("Incorrect event", event.getMessage().getFormattedMessage().equals("This is a test message"));
         assertTrue("Message not delivered via TCP", tcpTestServer.getCount() > 0);
-        assertEquals(expectedUuidStr, event.getContextMap().get(tcKey));
+        assertEquals(expectedUuidStr, event.getContextData().getValue(tcKey));
         event = tcpTestServer.getQueue().poll(3, TimeUnit.SECONDS);
         assertNotNull("No event retrieved", event);
         assertTrue("Incorrect event", event.getMessage().getFormattedMessage().equals("Throwing an exception"));
@@ -270,7 +270,7 @@ public void testTcpAppenderNoWait() throws Exception {
     }
 
     public static class UdpSocketTestServer extends Thread {
-        
+
         private final DatagramSocket sock;
         private boolean shutdown = false;
         private Thread thread;
@@ -345,7 +345,7 @@ public TcpSocketTestServer(final ServerSocket serverSocket) {
         public int getLocalPort() {
             return serverSocket.getLocalPort();
         }
-        
+
         public void reset() {
             queue.clear();
             count = 0;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/TestBaseEntity.java
Patch:
@@ -154,6 +154,7 @@ public ThrowableProxy getThrownProxy() {
         return this.getWrappedEvent().getThrownProxy();
     }
 
+    @SuppressWarnings("deprecation")
     @Override
     @Transient
     public Map<String, String> getContextMap() {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rewrite/MapRewritePolicyTest.java
Patch:
@@ -156,6 +156,7 @@ private void checkUpdated(final Map<String, String> updatedMap) {
         assertThat("wrong size", updatedMap, hasSize(2));
     }
 
+    @SuppressWarnings("deprecation")
     private void compareLogEvents(final LogEvent orig, final LogEvent changed) {
         // Ensure that everything but the Mapped Data is still the same
         assertEquals("LoggerName changed", orig.getLoggerName(), changed.getLoggerName());
@@ -167,6 +168,7 @@ private void compareLogEvents(final LogEvent orig, final LogEvent changed) {
             changed.getThrown() == null ? null : changed.getThrownProxy().getExtendedStackTrace()
         );
         assertEquals("ContextMap changed", orig.getContextMap(), changed.getContextMap());
+        assertEquals("ContextData changed", orig.getContextData(), changed.getContextData());
         assertEquals("ContextStack changed", orig.getContextStack(), changed.getContextStack());
         assertEquals("ThreadName changed", orig.getThreadName(), changed.getThreadName());
         assertEquals("Source changed", orig.getSource(), changed.getSource());

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java
Patch:
@@ -138,6 +138,7 @@ public void testSerializationDeserialization() throws IOException, ClassNotFound
         assertEquals(currentTimeMillis, other.getTimeMillis());
     }
 
+    @SuppressWarnings("deprecation")
     @Test
     public void testCreateMementoReturnsCopy() {
         final RingBufferLogEvent evt = new RingBufferLogEvent();
@@ -164,6 +165,7 @@ public void testCreateMementoReturnsCopy() {
         assertEquals(evt.getMessage(), actual.getMessage());
         assertEquals(evt.getThrown(), actual.getThrown());
         assertEquals(evt.getContextMap(), actual.getContextMap());
+        assertEquals(evt.getContextData(), actual.getContextData());
         assertEquals(evt.getContextStack(), actual.getContextStack());
         assertEquals(evt.getThreadName(), actual.getThreadName());
         assertEquals(evt.getTimeMillis(), actual.getTimeMillis());

File: log4j-core/src/test/java/org/apache/logging/log4j/core/impl/MutableLogEventTest.java
Patch:
@@ -244,6 +244,7 @@ public void testJavaIoSerializableWithThrown() throws Exception {
         assertEquals(evt.getLevel(), evt2.getLevel());
         assertEquals(evt.getLoggerName(), evt2.getLoggerName());
         assertEquals(evt.getMarker(), evt2.getMarker());
+        assertEquals(evt.getContextData(), evt2.getContextData());
         assertEquals(evt.getContextMap(), evt2.getContextMap());
         assertEquals(evt.getContextStack(), evt2.getContextStack());
         assertEquals(evt.getMessage(), evt2.getMessage());

File: log4j-core/src/test/java/org/apache/logging/log4j/core/impl/ReusableLogEventFactoryTest.java
Patch:
@@ -117,12 +117,14 @@ public void run() {
         ReusableLogEventFactory.release(event2[0]);
     }
 
+    @SuppressWarnings("deprecation")
     @Test
     public void testCreateEventInitFieldsProperly() throws Exception {
         final ReusableLogEventFactory factory = new ReusableLogEventFactory();
         final LogEvent event = callCreateEvent(factory, "logger", Level.INFO, new SimpleMessage("xyz"), null);
         ReusableLogEventFactory.release(event);
         assertNotNull(event.getContextMap());
+        assertNotNull(event.getContextData());
         assertNotNull(event.getContextStack());
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/DatePatternConverter.java
Patch:
@@ -76,7 +76,7 @@ void formatToBuffer(final long timeMillis, final StringBuilder destination) {
 
         @Override
         public String toPattern() {
-            return fastDateFormat.toPattern();
+            return fastDateFormat.getPattern();
         }
     }
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/SecureSocketAppenderSocketOptionsTest.java
Patch:
@@ -110,7 +110,7 @@ public void testSocketOptions() throws IOException {
         Assert.assertEquals(false, socket.getReuseAddress());
         Assert.assertEquals(false, socket.getTcpNoDelay());
         Assert.assertEquals(Rfc1349TrafficClass.IPTOS_LOWCOST.value(), socket.getTrafficClass());
-        //Assert.assertEquals(10000, socket.getReceiveBufferSize());
+        // Assert.assertEquals(10000, socket.getReceiveBufferSize());
         // This settings changes while we are running, so we cannot assert it.
         // Assert.assertEquals(8000, socket.getSendBufferSize());
         Assert.assertEquals(12345, socket.getSoLinger());

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/SocketAppenderSocketOptionsTest.java
Patch:
@@ -90,7 +90,7 @@ public void testSocketOptions() throws IOException {
         Assert.assertEquals(false, socket.getReuseAddress());
         Assert.assertEquals(false, socket.getTcpNoDelay());
         Assert.assertEquals(Rfc1349TrafficClass.IPTOS_LOWCOST.value(), socket.getTrafficClass());
-        //Assert.assertEquals(10000, socket.getReceiveBufferSize());
+        // Assert.assertEquals(10000, socket.getReceiveBufferSize());
         // This settings changes while we are running, so we cannot assert it.
         // Assert.assertEquals(8000, socket.getSendBufferSize());
         Assert.assertEquals(12345, socket.getSoLinger());

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractCsvLayout.java
Patch:
@@ -68,8 +68,8 @@ private static boolean isNotNul(final Character character) {
     protected AbstractCsvLayout(final Configuration config, final Charset charset, final CSVFormat csvFormat,
             final String header, final String footer) {
         super(config, charset, 
-                PatternLayout.newSerializerBuilder().withConfiguration(config).withPattern(header).build(),
-                PatternLayout.newSerializerBuilder().withConfiguration(config).withPattern(footer).build());
+                PatternLayout.newSerializerBuilder().setConfiguration(config).setPattern(header).build(),
+                PatternLayout.newSerializerBuilder().setConfiguration(config).setPattern(footer).build());
         this.format = csvFormat;
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JsonLayout.java
Patch:
@@ -814,8 +814,8 @@ protected JsonLayout(final Configuration config, final boolean locationInfo, fin
         super(config, new JacksonFactory.JSON(encodeThreadContextAsList, includeStacktrace).newWriter(
                     locationInfo, properties, compact),
                 charset, compact, complete, eventEol,
-                PatternLayout.newSerializerBuilder().withConfiguration(config).withPattern(headerPattern).withDefaultPattern(DEFAULT_HEADER).build(),
-                PatternLayout.newSerializerBuilder().withConfiguration(config).withPattern(footerPattern).withDefaultPattern(DEFAULT_FOOTER).build());
+                PatternLayout.newSerializerBuilder().setConfiguration(config).setPattern(headerPattern).setDefaultPattern(DEFAULT_HEADER).build(),
+                PatternLayout.newSerializerBuilder().setConfiguration(config).setPattern(footerPattern).setDefaultPattern(DEFAULT_FOOTER).build());
     }
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/YamlLayout.java
Patch:
@@ -713,8 +713,8 @@ protected YamlLayout(final Configuration config, final boolean locationInfo, fin
             final String footerPattern, final Charset charset, final boolean includeStacktrace) {
         super(config, new JacksonFactory.YAML(includeStacktrace).newWriter(locationInfo, properties, compact), charset, compact,
                 complete, eventEol,
-                PatternLayout.newSerializerBuilder().withConfiguration(config).withPattern(headerPattern).withDefaultPattern(DEFAULT_HEADER).build(),
-                PatternLayout.newSerializerBuilder().withConfiguration(config).withPattern(footerPattern).withDefaultPattern(DEFAULT_FOOTER).build());
+                PatternLayout.newSerializerBuilder().setConfiguration(config).setPattern(headerPattern).setDefaultPattern(DEFAULT_HEADER).build(),
+                PatternLayout.newSerializerBuilder().setConfiguration(config).setPattern(footerPattern).setDefaultPattern(DEFAULT_FOOTER).build());
     }
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/SmtpManager.java
Patch:
@@ -141,7 +141,7 @@ public static SmtpManager getSmtpManager(
         sb.append(filterName);
 
         final String name = "SMTP:" + NameUtil.md5(sb.toString());
-        final Serializer subjectSerializer = PatternLayout.newSerializerBuilder().withConfiguration(config).withPattern(subject).build();
+        final Serializer subjectSerializer = PatternLayout.newSerializerBuilder().setConfiguration(config).setPattern(subject).build();
 
         return getManager(name, FACTORY, new FactoryData(to, cc, bcc, from, replyTo, subjectSerializer,
             protocol, host, port, username, password, isDebug, numElements));

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java
Patch:
@@ -180,7 +180,7 @@ public static <B extends Builder<B>> B newBuilder() {
 
     /**
      * Builds ConsoleAppender instances.
-     * @param <B> This builder class
+     * @param <B> The type to build
      */
     public static class Builder<B extends Builder<B>> extends AbstractOutputStreamAppender.Builder<B>
             implements org.apache.logging.log4j.core.util.Builder<ConsoleAppender> {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileAppender.java
Patch:
@@ -47,7 +47,7 @@ public final class FileAppender extends AbstractOutputStreamAppender<FileManager
      * Builds FileAppender instances.
      * 
      * @param <B>
-     *            This builder class
+     *            The type to build
      */
     public static class Builder<B extends Builder<B>> extends AbstractOutputStreamAppender.Builder<B>
             implements org.apache.logging.log4j.core.util.Builder<FileAppender> {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileAppender.java
Patch:
@@ -47,7 +47,7 @@ public final class MemoryMappedFileAppender extends AbstractOutputStreamAppender
      * Builds RandomAccessFileAppender instances.
      * 
      * @param <B>
-     *            This builder class
+     *            The type to build
      */
     public static class Builder<B extends Builder<B>> extends AbstractOutputStreamAppender.Builder<B>
             implements org.apache.logging.log4j.core.util.Builder<MemoryMappedFileAppender> {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RandomAccessFileAppender.java
Patch:
@@ -45,7 +45,7 @@ public final class RandomAccessFileAppender extends AbstractOutputStreamAppender
      * Builds RandomAccessFileAppender instances.
      * 
      * @param <B>
-     *            This builder class
+     *            The type to build
      */
     public static class Builder<B extends Builder<B>> extends AbstractOutputStreamAppender.Builder<B>
             implements org.apache.logging.log4j.core.util.Builder<RandomAccessFileAppender> {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingFileAppender.java
Patch:
@@ -54,7 +54,7 @@ public final class RollingFileAppender extends AbstractOutputStreamAppender<Roll
      * Builds FileAppender instances.
      * 
      * @param <B>
-     *            This builder class
+     *            The type to build
      */
     public static class Builder<B extends Builder<B>> extends AbstractOutputStreamAppender.Builder<B>
             implements org.apache.logging.log4j.core.util.Builder<RollingFileAppender> {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractAppender.java
Patch:
@@ -40,7 +40,7 @@ public abstract class AbstractAppender extends AbstractFilterable implements App
     /**
      * Subclasses can extend this abstract Builder. 
      * 
-     * @param <B> This builder class.
+     * @param <B> The type to build.
      */
     public abstract static class Builder<B extends Builder<B>> extends AbstractFilterable.Builder<B> {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.java
Patch:
@@ -35,7 +35,7 @@ public abstract class AbstractOutputStreamAppender<M extends OutputStreamManager
     /**
      * Subclasses can extend this abstract Builder. 
      * 
-     * @param <B> This builder class.
+     * @param <B> The type to build.
      */
     public abstract static class Builder<B extends Builder<B>> extends AbstractAppender.Builder<B> {
     

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/AbstractFilterable.java
Patch:
@@ -33,7 +33,7 @@ public abstract class AbstractFilterable extends AbstractLifeCycle implements Fi
     /**
      * Subclasses can extend this abstract Builder.
      *
-     * @param <B> This builder class.
+     * @param <B> The type to build.
      */
     public abstract static class Builder<B extends Builder<B>> {
 

File: log4j-1.2-api/src/main/java/org/apache/log4j/layout/Log4j1XmlLayout.java
Patch:
@@ -46,8 +46,8 @@ public final class Log4j1XmlLayout extends AbstractStringLayout {
     @PluginFactory
     public static Log4j1XmlLayout createLayout(
             // @formatter:off
-            @PluginAttribute(value = "locationInfo", defaultBoolean = false) final boolean locationInfo,
-            @PluginAttribute(value = "properties", defaultBoolean = false) final boolean properties
+            @PluginAttribute(value = "locationInfo") final boolean locationInfo,
+            @PluginAttribute(value = "properties") final boolean properties
             // @formatter:on
     ) {
         return new Log4j1XmlLayout(locationInfo, properties);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/SyslogAppender.java
Patch:
@@ -114,7 +114,7 @@ public static SyslogAppender createAppender(
             @PluginAttribute("mdcId") final String mdcId,
             @PluginAttribute("mdcPrefix") final String mdcPrefix,
             @PluginAttribute("eventPrefix") final String eventPrefix,
-            @PluginAttribute(value = "newLine", defaultBoolean = false) final boolean newLine,
+            @PluginAttribute(value = "newLine") final boolean newLine,
             @PluginAttribute("newLineEscape") final String escapeNL,
             @PluginAttribute("appName") final String appName,
             @PluginAttribute("messageId") final String msgId,
@@ -127,7 +127,7 @@ public static SyslogAppender createAppender(
             @PluginAttribute(value = "charset", defaultString = "UTF-8") final Charset charsetName,
             @PluginAttribute("exceptionPattern") final String exceptionPattern,
             @PluginElement("LoggerFields") final LoggerFields[] loggerFields, 
-            @PluginAttribute(value = "advertise", defaultBoolean = false) final boolean advertise) {
+            @PluginAttribute(value = "advertise") final boolean advertise) {
         // @formatter:on
 
         final Protocol protocol = EnglishEnums.valueOf(Protocol.class, protocolStr);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/DeleteAction.java
Patch:
@@ -199,9 +199,9 @@ protected FileVisitor<Path> createFileVisitor(final Path visitorBaseDir, final L
     public static DeleteAction createDeleteAction(
             // @formatter:off
             @PluginAttribute("basePath") final String basePath, //
-            @PluginAttribute(value = "followLinks", defaultBoolean = false) final boolean followLinks,
+            @PluginAttribute(value = "followLinks") final boolean followLinks,
             @PluginAttribute(value = "maxDepth", defaultInt = 1) final int maxDepth,
-            @PluginAttribute(value = "testMode", defaultBoolean = false) final boolean testMode,
+            @PluginAttribute(value = "testMode") final boolean testMode,
             @PluginElement("PathSorter") final PathSorter sorterParameter,
             @PluginElement("PathConditions") final PathCondition[] pathConditions,
             @PluginElement("ScriptCondition") final ScriptCondition scriptCondition,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java
Patch:
@@ -336,7 +336,7 @@ public byte[] getFooter() {
      */
     @PluginFactory
     public static HtmlLayout createLayout(
-            @PluginAttribute(value = "locationInfo", defaultBoolean = false) final boolean locationInfo,
+            @PluginAttribute(value = "locationInfo") final boolean locationInfo,
             @PluginAttribute(value = "title", defaultString = DEFAULT_TITLE) final String title,
             @PluginAttribute("contentType") String contentType,
             @PluginAttribute(value = "charset", defaultString = "UTF-8") final Charset charset,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/LoggerFields.java
Patch:
@@ -74,7 +74,7 @@ public static LoggerFields createLoggerFields(
         @PluginElement("LoggerFields") final KeyValuePair[] keyValuePairs,
         @PluginAttribute("sdId") final String sdId,
         @PluginAttribute("enterpriseId") final String enterpriseId,
-        @PluginAttribute(value = "discardIfAllFieldsAreEmpty", defaultBoolean = false) final boolean discardIfAllFieldsAreEmpty) {
+        @PluginAttribute(value = "discardIfAllFieldsAreEmpty") final boolean discardIfAllFieldsAreEmpty) {
         final Map<String, String> map = new HashMap<>();
 
         for (final KeyValuePair keyValuePair : keyValuePairs) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java
Patch:
@@ -250,7 +250,7 @@ public static PatternLayout createLayout(
             // LOG4J2-783 use platform default by default, so do not specify defaultString for charset
             @PluginAttribute(value = "charset") final Charset charset,
             @PluginAttribute(value = "alwaysWriteExceptions", defaultBoolean = true) final boolean alwaysWriteExceptions,
-            @PluginAttribute(value = "noConsoleNoAnsi", defaultBoolean = false) final boolean noConsoleNoAnsi,
+            @PluginAttribute(value = "noConsoleNoAnsi") final boolean noConsoleNoAnsi,
             @PluginAttribute("header") final String headerPattern,
             @PluginAttribute("footer") final String footerPattern) {
         return newBuilder()

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java
Patch:
@@ -640,7 +640,7 @@ public static Rfc5424Layout createLayout(
             @PluginAttribute(value = "mdcId", defaultString = DEFAULT_MDCID) final String mdcId,
             @PluginAttribute("mdcPrefix") final String mdcPrefix,
             @PluginAttribute("eventPrefix") final String eventPrefix,
-            @PluginAttribute(value = "newLine", defaultBoolean = false) final boolean newLine,
+            @PluginAttribute(value = "newLine") final boolean newLine,
             @PluginAttribute("newLineEscape") final String escapeNL,
             @PluginAttribute("appName") final String appName,
             @PluginAttribute("messageId") final String msgId,
@@ -649,7 +649,7 @@ public static Rfc5424Layout createLayout(
             @PluginAttribute("mdcRequired") final String required,
             @PluginAttribute("exceptionPattern") final String exceptionPattern,
             // RFC 5425
-            @PluginAttribute(value = "useTlsMessageFormat", defaultBoolean = false) final boolean useTlsMessageFormat,
+            @PluginAttribute(value = "useTlsMessageFormat") final boolean useTlsMessageFormat,
             @PluginElement("LoggerFields") final LoggerFields[] loggerFields,
             @PluginConfiguration final Configuration config) {
         // @formatter:on

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/ScriptPatternSelector.java
Patch:
@@ -208,7 +208,7 @@ public static ScriptPatternSelector createSelector(
             @PluginElement("PatternMatch") final PatternMatch[] properties,
             @PluginAttribute("defaultPattern") String defaultPattern,
             @PluginAttribute(value = "alwaysWriteExceptions", defaultBoolean = true) final boolean alwaysWriteExceptions,
-            @PluginAttribute(value = "noConsoleNoAnsi", defaultBoolean = false) final boolean noConsoleNoAnsi,
+            @PluginAttribute(value = "noConsoleNoAnsi") final boolean noConsoleNoAnsi,
             @PluginConfiguration final Configuration configuration) {
         final Builder builder = newBuilder();
         builder.withScript(script);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/SyslogLayout.java
Patch:
@@ -140,7 +140,7 @@ public Map<String, String> getContentFormat() {
     @PluginFactory
     public static SyslogLayout createLayout(
             @PluginAttribute(value = "facility", defaultString = "LOCAL0") final Facility facility,
-            @PluginAttribute(value = "newLine", defaultBoolean = false) final boolean includeNewLine,
+            @PluginAttribute(value = "newLine") final boolean includeNewLine,
             @PluginAttribute("newLineEscape") final String escapeNL,
             @PluginAttribute(value = "charset", defaultString = "UTF-8") final Charset charset) {
         return new SyslogLayout(facility, includeNewLine, escapeNL, charset);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/YamlLayout.java
Patch:
@@ -794,8 +794,8 @@ public String getContentType() {
     public static AbstractJacksonLayout createLayout(
             // @formatter:off
             @PluginConfiguration final Configuration config,
-            @PluginAttribute(value = "locationInfo", defaultBoolean = false) final boolean locationInfo,
-            @PluginAttribute(value = "properties", defaultBoolean = false) final boolean properties,
+            @PluginAttribute(value = "locationInfo") final boolean locationInfo,
+            @PluginAttribute(value = "properties") final boolean properties,
             @PluginAttribute(value = "header", defaultString = DEFAULT_HEADER) final String headerPattern,
             @PluginAttribute(value = "footer", defaultString = DEFAULT_FOOTER) final String footerPattern,
             @PluginAttribute(value = "charset", defaultString = "UTF-8") final Charset charset,

File: log4j-api/src/test/java/org/apache/logging/log4j/util/SortedArrayStringMapTest.java
Patch:
@@ -149,6 +149,9 @@ private String createClassPath(Class<?> cls) {
         if (location.endsWith(resource)) {
             location = location.substring(0, location.length() - resource.length());
         }
+        if (!new File(location).exists()) {
+            location = File.separator + location;
+        }
         return location.isEmpty() ? "." : location;
     }
 

File: log4j-api/src/test/java/org/apache/logging/log4j/util/SortedArrayStringMapTest.java
Patch:
@@ -115,8 +115,8 @@ public void testDeserializationOfUnknownClass() throws Exception {
         if (exitValue != 0) {
             final StringBuilder sb = new StringBuilder();
             sb.append("DeserializerHelper exited with error code ").append(exitValue);
-            sb.append(". Classpath=").append(classpath);
-            sb.append(". Process output: ");
+            sb.append(". Classpath='").append(classpath);
+            sb.append("'. Process output: ");
             int c = -1;
             while ((c = in.read()) != -1) {
                 sb.append((char) c);

File: log4j-api/src/test/java/org/apache/logging/log4j/util/SortedArrayStringMapTest.java
Patch:
@@ -105,8 +105,8 @@ public void testDeserializationOfUnknownClass() throws Exception {
             fout.write(serialize(original));
             fout.flush();
         }
-        final Process process = new ProcessBuilder("java", "-cp",
-                createClassPath(SortedArrayStringMap.class, DeserializerHelper.class),
+        final String classpath = createClassPath(SortedArrayStringMap.class, DeserializerHelper.class);
+        final Process process = new ProcessBuilder("java", "-cp", classpath,
                 DeserializerHelper.class.getName(), file.getPath()).start();
         final BufferedReader in = new BufferedReader(new InputStreamReader(process.getErrorStream()));
         int exitValue = process.waitFor();
@@ -115,6 +115,7 @@ public void testDeserializationOfUnknownClass() throws Exception {
         if (exitValue != 0) {
             final StringBuilder sb = new StringBuilder();
             sb.append("DeserializerHelper exited with error code ").append(exitValue);
+            sb.append(". Classpath=").append(classpath);
             sb.append(". Process output: ");
             int c = -1;
             while ((c = in.read()) != -1) {

File: log4j-api/src/test/java/org/apache/logging/log4j/util/DeserializerHelper.java
Patch:
@@ -34,8 +34,8 @@ public static void main(String... args) throws Exception {
             final Object result = in.readObject();
             System.out.println(result);
         } catch (Throwable t) {
-            System.err.println("Could not deserialize: ");
-            t.printStackTrace();
+            System.err.println("Could not deserialize.");
+            throw t; // cause non-zero exit code
         } finally {
             try {
                 in.close();

File: log4j-api/src/test/java/org/apache/logging/log4j/util/SortedArrayStringMapTest.java
Patch:
@@ -108,7 +108,7 @@ public void testDeserializationOfUnknownClass() throws Exception {
                 DeserializerHelper.class.getName(), file.getPath()).inheritIO().start();
         int exitValue = process.waitFor();
 
-//        file.delete();
+        file.delete();
         assertEquals("no error", 0, exitValue);
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginCache.java
Patch:
@@ -63,7 +63,7 @@ public Map<String, PluginEntry> getCategory(final String category) {
      * Stores the plugin cache to a given OutputStream.
      *
      * @param os destination to save cache to.
-     * @throws IOException
+     * @throws IOException if an I/O exception occurs.
      */
     // NOTE: if this file format is to be changed, the filename should change and this format should still be readable
     public void writeCache(final OutputStream os) throws IOException {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginCache.java
Patch:
@@ -91,7 +91,7 @@ public void writeCache(final OutputStream os) throws IOException {
      * Loads and merges all the Log4j plugin cache files specified. Usually, this is obtained via a ClassLoader.
      *
      * @param resources URLs to all the desired plugin cache files to load.
-     * @throws IOException
+     * @throws IOException if an I/O exception occurs.
      */
     public void loadCacheFiles(final Enumeration<URL> resources) throws IOException {
         categories.clear();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/ContextDataInjector.java
Patch:
@@ -76,7 +76,7 @@ public interface ContextDataInjector {
      *     ThreadContextDataInjector.copyProperties(properties, reusable);
      *
      *     // then copy context data key-value pairs (may overwrite configuration properties)
-     *     reusable.addAll(rawContextData());
+     *     reusable.putAll(rawContextData());
      *     return reusable;
      * }
      * </pre>
@@ -102,7 +102,7 @@ public interface ContextDataInjector {
      * underlying context may or may not be reflected in the returned object, depending on the context data source and
      * the implementation of this method. It is not safe to pass the returned object to another thread.
      * </p>
-     * @return a {@code ReadOnlyStringMap} object reflecting the current state of the context
+     * @return a {@code ReadOnlyStringMap} object reflecting the current state of the context, may not return {@code null}
      */
     ReadOnlyStringMap rawContextData();
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileAppender.java
Patch:
@@ -122,7 +122,7 @@ public int getRegionLength() {
      *            "true".
      * @param name The name of the Appender.
      * @param immediateFlush "true" if the contents should be flushed on every write, "false" otherwise. The default is
-     *            "true".
+     *            "false".
      * @param regionLengthStr The buffer size, defaults to {@value MemoryMappedFileManager#DEFAULT_REGION_LENGTH}.
      * @param ignore If {@code "true"} (default) exceptions encountered when appending events are logged; otherwise they
      *            are propagated to the caller.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/ExecutorServices.java
Patch:
@@ -30,13 +30,13 @@ public class ExecutorServices {
      * Shuts down the given {@link ExecutorService} in an orderly fashion. Disables new tasks from submission and then
      * waits for existing tasks to terminate. Eventually cancels running tasks if too much time elapses.
      * <p>
-     * If the timeout is < 0, then a plain shutdown takes place.
+     * If the timeout is 0, then a plain shutdown takes place.
      * </p>
      * 
      * @param executorService
      *            the pool to shutdown.
      * @param timeout
-     *            the maximum time to wait
+     *            the maximum time to wait, or 0 to not wait for existing tasks to terminate.
      * @param timeUnit
      *            the time unit of the timeout argument
      * @param source

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/ReflectionUtil.java
Patch:
@@ -186,7 +186,7 @@ public static <T> T instantiate(final Class<T> clazz) {
         final Constructor<T> constructor = getDefaultConstructor(clazz);
         try {
             return constructor.newInstance();
-        } catch (final NoClassDefFoundError | InstantiationException e) {
+        } catch (final LinkageError | InstantiationException e) {
             // LOG4J2-1051
             // On platforms like Google App Engine and Android, some JRE classes are not supported: JMX, JNDI, etc.
             throw new IllegalArgumentException(e);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AppenderSet.java
Patch:
@@ -120,7 +120,7 @@ public Appender createAppender(final String appenderName, final String actualNam
             return null;
         }
         node.getAttributes().put("name", actualName);
-        if (node.getType().getElementName().equals("appender")) {
+        if (node.getType().getElementName().equals(Appender.ELEMENT_TYPE)) {
             final Node appNode = new Node(node);
             configuration.createConfiguration(appNode, null);
             if (appNode.getObject() instanceof Appender) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java
Patch:
@@ -54,7 +54,7 @@
  * Appender to append to if the queue is full. The AsyncAppender does not allow a filter to be specified on the Appender
  * references.
  */
-@Plugin(name = "Async", category = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "Async", category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
 public final class AsyncAppender extends AbstractAppender {
 
     private static final int DEFAULT_QUEUE_SIZE = 128;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java
Patch:
@@ -27,6 +27,7 @@
 import java.nio.charset.Charset;
 import java.util.concurrent.atomic.AtomicInteger;
 
+import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
@@ -47,7 +48,7 @@
  * encoding. (RG) Encoding is handled within the Layout. Typically, a Layout will generate a String and then call
  * getBytes which may use a configured encoding or the system default. OTOH, a Writer cannot print byte streams.
  */
-@Plugin(name = ConsoleAppender.PLUGIN_NAME, category = "Core", elementType = "appender", printObject = true)
+@Plugin(name = ConsoleAppender.PLUGIN_NAME, category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
 public final class ConsoleAppender extends AbstractOutputStreamAppender<OutputStreamManager> {
 
     public static final String PLUGIN_NAME = "Console";

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/CountingNoOpAppender.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Objects;
 import java.util.concurrent.atomic.AtomicLong;
 
+import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
@@ -28,7 +29,7 @@
 /**
  * No-Operation Appender that counts events.
  */
-@Plugin(name = "CountingNoOp", category = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "CountingNoOp", category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
 public class CountingNoOpAppender extends AbstractAppender  {
 
     private final AtomicLong total = new AtomicLong();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FailoverAppender.java
Patch:
@@ -41,7 +41,7 @@
  * to a different appender. Hopefully it is obvious that the Appenders must be configured
  * to not suppress exceptions for the FailoverAppender to work.
  */
-@Plugin(name = "Failover", category = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "Failover", category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
 public final class FailoverAppender extends AbstractAppender {
 
     private static final int DEFAULT_INTERVAL_SECONDS = 60;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileAppender.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 
+import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.config.Configuration;
@@ -36,7 +37,7 @@
 /**
  * File Appender.
  */
-@Plugin(name = FileAppender.PLUGIN_NAME, category = "Core", elementType = "appender", printObject = true)
+@Plugin(name = FileAppender.PLUGIN_NAME, category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
 public final class FileAppender extends AbstractOutputStreamAppender<FileManager> {
 
     public static final String PLUGIN_NAME = "File";

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileAppender.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 
+import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LogEvent;
@@ -40,7 +41,7 @@
  *
  * @since 2.1
  */
-@Plugin(name = "MemoryMappedFile", category = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "MemoryMappedFile", category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
 public final class MemoryMappedFileAppender extends AbstractOutputStreamAppender<MemoryMappedFileManager> {
 
     private static final int BIT_POSITION_1GB = 30; // 2^30 ~= 1GB

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/NullAppender.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.log4j.core.appender;
 
+import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
@@ -24,7 +25,7 @@
 /**
  * An Appender that ignores log events. Use for compatibility with version 1.2.
  */
-@Plugin(name = NullAppender.PLUGIN_NAME, category = "Core", elementType = "appender", printObject = true)
+@Plugin(name = NullAppender.PLUGIN_NAME, category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
 public class NullAppender extends AbstractAppender {
 
     public static final String PLUGIN_NAME = "Null";

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java
Patch:
@@ -19,6 +19,7 @@
 import java.io.OutputStream;
 import java.io.Serializable;
 
+import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
@@ -33,7 +34,7 @@
  * Character encoding is handled within the Layout.
  * </p>
  */
-@Plugin(name = "OutputStream", category = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "OutputStream", category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
 public final class OutputStreamAppender extends AbstractOutputStreamAppender<OutputStreamManager> {
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RandomAccessFileAppender.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 
+import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LogEvent;
@@ -38,7 +39,7 @@
 /**
  * File Appender.
  */
-@Plugin(name = "RandomAccessFile", category = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "RandomAccessFile", category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
 public final class RandomAccessFileAppender extends AbstractOutputStreamAppender<RandomAccessFileManager> {
 
     private final String fileName;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingFileAppender.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.zip.Deflater;
 
+import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LogEvent;
@@ -43,7 +44,7 @@
 /**
  * An appender that writes to files and can roll over at intervals.
  */
-@Plugin(name = RollingFileAppender.PLUGIN_NAME, category = "Core", elementType = "appender", printObject = true)
+@Plugin(name = RollingFileAppender.PLUGIN_NAME, category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
 public final class RollingFileAppender extends AbstractOutputStreamAppender<RollingFileManager> {
 
     public static final String PLUGIN_NAME = "RollingFile";

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppender.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.zip.Deflater;
 
+import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LogEvent;
@@ -44,7 +45,7 @@
  * An appender that writes to random access files and can roll over at
  * intervals.
  */
-@Plugin(name = "RollingRandomAccessFile", category = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "RollingRandomAccessFile", category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
 public final class RollingRandomAccessFileAppender extends AbstractOutputStreamAppender<RollingRandomAccessFileManager> {
 
     private final String fileName;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ScriptAppenderSelector.java
Patch:
@@ -35,7 +35,7 @@
 import org.apache.logging.log4j.core.script.AbstractScript;
 import org.apache.logging.log4j.core.script.ScriptManager;
 
-@Plugin(name = "ScriptAppenderSelector", category = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "ScriptAppenderSelector", category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
 public class ScriptAppenderSelector extends AbstractAppender {
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/SmtpAppender.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.io.Serializable;
 
+import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LogEvent;
@@ -52,7 +53,7 @@
  * message is appended. This can be modified by setting a filter for the
  * appender.
  */
-@Plugin(name = "SMTP", category = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "SMTP", category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
 public final class SmtpAppender extends AbstractAppender {
 
     private static final int DEFAULT_BUFFER_SIZE = 512;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/SocketAppender.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 
+import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LogEvent;
@@ -46,7 +47,7 @@
 /**
  * An Appender that delivers events over socket connections. Supports both TCP and UDP.
  */
-@Plugin(name = "Socket", category = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "Socket", category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
 public class SocketAppender extends AbstractOutputStreamAppender<AbstractSocketManager> {
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/SyslogAppender.java
Patch:
@@ -19,6 +19,7 @@
 import java.io.Serializable;
 import java.nio.charset.Charset;
 
+import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.config.Configuration;
@@ -42,7 +43,7 @@
 /**
  * The Syslog Appender.
  */
-@Plugin(name = "Syslog", category = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "Syslog", category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
 public class SyslogAppender extends SocketAppender {
 
     protected static final String RFC5424 = "RFC5424";

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/WriterAppender.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.io.Writer;
 
+import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.StringLayout;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
@@ -29,7 +30,7 @@
 /**
  * Appends log events to a {@link Writer}.
  */
-@Plugin(name = "Writer", category = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "Writer", category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
 public final class WriterAppender extends AbstractWriterAppender<WriterManager> {
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/JdbcAppender.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.log4j.core.appender.db.jdbc;
 
+import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.appender.AbstractAppender;
 import org.apache.logging.log4j.core.appender.db.AbstractDatabaseAppender;
@@ -34,7 +35,7 @@
  * @see ColumnConfig
  * @see ConnectionSource
  */
-@Plugin(name = "JDBC", category = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "JDBC", category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
 public final class JdbcAppender extends AbstractDatabaseAppender<JdbcDatabaseManager> {
 
     private final String description;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/JpaAppender.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.lang.reflect.Constructor;
 
+import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.appender.AbstractAppender;
@@ -37,7 +38,7 @@
  *
  * @see AbstractLogEventWrapperEntity
  */
-@Plugin(name = "JPA", category = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "JPA", category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
 public final class JpaAppender extends AbstractDatabaseAppender<JpaDatabaseManager> {
 
     private final String description;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rewrite/RewriteAppender.java
Patch:
@@ -36,7 +36,7 @@
 /**
  * This Appender allows the logging event to be manipulated before it is processed by other Appenders.
  */
-@Plugin(name = "Rewrite", category = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "Rewrite", category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
 public final class RewriteAppender extends AbstractAppender {
 
     private final Configuration config;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java
Patch:
@@ -50,7 +50,7 @@
  * the form "$${[key:]token}". The pattern will be resolved each time the Appender is called using
  * the built in StrSubstitutor and the StrLookup plugin that matches the specified key.
  */
-@Plugin(name = "Routing", category = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "Routing", category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
 public final class RoutingAppender extends AbstractAppender {
 
     public static final String STATIC_VARIABLES_KEY = "staticVariables";
@@ -278,7 +278,7 @@ private synchronized AppenderControl getControl(final String key, final LogEvent
     private Appender createAppender(final Route route, final LogEvent event) {
         final Node routeNode = route.getNode();
         for (final Node node : routeNode.getChildren()) {
-            if (node.getType().getElementName().equals("appender")) {
+            if (node.getType().getElementName().equals(Appender.ELEMENT_TYPE)) {
                 final Node appNode = new Node(node);
                 configuration.createConfiguration(appNode, event);
                 if (appNode.getObject() instanceof Appender) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Properties;
 
 import org.apache.logging.log4j.Level;
+import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.config.ConfigurationException;
 import org.apache.logging.log4j.core.config.ConfigurationSource;
@@ -148,7 +149,7 @@ public PropertiesConfiguration build() {
             }
         } else {
             final Map<String, Properties> appenders = PropertiesUtil
-                    .partitionOnCommonPrefixes(PropertiesUtil.extractSubset(rootProperties, "appender"));
+                    .partitionOnCommonPrefixes(PropertiesUtil.extractSubset(rootProperties, Appender.ELEMENT_TYPE));
             for (final Map.Entry<String, Properties> entry : appenders.entrySet()) {
                 builder.add(createAppender(entry.getKey().trim(), entry.getValue()));
             }

File: log4j-core/src/test/java/org/apache/logging/log4j/test/appender/AlwaysFailAppender.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.logging.log4j.test.appender;
 
 import org.apache.logging.log4j.LoggingException;
+import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.appender.AbstractAppender;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
@@ -27,7 +28,7 @@
 /**
  *
  */
-@Plugin(name="AlwaysFail", category ="Core", elementType="appender", printObject=true)
+@Plugin(name="AlwaysFail", category ="Core", elementType=Appender.ELEMENT_TYPE, printObject=true)
 public class AlwaysFailAppender extends AbstractAppender {
 
     private AlwaysFailAppender(final String name) {

File: log4j-core/src/test/java/org/apache/logging/log4j/test/appender/BlockingAppender.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.concurrent.TimeUnit;
 
+import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.appender.AbstractAppender;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
@@ -28,7 +29,7 @@
 /**
  *
  */
-@Plugin(name="Block", category ="Core", elementType="appender", printObject=true)
+@Plugin(name="Block", category ="Core", elementType=Appender.ELEMENT_TYPE, printObject=true)
 public class BlockingAppender extends AbstractAppender {
     public volatile boolean running = true;
 

File: log4j-core/src/test/java/org/apache/logging/log4j/test/appender/DeadlockAppender.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.LoggingException;
+import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.appender.AbstractAppender;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
@@ -31,7 +32,7 @@
 /**
  *
  */
-@Plugin(name="Deadlock", category ="Core", elementType="appender", printObject=true)
+@Plugin(name="Deadlock", category ="Core", elementType=Appender.ELEMENT_TYPE, printObject=true)
 public class DeadlockAppender extends AbstractAppender {
 
     private WorkerThread thread = null;

File: log4j-core/src/test/java/org/apache/logging/log4j/test/appender/FailOnceAppender.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.List;
 
 import org.apache.logging.log4j.LoggingException;
+import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.appender.AbstractAppender;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
@@ -30,7 +31,7 @@
 /**
  *
  */
-@Plugin(name="FailOnce", category ="Core", elementType="appender", printObject=true)
+@Plugin(name="FailOnce", category ="Core", elementType=Appender.ELEMENT_TYPE, printObject=true)
 public class FailOnceAppender extends AbstractAppender {
 
     boolean fail = true;

File: log4j-core/src/test/java/org/apache/logging/log4j/test/appender/ListAppender.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
+import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LogEvent;
@@ -46,7 +47,7 @@
  *
  * @see org.apache.logging.log4j.junit.LoggerContextRule#getListAppender(String) ILC.getListAppender
  */
-@Plugin(name = "List", category = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "List", category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
 public class ListAppender extends AbstractAppender {
 
     // Use CopyOnWriteArrayList?

File: log4j-core/src/test/java/org/apache/logging/log4j/test/appender/UsesLoggingAppender.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.log4j.test.appender;
 
+import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LogEvent;
@@ -30,7 +31,7 @@
 /**
  *
  */
-@Plugin(name = "UsesLoggingAppender", category = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "UsesLoggingAppender", category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
 public final class UsesLoggingAppender extends AbstractAppender {
 
     private final SomethingThatUsesLogging thing;

File: log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Locale;
 import java.util.concurrent.TimeUnit;
 
+import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LogEvent;
@@ -38,7 +39,7 @@
 /**
  * An Appender that uses the Avro protocol to route events to Flume.
  */
-@Plugin(name = "Flume", category = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "Flume", category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
 public final class FlumeAppender extends AbstractAppender implements FlumeEventFactory {
 
     private static final String[] EXCLUDED_PACKAGES = {"org.apache.flume", "org.apache.avro"};

File: log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/NoSqlAppender.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.log4j.nosql.appender;
 
+import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.appender.AbstractAppender;
 import org.apache.logging.log4j.core.appender.db.AbstractDatabaseAppender;
@@ -48,7 +49,7 @@
  * @see NoSqlConnection
  * @see NoSqlProvider
  */
-@Plugin(name = "NoSql", category = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "NoSql", category = "Core", elementType = Appender.ELEMENT_TYPE, printObject = true)
 public final class NoSqlAppender extends AbstractDatabaseAppender<NoSqlDatabaseManager<?>> {
     private final String description;
 

File: log4j-1.2-api/src/main/java/org/apache/log4j/config/InputStreamWrapper.java
Patch:
@@ -50,7 +50,7 @@ public int hashCode() {
     }
 
     @Override
-    public void mark(final int readlimit) {
+    public synchronized void mark(final int readlimit) {
         input.mark(readlimit);
     }
 

File: log4j-1.2-api/src/main/java/org/apache/log4j/config/Log4j1ConfigurationConverter.java
Patch:
@@ -142,7 +142,7 @@ protected void convert(final InputStream input, final OutputStream output) throw
     }
 
     InputStream getInputStream() throws IOException {
-        return cla.pathIn == null ? System.in : Files.newInputStream(cla.pathIn);
+        return cla.pathIn == null ? System.in : new InputStreamWrapper(Files.newInputStream(cla.pathIn), cla.pathIn.toString());
     }
 
     OutputStream getOutputStream() throws IOException {
@@ -165,7 +165,7 @@ public FileVisitResult visitFile(final Path file, final BasicFileAttributes attr
                             newFile = lastIndex < 0 ? newFile + FILE_EXT_XML
                                     : newFile.substring(0, lastIndex) + FILE_EXT_XML;
                             final Path resolved = file.resolveSibling(newFile);
-                            try (final InputStream input = Files.newInputStream(file);
+                            try (final InputStream input = new InputStreamWrapper(Files.newInputStream(file), file.toString());
                                     final OutputStream output = Files.newOutputStream(resolved)) {
                                 try {
                                     convert(input, output);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThreadContextDataInjector.java
Patch:
@@ -62,11 +62,11 @@ public static class ForDefaultThreadContextMap implements ContextDataInjector {
          * specified reusable StringMap.
          *
          * @param props list of configuration properties, may be {@code null}
-         * @param reusable a {@code StringMap} instance that may be reused to avoid creating temporary objects
+         * @param ignore a {@code StringMap} instance from the log event
          * @return a {@code StringMap} combining configuration properties with thread context data
          */
         @Override
-        public StringMap injectContextData(final List<Property> props, final StringMap reusable) {
+        public StringMap injectContextData(final List<Property> props, final StringMap ignore) {
 
             final Map<String, String> copy = ThreadContext.getImmutableContext();
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java
Patch:
@@ -506,7 +506,7 @@ public void removeFilter(final Filter filter) {
      */
     private Configuration setConfiguration(final Configuration config) {
         if (config == null) {
-            LOGGER.error("No configuration found for context '%s'.", contextName);
+            LOGGER.error("No configuration found for context '{}'.", contextName);
             // No change, return the current configuration.
             return this.configuration;
         }
@@ -597,7 +597,7 @@ private void reconfigure(final URI configURI) {
                 contextName, configURI, this, cl);
         final Configuration instance = ConfigurationFactory.getInstance().getConfiguration(this, contextName, configURI, cl);
         if (instance == null) {
-            LOGGER.error("Reconfiguration failed: No configuration found for '%s' at '%s' in '%s'", contextName, configURI, cl);
+            LOGGER.error("Reconfiguration failed: No configuration found for '{}' at '{}' in '{}'", contextName, configURI, cl);
         } else {
             setConfiguration(instance);
             /*

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileWatcher.java
Patch:
@@ -19,7 +19,7 @@
 import java.io.File;
 
 /**
- * Watches for changes in a Path and performs an action when the file is modified.
+ * Watches for changes in a File and performs an action when the file is modified.
  */
 public interface FileWatcher {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/server/TcpSocketServer.java
Patch:
@@ -244,7 +244,7 @@ public void run() {
                     logger.traceExit(entry);
                     return;
                 }
-                logger.error("Exception encountered on accept. Ignoring. Stack Trace :", e);
+                logger.error("Exception encountered on accept. Ignoring. Stack trace :", e);
             }
         }
         for (final Map.Entry<Long, SocketHandler> handlerEntry : handlers.entrySet()) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/server/TcpSocketServer.java
Patch:
@@ -181,13 +181,13 @@ public static TcpSocketServer<InputStream> createXmlSocketServer(final int port)
      */
     public static void main(final String[] args) throws Exception {
         if (args.length < 1 || args.length > 2) {
-            System.err.println("Incorrect number of arguments");
+            System.err.println("Incorrect number of arguments: " + args.length);
             printUsage();
             return;
         }
         final int port = Integer.parseInt(args[0]);
         if (port <= 0 || port >= MAX_PORT) {
-            System.err.println("Invalid port number");
+            System.err.println("Invalid port number: " + port);
             printUsage();
             return;
         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/server/UdpSocketServer.java
Patch:
@@ -106,13 +106,13 @@ public static UdpSocketServer<InputStream> createXmlSocketServer(final int port)
      */
     public static void main(final String[] args) throws Exception {
         if (args.length < 1 || args.length > 2) {
-            System.err.println("Incorrect number of arguments");
+            System.err.println("Incorrect number of arguments: " + args.length);
             printUsage();
             return;
         }
         final int port = Integer.parseInt(args[0]);
         if (port <= 0 || port >= MAX_PORT) {
-            System.err.println("Invalid port number");
+            System.err.println("Invalid port number:" + port);
             printUsage();
             return;
         }

File: log4j-1.2-api/src/main/java/org/apache/log4j/Layout.java
Patch:
@@ -17,15 +17,15 @@
 package org.apache.log4j;
 
 import org.apache.log4j.spi.LoggingEvent;
-import org.apache.logging.log4j.core.util.Constants;
+import org.apache.logging.log4j.util.Strings;
 
 /**
  *
  */
 public abstract class Layout {
 
     /** Note that the line.separator property can be looked up even by applets. */
-    public static final int LINE_SEP_LEN = Constants.LINE_SEPARATOR.length();
+    public static final int LINE_SEP_LEN = Strings.LINE_SEPARATOR.length();
 
     /**
      * Implement this method to create your own layout format.

File: log4j-1.2-api/src/test/java/org/apache/log4j/CategoryTest.java
Patch:
@@ -29,7 +29,6 @@
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.config.ConfigurationFactory;
 import org.apache.logging.log4j.core.layout.PatternLayout;
-import org.apache.logging.log4j.core.util.Constants;
 import org.apache.logging.log4j.message.Message;
 import org.apache.logging.log4j.message.ObjectMessage;
 import org.apache.logging.log4j.test.appender.ListAppender;
@@ -180,7 +179,7 @@ public void testClassName() {
         final String msg = msgs.get(0);
         appender.clear();
         final String threadName = Thread.currentThread().getName();
-        final String expected = "ERROR o.a.l.CategoryTest [" + threadName + "] Test Message" + Constants.LINE_SEPARATOR;
+        final String expected = "ERROR o.a.l.CategoryTest [" + threadName + "] Test Message" + Strings.LINE_SEPARATOR;
         assertTrue("Incorrect message " + Strings.dquote(msg) + " expected " + Strings.dquote(expected), msg.endsWith(expected));
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableFormatOptions.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.logging.log4j.core.pattern.JAnsiTextRenderer;
 import org.apache.logging.log4j.core.pattern.TextRenderer;
 import org.apache.logging.log4j.core.pattern.PlainTextRenderer;
-import org.apache.logging.log4j.core.util.Constants;
 import org.apache.logging.log4j.core.util.Loader;
 import org.apache.logging.log4j.core.util.Patterns;
 import org.apache.logging.log4j.status.StatusLogger;
@@ -98,7 +97,7 @@ public final class ThrowableFormatOptions {
     protected ThrowableFormatOptions(final int lines, final String separator, final List<String> ignorePackages,
             final TextRenderer textRenderer) {
         this.lines = lines;
-        this.separator = separator == null ? Constants.LINE_SEPARATOR : separator;
+        this.separator = separator == null ? Strings.LINE_SEPARATOR : separator;
         this.ignorePackages = ignorePackages;
         this.textRenderer = textRenderer == null ? PlainTextRenderer.getInstance() : textRenderer;
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.impl.ThrowableProxy;
-import org.apache.logging.log4j.core.util.Constants;
+import org.apache.logging.log4j.util.Strings;
 
 /**
  * Outputs the Throwable portion of the LoggingEvent as a full stack trace
@@ -70,9 +70,9 @@ public void format(final LogEvent event, final StringBuilder toAppendTo) {
             if (len > 0 && !Character.isWhitespace(toAppendTo.charAt(len - 1))) {
                 toAppendTo.append(' ');
             }
-            if (!options.allLines() || !Constants.LINE_SEPARATOR.equals(options.getSeparator())) {
+            if (!options.allLines() || !Strings.LINE_SEPARATOR.equals(options.getSeparator())) {
                 final StringBuilder sb = new StringBuilder();
-                final String[] array = extStackTrace.split(Constants.LINE_SEPARATOR);
+                final String[] array = extStackTrace.split(Strings.LINE_SEPARATOR);
                 final int limit = options.minLines(array.length) - 1;
                 for (int i = 0; i <= limit; ++i) {
                     sb.append(array[i]);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/LineSeparatorPatternConverter.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
-import org.apache.logging.log4j.core.util.Constants;
+import org.apache.logging.log4j.util.Strings;
 
 /**
  * Formats a line separator.
@@ -42,7 +42,7 @@ public final class LineSeparatorPatternConverter extends LogEventPatternConverte
      */
     private LineSeparatorPatternConverter() {
         super("Line Sep", "lineSep");
-        lineSep = Constants.LINE_SEPARATOR;
+        lineSep = Strings.LINE_SEPARATOR;
     }
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/RootThrowablePatternConverter.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.impl.ThrowableProxy;
-import org.apache.logging.log4j.core.util.Constants;
+import org.apache.logging.log4j.util.Strings;
 
 /**
  * Outputs the Throwable portion of the LoggingEvent as a full stack trace
@@ -70,9 +70,9 @@ public void format(final LogEvent event, final StringBuilder toAppendTo) {
             if (len > 0 && !Character.isWhitespace(toAppendTo.charAt(len - 1))) {
                 toAppendTo.append(' ');
             }
-            if (!options.allLines() || !Constants.LINE_SEPARATOR.equals(options.getSeparator())) {
+            if (!options.allLines() || !Strings.LINE_SEPARATOR.equals(options.getSeparator())) {
                 final StringBuilder sb = new StringBuilder();
-                final String[] array = trace.split(Constants.LINE_SEPARATOR);
+                final String[] array = trace.split(Strings.LINE_SEPARATOR);
                 final int limit = options.minLines(array.length) - 1;
                 for (int i = 0; i <= limit; ++i) {
                     sb.append(array[i]);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ThrowablePatternConverter.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.impl.ThrowableFormatOptions;
-import org.apache.logging.log4j.core.util.Constants;
 import org.apache.logging.log4j.util.Strings;
 
 
@@ -141,9 +140,9 @@ private void formatOption(final Throwable throwable, final StringBuilder buffer)
         if (len > 0 && !Character.isWhitespace(buffer.charAt(len - 1))) {
             buffer.append(' ');
         }
-        if (!options.allLines() || !Constants.LINE_SEPARATOR.equals(options.getSeparator())) {
+        if (!options.allLines() || !Strings.LINE_SEPARATOR.equals(options.getSeparator())) {
             final StringBuilder sb = new StringBuilder();
-            final String[] array = w.toString().split(Constants.LINE_SEPARATOR);
+            final String[] array = w.toString().split(Strings.LINE_SEPARATOR);
             final int limit = options.minLines(array.length) - 1;
             for (int i = 0; i <= limit; ++i) {
                 sb.append(array[i]);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/HostNameTest.java
Patch:
@@ -19,10 +19,10 @@
 import java.util.List;
 
 import org.apache.logging.log4j.core.appender.RollingFileAppender;
-import org.apache.logging.log4j.core.util.Constants;
 import org.apache.logging.log4j.core.util.NetUtils;
 import org.apache.logging.log4j.junit.LoggerContextRule;
 import org.apache.logging.log4j.test.appender.ListAppender;
+import org.apache.logging.log4j.util.Strings;
 import org.junit.Before;
 import org.junit.ClassRule;
 import org.junit.Test;
@@ -55,7 +55,7 @@ public void testHostname() {
         testLogger.debug("Hello, {}", "World");
         final List<String> msgs = host.getMessages();
         assertThat(msgs, hasSize(1));
-        String expected = NetUtils.getLocalHostname() + Constants.LINE_SEPARATOR;
+        String expected = NetUtils.getLocalHostname() + Strings.LINE_SEPARATOR;
         assertThat(msgs.get(0), endsWith(expected));
         assertNotNull("No Host FileAppender file name", hostFile.getFileName());
         expected = "target/" + NetUtils.getLocalHostname() + ".log";

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/ConsoleAppenderTest.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.logging.log4j.core.appender.ConsoleAppender.Target;
 import org.apache.logging.log4j.core.impl.Log4jLogEvent;
 import org.apache.logging.log4j.core.layout.PatternLayout;
-import org.apache.logging.log4j.core.util.Constants;
 import org.apache.logging.log4j.message.SimpleMessage;
+import org.apache.logging.log4j.util.Strings;
 import org.easymock.EasyMockSupport;
 import org.junit.AfterClass;
 import org.junit.Assert;
@@ -151,7 +151,7 @@ private void testFollowSystemPrintStream(final PrintStream ps, final Target targ
             }
             final String msg = baos.toString();
             assertNotNull("No message", msg);
-            assertTrue("Incorrect message: \"" + msg + "\"", msg.endsWith("Test" + Constants.LINE_SEPARATOR));
+            assertTrue("Incorrect message: \"" + msg + "\"", msg.endsWith("Test" + Strings.LINE_SEPARATOR));
         } finally {
             app.stop();
         }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/InMemoryAppenderTest.java
Patch:
@@ -21,9 +21,9 @@
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.impl.Log4jLogEvent;
 import org.apache.logging.log4j.core.layout.PatternLayout;
-import org.apache.logging.log4j.core.util.Constants;
 import org.apache.logging.log4j.message.SimpleMessage;
 import org.apache.logging.log4j.test.appender.InMemoryAppender;
+import org.apache.logging.log4j.util.Strings;
 import org.junit.Test;
 
 import static org.junit.Assert.*;
@@ -74,7 +74,7 @@ private void assertMessage(final String string, final InMemoryAppender app, fina
         final String msg = app.toString();
         assertNotNull("No message", msg);
         final String expectedHeader = header == null ? "" : header;
-        final String expected = expectedHeader + "Test" + Constants.LINE_SEPARATOR + "Test" + Constants.LINE_SEPARATOR;
+        final String expected = expectedHeader + "Test" + Strings.LINE_SEPARATOR + "Test" + Strings.LINE_SEPARATOR;
         assertTrue("Incorrect message: " + msg, msg.equals(expected));
         app.stop();
         assertFalse("Appender did not stop", app.isStarted());

File: log4j-core/src/test/java/org/apache/logging/log4j/core/pattern/MessageJansiConverterTest.java
Patch:
@@ -19,9 +19,9 @@
 import java.util.List;
 
 import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.core.util.Constants;
 import org.apache.logging.log4j.junit.LoggerContextRule;
 import org.apache.logging.log4j.test.appender.ListAppender;
+import org.apache.logging.log4j.util.Strings;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -34,7 +34,7 @@
 public class MessageJansiConverterTest {
 
     private static final String EXPECTED = "\u001B[31;1mWarning!\u001B[m Pants on \u001B[31mfire!\u001B[m"
-            + Constants.LINE_SEPARATOR;
+            + Strings.LINE_SEPARATOR;
 
     @Rule
     public LoggerContextRule init = new LoggerContextRule("log4j-message-ansi.xml");

File: log4j-core/src/test/java/org/apache/logging/log4j/core/pattern/MessageStyledConverterTest.java
Patch:
@@ -19,9 +19,9 @@
 import java.util.List;
 
 import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.core.util.Constants;
 import org.apache.logging.log4j.junit.LoggerContextRule;
 import org.apache.logging.log4j.test.appender.ListAppender;
+import org.apache.logging.log4j.util.Strings;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -34,7 +34,7 @@
 public class MessageStyledConverterTest {
 
     private static final String EXPECTED = "\u001B[31;1mWarning!\u001B[m Pants on \u001B[31;1mfire!\u001B[m"
-            + Constants.LINE_SEPARATOR;
+            + Strings.LINE_SEPARATOR;
 
     @Rule
     public LoggerContextRule init = new LoggerContextRule("log4j-message-styled.xml");

File: log4j-core/src/test/java/org/apache/logging/log4j/core/pattern/NoConsoleNoAnsiTest.java
Patch:
@@ -19,9 +19,9 @@
 import java.util.List;
 
 import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.core.util.Constants;
 import org.apache.logging.log4j.junit.LoggerContextRule;
 import org.apache.logging.log4j.test.appender.ListAppender;
+import org.apache.logging.log4j.util.Strings;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -34,7 +34,7 @@ public class NoConsoleNoAnsiTest {
 
     private static final String EXPECTED =
             "ERROR LoggerTest o.a.l.l.c.p.NoConsoleNoAnsiTest org.apache.logging.log4j.core.pattern.NoConsoleNoAnsiTest"
-            + Constants.LINE_SEPARATOR;
+            + Strings.LINE_SEPARATOR;
 
     @Rule
     public LoggerContextRule init = new LoggerContextRule("log4j2-console-noConsoleNoAnsi.xml");

File: log4j-core/src/test/java/org/apache/logging/log4j/core/pattern/RegexReplacementConverterTest.java
Patch:
@@ -21,8 +21,8 @@
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.impl.Log4jLogEvent;
-import org.apache.logging.log4j.core.util.Constants;
 import org.apache.logging.log4j.message.SimpleMessage;
+import org.apache.logging.log4j.util.Strings;
 import org.junit.Test;
 
 import static org.junit.Assert.*;
@@ -49,6 +49,6 @@ public void testReplacement() {
             options);
         converter.format(event, sb);
         assertEquals("org/apache/logging/log4j/core/pattern/RegexReplacementConverterTest This is a test" +
-            Constants.LINE_SEPARATOR, sb.toString());
+            Strings.LINE_SEPARATOR, sb.toString());
     }
 }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/pattern/RegexReplacementTest.java
Patch:
@@ -23,10 +23,10 @@
 import java.util.List;
 
 import org.apache.logging.log4j.ThreadContext;
-import org.apache.logging.log4j.core.util.Constants;
 import org.apache.logging.log4j.junit.LoggerContextRule;
 import org.apache.logging.log4j.junit.ThreadContextMapRule;
 import org.apache.logging.log4j.test.appender.ListAppender;
+import org.apache.logging.log4j.util.Strings;
 import org.junit.Before;
 import org.junit.ClassRule;
 import org.junit.Rule;
@@ -40,7 +40,7 @@ public class RegexReplacementTest {
     private static ListAppender app;
     private static ListAppender app2;
 
-    private static final String EXPECTED = "/RegexReplacementTest" + Constants.LINE_SEPARATOR;
+    private static final String EXPECTED = "/RegexReplacementTest" + Strings.LINE_SEPARATOR;
 
     @ClassRule
     public static LoggerContextRule context = new LoggerContextRule(CONFIG);
@@ -71,7 +71,7 @@ public void testReplacement() {
         msgs = app.getMessages();
         assertNotNull(msgs);
         assertEquals("Incorrect number of messages. Should be 1 is " + msgs.size(), 1, msgs.size());
-        assertEquals("LoggerTest This is a test for Apache" + Constants.LINE_SEPARATOR, msgs.get(0));
+        assertEquals("LoggerTest This is a test for Apache" + Strings.LINE_SEPARATOR, msgs.get(0));
     }
      @Test
     public void testConverter() {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/pattern/StyleConverterTest.java
Patch:
@@ -19,9 +19,9 @@
 import java.util.List;
 
 import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.core.util.Constants;
 import org.apache.logging.log4j.junit.LoggerContextRule;
 import org.apache.logging.log4j.test.appender.ListAppender;
+import org.apache.logging.log4j.util.Strings;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -35,7 +35,7 @@ public class StyleConverterTest {
 
     private static final String EXPECTED =
         "\u001B[1;31mERROR\u001B[m \u001B[1;36mLoggerTest\u001B[m o.a.l.l.c.p.StyleConverterTest org.apache.logging.log4j.core.pattern.StyleConverterTest"
-        + Constants.LINE_SEPARATOR;
+        + Strings.LINE_SEPARATOR;
 
     @Rule
     public LoggerContextRule init = new LoggerContextRule("log4j-style.xml");

File: log4j-core/src/test/java/org/apache/logging/log4j/test/layout/BasicLayout.java
Patch:
@@ -23,15 +23,15 @@
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
 import org.apache.logging.log4j.core.layout.AbstractStringLayout;
-import org.apache.logging.log4j.core.util.Constants;
+import org.apache.logging.log4j.util.Strings;
 
 /**
  *
  */
 @Plugin(name = "BasicLayout", category = "Core", elementType = "layout", printObject = true)
 public class BasicLayout extends AbstractStringLayout {
 
-    private static final String HEADER = "Header" + Constants.LINE_SEPARATOR;
+    private static final String HEADER = "Header" + Strings.LINE_SEPARATOR;
 
     public BasicLayout(final Charset charset) {
         super(charset);
@@ -44,7 +44,7 @@ public byte[] getHeader() {
 
     @Override
     public String toSerializable(final LogEvent event) {
-        return event.getMessage().getFormattedMessage() + Constants.LINE_SEPARATOR;
+        return event.getMessage().getFormattedMessage() + Strings.LINE_SEPARATOR;
     }
 
     /**

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/NoOpThreadContextMap.java
Patch:
@@ -42,7 +42,7 @@ public String get(final String key) {
 
     @Override
     public Map<String, String> getCopy() {
-        return new HashMap<String, String>();
+        return new HashMap<>();
     }
 
     @Override

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java
Patch:
@@ -148,7 +148,7 @@ public URL getUrl() {
     @Override
     public String toString() {
         String result = "Provider[";
-        if (priority != DEFAULT_PRIORITY) {
+        if (!DEFAULT_PRIORITY.equals(priority)) {
             result += "priority=" + priority + ", ";
         }
         if (threadContextMap != null) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AppenderSet.java
Patch:
@@ -48,7 +48,7 @@ public static class Builder implements org.apache.logging.log4j.core.util.Builde
         @Override
         public AppenderSet build() {
             if (configuration == null) {
-                LOGGER.error("Configuration is missing from AppenderNodeSet");
+                LOGGER.error("Configuration is missing from AppenderSet");
             }
             final List<Node> children = node.getChildren();
             final Map<String, Node> map = new HashMap<>(node == null ? 0 : children.size());
@@ -59,7 +59,7 @@ public AppenderSet build() {
             for (final Node childNode : children) {
                 final String key = childNode.getAttributes().get("name");
                 if (key == null) {
-                    LOGGER.error("The attribute 'name' is missing from from the node {} in the AppenderNodeSet {}",
+                    LOGGER.error("The attribute 'name' is missing from from the node {} in the AppenderSet {}",
                             childNode, children);
                 } else {
                     map.put(key, childNode);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/MutableLogEvent.java
Patch:
@@ -61,6 +61,7 @@ public class MutableLogEvent implements LogEvent, ReusableMessage {
     private String loggerFqcn;
     private StackTraceElement source;
     private ThreadContext.ContextStack contextStack;
+    transient boolean reserved = false;
 
     public MutableLogEvent() {
         this(new StringBuilder(Constants.INITIAL_REUSABLE_MESSAGE_SIZE), new Object[10]);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/Property.java
Patch:
@@ -54,7 +54,7 @@ public String getName() {
      * @return the value of the property.
      */
     public String getValue() {
-        return value;
+        return value == null ? "" : value; // LOG4J2-1313 null would be same as Property not existing
     }
 
     /**
@@ -84,6 +84,6 @@ public static Property createProperty(
 
     @Override
     public String toString() {
-        return name + '=' + value;
+        return name + '=' + getValue();
     }
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java
Patch:
@@ -86,4 +86,5 @@ public void format(final LogEvent event, final StringBuilder toAppendTo) {
             }
         }
     }
+
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/RootThrowablePatternConverter.java
Patch:
@@ -45,6 +45,7 @@ private RootThrowablePatternConverter(final String[] options) {
     /**
      * Gets an instance of the class.
      *
+     *
      * @param options pattern options, may be null.  If first element is "short",
      *                only the first line of the throwable will be formatted.
      * @return instance of class.

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/PropertyTest.java
Patch:
@@ -36,7 +36,7 @@ public class PropertyTest {
     @ClassRule
     public static LoggerContextRule context = new LoggerContextRule(CONFIG);
 
-    @Ignore // TODO fix LOG4J2-1313
+    @Ignore("TODO fix LOG4J2-1313")
     @Test
     public void testEmptyAttribute() throws Exception {
         final org.apache.logging.log4j.Logger logger = LogManager.getLogger();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java
Patch:
@@ -193,7 +193,7 @@ public B setDirect(final boolean shouldDirect) {
         @Override
         public ConsoleAppender build() {
             if (follow && direct) {
-                throw new IllegalArgumentException("Cannot use both follow and direct on ConsoleAppender");
+                throw new IllegalArgumentException("Cannot use both follow and direct on ConsoleAppender '" + getName() + "'");
             }
             final Layout<? extends Serializable> layout = getOrCreateLayout();
             return new ConsoleAppender(getName(), layout, getFilter(), getManager(target, follow, direct, layout),

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/AsyncAppenderTest.java
Patch:
@@ -39,7 +39,7 @@
 @RunWith(Parameterized.class)
 public class AsyncAppenderTest {
 
-    private static final int TIMEOUT_MILLIS = 1000;
+    private static final int TIMEOUT_MILLIS = 2000;
 
     @Parameterized.Parameters(name = "{0}")
     public static Object[] data() {

File: log4j-core/src/test/java/org/apache/logging/log4j/test/ExtendedLevels.java
Patch:
@@ -17,12 +17,10 @@
 package org.apache.logging.log4j.test;
 
 import org.apache.logging.log4j.Level;
-import org.apache.logging.log4j.core.config.plugins.Plugin;
 
 /**
  *
  */
-@Plugin(name="ExtendedLevel", category="Level")
 public class ExtendedLevels {
 
     public static final Level NOTE = Level.forName("NOTE", 350);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractManager.java
Patch:
@@ -106,6 +106,7 @@ public static <M extends AbstractManager, T> M getManager(final String name, fin
                                                               final T data) {
         LOCK.lock();
         try {
+            @SuppressWarnings("unchecked")
             M manager = (M) MAP.get(name);
             if (manager == null) {
                 manager = factory.createManager(name, data);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java
Patch:
@@ -46,7 +46,7 @@ public final class CronTriggeringPolicy implements TriggeringPolicy {
     private final Configuration configuration;
     private final boolean checkOnStartup;
     private volatile Date nextRollDate;
-    private CronScheduledFuture future;
+    private CronScheduledFuture<?> future;
 
     private CronTriggeringPolicy(final CronExpression schedule, final boolean checkOnStartup,
             final Configuration configuration) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java
Patch:
@@ -54,7 +54,7 @@
 public class DefaultConfigurationBuilder<T extends BuiltConfiguration> implements ConfigurationBuilder<T> {
 
     private static final String INDENT = "\t";
-    private static final String EOL = "\n";
+    private static final String EOL = System.lineSeparator();
     
     private final Component root = new Component();
     private Component loggers;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/AbstractLifeCycle.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.log4j.core;
 
+import java.util.Objects;
 import java.util.concurrent.TimeUnit;
 
 import org.apache.logging.log4j.status.StatusLogger;
@@ -120,7 +121,7 @@ public void start() {
 
     @Override
     public void stop() {
-        this.state = LifeCycle.State.STOPPED;
+        stop(-1, TimeUnit.MILLISECONDS);
     }
 
     @Override

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/Log4jThreadFactory.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 /**
- * Creates {@link Log4jThreads}.
+ * Creates {@link Log4jThread}s.
  * 
  * @since 2.7
  */

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java
Patch:
@@ -41,7 +41,6 @@
 @Scheduled
 public class IdlePurgePolicy extends AbstractLifeCycle implements PurgePolicy, Runnable {
 
-    private static final Logger LOGGER = StatusLogger.getLogger();
     private final long timeToLive;
     private final long checkInterval;    
     private final ConcurrentMap<String, Long> appendersUsage = new ConcurrentHashMap<>();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java
Patch:
@@ -23,19 +23,16 @@
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
-import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.AbstractLifeCycle;
 import org.apache.logging.log4j.core.util.CronExpression;
 import org.apache.logging.log4j.core.util.Log4jThreadFactory;
-import org.apache.logging.log4j.status.StatusLogger;
 
 /**
  *
  */
 public class ConfigurationScheduler extends AbstractLifeCycle {
 
     private static final int MAX_SCHEDULED_ITEMS = 5;
-    private static final Logger LOGGER = StatusLogger.getLogger();
     private ScheduledExecutorService executorService;
 
     private int scheduledItems = 0;

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/MutableContextData.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.logging.log4j.spi;
 
-import org.apache.logging.log4j.spi.ContextData;
 import org.apache.logging.log4j.util.BiConsumer;
 import org.apache.logging.log4j.util.TriConsumer;
 

File: log4j-api/src/main/java/org/apache/logging/log4j/util/ArrayContextData.java
Patch:
@@ -243,7 +243,7 @@ public void putAll(final ContextData source) {
         assertNotFrozen();
         assertNoConcurrentModification();
 
-        if (source instanceof ArrayContextData) {
+        if (source instanceof ArrayContextData && this.size == 0) {
             initFrom0((ArrayContextData) source);
         } else if (source != null) {
             if (source == this) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.logging.log4j.core.net;
 
-import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.Serializable;
@@ -29,12 +28,12 @@
 import java.util.Map;
 import java.util.concurrent.CountDownLatch;
 
-import org.apache.commons.io.output.NullOutputStream;
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.appender.AppenderLoggingException;
 import org.apache.logging.log4j.core.appender.ManagerFactory;
 import org.apache.logging.log4j.core.appender.OutputStreamManager;
 import org.apache.logging.log4j.core.util.Log4jThread;
+import org.apache.logging.log4j.core.util.NullOutputStream;
 import org.apache.logging.log4j.util.Strings;
 
 /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/SocketAppender.java
Patch:
@@ -70,7 +70,7 @@ public static class Builder<B extends Builder<B>> extends AbstractOutputStreamAp
         private int connectTimeoutMillis;
 
         @PluginBuilderAttribute
-        private String host;
+        private String host = "localhost";
 
         @PluginBuilderAttribute
         private boolean immediateFail = true;

File: log4j-api/src/main/java/org/apache/logging/log4j/util/BiConsumer.java
Patch:
@@ -5,7 +5,7 @@
  *
  * @param <K> type of the first argument
  * @param <V> type of the second argument
- * @see org.apache.logging.log4j.core.ContextData
+ * @see org.apache.logging.log4j.spi.ContextData
  * @since 2.7
  */
 public interface BiConsumer<K, V> {

File: log4j-api/src/main/java/org/apache/logging/log4j/util/TriConsumer.java
Patch:
@@ -6,7 +6,7 @@
  * @param <K> type of the first argument
  * @param <V> type of the second argument
  * @param <S> type of the third argument
- * @see org.apache.logging.log4j.core.ContextData
+ * @see org.apache.logging.log4j.spi.ContextData
  * @since 2.7
  */
 public interface TriConsumer<K, V, S> {

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/CopyOnWriteSortedArrayThreadContextMap.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.logging.log4j.spi;
 
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.Map;
 
 import org.apache.logging.log4j.util.PropertiesUtil;
@@ -148,7 +149,7 @@ public boolean containsKey(final String key) {
     @Override
     public Map<String, String> getCopy() {
         final MutableContextData map = localMap.get();
-        return map == null ? Collections.<String, String>emptyMap() : map.asMap();
+        return map == null ? new HashMap<String, String>() : map.asMap();
     }
 
     /**

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/GarbageFreeSortedArrayThreadContextMap.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.logging.log4j.spi;
 
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.Map;
 
 import org.apache.logging.log4j.util.PropertiesUtil;
@@ -150,7 +151,7 @@ public boolean containsKey(final String key) {
     @Override
     public Map<String, String> getCopy() {
         final MutableContextData map = localMap.get();
-        return map == null ? Collections.<String, String>emptyMap() : map.asMap();
+        return map == null ? new HashMap<String, String>() : map.asMap();
     }
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ContextDataInjector.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.util.List;
 
-import org.apache.logging.log4j.core.ContextData;
 import org.apache.logging.log4j.core.config.Property;
 import org.apache.logging.log4j.spi.ContextData;
 import org.apache.logging.log4j.spi.MutableContextData;

File: log4j-1.2-api/src/main/java/org/apache/log4j/config/Log4j1ConfigurationFactory.java
Patch:
@@ -47,7 +47,6 @@ public Configuration getConfiguration(final LoggerContext loggerContext, final C
         } catch (IOException e) {
             throw new ConfigurationException("Unable to load " + source.toString(), e);
         }
-        if (builder == null) return null;
         return builder.build();
     }
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/builder/ConfigurationBuilderTest.java
Patch:
@@ -24,8 +24,9 @@
 import org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilderFactory;
 import org.apache.logging.log4j.core.config.builder.impl.BuiltConfiguration;
 import org.junit.Test;
+import org.xmlunit.matchers.CompareMatcher;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.*;
 
 public class ConfigurationBuilderTest {
 
@@ -84,7 +85,7 @@ public void testXmlConstructing() throws Exception {
         final ConfigurationBuilder<BuiltConfiguration> builder = ConfigurationBuilderFactory.newConfigurationBuilder();
         addTestFixtures("config name", builder);
         final String xmlConfiguration = builder.toXmlConfiguration();
-        assertEquals(expectedXml, xmlConfiguration);
+        assertThat(xmlConfiguration, CompareMatcher.isIdenticalTo(expectedXml));
     }
 
 }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderCronOnceADayTest.java
Patch:
@@ -78,7 +78,7 @@ public static void beforeClass() throws Exception {
     private final LoggerContextRule loggerContextRule = new LoggerContextRule(CONFIG_TARGET);
 
     @Rule
-    public RuleChain chain = loggerContextRule.withCleanFoldersRule(true, false, 1, DIR);
+    public RuleChain chain = loggerContextRule.withCleanFoldersRule(DIR);
 
     @Test
     public void testAppender() throws Exception {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/builder/CustomConfigurationFactory.java
Patch:
@@ -59,7 +59,7 @@ static Configuration addTestFixtures(final String name, final ConfigurationBuild
 
     @Override
     public Configuration getConfiguration(final LoggerContext loggerContext, final ConfigurationSource source) {
-        return getConfiguration(null, source.toString(), null);
+        return getConfiguration(loggerContext, source.toString(), null);
     }
 
     @Override

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java
Patch:
@@ -132,7 +132,7 @@ private static boolean isJmxDisabled() {
     public static void reregisterMBeansAfterReconfigure() {
         // avoid creating Platform MBean Server if JMX disabled
         if (isJmxDisabled()) {
-            LOGGER.debug("JMX disabled for log4j2. Not registering MBeans.");
+            LOGGER.debug("JMX disabled for Log4j2. Not registering MBeans.");
             return;
         }
         final MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
@@ -141,7 +141,7 @@ public static void reregisterMBeansAfterReconfigure() {
 
     public static void reregisterMBeansAfterReconfigure(final MBeanServer mbs) {
         if (isJmxDisabled()) {
-            LOGGER.debug("JMX disabled for log4j2. Not registering MBeans.");
+            LOGGER.debug("JMX disabled for Log4j2. Not registering MBeans.");
             return;
         }
 
@@ -194,7 +194,7 @@ public static void reregisterMBeansAfterReconfigure(final MBeanServer mbs) {
      */
     public static void unregisterMBeans() {
         if (isJmxDisabled()) {
-            LOGGER.debug("JMX disabled for log4j2. Not unregistering MBeans.");
+            LOGGER.debug("JMX disabled for Log4j2. Not unregistering MBeans.");
             return;
         }
         final MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.ThreadContext;
-import org.apache.logging.log4j.core.ContextData;
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.Logger;
@@ -35,9 +34,10 @@
 import org.apache.logging.log4j.core.impl.ContextDataFactory;
 import org.apache.logging.log4j.core.impl.ContextDataInjector;
 import org.apache.logging.log4j.core.impl.ContextDataInjectorFactory;
-import org.apache.logging.log4j.core.impl.MutableContextData;
 import org.apache.logging.log4j.core.util.KeyValuePair;
 import org.apache.logging.log4j.message.Message;
+import org.apache.logging.log4j.spi.ContextData;
+import org.apache.logging.log4j.spi.MutableContextData;
 
 /**
  * Compare against a log level that is associated with a context value. By default the context is the

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/ContextMapLookup.java
Patch:
@@ -17,13 +17,13 @@
 package org.apache.logging.log4j.core.lookup;
 
 import org.apache.logging.log4j.ThreadContext;
-import org.apache.logging.log4j.core.ContextData;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.impl.ContextDataFactory;
 import org.apache.logging.log4j.core.impl.ContextDataInjector;
 import org.apache.logging.log4j.core.impl.ContextDataInjectorFactory;
-import org.apache.logging.log4j.core.impl.MutableContextData;
+import org.apache.logging.log4j.spi.ContextData;
+import org.apache.logging.log4j.spi.MutableContextData;
 
 /**
  * Looks up keys from the context. By default this is the {@link ThreadContext}, but users may

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginRegistry.java
Patch:
@@ -179,7 +179,6 @@ private Map<String, List<PluginType<?>>> decodeCacheFiles(final ClassLoader load
                 final String className = entry.getClassName();
                 try {
                     final Class<?> clazz = loader.loadClass(className);
-                    @SuppressWarnings({"unchecked","rawtypes"})
                     final PluginType<?> type = new PluginType<>(entry, clazz, entry.getName());
                     types.add(type);
                     ++pluginCount;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/builder/CustomConfigurationFactory.java
Patch:
@@ -48,9 +48,9 @@ static Configuration addTestFixtures(final String name, final ConfigurationBuild
         appenderBuilder.add(builder.newFilter("MarkerFilter", Filter.Result.DENY,
                 Filter.Result.NEUTRAL).addAttribute("marker", "FLOW"));
         builder.add(appenderBuilder);
-        builder.add(builder.newLogger("org.apache.logging.log4j", Level.DEBUG).
-                add(builder.newAppenderRef("Stdout")).
-                addAttribute("additivity", false));
+        builder.add(builder.newLogger("org.apache.logging.log4j", Level.DEBUG, true).
+                    add(builder.newAppenderRef("Stdout")).
+                    addAttribute("additivity", false));
         builder.add(builder.newRootLogger(Level.ERROR).add(builder.newAppenderRef("Stdout")));
         builder.add(builder.newCustomLevel("Panic", 17));
         return builder.build();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultCustomLevelComponentBuilder.java
Patch:
@@ -28,6 +28,6 @@ class DefaultCustomLevelComponentBuilder extends DefaultComponentAndConfiguratio
     public DefaultCustomLevelComponentBuilder(final DefaultConfigurationBuilder<? extends Configuration> builder,
             final String name, final int level) {
         super(builder, name, "CustomLevel");
-        addAttribute("level", Integer.toString(level));
+        addAttribute("intLevel", level);
     }
 }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/builder/CustomConfigurationFactory.java
Patch:
@@ -52,6 +52,7 @@ static Configuration addTestFixtures(final String name, final ConfigurationBuild
                 add(builder.newAppenderRef("Stdout")).
                 addAttribute("additivity", false));
         builder.add(builder.newRootLogger(Level.ERROR).add(builder.newAppenderRef("Stdout")));
+        builder.add(builder.newCustomLevel("Panic", 17));
         return builder.build();
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java
Patch:
@@ -46,6 +46,7 @@
 import org.apache.logging.log4j.core.util.NanoClock;
 import org.apache.logging.log4j.core.util.WatchManager;
 import org.apache.logging.log4j.util.PropertiesUtil;
+import org.apache.logging.log4j.util.Strings;
 
 import javax.xml.stream.XMLOutputFactory;
 import javax.xml.stream.XMLStreamException;
@@ -236,7 +237,7 @@ private void writeXmlConfiguration(XMLStreamWriter xmlWriter) throws XMLStreamEx
         }
         */
         if (!getPluginPackages().isEmpty()) {
-            xmlWriter.writeAttribute("packages", getPluginPackages().toString()); // TODO comma-separated string
+            xmlWriter.writeAttribute("packages", Strings.join(getPluginPackages(), ','));
         }
         if (!isShutdownHookEnabled()) {
             xmlWriter.writeAttribute("shutdownHook", "disable");

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java
Patch:
@@ -64,9 +64,9 @@ public final class PatternLayout extends AbstractStringLayout {
     public static final String DEFAULT_CONVERSION_PATTERN = "%m%n";
 
     /**
-     * A conversion pattern equivalent to the TTCCCLayout. Current value is <b>%r [%t] %p %c %x - %m%n</b>.
+     * A conversion pattern equivalent to the TTCCLayout. Current value is <b>%r [%t] %p %c %notEmpty{%x }- %m%n</b>.
      */
-    public static final String TTCC_CONVERSION_PATTERN = "%r [%t] %p %c %x - %m%n";
+    public static final String TTCC_CONVERSION_PATTERN = "%r [%t] %p %c %notEmpty{%x }- %m%n";
 
     /**
      * A simple pattern. Current value is <b>%d [%t] %p %c - %m%n</b>.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java
Patch:
@@ -155,6 +155,7 @@ public void mergConfigurations(final Node target, final Node source, final Plugi
                             final Node targetNode = getLoggerNode(targetChildNode, node.getAttributes().get(NAME));
                             final Node loggerNode = new Node(targetChildNode, node.getName(), node.getType());
                             if (targetNode != null) {
+                                targetNode.getAttributes().putAll(node.getAttributes());
                                 for (final Node sourceLoggerChild : node.getChildren()) {
                                     if (isFilterNode(sourceLoggerChild)) {
                                         boolean foundFilter = false;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java
Patch:
@@ -196,7 +196,7 @@ public T build(final boolean initialize) {
     }
 
     @Override
-    public void writeXmlConfigurationFile(final OutputStream output) throws IOException {
+    public void writeXmlConfiguration(final OutputStream output) throws IOException {
         try {
             XMLStreamWriter xmlWriter = XMLOutputFactory.newInstance().createXMLStreamWriter(output);
             writeConfigurationXml(xmlWriter);
@@ -211,7 +211,7 @@ public void writeXmlConfigurationFile(final OutputStream output) throws IOExcept
     }
 
     @Override
-    public String writeXmlConfiguration() {
+    public String toXmlConfiguration() {
         StringWriter sw = new StringWriter();
         try {
             XMLStreamWriter xmlWriter = XMLOutputFactory.newInstance().createXMLStreamWriter(sw);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutLookupDateTest.java
Patch:
@@ -18,10 +18,11 @@ public class PatternLayoutLookupDateTest {
 
     @Test
     public void testDateLookupInMessage() {
-        context.getLogger(PatternLayoutLookupDateTest.class.getName()).info("${date:YYYY-MM-dd}");
+        final String template = "${date:YYYY-MM-dd}";
+        context.getLogger(PatternLayoutLookupDateTest.class.getName()).info(template);
         final ListAppender listAppender = context.getListAppender("List");
         final String string = listAppender.getMessages().get(0);
-        Assert.assertFalse(string, string.contains("${date:YYYY-MM-dd}"));
+        Assert.assertFalse(string, string.contains(template));
     }
 
 }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutLookupDateTest.java
Patch:
@@ -18,10 +18,10 @@ public class PatternLayoutLookupDateTest {
 
     @Test
     public void testDateLookupInMessage() {
-        context.getLogger(PatternLayoutLookupDateTest.class.getName()).info("${date:now:buhu}");
+        context.getLogger(PatternLayoutLookupDateTest.class.getName()).info("${date:YYYY-MM-dd}");
         final ListAppender listAppender = context.getListAppender("List");
         final String string = listAppender.getMessages().get(0);
-        Assert.assertFalse(string, string.contains("${date:now:buhu}"));
+        Assert.assertFalse(string, string.contains("${date:YYYY-MM-dd}"));
     }
 
 }

File: log4j-1.2-api/src/main/java/org/apache/log4j/config/Log4j1ConfigurationFactory.java
Patch:
@@ -89,7 +89,7 @@ private Map<String, String> buildClassToPropertyPrefixMap(final Properties prope
 
     private void buildConsoleAppender(final Properties properties, final String name,
             final ConfigurationBuilder<BuiltConfiguration> builder) {
-        final AppenderComponentBuilder appenderBuilder = builder.newAppender(name, "CONSOLE");
+        final AppenderComponentBuilder appenderBuilder = builder.newAppender(name, "Console");
         buildConsoleAppenderTarget(properties, name, builder, appenderBuilder);
         buildAppenderLayout(properties, name, builder, appenderBuilder);
         buildConsoleAppenderFollow(properties, name, builder, appenderBuilder);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java
Patch:
@@ -84,7 +84,7 @@ public final class PatternLayout extends AbstractStringLayout {
     private final Serializer eventSerializer;
 
     /**
-     * Constructs a EnhancedPatternLayout using the supplied conversion pattern.
+     * Constructs a PatternLayout using the supplied conversion pattern.
      *
      * @param config The Configuration.
      * @param replace The regular expression to match.

File: log4j-1.2-api/src/main/java/org/apache/log4j/config/Log4j1ConfigurationFactory.java
Patch:
@@ -48,7 +48,6 @@
  * <li>log4j.logger</li>
  * <li>log4j.appender</li>
  * <li>org.apache.log4j.ConsoleAppender</li>
- * <li>org.apache.log4j.PatternLayout</li>
  * <ul>
  * <li>Follow</li>
  * <li>Target</li>

File: log4j-core/src/test/java/org/apache/logging/log4j/core/pattern/MdcPatternConverterTest.java
Patch:
@@ -92,7 +92,7 @@ public void testConverterWithKeys() {
 
     @After
     public void tearDown() {
-        ThreadContext.clearStack();
+        ThreadContext.clearMap();
     }
 }
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/ValidatingPlugin.java
Patch:
@@ -57,7 +57,7 @@ public static class Builder implements org.apache.logging.log4j.core.util.Builde
         @Required(message = "The name given by the builder is null")
         private String name;
 
-        public Builder setName(final String name) {
+        public Builder withName(final String name) {
             this.name = name;
             return this;
         }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicyTest.java
Patch:
@@ -28,9 +28,6 @@
 import org.apache.logging.log4j.core.config.DefaultConfiguration;
 import org.apache.logging.log4j.core.layout.PatternLayout;
 import org.apache.logging.log4j.core.util.datetime.FastDateFormat;
-import org.apache.logging.log4j.junit.CleanFiles;
-import org.apache.logging.log4j.junit.CleanFolders;
-import org.junit.Rule;
 import org.junit.Test;
 
 /**

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/JsonCompleteFileAppenderTest.java
Patch:
@@ -63,10 +63,10 @@ public static Class<?>[] getParameters() {
 
     @Test
     public void testFlushAtEndOfBatch() throws Exception {
-        final Logger log = this.loggerContextRule.getLogger("com.foo.Bar");
+        final Logger logger = this.loggerContextRule.getLogger("com.foo.Bar");
         final String logMsg = "Message flushed with immediate flush=true";
-        log.info(logMsg);
-        log.error(logMsg, new IllegalArgumentException("badarg"));
+        logger.info(logMsg);
+        logger.error(logMsg, new IllegalArgumentException("badarg"));
         this.loggerContextRule.getContext().stop(); // stops async thread
         String line1;
         String line2;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/AbstractDatabaseManager.java
Patch:
@@ -88,7 +88,7 @@ public final synchronized void shutdown() {
             try {
                 this.shutdownInternal();
             } catch (final Exception e) {
-                logWarn("caught exception while performing database shutdown operations", e);
+                logWarn("Caught exception while performing database shutdown operations", e);
             } finally {
                 this.running = false;
             }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/JdbcDatabaseManager.java
Patch:
@@ -144,15 +144,15 @@ protected void commitAndClose() {
             try {
                 Closer.close(this.statement);
             } catch (final Exception e) {
-                logWarn("failed to close SQL statement logging event or flushing buffer", e);
+                logWarn("Failed to close SQL statement logging event or flushing buffer", e);
             } finally {
                 this.statement = null;
             }
 
             try {
                 Closer.close(this.connection);
             } catch (final Exception e) {
-                logWarn("failed to close database connection logging event or flushing buffer", e);
+                logWarn("Failed to close database connection logging event or flushing buffer", e);
             } finally {
                 this.connection = null;
             }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/JpaDatabaseManager.java
Patch:
@@ -125,7 +125,7 @@ protected void commitAndClose() {
                     this.entityManager.close();
                 }
             } catch (final Exception e) {
-                logWarn("failed to close entity manager while logging event or flushing buffer", e);
+                logWarn("Failed to close entity manager while logging event or flushing buffer", e);
             } finally {
                 this.entityManager = null;
             }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/AbstractDatabaseManager.java
Patch:
@@ -64,7 +64,7 @@ public final synchronized void startup() {
                 this.startupInternal();
                 this.running = true;
             } catch (final Exception e) {
-                logError("could not perform database startup operations", e);
+                logError("Could not perform database startup operations", e);
             }
         }
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/SmtpManager.java
Patch:
@@ -171,7 +171,7 @@ public void sendEvents(final Layout<?> layout, final LogEvent appendEvent) {
 
             sendMultipartMessage(message, mp);
         } catch (final MessagingException | IOException | RuntimeException e) {
-            logError("caught exception while sending e-mail notification.", e);
+            logError("Caught exception while sending e-mail notification.", e);
             throw new LoggingException("Error occurred while sending email", e);
         }
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileManager.java
Patch:
@@ -146,7 +146,7 @@ private synchronized void remap() {
             this.byteBuffer = mappedBuffer;
             mappingOffset = offset;
         } catch (final Exception ex) {
-            logError("unable to remap", ex);
+            logError("Unable to remap", ex);
         }
     }
 
@@ -162,15 +162,15 @@ public synchronized void close() {
         try {
             unsafeUnmap(mappedBuffer);
         } catch (final Exception ex) {
-            logError("unable to unmap MappedBuffer", ex);
+            logError("Unable to unmap MappedBuffer", ex);
         }
         try {
             LOGGER.debug("MMapAppender closing. Setting {} length to {} (offset {} + position {})", getFileName(),
                     length, mappingOffset, position);
             randomAccessFile.setLength(length);
             randomAccessFile.close();
         } catch (final IOException ex) {
-            logError("unable to close MemoryMappedFile", ex);
+            logError("Unable to close MemoryMappedFile", ex);
         }
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RandomAccessFileManager.java
Patch:
@@ -100,7 +100,7 @@ public synchronized void close() {
         try {
             randomAccessFile.close();
         } catch (final IOException ex) {
-            logError("unable to close RandomAccessFile", ex);
+            logError("Unable to close RandomAccessFile", ex);
         }
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java
Patch:
@@ -71,7 +71,7 @@ private void writeHeader() {
                 randomAccessFile.write(header, 0, header.length);
             }
         } catch (final IOException e) {
-            logError("unable to write header", e);
+            logError("Unable to write header", e);
         }
     }
 
@@ -129,7 +129,7 @@ public synchronized void close() {
         try {
             randomAccessFile.close();
         } catch (final IOException e) {
-            logError("unable to close RandomAccessFile", e);
+            logError("Unable to close RandomAccessFile", e);
         }
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/DatePatternConverter.java
Patch:
@@ -224,7 +224,7 @@ private static Formatter createNonFixedFormatter(final String[] options) {
             LOGGER.warn("Could not instantiate FastDateFormat with pattern " + pattern, e);
 
             // default to the DEFAULT format
-            return createFixedFormatter(FixedDateFormat.create(FixedFormat.DEFAULT));
+            return createFixedFormatter(FixedDateFormat.create(FixedFormat.DEFAULT, tz));
         }
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ContextDataInjectorFactory.java
Patch:
@@ -33,7 +33,7 @@ public class ContextDataInjectorFactory {
 
     /**
      * Returns a new {@code ContextDataInjector} instance based on the value of system property
-     * {@code log4j.ContextDataInjector}. If not value was specified this method returns a new
+     * {@code log4j2.ContextDataInjector}. If not value was specified this method returns a new
      * {@link ThreadContextDataInjector}.
      * <p>
      * Users may use this system property to specify the fully qualified class name of a class that implements the
@@ -42,7 +42,7 @@ public class ContextDataInjectorFactory {
      * @return a ContextDataInjector that populates the {@code ContextData} of all {@code LogEvent} objects
      */
     public static ContextDataInjector getInjector() {
-        final String className = PropertiesUtil.getProperties().getStringProperty("log4j.ContextDataInjector");
+        final String className = PropertiesUtil.getProperties().getStringProperty("log4j2.ContextDataInjector");
         if (className == null) {
             return new ThreadContextDataInjector();
         }

File: log4j-api/src/test/java/org/apache/logging/log4j/LoggerTest.java
Patch:
@@ -252,7 +252,7 @@ public void getFormatterLogger_Class() {
         assertEquals(String.format(" DEBUG %,d", Integer.MAX_VALUE), testLogger.getEntries().get(0));
     }
 
-    private static void assertMessageFactoryInstanceOf(MessageFactory factory, final Class cls) {
+    private static void assertMessageFactoryInstanceOf(MessageFactory factory, final Class<?> cls) {
         if (factory instanceof MessageFactory2Adapter) {
             factory = ((MessageFactory2Adapter) factory).getOriginal();
         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java
Patch:
@@ -234,7 +234,7 @@ void renderOn(StringBuilder output, TextRenderer textRenderer) {
         final String msg = this.message;
         textRenderer.render(this.name, output, "Name");
         if (msg != null) {
-            textRenderer.render(": ", output, "Text");
+            textRenderer.render(": ", output, "NameMessageSeparator");
             textRenderer.render(msg, output, "Message");
         }
     }
@@ -450,7 +450,7 @@ public String getExtendedStackTraceAsString(final List<String> ignorePackages) {
     public String getExtendedStackTraceAsString(final List<String> ignorePackages, final TextRenderer textRenderer) {
         final StringBuilder sb = new StringBuilder(1024);
         textRenderer.render(name, sb, "Name");
-        textRenderer.render(": ", sb, "Text");
+        textRenderer.render(": ", sb, "NameMessageSeparator");
         textRenderer.render(this.message, sb, "Message");
         textRenderer.render(EOL_STR, sb, "Text");
         final StackTraceElement[] causedTrace = this.throwable != null ? this.throwable.getStackTrace() : null;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/impl/ThrowableFormatOptionsTest.java
Patch:
@@ -135,7 +135,7 @@ private void testFullAnsiEmptyConfig(ThrowableFormatOptions tfo) {
     }
 
     /**
-     * Test {@code %throwable{full}{ansi(ansi(Warning=red))} }
+     * Test {@code %throwable{full}{ansi(Warning=red))} }
      */
     @Test
     public void testFullAnsiWithCustomStyle() {
@@ -150,7 +150,7 @@ public void testFullAnsiWithCustomStyle() {
     }
 
     /**
-     * Test {@code %throwable{full}{ansi(ansi(Warning=red Key=blue Value=cyan))} }
+     * Test {@code %throwable{full}{ansi(Warning=red Key=blue Value=cyan))} }
      */
     @Test
     public void testFullAnsiWithCustomStyles() {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java
Patch:
@@ -374,7 +374,7 @@ public String getCauseStackTraceAsString() {
      * @return The formatted Throwable that caused this Throwable.
      */
     public String getCauseStackTraceAsString(final List<String> packages) {
-        return getCauseStackTraceAsString(null, PlainTextRenderer.getInstance());
+        return getCauseStackTraceAsString(packages, PlainTextRenderer.getInstance());
     }
 
     /**
@@ -450,7 +450,7 @@ public String getExtendedStackTraceAsString(final List<String> ignorePackages) {
     public String getExtendedStackTraceAsString(final List<String> ignorePackages, final TextRenderer textRenderer) {
         final StringBuilder sb = new StringBuilder(1024);
         textRenderer.render(name, sb, "Name");
-        textRenderer.render(": ", sb, "Name");
+        textRenderer.render(": ", sb, "Text");
         textRenderer.render(this.message, sb, "Message");
         textRenderer.render(EOL_STR, sb, "Text");
         final StackTraceElement[] causedTrace = this.throwable != null ? this.throwable.getStackTrace() : null;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java
Patch:
@@ -65,7 +65,7 @@ public void format(final LogEvent event, final StringBuilder toAppendTo) {
                 super.format(event, toAppendTo);
                 return;
             }
-            final String extStackTrace = proxy.getExtendedStackTraceAsString(options.getPackages(), options.getTextRenderer());
+            final String extStackTrace = proxy.getExtendedStackTraceAsString(options.getIgnorePackages(), options.getTextRenderer());
             final int len = toAppendTo.length();
             if (len > 0 && !Character.isWhitespace(toAppendTo.charAt(len - 1))) {
                 toAppendTo.append(' ');

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/JAnsiTextRenderer.java
Patch:
@@ -83,7 +83,7 @@ public final class JAnsiTextRenderer implements TextRenderer {
             Map<String, Code[]> temp = new HashMap<>();
             temp.put("Prefix", new Code[] { Code.WHITE });
             temp.put("Name", new Code[] { Code.RED });
-            temp.put("Message", new Code[] { Code.RED });
+            temp.put("Message", new Code[] { Code.RED, Code.BOLD });
             temp.put("At", new Code[] { Code.WHITE });
             temp.put("CauseLabel", new Code[] { Code.WHITE });
             temp.put("Text", new Code[] { Code.WHITE });

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/RootThrowablePatternConverter.java
Patch:
@@ -65,7 +65,7 @@ public void format(final LogEvent event, final StringBuilder toAppendTo) {
                 super.format(event, toAppendTo);
                 return;
             }
-            final String trace = proxy.getCauseStackTraceAsString(options.getPackages());
+            final String trace = proxy.getCauseStackTraceAsString(options.getIgnorePackages());
             final int len = toAppendTo.length();
             if (len > 0 && !Character.isWhitespace(toAppendTo.charAt(len - 1))) {
                 toAppendTo.append(' ');

File: log4j-core/src/test/java/org/apache/logging/log4j/core/impl/ThrowableFormatOptionsTest.java
Patch:
@@ -41,7 +41,7 @@ private static void test(final String[] options, final int expectedLines, final
         final ThrowableFormatOptions o = ThrowableFormatOptions.newInstance(options);
         assertEquals("getLines", expectedLines, o.getLines());
         assertEquals("getSeparator", expectedSeparator, o.getSeparator());
-        assertEquals("getPackages", expectedPackages, o.getPackages());
+        assertEquals("getPackages", expectedPackages, o.getIgnorePackages());
         assertEquals("allLines", expectedLines == Integer.MAX_VALUE, o.allLines());
         assertEquals("anyLines", expectedLines != 0, o.anyLines());
         assertEquals("minLines", 0, o.minLines(0));

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java
Patch:
@@ -75,6 +75,7 @@ protected RollingFileManager(final String fileName, final String pattern, final
         this.triggeringPolicy = triggeringPolicy;
         this.rolloverStrategy = rolloverStrategy;
         this.patternProcessor = new PatternProcessor(pattern);
+        this.patternProcessor.setPrevFileTime(time);
     }
 
     public void initialize() {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/perftest/ResponseTimeTest.java
Patch:
@@ -156,6 +156,7 @@ public static void main(final String[] args) throws Exception {
         final int COUNT = (1000 * 1000) / threadCount;
         runLatencyTest(logger, TEST_DURATION_MILLIS, COUNT, loadMessagesPerSec, idleStrategy, serviceTmHistograms,
                 responseTmHistograms, threadCount);
+        logger.shutdown();
         final long end = System.currentTimeMillis();
 
         // ... and report the results

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/ConsoleAppenderJAnsiMessageMain.java
Patch:
@@ -43,7 +43,7 @@
  * or, on Windows:
  * 
  * <pre>
- * java -classpath log4j-core\target\test-classes;log4j-core\target\classes;log4j-api\target\classes;%USERPROFILE%\.m2\repository\org\fusesource\jansi\jansi\1.13\jansi-1.13.jar; org.apache.logging.log4j.core.appender.ConsoleAppenderJAnsiMessageMain log4j-core/src/test/resources/log4j-console-msg-styled.xml
+ * java -classpath log4j-core\target\test-classes;log4j-core\target\classes;log4j-api\target\classes;%USERPROFILE%\.m2\repository\org\fusesource\jansi\jansi\1.13\jansi-1.13.jar; org.apache.logging.log4j.core.appender.ConsoleAppenderJAnsiMessageMain log4j-core/src/test/resources/log4j2-console-msg-ansi.xml
  * </pre>
  * 
  */
@@ -63,7 +63,7 @@ public void test() {
 
     public void test(final String[] args) {
         // System.out.println(System.getProperty("java.class.path"));
-        final String config = args == null || args.length == 0 ? "target/test-classes/log4j-console-msg-styled.xml"
+        final String config = args == null || args.length == 0 ? "target/test-classes/log4j2-console-msg-ansi.xml"
                 : args[0];
         final LoggerContext ctx = Configurator.initialize(ConsoleAppenderAnsiMessagesMain.class.getName(), config);
         final Logger logger = LogManager.getLogger(ConsoleAppenderJAnsiMessageMain.class);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java
Patch:
@@ -114,7 +114,7 @@ public boolean equals(final Object obj) {
     }
 
     private Result filter(final Level level, final Map<String, String> contextMap) {
-        final Object value = contextMap.get(key);
+        final String value = contextMap.get(key);
         if (value != null) {
             Level ctxLevel = levelMap.get(value);
             if (ctxLevel == null) {

File: log4j-api/src/main/java/org/apache/logging/log4j/Logger.java
Patch:
@@ -3586,7 +3586,7 @@ void trace(String message, Object p0, Object p1, Object p2, Object p3, Object p4
      * public int doSomething(String foo, int bar) {
      *     Message m = LOGGER.traceEntry("doSomething(foo={}, bar={})", foo, bar);
      *     // do something
-     *     return traceExit(value, m);
+     *     return traceExit(m, value);
      * }
      * </pre>
      *

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java
Patch:
@@ -33,7 +33,7 @@ public class OutputStreamManager extends AbstractManager implements ByteBufferDe
     protected final Layout<?> layout;
     protected ByteBuffer byteBuffer;
     private volatile OutputStream os;
-    private boolean skipFooter = false;
+    private boolean skipFooter;
 
     protected OutputStreamManager(final OutputStream os, final String streamName, final Layout<?> layout,
             final boolean writeHeader) {

File: log4j-api/src/main/java/org/apache/logging/log4j/CloseableThreadContext.java
Patch:
@@ -24,7 +24,7 @@
  * Adds entries to the {@link ThreadContext stack or map} and them removes them when the object is closed, e.g. as part
  * of a try-with-resources. User code can now look like this:
  * <pre>
- * try (CloseableThreadContext.put(key1, value1).put(key2, value2)) {
+ * try (final CloseableThreadContext.Instance ignored = CloseableThreadContext.put(key1, value1).put(key2, value2)) {
  *     callSomeMethodThatLogsALot();
  *
  * // key1 and key2 are automatically removed from the ThreadContext map when done

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicyTest.java
Patch:
@@ -55,7 +55,7 @@ public void testPolicy() throws Exception {
                 .withConfiguration(configuration).build();
         final RolloverStrategy strategy = DefaultRolloverStrategy.createStrategy(null, null, null, "0", null, true,
                 configuration);
-        final OnStartupTriggeringPolicy policy = OnStartupTriggeringPolicy.createPolicy();
+        final OnStartupTriggeringPolicy policy = OnStartupTriggeringPolicy.createPolicy(1);
         final RollingFileManager manager = RollingFileManager.getFileManager(TARGET_FILE, TARGET_PATTERN, true, false,
                 policy, strategy, null, layout, 8192, true);
         manager.initialize();

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingFileAppenderAccessTest.java
Patch:
@@ -28,7 +28,7 @@ public class RollingFileAppenderAccessTest {
 
     /**
      * Not a real test, just make sure we can compile access to the typed manager.
-     * 
+     *
      * @throws IOException
      */
     @Test
@@ -38,7 +38,7 @@ public void testAccessManager() throws IOException {
         final File file = File.createTempFile("RollingFileAppenderAccessTest", ".tmp");
         file.deleteOnExit();
         final RollingFileAppender appender = RollingFileAppender.createAppender(file.getCanonicalPath(), "FilePattern",
-                null, "Name", null, null, null, OnStartupTriggeringPolicy.createPolicy(), null, null, null, null, null,
+                null, "Name", null, null, null, OnStartupTriggeringPolicy.createPolicy(1), null, null, null, null, null,
                 null, config);
         final RollingFileManager manager = appender.getManager();
         // Since the RolloverStrategy and TriggeringPolicy are immutable, we could also use generics to type their

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/AsyncAppenderQueueFullPolicyTest.java
Patch:
@@ -79,6 +79,9 @@ public void testRouter() throws Exception {
         logger.error("event 1 - gets taken off the queue");
         logger.warn("event 2");
         logger.info("event 3");
+        while (asyncAppender.getQueueRemainingCapacity() == 0) {
+            Thread.yield(); // wait until background thread takes one element off the queue
+        }
         logger.info("event 4 - now the queue is full");
         assertEquals("queue remaining capacity", 0, asyncAppender.getQueueRemainingCapacity());
         assertEquals("EventRouter invocations", 0, policy.queueFull.get());

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/ConsoleAppenderJAnsiMessageMain.java
Patch:
@@ -36,10 +36,10 @@
  * mvn -Dtest=org.apache.logging.log4j.core.appender.ConsoleAppenderJAnsiMessageMain test
  * </pre>
  * 
- * or:
+ * or, on Windows:
  * 
  * <pre>
- * java -classpath log4j-core\target\test-classes;log4j-core\target\classes;log4j-api\target\classes;%HOME%\.m2\repository\org\fusesource\jansi\jansi\1.11\jansi-1.11.jar; org.apache.logging.log4j.core.appender.ConsoleAppenderJAnsiMessageMain log4j-core/target/test-classes/log4j2-console-style-ansi.xml
+ * java -classpath log4j-core\target\test-classes;log4j-core\target\classes;log4j-api\target\classes;%HOMEDRIVE%\%HOMEPATH%\.m2\repository\org\fusesource\jansi\jansi\1.11\jansi-1.11.jar; org.apache.logging.log4j.core.appender.ConsoleAppenderJAnsiMessageMain log4j-core/target/test-classes/log4j2-console-style-ansi.xml
  * </pre>
  * 
  */

File: log4j-jmx-gui/src/main/java/org/apache/logging/log4j/jmx/gui/ClientGuiJConsolePlugin.java
Patch:
@@ -22,6 +22,8 @@
 import javax.swing.JPanel;
 import javax.swing.SwingWorker;
 
+import com.sun.tools.jconsole.JConsolePlugin;
+
 /**
  * Adapts the {@code ClientGui} to the {@code JConsolePlugin} API.
  */

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java
Patch:
@@ -1204,10 +1204,9 @@ public void fatal(final String message, final Object p0, final Object p1, final
         logIfEnabled(FQCN, Level.FATAL, null, message, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
     }
 
-    @SuppressWarnings("unchecked")
     @Override
-    public MessageFactory2 getMessageFactory() {
-        return messageFactory;
+    public <MF extends MessageFactory> MF getMessageFactory() {
+        return (MF) messageFactory;
     }
 
     @Override

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/AsyncAppenderQueueFullPolicyTest.java
Patch:
@@ -61,6 +61,7 @@ public void before() throws Exception {
         Field field = AsyncAppender.class.getDeclaredField("asyncQueueFullPolicy");
         field.setAccessible(true);
         field.set(asyncAppender, new CountingAsyncQueueFullPolicy());
+        CountingAsyncQueueFullPolicy.queueFull.set(0L);
     }
 
     @After

File: log4j-core/src/test/java/org/apache/logging/log4j/core/util/ThrowablesTest.java
Patch:
@@ -16,8 +16,6 @@
  */
 package org.apache.logging.log4j.core.util;
 
-import java.lang.reflect.UndeclaredThrowableException;
-
 import org.junit.Test;
 
 public class ThrowablesTest {
@@ -51,7 +49,7 @@ public void testRethrowError() throws Exception {
         Throwables.rethrow(new UnknownError());
     }
 
-    @Test(expected = UndeclaredThrowableException.class)
+    @Test(expected = NoSuchMethodException.class)
     public void testRethrowCheckedException() throws Exception {
         Throwables.rethrow(new NoSuchMethodException());
     }

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableParameterizedMessage.java
Patch:
@@ -121,8 +121,10 @@ private static int count(final String messagePattern, final int[] indices) {
     }
 
     private void initThrowable(final Object[] params, final int argCount, final int usedParams) {
-        if (usedParams < argCount && this.throwable == null && params[argCount - 1] instanceof Throwable) {
+        if (usedParams < argCount && params[argCount - 1] instanceof Throwable) {
             this.throwable = (Throwable) params[argCount - 1];
+        } else {
+            this.throwable = null;
         }
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/XmlLayout.java
Patch:
@@ -268,7 +268,7 @@ public String getContentType() {
      * Creates an XML Layout.
      *
      * @param locationInfo If "true", includes the location information in the generated XML.
-     * @param properties If "true", includes the thread context in the generated XML.
+     * @param properties If "true", includes the thread context map in the generated XML.
      * @param complete If "true", includes the XML header and footer, defaults to "false".
      * @param compact If "true", does not use end-of-lines and indentation, defaults to "false".
      * @param charset The character set to use, if {@code null}, uses "UTF-8".

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/YamlLayout.java
Patch:
@@ -779,7 +779,7 @@ public String getContentType() {
      * @param locationInfo
      *            If "true", includes the location information in the generated YAML.
      * @param properties
-     *            If "true", includes the thread context in the generated YAML.
+     *            If "true", includes the thread context map in the generated YAML.
      * @param headerPattern
      *            The header pattern, defaults to {@code ""} if null.
      * @param footerPattern

File: log4j-core/src/test/java/org/apache/logging/log4j/core/jackson/LevelMixInJsonTest.java
Patch:
@@ -23,7 +23,7 @@ public class LevelMixInJsonTest extends LevelMixInTest {
 
     @Override
     protected ObjectMapper newObjectMapper() {
-        return new Log4jJsonObjectMapper();
+        return new Log4jJsonObjectMapper(false);
     }
 
 }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/jackson/StackTraceElementMixInTest.java
Patch:
@@ -77,7 +77,8 @@ public void testFromJsonWithSimpleModule() throws Exception {
     @Test
     public void testFromJsonWithLog4jModule() throws Exception {
         final ObjectMapper mapper = new ObjectMapper();
-        final SimpleModule module = new Log4jJsonModule();
+        final boolean encodeThreadContextAsList = false;
+        final SimpleModule module = new Log4jJsonModule(encodeThreadContextAsList);
         module.addDeserializer(StackTraceElement.class, new Log4jStackTraceElementDeserializer());
         mapper.registerModule(module);
         final StackTraceElement expected = new StackTraceElement("package.SomeClass", "someMethod", "SomeClass.java", 123);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/perftest/ResponseTimeTest.java
Patch:
@@ -66,7 +66,7 @@
  * <li>DO compare response time / latency spectrum at given loads.</li>
  * <li>DO [repeatedly] sanity check and calibrate the benchmark setup to verify that it produces expected results for
  * known forced scenarios. E.g. forced pauses of known size via ^Z or SIGSTOP/SIGCONT should produce expected response
- * time percentile levels. Attempting to load at >100% than achieved throughput should result in response time / latency
+ * time percentile levels. Attempting to load at &gt;100% than achieved throughput should result in response time / latency
  * measurements that grow with benchmark run length, while service time (if measured) should remain fairly flat well
  * past saturation.</li>
  * <li>DON'T use or report standard deviation for latency. Ever. Except if you mean it as a joke.</li>

File: log4j-core/src/test/java/org/apache/logging/log4j/core/impl/MutableLogEventTest.java
Patch:
@@ -98,7 +98,7 @@ public void testClear() {
         assertNull("context stack", mutable.getContextStack());
         assertFalse("end of batch", mutable.isEndOfBatch());
         assertFalse("incl loc", mutable.isIncludeLocation());
-        assertNull("level", mutable.getLevel());
+        assertSame("level", Level.OFF, mutable.getLevel());
         assertNull("fqcn", mutable.getLoggerFqcn());
         assertNull("logger", mutable.getLoggerName());
         assertNull("marker", mutable.getMarker());
@@ -151,7 +151,7 @@ public void testClear() {
         mutable.clear();
         assertNull("context map", mutable.getContextMap());
         assertNull("context stack", mutable.getContextStack());
-        assertNull("level", mutable.getLevel());
+        assertSame("level", Level.OFF, mutable.getLevel());
         assertNull("fqcn", mutable.getLoggerFqcn());
         assertNull("logger", mutable.getLoggerName());
         assertNull("marker", mutable.getMarker());

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/perftest/ResponseTimeTest.java
Patch:
@@ -165,6 +165,7 @@ public void run() {
     private static void runLatencyTest(final int samples, final Logger logger, final Histogram serviceTmHist,
             final Histogram responseTmHist, final Pacer pacer) {
 
+        pacer.setInitialStartTime(System.nanoTime());
         for (int i = 0; i < samples; i++) {
             final long expectedStartTimeNanos = pacer.expectedNextOperationNanoTime();
             pacer.acquire(1);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java
Patch:
@@ -84,7 +84,7 @@ public class LoggerConfig extends AbstractFilterable {
             }
         }
         if (LOG_EVENT_FACTORY == null) {
-            LOG_EVENT_FACTORY = false //Constants.ENABLE_THREADLOCALS
+            LOG_EVENT_FACTORY = Constants.ENABLE_THREADLOCALS
                     ? new ReusableLogEventFactory()
                     : new DefaultLogEventFactory();
         }

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableParameterizedMessage.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.logging.log4j.message;
 
 import java.util.Arrays;
+import java.util.Objects;
 
 import org.apache.logging.log4j.util.PerformanceSensitive;
 
@@ -61,10 +62,10 @@ public Object[] swapParameters(final Object[] emptyReplacement) {
         Object[] result;
         if (varargs == null) {
             result = params;
-            params = emptyReplacement;
+            params = Objects.requireNonNull(emptyReplacement);
         } else {
             result = varargs;
-            varargs = emptyReplacement;
+            varargs = Objects.requireNonNull(emptyReplacement);
         }
         return result;
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
Patch:
@@ -397,7 +397,7 @@ public Configuration getConfiguration(final String name, final URI configLocatio
                     if (sources.length > 1) {
                         List<AbstractConfiguration> configs = new ArrayList<>();
                         for (String sourceLocation : sources) {
-                            Configuration config = getConfiguration(sourceLocation);
+                            Configuration config = getConfiguration(sourceLocation.trim());
                             if (config != null && config instanceof AbstractConfiguration) {
                                 configs.add((AbstractConfiguration) config);
                             } else {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/Configurator.java
Patch:
@@ -119,7 +119,7 @@ public static LoggerContext initialize(final String name, final ClassLoader load
             String scheme = null;
             List<URI> uris = new ArrayList<>(parts.length);
             for (String part : parts) {
-                URI uri = NetUtils.toURI(scheme != null ? scheme + ":" + part : part);
+                URI uri = NetUtils.toURI(scheme != null ? scheme + ":" + part.trim() : part.trim());
                 if (scheme == null && uri.getScheme() != null) {
                     scheme = uri.getScheme();
                 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfiguration.java
Patch:
@@ -43,7 +43,7 @@ public Configuration reconfigure() {
             }
             final PropertiesConfigurationFactory factory = new PropertiesConfigurationFactory();
             final PropertiesConfiguration config = factory.getConfiguration(source);
-            return config == null || config.getState() != State.INITIALIZED ? null : config;
+            return config == null || config.getState() != State.INITIALIZING ? null : config;
         } catch (final IOException ex) {
             LOGGER.error("Cannot locate file {}: {}", getConfigurationSource(), ex);
         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/status/StatusConfiguration.java
Patch:
@@ -197,6 +197,7 @@ private boolean configureExistingStatusConsoleListener() {
             if (statusListener instanceof StatusConsoleListener) {
                 final StatusConsoleListener listener = (StatusConsoleListener) statusListener;
                 listener.setLevel(this.status);
+                this.logger.updateListenerLevel(this.status);
                 if (this.verbosity == Verbosity.QUIET) {
                     listener.setFilters(this.verboseClasses);
                 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java
Patch:
@@ -84,7 +84,7 @@ public class LoggerConfig extends AbstractFilterable {
             }
         }
         if (LOG_EVENT_FACTORY == null) {
-            LOG_EVENT_FACTORY = false //Constants.ENABLE_THREADLOCALS
+            LOG_EVENT_FACTORY = Constants.ENABLE_THREADLOCALS
                     ? new ReusableLogEventFactory()
                     : new DefaultLogEventFactory();
         }

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableParameterizedMessage.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.logging.log4j.message;
 
 import java.util.Arrays;
+import java.util.Objects;
 
 import org.apache.logging.log4j.util.PerformanceSensitive;
 
@@ -61,10 +62,10 @@ public Object[] swapParameters(final Object[] emptyReplacement) {
         Object[] result;
         if (varargs == null) {
             result = params;
-            params = emptyReplacement;
+            params = Objects.requireNonNull(emptyReplacement);
         } else {
             result = varargs;
-            varargs = emptyReplacement;
+            varargs = Objects.requireNonNull(emptyReplacement);
         }
         return result;
     }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderSizeTest.java
Patch:
@@ -96,7 +96,7 @@ public void testAppender() throws Exception {
         if (ext == null || DefaultRolloverStrategy.FileExtensions.ZIP == ext
                 || DefaultRolloverStrategy.FileExtensions.XZ == ext
                 || DefaultRolloverStrategy.FileExtensions.PACK200 == ext) {
-            return; // commons compress cannot deflate zip and xy? TODO test decompressing these formats
+            return; // commons compress cannot deflate zip and xz? TODO test decompressing these formats
         }
         for (File file : files) {
             if (file.getName().endsWith(fileExtension)) {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderSizeTest.java
Patch:
@@ -94,7 +94,7 @@ public void testAppender() throws Exception {
 
         DefaultRolloverStrategy.FileExtensions ext = DefaultRolloverStrategy.FileExtensions.lookup(fileExtension);
         if (ext == null || DefaultRolloverStrategy.FileExtensions.ZIP == ext
-                || DefaultRolloverStrategy.FileExtensions.XY == ext
+                || DefaultRolloverStrategy.FileExtensions.XZ == ext
                 || DefaultRolloverStrategy.FileExtensions.PACK200 == ext) {
             return; // commons compress cannot deflate zip and xy? TODO test decompressing these formats
         }

File: log4j-api/src/test/java/org/apache/logging/log4j/AbstractLoggerTest.java
Patch:
@@ -165,7 +165,7 @@ public boolean isEnabled(final Level level, final Marker marker, final Message d
     @Override
     public boolean isEnabled(final Level level, final Marker marker, final CharSequence data, final Throwable t) {
         charSeqCount++;
-        return isEnabled(level, marker, new SimpleMessage(data), t);
+        return isEnabled(level, marker, (Message) new SimpleMessage(data), t);
     }
 
     @Override
@@ -176,7 +176,7 @@ public boolean isEnabled(final Level level, final Marker marker, final Object da
 
     @Override
     public boolean isEnabled(final Level level, final Marker marker, final String data) {
-        return isEnabled(level, marker, new SimpleMessage(data), null);
+        return isEnabled(level, marker, (Message) new SimpleMessage(data), null);
     }
 
     @Override
@@ -255,7 +255,7 @@ public boolean isEnabled(final Level level, final Marker marker, final String me
 
     @Override
     public boolean isEnabled(final Level level, final Marker marker, final String data, final Throwable t) {
-        return isEnabled(level, marker, new SimpleMessage(data), t);
+        return isEnabled(level, marker, (Message) new SimpleMessage(data), t);
     }
 
     @Override

File: log4j-core/src/test/java/org/apache/logging/log4j/core/TimestampMessageTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.logging.log4j.core.util.ClockFactoryTest;
 import org.apache.logging.log4j.core.util.Constants;
 import org.apache.logging.log4j.junit.LoggerContextRule;
+import org.apache.logging.log4j.message.Message;
 import org.apache.logging.log4j.message.SimpleMessage;
 import org.apache.logging.log4j.message.TimestampMessage;
 import org.apache.logging.log4j.test.appender.ListAppender;
@@ -67,7 +68,7 @@ public static void afterClass() throws IllegalAccessException {
     @Test
     public void testTimestampMessage() {
         final Logger log = context.getLogger("TimestampMessageTest");
-        log.info(new TimeMsg("Message with embedded timestamp", 123456789000L));
+        log.info((Message) new TimeMsg("Message with embedded timestamp", 123456789000L));
         final List<String> msgs = app.getMessages();
         assertNotNull(msgs);
         assertEquals(1, msgs.size());

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerTimestampMessageTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.logging.log4j.core.util.ClockFactory;
 import org.apache.logging.log4j.core.util.ClockFactoryTest;
 import org.apache.logging.log4j.core.util.Constants;
+import org.apache.logging.log4j.message.Message;
 import org.apache.logging.log4j.message.SimpleMessage;
 import org.apache.logging.log4j.message.TimestampMessage;
 import org.apache.logging.log4j.util.Strings;
@@ -69,7 +70,7 @@ public void testAsyncLogWritesToLog() throws Exception {
         file.delete();
         final Logger log = LogManager.getLogger("com.foo.Bar");
         assertFalse(PoisonClock.called);
-        log.info(new TimeMsg("Async logger msg with embedded timestamp", 123456789000L));
+        log.info((Message) new TimeMsg("Async logger msg with embedded timestamp", 123456789000L));
         assertTrue(PoisonClock.called);
         CoreLoggerContexts.stopLoggerContext(false, file); // stop async thread
 

File: log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/SimpleBenchmark.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.DefaultConfiguration;
+import org.apache.logging.log4j.message.Message;
 import org.apache.logging.log4j.message.SimpleMessage;
 import org.openjdk.jmh.annotations.Benchmark;
 import org.openjdk.jmh.annotations.BenchmarkMode;
@@ -92,7 +93,7 @@ public void testDebugDisabledThroughput(final Blackhole bh) {
     @OutputTimeUnit(TimeUnit.SECONDS)
     @Benchmark
     public void testDebugMessageDisabledThroughput(final Blackhole bh) {
-        logger.debug(new SimpleMessage(msg));
+        logger.debug((Message) new SimpleMessage(msg));
     }
 
     @BenchmarkMode(Mode.SampleTime)
@@ -126,6 +127,6 @@ public void testDebugDisabledResponseTime(final Blackhole bh) {
     @OutputTimeUnit(TimeUnit.NANOSECONDS)
     @Benchmark
     public void testDebugDisabledMessageResponseTime(final Blackhole bh) {
-        logger.debug(new SimpleMessage(msg));
+        logger.debug((Message) new SimpleMessage(msg));
     }
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/MutableLogEvent.java
Patch:
@@ -190,7 +190,6 @@ public void setNanoTime(long nanoTime) {
      * @return a LogEventProxy.
      */
     protected Object writeReplace() {
-        getThrownProxy(); // ensure ThrowableProxy is initialized
         return new Log4jLogEvent.LogEventProxy(this, this.includeLocation);
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JsonLayout.java
Patch:
@@ -895,7 +895,7 @@ public String getContentType() {
      * @return A JSON Layout.
      */
     @PluginFactory
-    public static AbstractJacksonLayout createLayout(
+    public static JsonLayout createLayout(
             // @formatter:off
             @PluginConfiguration final Configuration config,
             @PluginAttribute(value = "locationInfo", defaultBoolean = false) final boolean locationInfo,
@@ -916,7 +916,7 @@ public static AbstractJacksonLayout createLayout(
      *
      * @return A JSON Layout.
      */
-    public static AbstractJacksonLayout createDefaultLayout() {
+    public static JsonLayout createDefaultLayout() {
         return new JsonLayout(new DefaultConfiguration(), false, false, false, false, false, DEFAULT_HEADER, DEFAULT_FOOTER, StandardCharsets.UTF_8);
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java
Patch:
@@ -50,8 +50,8 @@ static WaitStrategy createWaitStrategy(final String propertyName) {
         final String key = propertyName.startsWith("AsyncLogger.")
                 ? "AsyncLogger.Timeout"
                 : "AsyncLoggerConfig.Timeout";
-        final long timeout = DisruptorUtil.getTimeout(key, 10L);
-        return createWaitStrategy(propertyName, timeout);
+        final long timeoutMillis = DisruptorUtil.getTimeout(key, 10L);
+        return createWaitStrategy(propertyName, timeoutMillis);
     }
 
     static WaitStrategy createWaitStrategy(final String propertyName, final long timeoutMillis) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/Constants.java
Patch:
@@ -103,8 +103,9 @@ public final class Constants {
      * @since 2.6
      */
     public static final boolean ENABLE_DIRECT_ENCODERS = PropertiesUtil.getProperties().getBooleanProperty(
-            "log4j2.enable.direct.encoders",
-            AsyncLoggerContextSelector.class.getName().equals(PropertiesUtil.getProperties().getStringProperty(LOG4J_CONTEXT_SELECTOR)));
+            "log4j2.enable.direct.encoders", true); // enable GC-free text encoding by default
+            // the alternative is to enable GC-free encoding only by default only when using all-async loggers:
+            //AsyncLoggerContextSelector.class.getName().equals(PropertiesUtil.getProperties().getStringProperty(LOG4J_CONTEXT_SELECTOR)));
 
     /**
      * Prevent class instantiation.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java
Patch:
@@ -172,6 +172,7 @@ protected void write(final byte[] bytes, final int offset, final int length) {
     protected synchronized void write(final byte[] bytes, final int offset, final int length, boolean immediateFlush) {
         if (immediateFlush && byteBuffer.position() == 0) {
             writeToDestination(bytes, offset, length);
+            flushDestination();
             return;
         }
         if (length >= byteBuffer.capacity()) {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/GcFreeLoggingTest.java
Patch:
@@ -40,6 +40,9 @@ public class GcFreeLoggingTest {
 
     @Test
     public void testNoAllocationDuringSteadyStateLogging() throws Throwable {
+        if (!Constants.ENABLE_THREADLOCALS || !Constants.ENABLE_DIRECT_ENCODERS) {
+            return;
+        }
         final String javaHome = System.getProperty("java.home");
         final String javaBin = javaHome + File.separator + "bin" + File.separator + "java";
         final String classpath = System.getProperty("java.class.path");

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterFormatter.java
Patch:
@@ -113,6 +113,7 @@ static int countArgumentPlaceholders2(final String messagePattern, final int[] i
             if (curChar == ESCAPE_CHAR) {
                 isEscaped = !isEscaped;
                 indices[0] = -1; // escaping means fast path is not available...
+                result++;
             } else if (curChar == DELIM_START) {
                 if (!isEscaped && messagePattern.charAt(i + 1) == DELIM_STOP) {
                     indices[result] = i;

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterizedMessage.java
Patch:
@@ -135,7 +135,7 @@ public ParameterizedMessage(final String messagePattern, final Object arg0, fina
 
     private void init(String messagePattern) {
         this.messagePattern = messagePattern;
-        this.indices = new int[messagePattern == null ? 0 : messagePattern.length() << 1];
+        this.indices = new int[messagePattern == null ? 0 : messagePattern.length() >> 1]; // divide by 2
         int usedCount = ParameterFormatter.countArgumentPlaceholders2(messagePattern, indices);
         initThrowable(argArray, usedCount);
         this.usedCount = Math.min(usedCount, (argArray == null) ? 0 : argArray.length);

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableParameterizedMessage.java
Patch:
@@ -238,7 +238,8 @@ public String getFormattedMessage() {
     private StringBuilder getBuffer() {
         StringBuilder result = buffer.get();
         if (result == null) {
-            result = new StringBuilder(Math.min(512, messagePattern.length() * 2));
+            final int currentPatternLength = messagePattern == null ? 0 : messagePattern.length();
+            result = new StringBuilder(Math.min(512, currentPatternLength * 2));
             buffer.set(result);
         }
         result.setLength(0);

File: log4j-api/src/test/java/org/apache/logging/log4j/AbstractLoggerTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.logging.log4j.message.ParameterizedMessageFactory;
 import org.apache.logging.log4j.message.SimpleMessage;
 import org.apache.logging.log4j.spi.AbstractLogger;
+import org.apache.logging.log4j.spi.MessageFactory2Adapter;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -45,7 +46,7 @@ public void before() throws Exception {
         modifierField.setAccessible(true);
         modifierField.setInt(field, field.getModifiers() &~ Modifier.FINAL); // make non-private
 
-        field.set(this, ParameterizedMessageFactory.INSTANCE);
+        field.set(this, new MessageFactory2Adapter(ParameterizedMessageFactory.INSTANCE));
     }
 
     private static class LogEvent {

File: log4j-api/src/main/java/org/apache/logging/log4j/util/ReflectionUtil.java
Patch:
@@ -80,7 +80,7 @@ public final class ReflectionUtil {
                     java7u25CompensationOffset = 1;
                 }
             }
-        } catch (final Exception e) {
+        } catch (final Throwable e) {
             LOGGER.info("sun.reflect.Reflection.getCallerClass is not supported. "
                     + "ReflectionUtil.getCallerClass will be much slower due to this.", e);
             getCallerClass = null;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/GcFreeLoggingTest.java
Patch:
@@ -68,7 +68,7 @@ public void testNoAllocationDuringSteadyStateLogging() throws Throwable {
     public static void main(String[] args) throws Exception {
         System.setProperty("log4j2.enable.threadlocals", "true");
         System.setProperty("log4j2.is.webapp", "false");
-        System.setProperty("log4j.configurationFile", "perf3PlainNoLoc.xml");
+        System.setProperty("log4j.configurationFile", "gcFreeLogging.xml");
         System.setProperty("Log4jContextSelector", AsyncLoggerContextSelector.class.getName());
 
         assertTrue("Constants.ENABLE_THREADLOCALS", Constants.ENABLE_THREADLOCALS);
@@ -114,8 +114,8 @@ public void sampleAllocation(int count, String desc, Object newObj, long size) {
             logger.error("Test parameterized message {}{}", "param", "param2");
             logger.error("Test parameterized message {}{}{}", "param", "param2", "abc");
         }
-        AllocationRecorder.removeSampler(sampler);
         Thread.sleep(50);
+        AllocationRecorder.removeSampler(sampler);
     }
 
     private static File agentJar() {
@@ -125,7 +125,7 @@ private static File agentJar() {
             throw new IllegalStateException("Could not find url for " + name);
         }
         final String temp = url.toString();
-        final String path = temp.substring("jar:file:/".length(), temp.indexOf('!'));
+        final String path = temp.substring("jar:file:".length(), temp.indexOf('!'));
         return new File(path);
     }
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java
Patch:
@@ -163,7 +163,7 @@ private void setMessage(final Message msg) {
             ((ReusableMessage) msg).formatTo(getMessageTextForWriting());
         } else {
             // if the Message instance is reused, there is no point in freezing its message here
-            if (!Constants.FORMAT_MESSAGES_IN_BACKGROUND) { // LOG4J2-898: user may choose
+            if (!Constants.FORMAT_MESSAGES_IN_BACKGROUND && msg != null) { // LOG4J2-898: user may choose
                 msg.getFormattedMessage(); // LOG4J2-763: ask message to freeze parameters
             }
             this.message = msg;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java
Patch:
@@ -71,11 +71,12 @@ public RingBufferLogEvent newInstance() {
 
     private static class StringBuilderWrapperMessage implements ReusableMessage {
         static final StringBuilderWrapperMessage INSTANCE = new StringBuilderWrapperMessage();
+        private static final Object[] PARAMS = new Object[0];
         private StringBuilder stringBuilder;
 
         @Override
         public String getFormattedMessage() {
-            return null;
+            return stringBuilder.toString();
         }
 
         @Override
@@ -85,7 +86,7 @@ public String getFormat() {
 
         @Override
         public Object[] getParameters() {
-            return new Object[0];
+            return PARAMS;
         }
 
         @Override

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/EventRoute.java
Patch:
@@ -36,7 +36,6 @@ public enum EventRoute {
         @Override
         public void logMessage(final AsyncLogger asyncLogger, final String fqcn, final Level level,
                 final Marker marker, final Message message, final Throwable thrown) {
-            asyncLogger.logMessageInBackgroundThread(fqcn, level, marker, message, thrown);
         }
 
         @Override
@@ -56,7 +55,6 @@ public void logMessage(final AsyncAppender asyncAppender, final Log4jLogEvent lo
         @Override
         public void logMessage(final AsyncLogger asyncLogger, final String fqcn, final Level level,
                 final Marker marker, final Message message, final Throwable thrown) {
-            asyncLogger.logMessageInCurrentThread(fqcn, level, marker, message, thrown);
         }
 
         @Override

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/EventRoute.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Enumeration over the different destinations where a log event can be sent.
  *
- * @since 2.5.1
+ * @since 2.6
  */
 public enum EventRoute {
     /**

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.logging.log4j.message.Message;
 import org.apache.logging.log4j.message.MessageFactory;
 import org.apache.logging.log4j.message.ParameterizedMessageFactory;
-import org.apache.logging.log4j.message.ReusableParameterizedMessageFactory;
+import org.apache.logging.log4j.message.ReusableMessageFactory;
 import org.apache.logging.log4j.message.StringFormattedMessage;
 import org.apache.logging.log4j.status.StatusLogger;
 import org.apache.logging.log4j.util.LambdaUtil;
@@ -76,7 +76,7 @@ public abstract class AbstractLogger implements ExtendedLogger, Serializable {
      * The default MessageFactory class.
      */
     public static final Class<? extends MessageFactory> DEFAULT_MESSAGE_FACTORY_CLASS =
-            createClassForProperty("log4j2.messageFactory", ReusableParameterizedMessageFactory.class,
+            createClassForProperty("log4j2.messageFactory", ReusableMessageFactory.class,
                     ParameterizedMessageFactory.class);
 
     /**
@@ -181,7 +181,7 @@ protected Message catchingMsg(final Throwable t) {
     }
 
     private static Class<? extends MessageFactory> createClassForProperty(final String property,
-            final Class<ReusableParameterizedMessageFactory> reusableParameterizedMessageFactoryClass,
+            final Class<ReusableMessageFactory> reusableParameterizedMessageFactoryClass,
             final Class<ParameterizedMessageFactory> parameterizedMessageFactoryClass) {
         try {
             final boolean IS_WEB_APP = PropertiesUtil.getProperties().getBooleanProperty(

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java
Patch:
@@ -144,7 +144,7 @@ public XmlConfiguration(final ConfigurationSource configSource) {
             }
             statusConfig.initialize();
         } catch (final SAXException | IOException | ParserConfigurationException e) {
-            LOGGER.error("Error parsing {}", configSource.getLocation(), e);
+            LOGGER.error("Error parsing " + configSource.getLocation(), e);
         }
         if (strict && schemaResource != null && buffer != null) {
             InputStream is = null;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java
Patch:
@@ -177,6 +177,7 @@ public AsyncLoggerConfigDelegate getAsyncLoggerConfigDelegate() {
     @Override
     public void initialize() {
         LOGGER.debug("Initializing configuration {}", this);
+        subst.setConfiguration(this);
         scriptManager = new ScriptManager(watchManager);
         pluginManager.collectPlugins(pluginPackages);
         final PluginManager levelPlugins = new PluginManager(Level.CATEGORY);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/StringEncoder.java
Patch:
@@ -57,7 +57,7 @@ public static byte[] toBytes(final String str, final Charset charset) {
      *
      * @param s the string to encode
      * @return the encoded String
-     * @see https://issues.apache.org/jira/browse/LOG4J2-1151
+     * @see <a href="https://issues.apache.org/jira/browse/LOG4J2-1151">LOG4J2-1151</a>
      */
     public static byte[] encodeSingleByteChars(String s) {
         final int length = s.length();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/JmsManager.java
Patch:
@@ -81,7 +81,7 @@ public static JmsManager getJmsManager(final String name, final JndiManager jndi
                                            final String username, final String password) {
         final JmsConfiguration configuration = new JmsConfiguration(jndiManager, connectionFactoryName, destinationName,
             username, password);
-        return FACTORY.createManager(name, configuration);
+        return getManager(name, FACTORY, configuration);
     }
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/Layout.java
Patch:
@@ -47,7 +47,8 @@
 public interface Layout<T extends Serializable> extends Encoder<LogEvent> {
 
     /**
-     * Main plugin element type for Layout plugins.
+     * Main {@linkplain org.apache.logging.log4j.core.config.plugins.Plugin#elementType() plugin element type} for
+     * Layout plugins.
      *
      * @since 2.1
      */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/CustomConfigurationTest.java
Patch:
@@ -87,7 +87,7 @@ public void testConfig() {
         final AppenderRef ref = AppenderRef.createAppenderRef("File", null, null);
         final AppenderRef[] refs = new AppenderRef[] {ref};
 
-        final LoggerConfig loggerConfig = LoggerConfig.createLogger("false", Level.INFO, "org.apache.logging.log4j",
+        final LoggerConfig loggerConfig = LoggerConfig.createLogger(false, Level.INFO, "org.apache.logging.log4j",
             "true", refs, null, config, null );
         loggerConfig.addAppender(appender, null, null);
         config.addLogger("org.apache.logging.log4j", loggerConfig);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java
Patch:
@@ -208,7 +208,7 @@ public RollingRandomAccessFileManager createManager(final String name, final Fac
                         data.append, data.immediateFlush, data.bufferSize, size, time, data.policy, data.strategy,
                         data.advertiseURI, data.layout, writeHeader);
             } catch (final IOException ex) {
-                LOGGER.error("Cannot access RandomAccessFile {}) " + ex);
+                LOGGER.error("Cannot access RandomAccessFile " + ex, ex);
                 if (raf != null) {
                     try {
                         raf.close();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/Activator.java
Patch:
@@ -39,15 +39,15 @@ public final class Activator implements BundleActivator, SynchronousBundleListen
 
     private static final Logger LOGGER = StatusLogger.getLogger();
 
-    private final AtomicReference<BundleContext> context = new AtomicReference<>();
+    private final AtomicReference<BundleContext> contextRef = new AtomicReference<>();
 
     @Override
     public void start(final BundleContext context) throws Exception {
         // allow the user to override the default ContextSelector (e.g., by using BasicContextSelector for a global cfg)
         if (PropertiesUtil.getProperties().getStringProperty(Constants.LOG4J_CONTEXT_SELECTOR) == null) {
             System.setProperty(Constants.LOG4J_CONTEXT_SELECTOR, BundleContextSelector.class.getName());
         }
-        if (this.context.compareAndSet(null, context)) {
+        if (this.contextRef.compareAndSet(null, context)) {
             context.addBundleListener(this);
             // done after the BundleListener as to not miss any new bundle installs in the interim
             scanInstalledBundlesForPlugins(context);
@@ -79,7 +79,7 @@ private static void stopBundlePlugins(final Bundle bundle) {
 
     @Override
     public void stop(final BundleContext context) throws Exception {
-        this.context.compareAndSet(context, null);
+        this.contextRef.compareAndSet(context, null);
         LogManager.shutdown();
     }
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/lookup/MapLookupTest.java
Patch:
@@ -79,7 +79,7 @@ public void testEventMapMessage() {
                 .build();
       final MapLookup lookup = new MapLookup(map);
       assertEquals("B", lookup.lookup(event, "A"));
-      assertEquals("B1", lookup.lookup(event, "A"));
+      assertEquals("B1", lookup.lookup(event, "A1"));
     }
 
     @Test

File: log4j-core/src/test/java/org/apache/logging/log4j/core/lookup/MapLookupTest.java
Patch:
@@ -79,7 +79,7 @@ public void testEventMapMessage() {
                 .build();
       final MapLookup lookup = new MapLookup(map);
       assertEquals("B", lookup.lookup(event, "A"));
-      assertEquals("B1", lookup.lookup(event, "A"));
+      assertEquals("B1", lookup.lookup(event, "A1"));
     }
 
     @Test

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/Node.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.logging.log4j.core.config;
 
-import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -27,7 +26,7 @@
 /**
  * A Configuration node.
  */
-public class Node implements Serializable {
+public class Node {
 
     /**
      * Main plugin category for plugins which are represented as a configuration node. Such plugins tend to be
@@ -36,7 +35,6 @@ public class Node implements Serializable {
      * @since 2.1
      */
     public static final String CATEGORY = "Core";
-    private static final long serialVersionUID = 1L;
 
     private final Node parent;
     private final String name;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/Node.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.log4j.core.config;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -26,7 +27,7 @@
 /**
  * A Configuration node.
  */
-public class Node {
+public class Node implements Serializable {
 
     /**
      * Main plugin category for plugins which are represented as a configuration node. Such plugins tend to be
@@ -35,6 +36,7 @@ public class Node {
      * @since 2.1
      */
     public static final String CATEGORY = "Core";
+    private static final long serialVersionUID = 1L;
 
     private final Node parent;
     private final String name;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/perftest/PerfTest.java
Patch:
@@ -124,7 +124,7 @@ public void runTestAndPrintResult(final IPerfTestRunner runner, final String nam
         Thread.sleep(7000);
 
         println("Starting the main test...");
-        runSingleThreadedTest(runner, LINES * iterations, name, resultFile);
+        runSingleThreadedTest(runner, LINES, name, resultFile);
         Thread.sleep(1000);
     }
 
@@ -136,7 +136,7 @@ private void forceRemap(final int linesPerIteration, final int iterations, final
         final int bytesPerLine = 0 + IPerfTestRunner.THROUGHPUT_MSG.getBytes().length;
         final int bytesWritten = bytesPerLine * linesPerIteration * iterations;
         final int threshold = 1073741824; // magic number: defined in perf9MMapLocation.xml
-        
+
         int todo = threshold - bytesWritten;
         if (todo <= 0) {
             return;

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableParameterizedMessageFactory.java
Patch:
@@ -57,9 +57,8 @@ public Message newMessage(final String message, final Object... params) {
         if (result == null) {
             result = new ReusableParameterizedMessage();
             threadLocalMessage.set(result);
-        } else {
-            result.set(message, params);
         }
+        result.set(message, params);
         return result;
     }
 }

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterizedMessage.java
Patch:
@@ -309,6 +309,7 @@ public static String identityToString(final Object obj) {
 
     @Override
     public String toString() {
-        return getFormattedMessage();
+        return "ParameterizedMessage[messagePattern=" + messagePattern + ", stringArgs=" +
+                Arrays.toString(argArray) + ", throwable=" + throwable + ']';
     }
 }

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableParameterizedMessage.java
Patch:
@@ -264,8 +264,10 @@ public void formatTo(final StringBuilder buffer) {
         ParameterFormatter.formatMessage(buffer, state.messagePattern, state.getParams(), state.argCount);
     }
 
+
     @Override
     public String toString() {
-        return getFormattedMessage();
+        return "ReusableParameterizedMessage[messagePattern=" + getFormat() + ", stringArgs=" +
+                Arrays.toString(getParameters()) + ", throwable=" + getThrowable() + ']';
     }
 }

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterizedMessage.java
Patch:
@@ -206,7 +206,8 @@ public void formatTo(final StringBuilder buffer) {
         if (formattedMessage != null) {
             buffer.append(formattedMessage);
         } else {
-            ParameterFormatter.formatMessage(buffer, messagePattern, argArray, argArray.length);
+            ParameterFormatter.formatMessage(buffer, messagePattern, argArray,
+                    argArray == null ? 0 : argArray.length);
         }
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java
Patch:
@@ -96,8 +96,8 @@ public void formatTo(final StringBuilder buffer) {
             buffer.append(stringBuilder);
 
             // ensure that excessively long char[] arrays are not kept in memory forever
-            if (stringBuilder.length() > 512) {
-                stringBuilder.setLength(512);
+            if (stringBuilder.length() > 518) { // resized twice from 128 (s=s*2+2)
+                stringBuilder.setLength(518);
                 stringBuilder.trimToSize();
             }
         }
@@ -141,6 +141,7 @@ public void setValues(final AsyncLogger anAsyncLogger, final String aLoggerName,
                 // only happens if user logs a custom reused message when Constants.ENABLE_THREADLOCALS is false
                 messageText = new StringBuilder(128);
             }
+            messageText.setLength(0);
             ((ReusableMessage) msg).formatTo(messageText);
         } else {
             this.message = msg;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppenderRolloverTest.java
Patch:
@@ -69,7 +69,8 @@ public void testRollover() throws Exception {
         log.warn(trigger);
 
         CoreLoggerContexts.stopLoggerContext(); // stop async thread
-        
+        CoreLoggerContexts.stopLoggerContext(false); // stop async thread
+
         final int MAX_ATTEMPTS = 50;
         int count = 0;
         while (!after1.exists() && count++ < MAX_ATTEMPTS) {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/routing/PropertiesRoutingAppenderTest.java
Patch:
@@ -58,6 +58,7 @@ public void setUp() throws Exception {
     @After
     public void tearDown() throws Exception {
         this.app.clear();
+        this.init.getContext().stop();
     }
 
     @Test

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/routing/RoutingAppenderTest.java
Patch:
@@ -57,6 +57,7 @@ public void setUp() throws Exception {
     @After
     public void tearDown() throws Exception {
         this.app.clear();
+        this.init.getContext().stop();
     }
 
     @Test

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/routing/RoutingDefaultAppenderTest.java
Patch:
@@ -56,6 +56,7 @@ public void tearDown() throws Exception {
         if (app != null) {
             app.clear();
         }
+        this.init.getContext().stop();
     }
 
     @Test

File: log4j-api/src/main/java/org/apache/logging/log4j/util/StringBuilderFormattable.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * Objects that implement this interface can be converted to text, ideally without allocating temporary objects.
  *
- * @since 2.6s
+ * @since 2.6
  */
 public interface StringBuilderFormattable {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java
Patch:
@@ -41,7 +41,7 @@ public class RollingFileManager extends FileManager {
 
     private static RollingFileManagerFactory factory = new RollingFileManagerFactory();
 
-    private long size;
+    protected long size;
     private long initialTime;
     private final PatternProcessor patternProcessor;
     private final Semaphore semaphore = new Semaphore(1);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java
Patch:
@@ -96,8 +96,6 @@ public void setEndOfBatch(final boolean endOfBatch) {
 
     @Override
     protected synchronized void write(final byte[] bytes, int offset, int length, final boolean immediateFlush) {
-        super.write(bytes, offset, length, immediateFlush); // writes to dummy output stream, needed to track file size
-
         int chunk = 0;
         do {
             if (length > buffer.remaining()) {
@@ -128,6 +126,7 @@ public synchronized void flush() {
         buffer.flip();
         try {
             randomAccessFile.write(buffer.array(), 0, buffer.limit());
+            size += buffer.limit(); // track file size
         } catch (final IOException ex) {
             final String msg = "Error writing to RandomAccessFile " + getName();
             throw new AppenderLoggingException(msg, ex);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java
Patch:
@@ -178,7 +178,7 @@ public String toSerializable(final LogEvent event) {
 
     @Override
     public void encode(final LogEvent event, final ByteBufferDestination destination) {
-        if (!Constants.ENABLE_OBJECT_POOLING || !(eventSerializer instanceof Serializer2)) {
+        if (!Constants.ENABLE_THREADLOCALS || !(eventSerializer instanceof Serializer2)) {
             super.encode(event, destination);
             return;
         }

File: log4j-taglib/src/test/java/org/apache/logging/log4j/taglib/EntryTagTest.java
Patch:
@@ -68,7 +68,7 @@ public void setUp() {
     @Test
     public void testDoEndTag() throws Exception {
         assertEquals("The return value is not correct.", Tag.EVAL_PAGE, this.tag.doEndTag());
-        verify("entry TRACE M-ENTRY[ FLOW ] E");
+        verify("Enter TRACE M-ENTRY[ FLOW ] E");
     }
 
     @Test
@@ -77,7 +77,7 @@ public void testDoEndTagAttributes() throws Exception {
         this.tag.setDynamicAttribute(null, null, 5792);
 
         assertEquals("The return value is not correct.", Tag.EVAL_PAGE, this.tag.doEndTag());
-        verify("entry params(log4j-test1.xml, 5792) TRACE M-ENTRY[ FLOW ] E");
+        verify("Enter params(log4j-test1.xml, 5792) TRACE M-ENTRY[ FLOW ] E");
     }
 
     private void verify(final String expected) {

File: log4j-taglib/src/test/java/org/apache/logging/log4j/taglib/ExitTagTest.java
Patch:
@@ -68,23 +68,23 @@ public void setUp() {
     @Test
     public void testDoEndTag() throws Exception {
         assertEquals("The return value is not correct.", Tag.EVAL_PAGE, this.tag.doEndTag());
-        verify("exit TRACE M-EXIT[ FLOW ] E");
+        verify("Exit TRACE M-EXIT[ FLOW ] E");
     }
 
     @Test
     public void testDoEndTagResult01() throws Exception {
         this.tag.setResult(CONFIG);
 
         assertEquals("The return value is not correct.", Tag.EVAL_PAGE, this.tag.doEndTag());
-        verify("exit with(log4j-test1.xml) TRACE M-EXIT[ FLOW ] E");
+        verify("Exit with(log4j-test1.xml) TRACE M-EXIT[ FLOW ] E");
     }
 
     @Test
     public void testDoEndTagResult02() throws Exception {
         this.tag.setResult(5792);
 
         assertEquals("The return value is not correct.", Tag.EVAL_PAGE, this.tag.doEndTag());
-        verify("exit with(5792) TRACE M-EXIT[ FLOW ] E");
+        verify("Exit with(5792) TRACE M-EXIT[ FLOW ] E");
     }
 
     private void verify(final String expected) {

File: log4j-api/src/main/java/org/apache/logging/log4j/message/DefaultFlowMessageFactory.java
Patch:
@@ -173,7 +173,7 @@ public EntryMessage newEntryMessage(final Message message) {
     /*
      * (non-Javadoc)
      *
-     * @see org.apache.logging.log4j.message.MessageFactory#newExitMessage(org.apache.logging.log4j.message.EntryMessage)
+     * @see org.apache.logging.log4j.message.FlowMessageFactory#newExitMessage(org.apache.logging.log4j.message.EntryMessage)
      */
     @Override
     public ExitMessage newExitMessage(final EntryMessage message) {
@@ -183,7 +183,7 @@ public ExitMessage newExitMessage(final EntryMessage message) {
     /*
      * (non-Javadoc)
      *
-     * @see org.apache.logging.log4j.message.MessageFactory#newExitMessage(java.lang.Object, org.apache.logging.log4j.message.EntryMessage)
+     * @see org.apache.logging.log4j.message.FlowMessageFactory#newExitMessage(java.lang.Object, org.apache.logging.log4j.message.EntryMessage)
      */
     @Override
     public ExitMessage newExitMessage(final Object result, final EntryMessage message) {
@@ -193,7 +193,7 @@ public ExitMessage newExitMessage(final Object result, final EntryMessage messag
     /*
      * (non-Javadoc)
      *
-     * @see org.apache.logging.log4j.message.MessageFactory#newExitMessage(java.lang.Object, org.apache.logging.log4j.message.Message)
+     * @see org.apache.logging.log4j.message.FlowMessageFactory#newExitMessage(java.lang.Object, org.apache.logging.log4j.message.Message)
      */
     @Override
     public ExitMessage newExitMessage(final Object result, final Message message) {

File: log4j-api/src/main/java/org/apache/logging/log4j/message/DefaultFlowMessageFactory.java
Patch:
@@ -173,7 +173,7 @@ public EntryMessage newEntryMessage(final Message message) {
     /*
      * (non-Javadoc)
      *
-     * @see org.apache.logging.log4j.message.MessageFactory#newEntryMessage(org.apache.logging.log4j.message.EntryMessage)
+     * @see org.apache.logging.log4j.message.MessageFactory#newExitMessage(org.apache.logging.log4j.message.EntryMessage)
      */
     @Override
     public ExitMessage newExitMessage(final EntryMessage message) {
@@ -183,7 +183,7 @@ public ExitMessage newExitMessage(final EntryMessage message) {
     /*
      * (non-Javadoc)
      *
-     * @see org.apache.logging.log4j.message.MessageFactory#newEntryMessage(java.lang.Object, org.apache.logging.log4j.message.EntryMessage)
+     * @see org.apache.logging.log4j.message.MessageFactory#newExitMessage(java.lang.Object, org.apache.logging.log4j.message.EntryMessage)
      */
     @Override
     public ExitMessage newExitMessage(final Object object, final EntryMessage message) {
@@ -193,7 +193,7 @@ public ExitMessage newExitMessage(final Object object, final EntryMessage messag
     /*
      * (non-Javadoc)
      *
-     * @see org.apache.logging.log4j.message.MessageFactory#newEntryMessage(java.lang.Object, org.apache.logging.log4j.message.Message)
+     * @see org.apache.logging.log4j.message.MessageFactory#newExitMessage(java.lang.Object, org.apache.logging.log4j.message.Message)
      */
     @Override
     public ExitMessage newExitMessage(final Object object, final Message message) {

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java
Patch:
@@ -181,7 +181,7 @@ private static Class<? extends MessageFactory> createClassForProperty(final Stri
             final Class<ParameterizedMessageFactory> defaultMessageFactoryClass) {
         try {
             final String clsName = System.getProperty(property, defaultMessageFactoryClass.getName());
-            return Class.forName(clsName).asSubclass(ParameterizedMessageFactory.class);
+            return Class.forName(clsName).asSubclass(MessageFactory.class);
         } catch (final Throwable t) {
             return defaultMessageFactoryClass;
         }

File: log4j-api/src/main/java/org/apache/logging/log4j/message/SimpleMessageFactory.java
Patch:
@@ -33,8 +33,7 @@ public final class SimpleMessageFactory extends AbstractMessageFactory {
      * Instance of StringFormatterMessageFactory.
      */
     public static final SimpleMessageFactory INSTANCE = new SimpleMessageFactory();
-
-    private static final long serialVersionUID = 1L;
+    private static final long serialVersionUID = 4418995198790088516L;
 
     /**
      * Creates {@link StringFormattedMessage} instances.

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java
Patch:
@@ -1115,8 +1115,8 @@ protected void logMessage(final String fqcn, final Level level, final Marker mar
 
     protected void logMessage(final String fqcn, final Level level, final Marker marker, final Supplier<?> msgSupplier,
             final Throwable t) {
-        final Object message = LambdaUtil.get(msgSupplier);
-        logMessage(fqcn, level, marker, messageFactory.newMessage(message), t);
+        final Message message = LambdaUtil.getMessage(msgSupplier, messageFactory);
+        logMessage(fqcn, level, marker, message, t);
     }
 
     protected void logMessage(final String fqcn, final Level level, final Marker marker, final String message,

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java
Patch:
@@ -316,7 +316,7 @@ protected EntryMessage enter(final String fqcn, final String format, final Suppl
      *
      * @param fqcn The fully qualified class name of the <b>caller</b>.
      * @param format The format String for the parameters.
-     * @param params The parameters to the method.
+     * @param paramSuppliers The parameters to the method.
      */
     protected EntryMessage enter(final String fqcn, final String format, final MessageSupplier... paramSuppliers) {
         EntryMessage entryMsg = null;

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java
Patch:
@@ -420,6 +420,9 @@ protected EntryMessage entryMsg(final String format, final Supplier<?>... paramS
         final Object[] params = new Object[count];
         for (int i = 0; i < count; i++) {
             params[i] = paramSuppliers[i].get();
+            if (params[i] instanceof Message) {
+                params[i] = ((Message) params[i]).getFormattedMessage();
+            }
         }
         return entryMsg(format, params);
     }

File: log4j-perf/src/main/java/org/apache/logging/log4j/perf/nogc/ClassicLogger.java
Patch:
@@ -23,7 +23,7 @@
 import java.nio.charset.StandardCharsets;
 
 /**
- * Logger with varargs methods, ParameterizedMessage and Pat.
+ * Logger with varargs methods, ParameterizedMessage and PatternLayout("%m").
  */
 public class ClassicLogger extends AbstractLogger {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/SocketAppender.java
Patch:
@@ -182,7 +182,7 @@ public static SocketAppender createAppender(
      * @param config
      *            The Configuration
      * @return A SocketAppender.
-     * @deprecated Use {@link #createAppender(String, String, Protocol, SslConfiguration, int, String, String, String, String, String, Layout, Filter, String, Configuration)}.
+     * @deprecated Use {@link #createAppender(String, int, Protocol, SslConfiguration, int, int, boolean, String, boolean, boolean, Layout, Filter, boolean, Configuration)}.
      */
     @Deprecated
     public static SocketAppender createAppender(

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java
Patch:
@@ -45,7 +45,7 @@ class AsyncLoggerDisruptor {
     private ExecutorService executor;
     private String contextName;
 
-    private boolean useThreadLocalTranslator;
+    private boolean useThreadLocalTranslator = true;
     private long backgroundThreadId;
     private AsyncEventRouter asyncEventRouter;
     private int ringBufferSize;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java
Patch:
@@ -120,7 +120,7 @@ protected void setOutputStream(final OutputStream os) {
     protected void write(final byte[] bytes, final int offset, final int length) {
         write(bytes, offset, length, false);
     }
-    
+
     /**
      * Some output streams synchronize writes while others do not. Synchronizing here insures that
      * log events won't be intertwined.
@@ -155,7 +155,7 @@ protected void write(final byte[] bytes)  {
     /**
      * Some output streams synchronize writes while others do not.
      * @param bytes The serialized Log event.
-     * @param writeAndFlush If true, flushes after writing. 
+     * @param immediateFlush If true, flushes after writing.
      * @throws AppenderLoggingException if an error occurs.
      */
     protected void write(final byte[] bytes, boolean immediateFlush)  {

File: log4j-api/src/test/java/org/apache/logging/log4j/osgi/BundleTestInfo.java
Patch:
@@ -78,7 +78,7 @@ public String getArtifactId() {
      * @return the Maven version String.
      */
     public String getVersion() {
-        return project.getProperties().getProperty("project.version.osgi");
+        return project.getVersion();
     }
 
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/Activator.java
Patch:
@@ -56,7 +56,8 @@ public void start(final BundleContext context) throws Exception {
     private static void scanInstalledBundlesForPlugins(final BundleContext context) {
         final Bundle[] bundles = context.getBundles();
         for (final Bundle bundle : bundles) {
-            if (bundle.getState() == Bundle.ACTIVE) {
+            // LOG4J2-920: don't scan system bundle for plugins
+            if (bundle.getState() == Bundle.ACTIVE && bundle.getBundleId() != 0) {
                 // TODO: bundle state can change during this
                 scanBundleForPlugins(bundle);
             }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java
Patch:
@@ -268,8 +268,8 @@ public String toString() {
                         }
                     });
                 } catch (final IllegalStateException e) {
-                    LOGGER.error(SHUTDOWN_HOOK_MARKER,
-                            "Unable to register shutdown hook because JVM is shutting down.", e);
+                    throw new IllegalStateException(
+                            "Unable to register Log4j shutdown hook because JVM is shutting down.", e);
                 } catch (final SecurityException e) {
                     LOGGER.error(SHUTDOWN_HOOK_MARKER, "Unable to register shutdown hook due to security restrictions",
                             e);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JsonLayout.java
Patch:
@@ -780,8 +780,8 @@
 }
  * </pre>
  * <p>
- * If {@code complete="false"}, the appender does not write the JSON open array character "[" at the start of the
- * document. and "]" and the end.
+ * If {@code complete="false"}, the appender does not write the JSON open array character "[" at the start
+ * of the document, "]" and the end, nor comma "," between records.
  * </p>
  * <p>
  * This approach enforces the independence of the JsonLayout and the appender where you embed it.
@@ -881,7 +881,7 @@ public String getContentType() {
      * @param properties
      *            If "true", includes the thread context in the generated JSON.
      * @param complete
-     *            If "true", includes the JSON header and footer, defaults to "false".
+     *            If "true", includes the JSON header and footer, and comma between records.
      * @param compact
      *            If "true", does not use end-of-lines and indentation, defaults to "false".
      * @param eventEol

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/action/DeletingVisitorTest.java
Patch:
@@ -38,7 +38,7 @@ public class DeletingVisitorTest {
      * later verification.
      */
     static class DeletingVisitorHelper extends DeletingVisitor {
-        List<Path> deleted = new ArrayList<Path>();
+        List<Path> deleted = new ArrayList<>();
 
         public DeletingVisitorHelper(final Path basePath, final List<? extends PathCondition> pathFilters,
                 final boolean testMode) {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/action/ScriptConditionTest.java
Patch:
@@ -61,7 +61,7 @@ public void testSelectFilesToDelete() {
 
         Script script = new Script("test", "javascript", "pathList;"); // script that returns pathList
         ScriptCondition condition = new ScriptCondition(script, config);
-        List<PathWithAttributes> pathList = new ArrayList<PathWithAttributes>();
+        List<PathWithAttributes> pathList = new ArrayList<>();
         Path base = Paths.get("baseDirectory");
         List<PathWithAttributes> result = condition.selectFilesToDelete(base, pathList);
         assertSame(result, pathList);
@@ -72,7 +72,7 @@ public void testSelectFilesToDelete2() {
         Configuration config = new DefaultConfiguration();
         config.initialize(); // creates the ScriptManager
 
-        List<PathWithAttributes> pathList = new ArrayList<PathWithAttributes>();
+        List<PathWithAttributes> pathList = new ArrayList<>();
         pathList.add(new PathWithAttributes(Paths.get("/path/1"), new DummyFileAttributes()));
         pathList.add(new PathWithAttributes(Paths.get("/path/2"), new DummyFileAttributes()));
         pathList.add(new PathWithAttributes(Paths.get("/path/3"), new DummyFileAttributes()));
@@ -94,7 +94,7 @@ public void testSelectFilesToDelete3() {
         Configuration config = new DefaultConfiguration();
         config.initialize(); // creates the ScriptManager
 
-        List<PathWithAttributes> pathList = new ArrayList<PathWithAttributes>();
+        List<PathWithAttributes> pathList = new ArrayList<>();
         pathList.add(new PathWithAttributes(Paths.get("/path/1/abc/a.txt"), new DummyFileAttributes()));
         pathList.add(new PathWithAttributes(Paths.get("/path/2/abc/bbb.txt"), new DummyFileAttributes()));
         pathList.add(new PathWithAttributes(Paths.get("/path/3/abc/c.txt"), new DummyFileAttributes()));

File: log4j-core/src/test/java/org/apache/logging/log4j/core/impl/Log4jLogEventTest.java
Patch:
@@ -234,7 +234,7 @@ private void verifyNanoTimeWithAllConstructors(long expected) {
     
     @Test
     public void testBuilderCorrectlyCopiesAllEventAttributes() {
-        final Map<String, String> contextMap = new HashMap<String, String>();
+        final Map<String, String> contextMap = new HashMap<>();
         contextMap.put("A", "B");
         final ContextStack contextStack = ThreadContext.getImmutableStack();
         final Exception exception = new Exception("test");
@@ -283,7 +283,7 @@ public void testBuilderCorrectlyCopiesAllEventAttributes() {
     
     @Test
     public void testEquals() {
-        final Map<String, String> contextMap = new HashMap<String, String>();
+        final Map<String, String> contextMap = new HashMap<>();
         contextMap.put("A", "B");
         ThreadContext.push("first");
         final ContextStack contextStack = ThreadContext.getImmutableStack();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java
Patch:
@@ -144,7 +144,7 @@ private void init() {
      */
     protected List<Rule> parsePattern() {
         final DateFormatSymbols symbols = new DateFormatSymbols(mLocale);
-        final List<Rule> rules = new ArrayList<Rule>();
+        final List<Rule> rules = new ArrayList<>();
 
         final String[] ERAs = symbols.getEras();
         final String[] months = symbols.getMonths();
@@ -1117,7 +1117,7 @@ public void appendTo(final StringBuilder buffer, final int value) {
 
     // -----------------------------------------------------------------------
 
-    private static final ConcurrentMap<TimeZoneDisplayKey, String> cTimeZoneDisplayCache = new ConcurrentHashMap<TimeZoneDisplayKey, String>(
+    private static final ConcurrentMap<TimeZoneDisplayKey, String> cTimeZoneDisplayCache = new ConcurrentHashMap<>(
             7);
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java
Patch:
@@ -40,9 +40,9 @@ abstract class FormatCache<F extends Format> {
     static final int NONE = -1;
 
     private static final ConcurrentMap<MultipartKey, String> DATETIME_INSTANCE_CACHE =
-            new ConcurrentHashMap<MultipartKey, String>(7);
+            new ConcurrentHashMap<>(7);
 
-    private final ConcurrentMap<MultipartKey, F> cInstanceCache = new ConcurrentHashMap<MultipartKey, F>(7);
+    private final ConcurrentMap<MultipartKey, F> cInstanceCache = new ConcurrentHashMap<>(7);
 
     /**
      * <p>

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java
Patch:
@@ -32,7 +32,6 @@
 import org.apache.logging.log4j.core.util.ClockFactory;
 import org.apache.logging.log4j.core.util.Constants;
 import org.apache.logging.log4j.core.util.NanoClock;
-import org.apache.logging.log4j.core.util.NanoClockFactory;
 import org.apache.logging.log4j.message.Message;
 import org.apache.logging.log4j.message.MessageFactory;
 import org.apache.logging.log4j.message.TimestampMessage;
@@ -89,7 +88,7 @@ public AsyncLogger(final LoggerContext context, final String name, final Message
             final AsyncLoggerDisruptor loggerDisruptor) {
         super(context, name, messageFactory);
         this.loggerDisruptor = loggerDisruptor;
-        nanoClock = NanoClockFactory.createNanoClock(); // based on initial configuration
+        nanoClock = context.getConfiguration().getNanoClock();
     }
 
     /*
@@ -100,7 +99,7 @@ public AsyncLogger(final LoggerContext context, final String name, final Message
     @Override
     protected void updateConfiguration(Configuration newConfig) {
         super.updateConfiguration(newConfig);
-        nanoClock = NanoClockFactory.createNanoClock();
+        nanoClock = newConfig.getNanoClock();
         LOGGER.trace("[{}] AsyncLogger {} uses {}.", getContext().getName(), getName(), nanoClock);
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/SmtpManager.java
Patch:
@@ -288,7 +288,7 @@ private synchronized void connect() {
                 .setRecipients(Message.RecipientType.TO, data.to).setRecipients(Message.RecipientType.CC, data.cc)
                 .setRecipients(Message.RecipientType.BCC, data.bcc).setSubject(data.subject).getMimeMessage();
         } catch (final MessagingException e) {
-            logError("could not set SmtpAppender message options", e);
+            logError("Could not set SmtpAppender message options", e);
             message = null;
         }
     }

File: log4j-core/src/test/java/org/apache/logging/log4j/junit/CleanFiles.java
Patch:
@@ -52,7 +52,7 @@ private void clean() {
                     file.deleteOnExit();
                 }
                 assertTrue(
-                        "Could not delete " + file.toString() + ", last modifed "
+                        "Could not delete " + file.toString() + ", last modified "
                                 + DateFormat.getInstance().format(new Date(file.lastModified())), deleted);
             }
         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java
Patch:
@@ -289,7 +289,7 @@ public byte[] getHeader() {
 
     /**
      * Returns the appropriate HTML footers.
-     * @return the footer as a byet array.
+     * @return the footer as a byte array.
      */
     @Override
     public byte[] getFooter() {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/PatternProcessorTest.java
Patch:
@@ -33,8 +33,7 @@
 public class PatternProcessorTest {
 
     private String format(final long time) {
-        final String actualStr = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss.SSS").format(new Date(time));
-        return actualStr;
+        return new SimpleDateFormat("yyyy/MM/dd HH:mm:ss.SSS").format(new Date(time));
     }
 
     @Test

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JsonLayout.java
Patch:
@@ -790,7 +790,7 @@
  * </p>
  * <h3>Pretty vs. compact XML</h3>
  * <p>
- * By default, the JSON layout is not compact (a.k.a. not "pretty") with {@code compact="false"}, which means the
+ * By default, the JSON layout is not compact (a.k.a. "pretty") with {@code compact="false"}, which means the
  * appender uses end-of-line characters and indents lines to format the text. If {@code compact="true"}, then no
  * end-of-line or indentation is used. Message content may contain, of course, escaped end-of-lines.
  * </p>

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java
Patch:
@@ -53,7 +53,7 @@ public class Provider {
 
     public Provider(final Properties props, final URL url, final ClassLoader classLoader) {
         this.url = url;
-        this.classLoader = new WeakReference<ClassLoader>(classLoader);
+        this.classLoader = new WeakReference<>(classLoader);
         final String weight = props.getProperty(FACTORY_PRIORITY);
         priority = weight == null ? DEFAULT_PRIORITY : Integer.valueOf(weight);
         className = props.getProperty(LOGGER_CONTEXT_FACTORY);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/SocketAppenderTest.java
Patch:
@@ -71,7 +71,7 @@ public class SocketAppenderTest {
 
     @BeforeClass
     public static void setupClass() throws Exception {
-        tcpServer = new TCPSocketServer(AvailablePortFinder.getNextAvailable());
+        tcpServer = new TCPSocketServer(PORT);
         tcpServer.start();
         udpServer = new UDPSocketServer();
         udpServer.start();
@@ -175,7 +175,7 @@ public void testTcpAppenderDeadlock() throws Exception {
         root.setAdditive(false);
         root.setLevel(Level.DEBUG);
 
-        new TCPSocketServer(AvailablePortFinder.getNextAvailable()).start();
+        new TCPSocketServer(DYN_PORT).start();
 
         root.debug("This message is written because a deadlock never.");
 
@@ -209,7 +209,7 @@ public static class UDPSocketServer extends Thread {
         private Thread thread;
 
         public UDPSocketServer() throws IOException {
-            this.sock = new DatagramSocket(AvailablePortFinder.getNextAvailable());
+            this.sock = new DatagramSocket(PORT);
         }
 
         public void shutdown() {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/SslXmlSocketServerTest.java
Patch:
@@ -51,8 +51,8 @@ private static void initServerSocketFactory() throws StoreConfigurationException
     @Override
     protected SocketAppender createSocketAppender(final Filter socketFilter,
             final Layout<? extends Serializable> socketLayout) {
-        return SocketAppender.createAppender("localhost", this.port, this.protocol, sslConfig, 0, "-1", null,
-                "Test", "true", "false", socketLayout, socketFilter, null, null);
+        return SocketAppender.createAppender("localhost", this.port, this.protocol, sslConfig, 0, -1, true,
+                "Test", true, false, socketLayout, socketFilter, false, null);
     }
 
     @BeforeClass

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/SocketAppenderTest.java
Patch:
@@ -144,7 +144,7 @@ public void testTcpAppender() throws Exception {
     @Test
     public void testDefaultProtocol() throws Exception {
 
-        final SocketAppender appender = SocketAppender.createAppender("localhost", PORT, null, null, 0, "-1",
+        final SocketAppender appender = SocketAppender.createAppender("localhost", PORT, (Protocol) null, null, 0, "-1",
                 "false", "Test", null, null, null, null, null, null);
         assertNotNull(appender);
     }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/AbstractSocketServerTest.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.logging.log4j.core.layout.JsonLayout;
 import org.apache.logging.log4j.core.layout.PatternLayout;
 import org.apache.logging.log4j.core.layout.XmlLayout;
+import org.apache.logging.log4j.core.net.Protocol;
 import org.apache.logging.log4j.test.AvailablePortFinder;
 import org.apache.logging.log4j.test.appender.ListAppender;
 import org.junit.After;
@@ -66,11 +67,11 @@ public abstract class AbstractSocketServerTest {
 
     protected final String port;
 
-    protected final String protocol;
+    protected final Protocol protocol;
 
     private final Logger rootLogger = ctx.getLogger(AbstractSocketServerTest.class.getSimpleName());
 
-    protected AbstractSocketServerTest(final String protocol, final String port, final boolean expectLengthException) {
+    protected AbstractSocketServerTest(final Protocol protocol, final String port, final boolean expectLengthException) {
         this.protocol = protocol;
         this.port = port;
         this.expectLengthException = expectLengthException;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/SslXmlSocketServerTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.appender.SocketAppender;
+import org.apache.logging.log4j.core.net.Protocol;
 import org.apache.logging.log4j.core.net.ssl.KeyStoreConfiguration;
 import org.apache.logging.log4j.core.net.ssl.SslConfiguration;
 import org.apache.logging.log4j.core.net.ssl.StoreConfigurationException;
@@ -79,7 +80,7 @@ public static void tearDownClass() {
     }
 
     public SslXmlSocketServerTest() {
-        super("SSL", PORT, false);
+        super(Protocol.SSL, PORT, false);
     }
 
     @Override

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/TcpJsonSocketServerTest.java
Patch:
@@ -21,6 +21,7 @@
 
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LoggerContext;
+import org.apache.logging.log4j.core.net.Protocol;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 
@@ -50,7 +51,7 @@ public static void tearDownClass() {
     }
 
     public TcpJsonSocketServerTest() {
-        super("tcp", PORT, false);
+        super(Protocol.TCP, PORT, false);
     }
 
     @Override

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/TcpSerializedSocketServerTest.java
Patch:
@@ -22,6 +22,7 @@
 
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LoggerContext;
+import org.apache.logging.log4j.core.net.Protocol;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 
@@ -51,7 +52,7 @@ public static void tearDownClass() {
     }
 
     public TcpSerializedSocketServerTest() {
-        super("tcp", PORT, false);
+        super(Protocol.TCP, PORT, false);
     }
 
     @Override

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/TcpXmlSocketServerTest.java
Patch:
@@ -22,6 +22,7 @@
 
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LoggerContext;
+import org.apache.logging.log4j.core.net.Protocol;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 
@@ -53,7 +54,7 @@ public static void tearDownClass() {
     }
 
     public TcpXmlSocketServerTest() {
-        super("tcp", PORT, false);
+        super(Protocol.TCP, PORT, false);
     }
 
     @Override

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/UdpJsonSocketServerTest.java
Patch:
@@ -21,6 +21,7 @@
 
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LoggerContext;
+import org.apache.logging.log4j.core.net.Protocol;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 
@@ -46,7 +47,7 @@ public static void tearDownClass() {
     }
 
     public UdpJsonSocketServerTest() {
-        super("udp", PORT, true);
+        super(Protocol.UDP, PORT, true);
     }
 
     @Override

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/UdpSerializedSocketServerTest.java
Patch:
@@ -21,6 +21,7 @@
 
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LoggerContext;
+import org.apache.logging.log4j.core.net.Protocol;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 
@@ -46,7 +47,7 @@ public static void tearDownClass() {
     }
 
     public UdpSerializedSocketServerTest() {
-        super("udp", PORT, true);
+        super(Protocol.UDP, PORT, true);
     }
 
     @Override

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/UdpXmlSocketServerTest.java
Patch:
@@ -22,6 +22,7 @@
 
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LoggerContext;
+import org.apache.logging.log4j.core.net.Protocol;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 
@@ -49,7 +50,7 @@ public static void tearDownClass() {
     }
 
     public UdpXmlSocketServerTest() {
-        super("udp", PORT, true);
+        super(Protocol.UDP, PORT, true);
     }
 
     @Override

File: log4j-core/src/test/java/org/apache/logging/log4j/core/util/WatchManagerTest.java
Patch:
@@ -52,9 +52,9 @@ public void testWatchManager() throws Exception {
         Assume.assumeFalse(IS_WINDOWS);
         ConfigurationScheduler scheduler = new ConfigurationScheduler();
         scheduler.incrementScheduledItems();
-        scheduler.start();
         WatchManager watchManager = new WatchManager(scheduler);
         watchManager.setIntervalSeconds(1);
+        scheduler.start();
         watchManager.start();
         try {
             File sourceFile = new File(originalFile);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderDeleteAccumulatedCount2Test.java
Patch:
@@ -81,9 +81,10 @@ public void testAppender() throws Exception {
             System.out.println(file + " (" + file.length() + "B) "
                     + FixedDateFormat.create(FixedFormat.ABSOLUTE).format(file.lastModified()));
         }
-        List<String> expected = Arrays.asList("test-10.log",
+        // sometimes "test-9.log", sometimes "test-10.log" remains
+        List<String> expected = Arrays.asList("test-9.log", "test-10.log",
                 "my-1.log", "my-2.log", "my-3.log", "my-4.log", "my-5.log");
-        assertEquals(Arrays.toString(files), expected.size(), files.length);
+        assertEquals(Arrays.toString(files), expected.size() - 1, files.length);
         for (File file : files) {
             assertTrue("unexpected file " + file, expected.contains(file.getName()));
         }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderDeleteAccumulatedSizeTest.java
Patch:
@@ -69,8 +69,9 @@ public void testAppender() throws Exception {
         assertEquals(Arrays.toString(files), 4, files.length);
         long total = 0;
         for (File file : files) {
+            // sometimes test-6.log remains
             assertTrue("unexpected file " + file, Arrays
-                    .asList("test-7.log", "test-8.log", "test-9.log", "test-10.log").contains(file.getName()));
+                    .asList("test-6.log", "test-7.log", "test-8.log", "test-9.log", "test-10.log").contains(file.getName()));
             total += file.length();
         }
         assertTrue("accumulatedSize=" + total, total <= 500);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderDeleteAccumulatedCount1Test.java
Patch:
@@ -57,7 +57,7 @@ protected void before() throws Throwable {
 
     @Test
     public void testAppender() throws Exception {
-        Path p1 = writeTextTo(DIR + "/my-1.log"); // glob="**/test-4.log"
+        Path p1 = writeTextTo(DIR + "/my-1.log"); // glob="test-*.log"
         Path p2 = writeTextTo(DIR + "/my-2.log");
         Path p3 = writeTextTo(DIR + "/my-3.log");
         Path p4 = writeTextTo(DIR + "/my-4.log");

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderDeleteAccumulatedCount2Test.java
Patch:
@@ -57,7 +57,7 @@ protected void before() throws Throwable {
 
     @Test
     public void testAppender() throws Exception {
-        Path p1 = writeTextTo(DIR + "/my-1.log"); // glob="**/test-4.log"
+        Path p1 = writeTextTo(DIR + "/my-1.log"); // glob="test-*.log"
         Path p2 = writeTextTo(DIR + "/my-2.log");
         Path p3 = writeTextTo(DIR + "/my-3.log");
         Path p4 = writeTextTo(DIR + "/my-4.log");

File: log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/mongodb/MongoDbConnection.java
Patch:
@@ -81,9 +81,8 @@ public void insertObject(final NoSqlObject<BasicDBObject> object) {
 
     @Override
     public void closeImpl() {
-        // there's no need to call this.mongo.close() since that literally closes the connection.
-        // MongoDBClient uses internal connection pooling.
-        // For more details, see LOG4J2-591.
+        // LOG4J2-1196
+        this.collection.getDB().getMongo().close();
     }
 
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java
Patch:
@@ -355,9 +355,6 @@ public static Builder newBuilder() {
      */
     public static class Builder implements org.apache.logging.log4j.core.util.Builder<PatternLayout> {
 
-        // FIXME: it seems rather redundant to repeat default values (same goes for field names)
-        // perhaps introduce a @PluginBuilderAttribute that has no values of its own and uses reflection?
-
         @PluginBuilderAttribute
         private String pattern = PatternLayout.DEFAULT_CONVERSION_PATTERN;
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.FileReader;
 
 import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.CoreLoggerContexts;
 import org.apache.logging.log4j.core.config.ConfigurationFactory;
 import org.apache.logging.log4j.core.util.Constants;
@@ -53,7 +52,7 @@ public void testAsyncLogWritesToLog() throws Exception {
         final File file = new File("target", "AsyncLoggerTest.log");
         // System.out.println(f.getAbsolutePath());
         file.delete();
-        final Logger log = LogManager.getLogger("com.foo.Bar");
+        final AsyncLogger log = (AsyncLogger) LogManager.getLogger("com.foo.Bar");
         final String msg = "Async logger msg";
         log.info(msg, new InternalError("this is not a real error"));
         CoreLoggerContexts.stopLoggerContext(false, file); // stop async thread
@@ -71,7 +70,8 @@ public void testAsyncLogWritesToLog() throws Exception {
     
     @Test
     public void testNanoClockInitiallyDummy() {
-        assertTrue(AsyncLogger.getNanoClock() instanceof DummyNanoClock);
+        final AsyncLogger log = (AsyncLogger) LogManager.getLogger("com.foo.Bar");
+        assertTrue(log.getNanoClock() instanceof DummyNanoClock);
     }
 
 }

File: log4j-api/src/main/java/org/apache/logging/log4j/util/ProviderUtil.java
Patch:
@@ -78,7 +78,9 @@ protected static void loadProvider(final URL url, final ClassLoader cl) {
         try {
             final Properties props = PropertiesUtil.loadClose(url.openStream(), url);
             if (validVersion(props.getProperty(API_VERSION))) {
-                PROVIDERS.add(new Provider(props, url, cl));
+                final Provider provider = new Provider(props, url, cl);
+                PROVIDERS.add(provider);
+                LOGGER.debug("Loaded Provider {}", provider);
             }
         } catch (final IOException e) {
             LOGGER.error("Unable to open {}", url, e);

File: log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/mongodb/MongoDbConnection.java
Patch:
@@ -81,9 +81,8 @@ public void insertObject(final NoSqlObject<BasicDBObject> object) {
 
     @Override
     public void closeImpl() {
-        // there's no need to call this.mongo.close() since that literally closes the connection.
-        // MongoDBClient uses internal connection pooling.
-        // For more details, see LOG4J2-591.
+        // LOG4J2-1196
+        this.collection.getDB().getMongo().close();
     }
 
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java
Patch:
@@ -355,9 +355,6 @@ public static Builder newBuilder() {
      */
     public static class Builder implements org.apache.logging.log4j.core.util.Builder<PatternLayout> {
 
-        // FIXME: it seems rather redundant to repeat default values (same goes for field names)
-        // perhaps introduce a @PluginBuilderAttribute that has no values of its own and uses reflection?
-
         @PluginBuilderAttribute
         private String pattern = PatternLayout.DEFAULT_CONVERSION_PATTERN;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/Duration.java
Patch:
@@ -63,8 +63,8 @@ public class Duration implements Serializable, Comparable<Duration> {
     /**
      * The pattern for parsing.
      */
-    private static final Pattern PATTERN = Pattern.compile("P(?:([0-9]+)D)?"
-            + "(T(?:([0-9]+)H)?(?:([0-9]+)M)?(?:([0-9]+)?S)?)?", Pattern.CASE_INSENSITIVE);
+    private static final Pattern PATTERN = Pattern.compile("P?(?:([0-9]+)D)?"
+            + "(T?(?:([0-9]+)H)?(?:([0-9]+)M)?(?:([0-9]+)?S)?)?", Pattern.CASE_INSENSITIVE);
 
     /**
      * The number of seconds in the duration.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/IfFileName.java
Patch:
@@ -36,7 +36,7 @@
  * <p>
  * The path pattern may contain '?' and '*' wildcarts.
  */
-@Plugin(name = "FileNameFilter", category = "Core", printObject = true)
+@Plugin(name = "IfFileName", category = "Core", printObject = true)
 public final class IfFileName implements PathCondition {
     private static final Logger LOGGER = StatusLogger.getLogger();
     private final Pattern regex;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingFileAppender.java
Patch:
@@ -183,7 +183,7 @@ public static RollingFileAppender createAppender(
 
         if (strategy == null) {
             strategy = DefaultRolloverStrategy.createStrategy(null, null, null,
-                    String.valueOf(Deflater.DEFAULT_COMPRESSION), config);
+                    String.valueOf(Deflater.DEFAULT_COMPRESSION), null, true, config);
         }
 
         if (layout == null) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppender.java
Patch:
@@ -196,7 +196,7 @@ public static RollingRandomAccessFileAppender createAppender(
 
         if (strategy == null) {
             strategy = DefaultRolloverStrategy.createStrategy(null, null, null,
-                    String.valueOf(Deflater.DEFAULT_COMPRESSION), config);
+                    String.valueOf(Deflater.DEFAULT_COMPRESSION), null, true, config);
         }
 
         if (layout == null) {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.FileReader;
 
 import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.CoreLoggerContexts;
 import org.apache.logging.log4j.core.config.ConfigurationFactory;
 import org.apache.logging.log4j.core.util.Constants;
@@ -53,7 +52,7 @@ public void testAsyncLogWritesToLog() throws Exception {
         final File file = new File("target", "AsyncLoggerTest.log");
         // System.out.println(f.getAbsolutePath());
         file.delete();
-        final Logger log = LogManager.getLogger("com.foo.Bar");
+        final AsyncLogger log = (AsyncLogger) LogManager.getLogger("com.foo.Bar");
         final String msg = "Async logger msg";
         log.info(msg, new InternalError("this is not a real error"));
         CoreLoggerContexts.stopLoggerContext(false, file); // stop async thread
@@ -71,7 +70,8 @@ public void testAsyncLogWritesToLog() throws Exception {
     
     @Test
     public void testNanoClockInitiallyDummy() {
-        assertTrue(AsyncLogger.getNanoClock() instanceof DummyNanoClock);
+        final AsyncLogger log = (AsyncLogger) LogManager.getLogger("com.foo.Bar");
+        assertTrue(log.getNanoClock() instanceof DummyNanoClock);
     }
 
 }

File: log4j-api/src/main/java/org/apache/logging/log4j/util/ProviderUtil.java
Patch:
@@ -78,7 +78,9 @@ protected static void loadProvider(final URL url, final ClassLoader cl) {
         try {
             final Properties props = PropertiesUtil.loadClose(url.openStream(), url);
             if (validVersion(props.getProperty(API_VERSION))) {
-                PROVIDERS.add(new Provider(props, url, cl));
+                final Provider provider = new Provider(props, url, cl);
+                PROVIDERS.add(provider);
+                LOGGER.debug("Loaded Provider {}", provider);
             }
         } catch (final IOException e) {
             LOGGER.error("Unable to open {}", url, e);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/jeromq/JeroMqAppender.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
 import org.apache.logging.log4j.core.config.plugins.validation.constraints.Required;
 import org.apache.logging.log4j.core.layout.PatternLayout;
+import org.apache.logging.log4j.core.util.Log4jThread;
 import org.apache.logging.log4j.status.StatusLogger;
 import org.apache.logging.log4j.util.PropertiesUtil;
 import org.apache.logging.log4j.util.Strings;
@@ -94,7 +95,7 @@ public final class JeroMqAppender extends AbstractAppender {
         context = ZMQ.context(ioThreads);
         logger.trace("{} created ZMQ context {}", simpleName, context);
         if (enableShutdownHook) {
-            final Thread hook = new Thread(simpleName + "-shutdown") {
+            final Thread hook = new Log4jThread(simpleName + "-shutdown") {
                 @Override
                 public void run() {
                     shutdown();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/kafka/KafkaManager.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.kafka.clients.producer.ProducerRecord;
 import org.apache.logging.log4j.core.appender.AbstractManager;
 import org.apache.logging.log4j.core.config.Property;
+import org.apache.logging.log4j.core.util.Log4jThread;
 
 public class KafkaManager extends AbstractManager {
 
@@ -58,7 +59,7 @@ public KafkaManager(final String name, final String topic, final Property[] prop
     public void releaseSub() {
         if (producer != null) {
             // This thread is a workaround for this Kafka issue: https://issues.apache.org/jira/browse/KAFKA-1660
-            final Thread closeThread = new Thread(new Runnable() {
+            final Thread closeThread = new Log4jThread(new Runnable() {
                 @Override
                 public void run() {
                     producer.close();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.logging.log4j.core.appender.ManagerFactory;
 import org.apache.logging.log4j.core.appender.rolling.action.AbstractAction;
 import org.apache.logging.log4j.core.appender.rolling.action.Action;
+import org.apache.logging.log4j.core.util.Log4jThread;
 
 /**
  * The Rolling File Manager.
@@ -182,7 +183,7 @@ private boolean rollover(final RolloverStrategy strategy) {
 
                 if (success && descriptor.getAsynchronous() != null) {
                     LOGGER.debug("RollingFileManager executing async {}", descriptor.getAsynchronous());
-                    thread = new Thread(new AsyncAction(descriptor.getAsynchronous(), this));
+                    thread = new Log4jThread(new AsyncAction(descriptor.getAsynchronous(), this));
                     thread.start();
                 }
                 return true;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/DaemonThreadFactory.java
Patch:
@@ -19,6 +19,8 @@
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.atomic.AtomicInteger;
 
+import org.apache.logging.log4j.core.util.Log4jThread;
+
 /**
  * ThreadFactory that creates daemon threads for the async loggers.
  */
@@ -37,7 +39,7 @@ public DaemonThreadFactory(final String threadNamePrefix) {
 
     @Override
     public Thread newThread(final Runnable runnable) {
-        final Thread thread = new Thread(group, runnable, threadNamePrefix
+        final Thread thread = new Log4jThread(group, runnable, threadNamePrefix
                 + threadNumber.getAndIncrement(), 0);
         if (!thread.isDaemon()) {
             thread.setDaemon(true);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/FileConfigurationMonitor.java
Patch:
@@ -23,6 +23,8 @@
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
 
+import org.apache.logging.log4j.core.util.Log4jThread;
+
 /**
  * Configuration monitor that periodically checks the timestamp of the configuration file and calls the
  * ConfigurationListeners when an update occurs.
@@ -81,7 +83,7 @@ public void checkConfiguration() {
                 if (currentLastModified > lastModified) {
                     lastModified = currentLastModified;
                     for (final ConfigurationListener listener : listeners) {
-                        final Thread thread = new Thread(new ReconfigurationWorker(listener, reconfigurable));
+                        final Thread thread = new Log4jThread(new ReconfigurationWorker(listener, reconfigurable));
                         thread.setDaemon(true);
                         thread.start();
                     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/server/AbstractSocketServer.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.logging.log4j.core.config.ConfigurationSource;
 import org.apache.logging.log4j.core.config.xml.XmlConfiguration;
 import org.apache.logging.log4j.core.config.xml.XmlConfigurationFactory;
+import org.apache.logging.log4j.core.util.Log4jThread;
 import org.apache.logging.log4j.util.Strings;
 
 /**
@@ -124,7 +125,7 @@ protected void setActive(final boolean isActive) {
      * @return the new thread that running this server.
      */
     public Thread startNewThread() {
-        final Thread thread = new Thread(this);
+        final Thread thread = new Log4jThread(this);
         thread.start();
         return thread;
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/server/TcpSocketServer.java
Patch:
@@ -31,6 +31,7 @@
 import java.util.concurrent.ConcurrentMap;
 
 import org.apache.logging.log4j.core.config.ConfigurationFactory;
+import org.apache.logging.log4j.core.util.Log4jThread;
 
 /**
  * Listens for events over a socket connection.
@@ -193,7 +194,7 @@ public static void main(final String[] args) throws Exception {
             ConfigurationFactory.setConfigurationFactory(new ServerConfigurationFactory(args[1]));
         }
         final TcpSocketServer<ObjectInputStream> socketServer = TcpSocketServer.createSerializedSocketServer(port);
-        final Thread serverThread = new Thread(socketServer);
+        final Thread serverThread = new Log4jThread(socketServer);
         serverThread.start();
         final Charset enc = Charset.defaultCharset();
         final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in, enc));

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/server/UdpSocketServer.java
Patch:
@@ -28,6 +28,7 @@
 import java.net.DatagramSocket;
 
 import org.apache.logging.log4j.core.config.ConfigurationFactory;
+import org.apache.logging.log4j.core.util.Log4jThread;
 
 /**
  * Listens for events over a socket connection.
@@ -119,7 +120,7 @@ public static void main(final String[] args) throws Exception {
             ConfigurationFactory.setConfigurationFactory(new ServerConfigurationFactory(args[1]));
         }
         final UdpSocketServer<ObjectInputStream> socketServer = UdpSocketServer.createSerializedSocketServer(port);
-        final Thread server = new Thread(socketServer);
+        final Thread server = new Log4jThread(socketServer);
         server.start();
         final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
         while (true) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/CachedClock.java
Patch:
@@ -34,7 +34,7 @@ public final class CachedClock implements Clock {
     private short count = 0;
 
     private CachedClock() {
-        final Thread updater = new Thread(new Runnable() {
+        final Thread updater = new Log4jThread(new Runnable() {
             @Override
             public void run() {
                 while (true) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/CoarseCachedClock.java
Patch:
@@ -28,7 +28,7 @@ public final class CoarseCachedClock implements Clock {
     // ignore IDE complaints; volatile long is fine
     private volatile long millis = System.currentTimeMillis();
 
-    private final Thread updater = new Thread("Clock Updater Thread") {
+    private final Thread updater = new Log4jThread("Clock Updater Thread") {
         @Override
         public void run() {
             while (true) {

File: log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java
Patch:
@@ -45,6 +45,7 @@
 import org.apache.logging.log4j.core.config.plugins.util.PluginManager;
 import org.apache.logging.log4j.core.config.plugins.util.PluginType;
 import org.apache.logging.log4j.core.util.FileUtils;
+import org.apache.logging.log4j.core.util.Log4jThread;
 import org.apache.logging.log4j.core.util.SecretKeyProvider;
 import org.apache.logging.log4j.util.Strings;
 
@@ -842,7 +843,7 @@ public DaemonThreadFactory() {
 
         @Override
         public Thread newThread(final Runnable r) {
-            final Thread thread = new Thread(group, r, namePrefix + threadNumber.getAndIncrement(), 0);
+            final Thread thread = new Log4jThread(group, r, namePrefix + threadNumber.getAndIncrement(), 0);
             thread.setDaemon(true);
             if (thread.getPriority() != Thread.NORM_PRIORITY) {
                 thread.setPriority(Thread.NORM_PRIORITY);

File: log4j-api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java
Patch:
@@ -102,7 +102,7 @@ public ExtendedLogger getLogger(final String name) {
     @Override
     public ExtendedLogger getLogger(final String name, final MessageFactory messageFactory) {
         // Note: This is the only method where we add entries to the 'loggers' ivar.
-        // The loggers map key is the logger name plus the messageFactory FQCN (if any).
+        // The loggers map key is the logger name plus the messageFactory FQCN.
         String key = LoggerContextKey.create(name, messageFactory);
         final ExtendedLogger extendedLogger = loggers.get(key);
         if (extendedLogger != null) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java
Patch:
@@ -393,7 +393,7 @@ public Collection<Logger> getLoggers() {
     @Override
     public Logger getLogger(final String name, final MessageFactory messageFactory) {
         // Note: This is the only method where we add entries to the 'loggers' ivar. 
-        // The loggers map key is the logger name plus the messageFactory FQCN (if any).
+        // The loggers map key is the logger name plus the messageFactory FQCN.
         String key = LoggerContextKey.create(name, messageFactory);
         Logger logger = loggers.get(key);
         if (logger != null) {

File: log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java
Patch:
@@ -60,6 +60,8 @@ public Log4jTaglibLogger getLogger(final String name) {
 
     @Override
     public Log4jTaglibLogger getLogger(final String name, final MessageFactory messageFactory) {
+        // Note: This is the only method where we add entries to the 'loggers' ivar. 
+        // The loggers map key is the logger name plus the messageFactory FQCN.
         String key = LoggerContextKey.create(name, messageFactory);
         Log4jTaglibLogger logger = this.loggers.get(key);
         if (logger != null) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/server/TcpSocketServer.java
Patch:
@@ -231,13 +231,12 @@ public void run() {
                 final SocketHandler handler = new SocketHandler(clientSocket);
                 handlers.put(Long.valueOf(handler.getId()), handler);
                 handler.start();
-            } catch (final IOException ioe) {
+            } catch (final IOException e) {
                 if (serverSocket.isClosed()) {
                     // OK we're done.
                     return;
                 }
-                System.out.println("Exception encountered on accept. Ignoring. Stack Trace :");
-                ioe.printStackTrace();
+                logger.error("Exception encountered on accept. Ignoring. Stack Trace :", e);
             }
         }
         for (final Map.Entry<Long, SocketHandler> entry : handlers.entrySet()) {

File: log4j-api/src/test/java/org/apache/logging/log4j/util/LambdaUtilTest.java
Patch:
@@ -116,7 +116,7 @@ public void testGetAllReturnsNullArrayIfSupplierArrayNull() {
 
     @Test
     public void testGetAllReturnsNullElementsIfSupplierArrayContainsNulls() {
-        final Supplier<?>[] functions = new Supplier[3];
+        final Supplier<?>[] functions = new Supplier<?>[3];
         final Object[] actual = LambdaUtil.getAll(functions);
         assertEquals(actual.length, functions.length);
         for (final Object object : actual) {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/MissingRootLoggerTest.java
Patch:
@@ -55,7 +55,7 @@ public void testMissingRootLogger() throws Exception {
         assertNotNull("Appenders not null", map);
         assertThat("There should only be two appenders", map, hasSize(2));
         assertThat(map, hasKey("List"));
-        assertThat(map, hasKey("Console"));
+        assertThat(map, hasKey("DefaultConsole-2"));
 
         final Map<String, LoggerConfig> loggerMap = config.getLoggers();
         assertNotNull("loggerMap not null", loggerMap);
@@ -74,7 +74,7 @@ public void testMissingRootLogger() throws Exception {
         final Map<String, Appender> rootAppenders = root.getAppenders();
         assertThat("The root logger should only have one appender", rootAppenders, hasSize(1));
         // root only has Console appender!
-        assertThat("The root appender should be a ConsoleAppender", rootAppenders, hasKey("Console"));
+        assertThat("The root appender should be a ConsoleAppender", rootAppenders, hasKey("DefaultConsole-2"));
         assertEquals(Level.ERROR, root.getLevel());
     }
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/TestConfigurator.java
Patch:
@@ -290,7 +290,8 @@ public void testNoLoggers() throws Exception {
         LogManager.getLogger("org.apache.test.TestConfigurator");
         final Configuration config = ctx.getConfiguration();
         assertNotNull("No configuration", config);
-        assertEquals("Unexpected Configuration.", DefaultConfiguration.DEFAULT_NAME, config.getName());
+        final String name = DefaultConfiguration.DEFAULT_NAME + "@" + Integer.toHexString(config.hashCode());
+        assertEquals("Unexpected Configuration.", name, config.getName());
     }
 
     @Test

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java
Patch:
@@ -501,7 +501,8 @@ protected void doConfigure() {
     }
 
     protected void setToDefault() {
-        setName(DefaultConfiguration.DEFAULT_NAME);
+        // LOG4J2-1176 facilitate memory leak investigation
+        setName(DefaultConfiguration.DEFAULT_NAME + "@" + Integer.toHexString(hashCode()));
         final Layout<? extends Serializable> layout = PatternLayout.newBuilder()
                 .withPattern(DefaultConfiguration.DEFAULT_PATTERN)
                 .withConfiguration(this)

File: log4j-api/src/main/java/org/apache/logging/log4j/util/LoaderUtil.java
Patch:
@@ -185,11 +185,11 @@ public static <T> T newCheckedInstanceOf(final String className, final Class<T>
     public static <T> T newCheckedInstanceOfProperty(final String propertyName, final Class<T> clazz)
         throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException,
         IllegalAccessException {
-        final String property = PropertiesUtil.getProperties().getStringProperty(propertyName);
-        if (property == null) {
+        final String className = PropertiesUtil.getProperties().getStringProperty(propertyName);
+        if (className == null) {
             return null;
         }
-        return newCheckedInstanceOf(propertyName, clazz);
+        return newCheckedInstanceOf(className, clazz);
     }
 
     private static boolean isIgnoreTccl() {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java
Patch:
@@ -468,8 +468,8 @@ protected void doConfigure() {
             } else {
                 final List<String> expected = Arrays.asList("\"Appenders\"", "\"Loggers\"", "\"Properties\"",
                         "\"Scripts\"", "\"CustomLevels\"");
-                LOGGER.error("Unknown object \"{}\" of type {} is ignored: expected one of {}.", child.getName(),
-                        child.getObject().getClass().getName(), expected);
+                LOGGER.error("Unknown object \"{}\" of type {} is ignored: try nesting it inside one of: {}.",
+                        child.getName(), child.getObject().getClass().getName(), expected);
             }
         }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContext.java
Patch:
@@ -107,9 +107,8 @@ public void stop() {
 
     /**
      * Creates and returns a new {@code RingBufferAdmin} that instruments the ringbuffer of the {@code AsyncLogger}
-     * objects.
+     * objects in this {@code LoggerContext}.
      *
-     * @param contextName name of this {@code AsyncLoggerContext}
      * @return a new {@code RingBufferAdmin} that instruments the ringbuffer
      */
     public RingBufferAdmin createRingBufferAdmin() {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDelegate.java
Patch:
@@ -46,7 +46,7 @@ public interface AsyncLoggerConfigDelegate {
      * 
      * @param contextName name of the {@code LoggerContext}
      * @param loggerConfigName name of the logger config
+     * @return the RingBufferAdmin that instruments the ringbuffer
      */
     RingBufferAdmin createRingBufferAdmin(String contextName, String loggerConfigName);
-
-}
\ No newline at end of file
+}

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java
Patch:
@@ -92,6 +92,9 @@ private void collectPlugins(final Iterable<? extends Element> elements) {
                 elementUtils);
         for (final Element element : elements) {
             final Plugin plugin = element.getAnnotation(Plugin.class);
+            if (plugin == null) {
+                continue;
+            }
             final PluginEntry entry = element.accept(pluginVisitor, plugin);
             final Map<String, PluginEntry> category = pluginCache.getCategory(entry.getCategory());
             category.put(entry.getKey(), entry);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java
Patch:
@@ -72,7 +72,7 @@ public boolean isTriggeringEvent(final LogEvent event) {
             return false;
         }
         final long nowMillis = event.getTimeMillis();
-        if (nowMillis > nextRolloverMillis) {
+        if (nowMillis >= nextRolloverMillis) {
             nextRolloverMillis = manager.getPatternProcessor().getNextTime(nowMillis, interval, modulate);
             return true;
         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDelegate.java
Patch:
@@ -24,7 +24,7 @@
  * Encapsulates the mechanism used to log asynchronously. There is one delegate per configuration, which is shared by
  * all AsyncLoggerConfig objects in the configuration.
  */
-interface AsyncLoggerConfigDelegate {
+public interface AsyncLoggerConfigDelegate {
 
     /**
      * If possible, delegates the invocation of {@code callAppenders} to the background thread and returns {@code true}.

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerTest.java
Patch:
@@ -56,7 +56,7 @@ public void testAsyncLogWritesToLog() throws Exception {
         final Logger log = LogManager.getLogger("com.foo.Bar");
         final String msg = "Async logger msg";
         log.info(msg, new InternalError("this is not a real error"));
-        CoreLoggerContexts.stopLoggerContext(file); // stop async thread
+        CoreLoggerContexts.stopLoggerContext(false, file); // stop async thread
 
         final BufferedReader reader = new BufferedReader(new FileReader(file));
         final String line1 = reader.readLine();

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerThreadContextTest.java
Patch:
@@ -60,7 +60,7 @@ public void testAsyncLogWritesToLog() throws Exception {
         final Logger log = LogManager.getLogger("com.foo.Bar");
         final String msg = "Async logger msg";
         log.info(msg, new InternalError("this is not a real error"));
-        CoreLoggerContexts.stopLoggerContext(file); // stop async thread
+        CoreLoggerContexts.stopLoggerContext(false, file); // stop async thread
 
         final BufferedReader reader = new BufferedReader(new FileReader(file));
         final String line1 = reader.readLine();

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerTimestampMessageTest.java
Patch:
@@ -70,7 +70,7 @@ public void testAsyncLogWritesToLog() throws Exception {
         file.delete();
         final Logger log = LogManager.getLogger("com.foo.Bar");
         log.info(new TimeMsg("Async logger msg with embedded timestamp", 123456789000L));
-        CoreLoggerContexts.stopLoggerContext(file); // stop async thread
+        CoreLoggerContexts.stopLoggerContext(false, file); // stop async thread
 
         final BufferedReader reader = new BufferedReader(new FileReader(file));
         final String line1 = reader.readLine();

File: log4j-web/src/main/java/org/apache/logging/log4j/web/Log4jWebInitializerImpl.java
Patch:
@@ -163,7 +163,7 @@ private URI getConfigURI(final String location) {
             String configLocation = location;
             if (configLocation == null) {
                 final String[] paths = SetUtils.prefixSet(servletContext.getResourcePaths(WEB_INF), WEB_INF + "log4j2");
-                LOGGER.debug("getConfigURI found resource paths {} in servletConext at [{}]", Arrays.toString(paths), WEB_INF);
+                LOGGER.debug("getConfigURI found resource paths {} in servletContext at [{}]", Arrays.toString(paths), WEB_INF);
                 if (paths.length == 1) {
                     configLocation = paths[0];
                 } else if (paths.length > 1) {
@@ -185,7 +185,7 @@ private URI getConfigURI(final String location) {
                 final URL url = servletContext.getResource(configLocation);
                 if (url != null) {
                     final URI uri = url.toURI();
-                    LOGGER.debug("getConfigURI found resource [{}] in servletConext at [{}]", uri, configLocation);
+                    LOGGER.debug("getConfigURI found resource [{}] in servletContext at [{}]", uri, configLocation);
                     return uri;
                 }
             }
@@ -195,7 +195,7 @@ private URI getConfigURI(final String location) {
         if (location != null) {
             try {
                 final URI correctedFilePathUri = NetUtils.toURI(location);
-                LOGGER.debug("getConfigURI found [{}] in servletConext at [{}]", correctedFilePathUri, location);
+                LOGGER.debug("getConfigURI found [{}] in servletContext at [{}]", correctedFilePathUri, location);
                 return correctedFilePathUri;
             } catch (final Exception e) {
                 LOGGER.error("Unable to convert configuration location [{}] to a URI", location, e);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerContextSelectorTest.java
Patch:
@@ -54,7 +54,7 @@ public void testLoggerContextsReturnsAsyncLoggerContext() {
     public void testContextNameIsAsyncLoggerContextWithClassHashCode() {
         final AsyncLoggerContextSelector selector = new AsyncLoggerContextSelector();
         final LoggerContext context = selector.getContext(null, null, false);
-        final String expectedContextName = "AsyncLoggerContext@" + AsyncLoggerContext.class.hashCode();
+        final String expectedContextName = "AsyncLoggerContext@" + Integer.toHexString(AsyncLoggerContext.class.hashCode());
         assertEquals(expectedContextName, context.getName());
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileWatcher.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Watches for changes in a Path and performs an action when the file is modified.
  */
-public interface FileWatcher<T> {
+public interface FileWatcher {
 
     void fileModified(File file);
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java
Patch:
@@ -433,8 +433,7 @@ public static LoggerConfig createLogger(@PluginAttribute("additivity") final Str
     // for synchronous loggers, includeLocation default is TRUE.
     protected static boolean includeLocation(final String includeLocationConfigValue) {
         if (includeLocationConfigValue == null) {
-            final boolean sync = !AsyncLoggerContextSelector.class.getName().equals(
-                    PropertiesUtil.getProperties().getStringProperty(Constants.LOG4J_CONTEXT_SELECTOR));
+            final boolean sync = !AsyncLoggerContextSelector.isSelected();
             return sync;
         }
         return Boolean.parseBoolean(includeLocationConfigValue);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java
Patch:
@@ -268,7 +268,7 @@ public String toString() {
                         }
                     });
                 } catch (final IllegalStateException e) {
-                    LOGGER.fatal(SHUTDOWN_HOOK_MARKER,
+                    LOGGER.error(SHUTDOWN_HOOK_MARKER,
                             "Unable to register shutdown hook because JVM is shutting down.", e);
                 } catch (final SecurityException e) {
                     LOGGER.error(SHUTDOWN_HOOK_MARKER, "Unable to register shutdown hook due to security restrictions",

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java
Patch:
@@ -95,9 +95,9 @@ public void cancel() {
 
                 @Override
                 public void run() {
-                    final Runnable hook = this.hook.get();
-                    if (hook != null) {
-                        hook.run();
+                    final Runnable runnableHook = this.hook.get();
+                    if (runnableHook != null) {
+                        runnableHook.run();
                         this.hook.clear();
                     }
                 }

File: log4j-api/src/test/java/org/apache/logging/log4j/LoggerTest.java
Patch:
@@ -215,6 +215,7 @@ public void getLogger_String_MessageFactoryMismatch() {
         assertEquals(messageFactory, testLogger.getMessageFactory());
         final TestLogger testLogger2 = (TestLogger) LogManager.getLogger("getLogger_String_MessageFactoryMismatch",
                 ParameterizedMessageFactory.INSTANCE);
+        assertNotNull(testLogger2);
         //TODO: How to test?
         //This test context always creates new loggers, other test context impls I tried fail other tests.
         //assertEquals(messageFactory, testLogger2.getMessageFactory());

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationFactory.java
Patch:
@@ -151,7 +151,7 @@ public PropertiesConfiguration getConfiguration(ConfigurationSource source) {
             }
         }
         String loggerProp = properties.getProperty("loggers");
-        if (appenderProp != null) {
+        if (loggerProp != null) {
             String[] loggerNames = loggerProp.split(",");
             for (String loggerName : loggerNames) {
                 String name = loggerName.trim();
@@ -400,7 +400,6 @@ private <B extends ComponentBuilder<B>> ComponentBuilder<B> createComponent(Comp
         return componentBuilder;
     }
 
-    @SuppressWarnings({"unchecked", "rawtypes"})
     private void processRemainingProperties(ComponentBuilder<?> builder, String name, Properties properties) {
         while (properties.size() > 0) {
             String propertyName = properties.stringPropertyNames().iterator().next();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java
Patch:
@@ -303,6 +303,8 @@ public RollingFileManager createManager(final String name, final FactoryData dat
             if (null != parent && !parent.exists()) {
                 parent.mkdirs();
             }
+            // LOG4J2-1140: check writeHeader before creating the file
+            final boolean writeHeader = !data.append || !file.exists();
             try {
                 file.createNewFile();
             } catch (final IOException ioe) {
@@ -311,7 +313,6 @@ public RollingFileManager createManager(final String name, final FactoryData dat
             }
             final long size = data.append ? file.length() : 0;
 
-            final boolean writeHeader = !data.append || !file.exists();
             OutputStream os;
             try {
                 os = new FileOutputStream(name, data.append);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutTest.java
Patch:
@@ -255,7 +255,6 @@ public void testUnixTime() throws Exception {
         // System.out.println("event2=" + event2.getTimeMillis() / 1000);
     }
 
-    @SuppressWarnings("unused")
     private void testUnixTime(final String pattern) throws Exception {
         final PatternLayout layout = PatternLayout.newBuilder().withPattern(pattern + " %m")
                 .withConfiguration(ctx.getConfiguration()).build();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationFactory.java
Patch:
@@ -130,7 +130,7 @@ public PropertiesConfiguration getConfiguration(ConfigurationSource source) {
             }
         }
         String loggerProp = properties.getProperty("loggers");
-        if (appenderProp != null) {
+        if (loggerProp != null) {
             String[] loggerNames = loggerProp.split(",");
             for (String loggerName : loggerNames) {
                 String name = loggerName.trim();
@@ -343,7 +343,6 @@ private <B extends ComponentBuilder<B>> ComponentBuilder<B> createComponent(Comp
         return componentBuilder;
     }
 
-    @SuppressWarnings({"unchecked", "rawtypes"})
     private void processRemainingProperties(ComponentBuilder<?> builder, String name, Properties properties) {
         while (properties.size() > 0) {
             String propertyName = properties.stringPropertyNames().iterator().next();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java
Patch:
@@ -303,6 +303,8 @@ public RollingFileManager createManager(final String name, final FactoryData dat
             if (null != parent && !parent.exists()) {
                 parent.mkdirs();
             }
+            // LOG4J2-1140: check writeHeader before creating the file
+            final boolean writeHeader = !data.append || !file.exists();
             try {
                 file.createNewFile();
             } catch (final IOException ioe) {
@@ -311,7 +313,6 @@ public RollingFileManager createManager(final String name, final FactoryData dat
             }
             final long size = data.append ? file.length() : 0;
 
-            final boolean writeHeader = !data.append || !file.exists();
             OutputStream os;
             try {
                 os = new FileOutputStream(name, data.append);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutTest.java
Patch:
@@ -323,7 +323,7 @@ public void testPatternSelector() throws Exception {
                 .setIncludeLocation(true)
                 .setMessage(new SimpleMessage("entry")).build();
         final String result1 = new FauxLogger().formatEvent(event1, layout);
-        final String expectSuffix1 = String.format("====== PatternLayoutTest.testPatternSelector:281 entry ======%n");
+        final String expectSuffix1 = String.format("====== PatternLayoutTest.testPatternSelector:325 entry ======%n");
         assertTrue("Unexpected result: " + result1, result1.endsWith(expectSuffix1));
         final LogEvent event2 = Log4jLogEvent.newBuilder() //
                 .setLoggerName(this.getClass().getName()).setLoggerFqcn("org.apache.logging.log4j.core.Logger") //

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java
Patch:
@@ -104,8 +104,6 @@ public DeflaterOutputStream createDeflaterOutputStream(final OutputStream os) th
     private static final long serialVersionUID = 1L;
     private static final BigDecimal TIME_DIVISOR = new BigDecimal(1000);
 
-    private static ThreadLocal<StringBuilder> strBuilder = newStringBuilderThreadLocal();
-
     private final KeyValuePair[] additionalFields;
     private final int compressionThreshold;
     private final CompressionType compressionType;
@@ -188,7 +186,7 @@ public byte[] toByteArray(final LogEvent event) {
 
     @Override
     public String toSerializable(final LogEvent event) {
-        final StringBuilder builder = prepareStringBuilder(strBuilder);
+        final StringBuilder builder = getStringBuilder();
         final JsonStringEncoder jsonEncoder = JsonStringEncoder.getInstance();
         builder.append('{');
         builder.append("\"version\":\"1.1\",");

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java
Patch:
@@ -61,8 +61,6 @@ public final class HtmlLayout extends AbstractStringLayout {
     private static final String DEFAULT_TITLE = "Log4j Log Messages";
     private static final String DEFAULT_CONTENT_TYPE = "text/html";
 
-    private static ThreadLocal<StringBuilder> strBuilder = newStringBuilderThreadLocal();
-
     private final long jvmStartTime = ManagementFactory.getRuntimeMXBean().getStartTime();
     
     // Print no location info by default
@@ -128,7 +126,7 @@ private String addCharsetToContentType(final String contentType) {
      */
     @Override
     public String toSerializable(final LogEvent event) {
-        final StringBuilder sbuf = prepareStringBuilder(strBuilder);
+        final StringBuilder sbuf = getStringBuilder();
 
         sbuf.append(Constants.LINE_SEPARATOR).append("<tr>").append(Constants.LINE_SEPARATOR);
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/SyslogLayout.java
Patch:
@@ -50,8 +50,6 @@ public final class SyslogLayout extends AbstractStringLayout {
 
     private static final long serialVersionUID = 1L;
 
-    private static ThreadLocal<StringBuilder> strBuilder = newStringBuilderThreadLocal();
-
     private final Facility facility;
     private final boolean includeNewLine;
     private final String escapeNewLine;
@@ -80,7 +78,7 @@ protected SyslogLayout(final Facility facility, final boolean includeNL, final S
      */
     @Override
     public String toSerializable(final LogEvent event) {
-        final StringBuilder buf = prepareStringBuilder(strBuilder);
+        final StringBuilder buf = getStringBuilder();
 
         buf.append('<');
         buf.append(Priority.getPriority(facility, event.getLevel()));

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MarkerPatternConverter.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 
 /**
- * Returns the event's rendered message in a StringBuilder.
+ * Returns events' full maker string in a StringBuilder.
  */
 @Plugin(name = "MarkerPatternConverter", category = PatternConverter.CATEGORY)
 @ConverterKeys({ "marker" })

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/ListOfMapEntrySerializer.java
Patch:
@@ -34,6 +34,8 @@
 @SuppressWarnings("rawtypes")
 public class ListOfMapEntrySerializer extends StdSerializer<Map> {
 
+    private static final long serialVersionUID = 1L;
+
     protected ListOfMapEntrySerializer() {
         super(Map.class);
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/MessageSerializer.java
Patch:
@@ -32,6 +32,8 @@
  */
 final class MessageSerializer extends StdScalarSerializer<Message> {
 
+    private static final long serialVersionUID = 1L;
+
     MessageSerializer() {
         super(Message.class);
     }

File: log4j-core/src/test/java/org/apache/logging/log4j/test/layout/BasicLayout.java
Patch:
@@ -31,6 +31,7 @@
 @Plugin(name = "BasicLayout", category = "Core", elementType = "layout", printObject = true)
 public class BasicLayout extends AbstractStringLayout {
 
+    private static final long serialVersionUID = 1L;
     private static final String HEADER = "Header" + Constants.LINE_SEPARATOR;
 
     @Override

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerHeaderFooterTest.java
Patch:
@@ -48,7 +48,7 @@ public class RollingRandomAccessFileManagerHeaderFooterTest {
 
     @Before
     public void setUp() throws Exception {
-        this.logger = this.init.getLogger(RollingRandomAccessFileManagerHeaderFooterTest.class.getName());
+        this.logger = init.getLogger(RollingRandomAccessFileManagerHeaderFooterTest.class.getName());
         deleteDir();
     }
 

File: log4j-core/src/test/java/org/apache/logging/log4j/test/appender/DeadlockAppender.java
Patch:
@@ -31,6 +31,8 @@
 @Plugin(name="Deadlock", category ="Core",elementType="appender",printObject=true)
 public class DeadlockAppender extends AbstractAppender {
 
+    private static final long serialVersionUID = 1L;
+
     private WorkerThread thread = null;
 
     private DeadlockAppender(final String name) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java
Patch:
@@ -104,8 +104,6 @@ public DeflaterOutputStream createDeflaterOutputStream(final OutputStream os) th
     private static final long serialVersionUID = 1L;
     private static final BigDecimal TIME_DIVISOR = new BigDecimal(1000);
 
-    private static ThreadLocal<StringBuilder> strBuilder = newStringBuilderThreadLocal();
-
     private final KeyValuePair[] additionalFields;
     private final int compressionThreshold;
     private final CompressionType compressionType;
@@ -188,7 +186,7 @@ public byte[] toByteArray(final LogEvent event) {
 
     @Override
     public String toSerializable(final LogEvent event) {
-        final StringBuilder builder = prepareStringBuilder(strBuilder);
+        final StringBuilder builder = getStringBuilder();
         final JsonStringEncoder jsonEncoder = JsonStringEncoder.getInstance();
         builder.append('{');
         builder.append("\"version\":\"1.1\",");

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java
Patch:
@@ -61,8 +61,6 @@ public final class HtmlLayout extends AbstractStringLayout {
     private static final String DEFAULT_TITLE = "Log4j Log Messages";
     private static final String DEFAULT_CONTENT_TYPE = "text/html";
 
-    private static ThreadLocal<StringBuilder> strBuilder = newStringBuilderThreadLocal();
-
     private final long jvmStartTime = ManagementFactory.getRuntimeMXBean().getStartTime();
     
     // Print no location info by default
@@ -128,7 +126,7 @@ private String addCharsetToContentType(final String contentType) {
      */
     @Override
     public String toSerializable(final LogEvent event) {
-        final StringBuilder sbuf = prepareStringBuilder(strBuilder);
+        final StringBuilder sbuf = getStringBuilder();
 
         sbuf.append(Constants.LINE_SEPARATOR).append("<tr>").append(Constants.LINE_SEPARATOR);
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/SyslogLayout.java
Patch:
@@ -50,8 +50,6 @@ public final class SyslogLayout extends AbstractStringLayout {
 
     private static final long serialVersionUID = 1L;
 
-    private static ThreadLocal<StringBuilder> strBuilder = newStringBuilderThreadLocal();
-
     private final Facility facility;
     private final boolean includeNewLine;
     private final String escapeNewLine;
@@ -80,7 +78,7 @@ protected SyslogLayout(final Facility facility, final boolean includeNL, final S
      */
     @Override
     public String toSerializable(final LogEvent event) {
-        final StringBuilder buf = prepareStringBuilder(strBuilder);
+        final StringBuilder buf = getStringBuilder();
 
         buf.append('<');
         buf.append(Priority.getPriority(facility, event.getLevel()));

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MarkerPatternConverter.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 
 /**
- * Returns the event's rendered message in a StringBuilder.
+ * Returns events' full maker string in a StringBuilder.
  */
 @Plugin(name = "MarkerPatternConverter", category = PatternConverter.CATEGORY)
 @ConverterKeys({ "marker" })

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/ListOfMapEntrySerializer.java
Patch:
@@ -34,6 +34,8 @@
 @SuppressWarnings("rawtypes")
 public class ListOfMapEntrySerializer extends StdSerializer<Map> {
 
+    private static final long serialVersionUID = 1L;
+
     protected ListOfMapEntrySerializer() {
         super(Map.class);
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/MessageSerializer.java
Patch:
@@ -32,6 +32,8 @@
  */
 final class MessageSerializer extends StdScalarSerializer<Message> {
 
+    private static final long serialVersionUID = 1L;
+
     MessageSerializer() {
         super(Message.class);
     }

File: log4j-core/src/test/java/org/apache/logging/log4j/test/layout/BasicLayout.java
Patch:
@@ -31,6 +31,7 @@
 @Plugin(name = "BasicLayout", category = "Core", elementType = "layout", printObject = true)
 public class BasicLayout extends AbstractStringLayout {
 
+    private static final long serialVersionUID = 1L;
     private static final String HEADER = "Header" + Constants.LINE_SEPARATOR;
 
     @Override

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerHeaderFooterTest.java
Patch:
@@ -48,7 +48,7 @@ public class RollingRandomAccessFileManagerHeaderFooterTest {
 
     @Before
     public void setUp() throws Exception {
-        this.logger = this.init.getLogger(RollingRandomAccessFileManagerHeaderFooterTest.class.getName());
+        this.logger = init.getLogger(RollingRandomAccessFileManagerHeaderFooterTest.class.getName());
         deleteDir();
     }
 

File: log4j-core/src/test/java/org/apache/logging/log4j/test/appender/DeadlockAppender.java
Patch:
@@ -31,6 +31,8 @@
 @Plugin(name="Deadlock", category ="Core",elementType="appender",printObject=true)
 public class DeadlockAppender extends AbstractAppender {
 
+    private static final long serialVersionUID = 1L;
+
     private WorkerThread thread = null;
 
     private DeadlockAppender(final String name) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java
Patch:
@@ -433,7 +433,7 @@ protected void doConfigure() {
                 if (app != null) {
                     l.addAppender(app, ref.getLevel(), ref.getFilter());
                 } else {
-                    LOGGER.error("Unable to locate appender {} for logger {}", ref.getRef(), l.getName());
+                    LOGGER.error("Unable to locate appender \"{}\" for logger \"{}\"", ref.getRef(), l.getName());
                 }
             }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java
Patch:
@@ -425,7 +425,7 @@ protected void doConfigure() {
                 if (app != null) {
                     l.addAppender(app, ref.getLevel(), ref.getFilter());
                 } else {
-                    LOGGER.error("Unable to locate appender {} for logger {}", ref.getRef(), l.getName());
+                    LOGGER.error("Unable to locate appender \"{}\" for logger \"{}\"", ref.getRef(), l.getName());
                 }
             }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java
Patch:
@@ -239,7 +239,7 @@ public void setup() {
         constructHierarchy(rootNode, rootElement);
         if (status.size() > 0) {
             for (final Status s : status) {
-                LOGGER.error("Error processing element {}: {}", s.name, s.errorType);
+                LOGGER.error("Error processing element {} ({}): {}", s.name, s.element, s.errorType);
             }
             return;
         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java
Patch:
@@ -27,6 +27,7 @@
 public abstract class AbstractStringLayout extends AbstractLayout<String> {
 
     private static final long serialVersionUID = 1L;
+    protected static final int DEFAULT_STRING_BUILDER_SIZE = 1024;
 
     /**
      * Converts a String to a byte[].

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java
Patch:
@@ -89,7 +89,7 @@ public final class PatternLayout extends AbstractStringLayout {
     private static ThreadLocal<StringBuilder> strBuilder = new ThreadLocal<StringBuilder>() {
         @Override
         protected StringBuilder initialValue() {
-            return new StringBuilder(1024);
+            return new StringBuilder(DEFAULT_STRING_BUILDER_SIZE);
         }        
     };
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java
Patch:
@@ -191,7 +191,6 @@ public Map<String, String> getContentFormat()
     /**
      * Formats a logging event to a writer.
      *
-     *
      * @param event logging event to be formatted.
      * @return The event formatted as a String.
      */

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/jeromq/JeroMqAppender.java
Patch:
@@ -106,7 +106,7 @@ public static JeroMqAppender createAppender(
             // @formatter:off
             @Required(message = "No name provided for JeroMqAppender") @PluginAttribute("name") final String name,
             @PluginElement("Layout") Layout<?> layout,
-            @PluginElement("Filters") final Filter filter,
+            @PluginElement("Filter") final Filter filter,
             @PluginElement("Properties") final Property[] properties,
             // Super attributes
             @PluginAttribute("ignoreExceptions") final boolean ignoreExceptions,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/AwaitCompletionReliabilityStrategy.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.logging.log4j.core.config;
 
+import java.util.Objects;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -43,7 +44,7 @@ public class AwaitCompletionReliabilityStrategy implements ReliabilityStrategy {
     private final LoggerConfig loggerConfig;
 
     public AwaitCompletionReliabilityStrategy(final LoggerConfig loggerConfig) {
-        this.loggerConfig = loggerConfig;
+        this.loggerConfig = Objects.requireNonNull(loggerConfig, "loggerConfig is null");
     }
 
     /* (non-Javadoc)

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java
Patch:
@@ -229,13 +229,13 @@ public Map<String, Appender> getAppenders() {
      */
     protected void clearAppenders() {
         waitForCompletion();
-        List<AppenderControl> copy = new ArrayList<AppenderControl>(appenders);
+        List<AppenderControl> copy = new ArrayList<>(appenders);
         while (!copy.isEmpty()) {
             appenders.removeAll(copy);
             for (final AppenderControl ctl : copy) {
                 cleanupFilter(ctl);
             }
-            copy = new ArrayList<AppenderControl>(appenders);
+            copy = new ArrayList<>(appenders);
         }
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java
Patch:
@@ -313,7 +313,6 @@ public Object parseObject(final String source, final ParsePosition pos) {
      * given by {@link ParsePosition#getIndex()} has been updated. If the input buffer has been fully
      * parsed, then the index will point to just after the end of the input buffer.
      *
-     * @see org.apache.commons.lang3.time.DateParser#parse(java.lang.String, java.text.ParsePosition)
      * {@inheritDoc}
      */
     @Override

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/Configurator.java
Patch:
@@ -201,7 +201,7 @@ public static LoggerContext initialize(final ClassLoader loader, Configuration c
     }
 
     /**
-     * Sets the levels of <code>parentLogger</code> and all 'child' loggers to the given <code>level</level>.
+     * Sets the levels of <code>parentLogger</code> and all 'child' loggers to the given <code>level</code>.
      * @param parentLogger the parent logger
      * @param level the new level
      */

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/api/Component.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Container for building Configurations. This class is not normally directly manipulated by users
  * of the Assembler API.
- * @Since 2.4
+ * @since 2.4
  */
 public class Component {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java
Patch:
@@ -261,7 +261,7 @@ public ConfigurationBuilder<T> setConfigurationName(final String name) {
     /**
      * Set the ConfigurationSource.
      *
-     * @param configurationSource the {@link ConfigurationSource).}
+     * @param configurationSource the {@link ConfigurationSource}
      * @return this builder instance
      */
     @Override

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/DatePrinter.java
Patch:
@@ -116,7 +116,7 @@ public interface DatePrinter {
      * <p>Formats a {@code Date}, {@code Calendar} or
      * {@code Long} (milliseconds) object.</p>
      * 
-     * See {@link java.text.DateFormat#format(Object, StringBuilder, FieldPosition)}
+     * See {@link java.text.DateFormat#format(Object, StringBuffer, FieldPosition)}
      * 
      * @param obj  the object to format
      * @param toAppendTo  the buffer to append to

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java
Patch:
@@ -103,7 +103,7 @@ protected FastDateParser(final String pattern, final TimeZone timeZone, final Lo
      * @param locale non-null locale
      * @param centuryStart The start of the century for 2 digit year parsing
      * @param lenient if true, non-standard values for Calendar fields should be accepted;
-     * if false, non-standard values will cause a ParseException to be thrown {@link CalendaretLenient(boolean)}
+     * if false, non-standard values will cause a ParseException to be thrown {@link Calendar#setLenient(boolean)}
      *
      * @since 3.5
      */

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginRegistry.java
Patch:
@@ -238,7 +238,6 @@ public Map<String, List<PluginType<?>>> loadFromPackage(final String pkg) {
             mainEntry.setClassName(clazz.getName());
             mainEntry.setPrintable(plugin.printObject());
             mainEntry.setDefer(plugin.deferChildren());
-            @SuppressWarnings({"unchecked","rawtypes"})
             final PluginType<?> mainType = new PluginType<>(mainEntry, clazz, mainElementName);
             list.add(mainType);
             final PluginAliases pluginAliases = clazz.getAnnotation(PluginAliases.class);
@@ -253,7 +252,6 @@ public Map<String, List<PluginType<?>>> loadFromPackage(final String pkg) {
                     aliasEntry.setClassName(clazz.getName());
                     aliasEntry.setPrintable(plugin.printObject());
                     aliasEntry.setDefer(plugin.deferChildren());
-                    @SuppressWarnings({"unchecked","rawtypes"})
                     final PluginType<?> aliasType = new PluginType<>(aliasEntry, clazz, aliasElementName);
                     list.add(aliasType);
                 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginRegistry.java
Patch:
@@ -180,7 +180,7 @@ private Map<String, List<PluginType<?>>> decodeCacheFiles(final ClassLoader load
                 try {
                     final Class<?> clazz = loader.loadClass(className);
                     @SuppressWarnings({"unchecked","rawtypes"})
-                    final PluginType<?> type = new PluginType(entry, clazz, entry.getName());
+                    final PluginType<?> type = new PluginType<>(entry, clazz, entry.getName());
                     types.add(type);
                     ++pluginCount;
                 } catch (final ClassNotFoundException e) {
@@ -239,7 +239,7 @@ public Map<String, List<PluginType<?>>> loadFromPackage(final String pkg) {
             mainEntry.setPrintable(plugin.printObject());
             mainEntry.setDefer(plugin.deferChildren());
             @SuppressWarnings({"unchecked","rawtypes"})
-            final PluginType<?> mainType = new PluginType(mainEntry, clazz, mainElementName);
+            final PluginType<?> mainType = new PluginType<>(mainEntry, clazz, mainElementName);
             list.add(mainType);
             final PluginAliases pluginAliases = clazz.getAnnotation(PluginAliases.class);
             if (pluginAliases != null) {
@@ -254,7 +254,7 @@ public Map<String, List<PluginType<?>>> loadFromPackage(final String pkg) {
                     aliasEntry.setPrintable(plugin.printObject());
                     aliasEntry.setDefer(plugin.deferChildren());
                     @SuppressWarnings({"unchecked","rawtypes"})
-                    final PluginType<?> aliasType = new PluginType(aliasEntry, clazz, aliasElementName);
+                    final PluginType<?> aliasType = new PluginType<>(aliasEntry, clazz, aliasElementName);
                     list.add(aliasType);
                 }
             }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/LoggerTest.java
Patch:
@@ -351,7 +351,7 @@ public void testReconfiguration() throws Exception {
         }
         Thread.sleep(100);
         for (int i = 0; i < 20; i++) {
-            if (context.getConfiguration() == oldConfig) {
+            if (context.getConfiguration() != oldConfig) {
                 break;
             }
             Thread.sleep(50);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java
Patch:
@@ -113,7 +113,7 @@ static ThreadNameStrategy create() {
         }
     }
     private static volatile Disruptor<RingBufferLogEvent> disruptor;
-    private static final Clock clock = ClockFactory.getClock();
+    private static final Clock CLOCK = ClockFactory.getClock();
     private static volatile NanoClock nanoClock = new DummyNanoClock();
 
     private static final ExecutorService executor = Executors
@@ -344,7 +344,7 @@ private void initLogMessageInfo(Info info, final String fqcn, final Level level,
 
     private long eventTimeMillis(final Message message) {
         return message instanceof TimestampMessage ? ((TimestampMessage) message).getTimestamp() :
-                clock.currentTimeMillis();
+                CLOCK.currentTimeMillis();
     }
 
     /**

File: log4j-core/src/test/java/org/apache/logging/log4j/core/util/ClockFactoryTest.java
Patch:
@@ -35,7 +35,7 @@ public static void resetClocks() throws IllegalAccessException {
 
     public static void resetClock(final Class<?> clazz) throws IllegalAccessException {
         System.clearProperty(ClockFactory.PROPERTY_NAME);
-        final Field field = FieldUtils.getField(clazz, "clock", true);
+        final Field field = FieldUtils.getField(clazz, "CLOCK", true);
         FieldUtils.removeFinalModifier(field, true);
         FieldUtils.writeStaticField(field, ClockFactory.getClock(), false);
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.log4j.core.util.datetime;
 
+import java.io.Serializable;
 import java.text.DateFormat;
 import java.text.FieldPosition;
 import java.text.ParseException;
@@ -28,7 +29,7 @@
 /**
  * This is a copy of Commons Lang's Fast Date Formatter.
  */
-public class FastDateFormat extends Format implements DatePrinter, DateParser {
+public class FastDateFormat extends Format implements DatePrinter, DateParser, Serializable {
     /**
      * Required for serialization support.
      *

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FailoverAppender.java
Patch:
@@ -130,7 +130,7 @@ private void callAppender(final LogEvent event) {
 
     private void failover(final LogEvent event, final Exception ex) {
         final RuntimeException re = ex != null ?
-                (ex instanceof LoggingException ? (LoggingException)ex : new LoggingException(ex)) : null;
+                (ex instanceof LoggingException ? (LoggingException) ex : new LoggingException(ex)) : null;
         boolean written = false;
         Exception failoverException = null;
         for (final AppenderControl control : failoverAppenders) {

File: log4j-api/src/test/java/org/apache/logging/log4j/LambdaLoggerTest.java
Patch:
@@ -56,7 +56,7 @@ private static class Logger2Impl extends AbstractLogger {
         private static final long serialVersionUID = 1L;
 
         boolean enabled = true;
-        final List<LambdaLoggerTest.LogEvent> list = new ArrayList<LambdaLoggerTest.LogEvent>();
+        final List<LambdaLoggerTest.LogEvent> list = new ArrayList<>();
 
         @Override
         public boolean isEnabled(final Level level, final Marker marker, final Message message, final Throwable t) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultAppenderComponentBuilder.java
Patch:
@@ -24,8 +24,8 @@
 /**
  * Holds the Appender Component attributes and subcomponents.
  */
-class DefaultAppenderComponentBuilder extends DefaultComponentBuilder<AppenderComponentBuilder> implements
-        AppenderComponentBuilder {
+class DefaultAppenderComponentBuilder extends DefaultComponentAndConfigurationBuilder<AppenderComponentBuilder>
+        implements AppenderComponentBuilder {
 
     public DefaultAppenderComponentBuilder(DefaultConfigurationBuilder<? extends Configuration> builder, String name,
             String type) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultAppenderRefComponentBuilder.java
Patch:
@@ -23,8 +23,8 @@
 /**
  * Holds the Appender Component attributes and subcomponents.
  */
-class DefaultAppenderRefComponentBuilder extends DefaultComponentBuilder<AppenderRefComponentBuilder> implements
-        AppenderRefComponentBuilder {
+class DefaultAppenderRefComponentBuilder extends DefaultComponentAndConfigurationBuilder<AppenderRefComponentBuilder>
+        implements AppenderRefComponentBuilder {
 
     public DefaultAppenderRefComponentBuilder(DefaultConfigurationBuilder<? extends Configuration> builder,
             String ref) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultCompositeFilterComponentBuilder.java
Patch:
@@ -23,8 +23,9 @@
 /**
  *
  */
-class DefaultCompositeFilterComponentBuilder extends DefaultComponentBuilder<CompositeFilterComponentBuilder> implements
-        CompositeFilterComponentBuilder {
+class DefaultCompositeFilterComponentBuilder
+        extends DefaultComponentAndConfigurationBuilder<CompositeFilterComponentBuilder>
+        implements CompositeFilterComponentBuilder {
 
     public DefaultCompositeFilterComponentBuilder(DefaultConfigurationBuilder<? extends Configuration> builder,
             String onMatch, String onMisMatch) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultCustomLevelComponentBuilder.java
Patch:
@@ -22,8 +22,8 @@
 /**
  *
  */
-class DefaultCustomLevelComponentBuilder extends DefaultComponentBuilder<CustomLevelComponentBuilder> implements
-        CustomLevelComponentBuilder {
+class DefaultCustomLevelComponentBuilder extends DefaultComponentAndConfigurationBuilder<CustomLevelComponentBuilder>
+        implements CustomLevelComponentBuilder {
 
     public DefaultCustomLevelComponentBuilder(DefaultConfigurationBuilder<? extends Configuration> builder,
             String name, int level) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultFilterComponentBuilder.java
Patch:
@@ -22,8 +22,8 @@
 /**
  *
  */
-class DefaultFilterComponentBuilder extends DefaultComponentBuilder<FilterComponentBuilder> implements
-        FilterComponentBuilder {
+class DefaultFilterComponentBuilder extends DefaultComponentAndConfigurationBuilder<FilterComponentBuilder>
+        implements FilterComponentBuilder {
 
     public DefaultFilterComponentBuilder(DefaultConfigurationBuilder<? extends Configuration> builder, String type,
             String onMatch, String onMisMatch) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultLayoutComponentBuilder.java
Patch:
@@ -22,8 +22,8 @@
 /**
  *
  */
-class DefaultLayoutComponentBuilder extends DefaultComponentBuilder<LayoutComponentBuilder> implements
-        LayoutComponentBuilder {
+class DefaultLayoutComponentBuilder extends DefaultComponentAndConfigurationBuilder<LayoutComponentBuilder>
+        implements LayoutComponentBuilder {
 
     public DefaultLayoutComponentBuilder(DefaultConfigurationBuilder<? extends Configuration> builder, String type) {
         super(builder, type);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultLoggerComponentBuilder.java
Patch:
@@ -24,8 +24,8 @@
 /**
  *
  */
-class DefaultLoggerComponentBuilder extends DefaultComponentBuilder<LoggerComponentBuilder> implements
-        LoggerComponentBuilder {
+class DefaultLoggerComponentBuilder extends DefaultComponentAndConfigurationBuilder<LoggerComponentBuilder>
+        implements LoggerComponentBuilder {
 
     /**
      * Configure a logger.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultRootLoggerComponentBuilder.java
Patch:
@@ -24,8 +24,8 @@
 /**
  *
  */
-class DefaultRootLoggerComponentBuilder extends DefaultComponentBuilder<RootLoggerComponentBuilder> implements
-        RootLoggerComponentBuilder {
+class DefaultRootLoggerComponentBuilder extends DefaultComponentAndConfigurationBuilder<RootLoggerComponentBuilder>
+        implements RootLoggerComponentBuilder {
 
     /**
      * Configure the root logger.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/api/ConfigurationBuilder.java
Patch:
@@ -121,7 +121,7 @@ public interface ConfigurationBuilder<T extends Configuration> extends Builder<T
      * @param pluginName The Plugin type of the component.
      * @return The ComponentBuilder.
      */
-    ComponentBuilder<?> newComponent(String name, String pluginName);
+    <B extends ComponentBuilder<B>> ComponentBuilder<B> newComponent(String name, String pluginName);
 
     /**
      * Returns a builder for creating generic components.
@@ -130,7 +130,7 @@ public interface ConfigurationBuilder<T extends Configuration> extends Builder<T
      * @param value The value of the component.
      * @return The ComponentBuilder.
      */
-    ComponentBuilder<?> newComponent(String name, String pluginName, String value);
+    <B extends ComponentBuilder<B>> ComponentBuilder<B> newComponent(String name, String pluginName, String value);
 
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationFactory.java
Patch:
@@ -313,7 +313,7 @@ private LayoutComponentBuilder createLayout(ConfigurationBuilder<PropertiesConfi
         return layoutBuilder;
     }
 
-    private ComponentBuilder<?> createComponent(ComponentBuilder<?> parent, String key, Properties properties) {
+    private <B extends ComponentBuilder<B>> ComponentBuilder<B> createComponent(ComponentBuilder<?> parent, String key, Properties properties) {
         String name = properties.getProperty(CONFIG_NAME);
         if (name != null) {
             properties.remove(CONFIG_NAME);
@@ -323,7 +323,7 @@ private ComponentBuilder<?> createComponent(ComponentBuilder<?> parent, String k
             throw new ConfigurationException("No type attribute provided for component " + key);
         }
         properties.remove(CONFIG_TYPE);
-        ComponentBuilder<?> componentBuilder = parent.getBuilder().newComponent(name, type);
+        ComponentBuilder<B> componentBuilder = parent.getBuilder().newComponent(name, type);
         processRemainingProperties(componentBuilder, name, properties);
         return componentBuilder;
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/api/ConfigurationBuilder.java
Patch:
@@ -142,8 +142,7 @@ public interface ConfigurationBuilder<T extends Configuration> extends Builder<T
      * @param pluginName The Plugin type of the component.
      * @return The ComponentBuilder.
      */
-    @SuppressWarnings("rawtypes")
-    ComponentBuilder newComponent(String name, String pluginName);
+    ComponentBuilder<?> newComponent(String name, String pluginName);
 
     /**
      * Returns an Assembler for creating generic components.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationFactory.java
Patch:
@@ -329,7 +329,7 @@ private ComponentBuilder<?> createComponent(ComponentBuilder<?> parent, String k
     }
 
     @SuppressWarnings({"unchecked", "rawtypes"})
-    private void processRemainingProperties(ComponentBuilder builder, String name, Properties properties) {
+    private void processRemainingProperties(ComponentBuilder<?> builder, String name, Properties properties) {
         while (properties.size() > 0) {
             String propertyName = properties.stringPropertyNames().iterator().next();
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationFactory.java
Patch:
@@ -313,8 +313,7 @@ private LayoutComponentBuilder createLayout(ConfigurationBuilder<PropertiesConfi
         return layoutAssembler;
     }
 
-    @SuppressWarnings("rawtypes")
-    private ComponentBuilder<?> createComponent(ComponentBuilder parent, String key, Properties properties) {
+    private ComponentBuilder<?> createComponent(ComponentBuilder<?> parent, String key, Properties properties) {
         String name = properties.getProperty(CONFIG_NAME);
         if (name != null) {
             properties.remove(CONFIG_NAME);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java
Patch:
@@ -207,8 +207,7 @@ public AppenderRefComponentBuilder newAppenderRef(String ref) {
 
 
     @Override
-    @SuppressWarnings({"unchecked", "rawtypes"})
-    public ComponentBuilder<ComponentBuilder> newComponent(String name, String type) {
+    public ComponentBuilder<ComponentBuilder<?>> newComponent(String name, String type) {
         return new DefaultComponentBuilder<>(this, name, type);
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/api/ConfigurationBuilderFactory.java
Patch:
@@ -34,6 +34,6 @@ public static ConfigurationBuilder<AssembledConfiguration> newConfigurationBuild
     }
 
     public static <T extends AssembledConfiguration> ConfigurationBuilder<T> newConfigurationBuilder(Class<T> clazz) {
-        return new DefaultConfigurationBuilder<T>(clazz);
+        return new DefaultConfigurationBuilder<>(clazz);
     }
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultAppenderComponentBuilder.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Holds the Appender Component attributes and subcomponents.
  */
-public class DefaultAppenderComponentBuilder extends DefaultComponentBuilder<AppenderComponentBuilder> implements
+class DefaultAppenderComponentBuilder extends DefaultComponentBuilder<AppenderComponentBuilder> implements
         AppenderComponentBuilder {
 
     public DefaultAppenderComponentBuilder(DefaultConfigurationBuilder<? extends Configuration> assembler, String name,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultAppenderRefComponentBuilder.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Holds the Appender Component attributes and subcomponents.
  */
-public class DefaultAppenderRefComponentBuilder extends DefaultComponentBuilder<AppenderRefComponentBuilder> implements
+class DefaultAppenderRefComponentBuilder extends DefaultComponentBuilder<AppenderRefComponentBuilder> implements
         AppenderRefComponentBuilder {
 
     public DefaultAppenderRefComponentBuilder(DefaultConfigurationBuilder<? extends Configuration> assembler,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultComponentBuilder.java
Patch:
@@ -32,7 +32,7 @@
  * Component.
  */
 @SuppressWarnings("rawtypes")
-public class DefaultComponentBuilder<T extends ComponentBuilder> implements ComponentBuilder<T> {
+class DefaultComponentBuilder<T extends ComponentBuilder> implements ComponentBuilder<T> {
 
     private ConfigurationBuilder<? extends Configuration> assembler;
     private String type;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultCompositeFilterComponentBuilder.java
Patch:
@@ -23,7 +23,7 @@
 /**
  *
  */
-public class DefaultCompositeFilterComponentBuilder extends DefaultComponentBuilder<CompositeFilterComponentBuilder> implements
+class DefaultCompositeFilterComponentBuilder extends DefaultComponentBuilder<CompositeFilterComponentBuilder> implements
         CompositeFilterComponentBuilder {
 
     public DefaultCompositeFilterComponentBuilder(DefaultConfigurationBuilder<? extends Configuration> assembler,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultCustomLevelComponentBuilder.java
Patch:
@@ -22,7 +22,7 @@
 /**
  *
  */
-public class DefaultCustomLevelComponentBuilder extends DefaultComponentBuilder<CustomLevelComponentBuilder> implements
+class DefaultCustomLevelComponentBuilder extends DefaultComponentBuilder<CustomLevelComponentBuilder> implements
         CustomLevelComponentBuilder {
 
     public DefaultCustomLevelComponentBuilder(DefaultConfigurationBuilder<? extends Configuration> assembler,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultFilterComponentBuilder.java
Patch:
@@ -22,7 +22,7 @@
 /**
  *
  */
-public class DefaultFilterComponentBuilder extends DefaultComponentBuilder<FilterComponentBuilder> implements
+class DefaultFilterComponentBuilder extends DefaultComponentBuilder<FilterComponentBuilder> implements
         FilterComponentBuilder {
 
     public DefaultFilterComponentBuilder(DefaultConfigurationBuilder<? extends Configuration> assembler, String type,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultLayoutComponentBuilder.java
Patch:
@@ -22,7 +22,7 @@
 /**
  *
  */
-public class DefaultLayoutComponentBuilder extends DefaultComponentBuilder<LayoutComponentBuilder> implements
+class DefaultLayoutComponentBuilder extends DefaultComponentBuilder<LayoutComponentBuilder> implements
         LayoutComponentBuilder {
 
     public DefaultLayoutComponentBuilder(DefaultConfigurationBuilder<? extends Configuration> assembler, String type) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultLoggerComponentBuilder.java
Patch:
@@ -24,7 +24,7 @@
 /**
  *
  */
-public class DefaultLoggerComponentBuilder extends DefaultComponentBuilder<LoggerComponentBuilder> implements
+class DefaultLoggerComponentBuilder extends DefaultComponentBuilder<LoggerComponentBuilder> implements
         LoggerComponentBuilder {
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java
Patch:
@@ -40,8 +40,6 @@
  */
 public class DefaultConfigurationBuilder<T extends AssembledConfiguration> implements ConfigurationBuilder<T> {
 
-    private AssembledConfiguration configuration;
-
     private final Component root = new Component();
     private Component loggers;
     private Component appenders;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java
Patch:
@@ -211,13 +211,13 @@ public AppenderRefComponentBuilder newAppenderRef(String ref) {
     @Override
     @SuppressWarnings({"unchecked", "rawtypes"})
     public ComponentBuilder<ComponentBuilder> newComponent(String name, String type) {
-        return new DefaultComponentBuilder(this, name, type);
+        return new DefaultComponentBuilder<>(this, name, type);
     }
 
     @Override
     @SuppressWarnings({"unchecked", "rawtypes"})
     public ComponentBuilder<ComponentBuilder> newComponent(String name, String type, String value) {
-        return new DefaultComponentBuilder(this, name, type, value);
+        return new DefaultComponentBuilder<>(this, name, type, value);
     }
 
     @Override

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/assembler/api/ConfigurationAssemblerFactory.java
Patch:
@@ -34,6 +34,6 @@ public static ConfigurationAssembler<AssembledConfiguration> newConfiguration()
     }
 
     public static <T extends AssembledConfiguration> ConfigurationAssembler<T> newConfiguration(Class<T> clazz) {
-        return new DefaultConfigurationAssembler<T>(clazz);
+        return new DefaultConfigurationAssembler<>(clazz);
     }
 }

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/LoggerContext.java
Patch:
@@ -30,14 +30,14 @@ public interface LoggerContext {
     Object getExternalContext();
 
     /**
-     * Returns a Logger.
+     * Returns an ExtendedLogger.
      * @param name The name of the Logger to return.
      * @return The logger with the specified name.
      */
     ExtendedLogger getLogger(String name);
 
     /**
-     * Returns a Logger.
+     * Returns an ExtendedLogger.
      * @param name The name of the Logger to return.
      * @param messageFactory The message factory is used only when creating a logger, subsequent use does not change
      *                       the logger but will log a warning if mismatched.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingFileAppender.java
Patch:
@@ -108,7 +108,7 @@ public String getFilePattern() {
      * Returns the triggering policy
      * @return The TriggeringPolicy
      */
-    public TriggeringPolicy getTriggeringPolicy() {
+    public <T extends TriggeringPolicy> T getTriggeringPolicy() {
         return getManager().getTriggeringPolicy();
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java
Patch:
@@ -139,8 +139,9 @@ public PatternProcessor getPatternProcessor() {
      * Returns the triggering policy
      * @return The TriggeringPolicy
      */
-    public TriggeringPolicy getTriggeringPolicy() {
-        return this.triggeringPolicy;
+    public <T extends TriggeringPolicy> T getTriggeringPolicy() {
+        // TODO We could parameterize this class with a TriggeringPolicy instead of type casting here. 
+        return (T) this.triggeringPolicy;
     }
 
     /**

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/AbstractLog4j2_1100Test.java
Patch:
@@ -43,8 +43,7 @@ public void test() {
         assertNotNull(configuration);
         final RollingFileAppender appender = configuration.getAppender("File");
         assertNotNull(appender);
-        final CompositeTriggeringPolicy compositeTriggeringPolicy = (CompositeTriggeringPolicy) appender
-                .getTriggeringPolicy();
+        final CompositeTriggeringPolicy compositeTriggeringPolicy = appender.getTriggeringPolicy();
         assertNotNull(compositeTriggeringPolicy);
         final TriggeringPolicy[] triggeringPolicies = compositeTriggeringPolicy.getTriggeringPolicies();
         SizeBasedTriggeringPolicy sizeBasedTriggeringPolicy = null;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/Configuration.java
Patch:
@@ -58,7 +58,7 @@ public interface Configuration extends Filterable {
      * @param name The name of the Appender.
      * @return the Appender with the specified name or null if the Appender cannot be located.
      */
-    Appender getAppender(String name);
+    <T extends Appender> T getAppender(String name);
 
     /**
      * Returns a Map containing all the Appenders and their name.

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/AbstractLog4j2_1100Test.java
Patch:
@@ -41,7 +41,7 @@ public abstract class AbstractLog4j2_1100Test {
     public void test() {
         final Configuration configuration = context.getConfiguration();
         assertNotNull(configuration);
-        final RollingFileAppender appender = (RollingFileAppender) configuration.getAppender("File");
+        final RollingFileAppender appender = configuration.getAppender("File");
         assertNotNull(appender);
         final CompositeTriggeringPolicy compositeTriggeringPolicy = (CompositeTriggeringPolicy) appender
                 .getTriggeringPolicy();

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/LoggerAdapter.java
Patch:
@@ -23,16 +23,16 @@
  * Logger classes. This registry should not be used for Log4j Loggers; it is instead used for creating bridges to
  * other external log systems.
  *
- * @param <T> the external logger class for this registry (e.g., {@code org.slf4j.Logger})
+ * @param <L> the external logger class for this registry (e.g., {@code org.slf4j.Logger})
  * @since 2.1
  */
-public interface LoggerAdapter<T> extends Closeable {
+public interface LoggerAdapter<L> extends Closeable {
 
     /**
      * Gets a named logger. Implementations should defer to the abstract methods in {@link AbstractLoggerAdapter}.
      *
      * @param name the name of the logger to get
      * @return the named logger
      */
-    T getLogger(String name);
+    L getLogger(String name);
 }

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/LoggerAdapter.java
Patch:
@@ -23,16 +23,16 @@
  * Logger classes. This registry should not be used for Log4j Loggers; it is instead used for creating bridges to
  * other external log systems.
  *
- * @param <L> the external logger class for this registry (e.g., {@code org.slf4j.Logger})
+ * @param <T> the external logger class for this registry (e.g., {@code org.slf4j.Logger})
  * @since 2.1
  */
-public interface LoggerAdapter<L> extends Closeable {
+public interface LoggerAdapter<T> extends Closeable {
 
     /**
      * Gets a named logger. Implementations should defer to the abstract methods in {@link AbstractLoggerAdapter}.
      *
      * @param name the name of the logger to get
      * @return the named logger
      */
-    L getLogger(String name);
+    T getLogger(String name);
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java
Patch:
@@ -196,7 +196,7 @@ public Map<String, String> getContentFormat()
      */
     @Override
     public String toSerializable(final LogEvent event) {
-        final StringBuilder buf = new StringBuilder();
+        final StringBuilder buf = new StringBuilder(1024);
         for (final PatternFormatter formatter : formatters) {
             formatter.format(event, buf);
         }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/pattern/PatternParserTest.java
Patch:
@@ -111,7 +111,7 @@ public void testCustomPattern() {
             formatter.format(event, buf);
         }
         final String str = buf.toString();
-        final String expected = "INFO  [PatternParserTest        :98  ] - Hello, world" + Constants.LINE_SEPARATOR;
+        final String expected = "INFO  [PatternParserTest        :97  ] - Hello, world" + Constants.LINE_SEPARATOR;
         assertTrue("Expected to end with: " + expected + ". Actual: " + str, str.endsWith(expected));
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
Patch:
@@ -66,7 +66,7 @@
  * </ol>
  *
  * If the ConfigurationFactory that was added returns null on a call to
- * getConfiguration the any other ConfigurationFactories found as plugins will
+ * getConfiguration then any other ConfigurationFactories found as plugins will
  * be called in their respective order. DefaultConfiguration is always called
  * last if no configuration has been returned.
  */

File: log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/VarargsBenchmark.java
Patch:
@@ -32,10 +32,10 @@
 // ============================== HOW TO RUN THIS TEST: ====================================
 //
 // single thread:
-// java -jar log4j-perf/target/benchmarks.jar ".*Nanotime.*" -f 1 -wi 5 -i 5
+// java -jar log4j-perf/target/benchmarks.jar ".*Varargs.*" -f 1 -wi 5 -i 10
 //
 // multiple threads (for example, 4 threads):
-// java -jar log4j-perf/target/benchmarks.jar ".*Nanotime.*" -f 1 -wi 5 -i 5 -t 4 -si true
+// java -jar log4j-perf/target/benchmarks.jar ".*Varargs.*" -f 1 -wi 5 -i 10 -t 4 -si true
 //
 // Usage help:
 // java -jar log4j-perf/target/benchmarks.jar -help

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderTest.java
Patch:
@@ -55,7 +55,7 @@ public class FileAppenderTest {
 
     @AfterClass
     public static void cleanupClass() {
-        assertTrue("Manager for " + FILENAME + " not removed", !OutputStreamManager.hasManager(FILENAME));
+        assertTrue("Manager for " + FILENAME + " not removed", !AbstractManager.hasManager(FILENAME));
     }
 
     @Test

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/DatePatternConverter.java
Patch:
@@ -229,7 +229,7 @@ private DatePatternConverter(final String[] options) {
             try {
                 tempFormat = FastDateFormat.getInstance(pattern, tz);
             } catch (final IllegalArgumentException e) {
-                LOGGER.warn("Could not instantiate SimpleDateFormat with pattern " + patternOption, e);
+                LOGGER.warn("Could not instantiate FastDateFormat with pattern " + patternOption, e);
 
                 // default to the DEFAULT format
                 tempFormat = FastDateFormat.getInstance(DEFAULT_PATTERN);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/tools/Generate.java
Patch:
@@ -520,7 +520,7 @@ static String generateSource(final String classNameFQN, final List<LevelInfo> le
             sb.append(String.format(phase2, ""));
         }
 
-        sb.append("}%n");
+        sb.append(String.format("}%n", "")); // yes, does not use args to apply %n
         return sb.toString();
     }
 

File: log4j-liquibase/src/main/java/liquibase/ext/logging/log4j2/Log4j2Logger.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.logging.log4j.spi.ExtendedLogger;
 
 /**
- * Logs Liquidbase messages to Log4j 2.x.
+ * Logs Liquibase messages to Log4j 2.x.
  * <p>
  * This class must be in the {@code liquibase} package in order for the Liquibase plugin discovery mechanism to work.
  * </p>

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java
Patch:
@@ -172,7 +172,7 @@ public ThrowableProxy getThrownProxy() {
         // lazily instantiate the (expensive) ThrowableProxy
         if (thrownProxy == null) {
             if (thrown != null) {
-                thrownProxy = new ThrowableProxy(thrown, null);
+                thrownProxy = new ThrowableProxy(thrown);
             }
         }
         return this.thrownProxy;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java
Patch:
@@ -320,7 +320,7 @@ public Throwable getThrown() {
     @Override
     public ThrowableProxy getThrownProxy() {
         if (thrownProxy == null && thrown != null) {
-            thrownProxy = new ThrowableProxy(thrown, null);
+            thrownProxy = new ThrowableProxy(thrown);
         }
         return thrownProxy;
     }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java
Patch:
@@ -130,7 +130,7 @@ public void testSerializationDeserialization() throws IOException, ClassNotFound
         assertEquals(level, other.getLevel());
         assertEquals(data, other.getMessage());
         assertNull("null after serialization", other.getThrown());
-        assertEquals(new ThrowableProxy(t, null), other.getThrownProxy());
+        assertEquals(new ThrowableProxy(t), other.getThrownProxy());
         assertEquals(map, other.getContextMap());
         assertEquals(contextStack, other.getContextStack());
         assertEquals(threadName, other.getThreadName());

File: log4j-core/src/test/java/org/apache/logging/log4j/core/layout/LogEventFixtures.java
Patch:
@@ -56,7 +56,7 @@ static Log4jLogEvent createLogEvent() {
         final IOException ioException = new IOException("testIOEx", cause);
         Throwables.addSuppressed(ioException, new IndexOutOfBoundsException("I am suppressed exception 1"));
         Throwables.addSuppressed(ioException, new IndexOutOfBoundsException("I am suppressed exception 2"));
-        final ThrowableProxy throwableProxy = new ThrowableProxy(ioException, null);
+        final ThrowableProxy throwableProxy = new ThrowableProxy(ioException);
         final Map<String, String> contextMap = new HashMap<>();
         contextMap.put("MDC.A", "A_Value");
         contextMap.put("MDC.B", "B_Value");

File: log4j-core/src/test/java/org/apache/logging/log4j/core/impl/ThrowableProxyTest.java
Patch:
@@ -229,7 +229,6 @@ public void testCircularSuppressedNestedException() {
      * .
      */
     @Test
-    @Ignore
     public void testCircularCauseExceptions() {
         Exception e1 = new Exception();
         Exception e2 = new Exception(e1);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java
Patch:
@@ -172,7 +172,7 @@ public ThrowableProxy getThrownProxy() {
         // lazily instantiate the (expensive) ThrowableProxy
         if (thrownProxy == null) {
             if (thrown != null) {
-                thrownProxy = new ThrowableProxy(thrown);
+                thrownProxy = new ThrowableProxy(thrown, null);
             }
         }
         return this.thrownProxy;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java
Patch:
@@ -320,7 +320,7 @@ public Throwable getThrown() {
     @Override
     public ThrowableProxy getThrownProxy() {
         if (thrownProxy == null && thrown != null) {
-            thrownProxy = new ThrowableProxy(thrown);
+            thrownProxy = new ThrowableProxy(thrown, null);
         }
         return thrownProxy;
     }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java
Patch:
@@ -130,7 +130,7 @@ public void testSerializationDeserialization() throws IOException, ClassNotFound
         assertEquals(level, other.getLevel());
         assertEquals(data, other.getMessage());
         assertNull("null after serialization", other.getThrown());
-        assertEquals(new ThrowableProxy(t), other.getThrownProxy());
+        assertEquals(new ThrowableProxy(t, null), other.getThrownProxy());
         assertEquals(map, other.getContextMap());
         assertEquals(contextStack, other.getContextStack());
         assertEquals(threadName, other.getThreadName());

File: log4j-core/src/test/java/org/apache/logging/log4j/core/layout/LogEventFixtures.java
Patch:
@@ -56,7 +56,7 @@ static Log4jLogEvent createLogEvent() {
         final IOException ioException = new IOException("testIOEx", cause);
         Throwables.addSuppressed(ioException, new IndexOutOfBoundsException("I am suppressed exception 1"));
         Throwables.addSuppressed(ioException, new IndexOutOfBoundsException("I am suppressed exception 2"));
-        final ThrowableProxy throwableProxy = new ThrowableProxy(ioException);
+        final ThrowableProxy throwableProxy = new ThrowableProxy(ioException, null);
         final Map<String, String> contextMap = new HashMap<>();
         contextMap.put("MDC.A", "A_Value");
         contextMap.put("MDC.B", "B_Value");

File: log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/mongodb/MongoDbConnection.java
Patch:
@@ -119,8 +119,9 @@ static void authenticate(final DB database, final String username, final String
         } catch (final MongoException e) {
             LOGGER.error("Failed to authenticate against MongoDB: " + e.getMessage(), e);
         } catch (final IllegalStateException e) {
-            LOGGER.error("Factory-supplied MongoDB database connection already authenticated with different" +
-                    "credentials but lost connection.", e);
+            LOGGER.error(
+                    "Factory-supplied MongoDB database connection already authenticated with different credentials but lost connection.",
+                    e);
         }
     }
 }

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/DefaultThreadContextStack.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
-import java.util.NoSuchElementException;
 
 import org.apache.logging.log4j.ThreadContext.ContextStack;
 import org.apache.logging.log4j.util.Strings;
@@ -170,7 +169,7 @@ public Iterator<String> iterator() {
     public String peek() {
         final MutableThreadContextStack values = stack.get();
         if (values == null || values.size() == 0) {
-            return null;
+            return Strings.EMPTY;
         }
         return values.peek();
     }
@@ -182,7 +181,8 @@ public String pop() {
         }
         final MutableThreadContextStack values = stack.get();
         if (values == null || values.size() == 0) {
-            throw new NoSuchElementException("The ThreadContext stack is empty");
+            // Like version 1.2
+            return Strings.EMPTY;
         }
         final MutableThreadContextStack copy = (MutableThreadContextStack) values.copy();
         final String result = copy.pop();

File: log4j-web/src/main/java/org/apache/logging/log4j/web/Log4jWebInitializerImpl.java
Patch:
@@ -147,6 +147,7 @@ private void initializeJndi(final String location) {
     private void initializeNonJndi(final String location) {
         if (this.name == null) {
             this.name = this.servletContext.getServletContextName();
+            LOGGER.debug("Using the servlet context name \"{}\".", this.name);
         }
 
         if (this.name == null && location == null) {

File: log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jMarker.java
Patch:
@@ -75,8 +75,7 @@ public boolean hasChildren() {
     }
 
     @Override
-    @SuppressWarnings("rawtypes")
-    public Iterator iterator() {
+    public Iterator<Marker> iterator() {
         final List<Marker> parents = new ArrayList<>();
         for (final org.apache.logging.log4j.Marker m : this.marker.getParents()) {
             parents.add(factory.getMarker(m.getName()));

File: log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jMarkerFactory.java
Patch:
@@ -89,9 +89,9 @@ private static org.apache.logging.log4j.Marker convertMarker(final Marker origin
                                                                  final Collection<Marker> visited) {
         final org.apache.logging.log4j.Marker marker = MarkerManager.getMarker(original.getName());
         if (original.hasReferences()) {
-            final Iterator it = original.iterator();
+            final Iterator<Marker> it = original.iterator();
             while (it.hasNext()) {
-                final Marker next = (Marker) it.next();
+                final Marker next = it.next();
                 if (visited.contains(next)) {
                     LOGGER.warn("Found a cycle in Marker [{}]. Cycle will be broken.", next.getName());
                 } else {

File: log4j-web/src/main/java/org/apache/logging/log4j/web/Log4jWebInitializerImpl.java
Patch:
@@ -57,7 +57,7 @@ final class Log4jWebInitializerImpl extends AbstractLifeCycle implements Log4jWe
         }
     }
 
-    private final Map<String, String> map = new ConcurrentHashMap<String, String>();
+    private final Map<String, String> map = new ConcurrentHashMap<>();
     private final StrSubstitutor substitutor = new StrSubstitutor(new Interpolator(map));
     private final ServletContext servletContext;
 

File: log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContext.java
Patch:
@@ -28,7 +28,7 @@
  *
  */
 public class SLF4JLoggerContext implements LoggerContext {
-    private final ConcurrentMap<String, SLF4JLogger> loggers = new ConcurrentHashMap<String, SLF4JLogger>();
+    private final ConcurrentMap<String, SLF4JLogger> loggers = new ConcurrentHashMap<>();
 
     @Override
     public Object getExternalContext() {

File: log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/EntryTag.java
Patch:
@@ -41,7 +41,7 @@ public class EntryTag extends LoggerAwareTagSupport implements DynamicAttributes
     protected void init() {
         super.init();
         if (this.attributes == null) {
-            this.attributes = new ArrayList<Object>();
+            this.attributes = new ArrayList<>();
         } else {
             this.attributes.clear();
         }

File: log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java
Patch:
@@ -36,10 +36,10 @@ final class Log4jTaglibLoggerContext implements LoggerContext {
     // These were change to WeakHashMaps to avoid ClassLoader (memory) leak, something that's particularly
     // important in Servlet containers.
     private static final WeakHashMap<ServletContext, Log4jTaglibLoggerContext> CONTEXTS =
-            new WeakHashMap<ServletContext, Log4jTaglibLoggerContext>();
+            new WeakHashMap<>();
 
     private final WeakHashMap<String, Log4jTaglibLogger> loggers =
-            new WeakHashMap<String, Log4jTaglibLogger>();
+            new WeakHashMap<>();
 
     private final ServletContext servletContext;
 

File: log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/LoggingMessageTagSupport.java
Patch:
@@ -50,7 +50,7 @@ protected void init() {
         this.message = null;
         this.marker = null;
         if (this.attributes == null) {
-            this.attributes = new ArrayList<Object>();
+            this.attributes = new ArrayList<>();
         } else {
             this.attributes.clear();
         }

File: log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/TagUtils.java
Patch:
@@ -38,7 +38,7 @@
 final class TagUtils {
     private static final StatusLogger LOGGER = StatusLogger.getLogger();
 
-    private static final Set<Object> WARNED_FOR = new HashSet<Object>();
+    private static final Set<Object> WARNED_FOR = new HashSet<>();
 
     private static final String LOGGER_SCOPE_ATTRIBUTE = "org.apache.logging.log4j.taglib.LOGGER_SCOPE_ATTRIBUTE";
 

File: log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jMarker.java
Patch:
@@ -77,7 +77,7 @@ public boolean hasChildren() {
     @Override
     @SuppressWarnings("rawtypes")
     public Iterator iterator() {
-        final List<Marker> parents = new ArrayList<Marker>();
+        final List<Marker> parents = new ArrayList<>();
         for (final org.apache.logging.log4j.Marker m : this.marker.getParents()) {
             parents.add(factory.getMarker(m.getName()));
         }

File: log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jMarkerFactory.java
Patch:
@@ -35,7 +35,7 @@ public class Log4jMarkerFactory implements IMarkerFactory {
 
     private static final Logger LOGGER = StatusLogger.getLogger();
 
-    private final ConcurrentMap<String, Marker> markerMap = new ConcurrentHashMap<String, Marker>();
+    private final ConcurrentMap<String, Marker> markerMap = new ConcurrentHashMap<>();
 
     /**
      * Returns a Log4j Marker that is compatible with SLF4J.

File: log4j-samples/flume-common/src/main/java/org/apache/logging/log4j/samples/app/MockEventsSupplier.java
Patch:
@@ -34,7 +34,7 @@ public class MockEventsSupplier {
 
     public static List<AuditEvent> getAllEvents(final String member) {
 
-        final List<AuditEvent> events = new ArrayList<AuditEvent>();
+        final List<AuditEvent> events = new ArrayList<>();
 
 
         final Login login = LogEventFactory.getEvent(Login.class);

File: log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/DefaultNoSqlObject.java
Patch:
@@ -32,7 +32,7 @@ public class DefaultNoSqlObject implements NoSqlObject<Map<String, Object>> {
     private final Map<String, Object> map;
 
     public DefaultNoSqlObject() {
-        this.map = new HashMap<String, Object>();
+        this.map = new HashMap<>();
     }
 
     @Override
@@ -52,7 +52,7 @@ public void set(final String field, final Object[] values) {
 
     @Override
     public void set(final String field, final NoSqlObject<Map<String, Object>>[] values) {
-        final List<Map<String, Object>> list = new ArrayList<Map<String, Object>>(values.length);
+        final List<Map<String, Object>> list = new ArrayList<>(values.length);
         for (final NoSqlObject<Map<String, Object>> value : values) {
             list.add(value.unwrap());
         }

File: log4j-jmx-gui/src/main/java/org/apache/logging/log4j/jmx/gui/Client.java
Patch:
@@ -92,7 +92,7 @@ private Set<ObjectName> find(final String pattern) throws JMException, IOExcepti
      * @throws JMException If a management error occurred
      */
     public List<LoggerContextAdminMBean> getLoggerContextAdmins() throws JMException, IOException {
-        final List<LoggerContextAdminMBean> result = new ArrayList<LoggerContextAdminMBean>();
+        final List<LoggerContextAdminMBean> result = new ArrayList<>();
         final Set<ObjectName> contextNames = find(LoggerContextAdminMBean.PATTERN);
         for (final ObjectName contextName : contextNames) {
             result.add(getLoggerContextAdmin(contextName));

File: log4j-jmx-gui/src/main/java/org/apache/logging/log4j/jmx/gui/ClientGui.java
Patch:
@@ -72,8 +72,8 @@ public class ClientGui extends JPanel implements NotificationListener {
     private static final long serialVersionUID = -253621277232291174L;
     private static final int INITIAL_STRING_WRITER_SIZE = 1024;
     private final Client client;
-    private final Map<ObjectName, Component> contextObjNameToTabbedPaneMap = new HashMap<ObjectName, Component>();
-    private final Map<ObjectName, JTextArea> statusLogTextAreaMap = new HashMap<ObjectName, JTextArea>();
+    private final Map<ObjectName, Component> contextObjNameToTabbedPaneMap = new HashMap<>();
+    private final Map<ObjectName, JTextArea> statusLogTextAreaMap = new HashMap<>();
     private JTabbedPane tabbedPaneContexts;
 
     public ClientGui(final Client client) throws IOException, JMException {
@@ -275,7 +275,7 @@ public static void main(final String[] args) throws Exception {
         }
         final JMXServiceURL url = new JMXServiceURL(serviceUrl);
         final Properties props = System.getProperties();
-        final Map<String, String> paramMap = new HashMap<String, String>(props.size());
+        final Map<String, String> paramMap = new HashMap<>(props.size());
         for (final String key : props.stringPropertyNames()) {
             paramMap.put(key, props.getProperty(key));
         }

File: log4j-jmx-gui/src/main/java/org/apache/logging/log4j/jmx/gui/ClientGuiJConsolePlugin.java
Patch:
@@ -34,7 +34,7 @@ public Map<String, JPanel> getTabs() {
         try {
             final Client client = new Client(getContext().getMBeanServerConnection());
             final ClientGui gui = new ClientGui(client);
-            final Map<String, JPanel> result = new HashMap<String, JPanel>();
+            final Map<String, JPanel> result = new HashMap<>();
             result.put("Log4j2", gui);
             return result;
         } catch (final Throwable ex) {

File: log4j-jcl/src/main/java/org/apache/logging/log4j/jcl/LogFactoryImpl.java
Patch:
@@ -33,7 +33,8 @@ public class LogFactoryImpl extends LogFactory {
 
     private final LoggerAdapter<Log> adapter = new LogAdapter();
 
-    private final ConcurrentMap<String, Object> attributes = new ConcurrentHashMap<String, Object>();
+    @SuppressWarnings("unused")
+    private final ConcurrentMap<String, Object> attributes = new ConcurrentHashMap<>();
 
     @Override
     public Log getInstance(final String name) throws LogConfigurationException {

File: log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/BatchEvent.java
Patch:
@@ -26,7 +26,7 @@
  */
 public class BatchEvent {
 
-    private final List<Event> events = new ArrayList<Event>();
+    private final List<Event> events = new ArrayList<>();
 
     public void addEvent(final Event event) {
         events.add(event);

File: log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeEmbeddedManager.java
Patch:
@@ -180,7 +180,7 @@ public FlumeEmbeddedManager createManager(final String name, final FactoryData d
 
         private Map<String, String> createProperties(final String name, final Agent[] agents,
                                                      final Property[] properties, final int batchSize, String dataDir) {
-            final Map<String, String> props = new HashMap<String, String>();
+            final Map<String, String> props = new HashMap<>();
 
             if ((agents == null || agents.length == 0) && (properties == null || properties.length == 0)) {
                 LOGGER.error("No Flume configuration provided");

File: log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeEvent.java
Patch:
@@ -62,7 +62,7 @@ public class FlumeEvent extends SimpleEvent implements LogEvent {
 
     private final LogEvent event;
 
-    private final Map<String, String> contextMap = new HashMap<String, String>();
+    private final Map<String, String> contextMap = new HashMap<>();
 
     private final boolean compress;
 
@@ -102,7 +102,7 @@ public FlumeEvent(final LogEvent event, final String includes, final String excl
         } else if (excludes != null) {
             final String[] array = excludes.split(Patterns.COMMA_SEPARATOR);
             if (array.length > 0) {
-                final List<String> list = new ArrayList<String>(array.length);
+                final List<String> list = new ArrayList<>(array.length);
                 for (final String value : array) {
                     list.add(value.trim());
                 }
@@ -159,7 +159,7 @@ protected void addMapData(final String prefix, final Map<String, String> fields,
 
     protected void addContextData(final String prefix, final Map<String, String> fields,
                                   final Map<String, String> context) {
-        final Map<String, String> map = new HashMap<String, String>();
+        final Map<String, String> map = new HashMap<>();
         for (final Map.Entry<String, String> entry : context.entrySet()) {
             if (entry.getKey() != null && entry.getValue() != null) {
                 fields.put(prefix + entry.getKey(), entry.getValue());

File: log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java
Patch:
@@ -395,7 +395,7 @@ public FlumePersistentManager createManager(final String name, final FactoryData
             Database database = null;
             Environment environment = null;
 
-            final Map<String, String> properties = new HashMap<String, String>();
+            final Map<String, String> properties = new HashMap<>();
             if (data.properties != null) {
                 for (final Property property : data.properties) {
                     properties.put(property.getName(), property.getValue());
@@ -810,7 +810,7 @@ private SimpleEvent createEvent(final DatabaseEntry data) {
                 dais.read(bytes, 0, length);
                 event.setBody(bytes);
                 length = dais.readInt();
-                final Map<String, String> map = new HashMap<String, String>(length);
+                final Map<String, String> map = new HashMap<>(length);
                 for (int i = 0; i < length; ++i) {
                     final String headerKey = dais.readUTF();
                     final String value = dais.readUTF();

File: log4j-flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java
Patch:
@@ -88,7 +88,7 @@ public void setUp() throws Exception {
         context.put("bind", "0.0.0.0");
         Configurables.configure(eventSource, context);
 
-        final List<Channel> channels = new ArrayList<Channel>();
+        final List<Channel> channels = new ArrayList<>();
         channels.add(channel);
 
         final ChannelSelector cs = new ReplicatingChannelSelector();

File: log4j-flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeEmbeddedAgentTest.java
Patch:
@@ -224,7 +224,7 @@ private static boolean deleteFiles(final File file) {
     }
 
     private static class EventCollector implements AvroSourceProtocol {
-        private final LinkedBlockingQueue<AvroFlumeEvent> eventQueue = new LinkedBlockingQueue<AvroFlumeEvent>();
+        private final LinkedBlockingQueue<AvroFlumeEvent> eventQueue = new LinkedBlockingQueue<>();
 
         private final NettyServer nettyServer;
 
@@ -269,7 +269,7 @@ public Status appendBatch(final List<AvroFlumeEvent> events)
     }
 
     private static Map<String, String> toStringMap(final Map<CharSequence, CharSequence> charSeqMap) {
-        final Map<String, String> stringMap = new HashMap<String, String>();
+        final Map<String, String> stringMap = new HashMap<>();
         for (final Map.Entry<CharSequence, CharSequence> entry : charSeqMap.entrySet()) {
             stringMap.put(entry.getKey().toString(), entry.getValue().toString());
         }

File: log4j-flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeEmbeddedAppenderTest.java
Patch:
@@ -249,7 +249,7 @@ private static boolean deleteFiles(final File file) {
     }
 
     private static class EventCollector implements AvroSourceProtocol {
-        private final LinkedBlockingQueue<AvroFlumeEvent> eventQueue = new LinkedBlockingQueue<AvroFlumeEvent>();
+        private final LinkedBlockingQueue<AvroFlumeEvent> eventQueue = new LinkedBlockingQueue<>();
 
         private final NettyServer nettyServer;
 
@@ -295,7 +295,7 @@ public Status appendBatch(final List<AvroFlumeEvent> events)
     }
 
     private static Map<String, String> toStringMap(final Map<CharSequence, CharSequence> charSeqMap) {
-        final Map<String, String> stringMap = new HashMap<String, String>();
+        final Map<String, String> stringMap = new HashMap<>();
         for (final Map.Entry<CharSequence, CharSequence> entry : charSeqMap.entrySet()) {
             stringMap.put(entry.getKey().toString(), entry.getValue().toString());
         }

File: log4j-flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumePersistentAppenderTest.java
Patch:
@@ -388,7 +388,7 @@ private static boolean deleteFiles(final File file) {
     }
 
     private static class EventCollector implements AvroSourceProtocol {
-        private final LinkedBlockingQueue<AvroFlumeEvent> eventQueue = new LinkedBlockingQueue<AvroFlumeEvent>();
+        private final LinkedBlockingQueue<AvroFlumeEvent> eventQueue = new LinkedBlockingQueue<>();
 
         private final NettyServer nettyServer;
 
@@ -436,7 +436,7 @@ public Status appendBatch(final List<AvroFlumeEvent> events) throws AvroRemoteEx
     }
 
     private static Map<String, String> toStringMap(final Map<CharSequence, CharSequence> charSeqMap) {
-        final Map<String, String> stringMap = new HashMap<String, String>();
+        final Map<String, String> stringMap = new HashMap<>();
         for (final Map.Entry<CharSequence, CharSequence> entry : charSeqMap.entrySet()) {
             stringMap.put(entry.getKey().toString(), entry.getValue().toString());
         }

File: log4j-flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java
Patch:
@@ -165,7 +165,7 @@ private static boolean deleteFiles(final File file) {
     }
 
     private static class EventCollector implements AvroSourceProtocol {
-        private final LinkedBlockingQueue<AvroFlumeEvent> eventQueue = new LinkedBlockingQueue<AvroFlumeEvent>();
+        private final LinkedBlockingQueue<AvroFlumeEvent> eventQueue = new LinkedBlockingQueue<>();
 
         private final NettyServer nettyServer;
 
@@ -210,7 +210,7 @@ public Status appendBatch(final List<AvroFlumeEvent> events)
     }
 
     private static Map<String, String> toStringMap(final Map<CharSequence, CharSequence> charSeqMap) {
-        final Map<String, String> stringMap = new HashMap<String, String>();
+        final Map<String, String> stringMap = new HashMap<>();
         for (final Map.Entry<CharSequence, CharSequence> entry : charSeqMap.entrySet()) {
             stringMap.put(entry.getKey().toString(), entry.getValue().toString());
         }

File: log4j-api/src/main/java/org/apache/logging/log4j/Level.java
Patch:
@@ -44,7 +44,7 @@
 public final class Level implements Comparable<Level>, Serializable {
 
     private static final long serialVersionUID = 1581082L;
-    private static final ConcurrentMap<String, Level> levels = new ConcurrentHashMap<String, Level>();
+    private static final ConcurrentMap<String, Level> levels = new ConcurrentHashMap<>();
 
     /**
      * No events will be logged.

File: log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java
Patch:
@@ -85,7 +85,7 @@ public class LogManager {
         }
 
         if (factory == null) {
-            final SortedMap<Integer, LoggerContextFactory> factories = new TreeMap<Integer, LoggerContextFactory>();
+            final SortedMap<Integer, LoggerContextFactory> factories = new TreeMap<>();
             // note that the following initial call to ProviderUtil may block until a Provider has been installed when
             // running in an OSGi environment
             if (ProviderUtil.hasProviders()) {

File: log4j-api/src/main/java/org/apache/logging/log4j/MarkerManager.java
Patch:
@@ -27,7 +27,7 @@
  */
 public final class MarkerManager {
 
-    private static final ConcurrentMap<String, Marker> MARKERS = new ConcurrentHashMap<String, Marker>();
+    private static final ConcurrentMap<String, Marker> MARKERS = new ConcurrentHashMap<>();
 
     private MarkerManager() {
         // do nothing

File: log4j-api/src/main/java/org/apache/logging/log4j/ThreadContext.java
Patch:
@@ -52,7 +52,7 @@ private static class EmptyThreadContextStack extends AbstractCollection<String>
 
         private static final long serialVersionUID = 1L;
 
-        private static final Iterator<String> EMPTY_ITERATOR = new EmptyIterator<String>();
+        private static final Iterator<String> EMPTY_ITERATOR = new EmptyIterator<>();
 
         @Override
         public String pop() {

File: log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java
Patch:
@@ -55,15 +55,15 @@ public enum MapFormat {
      * Constructor.
      */
     public MapMessage() {
-        data = new TreeMap<String, String>();
+        data = new TreeMap<>();
     }
 
     /**
      * Constructor based on an existing Map.
      * @param map The Map.
      */
     public MapMessage(final Map<String, String> map) {
-        this.data = map instanceof SortedMap ? (SortedMap<String, String>) map : new TreeMap<String, String>(map);
+        this.data = map instanceof SortedMap ? (SortedMap<String, String>) map : new TreeMap<>(map);
     }
 
     @Override

File: log4j-api/src/main/java/org/apache/logging/log4j/message/ThreadDumpMessage.java
Patch:
@@ -172,7 +172,7 @@ private static class BasicThreadInfoFactory implements ThreadInfoFactory {
         public Map<ThreadInformation, StackTraceElement[]> createThreadInfo() {
             final Map<Thread, StackTraceElement[]> map = Thread.getAllStackTraces();
             final Map<ThreadInformation, StackTraceElement[]> threads =
-                new HashMap<ThreadInformation, StackTraceElement[]>(map.size());
+                new HashMap<>(map.size());
             for (final Map.Entry<Thread, StackTraceElement[]> entry : map.entrySet()) {
                 threads.put(new BasicThreadInformation(entry.getKey()), entry.getValue());
             }
@@ -190,7 +190,7 @@ public Map<ThreadInformation, StackTraceElement[]> createThreadInfo() {
             final ThreadInfo[] array = bean.dumpAllThreads(true, true);
 
             final Map<ThreadInformation, StackTraceElement[]>  threads =
-                new HashMap<ThreadInformation, StackTraceElement[]>(array.length);
+                new HashMap<>(array.length);
             for (final ThreadInfo info : array) {
                 threads.put(new ExtendedThreadInformation(info), info.getStackTrace());
             }

File: log4j-api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java
Patch:
@@ -60,7 +60,7 @@ public class SimpleLoggerContext implements LoggerContext {
 
     private final PrintStream stream;
 
-    private final ConcurrentMap<String, ExtendedLogger> loggers = new ConcurrentHashMap<String, ExtendedLogger>();
+    private final ConcurrentMap<String, ExtendedLogger> loggers = new ConcurrentHashMap<>();
 
     public SimpleLoggerContext() {
         props = new PropertiesUtil("log4j2.simplelog.properties");

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLoggerAdapter.java
Patch:
@@ -35,7 +35,7 @@ public abstract class AbstractLoggerAdapter<L> implements LoggerAdapter<L> {
      * A map to store loggers for their given LoggerContexts.
      */
     protected final Map<LoggerContext, ConcurrentMap<String, L>> registry =
-        new WeakHashMap<LoggerContext, ConcurrentMap<String, L>>();
+        new WeakHashMap<>();
 
     @Override
     public L getLogger(final String name) {
@@ -58,7 +58,7 @@ public ConcurrentMap<String, L> getLoggersInContext(final LoggerContext context)
         synchronized (registry) {
             ConcurrentMap<String, L> loggers = registry.get(context);
             if (loggers == null) {
-                loggers = new ConcurrentHashMap<String, L>();
+                loggers = new ConcurrentHashMap<>();
                 registry.put(context, loggers);
             }
             return loggers;

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/DefaultThreadContextStack.java
Patch:
@@ -33,7 +33,7 @@ public class DefaultThreadContextStack implements ThreadContextStack {
 
     private static final long serialVersionUID = 5050501L;
 
-    private static final ThreadLocal<MutableThreadContextStack> stack = new ThreadLocal<MutableThreadContextStack>();
+    private static final ThreadLocal<MutableThreadContextStack> stack = new ThreadLocal<>();
 
     private final boolean useStack;
 

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/MutableThreadContextStack.java
Patch:
@@ -44,11 +44,11 @@ public MutableThreadContextStack() {
     }
 
     public MutableThreadContextStack(final List<String> list) {
-        this.list = new ArrayList<String>(list);
+        this.list = new ArrayList<>(list);
     }
 
     private MutableThreadContextStack(final MutableThreadContextStack stack) {
-        this.list = new ArrayList<String>(stack.list);
+        this.list = new ArrayList<>(stack.list);
     }
 
     private void checkInvariants() {
@@ -102,7 +102,7 @@ public void trim(final int depth) {
         if (list == null) {
             return;
         }
-        final List<String> copy = new ArrayList<String>(list.size());
+        final List<String> copy = new ArrayList<>(list.size());
         final int count = Math.min(depth, list.size());
         for (int i = 0; i < count; i++) {
             copy.add(list.get(i));

File: log4j-api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java
Patch:
@@ -62,12 +62,12 @@ public final class StatusLogger extends AbstractLogger {
 
     private final SimpleLogger logger;
 
-    private final Collection<StatusListener> listeners = new CopyOnWriteArrayList<StatusListener>();
+    private final Collection<StatusListener> listeners = new CopyOnWriteArrayList<>();
     
     @SuppressWarnings("NonSerializableFieldInSerializableClass") // ReentrantReadWriteLock is Serializable
     private final ReadWriteLock listenersLock = new ReentrantReadWriteLock();
 
-    private final Queue<StatusData> messages = new BoundedQueue<StatusData>(MAX_ENTRIES);
+    private final Queue<StatusData> messages = new BoundedQueue<>(MAX_ENTRIES);
     
     @SuppressWarnings("NonSerializableFieldInSerializableClass") // ReentrantLock is Serializable
     private final Lock msgLock = new ReentrantLock();
@@ -170,7 +170,7 @@ private static void closeSilently(final Closeable resource) {
     public List<StatusData> getStatusData() {
         msgLock.lock();
         try {
-            return new ArrayList<StatusData>(messages);
+            return new ArrayList<>(messages);
         } finally {
             msgLock.unlock();
         }

File: log4j-api/src/main/java/org/apache/logging/log4j/util/LoaderUtil.java
Patch:
@@ -181,7 +181,7 @@ private static boolean isIgnoreTccl() {
      */
     public static Collection<URL> findResources(final String resource) {
         final Collection<UrlResource> urlResources = findUrlResources(resource);
-        final Collection<URL> resources = new LinkedHashSet<URL>(urlResources.size());
+        final Collection<URL> resources = new LinkedHashSet<>(urlResources.size());
         for (final UrlResource urlResource : urlResources) {
             resources.add(urlResource.getUrl());
         }
@@ -194,7 +194,7 @@ static Collection<UrlResource> findUrlResources(final String resource) {
             LoaderUtil.class.getClassLoader(),
             ClassLoader.getSystemClassLoader()
         };
-        final Collection<UrlResource> resources = new LinkedHashSet<UrlResource>();
+        final Collection<UrlResource> resources = new LinkedHashSet<>();
         for (final ClassLoader cl : candidates) {
             if (cl != null) {
                 try {

File: log4j-api/src/main/java/org/apache/logging/log4j/util/ProviderUtil.java
Patch:
@@ -49,7 +49,7 @@ public final class ProviderUtil {
 
     private static final Logger LOGGER = StatusLogger.getLogger();
 
-    protected static final Collection<Provider> PROVIDERS = new HashSet<Provider>();
+    protected static final Collection<Provider> PROVIDERS = new HashSet<>();
 
     /**
      * Guards the ProviderUtil singleton instance from lazy initialization. This is primarily used for OSGi support.

File: log4j-api/src/main/java/org/apache/logging/log4j/util/ReflectionUtil.java
Patch:
@@ -269,7 +269,7 @@ public static Stack<Class<?>> getCurrentStackTrace() {
         // benchmarks show that using the SecurityManager is much faster than looping through getCallerClass(int)
         if (SECURITY_MANAGER != null) {
             final Class<?>[] array = SECURITY_MANAGER.getClassContext();
-            final Stack<Class<?>> classes = new Stack<Class<?>>();
+            final Stack<Class<?>> classes = new Stack<>();
             classes.ensureCapacity(array.length);
             for (final Class<?> clazz : array) {
                 classes.push(clazz);
@@ -278,14 +278,14 @@ public static Stack<Class<?>> getCurrentStackTrace() {
         }
         // slower version using getCallerClass where we cannot use a SecurityManager
         if (supportsFastReflection()) {
-            final Stack<Class<?>> classes = new Stack<Class<?>>();
+            final Stack<Class<?>> classes = new Stack<>();
             Class<?> clazz;
             for (int i = 1; null != (clazz = getCallerClass(i)); i++) {
                 classes.push(clazz);
             }
             return classes;
         }
-        return new Stack<Class<?>>();
+        return new Stack<>();
     }
 
     static final class PrivateSecurityManager extends SecurityManager {

File: log4j-api/src/test/java/org/apache/logging/log4j/TestLogger.java
Patch:
@@ -45,7 +45,7 @@ public TestLogger(final String name) {
         super(name);
     }
 
-    private final List<String> list = new ArrayList<String>();
+    private final List<String> list = new ArrayList<>();
 
     public List<String> getEntries() {
         return list;

File: log4j-api/src/test/java/org/apache/logging/log4j/TestLoggerContext.java
Patch:
@@ -27,7 +27,7 @@
  *
  */
 public class TestLoggerContext implements LoggerContext {
-    private final Map<String, ExtendedLogger> map = new HashMap<String, ExtendedLogger>();
+    private final Map<String, ExtendedLogger> map = new HashMap<>();
 
     @Override
     public ExtendedLogger getLogger(final String name) {

File: log4j-api/src/test/java/org/apache/logging/log4j/osgi/OsgiRule.java
Patch:
@@ -44,7 +44,7 @@ public Framework getFramework() {
 
     @Override
     protected void before() throws Throwable {
-        final Map<String, String> configMap = new HashMap<String, String>(2);
+        final Map<String, String> configMap = new HashMap<>(2);
         // Cleans framework before first init. Subsequent init invocations do not clean framework.
         configMap.put("org.osgi.framework.storage.clean", "onFirstInit");
         // Delegates loading of endorsed libraries to JVM classloader

File: log4j-api/src/test/java/org/apache/logging/log4j/util/ReflectionUtilTest.java
Patch:
@@ -74,7 +74,7 @@ public void testGetCallerClassNameViaStackTrace() throws Exception {
     @Test
     public void testGetCurrentStackTrace() throws Exception {
         final Stack<Class<?>> classes = ReflectionUtil.getCurrentStackTrace();
-        final Stack<Class<?>> reversed = new Stack<Class<?>>();
+        final Stack<Class<?>> reversed = new Stack<>();
         reversed.ensureCapacity(classes.size());
         while (!classes.empty()) {
             reversed.push(classes.pop());

File: log4j-1.2-api/src/main/java/org/apache/log4j/Category.java
Patch:
@@ -42,7 +42,7 @@ public class Category {
     private static LoggerFactory loggerFactory = new PrivateFactory();
 
     private static final Map<LoggerContext, ConcurrentMap<String, Logger>> CONTEXT_MAP =
-        new WeakHashMap<LoggerContext, ConcurrentMap<String, Logger>>();
+        new WeakHashMap<>();
 
     private static final String FQCN = Category.class.getName();
 
@@ -132,7 +132,7 @@ private static ConcurrentMap<String, Logger> getLoggersMap(final LoggerContext c
         synchronized (CONTEXT_MAP) {
             ConcurrentMap<String, Logger> map = CONTEXT_MAP.get(context);
             if (map == null) {
-                map = new ConcurrentHashMap<String, Logger>();
+                map = new ConcurrentHashMap<>();
                 CONTEXT_MAP.put(context, map);
             }
             return map;

File: log4j-1.2-api/src/main/java/org/apache/log4j/MDC.java
Patch:
@@ -33,12 +33,12 @@ public final class MDC {
         new InheritableThreadLocal<Map<String, Object>>() {
             @Override
             protected Map<String, Object> initialValue() {
-                return new HashMap<String, Object>();
+                return new HashMap<>();
             }
 
             @Override
             protected Map<String, Object> childValue(final Map<String, Object> parentValue) {
-                return parentValue == null ? new HashMap<String, Object>() : new HashMap<String, Object>(parentValue);
+                return parentValue == null ? new HashMap<String, Object>() : new HashMap<>(parentValue);
             }
         };
 
@@ -72,6 +72,6 @@ public static void clear() {
     }
 
     public static Hashtable<String, Object> getContext() {
-        return new Hashtable<String, Object>(localMap.get());
+        return new Hashtable<>(localMap.get());
     }
 }

File: log4j-1.2-api/src/main/java/org/apache/log4j/NDC.java
Patch:
@@ -56,7 +56,7 @@ public static void clear() {
      */
     @SuppressWarnings("rawtypes")
     public static Stack cloneStack() {
-        final Stack<String> stack = new Stack<String>();
+        final Stack<String> stack = new Stack<>();
         for (final String element : org.apache.logging.log4j.ThreadContext.cloneStack().asList()) {
             stack.push(element);
         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/BundleContextSelector.java
Patch:
@@ -37,7 +37,7 @@
  *
  * @since 2.1
  */
-public class BundleContextSelector extends ClassLoaderContextSelector implements ContextSelector {
+public class BundleContextSelector extends ClassLoaderContextSelector {
 
     @Override
     public LoggerContext getContext(final String fqcn, final ClassLoader loader, final boolean currentContext,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MdcPatternConverter.java
Patch:
@@ -87,7 +87,7 @@ public void format(final LogEvent event, final StringBuilder toAppendTo) {
                 return;
             }
             final StringBuilder sb = new StringBuilder("{");
-            final Set<String> keys = new TreeSet<String>(contextMap.keySet());
+            final Set<String> keys = new TreeSet<>(contextMap.keySet());
             for (final String key : keys) {
                 if (sb.length() > 1) {
                     sb.append(", ");

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java
Patch:
@@ -84,7 +84,7 @@ public Interpolator(final Map<String, String> properties) {
         // TODO: this ought to use the PluginManager
         lookups.put("sys", new SystemPropertiesLookup());
         lookups.put("env", new EnvironmentLookup());
-        lookups.put("main", MapLookup.MAIN_SINGLETON);
+        lookups.put("main", MainMapLookup.MAIN_SINGLETON);
         lookups.put("java", new JavaLookup());
         // JNDI
         try {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/lookup/MapLookupTest.java
Patch:
@@ -55,7 +55,7 @@ public void testMainMap() {
         MapLookup.setMainArguments(new String[] {
                 "--file",
                 "foo.txt" });
-        final MapLookup lookup = MapLookup.MAIN_SINGLETON;
+        final MapLookup lookup = MainMapLookup.MAIN_SINGLETON;
         assertEquals(null, lookup.lookup(null));
         assertEquals(null, lookup.lookup("X"));
         assertEquals("--file", lookup.lookup("0"));

File: log4j-core/src/test/java/org/apache/logging/log4j/core/CollectionLoggingTest.java
Patch:
@@ -58,7 +58,7 @@ public void testSystemProperties() {
     public void testSimpleMap() {
         final Logger logger = context.getLogger(CollectionLoggingTest.class.getName());
         logger.error(System.getProperties());
-        final Map<String, String> map = new HashMap<String, String>();
+        final Map<String, String> map = new HashMap<>();
         map.put("MyKey1", "MyValue1");
         map.put("MyKey2", "MyValue2");
         logger.error(new MapMessage(map));

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/SmtpAppenderTest.java
Patch:
@@ -110,7 +110,7 @@ public void testMessageFactorySetSubject() throws MessagingException {
 
     @Test
     public void testCyclicBuffer() {
-        final CyclicBuffer<Integer> buffer = new CyclicBuffer<Integer>(
+        final CyclicBuffer<Integer> buffer = new CyclicBuffer<>(
                 Integer.class, 3);
 
         assertTrue(buffer.isEmpty());

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/SocketAppenderTest.java
Patch:
@@ -61,7 +61,7 @@ public class SocketAppenderTest {
     private static final String DYN_PORT = String.valueOf(PORTNUM2);
     private static final String ERROR_PORT = String.valueOf(AvailablePortFinder.getNextAvailable());
 
-    private static BlockingQueue<LogEvent> list = new ArrayBlockingQueue<LogEvent>(10);
+    private static BlockingQueue<LogEvent> list = new ArrayBlockingQueue<>(10);
 
     private static TCPSocketServer tcpServer;
     private static UDPSocketServer udpServer;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/SyslogAppenderTestBase.java
Patch:
@@ -45,7 +45,7 @@ public class SyslogAppenderTestBase {
     protected MockSyslogServer syslogServer;
     protected SyslogAppender appender;
     protected Logger root = ctx.getLogger("SyslogAppenderTest");
-    protected List<String> sentMessages = new ArrayList<String>();
+    protected List<String> sentMessages = new ArrayList<>();
     protected boolean includeNewLine = true;
 
     @BeforeClass

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/db/jdbc/FactoryMethodConnectionSourceTest.java
Patch:
@@ -37,7 +37,7 @@
 import static org.junit.Assert.*;
 
 public class FactoryMethodConnectionSourceTest {
-    private static ThreadLocal<Object> holder = new ThreadLocal<Object>();
+    private static ThreadLocal<Object> holder = new ThreadLocal<>();
     private static final String CONFIG = "log4j-fatalOnly.xml";
 
     @BeforeClass

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapAttributeConverterTest.java
Patch:
@@ -40,7 +40,7 @@ public void tearDown() {
 
     @Test
     public void testConvertToDatabaseColumn01() {
-        final Map<String, String> map = new HashMap<String, String>();
+        final Map<String, String> map = new HashMap<>();
         map.put("test1", "another1");
         map.put("key2", "value2");
 
@@ -50,7 +50,7 @@ public void testConvertToDatabaseColumn01() {
 
     @Test
     public void testConvertToDatabaseColumn02() {
-        final Map<String, String> map = new HashMap<String, String>();
+        final Map<String, String> map = new HashMap<>();
         map.put("someKey", "coolValue");
         map.put("anotherKey", "testValue");
         map.put("myKey", "yourValue");

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapJsonAttributeConverterTest.java
Patch:
@@ -40,7 +40,7 @@ public void tearDown() {
 
     @Test
     public void testConvert01() {
-        final Map<String, String> map = new HashMap<String, String>();
+        final Map<String, String> map = new HashMap<>();
         map.put("test1", "another1");
         map.put("key2", "value2");
 
@@ -56,7 +56,7 @@ public void testConvert01() {
 
     @Test
     public void testConvert02() {
-        final Map<String, String> map = new HashMap<String, String>();
+        final Map<String, String> map = new HashMap<>();
         map.put("someKey", "coolValue");
         map.put("anotherKey", "testValue");
         map.put("myKey", "yourValue");

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/mom/JmsAppenderIT.java
Patch:
@@ -97,7 +97,7 @@ private static class JmsQueueConsumer implements MessageListener {
         private JmsQueueConsumer(final int messageCount) {
             this.messageCount = messageCount;
             this.countDownLatch = new CountDownLatch(messageCount);
-            this.events = new ArrayList<LogEvent>(messageCount);
+            this.events = new ArrayList<>(messageCount);
         }
 
         @Override

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rewrite/MapRewritePolicyTest.java
Patch:
@@ -39,7 +39,7 @@
 
 
 public class MapRewritePolicyTest {
-    private static Map<String, String> map = new HashMap<String, String>();
+    private static Map<String, String> map = new HashMap<>();
     private static KeyValuePair[] rewrite;
     private static LogEvent logEvent0, logEvent1, logEvent2, logEvent3;
 
@@ -53,7 +53,7 @@ public static void setupClass() {
         logEvent1 = new Log4jLogEvent("test", null, "MapRewritePolicyTest.setupClass()", Level.ERROR,
             new MapMessage(map), null, map, null, "none",
             new StackTraceElement("MapRewritePolicyTest", "setupClass", "MapRewritePolicyTest", 29), 2);
-        final ThreadContextStack stack = new MutableThreadContextStack(new ArrayList<String>(map.values()));
+        final ThreadContextStack stack = new MutableThreadContextStack(new ArrayList<>(map.values()));
         logEvent2 = new Log4jLogEvent("test", MarkerManager.getMarker("test"), "MapRewritePolicyTest.setupClass()",
             Level.TRACE, new StructuredDataMessage("test", "Nothing", "test", map), new RuntimeException("test"), null,
             stack, "none", new StackTraceElement("MapRewritePolicyTest",

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java
Patch:
@@ -147,7 +147,7 @@ public void testCreateMementoReturnsCopy() {
         final Level level = Level.TRACE;
         final Message data = new SimpleMessage("message");
         final Throwable t = new InternalError("not a real error");
-        final Map<String, String> map = new HashMap<String, String>();
+        final Map<String, String> map = new HashMap<>();
         map.put("key", "value");
         final ContextStack contextStack = new MutableThreadContextStack(Arrays.asList("a", "b"));
         final String threadName = "main";

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java
Patch:
@@ -65,7 +65,7 @@ public Setup(final Class<?> klass, final String runner, final String name,
         }
 
         List<String> processArguments(final String java) {
-            final List<String> args = new ArrayList<String>();
+            final List<String> args = new ArrayList<>();
             args.add(java);
             args.add("-server");
             args.add("-Xms1g");
@@ -218,7 +218,7 @@ public static void main(final String[] args) throws Exception {
                 + System.getProperty("AsyncLogger.ThreadNameStrategy", "CACHED");
 
         final long start = System.nanoTime();
-        final List<Setup> tests = new ArrayList<PerfTestDriver.Setup>();
+        final List<Setup> tests = new ArrayList<>();
         // includeLocation=false
         tests.add(s("perf3PlainNoLoc.xml", LOG20, "Loggers all async",
                 ALL_ASYNC, SYSCLOCK, THREADNAME));

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/perftest/PerfTestResultFormatter.java
Patch:
@@ -51,7 +51,7 @@ static class Stats {
         }
     }
 
-    private final Map<String, Map<String, Stats>> results = new TreeMap<String, Map<String, Stats>>();
+    private final Map<String, Map<String, Stats>> results = new TreeMap<>();
 
     public PerfTestResultFormatter() {
     }
@@ -139,7 +139,7 @@ private void process(final String line) throws ParseException {
         final Stats stats = new Stats(throughput, avg, pct99, pct99_99);
         Map<String, Stats> map = results.get(key.trim());
         if (map == null) {
-            map = new TreeMap<String, Stats>(sort());
+            map = new TreeMap<>(sort());
             results.put(key.trim(), map);
         }
         String subKey = sub.trim();

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/InMemoryAdvertiser.java
Patch:
@@ -24,19 +24,19 @@
 
 @Plugin(name = "memory", category = "Core", elementType = "advertiser", printObject = false)
 public class InMemoryAdvertiser implements Advertiser {
-    private static Map<Object, Map<String, String>> properties = new HashMap<Object, Map<String, String>>();
+    private static Map<Object, Map<String, String>> properties = new HashMap<>();
 
     public static Map<Object, Map<String, String>> getAdvertisedEntries()
     {
-        final Map<Object, Map<String, String>> result = new HashMap<Object, Map<String, String>>();
+        final Map<Object, Map<String, String>> result = new HashMap<>();
         result.putAll(properties);
         return result;
     }
 
     @Override
     public Object advertise(final Map<String, String> newEntry) {
         final Object object = new Object();
-        properties.put(object, new HashMap<String, String>(newEntry));
+        properties.put(object, new HashMap<>(newEntry));
         return object;
     }
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/util/PluginManagerPackagesTest.java
Patch:
@@ -92,7 +92,7 @@ public void test() throws Exception {
     private void compile(final File f) throws IOException {
         // set up compiler
         final JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
-        final DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<JavaFileObject>();
+        final DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<>();
         final StandardJavaFileManager fileManager = compiler.getStandardFileManager(diagnostics, null, null);
         final Iterable<? extends JavaFileObject> compilationUnits = fileManager.getJavaFileObjectsFromFiles(Arrays.asList(f));
 
@@ -102,7 +102,7 @@ private void compile(final File f) throws IOException {
         compiler.getTask(null, fileManager, diagnostics, options, null, compilationUnits).call();
 
         // check we don't have any compilation errors
-        final List<String> errors = new ArrayList<String>();
+        final List<String> errors = new ArrayList<>();
         for (final Diagnostic<? extends JavaFileObject> diagnostic : diagnostics.getDiagnostics()) {
             if (diagnostic.getKind() == Diagnostic.Kind.ERROR) {
                 errors.add(String.format("Compile error: %s%n", diagnostic.getMessage(Locale.getDefault())));

File: log4j-core/src/test/java/org/apache/logging/log4j/core/filter/MapFilterTest.java
Patch:
@@ -91,7 +91,7 @@ public void testConfig() {
         assertTrue("Map does not contain key eventId", map.containsKey("eventId"));
         assertEquals("List does not contain 2 elements", 2, map.get("eventId").size());
         final Logger logger = LogManager.getLogger(MapFilterTest.class);
-        final Map<String, String> eventMap = new HashMap<String, String>();
+        final Map<String, String> eventMap = new HashMap<>();
         eventMap.put("eventId", "Login");
         logger.debug(new MapMessage(eventMap));
         final Appender app = config.getAppender("LIST");

File: log4j-core/src/test/java/org/apache/logging/log4j/core/layout/LogEventFixtures.java
Patch:
@@ -57,7 +57,7 @@ static Log4jLogEvent createLogEvent() {
         Throwables.addSuppressed(ioException, new IndexOutOfBoundsException("I am suppressed exception 1"));
         Throwables.addSuppressed(ioException, new IndexOutOfBoundsException("I am suppressed exception 2"));
         final ThrowableProxy throwableProxy = new ThrowableProxy(ioException);
-        final Map<String, String> contextMap = new HashMap<String, String>();
+        final Map<String, String> contextMap = new HashMap<>();
         contextMap.put("MDC.A", "A_Value");
         contextMap.put("MDC.B", "B_Value");
         final DefaultThreadContextStack contextStack = new DefaultThreadContextStack(true);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/lookup/InterpolatorTest.java
Patch:
@@ -68,7 +68,7 @@ public static void after() {
 
     @Test
     public void testLookup() {
-        final Map<String, String> map = new HashMap<String, String>();
+        final Map<String, String> map = new HashMap<>();
         map.put(TESTKEY, TESTVAL);
         final StrLookup lookup = new Interpolator(new MapLookup(map));
         ThreadContext.put(TESTKEY, TESTVAL);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/lookup/MapLookupTest.java
Patch:
@@ -36,7 +36,7 @@ public void testEmptyMap() {
 
     @Test
     public void testMap() {
-        final HashMap<String, String> map = new HashMap<String, String>();
+        final HashMap<String, String> map = new HashMap<>();
         map.put("A", "B");
         final MapLookup lookup = new MapLookup(map);
         assertEquals(null, lookup.lookup(null));

File: log4j-core/src/test/java/org/apache/logging/log4j/core/lookup/StrSubstitutorTest.java
Patch:
@@ -48,7 +48,7 @@ public static void after() {
 
     @Test
     public void testLookup() {
-        final Map<String, String> map = new HashMap<String, String>();
+        final Map<String, String> map = new HashMap<>();
         map.put(TESTKEY, TESTVAL);
         final StrLookup lookup = new Interpolator(new MapLookup(map));
         final StrSubstitutor subst = new StrSubstitutor(lookup);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/SocketReconnectTest.java
Patch:
@@ -52,7 +52,7 @@ public class SocketReconnectTest {
     @Test
     public void testReconnect() throws Exception {
 
-        final List<String> list = new ArrayList<String>();
+        final List<String> list = new ArrayList<>();
         TestSocketServer server = new TestSocketServer(list);
         server.start();
         Thread.sleep(300);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/mock/MockSyslogServer.java
Patch:
@@ -26,7 +26,7 @@ public class MockSyslogServer extends Thread {
 
     public MockSyslogServer(final int numberOfMessagesToReceive, final int port) {
         this.numberOfMessagesToReceive = numberOfMessagesToReceive;
-        this.messageList = new ArrayList<String>();
+        this.messageList = new ArrayList<>();
         this.port = port;
     }
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/mock/MockTlsSyslogServer.java
Patch:
@@ -33,7 +33,7 @@
 public class MockTlsSyslogServer extends MockSyslogServer {
     private final SSLServerSocket serverSocket;
     private SSLSocket clientSocket;
-    private final List<String> messageList = new ArrayList<String>();
+    private final List<String> messageList = new ArrayList<>();
     private TlsSyslogInputStreamReaderBase syslogReader;
 
     private TlsSyslogMessageFormat messageFormat = TlsSyslogMessageFormat.SYSLOG;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/SslXmlSocketServerTest.java
Patch:
@@ -60,7 +60,7 @@ public static void setupClass() throws Exception {
         ((LoggerContext) LogManager.getContext(false)).reconfigure();
         initServerSocketFactory();
         // Use a large buffer just to test the code, the UDP test uses a tiny buffer
-        server = new SecureTcpSocketServer<InputStream>(PORT_NUM, new XmlInputStreamLogEventBridge(1024 * 100,
+        server = new SecureTcpSocketServer<>(PORT_NUM, new XmlInputStreamLogEventBridge(1024 * 100,
                 Charset.defaultCharset()), sslConfig);
         thread = server.startNewThread();
     }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/TcpXmlSocketServerTest.java
Patch:
@@ -34,7 +34,7 @@ public class TcpXmlSocketServerTest extends AbstractSocketServerTest {
     public static void setupClass() throws Exception {
         ((LoggerContext) LogManager.getContext(false)).reconfigure();
         // Use a large buffer just to test the code, the UDP test uses a tiny buffer
-        server = new TcpSocketServer<InputStream>(PORT_NUM, new XmlInputStreamLogEventBridge(1024 * 100,
+        server = new TcpSocketServer<>(PORT_NUM, new XmlInputStreamLogEventBridge(1024 * 100,
                 Charset.defaultCharset()));
         thread = server.startNewThread();
     }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/UdpXmlSocketServerTest.java
Patch:
@@ -34,7 +34,7 @@ public class UdpXmlSocketServerTest extends AbstractSocketServerTest {
     public static void setupClass() throws Exception {
         ((LoggerContext) LogManager.getContext(false)).reconfigure();
         // Use a tiny buffer just to test the code, the TCP test uses a large buffer
-        server = new UdpSocketServer<InputStream>(PORT_NUM, new XmlInputStreamLogEventBridge(100,
+        server = new UdpSocketServer<>(PORT_NUM, new XmlInputStreamLogEventBridge(100,
                 Charset.defaultCharset()));
         thread = server.startNewThread();
     }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/ssl/TlsSyslogTestUtil.java
Patch:
@@ -43,7 +43,7 @@ public static ArrayList<String> generateMessages(final int numberOfMessages, fin
     }
 
     private static ArrayList<String> generateMessages(final int numberOfMessages, final String charSet) {
-        final ArrayList<String> messageList = new ArrayList<String>(numberOfMessages);
+        final ArrayList<String> messageList = new ArrayList<>(numberOfMessages);
         for (int i = 0; i < numberOfMessages; i++) {
             final String message = createRandomMessage(charSet);
             messageList.add(message);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/pattern/PatternParserTest.java
Patch:
@@ -92,7 +92,7 @@ public void defaultPattern() {
     public void testCustomPattern() {
         final List<PatternFormatter> formatters = parser.parse(customPattern);
         assertNotNull(formatters);
-        final Map<String, String> mdc = new HashMap<String, String>();
+        final Map<String, String> mdc = new HashMap<>();
         mdc.put("loginId", "Fred");
         final Throwable t = new Throwable();
         final StackTraceElement[] elements = t.getStackTrace();

File: log4j-core/src/test/java/org/apache/logging/log4j/core/pattern/PatternParserTest2.java
Patch:
@@ -62,8 +62,8 @@ public void testParseDontConvertBackslashes() {
 
     private void parse(final String pattern, final boolean convert, final StringBuilder buf, final Date date, final int i) {
         final PatternParser parser0 = new PatternParser(null, "Converter", null);
-        final List<PatternConverter> converters = new ArrayList<PatternConverter>();
-        final List<FormattingInfo> fields = new ArrayList<FormattingInfo>();
+        final List<PatternConverter> converters = new ArrayList<>();
+        final List<FormattingInfo> fields = new ArrayList<>();
         parser0.parse(pattern, converters, fields, false, convert);
         final FormattingInfo[] infoArray = new FormattingInfo[fields.size()];
         final FormattingInfo[] patternFields = fields.toArray(infoArray);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/tools/GenerateCustomLoggerTest.java
Patch:
@@ -68,15 +68,15 @@ public void testGenerateSource() throws Exception {
 
         // set up compiler
         final JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
-        final DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<JavaFileObject>();
+        final DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<>();
         final StandardJavaFileManager fileManager = compiler.getStandardFileManager(diagnostics, null, null);
         final Iterable<? extends JavaFileObject> compilationUnits = fileManager.getJavaFileObjectsFromFiles(Arrays.asList(f));
 
         // compile generated source
         compiler.getTask(null, fileManager, diagnostics, null, null, compilationUnits).call();
 
         // check we don't have any compilation errors
-        final List<String> errors = new ArrayList<String>();
+        final List<String> errors = new ArrayList<>();
         for (final Diagnostic<? extends JavaFileObject> diagnostic : diagnostics.getDiagnostics()) {
             if (diagnostic.getKind() == Diagnostic.Kind.ERROR) {
                 errors.add(String.format("Compile error: %s%n", diagnostic.getMessage(Locale.getDefault())));

File: log4j-core/src/test/java/org/apache/logging/log4j/core/tools/GenerateExtendedLoggerTest.java
Patch:
@@ -69,15 +69,15 @@ public void testGenerateSource() throws Exception {
 
         // set up compiler
         final JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
-        final DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<JavaFileObject>();
+        final DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<>();
         final StandardJavaFileManager fileManager = compiler.getStandardFileManager(diagnostics, null, null);
         final Iterable<? extends JavaFileObject> compilationUnits = fileManager.getJavaFileObjectsFromFiles(Arrays.asList(f));
 
         // compile generated source
         compiler.getTask(null, fileManager, diagnostics, null, null, compilationUnits).call();
 
         // check we don't have any compilation errors
-        final List<String> errors = new ArrayList<String>();
+        final List<String> errors = new ArrayList<>();
         for (final Diagnostic<? extends JavaFileObject> diagnostic : diagnostics.getDiagnostics()) {
             if (diagnostic.getKind() == Diagnostic.Kind.ERROR) {
                 errors.add(String.format("Compile error: %s%n", diagnostic.getMessage(Locale.getDefault())));

File: log4j-core/src/test/java/org/apache/logging/log4j/core/util/ShutdownCallbackRegistryTest.java
Patch:
@@ -59,7 +59,7 @@ public void testShutdownCallbackRegistry() throws Exception {
 
     public static class Registry implements ShutdownCallbackRegistry {
         private static final Logger LOGGER = StatusLogger.getLogger();
-        private static final Collection<Cancellable> CALLBACKS = new ConcurrentLinkedQueue<Cancellable>();
+        private static final Collection<Cancellable> CALLBACKS = new ConcurrentLinkedQueue<>();
 
         @Override
         public Cancellable addShutdownCallback(final Runnable callback) {

File: log4j-core/src/test/java/org/apache/logging/log4j/junit/CleanFiles.java
Patch:
@@ -38,7 +38,7 @@ public CleanFiles(final File... files) {
     }
 
     public CleanFiles(final String... fileNames) {
-        this.files = new ArrayList<File>(fileNames.length);
+        this.files = new ArrayList<>(fileNames.length);
         for (final String fileName : fileNames) {
             this.files.add(new File(fileName));
         }

File: log4j-core/src/test/java/org/apache/logging/log4j/test/appender/FailOnceAppender.java
Patch:
@@ -36,7 +36,7 @@ public class FailOnceAppender extends AbstractAppender {
 
     boolean fail = true;
 
-    private final List<LogEvent> events = new ArrayList<LogEvent>();
+    private final List<LogEvent> events = new ArrayList<>();
 
     private FailOnceAppender(final String name) {
         super(name, null, null, false);
@@ -53,7 +53,7 @@ public void append(final LogEvent event) {
     }
 
     public List<LogEvent> getEvents() {
-        final List<LogEvent> list = new ArrayList<LogEvent>(events);
+        final List<LogEvent> list = new ArrayList<>(events);
         events.clear();
         return list;
     }

File: log4j-core/src/test/java/org/apache/logging/log4j/test/appender/ListAppender.java
Patch:
@@ -46,11 +46,11 @@ public class ListAppender extends AbstractAppender {
 
     // Use CopyOnWriteArrayList?
 
-    private final List<LogEvent> events = new ArrayList<LogEvent>();
+    private final List<LogEvent> events = new ArrayList<>();
 
-    private final List<String> messages = new ArrayList<String>();
+    private final List<String> messages = new ArrayList<>();
 
-    private final List<byte[]> data = new ArrayList<byte[]>();
+    private final List<byte[]> data = new ArrayList<>();
 
     private final boolean newLine;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java
Patch:
@@ -173,7 +173,7 @@ public Iterator<Filter> getFilters() {
         } else if (filter instanceof CompositeFilter) {
             return ((CompositeFilter) filter).iterator();
         } else {
-            final List<Filter> filters = new ArrayList<Filter>();
+            final List<Filter> filters = new ArrayList<>();
             filters.add(filter);
             return filters.iterator();
         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java
Patch:
@@ -60,8 +60,8 @@ public class LoggerContext extends AbstractLifeCycle implements org.apache.loggi
     public static final String PROPERTY_CONFIG = "config";
     private static final Configuration NULL_CONFIGURATION = new NullConfiguration();
 
-    private final ConcurrentMap<String, Logger> loggers = new ConcurrentHashMap<String, Logger>();
-    private final CopyOnWriteArrayList<PropertyChangeListener> propertyChangeListeners = new CopyOnWriteArrayList<PropertyChangeListener>();
+    private final ConcurrentMap<String, Logger> loggers = new ConcurrentHashMap<>();
+    private final CopyOnWriteArrayList<PropertyChangeListener> propertyChangeListeners = new CopyOnWriteArrayList<>();
 
     /**
      * The Configuration is volatile to guarantee that initialization of the

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractManager.java
Patch:
@@ -36,7 +36,7 @@ public abstract class AbstractManager {
 
     // Need to lock that map instead of using a ConcurrentMap due to stop removing the
     // manager from the map and closing the stream, requiring the whole stop method to be locked.
-    private static final Map<String, AbstractManager> MAP = new HashMap<String, AbstractManager>();
+    private static final Map<String, AbstractManager> MAP = new HashMap<>();
 
     private static final Lock LOCK = new ReentrantLock();
 
@@ -139,6 +139,6 @@ public String getName() {
      * format descriptors are specified.
      */
     public Map<String, String> getContentFormat() {
-        return new HashMap<String, String>();
+        return new HashMap<>();
     }
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java
Patch:
@@ -63,15 +63,15 @@ public final class AsyncAppender extends AbstractAppender {
     private AppenderControl errorAppender;
     private AsyncThread thread;
     private static final AtomicLong threadSequence = new AtomicLong(1);
-    private static ThreadLocal<Boolean> isAppenderThread = new ThreadLocal<Boolean>();
+    private static ThreadLocal<Boolean> isAppenderThread = new ThreadLocal<>();
 
 
     private AsyncAppender(final String name, final Filter filter, final AppenderRef[] appenderRefs,
                            final String errorRef, final int queueSize, final boolean blocking,
                            final boolean ignoreExceptions, final Configuration config,
                            final boolean includeLocation) {
         super(name, filter, null, ignoreExceptions);
-        this.queue = new ArrayBlockingQueue<Serializable>(queueSize);
+        this.queue = new ArrayBlockingQueue<>(queueSize);
         this.queueSize = queueSize;
         this.blocking = blocking;
         this.config = config;
@@ -83,7 +83,7 @@ private AsyncAppender(final String name, final Filter filter, final AppenderRef[
     @Override
     public void start() {
         final Map<String, Appender> map = config.getAppenders();
-        final List<AppenderControl> appenders = new ArrayList<AppenderControl>();
+        final List<AppenderControl> appenders = new ArrayList<>();
         for (final AppenderRef appenderRef : appenderRefs) {
             if (map.containsKey(appenderRef.getRef())) {
                 appenders.add(new AppenderControl(map.get(appenderRef.getRef()), appenderRef.getLevel(),

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FailoverAppender.java
Patch:
@@ -55,7 +55,7 @@ public final class FailoverAppender extends AbstractAppender {
 
     private AppenderControl primary;
 
-    private final List<AppenderControl> failoverAppenders = new ArrayList<AppenderControl>();
+    private final List<AppenderControl> failoverAppenders = new ArrayList<>();
 
     private final long intervalMillis;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileAppender.java
Patch:
@@ -50,7 +50,7 @@ private FileAppender(final String name, final Layout<? extends Serializable> lay
                          final Advertiser advertiser) {
         super(name, layout, filter, ignoreExceptions, immediateFlush, manager);
         if (advertiser != null) {
-            final Map<String, String> configuration = new HashMap<String, String>(layout.getContentFormat());
+            final Map<String, String> configuration = new HashMap<>(layout.getContentFormat());
             configuration.putAll(manager.getContentFormat());
             configuration.put("contentType", layout.getContentType());
             configuration.put("name", name);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java
Patch:
@@ -142,7 +142,7 @@ public int getBufferSize() {
      */
     @Override
     public Map<String, String> getContentFormat() {
-        final Map<String, String> result = new HashMap<String, String>(super.getContentFormat());
+        final Map<String, String> result = new HashMap<>(super.getContentFormat());
         result.put("fileURI", advertiseURI);
         return result;
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileAppender.java
Patch:
@@ -56,7 +56,7 @@ private MemoryMappedFileAppender(final String name, final Layout<? extends Seria
             final boolean ignoreExceptions, final boolean immediateFlush, final Advertiser advertiser) {
         super(name, layout, filter, ignoreExceptions, immediateFlush, manager);
         if (advertiser != null) {
-            final Map<String, String> configuration = new HashMap<String, String>(layout.getContentFormat());
+            final Map<String, String> configuration = new HashMap<>(layout.getContentFormat());
             configuration.putAll(manager.getContentFormat());
             configuration.put("contentType", layout.getContentType());
             configuration.put("name", name);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileManager.java
Patch:
@@ -58,7 +58,7 @@ public class MemoryMappedFileManager extends OutputStreamManager {
     private final int regionLength;
     private final String advertiseURI;
     private final RandomAccessFile randomAccessFile;
-    private final ThreadLocal<Boolean> isEndOfBatch = new ThreadLocal<Boolean>();
+    private final ThreadLocal<Boolean> isEndOfBatch = new ThreadLocal<>();
     private MappedByteBuffer mappedBuffer;
     private long mappingOffset;
 
@@ -251,7 +251,7 @@ public boolean isImmediateFlush() {
      */
     @Override
     public Map<String, String> getContentFormat() {
-        final Map<String, String> result = new HashMap<String, String>(super.getContentFormat());
+        final Map<String, String> result = new HashMap<>(super.getContentFormat());
         result.put("fileURI", advertiseURI);
         return result;
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RandomAccessFileAppender.java
Patch:
@@ -51,7 +51,7 @@ private RandomAccessFileAppender(final String name, final Layout<? extends Seria
             final boolean immediateFlush, final Advertiser advertiser) {
         super(name, layout, filter, ignoreExceptions, immediateFlush, manager);
         if (advertiser != null) {
-            final Map<String, String> configuration = new HashMap<String, String>(
+            final Map<String, String> configuration = new HashMap<>(
                     layout.getContentFormat());
             configuration.putAll(manager.getContentFormat());
             configuration.put("contentType", layout.getContentType());

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RandomAccessFileManager.java
Patch:
@@ -42,7 +42,7 @@ public class RandomAccessFileManager extends OutputStreamManager {
     private final String advertiseURI;
     private final RandomAccessFile randomAccessFile;
     private final ByteBuffer buffer;
-    private final ThreadLocal<Boolean> isEndOfBatch = new ThreadLocal<Boolean>();
+    private final ThreadLocal<Boolean> isEndOfBatch = new ThreadLocal<>();
 
     protected RandomAccessFileManager(final RandomAccessFile file,
             final String fileName, final OutputStream os,
@@ -154,7 +154,7 @@ public int getBufferSize() {
      */
     @Override
     public Map<String, String> getContentFormat() {
-        final Map<String, String> result = new HashMap<String, String>(
+        final Map<String, String> result = new HashMap<>(
                 super.getContentFormat());
         result.put("fileURI", advertiseURI);
         return result;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingFileAppender.java
Patch:
@@ -59,7 +59,7 @@ private RollingFileAppender(final String name, final Layout<? extends Serializab
             final boolean ignoreExceptions, final boolean immediateFlush, final Advertiser advertiser) {
         super(name, layout, filter, ignoreExceptions, immediateFlush, manager);
         if (advertiser != null) {
-            final Map<String, String> configuration = new HashMap<String, String>(layout.getContentFormat());
+            final Map<String, String> configuration = new HashMap<>(layout.getContentFormat());
             configuration.put("contentType", layout.getContentType());
             configuration.put("name", name);
             advertisement = advertiser.advertise(configuration);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppender.java
Patch:
@@ -60,7 +60,7 @@ private RollingRandomAccessFileAppender(final String name, final Layout<? extend
             final boolean immediateFlush, final int bufferSize, final Advertiser advertiser) {
         super(name, layout, filter, ignoreExceptions, immediateFlush, manager);
         if (advertiser != null) {
-            final Map<String, String> configuration = new HashMap<String, String>(layout.getContentFormat());
+            final Map<String, String> configuration = new HashMap<>(layout.getContentFormat());
             configuration.put("contentType", layout.getContentType());
             configuration.put("name", name);
             advertisement = advertiser.advertise(configuration);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/SocketAppender.java
Patch:
@@ -56,7 +56,7 @@ protected SocketAppender(final String name, final Layout<? extends Serializable>
             final Advertiser advertiser) {
         super(name, layout, filter, ignoreExceptions, immediateFlush, manager);
         if (advertiser != null) {
-            final Map<String, String> configuration = new HashMap<String, String>(layout.getContentFormat());
+            final Map<String, String> configuration = new HashMap<>(layout.getContentFormat());
             configuration.putAll(manager.getContentFormat());
             configuration.put("contentType", layout.getContentType());
             configuration.put("name", name);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/AbstractDatabaseManager.java
Patch:
@@ -43,7 +43,7 @@ public abstract class AbstractDatabaseManager extends AbstractManager implements
     protected AbstractDatabaseManager(final String name, final int bufferSize) {
         super(name);
         this.bufferSize = bufferSize;
-        this.buffer = new ArrayList<LogEvent>(bufferSize + 1);
+        this.buffer = new ArrayList<>(bufferSize + 1);
     }
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java
Patch:
@@ -181,7 +181,7 @@ private int purge(final int lowIndex, final int highIndex, final RollingFileMana
     private int purgeAscending(final int lowIndex, final int highIndex, final RollingFileManager manager) {
         int suffixLength = 0;
 
-        final List<FileRenameAction> renames = new ArrayList<FileRenameAction>();
+        final List<FileRenameAction> renames = new ArrayList<>();
         final StringBuilder buf = new StringBuilder();
 
         // LOG4J2-531: directory scan & rollover must use same format
@@ -298,7 +298,7 @@ private int purgeAscending(final int lowIndex, final int highIndex, final Rollin
     private int purgeDescending(final int lowIndex, final int highIndex, final RollingFileManager manager) {
         int suffixLength = 0;
 
-        final List<FileRenameAction> renames = new ArrayList<FileRenameAction>();
+        final List<FileRenameAction> renames = new ArrayList<>();
         final StringBuilder buf = new StringBuilder();
 
         // LOG4J2-531: directory scan & rollover must use same format

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/PatternProcessor.java
Patch:
@@ -64,8 +64,8 @@ public class PatternProcessor {
      */
     public PatternProcessor(final String pattern) {
         final PatternParser parser = createPatternParser();
-        final List<PatternConverter> converters = new ArrayList<PatternConverter>();
-        final List<FormattingInfo> fields = new ArrayList<FormattingInfo>();
+        final List<PatternConverter> converters = new ArrayList<>();
+        final List<FormattingInfo> fields = new ArrayList<>();
         parser.parse(pattern, converters, fields, false, false);
         final FormattingInfo[] infoArray = new FormattingInfo[fields.size()];
         patternFields = fields.toArray(infoArray);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java
Patch:
@@ -44,7 +44,7 @@ public class RollingRandomAccessFileManager extends RollingFileManager {
     private final boolean isImmediateFlush;
     private RandomAccessFile randomAccessFile;
     private final ByteBuffer buffer;
-    private final ThreadLocal<Boolean> isEndOfBatch = new ThreadLocal<Boolean>();
+    private final ThreadLocal<Boolean> isEndOfBatch = new ThreadLocal<>();
 
     public RollingRandomAccessFileManager(final RandomAccessFile raf, final String fileName,
             final String pattern, final OutputStream os, final boolean append,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ContextAnchor.java
Patch:
@@ -26,7 +26,7 @@ public final class ContextAnchor {
     /**
      * Anchor for the LoggerContext for the current Thread.
      */
-    public static final ThreadLocal<LoggerContext> THREAD_CONTEXT = new ThreadLocal<LoggerContext>();
+    public static final ThreadLocal<LoggerContext> THREAD_CONTEXT = new ThreadLocal<>();
 
     private ContextAnchor() {
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java
Patch:
@@ -246,7 +246,7 @@ private static Map<String, String> createMap(final List<Property> properties) {
         if (properties == null || properties.isEmpty()) {
             return contextMap; // contextMap is not null
         }
-        final Map<String, String> map = new HashMap<String, String>(contextMap);
+        final Map<String, String> map = new HashMap<>(contextMap);
 
         for (final Property prop : properties) {
             if (!map.containsKey(prop.getName())) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableFormatOptions.java
Patch:
@@ -214,7 +214,7 @@ public static ThrowableFormatOptions newInstance(String[] options) {
                     if (filterStr.length() > 0) {
                         final String[] array = filterStr.split(Patterns.COMMA_SEPARATOR);
                         if (array.length > 0) {
-                            packages = new ArrayList<String>(array.length);
+                            packages = new ArrayList<>(array.length);
                             for (String token : array) {
                                 token = token.trim();
                                 if (token.length() > 0) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java
Patch:
@@ -112,7 +112,7 @@ public ThrowableProxy(final Throwable throwable) {
         this.name = throwable.getClass().getName();
         this.message = throwable.getMessage();
         this.localizedMessage = throwable.getLocalizedMessage();
-        final Map<String, CacheEntry> map = new HashMap<String, CacheEntry>();
+        final Map<String, CacheEntry> map = new HashMap<>();
         final Stack<Class<?>> stack = ReflectionUtil.getCurrentStackTrace();
         this.extendedStackTrace = this.toExtendedStackTrace(stack, map, null, throwable.getStackTrace());
         final Throwable throwableCause = throwable.getCause();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/ListOfMapEntryDeserializer.java
Patch:
@@ -46,7 +46,7 @@ public Map<String, String> deserialize(final JsonParser jp, final Deserializatio
         final List<MapEntry> list = jp.readValueAs(new TypeReference<List<MapEntry>>() {
             // empty
         });
-        final HashMap<String, String> map = new HashMap<String, String>(list.size());
+        final HashMap<String, String> map = new HashMap<>(list.size());
         for (final MapEntry mapEntry : list) {
             map.put(mapEntry.getKey(), mapEntry.getValue());
         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractLayout.java
Patch:
@@ -65,7 +65,7 @@ public AbstractLayout(final byte[] header, final byte[] footer) {
 
     @Override
     public Map<String, String> getContentFormat() {
-        return new HashMap<String, String>();
+        return new HashMap<>();
     }
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java
Patch:
@@ -223,7 +223,7 @@ private void appendThrowableAsHtml(final Throwable throwable, final StringBuilde
         }
         pw.flush();
         final LineNumberReader reader = new LineNumberReader(new StringReader(sw.toString()));
-        final ArrayList<String> lines = new ArrayList<String>();
+        final ArrayList<String> lines = new ArrayList<>();
         try {
           String line = reader.readLine();
           while (line != null) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JacksonFactory.java
Patch:
@@ -105,7 +105,7 @@ protected PrettyPrinter newPrettyPrinter() {
 
     ObjectWriter newWriter(final boolean locationInfo, final boolean properties, final boolean compact) {
         final SimpleFilterProvider filters = new SimpleFilterProvider();
-        final Set<String> except = new HashSet<String>(2);
+        final Set<String> except = new HashSet<>(2);
         if (!locationInfo) {
             except.add(this.getPropertNameForSource());
         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JsonLayout.java
Patch:
@@ -834,7 +834,7 @@ public byte[] getFooter() {
 
     @Override
     public Map<String, String> getContentFormat() {
-        final Map<String, String> result = new HashMap<String, String>();
+        final Map<String, String> result = new HashMap<>();
         result.put("version", "2.0");
         return result;
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/LoggerFields.java
Patch:
@@ -75,7 +75,7 @@ public static LoggerFields createLoggerFields(
         @PluginAttribute("sdId") final String sdId,
         @PluginAttribute("enterpriseId") final String enterpriseId,
         @PluginAttribute(value = "discardIfAllFieldsAreEmpty", defaultBoolean = false) final boolean discardIfAllFieldsAreEmpty) {
-        final Map<String, String> map = new HashMap<String, String>();
+        final Map<String, String> map = new HashMap<>();
 
         for (final KeyValuePair keyValuePair : keyValuePairs) {
             map.put(keyValuePair.getKey(), keyValuePair.getValue());

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java
Patch:
@@ -175,7 +175,7 @@ public String getConversionPattern() {
     @Override
     public Map<String, String> getContentFormat()
     {
-        final Map<String, String> result = new HashMap<String, String>();
+        final Map<String, String> result = new HashMap<>();
         result.put("structured", "false");
         result.put("formatType", "conversion");
         result.put("format", conversionPattern);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/SyslogLayout.java
Patch:
@@ -123,7 +123,7 @@ private synchronized void addDate(final long timestamp, final StringBuilder buf)
      */
     @Override
     public Map<String, String> getContentFormat() {
-        final Map<String, String> result = new HashMap<String, String>();
+        final Map<String, String> result = new HashMap<>();
         result.put("structured", "false");
         result.put("formatType", "logfilepatternreceiver");
         result.put("dateFormat", dateFormat.toPattern());

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/XmlLayout.java
Patch:
@@ -248,7 +248,7 @@ public byte[] getFooter() {
      */
     @Override
     public Map<String, String> getContentFormat() {
-        final Map<String, String> result = new HashMap<String, String>();
+        final Map<String, String> result = new HashMap<>();
         // result.put("dtd", "log4j-events.dtd");
         result.put("xsd", "log4j-events.xsd");
         result.put("version", "2.0");

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java
Patch:
@@ -38,7 +38,7 @@ public class Interpolator extends AbstractLookup {
     /** Constant for the prefix separator. */
     private static final char PREFIX_SEPARATOR = ':';
 
-    private final Map<String, StrLookup> lookups = new HashMap<String, StrLookup>();
+    private final Map<String, StrLookup> lookups = new HashMap<>();
 
     private final StrLookup defaultLookup;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/MapLookup.java
Patch:
@@ -46,7 +46,7 @@ static Map<String, String> initMap(final String[] srcArgs, final Map<String, Str
     }
 
     private static HashMap<String, String> newMap(final int initialCapacity) {
-        return new HashMap<String, String>(initialCapacity);
+        return new HashMap<>(initialCapacity);
     }
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java
Patch:
@@ -364,7 +364,7 @@ public static String replace(final Object source, final Properties valueProperti
         if (valueProperties == null) {
             return source.toString();
         }
-        final Map<String, String> valueMap = new HashMap<String, String>();
+        final Map<String, String> valueMap = new HashMap<>();
         final Enumeration<?> propNames = valueProperties.propertyNames();
         while (propNames.hasMoreElements()) {
             final String propName = (String) propNames.nextElement();
@@ -944,7 +944,7 @@ private int substitute(final LogEvent event, final StringBuilder buf, final int
 
                                 // on the first call initialize priorVariables
                                 if (priorVariables == null) {
-                                    priorVariables = new ArrayList<String>();
+                                    priorVariables = new ArrayList<>();
                                     priorVariables.add(new String(chars,
                                             offset, length + lengthChange));
                                 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/AbstractSocketManager.java
Patch:
@@ -72,7 +72,7 @@ public AbstractSocketManager(final String name, final OutputStream os, final Ine
      */
     @Override
     public Map<String, String> getContentFormat() {
-        final Map<String, String> result = new HashMap<String, String>(super.getContentFormat());
+        final Map<String, String> result = new HashMap<>(super.getContentFormat());
         result.put("port", Integer.toString(port));
         result.put("address", inetAddress.getHostAddress());
         return result;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/DatagramSocketManager.java
Patch:
@@ -77,7 +77,7 @@ public static DatagramSocketManager getSocketManager(final String host, final in
      */
     @Override
     public Map<String, String> getContentFormat() {
-        final Map<String, String> result = new HashMap<String, String>(super.getContentFormat());
+        final Map<String, String> result = new HashMap<>(super.getContentFormat());
         result.put("protocol", "udp");
         result.put("direction", "out");
         return result;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/MulticastDnsAdvertiser.java
Patch:
@@ -63,7 +63,7 @@ public MulticastDnsAdvertiser()
     @Override
     public Object advertise(final Map<String, String> properties) {
         //default to tcp if "protocol" was not set
-        final Map<String, String> truncatedProperties = new HashMap<String, String>();
+        final Map<String, String> truncatedProperties = new HashMap<>();
         for (final Map.Entry<String, String> entry:properties.entrySet())
         {
             if (entry.getKey().length() <= 255 && entry.getValue().length() <= 255)
@@ -170,7 +170,7 @@ private static Object buildServiceInfoVersion1(final String zone,
                                                    final Map<String, String> properties) {
         //version 1 uses a hashtable
         @SuppressWarnings("UseOfObsoleteCollectionType")
-        final Hashtable<String, String> hashtableProperties = new Hashtable<String, String>(properties);
+        final Hashtable<String, String> hashtableProperties = new Hashtable<>(properties);
         try {
             return serviceInfoClass
                     .getConstructor(String.class, String.class, int.class, int.class, int.class, Hashtable.class)

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/SmtpManager.java
Patch:
@@ -67,7 +67,7 @@ protected SmtpManager(final String name, final Session session, final MimeMessag
         this.session = session;
         this.message = message;
         this.data = data;
-        this.buffer = new CyclicBuffer<LogEvent>(LogEvent.class, data.numElements);
+        this.buffer = new CyclicBuffer<>(LogEvent.class, data.numElements);
     }
 
     public void add(final LogEvent event) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java
Patch:
@@ -167,7 +167,7 @@ public int getConnectTimeoutMillis() {
      */
     @Override
     public Map<String, String> getContentFormat() {
-        final Map<String, String> result = new HashMap<String, String>(super.getContentFormat());
+        final Map<String, String> result = new HashMap<>(super.getContentFormat());
         result.put("protocol", "tcp");
         result.put("direction", "out");
         return result;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/server/JmsServer.java
Patch:
@@ -41,7 +41,7 @@
 public class JmsServer extends LogEventListener implements MessageListener, LifeCycle {
 
     private static final Logger LOGGER = StatusLogger.getLogger();
-    private final AtomicReference<State> state = new AtomicReference<State>(State.INITIALIZED);
+    private final AtomicReference<State> state = new AtomicReference<>(State.INITIALIZED);
     private final JmsManager jmsManager;
     private MessageConsumer messageConsumer;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/server/UdpSocketServer.java
Patch:
@@ -47,7 +47,7 @@ public class UdpSocketServer<T extends InputStream> extends AbstractSocketServer
      *             if an I/O error occurs when opening the socket.
      */
     public static UdpSocketServer<InputStream> createJsonSocketServer(final int port) throws IOException {
-        return new UdpSocketServer<InputStream>(port, new JsonInputStreamLogEventBridge());
+        return new UdpSocketServer<>(port, new JsonInputStreamLogEventBridge());
     }
 
     /**
@@ -60,7 +60,7 @@ public static UdpSocketServer<InputStream> createJsonSocketServer(final int port
      *             if an I/O error occurs when opening the socket.
      */
     public static UdpSocketServer<ObjectInputStream> createSerializedSocketServer(final int port) throws IOException {
-        return new UdpSocketServer<ObjectInputStream>(port, new ObjectInputStreamLogEventBridge());
+        return new UdpSocketServer<>(port, new ObjectInputStreamLogEventBridge());
     }
 
     /**
@@ -73,7 +73,7 @@ public static UdpSocketServer<ObjectInputStream> createSerializedSocketServer(fi
      *             if an I/O error occurs when opening the socket.
      */
     public static UdpSocketServer<InputStream> createXmlSocketServer(final int port) throws IOException {
-        return new UdpSocketServer<InputStream>(port, new XmlInputStreamLogEventBridge());
+        return new UdpSocketServer<>(port, new XmlInputStreamLogEventBridge());
     }
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/Activator.java
Patch:
@@ -38,7 +38,7 @@ public final class Activator implements BundleActivator, SynchronousBundleListen
 
     private static final Logger LOGGER = StatusLogger.getLogger();
 
-    private final AtomicReference<BundleContext> context = new AtomicReference<BundleContext>();
+    private final AtomicReference<BundleContext> context = new AtomicReference<>();
 
     @Override
     public void start(final BundleContext context) throws Exception {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/BundleContextSelector.java
Patch:
@@ -67,14 +67,14 @@ private static LoggerContext locateContext(final Bundle bundle, final URI config
         if (ref == null) {
             final LoggerContext context = new LoggerContext(name, bundle, configLocation);
             CONTEXT_MAP.putIfAbsent(name,
-                new AtomicReference<WeakReference<LoggerContext>>(new WeakReference<LoggerContext>(context)));
+                new AtomicReference<>(new WeakReference<>(context)));
             return CONTEXT_MAP.get(name).get().get();
         }
         final WeakReference<LoggerContext> r = ref.get();
         final LoggerContext ctx = r.get();
         if (ctx == null) {
             final LoggerContext context = new LoggerContext(name, bundle, configLocation);
-            ref.compareAndSet(r, new WeakReference<LoggerContext>(context));
+            ref.compareAndSet(r, new WeakReference<>(context));
             return ref.get().get();
         }
         final URI oldConfigLocation = ctx.getConfigLocation();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/AnsiEscape.java
Patch:
@@ -289,7 +289,7 @@ public static Map<String, String> createMap(final String values, final String[]
     public static Map<String, String> createMap(final String[] values, final String[] dontEscapeKeys) {
         final String[] sortedIgnoreKeys = dontEscapeKeys != null ? dontEscapeKeys.clone() : new String[0];
         Arrays.sort(sortedIgnoreKeys);
-        final Map<String, String> map = new HashMap<String, String>();
+        final Map<String, String> map = new HashMap<>();
         for (final String string : values) {
             final String[] keyValue = string.split(Patterns.toWhitespaceSeparator("="));
             if (keyValue.length > 1) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/LevelPatternConverter.java
Patch:
@@ -61,7 +61,7 @@ public static LevelPatternConverter newInstance(final String[] options) {
         if (options == null || options.length == 0) {
             return INSTANCE;
         }
-        final Map<Level, String> levelMap = new HashMap<Level, String>();
+        final Map<Level, String> levelMap = new HashMap<>();
         int length = Integer.MAX_VALUE; // More than the longest level name.
         boolean lowerCase = false;
         final String[] definitions = options[0].split(Patterns.COMMA_SEPARATOR);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java
Patch:
@@ -78,7 +78,7 @@ public void format(final LogEvent event, final StringBuilder toAppendTo) {
                 return;
             }
             final StringBuilder sb = new StringBuilder("{");
-            final Set<String> keys = new TreeSet<String>(map.keySet());
+            final Set<String> keys = new TreeSet<>(map.keySet());
             for (final String key : keys) {
                 if (sb.length() > 1) {
                     sb.append(", ");

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MdcPatternConverter.java
Patch:
@@ -74,7 +74,7 @@ public void format(final LogEvent event, final StringBuilder toAppendTo) {
                 return;
             }
             final StringBuilder sb = new StringBuilder("{");
-            final Set<String> keys = new TreeSet<String>(contextMap.keySet());
+            final Set<String> keys = new TreeSet<>(contextMap.keySet());
             for (final String key : keys) {
                 if (sb.length() > 1) {
                     sb.append(", ");

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java
Patch:
@@ -66,7 +66,7 @@ public static NameAbbreviator getAbbreviator(final String pattern) {
                 return new MaxElementAbbreviator(Integer.parseInt(trimmed));
             }
 
-            final ArrayList<PatternAbbreviatorFragment> fragments = new ArrayList<PatternAbbreviatorFragment>(5);
+            final ArrayList<PatternAbbreviatorFragment> fragments = new ArrayList<>(5);
             char ellipsis;
             int charCount;
             int pos = 0;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/selector/BasicContextSelector.java
Patch:
@@ -57,7 +57,7 @@ public void removeContext(final LoggerContext context) {
 
     @Override
     public List<LoggerContext> getLoggerContexts() {
-        final List<LoggerContext> list = new ArrayList<LoggerContext>();
+        final List<LoggerContext> list = new ArrayList<>();
         list.add(CONTEXT);
         return Collections.unmodifiableList(list);
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/selector/JndiContextSelector.java
Patch:
@@ -88,7 +88,7 @@ public class JndiContextSelector implements NamedContextSelector {
     private static final LoggerContext CONTEXT = new LoggerContext("Default");
 
     private static final ConcurrentMap<String, LoggerContext> CONTEXT_MAP =
-        new ConcurrentHashMap<String, LoggerContext>();
+        new ConcurrentHashMap<>();
 
     private static final StatusLogger LOGGER = StatusLogger.getLogger();
 
@@ -150,7 +150,7 @@ public LoggerContext removeContext(final String name) {
 
     @Override
     public List<LoggerContext> getLoggerContexts() {
-        final List<LoggerContext> list = new ArrayList<LoggerContext>(CONTEXT_MAP.values());
+        final List<LoggerContext> list = new ArrayList<>(CONTEXT_MAP.values());
         return Collections.unmodifiableList(list);
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/tools/Generate.java
Patch:
@@ -453,7 +453,7 @@ static class LevelInfo {
         }
 
         public static List<LevelInfo> parse(final List<String> values, final Class<?> generator) {
-            final List<LevelInfo> result = new ArrayList<Generate.LevelInfo>(values.size());
+            final List<LevelInfo> result = new ArrayList<>(values.size());
             for (int i = 0; i < values.size(); i++) {
                 try {
                     result.add(new LevelInfo(values.get(i)));
@@ -476,7 +476,7 @@ static void generate(final String[] args, final Type type, final PrintStream pri
             usage(printStream, type.generator());
             System.exit(-1);
         }
-        final List<String> values = new ArrayList<String>(Arrays.asList(args));
+        final List<String> values = new ArrayList<>(Arrays.asList(args));
         final String classFQN = values.remove(0);
         final List<LevelInfo> levels = LevelInfo.parse(values, type.generator());
         printStream.println(generateSource(classFQN, levels, type));

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/SetUtils.java
Patch:
@@ -35,7 +35,7 @@ private SetUtils() {}
      * @return an array of the matching strings from the given set
      */
     public static String[] prefixSet(final Set<String> set, final String prefix) {
-        final Set<String> prefixSet = new HashSet<String>();
+        final Set<String> prefixSet = new HashSet<>();
         for (final String str : set) {
             if (str.startsWith(prefix)) {
                 prefixSet.add(str);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/Throwables.java
Patch:
@@ -128,7 +128,7 @@ public static List<String> toStringList(final Throwable throwable) {
             // Ignore any exceptions.
         }
         pw.flush();
-        final List<String> lines = new ArrayList<String>();
+        final List<String> lines = new ArrayList<>();
         final LineNumberReader reader = new LineNumberReader(new StringReader(sw.toString()));
         try {
             String line = reader.readLine();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java
Patch:
@@ -77,9 +77,9 @@ public final class BurstFilter extends AbstractFilter {
 
     private final long burstInterval;
 
-    private final DelayQueue<LogDelay> history = new DelayQueue<LogDelay>();
+    private final DelayQueue<LogDelay> history = new DelayQueue<>();
 
-    private final Queue<LogDelay> available = new ConcurrentLinkedQueue<LogDelay>();
+    private final Queue<LogDelay> available = new ConcurrentLinkedQueue<>();
 
     static LogDelay createLogDelay(long expireTime) {
         return new LogDelay(expireTime);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/CompositeFilter.java
Patch:
@@ -45,7 +45,7 @@ public final class CompositeFilter extends AbstractLifeCycle implements Iterable
     private final List<Filter> filters;
 
     private CompositeFilter() {
-        this.filters = new ArrayList<Filter>();
+        this.filters = new ArrayList<>();
     }
 
     private CompositeFilter(final List<Filter> filters) {
@@ -61,7 +61,7 @@ public CompositeFilter addFilter(final Filter filter) {
             // null does nothing
             return this;
         }
-        final List<Filter> filterList = new ArrayList<Filter>(this.filters);
+        final List<Filter> filterList = new ArrayList<>(this.filters);
         filterList.add(filter);
         return new CompositeFilter(Collections.unmodifiableList(filterList));
     }
@@ -71,7 +71,7 @@ public CompositeFilter removeFilter(final Filter filter) {
             // null does nothing
             return this;
         }
-        final List<Filter> filterList = new ArrayList<Filter>(this.filters);
+        final List<Filter> filterList = new ArrayList<>(this.filters);
         filterList.remove(filter);
         return new CompositeFilter(Collections.unmodifiableList(filterList));
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java
Patch:
@@ -57,7 +57,7 @@ public static DynamicThresholdFilter createFilter(
             @PluginAttribute("defaultThreshold") final Level defaultThreshold,
             @PluginAttribute("onMatch") final Result onMatch,
             @PluginAttribute("onMismatch") final Result onMismatch) {
-        final Map<String, Level> map = new HashMap<String, Level>();
+        final Map<String, Level> map = new HashMap<>();
         for (final KeyValuePair pair : pairs) {
             map.put(pair.getKey(), Level.toLevel(pair.getValue()));
         }
@@ -67,7 +67,7 @@ public static DynamicThresholdFilter createFilter(
     private Level defaultThreshold = Level.ERROR;
     private final String key;
 
-    private Map<String, Level> levelMap = new HashMap<String, Level>();
+    private Map<String, Level> levelMap = new HashMap<>();
 
     private DynamicThresholdFilter(final String key, final Map<String, Level> pairs, final Level defaultLevel,
                                    final Result onMatch, final Result onMismatch) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/MapFilter.java
Patch:
@@ -130,7 +130,7 @@ public static MapFilter createFilter(
             LOGGER.error("keys and values must be specified for the MapFilter");
             return null;
         }
-        final Map<String, List<String>> map = new HashMap<String, List<String>>();
+        final Map<String, List<String>> map = new HashMap<>();
         for (final KeyValuePair pair : pairs) {
             final String key = pair.getKey();
             if (key == null) {
@@ -146,7 +146,7 @@ public static MapFilter createFilter(
             if (list != null) {
                 list.add(value);
             } else {
-                list = new ArrayList<String>();
+                list = new ArrayList<>();
                 list.add(value);
                 map.put(pair.getKey(), list);
             }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/StructuredDataFilter.java
Patch:
@@ -114,7 +114,7 @@ public static StructuredDataFilter createFilter(
             LOGGER.error("keys and values must be specified for the StructuredDataFilter");
             return null;
         }
-        final Map<String, List<String>> map = new HashMap<String, List<String>>();
+        final Map<String, List<String>> map = new HashMap<>();
         for (final KeyValuePair pair : pairs) {
             final String key = pair.getKey();
             if (key == null) {
@@ -130,7 +130,7 @@ public static StructuredDataFilter createFilter(
             if (list != null) {
                 list.add(value);
             } else {
-                list = new ArrayList<String>();
+                list = new ArrayList<>();
                 list.add(value);
                 map.put(pair.getKey(), list);
             }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/ThreadContextMapFilter.java
Patch:
@@ -124,7 +124,7 @@ public static ThreadContextMapFilter createFilter(
             LOGGER.error("key and value pairs must be specified for the ThreadContextMapFilter");
             return null;
         }
-        final Map<String, List<String>> map = new HashMap<String, List<String>>();
+        final Map<String, List<String>> map = new HashMap<>();
         for (final KeyValuePair pair : pairs) {
             final String key = pair.getKey();
             if (key == null) {
@@ -140,7 +140,7 @@ public static ThreadContextMapFilter createFilter(
             if (list != null) {
                 list.add(value);
             } else {
-                list = new ArrayList<String>();
+                list = new ArrayList<>();
                 list.add(value);
                 map.put(pair.getKey(), list);
             }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java
Patch:
@@ -31,7 +31,7 @@ public class AppenderControl extends AbstractFilterable {
 
     private static final long serialVersionUID = 1L;
 
-    private final ThreadLocal<AppenderControl> recursive = new ThreadLocal<AppenderControl>();
+    private final ThreadLocal<AppenderControl> recursive = new ThreadLocal<>();
 
     private final Appender appender;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppendersPlugin.java
Patch:
@@ -43,7 +43,7 @@ public static ConcurrentMap<String, Appender> createAppenders(
                 @PluginElement("Appenders") final Appender[] appenders) {
 
         final ConcurrentMap<String, Appender> map =
-            new ConcurrentHashMap<String, Appender>();
+            new ConcurrentHashMap<>();
 
         for (final Appender appender : appenders) {
                 map.put(appender.getName(), appender);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
Patch:
@@ -132,7 +132,7 @@ public static ConfigurationFactory getInstance() {
             LOCK.lock();
             try {
                 if (factories == null) {
-                    final List<ConfigurationFactory> list = new ArrayList<ConfigurationFactory>();
+                    final List<ConfigurationFactory> list = new ArrayList<>();
                     final String factoryClass = PropertiesUtil.getProperties().getStringProperty(CONFIGURATION_FACTORY_PROPERTY);
                     if (factoryClass != null) {
                         addFactory(list, factoryClass);
@@ -141,7 +141,7 @@ public static ConfigurationFactory getInstance() {
                     manager.collectPlugins();
                     final Map<String, PluginType<?>> plugins = manager.getPlugins();
                     final List<Class<? extends ConfigurationFactory>> ordered =
-                        new ArrayList<Class<? extends ConfigurationFactory>>(plugins.size());
+                        new ArrayList<>(plugins.size());
                     for (final PluginType<?> type : plugins.values()) {
                         try {
                             ordered.add(type.getPluginClass().asSubclass(ConfigurationFactory.class));

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggersPlugin.java
Patch:
@@ -39,7 +39,7 @@ private LoggersPlugin() {
      */
     @PluginFactory
     public static Loggers createLoggers(@PluginElement("Loggers") final LoggerConfig[] loggers) {
-        final ConcurrentMap<String, LoggerConfig> loggerMap = new ConcurrentHashMap<String, LoggerConfig>();
+        final ConcurrentMap<String, LoggerConfig> loggerMap = new ConcurrentHashMap<>();
         LoggerConfig root = null;
 
         for (final LoggerConfig logger : loggers) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/Node.java
Patch:
@@ -40,8 +40,8 @@ public class Node {
     private final String name;
     private String value;
     private final PluginType<?> type;
-    private final Map<String, String> attributes = new HashMap<String, String>();
-    private final List<Node> children = new ArrayList<Node>();
+    private final Map<String, String> attributes = new HashMap<>();
+    private final List<Node> children = new ArrayList<>();
     private Object object;
 
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/PropertiesPlugin.java
Patch:
@@ -48,7 +48,7 @@ public static StrLookup configureSubstitutor(@PluginElement("Properties") final
         if (properties == null) {
             return new Interpolator(config.getProperties());
         }
-        final Map<String, String> map = new HashMap<String, String>(config.getProperties());
+        final Map<String, String> map = new HashMap<>(config.getProperties());
 
         for (final Property prop : properties) {
             map.put(prop.getName(), prop.getValue());

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java
Patch:
@@ -47,7 +47,7 @@ public class JsonConfiguration extends AbstractConfiguration implements Reconfig
 
     private static final long serialVersionUID = 1L;
     private static final String[] VERBOSE_CLASSES = new String[] { ResolverUtil.class.getName() };
-    private final List<Status> status = new ArrayList<Status>();
+    private final List<Status> status = new ArrayList<>();
     private JsonNode root;
 
     public JsonConfiguration(final ConfigurationSource configSource) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/convert/TypeConverterRegistry.java
Patch:
@@ -43,7 +43,7 @@ public class TypeConverterRegistry {
     private static volatile TypeConverterRegistry INSTANCE;
     private static final Object INSTANCE_LOCK = new Object();
 
-    private final ConcurrentMap<Type, TypeConverter<?>> registry = new ConcurrentHashMap<Type, TypeConverter<?>>();
+    private final ConcurrentMap<Type, TypeConverter<?>> registry = new ConcurrentHashMap<>();
 
     /**
      * Gets the singleton instance of the TypeConverterRegistry.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginCache.java
Patch:
@@ -35,7 +35,7 @@
  */
 public class PluginCache {
     private final Map<String, Map<String, PluginEntry>> categories =
-        new LinkedHashMap<String, Map<String, PluginEntry>>();
+        new LinkedHashMap<>();
 
     /**
      * Returns all categories of plugins in this cache.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java
Patch:
@@ -156,7 +156,7 @@ public Collection<PluginEntry> visitType(final TypeElement e, final Plugin plugi
             if (aliases == null) {
                 return DEFAULT_VALUE;
             }
-            final Collection<PluginEntry> entries = new ArrayList<PluginEntry>(aliases.value().length);
+            final Collection<PluginEntry> entries = new ArrayList<>(aliases.value().length);
             for (final String alias : aliases.value()) {
                 final PluginEntry entry = new PluginEntry();
                 entry.setKey(alias.toLowerCase());

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginManager.java
Patch:
@@ -33,12 +33,12 @@
  */
 public class PluginManager {
 
-    private static final CopyOnWriteArrayList<String> PACKAGES = new CopyOnWriteArrayList<String>();
+    private static final CopyOnWriteArrayList<String> PACKAGES = new CopyOnWriteArrayList<>();
     private static final String LOG4J_PACKAGES = "org.apache.logging.log4j.core";
 
     private static final Logger LOGGER = StatusLogger.getLogger();
 
-    private Map<String, PluginType<?>> plugins = new HashMap<String, PluginType<?>>();
+    private Map<String, PluginType<?>> plugins = new HashMap<>();
     private final String category;
 
     /**
@@ -126,7 +126,7 @@ public void collectPlugins() {
      */
     public void collectPlugins(final List<String> packages) {
         final String categoryLowerCase = category.toLowerCase();
-        final Map<String, PluginType<?>> newPlugins = new LinkedHashMap<String, PluginType<?>>();
+        final Map<String, PluginType<?>> newPlugins = new LinkedHashMap<>();
 
         // First, iterate the Log4j2Plugin.dat files found in the main CLASSPATH
         Map<String, List<PluginType<?>>> builtInPlugins = PluginRegistry.getInstance().loadFromMainClassLoader();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/ResolverUtil.java
Patch:
@@ -87,10 +87,10 @@ public class ResolverUtil {
     private static final String BUNDLE_RESOURCE = "bundleresource";
 
     /** The set of matches being accumulated. */
-    private final Set<Class<?>> classMatches = new HashSet<Class<?>>();
+    private final Set<Class<?>> classMatches = new HashSet<>();
 
     /** The set of matches being accumulated. */
-    private final Set<URI> resourceMatches = new HashSet<URI>();
+    private final Set<URI> resourceMatches = new HashSet<>();
 
     /**
      * The ClassLoader to use when looking for classes. If null then the ClassLoader returned by

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/validation/ConstraintValidators.java
Patch:
@@ -43,7 +43,7 @@ private ConstraintValidators() {
      */
     public static Collection<ConstraintValidator<?>> findValidators(final Annotation... annotations) {
         final Collection<ConstraintValidator<?>> validators =
-            new ArrayList<ConstraintValidator<?>>();
+            new ArrayList<>();
         for (final Annotation annotation : annotations) {
             final Class<? extends Annotation> type = annotation.annotationType();
             if (type.isAnnotationPresent(Constraint.class)) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/visitors/PluginElementVisitor.java
Patch:
@@ -43,8 +43,8 @@ public Object visit(final Configuration configuration, final Node node, final Lo
         final String name = this.annotation.value();
         if (this.conversionType.isArray()) {
             setConversionType(this.conversionType.getComponentType());
-            final List<Object> values = new ArrayList<Object>();
-            final Collection<Node> used = new ArrayList<Node>();
+            final List<Object> values = new ArrayList<>();
+            final Collection<Node> used = new ArrayList<>();
             log.append("={");
             boolean first = true;
             for (final Node child : node.getChildren()) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java
Patch:
@@ -67,7 +67,7 @@ public class XmlConfiguration extends AbstractConfiguration implements Reconfigu
     private static final String[] VERBOSE_CLASSES = new String[] { ResolverUtil.class.getName() };
     private static final String LOG4J_XSD = "Log4j-config.xsd";
 
-    private final List<Status> status = new ArrayList<Status>();
+    private final List<Status> status = new ArrayList<>();
     private Element rootElement;
     private boolean strict;
     private String schemaResource;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java
Patch:
@@ -70,7 +70,7 @@ class AsyncLoggerConfigHelper {
     private static ExecutorService executor;
 
     private static volatile int count = 0;
-    private static ThreadLocal<Boolean> isAppenderThread = new ThreadLocal<Boolean>();
+    private static ThreadLocal<Boolean> isAppenderThread = new ThreadLocal<>();
 
     /**
      * Factory used to populate the RingBuffer with events. These event objects
@@ -114,8 +114,7 @@ private static synchronized void initDisruptor() {
         final WaitStrategy waitStrategy = createWaitStrategy();
         executor = Executors.newSingleThreadExecutor(threadFactory);
         initThreadLocalForExecutorThread();
-        disruptor = new Disruptor<Log4jEventWrapper>(FACTORY, ringBufferSize,
-                executor, ProducerType.MULTI, waitStrategy);
+        disruptor = new Disruptor<>(FACTORY, ringBufferSize, executor, ProducerType.MULTI, waitStrategy);
         final EventHandler<Log4jEventWrapper>[] handlers = new Log4jEventWrapperHandler[] {//
         new Log4jEventWrapperHandler() };
         final ExceptionHandler<Log4jEventWrapper> errorHandler = getExceptionHandler();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContextSelector.java
Patch:
@@ -40,7 +40,7 @@ public LoggerContext getContext(final String fqcn, final ClassLoader loader, fin
 
     @Override
     public List<LoggerContext> getLoggerContexts() {
-        final List<LoggerContext> list = new ArrayList<LoggerContext>();
+        final List<LoggerContext> list = new ArrayList<>();
         list.add(CONTEXT);
         return Collections.unmodifiableList(list);
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java
Patch:
@@ -217,7 +217,7 @@ public void mergePropertiesIntoContextMap(final Map<Property, Boolean> propertie
         }
 
         final Map<String, String> map = contextMap == null ? new HashMap<String, String>()
-                : new HashMap<String, String>(contextMap);
+                : new HashMap<>(contextMap);
 
         for (final Map.Entry<Property, Boolean> entry : properties.entrySet()) {
             final Property prop = entry.getKey();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java
Patch:
@@ -83,7 +83,7 @@ public class AsyncLogger extends Logger {
     private static final int RINGBUFFER_DEFAULT_SIZE = 256 * 1024;
     private static final StatusLogger LOGGER = StatusLogger.getLogger();
     private static final ThreadNameStrategy THREAD_NAME_STRATEGY = ThreadNameStrategy.create();
-    private static final ThreadLocal<Info> threadlocalInfo = new ThreadLocal<Info>();
+    private static final ThreadLocal<Info> threadlocalInfo = new ThreadLocal<>();
 
     static enum ThreadNameStrategy { // LOG4J2-467
         CACHED {
@@ -122,8 +122,8 @@ static ThreadNameStrategy create() {
         final int ringBufferSize = calculateRingBufferSize();
 
         final WaitStrategy waitStrategy = createWaitStrategy();
-        disruptor = new Disruptor<RingBufferLogEvent>(RingBufferLogEvent.FACTORY, ringBufferSize, executor,
-                ProducerType.MULTI, waitStrategy);
+        disruptor = new Disruptor<>(RingBufferLogEvent.FACTORY, ringBufferSize, executor, ProducerType.MULTI,
+                waitStrategy);
         disruptor.handleExceptionsWith(getExceptionHandler());
         disruptor.handleEventsWith(new RingBufferLogEventHandler());
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java
Patch:
@@ -50,8 +50,7 @@ public final class RoutingAppender extends AbstractAppender {
     private final Routes routes;
     private final Route defaultRoute;
     private final Configuration config;
-    private final ConcurrentMap<String, AppenderControl> appenders =
-            new ConcurrentHashMap<String, AppenderControl>();
+    private final ConcurrentMap<String, AppenderControl> appenders = new ConcurrentHashMap<>();
     private final RewritePolicy rewritePolicy;
 
     private RoutingAppender(final String name, final Filter filter, final boolean ignoreExceptions, final Routes routes,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rewrite/MapRewritePolicy.java
Patch:
@@ -63,7 +63,7 @@ public LogEvent rewrite(final LogEvent source) {
             return source;
         }
 
-        final Map<String, String> newMap = new HashMap<String, String>(((MapMessage) msg).getData());
+        final Map<String, String> newMap = new HashMap<>(((MapMessage) msg).getData());
         switch (mode) {
             case Add: {
                 newMap.putAll(map);
@@ -145,7 +145,7 @@ public static MapRewritePolicy createPolicy(
             LOGGER.error("keys and values must be specified for the MapRewritePolicy");
             return null;
         }
-        final Map<String, String> map = new HashMap<String, String>();
+        final Map<String, String> map = new HashMap<>();
         for (final KeyValuePair pair : pairs) {
             final String key = pair.getKey();
             if (key == null) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rewrite/RewriteAppender.java
Patch:
@@ -42,7 +42,7 @@ public final class RewriteAppender extends AbstractAppender {
     private static final long serialVersionUID = 1L;
 
     private final Configuration config;
-    private final ConcurrentMap<String, AppenderControl> appenders = new ConcurrentHashMap<String, AppenderControl>();
+    private final ConcurrentMap<String, AppenderControl> appenders = new ConcurrentHashMap<>();
     private final RewritePolicy rewritePolicy;
     private final AppenderRef[] appenderRefs;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java
Patch:
@@ -101,7 +101,7 @@ private Throwable convertString(final ListIterator<String> lines, final boolean
             throwableClassName = firstLine;
         }
 
-        final List<StackTraceElement> stackTrace = new ArrayList<StackTraceElement>();
+        final List<StackTraceElement> stackTrace = new ArrayList<>();
         Throwable cause = null;
         while (lines.hasNext()) {
             final String line = lines.next();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/JdbcDatabaseManager.java
Patch:
@@ -208,7 +208,7 @@ private static final class JdbcDatabaseManagerFactory implements ManagerFactory<
         public JdbcDatabaseManager createManager(final String name, final FactoryData data) {
             final StringBuilder columnPart = new StringBuilder();
             final StringBuilder valuePart = new StringBuilder();
-            final List<Column> columns = new ArrayList<Column>();
+            final List<Column> columns = new ArrayList<>();
             int i = 0;
             for (final ColumnConfig config : data.columnConfigs) {
                 if (i++ > 0) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rewrite/PropertiesRewritePolicy.java
Patch:
@@ -48,7 +48,7 @@ public final class PropertiesRewritePolicy implements RewritePolicy {
 
     private PropertiesRewritePolicy(final Configuration config, final List<Property> props) {
         this.config = config;
-        this.properties = new HashMap<Property, Boolean>(props.size());
+        this.properties = new HashMap<>(props.size());
         for (final Property property : props) {
             final Boolean interpolate = Boolean.valueOf(property.getValue().contains("${"));
             properties.put(property, interpolate);
@@ -63,7 +63,7 @@ private PropertiesRewritePolicy(final Configuration config, final List<Property>
      */
     @Override
     public LogEvent rewrite(final LogEvent source) {
-        final Map<String, String> props = new HashMap<String, String>(source.getContextMap());
+        final Map<String, String> props = new HashMap<>(source.getContextMap());
         for (final Map.Entry<Property, Boolean> entry : properties.entrySet()) {
             final Property prop = entry.getKey();
             props.put(prop.getName(), entry.getValue().booleanValue() ?

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java
Patch:
@@ -107,7 +107,7 @@ public static GelfLayout createLayout(
             //@formatter:off
             @PluginAttribute("host") final String host,
             @PluginElement("AdditionalField") final KeyValuePair[] additionalFields,
-            @PluginAttribute(value = "compressionThreshold",
+            @PluginAttribute(value = "compressionType",
                 defaultString = "GZIP") final CompressionType compressionType,
             @PluginAttribute(value = "compressionThreshold",
                 defaultInt= COMPRESSION_THRESHOLD) final int compressionThreshold) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java
Patch:
@@ -183,14 +183,14 @@ private static WaitStrategy createWaitStrategy() {
         return new BlockingWaitStrategy();
     }
 
-    private static ExceptionHandler getExceptionHandler() {
+    private static ExceptionHandler<RingBufferLogEvent> getExceptionHandler() {
         final String cls = PropertiesUtil.getProperties().getStringProperty("AsyncLogger.ExceptionHandler");
         if (cls == null) {
             LOGGER.debug("No AsyncLogger.ExceptionHandler specified");
             return null;
         }
         try {
-            final ExceptionHandler result = Loader.newCheckedInstanceOf(cls, ExceptionHandler.class);
+            final ExceptionHandler<RingBufferLogEvent> result = Loader.newCheckedInstanceOf(cls, ExceptionHandler.class);
             LOGGER.debug("AsyncLogger.ExceptionHandler={}", result);
             return result;
         } catch (final Exception ignored) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/ResolverUtil.java
Patch:
@@ -243,8 +243,7 @@ String extractPath(final URL url) throws UnsupportedEncodingException, URISyntax
             // if URL-encoded file exists, don't decode it
             return cleanPath;
         }
-        urlPath = URLDecoder.decode(urlPath, Constants.UTF_8.name());
-        return urlPath;
+        return URLDecoder.decode(urlPath, Constants.UTF_8.name());
     }
 
     private void loadImplementationsInBundle(final Test test, final String packageName) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java
Patch:
@@ -71,7 +71,6 @@ public static File fileFromUri(URI uri) {
                     return file;
                 }
                 uri = new File(path).toURI();
-                System.out.println("new uri: " + uri.toString());
             } catch (final Exception ex) {
                 LOGGER.warn("Invalid URI {}", uri);
                 return null;
@@ -80,12 +79,10 @@ public static File fileFromUri(URI uri) {
         final String charsetName = Constants.UTF_8.name();
         try {
             String fileName = uri.toURL().getFile();
-            System.out.println("Testing FileName:  " + fileName);
             if (new File(fileName).exists()) { // LOG4J2-466
                 return new File(fileName); // allow files with '+' char in name
             }
             fileName = URLDecoder.decode(fileName, charsetName);
-            System.out.println("Decoded fileName: " + fileName);
             return new File(fileName);
         } catch (final MalformedURLException ex) {
             LOGGER.warn("Invalid URL {}", uri, ex);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java
Patch:
@@ -46,7 +46,7 @@ private FileUtils() {
     }
 
       /**
-     * Tries to convert the specified URL to a file object. If this fails,
+     * Tries to convert the specified URI to a file object. If this fails,
      * <b>null</b> is returned.
      *
      * @param uri the URI

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java
Patch:
@@ -69,8 +69,8 @@ public static File fileFromUri(URI uri) {
         final String charsetName = Constants.UTF_8.name();
         try {
             String fileName = uri.toURL().getFile();
+            System.out.println("Testing FileName:  " + fileName);
             if (new File(fileName).exists()) { // LOG4J2-466
-                System.out.println("FileName:  " + fileName);
                 return new File(fileName); // allow files with '+' char in name
             }
             fileName = URLDecoder.decode(fileName, charsetName);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/ssl/SslConfigurationTest.java
Patch:
@@ -41,6 +41,7 @@ public void emptyConfigurationHasDefaultTrustStore() throws IOException {
         final SslConfiguration sc = SslConfiguration.createSSLConfiguration(null, null, null);
         final SSLSocketFactory factory = sc.getSslSocketFactory();
         final SSLSocket clientSocket = (SSLSocket) factory.createSocket(TLS_TEST_HOST, TLS_TEST_PORT);
+        clientSocket.close();
         Assert.assertNotNull(clientSocket);
     }
 

File: log4j-jul/src/main/java/org/apache/logging/log4j/jul/WrappedLogger.java
Patch:
@@ -72,6 +72,6 @@ public <R> R exit(final R result) {
 
     @Override
     public <T extends Throwable> T throwing(final T t) {
-        return throwing(FQCN, Level.ERROR, t);
+        return throwing(FQCN, LevelTranslator.toLevel(java.util.logging.Level.FINER), t);
     }
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java
Patch:
@@ -236,7 +236,7 @@ public static LoggerConfig createLogger(
 
             return new AsyncLoggerConfig(LogManager.ROOT_LOGGER_NAME,
                     appenderRefs, filter, level, additive, properties, config,
-                    includeLocation(includeLocation));
+                    AsyncLoggerConfig.includeLocation(includeLocation));
         }
     }
 }

File: log4j-api/src/test/java/org/apache/logging/log4j/message/StringFormattedMessageTest.java
Patch:
@@ -105,5 +105,8 @@ public void testSerialization() throws IOException, ClassNotFoundException {
         ObjectInputStream in = new ObjectInputStream(bais);
         final StringFormattedMessage actual = (StringFormattedMessage) in.readObject();
         Assert.assertEquals(expected, actual);
+        Assert.assertEquals(expected.getFormat(), actual.getFormat());
+        Assert.assertEquals(expected.getFormattedMessage(), actual.getFormattedMessage());
+        Assert.assertArrayEquals(expected.getParameters(), actual.getParameters());
     }
 }

File: log4j-api/src/main/java/org/apache/logging/log4j/message/StringFormattedMessage.java
Patch:
@@ -133,7 +133,7 @@ private void writeObject(final ObjectOutputStream out) throws IOException {
         stringArgs = new String[argArray.length];
         int i = 0;
         for (final Object obj : argArray) {
-            final String string = obj.toString();
+            final String string = String.valueOf(obj);
             stringArgs[i] = string;
             out.writeUTF(string);
             ++i;

File: log4j-api/src/main/java/org/apache/logging/log4j/message/StringFormattedMessage.java
Patch:
@@ -133,7 +133,9 @@ private void writeObject(final ObjectOutputStream out) throws IOException {
         stringArgs = new String[argArray.length];
         int i = 0;
         for (final Object obj : argArray) {
-            stringArgs[i] = obj.toString();
+            final String string = obj.toString();
+            stringArgs[i] = string;
+            out.writeUTF(string);
             ++i;
         }
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/Log4jStackTraceElementDeserializer.java
Patch:
@@ -62,7 +62,7 @@ public StackTraceElement deserialize(final JsonParser jp, final DeserializationC
                     } else {
                         // An XML number always comes in a string since there is no syntax help as with JSON.
                         try {
-                            lineNumber = Integer.valueOf(jp.getText().trim()).intValue();
+                            lineNumber = Integer.parseInt(jp.getText().trim());
                         } catch (final NumberFormatException e) {
                             throw JsonMappingException.from(jp, "Non-numeric token (" + t + ") for property 'line'", e);
                         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/LifeCycle.java
Patch:
@@ -25,7 +25,7 @@
  * When the {@link #stop()} is called, this goes into the {@link State#STOPPING} state. After successfully being
  * stopped, this goes into the {@link State#STOPPED} state. In most circumstances, implementation classes should
  * store their {@link State} in a {@code volatile} field or inside an
- * {@link java.util.concurrent.atomic.AtomicReference} dependant on synchronization and concurrency requirements.
+ * {@link java.util.concurrent.atomic.AtomicReference} dependent on synchronization and concurrency requirements.
  */
 public interface LifeCycle {
     

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java
Patch:
@@ -127,8 +127,7 @@ protected synchronized void write(final byte[] bytes, final int offset, final in
     }
 
     /**
-     * Some output streams synchronize writes while others do not. Synchronizing here insures that
-     * log events won't be intertwined.
+     * Some output streams synchronize writes while others do not.
      * @param bytes The serialized Log event.
      * @throws AppenderLoggingException if an error occurs.
      */

File: log4j-1.2-api/src/main/java/org/apache/log4j/BasicConfigurator.java
Patch:
@@ -24,9 +24,6 @@ public class BasicConfigurator {
     protected BasicConfigurator() {
     }
 
-    /**
-     * No-op implementation.
-     */
     public static void configure() {
         LogManager.reconfigure();
     }

File: log4j-1.2-api/src/test/java/org/apache/log4j/LoggingTest.java
Patch:
@@ -37,7 +37,7 @@ public void testParent() {
         final Logger logger = Logger.getLogger("org.apache.test.logging.Test");
         final Category parent = logger.getParent();
         assertNotNull("No parent Logger", parent);
-        assertTrue("Incorrect parent logger", parent.getName().equals("org.apache.test.logging"));
+        assertEquals("Incorrect parent logger", "org.apache.test.logging", parent.getName());
     }
 
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java
Patch:
@@ -51,7 +51,7 @@ The default port number of remote logging server (4560).
 
     private final int reconnectionDelay;
 
-    private Reconnector connector = null;
+    private Reconnector connector;
 
     private Socket socket;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/AbstractSocketManager.java
Patch:
@@ -31,7 +31,7 @@
 public abstract class AbstractSocketManager extends OutputStreamManager {
 
     /**
-     * The internet address of the host.
+     * The Internet address of the host.
      */
     protected final InetAddress inetAddress;
     
@@ -49,7 +49,7 @@ public abstract class AbstractSocketManager extends OutputStreamManager {
      * The Constructor.
      * @param name The unique name of this connection.
      * @param os The OutputStream to manage.
-     * @param inetAddress The internet address.
+     * @param inetAddress The Internet address.
      * @param host The target host name.
      * @param port The target port number.
      */

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java
Patch:
@@ -47,7 +47,7 @@ public class SslSocketManager extends TcpSocketManager {
      * @param name          The unique name of this connection.
      * @param os            The OutputStream.
      * @param sock          The Socket.
-     * @param inetAddress          The internet address of the host.
+     * @param inetAddress          The Internet address of the host.
      * @param host          The name of the host.
      * @param port          The port number on the host.
      * @param delay         Reconnection interval.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java
Patch:
@@ -64,7 +64,7 @@ The default port number of remote logging server (4560).
      * @param name The unique name of this connection.
      * @param os The OutputStream.
      * @param sock The Socket.
-     * @param inetAddress The internet address of the host.
+     * @param inetAddress The Internet address of the host.
      * @param host The name of the host.
      * @param port The port number on the host.
      * @param delay Reconnection interval.

File: log4j-to-slf4j/src/test/java/org/apache/logging/slf4j/LoggerTest.java
Patch:
@@ -142,7 +142,7 @@ public void testImpliedThrowable() {
         final List<String> msgs = list.strList;
         assertThat(msgs, hasSize(1));
         final String expected = "java.lang.Throwable: Testing";
-        assertThat(msgs, hasItem(containsString(expected)));
+        assertTrue("Incorrect message data", msgs.get(0).contains(expected));
     }
 
     @SuppressWarnings("unchecked")
@@ -153,7 +153,7 @@ public void mdc() {
         ThreadContext.clearMap();
         logger.debug("Debug message");
         assertThat(list.strList, hasSize(2));
-        assertThat(list.strList, hasItems(startsWith("2010"), not(startsWith("2010"))));
+        assertTrue("Incorrect year", list.strList.get(0).startsWith("2010"));
     }
 }
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderSizeTest.java
Patch:
@@ -84,7 +84,7 @@ public void testAppender() throws Exception {
             logger.debug("This is test message number " + i);
         }
         final File dir = new File(DIR);
-        assertThat(dir, both(exists()).and(hasFiles()));
+        assertTrue("Directory not created", dir.exists() && dir.listFiles().length > 0);
         final File[] files = dir.listFiles();
         assertNotNull(files);
         assertThat(files, hasItemInArray(that(hasName(that(endsWith(fileExtension))))));

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeAndSizeTest.java
Patch:
@@ -64,7 +64,7 @@ public void testAppender() throws Exception {
         }
         Thread.sleep(50);
         final File dir = new File(DIR);
-        assertThat(dir, both(exists()).and(hasFiles()));
+        assertTrue("Directory not created", dir.exists() && dir.listFiles().length > 0);
         final File[] files = dir.listFiles();
         assertNotNull(files);
         assertThat(files, hasItemInArray(that(hasName(that(endsWith(".gz"))))));

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeTest.java
Patch:
@@ -63,7 +63,7 @@ public void testAppender() throws Exception {
             logger.debug("This is test message number " + i + 1);
         }
         final File dir = new File(DIR);
-        assertThat(dir, both(exists()).and(hasFiles()));
+        assertTrue("Directory not created", dir.exists() && dir.listFiles().length > 0);
 
         final int MAX_TRIES = 20;
         final Matcher<File[]> hasGzippedFile = hasItemInArray(that(hasName(that(endsWith(".gz")))));

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerHeaderFooterTest.java
Patch:
@@ -65,15 +65,15 @@ public void testAppender() throws Exception {
         }
         Thread.sleep(50);
         final File dir = new File(DIR);
-        assertThat(dir, both(exists()).and(hasFiles()));
+        assertTrue("Directory not created", dir.exists() && dir.listFiles().length > 0);
         final File[] files = dir.listFiles();
         assertNotNull(files);
         for (final File file : files) {
             assertHeader(file);
             assertFooter(file);
         }
         final File logFile = new File(LOGFILE);
-        assertThat(logFile, exists());
+        assertTrue("Expected logfile to exist: " + LOGFILE, logFile.exists());
         assertHeader(logFile);
     }
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerTest.java
Patch:
@@ -178,7 +178,8 @@ public void testFileTimeBasedOnSystemClockWhenAppendIsFalse()
                         file.getAbsolutePath(), Strings.EMPTY, isAppend, true, RollingRandomAccessFileManager.DEFAULT_BUFFER_SIZE,
                         new SizeBasedTriggeringPolicy(Long.MAX_VALUE), //
                         null, null, null);
-        assertThat(manager.getFileTime(), both(lessThan(expectedMax)).and(greaterThanOrEqualTo(expectedMin)));
+        assertTrue(manager.getFileTime() < expectedMax);
+        assertTrue(manager.getFileTime() >= expectedMin);
     }
 
     @Test

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java
Patch:
@@ -151,7 +151,7 @@ static class Stats {
         long pct99_99;
         double latencyRowCount;
         int throughputRowCount;
-        private final long averageOpsPerSec;
+        private long averageOpsPerSec; // Do not make final. Compile fails on Java 6.
 
         // example line: avg=828 99%=1118 99.99%=5028 Count=3125
         public Stats(final String raw) {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/xml/XmlLoggerPropsTest.java
Patch:
@@ -63,7 +63,8 @@ public void testWithProps() {
             logger = LogManager.getLogger("tiny.bubbles");
             logger.debug("Test on root");
             final List<String> events = listAppender.getMessages();
-            assertThat("Incorrect number of events", events, both(hasSize(greaterThan(0))).and(hasSize(equalTo(2))));
+            assertTrue("No events", events.size() > 0);
+            assertTrue("Incorrect number of events", events.size() == 2);
             assertThat(events.get(0), allOf(
                 containsString("user="),
                 containsString("phrasex=****"),

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java
Patch:
@@ -51,7 +51,7 @@ public class DefaultShutdownCallbackRegistry implements ShutdownCallbackRegistry
      * Constructs a DefaultShutdownRegistrationStrategy.
      */
     public DefaultShutdownCallbackRegistry() {
-        this(Executors.privilegedThreadFactory());
+        this(Executors.defaultThreadFactory());
     }
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FailoverAppender.java
Patch:
@@ -171,7 +171,7 @@ public String toString() {
      * @param name The name of the Appender (required).
      * @param primary The name of the primary Appender (required).
      * @param failovers The name of one or more Appenders to fail over to (at least one is required).
-     * @param retryIntervalSeconds The retry intervalMillis.
+     * @param retryIntervalSeconds The retry interval in seconds.
      * @param config The current Configuration (passed by the Configuration when the appender is created).
      * @param filter A Filter (optional).
      * @param ignore If {@code "true"} (default) exceptions encountered when appending events are logged; otherwise

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
Patch:
@@ -303,6 +303,9 @@ protected ConfigurationSource getInputFromUri(final URI configLocation) {
     }
 
     private static boolean isClassLoaderUri(final URI uri) {
+        if (uri == null) {
+            return false;
+        }
         final String scheme = uri.getScheme();
         return scheme == null || scheme.equals(CLASS_LOADER_SCHEME) || scheme.equals(CLASS_PATH_SCHEME);
     }

File: log4j-web/src/main/java/org/apache/logging/log4j/web/WebLoggerContextUtils.java
Patch:
@@ -43,7 +43,6 @@ private WebLoggerContextUtils() {
      *
      * @param servletContext the ServletContext to locate a LoggerContext for
      * @return the LoggerContext for the given ServletContext
-     * @throws java.lang.IllegalStateException if no LoggerContext could be found on the given ServletContext
      * @since 2.0.1
      */
     public static LoggerContext getWebLoggerContext(final ServletContext servletContext) {
@@ -55,6 +54,7 @@ public static LoggerContext getWebLoggerContext(final ServletContext servletCont
      *
      * @param servletContext the ServletContext to locate a LoggerContext for
      * @return the LoggerContext for the given ServletContext or {@code null} if none was set
+     * @throws java.lang.IllegalStateException if no LoggerContext could be found on the given ServletContext
      * @since 2.0.1
      */
     public static LoggerContext getRequiredWebLoggerContext(final ServletContext servletContext) {

File: log4j-1.2-api/src/main/java/org/apache/log4j/Priority.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.log4j;
 
 /**
- * <font color="#AA4444">Refrain from using this class directly, use
- * the {@link Level} class instead</font>.
+ * <em style="color:#A44">Refrain from using this class directly, use
+ * the {@link Level} class instead.</em>
  */
 public class Priority {
 

File: log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.logging.log4j.core.appender.AbstractAppender;
 import org.apache.logging.log4j.core.config.Property;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
+import org.apache.logging.log4j.core.config.plugins.PluginAliases;
 import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
 import org.apache.logging.log4j.core.config.plugins.PluginElement;
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
@@ -169,7 +170,8 @@ public static FlumeAppender createAppender(@PluginElement("Agents") Agent[] agen
                                                @PluginAttribute("connectTimeout") final String connectionTimeout,
                                                @PluginAttribute("requestTimeout") final String requestTimeout,
                                                @PluginAttribute("agentRetries") final String agentRetries,
-                                               @PluginAttribute("maxDelay") final String maxDelayMillis,
+                                               @PluginAliases("maxDelay") // deprecated
+                                               @PluginAttribute("maxDelayMillis") final String maxDelayMillis,
                                                @PluginAttribute("name") final String name,
                                                @PluginAttribute("ignoreExceptions") final String ignore,
                                                @PluginAttribute("mdcExcludes") final String excludes,

File: log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java
Patch:
@@ -142,7 +142,7 @@ public FlumeEvent createEvent(final LogEvent event, final String includes, final
      *                          1000.
      * @param requestTimeout The amount of time in milliseconds to wait before a request times out. Minimum is 1000.
      * @param agentRetries The number of times to retry an agent before failing to the next agent.
-     * @param maxDelayMillis The maximum number of seconds to wait for a complete batch.
+     * @param maxDelayMillis The maximum number of milliseconds to wait for a complete batch.
      * @param name The name of the Appender.
      * @param ignore If {@code "true"} (default) exceptions encountered when appending events are logged; otherwise
      *               they are propagated to the caller.

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/validators/RequiredValidatorTest.java
Patch:
@@ -43,7 +43,7 @@ public void setUp() throws Exception {
 
     @Test
     public void testNullDefaultValue() throws Exception {
-        final ValidatingPlugin validatingPlugin = new PluginBuilder<ValidatingPlugin>(plugin)
+        final ValidatingPlugin validatingPlugin = (ValidatingPlugin) new PluginBuilder(plugin)
             .withConfiguration(new NullConfiguration())
             .withConfigurationNode(node)
             .build();
@@ -53,7 +53,7 @@ public void testNullDefaultValue() throws Exception {
     @Test
     public void testNonNullValue() throws Exception {
         node.getAttributes().put("name", "foo");
-        final ValidatingPlugin validatingPlugin = new PluginBuilder<ValidatingPlugin>(plugin)
+        final ValidatingPlugin validatingPlugin = (ValidatingPlugin) new PluginBuilder(plugin)
             .withConfiguration(new NullConfiguration())
             .withConfigurationNode(node)
             .build();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/Layout.java
Patch:
@@ -94,8 +94,8 @@ public interface Layout<T extends Serializable> {
     /**
      * Returns a description of the content format.
      *
-     * @return a Map of key/value pairs describing the Layout-specific content format, or an empty Map if no content format descriptors are specified.
-     *
+     * @return a Map of key/value pairs describing the Layout-specific content format, or an empty Map if no content
+     * format descriptors are specified.
      */
     Map<String, String> getContentFormat();
 }

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java
Patch:
@@ -83,15 +83,14 @@ public String getClassName() {
      *
      * @return the LoggerContextFactory implementation class or {@code null} if there was an error loading it
      */
-    @SuppressWarnings("unchecked")
     public Class<? extends LoggerContextFactory> loadLoggerContextFactory() {
         if (className == null) {
             return null;
         }
         try {
             final Class<?> clazz = classLoader.loadClass(className);
             if (LoggerContextFactory.class.isAssignableFrom(clazz)) {
-                return (Class<? extends LoggerContextFactory>) clazz;
+                return clazz.asSubclass(LoggerContextFactory.class);
             }
         } catch (final Exception e) {
             LOGGER.error("Unable to create class {} specified in {}", className, url.toString(), e);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/convert/TypeConverterRegistry.java
Patch:
@@ -109,8 +109,7 @@ private void loadKnownTypeConverters(final Collection<PluginType<?>> knownTypes)
         for (final PluginType<?> knownType : knownTypes) {
             final Class<?> clazz = knownType.getPluginClass();
             if (TypeConverter.class.isAssignableFrom(clazz)) {
-                @SuppressWarnings("unchecked") // but we just DID check it!
-                final Class<? extends TypeConverter<?>> pluginClass = (Class<? extends TypeConverter<?>>) clazz;
+                final Class<? extends TypeConverter> pluginClass =  clazz.asSubclass(TypeConverter.class);
                 final Type conversionType = getTypeConverterSupportedType(pluginClass);
                 final TypeConverter<?> converter = ReflectionUtil.instantiate(pluginClass);
                 if (registry.putIfAbsent(conversionType, converter) != null) {
@@ -121,7 +120,7 @@ private void loadKnownTypeConverters(final Collection<PluginType<?>> knownTypes)
         }
     }
 
-    private static Type getTypeConverterSupportedType(final Class<? extends TypeConverter<?>> typeConverterClass) {
+    private static Type getTypeConverterSupportedType(final Class<? extends TypeConverter> typeConverterClass) {
         for (final Type type : typeConverterClass.getGenericInterfaces()) {
             if (type instanceof ParameterizedType) {
                 final ParameterizedType pType = (ParameterizedType) type;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java
Patch:
@@ -60,8 +60,7 @@ public Interpolator(final StrLookup defaultLookup, final List<String> pluginPack
 
         for (final Map.Entry<String, PluginType<?>> entry : plugins.entrySet()) {
             try {
-                @SuppressWarnings("unchecked")
-                final Class<? extends StrLookup> clazz = (Class<? extends StrLookup>) entry.getValue().getPluginClass();
+                final Class<? extends StrLookup> clazz = entry.getValue().getPluginClass().asSubclass(StrLookup.class);
                 lookups.put(entry.getKey(), clazz.getConstructor().newInstance());
             } catch (final Exception ex) {
                 LOGGER.error("Unable to create Lookup for {}", entry.getKey(), ex);

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java
Patch:
@@ -114,15 +114,14 @@ public String getThreadContextMap() {
      *
      * @return the ThreadContextMap implementation class or {@code null} if there was an error loading it
      */
-    @SuppressWarnings("unchecked")
     public Class<? extends ThreadContextMap> loadThreadContextMap() {
         if (threadContextMap == null) {
             return null;
         }
         try {
             final Class<?> clazz = classLoader.loadClass(threadContextMap);
             if (ThreadContextMap.class.isAssignableFrom(clazz)) {
-                return (Class<? extends ThreadContextMap>) clazz;
+                return clazz.asSubclass(ThreadContextMap.class);
             }
         } catch (final Exception e) {
             LOGGER.error("Unable to create class {} specified in {}", threadContextMap, url.toString(), e);

File: log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/NoSqlConnection.java
Patch:
@@ -56,10 +56,11 @@ public interface NoSqlConnection<W, T extends NoSqlObject<W>> extends Closeable
      * Closes the underlying connection. This method call should be idempotent. Only the first call should have any
      * effect; all further calls should be ignored. It's possible the underlying connection is stateless (such as an
      * HTTP web service), in which case this method would be a no-op. This method should also commit any open
-     * transactions, if applicable and if not already committed.<br />
-     * <br />
+     * transactions, if applicable and if not already committed.
+     * <p>
      * If this connection is part of a connection pool, executing this method should commit the transaction and return
      * the connection to the pool, but it should not actually close the underlying connection.
+     * </p>
      */
     @Override
     void close();

File: log4j-web/src/main/java/org/apache/logging/log4j/web/WebLoggerContextUtils.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Convenience methods for retrieving the {@link org.apache.logging.log4j.core.LoggerContext} associated with a
  * particular ServletContext. These methods are most particularly useful for asynchronous servlets where the
- * <abbr title="Thread Context ClassLoader">TCCL</abbr> is potentially different from the TCCL used by the
+ * Thread Context ClassLoader (TCCL) is potentially different from the TCCL used by the
  * Servlet container that bootstrapped Log4j.
  *
  * @since 2.0.1

File: log4j-1.2-api/src/main/java/org/apache/log4j/NDC.java
Patch:
@@ -91,7 +91,8 @@ public static void inherit(final Stack<String> stack) {
 
 
     /**
-     * <font color="#FF4040"><b>Never use this method directly.</b>
+     * <font color="#FF4040"><b>Never use this method directly.</b></font>
+     * 
      * @return The string value of the specified key.
      */
     public static String get() {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/MarkerMixIn.java
Patch:
@@ -47,6 +47,7 @@
         &lt;Marker name=&quot;ParentMarker2&quot;/&gt;
     &lt;/Parents&gt;
 &lt;/Marker&gt;
+ * </pre>
  * 
  * @see Marker
  */

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/Severity.java
Patch:
@@ -21,7 +21,7 @@
 /**
  *  Severity values used by the Syslog system.
  *
- * <table>
+ * <table summary="Syslog Severity Values">
  *     <tr>
  *         <th>Numerical Code</th>
  *         <th>Severity</th>

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/XmlLayout.java
Patch:
@@ -31,7 +31,7 @@
 /**
  * Appends a series of {@code event} elements as defined in the <a href="log4j.dtd">log4j.dtd</a>.
  *
- * <h4>Complete well-formed XML vs. fragment XML</h4>
+ * <h3>Complete well-formed XML vs. fragment XML</h3>
  * <p>
  * If you configure {@code complete="true"}, the appender outputs a well-formed XML document where the default namespace is the log4j
  * namespace {@value XmlConstants#XML_NAMESPACE}. By default, with {@code complete="false"}, you should include the output as an
@@ -174,12 +174,12 @@
  * <p>
  * This approach enforces the independence of the XmlLayout and the appender where you embed it.
  * </p>
- * <h4>Encoding</h4>
+ * <h3>Encoding</h3>
  * <p>
  * Appenders using this layout should have their {@code charset} set to {@code UTF-8} or {@code UTF-16}, otherwise events containing non
  * ASCII characters could result in corrupted log files.
  * </p>
- * <h4>Pretty vs. compact XML</h4>
+ * <h3>Pretty vs. compact XML</h3>
  * <p>
  * By default, the XML layout is not compact (compact = not "pretty") with {@code compact="false"}, which means the appender uses
  * end-of-line characters and indents lines to format the XML. If {@code compact="true"}, then no end-of-line or indentation is used.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/SyslogLayout.java
Patch:
@@ -115,7 +115,7 @@ private synchronized void addDate(final long timestamp, final StringBuilder buf)
      * <ul>
      * <li>Key: "structured" Value: "false"</li>
      * <li>Key: "dateFormat" Value: "MMM dd HH:mm:ss "</li>
-     * <li>Key: "format" Value: "<LEVEL>TIMESTAMP PROP(HOSTNAME) MESSAGE"</li>
+     * <li>Key: "format" Value: "&lt;LEVEL&gt;TIMESTAMP PROP(HOSTNAME) MESSAGE"</li>
      * <li>Key: "formatType" Value: "logfilepatternreceiver" (format uses the keywords supported by
      * LogFilePatternReceiver)</li>
      * </ul>

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JsonLayout.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * Appends a series of JSON events as strings serialized as bytes.
  *
- * <h4>Complete well-formed JSON vs. fragment JSON</h4>
+ * <h3>Complete well-formed JSON vs. fragment JSON</h3>
  * <p>
  * If you configure {@code complete="true"}, the appender outputs a well-formed JSON document. By default, with {@code complete="false"},
  * you should include the output as an <em>external file</em> in a separate file to form a well-formed JSON document.
@@ -779,12 +779,12 @@
  * <p>
  * This approach enforces the independence of the JsonLayout and the appender where you embed it.
  * </p>
- * <h4>Encoding</h4>
+ * <h3>Encoding</h3>
  * <p>
  * Appenders using this layout should have their {@code charset} set to {@code UTF-8} or {@code UTF-16}, otherwise events containing non
  * ASCII characters could result in corrupted log files.
  * </p>
- * <h4>Pretty vs. compact XML</h4>
+ * <h3>Pretty vs. compact XML</h3>
  * <p>
  * By default, the JSON layout is not compact (a.k.a. not "pretty") with {@code compact="false"}, which means the appender uses end-of-line
  * characters and indents lines to format the text. If {@code compact="true"}, then no end-of-line or indentation is used. Message content

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ExtendedStackTraceElement.java
Patch:
@@ -22,12 +22,12 @@
  * Wraps and extends the concept of the JRE's final class {@link StackTraceElement} by adding more location information.
  * <p>
  * Complements a StackTraceElement with:
+ * </p>
  * <ul>
  * <li>exact: whether the class was obtained via {@link sun.reflect.Reflection#getCallerClass(int)}</li>
  * <li>location: a classpath element or a jar</li>
  * <li>version</li>
  * </ul>
- * </p>
  */
 public final class ExtendedStackTraceElement implements Serializable {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/Configuration.java
Patch:
@@ -123,7 +123,7 @@ public interface Configuration extends Filterable {
     /**
      * <p>
      * Returns a list of descriptors of the custom levels defined in the current configuration. The returned list does
-     * <em>not</em> include custom levels that are defined in code with direct calls to {@link Level.forName}.
+     * <em>not</em> include custom levels that are defined in code with direct calls to {@link Level#forName(String, int)}.
      * </p>
      * <p>
      * Note that the list does not include levels of previous configurations. For example, suppose a configuration

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/AbstractLogEventWrapperEntity.java
Patch:
@@ -51,7 +51,7 @@
  * Many of the return types of {@link LogEvent} methods (e.g., {@link StackTraceElement}, {@link Message},
  * {@link Marker}, {@link Throwable}, 
  * {@link org.apache.logging.log4j.ThreadContext.ContextStack ThreadContext.ContextStack}, and 
- * {@link Map Map&lt;String, String&gt}) will not be recognized by the JPA provider. In conjunction with 
+ * {@link Map Map&lt;String, String&gt;}) will not be recognized by the JPA provider. In conjunction with 
  * {@link javax.persistence.Convert @Convert}, you can use the converters in the 
  * {@link org.apache.logging.log4j.core.appender.db.jpa.converter} package to convert these types to database columns.
  * If you want to retrieve log events from the database, you can create a true POJO entity and also use these 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileAppender.java
Patch:
@@ -119,7 +119,7 @@ public int getRegionLength() {
      * @param name The name of the Appender.
      * @param immediateFlush "true" if the contents should be flushed on every write, "false" otherwise. The default is
      *            "true".
-     * @param regionLengthStr The buffer size, defaults to {@value RandomAccessFileManager#DEFAULT_REGION_LENGTH}.
+     * @param regionLengthStr The buffer size, defaults to {@value MemoryMappedFileManager#DEFAULT_REGION_LENGTH}.
      * @param ignore If {@code "true"} (default) exceptions encountered when appending events are logged; otherwise they
      *            are propagated to the caller.
      * @param layout The layout to use to format the event. If no layout is provided the default PatternLayout will be

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileAppender.java
Patch:
@@ -119,7 +119,7 @@ public int getRegionLength() {
      * @param name The name of the Appender.
      * @param immediateFlush "true" if the contents should be flushed on every write, "false" otherwise. The default is
      *            "true".
-     * @param regionLengthStr The buffer size, defaults to {@value RandomAccessFileManager#DEFAULT_REGION=LENGTH}.
+     * @param regionLengthStr The buffer size, defaults to {@value RandomAccessFileManager#DEFAULT_REGION_LENGTH}.
      * @param ignore If {@code "true"} (default) exceptions encountered when appending events are logged; otherwise they
      *            are propagated to the caller.
      * @param layout The layout to use to format the event. If no layout is provided the default PatternLayout will be

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/AbstractPatternConverter.java
Patch:
@@ -56,8 +56,9 @@ protected AbstractPatternConverter(final String name, final String style) {
 
     /**
      * This method returns the name of the conversion pattern.
-     * <p/>
+     * <p>
      * The name can be useful to certain Layouts such as HtmlLayout.
+     * </p>
      *
      * @return the name of the conversion pattern
      */

File: log4j-core/src/test/java/org/apache/logging/log4j/PerformanceRun.java
Patch:
@@ -33,8 +33,9 @@
 
 /**
  * Use this class to analyze Log4j-only performance.
- * <p/>
+ * <p>
  * See {@linkplain PerformanceComparison} to compare performance with other logging frameworks.
+ * </p>
  *
  * @version $Id$
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/TimestampMessageTest.java
Patch:
@@ -33,8 +33,9 @@
 
 /**
  * Confirms that if you log a {@link TimestampMessage} then there are no unnecessary calls to {@link Clock}.
- * <p/>
+ * <p>
  * See LOG4J2-744.
+ * </p>
  */
 public class TimestampMessageTest {
     private ListAppender app;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerTimestampMessageTest.java
Patch:
@@ -38,8 +38,9 @@
 
 /**
  * Confirms that if you log a {@link TimestampMessage} then there are no unnecessary calls to {@link Clock}.
- * <p/>
+ * <p>
  * See LOG4J2-744.
+ * </p>
  */
 public class AsyncLoggerTimestampMessageTest {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java
Patch:
@@ -196,7 +196,7 @@ public List<PatternFormatter> parse(final String pattern, final boolean alwaysWr
     }
 
     /**
-     * Extract the converter identifier found at position i.
+     * Extracts the converter identifier found at the given start position.
      * <p>
      * After this function returns, the variable i will point to the first char after the end of the converter
      * identifier.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternConverter.java
Patch:
@@ -45,7 +45,6 @@ public interface PatternConverter {
     /**
      * This method returns the CSS style class that should be applied to
      * the LoggingEvent passed as parameter, which can be null.
-     * <p/>
      *
      * @param e null values are accepted
      * @return the name of the conversion pattern

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java
Patch:
@@ -125,8 +125,9 @@ public void stop() {
 
     /**
      * Actual writing occurs here.
-     * <p/>
-     * @param logEvent The LogEvent.
+     * 
+     * @param logEvent
+     *        The LogEvent.
      */
     @Override
     public void append(LogEvent logEvent) {

File: log4j-api/src/main/java/org/apache/logging/log4j/message/MessageFormatMessage.java
Patch:
@@ -144,7 +144,7 @@ private void writeObject(final ObjectOutputStream out) throws IOException {
         }
     }
 
-    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {
+    private void readObject(final ObjectInputStream in) throws IOException {
         parameters = null;
         throwable = null;
         formattedMessage = in.readUTF();

File: log4j-api/src/main/java/org/apache/logging/log4j/util/LoaderUtil.java
Patch:
@@ -83,9 +83,8 @@ public ClassLoader run() {
             if (cl != null) {
                 return cl;
             }
-            final ClassLoader scl = ClassLoader.getSystemClassLoader();
-            // if the system CL is null, then we're in a really restrictive environment!
-            return scl == null ? LoaderUtil.class.getClassLoader() : scl;
+            final ClassLoader ccl = LoaderUtil.class.getClassLoader();
+            return ccl == null ? ClassLoader.getSystemClassLoader() : ccl;
         }
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/selector/JndiContextSelector.java
Patch:
@@ -45,7 +45,7 @@
  *  which is looked up by this class is
  * <code>java:comp/env/log4j/context-name</code>.
  *
- * <p>Here is an example of an <code>env-entry<code>:
+ * <p>Here is an example of an <code>env-entry</code>:
  * <blockquote>
  * <pre>
  * &lt;env-entry&gt;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java
Patch:
@@ -216,8 +216,9 @@ public List<PatternFormatter> parse(final String pattern, final boolean alwaysWr
      *            literal to be output in case format specifier in unrecognized.
      * @return position in pattern after converter.
      */
-    private static int extractConverter(final char lastChar, final String pattern, int i, final StringBuilder convBuf,
-            final StringBuilder currentLiteral) {
+    private static int extractConverter(final char lastChar, final String pattern, final int start,
+            final StringBuilder convBuf, final StringBuilder currentLiteral) {
+        int i = start;
         convBuf.setLength(0);
 
         // When this method is called, lastChar points to the first character of the

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java
Patch:
@@ -251,7 +251,8 @@ private static int extractConverter(final char lastChar, final String pattern, i
      *            array to receive extracted options
      * @return position in pattern after options.
      */
-    private static int extractOptions(final String pattern, int i, final List<String> options) {
+    private static int extractOptions(final String pattern, final int start, final List<String> options) {
+        int i = start;
         while (i < pattern.length() && pattern.charAt(i) == '{') {
             final int begin = i++;
             int end;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/FileDatePatternConverter.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 
 /**
- * Formats an date by delegating to DatePatternConverter.  The default
+ * Formats a date by delegating to DatePatternConverter.  The default
  * date pattern for a %d specifier in a file name is different than
  * the %d pattern in pattern layout.
  */

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java
Patch:
@@ -26,8 +26,10 @@
 
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.Marker;
+import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.Logger;
+import org.apache.logging.log4j.core.config.Node;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginBuilderAttribute;
 import org.apache.logging.log4j.core.config.plugins.PluginBuilderFactory;
@@ -53,7 +55,7 @@
  * </code><br>
  */
 
-@Plugin(name = "BurstFilter", category = "Core", elementType = "filter", printObject = true)
+@Plugin(name = "BurstFilter", category = Node.CATEGORY, elementType = Filter.ELEMENT_TYPE, printObject = true)
 public final class BurstFilter extends AbstractFilter {
 
     private static final long serialVersionUID = 1L;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/CompositeFilter.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.Logger;
+import org.apache.logging.log4j.core.config.Node;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginElement;
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
@@ -36,7 +37,7 @@
 /**
  * Composes and invokes one or more filters.
  */
-@Plugin(name = "filters", category = "Core", printObject = true)
+@Plugin(name = "filters", category = Node.CATEGORY, printObject = true)
 public final class CompositeFilter extends AbstractLifeCycle implements Iterable<Filter>, Filter {
 
     private static final long serialVersionUID = 1L;
@@ -86,7 +87,7 @@ public List<Filter> getFilters() {
 
     /**
      * Returns whether this composite contains any filters.
-     * 
+     *
      * @return whether this composite contains any filters.
      */
     public boolean isEmpty() {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/MarkerFilter.java
Patch:
@@ -18,8 +18,10 @@
 
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.Marker;
+import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.Logger;
+import org.apache.logging.log4j.core.config.Node;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
@@ -30,7 +32,7 @@
  * configured marker as a parent.
  *
  */
-@Plugin(name = "MarkerFilter", category = "Core", elementType = "filter", printObject = true)
+@Plugin(name = "MarkerFilter", category = Node.CATEGORY, elementType = Filter.ELEMENT_TYPE, printObject = true)
 public final class MarkerFilter extends AbstractFilter {
 
     private static final long serialVersionUID = 1L;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/StructuredDataFilter.java
Patch:
@@ -23,8 +23,10 @@
 
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.Marker;
+import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.Logger;
+import org.apache.logging.log4j.core.config.Node;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
 import org.apache.logging.log4j.core.config.plugins.PluginElement;
@@ -36,7 +38,7 @@
 /**
  * Filter based on data in a StructuredDataMessage.
  */
-@Plugin(name = "StructuredDataFilter", category = "Core", elementType = "filter", printObject = true)
+@Plugin(name = "StructuredDataFilter", category = Node.CATEGORY, elementType = Filter.ELEMENT_TYPE, printObject = true)
 public final class StructuredDataFilter extends MapFilter {
 
     private static final long serialVersionUID = 1L;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/ThreadContextMapFilter.java
Patch:
@@ -25,8 +25,10 @@
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.ThreadContext;
+import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.Logger;
+import org.apache.logging.log4j.core.config.Node;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
 import org.apache.logging.log4j.core.config.plugins.PluginElement;
@@ -37,7 +39,7 @@
 /**
  * Filter based on a value in the Thread Context Map (MDC).
  */
-@Plugin(name = "ThreadContextMapFilter", category = "Core", elementType = "filter", printObject = true)
+@Plugin(name = "ThreadContextMapFilter", category = Node.CATEGORY, elementType = Filter.ELEMENT_TYPE, printObject = true)
 public class ThreadContextMapFilter extends MapFilter {
 
     private static final long serialVersionUID = 1L;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/ThresholdFilter.java
Patch:
@@ -18,8 +18,10 @@
 
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.Marker;
+import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.Logger;
+import org.apache.logging.log4j.core.config.Node;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
@@ -33,7 +35,7 @@
  *
  * The default Level is ERROR.
  */
-@Plugin(name = "ThresholdFilter", category = "Core", elementType = "filter", printObject = true)
+@Plugin(name = "ThresholdFilter", category = Node.CATEGORY, elementType = Filter.ELEMENT_TYPE, printObject = true)
 public final class ThresholdFilter extends AbstractFilter {
 
     private static final long serialVersionUID = 1L;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java
Patch:
@@ -21,15 +21,17 @@
 import java.util.Calendar;
 import java.util.TimeZone;
 
+import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.LogEvent;
+import org.apache.logging.log4j.core.config.Node;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
 
 /**
  * Filters events that fall within a specified time period in each day.
  */
-@Plugin(name = "TimeFilter", category = "Core", elementType = "filter", printObject = true)
+@Plugin(name = "TimeFilter", category = Node.CATEGORY, elementType = Filter.ELEMENT_TYPE, printObject = true)
 public final class TimeFilter extends AbstractFilter {
 
     private static final long serialVersionUID = 1L;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java
Patch:
@@ -26,7 +26,9 @@
 import java.nio.charset.Charset;
 import java.util.ArrayList;
 import org.apache.logging.log4j.Level;
+import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LogEvent;
+import org.apache.logging.log4j.core.config.Node;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
 import org.apache.logging.log4j.core.config.plugins.PluginBuilderAttribute;
@@ -42,7 +44,7 @@
  * Appenders using this layout should have their encoding set to UTF-8 or UTF-16, otherwise events containing
  * non ASCII characters could result in corrupted log files.
  */
-@Plugin(name = "HtmlLayout", category = "Core", elementType = "layout", printObject = true)
+@Plugin(name = "HtmlLayout", category = Node.CATEGORY, elementType = Layout.ELEMENT_TYPE, printObject = true)
 public final class HtmlLayout extends AbstractStringLayout {
 
     private static final long serialVersionUID = 1L;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/LoggerFields.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.apache.logging.log4j.core.config.Node;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
 import org.apache.logging.log4j.core.config.plugins.PluginElement;
@@ -30,7 +31,7 @@
 /**
  * A LoggerFields container.
  */
-@Plugin(name = "LoggerFields", category = "Core", printObject = true)
+@Plugin(name = "LoggerFields", category = Node.CATEGORY, printObject = true)
 public final class LoggerFields {
 
     private final Map<String, String> map;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java
Patch:
@@ -30,9 +30,11 @@
 
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LoggingException;
+import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.appender.TlsSyslogFrame;
 import org.apache.logging.log4j.core.config.Configuration;
+import org.apache.logging.log4j.core.config.Node;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
 import org.apache.logging.log4j.core.config.plugins.PluginConfiguration;
@@ -59,7 +61,7 @@
  *
  * @see <a href="https://tools.ietf.org/html/rfc5424">RFC 5424</a>
  */
-@Plugin(name = "Rfc5424Layout", category = "Core", elementType = "layout", printObject = true)
+@Plugin(name = "Rfc5424Layout", category = Node.CATEGORY, elementType = Layout.ELEMENT_TYPE, printObject = true)
 public final class Rfc5424Layout extends AbstractStringLayout {
 
     private static final long serialVersionUID = 1L;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/SyslogLayout.java
Patch:
@@ -25,7 +25,9 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LogEvent;
+import org.apache.logging.log4j.core.config.Node;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
@@ -37,7 +39,7 @@
 /**
  * Formats a log event as a BSD Log record.
  */
-@Plugin(name = "SyslogLayout", category = "Core", elementType = "layout", printObject = true)
+@Plugin(name = "SyslogLayout", category = Node.CATEGORY, elementType = Layout.ELEMENT_TYPE, printObject = true)
 public final class SyslogLayout extends AbstractStringLayout {
 
     private static final long serialVersionUID = 1L;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/XmlLayout.java
Patch:
@@ -20,6 +20,8 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.apache.logging.log4j.core.Layout;
+import org.apache.logging.log4j.core.config.Node;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
@@ -184,7 +186,7 @@
  * Message content may contain, of course, end-of-lines.
  * </p>
  */
-@Plugin(name = "XmlLayout", category = "Core", elementType = "layout", printObject = true)
+@Plugin(name = "XmlLayout", category = Node.CATEGORY, elementType = Layout.ELEMENT_TYPE, printObject = true)
 public final class XmlLayout extends AbstractJacksonLayout {
 
     private static final long serialVersionUID = 1L;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/XmlCompactFileAppenderTest.java
Patch:
@@ -47,7 +47,7 @@ public void testFlushAtEndOfBatch() throws Exception {
         final Logger log = LogManager.getLogger("com.foo.Bar");
         final String logMsg = "Message flushed with immediate flush=false";
         log.info(logMsg);
-        ((LifeCycle) LogManager.getContext()).stop(); // stop async thread
+        ((LifeCycle) LogManager.getContext(false)).stop(); // stop async thread
 
         final BufferedReader reader = new BufferedReader(new FileReader(file));
         String line1;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/XmlCompleteFileAppenderTest.java
Patch:
@@ -48,7 +48,7 @@ public void testFlushAtEndOfBatch() throws Exception {
         final Logger log = LogManager.getLogger("com.foo.Bar");
         final String logMsg = "Message flushed with immediate flush=false";
         log.info(logMsg);
-        ((LifeCycle) LogManager.getContext(true)).stop(); // stop async thread
+        ((LifeCycle) LogManager.getContext(false)).stop(); // stop async thread
 
         final BufferedReader reader = new BufferedReader(new FileReader(f));
         String line1;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/XmlFileAppenderTest.java
Patch:
@@ -48,7 +48,7 @@ public void testFlushAtEndOfBatch() throws Exception {
         final Logger log = LogManager.getLogger("com.foo.Bar");
         final String logMsg = "Message flushed with immediate flush=false";
         log.info(logMsg);
-        ((LifeCycle) LogManager.getContext()).stop(); // stop async thread
+        ((LifeCycle) LogManager.getContext(false)).stop(); // stop async thread
 
         final BufferedReader reader = new BufferedReader(new FileReader(f));
         String line1;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/XmlRandomAccessFileAppenderTest.java
Patch:
@@ -50,7 +50,7 @@ public void testFlushAtEndOfBatch() throws Exception {
         final Logger log = LogManager.getLogger("com.foo.Bar");
         final String logMsg = "Message flushed with immediate flush=false";
         log.info(logMsg);
-        ((LifeCycle) LogManager.getContext()).stop(); // stop async thread
+        ((LifeCycle) LogManager.getContext(false)).stop(); // stop async thread
 
         final BufferedReader reader = new BufferedReader(new FileReader(f));
         String line1;

File: log4j-1.2-api/src/main/java/org/apache/log4j/Appender.java
Patch:
@@ -129,10 +129,11 @@ public interface Appender {
      * a layout is not required, then layout configuration will be
      * skipped even if there is available layout configuration
      * information at the disposal of the configurator..
-     * <p/>
-     * <p>In the rather exceptional case, where the appender
+     * <p>
+     * In the rather exceptional case, where the appender
      * implementation admits a layout but can also work without it, then
      * the appender should return {@code true}.
+     * </p>
      * @return true if a Layout is required.
      *
      * @since 0.8.4

File: log4j-1.2-api/src/main/java/org/apache/log4j/Level.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Defines the minimum set of levels recognized by the system, that is
  * <code>OFF</code>, <code>FATAL</code>, <code>ERROR</code>,
- * <code>WARN</code>, <code>INFO</code, <code>DEBUG</code>
+ * <code>WARN</code>, <code>INFO</code>, <code>DEBUG</code>
  * and <code>ALL</code>.
  * <p>
  * The <code>Level</code> class may be subclassed to define a larger

File: log4j-1.2-api/src/main/java/org/apache/log4j/Priority.java
Patch:
@@ -153,9 +153,10 @@ final int getSyslogEquivalent() {
      * Returns {@code true} if this level has a higher or equal
      * level than the level passed as argument, {@code false}
      * otherwise.
-     * <p/>
-     * <p>You should think twice before overriding the default
+     * <p>
+     * You should think twice before overriding the default
      * implementation of <code>isGreaterOrEqual</code> method.
+     * </p>
      * @param r The Priority to check.
      * @return true if the current level is greater or equal to the specified Priority.
      */

File: log4j-1.2-api/src/main/java/org/apache/log4j/spi/ErrorHandler.java
Patch:
@@ -24,10 +24,11 @@
  * Appenders may delegate their error handling to
  * <code>ErrorHandlers</code>.
  * <p>
- * <p>Error handling is a particularly tedious to get right because by
+ * Error handling is a particularly tedious to get right because by
  * definition errors are hard to predict and to reproduce.
  * </p>
- * <p>Please take the time to contact the author in case you discover
+ * <p>
+ * Please take the time to contact the author in case you discover
  * that errors are not properly handled. You are most welcome to
  * suggest new error handling policies or criticize existing policies.
  * </p>

File: log4j-1.2-api/src/main/java/org/apache/log4j/Appender.java
Patch:
@@ -53,8 +53,9 @@ public interface Appender {
     /**
      * Release any resources allocated within the appender such as file
      * handles, network connections, etc.
-     * <p/>
-     * <p>It is a programming error to append to a closed appender.
+     * <p>
+     * It is a programming error to append to a closed appender.
+     * </p>
      *
      * @since 0.8.4
      */

File: log4j-1.2-api/src/main/java/org/apache/log4j/spi/ErrorHandler.java
Patch:
@@ -23,14 +23,14 @@
 /**
  * Appenders may delegate their error handling to
  * <code>ErrorHandlers</code>.
- * <p/>
+ * <p>
  * <p>Error handling is a particularly tedious to get right because by
  * definition errors are hard to predict and to reproduce.
- * <p/>
- * <p/>
+ * </p>
  * <p>Please take the time to contact the author in case you discover
  * that errors are not properly handled. You are most welcome to
  * suggest new error handling policies or criticize existing policies.
+ * </p>
  */
 public interface ErrorHandler {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/LoggerFields.java
Patch:
@@ -66,7 +66,7 @@ public String toString() {
      *            The IANA assigned enterprise number
      * @param discardIfAllFieldsAreEmpty
      *            this SD-ELEMENT should be discarded if all fields are empty
-     * @return A LoggerFields instance containing a Map<String, String>.
+     * @return A LoggerFields instance containing a Map&lt;String, String&gt;.
      */
     @PluginFactory
     public static LoggerFields createLoggerFields(

File: log4j-core/src/main/java/org/apache/logging/log4j/core/selector/JndiContextSelector.java
Patch:
@@ -108,7 +108,7 @@ public LoggerContext getContext(final String fqcn, final ClassLoader loader, fin
 
         String loggingContextName = null;
 
-        final JndiManager jndiManager = JndiManager.getDefaultManager(getClass().getName());
+        final JndiManager jndiManager = JndiManager.getDefaultManager();
         try {
             loggingContextName = jndiManager.lookup(Constants.JNDI_CONTEXT_NAME);
         } catch (final NamingException ne) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/selector/JndiContextSelector.java
Patch:
@@ -75,7 +75,7 @@
  * &lt;env-entry&gt;
  *   &lt;description&gt;URL for configuring log4j context&lt;/description&gt;
  *   &lt;env-entry-name&gt;log4j/configuration-resource&lt;/env-entry-name&gt;
- *   &lt;env-entry-value&gt;urlOfConfigrationResource&lt;/env-entry-value&gt;
+ *   &lt;env-entry-value&gt;urlOfConfigurationResource&lt;/env-entry-value&gt;
  *   &lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt;
  * &lt;/env-entry&gt;
  * </pre>

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/PatternProcessorTest.java
Patch:
@@ -198,10 +198,10 @@ public void testGetNextTimeMillisecondlyReturnsNextMillisec() {
     
     @Test
     public void testDontInterpretBackslashAsEscape() {
-        final PatternProcessor pp = new PatternProcessor("c:\\test\\new/app-%d{HH-mm-ss}.log");
+        final PatternProcessor pp = new PatternProcessor("c:\\test\\new/app-%d{HH-mm-ss}{GMT+0}.log");
         final StringBuilder buf = new StringBuilder();
         final Date date = new Date(1411142535260L); // Sat Sep 20 01:02:15 JST 2014
         pp.formatFileName(buf, date, 23);
-        assertEquals("c:\\test\\new/app-01-02-15.log", buf.toString());
+        assertEquals("c:\\test\\new/app-16-02-15.log", buf.toString());
     }
 }

File: log4j-flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeEmbeddedAgentTest.java
Patch:
@@ -126,7 +126,7 @@ public void teardown() throws Exception {
     }
 
     @Test
-    public void testLog4Event() throws InterruptedException, IOException {
+    public void testLog4Event() throws IOException {
 
         final StructuredDataMessage msg = new StructuredDataMessage("Test", "Test Log4j", "Test");
         EventLogger.logEvent(msg);
@@ -139,7 +139,7 @@ public void testLog4Event() throws InterruptedException, IOException {
     }
 
     @Test
-    public void testMultiple() throws InterruptedException, IOException {
+    public void testMultiple() throws IOException {
 
         for (int i = 0; i < 10; ++i) {
             final StructuredDataMessage msg = new StructuredDataMessage("Test", "Test Multiple " + i, "Test");

File: log4j-flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeEmbeddedAppenderTest.java
Patch:
@@ -126,7 +126,7 @@ public void teardown() throws Exception {
     }
 
     @Test
-    public void testLog4Event() throws InterruptedException, IOException {
+    public void testLog4Event() throws IOException {
 
         final StructuredDataMessage msg = new StructuredDataMessage("Test", "Test Log4j", "Test");
         EventLogger.logEvent(msg);
@@ -139,7 +139,7 @@ public void testLog4Event() throws InterruptedException, IOException {
     }
 
     @Test
-    public void testMultiple() throws InterruptedException, IOException {
+    public void testMultiple() throws IOException {
 
         for (int i = 0; i < 10; ++i) {
             final StructuredDataMessage msg = new StructuredDataMessage("Test", "Test Multiple " + i, "Test");
@@ -196,7 +196,7 @@ public void testFailover() throws InterruptedException, IOException {
     }
     /* Flume 1.4.0 does not support interceptors on the embedded agent
     @Test      */
-    public void testHeaderAddedByInterceptor() throws InterruptedException, IOException {
+    public void testHeaderAddedByInterceptor() {
 
         final StructuredDataMessage msg = new StructuredDataMessage("Test", "Test Log4j", "Test");
         EventLogger.logEvent(msg);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/PatternProcessor.java
Patch:
@@ -66,7 +66,7 @@ public PatternProcessor(final String pattern) {
         final PatternParser parser = createPatternParser();
         final List<PatternConverter> converters = new ArrayList<PatternConverter>();
         final List<FormattingInfo> fields = new ArrayList<FormattingInfo>();
-        parser.parse(pattern, converters, fields, false);
+        parser.parse(pattern, converters, fields, false, false);
         final FormattingInfo[] infoArray = new FormattingInfo[fields.size()];
         patternFields = fields.toArray(infoArray);
         final ArrayPatternConverter[] converterArray = new ArrayPatternConverter[converters.size()];

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ExtendedStackTraceElement.java
Patch:
@@ -18,14 +18,12 @@
 
 import java.io.Serializable;
 
-import sun.reflect.Reflection;
-
 /**
  * Wraps and extends the concept of the JRE's final class {@link StackTraceElement} by adding more location information.
  * <p>
  * Complements a StackTraceElement with:
  * <ul>
- * <li>exact: whether the class was obtained via {@link Reflection#getCallerClass()}</li>
+ * <li>exact: whether the class was obtained via {@link sun.reflect.Reflection#getCallerClass(int)}</li>
  * <li>location: a classpath element or a jar</li>
  * <li>version</li>
  * </ul>

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java
Patch:
@@ -500,7 +500,7 @@ private Class<?> loadClass(final ClassLoader lastLoader, final String className)
                 if (clazz != null) {
                     return clazz;
                 }
-            } catch (final Exception ignore) {
+            } catch (final Throwable ignore) {
                 // Ignore exception.
             }
         }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/MemoryMappedFileAppenderLocationTest.java
Patch:
@@ -69,7 +69,8 @@ public void testMemMapLocation() throws Exception {
         } finally {
             ((LoggerContext) LogManager.getContext(false)).stop();
         }
-        assertEquals("Shrunk to actual used size", 478, f.length());
+        final int LINESEP = System.getProperty("line.separator").length();
+        assertEquals("Shrunk to actual used size", 474 + 2 * LINESEP, f.length());
         
         String line1, line2, line3;
         final BufferedReader reader = new BufferedReader(new FileReader(LOGFILE));

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/MemoryMappedFileAppenderRemapTest.java
Patch:
@@ -69,7 +69,8 @@ public void testMemMapExtendsIfNeeded() throws Exception {
         } finally {
             ((LoggerContext) LogManager.getContext(false)).stop();
         }
-        assertEquals("Shrunk to actual used size", 664, f.length());
+        final int LINESEP = System.getProperty("line.separator").length();
+        assertEquals("Shrunk to actual used size", 658 + 3 * LINESEP, f.length());
 
         String line1, line2, line3, line4;
         final BufferedReader reader = new BufferedReader(new FileReader(LOGFILE));

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/MemoryMappedFileAppenderSimpleTest.java
Patch:
@@ -64,7 +64,8 @@ public void testMemMapBasics() throws Exception {
         } finally {
             ((LoggerContext) LogManager.getContext(false)).stop();
         }
-        assertEquals("Shrunk to actual used size", 190, f.length());
+        final int LINESEP = System.getProperty("line.separator").length();
+        assertEquals("Shrunk to actual used size", 186 + 2 * LINESEP, f.length());
         
         String line1, line2, line3;
         final BufferedReader reader = new BufferedReader(new FileReader(LOGFILE));

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/MemoryMappedFileAppenderLocationTest.java
Patch:
@@ -69,7 +69,7 @@ public void testMemMapLocation() throws Exception {
         } finally {
             ((LoggerContext) LogManager.getContext(false)).stop();
         }
-        assertEquals("Shrunk to actual used size", 474, f.length());
+        assertEquals("Shrunk to actual used size", 478, f.length());
         
         String line1, line2, line3;
         final BufferedReader reader = new BufferedReader(new FileReader(LOGFILE));
@@ -82,12 +82,12 @@ public void testMemMapLocation() throws Exception {
         }
         assertNotNull(line1);
         assertThat(line1, containsString("Test log1"));
-        String location1 = "org.apache.logging.log4j.core.appender.MemoryMappedFileAppenderLocationTest.testMemMapBasics(MemoryMappedFileAppenderLocationTest.java:63)";
+        String location1 = "org.apache.logging.log4j.core.appender.MemoryMappedFileAppenderLocationTest.testMemMapLocation(MemoryMappedFileAppenderLocationTest.java:63)";
         assertThat(line1, containsString(location1));
 
         assertNotNull(line2);
         assertThat(line2, containsString("Test log2"));
-        String location2 = "org.apache.logging.log4j.core.appender.MemoryMappedFileAppenderLocationTest.testMemMapBasics(MemoryMappedFileAppenderLocationTest.java:67)";
+        String location2 = "org.apache.logging.log4j.core.appender.MemoryMappedFileAppenderLocationTest.testMemMapLocation(MemoryMappedFileAppenderLocationTest.java:67)";
         assertThat(line2, containsString(location2));
 
         assertNull("only two lines were logged", line3);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/convert/TypeConvertersTest.java
Patch:
@@ -139,6 +139,8 @@ public static Collection<Object[]> data() throws Exception {
                 { null, null, null, Facility.class },
                 // GELF compression types
                 { "GZIP", GelfLayout.CompressionType.GZIP, "GZIP", GelfLayout.CompressionType.class },
+                { "ZLIB", GelfLayout.CompressionType.ZLIB, "GZIP", GelfLayout.CompressionType.class },
+                { "OFF", GelfLayout.CompressionType.OFF, "GZIP", GelfLayout.CompressionType.class },
                 // arrays
                 { "123", "123".toCharArray(), null, char[].class },
                 { "123", "123".getBytes(Charset.defaultCharset()), null, byte[].class },

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/validation/Constraint.java
Patch:
@@ -37,5 +37,5 @@
     /**
      * {@link ConstraintValidator} class that implements the validation logic for the annotated constraint annotation.
      */
-    Class<? extends ConstraintValidator<? extends Annotation, ?>> value();
+    Class<? extends ConstraintValidator<? extends Annotation>> value();
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/validation/ConstraintValidator.java
Patch:
@@ -22,10 +22,9 @@
  * Interface that {@link Constraint} annotations must implement to perform validation logic.
  *
  * @param <A> the {@link Constraint} annotation this interface validates.
- * @param <T> the type of the object being validated
  * @since 2.1
  */
-public interface ConstraintValidator<A extends Annotation, T> {
+public interface ConstraintValidator<A extends Annotation> {
 
     /**
      * Called before this validator is used with the constraint annotation value.
@@ -40,5 +39,5 @@ public interface ConstraintValidator<A extends Annotation, T> {
      * @param value the value to validate.
      * @return {@code true} if the given value is valid.
      */
-    boolean isValid(T value);
+    boolean isValid(Object value);
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/validation/validators/RequiresNonNullValidator.java
Patch:
@@ -26,7 +26,7 @@
  *
  * @since 2.1
  */
-public class RequiresNonNullValidator implements ConstraintValidator<RequiresNonNull, Object> {
+public class RequiresNonNullValidator implements ConstraintValidator<RequiresNonNull> {
 
     private static final Logger LOGGER = StatusLogger.getLogger();
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/convert/TypeConverter.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.logging.log4j.core.config.plugins.util;
+package org.apache.logging.log4j.core.config.plugins.convert;
 
 /**
  * Interface for doing automatic String conversion to a specific type.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/convert/TypeConverters.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.logging.log4j.core.config.plugins.util;
+package org.apache.logging.log4j.core.config.plugins.convert;
 
 import java.io.File;
 import java.math.BigDecimal;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/visitors/AbstractPluginVisitor.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Map;
 
 import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.core.config.plugins.util.TypeConverters;
+import org.apache.logging.log4j.core.config.plugins.convert.TypeConverters;
 import org.apache.logging.log4j.core.lookup.StrSubstitutor;
 import org.apache.logging.log4j.core.util.Assert;
 import org.apache.logging.log4j.status.StatusLogger;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/TypeConverters.java
Patch:
@@ -30,12 +30,12 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.regex.Pattern;
-
 import javax.xml.bind.DatatypeConverter;
 
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.Filter;
+import org.apache.logging.log4j.core.appender.ConsoleAppender;
 import org.apache.logging.log4j.core.layout.GelfLayout;
 import org.apache.logging.log4j.core.layout.HtmlLayout;
 import org.apache.logging.log4j.core.net.Facility;
@@ -441,5 +441,7 @@ private TypeConverters() {
         registry.put(GelfLayout.CompressionType.class, new EnumConverter<GelfLayout.CompressionType>(
                 GelfLayout.CompressionType.class));
         registry.put(HtmlLayout.FontSize.class, new EnumConverter<HtmlLayout.FontSize>(HtmlLayout.FontSize.class));
+        registry.put(ConsoleAppender.Target.class, new EnumConverter<ConsoleAppender.Target>(
+            ConsoleAppender.Target.class));
     }
 }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/util/ClockFactoryTest.java
Patch:
@@ -64,7 +64,7 @@ public void testSpecifyCoarseCachedClockLong() {
         assertSame(CoarseCachedClock.class, ClockFactory.getClock().getClass());
     }
 
-    static class MyClock implements Clock {
+    public static class MyClock implements Clock {
         @Override
         public long currentTimeMillis() {
             return 42;

File: log4j-iostreams/src/main/java/org/apache/logging/log4j/io/CharStreamLogger.java
Patch:
@@ -32,7 +32,7 @@ public class CharStreamLogger {
 
     public CharStreamLogger(final ExtendedLogger logger, final Level level, final Marker marker) {
         this.logger = logger;
-        this.level = level;
+        this.level = level == null ? logger.getLevel() : level;
         this.marker = marker;
     }
 

File: log4j-web/src/main/java/org/apache/logging/log4j/web/Log4jServletFilter.java
Patch:
@@ -59,7 +59,7 @@ public void doFilter(final ServletRequest request, final ServletResponse respons
         if (request.getAttribute(ALREADY_FILTERED_ATTRIBUTE) != null) {
             chain.doFilter(request, response);
         } else {
-            request.setAttribute(ALREADY_FILTERED_ATTRIBUTE, true);
+            request.setAttribute(ALREADY_FILTERED_ATTRIBUTE, Boolean.TRUE);
 
             try {
                 this.initializer.setLoggerContext();

File: log4j-streams/src/test/java/org/apache/logging/log4j/streams/AbstractLoggerWriterTest.java
Patch:
@@ -70,7 +70,7 @@ public void testFlush() throws IOException {
         out.close();
         replay(out);
 
-        final LoggerOutputStream los = new LoggerOutputStream(out, getLogger(), LEVEL);
+        final LoggerOutputStream los = new LoggerOutputStream(out, getExtendedLogger(), LEVEL);
         los.flush();
         los.close();
         verify(out);

File: log4j-streams/src/test/java/org/apache/logging/log4j/streams/LoggerBufferedInputStreamTest.java
Patch:
@@ -24,6 +24,6 @@ public class LoggerBufferedInputStreamTest extends LoggerInputStreamTest {
 
     @Override
     protected InputStream createInputStream() {
-        return new LoggerBufferedInputStream(this.wrapped, getLogger(), Level.ERROR);
+        return new LoggerBufferedInputStream(this.wrapped, getExtendedLogger(), Level.ERROR);
     }
 }

File: log4j-streams/src/test/java/org/apache/logging/log4j/streams/LoggerBufferedReaderTest.java
Patch:
@@ -28,7 +28,7 @@ public class LoggerBufferedReaderTest extends LoggerReaderTest {
     
     @Override
     protected Reader createReader() {
-        return this.bufferedReader = new LoggerBufferedReader(this.wrapped, getLogger(), LEVEL);
+        return this.bufferedReader = new LoggerBufferedReader(this.wrapped, getExtendedLogger(), LEVEL);
     }
 
     @Test

File: log4j-streams/src/test/java/org/apache/logging/log4j/streams/LoggerInputStreamTest.java
Patch:
@@ -33,7 +33,7 @@ public class LoggerInputStreamTest extends AbstractStreamTest {
     protected InputStream in;
 
     protected InputStream createInputStream() {
-        return new LoggerInputStream(this.wrapped, getLogger(), LEVEL);
+        return new LoggerInputStream(this.wrapped, getExtendedLogger(), LEVEL);
     }
 
     @Before
@@ -55,7 +55,7 @@ public void testClose_HasRemainingData() throws IOException {
     @Test
     public void testClose_NoRemainingData() throws IOException {
         this.wrapped = new ByteArrayInputStream((FIRST + '\n').getBytes());
-        this.in = new LoggerInputStream(this.wrapped, getLogger(), LEVEL);
+        this.in = new LoggerInputStream(this.wrapped, getExtendedLogger(), LEVEL);
 
         final byte[] bytes = new byte[1024];
         this.in.read(bytes);
@@ -116,7 +116,7 @@ public void testRead_int() throws Exception {
     @Test
     public void testRead_MultipleLines() throws IOException {
         this.wrapped = new ByteArrayInputStream((FIRST + "\n" + LAST + '\n').getBytes());
-        this.in = new LoggerInputStream(this.wrapped, getLogger(), LEVEL);
+        this.in = new LoggerInputStream(this.wrapped, getExtendedLogger(), LEVEL);
 
         final byte[] bytes = new byte[1024];
         final int len = this.in.read(bytes);

File: log4j-streams/src/test/java/org/apache/logging/log4j/streams/LoggerOutputStreamTest.java
Patch:
@@ -34,7 +34,7 @@ public class LoggerOutputStreamTest extends AbstractStreamTest {
     protected OutputStream out;
 
     protected OutputStream createOutputStream() {
-        return new LoggerOutputStream(this.wrapped, getLogger(), Level.ERROR);
+        return new LoggerOutputStream(this.wrapped, getExtendedLogger(), Level.ERROR);
     }
 
     @Before
@@ -66,7 +66,7 @@ public void testFlush() throws IOException {
         out.close();
         replay(out);
         
-        final LoggerOutputStream los = new LoggerOutputStream(out, getLogger(), LEVEL);
+        final LoggerOutputStream los = new LoggerOutputStream(out, getExtendedLogger(), LEVEL);
         los.flush();
         los.close();
         verify(out);

File: log4j-streams/src/test/java/org/apache/logging/log4j/streams/LoggerPrintStreamTest.java
Patch:
@@ -28,7 +28,7 @@ public class LoggerPrintStreamTest extends LoggerOutputStreamTest {
 
     @Override
     protected OutputStream createOutputStream() {
-        return this.print = new LoggerPrintStream(this.wrapped, getLogger(), LEVEL);
+        return this.print = new LoggerPrintStream(this.wrapped, getExtendedLogger(), LEVEL);
     }
 
     @Test

File: log4j-streams/src/test/java/org/apache/logging/log4j/streams/LoggerPrintWriterTest.java
Patch:
@@ -35,7 +35,7 @@ protected StringWriter createWriter() {
 
     @Override
     protected Writer createWriterWrapper() {
-        this.print = new LoggerPrintWriter(this.wrapped, getLogger(), LEVEL);
+        this.print = new LoggerPrintWriter(this.wrapped, getExtendedLogger(), LEVEL);
         return this.print;
     }
 

File: log4j-streams/src/test/java/org/apache/logging/log4j/streams/LoggerReaderTest.java
Patch:
@@ -34,7 +34,7 @@ public class LoggerReaderTest extends AbstractStreamTest {
     protected Reader reader;
 
     protected Reader createReader() {
-        return new LoggerReader(this.wrapped, getLogger(), LEVEL);
+        return new LoggerReader(this.wrapped, getExtendedLogger(), LEVEL);
     }
     
     @Before

File: log4j-streams/src/test/java/org/apache/logging/log4j/streams/LoggerWriterFilterTest.java
Patch:
@@ -12,7 +12,7 @@ protected StringWriter createWriter() {
 
     @Override
     protected Writer createWriterWrapper() {
-        return new LoggerWriterFilter(this.wrapped, getLogger(), LEVEL);
+        return new LoggerWriterFilter(this.wrapped, getExtendedLogger(), LEVEL);
     }
 
 }

File: log4j-streams/src/test/java/org/apache/logging/log4j/streams/LoggerWriterTest.java
Patch:
@@ -28,7 +28,7 @@ protected StringWriter createWriter() {
 
     @Override
     protected Writer createWriterWrapper() {
-        return new LoggerWriter(getLogger(), LEVEL);
+        return new LoggerWriter(getExtendedLogger(), LEVEL);
     }
 
 }

File: log4j-jms/src/main/java/org/apache/logging/log4j/mom/jms/manager/JndiManager.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.appender.AbstractManager;
 import org.apache.logging.log4j.core.appender.ManagerFactory;
-import org.apache.logging.log4j.core.util.Closer;
+import org.apache.logging.log4j.core.util.JndiCloser;
 import org.apache.logging.log4j.status.StatusLogger;
 
 /**
@@ -94,7 +94,7 @@ public static JndiManager getJndiManager(final String initialContextFactoryName,
 
     @Override
     protected void releaseSub() {
-        Closer.closeSilently(this.context);
+        JndiCloser.closeSilently(this.context);
     }
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StructuredDataLookup.java
Patch:
@@ -21,15 +21,15 @@
 import org.apache.logging.log4j.message.StructuredDataMessage;
 
 /**
- * Looks up keys from system properties.
+ * Looks up keys from {@link org.apache.logging.log4j.message.StructuredDataMessage} log messages.
  */
 @Plugin(name = "sd", category = "Lookup")
 public class StructuredDataLookup implements StrLookup {
 
     /**
-     * Looks up the value for the key.
+     * Returns {@code null}. This Lookup plugin does not make sense outside the context of a LogEvent.
      * @param key  the key to be looked up, may be null
-     * @return The value for the key.
+     * @return {@code null}
      */
     @Override
     public String lookup(final String key) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/UuidUtil.java
Patch:
@@ -167,7 +167,7 @@ private UuidUtil() {
      * <li>Digits 14-16 are a sequence number that is incremented each time a UUID is generated.</li>
      * <li>Digit 17 is the variant (with a value of binary 10) and 10 bits of the sequence number</li>
      * <li>Digit 18 is final 16 bits of the sequence number.</li>
-     * <li>Digits 19-32 represent the system the application is running on.
+     * <li>Digits 19-32 represent the system the application is running on.</li>
      * </ol>
      *
      * @return universally unique identifiers (UUID)

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/ThreadContextStack.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.logging.log4j.ThreadContext;
 
 /**
- *
+ * Service provider interface to implement custom NDC behavior for {@link ThreadContext}.
  */
 public interface ThreadContextStack extends ThreadContext.ContextStack {
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/package-info.java
Patch:
@@ -17,6 +17,6 @@
 
 /**
  * Java annotation processor for pre-scanning Log4j 2 plugins. This is provided as an alternative to using the
- * executable {@link org.apache.logging.log4j.core.config.plugins.PluginManager} class in your build process.
+ * executable {@link org.apache.logging.log4j.core.config.plugins.util.PluginManager} class in your build process.
  */
 package org.apache.logging.log4j.core.config.plugins.processor;
\ No newline at end of file

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/AbstractDatabaseAppender.java
Patch:
@@ -31,7 +31,7 @@
  * An abstract Appender for writing events to a database of some type, be it relational or NoSQL. All database appenders
  * should inherit from this base appender. Three implementations are currently provided:
  * {@link org.apache.logging.log4j.core.appender.db.jdbc JDBC}, {@link org.apache.logging.log4j.core.appender.db.jpa
- * JPA}, and {@link org.apache.logging.log4j.nosql.appender NoSQL}.
+ * JPA}, and <a href="/log4j/2.x/log4j-nosql/apidocs/">NoSQL</a>.
  *
  * @param <T> Specifies which type of {@link AbstractDatabaseManager} this Appender requires.
  */

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/ShutdownRegistrationStrategy.java
Patch:
@@ -46,7 +46,7 @@ public interface ShutdownRegistrationStrategy {
     /**
      * Adds a shutdown hook to be executed upon JVM exit.
      *
-     * @param hook a Thread in the {@link Thread.State#NEW} state
+     * @param hook a Thread in the {@code State.NEW} state
      * @throws IllegalStateException If the virtual machine is already in the process of shutting down
      */
     void registerShutdownHook(Thread hook);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/StatusLoggerAdminMBean.java
Patch:
@@ -76,10 +76,12 @@ public interface StatusLoggerAdminMBean {
      * <p>
      * Note that the returned objects may contain {@code Throwable}s from
      * external libraries.
-     *
+     * </p>
+     * <p>
      * JMX clients calling this method must be prepared to deal with the errors
      * that occur if they do not have the class definition for such
      * {@code Throwable}s in their classpath.
+     * </p>
      *
      * @return the most recent messages logged by the {@code StatusLogger}.
      */

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/ContextSelectorAdmin.java
Patch:
@@ -56,7 +56,7 @@ public ContextSelectorAdmin(final String contextName, final ContextSelector sele
      * Returns the {@code ObjectName} of this mbean.
      * 
      * @return the {@code ObjectName}
-     * @see ContextSelectorAdminMBean#NAME
+     * @see ContextSelectorAdminMBean#PATTERN
      */
     public ObjectName getObjectName() {
         return objectName;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java
Patch:
@@ -247,8 +247,8 @@ public void stop() {
     }
 
     private void tearDownShutdownHook() {
-        Thread thread = shutdownThread.get();
-        if (shutdownRegistrationStrategy != null && shutdownThread != null && thread != null) {
+        Thread thread = this.getShutdownThread();
+        if (shutdownRegistrationStrategy != null && thread != null) {
             shutdownRegistrationStrategy.unregisterShutdownHook(thread);
             LOGGER.debug(SHUTDOWN_HOOK_MARKER, "Enqueue shutdown hook for garbage collection.");
             shutdownThread.enqueue();

File: log4j-web/src/test/java/org/apache/logging/log4j/web/TestAsyncServlet.java
Patch:
@@ -28,6 +28,9 @@
 
 // TODO: write an integration test that deploys this Servlet 3.0 class to Tomcat and Jetty
 public class TestAsyncServlet extends HttpServlet {
+
+    private static final long serialVersionUID = 1L;
+
     @Override
     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
         final AsyncContext asyncContext = req.startAsync();

File: log4j-1.2-api/src/test/java/org/apache/log4j/BasicConfigurationFactory.java
Patch:
@@ -47,6 +47,8 @@ public Configuration getConfiguration(final String name, final URI configLocatio
 
     public class BasicConfiguration extends AbstractConfiguration {
 
+        private static final long serialVersionUID = -2716784321395089563L;
+
         private static final String DEFAULT_LEVEL = "org.apache.logging.log4j.level";
 
         public BasicConfiguration() {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java
Patch:
@@ -35,7 +35,6 @@
 import org.apache.logging.log4j.core.pattern.PatternFormatter;
 import org.apache.logging.log4j.core.pattern.PatternParser;
 import org.apache.logging.log4j.core.pattern.RegexReplacement;
-import org.apache.logging.log4j.core.util.Charsets;
 
 /**
  * <p>A flexible layout configurable with pattern string. The goal of this class
@@ -298,8 +297,9 @@ public static class Builder implements org.apache.logging.log4j.core.util.Builde
         @PluginElement("Replace")
         private RegexReplacement regexReplacement = null;
 
+        // LOG4J2-783 use platform default by default
         @PluginBuilderAttribute
-        private Charset charset = Charsets.UTF_8;
+        private Charset charset = Charset.defaultCharset();
 
         @PluginBuilderAttribute
         private boolean alwaysWriteExceptions = true;

File: log4j-web/src/main/java/org/apache/logging/log4j/web/Log4jWebInitializerImpl.java
Patch:
@@ -162,10 +162,11 @@ private URI getConfigURI(final String location) {
                     configLocation = paths[0];
                 } else if (paths.length > 1) {
                     final String prefix = "/WEB-INF/log4j2-" + this.name + ".";
-                    final boolean found = false;
+                    boolean found = false;
                     for (final String str : paths) {
                         if (str.startsWith(prefix)) {
                             configLocation = str;
+                            found = true;
                             break;
                         }
                     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/LoggerConfigAdmin.java
Patch:
@@ -36,10 +36,10 @@ public class LoggerConfigAdmin implements LoggerConfigAdminMBean {
     private final ObjectName objectName;
 
     /**
-     * Constructs a new {@code LoggerConfigAdmin} with the specified contextName
+     * Constructs a new {@code LoggerConfigAdmin} with the specified LoggerContext
      * and logger config.
      *
-     * @param contextName used in the {@code ObjectName} for this mbean
+     * @param loggerContext used in the {@code ObjectName} for this mbean
      * @param loggerConfig the instrumented object
      */
     public LoggerConfigAdmin(final LoggerContext loggerContext, final LoggerConfig loggerConfig) {

File: log4j-api/src/main/java/org/apache/logging/log4j/util/Strings.java
Patch:
@@ -76,7 +76,7 @@ public static boolean isNotEmpty(final CharSequence cs) {
 
     /**
      * Checks if a String is blank. A blank string is one that is {@code null}, empty, or when trimmed using
-     * {@link String#trim()} is still not empty.
+     * {@link String#trim()} is empty.
      *
      * @param s the String to check, may be {@code null}
      * @return {@code true} if the String is {@code null}, empty, or trims to empty.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginManager.java
Patch:
@@ -74,7 +74,9 @@ public PluginManager(final String category) {
     @Deprecated
     // use PluginProcessor instead
     public static void main(final String[] args) {
-        System.err.println("WARNING: this tool is superseded by the annotation processor included in log4j-core.");
+        System.err.println("ERROR: this tool is superseded by the annotation processor included in log4j-core.");
+        System.err.println("If the annotation processor does not work for you, please see the manual page:");
+        System.err.println("http://logging.apache.org/log4j/2.x/manual/configuration.html#ConfigurationSyntax");
         System.exit(-1);
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/MapLookup.java
Patch:
@@ -51,9 +51,10 @@ public MapLookup() {
 
     /**
      * Looks up a String key to a String value using the map.
-     * <p/>
+     * <p>
      * If the map is null, then null is returned.
      * The map result object is converted to a string using toString().
+     * </p>
      *
      * @param key the key to be looked up, may be null
      * @return the matching value, null if no match

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/ContextMapLookup.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 
 /**
- * Looks up keys from system properties.
+ * Looks up keys from {@link ThreadContext} objects..
  */
 @Plugin(name = "ctx", category = "Lookup")
 public class ContextMapLookup implements StrLookup {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/JndiLookup.java
Patch:
@@ -75,7 +75,7 @@ public String lookup(final LogEvent event, final String key) {
      */
     private String convertJndiName(String jndiName) {
         if (!jndiName.startsWith(CONTAINER_JNDI_RESOURCE_PATH_PREFIX) && jndiName.indexOf(':') == -1) {
-            jndiName = CONTAINER_JNDI_RESOURCE_PATH_PREFIX + jndiName;
+            return CONTAINER_JNDI_RESOURCE_PATH_PREFIX + jndiName;
         }
         return jndiName;
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/Assert.java
Patch:
@@ -31,7 +31,7 @@ private Assert() {
      * </p>
      * <p>
      * Usage:
-     *
+     * </p>
      * <pre>
      * // earlier you would write this:
      * public SomeConstructor(Object param) {
@@ -49,9 +49,9 @@ private Assert() {
      *
      * @param <T> the type of the parameter to check and return
      * @param object the parameter to check
-     * @param message name of the parameter to use in the error message if
-     *            {@code null}
+     * @param message message to populate the NPE with if necessary
      * @return the specified parameter
+     * @throws NullPointerException if {@code object} is {@code null}
      */
     public static <T> T requireNonNull(final T object, final String message) {
         if (object == null) {

File: log4j-api/src/main/java/org/apache/logging/log4j/message/package-info.java
Patch:
@@ -16,6 +16,6 @@
  */
 
 /**
- * Public Message Types used for Log4j 2.0. User's may implement their own Messages.
+ * Public Message Types used for Log4j 2. Users may implement their own Messages.
  */
 package org.apache.logging.log4j.message;

File: log4j-api/src/main/java/org/apache/logging/log4j/status/package-info.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the license.
  */
 
-/** Status API for Log4j 2.0. Should not be used by typical applications performing logging but may be
+/** Status API for Log4j 2. Should not be used by typical applications performing logging but may be
  * used by applications reporting on the status of the logging system
  */
 package org.apache.logging.log4j.status;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/package-info.java
Patch:
@@ -15,6 +15,6 @@
  * limitations under the license.
  */
 /**
- * Log4j 2.0 Appenders.
+ * Log4j 2 Appenders.
  */
 package org.apache.logging.log4j.core.appender;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/package-info.java
Patch:
@@ -15,6 +15,6 @@
  * limitations under the license.
  */
 /**
- * Configuration of Log4j 2.0.
+ * Configuration of Log4j 2.
  */
 package org.apache.logging.log4j.core.config;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/package-info.java
Patch:
@@ -15,6 +15,6 @@
  * limitations under the license.
  */
 /**
- * Log4j 2.0 Filter support.
+ * Log4j 2 Filter support.
  */
 package org.apache.logging.log4j.core.filter;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/package-info.java
Patch:
@@ -15,6 +15,6 @@
  * limitations under the license.
  */
 /**
- * Log4j 2.0 private implementation classes.
+ * Log4j 2 private implementation classes.
  */
 package org.apache.logging.log4j.core.impl;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/package-info.java
Patch:
@@ -15,6 +15,6 @@
  * limitations under the license.
  */
 /**
- * Log4j 2.0 JMX support.
+ * Log4j 2 JMX support.
  */
 package org.apache.logging.log4j.core.jmx;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/package-info.java
Patch:
@@ -15,6 +15,6 @@
  * limitations under the license.
  */
 /**
- * Log4j 2.0 Layout support.
+ * Log4j 2 Layout support.
  */
 package org.apache.logging.log4j.core.layout;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/package-info.java
Patch:
@@ -15,6 +15,6 @@
  * limitations under the license.
  */
 /**
- * Log4j 2.0 Lookups.
+ * Log4j 2 Lookups.
  */
 package org.apache.logging.log4j.core.lookup;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/package-info.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the license.
  */
 /**
- * Log4j 2.0 network support. This package (and subpackages) include support for:
+ * Log4j 2 network support. This package (and subpackages) include support for:
  * <ul>
  *     <li>Java Message System appenders (both queue-based and topic-based)</li>
  *     <li>Zeroconf support for finding logging systems</li>

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/package-info.java
Patch:
@@ -15,6 +15,6 @@
  * limitations under the license.
  */
 /**
- * Log4j 2.0 SSL support
+ * Log4j 2 SSL support
  */
 package org.apache.logging.log4j.core.net.ssl;
\ No newline at end of file

File: log4j-core/src/main/java/org/apache/logging/log4j/core/package-info.java
Patch:
@@ -15,6 +15,6 @@
  * limitations under the license.
  */
 /**
- * Implementation of Log4j 2.0.
+ * Implementation of Log4j 2.
  */
 package org.apache.logging.log4j.core;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/selector/package-info.java
Patch:
@@ -15,6 +15,6 @@
  * limitations under the license.
  */
 /**
- * Log4j 2.0 Context Selectors.
+ * Log4j 2 Context Selectors.
  */
 package org.apache.logging.log4j.core.selector;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/tools/package-info.java
Patch:
@@ -15,6 +15,6 @@
  * limitations under the license.
  */
 /**
- * Log4j 2.0 command line tools.
+ * Log4j 2 command line tools.
  */
 package org.apache.logging.log4j.core.tools;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/package-info.java
Patch:
@@ -15,6 +15,6 @@
  * limitations under the license.
  */
 /**
- * Log4j 2.0 helper classes.
+ * Log4j 2 helper classes.
  */
 package org.apache.logging.log4j.core.util;

File: log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/TimeFormatBenchmark.java
Patch:
@@ -32,7 +32,7 @@
 import org.openjdk.jmh.annotations.State;
 
 /**
- * Tests performance of various clock implementation.
+ * Tests performance of various time format implementation.
  */
 // ============================== HOW TO RUN THIS TEST: ====================================
 //

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginManager.java
Patch:
@@ -171,6 +171,8 @@ private static PluginRegistry<PluginType<?>> decode(final ResourceLoader loader)
                             types.put(key, pluginType);
                         } catch (final ClassNotFoundException e) {
                             LOGGER.info("Plugin [{}] could not be loaded due to missing classes.", className, e);
+                        } catch (final VerifyError e) {
+                            LOGGER.info("Plugin [{}] could not be loaded due to verification error.", className, e);
                         }
                     }
                 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/JndiLookup.java
Patch:
@@ -22,7 +22,7 @@
 
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
-import org.apache.logging.log4j.core.util.Closer;
+import org.apache.logging.log4j.core.util.JndiCloser;
 
 /**
  * Looks up keys from JNDI resources.
@@ -62,7 +62,7 @@ public String lookup(final LogEvent event, final String key) {
         } catch (final NamingException e) {
             return null;
         } finally {
-            Closer.closeSilently(ctx);
+            JndiCloser.closeSilently(ctx);
         }
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/selector/JndiContextSelector.java
Patch:
@@ -23,15 +23,16 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
+
 import javax.naming.Context;
 import javax.naming.InitialContext;
 import javax.naming.NameNotFoundException;
 import javax.naming.NamingException;
 
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.impl.ContextAnchor;
-import org.apache.logging.log4j.core.util.Closer;
 import org.apache.logging.log4j.core.util.Constants;
+import org.apache.logging.log4j.core.util.JndiCloser;
 import org.apache.logging.log4j.status.StatusLogger;
 
 /**
@@ -118,7 +119,7 @@ public LoggerContext getContext(final String fqcn, final ClassLoader loader, fin
         } catch (final NamingException ne) {
             LOGGER.error("Unable to lookup " + Constants.JNDI_CONTEXT_NAME, ne);
         } finally {
-            Closer.closeSilently(ctx);
+            JndiCloser.closeSilently(ctx);
         }
 
         return loggingContextName == null ? CONTEXT : locateContext(loggingContextName, null, configLocation);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java
Patch:
@@ -74,7 +74,7 @@ public Interpolator(final Map<String, String> properties) {
         lookups.put("env", new EnvironmentLookup());
         try {
             lookups.put("jndi", new JndiLookup());
-        } catch (Exception e) {
+        } catch (Throwable e) {
             // [LOG4J2-703] We might be on Android
             // java.lang.VerifyError: org/apache/logging/log4j/core/lookup/JndiLookup
             LOGGER.warn(

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerContextSelectorTest.java
Patch:
@@ -51,11 +51,11 @@ public void testLoggerContextsReturnsAsyncLoggerContext() {
     }
 
     @Test
-    public void testContextNameIsAsyncLoggerContext() {
+    public void testContextNameIsAsyncLoggerContextWithClassHashCode() {
         final AsyncLoggerContextSelector selector = new AsyncLoggerContextSelector();
         final LoggerContext context = selector.getContext(null, null, false);
-
-        assertEquals("AsyncLoggerContext", context.getName());
+        final String expectedContextName = "AsyncLoggerContext@" + AsyncLoggerContext.class.hashCode();
+        assertEquals(expectedContextName, context.getName());
     }
 
 }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerContextSelectorTest.java
Patch:
@@ -51,11 +51,11 @@ public void testLoggerContextsReturnsAsyncLoggerContext() {
     }
 
     @Test
-    public void testContextNameIsAsyncLoggerContext() {
+    public void testContextNameIsAsyncLoggerContextWithClassHashCode() {
         final AsyncLoggerContextSelector selector = new AsyncLoggerContextSelector();
         final LoggerContext context = selector.getContext(null, null, false);
-
-        assertEquals("AsyncLoggerContext", context.getName());
+        final String expectedContextName = "AsyncLoggerContext@" + AsyncLoggerContext.class.hashCode();
+        assertEquals(expectedContextName, context.getName());
     }
 
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java
Patch:
@@ -234,9 +234,9 @@ public String toString() {
      * @param noConsoleNoAnsi
      *        If {@code "true"} (default is false) and {@link System#console()} is null, do not output ANSI escape codes
      * @param header
-     *        The footer to place at the end of the document, once.
-     * @param footer
      *        The footer to place at the top of the document, once.
+     * @param footer
+     *        The footer to place at the bottom of the document, once.
      * @return The PatternLayout.
      */
     @PluginFactory

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java
Patch:
@@ -152,7 +152,7 @@ static class Stats {
         long _pct99_99;
         double _latencyRowCount;
         int _throughputRowCount;
-        private final long _averageOpsPerSec;
+        private long _averageOpsPerSec;
 
         // example line: avg=828 99%=1118 99.99%=5028 Count=3125
         public Stats(final String raw) {

File: log4j-core/src/test/java/org/apache/logging/log4j/test/AvailablePortFinder.java
Patch:
@@ -114,7 +114,7 @@ public static synchronized int getNextAvailable(final int fromPort) {
 
         for (int i = fromPort; i <= MAX_PORT_NUMBER; i++) {
             if (available(i)) {
-                LOG.info("getNextAvailable({}) -> {}", fromPort, i);
+                LOG.debug("getNextAvailable({}) -> {}", fromPort, i);
                 return i;
             }
         }

File: log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/package-info.java
Patch:
@@ -17,9 +17,9 @@
 /**
  * The NoSQL Appender supports writing log events to NoSQL databases. The following NoSQL databases are currently
  * supported. You can also easily extend this to support other NoSQL databases by implementing just three interfaces:
- * {@link org.apache.logging.log4j.nosql.appender.NoSQLObject NoSQLObject},
- * {@link org.apache.logging.log4j.nosql.appender.NoSQLConnection NoSQLConnection}, and
- * {@link org.apache.logging.log4j.nosql.appender.NoSQLProvider NoSQLProvider}. You will need the client library for your
+ * {@link org.apache.logging.log4j.nosql.appender.NoSqlObject NoSqlObject},
+ * {@link org.apache.logging.log4j.nosql.appender.NoSqlConnection NoSqlConnection}, and
+ * {@link org.apache.logging.log4j.nosql.appender.NoSqlProvider NoSqlProvider}. You will need the client library for your
  * NoSQL database of choice on the classpath to use this appender; these Maven dependencies are optional and will not
  * automatically be added to your classpath.<br>
  * <br>

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginBuilder.java
Patch:
@@ -119,7 +119,7 @@ public T build() {
                 return result;
             }
         } catch (final Exception e) {
-            LOGGER.catching(Level.DEBUG, e);
+            LOGGER.catching(Level.ERROR, e);
             LOGGER.error("Unable to inject fields into builder class for plugin type {}, element {}.", this.clazz,
                 node.getName());
         }
@@ -134,7 +134,7 @@ public T build() {
             LOGGER.debug("Built Plugin[name={}] OK from factory method.", pluginType.getElementName());
             return plugin;
         } catch (final Exception e) {
-            LOGGER.catching(Level.DEBUG, e);
+            LOGGER.catching(Level.ERROR, e);
             LOGGER.error("Unable to invoke factory method in class {} for element {}.", this.clazz, this.node.getName());
             return null;
         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/Configurator.java
Patch:
@@ -123,7 +123,7 @@ public static LoggerContext initialize(final String name, final ClassLoader load
      * @return The LoggerContext.
      */
     public static LoggerContext initialize(final ClassLoader loader,
-                                           final ConfigurationFactory.ConfigurationSource source) {
+                                           final ConfigurationSource source) {
         return initialize(loader, source, null);
     }
 
@@ -136,7 +136,7 @@ public static LoggerContext initialize(final ClassLoader loader,
      */
 
     public static LoggerContext initialize(final ClassLoader loader,
-                                           final ConfigurationFactory.ConfigurationSource source,
+                                           final ConfigurationSource source,
                                            final Object externalContext)
     {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultConfiguration.java
Patch:
@@ -50,7 +50,8 @@ public class DefaultConfiguration extends AbstractConfiguration {
      * Constructor to create the default configuration.
      */
     public DefaultConfiguration() {
-
+        super(ConfigurationSource.NULL_SOURCE);
+        
         setName(DEFAULT_NAME);
         final Layout<? extends Serializable> layout = PatternLayout.newBuilder()
             .withPattern(DEFAULT_PATTERN)

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/NullConfiguration.java
Patch:
@@ -26,6 +26,7 @@ public class NullConfiguration extends AbstractConfiguration {
     public static final String NULL_NAME = "Null";
 
     public NullConfiguration() {
+        super(ConfigurationSource.NULL_SOURCE);
 
         setName(NULL_NAME);
         final LoggerConfig root = getRootLogger();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfigurationFactory.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.ConfigurationFactory;
+import org.apache.logging.log4j.core.config.ConfigurationSource;
 import org.apache.logging.log4j.core.config.Order;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.util.Loader;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfigurationFactory.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.ConfigurationFactory;
+import org.apache.logging.log4j.core.config.ConfigurationSource;
 import org.apache.logging.log4j.core.config.Order;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/yaml/YamlConfiguration.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.logging.log4j.core.config.yaml;
 
-import org.apache.logging.log4j.core.config.ConfigurationFactory;
+import org.apache.logging.log4j.core.config.ConfigurationSource;
 import org.apache.logging.log4j.core.config.json.JsonConfiguration;
 
 import com.fasterxml.jackson.core.JsonParser;
@@ -25,7 +25,7 @@
 
 public class YamlConfiguration extends JsonConfiguration {
 
-    public YamlConfiguration(ConfigurationFactory.ConfigurationSource configSource) {
+    public YamlConfiguration(ConfigurationSource configSource) {
         super(configSource);
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/yaml/YamlConfigurationFactory.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.ConfigurationFactory;
+import org.apache.logging.log4j.core.config.ConfigurationSource;
 import org.apache.logging.log4j.core.config.Order;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.util.Loader;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.ConfigurationFactory;
+import org.apache.logging.log4j.core.config.ConfigurationSource;
 import org.apache.logging.log4j.core.selector.ClassLoaderContextSelector;
 import org.apache.logging.log4j.core.selector.ContextSelector;
 import org.apache.logging.log4j.core.util.Constants;
@@ -87,7 +88,7 @@ public LoggerContext getContext(final String fqcn, final ClassLoader loader, fin
      * @return The LoggerContext.
      */
     public LoggerContext getContext(final String fqcn, final ClassLoader loader, final Object externalContext,
-                                    final boolean currentContext, final ConfigurationFactory.ConfigurationSource source) {
+                                    final boolean currentContext, final ConfigurationSource source) {
         final LoggerContext ctx = selector.getContext(fqcn, loader, currentContext, null);
         if (externalContext != null && ctx.getExternalContext() == null) {
             ctx.setExternalContext(externalContext);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/server/AbstractSocketServer.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.LogEventListener;
 import org.apache.logging.log4j.core.config.Configuration;
+import org.apache.logging.log4j.core.config.ConfigurationSource;
 import org.apache.logging.log4j.core.config.xml.XmlConfiguration;
 import org.apache.logging.log4j.core.config.xml.XmlConfigurationFactory;
 import org.apache.logging.log4j.core.util.Assert;
@@ -68,7 +69,7 @@ public Configuration getConfiguration(final String name, final URI configLocatio
                 if (source == null) {
                     try {
                         final URL url = new URL(path);
-                        source = new ConfigurationSource(url.openStream(), path);
+                        source = new ConfigurationSource(url.openStream(), url);
                     } catch (final MalformedURLException mue) {
                         // Ignore this error
                     } catch (final IOException ioe) {

File: log4j-core/src/test/java/org/apache/logging/log4j/Log4jInitPerformance.java
Patch:
@@ -20,7 +20,7 @@
 import java.io.InputStream;
 
 import org.apache.logging.log4j.categories.PerformanceTests;
-import org.apache.logging.log4j.core.config.ConfigurationFactory;
+import org.apache.logging.log4j.core.config.ConfigurationSource;
 import org.apache.logging.log4j.core.config.Configurator;
 import org.junit.Test;
 import org.junit.experimental.categories.Category;
@@ -46,8 +46,8 @@ public void testInitialize() throws Exception {
                 "</Loggers>" +
                 "</Configuration>";
         final InputStream is = new ByteArrayInputStream(log4jConfigString.getBytes());
-        final ConfigurationFactory.ConfigurationSource source =
-            new ConfigurationFactory.ConfigurationSource(is);
+        final ConfigurationSource source =
+            new ConfigurationSource(is);
         final long begin = System.currentTimeMillis();
         Configurator.initialize(null, source);
         final long tookForInit = System.currentTimeMillis() - begin;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/BasicConfigurationFactory.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.logging.log4j.core.config.AbstractConfiguration;
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.ConfigurationFactory;
+import org.apache.logging.log4j.core.config.ConfigurationSource;
 import org.apache.logging.log4j.core.config.LoggerConfig;
 
 /**
@@ -49,6 +50,7 @@ public class BasicConfiguration extends AbstractConfiguration {
         private static final String DEFAULT_LEVEL = "org.apache.logging.log4j.level";
 
         public BasicConfiguration() {
+            super(ConfigurationSource.NULL_SOURCE);
 
             final LoggerConfig root = getRootLogger();
             final String l = System.getProperty(DEFAULT_LEVEL);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java
Patch:
@@ -242,9 +242,7 @@ public Configuration reconfigure() {
                 final ConfigurationFactory.ConfigurationSource source =
                     new ConfigurationFactory.ConfigurationSource(new FileInputStream(configFile), configFile);
                 final XmlConfiguration config = new XmlConfiguration(source);
-                if (config.rootElement == null) {
-                    return null;
-                }
+                return (config.rootElement == null) ? null : config;
             } catch (final FileNotFoundException ex) {
                 LOGGER.error("Cannot locate file " + configFile, ex);
             }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/visitors/PluginNodeVisitor.java
Patch:
@@ -31,9 +31,10 @@ public PluginNodeVisitor() {
     }
 
     @Override
-    public Object visit(final Configuration configuration, final Node node, final LogEvent event) {
+    public Object visit(final Configuration configuration, final Node node, final LogEvent event,
+                        final StringBuilder log) {
         if (this.conversionType.isInstance(node)) {
-            LOGGER.debug("Node={}", node.getName());
+            log.append("Node=").append(node.getName());
             return node;
         }
         LOGGER.warn("Variable annotated with @PluginNode is not compatible with the type {}.", node.getClass());

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/visitors/PluginValueVisitor.java
Patch:
@@ -31,12 +31,13 @@ public PluginValueVisitor() {
     }
 
     @Override
-    public Object visit(final Configuration configuration, final Node node, final LogEvent event) {
+    public Object visit(final Configuration configuration, final Node node, final LogEvent event,
+                        final StringBuilder log) {
         final String name = this.annotation.value();
         final String rawValue = node.getValue() != null ? node.getValue() :
             removeAttributeValue(node.getAttributes(), "value");
         final String value = this.substitutor.replace(event, rawValue);
-        LOGGER.debug("{}={}", name, value);
+        log.append(name).append("=\"").append(value).append('"');
         return value;
     }
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/visitors/PluginVisitor.java
Patch:
@@ -87,7 +87,8 @@ public interface PluginVisitor<A extends Annotation> {
      * @param configuration the current Configuration.
      * @param node          the current Node corresponding to the Plugin object being created.
      * @param event         the current LogEvent that caused this Plugin object to be made (optional).
+     * @param log           the StringBuilder being used to build a debug message.
      * @return the converted value to be used for Plugin creation.
      */
-    Object visit(Configuration configuration, Node node, LogEvent event);
+    Object visit(Configuration configuration, Node node, LogEvent event, StringBuilder log);
 }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/XmlCompactFileAppenderTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.logging.log4j.core.LifeCycle;
 import org.apache.logging.log4j.core.config.ConfigurationFactory;
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import static org.junit.Assert.*;
@@ -41,7 +40,6 @@ public static void beforeClass() {
                 "XmlCompactFileAppenderTest.xml");
     }
 
-    @Ignore // stopgap solution for broken build in revision 1602598 (LOG4J2-392)
     @Test
     public void testFlushAtEndOfBatch() throws Exception {
         final File file = new File("target", "XmlCompactFileAppenderTest.log");

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/XmlCompleteFileAppenderTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.logging.log4j.core.LifeCycle;
 import org.apache.logging.log4j.core.config.ConfigurationFactory;
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import static org.junit.Assert.*;
@@ -41,7 +40,6 @@ public static void beforeClass() {
                 "XmlCompleteFileAppenderTest.xml");
     }
 
-    @Ignore // stopgap solution for broken build in revision 1602598 (LOG4J2-392)
     @Test
     public void testFlushAtEndOfBatch() throws Exception {
         final File f = new File("target", "XmlCompleteFileAppenderTest.log");

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/XmlFileAppenderTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.logging.log4j.core.LifeCycle;
 import org.apache.logging.log4j.core.config.ConfigurationFactory;
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import static org.junit.Assert.*;
@@ -41,7 +40,6 @@ public static void beforeClass() {
                 "XmlFileAppenderTest.xml");
     }
 
-    @Ignore // stopgap solution for broken build in revision 1602598 (LOG4J2-392)
     @Test
     public void testFlushAtEndOfBatch() throws Exception {
         final File f = new File("target", "XmlFileAppenderTest.log");

File: log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAvroManager.java
Patch:
@@ -195,7 +195,7 @@ private RpcClient connect(final Agent[] agents, int retries, final int connectTi
         try {
             final Properties props = new Properties();
 
-            props.put("client.type", agents.length > 1 ? "default_failover" : "default");
+            props.put("client.type", "default_failover");
 
             int count = 1;
             final StringBuilder sb = new StringBuilder();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginManager.java
Patch:
@@ -136,6 +136,9 @@ private static PluginRegistry<PluginType<?>> decode(final ResourceLoader loader)
         final Enumeration<URL> resources;
         try {
             resources = loader.getResources(PATH + FILENAME);
+            if (resources == null) {
+                return null;
+            }
         } catch (final IOException ioe) {
             LOGGER.warn("Unable to preload plugins", ioe);
             return null;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/Plugin.java
Patch:
@@ -38,10 +38,9 @@
     String EMPTY = Strings.EMPTY;
 
     /**
-     * Name of the plugin. If no name is specified, defaults to the simple class name of the annotated element.
-     * Note that this name is case-insensitive.
+     * Name of the plugin. Note that this name is case-insensitive.
      */
-    String name() default EMPTY;
+    String name();
 
     /**
      * Category to place the plugin under. Category names are case-sensitive.

File: log4j-1.2-api/src/test/java/org/apache/log4j/VelocityTest.java
Patch:
@@ -32,7 +32,7 @@ public class VelocityTest {
     public void testVelocity() {
         Velocity.init();
         VelocityContext context = new VelocityContext();
-        context.put( "name", new String("Velocity") );
+        context.put("name", new String("Velocity"));
 
         Template template = Velocity.getTemplate("target/test-classes/hello.vm");
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java
Patch:
@@ -93,10 +93,10 @@ public static void mkdir(final File dir, final boolean createDirectoryIfNotExist
         // commons io FileUtils.forceMkdir would be useful here, we just want to omit this dependency
         if (!dir.exists()) {
             if(!createDirectoryIfNotExisting) {
-                throw new IOException( "The directory " + dir.getAbsolutePath() + " does not exist." );
+                throw new IOException("The directory " + dir.getAbsolutePath() + " does not exist.");
             }
             if(!dir.mkdirs()) {
-                throw new IOException( "Could not create directory " + dir.getAbsolutePath() );
+                throw new IOException("Could not create directory " + dir.getAbsolutePath());
             }
         }
         if (!dir.isDirectory()) {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/jms/JmsQueueAppenderTest.java
Patch:
@@ -62,7 +62,7 @@ public static void setupClass() throws Exception {
         StatusLogger.getLogger().registerListener(listener);
         MockContextFactory.setAsInitial();
         context = new InitialContext();
-        context.rebind(FACTORY_NAME, new QueueConnectionFactoryImpl() );
+        context.rebind(FACTORY_NAME, new QueueConnectionFactoryImpl());
         context.rebind(QUEUE_NAME, new MockQueue(QUEUE_NAME));
         System.setProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY, CONFIG);
         receiver = new JmsQueueReceiver(FACTORY_NAME, QUEUE_NAME, null, null);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/jms/JmsQueueFailoverTest.java
Patch:
@@ -90,7 +90,7 @@ private static void setupQueue() throws Exception {
         StatusLogger.getLogger().registerListener(listener);
         MockContextFactory.setAsInitial();
         context = new InitialContext();
-        context.rebind(FACTORY_NAME, new QueueConnectionFactoryImpl() );
+        context.rebind(FACTORY_NAME, new QueueConnectionFactoryImpl());
         //context.rebind(QUEUE_NAME, new MockQueue(QUEUE_NAME));
         //System.setProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY, CONFIG);
         //receiver = new JmsQueueReceiver(FACTORY_NAME, QUEUE_NAME, null, null);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/jms/JmsQueueTest.java
Patch:
@@ -68,7 +68,7 @@ public static void setupClass() throws Exception {
         StatusLogger.getLogger().registerListener(listener);
         MockContextFactory.setAsInitial();
         context = new InitialContext();
-        context.rebind(FACTORY_NAME, new QueueConnectionFactoryImpl() );
+        context.rebind(FACTORY_NAME, new QueueConnectionFactoryImpl());
         context.rebind(QUEUE_NAME, new MockQueue(QUEUE_NAME));
         ((LoggerContext) LogManager.getContext()).reconfigure();
         receiver = new JmsQueueReceiver(FACTORY_NAME, QUEUE_NAME, null, null);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/jms/JmsTopicFailoverTest.java
Patch:
@@ -89,7 +89,7 @@ private static void setupQueue() throws Exception {
         StatusLogger.getLogger().registerListener(listener);
         MockContextFactory.setAsInitial();
         context = new InitialContext();
-        context.rebind(FACTORY_NAME, new TopicConnectionFactoryImpl() );
+        context.rebind(FACTORY_NAME, new TopicConnectionFactoryImpl());
         //context.rebind(QUEUE_NAME, new MockQueue(QUEUE_NAME));
         //System.setProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY, CONFIG);
         //receiver = new JmsQueueReceiver(FACTORY_NAME, QUEUE_NAME, null, null);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/jms/JmsTopicTest.java
Patch:
@@ -68,8 +68,8 @@ public static void setupClass() throws Exception {
         StatusLogger.getLogger().registerListener(listener);
         MockContextFactory.setAsInitial();
         context = new InitialContext();
-        context.rebind(FACTORY_NAME, new TopicConnectionFactoryImpl() );
-        context.rebind(TOPIC_NAME, new MockTopic(TOPIC_NAME) );
+        context.rebind(FACTORY_NAME, new TopicConnectionFactoryImpl());
+        context.rebind(TOPIC_NAME, new MockTopic(TOPIC_NAME));
         ((LoggerContext) LogManager.getContext()).reconfigure();
         receiver = new JmsTopicReceiver(FACTORY_NAME, TOPIC_NAME, null, null);
     }

File: log4j-slf4j-impl/src/test/java/org/apache/logging/slf4j/LoggerTest.java
Patch:
@@ -182,10 +182,10 @@ private void verify(final String name, final String expected) {
 
     @Before
     public void cleanup() {
-        final Map<String, Appender> list = ctx.getConfiguration().getAppenders();
-        final Appender listApp = list.get("List");
+        final Map<String, Appender> map = ctx.getConfiguration().getAppenders();
+        final Appender listApp = map.get("List");
         ((ListAppender) listApp).clear();
-        final Appender eventApp = list.get("EventLogger");
+        final Appender eventApp = map.get("EventLogger");
         ((ListAppender) eventApp).clear();
     }
 }

File: log4j-jcl/src/test/java/org/apache/logging/log4j/jcl/LoggerTest.java
Patch:
@@ -72,8 +72,8 @@ public void testLog() {
 
     private void verify(final String name, final String expected) {
         final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);
-        final Map<String, Appender> list = ctx.getConfiguration().getAppenders();
-        final Appender listApp = list.get(name);
+        final Map<String, Appender> map = ctx.getConfiguration().getAppenders();
+        final Appender listApp = map.get(name);
         assertNotNull("Missing Appender", listApp);
         assertTrue("Not a ListAppender", listApp instanceof ListAppender);
         final List<String> events = ((ListAppender) listApp).getMessages();

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java
Patch:
@@ -62,8 +62,8 @@ public void setUp(final String configFileName) throws SQLException {
     public void tearDown() throws SQLException {
         final LoggerContext context = (LoggerContext) LogManager.getContext(false);
         try {
-            final Map<String, Appender> list = context.getConfiguration().getAppenders();
-            final Appender appender = list.get("databaseAppender");
+            final Map<String, Appender> map = context.getConfiguration().getAppenders();
+            final Appender appender = map.get("databaseAppender");
             assertNotNull("The appender should not be null.", appender);
             assertTrue("The appender should be a JpaAppender.", appender instanceof JpaAppender);
             ((JpaAppender) appender).getManager().release();

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java
Patch:
@@ -80,8 +80,8 @@ protected void setUp(final String tableName, final String configFileName) throws
     public void tearDown() throws SQLException {
         final LoggerContext context = (LoggerContext) LogManager.getContext(false);
         try {
-            final Map<String, Appender> list = context.getConfiguration().getAppenders();
-            final Appender appender = list.get("databaseAppender");
+            final Map<String, Appender> map = context.getConfiguration().getAppenders();
+            final Appender appender = map.get("databaseAppender");
             assertNotNull("The appender should not be null.", appender);
             assertTrue("The appender should be a JdbcAppender.", appender instanceof JdbcAppender);
             ((JdbcAppender) appender).getManager().release();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/DatagramSocketManager.java
Patch:
@@ -105,14 +105,14 @@ private static class DatagramSocketManagerFactory implements ManagerFactory<Data
         @Override
         public DatagramSocketManager createManager(final String name, final FactoryData data) {
             InetAddress inetAddress;
-            final OutputStream os = new DatagramOutputStream(data.host, data.port, data.layout.getHeader(),
-                data.layout.getFooter());
             try {
                 inetAddress = InetAddress.getByName(data.host);
             } catch (final UnknownHostException ex) {
                 LOGGER.error("Could not find address of " + data.host, ex);
                 return null;
             }
+            final OutputStream os = new DatagramOutputStream(data.host, data.port, data.layout.getHeader(),
+                    data.layout.getFooter());
             return new DatagramSocketManager(name, os, inetAddress, data.host, data.port, data.layout);
         }
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java
Patch:
@@ -82,10 +82,10 @@ private ConsoleAppender(final String name, final Layout<? extends Serializable>
     public static ConsoleAppender createAppender(
             @PluginElement("Layout") Layout<? extends Serializable> layout,
             @PluginElement("Filters") final Filter filter,
-            @PluginAttribute(value = "target", defaultStringValue = "SYSTEM_OUT") final String targetStr,
+            @PluginAttribute(value = "target", defaultString = "SYSTEM_OUT") final String targetStr,
             @PluginAttribute("name") final String name,
-            @PluginAttribute(value = "follow", defaultBooleanValue = false) final String follow,
-            @PluginAttribute(value = "ignoreExceptions", defaultBooleanValue = true) final String ignore) {
+            @PluginAttribute(value = "follow", defaultBoolean = false) final String follow,
+            @PluginAttribute(value = "ignoreExceptions", defaultBoolean = true) final String ignore) {
         if (name == null) {
             LOGGER.error("No name provided for ConsoleAppender");
             return null;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/LoggerFields.java
Patch:
@@ -73,7 +73,7 @@ public static LoggerFields createLoggerFields(
         @PluginElement("LoggerFields") final KeyValuePair[] keyValuePairs,
         @PluginAttribute("sdId") final String sdId,
         @PluginAttribute("enterpriseId") final String enterpriseId,
-        @PluginAttribute(value = "discardIfAllFieldsAreEmpty", defaultBooleanValue = false) final boolean discardIfAllFieldsAreEmpty) {
+        @PluginAttribute(value = "discardIfAllFieldsAreEmpty", defaultBoolean = false) final boolean discardIfAllFieldsAreEmpty) {
         final Map<String, String> map = new HashMap<String, String>();
 
         for (final KeyValuePair keyValuePair : keyValuePairs) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/SyslogLayout.java
Patch:
@@ -134,10 +134,10 @@ public Map<String, String> getContentFormat()
      */
     @PluginFactory
     public static SyslogLayout createLayout(
-            @PluginAttribute(value = "facility", defaultStringValue = "LOCAL0") final Facility facility,
-            @PluginAttribute(value = "newLine", defaultBooleanValue = false) final boolean includeNewLine,
+            @PluginAttribute(value = "facility", defaultString = "LOCAL0") final Facility facility,
+            @PluginAttribute(value = "newLine", defaultBoolean = false) final boolean includeNewLine,
             @PluginAttribute("newLineEscape") final String escapeNL,
-            @PluginAttribute(value = "charset", defaultStringValue = "UTF-8") final Charset charset) {
+            @PluginAttribute(value = "charset", defaultString = "UTF-8") final Charset charset) {
         return new SyslogLayout(facility, includeNewLine, escapeNL, charset);
     }
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/PluginAttribute.java
Patch:
@@ -22,6 +22,8 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.apache.logging.log4j.core.config.plugins.visitors.PluginAttributeVisitor;
+
 /**
  * Identifies a Plugin Attribute and its default value. Note that only one of the defaultFooValue attributes will be
  * used based on the type this annotation is attached to. Thus, for primitive types, the default<i>Type</i>Value
@@ -32,7 +34,7 @@
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.PARAMETER, ElementType.FIELD})
-@PluginVisitorStrategy("org.apache.logging.log4j.core.config.plugins.visitors.PluginAttributeVisitor")
+@PluginVisitorStrategy(PluginAttributeVisitor.class)
 public @interface PluginAttribute {
 
     // TODO: could we allow a blank value and infer the attribute name through reflection?

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/PluginConfiguration.java
Patch:
@@ -22,13 +22,15 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.apache.logging.log4j.core.config.plugins.visitors.PluginConfigurationVisitor;
+
 /**
  * Identifies a parameter or field as a Configuration.
  * @see org.apache.logging.log4j.core.config.Configuration
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.PARAMETER, ElementType.FIELD})
-@PluginVisitorStrategy("org.apache.logging.log4j.core.config.plugins.visitors.PluginConfigurationVisitor")
+@PluginVisitorStrategy(PluginConfigurationVisitor.class)
 public @interface PluginConfiguration {
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/PluginElement.java
Patch:
@@ -22,13 +22,15 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.apache.logging.log4j.core.config.plugins.visitors.PluginElementVisitor;
+
 /**
  * Identifies a parameter as a Plugin and corresponds with an XML element (or equivalent) in configuration files.
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.PARAMETER, ElementType.FIELD})
-@PluginVisitorStrategy("org.apache.logging.log4j.core.config.plugins.visitors.PluginElementVisitor")
+@PluginVisitorStrategy(PluginElementVisitor.class)
 public @interface PluginElement {
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/PluginNode.java
Patch:
@@ -22,12 +22,14 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.apache.logging.log4j.core.config.plugins.visitors.PluginNodeVisitor;
+
 /**
  * Identifies a Plugin configuration Node.
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.PARAMETER, ElementType.FIELD})
-@PluginVisitorStrategy("org.apache.logging.log4j.core.config.plugins.visitors.PluginNodeVisitor")
+@PluginVisitorStrategy(PluginNodeVisitor.class)
 public @interface PluginNode {
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/PluginValue.java
Patch:
@@ -22,6 +22,8 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.apache.logging.log4j.core.config.plugins.visitors.PluginValueVisitor;
+
 /**
  * Identifies a parameter as a value. These correspond with property values generally, but are meant as values to be
  * used as a placeholder value somewhere.
@@ -31,7 +33,7 @@
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.PARAMETER)
-@PluginVisitorStrategy("org.apache.logging.log4j.core.config.plugins.visitors.PluginValueVisitor")
+@PluginVisitorStrategy(PluginValueVisitor.class)
 public @interface PluginValue {
 
     String value();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/SensitivePluginAttribute.java
Patch:
@@ -23,6 +23,8 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.apache.logging.log4j.core.config.plugins.visitors.SensitivePluginAttributeVisitor;
+
 // TODO: add this to @PluginAttribute instead? or make this an additional annotation instead of a replacement
 /**
  * Identifies a sensitive PluginAttribute. This means that the value should NOT be displayed in log messages anywhere
@@ -34,7 +36,7 @@
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.PARAMETER)
-@PluginVisitorStrategy("org.apache.logging.log4j.core.config.plugins.visitors.SensitivePluginAttributeVisitor")
+@PluginVisitorStrategy(SensitivePluginAttributeVisitor.class)
 public @interface SensitivePluginAttribute {
     String value();
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java
Patch:
@@ -84,8 +84,8 @@ public static ConsoleAppender createAppender(
             @PluginElement("Filters") final Filter filter,
             @PluginAttribute(value = "target", defaultStringValue = "SYSTEM_OUT") final String targetStr,
             @PluginAttribute("name") final String name,
-            @PluginAttribute(value = "follow", defaultStringValue = "false") final String follow,
-            @PluginAttribute(value = "ignoreExceptions", defaultStringValue = "true") final String ignore) {
+            @PluginAttribute(value = "follow", defaultBooleanValue = false) final String follow,
+            @PluginAttribute(value = "ignoreExceptions", defaultBooleanValue = true) final String ignore) {
         if (name == null) {
             LOGGER.error("No name provided for ConsoleAppender");
             return null;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java
Patch:
@@ -322,7 +322,7 @@ public byte[] getFooter() {
      */
     @PluginFactory
     public static HtmlLayout createLayout(
-            @PluginAttribute(value = "locationInfo", defaultStringValue = "false") final boolean locationInfo,
+            @PluginAttribute(value = "locationInfo", defaultBooleanValue = false) final boolean locationInfo,
             @PluginAttribute(value = "title", defaultStringValue = DEFAULT_TITLE) final String title,
             @PluginAttribute(value = "contentType", defaultStringValue = DEFAULT_CONTENT_TYPE) String contentType,
             @PluginAttribute(value = "charset", defaultStringValue = "UTF-8") final Charset charset,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/LoggerFields.java
Patch:
@@ -73,7 +73,7 @@ public static LoggerFields createLoggerFields(
         @PluginElement("LoggerFields") final KeyValuePair[] keyValuePairs,
         @PluginAttribute("sdId") final String sdId,
         @PluginAttribute("enterpriseId") final String enterpriseId,
-        @PluginAttribute(value = "discardIfAllFieldsAreEmpty", defaultStringValue = "false") final boolean discardIfAllFieldsAreEmpty) {
+        @PluginAttribute(value = "discardIfAllFieldsAreEmpty", defaultBooleanValue = false) final boolean discardIfAllFieldsAreEmpty) {
         final Map<String, String> map = new HashMap<String, String>();
 
         for (final KeyValuePair keyValuePair : keyValuePairs) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java
Patch:
@@ -271,8 +271,8 @@ public static PatternLayout createLayout(
             @PluginConfiguration final Configuration config,
             @PluginElement("Replace") final RegexReplacement replace,
             @PluginAttribute(value = "charset", defaultStringValue = "UTF-8") final Charset charset,
-            @PluginAttribute(value = "alwaysWriteExceptions", defaultStringValue = "true") final boolean alwaysWriteExceptions,
-            @PluginAttribute(value = "noConsoleNoAnsi", defaultStringValue = "false") final boolean noConsoleNoAnsi,
+            @PluginAttribute(value = "alwaysWriteExceptions", defaultBooleanValue = true) final boolean alwaysWriteExceptions,
+            @PluginAttribute(value = "noConsoleNoAnsi", defaultBooleanValue = false) final boolean noConsoleNoAnsi,
             @PluginAttribute("header") final String header,
             @PluginAttribute("footer") final String footer) {
         return new PatternLayout(config, replace, pattern == null ? DEFAULT_CONVERSION_PATTERN : pattern, charset,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/SyslogLayout.java
Patch:
@@ -135,7 +135,7 @@ public Map<String, String> getContentFormat()
     @PluginFactory
     public static SyslogLayout createLayout(
             @PluginAttribute(value = "facility", defaultStringValue = "LOCAL0") final Facility facility,
-            @PluginAttribute(value = "newLine", defaultStringValue = "false") final boolean includeNewLine,
+            @PluginAttribute(value = "newLine", defaultBooleanValue = false) final boolean includeNewLine,
             @PluginAttribute("newLineEscape") final String escapeNL,
             @PluginAttribute(value = "charset", defaultStringValue = "UTF-8") final Charset charset) {
         return new SyslogLayout(facility, includeNewLine, escapeNL, charset);

File: log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java
Patch:
@@ -220,7 +220,7 @@ public static FlumeAppender createAppender(@PluginElement("Agents") Agent[] agen
         final int delay = Integers.parseInt(maxDelay, DEFAULT_MAX_DELAY);
 
         if (layout == null) {
-            final int enterpriseNumber = Integer.parseInt(Rfc5424Layout.DEFAULT_ENTERPRISE_NUMBER);
+            final int enterpriseNumber = Rfc5424Layout.DEFAULT_ENTERPRISE_NUMBER;
             layout = Rfc5424Layout.createLayout(Facility.LOCAL0, null, enterpriseNumber, true, Rfc5424Layout.DEFAULT_MDCID,
                     mdcPrefix, eventPrefix, false, null, null, null, excludes, includes, required, null, false, null,
                     null);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/plugins/util/TypeConvertersTest.java
Patch:
@@ -56,7 +56,7 @@ public static Collection<Object[]> data() {
                 { null, false, "false", boolean.class },
                 { "invalid", false, "false", boolean.class },
                 // integers
-                { "+42", 42, null, Integer.class },
+                { "42", 42, null, Integer.class },
                 { "53", 53, null, Integer.class },
                 { "-16", -16, null, Integer.class },
                 { "0", 0, null, Integer.class },
@@ -73,7 +73,7 @@ public static Collection<Object[]> data() {
                 { "55", 55L, null, Long.class },
                 { "1234567890123456789", 1234567890123456789L, null, Long.class },
                 { "123123123L", null, null, Long.class },
-                { "+123123123123", 123123123123L, null, Long.class },
+                { "123123123123", 123123123123L, null, Long.class },
                 { "-987654321", -987654321L, null, Long.class },
                 { "-45l", null, null, Long.class },
                 { "0", 0L, null, Long.class },

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java
Patch:
@@ -82,10 +82,10 @@ private ConsoleAppender(final String name, final Layout<? extends Serializable>
     public static ConsoleAppender createAppender(
             @PluginElement("Layout") Layout<? extends Serializable> layout,
             @PluginElement("Filters") final Filter filter,
-            @PluginAttribute(value = "target", defaultValue = "SYSTEM_OUT") final String targetStr,
+            @PluginAttribute(value = "target", defaultStringValue = "SYSTEM_OUT") final String targetStr,
             @PluginAttribute("name") final String name,
-            @PluginAttribute(value = "follow", defaultValue = "false") final String follow,
-            @PluginAttribute(value = "ignoreExceptions", defaultValue = "true") final String ignore) {
+            @PluginAttribute(value = "follow", defaultStringValue = "false") final String follow,
+            @PluginAttribute(value = "ignoreExceptions", defaultStringValue = "true") final String ignore) {
         if (name == null) {
             LOGGER.error("No name provided for ConsoleAppender");
             return null;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/visitors/PluginAttributeVisitor.java
Patch:
@@ -38,7 +38,7 @@ public Object visit(final Configuration configuration, final Node node, final Lo
         final Map<String, String> attributes = node.getAttributes();
         final String rawValue = removeAttributeValue(attributes, name, this.aliases);
         final String replacedValue = this.substitutor.replace(event, rawValue);
-        final String rawDefaultValue = this.annotation.defaultValue();
+        final String rawDefaultValue = this.annotation.defaultStringValue();
         final String replacedDefaultValue = this.substitutor.replace(event, rawDefaultValue);
         final Object value = convert(replacedValue, replacedDefaultValue);
         LOGGER.debug("Attribute({}=\"{}\"", name, value);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/LoggerFields.java
Patch:
@@ -73,7 +73,7 @@ public static LoggerFields createLoggerFields(
         @PluginElement("LoggerFields") final KeyValuePair[] keyValuePairs,
         @PluginAttribute("sdId") final String sdId,
         @PluginAttribute("enterpriseId") final String enterpriseId,
-        @PluginAttribute(value = "discardIfAllFieldsAreEmpty", defaultValue = "false") final boolean discardIfAllFieldsAreEmpty) {
+        @PluginAttribute(value = "discardIfAllFieldsAreEmpty", defaultStringValue = "false") final boolean discardIfAllFieldsAreEmpty) {
         final Map<String, String> map = new HashMap<String, String>();
 
         for (final KeyValuePair keyValuePair : keyValuePairs) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java
Patch:
@@ -270,9 +270,9 @@ public static PatternLayout createLayout(
             @PluginAttribute("pattern") final String pattern,
             @PluginConfiguration final Configuration config,
             @PluginElement("Replace") final RegexReplacement replace,
-            @PluginAttribute(value = "charset", defaultValue = "UTF-8") final Charset charset,
-            @PluginAttribute(value = "alwaysWriteExceptions", defaultValue = "true") final boolean alwaysWriteExceptions,
-            @PluginAttribute(value = "noConsoleNoAnsi", defaultValue = "false") final boolean noConsoleNoAnsi,
+            @PluginAttribute(value = "charset", defaultStringValue = "UTF-8") final Charset charset,
+            @PluginAttribute(value = "alwaysWriteExceptions", defaultStringValue = "true") final boolean alwaysWriteExceptions,
+            @PluginAttribute(value = "noConsoleNoAnsi", defaultStringValue = "false") final boolean noConsoleNoAnsi,
             @PluginAttribute("header") final String header,
             @PluginAttribute("footer") final String footer) {
         return new PatternLayout(config, replace, pattern == null ? DEFAULT_CONVERSION_PATTERN : pattern, charset,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/SyslogLayout.java
Patch:
@@ -134,10 +134,10 @@ public Map<String, String> getContentFormat()
      */
     @PluginFactory
     public static SyslogLayout createLayout(
-            @PluginAttribute(value = "facility", defaultValue = "LOCAL0") final Facility facility,
-            @PluginAttribute(value = "newLine", defaultValue = "false") final boolean includeNewLine,
+            @PluginAttribute(value = "facility", defaultStringValue = "LOCAL0") final Facility facility,
+            @PluginAttribute(value = "newLine", defaultStringValue = "false") final boolean includeNewLine,
             @PluginAttribute("newLineEscape") final String escapeNL,
-            @PluginAttribute(value = "charset", defaultValue = "UTF-8") final Charset charset) {
+            @PluginAttribute(value = "charset", defaultStringValue = "UTF-8") final Charset charset) {
         return new SyslogLayout(facility, includeNewLine, escapeNL, charset);
     }
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/visitors/PluginAttributeVisitor.java
Patch:
@@ -40,6 +40,8 @@ public Object visit(final Configuration configuration, final Node node, final Lo
         final String replacedValue = this.substitutor.replace(event, rawValue);
         final String rawDefaultValue = this.annotation.defaultValue();
         final String replacedDefaultValue = this.substitutor.replace(event, rawDefaultValue);
-        return convert(replacedValue, replacedDefaultValue);
+        final Object value = convert(replacedValue, replacedDefaultValue);
+        LOGGER.debug("Attribute({}=\"{}\"", name, value);
+        return value;
     }
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/SensitivePluginAttribute.java
Patch:
@@ -36,4 +36,6 @@
 @Target(ElementType.PARAMETER)
 public @interface SensitivePluginAttribute {
     String value();
+
+    String defaultValue() default "";
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java
Patch:
@@ -82,10 +82,10 @@ private ConsoleAppender(final String name, final Layout<? extends Serializable>
     public static ConsoleAppender createAppender(
             @PluginElement("Layout") Layout<? extends Serializable> layout,
             @PluginElement("Filters") final Filter filter,
-            @PluginAttribute("target") final String targetStr,
+            @PluginAttribute(value = "target", defaultValue = "SYSTEM_OUT") final String targetStr,
             @PluginAttribute("name") final String name,
-            @PluginAttribute("follow") final String follow,
-            @PluginAttribute("ignoreExceptions") final String ignore) {
+            @PluginAttribute(value = "follow", defaultValue = "false") final String follow,
+            @PluginAttribute(value = "ignoreExceptions", defaultValue = "true") final String ignore) {
         if (name == null) {
             LOGGER.error("No name provided for ConsoleAppender");
             return null;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/LoggerFields.java
Patch:
@@ -22,7 +22,6 @@
 
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
-import org.apache.logging.log4j.core.config.plugins.PluginDefault;
 import org.apache.logging.log4j.core.config.plugins.PluginElement;
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
 import org.apache.logging.log4j.core.util.KeyValuePair;
@@ -58,7 +57,7 @@ public String toString() {
 
     /**
      * Create a LoggerFields from KeyValuePairs.
-     * 
+     *
      * @param keyValuePairs
      *            An array of KeyValuePairs.
      * @param sdId
@@ -74,7 +73,7 @@ public static LoggerFields createLoggerFields(
         @PluginElement("LoggerFields") final KeyValuePair[] keyValuePairs,
         @PluginAttribute("sdId") final String sdId,
         @PluginAttribute("enterpriseId") final String enterpriseId,
-        @PluginAttribute("discardIfAllFieldsAreEmpty") @PluginDefault("false") final boolean discardIfAllFieldsAreEmpty) {
+        @PluginAttribute(value = "discardIfAllFieldsAreEmpty", defaultValue = "false") final boolean discardIfAllFieldsAreEmpty) {
         final Map<String, String> map = new HashMap<String, String>();
 
         for (final KeyValuePair keyValuePair : keyValuePairs) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginBuilder.java
Patch:
@@ -193,7 +193,7 @@ private Object[] generateParameters() {
                     final String name = ((PluginValue) a).value();
                     final String v = node.getValue() != null ? node.getValue() : getAttrValue("value");
                     final String value = configuration.getStrSubstitutor().replace(event, v);
-                    args[i] = TypeConverters.convert(value, types[i], defaultValue);
+                    args[i] = value;
                     sb.append(name).append("=\"").append(value).append('"');
                 } else if (a instanceof PluginAttribute) {
                     final PluginAttribute attribute = (PluginAttribute) a;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/TypeConverters.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.Filter;
+import org.apache.logging.log4j.core.layout.HtmlLayout;
 import org.apache.logging.log4j.core.net.Facility;
 import org.apache.logging.log4j.core.net.Protocol;
 import org.apache.logging.log4j.core.util.Assert;
@@ -67,6 +68,7 @@ private TypeConverters() {
         registry.put(Filter.Result.class, new EnumConverter<Filter.Result>(Filter.Result.class));
         registry.put(Facility.class, new EnumConverter<Facility>(Facility.class));
         registry.put(Protocol.class, new EnumConverter<Protocol>(Protocol.class));
+        registry.put(HtmlLayout.FontSize.class, new EnumConverter<HtmlLayout.FontSize>(HtmlLayout.FontSize.class));
     }
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java
Patch:
@@ -69,7 +69,7 @@ public final class HtmlLayout extends AbstractStringLayout {
     private final String contentType;
 
     /**Possible font sizes */
-    private enum FontSize {
+    public static enum FontSize {
         SMALLER("smaller"), XXSMALL("xx-small"), XSMALL("x-small"), SMALL("small"), MEDIUM("medium"), LARGE("large"),
         XLARGE("x-large"), XXLARGE("xx-large"),  LARGER("larger");
 

File: log4j-1.2-api/src/test/java/org/apache/log4j/CategoryTest.java
Patch:
@@ -161,7 +161,7 @@ public void testSetPriority() {
     @Test
     public void testClassName() {
         final Category category = Category.getInstance("TestCategory");
-        final Layout<String> layout = PatternLayout.createCustomLayout("%d %p %C{1.} [%t] %m%n");
+        final Layout<String> layout = PatternLayout.custom().withPattern("%d %p %C{1.} [%t] %m%n").build();
         final ListAppender appender = new ListAppender("List2", null, layout, false, false);
         appender.start();
         category.setAdditivity(false);

File: log4j-1.2-api/src/test/java/org/apache/log4j/LoggerTest.java
Patch:
@@ -456,7 +456,7 @@ public void testIsTraceEnabled() {
     @Test
     @SuppressWarnings("deprecation")
     public void testLog() {
-        final PatternLayout layout = PatternLayout.createCustomLayout("%d %C %L %m");
+        final PatternLayout layout = PatternLayout.custom().withPattern("%d %C %L %m").build();
         final ListAppender appender = new ListAppender("List", null, layout, false, false);
         appender.start();
         final Logger root = Logger.getRootLogger();

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderTest.java
Patch:
@@ -66,7 +66,7 @@ public void testAppender() throws Exception {
 
     @Test
     public void testSmallestBufferSize() throws Exception {
-        final Layout<String> layout = PatternLayout.createCustomLayout(PatternLayout.SIMPLE_CONVERSION_PATTERN);
+        final Layout<String> layout = PatternLayout.custom().withPattern(PatternLayout.SIMPLE_CONVERSION_PATTERN).build();
         final String bufferSizeStr = "1";
         final FileAppender appender = FileAppender.createAppender(FILENAME, "true", "false", "test", "false", "false",
                 "false", bufferSizeStr, layout, null, "false", null, null);
@@ -160,7 +160,7 @@ public void testMultipleVMs() throws Exception {
     }
 
     private static void writer(final boolean lock, final int count, final String name) throws Exception {
-        final Layout<String> layout = PatternLayout.createCustomLayout(PatternLayout.SIMPLE_CONVERSION_PATTERN);
+        final Layout<String> layout = PatternLayout.custom().withPattern(PatternLayout.SIMPLE_CONVERSION_PATTERN).build();
         final FileAppender app = FileAppender.createAppender(FILENAME, "true", Boolean.toString(lock), "test", "false",
                 "false", "false", null, layout, null, "false", null, null);
         app.start();

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/jms/JmsQueueTest.java
Patch:
@@ -100,7 +100,7 @@ public void testServer() throws Exception {
         final CompositeFilter serverFilters = CompositeFilter.createFilters(new Filter[]{serverFilter});
         final ListAppender listApp = new ListAppender("Events", serverFilters, null, false, false);
         listApp.start();
-        final PatternLayout layout = PatternLayout.createCustomLayout("%m %ex%n");
+        final PatternLayout layout = PatternLayout.custom().withPattern("%m %ex%n").build();
         final ConsoleAppender console = ConsoleAppender.createAppender(layout, null, "SYSTEM_OUT", "Console", "false", "true");
         console.start();
         final Logger serverLogger = ctx.getLogger(JmsTopicReceiver.class.getName());

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/jms/JmsTopicTest.java
Patch:
@@ -100,7 +100,7 @@ public void testServer() throws Exception {
         final CompositeFilter serverFilters = CompositeFilter.createFilters(new Filter[]{serverFilter});
         final ListAppender listApp = new ListAppender("Events", serverFilters, null, false, false);
         listApp.start();
-        final PatternLayout layout = PatternLayout.createCustomLayout("%m %ex%n");
+        final PatternLayout layout = PatternLayout.custom().withPattern("%m %ex%n").build();
         final ConsoleAppender console =
                 ConsoleAppender.createAppender(layout, null, "SYSTEM_OUT", "Console", "false", "true");
         console.start();

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/AbstractSocketServerTest.java
Patch:
@@ -173,7 +173,7 @@ protected void testServer(final String... messages) throws Exception {
         socketAppender.start();
         final ListAppender listAppender = new ListAppender("Events", serverFilter, null, false, false);
         listAppender.start();
-        final PatternLayout layout = PatternLayout.createCustomLayout("%m %ex%n");
+        final PatternLayout layout = PatternLayout.custom().withPattern("%m %ex%n").build();
         final ConsoleAppender console = ConsoleAppender.createAppender(layout, null, "SYSTEM_OUT", "Console", "false",
                 "true");
         final Logger serverLogger = ctx.getLogger(this.getClass().getName());

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/RegexReplacement.java
Patch:
@@ -69,7 +69,7 @@ public String toString() {
      */
     @PluginFactory
     public static RegexReplacement createRegexReplacement(
-            @PluginAttribute("regex") final String regex,
+            @PluginAttribute("regex") final Pattern regex,
             @PluginAttribute("replacement") final String replacement) {
         if (regex == null) {
             LOGGER.error("A regular expression is required for replacement");
@@ -78,8 +78,8 @@ public static RegexReplacement createRegexReplacement(
         if (replacement == null) {
             LOGGER.error("A replacement string is required to perform replacement");
         }
-        final Pattern p = Pattern.compile(regex);
-        return new RegexReplacement(p, replacement);
+        // FIXME: should we use Matcher.quoteReplacement() here?
+        return new RegexReplacement(regex, replacement);
     }
 
 }

File: log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/SimpleBenchmark.java
Patch:
@@ -39,7 +39,6 @@
  */
 // ============================== HOW TO RUN THIS TEST: ====================================
 //
-// In sampling mode (latency test):
 // java -jar log4j-perf/target/microbenchmarks.jar ".*SimpleBenchmark.*" -f 1 -wi 5 -i 5
 //
 // Usage help:

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/PluginDefault.java
Patch:
@@ -23,6 +23,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+// TODO: replace this with the additional attribute in @PluginAttribute
 /**
  * Identifies a default string value for a given plugin attribute or value. This value should be used as a fallback
  * where either the given value is invalid, or when there is no given value.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/PluginNode.java
Patch:
@@ -27,6 +27,6 @@
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.PARAMETER)
+@Target({ElementType.PARAMETER, ElementType.FIELD})
 public @interface PluginNode {
 }

File: log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.logging.log4j.core.config.plugins.PluginElement;
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
 import org.apache.logging.log4j.core.layout.Rfc5424Layout;
+import org.apache.logging.log4j.core.net.Facility;
 import org.apache.logging.log4j.core.util.Booleans;
 import org.apache.logging.log4j.core.util.Integers;
 
@@ -220,7 +221,7 @@ public static FlumeAppender createAppender(@PluginElement("Agents") Agent[] agen
 
         if (layout == null) {
             final int enterpriseNumber = Integer.parseInt(Rfc5424Layout.DEFAULT_ENTERPRISE_NUMBER);
-            layout = Rfc5424Layout.createLayout(null, null, enterpriseNumber, true, Rfc5424Layout.DEFAULT_MDCID,
+            layout = Rfc5424Layout.createLayout(Facility.LOCAL0, null, enterpriseNumber, true, Rfc5424Layout.DEFAULT_MDCID,
                     mdcPrefix, eventPrefix, false, null, null, null, excludes, includes, required, null, false, null,
                     null);
         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java
Patch:
@@ -82,7 +82,7 @@ public final class Rfc5424Layout extends AbstractStringLayout {
      */
     public static final Pattern PARAM_VALUE_ESCAPE_PATTERN = Pattern.compile("[\\\"\\]\\\\]");
 
-    protected static final String DEFAULT_MDCID = "mdc";
+    public static final String DEFAULT_MDCID = "mdc";
     private static final int TWO_DIGITS = 10;
     private static final int THREE_DIGITS = 100;
     private static final int MILLIS_PER_MINUTE = 60000;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/TypeConverters.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.net.Facility;
+import org.apache.logging.log4j.core.net.Protocol;
 import org.apache.logging.log4j.core.util.Assert;
 import org.apache.logging.log4j.status.StatusLogger;
 import org.apache.logging.log4j.util.EnglishEnums;
@@ -65,6 +66,7 @@ private TypeConverters() {
         registry.put(Level.class, new LevelConverter());
         registry.put(Filter.Result.class, new EnumConverter<Filter.Result>(Filter.Result.class));
         registry.put(Facility.class, new EnumConverter<Facility>(Facility.class));
+        registry.put(Protocol.class, new EnumConverter<Protocol>(Protocol.class));
     }
 
     /**

File: log4j-core/src/test/java/org/apache/logging/log4j/core/layout/SyslogLayoutTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.logging.log4j.core.Logger;
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.config.ConfigurationFactory;
+import org.apache.logging.log4j.core.net.Facility;
 import org.apache.logging.log4j.message.StructuredDataMessage;
 import org.apache.logging.log4j.test.appender.ListAppender;
 import org.junit.AfterClass;
@@ -78,7 +79,7 @@ public void testLayout() throws Exception {
             root.removeAppender(appender);
         }
         // set up appender
-        final SyslogLayout layout = SyslogLayout.createLayout("Local0", "true", null, null);
+        final SyslogLayout layout = SyslogLayout.createLayout(Facility.LOCAL0, true, null, null);
         //ConsoleAppender appender = new ConsoleAppender("Console", layout);
         final ListAppender appender = new ListAppender("List", null, layout, true, false);
         appender.start();

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/AbstractSocketServerTest.java
Patch:
@@ -99,7 +99,7 @@ protected Layout<? extends Serializable> createSerializedLayout() {
     }
 
     protected Layout<String> createXmlLayout() {
-        return XmlLayout.createLayout("true", "true", "false", null, null);
+        return XmlLayout.createLayout(true, true, false, false, null);
     }
 
     @After

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/SmtpAppender.java
Patch:
@@ -132,7 +132,7 @@ public static SmtpAppender createAppender(
         final int bufferSize = bufferSizeStr == null ? DEFAULT_BUFFER_SIZE : Integer.parseInt(bufferSizeStr);
 
         if (layout == null) {
-            layout = HtmlLayout.createLayout(null, null, null, null, null, null);
+            layout = HtmlLayout.createDefaultLayout();
         }
         if (filter == null) {
             filter = ThresholdFilter.createFilter(null, null, null);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/AbstractSocketServerTest.java
Patch:
@@ -89,7 +89,7 @@ protected AbstractSocketServerTest(final String protocol, final String port, fin
     }
 
     protected Layout<String> createJsonLayout() {
-        return JsonLayout.createLayout("true", "true", "false", "false", null);
+        return JsonLayout.createLayout(true, true, false, false, null);
     }
 
     protected abstract Layout<? extends Serializable> createLayout();
@@ -173,7 +173,7 @@ protected void testServer(final String... messages) throws Exception {
         socketAppender.start();
         final ListAppender listAppender = new ListAppender("Events", serverFilter, null, false, false);
         listAppender.start();
-        final PatternLayout layout = PatternLayout.createLayout("%m %ex%n", null, null, null, null, null, null, null);
+        final PatternLayout layout = PatternLayout.createCustomLayout("%m %ex%n");
         final ConsoleAppender console = ConsoleAppender.createAppender(layout, null, "SYSTEM_OUT", "Console", "false",
                 "true");
         final Logger serverLogger = ctx.getLogger(this.getClass().getName());

File: log4j-1.2-api/src/test/java/org/apache/log4j/CategoryTest.java
Patch:
@@ -161,8 +161,7 @@ public void testSetPriority() {
     @Test
     public void testClassName() {
         final Category category = Category.getInstance("TestCategory");
-        final Layout<String> layout = PatternLayout.createLayout("%d %p %C{1.} [%t] %m%n", null, null, null, null, null,
-            null, null);
+        final Layout<String> layout = PatternLayout.createCustomLayout("%d %p %C{1.} [%t] %m%n");
         final ListAppender appender = new ListAppender("List2", null, layout, false, false);
         appender.start();
         category.setAdditivity(false);

File: log4j-1.2-api/src/test/java/org/apache/log4j/LoggerTest.java
Patch:
@@ -456,7 +456,7 @@ public void testIsTraceEnabled() {
     @Test
     @SuppressWarnings("deprecation")
     public void testLog() {
-        final PatternLayout layout = PatternLayout.createLayout("%d %C %L %m", null, null, null, null, null, null, null);
+        final PatternLayout layout = PatternLayout.createCustomLayout("%d %C %L %m");
         final ListAppender appender = new ListAppender("List", null, layout, false, false);
         appender.start();
         final Logger root = Logger.getRootLogger();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java
Patch:
@@ -91,7 +91,7 @@ public static ConsoleAppender createAppender(
             return null;
         }
         if (layout == null) {
-            layout = PatternLayout.createLayout(null, null, null, null, null, null, null, null);
+            layout = PatternLayout.createDefaultLayout();
         }
         final boolean isFollow = Boolean.parseBoolean(follow);
         final boolean ignoreExceptions = Booleans.parseBoolean(ignore, true);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileAppender.java
Patch:
@@ -140,7 +140,7 @@ public static FileAppender createAppender(
             return null;
         }
         if (layout == null) {
-            layout = PatternLayout.createLayout(null, null, null, null, null, null, null, null);
+            layout = PatternLayout.createDefaultLayout();
         }
 
         final FileManager manager = FileManager.getFileManager(fileName, isAppend, isLocking, isBuffered, advertiseUri,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RandomAccessFileAppender.java
Patch:
@@ -158,7 +158,7 @@ public static RandomAccessFileAppender createAppender(
             return null;
         }
         if (layout == null) {
-            layout = PatternLayout.createLayout(null, null, null, null, null, null, null, null);
+            layout = PatternLayout.createDefaultLayout();
         }
         final RandomAccessFileManager manager = RandomAccessFileManager.getFileManager(
                 fileName, isAppend, isFlush, bufferSize, advertiseURI, layout

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingFileAppender.java
Patch:
@@ -169,7 +169,7 @@ public static RollingFileAppender createAppender(
         }
 
         if (layout == null) {
-            layout = PatternLayout.createLayout(null, null, null, null, null, null, null, null);
+            layout = PatternLayout.createDefaultLayout();
         }
 
         final RollingFileManager manager = RollingFileManager.getFileManager(fileName, filePattern, isAppend,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppender.java
Patch:
@@ -198,7 +198,7 @@ public static RollingRandomAccessFileAppender createAppender(
         }
 
         if (layout == null) {
-            layout = PatternLayout.createLayout(null, null, null, null, null, null, null, null);
+            layout = PatternLayout.createDefaultLayout();
         }
 
         final RollingRandomAccessFileManager manager = RollingRandomAccessFileManager.getRollingRandomAccessFileManager(

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/ColumnConfig.java
Patch:
@@ -130,7 +130,7 @@ public static ColumnConfig createColumnConfig(
         }
         if (isPattern) {
             return new ColumnConfig(
-                    name, PatternLayout.createLayout(pattern, config, null, null, "false", null, null, null), null,
+                    name, PatternLayout.createLayout(pattern, config, null, null, false, false, null, null), null,
                     false, isUnicode, isClob
             );
         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java
Patch:
@@ -378,8 +378,7 @@ protected void doConfigure() {
     private void setToDefault() {
         setName(DefaultConfiguration.DEFAULT_NAME);
         final Layout<? extends Serializable> layout =
-                PatternLayout.createLayout("%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n",
-                        null, null, null, null, null, null, null);
+                PatternLayout.createCustomLayout("%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n");
         final Appender appender = ConsoleAppender.createAppender(layout, null, "SYSTEM_OUT", "Console", "false",
             "true");
         appender.start();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultConfiguration.java
Patch:
@@ -53,8 +53,7 @@ public DefaultConfiguration() {
 
         setName(DEFAULT_NAME);
         final Layout<? extends Serializable> layout =
-                PatternLayout.createLayout(DEFAULT_PATTERN, null, null, null,
-                    null, null, null, null);
+                PatternLayout.createCustomLayout(DEFAULT_PATTERN);
         final Appender appender =
                 ConsoleAppender.createAppender(layout, null, "SYSTEM_OUT", "Console", "false", "true");
         appender.start();

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/ConsoleAppenderTest.java
Patch:
@@ -52,7 +52,7 @@ public static void after() {
     @Test
     public void testFollow() {
         final PrintStream ps = System.out;
-        final Layout<String> layout = PatternLayout.createLayout(null, null, null, null, null, null, null, null);
+        final Layout<String> layout = PatternLayout.createDefaultLayout();
         final ConsoleAppender app = ConsoleAppender.createAppender(layout, null, "SYSTEM_OUT", "Console", "true", "false");
         app.start();
         final LogEvent event = new Log4jLogEvent("TestLogger", null, ConsoleAppenderTest.class.getName(), Level.INFO,

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/OutputStreamAppenderTest.java
Patch:
@@ -35,7 +35,7 @@ public class OutputStreamAppenderTest {
 
     @Test
     public void testAppender() {
-        final Layout<String> layout = PatternLayout.createLayout(null, null, null, null, null, null, null, null);
+        final Layout<String> layout = PatternLayout.createDefaultLayout();
         final InMemoryAppender app = new InMemoryAppender("test", layout, null, false);
         final LogEvent event = new Log4jLogEvent("TestLogger", null, OutputStreamAppenderTest.class.getName(), Level.INFO,
             new SimpleMessage("Test"), null);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/CustomConfigurationTest.java
Patch:
@@ -72,8 +72,8 @@ public void testConfig() {
                 break;
             }
         }
-        Layout<? extends Serializable> layout = PatternLayout.createLayout(PatternLayout.SIMPLE_CONVERSION_PATTERN, config, null,
-            null,null, null, null, null);
+        final Layout<? extends Serializable> layout =
+            PatternLayout.createCustomLayout(PatternLayout.SIMPLE_CONVERSION_PATTERN, config);
         Appender appender = FileAppender.createAppender(LOG_FILE, "false", "false", "File", "true",
             "false", "false", "4000", layout, null, "false", null, config);
         appender.start();

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/jms/JmsQueueTest.java
Patch:
@@ -100,7 +100,7 @@ public void testServer() throws Exception {
         final CompositeFilter serverFilters = CompositeFilter.createFilters(new Filter[]{serverFilter});
         final ListAppender listApp = new ListAppender("Events", serverFilters, null, false, false);
         listApp.start();
-        final PatternLayout layout = PatternLayout.createLayout("%m %ex%n", null, null, null, null, null, null, null);
+        final PatternLayout layout = PatternLayout.createCustomLayout("%m %ex%n");
         final ConsoleAppender console = ConsoleAppender.createAppender(layout, null, "SYSTEM_OUT", "Console", "false", "true");
         console.start();
         final Logger serverLogger = ctx.getLogger(JmsTopicReceiver.class.getName());

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/jms/JmsTopicTest.java
Patch:
@@ -100,7 +100,7 @@ public void testServer() throws Exception {
         final CompositeFilter serverFilters = CompositeFilter.createFilters(new Filter[]{serverFilter});
         final ListAppender listApp = new ListAppender("Events", serverFilters, null, false, false);
         listApp.start();
-        final PatternLayout layout = PatternLayout.createLayout("%m %ex%n", null, null, null, null, null, null, null);
+        final PatternLayout layout = PatternLayout.createCustomLayout("%m %ex%n");
         final ConsoleAppender console =
                 ConsoleAppender.createAppender(layout, null, "SYSTEM_OUT", "Console", "false", "true");
         console.start();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java
Patch:
@@ -19,6 +19,7 @@
 import java.nio.charset.Charset;
 
 import org.apache.logging.log4j.core.LogEvent;
+import org.apache.logging.log4j.core.util.Charsets;
 
 /**
  * Abstract base class for Layouts that result in a String.
@@ -31,7 +32,7 @@ public abstract class AbstractStringLayout extends AbstractLayout<String> {
     private final Charset charset;
 
     protected AbstractStringLayout(final Charset charset) {
-        this.charset = charset;
+        this.charset = charset == null ? Charsets.UTF_8 : charset;
     }
 
     /**

File: log4j-core/src/test/java/org/apache/logging/log4j/core/filter/RegexFilterTest.java
Patch:
@@ -52,7 +52,7 @@ public void testThresholds() {
         assertSame(Filter.Result.NEUTRAL, filter.filter(event));
         event = new Log4jLogEvent(null, null, null, Level.ERROR, new SimpleMessage("test"), null);
         assertSame(Filter.Result.DENY, filter.filter(event));
-        filter = RegexFilter.createFilter((Pattern) TypeConverters.convert("* test *", Pattern.class), false, null, null);
+        filter = RegexFilter.createFilter((Pattern) TypeConverters.convert("* test *", Pattern.class, null), false, null, null);
         assertNull(filter);
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java
Patch:
@@ -500,7 +500,7 @@ private static class LogEventProxy implements Serializable {
         private final String loggerName;
         private final Message message;
         private final long timeMillis;
-        private final Throwable thrown;
+        private final transient Throwable thrown;
         private final ThrowableProxy thrownProxy;
         private final Map<String, String> contextMap;
         private final ThreadContext.ContextStack contextStack;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java
Patch:
@@ -49,7 +49,7 @@ public class Log4jLogEvent implements LogEvent {
     private final String loggerName;
     private final Message message;
     private final long timeMillis;
-    private final Throwable thrown;
+    private transient final Throwable thrown;
     private ThrowableProxy thrownProxy;
     private final Map<String, String> contextMap;
     private final ThreadContext.ContextStack contextStack;
@@ -367,11 +367,13 @@ public void setEndOfBatch(final boolean endOfBatch) {
      * @return a LogEventProxy.
      */
     protected Object writeReplace() {
+        getThrownProxy(); // ensure ThrowableProxy is initialized
         return new LogEventProxy(this, this.includeLocation);
     }
 
     public static Serializable serialize(final Log4jLogEvent event,
             final boolean includeLocation) {
+        event.getThrownProxy(); // ensure ThrowableProxy is initialized
         return new LogEventProxy(event, includeLocation);
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/Initializers.java
Patch:
@@ -47,7 +47,7 @@ void setupModule(final SetupContext context) {
             context.setMixInAnnotations(Level.class, LevelMixIn.class);
             context.setMixInAnnotations(LogEvent.class, LogEventMixIn.class);
             // Log4j Core classes: we do not want to bring in Jackson at runtime if we do not have to.
-            context.setMixInAnnotations(ExtendedStackTraceElement.class, StackTracePackageElementMixIn.class);
+            context.setMixInAnnotations(ExtendedStackTraceElement.class, ExtendedStackTraceElementMixIn.class);
             context.setMixInAnnotations(ThrowableProxy.class, ThrowableProxyMixIn.class);            
         }
     }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/filter/ThresholdFilterTest.java
Patch:
@@ -32,7 +32,7 @@ public class ThresholdFilterTest {
 
     @Test
     public void testThresholds() {
-        final ThresholdFilter filter = ThresholdFilter.createFilter("ERROR", null, null);
+        final ThresholdFilter filter = ThresholdFilter.createFilter(Level.ERROR, null, null);
         filter.start();
         assertTrue(filter.isStarted());
         assertSame(Filter.Result.DENY, filter.filter(null, Level.DEBUG, null, null, (Throwable) null));

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/CustomConfigurationTest.java
Patch:
@@ -81,7 +81,7 @@ public void testConfig() {
         AppenderRef ref = AppenderRef.createAppenderRef("File", null, null);
         AppenderRef[] refs = new AppenderRef[] {ref};
 
-        LoggerConfig loggerConfig = LoggerConfig.createLogger("false", "info", "org.apache.logging.log4j",
+        LoggerConfig loggerConfig = LoggerConfig.createLogger("false", Level.INFO, "org.apache.logging.log4j",
             "true", refs, null, config, null );
         loggerConfig.addAppender(appender, null, null);
         config.addLogger("org.apache.logging.log4j", loggerConfig);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilterTest.java
Patch:
@@ -54,7 +54,7 @@ public void testFilter() {
         ThreadContext.put("organization", "apache");
         final KeyValuePair[] pairs = new KeyValuePair[] { new KeyValuePair("testuser", "DEBUG"),
                                                     new KeyValuePair("JohnDoe", "warn")};
-        final DynamicThresholdFilter filter = DynamicThresholdFilter.createFilter("userid", pairs, "ERROR", null, null);
+        final DynamicThresholdFilter filter = DynamicThresholdFilter.createFilter("userid", pairs, Level.ERROR, null, null);
         filter.start();
         assertTrue(filter.isStarted());
         assertSame(Filter.Result.NEUTRAL, filter.filter(null, Level.DEBUG, null, null, (Throwable) null));

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/Protocol.java
Patch:
@@ -22,6 +22,8 @@
 public enum Protocol {
     /** TCP Protocol. */
     TCP,
+    /** TLS Protocol. */
+    TLS,
     /** UDP Protocol. */
     UDP;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/server/AbstractSocketServer.java
Patch:
@@ -37,6 +37,8 @@
  * Abstract socket server for TCP and UDP implementations.
  * 
  * @param <T> The kind of input stream read
+ * 
+ * TODO Make a LifeCycle
  */
 public abstract class AbstractSocketServer<T extends InputStream> extends LogEventListener implements Runnable {
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/TlsSyslogAppenderTest.java
Patch:
@@ -33,7 +33,7 @@
 import org.apache.logging.log4j.core.net.ssl.TrustStoreConfiguration;
 import org.junit.Test;
 
-public class TlsSyslogAppenderTest extends SyslogAppenderTest{
+public class TlsSyslogAppenderTest extends SyslogAppenderTest {
 
     private SSLServerSocketFactory serverSocketFactory;
     private TlsSyslogMessageFormat messageFormat;

File: log4j-api/src/main/java/org/apache/logging/log4j/MarkerManager.java
Patch:
@@ -91,7 +91,7 @@ public static Marker getMarker(final String name, final Marker parent) {
      * </p>
      * <p>
      * <em>Internal note: We could make this class package private instead of public if the class 
-     * {@link org.apache.logging.log4j.core.jackson.MarkerMixIn} 
+     * {@code org.apache.logging.log4j.core.jackson.MarkerMixIn} 
      * is moved to this package and would of course stay in its current module.</em>
      * </p>
      */

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/ConnectionSource.java
Patch:
@@ -20,7 +20,7 @@
 import java.sql.SQLException;
 
 /**
- * Configuration element for {@link JDBCAppender}. If you want to use the {@link JDBCAppender} but none of the provided
+ * Configuration element for {@link JdbcAppender}. If you want to use the {@link JdbcAppender} but none of the provided
  * connection sources meet your needs, you can simply create your own connection source.
  */
 public interface ConnectionSource {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/DataSourceConnectionSource.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.logging.log4j.util.Strings;
 
 /**
- * A {@link JDBCAppender} connection source that uses a {@link DataSource} to connect to the database.
+ * A {@link JdbcAppender} connection source that uses a {@link DataSource} to connect to the database.
  */
 @Plugin(name = "DataSource", category = "Core", elementType = "connectionSource", printObject = true)
 public final class DataSourceConnectionSource implements ConnectionSource {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/FactoryMethodConnectionSource.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.logging.log4j.util.Strings;
 
 /**
- * A {@link JDBCAppender} connection source that uses a public static factory method to obtain a {@link Connection} or
+ * A {@link JdbcAppender} connection source that uses a public static factory method to obtain a {@link Connection} or
  * {@link DataSource}.
  */
 @Plugin(name = "ConnectionFactory", category = "Core", elementType = "connectionSource", printObject = true)

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/JsonConstants.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * Keeps constants separate from any class that may depend on third party jars.
  */
-public final class JSONConstants {
+public final class JsonConstants {
     public static final String ELT_CAUSE = "cause";
     public static final String ELT_CONTEXT_MAP = "contextMap";
     public static final String ELT_CONTEXT_STACK = "contextStack";
@@ -30,4 +30,4 @@ public final class JSONConstants {
     public static final String ELT_THROWN = "thrown";
     public static final String ELT_MESSAGE = "message";
     public static final String ELT_EXTENDED_STACK_TRACE = "extendedStackTrace";
-}
\ No newline at end of file
+}

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/MarkerMixIn.java
Patch:
@@ -72,9 +72,9 @@ abstract class MarkerMixIn implements Marker {
     public abstract Marker getParent();
 
     @Override
-    @JsonProperty(JSONConstants.ELT_PARENTS)
-    @JacksonXmlElementWrapper(namespace = XMLConstants.XML_NAMESPACE, localName = XMLConstants.ELT_PARENTS)
-    @JacksonXmlProperty(namespace = XMLConstants.XML_NAMESPACE, localName = XMLConstants.ELT_MARKER)
+    @JsonProperty(JsonConstants.ELT_PARENTS)
+    @JacksonXmlElementWrapper(namespace = XmlConstants.XML_NAMESPACE, localName = XmlConstants.ELT_PARENTS)
+    @JacksonXmlProperty(namespace = XmlConstants.XML_NAMESPACE, localName = XmlConstants.ELT_MARKER)
     public abstract Marker[] getParents();
 
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/XmlConstants.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * Keeps constants separate from any class that may depend on third party jars.
  */
-public final class XMLConstants {
+public final class XmlConstants {
     public static final String ELT_CAUSE = "Cause";
     public static final String ELT_CONTEXT_MAP = "ContextMap";
     public static final String ELT_CONTEXT_STACK = "ContextStack";
@@ -35,4 +35,4 @@ public final class XMLConstants {
     public static final String ELT_SUPPRESSED_ITEM = "SuppressedItem";
     public static final String ELT_THROWN = "Thrown";
     public static final String XML_NAMESPACE = "http://logging.apache.org/log4j/2.0/events";
-}
\ No newline at end of file
+}

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/XmlLayout.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
-import org.apache.logging.log4j.core.jackson.XMLConstants;
+import org.apache.logging.log4j.core.jackson.XmlConstants;
 import org.apache.logging.log4j.core.util.Charsets;
 
 /**
@@ -32,7 +32,7 @@
  * <h4>Complete well-formed XML vs. fragment XML</h4>
  * <p>
  * If you configure {@code complete="true"}, the appender outputs a well-formed XML document where the default namespace is the log4j
- * namespace {@value XMLConstants#XML_NAMESPACE}. By default, with {@code complete="false"}, you should include the output as an
+ * namespace {@value XmlConstants#XML_NAMESPACE}. By default, with {@code complete="false"}, you should include the output as an
  * <em>external entity</em> in a separate file to form a well-formed XML document.
  * </p>
  * <p>
@@ -215,7 +215,7 @@ public byte[] getHeader() {
         // Make the log4j namespace the default namespace, no need to use more space with a namespace prefix.
         buf.append('<');
         buf.append(ROOT_TAG);
-        buf.append(" xmlns=\"" + XMLConstants.XML_NAMESPACE + "\">");
+        buf.append(" xmlns=\"" + XmlConstants.XML_NAMESPACE + "\">");
         buf.append(this.eol);
         return buf.toString().getBytes(this.getCharset());
     }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/JsonCompleteFileAppenderTest.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * Tests a "complete" XML file a.k.a. a well-formed XML file.
  */
-public class JSONCompleteFileAppenderTest {
+public class JsonCompleteFileAppenderTest {
 
     private final File logFile = new File("target", "JsonCompleteFileAppenderTest.log");
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java
Patch:
@@ -83,8 +83,8 @@ public void tearDown() throws SQLException {
             final Map<String, Appender> list = context.getConfiguration().getAppenders();
             final Appender appender = list.get("databaseAppender");
             assertNotNull("The appender should not be null.", appender);
-            assertTrue("The appender should be a JDBCAppender.", appender instanceof JDBCAppender);
-            ((JDBCAppender) appender).getManager().release();
+            assertTrue("The appender should be a JdbcAppender.", appender instanceof JdbcAppender);
+            ((JdbcAppender) appender).getManager().release();
         } finally {
             System.clearProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY);
             context.reconfigure();

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java
Patch:
@@ -65,8 +65,8 @@ public void tearDown() throws SQLException {
             final Map<String, Appender> list = context.getConfiguration().getAppenders();
             final Appender appender = list.get("databaseAppender");
             assertNotNull("The appender should not be null.", appender);
-            assertTrue("The appender should be a JPAAppender.", appender instanceof JPAAppender);
-            ((JPAAppender) appender).getManager().release();
+            assertTrue("The appender should be a JpaAppender.", appender instanceof JpaAppender);
+            ((JpaAppender) appender).getManager().release();
         } finally {
             System.clearProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY);
             context.reconfigure();

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/SocketReconnectTest.java
Patch:
@@ -28,10 +28,12 @@
 import org.apache.logging.log4j.core.util.Constants;
 import org.apache.logging.log4j.junit.InitialLoggerContext;
 import org.junit.ClassRule;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import static org.junit.Assert.*;
 
+@Ignore("Currently needs better port choosing support")
 public class SocketReconnectTest {
     private static final int SOCKET_PORT = 5514;
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/SocketTest.java
Patch:
@@ -26,10 +26,12 @@
 import org.apache.logging.log4j.core.appender.AppenderLoggingException;
 import org.apache.logging.log4j.junit.InitialLoggerContext;
 import org.junit.ClassRule;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import static org.junit.Assert.*;
 
+@Ignore("Currently needs better port choosing support")
 public class SocketTest {
     private static final int SOCKET_PORT = 5514;
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/AbstractSocketServerTest.java
Patch:
@@ -34,7 +34,7 @@
 import org.apache.logging.log4j.core.appender.ConsoleAppender;
 import org.apache.logging.log4j.core.appender.SocketAppender;
 import org.apache.logging.log4j.core.filter.AbstractFilter;
-import org.apache.logging.log4j.core.layout.JSONLayout;
+import org.apache.logging.log4j.core.layout.JsonLayout;
 import org.apache.logging.log4j.core.layout.PatternLayout;
 import org.apache.logging.log4j.core.layout.XmlLayout;
 import org.apache.logging.log4j.test.appender.ListAppender;
@@ -88,7 +88,7 @@ protected AbstractSocketServerTest(final String protocol, final String port, fin
     }
 
     protected Layout<String> createJsonLayout() {
-        return JSONLayout.createLayout("true", "true", "false", "false", null);
+        return JsonLayout.createLayout("true", "true", "false", "false", null);
     }
 
     protected abstract Layout<? extends Serializable> createLayout();

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/UdpJsonSocketServerTest.java
Patch:
@@ -27,12 +27,12 @@
 
 public class UdpJsonSocketServerTest extends AbstractSocketServerTest {
 
-    private static UDPSocketServer<InputStream> server;
+    private static UdpSocketServer<InputStream> server;
 
     @BeforeClass
     public static void setupClass() throws Exception {
         ((LoggerContext) LogManager.getContext(false)).reconfigure();
-        server = UDPSocketServer.createJsonSocketServer(PORT_NUM);
+        server = UdpSocketServer.createJsonSocketServer(PORT_NUM);
         thread = server.startNewThread();
     }
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/UdpSerializedSocketServerTest.java
Patch:
@@ -27,12 +27,12 @@
 
 public class UdpSerializedSocketServerTest extends AbstractSocketServerTest {
 
-    private static UDPSocketServer<ObjectInputStream> server;
+    private static UdpSocketServer<ObjectInputStream> server;
 
     @BeforeClass
     public static void setupClass() throws Exception {
         ((LoggerContext) LogManager.getContext(false)).reconfigure();
-        server = UDPSocketServer.createSerializedSocketServer(PORT_NUM);
+        server = UdpSocketServer.createSerializedSocketServer(PORT_NUM);
         thread = server.startNewThread();
     }
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/UdpXmlSocketServerTest.java
Patch:
@@ -28,13 +28,13 @@
 
 public class UdpXmlSocketServerTest extends AbstractSocketServerTest {
 
-    private static UDPSocketServer<InputStream> server;
+    private static UdpSocketServer<InputStream> server;
 
     @BeforeClass
     public static void setupClass() throws Exception {
         ((LoggerContext) LogManager.getContext(false)).reconfigure();
         // Use a tiny buffer just to test the code, the TCP test uses a large buffer
-        server = new UDPSocketServer<InputStream>(PORT_NUM, new XmlInputStreamLogEventBridge(100,
+        server = new UdpSocketServer<InputStream>(PORT_NUM, new XmlInputStreamLogEventBridge(100,
                 Charset.defaultCharset()));
         thread = server.startNewThread();
     }

File: log4j-jmx-gui/src/main/java/org/apache/logging/log4j/jmx/gui/ClientGuiJConsolePlugin.java
Patch:
@@ -25,15 +25,15 @@
 import com.sun.tools.jconsole.JConsolePlugin;
 
 /**
- * Adapts the {@code ClientGUI} to the {@code JConsolePlugin} API.
+ * Adapts the {@code ClientGui} to the {@code JConsolePlugin} API.
  */
-public class ClientGUIJConsolePlugin extends JConsolePlugin {
+public class ClientGuiJConsolePlugin extends JConsolePlugin {
 
     @Override
     public Map<String, JPanel> getTabs() {
         try {
             final Client client = new Client(getContext().getMBeanServerConnection());
-            final ClientGUI gui = new ClientGUI(client);
+            final ClientGui gui = new ClientGui(client);
             final Map<String, JPanel> result = new HashMap<String, JPanel>();
             result.put("Log4j2", gui);
             return result;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/SocketAppender.java
Patch:
@@ -33,7 +33,7 @@
 import org.apache.logging.log4j.core.net.Advertiser;
 import org.apache.logging.log4j.core.net.DatagramSocketManager;
 import org.apache.logging.log4j.core.net.Protocol;
-import org.apache.logging.log4j.core.net.TCPSocketManager;
+import org.apache.logging.log4j.core.net.TcpSocketManager;
 import org.apache.logging.log4j.core.util.Booleans;
 import org.apache.logging.log4j.util.EnglishEnums;
 
@@ -133,7 +133,7 @@ protected static AbstractSocketManager createSocketManager(final Protocol p, fin
                                                                final Layout<? extends Serializable> layout) {
         switch (p) {
             case TCP:
-                return TCPSocketManager.getSocketManager(host, port, delay, immediateFail, layout);
+                return TcpSocketManager.getSocketManager(host, port, delay, immediateFail, layout);
             case UDP:
                 return DatagramSocketManager.getSocketManager(host, port, layout);
             default:

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/SyslogAppender.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.logging.log4j.core.config.plugins.PluginElement;
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
 import org.apache.logging.log4j.core.layout.LoggerFields;
-import org.apache.logging.log4j.core.layout.RFC5424Layout;
+import org.apache.logging.log4j.core.layout.Rfc5424Layout;
 import org.apache.logging.log4j.core.layout.SyslogLayout;
 import org.apache.logging.log4j.core.net.AbstractSocketManager;
 import org.apache.logging.log4j.core.net.Advertiser;
@@ -125,7 +125,7 @@ public static SyslogAppender createAppender(
         final int port = AbstractAppender.parseInt(portNum, 0);
         final boolean isAdvertise = Boolean.parseBoolean(advertise);
         final Layout<? extends Serializable> layout = (RFC5424.equalsIgnoreCase(format) ?
-            RFC5424Layout.createLayout(facility, id, ein, includeMDC, mdcId, mdcPrefix, eventPrefix, includeNL,
+            Rfc5424Layout.createLayout(facility, id, ein, includeMDC, mdcId, mdcPrefix, eventPrefix, includeNL,
                 escapeNL, appName, msgId, excludes, includes, required, exceptionPattern, "false", loggerFields,
                 config) :
             SyslogLayout.createLayout(facility, includeNL, escapeNL, charsetName));

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.appender.rolling.action.Action;
 import org.apache.logging.log4j.core.appender.rolling.action.FileRenameAction;
-import org.apache.logging.log4j.core.appender.rolling.action.GZCompressAction;
+import org.apache.logging.log4j.core.appender.rolling.action.GzCompressAction;
 import org.apache.logging.log4j.core.appender.rolling.action.ZipCompressAction;
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
@@ -418,7 +418,7 @@ public RolloverDescription rollover(final RollingFileManager manager) throws Sec
 
         if (renameTo.endsWith(EXT_GZIP)) {
             renameTo = renameTo.substring(0, renameTo.length() - EXT_GZIP.length());
-            compressAction = new GZCompressAction(new File(renameTo), new File(compressedName), true);
+            compressAction = new GzCompressAction(new File(renameTo), new File(compressedName), true);
         } else if (renameTo.endsWith(EXT_ZIP)) {
             renameTo = renameTo.substring(0, renameTo.length() - EXT_ZIP.length());
             compressAction = new ZipCompressAction(new File(renameTo), new File(compressedName), true,

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ZipCompressAction.java
Patch:
@@ -52,7 +52,7 @@ public final class ZipCompressAction extends AbstractAction {
     private final int level;
 
     /**
-     * Create new instance of GZCompressAction.
+     * Create new instance of GzCompressAction.
      *
      * @param source       file to compress, may not be null.
      * @param destination  compressed file, may not be null.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
Patch:
@@ -59,7 +59,7 @@
  * A ConfigurationFactory implementation can be added to the classpath and
  * configured as a plugin. The Order annotation should be used to configure the
  * factory to be the first one inspected. See
- * {@linkplain org.apache.logging.log4j.core.config.xml.XMLConfigurationFactory} for an example.</li>
+ * {@linkplain org.apache.logging.log4j.core.config.xml.XmlConfigurationFactory} for an example.</li>
  * </ol>
  *
  * If the ConfigurationFactory that was added returns null on a call to

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java
Patch:
@@ -45,7 +45,7 @@
 /**
  * Creates a Node hierarchy from a JSON file.
  */
-public class JSONConfiguration extends AbstractConfiguration implements Reconfigurable {
+public class JsonConfiguration extends AbstractConfiguration implements Reconfigurable {
 
     private static final String[] VERBOSE_CLASSES = new String[]{ResolverUtil.class.getName()};
 
@@ -55,7 +55,7 @@ public class JSONConfiguration extends AbstractConfiguration implements Reconfig
 
     private final File configFile;
 
-    public JSONConfiguration(final ConfigurationFactory.ConfigurationSource configSource) {
+    public JsonConfiguration(final ConfigurationFactory.ConfigurationSource configSource) {
         this.configFile = configSource.getFile();
         byte[] buffer;
         try {
@@ -144,7 +144,7 @@ public Configuration reconfigure() {
             try {
                 final ConfigurationFactory.ConfigurationSource source =
                     new ConfigurationFactory.ConfigurationSource(new FileInputStream(configFile), configFile);
-                return new JSONConfiguration(source);
+                return new JsonConfiguration(source);
             } catch (final FileNotFoundException ex) {
                 LOGGER.error("Cannot locate file {}", configFile, ex);
             }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/yaml/YamlConfiguration.java
Patch:
@@ -17,15 +17,15 @@
 package org.apache.logging.log4j.core.config.yaml;
 
 import org.apache.logging.log4j.core.config.ConfigurationFactory;
-import org.apache.logging.log4j.core.config.json.JSONConfiguration;
+import org.apache.logging.log4j.core.config.json.JsonConfiguration;
 
 import com.fasterxml.jackson.core.JsonParser;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
 
-public class YAMLConfiguration extends JSONConfiguration {
+public class YamlConfiguration extends JsonConfiguration {
 
-    public YAMLConfiguration(ConfigurationFactory.ConfigurationSource configSource) {
+    public YamlConfiguration(ConfigurationFactory.ConfigurationSource configSource) {
         super(configSource);
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/MimeMessageBuilder.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.logging.log4j.core.util.Charsets;
 
 /**
- *  Helper class for SMTPManager.
+ *  Helper class for SmtpManager.
  */
 public class MimeMessageBuilder {
     private final MimeMessage message;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/MulticastDnsAdvertiser.java
Patch:
@@ -36,14 +36,14 @@
  *
  */
 @Plugin(name = "multicastdns", category = "Core", elementType = "advertiser", printObject = false)
-public class MulticastDNSAdvertiser implements Advertiser {
+public class MulticastDnsAdvertiser implements Advertiser {
     protected static final Logger LOGGER = StatusLogger.getLogger();
     private static Object jmDNS = initializeJMDNS();
 
     private static Class<?> jmDNSClass;
     private static Class<?> serviceInfoClass;
 
-    public MulticastDNSAdvertiser()
+    public MulticastDnsAdvertiser()
     {
         //no arg constructor for reflection
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/jms/AbstractJmsManager.java
Patch:
@@ -35,13 +35,13 @@
 /**
  * Base Class for Managers of JMS connections.
  */
-public abstract class AbstractJMSManager extends AbstractManager {
+public abstract class AbstractJmsManager extends AbstractManager {
 
     /**
      * The Constructor.
      * @param name The name of the Appender.
      */
-    public AbstractJMSManager(final String name) {
+    public AbstractJmsManager(final String name) {
         super(name);
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/jms/AbstractJmsReceiver.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * Abstract base class for receiving LogEvents over JMS. This class expects all messages to be serialized log events.
  */
-public abstract class AbstractJMSReceiver extends LogEventListener implements javax.jms.MessageListener {
+public abstract class AbstractJmsReceiver extends LogEventListener implements javax.jms.MessageListener {
 
     /**
      * Logger to capture diagnostics.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/jms/package-info.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * Supporting network code for JMS appenders.
  * <p/>
- * Note that you can use JMSQueueReceiver or JMSTopicReceiver as executable main classes to receive log events over
+ * Note that you can use JmsQueueReceiver or JmsTopicReceiver as executable main classes to receive log events over
  * JMS (sent via the appropriate JMS appender) that can be subsequently logged according to the configuration given to
  * the running process. Of course, use of these classes as standalone executables are entirely optional and can
  * be used directly in your application (e.g., through your Spring {@code beans.xml} configuration).

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/KeyStoreConfiguration.java
Patch:
@@ -39,7 +39,7 @@ public class KeyStoreConfiguration extends StoreConfiguration {
 
     public KeyStoreConfiguration(String location, String password) {
         super(location, password);
-        this.keyStoreType = SSLConfigurationDefaults.KEYSTORE_TYPE;
+        this.keyStoreType = SslConfigurationDefaults.KEYSTORE_TYPE;
         this.keyStore = null;
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/SslConfigurationDefaults.java
Patch:
@@ -19,7 +19,7 @@
 /**
  *
  */
-public class SSLConfigurationDefaults {
+public class SslConfigurationDefaults {
 
     public static final String KEYSTORE_TYPE = "JKS";
     public static final String PROTOCOL = "SSL";

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/SslConfigurationException.java
Patch:
@@ -19,10 +19,10 @@
 /**
  *
  */
-public class SSLConfigurationException extends Exception {
+public class SslConfigurationException extends Exception {
     private static final long serialVersionUID = 1L;
 
-    public SSLConfigurationException(Exception e) {
+    public SslConfigurationException(Exception e) {
         super(e);
     }
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/TrustStoreConfiguration.java
Patch:
@@ -39,7 +39,7 @@ public class TrustStoreConfiguration extends StoreConfiguration {
 
     public TrustStoreConfiguration(String location, String password) {
         super(location, password);
-        trustStoreType = SSLConfigurationDefaults.KEYSTORE_TYPE;
+        trustStoreType = SslConfigurationDefaults.KEYSTORE_TYPE;
         trustStore = null;
     }
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/AbstractPatternConverter.java
Patch:
@@ -58,7 +58,7 @@ protected AbstractPatternConverter(final String name, final String style) {
     /**
      * This method returns the name of the conversion pattern.
      * <p/>
-     * The name can be useful to certain Layouts such as HTMLLayout.
+     * The name can be useful to certain Layouts such as HtmlLayout.
      *
      * @return the name of the conversion pattern
      */
@@ -71,7 +71,7 @@ public final String getName() {
      * This method returns the CSS style class that should be applied to
      * the LoggingEvent passed as parameter, which can be null.
      * <p/>
-     * This information is currently used only by HTMLLayout.
+     * This information is currently used only by HtmlLayout.
      *
      * @param e null values are accepted
      * @return the name of the conversion pattern

File: log4j-core/src/main/java/org/apache/logging/log4j/core/selector/JndiContextSelector.java
Patch:
@@ -86,7 +86,7 @@
  * </p>
  *
  */
-public class JNDIContextSelector implements NamedContextSelector {
+public class JndiContextSelector implements NamedContextSelector {
 
     private static final LoggerContext CONTEXT = new LoggerContext("Default");
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/UuidUtil.java
Patch:
@@ -33,7 +33,7 @@
  * Generates a unique ID. The generated UUID will be unique for approximately 8,925 years so long as
  * less than 10,000 IDs are generated per millisecond on the same device (as identified by its MAC address).
  */
-public final class UUIDUtil {
+public final class UuidUtil {
     /**
      * System property that may be used to seed the UUID generation with an integer value.
      */
@@ -153,7 +153,7 @@ public final class UUIDUtil {
 
 
     /* This class cannot be instantiated */
-    private UUIDUtil() {
+    private UuidUtil() {
     }
 
     /**

File: log4j-core/src/test/java/org/apache/logging/log4j/core/LateConfigTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.DefaultConfiguration;
-import org.apache.logging.log4j.core.config.xml.XMLConfiguration;
+import org.apache.logging.log4j.core.config.xml.XmlConfiguration;
 import org.apache.logging.log4j.test.appender.ListAppender;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -55,7 +55,7 @@ public void testReconfiguration() throws Exception {
         assertNotNull("No Logger Context", loggerContext);
         final Configuration newConfig = loggerContext.getConfiguration();
         assertTrue("Configuration not reset", cfg != newConfig);
-        assertTrue("Reconfiguration failed", newConfig instanceof XMLConfiguration);
+        assertTrue("Reconfiguration failed", newConfig instanceof XmlConfiguration);
         ctx = (LoggerContext) LogManager.getContext(false);
         final Configuration sameConfig = ctx.getConfiguration();
         assertTrue("Configuration should not have been reset", newConfig == sameConfig);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/XmlEvents.java
Patch:
@@ -28,7 +28,7 @@
 /**
  *
  */
-public class XMLEvents {
+public class XmlEvents {
 
     private static final String CONFIG = "xml-events.xml";
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/JSONCompleteFileAppenderTest.java
Patch:
@@ -34,9 +34,9 @@
  */
 public class JSONCompleteFileAppenderTest {
 
-    private final File logFile = new File("target", "JSONCompleteFileAppenderTest.log");
+    private final File logFile = new File("target", "JsonCompleteFileAppenderTest.log");
 
-    private final InitialLoggerContext init = new InitialLoggerContext("JSONCompleteFileAppenderTest.xml");
+    private final InitialLoggerContext init = new InitialLoggerContext("JsonCompleteFileAppenderTest.xml");
     private final CleanFiles files = new CleanFiles(logFile);
 
     @Rule

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/SmtpAppenderTest.java
Patch:
@@ -35,7 +35,7 @@
 
 import static org.junit.Assert.*;
 
-public class SMTPAppenderTest {
+public class SmtpAppenderTest {
 
     private static final String HOST = "localhost";
     private static final String PORT = "8199";
@@ -130,7 +130,7 @@ public void testCyclicBuffer() {
 
     @Test
     public void testDelivery() {
-        final SMTPAppender appender = SMTPAppender.createAppender("Test",
+        final SmtpAppender appender = SmtpAppender.createAppender("Test",
                 "to@example.com", "cc@example.com", "bcc@example.com",
                 "from@example.com", "replyTo@example.com", "Subject", null,
                 HOST, PORT, null, null, "false", "3", null, null, "true");

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/routing/JsonRoutingAppender2Test.java
Patch:
@@ -39,7 +39,7 @@
 /**
  *
  */
-public class JSONRoutingAppender2Test {
+public class JsonRoutingAppender2Test {
     private static final String CONFIG = "log4j-routing2.json";
     private static Configuration config;
     private static ListAppender app;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/routing/JsonRoutingAppenderTest.java
Patch:
@@ -39,7 +39,7 @@
 /**
  *
  */
-public class JSONRoutingAppenderTest {
+public class JsonRoutingAppenderTest {
     private static final String CONFIG = "log4j-routing.json";
     private static Configuration config;
     private static ListAppender app;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/perftest/MtPerfTest.java
Patch:
@@ -20,10 +20,10 @@
 
 import com.lmax.disruptor.collections.Histogram;
 
-public class MTPerfTest extends PerfTest {
+public class MtPerfTest extends PerfTest {
 
     public static void main(final String[] args) throws Exception {
-        new MTPerfTest().doMain(args);
+        new MtPerfTest().doMain(args);
     }
 
     @Override

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java
Patch:
@@ -134,7 +134,7 @@ public String description() {
             String detail = _class.getSimpleName();
             if (PerfTest.class == _class) {
                 detail = "single thread";
-            } else if (MTPerfTest.class == _class) {
+            } else if (MtPerfTest.class == _class) {
                 detail = _threadCount + " threads";
             }
             final String target = _runner.substring(_runner.indexOf(".Run") + 4);
@@ -202,7 +202,7 @@ private static Setup m(final String config, final String runner, final String na
             final int threadCount, final String... systemProperties) throws IOException {
         final WaitStrategy wait = WaitStrategy.valueOf(System.getProperty(
                 "WaitStrategy", "Sleep"));
-        return new Setup(MTPerfTest.class, runner, name, config, threadCount,
+        return new Setup(MtPerfTest.class, runner, name, config, threadCount,
                 wait, systemProperties);
     }
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/AdvertiserTest.java
Patch:
@@ -21,7 +21,7 @@
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.core.LoggerContext;
-import org.apache.logging.log4j.core.config.xml.XMLConfiguration;
+import org.apache.logging.log4j.core.config.xml.XmlConfiguration;
 import org.apache.logging.log4j.status.StatusLogger;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
@@ -44,7 +44,7 @@ public static void setupClass() {
         System.setProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY, CONFIG);
         final LoggerContext ctx = (LoggerContext) LogManager.getContext();
         final Configuration config = ctx.getConfiguration();
-        if (config instanceof XMLConfiguration) {
+        if (config instanceof XmlConfiguration) {
             final String name = config.getName();
             if (name == null || !name.equals("XMLConfigTest")) {
                 ctx.reconfigure();

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/CustomConfigurationTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.appender.FileAppender;
-import org.apache.logging.log4j.core.config.xml.XMLConfiguration;
+import org.apache.logging.log4j.core.config.xml.XmlConfiguration;
 import org.apache.logging.log4j.core.layout.PatternLayout;
 import org.apache.logging.log4j.junit.InitialLoggerContext;
 import org.apache.logging.log4j.status.StatusConsoleListener;
@@ -65,7 +65,7 @@ public void testConfig() {
         final LoggerContext ctx = this.init.getContext();
         ctx.reconfigure();
         final Configuration config = ctx.getConfiguration();
-        assertTrue("Configuration is not an XMLConfiguration", config instanceof XMLConfiguration);
+        assertTrue("Configuration is not an XmlConfiguration", config instanceof XmlConfiguration);
         for (StatusListener listener : StatusLogger.getLogger().getListeners()) {
             if (listener instanceof StatusConsoleListener) {
                 assertSame(listener.getStatusLevel(), Level.INFO);

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/json/JsonConfigTest.java
Patch:
@@ -19,5 +19,5 @@
 /**
  *
  */
-public class JSONConfigTest {
+public class JsonConfigTest {
 }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/xml/XmlLoggerPropsTest.java
Patch:
@@ -36,7 +36,7 @@
 /**
  *
  */
-public class XMLLoggerPropsTest {
+public class XmlLoggerPropsTest {
 
     private static final String CONFIG = "log4j-loggerprops.xml";
     private static Configuration config;
@@ -69,8 +69,8 @@ public void testWithProps() {
         assertNotNull("No List Appender", app);
 
         try {
-            assertTrue("Configuration is not an XMLConfiguration", config instanceof XMLConfiguration);
-            Logger logger = LogManager.getLogger(XMLLoggerPropsTest.class);
+            assertTrue("Configuration is not an XmlConfiguration", config instanceof XmlConfiguration);
+            Logger logger = LogManager.getLogger(XmlLoggerPropsTest.class);
             logger.debug("Test with props");
             logger = LogManager.getLogger("tiny.bubbles");
             logger.debug("Test on root");

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/mock/MockTcpSyslogServer.java
Patch:
@@ -21,12 +21,12 @@
 import java.net.ServerSocket;
 import java.net.Socket;
 
-public class MockTCPSyslogServer extends MockSyslogServer {
+public class MockTcpSyslogServer extends MockSyslogServer {
     private final ServerSocket sock;
     private boolean shutdown = false;
     private Thread thread;
 
-    public MockTCPSyslogServer(int numberOfMessagesToReceive, int port) throws IOException {
+    public MockTcpSyslogServer(int numberOfMessagesToReceive, int port) throws IOException {
         super(numberOfMessagesToReceive, port);
         sock = new ServerSocket(port);
     }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/mock/MockUdpSyslogServer.java
Patch:
@@ -20,12 +20,12 @@
 import java.net.DatagramSocket;
 import java.net.SocketException;
 
-public class MockUDPSyslogServer extends MockSyslogServer {
+public class MockUdpSyslogServer extends MockSyslogServer {
     private final DatagramSocket socket;
     private boolean shutdown = false;
     private Thread thread;
 
-    public MockUDPSyslogServer(int numberOfMessagesToReceive, int port) throws SocketException {
+    public MockUdpSyslogServer(int numberOfMessagesToReceive, int port) throws SocketException {
         super(numberOfMessagesToReceive, port);
         this.socket = new DatagramSocket(port);
     }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/AbstractSocketServerTest.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.logging.log4j.core.filter.AbstractFilter;
 import org.apache.logging.log4j.core.layout.JSONLayout;
 import org.apache.logging.log4j.core.layout.PatternLayout;
-import org.apache.logging.log4j.core.layout.XMLLayout;
+import org.apache.logging.log4j.core.layout.XmlLayout;
 import org.apache.logging.log4j.test.appender.ListAppender;
 import org.junit.After;
 import org.junit.Ignore;
@@ -98,7 +98,7 @@ protected Layout<? extends Serializable> createSerializedLayout() {
     }
 
     protected Layout<String> createXmlLayout() {
-        return XMLLayout.createLayout("true", "true", "false", null, null);
+        return XmlLayout.createLayout("true", "true", "false", null, null);
     }
 
     @After

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/TcpJsonSocketServerTest.java
Patch:
@@ -27,12 +27,12 @@
 
 public class TcpJsonSocketServerTest extends AbstractSocketServerTest {
     
-    private static TCPSocketServer<InputStream> server;
+    private static TcpSocketServer<InputStream> server;
 
     @BeforeClass
     public static void setupClass() throws Exception {
         ((LoggerContext) LogManager.getContext(false)).reconfigure();
-        server = TCPSocketServer.createJsonSocketServer(PORT_NUM);
+        server = TcpSocketServer.createJsonSocketServer(PORT_NUM);
         thread = server.startNewThread();
     }
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/TcpSerializedSocketServerTest.java
Patch:
@@ -28,12 +28,12 @@
 
 public class TcpSerializedSocketServerTest extends AbstractSocketServerTest {
     
-    private static TCPSocketServer<ObjectInputStream> server;
+    private static TcpSocketServer<ObjectInputStream> server;
 
     @BeforeClass
     public static void setupClass() throws Exception {
         ((LoggerContext) LogManager.getContext(false)).reconfigure();
-        server = TCPSocketServer.createSerializedSocketServer(PORT_NUM);
+        server = TcpSocketServer.createSerializedSocketServer(PORT_NUM);
         thread = server.startNewThread();
     }
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/TcpXmlSocketServerTest.java
Patch:
@@ -28,13 +28,13 @@
 
 public class TcpXmlSocketServerTest extends AbstractSocketServerTest {
     
-    private static TCPSocketServer<InputStream> server;
+    private static TcpSocketServer<InputStream> server;
 
     @BeforeClass
     public static void setupClass() throws Exception {
         ((LoggerContext) LogManager.getContext(false)).reconfigure();
         // Use a large buffer just to test the code, the UDP test uses a tiny buffer
-        server = new TCPSocketServer<InputStream>(PORT_NUM, new XmlInputStreamLogEventBridge(1024 * 100,
+        server = new TcpSocketServer<InputStream>(PORT_NUM, new XmlInputStreamLogEventBridge(1024 * 100,
                 Charset.defaultCharset()));
         thread = server.startNewThread();
     }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/ssl/LegacyBsdTlsSyslogInputStreamReader.java
Patch:
@@ -23,11 +23,11 @@
 
 import org.apache.logging.log4j.util.Strings;
 
-public class LegacyBSDTLSSyslogInputStreamReader extends TLSSyslogInputStreamReaderBase {
+public class LegacyBsdTlsSyslogInputStreamReader extends TlsSyslogInputStreamReaderBase {
     private final ByteArrayOutputStream buffer;
 
-    public LegacyBSDTLSSyslogInputStreamReader(InputStream inputStream) {
-        super(inputStream, TLSSyslogMessageFormat.LEGACY_BSD);
+    public LegacyBsdTlsSyslogInputStreamReader(InputStream inputStream) {
+        super(inputStream, TlsSyslogMessageFormat.LEGACY_BSD);
         buffer = new ByteArrayOutputStream();
     }
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/ssl/TlsSyslogInputStreamReader.java
Patch:
@@ -22,7 +22,7 @@
 import java.io.InputStream;
 import java.util.Arrays;
 
-public class TLSSyslogInputStreamReader extends TLSSyslogInputStreamReaderBase {
+public class TlsSyslogInputStreamReader extends TlsSyslogInputStreamReaderBase {
     private static final char SPACE = ' ';
 
     private final ByteArrayOutputStream messageBuffer;
@@ -33,8 +33,8 @@ public class TLSSyslogInputStreamReader extends TLSSyslogInputStreamReaderBase {
     private int position = 0;
     private int nextMessageLength = 0;
 
-    public TLSSyslogInputStreamReader(InputStream inputStream) {
-        super(inputStream, TLSSyslogMessageFormat.SYSLOG);
+    public TlsSyslogInputStreamReader(InputStream inputStream) {
+        super(inputStream, TlsSyslogMessageFormat.SYSLOG);
         this.messageBuffer = new ByteArrayOutputStream(messagePartBufferSize);
         this.lengthBuffer = new byte[lengthBufferSize];
         this.messagePartBuffer = new byte[messagePartBufferSize];

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/ssl/TlsSyslogInputStreamReaderBase.java
Patch:
@@ -19,12 +19,12 @@
 import java.io.IOException;
 import java.io.InputStream;
 
-public abstract class TLSSyslogInputStreamReaderBase {
+public abstract class TlsSyslogInputStreamReaderBase {
 
     protected InputStream inputStream;
-    protected TLSSyslogMessageFormat messageFormat;
+    protected TlsSyslogMessageFormat messageFormat;
 
-    protected TLSSyslogInputStreamReaderBase(InputStream inputStream, TLSSyslogMessageFormat messageFormat) {
+    protected TlsSyslogInputStreamReaderBase(InputStream inputStream, TlsSyslogMessageFormat messageFormat) {
         this.inputStream = inputStream;
         this.messageFormat = messageFormat;
     }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/ssl/TlsSyslogMessageFormat.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.logging.log4j.core.net.ssl;
 
-public enum TLSSyslogMessageFormat {
+public enum TlsSyslogMessageFormat {
     LEGACY_BSD,
     SYSLOG
 }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/ssl/TlsSyslogTestUtil.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.ArrayList;
 import java.util.Random;
 
-public class TLSSyslogTestUtil {
+public class TlsSyslogTestUtil {
     public static final String ABC = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
     public static final String NUMBERS = "0123456789";
     public static final String WHITESPACES = " \t\n";
@@ -31,7 +31,7 @@ public static ArrayList<String> generateMessages(int numberOfMessages) {
         return generateMessages(numberOfMessages, CHARSET);
     }
 
-    public static ArrayList<String> generateMessages(int numberOfMessages, TLSSyslogMessageFormat format) {
+    public static ArrayList<String> generateMessages(int numberOfMessages, TlsSyslogMessageFormat format) {
         switch (format) {
             case SYSLOG:
                 return generateMessages(numberOfMessages, SYSLOG_CHARSET);

File: log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
 import org.apache.logging.log4j.core.config.plugins.PluginElement;
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
-import org.apache.logging.log4j.core.layout.RFC5424Layout;
+import org.apache.logging.log4j.core.layout.Rfc5424Layout;
 import org.apache.logging.log4j.core.util.Booleans;
 import org.apache.logging.log4j.core.util.Integers;
 
@@ -219,7 +219,7 @@ public static FlumeAppender createAppender(@PluginElement("Agents") Agent[] agen
         final int delay = Integers.parseInt(maxDelay, DEFAULT_MAX_DELAY);
 
         if (layout == null) {
-            layout = RFC5424Layout.createLayout(null, null, null, "True", null, mdcPrefix, eventPrefix,
+            layout = Rfc5424Layout.createLayout(null, null, null, "True", null, mdcPrefix, eventPrefix,
                     null, null, null, null, excludes, includes, required, null, null, null, null);
         }
 

File: log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeEvent.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.impl.ThrowableProxy;
 import org.apache.logging.log4j.core.util.Patterns;
-import org.apache.logging.log4j.core.util.UUIDUtil;
+import org.apache.logging.log4j.core.util.UuidUtil;
 import org.apache.logging.log4j.message.MapMessage;
 import org.apache.logging.log4j.message.Message;
 import org.apache.logging.log4j.message.StructuredDataId;
@@ -127,7 +127,7 @@ public FlumeEvent(final LogEvent event, final String includes, final String excl
                 }
             }
         }
-        final String guid =  UUIDUtil.getTimeBasedUUID().toString();
+        final String guid =  UuidUtil.getTimeBasedUUID().toString();
         final Message message = event.getMessage();
         if (message instanceof MapMessage) {
             // Add the guid to the Map so that it can be included in the Layout.

File: log4j-samples/flume-common/src/main/java/org/apache/logging/log4j/samples/dto/RequestContext.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.logging.log4j.samples.dto;
 
 import org.apache.logging.log4j.ThreadContext;
-import org.apache.logging.log4j.core.util.UUIDUtil;
+import org.apache.logging.log4j.core.util.UuidUtil;
 
 /**
  *
@@ -57,7 +57,7 @@ private RequestContext() {
 
     public static void initialize() {
         ThreadContext.clearMap();
-        ThreadContext.put(REQUEST_ID, UUIDUtil.getTimeBasedUUID().toString());
+        ThreadContext.put(REQUEST_ID, UuidUtil.getTimeBasedUUID().toString());
     }
 
     public static String getId() {

File: log4j-api/src/main/java/org/apache/logging/log4j/ThreadContext.java
Patch:
@@ -197,7 +197,7 @@ public void remove() {
     /**
      * <em>Consider private, used for testing.</em>
      */
-    public static void init() {
+    static void init() {
         contextMap = null;
         final PropertiesUtil managerProps = PropertiesUtil.getProperties();
         disableAll = managerProps.getBooleanProperty(DISABLE_ALL);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/Filter.java
Patch:
@@ -30,7 +30,7 @@
  * specific loggers and associated with Appenders. It is recommended that, where possible, Filter implementations
  * create a generic filtering method that can be called from any of the filter methods.
  */
-public interface Filter {
+public interface Filter extends LifeCycle {
 
     /**
      * The result that can returned from a filter method call.

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeTest.java
Patch:
@@ -67,7 +67,7 @@ public void testAppender() throws Exception {
         final File dir = new File(DIR);
         assertTrue("Directory not created", dir.exists() && dir.listFiles().length > 0);
 
-        final int MAX_TRIES = 10;
+        final int MAX_TRIES = 20;
         for (int i = 0; i < MAX_TRIES; i++) {
             final File[] files = dir.listFiles();
             assertTrue("No files created", files.length > 0);
@@ -76,7 +76,8 @@ public void testAppender() throws Exception {
                     return; // test succeeded
                 }
             }
-            Thread.sleep(50); // Allow time for rollover to complete
+            logger.debug("Adding additional event " + i);
+            Thread.sleep(100); // Allow time for rollover to complete
         }
         fail("No compressed files found");
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/AbstractLogEventWrapperEntity.java
Patch:
@@ -256,6 +256,8 @@ public final void setEndOfBatch(final boolean endOfBatch) {
      * order to "play around" with them.
      */
     private static class NullLogEvent extends AbstractLogEvent {
+
+        private static final long serialVersionUID = 1L;
     	// Inherits everything
     }
 }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/jackson/JacksonIssue429Test.java
Patch:
@@ -34,6 +34,8 @@ public class JacksonIssue429Test {
 
     @SuppressWarnings("serial")
     static class Jackson429StackTraceElementDeserializer extends StdDeserializer<StackTraceElement> {
+        private static final long serialVersionUID = 1L;
+
         public Jackson429StackTraceElementDeserializer() {
             super(StackTraceElement.class);
         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HTMLLayout.java
Patch:
@@ -166,15 +166,15 @@ public String toSerializable(final LogEvent event) {
         sbuf.append("</td>").append(Constants.LINE_SEPARATOR);
         sbuf.append("</tr>").append(Constants.LINE_SEPARATOR);
 
-        if (event.getContextStack().getDepth() > 0) {
+        if (event.getContextStack() != null && !event.getContextStack().isEmpty()) {
             sbuf.append("<tr><td bgcolor=\"#EEEEEE\" style=\"font-size : ").append(fontSize);
             sbuf.append(";\" colspan=\"6\" ");
             sbuf.append("title=\"Nested Diagnostic Context\">");
             sbuf.append("NDC: ").append(Transform.escapeHtmlTags(event.getContextStack().toString()));
             sbuf.append("</td></tr>").append(Constants.LINE_SEPARATOR);
         }
 
-        if (event.getContextMap().size() > 0) {
+        if (event.getContextMap() != null && !event.getContextMap().isEmpty()) {
             sbuf.append("<tr><td bgcolor=\"#EEEEEE\" style=\"font-size : ").append(fontSize);
             sbuf.append(";\" colspan=\"6\" ");
             sbuf.append("title=\"Mapped Diagnostic Context\">");

File: log4j-core/src/main/java/org/apache/logging/log4j/core/util/OptionConverter.java
Patch:
@@ -102,7 +102,7 @@ public static Object instantiateByKey(final Properties props, final String key,
     /**
      * If <code>value</code> is "true", then {@code true} is
      * returned. If <code>value</code> is "false", then
-     * {@code true} is returned. Otherwise, <code>default</code> is
+     * {@code false} is returned. Otherwise, <code>default</code> is
      * returned.
      * <p/>
      * <p>Case of value is unimportant.

File: log4j-core/src/test/java/org/apache/logging/dumbster/smtp/SmtpMessage.java
Patch:
@@ -16,11 +16,11 @@
  */
 package org.apache.logging.dumbster.smtp;
 
-import java.util.Map;
+import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
-import java.util.ArrayList;
+import java.util.Map;
 import java.util.Set;
 
 /**

File: log4j-core/src/test/java/org/apache/logging/log4j/core/CollectionLoggingTest.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.logging.log4j.core;
 
+import static org.junit.Assert.assertNotNull;
+
 import java.net.NetworkInterface;
 import java.net.SocketException;
 import java.nio.charset.Charset;
@@ -32,8 +34,6 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import static org.junit.Assert.assertNotNull;
-
 /**
  * Work in progress.
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/LateConfigTest.java
Patch:
@@ -16,6 +16,9 @@
  */
 package org.apache.logging.log4j.core;
 
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
 import java.io.File;
 
 import org.apache.logging.log4j.LogManager;
@@ -26,9 +29,6 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-
 /**
  *
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/ThreadedPerfTest.java
Patch:
@@ -16,13 +16,13 @@
  */
 package org.apache.logging.log4j.core;
 
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
 import org.junit.Test;
 
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-
 /**
  *
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/Timer.java
Patch:
@@ -19,6 +19,8 @@
 import java.io.Serializable;
 import java.text.DecimalFormat;
 
+import org.apache.logging.log4j.util.Strings;
+
 /**
  *
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/RandomAccessFileManagerTest.java
Patch:
@@ -16,7 +16,8 @@
  */
 package org.apache.logging.log4j.core.appender;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotEquals;
 
 import java.io.File;
 import java.io.FileOutputStream;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/SyslogAppenderTest.java
Patch:
@@ -16,14 +16,14 @@
  */
 package org.apache.logging.log4j.core.appender;
 
+import java.io.IOException;
+import java.net.SocketException;
+
 import org.apache.logging.log4j.core.net.mock.MockSyslogServerFactory;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
-import java.io.IOException;
-import java.net.SocketException;
-
 /**
  *
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/TLSSyslogFrameTest.java
Patch:
@@ -16,11 +16,11 @@
  */
 package org.apache.logging.log4j.core.appender;
 
+import java.util.Arrays;
+
 import org.junit.Assert;
 import org.junit.Test;
 
-import java.util.Arrays;
-
 public class TLSSyslogFrameTest {
     private static final String TESTMESSAGE = "The quick brown fox jumps over the lazy dog";
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/db/jdbc/JdbcH2AppenderTest.java
Patch:
@@ -20,6 +20,8 @@
 import java.sql.DriverManager;
 import java.sql.SQLException;
 
+import org.apache.logging.log4j.util.Strings;
+
 /**
  * Tests the JDBC appender with the H2 database in memory.
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/db/jdbc/JdbcHyperSqlAppenderTest.java
Patch:
@@ -20,6 +20,8 @@
 import java.sql.DriverManager;
 import java.sql.SQLException;
 
+import org.apache.logging.log4j.util.Strings;
+
 /**
  * Tests the JDBC appender with the HyperSQL database (a.k.a. HSQLDB) in memory.
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/JpaH2AppenderTest.java
Patch:
@@ -21,6 +21,8 @@
 import java.sql.SQLException;
 import java.sql.Statement;
 
+import org.apache.logging.log4j.util.Strings;
+
 public class JpaH2AppenderTest extends AbstractJpaAppenderTest {
     private static final String USER_ID = "sa";
     private static final String PASSWORD = Strings.EMPTY;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/JpaHyperSqlAppenderTest.java
Patch:
@@ -16,16 +16,17 @@
  */
 package org.apache.logging.log4j.core.appender.db.jpa;
 
+import static org.junit.Assert.assertNull;
+
 import java.sql.Connection;
 import java.sql.DriverManager;
 import java.sql.SQLException;
 import java.sql.Statement;
 
 import org.apache.logging.log4j.core.LogEvent;
+import org.apache.logging.log4j.util.Strings;
 import org.junit.Test;
 
-import static org.junit.Assert.assertNull;
-
 public class JpaHyperSqlAppenderTest extends AbstractJpaAppenderTest {
     private static final String USER_ID = "sa";
     private static final String PASSWORD = Strings.EMPTY;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/TestBasicEntity.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.logging.log4j.core.appender.db.jpa;
 
 import java.util.Map;
+
 import javax.persistence.Column;
 import javax.persistence.Convert;
 import javax.persistence.Entity;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapAttributeConverterTest.java
Patch:
@@ -16,16 +16,16 @@
  */
 package org.apache.logging.log4j.core.appender.db.jpa.converter;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
 import java.util.HashMap;
 import java.util.Map;
 
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
 public class ContextMapAttributeConverterTest {
     private ContextMapAttributeConverter converter;
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackAttributeConverterTest.java
Patch:
@@ -16,6 +16,9 @@
  */
 package org.apache.logging.log4j.core.appender.db.jpa.converter;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
 import java.util.Arrays;
 
 import org.apache.logging.log4j.ThreadContext;
@@ -24,8 +27,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.*;
-
 public class ContextStackAttributeConverterTest {
     private ContextStackAttributeConverter converter;
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/PatternProcessorTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.logging.log4j.core.appender.rolling;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 
 import java.text.SimpleDateFormat;
 import java.util.Calendar;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderSizeTest.java
Patch:
@@ -16,9 +16,12 @@
  */
 package org.apache.logging.log4j.core.appender.rolling;
 
+import static org.junit.Assert.assertTrue;
+
 import java.io.File;
 import java.util.Arrays;
 import java.util.Collection;
+
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.junit.InitialLoggerContext;
 import org.junit.After;
@@ -28,8 +31,6 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 
-import static org.junit.Assert.assertTrue;
-
 /**
  *
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerLocationTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.logging.log4j.core.LifeCycle;
 import org.apache.logging.log4j.core.config.ConfigurationFactory;
 import org.apache.logging.log4j.core.util.Constants;
+import org.apache.logging.log4j.util.Strings;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.logging.log4j.core.LifeCycle;
 import org.apache.logging.log4j.core.config.ConfigurationFactory;
 import org.apache.logging.log4j.core.util.Constants;
+import org.apache.logging.log4j.util.Strings;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerTestCachedThreadName.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.logging.log4j.core.LifeCycle;
 import org.apache.logging.log4j.core.config.ConfigurationFactory;
 import org.apache.logging.log4j.core.util.Constants;
+import org.apache.logging.log4j.util.Strings;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerTestUncachedThreadName.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.logging.log4j.core.LifeCycle;
 import org.apache.logging.log4j.core.config.ConfigurationFactory;
 import org.apache.logging.log4j.core.util.Constants;
+import org.apache.logging.log4j.util.Strings;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerThreadNameStrategyTest.java
Patch:
@@ -16,7 +16,8 @@
  */
 package org.apache.logging.log4j.core.async;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertSame;
 
 import org.junit.Test;
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java
Patch:
@@ -17,7 +17,8 @@
 
 package org.apache.logging.log4j.core.async;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
 
 import java.util.Map;
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/perftest/PerfTest.java
Patch:
@@ -19,10 +19,10 @@
 import java.io.FileWriter;
 import java.io.IOException;
 
-import com.lmax.disruptor.collections.Histogram;
-
 import org.apache.logging.log4j.core.util.Loader;
 
+import com.lmax.disruptor.collections.Histogram;
+
 public class PerfTest {
 
     private static final String LINE100 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!\"#$%&'()-=^~|\\@`[]{};:+*,.<>/?_123456";

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/AdvertiserTest.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.logging.log4j.core.config;
 
+import static org.junit.Assert.assertTrue;
+
 import java.io.File;
 import java.util.Map;
 
@@ -27,8 +29,6 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import static org.junit.Assert.assertTrue;
-
 /**
  *
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/InMemoryAdvertiser.java
Patch:
@@ -16,12 +16,12 @@
  */
 package org.apache.logging.log4j.core.config;
 
-import org.apache.logging.log4j.core.config.plugins.Plugin;
-import org.apache.logging.log4j.core.net.Advertiser;
-
 import java.util.HashMap;
 import java.util.Map;
 
+import org.apache.logging.log4j.core.config.plugins.Plugin;
+import org.apache.logging.log4j.core.net.Advertiser;
+
 @Plugin(name = "memory", category = "Core", elementType = "advertiser", printObject = false)
 public class InMemoryAdvertiser implements Advertiser {
     private static Map<Object, Map<String, String>> properties = new HashMap<Object, Map<String, String>>();

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/TestConfiguratorError.java
Patch:
@@ -16,13 +16,13 @@
  */
 package org.apache.logging.log4j.core.config;
 
+import static org.junit.Assert.assertNull;
+
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.simple.SimpleLoggerContextFactory;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import static org.junit.Assert.assertNull;
-
 /**
  *
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/xml/XMLConfigurationPropsTest.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.logging.log4j.core.config.xml;
 
+import static org.junit.Assert.assertTrue;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.config.Configuration;
@@ -25,8 +27,6 @@
 import org.junit.AfterClass;
 import org.junit.Test;
 
-import static org.junit.Assert.assertTrue;
-
 /**
  *
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/xml/XMLLoggerPropsTest.java
Patch:
@@ -16,6 +16,9 @@
  */
 package org.apache.logging.log4j.core.config.xml;
 
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
 import java.util.List;
 import java.util.Map;
 
@@ -31,9 +34,6 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-
 /**
  *
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/filter/MarkerFilterTest.java
Patch:
@@ -16,17 +16,17 @@
  */
 package org.apache.logging.log4j.core.filter;
 
+import static org.junit.Assert.assertTrue;
+
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.MarkerManager;
 import org.apache.logging.log4j.core.Filter;
-import org.apache.logging.log4j.core.impl.Log4jLogEvent;
 import org.apache.logging.log4j.core.LogEvent;
+import org.apache.logging.log4j.core.impl.Log4jLogEvent;
 import org.apache.logging.log4j.message.SimpleMessage;
 import org.junit.Test;
 
-import static org.junit.Assert.assertTrue;
-
 /**
  *
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/filter/ThreadContextMapFilterTest.java
Patch:
@@ -16,14 +16,14 @@
  */
 package org.apache.logging.log4j.core.filter;
 
+import static org.junit.Assert.assertTrue;
+
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.ThreadContext;
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.util.KeyValuePair;
 import org.junit.Test;
 
-import static org.junit.Assert.assertTrue;
-
 
 /**
  *

File: log4j-core/src/test/java/org/apache/logging/log4j/core/filter/ThresholdFilterTest.java
Patch:
@@ -16,15 +16,15 @@
  */
 package org.apache.logging.log4j.core.filter;
 
+import static org.junit.Assert.assertTrue;
+
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.core.Filter;
-import org.apache.logging.log4j.core.impl.Log4jLogEvent;
 import org.apache.logging.log4j.core.LogEvent;
+import org.apache.logging.log4j.core.impl.Log4jLogEvent;
 import org.apache.logging.log4j.message.SimpleMessage;
 import org.junit.Test;
 
-import static org.junit.Assert.assertTrue;
-
 /**
  *
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/helpers/CachedClockTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.logging.log4j.core.helpers;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertTrue;
 
 import org.apache.logging.log4j.core.util.CachedClock;
 import org.junit.Test;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/helpers/CharsetsTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.logging.log4j.core.helpers;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertSame;
 
 import java.nio.charset.Charset;
 import java.nio.charset.IllegalCharsetNameException;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/helpers/ClockFactoryTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.logging.log4j.core.helpers;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 
 import org.apache.logging.log4j.core.util.CachedClock;
 import org.apache.logging.log4j.core.util.Clock;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/helpers/SystemClockTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.logging.log4j.core.helpers;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertTrue;
 
 import org.apache.logging.log4j.core.util.SystemClock;
 import org.junit.Test;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/helpers/UUIDTest.java
Patch:
@@ -16,12 +16,12 @@
  */
 package org.apache.logging.log4j.core.helpers;
 
-import org.apache.logging.log4j.core.util.UUIDUtil;
-import org.junit.Test;
+import static org.junit.Assert.assertTrue;
 
 import java.util.UUID;
 
-import static org.junit.Assert.assertTrue;
+import org.apache.logging.log4j.core.util.UUIDUtil;
+import org.junit.Test;
 /**
  *
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/impl/Log4jLogEventTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.logging.log4j.core.impl;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -28,6 +28,7 @@
 import org.apache.logging.log4j.core.util.Clock;
 import org.apache.logging.log4j.core.util.ClockFactory;
 import org.apache.logging.log4j.message.SimpleMessage;
+import org.apache.logging.log4j.util.Strings;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/impl/ReflectionComparison.java
Patch:
@@ -16,15 +16,16 @@
  */
 package org.apache.logging.log4j.core.impl;
 
+import static org.junit.Assert.assertSame;
+
 import java.lang.reflect.Constructor;
 
 import org.apache.logging.log4j.core.Timer;
 import org.apache.logging.log4j.message.Message;
 import org.apache.logging.log4j.message.StringFormattedMessage;
 import org.junit.Test;
-import sun.reflect.Reflection;
 
-import static org.junit.Assert.assertSame;
+import sun.reflect.Reflection;
 
 /**
  * Tests the cost of invoking Reflection.getCallerClass via reflection vs calling it directly.

File: log4j-core/src/test/java/org/apache/logging/log4j/core/jackson/JacksonIssue429MyNamesTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.io.IOException;
 
+import org.apache.logging.log4j.util.Strings;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -29,7 +30,6 @@
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
-import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
 import com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer;
 import com.fasterxml.jackson.databind.module.SimpleModule;
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/jmx/ServerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.logging.log4j.core.jmx;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 
 import javax.management.ObjectName;
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutTest.java
Patch:
@@ -16,9 +16,11 @@
  */
 package org.apache.logging.log4j.core.layout;
 
-import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
+import java.util.Map;
 
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
@@ -37,8 +39,6 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import java.util.Map;
-
 /**
  *
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/lookup/ContextMapLookupTest.java
Patch:
@@ -16,12 +16,12 @@
  */
 package org.apache.logging.log4j.core.lookup;
 
-import org.apache.logging.log4j.ThreadContext;
-import org.junit.Test;
-
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 
+import org.apache.logging.log4j.ThreadContext;
+import org.junit.Test;
+
 /**
  *
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/lookup/EnvironmentLookupTest.java
Patch:
@@ -16,11 +16,11 @@
  */
 package org.apache.logging.log4j.core.lookup;
 
-import org.junit.Test;
-
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 
+import org.junit.Test;
+
 /**
  *
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/lookup/StructuredDataLookupTest.java
Patch:
@@ -16,16 +16,16 @@
  */
 package org.apache.logging.log4j.core.lookup;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.impl.Log4jLogEvent;
 import org.apache.logging.log4j.message.Message;
 import org.apache.logging.log4j.message.StructuredDataMessage;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
 /**
  *
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/lookup/SystemPropertiesLookupTest.java
Patch:
@@ -16,13 +16,13 @@
  */
 package org.apache.logging.log4j.core.lookup;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
 /**
  *
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/SocketTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.net.ServerSocket;
 import java.net.Socket;
 import java.util.concurrent.Callable;
-import java.util.concurrent.ExecutorService;
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/TcpJsonSocketServerTest.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.logging.log4j.core.LoggerContext;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 
 //@Ignore("Not implemented yet")
 public class TcpJsonSocketServerTest extends AbstractSocketServerTest {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/UdpJsonSocketServerTest.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.logging.log4j.core.LoggerContext;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 
 //@Ignore("Not implemented yet")
 public class UdpJsonSocketServerTest extends AbstractSocketServerTest {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/ssl/KeyStoreConfigurationTest.java
Patch:
@@ -16,11 +16,11 @@
  */
 package org.apache.logging.log4j.core.net.ssl;
 
+import java.security.KeyStore;
+
 import org.junit.Assert;
 import org.junit.Test;
 
-import java.security.KeyStore;
-
 public class KeyStoreConfigurationTest {
     @Test(expected = StoreConfigurationException.class)
     public void loadEmptyConfiguration() throws StoreConfigurationException {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/ssl/LegacyBSDTLSSyslogInputStreamReader.java
Patch:
@@ -21,6 +21,8 @@
 import java.io.IOException;
 import java.io.InputStream;
 
+import org.apache.logging.log4j.util.Strings;
+
 public class LegacyBSDTLSSyslogInputStreamReader extends TLSSyslogInputStreamReaderBase {
     private final ByteArrayOutputStream buffer;
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/ssl/TrustStoreConfigurationTest.java
Patch:
@@ -16,11 +16,11 @@
  */
 package org.apache.logging.log4j.core.net.ssl;
 
+import java.security.KeyStore;
+
 import org.junit.Assert;
 import org.junit.Test;
 
-import java.security.KeyStore;
-
 public class TrustStoreConfigurationTest {
     @Test(expected = StoreConfigurationException.class)
     public void loadEmptyConfiguration() throws StoreConfigurationException {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/pattern/MapPatternConverterTest.java
Patch:
@@ -16,15 +16,15 @@
  */
 package org.apache.logging.log4j.core.pattern;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.impl.Log4jLogEvent;
 import org.apache.logging.log4j.message.MapMessage;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
 /**
  *
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/pattern/MarkerPatternConverterTest.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.logging.log4j.core.pattern;
 
+import static org.junit.Assert.assertEquals;
+
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.MarkerManager;
@@ -25,8 +27,6 @@
 import org.apache.logging.log4j.message.StructuredDataMessage;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-
 /**
  *
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/pattern/MessagePatternConverterTest.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.logging.log4j.core.pattern;
 
+import static org.junit.Assert.assertTrue;
+
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.config.Configuration;
@@ -25,8 +27,6 @@
 import org.apache.logging.log4j.message.SimpleMessage;
 import org.junit.Test;
 
-import static org.junit.Assert.assertTrue;
-
 /**
  *
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/pattern/NameAbbreviatorTest.java
Patch:
@@ -16,10 +16,10 @@
  */
 package org.apache.logging.log4j.core.pattern;
 
-import org.junit.Test;
-
 import static org.junit.Assert.assertEquals;
 
+import org.junit.Test;
+
 /**
  *
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/pattern/RegexReplacementConverterTest.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.logging.log4j.core.pattern;
 
+import static org.junit.Assert.assertEquals;
+
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.ThreadContext;
@@ -26,8 +28,6 @@
 import org.apache.logging.log4j.message.SimpleMessage;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-
 /**
  *
  */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/util/Profiler.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.logging.log4j.core.util;
 
 import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.core.util.Loader;
 import org.apache.logging.log4j.status.StatusLogger;
+import org.apache.logging.log4j.util.Strings;
 
 /**
  * YourKit Java Profiler helper class.

File: log4j-core/src/test/java/org/apache/logging/log4j/test/appender/FailOnceAppender.java
Patch:
@@ -16,16 +16,16 @@
  */
 package org.apache.logging.log4j.test.appender;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import org.apache.logging.log4j.LoggingException;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.appender.AbstractAppender;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
 
-import java.util.ArrayList;
-import java.util.List;
-
 /**
  *
  */

File: log4j-core/src/main/java/org/apache/logging/log4j/core/LogEventListener.java
Patch:
@@ -29,7 +29,7 @@ protected LogEventListener() {
         context = (LoggerContext) LogManager.getContext(false);
     }
 
-    protected void log(final LogEvent event) {
+    public void log(final LogEvent event) {
         if (event == null) {
             return;
         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java
Patch:
@@ -69,7 +69,7 @@ public void format(final LogEvent event, final StringBuilder toAppendTo) {
                 super.format(event, toAppendTo);
                 return;
             }
-            final String trace = proxy.getExtendedStackTrace(options.getPackages());
+            final String trace = proxy.getExtendedStackTraceAsString(options.getPackages());
             final int len = toAppendTo.length();
             if (len > 0 && !Character.isWhitespace(toAppendTo.charAt(len - 1))) {
                 toAppendTo.append(' ');

File: log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/RootThrowablePatternConverter.java
Patch:
@@ -69,7 +69,7 @@ public void format(final LogEvent event, final StringBuilder toAppendTo) {
                 super.format(event, toAppendTo);
                 return;
             }
-            final String trace = proxy.getRootCauseStackTrace(options.getPackages());
+            final String trace = proxy.getCauseStackTraceAsString(options.getPackages());
             final int len = toAppendTo.length();
             if (len > 0 && !Character.isWhitespace(toAppendTo.charAt(len - 1))) {
                 toAppendTo.append(' ');

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/XmlFileAppenderTest.java
Patch:
@@ -66,15 +66,15 @@ public void testFlushAtEndOfBatch() throws Exception {
         assertNotNull("line1", line1);
 
         assertNotNull("line1", line1);
-        final String msg1 = "<log4j:Event ";
+        final String msg1 = "<Event ";
         assertTrue("line1 incorrect: [" + line1 + "], does not contain: [" + msg1 + ']', line1.contains(msg1));
 
         assertNotNull("line2", line2);
         final String msg2 = logMsg;
         assertTrue("line2 incorrect: [" + line2 + "], does not contain: [" + msg2 + ']', line2.contains(msg2));
 
         assertNotNull("line3", line3);
-        final String msg3 = "</log4j:Event>";
+        final String msg3 = "</Event>";
         assertTrue("line3 incorrect: [" + line3 + "], does not contain: [" + msg3 + ']', line3.contains(msg3));
 
         final String location = "testFlushAtEndOfBatch";

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rewrite/MapRewritePolicyTest.java
Patch:
@@ -140,7 +140,7 @@ private void compareLogEvents(final LogEvent orig, final LogEvent changed) {
         Assert.assertEquals("Marker changed", orig.getMarker(), changed.getMarker());
         Assert.assertEquals("FQCN changed", orig.getLoggerFQCN(), changed.getLoggerFQCN());
         Assert.assertEquals("Level changed", orig.getLevel(), changed.getLevel());
-        Assert.assertEquals("Throwable changed", orig.getThrown() == null //
+        Assert.assertArrayEquals("Throwable changed", orig.getThrown() == null //
                 ? null //
                 : ((Log4jLogEvent) orig).getThrownProxy().getExtendedStackTrace(), //
                 changed.getThrown() == null //

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/UdpSerializedSocketServerTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-package org.apache.logging.log4j.core.net;
+package org.apache.logging.log4j.core.net.server;
 
 import java.io.ObjectInputStream;
 import java.io.Serializable;
@@ -26,8 +26,6 @@
 import org.junit.BeforeClass;
 
 public class UdpSerializedSocketServerTest extends AbstractSocketServerTest {
-    private static final String PORT = "8199";
-    private static final int PORT_NUM = Integer.parseInt(PORT);
     private static Thread thread;
     private static UDPSocketServer<ObjectInputStream> udpSocketServer;
 

File: log4j-api/src/main/java/org/apache/logging/log4j/Level.java
Patch:
@@ -204,7 +204,7 @@ public static Level forName(final String name, final int intValue) {
     }
 
     /**
-     * Return the Level assoicated with the name or null if the Level cannot be found.
+     * Return the Level associated with the name or null if the Level cannot be found.
      * @param name The name of the Level.
      * @return The Level or null.
      */

File: log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jMarker.java
Patch:
@@ -71,6 +71,7 @@ public boolean hasChildren() {
     }
 
     @Override
+    @SuppressWarnings("rawtypes")
     public Iterator iterator() {
         List<Marker> parents = new ArrayList<Marker>();
         for (org.apache.logging.log4j.Marker m : this.marker.getParents()) {

File: log4j-api/src/main/java/org/apache/logging/log4j/MarkerManager.java
Patch:
@@ -155,6 +155,7 @@ public synchronized boolean remove(final Marker parent) {
                     if (index == localParentsLength - 1) {
                         return false;
                     }
+                    // FIXME: buffer overflow
                     markers[index++] = marker;
                 }
             }

File: log4j-api/src/main/java/org/apache/logging/log4j/MarkerManager.java
Patch:
@@ -56,7 +56,9 @@ public static Marker getMarker(final String name, final String parent) {
         if (parentMarker == null) {
             throw new IllegalArgumentException("Parent Marker " + parent + " has not been defined");
         }
-        return getMarker(name, parentMarker);
+        @SuppressWarnings("deprecation")
+        final Marker marker = getMarker(name, parentMarker);
+        return marker;
     }
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java
Patch:
@@ -101,7 +101,7 @@ static ThreadNameStrategy create() {
             try {
                 return ThreadNameStrategy.valueOf(name);
             } catch (final Exception ex) {
-                LOGGER.catching(Level.DEBUG, ex);
+                LOGGER.debug("Using AsyncLogger.ThreadNameStrategy.CACHED: '{}' not valid: {}", name, ex.toString());
                 return CACHED;
             }
         }

File: log4j-camel/src/main/java/org/apache/logging/log4j/camel/LogEndpoint.java
Patch:
@@ -26,8 +26,7 @@
 import org.apache.camel.util.ServiceHelper;
 
 /**
- * @author msicker
- * @version 1.0.0
+ * Camel Endpoint for logging to Log4j.
  */
 @UriEndpoint(scheme = "log4j")
 public class LogEndpoint extends ProcessorEndpoint {

File: log4j-camel/src/test/java/org/apache/logging/log4j/camel/LogEndpointTest.java
Patch:
@@ -6,8 +6,7 @@
 import org.apache.camel.component.mock.MockEndpoint;
 
 /**
- * @author msicker
- * @version 1.0.0
+ *
  */
 public class LogEndpointTest extends ContextTestSupport {
 

File: log4j-camel/src/test/java/org/apache/logging/log4j/camel/LogInputStreamTest.java
Patch:
@@ -24,8 +24,7 @@
 import org.apache.camel.component.mock.MockEndpoint;
 
 /**
- * @author msicker
- * @version 1.0.0
+ *
  */
 public class LogInputStreamTest extends ContextTestSupport {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/helpers/ClockFactory.java
Patch:
@@ -76,7 +76,7 @@ private static Clock createClock() {
         }
         try {
             final Clock result = Loader.newCheckedInstanceOf(userRequest, Clock.class);
-            LOGGER.debug("Using {} for timestamps", userRequest);
+            LOGGER.debug("Using {} for timestamps", result.getClass().getName());
             return result;
         } catch (final Exception e) {
             final String fmt = "Could not create {}: {}, using default SystemClock for timestamps";

File: log4j-api/src/test/java/org/apache/logging/log4j/osgi/BundleTestInfo.java
Patch:
@@ -65,7 +65,7 @@ public BundleTestInfo() {
 
     /**
      * Gets the Maven artifact ID.
-     * 
+     *
      * @return the Maven artifact ID.
      */
     public String getArtifactId() {
@@ -74,11 +74,11 @@ public String getArtifactId() {
 
     /**
      * Gets the Maven version String.
-     * 
+     *
      * @return the Maven version String.
      */
     public String getVersion() {
-        return project.getVersion();
+        return project.getProperties().getProperty("project.version.osgi");
     }
 
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/nosql/couchdb/CouchDBProvider.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.appender.AbstractAppender;
 import org.apache.logging.log4j.core.appender.db.nosql.NoSQLProvider;
+import org.apache.logging.log4j.core.config.plugins.SensitivePluginAttribute;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
@@ -86,7 +87,7 @@ public static CouchDBProvider createNoSQLProvider(
             @PluginAttribute("server") String server,
             @PluginAttribute("port") final String port,
             @PluginAttribute("username") final String username,
-            @PluginAttribute("password") final String password,
+            @SensitivePluginAttribute("password") final String password,
             @PluginAttribute("factoryClassName") final String factoryClassName,
             @PluginAttribute("factoryMethodName") final String factoryMethodName) {
         CouchDbClient client;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/nosql/mongodb/MongoDBProvider.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.appender.AbstractAppender;
 import org.apache.logging.log4j.core.appender.db.nosql.NoSQLProvider;
+import org.apache.logging.log4j.core.config.plugins.SensitivePluginAttribute;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
@@ -97,7 +98,7 @@ public static MongoDBProvider createNoSQLProvider(
             @PluginAttribute("server") final String server,
             @PluginAttribute("port") final String port,
             @PluginAttribute("username") final String username,
-            @PluginAttribute("password") final String password,
+            @SensitivePluginAttribute("password") final String password,
             @PluginAttribute("factoryClassName") final String factoryClassName,
             @PluginAttribute("factoryMethodName") final String factoryMethodName) {
         DB database;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java
Patch:
@@ -104,7 +104,7 @@ static ThreadNameStrategy create() {
             try {
                 return ThreadNameStrategy.valueOf(name);
             } catch (final Exception ex) {
-                LOGGER.catching(ex);
+                LOGGER.catching(Level.DEBUG, ex);
                 return CACHED;
             }
         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/PluginManager.java
Patch:
@@ -35,6 +35,7 @@
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.CopyOnWriteArrayList;
 
+import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.helpers.Closer;
 import org.apache.logging.log4j.core.helpers.Loader;
@@ -250,7 +251,7 @@ private static ConcurrentMap<String, ConcurrentMap<String, PluginType<?>>> decod
                             final PluginType<?> pluginType = loadPluginType(className, name, printable, defer);
                             types.put(key, pluginType);
                         } catch (final ClassNotFoundException e) {
-                            LOGGER.catching(e);
+                            LOGGER.catching(Level.DEBUG, e);
                             LOGGER.info("Plugin [{}] could not be loaded due to missing classes.", className);
                         }
                     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/TLSSocketManager.java
Patch:
@@ -27,6 +27,7 @@
 import javax.net.ssl.SSLSocket;
 import javax.net.ssl.SSLSocketFactory;
 
+import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.appender.ManagerFactory;
 import org.apache.logging.log4j.core.helpers.Strings;
@@ -136,7 +137,7 @@ public TLSSocketManager createManager(final String name, final TLSFactoryData da
                 os = new ByteArrayOutputStream();
             }
             catch (final TLSSocketManagerFactoryException e) {
-                LOGGER.catching(e);
+                LOGGER.catching(Level.DEBUG, e);
                 return null;
             }
             return createManager(name, os, socket, data.sslConfig, address, data.host, data.port, data.delay, data.immediateFail, data.layout);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/ResolverUtil.java
Patch:
@@ -307,7 +307,8 @@ private void loadImplementationsInBundle(final Test test, final String packageNa
         @SuppressWarnings("RedundantCast")
         final BundleWiring wiring = (BundleWiring) FrameworkUtil.getBundle(
                 ResolverUtil.class).adapt(BundleWiring.class);
-        final Collection<String> list = wiring.listResources(packageName, "*.class",
+        @SuppressWarnings("unchecked")
+        final Collection<String> list = (Collection<String>) wiring.listResources(packageName, "*.class",
             BundleWiring.LISTRESOURCES_RECURSE);
         for (final String name : list) {
             addIfMatching(test, name);

File: log4j-plugin-processor/src/test/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessorTest.java
Patch:
@@ -18,8 +18,7 @@
 package org.apache.logging.log4j.core.config.plugins.processor;
 
 import java.io.BufferedInputStream;
-import java.io.ObjectInput;
-import java.io.ObjectInputStream;
+import java.io.DataInputStream;
 import java.net.URL;
 import java.util.Enumeration;
 import java.util.concurrent.ConcurrentHashMap;
@@ -51,7 +50,7 @@ public static void setUpClass() throws Exception {
         final Enumeration<URL> resources = PluginProcessor.class.getClassLoader().getResources(CACHE_FILE);
         while (resources.hasMoreElements()) {
             final URL url = resources.nextElement();
-            final ObjectInput in = new ObjectInputStream(new BufferedInputStream(url.openStream()));
+            final DataInputStream in = new DataInputStream(new BufferedInputStream(url.openStream()));
             try {
                 final int count = in.readInt();
                 for (int i = 0; i < count; i++) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/nosql/mongodb/MongoDBConnection.java
Patch:
@@ -89,7 +89,9 @@ public void insertObject(final NoSQLObject<BasicDBObject> object) {
 
     @Override
     public void close() {
-        this.mongo.close();
+        // there's no need to call this.mongo.close() since that literally closes the connection
+        // MongoDBClient uses internal connection pooling
+        // for more details, see LOG4J2-591
     }
 
     @Override

File: log4j-plugin-processor/src/test/java/org/apache/logging/log4j/core/config/plugins/processor/FakePlugin.java
Patch:
@@ -21,8 +21,7 @@
 import org.apache.logging.log4j.core.config.plugins.PluginAliases;
 
 /**
- * @author msicker
- * @version 1.0.0
+ * Test plugin class for unit tests.
  */
 @Plugin(name = "Fake", category = "Test")
 @PluginAliases({"AnotherFake", "StillFake"})

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
Patch:
@@ -112,8 +112,6 @@ public abstract class ConfigurationFactory {
      * @return the ConfigurationFactory.
      */
     public static ConfigurationFactory getInstance() {
-        // FIXME: double-checked locking is unsafe
-        // http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html
         if (factories == null) {
             synchronized(TEST_PREFIX) {
                 if (factories == null) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
Patch:
@@ -112,6 +112,8 @@ public abstract class ConfigurationFactory {
      * @return the ConfigurationFactory.
      */
     public static ConfigurationFactory getInstance() {
+        // FIXME: double-checked locking is unsafe
+        // http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html
         if (factories == null) {
             synchronized(TEST_PREFIX) {
                 if (factories == null) {

File: log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/EventDataConverter.java
Patch:
@@ -14,7 +14,7 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-package org.slf4j.helpers;
+package org.apache.logging.slf4j;
 
 import java.util.Map;
 

File: log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLoggerFactory.java
Patch:
@@ -14,7 +14,7 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-package org.slf4j.helpers;
+package org.apache.logging.slf4j;
 
 import java.util.Map;
 import java.util.WeakHashMap;
@@ -27,7 +27,6 @@
 import org.slf4j.ILoggerFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.slf4j.impl.SLF4JLogger;
 
 /**
  *
@@ -49,7 +48,7 @@ public Logger getLogger(final String name) {
             return loggers.get(name);
         }
         final String key = Logger.ROOT_LOGGER_NAME.equals(name) ? LogManager.ROOT_LOGGER_NAME : name;
-        loggers.putIfAbsent(name, new SLF4JLogger(context.getLogger(key), name));
+        loggers.putIfAbsent(name, new Log4j2Logger(context.getLogger(key), name));
         return loggers.get(name);
     }
 

File: log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jMDCAdapter.java
Patch:
@@ -14,7 +14,7 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-package org.slf4j.helpers;
+package org.apache.logging.slf4j;
 
 import java.util.Map;
 

File: log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jMarkerFactory.java
Patch:
@@ -14,13 +14,14 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-package org.slf4j.helpers;
+package org.apache.logging.slf4j;
 
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
 import org.slf4j.IMarkerFactory;
 import org.slf4j.Marker;
+import org.slf4j.helpers.MarkerWrapper;
 
 /**
  *

File: log4j-slf4j-impl/src/main/java/org/slf4j/impl/StaticLoggerBinder.java
Patch:
@@ -17,11 +17,12 @@
 package org.slf4j.impl;
 
 import org.slf4j.ILoggerFactory;
-import org.slf4j.helpers.Log4jLoggerFactory;
+import org.apache.logging.slf4j.Log4jLoggerFactory;
 import org.slf4j.spi.LoggerFactoryBinder;
 
 /**
- *
+ * SLF4J LoggerFactoryBinder implementation using Log4j. This class is part of the required classes used to specify an
+ * SLF4J logger provider implementation.
  */
 public final class StaticLoggerBinder implements LoggerFactoryBinder {
 

File: log4j-slf4j-impl/src/main/java/org/slf4j/impl/StaticMDCBinder.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.slf4j.impl;
 
-import org.slf4j.helpers.Log4jMDCAdapter;
+import org.apache.logging.slf4j.Log4jMDCAdapter;
 import org.slf4j.spi.MDCAdapter;
 
 /**

File: log4j-slf4j-impl/src/main/java/org/slf4j/impl/StaticMarkerBinder.java
Patch:
@@ -17,11 +17,12 @@
 package org.slf4j.impl;
 
 import org.slf4j.IMarkerFactory;
-import org.slf4j.helpers.Log4jMarkerFactory;
+import org.apache.logging.slf4j.Log4jMarkerFactory;
 import org.slf4j.spi.MarkerFactoryBinder;
 
 /**
- *
+ * SLF4J MarkerFactoryBinder implementation using Log4j. This class is part of the required classes used to specify an
+ * SLF4J logging provider implementation.
  */
 public class StaticMarkerBinder implements MarkerFactoryBinder {
 

File: log4j-slf4j-impl/src/test/java/org/apache/logging/slf4j/LoggerTest.java
Patch:
@@ -42,7 +42,6 @@
 import org.slf4j.ext.EventLogger;
 import org.slf4j.ext.XLogger;
 import org.slf4j.ext.XLoggerFactory;
-import org.slf4j.impl.SLF4JLogger;
 import org.slf4j.spi.LocationAwareLogger;
 
 /**
@@ -114,7 +113,7 @@ public void debugNoParms() {
         verify("List", "o.a.l.s.LoggerTest Debug message {} MDC{}" + Constants.LINE_SEP);
         logger.debug("Debug message {}", (Object[]) null);
         verify("List", "o.a.l.s.LoggerTest Debug message {} MDC{}" + Constants.LINE_SEP);
-        ((LocationAwareLogger)logger).log(null, SLF4JLogger.class.getName(), LocationAwareLogger.DEBUG_INT,
+        ((LocationAwareLogger)logger).log(null, Log4j2Logger.class.getName(), LocationAwareLogger.DEBUG_INT,
             "Debug message {}", null, null);
         verify("List", "o.a.l.s.LoggerTest Debug message {} MDC{}" + Constants.LINE_SEP);
     }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java
Patch:
@@ -152,7 +152,7 @@ static class Stats {
         long _pct99_99;
         double _latencyRowCount;
         int _throughputRowCount;
-        private final long _averageOpsPerSec;
+        private long _averageOpsPerSec;
 
         // example line: avg=828 99%=1118 99.99%=5028 Count=3125
         public Stats(final String raw) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/AbstractLogEventInput.java
Patch:
@@ -22,10 +22,12 @@
 /**
  * Abstract class for implementations of {@link LogEventInput}.
  * 
- * @param <T>
+ * @param <T> The kind of input stream read
  */
 public abstract class AbstractLogEventInput<T extends InputStream> implements LogEventInput<T> {
 
+    // @SuppressWarnings("unchecked"): The default is to return the same object as given.
+    @SuppressWarnings("unchecked")
     @Override
     public T wrapStream(final InputStream inputStream) throws IOException {
         return (T) inputStream;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/TcpJsonSocketServerTest.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.logging.log4j.core.net;
 
+import java.io.InputStream;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LoggerContext;
@@ -27,7 +29,7 @@
 public class TcpJsonSocketServerTest extends AbstractSocketServerTest {
     private static final String PORT = "8198";
     private static final int PORT_NUM = Integer.parseInt(PORT);
-    private static TCPSocketServer tcpSocketServer;
+    private static TCPSocketServer<InputStream> tcpSocketServer;
 
     private static Thread thread;
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/TcpSerializedSocketServerTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.log4j.core.net;
 
+import java.io.ObjectInputStream;
 import java.io.Serializable;
 
 import org.apache.logging.log4j.LogManager;
@@ -27,7 +28,7 @@
 public class TcpSerializedSocketServerTest extends AbstractSocketServerTest {
     private static final String PORT = "8198";
     private static final int PORT_NUM = Integer.parseInt(PORT);
-    private static TCPSocketServer tcpSocketServer;
+    private static TCPSocketServer<ObjectInputStream> tcpSocketServer;
 
     private static Thread thread;
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/TcpXmlSocketServerTest.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.logging.log4j.core.net;
 
+import java.io.InputStream;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LoggerContext;
@@ -27,7 +29,7 @@
 public class TcpXmlSocketServerTest extends AbstractSocketServerTest {
     private static final String PORT = "8198";
     private static final int PORT_NUM = Integer.parseInt(PORT);
-    private static TCPSocketServer tcpSocketServer;
+    private static TCPSocketServer<InputStream> tcpSocketServer;
 
     private static Thread thread;
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/UdpJsonSocketServerTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.log4j.core.net;
 
+import java.io.InputStream;
 import java.io.Serializable;
 
 import org.apache.logging.log4j.LogManager;
@@ -30,8 +31,7 @@ public class UdpJsonSocketServerTest extends AbstractSocketServerTest {
     private static final String PORT = "8199";
     private static final int PORT_NUM = Integer.parseInt(PORT);
     private static Thread thread;
-
-    private static UDPSocketServer udpSocketServer;
+    private static UDPSocketServer<InputStream> udpSocketServer;
 
     @BeforeClass
     public static void setupClass() throws Exception {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/UdpSerializedSocketServerTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.log4j.core.net;
 
+import java.io.ObjectInputStream;
 import java.io.Serializable;
 
 import org.apache.logging.log4j.LogManager;
@@ -28,8 +29,7 @@ public class UdpSerializedSocketServerTest extends AbstractSocketServerTest {
     private static final String PORT = "8199";
     private static final int PORT_NUM = Integer.parseInt(PORT);
     private static Thread thread;
-
-    private static UDPSocketServer udpSocketServer;
+    private static UDPSocketServer<ObjectInputStream> udpSocketServer;
 
     @BeforeClass
     public static void setupClass() throws Exception {

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/UdpXmlSocketServerTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.log4j.core.net;
 
+import java.io.InputStream;
 import java.io.Serializable;
 
 import org.apache.logging.log4j.LogManager;
@@ -30,8 +31,7 @@ public class UdpXmlSocketServerTest extends AbstractSocketServerTest {
     private static final String PORT = "8199";
     private static final int PORT_NUM = Integer.parseInt(PORT);
     private static Thread thread;
-
-    private static UDPSocketServer udpSocketServer;
+    private static UDPSocketServer<InputStream> udpSocketServer;
 
     @BeforeClass
     public static void setupClass() throws Exception {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/UDPSocketServer.java
Patch:
@@ -140,7 +140,7 @@ public void run() {
                 final DatagramPacket packet = new DatagramPacket(buf, buf.length);
                 datagramSocket.receive(packet);
                 final ByteArrayInputStream bais = new ByteArrayInputStream(packet.getData(), packet.getOffset(), packet.getLength());
-                log(logEventInput.readLogEvent(bais));
+                log(logEventInput.readLogEvent(logEventInput.wrapStream(bais)));
             } catch (final OptionalDataException e) {
                 logger.error("OptionalDataException eof=" + e.eof + " length=" + e.length, e);
             } catch (final EOFException e) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/JSONLogEventInput.java
Patch:
@@ -28,7 +28,7 @@ public class JSONLogEventInput extends AbstractLogEventInput<InputStream> {
 
     @Override
     public LogEvent readLogEvent(InputStream inputStream) throws IOException {
-        throw new UnsupportedOperationException("Not  implemented yet");
+        throw new UnsupportedOperationException("Not implemented yet");
     }
 
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/XMLLogEventInput.java
Patch:
@@ -28,7 +28,7 @@ public class XMLLogEventInput extends AbstractLogEventInput<InputStream> {
 
     @Override
     public LogEvent readLogEvent(InputStream inputStream) throws IOException {
-        throw new UnsupportedOperationException("Not  implemented yet");
+        throw new UnsupportedOperationException("Not implemented yet");
     }
 
 }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/TCPSocketServerTest.java
Patch:
@@ -24,14 +24,14 @@
 public class TCPSocketServerTest extends AbstractSocketServerTest {
     private static final String PORT = "8198";
     private static final int PORT_NUM = Integer.parseInt(PORT);
-    private static SocketServer tcpSocketServer;
+    private static TCPSocketServer tcpSocketServer;
 
     private static Thread thread;
 
     @BeforeClass
     public static void setupClass() throws Exception {
         ((LoggerContext) LogManager.getContext(false)).reconfigure();
-        tcpSocketServer = new SocketServer(PORT_NUM);
+        tcpSocketServer = new TCPSocketServer(PORT_NUM);
         thread = new Thread(tcpSocketServer);
         thread.start();
     }

File: log4j-api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java
Patch:
@@ -192,7 +192,7 @@ public void logMessage(final String fqcn, final Level level, final Marker marker
         }
         if (listeners.size() > 0) {
             for (final StatusListener listener : listeners) {
-                if (data.getLevel().isAtLeastAsSpecificAs(listener.getStatusLevel())) {
+                if (data.getLevel().isMoreSpecificThan(listener.getStatusLevel())) {
                     listener.log(data);
                 }
             }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java
Patch:
@@ -118,7 +118,7 @@ public Result filter(final LogEvent event) {
      * @return The onMatch value if the filter passes, onMismatch otherwise.
      */
     private Result filter(final Level level) {
-        if (this.level.isAtLeastAsSpecificAs(level)) {
+        if (this.level.isMoreSpecificThan(level)) {
             LogDelay delay = history.poll();
             while (delay != null) {
                 available.add(delay);

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java
Patch:
@@ -85,7 +85,7 @@ private Result filter(final Level level) {
             if (ctxLevel == null) {
                 ctxLevel = defaultThreshold;
             }
-            return level.isAtLeastAsSpecificAs(ctxLevel) ? onMatch : onMismatch;
+            return level.isMoreSpecificThan(ctxLevel) ? onMatch : onMismatch;
         }
         return Result.NEUTRAL;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/filter/ThresholdFilter.java
Patch:
@@ -67,7 +67,7 @@ public Result filter(final LogEvent event) {
     }
 
     private Result filter(final Level level) {
-        return level.isAtLeastAsSpecificAs(this.level) ? onMatch : onMismatch;
+        return level.isMoreSpecificThan(this.level) ? onMatch : onMismatch;
     }
 
     @Override

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HTMLLayout.java
Patch:
@@ -135,7 +135,7 @@ public String toSerializable(final LogEvent event) {
             sbuf.append("<font color=\"#339933\">");
             sbuf.append(Transform.escapeHtmlTags(String.valueOf(event.getLevel())));
             sbuf.append("</font>");
-        } else if (event.getLevel().isAtLeastAsSpecificAs(Level.WARN)) {
+        } else if (event.getLevel().isMoreSpecificThan(Level.WARN)) {
             sbuf.append("<font color=\"#993300\"><strong>");
             sbuf.append(Transform.escapeHtmlTags(String.valueOf(event.getLevel())));
             sbuf.append("</strong></font>");

File: log4j-api/src/main/java/org/apache/logging/log4j/Level.java
Patch:
@@ -153,7 +153,7 @@ public boolean isAtLeastAsSpecificAs(final int level) {
      * @return True if the given Level is less specific or the same than this Level.
      */
     public boolean isGreaterOrEqual(final int level) {
-        return this.intLevel >= level;
+        return this.intLevel <= level;
     }
 
     /**
@@ -163,7 +163,7 @@ public boolean isGreaterOrEqual(final int level) {
      * @return True if the given Level is less specific or the same than this Level.
      */
     public boolean isGreaterOrEqual(final Level level) {
-        return this.intLevel >= level.intLevel;
+        return this.intLevel <= level.intLevel;
     }
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
Patch:
@@ -56,7 +56,7 @@
  * A ConfigurationFactory implementation can be added to the classpath and
  * configured as a plugin. The Order annotation should be used to configure the
  * factory to be the first one inspected. See
- * {@linkplain XMLConfigurationFactory} for an example.</li>
+ * {@linkplain org.apache.logging.log4j.core.config.xml.XMLConfigurationFactory} for an example.</li>
  * </ol>
  *
  * If the ConfigurationFactory that was added returns null on a call to

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultConfiguration.java
Patch:
@@ -31,7 +31,7 @@
  * specify the property, Log4j uses the ERROR Level. Log Events will be printed using the basic formatting provided
  * by each Message.
  */
-public class DefaultConfiguration extends BaseConfiguration {
+public class DefaultConfiguration extends AbstractConfiguration {
 
     /**
      * The name of the default configuration.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/NullConfiguration.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * This configuration defaults to no logging.
  */
-public class NullConfiguration extends BaseConfiguration {
+public class NullConfiguration extends AbstractConfiguration {
 
     public static final String NULL_NAME = "Null";
 
@@ -31,4 +31,5 @@ public NullConfiguration() {
         final LoggerConfig root = getRootLogger();
         root.setLevel(Level.OFF);
     }
+
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/yaml/YAMLConfiguration.java
Patch:
@@ -14,11 +14,13 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-package org.apache.logging.log4j.core.config;
+package org.apache.logging.log4j.core.config.yaml;
 
 import com.fasterxml.jackson.core.JsonParser;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
+import org.apache.logging.log4j.core.config.ConfigurationFactory;
+import org.apache.logging.log4j.core.config.json.JSONConfiguration;
 
 public class YAMLConfiguration extends JSONConfiguration {
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/SocketServer.java
Patch:
@@ -41,8 +41,8 @@
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.ConfigurationFactory;
-import org.apache.logging.log4j.core.config.XMLConfiguration;
-import org.apache.logging.log4j.core.config.XMLConfigurationFactory;
+import org.apache.logging.log4j.core.config.xml.XMLConfiguration;
+import org.apache.logging.log4j.core.config.xml.XMLConfigurationFactory;
 
 /**
  * Listens for events over a socket connection.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/UDPSocketServer.java
Patch:
@@ -38,8 +38,8 @@
 import org.apache.logging.log4j.core.LogEventListener;
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.ConfigurationFactory;
-import org.apache.logging.log4j.core.config.XMLConfiguration;
-import org.apache.logging.log4j.core.config.XMLConfigurationFactory;
+import org.apache.logging.log4j.core.config.xml.XMLConfiguration;
+import org.apache.logging.log4j.core.config.xml.XMLConfigurationFactory;
 
 /**
  * Listens for events over a socket connection.

File: log4j-core/src/test/java/org/apache/logging/log4j/core/LateConfigTest.java
Patch:
@@ -16,15 +16,16 @@
  */
 package org.apache.logging.log4j.core;
 
+import java.io.File;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.DefaultConfiguration;
-import org.apache.logging.log4j.core.config.XMLConfiguration;
+import org.apache.logging.log4j.core.config.xml.XMLConfiguration;
 import org.apache.logging.log4j.test.appender.ListAppender;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import java.io.File;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/config/CustomConfigurationTest.java
Patch:
@@ -16,21 +16,21 @@
  */
 package org.apache.logging.log4j.core.config;
 
+import java.io.File;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.appender.FileAppender;
-import org.apache.logging.log4j.core.helpers.Constants;
+import org.apache.logging.log4j.core.config.xml.XMLConfiguration;
 import org.apache.logging.log4j.core.layout.PatternLayout;
 import org.apache.logging.log4j.status.StatusLogger;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import java.io.File;
-
 import static org.junit.Assert.assertTrue;
 
 /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java
Patch:
@@ -139,7 +139,8 @@ private static WaitStrategy createWaitStrategy() {
         } else if ("Block".equals(strategy)) {
             return new BlockingWaitStrategy();
         }
-        return new SleepingWaitStrategy();
+        LOGGER.debug("disruptor event handler uses BlockingWaitStrategy");
+        return new BlockingWaitStrategy();
     }
 
     private static int calculateRingBufferSize() {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/BaseConfiguration.java
Patch:
@@ -70,6 +70,9 @@
  * The Base Configuration. Many configuration implementations will extend this class.
  */
 public class BaseConfiguration extends AbstractFilterable implements Configuration {
+    
+    static final String PACKAGE_SEPARATOR = "\\s*,\\s*";
+
     /**
      * Allow subclasses access to the status logger without creating another instance.
      */

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/JSONConfiguration.java
Patch:
@@ -37,6 +37,7 @@
 import org.apache.logging.log4j.core.config.plugins.PluginType;
 import org.apache.logging.log4j.core.config.plugins.ResolverUtil;
 import org.apache.logging.log4j.core.helpers.FileUtils;
+import org.apache.logging.log4j.core.helpers.Patterns;
 import org.apache.logging.log4j.status.StatusConsoleListener;
 import org.apache.logging.log4j.status.StatusListener;
 import org.apache.logging.log4j.status.StatusLogger;
@@ -109,7 +110,7 @@ public JSONConfiguration(final ConfigurationFactory.ConfigurationSource configSo
                 } else if ("verbose".equalsIgnoreCase(entry.getKey())) {
                     verbose = Boolean.parseBoolean(getStrSubstitutor().replace(entry.getValue()));
                 } else if ("packages".equalsIgnoreCase(entry.getKey())) {
-                    final String[] packages = getStrSubstitutor().replace(entry.getValue()).split(",");
+                    final String[] packages = getStrSubstitutor().replace(entry.getValue()).split(Patterns.COMMA_SEPARATOR);
                     for (final String p : packages) {
                         PluginManager.addPackage(p);
                     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/XMLConfiguration.java
Patch:
@@ -47,6 +47,7 @@
 import org.apache.logging.log4j.core.config.plugins.PluginType;
 import org.apache.logging.log4j.core.config.plugins.ResolverUtil;
 import org.apache.logging.log4j.core.helpers.FileUtils;
+import org.apache.logging.log4j.core.helpers.Patterns;
 import org.apache.logging.log4j.status.StatusConsoleListener;
 import org.apache.logging.log4j.status.StatusListener;
 import org.apache.logging.log4j.status.StatusLogger;
@@ -178,7 +179,7 @@ public XMLConfiguration(final ConfigurationFactory.ConfigurationSource configSou
                 } else if ("verbose".equalsIgnoreCase(entry.getKey())) {
                     verbose = Boolean.parseBoolean(getStrSubstitutor().replace(entry.getValue()));
                 } else if ("packages".equalsIgnoreCase(getStrSubstitutor().replace(entry.getKey()))) {
-                    final String[] packages = entry.getValue().split(",");
+                    final String[] packages = entry.getValue().split(Patterns.COMMA_SEPARATOR);
                     for (final String p : packages) {
                         PluginManager.addPackage(p);
                     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/PluginManager.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.helpers.Closer;
 import org.apache.logging.log4j.core.helpers.Loader;
+import org.apache.logging.log4j.core.helpers.Patterns;
 import org.apache.logging.log4j.status.StatusLogger;
 
 /**
@@ -163,7 +164,7 @@ public void collectPlugins(boolean preLoad, final String pkgs) {
                     PACKAGES.add(LOG4J_PACKAGES);
                 }
             } else {
-                final String[] names = pkgs.split(",");
+                final String[] names = pkgs.split(Patterns.COMMA_SEPARATOR);
                 for (final String name : names) {
                     PACKAGES.add(name);
                 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java
Patch:
@@ -71,6 +71,8 @@ public Interpolator(Map<String, String> properties) {
         lookups.put("sys", new SystemPropertiesLookup());
         lookups.put("env", new EnvironmentLookup());
         lookups.put("jndi", new JndiLookup());
+        lookups.put("date", new DateLookup());
+        lookups.put("ctx", new ContextMapLookup());
         try {
             if (Class.forName("javax.servlet.ServletContext") != null) {
                 lookups.put("web", new WebLookup());

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java
Patch:
@@ -300,14 +300,14 @@ public RollingFileManager createManager(final String name, final FactoryData dat
                 return null;
             }
             final long size = data.append ? file.length() : 0;
-            final long time = file.lastModified();
 
             OutputStream os;
             try {
                 os = new FileOutputStream(name, data.append);
                 if (data.bufferedIO) {
                     os = new BufferedOutputStream(os);
                 }
+                final long time = file.lastModified(); // LOG4J2-531 create file first so time has valid value
                 return new RollingFileManager(name, data.pattern, os, data.append, size, time, data.policy,
                     data.strategy, data.advertiseURI, data.layout);
             } catch (final FileNotFoundException ex) {

File: log4j-1.2-api/src/main/java/org/apache/log4j/PropertyConfigurator.java
Patch:
@@ -63,7 +63,7 @@ public void doConfigure(final InputStream inputStream, final LoggerRepository hi
      * @param configURL The configuration URL
      * @param hierarchy The hierarchy
      */
-    public void doConfigure(final java.net.URL configURL, final LoggerRepository hierarchy) {
+    public void doConfigure(final URL configURL, final LoggerRepository hierarchy) {
     }
 
     /**

File: log4j-1.2-api/src/main/java/org/apache/log4j/xml/DOMConfigurator.java
Patch:
@@ -72,7 +72,8 @@ public static void setParameter(final Element elem, final PropertySetter propSet
 
     }
 
-    public static Object parseElement(final Element element, final Properties props, @SuppressWarnings("rawtypes") final Class expectedClass)
+    public static Object parseElement(final Element element, final Properties props,
+                                      @SuppressWarnings("rawtypes") final Class expectedClass)
         throws Exception {
         return null;
     }

File: log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java
Patch:
@@ -216,7 +216,7 @@ public static FlumeAppender createAppender(@PluginElement("Agents") Agent[] agen
         final int reqTimeout = Integers.parseInt(requestTimeout, 0);
         final int retries = Integers.parseInt(agentRetries, 0);
         final int lockTimeoutRetryCount = Integers.parseInt(lockTimeoutRetries, DEFAULT_LOCK_TIMEOUT_RETRY_COUNT);
-        final int delay = Integers.parseInt(maxDelay, DEFAULT_MAX_DELAY );
+        final int delay = Integers.parseInt(maxDelay, DEFAULT_MAX_DELAY);
 
         if (layout == null) {
             layout = RFC5424Layout.createLayout(null, null, null, "True", null, mdcPrefix, eventPrefix,

File: log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeEmbeddedManager.java
Patch:
@@ -187,7 +187,7 @@ private Map<String, String> createProperties(final String name, final Agent[] ag
                 throw new ConfigurationException("No Flume configuration provided");
             }
 
-            if ((agents != null && agents.length > 0 && properties != null && properties.length > 0)) {
+            if (agents != null && agents.length > 0 && properties != null && properties.length > 0) {
                 LOGGER.error("Agents and Flume configuration cannot both be specified");
                 throw new ConfigurationException("Agents and Flume configuration cannot both be specified");
             }
@@ -215,7 +215,7 @@ private Map<String, String> createProperties(final String name, final Agent[] ag
                 final StringBuilder sb = new StringBuilder();
                 String leading = "";
                 int priority = agents.length;
-                for (int i = 0; i < agents.length; ++i) {
+                for (int i = 0; i < priority; ++i) {
                     sb.append(leading).append("agent").append(i);
                     leading = " ";
                     final String prefix = "agent" + i;

File: log4j-jcl/src/main/java/org/apache/logging/log4j/jcl/Log4jLog.java
Patch:
@@ -27,7 +27,7 @@ public class Log4jLog extends AbstractLoggerWrapper implements Log {
 
     private static final long serialVersionUID = 1L;
 
-	public Log4jLog(final AbstractLogger logger, final String name) {
+    public Log4jLog(final AbstractLogger logger, final String name) {
         super(logger, name, null);
     }
 }

File: log4j-jmx-gui/src/main/java/org/apache/logging/log4j/jmx/gui/ClientGUI.java
Patch:
@@ -69,6 +69,7 @@
  */
 public class ClientGUI extends JPanel implements NotificationListener {
     private static final long serialVersionUID = -253621277232291174L;
+    private static final int INITIAL_STRING_WRITER_SIZE = 1024;
     private final Client client;
     private Map<ObjectName, Component> contextObjNameToTabbedPaneMap = new HashMap<ObjectName, Component>();
     private Map<ObjectName, JTextArea> statusLogTextAreaMap = new HashMap<ObjectName, JTextArea>();
@@ -229,7 +230,7 @@ private void handle(String msg, Exception ex) {
         System.err.println(msg);
         ex.printStackTrace();
 
-        StringWriter sw = new StringWriter(1024);
+        StringWriter sw = new StringWriter(INITIAL_STRING_WRITER_SIZE);
         ex.printStackTrace(new PrintWriter(sw));
         JOptionPane.showMessageDialog(this, sw.toString(), msg, JOptionPane.ERROR_MESSAGE);
     }

File: log4j-slf4j-impl/src/main/java/org/slf4j/helpers/MarkerWrapper.java
Patch:
@@ -41,12 +41,12 @@ private void setParent(final MarkerWrapper marker) {
     }
 
     @Override
-    public org.apache.logging.log4j.Marker getParent() {
+    public Marker getParent() {
         return this.parent;
     }
 
     @Override
-    public boolean isInstanceOf(final org.apache.logging.log4j.Marker marker) {
+    public boolean isInstanceOf(final Marker marker) {
         if (marker == null) {
             throw new IllegalArgumentException("A marker parameter is required");
         }

File: log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLogger.java
Patch:
@@ -30,7 +30,7 @@
 class Log4jTaglibLogger extends AbstractLoggerWrapper {
     private static final long serialVersionUID = 1L;
 
-	public Log4jTaglibLogger(final AbstractLogger logger, final String name, final MessageFactory messageFactory) {
+    public Log4jTaglibLogger(final AbstractLogger logger, final String name, final MessageFactory messageFactory) {
         super(logger, name, messageFactory);
     }
 

File: log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLogger.java
Patch:
@@ -31,7 +31,7 @@
 public class SLF4JLogger extends AbstractLogger {
 
     private static final long serialVersionUID = 1L;
-	private final org.slf4j.Logger logger;
+    private final org.slf4j.Logger logger;
     private final LocationAwareLogger locationAwareLogger;
 
     public SLF4JLogger(final String name, final org.slf4j.Logger logger) {

File: log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContextFactory.java
Patch:
@@ -20,11 +20,13 @@
 
 import org.apache.logging.log4j.spi.LoggerContext;
 import org.apache.logging.log4j.spi.LoggerContextFactory;
+import org.apache.logging.log4j.status.StatusLogger;
 
 /**
  *
  */
 public class SLF4JLoggerContextFactory implements LoggerContextFactory {
+    private static final StatusLogger LOGGER = StatusLogger.getLogger();
     private static LoggerContext context = new SLF4JLoggerContext();
 
     public SLF4JLoggerContextFactory() {
@@ -34,7 +36,7 @@ public SLF4JLoggerContextFactory() {
             Class.forName("org.slf4j.helpers.Log4jLoggerFactory");
             misconfigured = true;
         } catch (final ClassNotFoundException classNotFoundIsGood) {
-            // org.slf4j.helpers.Log4jLoggerFactory is not on classpath. Good!
+            LOGGER.debug("org.slf4j.helpers.Log4jLoggerFactory is not on classpath. Good!");
         }
         if (misconfigured) {
             throw new IllegalStateException("slf4j-impl jar is mutually exclusive with log4j-to-slf4j jar "

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TLSSyslogFrame.java
Patch:
@@ -16,6 +16,8 @@
 */
 package org.apache.logging.log4j.core.appender;
 
+import java.nio.charset.Charset;
+
 /**
  * Wrapper for messages that are formatted according to RFC 5425.
  */
@@ -44,7 +46,7 @@ private void setLengthInBytes() {
 
     public byte[] getBytes() {
         String frame = toString();
-        return frame.getBytes();
+        return frame.getBytes(Charset.defaultCharset());
     }
 
     @Override

File: log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/WebLookup.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.impl.ContextAnchor;
-import org.apache.logging.log4j.core.lookup.StrLookup;
 
 import javax.servlet.ServletContext;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/nosql/couchdb/package-info.java
Patch:
@@ -17,4 +17,4 @@
 /**
  * The classes in this package contain the Apache CouchDB provider for the NoSQL Appender.
  */
-package org.apache.logging.log4j.core.appender.db.nosql.couch;
+package org.apache.logging.log4j.core.appender.db.nosql.couchdb;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/nosql/mongo/MongoDBConnection.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.logging.log4j.core.appender.AppenderLoggingException;
 import org.apache.logging.log4j.core.appender.db.nosql.NoSQLConnection;
 import org.apache.logging.log4j.core.appender.db.nosql.NoSQLObject;
+import org.apache.logging.log4j.core.helpers.Strings;
 import org.apache.logging.log4j.status.StatusLogger;
 import org.bson.BSON;
 import org.bson.Transformer;
@@ -41,7 +42,7 @@ public final class MongoDBConnection implements NoSQLConnection<BasicDBObject, M
     private static final Logger LOGGER = StatusLogger.getLogger();
 
     static {
-        BSON.addDecodingHook(Level.class, new Transformer() {
+        BSON.addEncodingHook(Level.class, new Transformer() {
             @Override
             public Object transform(Object o) {
                 if (o instanceof Level) {
@@ -76,7 +77,7 @@ public MongoDBObject[] createList(final int length) {
     public void insertObject(final NoSQLObject<BasicDBObject> object) {
         try {
             final WriteResult result = this.collection.insert(object.unwrap(), this.writeConcern);
-            if (result.getError() != null && result.getError().length() > 0) {
+            if (Strings.isNotEmpty(result.getError())) {
                 throw new AppenderLoggingException("Failed to write log event to MongoDB due to error: " +
                         result.getError() + ".");
             }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/AbstractDatabaseAppender.java
Patch:
@@ -84,7 +84,7 @@ public final void start() {
         }
         super.start();
         if (this.getManager() != null) {
-            this.getManager().connect();
+            this.getManager().startup();
         }
     }
 
@@ -125,8 +125,8 @@ protected final void replaceManager(final T manager) {
         this.writeLock.lock();
         try {
             final T old = this.getManager();
-            if (!manager.isConnected()) {
-                manager.connect();
+            if (!manager.isRunning()) {
+                manager.startup();
             }
             this.manager = manager;
             old.release();

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/JDBCDatabaseManager.java
Patch:
@@ -53,13 +53,13 @@ private JDBCDatabaseManager(final String name, final int bufferSize, final Conne
     }
 
     @Override
-    protected void connectInternal() throws SQLException {
+    protected void startupInternal() throws SQLException {
         this.connection = this.connectionSource.getConnection();
         this.statement = this.connection.prepareStatement(this.sqlStatement);
     }
 
     @Override
-    protected void disconnectInternal() throws SQLException {
+    protected void shutdownInternal() throws SQLException {
         try {
             Closer.close(this.statement);
         } finally {
@@ -71,7 +71,7 @@ protected void disconnectInternal() throws SQLException {
     protected void writeInternal(final LogEvent event) {
         StringReader reader = null;
         try {
-            if (!this.isConnected() || this.connection == null || this.connection.isClosed()) {
+            if (!this.isRunning() || this.connection == null || this.connection.isClosed()) {
                 throw new AppenderLoggingException(
                         "Cannot write logging event; JDBC manager not connected to the database.");
             }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/JPADatabaseManager.java
Patch:
@@ -50,20 +50,20 @@ private JPADatabaseManager(final String name, final int bufferSize,
     }
 
     @Override
-    protected void connectInternal() {
+    protected void startupInternal() {
         this.entityManagerFactory = Persistence.createEntityManagerFactory(this.persistenceUnitName);
     }
 
     @Override
-    protected void disconnectInternal() {
+    protected void shutdownInternal() {
         if (this.entityManagerFactory != null && this.entityManagerFactory.isOpen()) {
             this.entityManagerFactory.close();
         }
     }
 
     @Override
     protected void writeInternal(final LogEvent event) {
-        if (!this.isConnected() || this.entityManagerFactory == null) {
+        if (!this.isRunning() || this.entityManagerFactory == null) {
             throw new AppenderLoggingException(
                     "Cannot write logging event; JPA manager not connected to the database.");
         }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/nosql/NoSQLDatabaseManager.java
Patch:
@@ -44,20 +44,20 @@ private NoSQLDatabaseManager(final String name, final int bufferSize,
     }
 
     @Override
-    protected void connectInternal() {
+    protected void startupInternal() {
         this.connection = this.provider.getConnection();
     }
 
     @Override
-    protected void disconnectInternal() {
+    protected void shutdownInternal() {
         if (this.connection != null && !this.connection.isClosed()) {
             this.connection.close();
         }
     }
 
     @Override
     protected void writeInternal(final LogEvent event) {
-        if (!this.isConnected() || this.connection == null || this.connection.isClosed()) {
+        if (!this.isRunning() || this.connection == null || this.connection.isClosed()) {
             throw new AppenderLoggingException(
                     "Cannot write logging event; NoSQL manager not connected to the database.");
         }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/db/AbstractDatabaseAppenderTest.java
Patch:
@@ -70,7 +70,7 @@ public void testNameAndGetLayout02() {
     public void testStartAndStop() throws Exception {
         this.setUp("name");
 
-        this.manager.connectInternal();
+        this.manager.startupInternal();
         expectLastCall();
         replay(this.manager, this.appender);
 
@@ -102,7 +102,7 @@ public void testReplaceManager() throws Exception {
         final LocalAbstractDatabaseManager newManager = createMockBuilder(LocalAbstractDatabaseManager.class)
                 .withConstructor(String.class, int.class).withArgs("name", 0).addMockedMethod("release")
                 .createStrictMock();
-        newManager.connectInternal();
+        newManager.startupInternal();
         expectLastCall();
         replay(this.manager, this.appender, newManager);
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java
Patch:
@@ -29,8 +29,8 @@
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.appender.FileManager;
 import org.apache.logging.log4j.core.appender.ManagerFactory;
-import org.apache.logging.log4j.core.appender.rolling.helper.AbstractAction;
-import org.apache.logging.log4j.core.appender.rolling.helper.Action;
+import org.apache.logging.log4j.core.appender.rolling.action.AbstractAction;
+import org.apache.logging.log4j.core.appender.rolling.action.Action;
 
 /**
  * The Rolling File Manager.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RolloverDescription.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.logging.log4j.core.appender.rolling;
 
-import org.apache.logging.log4j.core.appender.rolling.helper.Action;
+import org.apache.logging.log4j.core.appender.rolling.action.Action;
 
 /**
  * Description of actions needed to complete rollover.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RolloverDescriptionImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.logging.log4j.core.appender.rolling;
 
-import org.apache.logging.log4j.core.appender.rolling.helper.Action;
+import org.apache.logging.log4j.core.appender.rolling.action.Action;
 
 /**
  * Description of actions needed to complete rollover.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/AbstractAction.java
Patch:
@@ -14,7 +14,7 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-package org.apache.logging.log4j.core.appender.rolling.helper;
+package org.apache.logging.log4j.core.appender.rolling.action;
 
 import java.io.IOException;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/Action.java
Patch:
@@ -14,7 +14,7 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-package org.apache.logging.log4j.core.appender.rolling.helper;
+package org.apache.logging.log4j.core.appender.rolling.action;
 
 import java.io.IOException;
 

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/CompositeAction.java
Patch:
@@ -14,7 +14,7 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-package org.apache.logging.log4j.core.appender.rolling.helper;
+package org.apache.logging.log4j.core.appender.rolling.action;
 
 import java.io.IOException;
 import java.util.List;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java
Patch:
@@ -14,7 +14,7 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-package org.apache.logging.log4j.core.appender.rolling.helper;
+package org.apache.logging.log4j.core.appender.rolling.action;
 
 import java.io.File;
 import java.io.FileInputStream;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/GZCompressAction.java
Patch:
@@ -14,7 +14,7 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-package org.apache.logging.log4j.core.appender.rolling.helper;
+package org.apache.logging.log4j.core.appender.rolling.action;
 
 import java.io.BufferedOutputStream;
 import java.io.File;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ZipCompressAction.java
Patch:
@@ -14,7 +14,7 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-package org.apache.logging.log4j.core.appender.rolling.helper;
+package org.apache.logging.log4j.core.appender.rolling.action;
 
 import java.io.File;
 import java.io.FileInputStream;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/package-info.java
Patch:
@@ -17,4 +17,4 @@
 /**
  * Support classes for the Rolling File Appender.
  */
-package org.apache.logging.log4j.core.appender.rolling.helper;
+package org.apache.logging.log4j.core.appender.rolling.action;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/helper/FileRenameActionTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.log4j.core.appender.rolling.helper;
 
+import org.apache.logging.log4j.core.appender.rolling.action.FileRenameAction;
 import org.junit.After;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;

File: log4j-api/src/main/java/org/apache/logging/log4j/message/LocalizedMessage.java
Patch:
@@ -173,9 +173,9 @@ public String getFormattedMessage() {
         ResourceBundle bundle = this.bundle;
         if (bundle == null) {
             if (bundleId != null) {
-                bundle = getBundle(bundleId, locale, false);
+                bundle = getResourceBundle(bundleId, locale, false);
             } else {
-                bundle = getBundle(loggerName, locale, true);
+                bundle = getResourceBundle(loggerName, locale, true);
             }
         }
         final String messagePattern = getFormat();
@@ -215,7 +215,7 @@ public Throwable getThrowable() {
      * be located based on all or part of the package name. If false the key is expected to be the exact bundle id.
      * @return The ResourceBundle.
      */
-    protected ResourceBundle getBundle(final String baseName, final Locale locale, final boolean loop) {
+    protected ResourceBundle getResourceBundle(final String baseName, final Locale locale, final boolean loop) {
         ResourceBundle rb = null;
 
         if (baseName == null) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java
Patch:
@@ -81,6 +81,7 @@ public class AsyncLogger extends Logger {
     private static final int RINGBUFFER_DEFAULT_SIZE = 256 * 1024;
     private static final StatusLogger LOGGER = StatusLogger.getLogger();
     private static final ThreadNameStrategy THREAD_NAME_STRATEGY = ThreadNameStrategy.create();
+    private static final ThreadLocal<Info> threadlocalInfo = new ThreadLocal<Info>();
 
     static enum ThreadNameStrategy { // LOG4J2-467
         CACHED {
@@ -109,7 +110,6 @@ static ThreadNameStrategy create() {
 
     private static ExecutorService executor = Executors
             .newSingleThreadExecutor(new DaemonThreadFactory("AsyncLogger-"));
-    private static ThreadLocal<Info> threadlocalInfo = new ThreadLocal<Info>();
 
     static {
         initInfoForExecutorThread();
@@ -308,7 +308,7 @@ public static void stop() {
             }
         }
         executor.shutdown(); // finally, kill the processor thread
-        threadlocalInfo = new ThreadLocal<Info>(); // LOG4J2-323
+        threadlocalInfo.remove(); // LOG4J2-323
     }
 
     /**

File: log4j-core/src/main/java/org/apache/logging/log4j/core/web/Log4jServletContainerInitializer.java
Patch:
@@ -54,6 +54,8 @@ public void onStartup(final Set<Class<?>> classes, final ServletContext servletC
             initializer.setLoggerContext(); // the application is just now starting to start up
 
             servletContext.addListener(new Log4jServletContextListener());
+
+            filter.setAsyncSupported(true); // supporting async when the user isn't using async has no downsides
             filter.addMappingForUrlPatterns(EnumSet.allOf(DispatcherType.class), false, "/*");
         }
     }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/web/Log4jServletContextListenerTest.java
Patch:
@@ -54,7 +54,7 @@ public void testInitAndDestroy() throws Exception {
         expect(this.event.getServletContext()).andReturn(this.servletContext);
         this.servletContext.log(anyObject(String.class));
         expectLastCall();
-        expect(this.servletContext.getAttribute(Log4jWebInitializer.INITIALIZER_ATTRIBUTE)).andReturn(this.initializer);
+        expect(this.servletContext.getAttribute(Log4jWebSupport.SUPPORT_ATTRIBUTE)).andReturn(this.initializer);
         this.initializer.initialize();
         expectLastCall();
         this.initializer.setLoggerContext();
@@ -84,7 +84,7 @@ public void testInitFailure() throws Exception {
         expect(this.event.getServletContext()).andReturn(this.servletContext);
         this.servletContext.log(anyObject(String.class));
         expectLastCall();
-        expect(this.servletContext.getAttribute(Log4jWebInitializer.INITIALIZER_ATTRIBUTE)).andReturn(this.initializer);
+        expect(this.servletContext.getAttribute(Log4jWebSupport.SUPPORT_ATTRIBUTE)).andReturn(this.initializer);
         this.initializer.initialize();
         expectLastCall().andThrow(new UnavailableException(""));
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/web/Log4jServletFilterTest.java
Patch:
@@ -54,7 +54,7 @@ public void testInitAndDestroy() throws Exception {
         expect(this.filterConfig.getServletContext()).andReturn(this.servletContext);
         this.servletContext.log(anyObject(String.class));
         expectLastCall();
-        expect(this.servletContext.getAttribute(Log4jWebInitializer.INITIALIZER_ATTRIBUTE)).andReturn(this.initializer);
+        expect(this.servletContext.getAttribute(Log4jWebSupport.SUPPORT_ATTRIBUTE)).andReturn(this.initializer);
         this.initializer.clearLoggerContext();
         expectLastCall();
 
@@ -87,7 +87,7 @@ public void testDoFilterFirstTime() throws Exception {
         expect(this.filterConfig.getServletContext()).andReturn(this.servletContext);
         this.servletContext.log(anyObject(String.class));
         expectLastCall();
-        expect(this.servletContext.getAttribute(Log4jWebInitializer.INITIALIZER_ATTRIBUTE)).andReturn(this.initializer);
+        expect(this.servletContext.getAttribute(Log4jWebSupport.SUPPORT_ATTRIBUTE)).andReturn(this.initializer);
         this.initializer.clearLoggerContext();
         expectLastCall();
 
@@ -124,7 +124,7 @@ public void testDoFilterSecondTime() throws Exception {
         expect(this.filterConfig.getServletContext()).andReturn(this.servletContext);
         this.servletContext.log(anyObject(String.class));
         expectLastCall();
-        expect(this.servletContext.getAttribute(Log4jWebInitializer.INITIALIZER_ATTRIBUTE)).andReturn(this.initializer);
+        expect(this.servletContext.getAttribute(Log4jWebSupport.SUPPORT_ATTRIBUTE)).andReturn(this.initializer);
         this.initializer.clearLoggerContext();
         expectLastCall();
 

File: log4j-core/src/test/java/org/apache/logging/log4j/core/web/WebLookupTest.java
Patch:
@@ -22,8 +22,6 @@
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.impl.ContextAnchor;
 import org.apache.logging.log4j.core.lookup.StrSubstitutor;
-import org.junit.After;
-import org.junit.Before;
 import org.junit.Test;
 
 import javax.servlet.ServletContext;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
Patch:
@@ -371,7 +371,7 @@ public Configuration getConfiguration(final String name, final URI configLocatio
                 if (config != null) {
                     ConfigurationSource source = null;
                     try {
-                        source = getInputFromURI(new URI(config));
+                        source = getInputFromURI(FileUtils.getCorrectedFilePathUri(config));
                     } catch (Exception ex) {
                         // Ignore the error and try as a String.
                     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/JSONConfiguration.java
Patch:
@@ -96,7 +96,7 @@ public JSONConfiguration(final ConfigurationFactory.ConfigurationSource configSo
                             stream = System.err;
                         } else {
                             try {
-                                final File destFile = FileUtils.fileFromURI(new URI(dest));
+                                final File destFile = FileUtils.fileFromURI(FileUtils.getCorrectedFilePathUri(dest));
                                 final String enc = Charset.defaultCharset().name();
                                 stream = new PrintStream(new FileOutputStream(destFile), true, enc);
                             } catch (final URISyntaxException use) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/XMLConfiguration.java
Patch:
@@ -165,7 +165,7 @@ public XMLConfiguration(final ConfigurationFactory.ConfigurationSource configSou
                             stream = System.err;
                         } else {
                             try {
-                                final File destFile = FileUtils.fileFromURI(new URI(dest));
+                                final File destFile = FileUtils.fileFromURI(FileUtils.getCorrectedFilePathUri(dest));
                                 final String enc = Charset.defaultCharset().name();
                                 stream = new PrintStream(new FileOutputStream(destFile), true, enc);
                             } catch (final URISyntaxException use) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/LoggerContextAdmin.java
Patch:
@@ -45,6 +45,7 @@
 import org.apache.logging.log4j.core.helpers.Assert;
 import org.apache.logging.log4j.core.helpers.Charsets;
 import org.apache.logging.log4j.core.helpers.Closer;
+import org.apache.logging.log4j.core.helpers.FileUtils;
 import org.apache.logging.log4j.status.StatusLogger;
 
 /**
@@ -121,7 +122,7 @@ public void setConfigLocationURI(final String configLocation)
         LOGGER.debug("---------");
         LOGGER.debug("Remote request to reconfigure using location "
                 + configLocation);
-        final URI uri = new URI(configLocation);
+        final URI uri = FileUtils.getCorrectedFilePathUri(configLocation);
 
         // validate the location first: invalid location will result in
         // default configuration being configured, try to avoid that...
@@ -157,7 +158,7 @@ public String getConfigText(final String charsetName) throws IOException {
         }
         try {
             final Charset charset = Charset.forName(charsetName);
-            return readContents(new URI(getConfigLocationURI()), charset);
+            return readContents(FileUtils.getCorrectedFilePathUri(getConfigLocationURI()), charset);
         } catch (final Exception ex) {
             final StringWriter sw = new StringWriter(BUFFER_SIZE);
             ex.printStackTrace(new PrintWriter(sw));

File: log4j-core/src/main/java/org/apache/logging/log4j/core/web/Log4jWebInitializerImpl.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.config.Configurator;
+import org.apache.logging.log4j.core.helpers.FileUtils;
 import org.apache.logging.log4j.core.helpers.NetUtils;
 import org.apache.logging.log4j.core.impl.ContextAnchor;
 import org.apache.logging.log4j.core.impl.Log4jContextFactory;
@@ -93,7 +94,7 @@ private void initializeJndi(final String location) throws UnavailableException {
         URI configLocation = null;
         if (location != null) {
             try {
-                configLocation = new URI(location);
+                configLocation = FileUtils.getCorrectedFilePathUri(location);
             } catch (final Exception e) {
                 this.servletContext.log("Unable to convert configuration location [" + location + "] to a URI!", e);
             }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/web/Log4jServletContainerInitializer.java
Patch:
@@ -41,7 +41,7 @@ public void onStartup(final Set<Class<?>> classes, final ServletContext servletC
             servletContext.log("Log4jServletContainerInitializer starting up Log4j in Servlet 3.0+ environment.");
 
             final FilterRegistration.Dynamic filter =
-                    servletContext.addFilter("log4jServletFilter", new Log4jServletFilter());
+                    servletContext.addFilter("log4jServletFilter", Log4jServletFilter.class);
             if (filter == null) {
                 servletContext.log("WARNING: In a Servlet 3.0+ application, you should not define a " +
                         "log4jServletFilter in web.xml. Log4j 2 normally does this for you automatically. Log4j 2 " +

File: log4j-api/src/main/java/org/apache/logging/log4j/spi/StandardLevel.java
Patch:
@@ -82,9 +82,9 @@ public int intLevel() {
     }
 
     /**
-     * Method to convert custom Levels into a StdLevel for conversion to other systems.
+     * Method to convert custom Levels into a StandardLevel for conversion to other systems.
      * @param intLevel The integer value of the Level.
-     * @return The StdLevel.
+     * @return The StandardLevel.
      */
     public static StandardLevel getStandardLevel(int intLevel) {
         StandardLevel level = StandardLevel.OFF;

File: log4j-core/src/test/java/org/apache/logging/log4j/core/jmx/ServerTest.java
Patch:
@@ -104,7 +104,7 @@ public void testEscapeIgnoresSpaces() throws Exception {
     public void testEscapeEscapesLineFeed() throws Exception {
         final String ctx = "a\rc";
         final String ctxName = Server.escape(ctx);
-//        assertEquals("a\\rc", ctxName);
+        assertEquals("a\\rc", ctxName);
         new ObjectName(String.format(LoggerContextAdminMBean.PATTERN, ctxName)); 
         // no MalformedObjectNameException = success
     }
@@ -113,7 +113,7 @@ public void testEscapeEscapesLineFeed() throws Exception {
     public void testEscapeEscapesCarriageReturn() throws Exception {
         final String ctx = "a\nc";
         final String ctxName = Server.escape(ctx);
-//        assertEquals("a\\nc", ctxName);
+        assertEquals("a\\nc", ctxName);
         new ObjectName(String.format(LoggerContextAdminMBean.PATTERN, ctxName)); 
         // no MalformedObjectNameException = success
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java
Patch:
@@ -53,6 +53,7 @@ public class LoggerContext implements org.apache.logging.log4j.spi.LoggerContext
 
     public static final String PROPERTY_CONFIG = "config";
     private static final StatusLogger LOGGER = StatusLogger.getLogger();
+    private static final Configuration NULL_CONFIGURATION = new NullConfiguration();
 
     private final ConcurrentMap<String, Logger> loggers = new ConcurrentHashMap<String, Logger>();
     private final CopyOnWriteArrayList<PropertyChangeListener> propertyChangeListeners = new CopyOnWriteArrayList<PropertyChangeListener>();
@@ -208,7 +209,7 @@ public void stop() {
                 shutdownThread = null;
             }
             final Configuration prev = config;
-            config = new NullConfiguration();
+            config = NULL_CONFIGURATION;
             updateLoggers();
             prev.stop();
             externalContext = null;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/helpers/FileUtils.java
Patch:
@@ -64,8 +64,8 @@ public static File fileFromURI(URI uri) {
         }
         try {
             String fileName = uri.toURL().getFile();
-            if (new File(fileName).exists()) {
-                return new File(fileName);
+            if (new File(fileName).exists()) { // LOG4J2-466
+                return new File(fileName); // allow files with '+' char in name
             }
             return new File(URLDecoder.decode(fileName, "UTF8"));
         } catch (final MalformedURLException ex) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java
Patch:
@@ -107,7 +107,9 @@ protected void callAppenders(final LogEvent event) {
         event.getThreadName();
 
         // pass on the event to a separate thread
-        helper.callAppendersFromAnotherThread(event);
+        if (!helper.callAppendersFromAnotherThread(event)) {
+            super.callAppenders(event);
+        }
     }
 
     /** Called by AsyncLoggerConfigHelper.RingBufferLog4jEventHandler. */

File: log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerThreadNameStrategyTest.java
Patch:
@@ -44,7 +44,7 @@ public void testUseUncachedThreadNameIfConfigured() throws Exception {
 
     @Test
     public void testUncachedThreadNameStrategyReturnsCurrentThreadName() throws Exception {
-        AsyncLogger.Info info = new AsyncLogger.Info(null, "original");
+        AsyncLogger.Info info = new AsyncLogger.Info(null, "original", false);
         final String name1 = "MODIFIED-THREADNAME1";
         Thread.currentThread().setName(name1);
         assertEquals(name1, AsyncLogger.ThreadNameStrategy.UNCACHED.getThreadName(info));
@@ -58,7 +58,7 @@ public void testUncachedThreadNameStrategyReturnsCurrentThreadName() throws Exce
     public void testCachedThreadNameStrategyReturnsCachedThreadName() throws Exception {
         final String original = "Original-ThreadName";
         Thread.currentThread().setName(original);
-        AsyncLogger.Info info = new AsyncLogger.Info(null, original);
+        AsyncLogger.Info info = new AsyncLogger.Info(null, original, false);
         assertEquals(original, AsyncLogger.ThreadNameStrategy.CACHED.getThreadName(info));
 
         final String name2 = "OTHER-THREADNAME2";

File: log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java
Patch:
@@ -179,7 +179,8 @@ public List<LoggerContext> getLoggerContexts() {
     }
 
     private LoggerContext locateContext(final ClassLoader loader, final URI configLocation) {
-        final String name = loader.toString();
+        // LOG4J2-477: class loader may be null
+        final String name = loader != null ? loader.toString() : ClassLoader.getSystemClassLoader().toString();
         AtomicReference<WeakReference<LoggerContext>> ref = CONTEXT_MAP.get(name);
         if (ref == null) {
             if (configLocation == null) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java
Patch:
@@ -59,7 +59,7 @@ public boolean isTriggeringEvent(final LogEvent event) {
         if (manager.getFileSize() == 0) {
             return false;
         }
-        final long now = System.currentTimeMillis();
+        final long now = event.getMillis();
         if (now > nextRollover) {
             nextRollover = manager.getPatternProcessor().getNextTime(now, interval, modulate);
             return true;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/BaseConfiguration.java
Patch:
@@ -23,7 +23,6 @@
 import java.lang.reflect.Modifier;
 import java.util.ArrayList;
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
@@ -226,9 +225,10 @@ private void setupAdvertisement() {
         }
     }
 
+    @SuppressWarnings("unchecked")
     @Override
-    public Object getComponent(final String name) {
-        return componentMap.get(name);
+    public <T> T getComponent(final String name) {
+        return (T) componentMap.get(name);
     }
 
     @Override

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/TLSSocketManager.java
Patch:
@@ -112,6 +112,8 @@ private static SSLSocketFactory createSSLSocketFactory(SSLConfiguration sslConf)
     private static class TLSSocketManagerFactory implements ManagerFactory<TLSSocketManager, TLSFactoryData> {
 
         private class TLSSocketManagerFactoryException extends Exception {
+
+            private static final long serialVersionUID = 1L;
         }
 
         @Override

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/KeyStoreConfigurationException.java
Patch:
@@ -20,6 +20,8 @@
  *
  */
 public class KeyStoreConfigurationException extends StoreConfigurationException {
+    private static final long serialVersionUID = 1L;
+
     public KeyStoreConfigurationException(Exception e) {
         super(e);
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/SSLConfigurationException.java
Patch:
@@ -20,6 +20,8 @@
  *
  */
 public class SSLConfigurationException extends Exception {
+    private static final long serialVersionUID = 1L;
+
     public SSLConfigurationException(Exception e) {
         super(e);
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/StoreConfigurationException.java
Patch:
@@ -20,6 +20,8 @@
  *
  */
 public class StoreConfigurationException extends Exception {
+    private static final long serialVersionUID = 1L;
+
     public StoreConfigurationException(Exception e) {
         super(e);
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/TrustStoreConfigurationException.java
Patch:
@@ -20,6 +20,8 @@
  *
  */
 public class TrustStoreConfigurationException extends StoreConfigurationException {
+    private static final long serialVersionUID = 1L;
+
     public TrustStoreConfigurationException(Exception e) {
         super(e);
     }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java
Patch:
@@ -83,7 +83,7 @@ public class AsyncLogger extends Logger {
 
     private static ExecutorService executor = Executors
             .newSingleThreadExecutor(new DaemonThreadFactory("AsyncLogger-"));
-    private final ThreadLocal<Info> threadlocalInfo = new ThreadLocal<Info>();
+    private static ThreadLocal<Info> threadlocalInfo = new ThreadLocal<Info>();
 
     static {
         final int ringBufferSize = calculateRingBufferSize();
@@ -262,5 +262,6 @@ public static void stop() {
             }
         }
         executor.shutdown(); // finally, kill the processor thread
+        threadlocalInfo = new ThreadLocal<Info>(); // LOG4J2-323
     }
 }

File: log4j-core/src/test/java/org/apache/logging/log4j/core/pattern/PatternParserTest.java
Patch:
@@ -122,7 +122,7 @@ public void testNestedPattern() {
         }
         final String str = buf.toString();
         final String expected = String.format("] INFO : Hello, world%s\u001B[m", Constants.LINE_SEP);
-        assertTrue(" Expected to end with: " + expected + ". Actual: " + str, str.endsWith(expected));
+        assertTrue("Expected to end with: " + expected + ". Actual: " + str, str.endsWith(expected));
     }
 
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingFileAppender.java
Patch:
@@ -19,6 +19,7 @@
 import java.io.Serializable;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.zip.Deflater;
 
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.Layout;
@@ -163,7 +164,8 @@ public static RollingFileAppender createAppender(
         }
 
         if (strategy == null) {
-            strategy = DefaultRolloverStrategy.createStrategy(null, null, null, config);
+            strategy = DefaultRolloverStrategy.createStrategy(null, null, null,
+                    String.valueOf(Deflater.DEFAULT_COMPRESSION), config);
         }
 
         if (layout == null) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppender.java
Patch:
@@ -19,6 +19,7 @@
 import java.io.Serializable;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.zip.Deflater;
 
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.Layout;
@@ -183,8 +184,8 @@ public static RollingRandomAccessFileAppender createAppender(
         }
 
         if (strategy == null) {
-            strategy = DefaultRolloverStrategy.createStrategy(null, null,
-                    "true", config);
+            strategy = DefaultRolloverStrategy.createStrategy(null, null, null,
+                    String.valueOf(Deflater.DEFAULT_COMPRESSION), config);
         }
 
         if (layout == null) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/PluginManager.java
Patch:
@@ -154,7 +154,7 @@ public void collectPlugins(boolean preLoad, final String pkgs) {
                 pluginTypeMap = map;
                 plugins = map.get(type);
             } else {
-                LOGGER.warn("Plugin preloads not available");
+                LOGGER.warn("Plugin preloads not available from class loader {}", classLoader);
             }
         }
         if (plugins == null || plugins.size() == 0) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingFileAppender.java
Patch:
@@ -163,7 +163,7 @@ public static RollingFileAppender createAppender(
         }
 
         if (strategy == null) {
-            strategy = DefaultRolloverStrategy.createStrategy(null, null, "true", config);
+            strategy = DefaultRolloverStrategy.createStrategy(null, null, null, config);
         }
 
         if (layout == null) {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/SMTPAppender.java
Patch:
@@ -129,7 +129,7 @@ public static SMTPAppender createAppender(
         final boolean ignoreExceptions = Booleans.parseBoolean(ignore, true);
         final int smtpPort = AbstractAppender.parseInt(smtpPortStr, 0);
         final boolean isSmtpDebug = Boolean.parseBoolean(smtpDebug);
-        final int bufferSize = bufferSizeStr == null ? DEFAULT_BUFFER_SIZE : Integer.valueOf(bufferSizeStr);
+        final int bufferSize = bufferSizeStr == null ? DEFAULT_BUFFER_SIZE : Integer.parseInt(bufferSizeStr);
 
         if (layout == null) {
             layout = HTMLLayout.createLayout(null, null, null, null, null, null);

File: log4j-api/src/main/java/org/apache/logging/log4j/Logger.java
Patch:
@@ -527,7 +527,7 @@ public interface Logger {
   void info(Marker marker, String message, Throwable t);
 
   /**
-   * Logs a message with the specific Marker at the TRACE level.
+   * Logs a message with the specific Marker at the {@link Level#INFO INFO} level.
    *
    * @param msg the message string to be logged
    */

File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/RFC5424Layout.java
Patch:
@@ -91,7 +91,7 @@ public final class RFC5424Layout extends AbstractStringLayout {
 
     private final Facility facility;
     private final String defaultId;
-    private final Integer enterpriseNumber;
+    private final int enterpriseNumber;
     private final boolean includeMDC;
     private final String mdcId;
     private final StructuredDataId mdcSDID;

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/AbstractLogEventWrapperEntity.java
Patch:
@@ -48,7 +48,8 @@
  * </p>
  * <p>
  * Many of the return types of {@link LogEvent} methods (e.g., {@link StackTraceElement}, {@link Message},
- * {@link Marker}, {@link Throwable}, {@link org.apache.logging.log4j.ThreadContext.ContextStack}, and 
+ * {@link Marker}, {@link Throwable}, 
+ * {@link org.apache.logging.log4j.ThreadContext.ContextStack ThreadContext.ContextStack}, and 
  * {@link Map Map&lt;String, String&gt}) will not be recognized by the JPA provider. In conjunction with 
  * {@link javax.persistence.Convert @Convert}, you can use the converters in the 
  * {@link org.apache.logging.log4j.core.appender.db.jpa.converter} package to convert these types to database columns.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackAttributeConverter.java
Patch:
@@ -22,7 +22,8 @@
 import org.apache.logging.log4j.ThreadContext;
 
 /**
- * A JPA 2.1 attribute converter for {@link ThreadContext.ContextStack}s in
+ * A JPA 2.1 attribute converter for 
+ * {@link org.apache.logging.log4j.ThreadContext.ContextStack ThreadContext.ContextStack}s in
  * {@link org.apache.logging.log4j.core.LogEvent}s. This converter is only capable of converting to {@link String}s. The
  * {@link #convertToEntityAttribute(String)} method throws an {@link UnsupportedOperationException}. If you need to
  * support converting to an entity attribute, you should use the {@link ContextStackJsonAttributeConverter} for

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackJsonAttributeConverter.java
Patch:
@@ -30,7 +30,8 @@
 import com.fasterxml.jackson.core.type.TypeReference;
 
 /**
- * A JPA 2.1 attribute converter for {@link ThreadContext.ContextStack}s in
+ * A JPA 2.1 attribute converter for 
+ * {@link org.apache.logging.log4j.ThreadContext.ContextStack ThreadContext.ContextStack}s in
  * {@link org.apache.logging.log4j.core.LogEvent}s. This converter is capable of converting both to and from
  * {@link String}s.
  *

File: log4j-core/src/main/java/org/apache/logging/log4j/core/helpers/Integers.java
Patch:
@@ -41,8 +41,6 @@ public static int parseInt(String s, int defaultValue) {
      *
      * @param s
      *            a {@code String} containing the {@code int} representation to parse, may be {@code null} or {@code ""}
-     * @param defaultValue
-     *            the return value, use {@code 0} if {@code s} is {@code null} or {@code ""}
      * @return the integer value represented by the argument in decimal.
      * @throws NumberFormatException
      *             if the string does not contain a parsable integer.

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rewrite/RewriteAppender.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.logging.log4j.core.appender.rewrite;
 
-import java.io.Serializable;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
@@ -37,8 +36,6 @@
 
 /**
  * This Appender allows the logging event to be manipulated before it is processed by other Appenders.
- *
- * @param <T> The {@link org.apache.logging.log4j.core.Layout}'s {@link Serializable} type.
  */
 @Plugin(name = "Rewrite", category = "Core", elementType = "appender", printObject = true)
 public final class RewriteAppender extends AbstractAppender {

File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/nosql/NoSQLConnection.java
Patch:
@@ -65,7 +65,7 @@ public interface NoSQLConnection<W, T extends NoSQLObject<W>> extends Closeable
      * HTTP web service), this method would likely always return true. Essentially, this method should only return
      * {@code true} if a call to {@link #insertObject(NoSQLObject)} <b>will</b> fail due to the state of this object.
      *
-     * @return {@link true} if this object is considered closed.
+     * @return {@code true} if this object is considered closed.
      */
     boolean isClosed();
 }

File: log4j-core/src/main/java/org/apache/logging/log4j/core/net/SMTPManager.java
Patch:
@@ -136,9 +136,8 @@ public void sendEvents(final Layout<?> layout, final LogEvent appendEvent) {
         }
         try {
             final LogEvent[] priorEvents = buffer.removeAll();
-            if (priorEvents == null || priorEvents.length == 0) {
-                return; // nothing to do, another thread already took all events
-            }
+            // LOG4J-310: log appendEvent even if priorEvents is empty
+            
             final byte[] rawBytes = formatContentToBytes(priorEvents, appendEvent, layout);
 
             final String contentType = layout.getContentType();

File: log4j-api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java
Patch:
@@ -261,8 +261,9 @@ public boolean isEnabled(final Level level, final Marker marker) {
                 return logger.isWarnEnabled(marker);
             case ERROR:
                 return logger.isErrorEnabled(marker);
+            default:
+                return false;
         }
-        return false;
     }
 
     /**

File: core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableFormatOptions.java
Patch:
@@ -186,6 +186,7 @@ public static ThrowableFormatOptions newInstance(String[] options) {
             if (opts.length > 1 && (first.equalsIgnoreCase(FULL) || first.equalsIgnoreCase(SHORT) || first.equalsIgnoreCase(NONE) || scanner.hasNextInt())) {
                 options = new String[]{first, opts[1].trim()};
             }
+            scanner.close();
         }
 
         int lines = DEFAULT.lines;

File: core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
Patch:
@@ -462,7 +462,7 @@ public ConfigurationSource() {
 
         public ConfigurationSource(final InputStream stream) {
             this.stream = stream;
-            this .file = null;
+            this.file = null;
             this.location = null;
         }
 

File: core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java
Patch:
@@ -129,7 +129,7 @@ public static DynamicThresholdFilter createFilter(
             @PluginAttribute("key") final String key,
             @PluginElement("Pairs") final KeyValuePair[] pairs,
             @PluginAttribute("defaultThreshold") final String levelName,
-            @PluginAttribute("onatch") final String match,
+            @PluginAttribute("onMatch") final String match,
             @PluginAttribute("onmismatch") final String mismatch) {
         final Result onMatch = Result.toResult(match);
         final Result onMismatch = Result.toResult(mismatch);

File: core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.ConfigurationException;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
+import org.apache.logging.log4j.core.config.plugins.PluginAliases;
 import org.apache.logging.log4j.core.config.plugins.PluginAttr;
 import org.apache.logging.log4j.core.config.plugins.PluginConfiguration;
 import org.apache.logging.log4j.core.config.plugins.PluginElement;
@@ -166,7 +167,7 @@ public void append(final LogEvent event) {
     @PluginFactory
     public static AsyncAppender createAppender(
                 @PluginElement("AppenderRef") final AppenderRef[] appenderRefs,
-                @PluginAttr("errorRef") final String errorRef,
+                @PluginAttr("errorRef") @PluginAliases("error-ref") final String errorRef,
                 @PluginAttr("blocking") final String blocking,
                 @PluginAttr("bufferSize") final String size,
                 @PluginAttr("name") final String name,

File: core/src/main/java/org/apache/logging/log4j/core/config/Configuration.java
Patch:
@@ -76,7 +76,7 @@ public interface Configuration extends Filterable {
 
     void createConfiguration(Node node, LogEvent event);
 
-    Object getComponent(String name);
+    <T> T getComponent(String name);
 
     void addComponent(String name, Object object);
 

File: core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java
Patch:
@@ -182,7 +182,7 @@ public static PatternParser createPatternParser(final Configuration config) {
         if (config == null) {
             return new PatternParser(config, KEY, LogEventPatternConverter.class);
         }
-        PatternParser parser = (PatternParser) config.getComponent(KEY);
+        PatternParser parser = config.getComponent(KEY);
         if (parser == null) {
             parser = new PatternParser(config, KEY, LogEventPatternConverter.class);
             config.addComponent(KEY, parser);

File: core/src/main/java/org/apache/logging/log4j/core/layout/RFC5424Layout.java
Patch:
@@ -204,7 +204,7 @@ private static PatternParser createPatternParser(final Configuration config,
             return new PatternParser(config, PatternLayout.KEY, LogEventPatternConverter.class,
                 filterClass);
         }
-        PatternParser parser = (PatternParser) config.getComponent(COMPONENT_KEY);
+        PatternParser parser = config.getComponent(COMPONENT_KEY);
         if (parser == null) {
             parser = new PatternParser(config, PatternLayout.KEY, ThrowablePatternConverter.class);
             config.addComponent(COMPONENT_KEY, parser);

File: api/src/main/java/org/apache/logging/log4j/spi/ThreadContextStack.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.logging.log4j.spi;
 
-import java.io.Serializable;
 import java.util.Collection;
 
 import org.apache.logging.log4j.ThreadContext;
@@ -25,5 +24,5 @@
  *
  */
 public interface ThreadContextStack extends ThreadContext.ContextStack,
-        Collection<String>, Serializable {
+        Collection<String> {
 }

File: core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java
Patch:
@@ -170,7 +170,7 @@ public void append(final LogEvent event) {
     @PluginFactory
     public static <S extends Serializable> AsyncAppender<S> createAppender(
                 @PluginElement("AppenderRef") final AppenderRef[] appenderRefs,
-                @PluginAttr("error-ref") final String errorRef,
+                @PluginAttr("errorRef") final String errorRef,
                 @PluginAttr("blocking") final String blocking,
                 @PluginAttr("bufferSize") final String size,
                 @PluginAttr("name") final String name,

File: core/src/main/java/org/apache/logging/log4j/core/config/BaseConfiguration.java
Patch:
@@ -133,7 +133,7 @@ public void start() {
         for (final Appender appender : appenders.values()) {
             appender.start();
         }
-
+        root.startFilter(); // LOG4J2-336
         startFilter();
     }
 

File: core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigTest.java
Patch:
@@ -40,8 +40,8 @@ public static void beforeClass() {
     @Test
     public void testAdditivity() throws Exception {
         final File f = new File("target", "AsyncLoggerConfigTest.log");
-        // System.out.println(f.getAbsolutePath());
-        f.delete();
+        assertTrue("Deleted old file before test", !f.exists() || f.delete());
+        
         final Logger log = LogManager.getLogger("com.foo.Bar");
         final String msg = "Additive logging: 2 for the price of 1!";
         log.info(msg);
@@ -61,5 +61,4 @@ public void testAdditivity() throws Exception {
         assertTrue("location",
                 line1.contains(location) || line2.contains(location));
     }
-
 }

File: core/src/test/java/org/apache/logging/log4j/core/config/XMLConfigurationTest.java
Patch:
@@ -134,7 +134,7 @@ public void testLogger() {
         final Map<String, Appender<?>> appenders = l.getAppenders();
         assertNotNull(appenders);
         assertTrue("number of appenders = " + appenders.size(), appenders.size() == 1);
-        final Appender a = appenders.get("STDOUT");
+        final Appender<?> a = appenders.get("STDOUT");
         assertNotNull(a);
         assertEquals(a.getName(), "STDOUT");
     }

File: api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java
Patch:
@@ -112,7 +112,7 @@ public void removeListener(final StatusListener listener) {
         listenersLock.writeLock().lock();
         try {
             listeners.remove(listener);
-            int lowest = Level.ERROR.intLevel();
+            int lowest = Level.toLevel(DEFAULT_STATUS_LEVEL, Level.WARN).intLevel();
             for (StatusListener l : listeners) {
                 int level = l.getStatusLevel().intLevel();
                 if (lowest < level) {

File: api/src/main/java/org/apache/logging/log4j/spi/Provider.java
Patch:
@@ -23,7 +23,8 @@
  *
  */
 public class Provider {
-    private static final String FACTORY_PRIORITY = "FactoryPriority";
+    private static final Integer DEFAULT_PRIORITY = Integer.valueOf(-1);
+	private static final String FACTORY_PRIORITY = "FactoryPriority";
     private static final String THREAD_CONTEXT_MAP = "ThreadContextMap";
     private static final String LOGGER_CONTEXT_FACTORY = "LoggerContextFactory";
 
@@ -35,7 +36,7 @@ public class Provider {
     public Provider(final Properties props, final URL url) {
         this.url = url;
         final String weight = props.getProperty(FACTORY_PRIORITY);
-        priority = weight == null ? -1 : Integer.valueOf(weight);
+        priority = weight == null ? DEFAULT_PRIORITY : Integer.valueOf(weight);
         className = props.getProperty(LOGGER_CONTEXT_FACTORY);
         threadContextMap = props.getProperty(THREAD_CONTEXT_MAP);
     }

File: api/src/test/java/org/apache/logging/log4j/LogManagerTest.java
Patch:
@@ -35,10 +35,10 @@ public void testGetLogger() {
         logger = LogManager.getLogger(ParameterizedMessageFactory.INSTANCE);
         assertNotNull("No Logger returned", logger);
         assertTrue("Incorrect Logger name: " + logger.getName(),LogManagerTest.class.getName().equals(logger.getName()));
-        logger = LogManager.getLogger((Class) null);
+        logger = LogManager.getLogger((Class<?>) null);
         assertNotNull("No Logger returned", logger);
         assertTrue("Incorrect Logger name: " + logger.getName(),LogManagerTest.class.getName().equals(logger.getName()));
-        logger = LogManager.getLogger((Class) null, ParameterizedMessageFactory.INSTANCE);
+        logger = LogManager.getLogger((Class<?>) null, ParameterizedMessageFactory.INSTANCE);
         assertNotNull("No Logger returned", logger);
         assertTrue("Incorrect Logger name: " + logger.getName(),LogManagerTest.class.getName().equals(logger.getName()));
         logger = LogManager.getLogger((String) null);

File: core/src/main/java/org/apache/logging/log4j/core/layout/HTMLLayout.java
Patch:
@@ -99,7 +99,7 @@ public FontSize larger() {
     private final String headerSize;
 
     private HTMLLayout(final boolean locationInfo, final String title, final String contentType, final Charset charset,
-                       final String font, final String fontSize, final String headerSize) {
+            final String font, final String fontSize, final String headerSize) {
         super(charset);
         this.locationInfo = locationInfo;
         this.title = title;
@@ -208,7 +208,7 @@ public Map<String, String> getContentFormat() {
      * @return The content type.
      */
     public String getContentType() {
-        return "text/html; charset=" + this.getCharset();
+        return contentType;
     }
 
     private void appendThrowableAsHTML(final Throwable throwable, final StringBuilder sbuf) {
@@ -330,7 +330,7 @@ public static HTMLLayout createLayout(@PluginAttr("locationInfo") final String l
             title = DEFAULT_TITLE;
         }
         if (contentType == null) {
-            contentType = DEFAULT_CONTENT_TYPE;
+            contentType = DEFAULT_CONTENT_TYPE + "; charset=" + charset;
         }
         return new HTMLLayout(info, title, contentType, charset, font, fontSize, headerSize);
     }

File: core/src/main/java/org/apache/logging/log4j/core/layout/XMLLayout.java
Patch:
@@ -389,13 +389,13 @@ public static XMLLayout createLayout(
                                          @PluginAttr("properties") final String properties,
                                          @PluginAttr("complete") final String completeStr,
                                          @PluginAttr("compact") final String compactStr,
-                                         @PluginAttr("namespacePrefix") final String nanespacePrefix,
+                                         @PluginAttr("namespacePrefix") final String namespacePrefix,
                                          @PluginAttr("charset") final String charsetName) {
         final Charset charset = Charsets.getSupportedCharset(charsetName, Charsets.UTF_8);
         final boolean info = Boolean.parseBoolean(locationInfo);
         final boolean props = Boolean.parseBoolean(properties);
         final boolean complete = Boolean.parseBoolean(completeStr);
         final boolean compact = Boolean.parseBoolean(compactStr);
-        return new XMLLayout(info, props, complete, compact, nanespacePrefix, charset);
+        return new XMLLayout(info, props, complete, compact, namespacePrefix, charset);
     }
 }

File: core/src/main/java/org/apache/logging/log4j/core/layout/XMLLayout.java
Patch:
@@ -55,7 +55,7 @@
  * 
  * <pre>
  * &lt;?xml version="1.0" encoding=&quotUTF-8&quot?&gt;
- * &lt;Events xmlns="http://logging.apache.org/log4j/2.0"&gt;
+ * &lt;Events xmlns="http://logging.apache.org/log4j/2.0/events"&gt;
  * &nbsp;&nbsp;&lt;Event logger="com.foo.Bar" timestamp="1373436580419" level="INFO" thread="main"&gt;
  * &nbsp;&nbsp;&nbsp;&nbsp;&lt;Message>&lt;![CDATA[This is a log message 1]]&gt;&lt;/Message&gt;
  * &nbsp;&nbsp;&lt;/Event&gt;
@@ -85,7 +85,7 @@
 @Plugin(name = "XMLLayout", category = "Core", elementType = "layout", printObject = true)
 public class XMLLayout extends AbstractStringLayout {
 
-    private static final String XML_NAMESPACE = "http://logging.apache.org/log4j/2.0";
+    private static final String XML_NAMESPACE = "http://logging.apache.org/log4j/2.0/events";
     private static final String ROOT_TAG = "Events";
     private static final int DEFAULT_SIZE = 256;
     

File: core/src/test/java/org/apache/logging/log4j/core/appender/XmlCompactFileAppenderTest.java
Patch:
@@ -62,7 +62,7 @@ public void testFlushAtEndOfBatch() throws Exception {
         final String msg1 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
         assertTrue("line1 incorrect: [" + line1 + "], does not contain: [" + msg1 + "]", line1.contains(msg1));
 
-        final String msg2 = "<Events xmlns=\"http://logging.apache.org/log4j/2.0\">";
+        final String msg2 = "<Events xmlns=\"http://logging.apache.org/log4j/2.0/events\">";
         assertTrue("line1 incorrect: [" + line1 + "], does not contain: [" + msg2 + "]", line1.contains(msg2));
 
         final String msg3 = "<Event ";

File: core/src/test/java/org/apache/logging/log4j/core/appender/XmlCompleteFileAppenderTest.java
Patch:
@@ -69,7 +69,7 @@ public void testFlushAtEndOfBatch() throws Exception {
         assertTrue("line1 incorrect: [" + line1 + "], does not contain: [" + msg1 + "]", line1.equals(msg1));
         
         assertNotNull("line2", line2);
-        final String msg2 = "<Events xmlns=\"http://logging.apache.org/log4j/2.0\">";
+        final String msg2 = "<Events xmlns=\"http://logging.apache.org/log4j/2.0/events\">";
         assertTrue("line2 incorrect: [" + line2 + "], does not contain: [" + msg2 + "]", line2.equals(msg2));
         
         assertNotNull("line3", line3);

File: core/src/main/java/org/apache/logging/log4j/core/appender/FastFileManager.java
Patch:
@@ -104,7 +104,7 @@ protected synchronized void write(final byte[] bytes, int offset, int length) {
     }
 
     @Override
-    public void flush() {
+    public synchronized void flush() {
         buffer.flip();
         try {
             randomAccessFile.write(buffer.array(), 0, buffer.limit());
@@ -116,7 +116,7 @@ public void flush() {
     }
 
     @Override
-    public void close() {
+    public synchronized void close() {
         flush();
         try {
             randomAccessFile.close();

File: core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java
Patch:
@@ -129,7 +129,7 @@ protected void write(final byte[] bytes)  {
         write(bytes, 0, bytes.length);
     }
 
-    protected void close() {
+    protected synchronized void close() {
         final OutputStream stream = os; // access volatile field only once per method
         if (stream == System.out || stream == System.err) {
             return;
@@ -144,7 +144,7 @@ protected void close() {
     /**
      * Flush any buffers.
      */
-    public void flush() {
+    public synchronized void flush() {
         try {
             os.flush();
         } catch (final IOException ex) {

File: core/src/main/java/org/apache/logging/log4j/core/appender/rolling/FastRollingFileManager.java
Patch:
@@ -99,7 +99,7 @@ protected void createFileAfterRollover() throws IOException {
     }
 
     @Override
-    public void flush() {
+    public synchronized void flush() {
         buffer.flip();
         try {
             randomAccessFile.write(buffer.array(), 0, buffer.limit());
@@ -111,7 +111,7 @@ public void flush() {
     }
 
     @Override
-    public void close() {
+    public synchronized void close() {
         flush();
         try {
             randomAccessFile.close();

File: core/src/test/java/org/apache/logging/log4j/core/appender/FastXmlFileAppenderTest.java
Patch:
@@ -71,7 +71,7 @@ public void testFlushAtEndOfBatch() throws Exception {
         assertTrue("line1 incorrect: [" + line1 + "], does not contain: [" + msg1 + "]", line1.equals(msg1));
         
         assertNotNull("line2", line2);
-        final String msg2 = "<log4j:eventSet xmlns:log4j=\"http://logging.apache.org/log4j/\">";
+        final String msg2 = "<log4j:events xmlns:log4j=\"http://logging.apache.org/log4j/\">";
         assertTrue("line2 incorrect: [" + line2 + "], does not contain: [" + msg2 + "]", line2.equals(msg2));
         
         assertNotNull("line3", line3);

File: core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEventHandler.java
Patch:
@@ -41,6 +41,7 @@ public void setSequenceCallback(final Sequence sequenceCallback) {
     public void onEvent(final RingBufferLogEvent event, final long sequence,
             final boolean endOfBatch) throws Exception {
         event.execute(endOfBatch);
+        event.clear();
         
         // notify the BatchEventProcessor that the sequence has progressed.
         // Without this callback the sequence would not be progressed

File: api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java
Patch:
@@ -1470,7 +1470,7 @@ public void printf(Level level, String format, Object... params) {
      * @param params Arguments specified by the format.
      */
     public void printf(Level level, Marker marker, String format, Object... params) {
-        if (isEnabled(level, null, format, params)) {
+        if (isEnabled(level, marker, format, params)) {
             Message msg = new StringFormattedMessage(format, params);
             log(marker, FQCN, level, msg, msg.getThrowable());
         }

File: core/src/main/java/org/apache/logging/log4j/core/pattern/FileLocationPatternConverter.java
Patch:
@@ -21,7 +21,7 @@
 
 
 /**
- * Returns the event's line location information in a StringBuffer.
+ * Returns the event's line location information in a StringBuilder.
  */
 @Plugin(name = "FileLocationPatternConverter", category = "Converter")
 @ConverterKeys({"F", "file" })

File: core/src/main/java/org/apache/logging/log4j/core/config/XMLConfiguration.java
Patch:
@@ -285,7 +285,7 @@ public Configuration reconfigure() {
 
     private void constructHierarchy(final Node node, final Element element) {
         processAttributes(node, element);
-        final StringBuffer buffer = new StringBuffer();
+        final StringBuilder buffer = new StringBuilder();
         final NodeList list = element.getChildNodes();
         final List<Node> children = node.getChildren();
         for (int i = 0; i < list.getLength(); i++) {

File: core/src/main/java/org/apache/logging/log4j/core/helpers/OptionConverter.java
Patch:
@@ -55,7 +55,7 @@ public static String[] concatenateArrays(final String[] l, final String[] r) {
     public static String convertSpecialChars(final String s) {
         char c;
         final int len = s.length();
-        final StringBuffer sbuf = new StringBuffer(len);
+        final StringBuilder sbuf = new StringBuilder(len);
 
         int i = 0;
         while (i < len) {

File: core/src/main/java/org/apache/logging/log4j/core/helpers/Transform.java
Patch:
@@ -52,7 +52,7 @@ public static String escapeTags(final String input) {
             return input;
         }
 
-        //Use a StringBuffer in lieu of String concatenation -- it is
+        //Use a StringBuilder in lieu of String concatenation -- it is
         //much more efficient this way.
 
         final StringBuilder buf = new StringBuilder(input.length() + 6);
@@ -82,7 +82,7 @@ public static String escapeTags(final String input) {
      * Ensures that embedded CDEnd strings (]]>) are handled properly
      * within message, NDC and throwable tag text.
      *
-     * @param buf StringBuffer holding the XML data to this point.  The
+     * @param buf StringBuilder holding the XML data to this point.  The
      *            initial CDStart (<![CDATA[) and final CDEnd (]]>) of the CDATA
      *            section are the responsibility of the calling method.
      * @param str The String that is inserted into an existing CDATA Section within buf.

File: core/src/main/java/org/apache/logging/log4j/core/pattern/DatePatternConverter.java
Patch:
@@ -25,7 +25,7 @@
 
 
 /**
- * Convert and format the event's date in a StringBuffer.
+ * Convert and format the event's date in a StringBuilder.
  */
 @Plugin(name = "DatePatternConverter", category = "Converter")
 @ConverterKeys({"d", "date" })

File: core/src/main/java/org/apache/logging/log4j/core/pattern/LevelPatternConverter.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 
 /**
- * Returns the event's level in a StringBuffer.
+ * Returns the event's level in a StringBuilder.
  */
 @Plugin(name = "LevelPatternConverter", category = "Converter")
 @ConverterKeys({"p", "level" })

File: core/src/main/java/org/apache/logging/log4j/core/pattern/LineLocationPatternConverter.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 
 /**
- * Returns the event's line location information in a StringBuffer.
+ * Returns the event's line location information in a StringBuilder.
  */
 @Plugin(name = "LineLocationPatternConverter", category = "Converter")
 @ConverterKeys({"L", "line" })

File: core/src/main/java/org/apache/logging/log4j/core/pattern/MarkerPatternConverter.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 
 /**
- * Returns the event's rendered message in a StringBuffer.
+ * Returns the event's rendered message in a StringBuilder.
  */
 @Plugin(name = "MarkerPatternConverter", category = "Converter")
 @ConverterKeys({"marker" })

File: core/src/main/java/org/apache/logging/log4j/core/pattern/MessagePatternConverter.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.logging.log4j.message.MultiformatMessage;
 
 /**
- * Returns the event's rendered message in a StringBuffer.
+ * Returns the event's rendered message in a StringBuilder.
  */
 @Plugin(name = "MessagePatternConverter", category = "Converter")
 @ConverterKeys({"m", "msg", "message" })

File: core/src/main/java/org/apache/logging/log4j/core/pattern/MethodLocationPatternConverter.java
Patch:
@@ -21,7 +21,7 @@
 
 
 /**
- * Returns the event's line location information in a StringBuffer.
+ * Returns the event's line location information in a StringBuilder.
  */
 @Plugin(name = "MethodLocationPatternConverter", category = "Converter")
 @ConverterKeys({"M", "method" })

File: core/src/main/java/org/apache/logging/log4j/core/pattern/NDCPatternConverter.java
Patch:
@@ -21,7 +21,7 @@
 
 
 /**
- * Returns the event's NDC in a StringBuffer.
+ * Returns the event's NDC in a StringBuilder.
  */
 @Plugin(name = "NDCPatternConverter", category = "Converter")
 @ConverterKeys({"x", "NDC" })

File: core/src/test/java/org/apache/logging/log4j/core/appender/FastFileAppenderTest.java
Patch:
@@ -52,7 +52,7 @@ public void testFlushAtEndOfBatch() throws Exception {
         reader.close();
         f.delete();
         assertNotNull("line1", line1);
-        assertTrue("line1 correct", line1.contains(msg));
+        assertTrue("line1 incorrect", line1.contains(msg));
 
         final String location = "testFlushAtEndOfBatch";
         assertTrue("no location", !line1.contains(location));

File: core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/FactoryMethodConnectionSource.java
Patch:
@@ -122,7 +122,6 @@ public PrintWriter getLogWriter() throws SQLException {
                 }
 
                 // method must be present to compile on Java 7, @Override must be absent to compile on Java 6
-                @Override
                 @SuppressWarnings("unused")
                 public java.util.logging.Logger getParentLogger() {
                     throw new UnsupportedOperationException();

File: core/src/test/java/org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java
Patch:
@@ -152,7 +152,7 @@ static class Stats {
         long _pct99_99;
         double _latencyRowCount;
         int _throughputRowCount;
-        private final long _averageOpsPerSec;
+        private long _averageOpsPerSec;
 
         // example line: avg=828 99%=1118 99.99%=5028 Count=3125
         public Stats(final String raw) {

File: core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/JPAAppenderTest.java
Patch:
@@ -156,7 +156,7 @@ public void testBaseJpaEntityAppender() throws SQLException {
             final PrintWriter writer = new PrintWriter(outputStream);
             exception.printStackTrace(writer);
             writer.close();
-            final String stackTrace = outputStream.toString();
+            final String stackTrace = outputStream.toString().replace("\r\n", "\n");
 
             final long millis = System.currentTimeMillis();
 
@@ -218,7 +218,7 @@ public void testBasicJpaEntityAppender() throws SQLException {
             final PrintWriter writer = new PrintWriter(outputStream);
             exception.printStackTrace(writer);
             writer.close();
-            final String stackTrace = outputStream.toString();
+            final String stackTrace = outputStream.toString().replace("\r\n", "\n");
 
             final long millis = System.currentTimeMillis();
 

File: api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java
Patch:
@@ -1457,7 +1457,7 @@ public void log(final Level level, final String message, final Throwable t) {
      * @param data   The Message.
      * @param t      A Throwable or null.
      */
-    protected abstract void log(Marker marker, String fqcn, Level level, Message data, Throwable t);
+    public abstract void log(Marker marker, String fqcn, Level level, Message data, Throwable t);
 
     /**
      * Logs a Throwable to be thrown.

File: api/src/test/java/org/apache/logging/log4j/AbstractLoggerTest.java
Patch:
@@ -149,7 +149,7 @@ protected boolean isEnabled(final Level level, final Marker marker, final String
     }
 
     @Override
-    protected void log(final Marker marker, final String fqcn, final Level level, final Message data, final Throwable t) {
+    public void log(final Marker marker, final String fqcn, final Level level, final Message data, final Throwable t) {
         assertTrue("Incorrect Level. Expected " + currentLevel + ", actual " + level, level.equals(currentLevel));
         if (marker == null) {
             if (currentEvent.markerName != null) {

File: log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLogger.java
Patch:
@@ -46,7 +46,7 @@ public SLF4JLogger(final String name, final MessageFactory messageFactory, final
     }
 
     @Override
-    protected void log(final Marker marker, final String fqcn, final Level level, final Message data,
+    public void log(final Marker marker, final String fqcn, final Level level, final Message data,
                        final Throwable t) {
         if (locationAwareLogger != null) {
             if (data instanceof LoggerNameAwareMessage) {

File: core/src/main/java/org/apache/logging/log4j/core/layout/XMLLayout.java
Patch:
@@ -64,7 +64,7 @@
  * <p>The <code>version</code> attribute helps components to correctly
  * interpret output generated by XMLLayout. The value of this
  * attribute should be "1.1" for output generated by log4j versions
- * prior to log4j 1.2 (final release) and "1.2" for release 1.2 and
+ * prior to log4j 1.2 (final release), "1.2" for release 1.2, and "2.0" for release 2.0 and
  * later.
  * <p/>
  * Appenders using this layout should have their encoding

File: core/src/main/java/org/apache/logging/log4j/core/config/JSONConfiguration.java
Patch:
@@ -60,7 +60,7 @@ public class JSONConfiguration extends BaseConfiguration implements Reconfigurab
     private final List<Status> status = new ArrayList<Status>();
 
     private Map<String, String> advertisedConfiguration;
-    
+
     private Object advertisement;
 
     private JsonNode root;
@@ -85,7 +85,7 @@ public JSONConfiguration(final ConfigurationFactory.ConfigurationSource configSo
                 root = i.next();
             }
             processAttributes(rootNode, root);
-            Level status = Level.OFF;
+            Level status = getDefaultStatus();
             boolean verbose = false;
             PrintStream stream = System.out;
             for (final Map.Entry<String, String> entry : rootNode.getAttributes().entrySet()) {

File: core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java
Patch:
@@ -82,7 +82,7 @@ public class AsyncLogger extends Logger {
     private static Clock clock = ClockFactory.getClock();
 
     private static ExecutorService executor = Executors
-            .newSingleThreadExecutor();
+            .newSingleThreadExecutor(new DaemonThreadFactory("AsyncLogger-"));
     private ThreadLocal<Info> threadlocalInfo = new ThreadLocal<Info>();
 
     static {

File: core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/AbstractLogEventWrapperEntity.java
Patch:
@@ -82,7 +82,7 @@ protected AbstractLogEventWrapperEntity(final LogEvent wrappedEvent) {
 
     /**
      * All eventual accessor methods must call this method and delegate the method call to the underlying wrapped event.
-     * Annotated {@link @Transient} so as not to be included in the persisted entity.
+     * Annotated {@link Transient} so as not to be included in the persisted entity.
      * 
      * @return The underlying event from which information is obtained.
      */

File: core/src/main/java/org/apache/logging/log4j/core/appender/SocketAppender.java
Patch:
@@ -115,8 +115,7 @@ public static <S extends Serializable> SocketAppender<S> createAppender(@PluginA
             return null;
         }
 
-        final String prot = protocol != null ? protocol : Protocol.TCP.name();
-        final Protocol p = EnglishEnums.valueOf(Protocol.class, protocol);
+        final Protocol p = EnglishEnums.valueOf(Protocol.class, protocol != null ? protocol : Protocol.TCP.name());
         if (p.equals(Protocol.UDP)) {
             isFlush = true;
         }

File: core/src/main/java/org/apache/logging/log4j/core/helpers/UUIDUtil.java
Patch:
@@ -30,12 +30,12 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 /**
- * Generates a unique id. The generated UUID will be unique for approximately 8,925 years so long as
- * less than 4095 ids are generated per millisecond on the same device (as identified by its MAC adddress).
+ * Generates a unique ID. The generated UUID will be unique for approximately 8,925 years so long as
+ * less than 4095 IDs are generated per millisecond on the same device (as identified by its MAC address).
  */
 public final class UUIDUtil {
     /**
-     * System property that may be used to seed the uuid generation with an integer value.
+     * System property that may be used to seed the UUID generation with an integer value.
      */
     public static final String UUID_SEQUENCE = "org.apache.logging.log4j.uuidSequence";
 

File: core/src/main/java/org/apache/logging/log4j/core/appender/AbstractAppender.java
Patch:
@@ -35,7 +35,7 @@
  * @param <T> The {@link Layout}'s {@link Serializable} type.
  */
 public abstract class AbstractAppender<T extends Serializable> extends AbstractFilterable
-    implements Appender<T>, LifeCycle {
+    implements Appender<T> {
     /**
      * Allow subclasses access to the status logger without creating another instance.
      */

File: core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java
Patch:
@@ -36,7 +36,7 @@
 /**
  * Implementation of a LogEvent.
  */
-public class Log4jLogEvent implements LogEvent, Serializable {
+public class Log4jLogEvent implements LogEvent {
 
     private static final long serialVersionUID = -1351367343806656055L;
     private static final String NOT_AVAIL = "?";

File: core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/AbstractLogEventWrapperEntity.java
Patch:
@@ -219,7 +219,7 @@ public final void setIncludeLocation(final boolean locationRequired) {
     }
 
     /**
-     * Indicates whether this event is the last one in a batch. Annotated {@link @Transient} so as not to be included
+     * Indicates whether this event is the last one in a batch. Annotated {@link Transient @Transient} so as not to be included
      * in the persisted entity.
      *
      * @return whether this event is the last one in a batch.

File: core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/AbstractLogEventWrapperEntity.java
Patch:
@@ -202,7 +202,7 @@ public void setFQCN(final String fqcn) {
     }
 
     /**
-     * Indicates whether the source of the logging request is required downstream. Annotated {@link @Transient} so as
+     * Indicates whether the source of the logging request is required downstream. Annotated {@link Transient @Transient} so as
      * not to be included in the persisted entity.
      *
      * @return whether the source of the logging request is required downstream.

File: core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java
Patch:
@@ -109,7 +109,8 @@ public LoggerContext getContext(final String fqcn, final ClassLoader loader, fin
 
     /**
      * Removes knowledge of a LoggerContext.
-     * @param The context to remove.
+     * 
+     * @param context The context to remove.
      */
     @Override
     public void removeContext(org.apache.logging.log4j.spi.LoggerContext context) {

File: api/src/main/java/org/apache/logging/log4j/spi/LoggerContextFactory.java
Patch:
@@ -48,7 +48,8 @@ public interface LoggerContextFactory {
 
     /**
      * Removes knowledge of a LoggerContext.
-     * @param The context to remove.
+     * 
+     * @param context The context to remove.
      */
     void removeContext(LoggerContext context);
 }

File: flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java
Patch:
@@ -272,7 +272,6 @@ public FlumePersistentManager createManager(final String name, final FactoryData
                 File dir = new File(data.dataDir);
                 FileUtils.mkdir(dir, true);
                 final EnvironmentConfig dbEnvConfig = new EnvironmentConfig();
-                dbEnvConfig.setConfigParam(EnvironmentConfig.CONSOLE_LOGGING_LEVEL, Level.SEVERE.toString());
                 dbEnvConfig.setTransactional(true);
                 dbEnvConfig.setAllowCreate(true);
                 dbEnvConfig.setLockTimeout(5, TimeUnit.SECONDS);
@@ -466,7 +465,7 @@ public void run() {
                         LOGGER.warn("WriterThread encountered an exception. Continuing.", ex);
                     }
                 } else {
-                    while (!shutdown && database.count() < batchSize && nextBatch > now) {
+                    while (!shutdown && (database.count() == 0 || database.count() < batchSize && nextBatch > now)) {
                         try {
                             long interval = nextBatch - now;
                             queue.poll(interval, TimeUnit.MILLISECONDS);

File: flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java
Patch:
@@ -51,6 +51,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.locks.ReadWriteLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
+import java.util.logging.Level;
 
 /**
  *
@@ -271,6 +272,7 @@ public FlumePersistentManager createManager(final String name, final FactoryData
                 File dir = new File(data.dataDir);
                 FileUtils.mkdir(dir, true);
                 final EnvironmentConfig dbEnvConfig = new EnvironmentConfig();
+                dbEnvConfig.setConfigParam(EnvironmentConfig.CONSOLE_LOGGING_LEVEL, Level.SEVERE.toString());
                 dbEnvConfig.setTransactional(true);
                 dbEnvConfig.setAllowCreate(true);
                 dbEnvConfig.setLockTimeout(5, TimeUnit.SECONDS);

File: flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeEmbeddedManager.java
Patch:
@@ -269,7 +269,7 @@ private Properties createProperties(final String name, final Agent[] agents, fin
 
                     if (upperKey.startsWith(name.toUpperCase(Locale.ENGLISH))) {
                         final String msg =
-                            "Specification of the agent name is allowed in Flume Appender configuration: " + key;
+                            "Specification of the agent name is not allowed in Flume Appender configuration: " + key;
                         LOGGER.error(msg);
                         throw new ConfigurationException(msg);
                     }

File: core/src/main/java/org/apache/logging/log4j/core/config/DefaultConfiguration.java
Patch:
@@ -16,19 +16,19 @@
  */
 package org.apache.logging.log4j.core.config;
 
+import java.io.Serializable;
+
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.appender.ConsoleAppender;
 import org.apache.logging.log4j.core.layout.PatternLayout;
 import org.apache.logging.log4j.util.PropertiesUtil;
 
-import java.io.Serializable;
-
 /**
  * The default configuration writes all output to the Console using the default logging level. You configure default
  * logging level by setting the system property "org.apache.logging.log4j.level" to a level name. If you do not
- * specify the property, Log4J uses the ERROR Level. Log Events will be printed using the basic formatting provided
+ * specify the property, Log4j uses the ERROR Level. Log Events will be printed using the basic formatting provided
  * by each Message.
  */
 public class DefaultConfiguration extends BaseConfiguration {

File: core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java
Patch:
@@ -42,7 +42,7 @@
 /**
  * Creates MBeans to instrument various classes in the log4j class hierarchy.
  * <p>
- * All instrumentation for Log4J2 classes can be disabled by setting system
+ * All instrumentation for Log4j 2 classes can be disabled by setting system
  * property {@code -Dlog4j2.disable.jmx=true}.
  */
 public final class Server {

File: core/src/test/java/org/apache/logging/log4j/PerformanceRun.java
Patch:
@@ -30,7 +30,7 @@
 import org.junit.Test;
 
 /**
- * Use this class to analyze Log4J-only performance.
+ * Use this class to analyze Log4j-only performance.
  * <p/>
  * See {@linkplain PerformanceComparison} to compare performance with other logging frameworks.
  * 

File: jmx-gui/src/main/java/org/apache/logging/log4j/jmx/gui/ClientEditConfigPanel.java
Patch:
@@ -38,7 +38,7 @@
 import org.apache.logging.log4j.core.jmx.LoggerContextAdminMBean;
 
 /**
- * Panel for editing Log4J configurations.
+ * Panel for editing Log4j configurations.
  */
 public class ClientEditConfigPanel extends JPanel {
     private static final long serialVersionUID = -7544651740950723394L;

File: jmx-gui/src/main/java/org/apache/logging/log4j/jmx/gui/ClientGUI.java
Patch:
@@ -53,7 +53,7 @@
 
 /**
  * Swing GUI that connects to a Java process via JMX and allows the user to view and
- * modify the log4j2 configuration, as well as monitor status logs.
+ * modify the Log4j 2 configuration, as well as monitor status logs.
  * 
  * @see <a href=
  *      "http://docs.oracle.com/javase/6/docs/technotes/guides/management/jconsole.html"
@@ -168,7 +168,7 @@ public static void main(final String[] args) throws Exception {
         }
         final JMXConnector connector = JMXConnectorFactory.connect(url, paramMap);
         final Client client = new Client(connector);
-        final String title = "Log4J2 JMX Client - " + url;
+        final String title = "Log4j JMX Client - " + url;
 
         SwingUtilities.invokeLater(new Runnable() {
             @Override

File: core/src/main/java/org/apache/logging/log4j/core/layout/XMLLayout.java
Patch:
@@ -239,7 +239,7 @@ public Map<String, String> getContentFormat() {
      * @return The content type.
      */
     public String getContentType() {
-        return "text/xml";
+        return "text/xml; charset=" + this.getCharset();
     }
 
     List<String> getThrowableString(final Throwable throwable) {

File: core/src/main/java/org/apache/logging/log4j/core/layout/HTMLLayout.java
Patch:
@@ -208,7 +208,7 @@ public Map<String, String> getContentFormat() {
      * @return The content type.
      */
     public String getContentType() {
-        return "text/html";
+        return "text/html; charset=" + this.getCharset();
     }
 
     private void appendThrowableAsHTML(final Throwable throwable, final StringBuilder sbuf) {

File: core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/package-info.java
Patch:
@@ -19,4 +19,3 @@
  * a JDBC driver on your classpath for the database you wish to log to.
  */
 package org.apache.logging.log4j.core.appender.db.jdbc;
-

File: core/src/main/java/org/apache/logging/log4j/core/appender/db/nosql/couch/package-info.java
Patch:
@@ -18,4 +18,3 @@
  * The classes in this package contain the Apache CouchDB provider for the NoSQL Appender.
  */
 package org.apache.logging.log4j.core.appender.db.nosql.couch;
-

File: core/src/main/java/org/apache/logging/log4j/core/appender/db/nosql/mongo/package-info.java
Patch:
@@ -18,4 +18,3 @@
  * The classes in this package contain the MongoDB provider for the NoSQL Appender.
  */
 package org.apache.logging.log4j.core.appender.db.nosql.mongo;
-

File: core/src/main/java/org/apache/logging/log4j/core/appender/db/nosql/package-info.java
Patch:
@@ -29,4 +29,3 @@
  * </ul>
  */
 package org.apache.logging.log4j.core.appender.db.nosql;
-

File: core/src/main/java/org/apache/logging/log4j/core/appender/db/package-info.java
Patch:
@@ -19,4 +19,3 @@
  * accessing databases.
  */
 package org.apache.logging.log4j.core.appender.db;
-

File: core/src/main/java/org/apache/logging/log4j/core/net/JMSQueueReceiver.java
Patch:
@@ -28,6 +28,7 @@
 import javax.naming.NamingException;
 import java.io.BufferedReader;
 import java.io.InputStreamReader;
+import java.nio.charset.Charset;
 
 /**
  * Receives Log Events over a JMS Queue. This implementation expects that all messages will
@@ -81,7 +82,8 @@ public static void main(final String[] args) throws Exception {
 
         new JMSQueueReceiver(qcfBindingName, queueBindingName, username, password);
 
-        final BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));
+        final Charset enc = Charset.defaultCharset();
+        final BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in, enc));
         // Loop until the word "exit" is typed
         System.out.println("Type \"exit\" to quit JMSQueueReceiver.");
         while (true) {

File: core/src/main/java/org/apache/logging/log4j/core/net/JMSTopicReceiver.java
Patch:
@@ -28,6 +28,7 @@
 import javax.naming.NamingException;
 import java.io.BufferedReader;
 import java.io.InputStreamReader;
+import java.nio.charset.Charset;
 
 /**
  * Receives Topic messages that contain LogEvents. This implementation expects that all messages
@@ -80,7 +81,8 @@ public static void main(final String[] args) throws Exception {
 
         new JMSTopicReceiver(tcfBindingName, topicBindingName, username, password);
 
-        final BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));
+        final Charset enc = Charset.defaultCharset();
+        final BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in, enc));
         // Loop until the word "exit" is typed
         System.out.println("Type \"exit\" to quit JMSTopicReceiver.");
         while (true) {

File: core/src/main/java/org/apache/logging/log4j/core/net/SocketServer.java
Patch:
@@ -38,6 +38,7 @@
 import java.net.Socket;
 import java.net.URI;
 import java.net.URL;
+import java.nio.charset.Charset;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
@@ -93,7 +94,8 @@ public static void main(final String[] args) throws Exception {
         final SocketServer sserver = new SocketServer(port);
         final Thread server = new Thread(sserver);
         server.start();
-        final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
+        final Charset enc = Charset.defaultCharset();
+        final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in, enc));
         while (true) {
             final String line = reader.readLine();
             if (line.equalsIgnoreCase("Quit") || line.equalsIgnoreCase("Stop") || line.equalsIgnoreCase("Exit")) {

File: jmx-gui/src/main/java/org/apache/logging/log4j/jmx/gui/ClientGUI.java
Patch:
@@ -56,7 +56,7 @@
  * modify the log4j2 configuration, as well as monitor status logs.
  * 
  * @see <a href=
- *      "http://docs.oracle.com/javase/6/docs/technotes/guides/management/jconsole.html
+ *      "http://docs.oracle.com/javase/6/docs/technotes/guides/management/jconsole.html"
  *      >http://docs.oracle.com/javase/6/docs/technotes/guides/management/jconsole.html</a >
  */
 public class ClientGUI extends JPanel implements NotificationListener {

File: core/src/main/java/org/apache/logging/log4j/core/pattern/LevelPatternConverter.java
Patch:
@@ -65,8 +65,9 @@ public static LevelPatternConverter newInstance(final String[] options) {
             final Level level = Level.toLevel(pair[0].trim(), null);
             if (level == null) {
                 LOGGER.error("Invalid Level {}", pair[0].trim());
+            } else {
+                levelMap.put(level, pair[1].trim());
             }
-            levelMap.put(level, pair[1].trim());
         }
         if (levelMap.size() == 0) {
             return INSTANCE;

File: api/src/main/java/org/apache/logging/log4j/message/StructuredDataId.java
Patch:
@@ -58,7 +58,7 @@ protected StructuredDataId(final String name, final String[] required, final Str
         if (name != null) {
             if (name.length() > MAX_LENGTH) {
                 throw new IllegalArgumentException(String.format("Length of id %s exceeds maximum of %d characters",
-                        MAX_LENGTH, name));
+                        name, MAX_LENGTH));
             }
             index = name.indexOf("@");
         }

File: core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java
Patch:
@@ -46,7 +46,7 @@
  *
  * @param <T> The {@link Layout}'s {@link Serializable} type.
  */
-@Plugin(name = "Async", type = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "Async", category = "Core", elementType = "appender", printObject = true)
 public final class AsyncAppender<T extends Serializable> extends AbstractAppender<T> {
 
     private static final int DEFAULT_QUEUE_SIZE = 128;

File: core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java
Patch:
@@ -42,7 +42,7 @@
  * and then call getBytes which may use a configured encoding or the system
  * default. OTOH, a Writer cannot print byte streams.
  */
-@Plugin(name = "Console", type = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "Console", category = "Core", elementType = "appender", printObject = true)
 public final class ConsoleAppender<T extends Serializable> extends AbstractOutputStreamAppender<T> {
 
     private static ConsoleManagerFactory factory = new ConsoleManagerFactory();

File: core/src/main/java/org/apache/logging/log4j/core/appender/FailoverAppender.java
Patch:
@@ -39,7 +39,7 @@
  * to a different appender. Hopefully it is obvious that the Appenders must be configured
  * to not suppress exceptions for the FailoverAppender to work.
  */
-@Plugin(name = "Failover", type = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "Failover", category = "Core", elementType = "appender", printObject = true)
 public final class FailoverAppender<T extends Serializable> extends AbstractAppender<T> {
 
     private static final int DEFAULT_INTERVAL = 60 * Constants.MILLIS_IN_SECONDS;

File: core/src/main/java/org/apache/logging/log4j/core/appender/FailoversPlugin.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * The array of failover Appenders.
  */
-@Plugin(name = "failovers", type = "Core")
+@Plugin(name = "failovers", category = "Core")
 public final class FailoversPlugin {
 
     private static final Logger LOGGER = StatusLogger.getLogger();

File: core/src/main/java/org/apache/logging/log4j/core/appender/FileAppender.java
Patch:
@@ -34,7 +34,7 @@
 /**
  * File Appender.
  */
-@Plugin(name = "File", type = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "File", category = "Core", elementType = "appender", printObject = true)
 public final class FileAppender<T extends Serializable> extends AbstractOutputStreamAppender<T> {
 
     private final String fileName;
@@ -90,7 +90,7 @@ public String getFileName() {
      * @param filter The filter, if any, to use.
      * @param advertise "true" if the appender configuration should be advertised, "false" otherwise.
      * @param advertiseURI The advertised URI which can be used to retrieve the file contents.
-     * @param config The Configuration               
+     * @param config The Configuration
      * @return The FileAppender.
      */
     @PluginFactory

File: core/src/main/java/org/apache/logging/log4j/core/appender/JMSQueueAppender.java
Patch:
@@ -31,7 +31,7 @@
 /**
  * Appender to write to a JMS Queue.
  */
-@Plugin(name = "JMSQueue", type = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "JMSQueue", category = "Core", elementType = "appender", printObject = true)
 public final class JMSQueueAppender<T extends Serializable> extends AbstractAppender<T> {
 
     private final JMSQueueManager manager;

File: core/src/main/java/org/apache/logging/log4j/core/appender/JMSTopicAppender.java
Patch:
@@ -31,7 +31,7 @@
 /**
  * Appender to write to a JMS Topic.
  */
-@Plugin(name = "JMSTopic", type = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "JMSTopic", category = "Core", elementType = "appender", printObject = true)
 public final class JMSTopicAppender<T extends Serializable> extends AbstractAppender<T> {
 
     private final JMSTopicManager manager;

File: core/src/main/java/org/apache/logging/log4j/core/appender/RollingFileAppender.java
Patch:
@@ -39,7 +39,7 @@
 /**
  * An appender that writes to files and can roll over at intervals.
  */
-@Plugin(name = "RollingFile", type = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "RollingFile", category = "Core", elementType = "appender", printObject = true)
 public final class RollingFileAppender<T extends Serializable> extends AbstractOutputStreamAppender<T> {
 
     private final String fileName;

File: core/src/main/java/org/apache/logging/log4j/core/appender/SMTPAppender.java
Patch:
@@ -48,7 +48,7 @@
  * message is appended. This can be modified by setting a filter for the
  * appender.
  */
-@Plugin(name = "SMTP", type = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "SMTP", category = "Core", elementType = "appender", printObject = true)
 public final class SMTPAppender<T extends Serializable> extends AbstractAppender<T> {
 
     private static final int DEFAULT_BUFFER_SIZE = 512;

File: core/src/main/java/org/apache/logging/log4j/core/appender/SocketAppender.java
Patch:
@@ -39,7 +39,7 @@
 /**
  * An Appender that delivers events over socket connections. Supports both TCP and UDP.
  */
-@Plugin(name = "Socket", type = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "Socket", category = "Core", elementType = "appender", printObject = true)
 public class SocketAppender<T extends Serializable> extends AbstractOutputStreamAppender<T> {
     private Object advertisement;
     private final Advertiser advertiser;

File: core/src/main/java/org/apache/logging/log4j/core/appender/SyslogAppender.java
Patch:
@@ -35,7 +35,7 @@
 /**
  * The Syslog Appender.
  */
-@Plugin(name = "Syslog", type = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "Syslog", category = "Core", elementType = "appender", printObject = true)
 public class SyslogAppender<T extends Serializable> extends SocketAppender<T> {
 
     private static final String BSD = "bsd";

File: core/src/main/java/org/apache/logging/log4j/core/appender/rewrite/MapRewritePolicy.java
Patch:
@@ -34,7 +34,7 @@
 /**
  * This policy modifies events by replacing or possibly adding keys and values to the MapMessage.
  */
-@Plugin(name = "MapRewritePolicy", type = "Core", elementType = "rewritePolicy", printObject = true)
+@Plugin(name = "MapRewritePolicy", category = "Core", elementType = "rewritePolicy", printObject = true)
 public final class MapRewritePolicy implements RewritePolicy {
     /**
      * Allow subclasses access to the status logger without creating another instance.

File: core/src/main/java/org/apache/logging/log4j/core/appender/rewrite/PropertiesRewritePolicy.java
Patch:
@@ -35,7 +35,7 @@
 /**
  * This policy modifies events by replacing or possibly adding keys and values to the MapMessage.
  */
-@Plugin(name = "PropertiesRewritePolicy", type = "Core", elementType = "rewritePolicy", printObject = true)
+@Plugin(name = "PropertiesRewritePolicy", category = "Core", elementType = "rewritePolicy", printObject = true)
 public final class PropertiesRewritePolicy implements RewritePolicy {
     /**
      * Allow subclasses access to the status logger without creating another instance.

File: core/src/main/java/org/apache/logging/log4j/core/appender/rewrite/RewriteAppender.java
Patch:
@@ -37,7 +37,7 @@
 /**
  * This Appender allows the logging event to be manipulated before it is processed by other Appenders.
  */
-@Plugin(name = "Rewrite", type = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "Rewrite", category = "Core", elementType = "appender", printObject = true)
 public final class RewriteAppender<T extends Serializable> extends AbstractAppender<T> {
     private final Configuration config;
     private final ConcurrentMap<String, AppenderControl> appenders = new ConcurrentHashMap<String, AppenderControl>();

File: core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CompositeTriggeringPolicy.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Triggering policy that wraps other policies.
  */
-@Plugin(name = "Policies", type = "Core", printObject = true)
+@Plugin(name = "Policies", category = "Core", printObject = true)
 public final class CompositeTriggeringPolicy implements TriggeringPolicy {
 
     private final TriggeringPolicy[] policies;

File: core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java
Patch:
@@ -63,7 +63,7 @@
  * <p>Given that this rollover algorithm requires as many file renaming
  * operations as the window size, large window sizes are discouraged.
  */
-@Plugin(name = "DefaultRolloverStrategy", type = "Core", printObject = true)
+@Plugin(name = "DefaultRolloverStrategy", category = "Core", printObject = true)
 public class DefaultRolloverStrategy implements RolloverStrategy {
     /**
      * Allow subclasses access to the status logger without creating another instance.

File: core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java
Patch:
@@ -28,7 +28,7 @@
  * always return false.
  */
 
-@Plugin(name = "OnStartupTriggeringPolicy", type = "Core", printObject = true)
+@Plugin(name = "OnStartupTriggeringPolicy", category = "Core", printObject = true)
 public class OnStartupTriggeringPolicy implements TriggeringPolicy {
     private static final long JVM_START_TIME = ManagementFactory.getRuntimeMXBean().getStartTime();
 

File: core/src/main/java/org/apache/logging/log4j/core/appender/rolling/SizeBasedTriggeringPolicy.java
Patch:
@@ -32,7 +32,7 @@
 /**
  *
  */
-@Plugin(name = "SizeBasedTriggeringPolicy", type = "Core", printObject = true)
+@Plugin(name = "SizeBasedTriggeringPolicy", category = "Core", printObject = true)
 public class SizeBasedTriggeringPolicy implements TriggeringPolicy {
     /**
      * Allow subclasses access to the status logger without creating another instance.

File: core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Triggering Policy that causes a rollover based on time.
  */
-@Plugin(name = "TimeBasedTriggeringPolicy", type = "Core", printObject = true)
+@Plugin(name = "TimeBasedTriggeringPolicy", category = "Core", printObject = true)
 public final class TimeBasedTriggeringPolicy implements TriggeringPolicy {
 
     private long nextRollover;

File: core/src/main/java/org/apache/logging/log4j/core/appender/routing/Route.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * A Route to an appender.
  */
-@Plugin(name = "Route", type = "Core", printObject = true, deferChildren = true)
+@Plugin(name = "Route", category = "Core", printObject = true, deferChildren = true)
 public final class Route {
     private static final Logger LOGGER = StatusLogger.getLogger();
 

File: core/src/main/java/org/apache/logging/log4j/core/appender/routing/Routes.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Used to contain the individual Route elements.
  */
-@Plugin(name = "Routes", type = "Core", printObject = true)
+@Plugin(name = "Routes", category = "Core", printObject = true)
 public final class Routes {
 
     private static final Logger LOGGER = StatusLogger.getLogger();

File: core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java
Patch:
@@ -43,7 +43,7 @@
  * the form "$${[key:]token}". The pattern will be resolved each time the Appender is called using
  * the built in StrSubstitutor and the StrLookup plugin that matches the specified key.
  */
-@Plugin(name = "Routing", type = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "Routing", category = "Core", elementType = "appender", printObject = true)
 public final class RoutingAppender<T extends Serializable> extends AbstractAppender<T> {
     private static final String DEFAULT_KEY = "ROUTING_APPENDER_DEFAULT";
     private final Routes routes;

File: core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java
Patch:
@@ -63,7 +63,7 @@
  * with immediateFlush=false, there will never be any items left in the buffer;
  * all log events will all be written to disk in a very efficient manner.
  */
-@Plugin(name = "asyncLogger", type = "Core", printObject = true)
+@Plugin(name = "asyncLogger", category = "Core", printObject = true)
 public class AsyncLoggerConfig extends LoggerConfig {
 
     private static final Logger LOGGER = StatusLogger.getLogger();
@@ -193,7 +193,7 @@ private static boolean includeLocation(String includeLocationConfigValue) {
     /**
      * An asynchronous root Logger.
      */
-    @Plugin(name = "asyncRoot", type = "Core", printObject = true)
+    @Plugin(name = "asyncRoot", category = "Core", printObject = true)
     public static class RootLogger extends LoggerConfig {
 
         @PluginFactory

File: core/src/main/java/org/apache/logging/log4j/core/config/AppenderRef.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * An Appender reference.
  */
-@Plugin(name = "appender-ref", type = "Core", printObject = true)
+@Plugin(name = "appender-ref", category = "Core", printObject = true)
 public final class AppenderRef {
     private static final Logger LOGGER = StatusLogger.getLogger();
 

File: core/src/main/java/org/apache/logging/log4j/core/config/DefaultAdvertiser.java
Patch:
@@ -24,11 +24,11 @@
 /**
  * The default advertiser does not do anything.
  */
-@Plugin(name = "default", type = "Core", elementType = "advertiser", printObject = false)
+@Plugin(name = "default", category = "Core", elementType = "advertiser", printObject = false)
 public class DefaultAdvertiser implements Advertiser {
     /**
      * Does nothing.
-     * 
+     *
      * @return null
      */
     public Object advertise(Map<String, String> properties) {

File: core/src/main/java/org/apache/logging/log4j/core/config/JSONConfigurationFactory.java
Patch:
@@ -22,7 +22,7 @@
 /**
  *
  */
-@Plugin(name = "JSONConfigurationFactory", type = "ConfigurationFactory")
+@Plugin(name = "JSONConfigurationFactory", category = "ConfigurationFactory")
 @Order(6)
 public class JSONConfigurationFactory extends ConfigurationFactory {
 

File: core/src/main/java/org/apache/logging/log4j/core/config/Property.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Represents a key/value pair in the configuration.
  */
-@Plugin(name = "property", type = "Core", printObject = true)
+@Plugin(name = "property", category = "Core", printObject = true)
 public final class Property {
 
     private static final Logger LOGGER = StatusLogger.getLogger();

File: core/src/main/java/org/apache/logging/log4j/core/config/XMLConfigurationFactory.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Factory to construct an XMLConfiguration.
  */
-@Plugin(name = "XMLConfigurationFactory", type = "ConfigurationFactory")
+@Plugin(name = "XMLConfigurationFactory", category = "ConfigurationFactory")
 @Order(5)
 public class XMLConfigurationFactory extends ConfigurationFactory {
 

File: core/src/main/java/org/apache/logging/log4j/core/config/plugins/AppendersPlugin.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * An Appender container.
  */
-@Plugin(name = "appenders", type = "Core")
+@Plugin(name = "appenders", category = "Core")
 public final class AppendersPlugin {
 
     private AppendersPlugin() {

File: core/src/main/java/org/apache/logging/log4j/core/config/plugins/LoggersPlugin.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Container of Logger objects.
  */
-@Plugin(name = "loggers", type = "Core")
+@Plugin(name = "loggers", category = "Core")
 public final class LoggersPlugin {
 
     private LoggersPlugin() {

File: core/src/main/java/org/apache/logging/log4j/core/config/plugins/Plugin.java
Patch:
@@ -33,7 +33,7 @@
     String EMPTY = "";
 
     String name();
-    String type();
+    String category();
     String elementType() default EMPTY;
     boolean printObject() default false;
     boolean deferChildren() default false;

File: core/src/main/java/org/apache/logging/log4j/core/config/plugins/PluginManager.java
Patch:
@@ -174,7 +174,7 @@ public void collectPlugins(boolean preLoad, final String pkgs) {
         }
         for (final Class<?> clazz : resolver.getClasses()) {
             final Plugin plugin = clazz.getAnnotation(Plugin.class);
-            final String pluginType = plugin.type();
+            final String pluginType = plugin.category();
             if (!pluginTypeMap.containsKey(pluginType)) {
                 pluginTypeMap.putIfAbsent(pluginType, new ConcurrentHashMap<String, PluginType>());
             }

File: core/src/main/java/org/apache/logging/log4j/core/config/plugins/PropertiesPlugin.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * Handles properties defined in the configuration.
  */
-@Plugin(name = "properties", type = "Core", printObject = true)
+@Plugin(name = "properties", category = "Core", printObject = true)
 public final class PropertiesPlugin {
 
     private PropertiesPlugin() {

File: core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java
Patch:
@@ -52,7 +52,7 @@
  * </code><br>
  */
 
-@Plugin(name = "BurstFilter", type = "Core", elementType = "filter", printObject = true)
+@Plugin(name = "BurstFilter", category = "Core", elementType = "filter", printObject = true)
 public final class BurstFilter extends AbstractFilter {
 
     private static final long NANOS_IN_SECONDS =  1000000000;

File: core/src/main/java/org/apache/logging/log4j/core/filter/CompositeFilter.java
Patch:
@@ -36,7 +36,7 @@
 /**
  * Composes and invokes one or more filters.
  */
-@Plugin(name = "filters", type = "Core", printObject = true)
+@Plugin(name = "filters", category = "Core", printObject = true)
 public final class CompositeFilter implements Iterable<Filter>, Filter, LifeCycle {
 
     private final List<Filter> filters;

File: core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java
Patch:
@@ -34,7 +34,7 @@
 /**
  * Compare against a log level that is associated with an MDC value.
  */
-@Plugin(name = "DynamicThresholdFilter", type = "Core", elementType = "filter", printObject = true)
+@Plugin(name = "DynamicThresholdFilter", category = "Core", elementType = "filter", printObject = true)
 public final class DynamicThresholdFilter extends AbstractFilter {
     private Map<String, Level> levelMap = new HashMap<String, Level>();
     private Level defaultThreshold = Level.ERROR;

File: core/src/main/java/org/apache/logging/log4j/core/filter/MapFilter.java
Patch:
@@ -36,7 +36,7 @@
 /**
  * A Filter that operates on a Map.
  */
-@Plugin(name = "MapFilter", type = "Core", elementType = "filter", printObject = true)
+@Plugin(name = "MapFilter", category = "Core", elementType = "filter", printObject = true)
 public class MapFilter extends AbstractFilter {
     private final Map<String, List<String>> map;
 

File: core/src/main/java/org/apache/logging/log4j/core/filter/MarkerFilter.java
Patch:
@@ -30,7 +30,7 @@
  * configured marker as a parent.
  *
  */
-@Plugin(name = "MarkerFilter", type = "Core", elementType = "filter", printObject = true)
+@Plugin(name = "MarkerFilter", category = "Core", elementType = "filter", printObject = true)
 public final class MarkerFilter extends AbstractFilter {
 
     private final String name;

File: core/src/main/java/org/apache/logging/log4j/core/filter/RegexFilter.java
Patch:
@@ -36,7 +36,7 @@
  * (false). The default is false.
  *
  */
-@Plugin(name = "RegexFilter", type = "Core", elementType = "filter", printObject = true)
+@Plugin(name = "RegexFilter", category = "Core", elementType = "filter", printObject = true)
 public final class RegexFilter extends AbstractFilter {
 
     private final Pattern pattern;

File: core/src/main/java/org/apache/logging/log4j/core/filter/StructuredDataFilter.java
Patch:
@@ -36,7 +36,7 @@
 /**
  * Filter based on data in a StructuredDataMessage.
  */
-@Plugin(name = "StructuredDataFilter", type = "Core", elementType = "filter", printObject = true)
+@Plugin(name = "StructuredDataFilter", category = "Core", elementType = "filter", printObject = true)
 public final class StructuredDataFilter extends MapFilter {
 
     private StructuredDataFilter(final Map<String, List<String>> map, final boolean oper, final Result onMatch,

File: core/src/main/java/org/apache/logging/log4j/core/filter/ThreadContextMapFilter.java
Patch:
@@ -37,7 +37,7 @@
 /**
  * Filter based on a value in the Thread Context Map (MDC).
  */
-@Plugin(name = "ThreadContextMapFilter", type = "Core", elementType = "filter", printObject = true)
+@Plugin(name = "ThreadContextMapFilter", category = "Core", elementType = "filter", printObject = true)
 public class ThreadContextMapFilter extends MapFilter {
 
     private final String key;

File: core/src/main/java/org/apache/logging/log4j/core/filter/ThresholdFilter.java
Patch:
@@ -33,7 +33,7 @@
  *
  * The default Level is ERROR.
  */
-@Plugin(name = "ThresholdFilter", type = "Core", elementType = "filter", printObject = true)
+@Plugin(name = "ThresholdFilter", category = "Core", elementType = "filter", printObject = true)
 public final class ThresholdFilter extends AbstractFilter {
 
     private final Level level;

File: core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * Filters events that fall within a specified time period in each day.
  */
-@Plugin(name = "TimeFilter", type = "Core", elementType = "filter", printObject = true)
+@Plugin(name = "TimeFilter", category = "Core", elementType = "filter", printObject = true)
 public final class TimeFilter extends AbstractFilter {
     /**
      * Length of hour in milliseconds.

File: core/src/main/java/org/apache/logging/log4j/core/helpers/KeyValuePair.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Key/Value pair configuration item.
  */
-@Plugin(name = "KeyValuePair", type = "Core", printObject = true)
+@Plugin(name = "KeyValuePair", category = "Core", printObject = true)
 public class KeyValuePair {
 
     private final String key;

File: core/src/main/java/org/apache/logging/log4j/core/layout/HTMLLayout.java
Patch:
@@ -43,7 +43,7 @@
  * Appenders using this layout should have their encoding set to UTF-8 or UTF-16, otherwise events containing
  * non ASCII characters could result in corrupted log files.
  */
-@Plugin(name = "HTMLLayout", type = "Core", elementType = "layout", printObject = true)
+@Plugin(name = "HTMLLayout", category = "Core", elementType = "layout", printObject = true)
 public final class HTMLLayout extends AbstractStringLayout {
 
     private static final int BUF_SIZE = 256;
@@ -193,7 +193,7 @@ public String toSerializable(final LogEvent event) {
     }
 
     /**
-     * HTMLLayout's format is sufficiently specified via the content type.  The format could be defined via a DTD, 
+     * HTMLLayout's format is sufficiently specified via the content type.  The format could be defined via a DTD,
      * but isn't at this time - returning empty Map/unspecified.
      * @return empty Map
      */

File: core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java
Patch:
@@ -48,7 +48,7 @@
  *
  * See the Log4j Manual for details on the supported pattern converters.
  */
-@Plugin(name = "PatternLayout", type = "Core", elementType = "layout", printObject = true)
+@Plugin(name = "PatternLayout", category = "Core", elementType = "layout", printObject = true)
 public final class PatternLayout extends AbstractStringLayout {
     /**
      * Default pattern string for log output. Currently set to the

File: core/src/main/java/org/apache/logging/log4j/core/layout/RFC5424Layout.java
Patch:
@@ -51,7 +51,7 @@
 /**
  * Formats a log event in accordance with RFC 5424.
  */
-@Plugin(name = "RFC5424Layout", type = "Core", elementType = "layout", printObject = true)
+@Plugin(name = "RFC5424Layout", category = "Core", elementType = "layout", printObject = true)
 public final class RFC5424Layout extends AbstractStringLayout {
 
     /**
@@ -415,8 +415,8 @@ private void appendMap(final String prefix, final Map<String, String> map, final
                 if (prefix != null) {
                     sb.append(prefix);
                 }
-                sb.append(escapeNewlines(escapeSDParams(entry.getKey()),escapeNewLine)).append("=\"")
-                  .append(escapeNewlines(escapeSDParams(entry.getValue()),escapeNewLine)).append("\"");
+                sb.append(escapeNewlines(escapeSDParams(entry.getKey()), escapeNewLine)).append("=\"")
+                  .append(escapeNewlines(escapeSDParams(entry.getValue()), escapeNewLine)).append("\"");
             }
         }
     }

File: core/src/main/java/org/apache/logging/log4j/core/layout/SerializedLayout.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * Format a LogEvent in its serialized form.
  */
-@Plugin(name = "SerializedLayout", type = "Core", elementType = "layout", printObject = true)
+@Plugin(name = "SerializedLayout", category = "Core", elementType = "layout", printObject = true)
 public final class SerializedLayout extends AbstractLayout<LogEvent> {
 
     private static byte[] header;
@@ -101,7 +101,7 @@ public byte[] getHeader() {
      * @return empty Map
      */
     public Map<String, String> getContentFormat() {
-        return new HashMap<String, String>();    
+        return new HashMap<String, String>();
     }
 
     /**

File: core/src/main/java/org/apache/logging/log4j/core/layout/SyslogLayout.java
Patch:
@@ -39,7 +39,7 @@
 /**
  * Formats a log event as a BSD Log record.
  */
-@Plugin(name = "SyslogLayout", type = "Core", elementType = "layout", printObject = true)
+@Plugin(name = "SyslogLayout", category = "Core", elementType = "layout", printObject = true)
 public class SyslogLayout extends AbstractStringLayout {
     /**
      * Match newlines in a platform-independent manner.

File: core/src/main/java/org/apache/logging/log4j/core/layout/XMLLayout.java
Patch:
@@ -72,7 +72,7 @@
  * non ASCII characters could result in corrupted
  * log files.
  */
-@Plugin(name = "XMLLayout", type = "Core", elementType = "layout", printObject = true)
+@Plugin(name = "XMLLayout", category = "Core", elementType = "layout", printObject = true)
 public class XMLLayout extends AbstractStringLayout {
 
     private static final int DEFAULT_SIZE = 256;

File: core/src/main/java/org/apache/logging/log4j/core/lookup/ContextMapLookup.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Looks up keys from system properties.
  */
-@Plugin(name = "ctx", type = "Lookup")
+@Plugin(name = "ctx", category = "Lookup")
 public class ContextMapLookup implements StrLookup {
 
     /**

File: core/src/main/java/org/apache/logging/log4j/core/lookup/DateLookup.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * Formats the current date or the date in the LogEvent. The "key" is used as the format String.
  */
-@Plugin(name = "date", type = "Lookup")
+@Plugin(name = "date", category = "Lookup")
 public class DateLookup implements StrLookup {
 
     private static final Logger LOGGER = StatusLogger.getLogger();

File: core/src/main/java/org/apache/logging/log4j/core/lookup/EnvironmentLookup.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Looks up keys from environment variables.
  */
-@Plugin(name = "env", type = "Lookup")
+@Plugin(name = "env", category = "Lookup")
 public class EnvironmentLookup implements StrLookup {
 
     /**

File: core/src/main/java/org/apache/logging/log4j/core/lookup/MapLookup.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * The basis for a lookup based on a Map.
  */
-@Plugin(name = "map", type = "Lookup")
+@Plugin(name = "map", category = "Lookup")
 public class MapLookup implements StrLookup {
     /**
      * Map keys are variable names and value.

File: core/src/main/java/org/apache/logging/log4j/core/lookup/StructuredDataLookup.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Looks up keys from system properties.
  */
-@Plugin(name = "sd", type = "Lookup")
+@Plugin(name = "sd", category = "Lookup")
 public class StructuredDataLookup implements StrLookup {
 
     /**

File: core/src/main/java/org/apache/logging/log4j/core/lookup/SystemPropertiesLookup.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Looks up keys from system properties.
  */
-@Plugin(name = "sys", type = "Lookup")
+@Plugin(name = "sys", category = "Lookup")
 public class SystemPropertiesLookup implements StrLookup {
 
     /**

File: core/src/main/java/org/apache/logging/log4j/core/pattern/ClassNamePatternConverter.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Formats the class name of the site of the logging request.
  */
-@Plugin(name = "ClassNamePatternConverter", type = "Converter")
+@Plugin(name = "ClassNamePatternConverter", category = "Converter")
 @ConverterKeys({"C", "class" })
 public final class ClassNamePatternConverter extends NamePatternConverter {
 

File: core/src/main/java/org/apache/logging/log4j/core/pattern/DatePatternConverter.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Convert and format the event's date in a StringBuffer.
  */
-@Plugin(name = "DatePatternConverter", type = "Converter")
+@Plugin(name = "DatePatternConverter", category = "Converter")
 @ConverterKeys({"d", "date" })
 public final class DatePatternConverter extends LogEventPatternConverter implements ArrayPatternConverter {
 

File: core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java
Patch:
@@ -29,7 +29,7 @@
  * The extended stack trace will also include the location of where the class was loaded from and the
  * version of the jar if available.
  */
-@Plugin(name = "ExtendedThrowablePatternConverter", type = "Converter")
+@Plugin(name = "ExtendedThrowablePatternConverter", category = "Converter")
 @ConverterKeys({"xEx", "xThrowable", "xException" })
 public final class ExtendedThrowablePatternConverter extends ThrowablePatternConverter {
 

File: core/src/main/java/org/apache/logging/log4j/core/pattern/FileDatePatternConverter.java
Patch:
@@ -23,7 +23,7 @@
  * date pattern for a %d specifier in a file name is different than
  * the %d pattern in pattern layout.
  */
-@Plugin(name = "FileDatePatternConverter", type = "FileConverter")
+@Plugin(name = "FileDatePatternConverter", category = "FileConverter")
 @ConverterKeys({"d", "date" })
 public final class FileDatePatternConverter {
     /**

File: core/src/main/java/org/apache/logging/log4j/core/pattern/FileLocationPatternConverter.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Returns the event's line location information in a StringBuffer.
  */
-@Plugin(name = "FileLocationPatternConverter", type = "Converter")
+@Plugin(name = "FileLocationPatternConverter", category = "Converter")
 @ConverterKeys({"F", "file" })
 public final class FileLocationPatternConverter extends LogEventPatternConverter {
     /**

File: core/src/main/java/org/apache/logging/log4j/core/pattern/FullLocationPatternConverter.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Format the event's line location information.
  */
-@Plugin(name = "FullLocationPatternConverter", type = "Converter")
+@Plugin(name = "FullLocationPatternConverter", category = "Converter")
 @ConverterKeys({"l", "location" })
 public final class FullLocationPatternConverter extends LogEventPatternConverter {
     /**

File: core/src/main/java/org/apache/logging/log4j/core/pattern/HighlightConverter.java
Patch:
@@ -68,7 +68,7 @@
  * normalized to upper-case internally.
  * </p>
  */
-@Plugin(name = "highlight", type = "Converter")
+@Plugin(name = "highlight", category = "Converter")
 @ConverterKeys({ "highlight" })
 public final class HighlightConverter extends LogEventPatternConverter {
 

File: core/src/main/java/org/apache/logging/log4j/core/pattern/IntegerPatternConverter.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Formats an integer.
  */
-@Plugin(name = "IntegerPatternConverter", type = "FileConverter")
+@Plugin(name = "IntegerPatternConverter", category = "FileConverter")
 @ConverterKeys({"i", "index" })
 public final class IntegerPatternConverter extends AbstractPatternConverter implements ArrayPatternConverter {
     /**

File: core/src/main/java/org/apache/logging/log4j/core/pattern/LevelPatternConverter.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Returns the event's level in a StringBuffer.
  */
-@Plugin(name = "LevelPatternConverter", type = "Converter")
+@Plugin(name = "LevelPatternConverter", category = "Converter")
 @ConverterKeys({"p", "level" })
 public final class LevelPatternConverter extends LogEventPatternConverter {
     /**

File: core/src/main/java/org/apache/logging/log4j/core/pattern/LineLocationPatternConverter.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Returns the event's line location information in a StringBuffer.
  */
-@Plugin(name = "LineLocationPatternConverter", type = "Converter")
+@Plugin(name = "LineLocationPatternConverter", category = "Converter")
 @ConverterKeys({"L", "line" })
 public final class LineLocationPatternConverter extends LogEventPatternConverter {
     /**

File: core/src/main/java/org/apache/logging/log4j/core/pattern/LineSeparatorPatternConverter.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Formats a line separator.
  */
-@Plugin(name = "LineSeparatorPatternConverter", type = "Converter")
+@Plugin(name = "LineSeparatorPatternConverter", category = "Converter")
 @ConverterKeys({"n" })
 public final class LineSeparatorPatternConverter extends LogEventPatternConverter {
 

File: core/src/main/java/org/apache/logging/log4j/core/pattern/LoggerPatternConverter.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Formats a logger name.
  */
-@Plugin(name = "LoggerPatternConverter", type = "Converter")
+@Plugin(name = "LoggerPatternConverter", category = "Converter")
 @ConverterKeys({"c", "logger" })
 public final class LoggerPatternConverter extends NamePatternConverter {
     /**

File: core/src/main/java/org/apache/logging/log4j/core/pattern/MDCPatternConverter.java
Patch:
@@ -30,7 +30,7 @@
  * within the property bundle
  * when this pattern converter has the option set.
  */
- @Plugin(name = "MDCPatternConverter", type = "Converter")
+ @Plugin(name = "MDCPatternConverter", category = "Converter")
 @ConverterKeys({"X", "mdc", "MDC" })
 public final class MDCPatternConverter extends LogEventPatternConverter {
     /**

File: core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java
Patch:
@@ -30,7 +30,7 @@
  * java.util.Hashtable.toString(), or to output the value of a specific key
  * within the Map.
  */
-@Plugin(name = "MapPatternConverter", type = "Converter")
+@Plugin(name = "MapPatternConverter", category = "Converter")
 @ConverterKeys({"K", "map", "MAP" })
 public final class MapPatternConverter extends LogEventPatternConverter {
     /**

File: core/src/main/java/org/apache/logging/log4j/core/pattern/MarkerPatternConverter.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Returns the event's rendered message in a StringBuffer.
  */
-@Plugin(name = "MarkerPatternConverter", type = "Converter")
+@Plugin(name = "MarkerPatternConverter", category = "Converter")
 @ConverterKeys({"marker" })
 public final class MarkerPatternConverter extends LogEventPatternConverter {
 

File: core/src/main/java/org/apache/logging/log4j/core/pattern/MessagePatternConverter.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Returns the event's rendered message in a StringBuffer.
  */
-@Plugin(name = "MessagePatternConverter", type = "Converter")
+@Plugin(name = "MessagePatternConverter", category = "Converter")
 @ConverterKeys({"m", "msg", "message" })
 public final class MessagePatternConverter extends LogEventPatternConverter {
 

File: core/src/main/java/org/apache/logging/log4j/core/pattern/MethodLocationPatternConverter.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Returns the event's line location information in a StringBuffer.
  */
-@Plugin(name = "MethodLocationPatternConverter", type = "Converter")
+@Plugin(name = "MethodLocationPatternConverter", category = "Converter")
 @ConverterKeys({"M", "method" })
 public final class MethodLocationPatternConverter extends LogEventPatternConverter {
     /**

File: core/src/main/java/org/apache/logging/log4j/core/pattern/NDCPatternConverter.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Returns the event's NDC in a StringBuffer.
  */
-@Plugin(name = "NDCPatternConverter", type = "Converter")
+@Plugin(name = "NDCPatternConverter", category = "Converter")
 @ConverterKeys({"x", "NDC" })
 public final class NDCPatternConverter extends LogEventPatternConverter {
   /**

File: core/src/main/java/org/apache/logging/log4j/core/pattern/RegexReplacement.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Replace tokens in the LogEvent message.
  */
-@Plugin(name = "replace", type = "Core", printObject = true)
+@Plugin(name = "replace", category = "Core", printObject = true)
 public final class RegexReplacement {
 
     private static final Logger LOGGER = StatusLogger.getLogger();

File: core/src/main/java/org/apache/logging/log4j/core/pattern/RegexReplacementConverter.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Replacement pattern converter.
  */
-@Plugin(name = "replace", type = "Converter")
+@Plugin(name = "replace", category = "Converter")
 @ConverterKeys({"replace" })
 public final class RegexReplacementConverter extends LogEventPatternConverter {
 

File: core/src/main/java/org/apache/logging/log4j/core/pattern/RelativeTimePatternConverter.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Returns the relative time in milliseconds since JVM Startup.
  */
-@Plugin(name = "RelativeTimePatternConverter", type = "Converter")
+@Plugin(name = "RelativeTimePatternConverter", category = "Converter")
 @ConverterKeys({"r", "relative" })
 public class RelativeTimePatternConverter extends LogEventPatternConverter {
     /**

File: core/src/main/java/org/apache/logging/log4j/core/pattern/RootThrowablePatternConverter.java
Patch:
@@ -29,7 +29,7 @@
  * The extended stack trace will also include the location of where the class was loaded from and the
  * version of the jar if available.
  */
-@Plugin(name = "RootThrowablePatternConverter", type = "Converter")
+@Plugin(name = "RootThrowablePatternConverter", category = "Converter")
 @ConverterKeys({"rEx", "rThrowable", "rException" })
 public final class RootThrowablePatternConverter extends ThrowablePatternConverter {
 

File: core/src/main/java/org/apache/logging/log4j/core/pattern/SequenceNumberPatternConverter.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Formats the event sequence number.
  */
-@Plugin(name = "SequenceNumberPatternConverter", type = "Converter")
+@Plugin(name = "SequenceNumberPatternConverter", category = "Converter")
 @ConverterKeys({"sn", "sequenceNumber" })
 public final class SequenceNumberPatternConverter extends LogEventPatternConverter {
 

File: core/src/main/java/org/apache/logging/log4j/core/pattern/StyleConverter.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Style pattern converter. Adds ANSI color styling to the result of the enclosed pattern.
  */
-@Plugin(name = "style", type = "Converter")
+@Plugin(name = "style", category = "Converter")
 @ConverterKeys({"style" })
 public final class StyleConverter extends LogEventPatternConverter {
 

File: core/src/main/java/org/apache/logging/log4j/core/pattern/ThreadPatternConverter.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Formats the event thread name.
  */
-@Plugin(name = "ThreadPatternConverter", type = "Converter")
+@Plugin(name = "ThreadPatternConverter", category = "Converter")
 @ConverterKeys({"t", "thread" })
 public final class ThreadPatternConverter extends LogEventPatternConverter {
     /**

File: core/src/main/java/org/apache/logging/log4j/core/pattern/ThrowablePatternConverter.java
Patch:
@@ -30,7 +30,7 @@
  * unless this converter's option is 'short', where it just outputs the first line of the trace, or if
  * the number of lines to print is explicitly specified.
  */
-@Plugin(name = "ThrowablePatternConverter", type = "Converter")
+@Plugin(name = "ThrowablePatternConverter", category = "Converter")
 @ConverterKeys({"ex", "throwable", "exception" })
 public class ThrowablePatternConverter extends LogEventPatternConverter {
 

File: core/src/main/java/org/apache/logging/log4j/core/pattern/UUIDPatternConverter.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Formats the event sequence number.
  */
-@Plugin(name = "UUIDPatternConverter", type = "Converter")
+@Plugin(name = "UUIDPatternConverter", category = "Converter")
 @ConverterKeys({"u", "uuid" })
 public final class UUIDPatternConverter extends LogEventPatternConverter {
 

File: core/src/test/java/org/apache/logging/log4j/core/appender/rewrite/TestRewritePolicy.java
Patch:
@@ -24,7 +24,7 @@
 /**
  *
  */
-@Plugin(name = "TestRewritePolicy", type = "Core", elementType = "rewritePolicy", printObject = true)
+@Plugin(name = "TestRewritePolicy", category = "Core", elementType = "rewritePolicy", printObject = true)
 public class TestRewritePolicy implements RewritePolicy {
 
     @Override

File: core/src/test/java/org/apache/logging/log4j/core/config/InMemoryAdvertiser.java
Patch:
@@ -22,17 +22,17 @@
 import java.util.HashMap;
 import java.util.Map;
 
-@Plugin(name = "memory", type = "Core", elementType = "advertiser", printObject = false)
+@Plugin(name = "memory", category = "Core", elementType = "advertiser", printObject = false)
 public class InMemoryAdvertiser implements Advertiser {
     private static Map<Object, Map<String, String>> properties = new HashMap<Object, Map<String, String>>();
-    
+
     public static Map<Object, Map<String, String>> getAdvertisedEntries()
     {
         Map<Object, Map<String, String>> result = new HashMap<Object, Map<String, String>>();
         result.putAll(properties);
         return result;
     }
-    
+
     public Object advertise(Map<String, String> newEntry) {
         Object object = new Object();
         properties.put(object, new HashMap<String, String>(newEntry));

File: core/src/test/java/org/apache/logging/log4j/test/appender/AlwaysFailAppender.java
Patch:
@@ -28,7 +28,7 @@
 /**
  *
  */
-@Plugin(name="AlwaysFail",type="Core",elementType="appender",printObject=true)
+@Plugin(name="AlwaysFail", category ="Core",elementType="appender",printObject=true)
 public class AlwaysFailAppender<T extends Serializable> extends AbstractAppender<T> {
 
     private AlwaysFailAppender(final String name) {

File: core/src/test/java/org/apache/logging/log4j/test/appender/FailOnceAppender.java
Patch:
@@ -30,7 +30,7 @@
 /**
  *
  */
-@Plugin(name="FailOnce",type="Core",elementType="appender",printObject=true)
+@Plugin(name="FailOnce", category ="Core",elementType="appender",printObject=true)
 public class FailOnceAppender<T extends Serializable> extends AbstractAppender<T> {
 
     boolean fail = true;

File: core/src/test/java/org/apache/logging/log4j/test/appender/ListAppender.java
Patch:
@@ -35,7 +35,7 @@
  * This appender is primarily used for testing. Use in a real environment is discouraged as the
  * List could eventually grow to cause an OutOfMemoryError.
  */
-@Plugin(name = "List", type = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "List", category = "Core", elementType = "appender", printObject = true)
 public class ListAppender<T extends Serializable> extends AbstractAppender<T> {
 
     private final List<LogEvent> events = new ArrayList<LogEvent>();

File: core/src/test/java/org/apache/logging/log4j/test/layout/BasicLayout.java
Patch:
@@ -30,7 +30,7 @@
 /**
  *
  */
-@Plugin(name = "BasicLayout", type = "Core", elementType = "layout", printObject = true)
+@Plugin(name = "BasicLayout", category = "Core", elementType = "layout", printObject = true)
 public class BasicLayout extends AbstractStringLayout {
 
     private static final String HEADER = "Header" + Constants.LINE_SEP;

File: flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/Agent.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Agent Specification for FlumeAvroAppender.
  */
-@Plugin(name = "Agent", type = "Core", printObject = true)
+@Plugin(name = "Agent", category = "Core", printObject = true)
 public final class Agent {
 
     private static final String DEFAULT_HOST = "localhost";

File: flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * An Appender that uses the Avro protocol to route events to Flume.
  */
-@Plugin(name = "Flume", type = "Core", elementType = "appender", printObject = true)
+@Plugin(name = "Flume", category = "Core", elementType = "appender", printObject = true)
 public final class FlumeAppender<T extends Serializable> extends AbstractAppender<T> implements FlumeEventFactory {
 
     private final AbstractFlumeManager manager;

File: flume-ng/src/test/java/org/apache/logging/log4j/flume/test/FlumeKeyProvider.java
Patch:
@@ -25,7 +25,7 @@
 /**
  *
  */
-@Plugin(name = "FlumeKeyProvider", type = "KeyProvider", elementType = "SecretKeyProvider", printObject = true)
+@Plugin(name = "FlumeKeyProvider", category = "KeyProvider", elementType = "SecretKeyProvider", printObject = true)
 public class FlumeKeyProvider implements SecretKeyProvider {
 
     private static final byte[] key = new byte[] {-7, -21, -118, -25, -79, 73, 72, -64, 0, 127, -93, -13, -38,

File: core/src/main/java/org/apache/logging/log4j/core/config/BaseConfiguration.java
Patch:
@@ -206,9 +206,9 @@ protected void doConfigure() {
             setToDefault();
             return;
         } else if (!setRoot) {
-            LOGGER.warn("No Root logger was configured, using default");
+            LOGGER.warn("No Root logger was configured, creating default ERROR-level Root logger with Console appender");
             setToDefault();
-            return;
+            // return; // LOG4J2-219: creating default root=ok, but don't exclude configured Loggers
         }
 
         for (final Map.Entry<String, LoggerConfig> entry : loggers.entrySet()) {

File: log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContextFactory.java
Patch:
@@ -33,7 +33,7 @@ public SLF4JLoggerContextFactory() {
         try {
             Class.forName("org.slf4j.helpers.Log4JLoggerFactory");
             misconfigured = true;
-        } catch (Throwable classNotFoundIsGood) {
+        } catch (ClassNotFoundException classNotFoundIsGood) {
             // org.slf4j.helpers.Log4JLoggerFactory is not on classpath. Good!
         }
         if (misconfigured) {

File: core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java
Patch:
@@ -24,8 +24,6 @@
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.LogEvent;
-import org.apache.logging.log4j.core.LoggerContext;
-import org.apache.logging.log4j.core.LoggerContext.Status;
 import org.apache.logging.log4j.core.config.AppenderRef;
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.LoggerConfig;

File: core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java
Patch:
@@ -220,6 +220,9 @@ public synchronized void shutdown() {
             return;
         }
         Disruptor<Log4jEventWrapper> temp = disruptor;
+        if (temp == null) {
+            return; // disruptor was already shut down by another thread
+        }
 
         // Must guarantee that publishing to the RingBuffer has stopped
         // before we call disruptor.shutdown()

File: core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java
Patch:
@@ -193,7 +193,7 @@ public void log(Marker marker, String fqcn, Level level, Message data,
             threadlocalInfo.set(info);
         }
 
-        Boolean includeLocation = config.loggerConfig.isIncludeLocation();
+        boolean includeLocation = config.loggerConfig.isIncludeLocation();
         info.translator.setValues(this, getName(), marker, fqcn, level, data,
                 t, //
 
@@ -212,8 +212,7 @@ public void log(Marker marker, String fqcn, Level level, Message data,
                 // location: very expensive operation. LOG4J2-153:
                 // Only include if "includeLocation=true" is specified,
                 // exclude if not specified or if "false" was specified.
-                includeLocation != null && includeLocation ? location(fqcn)
-                        : null,
+                includeLocation ? location(fqcn) : null,
 
                 // System.currentTimeMillis());
                 // CoarseCachedClock: 20% faster than system clock, 16ms gaps

File: core/src/main/java/org/apache/logging/log4j/core/jmx/ClientEditConfigPanel.java
Patch:
@@ -148,4 +148,4 @@ private void createWidgets() {
         this.add(north, BorderLayout.NORTH);
         this.add(scrollConfig, BorderLayout.CENTER);
     }
-}
\ No newline at end of file
+}

File: core/src/main/java/org/apache/logging/log4j/core/jmx/ClientGUIJConsolePlugin.java
Patch:
@@ -46,4 +46,4 @@ public Map<String, JPanel> getTabs() {
     public SwingWorker<?, ?> newSwingWorker() {
         return null;
     }
-}
\ No newline at end of file
+}

File: core/src/main/java/org/apache/logging/log4j/core/jmx/LoggerContextAdmin.java
Patch:
@@ -242,4 +242,4 @@ private long nextSeqNo() {
     private long now() {
         return System.currentTimeMillis();
     }
-}
\ No newline at end of file
+}

File: core/src/main/java/org/apache/logging/log4j/core/jmx/Assert.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * Utility class providing common validation logic.
  */
-public class Assert {
+public final class Assert {
     private Assert() {
     }
 
@@ -44,6 +44,7 @@ private Assert() {
      * }
      * </pre>
      * 
+     * @param <T> the type of the parameter to check and return
      * @param checkMe the parameter to check
      * @param name name of the parameter to use in the error message if
      *            {@code null}

File: core/src/main/java/org/apache/logging/log4j/core/config/Configurator.java
Patch:
@@ -65,7 +65,7 @@ public static LoggerContext initialize(final String name, final ClassLoader load
             if (context instanceof LoggerContext) {
                 final LoggerContext ctx = (LoggerContext) context;
                 final Configuration config = ConfigurationFactory.getInstance().getConfiguration(name, configLocation);
-                ctx.setConfiguration(config);
+                ctx.start(config);
                 return ctx;
             } else {
                 LOGGER.error("LogManager returned an instance of {} which does not implement {}. Unable to initialize Log4j",
@@ -97,7 +97,7 @@ public static LoggerContext initialize(final ClassLoader loader,
             if (context instanceof LoggerContext) {
                 final LoggerContext ctx = (LoggerContext) context;
                 final Configuration config = ConfigurationFactory.getInstance().getConfiguration(source);
-                ctx.setConfiguration(config);
+                ctx.start(config);
                 return ctx;
             } else {
                 LOGGER.error("LogManager returned an instance of {} which does not implement {}. Unable to initialize Log4j",
@@ -115,7 +115,7 @@ public static LoggerContext initialize(final ClassLoader loader,
      */
     public static void shutdown(final LoggerContext ctx) {
         if (ctx != null) {
-            ctx.setConfiguration(new DefaultConfiguration());
+            ctx.stop();
         }
     }
 }

File: core/src/main/java/org/apache/logging/log4j/core/config/NullConfiguration.java
Patch:
@@ -23,7 +23,7 @@
  */
 public class NullConfiguration extends BaseConfiguration {
 
-    private static final String NULL_NAME = "Null";
+    public static final String NULL_NAME = "Null";
 
     public NullConfiguration() {
 

File: core/src/main/java/org/apache/logging/log4j/core/jmx/LoggerContextAdmin.java
Patch:
@@ -61,7 +61,7 @@ public class LoggerContextAdmin extends NotificationBroadcasterSupport
     /**
      * Constructs a new {@code LoggerContextAdmin} with the {@code Executor} to
      * be used for sending {@code Notification}s asynchronously to listeners.
-     * 
+     *
      * @param executor
      */
     public LoggerContextAdmin(LoggerContext loggerContext, Executor executor) {
@@ -166,7 +166,7 @@ public void setConfigText(String configText, String charsetName) {
             ConfigurationSource source = new ConfigurationSource(in);
             Configuration updated = ConfigurationFactory.getInstance()
                     .getConfiguration(source);
-            loggerContext.setConfiguration(updated);
+            loggerContext.start(updated);
             LOGGER.debug("Completed remote request to reconfigure from config text.");
         } catch (Exception ex) {
             customConfigText = old;

File: core/src/test/java/org/apache/logging/log4j/core/SimplePerfTest.java
Patch:
@@ -46,7 +46,7 @@ public static void setupClass() {
         final Configuration config = ((LoggerContext)LogManager.getContext()).getConfiguration();
         if (!DefaultConfiguration.DEFAULT_NAME.equals(config.getName())) {
             System.out.println("Configuration was " + config.getName());
-            ((LoggerContext)LogManager.getContext()).setConfiguration(new DefaultConfiguration());
+            ((LoggerContext)LogManager.getContext()).start(new DefaultConfiguration());
         }
 
         for (int i=0; i < WARMUP; ++i) {

File: api/src/main/java/org/apache/logging/log4j/LogManager.java
Patch:
@@ -175,6 +175,7 @@ public static LoggerContext getContext(final ClassLoader loader, final boolean c
      * example, in a web application if the caller is a class in WEB-INF/lib then one LoggerContext may be
      * returned and if the caller is a class in the container's classpath then a different LoggerContext may be
      * returned. If true then only a single LoggerContext will be returned.
+     * @param configLocation The URI for the configuration to use.
      * @return a LoggerContext.
      */
     public static LoggerContext getContext(final ClassLoader loader, final boolean currentContext,

File: api/src/main/java/org/apache/logging/log4j/message/MapMessage.java
Patch:
@@ -193,7 +193,8 @@ private String asString(final MapFormat format) {
     public void asXML(final StringBuilder sb) {
         sb.append("<Map>\n");
         for (final Map.Entry<String, String> entry : data.entrySet()) {
-            sb.append("  <Entry key=\"").append(entry.getKey()).append("\">").append(entry.getValue()).append("</Entry>\n");
+            sb.append("  <Entry key=\"").append(entry.getKey()).append("\">").append(entry.getValue())
+              .append("</Entry>\n");
         }
         sb.append("</Map>");
     }

File: api/src/main/java/org/apache/logging/log4j/simple/SimpleLogger.java
Patch:
@@ -89,7 +89,7 @@ public SimpleLogger(final String name, final Level defaultLevel, final boolean s
     public void setStream(final PrintStream stream) {
         this.stream = stream;
     }
-    
+
     public Level getLevel() {
         return level;
     }

File: core/src/test/java/org/apache/logging/log4j/core/appender/SyslogAppenderTest.java
Patch:
@@ -210,7 +210,7 @@ public void testUDPStructuredAppender() throws Exception {
     }
 
     private SyslogAppender createAppender(final String protocol, final String format) {
-        return SyslogAppender.createAppender("localhost", PORT, protocol, "-1", "Test", "true", "false", "LOCAL0", "Audit",
+        return SyslogAppender.createAppender("localhost", PORT, protocol, "-1", null, "Test", "true", "false", "LOCAL0", "Audit",
             "18060", "true", "RequestContext", null, null, "true", null, "TestApp", "Test", null, "ipAddress,loginId",
             null, format, null, null, null, null, null);
     }

File: core/src/test/java/org/apache/logging/log4j/core/net/SocketServerTest.java
Patch:
@@ -92,7 +92,7 @@ public void testServer() throws Exception {
         final Filter socketFilter = new ThreadFilter(Filter.Result.NEUTRAL, Filter.Result.DENY);
         final Filter serverFilter = new ThreadFilter(Filter.Result.DENY, Filter.Result.NEUTRAL);
         final SocketAppender appender = SocketAppender.createAppender("localhost", PORT, "tcp", "-1",
-            "Test", null, null, null, socketFilter, null, null);
+            null, "Test", null, null, null, socketFilter, null, null);
         appender.start();
         final ListAppender listApp = new ListAppender("Events", serverFilter, null, false, false);
         listApp.start();

File: core/src/test/java/org/apache/logging/log4j/core/appender/SyslogAppenderTest.java
Patch:
@@ -211,8 +211,8 @@ public void testUDPStructuredAppender() throws Exception {
 
     private SyslogAppender createAppender(final String protocol, final String format) {
         return SyslogAppender.createAppender("localhost", PORT, protocol, "-1", "Test", "true", "false", "LOCAL0", "Audit",
-            "18060", "true", "RequestContext", "true", null, "TestApp", "Test", null, "ipAddress,loginId", null, format, null,
-                null, null, null, null);
+            "18060", "true", "RequestContext", null, null, "true", null, "TestApp", "Test", null, "ipAddress,loginId",
+            null, format, null, null, null, null, null);
     }
 
     public static class UDPSocketServer extends Thread {

File: flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java
Patch:
@@ -194,8 +194,8 @@ public static FlumeAppender createAppender(@PluginElement("agents") Agent[] agen
 
 
         if (layout == null) {
-            layout = RFC5424Layout.createLayout(null, null, null, "True", null, null, null, null, excludes,
-                includes, required, null, null, null, null);
+            layout = RFC5424Layout.createLayout(null, null, null, "True", null, mdcPrefix, eventPrefix, null, null,
+                null, excludes, includes, required, null, null, null, null);
         }
 
         if (name == null) {

File: flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java
Patch:
@@ -156,14 +156,14 @@ public void testLog4jAvroAppender() throws InterruptedException, IOException {
     public void testStructured() throws InterruptedException, IOException {
         final Agent[] agents = new Agent[] {Agent.createAgent("localhost", testPort)};
         final FlumeAppender avroAppender = FlumeAppender.createAppender(agents, null, "false", "Avro", null, "1000",
-            "1000", "1", "1000", "avro", "false", null, null, null, null, null, "true", "1", null, null, null);
+            "1000", "1", "1000", "avro", "false", null, null, null, "ReqCtx_", null, "true", "1", null, null, null);
         avroAppender.start();
         final Logger eventLogger = (Logger) LogManager.getLogger("EventLogger");
         Assert.assertNotNull(eventLogger);
         eventLogger.addAppender(avroAppender);
         eventLogger.setLevel(Level.ALL);
 
-        final StructuredDataMessage msg = new StructuredDataMessage("Tranfser", "Success", "Audit");
+        final StructuredDataMessage msg = new StructuredDataMessage("Transfer", "Success", "Audit");
         msg.put("memo", "This is a memo");
         msg.put("acct", "12345");
         msg.put("amount", "100.00");
@@ -180,6 +180,7 @@ public void testStructured() throws InterruptedException, IOException {
         Assert.assertNotNull(event);
         Assert.assertTrue("Channel contained event, but not expected message",
             getBody(event).endsWith("Success"));
+        System.out.println(getBody(event));
         transaction.commit();
         transaction.close();
 

File: flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java
Patch:
@@ -279,6 +279,7 @@ public FlumePersistentManager createManager(final String name, final FactoryData
                                 try {
                                     SecretKeyProvider provider = (SecretKeyProvider) cl.newInstance();
                                     secretKey = provider.getSecretKey();
+                                    LOGGER.debug("Persisting events using SecretKeyProvider {}", cl.getName());
                                 } catch (Exception ex) {
                                     LOGGER.error("Unable to create SecretKeyProvider {}, encryption will be disabled",
                                         cl.getName());

File: core/src/test/java/org/apache/logging/log4j/core/impl/ThrowableFormatOptionsTest.java
Patch:
@@ -137,7 +137,7 @@ public void testSeparatorAsEmpty() {
      */
     @Test
     public void testSeparatorAsDefaultLineSeparator() {
-        test(new String[]{"separator(\n)"}, Integer.MAX_VALUE, Constants.LINE_SEP, null);
+        test(new String[]{"separator(" + Constants.LINE_SEP + ")"}, Integer.MAX_VALUE, Constants.LINE_SEP, null);
     }
 
     /**

File: core/src/main/java/org/apache/logging/log4j/core/net/DatagramOutputStream.java
Patch:
@@ -89,7 +89,7 @@ public synchronized void write(final byte[] bytes) throws IOException {
 
     @Override
     public synchronized void flush() throws IOException {
-        if (this.ds != null && this.address != null) {
+        if (this.data != null && this.ds != null && this.address != null) {
             final DatagramPacket packet = new DatagramPacket(data, data.length, address, port);
             ds.send(packet);
         }

File: flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumePersistentManager.java
Patch:
@@ -69,7 +69,7 @@ public class FlumePersistentManager extends FlumeAvroManager {
 
     private static final String DEFAULT_DATA_DIR = ".log4j/flumeData";
 
-    private static ManagerFactory factory = new BDBManagerFactory();
+    private static BDBManagerFactory factory = new BDBManagerFactory();
 
     private Database database;
 
@@ -134,7 +134,7 @@ public static FlumePersistentManager getManager(final String name, final Agent[]
         }
         sb.append("]");
         sb.append(" ").append(dataDirectory);
-        return (FlumePersistentManager) getManager(sb.toString(), factory, new FactoryData(name, agents, batchSize,
+        return getManager(sb.toString(), factory, new FactoryData(name, agents, batchSize,
             reconnectionDelay, dataDir, properties));
     }
 

File: core/src/main/java/org/apache/logging/log4j/core/config/DefaultAdvertiser.java
Patch:
@@ -16,13 +16,15 @@
  */
 package org.apache.logging.log4j.core.config;
 
+import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.net.Advertiser;
 
 import java.util.Map;
 
 /**
  * The default advertiser does not do anything.
  */
+@Plugin(name = "default", type = "Core", elementType = "advertiser", printObject = false)
 public class DefaultAdvertiser implements Advertiser {
     /**
      * Does nothing.

File: core/src/main/java/org/apache/logging/log4j/core/net/MulticastDNSAdvertiser.java
Patch:
@@ -22,12 +22,14 @@
 import java.util.Hashtable;
 import java.util.Map;
 import org.apache.logging.log4j.Logger;
+import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.status.StatusLogger;
 
 /**
  * Advertise an entity via ZeroConf/MulticastDNS and the JmDNS library.
  *
  */
+@Plugin(name = "multicastdns", type = "Core", elementType = "advertiser", printObject = false)
 public class MulticastDNSAdvertiser implements Advertiser {
     protected static final Logger LOGGER = StatusLogger.getLogger();
     private static Object jmDNS = initializeJMDNS();

File: core/src/test/java/org/apache/logging/log4j/core/config/InMemoryAdvertiser.java
Patch:
@@ -16,11 +16,13 @@
  */
 package org.apache.logging.log4j.core.config;
 
+import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.net.Advertiser;
 
 import java.util.HashMap;
 import java.util.Map;
 
+@Plugin(name = "memory", type = "Core", elementType = "advertiser", printObject = false)
 public class InMemoryAdvertiser implements Advertiser {
     private static Map<Object, Map<String, String>> properties = new HashMap<Object, Map<String, String>>();
     

File: api/src/main/java/org/apache/logging/log4j/LogManager.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.SortedMap;
 import java.util.TreeMap;
 
-import com.sun.xml.internal.xsom.impl.UnionSimpleTypeImpl;
 import org.apache.logging.log4j.message.MessageFactory;
 import org.apache.logging.log4j.message.StringFormatterMessageFactory;
 import org.apache.logging.log4j.simple.SimpleLoggerContextFactory;

File: core/src/main/java/org/apache/logging/log4j/core/net/DatagramSocketManager.java
Patch:
@@ -62,7 +62,8 @@ public static DatagramSocketManager getSocketManager(final String host, final in
 
     /**
      * DatagramSocketManager's content format is specified by:<p/>
-     * Key: "protocol" Value: "udp"
+     * Key: "protocol" Value: "udp"<p/>
+     * Key: "direction" Value: "out"
      * @return Map of content format keys supporting DatagramSocketManager
      */
     public Map<String, String> getContentFormat()

File: core/src/main/java/org/apache/logging/log4j/core/net/TCPSocketManager.java
Patch:
@@ -135,7 +135,8 @@ protected synchronized void close() {
 
     /**
      * TCPSocketManager's content format is specified by:<p/>
-     * Key: "protocol" Value: "tcp"
+     * Key: "protocol" Value: "tcp"<p/>
+     * Key: "direction" Value: "out"
      * @return Map of content format keys supporting TCPSocketManager
      */
     public Map<String, String> getContentFormat()

File: core/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderTest.java
Patch:
@@ -141,7 +141,7 @@ public void testMultipleVMs() throws Exception {
     private static void writer(final boolean lock, final int count, final String name) throws Exception {
         final Layout layout = PatternLayout.createLayout(PatternLayout.SIMPLE_CONVERSION_PATTERN, null, null, null);
         final FileAppender app = FileAppender.createAppender(FILENAME, "true", Boolean.toString(lock), "test", "false",
-            "false", "false", layout, null);
+            "false", "false", layout, null, "false", null, null);
         final Thread t = Thread.currentThread();
         app.start();
         assertTrue("Appender did not start", app.isStarted());

File: core/src/test/java/org/apache/logging/log4j/core/appender/SocketAppenderTest.java
Patch:
@@ -97,7 +97,7 @@ public void teardown() {
     public void testTCPAppender() throws Exception {
 
         final SocketAppender appender = SocketAppender.createAppender("localhost", PORT, "tcp", "-1",
-            "Test", null, null, null, null);
+            "Test", null, null, null, null, null, null);
         appender.start();
 
         // set appender on root and set level to debug
@@ -125,7 +125,7 @@ public void testTCPAppender() throws Exception {
     public void testUDPAppender() throws Exception {
 
         final SocketAppender appender = SocketAppender.createAppender("localhost", PORT, "udp", "-1",
-            "Test", null, null, null, null);
+            "Test", null, null, null, null, null, null);
         appender.start();
 
         // set appender on root and set level to debug

File: core/src/test/java/org/apache/logging/log4j/core/appender/SyslogAppenderTest.java
Patch:
@@ -212,7 +212,7 @@ public void testUDPStructuredAppender() throws Exception {
     private SyslogAppender createAppender(final String protocol, final String format) {
         return SyslogAppender.createAppender("localhost", PORT, protocol, "-1", "Test", "true", "false", "LOCAL0", "Audit",
             "18060", "true", "RequestContext", "true", null, "TestApp", "Test", null, "ipAddress,loginId", null, format, null,
-                null, null, null);
+                null, null, null, null);
     }
 
     public static class UDPSocketServer extends Thread {

File: core/src/test/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicyTest.java
Patch:
@@ -52,7 +52,7 @@ private class MyRollingManager extends RollingFileManager {
 
         public MyRollingManager(final TriggeringPolicy policy, final RolloverStrategy strategy) {
             super("testfile", "target/rolling1/test1-%i.log.gz", new ByteArrayOutputStream(),
-                false, 0, System.currentTimeMillis(), policy, strategy);
+                false, 0, System.currentTimeMillis(), policy, strategy, null);
         }
 
         public void setFileTime(final long timestamp) {

File: core/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutTest.java
Patch:
@@ -77,7 +77,7 @@ public void mdcPattern() throws Exception {
         final PatternLayout layout = PatternLayout.createLayout(msgPattern, ctx.getConfiguration(), null, null);
         //FileOutputStream fos = new FileOutputStream(OUTPUT_FILE + "_mdc");
         final FileAppender appender = FileAppender.createAppender(OUTPUT_FILE + "_mdc", "false", "false", "File", "false",
-            "true", "false", layout, null);
+            "true", "false", layout, null, "false", null, null);
         appender.start();
 
         // set appender on root and set level to debug

File: core/src/test/java/org/apache/logging/log4j/core/net/SocketServerTest.java
Patch:
@@ -92,7 +92,7 @@ public void testServer() throws Exception {
         final Filter socketFilter = new ThreadFilter(Filter.Result.NEUTRAL, Filter.Result.DENY);
         final Filter serverFilter = new ThreadFilter(Filter.Result.DENY, Filter.Result.NEUTRAL);
         final SocketAppender appender = SocketAppender.createAppender("localhost", PORT, "tcp", "-1",
-            "Test", null, null, null, socketFilter);
+            "Test", null, null, null, socketFilter, null, null);
         appender.start();
         final ListAppender listApp = new ListAppender("Events", serverFilter, null, false, false);
         listApp.start();

File: api/src/main/java/org/apache/logging/log4j/message/MessageFactory.java
Patch:
@@ -47,7 +47,7 @@ public interface MessageFactory {
      * Creates a new parameterized message.
      *
      * @param message
-     *            a message template, the kind of message template depends on the implementaion.
+     *            a message template, the kind of message template depends on the implementation.
      * @param params
      *            the message parameters
      * @return a new message

File: api/src/main/java/org/apache/logging/log4j/message/TimestampMessage.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.logging.log4j.message;
 
 /**
- * Messages that use this interface will cause the timestamp in the message to be used instead of the timestmap in
+ * Messages that use this interface will cause the timestamp in the message to be used instead of the timestamp in
  * the LogEvent.
  */
 public interface TimestampMessage {

File: api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java
Patch:
@@ -35,7 +35,7 @@
  */
 public class SimpleLoggerContext implements LoggerContext {
 
-    /** The default format to use when formating dates */
+    /** The default format to use when formatting dates */
     protected static final String DEFAULT_DATE_TIME_FORMAT = "yyyy/MM/dd HH:mm:ss:SSS zzz";
 
     /** All system properties used by <code>SimpleLog</code> start with this */

File: api/src/main/java/org/apache/logging/log4j/status/StatusListener.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.logging.log4j.status;
 
 /**
- * Interface that allows implementors to be notified of events in the logging system.
+ * Interface that allows implementers to be notified of events in the logging system.
  */
 public interface StatusListener {
 

File: api/src/test/java/org/apache/logging/log4j/message/FormattedMessageTest.java
Patch:
@@ -42,7 +42,7 @@ public void testStringNoArgs() {
     }
 
     @Test
-    public void tesStringtOneArg() {
+    public void tesStringOneArg() {
         final String testMsg = "Test message %1s";
         final FormattedMessage msg = new FormattedMessage(testMsg, "Apache");
         final String result = msg.getFormattedMessage();

File: core/src/main/java/org/apache/logging/log4j/core/appender/AbstractAppender.java
Patch:
@@ -127,9 +127,9 @@ public Layout<T> getLayout() {
     }
 
     /**
-     * Some appenders need to propogate exceptions back to the application. When suppressException is false the
+     * Some appenders need to propagate exceptions back to the application. When suppressException is false the
      * AppenderControl will allow the exception to percolate.
-     * @return true if exceptions will be supressed, false otherwise.
+     * @return true if exceptions will be suppressed, false otherwise.
      */
     public boolean isExceptionSuppressed() {
         return handleException;

File: core/src/main/java/org/apache/logging/log4j/core/config/DefaultConfiguration.java
Patch:
@@ -36,7 +36,7 @@ public class DefaultConfiguration extends BaseConfiguration {
      */
     public static final String DEFAULT_NAME = "Default";
     /**
-     * The System Proerty used to specify the logging level.
+     * The System Property used to specify the logging level.
      */
     public static final String DEFAULT_LEVEL = "org.apache.logging.log4j.level";
 

File: core/src/main/java/org/apache/logging/log4j/core/helpers/Loader.java
Patch:
@@ -113,7 +113,7 @@ public static URL getResource(final String resource, final ClassLoader defaultLo
         }
 
         // Last ditch attempt: get the resource from the class path. It
-        // may be the case that clazz was loaded by the Extentsion class
+        // may be the case that clazz was loaded by the Extension class
         // loader which the parent of the system class loader. Hence the
         // code below.
         LOGGER.trace("Trying to find [" + resource + "] using ClassLoader.getSystemResource().");
@@ -190,7 +190,7 @@ public static InputStream getResourceAsStream(final String resource, final Class
         }
 
         // Last ditch attempt: get the resource from the class path. It
-        // may be the case that clazz was loaded by the Extentsion class
+        // may be the case that clazz was loaded by the Extension class
         // loader which the parent of the system class loader. Hence the
         // code below.
         LOGGER.trace("Trying to find [" + resource + "] using ClassLoader.getSystemResource().");

File: core/src/main/java/org/apache/logging/log4j/core/helpers/OptionConverter.java
Patch:
@@ -42,7 +42,7 @@ public final class OptionConverter {
     private OptionConverter() {
     }
 
-    public static String[] concatanateArrays(final String[] l, final String[] r) {
+    public static String[] concatenateArrays(final String[] l, final String[] r) {
         final int len = l.length + r.length;
         final String[] a = new String[len];
 
@@ -245,7 +245,7 @@ public static Object instantiateByClassName(final String className, final Class<
      * Perform variable substitution in string <code>val</code> from the
      * values of keys found in the system propeties.
      * <p/>
-     * <p>The variable substitution delimeters are <b>${</b> and <b>}</b>.
+     * <p>The variable substitution delimiters are <b>${</b> and <b>}</b>.
      * <p/>
      * <p>For example, if the System properties contains "key=value", then
      * the call
@@ -259,7 +259,7 @@ public static Object instantiateByClassName(final String className, final Class<
      * <code>props</code> parameter is searched, if the value could not
      * be found there, then substitution defaults to the empty string.
      * <p/>
-     * <p>For example, if system propeties contains no value for the key
+     * <p>For example, if system properties contains no value for the key
      * "inexistentKey", then the call
      * <p/>
      * <pre>

File: core/src/main/java/org/apache/logging/log4j/core/helpers/Transform.java
Patch:
@@ -80,7 +80,7 @@ public static String escapeTags(final String input) {
     }
 
     /**
-     * Ensures that embeded CDEnd strings (]]>) are handled properly
+     * Ensures that embedded CDEnd strings (]]>) are handled properly
      * within message, NDC and throwable tag text.
      *
      * @param buf StringBuffer holding the XML data to this point.  The

File: core/src/main/java/org/apache/logging/log4j/core/lookup/StrMatcher.java
Patch:
@@ -218,10 +218,10 @@ public static StrMatcher stringMatcher(final String str) {
      * The API guarantees that <code>pos</code> is a valid index for <code>buffer</code>.
      * <p>
      * The character array may be larger than the active area to be matched.
-     * Only values in the buffer between the specifed indices may be accessed.
+     * Only values in the buffer between the specified indices may be accessed.
      * <p>
      * The matching code may check one character or many.
-     * It may check characters preceeding <code>pos</code> as well as those
+     * It may check characters preceding <code>pos</code> as well as those
      * after, so long as no checks exceed the bounds specified.
      * <p>
      * It must return zero for no match, or a positive number if a match was found.
@@ -245,7 +245,7 @@ public static StrMatcher stringMatcher(final String str) {
      * The API guarantees that <code>pos</code> is a valid index for <code>buffer</code>.
      * <p>
      * The matching code may check one character or many.
-     * It may check characters preceeding <code>pos</code> as well as those after.
+     * It may check characters preceding <code>pos</code> as well as those after.
      * <p>
      * It must return zero for no match, or a positive number if a match was found.
      * The number indicates the number of characters that matched.

File: core/src/main/java/org/apache/logging/log4j/core/net/AbstractJMSManager.java
Patch:
@@ -100,7 +100,7 @@ protected static Properties getEnvironment(final String factoryName, final Strin
             if (providerURL != null) {
                 props.put(Context.PROVIDER_URL, providerURL);
             } else {
-                LOGGER.warn("The InitalContext factory name has been provided without a ProviderURL. " +
+                LOGGER.warn("The InitialContext factory name has been provided without a ProviderURL. " +
                     "This is likely to cause problems");
             }
             if (urlPkgPrefixes != null) {

File: core/src/main/java/org/apache/logging/log4j/core/pattern/CachedDateFormat.java
Patch:
@@ -104,7 +104,7 @@ final class CachedDateFormat extends DateFormat {
     private int millisecondStart;
 
     /**
-     * Integral second preceding the previous convered Date.
+     * Integral second preceding the previous converted Date.
      */
     private long slotBegin;
 
@@ -313,7 +313,7 @@ public StringBuffer format(final long now, final StringBuffer buf) {
     /**
      * Formats a count of milliseconds (0-999) into a numeric representation.
      *
-     * @param millis Millisecond coun between 0 and 999.
+     * @param millis Millisecond count between 0 and 999.
      * @param buf    String buffer, may not be null.
      * @param offset Starting position in buffer, the length of the
      *               buffer must be at least offset + 3.

File: core/src/main/java/org/apache/logging/log4j/core/pattern/HighlightConverter.java
Patch:
@@ -156,15 +156,15 @@ private static EnumMap<Level, String> createLevelStyleMap(final String[] options
             if (STYLE_KEY.equalsIgnoreCase(key)) {
                 final EnumMap<Level, String> enumMap = STYLES.get(value.toUpperCase(Locale.ENGLISH));
                 if (enumMap == null) {
-                    LOGGER.error("Unkown level style: " + value + ". Use one of " +
+                    LOGGER.error("Unknown level style: " + value + ". Use one of " +
                         Arrays.toString(STYLES.keySet().toArray()));
                 } else {
                     levelStyles.putAll(enumMap);
                 }
             } else {
                 final Level level = Level.valueOf(key);
                 if (level == null) {
-                    LOGGER.error("Unkown level name: " + key + ". Use one of " +
+                    LOGGER.error("Unknown level name: " + key + ". Use one of " +
                         Arrays.toString(DEFAULT_STYLES.keySet().toArray()));
                 } else {
                     levelStyles.put(level, value);

File: core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java
Patch:
@@ -176,7 +176,7 @@ public MaxElementAbbreviator(final int count) {
         @Override
         public String abbreviate(final String buf) {
 
-            // We substract 1 from 'len' when assigning to 'end' to avoid out of
+            // We subtract 1 from 'len' when assigning to 'end' to avoid out of
             // bounds exception in return r.substring(end+1, len). This can happen if
             // precision is 1 and the category name ends with a dot.
             int end = buf.length() - 1;

File: core/src/test/java/org/apache/logging/dumbster/smtp/SimpleSmtpServer.java
Patch:
@@ -191,7 +191,7 @@ private List handleTransaction(final PrintWriter out, final BufferedReader input
             final SmtpResponse response = request.execute();
             // Move to next internal state
             smtpState = response.getNextState();
-            // Send reponse to client
+            // Send response to client
             sendResponse(out, response);
 
             // Store input in message

File: core/src/test/java/org/apache/logging/log4j/core/appender/FailoverAppenderTest.java
Patch:
@@ -95,7 +95,7 @@ public void testRecovery() throws Exception {
         Thread.sleep(1100);
         onceLogger.error("Fail after recovery interval");
         events = app.getEvents();
-        assertTrue("Did not recoever", events.size() == 0);
+        assertTrue("Did not recover", events.size() == 0);
         events = foApp.getEvents();
         assertTrue("No events in primary appender", events.size() == 1);
     }

File: core/src/test/java/org/apache/logging/log4j/core/pattern/PatternParserTest.java
Patch:
@@ -85,7 +85,7 @@ public void defaultPattern() {
     }
 
     /**
-     * Test the custome pattern
+     * Test the custom pattern
      */
     @Test
     public void testCustomPattern() {

File: flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java
Patch:
@@ -108,7 +108,7 @@ public FlumeEvent createEvent(final LogEvent event, final String includes, final
      * Create a Flume Avro Appender.
      * @param agents An array of Agents.
      * @param properties Properties to pass to the embedded agent.
-     * @param embedded true if the embedded agent manager should be used. otherwise the Avro mangaer will be used.
+     * @param embedded true if the embedded agent manager should be used. otherwise the Avro manager will be used.
      * @param dataDir The directory where the Flume FileChannel should write its data.
      * @param delay The amount of time in milliseconds to wait between retries.
      * @param agentRetries The number of times to retry an agent before failing to the next agent.

File: flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAvroManager.java
Patch:
@@ -64,7 +64,7 @@ The default reconnection delay (500 milliseconds or .5 seconds).
      * Constructor
      * @param name The unique name of this manager.
      * @param agents An array of Agents.
-     * @param batchSize The number of evetns to include in a batch.
+     * @param batchSize The number of events to include in a batch.
      */
     protected FlumeAvroManager(final String name, final String shortName, final Agent[] agents, final int batchSize) {
         super(name);

File: flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeConfigurationBuilder.java
Patch:
@@ -274,7 +274,7 @@ protected void loadSinkGroups(final FlumeConfiguration.AgentConfiguration agentC
                 conf.getSinkRunners().put(comp.getComponentName(), new SinkRunner(group.getProcessor()));
             }
         }
-        // add any unasigned sinks to solo collectors
+        // add any unassigned sinks to solo collectors
         for (final Map.Entry<String, Sink> entry : sinks.entrySet()) {
             if (!usedSinks.containsValue(entry.getKey())) {
                 final SinkProcessor pr = new DefaultSinkProcessor();

File: flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java
Patch:
@@ -163,7 +163,7 @@ public void testStructured() throws InterruptedException, IOException {
         eventLogger.addAppender(avroAppender);
         eventLogger.setLevel(Level.ALL);
 
-        final StructuredDataMessage msg = new StructuredDataMessage("Transer", "Success", "Audit");
+        final StructuredDataMessage msg = new StructuredDataMessage("Tranfser", "Success", "Audit");
         msg.put("memo", "This is a memo");
         msg.put("acct", "12345");
         msg.put("amount", "100.00");
@@ -266,7 +266,7 @@ public void testConnectionRefused() {
         try {
             avroLogger.info("message 1");
         } catch (final Throwable t) {
-            //logger.debug("Logging to a non-existant server failed (as expected)", t);
+            //logger.debug("Logging to a non-existent server failed (as expected)", t);
 
             caughtException = true;
         }

File: log4j12-api/src/main/java/org/apache/log4j/Level.java
Patch:
@@ -240,14 +240,14 @@ private void writeObject(final ObjectOutputStream s) throws IOException {
 
     /**
      * Resolved deserialized level to one of the stock instances.
-     * May be overriden in classes derived from Level.
+     * May be overridden in classes derived from Level.
      *
      * @return resolved object.
      * @throws ObjectStreamException if exception during resolution.
      */
     protected Object readResolve() throws ObjectStreamException {
         //
-        //  if the deserizalized object is exactly an instance of Level
+        //  if the deserialized object is exactly an instance of Level
         //
         if (getClass() == Level.class) {
             return toLevel(level);

File: log4j12-api/src/main/java/org/apache/log4j/config/PropertySetter.java
Patch:
@@ -27,7 +27,7 @@ public class PropertySetter {
 
     /**
      * Create a new PropertySetter for the specified Object. This is done
-     * in prepartion for invoking {@link #setProperty} one or more times.
+     * in preparation for invoking {@link #setProperty} one or more times.
      *
      * @param obj  the object for which to set properties
      */
@@ -48,7 +48,7 @@ public static void setProperties(final Object obj, final Properties properties,
 
 
     /**
-     * Set the properites for the object that match the <code>prefix</code> passed as parameter.
+     * Set the properties for the object that match the <code>prefix</code> passed as parameter.
      */
     public void setProperties(final Properties properties, final String prefix) {
     }

File: log4j12-api/src/main/java/org/apache/log4j/spi/ErrorHandler.java
Patch:
@@ -64,8 +64,8 @@ public interface ErrorHandler {
     /**
      * This method is invoked to handle the error.
      *
-     * @param message   The message assoicated with the error.
-     * @param e         The Exption that was thrown when the error occured.
+     * @param message   The message associated with the error.
+     * @param e         The Exception that was thrown when the error occurred.
      * @param errorCode The error code associated with the error.
      * @param event     The logging event that the failing appender is asked
      *                  to log.
@@ -82,7 +82,7 @@ public interface ErrorHandler {
     void setAppender(Appender appender);
 
     /**
-     * Set the appender to falkback upon in case of failure.
+     * Set the appender to fallback upon in case of failure.
      *
      * @since 1.2
      */

File: log4j12-api/src/main/java/org/apache/log4j/spi/HierarchyEventListener.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.log4j.Category;
 
 /**
- Listen to events occuring within a Hierarchy.
+ Listen to events occurring within a Hierarchy.
 
  @since 1.2
 

File: log4j12-api/src/main/java/org/apache/log4j/spi/RepositorySelector.java
Patch:
@@ -35,7 +35,7 @@ public interface RepositorySelector {
 
     /**
      * Returns a {@link org.apache.log4j.spi.LoggerRepository} depending on the
-     * context. Implementors must make sure that a valid (non-null)
+     * context. Implementers must make sure that a valid (non-null)
      * LoggerRepository is returned.
      * @return a LoggerRepository.
      */

File: slf4j-impl/src/main/java/org/apache/logging/slf4j/SLF4JLoggingException.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.logging.slf4j;
 
 /**
- * Exception thrown when the SLF4J apapter encounters a problem.
+ * Exception thrown when the SLF4J adapter encounters a problem.
  *
  */
 public class SLF4JLoggingException extends RuntimeException {

File: core/src/main/java/org/apache/logging/log4j/core/config/BaseConfiguration.java
Patch:
@@ -283,7 +283,7 @@ public Appender getAppender(final String name) {
 
     /**
      * Returns a Map containing all the Appenders and their name.
-     * @return A Map containing each Appender's naem and the Appender object.
+     * @return A Map containing each Appender's name and the Appender object.
      */
     public Map<String, Appender<?>> getAppenders() {
         return appenders;

File: core/src/main/java/org/apache/logging/log4j/core/config/Configuration.java
Patch:
@@ -49,7 +49,7 @@ public interface Configuration extends Filterable {
 
     /**
      * Returns a Map containing all the Appenders and their name.
-     * @return A Map containing each Appender's naem and the Appender object.
+     * @return A Map containing each Appender's name and the Appender object.
      */
     Map<String, Appender<?>> getAppenders();
 

File: api/src/main/java/org/apache/logging/log4j/message/StructuredDataId.java
Patch:
@@ -57,7 +57,8 @@ protected StructuredDataId(final String name, final String[] required, final Str
         int index = -1;
         if (name != null) {
             if (name.length() > MAX_LENGTH) {
-                throw new IllegalArgumentException("Length of id exceeds maximum of 32 characters: " + name);
+                throw new IllegalArgumentException(String.format("Length of id %s exceeds maximum of %d characters",
+                        MAX_LENGTH, name));
             }
             index = name.indexOf("@");
         }

File: log4j12-api/src/main/java/org/apache/log4j/BasicConfigurator.java
Patch:
@@ -33,6 +33,7 @@ public static void configure() {
 
     /**
      * No-op implementation.
+     * @param appender The appender.
      */
     public static void configure(final Appender appender) {
     }

File: log4j12-api/src/main/java/org/apache/log4j/Category.java
Patch:
@@ -144,6 +144,7 @@ private static ConcurrentMap<String, Logger> getLoggersMap(final LoggerContext c
 
      <p>The root category is <em>not</em> included in the returned
      {@link Enumeration}.
+     @return and Enumeration of the Categories.
 
      @deprecated Please use {@link LogManager#getCurrentLoggers()} instead.
      */
@@ -295,7 +296,8 @@ public Appender getAppender(final String name) {
 
     /**
      Is the appender passed as parameter attached to this category?
-     @param appender The Appender to add.
+     * @param appender The Appender to add.
+     * @return true if the appender is attached.
      */
     public boolean isAttached(final Appender appender) {
         return false;

File: log4j12-api/src/main/java/org/apache/log4j/xml/DOMConfigurator.java
Patch:
@@ -71,7 +71,7 @@ public static void setParameter(final Element elem, final PropertySetter propSet
 
     }
 
-    public static Object parseElement(final Element element,final Properties props, final Class expectedClass)
+    public static Object parseElement(final Element element, final Properties props, final Class expectedClass)
         throws Exception {
         return null;
     }

File: core/src/main/java/org/apache/logging/log4j/core/Filter.java
Patch:
@@ -48,10 +48,10 @@ public enum Result {
          * The event should not be processed.
          */
         DENY;
-        
+
         /**
          * Returns the Result for the given string.
-         * 
+         *
          * @param name The Result enum name, case-insensitive. If null, returns, null
          * @return a Result enum value or null if name is null
          */
@@ -61,7 +61,7 @@ public static Result toResult(final String name) {
 
         /**
          * Returns the Result for the given string.
-         * 
+         *
          * @param name The Result enum name, case-insensitive. If null, returns, defaultResult
          * @param defaultResult the Result to return if name is null
          * @return a Result enum value or null if name is null

File: core/src/main/java/org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.java
Patch:
@@ -54,8 +54,9 @@ public abstract class AbstractOutputStreamAppender extends AbstractAppender {
      * @param layout The layout to format the message.
      * @param manager The OutputStreamManager.
      */
-    protected AbstractOutputStreamAppender(final String name, final Layout layout, final Filter filter, final boolean handleException,
-                                final boolean immediateFlush, final OutputStreamManager manager) {
+    protected AbstractOutputStreamAppender(final String name, final Layout layout, final Filter filter,
+                                           final boolean handleException, final boolean immediateFlush,
+                                           final OutputStreamManager manager) {
         super(name, filter, layout, handleException);
         if (layout != null) {
             manager.setHeader(layout.getHeader());

File: core/src/main/java/org/apache/logging/log4j/core/appender/FailoverAppender.java
Patch:
@@ -41,6 +41,8 @@
 @Plugin(name = "Failover", type = "Core", elementType = "appender", printObject = true)
 public final class FailoverAppender extends AbstractAppender {
 
+    private static final int DEFAULT_INTERVAL = 60 * Constants.MILLIS_IN_SECONDS;
+
     private final String primaryRef;
 
     private final String[] failovers;
@@ -57,8 +59,6 @@ public final class FailoverAppender extends AbstractAppender {
 
     private volatile boolean failure = false;
 
-    private static final int DEFAULT_INTERVAL = 60 * Constants.MILLIS_IN_SECONDS;
-
     private FailoverAppender(final String name, final Filter filter, final String primary, final String[] failovers,
                              final int interval, final Configuration config, final boolean handleExceptions) {
         super(name, filter, null, handleExceptions);

File: core/src/main/java/org/apache/logging/log4j/core/appender/FailoversPlugin.java
Patch:
@@ -29,7 +29,7 @@
 @Plugin(name = "failovers", type = "Core")
 public final class FailoversPlugin {
 
-    private static final Logger logger = StatusLogger.getLogger();
+    private static final Logger LOGGER = StatusLogger.getLogger();
 
     /**
      * Prevent instantiation.
@@ -46,7 +46,7 @@ private FailoversPlugin() {
     public static String[] createFailovers(@PluginElement("appender-ref") final AppenderRef... refs) {
 
         if (refs == null) {
-            logger.error("failovers must contain an appender-reference");
+            LOGGER.error("failovers must contain an appender-reference");
             return null;
         }
         final String[] arr = new String[refs.length];

File: core/src/main/java/org/apache/logging/log4j/core/appender/FileAppender.java
Patch:
@@ -32,8 +32,8 @@ public final class FileAppender extends AbstractOutputStreamAppender {
 
     private final String fileName;
 
-    private FileAppender(final String name, final Layout layout, final Filter filter, final FileManager manager, final String filename,
-                        final boolean handleException, final boolean immediateFlush) {
+    private FileAppender(final String name, final Layout layout, final Filter filter, final FileManager manager,
+                         final String filename, final boolean handleException, final boolean immediateFlush) {
         super(name, layout, filter, handleException, immediateFlush, manager);
         this.fileName = filename;
     }

File: core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java
Patch:
@@ -40,6 +40,7 @@ protected OutputStreamManager(final OutputStream os, final String streamName) {
      * @param name The name of the stream to manage.
      * @param data The data to pass to the Manager.
      * @param factory The factory to use to create the Manager.
+     * @param <T> The type of the OutputStreamManager.
      * @return An OutputStreamManager.
      */
     public static <T> OutputStreamManager getManager(final String name, final T data,

File: core/src/main/java/org/apache/logging/log4j/core/appender/rewrite/RewriteAppender.java
Patch:
@@ -43,8 +43,9 @@ public final class RewriteAppender extends AbstractAppender {
     private final RewritePolicy rewritePolicy;
     private final AppenderRef[] appenderRefs;
 
-    private RewriteAppender(final String name, final Filter filter, final boolean handleException, final AppenderRef[] appenderRefs,
-                            final RewritePolicy rewritePolicy, final Configuration config) {
+    private RewriteAppender(final String name, final Filter filter, final boolean handleException,
+                            final AppenderRef[] appenderRefs, final RewritePolicy rewritePolicy,
+                            final Configuration config) {
         super(name, filter, null, handleException);
         this.config = config;
         this.rewritePolicy = rewritePolicy;

File: core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CompositeTriggeringPolicy.java
Patch:
@@ -78,7 +78,8 @@ public String toString() {
      * @return A CompositeTriggeringPolicy.
      */
     @PluginFactory
-    public static CompositeTriggeringPolicy createPolicy(@PluginElement("policies") final TriggeringPolicy... policies) {
+    public static CompositeTriggeringPolicy createPolicy(
+                                                @PluginElement("policies") final TriggeringPolicy... policies) {
         return new CompositeTriggeringPolicy(policies);
     }
 }

File: core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java
Patch:
@@ -354,6 +354,8 @@ public String toString() {
      * Create the DefaultRolloverStrategy.
      * @param max The maximum number of files to keep.
      * @param min The minimum number of files to keep.
+     * @param fileIndex If set to "max" (the default), files with a higher index will be newer than files with a
+     * smaller index. If set to "min", file renaming and the counter will follow the Fixed Window strategy.
      * @param config The Configuration.
      * @return A DefaultRolloverStrategy.
      */

File: core/src/main/java/org/apache/logging/log4j/core/appender/rolling/PatternProcessor.java
Patch:
@@ -77,6 +77,7 @@ public PatternProcessor(final String pattern) {
      * Returns the next potential rollover time.
      * @param current The current time.
      * @param increment The increment to the next time.
+     * @param modulus If true the time will be rounded to occur on a boundary aligned with the increment.
      * @return the next potential rollover time and the timestamp for the target file.
      */
     public long getNextTime(final long current, final int increment, final boolean modulus) {

File: core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java
Patch:
@@ -71,6 +71,8 @@ public String toString() {
 
     /**
      * Create a TimeBasedTriggeringPolicy.
+     * @param interval The interval between rollovers.
+     * @param modulate If true the time will be rounded to occur on a boundary aligned with the increment.
      * @return a TimeBasedTriggeringPolicy.
      */
     @PluginFactory

File: core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java
Patch:
@@ -37,7 +37,7 @@ public class AppenderControl<T extends Serializable> extends AbstractFilterable
     private final Appender<T> appender;
 
     private final Level level;
-    
+
     private final int intLevel;
 
     /**

File: core/src/main/java/org/apache/logging/log4j/core/config/Configuration.java
Patch:
@@ -30,7 +30,8 @@
  */
 public interface Configuration extends Filterable {
 
-    public static final String CONTEXT_PROPERTIES = "ContextProperties";
+    /** Key for storing the Context properties. */
+    String CONTEXT_PROPERTIES = "ContextProperties";
 
     /**
      * Returns the configuration name.

File: core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
Patch:
@@ -430,6 +430,9 @@ public Configuration getConfiguration(final ConfigurationSource source) {
         }
     }
 
+    /**
+     * Represents the source for the logging configuration.
+     */
     public static class ConfigurationSource {
 
         private File file;

File: core/src/main/java/org/apache/logging/log4j/core/config/Configurator.java
Patch:
@@ -73,7 +73,8 @@ public static LoggerContext initialize(final String name, final ClassLoader load
      * @param source The InputSource for the configuration.
      * @return The LoggerContext.
      */
-    public static LoggerContext initialize(final ClassLoader loader, final ConfigurationFactory.ConfigurationSource source) {
+    public static LoggerContext initialize(final ClassLoader loader,
+                                           final ConfigurationFactory.ConfigurationSource source) {
 
         try {
             final LoggerContext ctx = (LoggerContext) LogManager.getContext(loader, false);
@@ -95,5 +96,4 @@ public static void shutdown(final LoggerContext ctx) {
             ctx.setConfiguration(new DefaultConfiguration());
         }
     }
-
 }

File: core/src/main/java/org/apache/logging/log4j/core/config/FileConfigurationMonitor.java
Patch:
@@ -52,7 +52,8 @@ public class FileConfigurationMonitor implements ConfigurationMonitor {
      * @param listeners The List of ConfigurationListeners to notify upon a change.
      * @param interval The monitor interval in seconds. The minimum interval is 5 seconds.
      */
-    public FileConfigurationMonitor(final Reconfigurable reconfigurable, final File file, final List<ConfigurationListener> listeners,
+    public FileConfigurationMonitor(final Reconfigurable reconfigurable, final File file,
+                                    final List<ConfigurationListener> listeners,
                                     final int interval) {
         this.reconfigurable = reconfigurable;
         this.file = file;

File: core/src/main/java/org/apache/logging/log4j/core/config/plugins/PluginType.java
Patch:
@@ -21,13 +21,13 @@
 
 /**
  * Plugin Descriptor.
- * 
+ *
  * @param <T> The plug-in class, which can be any kind of class.
  */
 public class PluginType<T> implements Serializable {
 
     private static final long serialVersionUID = 4743255148794846612L;
-    
+
     private final Class<T> pluginClass;
     private final String elementName;
     private final boolean printObject;

File: core/src/main/java/org/apache/logging/log4j/core/config/plugins/PropertiesPlugin.java
Patch:
@@ -37,6 +37,7 @@ private PropertiesPlugin() {
     /**
      * Create the Properties component.
      * @param properties An array of Property elements.
+     * @param config The Configuration.
      * @return An Interpolator that includes the configuration properties.
      */
     @PluginFactory

File: core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java
Patch:
@@ -60,7 +60,8 @@ public final class TimeFilter extends AbstractFilter {
     private final TimeZone timezone;
 
 
-    private TimeFilter(final long start, final long end, final TimeZone tz, final Result onMatch, final Result onMismatch) {
+    private TimeFilter(final long start, final long end, final TimeZone tz, final Result onMatch,
+                       final Result onMismatch) {
         super(onMatch, onMismatch);
         this.start = start;
         this.end = end;

File: core/src/main/java/org/apache/logging/log4j/core/helpers/NameUtil.java
Patch:
@@ -23,6 +23,8 @@
  */
 public final class NameUtil {
 
+    private static final int MASK = 0xff;
+
     private NameUtil() {
     }
 
@@ -41,7 +43,7 @@ public static String md5(final String string) {
             final byte[] bytes = digest.digest();
             final StringBuilder md5 = new StringBuilder();
             for (final byte b : bytes) {
-                final String hex = Integer.toHexString(0xff & b);
+                final String hex = Integer.toHexString(MASK & b);
                 if (hex.length() == 1) {
                     md5.append('0');
                 }

File: core/src/main/java/org/apache/logging/log4j/core/helpers/NetUtils.java
Patch:
@@ -30,7 +30,7 @@
  */
 public final class NetUtils {
 
-    private static Logger LOGGER = StatusLogger.getLogger();
+    private static final Logger LOGGER = StatusLogger.getLogger();
 
     private NetUtils() {
     }

File: core/src/main/java/org/apache/logging/log4j/core/helpers/UUIDUtil.java
Patch:
@@ -176,8 +176,8 @@ private UUIDUtil() {
      */
     public static UUID getTimeBasedUUID() {
 
-        final long time = ((System.currentTimeMillis() * HUNDRED_NANOS_PER_MILLI) + NUM_100NS_INTERVALS_SINCE_UUID_EPOCH) +
-            (count.incrementAndGet() % HUNDRED_NANOS_PER_MILLI);
+        final long time = ((System.currentTimeMillis() * HUNDRED_NANOS_PER_MILLI) +
+            NUM_100NS_INTERVALS_SINCE_UUID_EPOCH) + (count.incrementAndGet() % HUNDRED_NANOS_PER_MILLI);
         final long timeLow = (time & LOW_MASK) << SHIFT_4;
         final long timeMid = (time & MID_MASK) >> SHIFT_2;
         final long timeHi = (time & HIGH_MASK) >> SHIFT_6;

File: core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java
Patch:
@@ -30,7 +30,7 @@
  */
 public class Log4jContextFactory implements LoggerContextFactory {
 
-    private static final StatusLogger logger = StatusLogger.getLogger();
+    private static final StatusLogger LOGGER = StatusLogger.getLogger();
 
     private ContextSelector selector;
 
@@ -47,7 +47,7 @@ public Log4jContextFactory() {
                     return;
                 }
             } catch (final Exception ex) {
-                logger.error("Unable to create context " + sel, ex);
+                LOGGER.error("Unable to create context " + sel, ex);
             }
 
         }

File: core/src/main/java/org/apache/logging/log4j/core/layout/HTMLLayout.java
Patch:
@@ -63,6 +63,7 @@ public final class HTMLLayout extends AbstractStringLayout {
 
     private final String contentType;
 
+    /**Possible font sizes */
     private enum FontSize {
         SMALLER("smaller"), XXSMALL("xx-small"), XSMALL("x-small"), SMALL("small"), MEDIUM("medium"), LARGE("large"),
         XLARGE("x-large"), XXLARGE("xx-large"),  LARGER("larger");
@@ -292,6 +293,8 @@ public byte[] getFooter() {
      * @param title The title to include in the file header. If none is specified the default title will be used.
      * @param contentType The content type. Defaults to "text/html".
      * @param charsetName The character set to use. If not specified, the default will be used.
+     * @param fontSize The font size of the text.
+     * @param font The font to use for the text.
      * @return An HTML Layout.
      */
     @PluginFactory

File: core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java
Patch:
@@ -69,6 +69,7 @@ public final class PatternLayout extends AbstractStringLayout {
     public static final String SIMPLE_CONVERSION_PATTERN =
         "%d [%t] %p %c - %m%n";
 
+    /** Key to identify pattern converters. */
     public static final String KEY = "Converter";
 
     /**

File: core/src/main/java/org/apache/logging/log4j/core/layout/XMLLayout.java
Patch:
@@ -82,7 +82,8 @@ public class XMLLayout extends AbstractStringLayout {
     private final boolean properties;
     private final boolean complete;
 
-    protected XMLLayout(final boolean locationInfo, final boolean properties, final boolean complete, final Charset charset) {
+    protected XMLLayout(final boolean locationInfo, final boolean properties, final boolean complete,
+                        final Charset charset) {
         super(charset);
         this.locationInfo = locationInfo;
         this.properties = properties;

File: core/src/main/java/org/apache/logging/log4j/core/net/AbstractSocketManager.java
Patch:
@@ -47,7 +47,8 @@ public abstract class AbstractSocketManager extends OutputStreamManager {
      * @param host The target host name.
      * @param port The target port number.
      */
-    public AbstractSocketManager(final String name, final OutputStream os, final InetAddress addr, final String host, final int port) {
+    public AbstractSocketManager(final String name, final OutputStream os, final InetAddress addr, final String host,
+                                 final int port) {
         super(os, name);
         this.address = addr;
         this.host = host;

File: core/src/main/java/org/apache/logging/log4j/core/net/DatagramSocketManager.java
Patch:
@@ -25,7 +25,7 @@
  */
 public class DatagramSocketManager extends AbstractSocketManager {
 
-    private static final DatagramSocketManagerFactory factory = new DatagramSocketManagerFactory();
+    private static final DatagramSocketManagerFactory FACTORY = new DatagramSocketManagerFactory();
 
     /**
      * The Constructor.
@@ -51,7 +51,7 @@ public static DatagramSocketManager getSocketManager(final String host, final in
         if (port <= 0) {
             throw new IllegalArgumentException("A port value is required");
         }
-        return (DatagramSocketManager) getManager("UDP:" + host + ":" + port, new FactoryData(host, port), factory
+        return (DatagramSocketManager) getManager("UDP:" + host + ":" + port, new FactoryData(host, port), FACTORY
         );
     }
 

File: core/src/main/java/org/apache/logging/log4j/core/net/JMSQueueReceiver.java
Patch:
@@ -42,7 +42,8 @@ public class JMSQueueReceiver extends AbstractJMSReceiver {
      * @param username The userid to connect to the queue.
      * @param password The password to connect to the queue.
      */
-    public JMSQueueReceiver(final String qcfBindingName, final String queueBindingName, final String username, final String password) {
+    public JMSQueueReceiver(final String qcfBindingName, final String queueBindingName, final String username,
+                            final String password) {
 
         try {
             final Context ctx = new InitialContext();

File: core/src/main/java/org/apache/logging/log4j/core/net/JMSTopicReceiver.java
Patch:
@@ -42,7 +42,8 @@ public class JMSTopicReceiver extends AbstractJMSReceiver {
      * @param username The userid to connect to the topic.
      * @param password The password to connect to the topic.
      */
-    public JMSTopicReceiver(final String tcfBindingName, final String topicBindingName, final String username, final String password) {
+    public JMSTopicReceiver(final String tcfBindingName, final String topicBindingName, final String username,
+                            final String password) {
         try {
             final Context ctx = new InitialContext();
             TopicConnectionFactory topicConnectionFactory;

File: core/src/main/java/org/apache/logging/log4j/core/net/MimeMessageBuilder.java
Patch:
@@ -24,7 +24,7 @@
 import javax.mail.internet.MimeMessage;
 
 /**
- *  Helper class for SMTPManager
+ *  Helper class for SMTPManager.
  */
 public class MimeMessageBuilder {
     private final MimeMessage message;
@@ -85,4 +85,4 @@ private static InternetAddress parseAddress(final String address) throws Address
     private static InternetAddress[] parseAddresses(final String addresses) throws AddressException {
         return addresses == null ? null : InternetAddress.parse(addresses, true);
     }
-}
\ No newline at end of file
+}

File: core/src/main/java/org/apache/logging/log4j/core/net/SocketServer.java
Patch:
@@ -66,7 +66,6 @@ public SocketServer(final int port) throws IOException {
         server = new ServerSocket(port);
         if (logger == null) {
             logger = LogManager.getLogger(this);
-            // TODO: Consider
             // logger = LogManager.getLogger(getClass().getName() + '.' + port);
         }
     }

File: core/src/main/java/org/apache/logging/log4j/core/pattern/CachedDateFormat.java
Patch:
@@ -35,8 +35,6 @@
  */
 final class CachedDateFormat extends DateFormat {
 
-    private static final long serialVersionUID = -1253877934598423628L;
-
     /**
      * Constant used to represent that there was no change
      * observed when changing the millisecond count.
@@ -49,6 +47,8 @@ final class CachedDateFormat extends DateFormat {
      */
     public static final int UNRECOGNIZED_MILLISECONDS = -1;
 
+    private static final long serialVersionUID = -1253877934598423628L;
+
     /**
      * Supported digit set.  If the wrapped DateFormat uses
      * a different unit set, the millisecond pattern

File: core/src/main/java/org/apache/logging/log4j/core/pattern/ClassNamePatternConverter.java
Patch:
@@ -28,7 +28,7 @@
 public final class ClassNamePatternConverter extends NamePatternConverter {
 
     private static final String NA = "?";
-    
+
     /**
      * Private constructor.
      *

File: core/src/main/java/org/apache/logging/log4j/core/pattern/LogEventPatternConverter.java
Patch:
@@ -25,12 +25,12 @@
  * that can format information from instances of LoggingEvent.
  */
 public abstract class LogEventPatternConverter extends AbstractPatternConverter {
-    
+
     /**
      * Allow subclasses access to the status logger without creating another instance.
      */
     protected static final Logger LOGGER = StatusLogger.getLogger();
-    
+
     /**
      * Constructs an instance of LoggingEventPatternConverter.
      *

File: core/src/main/java/org/apache/logging/log4j/core/pattern/ThrowablePatternConverter.java
Patch:
@@ -32,6 +32,9 @@
 @ConverterKeys({"ex", "throwable", "exception" })
 public class ThrowablePatternConverter extends LogEventPatternConverter {
 
+    /**
+     * Do not format the exception.
+     */
     protected static final String NONE = "none";
     /**
      * Format the whole stack trace.

File: api/src/main/java/org/apache/logging/log4j/ThreadContext.java
Patch:
@@ -312,6 +312,7 @@ public static void push(final String message) {
      * with ParameterizedMessage.
      *
      * @param message The new diagnostic context information.
+     * @param args Parameters for the message.
      */
     public static void push(final String message, final Object... args) {
         if (!useStack) {

File: api/src/main/java/org/apache/logging/log4j/message/MapMessage.java
Patch:
@@ -298,7 +298,7 @@ public int hashCode() {
 
     /**
      * Always returns null.
-     * 
+     *
      * @return null
      */
     public Throwable getThrowable() {

File: api/src/main/java/org/apache/logging/log4j/message/Message.java
Patch:
@@ -36,7 +36,7 @@
  * interface to implement or extend Serializable". Such is the case here as the LogEvent must be Serializable.
  */
 public interface Message extends Serializable {
-    
+
     /**
      * Gets the Message formatted as a String. Each Message implementation determines the
      * appropriate way to format the data encapsulated in the Message. Messages that provide
@@ -68,7 +68,7 @@ public interface Message extends Serializable {
 
     /**
      * Gets the throwable, if any.
-     * 
+     *
      * @return the throwable or null.
      */
     Throwable getThrowable();

File: api/src/main/java/org/apache/logging/log4j/message/MessageFormatMessageFactory.java
Patch:
@@ -26,6 +26,9 @@ public class MessageFormatMessageFactory extends AbstractMessageFactory {
 
     /**
      * Creates {@link org.apache.logging.log4j.message.StringFormattedMessage} instances.
+     * @param message The message pattern.
+     * @param params Parameters to the message.
+     * @return The Message.
      *
      * @see org.apache.logging.log4j.message.MessageFactory#newMessage(String, Object...)
      */

File: api/src/main/java/org/apache/logging/log4j/message/ObjectMessage.java
Patch:
@@ -105,7 +105,7 @@ private void readObject(final ObjectInputStream in) throws IOException, ClassNot
 
     /**
      * Gets the message if it is a throwable.
-     * 
+     *
      * @return the message if it is a throwable.
      */
     public Throwable getThrowable() {

File: api/src/main/java/org/apache/logging/log4j/message/SimpleMessage.java
Patch:
@@ -89,7 +89,7 @@ public String toString() {
 
     /**
      * Always returns null.
-     * 
+     *
      * @return null
      */
     public Throwable getThrowable() {

File: api/src/main/java/org/apache/logging/log4j/message/StringFormattedMessage.java
Patch:
@@ -147,7 +147,7 @@ private void readObject(final ObjectInputStream in) throws IOException, ClassNot
 
     /**
      * Always returns null.
-     * 
+     *
      * @return null
      */
     public Throwable getThrowable() {

File: api/src/main/java/org/apache/logging/log4j/message/StructuredDataId.java
Patch:
@@ -81,7 +81,8 @@ protected StructuredDataId(final String name, final String[] required, final Str
      * @param required         The list of keys that are required for this id.
      * @param optional         The list of keys that are optional for this id.
      */
-    public StructuredDataId(final String name, final int enterpriseNumber, final String[] required, final String[] optional) {
+    public StructuredDataId(final String name, final int enterpriseNumber, final String[] required,
+                            final String[] optional) {
         if (name == null) {
             throw new IllegalArgumentException("No structured id name was supplied");
         }

File: api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java
Patch:
@@ -64,6 +64,8 @@ public class SimpleLoggerContext implements LoggerContext {
 
     private final PrintStream stream;
 
+    private final ConcurrentMap<String, Logger> loggers = new ConcurrentHashMap<String, Logger>();
+
     public SimpleLoggerContext() {
         props = new PropertiesUtil("log4j2.simplelog.properties");
 
@@ -94,8 +96,6 @@ public SimpleLoggerContext() {
         this.stream = ps;
     }
 
-    private final ConcurrentMap<String, Logger> loggers = new ConcurrentHashMap<String, Logger>();
-
     public Logger getLogger(final String name) {
         return getLogger(name, null);
     }

File: api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContextFactory.java
Patch:
@@ -26,7 +26,7 @@ public class SimpleLoggerContextFactory implements LoggerContextFactory {
 
     private static LoggerContext context = new SimpleLoggerContext();
 
-    public LoggerContext getContext(final String FQCN, final ClassLoader loader, final boolean currentContext) {
+    public LoggerContext getContext(final String fqcn, final ClassLoader loader, final boolean currentContext) {
         return context;
     }
 }

File: api/src/main/java/org/apache/logging/log4j/spi/LoggerContext.java
Patch:
@@ -40,7 +40,8 @@ public interface LoggerContext {
     /**
      * Returns a Logger.
      * @param name The name of the Logger to return.
-     * @param messageFactory The message factory is used only when creating a logger, subsequent use does not change the logger but will log a warning if mismatched.
+     * @param messageFactory The message factory is used only when creating a logger, subsequent use does not change
+     *                       the logger but will log a warning if mismatched.
      * @return The logger with the specified name.
      */
     Logger getLogger(String name, MessageFactory messageFactory);

File: api/src/main/java/org/apache/logging/log4j/spi/LoggerContextFactory.java
Patch:
@@ -23,7 +23,7 @@ public interface LoggerContextFactory {
 
     /**
      * Creates a {@link LoggerContext}.
-     * 
+     *
      * @param fqcn The fully qualified class name of the caller.
      * @param loader The ClassLoader to use or null.
      * @param currentContext If true returns the current Context, if false returns the Context appropriate

File: flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAvroManager.java
Patch:
@@ -75,6 +75,7 @@ protected FlumeAvroManager(final String name, final String shortName, final Agen
 
     /**
      * Returns a FlumeAvroManager.
+     * @param name The name of the manager.
      * @param agents The agents to use.
      * @param batchSize The number of events to include in a batch.
      * @return A FlumeAvroManager.

File: log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContextFactory.java
Patch:
@@ -25,7 +25,7 @@
 public class SLF4JLoggerContextFactory implements LoggerContextFactory {
     private static LoggerContext context = new SLF4JLoggerContext();
 
-    public LoggerContext getContext(final String FQCN, final ClassLoader loader, final boolean currentContext) {
+    public LoggerContext getContext(final String fqcn, final ClassLoader loader, final boolean currentContext) {
         return context;
     }
 }

File: slf4j-impl/src/main/java/org/slf4j/impl/SLF4JLogger.java
Patch:
@@ -421,7 +421,8 @@ public void error(final Marker marker, final String s, final Throwable throwable
     }
 
 
-    public void log(final Marker marker, final String fqcn, final int i, final String s1, final Object[] objects, Throwable throwable) {
+    public void log(final Marker marker, final String fqcn, final int i, final String s1, final Object[] objects,
+                    Throwable throwable) {
         if (!logger.isEnabled(getLevel(i), (org.apache.logging.log4j.Marker) marker, s1)) {
             return;
         }

File: web/src/main/java/org/apache/logging/log4j/core/web/JNDIContextFilter.java
Patch:
@@ -78,7 +78,8 @@ public void init(final FilterConfig filterConfig) throws ServletException {
         }
     }
 
-    public void doFilter(final ServletRequest servletRequest, final ServletResponse servletResponse, final FilterChain filterChain)
+    public void doFilter(final ServletRequest servletRequest, final ServletResponse servletResponse,
+                         final FilterChain filterChain)
         throws IOException, ServletException {
         final LoggerContext ctx = (LoggerContext) context.getAttribute(Log4jContextListener.LOG4J_CONTEXT_ATTRIBUTE);
         if (ctx != null) {

File: core/src/main/java/org/apache/logging/log4j/core/Layout.java
Patch:
@@ -77,8 +77,9 @@ public interface Layout<T extends Serializable> {
     T toSerializable(LogEvent event);
 
     /**
-     * Returns the content type output by this layout. The base class
-     returns "text/plain".
+     * Returns the content type output by this layout. The base class returns "text/plain".
+     * 
+     * @return the content type.
      */
     String getContentType();
 }

File: core/src/main/java/org/apache/logging/log4j/core/config/plugins/PluginManager.java
Patch:
@@ -137,7 +137,7 @@ public void collectPlugins(boolean preLoad, final String pkgs) {
             preLoad = false;
         }
         final long start = System.nanoTime();
-        final ResolverUtil<?> resolver = new ResolverUtil();
+        final ResolverUtil resolver = new ResolverUtil();
         final ClassLoader loader = Loader.getClassLoader();
         if (loader != null) {
             resolver.setClassLoader(loader);

File: core/src/test/java/org/apache/logging/log4j/ReflectionComparison.java
Patch:
@@ -123,8 +123,8 @@ private Class getCallerClass(final Object[] array) {
     }
 
     private Message createMessage(final Class<? extends Message> clazz, final String msg, final Object... params) throws Exception {
-        final Constructor constructor = clazz.getConstructor(paramTypes);
-        return (Message) constructor.newInstance(msg, params);
+        final Constructor<? extends Message> constructor = clazz.getConstructor(paramTypes);
+        return constructor.newInstance(msg, params);
     }
 
 }

File: log4j12-api/src/main/java/org/apache/log4j/spi/ErrorHandler.java
Patch:
@@ -50,7 +50,7 @@ public interface ErrorHandler {
 
     /**
      * Equivalent to the {@link #error(String, Exception, int,
-     * LoggingEvent event)} with the the event parameteter set to
+     * LoggingEvent)} with the the event parameter set to
      * <code>null</code>.
      */
     void error(String message, Exception e, int errorCode);

File: slf4j-impl/src/main/java/org/slf4j/helpers/Log4JMDCAdapter.java
Patch:
@@ -42,7 +42,7 @@ public void clear() {
         ThreadContext.clear();
     }
 
-    public Map getCopyOfContextMap() {
+    public Map<String, String> getCopyOfContextMap() {
         return ThreadContext.getContext();
     }
 

File: api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Represents a Message that conforms to RFC 5424 (http://tools.ietf.org/html/rfc5424).
  */
-public class StructuredDataMessage extends MapMessage implements MultiformatMessage, Serializable {
+public class StructuredDataMessage extends MapMessage {
 
     private static final long serialVersionUID = 1703221292892071920L;
     private static final int MAX_LENGTH = 32;

File: core/src/main/java/org/apache/logging/log4j/core/layout/SerializedLayout.java
Patch:
@@ -59,6 +59,7 @@ public byte[] toByteArray(final LogEvent event) {
             final ObjectOutputStream oos = new PrivateObjectOutputStream(baos);
             try {
                 oos.writeObject(event);
+                oos.reset();
             } finally {
                 oos.close();
             }

File: core/src/main/java/org/apache/logging/log4j/core/net/TCPSocketManager.java
Patch:
@@ -109,7 +109,6 @@ protected synchronized void write(final byte[] bytes, final int offset, final in
         }
         try {
             getOutputStream().write(bytes, offset, length);
-            socket.setSendBufferSize(length);
         } catch (final IOException ex) {
             if (retry && connector == null) {
                 connector = new Reconnector(this);

File: core/src/main/java/org/apache/logging/log4j/core/appender/SocketAppender.java
Patch:
@@ -80,7 +80,9 @@ public static SocketAppender createAppender(@PluginAttr("host") final String hos
             return null;
         }
 
-        final AbstractSocketManager manager = createSocketManager(protocol, host, port, reconnectDelay);
+        final String prot = protocol != null ? protocol : Protocol.TCP.name();
+
+        final AbstractSocketManager manager = createSocketManager(prot, host, port, reconnectDelay);
         if (manager == null) {
             return null;
         }

File: core/src/main/java/org/apache/logging/log4j/core/appender/SyslogAppender.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.logging.log4j.core.layout.RFC5424Layout;
 import org.apache.logging.log4j.core.layout.SyslogLayout;
 import org.apache.logging.log4j.core.net.AbstractSocketManager;
+import org.apache.logging.log4j.core.net.Protocol;
 
 import java.nio.charset.Charset;
 
@@ -122,7 +123,8 @@ public static SyslogAppender createAppender(@PluginAttr("host") final String hos
             LOGGER.error("No name provided for SyslogAppender");
             return null;
         }
-        final AbstractSocketManager manager = createSocketManager(protocol, host, port, reconnectDelay);
+        final String prot = protocol != null ? protocol : Protocol.UDP.name();
+        final AbstractSocketManager manager = createSocketManager(prot, host, port, reconnectDelay);
         if (manager == null) {
             return null;
         }

File: core/src/test/java/org/apache/logging/log4j/core/appender/SMTPAppenderTest.java
Patch:
@@ -29,8 +29,8 @@
 import org.apache.logging.log4j.core.net.MimeMessageBuilder;
 import org.junit.Test;
 
-import com.dumbster.smtp.SimpleSmtpServer;
-import com.dumbster.smtp.SmtpMessage;
+import org.apache.logging.dumbster.smtp.SimpleSmtpServer;
+import org.apache.logging.dumbster.smtp.SmtpMessage;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;

File: core/src/main/java/org/apache/logging/log4j/core/config/BaseConfiguration.java
Patch:
@@ -482,7 +482,7 @@ public void createConfiguration(final Node node, final LogEvent event) {
    /*
     * Retrieve a static public 'method to create the desired object. Every parameter
     * will be annotated to identify the appropriate attribute or element to use to
-    * set the value of the paraemter.
+    * set the value of the parameter.
     * Parameters annotated with PluginAttr will always be set as Strings.
     * Parameters annotated with PluginElement may be Objects or arrays. Collections
     * and Maps are currently not supported, although the factory method that is called

File: api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java
Patch:
@@ -99,7 +99,7 @@ public static void checkMessageFactory(final Logger logger, MessageFactory messa
             StatusLogger
                     .getLogger()
                     .warn("The Logger {} was created with the message factory {} and is now requested with a null message factory (defaults to {}), which may create log events with unexpected formatting.",
-                            name, loggerMessageFactory, messageFactory);
+                            name, loggerMessageFactory, DEFAULT_MESSAGE_FACTORY_CLASS.getName());
         }
     }
 

File: api/src/test/java/org/apache/logging/log4j/message/StringFormattedMessageTest.java
Patch:
@@ -48,7 +48,7 @@ public static void after() {
     @Test
     public void testNoArgs() {
         String testMsg = "Test message %1s";
-        StringFormattedMessage msg = new StringFormattedMessage(testMsg, null);
+        StringFormattedMessage msg = new StringFormattedMessage(testMsg, (Object[]) null);
         String result = msg.getFormattedMessage();
         String expected = "Test message null";
         assertEquals(expected, result);

File: api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java
Patch:
@@ -99,8 +99,9 @@ public Logger getLogger(String name) {
             return loggers.get(name);
         }
 
-        return loggers.putIfAbsent(name, new SimpleLogger(name, defaultLevel, showLogName, showShortName, showDateTime,
+        loggers.putIfAbsent(name, new SimpleLogger(name, defaultLevel, showLogName, showShortName, showDateTime,
             showContextMap, dateTimeFormat, props, stream));
+        return loggers.get(name);
     }
 
     public boolean hasLogger(String name) {

File: api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java
Patch:
@@ -159,7 +159,7 @@ public <T extends Throwable> T throwing(Level level, T t) {
      * @param t The Throwable.
      */
     public void catching(Throwable t) {
-        if (isEnabled(Level.DEBUG, CATCHING_MARKER, (Object) null, null)) {
+        if (isEnabled(Level.ERROR, CATCHING_MARKER, (Object) null, null)) {
             log(CATCHING_MARKER, FQCN, Level.ERROR, new SimpleMessage(CATCHING), t);
         }
     }

File: core/src/main/java/org/apache/logging/log4j/core/appender/routing/Route.java
Patch:
@@ -71,8 +71,10 @@ public String toString() {
         sb.append("type=");
         if (appenderRef != null) {
             sb.append("static Reference=").append(appenderRef);
+        } else if (node != null) {
+            sb.append("dynamic - type=").append(node.getName());
         } else {
-            sb.append("dynamic");
+            sb.append("invalid Route");
         }
         if (key != null) {
             sb.append(" key='").append(key).append("'");

File: api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java
Patch:
@@ -1157,7 +1157,7 @@ public void error(Message msg, Throwable t) {
      */
     public void error(Marker marker, Message msg) {
         if (isEnabled(Level.ERROR, marker, msg, null)) {
-            log(null, FQCN, Level.ERROR, msg, null);
+            log(marker, FQCN, Level.ERROR, msg, null);
         }
     }
 
@@ -1354,7 +1354,7 @@ public void fatal(Message msg, Throwable t) {
      */
     public void fatal(Marker marker, Message msg) {
         if (isEnabled(Level.FATAL, marker, msg, null)) {
-            log(null, FQCN, Level.FATAL, msg, null);
+            log(marker, FQCN, Level.FATAL, msg, null);
         }
     }
 

File: core/src/main/java/org/apache/logging/log4j/core/layout/RFC5424Layout.java
Patch:
@@ -370,7 +370,7 @@ private void appendMap(Map<String, String> map, StringBuilder sb, ListChecker ch
     {
         SortedMap<String, String> sorted = new TreeMap<String, String>(map);
         for (Map.Entry<String, String> entry : sorted.entrySet()) {
-            if (checker.check(entry.getKey())) {
+            if (checker.check(entry.getKey()) && entry.getValue() != null) {
                 sb.append(" ");
                 sb.append(entry.getKey()).append("=\"").append(entry.getValue()).append("\"");
             }

File: flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeEvent.java
Patch:
@@ -143,7 +143,9 @@ protected void addMapData(String prefix, Map<String, String> fields, MapMessage
 
     protected void addContextData(String prefix, Map<String, String> fields, Map<String, String> context) {
         for (Map.Entry<String, String> entry : context.entrySet()) {
-            fields.put(prefix + entry.getKey(), entry.getValue());
+            if (entry.getKey() != null && entry.getValue() != null) {
+                fields.put(prefix + entry.getKey(), entry.getValue());
+            }
         }
     }
 

File: api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java
Patch:
@@ -188,8 +188,8 @@ protected void setMessageFormat(String msg) {
 
     @Override
     protected void validate(String key, String value) {
-        if (value.length() > MAX_LENGTH) {
-            throw new IllegalArgumentException("Structured data values are limited to 32 characters. key: " + key +
+        if (key.length() > MAX_LENGTH) {
+            throw new IllegalArgumentException("Structured data keys are limited to 32 characters. key: " + key +
                 " value: " + value);
         }
     }

File: log4j12-api/src/test/java/org/apache/log4j/CategoryTest.java
Patch:
@@ -174,7 +174,8 @@ public void testClassName() {
         assertTrue("Incorrect number of messages. Expected 1 got " + msgs.size(), msgs.size() == 1);
         String msg = msgs.get(0);
         appender.clear();
-        String expected = "ERROR o.a.l.CategoryTest [main] Test Message" + LINE_SEP;
+        String threadName = Thread.currentThread().getName();
+        String expected = "ERROR o.a.l.CategoryTest [" + threadName + "] Test Message" + LINE_SEP;
         assertTrue("Incorrect message \"" + msg + "\"" + " expected \"" + expected +"\"", msg.endsWith(expected));
     }
 

File: api/src/main/java/org/apache/logging/log4j/message/MapMessage.java
Patch:
@@ -23,6 +23,8 @@
 import java.util.SortedMap;
 import java.util.TreeMap;
 
+import org.apache.logging.log4j.util.EnglishEnums;
+
 /**
  * Represents a Message that consists of a Map.
  */
@@ -153,7 +155,7 @@ public String asString() {
 
     public String asString(String format) {
         try {
-            return asString(MapFormat.valueOf(format.toUpperCase(Locale.ENGLISH)));
+            return asString(EnglishEnums.valueOf(MapFormat.class, format));
         } catch (IllegalArgumentException ex) {
             return asString();
         }

File: core/src/main/java/org/apache/logging/log4j/core/Filter.java
Patch:
@@ -21,7 +21,9 @@
 
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.Marker;
+import org.apache.logging.log4j.core.net.Protocol;
 import org.apache.logging.log4j.message.Message;
+import org.apache.logging.log4j.util.EnglishEnums;
 
 /**
  * Interface that must be implemented to allow custom event filtering. It is highly recommended that
@@ -68,7 +70,7 @@ public static Result toResult(String name) {
          * @return a Result enum value or null if name is null
          */
         public static Result toResult(String name, Result defaultResult) {
-            return name == null ? defaultResult : Result.valueOf(name.toUpperCase(Locale.ENGLISH));
+            return EnglishEnums.valueOf(Result.class, name, defaultResult);
         }
 }
 

File: core/src/main/java/org/apache/logging/log4j/core/appender/SocketAppender.java
Patch:
@@ -27,8 +27,10 @@
 import org.apache.logging.log4j.core.layout.SerializedLayout;
 import org.apache.logging.log4j.core.net.AbstractSocketManager;
 import org.apache.logging.log4j.core.net.DatagramSocketManager;
+import org.apache.logging.log4j.core.net.Facility;
 import org.apache.logging.log4j.core.net.Protocol;
 import org.apache.logging.log4j.core.net.TCPSocketManager;
+import org.apache.logging.log4j.util.EnglishEnums;
 
 /**
  * An Appender that delivers events over socket connections. Supports both TCP and UDP.
@@ -89,7 +91,7 @@ public static SocketAppender createAppender(@PluginAttr("host") String host,
     }
 
     protected static AbstractSocketManager createSocketManager(String protocol, String host, int port, int delay) {
-        Protocol p = Protocol.valueOf(protocol.toUpperCase(Locale.ENGLISH));
+        Protocol p = EnglishEnums.valueOf(Protocol.class, protocol);
         switch (p) {
             case TCP:
                 return TCPSocketManager.getSocketManager(host, port, delay);

File: core/src/main/java/org/apache/logging/log4j/core/config/JSONConfiguration.java
Patch:
@@ -83,7 +83,7 @@ public JSONConfiguration(ConfigurationFactory.ConfigurationSource configSource)
             PrintStream stream = System.out;
             for (Map.Entry<String, String> entry : rootNode.getAttributes().entrySet()) {
                 if ("status".equalsIgnoreCase(entry.getKey())) {
-                    status = Level.toLevel(getSubst().replace(entry.getValue()).toUpperCase(Locale.ENGLISH), null);
+                    status = Level.toLevel(getSubst().replace(entry.getValue()), null);
                     if (status == null) {
                         status = Level.ERROR;
                         messages.add("Invalid status specified: " + entry.getValue() + ". Defaulting to ERROR");

File: core/src/main/java/org/apache/logging/log4j/core/config/XMLConfiguration.java
Patch:
@@ -103,7 +103,7 @@ public XMLConfiguration(ConfigurationFactory.ConfigurationSource configSource) {
 
             for (Map.Entry<String, String> entry : attrs.entrySet()) {
                 if ("status".equalsIgnoreCase(entry.getKey())) {
-                    status = Level.toLevel(getSubst().replace(entry.getValue()).toUpperCase(Locale.ENGLISH), null);
+                    status = Level.toLevel(getSubst().replace(entry.getValue()), null);
                     if (status == null) {
                         status = Level.ERROR;
                         messages.add("Invalid status specified: " + entry.getValue() + ". Defaulting to ERROR");

File: core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java
Patch:
@@ -132,7 +132,7 @@ public static DynamicThresholdFilter createFilter(@PluginAttr("key") String key,
         Result onMismatch = Result.toResult(mismatch);
         Map<String, Level> map = new HashMap<String, Level>();
         for (KeyValuePair pair : pairs) {
-            map.put(pair.getKey(), Level.toLevel(pair.getValue().toUpperCase(Locale.ENGLISH)));
+            map.put(pair.getKey(), Level.toLevel(pair.getValue()));
         }
         Level l = Level.toLevel(level, Level.ERROR);
         return new DynamicThresholdFilter(key, map, l, onMatch, onMismatch);

File: core/src/main/java/org/apache/logging/log4j/core/filter/ThresholdFilter.java
Patch:
@@ -76,16 +76,16 @@ public String toString() {
 
     /**
      * Create a ThresholdFilter.
-     * @param loggerLevel The log Level.
+     * @param levelName The log Level.
      * @param match The action to take on a match.
      * @param mismatch The action to take on a mismatch.
      * @return The created ThresholdFilter.
      */
     @PluginFactory
-    public static ThresholdFilter createFilter(@PluginAttr("level") String loggerLevel,
+    public static ThresholdFilter createFilter(@PluginAttr("level") String levelName,
                                                @PluginAttr("onMatch") String match,
                                                @PluginAttr("onMismatch") String mismatch) {
-        Level level = loggerLevel == null ? Level.ERROR : Level.toLevel(loggerLevel.toUpperCase(Locale.ENGLISH));
+        Level level = Level.toLevel(levelName, Level.ERROR);
         Result onMatch = Result.toResult(match, Result.NEUTRAL);
         Result onMismatch = Result.toResult(mismatch, Result.DENY);
         return new ThresholdFilter(level, onMatch, onMismatch);

File: core/src/main/java/org/apache/logging/log4j/core/layout/RFC5424Layout.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.logging.log4j.message.Message;
 import org.apache.logging.log4j.message.StructuredDataId;
 import org.apache.logging.log4j.message.StructuredDataMessage;
+import org.apache.logging.log4j.util.EnglishEnums;
 
 import java.net.InetAddress;
 import java.net.NetworkInterface;
@@ -469,7 +470,7 @@ public static RFC5424Layout createLayout(@PluginAttr("facility") String facility
             LOGGER.error("mdcIncludes and mdcExcludes are mutually exclusive. Includes wil be ignored");
             includes = null;
         }
-        Facility f = facility != null ? Facility.valueOf(facility.toUpperCase(Locale.ENGLISH)) : Facility.LOCAL0;
+        Facility f = Facility.toFacility(facility, Facility.LOCAL0);
         int enterpriseNumber = ein == null ? DEFAULT_ENTERPRISE_NUMBER : Integer.parseInt(ein);
         boolean isMdc = includeMDC == null ? true : Boolean.valueOf(includeMDC);
         boolean includeNewLine = includeNL == null ? false : Boolean.valueOf(includeNL);

File: core/src/main/java/org/apache/logging/log4j/core/layout/SyslogLayout.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
 import org.apache.logging.log4j.core.net.Facility;
 import org.apache.logging.log4j.core.net.Priority;
+import org.apache.logging.log4j.util.EnglishEnums;
 
 import java.net.InetAddress;
 import java.net.UnknownHostException;
@@ -126,7 +127,7 @@ public static SyslogLayout createLayout(@PluginAttr("facility") String facility,
             }
         }
         boolean includeNewLine = includeNL == null ? false : Boolean.valueOf(includeNL);
-        Facility f = facility != null ? Facility.valueOf(facility.toUpperCase(Locale.ENGLISH)) : Facility.LOCAL0;
+        Facility f = Facility.toFacility(facility, Facility.LOCAL0);
         return new SyslogLayout(f, includeNewLine, c);
     }
 }

File: core/src/main/java/org/apache/logging/log4j/core/pattern/LevelPatternConverter.java
Patch:
@@ -64,7 +64,7 @@ public static LevelPatternConverter newInstance(final String[] options) {
                 LOGGER.error("Invalid option {}", def);
                 continue;
             }
-            Level level = Level.toLevel(pair[0].trim().toUpperCase(Locale.ENGLISH), null);
+            Level level = Level.toLevel(pair[0].trim(), null);
             if (level == null) {
                 LOGGER.error("Invalid Level {}", pair[0].trim());
             }

File: core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java
Patch:
@@ -128,8 +128,8 @@ public static DynamicThresholdFilter createFilter(@PluginAttr("key") String key,
                                                       @PluginAttr("defaultThreshold") String level,
                                                       @PluginAttr("onmatch") String match,
                                                       @PluginAttr("onmismatch") String mismatch) {
-        Result onMatch = match == null ? null : Result.toResult(match);
-        Result onMismatch = mismatch == null ? null : Result.toResult(mismatch);
+        Result onMatch = Result.toResult(match);
+        Result onMismatch = Result.toResult(mismatch);
         Map<String, Level> map = new HashMap<String, Level>();
         for (KeyValuePair pair : pairs) {
             map.put(pair.getKey(), Level.toLevel(pair.getValue().toUpperCase(Locale.ENGLISH)));

File: core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java
Patch:
@@ -224,8 +224,8 @@ public static BurstFilter createFilter(@PluginAttr("level") String level,
                                            @PluginAttr("maxBurst") String maxBurst,
                                            @PluginAttr("onmatch") String match,
                                            @PluginAttr("onmismatch") String mismatch) {
-        Result onMatch = match == null ? null : Result.toResult(match);
-        Result onMismatch = mismatch == null ? null : Result.toResult(mismatch);
+        Result onMatch = Result.toResult(match);
+        Result onMismatch = Result.toResult(mismatch);
         Level lvl = Level.toLevel(level, Level.WARN);
         float eventRate = rate == null ? DEFAULT_RATE : Float.parseFloat(rate);
         if (eventRate <= 0) {

File: core/src/main/java/org/apache/logging/log4j/core/filter/MapFilter.java
Patch:
@@ -149,8 +149,8 @@ public static MapFilter createFilter(@PluginElement("pairs") KeyValuePair[] pair
             return null;
         }
         boolean isAnd = oper == null || !oper.equalsIgnoreCase("or");
-        Result onMatch = match == null ? null : Result.toResult(match);
-        Result onMismatch = mismatch == null ? null : Result.toResult(mismatch);
+        Result onMatch = Result.toResult(match);
+        Result onMismatch = Result.toResult(mismatch);
         return new MapFilter(map, isAnd, onMatch, onMismatch);
     }
 }

File: core/src/main/java/org/apache/logging/log4j/core/filter/MarkerFilter.java
Patch:
@@ -87,8 +87,8 @@ public static MarkerFilter createFilter(@PluginAttr("marker") String marker,
             LOGGER.error("A marker must be provided for MarkerFilter");
             return null;
         }
-        Result onMatch = match == null ? null : Result.toResult(match);
-        Result onMismatch = mismatch == null ? null : Result.toResult(mismatch);
+        Result onMatch = Result.toResult(match);
+        Result onMismatch = Result.toResult(mismatch);
         return new MarkerFilter(marker, onMatch, onMismatch);
     }
 

File: core/src/main/java/org/apache/logging/log4j/core/filter/RegexFilter.java
Patch:
@@ -113,8 +113,8 @@ public static RegexFilter createFilter(@PluginAttr("regex") String regex,
             LOGGER.error("RegexFilter caught exception compiling pattern: " + regex + " cause: " + ex.getMessage());
             return null;
         }
-        Result onMatch = match == null ? null : Result.toResult(match);
-        Result onMismatch = mismatch == null ? null : Result.toResult(mismatch);
+        Result onMatch = Result.toResult(match);
+        Result onMismatch = Result.toResult(mismatch);
 
         return new RegexFilter(raw, pattern, onMatch, onMismatch);
     }

File: core/src/main/java/org/apache/logging/log4j/core/filter/StructuredDataFilter.java
Patch:
@@ -133,8 +133,8 @@ public static StructuredDataFilter createFilter(@PluginAttr("pairs") KeyValuePai
             return null;
         }
         boolean isAnd = oper == null || !oper.equalsIgnoreCase("or");
-        Result onMatch = match == null ? null : Result.toResult(match);
-        Result onMismatch = mismatch == null ? null : Result.toResult(mismatch);
+        Result onMatch = Result.toResult(match);
+        Result onMismatch = Result.toResult(mismatch);
         return new StructuredDataFilter(map, isAnd, onMatch, onMismatch);
     }
 }

File: core/src/main/java/org/apache/logging/log4j/core/filter/ThreadContextMapFilter.java
Patch:
@@ -142,8 +142,8 @@ public static ThreadContextMapFilter createFilter(@PluginElement("pairs") KeyVal
             return null;
         }
         boolean isAnd = oper == null || !oper.equalsIgnoreCase("or");
-        Result onMatch = match == null ? null : Result.toResult(match);
-        Result onMismatch = mismatch == null ? null : Result.toResult(mismatch);
+        Result onMatch = Result.toResult(match);
+        Result onMismatch = Result.toResult(mismatch);
         return new ThreadContextMapFilter(map, isAnd, onMatch, onMismatch);
     }
 }

File: core/src/main/java/org/apache/logging/log4j/core/filter/ThresholdFilter.java
Patch:
@@ -86,9 +86,8 @@ public static ThresholdFilter createFilter(@PluginAttr("level") String loggerLev
                                                @PluginAttr("onMatch") String match,
                                                @PluginAttr("onMismatch") String mismatch) {
         Level level = loggerLevel == null ? Level.ERROR : Level.toLevel(loggerLevel.toUpperCase(Locale.ENGLISH));
-        Result onMatch = match == null ? Result.NEUTRAL : Result.toResult(match);
-        Result onMismatch = mismatch == null ? Result.DENY : Result.toResult(mismatch);
-
+        Result onMatch = Result.toResult(match, Result.NEUTRAL);
+        Result onMismatch = Result.toResult(mismatch, Result.DENY);
         return new ThresholdFilter(level, onMatch, onMismatch);
     }
 

File: core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java
Patch:
@@ -127,9 +127,8 @@ public static TimeFilter createFilter(@PluginAttr("start") String start,
             }
         }
         TimeZone timezone = (tz == null) ? TimeZone.getDefault() : TimeZone.getTimeZone(tz);
-        Result onMatch = match == null ? Result.NEUTRAL : Result.toResult(match);
-        Result onMismatch = mismatch == null ? Result.DENY : Result.toResult(mismatch);
-
+        Result onMatch = Result.toResult(match, Result.NEUTRAL);
+        Result onMismatch = Result.toResult(mismatch, Result.DENY);
         return new TimeFilter(s, e, timezone, onMatch, onMismatch);
     }
 

File: core/src/test/java/org/apache/logging/log4j/core/pattern/PatternParserTest.java
Patch:
@@ -122,7 +122,7 @@ public void testNestedPattern() {
             formatter.format(event, buf);
         }
         String str = buf.toString();
-        String expected = String.format("] INFO : Hello, world%s\u001B[m", System.getProperty("line.separator"));
+        String expected = String.format("] INFO : Hello, world%s\u001B[m", LINE_SEP);
         assertTrue(" Expected to end with: " + expected + ". Actual: " + str, str.endsWith(expected));
     }
 

File: core/src/test/java/org/apache/logging/log4j/core/pattern/PatternParserTest.java
Patch:
@@ -115,14 +115,14 @@ public void testNestedPattern() {
         Throwable t = new Throwable();
         StackTraceElement[] elements = t.getStackTrace();
         LogEvent event = new Log4jLogEvent("org.apache.logging.log4j.PatternParserTest", MarkerManager.getMarker("TEST"),
-            Logger.class.getName(), Level.INFO, new SimpleMessage("Hello, world"), null,
-            null, null, "Thread1", elements[0], System.currentTimeMillis());
+                Logger.class.getName(), Level.INFO, new SimpleMessage("Hello, world"), null, null, null, "Thread1", elements[0],
+                System.currentTimeMillis());
         StringBuilder buf = new StringBuilder();
         for (PatternFormatter formatter : formatters) {
             formatter.format(event, buf);
         }
         String str = buf.toString();
-        String expected = "] INFO : Hello, world\n\u001B[m";
+        String expected = String.format("] INFO : Hello, world%s\u001B[m", System.getProperty("line.separator"));
         assertTrue(" Expected to end with: " + expected + ". Actual: " + str, str.endsWith(expected));
     }
 

File: api/src/main/java/org/apache/logging/log4j/Level.java
Patch:
@@ -91,7 +91,7 @@ public static Level toLevel(String sArg) {
      *
      * @param sArg The name of the desired Level.
      * @param defaultLevel The Level to use if the String is invalid.
-     * @return The LEvel associated with the String.
+     * @return The Level associated with the String.
      */
     public static Level toLevel(String sArg, Level defaultLevel) {
         if (sArg == null) {

File: core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java
Patch:
@@ -302,7 +302,7 @@ private synchronized void waitForCompletion() {
 
     /**
      * Logs an event.
-     * @param event Yhe log event.
+     * @param event The log event.
      */
     public void log(LogEvent event) {
 

File: core/src/main/java/org/apache/logging/log4j/core/layout/SerializedLayout.java
Patch:
@@ -59,7 +59,7 @@ public byte[] toByteArray(final LogEvent event) {
             ObjectOutputStream oos = new PrivateObjectOutputStream(baos);
             oos.writeObject(event);
         } catch (IOException ioe) {
-            LOGGER.error("Serialization of Logging Event failed.", ioe);
+            LOGGER.error("Serialization of LogEvent failed.", ioe);
         }
         return baos.toByteArray();
     }

File: core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java
Patch:
@@ -37,11 +37,9 @@ protected AbstractStringLayout(Charset charset) {
         this.charset = charset;
         boolean useClass = false;
         try {
-            Class[] types = new Class[] {Charset.class};
-            if (String.class.getMethod("getBytes", types) != null) {
+            if (String.class.getMethod("getBytes", new Class[] {Charset.class}) != null) {
                 useClass = true;
             }
-
         } catch (NoSuchMethodException ex) {
             // Not JDK 6 or greater.
         }

File: core/src/main/java/org/apache/logging/log4j/core/layout/RFC5424Layout.java
Patch:
@@ -188,7 +188,7 @@ public String toSerializable(final LogEvent event) {
             String text;
             if (isStructured) {
                 StructuredDataMessage data = (StructuredDataMessage) msg;
-                Map map = data.getData();
+                Map<String, String> map = data.getData();
                 id = data.getId();
                 formatStructuredElement(id, map, buf, noopChecker);
                 text = data.getFormat();

File: core/src/main/java/org/apache/logging/log4j/core/net/DatagramSocketManager.java
Patch:
@@ -25,7 +25,7 @@
  */
 public class DatagramSocketManager extends AbstractSocketManager {
 
-    private static final ManagerFactory factory = new DatagramSocketManagerFactory();
+    private static final DatagramSocketManagerFactory factory = new DatagramSocketManagerFactory();
 
     /**
      * The Constructor.

File: core/src/main/java/org/apache/logging/log4j/core/net/JMSQueueManager.java
Patch:
@@ -34,7 +34,7 @@
  */
 public class JMSQueueManager extends AbstractJMSManager {
 
-    private static final ManagerFactory factory = new JMSQueueManagerFactory();
+    private static final JMSQueueManagerFactory factory = new JMSQueueManagerFactory();
 
     private final QueueConnection queueConnection;
     private final QueueSession queueSession;

File: core/src/main/java/org/apache/logging/log4j/core/net/JMSTopicManager.java
Patch:
@@ -34,7 +34,7 @@
  */
 public class JMSTopicManager extends AbstractJMSManager {
 
-    private static final ManagerFactory factory = new JMSTopicManagerFactory();
+    private static final JMSTopicManagerFactory factory = new JMSTopicManagerFactory();
 
     private final TopicConnection topicConnection;
     private final TopicSession topicSession;

File: core/src/main/java/org/apache/logging/log4j/core/net/TCPSocketManager.java
Patch:
@@ -40,7 +40,7 @@ The default port number of remote logging server (4560).
      */
     private static final int DEFAULT_PORT = 4560;
 
-    private static final ManagerFactory factory = new TCPSocketManagerFactory();
+    private static final TCPSocketManagerFactory factory = new TCPSocketManagerFactory();
 
     private final int reconnectionDelay;
 

File: core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java
Patch:
@@ -35,7 +35,7 @@
  */
 public class RollingFileManager extends FileManager {
 
-    private static ManagerFactory factory = new RollingFileManagerFactory();
+    private static RollingFileManagerFactory factory = new RollingFileManagerFactory();
 
     private long size;
     private long initialTime;

File: core/src/main/java/org/apache/logging/log4j/core/appender/rolling/helper/CompositeAction.java
Patch:
@@ -41,7 +41,7 @@ public class CompositeAction extends AbstractAction {
      * @param actions     list of actions, may not be null.
      * @param stopOnError if true, stop on the first false return value or exception.
      */
-    public CompositeAction(final List actions,
+    public CompositeAction(final List<Action> actions,
                            final boolean stopOnError) {
         this.actions = new Action[actions.size()];
         actions.toArray(this.actions);

File: core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java
Patch:
@@ -31,7 +31,7 @@
  */
 public class FileManager extends OutputStreamManager {
 
-    private static final ManagerFactory factory = new FileManagerFactory();
+    private static final FileManagerFactory factory = new FileManagerFactory();
 
     private final boolean isAppend;
     private final boolean isLocking;

File: core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java
Patch:
@@ -43,7 +43,7 @@ protected OutputStreamManager(OutputStream os, String streamName) {
      * @return An OutputStreamManager.
      */
     public static <T> OutputStreamManager getManager(String name, T data,
-                                                 ManagerFactory<OutputStreamManager, T> factory) {
+                                                 ManagerFactory<? extends OutputStreamManager, T> factory) {
         return AbstractManager.getManager(name, factory, data);
     }
 

File: core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java
Patch:
@@ -42,7 +42,7 @@
 @Plugin(name = "Console", type = "Core", elementType = "appender", printObject = true)
 public final class ConsoleAppender extends OutputStreamAppender {
 
-    private static ManagerFactory factory = new ConsoleManagerFactory();
+    private static ConsoleManagerFactory factory = new ConsoleManagerFactory();
 
     /**
      * Enumeration of console destinations.

File: core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java
Patch:
@@ -42,8 +42,8 @@ protected OutputStreamManager(OutputStream os, String streamName) {
      * @param factory The factory to use to create the Manager.
      * @return An OutputStreamManager.
      */
-    public static OutputStreamManager getManager(String name, Object data,
-                                                 ManagerFactory<OutputStreamManager, Object> factory) {
+    public static <T> OutputStreamManager getManager(String name, T data,
+                                                 ManagerFactory<OutputStreamManager, T> factory) {
         return AbstractManager.getManager(name, factory, data);
     }
 

File: core/src/main/java/org/apache/logging/log4j/core/appender/ManagerFactory.java
Patch:
@@ -18,16 +18,16 @@
 
 /**
  * Creates Manager objects.
- * @param <F> The Manager type.
+ * @param <M> The Manager type.
  * @param <T> The Factory data type.
  */
-public interface ManagerFactory<F, T> {
+public interface ManagerFactory<M, T> {
 
     /**
      * Creates a Manager.
      * @param name The name of the entity to manage.
      * @param data The data required to create the entity.
      * @return A Manager for the entity.
      */
-    F createManager(String name, T data);
+    M createManager(String name, T data);
 }

File: api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java
Patch:
@@ -154,7 +154,7 @@ public <T extends Throwable> T throwing(Level level, T t) {
     }
 
     /**
-     * Logs a Throwable at the {@link Level.ERROR ERROR} level..
+     * Logs a Throwable at the {@link Level#ERROR ERROR} level..
      *
      * @param t The Throwable.
      */

File: core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Filter;
-import org.apache.logging.log4j.core.LifeCycle;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.appender.AppenderRuntimeException;
 import org.apache.logging.log4j.core.filter.Filterable;

File: core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java
Patch:
@@ -82,7 +82,7 @@ public void callAppender(LogEvent event) {
         try {
             recursive.set(this);
 
-            if (appender instanceof LifeCycle && !appender.isStarted()) {
+            if (!appender.isStarted()) {
                 appender.getHandler().error("Attempted to append to non-started appender " + appender.getName());
 
                 if (!appender.isExceptionSuppressed()) {

File: core/src/main/java/org/apache/logging/log4j/core/pattern/HighlightConverter.java
Patch:
@@ -74,8 +74,6 @@ public final class HighlightConverter extends LogEventPatternConverter {
 
     private static final String STYLE_KEY_LOGBACK = "LOGBACK";
 
-    private static final String STYLE_KEY_LOG4J = "LOG4J";
-
     private static final String STYLE_KEY = "STYLE";
 
     private static final EnumMap<Level, String> DEFAULT_STYLES = new EnumMap<Level, String>(Level.class);
@@ -101,7 +99,6 @@ public final class HighlightConverter extends LogEventPatternConverter {
         LOGBACK_STYLES.put(Level.TRACE, AnsiEscape.createSequence(null));
         // Style map:
         STYLES.put(STYLE_KEY_DEFAULT, DEFAULT_STYLES);
-        STYLES.put(STYLE_KEY_LOG4J, DEFAULT_STYLES);
         STYLES.put(STYLE_KEY_LOGBACK, LOGBACK_STYLES);
     }
 

File: core/src/main/java/org/apache/logging/log4j/core/config/Configurator.java
Patch:
@@ -75,7 +75,7 @@ public static LoggerContext initialize(String name, ClassLoader loader, URI conf
      * @param source The InputSource for the configuration.
      * @return The LoggerContext.
      */
-    public static LoggerContext initialize(ClassLoader loader, InputSource source) {
+    public static LoggerContext initialize(ClassLoader loader, ConfigurationFactory.ConfigurationSource source) {
 
         try {
             LoggerContext ctx = (LoggerContext) LogManager.getContext(loader, false);

File: core/src/main/java/org/apache/logging/log4j/core/config/FileConfigurationMonitor.java
Patch:
@@ -50,7 +50,7 @@ public class FileConfigurationMonitor implements ConfigurationMonitor {
      * @param reconfigurable The Configuration that can be reconfigured.
      * @param file The File to monitor.
      * @param listeners The List of ConfigurationListeners to notify upon a change.
-     * @param interval The monitor interval in seconds. The minimum interval is 30 seconds.
+     * @param interval The monitor interval in seconds. The minimum interval is 5 seconds.
      */
     public FileConfigurationMonitor(Reconfigurable reconfigurable, File file, List<ConfigurationListener> listeners,
                                     int interval) {

File: core/src/main/java/org/apache/logging/log4j/core/config/JSONConfigurationFactory.java
Patch:
@@ -61,11 +61,11 @@ protected boolean isActive() {
     }
 
     @Override
-    public Configuration getConfiguration(InputSource source) {
+    public Configuration getConfiguration(ConfigurationSource source) {
         if (!isActive) {
             return null;
         }
-        return new JSONConfiguration(source, configFile);
+        return new JSONConfiguration(source);
     }
 
     @Override

File: core/src/main/java/org/apache/logging/log4j/core/config/XMLConfigurationFactory.java
Patch:
@@ -37,8 +37,8 @@ public class XMLConfigurationFactory extends ConfigurationFactory {
      * @return The Configuration.
      */
     @Override
-    public Configuration getConfiguration(InputSource source) {
-        return new XMLConfiguration(source, configFile);
+    public Configuration getConfiguration(ConfigurationSource source) {
+        return new XMLConfiguration(source);
     }
 
     /**

File: core/src/main/java/org/apache/logging/log4j/core/config/plugins/ResolverUtil.java
Patch:
@@ -276,8 +276,8 @@ public void findInPackage(Test test, String packageName) {
     }
 
     private void loadImplementationsInBundle(Test test, String packageName) {
-        Collection<String> list = FrameworkUtil.getBundle(ResolverUtil.class).adapt(BundleWiring.class)
-            .listResources(packageName, "*.class", BundleWiring.LISTRESOURCES_RECURSE);
+        BundleWiring wiring = (BundleWiring)FrameworkUtil.getBundle(ResolverUtil.class).adapt(BundleWiring.class);
+        Collection<String> list = wiring.listResources(packageName, "*.class", BundleWiring.LISTRESOURCES_RECURSE);
         for (String name : list) {
             addIfMatching(test, name);
         }

File: core/src/test/java/org/apache/logging/log4j/core/BasicConfigurationFactory.java
Patch:
@@ -41,7 +41,7 @@ public String[] getSupportedTypes() {
     }
 
     @Override
-    public Configuration getConfiguration(InputSource source) {
+    public Configuration getConfiguration(ConfigurationSource source) {
         return null;
     }
 

File: log4j12-api/src/test/java/org/apache/log4j/BasicConfigurationFactory.java
Patch:
@@ -36,7 +36,7 @@ public String[] getSupportedTypes() {
     }
 
     @Override
-    public Configuration getConfiguration(InputSource source) {
+    public Configuration getConfiguration(ConfigurationSource source) {
         return new BasicConfiguration();
     }
 

File: core/src/main/java/org/apache/logging/log4j/core/config/XMLConfigurationFactory.java
Patch:
@@ -20,7 +20,7 @@
 import org.xml.sax.InputSource;
 
 /**
- * Factory to coonstruct an XMLConfiguration.
+ * Factory to construct an XMLConfiguration.
  */
 @Plugin(name = "XMLConfigurationFactory", type = "ConfigurationFactory")
 @Order(5)

File: core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java
Patch:
@@ -103,7 +103,7 @@ public Log4jLogEvent(String loggerName, Marker marker, String fqcn, Level level,
         this.fqcnOfLogger = fqcn;
         this.level = level;
         this.message = message;
-        this.throwable = t == null ? null : new ThrowableProxy(t);
+        this.throwable = (t == null ? null : (t instanceof ThrowableProxy ? (ThrowableProxy)t : new ThrowableProxy(t)));
         this.mdc = mdc;
         this.ndc = ndc;
         this.timestamp = message instanceof TimestampMessage ? ((TimestampMessage) message).getTimestamp() : timestamp;

File: api/src/main/java/org/apache/logging/log4j/LogManager.java
Patch:
@@ -39,7 +39,7 @@ public class LogManager {
      */
     public static final String ROOT_LOGGER_NAME = "";
 
-    private static final String LOGGER_RESOURCE = "META-INF/log4j-provider.xml";
+    private static final String LOGGER_RESOURCE = "META-INF/log4j-provider.properties";
     private static final String LOGGER_CONTEXT_FACTORY = "LoggerContextFactory";
     private static final String API_VERSION = "Log4jAPIVersion";
     private static final String FACTORY_PRIORITY = "FactoryPriority";
@@ -95,7 +95,7 @@ protected LogManager() {
                     Properties props = new Properties();
                     URL url = enumResources.nextElement();
                     try {
-                        props.loadFromXML(url.openStream());
+                        props.load(url.openStream());
                     } catch (IOException ioe) {
                         logger.error("Unable to read " + url.toString(), ioe);
                     }

File: api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContextFactory.java
Patch:
@@ -14,7 +14,7 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-package org.apache.logging.log4j;
+package org.apache.logging.log4j.simple;
 
 import org.apache.logging.log4j.spi.LoggerContext;
 import org.apache.logging.log4j.spi.LoggerContextFactory;

File: api/src/test/java/org/apache/logging/log4j/EventLoggerTest.java
Patch:
@@ -31,7 +31,7 @@
  */
 public class EventLoggerTest {
 
-    SimpleLogger logger = (SimpleLogger) LogManager.getLogger("EventLogger");
+    TestLogger logger = (TestLogger) LogManager.getLogger("EventLogger");
     List<String> results = logger.getEntries();
 
     @Before

File: api/src/test/java/org/apache/logging/log4j/LoggerTest.java
Patch:
@@ -34,7 +34,7 @@
  */
 public class LoggerTest {
 
-    SimpleLogger logger = (SimpleLogger) LogManager.getLogger("LoggerTest");
+    TestLogger logger = (TestLogger) LogManager.getLogger("LoggerTest");
     List<String> results = logger.getEntries();
 
     @Before

File: api/src/test/java/org/apache/logging/log4j/TestLogger.java
Patch:
@@ -28,7 +28,7 @@
 /**
  *
  */
-public class SimpleLogger extends AbstractLogger {
+public class TestLogger extends AbstractLogger {
     private List<String> array = new ArrayList<String>();
 
     public List<String> getEntries() {

File: api/src/test/java/org/apache/logging/log4j/TestLoggerContext.java
Patch:
@@ -21,8 +21,8 @@
 /**
  *
  */
-public class SimpleLoggerContext implements LoggerContext {
-    private Logger logger = new SimpleLogger();
+public class TestLoggerContext implements LoggerContext {
+    private Logger logger = new TestLogger();
 
     public Logger getLogger(String name) {
         return logger;

File: core/src/test/java/org/apache/logging/log4j/core/layout/RFC5424LayoutTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.logging.log4j.core.BasicConfigurationFactory;
 import org.apache.logging.log4j.core.Logger;
 import org.apache.logging.log4j.core.LoggerContext;
+import org.apache.logging.log4j.status.StatusLogger;
 import org.apache.logging.log4j.test.appender.ListAppender;
 import org.apache.logging.log4j.core.config.ConfigurationFactory;
 import org.apache.logging.log4j.message.StructuredDataMessage;
@@ -54,6 +55,7 @@ public class RFC5424LayoutTest {
 
     @BeforeClass
     public static void setupClass() {
+        StatusLogger.getLogger().setLevel(Level.OFF);
         ConfigurationFactory.setConfigurationFactory(cf);
         LoggerContext ctx = (LoggerContext) LogManager.getContext();
         ctx.reconfigure();

File: core/src/test/java/org/apache/logging/log4j/core/net/SocketServerTest.java
Patch:
@@ -96,7 +96,7 @@ public void testServer() throws Exception {
             "Test", null, null, null, socketFilter);
         appender.start();
         ListAppender listApp = new ListAppender("Events", serverFilter, null, false, false);
-        appender.start();
+        listApp.start();
         PatternLayout layout = PatternLayout.createLayout("%m %ex%n", null, null, null);
         ConsoleAppender console = ConsoleAppender.createAppender(layout, null, "SYSTEM_OUT", "Console", "true");
         Logger serverLogger = ctx.getLogger(SocketServer.class.getName());

File: flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Logger;
 import org.apache.logging.log4j.core.LoggerContext;
+import org.apache.logging.log4j.status.StatusLogger;
 import org.junit.After;
 import org.junit.AfterClass;
 import org.junit.Assert;
@@ -68,6 +69,7 @@ public class FlumeAppenderTest {
 
     @BeforeClass
     public static void setupClass() {
+        StatusLogger.getLogger().setLevel(Level.OFF);
         ctx = (LoggerContext) LogManager.getContext();
     }
 

File: core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java
Patch:
@@ -107,7 +107,7 @@ public String lookup(LogEvent event, String var) {
             if (value != null) {
                 return value;
             }
-            var = var.substring(prefixPos);
+            var = var.substring(prefixPos + 1);
         }
         if (defaultLookup != null) {
             return event == null ? defaultLookup.lookup(var) : defaultLookup.lookup(event, var);

File: core/src/test/java/org/apache/logging/log4j/core/lookup/InterpolatorTest.java
Patch:
@@ -61,5 +61,8 @@ public void testLookup() {
         assertEquals(TESTVAL, value);
         value = lookup.lookup("BadKey");
         assertNull(value);
+        ThreadContext.clear();
+        value = lookup.lookup("ctx:" + TESTKEY);
+        assertEquals(TESTVAL, value);
     }
 }

File: api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java
Patch:
@@ -151,7 +151,7 @@ public <T extends Throwable> T throwing(Level level, T t) {
     }
 
     /**
-     * Logs an exception or error that has been caught.
+     * Logs a Throwable at the {@link Level.ERROR ERROR} level..
      *
      * @param t The Throwable.
      */

File: api/src/test/java/org/apache/logging/log4j/LoggerTest.java
Patch:
@@ -131,7 +131,7 @@ public void structuredData() {
     }
 
     @Test
-    public void LoggerByClass() {
+    public void getLoggerByClass() {
         Logger classLogger = LogManager.getLogger(LoggerTest.class);
         assertNotNull(classLogger);
     }

File: core/src/main/java/org/apache/logging/log4j/core/Appender.java
Patch:
@@ -44,7 +44,7 @@ public interface Appender extends Lifecycle {
      * @return the Layout for the Appender or null if none is configured.
      * @issue LOG4J2-36 Refactor into Channel
      */
-    Layout getLayout();
+    Layout<?> getLayout();
 
     /**
      * If set to true any exceptions thrown by the Appender will be logged but not thrown.

File: core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java
Patch:
@@ -262,7 +262,7 @@ private static class PatternAbbreviator extends NameAbbreviator {
          *
          * @param fragments element abbreviation patterns.
          */
-        public PatternAbbreviator(List fragments) {
+        public PatternAbbreviator(List<PatternAbbreviatorFragment> fragments) {
             if (fragments.size() == 0) {
                 throw new IllegalArgumentException(
                     "fragments must have at least one element");

File: core/src/main/java/org/apache/logging/log4j/core/helpers/OptionConverter.java
Patch:
@@ -103,7 +103,7 @@ public static String getSystemProperty(String key, String def) {
     }
 
 
-    public static Object instantiateByKey(Properties props, String key, Class superClass,
+    public static Object instantiateByKey(Properties props, String key, Class<?> superClass,
                                    Object defaultValue) {
 
         // Get the value of the property in string form
@@ -230,11 +230,11 @@ public static String findAndSubst(String key, Properties props) {
      * @param defaultValue The object to return in case of non-fulfillment
      * @return The created object.
      */
-    public static Object instantiateByClassName(String className, Class superClass,
+    public static Object instantiateByClassName(String className, Class<?> superClass,
                                          Object defaultValue) {
         if (className != null) {
             try {
-                Class classObj = Loader.loadClass(className);
+                Class<?> classObj = Loader.loadClass(className);
                 if (!superClass.isAssignableFrom(classObj)) {
                     LOGGER.error("A \"" + className + "\" object is not assignable to a \"" +
                         superClass.getName() + "\" variable.");

File: core/src/main/java/org/apache/logging/log4j/core/helpers/Loader.java
Patch:
@@ -203,7 +203,7 @@ public static InputStream getResourceAsStream(String resource, ClassLoader defau
      * @return The Class.
      * @throws ClassNotFoundException if the Class could not be found.
      */
-    public static Class loadClass(String className) throws ClassNotFoundException {
+    public static Class<?> loadClass(String className) throws ClassNotFoundException {
         // Just call Class.forName(className) if we are instructed to ignore the TCL.
         if (ignoreTCL) {
             return Class.forName(className);
@@ -216,7 +216,7 @@ public static Class loadClass(String className) throws ClassNotFoundException {
         }
     }
 
-    public static ClassLoader getClassLoader(Class class1, Class class2) {
+    public static ClassLoader getClassLoader(Class<?> class1, Class<?> class2) {
 
         ClassLoader loader1 = null;
         try {

File: core/src/main/java/org/apache/logging/log4j/core/helpers/Loader.java
Patch:
@@ -262,9 +262,9 @@ private static ClassLoader getTCL() throws IllegalAccessException, InvocationTar
         if (System.getSecurityManager() == null) {
             cl = Thread.currentThread().getContextClassLoader();
         } else {
-            cl = (ClassLoader) java.security.AccessController.doPrivileged(
-                new java.security.PrivilegedAction() {
-                    public Object run() {
+            cl = java.security.AccessController.doPrivileged(
+                new java.security.PrivilegedAction<ClassLoader>() {
+                    public ClassLoader run() {
                         return Thread.currentThread().getContextClassLoader();
                     }
                 }

File: core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java
Patch:
@@ -132,7 +132,7 @@ public List<PatternFormatter> parse(String pattern) {
 
         parse(pattern, converters, fields);
 
-        Iterator fieldIter = fields.iterator();
+        Iterator<FormattingInfo> fieldIter = fields.iterator();
 
         for (PatternConverter converter : converters) {
             LogEventPatternConverter pc;
@@ -145,7 +145,7 @@ public List<PatternFormatter> parse(String pattern) {
 
             FormattingInfo field;
             if (fieldIter.hasNext()) {
-                field = (FormattingInfo) fieldIter.next();
+                field = fieldIter.next();
             } else {
                 field = FormattingInfo.getDefault();
             }

File: core/src/main/java/org/apache/logging/log4j/core/config/plugins/ResolverUtil.java
Patch:
@@ -48,7 +48,7 @@
  * methods.</p>
  *
  * <p>General searches are initiated by calling the
- * {@link #find(org.apache.logging.log4j.core..util.ResolverUtil.Test, String...)} ()} method and supplying
+ * {@link #find(ResolverUtil.Test, String...)} method and supplying
  * a package name and a Test instance. This will cause the named package <b>and all sub-packages</b>
  * to be scanned for classes that meet the test. There are also utility methods for the common
  * use cases of scanning multiple packages for extensions of particular classes, or classes

File: core/src/main/java/org/apache/logging/log4j/core/config/Loggers.java
Patch:
@@ -25,7 +25,7 @@ public class Loggers {
     private final ConcurrentMap<String, LoggerConfig> map;
     private final LoggerConfig root;
 
-    public Loggers(ConcurrentMap map, LoggerConfig root) {
+    public Loggers(ConcurrentMap<String, LoggerConfig> map, LoggerConfig root) {
         this.map = map;
         this.root = root;
     }

File: api/src/test/java/org/apache/logging/log4j/AbstractLoggerTest.java
Patch:
@@ -36,7 +36,7 @@ public class AbstractLoggerTest extends AbstractLogger {
 
     private static Throwable t = new UnsupportedOperationException("Test");
 
-    private static Class obj = AbstractLogger.class;
+    private static Class<AbstractLogger> obj = AbstractLogger.class;
 
     private static String pattern = "{}, {}";
     private static String p1 = "Long Beach";

File: log4j12-api/src/main/java/org/apache/log4j/Category.java
Patch:
@@ -250,7 +250,7 @@ public boolean isEnabledFor(Priority level) {
 
     public void forcedLog(String fqcn, Priority level, Object message, Throwable t) {
         org.apache.logging.log4j.Level lvl = org.apache.logging.log4j.Level.toLevel(level.toString());
-        Message msg = message instanceof Message ? (ObjectMessage) message : new ObjectMessage(message);
+        Message msg = message instanceof Message ? (Message) message : new ObjectMessage(message);
         logger.log(null, fqcn, lvl, msg, t);
     }
 

File: api/src/main/java/org/apache/logging/log4j/Level.java
Patch:
@@ -25,7 +25,7 @@
  * INFO<br>
  * DEBUG<br>
  * TRACE<br>
- * AL    (least specific)<br>
+ * ALL    (least specific)<br>
  *
  * Typically, configuring a level in a filter or on a logger will cause logging events of that level and those
  * that are more specific to pass through the filter.

File: api/src/main/java/org/apache/logging/log4j/message/MapMessage.java
Patch:
@@ -282,7 +282,7 @@ public boolean equals(Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (o == null || this.getClass() != o.getClass()) {
             return false;
         }
 

File: core/src/main/java/org/apache/logging/log4j/core/config/DefaultConfiguration.java
Patch:
@@ -48,6 +48,7 @@ public DefaultConfiguration() {
         Layout layout = PatternLayout.createLayout("%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n",
             null, null, null);
         Appender appender = ConsoleAppender.createAppender(layout, null, "SYSTEM_OUT", "Console", "true");
+        appender.start();
         addAppender(appender);
         LoggerConfig root = getRootLogger();
         root.addAppender(appender, null, null);

File: core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java
Patch:
@@ -27,8 +27,6 @@
 
 import java.io.OutputStream;
 import java.lang.reflect.Constructor;
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
 
 /**
  * ConsoleAppender appends log events to <code>System.out</code> or

File: core/src/main/java/org/apache/logging/log4j/core/pattern/HighlightConverter.java
Patch:
@@ -33,8 +33,6 @@
 @ConverterKeys({"highlight" })
 public final class HighlightConverter extends LogEventPatternConverter {
 
-    private List<PatternFormatter> formatters;
-
     private static final EnumMap<Level, String> LEVEL_STYLES = new EnumMap<Level, String>(Level.class);
 
     private static final String[] FATAL = new String[]{"BLINK", "BRIGHT", "RED"};
@@ -44,6 +42,8 @@ public final class HighlightConverter extends LogEventPatternConverter {
     private static final String[] DEBUG = null;
     private static final String[] TRACE = null;
 
+    private List<PatternFormatter> formatters;
+
     static {
         LEVEL_STYLES.put(Level.FATAL, AnsiEscape.createSequence(FATAL));
         LEVEL_STYLES.put(Level.ERROR, AnsiEscape.createSequence(ERROR));

File: core/src/main/java/org/apache/logging/log4j/core/pattern/StyleConverter.java
Patch:
@@ -16,15 +16,12 @@
  */
 package org.apache.logging.log4j.core.pattern;
 
-import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.layout.PatternLayout;
 
-import java.util.EnumMap;
 import java.util.List;
-import java.util.regex.Pattern;
 
 /**
  * Style pattern converter. Adds ANSI color styling to the result of the enclosed pattern.

File: core/src/main/java/org/apache/logging/log4j/core/pattern/ThrowablePatternConverter.java
Patch:
@@ -63,7 +63,8 @@ protected ThrowablePatternConverter(String name, String style, final String[] op
         int count = 0;
         if ((options != null) && (options.length > 0)) {
             option = options[0];
-            if (option.equalsIgnoreCase(SHORT)) {
+            if (option == null) {
+            } else if (option.equalsIgnoreCase(SHORT)) {
                 count = 2;
             } else if (!option.equalsIgnoreCase(FULL)) {
                 count = Integer.parseInt(option);
@@ -82,8 +83,7 @@ protected ThrowablePatternConverter(String name, String style, final String[] op
      *                only the first line of the throwable will be formatted.
      * @return instance of class.
      */
-    public static ThrowablePatternConverter newInstance(
-        final String[] options) {
+    public static ThrowablePatternConverter newInstance(final String[] options) {
         return new ThrowablePatternConverter("Throwable", "throwable", options);
     }
 

File: api/src/main/java/org/apache/logging/log4j/status/StatusConsoleListener.java
Patch:
@@ -58,6 +58,7 @@ public StatusConsoleListener(Level level) {
     /**
      * Creates the StatusConsoleListener using the supplied Level.
      * @param level The Level of status messages that should appear on the console.
+     * @param stream The PrintStream to write to.
      */
     public StatusConsoleListener(Level level, PrintStream stream) {
         this.level = level;

File: core/src/main/java/org/apache/logging/log4j/core/Logger.java
Patch:
@@ -342,9 +342,10 @@ boolean filter(Level level, Marker marker, Message msg, Throwable t) {
             return intLevel >= level.intLevel();
         }
     }
-    
+
     /**
      * Returns a String representation of this instance in the form {@code "name:level[ in context_name]"}.
+     * @return A String describing this Logger instance.
      */
     @Override
     public String toString() {

File: core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java
Patch:
@@ -155,7 +155,7 @@ public void stop() {
 
     /**
      * Gets the name.
-     * 
+     *
      * @return the name.
      */
     public String getName() {

File: core/src/main/java/org/apache/logging/log4j/core/config/XMLConfiguration.java
Patch:
@@ -53,7 +53,6 @@
 import java.io.PrintStream;
 import java.net.URI;
 import java.net.URISyntaxException;
-import java.net.URL;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;

File: core/src/main/java/org/apache/logging/log4j/core/Logger.java
Patch:
@@ -344,7 +344,7 @@ boolean filter(Level level, Marker marker, Message msg, Throwable t) {
     }
     
     /**
-     * Returns a Stirng representation of this instance in the form {@code "name:level[ in context_name]"}.
+     * Returns a String representation of this instance in the form {@code "name:level[ in context_name]"}.
      */
     public String toString() {
         final String nameLevel = name + ":" + getLevel();

File: core/src/test/java/org/apache/logging/log4j/core/pattern/PatternParserTest.java
Patch:
@@ -56,6 +56,7 @@ public class PatternParserTest {
 
     private static String customPattern = "[%d{yyyyMMdd HH:mm:ss,SSS}] %-5p [%-25.25c{1}:%-4L] - %m%n";
 
+    private static final String LINE_SEP = System.getProperty("line.separator");
 
     private static final String KEY = "Converter";
     private PatternParser parser;
@@ -102,7 +103,7 @@ public void testCustomPattern() {
             formatter.format(event, buf);
         }
         String str = buf.toString();
-        String expected = "INFO  [PatternParserTest        :95  ] - Hello, world\n";
+        String expected = "INFO  [PatternParserTest        :96  ] - Hello, world" + LINE_SEP;
         assertTrue("Expected to end with: " + expected + ". Actual: " + str, str.endsWith(expected));
     }
 

File: api/src/test/java/org/apache/logging/log4j/LoggerTest.java
Patch:
@@ -67,7 +67,7 @@ public void catching() {
             logger.catching(e);
             assertEquals(1, results.size());
             assertTrue("Incorrect Catching",
-                results.get(0).startsWith(" DEBUG catching java.lang.NullPointerException"));
+                results.get(0).startsWith(" ERROR catching java.lang.NullPointerException"));
         }
     }
 

File: api/src/main/java/org/apache/logging/log4j/Marker.java
Patch:
@@ -48,7 +48,7 @@ public interface Marker extends Serializable {
 
     /**
      * Checks whether this Marker is an instance of the specified Marker.
-     * @param m The Marker name to check.
+     * @param name The name of the Marker.
      * @return true of this Marker or one of its ancestors matches the specified name, false otherwise.
      */
     boolean isInstanceOf(String name);

File: api/src/main/java/org/apache/logging/log4j/message/StringFormattedMessage.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.IllegalFormatException;
 
 /**
- * Handles messages that consist of a format string conforming to java.util.Formatter
+ * Handles messages that consist of a format string conforming to java.util.Formatter.
  */
 public class StringFormattedMessage implements Message, Serializable {
 
@@ -152,7 +152,7 @@ private void writeObject(ObjectOutputStream out) throws IOException {
         out.writeInt(argArray.length);
         stringArgs = new String[argArray.length];
         int i = 0;
-        for (Object obj: argArray) {
+        for (Object obj : argArray) {
             stringArgs[i] = obj.toString();
             ++i;
         }
@@ -164,7 +164,7 @@ private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundE
         messagePattern = in.readUTF();
         int length = in.readInt();
         stringArgs = new String[length];
-        for (int i=0; i < length; ++i) {
+        for (int i = 0; i < length; ++i) {
             stringArgs[i] = in.readUTF();
         }
     }

File: core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
Patch:
@@ -221,7 +221,7 @@ protected InputSource getInputFromURI(URI configLocation) {
             LOGGER.error("Invalid URL " + configLocation.toString(), ex);
         } catch (IOException ex) {
             LOGGER.error("Unable to access " + configLocation.toString(), ex);
-        } catch (Exception ex){
+        } catch (Exception ex) {
             LOGGER.error("Unable to access " + configLocation.toString(), ex);
         }
         return null;

File: core/src/main/java/org/apache/logging/log4j/core/config/FileConfigurationMonitor.java
Patch:
@@ -47,6 +47,7 @@ public class FileConfigurationMonitor implements ConfigurationMonitor {
 
     /**
      * Constructor.
+     * @param reconfigurable The Configuration that can be reconfigured.
      * @param file The File to monitor.
      * @param listeners The List of ConfigurationListeners to notify upon a change.
      * @param interval The monitor interval in seconds. The minimum interval is 30 seconds.

File: core/src/main/java/org/apache/logging/log4j/core/config/plugins/ResolverUtil.java
Patch:
@@ -74,14 +74,14 @@ public class ResolverUtil<T> {
     /** An instance of Log to use for logging in this class. */
     private static final Logger LOG = StatusLogger.getLogger();
 
+    private static final String VFSZIP = "vfszip";
+
     /** The set of matches being accumulated. */
     private Set<Class<? extends T>> classMatches = new HashSet<Class<?extends T>>();
 
     /** The set of matches being accumulated. */
     private Set<URI> resourceMatches = new HashSet<URI>();
 
-    private static final String VFSZIP = "vfszip";
-
     /**
      * The ClassLoader to use when looking for classes. If null then the ClassLoader returned
      * by Thread.currentThread().getContextClassLoader() will be used.

File: core/src/main/java/org/apache/logging/log4j/core/filter/MarkerFilter.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.Marker;
-import org.apache.logging.log4j.MarkerManager;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.Logger;
 import org.apache.logging.log4j.core.config.plugins.Plugin;

File: core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
 import org.apache.logging.log4j.core.helpers.OptionConverter;
 import org.apache.logging.log4j.core.pattern.LogEventPatternConverter;
-import org.apache.logging.log4j.core.pattern.PatternConverter;
 import org.apache.logging.log4j.core.pattern.PatternFormatter;
 import org.apache.logging.log4j.core.pattern.PatternParser;
 import org.apache.logging.log4j.core.pattern.RegexReplacement;

File: core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java
Patch:
@@ -56,7 +56,7 @@ public Interpolator(StrLookup defaultLookup) {
     }
 
     public Interpolator() {
-        this.defaultLookup= new MapLookup(new HashMap<String, String>());
+        this.defaultLookup = new MapLookup(new HashMap<String, String>());
         lookups.put("sys", new SystemPropertiesLookup());
     }
 

File: core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.logging.log4j.core.pattern;
 
 import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.plugins.PluginManager;
 import org.apache.logging.log4j.core.config.plugins.PluginType;

File: log4j12-api/src/main/java/org/apache/log4j/BasicConfigurator.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.log4j;
 
 /**
- * Provided for compatibility with Log4j 1.x
+ * Provided for compatibility with Log4j 1.x.
  */
 public class BasicConfigurator {
 

File: web/src/main/java/org/apache/logging/log4j/core/web/Log4jContextListener.java
Patch:
@@ -49,7 +49,7 @@ public void contextInitialized(ServletContextEvent event) {
             context.log("No Log4j context configuration provided");
             return;
         }
-        context.setAttribute(LOG4J_CONTEXT_ATTRIBUTE, Configurator.intitalize(name, getClassLoader(context), locn));
+        context.setAttribute(LOG4J_CONTEXT_ATTRIBUTE, Configurator.initialize(name, getClassLoader(context), locn));
     }
 
     public void contextDestroyed(ServletContextEvent event) {

File: api/src/main/java/org/apache/logging/log4j/spi/LoggerContextFactory.java
Patch:
@@ -23,9 +23,10 @@ public interface LoggerContextFactory {
 
     /**
      * @param fqcn The fully qualified class name of the caller.
+     * @param loader The ClassLoader to use or null.
      * @param currentContext If true returns the current Context, if false returns the Context appropriate
      * for the caller if a more appropriate Context can be determined.
      * @return The LoggerContext.
      */
-    LoggerContext getContext(String fqcn, boolean currentContext);
+    LoggerContext getContext(String fqcn, ClassLoader loader, boolean currentContext);
 }

File: api/src/test/java/org/apache/logging/log4j/SimpleLoggerContextFactory.java
Patch:
@@ -26,7 +26,7 @@ public class SimpleLoggerContextFactory implements LoggerContextFactory {
 
     private static LoggerContext ctx = new SimpleLoggerContext();
 
-    public LoggerContext getContext(String FQCN, boolean currentContext) {
+    public LoggerContext getContext(String FQCN, ClassLoader loader, boolean currentContext) {
         return ctx;
     }
 }

File: core/src/main/java/org/apache/logging/log4j/core/config/plugins/ResolverUtil.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.logging.log4j.core.config.plugins;
 
 import org.apache.logging.log4j.Logger;
+import org.apache.logging.log4j.core.helpers.Loader;
 import org.apache.logging.log4j.status.StatusLogger;
 
 import java.io.File;
@@ -113,7 +114,7 @@ public Set<URI> getResources() {
      * @return the ClassLoader that will be used to scan for classes
      */
     public ClassLoader getClassLoader() {
-        return classloader == null ? Thread.currentThread().getContextClassLoader() : classloader;
+        return classloader != null ? classloader : (classloader = Loader.getClassLoader(ResolverUtil.class, null));
     }
 
     /**

File: core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java
Patch:
@@ -64,12 +64,13 @@ public ContextSelector getSelector() {
     /**
      * Load the LoggerContext using the ContextSelector.
      * @param fqcn The fully qualified class name of the caller.
+     * @param loader The ClassLoader to use or null.
      * @param currentContext If true returns the current Context, if false returns the Context appropriate
      * for the caller if a more appropriate Context can be determined.
      * @return The LoggerContext.
      */
-    public LoggerContext getContext(String fqcn, boolean currentContext) {
-        LoggerContext ctx = selector.getContext(fqcn, currentContext);
+    public LoggerContext getContext(String fqcn, ClassLoader loader, boolean currentContext) {
+        LoggerContext ctx = selector.getContext(fqcn, loader, currentContext);
         if (ctx.getStatus() == LoggerContext.Status.INITIALIZED) {
             ctx.start();
         }

File: core/src/main/java/org/apache/logging/log4j/core/selector/BasicContextSelector.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.logging.log4j.core.selector;
 
 import org.apache.logging.log4j.core.LoggerContext;
-import org.apache.logging.log4j.core.javaee.ContextAnchor;
+import org.apache.logging.log4j.core.impl.ContextAnchor;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -30,7 +30,7 @@ public class BasicContextSelector implements ContextSelector {
 
     private static LoggerContext context = new LoggerContext("Default");
 
-    public LoggerContext getContext(String fqcn, boolean currentContext) {
+    public LoggerContext getContext(String fqcn, ClassLoader loader, boolean currentContext) {
 
         LoggerContext ctx = ContextAnchor.THREAD_CONTEXT.get();
         return ctx != null ? ctx : context;

File: core/src/main/java/org/apache/logging/log4j/core/selector/ContextSelector.java
Patch:
@@ -28,11 +28,12 @@ public interface ContextSelector {
     /**
      * Return the LoggerContext.
      * @param fqcn The fully qualified class name of the caller.
+     * @param loader ClassLoader to use or null.
      * @param currentContext If true returns the current Context, if false returns the Context appropriate
      * for the caller if a more appropriate Context can be determined.
      * @return The LoggerContext.
      */
-    LoggerContext getContext(String fqcn, boolean currentContext);
+    LoggerContext getContext(String fqcn, ClassLoader loader, boolean currentContext);
 
     /**
      * Return a List of all the available LoggerContexts.

File: core/src/main/java/org/apache/logging/log4j/core/selector/JNDIContextSelector.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.helpers.Constants;
-import org.apache.logging.log4j.core.javaee.ContextAnchor;
+import org.apache.logging.log4j.core.impl.ContextAnchor;
 import org.apache.logging.log4j.status.StatusLogger;
 
 import javax.naming.Context;
@@ -93,7 +93,7 @@ public class JNDIContextSelector implements NamedContextSelector {
 
     private static final StatusLogger LOGGER = StatusLogger.getLogger();
 
-    public LoggerContext getContext(String fqcn, boolean currentContext) {
+    public LoggerContext getContext(String fqcn, ClassLoader loader, boolean currentContext) {
 
         LoggerContext lc = ContextAnchor.THREAD_CONTEXT.get();
         if (lc != null) {

File: web/src/main/java/org/apache/logging/log4j/core/web/JNDIContextFilter.java
Patch:
@@ -14,9 +14,10 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-package org.apache.logging.log4j.core.javaee;
+package org.apache.logging.log4j.core.web;
 
 import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.core.impl.ContextAnchor;
 import org.apache.logging.log4j.core.impl.Log4jContextFactory;
 import org.apache.logging.log4j.core.selector.ContextSelector;
 import org.apache.logging.log4j.core.LoggerContext;

File: web/src/main/java/org/apache/logging/log4j/core/web/package-info.java
Patch:
@@ -17,4 +17,4 @@
 /**
  * Classes to aid integration with Java EE.
  */
-package org.apache.logging.log4j.core.javaee;
+package org.apache.logging.log4j.core.web;

File: web/src/test/java/org/apache/logging/log4j/core/web/Log4jContextListenerTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the license for the specific language governing permissions and
  * limitations under the license.
  */
-package org.apache.logging.log4j.core.javaee;
+package org.apache.logging.log4j.core.web;
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;

File: slf4j-impl/src/main/java/org/slf4j/impl/SLF4JLogger.java
Patch:
@@ -422,6 +422,9 @@ public void error(Marker marker, String s, Throwable throwable) {
 
 
     public void log(Marker marker, String fqcn, int i, String s1, Object[] objects, Throwable throwable) {
+        if (!logger.isEnabled(getLevel(i), (org.apache.logging.log4j.Marker) marker, s1)) {
+            return;
+        }
         Message msg;
         if (eventLogger && marker != null && marker.contains(EVENT_MARKER)) {
             try {

File: core/src/main/java/org/apache/logging/log4j/core/appender/AbstractManager.java
Patch:
@@ -46,6 +46,7 @@ public abstract class AbstractManager {
 
     protected AbstractManager(String name) {
         this.name = name;
+        LOGGER.debug("Starting {} {}", this.getClass().getSimpleName(), name);
     }
 
 
@@ -110,6 +111,7 @@ public void release() {
             --count;
             if (count <= 0) {
                 map.remove(name);
+                LOGGER.debug("Shutting down {} {}", this.getClass().getSimpleName(), getName());
                 releaseSub();
             }
         } finally {

File: core/src/main/java/org/apache/logging/log4j/core/appender/rewrite/RewriteAppender.java
Patch:
@@ -69,9 +69,6 @@ public void start() {
     @Override
     public void stop() {
         super.stop();
-        for (AppenderControl control : appenders.values()) {
-            control.getAppender().stop();
-        }
     }
 
     /**

File: api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java
Patch:
@@ -1147,8 +1147,8 @@ public void error(Marker marker, Message msg) {
      * @param t      A Throwable or null.
      */
     public void error(Marker marker, Message msg, Throwable t) {
-        if (isEnabled(Level.TRACE, marker, msg, t)) {
-            log(marker, FQCN, Level.TRACE, msg, t);
+        if (isEnabled(Level.ERROR, marker, msg, t)) {
+            log(marker, FQCN, Level.ERROR, msg, t);
         }
     }
 

File: core/src/main/java/org/apache/logging/log4j/core/config/Configuration.java
Patch:
@@ -73,4 +73,6 @@ public interface Configuration extends Filtering {
     Object getComponent(String name);
 
     void addComponent(String name, Object object);
+
+    ConfigurationMonitor getConfigurationMonitor();
 }

File: core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationListener.java
Patch:
@@ -21,5 +21,5 @@
  */
 public interface ConfigurationListener {
 
-    void onChange();
+    void onChange(Reconfigurable reconfigurable);
 }

File: core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java
Patch:
@@ -142,7 +142,7 @@ private boolean rollover(RolloverStrategy strategy) {
                     }
                 }
 
-                if (success) {
+                if (success && descriptor.getAsynchronous() != null) {
                     thread = new Thread(new AsyncAction(descriptor.getAsynchronous(), this));
                     thread.start();
                 }

File: core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeAndSizeTest.java
Patch:
@@ -35,7 +35,7 @@
 public class RollingAppenderTimeAndSizeTest {
 
     private static final String CONFIG = "log4j-rolling3.xml";
-    private static final String DIR = "target/rolling3";
+    private static final String DIR = "target/rolling3/test";
 
     org.apache.logging.log4j.Logger logger = LogManager.getLogger(RollingAppenderTimeAndSizeTest.class.getName());
 
@@ -49,7 +49,7 @@ public static void setupClass() {
 
     @AfterClass
     public static void cleanupClass() {
-        deleteDir();
+        //deleteDir();
         System.clearProperty(XMLConfigurationFactory.CONFIGURATION_FILE_PROPERTY);
         LoggerContext ctx = (LoggerContext) LogManager.getContext();
         ctx.reconfigure();

File: flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeAvroAppenderTest.java
Patch:
@@ -69,7 +69,6 @@ public class FlumeAvroAppenderTest {
 
     @BeforeClass
     public static void setupClass() {
-        PluginManager.addPackage("org.apache.logging.log4j.flume");
         ctx = (LoggerContext) LogManager.getContext();
     }
 

File: core/src/main/java/org/apache/logging/log4j/core/appender/AbstractManager.java
Patch:
@@ -42,7 +42,7 @@ public abstract class AbstractManager {
 
     private String name;
 
-    private int count;
+    protected int count;
 
     protected AbstractManager(String name) {
         this.name = name;

File: core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java
Patch:
@@ -87,8 +87,8 @@ public static ConsoleAppender createAppender(@PluginElement("layout") Layout lay
     private static OutputStreamManager getManager(Target target) {
         String type = target.name();
         OutputStream os = target == Target.SYSTEM_OUT ? System.out : System.err;
-        OutputStreamManager manager = OutputStreamManager.getManager(target.name(), factory,
-            new FactoryData(os, type));
+        OutputStreamManager manager = OutputStreamManager.getManager(target.name(), new FactoryData(os, type), factory
+        );
         return manager;
     }
 

File: core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java
Patch:
@@ -55,7 +55,7 @@ public static FileManager getFileManager(String fileName, boolean append, boolea
         if (locking && bufferedIO) {
             locking = false;
         }
-        return (FileManager) getManager(fileName, factory, new FactoryData(append, locking, bufferedIO));
+        return (FileManager) getManager(fileName, new FactoryData(append, locking, bufferedIO), factory);
     }
 
     protected synchronized void write(byte[] bytes, int offset, int length)  {

File: core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java
Patch:
@@ -61,8 +61,8 @@ protected RollingFileManager(String fileName, String pattern, OutputStream os, b
     public static RollingFileManager getFileManager(String fileName, String pattern, boolean append,
                                                     boolean bufferedIO) {
 
-        return (RollingFileManager) getManager(fileName, factory, new FactoryData(pattern, append,
-            bufferedIO));
+        return (RollingFileManager) getManager(fileName, new FactoryData(pattern, append,
+            bufferedIO), factory);
     }
 
     protected synchronized void write(byte[] bytes, int offset, int length) {

File: core/src/main/java/org/apache/logging/log4j/core/net/DatagramSocketManager.java
Patch:
@@ -51,8 +51,8 @@ public static DatagramSocketManager getSocketManager(String host, int port) {
         if (port <= 0) {
             throw new IllegalArgumentException("A port value is required");
         }
-        return (DatagramSocketManager) getManager("UDP:" + host + ":" + port, factory,
-            new FactoryData(host, port));
+        return (DatagramSocketManager) getManager("UDP:" + host + ":" + port, new FactoryData(host, port), factory
+        );
     }
 
     /**

File: core/src/main/java/org/apache/logging/log4j/core/net/TCPSocketManager.java
Patch:
@@ -85,7 +85,7 @@ public static TCPSocketManager getSocketManager(String host, int port, int delay
         if (delay == 0) {
             delay = DEFAULT_RECONNECTION_DELAY;
         }
-        return (TCPSocketManager) getManager("TCP:" + host + ":" + port, factory, new FactoryData(host, port, delay));
+        return (TCPSocketManager) getManager("TCP:" + host + ":" + port, new FactoryData(host, port, delay), factory);
     }
 
     @Override

File: api/src/main/java/org/apache/logging/log4j/Logger.java
Patch:
@@ -49,6 +49,7 @@ public interface Logger {
   /**
    * Log exiting from a method with the result. This may be coded as <br />
    *     return logger.exit(myResult);
+   * @param <R> The type of the parameter and object being returned.
    * @param result The result being returned from the method call.
    * @return the result.
    */
@@ -58,6 +59,7 @@ public interface Logger {
    * Log an exception or error to be thrown. This may be coded as <br />
    *    throw logger.throwing(myException);
    *
+   * @param <T> the Throwable type.
    * @param t The Throwable.
    * @return the Throwable.
    */
@@ -66,6 +68,7 @@ public interface Logger {
   /**
    * Log an exception or error to be thrown. This may be coded as <br />
    *    throw logger.throwing(debug, myException);
+   * @param <T> the Throwable type.
    * @param level The logging Level.
    * @param t The Throwable.
    * @return the Throwable.

File: api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java
Patch:
@@ -250,7 +250,7 @@ public String getFormattedMessage() {
      * prepended and the event message to be appended. Specifying any other value will cause only the
      * StructuredData to be included. The default is "FULL".
      *
-     * @return
+     * @return the formatted message.
      */
     @Override
     public String getFormattedMessage(String[] formats) {

File: api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java
Patch:
@@ -91,6 +91,7 @@ public void exit() {
     /**
      * Log exiting from a method with the result.
      *
+     * @param <R> The type of the parameter and object being returned.
      * @param result The result being returned from the method call.
      * @return the Throwable.
      */
@@ -104,6 +105,7 @@ public <R> R exit(R result) {
     /**
      * Log an exception or error to be thrown.
      *
+     * @param <T> the type of the Throwable.
      * @param t The Throwable.
      * @return the Throwable.
      */
@@ -118,6 +120,7 @@ public <T extends Throwable> T throwing(T t) {
     /**
      * Log an exception or error to be thrown.
      *
+     * @param <T> the type of the Throwable.
      * @param level The logging Level.
      * @param t     The Throwable.
      * @return the Throwable.

File: core/src/main/java/org/apache/logging/log4j/core/pattern/MessagePatternConverter.java
Patch:
@@ -57,7 +57,7 @@ public void format(final LogEvent event, final StringBuilder toAppendTo) {
         if (msg != null) {
             if (msg instanceof MultiformatMessage) {
                 toAppendTo.append(((MultiformatMessage) msg).getFormattedMessage(formats));
-            } else{
+            } else {
                 toAppendTo.append(msg.getFormattedMessage());
             }
         }

File: log4j12-api/src/main/java/org/apache/log4j/Category.java
Patch:
@@ -303,7 +303,7 @@ public void l7dlog(Priority priority, String key, Object[] params, Throwable t)
 
     private void maybeLog(String fqcn, org.apache.logging.log4j.Level level,
             Object message, Throwable throwable) {
-        if(logger.isEnabled(level, null, message, throwable)) {
+        if (logger.isEnabled(level, null, message, throwable)) {
             logger.log(null, FQCN, level, new ObjectMessage(message), throwable);
         }
     }

File: slf4j-impl/src/main/java/org/slf4j/helpers/Log4JMDCAdapter.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.logging.log4j.ThreadContext;
 import org.slf4j.spi.MDCAdapter;
 
-import java.util.HashMap;
 import java.util.Map;
 
 /**

File: api/src/main/java/org/apache/logging/log4j/Level.java
Patch:
@@ -30,7 +30,6 @@
  * Typically, configuring a level in a filter or on a logger will cause logging events of that level and those
  * that are more specific to pass through the filter.
  * A special level, ALL, is guaranteed to capture all levels when used in logging configurations.
- * @doubt see LOG4J-41
  */
 public enum Level {
     /**

File: api/src/main/java/org/apache/logging/log4j/message/Message.java
Patch:
@@ -49,7 +49,7 @@ public interface Message extends Serializable {
      * @return The message format.
      * @doubt Do all messages have a format?  What syntax?  Using a Formatter object could be cleaner.
      * (RG) In SimpleMessage the format is identical to the formatted message. In ParameterizedMessage and
-     * StructuredDataMessage itis not. It is up to the Message implementer to determine what this
+     * StructuredDataMessage it is not. It is up to the Message implementer to determine what this
      * method will return. A Formatter is inappropriate as this is very specific to the Message
      * implementation so it isn't clear to me how having a Formatter separate from the Message would be cleaner.
      */

File: log4j12-api/src/test/java/org/apache/log4j/CategoryTest.java
Patch:
@@ -45,6 +45,8 @@ public class CategoryTest {
 
     static ConfigurationFactory cf = new BasicConfigurationFactory();
 
+    private static final String LINE_SEP = System.getProperty("line.separator");
+
     private ListAppender appender = new ListAppender("List");
 
     @BeforeClass
@@ -152,7 +154,7 @@ public void testClassName() {
         assertTrue("Incorrect number of messages. Expected 1 got " + msgs.size(), msgs.size() == 1);
         String msg = msgs.get(0);
         appender.clear();
-        String expected = "ERROR o.a.l.CategoryTest [main] Test Message\n";
+        String expected = "ERROR o.a.l.CategoryTest [main] Test Message" + LINE_SEP;
         assertTrue("Incorrect message \"" + msg + "\"" + " expected \"" + expected +"\"", msg.endsWith(expected));
     }
 

File: core/src/main/java/org/apache/logging/log4j/core/appender/FailoverAppender.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.config.AppenderControl;
-import org.apache.logging.log4j.core.config.AppenderRef;
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginAttr;
@@ -107,7 +106,7 @@ public void append(LogEvent event) {
                     written = true;
                     break;
                 } catch (Exception fex) {
-                    // Try the next failover.
+                    continue;
                 }
             }
             if (!written && !isExceptionSuppressed()) {

File: core/src/main/java/org/apache/logging/log4j/core/appender/FailoversPlugin.java
Patch:
@@ -47,9 +47,10 @@ public static String[] createFailovers(@PluginElement("appender-ref") AppenderRe
 
         if (refs == null) {
             logger.error("failovers must contain an appender-reference");
+            return null;
         }
         String[] arr = new String[refs.length];
-        for (int i=0; i < refs.length; ++i) {
+        for (int i = 0; i < refs.length; ++i) {
             arr[i] = refs[i].getRef();
         }
         return arr;

File: core/src/main/java/org/apache/logging/log4j/core/appender/rewrite/RewriteAppender.java
Patch:
@@ -16,10 +16,8 @@
  */
 package org.apache.logging.log4j.core.appender.rewrite;
 
-import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Filter;
-import org.apache.logging.log4j.core.Lifecycle;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.appender.AppenderBase;
 import org.apache.logging.log4j.core.config.AppenderControl;

File: core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.logging.log4j.core.appender.routing;
 
-import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.LogEvent;

File: core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java
Patch:
@@ -40,6 +40,8 @@ public class AppenderControl extends Filterable {
     /**
      * Constructor.
      * @param appender The target Appender.
+     * @param level the Level to filter on.
+     * @param filter the Filter(s) to apply.
      */
     public AppenderControl(Appender appender, Level level, Filter filter) {
         super(filter);

File: core/src/main/java/org/apache/logging/log4j/core/config/AppenderRef.java
Patch:
@@ -29,7 +29,7 @@
  * An Appender reference.
  */
 @Plugin(name = "appender-ref", type = "Core", printObject = true)
-public class AppenderRef {
+public final class AppenderRef {
     private static final Logger LOGGER = StatusLogger.getLogger();
 
     private final String ref;
@@ -57,6 +57,8 @@ public Filter getFilter() {
     /**
      * Create an Appender reference.
      * @param ref The name of the Appender.
+     * @param level The Level to filter against.
+     * @param filter The filter(s) to use.
      * @return The name of the Appender.
      */
     @PluginFactory

File: core/src/main/java/org/apache/logging/log4j/core/config/BaseConfiguration.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.logging.log4j.core.config;
 
-import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Filter;

File: core/src/main/java/org/apache/logging/log4j/core/helpers/FileUtils.java
Patch:
@@ -33,7 +33,7 @@ public final class FileUtils {
 
     /** Constant for the file URL protocol.*/
     private static final String PROTOCOL_FILE = "file";
-    
+
     private static final String JBOSS_FILE = "vfsfile";
 
     private static Logger logger = StatusLogger.getLogger();
@@ -62,7 +62,7 @@ public static File fileFromURI(URI uri) {
             return null;
         }
     }
-    
+
     public static boolean isFile(URL url) {
         return url != null && (url.getProtocol().equals(PROTOCOL_FILE) || url.getProtocol().equals(JBOSS_FILE));
     }

File: log4j2-core/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderTest.java
Patch:
@@ -177,6 +177,7 @@ private void verifyFile(int count) throws Exception {
         }
         fis.close();
         assertTrue("Incorrect count: was " + counter + " should be " + count, count == counter);
+        fis.close();
 
     }
 

File: log4j2-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeEvent.java
Patch:
@@ -98,6 +98,8 @@ public FlumeEvent(LogEvent event, String includes, String excludes, String requi
                     }
                 }
             }
+        } else {
+            ctx.putAll(mdc);
         }
 
         if (required != null) {

File: log4j2-flume-og/src/main/java/org/apache/logging/log4j/flumeog/appender/FlumeAvroAppender.java
Patch:
@@ -161,8 +161,8 @@ public static FlumeAvroAppender createAppender(@PluginElement("agents") Agent[]
         int retries = agentRetries == null ? 0 : Integer.parseInt(agentRetries);
 
         if (layout == null) {
-            layout = RFC5424Layout.createLayout(null, null, null, null, "True", null, null, null, null, excludes,
-                includes, required, null);
+            layout = RFC5424Layout.createLayout(null, null, null, "true", null, null, null, null, excludes,
+                includes, required, null, null);
         }
 
         if (name == null) {

File: log4j2-flume-og/src/main/java/org/apache/logging/log4j/flumeog/appender/FlumeEvent.java
Patch:
@@ -104,6 +104,8 @@ public FlumeEvent(LogEvent event, String hostname, String includes, String exclu
                     }
                 }
             }
+        } else {
+            ctx.putAll(mdc);
         }
 
         if (required != null) {

File: log4j2-core/src/test/java/org/apache/logging/log4j/core/layout/XMLLayoutTest.java
Patch:
@@ -54,7 +54,7 @@ public static void cleanupClass() {
     }
 
     private static final String body =
-        "<log4j:message><![CDATA[empty mdc]]></log4j:message>\r";
+        "<log4j:message><![CDATA[empty mdc]]></log4j:message>";
 
 
     /**
@@ -92,8 +92,8 @@ public void testLayout() throws Exception {
         List<String> list = appender.getMessages();
 
         assertTrue("Incorrect number of lines. Require at least 50 " + list.size(), list.size() > 50);
-        assertTrue("Incorrect header", list.get(0).equals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r"));
-        assertTrue("Incorrect footer", list.get(list.size() - 1).equals("</log4j:eventSet>\r"));
+        assertTrue("Incorrect header", list.get(0).equals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>"));
+        assertTrue("Incorrect footer", list.get(list.size() - 1).equals("</log4j:eventSet>"));
         assertTrue("Incorrect body. Expected " + body + " Actual: " + list.get(8), list.get(8).equals(body));
     }
 }

File: log4j2-core/src/test/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverterTest.java
Patch:
@@ -54,8 +54,8 @@ public void testFull() {
         PrintWriter pw = new PrintWriter(sw);
         parent.printStackTrace(pw);
         String result = sb.toString();
-        //System.out.print(result);
         result = result.replaceAll(" ~?\\[.*\\]", "");
-        assertEquals(sw.toString(), result);
+        String expected = sw.toString().replaceAll("\r", "");
+        assertEquals(expected, result);
     }
 }

File: log4j2-core/src/test/java/org/apache/logging/log4j/core/pattern/RegexReplacementConverterTest.java
Patch:
@@ -36,7 +36,7 @@
  */
 public class RegexReplacementConverterTest {
 
-
+    private static final String LINE_SEP = System.getProperty("line.separator");
     @Test
     public void testReplacement() {
         ThreadContext.put("MyKey", "Apache");
@@ -50,7 +50,7 @@ public void testReplacement() {
         RegexReplacementConverter converter = RegexReplacementConverter.newInstance(ctx.getConfiguration(),
             options);
         converter.format(event, sb);
-        assertEquals("org/apache/logging/log4j/core/pattern/RegexReplacementConverterTest This is a test\n",
+        assertEquals("org/apache/logging/log4j/core/pattern/RegexReplacementConverterTest This is a test" + LINE_SEP,
             sb.toString());
     }
 }

File: log4j2-core/src/test/java/org/apache/logging/log4j/core/appender/OutputStreamAppenderTest.java
Patch:
@@ -35,6 +35,7 @@
  */
 public class OutputStreamAppenderTest {
 
+    private static final String LINE_SEP = System.getProperty("line.separator");
 
     @Test
     public void testAppender() {
@@ -46,9 +47,8 @@ public void testAppender() {
         assertTrue("Appender did not start", app.isStarted());
         app.append(event);
         String msg = app.toString();
-        System.out.println("\"" + msg + "\"");
         assertNotNull("No message", msg);
-        assertTrue("Incorrect message: " + msg , msg.endsWith("Test\n") || msg.endsWith("Test\r\n"));
+        assertTrue("Incorrect message: " + msg , msg.endsWith("Test" + LINE_SEP));
         app.stop();
         assertFalse("Appender did not stop", app.isStarted());
     }

File: log4j2-core/src/test/java/org/apache/logging/log4j/core/appender/OutputStreamAppenderTest.java
Patch:
@@ -46,8 +46,9 @@ public void testAppender() {
         assertTrue("Appender did not start", app.isStarted());
         app.append(event);
         String msg = app.toString();
+        System.out.println("\"" + msg + "\"");
         assertNotNull("No message", msg);
-        assertTrue("Incorrect message: " + msg , msg.endsWith("Test\n"));
+        assertTrue("Incorrect message: " + msg , msg.endsWith("Test\n") || msg.endsWith("Test\r\n"));
         app.stop();
         assertFalse("Appender did not stop", app.isStarted());
     }

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/layout/RFC5424Layout.java
Patch:
@@ -268,7 +268,7 @@ private String computeTimeStampString(long now) {
         int millis = cal.get(Calendar.MILLISECOND);
         if (millis != 0) {
             buf.append(".");
-            pad((int) ((float) millis / 10F), THREE_DIGITS, buf);
+            pad(millis, THREE_DIGITS, buf);
         }
 
         int tzmin = (cal.get(Calendar.ZONE_OFFSET) + cal.get(Calendar.DST_OFFSET)) / MILLIS_PER_MINUTE;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/net/Protocol.java
Patch:
@@ -20,17 +20,17 @@
  * Enumeration of the supported protocols.
  */
 public enum Protocol {
-    /** TCP Protocol */
+    /** TCP Protocol. */
     TCP,
-    /** UDP Protocol */
+    /** UDP Protocol. */
     UDP;
 
     /**
      * Determine if the String matches this enum.
      * @param name The enumeration name to check.
      * @return true if this enumeration has the specified name.
      */
-    public boolean equals(String name) {
+    public boolean isEqual(String name) {
         return this.name().equalsIgnoreCase(name);
     }
 }

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/lookup/StrMatcher.java
Patch:
@@ -420,7 +420,7 @@ static final class TrimMatcher extends StrMatcher {
          */
         @Override
         public int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd) {
-            return buffer[pos] <= 32 ? 1 : 0;
+            return buffer[pos] <= ' ' ? 1 : 0;
         }
     }
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/net/package-info.java
Patch:
@@ -15,6 +15,6 @@
  * limitations under the license.
  */
 /**
- * Log4j 2.0 network support
+ * Log4j 2.0 network support.
  */
 package org.apache.logging.log4j.core.net;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/pattern/ConverterKeys.java
Patch:
@@ -27,5 +27,5 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)
 public @interface ConverterKeys {
-    public String[] value();
+    String[] value();
 }

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/selector/BasicContextSelector.java
Patch:
@@ -24,13 +24,13 @@
 import java.util.List;
 
 /**
- *
+ * Returns either this Thread's context or the default LoggerContext.
  */
 public class BasicContextSelector implements ContextSelector {
 
     private static LoggerContext context = new LoggerContext("Default");
 
-    public LoggerContext getContext(String FQCN, boolean currentContext) {
+    public LoggerContext getContext(String fqcn, boolean currentContext) {
 
         LoggerContext ctx = ContextAnchor.THREAD_CONTEXT.get();
         return ctx != null ? ctx : context;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java
Patch:
@@ -207,6 +207,9 @@ private LoggerContext getDefault() {
         return context.get();
     }
 
+    /**
+     * SecurityManager that will locate the caller of the Log4j2 API.
+     */
     private static class PrivateSecurityManager extends SecurityManager {
 
         public Class getCaller(String fqcn) {

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/selector/ContextSelector.java
Patch:
@@ -27,12 +27,12 @@ public interface ContextSelector {
 
     /**
      * Return the LoggerContext.
-     * @param FQCN The fully qualified class name of the caller.
+     * @param fqcn The fully qualified class name of the caller.
      * @param currentContext If true returns the current Context, if false returns the Context appropriate
      * for the caller if a more appropriate Context can be determined.
      * @return The LoggerContext.
      */
-    LoggerContext getContext(String FQCN, boolean currentContext);
+    LoggerContext getContext(String fqcn, boolean currentContext);
 
     /**
      * Return a List of all the available LoggerContexts.

File: log4j2-core/src/test/java/org/apache/logging/log4j/core/appender/flume/UUIDTest.java
Patch:
@@ -31,11 +31,13 @@ public class UUIDTest {
     private static final int COUNT = 200;
     private static final int THREADS = 10;
 
+    private static final long NUM_100NS_INTERVALS_SINCE_UUID_EPOCH = 0x01b21dd213814000L;
+
     @Test
     public void testTimeBaseUUID() {
         UUID uuid = UUIDUtil.getTimeBasedUUID();
         UUID uuid2 = UUIDUtil.getTimeBasedUUID();
-        long current = (System.currentTimeMillis() * 10000) + UUIDUtil.NUM_100NS_INTERVALS_SINCE_UUID_EPOCH;
+        long current = (System.currentTimeMillis() * 10000) + NUM_100NS_INTERVALS_SINCE_UUID_EPOCH;
         long time = uuid.timestamp();
         assertTrue("Incorrect time", current + 10000 - time > 0);
         UUID[] uuids = new UUID[COUNT];

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/layout/HTMLLayout.java
Patch:
@@ -254,7 +254,7 @@ public static HTMLLayout createLayout(@PluginAttr("locationInfo") String locatio
             if (Charset.isSupported(charset)) {
                 c = Charset.forName(charset);
             } else {
-                logger.error("Charset " + charset + " is not supported for layout, using " + c.displayName());
+                LOGGER.error("Charset " + charset + " is not supported for layout, using " + c.displayName());
             }
         }
         boolean info = locationInfo == null ? false : Boolean.valueOf(locationInfo);

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/lookup/ContextMapLookup.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 
 /**
- * Looks up keys from system properties
+ * Looks up keys from system properties.
  */
 @Plugin(name = "ctx", type = "Lookup")
 public class ContextMapLookup implements StrLookup {

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/lookup/MapLookup.java
Patch:
@@ -24,6 +24,7 @@
 
 /**
  * The basis for a lookup based on a Map.
+ * @param <V> The type of object contained in the Map.
  */
 @Plugin(name = "map", type = "Lookup")
 public class MapLookup<V> implements StrLookup<V> {

File: log4j2-api/src/main/java/org/apache/logging/log4j/LogManager.java
Patch:
@@ -31,7 +31,9 @@
  * The anchor point for the logging system.
  */
 public class LogManager {
-
+    /**
+     * The name of the root Logger.
+     */
     public static final String ROOT_LOGGER_NAME = "";
 
     private static final String LOGGER_RESOURCE = "META-INF/log4j-provider.xml";

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java
Patch:
@@ -61,6 +61,8 @@ public final class BurstFilter extends FilterBase {
 
     private static final int DEFAULT_RATE_MULTIPLE = 100;
 
+    private static final int HASH_SHIFT = 32;
+
     /**
      * Level of messages to be filtered. Anything at or below this level will be
      * filtered out if <code>maxBurst</code> has been exceeded. The default is
@@ -198,7 +200,7 @@ public boolean equals(Object o) {
 
         @Override
         public int hashCode() {
-            return (int) (expireTime ^ (expireTime >>> 32));
+            return (int) (expireTime ^ (expireTime >>> HASH_SHIFT));
         }
     }
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/impl/package-info.java
Patch:
@@ -17,4 +17,4 @@
 /**
  * Log4j 2.0 private implementation classes.
  */
-package org.apache.logging.log4j.core.impl;
\ No newline at end of file
+package org.apache.logging.log4j.core.impl;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/jmx/Log4jManager.java
Patch:
@@ -30,7 +30,7 @@
  */
 public class Log4jManager {
 
-    public StatusLogger logger = StatusLogger.getLogger();
+    private static final StatusLogger LOGGER = StatusLogger.getLogger();
 
     public List<LoggerContext> getLoggerContexts() {
         Log4jContextFactory factory = (Log4jContextFactory) LogManager.getFactory();
@@ -39,6 +39,6 @@ public List<LoggerContext> getLoggerContexts() {
     }
 
     public List<StatusData> getStatusData() {
-        return logger.getStatusData();
+        return LOGGER.getStatusData();
     }
 }

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/jmx/Log4jManagerMBean.java
Patch:
@@ -26,7 +26,7 @@
  */
 public interface Log4jManagerMBean {
 
-    public List<LoggerContext> getLoggerContexts();
+    List<LoggerContext> getLoggerContexts();
 
-    public List<StatusData> getStatusData();
+    List<StatusData> getStatusData();
 }

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java
Patch:
@@ -61,6 +61,9 @@ protected Charset getCharset() {
         return charset;
     }
 
+    /**
+     * Encoder interface to support Java 5 and Java 6+.
+     */
     private interface StringEncoder {
 
         byte[] getBytes(String str);

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/selector/BasicContextSelector.java
Patch:
@@ -32,7 +32,7 @@ public class BasicContextSelector implements ContextSelector {
 
     public LoggerContext getContext(String FQCN, boolean currentContext) {
 
-        LoggerContext ctx = ContextAnchor.threadContext.get();
+        LoggerContext ctx = ContextAnchor.THREAD_CONTEXT.get();
         return ctx != null ? ctx : context;
     }
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java
Patch:
@@ -65,7 +65,7 @@ public class ClassLoaderContextSelector implements ContextSelector {
     public LoggerContext getContext(String fqcn, boolean currentContext) {
 
         if (currentContext) {
-            LoggerContext ctx = ContextAnchor.threadContext.get();
+            LoggerContext ctx = ContextAnchor.THREAD_CONTEXT.get();
             if (ctx != null) {
                 return ctx;
             }
@@ -122,7 +122,7 @@ public LoggerContext getContext(String fqcn, boolean currentContext) {
                     //System.out.println("Could not load class " + name);
                 }
             }
-            LoggerContext lc = ContextAnchor.threadContext.get();
+            LoggerContext lc = ContextAnchor.THREAD_CONTEXT.get();
             if (lc != null) {
                 return lc;
             }

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/selector/JNDIContextSelector.java
Patch:
@@ -95,7 +95,7 @@ public class JNDIContextSelector implements NamedContextSelector {
 
     public LoggerContext getContext(String FQCN, boolean currentContext) {
 
-        LoggerContext lc = ContextAnchor.threadContext.get();
+        LoggerContext lc = ContextAnchor.THREAD_CONTEXT.get();
         if (lc != null) {
             return lc;
         }

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/helper/GZCompressAction.java
Patch:
@@ -28,6 +28,9 @@
  * Compresses a file using GZ compression.
  */
 public final class GZCompressAction extends ActionBase {
+
+    private static final int BUF_SIZE = 8102;
+
     /**
      * Source file.
      */
@@ -43,9 +46,6 @@ public final class GZCompressAction extends ActionBase {
      */
     private final boolean deleteSource;
 
-    private static final int BUF_SIZE = 8102;
-
-
     /**
      * Create new instance of GZCompressAction.
      *

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/helper/ZipCompressAction.java
Patch:
@@ -29,6 +29,9 @@
  * Compresses a file using Zip compression.
  */
 public final class ZipCompressAction extends ActionBase {
+
+    private static final int BUF_SIZE = 8102;
+
     /**
      * Source file.
      */
@@ -44,9 +47,6 @@ public final class ZipCompressAction extends ActionBase {
      */
     private final boolean deleteSource;
 
-    private static final int BUF_SIZE = 8102;
-
-
     /**
      * Create new instance of GZCompressAction.
      *

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java
Patch:
@@ -195,6 +195,9 @@ public static RoutingAppender createAppender(@PluginAttr("name") String name,
         return new RoutingAppender(name, filter, handleExceptions, routes, rewritePolicy, config);
     }
 
+    /**
+     * Wrapper to allow AppenderControl to be used here.
+     */
     private static class AppenderWrapper extends AppenderControl {
         public AppenderWrapper(Appender appender) {
             super(appender);

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/config/Node.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.Map;
 
 /**
- *
+ * Represents a Configuration element.
  */
 
 public class Node {
@@ -99,8 +99,9 @@ public PluginType getType() {
         return type;
     }
 
+    @Override
     public String toString() {
         return type.isObjectPrintable() ? object.toString() :
-            type.getPluginClass().getName() + " with name " + name; 
+            type.getPluginClass().getName() + " with name " + name;
     }
 }

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/config/NullConfiguration.java
Patch:
@@ -19,11 +19,11 @@
 import org.apache.logging.log4j.Level;
 
 /**
- *
+ * This configuration defaults to no logging.
  */
 public class NullConfiguration extends BaseConfiguration {
 
-    public static final String NULL_NAME = "Null";
+    private static final String NULL_NAME = "Null";
 
     public NullConfiguration() {
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/config/Order.java
Patch:
@@ -27,5 +27,5 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)
 public @interface Order {
-    public int value();
+    int value();
 }

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/config/plugins/PluginAttr.java
Patch:
@@ -22,11 +22,11 @@
 import java.lang.annotation.Target;
 
 /**
- *
+ * Identifies a Plugin Attribute.
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.PARAMETER)
 public @interface PluginAttr {
 
-    public String value();
+    String value();
 }

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/config/plugins/PluginConfiguration.java
Patch:
@@ -22,7 +22,7 @@
 import java.lang.annotation.Target;
 
 /**
- *
+ * Identifies a parameter as a Configuration.
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.PARAMETER)

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/config/plugins/PluginElement.java
Patch:
@@ -22,11 +22,11 @@
 import java.lang.annotation.Target;
 
 /**
- *
+ * Identifies a parameter as an element.
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.PARAMETER)
 public @interface PluginElement {
 
-    public String value();
+    String value();
 }

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/config/plugins/PluginFactory.java
Patch:
@@ -22,7 +22,7 @@
 import java.lang.annotation.Target;
 
 /**
- *
+ * Identifies a Method as the factory to create the plugin.
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/config/plugins/PluginValue.java
Patch:
@@ -22,11 +22,11 @@
 import java.lang.annotation.Target;
 
 /**
- *
+ * Identifies a parameter as a value.
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.PARAMETER)
 public @interface PluginValue {
 
-    public String value();
+    String value();
 }

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/filter/MarkerFilter.java
Patch:
@@ -80,7 +80,7 @@ public static MarkerFilter createFilter(@PluginAttr("marker") String marker,
                                             @PluginAttr("onMismatch") String mismatch) {
 
         if (marker == null) {
-            logger.error("A marker must be provided for MarkerFilter");
+            LOGGER.error("A marker must be provided for MarkerFilter");
             return null;
         }
         Marker m = MarkerManager.getMarker(marker);

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/filter/RegexFilter.java
Patch:
@@ -98,15 +98,15 @@ public static RegexFilter createFilter(@PluginAttr("regex") String regex,
                                             @PluginAttr("onMismatch") String mismatch) {
 
         if (regex == null) {
-            logger.error("A regular expression must be provided for RegexFilter");
+            LOGGER.error("A regular expression must be provided for RegexFilter");
             return null;
         }
         boolean raw = useRawMsg == null ? false : Boolean.parseBoolean(useRawMsg);
         Pattern pattern;
         try {
             pattern = Pattern.compile(regex);
         } catch (Exception ex) {
-            logger.error("RegexFilter caught exception compiling pattern: " + regex + " cause: " + ex.getMessage());
+            LOGGER.error("RegexFilter caught exception compiling pattern: " + regex + " cause: " + ex.getMessage());
             return null;
         }
         Result onMatch = match == null ? null : Result.valueOf(match);

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/filter/ValueLevelPair.java
Patch:
@@ -44,7 +44,7 @@ public Level getLevel() {
     }
 
     /**
-     * Create a Value/Level pair using the Log Levels
+     * Create a Value/Level pair using the Log Levels.
      * @param key The key.
      * @param value Its value.
      * @return A ValueLevelPair.

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java
Patch:
@@ -188,11 +188,11 @@ protected Object writeReplace() {
         return new LogEventProxy(this);
     }
 
-    private void readObject(ObjectInputStream stream)
-        throws InvalidObjectException {
+    private void readObject(ObjectInputStream stream) throws InvalidObjectException {
         throw new InvalidObjectException("Proxy required");
     }
 
+    @Override
     public String toString() {
         StringBuilder sb = new StringBuilder();
         String n = name.length() == 0 ? "root" : name;
@@ -236,7 +236,7 @@ public LogEventProxy(Log4jLogEvent event) {
 
         /**
          * Return a Log4jLogEvent using the data in the proxy.
-         * @returna Log4jLogEvent.
+         * @return Log4jLogEvent.
          */
         protected Object readResolve() {
             return new Log4jLogEvent(name, marker, fqcnOfLogger, level, message, throwable, mdc, ndc, threadName,

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/javaee/JNDIContextFilter.java
Patch:
@@ -34,13 +34,12 @@
 import java.io.IOException;
 
 /**
- *
+ * ServletFilter than may be used to set up a LoggerContext for each web application.
  */
 public class JNDIContextFilter implements Filter {
 
     public static final String CONTEXT_NAME = "context-name";
     public static final String CONFIG_LOCATION = "config-location";
-    private static final String CONTEXT_CLASS = "org.apache.logging.log4j.core.LoggerContext";
     private ServletContext context;
     private boolean created = false;
     private String name;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/layout/HTMLLayout.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.core.LogEvent;
-import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginAttr;
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
@@ -40,8 +39,8 @@
  * Appenders using this layout should have their encoding set to UTF-8 or UTF-16, otherwise events containing
  * non ASCII characters could result in corrupted log files.
  */
-@Plugin(name="HTMLLayout",type="Core",elementType="layout",printObject=true)
-public class HTMLLayout extends AbstractStringLayout {
+@Plugin(name = "HTMLLayout", type = "Core", elementType = "layout", printObject = true)
+public final class HTMLLayout extends AbstractStringLayout {
 
     protected static final int BUF_SIZE = 256;
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java
Patch:
@@ -46,7 +46,7 @@
  *
  * See the Log4j Manual for details on the supported pattern converters.
  */
-@Plugin(name="PatternLayout",type="Core",elementType="layout",printObject=true)
+@Plugin(name = "PatternLayout", type = "Core", elementType = "layout", printObject = true)
 public class PatternLayout extends AbstractStringLayout {
     /**
      * Default pattern string for log output. Currently set to the

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/layout/SyslogLayout.java
Patch:
@@ -34,7 +34,7 @@
 /**
  * Formats a log event as a BSD Log record.
  */
-@Plugin(name="SyslogLayout",type="Core",elementType="layout",printObject=true)
+@Plugin(name = "SyslogLayout", type = "Core", elementType = "layout", printObject = true)
 public class SyslogLayout extends AbstractStringLayout {
 
     private final Facility facility;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/lookup/EnvironmentLookup.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Looks up keys from environment variables.
  */
-@Plugin(name="env",type="Lookup")
+@Plugin(name = "env", type = "Lookup")
 public class EnvironmentLookup implements StrLookup {
 
     /**

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.Map;
 
 /**
- *
+ * The Interpolator is a StrLookup that acts as a proxy for all the other StrLookups.
  */
 public class Interpolator implements StrLookup {
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/lookup/MapLookup.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * The basis for a lookup based on a Map.
  */
-@Plugin(name="map",type="Lookup")
+@Plugin(name = "map", type = "Lookup")
 public class MapLookup<V> implements StrLookup<V> {
     /**
      * Map keys are variable names and value.

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java
Patch:
@@ -100,9 +100,6 @@
  * {@link #setEnableSubstitutionInVariables(boolean) enableSubstitutionInVariables}
  * property to <b>true</b>.
  *
- * @author Apache Software Foundation
- * @version $Id$
- * @since 2.2
  */
 public class StrSubstitutor {
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/lookup/StructuredDataLookup.java
Patch:
@@ -16,15 +16,14 @@
  */
 package org.apache.logging.log4j.core.lookup;
 
-import org.apache.logging.log4j.ThreadContext;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.message.StructuredDataMessage;
 
 /**
  * Looks up keys from system properties
  */
-@Plugin(name="sd",type="Lookup")
+@Plugin(name = "sd", type = "Lookup")
 public class StructuredDataLookup implements StrLookup {
 
     public String lookup(String key) {

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/lookup/SystemPropertiesLookup.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Looks up keys from system properties
  */
-@Plugin(name="sys",type="Lookup")
+@Plugin(name = "sys", type = "Lookup")
 public class SystemPropertiesLookup implements StrLookup {
 
     public String lookup(String key) {

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/net/AbstractJMSReceiver.java
Patch:
@@ -28,7 +28,7 @@
 import javax.naming.NamingException;
 
 /**
- *
+ * Base class for receiving LogEvents over JMS. This class expects all messages to be serialized log events.
  */
 public abstract class AbstractJMSReceiver extends AbstractServer implements javax.jms.MessageListener {
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/pattern/ClassNamePatternConverter.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Formats the class name of the site of the logging request.
  */
-@Plugin(name="ClassNamePatternConverter", type="Converter")
+@Plugin(name = "ClassNamePatternConverter", type = "Converter")
 @ConverterKeys({"C", "class"})
 public final class ClassNamePatternConverter extends NamePatternConverter {
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/pattern/DatePatternConverter.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * Convert and format the event's date in a StringBuffer.
  */
-@Plugin(name="DatePatternConverter", type="Converter")
+@Plugin(name = "DatePatternConverter", type = "Converter")
 @ConverterKeys({"d", "date"})
 public final class DatePatternConverter extends LogEventPatternConverter implements ArrayPatternConverter {
     /**

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/pattern/FileDatePatternConverter.java
Patch:
@@ -24,7 +24,7 @@
  * date pattern for a %d specifier in a file name is different than
  * the %d pattern in pattern layout.
  */
-@Plugin(name="FileDatePatternConverter", type="FileConverter")
+@Plugin(name = "FileDatePatternConverter", type = "FileConverter")
 @ConverterKeys({"d", "date"})
 public final class FileDatePatternConverter {
     /**

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/pattern/FileLocationPatternConverter.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Return the event's line location information in a StringBuffer.
  */
-@Plugin(name="FileLocationPatternConverter", type="Converter")
+@Plugin(name = "FileLocationPatternConverter", type = "Converter")
 @ConverterKeys({"F", "file"})
 public final class FileLocationPatternConverter extends LogEventPatternConverter {
     /**
@@ -46,8 +46,7 @@ private FileLocationPatternConverter() {
      * @param options options, may be null.
      * @return instance of pattern converter.
      */
-    public static FileLocationPatternConverter newInstance(
-        final String[] options) {
+    public static FileLocationPatternConverter newInstance(final String[] options) {
         return INSTANCE;
     }
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/pattern/FullLocationPatternConverter.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Format the event's line location information.
  */
-@Plugin(name="FullLocationPatternConverter", type="Converter")
+@Plugin(name = "FullLocationPatternConverter", type = "Converter")
 @ConverterKeys({"l", "location"})
 public final class FullLocationPatternConverter extends LogEventPatternConverter {
     /**
@@ -46,8 +46,7 @@ private FullLocationPatternConverter() {
      * @param options options, may be null.
      * @return instance of pattern converter.
      */
-    public static FullLocationPatternConverter newInstance(
-        final String[] options) {
+    public static FullLocationPatternConverter newInstance(final String[] options) {
         return INSTANCE;
     }
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/pattern/IntegerPatternConverter.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Formats an integer.
  */
-@Plugin(name="IntegerPatternConverter", type="FileConverter")
+@Plugin(name = "IntegerPatternConverter", type = "FileConverter")
 @ConverterKeys({"i", "index"})
 public final class IntegerPatternConverter extends AbstractPatternConverter implements ArrayPatternConverter {
     /**

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/pattern/LineLocationPatternConverter.java
Patch:
@@ -20,11 +20,10 @@
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 
-
 /**
  * Return the event's line location information in a StringBuffer.
  */
-@Plugin(name="LineLocationPatternConverter", type="Converter")
+@Plugin(name = "LineLocationPatternConverter", type = "Converter")
 @ConverterKeys({"L", "line"})
 public final class LineLocationPatternConverter extends LogEventPatternConverter {
     /**

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/pattern/LoggerPatternConverter.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Formats a logger name.
  */
-@Plugin(name="LoggerPatternConverter", type="Converter")
+@Plugin(name = "LoggerPatternConverter", type = "Converter")
 @ConverterKeys({"c", "logger"})
 public final class LoggerPatternConverter extends NamePatternConverter {
     /**

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/pattern/MDCPatternConverter.java
Patch:
@@ -31,7 +31,7 @@
  * within the property bundle
  * when this pattern converter has the option set.
  */
- @Plugin(name="MDCPatternConverter", type="Converter")
+ @Plugin(name = "MDCPatternConverter", type = "Converter")
 @ConverterKeys({"X", "mdc", "MDC"})
 public final class MDCPatternConverter extends LogEventPatternConverter {
     /**

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java
Patch:
@@ -31,7 +31,7 @@
  * java.util.Hashtable.toString(), or to output the value of a specific key
  * within the Map.
  */
-@Plugin(name="MapPatternConverter", type="Converter")
+@Plugin(name = "MapPatternConverter", type = "Converter")
 @ConverterKeys({"K", "map", "MAP"})
 public final class MapPatternConverter extends LogEventPatternConverter {
     /**

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/pattern/MessagePatternConverter.java
Patch:
@@ -22,11 +22,10 @@
 import org.apache.logging.log4j.message.FormattedMessage;
 import org.apache.logging.log4j.message.Message;
 
-
 /**
  * Return the event's rendered message in a StringBuffer.
  */
-@Plugin(name="MessagePatternConverter", type="Converter")
+@Plugin(name = "MessagePatternConverter", type = "Converter")
 @ConverterKeys({"m", "msg", "message"})
 public final class MessagePatternConverter extends LogEventPatternConverter {
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/pattern/MethodLocationPatternConverter.java
Patch:
@@ -46,8 +46,7 @@ private MethodLocationPatternConverter() {
      * @param options options, may be null.
      * @return instance of MethodLocationPatternConverter.
      */
-    public static MethodLocationPatternConverter newInstance(
-        final String[] options) {
+    public static MethodLocationPatternConverter newInstance(final String[] options) {
         return INSTANCE;
     }
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/pattern/NDCPatternConverter.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Return the event's NDC in a StringBuffer.
  */
-@Plugin(name="NDCPatternConverter", type="Converter")
+@Plugin(name = "NDCPatternConverter", type = "Converter")
 @ConverterKeys({"x", "NDC"})
 public final class NDCPatternConverter extends LogEventPatternConverter {
   /**

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/pattern/RelativeTimePatternConverter.java
Patch:
@@ -22,11 +22,10 @@
 
 import java.lang.management.ManagementFactory;
 
-
 /**
  * Return the relative time in milliseconds since JVM Startup.
  */
-@Plugin(name="RelativeTimePatternConverter", type="Converter")
+@Plugin(name = "RelativeTimePatternConverter", type = "Converter")
 @ConverterKeys({"r", "relative"})
 public class RelativeTimePatternConverter extends LogEventPatternConverter {
     /**

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/pattern/SequenceNumberPatternConverter.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Formats the event sequence number.
  */
-@Plugin(name="SequenceNumberPatternConverter", type="Converter")
+@Plugin(name = "SequenceNumberPatternConverter", type = "Converter")
 @ConverterKeys({"sn", "sequenceNumber"})
 public class SequenceNumberPatternConverter extends LogEventPatternConverter {
     private static AtomicLong sequence = new AtomicLong();

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/pattern/ThreadPatternConverter.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Formats the event thread name.
  */
-@Plugin(name="ThreadPatternConverter", type="Converter")
+@Plugin(name = "ThreadPatternConverter", type = "Converter")
 @ConverterKeys({"t", "thread"})
 public class ThreadPatternConverter extends LogEventPatternConverter {
     /**

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/pattern/ThrowablePatternConverter.java
Patch:
@@ -57,8 +57,7 @@ protected ThrowablePatternConverter(String name, String style, final String[] op
             option = options[0];
             if (option.equalsIgnoreCase(SHORT)) {
                 count = 2;
-            } else if (option.equalsIgnoreCase(FULL)) {
-            } else {
+            } else if (!option.equalsIgnoreCase(FULL)) {
                 count = Integer.parseInt(option);
             }
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/pattern/UUIDPatternConverter.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * Formats the event sequence number.
  */
-@Plugin(name="UUIDPatternConverter", type="Converter")
+@Plugin(name = "UUIDPatternConverter", type = "Converter")
 @ConverterKeys({"u", "uuid"})
 public class UUIDPatternConverter extends LogEventPatternConverter {
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/selector/BasicContextSelector.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.javaee.ContextAnchor;
-import org.apache.logging.log4j.status.StatusLogger;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -31,8 +30,6 @@ public class BasicContextSelector implements ContextSelector {
 
     private static LoggerContext context = new LoggerContext("Default");
 
-    private static StatusLogger logger = StatusLogger.getLogger();
-
     public LoggerContext getContext(String FQCN, boolean currentContext) {
 
         LoggerContext ctx = ContextAnchor.threadContext.get();

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/flume/FlumeAvroManager.java
Patch:
@@ -199,7 +199,7 @@ private FlumeEventAvroServer connect(String hostname, int port) {
      * Factory data.
      */
     private static class FactoryData {
-        Agent[] agents;
+        private Agent[] agents;
 
         /**
          * Constructor.

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java
Patch:
@@ -61,7 +61,9 @@
  */
 @Plugin(name = "DefaultRolloverStrategy", type = "Core", printObject = true)
 public class DefaultRolloverStrategy implements RolloverStrategy {
-
+    /**
+     * Allow subclasses access to the status logger without creating another instance.
+     */
     protected static final Logger LOGGER = StatusLogger.getLogger();
 
     private static final int MIN_WINDOW_SIZE = 1;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java
Patch:
@@ -30,13 +30,12 @@
 
 @Plugin(name = "OnStartupTriggeringPolicy", type = "Core", printObject = true)
 public class OnStartupTriggeringPolicy implements TriggeringPolicy {
+    private static final long JVM_START_TIME = ManagementFactory.getRuntimeMXBean().getStartTime();
 
     private boolean evaluated = false;
 
     private RollingFileManager manager;
 
-    private static long jvmStartTime = ManagementFactory.getRuntimeMXBean().getStartTime();
-
     /**
      * Provide the RollingFileManager to the policy.
      * @param manager The RollingFileManager.
@@ -55,7 +54,7 @@ public boolean isTriggeringEvent(LogEvent event) {
             return false;
         }
         evaluated = true;
-        return manager.getFileTime() < jvmStartTime;
+        return manager.getFileTime() < JVM_START_TIME;
     }
 
     @Override

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RolloverDescriptionImpl.java
Patch:
@@ -100,4 +100,4 @@ public Action getSynchronous() {
     public Action getAsynchronous() {
         return asynchronous;
     }
-}
\ No newline at end of file
+}

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RolloverStrategyBase.java
Patch:
@@ -27,5 +27,5 @@ public abstract class RolloverStrategyBase implements RolloverStrategy {
     /**
      * Allow subclasses access to the status logger without creating another instance.
      */
-    protected static final Logger logger = StatusLogger.getLogger();
+    protected static final Logger LOGGER = StatusLogger.getLogger();
 }

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/routing/Route.java
Patch:
@@ -29,11 +29,11 @@
  */
 @Plugin(name = "Route", type = "Core", printObject = true, deferChildren = true)
 public final class Route {
+    private static final Logger LOGGER = StatusLogger.getLogger();
 
     private final Node node;
     private final String appenderRef;
     private final String key;
-    private static final Logger logger = StatusLogger.getLogger();
 
     private Route(Node node, String appenderRef, String key) {
         this.node = node;
@@ -99,12 +99,12 @@ public static Route createRoute(@PluginAttr("appender-ref") String appenderRef,
 
             }
             if (appenderRef != null) {
-                logger.error("A route cannot be configured with an appender reference and an appender definition");
+                LOGGER.error("A route cannot be configured with an appender reference and an appender definition");
                 return null;
             }
         } else {
             if (appenderRef == null) {
-                logger.error("A route must specify an appender reference or an appender definition");
+                LOGGER.error("A route must specify an appender reference or an appender definition");
                 return null;
             }
         }

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/config/Configuration.java
Patch:
@@ -23,8 +23,6 @@
 import org.apache.logging.log4j.core.filter.Filtering;
 import org.apache.logging.log4j.core.lookup.StrSubstitutor;
 
-import java.util.Iterator;
-import java.util.List;
 import java.util.Map;
 
 /**

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/config/DefaultConfiguration.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Layout;
-import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.appender.ConsoleAppender;
 import org.apache.logging.log4j.core.layout.PatternLayout;
 
@@ -40,8 +39,6 @@ public class DefaultConfiguration extends BaseConfiguration {
      */
     public static final String DEFAULT_LEVEL = "org.apache.logging.log4j.level";
 
-    private static final String EMPTY_STRING = "";
-
     /**
      * Constructor to create the default configuration.
      */

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java
Patch:
@@ -47,7 +47,7 @@
  * <code>
  * &lt;Console name="console"&gt;<br>
  * &nbsp;&lt;PatternLayout pattern="%-5p %d{dd-MMM-yyyy HH:mm:ss} %x %t %m%n"/&gt;<br>
- * &nbsp;$lt;filters&gt;<br>
+ * &nbsp;&lt;filters&gt;<br>
  * &nbsp;&nbsp;&lt;Burst level="INFO" rate="16" maxBurst="100"/&gt;<br>
  * &nbsp;&lt;/filters&gt;<br>
  * &lt;/Console&gt;<br>

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/filter/Filtering.java
Patch:
@@ -19,8 +19,6 @@
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.LogEvent;
 
-import java.util.Iterator;
-
 /**
  * Interface implemented by Classes that allow filtering to occur.
  */

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/filter/MapFilter.java
Patch:
@@ -26,15 +26,14 @@
 import org.apache.logging.log4j.core.helpers.KeyValuePair;
 import org.apache.logging.log4j.message.MapMessage;
 import org.apache.logging.log4j.message.Message;
-import org.apache.logging.log4j.message.StructuredDataMessage;
 
 import java.util.HashMap;
 import java.util.Map;
 
 /**
- *
+ * A Filter that operates on a Map.
  */
-@Plugin(name="MapFilter", type="Core", elementType="filter", printObject=true)
+@Plugin(name = "MapFilter", type = "Core", elementType = "filter", printObject = true)
 public class MapFilter extends FilterBase {
     private final Map<String, String> map;
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractManager.java
Patch:
@@ -32,7 +32,7 @@ public abstract class AbstractManager {
     /**
      * Allow subclasses access to the status logger without creating another instance.
      */
-    protected static Logger logger = StatusLogger.getLogger();
+    protected static final Logger LOGGER = StatusLogger.getLogger();
 
     // Need to lock that map instead of using a ConcurrentMap due to stop removing the
     // manager from the map and closing the stream, requiring the whole stop method to be locked.

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/FileAppender.java
Patch:
@@ -76,14 +76,14 @@ public static FileAppender createAppender(@PluginAttr("fileName") String fileNam
 
         boolean isAppend = append == null ? true : Boolean.valueOf(append);
         boolean isLocking = locking == null ? false : Boolean.valueOf(locking);
-        boolean isBuffered = bufferedIO == null ? true : Boolean.valueOf(bufferedIO);;
+        boolean isBuffered = bufferedIO == null ? true : Boolean.valueOf(bufferedIO);
         if (isLocking && isBuffered) {
             if (bufferedIO != null) {
                 LOGGER.warn("Locking and buffering are mutually exclusive. No buffereing will occur for " + fileName);
             }
             isBuffered = false;
         }
-        boolean isFlush = immediateFlush == null ? true : Boolean.valueOf(immediateFlush);;
+        boolean isFlush = immediateFlush == null ? true : Boolean.valueOf(immediateFlush);
         boolean handleExceptions = suppress == null ? true : Boolean.valueOf(suppress);
 
         if (name == null) {

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java
Patch:
@@ -55,7 +55,7 @@ public synchronized void setHeader(byte[] header) {
             try {
                 this.os.write(header, 0, header.length);
             } catch (IOException ioe) {
-                logger.error("Unable to write header", ioe);
+                LOGGER.error("Unable to write header", ioe);
             }
         }
     }
@@ -131,7 +131,7 @@ protected void close() {
         try {
             os.close();
         } catch (IOException ex) {
-            logger.error("Unable to close stream " + getName() + ". " + ex);
+            LOGGER.error("Unable to close stream " + getName() + ". " + ex);
         }
     }
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/SocketAppender.java
Patch:
@@ -66,7 +66,7 @@ public static SocketAppender createAppender(@PluginAttr("host") String host,
                                                 @PluginElement("layout") Layout layout,
                                                 @PluginElement("filters") Filter filter) {
 
-        boolean isFlush = immediateFlush == null ? true : Boolean.valueOf(immediateFlush);;
+        boolean isFlush = immediateFlush == null ? true : Boolean.valueOf(immediateFlush);
         boolean handleExceptions = suppress == null ? true : Boolean.valueOf(suppress);
         int reconnectDelay = delay == null ? 0 : Integer.parseInt(delay);
         int port = portNum == null ? 0 : Integer.parseInt(portNum);

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/SyslogAppender.java
Patch:
@@ -99,7 +99,7 @@ public static SyslogAppender createAppender(@PluginAttr("host") String host,
                                                 @PluginConfiguration Configuration config,
                                                 @PluginAttr("charset") String charset) {
 
-        boolean isFlush = immediateFlush == null ? true : Boolean.valueOf(immediateFlush);;
+        boolean isFlush = immediateFlush == null ? true : Boolean.valueOf(immediateFlush);
         boolean handleExceptions = suppress == null ? true : Boolean.valueOf(suppress);
         int reconnectDelay = delay == null ? 0 : Integer.parseInt(delay);
         int port = portNum == null ? 0 : Integer.parseInt(portNum);

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/helper/ActionBase.java
Patch:
@@ -40,7 +40,7 @@ public abstract class ActionBase implements Action {
     /**
      * Allow subclasses access to the status logger without creating another instance.
      */
-    protected static final Logger logger = StatusLogger.getLogger();
+    protected static final Logger LOGGER = StatusLogger.getLogger();
 
     /**
      * Constructor.

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/helper/CompositeAction.java
Patch:
@@ -56,7 +56,7 @@ public void run() {
         try {
             execute();
         } catch (IOException ex) {
-            logger.warn("Exception during file rollover.", ex);
+            LOGGER.warn("Exception during file rollover.", ex);
         }
     }
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/helper/ZipCompressAction.java
Patch:
@@ -109,7 +109,7 @@ public static boolean execute(final File source, final File destination, final b
             fis.close();
 
             if (deleteSource && !source.delete()) {
-                logger.warn("Unable to delete " + source.toString() + ".");
+                LOGGER.warn("Unable to delete " + source.toString() + ".");
             }
 
             return true;
@@ -124,6 +124,6 @@ public static boolean execute(final File source, final File destination, final b
      * @param ex exception.
      */
     protected void reportException(final Exception ex) {
-        logger.warn("Exception during compression of '" + source.toString() + "'.", ex);
+        LOGGER.warn("Exception during compression of '" + source.toString() + "'.", ex);
     }
 }

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/config/JSONConfigurationFactory.java
Patch:
@@ -45,7 +45,7 @@ public JSONConfigurationFactory() {
                 Class.forName(item);
             }
         } catch (ClassNotFoundException ex) {
-            logger.debug("Missing dependencies for Json support");
+            LOGGER.debug("Missing dependencies for Json support");
             isActive = false;
             return;
         }

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/net/JMSQueueManager.java
Patch:
@@ -47,11 +47,11 @@ public static JMSQueueManager getJMSQueueManager(String factoryName, String prov
                                                      String userName, String password) {
 
         if (factoryBindingName == null) {
-            logger.error("No factory name provided for JMSQueueManager");
+            LOGGER.error("No factory name provided for JMSQueueManager");
             return null;
         }
         if (queueBindingName == null) {
-            logger.error("No topic name provided for JMSQueueManager");
+            LOGGER.error("No topic name provided for JMSQueueManager");
             return null;
         }
 
@@ -82,7 +82,7 @@ public void releaseSub() {
                 queueConnection.close();
             }
         } catch (JMSException ex) {
-            logger.error("Error closing " + getName(), ex);
+            LOGGER.error("Error closing " + getName(), ex);
         }
     }
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java
Patch:
@@ -88,10 +88,10 @@ protected void replaceManager(OutputStreamManager newManager) {
     @Override
     public void start() {
         if (getLayout() == null) {
-            logger.error("No layout set for the appender named [" + getName() + "].");
+            LOGGER.error("No layout set for the appender named [" + getName() + "].");
         }
         if (manager == null) {
-            logger.error("No OutputStreamManager set for the appender named [" + getName() + "].");
+            LOGGER.error("No OutputStreamManager set for the appender named [" + getName() + "].");
         }
         super.start();
     }

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/flume/FlumeAvroAppender.java
Patch:
@@ -112,11 +112,11 @@ public static FlumeAvroAppender createAppender(@PluginElement("agents") Agent[]
         try {
             hostname = InetAddress.getLocalHost().getHostName();
         } catch (Exception ex) {
-            logger.error("Unable to determine local hostname", ex);
+            LOGGER.error("Unable to determine local hostname", ex);
             return null;
         }
         if (agents == null || agents.length == 0) {
-            logger.debug("No agents provided, using defaults");
+            LOGGER.debug("No agents provided, using defaults");
             agents = new Agent[] {Agent.createAgent(null, null)};
         }
 
@@ -132,7 +132,7 @@ public static FlumeAvroAppender createAppender(@PluginElement("agents") Agent[]
         }
 
         if (name == null) {
-            logger.error("No name provided for Appender");
+            LOGGER.error("No name provided for Appender");
             return null;
         }
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/rewrite/RewriteAppender.java
Patch:
@@ -58,7 +58,7 @@ public void start() {
             if (appender != null) {
                 appenders.put(ref, new AppenderControl(appender));
             } else {
-                logger.error("Appender " + ref + " cannot be located. Reference ignored");
+                LOGGER.error("Appender " + ref + " cannot be located. Reference ignored");
             }
         }
         super.start();
@@ -94,11 +94,11 @@ public static RewriteAppender createAppender(@PluginAttr("name") String name,
         boolean handleExceptions = suppress == null ? true : Boolean.valueOf(suppress);
 
         if (name == null) {
-            logger.error("No name provided for RewriteAppender");
+            LOGGER.error("No name provided for RewriteAppender");
             return null;
         }
         if (appenderRefs == null) {
-            logger.error("No appender references defined for RewriteAppender");
+            LOGGER.error("No appender references defined for RewriteAppender");
             return null;
         }
         return new RewriteAppender(name, filter, handleExceptions, appenderRefs, rewritePolicy, config);

File: log4j2-core/src/test/java/org/apache/logging/log4j/test/appender/AlwaysFailAppender.java
Patch:
@@ -40,7 +40,7 @@ public void append(LogEvent event) {
     @PluginFactory
     public static AlwaysFailAppender createAppender(@PluginAttr("name") String name) {
         if (name == null) {
-            logger.error("A name for the Appender must be specified");
+            LOGGER.error("A name for the Appender must be specified");
             return null;
         }
 

File: log4j2-core/src/test/java/org/apache/logging/log4j/test/appender/ListAppender.java
Patch:
@@ -145,7 +145,7 @@ public static ListAppender createAppender(@PluginAttr("name") String name,
                                               @PluginElement("filters") Filter filter) {
 
         if (name == null) {
-            logger.error("No name provided for ListAppender");
+            LOGGER.error("No name provided for ListAppender");
             return null;
         }
 

File: log4j2-api/src/main/java/org/apache/logging/log4j/MarkerManager.java
Patch:
@@ -74,11 +74,12 @@ private static class Log4JMarker implements Marker {
 
         private static final long serialVersionUID = 100L;
 
-        private String name;
-        private Marker parent;
+        private final String name;
+        private final Marker parent;
 
         public Log4JMarker(String name) {
             this.name = name;
+            this.parent = null;
         }
 
         public Log4JMarker(String name, Marker parent) {

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/pattern/ClassNamePatternConverter.java
Patch:
@@ -45,8 +45,7 @@ private ClassNamePatternConverter(
      * @param options options, may be null.
      * @return instance of pattern converter.
      */
-    public static ClassNamePatternConverter newInstance(
-        final String[] options) {
+    public static ClassNamePatternConverter newInstance(final String[] options) {
         return new ClassNamePatternConverter(options);
     }
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/pattern/NDCPatternConverter.java
Patch:
@@ -25,7 +25,7 @@
  * Return the event's NDC in a StringBuffer.
  */
 @Plugin(name="NDCPatternConverter", type="Converter")
-@ConverterKeys({"C", "class"})
+@ConverterKeys({"x", "NDC"})
 public final class NDCPatternConverter extends LogEventPatternConverter {
   /**
    *   Singleton.

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java
Patch:
@@ -106,7 +106,7 @@ public PatternParser(Configuration config, String converterKey, Class expected)
                     }
                 }
             } catch (Exception ex) {
-
+                logger.error("Error processing plugin " + type.getElementName(), ex);
             }
         }
         converterRules = converters;

File: log4j2-jcl/src/test/java/org/apache/logging/log4j/jcl/LoggerTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.LoggerContext;
-import org.apache.logging.log4j.core.appender.ListAppender;
+import org.apache.logging.log4j.test.appender.ListAppender;
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.XMLConfigurationFactory;
 import org.apache.logging.log4j.status.StatusLogger;

File: slf4j-impl/src/test/java/org/apache/logging/slf4j/LoggerTest.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.LoggerContext;
-import org.apache.logging.log4j.core.appender.ListAppender;
+import org.apache.logging.log4j.test.appender.ListAppender;
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.XMLConfigurationFactory;
 import org.apache.logging.log4j.status.StatusLogger;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/flume/FlumeEvent.java
Patch:
@@ -38,7 +38,7 @@
 /**
  *
  */
-class FlumeEvent extends EventBaseImpl implements LogEvent {
+public class FlumeEvent extends EventBaseImpl implements LogEvent {
 
     private final LogEvent event;
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/config/BaseConfiguration.java
Patch:
@@ -595,7 +595,7 @@ private Object createPluginObject(PluginType type, Node node, LogEvent event)
                     if (parmClasses[index].isArray()) {
                         Class parmClass = parmClasses[index].getComponentType();
                         List<Object> list = new ArrayList<Object>();
-                        sb.append("{");
+                        sb.append(name).append("={");
                         boolean first = true;
                         for (Node child : children) {
                             PluginType childType = child.getType();

File: log4j12-api/src/test/java/org/apache/log4j/CategoryTest.java
Patch:
@@ -143,7 +143,7 @@ public void testSetPriority() {
     @Test
     public void testClassName() {
         Category category = Category.getInstance("TestCategory");
-        Layout layout = PatternLayout.createLayout("%d %p %C{1.} [%t] %m%n", null);
+        Layout layout = PatternLayout.createLayout("%d %p %C{1.} [%t] %m%n", null, null, null);
         ListAppender appender = new ListAppender("List2", null, layout, false, false);
         appender.start();
         category.setAdditivity(false);

File: log4j2-core/src/test/java/org/apache/logging/log4j/core/pattern/PatternParserTest.java
Patch:
@@ -74,5 +74,4 @@ public void defaultPattern() {
         validateConverter(converters, 1, "Line Sep");
     }
 
-
 }

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/Layout.java
Patch:
@@ -23,7 +23,7 @@
  *  Would introduce an EventEncoder, EventRenderer or something similar for the logging event to byte encoding.
  * (RG) A layout can be configured with a Charset and then Strings can be converted to byte arrays. OTOH, it isn't
  * possible to write byte arrays as character streams.
- * @param T The Object type that will be returned on the formatAs call.
+ * @param <T> The Object type that will be returned on the formatAs call.
  */
 public interface Layout<T extends Serializable> {
     /**

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/AppenderBase.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.logging.log4j.Logger;
 
 /**
+ *
  * @doubt Appender should be refactored as mentioned elsewhere
  */
 public abstract class AppenderBase extends Filterable implements Appender, Lifecycle {

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/flume/FlumeAvroManager.java
Patch:
@@ -161,9 +161,6 @@ private FlumeEventAvroServer connect(Agent[] agents) {
         throw new AppenderRuntimeException("Unable to connect to any agents");
     }
 
-    public void releaseSub() {
-    }
-
     private FlumeEventAvroServer connect(String hostname, int port) {
         URL url;
 

File: log4j2-jcl/src/test/java/org/apache/logging/log4j/jcl/LoggerTest.java
Patch:
@@ -68,6 +68,8 @@ public void testLog() {
         verify("List", "o.a.l.l.j.LoggerTest Exception:  MDC{}\n");
         logger.info("Info Message");
         verify("List", "o.a.l.l.j.LoggerTest Info Message MDC{}\n");
+        logger.info("Info Message {}");
+        verify("List", "o.a.l.l.j.LoggerTest Info Message {} MDC{}\n");
     }
 
     private void verify(String name, String expected) {

File: slf4j-impl/src/main/java/org/slf4j/helpers/Log4JMDCAdapter.java
Patch:
@@ -47,7 +47,7 @@ public Map getCopyOfContextMap() {
         Map<String, Object> ctx = ThreadContext.getContext();
         Map<String, String> map = new HashMap<String, String>();
 
-        for (Map.Entry<String, Object>entry : ctx.entrySet()) {
+        for (Map.Entry<String, Object> entry : ctx.entrySet()) {
             map.put(entry.getKey(), entry.getValue().toString());
         }
         return map;

File: slf4j-impl/src/main/java/org/slf4j/helpers/MarkerWrapper.java
Patch:
@@ -33,7 +33,7 @@ public class MarkerWrapper extends BasicMarker implements Marker {
     @Override
     public void add(org.slf4j.Marker reference) {
         super.add(reference);
-        ((MarkerWrapper)reference).setParent(this);
+        ((MarkerWrapper) reference).setParent(this);
     }
 
     private void setParent(MarkerWrapper marker) {

File: slf4j-impl/src/main/java/org/slf4j/impl/SLF4JLogger.java
Patch:
@@ -36,7 +36,7 @@
 public class SLF4JLogger extends AbstractLoggerWrapper implements LocationAwareLogger {
 
     private static final String FQCN = SLF4JLogger.class.getName();
-    private static Marker EVENT_MARKER = MarkerFactory.getMarker("EVENT");
+    private static final Marker EVENT_MARKER = MarkerFactory.getMarker("EVENT");
     private final boolean eventLogger;
 
     public SLF4JLogger(AbstractLogger logger, String name) {

File: log4j2-api/src/main/java/org/apache/logging/log4j/MarkerManager.java
Patch:
@@ -67,6 +67,9 @@ public static Marker getMarker(String name, Marker parent) {
         return markerMap.get(name);
     }
 
+    /**
+     * The actual Marker implementation.
+     */
     private static class Log4JMarker implements Marker {
 
         private static final long serialVersionUID = 100L;

File: log4j2-api/src/main/java/org/apache/logging/log4j/spi/LoggerContextFactory.java
Patch:
@@ -22,10 +22,10 @@
 public interface LoggerContextFactory {
 
     /**
-     * @param FQCN The fully qualified class name of the caller.
+     * @param fqcn The fully qualified class name of the caller.
      * @param currentContext If true returns the current Context, if false returns the Context appropriate
      * for the caller if a more appropriate Context can be determined.
      * @return The LoggerContext.
      */
-    LoggerContext getContext(String FQCN, boolean currentContext);
+    LoggerContext getContext(String fqcn, boolean currentContext);
 }

File: log4j2-api/src/main/java/org/apache/logging/log4j/spi/LoggerFactory.java
Patch:
@@ -20,6 +20,7 @@
 
 /**
  * Interface implemented by factories that create Logger objects.
+ * @param <C> The LoogerContext class.
  */
 public interface LoggerFactory<C extends LoggerContext> {
 

File: log4j2-api/src/main/java/org/apache/logging/log4j/status/StatusConsoleListener.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.logging.log4j.Level;
 
 /**
- * StatusListener that writes to the Console
+ * StatusListener that writes to the Console.
  */
 public class StatusConsoleListener implements StatusListener {
 

File: log4j2-api/src/main/java/org/apache/logging/log4j/status/StatusData.java
Patch:
@@ -108,7 +108,7 @@ public String getFormattedStatus() {
         sb.append(msg.getFormattedMessage());
         Object[] params = msg.getParameters();
         Throwable t;
-        if (throwable == null && params != null && params[params.length -1] instanceof Throwable ) {
+        if (throwable == null && params != null && params[params.length - 1] instanceof Throwable) {
             t = (Throwable) params[params.length - 1];
         } else {
             t = throwable;

File: log4j12-api/src/main/java/org/apache/log4j/package-info.java
Patch:
@@ -0,0 +1,2 @@
+/** Log4j 1.x compatibility layer */
+package org.apache.log4j;
\ No newline at end of file

File: log4j2-api/src/main/java/org/apache/logging/log4j/message/Message.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.logging.log4j.message;
 
 import java.io.Serializable;
-import java.util.Map;
 
 /**
  * An interface for various Message implementations that can be logged. Messages can act as wrappers

File: log4j2-api/src/main/java/org/apache/logging/log4j/message/package-info.java
Patch:
@@ -0,0 +1,2 @@
+/** Public Message Types used for Log4j 2.0. User's may implement their own Messages. */
+package org.apache.logging.log4j.message;
\ No newline at end of file

File: log4j2-api/src/main/java/org/apache/logging/log4j/package-info.java
Patch:
@@ -0,0 +1,2 @@
+/** Public API for Log4j 2.0. */
+package org.apache.logging.log4j;
\ No newline at end of file

File: log4j2-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java
Patch:
@@ -26,6 +26,9 @@
 import org.apache.logging.log4j.message.SimpleMessage;
 
 /**
+ * Base implementation of a Logger. While this class is large and contains many methods, it makes implementing an
+ * actually Logger relatively easy.
+ *
  * @doubt See Jira LOG4J2-39.
  */
 public abstract class AbstractLogger implements Logger {

File: log4j2-api/src/main/java/org/apache/logging/log4j/spi/package-info.java
Patch:
@@ -0,0 +1,2 @@
+/** Internal interfaces and classes to be used by authors of logging implementations. */
+package org.apache.logging.log4j.spi;
\ No newline at end of file

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/Appender.java
Patch:
@@ -16,8 +16,6 @@
  */
 package org.apache.logging.log4j.core;
 
-import java.util.List;
-
 /**
  * @issue LOG4J2-36: Appender interface should be refactored
  */

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/ErrorHandler.java
Patch:
@@ -16,8 +16,6 @@
  */
 package org.apache.logging.log4j.core;
 
-import org.apache.logging.log4j.core.LogEvent;
-
 /**
  * Appenders may delegate their error handling to <code>ErrorHandlers</code>.
  * @doubt if the appender interface is simplified, then error handling could just be done by wrapping
@@ -45,5 +43,5 @@ public interface ErrorHandler {
      * @param event The LogEvent.
      * @param t The Throwable.
      */
-    public void error(String msg, LogEvent event, Throwable t);
+    void error(String msg, LogEvent event, Throwable t);
 }

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/Log4jContextFactory.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.logging.log4j.core.helpers.Loader;
 import org.apache.logging.log4j.core.selector.ClassLoaderContextSelector;
 import org.apache.logging.log4j.core.selector.ContextSelector;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 import org.apache.logging.log4j.spi.LoggerContextFactory;
 
 /**

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/Log4jLogEvent.java
Patch:
@@ -54,7 +54,7 @@ public Log4jLogEvent(String loggerName, Marker marker, String fqcn, Level level,
 
 
     public Log4jLogEvent(String loggerName, Marker marker, String fqcn, Level level, Message message, Throwable t,
-                         Map<String, Object> mdc, Stack<String>ndc, String threadName, StackTraceElement location,
+                         Map<String, Object> mdc, Stack<String> ndc, String threadName, StackTraceElement location,
                          long timestamp) {
         name = loggerName;
         this.marker = marker;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/Logger.java
Patch:
@@ -21,11 +21,9 @@
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.LoggerConfig;
 import org.apache.logging.log4j.message.Message;
-import org.apache.logging.log4j.message.SimpleMessage;
 import org.apache.logging.log4j.spi.AbstractLogger;
 
 import java.util.Iterator;
-import java.util.List;
 import java.util.Map;
 
 /**
@@ -43,7 +41,7 @@ public class Logger extends AbstractLogger {
     /**
      * config should be consistent across threads.
      */
-    protected volatile PrivateConfig config;
+    volatile protected PrivateConfig config;
 
     protected Logger(LoggerContext context, String name) {
         this.context = context;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.logging.log4j.core.config.ConfigurationFactory;
 import org.apache.logging.log4j.core.config.ConfigurationListener;
 import org.apache.logging.log4j.core.config.NullConfiguration;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 import org.apache.logging.log4j.spi.LoggerFactory;
 
 import java.io.File;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractManager.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.logging.log4j.core.appender;
 
 import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 import java.util.HashMap;
 import java.util.Map;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/DefaultErrorHandler.java
Patch:
@@ -20,8 +20,7 @@
 import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.ErrorHandler;
 import org.apache.logging.log4j.core.LogEvent;
-import org.apache.logging.log4j.core.appender.AppenderRuntimeException;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 /**
  *

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.logging.log4j.core.appender;
 
 import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 import java.io.BufferedOutputStream;
 import java.io.File;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/flume/Agent.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginAttr;
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 /**
  *

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/flume/FlumeAvroManager.java
Patch:
@@ -26,7 +26,7 @@
 
 import com.cloudera.flume.handlers.avro.FlumeEventAvroServer;
 import com.cloudera.flume.handlers.avro.AvroEventConvertUtil;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 import java.io.IOException;
 import java.net.MalformedURLException;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/flume/package-info.java
Patch:
@@ -0,0 +1,2 @@
+/** Apache Flume Appender. Requires the user specifically include Flume and its dependencies */
+package org.apache.logging.log4j.core.appender.flume;
\ No newline at end of file

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/package-info.java
Patch:
@@ -0,0 +1,2 @@
+/** Log4j 2.0 Appenders */
+package org.apache.logging.log4j.core.appender;
\ No newline at end of file

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginAttr;
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 import java.io.File;
 import java.util.ArrayList;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.logging.log4j.core.appender.ManagerFactory;
 import org.apache.logging.log4j.core.appender.rolling.helper.Action;
 import org.apache.logging.log4j.core.appender.rolling.helper.ActionBase;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 import java.io.BufferedOutputStream;
 import java.io.File;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RolloverStrategyBase.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.logging.log4j.core.appender.rolling;
 
 import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 /**
  *

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/SizeBasedTriggeringPolicy.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.config.plugins.PluginAttr;
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 import java.text.NumberFormat;
 import java.text.ParseException;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/helper/ActionBase.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.logging.log4j.core.appender.rolling.helper;
 
 import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 import java.io.IOException;
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/helper/package-info.java
Patch:
@@ -0,0 +1,2 @@
+/** Support classes for the Rolling File Appender*/
+package org.apache.logging.log4j.core.appender.rolling.helper;
\ No newline at end of file

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/package-info.java
Patch:
@@ -0,0 +1,2 @@
+/** Rolling File Appender and support classes*/
+package org.apache.logging.log4j.core.appender.rolling;
\ No newline at end of file

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
Patch:
@@ -3,7 +3,7 @@
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.config.plugins.PluginManager;
 import org.apache.logging.log4j.core.config.plugins.PluginType;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 import java.net.URI;
 import java.util.ArrayList;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/config/Property.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.logging.log4j.core.config.plugins.PluginAttr;
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
 import org.apache.logging.log4j.core.config.plugins.PluginValue;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 /**
  *

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/config/XMLConfiguration.java
Patch:
@@ -20,9 +20,9 @@
 import org.apache.logging.log4j.core.config.plugins.PluginManager;
 import org.apache.logging.log4j.core.config.plugins.PluginType;
 import org.apache.logging.log4j.core.config.plugins.ResolverUtil;
-import org.apache.logging.log4j.internal.StatusConsoleListener;
-import org.apache.logging.log4j.internal.StatusListener;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusConsoleListener;
+import org.apache.logging.log4j.status.StatusListener;
+import org.apache.logging.log4j.status.StatusLogger;
 import org.w3c.dom.Attr;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/config/XMLConfigurationFactory.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.helpers.FileUtils;
 import org.apache.logging.log4j.core.helpers.Loader;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 import org.xml.sax.InputSource;
 
 import java.io.File;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/config/package-info.java
Patch:
@@ -0,0 +1,2 @@
+/** Configuration of Log4j 2.0*/
+package org.apache.logging.log4j.core.config;
\ No newline at end of file

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/config/plugins/AppenderRefPlugin.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.logging.log4j.core.config.plugins;
 
 import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 /**
  *

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/config/plugins/package-info.java
Patch:
@@ -0,0 +1,2 @@
+/** Configuration of Log4j 2.0 via Plugins*/
+package org.apache.logging.log4j.core.config.plugins;
\ No newline at end of file

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/filter/FilterBase.java
Patch:
@@ -22,8 +22,7 @@
 import org.apache.logging.log4j.core.Lifecycle;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.Logger;
-import org.apache.logging.log4j.core.config.Node;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 import org.apache.logging.log4j.message.Message;
 
 /**

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/filter/package-info.java
Patch:
@@ -0,0 +1,2 @@
+/** Log4j 2.0 Filter support */
+package org.apache.logging.log4j.core.filter;
\ No newline at end of file

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/helpers/Constants.java
Patch:
@@ -26,7 +26,7 @@ public final class Constants {
     /**
      * JNDI context name string literal.
      */
-    public static String JNDI_CONTEXT_NAME = "java:comp/env/log4j/context-name";
+    public static final String JNDI_CONTEXT_NAME = "java:comp/env/log4j/context-name";
 
     /**
      * Prevent class instantiation.

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/helpers/FileUtils.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.logging.log4j.core.helpers;
 
 import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 import java.io.File;
 import java.io.UnsupportedEncodingException;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/helpers/Loader.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.logging.log4j.core.helpers;
 
 import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 import java.io.InputStream;
 import java.net.URL;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/helpers/OptionConverter.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.logging.log4j.core.helpers;
 
 import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 import java.util.Properties;
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/helpers/package-info.java
Patch:
@@ -0,0 +1,2 @@
+/** Log4j 2.0 helper classes */
+package org.apache.logging.log4j.core.helpers;
\ No newline at end of file

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/javaee/ContextAnchor.java
Patch:
@@ -23,5 +23,5 @@
  */
 public class ContextAnchor {
 
-    public static ThreadLocal<LoggerContext> threadContext = new ThreadLocal<LoggerContext>();
+    public static final ThreadLocal<LoggerContext> threadContext = new ThreadLocal<LoggerContext>();
 }

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/javaee/package-info.java
Patch:
@@ -0,0 +1,2 @@
+/** Classes to aid integration with Java EE */
+package org.apache.logging.log4j.core.javaee;
\ No newline at end of file

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/jmx/Log4jManager.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.logging.log4j.core.Log4jContextFactory;
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.selector.ContextSelector;
-import org.apache.logging.log4j.internal.StatusData;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusData;
+import org.apache.logging.log4j.status.StatusLogger;
 
 import java.util.List;
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/jmx/Log4jManagerMBean.java
Patch:
@@ -1,7 +1,7 @@
 package org.apache.logging.log4j.core.jmx;
 
 import org.apache.logging.log4j.core.LoggerContext;
-import org.apache.logging.log4j.internal.StatusData;
+import org.apache.logging.log4j.status.StatusData;
 
 import java.util.List;
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/jmx/package-info.java
Patch:
@@ -0,0 +1,2 @@
+/** Log4j 2.0 JMX support */
+package org.apache.logging.log4j.core.jmx;
\ No newline at end of file

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/layout/LayoutBase.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.Layout;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 import java.io.Serializable;
 
@@ -30,7 +30,7 @@ public abstract class LayoutBase<T extends Serializable> implements Layout<T> {
     protected byte[] header;
     protected byte[] footer;
 
-    protected static Logger logger = StatusLogger.getLogger();
+    protected static final Logger logger = StatusLogger.getLogger();
 
     public byte[] getHeader() {
         return header;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/layout/package-info.java
Patch:
@@ -0,0 +1,2 @@
+/** Log4j 2.0 Layout support */
+package org.apache.logging.log4j.core.layout;
\ No newline at end of file

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.config.plugins.PluginManager;
 import org.apache.logging.log4j.core.config.plugins.PluginType;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 import java.util.HashMap;
 import java.util.Map;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/lookup/package-info.java
Patch:
@@ -0,0 +1,2 @@
+/** Log4j 2.0 Lookups */
+package org.apache.logging.log4j.core.lookup;
\ No newline at end of file

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/net/DatagramOutputStream.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.appender.AppenderRuntimeException;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 import java.io.IOException;
 import java.io.OutputStream;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/net/DatagramSocketManager.java
Patch:
@@ -28,7 +28,7 @@ public class DatagramSocketManager extends AbstractSocketManager {
     private static ManagerFactory factory = new DatagramSocketManagerFactory();
 
     public static DatagramSocketManager getSocketManager(String host, int port) {
-        if (host == null && host.length() == 0) {
+        if (host == null || host.length() == 0) {
             throw new IllegalArgumentException("A host name is required");
         }
         if (port <= 0) {

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/net/TCPSocketManager.java
Patch:
@@ -53,7 +53,7 @@ The default reconnection delay (30000 milliseconds or 30 seconds).
     private static ManagerFactory factory = new TCPSocketManagerFactory();
 
     public static TCPSocketManager getSocketManager(String host, int port, int delay) {
-        if (host == null && host.length() == 0) {
+        if (host == null || host.length() == 0) {
             throw new IllegalArgumentException("A host name is required");
         }
         if (port <= 0) {

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/net/package-info.java
Patch:
@@ -0,0 +1,2 @@
+/** Log4j 2.0 network support */
+package org.apache.logging.log4j.core.net;
\ No newline at end of file

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/package-info.java
Patch:
@@ -0,0 +1,2 @@
+/** Implementation of Log4j 2.0 */
+package org.apache.logging.log4j.core;
\ No newline at end of file

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/pattern/LogEventPatternConverter.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.LogEvent;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 /**
  * LoggingEventPatternConverter is a base class for pattern converters

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.config.plugins.PluginManager;
 import org.apache.logging.log4j.core.config.plugins.PluginType;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 import java.lang.reflect.Method;
 import java.util.ArrayList;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/pattern/package-info.java
Patch:
@@ -0,0 +1,2 @@
+/** Provides classes implementing format specifiers in conversion patterns. */
+package org.apache.logging.log4j.core.pattern;
\ No newline at end of file

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/selector/BasicContextSelector.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.javaee.ContextAnchor;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java
Patch:
@@ -16,11 +16,10 @@
  */
 package org.apache.logging.log4j.core.selector;
 
-import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.helpers.Loader;
 import org.apache.logging.log4j.core.javaee.ContextAnchor;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 import java.lang.ref.WeakReference;
 import java.lang.reflect.Method;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/selector/JNDIContextSelector.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.helpers.Constants;
 import org.apache.logging.log4j.core.javaee.ContextAnchor;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 
 import javax.naming.Context;
 import javax.naming.InitialContext;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/selector/package-info.java
Patch:
@@ -0,0 +1,2 @@
+/** Log4j 2.0 Context Selectors */
+package org.apache.logging.log4j.core.selector;
\ No newline at end of file

File: log4j2-core/src/test/java/org/apache/logging/log4j/core/LoggerTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.logging.log4j.core.appender.ListAppender;
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.XMLConfigurationFactory;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 import org.apache.logging.log4j.message.StructuredDataMessage;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;

File: log4j2-core/src/test/java/org/apache/logging/log4j/core/SimplePerfTest.java
Patch:
@@ -42,7 +42,7 @@ public class SimplePerfTest {
     private static final int WARMUP = 1000;
     private static long maxTime;
     private static Random rand = new SimpleRandom();
-    private static int RAND_SIZE = 200;
+    private static int RAND_SIZE = 250;
     private static int[] values = new int[RAND_SIZE];
 
     @BeforeClass

File: log4j2-core/src/test/java/org/apache/logging/log4j/core/StrictXMLConfigTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.logging.log4j.core.appender.ListAppender;
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.XMLConfigurationFactory;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 import org.apache.logging.log4j.message.StructuredDataMessage;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;

File: log4j2-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeAndSizeTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.XMLConfigurationFactory;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: log4j2-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.XMLConfigurationFactory;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: log4j2-core/src/test/java/org/apache/logging/log4j/core/config/XMLConfigurationTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.filter.ThreadContextMapFilter;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: log4j2-core/src/test/java/org/apache/logging/log4j/core/net/JMSQueueTest.java
Patch:
@@ -29,8 +29,8 @@
 import org.apache.logging.log4j.core.filter.FilterBase;
 import org.apache.logging.log4j.core.filter.Filters;
 import org.apache.logging.log4j.core.layout.PatternLayout;
-import org.apache.logging.log4j.internal.StatusConsoleListener;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusConsoleListener;
+import org.apache.logging.log4j.status.StatusLogger;
 
 import org.junit.After;
 import org.junit.AfterClass;

File: log4j2-core/src/test/java/org/apache/logging/log4j/core/net/JMSTopicTest.java
Patch:
@@ -29,8 +29,8 @@
 import org.apache.logging.log4j.core.filter.FilterBase;
 import org.apache.logging.log4j.core.filter.Filters;
 import org.apache.logging.log4j.core.layout.PatternLayout;
-import org.apache.logging.log4j.internal.StatusConsoleListener;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusConsoleListener;
+import org.apache.logging.log4j.status.StatusLogger;
 
 import org.junit.After;
 import org.junit.AfterClass;

File: log4j2-jcl/src/main/java/org/apache/logging/log4j/jcl/package-info.java
Patch:
@@ -0,0 +1,2 @@
+/** Log4j 2.0 adapter for Commons Logging */
+package org.apache.logging.log4j.jcl;
\ No newline at end of file

File: log4j2-jcl/src/test/java/org/apache/logging/log4j/jcl/LoggerTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.logging.log4j.core.appender.ListAppender;
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.XMLConfigurationFactory;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: slf4j-impl/src/main/java/org/apache/logging/slf4j/package-info.java
Patch:
@@ -0,0 +1,2 @@
+/** SLF4J support */
+package org.apache.logging.slf4j;
\ No newline at end of file

File: slf4j-impl/src/main/java/org/slf4j/helpers/package-info.java
Patch:
@@ -0,0 +1,2 @@
+/** Log4j 2.0 SLF4J adapter helper classes */
+package org.slf4j.helpers;
\ No newline at end of file

File: slf4j-impl/src/main/java/org/slf4j/impl/package-info.java
Patch:
@@ -0,0 +1,2 @@
+/** Log4j 2.0 SLF4J Binding */
+package org.slf4j.impl;
\ No newline at end of file

File: slf4j-impl/src/test/java/org/apache/logging/slf4j/LoggerTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.logging.log4j.core.appender.ListAppender;
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.XMLConfigurationFactory;
-import org.apache.logging.log4j.internal.StatusLogger;
+import org.apache.logging.log4j.status.StatusLogger;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -33,7 +33,6 @@
 import org.slf4j.ext.EventLogger;
 import org.slf4j.ext.XLogger;
 import org.slf4j.ext.XLoggerFactory;
-import org.slf4j.helpers.Log4JLoggerFactory;
 
 import java.util.List;
 import java.util.Locale;

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java
Patch:
@@ -152,7 +152,7 @@ public void log(String loggerName, Marker marker, String fqcn, Level level, Mess
         log(event);
     }
 
-    private void log(LogEvent event) {
+    public void log(LogEvent event) {
         if (isFiltered(event)) {
             return;
         }

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/net/DatagramOutputStream.java
Patch:
@@ -27,7 +27,6 @@
 import java.net.InetAddress;
 import java.net.SocketException;
 import java.net.UnknownHostException;
-import java.util.Arrays;
 
 /**
  *

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/net/DatagramSocketManager.java
Patch:
@@ -34,7 +34,8 @@ public static DatagramSocketManager getSocketManager(String host, int port) {
         if (port <= 0) {
             throw new IllegalArgumentException("A port value is required");
         }
-        return (DatagramSocketManager) getManager("UDP:" + host +":" + port, factory, new FactoryData(host, port));
+        return (DatagramSocketManager) getManager("UDP:" + host +":" + port, factory,
+            new FactoryData(host, port));
     }
 
     public DatagramSocketManager(OutputStream os, String name, String host, int port) {

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/net/TCPSocketManager.java
Patch:
@@ -66,7 +66,8 @@ public static TCPSocketManager getSocketManager(String host, int port, int delay
     }
 
 
-    public TCPSocketManager(String name, OutputStream os, Socket sock, InetAddress addr, String host, int port, int delay) {
+    public TCPSocketManager(String name, OutputStream os, Socket sock, InetAddress addr, String host, int port,
+                            int delay) {
         super(name, os, addr, host, port);
         this.reconnectionDelay = delay;
         this.socket = sock;

File: log4j2-api/src/main/java/org/apache/logging/log4j/internal/StatusConsoleListener.java
Patch:
@@ -45,7 +45,7 @@ public void setLevel(Level level) {
     }
 
     public void log(StatusData data) {
-        if (data.getLevel().greaterOrEqual(level) && !filtered(data)) {
+        if (data.getLevel().isAtLeastAsSpecificAs(level) && !filtered(data)) {
             System.out.println(data.getFormattedStatus());
         }
     }

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java
Patch:
@@ -34,7 +34,7 @@
  * and then call getBytes which may use a configured encoding or the system
  * default. OTOH, a Writer cannot print byte streams.
  */
-@Plugin(name="Console",type="Core",elementType="appender")
+@Plugin(name="Console",type="Core",elementType="appender",printObject=true)
 public class ConsoleAppender extends OutputStreamAppender {
 
     public static final String LAYOUT = "layout";

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/FileAppender.java
Patch:
@@ -31,7 +31,7 @@
 /**
  *
  */
-@Plugin(name="File",type="Core",elementType="appender")
+@Plugin(name="File",type="Core",elementType="appender",printObject=true)
 public class FileAppender extends OutputStreamAppender {
 
     public static final String FILE_NAME = "fileName";

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/appender/ListAppender.java
Patch:
@@ -32,7 +32,7 @@
  * This appender is primarily used for testing. Use in a real environment is discouraged as the
  * List could eventually grow to cause an OutOfMemoryError.
  */
- @Plugin(name="List",type="Core",elementType="appender")
+ @Plugin(name="List",type="Core",elementType="appender",printObject=true)
 public class ListAppender extends AppenderBase {
 
     private List<LogEvent> events = new ArrayList<LogEvent>();

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/filter/FilterBase.java
Patch:
@@ -40,7 +40,7 @@ public abstract class FilterBase implements Filter, Lifecycle {
 
     protected final Result onMismatch;
 
-    protected static final org.apache.logging.log4j.Logger LOGGER = StatusLogger.getLogger();
+    protected static final org.apache.logging.log4j.Logger logger = StatusLogger.getLogger();
 
     protected static final String ON_MATCH = "onmatch";
     protected static final String ON_MISMATCH = "onmismatch";
@@ -50,8 +50,8 @@ protected FilterBase() {
     }
 
     protected FilterBase(Result onMatch, Result onMismatch) {
-        this.onMatch = onMatch == null ? Result.ACCEPT : onMatch;
-        this.onMismatch = onMismatch == null ? Result.NEUTRAL : onMismatch;
+        this.onMatch = onMatch == null ? Result.NEUTRAL : onMatch;
+        this.onMismatch = onMismatch == null ? Result.DENY : onMismatch;
     }
 
     public void start() {

File: log4j2-core/src/test/java/org/apache/logging/log4j/core/SimplePerfTest.java
Patch:
@@ -98,7 +98,7 @@ public void errorLogger() {
      * but the point is simply to insure that changes made don't suddenly cause performance issues.
      */
     private static boolean overhead(int i, int j) {
-        for (int k=j; k < j+10; ++k) {
+        for (int k=j; k < j+12; ++k) {
             if (i > k) {
                 return true;
             }

File: log4j12-api/src/test/java/org/apache/log4j/LoggerTest.java
Patch:
@@ -442,7 +442,7 @@ private static class CountingAppender extends AppenderBase {
         int counter;
 
         CountingAppender() {
-            super("Counter", null);
+            super("Counter", null, null);
             counter = 0;
         }
 

File: log4j2-api/src/test/java/org/apache/logging/log4j/SimpleLogger.java
Patch:
@@ -39,7 +39,7 @@ public void log(Marker marker, String fqcn, Level level, Message msg, Throwable
         sb.append(level.toString());
         sb.append(" ");
         sb.append(msg.getFormattedMessage());
-        Map<String, Object> mdc = MDC.getContext();
+        Map<String, Object> mdc = ThreadContext.getContext();
         if (mdc.size() > 0) {
             sb.append(" ");
             sb.append(mdc.toString());

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/LogEvent.java
Patch:
@@ -72,6 +72,6 @@ public interface LogEvent {
      * @return A copy of the Nested Diagnostic Context of null;
      * @doubt as mentioned elsewhere, think MDC and NDC should be combined into a thread context object.
      */
-    Stack<Object> getContextStack();
+    Stack<String> getContextStack();
 
 }

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/config/plugins/PluginManager.java
Patch:
@@ -64,7 +64,8 @@ public void collectPlugins() {
         for (Class<?> item : r.getClasses())
         {
             Plugin p = item.getAnnotation(Plugin.class);
-            plugins.put(p.name(), new PluginType(item));
+            String type = p.elementType().equals(Plugin.NULL) ? p.name() : p.elementType();
+            plugins.put(p.name(), new PluginType(item, type, p.printObject()));
         }
     }
 

File: log4j2-api/src/main/java/org/apache/logging/log4j/Level.java
Patch:
@@ -29,6 +29,8 @@
  * Typically, configuring a level in a filter or on a logger will cause logging events of that level and those
  * that are more specific to pass through the filter.
  * A special level, ALL, is guaranteed to capture all levels when used in logging configurations.
+ * @doubt There is not intermediate values available between WARN and INFO for example.  Any reason why the existing log4j values were not retained?
+ * @doubt separating the converter from the type would allow alternative converters for different locales or different logging API's (for example, the same level could be FINER with one converter and TRACE with another.
  */
 public enum Level {
     OFF(0), FATAL(1), ERROR(2), WARN(3), INFO(4), DEBUG(5), TRACE(6), ALL(Integer.MAX_VALUE);

File: log4j2-api/src/main/java/org/apache/logging/log4j/MDC.java
Patch:
@@ -32,6 +32,8 @@
  * <p><b><em>The MDC is managed on a per thread basis</em></b>. A
  * child thread automatically inherits a <em>copy</em> of the mapped
  * diagnostic context of its parent.
+ *
+ * @doubt I'd throw the concept into a ThreadContext object.
  */
 public final class MDC {
 

File: log4j2-api/src/main/java/org/apache/logging/log4j/Marker.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.concurrent.ConcurrentMap;
 
 /**
- *
  */
 public class Marker implements Serializable {
 

File: log4j2-api/src/main/java/org/apache/logging/log4j/NDC.java
Patch:
@@ -83,6 +83,7 @@
  * method. A thread may obtain a copy of its NDC with the {@link
  * #cloneStack cloneStack} method and pass the reference to any other
  * thread, in particular to a child.
+ *  @doubt I'd combine MDC and NDC into a single ThreadContext object.
  */
 public class NDC {
 
@@ -401,4 +402,4 @@ private static class DiagnosticContext {
             }
         }
     }
-}
\ No newline at end of file
+}

File: log4j2-api/src/main/java/org/apache/logging/log4j/message/Message.java
Patch:
@@ -21,6 +21,7 @@
 
 /**
  * An interface for various Message implementations that can be logged.
+ * @doubt Interfaces should rarely extend Serializable according to Effective Java 2nd Ed pg 291.
  */
 public interface Message extends Serializable {
     /**
@@ -34,6 +35,7 @@ public interface Message extends Serializable {
      * Returns the format portion of the Message
      *
      * @return The message format.
+     * @doubt Do all messages have a format?  What syntax?  Using a Formatter object could be cleaner.
      */
     String getMessageFormat();
 
@@ -51,6 +53,7 @@ public interface Message extends Serializable {
      * provide values for. The Message must be able to return a formatted message even if
      * no hints are provided.
      * @return The Message hints.
+     * @doubt would seem to go better into a formatter or format object.
      */
     Map<MessageHint, String> getHints();
 }

File: log4j2-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java
Patch:
@@ -25,7 +25,8 @@
 import org.apache.logging.log4j.message.SimpleMessage;
 
 /**
- *
+ * @doubt See comments on Logger, interface is so complex that unlikely to be independently implemented.
+ *  LogMF/LogSF separates those concerns out of Logger.
  */
 public abstract class AbstractLogger implements Logger {
 

File: log4j2-core/src/main/java/org/apache/logging/log4j/core/Appender.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.List;
 
 /**
- * @bug LOG4J2-36: Appender interface should be refactored
+ * @issue LOG4J2-36: Appender interface should be refactored
  */
 public interface Appender {
     /**
@@ -78,7 +78,7 @@ public interface Appender {
      * Returns this appenders layout.
      *
      * @return the Layout for the Appender or null if none is configured.
-     * @bug LOG4J2-36 Refactor into Channel
+     * @issue LOG4J2-36 Refactor into Channel
      */
     Layout getLayout();
 
@@ -97,7 +97,7 @@ public interface Appender {
      * the appender should return <code>true</code>.
      *
      * @return True if a Layout is required, false otherwise.
-     * @bug LOG4J2-36 Refactor into Channel
+     * @issue LOG4J2-36 Refactor into Channel
      */
     boolean requiresLayout();
 

