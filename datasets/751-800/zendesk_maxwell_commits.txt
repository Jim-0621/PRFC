File: src/main/java/com/zendesk/maxwell/MaxwellCompatibilityError.java
Patch:
@@ -1,5 +1,8 @@
 package com.zendesk.maxwell;
 
+/**
+ * Thrown when Maxwell can't operate with the mysql server configured as it is.
+ */
 public class MaxwellCompatibilityError extends Exception {
 	public MaxwellCompatibilityError(String message) {
 		super(message);

File: src/main/java/com/zendesk/maxwell/producer/AbstractAsyncProducer.java
Patch:
@@ -66,8 +66,7 @@ public AbstractAsyncProducer(MaxwellContext context) {
 	@Override
 	public final void push(RowMap r) throws Exception {
 		Position position = r.getNextPosition();
-		// Rows that do not get sent to a target will be automatically marked as complete.
-		// We will attempt to commit a checkpoint up to the current row.
+		// Rows that do not get sent to the prodcuer will be automatically marked as complete.
 		if(!r.shouldOutput(outputConfig)) {
 			if ( position != null ) {
 				inflightMessages.addMessage(position, r.getTimestampMillis(), 0L);

File: src/main/java/com/zendesk/maxwell/producer/MaxwellOutputConfig.java
Patch:
@@ -24,6 +24,7 @@ public class MaxwellOutputConfig {
 	public String secretKey;
 	public boolean zeroDatesAsNull;
 	public String namingStrategy;
+	public int rowQueryMaxLength;
 	
 	public MaxwellOutputConfig() {
 		this.includesBinlogPosition = false;
@@ -43,6 +44,7 @@ public MaxwellOutputConfig() {
 		this.encryptionMode = EncryptionMode.ENCRYPT_NONE;
 		this.secretKey = null;
 		this.namingStrategy = null;
+		this.rowQueryMaxLength = 0;
 	}
 
 	public boolean encryptionEnabled() {

File: src/main/java/com/zendesk/maxwell/recovery/Recovery.java
Patch:
@@ -75,7 +75,8 @@ public HeartbeatRowMap recover() throws Exception {
 					null,
 					new RecoveryFilter(this.maxwellDatabaseName),
 					new MaxwellOutputConfig(),
-					0.25f // Default memory usage size, not used 
+					0.25f, // Default memory usage size, not used
+					1
 			);
 
 			HeartbeatRowMap h = findHeartbeat(replicator);

File: src/main/java/com/zendesk/maxwell/row/MaxwellJson.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.core.JsonFactory;
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.zendesk.maxwell.scripting.Scripting;
-import jdk.nashorn.api.scripting.ScriptObjectMirror;
+import org.openjdk.nashorn.api.scripting.ScriptObjectMirror;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: src/main/java/com/zendesk/maxwell/schema/Database.java
Patch:
@@ -86,7 +86,7 @@ else if ( recurse )
 	}
 
 	public void diff(List<String> diffs, Database other, String nameA, String nameB) {
-		if ( !this.charset.toLowerCase().equals(other.getCharset().toLowerCase()) ) {
+		if ( !Schema.charsetEquals(this.charset, other.getCharset()) ) {
 			diffs.add("-- Database " + this.getName() + " had different charset: "
 					+ this.getCharset() + " in " + nameA + ", "
 					+ other.getCharset() + " in " + nameB);

File: src/main/java/com/zendesk/maxwell/schema/MysqlSchemaCompactor.java
Patch:
@@ -155,9 +155,11 @@ private void compact(Connection cx) throws SQLException, InvalidSchemaError {
 			update.executeUpdate("update `schemas` set `base_schema_id` = null, `deltas` = null where `id` = " + schemaID);
 
 			commit.execute("COMMIT");
+			LOGGER.info("Committed schema compaction for {}", schemaID);
 		}
 
 		slowDeleteSchemas(cx, schemaID);
+		LOGGER.info("Finished deleting old schemas prior to {}", schemaID);
 	}
 
 	private void slowDeleteSchemas(Connection cx, long newBaseSchemaID) throws SQLException {

File: src/main/java/com/zendesk/maxwell/schema/columndef/DateFormatter.java
Patch:
@@ -1,6 +1,7 @@
 package com.zendesk.maxwell.schema.columndef;
 
 import java.sql.Timestamp;
+import java.time.LocalDateTime;
 import java.util.*;
 
 public class DateFormatter {
@@ -22,6 +23,8 @@ public static Timestamp extractTimestamp(Object value) throws IllegalArgumentExc
 		} else if ( value instanceof Date ) {
 			Long time = ((Date) value).getTime();
 			return new Timestamp(time);
+		}  else if ( value instanceof LocalDateTime) {
+			return Timestamp.valueOf((LocalDateTime) value);
 		} else
 			throw new IllegalArgumentException("couldn't extract date/time out of " + value);
 	}

File: src/main/java/com/zendesk/maxwell/schema/columndef/StringColumnDef.java
Patch:
@@ -72,7 +72,7 @@ public String toSQL(Object value) {
 	// this could obviously be more complete.
 	private Charset charsetForCharset() {
 		switch(charset.toLowerCase()) {
-		case "utf8": case "utf8mb4":
+		case "utf8": case "utf8mb3": case "utf8mb4":
 			return StandardCharsets.UTF_8;
 		case "latin1": case "ascii":
 			return Charset.forName("Windows-1252");

File: src/main/java/com/zendesk/maxwell/schema/ddl/MysqlParserListener.java
Patch:
@@ -199,7 +199,7 @@ public void exitRename_column(Rename_columnContext ctx) {
 	@Override
 	public void exitDrop_column(mysqlParser.Drop_columnContext ctx) {
 		String colName = ctx.full_column_name().col_name.getText();
-		alterStatement().columnMods.add(new RemoveColumnMod(unquote(colName)));
+		alterStatement().columnMods.add(new RemoveColumnMod(unquote(colName), ctx.if_exists() != null));
 	}
 	@Override
 	public void exitCol_position(mysqlParser.Col_positionContext ctx) {

File: src/main/java/com/zendesk/maxwell/util/AbstractConfig.java
Patch:
@@ -114,7 +114,9 @@ protected Properties readPropertiesEnv(String envConfig) {
 				Properties properties = new Properties();
 				for (Map.Entry<String, Object> entry : stringMap.entrySet()) {
 					LOGGER.debug("Got env_config key: {}", entry.getKey());
-					properties.put(entry.getKey(), entry.getValue().toString());
+					if (entry.getKey() != null && entry.getValue() != null) {
+						properties.put(entry.getKey(), entry.getValue().toString());
+					}
 				}
 				return properties;
 			} catch (JsonProcessingException e) {

File: src/test/java/com/zendesk/maxwell/MaxwellTestJSON.java
Patch:
@@ -132,7 +132,7 @@ public static SQLAndJSON parseJSONTestFile(String fname) throws Exception {
 
 			if ( buffer == null ) {
 				if ( line.matches(JSON_PATTERN) ) {
-					line = line.replaceAll("^\\s*\\->\\s*", "");
+					line = line.replaceAll("^\\s*->\\s*", "");
 					bufferIsJSON = true;
 				} else {
 					bufferIsJSON = false;

File: src/test/java/com/zendesk/maxwell/MysqlSavedSchemaTest.java
Patch:
@@ -142,7 +142,7 @@ public void testUpgradeSchemaStore() throws Exception {
 		Connection c = context.getMaxwellConnection();
 		c.createStatement().executeUpdate("alter table `maxwell`.`schemas` drop column deleted, " +
 				"drop column base_schema_id, drop column deltas, drop column version, drop column position_sha");
-		c.createStatement().executeUpdate("alter table maxwell.positions drop column client_id");
+		c.createStatement().executeUpdate("alter table maxwell.positions drop primary key, drop column client_id, add primary key (server_id)");
 		c.createStatement().executeUpdate("alter table maxwell.positions drop column gtid_set");
 		c.createStatement().executeUpdate("alter table maxwell.schemas drop column gtid_set");
 		c.createStatement().executeUpdate("alter table `columns` " +

File: src/test/java/com/zendesk/maxwell/replication/TableCacheTest.java
Patch:
@@ -12,6 +12,6 @@ public void testHaTables() throws Exception {
 		Schema schema = new SchemaCapturer(server.getConnection(), buildContext().getCaseSensitivity()).capture();
 		TableCache cache = new TableCache("maxwell");
 		// ensure we don't crash on not-really-existant alibaba tables
-		cache.processEvent(schema, new Filter(), 1L, "mysql", "ha_health_check");
+		cache.processEvent(schema, new Filter(), false,1L, "mysql", "ha_health_check");
 	}
 }

File: src/test/java/com/zendesk/maxwell/schema/SchemaCaptureTest.java
Patch:
@@ -9,6 +9,7 @@
 import java.nio.file.Paths;
 import java.sql.SQLException;
 import java.util.Collections;
+import java.util.Comparator;
 import java.util.List;
 
 import com.zendesk.maxwell.CaseSensitivity;
@@ -65,6 +66,7 @@ public void testTables() throws SQLException, InvalidSchemaError {
 		assert(shard1DB != null);
 
 		List<String> nameList = shard1DB.getTableNames();
+		nameList.sort(String::compareTo);
 
 		assertEquals("ints:mediumints:minimal:sharded", StringUtils.join(nameList.iterator(), ":"));
 	}

File: src/test/java/com/zendesk/maxwell/schema/columndef/ColumnDefTest.java
Patch:
@@ -469,7 +469,6 @@ public void testInterfaceImmutability() {
 
 					final boolean isFinal = Modifier.isFinal(modifiers);
 					final boolean isPrivate = Modifier.isPrivate(modifiers);
-					System.out.println("Checking " + className + "." + field.getName() + " " + isPrivate);
 
 					// check field immutability
 					if (!isFinal && !isPrivate) {

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLResolverTest.java
Patch:
@@ -91,7 +91,8 @@ public void testCreateTableResolveLike() throws Exception {
 		ResolvedTableCreate rc = c.resolve(getSchema());
 		assertThat(rc.def.getColumnList().size(), is(2));
 		assertThat(rc.def.getPKList().get(0), is("ii"));
-		assertThat(((StringColumnDef) rc.def.getColumnList().get(1)).getCharset(), is("utf8"));
+		String charset = ((StringColumnDef) rc.def.getColumnList().get(1)).getCharset();
+		assertTrue(charset.startsWith("utf8"));
 	}
 
 	@Test

File: src/main/java/com/zendesk/maxwell/MaxwellCompatibilityError.java
Patch:
@@ -1,5 +1,8 @@
 package com.zendesk.maxwell;
 
+/**
+ * Thrown when Maxwell can't operate with the mysql server configured as it is.
+ */
 public class MaxwellCompatibilityError extends Exception {
 	public MaxwellCompatibilityError(String message) {
 		super(message);

File: src/main/java/com/zendesk/maxwell/producer/AbstractAsyncProducer.java
Patch:
@@ -66,8 +66,7 @@ public AbstractAsyncProducer(MaxwellContext context) {
 	@Override
 	public final void push(RowMap r) throws Exception {
 		Position position = r.getNextPosition();
-		// Rows that do not get sent to a target will be automatically marked as complete.
-		// We will attempt to commit a checkpoint up to the current row.
+		// Rows that do not get sent to the prodcuer will be automatically marked as complete.
 		if(!r.shouldOutput(outputConfig)) {
 			if ( position != null ) {
 				inflightMessages.addMessage(position, r.getTimestampMillis(), 0L);

File: src/main/java/com/zendesk/maxwell/producer/MaxwellKafkaProducer.java
Patch:
@@ -265,7 +265,6 @@ void sendAsync(ProducerRecord<String, String> record, Callback callback) {
 	}
 
 	ProducerRecord<String, String> makeProducerRecord(final RowMap r) throws Exception {
-		RowIdentity pk = r.getRowIdentity();
 		String key = r.pkToJson(keyFormat);
 		String value = r.toJSON(outputConfig);
 		ProducerRecord<String, String> record;

File: src/main/java/com/zendesk/maxwell/producer/MaxwellOutputConfig.java
Patch:
@@ -24,6 +24,7 @@ public class MaxwellOutputConfig {
 	public String secretKey;
 	public boolean zeroDatesAsNull;
 	public String namingStrategy;
+	public int rowQueryMaxLength;
 	
 	public MaxwellOutputConfig() {
 		this.includesBinlogPosition = false;
@@ -43,6 +44,7 @@ public MaxwellOutputConfig() {
 		this.encryptionMode = EncryptionMode.ENCRYPT_NONE;
 		this.secretKey = null;
 		this.namingStrategy = null;
+		this.rowQueryMaxLength = 0;
 	}
 
 	public boolean encryptionEnabled() {

File: src/main/java/com/zendesk/maxwell/replication/Replicator.java
Patch:
@@ -1,6 +1,5 @@
 package com.zendesk.maxwell.replication;
 
-import com.zendesk.maxwell.filtering.Filter;
 import com.zendesk.maxwell.row.RowMap;
 import com.zendesk.maxwell.schema.SchemaStoreException;
 import com.zendesk.maxwell.schema.Schema;

File: src/main/java/com/zendesk/maxwell/row/MaxwellJson.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.core.JsonFactory;
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.zendesk.maxwell.scripting.Scripting;
-import jdk.nashorn.api.scripting.ScriptObjectMirror;
+import org.openjdk.nashorn.api.scripting.ScriptObjectMirror;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: src/main/java/com/zendesk/maxwell/schema/AbstractSchemaStore.java
Patch:
@@ -38,9 +38,9 @@ protected AbstractSchemaStore(MaxwellContext context) throws SQLException {
 	}
 
 	protected Schema captureSchema() throws SQLException {
-		try(Connection connection = schemaConnectionPool.getConnection()) {
-			LOGGER.info("Maxwell is capturing initial schema");
-			SchemaCapturer capturer = new SchemaCapturer(connection, caseSensitivity);
+		LOGGER.info("Maxwell is capturing initial schema");
+		try(Connection connection = schemaConnectionPool.getConnection();
+			SchemaCapturer capturer = new SchemaCapturer(connection, caseSensitivity)) {
 			return capturer.capture();
 		}
 	}

File: src/main/java/com/zendesk/maxwell/schema/Database.java
Patch:
@@ -86,7 +86,7 @@ else if ( recurse )
 	}
 
 	public void diff(List<String> diffs, Database other, String nameA, String nameB) {
-		if ( !this.charset.toLowerCase().equals(other.getCharset().toLowerCase()) ) {
+		if ( !Schema.charsetEquals(this.charset, other.getCharset()) ) {
 			diffs.add("-- Database " + this.getName() + " had different charset: "
 					+ this.getCharset() + " in " + nameA + ", "
 					+ other.getCharset() + " in " + nameB);

File: src/main/java/com/zendesk/maxwell/schema/MysqlSchemaStore.java
Patch:
@@ -88,9 +88,9 @@ public MysqlSavedSchema captureAndSaveSchema() throws SQLException {
 				} else {
 					// The capture time might be long and the conn connection might be closed already. Consulting the pool
 					// again for a new connection
-					Connection newConn = maxwellConnectionPool.getConnection();
-					savedSchema.save(newConn);
-					newConn.close();
+					try ( Connection newConn = maxwellConnectionPool.getConnection() ) {
+						savedSchema.save(newConn);
+					}
 				}
 			return savedSchema;
 		}

File: src/main/java/com/zendesk/maxwell/schema/columndef/ColumnDefSerializer.java
Patch:
@@ -12,7 +12,7 @@ public class ColumnDefSerializer extends JsonSerializer<ColumnDef> {
 	public void serialize(ColumnDef def, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
 		jgen.writeStartObject();
 		jgen.writeStringField("type", def.getType());
-		jgen.writeStringField("name", def.name);
+		jgen.writeStringField("name", def.getName());
 
 		if ( def instanceof StringColumnDef ) {
 			jgen.writeStringField("charset", ((StringColumnDef) def).getCharset());

File: src/main/java/com/zendesk/maxwell/schema/ddl/MysqlParserListener.java
Patch:
@@ -199,7 +199,7 @@ public void exitRename_column(Rename_columnContext ctx) {
 	@Override
 	public void exitDrop_column(mysqlParser.Drop_columnContext ctx) {
 		String colName = ctx.full_column_name().col_name.getText();
-		alterStatement().columnMods.add(new RemoveColumnMod(unquote(colName)));
+		alterStatement().columnMods.add(new RemoveColumnMod(unquote(colName), ctx.if_exists() != null));
 	}
 	@Override
 	public void exitCol_position(mysqlParser.Col_positionContext ctx) {

File: src/main/java/com/zendesk/maxwell/schema/ddl/ResolvedDatabaseDrop.java
Patch:
@@ -14,7 +14,7 @@ public ResolvedDatabaseDrop(String database) {
 	@Override
 	public void apply(Schema schema) throws InvalidSchemaError {
 		Database d = schema.findDatabaseOrThrow(database);
-		schema.getDatabases().remove(d);
+		schema.removeDatabase(d);
 	}
 
 	@Override

File: src/main/java/com/zendesk/maxwell/schema/ddl/TableAlter.java
Patch:
@@ -59,8 +59,9 @@ public ResolvedTableAlter resolve(Schema schema) throws InvalidSchemaError {
 
 		if ( convertCharset != null ) {
 			for ( StringColumnDef sc : table.getStringColumns() ) {
-				if (sc.getCharset() == null || !sc.getCharset().toLowerCase().equals("binary") )
-					sc.setCharset(convertCharset);
+				if (sc.getCharset() == null || !sc.getCharset().toLowerCase().equals("binary") ) {
+					table.replaceColumn(sc.getPos(), sc.withCharset(convertCharset));
+				}
 			}
 		}
 

File: src/main/java/com/zendesk/maxwell/util/AbstractConfig.java
Patch:
@@ -114,7 +114,9 @@ protected Properties readPropertiesEnv(String envConfig) {
 				Properties properties = new Properties();
 				for (Map.Entry<String, Object> entry : stringMap.entrySet()) {
 					LOGGER.debug("Got env_config key: {}", entry.getKey());
-					properties.put(entry.getKey(), entry.getValue().toString());
+					if (entry.getKey() != null && entry.getValue() != null) {
+						properties.put(entry.getKey(), entry.getValue().toString());
+					}
 				}
 				return properties;
 			} catch (JsonProcessingException e) {

File: src/test/java/com/zendesk/maxwell/MaxwellTestJSON.java
Patch:
@@ -132,7 +132,7 @@ public static SQLAndJSON parseJSONTestFile(String fname) throws Exception {
 
 			if ( buffer == null ) {
 				if ( line.matches(JSON_PATTERN) ) {
-					line = line.replaceAll("^\\s*\\->\\s*", "");
+					line = line.replaceAll("^\\s*->\\s*", "");
 					bufferIsJSON = true;
 				} else {
 					bufferIsJSON = false;

File: src/test/java/com/zendesk/maxwell/replication/TableCacheTest.java
Patch:
@@ -12,6 +12,6 @@ public void testHaTables() throws Exception {
 		Schema schema = new SchemaCapturer(server.getConnection(), buildContext().getCaseSensitivity()).capture();
 		TableCache cache = new TableCache("maxwell");
 		// ensure we don't crash on not-really-existant alibaba tables
-		cache.processEvent(schema, new Filter(), 1L, "mysql", "ha_health_check");
+		cache.processEvent(schema, new Filter(), false,1L, "mysql", "ha_health_check");
 	}
 }

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLResolverTest.java
Patch:
@@ -91,7 +91,8 @@ public void testCreateTableResolveLike() throws Exception {
 		ResolvedTableCreate rc = c.resolve(getSchema());
 		assertThat(rc.def.getColumnList().size(), is(2));
 		assertThat(rc.def.getPKList().get(0), is("ii"));
-		assertThat(((StringColumnDef) rc.def.getColumnList().get(1)).getCharset(), is("utf8"));
+		String charset = ((StringColumnDef) rc.def.getColumnList().get(1)).getCharset();
+		assertTrue(charset.startsWith("utf8"));
 	}
 
 	@Test

File: src/main/java/com/zendesk/maxwell/MaxwellCompatibilityError.java
Patch:
@@ -1,5 +1,8 @@
 package com.zendesk.maxwell;
 
+/**
+ * Thrown when Maxwell can't operate with the mysql server configured as it is.
+ */
 public class MaxwellCompatibilityError extends Exception {
 	public MaxwellCompatibilityError(String message) {
 		super(message);

File: src/main/java/com/zendesk/maxwell/producer/AbstractAsyncProducer.java
Patch:
@@ -66,8 +66,7 @@ public AbstractAsyncProducer(MaxwellContext context) {
 	@Override
 	public final void push(RowMap r) throws Exception {
 		Position position = r.getNextPosition();
-		// Rows that do not get sent to a target will be automatically marked as complete.
-		// We will attempt to commit a checkpoint up to the current row.
+		// Rows that do not get sent to the prodcuer will be automatically marked as complete.
 		if(!r.shouldOutput(outputConfig)) {
 			if ( position != null ) {
 				inflightMessages.addMessage(position, r.getTimestampMillis(), 0L);

File: src/main/java/com/zendesk/maxwell/producer/MaxwellKafkaProducer.java
Patch:
@@ -265,7 +265,6 @@ void sendAsync(ProducerRecord<String, String> record, Callback callback) {
 	}
 
 	ProducerRecord<String, String> makeProducerRecord(final RowMap r) throws Exception {
-		RowIdentity pk = r.getRowIdentity();
 		String key = r.pkToJson(keyFormat);
 		String value = r.toJSON(outputConfig);
 		ProducerRecord<String, String> record;

File: src/main/java/com/zendesk/maxwell/producer/MaxwellOutputConfig.java
Patch:
@@ -24,6 +24,7 @@ public class MaxwellOutputConfig {
 	public String secretKey;
 	public boolean zeroDatesAsNull;
 	public String namingStrategy;
+	public int rowQueryMaxLength;
 	
 	public MaxwellOutputConfig() {
 		this.includesBinlogPosition = false;
@@ -43,6 +44,7 @@ public MaxwellOutputConfig() {
 		this.encryptionMode = EncryptionMode.ENCRYPT_NONE;
 		this.secretKey = null;
 		this.namingStrategy = null;
+		this.rowQueryMaxLength = 0;
 	}
 
 	public boolean encryptionEnabled() {

File: src/main/java/com/zendesk/maxwell/replication/Replicator.java
Patch:
@@ -1,6 +1,5 @@
 package com.zendesk.maxwell.replication;
 
-import com.zendesk.maxwell.filtering.Filter;
 import com.zendesk.maxwell.row.RowMap;
 import com.zendesk.maxwell.schema.SchemaStoreException;
 import com.zendesk.maxwell.schema.Schema;

File: src/main/java/com/zendesk/maxwell/row/MaxwellJson.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.core.JsonFactory;
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.zendesk.maxwell.scripting.Scripting;
-import jdk.nashorn.api.scripting.ScriptObjectMirror;
+import org.openjdk.nashorn.api.scripting.ScriptObjectMirror;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: src/main/java/com/zendesk/maxwell/schema/AbstractSchemaStore.java
Patch:
@@ -38,9 +38,9 @@ protected AbstractSchemaStore(MaxwellContext context) throws SQLException {
 	}
 
 	protected Schema captureSchema() throws SQLException {
-		try(Connection connection = schemaConnectionPool.getConnection()) {
-			LOGGER.info("Maxwell is capturing initial schema");
-			SchemaCapturer capturer = new SchemaCapturer(connection, caseSensitivity);
+		LOGGER.info("Maxwell is capturing initial schema");
+		try(Connection connection = schemaConnectionPool.getConnection();
+			SchemaCapturer capturer = new SchemaCapturer(connection, caseSensitivity)) {
 			return capturer.capture();
 		}
 	}

File: src/main/java/com/zendesk/maxwell/schema/Database.java
Patch:
@@ -86,7 +86,7 @@ else if ( recurse )
 	}
 
 	public void diff(List<String> diffs, Database other, String nameA, String nameB) {
-		if ( !this.charset.toLowerCase().equals(other.getCharset().toLowerCase()) ) {
+		if ( !Schema.charsetEquals(this.charset, other.getCharset()) ) {
 			diffs.add("-- Database " + this.getName() + " had different charset: "
 					+ this.getCharset() + " in " + nameA + ", "
 					+ other.getCharset() + " in " + nameB);

File: src/main/java/com/zendesk/maxwell/schema/MysqlSchemaStore.java
Patch:
@@ -88,9 +88,9 @@ public MysqlSavedSchema captureAndSaveSchema() throws SQLException {
 				} else {
 					// The capture time might be long and the conn connection might be closed already. Consulting the pool
 					// again for a new connection
-					Connection newConn = maxwellConnectionPool.getConnection();
-					savedSchema.save(newConn);
-					newConn.close();
+					try ( Connection newConn = maxwellConnectionPool.getConnection() ) {
+						savedSchema.save(newConn);
+					}
 				}
 			return savedSchema;
 		}

File: src/main/java/com/zendesk/maxwell/schema/columndef/ColumnDefSerializer.java
Patch:
@@ -12,7 +12,7 @@ public class ColumnDefSerializer extends JsonSerializer<ColumnDef> {
 	public void serialize(ColumnDef def, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
 		jgen.writeStartObject();
 		jgen.writeStringField("type", def.getType());
-		jgen.writeStringField("name", def.name);
+		jgen.writeStringField("name", def.getName());
 
 		if ( def instanceof StringColumnDef ) {
 			jgen.writeStringField("charset", ((StringColumnDef) def).getCharset());

File: src/main/java/com/zendesk/maxwell/schema/ddl/MysqlParserListener.java
Patch:
@@ -199,7 +199,7 @@ public void exitRename_column(Rename_columnContext ctx) {
 	@Override
 	public void exitDrop_column(mysqlParser.Drop_columnContext ctx) {
 		String colName = ctx.full_column_name().col_name.getText();
-		alterStatement().columnMods.add(new RemoveColumnMod(unquote(colName)));
+		alterStatement().columnMods.add(new RemoveColumnMod(unquote(colName), ctx.if_exists() != null));
 	}
 	@Override
 	public void exitCol_position(mysqlParser.Col_positionContext ctx) {

File: src/main/java/com/zendesk/maxwell/schema/ddl/ResolvedDatabaseDrop.java
Patch:
@@ -14,7 +14,7 @@ public ResolvedDatabaseDrop(String database) {
 	@Override
 	public void apply(Schema schema) throws InvalidSchemaError {
 		Database d = schema.findDatabaseOrThrow(database);
-		schema.getDatabases().remove(d);
+		schema.removeDatabase(d);
 	}
 
 	@Override

File: src/main/java/com/zendesk/maxwell/schema/ddl/TableAlter.java
Patch:
@@ -59,8 +59,9 @@ public ResolvedTableAlter resolve(Schema schema) throws InvalidSchemaError {
 
 		if ( convertCharset != null ) {
 			for ( StringColumnDef sc : table.getStringColumns() ) {
-				if (sc.getCharset() == null || !sc.getCharset().toLowerCase().equals("binary") )
-					sc.setCharset(convertCharset);
+				if (sc.getCharset() == null || !sc.getCharset().toLowerCase().equals("binary") ) {
+					table.replaceColumn(sc.getPos(), sc.withCharset(convertCharset));
+				}
 			}
 		}
 

File: src/main/java/com/zendesk/maxwell/util/AbstractConfig.java
Patch:
@@ -114,7 +114,9 @@ protected Properties readPropertiesEnv(String envConfig) {
 				Properties properties = new Properties();
 				for (Map.Entry<String, Object> entry : stringMap.entrySet()) {
 					LOGGER.debug("Got env_config key: {}", entry.getKey());
-					properties.put(entry.getKey(), entry.getValue().toString());
+					if (entry.getKey() != null && entry.getValue() != null) {
+						properties.put(entry.getKey(), entry.getValue().toString());
+					}
 				}
 				return properties;
 			} catch (JsonProcessingException e) {

File: src/test/java/com/zendesk/maxwell/MaxwellTestJSON.java
Patch:
@@ -132,7 +132,7 @@ public static SQLAndJSON parseJSONTestFile(String fname) throws Exception {
 
 			if ( buffer == null ) {
 				if ( line.matches(JSON_PATTERN) ) {
-					line = line.replaceAll("^\\s*\\->\\s*", "");
+					line = line.replaceAll("^\\s*->\\s*", "");
 					bufferIsJSON = true;
 				} else {
 					bufferIsJSON = false;

File: src/test/java/com/zendesk/maxwell/replication/TableCacheTest.java
Patch:
@@ -12,6 +12,6 @@ public void testHaTables() throws Exception {
 		Schema schema = new SchemaCapturer(server.getConnection(), buildContext().getCaseSensitivity()).capture();
 		TableCache cache = new TableCache("maxwell");
 		// ensure we don't crash on not-really-existant alibaba tables
-		cache.processEvent(schema, new Filter(), 1L, "mysql", "ha_health_check");
+		cache.processEvent(schema, new Filter(), false,1L, "mysql", "ha_health_check");
 	}
 }

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLResolverTest.java
Patch:
@@ -91,7 +91,8 @@ public void testCreateTableResolveLike() throws Exception {
 		ResolvedTableCreate rc = c.resolve(getSchema());
 		assertThat(rc.def.getColumnList().size(), is(2));
 		assertThat(rc.def.getPKList().get(0), is("ii"));
-		assertThat(((StringColumnDef) rc.def.getColumnList().get(1)).getCharset(), is("utf8"));
+		String charset = ((StringColumnDef) rc.def.getColumnList().get(1)).getCharset();
+		assertTrue(charset.startsWith("utf8"));
 	}
 
 	@Test

File: src/main/java/com/zendesk/maxwell/MaxwellCompatibilityError.java
Patch:
@@ -1,5 +1,8 @@
 package com.zendesk.maxwell;
 
+/**
+ * Thrown when Maxwell can't operate with the mysql server configured as it is.
+ */
 public class MaxwellCompatibilityError extends Exception {
 	public MaxwellCompatibilityError(String message) {
 		super(message);

File: src/main/java/com/zendesk/maxwell/producer/AbstractAsyncProducer.java
Patch:
@@ -66,8 +66,7 @@ public AbstractAsyncProducer(MaxwellContext context) {
 	@Override
 	public final void push(RowMap r) throws Exception {
 		Position position = r.getNextPosition();
-		// Rows that do not get sent to a target will be automatically marked as complete.
-		// We will attempt to commit a checkpoint up to the current row.
+		// Rows that do not get sent to the prodcuer will be automatically marked as complete.
 		if(!r.shouldOutput(outputConfig)) {
 			if ( position != null ) {
 				inflightMessages.addMessage(position, r.getTimestampMillis(), 0L);

File: src/main/java/com/zendesk/maxwell/producer/MaxwellOutputConfig.java
Patch:
@@ -24,6 +24,7 @@ public class MaxwellOutputConfig {
 	public String secretKey;
 	public boolean zeroDatesAsNull;
 	public String namingStrategy;
+	public int rowQueryMaxLength;
 	
 	public MaxwellOutputConfig() {
 		this.includesBinlogPosition = false;
@@ -43,6 +44,7 @@ public MaxwellOutputConfig() {
 		this.encryptionMode = EncryptionMode.ENCRYPT_NONE;
 		this.secretKey = null;
 		this.namingStrategy = null;
+		this.rowQueryMaxLength = 0;
 	}
 
 	public boolean encryptionEnabled() {

File: src/main/java/com/zendesk/maxwell/producer/NatsProducer.java
Patch:
@@ -59,7 +59,7 @@ public void push(RowMap r) throws Exception {
 			context.setPosition(r.getNextPosition());
 		}
 		if (LOGGER.isDebugEnabled()) {
-			LOGGER.debug("->  nats subject:" + natsSubject + ", message:" + value);
+			LOGGER.debug("->  nats subject:{}, message:{}", natsSubject, value);
 		}
 	}
 }

File: src/main/java/com/zendesk/maxwell/replication/Replicator.java
Patch:
@@ -1,6 +1,5 @@
 package com.zendesk.maxwell.replication;
 
-import com.zendesk.maxwell.filtering.Filter;
 import com.zendesk.maxwell.row.RowMap;
 import com.zendesk.maxwell.schema.SchemaStoreException;
 import com.zendesk.maxwell.schema.Schema;

File: src/main/java/com/zendesk/maxwell/row/MaxwellJson.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.core.JsonFactory;
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.zendesk.maxwell.scripting.Scripting;
-import jdk.nashorn.api.scripting.ScriptObjectMirror;
+import org.openjdk.nashorn.api.scripting.ScriptObjectMirror;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: src/main/java/com/zendesk/maxwell/row/RowMapBuffer.java
Patch:
@@ -55,7 +55,7 @@ protected RowMap evict() throws IOException {
 		this.outputStreamCacheSize += r.getApproximateSize();
 		if ( this.outputStreamCacheSize > FlushOutputStreamBytes ) {
 			resetOutputStreamCaches();
-			LOGGER.debug("outputStreamCacheSize: " + this.outputStreamCacheSize + ", memorySize: " + this.memorySize);
+			LOGGER.debug("outputStreamCacheSize: {}, memorySize: {}", this.outputStreamCacheSize, this.memorySize);
 			this.outputStreamCacheSize = 0;
 		}
 

File: src/main/java/com/zendesk/maxwell/schema/AbstractSchemaStore.java
Patch:
@@ -38,9 +38,9 @@ protected AbstractSchemaStore(MaxwellContext context) throws SQLException {
 	}
 
 	protected Schema captureSchema() throws SQLException {
-		try(Connection connection = schemaConnectionPool.getConnection()) {
-			LOGGER.info("Maxwell is capturing initial schema");
-			SchemaCapturer capturer = new SchemaCapturer(connection, caseSensitivity);
+		LOGGER.info("Maxwell is capturing initial schema");
+		try(Connection connection = schemaConnectionPool.getConnection();
+			SchemaCapturer capturer = new SchemaCapturer(connection, caseSensitivity)) {
 			return capturer.capture();
 		}
 	}

File: src/main/java/com/zendesk/maxwell/schema/Database.java
Patch:
@@ -86,7 +86,7 @@ else if ( recurse )
 	}
 
 	public void diff(List<String> diffs, Database other, String nameA, String nameB) {
-		if ( !this.charset.toLowerCase().equals(other.getCharset().toLowerCase()) ) {
+		if ( !Schema.charsetEquals(this.charset, other.getCharset()) ) {
 			diffs.add("-- Database " + this.getName() + " had different charset: "
 					+ this.getCharset() + " in " + nameA + ", "
 					+ other.getCharset() + " in " + nameB);

File: src/main/java/com/zendesk/maxwell/schema/MysqlSchemaStore.java
Patch:
@@ -88,9 +88,9 @@ public MysqlSavedSchema captureAndSaveSchema() throws SQLException {
 				} else {
 					// The capture time might be long and the conn connection might be closed already. Consulting the pool
 					// again for a new connection
-					Connection newConn = maxwellConnectionPool.getConnection();
-					savedSchema.save(newConn);
-					newConn.close();
+					try ( Connection newConn = maxwellConnectionPool.getConnection() ) {
+						savedSchema.save(newConn);
+					}
 				}
 			return savedSchema;
 		}

File: src/main/java/com/zendesk/maxwell/schema/columndef/ColumnDefSerializer.java
Patch:
@@ -12,7 +12,7 @@ public class ColumnDefSerializer extends JsonSerializer<ColumnDef> {
 	public void serialize(ColumnDef def, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
 		jgen.writeStartObject();
 		jgen.writeStringField("type", def.getType());
-		jgen.writeStringField("name", def.name);
+		jgen.writeStringField("name", def.getName());
 
 		if ( def instanceof StringColumnDef ) {
 			jgen.writeStringField("charset", ((StringColumnDef) def).getCharset());

File: src/main/java/com/zendesk/maxwell/schema/ddl/MysqlParserListener.java
Patch:
@@ -199,7 +199,7 @@ public void exitRename_column(Rename_columnContext ctx) {
 	@Override
 	public void exitDrop_column(mysqlParser.Drop_columnContext ctx) {
 		String colName = ctx.full_column_name().col_name.getText();
-		alterStatement().columnMods.add(new RemoveColumnMod(unquote(colName)));
+		alterStatement().columnMods.add(new RemoveColumnMod(unquote(colName), ctx.if_exists() != null));
 	}
 	@Override
 	public void exitCol_position(mysqlParser.Col_positionContext ctx) {

File: src/main/java/com/zendesk/maxwell/schema/ddl/ResolvedDatabaseDrop.java
Patch:
@@ -14,7 +14,7 @@ public ResolvedDatabaseDrop(String database) {
 	@Override
 	public void apply(Schema schema) throws InvalidSchemaError {
 		Database d = schema.findDatabaseOrThrow(database);
-		schema.getDatabases().remove(d);
+		schema.removeDatabase(d);
 	}
 
 	@Override

File: src/main/java/com/zendesk/maxwell/schema/ddl/TableAlter.java
Patch:
@@ -59,8 +59,9 @@ public ResolvedTableAlter resolve(Schema schema) throws InvalidSchemaError {
 
 		if ( convertCharset != null ) {
 			for ( StringColumnDef sc : table.getStringColumns() ) {
-				if (sc.getCharset() == null || !sc.getCharset().toLowerCase().equals("binary") )
-					sc.setCharset(convertCharset);
+				if (sc.getCharset() == null || !sc.getCharset().toLowerCase().equals("binary") ) {
+					table.replaceColumn(sc.getPos(), sc.withCharset(convertCharset));
+				}
 			}
 		}
 

File: src/main/java/com/zendesk/maxwell/util/ListWithDiskBuffer.java
Patch:
@@ -36,7 +36,7 @@ protected boolean shouldBuffer() {
 	}
 
 	protected void resetOutputStreamCaches() throws IOException {
-		LOGGER.debug("Resetting OutputStream caches. elementsInFile: " + elementsInFile);
+		LOGGER.debug("Resetting OutputStream caches. elementsInFile: {}", elementsInFile);
 		os.reset();
 	}
 

File: src/main/java/com/zendesk/maxwell/util/StoppableTaskState.java
Patch:
@@ -20,7 +20,7 @@ public boolean isRunning() {
 	}
 
 	public synchronized void requestStop() {
-		LOGGER.debug(description + " requestStop() called (in state: " + state + ")");
+		LOGGER.debug("{} requestStop() called (in state: {})", description, state);
 		if (isRunning()) {
 			this.state = RunState.REQUEST_STOP;
 		}

File: src/main/java/com/zendesk/maxwell/util/TaskManager.java
Patch:
@@ -51,7 +51,7 @@ public synchronized void stop(Exception error) throws Exception {
 		// then wait for everything to stop
 		Long timeout = 1000L;
 		for (StoppableTask task: this.tasks) {
-			LOGGER.debug("Awaiting stop of: " + task);
+			LOGGER.debug("Awaiting stop of: {}", task);
 			task.awaitStop(timeout);
 		}
 

File: src/test/java/com/zendesk/maxwell/MaxwellTestJSON.java
Patch:
@@ -132,7 +132,7 @@ public static SQLAndJSON parseJSONTestFile(String fname) throws Exception {
 
 			if ( buffer == null ) {
 				if ( line.matches(JSON_PATTERN) ) {
-					line = line.replaceAll("^\\s*\\->\\s*", "");
+					line = line.replaceAll("^\\s*->\\s*", "");
 					bufferIsJSON = true;
 				} else {
 					bufferIsJSON = false;

File: src/test/java/com/zendesk/maxwell/replication/TableCacheTest.java
Patch:
@@ -12,6 +12,6 @@ public void testHaTables() throws Exception {
 		Schema schema = new SchemaCapturer(server.getConnection(), buildContext().getCaseSensitivity()).capture();
 		TableCache cache = new TableCache("maxwell");
 		// ensure we don't crash on not-really-existant alibaba tables
-		cache.processEvent(schema, new Filter(), 1L, "mysql", "ha_health_check");
+		cache.processEvent(schema, new Filter(), false,1L, "mysql", "ha_health_check");
 	}
 }

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLResolverTest.java
Patch:
@@ -91,7 +91,8 @@ public void testCreateTableResolveLike() throws Exception {
 		ResolvedTableCreate rc = c.resolve(getSchema());
 		assertThat(rc.def.getColumnList().size(), is(2));
 		assertThat(rc.def.getPKList().get(0), is("ii"));
-		assertThat(((StringColumnDef) rc.def.getColumnList().get(1)).getCharset(), is("utf8"));
+		String charset = ((StringColumnDef) rc.def.getColumnList().get(1)).getCharset();
+		assertTrue(charset.startsWith("utf8"));
 	}
 
 	@Test

File: src/main/java/com/zendesk/maxwell/bootstrap/MaxwellBootstrapUtilityConfig.java
Patch:
@@ -46,7 +46,7 @@ public String getConnectionURI() {
 
 	public String getReplicationConnectionURI( ) {
 		try {
-			return getConfigtReplicationConnectionURI(replicationMysql);
+			return getConfigReplicationConnectionURI(replicationMysql);
 		} catch (URISyntaxException e) {
 			LOGGER.error(e.getMessage(), e);
 			throw new RuntimeException("Unable to generate bootstrap's replication jdbc connection URI", e);
@@ -65,7 +65,7 @@ private String getConfigConnectionURI(MaxwellMysqlConfig config) throws URISynta
 		return uriBuilder.build().toString();
 	}
 
-	private String getConfigtReplicationConnectionURI(MaxwellMysqlConfig config) throws URISyntaxException {
+	private String getConfigReplicationConnectionURI(MaxwellMysqlConfig config) throws URISyntaxException {
 		URIBuilder uriBuilder = new URIBuilder();
 		uriBuilder.setScheme("jdbc:mysql");
 		uriBuilder.setHost(config.host);

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -777,8 +777,8 @@ protected MaxwellOptionParser buildOptionParser() {
 			.withRequiredArg();
 		parser.accepts("encrypt", "encryption mode: [none|data|all]. default: none" )
 			.withRequiredArg();
-		parser.accepts( "row_query_max_length", "truncates the 'query' field if it is above this length. default: false" )
-			.withOptionalArg().ofType(Boolean.class);
+		parser.accepts( "row_query_max_length", "truncates the 'query' field if it is above this length. default: 0 (disabled)" )
+			.withOptionalArg().ofType(Integer.class);
 
 		parser.section( "filtering" );
 

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLIntegrationTest.java
Patch:
@@ -49,6 +49,7 @@ public void testAlter() throws Exception {
 			"create table shard_1.testDrop ( id int(11) )",
 			"drop table shard_1.testDrop",
 			"create table test.c ( v varchar(255) charset ascii )",
+			"alter table test.c ALGORITHM=COPY, STATS_SAMPLE_PAGES=DEFAULT"
 		};
 		testIntegration(sql);
 	}

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -769,6 +769,8 @@ protected MaxwellOptionParser buildOptionParser() {
 			.withOptionalArg().ofType(Boolean.class);
 		parser.accepts( "output_push_timestamp", "include a microsecond timestamp representing when Maxwell sent a record. default: false" )
 			.withOptionalArg().ofType(Boolean.class);
+		parser.accepts( "output_naming_strategy", "optionally use an alternate name for fields: underscore_to_camelcase" )
+			.withOptionalArg().ofType(String.class);
 		parser.accepts( "exclude_columns", "suppress these comma-separated columns from output" )
 			.withRequiredArg();
 		parser.accepts("secret_key", "The secret key for the AES encryption" )

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLIntegrationTest.java
Patch:
@@ -49,6 +49,7 @@ public void testAlter() throws Exception {
 			"create table shard_1.testDrop ( id int(11) )",
 			"drop table shard_1.testDrop",
 			"create table test.c ( v varchar(255) charset ascii )",
+			"alter table test.c ALGORITHM=COPY, STATS_SAMPLE_PAGES=DEFAULT"
 		};
 		testIntegration(sql);
 	}

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLIntegrationTest.java
Patch:
@@ -39,6 +39,8 @@ public void testAlter() throws Exception {
 			"alter table shard_1.testAlter add column thiswillbeutf16 text, engine=`innodb` CHARACTER SET utf16",
 			"alter table shard_1.testAlter rename to shard_1.`freedonia`",
 			"rename table shard_1.`freedonia` to shard_1.ducksoup, shard_1.ducksoup to shard_1.`nananana`",
+			"rename tables shard_1.`nananana` to shard_1.ducksoup, shard_1.ducksoup to shard_1.`freedonia`",
+			"rename tables shard_1.`freedonia` to shard_1.ducksoup, shard_1.ducksoup to shard_1.`nananana`",
 			"alter table shard_1.nananana drop column barbar",
 
 			"create table shard_2.weird_rename ( str mediumtext )",

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLIntegrationTest.java
Patch:
@@ -39,6 +39,8 @@ public void testAlter() throws Exception {
 			"alter table shard_1.testAlter add column thiswillbeutf16 text, engine=`innodb` CHARACTER SET utf16",
 			"alter table shard_1.testAlter rename to shard_1.`freedonia`",
 			"rename table shard_1.`freedonia` to shard_1.ducksoup, shard_1.ducksoup to shard_1.`nananana`",
+			"rename tables shard_1.`nananana` to shard_1.ducksoup, shard_1.ducksoup to shard_1.`freedonia`",
+			"rename tables shard_1.`freedonia` to shard_1.ducksoup, shard_1.ducksoup to shard_1.`nananana`",
 			"alter table shard_1.nananana drop column barbar",
 
 			"create table shard_2.weird_rename ( str mediumtext )",

File: src/main/java/com/zendesk/maxwell/replication/BinlogConnectorReplicator.java
Patch:
@@ -625,6 +625,9 @@ private RowMapBuffer getTransactionRows(BinlogConnectorEvent beginEvent) throws
 						// Ignore temporary table drop statements inside transactions
 					} else if ( upperCaseSql.startsWith("# DUMMY EVENT")) {
 						// MariaDB injected event
+					} else if ( upperCaseSql.equals("ROLLBACK") ) {
+						LOGGER.debug("rolling back transaction inside binlog.");
+						return new RowMapBuffer(0);
 					} else {
 						LOGGER.warn("Unhandled QueryEvent @ {} inside transaction: {}", event.getPosition().fullPosition(), qe);
 					}

File: src/main/java/com/zendesk/maxwell/replication/BinlogConnectorReplicator.java
Patch:
@@ -625,6 +625,9 @@ private RowMapBuffer getTransactionRows(BinlogConnectorEvent beginEvent) throws
 						// Ignore temporary table drop statements inside transactions
 					} else if ( upperCaseSql.startsWith("# DUMMY EVENT")) {
 						// MariaDB injected event
+					} else if ( upperCaseSql.equals("ROLLBACK") ) {
+						LOGGER.debug("rolling back transaction inside binlog.");
+						return new RowMapBuffer(0);
 					} else {
 						LOGGER.warn("Unhandled QueryEvent @ {} inside transaction: {}", event.getPosition().fullPosition(), qe);
 					}

File: src/main/java/com/zendesk/maxwell/schema/MysqlSavedSchema.java
Patch:
@@ -156,7 +156,7 @@ private Long saveDerivedSchema(Connection conn) throws SQLException {
 			try {
 				deltaString = mapper.writerFor(listOfResolvedSchemaChangeType).writeValueAsString(deltas);
 			} catch ( JsonProcessingException e ) {
-				throw new RuntimeException("Couldn't serialize " + deltas + " to JSON.");
+				throw new RuntimeException("Couldn't serialize " + deltas + " to JSON.", e);
 			}
 			BinlogPosition binlogPosition = position.getBinlogPosition();
 

File: src/main/java/com/zendesk/maxwell/schema/Table.java
Patch:
@@ -250,6 +250,9 @@ public void removeColumn(int idx) {
 	}
 
 	public void renameColumn(int idx, String name) throws InvalidSchemaError {
+		ColumnDef oldColumn = columns.get(idx);
+		renamePKColumn(oldColumn.getName(), name);
+
 		ColumnDef column = columns.get(idx).withName(name);
 		columns.replace(idx, column);
 	}

File: src/main/java/com/zendesk/maxwell/schema/MysqlSavedSchema.java
Patch:
@@ -156,7 +156,7 @@ private Long saveDerivedSchema(Connection conn) throws SQLException {
 			try {
 				deltaString = mapper.writerFor(listOfResolvedSchemaChangeType).writeValueAsString(deltas);
 			} catch ( JsonProcessingException e ) {
-				throw new RuntimeException("Couldn't serialize " + deltas + " to JSON.");
+				throw new RuntimeException("Couldn't serialize " + deltas + " to JSON.", e);
 			}
 			BinlogPosition binlogPosition = position.getBinlogPosition();
 

File: src/main/java/com/zendesk/maxwell/schema/Table.java
Patch:
@@ -250,6 +250,9 @@ public void removeColumn(int idx) {
 	}
 
 	public void renameColumn(int idx, String name) throws InvalidSchemaError {
+		ColumnDef oldColumn = columns.get(idx);
+		renamePKColumn(oldColumn.getName(), name);
+
 		ColumnDef column = columns.get(idx).withName(name);
 		columns.replace(idx, column);
 	}

File: src/main/java/com/zendesk/maxwell/schema/ddl/SchemaChange.java
Patch:
@@ -39,6 +39,7 @@ public abstract class SchemaChange {
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*ANALYZE\\s+TABLE", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*SET\\s+PASSWORD", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(ALTER|CREATE|DROP|RENAME)\\s+USER", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
+		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*ALTER\\s+INSTANCE.*", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(ALTER|CREATE|DROP)\\s+TEMPORARY\\s+TABLE", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(ALTER|CREATE|DROP)\\s+TABLESPACE", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));

File: src/main/java/com/zendesk/maxwell/replication/BinlogConnectorReplicator.java
Patch:
@@ -586,7 +586,6 @@ private RowMapBuffer getTransactionRows(BinlogConnectorEvent beginEvent) throws
 								buffer.add(r);
 							}
 					}
-					currentQuery = null;
 					break;
 				case TABLE_MAP:
 					TableMapEventData data = event.tableMapData();

File: src/main/java/com/zendesk/maxwell/schema/ddl/SchemaChange.java
Patch:
@@ -39,7 +39,7 @@ public abstract class SchemaChange {
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*ANALYZE\\s+TABLE", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*SET\\s+PASSWORD", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(ALTER|CREATE|DROP|RENAME)\\s+USER", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
-		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*ALTER\\s+INSTANCE\\s+(ROTATE INNODB MASTER KEY|ROTATE BINLOG MASTER KEY|RELOAD TLS)", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
+		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*ALTER\\s+INSTANCE.*", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(ALTER|CREATE|DROP)\\s+TEMPORARY\\s+TABLE", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(ALTER|CREATE|DROP)\\s+TABLESPACE", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -261,7 +261,8 @@ public void testParsingSomeAlters() {
 			"ALTER TABLE t1 DROP CONSTRAINT ck",
 			"ALTER TABLE t1 DROP CHECK ck",
 			"create table test ( i float default -1. )",
-			"alter database d ENCRYPTION='Y'"
+			"alter database d ENCRYPTION='Y'",
+			"ALTER TABLE t1 ADD COLUMN IF NOT EXISTS c1 TINYINT"
 		};
 
 		for ( String s : testSQL ) {

File: src/main/java/com/zendesk/maxwell/schema/ddl/SchemaChange.java
Patch:
@@ -39,6 +39,7 @@ public abstract class SchemaChange {
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*ANALYZE\\s+TABLE", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*SET\\s+PASSWORD", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(ALTER|CREATE|DROP|RENAME)\\s+USER", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
+		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*ALTER\\s+INSTANCE\\s+(ROTATE INNODB MASTER KEY|ROTATE BINLOG MASTER KEY|RELOAD TLS)", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(ALTER|CREATE|DROP)\\s+TEMPORARY\\s+TABLE", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(ALTER|CREATE|DROP)\\s+TABLESPACE", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -343,13 +343,14 @@ public void run() {
 		} catch ( URISyntaxException e ) {
 			// catch URISyntaxException explicitly as well to provide more information to the user
 			LOGGER.error("Syntax issue with URI, check for misconfigured host, port, database, or JDBC options (see RFC 2396)");
-			LOGGER.error("URISyntaxException: " + e.getLocalizedMessage());
+			LOGGER.error("URISyntaxException: " + e.getLocalizedMessage(), e);
 			System.exit(1);
 		} catch ( ServerException e ) {
-			LOGGER.error("Maxwell couldn't find the requested binlog, exiting...");
+			LOGGER.error("Maxwell couldn't find the requested binlog, exiting...", e);
 			System.exit(2);
 		} catch ( Exception e ) {
 			e.printStackTrace();
+			LOGGER.error("Maxwell saw an exception and is exiting...", e);
 			System.exit(1);
 		}
 	}

File: src/main/java/com/zendesk/maxwell/util/AbstractConfig.java
Patch:
@@ -114,7 +114,9 @@ protected Properties readPropertiesEnv(String envConfig) {
 				Properties properties = new Properties();
 				for (Map.Entry<String, Object> entry : stringMap.entrySet()) {
 					LOGGER.debug("Got env_config key: {}", entry.getKey());
-					properties.put(entry.getKey(), entry.getValue().toString());
+					if (entry.getKey() != null && entry.getValue() != null) {
+						properties.put(entry.getKey(), entry.getValue().toString());
+					}
 				}
 				return properties;
 			} catch (JsonProcessingException e) {

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -343,13 +343,14 @@ public void run() {
 		} catch ( URISyntaxException e ) {
 			// catch URISyntaxException explicitly as well to provide more information to the user
 			LOGGER.error("Syntax issue with URI, check for misconfigured host, port, database, or JDBC options (see RFC 2396)");
-			LOGGER.error("URISyntaxException: " + e.getLocalizedMessage());
+			LOGGER.error("URISyntaxException: " + e.getLocalizedMessage(), e);
 			System.exit(1);
 		} catch ( ServerException e ) {
-			LOGGER.error("Maxwell couldn't find the requested binlog, exiting...");
+			LOGGER.error("Maxwell couldn't find the requested binlog, exiting...", e);
 			System.exit(2);
 		} catch ( Exception e ) {
 			e.printStackTrace();
+			LOGGER.error("Maxwell saw an exception and is exiting...", e);
 			System.exit(1);
 		}
 	}

File: src/main/java/com/zendesk/maxwell/util/AbstractConfig.java
Patch:
@@ -114,7 +114,9 @@ protected Properties readPropertiesEnv(String envConfig) {
 				Properties properties = new Properties();
 				for (Map.Entry<String, Object> entry : stringMap.entrySet()) {
 					LOGGER.debug("Got env_config key: {}", entry.getKey());
-					properties.put(entry.getKey(), entry.getValue().toString());
+					if (entry.getKey() != null && entry.getValue() != null) {
+						properties.put(entry.getKey(), entry.getValue().toString());
+					}
 				}
 				return properties;
 			} catch (JsonProcessingException e) {

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -1074,7 +1074,7 @@ private void setup(OptionSet options, Properties properties) {
 		this.pubsubMessageOrderingKey			= fetchStringOption("pubsub_message_ordering_key", options, properties, null);
 		this.pubsubPublishDelayThreshold		= Duration.ofMillis(fetchLongOption("pubsub_publish_delay_threshold", options, properties, 1L));
 		this.pubsubRetryDelay 					= Duration.ofMillis(fetchLongOption("pubsub_retry_delay", options, properties, 100L));
-		this.pubsubRetryDelayMultiplier 		= fetchFloatOption("pubsub_retry_delay_multiplier", options, properties, 1.0f);
+		this.pubsubRetryDelayMultiplier 		= fetchFloatOption("pubsub_retry_delay_multiplier", options, properties, 1.3f);
 		this.pubsubMaxRetryDelay 		 		= Duration.ofSeconds(fetchLongOption("pubsub_max_retry_delay", options, properties, 60L));
 		this.pubsubInitialRpcTimeout 		 	= Duration.ofSeconds(fetchLongOption("pubsub_initial_rpc_timeout", options, properties, 5L));
 		this.pubsubRpcTimeoutMultiplier 		= fetchFloatOption("pubsub_rpc_timeout_multiplier", options, properties, 1.0f);

File: src/main/java/com/zendesk/maxwell/schema/ddl/SchemaChange.java
Patch:
@@ -60,7 +60,7 @@ private static boolean matchesBlacklist(String sql) {
 		// now strip out comments
 		sql = CSTYLE_COMMENTS.matcher(sql).replaceAll("");
 		sql = sql.replaceAll("\\-\\-.*", "");
-		sql = sql.replaceAll("^\\s*#.*", "");
+		sql = Pattern.compile("^\\s*#.*", Pattern.MULTILINE).matcher(sql).replaceAll("");
 
 		// SET STATEMENT .. FOR syntax can be applied to BLACKLIST element, just omit for tesing purposes
 		sql = SET_STATEMENT.matcher(sql).replaceAll("");

File: src/main/java/com/zendesk/maxwell/schema/PositionStoreThread.java
Patch:
@@ -114,10 +114,9 @@ public synchronized void setPosition(Position p) {
 		if ( context.isMariaDB() && position != null ) {
 			BinlogPosition bp = p.getBinlogPosition();
 			if ( bp.getGtid() != null ) {
-				position = position.addGtid(bp.getGtid(), bp.getOffset(), bp.getFile());
-			} else {
-				position = p;
+				bp.mergeGtids(position.getBinlogPosition().getGtidSet());
 			}
+			position = p;
 		} else if ( position == null || p.newerThan(position) ) {
 			position = p;
 			if (storedPosition == null) {

File: src/main/java/com/zendesk/maxwell/schema/ddl/SchemaChange.java
Patch:
@@ -41,6 +41,7 @@ public abstract class SchemaChange {
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(ALTER|CREATE|DROP)\\s+TEMPORARY\\s+TABLE", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(ALTER|CREATE|DROP)\\s+TABLESPACE", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(SET|DROP|CREATE)\\s+(DEFAULT\\s+)?ROLE", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
+		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*SET\\s+STATEMENT", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*TRUNCATE\\s+", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*OPTIMIZE\\s+", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -297,7 +297,8 @@ public void testSQLBlacklist() {
 			"SET DEFAULT ROLE administrator, developer TO 'joe'@'10.0.0.1'",
 			"DROP ROLE 'role1'",
 			"#comment\ndrop procedure if exists `foo`",
-			"/* some \n mulitline\n comment */ drop procedure if exists foo"
+			"/* some \n mulitline\n comment */ drop procedure if exists foo",
+			"SET STATEMENT max_statement_time = 60 FOR flush table"
 		};
 
 		for ( String s : testSQL ) {

File: src/main/java/com/zendesk/maxwell/schema/ddl/SchemaChange.java
Patch:
@@ -58,7 +58,7 @@ private static boolean matchesBlacklist(String sql) {
 		// now strip out comments
 		sql = CSTYLE_COMMENTS.matcher(sql).replaceAll("");
 		sql = sql.replaceAll("\\-\\-.*", "");
-		sql = sql.replaceAll("^\\s*#.*", "");
+		sql = Pattern.compile("^\\s*#.*", Pattern.MULTILINE).matcher(sql).replaceAll("");
 
 		for (Pattern p : SQL_BLACKLIST) {
 			if (p.matcher(sql).find()) {

File: src/test/java/com/zendesk/maxwell/schema/SchemaCaptureTest.java
Patch:
@@ -9,6 +9,7 @@
 import java.nio.file.Paths;
 import java.sql.SQLException;
 import java.util.Collections;
+import java.util.Comparator;
 import java.util.List;
 
 import com.zendesk.maxwell.CaseSensitivity;
@@ -65,6 +66,7 @@ public void testTables() throws SQLException, InvalidSchemaError {
 		assert(shard1DB != null);
 
 		List<String> nameList = shard1DB.getTableNames();
+		nameList.sort(String::compareTo);
 
 		assertEquals("ints:mediumints:minimal:sharded", StringUtils.join(nameList.iterator(), ":"));
 	}

File: src/main/java/com/zendesk/maxwell/schema/Database.java
Patch:
@@ -86,7 +86,7 @@ else if ( recurse )
 	}
 
 	public void diff(List<String> diffs, Database other, String nameA, String nameB) {
-		if ( !this.charset.toLowerCase().equals(other.getCharset().toLowerCase()) ) {
+		if ( !Schema.charsetEquals(this.charset, other.getCharset()) ) {
 			diffs.add("-- Database " + this.getName() + " had different charset: "
 					+ this.getCharset() + " in " + nameA + ", "
 					+ other.getCharset() + " in " + nameB);

File: src/main/java/com/zendesk/maxwell/schema/Table.java
Patch:
@@ -156,7 +156,7 @@ private void diffColumnList(List<String> diffs, Table a, Table b, String nameA,
 					stringA = (StringColumnDef) column;
 					stringB = (StringColumnDef) other;
 
-					if ( !Objects.equals(stringA.getCharset(), stringB.getCharset()) ) {
+					if ( !Schema.charsetEquals(stringA.getCharset(), stringB.getCharset()) ) {
 						diffs.add(colName + "has an charset mismatch, "
 								+ "'" + stringA.getCharset() + "'"
 								+ " vs "
@@ -200,7 +200,7 @@ public String fullName() {
 	}
 
 	public void diff(List<String> diffs, Table other, String nameA, String nameB) {
-		if ( !this.getCharset().equals(other.getCharset()) ) {
+		if ( !Schema.charsetEquals(this.charset, other.getCharset()) ) {
 			diffs.add(this.fullName() + " differs in charset: "
 					  + nameA + " is " + this.getCharset() + " but "
 					  + nameB + " is " + other.getCharset());

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLIntegrationTest.java
Patch:
@@ -5,6 +5,7 @@
 import com.zendesk.maxwell.replication.MysqlVersion;
 import com.zendesk.maxwell.row.RowMap;
 import org.junit.Test;
+import static org.junit.Assume.assumeFalse;
 
 import org.junit.experimental.categories.Category;
 
@@ -92,6 +93,8 @@ public void testDrop() throws Exception {
 	@Test
 	public void testJSON() throws Exception {
 		requireMinimumVersion(server.VERSION_5_7);
+		assumeFalse(MysqlIsolatedServer.getVersion().isMariaDB);
+
 		String sql[] = {
 			"create table shard_1.testJSON ( j json )",
 		};

File: src/main/java/com/zendesk/maxwell/producer/MaxwellPubsubProducer.java
Patch:
@@ -239,9 +239,9 @@ public void sendAsync(RowMap r, AbstractAsyncProducer.CallbackCompleter cc)
     if (this.messageOrderingKeyInterpolator != null) {
       String orderingKey = this.messageOrderingKeyInterpolator.generateFromRowMapAndCleanUpIllegalCharacters(r);
       pubsubMessageBuilder = pubsubMessageBuilder.setOrderingKey(orderingKey);
-			LOGGER.debug("using message ordering key {}",  orderingKey);
+      LOGGER.debug("using message ordering key {}",  orderingKey);
     } else {
-			LOGGER.debug("using no message ordering key");
+      LOGGER.debug("using no message ordering key");
     }
     PubsubMessage pubsubMessage = pubsubMessageBuilder.build();
 

File: src/main/java/com/zendesk/maxwell/schema/ddl/SchemaChange.java
Patch:
@@ -39,6 +39,7 @@ public abstract class SchemaChange {
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(ALTER|CREATE|DROP|RENAME)\\s+USER", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(ALTER|CREATE|DROP)\\s+TEMPORARY\\s+TABLE", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
+		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(ALTER|CREATE|DROP)\\s+TABLESPACE", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(SET|DROP|CREATE)\\s+(DEFAULT\\s+)?ROLE", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*TRUNCATE\\s+", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*OPTIMIZE\\s+", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));

File: src/main/java/com/zendesk/maxwell/schema/ddl/SchemaChange.java
Patch:
@@ -39,6 +39,7 @@ public abstract class SchemaChange {
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(ALTER|CREATE|DROP|RENAME)\\s+USER", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(ALTER|CREATE|DROP)\\s+TEMPORARY\\s+TABLE", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
+		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(ALTER|CREATE|DROP)\\s+TABLESPACE", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(SET|DROP|CREATE)\\s+(DEFAULT\\s+)?ROLE", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*TRUNCATE\\s+", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*OPTIMIZE\\s+", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -70,7 +70,7 @@ public class MaxwellConfig extends AbstractConfig {
 	public Filter filter;
 
 	/**
-	 * Ignore database and table synchronization not configured in filter-Configuration.  Default false
+	 * Ignore database and table schema add  not configured in filter-configuration.  Default false
 	 */
 	public Boolean ignoreMissingSchema;
 
@@ -906,7 +906,7 @@ protected MaxwellOptionParser buildOptionParser() {
 
 		parser.accepts( "filter", "filter specs.  specify like \"include:db.*, exclude:*.tbl, include: foo./.*bar$/, exclude:foo.bar.baz=reject\"").withRequiredArg();
 
-		parser.accepts( "ignore_missing_schema", "Ignore database and table synchronization not configured in filter-configuration .default: false" )
+		parser.accepts( "ignore_missing_schema", "Ignore database and table schema add  not configured in filter-configuration. default: false" )
 				.withOptionalArg().ofType(Boolean.class);
 
 		parser.accepts( "javascript", "file containing per-row javascript to execute" ).withRequiredArg();

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -285,6 +285,7 @@ private void startInner() throws Exception {
 			context.getHeartbeatNotifier(),
 			config.scripting,
 			context.getFilter(),
+			context.getConfig().getIgnoreMissingSchema(),
 			config.outputConfig,
 			config.bufferMemoryUsage,
 			config.replicationReconnectionRetries,

File: src/test/java/com/zendesk/maxwell/replication/TableCacheTest.java
Patch:
@@ -12,6 +12,6 @@ public void testHaTables() throws Exception {
 		Schema schema = new SchemaCapturer(server.getConnection(), buildContext().getCaseSensitivity()).capture();
 		TableCache cache = new TableCache("maxwell");
 		// ensure we don't crash on not-really-existant alibaba tables
-		cache.processEvent(schema, new Filter(), 1L, "mysql", "ha_health_check");
+		cache.processEvent(schema, new Filter(), false,1L, "mysql", "ha_health_check");
 	}
 }

File: src/main/java/com/zendesk/maxwell/replication/TableCache.java
Patch:
@@ -21,8 +21,7 @@ public void processEvent(Schema schema, Filter filter, Long tableId, String dbNa
 				return;
 			}
 
-			//If you create a new database, you have the permission of this database,
-			// and you cannot pull the tableNames corresponding to this database.
+			//If others created a new database, you have no permission of this database,and you cannot pull the tableNames on  this database
 			//Modified to determine whether to include, if not, end the method
 			if ( !filter.includes(dbName, tblName) ) {
 				return;

File: src/main/java/com/zendesk/maxwell/MaxwellContext.java
Patch:
@@ -550,6 +550,9 @@ public AbstractProducer getProducer() throws IOException {
 			case "redis":
 				this.producer = new MaxwellRedisProducer(this);
 				break;
+			case "bigquery":
+				this.producer = new MaxwellBigQueryProducer(this, this.config.bigQueryProjectId, this.config.bigQueryDataset, this.config.bigQueryTable);
+				break;
 			case "none":
 				this.producer = new NoneProducer(this);
 				break;

File: src/main/java/com/zendesk/maxwell/schema/MysqlSchemaCompactor.java
Patch:
@@ -155,9 +155,11 @@ private void compact(Connection cx) throws SQLException, InvalidSchemaError {
 			update.executeUpdate("update `schemas` set `base_schema_id` = null, `deltas` = null where `id` = " + schemaID);
 
 			commit.execute("COMMIT");
+			LOGGER.info("Committed schema compaction for {}", schemaID);
 		}
 
 		slowDeleteSchemas(cx, schemaID);
+		LOGGER.info("Finished deleting old schemas prior to {}", schemaID);
 	}
 
 	private void slowDeleteSchemas(Connection cx, long newBaseSchemaID) throws SQLException {

File: src/main/java/com/zendesk/maxwell/producer/MaxwellBigQueryProducer.java
Patch:
@@ -107,7 +107,6 @@ public void onFailure(Throwable t) {
       appendContext.retryCount++;
       try {
         this.parent.sendAsync(appendContext.r, this.cc);
-        cc.markCompleted();
         return;
       } catch (Exception e) {
         System.out.format("Failed to retry append: %s\n", e);
@@ -118,6 +117,8 @@ public void onFailure(Throwable t) {
       if (this.parent.getError() == null && !this.context.getConfig().ignoreProducerError) {
         StorageException storageException = Exceptions.toStorageException(t);
         this.parent.setError((storageException != null) ? storageException : new RuntimeException(t));
+        context.terminate();
+        return;
       }
     }
     cc.markCompleted();

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -1047,6 +1047,8 @@ private void setup(OptionSet options, Properties properties) {
 				String k = (String) e.nextElement();
 				if (k.startsWith("custom_producer.")) {
 					this.customProducerProperties.setProperty(k.replace("custom_producer.", ""), properties.getProperty(k));
+				} else if (k.startsWith("custom_producer_")) {
+					this.customProducerProperties.setProperty(k.replace("custom_producer_", ""), properties.getProperty(k));
 				} else if (k.startsWith("kafka.")) {
 					if (k.equals("kafka.bootstrap.servers") && kafkaBootstrapServers != null)
 						continue; // don't override command line bootstrap servers with config files'

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -1047,6 +1047,8 @@ private void setup(OptionSet options, Properties properties) {
 				String k = (String) e.nextElement();
 				if (k.startsWith("custom_producer.")) {
 					this.customProducerProperties.setProperty(k.replace("custom_producer.", ""), properties.getProperty(k));
+				} else if (k.startsWith("custom_producer_")) {
+					this.customProducerProperties.setProperty(k.replace("custom_producer_", ""), properties.getProperty(k));
 				} else if (k.startsWith("kafka.")) {
 					if (k.equals("kafka.bootstrap.servers") && kafkaBootstrapServers != null)
 						continue; // don't override command line bootstrap servers with config files'

File: src/main/java/com/zendesk/maxwell/replication/BinlogConnectorReplicator.java
Patch:
@@ -607,6 +607,8 @@ private RowMapBuffer getTransactionRows(BinlogConnectorEvent beginEvent) throws
 						// We don't need to process them, just ignore
 					} else if (upperCaseSql.startsWith("DROP TEMPORARY TABLE")) {
 						// Ignore temporary table drop statements inside transactions
+					} else if ( upperCaseSql.startsWith("# DUMMY EVENT")) {
+						// MariaDB injected event
 					} else {
 						LOGGER.warn("Unhandled QueryEvent @ {} inside transaction: {}", event.getPosition().fullPosition(), qe);
 					}

File: src/main/java/com/zendesk/maxwell/schema/columndef/StringColumnDef.java
Patch:
@@ -72,7 +72,7 @@ public String toSQL(Object value) {
 	// this could obviously be more complete.
 	private Charset charsetForCharset() {
 		switch(charset.toLowerCase()) {
-		case "utf8": case "utf8mb4":
+		case "utf8": case "utf8mb3": case "utf8mb4":
 			return StandardCharsets.UTF_8;
 		case "latin1": case "ascii":
 			return Charset.forName("Windows-1252");

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -37,8 +37,8 @@ public class Maxwell implements Runnable {
 	/**
 	 * Intialize a top level Maxwell runner
 	 * @param config Maxwell configuration
-	 * @throws SQLException 
-	 * @throws URISyntaxException
+	 * @throws SQLException If Maxwell can't connect
+	 * @throws URISyntaxException If there's a problem with the database configuration
 	 */
 	public Maxwell(MaxwellConfig config) throws SQLException, URISyntaxException {
 		this(new MaxwellContext(config));
@@ -62,7 +62,7 @@ public void run() {
 
 	/**
 	 * restarts a stopped Maxwell instance.  rebuilds all connections, threads, etc.
-	 * @throws Exception
+	 * @throws Exception If Maxwell can't initialize its context
 	 */
 	public void restart() throws Exception {
 		this.context = new MaxwellContext(config);

File: src/main/java/com/zendesk/maxwell/MaxwellCompatibilityError.java
Patch:
@@ -1,5 +1,8 @@
 package com.zendesk.maxwell;
 
+/**
+ * Thrown when Maxwell can't operate with the mysql server configured as it is.
+ */
 public class MaxwellCompatibilityError extends Exception {
 	public MaxwellCompatibilityError(String message) {
 		super(message);

File: src/main/java/com/zendesk/maxwell/schema/columndef/DateFormatter.java
Patch:
@@ -1,6 +1,7 @@
 package com.zendesk.maxwell.schema.columndef;
 
 import java.sql.Timestamp;
+import java.time.LocalDateTime;
 import java.util.*;
 
 public class DateFormatter {
@@ -22,6 +23,8 @@ public static Timestamp extractTimestamp(Object value) throws IllegalArgumentExc
 		} else if ( value instanceof Date ) {
 			Long time = ((Date) value).getTime();
 			return new Timestamp(time);
+		}  else if ( value instanceof LocalDateTime) {
+			return Timestamp.valueOf((LocalDateTime) value);
 		} else
 			throw new IllegalArgumentException("couldn't extract date/time out of " + value);
 	}

File: src/test/java/com/zendesk/maxwell/MaxwellTestSupport.java
Patch:
@@ -42,7 +42,7 @@ public static MysqlIsolatedServer setupServer(String extraParams) throws Excepti
 
 		Connection conn = server.getConnection();
 		SchemaStoreSchema.ensureMaxwellSchema(conn, "maxwell");
-		conn.createStatement().executeQuery("use maxwell");
+		conn.createStatement().execute("use maxwell");
 		SchemaStoreSchema.upgradeSchemaStoreSchema(conn);
 		return server;
 	}

File: src/test/java/com/zendesk/maxwell/schema/columndef/ColumnDefTest.java
Patch:
@@ -469,7 +469,6 @@ public void testInterfaceImmutability() {
 
 					final boolean isFinal = Modifier.isFinal(modifiers);
 					final boolean isPrivate = Modifier.isPrivate(modifiers);
-					System.out.println("Checking " + className + "." + field.getName() + " " + isPrivate);
 
 					// check field immutability
 					if (!isFinal && !isPrivate) {

File: src/main/java/com/zendesk/maxwell/replication/BinlogConnectorReplicator.java
Patch:
@@ -40,6 +40,7 @@
 public class BinlogConnectorReplicator extends RunLoopProcess implements Replicator, BinaryLogClient.LifecycleListener {
 	static final Logger LOGGER = LoggerFactory.getLogger(BinlogConnectorReplicator.class);
 	private static final long MAX_TX_ELEMENTS = 10000;
+	public static int BINLOG_QUEUE_SIZE = 5000;
 	public static final int BAD_BINLOG_ERROR_CODE = 1236;
 	public static final int ACCESS_DENIED_ERROR_CODE = 1227;
 
@@ -50,7 +51,7 @@ public class BinlogConnectorReplicator extends RunLoopProcess implements Replica
 	private final int replicationReconnectionRetries;
 	private BinlogConnectorEventListener binlogEventListener;
 	private BinlogConnectorLivenessMonitor binlogLivenessMonitor;
-	private final LinkedBlockingDeque<BinlogConnectorEvent> queue = new LinkedBlockingDeque<>(20);
+	private final LinkedBlockingDeque<BinlogConnectorEvent> queue = new LinkedBlockingDeque<>(BINLOG_QUEUE_SIZE);
 	private final TableCache tableCache;
 	private final Scripting scripting;
 	private ServerException lastCommError;

File: src/main/java/com/zendesk/maxwell/replication/BinlogConnectorReplicator.java
Patch:
@@ -40,6 +40,7 @@
 public class BinlogConnectorReplicator extends RunLoopProcess implements Replicator, BinaryLogClient.LifecycleListener {
 	static final Logger LOGGER = LoggerFactory.getLogger(BinlogConnectorReplicator.class);
 	private static final long MAX_TX_ELEMENTS = 10000;
+	public static int BINLOG_QUEUE_SIZE = 5000;
 	public static final int BAD_BINLOG_ERROR_CODE = 1236;
 	public static final int ACCESS_DENIED_ERROR_CODE = 1227;
 
@@ -50,7 +51,7 @@ public class BinlogConnectorReplicator extends RunLoopProcess implements Replica
 	private final int replicationReconnectionRetries;
 	private BinlogConnectorEventListener binlogEventListener;
 	private BinlogConnectorLivenessMonitor binlogLivenessMonitor;
-	private final LinkedBlockingDeque<BinlogConnectorEvent> queue = new LinkedBlockingDeque<>(20);
+	private final LinkedBlockingDeque<BinlogConnectorEvent> queue = new LinkedBlockingDeque<>(BINLOG_QUEUE_SIZE);
 	private final TableCache tableCache;
 	private final Scripting scripting;
 	private ServerException lastCommError;

File: src/test/java/com/zendesk/maxwell/schema/MysqlPositionStoreTest.java
Patch:
@@ -108,7 +108,7 @@ public void testMultiplePositionRecovery() throws Exception {
 		Long newestHeartbeat = 123L;
 		Long intermediateHeartbeat = newestHeartbeat - 10;
 		Long oldestHeartbeat = newestHeartbeat - 20;
-		String binlogFile = "bin.log";
+		String binlogFile = "bin.log.000001";
 
 		buildStore(context, oldestServerID).set(new Position(new BinlogPosition(0L, binlogFile), oldestHeartbeat));
 		buildStore(context, intermediateServerID).set(new Position(new BinlogPosition(0L, binlogFile), intermediateHeartbeat));
@@ -146,7 +146,7 @@ public void testCleanupOldRecoveryInfos() throws Exception {
 		Long oldServerID1 = activeServerID + 1;
 		Long oldServerID2 = activeServerID + 2;
 
-		String binlogFile = "bin.log";
+		String binlogFile = "bin.log.000111";
 		String clientId = "client-123";
 
 		buildStore(context, oldServerID1, clientId).set(new Position(new BinlogPosition(0L, binlogFile), 1L));

File: src/test/java/com/zendesk/maxwell/schema/MysqlPositionStoreTest.java
Patch:
@@ -108,7 +108,7 @@ public void testMultiplePositionRecovery() throws Exception {
 		Long newestHeartbeat = 123L;
 		Long intermediateHeartbeat = newestHeartbeat - 10;
 		Long oldestHeartbeat = newestHeartbeat - 20;
-		String binlogFile = "bin.log";
+		String binlogFile = "bin.log.000001";
 
 		buildStore(context, oldestServerID).set(new Position(new BinlogPosition(0L, binlogFile), oldestHeartbeat));
 		buildStore(context, intermediateServerID).set(new Position(new BinlogPosition(0L, binlogFile), intermediateHeartbeat));
@@ -146,7 +146,7 @@ public void testCleanupOldRecoveryInfos() throws Exception {
 		Long oldServerID1 = activeServerID + 1;
 		Long oldServerID2 = activeServerID + 2;
 
-		String binlogFile = "bin.log";
+		String binlogFile = "bin.log.000111";
 		String clientId = "client-123";
 
 		buildStore(context, oldServerID1, clientId).set(new Position(new BinlogPosition(0L, binlogFile), 1L));

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -260,6 +260,7 @@ public void testParsingSomeAlters() {
 			"ALTER TABLE t1 DROP PARTITION IF EXISTS p3", // some mariada-fu
 			"ALTER TABLE t1 DROP CONSTRAINT ck",
 			"ALTER TABLE t1 DROP CHECK ck",
+			"create table test ( i float default -1. )"
 		};
 
 		for ( String s : testSQL ) {

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -260,6 +260,7 @@ public void testParsingSomeAlters() {
 			"ALTER TABLE t1 DROP PARTITION IF EXISTS p3", // some mariada-fu
 			"ALTER TABLE t1 DROP CONSTRAINT ck",
 			"ALTER TABLE t1 DROP CHECK ck",
+			"create table test ( i float default -1. )"
 		};
 
 		for ( String s : testSQL ) {

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -258,8 +258,8 @@ public void testParsingSomeAlters() {
 			"ALTER TABLE c alter column i set visible",
 			"ALTER TABLE broker.table ADD PARTITION IF NOT EXISTS (partition p20210912 VALUES LESS THAN (738411))", // some mariada-fu
 			"ALTER TABLE t1 DROP PARTITION IF EXISTS p3", // some mariada-fu
-      "ALTER TABLE t1 DROP CONSTRAINT ck",
-      "ALTER TABLE t1 DROP CHECK ck",
+			"ALTER TABLE t1 DROP CONSTRAINT ck",
+			"ALTER TABLE t1 DROP CHECK ck",
 		};
 
 		for ( String s : testSQL ) {

File: src/main/java/com/zendesk/maxwell/bootstrap/BootstrapController.java
Patch:
@@ -89,7 +89,7 @@ private synchronized Long getCurrentSchemaID() {
 		return this.currentSchemaID;
 	}
 
-	public synchronized void setCurrentSchemaID(long schemaID) {
+	public synchronized void setCurrentSchemaID(Long schemaID) {
 		this.currentSchemaID = schemaID;
 	}
 

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -398,7 +398,8 @@ public void testCreateTableWithOptions() {
 				+ ") "
 			  	+ "ENGINE=innodb "
 				+ "CHARACTER SET='latin1' "
-			  	+ "ROW_FORMAT=FIXED"
+			  	+ "ROW_FORMAT=FIXED "
+				+ "COMPRESSION='lz4'"
 		);
 		assertThat(c, not(nullValue()));
 	}

File: src/main/java/com/zendesk/maxwell/bootstrap/BootstrapController.java
Patch:
@@ -89,7 +89,7 @@ private synchronized Long getCurrentSchemaID() {
 		return this.currentSchemaID;
 	}
 
-	public synchronized void setCurrentSchemaID(long schemaID) {
+	public synchronized void setCurrentSchemaID(Long schemaID) {
 		this.currentSchemaID = schemaID;
 	}
 

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -398,7 +398,8 @@ public void testCreateTableWithOptions() {
 				+ ") "
 			  	+ "ENGINE=innodb "
 				+ "CHARACTER SET='latin1' "
-			  	+ "ROW_FORMAT=FIXED"
+			  	+ "ROW_FORMAT=FIXED "
+				+ "COMPRESSION='lz4'"
 		);
 		assertThat(c, not(nullValue()));
 	}

File: src/main/java/com/zendesk/maxwell/schema/MysqlSchemaStore.java
Patch:
@@ -88,9 +88,9 @@ public MysqlSavedSchema captureAndSaveSchema() throws SQLException {
 				} else {
 					// The capture time might be long and the conn connection might be closed already. Consulting the pool
 					// again for a new connection
-					Connection newConn = maxwellConnectionPool.getConnection();
-					savedSchema.save(newConn);
-					newConn.close();
+					try ( Connection newConn = maxwellConnectionPool.getConnection() ) {
+						savedSchema.save(newConn);
+					}
 				}
 			return savedSchema;
 		}

File: src/main/java/com/zendesk/maxwell/schema/MysqlSavedSchema.java
Patch:
@@ -428,7 +428,7 @@ private void restoreSchemaMetadata(Connection conn, Long schemaID) throws SQLExc
 			), schemaRS.getLong("last_heartbeat_read")
 		));
 
-		LOGGER.info("Restoring schema id " + schemaRS.getInt("id") + " (last modified at " + this.position + ")");
+		LOGGER.info("Restoring schema id " + schemaRS.getLong("id") + " (last modified at " + this.position + ")");
 
 		this.schemaID = schemaRS.getLong("id");
 		this.baseSchemaID = schemaRS.getLong("base_schema_id");

File: src/main/java/com/zendesk/maxwell/MaxwellContext.java
Patch:
@@ -231,8 +231,9 @@ public void run() {
 					// ignore
 				}
 
-				LOGGER.debug("Shutdown complete: " + shutdownComplete.get());
-				if (!shutdownComplete.get()) {
+				final boolean isShutdownComplete = shutdownComplete.get();
+				LOGGER.debug("Shutdown complete: {}", isShutdownComplete);
+				if (!isShutdownComplete) {
 					LOGGER.error("Shutdown stalled - forcefully killing maxwell process");
 					if (self.error != null) {
 						LOGGER.error("Termination reason:", self.error);

File: src/main/java/com/zendesk/maxwell/bootstrap/BootstrapController.java
Patch:
@@ -66,7 +66,9 @@ private void doWork() throws Exception {
 		List<BootstrapTask> tasks = getIncompleteTasks();
 		synchronized(bootstrapMutex) {
 			for ( BootstrapTask task : tasks ) {
-				LOGGER.debug("starting bootstrap task: {}", task.logString());
+				if (LOGGER.isDebugEnabled()) {
+					LOGGER.debug("starting bootstrap task: {}", task.logString());
+				}
 				synchronized(completionMutex) {
 					activeTask = task;
 				}

File: src/main/java/com/zendesk/maxwell/producer/MaxwellPubsubProducer.java
Patch:
@@ -61,9 +61,9 @@ public void onSuccess(String messageId) {
     this.succeededMessageMeter.mark();
 
     if ( LOGGER.isDebugEnabled() ) {
-      LOGGER.debug("->  " + this.json);
-      LOGGER.debug("    " + this.position);
-      LOGGER.debug("");
+      LOGGER.debug("->  {}\n" +
+			  "    {}\n",
+			  this.json, this.position);
     }
 
     cc.markCompleted();

File: src/main/java/com/zendesk/maxwell/producer/MaxwellSNSProducer.java
Patch:
@@ -103,7 +103,7 @@ public void onError(Exception t) {
 	@Override
 	public void onSuccess(PublishRequest request, PublishResult result) {
 		if (logger.isDebugEnabled()) {
-			logger.debug("-> MessageId: " + result.getMessageId());
+			logger.debug("-> MessageId: {}", result.getMessageId());
 		}
 		cc.markCompleted();
 	}

File: src/main/java/com/zendesk/maxwell/producer/MaxwellSQSProducer.java
Patch:
@@ -69,7 +69,8 @@ public void onError(Exception t) {
 	@Override
 	public void onSuccess(SendMessageRequest request, SendMessageResult result) {
 		if (logger.isDebugEnabled()) {
-			logger.debug("-> Message id:" + result.getMessageId() + ", sequence number:" + result.getSequenceNumber()+"  "+json+"  "+position);
+			logger.debug("-> Message id:{}, sequence number:{}  {}  {}",
+					result.getMessageId(), result.getSequenceNumber(), json, position);
 		}
 		cc.markCompleted();
 	}

File: src/main/java/com/zendesk/maxwell/producer/NatsProducer.java
Patch:
@@ -59,7 +59,7 @@ public void push(RowMap r) throws Exception {
 			context.setPosition(r.getNextPosition());
 		}
 		if (LOGGER.isDebugEnabled()) {
-			LOGGER.debug("->  nats subject:" + natsSubject + ", message:" + value);
+			LOGGER.debug("->  nats subject:{}, message:{}", natsSubject, value);
 		}
 	}
 }

File: src/main/java/com/zendesk/maxwell/producer/RabbitmqProducer.java
Patch:
@@ -84,7 +84,7 @@ public void push(RowMap r) throws Exception {
 			context.setPosition(r.getNextPosition());
 		}
 		if ( LOGGER.isDebugEnabled()) {
-			LOGGER.debug("->  routing key:" + routingKey + ", partition:" + value);
+			LOGGER.debug("->  routing key:{}, partition:{}", routingKey, value);
 		}
 	}
 

File: src/main/java/com/zendesk/maxwell/recovery/Recovery.java
Patch:
@@ -58,7 +58,7 @@ public HeartbeatRowMap recover() throws Exception {
 			Position position = Position.valueOf(binlogPosition, recoveryInfo.getHeartbeat());
 			Metrics metrics = new NoOpMetrics();
 
-			LOGGER.debug("scanning binlog: " + binlogPosition);
+			LOGGER.debug("scanning binlog: {}", binlogPosition);
 			Replicator replicator = new BinlogConnectorReplicator(
 					this.schemaStore,
 					null,

File: src/main/java/com/zendesk/maxwell/replication/BinlogConnectorReplicator.java
Patch:
@@ -311,7 +311,7 @@ private RowMap processHeartbeats(RowMap row) {
 			return row; // plain row -- do not process.
 
 		long lastHeartbeatRead = (Long) row.getData("heartbeat");
-		LOGGER.debug("replicator picked up heartbeat: " + lastHeartbeatRead);
+		LOGGER.debug("replicator picked up heartbeat: {}", lastHeartbeatRead);
 		this.lastHeartbeatPosition = row.getPosition().withHeartbeat(lastHeartbeatRead);
 		heartbeatNotifier.heartbeat(lastHeartbeatRead);
 		return HeartbeatRowMap.valueOf(row.getDatabase(), this.lastHeartbeatPosition, row.getNextPosition().withHeartbeat(lastHeartbeatRead));
@@ -530,7 +530,7 @@ private RowMapBuffer getTransactionRows(BinlogConnectorEvent beginEvent) throws
 					String upperCaseSql = sql.toUpperCase();
 
 					if ( upperCaseSql.startsWith(BinlogConnectorEvent.SAVEPOINT)) {
-						LOGGER.debug("Ignoring SAVEPOINT in transaction: " + qe);
+						LOGGER.debug("Ignoring SAVEPOINT in transaction: {}", qe);
 					} else if ( createTablePattern.matcher(sql).find() ) {
 						// CREATE TABLE `foo` SELECT * FROM `bar` will put a CREATE TABLE
 						// inside a transaction.  Note that this could, in rare cases, lead

File: src/main/java/com/zendesk/maxwell/row/RowMapBuffer.java
Patch:
@@ -55,7 +55,7 @@ protected RowMap evict() throws IOException {
 		this.outputStreamCacheSize += r.getApproximateSize();
 		if ( this.outputStreamCacheSize > FlushOutputStreamBytes ) {
 			resetOutputStreamCaches();
-			LOGGER.debug("outputStreamCacheSize: " + this.outputStreamCacheSize + ", memorySize: " + this.memorySize);
+			LOGGER.debug("outputStreamCacheSize: {}, memorySize: {}", this.outputStreamCacheSize, this.memorySize);
 			this.outputStreamCacheSize = 0;
 		}
 

File: src/main/java/com/zendesk/maxwell/schema/MysqlPositionStore.java
Patch:
@@ -58,7 +58,8 @@ public void set(Position newPosition) throws SQLException, DuplicateProcessExcep
 		connectionPool.withSQLRetry(1, (c) -> {
 			PreparedStatement s = c.prepareStatement(sql);
 
-			LOGGER.debug("Writing binlog position to " + c.getCatalog() + ".positions: " + newPosition + ", last heartbeat read: " + heartbeat);
+			LOGGER.debug("Writing binlog position to {}.positions: {}, last heartbeat read: {}",
+					c.getCatalog(), newPosition, heartbeat);
 			s.setLong(1, serverID);
 			s.setString(2, binlogPosition.getGtidSetStr());
 			s.setString(3, binlogPosition.getFile());
@@ -134,7 +135,7 @@ private void heartbeat(Connection c, long thisHeartbeat) throws SQLException, Du
 		s.setString(3, clientID);
 		s.setLong(4, lastHeartbeat);
 
-		LOGGER.debug("writing heartbeat: " + thisHeartbeat + " (last heartbeat written: " + lastHeartbeat + ")");
+		LOGGER.debug("writing heartbeat: {} (last heartbeat written: {})", thisHeartbeat, lastHeartbeat);
 		int nRows = s.executeUpdate();
 		if ( nRows != 1 ) {
 			String msg = String.format(

File: src/main/java/com/zendesk/maxwell/schema/SchemaCapturer.java
Patch:
@@ -102,14 +102,14 @@ public Schema capture() throws SQLException {
 		rs.close();
 
 		int size = databases.size();
-		LOGGER.debug("Starting schema capture of " + size + " databases...");
+		LOGGER.debug("Starting schema capture of {} databases...", size);
 		int counter = 1;
 		for (Database db : databases) {
-			LOGGER.debug(counter + "/" + size + " Capturing " + db.getName() + "...");
+			LOGGER.debug("{}/{} Capturing {}...", counter, size, db.getName());
 			captureDatabase(db);
 			counter++;
 		}
-		LOGGER.debug(size + " database schemas captured!");
+		LOGGER.debug("{} database schemas captured!", size);
 
 		return new Schema(databases, captureDefaultCharset(), this.sensitivity);
 	}

File: src/main/java/com/zendesk/maxwell/util/ListWithDiskBuffer.java
Patch:
@@ -36,7 +36,7 @@ protected boolean shouldBuffer() {
 	}
 
 	protected void resetOutputStreamCaches() throws IOException {
-		LOGGER.debug("Resetting OutputStream caches. elementsInFile: " + elementsInFile);
+		LOGGER.debug("Resetting OutputStream caches. elementsInFile: {}", elementsInFile);
 		os.reset();
 	}
 

File: src/main/java/com/zendesk/maxwell/util/StoppableTaskState.java
Patch:
@@ -20,7 +20,7 @@ public boolean isRunning() {
 	}
 
 	public synchronized void requestStop() {
-		LOGGER.debug(description + " requestStop() called (in state: " + state + ")");
+		LOGGER.debug("{} requestStop() called (in state: {})", description, state);
 		if (isRunning()) {
 			this.state = RunState.REQUEST_STOP;
 		}

File: src/main/java/com/zendesk/maxwell/util/TaskManager.java
Patch:
@@ -51,7 +51,7 @@ public synchronized void stop(Exception error) throws Exception {
 		// then wait for everything to stop
 		Long timeout = 1000L;
 		for (StoppableTask task: this.tasks) {
-			LOGGER.debug("Awaiting stop of: " + task);
+			LOGGER.debug("Awaiting stop of: {}", task);
 			task.awaitStop(timeout);
 		}
 

File: src/main/java/com/zendesk/maxwell/schema/SchemaStoreSchema.java
Patch:
@@ -49,7 +49,7 @@ private static void executeSQLInputStream(Connection connection, InputStream sch
 
 		if ( schemaDatabaseName != null ) {
 			connection.createStatement().execute("CREATE DATABASE IF NOT EXISTS `" + schemaDatabaseName + "`");
-			if (!connection.getCatalog().equals(schemaDatabaseName))
+			if (!schemaDatabaseName.equals(connection.getCatalog()))
 				connection.setCatalog(schemaDatabaseName);
 		}
 

File: src/main/java/com/zendesk/maxwell/MaxwellContext.java
Patch:
@@ -231,8 +231,9 @@ public void run() {
 					// ignore
 				}
 
-				LOGGER.debug("Shutdown complete: " + shutdownComplete.get());
-				if (!shutdownComplete.get()) {
+				final boolean isShutdownComplete = shutdownComplete.get();
+				LOGGER.debug("Shutdown complete: {}", isShutdownComplete);
+				if (!isShutdownComplete) {
 					LOGGER.error("Shutdown stalled - forcefully killing maxwell process");
 					if (self.error != null) {
 						LOGGER.error("Termination reason:", self.error);

File: src/main/java/com/zendesk/maxwell/bootstrap/BootstrapController.java
Patch:
@@ -66,7 +66,9 @@ private void doWork() throws Exception {
 		List<BootstrapTask> tasks = getIncompleteTasks();
 		synchronized(bootstrapMutex) {
 			for ( BootstrapTask task : tasks ) {
-				LOGGER.debug("starting bootstrap task: {}", task.logString());
+				if (LOGGER.isDebugEnabled()) {
+					LOGGER.debug("starting bootstrap task: {}", task.logString());
+				}
 				synchronized(completionMutex) {
 					activeTask = task;
 				}

File: src/main/java/com/zendesk/maxwell/producer/MaxwellPubsubProducer.java
Patch:
@@ -61,9 +61,9 @@ public void onSuccess(String messageId) {
     this.succeededMessageMeter.mark();
 
     if ( LOGGER.isDebugEnabled() ) {
-      LOGGER.debug("->  " + this.json);
-      LOGGER.debug("    " + this.position);
-      LOGGER.debug("");
+      LOGGER.debug("->  {}\n" +
+			  "    {}\n",
+			  this.json, this.position);
     }
 
     cc.markCompleted();

File: src/main/java/com/zendesk/maxwell/producer/MaxwellSNSProducer.java
Patch:
@@ -103,7 +103,7 @@ public void onError(Exception t) {
 	@Override
 	public void onSuccess(PublishRequest request, PublishResult result) {
 		if (logger.isDebugEnabled()) {
-			logger.debug("-> MessageId: " + result.getMessageId());
+			logger.debug("-> MessageId: {}", result.getMessageId());
 		}
 		cc.markCompleted();
 	}

File: src/main/java/com/zendesk/maxwell/producer/MaxwellSQSProducer.java
Patch:
@@ -69,7 +69,8 @@ public void onError(Exception t) {
 	@Override
 	public void onSuccess(SendMessageRequest request, SendMessageResult result) {
 		if (logger.isDebugEnabled()) {
-			logger.debug("-> Message id:" + result.getMessageId() + ", sequence number:" + result.getSequenceNumber()+"  "+json+"  "+position);
+			logger.debug("-> Message id:{}, sequence number:{}  {}  {}",
+					result.getMessageId(), result.getSequenceNumber(), json, position);
 		}
 		cc.markCompleted();
 	}

File: src/main/java/com/zendesk/maxwell/producer/NatsProducer.java
Patch:
@@ -59,7 +59,7 @@ public void push(RowMap r) throws Exception {
 			context.setPosition(r.getNextPosition());
 		}
 		if (LOGGER.isDebugEnabled()) {
-			LOGGER.debug("->  nats subject:" + natsSubject + ", message:" + value);
+			LOGGER.debug("->  nats subject:{}, message:{}", natsSubject, value);
 		}
 	}
 }

File: src/main/java/com/zendesk/maxwell/producer/RabbitmqProducer.java
Patch:
@@ -84,7 +84,7 @@ public void push(RowMap r) throws Exception {
 			context.setPosition(r.getNextPosition());
 		}
 		if ( LOGGER.isDebugEnabled()) {
-			LOGGER.debug("->  routing key:" + routingKey + ", partition:" + value);
+			LOGGER.debug("->  routing key:{}, partition:{}", routingKey, value);
 		}
 	}
 

File: src/main/java/com/zendesk/maxwell/recovery/Recovery.java
Patch:
@@ -58,7 +58,7 @@ public HeartbeatRowMap recover() throws Exception {
 			Position position = Position.valueOf(binlogPosition, recoveryInfo.getHeartbeat());
 			Metrics metrics = new NoOpMetrics();
 
-			LOGGER.debug("scanning binlog: " + binlogPosition);
+			LOGGER.debug("scanning binlog: {}", binlogPosition);
 			Replicator replicator = new BinlogConnectorReplicator(
 					this.schemaStore,
 					null,

File: src/main/java/com/zendesk/maxwell/replication/BinlogConnectorReplicator.java
Patch:
@@ -311,7 +311,7 @@ private RowMap processHeartbeats(RowMap row) {
 			return row; // plain row -- do not process.
 
 		long lastHeartbeatRead = (Long) row.getData("heartbeat");
-		LOGGER.debug("replicator picked up heartbeat: " + lastHeartbeatRead);
+		LOGGER.debug("replicator picked up heartbeat: {}", lastHeartbeatRead);
 		this.lastHeartbeatPosition = row.getPosition().withHeartbeat(lastHeartbeatRead);
 		heartbeatNotifier.heartbeat(lastHeartbeatRead);
 		return HeartbeatRowMap.valueOf(row.getDatabase(), this.lastHeartbeatPosition, row.getNextPosition().withHeartbeat(lastHeartbeatRead));
@@ -530,7 +530,7 @@ private RowMapBuffer getTransactionRows(BinlogConnectorEvent beginEvent) throws
 					String upperCaseSql = sql.toUpperCase();
 
 					if ( upperCaseSql.startsWith(BinlogConnectorEvent.SAVEPOINT)) {
-						LOGGER.debug("Ignoring SAVEPOINT in transaction: " + qe);
+						LOGGER.debug("Ignoring SAVEPOINT in transaction: {}", qe);
 					} else if ( createTablePattern.matcher(sql).find() ) {
 						// CREATE TABLE `foo` SELECT * FROM `bar` will put a CREATE TABLE
 						// inside a transaction.  Note that this could, in rare cases, lead

File: src/main/java/com/zendesk/maxwell/row/RowMapBuffer.java
Patch:
@@ -55,7 +55,7 @@ protected RowMap evict() throws IOException {
 		this.outputStreamCacheSize += r.getApproximateSize();
 		if ( this.outputStreamCacheSize > FlushOutputStreamBytes ) {
 			resetOutputStreamCaches();
-			LOGGER.debug("outputStreamCacheSize: " + this.outputStreamCacheSize + ", memorySize: " + this.memorySize);
+			LOGGER.debug("outputStreamCacheSize: {}, memorySize: {}", this.outputStreamCacheSize, this.memorySize);
 			this.outputStreamCacheSize = 0;
 		}
 

File: src/main/java/com/zendesk/maxwell/schema/MysqlPositionStore.java
Patch:
@@ -58,7 +58,8 @@ public void set(Position newPosition) throws SQLException, DuplicateProcessExcep
 		connectionPool.withSQLRetry(1, (c) -> {
 			PreparedStatement s = c.prepareStatement(sql);
 
-			LOGGER.debug("Writing binlog position to " + c.getCatalog() + ".positions: " + newPosition + ", last heartbeat read: " + heartbeat);
+			LOGGER.debug("Writing binlog position to {}.positions: {}, last heartbeat read: {}",
+					c.getCatalog(), newPosition, heartbeat);
 			s.setLong(1, serverID);
 			s.setString(2, binlogPosition.getGtidSetStr());
 			s.setString(3, binlogPosition.getFile());
@@ -134,7 +135,7 @@ private void heartbeat(Connection c, long thisHeartbeat) throws SQLException, Du
 		s.setString(3, clientID);
 		s.setLong(4, lastHeartbeat);
 
-		LOGGER.debug("writing heartbeat: " + thisHeartbeat + " (last heartbeat written: " + lastHeartbeat + ")");
+		LOGGER.debug("writing heartbeat: {} (last heartbeat written: {})", thisHeartbeat, lastHeartbeat);
 		int nRows = s.executeUpdate();
 		if ( nRows != 1 ) {
 			String msg = String.format(

File: src/main/java/com/zendesk/maxwell/schema/SchemaCapturer.java
Patch:
@@ -102,14 +102,14 @@ public Schema capture() throws SQLException {
 		rs.close();
 
 		int size = databases.size();
-		LOGGER.debug("Starting schema capture of " + size + " databases...");
+		LOGGER.debug("Starting schema capture of {} databases...", size);
 		int counter = 1;
 		for (Database db : databases) {
-			LOGGER.debug(counter + "/" + size + " Capturing " + db.getName() + "...");
+			LOGGER.debug("{}/{} Capturing {}...", counter, size, db.getName());
 			captureDatabase(db);
 			counter++;
 		}
-		LOGGER.debug(size + " database schemas captured!");
+		LOGGER.debug("{} database schemas captured!", size);
 
 		return new Schema(databases, captureDefaultCharset(), this.sensitivity);
 	}

File: src/main/java/com/zendesk/maxwell/util/ListWithDiskBuffer.java
Patch:
@@ -36,7 +36,7 @@ protected boolean shouldBuffer() {
 	}
 
 	protected void resetOutputStreamCaches() throws IOException {
-		LOGGER.debug("Resetting OutputStream caches. elementsInFile: " + elementsInFile);
+		LOGGER.debug("Resetting OutputStream caches. elementsInFile: {}", elementsInFile);
 		os.reset();
 	}
 

File: src/main/java/com/zendesk/maxwell/util/StoppableTaskState.java
Patch:
@@ -20,7 +20,7 @@ public boolean isRunning() {
 	}
 
 	public synchronized void requestStop() {
-		LOGGER.debug(description + " requestStop() called (in state: " + state + ")");
+		LOGGER.debug("{} requestStop() called (in state: {})", description, state);
 		if (isRunning()) {
 			this.state = RunState.REQUEST_STOP;
 		}

File: src/main/java/com/zendesk/maxwell/util/TaskManager.java
Patch:
@@ -51,7 +51,7 @@ public synchronized void stop(Exception error) throws Exception {
 		// then wait for everything to stop
 		Long timeout = 1000L;
 		for (StoppableTask task: this.tasks) {
-			LOGGER.debug("Awaiting stop of: " + task);
+			LOGGER.debug("Awaiting stop of: {}", task);
 			task.awaitStop(timeout);
 		}
 

File: src/main/java/com/zendesk/maxwell/schema/SchemaStoreSchema.java
Patch:
@@ -49,7 +49,7 @@ private static void executeSQLInputStream(Connection connection, InputStream sch
 
 		if ( schemaDatabaseName != null ) {
 			connection.createStatement().execute("CREATE DATABASE IF NOT EXISTS `" + schemaDatabaseName + "`");
-			if (!connection.getCatalog().equals(schemaDatabaseName))
+			if (!schemaDatabaseName.equals(connection.getCatalog()))
 				connection.setCatalog(schemaDatabaseName);
 		}
 

File: src/test/java/com/zendesk/maxwell/MaxwellConfigTest.java
Patch:
@@ -96,7 +96,7 @@ public void testEnvJsonConfig() throws JsonProcessingException {
 				.build();
 		ObjectMapper mapper = new ObjectMapper();
 		String jsonConfig = mapper.writeValueAsString(configMap);
-		environmentVariables.set("MAXWELL_JSON", jsonConfig);
+		environmentVariables.set("MAXWELL_JSON", "    " + jsonConfig);
 
 		config = new MaxwellConfig(new String[] { "--env_config=MAXWELL_JSON" });
 		assertEquals("foo", config.maxwellMysql.user);

File: src/main/java/com/zendesk/maxwell/producer/MaxwellSNSProducer.java
Patch:
@@ -26,7 +26,6 @@ public class MaxwellSNSProducer extends AbstractAsyncProducer {
 	public MaxwellSNSProducer(MaxwellContext context, String topic) {
 		super(context);
 		this.topic = topic;
-		System.out.println(topic);
 		this.client = AmazonSNSAsyncClientBuilder.defaultClient();
 	}
 

File: src/main/java/com/zendesk/maxwell/producer/NatsProducer.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.zendesk.maxwell.MaxwellContext;
 import com.zendesk.maxwell.row.RowMap;
-import com.zendesk.maxwell.util.InterpolatedStringsHandler;
+import com.zendesk.maxwell.util.TopicInterpolator;
 import io.nats.client.Connection;
 import io.nats.client.Nats;
 import io.nats.client.Options;
@@ -47,7 +47,7 @@ public void push(RowMap r) throws Exception {
 		}
 
 		String value = r.toJSON(outputConfig);
-		String natsSubject = new InterpolatedStringsHandler(this.natsSubjectTemplate).generateFromRowMapAndTrimAllWhitesSpaces(r);
+		String natsSubject = new TopicInterpolator(this.natsSubjectTemplate).generateFromRowMapAndTrimAllWhitesSpaces(r);
 
 		long maxPayloadSize = natsConnection.getMaxPayload();
 		byte[] messageBytes = value.getBytes(StandardCharsets.UTF_8);

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -223,8 +223,8 @@ protected MaxwellOptionParser buildOptionParser() {
 				.withRequiredArg().ofType(Integer.class);
 		parser.accepts( "replication_jdbc_options", "additional jdbc connection options: key1=val1&key2=val2" )
 				.withRequiredArg();
-		parser.accepts( "replication_heartbeat", "enable binlog replication heartbeats, default true" )
-				.withRequiredArg().ofType(Boolean.class);
+		parser.accepts( "replication_heartbeat", "enable binlog replication heartbeats, default false" )
+				.withOptionalArg().ofType(Boolean.class);
 
 
 		parser.separator();

File: src/main/java/com/zendesk/maxwell/MaxwellMysqlConfig.java
Patch:
@@ -34,7 +34,7 @@ public MaxwellMysqlConfig() {
 		this.user = null;
 		this.password = null;
 		this.sslMode = null;
-		this.enableHeartbeat = true;
+		this.enableHeartbeat = false;
 
 		this.jdbcOptions = new HashMap<>();
 		this.jdbcOptions.put("zeroDateTimeBehavior", "convertToNull");

File: src/main/java/com/zendesk/maxwell/bootstrap/MaxwellBootstrapUtility.java
Patch:
@@ -141,8 +141,6 @@ private ConnectionPool getConnectionPool(MaxwellBootstrapUtilityConfig config) t
 
 	private ConnectionPool getReplicationConnectionPool(MaxwellBootstrapUtilityConfig config) throws SQLException {
 		String connectionURI = config.getReplicationConnectionURI();
-		System.out.println("connecting to " + connectionURI);
-		System.out.println("user: " + config.replicationMysql.user + ", passwd: '" + config.replicationMysql.password + "'");
 
 		return new C3P0ConnectionPool(connectionURI, config.replicationMysql.user, config.replicationMysql.password);
 	}

File: src/main/java/com/zendesk/maxwell/MaxwellContext.java
Patch:
@@ -386,6 +386,9 @@ public AbstractProducer getProducer() throws IOException {
 			case "none":
 				this.producer = new NoneProducer(this);
 				break;
+			case "custom":
+				// if we're here we missed specifying producer factory
+				throw new RuntimeException("Please specify --custom_producer.factory!");
 			default:
 				throw new RuntimeException("Unknown producer type: " + this.config.producerType);
 			}

File: src/main/java/com/zendesk/maxwell/bootstrap/MaxwellBootstrapUtilityConfig.java
Patch:
@@ -10,7 +10,6 @@
 import java.util.Properties;
 import java.util.Map;
 
-import java.io.IOException;
 import com.zendesk.maxwell.util.AbstractConfig;
 import com.zendesk.maxwell.MaxwellMysqlConfig;
 
@@ -135,8 +134,8 @@ private void parse(String [] argv) {
 				replicationMysql.password = mysql.password;
 		}
 
-		this.schemaDatabaseName = fetchOption("schema_database", options, properties, "maxwell");
-		this.clientID = fetchOption("client_id", options, properties, "maxwell");
+		this.schemaDatabaseName = fetchStringOption("schema_database", options, properties, "maxwell");
+		this.clientID = fetchStringOption("client_id", options, properties, "maxwell");
 
         if ( options.has("database") )
 			this.databaseName = (String) options.valueOf("database");

File: src/main/java/com/zendesk/maxwell/row/RowMapBuffer.java
Patch:
@@ -55,7 +55,7 @@ protected RowMap evict() throws IOException {
 		this.outputStreamCacheSize += r.getApproximateSize();
 		if ( this.outputStreamCacheSize > FlushOutputStreamBytes ) {
 			resetOutputStreamCaches();
-			LOGGER.info("outputStreamCacheSize: " + this.outputStreamCacheSize + ", memorySize: " + this.memorySize);
+			LOGGER.debug("outputStreamCacheSize: " + this.outputStreamCacheSize + ", memorySize: " + this.memorySize);
 			this.outputStreamCacheSize = 0;
 		}
 

File: src/main/java/com/zendesk/maxwell/util/ListWithDiskBuffer.java
Patch:
@@ -36,7 +36,7 @@ protected boolean shouldBuffer() {
 	}
 
 	protected void resetOutputStreamCaches() throws IOException {
-		LOGGER.info("Resetting OutputStream caches. elementsInFile: " + elementsInFile);
+		LOGGER.debug("Resetting OutputStream caches. elementsInFile: " + elementsInFile);
 		os.reset();
 	}
 

File: src/test/java/com/zendesk/maxwell/MaxwellTestSupportCallback.java
Patch:
@@ -5,5 +5,5 @@
 public class MaxwellTestSupportCallback {
 	public void beforeReplicatorStart(MysqlIsolatedServer mysql) throws SQLException {}
 	public void afterReplicatorStart(MysqlIsolatedServer mysql) throws SQLException {}
-	public void beforeTerminate(MysqlIsolatedServer mysql) { }
+	public void beforeTerminate(MysqlIsolatedServer mysql) throws Exception { }
 }

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -189,8 +189,9 @@ private void startHA() throws Exception {
 		Leadership<String> leadership = election.run(memberID);
 
 		// Check if the current node is the leader
-		LOGGER.info("current HA leader: " + leadership.leader());
-		if (leadership.leader().equals(memberID)) {
+		String currentLeader = leadership.leader().id());
+		LOGGER.info("current HA leader: " + currentLeader);
+		if (currentLeader.equals(memberID)) {
 			System.out.println("I am the leader!");
 		}
 

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -179,6 +179,7 @@ public void testConstraintWithFullTableName() {
 	@Test
 	public void testParsingSomeAlters() {
 		String testSQL[] = {
+			"CREATE TABLE employees (   data JSON,   INDEX ((CAST(data->>'$.name' AS CHAR(30)))) )",
 			"ALTER TABLE uat_sync_test.p add COLUMN uat_sync_test.p.remark VARCHAR(100) after pname",
 			"alter table t add column c varchar(255) default 'string1' 'string2'",
 			"alter table t add column mortgage_item BIT(4) NOT NULL DEFAULT 0b0000",

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -179,6 +179,7 @@ public void testConstraintWithFullTableName() {
 	@Test
 	public void testParsingSomeAlters() {
 		String testSQL[] = {
+			"CREATE TABLE employees (   data JSON,   INDEX ((CAST(data->>'$.name' AS CHAR(30)))) )",
 			"ALTER TABLE uat_sync_test.p add COLUMN uat_sync_test.p.remark VARCHAR(100) after pname",
 			"alter table t add column c varchar(255) default 'string1' 'string2'",
 			"alter table t add column mortgage_item BIT(4) NOT NULL DEFAULT 0b0000",

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLIntegrationTest.java
Patch:
@@ -434,7 +434,6 @@ public void testDatabaseAlterMySqlTableCharset() throws Exception {
 				"MODIFY User char(16) NOT NULL default '', " +
 				"MODIFY Table_name char(64) NOT NULL default '', " +
 				"MODIFY Column_name char(64) NOT NULL default '', " +
-				"ENGINE=MyISAM, " +
 				"CONVERT TO CHARACTER SET utf8 COLLATE utf8_bin, " +
 				"COMMENT='Column privileges'");
 	}

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -35,7 +35,6 @@ public Maxwell(MaxwellConfig config) throws SQLException, URISyntaxException {
 	protected Maxwell(MaxwellContext context) throws SQLException, URISyntaxException {
 		this.config = context.getConfig();
 		this.context = context;
-		this.context.probeConnections();
 	}
 
 	public void run() {

File: src/main/java/com/zendesk/maxwell/bootstrap/MaxwellBootstrapUtility.java
Patch:
@@ -131,7 +131,7 @@ private boolean getIsComplete(Connection connection, long rowId) throws SQLExcep
 		}
 	}
 
-	private ConnectionPool getConnectionPool(MaxwellBootstrapUtilityConfig config) {
+	private ConnectionPool getConnectionPool(MaxwellBootstrapUtilityConfig config) throws SQLException {
 		String connectionURI = config.getConnectionURI();
 		return new C3P0ConnectionPool(connectionURI, config.mysql.user, config.mysql.password);
 	}

File: src/main/java/com/zendesk/maxwell/util/ConnectionPool.java
Patch:
@@ -15,6 +15,7 @@ public interface RetryableSQLFunction<T> {
 	Connection getConnection() throws SQLException;
 	void release();
 
+	void probe() throws SQLException;
 	void withSQLRetry(int nTries, RetryableSQLFunction<Connection> inner)
 		throws SQLException, NoSuchElementException, DuplicateProcessException;
 }

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -35,7 +35,6 @@ public Maxwell(MaxwellConfig config) throws SQLException, URISyntaxException {
 	protected Maxwell(MaxwellContext context) throws SQLException, URISyntaxException {
 		this.config = context.getConfig();
 		this.context = context;
-		this.context.probeConnections();
 	}
 
 	public void run() {

File: src/main/java/com/zendesk/maxwell/util/ConnectionPool.java
Patch:
@@ -15,6 +15,7 @@ public interface RetryableSQLFunction<T> {
 	Connection getConnection() throws SQLException;
 	void release();
 
+	void probe() throws SQLException;
 	void withSQLRetry(int nTries, RetryableSQLFunction<Connection> inner)
 		throws SQLException, NoSuchElementException, DuplicateProcessException;
 }

File: src/main/java/com/zendesk/maxwell/bootstrap/MaxwellBootstrapUtility.java
Patch:
@@ -131,7 +131,7 @@ private boolean getIsComplete(Connection connection, long rowId) throws SQLExcep
 		}
 	}
 
-	private ConnectionPool getConnectionPool(MaxwellBootstrapUtilityConfig config) {
+	private ConnectionPool getConnectionPool(MaxwellBootstrapUtilityConfig config) throws SQLException {
 		String connectionURI = config.getConnectionURI();
 		return new C3P0ConnectionPool(connectionURI, config.mysql.user, config.mysql.password);
 	}

File: src/main/java/com/zendesk/maxwell/bootstrap/SynchronousBootstrapper.java
Patch:
@@ -12,6 +12,7 @@
 import com.zendesk.maxwell.schema.SchemaCapturer;
 import com.zendesk.maxwell.schema.Table;
 import com.zendesk.maxwell.schema.columndef.ColumnDef;
+import com.zendesk.maxwell.schema.columndef.DateColumnDef;
 import com.zendesk.maxwell.schema.columndef.TimeColumnDef;
 import com.zendesk.maxwell.scripting.Scripting;
 import org.slf4j.Logger;
@@ -234,6 +235,8 @@ private void setRowValues(RowMap row, ResultSet resultSet, Table table) throws S
 			// need to explicitly coerce TIME into TIMESTAMP in order to preserve nanoseconds
 			if (columnDefinition instanceof TimeColumnDef)
 				columnValue = getTimestamp(resultSet, columnIndex);
+			else if ( columnDefinition instanceof DateColumnDef)
+				columnValue = resultSet.getString(columnIndex);
 			else
 				columnValue = resultSet.getObject(columnIndex);
 

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -219,6 +219,8 @@ private void startInner() throws Exception {
 
 		context.setReplicator(replicator);
 		this.context.start();
+
+		replicator.startReplicator();
 		this.onReplicatorStart();
 
 		replicator.runLoop();

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -219,6 +219,8 @@ private void startInner() throws Exception {
 
 		context.setReplicator(replicator);
 		this.context.start();
+
+		replicator.startReplicator();
 		this.onReplicatorStart();
 
 		replicator.runLoop();

File: src/main/java/com/zendesk/maxwell/producer/MaxwellRedisProducer.java
Patch:
@@ -37,7 +37,7 @@ public MaxwellRedisProducer(MaxwellContext context) {
 
 		if (jedisPool == null) {
 			jedisPool = new JedisPool(
-				createdRedisPoolConfig(), 
+				createRedisPoolConfig(), 
 				context.getConfig().redisHost, 
 				context.getConfig().redisPort,
 				Protocol.DEFAULT_TIMEOUT,
@@ -46,7 +46,7 @@ public MaxwellRedisProducer(MaxwellContext context) {
 		}
 	}
 
-	private JedisPoolConfig createdRedisPoolConfig() {
+	private JedisPoolConfig createRedisPoolConfig() {
 		
 		JedisPoolConfig poolConfig = new JedisPoolConfig();
 		//2 is the most we'll need, one for the bootstrap task and another to the main maxwell thread

File: src/main/java/com/zendesk/maxwell/bootstrap/SynchronousBootstrapper.java
Patch:
@@ -12,6 +12,7 @@
 import com.zendesk.maxwell.schema.SchemaCapturer;
 import com.zendesk.maxwell.schema.Table;
 import com.zendesk.maxwell.schema.columndef.ColumnDef;
+import com.zendesk.maxwell.schema.columndef.DateColumnDef;
 import com.zendesk.maxwell.schema.columndef.TimeColumnDef;
 import com.zendesk.maxwell.scripting.Scripting;
 import org.slf4j.Logger;
@@ -234,6 +235,8 @@ private void setRowValues(RowMap row, ResultSet resultSet, Table table) throws S
 			// need to explicitly coerce TIME into TIMESTAMP in order to preserve nanoseconds
 			if (columnDefinition instanceof TimeColumnDef)
 				columnValue = getTimestamp(resultSet, columnIndex);
+			else if ( columnDefinition instanceof DateColumnDef)
+				columnValue = resultSet.getString(columnIndex);
 			else
 				columnValue = resultSet.getObject(columnIndex);
 

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -236,10 +236,9 @@ public void testParsingSomeAlters() {
 			"alter table something collate = default",
 			"ALTER TABLE t DROP t.foo",
 			"alter table f add column i varchar(255) default ('environment,namespace,table_name')",
+			"CREATE DATABASE xyz DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT ENCRYPTION='N'",
 			"CREATE TABLE testTable18 ( command JSON NOT NULL DEFAULT (JSON_QUOTE(\"{'parent':'sched'}\")) )",
 			"CREATE TABLE testTable19 ( pid BIGINT NOT NULL DEFAULT(1) )"
-
-
 		};
 
 		for ( String s : testSQL ) {

File: src/main/java/com/zendesk/maxwell/bootstrap/BootstrapController.java
Patch:
@@ -94,7 +94,7 @@ public synchronized void setCurrentSchemaID(long schemaID) {
 	private List<BootstrapTask> getIncompleteTasks() throws SQLException {
 		ArrayList<BootstrapTask> list = new ArrayList<>();
 		try ( Connection cx = maxwellConnectionPool.getConnection() ) {
-			PreparedStatement s = cx.prepareStatement("select * from bootstrap where is_complete = 0 and client_id = ? order by id");
+			PreparedStatement s = cx.prepareStatement("select * from bootstrap where is_complete = 0 and client_id = ? and (started_at is null or started_at <= now()) order by isnull(started_at), started_at asc, id asc");
 			s.setString(1, this.clientID);
 
 			ResultSet rs = s.executeQuery();

File: src/main/java/com/zendesk/maxwell/bootstrap/BootstrapController.java
Patch:
@@ -94,7 +94,7 @@ public synchronized void setCurrentSchemaID(long schemaID) {
 	private List<BootstrapTask> getIncompleteTasks() throws SQLException {
 		ArrayList<BootstrapTask> list = new ArrayList<>();
 		try ( Connection cx = maxwellConnectionPool.getConnection() ) {
-			PreparedStatement s = cx.prepareStatement("select * from bootstrap where is_complete = 0 and client_id = ? and (started_at is null or started_at <= now()) order by -started_at desc, id");
+			PreparedStatement s = cx.prepareStatement("select * from bootstrap where is_complete = 0 and client_id = ? and (started_at is null or started_at <= now()) order by isnull(started_at), started_at asc, id asc");
 			s.setString(1, this.clientID);
 
 			ResultSet rs = s.executeQuery();

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -235,9 +235,8 @@ public void testParsingSomeAlters() {
 			"alter table foo.int add column bar varchar(255)",
 			"alter table something collate = default",
 			"ALTER TABLE t DROP t.foo",
-			"alter table f add column i varchar(255) default ('environment,namespace,table_name')"
-
-
+			"alter table f add column i varchar(255) default ('environment,namespace,table_name')",
+			"CREATE DATABASE xyz DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT ENCRYPTION='N'"
 		};
 
 		for ( String s : testSQL ) {

File: src/main/java/com/zendesk/maxwell/producer/MaxwellRedisProducer.java
Patch:
@@ -43,7 +43,7 @@ public MaxwellRedisProducer(MaxwellContext context) {
 	}
 
 	private void initRedisConnection() {
-		jedis = new Jedis(context.getConfig().redisHost, context.getConfig().redisPort, 10);
+		jedis = new Jedis(context.getConfig().redisHost, context.getConfig().redisPort);
 		jedis.connect();
 	}
 

File: src/main/java/com/zendesk/maxwell/util/C3P0ConnectionPool.java
Patch:
@@ -28,7 +28,7 @@ public C3P0ConnectionPool(String url, String user, String password) {
 		cpds.setJdbcUrl(url);
 		cpds.setUser(user);
 		cpds.setPassword(password);
-
+		cpds.setTestConnectionOnCheckout(true);
 
 		// the settings below are optional -- c3p0 can work with defaults
 		cpds.setMinPoolSize(1);

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLIntegrationTest.java
Patch:
@@ -138,8 +138,8 @@ public void testCreateIfNotExists() throws Exception {
 	@Test
 	public void testConstraintCheck() throws Exception {
 		String sql[] = {
-				"create TABLE `t` (id int, CHECK(NOW() is not null and 'lfjd()))()' is not null), c varchar(255))",
-				"create TABLE `t2` (id int, CHECK(NOW() is not null), c varchar(255))",
+				"create TABLE `t` (id int, CHECK(LENGTH(c) is not null and 'lfjd()))()' is not null), c varchar(255))",
+				"create TABLE `t2` (id int, CHECK(LENGTH(c) is not null), c varchar(255))",
 				"create table t1 (a int, b int, check (a>b))"
 		};
 

File: src/main/java/com/zendesk/maxwell/replication/BinlogConnectorReplicator.java
Patch:
@@ -246,7 +246,6 @@ public void stopAtHeartbeat(long heartbeat) {
 	 */
 	private void checkCommErrors() throws ServerException {
 		if (lastCommError != null) {
-			LOGGER.error("Shutting down due to communication errors to Mysql", lastCommError);
 			throw lastCommError;
 		}
 	}

File: src/main/java/com/zendesk/maxwell/util/StoppableTaskState.java
Patch:
@@ -20,7 +20,7 @@ public boolean isRunning() {
 	}
 
 	public synchronized void requestStop() {
-		LOGGER.info(description + " requestStop() called (in state: " + state + ")");
+		LOGGER.debug(description + " requestStop() called (in state: " + state + ")");
 		if (isRunning()) {
 			this.state = RunState.REQUEST_STOP;
 		}

File: src/main/java/com/zendesk/maxwell/schema/PositionStoreThread.java
Patch:
@@ -1,6 +1,7 @@
 package com.zendesk.maxwell.schema;
 
 import com.zendesk.maxwell.MaxwellContext;
+import com.zendesk.maxwell.errors.DuplicateProcessException;
 import com.zendesk.maxwell.replication.Position;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -57,7 +58,7 @@ protected void beforeStop() {
 		}
 	}
 
-	void storeFinalPosition() throws SQLException {
+	void storeFinalPosition() throws SQLException, DuplicateProcessException {
 		if ( position != null && !position.equals(storedPosition) ) {
 			LOGGER.info("Storing final position: " + position);
 			store.set(position);

File: src/main/java/com/zendesk/maxwell/MaxwellMysqlConfig.java
Patch:
@@ -41,6 +41,7 @@ public MaxwellMysqlConfig() {
 
 	public MaxwellMysqlConfig(String host, Integer port, String database, String user, String password,
 			SSLMode sslMode) {
+		this();
 		this.host = host;
 		this.port = port;
 		this.database = database;
@@ -50,6 +51,7 @@ public MaxwellMysqlConfig(String host, Integer port, String database, String use
 	}
 
 	public MaxwellMysqlConfig(MaxwellMysqlConfig c) {
+		this();
 		this.host = c.host;
 		this.port = c.port;
 		this.database = c.database;

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -101,6 +101,7 @@ public class MaxwellConfig extends AbstractConfig {
 	public String metricsDatadogType;
 	public String metricsDatadogTags;
 	public String metricsDatadogAPIKey;
+	public String metricsDatadogSite;
 	public String metricsDatadogHost;
 	public int metricsDatadogPort;
 	public Long metricsDatadogInterval;
@@ -355,6 +356,7 @@ protected MaxwellOptionParser buildOptionParser() {
 		parser.accepts( "metrics_datadog_tags", "datadog tags that should be supplied, e.g. tag1:value1,tag2:value2" ).withRequiredArg();
 		parser.accepts( "metrics_datadog_interval", "the frequency metrics are pushed to datadog, in seconds" ).withRequiredArg();
 		parser.accepts( "metrics_datadog_apikey", "the datadog api key to use when metrics_datadog_type = http" ).withRequiredArg();
+		parser.accepts( "metrics_datadog_site", "the site to publish metrics to when metrics_datadog_type = http, one of us|eu, default us" ).withRequiredArg();
 		parser.accepts( "metrics_datadog_host", "the host to publish metrics to when metrics_datadog_type = udp" ).withRequiredArg();
 		parser.accepts( "metrics_datadog_port", "the port to publish metrics to when metrics_datadog_type = udp" ).withRequiredArg();
 		parser.accepts( "http_diagnostic", "enable http diagnostic endpoint: true|false. default: false" ).withOptionalArg();
@@ -519,6 +521,7 @@ private void setup(OptionSet options, Properties properties) {
 		this.metricsDatadogType = fetchOption("metrics_datadog_type", options, properties, "udp");
 		this.metricsDatadogTags = fetchOption("metrics_datadog_tags", options, properties, "");
 		this.metricsDatadogAPIKey = fetchOption("metrics_datadog_apikey", options, properties, "");
+		this.metricsDatadogSite = fetchOption("metrics_datadog_site", options, properties, "us");
 		this.metricsDatadogHost = fetchOption("metrics_datadog_host", options, properties, "localhost");
 		this.metricsDatadogPort = Integer.parseInt(fetchOption("metrics_datadog_port", options, properties, "8125"));
 		this.metricsDatadogInterval = fetchLongOption("metrics_datadog_interval", options, properties, 60L);

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -234,7 +234,9 @@ public void testParsingSomeAlters() {
 			"create table foo.order ( i int )",
 			"alter table foo.int add column bar varchar(255)",
 			"alter table something collate = default",
-			"ALTER TABLE t DROP t.foo"
+			"ALTER TABLE t DROP t.foo",
+			"alter table f add column i varchar(255) default ('environment,namespace,table_name')"
+
 
 		};
 

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -234,7 +234,9 @@ public void testParsingSomeAlters() {
 			"create table foo.order ( i int )",
 			"alter table foo.int add column bar varchar(255)",
 			"alter table something collate = default",
-			"ALTER TABLE t DROP t.foo"
+			"ALTER TABLE t DROP t.foo",
+			"alter table f add column i varchar(255) default ('environment,namespace,table_name')"
+
 
 		};
 

File: src/main/java/com/zendesk/maxwell/schema/ddl/MysqlParserListener.java
Patch:
@@ -169,7 +169,7 @@ public void exitAdd_column_parens(mysqlParser.Add_column_parensContext ctx) {
 	}
 	@Override
 	public void exitChange_column(mysqlParser.Change_columnContext ctx) {
-		String oldColumnName = unquote(ctx.old_col_name().getText());
+		String oldColumnName = unquote(ctx.full_column_name().col_name.getText());
 
 		ColumnDef c = this.columnDefs.removeFirst();
 		alterStatement().columnMods.add(new ChangeColumnMod(oldColumnName, c, getColumnPosition()));
@@ -189,7 +189,8 @@ public void exitRename_column(Rename_columnContext ctx) {
 
 	@Override
 	public void exitDrop_column(mysqlParser.Drop_columnContext ctx) {
-		alterStatement().columnMods.add(new RemoveColumnMod(unquote(ctx.old_col_name().getText())));
+		String colName = ctx.full_column_name().col_name.getText();
+		alterStatement().columnMods.add(new RemoveColumnMod(unquote(colName)));
 	}
 	@Override
 	public void exitCol_position(mysqlParser.Col_positionContext ctx) {

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLIntegrationTest.java
Patch:
@@ -185,7 +185,8 @@ public void testAddQualifiedColumn() throws Exception {
 		String sql[] = {
 			"create TABLE `foo` (id int(11) unsigned primary KEY)",
 			"alter table foo add column foo.a varchar(255)",
-			"alter table foo add column shard_1.foo.b varchar(255)"
+			"alter table foo add column shard_1.foo.b varchar(255)",
+			"alter table foo drop column shard_1.foo.b"
 		};
 
 		testIntegration(sql);

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -233,7 +233,8 @@ public void testParsingSomeAlters() {
 			"create table vc11( id serial, name varchar(10) not null default \"\")",
 			"create table foo.order ( i int )",
 			"alter table foo.int add column bar varchar(255)",
-			"alter table something collate = default"
+			"alter table something collate = default",
+			"ALTER TABLE t DROP t.foo"
 
 		};
 

File: src/main/java/com/zendesk/maxwell/schema/ddl/MysqlParserListener.java
Patch:
@@ -169,7 +169,7 @@ public void exitAdd_column_parens(mysqlParser.Add_column_parensContext ctx) {
 	}
 	@Override
 	public void exitChange_column(mysqlParser.Change_columnContext ctx) {
-		String oldColumnName = unquote(ctx.old_col_name().getText());
+		String oldColumnName = unquote(ctx.full_column_name().col_name.getText());
 
 		ColumnDef c = this.columnDefs.removeFirst();
 		alterStatement().columnMods.add(new ChangeColumnMod(oldColumnName, c, getColumnPosition()));
@@ -189,7 +189,8 @@ public void exitRename_column(Rename_columnContext ctx) {
 
 	@Override
 	public void exitDrop_column(mysqlParser.Drop_columnContext ctx) {
-		alterStatement().columnMods.add(new RemoveColumnMod(unquote(ctx.old_col_name().getText())));
+		String colName = ctx.full_column_name().col_name.getText();
+		alterStatement().columnMods.add(new RemoveColumnMod(unquote(colName)));
 	}
 	@Override
 	public void exitCol_position(mysqlParser.Col_positionContext ctx) {

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLIntegrationTest.java
Patch:
@@ -185,7 +185,8 @@ public void testAddQualifiedColumn() throws Exception {
 		String sql[] = {
 			"create TABLE `foo` (id int(11) unsigned primary KEY)",
 			"alter table foo add column foo.a varchar(255)",
-			"alter table foo add column shard_1.foo.b varchar(255)"
+			"alter table foo add column shard_1.foo.b varchar(255)",
+			"alter table foo drop column shard_1.foo.b"
 		};
 
 		testIntegration(sql);

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -233,7 +233,8 @@ public void testParsingSomeAlters() {
 			"create table vc11( id serial, name varchar(10) not null default \"\")",
 			"create table foo.order ( i int )",
 			"alter table foo.int add column bar varchar(255)",
-			"alter table something collate = default"
+			"alter table something collate = default",
+			"ALTER TABLE t DROP t.foo"
 
 		};
 

File: src/main/java/com/zendesk/maxwell/producer/MaxwellRedisProducer.java
Patch:
@@ -61,7 +61,7 @@ private void sendToRedis(RowMap msg) throws Exception {
 				jedis.lpush(channel, messageStr);
 				break;
 			case "rpush":
-				jedis.rpush(this.channel, messageStr);
+				jedis.rpush(channel, messageStr);
 				break;
 			case "xadd":
 				Map<String, String> message = new HashMap<>();

File: src/main/java/com/zendesk/maxwell/producer/MaxwellRedisProducer.java
Patch:
@@ -61,7 +61,7 @@ private void sendToRedis(RowMap msg) throws Exception {
 				jedis.lpush(channel, messageStr);
 				break;
 			case "rpush":
-				jedis.rpush(this.channel, messageStr);
+				jedis.rpush(channel, messageStr);
 				break;
 			case "xadd":
 				Map<String, String> message = new HashMap<>();

File: src/main/java/com/zendesk/maxwell/producer/AbstractAsyncProducer.java
Patch:
@@ -39,7 +39,7 @@ public void markCompleted() {
 					long age = currentTime - message.sendTimeMS;
 
 					messagePublishTimer.update(age, TimeUnit.MILLISECONDS);
-					messageLatencyTimer.update(Math.max(0L, age - 500L), TimeUnit.MILLISECONDS);
+					messageLatencyTimer.update(Math.max(0L, currentTime - message.eventTimeMS - 500L), TimeUnit.MILLISECONDS);
 
 					if (age > config.metricsAgeSlo) {
 						messageLatencySloViolationCount.inc();

File: src/main/java/com/zendesk/maxwell/producer/AbstractAsyncProducer.java
Patch:
@@ -39,7 +39,7 @@ public void markCompleted() {
 					long age = currentTime - message.sendTimeMS;
 
 					messagePublishTimer.update(age, TimeUnit.MILLISECONDS);
-					messageLatencyTimer.update(Math.max(0L, age - 500L), TimeUnit.MILLISECONDS);
+					messageLatencyTimer.update(Math.max(0L, currentTime - message.eventTimeMS - 500L), TimeUnit.MILLISECONDS);
 
 					if (age > config.metricsAgeSlo) {
 						messageLatencySloViolationCount.inc();

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -205,13 +205,15 @@ protected MaxwellOptionParser buildOptionParser() {
 		parser.accepts( "replication_user", "username for replication_host" ).withRequiredArg();
 		parser.accepts( "replication_password", "password for replication_host" ).withRequiredArg();
 		parser.accepts( "replication_port", "port for replication_host" ).withRequiredArg();
+		parser.accepts( "replication_jdbc_options", "additional jdbc connection options" ).withRequiredArg();
 
 		parser.separator();
 
 		parser.accepts( "schema_host", "overrides replication_host for retrieving schema" ).withRequiredArg();
 		parser.accepts( "schema_user", "username for schema_host" ).withRequiredArg();
 		parser.accepts( "schema_password", "password for schema_host" ).withRequiredArg();
 		parser.accepts( "schema_port", "port for schema_host" ).withRequiredArg();
+		parser.accepts( "schema_jdbc_options", "additional jdbc connection options" ).withRequiredArg();
 
 		parser.section("operation");
 

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -205,13 +205,15 @@ protected MaxwellOptionParser buildOptionParser() {
 		parser.accepts( "replication_user", "username for replication_host" ).withRequiredArg();
 		parser.accepts( "replication_password", "password for replication_host" ).withRequiredArg();
 		parser.accepts( "replication_port", "port for replication_host" ).withRequiredArg();
+		parser.accepts( "replication_jdbc_options", "additional jdbc connection options" ).withRequiredArg();
 
 		parser.separator();
 
 		parser.accepts( "schema_host", "overrides replication_host for retrieving schema" ).withRequiredArg();
 		parser.accepts( "schema_user", "username for schema_host" ).withRequiredArg();
 		parser.accepts( "schema_password", "password for schema_host" ).withRequiredArg();
 		parser.accepts( "schema_port", "port for schema_host" ).withRequiredArg();
+		parser.accepts( "schema_jdbc_options", "additional jdbc connection options" ).withRequiredArg();
 
 		parser.section("operation");
 

File: src/main/java/com/zendesk/maxwell/bootstrap/MaxwellBootstrapUtilityConfig.java
Patch:
@@ -129,9 +129,6 @@ else if ( !options.has("abort") && !options.has("monitor") )
 		if ( options.has("where")  && !StringUtils.isEmpty(((String) options.valueOf("where"))) )
 			this.whereClause = (String) options.valueOf("where");
 
-		if ( options.has("client_id") )
-			this.clientID = (String) options.valueOf("client_id");
-
 		if ( options.has("comment") )
 			this.comment = (String) options.valueOf("comment");
 	}

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -265,7 +265,8 @@ public void testSQLBlacklist() {
 			"CREATE ROLE 'administrator', 'developer'",
 			"SET ROLE 'role1', 'role2'",
 			"SET DEFAULT ROLE administrator, developer TO 'joe'@'10.0.0.1'",
-			"DROP ROLE 'role1'"
+			"DROP ROLE 'role1'",
+			"#comment\ndrop procedure if exists `foo`"
 		};
 
 		for ( String s : testSQL ) {

File: src/main/java/com/zendesk/maxwell/producer/MaxwellRedisProducer.java
Patch:
@@ -27,9 +27,9 @@ public MaxwellRedisProducer(MaxwellContext context, String redisPubChannel, Stri
 	public MaxwellRedisProducer(MaxwellContext context) {
 		super(context);
 
-		this.interpolateChannel = channel.contains("%{");
-		this.redisType = redisType;
 		this.channel = context.getConfig().redisKey;
+		this.interpolateChannel = channel.contains("%{");
+		this.redisType = context.getConfig().redisType;
 
 		jedis = new Jedis(context.getConfig().redisHost, context.getConfig().redisPort);
 		jedis.connect();

File: src/main/java/com/zendesk/maxwell/bootstrap/MaxwellBootstrapUtilityConfig.java
Patch:
@@ -95,6 +95,7 @@ private void parse(String [] argv) {
 			this.mysql.host = "localhost";
 
 		this.schemaDatabaseName = fetchOption("schema_database", options, properties, "maxwell");
+		this.clientID = fetchOption("client_id", options, properties, "maxwell");
 
         if ( options.has("database") )
 			this.databaseName = (String) options.valueOf("database");
@@ -125,9 +126,6 @@ else if ( !options.has("abort") && !options.has("monitor") )
 
 		if ( options.has("where")  && !StringUtils.isEmpty(((String) options.valueOf("where"))) )
 			this.whereClause = (String) options.valueOf("where");
-
-		if ( options.has("client_id") )
-			this.clientID = (String) options.valueOf("client_id");
 	}
 
 	private Properties parseFile(String filename, boolean abortOnMissing) {

File: src/main/java/com/zendesk/maxwell/bootstrap/BootstrapTask.java
Patch:
@@ -16,6 +16,7 @@ public class BootstrapTask {
 	public boolean complete;
 	public Timestamp startedAt;
 	public Timestamp completedAt;
+	public String comment;
 
 	public volatile boolean abort;
 
@@ -37,6 +38,7 @@ static BootstrapTask valueOf(ResultSet rs) throws SQLException {
 		task.complete = rs.getBoolean("is_complete");
 		task.completedAt = rs.getTimestamp("completed_at");
 		task.startedAt = rs.getTimestamp("started_at");
+		task.comment = rs.getString("comment");
 		return task;
 	}
 

File: src/main/java/com/zendesk/maxwell/producer/KafkaProducerDiagnostic.java
Patch:
@@ -50,7 +50,7 @@ public CompletableFuture<Long> getLatency() {
 		DiagnosticCallback callback = new DiagnosticCallback();
 		try {
 			RowMap rowMap = new RowMap("insert", config.databaseName, "dummy", System.currentTimeMillis(),
-					new ArrayList<>(), positionStoreThread.getPosition());
+					new ArrayList<>(), positionStoreThread.getPosition(), null);
 			rowMap.setTXCommit();
 			ProducerRecord<String, String> record = producer.makeProducerRecord(rowMap);
 			producer.sendAsync(record, callback);

File: src/main/java/com/zendesk/maxwell/replication/BinlogConnectorEvent.java
Patch:
@@ -155,7 +155,8 @@ private RowMap buildRowMap(String type, Position position, Position nextPosition
 			table.getPKList(),
 			position,
 			nextPosition,
-			rowQuery
+			rowQuery, 
+			null
 		);
 
 		writeData(table, map, data, includedColumns);

File: src/main/java/com/zendesk/maxwell/row/FieldNames.java
Patch:
@@ -28,9 +28,10 @@ public class FieldNames {
 	public static final String PRIMARY_KEY = "primary_key";
 	public static final String PRIMARY_KEY_COLUMNS = "primary_key_columns";
 	public static final String REASON = "reason";
+	public static final String COMMENT = "comment";
 
 	private static List<String> fieldNamesList = Arrays.asList(COMMIT, DATA, DATABASE,
-	GTID, OLD, POSITION, PRIMARY_KEY, PRIMARY_KEY_COLUMNS, QUERY, SERVER_ID, TABLE, THREAD_ID, TIMESTAMP, TRANSACTION_ID, TYPE, UUID);
+	GTID, OLD, POSITION, PRIMARY_KEY, PRIMARY_KEY_COLUMNS, QUERY, SERVER_ID, TABLE, THREAD_ID, TIMESTAMP, TRANSACTION_ID, TYPE, UUID, COMMENT);
 
 	private static final Set<String> fieldNamesSet = new HashSet<>(fieldNamesList);
 

File: src/main/java/com/zendesk/maxwell/row/HeartbeatRowMap.java
Patch:
@@ -12,7 +12,7 @@
  */
 public class HeartbeatRowMap extends RowMap {
 	public HeartbeatRowMap(String database, Position position, Position nextPosition) {
-		super("heartbeat", database, "heartbeats", position.getLastHeartbeatRead(), new ArrayList<String>(), position, nextPosition, null);
+		super("heartbeat", database, "heartbeats", position.getLastHeartbeatRead(), new ArrayList<String>(), position, nextPosition, null, null);
 	}
 
 	public static HeartbeatRowMap valueOf(String database, Position position, Position nextPosition) {

File: src/main/java/com/zendesk/maxwell/schema/ddl/DDLMap.java
Patch:
@@ -21,7 +21,7 @@ public class DDLMap extends RowMap {
 	private final Long schemaId;
 
 	public DDLMap(ResolvedSchemaChange change, Long timestamp, String sql, Position position, Position nextPosition, Long schemaId) {
-		super("ddl", change.databaseName(), change.tableName(), timestamp, new ArrayList<>(0), position, nextPosition, sql);
+		super("ddl", change.databaseName(), change.tableName(), timestamp, new ArrayList<>(0), position, nextPosition, sql, null);
 		this.change = change;
 		this.timestamp = timestamp;
 		this.sql = sql;

File: src/test/java/com/zendesk/maxwell/producer/MaxwellKinesisProducerTest.java
Patch:
@@ -29,7 +29,7 @@ public void dealsWithTooLargeRecord() throws Exception {
 		String kinesisStream = "test-stream";
 		MaxwellKinesisProducer producer = new MaxwellKinesisProducer(context, kinesisStream);
 
-		RowMap rowMap = new RowMap("insert", "MyDatabase", "MyTable", TIMESTAMP_MILLISECONDS, new ArrayList<String>(), POSITION);
+		RowMap rowMap = new RowMap("insert", "MyDatabase", "MyTable", TIMESTAMP_MILLISECONDS, new ArrayList<String>(), POSITION, null);
 		StringBuilder r = new StringBuilder();
 		for (int i = 0; i < 100_000; i++) {
 			r.append("long string");

File: src/test/java/com/zendesk/maxwell/producer/partitioners/MaxwellKafkaPartitionerTest.java
Patch:
@@ -14,7 +14,7 @@
 public class MaxwellKafkaPartitionerTest {
 	@Test
 	public void testRowMapEqualsDDLPartitioning() {
-		RowMap r = new RowMap("insert", "db", "tbl", 0L, new ArrayList<>(), null);
+		RowMap r = new RowMap("insert", "db", "tbl", 0L, new ArrayList<>(), null, null);
 		ResolvedDatabaseAlter m = new ResolvedDatabaseAlter("db", "utf8");
 		DDLMap d = new DDLMap(m, 0L, "alter-sql", null, null, null);
 

File: src/test/java/com/zendesk/maxwell/recovery/RecoveryTest.java
Patch:
@@ -379,7 +379,8 @@ public void testSchemaIdRestore() throws Exception {
 		LOGGER.info("New pos: " + newPosition);
 		MysqlSavedSchema newSavedSchema = MysqlSavedSchema.restore(context, newPosition);
 		LOGGER.info("New schema id: " + newSavedSchema.getSchemaID());
-		assertEquals(new Long(oldSchemaId + 1), newSavedSchema.getSchemaID());
+		// TODO: this is oldSchemaId +3 insteand of +1 to offset for the maxwell.bootstrap schema migrations and does not seem like a viable long term solution
+		assertEquals(new Long(oldSchemaId + 3), newSavedSchema.getSchemaID());
 		assertTrue(newPosition.newerThan(savedSchema.getPosition()));
 
 		MysqlSavedSchema restored = MysqlSavedSchema.restore(context, oldlogPosition);

File: src/main/java/com/zendesk/maxwell/bootstrap/BootstrapTask.java
Patch:
@@ -16,6 +16,7 @@ public class BootstrapTask {
 	public boolean complete;
 	public Timestamp startedAt;
 	public Timestamp completedAt;
+	public String comment;
 
 	public volatile boolean abort;
 
@@ -37,6 +38,7 @@ static BootstrapTask valueOf(ResultSet rs) throws SQLException {
 		task.complete = rs.getBoolean("is_complete");
 		task.completedAt = rs.getTimestamp("completed_at");
 		task.startedAt = rs.getTimestamp("started_at");
+		task.comment = rs.getString("comment");
 		return task;
 	}
 

File: src/main/java/com/zendesk/maxwell/producer/KafkaProducerDiagnostic.java
Patch:
@@ -50,7 +50,7 @@ public CompletableFuture<Long> getLatency() {
 		DiagnosticCallback callback = new DiagnosticCallback();
 		try {
 			RowMap rowMap = new RowMap("insert", config.databaseName, "dummy", System.currentTimeMillis(),
-					new ArrayList<>(), positionStoreThread.getPosition());
+					new ArrayList<>(), positionStoreThread.getPosition(), null);
 			rowMap.setTXCommit();
 			ProducerRecord<String, String> record = producer.makeProducerRecord(rowMap);
 			producer.sendAsync(record, callback);

File: src/main/java/com/zendesk/maxwell/replication/BinlogConnectorEvent.java
Patch:
@@ -155,7 +155,8 @@ private RowMap buildRowMap(String type, Position position, Position nextPosition
 			table.getPKList(),
 			position,
 			nextPosition,
-			rowQuery
+			rowQuery, 
+			null
 		);
 
 		writeData(table, map, data, includedColumns);

File: src/main/java/com/zendesk/maxwell/row/FieldNames.java
Patch:
@@ -28,9 +28,10 @@ public class FieldNames {
 	public static final String PRIMARY_KEY = "primary_key";
 	public static final String PRIMARY_KEY_COLUMNS = "primary_key_columns";
 	public static final String REASON = "reason";
+	public static final String COMMENT = "comment";
 
 	private static List<String> fieldNamesList = Arrays.asList(COMMIT, DATA, DATABASE,
-	GTID, OLD, POSITION, PRIMARY_KEY, PRIMARY_KEY_COLUMNS, QUERY, SERVER_ID, TABLE, THREAD_ID, TIMESTAMP, TRANSACTION_ID, TYPE, UUID);
+	GTID, OLD, POSITION, PRIMARY_KEY, PRIMARY_KEY_COLUMNS, QUERY, SERVER_ID, TABLE, THREAD_ID, TIMESTAMP, TRANSACTION_ID, TYPE, UUID, COMMENT);
 
 	private static final Set<String> fieldNamesSet = new HashSet<>(fieldNamesList);
 

File: src/main/java/com/zendesk/maxwell/row/HeartbeatRowMap.java
Patch:
@@ -12,7 +12,7 @@
  */
 public class HeartbeatRowMap extends RowMap {
 	public HeartbeatRowMap(String database, Position position, Position nextPosition) {
-		super("heartbeat", database, "heartbeats", position.getLastHeartbeatRead(), new ArrayList<String>(), position, nextPosition, null);
+		super("heartbeat", database, "heartbeats", position.getLastHeartbeatRead(), new ArrayList<String>(), position, nextPosition, null, null);
 	}
 
 	public static HeartbeatRowMap valueOf(String database, Position position, Position nextPosition) {

File: src/main/java/com/zendesk/maxwell/schema/ddl/DDLMap.java
Patch:
@@ -21,7 +21,7 @@ public class DDLMap extends RowMap {
 	private final Long schemaId;
 
 	public DDLMap(ResolvedSchemaChange change, Long timestamp, String sql, Position position, Position nextPosition, Long schemaId) {
-		super("ddl", change.databaseName(), change.tableName(), timestamp, new ArrayList<>(0), position, nextPosition, sql);
+		super("ddl", change.databaseName(), change.tableName(), timestamp, new ArrayList<>(0), position, nextPosition, sql, null);
 		this.change = change;
 		this.timestamp = timestamp;
 		this.sql = sql;

File: src/test/java/com/zendesk/maxwell/producer/MaxwellKinesisProducerTest.java
Patch:
@@ -29,7 +29,7 @@ public void dealsWithTooLargeRecord() throws Exception {
 		String kinesisStream = "test-stream";
 		MaxwellKinesisProducer producer = new MaxwellKinesisProducer(context, kinesisStream);
 
-		RowMap rowMap = new RowMap("insert", "MyDatabase", "MyTable", TIMESTAMP_MILLISECONDS, new ArrayList<String>(), POSITION);
+		RowMap rowMap = new RowMap("insert", "MyDatabase", "MyTable", TIMESTAMP_MILLISECONDS, new ArrayList<String>(), POSITION, null);
 		StringBuilder r = new StringBuilder();
 		for (int i = 0; i < 100_000; i++) {
 			r.append("long string");

File: src/test/java/com/zendesk/maxwell/producer/partitioners/MaxwellKafkaPartitionerTest.java
Patch:
@@ -14,7 +14,7 @@
 public class MaxwellKafkaPartitionerTest {
 	@Test
 	public void testRowMapEqualsDDLPartitioning() {
-		RowMap r = new RowMap("insert", "db", "tbl", 0L, new ArrayList<>(), null);
+		RowMap r = new RowMap("insert", "db", "tbl", 0L, new ArrayList<>(), null, null);
 		ResolvedDatabaseAlter m = new ResolvedDatabaseAlter("db", "utf8");
 		DDLMap d = new DDLMap(m, 0L, "alter-sql", null, null, null);
 

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -710,8 +710,8 @@ public void validate() {
 				usage("--pubsub_max_retry_delay must be > 0");
 			if (this.pubsubInitialRpcTimeout.isNegative() || this.pubsubInitialRpcTimeout.isZero())
 				usage("--pubsub_initial_rpc_timeout must be > 0");
-			if (this.pubsubRpcTimeoutMultiplier <= 1.0)
-				usage("--pubsub_rpc_timeout_multiplier must be > 1.0");
+			if (this.pubsubRpcTimeoutMultiplier < 1.0)
+				usage("--pubsub_rpc_timeout_multiplier must be >= 1.0");
 			if (this.pubsubMaxRpcTimeout.isNegative() || this.pubsubMaxRpcTimeout.isZero())
 				usage("--pubsub_max_rpc_timeout must be > 0");
 			if (this.pubsubTotalTimeout.isNegative() || this.pubsubTotalTimeout.isZero())

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -704,7 +704,7 @@ public void validate() {
 				usage("--pubsub_publish_delay_threshold must be > 0");
 			if (this.pubsubRetryDelay.isNegative() || this.pubsubRetryDelay.isZero())
 				usage("--pubsub_retry_delay must be > 0");
-			if (this.pubsubRetryDelayMultiplier < 1.0)
+			if (this.pubsubRetryDelayMultiplier <= 1.0)
 				usage("--pubsub_retry_delay_multiplier must be > 1.0");
 			if (this.pubsubMaxRetryDelay.isNegative() || this.pubsubMaxRetryDelay.isZero())
 				usage("--pubsub_max_retry_delay must be > 0");

File: src/main/java/com/zendesk/maxwell/MaxwellContext.java
Patch:
@@ -348,7 +348,7 @@ public AbstractProducer getProducer() throws IOException {
 				this.producer = new RabbitmqProducer(this);
 				break;
 			case "redis":
-				this.producer = new MaxwellRedisProducer(this, this.config.redisType);
+				this.producer = new MaxwellRedisProducer(this);
 				break;
 			case "none":
 				this.producer = new NoneProducer(this);

File: src/main/java/com/zendesk/maxwell/MaxwellContext.java
Patch:
@@ -348,7 +348,7 @@ public AbstractProducer getProducer() throws IOException {
 				this.producer = new RabbitmqProducer(this);
 				break;
 			case "redis":
-				this.producer = new MaxwellRedisProducer(this, this.config.redisPubChannel, this.config.redisListKey, this.config.redisType);
+				this.producer = new MaxwellRedisProducer(this, this.config.redisType);
 				break;
 			case "none":
 				this.producer = new NoneProducer(this);

File: src/main/java/com/zendesk/maxwell/producer/MaxwellRedisProducer.java
Patch:
@@ -18,7 +18,7 @@ public class MaxwellRedisProducer extends AbstractProducer implements StoppableT
 	private final Jedis jedis;
 
 	@Deprecated
-    public MaxwellRedisProducer(MaxwellContext context, String redisPubChannel, String redisListKey, String redisType) {
+	public MaxwellRedisProducer(MaxwellContext context, String redisPubChannel, String redisListKey, String redisType) {
 		this(context, redisType);
 	}
 

File: src/main/java/com/zendesk/maxwell/MaxwellContext.java
Patch:
@@ -348,7 +348,7 @@ public AbstractProducer getProducer() throws IOException {
 				this.producer = new RabbitmqProducer(this);
 				break;
 			case "redis":
-				this.producer = new MaxwellRedisProducer(this, this.config.redisPubChannel, this.config.redisListKey, this.config.redisType);
+				this.producer = new MaxwellRedisProducer(this, this.config.redisType);
 				break;
 			case "none":
 				this.producer = new NoneProducer(this);

File: src/main/java/com/zendesk/maxwell/recovery/Recovery.java
Patch:
@@ -74,7 +74,7 @@ public HeartbeatRowMap recover() throws Exception {
 					null,
 					new RecoveryFilter(this.maxwellDatabaseName),
 					new MaxwellOutputConfig(),
-					0.25 // Default memory usage size, not used 
+					0.25f // Default memory usage size, not used 
 			);
 
 			HeartbeatRowMap h = findHeartbeat(replicator);

File: src/main/java/com/zendesk/maxwell/MaxwellContext.java
Patch:
@@ -262,6 +262,9 @@ public void setPosition(RowMap r) {
 	}
 
 	public void setPosition(Position position) {
+		if ( position == null )
+			return;
+
 		this.getPositionStoreThread().setPosition(position);
 	}
 

File: src/main/java/com/zendesk/maxwell/bootstrap/SynchronousBootstrapper.java
Patch:
@@ -107,7 +107,7 @@ protected Connection getConnection(String databaseName) throws SQLException {
 	}
 
 	protected Connection getStreamingConnection(String databaseName) throws SQLException, URISyntaxException {
-		Connection conn = DriverManager.getConnection(context.getConfig().replicationMysql.getConnectionURI(), context.getConfig().replicationMysql.user, context.getConfig().replicationMysql.password);
+		Connection conn = DriverManager.getConnection(context.getConfig().replicationMysql.getConnectionURI(false), context.getConfig().replicationMysql.user, context.getConfig().replicationMysql.password);
 		conn.setCatalog(databaseName);
 		return conn;
 	}

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -167,6 +167,7 @@ public void testConstraintWithFullTableName() {
 	@Test
 	public void testParsingSomeAlters() {
 		String testSQL[] = {
+			"ALTER TABLE uat_sync_test.p add COLUMN uat_sync_test.p.remark VARCHAR(100) after pname",
 			"alter table t add column c varchar(255) default 'string1' 'string2'",
 			"alter table t add column mortgage_item BIT(4) NOT NULL DEFAULT 0b0000",
 			"alter table t add column mortgage_item BIT(4) NOT NULL DEFAULT 'b'01010",

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -167,6 +167,7 @@ public void testConstraintWithFullTableName() {
 	@Test
 	public void testParsingSomeAlters() {
 		String testSQL[] = {
+			"ALTER TABLE uat_sync_test.p add COLUMN uat_sync_test.p.remark VARCHAR(100) after pname",
 			"alter table t add column c varchar(255) default 'string1' 'string2'",
 			"alter table t add column mortgage_item BIT(4) NOT NULL DEFAULT 0b0000",
 			"alter table t add column mortgage_item BIT(4) NOT NULL DEFAULT 'b'01010",

File: src/main/java/com/zendesk/maxwell/producer/BufferedProducer.java
Patch:
@@ -4,7 +4,6 @@
 import com.zendesk.maxwell.row.HeartbeatRowMap;
 import com.zendesk.maxwell.row.RowMap;
 
-import java.sql.SQLException;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.TimeUnit;
 

File: src/main/java/com/zendesk/maxwell/row/RowMap.java
Patch:
@@ -88,7 +88,7 @@ public RowIdentity getRowIdentity() {
 			for (String pk: pkColumns) {
 				entries.add(Pair.of(pk, data.get(pk)));
 			}
-			rowIdentity = new RowIdentity(database, table, entries);
+			rowIdentity = new RowIdentity(database, table, rowType, entries);
 		}
 
 		return rowIdentity;

File: src/test/java/com/zendesk/maxwell/producer/MaxwellKafkaProducerWorkerTest.java
Patch:
@@ -39,7 +39,7 @@ public void fallbackPublishIsDeferred() {
 		Producer<String,String> producer = (Producer<String,String>) mock(Producer.class);
 		KafkaCallback callback = mock(KafkaCallback.class);
 		String kafkaTopic = "maxwell";
-		RowIdentity rowId = new RowIdentity("MyDatabase", "MyTable", Collections.emptyList());
+		RowIdentity rowId = new RowIdentity("MyDatabase", "MyTable", "insert", Collections.emptyList());
 		MaxwellKafkaProducerWorker worker = new MaxwellKafkaProducerWorker(context, kafkaTopic, null, producer);
 
 		worker.enqueueFallbackRow("maxwell.errors", rowId, callback, null, new Exception("The broker is grumpy"));

File: src/main/java/com/zendesk/maxwell/row/RowMap.java
Patch:
@@ -88,7 +88,7 @@ public RowIdentity getRowIdentity() {
 			for (String pk: pkColumns) {
 				entries.add(Pair.of(pk, data.get(pk)));
 			}
-			rowIdentity = new RowIdentity(database, table, entries);
+			rowIdentity = new RowIdentity(database, table, rowType, entries);
 		}
 
 		return rowIdentity;

File: src/test/java/com/zendesk/maxwell/producer/MaxwellKafkaProducerWorkerTest.java
Patch:
@@ -39,7 +39,7 @@ public void fallbackPublishIsDeferred() {
 		Producer<String,String> producer = (Producer<String,String>) mock(Producer.class);
 		KafkaCallback callback = mock(KafkaCallback.class);
 		String kafkaTopic = "maxwell";
-		RowIdentity rowId = new RowIdentity("MyDatabase", "MyTable", Collections.emptyList());
+		RowIdentity rowId = new RowIdentity("MyDatabase", "MyTable", "insert", Collections.emptyList());
 		MaxwellKafkaProducerWorker worker = new MaxwellKafkaProducerWorker(context, kafkaTopic, null, producer);
 
 		worker.enqueueFallbackRow("maxwell.errors", rowId, callback, null, new Exception("The broker is grumpy"));

File: src/main/java/com/zendesk/maxwell/producer/BufferedProducer.java
Patch:
@@ -4,7 +4,6 @@
 import com.zendesk.maxwell.row.HeartbeatRowMap;
 import com.zendesk.maxwell.row.RowMap;
 
-import java.sql.SQLException;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.TimeUnit;
 

File: src/main/java/com/zendesk/maxwell/producer/BufferedProducer.java
Patch:
@@ -4,7 +4,6 @@
 import com.zendesk.maxwell.row.HeartbeatRowMap;
 import com.zendesk.maxwell.row.RowMap;
 
-import java.sql.SQLException;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.TimeUnit;
 

File: src/main/java/com/zendesk/maxwell/MaxwellContext.java
Patch:
@@ -262,6 +262,9 @@ public void setPosition(RowMap r) {
 	}
 
 	public void setPosition(Position position) {
+		if ( position == null )
+			return;
+
 		this.getPositionStoreThread().setPosition(position);
 	}
 

File: src/main/java/com/zendesk/maxwell/MaxwellContext.java
Patch:
@@ -348,7 +348,7 @@ public AbstractProducer getProducer() throws IOException {
 				this.producer = new MaxwellRedisProducer(this, this.config.redisPubChannel, this.config.redisListKey, this.config.redisType);
 				break;
 			case "none":
-				this.producer = null;
+				this.producer = new NoneProducer(this);
 				break;
 			default:
 				throw new RuntimeException("Unknown producer type: " + this.config.producerType);

File: src/main/java/com/zendesk/maxwell/MaxwellContext.java
Patch:
@@ -348,7 +348,7 @@ public AbstractProducer getProducer() throws IOException {
 				this.producer = new MaxwellRedisProducer(this, this.config.redisPubChannel, this.config.redisListKey, this.config.redisType);
 				break;
 			case "none":
-				this.producer = null;
+				this.producer = new NoneProducer(this);
 				break;
 			default:
 				throw new RuntimeException("Unknown producer type: " + this.config.producerType);

File: src/test/java/com/zendesk/maxwell/producer/KafkaCallbackTest.java
Patch:
@@ -41,7 +41,7 @@ private KafkaCallback makeCallback(
 
 		return new KafkaCallback(cc, position, id, "value",
 				new Counter(), new Counter(), new Meter(), new Meter(),
-				context.getConfig().deadLetterTopic, context, producer);
+				"maxwell", context.getConfig().deadLetterTopic, context, producer);
 	}
 
 	@Test
@@ -88,7 +88,7 @@ public void shouldPublishFallbackRecordOnRecordTooLargeWhenConfigured() throws E
 		verifyZeroInteractions(cc);
 
 		ArgumentCaptor<KafkaCallback> cbCaptor = ArgumentCaptor.forClass(KafkaCallback.class);
-		verify(producer).sendFallbackAsync(eq("dead_letters"), eq(id), cbCaptor.capture(), any(), eq(error));
+		verify(producer).enqueueFallbackRow(eq("dead_letters"), eq(id), cbCaptor.capture(), any(), eq(error));
 		Assert.assertEquals(null, cbCaptor.getValue().getFallbackTopic());
 		cbCaptor.getValue().onCompletion(recordMetadata, null);
 		verify(cc).markCompleted();
@@ -114,7 +114,7 @@ public void shouldPublishFallbackRecordOnRetriableExceptionWhenConfiguredWithFal
 		verifyZeroInteractions(cc);
 
 		ArgumentCaptor<KafkaCallback> cbCaptor = ArgumentCaptor.forClass(KafkaCallback.class);
-		verify(producer).sendFallbackAsync(eq("dead_letters"), eq(id), cbCaptor.capture(), any(), eq(error));
+		verify(producer).enqueueFallbackRow(eq("dead_letters"), eq(id), cbCaptor.capture(), any(), eq(error));
 		Assert.assertEquals(null, cbCaptor.getValue().getFallbackTopic());
 		cbCaptor.getValue().onCompletion(recordMetadata, null);
 		verify(cc).markCompleted();

File: src/test/java/com/zendesk/maxwell/BootstrapIntegrationTest.java
Patch:
@@ -243,8 +243,7 @@ private void testColumnTypeSerialization(EncryptionMode encryptionMode, List<Row
 			if ( output.get("table").equals("column_test") && output.get("type").toString().contains("insert") ) {
 				Map<String, Object> dataSource = encryptionMode == EncryptionMode.ENCRYPT_DATA ? decrypted : output;
 				Map<String, Object> data = (Map<String, Object>) dataSource.get("data");
-				if ( !foundNormalRow ) {
-					foundNormalRow = true;
+				if ( output.get("type").equals("insert") ) {
 					assertThat(data.get("col"), is(expectedNormalJsonValue));
 				} else {
 					assertThat(data.get("col"), is(expectedBootstrappedJsonValue));

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -190,7 +190,7 @@ private void startInner() throws Exception {
 		this.context.setPosition(initPosition);
 
 		MysqlSchemaStore mysqlSchemaStore = new MysqlSchemaStore(this.context, initPosition);
-		BootstrapController bootstrapController = this.context.startBootstrapController(mysqlSchemaStore.getSchemaID());
+		BootstrapController bootstrapController = this.context.getBootstrapController(mysqlSchemaStore.getSchemaID());
 
 		if (config.recaptureSchema) {
 			mysqlSchemaStore.captureAndSaveSchema();

File: src/test/java/com/zendesk/maxwell/MaxwellTestSupport.java
Patch:
@@ -190,7 +190,7 @@ public static List<RowMap> getRowsWithReplicator(
 		callback.beforeReplicatorStart(mysql);
 
 		config.initPosition = capture(mysql.getConnection());
-		final String waitObject = new String("");
+		final String waitObject = "";
 		final BufferedMaxwell maxwell = new BufferedMaxwell(config) {
 			@Override
 			protected void onReplicatorStart() {
@@ -221,6 +221,8 @@ public void run() {
 		}
 
 		callback.afterReplicatorStart(mysql);
+		maxwell.context.getBootstrapController(null).interrupt();
+
 		long finalHeartbeat = maxwell.context.getPositionStore().heartbeat();
 
 		LOGGER.debug("running replicator up to heartbeat: " + finalHeartbeat);

File: src/main/java/com/zendesk/maxwell/MaxwellContext.java
Patch:
@@ -62,6 +62,7 @@ public MaxwellContext(MaxwellConfig config) throws SQLException, URISyntaxExcept
 
 		this.replicationConnectionPool = new ConnectionPool("ReplicationConnectionPool", 10, 0, 10,
 				config.replicationMysql.getConnectionURI(false), config.replicationMysql.user, config.replicationMysql.password);
+		this.replicationConnectionPool.setCaching(false);
 
 		if (config.schemaMysql.host == null) {
 			this.schemaConnectionPool = null;

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -221,7 +221,8 @@ public void testParsingSomeAlters() {
 			"ALTER TABLE \"foo\" drop column a", // ansi-double-quoted tables
 			"create table vc11( id serial, name varchar(10) not null default \"\")",
 			"create table foo.order ( i int )",
-			"alter table foo.int add column bar varchar(255)"
+			"alter table foo.int add column bar varchar(255)",
+			"alter table something collate = default"
 
 		};
 

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -221,7 +221,8 @@ public void testParsingSomeAlters() {
 			"ALTER TABLE \"foo\" drop column a", // ansi-double-quoted tables
 			"create table vc11( id serial, name varchar(10) not null default \"\")",
 			"create table foo.order ( i int )",
-			"alter table foo.int add column bar varchar(255)"
+			"alter table foo.int add column bar varchar(255)",
+			"alter table something collate = default"
 
 		};
 

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -219,7 +219,9 @@ public void testParsingSomeAlters() {
 			"ALTER TABLE foo DROP COLUMN `ducati` CASCADE",
 			"CREATE TABLE account_groups ( visible_to_all CHAR(1) DEFAULT 'N' NOT NULL CHECK (visible_to_all IN ('Y','N')))",
 			"ALTER TABLE \"foo\" drop column a", // ansi-double-quoted tables
-			"create table vc11( id serial, name varchar(10) not null default \"\")"
+			"create table vc11( id serial, name varchar(10) not null default \"\")",
+			"create table foo.order ( i int )",
+			"alter table foo.int add column bar varchar(255)"
 
 		};
 

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -219,7 +219,9 @@ public void testParsingSomeAlters() {
 			"ALTER TABLE foo DROP COLUMN `ducati` CASCADE",
 			"CREATE TABLE account_groups ( visible_to_all CHAR(1) DEFAULT 'N' NOT NULL CHECK (visible_to_all IN ('Y','N')))",
 			"ALTER TABLE \"foo\" drop column a", // ansi-double-quoted tables
-			"create table vc11( id serial, name varchar(10) not null default \"\")"
+			"create table vc11( id serial, name varchar(10) not null default \"\")",
+			"create table foo.order ( i int )",
+			"alter table foo.int add column bar varchar(255)"
 
 		};
 

File: src/main/java/com/zendesk/maxwell/schema/ddl/ColumnMod.java
Patch:
@@ -2,6 +2,8 @@
 
 import com.zendesk.maxwell.schema.Table;
 
+import java.util.List;
+
 abstract class ColumnMod {
 	public String name;
 
@@ -18,5 +20,5 @@ protected int originalIndex(Table table) throws InvalidSchemaError {
 		return originalIndex;
 	}
 
-	public abstract void apply(Table table) throws InvalidSchemaError;
+	public abstract void apply(Table table, List<DeferredPositionUpdate> deferred) throws InvalidSchemaError;
 }

File: src/main/java/com/zendesk/maxwell/schema/ddl/RemoveColumnMod.java
Patch:
@@ -2,13 +2,15 @@
 
 import com.zendesk.maxwell.schema.Table;
 
+import java.util.List;
+
 class RemoveColumnMod extends ColumnMod {
 	public RemoveColumnMod(String name) {
 		super(name);
 	}
 
 	@Override
-	public void apply(Table table) throws InvalidSchemaError {
+	public void apply(Table table, List<DeferredPositionUpdate> deferred) throws InvalidSchemaError {
 		table.removeColumn(originalIndex(table));
 	}
 }

File: src/main/java/com/zendesk/maxwell/schema/ddl/RenameColumnMod.java
Patch:
@@ -2,6 +2,8 @@
 
 import com.zendesk.maxwell.schema.Table;
 
+import java.util.List;
+
 public class RenameColumnMod extends ColumnMod  {
 	private final String oldName, newName;
 
@@ -12,7 +14,7 @@ public RenameColumnMod(String oldName, String newName) {
 	}
 
 	@Override
-	public void apply(Table table) throws InvalidSchemaError {
+	public void apply(Table table, List<DeferredPositionUpdate> deferred) throws InvalidSchemaError {
 		int idx = originalIndex(table);
 		table.renameColumn(idx, newName);
 	}

File: src/main/java/com/zendesk/maxwell/schema/ddl/ColumnMod.java
Patch:
@@ -2,6 +2,8 @@
 
 import com.zendesk.maxwell.schema.Table;
 
+import java.util.List;
+
 abstract class ColumnMod {
 	public String name;
 
@@ -18,5 +20,5 @@ protected int originalIndex(Table table) throws InvalidSchemaError {
 		return originalIndex;
 	}
 
-	public abstract void apply(Table table) throws InvalidSchemaError;
+	public abstract void apply(Table table, List<DeferredPositionUpdate> deferred) throws InvalidSchemaError;
 }

File: src/main/java/com/zendesk/maxwell/schema/ddl/RemoveColumnMod.java
Patch:
@@ -2,13 +2,15 @@
 
 import com.zendesk.maxwell.schema.Table;
 
+import java.util.List;
+
 class RemoveColumnMod extends ColumnMod {
 	public RemoveColumnMod(String name) {
 		super(name);
 	}
 
 	@Override
-	public void apply(Table table) throws InvalidSchemaError {
+	public void apply(Table table, List<DeferredPositionUpdate> deferred) throws InvalidSchemaError {
 		table.removeColumn(originalIndex(table));
 	}
 }

File: src/main/java/com/zendesk/maxwell/schema/ddl/RenameColumnMod.java
Patch:
@@ -2,6 +2,8 @@
 
 import com.zendesk.maxwell.schema.Table;
 
+import java.util.List;
+
 public class RenameColumnMod extends ColumnMod  {
 	private final String oldName, newName;
 
@@ -12,7 +14,7 @@ public RenameColumnMod(String oldName, String newName) {
 	}
 
 	@Override
-	public void apply(Table table) throws InvalidSchemaError {
+	public void apply(Table table, List<DeferredPositionUpdate> deferred) throws InvalidSchemaError {
 		int idx = originalIndex(table);
 		table.renameColumn(idx, newName);
 	}

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -157,6 +157,7 @@ public void testMultipleColumnWithParens() {
 	@Test
 	public void testParsingSomeAlters() {
 		String testSQL[] = {
+			"alter table t add column c varchar(255) default 'string1' 'string2'",
 			"alter table t add column mortgage_item BIT(4) NOT NULL DEFAULT 0b0000",
 			"alter table t add column mortgage_item BIT(4) NOT NULL DEFAULT 'b'01010",
 			"alter table t add column mortgage_item BIT(4) NOT NULL DEFAULT 'B'01010",

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -157,6 +157,7 @@ public void testMultipleColumnWithParens() {
 	@Test
 	public void testParsingSomeAlters() {
 		String testSQL[] = {
+			"alter table t add column c varchar(255) default 'string1' 'string2'",
 			"alter table t add column mortgage_item BIT(4) NOT NULL DEFAULT 0b0000",
 			"alter table t add column mortgage_item BIT(4) NOT NULL DEFAULT 'b'01010",
 			"alter table t add column mortgage_item BIT(4) NOT NULL DEFAULT 'B'01010",

File: src/main/java/com/zendesk/maxwell/monitoring/MaxwellMetrics.java
Patch:
@@ -40,13 +40,13 @@ public MaxwellMetrics(MaxwellConfig config) {
 	}
 
 	private void setup(MaxwellConfig config) {
+		metricsPrefix = config.metricsPrefix;
+
 		if (config.metricsReportingType == null) {
 			LOGGER.warn("Metrics will not be exposed: metricsReportingType not configured.");
 			return;
 		}
 
-		metricsPrefix = config.metricsPrefix;
-
 		if (config.metricsJvm) {
 			config.metricRegistry.register(metricName("jvm", "memory_usage"), new MemoryUsageGaugeSet());
 			config.metricRegistry.register(metricName("jvm", "gc"), new GarbageCollectorMetricSet());

File: src/main/java/com/zendesk/maxwell/monitoring/MaxwellMetrics.java
Patch:
@@ -40,13 +40,13 @@ public MaxwellMetrics(MaxwellConfig config) {
 	}
 
 	private void setup(MaxwellConfig config) {
+		metricsPrefix = config.metricsPrefix;
+
 		if (config.metricsReportingType == null) {
 			LOGGER.warn("Metrics will not be exposed: metricsReportingType not configured.");
 			return;
 		}
 
-		metricsPrefix = config.metricsPrefix;
-
 		if (config.metricsJvm) {
 			config.metricRegistry.register(metricName("jvm", "memory_usage"), new MemoryUsageGaugeSet());
 			config.metricRegistry.register(metricName("jvm", "gc"), new GarbageCollectorMetricSet());

File: src/main/java/com/zendesk/maxwell/bootstrap/SynchronousBootstrapper.java
Patch:
@@ -1,5 +1,6 @@
 package com.zendesk.maxwell.bootstrap;
 
+import com.zendesk.maxwell.producer.MaxwellOutputConfig;
 import com.zendesk.maxwell.replication.BinlogPosition;
 import com.zendesk.maxwell.MaxwellContext;
 import com.zendesk.maxwell.replication.Position;
@@ -255,7 +256,7 @@ private void setRowValues(RowMap row, ResultSet resultSet, Table table) throws S
 
 			row.putData(
 				columnDefinition.getName(),
-				columnValue == null ? null : columnDefinition.asJSON(columnValue)
+				columnValue == null ? null : columnDefinition.asJSON(columnValue, new MaxwellOutputConfig())
 			);
 
 			++columnIndex;

File: src/main/java/com/zendesk/maxwell/schema/columndef/BitColumnDef.java
Patch:
@@ -49,6 +49,6 @@ private Long bytesToLong(byte[] bytes) {
 
 	@Override
 	public String toSQL(Object value) {
-		return asJSON(value).toString();
+		return asJSON(value, null).toString();
 	}
 }

File: src/main/java/com/zendesk/maxwell/schema/columndef/YearColumnDef.java
Patch:
@@ -1,5 +1,7 @@
 package com.zendesk.maxwell.schema.columndef;
 
+import com.zendesk.maxwell.producer.MaxwellOutputConfig;
+
 import java.sql.Date;
 import java.util.Calendar;
 
@@ -9,7 +11,7 @@ public YearColumnDef(String name, String type, short pos) {
 	}
 
 	@Override
-	public Object asJSON(Object value) {
+	public Object asJSON(Object value, MaxwellOutputConfig outputConfig) {
 		if ( value instanceof Date ) {
 			Calendar calendar = Calendar.getInstance();
 			calendar.setTime(( java.sql.Date ) value);

File: src/test/java/com/zendesk/maxwell/replication/BinlogConnectorReplicatorTest.java
Patch:
@@ -14,6 +14,7 @@
 import com.zendesk.maxwell.bootstrap.SynchronousBootstrapper;
 import com.zendesk.maxwell.monitoring.NoOpMetrics;
 import com.zendesk.maxwell.producer.BufferedProducer;
+import com.zendesk.maxwell.producer.MaxwellOutputConfig;
 import com.zendesk.maxwell.row.RowMap;
 import com.zendesk.maxwell.schema.MysqlSchemaStore;
 import org.junit.Test;
@@ -97,7 +98,8 @@ public void testGTIDReconnects() throws Exception {
 			"maxwell-client",
 			new HeartbeatNotifier(),
 			null,
-			context.getFilter()
+			context.getFilter(),
+			new MaxwellOutputConfig()
 		);
 
 		EventDeserializer eventDeserializer = new EventDeserializer();

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -210,7 +210,8 @@ private void startInner() throws Exception {
 			false,
 			config.clientID,
 			context.getHeartbeatNotifier(),
-			config.scripting
+			config.scripting,
+			config.outputConfig
 		);
 
 		bootstrapper.resume(producer, replicator);

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -222,6 +222,7 @@ protected OptionParser buildOptionParser() {
 		parser.accepts( "output_thread_id", "produced records include thread_id; [true|false]. default: false" ).withOptionalArg();
 		parser.accepts( "output_schema_id", "produced records include schema_id; [true|false]. default: false" ).withOptionalArg();
 		parser.accepts( "output_row_query", "produced records include query, binlog option \"binlog_rows_query_log_events\" must be enabled; [true|false]. default: false" ).withOptionalArg();
+		parser.accepts( "output_null_zerodates", "convert '0000-00-00' dates/datetimes to null default: false" ).withOptionalArg();
 		parser.accepts( "output_ddl", "produce DDL records to ddl_kafka_topic [true|false]. default: false" ).withOptionalArg();
 		parser.accepts( "exclude_columns", "suppress these comma-separated columns from output" ).withRequiredArg();
 		parser.accepts( "ddl_kafka_topic", "optionally provide an alternate topic to push DDL records to. default: kafka_topic" ).withRequiredArg();
@@ -514,6 +515,7 @@ private void setup(OptionSet options, Properties properties) {
 		outputConfig.includesSchemaId = fetchBooleanOption("output_schema_id", options, properties, false);
 		outputConfig.includesRowQuery = fetchBooleanOption("output_row_query", options, properties, false);
 		outputConfig.outputDDL	= fetchBooleanOption("output_ddl", options, properties, false);
+		outputConfig.zeroDatesAsNull = fetchBooleanOption("output_null_zerodates", options, properties, false);
 		this.excludeColumns     = fetchOption("exclude_columns", options, properties, null);
 
 		String encryptionMode = fetchOption("encrypt", options, properties, "none");

File: src/main/java/com/zendesk/maxwell/producer/MaxwellOutputConfig.java
Patch:
@@ -19,6 +19,7 @@ public class MaxwellOutputConfig {
 	public List<Pattern> excludeColumns;
 	public EncryptionMode encryptionMode;
 	public String secretKey;
+	public boolean zeroDatesAsNull;
 
 	public MaxwellOutputConfig() {
 		this.includesBinlogPosition = false;
@@ -30,6 +31,7 @@ public MaxwellOutputConfig() {
 		this.includesSchemaId = false;
 		this.includesRowQuery = false;
 		this.outputDDL = false;
+		this.zeroDatesAsNull = false;
 		this.excludeColumns = new ArrayList<>();
 		this.encryptionMode = EncryptionMode.ENCRYPT_NONE;
 		this.secretKey = null;

File: src/main/java/com/zendesk/maxwell/recovery/Recovery.java
Patch:
@@ -4,6 +4,7 @@
 import com.zendesk.maxwell.MaxwellMysqlConfig;
 import com.zendesk.maxwell.monitoring.Metrics;
 import com.zendesk.maxwell.monitoring.NoOpMetrics;
+import com.zendesk.maxwell.producer.MaxwellOutputConfig;
 import com.zendesk.maxwell.replication.BinlogConnectorReplicator;
 import com.zendesk.maxwell.replication.BinlogPosition;
 import com.zendesk.maxwell.replication.HeartbeatNotifier;
@@ -69,7 +70,8 @@ public HeartbeatRowMap recover() throws Exception {
 					true,
 					recoveryInfo.clientID,
 					new HeartbeatNotifier(),
-					null
+					null,
+					new MaxwellOutputConfig()
 			);
 
 			replicator.setFilter(new RecoveryFilter(this.maxwellDatabaseName));

File: src/main/java/com/zendesk/maxwell/schema/columndef/BigIntColumnDef.java
Patch:
@@ -1,5 +1,7 @@
 package com.zendesk.maxwell.schema.columndef;
 
+import com.zendesk.maxwell.producer.MaxwellOutputConfig;
+
 import java.math.BigInteger;
 
 public class BigIntColumnDef extends ColumnDef {
@@ -28,7 +30,7 @@ public String toSQL(Object value) {
 	}
 
 	@Override
-	public Object asJSON(Object value) {
+	public Object asJSON(Object value, MaxwellOutputConfig config) {
 		return toNumeric(value);
 	}
 

File: src/main/java/com/zendesk/maxwell/schema/columndef/BitColumnDef.java
Patch:
@@ -1,5 +1,7 @@
 package com.zendesk.maxwell.schema.columndef;
 
+import com.zendesk.maxwell.producer.MaxwellOutputConfig;
+
 import java.math.BigInteger;
 import java.util.BitSet;
 
@@ -9,7 +11,7 @@ public BitColumnDef(String name, String type, short pos) {
 	}
 
 	@Override
-	public Object asJSON(Object value) {
+	public Object asJSON(Object value, MaxwellOutputConfig outputConfig) {
 		byte[] bytes;
 		if( value instanceof Boolean ){
 			bytes = new byte[]{(byte) (( Boolean ) value ? 1 : 0)};

File: src/main/java/com/zendesk/maxwell/schema/columndef/EnumColumnDef.java
Patch:
@@ -1,5 +1,7 @@
 package com.zendesk.maxwell.schema.columndef;
 
+import com.zendesk.maxwell.producer.MaxwellOutputConfig;
+
 public class EnumColumnDef extends EnumeratedColumnDef {
 	public EnumColumnDef(String name, String type, short pos, String[] enumValues) {
 		super(name, type, pos, enumValues);
@@ -11,7 +13,7 @@ public String toSQL(Object value) {
 	}
 
 	@Override
-	public String asJSON(Object value) {
+	public String asJSON(Object value, MaxwellOutputConfig config) {
 		return asString(value);
 	}
 

File: src/main/java/com/zendesk/maxwell/schema/columndef/GeometryColumnDef.java
Patch:
@@ -3,6 +3,7 @@
 import com.vividsolutions.jts.geom.Geometry;
 import com.vividsolutions.jts.io.ParseException;
 import com.vividsolutions.jts.io.WKBReader;
+import com.zendesk.maxwell.producer.MaxwellOutputConfig;
 
 import java.util.Arrays;
 
@@ -15,7 +16,7 @@ public GeometryColumnDef(String name, String type, short pos) {
 	}
 
 	@Override
-	public Object asJSON(Object value) {
+	public Object asJSON(Object value, MaxwellOutputConfig config) {
 		Geometry geometry = null;
 		if ( value instanceof Geometry ) {
 			geometry = (Geometry) value;

File: src/main/java/com/zendesk/maxwell/schema/columndef/IntColumnDef.java
Patch:
@@ -1,5 +1,7 @@
 package com.zendesk.maxwell.schema.columndef;
 
+import com.zendesk.maxwell.producer.MaxwellOutputConfig;
+
 public class IntColumnDef extends ColumnDef {
 	public int bits;
 
@@ -44,7 +46,7 @@ public String toSQL(Object value) {
 	}
 
 	@Override
-	public Object asJSON(Object value) {
+	public Object asJSON(Object value, MaxwellOutputConfig config) {
 		return toLong(value);
 	}
 

File: src/main/java/com/zendesk/maxwell/schema/columndef/JsonColumnDef.java
Patch:
@@ -1,6 +1,7 @@
 package com.zendesk.maxwell.schema.columndef;
 
 import com.github.shyiko.mysql.binlog.event.deserialization.json.JsonBinary;
+import com.zendesk.maxwell.producer.MaxwellOutputConfig;
 import com.zendesk.maxwell.row.RawJSONString;
 
 import java.io.IOException;
@@ -13,7 +14,7 @@ public JsonColumnDef(String name, String type, short pos) {
 	}
 
 	@Override
-	public Object asJSON(Object value) {
+	public Object asJSON(Object value, MaxwellOutputConfig config) {
 		String jsonString;
 
 		if ( value instanceof String ) {

File: src/main/java/com/zendesk/maxwell/schema/columndef/SetColumnDef.java
Patch:
@@ -3,6 +3,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 
+import com.zendesk.maxwell.producer.MaxwellOutputConfig;
 import org.apache.commons.lang3.StringUtils;
 
 public class SetColumnDef extends EnumeratedColumnDef {
@@ -16,7 +17,7 @@ public String toSQL(Object value) {
 	}
 
 	@Override
-	public Object asJSON(Object value) {
+	public Object asJSON(Object value, MaxwellOutputConfig config) {
 		return asList(value);
 	}
 

File: src/main/java/com/zendesk/maxwell/schema/columndef/StringColumnDef.java
Patch:
@@ -3,6 +3,7 @@
 import java.nio.charset.Charset;
 import java.nio.charset.UnsupportedCharsetException;
 
+import com.zendesk.maxwell.producer.MaxwellOutputConfig;
 import org.apache.commons.codec.binary.Base64;
 import org.apache.commons.codec.binary.Hex;
 
@@ -60,7 +61,7 @@ private Charset charsetForCharset() {
 		}
 	}
 	@Override
-	public Object asJSON(Object value) {
+	public Object asJSON(Object value, MaxwellOutputConfig config) {
 
 		if ( value instanceof String ) {
 			return value;

File: src/main/java/com/zendesk/maxwell/schema/columndef/TimeColumnDef.java
Patch:
@@ -1,5 +1,7 @@
 package com.zendesk.maxwell.schema.columndef;
 
+import com.zendesk.maxwell.producer.MaxwellOutputConfig;
+
 import java.sql.Time;
 import java.sql.Timestamp;
 
@@ -8,7 +10,7 @@ public TimeColumnDef(String name, String type, short pos, Long columnLength) {
 		super(name, type, pos, columnLength);
 	}
 
-	protected String formatValue(Object value) {
+	protected String formatValue(Object value, MaxwellOutputConfig config) {
 		if ( value instanceof Timestamp ) {
 			Time time = new Time(((Timestamp) value).getTime());
 			String timeAsStr = String.valueOf(time);

File: src/main/java/com/zendesk/maxwell/schema/columndef/BitColumnDef.java
Patch:
@@ -1,5 +1,7 @@
 package com.zendesk.maxwell.schema.columndef;
 
+import com.zendesk.maxwell.producer.MaxwellOutputConfig;
+
 import java.math.BigInteger;
 import java.util.BitSet;
 
@@ -9,7 +11,7 @@ public BitColumnDef(String name, String type, short pos) {
 	}
 
 	@Override
-	public Object asJSON(Object value) {
+	public Object asJSON(Object value, MaxwellOutputConfig outputConfig) {
 		byte[] bytes;
 		if( value instanceof Boolean ){
 			bytes = new byte[]{(byte) (( Boolean ) value ? 1 : 0)};

File: src/main/java/com/zendesk/maxwell/schema/columndef/ColumnDef.java
Patch:
@@ -23,6 +23,7 @@ public ColumnDef(String name, String type, short pos) {
 
 	public abstract String toSQL(Object value);
 
+	@Deprecated
 	public Object asJSON(Object value) {
 		return asJSON(value, new MaxwellOutputConfig());
 	}

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -210,7 +210,8 @@ private void startInner() throws Exception {
 			false,
 			config.clientID,
 			context.getHeartbeatNotifier(),
-			config.scripting
+			config.scripting,
+			config.outputConfig
 		);
 
 		bootstrapper.resume(producer, replicator);

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -222,6 +222,7 @@ protected OptionParser buildOptionParser() {
 		parser.accepts( "output_thread_id", "produced records include thread_id; [true|false]. default: false" ).withOptionalArg();
 		parser.accepts( "output_schema_id", "produced records include schema_id; [true|false]. default: false" ).withOptionalArg();
 		parser.accepts( "output_row_query", "produced records include query, binlog option \"binlog_rows_query_log_events\" must be enabled; [true|false]. default: false" ).withOptionalArg();
+		parser.accepts( "output_null_zerodates", "convert '0000-00-00' dates/datetimes to null default: false" ).withOptionalArg();
 		parser.accepts( "output_ddl", "produce DDL records to ddl_kafka_topic [true|false]. default: false" ).withOptionalArg();
 		parser.accepts( "exclude_columns", "suppress these comma-separated columns from output" ).withRequiredArg();
 		parser.accepts( "ddl_kafka_topic", "optionally provide an alternate topic to push DDL records to. default: kafka_topic" ).withRequiredArg();
@@ -514,6 +515,7 @@ private void setup(OptionSet options, Properties properties) {
 		outputConfig.includesSchemaId = fetchBooleanOption("output_schema_id", options, properties, false);
 		outputConfig.includesRowQuery = fetchBooleanOption("output_row_query", options, properties, false);
 		outputConfig.outputDDL	= fetchBooleanOption("output_ddl", options, properties, false);
+		outputConfig.zeroDatesAsNull = fetchBooleanOption("output_null_zerodates", options, properties, false);
 		this.excludeColumns     = fetchOption("exclude_columns", options, properties, null);
 
 		String encryptionMode = fetchOption("encrypt", options, properties, "none");

File: src/main/java/com/zendesk/maxwell/producer/MaxwellOutputConfig.java
Patch:
@@ -19,6 +19,7 @@ public class MaxwellOutputConfig {
 	public List<Pattern> excludeColumns;
 	public EncryptionMode encryptionMode;
 	public String secretKey;
+	public boolean zeroDatesAsNull;
 
 	public MaxwellOutputConfig() {
 		this.includesBinlogPosition = false;
@@ -30,6 +31,7 @@ public MaxwellOutputConfig() {
 		this.includesSchemaId = false;
 		this.includesRowQuery = false;
 		this.outputDDL = false;
+		this.zeroDatesAsNull = false;
 		this.excludeColumns = new ArrayList<>();
 		this.encryptionMode = EncryptionMode.ENCRYPT_NONE;
 		this.secretKey = null;

File: src/main/java/com/zendesk/maxwell/recovery/Recovery.java
Patch:
@@ -4,6 +4,7 @@
 import com.zendesk.maxwell.MaxwellMysqlConfig;
 import com.zendesk.maxwell.monitoring.Metrics;
 import com.zendesk.maxwell.monitoring.NoOpMetrics;
+import com.zendesk.maxwell.producer.MaxwellOutputConfig;
 import com.zendesk.maxwell.replication.BinlogConnectorReplicator;
 import com.zendesk.maxwell.replication.BinlogPosition;
 import com.zendesk.maxwell.replication.HeartbeatNotifier;
@@ -69,7 +70,8 @@ public HeartbeatRowMap recover() throws Exception {
 					true,
 					recoveryInfo.clientID,
 					new HeartbeatNotifier(),
-					null
+					null,
+					new MaxwellOutputConfig()
 			);
 
 			replicator.setFilter(new RecoveryFilter(this.maxwellDatabaseName));

File: src/main/java/com/zendesk/maxwell/schema/columndef/BigIntColumnDef.java
Patch:
@@ -1,5 +1,7 @@
 package com.zendesk.maxwell.schema.columndef;
 
+import com.zendesk.maxwell.producer.MaxwellOutputConfig;
+
 import java.math.BigInteger;
 
 public class BigIntColumnDef extends ColumnDef {
@@ -28,7 +30,7 @@ public String toSQL(Object value) {
 	}
 
 	@Override
-	public Object asJSON(Object value) {
+	public Object asJSON(Object value, MaxwellOutputConfig config) {
 		return toNumeric(value);
 	}
 

File: src/main/java/com/zendesk/maxwell/schema/columndef/EnumColumnDef.java
Patch:
@@ -1,5 +1,7 @@
 package com.zendesk.maxwell.schema.columndef;
 
+import com.zendesk.maxwell.producer.MaxwellOutputConfig;
+
 public class EnumColumnDef extends EnumeratedColumnDef {
 	public EnumColumnDef(String name, String type, short pos, String[] enumValues) {
 		super(name, type, pos, enumValues);
@@ -11,7 +13,7 @@ public String toSQL(Object value) {
 	}
 
 	@Override
-	public String asJSON(Object value) {
+	public String asJSON(Object value, MaxwellOutputConfig config) {
 		return asString(value);
 	}
 

File: src/main/java/com/zendesk/maxwell/schema/columndef/GeometryColumnDef.java
Patch:
@@ -3,6 +3,7 @@
 import com.vividsolutions.jts.geom.Geometry;
 import com.vividsolutions.jts.io.ParseException;
 import com.vividsolutions.jts.io.WKBReader;
+import com.zendesk.maxwell.producer.MaxwellOutputConfig;
 
 import java.util.Arrays;
 
@@ -15,7 +16,7 @@ public GeometryColumnDef(String name, String type, short pos) {
 	}
 
 	@Override
-	public Object asJSON(Object value) {
+	public Object asJSON(Object value, MaxwellOutputConfig config) {
 		Geometry geometry = null;
 		if ( value instanceof Geometry ) {
 			geometry = (Geometry) value;

File: src/main/java/com/zendesk/maxwell/schema/columndef/IntColumnDef.java
Patch:
@@ -1,5 +1,7 @@
 package com.zendesk.maxwell.schema.columndef;
 
+import com.zendesk.maxwell.producer.MaxwellOutputConfig;
+
 public class IntColumnDef extends ColumnDef {
 	public int bits;
 
@@ -44,7 +46,7 @@ public String toSQL(Object value) {
 	}
 
 	@Override
-	public Object asJSON(Object value) {
+	public Object asJSON(Object value, MaxwellOutputConfig config) {
 		return toLong(value);
 	}
 

File: src/main/java/com/zendesk/maxwell/schema/columndef/JsonColumnDef.java
Patch:
@@ -1,6 +1,7 @@
 package com.zendesk.maxwell.schema.columndef;
 
 import com.github.shyiko.mysql.binlog.event.deserialization.json.JsonBinary;
+import com.zendesk.maxwell.producer.MaxwellOutputConfig;
 import com.zendesk.maxwell.row.RawJSONString;
 
 import java.io.IOException;
@@ -13,7 +14,7 @@ public JsonColumnDef(String name, String type, short pos) {
 	}
 
 	@Override
-	public Object asJSON(Object value) {
+	public Object asJSON(Object value, MaxwellOutputConfig config) {
 		String jsonString;
 
 		if ( value instanceof String ) {

File: src/main/java/com/zendesk/maxwell/schema/columndef/SetColumnDef.java
Patch:
@@ -3,6 +3,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 
+import com.zendesk.maxwell.producer.MaxwellOutputConfig;
 import org.apache.commons.lang3.StringUtils;
 
 public class SetColumnDef extends EnumeratedColumnDef {
@@ -16,7 +17,7 @@ public String toSQL(Object value) {
 	}
 
 	@Override
-	public Object asJSON(Object value) {
+	public Object asJSON(Object value, MaxwellOutputConfig config) {
 		return asList(value);
 	}
 

File: src/main/java/com/zendesk/maxwell/schema/columndef/StringColumnDef.java
Patch:
@@ -3,6 +3,7 @@
 import java.nio.charset.Charset;
 import java.nio.charset.UnsupportedCharsetException;
 
+import com.zendesk.maxwell.producer.MaxwellOutputConfig;
 import org.apache.commons.codec.binary.Base64;
 import org.apache.commons.codec.binary.Hex;
 
@@ -60,7 +61,7 @@ private Charset charsetForCharset() {
 		}
 	}
 	@Override
-	public Object asJSON(Object value) {
+	public Object asJSON(Object value, MaxwellOutputConfig config) {
 
 		if ( value instanceof String ) {
 			return value;

File: src/main/java/com/zendesk/maxwell/schema/columndef/TimeColumnDef.java
Patch:
@@ -1,5 +1,7 @@
 package com.zendesk.maxwell.schema.columndef;
 
+import com.zendesk.maxwell.producer.MaxwellOutputConfig;
+
 import java.sql.Time;
 import java.sql.Timestamp;
 
@@ -8,7 +10,7 @@ public TimeColumnDef(String name, String type, short pos, Long columnLength) {
 		super(name, type, pos, columnLength);
 	}
 
-	protected String formatValue(Object value) {
+	protected String formatValue(Object value, MaxwellOutputConfig config) {
 		if ( value instanceof Timestamp ) {
 			Time time = new Time(((Timestamp) value).getTime());
 			String timeAsStr = String.valueOf(time);

File: src/test/java/com/zendesk/maxwell/replication/BinlogConnectorReplicatorTest.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.Map;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assume.assumeTrue;
 
 public class BinlogConnectorReplicatorTest extends TestWithNameLogging {
 
@@ -70,8 +71,9 @@ public WriteRowsEventData deserialize(ByteArrayInputStream inputStream) throws I
 
 	@Test
 	public void testGTIDReconnects() throws Exception {
+		assumeTrue(MysqlIsolatedServer.getVersion().atLeast(MysqlIsolatedServer.VERSION_5_6));
+
 		MysqlIsolatedServer server = MaxwellTestSupport.setupServer("--gtid_mode=ON --enforce-gtid-consistency=true");
-		MaxwellTestSupport.requireMinimumVersion(server, MysqlIsolatedServer.VERSION_5_6);
 		MaxwellTestSupport.setupSchema(server, false);
 
 		server.execute("create table test.t ( i int )");

File: src/test/java/com/zendesk/maxwell/MysqlIsolatedServer.java
Patch:
@@ -19,9 +19,9 @@
 public class MysqlIsolatedServer {
 	public static final Long SERVER_ID = 4321L;
 
-	public final MysqlVersion VERSION_5_5 = new MysqlVersion(5, 5);
-	public final MysqlVersion VERSION_5_6 = new MysqlVersion(5, 6);
-	public final MysqlVersion VERSION_5_7 = new MysqlVersion(5, 7);
+	public static final MysqlVersion VERSION_5_5 = new MysqlVersion(5, 5);
+	public static final MysqlVersion VERSION_5_6 = new MysqlVersion(5, 6);
+	public static final MysqlVersion VERSION_5_7 = new MysqlVersion(5, 7);
 
 	private Connection connection;
 	private int port;

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -604,7 +604,7 @@ private void validateFilter() {
 						includeColumnValues
 					);
 				} else {
-					this.filter = new Filter(this.databaseName);
+					this.filter = new Filter(this.databaseName, "");
 				}
 			}
 		} catch (InvalidFilterException e) {

File: src/main/java/com/zendesk/maxwell/bootstrap/SynchronousBootstrapper.java
Patch:
@@ -53,6 +53,7 @@ public void startBootstrap(RowMap startBootstrapRow, AbstractProducer producer,
 		Database database = findDatabase(schema, databaseName);
 		Table table = findTable(tableName, database);
 
+		Long schemaId = replicator.getSchemaId();
 		Position position = startBootstrapRow.getPosition();
 		producer.push(startBootstrapRow);
 		producer.push(bootstrapStartRowMap(table, position));
@@ -66,6 +67,7 @@ public void startBootstrap(RowMap startBootstrapRow, AbstractProducer producer,
 			while ( resultSet.next() ) {
 				RowMap row = bootstrapEventRowMap("bootstrap-insert", table, position);
 				setRowValues(row, resultSet, table);
+				row.setSchemaId(schemaId);
 
 				Scripting scripting = context.getConfig().scripting;
 				if ( scripting != null )

File: src/main/java/com/zendesk/maxwell/replication/Replicator.java
Patch:
@@ -15,6 +15,7 @@ public interface Replicator extends StoppableTask {
 	RowMap getRow() throws Exception;
 	Long getLastHeartbeatRead();
 	Schema getSchema() throws SchemaStoreException;
+	Long getSchemaId() throws SchemaStoreException;
 
 	void stopAtHeartbeat(long heartbeat);
 	void runLoop() throws Exception;

File: src/main/java/com/zendesk/maxwell/producer/InflightMessageList.java
Patch:
@@ -68,7 +68,7 @@ public synchronized void freeSlot() {
 		// we assume the head will unlikely get acknowledged, hence terminate Maxwell.
 		// This gatekeeper is the last resort since if anything goes wrong,
 		// producer should have raised exceptions earlier than this point when all below conditions are met.
-		if (producerAckTimeoutMS > 0 && outstanding >= capacity) {
+		if (producerAckTimeoutMS > 0) {
 			Iterator<InflightMessage> it = iterator();
 			if (it.hasNext() && it.next().timeSinceSendMS() > producerAckTimeoutMS && completePercentage() >= completePercentageThreshold) {
 				context.terminate(new IllegalStateException(

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -157,6 +157,9 @@ public void testMultipleColumnWithParens() {
 	@Test
 	public void testParsingSomeAlters() {
 		String testSQL[] = {
+			"alter table t add column mortgage_item BIT(4) NOT NULL DEFAULT 0b0000",
+			"alter table t add column mortgage_item BIT(4) NOT NULL DEFAULT 'b'01010",
+			"alter table t add column mortgage_item BIT(4) NOT NULL DEFAULT 'B'01010",
 			"alter database d DEFAULT CHARACTER SET = 'utf8'",
 			"alter database d UPGRADE DATA DIRECTORY NAME",
 			"alter schema d COLLATE foo",

File: src/main/java/com/zendesk/maxwell/schema/ddl/SchemaChange.java
Patch:
@@ -39,6 +39,7 @@ public abstract class SchemaChange {
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(ALTER|CREATE|DROP|RENAME)\\s+USER", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(ALTER|CREATE|DROP)\\s+TEMPORARY\\s+TABLE", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
+		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(SET|DROP|CREATE)\\s+(DEFAULT\\s+)?ROLE", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*TRUNCATE\\s+", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*OPTIMIZE\\s+", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 

File: src/main/java/com/zendesk/maxwell/schema/ddl/SchemaChange.java
Patch:
@@ -39,6 +39,7 @@ public abstract class SchemaChange {
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(ALTER|CREATE|DROP|RENAME)\\s+USER", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(ALTER|CREATE|DROP)\\s+TEMPORARY\\s+TABLE", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
+		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*(SET|DROP|CREATE)\\s+(DEFAULT\\s+)?ROLE", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*TRUNCATE\\s+", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 		SQL_BLACKLIST.add(Pattern.compile("\\A\\s*OPTIMIZE\\s+", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));
 

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -157,6 +157,9 @@ public void testMultipleColumnWithParens() {
 	@Test
 	public void testParsingSomeAlters() {
 		String testSQL[] = {
+			"alter table t add column mortgage_item BIT(4) NOT NULL DEFAULT 0b0000",
+			"alter table t add column mortgage_item BIT(4) NOT NULL DEFAULT 'b'01010",
+			"alter table t add column mortgage_item BIT(4) NOT NULL DEFAULT 'B'01010",
 			"alter database d DEFAULT CHARACTER SET = 'utf8'",
 			"alter database d UPGRADE DATA DIRECTORY NAME",
 			"alter schema d COLLATE foo",

File: src/main/java/com/zendesk/maxwell/MaxwellMysqlConfig.java
Patch:
@@ -109,7 +109,8 @@ public String getConnectionURI(boolean includeDatabase) throws URISyntaxExceptio
 
 		// added by d8888 2018/09/10, force JDBC to use UTF-8 to support using non-english db, table & column names
 		uriBuilder.addParameter("characterEncoding", "UTF-8");
-		
+		uriBuilder.addParameter("tinyInt1isBit", "false");
+
 		return uriBuilder.build().toString();
 	}
 

File: src/test/java/com/zendesk/maxwell/MaxwellMysqlConfigTest.java
Patch:
@@ -26,7 +26,7 @@ public void testBasicUri() {
 
 		try {
 			final String uri = config.getConnectionURI();
-			assertThat(uri, is(equalTo("jdbc:mysql://localhost:3306/maxwell?connectTimeout=5000&zeroDateTimeBehavior=convertToNull&initialTimeout=2&autoReconnect=true&maxReconnects=10&useSSL=false&characterEncoding=UTF-8")));
+			assertThat(uri, is(equalTo("jdbc:mysql://localhost:3306/maxwell?connectTimeout=5000&zeroDateTimeBehavior=convertToNull&initialTimeout=2&autoReconnect=true&maxReconnects=10&useSSL=false&characterEncoding=UTF-8&tinyInt1isBit=false")));
 		}
 		catch (URISyntaxException e) {
 			fail();

File: src/test/java/com/zendesk/maxwell/MaxwellMysqlConfigTest.java
Patch:
@@ -26,7 +26,7 @@ public void testBasicUri() {
 
 		try {
 			final String uri = config.getConnectionURI();
-			assertThat(uri, is(equalTo("jdbc:mysql://localhost:3306/maxwell?connectTimeout=5000&zeroDateTimeBehavior=convertToNull&initialTimeout=2&autoReconnect=true&maxReconnects=10&useSSL=false&characterEncoding=UTF-8")));
+			assertThat(uri, is(equalTo("jdbc:mysql://localhost:3306/maxwell?connectTimeout=5000&zeroDateTimeBehavior=convertToNull&initialTimeout=2&autoReconnect=true&maxReconnects=10&useSSL=false&characterEncoding=UTF-8&tinyInt1isBit=false")));
 		}
 		catch (URISyntaxException e) {
 			fail();

File: src/test/java/com/zendesk/maxwell/replication/TableCacheTest.java
Patch:
@@ -9,7 +9,7 @@ public class TableCacheTest extends MaxwellTestWithIsolatedServer {
 	@Test
 	public void testHaTables() throws Exception {
 		Schema schema = new SchemaCapturer(server.getConnection(), buildContext().getCaseSensitivity()).capture();
-		TableCache cache = new TableCache();
+		TableCache cache = new TableCache("maxwell");
 		// ensure we don't crash on not-really-existant alibaba tables
 		cache.processEvent(schema, null, 1L, "mysql", "ha_health_check");
 	}

File: src/test/java/com/zendesk/maxwell/replication/TableCacheTest.java
Patch:
@@ -9,7 +9,7 @@ public class TableCacheTest extends MaxwellTestWithIsolatedServer {
 	@Test
 	public void testHaTables() throws Exception {
 		Schema schema = new SchemaCapturer(server.getConnection(), buildContext().getCaseSensitivity()).capture();
-		TableCache cache = new TableCache();
+		TableCache cache = new TableCache("maxwell");
 		// ensure we don't crash on not-really-existant alibaba tables
 		cache.processEvent(schema, null, 1L, "mysql", "ha_health_check");
 	}

File: src/main/java/com/zendesk/maxwell/MaxwellMysqlConfig.java
Patch:
@@ -109,7 +109,8 @@ public String getConnectionURI(boolean includeDatabase) throws URISyntaxExceptio
 
 		// added by d8888 2018/09/10, force JDBC to use UTF-8 to support using non-english db, table & column names
 		uriBuilder.addParameter("characterEncoding", "UTF-8");
-		
+		uriBuilder.addParameter("tinyInt1isBit", "false");
+
 		return uriBuilder.build().toString();
 	}
 

File: src/main/java/com/zendesk/maxwell/schema/SchemaCapturer.java
Patch:
@@ -56,12 +56,12 @@ public SchemaCapturer(Connection c, CaseSensitivity sensitivity) throws SQLExcep
 				"COLUMN_TYPE, " +
 				dateTimePrecision +
 				"COLUMN_KEY " +
-				"FROM `information_schema`.`COLUMNS` WHERE TABLE_SCHEMA = ?";
+				"FROM `information_schema`.`COLUMNS` WHERE TABLE_SCHEMA = ? ORDER BY TABLE_NAME, ORDINAL_POSITION";
 
 		columnPreparedStatement = connection.prepareStatement(columnSql);
 
 		String pkSql = "SELECT TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION FROM information_schema.KEY_COLUMN_USAGE "
-				+ "WHERE CONSTRAINT_NAME = 'PRIMARY' AND TABLE_SCHEMA = ?";
+				+ "WHERE CONSTRAINT_NAME = 'PRIMARY' AND TABLE_SCHEMA = ? ORDER BY TABLE_NAME, ORDINAL_POSITION";
 
 		pkPreparedStatement = connection.prepareStatement(pkSql);
 

File: src/main/java/com/zendesk/maxwell/schema/columndef/StringColumnDef.java
Patch:
@@ -13,7 +13,6 @@
 public class StringColumnDef extends ColumnDef {
 	public String charset;
 
-	static final Logger LOGGER = LoggerFactory.getLogger(StringColumnDef.class);
 	public StringColumnDef(String name, String type, short pos, String charset) {
 		super(name, type, pos);
 		this.charset = charset;

File: src/main/java/com/zendesk/maxwell/schema/ddl/TableAlter.java
Patch:
@@ -54,7 +54,7 @@ public ResolvedTableAlter resolve(Schema schema) throws InvalidSchemaError {
 
 		if ( convertCharset != null ) {
 			for ( StringColumnDef sc : table.getStringColumns() ) {
-				if ( !sc.getCharset().toLowerCase().equals("binary") )
+				if (sc.getCharset() == null || !sc.getCharset().toLowerCase().equals("binary") )
 					sc.setCharset(convertCharset);
 			}
 		}

File: src/main/java/com/zendesk/maxwell/schema/ddl/TableAlter.java
Patch:
@@ -54,7 +54,7 @@ public ResolvedTableAlter resolve(Schema schema) throws InvalidSchemaError {
 
 		if ( convertCharset != null ) {
 			for ( StringColumnDef sc : table.getStringColumns() ) {
-				if ( !sc.getCharset().toLowerCase().equals("binary") )
+				if (sc.getCharset() == null || !sc.getCharset().toLowerCase().equals("binary") )
 					sc.setCharset(convertCharset);
 			}
 		}

File: src/main/java/com/zendesk/maxwell/schema/columndef/ColumnDefSerializer.java
Patch:
@@ -11,11 +11,11 @@ public class ColumnDefSerializer extends JsonSerializer<ColumnDef> {
 	@Override
 	public void serialize(ColumnDef def, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
 		jgen.writeStartObject();
-		jgen.writeStringField("type", def.type);
+		jgen.writeStringField("type", def.getType());
 		jgen.writeStringField("name", def.name);
 
 		if ( def instanceof StringColumnDef ) {
-			jgen.writeStringField("charset", ((StringColumnDef) def).charset);
+			jgen.writeStringField("charset", ((StringColumnDef) def).getCharset());
 		} else if ( def instanceof IntColumnDef ) {
 			jgen.writeBooleanField("signed", ((IntColumnDef) def).isSigned());
 		} else if ( def instanceof BigIntColumnDef ) {

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLResolverTest.java
Patch:
@@ -78,8 +78,8 @@ public void testCreateTableResolveCharset() throws Exception {
 		ResolvedTableCreate rc = c.resolve(getSchema());
 
 		assertThat(rc.def.charset, is("latin2"));
-		assertThat(((StringColumnDef) rc.def.getColumnList().get(0)).charset, is("latin2"));
-		assertThat(((StringColumnDef) rc.def.getColumnList().get(1)).charset, is("utf8"));
+		assertThat(((StringColumnDef) rc.def.getColumnList().get(0)).getCharset(), is("latin2"));
+		assertThat(((StringColumnDef) rc.def.getColumnList().get(1)).getCharset(), is("utf8"));
 
 	}
 
@@ -91,7 +91,7 @@ public void testCreateTableResolveLike() throws Exception {
 		ResolvedTableCreate rc = c.resolve(getSchema());
 		assertThat(rc.def.getColumnList().size(), is(2));
 		assertThat(rc.def.getPKList().get(0), is("ii"));
-		assertThat(((StringColumnDef) rc.def.getColumnList().get(1)).charset, is("utf8"));
+		assertThat(((StringColumnDef) rc.def.getColumnList().get(1)).getCharset(), is("utf8"));
 	}
 
 	@Test

File: src/test/java/com/zendesk/maxwell/producer/partitioners/MaxwellKafkaPartitionerTest.java
Patch:
@@ -16,7 +16,7 @@ public class MaxwellKafkaPartitionerTest {
 	public void testRowMapEqualsDDLPartitioning() {
 		RowMap r = new RowMap("insert", "db", "tbl", 0L, new ArrayList<>(), null);
 		ResolvedDatabaseAlter m = new ResolvedDatabaseAlter("db", "utf8");
-		DDLMap d = new DDLMap(m, 0L, "alter-sql", null, null);
+		DDLMap d = new DDLMap(m, 0L, "alter-sql", null, null, null);
 
 		MaxwellKafkaPartitioner p = new MaxwellKafkaPartitioner("murmur3", "database", null, null);
 		assertEquals(p.kafkaPartition(r, 15), p.kafkaPartition(d, 15));
@@ -25,11 +25,11 @@ public void testRowMapEqualsDDLPartitioning() {
 	@Test
 	public void testDDLFallBack() {
 		ResolvedDatabaseAlter m = new ResolvedDatabaseAlter("some_db", "utf8");
-		DDLMap d = new DDLMap(m, 0L, "alter-sql", null, null);
+		DDLMap d = new DDLMap(m, 0L, "alter-sql", null, null, null);
 		MaxwellKafkaPartitioner p = new MaxwellKafkaPartitioner("murmur3", "table", null, "database");
 
 		ResolvedTableDrop m2 = new ResolvedTableDrop("some_db", "some_table");
-		DDLMap d2 = new DDLMap(m2, 0L, "alter-sql", null, null);
+		DDLMap d2 = new DDLMap(m2, 0L, "alter-sql", null, null, null);
 		MaxwellKafkaPartitioner p2 = new MaxwellKafkaPartitioner("murmur3", "database", null, "database");
 
 		assertEquals(p2.kafkaPartition(d2, 15), p.kafkaPartition(d, 15));

File: src/test/java/com/zendesk/maxwell/MaxwellTestJSON.java
Patch:
@@ -60,7 +60,9 @@ private static void runJSONTest(MysqlIsolatedServer server, List<String> sql, Li
 		List<Map<String, Object>> eventJSON = new ArrayList<>();
 
 		final MaxwellConfig captureConfig = new MaxwellConfig();
-		configLambda.accept(captureConfig);
+		if ( configLambda != null )
+			configLambda.accept(captureConfig);
+
 		MaxwellOutputConfig outputConfig = captureConfig.outputConfig;
 
 		List<RowMap> rows = MaxwellTestSupport.getRowsWithReplicator(server, sql.toArray(new String[sql.size()]), null, configLambda);

File: src/test/java/com/zendesk/maxwell/MaxwellTestWithIsolatedServer.java
Patch:
@@ -81,6 +81,7 @@ protected List<RowMap> getRowsForDDLTransaction(String[] input, Filter filter) t
 		return MaxwellTestSupport.getRowsWithReplicator(server, cb, (config) -> {
 			config.outputConfig = new MaxwellOutputConfig();
 			config.outputConfig.outputDDL = true;
+			config.filter = filter;
 		});
 	}
 

File: src/test/java/com/zendesk/maxwell/MaxwellTestJSON.java
Patch:
@@ -60,7 +60,9 @@ private static void runJSONTest(MysqlIsolatedServer server, List<String> sql, Li
 		List<Map<String, Object>> eventJSON = new ArrayList<>();
 
 		final MaxwellConfig captureConfig = new MaxwellConfig();
-		configLambda.accept(captureConfig);
+		if ( configLambda != null )
+			configLambda.accept(captureConfig);
+
 		MaxwellOutputConfig outputConfig = captureConfig.outputConfig;
 
 		List<RowMap> rows = MaxwellTestSupport.getRowsWithReplicator(server, sql.toArray(new String[sql.size()]), null, configLambda);

File: src/test/java/com/zendesk/maxwell/MaxwellTestWithIsolatedServer.java
Patch:
@@ -81,6 +81,7 @@ protected List<RowMap> getRowsForDDLTransaction(String[] input, Filter filter) t
 		return MaxwellTestSupport.getRowsWithReplicator(server, cb, (config) -> {
 			config.outputConfig = new MaxwellOutputConfig();
 			config.outputConfig.outputDDL = true;
+			config.filter = filter;
 		});
 	}
 

File: src/main/java/com/zendesk/maxwell/replication/TableCache.java
Patch:
@@ -13,7 +13,7 @@ public class TableCache {
 
 	public void processEvent(Schema schema, Filter filter, Long tableId, String dbName, String tblName) {
 		if ( !tableMapCache.containsKey(tableId) ) {
-			if ( filter != null && filter.isTableBlacklisted(dbName, tblName) ) {
+			if ( Filter.isTableBlacklisted(filter, dbName, tblName) ) {
 				blacklistedTableCache.put(tableId, tblName);
 				return;
 			}

File: src/main/java/com/zendesk/maxwell/replication/TableCache.java
Patch:
@@ -13,7 +13,7 @@ public class TableCache {
 
 	public void processEvent(Schema schema, Filter filter, Long tableId, String dbName, String tblName) {
 		if ( !tableMapCache.containsKey(tableId) ) {
-			if ( filter != null && filter.isTableBlacklisted(dbName, tblName) ) {
+			if ( Filter.isTableBlacklisted(filter, dbName, tblName) ) {
 				blacklistedTableCache.put(tableId, tblName);
 				return;
 			}

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -209,7 +209,8 @@ private void startInner() throws Exception {
 			initPosition,
 			false,
 			config.clientID,
-			context.getHeartbeatNotifier()
+			context.getHeartbeatNotifier(),
+			config.scripting
 		);
 
 		bootstrapper.resume(producer, replicator);

File: src/main/java/com/zendesk/maxwell/MaxwellContext.java
Patch:
@@ -257,7 +257,7 @@ public RecoveryInfo getRecoveryInfo() throws SQLException {
 
 	public void setPosition(RowMap r) {
 		if ( r.isTXCommit() )
-			this.setPosition(r.getPosition());
+			this.setPosition(r.getNextPosition());
 	}
 
 	public void setPosition(Position position) {

File: src/main/java/com/zendesk/maxwell/producer/AbstractAsyncProducer.java
Patch:
@@ -51,7 +51,7 @@ public AbstractAsyncProducer(MaxwellContext context) {
 
 	@Override
 	public final void push(RowMap r) throws Exception {
-		Position position = r.getPosition();
+		Position position = r.getNextPosition();
 		// Rows that do not get sent to a target will be automatically marked as complete.
 		// We will attempt to commit a checkpoint up to the current row.
 		if(!r.shouldOutput(outputConfig)) {

File: src/main/java/com/zendesk/maxwell/producer/MaxwellKafkaProducer.java
Patch:
@@ -203,7 +203,7 @@ public void sendAsync(RowMap r, AbstractAsyncProducer.CallbackCompleter cc) thro
 		/* if debug logging isn't enabled, release the reference to `value`, which can ease memory pressure somewhat */
 		String value = KafkaCallback.LOGGER.isDebugEnabled() ? record.value() : null;
 
-		KafkaCallback callback = new KafkaCallback(cc, r.getPosition(), record.key(), value,
+		KafkaCallback callback = new KafkaCallback(cc, r.getNextPosition(), record.key(), value,
 				this.succeededMessageCount, this.failedMessageCount, this.succeededMessageMeter, this.failedMessageMeter, this.context);
 
 		sendAsync(record, callback);

File: src/main/java/com/zendesk/maxwell/producer/MaxwellKinesisProducer.java
Patch:
@@ -129,7 +129,7 @@ public void sendAsync(RowMap r, AbstractAsyncProducer.CallbackCompleter cc) thro
 			value = null;
 		}
 
-		FutureCallback<UserRecordResult> callback = new KinesisCallback(cc, r.getPosition(), key, value,
+		FutureCallback<UserRecordResult> callback = new KinesisCallback(cc, r.getNextPosition(), key, value,
 				this.succeededMessageCount, this.failedMessageCount, this.succeededMessageMeter, this.failedMessageMeter, this.context);
 
 		Futures.addCallback(future, callback);

File: src/main/java/com/zendesk/maxwell/producer/MaxwellPubsubProducer.java
Patch:
@@ -182,13 +182,13 @@ public void sendAsync(RowMap r, AbstractAsyncProducer.CallbackCompleter cc)
 
     if ( r instanceof DDLMap ) {
 	  ApiFuture<String> apiFuture = ddlPubsub.publish(pubsubMessage);
-	  PubsubCallback callback = new PubsubCallback(cc, r.getPosition(), message,
+	  PubsubCallback callback = new PubsubCallback(cc, r.getNextPosition(), message,
 			  this.succeededMessageCount, this.failedMessageCount, this.succeededMessageMeter, this.failedMessageMeter, this.context);
 
 	  ApiFutures.addCallback(apiFuture, callback);
     } else {
 	  ApiFuture<String> apiFuture = pubsub.publish(pubsubMessage);
-	  PubsubCallback callback = new PubsubCallback(cc, r.getPosition(), message,
+	  PubsubCallback callback = new PubsubCallback(cc, r.getNextPosition(), message,
 			  this.succeededMessageCount, this.failedMessageCount, this.succeededMessageMeter, this.failedMessageMeter, this.context);
 
 	  ApiFutures.addCallback(apiFuture, callback);

File: src/main/java/com/zendesk/maxwell/producer/MaxwellRedisProducer.java
Patch:
@@ -34,7 +34,7 @@ public MaxwellRedisProducer(MaxwellContext context, String redisPubChannel, Stri
 	@Override
 	public void push(RowMap r) throws Exception {
 		if ( !r.shouldOutput(outputConfig) ) {
-			context.setPosition(r.getPosition());
+			context.setPosition(r.getNextPosition());
 			return;
 		}
 
@@ -62,7 +62,7 @@ public void push(RowMap r) throws Exception {
 		}
 
 		if ( r.isTXCommit() ) {
-			context.setPosition(r.getPosition());
+			context.setPosition(r.getNextPosition());
 		}
 
 		if ( logger.isDebugEnabled()) {

File: src/main/java/com/zendesk/maxwell/producer/MaxwellSQSProducer.java
Patch:
@@ -28,7 +28,7 @@ public MaxwellSQSProducer(MaxwellContext context, String queueUri) {
 	public void sendAsync(RowMap r, CallbackCompleter cc) throws Exception {
 		String value = r.toJSON();
 		SendMessageRequest messageRequest = new SendMessageRequest(queueUri, value);
-		SQSCallback callback = new SQSCallback(cc, r.getPosition(), value, context);
+		SQSCallback callback = new SQSCallback(cc, r.getNextPosition(), value, context);
 		client.sendMessageAsync(messageRequest, callback);
 	}
 

File: src/main/java/com/zendesk/maxwell/producer/RabbitmqProducer.java
Patch:
@@ -42,7 +42,7 @@ public RabbitmqProducer(MaxwellContext context) {
 	@Override
 	public void push(RowMap r) throws Exception {
 		if ( !r.shouldOutput(outputConfig) ) {
-			context.setPosition(r.getPosition());
+			context.setPosition(r.getNextPosition());
 
 			return;
 		}
@@ -52,7 +52,7 @@ public void push(RowMap r) throws Exception {
 
 		channel.basicPublish(exchangeName, routingKey, props, value.getBytes());
 		if ( r.isTXCommit() ) {
-			context.setPosition(r.getPosition());
+			context.setPosition(r.getNextPosition());
 		}
 		if ( LOGGER.isDebugEnabled()) {
 			LOGGER.debug("->  routing key:" + routingKey + ", partition:" + value);

File: src/main/java/com/zendesk/maxwell/replication/BinlogConnectorReplicator.java
Patch:
@@ -185,7 +185,7 @@ private RowMapBuffer getTransactionRows(BinlogConnectorEvent beginEvent) throws
 					Table table = tableCache.getTable(event.getTableID());
 
 					if ( table != null && shouldOutputEvent(table.getDatabase(), table.getName(), filter) ) {
-						for ( RowMap r : event.jsonMaps(table, lastHeartbeatPosition, currentQuery) )
+						for ( RowMap r : event.jsonMaps(table, getLastHeartbeatRead(), currentQuery) )
 							if (shouldOutputRowMap(table.getDatabase(), table.getName(), r, filter)) {
 								buffer.add(r);
 							}
@@ -323,7 +323,8 @@ private void processQueryEvent(BinlogConnectorEvent event) throws Exception {
 			data.getDatabase(),
 			data.getSql(),
 			this.schemaStore,
-			lastHeartbeatPosition.withBinlogPosition(event.getPosition()),
+			Position.valueOf(event.getPosition(), getLastHeartbeatRead()),
+			Position.valueOf(event.getNextPosition(), getLastHeartbeatRead()),
 			event.getEvent().getHeader().getTimestamp()
 		);
 	}

File: src/main/java/com/zendesk/maxwell/replication/Position.java
Patch:
@@ -15,8 +15,8 @@ public Position(BinlogPosition binlogPosition, long lastHeartbeatRead) {
 		this.lastHeartbeatRead = lastHeartbeatRead;
 	}
 
-	public Position withBinlogPosition(BinlogPosition position) {
-		return new Position(position, getLastHeartbeatRead());
+	public static Position valueOf(BinlogPosition binlogPosition, Long lastHeartbeatRead) {
+		return new Position(binlogPosition, lastHeartbeatRead);
 	}
 
 	public Position withHeartbeat(long lastHeartbeatRead) {

File: src/test/java/com/zendesk/maxwell/producer/partitioners/MaxwellKafkaPartitionerTest.java
Patch:
@@ -16,7 +16,7 @@ public class MaxwellKafkaPartitionerTest {
 	public void testRowMapEqualsDDLPartitioning() {
 		RowMap r = new RowMap("insert", "db", "tbl", 0L, new ArrayList<>(), null);
 		ResolvedDatabaseAlter m = new ResolvedDatabaseAlter("db", "utf8");
-		DDLMap d = new DDLMap(m, 0L, "alter-sql", null);
+		DDLMap d = new DDLMap(m, 0L, "alter-sql", null, null);
 
 		MaxwellKafkaPartitioner p = new MaxwellKafkaPartitioner("murmur3", "database", null, null);
 		assertEquals(p.kafkaPartition(r, 15), p.kafkaPartition(d, 15));
@@ -25,11 +25,11 @@ public void testRowMapEqualsDDLPartitioning() {
 	@Test
 	public void testDDLFallBack() {
 		ResolvedDatabaseAlter m = new ResolvedDatabaseAlter("some_db", "utf8");
-		DDLMap d = new DDLMap(m, 0L, "alter-sql", null);
+		DDLMap d = new DDLMap(m, 0L, "alter-sql", null, null);
 		MaxwellKafkaPartitioner p = new MaxwellKafkaPartitioner("murmur3", "table", null, "database");
 
 		ResolvedTableDrop m2 = new ResolvedTableDrop("some_db", "some_table");
-		DDLMap d2 = new DDLMap(m2, 0L, "alter-sql", null);
+		DDLMap d2 = new DDLMap(m2, 0L, "alter-sql", null, null);
 		MaxwellKafkaPartitioner p2 = new MaxwellKafkaPartitioner("murmur3", "database", null, "database");
 
 		assertEquals(p2.kafkaPartition(d2, 15), p.kafkaPartition(d, 15));

File: src/test/java/com/zendesk/maxwell/replication/AbstractReplicatorTest.java
Patch:
@@ -13,7 +13,8 @@
 public class AbstractReplicatorTest extends MaxwellTestWithIsolatedServer {
 
 	private RowMap heartbeatRow(long ts) {
-		return new HeartbeatRowMap("db", new Position(new BinlogPosition(0L, "binlog-file"), ts));
+		Position p = new Position(new BinlogPosition(0L, "binlog-file"), ts);
+		return new HeartbeatRowMap("db", p, p);
 	}
 
 	@Test

File: src/main/java/com/zendesk/maxwell/schema/SchemaCapturer.java
Patch:
@@ -55,8 +55,7 @@ public SchemaCapturer(Connection c, CaseSensitivity sensitivity) throws SQLExcep
 				"ORDINAL_POSITION, " +
 				"COLUMN_TYPE, " +
 				dateTimePrecision +
-				"COLUMN_KEY, " +
-				"COLUMN_TYPE " +
+				"COLUMN_KEY " +
 				"FROM `information_schema`.`COLUMNS` WHERE TABLE_SCHEMA = ?";
 
 		columnPreparedStatement = connection.prepareStatement(columnSql);

File: src/test/java/com/zendesk/maxwell/recovery/RecoveryTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.github.shyiko.mysql.binlog.network.SSLMode;
 import com.zendesk.maxwell.*;
-import com.zendesk.maxwell.replication.BinlogPosition;
 import com.zendesk.maxwell.replication.Position;
 import com.zendesk.maxwell.row.HeartbeatRowMap;
 import com.zendesk.maxwell.row.RowMap;
@@ -362,7 +361,7 @@ public void testSchemaIdRestore() throws Exception {
 		if (savedSchema == null) {
 			Connection c = context.getMaxwellConnection();
 			Schema newSchema = new SchemaCapturer(c, context.getCaseSensitivity()).capture();
-			savedSchema = SavedSchemaSupport.getSavedSchema(context, newSchema, context.getInitialPosition());
+			savedSchema = new MysqlSavedSchema(context, newSchema, context.getInitialPosition());
 			savedSchema.save(c);
 		}
 		Long oldSchemaId = savedSchema.getSchemaID();

File: src/main/java/com/zendesk/maxwell/schema/SchemaCapturer.java
Patch:
@@ -55,8 +55,7 @@ public SchemaCapturer(Connection c, CaseSensitivity sensitivity) throws SQLExcep
 				"ORDINAL_POSITION, " +
 				"COLUMN_TYPE, " +
 				dateTimePrecision +
-				"COLUMN_KEY, " +
-				"COLUMN_TYPE " +
+				"COLUMN_KEY " +
 				"FROM `information_schema`.`COLUMNS` WHERE TABLE_SCHEMA = ?";
 
 		columnPreparedStatement = connection.prepareStatement(columnSql);

File: src/main/java/com/zendesk/maxwell/util/ListWithDiskBuffer.java
Patch:
@@ -80,7 +80,8 @@ public Long inMemorySize() {
 	@Override
 	protected void finalize() throws Throwable {
 		try {
-			file.delete();
+			if ( file != null )
+				file.delete();
 		} finally {
 			super.finalize();
 		}

File: src/main/java/com/zendesk/maxwell/replication/AbstractReplicator.java
Patch:
@@ -118,7 +118,7 @@ protected void processQueryEvent(String dbName, String sql, SchemaStore schemaSt
 	 */
 	protected boolean shouldOutputEvent(String database, String table, MaxwellFilter filter) {
 		Boolean isSystemWhitelisted = this.maxwellSchemaDatabaseName.equals(database)
-			&& "bootstrap".equals(table);
+			&& ("bootstrap".equals(table) || "heartbeats".equals(table));
 
 		if ( MaxwellFilter.isSystemBlacklisted(database, table) )
 			return false;

File: src/main/java/com/zendesk/maxwell/MaxwellContext.java
Patch:
@@ -55,6 +55,7 @@ public class MaxwellContext {
 
 	public MaxwellContext(MaxwellConfig config) throws SQLException, URISyntaxException {
 		this.config = config;
+		this.config.validate();
 		this.taskManager = new TaskManager();
 		this.metrics = new MaxwellMetrics(config);
 

File: src/test/java/com/zendesk/maxwell/MaxwellIntegrationTest.java
Patch:
@@ -537,6 +537,7 @@ public void testOrderedOutput() throws Exception {
 	public void testJdbcConnectionOptions() throws Exception {
 		String[] opts = {"--jdbc_options= netTimeoutForStreamingResults=123& profileSQL=true  ", "--host=no-soup-spoons"};
 		MaxwellConfig config = new MaxwellConfig(opts);
+		config.validate();
 		assertThat(config.maxwellMysql.getConnectionURI(), containsString("jdbc:mysql://no-soup-spoons:3306/maxwell?"));
 		assertThat(config.replicationMysql.getConnectionURI(), containsString("jdbc:mysql://no-soup-spoons:3306?"));
 

File: src/main/java/com/zendesk/maxwell/schema/columndef/DateColumnDef.java
Patch:
@@ -23,6 +23,9 @@ public String toSQL(Object value) {
 
 	@Override
 	public Object asJSON(Object value) {
+		if ( value instanceof Long && (Long) value == Long.MIN_VALUE )
+			return "0000-00-00";
+
 		return DateFormatter.formatDate(value);
 	}
 }

File: src/test/java/com/zendesk/maxwell/BootstrapIntegrationTest.java
Patch:
@@ -120,9 +120,9 @@ public void testStringTypes( ) throws Exception {
 		testColumnType("datetime", "'2015-11-07 01:02:03'","2015-11-07 01:02:03");
 
 		if (server.supportsZeroDates()) {
-			testColumnType("date", "'0000-00-00'",null);
-			testColumnType("datetime", "'0000-00-00 00:00:00'", null);
-			testColumnType("timestamp", "'0000-00-00 00:00:00'","" + epoch.substring(0, epoch.length() - 2) + "", null);
+			testColumnType("date", "'0000-00-00'", "0000-00-00");
+			testColumnType("datetime", "'0000-00-00 00:00:00'", "0000-00-00 00:00:00");
+			testColumnType("timestamp", "'0000-00-00 00:00:00'", "0000-00-00 00:00:00");
 		}
 
 		testColumnType("datetime", "'1000-01-01 00:00:00'","1000-01-01 00:00:00");

File: src/test/java/com/zendesk/maxwell/MaxwellTestWithIsolatedServer.java
Patch:
@@ -8,6 +8,7 @@
 import com.zendesk.maxwell.replication.MysqlVersion;
 import com.zendesk.maxwell.replication.Position;
 import com.zendesk.maxwell.row.RowMap;
+import com.zendesk.maxwell.util.Logging;
 import org.junit.*;
 
 import static org.junit.Assume.assumeTrue;
@@ -21,6 +22,7 @@ public class MaxwellTestWithIsolatedServer extends TestWithNameLogging {
 
 	@BeforeClass
 	public static void setupTest() throws Exception {
+		Logging.setupLogBridging();
 		server = MaxwellTestSupport.setupServer();
 	}
 

File: src/test/java/com/zendesk/maxwell/BootstrapIntegrationTest.java
Patch:
@@ -120,9 +120,9 @@ public void testStringTypes( ) throws Exception {
 		testColumnType("datetime", "'2015-11-07 01:02:03'","2015-11-07 01:02:03");
 
 		if (server.supportsZeroDates()) {
-			testColumnType("date", "'0000-00-00'",null);
-			testColumnType("datetime", "'0000-00-00 00:00:00'", null);
-			testColumnType("timestamp", "'0000-00-00 00:00:00'","" + epoch.substring(0, epoch.length() - 2) + "", null);
+			testColumnType("date", "'0000-00-00'", "0000-00-00");
+			testColumnType("datetime", "'0000-00-00 00:00:00'", "0000-00-00 00:00:00");
+			testColumnType("timestamp", "'0000-00-00 00:00:00'", "0000-00-00 00:00:00");
 		}
 
 		testColumnType("datetime", "'1000-01-01 00:00:00'","1000-01-01 00:00:00");

File: src/main/java/com/zendesk/maxwell/schema/columndef/DateColumnDef.java
Patch:
@@ -23,6 +23,9 @@ public String toSQL(Object value) {
 
 	@Override
 	public Object asJSON(Object value) {
+		if ( value instanceof Long && (Long) value == Long.MIN_VALUE )
+			return "0000-00-00";
+
 		return DateFormatter.formatDate(value);
 	}
 }

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -3,8 +3,8 @@
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.health.HealthCheckRegistry;
 import com.github.shyiko.mysql.binlog.network.SSLMode;
-import com.zendesk.maxwell.producer.EncryptionMode;
 import com.zendesk.maxwell.monitoring.MaxwellDiagnosticContext;
+import com.zendesk.maxwell.producer.EncryptionMode;
 import com.zendesk.maxwell.producer.MaxwellOutputConfig;
 import com.zendesk.maxwell.producer.ProducerFactory;
 import com.zendesk.maxwell.replication.BinlogPosition;
@@ -273,6 +273,7 @@ protected OptionParser buildOptionParser() {
 		parser.accepts( "metrics_slf4j_interval", "the frequency metrics are emitted to the log, in seconds, when slf4j reporting is configured" ).withRequiredArg();
 		parser.accepts( "metrics_http_port", "[deprecated]" ).withRequiredArg();
 		parser.accepts( "http_port", "the port the server will bind to when http reporting is configured" ).withRequiredArg();
+		parser.accepts( "http_path_prefix", "the http path prefix when metrics_type includes http or diagnostic is enabled, default /" ).withRequiredArg();
 		parser.accepts( "http_bind_address", "the ip address the server will bind to when http reporting is configured" ).withRequiredArg();
 		parser.accepts( "metrics_datadog_type", "when metrics_type includes datadog this is the way metrics will be reported, one of udp|http" ).withRequiredArg();
 		parser.accepts( "metrics_datadog_tags", "datadog tags that should be supplied, e.g. tag1:value1,tag2:value2" ).withRequiredArg();

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -3,8 +3,8 @@
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.health.HealthCheckRegistry;
 import com.github.shyiko.mysql.binlog.network.SSLMode;
-import com.zendesk.maxwell.producer.EncryptionMode;
 import com.zendesk.maxwell.monitoring.MaxwellDiagnosticContext;
+import com.zendesk.maxwell.producer.EncryptionMode;
 import com.zendesk.maxwell.producer.MaxwellOutputConfig;
 import com.zendesk.maxwell.producer.ProducerFactory;
 import com.zendesk.maxwell.replication.BinlogPosition;
@@ -273,6 +273,7 @@ protected OptionParser buildOptionParser() {
 		parser.accepts( "metrics_slf4j_interval", "the frequency metrics are emitted to the log, in seconds, when slf4j reporting is configured" ).withRequiredArg();
 		parser.accepts( "metrics_http_port", "[deprecated]" ).withRequiredArg();
 		parser.accepts( "http_port", "the port the server will bind to when http reporting is configured" ).withRequiredArg();
+		parser.accepts( "http_path_prefix", "the http path prefix when metrics_type includes http or diagnostic is enabled, default /" ).withRequiredArg();
 		parser.accepts( "http_bind_address", "the ip address the server will bind to when http reporting is configured" ).withRequiredArg();
 		parser.accepts( "metrics_datadog_type", "when metrics_type includes datadog this is the way metrics will be reported, one of udp|http" ).withRequiredArg();
 		parser.accepts( "metrics_datadog_tags", "datadog tags that should be supplied, e.g. tag1:value1,tag2:value2" ).withRequiredArg();

File: src/main/java/com/zendesk/maxwell/schema/MysqlSavedSchema.java
Patch:
@@ -575,7 +575,7 @@ private static Long findSchema(Connection connection, Position targetPosition, L
 			PreparedStatement s = connection.prepareStatement(
 				"SELECT id from `schemas` "
 				+ "WHERE deleted = 0 "
-				+ "AND last_heartbeat_read <= ? AND ((binlog_file < ?) OR (binlog_file = ? and binlog_position <= ?)) AND server_id = ? "
+				+ "AND last_heartbeat_read <= ? AND ((binlog_file < ?) OR (binlog_file = ? and binlog_position < ?)) AND server_id = ? "
 				+ "ORDER BY last_heartbeat_read DESC, binlog_file DESC, binlog_position DESC limit 1");
 
 			s.setLong(1, targetPosition.getLastHeartbeatRead());

File: src/test/java/com/zendesk/maxwell/recovery/RecoveryTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.github.shyiko.mysql.binlog.network.SSLMode;
 import com.zendesk.maxwell.*;
+import com.zendesk.maxwell.replication.BinlogPosition;
 import com.zendesk.maxwell.replication.Position;
 import com.zendesk.maxwell.row.HeartbeatRowMap;
 import com.zendesk.maxwell.row.RowMap;
@@ -361,7 +362,7 @@ public void testSchemaIdRestore() throws Exception {
 		if (savedSchema == null) {
 			Connection c = context.getMaxwellConnection();
 			Schema newSchema = new SchemaCapturer(c, context.getCaseSensitivity()).capture();
-			savedSchema = new MysqlSavedSchema(context, newSchema, context.getInitialPosition());
+			savedSchema = SavedSchemaSupport.getSavedSchema(context, newSchema, context.getInitialPosition());
 			savedSchema.save(c);
 		}
 		Long oldSchemaId = savedSchema.getSchemaID();

File: src/test/java/com/zendesk/maxwell/recovery/RecoveryTest.java
Patch:
@@ -361,10 +361,8 @@ public void testSchemaIdRestore() throws Exception {
 		MysqlSavedSchema savedSchema = MysqlSavedSchema.restore(context, oldlogPosition);
 		if (savedSchema == null) {
 			Connection c = context.getMaxwellConnection();
-			Position schemaPosition = new Position(new BinlogPosition(oldlogPosition.getBinlogPosition().getOffset() - 1L,
-					oldlogPosition.getBinlogPosition().getFile()), oldlogPosition.getLastHeartbeatRead());
 			Schema newSchema = new SchemaCapturer(c, context.getCaseSensitivity()).capture();
-			savedSchema = new MysqlSavedSchema(context, newSchema, schemaPosition);
+			savedSchema = SavedSchemaSupport.getSavedSchema(context, newSchema, context.getInitialPosition());
 			savedSchema.save(c);
 		}
 		Long oldSchemaId = savedSchema.getSchemaID();

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -78,6 +78,7 @@ public class MaxwellConfig extends AbstractConfig {
 	public HealthCheckRegistry healthCheckRegistry;
 
 	public int httpPort;
+	public String httpBindAddress;
 	public String httpPathPrefix;
 	public String metricsPrefix;
 	public String metricsReportingType;
@@ -270,6 +271,7 @@ protected OptionParser buildOptionParser() {
 		parser.accepts( "metrics_slf4j_interval", "the frequency metrics are emitted to the log, in seconds, when slf4j reporting is configured" ).withRequiredArg();
 		parser.accepts( "metrics_http_port", "[deprecated]" ).withRequiredArg();
 		parser.accepts( "http_port", "the port the server will bind to when http reporting is configured" ).withRequiredArg();
+		parser.accepts( "http_bind_address", "the ip address the server will bind to when http reporting is configured" ).withRequiredArg();
 		parser.accepts( "metrics_datadog_type", "when metrics_type includes datadog this is the way metrics will be reported, one of udp|http" ).withRequiredArg();
 		parser.accepts( "metrics_datadog_tags", "datadog tags that should be supplied, e.g. tag1:value1,tag2:value2" ).withRequiredArg();
 		parser.accepts( "metrics_datadog_interval", "the frequency metrics are pushed to datadog, in seconds" ).withRequiredArg();
@@ -439,6 +441,7 @@ private void setup(OptionSet options, Properties properties) {
 		} else {
 			this.httpPort = Integer.parseInt(fetchOption("http_port", options, properties, "8080"));
 		}
+		this.httpBindAddress = fetchOption("http_bind_address", options, properties, null);
 		this.httpPathPrefix = fetchOption("http_path_prefix", options, properties, "/");
 		if (!this.httpPathPrefix.startsWith("/")) {
 			this.httpPathPrefix = "/" + this.httpPathPrefix;

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -78,6 +78,7 @@ public class MaxwellConfig extends AbstractConfig {
 	public HealthCheckRegistry healthCheckRegistry;
 
 	public int httpPort;
+	public String httpBindAddress;
 	public String httpPathPrefix;
 	public String metricsPrefix;
 	public String metricsReportingType;
@@ -270,6 +271,7 @@ protected OptionParser buildOptionParser() {
 		parser.accepts( "metrics_slf4j_interval", "the frequency metrics are emitted to the log, in seconds, when slf4j reporting is configured" ).withRequiredArg();
 		parser.accepts( "metrics_http_port", "[deprecated]" ).withRequiredArg();
 		parser.accepts( "http_port", "the port the server will bind to when http reporting is configured" ).withRequiredArg();
+		parser.accepts( "http_bind_address", "the ip address the server will bind to when http reporting is configured" ).withRequiredArg();
 		parser.accepts( "metrics_datadog_type", "when metrics_type includes datadog this is the way metrics will be reported, one of udp|http" ).withRequiredArg();
 		parser.accepts( "metrics_datadog_tags", "datadog tags that should be supplied, e.g. tag1:value1,tag2:value2" ).withRequiredArg();
 		parser.accepts( "metrics_datadog_interval", "the frequency metrics are pushed to datadog, in seconds" ).withRequiredArg();
@@ -439,6 +441,7 @@ private void setup(OptionSet options, Properties properties) {
 		} else {
 			this.httpPort = Integer.parseInt(fetchOption("http_port", options, properties, "8080"));
 		}
+		this.httpBindAddress = fetchOption("http_bind_address", options, properties, null);
 		this.httpPathPrefix = fetchOption("http_path_prefix", options, properties, "/");
 		if (!this.httpPathPrefix.startsWith("/")) {
 			this.httpPathPrefix = "/" + this.httpPathPrefix;

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -213,7 +213,6 @@ public void run() {
 		} catch ( SQLException e ) {
 			// catch SQLException explicitly because we likely don't care about the stacktrace
 			LOGGER.error("SQLException: " + e.getLocalizedMessage());
-			LOGGER.error(e.getLocalizedMessage());
 			System.exit(1);
 		} catch ( URISyntaxException e ) {
 			// catch URISyntaxException explicitly as well to provide more information to the user

File: src/main/java/com/zendesk/maxwell/MaxwellContext.java
Patch:
@@ -340,6 +340,7 @@ public AbstractProducer getProducer() throws IOException {
 				break;
 			case "sqs":
 				this.producer = new MaxwellSQSProducer(this, this.config.sqsQueueUri);
+				break;
 			case "pubsub":
 				this.producer = new MaxwellPubsubProducer(this, this.config.pubsubProjectId, this.config.pubsubTopic, this.config.ddlPubsubTopic);
 				break;

File: src/main/java/com/zendesk/maxwell/MaxwellMysqlConfig.java
Patch:
@@ -66,7 +66,7 @@ public void setJDBCOptions(String opts) {
 			return;
 
 		for ( String opt : opts.split("&") ) {
-			String[] valueKeySplit = opt.trim().split("=");
+			String[] valueKeySplit = opt.trim().split("=", 2);
 			if (valueKeySplit.length == 2) {
 				this.jdbcOptions.put(valueKeySplit[0], valueKeySplit[1]);
 			}

File: src/main/java/com/zendesk/maxwell/MaxwellMysqlConfig.java
Patch:
@@ -66,7 +66,7 @@ public void setJDBCOptions(String opts) {
 			return;
 
 		for ( String opt : opts.split("&") ) {
-			String[] valueKeySplit = opt.trim().split("=");
+			String[] valueKeySplit = opt.trim().split("=", 2);
 			if (valueKeySplit.length == 2) {
 				this.jdbcOptions.put(valueKeySplit[0], valueKeySplit[1]);
 			}

File: src/main/java/com/zendesk/maxwell/schema/MysqlSavedSchema.java
Patch:
@@ -486,6 +486,8 @@ private void restoreFullSchema(Connection conn, Long schemaID) throws SQLExcepti
 			if (currentDatabase == null || !currentDatabase.getName().equals(dbName)) {
 				currentDatabase = new Database(dbName, dbCharset);
 				this.schema.addDatabase(currentDatabase);
+				// make sure two tables named the same in different dbs are picked up.
+				currentTable = null;
 				LOGGER.debug("Restoring database " + dbName + "...");
 			}
 

File: src/main/java/com/zendesk/maxwell/schema/ddl/DDLMap.java
Patch:
@@ -19,7 +19,7 @@ public class DDLMap extends RowMap {
 	private Position nextPosition;
 
 	public DDLMap(ResolvedSchemaChange change, Long timestamp, String sql, Position nextPosition) {
-		super("ddl", "database", "table", timestamp, new ArrayList<String>(0), nextPosition);
+		super("ddl", change.databaseName(), change.tableName(), timestamp, new ArrayList<>(0), nextPosition);
 		this.change = change;
 		this.timestamp = timestamp;
 		this.sql = sql;

File: src/main/java/com/zendesk/maxwell/replication/BinlogConnectorReplicator.java
Patch:
@@ -145,7 +145,7 @@ private RowMapBuffer getTransactionRows(BinlogConnectorEvent beginEvent) throws
 		BinlogConnectorEvent event;
 		RowMapBuffer buffer = new RowMapBuffer(MAX_TX_ELEMENTS);
 
-		String currentQuery = "";
+		String currentQuery = null;
 
 		while ( true ) {
 			event = pollEvent();
@@ -182,7 +182,7 @@ private RowMapBuffer getTransactionRows(BinlogConnectorEvent beginEvent) throws
 						for ( RowMap r : event.jsonMaps(table, lastHeartbeatPosition, currentQuery) )
 							buffer.add(r);
 					}
-					currentQuery = "";
+					currentQuery = null;
 					break;
 				case TABLE_MAP:
 					TableMapEventData data = event.tableMapData();

File: src/main/java/com/zendesk/maxwell/row/RowMap.java
Patch:
@@ -114,7 +114,7 @@ public RowMap(String type, String database, String table, Long timestampMillis,
 
 	public RowMap(String type, String database, String table, Long timestampMillis, List<String> pkColumns,
 				  Position nextPosition) {
-		this(type, database, table, timestampMillis, pkColumns, nextPosition, "");
+		this(type, database, table, timestampMillis, pkColumns, nextPosition, null);
 	}
 
 	//Do we want to encrypt this part?

File: src/main/java/com/zendesk/maxwell/schema/ddl/DDLMap.java
Patch:
@@ -19,7 +19,7 @@ public class DDLMap extends RowMap {
 	private Position nextPosition;
 
 	public DDLMap(ResolvedSchemaChange change, Long timestamp, String sql, Position nextPosition) {
-		super("ddl", "database", "table", timestamp, new ArrayList<String>(0), nextPosition);
+		super("ddl", change.databaseName(), change.tableName(), timestamp, new ArrayList<>(0), nextPosition);
 		this.change = change;
 		this.timestamp = timestamp;
 		this.sql = sql;

File: src/main/java/com/zendesk/maxwell/row/RowMap.java
Patch:
@@ -262,7 +262,7 @@ public String toJSON(MaxwellOutputConfig outputConfig) throws Exception {
 		g.writeStringField("database", this.database);
 		g.writeStringField("table", this.table);
 
-		if ( outputConfig.includesRowQuery ) {
+		if ( outputConfig.includesRowQuery && this.rowQuery != null) {
 			g.writeStringField("query", this.rowQuery);
 		}
 

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -466,7 +466,7 @@ private void setup(OptionSet options, Properties properties) {
 		outputConfig.outputDDL	= fetchBooleanOption("output_ddl", options, properties, false);
 		this.excludeColumns     = fetchOption("exclude_columns", options, properties, null);
 
-		String encryptionMode = fetchOption("encryption", options, properties, "none");
+		String encryptionMode = fetchOption("encrypt", options, properties, "none");
 		switch (encryptionMode) {
 			case "none":
 				outputConfig.encryptionMode = EncryptionMode.ENCRYPT_NONE;

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -466,7 +466,7 @@ private void setup(OptionSet options, Properties properties) {
 		outputConfig.outputDDL	= fetchBooleanOption("output_ddl", options, properties, false);
 		this.excludeColumns     = fetchOption("exclude_columns", options, properties, null);
 
-		String encryptionMode = fetchOption("encryption", options, properties, "none");
+		String encryptionMode = fetchOption("encrypt", options, properties, "none");
 		switch (encryptionMode) {
 			case "none":
 				outputConfig.encryptionMode = EncryptionMode.ENCRYPT_NONE;

File: src/test/java/com/zendesk/maxwell/MaxwellIntegrationTest.java
Patch:
@@ -566,6 +566,7 @@ public void testSchemaServerNotSet() throws Exception {
 
 	@Test
 	public void testRowQueryLogEventsIsOn() throws Exception {
+		requireMinimumVersion(server.VERSION_5_6);
 		String sql[] = {
 				"SET binlog_rows_query_log_events=true",
 				"CREATE TABLE `test`.`row_query` ( id int )",

File: src/test/java/com/zendesk/maxwell/producer/KafkaCallbackTest.java
Patch:
@@ -26,7 +26,7 @@ public void shouldIgnoreProducerErrorByDefault() {
 			new Counter(), new Counter(), new Meter(), new Meter(),
 			context);
 		NotEnoughReplicasException error = new NotEnoughReplicasException("blah");
-		callback.onCompletion(new RecordMetadata(new TopicPartition("topic", 1), 1, 1), error);
+		callback.onCompletion(new RecordMetadata(new TopicPartition("topic", 1), 1, 1, 1, new Long(1), 1, 1), error);
 		verify(cc).markCompleted();
 	}
 
@@ -42,7 +42,7 @@ public void shouldTerminateWhenNotIgnoreProducerError() {
 			new Counter(), new Counter(), new Meter(), new Meter(),
 			context);
 		NotEnoughReplicasException error = new NotEnoughReplicasException("blah");
-		callback.onCompletion(new RecordMetadata(new TopicPartition("topic", 1), 1, 1), error);
+		callback.onCompletion(new RecordMetadata(new TopicPartition("topic", 1), 1, 1, 1, new Long(1), 1, 1), error);
 		verify(context).terminate(error);
 		verifyZeroInteractions(cc);
 	}

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -226,7 +226,7 @@ protected OptionParser buildOptionParser() {
 		parser.accepts( "rabbitmq_exchange", "Name of exchange for rabbitmq publisher" ).withRequiredArg();
 		parser.accepts( "rabbitmq_exchange_type", "Exchange type for rabbitmq" ).withRequiredArg();
 		parser.accepts( "rabbitmq_exchange_durable", "Exchange durability. Default is disabled" ).withOptionalArg();
-		parser.accepts( "rabbitmq_exchange_autodelete", "If set, the exchange is deleted when all queues have finished using it. Defaults to true" ).withOptionalArg();
+		parser.accepts( "rabbitmq_exchange_autodelete", "If set, the exchange is deleted when all queues have finished using it. Defaults to false" ).withOptionalArg();
 		parser.accepts( "rabbitmq_routing_key_template", "A string template for the routing key, '%db%' and '%table%' will be substituted. Default is '%db%.%table%'." ).withRequiredArg();
 
 		parser.accepts( "__separator_9" );
@@ -333,7 +333,7 @@ private void setup(OptionSet options, Properties properties) {
 		this.rabbitmqExchange       = fetchOption("rabbitmq_exchange", options, properties, "maxwell");
 		this.rabbitmqExchangeType   = fetchOption("rabbitmq_exchange_type", options, properties, "fanout");
 		this.rabbitMqExchangeDurable = fetchBooleanOption("rabbitmq_exchange_durable", options, properties, false);
-		this.rabbitMqExchangeAutoDelete = fetchBooleanOption("rabbitmq_exchange_autodelete", options, properties, true);
+		this.rabbitMqExchangeAutoDelete = fetchBooleanOption("rabbitmq_exchange_autodelete", options, properties, false);
 		this.rabbitmqRoutingKeyTemplate   = fetchOption("rabbitmq_routing_key_template", options, properties, "%db%.%table%");
 
 		String kafkaBootstrapServers = fetchOption("kafka.bootstrap.servers", options, properties, null);

File: src/main/java/com/zendesk/maxwell/producer/RabbitmqProducer.java
Patch:
@@ -21,6 +21,8 @@ public RabbitmqProducer(MaxwellContext context) {
 
 		ConnectionFactory factory = new ConnectionFactory();
 		factory.setHost(context.getConfig().rabbitmqHost);
+		factory.setUsername(context.getConfig().rabbitmqUser);
+		factory.setPassword(context.getConfig().rabbitmqPass);
 		factory.setVirtualHost(context.getConfig().rabbitmqVirtualHost);
 		try {
 			this.channel = factory.newConnection().createChannel();

File: src/test/java/com/zendesk/maxwell/producer/KafkaCallbackTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.codahale.metrics.Counter;
 import com.codahale.metrics.Meter;
-import com.codahale.metrics.Timer;
 import com.zendesk.maxwell.MaxwellConfig;
 import com.zendesk.maxwell.MaxwellContext;
 import com.zendesk.maxwell.replication.BinlogPosition;
@@ -24,7 +23,7 @@ public void shouldIgnoreProducerErrorByDefault() {
 		AbstractAsyncProducer.CallbackCompleter cc = mock(AbstractAsyncProducer.CallbackCompleter.class);
 		KafkaCallback callback = new KafkaCallback(cc,
 			new Position(new BinlogPosition(1, "binlog-1"), 0L), "key", "value",
-			new Timer(), new Counter(), new Counter(), new Meter(), new Meter(),
+			new Counter(), new Counter(), new Meter(), new Meter(),
 			context);
 		NotEnoughReplicasException error = new NotEnoughReplicasException("blah");
 		callback.onCompletion(new RecordMetadata(new TopicPartition("topic", 1), 1, 1), error);
@@ -40,7 +39,7 @@ public void shouldTerminateWhenNotIgnoreProducerError() {
 		AbstractAsyncProducer.CallbackCompleter cc = mock(AbstractAsyncProducer.CallbackCompleter.class);
 		KafkaCallback callback = new KafkaCallback(cc,
 			new Position(new BinlogPosition(1, "binlog-1"), 0L), "key", "value",
-			new Timer(), new Counter(), new Counter(), new Meter(), new Meter(),
+			new Counter(), new Counter(), new Meter(), new Meter(),
 			context);
 		NotEnoughReplicasException error = new NotEnoughReplicasException("blah");
 		callback.onCompletion(new RecordMetadata(new TopicPartition("topic", 1), 1, 1), error);

File: src/test/java/com/zendesk/maxwell/producer/KafkaCallbackTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.codahale.metrics.Counter;
 import com.codahale.metrics.Meter;
-import com.codahale.metrics.Timer;
 import com.zendesk.maxwell.MaxwellConfig;
 import com.zendesk.maxwell.MaxwellContext;
 import com.zendesk.maxwell.replication.BinlogPosition;
@@ -24,7 +23,7 @@ public void shouldIgnoreProducerErrorByDefault() {
 		AbstractAsyncProducer.CallbackCompleter cc = mock(AbstractAsyncProducer.CallbackCompleter.class);
 		KafkaCallback callback = new KafkaCallback(cc,
 			new Position(new BinlogPosition(1, "binlog-1"), 0L), "key", "value",
-			new Timer(), new Counter(), new Counter(), new Meter(), new Meter(),
+			new Counter(), new Counter(), new Meter(), new Meter(),
 			context);
 		NotEnoughReplicasException error = new NotEnoughReplicasException("blah");
 		callback.onCompletion(new RecordMetadata(new TopicPartition("topic", 1), 1, 1), error);
@@ -40,7 +39,7 @@ public void shouldTerminateWhenNotIgnoreProducerError() {
 		AbstractAsyncProducer.CallbackCompleter cc = mock(AbstractAsyncProducer.CallbackCompleter.class);
 		KafkaCallback callback = new KafkaCallback(cc,
 			new Position(new BinlogPosition(1, "binlog-1"), 0L), "key", "value",
-			new Timer(), new Counter(), new Counter(), new Meter(), new Meter(),
+			new Counter(), new Counter(), new Meter(), new Meter(),
 			context);
 		NotEnoughReplicasException error = new NotEnoughReplicasException("blah");
 		callback.onCompletion(new RecordMetadata(new TopicPartition("topic", 1), 1, 1), error);

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLIntegrationTest.java
Patch:
@@ -93,6 +93,7 @@ public void testJSON() throws Exception {
 	public void testCreateAndDropDatabase() throws Exception {
 		String sql[] = {
 			"create DATABASE test_db default character set='utf8'",
+			"create DATABASE test_db_1 default char set='utf8'",
 			"create DATABASE if not exists test_db",
 			"create DATABASE test_db_2",
 			"drop DATABASE test_db"

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLIntegrationTest.java
Patch:
@@ -93,6 +93,7 @@ public void testJSON() throws Exception {
 	public void testCreateAndDropDatabase() throws Exception {
 		String sql[] = {
 			"create DATABASE test_db default character set='utf8'",
+			"create DATABASE test_db_1 default char set='utf8'",
 			"create DATABASE if not exists test_db",
 			"create DATABASE test_db_2",
 			"drop DATABASE test_db"

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -145,7 +145,7 @@ protected OptionParser buildOptionParser() {
 		parser.accepts( "producer_partition_by", "database|table|primary_key|column, kafka/kinesis producers will partition by this value").withRequiredArg();
 		parser.accepts("producer_partition_columns",
 		    "with producer_partition_by=column, partition by the value of these columns.  "
-			+ "comma separated.");
+			+ "comma separated.").withRequiredArg();
 		parser.accepts( "producer_partition_by_fallback", "database|table|primary_key, fallback to this value when when sing 'column' partitioning and the columns are not present in the row").withRequiredArg();
 
 		parser.accepts( "kafka_partition_by", "[deprecated]").withRequiredArg();

File: src/main/java/com/zendesk/maxwell/row/RowMapDeserializer.java
Patch:
@@ -8,7 +8,6 @@
 import com.fasterxml.jackson.databind.module.SimpleModule;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.fasterxml.jackson.databind.node.ValueNode;
-import com.google.common.annotations.VisibleForTesting;
 import com.zendesk.maxwell.errors.ParseException;
 
 import java.io.IOException;

File: src/main/java/com/zendesk/maxwell/schema/columndef/JsonColumnDef.java
Patch:
@@ -20,7 +20,8 @@ public boolean matchesMysqlType(int type) {
 	@Override
 	public Object asJSON(Object value) {
 		try {
-			String jsonString = JsonBinary.parseAsString((byte[]) value);
+			byte[] bytes = (byte[]) value;
+			String jsonString = bytes.length > 0 ? JsonBinary.parseAsString(bytes) : "null";
 			return new RawJSONString(jsonString);
 		} catch (IOException e) {
 			throw new RuntimeException(e);

File: src/main/java/com/zendesk/maxwell/schema/columndef/JsonColumnDef.java
Patch:
@@ -20,7 +20,8 @@ public boolean matchesMysqlType(int type) {
 	@Override
 	public Object asJSON(Object value) {
 		try {
-			String jsonString = JsonBinary.parseAsString((byte[]) value);
+			byte[] bytes = (byte[]) value;
+			String jsonString = bytes.length > 0 ? JsonBinary.parseAsString(bytes) : "null";
 			return new RawJSONString(jsonString);
 		} catch (IOException e) {
 			throw new RuntimeException(e);

File: src/main/java/com/zendesk/maxwell/MaxwellFilter.java
Patch:
@@ -124,6 +124,9 @@ private boolean matchesTable(String tableName) {
 	}
 
 	public boolean matches(String database, String table) {
+		if (table == null) {
+			return matchesDatabase(database);
+		}
 		return matchesDatabase(database) && matchesTable(table);
 	}
 

File: src/main/java/com/zendesk/maxwell/MaxwellContext.java
Patch:
@@ -334,7 +334,7 @@ public AbstractProducer getProducer() throws IOException {
 			case "sqs":
 				this.producer = new MaxwellSQSProducer(this, this.config.sqsQueueUri);
 				break;
-				case "profiler":
+			case "profiler":
 				this.producer = new ProfilerProducer(this);
 				break;
 			case "stdout":

File: src/main/java/com/zendesk/maxwell/bootstrap/MaxwellBootstrapUtility.java
Patch:
@@ -136,9 +136,7 @@ private ConnectionPool getConnectionPool(MaxwellBootstrapUtilityConfig config) {
 		int maxSize = 0;
 		int idleTimeout = 10;
 		String connectionURI = config.getConnectionURI();
-		String mysqlUser = config.mysqlUser;
-		String mysqlPassword = config.mysqlPassword;
-		return new ConnectionPool(name, maxPool, maxSize, idleTimeout, connectionURI, mysqlUser, mysqlPassword);
+		return new ConnectionPool(name, maxPool, maxSize, idleTimeout, connectionURI, config.mysql.user, config.mysql.password);
 	}
 
 	private Long getTotalRowCount(Connection connection, Long bootstrapRowID) throws SQLException, MissingBootstrapRowException {

File: src/main/java/com/zendesk/maxwell/bootstrap/MaxwellBootstrapUtility.java
Patch:
@@ -136,9 +136,7 @@ private ConnectionPool getConnectionPool(MaxwellBootstrapUtilityConfig config) {
 		int maxSize = 0;
 		int idleTimeout = 10;
 		String connectionURI = config.getConnectionURI();
-		String mysqlUser = config.mysqlUser;
-		String mysqlPassword = config.mysqlPassword;
-		return new ConnectionPool(name, maxPool, maxSize, idleTimeout, connectionURI, mysqlUser, mysqlPassword);
+		return new ConnectionPool(name, maxPool, maxSize, idleTimeout, connectionURI, config.mysql.user, config.mysql.password);
 	}
 
 	private Long getTotalRowCount(Connection connection, Long bootstrapRowID) throws SQLException, MissingBootstrapRowException {

File: src/main/java/com/zendesk/maxwell/producer/MaxwellSQSProducer.java
Patch:
@@ -5,6 +5,8 @@
 
 import com.amazonaws.handlers.AsyncHandler;
 import com.amazonaws.services.sqs.AmazonSQSAsync;
+import com.amazonaws.services.sqs.AmazonSQSAsyncClient;
+import com.amazonaws.services.sqs.AmazonSQSAsyncClientBuilder;
 import com.amazonaws.services.sqs.model.SendMessageRequest;
 import com.amazonaws.services.sqs.model.SendMessageResult;
 import com.zendesk.maxwell.MaxwellContext;
@@ -19,6 +21,7 @@ public class MaxwellSQSProducer extends AbstractAsyncProducer {
 	public MaxwellSQSProducer(MaxwellContext context, String queueUri) {
 		super(context);
 		this.queueUri = queueUri;
+		this.client = AmazonSQSAsyncClientBuilder.defaultClient();
 	}
 
 	@Override

File: src/main/java/com/zendesk/maxwell/row/RowMap.java
Patch:
@@ -203,7 +203,6 @@ private String getPartitionKeyFallback(String partitionKeyFallback) {
 	private DataJsonGenerator dataJsonGenerator(MaxwellOutputConfig outputConfig) throws NoSuchAlgorithmException{
 		if (outputConfig.encryptData && !outputConfig.encryptAll) {
 			DataJsonGenerator g = encryptingJsonGeneratorThreadLocal.get();
-			g.set(outputConfig.secret_key);
 			return g;
 		} else {
 			return plaintextDataGeneratorThreadLocal.get();
@@ -212,7 +211,9 @@ private DataJsonGenerator dataJsonGenerator(MaxwellOutputConfig outputConfig) th
 
 	private void writeMapToJSON(String jsonMapName, LinkedHashMap<String, Object> data, MaxwellOutputConfig outputConfig) throws IOException, NoSuchAlgorithmException {
 		DataJsonGenerator dataGenerator = dataJsonGenerator(outputConfig);
-
+		if(jsonMapName != "old") {
+			dataGenerator.set(outputConfig.secret_key);
+		}
 		dataGenerator.begin(jsonMapName, byteArrayThreadLocal.get());
 
 		for (String key : data.keySet()) {

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -205,8 +205,8 @@ protected OptionParser buildOptionParser() {
 		parser.accepts("rabbitmq_exchange_type", "Exchange type for rabbitmq").withOptionalArg();
 		parser.accepts("rabbitmq_routing_key_template", "A string template for the routing key, '%db%' and '%table%' will be substituted. Default is '%db%.%table%'.").withOptionalArg();
 
-    parser.accepts( "__separator_9" );
-    
+		parser.accepts( "__separator_9" );
+
 		parser.accepts( "metrics_prefix", "the prefix maxwell will apply to all metrics" ).withOptionalArg();
 		parser.accepts( "metrics_type", "how maxwell metrics will be reported, at least one of slf4j|jmx|http|datadog" ).withOptionalArg();
 		parser.accepts( "metrics_slf4j_interval", "the frequency metrics are emitted to the log, in seconds, when slf4j reporting is configured" ).withOptionalArg();

File: src/main/java/com/zendesk/maxwell/MaxwellContext.java
Patch:
@@ -341,9 +341,9 @@ public AbstractProducer getProducer() throws IOException {
 			case "buffer":
 				this.producer = new BufferedProducer(this, this.config.bufferedProducerSize);
 				break;
-		  case "rabbitmq":
-			  this.producer = new RabbitmqProducer(this);
-			  break;
+			case "rabbitmq":
+				this.producer = new RabbitmqProducer(this);
+				break;
 			case "none":
 				this.producer = null;
 				break;

File: src/main/java/com/zendesk/maxwell/row/RowMap.java
Patch:
@@ -97,7 +97,7 @@ private String pkToJsonHash() throws IOException {
 		g.writeStringField("database", database);
 		g.writeStringField("table", table);
 
-		if (pkColumns == null || pkColumns.isEmpty()) {
+		if (pkColumns.isEmpty()) {
 			g.writeStringField("_uuid", UUID.randomUUID().toString());
 		} else {
 			for (String pk : pkColumns) {

File: src/main/java/com/zendesk/maxwell/schema/columndef/DateTimeColumnDef.java
Patch:
@@ -22,7 +22,7 @@ public boolean matchesMysqlType(int type) {
 
 	protected String formatValue(Object value) {
 		Timestamp ts = DateFormatter.extractTimestamp(value);
-		String dateString = DateFormatter.formatDateTime(value);
+		String dateString = DateFormatter.formatDateTime(value, ts);
 		if ( dateString == null )
 			return null;
 		else

File: src/main/java/com/zendesk/maxwell/schema/columndef/DateTimeColumnDef.java
Patch:
@@ -22,7 +22,7 @@ public boolean matchesMysqlType(int type) {
 
 	protected String formatValue(Object value) {
 		Timestamp ts = DateFormatter.extractTimestamp(value);
-		String dateString = DateFormatter.formatDateTime(value);
+		String dateString = DateFormatter.formatDateTime(value, ts);
 		if ( dateString == null )
 			return null;
 		else

File: src/main/java/com/zendesk/maxwell/BufferedMaxwell.java
Patch:
@@ -21,4 +21,7 @@ public RowMap poll(long ms) throws IOException, InterruptedException {
 		return p.poll(ms, TimeUnit.MILLISECONDS);
 	}
 
+	public MaxwellContext getContext() {
+		return context;
+	}
 }

File: src/main/java/com/zendesk/maxwell/bootstrap/AsynchronousBootstrapper.java
Patch:
@@ -132,7 +132,7 @@ private void replaySkippedRows(String databaseName, String tableName, AbstractPr
 		skippedRows.flushToDisk(databaseName, tableName);
 		while ( skippedRows.size(databaseName, tableName) > 0 ) {
 			RowMap row = skippedRows.removeFirst(databaseName, tableName);
-			if ( bootstrapStartBinlogPosition == null || row.getPosition().newerThan(bootstrapStartBinlogPosition) )
+			if ( bootstrapStartBinlogPosition == null || row.getPosition().getBinlogPosition().newerThan(bootstrapStartBinlogPosition) )
 				producer.push(row);
 		}
 		LOGGER.info("async bootstrapping: replay complete");

File: src/main/java/com/zendesk/maxwell/recovery/RecoverySchemaStore.java
Patch:
@@ -1,7 +1,7 @@
 package com.zendesk.maxwell.recovery;
 
-import com.zendesk.maxwell.replication.BinlogPosition;
 import com.zendesk.maxwell.CaseSensitivity;
+import com.zendesk.maxwell.replication.Position;
 import com.zendesk.maxwell.schema.*;
 import com.zendesk.maxwell.schema.ddl.InvalidSchemaError;
 import com.zendesk.maxwell.schema.ddl.ResolvedSchemaChange;
@@ -48,7 +48,7 @@ public Schema getSchema() throws SchemaStoreException {
 	}
 
 	@Override
-	public List<ResolvedSchemaChange> processSQL(String sql, String currentDatabase, BinlogPosition position) throws SchemaStoreException, InvalidSchemaError {
+	public List<ResolvedSchemaChange> processSQL(String sql, String currentDatabase, Position position) throws SchemaStoreException, InvalidSchemaError {
 		return new ArrayList<>();
 	}
 }

File: src/main/java/com/zendesk/maxwell/replication/TableCache.java
Patch:
@@ -26,7 +26,7 @@ public void processEvent(Schema schema, MaxwellFilter filter, Long tableId, Stri
 				Table tbl = db.findTable(tblName);
 
 				if (tbl == null)
-					throw new RuntimeException("Couldn't find table " + tblName);
+					throw new RuntimeException("Couldn't find table " + tblName + " in database " + dbName);
 				else
 					tableMapCache.put(tableId, tbl);
 			}

File: src/main/java/com/zendesk/maxwell/row/RowMapDeserializer.java
Patch:
@@ -65,7 +65,7 @@ public RowMap deserialize(JsonParser jsonParser, DeserializationContext deserial
 				type.asText(),
 				database.asText(),
 				table.asText(),
-				ts.asLong(),
+				ts.asLong() * 1000,
 				new ArrayList<String>(),
 				null
 		);

File: src/main/java/com/zendesk/maxwell/schema/Database.java
Patch:
@@ -52,7 +52,7 @@ public Table findTable(String name) {
 	public Table findTableOrThrow(String table) throws InvalidSchemaError {
 		Table t = findTable(table);
 		if ( t == null )
-			throw new InvalidSchemaError("Couldn't find table '" + table + "'" + " in database '" + this.name);
+			throw new InvalidSchemaError("Couldn't find table '" + table + "'" + " in database " + this.name);
 
 		return t;
 	}

File: src/main/java/com/zendesk/maxwell/schema/SchemaStore.java
Patch:
@@ -1,6 +1,6 @@
 package com.zendesk.maxwell.schema;
 
-import com.zendesk.maxwell.replication.BinlogPosition;
+import com.zendesk.maxwell.replication.Position;
 import com.zendesk.maxwell.schema.ddl.InvalidSchemaError;
 import com.zendesk.maxwell.schema.ddl.ResolvedSchemaChange;
 
@@ -26,5 +26,5 @@ public interface SchemaStore {
 	 * @param position The position of the DDL statement
 	 * @return A list of the schema changes parsed from the SQL.
 	 */
-	List<ResolvedSchemaChange> processSQL(String sql, String currentDatabase, BinlogPosition position) throws SchemaStoreException, InvalidSchemaError;
+	List<ResolvedSchemaChange> processSQL(String sql, String currentDatabase, Position position) throws SchemaStoreException, InvalidSchemaError;
 }

File: src/main/java/com/zendesk/maxwell/util/RunState.java
Patch:
@@ -0,0 +1,3 @@
+package com.zendesk.maxwell.util;
+
+public enum RunState { STOPPED, RUNNING, REQUEST_STOP }

File: src/test/java/com/zendesk/maxwell/MaxwellIntegrationTest.java
Patch:
@@ -329,7 +329,9 @@ public void testMyISAMCommit() throws Exception {
 	public void testSystemBlacklist() throws Exception  {
 		String sql[] = {
 			"create table mysql.ha_health_check ( id int )",
-			"insert into mysql.ha_health_check set id = 1"
+			"create table mysql.rds_heartbeat2 ( id int )",
+			"insert into mysql.ha_health_check set id = 1",
+			"insert into mysql.rds_heartbeat2 set id = 1"
 		};
 
 		List<RowMap> list = getRowsForSQL(sql);

File: src/main/java/com/zendesk/maxwell/metrics/Metrics.java
Patch:
@@ -1,6 +1,7 @@
 package com.zendesk.maxwell.metrics;
 
 import com.codahale.metrics.MetricRegistry;
+import com.zendesk.maxwell.MaxwellContext;
 
 public interface Metrics {
 	String metricName(String... names);

File: src/main/java/com/zendesk/maxwell/producer/AbstractAsyncProducer.java
Patch:
@@ -4,6 +4,7 @@
 import com.codahale.metrics.Gauge;
 import com.codahale.metrics.Meter;
 import com.codahale.metrics.MetricRegistry;
+import com.zendesk.maxwell.metrics.MaxwellMetrics;
 import com.zendesk.maxwell.MaxwellContext;
 import com.zendesk.maxwell.metrics.Metrics;
 import com.zendesk.maxwell.replication.Position;

File: src/main/java/com/zendesk/maxwell/producer/BufferedProducer.java
Patch:
@@ -4,6 +4,7 @@
 import com.zendesk.maxwell.row.HeartbeatRowMap;
 import com.zendesk.maxwell.row.RowMap;
 
+import java.sql.SQLException;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.TimeUnit;
 

File: src/main/java/com/zendesk/maxwell/producer/FileProducer.java
Patch:
@@ -1,12 +1,12 @@
 package com.zendesk.maxwell.producer;
 
-import com.zendesk.maxwell.MaxwellContext;
-import com.zendesk.maxwell.row.RowMap;
-
 import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
 
+import com.zendesk.maxwell.MaxwellContext;
+import com.zendesk.maxwell.row.RowMap;
+
 public class FileProducer extends AbstractProducer {
 	private final File file;
 	private final FileWriter fileWriter;

File: src/main/java/com/zendesk/maxwell/producer/MaxwellKafkaProducer.java
Patch:
@@ -10,6 +10,7 @@
 import com.zendesk.maxwell.row.RowMap;
 import com.zendesk.maxwell.row.RowMap.KeyFormat;
 import com.zendesk.maxwell.schema.ddl.DDLMap;
+import com.zendesk.maxwell.util.Logging;
 import com.zendesk.maxwell.util.StoppableTask;
 import com.zendesk.maxwell.util.StoppableTaskState;
 import org.apache.kafka.clients.producer.Callback;
@@ -130,6 +131,7 @@ class MaxwellKafkaProducerWorker extends AbstractAsyncProducer implements Runnab
 
 	public MaxwellKafkaProducerWorker(MaxwellContext context, Properties kafkaProperties, String kafkaTopic, ArrayBlockingQueue<RowMap> queue) {
 		super(context);
+
 		this.topic = kafkaTopic;
 		if ( this.topic == null ) {
 			this.topic = "maxwell";

File: src/main/java/com/zendesk/maxwell/producer/AbstractAsyncProducer.java
Patch:
@@ -53,6 +53,7 @@ public Long timeToSendMS() {
 
 	public AbstractAsyncProducer(MaxwellContext context) {
 		super(context);
+
 		this.inflightMessages = new InflightMessageList();
 
 		Metrics metrics = context.getMetrics();

File: src/main/java/com/zendesk/maxwell/producer/AbstractProducer.java
Patch:
@@ -6,8 +6,8 @@
 import com.zendesk.maxwell.util.StoppableTask;
 
 public abstract class AbstractProducer {
-	protected MaxwellContext context;
-	protected MaxwellOutputConfig outputConfig;
+	protected final MaxwellContext context;
+	protected final MaxwellOutputConfig outputConfig;
 
 	public AbstractProducer(MaxwellContext context) {
 		this.context = context;

File: src/test/java/com/zendesk/maxwell/EmbeddedMaxwellTest.java
Patch:
@@ -28,6 +28,7 @@ public void testCustomMetricsAndProducer() throws Exception {
 		MetricRegistry metrics = new MetricRegistry();
 		HealthCheckRegistry healthChecks = new HealthCheckRegistry();
 		final BlockingQueue<RowMap> rowBuffer = new LinkedBlockingQueue<>();
+		config.metricsReportingType = "embedded";
 		config.metricRegistry = metrics;
 		config.healthCheckRegistry = healthChecks;
 		config.metricsPrefix = "prefix";

File: src/main/java/com/zendesk/maxwell/row/RowMap.java
Patch:
@@ -370,7 +370,7 @@ public Long getTimestamp() {
 	}
 
 	public Long getTimestampMillis() {
-		return timestampSeconds;
+		return timestampMillis;
 	}
 
 	public boolean hasData(String name) {

File: src/main/java/com/zendesk/maxwell/row/RowMap.java
Patch:
@@ -370,7 +370,7 @@ public Long getTimestamp() {
 	}
 
 	public Long getTimestampMillis() {
-		return timestampSeconds;
+		return timestampMillis;
 	}
 
 	public boolean hasData(String name) {

File: src/main/java/com/zendesk/maxwell/metrics/MaxwellHealthCheck.java
Patch:
@@ -15,7 +15,7 @@ public MaxwellHealthCheck(AbstractProducer producer) {
 	@Override
 	protected Result check() throws Exception {
 		// TODO: this should be configurable.
-		if (failedMessageMeter != null && failedMessageMeter.getFiveMinuteRate() > 0) {
+		if (failedMessageMeter != null && failedMessageMeter.getFifteenMinuteRate() > 0) {
 			return Result.unhealthy(">1 messages failed to be sent to Kafka in the past 15minutes");
 		} else {
 			return Result.healthy();

File: src/main/java/com/zendesk/maxwell/row/RowMapDeserializer.java
Patch:
@@ -57,7 +57,7 @@ public RowMap deserialize(JsonParser jsonParser, DeserializationContext deserial
 				type.asText(),
 				database.asText(),
 				table.asText(),
-				ts.asLong(),
+				ts.asLong() * 1000,
 				new ArrayList<String>(),
 				null
 		);

File: src/test/java/com/zendesk/maxwell/row/RowMapBufferTest.java
Patch:
@@ -16,9 +16,9 @@ public void TestOverflowToDisk() throws Exception {
 		RowMapBuffer buffer = new RowMapBuffer(2, 250); // allow about 250 bytes of memory to be used
 
 		RowMap r;
-		buffer.add(new RowMap("insert", "foo", "bar", 1L, new ArrayList<String>(), new Position(new BinlogPosition(3, "mysql.1"), 0L)));
-		buffer.add(new RowMap("insert", "foo", "bar", 2L, new ArrayList<String>(), new Position(new BinlogPosition(3, "mysql.1"), 0L)));
-		buffer.add(new RowMap("insert", "foo", "bar", 3L, new ArrayList<String>(), new Position(new BinlogPosition(3, "mysql.1"), 0L)));
+		buffer.add(new RowMap("insert", "foo", "bar", 1000L, new ArrayList<String>(), new Position(new BinlogPosition(3, "mysql.1"), 0L)));
+		buffer.add(new RowMap("insert", "foo", "bar", 2000L, new ArrayList<String>(), new Position(new BinlogPosition(3, "mysql.1"), 0L)));
+		buffer.add(new RowMap("insert", "foo", "bar", 3000L, new ArrayList<String>(), new Position(new BinlogPosition(3, "mysql.1"), 0L)));
 
 		assertThat(buffer.size(), is(3L));
 		assertThat(buffer.inMemorySize(), is(2L));

File: src/main/java/com/zendesk/maxwell/row/RowMapDeserializer.java
Patch:
@@ -57,7 +57,7 @@ public RowMap deserialize(JsonParser jsonParser, DeserializationContext deserial
 				type.asText(),
 				database.asText(),
 				table.asText(),
-				ts.asLong(),
+				ts.asLong() * 1000,
 				new ArrayList<String>(),
 				null
 		);

File: src/test/java/com/zendesk/maxwell/row/RowMapBufferTest.java
Patch:
@@ -16,9 +16,9 @@ public void TestOverflowToDisk() throws Exception {
 		RowMapBuffer buffer = new RowMapBuffer(2, 250); // allow about 250 bytes of memory to be used
 
 		RowMap r;
-		buffer.add(new RowMap("insert", "foo", "bar", 1L, new ArrayList<String>(), new Position(new BinlogPosition(3, "mysql.1"), 0L)));
-		buffer.add(new RowMap("insert", "foo", "bar", 2L, new ArrayList<String>(), new Position(new BinlogPosition(3, "mysql.1"), 0L)));
-		buffer.add(new RowMap("insert", "foo", "bar", 3L, new ArrayList<String>(), new Position(new BinlogPosition(3, "mysql.1"), 0L)));
+		buffer.add(new RowMap("insert", "foo", "bar", 1000L, new ArrayList<String>(), new Position(new BinlogPosition(3, "mysql.1"), 0L)));
+		buffer.add(new RowMap("insert", "foo", "bar", 2000L, new ArrayList<String>(), new Position(new BinlogPosition(3, "mysql.1"), 0L)));
+		buffer.add(new RowMap("insert", "foo", "bar", 3000L, new ArrayList<String>(), new Position(new BinlogPosition(3, "mysql.1"), 0L)));
 
 		assertThat(buffer.size(), is(3L));
 		assertThat(buffer.inMemorySize(), is(2L));

File: src/main/java/com/zendesk/maxwell/metrics/MaxwellHealthCheck.java
Patch:
@@ -15,7 +15,7 @@ public MaxwellHealthCheck(AbstractProducer producer) {
 	@Override
 	protected Result check() throws Exception {
 		// TODO: this should be configurable.
-		if (failedMessageMeter != null && failedMessageMeter.getFiveMinuteRate() > 0) {
+		if (failedMessageMeter != null && failedMessageMeter.getFifteenMinuteRate() > 0) {
 			return Result.unhealthy(">1 messages failed to be sent to Kafka in the past 15minutes");
 		} else {
 			return Result.healthy();

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -206,7 +206,9 @@ public void testParsingSomeAlters() {
 			"create table if not exists audit_payer_bank_details (event_time TIMESTAMP default CURRENT_TIMESTAMP())",
 			"ALTER TABLE foo RENAME INDEX index_quote_request_follow_on_data_on_model_name TO index_quote_request_follow_on_data_on_model_class_name",
 			"ALTER TABLE foo DROP COLUMN `ducati` CASCADE",
-			"CREATE TABLE account_groups ( visible_to_all CHAR(1) DEFAULT 'N' NOT NULL CHECK (visible_to_all IN ('Y','N')))"
+			"CREATE TABLE account_groups ( visible_to_all CHAR(1) DEFAULT 'N' NOT NULL CHECK (visible_to_all IN ('Y','N')))",
+			"create table vc11( id serial, name varchar(10) not null default \"\")"
+
 		};
 
 		for ( String s : testSQL ) {

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -206,7 +206,9 @@ public void testParsingSomeAlters() {
 			"create table if not exists audit_payer_bank_details (event_time TIMESTAMP default CURRENT_TIMESTAMP())",
 			"ALTER TABLE foo RENAME INDEX index_quote_request_follow_on_data_on_model_name TO index_quote_request_follow_on_data_on_model_class_name",
 			"ALTER TABLE foo DROP COLUMN `ducati` CASCADE",
-			"CREATE TABLE account_groups ( visible_to_all CHAR(1) DEFAULT 'N' NOT NULL CHECK (visible_to_all IN ('Y','N')))"
+			"CREATE TABLE account_groups ( visible_to_all CHAR(1) DEFAULT 'N' NOT NULL CHECK (visible_to_all IN ('Y','N')))",
+			"create table vc11( id serial, name varchar(10) not null default \"\")"
+
 		};
 
 		for ( String s : testSQL ) {

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -71,6 +71,7 @@ public class MaxwellConfig extends AbstractConfig {
 	public BinlogPosition initPosition;
 	public boolean replayMode;
 	public boolean masterRecovery;
+	public boolean ignoreProducerError;
 
 	public MaxwellConfig() { // argv is only null in tests
 		this.kafkaProperties = new Properties();
@@ -165,6 +166,7 @@ protected OptionParser buildOptionParser() {
 		parser.accepts( "replay", "replay mode, don't store any information to the server").withOptionalArg();
 		parser.accepts( "master_recovery", "(experimental) enable master position recovery code").withOptionalArg();
 		parser.accepts( "gtid_mode", "(experimental) enable gtid mode").withOptionalArg();
+		parser.accepts( "ignore_producer_error", "Maxwell will be terminated on kafka/kinesis errors when false. Otherwise, those producer errors are only logged. Default to true").withOptionalArg();
 
 		parser.accepts( "__separator_7" );
 
@@ -385,6 +387,7 @@ private void setup(OptionSet options, Properties properties) {
 
 		this.replayMode =     fetchBooleanOption("replay", options, null, false);
 		this.masterRecovery = fetchBooleanOption("master_recovery", options, properties, false);
+		this.ignoreProducerError = fetchBooleanOption("ignore_producer_error", options, properties, true);
 
 		this.outputConfig = new MaxwellOutputConfig();
 		outputConfig.includesBinlogPosition = fetchBooleanOption("output_binlog_position", options, properties, false);

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -166,7 +166,7 @@ protected OptionParser buildOptionParser() {
 		parser.accepts( "replay", "replay mode, don't store any information to the server").withOptionalArg();
 		parser.accepts( "master_recovery", "(experimental) enable master position recovery code").withOptionalArg();
 		parser.accepts( "gtid_mode", "(experimental) enable gtid mode").withOptionalArg();
-		parser.accepts( "ignore_producer_error", "maxwell is terminated on Kafka/Kinesis errors when set it to false, default to true").withOptionalArg();
+		parser.accepts( "ignore_producer_error", "Maxwell will be terminated on kafka/kinesis errors when set it to false. Otherwise, those producer errors are only logged. Default to true").withOptionalArg();
 
 		parser.accepts( "__separator_7" );
 

File: src/test/java/com/zendesk/maxwell/producer/KafkaCallbackTest.java
Patch:
@@ -31,7 +31,7 @@ public void shouldIgnoreProducerErrorByDefault() {
 	}
 
 	@Test
-	public void shouldTerminateWhenNotIgnoreProuderError() {
+	public void shouldTerminateWhenNotIgnoreProducerError() {
 		MaxwellContext context = mock(MaxwellContext.class);
 		MaxwellConfig config = new MaxwellConfig();
 		config.ignoreProducerError = false;

File: src/test/java/com/zendesk/maxwell/producer/KinesisCallbackTest.java
Patch:
@@ -25,7 +25,7 @@ public void shouldIgnoreProducerErrorByDefault() {
 	}
 
 	@Test
-	public void shouldTerminateWhenNotIgnoreProuderError() {
+	public void shouldTerminateWhenNotIgnoreProducerError() {
 		MaxwellContext context = mock(MaxwellContext.class);
 		MaxwellConfig config = new MaxwellConfig();
 		config.ignoreProducerError = false;

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -71,6 +71,7 @@ public class MaxwellConfig extends AbstractConfig {
 	public BinlogPosition initPosition;
 	public boolean replayMode;
 	public boolean masterRecovery;
+	public boolean ignoreProducerError;
 
 	public MaxwellConfig() { // argv is only null in tests
 		this.kafkaProperties = new Properties();
@@ -165,6 +166,7 @@ protected OptionParser buildOptionParser() {
 		parser.accepts( "replay", "replay mode, don't store any information to the server").withOptionalArg();
 		parser.accepts( "master_recovery", "(experimental) enable master position recovery code").withOptionalArg();
 		parser.accepts( "gtid_mode", "(experimental) enable gtid mode").withOptionalArg();
+		parser.accepts( "ignore_producer_error", "maxwell is terminated on Kafka/Kinesis errors when set it to false, default to true").withOptionalArg();
 
 		parser.accepts( "__separator_7" );
 
@@ -385,6 +387,7 @@ private void setup(OptionSet options, Properties properties) {
 
 		this.replayMode =     fetchBooleanOption("replay", options, null, false);
 		this.masterRecovery = fetchBooleanOption("master_recovery", options, properties, false);
+		this.ignoreProducerError = fetchBooleanOption("ignore_producer_error", options, properties, true);
 
 		this.outputConfig = new MaxwellOutputConfig();
 		outputConfig.includesBinlogPosition = fetchBooleanOption("output_binlog_position", options, properties, false);

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -176,6 +176,7 @@ public void testParsingSomeAlters() {
 			"alter table t alter column `foo` SET DEFAULT 'foo'",
 			"alter table t alter column `foo` SET DEFAULT true",
 			"alter table t alter column `foo` SET DEFAULT false",
+			"alter table t alter column `foo` SET DEFAULT -1",
 			"alter table t alter column `foo` drop default",
 			"alter table t CHARACTER SET latin1 COLLATE = 'utf8'",
 			"ALTER TABLE `test` ENGINE=`InnoDB` CHARACTER SET latin1",

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -176,6 +176,7 @@ public void testParsingSomeAlters() {
 			"alter table t alter column `foo` SET DEFAULT 'foo'",
 			"alter table t alter column `foo` SET DEFAULT true",
 			"alter table t alter column `foo` SET DEFAULT false",
+			"alter table t alter column `foo` SET DEFAULT -1",
 			"alter table t alter column `foo` drop default",
 			"alter table t CHARACTER SET latin1 COLLATE = 'utf8'",
 			"ALTER TABLE `test` ENGINE=`InnoDB` CHARACTER SET latin1",

File: src/test/java/com/zendesk/maxwell/recovery/RecoveryTest.java
Patch:
@@ -238,7 +238,7 @@ public void beforeTerminate(MysqlIsolatedServer mysql) {
 			}
 		};
 
-		List<RowMap> rows = MaxwellTestSupport.getRowsWithReplicator(masterServer, null, callback);
+		List<RowMap> rows = MaxwellTestSupport.getRowsWithReplicator(masterServer, null, callback, null);
 
 		generateNewMasterData(false, DATA_SIZE);
 

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -187,7 +187,7 @@ private void start() throws Exception {
 		// Dropwizard throws an exception if you try to register multiple metrics with the same name.
 		// Since there are codepaths that create multiple replicators (at least in the tests) we need to protect
 		// against that.
-		String lagGaugeName = MetricRegistry.name(MaxwellMetrics.metricsName, "replication", "lag");
+		String lagGaugeName = MetricRegistry.name(MaxwellMetrics.getMetricsPrefix(), "replication", "lag");
 		if ( !(MaxwellMetrics.metricRegistry.getGauges().containsKey(lagGaugeName)) ) {
 			MaxwellMetrics.metricRegistry.register(
 					lagGaugeName,

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -53,6 +53,7 @@ public class MaxwellConfig extends AbstractConfig {
 	public MaxwellOutputConfig outputConfig;
 	public String log_level;
 
+	public String metricsPrefix;
 	public String metricsReportingType;
 	public Long metricsSlf4jInterval;
 	public int metricsHTTPPort;
@@ -177,6 +178,7 @@ protected OptionParser buildOptionParser() {
 
 		parser.accepts( "__separator_8" );
 
+		parser.accepts( "metrics_prefix", "the prefix maxwell will apply to all metrics" ).withOptionalArg();
 		parser.accepts( "metrics_type", "how maxwell metrics will be reported, at least one of slf4j|jmx|http|datadog" ).withOptionalArg();
 		parser.accepts( "metrics_slf4j_interval", "the frequency metrics are emitted to the log, in seconds, when slf4j reporting is configured" ).withOptionalArg();
 		parser.accepts( "metrics_http_port", "the port the server will bind to when http reporting is configured" ).withOptionalArg();
@@ -346,6 +348,7 @@ private void setup(OptionSet options, Properties properties) {
 
 		this.outputFile = fetchOption("output_file", options, properties, null);
 
+		this.metricsPrefix = fetchOption("metrics_prefix", options, properties, "MaxwellMetrics");
 		this.metricsReportingType = fetchOption("metrics_type", options, properties, null);
 		this.metricsSlf4jInterval = fetchLongOption("metrics_slf4j_interval", options, properties, 60L);
 		this.metricsHTTPPort = Integer.parseInt(fetchOption("metrics_http_port", options, properties, "8080"));

File: src/main/java/com/zendesk/maxwell/producer/MaxwellKafkaProducer.java
Patch:
@@ -141,7 +141,7 @@ public MaxwellKafkaProducerWorker(MaxwellContext context, Properties kafkaProper
 		else
 			keyFormat = KeyFormat.ARRAY;
 
-		this.metricsTimer = MaxwellMetrics.metricRegistry.timer(MetricRegistry.name(MaxwellMetrics.metricsName, "time", "overall"));
+		this.metricsTimer = MaxwellMetrics.metricRegistry.timer(MetricRegistry.name(MaxwellMetrics.getMetricsPrefix(), "time", "overall"));
 		this.queue = queue;
 	}
 

File: src/main/java/com/zendesk/maxwell/replication/AbstractReplicator.java
Patch:
@@ -34,11 +34,11 @@ public abstract class AbstractReplicator extends RunLoopProcess implements Repli
 	protected Long lastHeartbeatRead;
 
 	private final Counter rowCounter = MaxwellMetrics.metricRegistry.counter(
-		MetricRegistry.name(MaxwellMetrics.metricsName, "row", "count")
+		MetricRegistry.name(MaxwellMetrics.getMetricsPrefix(), "row", "count")
 	);
 
 	private final Meter rowMeter = MaxwellMetrics.metricRegistry.meter(
-		MetricRegistry.name(MaxwellMetrics.metricsName, "row", "meter")
+		MetricRegistry.name(MaxwellMetrics.getMetricsPrefix(), "row", "meter")
 	);
 
 	protected Long replicationLag = 0L;

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -69,7 +69,7 @@ public void terminate() {
 	private BinlogPosition attemptMasterRecovery() throws Exception {
 		BinlogPosition recovered = null;
 		MysqlPositionStore positionStore = this.context.getPositionStore();
-		RecoveryInfo recoveryInfo = positionStore.getRecoveryInfo();
+		RecoveryInfo recoveryInfo = positionStore.getRecoveryInfo(config);
 
 		if ( recoveryInfo != null ) {
 			Recovery masterRecovery = new Recovery(

File: src/main/java/com/zendesk/maxwell/MaxwellContext.java
Patch:
@@ -143,7 +143,7 @@ public BinlogPosition getInitialPosition() throws SQLException {
 	}
 
 	public RecoveryInfo getRecoveryInfo() throws SQLException {
-		return this.positionStore.getRecoveryInfo();
+		return this.positionStore.getRecoveryInfo(config);
 	}
 
 	public void setPosition(RowMap r) throws SQLException {

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -69,7 +69,7 @@ public void terminate() {
 	private BinlogPosition attemptMasterRecovery() throws Exception {
 		BinlogPosition recovered = null;
 		MysqlPositionStore positionStore = this.context.getPositionStore();
-		RecoveryInfo recoveryInfo = positionStore.getRecoveryInfo();
+		RecoveryInfo recoveryInfo = positionStore.getRecoveryInfo(config);
 
 		if ( recoveryInfo != null ) {
 			Recovery masterRecovery = new Recovery(

File: src/main/java/com/zendesk/maxwell/MaxwellContext.java
Patch:
@@ -143,7 +143,7 @@ public BinlogPosition getInitialPosition() throws SQLException {
 	}
 
 	public RecoveryInfo getRecoveryInfo() throws SQLException {
-		return this.positionStore.getRecoveryInfo();
+		return this.positionStore.getRecoveryInfo(config);
 	}
 
 	public void setPosition(RowMap r) throws SQLException {

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -150,9 +150,9 @@ protected OptionParser buildOptionParser() {
 		parser.accepts( "schema_database", "database name for maxwell state (schema and binlog position)").withRequiredArg();
 		parser.accepts( "max_schemas", "deprecated.").withOptionalArg();
 		parser.accepts( "init_position", "initial binlog position, given as BINLOG_FILE:POSITION").withRequiredArg();
-		parser.accepts( "replay", "replay mode, don't store any information to the server");
-		parser.accepts( "master_recovery", "(experimental) enable master position recovery code");
-		parser.accepts( "gtid_mode", "(experimental) enable gtid mode");
+		parser.accepts( "replay", "replay mode, don't store any information to the server").withOptionalArg();
+		parser.accepts( "master_recovery", "(experimental) enable master position recovery code").withOptionalArg();
+		parser.accepts( "gtid_mode", "(experimental) enable gtid mode").withOptionalArg();
 
 		parser.accepts( "__separator_7" );
 

File: src/main/java/com/zendesk/maxwell/metrics/MaxwellMetrics.java
Patch:
@@ -46,7 +46,7 @@ public static void setup(String metricsReportingType, Long metricsReportingIntev
 			LOGGER.info("Jmx metrics reporter enabled");
 
 			if (System.getProperty("com.sun.management.jmxremote") == null) {
-				System.out.println("JMX remote is disabled");
+				LOGGER.warn("JMX remote is disabled");
 			} else {
 				String portString = System.getProperty("com.sun.management.jmxremote.port");
 				if (portString != null) {

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -150,9 +150,9 @@ protected OptionParser buildOptionParser() {
 		parser.accepts( "schema_database", "database name for maxwell state (schema and binlog position)").withRequiredArg();
 		parser.accepts( "max_schemas", "deprecated.").withOptionalArg();
 		parser.accepts( "init_position", "initial binlog position, given as BINLOG_FILE:POSITION").withRequiredArg();
-		parser.accepts( "replay", "replay mode, don't store any information to the server");
-		parser.accepts( "master_recovery", "(experimental) enable master position recovery code");
-		parser.accepts( "gtid_mode", "(experimental) enable gtid mode");
+		parser.accepts( "replay", "replay mode, don't store any information to the server").withOptionalArg();
+		parser.accepts( "master_recovery", "(experimental) enable master position recovery code").withOptionalArg();
+		parser.accepts( "gtid_mode", "(experimental) enable gtid mode").withOptionalArg();
 
 		parser.accepts( "__separator_7" );
 

File: src/main/java/com/zendesk/maxwell/MaxwellMetrics.java
Patch:
@@ -11,6 +11,8 @@
 public class MaxwellMetrics {
 	public static final MetricRegistry registry = new MetricRegistry();
 
+	public static final String metricsName = "MaxwellMetrics";
+
 	static final Logger LOGGER = LoggerFactory.getLogger(MaxwellMetrics.class);
 
 	public static void setup(String metricsReportingType, Long metricsReportingInteval) {
@@ -19,7 +21,6 @@ public static void setup(String metricsReportingType, Long metricsReportingIntev
 			return;
 		}
 
-		// TODO: csvreporter? consolereporter? (console feels kinda like a dup of slf4j)
 		if (metricsReportingType.contains("slf4j")) {
 			final Slf4jReporter reporter = Slf4jReporter.forRegistry(registry)
 					.outputTo(LOGGER)

File: src/main/java/com/zendesk/maxwell/producer/MaxwellKafkaProducer.java
Patch:
@@ -103,11 +103,11 @@ class MaxwellKafkaProducerWorker extends AbstractAsyncProducer implements Runnab
 	private final ArrayBlockingQueue<RowMap> queue;
 
 	protected final Counter producedMessageCount = MaxwellMetrics.registry.counter(
-			MetricRegistry.name(MaxwellKafkaProducerWorker.class, "count", "succeeded")
+			MetricRegistry.name(MaxwellMetrics.metricsName, "count", "succeeded")
 	);
 
 	protected final Counter failedMessageCount = MaxwellMetrics.registry.counter(
-			MetricRegistry.name(MaxwellKafkaProducerWorker.class, "count", "failed")
+			MetricRegistry.name(MaxwellMetrics.metricsName, "count", "failed")
 	);
 
 	public MaxwellKafkaProducerWorker(MaxwellContext context, Properties kafkaProperties, String kafkaTopic, ArrayBlockingQueue<RowMap> queue) {
@@ -134,7 +134,7 @@ public MaxwellKafkaProducerWorker(MaxwellContext context, Properties kafkaProper
 		else
 			keyFormat = KeyFormat.ARRAY;
 
-		this.metricsTimer = MaxwellMetrics.registry.timer(MetricRegistry.name(MaxwellKafkaProducer.class, "time", "overall"));
+		this.metricsTimer = MaxwellMetrics.registry.timer(MetricRegistry.name(MaxwellMetrics.metricsName, "time", "overall"));
 		this.queue = queue;
 	}
 

File: src/main/java/com/zendesk/maxwell/replication/BinlogConnectorReplicator.java
Patch:
@@ -1,6 +1,5 @@
 package com.zendesk.maxwell.replication;
 
-import com.codahale.metrics.Gauge;
 import com.github.shyiko.mysql.binlog.BinaryLogClient;
 import com.github.shyiko.mysql.binlog.event.*;
 import com.github.shyiko.mysql.binlog.event.deserialization.EventDeserializer;
@@ -307,7 +306,7 @@ public void setFilter(MaxwellFilter filter) {
 		this.filter = filter;
 	}
 
-	public Gauge<Long> getLagGauge() {
-		return this.lagGauge;
+	public Long getReplicationLag() {
+		return this.replicationLag;
 	}
 }

File: src/main/java/com/zendesk/maxwell/replication/MaxwellReplicator.java
Patch:
@@ -7,7 +7,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.regex.Pattern;
 
-import com.codahale.metrics.Gauge;
 import com.google.code.or.binlog.impl.event.*;
 import com.google.code.or.net.TransportException;
 import com.zendesk.maxwell.*;
@@ -411,7 +410,7 @@ public OpenReplicator getOpenReplicator() {
 		return replicator;
 	}
 
-	public Gauge<Long> getLagGauge() {
-		return this.lagGauge;
+	public Long getReplicationLag() {
+		return this.replicationLag;
 	}
 }

File: src/main/java/com/zendesk/maxwell/replication/Replicator.java
Patch:
@@ -1,7 +1,6 @@
 package com.zendesk.maxwell.replication;
 
 import java.util.concurrent.TimeoutException;
-import com.codahale.metrics.Gauge;
 import com.zendesk.maxwell.MaxwellFilter;
 import com.zendesk.maxwell.row.RowMap;
 import com.zendesk.maxwell.schema.SchemaStoreException;
@@ -16,7 +15,7 @@ public interface Replicator {
 	RowMap getRow() throws Exception;
 	Long getLastHeartbeatRead();
 	Schema getSchema() throws SchemaStoreException;
-	Gauge<Long> getLagGauge();
+	Long getReplicationLag();
 
 	boolean runLoop() throws Exception;
 	void stopLoop() throws TimeoutException;

File: src/test/java/com/zendesk/maxwell/MaxwellTestSupport.java
Patch:
@@ -189,7 +189,7 @@ protected void onReplicatorStart() {
 		BinlogPosition finalPosition = capture(mysql.getConnection());
 		LOGGER.debug("running replicator up to " + finalPosition);
 
-		Long pollTime = 1000L;
+		Long pollTime = 2000L;
 		BinlogPosition lastPositionRead = null;
 
 		for ( ;; ) {

File: src/test/java/com/zendesk/maxwell/recovery/RecoveryTest.java
Patch:
@@ -102,7 +102,7 @@ public void testBasicRecovery() throws Exception {
 			slaveContext.getReplicationConnectionPool(),
 			slaveContext.getCaseSensitivity(),
 			recoveryInfo,
-			MaxwellTestSupport.inGtidMode()
+			System.getenv("SHYKO_MODE") != null
 		);
 
 		BinlogPosition recoveredPosition = recovery.recover();
@@ -144,7 +144,7 @@ public void testOtherClientID() throws Exception {
 			slaveContext.getReplicationConnectionPool(),
 			slaveContext.getCaseSensitivity(),
 			recoveryInfo,
-			MaxwellTestSupport.inGtidMode()
+			System.getenv("SHYKO_MODE") != null
 		);
 
 		BinlogPosition recoveredPosition = recovery.recover();

File: src/main/java/com/zendesk/maxwell/MaxwellContext.java
Patch:
@@ -57,9 +57,9 @@ public MaxwellContext(MaxwellConfig config) throws SQLException {
 			this.initialPosition = this.config.initPosition;
 
 		if ( this.getConfig().replayMode ) {
-			this.positionStore = new ReadOnlyMysqlPositionStore(this.getMaxwellConnectionPool(), this.getServerID(), this.config.clientID);
+			this.positionStore = new ReadOnlyMysqlPositionStore(this.getMaxwellConnectionPool(), this.getServerID(), this.config.clientID, config.gtidMode);
 		} else {
-			this.positionStore = new MysqlPositionStore(this.getMaxwellConnectionPool(), this.getServerID(), this.config.clientID);
+			this.positionStore = new MysqlPositionStore(this.getMaxwellConnectionPool(), this.getServerID(), this.config.clientID, config.gtidMode);
 		}
 	}
 

File: src/main/java/com/zendesk/maxwell/row/HeartbeatRowMap.java
Patch:
@@ -15,7 +15,7 @@ public HeartbeatRowMap(String database, BinlogPosition position) {
 	}
 
 	public static HeartbeatRowMap valueOf(String database, BinlogPosition position, long heartbeatValue) {
-		BinlogPosition p = new BinlogPosition(position.getOffset(), position.getFile(), heartbeatValue);
+		BinlogPosition p = new BinlogPosition(position.getGtidStr(), position.getOffset(), position.getFile(), heartbeatValue);
 		return new HeartbeatRowMap(database, p);
 	}
 

File: src/main/java/com/zendesk/maxwell/row/RowMap.java
Patch:
@@ -231,8 +231,9 @@ public String toJSON(MaxwellOutputConfig outputConfig) throws IOException {
 
 		if ( outputConfig.includesBinlogPosition )
 			g.writeStringField("position",
-				(nextPosition.getGtidStr() != null ? nextPosition.getGtidStr() + ":" : "")
-				+ this.nextPosition.getFile() + ":" + this.nextPosition.getOffset());
+				nextPosition.getGtidStr() != null
+					? nextPosition.getGtidStr()
+					: this.nextPosition.getFile() + ":" + this.nextPosition.getOffset());
 
 		if ( outputConfig.includesServerId && this.serverId != null ) {
 			g.writeNumberField("server_id", this.serverId);

File: src/main/java/com/zendesk/maxwell/schema/ReadOnlyMysqlPositionStore.java
Patch:
@@ -8,8 +8,8 @@
  * useful for "replay" mode.
  */
 public class ReadOnlyMysqlPositionStore extends MysqlPositionStore {
-	public ReadOnlyMysqlPositionStore(ConnectionPool pool, Long serverID, String clientID) {
-		super(pool, serverID, clientID);
+	public ReadOnlyMysqlPositionStore(ConnectionPool pool, Long serverID, String clientID, boolean gtidMode) {
+		super(pool, serverID, clientID, gtidMode);
 	}
 
 	@Override

File: src/test/java/com/zendesk/maxwell/MysqlSavedSchemaTest.java
Patch:
@@ -50,7 +50,7 @@ public void setUp() throws Exception {
 
 		server.executeList(schemaSQL);
 
-		this.binlogPosition = BinlogPosition.capture(server.getConnection());
+		this.binlogPosition = MaxwellTestSupport.capture(server.getConnection());
 		this.context = buildContext(binlogPosition);
 		this.schema = new SchemaCapturer(server.getConnection(), context.getCaseSensitivity()).capture();
 		this.savedSchema = new MysqlSavedSchema(this.context, this.schema, binlogPosition);
@@ -141,6 +141,8 @@ public void testUpgradeSchemaStore() throws Exception {
 		c.createStatement().executeUpdate("alter table `maxwell`.`schemas` drop column deleted, " +
 				"drop column base_schema_id, drop column deltas, drop column version, drop column position_sha");
 		c.createStatement().executeUpdate("alter table maxwell.positions drop column client_id");
+		c.createStatement().executeUpdate("alter table maxwell.positions drop column gtid_set");
+		c.createStatement().executeUpdate("alter table maxwell.schemas drop column gtid_set");
 		SchemaStoreSchema.upgradeSchemaStoreSchema(c); // just verify no-crash.
 	}
 

File: src/main/java/com/zendesk/maxwell/replication/BinlogConnectorReplicator.java
Patch:
@@ -256,6 +256,7 @@ public RowMap getRow() throws Exception {
 					}
 					break;
 				case ROTATE:
+					tableCache.clear();
 					if ( stopOnEOF && event.getPosition().getOffset() > 0 ) {
 						this.binlogEventListener.mustStop.set(true);
 						this.client.disconnect();

File: src/main/java/com/zendesk/maxwell/replication/MaxwellReplicator.java
Patch:
@@ -352,6 +352,7 @@ public RowMap getRow() throws Exception {
 					}
 					break;
 				case MySQLConstants.ROTATE_EVENT:
+					tableCache.clear();
 					if ( stopOnEOF ) {
 						this.replicator.stopQuietly(100, TimeUnit.MILLISECONDS);
 						setReplicatorPosition((AbstractBinlogEventV4) v4Event);

File: src/main/java/com/zendesk/maxwell/replication/BinlogConnectorReplicator.java
Patch:
@@ -256,6 +256,7 @@ public RowMap getRow() throws Exception {
 					}
 					break;
 				case ROTATE:
+					tableCache.clear();
 					if ( stopOnEOF && event.getPosition().getOffset() > 0 ) {
 						this.binlogEventListener.mustStop.set(true);
 						this.client.disconnect();

File: src/main/java/com/zendesk/maxwell/replication/MaxwellReplicator.java
Patch:
@@ -352,6 +352,7 @@ public RowMap getRow() throws Exception {
 					}
 					break;
 				case MySQLConstants.ROTATE_EVENT:
+					tableCache.clear();
 					if ( stopOnEOF ) {
 						this.replicator.stopQuietly(100, TimeUnit.MILLISECONDS);
 						setReplicatorPosition((AbstractBinlogEventV4) v4Event);

File: src/main/java/com/zendesk/maxwell/schema/SchemaStoreSchema.java
Patch:
@@ -110,6 +110,9 @@ public static void upgradeSchemaStoreSchema(Connection c) throws SQLException, I
 			performAlter(c, "alter table `bootstrap` modify column inserted_rows bigint unsigned not null default 0");
 		}
 
+		if ( !getTableColumns("bootstrap", c).containsKey("where_clause") ) {
+			performAlter(c, "alter table `bootstrap` add column where_clause varchar(1024)");
+		}
 
 		HashMap<String, String> schemaColumns = getTableColumns("schemas", c);
 		if ( !schemaColumns.containsKey("charset")) {

File: src/main/java/com/zendesk/maxwell/schema/columndef/ColumnDef.java
Patch:
@@ -78,6 +78,9 @@ public static ColumnDef build(String name, String charset, String type, int pos,
 			return new SetColumnDef(name, type, pos, enumValues);
 		case "bit":
 			return new BitColumnDef(name, type, pos);
+		case "json":
+			return new JsonColumnDef(name, type, pos);
+
 		default:
 			throw new IllegalArgumentException("unsupported column type " + type);
 		}

File: src/main/java/com/zendesk/maxwell/replication/MaxwellReplicator.java
Patch:
@@ -383,8 +383,8 @@ private void processQueryEvent(QueryEvent event) throws Exception {
 
 	private void processRDSHeartbeatInsertEvent(QueryEvent event) throws Exception {
 		processRDSHeartbeatInsertEvent(
-				event.getDatabaseName().toString(),
-				eventBinlogPosition(event)
+			event.getDatabaseName().toString(),
+			eventBinlogPosition(event)
 		);
 	}
 

File: src/main/java/com/zendesk/maxwell/schema/columndef/ColumnDef.java
Patch:
@@ -78,6 +78,9 @@ public static ColumnDef build(String name, String charset, String type, int pos,
 			return new SetColumnDef(name, type, pos, enumValues);
 		case "bit":
 			return new BitColumnDef(name, type, pos);
+		case "json":
+			return new JsonColumnDef(name, type, pos);
+
 		default:
 			throw new IllegalArgumentException("unsupported column type " + type);
 		}

File: src/main/java/com/zendesk/maxwell/replication/BinlogConnectorReplicator.java
Patch:
@@ -56,7 +56,7 @@ public BinlogConnectorReplicator(
 		this.client = new BinaryLogClient(mysqlConfig.host, mysqlConfig.port, mysqlConfig.user, mysqlConfig.password);
 
 		EventDeserializer eventDeserializer = new EventDeserializer();
-		eventDeserializer.setCompatibilityMode(EventDeserializer.CompatibilityMode.DATE_AND_TIME_AS_LONG,
+		eventDeserializer.setCompatibilityMode(EventDeserializer.CompatibilityMode.DATE_AND_TIME_AS_LONG_MICRO,
 			EventDeserializer.CompatibilityMode.CHAR_AND_BINARY_AS_BYTE_ARRAY);
 		this.client.setEventDeserializer(eventDeserializer);
 

File: src/main/java/com/zendesk/maxwell/schema/columndef/ColumnDefWithLength.java
Patch:
@@ -56,14 +56,14 @@ protected static String buildStrFormatForColLength(Long columnLength) {
 		return result.toString();
 	}
 
-	protected static String objectWithPrecisionToString(String value, Timestamp t, Long columnLength) {
+	protected static String appendFractionalSeconds(String value, int nanos, Long columnLength) {
 		if ( columnLength == 0L )
 			return value;
 
 		// 6 is the max precision of datetime2/time6/timestamp2 in MysQL
 		// 3: we go from nano (10^9) to micro (10^6)
 		int divideBy = (int) Math.pow(10, 6 + 3 - columnLength);
-		int fractional = ((int) t.getNanos()) / divideBy;
+		int fractional = nanos / divideBy;
 
 		String strFractional = String.format(buildStrFormatForColLength(columnLength), fractional);
 

File: src/main/java/com/zendesk/maxwell/schema/columndef/TimeColumnDef.java
Patch:
@@ -20,13 +20,13 @@ protected String formatValue(Object value) {
 			Time time = new Time(((Timestamp) value).getTime());
 			String timeAsStr = String.valueOf(time);
 
-			return objectWithPrecisionToString(timeAsStr, (Timestamp) value, this.columnLength);
+			return appendFractionalSeconds(timeAsStr, ((Timestamp) value).getNanos(), this.columnLength);
 
 		} else if ( value instanceof Long ) {
-			Time time = new Time((Long) value);
+			Time time = new Time((Long) value / 1000);
 			String timeAsStr = String.valueOf(time);
 
-			return objectWithPrecisionToString(timeAsStr, new Timestamp((Long) value), this.columnLength);
+			return appendFractionalSeconds(timeAsStr, (int) ((Long) value % 1000000) * 1000, this.columnLength);
 		} else {
 			return String.valueOf((Time) value);
 		}

File: src/test/java/com/zendesk/maxwell/BootstrapIntegrationTest.java
Patch:
@@ -139,6 +139,7 @@ public void testSubsecondTypes() throws Exception {
 			testColumnType("datetime(3)", "'2015-11-07 01:02:03.123456'","2015-11-07 01:02:03.123");
 			testColumnType("datetime(3)", "'2015-11-07 01:02:03.123'","2015-11-07 01:02:03.123");
 			testColumnType("time(3)", "'01:02:03.123456'","01:02:03.123");
+			testColumnType("time(6)", "'01:02:03.123456'","01:02:03.123456");
 			testColumnType("time(3)", "'01:02:03.123'","01:02:03.123");
 		}
 	}

File: src/main/java/com/zendesk/maxwell/replication/AbstractReplicator.java
Patch:
@@ -47,7 +47,7 @@ public AbstractReplicator(String clientID, AbstractBootstrapper bootstrapper, Po
 	 *
 	 * @return either a RowMap or a HeartbeatRowMap
 	 */
-	private RowMap processHeartbeats(RowMap row) throws SQLException {
+	protected RowMap processHeartbeats(RowMap row) throws SQLException {
 		String hbClientID = (String) row.getData("client_id");
 		if ( !Objects.equals(hbClientID, this.clientID) )
 			return row; // plain row -- do not process.

File: src/main/java/com/zendesk/maxwell/schema/Table.java
Patch:
@@ -222,8 +222,9 @@ public void addColumn(ColumnDef definition) {
 	}
 
 	public void removeColumn(int idx) {
-		ColumnDef removed = columns.remove(idx);
-		removePKColumn(removed.getName());
+		ColumnDef toRemove = columns.get(idx);
+		removePKColumn(toRemove.getName());
+		columns.remove(idx);
 	}
 
 	public void changeColumn(int idx, ColumnPosition position, ColumnDef definition) throws InvalidSchemaError {

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLIntegrationTest.java
Patch:
@@ -164,7 +164,8 @@ public void testPKs() throws Exception {
 		   "create TABLE `test_pks_4` ( id int(11) unsigned primary KEY, str varchar(255) )",
 		   "alter TABLE `test_pks_3` drop primary key, add primary key(str)",
 		   "alter TABLE `test_pks_4` drop primary key",
-		   "alter TABLE `test_pks` change id renamed_id int(11) unsigned"
+		   "alter TABLE `test_pks` change id renamed_id int(11) unsigned",
+		   "alter TABLE `test_pks` drop column renamed_id"
 		};
 
 		testIntegration(sql);

File: src/test/java/com/zendesk/maxwell/MaxwellIntegrationTest.java
Patch:
@@ -198,9 +198,9 @@ public void testExcludeColumns() throws Exception {
 		outputConfig.excludeColumns.add(Pattern.compile("id"));
 
 		list = getRowsForSQL(filter, insertSQL, createDBs);
-		json = list.get(1).toJSON();
+		json = list.get(1).toJSON(outputConfig);
 
-		assertFalse(Pattern.compile("\"id\":1").matcher(json).find());
+		assertFalse(Pattern.compile("\"id\":\\d+").matcher(json).find());
 		assertTrue(Pattern.compile("\"account_id\":2").matcher(json).find());
 	}
 

File: src/main/java/com/zendesk/maxwell/MaxwellFilter.java
Patch:
@@ -183,8 +183,7 @@ private boolean matchesAnyRows(AbstractRowsEvent e) {
 	public boolean matches(AbstractRowsEvent e) {
 		String database = e.getTable().getDatabase();
 		String table = e.getTable().getName();
-		return ( database.equals("maxwell") && table.equals("bootstrap") )
-			|| ( matchesDatabase(database) && matchesTable(table) && matchesAnyRows(e) );
+		return matchesDatabase(database) && matchesTable(table) && matchesAnyRows(e);
 	}
 
 	public boolean isDatabaseBlacklisted(String databaseName) {

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -384,6 +384,7 @@ public void validate() {
 					excludeTables,
 					blacklistDatabases,
 					blacklistTables,
+					this.databaseName,
 					excludeColumns
 			);
 		} catch (MaxwellInvalidFilterException e) {

File: src/main/java/com/zendesk/maxwell/producer/partitioners/HashStringColumn.java
Patch:
@@ -1,6 +1,6 @@
 package com.zendesk.maxwell.producer.partitioners;
 
-import com.zendesk.maxwell.RowMap;
+import com.zendesk.maxwell.row.RowMap;
 
 import java.util.List;
 
@@ -11,4 +11,4 @@ public class HashStringColumn implements HashStringProvider {
     public String getHashString(RowMap r, List<String> partitionColumns, String partitionKeyFallback) {
         return r.buildPartitionKey(partitionColumns, partitionKeyFallback);
     }
-}
\ No newline at end of file
+}

File: src/main/java/com/zendesk/maxwell/producer/MaxwellKafkaProducer.java
Patch:
@@ -93,7 +93,9 @@ public MaxwellKafkaProducer(MaxwellContext context, Properties kafkaProperties,
 
 		String hash = context.getConfig().kafkaPartitionHash;
 		String partitionKey = context.getConfig().kafkaPartitionKey;
-		this.partitioner = new MaxwellKafkaPartitioner(hash, partitionKey);
+		String partitionColumns = context.getConfig().kafkaPartitionColumns;
+		String partitionFallback = context.getConfig().kafkaPartitionFallback;
+		this.partitioner = new MaxwellKafkaPartitioner(hash, partitionKey, partitionColumns, partitionFallback);
 
 		if ( context.getConfig().kafkaKeyFormat.equals("hash") )
 			keyFormat = KeyFormat.HASH;

File: src/main/java/com/zendesk/maxwell/producer/partitioners/HashStringDatabase.java
Patch:
@@ -2,11 +2,13 @@
 
 import com.zendesk.maxwell.RowMap;
 
+import java.util.List;
+
 /**
  * Created by kaufmannkr on 1/18/16.
  */
 public class HashStringDatabase implements HashStringProvider{
-	public String getHashString(RowMap r) {
+	public String getHashString(RowMap r, List<String> partitionColumns, String partitionKeyFallback) {
 		return r.getDatabase();
 	}
 }

File: src/main/java/com/zendesk/maxwell/producer/partitioners/HashStringPrimaryKey.java
Patch:
@@ -2,11 +2,13 @@
 
 import com.zendesk.maxwell.RowMap;
 
+import java.util.List;
+
 /**
  * Created by kaufmannkr on 1/18/16.
  */
 public class HashStringPrimaryKey implements HashStringProvider {
-	public String getHashString(RowMap r) {
+	public String getHashString(RowMap r, List<String> partitionColumns, String partitionKeyFallback) {
 		return r.pkAsConcatString();
 	}
 }

File: src/main/java/com/zendesk/maxwell/producer/partitioners/HashStringProvider.java
Patch:
@@ -2,9 +2,11 @@
 
 import com.zendesk.maxwell.RowMap;
 
+import java.util.List;
+
 /**
  * Created by kaufmannkr on 1/21/16.
  */
 public interface HashStringProvider {
-	String getHashString(RowMap r);
+	String getHashString(RowMap r, List<String> partitionColumns, String partitionKeyFallback);
 }

File: src/main/java/com/zendesk/maxwell/producer/partitioners/HashStringTable.java
Patch:
@@ -2,11 +2,13 @@
 
 import com.zendesk.maxwell.RowMap;
 
+import java.util.List;
+
 /**
  * Created by kaufmannkr on 1/18/16.
  */
 public class HashStringTable implements HashStringProvider {
-	public String getHashString(RowMap r) {
+	public String getHashString(RowMap r, List<String> partitionColumns, String partitionKeyFallback) {
 		return r.getTable();
 	}
 }

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -87,6 +87,9 @@ protected OptionParser buildOptionParser() {
 		parser.accepts( "output_file", "output file for 'file' producer" ).withRequiredArg();
 		parser.accepts( "kafka.bootstrap.servers", "at least one kafka server, formatted as HOST:PORT[,HOST:PORT]" ).withRequiredArg();
 		parser.accepts( "kafka_partition_by", "database|table|primary_key|column, kafka producer assigns partition by hashing the specified parameter").withRequiredArg();
+		parser.accepts( "kafka_partition_columns", "comma separated list of columns, the columns that should be used for partitioning when kafka_partition_by=column").withRequiredArg();
+		parser.accepts( "kafka_partition_by_fallback", "database|table|primary_key, kafka_partition_by fallback when the using 'column' partitioning and the columsn are not present in the row").withRequiredArg();
+
 		parser.accepts( "kafka_partition_hash", "default|murmur3, hash function for partitioning").withRequiredArg();
 		parser.accepts( "kafka_topic", "optionally provide a topic name to push to. default: maxwell").withOptionalArg();
 		parser.accepts( "kafka_key_format", "how to format the kafka key; array|hash").withOptionalArg();

File: src/main/java/com/zendesk/maxwell/producer/partitioners/MaxwellKafkaPartitioner.java
Patch:
@@ -18,7 +18,7 @@ public class MaxwellKafkaPartitioner {
 
 	private String partitionKeyFallback;
 
-	public MaxwellKafkaPartitioner(String hashFunction, String partitionKey, String csvColumns, String partitionKeyFallback) {
+	public MaxwellKafkaPartitioner(String hashFunction, String partitionKey, String csvPartitionColumns, String partitionKeyFallback) {
 		int MURMUR_HASH_SEED = 25342;
 		switch (hashFunction) {
 			case "murmur3": this.hashFunc = new HashFunctionMurmur3(MURMUR_HASH_SEED);
@@ -40,8 +40,8 @@ public MaxwellKafkaPartitioner(String hashFunction, String partitionKey, String
 				this.provider = new HashStringDatabase();
 				break;
 		}
-		if ( partitionColumns != null )
-			this.partitionColumns = Arrays.asList(csvColumns.split(","));
+		if ( csvPartitionColumns != null )
+			this.partitionColumns = Arrays.asList(csvPartitionColumns.split("\\s*,\\s*"));
 
 		this.partitionKeyFallback = partitionKeyFallback;
 	}

File: src/main/java/com/zendesk/maxwell/producer/partitioners/HashStringDatabase.java
Patch:
@@ -2,11 +2,13 @@
 
 import com.zendesk.maxwell.RowMap;
 
+import java.util.List;
+
 /**
  * Created by kaufmannkr on 1/18/16.
  */
 public class HashStringDatabase implements HashStringProvider{
-	public String getHashString(RowMap r) {
+	public String getHashString(RowMap r, List<String> partitionColumns, String partitionKeyFallback) {
 		return r.getDatabase();
 	}
 }

File: src/main/java/com/zendesk/maxwell/producer/partitioners/HashStringPrimaryKey.java
Patch:
@@ -2,11 +2,13 @@
 
 import com.zendesk.maxwell.RowMap;
 
+import java.util.List;
+
 /**
  * Created by kaufmannkr on 1/18/16.
  */
 public class HashStringPrimaryKey implements HashStringProvider {
-	public String getHashString(RowMap r) {
+	public String getHashString(RowMap r, List<String> partitionColumns, String partitionKeyFallback) {
 		return r.pkAsConcatString();
 	}
 }

File: src/main/java/com/zendesk/maxwell/producer/partitioners/HashStringProvider.java
Patch:
@@ -2,9 +2,11 @@
 
 import com.zendesk.maxwell.RowMap;
 
+import java.util.List;
+
 /**
  * Created by kaufmannkr on 1/21/16.
  */
 public interface HashStringProvider {
-	String getHashString(RowMap r);
+	String getHashString(RowMap r, List<String> partitionColumns, String partitionKeyFallback);
 }

File: src/main/java/com/zendesk/maxwell/producer/partitioners/HashStringTable.java
Patch:
@@ -2,11 +2,13 @@
 
 import com.zendesk.maxwell.RowMap;
 
+import java.util.List;
+
 /**
  * Created by kaufmannkr on 1/18/16.
  */
 public class HashStringTable implements HashStringProvider {
-	public String getHashString(RowMap r) {
+	public String getHashString(RowMap r, List<String> partitionColumns, String partitionKeyFallback) {
 		return r.getTable();
 	}
 }

File: src/main/java/com/zendesk/maxwell/producer/MaxwellKafkaProducer.java
Patch:
@@ -95,6 +95,9 @@ public MaxwellKafkaProducer(MaxwellContext context, Properties kafkaProperties,
 		String partitionKey = context.getConfig().kafkaPartitionKey;
 		this.partitioner = new MaxwellKafkaPartitioner(hash, partitionKey);
 
+		if ( partitionKey.equals("column") )
+			this.partitioner.setPartitionColumns(context.getConfig().kafkaPartitionColumns);
+
 		if ( context.getConfig().kafkaKeyFormat.equals("hash") )
 			keyFormat = KeyFormat.HASH;
 		else

File: src/main/java/com/zendesk/maxwell/schema/MysqlSavedSchema.java
Patch:
@@ -610,7 +610,7 @@ private void fixColumnLength(Schema recaptured) throws SQLException {
 
 					if ( aColLength != bColLength ) {
 						colLengthDiffs++;
-						LOGGER.info("correcting column length of `" + cA.getName() + "` to `" + cB.getName() + "`.  Will save a full schema snapshot after the new DDL update is processed.");
+						LOGGER.info("correcting column length of `" + cA.getName() + "` to " + bColLength + ".  Will save a full schema snapshot after the new DDL update is processed.");
 						((ColumnDefWithLength) cA).setColumnLength(bColLength);
 					}
 				} else {

File: src/test/java/com/zendesk/maxwell/BootstrapIntegrationTest.java
Patch:
@@ -105,12 +105,12 @@ public void testStringTypes( ) throws Exception {
 		if ( server.getVersion().equals("5.6") ) {
 			testColumnType("timestamp(6)", "'2015-11-07 01:02:03.333444'","2015-11-07 01:02:03.333444");
 			testColumnType("timestamp(6)", "'2015-11-07 01:02:03.123'","2015-11-07 01:02:03.123000");
-			testColumnType("timestamp(6)", "'2015-11-07 01:02:03.0'","2015-11-07 01:02:03");
+			testColumnType("timestamp(6)", "'2015-11-07 01:02:03.0'","2015-11-07 01:02:03.000000");
 
 			testColumnType("timestamp(3)", "'2015-11-07 01:02:03.123456'","2015-11-07 01:02:03.123");
 			testColumnType("timestamp(3)", "'2015-11-07 01:02:03.123'","2015-11-07 01:02:03.123");
 			testColumnType("timestamp(3)", "'2015-11-07 01:02:03.1'","2015-11-07 01:02:03.100");
-			testColumnType("timestamp(3)", "'2015-11-07 01:02:03.0'","2015-11-07 01:02:03");
+			testColumnType("timestamp(3)", "'2015-11-07 01:02:03.0'","2015-11-07 01:02:03.000");
 
 			testColumnType("datetime(6)", "'2015-11-07 01:02:03.123456'","2015-11-07 01:02:03.123456");
 			testColumnType("datetime(6)", "'2015-11-07 01:02:03.123'","2015-11-07 01:02:03.123000");

File: src/main/java/com/zendesk/maxwell/bootstrap/SynchronousBootstrapper.java
Patch:
@@ -53,6 +53,7 @@ public void startBootstrap(RowMap startBootstrapRow, AbstractProducer producer,
 			setBootstrapRowToStarted(startBootstrapRow, connection);
 			ResultSet resultSet = getAllRows(databaseName, tableName, schema, streamingConnection);
 			int insertedRows = 0;
+	                lastInsertedRowsUpdateTimeMillis = 0; // ensure updateInsertedRowsColumn is called at least once
 			while ( resultSet.next() ) {
 				RowMap row = bootstrapEventRowMap("bootstrap-insert", table, position);
 				setRowValues(row, resultSet, table);

File: src/main/java/com/zendesk/maxwell/bootstrap/SynchronousBootstrapper.java
Patch:
@@ -53,6 +53,7 @@ public void startBootstrap(RowMap startBootstrapRow, AbstractProducer producer,
 			setBootstrapRowToStarted(startBootstrapRow, connection);
 			ResultSet resultSet = getAllRows(databaseName, tableName, schema, streamingConnection);
 			int insertedRows = 0;
+	                lastInsertedRowsUpdateTimeMillis = 0; // ensure updateInsertedRowsColumn is called at least once
 			while ( resultSet.next() ) {
 				RowMap row = bootstrapEventRowMap("bootstrap-insert", table, position);
 				setRowValues(row, resultSet, table);

File: src/main/java/com/zendesk/maxwell/schema/ddl/ChangeColumnMod.java
Patch:
@@ -16,8 +16,7 @@ public ChangeColumnMod(String name, ColumnDef d, ColumnPosition position ) {
 	@Override
 	public void apply(Table table) throws InvalidSchemaError {
 		int idx = originalIndex(table);
-		table.removeColumn(idx);
-		table.addColumn(position.index(table, idx), this.definition);
+		table.changeColumn(idx, position, definition);
 	}
 }
 

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLIntegrationTest.java
Patch:
@@ -153,7 +153,8 @@ public void testPKs() throws Exception {
 		   "create TABLE `test_pks_3` ( id int(11) unsigned primary KEY, str varchar(255) )",
 		   "create TABLE `test_pks_4` ( id int(11) unsigned primary KEY, str varchar(255) )",
 		   "alter TABLE `test_pks_3` drop primary key, add primary key(str)",
-		   "alter TABLE `test_pks_4` drop primary key"
+		   "alter TABLE `test_pks_4` drop primary key",
+		   "alter TABLE `test_pks` change id renamed_id int(11) unsigned"
 		};
 
 		testIntegration(sql);

File: src/main/java/com/zendesk/maxwell/schema/ddl/ChangeColumnMod.java
Patch:
@@ -16,8 +16,7 @@ public ChangeColumnMod(String name, ColumnDef d, ColumnPosition position ) {
 	@Override
 	public void apply(Table table) throws InvalidSchemaError {
 		int idx = originalIndex(table);
-		table.removeColumn(idx);
-		table.addColumn(position.index(table, idx), this.definition);
+		table.changeColumn(idx, position, definition);
 	}
 }
 

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLIntegrationTest.java
Patch:
@@ -153,7 +153,8 @@ public void testPKs() throws Exception {
 		   "create TABLE `test_pks_3` ( id int(11) unsigned primary KEY, str varchar(255) )",
 		   "create TABLE `test_pks_4` ( id int(11) unsigned primary KEY, str varchar(255) )",
 		   "alter TABLE `test_pks_3` drop primary key, add primary key(str)",
-		   "alter TABLE `test_pks_4` drop primary key"
+		   "alter TABLE `test_pks_4` drop primary key",
+		   "alter TABLE `test_pks` change id renamed_id int(11) unsigned"
 		};
 
 		testIntegration(sql);

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLIntegrationTest.java
Patch:
@@ -31,6 +31,7 @@ public void testAlter() throws Exception {
 		String sql[] = {
 			"create table shard_1.testAlter ( id int(11) unsigned default 1, str varchar(255) )",
 			"alter table shard_1.testAlter add column barbar tinyint",
+			"alter table shard_1.testAlter add column thiswillbeutf16 text, engine=`innodb` CHARACTER SET utf16",
 			"alter table shard_1.testAlter rename to shard_1.`freedonia`",
 			"rename table shard_1.`freedonia` to shard_1.ducksoup, shard_1.ducksoup to shard_1.`nananana`",
 			"alter table shard_1.nananana drop column barbar",

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -177,6 +177,7 @@ public void testParsingSomeAlters() {
 			"alter table t alter column `foo` SET DEFAULT false",
 			"alter table t alter column `foo` drop default",
 			"alter table t CHARACTER SET latin1 COLLATE = 'utf8'",
+			"ALTER TABLE `test` ENGINE=`InnoDB` CHARACTER SET latin1",
 			"alter table t DROP PRIMARY KEY",
 			"alter table t drop index `foo`",
 			"alter table t disable keys",

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLIntegrationTest.java
Patch:
@@ -31,6 +31,7 @@ public void testAlter() throws Exception {
 		String sql[] = {
 			"create table shard_1.testAlter ( id int(11) unsigned default 1, str varchar(255) )",
 			"alter table shard_1.testAlter add column barbar tinyint",
+			"alter table shard_1.testAlter add column thiswillbeutf16 text, engine=`innodb` CHARACTER SET utf16",
 			"alter table shard_1.testAlter rename to shard_1.`freedonia`",
 			"rename table shard_1.`freedonia` to shard_1.ducksoup, shard_1.ducksoup to shard_1.`nananana`",
 			"alter table shard_1.nananana drop column barbar",
@@ -40,7 +41,7 @@ public void testAlter() throws Exception {
 
 			"create table shard_1.testDrop ( id int(11) )",
 			"drop table shard_1.testDrop",
-			"create table test.c ( v varchar(255) charset ascii )"
+			"create table test.c ( v varchar(255) charset ascii )",
 		};
 		testIntegration(sql);
 	}

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -177,6 +177,7 @@ public void testParsingSomeAlters() {
 			"alter table t alter column `foo` SET DEFAULT false",
 			"alter table t alter column `foo` drop default",
 			"alter table t CHARACTER SET latin1 COLLATE = 'utf8'",
+			"ALTER TABLE `test` ENGINE=`InnoDB` CHARACTER SET latin1",
 			"alter table t DROP PRIMARY KEY",
 			"alter table t drop index `foo`",
 			"alter table t disable keys",

File: src/main/java/com/zendesk/maxwell/MaxwellReplicator.java
Patch:
@@ -414,7 +414,9 @@ private void processQueryEvent(QueryEvent event) throws SchemaStoreException, In
 
 		schemaStore.processSQL(sql, dbName, position);
 		tableCache.clear();
-		this.producer.writePosition(position);
+
+		if ( this.producer != null )
+			this.producer.writePosition(position);
 	}
 
 	public Schema getSchema() throws SchemaStoreException {

File: src/test/java/com/zendesk/maxwell/recovery/RecoveryTest.java
Patch:
@@ -111,7 +111,7 @@ private void drainReplication(BufferedMaxwell maxwell, List<RowMap> rows) throws
 			if ( r == null )
 				break;
 			else {
-				if ( !r.getRowType().equals("heartbeat") )
+				if ( r.toJSON() != null )
 					rows.add(r);
 
 				pollMS = 500; // once we get a row, we timeout quickly.

File: src/test/java/com/zendesk/maxwell/MaxwellTestSupport.java
Patch:
@@ -166,13 +166,13 @@ public void beforeReplicatorStart(MysqlIsolatedServer mysql) throws SQLException
 					if ( r == null )
 						break;
 
-					if ( !r.getRowType().equals("heartbeat"))
+					if ( r.toJSON() != null )
 						list.add(r);
 				}
 
 				break;
 			}
-			if ( !row.getRowType().equals("heartbeat"))
+			if ( row.toJSON() != null )
 				list.add(row);
 		}
 

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -81,7 +81,7 @@ protected OptionParser buildOptionParser() {
 		parser.accepts( "kafka_partition_hash", "default|murmur3, hash function for partitioning").withRequiredArg();
 		parser.accepts( "kafka_topic", "optionally provide a topic name to push to. default: maxwell").withOptionalArg();
 		parser.accepts( "kafka_key_format", "how to format the kafka key; array|hash").withOptionalArg();
-		parser.accepts( "kafka0.9", "switch to kafka 0.9 producer (from 0.8)");
+		parser.accepts( "kafka0.8", "switch to kafka 0.8 producer (from 0.9)");
 
 		parser.accepts( "__separator_4" );
 

File: src/main/java/com/zendesk/maxwell/BufferedMaxwell.java
Patch:
@@ -15,9 +15,9 @@ public BufferedMaxwell(MaxwellConfig config) throws SQLException {
 		config.producerType = "buffer";
 	}
 
-	public RowMap getRow(long timeout, TimeUnit unit) throws IOException, InterruptedException {
+	public RowMap poll(long ms) throws IOException, InterruptedException {
 		BufferedProducer p = (BufferedProducer) this.context.getProducer();
-		return p.poll(timeout, unit);
+		return p.poll(ms, TimeUnit.MILLISECONDS);
 	}
 
 }

File: src/test/java/com/zendesk/maxwell/MaxwellTestSupport.java
Patch:
@@ -143,7 +143,7 @@ public void beforeReplicatorStart(MysqlIsolatedServer mysql) throws SQLException
 		mysql.execute("insert into test.boundary set i = 1");
 
 		// wait for it to come through
-		maxwell.getRow(5, TimeUnit.SECONDS);
+		maxwell.poll(5000);
 
 		callback.afterReplicatorStart(mysql);
 
@@ -153,7 +153,7 @@ public void beforeReplicatorStart(MysqlIsolatedServer mysql) throws SQLException
 		mysql.execute("insert into test.boundary set i = 1");
 
 		for ( int nullChecksLeft = 100 ; nullChecksLeft > 0 ; nullChecksLeft-- ) {
-			RowMap row = maxwell.getRow(10, TimeUnit.MILLISECONDS);
+			RowMap row = maxwell.poll(10);
 			if ( row == null )
 				continue;
 

File: src/test/java/com/zendesk/maxwell/schema/ddl/LowerCaseDDLIntegrationTest.java
Patch:
@@ -17,7 +17,6 @@ public static void setupServers() throws Exception {
 		MaxwellTestSupport.setupSchema(convertServer);
 
 		if ( isFileSystemCaseSensitive() ) {
-			System.out.println("booting case-sensitive server");
 			caseSensitiveServer = MaxwellTestSupport.setupServer("--lower-case-table-names=0");
 			MaxwellTestSupport.setupSchema(caseSensitiveServer);
 		}

File: src/test/java/com/zendesk/maxwell/recovery/RecoveryTest.java
Patch:
@@ -80,6 +80,7 @@ public void testBasicRecovery() throws Exception {
 		generateNewMasterData();
 		RecoveryInfo recoveryInfo = slaveContext.getRecoveryInfo();
 
+		assertThat(recoveryInfo, notNullValue());
 		MaxwellConfig slaveConfig = getConfig(slaveServer.getPort());
 		Recovery recovery = new Recovery(
 			slaveConfig.maxwellMysql,
@@ -143,8 +144,6 @@ public void testRecoveryIntegration() throws Exception {
 		while ( rs.next() ) {
 			if ( rs.getLong("server_id") == 12345 ) {
 				foundSchema = true;
-				long recoveredPosition = rs.getLong("binlog_position");
-				assertThat(Math.abs(recoveredPosition - approximateRecoverPosition.getOffset()), lessThan(2000L));
 				rs.getLong("base_schema_id");
 				assertEquals(false, rs.wasNull());
 			}

File: src/main/java/com/zendesk/maxwell/BufferedMaxwell.java
Patch:
@@ -15,9 +15,9 @@ public BufferedMaxwell(MaxwellConfig config) throws SQLException {
 		config.producerType = "buffer";
 	}
 
-	public RowMap getRow(long timeout, TimeUnit unit) throws IOException, InterruptedException {
+	public RowMap poll(long ms) throws IOException, InterruptedException {
 		BufferedProducer p = (BufferedProducer) this.context.getProducer();
-		return p.poll(timeout, unit);
+		return p.poll(ms, TimeUnit.MILLISECONDS);
 	}
 
 }

File: src/main/java/com/zendesk/maxwell/MaxwellReplicator.java
Patch:
@@ -156,6 +156,8 @@ public void work() throws Exception {
 
 		if ( !bootstrapper.shouldSkip(row) && !isMaxwellRow(row) ) {
 			producer.push(row);
+		} else if ( row.isHeartbeat() ) {
+			producer.writePosition(row.getPosition());
 		} else {
 			bootstrapper.work(row, producer, this);
 		}
@@ -321,6 +323,7 @@ private void processHeartbeats(RowMap row) throws SQLException {
 				Long thisHeartbeat = (Long) heartbeat_at;
 				if ( !thisHeartbeat.equals(lastHeartbeatRead) ) {
 					lastHeartbeatRead = thisHeartbeat;
+					row.markAsHeartbeat(lastHeartbeatRead);
 				}
 			}
 		}

File: src/test/java/com/zendesk/maxwell/MaxwellTestSupport.java
Patch:
@@ -171,8 +171,8 @@ public void beforeReplicatorStart(MysqlIsolatedServer mysql) throws SQLException
 					if ( r == null )
 						break;
 
-					if ( !row.getTable().equals("boundary"))
-						list.add(row);
+					if ( !r.getTable().equals("boundary"))
+						list.add(r);
 				}
 
 				break;

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -32,7 +32,7 @@ private void run(String[] argv) throws Exception {
 		this.context.probeConnections();
 
 		try ( Connection connection = this.context.getReplicationConnection();
-			  Connection rawConnection = this.context.getMaxwellConnectionWithoutDatabase() ) {
+			  Connection rawConnection = this.context.getRawMaxwellConnection() ) {
 			MaxwellMysqlStatus.ensureReplicationMysqlState(connection);
 			MaxwellMysqlStatus.ensureMaxwellMysqlState(rawConnection);
 

File: src/test/java/com/zendesk/maxwell/schema/MysqlPositionStoreTest.java
Patch:
@@ -35,7 +35,7 @@ public void testHeartbeat() throws Exception {
 		ResultSet rs = server.getConnection().createStatement().executeQuery("select * from maxwell.positions");
 		rs.next();
 
-		assertThat(rs.getLong("heartbeat_at") > preHeartbeat, is(true));
+		assertThat(rs.getLong("heartbeat_at") >= preHeartbeat, is(true));
 
 	}
 

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLIntegrationTest.java
Patch:
@@ -39,8 +39,8 @@ public void testAlter() throws Exception {
 			"alter table shard_2.weird_rename rename to lowball", // renames to shard_1.lowball
 
 			"create table shard_1.testDrop ( id int(11) )",
-			"drop table shard_1.testDrop"
-
+			"drop table shard_1.testDrop",
+			"create table test.c ( v varchar(255) charset ascii )"
 		};
 		testIntegration(sql);
 	}

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLIntegrationTest.java
Patch:
@@ -39,8 +39,8 @@ public void testAlter() throws Exception {
 			"alter table shard_2.weird_rename rename to lowball", // renames to shard_1.lowball
 
 			"create table shard_1.testDrop ( id int(11) )",
-			"drop table shard_1.testDrop"
-
+			"drop table shard_1.testDrop",
+			"create table test.c ( v varchar(255) charset ascii )"
 		};
 		testIntegration(sql);
 	}

File: src/main/java/com/zendesk/maxwell/MaxwellReplicator.java
Patch:
@@ -206,7 +206,7 @@ private RowMapBuffer getTransactionRows() throws Exception {
 				continue;
 			}
 
-			setReplicatorPosition((AbstractRowEvent) v4Event);
+			setReplicatorPosition((AbstractBinlogEventV4) v4Event);
 
 			switch(v4Event.getHeader().getEventType()) {
 				case MySQLConstants.WRITE_ROWS_EVENT:

File: src/main/java/com/zendesk/maxwell/MaxwellReplicator.java
Patch:
@@ -206,6 +206,8 @@ private RowMapBuffer getTransactionRows() throws Exception {
 				continue;
 			}
 
+			setReplicatorPosition((AbstractRowEvent) v4Event);
+
 			switch(v4Event.getHeader().getEventType()) {
 				case MySQLConstants.WRITE_ROWS_EVENT:
 				case MySQLConstants.WRITE_ROWS_EVENT_V2:
@@ -225,8 +227,6 @@ private RowMapBuffer getTransactionRows() throws Exception {
 							buffer.add(r);
 					}
 
-					setReplicatorPosition(event);
-
 					break;
 				case MySQLConstants.TABLE_MAP_EVENT:
 					tableCache.processEvent(getSchema(), this.filter, (TableMapEvent) v4Event);

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -200,7 +200,8 @@ public void testParsingSomeAlters() {
 			"create table `shard1.foo` ( `id.foo` int ) collate = `utf8_bin`",
 			"ALTER TABLE .`users` CHANGE COLUMN `password` `password` VARCHAR(60) CHARACTER SET 'utf8' COLLATE 'utf8_bin' NULL DEFAULT NULL COMMENT 'Length 60 for Bcrypt'",
 			"create table `shard1.foo` ( `id.foo` int ) collate = `utf8_bin`",
-			"create table if not exists audit_payer_bank_details (event_time TIMESTAMP default CURRENT_TIMESTAMP())"
+			"create table if not exists audit_payer_bank_details (event_time TIMESTAMP default CURRENT_TIMESTAMP())",
+			"ALTER TABLE foo RENAME INDEX index_quote_request_follow_on_data_on_model_name TO index_quote_request_follow_on_data_on_model_class_name"
 		};
 
 		for ( String s : testSQL ) {

File: src/main/java/com/zendesk/maxwell/schema/columndef/ColumnDef.java
Patch:
@@ -153,6 +153,7 @@ else if ( columnLength < ( 1 << 24) )
 			case "integer":
 				return "int";
 			case "int8":
+			case "serial":
 				return "bigint";
 			case "real":
 			case "numeric":

File: src/main/java/com/zendesk/maxwell/schema/ddl/MysqlParserListener.java
Patch:
@@ -328,6 +328,9 @@ public void exitColumn_definition(mysqlParser.Column_definitionContext ctx) {
 			colType = dctx.signed_type().col_type.getText();
 			signed = isSigned(dctx.signed_type().int_flags());
 			colOptions = dctx.signed_type().column_options();
+
+			if ( colType.toLowerCase().equals("serial") )
+				signed = false;
 		} else if ( dctx.string_type() != null ) {
 			colType = dctx.string_type().col_type.getText();
 			colCharset = getCharset(dctx.string_type().string_column_options());

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -66,7 +66,7 @@ protected OptionParser buildOptionParser() {
 		parser.accepts( "replication_host", "mysql host to replicate from (if using separate schema and replication servers)" ).withRequiredArg();
 		parser.accepts( "replication_user", "username for replication_host" ).withRequiredArg();
 		parser.accepts( "replication_password", "password for replication_host" ).withOptionalArg();
-		parser.accepts( "replication_port", "port for replicattion_host" ).withRequiredArg();
+		parser.accepts( "replication_port", "port for replication_host" ).withRequiredArg();
 
 		parser.accepts( "__separator_3" );
 

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -66,7 +66,7 @@ protected OptionParser buildOptionParser() {
 		parser.accepts( "replication_host", "mysql host to replicate from (if using separate schema and replication servers)" ).withRequiredArg();
 		parser.accepts( "replication_user", "username for replication_host" ).withRequiredArg();
 		parser.accepts( "replication_password", "password for replication_host" ).withOptionalArg();
-		parser.accepts( "replication_port", "port for replicattion_host" ).withRequiredArg();
+		parser.accepts( "replication_port", "port for replication_host" ).withRequiredArg();
 
 		parser.accepts( "__separator_3" );
 

File: src/main/java/com/zendesk/maxwell/schema/columndef/ColumnDef.java
Patch:
@@ -153,6 +153,7 @@ else if ( columnLength < ( 1 << 24) )
 			case "integer":
 				return "int";
 			case "int8":
+			case "serial":
 				return "bigint";
 			case "real":
 			case "numeric":

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -200,7 +200,8 @@ public void testParsingSomeAlters() {
 			"create table `shard1.foo` ( `id.foo` int ) collate = `utf8_bin`",
 			"ALTER TABLE .`users` CHANGE COLUMN `password` `password` VARCHAR(60) CHARACTER SET 'utf8' COLLATE 'utf8_bin' NULL DEFAULT NULL COMMENT 'Length 60 for Bcrypt'",
 			"create table `shard1.foo` ( `id.foo` int ) collate = `utf8_bin`",
-			"create table if not exists audit_payer_bank_details (event_time TIMESTAMP default CURRENT_TIMESTAMP())"
+			"create table if not exists audit_payer_bank_details (event_time TIMESTAMP default CURRENT_TIMESTAMP())",
+			"ALTER TABLE foo RENAME INDEX index_quote_request_follow_on_data_on_model_name TO index_quote_request_follow_on_data_on_model_class_name"
 		};
 
 		for ( String s : testSQL ) {

File: src/main/java/com/zendesk/maxwell/RowMap.java
Patch:
@@ -105,7 +105,7 @@ private String pkToJsonHash() throws IOException {
 				if ( data.containsKey(pk) )
 					pkValue = data.get(pk);
 
-				g.writeObjectField("pk." + pk, pkValue);
+				g.writeObjectField("pk." + pk.toLowerCase(), pkValue);
 			}
 		}
 
@@ -128,7 +128,7 @@ private String pkToJsonArray() throws IOException {
 				pkValue = data.get(pk);
 
 			g.writeStartObject();
-			g.writeObjectField(pk, pkValue);
+			g.writeObjectField(pk.toLowerCase(), pkValue);
 			g.writeEndObject();
 		}
 		g.writeEndArray();

File: src/test/java/com/zendesk/maxwell/BootstrapIntegrationTest.java
Patch:
@@ -99,6 +99,8 @@ public void testStringTypes( ) throws Exception {
 			testColumnType("datetime", "'0000-00-00 00:00:00'","0000-00-00 00:00:00", null);
 		testColumnType("timestamp", "'2015-11-07 01:02:03'","2015-11-07 01:02:03");
 		testColumnType("timestamp", "'0000-00-00 00:00:00'","" + epoch.substring(0, epoch.length() - 2) + "", null);
+		if ( server.getVersion().equals("5.6") )
+			testColumnType("timestamp(3)", "'2015-11-07 01:02:03.123'","2015-11-07 01:02:03");
 		testColumnType("enum('a', 'b')","'a'", "a");
 		testColumnType("bit(8)","b'01010101'", 85);
 		testColumnType("bit(8)","b'1'", 1);

File: src/test/java/com/zendesk/maxwell/RowMapBufferTest.java
Patch:
@@ -10,7 +10,7 @@
 public class RowMapBufferTest {
 	@Test
 	public void TestOverflowToDisk() throws Exception {
-		RowMapBuffer buffer = new RowMapBuffer(2);
+		RowMapBuffer buffer = new RowMapBuffer(2, 250); // allow about 250 bytes of memory to be used
 
 		RowMap r;
 		buffer.add(new RowMap("insert", "foo", "bar", 1L, new ArrayList<String>(), new BinlogPosition(3, "mysql.1")));

File: src/main/java/com/zendesk/maxwell/producer/InflightMessageList.java
Patch:
@@ -27,13 +27,13 @@ public InflightMessageList() {
 		this.linkedMap = new LinkedHashMap<>();
 	}
 
-	public void addMessage(BinlogPosition p) {
+	public synchronized void addMessage(BinlogPosition p) {
 		InflightMessage m = new InflightMessage(p);
 		this.linkedMap.put(p.toString(), m);
 	}
 
 	/* returns the position that stuff is complete up to, or null if there were no changes */
-	public BinlogPosition completeMessage(BinlogPosition p) {
+	public synchronized BinlogPosition completeMessage(BinlogPosition p) {
 		InflightMessage m = this.linkedMap.get(p.toString());
 		assert(m != null);
 

File: src/main/java/com/zendesk/maxwell/producer/MaxwellKafkaProducer.java
Patch:
@@ -45,7 +45,7 @@ public void onCompletion(RecordMetadata md, Exception e) {
 		if ( e != null ) {
 			if ( e instanceof RecordTooLargeException ) {
 				LOGGER.error("RecordTooLargeException @ " + position + " -- " + key);
-				LOGGER.error("Maxwell dropped a row because it was too large (" + e.getLocalizedMessage() + ")");
+				LOGGER.error(e.getLocalizedMessage());
 				LOGGER.error("Considering raising max.request.size broker-side.");
 
 				if ( isTXCommit )

File: src/main/java/com/zendesk/maxwell/producer/InflightMessageList.java
Patch:
@@ -27,13 +27,13 @@ public InflightMessageList() {
 		this.linkedMap = new LinkedHashMap<>();
 	}
 
-	public void addMessage(BinlogPosition p) {
+	public synchronized void addMessage(BinlogPosition p) {
 		InflightMessage m = new InflightMessage(p);
 		this.linkedMap.put(p.toString(), m);
 	}
 
 	/* returns the position that stuff is complete up to, or null if there were no changes */
-	public BinlogPosition completeMessage(BinlogPosition p) {
+	public synchronized BinlogPosition completeMessage(BinlogPosition p) {
 		InflightMessage m = this.linkedMap.get(p.toString());
 		assert(m != null);
 

File: src/main/java/com/zendesk/maxwell/producer/MaxwellKafkaProducer.java
Patch:
@@ -47,7 +47,9 @@ public void onCompletion(RecordMetadata md, Exception e) {
 				LOGGER.error("RecordTooLargeException @ " + position + " -- " + key);
 				LOGGER.error("Maxwell dropped a row because it was too large (" + e.getLocalizedMessage() + ")");
 				LOGGER.error("Considering raising max.request.size broker-side.");
-				inflightMessages.completeMessage(position);
+
+				if ( isTXCommit )
+					inflightMessages.completeMessage(position);
 			} else {
 				throw new RuntimeException(e);
 			}

File: src/main/java/com/zendesk/maxwell/bootstrap/SynchronousBootstrapper.java
Patch:
@@ -86,7 +86,7 @@ private void updateInsertedRowsColumn(int insertedRows, RowMap startBootstrapRow
 	}
 
 	protected Connection getConnection() throws SQLException {
-		Connection conn = context.getReplicationConnectionPool().getConnection();
+		Connection conn = context.getReplicationConnection();
 		conn.setCatalog(context.getConfig().databaseName);
 		return conn;
 	}
@@ -133,7 +133,7 @@ public void completeBootstrap(RowMap completeBootstrapRow, AbstractProducer prod
 
 	@Override
 	public void resume(AbstractProducer producer, MaxwellReplicator replicator) throws Exception {
-		try ( Connection connection = context.getMaxwellConnectionPool().getConnection() ) {
+		try ( Connection connection = context.getMaxwellConnection() ) {
 			// This update resets all rows of incomplete bootstraps to their original state.
 			// These updates are treated as fresh bootstrap requests and trigger a restart
 			// of the bootstrap process from the beginning.

File: src/main/java/com/zendesk/maxwell/schema/ReadOnlyMysqlPositionStore.java
Patch:
@@ -10,8 +10,8 @@
  * a schema position object that doesn't write its position out.
  * useful for "replay" mode.
  */
-public class ReadOnlySchemaPosition extends SchemaPosition {
-	public ReadOnlySchemaPosition(ConnectionPool pool, Long serverID, String dbName) {
+public class ReadOnlyMysqlPositionStore extends MysqlPositionStore {
+	public ReadOnlyMysqlPositionStore(ConnectionPool pool, Long serverID, String dbName) {
 		super(pool, serverID, dbName);
 	}
 

File: src/main/java/com/zendesk/maxwell/schema/SchemaCapturer.java
Patch:
@@ -20,7 +20,7 @@
 
 public class SchemaCapturer {
 	private final Connection connection;
-	static final Logger LOGGER = LoggerFactory.getLogger(SchemaStore.class);
+	static final Logger LOGGER = LoggerFactory.getLogger(MysqlSavedSchema.class);
 
 	public static final HashSet<String> IGNORED_DATABASES = new HashSet<String>(
 		Arrays.asList(new String[] {"performance_schema", "information_schema"})

File: src/main/java/com/zendesk/maxwell/schema/SchemaStoreSchema.java
Patch:
@@ -73,7 +73,7 @@ public static void handleMasterChange(Connection c, Long serverID, String schema
 		while ( rs.next() ) {
 			Long schemaID = rs.getLong("id");
 			LOGGER.info("maxwell detected schema " + schemaID + " from different server_id.  deleting...");
-			SchemaStore.delete(c, schemaID);
+			MysqlSavedSchema.delete(c, schemaID);
 		}
 
 		c.createStatement().execute("delete from `positions` where server_id != " + serverID);
@@ -110,7 +110,7 @@ public static void upgradeSchemaStoreSchema(Connection c, String schemaDatabaseN
 
 		if ( !getMaxwellTables(c).contains("bootstrap") )  {
 			LOGGER.info("adding `" + schemaDatabaseName + "`.`bootstrap` to the schema.");
-			InputStream is = SchemaStore.class.getResourceAsStream("/sql/maxwell_schema_bootstrap.sql");
+			InputStream is = MysqlSavedSchema.class.getResourceAsStream("/sql/maxwell_schema_bootstrap.sql");
 			executeSQLInputStream(c, is, schemaDatabaseName);
 		}
 

File: src/test/java/com/zendesk/maxwell/MaxwellIntegrationTest.java
Patch:
@@ -7,7 +7,6 @@
 import java.util.List;
 import java.util.regex.*;
 
-import com.zendesk.maxwell.schema.SchemaStore;
 import com.zendesk.maxwell.schema.SchemaStoreSchema;
 import org.junit.Test;
 

File: src/test/java/com/zendesk/maxwell/schema/ddl/LowerCaseDDLIntegrationTest.java
Patch:
@@ -4,7 +4,6 @@
 
 import com.zendesk.maxwell.MysqlIsolatedServer;
 import com.zendesk.maxwell.MaxwellTestSupport;
-import com.zendesk.maxwell.schema.SchemaStore;
 
 import org.junit.*;
 

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLResolverTest.java
Patch:
@@ -90,7 +90,7 @@ public void testCreateTableResolveLike() throws Exception {
 		TableCreate c = parse("CREATE TABLE alike_2 like `test`.`test_alike`", "test", TableCreate.class);
 		ResolvedTableCreate rc = c.resolve(getSchema());
 		assertThat(rc.def.getColumnList().size(), is(2));
-		assertThat(rc.def.pkColumnNames.get(0), is("ii"));
+		assertThat(rc.def.getPKList().get(0), is("ii"));
 		assertThat(((StringColumnDef) rc.def.getColumnList().get(1)).charset, is("utf8"));
 	}
 

File: src/test/java/com/zendesk/maxwell/MaxwellTestSupport.java
Patch:
@@ -88,7 +88,6 @@ public static MaxwellContext buildContext(int port, BinlogPosition p) {
 	}
 
 	public static List<RowMap>getRowsForSQL(final MysqlIsolatedServer mysql, MaxwellFilter filter, String queries[], String before[]) throws Exception {
-		BinlogPosition start = BinlogPosition.capture(mysql.getConnection());
 		MaxwellContext context = buildContext(mysql.getPort(), null);
 
 		SchemaCapturer capturer = new SchemaCapturer(mysql.getConnection(), context.getCaseSensitivity());
@@ -97,6 +96,7 @@ public static MaxwellContext buildContext(int port, BinlogPosition p) {
 			mysql.executeList(Arrays.asList(before));
 		}
 
+		BinlogPosition start = BinlogPosition.capture(mysql.getConnection());
 
 		Schema initialSchema = capturer.capture();
 		SchemaStore initialSchemaStore = new SchemaStore(context, initialSchema, BinlogPosition.capture(mysql.getConnection()));

File: src/main/java/com/zendesk/maxwell/RowMap.java
Patch:
@@ -98,7 +98,7 @@ private String pkToJsonHash() throws IOException {
 		} else {
 			for (String pk : pkColumns) {
 				Object pkValue = null;
-				if ( data.containsKey(pk) )
+				if ( data.containsKey(pk.toLowerCase()) )
 					pkValue = data.get(pk);
 
 				g.writeObjectField("pk." + pk, pkValue);
@@ -120,7 +120,7 @@ private String pkToJsonArray() throws IOException {
 		g.writeStartArray();
 		for (String pk : pkColumns) {
 			Object pkValue = null;
-			if ( data.containsKey(pk) )
+			if ( data.containsKey(pk.toLowerCase()) )
 				pkValue = data.get(pk);
 
 			g.writeStartObject();
@@ -140,7 +140,7 @@ public String pkAsConcatString() {
 		String keys="";
 		for (String pk : pkColumns) {
 			Object pkValue = null;
-			if (data.containsKey(pk))
+			if (data.containsKey(pk.toLowerCase()))
 				pkValue = data.get(pk);
 			if (pkValue != null)
 				keys += pkValue.toString();

File: src/test/java/com/zendesk/maxwell/MaxwellTestSupport.java
Patch:
@@ -7,6 +7,7 @@
 import com.zendesk.maxwell.schema.Schema;
 import com.zendesk.maxwell.schema.SchemaCapturer;
 import com.zendesk.maxwell.schema.SchemaStore;
+import com.zendesk.maxwell.schema.SchemaStoreSchema;
 import com.zendesk.maxwell.schema.ddl.ResolvedSchemaChange;
 import com.zendesk.maxwell.schema.ddl.SchemaChange;
 import org.apache.commons.lang.StringUtils;

File: src/main/java/com/zendesk/maxwell/MaxwellMysqlConfig.java
Patch:
@@ -15,7 +15,6 @@ public class MaxwellMysqlConfig {
 	public String user;
 	public String password;
 	public ArrayList<String> jdbcOptions = new ArrayList<String>() {{
-		add("useCursorFetch=true");
 		add("zeroDateTimeBehavior=convertToNull");
 	}};
 
@@ -47,7 +46,7 @@ public void parseOptions(String prefix, OptionSet options) {
 			parseJDBCOptions(opts);
 		}
 	}
-	
+
 	public void parseJDBCOptions(String opts) {
 		if (opts == null) return;
 		for ( String opt : opts.split("&") ) {
@@ -56,7 +55,7 @@ public void parseJDBCOptions(String opts) {
 	}
 
 	public String getConnectionURI() {
-		return "jdbc:mysql://" + host + ":" + port + "?" +				
+		return "jdbc:mysql://" + host + ":" + port + "?" +
 				StringUtils.join(this.jdbcOptions.toArray(), "&");
 	}
 

File: src/test/java/com/zendesk/maxwell/MaxwellIntegrationTest.java
Patch:
@@ -388,9 +388,9 @@ public void testJdbcConnectionOptions() throws Exception {
 		String[] opts = {"--jdbc_options= netTimeoutForStreamingResults=123& profileSQL=true  ", "--host=no-soup-spoons"};
 		MaxwellConfig config = new MaxwellConfig(opts);
 		assertEquals(config.maxwellMysql.getConnectionURI(),
-				"jdbc:mysql://no-soup-spoons:3306?useCursorFetch=true&zeroDateTimeBehavior=convertToNull&netTimeoutForStreamingResults=123&profileSQL=true");
+				"jdbc:mysql://no-soup-spoons:3306?zeroDateTimeBehavior=convertToNull&netTimeoutForStreamingResults=123&profileSQL=true");
 		assertEquals(config.replicationMysql.getConnectionURI(),
-				"jdbc:mysql://no-soup-spoons:3306?useCursorFetch=true&zeroDateTimeBehavior=convertToNull&netTimeoutForStreamingResults=123&profileSQL=true");
+				"jdbc:mysql://no-soup-spoons:3306?zeroDateTimeBehavior=convertToNull&netTimeoutForStreamingResults=123&profileSQL=true");
 
 	}
 

File: src/test/java/com/zendesk/maxwell/MaxwellTestSupport.java
Patch:
@@ -81,8 +81,6 @@ public static MaxwellContext buildContext(int port, BinlogPosition p) {
 
 		config.databaseName = "maxwell";
 
-		config.bootstrapperBatchFetchSize = 64;
-
 		config.initPosition = p;
 
 		return new MaxwellContext(config);

File: src/test/java/com/zendesk/maxwell/MysqlIsolatedServer.java
Patch:
@@ -95,7 +95,7 @@ public void resetConnection() throws SQLException {
 	}
 
 	public Connection getNewConnection() throws SQLException {
-		return DriverManager.getConnection("jdbc:mysql://127.0.0.1:" + port + "/mysql?useCursorFetch=true&zeroDateTimeBehavior=convertToNull", "root", "");
+		return DriverManager.getConnection("jdbc:mysql://127.0.0.1:" + port + "/mysql?zeroDateTimeBehavior=convertToNull", "root", "");
 	}
 
 	public Connection getConnection() {

File: src/main/java/com/zendesk/maxwell/schema/SchemaCapturer.java
Patch:
@@ -110,7 +110,7 @@ private void captureTable(Table t) throws SQLException, InvalidSchemaError {
 			String colType    = r.getString("DATA_TYPE");
 			String colEnc     = r.getString("CHARACTER_SET_NAME");
 			int colPos        = r.getInt("ORDINAL_POSITION") - 1;
-			boolean colSigned = !r.getString("COLUMN_TYPE").matches(" unsigned$");
+			boolean colSigned = !r.getString("COLUMN_TYPE").matches(".* unsigned$");
 
 			if ( r.getString("COLUMN_KEY").equals("PRI") )
 				t.pkIndex = i;

File: src/test/java/com/zendesk/maxwell/SchemaCaptureTest.java
Patch:
@@ -79,6 +79,8 @@ public void testColumns() throws SQLException, InvalidSchemaError {
 
 		assertThat(columns[1], allOf(notNullValue(), instanceOf(IntColumnDef.class)));
 		assertThat(columns[1].getName(), is("account_id"));
+		assertThat(columns[1], instanceOf(IntColumnDef.class));
+		assertThat(((IntColumnDef) columns[1]).isSigned(), is(false));
 	}
 
 	@Test

File: src/main/java/com/zendesk/maxwell/schema/columndef/BitColumnDef.java
Patch:
@@ -17,7 +17,7 @@ public boolean matchesMysqlType(int type) {
 	@Override
 	public Object asJSON(Object value) {
 		byte[] bytes;
-		if(Boolean.class.isAssignableFrom(value.getClass())){
+		if( Boolean.class.isAssignableFrom(value.getClass()) ){
 			bytes = new byte[]{(byte) ((Boolean)value?1:0)};
 		}else {
 			bytes = (byte[]) value;

File: src/main/java/com/zendesk/maxwell/schema/Table.java
Patch:
@@ -87,7 +87,7 @@ public int findColumnIndex(String name) {
 		}
 	}
 
-	private ColumnDef findColumn(String name) {
+	public ColumnDef findColumn(String name) {
 		String lcName = name.toLowerCase();
 
 		for (ColumnDef c : columnList )  {

File: src/test/java/com/zendesk/maxwell/MysqlIsolatedServer.java
Patch:
@@ -82,7 +82,7 @@ public void run() {
 
 		resetConnection();
 		this.connection.createStatement().executeUpdate("GRANT REPLICATION SLAVE on *.* to 'maxwell'@'127.0.0.1' IDENTIFIED BY 'maxwell'");
-		this.connection.createStatement().executeUpdate("GRANT ALL on `maxwell`.* to 'maxwell'@'127.0.0.1'");
+		this.connection.createStatement().executeUpdate("GRANT ALL on *.* to 'maxwell'@'127.0.0.1'");
 		LOGGER.debug("booted at port " + this.port + ", outputting to file " + outputFile);
 	}
 

File: src/main/java/com/zendesk/maxwell/schema/columndef/IntColumnDef.java
Patch:
@@ -86,4 +86,7 @@ public boolean isSigned() {
 		return signed;
 	}
 
+	public void setSigned(boolean signed) {
+		this.signed = signed;
+	}
 }

File: src/main/java/com/zendesk/maxwell/schema/SchemaCapturer.java
Patch:
@@ -128,8 +128,8 @@ private void captureTable(Table t) throws SQLException, InvalidSchemaError {
 	}
 
 	private static final String pkSQL =
-			"SELECT column_name from information_schema.key_column_usage  "
-	      + "WHERE constraint_name = 'PRIMARY' and table_schema = ? and table_name = ? order by ordinal_position";
+			"SELECT column_name, ordinal_position from information_schema.key_column_usage  "
+	      + "WHERE constraint_name = 'PRIMARY' and table_schema = ? and table_name = ?";
 
 	private void captureTablePK(Table t) throws SQLException, InvalidSchemaError {
 		PreparedStatement p = connection.prepareStatement(pkSQL);
@@ -140,7 +140,7 @@ private void captureTablePK(Table t) throws SQLException, InvalidSchemaError {
 
 		ArrayList<String> l = new ArrayList<>();
 		while ( rs.next() ) {
-			l.add(rs.getString("column_name"));
+			l.add(rs.getInt("ordinal_position") - 1, rs.getString("column_name"));
 		}
 		t.setPKList(l);
 	}

File: src/main/java/com/zendesk/maxwell/schema/SchemaStore.java
Patch:
@@ -218,6 +218,7 @@ private void executeColumnInsert(Connection conn, ArrayList<Object> columnData)
 			columnInsert.setObject(i++,  o);
 
 		columnInsert.execute();
+		columnInsert.close();
 		columnData.clear();
 	}
 

File: src/main/java/com/zendesk/maxwell/schema/SchemaCapturer.java
Patch:
@@ -128,8 +128,8 @@ private void captureTable(Table t) throws SQLException, InvalidSchemaError {
 	}
 
 	private static final String pkSQL =
-			"SELECT column_name from information_schema.key_column_usage  "
-	      + "WHERE constraint_name = 'PRIMARY' and table_schema = ? and table_name = ? order by ordinal_position";
+			"SELECT column_name, ordinal_position from information_schema.key_column_usage  "
+	      + "WHERE constraint_name = 'PRIMARY' and table_schema = ? and table_name = ?";
 
 	private void captureTablePK(Table t) throws SQLException, InvalidSchemaError {
 		PreparedStatement p = connection.prepareStatement(pkSQL);
@@ -140,7 +140,7 @@ private void captureTablePK(Table t) throws SQLException, InvalidSchemaError {
 
 		ArrayList<String> l = new ArrayList<>();
 		while ( rs.next() ) {
-			l.add(rs.getString("column_name"));
+			l.add(rs.getInt("ordinal_position") - 1, rs.getString("column_name"));
 		}
 		t.setPKList(l);
 	}

File: src/main/java/com/zendesk/maxwell/schema/SchemaCapturer.java
Patch:
@@ -110,7 +110,7 @@ private void captureTable(Table t) throws SQLException, InvalidSchemaError {
 			String colType    = r.getString("DATA_TYPE");
 			String colEnc     = r.getString("CHARACTER_SET_NAME");
 			int colPos        = r.getInt("ORDINAL_POSITION") - 1;
-			boolean colSigned = !r.getString("COLUMN_TYPE").matches(" unsigned$");
+			boolean colSigned = !r.getString("COLUMN_TYPE").matches(".* unsigned$");
 
 			if ( r.getString("COLUMN_KEY").equals("PRI") )
 				t.pkIndex = i;

File: src/test/java/com/zendesk/maxwell/SchemaCaptureTest.java
Patch:
@@ -79,6 +79,8 @@ public void testColumns() throws SQLException, InvalidSchemaError {
 
 		assertThat(columns[1], allOf(notNullValue(), instanceOf(IntColumnDef.class)));
 		assertThat(columns[1].getName(), is("account_id"));
+		assertThat(columns[1], instanceOf(IntColumnDef.class));
+		assertThat(((IntColumnDef) columns[1]).isSigned(), is(false));
 	}
 
 	@Test

File: src/main/java/com/zendesk/maxwell/schema/SchemaStore.java
Patch:
@@ -328,7 +328,7 @@ private void restoreDerivedSchema(Connection conn, Long schema_id) throws SQLExc
 		for ( Long id : schemaChain ) {
 			List<ResolvedSchemaChange> deltas = parseDeltas((String) schemas.get(id).get("deltas"));
 			for ( ResolvedSchemaChange delta : deltas ) {
-				schema = delta.apply(this.schema);
+				schema = delta.apply(schema);
 			}
 			count++;
 		}

File: src/test/java/com/zendesk/maxwell/MaxwellIntegrationTest.java
Patch:
@@ -389,6 +389,9 @@ public void testJdbcConnectionOptions() throws Exception {
 		MaxwellConfig config = new MaxwellConfig(opts);
 		assertEquals(config.maxwellMysql.getConnectionURI(),
 				"jdbc:mysql://no-soup-spoons:3306?useCursorFetch=true&zeroDateTimeBehavior=convertToNull&netTimeoutForStreamingResults=123&profileSQL=true");
+		assertEquals(config.replicationMysql.getConnectionURI(),
+				"jdbc:mysql://no-soup-spoons:3306?useCursorFetch=true&zeroDateTimeBehavior=convertToNull&netTimeoutForStreamingResults=123&profileSQL=true");
+
 	}
 
 }

File: src/test/java/com/zendesk/maxwell/MaxwellTestSupport.java
Patch:
@@ -94,6 +94,8 @@ public static MaxwellContext buildContext(int port, BinlogPosition p) {
 
 
 		Schema initialSchema = capturer.capture();
+		SchemaStore initialSchemaStore = new SchemaStore(context, initialSchema, BinlogPosition.capture(mysql.getConnection()));
+		initialSchemaStore.save(context.getMaxwellConnection());
 
 		mysql.executeList(Arrays.asList(queries));
 
@@ -122,14 +124,12 @@ protected Connection getConnection() throws SQLException {
 			}
 		};
 
-		TestMaxwellReplicator p = new TestMaxwellReplicator(initialSchema, producer, bootstrapper, context, start, endPosition);
+		TestMaxwellReplicator p = new TestMaxwellReplicator(initialSchemaStore, producer, bootstrapper, context, start, endPosition);
 
 		p.setFilter(filter);
 
 		p.getEvents(producer);
 
-		Schema schema = p.schema;
-
 		bootstrapper.join();
 
 		p.stopLoop();

File: src/test/java/com/zendesk/maxwell/TestMaxwellReplicator.java
Patch:
@@ -5,6 +5,7 @@
 import com.zendesk.maxwell.bootstrap.AsynchronousBootstrapper;
 import com.zendesk.maxwell.producer.AbstractProducer;
 import com.zendesk.maxwell.schema.Schema;
+import com.zendesk.maxwell.schema.SchemaStore;
 
 import java.util.concurrent.TimeUnit;
 
@@ -15,13 +16,13 @@ public class TestMaxwellReplicator extends MaxwellReplicator {
 	private final BinlogPosition stopAt;
 	private boolean shouldStop;
 
-	public TestMaxwellReplicator(Schema currentSchema,
+	public TestMaxwellReplicator(SchemaStore schemaStore,
 								 AbstractProducer producer,
 								 AbstractBootstrapper bootstrapper,
 								 MaxwellContext ctx,
 								 BinlogPosition start,
 								 BinlogPosition stop) throws Exception {
-		super(currentSchema, producer, bootstrapper, ctx, start);
+		super(schemaStore, producer, bootstrapper, ctx, start);
 		LOGGER.debug("TestMaxwellReplicator initialized from " + start + " to " + stop);
 		this.stopAt = stop;
 	}

File: src/main/java/com/zendesk/maxwell/schema/columndef/BigIntColumnDef.java
Patch:
@@ -9,7 +9,6 @@ public class BigIntColumnDef extends ColumnDef {
 
 	protected boolean signed;
 
-	public BigIntColumnDef() { }
 	public BigIntColumnDef(String name, String type, int pos, boolean signed) {
 		super(name, type, pos);
 		this.signed = signed;

File: src/main/java/com/zendesk/maxwell/schema/columndef/BitColumnDef.java
Patch:
@@ -5,7 +5,6 @@
 import java.math.BigInteger;
 
 public class BitColumnDef extends ColumnDef {
-	public BitColumnDef() { }
 	public BitColumnDef(String name, String type, int pos) {
 		super(name, type, pos);
 	}

File: src/main/java/com/zendesk/maxwell/schema/columndef/DateColumnDef.java
Patch:
@@ -6,7 +6,6 @@
 import com.google.code.or.common.util.MySQLConstants;
 
 public class DateColumnDef extends ColumnDef {
-	public DateColumnDef() { }
 	public DateColumnDef(String name, String type, int pos) {
 		super(name, type, pos);
 	}

File: src/main/java/com/zendesk/maxwell/schema/columndef/DateTimeColumnDef.java
Patch:
@@ -7,7 +7,6 @@
 import com.google.code.or.common.util.MySQLConstants;
 
 public class DateTimeColumnDef extends ColumnDef {
-	public DateTimeColumnDef() { }
 	public DateTimeColumnDef(String name, String type, int pos) {
 		super(name, type, pos);
 	}

File: src/main/java/com/zendesk/maxwell/schema/columndef/DecimalColumnDef.java
Patch:
@@ -5,7 +5,6 @@
 import com.google.code.or.common.util.MySQLConstants;
 
 public class DecimalColumnDef extends ColumnDef {
-	public DecimalColumnDef() { }
 	public DecimalColumnDef(String name, String type, int pos) {
 		super(name, type, pos);
 	}

File: src/main/java/com/zendesk/maxwell/schema/columndef/EnumColumnDef.java
Patch:
@@ -3,7 +3,6 @@
 import com.google.code.or.common.util.MySQLConstants;
 
 public class EnumColumnDef extends EnumeratedColumnDef {
-	public EnumColumnDef() { }
 	public EnumColumnDef(String name, String type, int pos, String[] enumValues) {
 		super(name, type, pos, enumValues);
 	}

File: src/main/java/com/zendesk/maxwell/schema/columndef/EnumeratedColumnDef.java
Patch:
@@ -6,7 +6,6 @@ abstract public class EnumeratedColumnDef extends ColumnDef  {
 	@JsonProperty("enum-values")
 	protected String[] enumValues;
 
-	public EnumeratedColumnDef() { }
 	public EnumeratedColumnDef(String name, String type, int pos, String [] enumValues) {
 		super(name, type, pos);
 		this.enumValues = enumValues;

File: src/main/java/com/zendesk/maxwell/schema/columndef/GeometryColumnDef.java
Patch:
@@ -7,7 +7,6 @@
  * Created by ben on 12/30/15.
  */
 public class GeometryColumnDef extends ColumnDef {
-	public GeometryColumnDef() { }
 	public GeometryColumnDef(String name, String type, int pos) {
 		super(name, type, pos);
 	}

File: src/main/java/com/zendesk/maxwell/schema/columndef/IntColumnDef.java
Patch:
@@ -8,7 +8,6 @@ public class IntColumnDef extends ColumnDef {
 
 	protected boolean signed;
 
-	public IntColumnDef() { }
 	public IntColumnDef(String name, String type, int pos, boolean signed) {
 		super(name, type, pos);
 		this.signed = signed;

File: src/main/java/com/zendesk/maxwell/schema/columndef/SetColumnDef.java
Patch:
@@ -8,7 +8,6 @@
 import com.google.code.or.common.util.MySQLConstants;
 
 public class SetColumnDef extends EnumeratedColumnDef {
-	public SetColumnDef() { }
 	public SetColumnDef(String name, String type, int pos, String[] enumValues) {
 		super(name, type, pos, enumValues);
 	}

File: src/main/java/com/zendesk/maxwell/schema/columndef/StringColumnDef.java
Patch:
@@ -15,7 +15,6 @@ public class StringColumnDef extends ColumnDef {
 	public String charset;
 
 	static final Logger LOGGER = LoggerFactory.getLogger(StringColumnDef.class);
-	public StringColumnDef() { }
 	public StringColumnDef(String name, String type, int pos, String charset) {
 		super(name, type, pos);
 		this.charset = charset;

File: src/main/java/com/zendesk/maxwell/schema/columndef/TimeColumnDef.java
Patch:
@@ -5,7 +5,6 @@
 import com.google.code.or.common.util.MySQLConstants;
 
 public class TimeColumnDef extends ColumnDef {
-	public TimeColumnDef() { }
 	public TimeColumnDef(String name, String type, int pos) {
 		super(name, type, pos);
 	}

File: src/main/java/com/zendesk/maxwell/schema/columndef/YearColumnDef.java
Patch:
@@ -6,7 +6,6 @@
 import java.util.Calendar;
 
 public class YearColumnDef extends ColumnDef {
-	public YearColumnDef() { }
 	public YearColumnDef(String name, String type, int pos) {
 		super(name, type, pos);
 	}

File: src/main/java/com/zendesk/maxwell/schema/ddl/TableAlter.java
Patch:
@@ -6,8 +6,8 @@
 import com.zendesk.maxwell.schema.Database;
 import com.zendesk.maxwell.schema.Schema;
 import com.zendesk.maxwell.schema.Table;
-import com.zendesk.maxwell.schema.columndef.ColumnDef;
 import com.zendesk.maxwell.schema.columndef.StringColumnDef;
+import com.zendesk.maxwell.CaseSensitivity;
 
 public class TableAlter extends SchemaChange {
 	public String database;

File: src/main/java/com/zendesk/maxwell/schema/ddl/TableAlter.java
Patch:
@@ -6,8 +6,8 @@
 import com.zendesk.maxwell.schema.Database;
 import com.zendesk.maxwell.schema.Schema;
 import com.zendesk.maxwell.schema.Table;
-import com.zendesk.maxwell.schema.columndef.ColumnDef;
 import com.zendesk.maxwell.schema.columndef.StringColumnDef;
+import com.zendesk.maxwell.CaseSensitivity;
 
 public class TableAlter extends SchemaChange {
 	public String database;

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -13,15 +13,15 @@
 import com.zendesk.maxwell.schema.Schema;
 import com.zendesk.maxwell.schema.SchemaCapturer;
 import com.zendesk.maxwell.schema.SchemaStore;
-import com.zendesk.maxwell.schema.ddl.SchemaSyncError;
+import com.zendesk.maxwell.schema.ddl.InvalidSchemaError;
 
 public class Maxwell {
 	private Schema schema;
 	private MaxwellConfig config;
 	private MaxwellContext context;
 	static final Logger LOGGER = LoggerFactory.getLogger(Maxwell.class);
 
-	private void initFirstRun(Connection connection, Connection schemaConnection) throws SQLException, IOException, SchemaSyncError {
+	private void initFirstRun(Connection connection, Connection schemaConnection) throws SQLException, IOException, InvalidSchemaError {
 		LOGGER.info("Maxwell is capturing initial schema");
 		SchemaCapturer capturer = new SchemaCapturer(connection, this.context.getCaseSensitivity());
 		this.schema = capturer.capture();

File: src/main/java/com/zendesk/maxwell/schema/Database.java
Patch:
@@ -5,7 +5,7 @@
 
 import com.zendesk.maxwell.CaseSensitivity;
 import com.zendesk.maxwell.schema.columndef.ColumnDef;
-import com.zendesk.maxwell.schema.ddl.SchemaSyncError;
+import com.zendesk.maxwell.schema.ddl.InvalidSchemaError;
 
 public class Database {
 	private final String name;
@@ -49,10 +49,10 @@ public Table findTable(String name) {
 		return null;
 	}
 
-	public Table findTableOrThrow(String table) throws SchemaSyncError {
+	public Table findTableOrThrow(String table) throws InvalidSchemaError {
 		Table t = findTable(table);
 		if ( t == null )
-			throw new SchemaSyncError("Couldn't find table '" + table + "'" + " in database '" + this.name);
+			throw new InvalidSchemaError("Couldn't find table '" + table + "'" + " in database '" + this.name);
 
 		return t;
 	}

File: src/main/java/com/zendesk/maxwell/schema/Schema.java
Patch:
@@ -1,7 +1,7 @@
 package com.zendesk.maxwell.schema;
 
 import com.zendesk.maxwell.CaseSensitivity;
-import com.zendesk.maxwell.schema.ddl.SchemaSyncError;
+import com.zendesk.maxwell.schema.ddl.InvalidSchemaError;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -44,10 +44,10 @@ public Database findDatabase(String string) {
 		return null;
 	}
 
-	public Database findDatabaseOrThrow(String name) throws SchemaSyncError {
+	public Database findDatabaseOrThrow(String name) throws InvalidSchemaError {
 		Database d = findDatabase(name);
 		if ( d == null )
-			throw new SchemaSyncError("Couldn't find database '" + name + "'");
+			throw new InvalidSchemaError("Couldn't find database '" + name + "'");
 		return d;
 	}
 

File: src/main/java/com/zendesk/maxwell/schema/ddl/AddColumnMod.java
Patch:
@@ -14,7 +14,7 @@ public AddColumnMod(String name, ColumnDef d, ColumnPosition position) {
 	}
 
 	@Override
-	public void apply(Table table) throws SchemaSyncError {
+	public void apply(Table table) throws InvalidSchemaError {
 		table.addColumn(position.index(table, null), this.definition);
 	}
 }

File: src/main/java/com/zendesk/maxwell/schema/ddl/ChangeColumnMod.java
Patch:
@@ -14,7 +14,7 @@ public ChangeColumnMod(String name, ColumnDef d, ColumnPosition position ) {
 	}
 
 	@Override
-	public void apply(Table table) throws SchemaSyncError {
+	public void apply(Table table) throws InvalidSchemaError {
 		int idx = originalIndex(table);
 		table.removeColumn(idx);
 		table.addColumn(position.index(table, idx), this.definition);

File: src/main/java/com/zendesk/maxwell/schema/ddl/ColumnMod.java
Patch:
@@ -9,14 +9,14 @@ public ColumnMod(String name) {
 		this.name = name;
 	}
 
-	protected int originalIndex(Table table) throws SchemaSyncError {
+	protected int originalIndex(Table table) throws InvalidSchemaError {
 		int originalIndex = table.findColumnIndex(name);
 
 		if ( originalIndex == -1 )
-			throw new SchemaSyncError("Could not find column " + name + " in " + table.getName());
+			throw new InvalidSchemaError("Could not find column " + name + " in " + table.getName());
 
 		return originalIndex;
 	}
 
-	public abstract void apply(Table table) throws SchemaSyncError;
+	public abstract void apply(Table table) throws InvalidSchemaError;
 }

File: src/main/java/com/zendesk/maxwell/schema/ddl/ColumnPosition.java
Patch:
@@ -12,7 +12,7 @@ public ColumnPosition() {
 		this.position = Position.DEFAULT;
 	}
 
-	public int index(Table t, Integer defaultIndex) throws SchemaSyncError {
+	public int index(Table t, Integer defaultIndex) throws InvalidSchemaError {
 		switch(position) {
 		case FIRST:
 			return 0;
@@ -25,7 +25,7 @@ public int index(Table t, Integer defaultIndex) throws SchemaSyncError {
 		case AFTER:
 			int afterIdx = t.findColumnIndex(afterColumn);
 			if ( afterIdx == -1 )
-				throw new SchemaSyncError("Could not find column " + afterColumn + " (needed in AFTER statement)");
+				throw new InvalidSchemaError("Could not find column " + afterColumn + " (needed in AFTER statement)");
 			return afterIdx + 1;
 		}
 		return -1;

File: src/main/java/com/zendesk/maxwell/schema/ddl/DatabaseAlter.java
Patch:
@@ -13,7 +13,7 @@ public DatabaseAlter(String database) {
 	}
 
 	@Override
-	public ResolvedDatabaseAlter resolve(Schema s) throws SchemaSyncError {
+	public ResolvedDatabaseAlter resolve(Schema s) throws InvalidSchemaError {
 		return new ResolvedDatabaseAlter(this.database, this.charset);
 	}
 

File: src/main/java/com/zendesk/maxwell/schema/ddl/DatabaseCreate.java
Patch:
@@ -16,7 +16,7 @@ public DatabaseCreate(String database, boolean ifNotExists, String charset) {
 	}
 
 	@Override
-	public ResolvedDatabaseCreate resolve(Schema schema) throws SchemaSyncError {
+	public ResolvedDatabaseCreate resolve(Schema schema) throws InvalidSchemaError {
 		if ( ifNotExists && schema.hasDatabase(database) )
 			return null;
 

File: src/main/java/com/zendesk/maxwell/schema/ddl/DatabaseDrop.java
Patch:
@@ -15,7 +15,7 @@ public DatabaseDrop(String database, boolean ifExists) {
 	}
 
 	@Override
-	public ResolvedDatabaseDrop resolve(Schema schema) throws SchemaSyncError {
+	public ResolvedDatabaseDrop resolve(Schema schema) throws InvalidSchemaError {
 		if ( ifExists && !schema.hasDatabase(database) )
 			return null;
 

File: src/main/java/com/zendesk/maxwell/schema/ddl/InvalidSchemaError.java
Patch:
@@ -1,6 +1,6 @@
 package com.zendesk.maxwell.schema.ddl;
 
-public class SchemaSyncError extends Exception {
-	public SchemaSyncError (String message) { super(message); }
+public class InvalidSchemaError extends Exception {
+	public InvalidSchemaError (String message) { super(message); }
 	private static final long serialVersionUID = 1L;
 }

File: src/main/java/com/zendesk/maxwell/schema/ddl/RemoveColumnMod.java
Patch:
@@ -8,7 +8,7 @@ public RemoveColumnMod(String name) {
 	}
 
 	@Override
-	public void apply(Table table) throws SchemaSyncError {
+	public void apply(Table table) throws InvalidSchemaError {
 		table.removeColumn(originalIndex(table));
 	}
 }

File: src/main/java/com/zendesk/maxwell/schema/ddl/ResolvedDatabaseAlter.java
Patch:
@@ -14,7 +14,7 @@ public ResolvedDatabaseAlter(String database, String charset) {
 	}
 
 	@Override
-	public Schema apply(Schema originalSchema) throws SchemaSyncError {
+	public Schema apply(Schema originalSchema) throws InvalidSchemaError {
 		if ( charset == null )
 			return originalSchema;
 

File: src/main/java/com/zendesk/maxwell/schema/ddl/ResolvedDatabaseCreate.java
Patch:
@@ -13,11 +13,11 @@ public ResolvedDatabaseCreate(String database, String charset) {
 	}
 
 	@Override
-	public Schema apply(Schema originalSchema) throws SchemaSyncError {
+	public Schema apply(Schema originalSchema) throws InvalidSchemaError {
 		Schema newSchema = originalSchema.copy();
 
 		if ( newSchema.hasDatabase(database) )
-			throw new SchemaSyncError("Unexpectedly asked to create existing database " + database);
+			throw new InvalidSchemaError("Unexpectedly asked to create existing database " + database);
 
 		newSchema.addDatabase(new Database(database, charset));
 		return newSchema;

File: src/main/java/com/zendesk/maxwell/schema/ddl/ResolvedDatabaseDrop.java
Patch:
@@ -11,7 +11,7 @@ public ResolvedDatabaseDrop(String database) {
 	}
 
 	@Override
-	public Schema apply(Schema originalSchema) throws SchemaSyncError {
+	public Schema apply(Schema originalSchema) throws InvalidSchemaError {
 		Schema newSchema = originalSchema.copy();
 
 		Database d = newSchema.findDatabaseOrThrow(database);

File: src/main/java/com/zendesk/maxwell/schema/ddl/ResolvedSchemaChange.java
Patch:
@@ -14,5 +14,5 @@
 })
 
 public abstract class ResolvedSchemaChange {
-	public abstract Schema apply(Schema originalSchema) throws SchemaSyncError;
+	public abstract Schema apply(Schema originalSchema) throws InvalidSchemaError;
 }

File: src/main/java/com/zendesk/maxwell/schema/ddl/ResolvedTableAlter.java
Patch:
@@ -29,7 +29,7 @@ public ResolvedTableAlter(String database, String table, Table oldTable, Table n
 	}
 
 	@Override
-	public Schema apply(Schema originalSchema) throws SchemaSyncError {
+	public Schema apply(Schema originalSchema) throws InvalidSchemaError {
 		Schema newSchema = originalSchema.copy();
 
 		Database oldDatabase = newSchema.findDatabaseOrThrow(this.database);

File: src/main/java/com/zendesk/maxwell/schema/ddl/ResolvedTableCreate.java
Patch:
@@ -14,13 +14,13 @@ public ResolvedTableCreate(Table t) {
 	}
 
 	@Override
-	public Schema apply(Schema originalSchema) throws SchemaSyncError {
+	public Schema apply(Schema originalSchema) throws InvalidSchemaError {
 		Schema newSchema = originalSchema.copy();
 
 		Database d = newSchema.findDatabaseOrThrow(this.table.database);
 
 		if ( d.hasTable(this.table.name) )
-			throw new SchemaSyncError("Unexpectedly asked to create existing table " + this.table.name);
+			throw new InvalidSchemaError("Unexpectedly asked to create existing table " + this.table.name);
 
 		d.addTable(this.table);
 		return newSchema;

File: src/main/java/com/zendesk/maxwell/schema/ddl/ResolvedTableDrop.java
Patch:
@@ -13,7 +13,7 @@ public ResolvedTableDrop(String database, String table) {
 	}
 
 	@Override
-	public Schema apply(Schema originalSchema) throws SchemaSyncError {
+	public Schema apply(Schema originalSchema) throws InvalidSchemaError {
 		Schema newSchema = originalSchema.copy();
 
 		Database d = newSchema.findDatabaseOrThrow(this.database);

File: src/main/java/com/zendesk/maxwell/schema/ddl/SchemaChange.java
Patch:
@@ -17,7 +17,7 @@
 
 public abstract class SchemaChange {
     final static Logger LOGGER = LoggerFactory.getLogger(SchemaChange.class);
-	public abstract ResolvedSchemaChange resolve(Schema schema) throws SchemaSyncError;
+	public abstract ResolvedSchemaChange resolve(Schema schema) throws InvalidSchemaError;
 
 	private static final Set<Pattern> SQL_BLACKLIST = new HashSet<Pattern>();
 

File: src/main/java/com/zendesk/maxwell/schema/ddl/TableAlter.java
Patch:
@@ -31,7 +31,7 @@ public String toString() {
 	}
 
 	@Override
-	public ResolvedTableAlter resolve(Schema schema) throws SchemaSyncError {
+	public ResolvedTableAlter resolve(Schema schema) throws InvalidSchemaError {
 		Database database = schema.findDatabaseOrThrow(this.database);
 		Table oldTable = database.findTableOrThrow(this.table);
 

File: src/main/java/com/zendesk/maxwell/schema/ddl/TableCreate.java
Patch:
@@ -30,7 +30,7 @@ public TableCreate (String database, String table, boolean ifNotExists) {
 	}
 
 	@Override
-	public ResolvedTableCreate resolve(Schema schema) throws SchemaSyncError {
+	public ResolvedTableCreate resolve(Schema schema) throws InvalidSchemaError {
 		Database d = schema.findDatabaseOrThrow(this.database);
 
 		if ( ifNotExists && d.hasTable(table) )
@@ -50,7 +50,7 @@ public ResolvedTableCreate resolve(Schema schema) throws SchemaSyncError {
 		return new ResolvedTableCreate(table);
 	}
 
-	private Table resolveLikeTable(Schema schema) throws SchemaSyncError {
+	private Table resolveLikeTable(Schema schema) throws InvalidSchemaError {
 		Database sourceDB = schema.findDatabaseOrThrow(likeDB);
 		Table sourceTable = sourceDB.findTableOrThrow(likeTable);
 

File: src/test/java/com/zendesk/maxwell/SchemaStoreTest.java
Patch:
@@ -17,7 +17,7 @@
 import com.zendesk.maxwell.schema.SchemaCapturer;
 import com.zendesk.maxwell.schema.SchemaStore;
 import com.zendesk.maxwell.schema.Table;
-import com.zendesk.maxwell.schema.ddl.SchemaSyncError;
+import com.zendesk.maxwell.schema.ddl.InvalidSchemaError;
 
 public class SchemaStoreTest extends AbstractMaxwellTest {
 	private Schema schema;
@@ -42,7 +42,7 @@ public void setUp() throws Exception {
 	}
 
 	@Test
-	public void testSave() throws SQLException, IOException, SchemaSyncError {
+	public void testSave() throws SQLException, IOException, InvalidSchemaError {
 		this.schemaStore.save();
 
 		SchemaStore restoredSchema = SchemaStore.restore(server.getConnection(this.buildContext().getConfig().databaseName), context);

File: src/main/java/com/zendesk/maxwell/MaxwellReplicator.java
Patch:
@@ -316,7 +316,9 @@ private void processQueryEvent(QueryEvent event) throws SchemaSyncError, SQLExce
 
 		for ( SchemaChange change : changes ) {
 			if ( !change.isBlacklisted(this.filter) ) {
-				updatedSchema = change.apply(updatedSchema);
+				SchemaChange resolved = change.resolve(updatedSchema);
+				if ( resolved != null )
+					updatedSchema = resolved.apply(updatedSchema);
 			} else {
 				LOGGER.debug("ignoring blacklisted schema change");
 			}

File: src/test/java/com/zendesk/maxwell/AbstractIntegrationTest.java
Patch:
@@ -71,6 +71,7 @@ protected SQLAndJSON() {
 		}
 	}
 
+	static final String JSON_PATTERN = "^\\s*\\->\\s*\\{.*";
 	protected SQLAndJSON parseJSONTestFile(String fname) throws Exception {
 		SQLAndJSON ret = new SQLAndJSON();
 		File file = new File(fname);
@@ -89,7 +90,7 @@ protected SQLAndJSON parseJSONTestFile(String fname) throws Exception {
 			}
 
 			if ( buffer != null ) {
-				if (line.matches("^\\s+.*$")) { // leading whitespace -- continuation of previous line
+				if (line.matches("^\\s+.*$") && !line.matches(JSON_PATTERN)) { // leading whitespace -- continuation of previous line
 					buffer = buffer + " " + line.trim();
 				} else {
 					if ( bufferIsJSON )	{
@@ -102,7 +103,7 @@ protected SQLAndJSON parseJSONTestFile(String fname) throws Exception {
 			}
 
 			if ( buffer == null ) {
-				if ( line.matches("^\\s*\\->\\s*\\{.*") ) {
+				if ( line.matches(JSON_PATTERN) ) {
 					line = line.replaceAll("^\\s*\\->\\s*", "");
 					bufferIsJSON = true;
 				} else {

File: src/main/java/com/zendesk/maxwell/schema/columndef/BigIntColumnDef.java
Patch:
@@ -8,6 +8,8 @@ public class BigIntColumnDef extends ColumnDef {
 	private final BigInteger longlong_max = BigInteger.ONE.shiftLeft(64);
 
 	protected boolean signed;
+
+	public BigIntColumnDef() { }
 	public BigIntColumnDef(String name, String type, int pos, boolean signed) {
 		super(name, type, pos);
 		this.signed = signed;

File: src/main/java/com/zendesk/maxwell/schema/columndef/BitColumnDef.java
Patch:
@@ -5,6 +5,7 @@
 import java.math.BigInteger;
 
 public class BitColumnDef extends ColumnDef {
+	public BitColumnDef() { }
 	public BitColumnDef(String name, String type, int pos) {
 		super(name, type, pos);
 	}

File: src/main/java/com/zendesk/maxwell/schema/columndef/ColumnDef.java
Patch:
@@ -5,6 +5,7 @@ public abstract class ColumnDef {
 	protected String type;
 	protected int pos;
 
+	public ColumnDef() { }
 	public ColumnDef(String name, String type, int pos) {
 		this.name = name.toLowerCase();
 		this.type = type;

File: src/main/java/com/zendesk/maxwell/schema/columndef/DateColumnDef.java
Patch:
@@ -6,6 +6,7 @@
 import com.google.code.or.common.util.MySQLConstants;
 
 public class DateColumnDef extends ColumnDef {
+	public DateColumnDef() { }
 	public DateColumnDef(String name, String type, int pos) {
 		super(name, type, pos);
 	}

File: src/main/java/com/zendesk/maxwell/schema/columndef/DateTimeColumnDef.java
Patch:
@@ -7,6 +7,7 @@
 import com.google.code.or.common.util.MySQLConstants;
 
 public class DateTimeColumnDef extends ColumnDef {
+	public DateTimeColumnDef() { }
 	public DateTimeColumnDef(String name, String type, int pos) {
 		super(name, type, pos);
 	}

File: src/main/java/com/zendesk/maxwell/schema/columndef/DecimalColumnDef.java
Patch:
@@ -5,6 +5,7 @@
 import com.google.code.or.common.util.MySQLConstants;
 
 public class DecimalColumnDef extends ColumnDef {
+	public DecimalColumnDef() { }
 	public DecimalColumnDef(String name, String type, int pos) {
 		super(name, type, pos);
 	}

File: src/main/java/com/zendesk/maxwell/schema/columndef/EnumColumnDef.java
Patch:
@@ -3,6 +3,7 @@
 import com.google.code.or.common.util.MySQLConstants;
 
 public class EnumColumnDef extends EnumeratedColumnDef {
+	public EnumColumnDef() { }
 	public EnumColumnDef(String name, String type, int pos, String[] enumValues) {
 		super(name, type, pos, enumValues);
 	}

File: src/main/java/com/zendesk/maxwell/schema/columndef/EnumeratedColumnDef.java
Patch:
@@ -3,6 +3,7 @@
 abstract public class EnumeratedColumnDef extends ColumnDef  {
 	protected String[] enumValues;
 
+	public EnumeratedColumnDef() { }
 	public EnumeratedColumnDef(String name, String type, int pos, String [] enumValues) {
 		super(name, type, pos);
 		this.enumValues = enumValues;

File: src/main/java/com/zendesk/maxwell/schema/columndef/FloatColumnDef.java
Patch:
@@ -3,6 +3,7 @@
 import com.google.code.or.common.util.MySQLConstants;
 
 public class FloatColumnDef extends ColumnDef {
+	public FloatColumnDef() { }
 	public FloatColumnDef(String name, String type, int pos) {
 		super(name, type, pos);
 	}

File: src/main/java/com/zendesk/maxwell/schema/columndef/GeometryColumnDef.java
Patch:
@@ -7,6 +7,7 @@
  * Created by ben on 12/30/15.
  */
 public class GeometryColumnDef extends ColumnDef {
+	public GeometryColumnDef() { }
 	public GeometryColumnDef(String name, String type, int pos) {
 		super(name, type, pos);
 	}

File: src/main/java/com/zendesk/maxwell/schema/columndef/IntColumnDef.java
Patch:
@@ -8,6 +8,7 @@ public class IntColumnDef extends ColumnDef {
 
 	protected boolean signed;
 
+	public IntColumnDef() { }
 	public IntColumnDef(String name, String type, int pos, boolean signed) {
 		super(name, type, pos);
 		this.signed = signed;

File: src/main/java/com/zendesk/maxwell/schema/columndef/SetColumnDef.java
Patch:
@@ -8,6 +8,7 @@
 import com.google.code.or.common.util.MySQLConstants;
 
 public class SetColumnDef extends EnumeratedColumnDef {
+	public SetColumnDef() { }
 	public SetColumnDef(String name, String type, int pos, String[] enumValues) {
 		super(name, type, pos, enumValues);
 	}

File: src/main/java/com/zendesk/maxwell/schema/columndef/StringColumnDef.java
Patch:
@@ -15,6 +15,7 @@ public class StringColumnDef extends ColumnDef {
 	protected String charset;
 
 	static final Logger LOGGER = LoggerFactory.getLogger(StringColumnDef.class);
+	public StringColumnDef() { }
 	public StringColumnDef(String name, String type, int pos, String charset) {
 		super(name, type, pos);
 		this.charset = charset;

File: src/main/java/com/zendesk/maxwell/schema/columndef/TimeColumnDef.java
Patch:
@@ -5,6 +5,7 @@
 import com.google.code.or.common.util.MySQLConstants;
 
 public class TimeColumnDef extends ColumnDef {
+	public TimeColumnDef() { }
 	public TimeColumnDef(String name, String type, int pos) {
 		super(name, type, pos);
 	}

File: src/main/java/com/zendesk/maxwell/schema/columndef/YearColumnDef.java
Patch:
@@ -6,6 +6,7 @@
 import java.util.Calendar;
 
 public class YearColumnDef extends ColumnDef {
+	public YearColumnDef() { }
 	public YearColumnDef(String name, String type, int pos) {
 		super(name, type, pos);
 	}

File: src/main/java/com/zendesk/maxwell/schema/ddl/AddColumnMod.java
Patch:
@@ -7,6 +7,9 @@ class AddColumnMod extends ColumnMod {
 	public ColumnDef definition;
 	public ColumnPosition position;
 
+	// for JSON deserailization
+	public AddColumnMod() { }
+
 	public AddColumnMod(String name, ColumnDef d, ColumnPosition position) {
 		super(name);
 		this.definition = d;

File: src/main/java/com/zendesk/maxwell/schema/ddl/ChangeColumnMod.java
Patch:
@@ -7,6 +7,9 @@ class ChangeColumnMod extends ColumnMod {
 	public ColumnDef definition;
 	public ColumnPosition position;
 
+	public ChangeColumnMod() {
+		super();
+	}
 
 	public ChangeColumnMod(String name, ColumnDef d, ColumnPosition position ) {
 		super(name);

File: src/main/java/com/zendesk/maxwell/schema/ddl/ColumnMod.java
Patch:
@@ -5,6 +5,7 @@
 abstract class ColumnMod {
 	public String name;
 
+	public ColumnMod() {}
 	public ColumnMod(String name) {
 		this.name = name;
 	}

File: src/main/java/com/zendesk/maxwell/schema/ddl/DatabaseAlter.java
Patch:
@@ -8,6 +8,7 @@ public class DatabaseAlter extends SchemaChange {
 	public String database;
 	public String charset;
 
+	public DatabaseAlter() {}
 	public DatabaseAlter(String database) {
 		this.database = database;
 	}

File: src/main/java/com/zendesk/maxwell/schema/ddl/DatabaseDrop.java
Patch:
@@ -8,6 +8,7 @@ public class DatabaseDrop extends SchemaChange {
 	public String database;
 	public boolean ifExists;
 
+	public DatabaseDrop() { }
 	public DatabaseDrop(String database, boolean ifExists) {
 		this.database = database;
 		this.ifExists = ifExists;

File: src/main/java/com/zendesk/maxwell/schema/ddl/RemoveColumnMod.java
Patch:
@@ -3,6 +3,7 @@
 import com.zendesk.maxwell.schema.Table;
 
 class RemoveColumnMod extends ColumnMod {
+	public RemoveColumnMod() {}
 	public RemoveColumnMod(String name) {
 		super(name);
 	}

File: src/main/java/com/zendesk/maxwell/schema/ddl/MysqlParserListener.java
Patch:
@@ -114,7 +114,7 @@ public void exitAlter_database(Alter_databaseContext ctx) {
 
 		List<Default_character_setContext> charSet = ctx.alter_database_definition().default_character_set();
 		if ( charSet.size() > 0 ) {
-			alter.charset = unquote_literal(charSet.get(0).getText());
+			alter.charset = unquote_literal(charSet.get(0).charset_name().getText());
 		}
 
 		this.schemaChanges.add(alter);

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLIntegrationTest.java
Patch:
@@ -78,7 +78,7 @@ public void testAlter() throws SQLException, SchemaSyncError, IOException, Inter
 
 	@Test
 	public void testAlterDatabase() throws Exception {
-	String sql[] = {
+		String sql[] = {
 			"create DATABASE test_db default character set='utf8'",
 			"alter schema test_db collate = 'binary'",
 			"alter schema test_db character set = 'latin2'"

File: src/main/java/com/zendesk/maxwell/MaxwellReplicator.java
Patch:
@@ -303,7 +303,7 @@ protected BinlogEventV4 pollV4EventFromQueue() throws InterruptedException {
 
 
 	private void processQueryEvent(QueryEvent event) throws SchemaSyncError, SQLException, IOException {
-		// get encoding of the alter event somehow? or just ignore it.
+		// get charset of the alter event somehow? or just ignore it.
 		String dbName = event.getDatabaseName().toString();
 		String sql = event.getSql().toString();
 

File: src/main/java/com/zendesk/maxwell/schema/SchemaCapturer.java
Patch:
@@ -121,7 +121,7 @@ private void captureTable(Table t) throws SQLException, SchemaSyncError {
 				enumValues = extractEnumValues(expandedType);
 			}
 
-			t.addColumn(ColumnDef.build(t.getName(), colName, colEnc, colType, colPos, colSigned, enumValues));
+			t.addColumn(ColumnDef.build(colName, colEnc, colType, colPos, colSigned, enumValues));
 			i++;
 		}
 		captureTablePK(t);

File: src/main/java/com/zendesk/maxwell/schema/ddl/MysqlParserListener.java
Patch:
@@ -359,8 +359,7 @@ public void exitColumn_definition(mysqlParser.Column_definitionContext ctx) {
 		}
 
 		colType = ColumnDef.unalias_type(colType.toLowerCase(), longStringFlag, columnLength, byteFlagToStringColumn);
-		ColumnDef c = ColumnDef.build(this.tableName,
-					                   name,
+		ColumnDef c = ColumnDef.build(name,
 					                   colCharset,
 					                   colType.toLowerCase(),
 					                   -1,

File: src/main/java/com/zendesk/maxwell/schema/ddl/MysqlParserListener.java
Patch:
@@ -114,7 +114,7 @@ public void exitAlter_database(Alter_databaseContext ctx) {
 
 		List<Default_character_setContext> charSet = ctx.alter_database_definition().default_character_set();
 		if ( charSet.size() > 0 ) {
-			alter.characterSet = unquote_literal(charSet.get(0).getText());
+			alter.characterSet = unquote_literal(charSet.get(0).charset_name().getText());
 		}
 
 		this.schemaChanges.add(alter);

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLIntegrationTest.java
Patch:
@@ -78,7 +78,7 @@ public void testAlter() throws SQLException, SchemaSyncError, IOException, Inter
 
 	@Test
 	public void testAlterDatabase() throws Exception {
-		String sql[] = {
+	String sql[] = {
 			"create DATABASE test_db default character set='utf8'",
 			"alter schema test_db collate = 'binary'",
 			"alter schema test_db character set = 'latin2'"

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -199,6 +199,8 @@ public void testParsingSomeAlters() {
 			"create TABLE shard_1.20151214foo ( r1 REAL, b2 REAL (2,2) )",
 			"create TABLE shard_1.20151214 ( r1 REAL, b2 REAL (2,2) )",
 			"create table `shard1.foo` ( `id.foo` int )",
+			"create table `shard1.foo` ( `id.foo` int ) collate = `utf8_bin`",
+			"ALTER TABLE .`users` CHANGE COLUMN `password` `password` VARCHAR(60) CHARACTER SET 'utf8' COLLATE 'utf8_bin' NULL DEFAULT NULL COMMENT 'Length 60 for Bcrypt'",
 			"create table `shard1.foo` ( `id.foo` int ) collate = `utf8_bin`"
 		};
 

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -199,6 +199,8 @@ public void testParsingSomeAlters() {
 			"create TABLE shard_1.20151214foo ( r1 REAL, b2 REAL (2,2) )",
 			"create TABLE shard_1.20151214 ( r1 REAL, b2 REAL (2,2) )",
 			"create table `shard1.foo` ( `id.foo` int )",
+			"create table `shard1.foo` ( `id.foo` int ) collate = `utf8_bin`",
+			"ALTER TABLE .`users` CHANGE COLUMN `password` `password` VARCHAR(60) CHARACTER SET 'utf8' COLLATE 'utf8_bin' NULL DEFAULT NULL COMMENT 'Length 60 for Bcrypt'",
 			"create table `shard1.foo` ( `id.foo` int ) collate = `utf8_bin`"
 		};
 

File: src/main/java/com/zendesk/maxwell/bootstrap/MaxwellBootstrapUtilityConfig.java
Patch:
@@ -42,7 +42,7 @@ protected OptionParser buildOptionParser() {
 		parser.accepts( "table", "table to bootstrap").withRequiredArg();
 		parser.accepts( "__separator_2", "" );
 		parser.accepts( "abort", "bootstrap_id to abort" ).withRequiredArg();
-		parser.accepts( "monitor", "bootstrap_id to abort" ).withRequiredArg();
+		parser.accepts( "monitor", "bootstrap_id to monitor" ).withRequiredArg();
 		parser.accepts( "__separator_3", "" );
 		parser.accepts( "log_level", "log level, one of DEBUG|INFO|WARN|ERROR. default: WARN" ).withRequiredArg();
 		parser.accepts( "host", "mysql host. default: localhost").withRequiredArg();

File: src/main/java/com/zendesk/maxwell/bootstrap/MaxwellBootstrapUtilityConfig.java
Patch:
@@ -131,9 +131,6 @@ else if ( !options.has("abort") && !options.has("monitor") )
 			usage("please specify a table");
 	}
 
-	private void parseFile(String filename, boolean abortOnMissing) {
-		Properties p = this.readPropertiesFile(filename, abortOnMissing);
-
 	private void parseFile(String filename, boolean abortOnMissing) {
 		Properties p = this.readPropertiesFile(filename, abortOnMissing);
 

File: src/main/java/com/zendesk/maxwell/RowMap.java
Patch:
@@ -120,11 +120,11 @@ private void writeMapToJSON(String jsonMapName, HashMap<String, Object> data, bo
 				continue;
 
 			if ( value instanceof List) { // sets come back from .asJSON as lists, and jackson can't deal with lists natively.
-				List<String> stringList = (List<String>) value;
+				List stringList = (List) value;
 
 				generator.writeArrayFieldStart(key);
-				for ( String s : stringList )  {
-					generator.writeString(s);
+				for ( Object s : stringList )  {
+					generator.writeObject(s);
 				}
 				generator.writeEndArray();
 			} else {

File: src/main/java/com/zendesk/maxwell/RowMapBuffer.java
Patch:
@@ -12,7 +12,7 @@ public RowMapBuffer(long maxInMemoryElements) throws IOException {
 	}
 
 	public RowMap removeFirst() throws IOException, ClassNotFoundException {
-		RowMap r = super.removeFirst();
+		RowMap r = super.removeFirst(RowMap.class);
 		r.setXid(this.xid);
 		return r;
 	}

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -452,7 +452,6 @@ public void testMysqlTestFixedSQL() throws Exception {
 		int i = 1;
 		List<String> lines = Files.readAllLines(Paths.get(getSQLDir() + "/ddl/mysql-test-fixed.sql"), Charset.defaultCharset());
 		for ( String sql: lines ) {
-			System.out.println("Line: " + i++);
 			parse(sql);
 		}
 	}

File: src/main/java/com/zendesk/maxwell/bootstrap/SynchronousBootstrapper.java
Patch:
@@ -51,7 +51,7 @@ public void startBootstrap(RowMap startBootstrapRow, AbstractProducer producer,
 			int insertedRows = 0;
 			while ( resultSet.next() ) {
 				RowMap row = new RowMap(
-						"insert",
+						"bootstrap-insert",
 						databaseName,
 						tableName,
 						System.currentTimeMillis() / 1000,

File: src/main/java/com/zendesk/maxwell/bootstrap/SynchronousBootstrapper.java
Patch:
@@ -51,7 +51,7 @@ public void startBootstrap(RowMap startBootstrapRow, AbstractProducer producer,
 			int insertedRows = 0;
 			while ( resultSet.next() ) {
 				RowMap row = new RowMap(
-						"insert",
+						"bootstrap-insert",
 						databaseName,
 						tableName,
 						System.currentTimeMillis() / 1000,

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -198,7 +198,8 @@ public void testParsingSomeAlters() {
 			"create table t2 (b varchar(10) not null unique) engine=MyISAM",
 			"create TABLE shard_1.20151214foo ( r1 REAL, b2 REAL (2,2) )",
 			"create TABLE shard_1.20151214 ( r1 REAL, b2 REAL (2,2) )",
-			"create table `shard1.foo` ( `id.foo` int )"
+			"create table `shard1.foo` ( `id.foo` int )",
+			"create table `shard1.foo` ( `id.foo` int ) collate = `utf8_bin`"
 		};
 
 		for ( String s : testSQL ) {

File: src/main/java/com/zendesk/maxwell/schema/SchemaStore.java
Patch:
@@ -377,7 +377,6 @@ private void deleteOldSchemas(Long currentSchemaId) throws SQLException {
 		if ( maxSchemas <= 0  )
 			return;
 
-		LOGGER.debug("In deleteOldSchemas Current Catalog:" + connection.getCatalog());
 		Long toDelete = currentSchemaId - maxSchemas; // start with the highest numbered ID to delete, work downwards until we run out
 		while ( toDelete > 0 && schemaExists(toDelete) ) {
 			new SchemaStore(connection, serverID, toDelete, this.schemaDatabaseName).delete();

File: src/main/java/com/zendesk/maxwell/bootstrap/SynchronousBootstrapper.java
Patch:
@@ -54,7 +54,7 @@ public void startBootstrap(RowMap startBootstrapRow, AbstractProducer producer,
 						"insert",
 						databaseName,
 						tableName,
-						System.currentTimeMillis(),
+						System.currentTimeMillis() / 1000,
 						table.getPKList(),
 						position);
 				setRowValues(row, resultSet, table);
@@ -104,7 +104,7 @@ private RowMap bootstrapEventRowMap(String type, Table table, BinlogPosition pos
 				type,
 				table.getDatabase().getName(),
 				table.getName(),
-				System.currentTimeMillis(),
+				System.currentTimeMillis() / 1000,
 				table.getPKList(),
 				position);
 	}

File: src/main/java/com/zendesk/maxwell/bootstrap/SynchronousBootstrapper.java
Patch:
@@ -54,7 +54,7 @@ public void startBootstrap(RowMap startBootstrapRow, AbstractProducer producer,
 						"insert",
 						databaseName,
 						tableName,
-						System.currentTimeMillis(),
+						System.currentTimeMillis() / 1000,
 						table.getPKList(),
 						position);
 				setRowValues(row, resultSet, table);
@@ -104,7 +104,7 @@ private RowMap bootstrapEventRowMap(String type, Table table, BinlogPosition pos
 				type,
 				table.getDatabase().getName(),
 				table.getName(),
-				System.currentTimeMillis(),
+				System.currentTimeMillis() / 1000,
 				table.getPKList(),
 				position);
 	}

File: src/test/java/com/zendesk/maxwell/ColumnDefTest.java
Patch:
@@ -197,7 +197,7 @@ public void TestTimestamp() throws ParseException {
 
 		assertTrue(d.matchesMysqlType(MySQLConstants.TYPE_TIMESTAMP));
 
-		Timestamp t = new Timestamp(307653559000L - TimeZone.getDefault().getRawOffset());
+		Timestamp t = new Timestamp(307653559000L - TimeZone.getDefault().getOffset(307653559000L));
 		assertThat(d.toSQL(t), is("'1979-10-01 19:19:19'"));
 	}
 

File: src/test/java/com/zendesk/maxwell/AbstractIntegrationTest.java
Patch:
@@ -15,9 +15,6 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 
-/**
- * Created by ben on 1/8/16.
- */
 public class AbstractIntegrationTest extends AbstractMaxwellTest {
 	public static final TypeReference<Map<String, Object>> MAP_STRING_OBJECT_REF = new TypeReference<Map<String, Object>>() {};
 

File: src/test/java/com/zendesk/maxwell/BootstrapIntegrationTest.java
Patch:
@@ -97,7 +97,8 @@ public void testStringTypes( ) throws Exception {
 		testColumnType("date", "'2015-11-07'","2015-11-07");
 		testColumnType("date", "'0000-00-00'","0002-11-30", null);
 		testColumnType("datetime", "'2015-11-07 01:02:03'","2015-11-07 01:02:03");
-		testColumnType("datetime", "'0000-00-00 00:00:00'","0000-00-00 00:00:00", null);
+		if ( server.getVersion().equals("5.5") )
+			testColumnType("datetime", "'0000-00-00 00:00:00'","0000-00-00 00:00:00", null);
 		testColumnType("timestamp", "'2015-11-07 01:02:03'","2015-11-07 01:02:03");
 		testColumnType("timestamp", "'0000-00-00 00:00:00'","" + epoch.substring(0, epoch.length() - 2) + "", null);
 		testColumnType("enum('a', 'b')","'a'", "a");

File: src/test/java/com/zendesk/maxwell/BootstrapIntegrationTest.java
Patch:
@@ -53,7 +53,7 @@ public void testMultipleRowBootstrap() throws Exception {
 			"{\"database\":\"maxwell\",\"table\":\"bootstrap\",\"type\":\"update\",\"ts\":0,\"xid\":0,\"data\":{\"id\":0,\"database_name\":\"shard_1\",\"completed_at\":\"\",\"table_name\":\"minimal\",\"started_at\":\"\",\"is_complete\":1},\"old\":{\"completed_at\":null,\"is_complete\":0}}",
 			"{\"database\":\"shard_1\",\"table\":\"minimal\",\"type\":\"bootstrap-complete\",\"ts\":0,\"data\":{}}"
 		};
-		list = getRowsForSQL(null, input, null, false);
+		list = getRowsForSQL(null, input, null);
 		assertThat(list.size(), is(expectedJSON.length));
 		for (int i = 0; i < expectedJSON.length; ++i) {
 			assertThat(i + " : " + filterJsonForTest(list.get(i).toJSON()), is(i + " : " + expectedJSON[i]));

File: src/main/java/com/zendesk/maxwell/bootstrap/AsynchronousBootstrapper.java
Patch:
@@ -138,7 +138,7 @@ private void replaySkippedRows(String databaseName, String tableName, AbstractPr
 	}
 
 	private BinlogPosition getBootstrapStartBinlogPosition(RowMap bootstrapCompleteRow) throws SQLException {
-		try ( Connection connection = context.getConnectionPool().getConnection() ) {
+		try ( Connection connection = context.getMaxwellConnectionPool().getConnection() ) {
 			String sql = "select * from maxwell.bootstrap where id = ?";
 			PreparedStatement preparedStatement = connection.prepareStatement(sql);
 			preparedStatement.setLong(1, ( Long ) bootstrapCompleteRow.getData("id"));

File: src/main/java/com/zendesk/maxwell/bootstrap/SynchronousBootstrapper.java
Patch:
@@ -1,6 +1,5 @@
 package com.zendesk.maxwell.bootstrap;
 
-import com.google.code.or.OpenReplicator;
 import com.zendesk.maxwell.BinlogPosition;
 import com.zendesk.maxwell.MaxwellContext;
 import com.zendesk.maxwell.MaxwellReplicator;
@@ -89,7 +88,7 @@ private void updateInsertedRowsColumn(int insertedRows, RowMap startBootstrapRow
 	}
 
 	protected Connection getConnection( ) throws SQLException {
-		return context.getConnectionPool().getConnection();
+		return context.getReplicationConnectionPool().getConnection();
 	}
 
 	private RowMap bootstrapStartRowMap(Table table, BinlogPosition position) {
@@ -125,7 +124,7 @@ public void completeBootstrap(RowMap completeBootstrapRow, AbstractProducer prod
 
 	@Override
 	public void resume(AbstractProducer producer, MaxwellReplicator replicator) throws Exception {
-		try ( Connection connection = context.getConnectionPool().getConnection() ) {
+		try ( Connection connection = context.getMaxwellConnectionPool().getConnection() ) {
 			// This update resets all rows of incomplete bootstraps to their original state.
 			// These updates are treated as fresh bootstrap requests and trigger a restart
 			// of the bootstrap process from the beginning.

File: src/main/java/com/zendesk/maxwell/bootstrap/NoOpBootstrapper.java
Patch:
@@ -47,4 +47,7 @@ public boolean isRunning( ) {
 		return false;
 	}
 
+	@Override
+	public void work(RowMap row, AbstractProducer producer, MaxwellReplicator replicator) throws Exception {}
+
 }

File: src/main/java/com/zendesk/maxwell/MaxwellMysqlConfig.java
Patch:
@@ -37,7 +37,7 @@ public void parseOptions( String prefix, OptionSet options) {
 			this.port = Integer.valueOf((String) options.valueOf(prefix + "port"));
 	}
 
-	public String getConnectionURI() { return "jdbc:mysql://" + host + ":" + port + "?" + "useCursorFetch=true";}
+	public String getConnectionURI() { return "jdbc:mysql://" + host + ":" + port + "?" + "useCursorFetch=true&zeroDateTimeBehavior=convertToNull";}
 
 	@Override
 	public boolean equals(Object obj) {

File: src/test/java/com/zendesk/maxwell/AbstractMaxwellTest.java
Patch:
@@ -51,6 +51,7 @@ public static String filterJsonForTest(String json) {
 		json = json.replaceAll(",\"binlog_file\":\"[^\"]+\"", "");
 		json = json.replaceAll(",\"commit\":true", "");
 		json = json.replaceAll(",\"inserted_rows\":[0-9]+", "");
+		json = json.replaceAll("0002-11-30 00:00:00", "0000-00-00 00:00:00"); // workaround for discrepancy between MySQL versions
 		return json;
 	}
 

File: src/test/java/com/zendesk/maxwell/MysqlIsolatedServer.java
Patch:
@@ -92,7 +92,7 @@ public void resetConnection() throws SQLException {
 	}
 
 	public Connection getNewConnection() throws SQLException {
-		return DriverManager.getConnection("jdbc:mysql://127.0.0.1:" + port + "/mysql", "root", "");
+		return DriverManager.getConnection("jdbc:mysql://127.0.0.1:" + port + "/mysql?useCursorFetch=true&zeroDateTimeBehavior=convertToNull", "root", "");
 	}
 
 	public Connection getConnection() {

File: src/main/java/com/zendesk/maxwell/bootstrap/SynchronousBootstrapper.java
Patch:
@@ -181,7 +181,7 @@ private void ensureTable(String tableName, Database database) {
 	private ResultSet getAllRows(String databaseName, String tableName, Schema schema, Connection connection) throws SQLException, InterruptedException {
 		Statement statement = createBatchStatement(connection);
 		String pk = schema.findDatabase(databaseName).findTable(tableName).getPKString();
-		if ( pk != null ) {
+		if ( pk != null && !pk.equals("") ) {
 			return statement.executeQuery(String.format("select * from %s.%s order by %s", databaseName, tableName, pk));
 		} else {
 			return statement.executeQuery(String.format("select * from %s.%s", databaseName, tableName));

File: src/main/java/com/zendesk/maxwell/bootstrap/AbstractBootstrapper.java
Patch:
@@ -28,6 +28,8 @@ public abstract class AbstractBootstrapper {
 
 	public abstract void resume(AbstractProducer producer, MaxwellReplicator replicator) throws Exception;
 
+	public abstract boolean isRunning();
+
 	public void work(RowMap row, AbstractProducer producer, MaxwellReplicator replicator) throws Exception {
 	 	if ( isStartBootstrapRow(row) ) {
 			startBootstrap(row, producer, replicator);

File: src/test/java/com/zendesk/maxwell/AbstractMaxwellTest.java
Patch:
@@ -170,10 +170,10 @@ protected Connection getConnection() throws SQLException {
 
 		schema = p.schema;
 
-		p.stopLoop();
-
 		bootstrapper.join();
 
+		p.stopLoop();
+
 		context.terminate();
 
 		return list;

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -116,6 +116,8 @@ private void parse(String [] argv) {
 			this.producerType = (String) options.valueOf("producer");
 		if ( options.has("bootstrapper"))
 			this.bootstrapperType = (String) options.valueOf("bootstrapper");
+		if ( options.has("bootstrapper_fetch_size"))
+			this.bootstrapperBatchFetchSize = Integer.valueOf((String) options.valueOf("bootstrapper_fetch_size"));
 
 		if ( options.has("kafka.bootstrap.servers"))
 			this.kafkaProperties.setProperty("bootstrap.servers", (String) options.valueOf("kafka.bootstrap.servers"));

File: src/main/java/com/zendesk/maxwell/schema/ddl/SchemaChange.java
Patch:
@@ -84,8 +84,8 @@ public static List<SchemaChange> parse(String currentDB, String sql) {
 			try {
 				return parseSQL(currentDB, sql);
 			} catch ( ReparseSQLException e ) {
-				LOGGER.debug("rewrote SQL to " + sql);
 				sql = e.getSQL();
+				LOGGER.debug("rewrote SQL to " + sql);
 				// re-enter loop
 			} catch ( ParseCancellationException e ) {
 				LOGGER.debug("Parse cancelled: " + e);

File: src/main/java/com/zendesk/maxwell/MaxwellMysqlConfig.java
Patch:
@@ -13,9 +13,9 @@ public class MaxwellMysqlConfig {
 	public String mysqlPassword;
 
 	public MaxwellMysqlConfig() {
-		this.mysqlHost = "127.0.0.1";
-		this.mysqlPort = 3306;
-		this.mysqlUser = "maxwell";
+		this.mysqlHost = null;
+		this.mysqlPort = null;
+		this.mysqlUser = null;
 		this.mysqlPassword = null;
 	}
 

File: src/main/java/com/zendesk/maxwell/schema/ddl/MysqlParserListener.java
Patch:
@@ -166,7 +166,7 @@ public void exitAdd_column_parens(mysqlParser.Add_column_parensContext ctx) {
 		while ( this.columnDefs.size() > 0 ) {
 			ColumnDef c = this.columnDefs.removeFirst();
 			// unable to choose a position in this form
-			alterStatement().columnMods.add(new AddColumnMod(c.getName(), c, null));
+			alterStatement().columnMods.add(new AddColumnMod(c.getName(), c, new ColumnPosition()));
 		}
 	}
 	@Override

File: src/main/java/com/zendesk/maxwell/MaxwellConfig.java
Patch:
@@ -219,9 +219,9 @@ private void parseFile(String filename, Boolean abortOnMissing) {
 		this.mysqlPort     = Integer.valueOf(p.getProperty("port", "3306"));
 
 		this.mysqlSchemaHost     = p.getProperty("schema_host", this.mysqlHost);
-		this.mysqlPassword = p.getProperty("schema_password", this.mysqlPassword);
-		this.mysqlUser     = p.getProperty("schema_user", this.mysqlUser);
-		this.mysqlPort     = Integer.valueOf(p.getProperty("schema_port", p.getProperty("port", "3306")));
+		this.mysqlSchemaPassword = p.getProperty("schema_password", this.mysqlPassword);
+		this.mysqlSchemaUser     = p.getProperty("schema_user", this.mysqlUser);
+		this.mysqlSchemaPort     = Integer.valueOf(p.getProperty("schema_port", p.getProperty("port", "3306")));
 
 		this.producerType    = p.getProperty("producer");
 		this.outputFile      = p.getProperty("output_file");

File: src/main/java/com/zendesk/maxwell/schema/ddl/MysqlParserListener.java
Patch:
@@ -193,7 +193,7 @@ public void exitCol_position(mysqlParser.Col_positionContext ctx) {
 			this.columnPosition.position = ColumnPosition.Position.FIRST;
 		} else if ( ctx.AFTER() != null ) {
 			this.columnPosition.position = ColumnPosition.Position.AFTER;
-			this.columnPosition.afterColumn = unquote(ctx.id().getText());
+			this.columnPosition.afterColumn = unquote(ctx.name().getText());
 		}
 	}
 	@Override

File: src/main/java/com/zendesk/maxwell/schema/ddl/SchemaChange.java
Patch:
@@ -30,6 +30,7 @@ public abstract class SchemaChange {
 		SQL_BLACKLIST.add(Pattern.compile("^REVOKE\\s+", Pattern.CASE_INSENSITIVE));
 		SQL_BLACKLIST.add(Pattern.compile("^SAVEPOINT", Pattern.CASE_INSENSITIVE));
 
+		SQL_BLACKLIST.add(Pattern.compile("^CREATE\\s+(AGGREGATE)?\\s+FUNCTION", Pattern.CASE_INSENSITIVE));
 		SQL_BLACKLIST.add(Pattern.compile("^(ALTER|CREATE)\\s+(DEFINER=[^\\s]+\\s+)?(EVENT|FUNCTION|TRIGGER|PROCEDURE)", Pattern.CASE_INSENSITIVE));
 		SQL_BLACKLIST.add(Pattern.compile("^DROP\\s+(EVENT|FUNCTION|TRIGGER|PROCEDURE|VIEW)", Pattern.CASE_INSENSITIVE));
 

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -197,7 +197,9 @@ public void testParsingSomeAlters() {
 			"alter table t add column `foo` int, algorithm copy, lock=exclusive",
 			"create table t (id int) engine=memory",
 			"CREATE TABLE `t1` (id int, UNIQUE `int` (`int`))",
-			"create table t2 (b varchar(10) not null unique) engine=MyISAM"
+			"create table t2 (b varchar(10) not null unique) engine=MyISAM",
+			"create TABLE shard_1.20151214foo ( r1 REAL, b2 REAL (2,2) )",
+			"create TABLE shard_1.20151214 ( r1 REAL, b2 REAL (2,2) )",
 		};
 
 		for ( String s : testSQL ) {

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -197,7 +197,9 @@ public void testParsingSomeAlters() {
 			"alter table t add column `foo` int, algorithm copy, lock=exclusive",
 			"create table t (id int) engine=memory",
 			"CREATE TABLE `t1` (id int, UNIQUE `int` (`int`))",
-			"create table t2 (b varchar(10) not null unique) engine=MyISAM"
+			"create table t2 (b varchar(10) not null unique) engine=MyISAM",
+			"create TABLE shard_1.20151214foo ( r1 REAL, b2 REAL (2,2) )",
+			"create TABLE shard_1.20151214 ( r1 REAL, b2 REAL (2,2) )",
 		};
 
 		for ( String s : testSQL ) {

File: src/main/java/com/zendesk/maxwell/MaxwellReplicator.java
Patch:
@@ -160,11 +160,11 @@ private RowMapBuffer getTransactionRows() throws Exception {
 
 		RowMapBuffer buffer = new RowMapBuffer(MAX_TX_ELEMENTS);
 
-		// currently to satisfy the test interface, the contract is to return null
-		// if the queue is empty.  should probably just replace this with an optional timeout...
-
 		while ( true ) {
 			v4Event = pollV4EventFromQueue();
+
+			// currently to satisfy the test interface, the contract is to return null
+			// if the queue is empty.  should probably just replace this with an optional timeout...
 			if (v4Event == null) {
 				ensureReplicatorThread();
 				continue;

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -49,7 +49,9 @@ private void run(String[] argv) throws Exception {
 			SchemaStore.handleMasterChange(connection, context.getServerID());
 
 			if ( this.context.getInitialPosition() != null ) {
-				LOGGER.info("Maxwell is booting, starting at " + this.context.getInitialPosition());
+				String producerClass = this.context.getProducer().getClass().getSimpleName();
+
+				LOGGER.info("Maxwell is booting (" + producerClass + "), starting at " + this.context.getInitialPosition());
 				SchemaStore store = SchemaStore.restore(connection, this.context.getServerID(), this.context.getInitialPosition());
 				this.schema = store.getSchema();
 			} else {

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -216,6 +216,8 @@ public void testSQLBlacklist() {
 			"CREATE DEFINER=`dba`@`localhost` TRIGGER `pt_osc_zd_shard485_prod_cf_values_del` ... ",
 			"CREATE EVENT foo ",
 			"DROP EVENT foo bar",
+			"ALTER ALGORITHM = UNDEFINED DEFINER='view'@'localhost' SQL SECURITY DEFINER VIEW `fooview` as (SELECT * FROM FOO)"
+				+ "VIEW view_name [(alskdj lk jdlfka j dlkjd lk",
 			"CREATE TEMPORARY TABLE 172898_16841_transmem SELECT t.* FROM map.transmem AS t"
 		};
 

File: src/main/java/com/zendesk/maxwell/schema/ddl/SchemaChange.java
Patch:
@@ -36,6 +36,7 @@ public abstract class SchemaChange {
 		SQL_BLACKLIST.add(Pattern.compile("^SET\\s+PASSWORD", Pattern.CASE_INSENSITIVE));
 		SQL_BLACKLIST.add(Pattern.compile("^(CREATE|DROP|RENAME)\\s+USER", Pattern.CASE_INSENSITIVE));
 
+		SQL_BLACKLIST.add(Pattern.compile("^CREATE\\s+TEMPORARY\\s+TABLE", Pattern.CASE_INSENSITIVE));
 		SQL_BLACKLIST.add(Pattern.compile("^TRUNCATE\\s+", Pattern.CASE_INSENSITIVE));
 		SQL_BLACKLIST.add(Pattern.compile("^OPTIMIZE\\s+", Pattern.CASE_INSENSITIVE));
 	}

File: src/main/java/com/zendesk/maxwell/MaxwellReplicator.java
Patch:
@@ -155,11 +155,11 @@ private RowMapBuffer getTransactionRows() throws Exception {
 
 		RowMapBuffer buffer = new RowMapBuffer(MAX_TX_ELEMENTS);
 
-		// currently to satisfy the test interface, the contract is to return null
-		// if the queue is empty.  should probably just replace this with an optional timeout...
-
 		while ( true ) {
 			v4Event = pollV4EventFromQueue();
+
+			// currently to satisfy the test interface, the contract is to return null
+			// if the queue is empty.  should probably just replace this with an optional timeout...
 			if (v4Event == null) {
 				ensureReplicatorThread();
 				continue;

File: src/main/java/com/zendesk/maxwell/util/ListWithDiskBuffer.java
Patch:
@@ -36,7 +36,7 @@ public void add(T element) throws IOException {
 			}
 
 			if ( elementsInFile == 0 )
-				LOGGER.info("Overflowed in-memory buffer, spilling over into " + file);
+				LOGGER.debug("Overflowed in-memory buffer, spilling over into " + file);
 
 			os.writeObject(this.list.removeFirst());
 			elementsInFile++;

File: src/main/java/com/zendesk/maxwell/util/ListWithDiskBuffer.java
Patch:
@@ -36,7 +36,7 @@ public void add(T element) throws IOException {
 			}
 
 			if ( elementsInFile == 0 )
-				LOGGER.debug("Overflowed in-memory buffer, spilling over into " + file);
+				LOGGER.info("Overflowed in-memory buffer, spilling over into " + file);
 
 			os.writeObject(this.list.removeFirst());
 			elementsInFile++;

File: src/test/java/com/zendesk/maxwell/ColumnDefTest.java
Patch:
@@ -178,11 +178,12 @@ public void TestDate() {
 		assertThat(d.toSQL(date), is("'1979-11-01'"));
 	}
 
+	@Test
 	public void TestDateTime() throws ParseException {
 		ColumnDef d = build("datetime", true);
 		assertThat(d, instanceOf(DateTimeColumnDef.class));
 
-		assertTrue(d.matchesMysqlType(MySQLConstants.TYPE_DATE));
+		assertTrue(d.matchesMysqlType(MySQLConstants.TYPE_DATETIME));
 
 		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
 		simpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));

File: src/test/java/com/zendesk/maxwell/ColumnDefTest.java
Patch:
@@ -178,11 +178,12 @@ public void TestDate() {
 		assertThat(d.toSQL(date), is("'1979-11-01'"));
 	}
 
+	@Test
 	public void TestDateTime() throws ParseException {
 		ColumnDef d = build("datetime", true);
 		assertThat(d, instanceOf(DateTimeColumnDef.class));
 
-		assertTrue(d.matchesMysqlType(MySQLConstants.TYPE_DATE));
+		assertTrue(d.matchesMysqlType(MySQLConstants.TYPE_DATETIME));
 
 		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
 		simpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));

File: src/main/java/com/zendesk/maxwell/schema/columndef/DateColumnDef.java
Patch:
@@ -34,7 +34,7 @@ private String formatDate(Object value) {
 
 	@Override
 	public String toSQL(Object value) {
-		return "''" + formatDate(value) + "''";
+		return "'" + formatDate(value) + "'";
 	}
 
 	@Override

File: src/main/java/com/zendesk/maxwell/schema/columndef/DateColumnDef.java
Patch:
@@ -34,7 +34,7 @@ private String formatDate(Object value) {
 
 	@Override
 	public String toSQL(Object value) {
-		return "''" + formatDate(value) + "''";
+		return "'" + formatDate(value) + "'";
 	}
 
 	@Override

File: src/main/java/com/zendesk/maxwell/schema/ddl/MysqlParserListener.java
Patch:
@@ -185,8 +185,9 @@ public void exitDefault_character_set(mysqlParser.Default_character_setContext c
 	public void exitCreate_table_preamble(Create_table_preambleContext ctx) {
 		String dbName = getDB(ctx.table_name());
 		String tblName = getTable(ctx.table_name());
+		boolean ifNotExists = ctx.if_not_exists() != null;
 
-		TableCreate createStatement = new TableCreate(dbName, tblName);
+		TableCreate createStatement = new TableCreate(dbName, tblName, ifNotExists);
 		this.tableName = createStatement.tableName;
 
 		this.schemaChanges.add(createStatement);

File: src/main/java/com/zendesk/maxwell/schema/ddl/TableCreate.java
Patch:
@@ -50,7 +50,7 @@ private void applyCreateLike(Schema newSchema, Database d) throws SchemaSyncErro
 
 		Table sourceTable = sourceDB.findTable(likeTable);
 		if ( sourceTable == null )
-			throw new SchemaSyncError("Couldn't find table " + likeDB + "." + sourceTable);
+			throw new SchemaSyncError("Couldn't find table " + likeDB + "." + likeTable);
 
 		Table t = sourceTable.copy();
 		t.rename(this.tableName);

File: src/main/java/com/zendesk/maxwell/schema/ddl/TableCreate.java
Patch:
@@ -50,7 +50,7 @@ private void applyCreateLike(Schema newSchema, Database d) throws SchemaSyncErro
 
 		Table sourceTable = sourceDB.findTable(likeTable);
 		if ( sourceTable == null )
-			throw new SchemaSyncError("Couldn't find table " + likeDB + "." + sourceTable);
+			throw new SchemaSyncError("Couldn't find table " + likeDB + "." + likeTable);
 
 		Table t = sourceTable.copy();
 		t.rename(this.tableName);

File: src/main/java/com/zendesk/maxwell/MaxwellAbstractRowsEvent.java
Patch:
@@ -279,18 +279,18 @@ public List<RowMap> jsonMaps() {
 		return list;
 	}
 
-	static final JsonFactory factory = new JsonFactory();
+	private static final JsonFactory jsonFactory = new JsonFactory();
 
 	private JsonGenerator createJSONGenerator(ByteArrayOutputStream b) {
 		try {
-			return factory.createGenerator(b);
+			return jsonFactory.createGenerator(b);
 		} catch (IOException e) {
 			LOGGER.error("Caught exception while creating JSON generator: " + e);
 		}
 		return null;
 	}
 
-	static String[] keyOrder = {"database", "table", "type", "ts"};
+	private final static String[] keyOrder = {"database", "table", "type", "ts"};
 
 	private void rowMapToJSON(JsonGenerator g, RowMap map) throws IOException {
 		g.writeStartObject(); // {

File: src/main/java/com/zendesk/maxwell/schema/columndef/ColumnDef.java
Patch:
@@ -79,6 +79,8 @@ public static ColumnDef build(String tableName, String name, String encoding, St
 			return new EnumColumnDef(tableName, name, type, pos, enumValues);
 		case "set":
 			return new SetColumnDef(tableName, name, type, pos, enumValues);
+		case "bit":
+			return new BitColumnDef(tableName, name, type, pos);
 		default:
 			throw new IllegalArgumentException("unsupported column type " + type);
 		}

File: src/main/java/com/zendesk/maxwell/schema/columndef/ColumnDef.java
Patch:
@@ -79,6 +79,8 @@ public static ColumnDef build(String tableName, String name, String encoding, St
 			return new EnumColumnDef(tableName, name, type, pos, enumValues);
 		case "set":
 			return new SetColumnDef(tableName, name, type, pos, enumValues);
+		case "bit":
+			return new BitColumnDef(tableName, name, type, pos);
 		default:
 			throw new IllegalArgumentException("unsupported column type " + type);
 		}

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -29,7 +29,7 @@ private void initFirstRun(Connection connection) throws SQLException, IOExceptio
 		SchemaStore store = new SchemaStore(connection, this.context.getServerID(), this.schema, pos);
 		store.save();
 
-		this.context.setInitialPosition(pos);
+		this.context.setPosition(pos);
 	}
 
 	private void run(String[] argv) throws Exception {

File: src/main/java/com/zendesk/maxwell/StdoutProducer.java
Patch:
@@ -12,6 +12,6 @@ public void push(MaxwellAbstractRowsEvent e) throws Exception {
 		for ( String json : e.toJSONStrings() ) {
 			System.out.println(json);
 		}
-		this.context.setInitialPosition(e.getNextBinlogPosition());
+		this.context.setPosition(e);
 	}
 }

File: src/main/java/com/zendesk/maxwell/producer/FileProducer.java
Patch:
@@ -24,6 +24,7 @@ public void push(MaxwellAbstractRowsEvent e) throws Exception {
 			this.fileWriter.write('\n');
 			this.fileWriter.flush();
 		}
-		context.setInitialPosition(e.getNextBinlogPosition());
+
+		context.setPosition(e);
 	}
 }

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -29,7 +29,7 @@ private void initFirstRun(Connection connection) throws SQLException, IOExceptio
 		SchemaStore store = new SchemaStore(connection, this.context.getServerID(), this.schema, pos);
 		store.save();
 
-		this.context.setInitialPosition(pos);
+		this.context.setPosition(pos);
 	}
 
 	private void run(String[] argv) throws Exception {

File: src/main/java/com/zendesk/maxwell/StdoutProducer.java
Patch:
@@ -12,6 +12,6 @@ public void push(MaxwellAbstractRowsEvent e) throws Exception {
 		for ( String json : e.toJSONStrings() ) {
 			System.out.println(json);
 		}
-		this.context.setInitialPosition(e.getNextBinlogPosition());
+		this.context.setPosition(e);
 	}
 }

File: src/main/java/com/zendesk/maxwell/producer/FileProducer.java
Patch:
@@ -24,6 +24,7 @@ public void push(MaxwellAbstractRowsEvent e) throws Exception {
 			this.fileWriter.write('\n');
 			this.fileWriter.flush();
 		}
-		context.setInitialPosition(e.getNextBinlogPosition());
+
+		context.setPosition(e);
 	}
 }

File: src/test/java/com/zendesk/maxwell/TestMaxwellParser.java
Patch:
@@ -44,7 +44,6 @@ public void getEvents(EventConsumer c) throws Exception {
 		}
 
 		hardStop();
-		LOGGER.debug("exiting getEvents loop");
 	}
 
 	private void hardStop() throws Exception {
@@ -57,11 +56,9 @@ protected BinlogEventV4 pollV4EventFromQueue() throws InterruptedException
 	{
 		BinlogEventV4 v4 = super.pollV4EventFromQueue();
 		if ( v4 != null && v4.getHeader().getNextPosition() >= this.stopAt.getOffset() ) {
-			LOGGER.debug("stopping getEvents loop");
 			shouldStop = true;
 		}
 
-		LOGGER.debug("got event: " + v4);
 		return v4;
 	}
 }

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -68,12 +68,12 @@ private void run(String[] argv) throws Exception {
 		Runtime.getRuntime().addShutdownHook(new Thread() {
 			@Override
 			public void run() {
-				context.terminate();
 				try {
 					p.stop();
 				} catch (TimeoutException e) {
 					System.err.println("Timed out trying to shutdown maxwell parser thread.");
 				}
+				context.terminate();
 			}
 		});
 

File: src/main/java/com/zendesk/maxwell/MaxwellContext.java
Patch:
@@ -35,7 +35,6 @@ public ConnectionPool getConnectionPool() {
 	public void terminate() {
 		if ( this.schemaPosition != null ) {
 			this.schemaPosition.stop();
-			this.schemaPosition = null;
 		}
 		this.connectionPool.release();
 	}

File: src/main/java/com/zendesk/maxwell/schema/SchemaPosition.java
Patch:
@@ -66,8 +66,9 @@ public void run() {
 			} catch (InterruptedException e) { }
 		}
 
-		if ( this.exception != null )
+		if ( exception == null ) {
 			store(position.get());
+		}
 	}
 
 

File: src/main/java/com/zendesk/maxwell/schema/SchemaPosition.java
Patch:
@@ -66,8 +66,9 @@ public void run() {
 			} catch (InterruptedException e) { }
 		}
 
-		if ( this.exception != null )
+		if ( exception == null ) {
 			store(position.get());
+		}
 	}
 
 

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -68,12 +68,12 @@ private void run(String[] argv) throws Exception {
 		Runtime.getRuntime().addShutdownHook(new Thread() {
 			@Override
 			public void run() {
-				context.terminate();
 				try {
 					p.stop();
 				} catch (TimeoutException e) {
 					System.err.println("Timed out trying to shutdown maxwell parser thread.");
 				}
+				context.terminate();
 			}
 		});
 

File: src/test/java/com/zendesk/maxwell/MysqlIsolatedServer.java
Patch:
@@ -28,7 +28,7 @@ public class MysqlIsolatedServer {
 	public void boot() throws IOException, SQLException, InterruptedException {
         final String dir = System.getProperty("user.dir");
 
-		ProcessBuilder pb = new ProcessBuilder(dir + "/src/test/onetimeserver", "--debug", "--mysql-version=" + this.getVersion(),
+		ProcessBuilder pb = new ProcessBuilder(dir + "/src/test/onetimeserver", "--mysql-version=" + this.getVersion(),
 												"--log-bin=master", "--binlog_format=row", "--innodb_flush_log_at_trx_commit=1", "--server_id=" + SERVER_ID);
 		LOGGER.debug("booting onetimeserver: " + StringUtils.join(pb.command(), " "));
 		Process p = pb.start();

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -25,7 +25,7 @@ private void initFirstRun(Connection connection) throws SQLException, IOExceptio
 		this.schema = capturer.capture();
 
 		BinlogPosition pos = BinlogPosition.capture(connection);
-		SchemaStore store = new SchemaStore(connection, this.schema, pos);
+		SchemaStore store = new SchemaStore(connection, this.context.getServerID(), this.schema, pos);
 		store.save();
 
 		this.context.setInitialPosition(pos);
@@ -52,7 +52,7 @@ public void run() {
 
 			if ( this.context.getInitialPosition() != null ) {
 				LOGGER.info("Maxwell is booting, starting at " + this.context.getInitialPosition());
-				SchemaStore store = SchemaStore.restore(connection, this.context.getInitialPosition());
+				SchemaStore store = SchemaStore.restore(connection, this.context.getServerID(), this.context.getInitialPosition());
 				this.schema = store.getSchema();
 			} else {
 				initFirstRun(connection);

File: src/main/java/com/zendesk/maxwell/MaxwellParser.java
Patch:
@@ -283,7 +283,7 @@ private void processQueryEvent(QueryEvent event) throws SchemaSyncError, SQLExce
 			BinlogPosition p = eventBinlogPosition(event);
 			LOGGER.info("storing schema @" + p + " after applying \"" + sql.replace('\n',' ') + "\"");
 			try ( Connection c = this.context.getConnectionPool().getConnection() ) {
-				new SchemaStore(c, schema, p).save();
+				new SchemaStore(c, this.context.getServerID(), schema, p).save();
 			}
 			this.context.setInitialPositionSync(p);
 		}

File: src/test/java/com/zendesk/maxwell/MysqlIsolatedServer.java
Patch:
@@ -17,16 +17,16 @@
 import java.util.Map;
 
 public class MysqlIsolatedServer {
-	private Connection connection;
-	private String baseDir;
+	public static final Long SERVER_ID = 123123L;
+	private Connection connection; private String baseDir;
 	private int port;
 
 	static final Logger LOGGER = LoggerFactory.getLogger(MysqlIsolatedServer.class);
 	public void boot() throws IOException, SQLException {
         final String dir = System.getProperty("user.dir");
 
 		ProcessBuilder pb = new ProcessBuilder(dir + "/src/test/mysql_isolated_server/bin/boot_isolated_mysql_server",
-												"--", "--binlog_format=row", "--innodb_flush_log_at_trx_commit=1");
+												"--", "--binlog_format=row", "--innodb_flush_log_at_trx_commit=1", "--server_id=" + SERVER_ID);
 		Map<String, String> env = pb.environment();
 
 		LOGGER.debug("Booting server: " + StringUtils.join(pb.command(), " "));

File: src/main/java/com/zendesk/maxwell/MaxwellParser.java
Patch:
@@ -202,7 +202,7 @@ public void getEvents(EventConsumer c, BinlogPosition endPosition) throws Except
 					max_tries--;
 					continue;
 				} else {
-					System.out.println("maxwell didn't reach the position requested.");
+					LOGGER.error("maxwell didn't reach the position requested.");
 					return;
 				}
 			}

File: src/main/java/com/zendesk/maxwell/MaxwellParser.java
Patch:
@@ -188,7 +188,7 @@ private LinkedList<MaxwellAbstractRowsEvent> getTransactionEvents() throws Excep
 				case MySQLConstants.QUERY_EVENT:
 					QueryEvent qe = (QueryEvent) v4Event;
 
-					if ( qe.getSql().toString() == "COMMIT" ) {
+					if ( qe.getSql().toString().equals("COMMIT") ) {
 						// some storage engines(?) will output a "COMMIT" QUERY_EVENT instead of a XID_EVENT.
 						// not sure exactly how to trigger this.
 						if ( !list.isEmpty() )

File: src/main/java/com/zendesk/maxwell/schema/ddl/SchemaChange.java
Patch:
@@ -36,7 +36,7 @@ public abstract class SchemaChange {
 		SQL_BLACKLIST.add(Pattern.compile("^SET\\s+PASSWORD", Pattern.CASE_INSENSITIVE));
 		SQL_BLACKLIST.add(Pattern.compile("^(CREATE|DROP|RENAME)\\s+USER", Pattern.CASE_INSENSITIVE));
 
-		SQL_BLACKLIST.add(Pattern.compile("^TRUNCATE\\s+TABLE", Pattern.CASE_INSENSITIVE));
+		SQL_BLACKLIST.add(Pattern.compile("^TRUNCATE\\s+", Pattern.CASE_INSENSITIVE));
 	}
 
 	private static boolean matchesBlacklist(String sql) {

File: src/main/java/com/zendesk/maxwell/MaxwellJSONObject.java
Patch:
@@ -26,6 +26,9 @@ public Set<String> keySet() {
 		if ( has("xid") )
 			set.add("xid");
 
+		if ( has("commit") && getBoolean("commit"))
+			set.add("commit");
+
 		return set;
 	}
 }

File: src/main/java/com/zendesk/maxwell/Maxwell.java
Patch:
@@ -25,7 +25,7 @@ private void initFirstRun(Connection connection) throws SQLException, IOExceptio
 		this.schema = capturer.capture();
 
 		BinlogPosition pos = BinlogPosition.capture(connection);
-		SchemaStore store = new SchemaStore(connection, this.schema, pos);
+		SchemaStore store = new SchemaStore(connection, this.context.getServerID(), this.schema, pos);
 		store.save();
 
 		this.context.setInitialPosition(pos);
@@ -52,7 +52,7 @@ public void run() {
 
 			if ( this.context.getInitialPosition() != null ) {
 				LOGGER.info("Maxwell is booting, starting at " + this.context.getInitialPosition());
-				SchemaStore store = SchemaStore.restore(connection, this.context.getInitialPosition());
+				SchemaStore store = SchemaStore.restore(connection, this.context.getServerID(), this.context.getInitialPosition());
 				this.schema = store.getSchema();
 			} else {
 				initFirstRun(connection);

File: src/main/java/com/zendesk/maxwell/MaxwellParser.java
Patch:
@@ -219,7 +219,7 @@ private void processQueryEvent(QueryEvent event) throws SchemaSyncError, SQLExce
 			BinlogPosition p = eventBinlogPosition(event);
 			LOGGER.info("storing schema @" + p + " after applying \"" + sql.replace('\n',' ') + "\"");
 			try ( Connection c = this.context.getConnectionPool().getConnection() ) {
-				new SchemaStore(c, schema, p).save();
+				new SchemaStore(c, this.context.getServerID(), schema, p).save();
 			}
 			this.context.setInitialPositionSync(p);
 		}

File: src/test/java/com/zendesk/maxwell/MysqlIsolatedServer.java
Patch:
@@ -13,15 +13,15 @@
 import java.util.Map;
 
 public class MysqlIsolatedServer {
-	private Connection connection;
-	private String baseDir;
+	public static final Long SERVER_ID = 123123L;
+	private Connection connection; private String baseDir;
 	private int port;
 
 	public void boot() throws IOException, SQLException {
         final String dir = System.getProperty("user.dir");
 
 		ProcessBuilder pb = new ProcessBuilder(dir + "/src/test/mysql_isolated_server/bin/boot_isolated_mysql_server",
-												"--", "--binlog_format=row", "--innodb_flush_log_at_trx_commit=1");
+												"--", "--binlog_format=row", "--innodb_flush_log_at_trx_commit=1", "--server_id=" + SERVER_ID);
 		Map<String, String> env = pb.environment();
 
 		env.put("PATH", env.get("PATH") + ":/opt/local/bin");

File: src/main/java/com/zendesk/maxwell/MaxwellParser.java
Patch:
@@ -64,6 +64,8 @@ public MaxwellParser(Schema currentSchema, AbstractProducer producer, MaxwellCon
 		this.replicator.setPassword(ctx.getConfig().mysqlPassword);
 		this.replicator.setPort(ctx.getConfig().mysqlPort);
 
+		this.replicator.setLevel2BufferSize(50 * 1024 * 1024);
+
 		this.producer = producer;
 
 		this.context = ctx;

File: src/main/java/com/zendesk/maxwell/MaxwellParser.java
Patch:
@@ -64,6 +64,8 @@ public MaxwellParser(Schema currentSchema, AbstractProducer producer, MaxwellCon
 		this.replicator.setPassword(ctx.getConfig().mysqlPassword);
 		this.replicator.setPort(ctx.getConfig().mysqlPort);
 
+		this.replicator.setLevel2BufferSize(50 * 1024 * 1024);
+
 		this.producer = producer;
 
 		this.context = ctx;

File: src/main/java/com/zendesk/maxwell/producer/AbstractProducer.java
Patch:
@@ -11,7 +11,5 @@ public AbstractProducer(MaxwellContext context) {
 	}
 	abstract public void push(MaxwellAbstractRowsEvent e) throws Exception;
 
-	public void onComplete(MaxwellAbstractRowsEvent e) {
-		System.out.println("processed " + e.getBinlogFilename() + ":" + e.getHeader().getPosition());
-	}
+	public void onComplete(MaxwellAbstractRowsEvent e) { }
 }

File: src/main/java/com/zendesk/maxwell/producer/FileProducer.java
Patch:
@@ -24,7 +24,6 @@ public void push(MaxwellAbstractRowsEvent e) throws Exception {
 			this.fileWriter.write('\n');
 			this.fileWriter.flush();
 		}
-		this.onComplete(e);
 		context.setInitialPosition(e.getNextBinlogPosition());
 	}
 }

File: src/main/java/com/zendesk/maxwell/producer/AbstractProducer.java
Patch:
@@ -11,7 +11,5 @@ public AbstractProducer(MaxwellContext context) {
 	}
 	abstract public void push(MaxwellAbstractRowsEvent e) throws Exception;
 
-	public void onComplete(MaxwellAbstractRowsEvent e) {
-		System.out.println("processed " + e.getBinlogFilename() + ":" + e.getHeader().getPosition());
-	}
+	public void onComplete(MaxwellAbstractRowsEvent e) { }
 }

File: src/main/java/com/zendesk/maxwell/producer/FileProducer.java
Patch:
@@ -24,7 +24,6 @@ public void push(MaxwellAbstractRowsEvent e) throws Exception {
 			this.fileWriter.write('\n');
 			this.fileWriter.flush();
 		}
-		this.onComplete(e);
 		context.setInitialPosition(e.getNextBinlogPosition());
 	}
 }

File: src/main/java/com/zendesk/maxwell/schema/ddl/SchemaChange.java
Patch:
@@ -35,6 +35,8 @@ public abstract class SchemaChange {
 		SQL_BLACKLIST.add(Pattern.compile("^ANALYZE\\s+TABLE", Pattern.CASE_INSENSITIVE));
 		SQL_BLACKLIST.add(Pattern.compile("^SET\\s+PASSWORD", Pattern.CASE_INSENSITIVE));
 		SQL_BLACKLIST.add(Pattern.compile("^(CREATE|DROP|RENAME)\\s+USER", Pattern.CASE_INSENSITIVE));
+
+		SQL_BLACKLIST.add(Pattern.compile("^TRUNCATE\\s+TABLE", Pattern.CASE_INSENSITIVE));
 	}
 
 	private static boolean matchesBlacklist(String sql) {

File: src/main/java/com/zendesk/maxwell/schema/columndef/ColumnDef.java
Patch:
@@ -55,6 +55,9 @@ public static ColumnDef build(String tableName, String name, String encoding, St
 		case "mediumblob":
 		case "longblob":
 			return new StringColumnDef(tableName, name, type, pos, "binary");
+		case "real":
+			type = "double";
+			// fall through
 		case "float":
 		case "double":
 			return new FloatColumnDef(tableName, name, type, pos);

File: src/main/java/com/zendesk/maxwell/schema/columndef/IntColumnDef.java
Patch:
@@ -73,6 +73,7 @@ private final static int bitsFromType(String type) {
 	}
 
 
+	@Override
 	public boolean getSigned() {
 		return signed;
 	}

File: src/main/java/com/zendesk/maxwell/schema/columndef/IntColumnDef.java
Patch:
@@ -73,6 +73,7 @@ private final static int bitsFromType(String type) {
 	}
 
 
+	@Override
 	public boolean getSigned() {
 		return signed;
 	}

File: src/main/java/com/zendesk/maxwell/schema/ddl/MysqlParserListener.java
Patch:
@@ -9,6 +9,7 @@
 import com.zendesk.maxwell.schema.columndef.ColumnDef;
 import com.zendesk.maxwell.schema.ddl.mysqlParser.Column_optionsContext;
 import com.zendesk.maxwell.schema.ddl.mysqlParser.Enum_valueContext;
+import com.zendesk.maxwell.schema.ddl.mysqlParser.Index_columnContext;
 import com.zendesk.maxwell.schema.ddl.mysqlParser.NameContext;
 import com.zendesk.maxwell.schema.ddl.mysqlParser.*;
 
@@ -229,7 +230,8 @@ public void exitDrop_database(mysqlParser.Drop_databaseContext ctx) {
 	@Override
 	public void exitIndex_type_pk(mysqlParser.Index_type_pkContext ctx) {
 		this.pkColumns = new ArrayList<>();
-		for ( NameContext n : ctx.index_column_list().name_list().name() ) {
+		for (  Index_columnContext column : ctx.index_column_list().index_columns().index_column() ) {
+			NameContext n = column.name();
 			this.pkColumns.add(unquote(n.getText()));
 		}
 	}

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -181,7 +181,8 @@ public void testParsingSomeAlters() {
 	       "alter table t drop index `foo`",
 	       "alter table t disable keys",
 	       "alter table t enable keys",
-	       "alter table t order by `foor`, bar"
+	       "alter table t order by `foor`, bar",
+	       "alter table tester add index (whatever(20), `f,` (2))"
 		};
 
 		for ( String s : testSQL ) {

File: src/main/java/com/zendesk/maxwell/schema/ddl/MysqlParserListener.java
Patch:
@@ -9,6 +9,7 @@
 import com.zendesk.maxwell.schema.columndef.ColumnDef;
 import com.zendesk.maxwell.schema.ddl.mysqlParser.Column_optionsContext;
 import com.zendesk.maxwell.schema.ddl.mysqlParser.Enum_valueContext;
+import com.zendesk.maxwell.schema.ddl.mysqlParser.Index_columnContext;
 import com.zendesk.maxwell.schema.ddl.mysqlParser.NameContext;
 import com.zendesk.maxwell.schema.ddl.mysqlParser.*;
 
@@ -229,7 +230,8 @@ public void exitDrop_database(mysqlParser.Drop_databaseContext ctx) {
 	@Override
 	public void exitIndex_type_pk(mysqlParser.Index_type_pkContext ctx) {
 		this.pkColumns = new ArrayList<>();
-		for ( NameContext n : ctx.index_column_list().name_list().name() ) {
+		for (  Index_columnContext column : ctx.index_column_list().index_columns().index_column() ) {
+			NameContext n = column.name();
 			this.pkColumns.add(unquote(n.getText()));
 		}
 	}

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -181,7 +181,8 @@ public void testParsingSomeAlters() {
 	       "alter table t drop index `foo`",
 	       "alter table t disable keys",
 	       "alter table t enable keys",
-	       "alter table t order by `foor`, bar"
+	       "alter table t order by `foor`, bar",
+	       "alter table tester add index (whatever(20), `f,` (2))"
 		};
 
 		for ( String s : testSQL ) {

File: src/test/java/com/zendesk/maxwell/AbstractMaxwellTest.java
Patch:
@@ -87,7 +87,6 @@ public void setupMysql() throws SQLException, IOException, InterruptedException
 		config.mysqlPort = server.getPort();
 		config.mysqlUser = "maxwell";
 		config.mysqlPassword = "maxwell";
-		config.currentPositionFile = "/tmp/maxwell.position";
 		config.setInitialPosition(start);
 
 		p.setConfig(config);

File: src/test/java/com/zendesk/maxwell/AbstractMaxwellTest.java
Patch:
@@ -87,7 +87,6 @@ public void setupMysql() throws SQLException, IOException, InterruptedException
 		config.mysqlPort = server.getPort();
 		config.mysqlUser = "maxwell";
 		config.mysqlPassword = "maxwell";
-		config.currentPositionFile = "/tmp/maxwell.position";
 		config.setInitialPosition(start);
 
 		p.setConfig(config);

File: src/main/java/com/zendesk/maxwell/producer/MaxwellKafkaProducer.java
Patch:
@@ -36,7 +36,6 @@ public void onCompletion(RecordMetadata md, Exception e) {
 			}
 		}
 	}
-
 }
 public class MaxwellKafkaProducer extends AbstractProducer {
 	private final KafkaProducer<byte[], byte[]> kafka;

File: src/main/java/com/zendesk/maxwell/schema/SchemaStore.java
Patch:
@@ -115,7 +115,8 @@ private void saveSchema() throws SQLException {
 
 			}
 		}
-		executeColumnInsert(columnData);
+		if ( columnData.size() > 0 )
+			executeColumnInsert(columnData);
 	}
 
 	private void executeColumnInsert(ArrayList<Object> columnData) throws SQLException {

File: src/main/java/com/zendesk/maxwell/schema/ddl/MysqlParserListener.java
Patch:
@@ -47,7 +47,7 @@ private String unquote(String ident) {
 	}
 
 	private String unquote_literal(String ident) {
-		return ident.replaceAll("^'", "").replaceAll("'$", "");
+		return unquote(ident.replaceAll("^'", "").replaceAll("'$", ""));
 	}
 
 	private String getDB(Table_nameContext t) {

File: src/main/java/com/zendesk/maxwell/MaxwellParser.java
Patch:
@@ -46,9 +46,6 @@ public MaxwellParser(Schema currentSchema) throws Exception {
 
 		this.replicator = new OpenReplicator();
 
-		this.replicator.setHost("127.0.0.1");
-		this.replicator.setUser("maxwell");
-		this.replicator.setPassword("maxwell");
 		this.replicator.setBinlogEventListener(this.binlogEventListener);
 	}
 

File: src/test/java/com/zendesk/maxwell/SchemaCaptureTest.java
Patch:
@@ -38,7 +38,7 @@ public void testDatabases() throws SQLException {
 		Schema s = capturer.capture();
 		String dbs = StringUtils.join(s.getDatabaseNames().iterator(), ":");
 
-		assertEquals("shard_1:shard_2:test", dbs);
+		assertEquals("maxwell:shard_1:shard_2:test", dbs);
 	}
 
 	@Test

File: src/main/java/com/zendesk/maxwell/schema/SchemaCapturer.java
Patch:
@@ -16,7 +16,7 @@ public class SchemaCapturer {
 	private final Connection connection;
 	static final Logger LOGGER = LoggerFactory.getLogger(SchemaStore.class);
 
-	private final String[] alwaysExclude = {"performance_schema", "information_schema", "mysql", "maxwell"};
+	private final String[] alwaysExclude = {"performance_schema", "information_schema", "mysql"};
 	private final HashSet<String> excludeDatabases;
 	private final HashSet<String> includeDatabases;
 

File: src/main/java/com/zendesk/maxwell/schema/ddl/TableCreate.java
Patch:
@@ -44,8 +44,8 @@ public Schema apply(Schema originalSchema) throws SchemaSyncError {
 			t.rename(this.tableName);
 			d.addTable(t);
 		} else {
-		    Table t = d.buildTable(this.tableName, this.encoding, this.columns);
-		    t.setDefaultColumnEncodings();
+			Table t = d.buildTable(this.tableName, this.encoding, this.columns);
+			t.setDefaultColumnEncodings();
 		}
 
 		return newSchema;

File: src/main/java/com/zendesk/maxwell/schema/ddl/MysqlParserListener.java
Patch:
@@ -12,10 +12,10 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-class MaxwellSQLSyntaxRrror extends RuntimeException {
+class MaxwellSQLSyntaxError extends RuntimeException {
 	private static final long serialVersionUID = 140545518818187219L;
 
-	public MaxwellSQLSyntaxRrror(String message) {
+	public MaxwellSQLSyntaxError(String message) {
 		super(message);
 	}
 }
@@ -68,7 +68,7 @@ private TableAlter alterStatement() {
 	public void visitErrorNode(ErrorNode node) {
 		this.schemaChanges.clear();
 		LOGGER.error(node.getParent().toStringTree(new mysqlParser(null)));
-		throw new MaxwellSQLSyntaxRrror(node.getText());
+		throw new MaxwellSQLSyntaxError(node.getText());
 	}
 	private boolean isSigned(List<Int_flagsContext> flags) {
 		for ( Int_flagsContext flag : flags ) {

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -46,11 +46,11 @@ private TableCreate parseCreate(String sql) {
 
 	@Test
 	public void testBasic() {
-		MaxwellSQLSyntaxRrror e = null;
+		MaxwellSQLSyntaxError e = null;
 		assertThat(parseAlter("ALTER TABLE `foo` ADD col1 text"), is(not(nullValue())));
 		try {
 			parseAlter("ALTER TABLE foolkj `foo` lkjlkj");
-		} catch ( MaxwellSQLSyntaxRrror err ) {
+		} catch ( MaxwellSQLSyntaxError err ) {
 			e = err;
 		}
 		assertThat(e, is(not(nullValue())));

File: src/main/java/com/zendesk/maxwell/schema/ddl/DatabaseCreate.java
Patch:
@@ -22,7 +22,7 @@ public Schema apply(Schema originalSchema) throws SchemaSyncError {
 			if ( ifNotExists )
 				return originalSchema;
 			else
-			    throw new SchemaSyncError("Unexpectedly asked to create existing database " + dbName);
+				throw new SchemaSyncError("Unexpectedly asked to create existing database " + dbName);
 		}
 
 		Schema newSchema = originalSchema.copy();

File: src/main/java/com/zendesk/maxwell/schema/columndef/StringColumnDef.java
Patch:
@@ -13,8 +13,9 @@ public StringColumnDef(String tableName, String name, String type, int pos, Stri
 		this.encoding = encoding;
 	}
 
-	public String getEncoding() {
-		return encoding;
+	public void setDefaultEncoding(String e) {
+		if ( this.encoding == null )
+		  this.encoding = e;
 	}
 
 	@Override

File: src/main/java/com/zendesk/maxwell/schema/ddl/TableAlter.java
Patch:
@@ -51,6 +51,8 @@ public Schema apply(Schema originalSchema) throws SchemaSyncError {
 			mod.apply(table);
 		}
 
+		table.setDefaultColumnEncodings();
+
 		return newSchema;
 	}
 }
\ No newline at end of file

File: src/main/java/com/zendesk/maxwell/schema/ddl/TableCreate.java
Patch:
@@ -28,7 +28,9 @@ public Schema apply(Schema originalSchema) throws SchemaSyncError {
 			throw new SchemaSyncError("Couldn't find database " + this.dbName);
 
 		Table t = new Table(d, this.tableName, this.encoding, this.columns);
+
 		d.addTable(t);
+		t.setDefaultColumnEncodings();
 
 		return newSchema;
 	}

File: src/test/java/com/zendesk/maxwell/schema/ddl/DDLParserTest.java
Patch:
@@ -128,7 +128,6 @@ public void testDefault() {
 		AddColumnMod m = (AddColumnMod) a.columnMods.get(0);
 		StringColumnDef b = (StringColumnDef) m.definition;
 		assertThat(b.getType(), is("text"));
-		assertThat(b.getEncoding(), is("utf8"));
 	}
 
 	@Test

File: src/main/java/com/zendesk/maxwell/MaxwellFilter.java
Patch:
@@ -76,7 +76,7 @@ private boolean matchesAnyRows(MaxwellAbstractRowsEvent e) {
 	}
 
 	public boolean matches(MaxwellAbstractRowsEvent e) {
-		return matchesDatabase(e.getTable().getDatabase())
+		return matchesDatabase(e.getTable().getDatabase().getName())
 		    && matchesTable(e.getTable().getName())
 		    && matchesAnyRows(e);
 	}

File: src/main/java/com/zendesk/maxwell/schema/ddl/DatabaseCreate.java
Patch:
@@ -23,7 +23,7 @@ public Schema apply(Schema originalSchema) throws SchemaSyncError {
 		}
 
 		Schema newSchema = originalSchema.copy();
-		database = new Database(dbName, null);
+		database = new Database(dbName, encoding);
 
 		newSchema.getDatabases().add(database);
 		return newSchema;

File: src/main/java/com/zendesk/maxwell/schema/ddl/TableCreate.java
Patch:
@@ -27,8 +27,8 @@ public Schema apply(Schema originalSchema) throws SchemaSyncError {
 		if ( d == null )
 			throw new SchemaSyncError("Couldn't find database " + this.dbName);
 
-		Table t = new Table(dbName, this.tableName, this.columns);
-		d.getTableList().add(t);
+		Table t = new Table(this.tableName, this.columns);
+		d.addTable(t);
 
 		return newSchema;
 	}

File: src/main/java/com/zendesk/maxwell/MaxwellAbstractRowsEvent.java
Patch:
@@ -1,5 +1,6 @@
 package com.zendesk.maxwell;
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Iterator;

File: src/main/java/com/zendesk/maxwell/schema/ddl/TableDrop.java
Patch:
@@ -20,7 +20,7 @@ public Schema apply(Schema originalSchema) throws SchemaSyncError {
 
 		Database d = findDatabase(newSchema, this.dbName, ifExists);
 
-		// it's perfectly legal to say drop table `random_garbage_db`.`random_garbage_table`
+		// it's perfectly legal to say drop table if exists `random_garbage_db`.`random_garbage_table`
 		if ( d == null && ifExists)
 			return newSchema;
 

File: java/src/com/zendesk/exodus/ExodusFilter.java
Patch:
@@ -19,14 +19,14 @@ public void includeDatabase(String dbName) {
 		includeDatabases.add(dbName);
 	}
 
-	public void excludeDatabass(String dbName) {
+	public void excludeDatabase(String dbName) {
 		throwUnlessEmpty(includeDatabases, "database");
 		excludeDatabases.add(dbName);
 	}
 
 	public void includeTable(String tblName) {
 		throwUnlessEmpty(excludeTables, "table");
-		includeDatabases.add(tblName);
+		includeTables.add(tblName);
 	}
 
 	public void excludeTable(String tblName) {

File: java/src/com/zendesk/exodus/schema/Table.java
Patch:
@@ -27,7 +27,7 @@ private List<Column> buildColumnsFromResultSet(ResultSet r) throws SQLException
 			String colName    = r.getString("COLUMN_NAME");
 			String colType    = r.getString("DATA_TYPE");
 			String colEnc     = r.getString("CHARACTER_SET_NAME");
-			int colPos        = r.getInt("ORDINAL_POSITION");
+			int colPos        = r.getInt("ORDINAL_POSITION") - 1;
 			boolean colSigned = !r.getString("COLUMN_TYPE").matches(" unsigned$");
 
 

File: java/test/com/zendesk/exodus/AbstractMaxwellTest.java
Patch:
@@ -39,6 +39,9 @@ private void resetMaster() throws SQLException, IOException {
 		));
 
 		for ( File file: new File(getSQLDir()).listFiles()) {
+			if ( !file.getName().endsWith(".sql"))
+				continue;
+
 			byte[] sql = Files.readAllBytes(file.toPath());
 			String s = new String(sql);
 			if ( s != null ) {

File: java/src/com/zendesk/exodus/ExodusDeleteRowsEvent.java
Patch:
@@ -36,6 +36,7 @@ public String toSql() {
 			if ( rowIter.hasNext() ) 
 				s.append(",");
 		}
+		s.append(")");
 		return s.toString();
 	}
 }

