File: cc/src/main/java/com/billy/cc/core/component/CC.java
Patch:
@@ -439,7 +439,7 @@ public <T> T getParamItem(String key) {
         try {
             return (T) params.get(key);
         } catch(Exception e) {
-            e.printStackTrace();
+            CCUtil.printStackTrace(e);
         }
         return null;
     }
@@ -504,7 +504,7 @@ void setResult4Waiting(CCResult result) {
                 }
             }
         } catch(Exception e) {
-            e.printStackTrace();
+            CCUtil.printStackTrace(e);
         }
     }
 
@@ -854,7 +854,7 @@ private static String format(String s, Object... args) {
                 s = String.format(s, args);
             }
         } catch(Exception e) {
-            e.printStackTrace();
+            CCUtil.printStackTrace(e);
         }
         return s;
     }

File: cc/src/main/java/com/billy/cc/core/component/ChainProcessor.java
Patch:
@@ -72,7 +72,7 @@ private static void performCallback(CC cc, CCResult result) {
             try {
                 callback.onResult(cc, result);
             } catch(Exception e) {
-                e.printStackTrace();
+                CCUtil.printStackTrace(e);
             }
         }
     }
@@ -92,7 +92,7 @@ public void run() {
             try {
                 callback.onResult(cc, result);
             } catch(Exception e) {
-                e.printStackTrace();
+                CCUtil.printStackTrace(e);
             }
         }
     }

File: cc/src/main/java/com/billy/cc/core/component/ComponentManager.java
Patch:
@@ -91,7 +91,7 @@ static void registerComponent(IComponent component) {
                     }
                 }
             } catch(Exception e) {
-                e.printStackTrace();
+                CCUtil.printStackTrace(e);
             }
         }
     }

File: cc/src/main/java/com/billy/cc/core/component/RemoteCCInterceptor.java
Patch:
@@ -69,7 +69,7 @@ private String getProcessName(String componentName) {
                             processName = service.getComponentProcessName(componentName);
                             REMOTE_CONNECTIONS.put(processNameTo, service);
                         } catch(Exception ex) {
-                            ex.printStackTrace();
+                            CCUtil.printStackTrace(ex);
                         }
                     }
                 }
@@ -78,7 +78,7 @@ private String getProcessName(String componentName) {
                 }
             }
         } catch(Exception e) {
-            e.printStackTrace();
+            CCUtil.printStackTrace(e);
         }
         return processName;
     }

File: cc/src/main/java/com/billy/cc/core/component/RemoteCCService.java
Patch:
@@ -100,7 +100,7 @@ private static void doCallback(IRemoteCallback callback, String callId, CCResult
             }
             callback.callback(remoteCCResult);
         } catch (RemoteException e) {
-            e.printStackTrace();
+            CCUtil.printStackTrace(e);
             CC.verboseLog(callId, "remote doCallback failed!");
         }
     }
@@ -173,7 +173,7 @@ private static IRemoteCCService getService(String processNameTo) {
                 try {
                     cursor.close();
                 } catch (Exception e) {
-                    e.printStackTrace();
+                    CCUtil.printStackTrace(e);
                 }
             }
         }

File: cc/src/main/java/com/billy/cc/core/component/remote/RemoteConnection.java
Patch:
@@ -7,6 +7,7 @@
 import android.content.pm.ResolveInfo;
 
 import com.billy.cc.core.component.CC;
+import com.billy.cc.core.component.CCUtil;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -57,7 +58,7 @@ public static boolean tryWakeup(String packageName) {
             CC.log("wakeup remote app '%s' success. time=%d", packageName, (System.currentTimeMillis() - time));
             return true;
         } catch(Exception e) {
-            e.printStackTrace();
+            CCUtil.printStackTrace(e);
             CC.log("wakeup remote app '%s' failed. time=%d", packageName, (System.currentTimeMillis() - time));
             return false;
         }

File: cc/src/main/java/com/billy/cc/core/component/SubProcessCCInterceptor.java
Patch:
@@ -129,6 +129,7 @@ public void callback(RemoteCCResult remoteCCResult) throws RemoteException {
                     }
                 });
             } catch (DeadObjectException e) {
+                RemoteCCService.remove(processName);
                 connectionCache.remove(processName);
                 call(remoteCC);
             } catch (Exception e) {

File: demo_component_b/src/main/java/com/billy/cc/demo/component/b/ComponentB.java
Patch:
@@ -59,7 +59,7 @@ public boolean onCall(CC cc) {
         if (processor != null) {
             return processor.onActionCall(cc);
         }
-        CC.sendCCResult(cc.getCallId(), CCResult.error("has not support for action:" + cc.getActionName()));
+        CC.sendCCResult(cc.getCallId(), CCResult.errorUnsupportedActionName());
         return false;
     }
 

File: demo_component_jsbridge/src/main/java/com/billy/cc/demo/component/jsbridge/WebComponent.java
Patch:
@@ -24,7 +24,7 @@ public boolean onCall(CC cc) {
             case "openUrl":
                 return openUrl(cc);
             default:
-                CC.sendCCResult(cc.getCallId(), CCResult.error("unsupported action:" + actionName));
+                CC.sendCCResult(cc.getCallId(), CCResult.errorUnsupportedActionName());
                 break;
         }
 

File: cc/src/main/java/com/billy/cc/core/component/RemoteCCService.java
Patch:
@@ -58,7 +58,8 @@ public void call(final RemoteCC remoteCC, final IRemoteCallback callback) throws
                 .setActionName(remoteCC.getActionName())
                 .setParams(remoteCC.getParams())
                 .setCallId(remoteCC.getCallId())
-                .withoutGlobalInterceptor()
+                .withoutGlobalInterceptor() //为了不重复调用拦截器，全局拦截器需要下沉复用，只在调用方进程中执行
+                .setNoTimeout() //超时逻辑在调用方进程中处理
                 .build();
         if (remoteCC.isMainThreadSyncCall()) {
             mainThreadHandler.post(new Runnable() {

File: cc/src/main/java/com/billy/cc/core/component/CC.java
Patch:
@@ -63,7 +63,7 @@ public class CC {
 
 
     static {
-        Application app = CCUtil.initApplicaiton();
+        Application app = CCUtil.initApplication();
         if (app != null) {
             init(app);
         }

File: cc/src/main/java/com/billy/cc/core/component/CC.java
Patch:
@@ -63,7 +63,7 @@ public class CC {
 
 
     static {
-        Application app = CCUtil.initApplicaiton();
+        Application app = CCUtil.initApplication();
         if (app != null) {
             init(app);
         }

