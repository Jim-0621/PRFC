File: hawk/src/main/java/com/orhanobut/hawk/Parser.java
Patch:
@@ -4,8 +4,8 @@
 
 /**
  * Intermediate layer that handles serialization/deserialization for the end result.
- * This is not the same as {@link Serializer}. This interface is only used to convert the intermediate value into String,
- * or vice-versa to be used for {@link Storage}
+ * This is not the same as {@link Serializer}. This interface is only used to convert the intermediate value
+ * into String or vice-versa to be used for {@link Storage}
  *
  * <p>Use custom implementation if built-in implementation is not enough.</p>
  *

File: hawk/src/main/java/com/orhanobut/hawk/DefaultHawkFacade.java
Patch:
@@ -41,7 +41,7 @@ public DefaultHawkFacade(HawkBuilder builder) {
     String cipherText = null;
     try {
       cipherText = encryption.encrypt(key, plainText);
-      log("Hawk.put -> Encrypted to  " + cipherText);
+      log("Hawk.put -> Encrypted to " + cipherText);
     } catch (Exception e) {
       e.printStackTrace();
     }
@@ -52,7 +52,7 @@ public DefaultHawkFacade(HawkBuilder builder) {
 
     // 3. Serialize the given object along with the cipher text
     String serializedText = serializer.serialize(cipherText, value);
-    log("Hawk.put -> Serialized to" + serializedText);
+    log("Hawk.put -> Serialized to " + serializedText);
     if (serializedText == null) {
       log("Hawk.put -> Serialization failed");
       return false;

File: hawk/src/androidTest/java/com/orhanobut/hawk/ConcealEncryptionTest.java
Patch:
@@ -12,7 +12,7 @@
 @RunWith(AndroidJUnit4.class)
 public class ConcealEncryptionTest {
 
-  Encryption encryption;
+  private Encryption encryption;
 
   @Before public void setup() {
     encryption = new ConcealEncryption(InstrumentationRegistry.getContext());

File: hawk/src/androidTest/java/com/orhanobut/hawk/ConcealTest.java
Patch:
@@ -20,7 +20,7 @@
 @RunWith(AndroidJUnit4.class)
 public class ConcealTest {
 
-  Crypto crypto;
+  private Crypto crypto;
 
   @Before public void setup() {
     Context context = InstrumentationRegistry.getContext();

File: hawk/src/main/java/com/orhanobut/hawk/Parser.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.lang.reflect.Type;
 
+@SuppressWarnings("WeakerAccess")
 public interface Parser {
 
   <T> T fromJson(String content, Type type) throws Exception;

File: hawk/src/main/java/com/orhanobut/hawk/Serializer.java
Patch:
@@ -1,5 +1,6 @@
 package com.orhanobut.hawk;
 
+@SuppressWarnings("WeakerAccess")
 public interface Serializer {
 
   /**

File: hawk/src/main/java/com/orhanobut/hawk/Storage.java
Patch:
@@ -1,5 +1,6 @@
 package com.orhanobut.hawk;
 
+@SuppressWarnings("WeakerAccess")
 public interface Storage {
 
   /**

File: hawk/src/test/java/com/orhanobut/hawk/EmptyHawkFacadeTest.java
Patch:
@@ -7,7 +7,7 @@
 
 public class EmptyHawkFacadeTest {
 
-  private HawkFacade hawkFacade = new HawkFacade.EmptyHawkFacade();
+  private final HawkFacade hawkFacade = new HawkFacade.EmptyHawkFacade();
 
   private void assertFail(Exception e) {
     assertThat(e).hasMessage("Hawk is not built. " +

File: hawk/src/test/java/com/orhanobut/hawk/FooBar.java
Patch:
@@ -1,9 +1,9 @@
 package com.orhanobut.hawk;
 
 class FooBar {
-  String name = "hawk";
+  final String name = "hawk";
 
   static class InnerFoo {
-    String name = "hawk";
+    final String name = "hawk";
   }
 }

File: hawk/src/main/java/com/orhanobut/hawk/DefaultHawkFacade.java
Patch:
@@ -41,7 +41,7 @@ public DefaultHawkFacade(HawkBuilder builder) {
     String cipherText = null;
     try {
       cipherText = encryption.encrypt(key, plainText);
-      log("Hawk.put -> Encrypted to  " + cipherText);
+      log("Hawk.put -> Encrypted to " + cipherText);
     } catch (Exception e) {
       e.printStackTrace();
     }
@@ -52,7 +52,7 @@ public DefaultHawkFacade(HawkBuilder builder) {
 
     // 3. Serialize the given object along with the cipher text
     String serializedText = serializer.serialize(cipherText, value);
-    log("Hawk.put -> Serialized to" + serializedText);
+    log("Hawk.put -> Serialized to " + serializedText);
     if (serializedText == null) {
       log("Hawk.put -> Serialization failed");
       return false;

File: hawk/src/main/java/com/orhanobut/hawk/HawkBuilder.java
Patch:
@@ -100,7 +100,7 @@ Encryption getEncryption() {
 
   Serializer getSerializer() {
     if (serializer == null) {
-      serializer = new HawkSerializer();
+      serializer = new HawkSerializer(getLogInterceptor());
     }
     return serializer;
   }

File: hawk/src/test/java/com/orhanobut/hawk/HawkTest.java
Patch:
@@ -20,7 +20,7 @@ public class HawkTest {
   @Before public void setup() {
     initMocks(this);
 
-    Hawk.HAWK_FACADE = hawkFacade;
+    Hawk.hawkFacade = hawkFacade;
   }
 
   @After public void tearDown() {

File: hawk/src/main/java/com/orhanobut/hawk/Hawk.java
Patch:
@@ -28,6 +28,7 @@ public static HawkBuilder init(Context context) {
       throw new NullPointerException("Context should not be null");
     }
 
+    internal = null;
     return new HawkBuilder(context);
   }
 

File: hawk/src/main/java/com/orhanobut/hawk/GsonParser.java
Patch:
@@ -7,7 +7,7 @@
 
 import java.lang.reflect.Type;
 
-final class GsonParser implements Parser {
+public final class GsonParser implements Parser {
 
   private final Gson gson;
 

File: hawk/src/main/java/com/orhanobut/hawk/Parser.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.lang.reflect.Type;
 
-interface Parser {
+public interface Parser {
 
   <T> T fromJson(String content, Type type) throws Exception;
 

File: hawk/src/androidTest/java/com/orhanobut/hawk/ApplicationTest.java
Patch:
@@ -7,7 +7,7 @@
  * <a href="http://d.android.com/tools/testing/testing_android.html">Testing Fundamentals</a>
  */
 public class ApplicationTest extends ApplicationTestCase<Application> {
-    public ApplicationTest() {
-        super(Application.class);
-    }
+  public ApplicationTest() {
+    super(Application.class);
+  }
 }
\ No newline at end of file

File: hawk/src/androidTest/java/com/orhanobut/hawk/HawkBackupTest.java
Patch:
@@ -33,6 +33,7 @@ protected void tearDown() throws Exception {
 
     public void testBoolean() {
         Hawk.put("tag", true);
+        Hawk.init(context);
         assertEquals(true, Hawk.get("tag"));
     }
 

File: hawk/src/main/java/com/orhanobut/hawk/AesCbcWithIntegrity.java
Patch:
@@ -443,6 +443,7 @@ public void setIntegrityKey(SecretKey integrityKey) {
         public String toString() {
             return Base64.encodeToString(getConfidentialityKey().getEncoded(), BASE64_FLAGS)
                     + ":" + Base64.encodeToString(getIntegrityKey().getEncoded(), BASE64_FLAGS);
+
         }
 
         @Override

File: hawk/src/main/java/com/orhanobut/hawk/Hawk.java
Patch:
@@ -97,7 +97,7 @@ public static void init(Context context, String password, LogLevel logLevel) {
         }
 
         Storage cryptoStorage = new SharedPreferencesStorage(appContext, TAG_CRYPTO);
-        Hawk.encryption = new AesEncryption(cryptoStorage, encoder, password);
+        Hawk.encryption = new AesEncryption(cryptoStorage, encoder, new GsonParser(new Gson()), password);
         boolean result = Hawk.encryption.init();
         setEncryptionMode(result);
     }

File: hawk/src/androidTest/java/com/orhanobut/hawk/HawkBackupTest.java
Patch:
@@ -317,7 +317,7 @@ public void testNullValuePut() {
             Hawk.put("tag", "something");
             assertNotNull(Hawk.get("tag"));
 
-            Hawk.put("tag", null);
+            assertTrue(Hawk.put("tag", null));
             assertNull(Hawk.get("tag"));
         } catch (Exception e) {
             assertTrue(false);

File: hawk/src/androidTest/java/com/orhanobut/hawk/HawkTest.java
Patch:
@@ -317,7 +317,7 @@ public void testNullValuePut() {
             Hawk.put("tag", "something");
             assertNotNull(Hawk.get("tag"));
 
-            Hawk.put("tag", null);
+            assertTrue(Hawk.put("tag", null));
             assertNull(Hawk.get("tag"));
         } catch (Exception e) {
             assertTrue(false);

File: hawk/src/androidTest/java/com/orhanobut/hawk/HawkTest.java
Patch:
@@ -422,4 +422,5 @@ public void testChainWithLists() {
         }
     }
 
+
 }

File: hawk/src/main/java/com/orhanobut/hawk/AesCbcWithIntegrity.java
Patch:
@@ -113,7 +113,8 @@ public static SecretKeys keys(String keysStr) throws InvalidKeyException {
 
             return new SecretKeys(
                     new SecretKeySpec(confidentialityKey, 0, confidentialityKey.length, CIPHER),
-                    new SecretKeySpec(integrityKey, HMAC_ALGORITHM));
+                    new SecretKeySpec(integrityKey, HMAC_ALGORITHM)
+            );
         }
     }
 
@@ -156,8 +157,7 @@ public static SecretKeys generateKeyFromPassword(String password, byte[] salt) t
         //Get enough random bytes for both the AES key and the HMAC key:
         KeySpec keySpec = new PBEKeySpec(password.toCharArray(), salt,
                 PBE_ITERATION_COUNT, AES_KEY_LENGTH_BITS + HMAC_KEY_LENGTH_BITS);
-        SecretKeyFactory keyFactory = SecretKeyFactory
-                .getInstance(PBE_ALGORITHM);
+        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(PBE_ALGORITHM);
         byte[] keyBytes = keyFactory.generateSecret(keySpec).getEncoded();
 
         // Split the random bytes into two parts:

File: hawk/src/main/java/com/orhanobut/hawk/AesEncryption.java
Patch:
@@ -14,7 +14,6 @@ final class AesEncryption implements Encryption {
 
     //never ever change this value since it will break backward compatibility in terms of keeping previous data
     private static final String KEY_STORAGE_SALT = "asdf3242klj";
-    private static final String KEY_BACKUP = "asdf32asdfads23423442klj";
     private static final String KEY_GENERATED_KEY = "adsfjlkj234234dasfgenasdfas";
 
     private final Storage storage;
@@ -85,7 +84,7 @@ private AesCbcWithIntegrity.CipherTextIvMac getCipherTextIvMac(String cipherText
      * supported, it will fall generate the key without password and store it.
      */
     private void generateSecretKey(String password) throws GeneralSecurityException {
-        if (storage.contains(KEY_BACKUP)) {
+        if (storage.contains(KEY_GENERATED_KEY)) {
             key = generateSecretKeyBackup();
             return;
         }

