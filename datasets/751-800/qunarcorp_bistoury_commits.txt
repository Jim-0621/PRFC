File: bistoury-agent-common/src/main/java/qunar/tc/bistoury/agent/common/kv/SQLiteStoreImpl.java
Patch:
@@ -199,6 +199,9 @@ public void putBatch(Map<String, String> data) {
                     }
                 }
             }
+            if (!batch.isEmpty()) {
+                doPutBatch(batch);
+            }
         } catch (Exception e) {
             logger.error("batch insert into sqlite fail, data: {}", data, e);
         }

File: bistoury-agent-common/src/main/java/qunar/tc/bistoury/agent/common/kv/SQLiteStoreImpl.java
Patch:
@@ -199,6 +199,9 @@ public void putBatch(Map<String, String> data) {
                     }
                 }
             }
+            if (!batch.isEmpty()) {
+                doPutBatch(batch);
+            }
         } catch (Exception e) {
             logger.error("batch insert into sqlite fail, data: {}", data, e);
         }

File: bistoury-agent-common/src/main/java/qunar/tc/bistoury/agent/common/ClosableProcess.java
Patch:
@@ -66,7 +66,7 @@ public void destroy() {
         JavaProcesses.remove(id);
     }
 
-    public abstract int readAndWaitFor(ResponseHandler handler) throws Exception;
+    public abstract byte[] read() throws Exception;
 
     @Override
     public void close() {

File: bistoury-agent-common/src/main/java/qunar/tc/bistoury/agent/common/pid/Jps.java
Patch:
@@ -21,9 +21,9 @@
 // (powered by Fernflower decompiler)
 //
 
+import qunar.tc.bistoury.agent.common.pid.bean.Arguments;
 import qunar.tc.bistoury.agent.common.pid.bean.Res;
 import sun.jvmstat.monitor.*;
-import sun.tools.jps.Arguments;
 
 import java.util.ArrayList;
 import java.util.Iterator;

File: bistoury-agent/src/main/java/qunar/tc/bistoury/agent/AgentClient.java
Patch:
@@ -55,7 +55,7 @@ public synchronized void start() {
         if (start) {
             return;
         }
-
+        DumpFileCleaner.getInstance().start();
         refreshClient();
         startFailoverTask();
         start = true;

File: bistoury-application/bistoury-application-api/src/main/java/qunar/tc/bistoury/application/api/AppService.java
Patch:
@@ -13,4 +13,6 @@ public interface AppService {
 	Set<String> getApps(String userCode);
 
 	Application getAppInfo(String appCode);
+
+    boolean checkUserPermission(String appCode, String usercode);
 }

File: bistoury-attach-arthas/src/main/java/qunar/tc/bistoury/attach/arthas/agentInfo/AgentInfoCommand.java
Patch:
@@ -24,9 +24,10 @@
 import com.taobao.middleware.cli.annotations.Name;
 import com.taobao.middleware.logger.Logger;
 import qunar.tc.bistoury.attach.arthas.util.AgentConfig;
+import qunar.tc.bistoury.attach.arthas.Util.AgentConfig;
+import qunar.tc.bistoury.attach.common.AttachJacksonSerializer;
 import qunar.tc.bistoury.attach.common.BistouryLoggger;
 import qunar.tc.bistoury.clientside.common.meta.MetaStores;
-import qunar.tc.bistoury.common.JacksonSerializer;
 import qunar.tc.bistoury.common.URLCoder;
 
 import java.util.Map;
@@ -56,7 +57,7 @@ public void setAgentInfo(final String agentInfo) {
     public void process(CommandProcess process) {
         try {
 
-            Map<String, String> info = JacksonSerializer.deSerialize(this.agentInfo, new TypeReference<Map<String, String>>() {
+            Map<String, String> info = AttachJacksonSerializer.deSerialize(this.agentInfo, new TypeReference<Map<String, String>>() {
             });
             logger.debug("receive agent info update: {}", info);
             if (config.update(info)) {

File: bistoury-attach-arthas/src/main/java/qunar/tc/bistoury/attach/arthas/debug/JarDebugCommand.java
Patch:
@@ -23,6 +23,7 @@
 import com.taobao.middleware.cli.annotations.Name;
 import com.taobao.middleware.cli.annotations.Option;
 import com.taobao.middleware.logger.Logger;
+import qunar.tc.bistoury.attach.common.AttachJacksonSerializer;
 import qunar.tc.bistoury.attach.common.BistouryLoggger;
 import qunar.tc.bistoury.common.*;
 
@@ -70,7 +71,8 @@ public void process(CommandProcess process) {
             codeResponse.setCode(-1);
             codeResponse.setMessage("获取类列表失败，" + e.getMessage());
         } finally {
-            process.write(URLCoder.encode(JacksonSerializer.serialize(typeResponse)));
+            logger.info("", "finish jar debug command, code :{}", codeResponse.getCode());
+            process.write(URLCoder.encode(AttachJacksonSerializer.serialize(typeResponse)));
             process.end();
         }
     }

File: bistoury-attach-arthas/src/main/java/qunar/tc/bistoury/attach/arthas/debug/QDebugReleaseInfoCommand.java
Patch:
@@ -22,6 +22,7 @@
 import com.taobao.middleware.cli.annotations.Argument;
 import com.taobao.middleware.cli.annotations.Name;
 import com.taobao.middleware.logger.Logger;
+import qunar.tc.bistoury.attach.common.AttachJacksonSerializer;
 import qunar.tc.bistoury.attach.common.BistouryLoggger;
 import qunar.tc.bistoury.common.*;
 
@@ -68,7 +69,7 @@ public void process(CommandProcess process) {
             codeResponse.setCode(-1);
             codeResponse.setMessage("获取项目信息失败，请检查主机上是否存在" + path + "文件");
         } finally {
-            process.write(URLCoder.encode(JacksonSerializer.serialize(typeResponse)));
+            process.write(URLCoder.encode(AttachJacksonSerializer.serialize(typeResponse)));
             process.end();
         }
     }

File: bistoury-attach-arthas/src/main/java/qunar/tc/bistoury/attach/arthas/debug/QDebugSearchCommand.java
Patch:
@@ -22,6 +22,7 @@
 import com.taobao.middleware.cli.annotations.Argument;
 import com.taobao.middleware.cli.annotations.Name;
 import com.taobao.middleware.logger.Logger;
+import qunar.tc.bistoury.attach.common.AttachJacksonSerializer;
 import qunar.tc.bistoury.attach.common.BistouryLoggger;
 import qunar.tc.bistoury.common.*;
 
@@ -76,7 +77,7 @@ public void process(CommandProcess process) {
             codeResponse.setMessage(e.getMessage());
         }
 
-        process.write(URLCoder.encode(JacksonSerializer.serialize(typeResponse)));
+        process.write(URLCoder.encode(AttachJacksonSerializer.serialize(typeResponse)));
         process.end();
     }
 }

File: bistoury-attach-arthas/src/main/java/qunar/tc/bistoury/attach/arthas/monitor/QMonitorSnapshotCommand.java
Patch:
@@ -23,12 +23,13 @@
 import com.taobao.middleware.cli.annotations.Name;
 import com.taobao.middleware.cli.annotations.Option;
 import com.taobao.middleware.logger.Logger;
+import qunar.tc.bistoury.attach.common.AttachJacksonSerializer;
 import qunar.tc.bistoury.attach.common.BistouryLoggger;
 import qunar.tc.bistoury.clientside.common.monitor.MetricsSnapshot;
 import qunar.tc.bistoury.common.BistouryConstants;
 import qunar.tc.bistoury.common.CodeProcessResponse;
-import qunar.tc.bistoury.common.JacksonSerializer;
 import qunar.tc.bistoury.common.TypeResponse;
+import qunar.tc.bistoury.common.URLCoder;
 
 /**
  * @author: leix.xie
@@ -63,7 +64,7 @@ public void process(CommandProcess process) {
             response.setCode(-1);
             response.setMessage("qmonitor snapshot get error, " + e.getClass() + ", " + e.getMessage());
         } finally {
-            process.write(JacksonSerializer.serialize(typeResponse));
+            process.write(URLCoder.encode(AttachJacksonSerializer.serialize(typeResponse)));
             process.end();
             logger.debug("finish monitor snapshot command");
         }

File: bistoury-commands/src/main/java/qunar/tc/bistoury/commands/decompiler/Decompiler.java
Patch:
@@ -49,7 +49,7 @@ public class Decompiler {
     static {
         StringBuilder sb = new StringBuilder();
         sb.append(NOTE_CHAR).append(SEPARATOR);
-        sb.append(NOTE_CHAR).append("Source code recreated from a .class file by QUNAR Agent").append(SEPARATOR);
+        sb.append(NOTE_CHAR).append("Source code recreated from a .class file by Bistoury").append(SEPARATOR);
         sb.append(NOTE_CHAR).append("(powered by Fernflower decompiler)").append(SEPARATOR);
         sb.append(NOTE_CHAR).append(SEPARATOR);
         sb.append(SEPARATOR);

File: bistoury-instrument-client/src/main/java/qunar/tc/bistoury/instrument/client/metrics/adapter/ResettableTimer.java
Patch:
@@ -21,8 +21,8 @@
 import com.codahale.metrics.Meter;
 import com.codahale.metrics.Metric;
 import com.google.common.primitives.Ints;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import com.taobao.middleware.logger.Logger;
+import qunar.tc.bistoury.attach.common.BistouryLoggger;
 
 import java.util.concurrent.TimeUnit;
 
@@ -33,7 +33,7 @@
  * Time: 下午2:02
  */
 public class ResettableTimer implements Metric {
-    private static final Logger LOG = LoggerFactory.getLogger(ResettableTimer.class);
+    private static final Logger LOG = BistouryLoggger.getLogger();
 
     public static final double P98 = 98.0;
 

File: bistoury-instrument-client/src/main/java/qunar/tc/bistoury/instrument/client/monitor/MonitorClassFileTransformer.java
Patch:
@@ -71,8 +71,8 @@ protected byte[] transform(final String className,
         try {
             final ClassReader classReader = new ClassReader(classFileBuffer.getClassBuffer(classBeingRedefined, classBytes));
             final ClassWriter classWriter = new ClassWriter(computeFlag(classReader));
-            final ClassVisitor classVisitor = new MonitorClassVisitor(new CheckClassAdapter(classWriter), source, methodName, methodDesc, line);
-            classReader.accept(classVisitor, ClassReader.SKIP_FRAMES);
+            final ClassVisitor classVisitor = new MonitorClassVisitor(new CheckClassAdapter(classWriter), methodName, methodDesc);
+            classReader.accept(classVisitor, ClassReader.EXPAND_FRAMES);
             byte[] bytes = classWriter.toByteArray();
             classFileBuffer.setClassBuffer(classBeingRedefined, bytes);
             return bytes;

File: bistoury-magic-classes/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java
Patch:
@@ -202,11 +202,11 @@ protected String getCommonSuperClass(String type1, String type2) {
     /**
      * dump class to file
      */
-    private static void dumpClassIfNecessary(String className, byte[] data, EnhancerAffect affect) {
+    public static void dumpClassIfNecessary(String className, byte[] data, EnhancerAffect affect) {
         if (!GlobalOptions.isDump) {
             return;
         }
-        final File dumpClassFile = new File("./arthas-class-dump/" + className + ".class");
+        final File dumpClassFile = new File("/tmp/bistoury-class-dump/" + className + ".class");
         final File classPath = new File(dumpClassFile.getParent());
 
         // 创建类所在的包路径

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/Connection.java
Patch:
@@ -31,5 +31,7 @@ public interface Connection {
 
     boolean isActive();
 
+    boolean isWritable();
+
     void close();
 }

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/Session.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.common.util.concurrent.ListenableFuture;
 import qunar.tc.bistoury.proxy.communicate.agent.AgentConnection;
-import qunar.tc.bistoury.proxy.communicate.ui.RequestData;
+import qunar.tc.bistoury.remoting.protocol.RequestData;
 import qunar.tc.bistoury.proxy.communicate.ui.UiConnection;
 import qunar.tc.bistoury.remoting.protocol.Datagram;
 
@@ -38,6 +38,8 @@ enum State {
 
     String getId();
 
+    boolean isSupportPause();
+
     RequestData getRequestData();
 
     AgentConnection getAgentConnection();

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/SessionManager.java
Patch:
@@ -18,8 +18,9 @@
 package qunar.tc.bistoury.proxy.communicate;
 
 import qunar.tc.bistoury.proxy.communicate.agent.AgentConnection;
-import qunar.tc.bistoury.proxy.communicate.ui.RequestData;
+import qunar.tc.bistoury.remoting.protocol.RequestData;
 import qunar.tc.bistoury.proxy.communicate.ui.UiConnection;
+import qunar.tc.bistoury.proxy.communicate.ui.command.CommunicateCommand;
 
 import java.util.Set;
 
@@ -28,7 +29,7 @@
  */
 public interface SessionManager {
 
-    Session create(RequestData requestData, AgentConnection agentConnection, UiConnection uiConnection);
+    Session create(CommunicateCommand command, RequestData requestData, AgentConnection agentConnection, UiConnection uiConnection);
 
     Session getSession(String id);
 

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/ui/DefaultUiConnectionStore.java
Patch:
@@ -17,12 +17,12 @@
 
 package qunar.tc.bistoury.proxy.communicate.ui;
 
-import com.google.common.base.Optional;
 import com.google.common.collect.Maps;
 import com.google.common.util.concurrent.MoreExecutors;
 import io.netty.channel.Channel;
 import org.springframework.stereotype.Service;
 
+import java.util.Optional;
 import java.util.concurrent.ConcurrentMap;
 
 /**
@@ -52,6 +52,6 @@ public Optional<UiConnection> getConnection(Channel channel) {
         if (connection != null) {
             return Optional.of(connection);
         }
-        return Optional.absent();
+        return Optional.empty();
     }
 }

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/ui/UiConnectionStore.java
Patch:
@@ -17,9 +17,10 @@
 
 package qunar.tc.bistoury.proxy.communicate.ui;
 
-import com.google.common.base.Optional;
 import io.netty.channel.Channel;
 
+import java.util.Optional;
+
 /**
  * @author zhenyu.nie created on 2019 2019/5/15 11:38
  */

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/ui/UiResponses.java
Patch:
@@ -71,7 +71,7 @@ public static Datagram createProcessRequestErrorResponse(RequestData requestData
     }
 
     public static Datagram createProcessRequestErrorResponse(RequestData requestData, String data) {
-        return RemotingBuilder.buildErrorResponseDatagram(ErrorCode.COMMAND_PROCESSOR_ERROR.getCode(), null);
+        return RemotingBuilder.buildErrorResponseDatagram(ErrorCode.COMMAND_PROCESSOR_ERROR.getCode(), data);
     }
 
     public static Datagram createWrongFrameResponse() {

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/ui/command/UiRequestCommand.java
Patch:
@@ -32,5 +32,7 @@ public interface UiRequestCommand {
 
     boolean supportMulti();
 
+    boolean supportPause();
+
     CommunicateCommandProcessor getProcessor();
 }

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/ui/handler/HostsValidatorHandler.java
Patch:
@@ -25,8 +25,8 @@
 import org.springframework.util.CollectionUtils;
 
 import qunar.tc.bistoury.application.api.pojo.AppServer;
-import qunar.tc.bistoury.proxy.communicate.ui.AgentServerInfo;
-import qunar.tc.bistoury.proxy.communicate.ui.RequestData;
+import qunar.tc.bistoury.remoting.protocol.AgentServerInfo;
+import qunar.tc.bistoury.remoting.protocol.RequestData;
 import qunar.tc.bistoury.proxy.communicate.ui.UiResponses;
 import qunar.tc.bistoury.proxy.util.ServerFinder;
 

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/ui/handler/RequestDecoder.java
Patch:
@@ -26,9 +26,9 @@
 import io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame;
 import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;
 import io.netty.handler.codec.http.websocketx.WebSocketFrame;
-import qunar.tc.bistoury.proxy.communicate.ui.RequestData;
+import qunar.tc.bistoury.remoting.protocol.RequestData;
 import qunar.tc.bistoury.proxy.communicate.ui.UiResponses;
-import qunar.tc.bistoury.proxy.communicate.ui.handler.encryption.RequestEncryption;
+import qunar.tc.bistoury.serverside.common.encryption.RequestEncryption;
 import qunar.tc.bistoury.remoting.protocol.CommandCode;
 
 import java.io.IOException;

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/ui/handler/commandprocessor/CommunicateCommandProcessor.java
Patch:
@@ -18,7 +18,7 @@
 package qunar.tc.bistoury.proxy.communicate.ui.handler.commandprocessor;
 
 import io.netty.channel.ChannelHandlerContext;
-import qunar.tc.bistoury.proxy.communicate.ui.RequestData;
+import qunar.tc.bistoury.remoting.protocol.RequestData;
 import qunar.tc.bistoury.remoting.protocol.Datagram;
 
 import java.util.Optional;
@@ -33,7 +33,7 @@ public interface CommunicateCommandProcessor<T> {
      * @param ctx
      * @return
      */
-    Optional<RequestData<T>> preprocessor(RequestData<String> requestData, ChannelHandlerContext ctx);
+    Optional<RequestData<T>> preprocessor(RequestData<String> requestData, ChannelHandlerContext ctx) throws Exception;
 
     /**
      * 对请求进行提前处理，将其处理为agent能够识别的协议格式

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/ui/handler/commandprocessor/processor/ArthasCommandProcessor.java
Patch:
@@ -23,7 +23,7 @@
 import com.google.common.collect.Lists;
 import org.springframework.stereotype.Service;
 import qunar.tc.bistoury.common.BistouryConstants;
-import qunar.tc.bistoury.proxy.communicate.ui.RequestData;
+import qunar.tc.bistoury.remoting.protocol.RequestData;
 import qunar.tc.bistoury.proxy.communicate.ui.handler.commandprocessor.AbstractCommand;
 import qunar.tc.bistoury.remoting.protocol.CommandCode;
 import qunar.tc.bistoury.serverside.agile.Conf;

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/ui/handler/commandprocessor/processor/HeapHistoProcessor.java
Patch:
@@ -20,7 +20,7 @@
 import com.google.common.collect.ImmutableSet;
 import org.springframework.stereotype.Service;
 import qunar.tc.bistoury.common.BistouryConstants;
-import qunar.tc.bistoury.proxy.communicate.ui.RequestData;
+import qunar.tc.bistoury.remoting.protocol.RequestData;
 import qunar.tc.bistoury.proxy.communicate.ui.handler.commandprocessor.AbstractCommand;
 import qunar.tc.bistoury.remoting.command.HeapHistoCommand;
 import qunar.tc.bistoury.remoting.protocol.CommandCode;

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/ui/handler/commandprocessor/processor/HostInfoProcessor.java
Patch:
@@ -20,7 +20,7 @@
 import com.google.common.collect.ImmutableSet;
 import org.springframework.stereotype.Service;
 import qunar.tc.bistoury.common.BistouryConstants;
-import qunar.tc.bistoury.proxy.communicate.ui.RequestData;
+import qunar.tc.bistoury.remoting.protocol.RequestData;
 import qunar.tc.bistoury.proxy.communicate.ui.handler.commandprocessor.AbstractCommand;
 import qunar.tc.bistoury.remoting.protocol.CommandCode;
 

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/ui/handler/commandprocessor/processor/QJToolsProcessor.java
Patch:
@@ -25,7 +25,7 @@
 import io.netty.channel.ChannelHandlerContext;
 import org.springframework.stereotype.Service;
 import qunar.tc.bistoury.common.BistouryConstants;
-import qunar.tc.bistoury.proxy.communicate.ui.RequestData;
+import qunar.tc.bistoury.remoting.protocol.RequestData;
 import qunar.tc.bistoury.proxy.communicate.ui.handler.commandprocessor.AbstractCommand;
 import qunar.tc.bistoury.remoting.command.MachineCommand;
 import qunar.tc.bistoury.remoting.protocol.CommandCode;

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/ui/handler/commandprocessor/processor/ThreadInfoProcessor.java
Patch:
@@ -20,7 +20,7 @@
 import com.google.common.collect.ImmutableSet;
 import org.springframework.stereotype.Service;
 import qunar.tc.bistoury.common.BistouryConstants;
-import qunar.tc.bistoury.proxy.communicate.ui.RequestData;
+import qunar.tc.bistoury.remoting.protocol.RequestData;
 import qunar.tc.bistoury.proxy.communicate.ui.handler.commandprocessor.AbstractCommand;
 import qunar.tc.bistoury.remoting.command.ThreadCommand;
 

File: bistoury-remoting/src/main/java/qunar/tc/bistoury/remoting/coder/AgentDecoder.java
Patch:
@@ -82,7 +82,7 @@ public RemotingHeader decodeHeader(ByteBuf msg) {
         RemotingHeader header = new RemotingHeader();
         header.setMagicCode(msg.readInt());
         header.setVersion(msg.readShort());
-        header.setVersion(msg.readShort());
+        header.setAgentVersion(msg.readShort());
         header.setId(PayloadHolderUtils.readString(msg));
         header.setCode(msg.readInt());
         header.setFlag(msg.readInt());

File: bistoury-remoting/src/main/java/qunar/tc/bistoury/remoting/netty/Task.java
Patch:
@@ -18,6 +18,7 @@
 package qunar.tc.bistoury.remoting.netty;
 
 import com.google.common.util.concurrent.ListenableFuture;
+import qunar.tc.bistoury.agent.common.job.ContinueResponseJob;
 
 /**
  * @author zhenyu.nie created on 2018 2018/10/9 12:11
@@ -28,7 +29,7 @@ public interface Task {
 
     long getMaxRunningMs();
 
-    ListenableFuture<Integer> execute();
+    ContinueResponseJob createJob();
 
-    void cancel();
+    ListenableFuture<Integer> getResultFuture();
 }

File: bistoury-remoting/src/main/java/qunar/tc/bistoury/remoting/protocol/AgentServerInfo.java
Patch:
@@ -15,7 +15,7 @@
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  */
 
-package qunar.tc.bistoury.proxy.communicate.ui;
+package qunar.tc.bistoury.remoting.protocol;
 
 import java.io.Serializable;
 

File: bistoury-remoting/src/main/java/qunar/tc/bistoury/remoting/protocol/ErrorCode.java
Patch:
@@ -37,7 +37,7 @@ public enum ErrorCode {
     NOT_SUPPORT_MULTI(-107, "该命令不支持多机执行"),
     LESS_VERSION(-108, "版本不支持该命令，请升级"),
     NO_HOST(-109, "请选择一台主机"),
-    COMMAND_PROCESSOR_ERROR(-110, "命令解析错误"),
+    COMMAND_PROCESSOR_ERROR(-110, "命令解析错误，请检查命令是否正确"),
     AGENT_CANNOT_CONNECT(-111, "Agent暂时无法连接"),
     HOST_VALIDATE_ERROR(-112, "主机校验失败，所选主机不属于该应用");
 

File: bistoury-remoting/src/main/java/qunar/tc/bistoury/remoting/protocol/RemotingHeader.java
Patch:
@@ -47,7 +47,7 @@ public class RemotingHeader {
     //协议版本
     public static final short PROTOCOL_VERSION = 1;
     //agent版本
-    public static final short AGENT_VERSION = 11;
+    public static final short AGENT_VERSION = 12;
 
     public static final int DEFAULT_MAGIC_CODE = 0xdec1_0ade;
 

File: bistoury-remoting/src/main/java/qunar/tc/bistoury/remoting/protocol/RequestData.java
Patch:
@@ -15,7 +15,7 @@
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  */
 
-package qunar.tc.bistoury.proxy.communicate.ui;
+package qunar.tc.bistoury.remoting.protocol;
 
 import java.util.List;
 

File: bistoury-serverside-common/src/main/java/qunar/tc/bistoury/serverside/exception/PermissionDenyException.java
Patch:
@@ -1,4 +1,4 @@
-/*
+package qunar.tc.bistoury.serverside.exception;/*
  * Copyright (C) 2019 Qunar, Inc.
  *
  * This program is free software: you can redistribute it and/or modify
@@ -15,7 +15,6 @@
  * along with this program.  If not, see <https://www.gnu.org/licenses/>.
  */
 
-package qunar.tc.bistoury.ui.exception;
 
 /**
  * @author leix.xie

File: bistoury-ui-service-impl/src/main/java/qunar/tc/bistoury/ui/security/LoginInterceptorImpl.java
Patch:
@@ -81,6 +81,7 @@ private void setLoginContext(final String userCode, HttpServletRequest request,
         loginContext.setReturnUrl(buffer.toString());
         loginContext.setRemoteIP(request.getRemoteHost());
         loginContext.setAdmin(this.userService.isAdmin(userCode));
+        loginContext.setToken(com.google.common.base.Strings.nullToEmpty(loginManager.token(request)));
         request.setAttribute(LoginContext.CONTEXT, loginContext);
     }
 

File: bistoury-ui-service-impl/src/main/java/qunar/tc/bistoury/ui/service/impl/GitRepositoryStoreServiceImpl.java
Patch:
@@ -40,7 +40,7 @@ public class GitRepositoryStoreServiceImpl implements GitRepositoryStoreService
     @PostConstruct
     public void init() {
         DynamicConfig<LocalDynamicConfig> dynamicConfig = DynamicConfigLoader.load("config.properties");
-        gitRepository = dynamicConfig.getString(GIT_KEY);
+        gitRepository = dynamicConfig.getString(GIT_KEY, "");
         gitlabRepositoryApiImpl = new GitlabRepositoryApiImpl(gitPrivateTokenService, dynamicConfig);
         githubRepositoryApiImpl = new GithubRepositoryApiImpl(gitPrivateTokenService, dynamicConfig);
     }

File: bistoury-ui-service/src/main/java/qunar/tc/bistoury/ui/exception/GlobalExceptionHandler.java
Patch:
@@ -24,6 +24,7 @@
 import org.springframework.web.bind.annotation.ResponseBody;
 import qunar.tc.bistoury.serverside.bean.ApiResult;
 import qunar.tc.bistoury.serverside.bean.ApiStatus;
+import qunar.tc.bistoury.serverside.exception.PermissionDenyException;
 import qunar.tc.bistoury.serverside.util.ResultHelper;
 
 /**

File: bistoury-ui-service/src/main/java/qunar/tc/bistoury/ui/service/LoginManager.java
Patch:
@@ -10,5 +10,7 @@ public interface LoginManager {
 
     String current(HttpServletRequest request);
 
+    String token(HttpServletRequest request);
+
     void logout(HttpServletResponse response);
 }

File: bistoury-ui-service/src/main/java/qunar/tc/bistoury/ui/service/ProxyService.java
Patch:
@@ -22,4 +22,6 @@
 public interface ProxyService {
 
     List<String> getAllProxyUrls();
+
+    List<String> getWebSocketUrl(final String agentIp);
 }

File: bistoury-agent-common/src/main/java/qunar/tc/bistoury/agent/common/ClosableProcess.java
Patch:
@@ -66,7 +66,7 @@ public void destroy() {
         JavaProcesses.remove(id);
     }
 
-    public abstract int readAndWaitFor(ResponseHandler handler) throws Exception;
+    public abstract byte[] read() throws Exception;
 
     @Override
     public void close() {

File: bistoury-agent-common/src/main/java/qunar/tc/bistoury/agent/common/pid/Jps.java
Patch:
@@ -21,9 +21,9 @@
 // (powered by Fernflower decompiler)
 //
 
+import qunar.tc.bistoury.agent.common.pid.bean.Arguments;
 import qunar.tc.bistoury.agent.common.pid.bean.Res;
 import sun.jvmstat.monitor.*;
-import sun.tools.jps.Arguments;
 
 import java.util.ArrayList;
 import java.util.Iterator;

File: bistoury-attach-arthas/src/main/java/qunar/tc/bistoury/attach/arthas/agentInfo/AgentInfoCommand.java
Patch:
@@ -24,9 +24,9 @@
 import com.taobao.middleware.cli.annotations.Name;
 import com.taobao.middleware.logger.Logger;
 import qunar.tc.bistoury.attach.arthas.Util.AgentConfig;
+import qunar.tc.bistoury.attach.common.AttachJacksonSerializer;
 import qunar.tc.bistoury.attach.common.BistouryLoggger;
 import qunar.tc.bistoury.clientside.common.meta.MetaStores;
-import qunar.tc.bistoury.common.JacksonSerializer;
 import qunar.tc.bistoury.common.URLCoder;
 
 import java.util.Map;
@@ -56,7 +56,7 @@ public void setAgentInfo(final String agentInfo) {
     public void process(CommandProcess process) {
         try {
 
-            Map<String, String> info = JacksonSerializer.deSerialize(this.agentInfo, new TypeReference<Map<String, String>>() {
+            Map<String, String> info = AttachJacksonSerializer.deSerialize(this.agentInfo, new TypeReference<Map<String, String>>() {
             });
             logger.debug("receive agent info update: {}", info);
             if (config.update(info)) {

File: bistoury-attach-arthas/src/main/java/qunar/tc/bistoury/attach/arthas/debug/JarDebugCommand.java
Patch:
@@ -23,6 +23,7 @@
 import com.taobao.middleware.cli.annotations.Name;
 import com.taobao.middleware.cli.annotations.Option;
 import com.taobao.middleware.logger.Logger;
+import qunar.tc.bistoury.attach.common.AttachJacksonSerializer;
 import qunar.tc.bistoury.attach.common.BistouryLoggger;
 import qunar.tc.bistoury.common.*;
 
@@ -70,7 +71,8 @@ public void process(CommandProcess process) {
             codeResponse.setCode(-1);
             codeResponse.setMessage("获取类列表失败，" + e.getMessage());
         } finally {
-            process.write(URLCoder.encode(JacksonSerializer.serialize(typeResponse)));
+            logger.info("", "finish jar debug command, code :{}", codeResponse.getCode());
+            process.write(URLCoder.encode(AttachJacksonSerializer.serialize(typeResponse)));
             process.end();
         }
     }

File: bistoury-attach-arthas/src/main/java/qunar/tc/bistoury/attach/arthas/debug/QDebugReleaseInfoCommand.java
Patch:
@@ -22,6 +22,7 @@
 import com.taobao.middleware.cli.annotations.Argument;
 import com.taobao.middleware.cli.annotations.Name;
 import com.taobao.middleware.logger.Logger;
+import qunar.tc.bistoury.attach.common.AttachJacksonSerializer;
 import qunar.tc.bistoury.attach.common.BistouryLoggger;
 import qunar.tc.bistoury.common.*;
 
@@ -68,7 +69,7 @@ public void process(CommandProcess process) {
             codeResponse.setCode(-1);
             codeResponse.setMessage("获取项目信息失败，请检查主机上是否存在" + path + "文件");
         } finally {
-            process.write(URLCoder.encode(JacksonSerializer.serialize(typeResponse)));
+            process.write(URLCoder.encode(AttachJacksonSerializer.serialize(typeResponse)));
             process.end();
         }
     }

File: bistoury-attach-arthas/src/main/java/qunar/tc/bistoury/attach/arthas/debug/QDebugSearchCommand.java
Patch:
@@ -22,6 +22,7 @@
 import com.taobao.middleware.cli.annotations.Argument;
 import com.taobao.middleware.cli.annotations.Name;
 import com.taobao.middleware.logger.Logger;
+import qunar.tc.bistoury.attach.common.AttachJacksonSerializer;
 import qunar.tc.bistoury.attach.common.BistouryLoggger;
 import qunar.tc.bistoury.common.*;
 
@@ -76,7 +77,7 @@ public void process(CommandProcess process) {
             codeResponse.setMessage(e.getMessage());
         }
 
-        process.write(URLCoder.encode(JacksonSerializer.serialize(typeResponse)));
+        process.write(URLCoder.encode(AttachJacksonSerializer.serialize(typeResponse)));
         process.end();
     }
 }

File: bistoury-attach-arthas/src/main/java/qunar/tc/bistoury/attach/arthas/monitor/QMonitorSnapshotCommand.java
Patch:
@@ -23,12 +23,13 @@
 import com.taobao.middleware.cli.annotations.Name;
 import com.taobao.middleware.cli.annotations.Option;
 import com.taobao.middleware.logger.Logger;
+import qunar.tc.bistoury.attach.common.AttachJacksonSerializer;
 import qunar.tc.bistoury.attach.common.BistouryLoggger;
 import qunar.tc.bistoury.clientside.common.monitor.MetricsSnapshot;
 import qunar.tc.bistoury.common.BistouryConstants;
 import qunar.tc.bistoury.common.CodeProcessResponse;
-import qunar.tc.bistoury.common.JacksonSerializer;
 import qunar.tc.bistoury.common.TypeResponse;
+import qunar.tc.bistoury.common.URLCoder;
 
 /**
  * @author: leix.xie
@@ -63,7 +64,7 @@ public void process(CommandProcess process) {
             response.setCode(-1);
             response.setMessage("qmonitor snapshot get error, " + e.getClass() + ", " + e.getMessage());
         } finally {
-            process.write(JacksonSerializer.serialize(typeResponse));
+            process.write(URLCoder.encode(AttachJacksonSerializer.serialize(typeResponse)));
             process.end();
             logger.debug("finish monitor snapshot command");
         }

File: bistoury-instrument-client/src/main/java/qunar/tc/bistoury/instrument/client/metrics/adapter/ResettableTimer.java
Patch:
@@ -21,8 +21,8 @@
 import com.codahale.metrics.Meter;
 import com.codahale.metrics.Metric;
 import com.google.common.primitives.Ints;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import com.taobao.middleware.logger.Logger;
+import qunar.tc.bistoury.attach.common.BistouryLoggger;
 
 import java.util.concurrent.TimeUnit;
 
@@ -33,7 +33,7 @@
  * Time: 下午2:02
  */
 public class ResettableTimer implements Metric {
-    private static final Logger LOG = LoggerFactory.getLogger(ResettableTimer.class);
+    private static final Logger LOG = BistouryLoggger.getLogger();
 
     public static final double P98 = 98.0;
 

File: bistoury-instrument-client/src/main/java/qunar/tc/bistoury/instrument/client/monitor/MonitorClassFileTransformer.java
Patch:
@@ -71,8 +71,8 @@ protected byte[] transform(final String className,
         try {
             final ClassReader classReader = new ClassReader(classFileBuffer.getClassBuffer(classBeingRedefined, classBytes));
             final ClassWriter classWriter = new ClassWriter(computeFlag(classReader));
-            final ClassVisitor classVisitor = new MonitorClassVisitor(new CheckClassAdapter(classWriter), source, methodName, methodDesc, line);
-            classReader.accept(classVisitor, ClassReader.SKIP_FRAMES);
+            final ClassVisitor classVisitor = new MonitorClassVisitor(new CheckClassAdapter(classWriter), methodName, methodDesc);
+            classReader.accept(classVisitor, ClassReader.EXPAND_FRAMES);
             byte[] bytes = classWriter.toByteArray();
             classFileBuffer.setClassBuffer(classBeingRedefined, bytes);
             return bytes;

File: bistoury-magic-classes/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java
Patch:
@@ -202,11 +202,11 @@ protected String getCommonSuperClass(String type1, String type2) {
     /**
      * dump class to file
      */
-    private static void dumpClassIfNecessary(String className, byte[] data, EnhancerAffect affect) {
+    public static void dumpClassIfNecessary(String className, byte[] data, EnhancerAffect affect) {
         if (!GlobalOptions.isDump) {
             return;
         }
-        final File dumpClassFile = new File("./arthas-class-dump/" + className + ".class");
+        final File dumpClassFile = new File("./bistoury-class-dump/" + className + ".class");
         final File classPath = new File(dumpClassFile.getParent());
 
         // 创建类所在的包路径

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/Connection.java
Patch:
@@ -31,5 +31,7 @@ public interface Connection {
 
     boolean isActive();
 
+    boolean isWritable();
+
     void close();
 }

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/Session.java
Patch:
@@ -38,6 +38,8 @@ enum State {
 
     String getId();
 
+    boolean isSupportPause();
+
     RequestData getRequestData();
 
     AgentConnection getAgentConnection();

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/SessionManager.java
Patch:
@@ -20,6 +20,7 @@
 import qunar.tc.bistoury.proxy.communicate.agent.AgentConnection;
 import qunar.tc.bistoury.proxy.communicate.ui.RequestData;
 import qunar.tc.bistoury.proxy.communicate.ui.UiConnection;
+import qunar.tc.bistoury.proxy.communicate.ui.command.CommunicateCommand;
 
 import java.util.Set;
 
@@ -28,7 +29,7 @@
  */
 public interface SessionManager {
 
-    Session create(RequestData requestData, AgentConnection agentConnection, UiConnection uiConnection);
+    Session create(CommunicateCommand command, RequestData requestData, AgentConnection agentConnection, UiConnection uiConnection);
 
     Session getSession(String id);
 

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/ui/DefaultUiConnectionStore.java
Patch:
@@ -17,12 +17,12 @@
 
 package qunar.tc.bistoury.proxy.communicate.ui;
 
-import com.google.common.base.Optional;
 import com.google.common.collect.Maps;
 import com.google.common.util.concurrent.MoreExecutors;
 import io.netty.channel.Channel;
 import org.springframework.stereotype.Service;
 
+import java.util.Optional;
 import java.util.concurrent.ConcurrentMap;
 
 /**
@@ -52,6 +52,6 @@ public Optional<UiConnection> getConnection(Channel channel) {
         if (connection != null) {
             return Optional.of(connection);
         }
-        return Optional.absent();
+        return Optional.empty();
     }
 }

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/ui/UiConnectionStore.java
Patch:
@@ -17,9 +17,10 @@
 
 package qunar.tc.bistoury.proxy.communicate.ui;
 
-import com.google.common.base.Optional;
 import io.netty.channel.Channel;
 
+import java.util.Optional;
+
 /**
  * @author zhenyu.nie created on 2019 2019/5/15 11:38
  */

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/ui/command/UiRequestCommand.java
Patch:
@@ -32,5 +32,7 @@ public interface UiRequestCommand {
 
     boolean supportMulti();
 
+    boolean supportPause();
+
     CommunicateCommandProcessor getProcessor();
 }

File: bistoury-remoting/src/main/java/qunar/tc/bistoury/remoting/netty/Task.java
Patch:
@@ -18,6 +18,7 @@
 package qunar.tc.bistoury.remoting.netty;
 
 import com.google.common.util.concurrent.ListenableFuture;
+import qunar.tc.bistoury.agent.common.job.ContinueResponseJob;
 
 /**
  * @author zhenyu.nie created on 2018 2018/10/9 12:11
@@ -28,7 +29,7 @@ public interface Task {
 
     long getMaxRunningMs();
 
-    ListenableFuture<Integer> execute();
+    ContinueResponseJob createJob();
 
-    void cancel();
+    ListenableFuture<Integer> getResultFuture();
 }

File: bistoury-remoting/src/main/java/qunar/tc/bistoury/remoting/protocol/ErrorCode.java
Patch:
@@ -37,7 +37,7 @@ public enum ErrorCode {
     NOT_SUPPORT_MULTI(-107, "该命令不支持多机执行"),
     LESS_VERSION(-108, "版本不支持该命令，请升级"),
     NO_HOST(-109, "请选择一台主机"),
-    COMMAND_PROCESSOR_ERROR(-110, "命令解析错误"),
+    COMMAND_PROCESSOR_ERROR(-110, "命令解析错误，请检查命令是否正确"),
     AGENT_CANNOT_CONNECT(-111, "Agent暂时无法连接"),
     HOST_VALIDATE_ERROR(-112, "主机校验失败，所选主机不属于该应用");
 

File: bistoury-remoting/src/main/java/qunar/tc/bistoury/remoting/protocol/RemotingHeader.java
Patch:
@@ -47,7 +47,7 @@ public class RemotingHeader {
     //协议版本
     public static final short PROTOCOL_VERSION = 1;
     //agent版本
-    public static final short AGENT_VERSION = 11;
+    public static final short AGENT_VERSION = 12;
 
     public static final int DEFAULT_MAGIC_CODE = 0xdec1_0ade;
 

File: bistoury-ui-service-impl/src/main/java/qunar/tc/bistoury/ui/git/GithubRepositoryApiImpl.java
Patch:
@@ -58,7 +58,7 @@ public class GithubRepositoryApiImpl implements GitRepositoryApi {
     public GithubRepositoryApiImpl(GitPrivateTokenService privateTokenService, DynamicConfig config) {
         this.privateTokenService = privateTokenService;
         filePathFormat = config.getString("file.path.format", "{0}src/main/java/{1}.java");
-        gitEndPoint = config.getString("git.endpoint");
+        gitEndPoint = config.getString("git.endpoint", "");
     }
 
     @Override

File: bistoury-ui-service-impl/src/main/java/qunar/tc/bistoury/ui/git/GitlabRepositoryApiImpl.java
Patch:
@@ -52,7 +52,7 @@ public class GitlabRepositoryApiImpl implements GitRepositoryApi {
     public GitlabRepositoryApiImpl(GitPrivateTokenService privateTokenService, DynamicConfig config) {
         this.gitPrivateTokenService = privateTokenService;
         filePathFormat = config.getString("file.path.format", "{0}src/main/java/{1}.java");
-        gitEndPoint = config.getString("git.endpoint");
+        gitEndPoint = config.getString("git.endpoint", "");
     }
 
     @Override

File: bistoury-ui-service-impl/src/main/java/qunar/tc/bistoury/ui/service/impl/DefaultJarFileStore.java
Patch:
@@ -89,7 +89,7 @@ public void init() {
 
         DynamicConfig<LocalDynamicConfig> dynamicConfig = DynamicConfigLoader.load("config.properties");
         dynamicConfig.addListener(config -> {
-            mavenHost = config.getString("maven.nexus.url");
+            mavenHost = config.getString("maven.nexus.url", "");
             jarGuaranteePeriodDays = config.getInt("jar.guarantee.period.days", 2);
         });
 

File: bistoury-ui-service-impl/src/main/java/qunar/tc/bistoury/ui/service/impl/GitRepositoryStoreServiceImpl.java
Patch:
@@ -40,7 +40,7 @@ public class GitRepositoryStoreServiceImpl implements GitRepositoryStoreService
     @PostConstruct
     public void init() {
         DynamicConfig<LocalDynamicConfig> dynamicConfig = DynamicConfigLoader.load("config.properties");
-        gitRepository = dynamicConfig.getString(GIT_KEY);
+        gitRepository = dynamicConfig.getString(GIT_KEY, "");
         gitlabRepositoryApiImpl = new GitlabRepositoryApiImpl(gitPrivateTokenService, dynamicConfig);
         githubRepositoryApiImpl = new GithubRepositoryApiImpl(gitPrivateTokenService, dynamicConfig);
     }

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/ui/handler/commandprocessor/processor/ProfilerStateProcessor.java
Patch:
@@ -70,7 +70,9 @@ public Datagram prepareResponse(Datagram datagram) {
     public static final String ERROR_STATUS = "error";
 
     private void changeDbStatus(String type, String status, String profilerId) {
-        if (ERROR_STATUS.equals(status) || FINISH_STATUS.equals(status)) {
+        if (ERROR_STATUS.equals(status)) {
+            profilerManager.stopWithError(ERROR_STATUS);
+        } else if (FINISH_STATUS.equals(status)) {
             profilerManager.stop(profilerId);
             return;
         }

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/service/profiler/ProfilerManager.java
Patch:
@@ -16,4 +16,6 @@ public interface ProfilerManager {
     void start(String profilerId);
 
     void stop(String profilerId);
+
+    void stopWithError(String profilerId);
 }

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/service/profiler/ProfilerService.java
Patch:
@@ -16,4 +16,6 @@ public interface ProfilerService {
     Profiler getProfilerRecord(String profilerId);
 
     void stopProfiler(String profilesId);
+
+    void stopWithError(String profilerId);
 }

File: bistoury-serverside-common/src/main/java/qunar/tc/bistoury/serverside/bean/Profiler.java
Patch:
@@ -134,7 +134,7 @@ public void setMode(Mode mode) {
 
     public enum State {
 
-        start(0), stop(1), ready(2), analyzed(3);
+        start(0), stop(1), ready(2), analyzed(3), error(4);
 
         public final int code;
 

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/WritableListener.java
Patch:
@@ -3,7 +3,7 @@
 /**
  * @author zhenyu.nie created on 2019 2019/10/31 15:30
  */
-public interface WrittableListener {
+public interface WritableListener {
 
     void onChange(boolean writable);
 }

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/ui/UiConnection.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.netty.channel.Channel;
 import qunar.tc.bistoury.proxy.communicate.Connection;
-import qunar.tc.bistoury.proxy.communicate.WrittableListener;
+import qunar.tc.bistoury.proxy.communicate.WritableListener;
 
 /**
  * @author zhenyu.nie created on 2019 2019/5/13 14:18
@@ -30,7 +30,7 @@ public interface UiConnection extends Connection {
 
     void setWritable(boolean writable);
 
-    void addWritableListener(WrittableListener listener);
+    void addWritableListener(WritableListener listener);
 
-    void removeWritableListener(WrittableListener listener);
+    void removeWritableListener(WritableListener listener);
 }

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/ui/handler/UiRequestHandler.java
Patch:
@@ -27,7 +27,7 @@
 import org.slf4j.LoggerFactory;
 import qunar.tc.bistoury.proxy.communicate.Session;
 import qunar.tc.bistoury.proxy.communicate.SessionManager;
-import qunar.tc.bistoury.proxy.communicate.WrittableListener;
+import qunar.tc.bistoury.proxy.communicate.WritableListener;
 import qunar.tc.bistoury.proxy.communicate.agent.AgentConnection;
 import qunar.tc.bistoury.proxy.communicate.agent.AgentConnectionStore;
 import qunar.tc.bistoury.proxy.communicate.ui.UiConnection;
@@ -219,7 +219,7 @@ private Session sendMessage(CommunicateCommand command, RequestData requestData,
         return session;
     }
 
-    private static class UiWritableListener implements WrittableListener {
+    private static class UiWritableListener implements WritableListener {
 
         private final Session session;
 

File: bistoury-commands/src/main/java/qunar/tc/bistoury/commands/arthas/telnet/Telnet.java
Patch:
@@ -60,6 +60,9 @@ public Telnet(TelnetClient client) throws IOException {
     }
 
     public void write(String command) throws Exception {
+        if (command.getBytes(Charsets.UTF_8).length > 999) {
+            throw new RuntimeException("the command length is too long，the max length is 999 bytes");
+        }
         out.write(command);
         out.newLine();
         out.flush();

File: bistoury-magic-classes/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java
Patch:
@@ -202,11 +202,11 @@ protected String getCommonSuperClass(String type1, String type2) {
     /**
      * dump class to file
      */
-    private static void dumpClassIfNecessary(String className, byte[] data, EnhancerAffect affect) {
+    public static void dumpClassIfNecessary(String className, byte[] data, EnhancerAffect affect) {
         if (!GlobalOptions.isDump) {
             return;
         }
-        final File dumpClassFile = new File("./arthas-class-dump/" + className + ".class");
+        final File dumpClassFile = new File("./bistoury-class-dump/" + className + ".class");
         final File classPath = new File(dumpClassFile.getParent());
 
         // 创建类所在的包路径

File: bistoury-attach-arthas/src/main/java/qunar/tc/bistoury/attach/arthas/monitor/QMonitorSnapshotCommand.java
Patch:
@@ -29,6 +29,7 @@
 import qunar.tc.bistoury.common.BistouryConstants;
 import qunar.tc.bistoury.common.CodeProcessResponse;
 import qunar.tc.bistoury.common.TypeResponse;
+import qunar.tc.bistoury.common.URLCoder;
 
 /**
  * @author: leix.xie
@@ -63,7 +64,7 @@ public void process(CommandProcess process) {
             response.setCode(-1);
             response.setMessage("qmonitor snapshot get error, " + e.getClass() + ", " + e.getMessage());
         } finally {
-            process.write(AttachJacksonSerializer.serialize(typeResponse));
+            process.write(URLCoder.encode(AttachJacksonSerializer.serialize(typeResponse)));
             process.end();
             logger.debug("finish monitor snapshot command");
         }

File: bistoury-application/bistoury-application-mysql/src/main/java/qunar/tc/bistoury/application/mysql/dao/impl/AppServerDaoImpl.java
Patch:
@@ -43,7 +43,7 @@ public class AppServerDaoImpl implements AppServerDao {
 
     private static final String SELECT_APP_SERVER_BY_SERVER_ID = "select server_id,ip,port,host,log_dir,room,app_code,auto_jstack_enable,auto_jmap_histo_enable from bistoury_server where server_id=?";
 
-    private static final String INSERT_APP_SERVER = "insert ignore into bistoury_server (server_id,ip,port,host,log_dir,room,app_code,auto_jstack_enable,auto_jmap_histo_enable) value (?,?,?,?,?,?,?,?,?);";
+    private static final String INSERT_APP_SERVER = "insert ignore into bistoury_server (server_id,ip,port,host,log_dir,room,app_code,auto_jstack_enable,auto_jmap_histo_enable) values (?,?,?,?,?,?,?,?,?);";
 
     private static final String DELETE_APP_SERVER_BY_IP_PORT = "delete from bistoury_server where ip=?";
 

File: bistoury-application/bistoury-application-mysql/src/main/java/qunar/tc/bistoury/application/mysql/dao/impl/AppServerDaoImpl.java
Patch:
@@ -43,7 +43,7 @@ public class AppServerDaoImpl implements AppServerDao {
 
     private static final String SELECT_APP_SERVER_BY_SERVER_ID = "select server_id,ip,port,host,log_dir,room,app_code,auto_jstack_enable,auto_jmap_histo_enable from bistoury_server where server_id=?";
 
-    private static final String INSERT_APP_SERVER = "insert ignore into bistoury_server (server_id,ip,port,host,log_dir,room,app_code,auto_jstack_enable,auto_jmap_histo_enable) value (?,?,?,?,?,?,?,?,?);";
+    private static final String INSERT_APP_SERVER = "insert ignore into bistoury_server (server_id,ip,port,host,log_dir,room,app_code,auto_jstack_enable,auto_jmap_histo_enable) values (?,?,?,?,?,?,?,?,?);";
 
     private static final String DELETE_APP_SERVER_BY_IP_PORT = "delete from bistoury_server where ip=?";
 

File: bistoury-common/src/main/java/qunar/tc/bistoury/common/AsyncHttpClientHolder.java
Patch:
@@ -38,8 +38,8 @@ public class AsyncHttpClientHolder {
 
     private static final AsyncHttpClient INSTANCE = initClient();
 
-    private static final int CONN_TIMEOUT = 1000;
-    private static final int REQUEST_TIMEOUT = 2000;
+    private static final int CONN_TIMEOUT = 2000;
+    private static final int REQUEST_TIMEOUT = 3000;
     private static final int READ_TIMEOUT = Integer.MAX_VALUE;
 
     private static final int BOSS_COUNT = 1;

File: bistoury-common/src/main/java/qunar/tc/bistoury/common/BistouryConstants.java
Patch:
@@ -56,7 +56,7 @@ public class BistouryConstants {
     public static final String SPY_CLASSNAME = "qunar.tc.bistoury.instrument.spy.BistourySpys1";
 
     // todo: 先这么写吧
-    public static final String CURRENT_VERSION = "2.0.5";
+    public static final String CURRENT_VERSION = "2.0.6";
 
     public static final String BISTOURY_VERSION_LINE_PREFIX = "bistoury version:";
 

File: bistoury-instrument-agent/src/main/java/qunar/tc/bistoury/instrument/agent/AgentBootstrap2.java
Patch:
@@ -325,6 +325,6 @@ private static void bind(Instrumentation inst, ClassLoader agentLoader, String a
                 throw e;
             }
         }
-        ps.println("Arthas server already bind.");
+        ps.println("Bistoury server already bind.");
     }
 }

File: bistoury-ui-service-impl/src/main/java/qunar/tc/bistoury/ui/service/impl/GitPrivateTokenServiceImpl.java
Patch:
@@ -24,15 +24,15 @@
 import qunar.tc.bistoury.ui.dao.GitlabPrivateTokenDao;
 import qunar.tc.bistoury.ui.model.PrivateToken;
 import qunar.tc.bistoury.ui.service.AESCryptService;
-import qunar.tc.bistoury.ui.service.GitlabPrivateTokenService;
+import qunar.tc.bistoury.ui.service.GitPrivateTokenService;
 
 import java.util.Optional;
 
 /**
  * @author keli.wang
  */
 @Service
-public class GitlabPrivateTokenServiceImpl implements GitlabPrivateTokenService {
+public class GitPrivateTokenServiceImpl implements GitPrivateTokenService {
 
     @Autowired
     private GitlabPrivateTokenDao gitlabPrivateTokenDao;

File: bistoury-ui-service/src/main/java/qunar/tc/bistoury/ui/service/GitPrivateTokenService.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * @author keli.wang
  */
-public interface GitlabPrivateTokenService {
+public interface GitPrivateTokenService {
     int saveToken(final String username, final String privateToken);
 
     Optional<PrivateToken> queryToken(String userCode);

File: bistoury-common/src/main/java/qunar/tc/bistoury/common/AsyncHttpClientHolder.java
Patch:
@@ -38,8 +38,8 @@ public class AsyncHttpClientHolder {
 
     private static final AsyncHttpClient INSTANCE = initClient();
 
-    private static final int CONN_TIMEOUT = 1000;
-    private static final int REQUEST_TIMEOUT = 2000;
+    private static final int CONN_TIMEOUT = 2000;
+    private static final int REQUEST_TIMEOUT = 3000;
     private static final int READ_TIMEOUT = Integer.MAX_VALUE;
 
     private static final int BOSS_COUNT = 1;

File: bistoury-instrument-agent/src/main/java/qunar/tc/bistoury/instrument/agent/AgentBootstrap2.java
Patch:
@@ -325,6 +325,6 @@ private static void bind(Instrumentation inst, ClassLoader agentLoader, String a
                 throw e;
             }
         }
-        ps.println("Arthas server already bind.");
+        ps.println("Bistoury server already bind.");
     }
 }

File: bistoury-ui-service-impl/src/main/java/qunar/tc/bistoury/ui/service/impl/GitPrivateTokenServiceImpl.java
Patch:
@@ -24,15 +24,15 @@
 import qunar.tc.bistoury.ui.dao.GitlabPrivateTokenDao;
 import qunar.tc.bistoury.ui.model.PrivateToken;
 import qunar.tc.bistoury.ui.service.AESCryptService;
-import qunar.tc.bistoury.ui.service.GitlabPrivateTokenService;
+import qunar.tc.bistoury.ui.service.GitPrivateTokenService;
 
 import java.util.Optional;
 
 /**
  * @author keli.wang
  */
 @Service
-public class GitlabPrivateTokenServiceImpl implements GitlabPrivateTokenService {
+public class GitPrivateTokenServiceImpl implements GitPrivateTokenService {
 
     @Autowired
     private GitlabPrivateTokenDao gitlabPrivateTokenDao;

File: bistoury-ui-service/src/main/java/qunar/tc/bistoury/ui/service/GitPrivateTokenService.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * @author keli.wang
  */
-public interface GitlabPrivateTokenService {
+public interface GitPrivateTokenService {
     int saveToken(final String username, final String privateToken);
 
     Optional<PrivateToken> queryToken(String userCode);

File: bistoury-commands/src/main/java/qunar/tc/bistoury/commands/decompiler/Decompiler.java
Patch:
@@ -26,6 +26,7 @@
 
 import java.io.File;
 import java.io.InputStream;
+import java.io.UnsupportedEncodingException;
 import java.net.URLDecoder;
 import java.util.HashMap;
 import java.util.Map;
@@ -83,8 +84,8 @@ public void addSource(File source) {
         engine.addSource(source);
     }
 
-    public void addStream(InputStream in, final String filename, final String absolutePath) {
-        engine.addStream(in, filename, URLDecoder.decode(absolutePath));
+    public void addStream(InputStream in, final String filename, final String absolutePath) throws UnsupportedEncodingException {
+        engine.addStream(in, filename, URLDecoder.decode(absolutePath, "UTF-8"));
     }
 
     public void addLibrary(File library) {

File: bistoury-common/src/main/java/qunar/tc/bistoury/common/BistouryConstants.java
Patch:
@@ -56,7 +56,7 @@ public class BistouryConstants {
     public static final String SPY_CLASSNAME = "qunar.tc.bistoury.instrument.spy.BistourySpys1";
 
     // todo: 先这么写吧
-    public static final String CURRENT_VERSION = "2.0.4";
+    public static final String CURRENT_VERSION = "2.0.5";
 
     public static final String BISTOURY_VERSION_LINE_PREFIX = "bistoury version:";
 

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/code/InstructionSequence.java
Patch:
@@ -30,6 +30,7 @@ protected InstructionSequence(VBStyleCollection<Instruction, Integer> collinstr)
     // *****************************************************************************
 
     // to nbe overwritten
+    @Override
     public InstructionSequence clone() {
         return null;
     }

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/code/SimpleInstructionSequence.java
Patch:
@@ -12,6 +12,7 @@ public SimpleInstructionSequence(VBStyleCollection<Instruction, Integer> collins
         super(collinstr);
     }
 
+    @Override
     public SimpleInstructionSequence clone() {
         SimpleInstructionSequence newseq = new SimpleInstructionSequence(collinstr.clone());
         newseq.setPointer(this.getPointer());

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/code/cfg/BasicBlock.java
Patch:
@@ -159,6 +159,7 @@ public List<Integer> getInstrOldOffsets() {
         return instrOldOffsets;
     }
 
+    @Override
     public List<? extends IGraphNode> getPredecessors() {
         List<BasicBlock> lst = new ArrayList<>(preds);
         lst.addAll(predExceptions);

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/code/cfg/ControlFlowGraph.java
Patch:
@@ -742,7 +742,7 @@ public List<BasicBlock> getReversePostOrder() {
         return res;
     }
 
-    private static void addToReversePostOrderListIterative(BasicBlock root, List<BasicBlock> lst) {
+    private static void addToReversePostOrderListIterative(BasicBlock root, List<? super BasicBlock> lst) {
 
         LinkedList<BasicBlock> stackNode = new LinkedList<>();
         LinkedList<Integer> stackIndex = new LinkedList<>();

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/main/AssertProcessor.java
Patch:
@@ -314,14 +314,13 @@ private static boolean isAssertionField(Exprent exprent, String classname, Strin
                             key.equals(InterpreterUtil.makeUniqueKey(fdparam.getName(), fdparam.getDescriptor().descriptorString));
                 }
             }
-            return false;
         } else {
             if (exprent.type == Exprent.EXPRENT_FIELD) {
                 FieldExprent fdparam = (FieldExprent) exprent;
                 return classname.equals(fdparam.getClassname()) &&
                         key.equals(InterpreterUtil.makeUniqueKey(fdparam.getName(), fdparam.getDescriptor().descriptorString));
             }
-            return false;
         }
+        return false;
     }
 }

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/main/ClassReference14Processor.java
Patch:
@@ -73,7 +73,7 @@ public static void processClassReferences(ClassesProcessor.ClassNode node) {
         }
     }
 
-    private static void processClassRec(ClassesProcessor.ClassNode node, final Map<ClassWrapper, MethodWrapper> mapClassMeths, final Set<ClassWrapper> setFound) {
+    private static void processClassRec(ClassesProcessor.ClassNode node, final Map<ClassWrapper, MethodWrapper> mapClassMeths, final Set<? super ClassWrapper> setFound) {
         ClassWrapper wrapper = node.getWrapper();
 
         // search code

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/main/decompiler/ConsoleDecompiler.java
Patch:
@@ -82,7 +82,7 @@ public static void main(String[] args) {
     }
 
     @SuppressWarnings("UseOfSystemOutOrSystemErr")
-    private static void addPath(List<File> list, String path) {
+    private static void addPath(List<? super File> list, String path) {
         File file = new File(path);
         if (file.exists()) {
             list.add(file);
@@ -171,7 +171,7 @@ public void copyFile(String source, String path, String entryName) {
     @Override
     public void saveClassFile(String path, String qualifiedName, String entryName, String content, int[] mapping) {
         File file = new File(getAbsolutePath(path), entryName);
-        try (Writer out = new OutputStreamWriter(new FileOutputStream(file), "UTF8")) {
+        try (Writer out = new OutputStreamWriter(new FileOutputStream(file), StandardCharsets.UTF_8)) {
             out.write(content);
         } catch (IOException ex) {
             DecompilerContext.getLogger().writeMessage("Cannot write class file " + file, ex);
@@ -187,7 +187,6 @@ public void createArchive(String path, String archiveName, Manifest manifest) {
             }
 
             FileOutputStream fileStream = new FileOutputStream(file);
-            @SuppressWarnings("IOResourceOpenedButNotSafelyClosed")
             ZipOutputStream zipStream = manifest != null ? new JarOutputStream(fileStream, manifest) : new ZipOutputStream(fileStream);
             mapArchiveStreams.put(file.getPath(), zipStream);
         } catch (IOException ex) {

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/modules/decompiler/ExprentStack.java
Patch:
@@ -14,11 +14,13 @@ public ExprentStack(ListStack<Exprent> list) {
         pointer = list.getPointer();
     }
 
+    @Override
     public Exprent pop() {
 
         return this.remove(--pointer);
     }
 
+    @Override
     public ExprentStack clone() {
         return new ExprentStack(this);
     }

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/modules/decompiler/StackVarsProcessor.java
Patch:
@@ -511,7 +511,7 @@ private static Object[] iterateChildExprent(Exprent exprent,
         return new Object[]{null, changed, false};
     }
 
-    private static boolean getUsedVersions(SSAUConstructorSparseEx ssa, VarVersionPair var, List<VarVersionNode> res) {
+    private static boolean getUsedVersions(SSAUConstructorSparseEx ssa, VarVersionPair var, List<? super VarVersionNode> res) {
         VarVersionsGraph ssuversions = ssa.getSsuversions();
         VarVersionNode varnode = ssuversions.nodes.getWithKey(var);
 

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/modules/decompiler/StrongConnectivityHelper.java
Patch:
@@ -84,7 +84,7 @@ private void visit(Statement stat) {
         }
     }
 
-    public static boolean isExitComponent(List<Statement> lst) {
+    public static boolean isExitComponent(List<? extends Statement> lst) {
         Set<Statement> set = new HashSet<>();
         for (Statement stat : lst) {
             set.addAll(stat.getNeighbours(StatEdge.TYPE_REGULAR, Statement.DIRECTION_FORWARD));
@@ -94,7 +94,7 @@ public static boolean isExitComponent(List<Statement> lst) {
         return (set.size() == 0);
     }
 
-    public static List<Statement> getExitReps(List<List<Statement>> lst) {
+    public static List<Statement> getExitReps(List<? extends List<Statement>> lst) {
         List<Statement> res = new ArrayList<>();
 
         for (List<Statement> comp : lst) {

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/modules/decompiler/decompose/DominatorTreeExceptionFilter.java
Patch:
@@ -141,8 +141,9 @@ private void buildFilter(Integer id) {
                         if (!range.contains(childid)) {
                             exit = childid;
                         } else {
-                            // exit = map.containsKey(handler)?-1:mapChild.get(handler); FIXME: Eclipse bug?
-                            exit = map.containsKey(handler) ? -1 : mapChild.get(handler);
+                            // after replacing 'new Integer(-1)' with '-1' Eclipse throws a NullPointerException on the following line
+                            // could be a bug in Eclipse or some obscure specification glitch, FIXME: needs further investigation
+                            exit = map.containsKey(handler) ? new Integer(-1) : mapChild.get(handler);
                         }
 
                         if (exit != null) {

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/modules/decompiler/decompose/IGraphNode.java
Patch:
@@ -5,5 +5,5 @@
 
 public interface IGraphNode {
 
-  List<? extends IGraphNode> getPredecessors();
+    List<? extends IGraphNode> getPredecessors();
 }

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/modules/decompiler/deobfuscator/IrreducibleCFGDeobfuscator.java
Patch:
@@ -16,11 +16,11 @@ public class IrreducibleCFGDeobfuscator {
     public static boolean isStatementIrreducible(Statement statement) {
 
         class Node {
-            public Integer id;
+            public final Integer id;
             public final Set<Node> preds = new HashSet<>();
             public final Set<Node> succs = new HashSet<>();
 
-            public Node(Integer id) {
+            Node(Integer id) {
                 this.id = id;
             }
         }

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/modules/decompiler/exps/AnnotationExprent.java
Patch:
@@ -18,9 +18,9 @@ public class AnnotationExprent extends Exprent {
 
     private final String className;
     private final List<String> parNames;
-    private final List<Exprent> parValues;
+    private final List<? extends Exprent> parValues;
 
-    public AnnotationExprent(String className, List<String> parNames, List<Exprent> parValues) {
+    public AnnotationExprent(String className, List<String> parNames, List<? extends Exprent> parValues) {
         super(EXPRENT_ANNOTATION);
         this.className = className;
         this.parNames = parNames;

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/modules/decompiler/exps/AssertExprent.java
Patch:
@@ -10,9 +10,9 @@
 
 public class AssertExprent extends Exprent {
 
-    private final List<Exprent> parameters;
+    private final List<? extends Exprent> parameters;
 
-    public AssertExprent(List<Exprent> parameters) {
+    public AssertExprent(List<? extends Exprent> parameters) {
         super(EXPRENT_ASSERT);
         this.parameters = parameters;
     }

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/modules/decompiler/exps/ConstExprent.java
Patch:
@@ -88,9 +88,10 @@ public VarType getExprType() {
 
     @Override
     public int getExprentUse() {
-        return MULTIPLE_USES | SIDE_EFFECTS_FREE;
+        return Exprent.MULTIPLE_USES | Exprent.SIDE_EFFECTS_FREE;
     }
 
+    @Override
     public List<Exprent> getAllExprents() {
         return new ArrayList<>();
     }

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/modules/decompiler/exps/ExitExprent.java
Patch:
@@ -11,6 +11,7 @@
 import qunar.tc.decompiler.modules.decompiler.ExprProcessor;
 import qunar.tc.decompiler.modules.decompiler.vars.CheckTypesResult;
 import qunar.tc.decompiler.struct.attr.StructExceptionsAttribute;
+import qunar.tc.decompiler.struct.attr.StructGeneralAttribute;
 import qunar.tc.decompiler.struct.gen.VarType;
 import qunar.tc.decompiler.struct.match.IMatchable;
 import qunar.tc.decompiler.struct.match.MatchEngine;
@@ -84,7 +85,7 @@ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) {
             ClassesProcessor.ClassNode node = ((ClassesProcessor.ClassNode) DecompilerContext.getProperty(DecompilerContext.CURRENT_CLASS_NODE));
 
             if (method != null && node != null) {
-                StructExceptionsAttribute attr = (StructExceptionsAttribute) method.methodStruct.getAttribute("Exceptions");
+                StructExceptionsAttribute attr = method.methodStruct.getAttribute(StructGeneralAttribute.ATTRIBUTE_EXCEPTIONS);
 
                 if (attr != null) {
                     String classname = null;

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/modules/decompiler/exps/Exprent.java
Patch:
@@ -12,6 +12,7 @@
 import qunar.tc.decompiler.struct.match.IMatchable;
 import qunar.tc.decompiler.struct.match.MatchEngine;
 import qunar.tc.decompiler.struct.match.MatchNode;
+import qunar.tc.decompiler.struct.match.MatchNode.RuleValue;
 import qunar.tc.decompiler.util.TextBuffer;
 
 import java.util.Collection;
@@ -159,7 +160,7 @@ public boolean match(MatchNode matchNode, MatchEngine engine) {
             return false;
         }
 
-        for (Entry<MatchProperties, MatchNode.RuleValue> rule : matchNode.getRules().entrySet()) {
+        for (Entry<MatchProperties, RuleValue> rule : matchNode.getRules().entrySet()) {
             MatchProperties key = rule.getKey();
             if (key == MatchProperties.EXPRENT_TYPE && this.type != (Integer) rule.getValue().value) {
                 return false;

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/modules/decompiler/exps/FieldExprent.java
Patch:
@@ -4,7 +4,7 @@
 package qunar.tc.decompiler.modules.decompiler.exps;
 
 import qunar.tc.decompiler.code.CodeConstants;
-import qunar.tc.decompiler.main.ClassesProcessor;
+import qunar.tc.decompiler.main.ClassesProcessor.ClassNode;
 import qunar.tc.decompiler.main.DecompilerContext;
 import qunar.tc.decompiler.main.collectors.BytecodeMappingTracer;
 import qunar.tc.decompiler.main.rels.MethodWrapper;
@@ -53,7 +53,7 @@ public VarType getExprType() {
 
     @Override
     public int getExprentUse() {
-        return instance == null ? Exprent.MULTIPLE_USES : instance.getExprentUse() & Exprent.MULTIPLE_USES;
+        return 0; // multiple references to a field considered dangerous in a multithreaded environment, thus no Exprent.MULTIPLE_USES set here
     }
 
     @Override
@@ -87,7 +87,7 @@ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) {
         TextBuffer buf = new TextBuffer();
 
         if (isStatic) {
-            ClassesProcessor.ClassNode node = (ClassesProcessor.ClassNode) DecompilerContext.getProperty(DecompilerContext.CURRENT_CLASS_NODE);
+            ClassNode node = (ClassNode) DecompilerContext.getProperty(DecompilerContext.CURRENT_CLASS_NODE);
             if (node == null || !classname.equals(node.classStruct.qualifiedName) || isAmbiguous()) {
                 buf.append(DecompilerContext.getImportCollector().getShortNameInClassContext(ExprProcessor.buildJavaClassName(classname)));
                 buf.append(".");

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/modules/decompiler/sforms/DirectGraph.java
Patch:
@@ -39,7 +39,7 @@ public void sortReversePostOrder() {
         }
     }
 
-    private static void addToReversePostOrderListIterative(DirectNode root, List<DirectNode> lst) {
+    private static void addToReversePostOrderListIterative(DirectNode root, List<? super DirectNode> lst) {
 
         LinkedList<DirectNode> stackNode = new LinkedList<>();
         LinkedList<Integer> stackIndex = new LinkedList<>();

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/modules/decompiler/sforms/SSAConstructorSparseEx.java
Patch:
@@ -6,6 +6,7 @@
 import qunar.tc.decompiler.modules.decompiler.exps.Exprent;
 import qunar.tc.decompiler.modules.decompiler.exps.FunctionExprent;
 import qunar.tc.decompiler.modules.decompiler.exps.VarExprent;
+import qunar.tc.decompiler.modules.decompiler.sforms.FlattenStatementsHelper.FinallyPathWrapper;
 import qunar.tc.decompiler.modules.decompiler.stats.CatchAllStatement;
 import qunar.tc.decompiler.modules.decompiler.stats.CatchStatement;
 import qunar.tc.decompiler.modules.decompiler.stats.RootStatement;
@@ -322,11 +323,11 @@ private SFormsFastMapDirect getFilteredOutMap(String nodeid, String predid, Dire
             boolean isExceptionMonitorExit = (exceptionDest != null && !nodeid.equals(exceptionDest));
 
             HashSet<String> setLongPathWrapper = new HashSet<>();
-            for (FlattenStatementsHelper.FinallyPathWrapper finwraplong : dgraph.mapLongRangeFinallyPaths.get(predid)) {
+            for (FinallyPathWrapper finwraplong : dgraph.mapLongRangeFinallyPaths.get(predid)) {
                 setLongPathWrapper.add(finwraplong.destination + "##" + finwraplong.source);
             }
 
-            for (FlattenStatementsHelper.FinallyPathWrapper finwrap : dgraph.mapShortRangeFinallyPaths.get(predid)) {
+            for (FinallyPathWrapper finwrap : dgraph.mapShortRangeFinallyPaths.get(predid)) {
                 SFormsFastMapDirect map;
 
                 boolean recFinally = dgraph.mapShortRangeFinallyPaths.containsKey(finwrap.source);

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/modules/decompiler/stats/BasicBlockStatement.java
Patch:
@@ -27,7 +27,7 @@ public class BasicBlockStatement extends Statement {
 
     public BasicBlockStatement(BasicBlock block) {
 
-        type = TYPE_BASICBLOCK;
+        type = Statement.TYPE_BASICBLOCK;
 
         this.block = block;
 
@@ -54,12 +54,14 @@ public BasicBlockStatement(BasicBlock block) {
     // public methods
     // *****************************************************************************
 
+    @Override
     public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) {
         TextBuffer tb = ExprProcessor.listToJava(varDefinitions, indent, tracer);
         tb.append(ExprProcessor.listToJava(exprents, indent, tracer));
         return tb;
     }
 
+    @Override
     public Statement getSimpleCopy() {
 
         BasicBlock newblock = new BasicBlock(

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/modules/decompiler/stats/CatchStatement.java
Patch:
@@ -129,6 +129,7 @@ public static Statement isHead(Statement head) {
         return null;
     }
 
+    @Override
     public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) {
         TextBuffer buf = new TextBuffer();
 
@@ -168,7 +169,7 @@ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) {
             buf.append(vars.get(i - 1).toJava(indent, tracer));
             buf.append(") {").appendLineSeparator();
             tracer.incrementCurrentSourceLine();
-            buf.append(ExprProcessor.jmpWrapper(stat, indent + 1, true, tracer)).appendIndent(indent)
+            buf.append(ExprProcessor.jmpWrapper(stat, indent + 1, false, tracer)).appendIndent(indent)
                     .append("}");
         }
         buf.appendLineSeparator();
@@ -177,6 +178,7 @@ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) {
         return buf;
     }
 
+    @Override
     public Statement getSimpleCopy() {
         CatchStatement cs = new CatchStatement();
 

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/modules/decompiler/stats/GeneralStatement.java
Patch:
@@ -20,7 +20,7 @@ private GeneralStatement() {
         type = Statement.TYPE_GENERAL;
     }
 
-    public GeneralStatement(Statement head, Collection<Statement> statements, Statement post) {
+    public GeneralStatement(Statement head, Collection<? extends Statement> statements, Statement post) {
 
         this();
 
@@ -41,6 +41,7 @@ public GeneralStatement(Statement head, Collection<Statement> statements, Statem
     // public methods
     // *****************************************************************************
 
+    @Override
     public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) {
         TextBuffer buf = new TextBuffer();
 

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/modules/decompiler/stats/RootStatement.java
Patch:
@@ -11,7 +11,7 @@ public class RootStatement extends Statement {
     private final DummyExitStatement dummyExit;
 
     public RootStatement(Statement head, DummyExitStatement dummyExit) {
-        type = TYPE_ROOT;
+        type = Statement.TYPE_ROOT;
 
         first = head;
         this.dummyExit = dummyExit;
@@ -20,6 +20,7 @@ public RootStatement(Statement head, DummyExitStatement dummyExit) {
         first.setParent(this);
     }
 
+    @Override
     public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) {
         return ExprProcessor.listToJava(varDefinitions, indent, tracer).append(first.toJava(indent, tracer));
     }

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/modules/decompiler/vars/VarTypeProcessor.java
Patch:
@@ -177,7 +177,6 @@ private boolean changeExprentType(Exprent exprent, VarType newType, int minMax)
                 if (exprent.type == Exprent.EXPRENT_CONST) {
                     pair = new VarVersionPair(((ConstExprent) exprent).id, -1);
                 } else if (exprent.type == Exprent.EXPRENT_VAR) {
-                    //noinspection ConstantConditions
                     pair = new VarVersionPair((VarExprent) exprent);
                 }
 
@@ -194,7 +193,6 @@ private boolean changeExprentType(Exprent exprent, VarType newType, int minMax)
 
                     mapExprentMinTypes.put(pair, newMinType);
                     if (exprent.type == Exprent.EXPRENT_CONST) {
-                        //noinspection ConstantConditions
                         ((ConstExprent) exprent).setConstType(newMinType);
                     }
 

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/modules/decompiler/vars/VarVersionNode.java
Patch:
@@ -31,6 +31,7 @@ public VarVersionNode(int var, int version) {
         this.version = version;
     }
 
+    @Override
     public List<IGraphNode> getPredecessors() {
         List<IGraphNode> lst = new ArrayList<>(preds.size());
         for (VarVersionEdge edge : preds) {

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/modules/decompiler/vars/VarVersionsGraph.java
Patch:
@@ -72,10 +72,12 @@ public void initDominators() {
         }
 
         engine = new GenericDominatorEngine(new IGraph() {
+            @Override
             public List<? extends IGraphNode> getReversePostOrderList() {
                 return getReversedPostOrder(roots);
             }
 
+            @Override
             public Set<? extends IGraphNode> getRoots() {
                 return new HashSet<IGraphNode>(roots);
             }
@@ -97,7 +99,7 @@ private static List<VarVersionNode> getReversedPostOrder(Collection<VarVersionNo
         return lst;
     }
 
-    private static void addToReversePostOrderListIterative(VarVersionNode root, List<VarVersionNode> lst, Set<VarVersionNode> setVisited) {
+    private static void addToReversePostOrderListIterative(VarVersionNode root, List<? super VarVersionNode> lst, Set<? super VarVersionNode> setVisited) {
         Map<VarVersionNode, List<VarVersionEdge>> mapNodeSuccs = new HashMap<>();
         LinkedList<VarVersionNode> stackNode = new LinkedList<>();
         LinkedList<Integer> stackIndex = new LinkedList<>();

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/modules/renamer/ConverterHelper.java
Patch:
@@ -33,7 +33,7 @@ public boolean toBeRenamed(Type elementType, String className, String element, S
                 !isValidIdentifier(elementType == Type.ELEMENT_METHOD, value) ||
                 KEYWORDS.contains(value) ||
                 elementType == Type.ELEMENT_CLASS && (
-                        RESERVED_WINDOWS_NAMESPACE.contains(value.toLowerCase(Locale.US)) ||
+                        RESERVED_WINDOWS_NAMESPACE.contains(value.toLowerCase(Locale.ENGLISH)) ||
                                 value.length() > 255 - ".class".length());
     }
 

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/modules/renamer/IdentifierConverter.java
Patch:
@@ -316,7 +316,6 @@ private void buildInheritanceTree() {
                     nodes.put(clStr.qualifiedName, node = new ClassWrapperNode(clStr));
                 }
 
-                //noinspection ConstantConditions
                 if (child != null) {
                     node.addSubclass(child);
                 }

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/struct/ContextUnit.java
Patch:
@@ -5,7 +5,6 @@
 import qunar.tc.decompiler.main.extern.IFernflowerPreferences;
 import qunar.tc.decompiler.main.extern.IResultSaver;
 import qunar.tc.decompiler.struct.lazy.LazyLoader;
-import qunar.tc.decompiler.struct.lazy.LazyLoader.Link;
 import qunar.tc.decompiler.util.DataInputFullStream;
 
 import java.io.IOException;
@@ -70,7 +69,7 @@ public void reload(LazyLoader loader) throws IOException {
 
             lstClasses.add(newCl);
 
-            Link lnk = loader.getClassLink(oldName);
+            LazyLoader.Link lnk = loader.getClassLink(oldName);
             loader.removeClassLink(oldName);
             loader.addClassLink(newCl.qualifiedName, lnk);
         }

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/struct/gen/generics/GenericMain.java
Patch:
@@ -92,7 +92,7 @@ public static GenericMethodDescriptor parseMethodSignature(String signature) {
         }
     }
 
-    private static String parseFormalParameters(String signature, List<String> parameters, List<List<GenericType>> bounds) {
+    private static String parseFormalParameters(String signature, List<? super String> parameters, List<? super List<GenericType>> bounds) {
         if (signature.charAt(0) != '<') {
             return signature;
         }

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/struct/lazy/LazyLoader.java
Patch:
@@ -88,7 +88,7 @@ public byte[] loadBytecode(StructMethod mt, int codeFullLength) {
                     for (int j = 0; j < attrSize; j++) {
                         int attrNameIndex = in.readUnsignedShort();
                         String attrName = pool.getPrimitiveConstant(attrNameIndex).getString();
-                        if (!StructGeneralAttribute.ATTRIBUTE_CODE.equals(attrName)) {
+                        if (!StructGeneralAttribute.ATTRIBUTE_CODE.getName().equals(attrName)) {
                             in.discard(in.readInt());
                             continue;
                         }

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/util/ListStack.java
Patch:
@@ -10,10 +10,11 @@ public ListStack() {
         super();
     }
 
-    public ListStack(ArrayList<T> list) {
+    public ListStack(ArrayList<? extends T> list) {
         super(list);
     }
 
+    @Override
     @SuppressWarnings("MethodDoesntCallSuperMethod")
     public ListStack<T> clone() {
         ListStack<T> copy = new ListStack<>(this);
@@ -62,6 +63,7 @@ public void insertByOffset(int offset, T item) {
         pointer++;
     }
 
+    @Override
     public void clear() {
         super.clear();
         pointer = 0;

File: bistoury-decompiler-fernflower/src/main/java/qunar/tc/decompiler/util/TextBuffer.java
Patch:
@@ -277,7 +277,8 @@ public void dumpOriginalLineNumbers(int[] lineMapping) {
             myLineMapping = new HashMap<>();
             for (int i = 0; i < lineMapping.length; i += 2) {
                 int key = lineMapping[i + 1];
-                //Set<Integer> existing = myLineMapping.computeIfAbsent(key, k -> new TreeSet<>());
+
+                // Set<Integer> existing = myLineMapping.computeIfAbsent(key, k -> new TreeSet<>());
                 Set<Integer> existing = Map827.computeIfAbsent(myLineMapping, key, new Function<Integer, Set<Integer>>() {
                     @Override
                     public Set<Integer> apply(Integer input) {

File: bistoury-agent-common/src/main/java/qunar/tc/bistoury/agent/common/pid/PidUtils.java
Patch:
@@ -62,7 +62,7 @@ private static List<PidHandler> initPidHandler() {
         Collections.sort(handlers, new Comparator<PidHandler>() {
             @Override
             public int compare(PidHandler o1, PidHandler o2) {
-                return o1.priority() - o2.priority();
+                return Integer.compare(o1.priority(), o2.priority());
             }
         });
         return ImmutableList.copyOf(handlers);

File: bistoury-commands/src/main/java/qunar/tc/bistoury/commands/host/VirtualMachineUtil.java
Patch:
@@ -130,7 +130,7 @@ private static String getLocalConnectorAddress(VirtualMachine vm) throws IOExcep
     }
 
     static class VMConnector {
-        private JMXConnector connector;
+        private final JMXConnector connector;
 
         VMConnector(JMXConnector connector) {
             this.connector = connector;

File: bistoury-common/src/main/java/qunar/tc/bistoury/common/BistouryConstants.java
Patch:
@@ -56,7 +56,7 @@ public class BistouryConstants {
     public static final String SPY_CLASSNAME = "qunar.tc.bistoury.instrument.spy.BistourySpys1";
 
     // todo: 先这么写吧
-    public static final String CURRENT_VERSION = "2.0.3";
+    public static final String CURRENT_VERSION = "2.0.4";
 
     public static final String BISTOURY_VERSION_LINE_PREFIX = "bistoury version:";
 

File: bistoury-agent-common/src/main/java/qunar/tc/bistoury/agent/common/pid/PidUtils.java
Patch:
@@ -62,7 +62,7 @@ private static List<PidHandler> initPidHandler() {
         Collections.sort(handlers, new Comparator<PidHandler>() {
             @Override
             public int compare(PidHandler o1, PidHandler o2) {
-                return o1.priority() - o2.priority();
+                return Integer.compare(o1.priority(), o2.priority());
             }
         });
         return ImmutableList.copyOf(handlers);

File: bistoury-application/bistoury-application-mysql/src/main/java/qunar/tc/bistoury/application/mysql/dao/impl/ApplicationUserDaoImpl.java
Patch:
@@ -38,7 +38,7 @@
 public class ApplicationUserDaoImpl implements ApplicationUserDao {
     private static final String SELECT_APP_BY_USER_CODE = "select app_code from bistoury_user_app where user_code=?";
 
-    private static final String ADD_USER_FOR_APP = "insert ignore bistoury_user_app (app_code, user_code) values (?, ?)";
+    private static final String ADD_USER_FOR_APP = "insert ignore into bistoury_user_app (app_code, user_code) values (?, ?)";
 
     private static final String REMOVE_USER_FROM_APP = "delete from bistoury_user_app where user_code = ? and app_code = ?";
 

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/container/Bootstrap.java
Patch:
@@ -76,7 +76,6 @@ public static void main(String[] args) throws Exception {
 
             logger.info("Server配置加载完成，正在启动中...");
             tomcat.start();
-            logger.info("Server启动成功");
             tomcat.getServer().await();
         } catch (Exception e) {
             logger.error("Server启动失败...", e);

File: bistoury-ui/src/main/java/qunar/tc/bistoury/ui/container/Bootstrap.java
Patch:
@@ -73,7 +73,6 @@ public static void main(String[] args) {
 
             logger.info("Server配置加载完成，正在启动中...");
             tomcat.start();
-            logger.info("Server启动成功");
             tomcat.getServer().await();
         } catch (Exception e) {
             logger.error("Server启动失败...", e);

File: bistoury-remoting/src/main/java/qunar/tc/bistoury/remoting/netty/TaskProcessor.java
Patch:
@@ -100,7 +100,7 @@ public void onFailure(Throwable t) {
                 handler.handleError(t);
                 logger.error("{} command error, id [{}], command [{}]", factory.name(), id, command, t);
             }
-        }, MoreExecutors.directExecutor());
+        }, AgentRemotingExecutor.getExecutor());
     }
 
     @SuppressWarnings("unchecked")

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/container/Bootstrap.java
Patch:
@@ -46,7 +46,6 @@ public class Bootstrap {
 
     public static void main(String[] args) throws Exception {
         try {
-            //System.setProperty("bistoury.conf", "/Users/leix.xie/workspace/opensource/bistoury/bistoury-proxy/conf");
             final String confDir = System.getProperty("bistoury.conf");
             if (Strings.isNullOrEmpty(confDir)) {
                 throw new RuntimeException("请在JVM参数中配置项目配置文件目录，即bistoury.conf");

File: bistoury-ui/src/main/java/qunar/tc/bistoury/ui/container/Bootstrap.java
Patch:
@@ -45,7 +45,6 @@ public class Bootstrap {
 
     public static void main(String[] args) {
         try {
-            System.setProperty("bistoury.conf", "/Users/leix.xie/workspace/opensource/bistoury/bistoury-ui/conf");
             final String confDir = System.getProperty("bistoury.conf");
             if (Strings.isNullOrEmpty(confDir)) {
                 throw new RuntimeException("请在JVM参数中配置项目配置文件目录，即bistoury.conf");

File: bistoury-application/bistoury-application-mysql/src/main/java/qunar/tc/bistoury/application/mysql/service/ApplicationServiceImpl.java
Patch:
@@ -16,13 +16,15 @@
 import qunar.tc.bistoury.application.mysql.dao.ApplicationUserDao;
 
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 import org.springframework.util.CollectionUtils;
 
 /**
  * @author xkrivzooh
  * @since 2019/8/14
  */
+@Service
 public class ApplicationServiceImpl implements ApplicationService {
 
 	@Autowired

File: bistoury-metrics-prometheus/src/main/java/qunar/tc/bistoury/metrics/prometheus/PrometheusBistouryMetricRegistry.java
Patch:
@@ -26,6 +26,7 @@
 import io.prometheus.client.exporter.HTTPServer;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfig;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfigLoader;
+import qunar.tc.bistoury.serverside.configuration.local.LocalDynamicConfig;
 import qunar.tc.bistoury.serverside.metrics.BistouryCounter;
 import qunar.tc.bistoury.serverside.metrics.BistouryMeter;
 import qunar.tc.bistoury.serverside.metrics.BistouryMetricRegistry;
@@ -52,7 +53,7 @@ public Collector load(Key key) {
 
 
     public PrometheusBistouryMetricRegistry() {
-        DynamicConfig config = DynamicConfigLoader.load("prometheus.properties", false);
+        DynamicConfig<LocalDynamicConfig> config = DynamicConfigLoader.load("prometheus.properties", false);
         String type = config.getString("monitor.type", "prometheus");
         if ("prometheus".equals(type)) {
             String action = config.getString("monitor.action", "metrics");

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/ui/handler/commandprocessor/processor/JavaCommandProcessor.java
Patch:
@@ -25,6 +25,7 @@
 import qunar.tc.bistoury.remoting.command.MachineCommand;
 import qunar.tc.bistoury.remoting.protocol.CommandCode;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfigLoader;
+import qunar.tc.bistoury.serverside.configuration.local.LocalDynamicConfig;
 
 import javax.annotation.PostConstruct;
 import java.util.Map;
@@ -45,7 +46,8 @@ public class JavaCommandProcessor extends AbstractCommand<MachineCommand> {
 
     @PostConstruct
     public void init() {
-        DynamicConfigLoader.load("global.properties").addListener(conf -> globalConfig = conf.asMap());
+        DynamicConfigLoader.<LocalDynamicConfig>load("global.properties")
+                .addListener(conf -> globalConfig = conf.asMap());
     }
 
     @Override

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/config/AgentInfoOverride.java
Patch:
@@ -22,6 +22,7 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.stereotype.Service;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfigLoader;
+import qunar.tc.bistoury.serverside.configuration.local.LocalDynamicConfig;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -39,7 +40,8 @@ public class AgentInfoOverride {
     private volatile List<AgentConfigOverride> agentConfigOverrides;
 
     AgentInfoOverride() {
-        DynamicConfigLoader.load("agent_config_override.properties", false).addListener(conf -> parseAgentConfigOverride(conf.asMap()));
+        DynamicConfigLoader.<LocalDynamicConfig>load("agent_config_override.properties", false)
+                .addListener(conf -> parseAgentConfigOverride(conf.asMap()));
     }
 
     private void parseAgentConfigOverride(Map<String, String> configs) {

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/config/DefaultAgentInfoManager.java
Patch:
@@ -29,6 +29,7 @@
 import qunar.tc.bistoury.remoting.protocol.CommandCode;
 import qunar.tc.bistoury.remoting.protocol.RemotingBuilder;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfigLoader;
+import qunar.tc.bistoury.serverside.configuration.local.LocalDynamicConfig;
 import qunar.tc.bistoury.serverside.support.AppServer;
 import qunar.tc.bistoury.ui.dao.AppServerDao;
 
@@ -62,7 +63,8 @@ public class DefaultAgentInfoManager implements AgentInfoManager {
 
     @PostConstruct
     public void init() {
-        DynamicConfigLoader.load("agent_config.properties", false).addListener(conf -> agentConfig = conf.asMap());
+        DynamicConfigLoader.<LocalDynamicConfig>load("agent_config.properties", false)
+                .addListener(conf -> agentConfig = conf.asMap());
     }
 
     @Override

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/container/Bootstrap.java
Patch:
@@ -28,6 +28,7 @@
 import qunar.tc.bistoury.common.FileUtil;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfig;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfigLoader;
+import qunar.tc.bistoury.serverside.configuration.local.LocalDynamicConfig;
 import qunar.tc.bistoury.serverside.util.ServerManager;
 
 import java.io.File;
@@ -51,7 +52,7 @@ public static void main(String[] args) throws Exception {
                 throw new RuntimeException("请在JVM参数中配置项目配置文件目录，即bistoury.conf");
             }
 
-            DynamicConfig config = DynamicConfigLoader.load("server.properties");
+            DynamicConfig<LocalDynamicConfig> config = DynamicConfigLoader.load("server.properties");
 
             int port = config.getInt("tomcat.port");
             System.setProperty("bistoury.tomcat.port", String.valueOf(port));

File: bistoury-serverside-common/src/main/java/qunar/tc/bistoury/serverside/configuration/DynamicConfig.java
Patch:
@@ -23,8 +23,8 @@
 /**
  * User: zhaohuiyu Date: 12/24/12 Time: 4:12 PM
  */
-public interface DynamicConfig {
-    void addListener(Listener listener);
+public interface DynamicConfig<T> {
+    void addListener(Listener<T> listener);
 
     String getString(String name);
 

File: bistoury-serverside-common/src/main/java/qunar/tc/bistoury/serverside/configuration/DynamicConfigFactory.java
Patch:
@@ -22,6 +22,6 @@
  * @author keli.wang
  * @since 2018-11-23
  */
-public interface DynamicConfigFactory {
-    DynamicConfig create(String name, boolean failOnNotExist);
+public interface DynamicConfigFactory<T> {
+    DynamicConfig<T> create(String name, boolean failOnNotExist);
 }

File: bistoury-serverside-common/src/main/java/qunar/tc/bistoury/serverside/configuration/DynamicConfigLoader.java
Patch:
@@ -42,11 +42,12 @@ public final class DynamicConfigLoader {
     private DynamicConfigLoader() {
     }
 
-    public static DynamicConfig load(final String name) {
+    public static <T> DynamicConfig<T> load(final String name) {
         return load(name, true);
     }
 
-    public static DynamicConfig load(final String name, final boolean failOnNotExist) {
+    @SuppressWarnings("unchecked")
+    public static <T> DynamicConfig<T> load(final String name, final boolean failOnNotExist) {
         return FACTORY.create(name, failOnNotExist);
     }
 }

File: bistoury-serverside-common/src/main/java/qunar/tc/bistoury/serverside/configuration/Listener.java
Patch:
@@ -22,6 +22,6 @@
  * @author keli.wang
  * @since 2018-11-27
  */
-public interface Listener {
-    void onLoad(DynamicConfig config);
+public interface Listener<T> {
+	void onLoad(T config);
 }

File: bistoury-serverside-common/src/main/java/qunar/tc/bistoury/serverside/configuration/local/LocalDynamicConfig.java
Patch:
@@ -34,7 +34,7 @@
  * @author keli.wang
  * @since 2018-11-23
  */
-public class LocalDynamicConfig implements DynamicConfig {
+public class LocalDynamicConfig implements DynamicConfig<LocalDynamicConfig> {
     private static final Logger LOG = LoggerFactory.getLogger(LocalDynamicConfig.class);
 
     private final String name;
@@ -133,14 +133,14 @@ private void executeListeners() {
     }
 
     @Override
-    public void addListener(Listener listener) {
+    public void addListener(Listener<LocalDynamicConfig> listener) {
         if (loaded) {
             executeListener(listener);
         }
         listeners.add(listener);
     }
 
-    private void executeListener(Listener listener) {
+    private void executeListener(Listener<LocalDynamicConfig> listener) {
         try {
             listener.onLoad(this);
         } catch (Throwable e) {

File: bistoury-serverside-common/src/main/java/qunar/tc/bistoury/serverside/configuration/local/LocalDynamicConfigFactory.java
Patch:
@@ -28,12 +28,12 @@
  * @author keli.wang
  * @since 2018-11-27
  */
-public class LocalDynamicConfigFactory implements DynamicConfigFactory {
+public class LocalDynamicConfigFactory implements DynamicConfigFactory<LocalDynamicConfig> {
     private final ConfigWatcher watcher = new ConfigWatcher();
     private final ConcurrentMap<String, LocalDynamicConfig> configs = new ConcurrentHashMap<>();
 
     @Override
-    public DynamicConfig create(final String name, final boolean failOnNotExist) {
+    public DynamicConfig<LocalDynamicConfig> create(final String name, final boolean failOnNotExist) {
         if (configs.containsKey(name)) {
             return configs.get(name);
         }

File: bistoury-ui-service-impl/src/main/java/qunar/tc/bistoury/ui/service/impl/DefaultJarFileStore.java
Patch:
@@ -36,6 +36,7 @@
 import qunar.tc.bistoury.common.AsyncHttpClientHolder;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfig;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfigLoader;
+import qunar.tc.bistoury.serverside.configuration.local.LocalDynamicConfig;
 import qunar.tc.bistoury.serverside.metrics.Metrics;
 import qunar.tc.bistoury.serverside.util.BistouryFileStoreUtil;
 import qunar.tc.bistoury.ui.exception.SourceFileNotFoundException;
@@ -86,7 +87,7 @@ public class DefaultJarFileStore implements JarFileStore {
     public void init() {
 
 
-        DynamicConfig dynamicConfig = DynamicConfigLoader.load("config.properties");
+        DynamicConfig<LocalDynamicConfig> dynamicConfig = DynamicConfigLoader.load("config.properties");
         dynamicConfig.addListener(config -> {
             mavenHost = config.getString("maven.nexus.url");
             jarGuaranteePeriodDays = config.getInt("jar.guarantee.period.days", 2);

File: bistoury-ui-service-impl/src/main/java/qunar/tc/bistoury/ui/service/impl/GitlabApiCreateServiceImpl.java
Patch:
@@ -21,6 +21,7 @@
 import org.springframework.stereotype.Service;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfig;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfigLoader;
+import qunar.tc.bistoury.serverside.configuration.local.LocalDynamicConfig;
 import qunar.tc.bistoury.ui.model.PrivateToken;
 import qunar.tc.bistoury.ui.security.LoginContext;
 import qunar.tc.bistoury.ui.service.GitlabApiCreateService;
@@ -40,7 +41,7 @@ public class GitlabApiCreateServiceImpl implements GitlabApiCreateService {
 
     @PostConstruct
     public void init() {
-        DynamicConfig config = DynamicConfigLoader.load("config.properties");
+        DynamicConfig<LocalDynamicConfig> config = DynamicConfigLoader.load("config.properties");
         config.addListener(conf -> gitlabEndpoint = conf.getString("gitlab.endpoint"));
     }
 

File: bistoury-ui-service-impl/src/main/java/qunar/tc/bistoury/ui/service/impl/LinkRedirectServiceImpl.java
Patch:
@@ -22,6 +22,7 @@
 import org.springframework.stereotype.Service;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfig;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfigLoader;
+import qunar.tc.bistoury.serverside.configuration.local.LocalDynamicConfig;
 import qunar.tc.bistoury.ui.service.URLRedirectService;
 
 import javax.annotation.PostConstruct;
@@ -38,7 +39,8 @@ public class LinkRedirectServiceImpl implements URLRedirectService {
 
     @PostConstruct
     public void init() {
-        DynamicConfigLoader.load("url_redirect.properties").addListener(config -> dynamicConfig = config);
+        DynamicConfig<LocalDynamicConfig> dynamicConfig = DynamicConfigLoader.load("url_redirect.properties");
+        dynamicConfig.addListener(config -> this.dynamicConfig = config);
     }
 
     @Override

File: bistoury-ui/src/main/java/qunar/tc/bistoury/ui/controller/AgentMetaController.java
Patch:
@@ -29,6 +29,7 @@
 import qunar.tc.bistoury.common.JacksonSerializer;
 import qunar.tc.bistoury.serverside.bean.ApiResult;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfigLoader;
+import qunar.tc.bistoury.serverside.configuration.local.LocalDynamicConfig;
 import qunar.tc.bistoury.serverside.util.ResultHelper;
 import qunar.tc.bistoury.ui.service.ProxyService;
 
@@ -54,7 +55,8 @@ public class AgentMetaController {
 
     @PostConstruct
     public void init() {
-        DynamicConfigLoader.load("config.properties").addListener(conf -> proxyAgentMetaRefresh = conf.getString("agent.meta.refresh"));
+        DynamicConfigLoader.<LocalDynamicConfig>load("config.properties")
+                .addListener(conf -> proxyAgentMetaRefresh = conf.getString("agent.meta.refresh"));
     }
 
     @RequestMapping("agentMetaUpdate")

File: bistoury-ui/src/main/java/qunar/tc/bistoury/ui/controller/ConfigController.java
Patch:
@@ -35,6 +35,7 @@
 import qunar.tc.bistoury.common.JacksonSerializer;
 import qunar.tc.bistoury.serverside.bean.ApiResult;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfigLoader;
+import qunar.tc.bistoury.serverside.configuration.local.LocalDynamicConfig;
 import qunar.tc.bistoury.serverside.util.ResultHelper;
 import qunar.tc.bistoury.ui.service.ProxyService;
 
@@ -70,7 +71,7 @@ public class ConfigController {
 
     @PostConstruct
     public void init() {
-        DynamicConfigLoader.load("config.properties").addListener(conf -> proxyAgent = conf.getString("agent.proxy"));
+        DynamicConfigLoader.<LocalDynamicConfig>load("config.properties").addListener(conf -> proxyAgent = conf.getString("agent.proxy"));
     }
 
     @RequestMapping("getProxyWebSocketUrl")

File: bistoury-ui/src/main/java/qunar/tc/bistoury/ui/controller/GitlabRepositoryApiController.java
Patch:
@@ -29,6 +29,7 @@
 import org.springframework.web.bind.annotation.ResponseBody;
 import qunar.tc.bistoury.serverside.bean.ApiResult;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfigLoader;
+import qunar.tc.bistoury.serverside.configuration.local.LocalDynamicConfig;
 import qunar.tc.bistoury.serverside.util.ResultHelper;
 import qunar.tc.bistoury.ui.model.GitlabFile;
 import qunar.tc.bistoury.ui.service.GitlabApiCreateService;
@@ -53,7 +54,8 @@ public class GitlabRepositoryApiController {
 
     @PostConstruct
     public void init() {
-        DynamicConfigLoader.load("config.properties").addListener(config -> filePathFormat = config.getString("file.path.format", "{0}src/main/java/{1}.java"));
+        DynamicConfigLoader.<LocalDynamicConfig>load("config.properties")
+                .addListener(config -> filePathFormat = config.getString("file.path.format", "{0}src/main/java/{1}.java"));
     }
 
     @RequestMapping("/tree")

File: bistoury-metrics-prometheus/src/main/java/qunar/tc/bistoury/metrics/prometheus/PrometheusBistouryMetricRegistry.java
Patch:
@@ -26,6 +26,7 @@
 import io.prometheus.client.exporter.HTTPServer;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfig;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfigLoader;
+import qunar.tc.bistoury.serverside.configuration.local.LocalDynamicConfig;
 import qunar.tc.bistoury.serverside.metrics.BistouryCounter;
 import qunar.tc.bistoury.serverside.metrics.BistouryMeter;
 import qunar.tc.bistoury.serverside.metrics.BistouryMetricRegistry;
@@ -52,7 +53,7 @@ public Collector load(Key key) {
 
 
     public PrometheusBistouryMetricRegistry() {
-        DynamicConfig config = DynamicConfigLoader.load("prometheus.properties", false);
+        DynamicConfig<LocalDynamicConfig> config = DynamicConfigLoader.load("prometheus.properties", false);
         String type = config.getString("monitor.type", "prometheus");
         if ("prometheus".equals(type)) {
             String action = config.getString("monitor.action", "metrics");

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/communicate/ui/handler/commandprocessor/processor/JavaCommandProcessor.java
Patch:
@@ -25,6 +25,7 @@
 import qunar.tc.bistoury.remoting.command.MachineCommand;
 import qunar.tc.bistoury.remoting.protocol.CommandCode;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfigLoader;
+import qunar.tc.bistoury.serverside.configuration.local.LocalDynamicConfig;
 
 import javax.annotation.PostConstruct;
 import java.util.Map;
@@ -45,7 +46,8 @@ public class JavaCommandProcessor extends AbstractCommand<MachineCommand> {
 
     @PostConstruct
     public void init() {
-        DynamicConfigLoader.load("global.properties").addListener(conf -> globalConfig = conf.asMap());
+        DynamicConfigLoader.<LocalDynamicConfig>load("global.properties")
+                .addListener(conf -> globalConfig = conf.asMap());
     }
 
     @Override

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/config/AgentInfoOverride.java
Patch:
@@ -22,6 +22,7 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.stereotype.Service;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfigLoader;
+import qunar.tc.bistoury.serverside.configuration.local.LocalDynamicConfig;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -39,7 +40,8 @@ public class AgentInfoOverride {
     private volatile List<AgentConfigOverride> agentConfigOverrides;
 
     AgentInfoOverride() {
-        DynamicConfigLoader.load("agent_config_override.properties", false).addListener(conf -> parseAgentConfigOverride(conf.asMap()));
+        DynamicConfigLoader.<LocalDynamicConfig>load("agent_config_override.properties", false)
+                .addListener(conf -> parseAgentConfigOverride(conf.asMap()));
     }
 
     private void parseAgentConfigOverride(Map<String, String> configs) {

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/config/DefaultAgentInfoManager.java
Patch:
@@ -29,6 +29,7 @@
 import qunar.tc.bistoury.remoting.protocol.CommandCode;
 import qunar.tc.bistoury.remoting.protocol.RemotingBuilder;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfigLoader;
+import qunar.tc.bistoury.serverside.configuration.local.LocalDynamicConfig;
 import qunar.tc.bistoury.serverside.support.AppServer;
 import qunar.tc.bistoury.ui.dao.AppServerDao;
 
@@ -62,7 +63,8 @@ public class DefaultAgentInfoManager implements AgentInfoManager {
 
     @PostConstruct
     public void init() {
-        DynamicConfigLoader.load("agent_config.properties", false).addListener(conf -> agentConfig = conf.asMap());
+        DynamicConfigLoader.<LocalDynamicConfig>load("agent_config.properties", false)
+                .addListener(conf -> agentConfig = conf.asMap());
     }
 
     @Override

File: bistoury-proxy/src/main/java/qunar/tc/bistoury/proxy/container/Bootstrap.java
Patch:
@@ -28,6 +28,7 @@
 import qunar.tc.bistoury.common.FileUtil;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfig;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfigLoader;
+import qunar.tc.bistoury.serverside.configuration.local.LocalDynamicConfig;
 import qunar.tc.bistoury.serverside.util.ServerManager;
 
 import java.io.File;
@@ -51,7 +52,7 @@ public static void main(String[] args) throws Exception {
                 throw new RuntimeException("请在JVM参数中配置项目配置文件目录，即bistoury.conf");
             }
 
-            DynamicConfig config = DynamicConfigLoader.load("server.properties");
+            DynamicConfig<LocalDynamicConfig> config = DynamicConfigLoader.load("server.properties");
 
             int port = config.getInt("tomcat.port");
             System.setProperty("bistoury.tomcat.port", String.valueOf(port));

File: bistoury-serverside-common/src/main/java/qunar/tc/bistoury/serverside/configuration/DynamicConfig.java
Patch:
@@ -23,8 +23,8 @@
 /**
  * User: zhaohuiyu Date: 12/24/12 Time: 4:12 PM
  */
-public interface DynamicConfig {
-    void addListener(Listener listener);
+public interface DynamicConfig<T> {
+    void addListener(Listener<T> listener);
 
     String getString(String name);
 

File: bistoury-serverside-common/src/main/java/qunar/tc/bistoury/serverside/configuration/DynamicConfigFactory.java
Patch:
@@ -22,6 +22,6 @@
  * @author keli.wang
  * @since 2018-11-23
  */
-public interface DynamicConfigFactory {
-    DynamicConfig create(String name, boolean failOnNotExist);
+public interface DynamicConfigFactory<T> {
+    DynamicConfig<T> create(String name, boolean failOnNotExist);
 }

File: bistoury-serverside-common/src/main/java/qunar/tc/bistoury/serverside/configuration/DynamicConfigLoader.java
Patch:
@@ -42,11 +42,12 @@ public final class DynamicConfigLoader {
     private DynamicConfigLoader() {
     }
 
-    public static DynamicConfig load(final String name) {
+    public static <T> DynamicConfig<T> load(final String name) {
         return load(name, true);
     }
 
-    public static DynamicConfig load(final String name, final boolean failOnNotExist) {
+    @SuppressWarnings("unchecked")
+    public static <T> DynamicConfig<T> load(final String name, final boolean failOnNotExist) {
         return FACTORY.create(name, failOnNotExist);
     }
 }

File: bistoury-serverside-common/src/main/java/qunar/tc/bistoury/serverside/configuration/Listener.java
Patch:
@@ -22,6 +22,6 @@
  * @author keli.wang
  * @since 2018-11-27
  */
-public interface Listener {
-    void onLoad(DynamicConfig config);
+public interface Listener<T> {
+	void onLoad(T config);
 }

File: bistoury-serverside-common/src/main/java/qunar/tc/bistoury/serverside/configuration/local/LocalDynamicConfig.java
Patch:
@@ -34,7 +34,7 @@
  * @author keli.wang
  * @since 2018-11-23
  */
-public class LocalDynamicConfig implements DynamicConfig {
+public class LocalDynamicConfig implements DynamicConfig<LocalDynamicConfig> {
     private static final Logger LOG = LoggerFactory.getLogger(LocalDynamicConfig.class);
 
     private final String name;
@@ -133,14 +133,14 @@ private void executeListeners() {
     }
 
     @Override
-    public void addListener(Listener listener) {
+    public void addListener(Listener<LocalDynamicConfig> listener) {
         if (loaded) {
             executeListener(listener);
         }
         listeners.add(listener);
     }
 
-    private void executeListener(Listener listener) {
+    private void executeListener(Listener<LocalDynamicConfig> listener) {
         try {
             listener.onLoad(this);
         } catch (Throwable e) {

File: bistoury-serverside-common/src/main/java/qunar/tc/bistoury/serverside/configuration/local/LocalDynamicConfigFactory.java
Patch:
@@ -28,12 +28,12 @@
  * @author keli.wang
  * @since 2018-11-27
  */
-public class LocalDynamicConfigFactory implements DynamicConfigFactory {
+public class LocalDynamicConfigFactory implements DynamicConfigFactory<LocalDynamicConfig> {
     private final ConfigWatcher watcher = new ConfigWatcher();
     private final ConcurrentMap<String, LocalDynamicConfig> configs = new ConcurrentHashMap<>();
 
     @Override
-    public DynamicConfig create(final String name, final boolean failOnNotExist) {
+    public DynamicConfig<LocalDynamicConfig> create(final String name, final boolean failOnNotExist) {
         if (configs.containsKey(name)) {
             return configs.get(name);
         }

File: bistoury-ui-service-impl/src/main/java/qunar/tc/bistoury/ui/service/impl/DefaultJarFileStore.java
Patch:
@@ -36,6 +36,7 @@
 import qunar.tc.bistoury.common.AsyncHttpClientHolder;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfig;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfigLoader;
+import qunar.tc.bistoury.serverside.configuration.local.LocalDynamicConfig;
 import qunar.tc.bistoury.serverside.metrics.Metrics;
 import qunar.tc.bistoury.serverside.util.BistouryFileStoreUtil;
 import qunar.tc.bistoury.ui.exception.SourceFileNotFoundException;
@@ -86,7 +87,7 @@ public class DefaultJarFileStore implements JarFileStore {
     public void init() {
 
 
-        DynamicConfig dynamicConfig = DynamicConfigLoader.load("config.properties");
+        DynamicConfig<LocalDynamicConfig> dynamicConfig = DynamicConfigLoader.load("config.properties");
         dynamicConfig.addListener(config -> {
             mavenHost = config.getString("maven.nexus.url");
             jarGuaranteePeriodDays = config.getInt("jar.guarantee.period.days", 2);

File: bistoury-ui-service-impl/src/main/java/qunar/tc/bistoury/ui/service/impl/GitlabApiCreateServiceImpl.java
Patch:
@@ -21,6 +21,7 @@
 import org.springframework.stereotype.Service;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfig;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfigLoader;
+import qunar.tc.bistoury.serverside.configuration.local.LocalDynamicConfig;
 import qunar.tc.bistoury.ui.model.PrivateToken;
 import qunar.tc.bistoury.ui.security.LoginContext;
 import qunar.tc.bistoury.ui.service.GitlabApiCreateService;
@@ -40,7 +41,7 @@ public class GitlabApiCreateServiceImpl implements GitlabApiCreateService {
 
     @PostConstruct
     public void init() {
-        DynamicConfig config = DynamicConfigLoader.load("config.properties");
+        DynamicConfig<LocalDynamicConfig> config = DynamicConfigLoader.load("config.properties");
         config.addListener(conf -> gitlabEndpoint = conf.getString("gitlab.endpoint"));
     }
 

File: bistoury-ui-service-impl/src/main/java/qunar/tc/bistoury/ui/service/impl/LinkRedirectServiceImpl.java
Patch:
@@ -22,6 +22,7 @@
 import org.springframework.stereotype.Service;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfig;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfigLoader;
+import qunar.tc.bistoury.serverside.configuration.local.LocalDynamicConfig;
 import qunar.tc.bistoury.ui.service.URLRedirectService;
 
 import javax.annotation.PostConstruct;
@@ -38,7 +39,8 @@ public class LinkRedirectServiceImpl implements URLRedirectService {
 
     @PostConstruct
     public void init() {
-        DynamicConfigLoader.load("url_redirect.properties").addListener(config -> dynamicConfig = config);
+        DynamicConfig<LocalDynamicConfig> dynamicConfig = DynamicConfigLoader.load("url_redirect.properties");
+        dynamicConfig.addListener(config -> this.dynamicConfig = config);
     }
 
     @Override

File: bistoury-ui/src/main/java/qunar/tc/bistoury/ui/controller/AgentMetaController.java
Patch:
@@ -29,6 +29,7 @@
 import qunar.tc.bistoury.common.JacksonSerializer;
 import qunar.tc.bistoury.serverside.bean.ApiResult;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfigLoader;
+import qunar.tc.bistoury.serverside.configuration.local.LocalDynamicConfig;
 import qunar.tc.bistoury.serverside.util.ResultHelper;
 import qunar.tc.bistoury.ui.service.ProxyService;
 
@@ -54,7 +55,8 @@ public class AgentMetaController {
 
     @PostConstruct
     public void init() {
-        DynamicConfigLoader.load("config.properties").addListener(conf -> proxyAgentMetaRefresh = conf.getString("agent.meta.refresh"));
+        DynamicConfigLoader.<LocalDynamicConfig>load("config.properties")
+                .addListener(conf -> proxyAgentMetaRefresh = conf.getString("agent.meta.refresh"));
     }
 
     @RequestMapping("agentMetaUpdate")

File: bistoury-ui/src/main/java/qunar/tc/bistoury/ui/controller/ConfigController.java
Patch:
@@ -35,6 +35,7 @@
 import qunar.tc.bistoury.common.JacksonSerializer;
 import qunar.tc.bistoury.serverside.bean.ApiResult;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfigLoader;
+import qunar.tc.bistoury.serverside.configuration.local.LocalDynamicConfig;
 import qunar.tc.bistoury.serverside.util.ResultHelper;
 import qunar.tc.bistoury.ui.service.ProxyService;
 
@@ -70,7 +71,7 @@ public class ConfigController {
 
     @PostConstruct
     public void init() {
-        DynamicConfigLoader.load("config.properties").addListener(conf -> proxyAgent = conf.getString("agent.proxy"));
+        DynamicConfigLoader.<LocalDynamicConfig>load("config.properties").addListener(conf -> proxyAgent = conf.getString("agent.proxy"));
     }
 
     @RequestMapping("getProxyWebSocketUrl")

File: bistoury-ui/src/main/java/qunar/tc/bistoury/ui/controller/GitlabRepositoryApiController.java
Patch:
@@ -29,6 +29,7 @@
 import org.springframework.web.bind.annotation.ResponseBody;
 import qunar.tc.bistoury.serverside.bean.ApiResult;
 import qunar.tc.bistoury.serverside.configuration.DynamicConfigLoader;
+import qunar.tc.bistoury.serverside.configuration.local.LocalDynamicConfig;
 import qunar.tc.bistoury.serverside.util.ResultHelper;
 import qunar.tc.bistoury.ui.model.GitlabFile;
 import qunar.tc.bistoury.ui.service.GitlabApiCreateService;
@@ -53,7 +54,8 @@ public class GitlabRepositoryApiController {
 
     @PostConstruct
     public void init() {
-        DynamicConfigLoader.load("config.properties").addListener(config -> filePathFormat = config.getString("file.path.format", "{0}src/main/java/{1}.java"));
+        DynamicConfigLoader.<LocalDynamicConfig>load("config.properties")
+                .addListener(config -> filePathFormat = config.getString("file.path.format", "{0}src/main/java/{1}.java"));
     }
 
     @RequestMapping("/tree")

