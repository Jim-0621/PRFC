File: distro/run/core/src/test/java/org/camunda/bpm/run/test/config/https/HttpsConfigurationEnabledTest.java
Patch:
@@ -67,7 +67,7 @@ public void shouldNotRedirect() {
 
     // then
     exceptionRule.expect(ResourceAccessException.class);
-    exceptionRule.expectMessage("Connection refused");
+    exceptionRule.expectMessage("I/O error on GET request for \"http://localhost:8080/engine-rest/task\":");
 
     // then
     ResponseEntity<String> response = testRestTemplate.exchange(url, HttpMethod.GET, new HttpEntity<>(null), String.class);

File: webapps/assembly/src/main/java/org/camunda/bpm/webapp/impl/db/QuerySessionFactory.java
Patch:
@@ -56,6 +56,7 @@ public void initFromProcessEngineConfiguration(ProcessEngineConfigurationImpl pr
     setDatabaseType(processEngineConfiguration.getDatabaseType());
     setDataSource(processEngineConfiguration.getDataSource());
     setDatabaseTablePrefix(processEngineConfiguration.getDatabaseTablePrefix());
+    setSkipIsolationLevelCheck(processEngineConfiguration.getSkipIsolationLevelCheck());
 
     setHistoryLevel(processEngineConfiguration.getHistoryLevel());
     setHistory(processEngineConfiguration.getHistory());

File: spin/dataformat-json-jackson/src/test/java/org/camunda/spin/json/mapping/OrderDetails.java
Patch:
@@ -22,7 +22,7 @@ public class OrderDetails {
 
   private String article;
   private double price;
-  private int roundedPrice;
+  private long roundedPrice;
   private List<String> currencies;
   private boolean paid;
 
@@ -38,10 +38,10 @@ public double getPrice() {
   public void setPrice(double price) {
     this.price = price;
   }
-  public int getRoundedPrice() {
+  public long getRoundedPrice() {
     return roundedPrice;
   }
-  public void setRoundedPrice(int roundedPrice) {
+  public void setRoundedPrice(long roundedPrice) {
     this.roundedPrice = roundedPrice;
   }
   public List<String> getCurrencies() {

File: spin/dataformat-json-jackson/src/test/java/org/camunda/spin/json/tree/JsonTreeJsonPathScriptTest.java
Patch:
@@ -79,7 +79,7 @@ public void shouldGetStringFromJsonPath() {
   public void shouldGetNumberFromJsonPath() {
     Number number = script.getVariable("numberValue");
 
-    assertThat(number.longValue()).isEqualTo(1234567890987654321L);
+    assertThat(number.doubleValue()).isEqualTo(1234567.13d);
   }
 
   @Test

File: spin/dataformat-json-jackson/src/test/java/org/camunda/spin/json/tree/JsonTreeReadPropertyScriptTest.java
Patch:
@@ -202,7 +202,7 @@ public void shouldReadNumberValue() {
 
     // python returns bigInt instead of Long
     assertThat(value2.longValue()).isEqualTo(1234567890987654321L);
-    assertThat(value3).isEqualTo(32000.45);
+    assertThat(value3).isEqualTo(1234567.13);
   }
 
   @Test(expected = SpinJsonDataFormatException.class)
@@ -260,7 +260,7 @@ public void shouldReadChildNodeProperty() {
     assertThat(property2).isNotNull();
 
     // Ruby casts this to long instead int
-    assertThat(value1.intValue()).isEqualTo(32000);
+    assertThat(value1.longValue()).isEqualTo(1234567L);
     assertThat(value2).isEqualTo("dollar");
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/helper/BpmnExceptionHandler.java
Patch:
@@ -130,9 +130,9 @@ public boolean isFulfilled(ActivityExecutionTuple element) {
       if (origException == null) {
 
         if (Context.getCommandContext().getProcessEngineConfiguration().isEnableExceptionsAfterUnhandledBpmnError()) {
-          throw LOG.missingBoundaryCatchEventError(execution.getActivity().getId(), errorCode);
+          throw LOG.missingBoundaryCatchEventError(execution.getActivity().getId(), errorCode, errorMessage);
         } else {
-          LOG.missingBoundaryCatchEvent(execution.getActivity().getId(), errorCode);
+          LOG.missingBoundaryCatchEvent(execution.getActivity().getId(), errorCode, errorMessage);
           execution.end(true);
         }
       } else {

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/tasklistener/TaskListenerErrorThrowTest.java
Patch:
@@ -289,7 +289,7 @@ public void testThrowUncaughtErrorOnCompleteAndCatchOnUserTask() {
     } catch (ProcessEngineException e) {
       // then
       assertTrue(e.getMessage().contains("There was an exception while invoking the TaskListener"));
-      assertTrue(e.getMessage().contains("Execution with id 'mainTask' throws an error event with errorCode '208', but no error handler was defined."));
+      assertTrue(e.getMessage().contains("Execution with id 'mainTask' throws an error event with errorCode '208' and errorMessage 'business error 208', but no error handler was defined."));
     }
 
     // then

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -41,7 +41,6 @@
 import java.util.Set;
 import java.util.concurrent.CopyOnWriteArraySet;
 import javax.naming.InitialContext;
-import javax.script.ScriptEngineManager;
 import javax.sql.DataSource;
 import org.apache.ibatis.builder.xml.XMLConfigBuilder;
 import org.apache.ibatis.datasource.pooled.PooledDataSource;
@@ -339,6 +338,7 @@
 import org.camunda.bpm.engine.impl.runtime.DefaultDeserializationTypeValidator;
 import org.camunda.bpm.engine.impl.scripting.ScriptFactory;
 import org.camunda.bpm.engine.impl.scripting.engine.BeansResolverFactory;
+import org.camunda.bpm.engine.impl.scripting.engine.CamundaScriptEngineManager;
 import org.camunda.bpm.engine.impl.scripting.engine.DefaultScriptEngineResolver;
 import org.camunda.bpm.engine.impl.scripting.engine.ResolverFactory;
 import org.camunda.bpm.engine.impl.scripting.engine.ScriptBindingsFactory;
@@ -2642,7 +2642,7 @@ protected void initScripting() {
       resolverFactories.add(new BeansResolverFactory());
     }
     if (scriptEngineResolver == null) {
-      scriptEngineResolver = new DefaultScriptEngineResolver(new ScriptEngineManager());
+      scriptEngineResolver = new DefaultScriptEngineResolver(new CamundaScriptEngineManager());
     }
     if (scriptingEngines == null) {
       scriptingEngines = new ScriptingEngines(new ScriptBindingsFactory(resolverFactories), scriptEngineResolver);

File: distro/run/core/src/test/java/org/camunda/bpm/run/test/config/https/HttpsConfigurationEnabledTest.java
Patch:
@@ -67,7 +67,7 @@ public void shouldNotRedirect() {
 
     // then
     exceptionRule.expect(ResourceAccessException.class);
-    exceptionRule.expectMessage("Connection refused");
+    exceptionRule.expectMessage("I/O error on GET request for \"http://localhost:8080/engine-rest/task\":");
 
     // then
     ResponseEntity<String> response = testRestTemplate.exchange(url, HttpMethod.GET, new HttpEntity<>(null), String.class);

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/SequentialJobAcquisitionRunnable.java
Patch:
@@ -157,6 +157,8 @@ protected AcquiredJobs acquireJobs(
 
     int numJobsToAcquire = acquisitionStrategy.getNumJobsToAcquire(currentProcessEngine.getName());
 
+    LOG.jobsToAcquire(currentProcessEngine.getName(), numJobsToAcquire);
+
     AcquiredJobs acquiredJobs = null;
 
     if (numJobsToAcquire > 0) {
@@ -173,6 +175,7 @@ protected AcquiredJobs acquireJobs(
     jobExecutor.logAcquisitionFailureJobs(currentProcessEngine, acquiredJobs.getNumberOfJobsFailedToLock());
 
     LOG.acquiredJobs(currentProcessEngine.getName(), acquiredJobs);
+    LOG.failedAcquisitionLocks(currentProcessEngine.getName(), acquiredJobs);
 
     return acquiredJobs;
   }

File: engine/src/main/java/org/camunda/bpm/engine/EntityTypes.java
Patch:
@@ -57,4 +57,5 @@ public class EntityTypes {
   public static final String OPERATION_LOG = "OperationLog";
   public static final String INCIDENT = "Incident";
   public static final String SYSTEM = "System";
+  public static final String COMMENT = "Comment";
 }

File: engine/src/main/java/org/camunda/bpm/engine/history/UserOperationLogEntry.java
Patch:
@@ -122,6 +122,9 @@ public interface UserOperationLogEntry {
   String OPERATION_TYPE_SET_VARIABLE = "SetVariable";
   String OPERATION_TYPE_SET_VARIABLES = "SetVariables";
 
+  String OPERATION_TYPE_UPDATE_COMMENT = "UpdateComment";
+  String OPERATION_TYPE_DELETE_COMMENT = "DeleteComment";
+
   String OPERATION_TYPE_REMOVE_VARIABLE = "RemoveVariable";
   String OPERATION_TYPE_MODIFY_VARIABLE = "ModifyVariable";
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -412,6 +412,7 @@ public class DbSqlSessionFactory implements SessionFactory {
       addDatabaseSpecificStatement(postgresLikeDatabase, "selectCommentsByTaskId", "selectCommentsByTaskId_postgres");
       addDatabaseSpecificStatement(postgresLikeDatabase, "selectCommentsByProcessInstanceId", "selectCommentsByProcessInstanceId_postgres");
       addDatabaseSpecificStatement(postgresLikeDatabase, "selectCommentByTaskIdAndCommentId", "selectCommentByTaskIdAndCommentId_postgres");
+      addDatabaseSpecificStatement(postgresLikeDatabase, "selectCommentByProcessInstanceIdAndCommentId", "selectCommentByProcessInstanceIdAndCommentId_postgres");
       addDatabaseSpecificStatement(postgresLikeDatabase, "selectEventsByTaskId", "selectEventsByTaskId_postgres");
       addDatabaseSpecificStatement(postgresLikeDatabase, "selectFilterByQueryCriteria", "selectFilterByQueryCriteria_postgres");
       addDatabaseSpecificStatement(postgresLikeDatabase, "selectFilter", "selectFilter_postgres");

File: engine/src/main/java/org/camunda/bpm/engine/impl/batch/variables/BatchSetVariablesHandler.java
Patch:
@@ -51,7 +51,7 @@ public void executeHandler(BatchConfiguration batchConfiguration,
 
     for (String processInstanceId : processInstanceIds) {
       commandContext.executeWithOperationLogPrevented(
-          new SetExecutionVariablesCmd(processInstanceId, variables, false, true));
+          new SetExecutionVariablesCmd(processInstanceId, variables, false, true, false));
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/history/HistoricProcessInstanceQuery.java
Patch:
@@ -441,7 +441,8 @@ public interface HistoricProcessInstanceQuery extends Query<HistoricProcessInsta
   HistoricProcessInstanceQuery activeActivityIdIn(String... ids);
 
   /**
-   * Only select historic process instances with an active activity with one of the given ids. This filter behaves differently as `activeActivityIdIn` since it also yields results when filtering for activities with an incident.
+   * Only select historic process instances with an active activity with one of the given ids.
+   * In contrast to the `activeActivityIdIn` filter, it can query for async and incident activities.
    */
   HistoricProcessInstanceQuery activityIdIn(String... ids);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -1941,6 +1941,7 @@ public static void initSqlSessionFactoryProperties(Properties properties, String
       properties.put("authJoin1Separator", DbSqlSessionFactory.databaseSpecificAuth1JoinSeparator.get(databaseType));
 
       properties.put("extractTimeUnitFromDate", DbSqlSessionFactory.databaseSpecificExtractTimeUnitFromDate.get(databaseType));
+      properties.put("authCheckMethodSuffix", DbSqlSessionFactory.databaseSpecificAuthCheckMethodSuffix.getOrDefault(databaseType, ""));
 
       Map<String, String> constants = DbSqlSessionFactory.dbSpecificConstants.get(databaseType);
       for (Entry<String, String> entry : constants.entrySet()) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -106,6 +106,8 @@ public class DbSqlSessionFactory implements SessionFactory {
   public static final Map<String, String> databaseSpecificAuth1JoinSeparator = new HashMap<>();
 
   public static final Map<String, String> databaseSpecificExtractTimeUnitFromDate = new HashMap<>();
+  public static final Map<String, String> databaseSpecificAuthCheckMethodSuffix = new HashMap<>();
+
 
   /*
    * On SQL server, the overall maximum number of parameters in a prepared statement
@@ -729,6 +731,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     databaseSpecificAuthJoinStart.put(MSSQL, defaultAuthOnStart);
     databaseSpecificAuthJoinEnd.put(MSSQL, defaultAuthOnEnd);
     databaseSpecificAuthJoinSeparator.put(MSSQL, defaultAuthOnSeparator);
+    databaseSpecificAuthCheckMethodSuffix.put(MSSQL, "_mssql");
 
     databaseSpecificAuth1JoinStart.put(MSSQL, defaultAuthOnStart);
     databaseSpecificAuth1JoinEnd.put(MSSQL, defaultAuthOnEnd);

File: engine/src/test/java/org/camunda/bpm/engine/test/history/JobEntityAndJobLogBatchIdTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.camunda.bpm.engine.ExternalTaskService;
 import org.camunda.bpm.engine.HistoryService;
 import org.camunda.bpm.engine.ManagementService;
+import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.batch.Batch;
 import org.camunda.bpm.engine.externaltask.ExternalTask;
@@ -39,6 +40,7 @@
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.test.Deployment;
 import org.camunda.bpm.engine.test.ProcessEngineRule;
+import org.camunda.bpm.engine.test.RequiredHistoryLevel;
 import org.camunda.bpm.engine.test.api.history.removaltime.batch.helper.BatchSetRemovalTimeRule;
 import org.camunda.bpm.engine.test.util.BatchRule;
 import org.camunda.bpm.engine.test.util.ProcessEngineTestRule;
@@ -51,6 +53,7 @@
 import org.junit.Test;
 import org.junit.rules.RuleChain;
 
+@RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_FULL)
 public class JobEntityAndJobLogBatchIdTest {
 
   protected ProcessEngineRule engineRule = new ProvidedProcessEngineRule();

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/JobRestServiceInteractionTest.java
Patch:
@@ -117,6 +117,7 @@ public void setUpRuntimeData() {
       .jobDefinitionId(MockProvider.EXAMPLE_JOB_DEFINITION_ID)
       .tenantId(MockProvider.EXAMPLE_TENANT_ID)
       .createTime(DateTimeUtil.parseDate(MockProvider.EXAMPLE_JOB_CREATE_TIME))
+      .batchId(MockProvider.EXAMPLE_BATCH_ID)
       .build();
 
     when(mockQuery.singleResult()).thenReturn(mockedJob);
@@ -294,6 +295,7 @@ public void testSimpleJobGet() {
       .body("jobDefinitionId", equalTo(MockProvider.EXAMPLE_JOB_DEFINITION_ID))
       .body("tenantId", equalTo(MockProvider.EXAMPLE_TENANT_ID))
       .body("createTime", equalTo(MockProvider.EXAMPLE_JOB_CREATE_TIME))
+      .body("batchId", equalTo(MockProvider.EXAMPLE_BATCH_ID))
     .when()
       .get(SINGLE_JOB_RESOURCE_URL);
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/JobRestServiceQueryTest.java
Patch:
@@ -164,6 +164,7 @@ public void testSimpleJobQuery() {
     String returnedJobDefinitionId= from(content).getString("[0].jobDefinitionId");
     String returnedTenantId = from(content).getString("[0].tenantId");
     String returnedCreateTime = from(content).getString("[0].createTime");
+    String returnedBatchId = from(content).getString("[0].batchId");
 
     Assert.assertEquals(MockProvider.EXAMPLE_JOB_ID, returnedJobId);
     Assert.assertEquals(MockProvider.EXAMPLE_PROCESS_INSTANCE_ID, returnedProcessInstanceId);
@@ -179,6 +180,7 @@ public void testSimpleJobQuery() {
     Assert.assertEquals(MockProvider.EXAMPLE_JOB_DEFINITION_ID, returnedJobDefinitionId);
     Assert.assertEquals(MockProvider.EXAMPLE_TENANT_ID, returnedTenantId);
     Assert.assertEquals(MockProvider.EXAMPLE_JOB_CREATE_TIME, returnedCreateTime);
+    Assert.assertEquals(MockProvider.EXAMPLE_BATCH_ID, returnedBatchId);
   }
 
   private interface DateParameters {

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -1868,7 +1868,8 @@ public static MockJobBuilder mockJob() {
       .priority(EXAMPLE_JOB_PRIORITY)
       .jobDefinitionId(EXAMPLE_JOB_DEFINITION_ID)
       .createTime(DateTimeUtil.parseDate(EXAMPLE_JOB_CREATE_TIME))
-      .failedActivityId(EXAMPLE_JOB_FAILED_ACTIVITY_ID);
+      .failedActivityId(EXAMPLE_JOB_FAILED_ACTIVITY_ID)
+      .batchId(EXAMPLE_BATCH_ID);
   }
 
   public static List<Job> createMockJobs() {
@@ -2985,6 +2986,7 @@ public static HistoricJobLog createMockHistoricJobLog(String tenantId) {
     when(mock.getTenantId()).thenReturn(tenantId);
     when(mock.getRootProcessInstanceId()).thenReturn(EXAMPLE_HISTORIC_JOB_LOG_ROOT_PROC_INST_ID);
     when(mock.getHostname()).thenReturn(EXAMPLE_HISTORIC_JOB_LOG_HOSTNAME);
+    when(mock.getBatchId()).thenReturn(EXAMPLE_BATCH_ID);
 
     when(mock.isCreationLog()).thenReturn(EXAMPLE_HISTORIC_JOB_LOG_IS_CREATION_LOG);
     when(mock.isFailureLog()).thenReturn(EXAMPLE_HISTORIC_JOB_LOG_IS_FAILURE_LOG);

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricJobLogRestServiceInteractionTest.java
Patch:
@@ -106,6 +106,7 @@ public void testSimpleHistoricJobLogGet() {
         .body("tenantId", equalTo(MockProvider.EXAMPLE_TENANT_ID))
         .body("hostname", equalTo(MockProvider.EXAMPLE_HISTORIC_JOB_LOG_HOSTNAME))
         .body("rootProcessInstanceId", equalTo(MockProvider.EXAMPLE_HISTORIC_JOB_LOG_ROOT_PROC_INST_ID))
+        .body("batchId", equalTo(MockProvider.EXAMPLE_BATCH_ID))
         .body("creationLog", equalTo(MockProvider.EXAMPLE_HISTORIC_JOB_LOG_IS_CREATION_LOG))
         .body("failureLog", equalTo(MockProvider.EXAMPLE_HISTORIC_JOB_LOG_IS_FAILURE_LOG))
         .body("successLog", equalTo(MockProvider.EXAMPLE_HISTORIC_JOB_LOG_IS_SUCCESS_LOG))

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -1125,6 +1125,7 @@ protected void initHistoricJobLogEvent(HistoricJobLogEventEntity evt, Job job, H
 
     JobEntity jobEntity = (JobEntity) job;
     evt.setJobId(jobEntity.getId());
+    evt.setBatchId(jobEntity.getBatchId());
     evt.setJobDueDate(jobEntity.getDuedate());
     evt.setJobRetries(jobEntity.getRetries());
     evt.setJobPriority(jobEntity.getPriority());

File: clients/java/client/src/main/java/org/camunda/bpm/client/variable/impl/TypedValues.java
Patch:
@@ -69,7 +69,7 @@ public Map<String, TypedValueField> serializeVariables(Map<String, Object> varia
 
   @SuppressWarnings("rawtypes")
   public Map<String, VariableValue> wrapVariables(ExternalTask externalTask, Map<String, TypedValueField> variables) {
-    String processInstanceId = externalTask.getProcessInstanceId();
+    String executionId = externalTask.getExecutionId();
 
     Map<String, VariableValue> result = new HashMap<>();
 
@@ -80,7 +80,7 @@ public Map<String, VariableValue> wrapVariables(ExternalTask externalTask, Map<S
         typeName = Character.toLowerCase(typeName.charAt(0)) + typeName.substring(1);
         variableValue.setType(typeName);
 
-        VariableValue value = new VariableValue(processInstanceId, variableName, variableValue, serializers);
+        VariableValue value = new VariableValue(executionId, variableName, variableValue, serializers);
         result.put(variableName, value);
       });
     }

File: spring-boot-starter/starter-security/src/main/java/org/camunda/bpm/spring/boot/starter/security/oauth2/CamundaSpringSecurityOAuth2AutoConfiguration.java
Patch:
@@ -88,7 +88,7 @@ public FilterRegistrationBean<?> webappAuthenticationFilter() {
   }
 
   @Bean
-  @ConditionalOnProperty(name = "identity-provider.enabled", havingValue = "true", prefix = OAuth2Properties.PREFIX)
+  @ConditionalOnProperty(name = "identity-provider.enabled", havingValue = "true", prefix = OAuth2Properties.PREFIX, matchIfMissing = true)
   public OAuth2IdentityProviderPlugin identityProviderPlugin() {
     logger.debug("Registering OAuth2IdentityProviderPlugin");
     return new OAuth2IdentityProviderPlugin();

File: spring-boot-starter/starter-security/src/main/java/org/camunda/bpm/spring/boot/starter/security/oauth2/OAuth2Properties.java
Patch:
@@ -68,9 +68,9 @@ public void setPostLogoutRedirectUri(String postLogoutRedirectUri) {
 
   public static class OAuth2IdentityProviderProperties {
     /**
-     * Enable {@link OAuth2IdentityProvider}.
+     * Enable {@link OAuth2IdentityProvider}. Default {@code true}.
      */
-    private boolean enabled = false;
+    private boolean enabled = true;
 
     /**
      * Name of the attribute (claim) that holds the groups.

File: spring-boot-starter/starter-security/src/main/java/org/camunda/bpm/spring/boot/starter/security/oauth2/OAuth2Properties.java
Patch:
@@ -45,7 +45,7 @@ public static class OAuth2SSOLogoutProperties {
     private boolean enabled = false;
 
     /**
-     * Enable SSO Logout. Default {@code {baseUrl}}.
+     * URI the user is redirected after SSO logout from the provider. Default {@code {baseUrl}}.
      */
     private String postLogoutRedirectUri = "{baseUrl}";
 

File: distro/run/core/src/main/java/org/camunda/bpm/run/property/CamundaBpmRunProcessEnginePluginProperty.java
Patch:
@@ -17,7 +17,6 @@
 package org.camunda.bpm.run.property;
 
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.Map;
 
 public class CamundaBpmRunProcessEnginePluginProperty {

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/TaskRestService.java
Patch:
@@ -36,7 +36,7 @@ public interface TaskRestService {
   public static final String PATH = "/task";
 
   @Path("/{id}")
-  TaskResource getTask(@PathParam("id") String id);
+  TaskResource getTask(@PathParam("id") String id, @QueryParam("withCommentAttachmentInfo") boolean withCommentAttachmentInfo);
 
   @GET
   @Produces({MediaType.APPLICATION_JSON, Hal.APPLICATION_HAL_JSON})

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -2183,6 +2183,7 @@ public static HistoricProcessInstance createMockHistoricProcessInstance(String t
     when(mock.getCaseInstanceId()).thenReturn(EXAMPLE_HISTORIC_PROCESS_INSTANCE_CASE_INSTANCE_ID);
     when(mock.getTenantId()).thenReturn(tenantId);
     when(mock.getState()).thenReturn(EXAMPLE_HISTORIC_PROCESS_INSTANCE_STATE);
+    when(mock.getRestartedProcessInstanceId()).thenReturn(EXAMPLE_PROCESS_INSTANCE_ID);
 
     return mock;
   }

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricProcessInstanceRestServiceInteractionTest.java
Patch:
@@ -123,6 +123,7 @@ public void testGetSingleInstance() {
     String returnedCaseInstanceId = from(content).getString("caseInstanceId");
     String returnedTenantId = from(content).getString("tenantId");
     String returnedState = from(content).getString("state");
+    String restartedProcessInstanceId = from(content).getString("restartedProcessInstanceId");
 
     Assert.assertEquals(MockProvider.EXAMPLE_PROCESS_INSTANCE_ID, returnedProcessInstanceId);
     Assert.assertEquals(MockProvider.EXAMPLE_PROCESS_INSTANCE_BUSINESS_KEY, returnedProcessInstanceBusinessKey);
@@ -139,6 +140,7 @@ public void testGetSingleInstance() {
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_PROCESS_INSTANCE_CASE_INSTANCE_ID, returnedCaseInstanceId);
     Assert.assertEquals(MockProvider.EXAMPLE_TENANT_ID, returnedTenantId);
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_PROCESS_INSTANCE_STATE, returnedState);
+    Assert.assertEquals(MockProvider.EXAMPLE_PROCESS_INSTANCE_ID, restartedProcessInstanceId);
 
   }
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricProcessInstanceRestServiceQueryTest.java
Patch:
@@ -429,6 +429,7 @@ public void testSimpleHistoricProcessQuery() {
     String returnedCaseInstanceId = from(content).getString("[0].caseInstanceId");
     String returnedTenantId = from(content).getString("[0].tenantId");
     String returnedState = from(content).getString("[0].state");
+    String restartedProcessInstanceId = from(content).getString("[0].restartedProcessInstanceId");
 
     Assert.assertEquals(MockProvider.EXAMPLE_PROCESS_INSTANCE_ID, returnedProcessInstanceId);
     Assert.assertEquals(MockProvider.EXAMPLE_PROCESS_INSTANCE_BUSINESS_KEY, returnedProcessInstanceBusinessKey);
@@ -449,6 +450,7 @@ public void testSimpleHistoricProcessQuery() {
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_PROCESS_INSTANCE_CASE_INSTANCE_ID, returnedCaseInstanceId);
     Assert.assertEquals(MockProvider.EXAMPLE_TENANT_ID, returnedTenantId);
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_PROCESS_INSTANCE_STATE, returnedState);
+    Assert.assertEquals(MockProvider.EXAMPLE_PROCESS_INSTANCE_ID, restartedProcessInstanceId);
   }
 
   @Test

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/RestartProcessInstancesCmd.java
Patch:
@@ -103,6 +103,8 @@ public Void execute(final CommandContext commandContext) {
             getProcessInstantiationBuilder(commandExecutor, processDefinitionId);
         applyProperties(instantiationBuilder, processDefinition, historicProcessInstance);
 
+        instantiationBuilder.setRestartedProcessInstanceId(processInstanceId);
+
         ProcessInstanceModificationBuilderImpl modificationBuilder =
             instantiationBuilder.getModificationBuilder();
 
@@ -167,7 +169,6 @@ protected void applyProperties(ProcessInstantiationBuilderImpl instantiationBuil
     if (!builder.isWithoutBusinessKey()) {
       instantiationBuilder.businessKey(processInstance.getBusinessKey());
     }
-
   }
 
   protected VariableMap collectVariables(CommandContext commandContext,

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/StartProcessInstanceAtActivitiesCmd.java
Patch:
@@ -79,6 +79,8 @@ public ProcessInstanceWithVariables execute(CommandContext commandContext) {
       processInstance.setTenantId(instantiationBuilder.getTenantId());
     }
 
+    processInstance.setRestartedProcessInstanceId(instantiationBuilder.getRestartedProcessInstanceId());
+
     processInstance.setSkipCustomListeners(modificationBuilder.isSkipCustomListeners());
     VariableMap variables = modificationBuilder.getProcessVariables();
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -204,6 +204,7 @@ protected void initProcessInstanceEvent(HistoricProcessInstanceEventEntity evt,
     evt.setCaseInstanceId(caseInstanceId);
     evt.setTenantId(tenantId);
     evt.setRootProcessInstanceId(execution.getRootProcessInstanceId());
+    evt.setRestartedProcessInstanceId(execution.getRestartedProcessInstanceId());
 
     if (execution.getSuperCaseExecution() != null) {
       evt.setSuperCaseInstanceId(execution.getSuperCaseExecution().getCaseInstanceId());

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricProcessInstanceStateTest.java
Patch:
@@ -83,6 +83,8 @@ public void testCompletedOnEndEvent() {
     ProcessDefinition processDefinition = processEngineTestRule.deployAndGetDefinition(instance);
     processEngineRule.getRuntimeService().startProcessInstanceById(processDefinition.getId());
     HistoricProcessInstance entity = getHistoricProcessInstanceWithAssertion(processDefinition);
+
+    assertThat(entity.getRestartedProcessInstanceId()).isNull();
     assertThat(entity.getState()).isEqualTo(HistoricProcessInstance.STATE_COMPLETED);
   }
 

File: quarkus-extension/engine/deployment/src/test/java/org/camunda/bpm/quarkus/engine/test/config/CamundaEngineConfigFileTest.java
Patch:
@@ -67,10 +67,10 @@ public void shouldLoadAllConfigProperties() throws SQLException {
     assertThat(jobExecutor.getMaxWait()).isEqualTo(65000);
     assertThat(jobExecutor.getBackoffTimeInMillis()).isEqualTo(5);
     // assert correct thread pool config
-    assertThat(config.jobExecutor.threadPool.maxPoolSize).isEqualTo(12);
-    assertThat(config.jobExecutor.threadPool.queueSize).isEqualTo(5);
+    assertThat(config.jobExecutor().threadPool().maxPoolSize()).isEqualTo(12);
+    assertThat(config.jobExecutor().threadPool().queueSize()).isEqualTo(5);
     // assert correct datasource
-    assertThat(config.datasource).hasValue("camunda");
+    assertThat(config.datasource()).hasValue("camunda");
     assertThat(configuration.getDataSource().getConnection()).asString().contains("h2:mem:camunda");
   }
 }
\ No newline at end of file

File: quarkus-extension/engine/deployment/src/test/java/org/camunda/bpm/quarkus/engine/test/config/CamundaEngineConfigurationConfigTest.java
Patch:
@@ -49,9 +49,9 @@ public void shouldLoadProcessEngineConfigurationProperties() {
     // given a custom application.properties file
 
     // then
-    assertThat(config.genericConfig.get("cmmn-enabled")).isEqualTo("false");
-    assertThat(config.genericConfig.get("dmn-enabled")).isEqualTo("false");
-    assertThat(config.genericConfig.get("history")).isEqualTo("none");
+    assertThat(config.genericConfig().get("cmmn-enabled")).isEqualTo("false");
+    assertThat(config.genericConfig().get("dmn-enabled")).isEqualTo("false");
+    assertThat(config.genericConfig().get("history")).isEqualTo("none");
   }
 
   @Test

File: quarkus-extension/engine/deployment/src/test/java/org/camunda/bpm/quarkus/engine/test/config/CamundaEngineProgrammaticAndConfigFileTest.java
Patch:
@@ -88,10 +88,10 @@ public void shouldUseProvidedConfigurationAndConfigProperties() throws SQLExcept
     assertThat(jobExecutor.getMaxWait()).isEqualTo(65000);
     assertThat(jobExecutor.getBackoffTimeInMillis()).isEqualTo(5);
     // assert correct thread pool config
-    assertThat(config.jobExecutor.threadPool.maxPoolSize).isEqualTo(12);
-    assertThat(config.jobExecutor.threadPool.queueSize).isEqualTo(5);
+    assertThat(config.jobExecutor().threadPool().maxPoolSize()).isEqualTo(12);
+    assertThat(config.jobExecutor().threadPool().queueSize()).isEqualTo(5);
     // assert correct datasource
-    assertThat(config.datasource).hasValue("camunda");
+    assertThat(config.datasource()).hasValue("camunda");
     assertThat(configuration.getDataSource().getConnection()).asString().contains("h2:mem:camunda");
   }
 }
\ No newline at end of file

File: distro/run/qa/integration-tests/src/test/java/org/camunda/bpm/run/qa/ComponentAvailabilityIT.java
Patch:
@@ -57,7 +57,8 @@ public static Collection<Object[]> commands() {
       { new String[]{"--rest", "--example"}, true, false, true },
       { new String[]{"--webapps"}, false, true, false },
       { new String[]{"--rest", "--webapps"}, true, true, false },
-      { new String[]{"--rest", "--webapps", "--example"}, true, true, true }
+      { new String[]{"--rest", "--webapps", "--example"}, true, true, true },
+      { new String[]{"--rest", "--webapps", "--example", "--oauth2"}, true, true, true }
     });
   }
 

File: distro/run/core/src/main/java/org/camunda/bpm/run/CamundaBpmRunProcessEngineConfiguration.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Set;
 
 import org.camunda.bpm.engine.ProcessEngineException;
-import org.camunda.bpm.engine.impl.telemetry.CamundaIntegration;
+import org.camunda.bpm.engine.impl.diagnostics.CamundaIntegration;
 import org.camunda.bpm.engine.spring.SpringProcessEngineConfiguration;
 import org.springframework.core.env.Environment;
 import org.springframework.core.io.Resource;

File: distro/run/core/src/test/java/org/camunda/bpm/run/test/TelemetryDataTest.java
Patch:
@@ -22,7 +22,7 @@
 
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
-import org.camunda.bpm.engine.impl.telemetry.CamundaIntegration;
+import org.camunda.bpm.engine.impl.diagnostics.CamundaIntegration;
 import org.camunda.bpm.engine.impl.telemetry.dto.TelemetryDataImpl;
 import org.camunda.bpm.run.CamundaBpmRun;
 import org.junit.Test;

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/config/ManagedJtaProcessEngineConfiguration.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Set;
 import org.camunda.bpm.engine.impl.cfg.JakartaTransactionProcessEngineConfiguration;
 import org.camunda.bpm.engine.impl.persistence.StrongUuidGenerator;
-import org.camunda.bpm.engine.impl.telemetry.CamundaIntegration;
+import org.camunda.bpm.engine.impl.diagnostics.CamundaIntegration;
 
 /**
  *

File: distro/wildfly26/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/config/ManagedJtaProcessEngineConfiguration.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.camunda.bpm.engine.impl.cfg.JtaProcessEngineConfiguration;
 import org.camunda.bpm.engine.impl.persistence.StrongUuidGenerator;
-import org.camunda.bpm.engine.impl.telemetry.CamundaIntegration;
+import org.camunda.bpm.engine.impl.diagnostics.CamundaIntegration;
 
 /**
  *

File: engine-plugins/connect-plugin/src/main/java/org/camunda/connect/plugin/impl/ConnectProcessEnginePlugin.java
Patch:
@@ -34,8 +34,6 @@ public void preInit(ProcessEngineConfigurationImpl processEngineConfiguration) {
     Connectors.loadConnectors(classloader);
 
     addConnectorParseListener(processEngineConfiguration);
-
-    processEngineConfiguration.setTelemetryHttpConnector(Connectors.getConnector(Connectors.HTTP_CONNECTOR_ID));
   }
 
   private void addConnectorParseListener(ProcessEngineConfigurationImpl processEngineConfiguration) {
@@ -47,4 +45,4 @@ private void addConnectorParseListener(ProcessEngineConfigurationImpl processEng
     preParseListeners.add(new ConnectorParseListener());
   }
 
-}
+}
\ No newline at end of file

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -1014,7 +1014,6 @@ public abstract class MockProvider {
   public static final InternalsImpl EXAMPLE_TELEMETRY_INTERNALS = new InternalsImpl(EXAMPLE_TELEMETRY_DATABASE,
       EXAMPLE_TELEMETRY_SERVER, EXAMPLE_TELEMETRY_LICENSE, EXAMPLE_TELEMETRY_JDK);
   static {
-    EXAMPLE_TELEMETRY_INTERNALS.setTelemetryEnabled(false);
     EXAMPLE_TELEMETRY_INTERNALS.setCamundaIntegration(
         Stream.of("spring-boot-starter", "camunda-bpm-run").collect(Collectors.toCollection(HashSet::new)));
     EXAMPLE_TELEMETRY_INTERNALS

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SetLicenseKeyCmd.java
Patch:
@@ -58,13 +58,13 @@ public Object execute(CommandContext commandContext) {
     // cleanup legacy property
     commandContext.runWithoutAuthorization(new DeletePropertyCmd(LICENSE_KEY_PROPERTY_NAME));
 
-    // add raw license to telemetry data if not there already
+    // add raw license to diagnostics data if not there already
     ManagementServiceImpl managementService = (ManagementServiceImpl) commandContext.getProcessEngineConfiguration().getManagementService();
-    LicenseKeyDataImpl currentLicenseData = managementService.getLicenseKeyFromTelemetry();
+    LicenseKeyDataImpl currentLicenseData = managementService.getLicenseKeyFromDiagnostics();
     // only report license body without signature
     LicenseKeyDataImpl licenseKeyData = LicenseKeyDataImpl.fromRawString(licenseKey);
     if (currentLicenseData == null || !licenseKeyData.getRaw().equals(currentLicenseData.getRaw())) {
-      managementService.setLicenseKeyForTelemetry(licenseKeyData);
+      managementService.setLicenseKeyForDiagnostics(licenseKeyData);
     }
 
     return null;

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -749,7 +749,6 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement(MSSQL, "lockDeploymentLockProperty", "lockDeploymentLockProperty_mssql");
     addDatabaseSpecificStatement(MSSQL, "lockHistoryCleanupJobLockProperty", "lockHistoryCleanupJobLockProperty_mssql");
     addDatabaseSpecificStatement(MSSQL, "lockStartupLockProperty", "lockStartupLockProperty_mssql");
-    addDatabaseSpecificStatement(MSSQL, "lockTelemetryLockProperty", "lockTelemetryLockProperty_mssql");
     addDatabaseSpecificStatement(MSSQL, "lockInstallationIdLockProperty", "lockInstallationIdLockProperty_mssql");
     addDatabaseSpecificStatement(MSSQL, "selectEventSubscriptionsByNameAndExecution", "selectEventSubscriptionsByNameAndExecution_mssql");
     addDatabaseSpecificStatement(MSSQL, "selectEventSubscriptionsByExecutionAndType", "selectEventSubscriptionsByExecutionAndType_mssql");

File: engine/src/main/java/org/camunda/bpm/engine/impl/diagnostics/CamundaIntegration.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.telemetry;
+package org.camunda.bpm.engine.impl.diagnostics;
 
 public class CamundaIntegration {
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/diagnostics/PlatformDiagnosticsRegistry.java
Patch:
@@ -14,11 +14,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.telemetry;
+package org.camunda.bpm.engine.impl.diagnostics;
 
 import org.camunda.bpm.engine.impl.telemetry.dto.ApplicationServerImpl;
 
-public class PlatformTelemetryRegistry {
+public class PlatformDiagnosticsRegistry {
 
   protected static ApplicationServerImpl applicationServer;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/util/ProcessEngineDetails.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * Holds process engine version and edition (enterprise or community)
- * Used in retrieving the process engine details when sending telemetry data
+ * Used in retrieving the process engine details for diagnostics data
  */
 public class ProcessEngineDetails {
 

File: engine/src/main/java/org/camunda/bpm/engine/test/ProcessEngineRule.java
Patch:
@@ -36,7 +36,7 @@
 import org.camunda.bpm.engine.TaskService;
 import org.camunda.bpm.engine.impl.ProcessEngineImpl;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
-import org.camunda.bpm.engine.impl.telemetry.PlatformTelemetryRegistry;
+import org.camunda.bpm.engine.impl.diagnostics.PlatformDiagnosticsRegistry;
 import org.camunda.bpm.engine.impl.test.RequiredDatabase;
 import org.camunda.bpm.engine.impl.test.TestHelper;
 import org.camunda.bpm.engine.impl.util.ClockUtil;
@@ -257,7 +257,7 @@ public void finished(Description description) {
 
     clearServiceReferences();
 
-    PlatformTelemetryRegistry.clear();
+    PlatformDiagnosticsRegistry.clear();
   }
 
   public void setCurrentTime(Date currentTime) {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/AuthorizationLoggingTest.java
Patch:
@@ -68,7 +68,7 @@ public void shouldLogOnDebugLevel() {
         .start();
 
     // when
-    engineRule.getManagementService().toggleTelemetry(true);
+    engineRule.getManagementService().getTelemetryData();
 
     // then
     String message = "ENGINE-03110 Required admin authenticated group or user or any of the following permissions:";

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/license/LicenseKeyTelemetryTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.camunda.bpm.engine.ManagementService;
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
-import org.camunda.bpm.engine.impl.telemetry.TelemetryRegistry;
+import org.camunda.bpm.engine.impl.diagnostics.DiagnosticsRegistry;
 import org.camunda.bpm.engine.impl.telemetry.dto.LicenseKeyDataImpl;
 import org.camunda.bpm.engine.test.util.ProcessEngineTestRule;
 import org.camunda.bpm.engine.test.util.ProvidedProcessEngineRule;
@@ -42,14 +42,14 @@ public class LicenseKeyTelemetryTest {
   ProcessEngine processEngine;
   ProcessEngineConfigurationImpl processEngineConfiguration;
   ManagementService managementService;
-  TelemetryRegistry telemetryRegistry;
+  DiagnosticsRegistry telemetryRegistry;
 
   @Before
   public void init() {
     processEngine = engineRule.getProcessEngine();
     processEngineConfiguration = (ProcessEngineConfigurationImpl) processEngine.getProcessEngineConfiguration();
     managementService = processEngine.getManagementService();
-    telemetryRegistry = processEngineConfiguration.getTelemetryRegistry();
+    telemetryRegistry = processEngineConfiguration.getDiagnosticsRegistry();
   }
 
   @After

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/telemetry/TelemetryStaticDataTest.java
Patch:
@@ -18,9 +18,12 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+import org.camunda.bpm.engine.impl.db.sql.DbSqlSessionFactory;
 import org.camunda.bpm.engine.impl.telemetry.dto.ApplicationServerImpl;
+import org.camunda.bpm.engine.impl.test.RequiredDatabase;
 import org.junit.Test;
 
+@RequiredDatabase(includes = DbSqlSessionFactory.H2) // it's h2-specific test
 public class TelemetryStaticDataTest {
 
   @Test

File: javaee/ejb-service/src/main/java/org/camunda/bpm/container/impl/ejb/EjbBpmPlatformBootstrap.java
Patch:
@@ -22,15 +22,16 @@
 import org.camunda.bpm.container.RuntimeContainerDelegate;
 import org.camunda.bpm.container.impl.RuntimeContainerDelegateImpl;
 import org.camunda.bpm.container.impl.deployment.DiscoverBpmPlatformPluginsStep;
+import org.camunda.bpm.container.impl.deployment.PlatformXmlStartProcessEnginesStep;
 import org.camunda.bpm.container.impl.deployment.StopProcessApplicationsStep;
 import org.camunda.bpm.container.impl.deployment.StopProcessEnginesStep;
 import org.camunda.bpm.container.impl.deployment.UnregisterBpmPlatformPluginsStep;
 import org.camunda.bpm.container.impl.deployment.jobexecutor.StartJobExecutorStep;
 import org.camunda.bpm.container.impl.deployment.jobexecutor.StopJobExecutorStep;
 import org.camunda.bpm.container.impl.ejb.deployment.EjbJarParsePlatformXmlStep;
-import org.camunda.bpm.container.impl.ejb.deployment.EjbPlatformXmlStartProcessEnginesStep;
 import org.camunda.bpm.container.impl.ejb.deployment.StartJcaExecutorServiceStep;
 import org.camunda.bpm.container.impl.ejb.deployment.StopJcaExecutorServiceStep;
+
 import javax.annotation.PostConstruct;
 import javax.annotation.PreDestroy;
 import javax.ejb.EJB;
@@ -71,7 +72,7 @@ protected void start() {
       .addStep(new DiscoverBpmPlatformPluginsStep())
       .addStep(new StartJcaExecutorServiceStep(executorServiceBean))
       .addStep(new StartJobExecutorStep())
-      .addStep(new EjbPlatformXmlStartProcessEnginesStep())
+      .addStep(new PlatformXmlStartProcessEnginesStep())
       .execute();
 
     processEngineService = containerDelegate.getProcessEngineService();

File: quarkus-extension/engine/deployment/src/test/java/org/camunda/bpm/quarkus/engine/test/config/CamundaEngineConfigFileTest.java
Patch:
@@ -60,7 +60,6 @@ public void shouldLoadAllConfigProperties() throws SQLException {
     assertThat(configuration.isCmmnEnabled()).isFalse();
     assertThat(configuration.isDmnEnabled()).isFalse();
     assertThat(configuration.getHistory()).isEqualTo("none");
-    assertThat(configuration.isInitializeTelemetry()).isFalse();
     // assert job executor properties
     assertThat(jobExecutor.getMaxJobsPerAcquisition()).isEqualTo(5);
     assertThat(jobExecutor.getLockTimeInMillis()).isEqualTo(500000);

File: quarkus-extension/engine/deployment/src/test/java/org/camunda/bpm/quarkus/engine/test/config/CamundaEngineConfigurationConfigTest.java
Patch:
@@ -52,7 +52,6 @@ public void shouldLoadProcessEngineConfigurationProperties() {
     assertThat(config.genericConfig.get("cmmn-enabled")).isEqualTo("false");
     assertThat(config.genericConfig.get("dmn-enabled")).isEqualTo("false");
     assertThat(config.genericConfig.get("history")).isEqualTo("none");
-    assertThat(config.genericConfig.get("initialize-telemetry")).isEqualTo("false");
   }
 
   @Test
@@ -66,7 +65,6 @@ public void shouldApplyProcessEngineConfigurationProperties() {
     assertThat(configuration.isCmmnEnabled()).isEqualTo(false);
     assertThat(configuration.isDmnEnabled()).isEqualTo(false);
     assertThat(configuration.getHistory()).isEqualTo("none");
-    assertThat(configuration.isInitializeTelemetry()).isEqualTo(false);
   }
 
 }
\ No newline at end of file

File: quarkus-extension/engine/deployment/src/test/java/org/camunda/bpm/quarkus/engine/test/config/CamundaEngineProgrammaticAndConfigFileTest.java
Patch:
@@ -81,7 +81,6 @@ public void shouldUseProvidedConfigurationAndConfigProperties() throws SQLExcept
     assertThat(configuration.isCmmnEnabled()).isFalse();
     assertThat(configuration.isDmnEnabled()).isFalse();
     assertThat(configuration.getHistory()).isEqualTo("none");
-    assertThat(configuration.isInitializeTelemetry()).isFalse();
     // assert job executor properties
     assertThat(jobExecutor.getMaxJobsPerAcquisition()).isEqualTo(5);
     assertThat(jobExecutor.getLockTimeInMillis()).isEqualTo(500000);

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/telemetry/CamundaIntegrationDeterminator.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
-import org.camunda.bpm.engine.impl.telemetry.CamundaIntegration;
+import org.camunda.bpm.engine.impl.diagnostics.CamundaIntegration;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
@@ -31,6 +31,7 @@ public class CamundaIntegrationDeterminator implements InitializingBean {
   @Autowired
   protected ProcessEngine processEngine;
 
+  @Override
   public void afterPropertiesSet() throws Exception {
     ProcessEngineConfigurationImpl configuration = (ProcessEngineConfigurationImpl) processEngine.getProcessEngineConfiguration();
 

File: test-utils/junit5-extension/src/main/java/org/camunda/bpm/engine/test/junit5/ProcessEngineExtension.java
Patch:
@@ -41,7 +41,7 @@
 import org.camunda.bpm.engine.impl.ProcessEngineImpl;
 import org.camunda.bpm.engine.impl.ProcessEngineLogger;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
-import org.camunda.bpm.engine.impl.telemetry.PlatformTelemetryRegistry;
+import org.camunda.bpm.engine.impl.diagnostics.PlatformDiagnosticsRegistry;
 import org.camunda.bpm.engine.impl.test.TestHelper;
 import org.camunda.bpm.engine.impl.util.ClockUtil;
 import org.camunda.bpm.engine.test.Deployment;
@@ -218,7 +218,7 @@ public void afterTestExecution(ExtensionContext context) {
 
    TestHelper.resetIdGenerator(processEngineConfiguration);
    ClockUtil.reset();
-   PlatformTelemetryRegistry.clear();
+   PlatformDiagnosticsRegistry.clear();
 
    // finally clear database and fail test if database is dirty
    if (ensureCleanAfterTest) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/errorcode/BuiltinExceptionCode.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.camunda.bpm.engine.impl.errorcode;
 
-import org.camunda.bpm.engine.CrdbTransactionRetryException;
 import org.camunda.bpm.engine.OptimisticLockingException;
 import org.camunda.bpm.engine.ProcessEngineException;
 
@@ -32,7 +31,7 @@ public enum BuiltinExceptionCode {
   FALLBACK(0),
 
   /**
-   * This code is assigned when an {@link OptimisticLockingException} or {@link CrdbTransactionRetryException} occurs.
+   * This code is assigned when an {@link OptimisticLockingException} occurs.
    */
   OPTIMISTIC_LOCKING(1),
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExternalTaskManager.java
Patch:
@@ -17,7 +17,6 @@
 package org.camunda.bpm.engine.impl.persistence.entity;
 
 import static org.camunda.bpm.engine.impl.ExternalTaskQueryProperty.CREATE_TIME;
-import static org.camunda.bpm.engine.impl.db.sql.DbSqlSessionFactory.CRDB;
 import static org.camunda.bpm.engine.impl.db.sql.DbSqlSessionFactory.POSTGRES;
 import static org.camunda.bpm.engine.impl.util.DatabaseUtil.checkDatabaseType;
 
@@ -85,7 +84,7 @@ public List<ExternalTaskEntity> selectExternalTasksForTopics(Collection<TopicFet
         "now", ClockUtil.getCurrentTime(),
         "applyOrdering", shouldApplyOrdering,
         "orderingProperties", orderingProperties,
-        "usesPostgres", checkDatabaseType(POSTGRES, CRDB)
+        "usesPostgres", checkDatabaseType(POSTGRES)
     );
 
     ListQueryParameterObject parameter = new ListQueryParameterObject(parameters, 0, maxResults);

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TableDataManager.java
Patch:
@@ -267,7 +267,7 @@ public TableMetaData getTableMetaData(String tableName) {
             .getConnection()
             .getMetaData();
 
-        if (DatabaseUtil.checkDatabaseType(DbSqlSessionFactory.POSTGRES, DbSqlSessionFactory.CRDB)) {
+        if (DatabaseUtil.checkDatabaseType(DbSqlSessionFactory.POSTGRES)) {
           tableName = tableName.toLowerCase();
         }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/RemovalTimeStrategyEndTest.java
Patch:
@@ -340,11 +340,11 @@ public void shouldResolveHistoricActivityInstance() {
   }
 
   /**
-   * Test excluded on MariaDB, MySQL and CRDB for now since it is failing randomly there.
+   * Test excluded on MariaDB and MySQL for now since it is failing randomly there.
    * See CAM-13291 for details.
    */
   @Test
-  @RequiredDatabase(excludes = {DbSqlSessionFactory.MARIADB, DbSqlSessionFactory.MYSQL, DbSqlSessionFactory.CRDB})
+  @RequiredDatabase(excludes = {DbSqlSessionFactory.MARIADB, DbSqlSessionFactory.MYSQL})
   public void shouldResolveHistoricActivityInstanceInConcurrentEnvironment() {
     // given
     int degreeOfParallelism = 30;

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/batch/BatchMigrationTest.java
Patch:
@@ -388,7 +388,6 @@ public void testMigrationJobsExecution() {
   }
 
   @Test
-  @RequiredDatabase(excludes = DbSqlSessionFactory.CRDB)
   public void testMigrationJobsExecutionByJobExecutorWithAuthorizationEnabledAndTenant() {
     ProcessEngineConfigurationImpl processEngineConfiguration = engineRule.getProcessEngineConfiguration();
 

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/signal/SignalEventConcurrencyTest.java
Patch:
@@ -79,7 +79,6 @@ public void tearDown() {
   @Test
   @Deployment(resources = {
       "org/camunda/bpm/engine/test/bpmn/event/signal/SignalEventConcurrencyTest.testSignalWithCompletedExecution.bpmn20.xml" })
-  @RequiredDatabase(excludes = DbSqlSessionFactory.CRDB)
   public void shouldThrowExceptionWhenSignallingWithCompletedExecution() {
 
     runtimeService.startProcessInstanceByKey("mainProcess");

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/TransactionIsolationReadCommittedTest.java
Patch:
@@ -38,7 +38,6 @@
  *
  */
 @RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_ACTIVITY)
-@RequiredDatabase(excludes = {DbSqlSessionFactory.CRDB })
 public class TransactionIsolationReadCommittedTest extends ConcurrencyTestCase {
 
   private ThreadControl thread1;

File: engine/src/test/java/org/camunda/bpm/engine/test/persistence/SuppressSqlExceptionsTest.java
Patch:
@@ -417,12 +417,12 @@ public void shouldThrowExceptionOnBulkUpdate() {
 
   /**
    * This test expects an exception when performing a pessimistic lock
-   * in this scenario. Since pessimistic locks are disabled on H2 and CRDB,
+   * in this scenario. Since pessimistic locks are disabled on H2,
    * this test will fail, and it needs to be excluded from the test suite
-   * for these two databases.
+   * for this database.
    */
   @Test
-  @RequiredDatabase(excludes = { DbSqlSessionFactory.H2, DbSqlSessionFactory.CRDB })
+  @RequiredDatabase(excludes = DbSqlSessionFactory.H2)
   public void shouldThrowExceptionOnLock() {
     // given
     failForSqlStatement("lockDeploymentLockProperty");

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentWithoutProcessesXml.java
Patch:
@@ -43,7 +43,7 @@ public static WebArchive processArchive() {
             .addAsWebInfResource("org/camunda/bpm/integrationtest/beans.xml", "beans.xml")
             .addAsLibraries(DeploymentHelper.getEngineCdi())
             .addClass(AbstractFoxPlatformIntegrationTest.class);
-    
+
     TestContainer.addContainerSpecificResources(deployment);
     
     return deployment;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/CdiBeanCaseTaskResolutionTest.java
Patch:
@@ -60,7 +60,7 @@ public static WebArchive clientDeployment() {
             .addClass(AbstractFoxPlatformIntegrationTest.class)
             .addAsLibraries(DeploymentHelper.getEngineCdi());
 
-    TestContainer.addContainerSpecificResourcesForNonPa(deployment);
+    TestContainer.addContainerSpecificResourcesForNonPaEmbedCdiLib(deployment);
 
     return deployment;
   }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/CdiBeanDependentScopedAsyncTest.java
Patch:
@@ -53,7 +53,7 @@ public static WebArchive clientDeployment() {
             .addClass(DependentScopedBean.class)
             .addAsLibraries(DeploymentHelper.getEngineCdi());
 
-    TestContainer.addContainerSpecificResourcesForNonPa(deployment);
+    TestContainer.addContainerSpecificResourcesForNonPaEmbedCdiLib(deployment);
 
     return deployment;
   }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/CdiBeanDependentScopedSyncTest.java
Patch:
@@ -53,7 +53,7 @@ public static WebArchive clientDeployment() {
             .addClass(DependentScopedBean.class)
             .addAsLibraries(DeploymentHelper.getEngineCdi());
 
-    TestContainer.addContainerSpecificResourcesForNonPa(deployment);
+    TestContainer.addContainerSpecificResourcesForNonPaEmbedCdiLib(deployment);
 
     return deployment;
   }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/CdiBeanResolutionTest.java
Patch:
@@ -60,7 +60,7 @@ public static WebArchive clientDeployment() {
             .addClass(AbstractFoxPlatformIntegrationTest.class)
             .addAsLibraries(DeploymentHelper.getEngineCdi());
 
-    TestContainer.addContainerSpecificResourcesForNonPa(deployment);
+    TestContainer.addContainerSpecificResourcesForNonPaEmbedCdiLib(deployment);
 
     return deployment;
   }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/CdiBeanSignallableActivityBehaviorResolutionTest.java
Patch:
@@ -54,7 +54,7 @@ public static WebArchive clientDeployment() {
             .addClass(AbstractFoxPlatformIntegrationTest.class)
             .addAsLibraries(DeploymentHelper.getEngineCdi());
 
-    TestContainer.addContainerSpecificResourcesForNonPa(deployment);
+    TestContainer.addContainerSpecificResourcesForNonPaEmbedCdiLib(deployment);
 
     return deployment;
   }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/CdiCallActivityVersionTagTest.java
Patch:
@@ -49,7 +49,7 @@ public static WebArchive clientDeployment() {
             .addClass(AbstractFoxPlatformIntegrationTest.class)
             .addAsLibraries(DeploymentHelper.getEngineCdi());
 
-    TestContainer.addContainerSpecificResourcesForNonPa(deployment);
+    TestContainer.addContainerSpecificResourcesForNonPaEmbedCdiLib(deployment);
 
     return deployment;
   }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/CdiDelegateBeanResolutionTest.java
Patch:
@@ -30,7 +30,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-
 /**
  * <p>Deploys two different applications, a process archive and a cleint application.</p>
  *
@@ -61,7 +60,7 @@ public static WebArchive clientDeployment() {
             .addClass(AbstractFoxPlatformIntegrationTest.class)
             .addAsLibraries(DeploymentHelper.getEngineCdi());
 
-     TestContainer.addContainerSpecificResources(webArchive);
+     TestContainer.addContainerSpecificResourcesEmbedCdiLib(webArchive);
 
      return webArchive;
   }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/CdiRetryConfigurationTest.java
Patch:
@@ -53,7 +53,7 @@ public static WebArchive clientDeployment() {
             .addClass(DependentScopedBean.class)
             .addAsLibraries(DeploymentHelper.getEngineCdi());
 
-    TestContainer.addContainerSpecificResourcesForNonPa(deployment);
+    TestContainer.addContainerSpecificResourcesForNonPaEmbedCdiLib(deployment);
 
     return deployment;
   }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/classloading/jobexecution/ClassloadingByJobPriorityTest.java
Patch:
@@ -90,4 +90,4 @@ protected static Asset modelAsAsset(BpmnModelInstance modelInstance) {
     return new ByteArrayAsset(bytes);
   }
 
-}
\ No newline at end of file
+}

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/dmn/BusinessRuleTaskVersionTagTest.java
Patch:
@@ -49,7 +49,7 @@ public static WebArchive clientDeployment() {
             .addClass(AbstractFoxPlatformIntegrationTest.class)
             .addAsLibraries(DeploymentHelper.getEngineCdi());
 
-    TestContainer.addContainerSpecificResourcesForNonPa(deployment);
+    TestContainer.addContainerSpecificResourcesForNonPaEmbedCdiLib(deployment);
 
     return deployment;
   }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/event/CdiProcessApplicationEventSupportTest.java
Patch:
@@ -24,8 +24,11 @@
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.camunda.bpm.integrationtest.util.DeploymentHelper;
 import org.camunda.bpm.integrationtest.util.TestContainer;
+import org.camunda.bpm.integrationtest.util.TestProcessApplication;
+import org.jboss.arquillian.container.test.api.Deployer;
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.arquillian.junit.Arquillian;
+import org.jboss.arquillian.test.api.ArquillianResource;
 import org.jboss.shrinkwrap.api.ShrinkWrap;
 import org.jboss.shrinkwrap.api.spec.WebArchive;
 import org.junit.Assert;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/util/AbstractFoxPlatformIntegrationTest.java
Patch:
@@ -75,7 +75,6 @@ public static WebArchive initWebArchiveDeployment(String name, String processesX
 
     return archive;
   }
-
   public static WebArchive initWebArchiveDeployment(String name) {
     return initWebArchiveDeployment(name, "META-INF/processes.xml");
   }
@@ -85,6 +84,7 @@ public static WebArchive initWebArchiveDeployment() {
   }
 
 
+
   @Before
   public void setupBeforeTest() {
     processEngineService = BpmPlatform.getProcessEngineService();

File: clients/java/qa/engine-variable-test/src/main/java/org/camunda/qa/Application.java
Patch:
@@ -17,12 +17,12 @@
 package org.camunda.qa;
 
 import org.camunda.bpm.application.ProcessApplication;
-import org.camunda.bpm.application.impl.ServletProcessApplication;
+import org.camunda.bpm.application.impl.JakartaServletProcessApplication;
 
 /**
  * @author Tassilo Weidner
  */
 @ProcessApplication
-public class Application extends ServletProcessApplication {
+public class Application extends JakartaServletProcessApplication {
 
 }
\ No newline at end of file

File: engine-spring/core/src/test/java/org/camunda/bpm/engine/spring/test/components/ProcessStartingBeanPostProcessorTest.java
Patch:
@@ -105,7 +105,7 @@ public void testLaunchingProcessInstance() {
 		String processInstance = processInitiatingPojo.startProcessA(id);
 		Long customerId = (Long) processEngine.getRuntimeService().getVariable(processInstance, "customerId");
 		assertEquals("the process variable should both exist and be equal to the value given, " + id, customerId, (Long) id);
-		log.info("the customerId fromt he ProcessInstance is " + customerId);
+		log.info("the customerId from the ProcessInstance is " + customerId);
 		assertNotNull("processInstanc can't be null", processInstance);
 		assertNotNull("the variable should be non-null", customerId);
 	}

File: test-utils/testcontainers/src/test/java/org/camunda/impl/test/utils/testcontainers/DatabaseContainerProviderTest.java
Patch:
@@ -60,8 +60,6 @@ public static Collection<Object[]> scenarios() throws ParseException {
       // The username and password need to be explicitly declared.
       { "jdbc:tc:cammysql:5.7://localhost:3306/process-engine?user=camunda&password=camunda", "SELECT version();", "5.7" },
       { "jdbc:tc:cammysql:8.0://localhost:3306/process-engine?user=camunda&password=camunda", "SELECT version();", "8.0" },
-      // The current Camunda CockroachDB images are compatible with Testcontainers.
-      { "jdbc:tc:camcockroachdb:20.1.13://localhost/process-engine?user=camunda&password=camunda", "SELECT version();", "20.1.3" },
       // The current Camunda SqlServer 2017/2019 images are compatible with Testcontainers.
       { "jdbc:tc:camsqlserver:2017:///process-engine", "SELECT @@VERSION", "2017" },
       { "jdbc:tc:camsqlserver:2019:///process-engine", "SELECT @@VERSION", "2019" },

File: model-api/xml-model/src/test/java/org/camunda/bpm/model/xml/validation/ModelValidationTest.java
Patch:
@@ -122,7 +122,7 @@ public void shouldWriteResultsUntilMaxSize() {
         .hasLineCount(5)
         .describedAs(
             "shall contain only one error/warning and mention the count of the missing ones")
-        .endsWith(" and 5 more errors and/or warnings");
+        .endsWith(String.format(TestResultFormatter.OMITTED_RESULTS_SUFFIX_FORMAT, 5));
   }
 
   @Test

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/deployment/processor/ModuleDependencyProcessor.java
Patch:
@@ -109,7 +109,7 @@ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitPro
 
     ServiceName serviceName = ServiceNames.forProcessApplicationModuleService(moduleName);
 
-    ServiceBuilder<?> serviceBuilder = phaseContext.getRequirementServiceTarget().addService(serviceName);
+    ServiceBuilder<?> serviceBuilder = phaseContext.getServiceTarget().addService(serviceName);
     Consumer<ProcessApplicationModuleService> provider = serviceBuilder.provides(serviceName);
     serviceBuilder.requires(phaseContext.getPhaseServiceName());
     serviceBuilder.setInitialMode(Mode.ACTIVE);

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/deployment/processor/ProcessEngineStartProcessor.java
Patch:
@@ -65,7 +65,7 @@ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitPro
 
   protected void startProcessEngine(ProcessEngineXml processEngineXml, DeploymentPhaseContext phaseContext) {
 
-    final ServiceTarget serviceTarget = phaseContext.getRequirementServiceTarget();
+    final ServiceTarget serviceTarget = phaseContext.getServiceTarget();
 
     // transform configuration
     ManagedProcessEngineMetadata configuration = transformConfiguration(processEngineXml);

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/extension/handler/BpmPlatformSubsystemAdd.java
Patch:
@@ -30,13 +30,13 @@
 import org.camunda.bpm.container.impl.jboss.service.ServiceNames;
 import org.camunda.bpm.container.impl.plugin.BpmPlatformPlugins;
 import org.jboss.as.controller.AbstractBoottimeAddStepHandler;
-import org.jboss.as.controller.CapabilityServiceBuilder;
 import org.jboss.as.controller.OperationContext;
 import org.jboss.as.controller.OperationFailedException;
 import org.jboss.as.server.AbstractDeploymentChainStep;
 import org.jboss.as.server.DeploymentProcessorTarget;
 import org.jboss.as.server.deployment.Phase;
 import org.jboss.dmr.ModelNode;
+import org.jboss.msc.service.ServiceBuilder;
 import org.jboss.msc.service.ServiceController.Mode;
 
 
@@ -67,7 +67,7 @@ public void execute(DeploymentProcessorTarget processorTarget) {
     }, OperationContext.Stage.RUNTIME);
 
     // create and register the MSC container delegate.
-    CapabilityServiceBuilder<?> processEngineBuilder = context.getCapabilityServiceTarget().addService(ServiceNames.forMscRuntimeContainerDelegate());
+    ServiceBuilder<?> processEngineBuilder = context.getServiceTarget().addService(ServiceNames.forMscRuntimeContainerDelegate());
     Consumer<RuntimeContainerDelegate> delegateProvider = processEngineBuilder.provides(ServiceNames.forMscRuntimeContainerDelegate());
     processEngineBuilder.setInitialMode(Mode.ACTIVE);
     MscRuntimeContainerDelegate processEngineService = new MscRuntimeContainerDelegate(delegateProvider);
@@ -76,7 +76,7 @@ public void execute(DeploymentProcessorTarget processorTarget) {
 
     // discover and register Camunda Platform plugins
     BpmPlatformPlugins plugins = BpmPlatformPlugins.load(getClass().getClassLoader());
-    CapabilityServiceBuilder<?> pluginsBuilder = context.getCapabilityServiceTarget().addService(ServiceNames.forBpmPlatformPlugins());
+    ServiceBuilder<?> pluginsBuilder = context.getServiceTarget().addService(ServiceNames.forBpmPlatformPlugins());
     Consumer<BpmPlatformPlugins> pluginsProvider = pluginsBuilder.provides(ServiceNames.forBpmPlatformPlugins());
     MscBpmPlatformPlugins managedPlugins = new MscBpmPlatformPlugins(plugins, pluginsProvider);
     pluginsBuilder.setInitialMode(Mode.ACTIVE);

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/MessageRestServiceTest.java
Patch:
@@ -1261,6 +1261,7 @@ public void testCorrelationWithVariablesInResult() {
     String content = response.asString();
     assertTrue(!content.isEmpty());
     checkVariablesInResult(content, 0);
+    checkExecutionResult(content, 0);
 
     verify(runtimeServiceMock).createMessageCorrelation(eq(messageName));
     verify(messageCorrelationBuilderMock).correlateWithResultAndVariables(false);

File: engine/src/main/java/org/camunda/bpm/engine/history/HistoricTaskInstanceQuery.java
Patch:
@@ -37,6 +37,9 @@ public interface HistoricTaskInstanceQuery  extends Query<HistoricTaskInstanceQu
   /** Only select historic task instances for the given process instance. */
   HistoricTaskInstanceQuery processInstanceId(String processInstanceId);
 
+  /** Only select historic task instances for the given root process instance. */
+  HistoricTaskInstanceQuery rootProcessInstanceId(String rootProcessInstanceId);
+
   /** Only select historic tasks for the given process instance business key */
   HistoricTaskInstanceQuery processInstanceBusinessKey(String processInstanceBusinessKey);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/EnginePersistenceLogger.java
Patch:
@@ -574,7 +574,7 @@ public void noHistoryLevelPropertyFound() {
 
   public void noDeploymentLockPropertyFound() {
     logError(
-        "068", "No deployment lock property found in databse");
+        "068", "No deployment lock property found in database");
   }
 
   public void debugJobExecuted(JobEntity jobEntity) {
@@ -624,7 +624,7 @@ public ProcessEngineException multipleTenantsForCaseDefinitionKeyException(Strin
   public ProcessEngineException deleteProcessDefinitionWithProcessInstancesException(String processDefinitionId, Long processInstanceCount) {
     return new ProcessEngineException(exceptionMessage(
         "076",
-        "Deletion of process definition without cascading failed. Process definition with id: {} can't be deleted, since there exists {} dependening process instances.",
+        "Deletion of process definition without cascading failed. Process definition with id: {} can't be deleted, because there are {} dependent process instances.",
         processDefinitionId, processInstanceCount
         ));
   }
@@ -640,7 +640,7 @@ public ProcessEngineException resolveParentOfExecutionFailedException(String par
 
   public void noHistoryCleanupLockPropertyFound() {
     logError(
-        "078", "No history cleanup lock property found in databse");
+        "078", "No history cleanup lock property found in database");
   }
 
   public void logUpdateUnrelatedCaseDefinitionEntity(String thisKey, String thatKey, String thisDeploymentId, String thatDeploymentId) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -675,6 +675,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement(DB2, "deleteHistoricBatchesByRemovalTime", "deleteHistoricBatchesByRemovalTime_postgres_or_db2");
     addDatabaseSpecificStatement(DB2, "deleteAuthorizationsByRemovalTime", "deleteAuthorizationsByRemovalTime_postgres_or_db2");
     addDatabaseSpecificStatement(DB2, "deleteTaskMetricsByRemovalTime", "deleteTaskMetricsByRemovalTime_postgres_or_db2");
+    addDatabaseSpecificStatement(DB2, "updateByteArraysByBatchId", "updateByteArraysByBatchId_db2");
 
     constants = new HashMap<>();
     constants.put("constant.event", "'event'");

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/RemovalTimeStrategyEndTest.java
Patch:
@@ -25,8 +25,10 @@
 import static org.junit.Assert.fail;
 
 import java.io.ByteArrayInputStream;
+import java.util.Calendar;
 import java.util.Collections;
 import java.util.Date;
+import java.util.GregorianCalendar;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -116,7 +118,7 @@ public void clearDatabase() {
     .endEvent().done();
 
   protected final Date START_DATE = new Date(1363607000000L);
-  protected final Date END_DATE = new Date(1363608000000L);
+  protected final Date END_DATE = new GregorianCalendar(2013, Calendar.MARCH, 18, 13, 0, 0).getTime();
 
   @Test
   @Deployment(resources = {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeInChunksTest.java
Patch:
@@ -23,7 +23,9 @@
 import static org.camunda.bpm.engine.test.api.history.removaltime.batch.helper.BatchSetRemovalTimeRule.addDays;
 
 import java.io.ByteArrayInputStream;
+import java.util.Calendar;
 import java.util.Date;
+import java.util.GregorianCalendar;
 import java.util.List;
 import org.camunda.bpm.engine.AuthorizationService;
 import org.camunda.bpm.engine.BadUserRequestException;
@@ -94,7 +96,7 @@ public class BatchSetRemovalTimeInChunksTest {
 
   protected final Date REMOVAL_TIME = testRule.REMOVAL_TIME;
 
-  protected final Date CREATE_TIME = new Date(1363608000000L);
+  protected final Date CREATE_TIME = new GregorianCalendar(2013, Calendar.MARCH, 18, 13, 0, 0).getTime();
 
   protected final Date CURRENT_DATE = testRule.CURRENT_DATE;
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeNonHierarchicalTest.java
Patch:
@@ -21,10 +21,11 @@
 import static org.camunda.bpm.engine.ProcessEngineConfiguration.HISTORY_FULL;
 
 import java.io.ByteArrayInputStream;
+import java.util.Calendar;
 import java.util.Collections;
 import java.util.Date;
+import java.util.GregorianCalendar;
 import java.util.List;
-
 import org.camunda.bpm.engine.AuthorizationService;
 import org.camunda.bpm.engine.DecisionService;
 import org.camunda.bpm.engine.ExternalTaskService;
@@ -94,7 +95,7 @@ public class BatchSetRemovalTimeNonHierarchicalTest {
 
   protected final Date REMOVAL_TIME = testRule.REMOVAL_TIME;
 
-  protected final Date CREATE_TIME = new Date(1363608000000L);
+  protected final Date CREATE_TIME = new GregorianCalendar(2013, Calendar.MARCH, 18, 13, 0, 0).getTime();
 
   protected RuntimeService runtimeService;
   protected DecisionService decisionService;

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/helper/BatchSetRemovalTimeRule.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Calendar;
 import java.util.Date;
+import java.util.GregorianCalendar;
 import java.util.Map;
 import org.camunda.bpm.dmn.engine.impl.DefaultDmnEngineConfiguration;
 import org.camunda.bpm.engine.ProcessEngineConfiguration;
@@ -44,7 +45,7 @@
  */
 public class BatchSetRemovalTimeRule extends BatchRule {
 
-  public final Date CURRENT_DATE = new Date(1363608000000L);
+  public final Date CURRENT_DATE = new GregorianCalendar(2013, Calendar.MARCH, 18, 13, 0, 0).getTime();
   public final Date REMOVAL_TIME = new Date(1363609000000L);
 
   public BatchSetRemovalTimeRule(ProcessEngineRule engineRule, ProcessEngineTestRule engineTestRule) {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/cleanup/AbstractHistoryCleanupSchedulerTest.java
Patch:
@@ -22,12 +22,13 @@
 import static org.camunda.bpm.engine.ProcessEngineConfiguration.HISTORY_REMOVAL_TIME_STRATEGY_END;
 import static org.camunda.bpm.engine.impl.jobexecutor.historycleanup.HistoryCleanupHandler.MAX_BATCH_SIZE;
 
+import java.util.Calendar;
 import java.util.Collections;
 import java.util.Date;
+import java.util.GregorianCalendar;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
-
 import org.camunda.bpm.engine.HistoryService;
 import org.camunda.bpm.engine.ManagementService;
 import org.camunda.bpm.engine.ProcessEngineConfiguration;
@@ -60,7 +61,7 @@ public abstract class AbstractHistoryCleanupSchedulerTest {
   protected HistoryService historyService;
   protected ManagementService managementService;
 
-  protected final Date END_DATE = new Date(1363608000000L);
+  protected final Date END_DATE = new GregorianCalendar(2013, Calendar.MARCH, 18, 13, 0, 0).getTime();
 
   public void initEngineConfiguration(ProcessEngineConfigurationImpl engineConfiguration) {
     engineConfiguration

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/cleanup/HistoryCleanupRemovalTimeTest.java
Patch:
@@ -30,14 +30,15 @@
 import static org.hamcrest.core.IsNull.nullValue;
 
 import java.util.ArrayList;
+import java.util.Calendar;
 import java.util.Collections;
 import java.util.Date;
+import java.util.GregorianCalendar;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
-
 import org.camunda.bpm.engine.AuthorizationService;
 import org.camunda.bpm.engine.DecisionService;
 import org.camunda.bpm.engine.ExternalTaskService;
@@ -262,7 +263,7 @@ public static void tearDownAfterAll() {
         .camundaDecisionRef("dish-decision")
     .endEvent().done();
 
-  protected final Date END_DATE = new Date(1363608000000L);
+  protected final Date END_DATE = new GregorianCalendar(2013, Calendar.MARCH, 18, 13, 0, 0).getTime();
 
   @Test
   @Deployment(resources = {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/cleanup/HistoryCleanupSchedulerAttachmentsTest.java
Patch:
@@ -21,8 +21,9 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.camunda.bpm.engine.impl.jobexecutor.historycleanup.HistoryCleanupJobHandlerConfiguration.START_DELAY;
 
+import java.util.Calendar;
 import java.util.Date;
-
+import java.util.GregorianCalendar;
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.TaskService;
 import org.camunda.bpm.engine.impl.util.ClockUtil;
@@ -74,7 +75,7 @@ public void init() {
       .userTask("userTask").name("userTask")
     .endEvent().done();
 
-  protected final Date END_DATE = new Date(1363608000000L);
+  protected final Date END_DATE = new GregorianCalendar(2013, Calendar.MARCH, 18, 13, 0, 0).getTime();
 
   @Test
   public void shouldScheduleToNow() {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/cleanup/HistoryCleanupSchedulerAuthorizationsTest.java
Patch:
@@ -21,9 +21,10 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.camunda.bpm.engine.impl.jobexecutor.historycleanup.HistoryCleanupJobHandlerConfiguration.START_DELAY;
 
+import java.util.Calendar;
 import java.util.Date;
+import java.util.GregorianCalendar;
 import java.util.List;
-
 import org.camunda.bpm.engine.AuthorizationService;
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.TaskService;
@@ -82,7 +83,7 @@ public void init() {
         .multiInstanceDone()
     .endEvent().done();
 
-  protected final Date END_DATE = new Date(1363608000000L);
+  protected final Date END_DATE = new GregorianCalendar(2013, Calendar.MARCH, 18, 13, 0, 0).getTime();
 
   @Test
   public void shouldScheduleToNow() {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/cleanup/HistoryCleanupSchedulerBatchesTest.java
Patch:
@@ -21,10 +21,11 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.camunda.bpm.engine.impl.jobexecutor.historycleanup.HistoryCleanupJobHandlerConfiguration.START_DELAY;
 
+import java.util.Calendar;
 import java.util.Collections;
 import java.util.Date;
+import java.util.GregorianCalendar;
 import java.util.List;
-
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.TaskService;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventTypes;
@@ -87,7 +88,7 @@ public void init() {
           .multiInstanceDone()
     .endEvent().done();
 
-  protected final Date END_DATE = new Date(1363608000000L);
+  protected final Date END_DATE = new GregorianCalendar(2013, Calendar.MARCH, 18, 13, 0, 0).getTime();
 
   @Test
   public void shouldScheduleToNow() {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/cleanup/HistoryCleanupSchedulerDecisionsTest.java
Patch:
@@ -21,8 +21,9 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.camunda.bpm.engine.impl.jobexecutor.historycleanup.HistoryCleanupJobHandlerConfiguration.START_DELAY;
 
+import java.util.Calendar;
 import java.util.Date;
-
+import java.util.GregorianCalendar;
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventTypes;
 import org.camunda.bpm.engine.impl.util.ClockUtil;
@@ -79,7 +80,7 @@ public void init() {
         .multiInstanceDone()
     .endEvent().done();
 
-  protected final Date END_DATE = new Date(1363608000000L);
+  protected final Date END_DATE = new GregorianCalendar(2013, Calendar.MARCH, 18, 13, 0, 0).getTime();
 
   @Test
   @Deployment(resources = {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/cleanup/HistoryCleanupSchedulerProcessInstancesTest.java
Patch:
@@ -21,8 +21,9 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.camunda.bpm.engine.impl.jobexecutor.historycleanup.HistoryCleanupJobHandlerConfiguration.START_DELAY;
 
+import java.util.Calendar;
 import java.util.Date;
-
+import java.util.GregorianCalendar;
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.TaskService;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventTypes;
@@ -75,7 +76,7 @@ public void init() {
       .userTask("userTask").name("userTask")
     .endEvent().done();
 
-  protected final Date END_DATE = new Date(1363608000000L);
+  protected final Date END_DATE = new GregorianCalendar(2013, Calendar.MARCH, 18, 13, 0, 0).getTime();
 
   @Test
   public void shouldScheduleToNow() {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/cleanup/HistoryCleanupSchedulerTaskInstancesTest.java
Patch:
@@ -21,9 +21,10 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.camunda.bpm.engine.impl.jobexecutor.historycleanup.HistoryCleanupJobHandlerConfiguration.START_DELAY;
 
+import java.util.Calendar;
 import java.util.Date;
+import java.util.GregorianCalendar;
 import java.util.List;
-
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.TaskService;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventTypes;
@@ -80,7 +81,7 @@ public void init() {
         .multiInstanceDone()
     .endEvent().done();
 
-  protected final Date END_DATE = new Date(1363608000000L);
+  protected final Date END_DATE = new GregorianCalendar(2013, Calendar.MARCH, 18, 13, 0, 0).getTime();
 
   @Test
   public void shouldScheduleToNow() {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/cleanup/HistoryCleanupSchedulerTaskMetricsTest.java
Patch:
@@ -21,7 +21,9 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.camunda.bpm.engine.impl.jobexecutor.historycleanup.HistoryCleanupJobHandlerConfiguration.START_DELAY;
 
+import java.util.Calendar;
 import java.util.Date;
+import java.util.GregorianCalendar;
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.TaskService;
 import org.camunda.bpm.engine.impl.util.ClockUtil;
@@ -69,7 +71,7 @@ public void init() {
       .userTask()
     .endEvent().done();
 
-  protected final Date END_DATE = new Date(1363608000000L);
+  protected final Date END_DATE = new GregorianCalendar(2013, Calendar.MARCH, 18, 13, 0, 0).getTime();
 
   @Test
   public void shouldScheduleToNow() {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/cleanup/HistoryCleanupSchedulerVariableInstancesTest.java
Patch:
@@ -21,8 +21,9 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.camunda.bpm.engine.impl.jobexecutor.historycleanup.HistoryCleanupJobHandlerConfiguration.START_DELAY;
 
+import java.util.Calendar;
 import java.util.Date;
-
+import java.util.GregorianCalendar;
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.TaskService;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventTypes;
@@ -75,7 +76,7 @@ public void init() {
       .userTask()
     .endEvent().done();
 
-  protected final Date END_DATE = new Date(1363608000000L);
+  protected final Date END_DATE = new GregorianCalendar(2013, Calendar.MARCH, 18, 13, 0, 0).getTime();
 
   @Test
   public void shouldScheduleToNow() {

File: engine/src/test/java/org/camunda/bpm/engine/test/history/useroperationlog/UserOperationLogAnnotationTest.java
Patch:
@@ -20,9 +20,10 @@
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.camunda.bpm.engine.ProcessEngineConfiguration.HISTORY_FULL;
 
+import java.util.Calendar;
 import java.util.Date;
+import java.util.GregorianCalendar;
 import java.util.List;
-
 import org.camunda.bpm.engine.BadUserRequestException;
 import org.camunda.bpm.engine.EntityTypes;
 import org.camunda.bpm.engine.HistoryService;
@@ -48,7 +49,7 @@ public class UserOperationLogAnnotationTest {
   protected static final String ANNOTATION = "anAnnotation";
   protected static final String TASK_NAME = "aTaskName";
   protected static final String OPERATION_ID = "operationId";
-  protected final Date CREATE_TIME = new Date(1363608000000L);
+  protected final Date CREATE_TIME = new GregorianCalendar(2013, Calendar.MARCH, 18, 13, 0, 0).getTime();
 
   protected ProcessEngineRule engineRule = new ProvidedProcessEngineRule();
   protected ProcessEngineTestRule engineTestRule = new ProcessEngineTestRule(engineRule);

File: engine/src/test/java/org/camunda/bpm/engine/test/util/ClockTestUtil.java
Patch:
@@ -16,8 +16,9 @@
  */
 package org.camunda.bpm.engine.test.util;
 
+import java.util.Calendar;
 import java.util.Date;
-
+import java.util.GregorianCalendar;
 import org.camunda.bpm.engine.impl.util.ClockUtil;
 
 public final class ClockTestUtil {
@@ -42,7 +43,7 @@ public static Date incrementClock(long seconds) {
    * @return the new current time
    */
   public static Date setClockToDateWithoutMilliseconds() {
-    ClockUtil.setCurrentTime(new Date(1363608000000L));
+    ClockUtil.setCurrentTime(new GregorianCalendar(2023, Calendar.AUGUST, 18, 8, 0, 0).getTime());
     return ClockUtil.getCurrentTime();
   }
 

File: clients/java/client/src/it/java/org/camunda/bpm/client/task/ExternalTaskHandlerIT.java
Patch:
@@ -149,7 +149,7 @@ public void shouldSetVariablesByProcessInstanceId() {
       variables.put(variableName, variableValue);
 
       client.setVariables(task.getProcessInstanceId(), variables);
-      client.complete(task, variables);
+      client.complete(task);
     });
 
     // when
@@ -180,7 +180,7 @@ public void shouldSetVariablesByExternalTask() {
       variables.put(variableName, variableValue);
 
       client.setVariables(task, variables);
-      client.complete(task, variables);
+      client.complete(task);
     });
 
     // when

File: distro/run/qa/integration-tests/src/test/java/org/camunda/bpm/run/qa/webapps/LoginIT.java
Patch:
@@ -107,9 +107,6 @@ public void login(String appName) {
 
     wait.until(visibilityOfElementLocated(By.cssSelector("button[type=\"submit\"]")))
         .submit();
-
-    wait.until(visibilityOfElementLocated(By.cssSelector(".modal-close")))
-        .click();
   }
 
   public void sendKeys(WebElement element, String keys)  {

File: engine/src/main/java/org/camunda/bpm/engine/impl/BootstrapEngineCommand.java
Patch:
@@ -121,7 +121,7 @@ public void initializeTelemetryProperty(CommandContext commandContext) {
 
       // reset collected dynamic data
       if ((databaseTelemetryProperty == null && processEngineConfiguration.isInitializeTelemetry())
-          || Boolean.parseBoolean(databaseTelemetryProperty.getValue())) {
+          || (databaseTelemetryProperty != null && Boolean.parseBoolean(databaseTelemetryProperty.getValue()))) {
         TelemetryUtil.toggleLocalTelemetry(true,
             processEngineConfiguration.getTelemetryRegistry(),
             processEngineConfiguration.getMetricsRegistry());

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -1046,8 +1046,9 @@ public abstract class ProcessEngineConfigurationImpl extends ProcessEngineConfig
    * when it has never been enabled/disabled before.
    * Subsequent changes can be done only via the
    * {@link ManagementService#toggleTelemetry(boolean) Telemetry} API in {@link ManagementService}
+   * Telemetry is deactivated by default.
    */
-  protected Boolean initializeTelemetry = null;
+  protected boolean initializeTelemetry = false;
   /** The endpoint which telemetry is sent to */
   protected String telemetryEndpoint = "https://api.telemetry.camunda.cloud/pings";
   /** The number of times the telemetry request is retried in case it fails **/
@@ -5333,7 +5334,7 @@ public ProcessEngineConfigurationImpl setDmnReturnBlankTableOutputAsNull(boolean
     return this;
   }
 
-  public Boolean isInitializeTelemetry() {
+  public boolean isInitializeTelemetry() {
     return initializeTelemetry;
   }
 

File: qa/integration-tests-webapps/integration-tests/src/main/java/org/camunda/bpm/LoginIT.java
Patch:
@@ -50,8 +50,6 @@ public void login(String appName) {
     wait.until(visibilityOfElementLocated(By.cssSelector("button[type=\"submit\"]")))
         .submit();
 
-    wait.until(visibilityOfElementLocated(By.cssSelector(".modal-close")))
-        .click();
   }
 
   public void sendKeys(WebElement element, String keys)  {

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -601,7 +601,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     databaseSpecificLimitBetweenStatements.put(DB2, db2LimitBetweenWithoutColumns + "RES.* ");
     databaseSpecificLimitBetweenFilterStatements.put(DB2, db2LimitBetweenWithoutColumns + "RES.ID_, RES.REV_, RES.RESOURCE_TYPE_, RES.NAME_, RES.OWNER_ ");
     databaseSpecificLimitBetweenAcquisitionStatements.put(DB2, db2LimitBetweenWithoutColumns
-        + "RES.ID_, RES.REV_, RES.TYPE_, RES.LOCK_EXP_TIME_, RES.LOCK_OWNER_, RES.EXCLUSIVE_, RES.PROCESS_INSTANCE_ID_, RES.DUEDATE_, RES.PRIORITY_ ");
+        + "RES.ID_, RES.REV_, RES.TYPE_, RES.LOCK_EXP_TIME_, RES.LOCK_OWNER_, RES.EXCLUSIVE_, RES.ROOT_PROC_INST_ID_, RES.PROCESS_INSTANCE_ID_, RES.DUEDATE_, RES.PRIORITY_ ");
     databaseSpecificLimitBeforeInUpdate.put(DB2, "");
     databaseSpecificLimitAfterInUpdate.put(DB2, "");
     databaseSpecificLimitBeforeWithoutOffsetStatements.put(DB2, "");
@@ -699,7 +699,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     databaseSpecificLimitBetweenStatements.put(MSSQL, mssqlLimitBetweenWithoutColumns + "RES.* ");
     databaseSpecificLimitBetweenFilterStatements.put(MSSQL, "");
     databaseSpecificLimitBetweenAcquisitionStatements.put(MSSQL, mssqlLimitBetweenWithoutColumns
-        + "RES.ID_, RES.REV_, RES.TYPE_, RES.LOCK_EXP_TIME_, RES.LOCK_OWNER_, RES.EXCLUSIVE_, RES.PROCESS_INSTANCE_ID_, RES.DUEDATE_, RES.PRIORITY_ ");
+        + "RES.ID_, RES.REV_, RES.TYPE_, RES.LOCK_EXP_TIME_, RES.LOCK_OWNER_, RES.EXCLUSIVE_, RES.ROOT_PROC_INST_ID_, RES.PROCESS_INSTANCE_ID_, RES.DUEDATE_, RES.PRIORITY_ ");
     databaseSpecificLimitBeforeInUpdate.put(MSSQL, "");
     databaseSpecificLimitAfterInUpdate.put(MSSQL, "");
     databaseSpecificLimitBeforeWithoutOffsetStatements.put(MSSQL, "TOP (#{maxResults})");

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -247,6 +247,7 @@ public void setExecution(ExecutionEntity execution) {
       this.execution = execution;
       executionId = execution.getId();
       processInstanceId = execution.getProcessInstanceId();
+      rootProcessInstanceId = execution.getRootProcessInstanceId();
       // if the execution is suspended, suspend the job entity as well to prevent unwanted job execution
       if(execution.isSuspended()) {
         suspensionState = execution.getSuspensionState();
@@ -257,6 +258,7 @@ public void setExecution(ExecutionEntity execution) {
       this.execution.removeJob(this);
       this.execution = execution;
       processInstanceId = null;
+      rootProcessInstanceId = null;
       executionId = null;
     }
   }
@@ -714,7 +716,6 @@ public String toString() {
            + ", executionId=" + executionId
            + ", processInstanceId=" + processInstanceId
            + ", isExclusive=" + isExclusive
-           + ", isExclusive=" + isExclusive
            + ", jobDefinitionId=" + jobDefinitionId
            + ", jobHandlerType=" + jobHandlerType
            + ", jobHandlerConfiguration=" + jobHandlerConfiguration

File: engine/src/main/java/org/camunda/bpm/engine/runtime/JobQuery.java
Patch:
@@ -39,6 +39,9 @@ public interface JobQuery extends Query<JobQuery, Job> {
   /** Only select jobs which exist for the given job definition id. **/
   JobQuery jobDefinitionId(String jobDefinitionId);
 
+  /** Only select jobs which exist for the given root process instance. **/
+  JobQuery rootProcessInstanceId(String rootProcessInstanceId);
+
   /** Only select jobs which exist for the given process instance. **/
   JobQuery processInstanceId(String processInstanceId);
 

File: qa/test-db-instance-migration/test-fixture-720/src/main/java/org/camunda/bpm/qa/upgrade/TestFixture.java
Patch:
@@ -19,6 +19,7 @@
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
+import org.camunda.bpm.qa.upgrade.jobexecutor.ExclusiveOverProcessHierarchiesScenario;
 
 public class TestFixture {
 
@@ -36,7 +37,7 @@ public static void main(String... args) {
     ScenarioRunner runner = new ScenarioRunner(processEngine, ENGINE_VERSION);
 
     // example scenario setup
-    // runner.setupScenarios(ExampleScenario.class);
+     runner.setupScenarios(ExclusiveOverProcessHierarchiesScenario.class);
 
     processEngine.close();
   }

File: webapps/assembly/src/main/java/org/camunda/bpm/admin/impl/plugin/base/dto/MetricsAggregatedQueryDto.java
Patch:
@@ -17,6 +17,7 @@
 package org.camunda.bpm.admin.impl.plugin.base.dto;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
+import org.camunda.bpm.engine.impl.util.ClockUtil;
 import org.camunda.bpm.webapp.rest.dto.AbstractRestQueryParametersDto;
 import org.camunda.bpm.engine.impl.metrics.util.MetricsUtil;
 import org.camunda.bpm.engine.management.Metrics;
@@ -122,7 +123,7 @@ protected boolean isValidSortByValue(String value) {
   }
 
   public void validateAndPrepareQuery() {
-    if (subscriptionStartDate == null || !subscriptionStartDate.before(new Date())) {
+    if (subscriptionStartDate == null || !subscriptionStartDate.before(ClockUtil.now())) {
       throw new InvalidRequestException(Response.Status.BAD_REQUEST,
           "subscriptionStartDate parameter has invalid value: " + subscriptionStartDate);
     }

File: webapps/assembly/src/main/java/org/camunda/bpm/admin/impl/plugin/resources/MetricsRestService.java
Patch:
@@ -48,8 +48,9 @@ public List<MetricsAggregatedResultDto> getAggregatedMetrics(@Context UriInfo ur
     MetricsAggregatedQueryDto queryDto = new MetricsAggregatedQueryDto(objectMapper, uriInfo.getQueryParameters());
     queryDto.validateAndPrepareQuery();
 
-    boolean queryTaskUsers = queryDto.getMetrics().contains(Metrics.UNIQUE_TASK_WORKERS);
-    queryDto.getMetrics().remove(Metrics.TASK_USERS);
+    // TU metrics are fetched by a separate query (see below) and the list of metrics is only used by the first query
+    // Remove TU metric from the list
+    boolean queryTaskUsers = queryDto.getMetrics().remove(Metrics.UNIQUE_TASK_WORKERS);
 
     List<MetricsAggregatedResultDto> result = new ArrayList<>();
     if (!queryDto.getMetrics().isEmpty()) {

File: clients/java/client/src/it/java/org/camunda/bpm/client/variable/XmlSerializable.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.client.variable;
 
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 @XmlRootElement
 class XmlSerializable extends XmlSerializableNoAnnotation {

File: clients/java/client/src/it/java/org/camunda/bpm/client/variable/XmlSerializables.java
Patch:
@@ -20,8 +20,8 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 @XmlRootElement
 public class XmlSerializables {

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/extension/ModelConstants.java
Patch:
@@ -19,12 +19,12 @@
 
 /**
  * Constants used in the model
- * 
+ *
  * @author Daniel Meyer
  * @author christian.lipphardt@camunda.com
  */
 public interface ModelConstants {
-  
+
   // elements
   @Deprecated
   String ACQUISITION_STRATEGY = "acquisition-strategy";
@@ -46,7 +46,6 @@ public interface ModelConstants {
   // attributes
   String DEFAULT = "default";
   String NAME = "name";
-  @Deprecated
   String THREAD_POOL_NAME = "thread-pool-name";
   String MAX_THREADS = "max-threads";
   String CORE_THREADS = "core-threads";

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/extension/SubsystemAttributeDefinitons.java
Patch:
@@ -76,7 +76,6 @@ public class SubsystemAttributeDefinitons {
                 .build();
 
     // job executor
-    @Deprecated
     public static final AttributeDefinition THREAD_POOL_NAME =
             new SimpleAttributeDefinitionBuilder(ModelConstants.THREAD_POOL_NAME, ModelType.STRING, true)
                 .setDefaultValue(new ModelNode(DEFAULT_JOB_EXECUTOR_THREADPOOL_NAME))

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/extension/handler/BpmPlatformSubsystemRemove.java
Patch:
@@ -29,13 +29,12 @@ public class BpmPlatformSubsystemRemove extends ReloadRequiredRemoveStepHandler
 
   public static final BpmPlatformSubsystemRemove INSTANCE = new BpmPlatformSubsystemRemove();
 
-  private BpmPlatformSubsystemRemove() {
-  }
-
+  @Override
   protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException {
     super.performRuntime(context, operation, model);
   }
 
+  @Override
   protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException {
     super.recoverServices(context, operation, model);
 

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/extension/handler/JobAcquisitionRemove.java
Patch:
@@ -27,14 +27,15 @@
 
 /**
  * Provides the description and the implementation of the process-engine#remove operation.
- * 
+ *
  * @author Daniel Meyer
  * @author Christian Lipphardt
  */
 public class JobAcquisitionRemove extends AbstractRemoveStepHandler {
 
   public static final JobAcquisitionRemove INSTANCE = new JobAcquisitionRemove();
 
+  @Override
   protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException {
     String jobAcquisitionName = PathAddress.pathAddress(operation.get(ModelDescriptionConstants.ADDRESS)).getLastElement().getValue();
     context.removeService(ServiceNames.forMscRuntimeContainerJobExecutorService(jobAcquisitionName));

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/extension/handler/JobExecutorRemove.java
Patch:
@@ -30,8 +30,9 @@
  */
 public class JobExecutorRemove extends AbstractRemoveStepHandler {
 
-  public static JobExecutorRemove INSTANCE = new JobExecutorRemove();
+  public static final JobExecutorRemove INSTANCE = new JobExecutorRemove();
 
+  @Override
   protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException {
     ServiceName name = ServiceNames.forMscExecutorService();
     context.removeService(name);

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/extension/handler/ProcessEngineRemove.java
Patch:
@@ -28,14 +28,15 @@
 
 /**
  * Provides the description and the implementation of the process-engine#remove operation.
- * 
+ *
  * @author Daniel Meyer
  * @author Christian Lipphardt
  */
 public class ProcessEngineRemove extends AbstractRemoveStepHandler {
 
   public static final ProcessEngineRemove INSTANCE = new ProcessEngineRemove();
 
+  @Override
   protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException {
     String suffix = PathAddress.pathAddress(operation.get(ModelDescriptionConstants.ADDRESS)).getLastElement().getValue();
     ServiceName name = ServiceNames.forManagedProcessEngine(suffix);

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/plugin/JBossConnectProcessEnginePlugin.java
Patch:
@@ -26,7 +26,7 @@ public class JBossConnectProcessEnginePlugin extends AbstractProcessEnginePlugin
 
   @Override
   public void preInit(ProcessEngineConfigurationImpl processEngineConfiguration) {
-    ClassLoader classloader = ClassLoaderUtil.getClassloader(MscManagedProcessEngineController.class); 
+    ClassLoader classloader = ClassLoaderUtil.getClassloader(MscManagedProcessEngineController.class);
     Connectors.loadConnectors(classloader);
 
     processEngineConfiguration.setTelemetryHttpConnector(Connectors.getConnector(Connectors.HTTP_CONNECTOR_ID));

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/service/MscManagedProcessApplication.java
Patch:
@@ -42,14 +42,17 @@ public MscManagedProcessApplication(ProcessApplicationInfo processApplicationInf
     this.processApplicationReference = processApplicationReference;
   }
 
+  @Override
   public MscManagedProcessApplication getValue() throws IllegalStateException, IllegalArgumentException {
     return this;
   }
 
+  @Override
   public void start(StartContext context) throws StartException {
     // call the process application's
   }
 
+  @Override
   public void stop(StopContext context) {
     // Nothing to do
   }

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/service/ServiceNames.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.camunda.bpm.container.impl.jboss.service;
 
-import org.jboss.as.threads.CommonAttributes;
 import org.jboss.as.threads.ThreadsServices;
 import org.jboss.msc.service.ServiceName;
 

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/util/JBossCompatibilityExtension.java
Patch:
@@ -17,10 +17,10 @@
 package org.camunda.bpm.container.impl.jboss.util;
 
 import java.util.concurrent.ExecutorService;
+import java.util.function.Supplier;
 
 import org.jboss.msc.service.ServiceBuilder;
 import org.jboss.msc.service.ServiceName;
-import org.jboss.msc.value.InjectedValue;
 
 /**
  * Provides method abstractions to make our subsystem compatible with different JBoss versions.
@@ -44,7 +44,7 @@ public class JBossCompatibilityExtension {
    * Adds the JBoss server executor as a dependency to the given service.
    * Copied from org.jboss.as.server.Services - JBoss 7.2.0.Final
    */
-  public static void addServerExecutorDependency(ServiceBuilder<?> serviceBuilder,  InjectedValue<ExecutorService> injector) {
-    serviceBuilder.addDependency(JBOSS_SERVER_EXECUTOR, ExecutorService.class, injector);
+  public static Supplier<ExecutorService> addServerExecutorDependency(ServiceBuilder<?> serviceBuilder) {
+    return serviceBuilder.requires(JBOSS_SERVER_EXECUTOR);
   }
 }

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/util/ServiceTracker.java
Patch:
@@ -43,7 +43,7 @@ public ServiceTracker(ServiceName typeToTrack, Collection<S> serviceCollection)
   }
 
   @Override
-  @SuppressWarnings({ "rawtypes", "unchecked" })
+  @SuppressWarnings({ "unchecked" })
   public void handleEvent(final ServiceController<?> controller, final LifecycleEvent event) {
 
     if(!typeToTrack.isParentOf(controller.getName())) {

File: spring-boot-starter/starter-client/spring-boot/src/main/java/org/camunda/bpm/client/spring/boot/starter/impl/ClientAutoConfiguration.java
Patch:
@@ -20,6 +20,7 @@
 import org.camunda.bpm.client.spring.impl.client.ClientPostProcessor;
 import org.camunda.bpm.client.spring.impl.subscription.SubscriptionPostProcessor;
 
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -29,11 +30,13 @@
 public class ClientAutoConfiguration {
 
   @Bean
+  @ConditionalOnMissingBean
   public static SubscriptionPostProcessor subscriptionPostprocessor() {
     return new SubscriptionPostProcessor(PropertiesAwareSpringTopicSubscription.class);
   }
 
   @Bean
+  @ConditionalOnMissingBean
   public static ClientPostProcessor clientPostProcessor() {
     return new ClientPostProcessor(PropertiesAwareClientFactory.class);
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ActivityCancellationCmd.java
Patch:
@@ -55,6 +55,7 @@ public Void execute(final CommandContext commandContext) {
     for (AbstractInstanceCancellationCmd cmd : commands) {
       cmd.setSkipCustomListeners(skipCustomListeners);
       cmd.setSkipIoMappings(skipIoMappings);
+      cmd.setExternallyTerminated(true);
       cmd.execute(commandContext);
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/PvmExecutionImpl.java
Patch:
@@ -26,7 +26,6 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
-
 import org.camunda.bpm.engine.ActivityTypes;
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.impl.ProcessEngineLogger;
@@ -39,6 +38,7 @@
 import org.camunda.bpm.engine.impl.core.variable.scope.AbstractVariableScope;
 import org.camunda.bpm.engine.impl.form.FormPropertyHelper;
 import org.camunda.bpm.engine.impl.history.HistoryLevel;
+import org.camunda.bpm.engine.impl.history.event.HistoricVariableUpdateEventEntity;
 import org.camunda.bpm.engine.impl.history.event.HistoryEvent;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventProcessor;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventTypes;
@@ -361,7 +361,7 @@ public void clearScope(String reason, boolean skipCustomListeners, boolean skipI
 
     // fire activity end on active activity
     PvmActivity activity = getActivity();
-    if (isActive && activity != null) {
+    if ((isActive || externallyTerminated) && activity != null) {
       // set activity instance state to cancel
       if (activityInstanceState != ENDING.getStateCode() || activityInstanceEndListenersFailed) {
         setCanceled(true);

File: engine/src/main/java/org/camunda/bpm/engine/impl/interceptor/CommandCounterInterceptor.java
Patch:
@@ -30,15 +30,14 @@ public CommandCounterInterceptor(ProcessEngineConfigurationImpl processEngineCon
 
   @Override
   public <T> T execute(Command<T> command) {
-
     try {
       return next.execute(command);
     } finally {
       TelemetryRegistry telemetryRegistry = processEngineConfiguration.getTelemetryRegistry();
       if (telemetryRegistry != null) {
         String className = ClassNameUtil.getClassNameWithoutPackage(command);
         // anonymous class/lambda implementations of the Command interface are excluded
-        if (!command.getClass().isAnonymousClass() && !className.contains("$$Lambda$")) {
+        if (!command.getClass().isAnonymousClass() && !className.contains("$$Lambda")) {
           className = parseLocalClassName(className);
           telemetryRegistry.markOccurrence(className);
         }

File: test-utils/assert/core/src/main/java/org/camunda/bpm/engine/test/assertions/bpmn/BpmnAwareTests.java
Patch:
@@ -1003,7 +1003,7 @@ public static void complete(ExternalTask externalTask, Map<String, Object> varia
    */
   public static List<LockedExternalTask> fetchAndLock(String topic, String workerId, int maxResults) {
     if (workerId == null || topic == null) {
-      throw new IllegalArgumentException(format("Illegal call of fetchAndLock(topic = '%s', workerId = '%s', maxResults = '%s') - all must not be null!", workerId, topic, maxResults));
+      throw new IllegalArgumentException(format("Illegal call of fetchAndLock(topic = '%s', workerId = '%s', maxResults = '%s') - all must not be null!", topic, workerId, maxResults));
     }
     return externalTaskService().fetchAndLock(maxResults, workerId)
       .topic(topic, DEFAULT_LOCK_DURATION_EXTERNAL_TASK)

File: engine/src/main/java/org/camunda/bpm/engine/impl/context/Context.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.ArrayDeque;
 import java.util.Deque;
 import java.util.concurrent.Callable;
-
 import org.camunda.bpm.application.InvocationContext;
 import org.camunda.bpm.application.ProcessApplicationInterface;
 import org.camunda.bpm.application.ProcessApplicationReference;
@@ -83,10 +82,13 @@ public static void removeCommandInvocationContext() {
     if (stack.isEmpty()) {
       // do not clear when called from JobExecutor, will be cleared there after logging
       if (getJobExecutorContext() == null) {
+        // outer command remove flow
         currentContext.getProcessDataContext().clearMdc();
+        currentContext.getProcessDataContext().restoreExternalMDCProperties();
       }
     } else {
       // reset the MDC to the logging context of the outer command invocation
+      // inner command remove flow
       stack.peek().getProcessDataContext().updateMdcFromCurrentValues();
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/interceptor/CommandContextInterceptor.java
Patch:
@@ -88,9 +88,10 @@ public <T> T execute(Command<T> command) {
 
     // only create a new command context on the current command level (CAM-10002)
     boolean isNew = ProcessEngineContextImpl.consume();
-    boolean openNew = (context == null || isNew);
+    boolean isOuterCommand = (context == null);
+    boolean openNew = (isOuterCommand || isNew);
 
-    CommandInvocationContext commandInvocationContext = new CommandInvocationContext(command, processEngineConfiguration);
+    CommandInvocationContext commandInvocationContext = new CommandInvocationContext(command, processEngineConfiguration, isOuterCommand);
     Context.setCommandInvocationContext(commandInvocationContext);
 
     try {

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -3566,7 +3566,8 @@ protected void parseIntermediateTimerEventDefinition(Element timerEventDefinitio
 
     Element timeCycleElement = timerEventDefinition.element("timeCycle");
     if (timeCycleElement != null) {
-      addTimeCycleWarning(timeCycleElement, "intermediate catch", timerActivity.getId());
+      ProcessDefinition processDefinition = (ProcessDefinition) timerActivity.getProcessDefinition();
+      LOG.intermediateCatchTimerEventWithTimeCycleNotRecommended(processDefinition.getKey(), timerActivity.getId());
     }
 
     addTimerDeclaration(timerActivity.getEventScope(), timerDeclaration);

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -1044,10 +1044,10 @@ protected List<TaskListener> getListenersForEvent(String event) {
     TaskDefinition resolvedTaskDefinition = getTaskDefinition();
     if (resolvedTaskDefinition != null) {
       if (skipCustomListeners) {
-        return resolvedTaskDefinition.getBuiltinTaskListeners(event);
+        return resolvedTaskDefinition.getBuiltinTaskListenersForEvent(event);
       }
       else {
-        return resolvedTaskDefinition.getTaskListeners(event);
+        return resolvedTaskDefinition.getAllTaskListenersForEvent(event);
       }
     }
     else {

File: engine/src/main/java/org/camunda/bpm/engine/history/UserOperationLogEntry.java
Patch:
@@ -16,9 +16,8 @@
  */
 package org.camunda.bpm.engine.history;
 
-import org.camunda.bpm.engine.EntityTypes;
-
 import java.util.Date;
+import org.camunda.bpm.engine.EntityTypes;
 
 
 /**

File: engine/src/main/java/org/camunda/bpm/engine/impl/ProcessEngineLogger.java
Patch:
@@ -17,7 +17,6 @@
 package org.camunda.bpm.engine.impl;
 
 import java.net.URL;
-
 import org.camunda.bpm.application.impl.ProcessApplicationLogger;
 import org.camunda.bpm.container.impl.ContainerIntegrationLogger;
 import org.camunda.bpm.engine.ProcessEngineConfiguration;
@@ -126,10 +125,10 @@ public class ProcessEngineLogger extends BaseLogger {
       MigrationLogger.class, PROJECT_CODE, "org.camunda.bpm.engine.migration", "23");
 
   public static final ExternalTaskLogger EXTERNAL_TASK_LOGGER = BaseLogger.createLogger(
-    ExternalTaskLogger.class, PROJECT_CODE, "org.camunda.bpm.engine.externaltask", "24");
+      ExternalTaskLogger.class, PROJECT_CODE, "org.camunda.bpm.engine.externaltask", "24");
 
   public static final SecurityLogger SECURITY_LOGGER = BaseLogger.createLogger(
-    SecurityLogger.class, PROJECT_CODE, "org.camunda.bpm.engine.security", "25");
+      SecurityLogger.class, PROJECT_CODE, "org.camunda.bpm.engine.security", "25");
 
   public static final IncidentLogger INCIDENT_LOGGER = BaseLogger.createLogger(
       IncidentLogger.class, PROJECT_CODE, "org.camunda.bpm.engine.incident", "26");

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/CorrelateMessageCmd.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.util.List;
 import java.util.concurrent.Callable;
-
 import org.camunda.bpm.engine.MismatchingMessageCorrelationException;
 import org.camunda.bpm.engine.impl.MessageCorrelationBuilderImpl;
 import org.camunda.bpm.engine.impl.ProcessEngineLogger;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/util/AbstractFoxPlatformIntegrationTest.java
Patch:
@@ -45,6 +45,8 @@
 
 public abstract class AbstractFoxPlatformIntegrationTest {
 
+  protected static final long JOBS_WAIT_TIMEOUT_MS = 20_000L;
+
   protected Logger logger = Logger.getLogger(AbstractFoxPlatformIntegrationTest.class.getName());
 
   protected ProcessEngineService processEngineService;
@@ -101,7 +103,7 @@ public void setupBeforeTest() {
   }
 
   public void waitForJobExecutorToProcessAllJobs() {
-    waitForJobExecutorToProcessAllJobs(12000);
+    waitForJobExecutorToProcessAllJobs(JOBS_WAIT_TIMEOUT_MS);
   }
 
   public void waitForJobExecutorToProcessAllJobs(long maxMillisToWait) {

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/mapper/MultipartFormData.java
Patch:
@@ -24,6 +24,7 @@
 import javax.ws.rs.core.Response.Status;
 import java.io.IOException;
 import java.io.InputStream;
+import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
@@ -71,7 +72,7 @@ public FormPart(FileItemStream stream) {
       fileName = stream.getName();
 
       if(contentType == null || contentType.contains(MediaType.TEXT_PLAIN)) {
-        textContent = new String(binaryContent);
+        textContent = new String(binaryContent, StandardCharsets.UTF_8);
       }
     }
 

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/mapper/MultipartFormData.java
Patch:
@@ -24,6 +24,7 @@
 import javax.ws.rs.core.Response.Status;
 import java.io.IOException;
 import java.io.InputStream;
+import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
@@ -71,7 +72,7 @@ public FormPart(FileItemStream stream) {
       fileName = stream.getName();
 
       if(contentType == null || contentType.contains(MediaType.TEXT_PLAIN)) {
-        textContent = new String(binaryContent);
+        textContent = new String(binaryContent, StandardCharsets.UTF_8);
       }
     }
 

File: engine-spring/core/src/main/java/org/camunda/bpm/engine/spring/SpringTransactionInterceptor.java
Patch:
@@ -24,6 +24,7 @@
 import org.camunda.bpm.engine.impl.db.sql.DbSqlSession;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandInterceptor;
+import org.camunda.bpm.engine.impl.util.ExceptionUtil;
 import org.springframework.transaction.PlatformTransactionManager;
 import org.springframework.transaction.TransactionStatus;
 import org.springframework.transaction.TransactionSystemException;
@@ -79,7 +80,7 @@ public <T> T execute(final Command<T> command) {
         throw ProcessEngineLogger.PERSISTENCE_LOGGER.crdbTransactionRetryExceptionOnCommit(cause);
 
       } else {
-        throw ex;
+        throw ExceptionUtil.wrapPersistenceException(ex);
 
       }
     }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/RuntimeServiceTest.java
Patch:
@@ -531,7 +531,7 @@ public void testDeleteProcessInstancesWithFake() {
     ProcessInstance instance = runtimeService.startProcessInstanceByKey("oneTaskProcess");
 
     try {
-      runtimeService.deleteProcessInstances(Arrays.asList(instance.getId(), "aFake"), "test", false, false, false);
+      runtimeService.deleteProcessInstances(Arrays.asList(instance.getId(), "aFake"), "test", false, false, false, false);
       fail("ProcessEngineException expected");
     }catch (ProcessEngineException e) {
       //expected
@@ -3255,7 +3255,7 @@ public void testDeleteProcessInstancesWithoutSubprocessInstances() {
     subprocessList.addAll(runtimeService.createProcessInstanceQuery().superProcessInstanceId(processInstance2.getId()).list());
 
     // when
-    runtimeService.deleteProcessInstances(Arrays.asList(processInstance.getId(), processInstance2.getId()), null, false, false, true);
+    runtimeService.deleteProcessInstances(Arrays.asList(processInstance.getId(), processInstance2.getId()), null, false, false, true, false);
 
     // then
     testRule.assertProcessEnded(processInstance.getId());
@@ -3281,7 +3281,7 @@ public void testDeleteProcessInstancesWithSubprocessInstances() {
     subprocessList.addAll(runtimeService.createProcessInstanceQuery().superProcessInstanceId(processInstance2.getId()).list());
 
     // when
-    runtimeService.deleteProcessInstances(Arrays.asList(processInstance.getId(), processInstance2.getId()), null, false, false, false);
+    runtimeService.deleteProcessInstances(Arrays.asList(processInstance.getId(), processInstance2.getId()), null, false, false, false, false);
 
     // then
     testRule.assertProcessEnded(processInstance.getId());

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/util/SpringBootProcessEngineLogger.java
Patch:
@@ -35,11 +35,11 @@ public class SpringBootProcessEngineLogger extends BaseLogger {
   public static final SpringBootProcessEngineLogger LOG = createLogger(SpringBootProcessEngineLogger.class, PROJECT_CODE, PACKAGE, PROJECT_ID);
 
   public void creatingInitialAdminUser(User adminUser) {
-    logInfo("010", "Creating initial Admin User: {}", adminUser);
+    logDebug("010", "Creating initial Admin User: {}", adminUser);
   }
 
   public void skipAdminUserCreation(User existingUser) {
-    logInfo("011", "Skip creating initial Admin User, user does exist: {}", existingUser);
+    logDebug("011", "Skip creating initial Admin User, user does exist: {}", existingUser);
   }
 
   public void createInitialFilter(Filter filter) {

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/type/attribute/Attribute.java
Patch:
@@ -53,6 +53,8 @@ public interface Attribute<T> {
 
   T getDefaultValue();
 
+  void removeAttribute(ModelElementInstance modelElement);
+
   boolean isRequired();
 
   /**

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ProcessDefinitionManager.java
Patch:
@@ -164,9 +164,8 @@ protected ProcessDefinitionEntity findProcessDefinitionByKeyVersionOrVersionTag(
   }
 
   public List<ProcessDefinition> findProcessDefinitionsByKey(String processDefinitionKey) {
-    ProcessDefinitionQueryImpl processDefinitionQuery = new ProcessDefinitionQueryImpl()
-      .processDefinitionKey(processDefinitionKey);
-    return  findProcessDefinitionsByQueryCriteria(processDefinitionQuery, null);
+    ProcessDefinitionQueryImpl processDefinitionQuery = new ProcessDefinitionQueryImpl().processDefinitionKeysIn(processDefinitionKey);
+    return findProcessDefinitionsByQueryCriteria(processDefinitionQuery, null);
   }
 
   public List<ProcessDefinition> findProcessDefinitionsStartableByUser(String user) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -940,7 +940,7 @@ public abstract class ProcessEngineConfigurationImpl extends ProcessEngineConfig
    * Specifies how often a cleanup job will be executed before an incident is raised.
    * This property overrides the global {@code defaultNumberOfRetries} property which has a default value of {@code 3}.
    */
-  protected Integer historyCleanupDefaultNumberOfRetries;
+  protected int historyCleanupDefaultNumberOfRetries = Integer.MIN_VALUE;
 
   /**
    * Time to live for historic job log entries written by history cleanup jobs.
@@ -4024,11 +4024,11 @@ public ProcessEngineConfigurationImpl setHistoryCleanupJobPriority(long historyC
     return this;
   }
 
-  public Integer getHistoryCleanupDefaultNumberOfRetries() {
+  public int getHistoryCleanupDefaultNumberOfRetries() {
     return this.historyCleanupDefaultNumberOfRetries;
   }
 
-  public ProcessEngineConfigurationImpl setHistoryCleanupDefaultNumberOfRetries(Integer historyCleanupDefaultNumberOfRetries) {
+  public ProcessEngineConfigurationImpl setHistoryCleanupDefaultNumberOfRetries(int historyCleanupDefaultNumberOfRetries) {
     this.historyCleanupDefaultNumberOfRetries = historyCleanupDefaultNumberOfRetries;
     return this;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/util/ExceptionUtil.java
Patch:
@@ -219,7 +219,7 @@ public static boolean checkVariableIntegrityViolation(PersistenceException persi
     }
 
     String message = sqlException.getMessage().toLowerCase();
-    String sqlState = sqlException.getSQLState().toUpperCase();
+    String sqlState = sqlException.getSQLState();
     int errorCode = sqlException.getErrorCode();
 
     // MySQL & MariaDB

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/exception/ExceptionHandlerHelper.java
Patch:
@@ -37,7 +37,7 @@
 public class ExceptionHandlerHelper {
 
   protected static final ExceptionLogger LOGGER = ExceptionLogger.REST_LOGGER;
-  protected static ExceptionHandlerHelper INSTANCE = new ExceptionHandlerHelper();
+  protected static final ExceptionHandlerHelper INSTANCE = new ExceptionHandlerHelper();
 
   private ExceptionHandlerHelper() {
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/entitymanager/DbEntityManager.java
Patch:
@@ -583,8 +583,8 @@ public void update(Class<? extends DbEntity> entityType, String statement, Objec
    * @param statement
    * @param parameter
    */
-  public void updatePreserveOrder(Class<? extends DbEntity> entityType, String statement, Object parameter) {
-    performBulkOperationPreserveOrder(entityType, statement, parameter, UPDATE_BULK);
+  public DbOperation updatePreserveOrder(Class<? extends DbEntity> entityType, String statement, Object parameter) {
+    return performBulkOperationPreserveOrder(entityType, statement, parameter, UPDATE_BULK);
   }
 
   public void delete(Class<? extends DbEntity> entityType, String statement, Object parameter) {

File: qa/test-db-instance-migration/test-fixture-719/src/main/java/org/camunda/bpm/qa/upgrade/TestFixture.java
Patch:
@@ -19,6 +19,7 @@
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
+import org.camunda.bpm.qa.upgrade.batch.SetRemovalTimeToProcessInstanceScenario;
 import org.camunda.bpm.qa.upgrade.httl.EnforceHistoryTimeToLiveScenario;
 import org.camunda.bpm.qa.upgrade.variables.JpaVariableScenario;
 
@@ -40,6 +41,7 @@ public static void main(String... args) {
     // example scenario setup
     runner.setupScenarios(JpaVariableScenario.class);
     runner.setupScenarios(EnforceHistoryTimeToLiveScenario.class);
+    runner.setupScenarios(SetRemovalTimeToProcessInstanceScenario.class);
 
     processEngine.close();
   }

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios7200/variables/JPAVariableTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.qa.upgrade.scenarios7190.variables;
+package org.camunda.bpm.qa.upgrade.scenarios7200.variables;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;

File: qa/test-db-rolling-update/rolling-update-util/src/main/java/org/camunda/bpm/qa/rolling/update/TestFixture.java
Patch:
@@ -22,6 +22,7 @@
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.qa.rolling.update.scenarios.DeploymentWhichShouldBeDeletedScenario;
 import org.camunda.bpm.qa.rolling.update.scenarios.authorization.AuthorizationScenario;
+import org.camunda.bpm.qa.rolling.update.scenarios.batch.SetRemovalTimeToProcessInstanceScenario;
 import org.camunda.bpm.qa.rolling.update.scenarios.callactivity.ProcessWithCallActivityScenario;
 import org.camunda.bpm.qa.rolling.update.scenarios.cleanup.HistoryCleanupScenario;
 import org.camunda.bpm.qa.rolling.update.scenarios.eventSubProcess.ProcessWithEventSubProcessScenario;
@@ -82,6 +83,7 @@ public static void main(String[] args) {
     if (RollingUpdateConstants.NEW_ENGINE_TAG.equals(currentFixtureTag)) { // create data with new engine
       runner.setupScenarios(HistoryCleanupScenario.class);
       runner.setupScenarios(EmptyStringVariableScenario.class);
+      runner.setupScenarios(SetRemovalTimeToProcessInstanceScenario.class);
     }
 
     processEngine.close();

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/extension/BpmPlatformExtension.java
Patch:
@@ -19,6 +19,7 @@
 import org.camunda.bpm.container.impl.jboss.extension.resource.BpmPlatformRootDefinition;
 import org.jboss.as.controller.Extension;
 import org.jboss.as.controller.ExtensionContext;
+import org.jboss.as.controller.ModelVersion;
 import org.jboss.as.controller.PathElement;
 import org.jboss.as.controller.SubsystemRegistration;
 import org.jboss.as.controller.descriptions.StandardResourceDescriptionResolver;
@@ -27,8 +28,6 @@
 import static org.camunda.bpm.container.impl.jboss.extension.ModelConstants.SUBSYSTEM_NAME;
 import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;
 
-
-
 /**
  * Defines the bpm-platform subsystem for Wildfly 8+ application server
  *
@@ -54,7 +53,7 @@ public class BpmPlatformExtension implements Extension {
 
   @Override
   public void initialize(ExtensionContext context) {
-    SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME, BPM_PLATFORM_SUBSYSTEM_MAJOR_VERSION, BPM_PLATFORM_SUBSYSTEM_MINOR_VERSION);
+    SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME, ModelVersion.create(BPM_PLATFORM_SUBSYSTEM_MAJOR_VERSION, BPM_PLATFORM_SUBSYSTEM_MINOR_VERSION));
     subsystem.registerSubsystemModel(BpmPlatformRootDefinition.INSTANCE);
     subsystem.registerXMLElementWriter(parser);
   }

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/service/MscRuntimeContainerDelegate.java
Patch:
@@ -281,6 +281,7 @@ protected void startTrackingServices() {
 
   protected void stopTrackingServices() {
     serviceContainer.removeListener(processEngineServiceTracker);
+    serviceContainer.removeListener(processApplicationServiceTracker);
   }
 
   /**

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/util/CustomMarshaller.java
Patch:
@@ -16,10 +16,10 @@
  */
 package org.camunda.bpm.container.impl.jboss.util;
 
-import javax.xml.stream.XMLStreamException;
-import javax.xml.stream.XMLStreamWriter;
 import java.lang.reflect.Field;
 import java.util.List;
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamWriter;
 import org.jboss.as.controller.AttributeDefinition;
 import org.jboss.as.controller.AttributeMarshaller;
 import org.jboss.as.controller.DefaultAttributeMarshaller;
@@ -168,7 +168,7 @@ public void marshallAsElement(AttributeDefinition attribute, ModelNode resourceM
         for (ModelNode element: resourceModel.get(attribute.getName()).asList()) {
           writer.writeStartElement(objectType.getXmlName());
           for (AttributeDefinition valueType : valueTypes) {
-            valueType.getAttributeMarshaller().marshallAsElement(valueType, element, false, writer);
+            valueType.getMarshaller().marshallAsElement(valueType, element, false, writer);
           }
           writer.writeEndElement();
         }

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/transform/DefaultElementTransformHandlerRegistry.java
Patch:
@@ -36,10 +36,10 @@
 
 public class DefaultElementTransformHandlerRegistry implements DmnElementTransformHandlerRegistry {
 
-  protected static final Map<Class<? extends DmnModelElementInstance>, DmnElementTransformHandler> handlers = getDefaultElementTransformHandlers();
+  protected final Map<Class<? extends DmnModelElementInstance>, DmnElementTransformHandler> handlers = getDefaultElementTransformHandlers();
 
   protected static Map<Class<? extends DmnModelElementInstance>, DmnElementTransformHandler> getDefaultElementTransformHandlers() {
-    Map<Class<? extends DmnModelElementInstance>, DmnElementTransformHandler> handlers = new HashMap<Class<? extends DmnModelElementInstance>, DmnElementTransformHandler>();
+    Map<Class<? extends DmnModelElementInstance>, DmnElementTransformHandler> handlers = new HashMap<>();
 
     handlers.put(Definitions.class, new DmnDecisionRequirementsGraphTransformHandler());
     handlers.put(Decision.class, new DmnDecisionTransformHandler());

File: engine-spring/core/src/test/java/org/camunda/bpm/engine/spring/test/configuration/InMemProcessEngineConfiguration.java
Patch:
@@ -63,6 +63,7 @@ public SpringProcessEngineConfiguration processEngineConfiguration() {
     config.setHistory("audit");
     config.setJobExecutorActivate(false);
     config.setDbMetricsReporterActivate(false);
+    config.setEnforceHistoryTimeToLive(false);
 
     return config;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/deploy/cache/ResourceDefinitionCache.java
Patch:
@@ -171,4 +171,4 @@ public Cache<String, T> getCache() {
 
   protected abstract void checkInvalidDefinitionWasCached(String deploymentId, String definitionId, T definition);
 
-}
\ No newline at end of file
+}

File: engine/src/test/java/org/camunda/bpm/engine/test/api/cfg/CustomExpressionManagerFunctionsTest.java
Patch:
@@ -55,6 +55,7 @@ public void shouldResolveCustomFunction() {
     // given
     processEngineConfiguration.getExpressionManager().addFunction("foobar", ReflectUtil.getMethod(TestFunctions.class, "foobar"));
     testRule.deploy(Bpmn.createExecutableProcess("process")
+        .camundaHistoryTimeToLive(180)
        .startEvent()
        .serviceTask().camundaExpression("${execution.setVariable(\"baz\", foobar())}")
        .userTask()
@@ -71,6 +72,7 @@ public void shouldResolveCustomPrefixedFunction() {
     // given
     processEngineConfiguration.getExpressionManager().addFunction("foo:bar", ReflectUtil.getMethod(TestFunctions.class, "foobar"));
     testRule.deploy(Bpmn.createExecutableProcess("process")
+        .camundaHistoryTimeToLive(180)
         .startEvent()
         .serviceTask().camundaExpression("${execution.setVariable(\"baz\", foo:bar())}")
         .userTask()

File: engine/src/test/java/org/camunda/bpm/engine/test/api/cfg/DeploymentCacheCfgTest.java
Patch:
@@ -358,6 +358,7 @@ protected List<BpmnModelInstance> createProcesses(int numberOfProcesses) {
 
   protected BpmnModelInstance createModel(String suffix) {
     BpmnModelInstance bpmnModel = Bpmn.createExecutableProcess("Process" + suffix)
+        .camundaHistoryTimeToLive(180)
         .startEvent("startEvent")
         .userTask().name("User Task")
         .endEvent("endEvent")

File: engine/src/test/java/org/camunda/bpm/engine/test/api/cfg/PersistenceExceptionTest.java
Patch:
@@ -61,7 +61,7 @@ public void testPersistenceExceptionContainsRealCause() {
     for (int i = 0; i < 100; i++) {
       longString.append("tensymbols");
     }
-    final BpmnModelInstance modelInstance = Bpmn.createExecutableProcess("process1").startEvent().userTask(longString.toString()).endEvent().done();
+    final BpmnModelInstance modelInstance = Bpmn.createExecutableProcess("process1").camundaHistoryTimeToLive(180).startEvent().userTask(longString.toString()).endEvent().done();
     testRule.deploy(modelInstance);
     try {
       runtimeService.startProcessInstanceByKey("process1").getId();

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/BulkHistoryDeleteDmnDisabledTest.java
Patch:
@@ -67,10 +67,12 @@ public void createProcessEngine() {
   @Test
   public void bulkHistoryDeleteWithDisabledDmn() {
     BpmnModelInstance model = Bpmn.createExecutableProcess("someProcess")
+        .camundaHistoryTimeToLive(180)
         .startEvent()
-          .userTask("userTask")
+        .userTask("userTask")
         .endEvent()
         .done();
+
     testRule.deploy(model);
     List<String> ids = prepareHistoricProcesses("someProcess");
     runtimeService.deleteProcessInstances(ids, null, true, true);

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/HistoryCleanupHistoricBatchTest.java
Patch:
@@ -378,6 +378,7 @@ private void initBatchOperationHistoryTimeToLive(String days) {
 
   private BpmnModelInstance createModelInstance() {
     BpmnModelInstance instance = Bpmn.createExecutableProcess("process")
+        .camundaHistoryTimeToLive(180)
         .startEvent("start")
         .userTask("userTask1")
         .sequenceFlowId("seq")

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/HistoryCleanupTaskMetricsTest.java
Patch:
@@ -50,6 +50,7 @@ public class HistoryCleanupTaskMetricsTest {
   private static final String DEFAULT_TTL_DAYS = "P5D";
 
   private static final BpmnModelInstance PROCESS = Bpmn.createExecutableProcess("process")
+      .camundaHistoryTimeToLive(180)
       .startEvent("start")
       .userTask("userTask1")
       .sequenceFlowId("seq")

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/metrics/DecisionMetricsTest.java
Patch:
@@ -75,6 +75,7 @@ protected void clearMetrics() {
   @Test
   public void testBusinessRuleTask() {
     BpmnModelInstance modelInstance = Bpmn.createExecutableProcess("testProcess")
+        .camundaHistoryTimeToLive(180)
         .startEvent()
         .businessRuleTask("task")
         .endEvent()

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/metrics/RootProcessInstanceMetricsTest.java
Patch:
@@ -40,12 +40,14 @@ public class RootProcessInstanceMetricsTest extends AbstractMetricsTest {
 
   protected static final String BASE_INSTANCE_KEY = "baseProcess";
   protected static final BpmnModelInstance BASE_INSTANCE = Bpmn.createExecutableProcess(BASE_INSTANCE_KEY)
+      .camundaHistoryTimeToLive(180)
       .startEvent()
       .endEvent()
       .done();
 
   protected static final String CALLED_DMN_INSTANCE_KEY = "calledDMNProcess";
   protected static final BpmnModelInstance CALLED_DMN_INSTANCE = Bpmn.createExecutableProcess(CALLED_DMN_INSTANCE_KEY)
+      .camundaHistoryTimeToLive(180)
       .startEvent()
       .businessRuleTask()
         .camundaDecisionRef("decision")
@@ -134,6 +136,7 @@ public void shouldCountRootProcessInstanceAndDecisionInstanceWithBusinessRuleTas
 
   protected BpmnModelInstance getCallingInstance(String calledInstanceKey, Map variables) {
     BpmnModelInstance modelInstance = Bpmn.createExecutableProcess(CALLING_INSTANCE_KEY)
+        .camundaHistoryTimeToLive(180)
         .startEvent()
         .callActivity("calledProcess")
           .calledElement(calledInstanceKey)

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/telemetry/TelemetryReporterTest.java
Patch:
@@ -1324,6 +1324,7 @@ protected Date addHour(Date date) {
 
   protected BpmnModelInstance createProcessWithBusinessRuleTask(String processId, String decisionRef) {
     BpmnModelInstance modelInstance = Bpmn.createExecutableProcess(processId)
+        .camundaHistoryTimeToLive(180)
         .startEvent()
         .businessRuleTask("task")
         .endEvent()

File: engine/src/test/java/org/camunda/bpm/engine/test/logging/ProcessDataLoggingContextMultipleEnginesTest.java
Patch:
@@ -119,8 +119,11 @@ public void shouldHaveProcessEngineNameAvailableInMdcForAllEngines() {
 
   private ProcessEngine createProcessEngine(String name) {
     StandaloneInMemProcessEngineConfiguration processEngineConfiguration = new StandaloneInMemProcessEngineConfiguration();
+
     processEngineConfiguration.setProcessEngineName(name);
     processEngineConfiguration.setJdbcUrl(String.format("jdbc:h2:mem:%s", name));
+    processEngineConfiguration.setEnforceHistoryTimeToLive(false);
+
     return processEngineConfiguration.buildProcessEngine();
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/interceptor/MultiEngineCommandContextTest.java
Patch:
@@ -127,8 +127,11 @@ public void shouldOpenNewCommandContextWhenInteractingWithOtherEngineAndBack() {
 
   private ProcessEngine createProcessEngine(String name) {
     StandaloneInMemProcessEngineConfiguration processEngineConfiguration = new StandaloneInMemProcessEngineConfiguration();
+
     processEngineConfiguration.setProcessEngineName(name);
     processEngineConfiguration.setJdbcUrl(String.format("jdbc:h2:mem:%s", name));
+    processEngineConfiguration.setEnforceHistoryTimeToLive(false);
+
     return processEngineConfiguration.buildProcessEngine();
   }
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/bpmnmodelapi/DelegationCodeBpmnModelRetrievalTest.java
Patch:
@@ -41,6 +41,7 @@ public class DelegationCodeBpmnModelRetrievalTest extends AbstractFoxPlatformInt
   @Deployment
   public static WebArchive createProcessApplication() {
     BpmnModelInstance process = Bpmn.createExecutableProcess(TEST_PROCESS)
+        .camundaHistoryTimeToLive(180)
         .startEvent()
         .serviceTask()
           .camundaDelegateExpression("${bpmnElementRetrievalDelegate}")

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/bpmnmodelapi/RepositoryServiceBpmnModelRetrievalTest.java
Patch:
@@ -40,7 +40,7 @@ public class RepositoryServiceBpmnModelRetrievalTest extends AbstractFoxPlatform
   @Deployment
   public static WebArchive createProcessApplication() {
     return initWebArchiveDeployment()
-        .addAsResource(new StringAsset(Bpmn.convertToString(Bpmn.createExecutableProcess(TEST_PROCESS).startEvent().done())), "testProcess.bpmn20.xml");
+        .addAsResource(new StringAsset(Bpmn.convertToString(Bpmn.createExecutableProcess(TEST_PROCESS).camundaHistoryTimeToLive(180).startEvent().done())), "testProcess.bpmn20.xml");
   }
 
   @Test

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/classloading/jobexecution/ClassloadingByJobPriorityTest.java
Patch:
@@ -44,6 +44,7 @@
 public class ClassloadingByJobPriorityTest extends AbstractFoxPlatformIntegrationTest {
 
   protected static final BpmnModelInstance process = Bpmn.createExecutableProcess("asyncTaskProcess")
+                                                         .camundaHistoryTimeToLive(180)
                                                          .startEvent()
                                                          .serviceTask()
                                                            .camundaExpression("${true}")

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/classloading/jobexecution/ClassloadingDuringJobExecutionTest.java
Patch:
@@ -38,7 +38,7 @@ public class ClassloadingDuringJobExecutionTest extends AbstractFoxPlatformInteg
   protected static String process =
       "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n" +
       "<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:camunda=\"http://camunda.org/schema/1.0/bpmn\" targetNamespace=\"Examples\">\r\n" +
-      "  <process id=\"Process_1\" name=\"ServiceTask_Throw_BMPN_Error\" isExecutable=\"true\">\r\n" +
+      "  <process id=\"Process_1\" name=\"ServiceTask_Throw_BMPN_Error\" isExecutable=\"true\" camunda:historyTimeToLive=\"P180D\">\r\n" +
       "    <startEvent id=\"StartEvent_1\">\r\n" +
       "    </startEvent>\r\n" +
       "    <sequenceFlow id=\"SequenceFlow_03wj6bv\" sourceRef=\"StartEvent_1\" targetRef=\"Task_1bkcm2v\" />\r\n" +

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/context/SetVariablesMigrationContextSwitchTest.java
Patch:
@@ -48,6 +48,7 @@ public class SetVariablesMigrationContextSwitchTest extends AbstractFoxPlatformI
 
   public static BpmnModelInstance oneTaskProcess(String key) {
     return Bpmn.createExecutableProcess(key)
+        .camundaHistoryTimeToLive(180)
       .startEvent()
       .userTask("userTask")
       .endEvent()

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/migration/MigrationContextSwitchBeansTest.java
Patch:
@@ -46,12 +46,14 @@
 public class MigrationContextSwitchBeansTest extends AbstractFoxPlatformIntegrationTest {
 
   public static final BpmnModelInstance ONE_TASK_PROCESS = Bpmn.createExecutableProcess("oneTaskProcess")
+      .camundaHistoryTimeToLive(180)
     .startEvent()
     .userTask("userTask")
     .endEvent()
     .done();
 
   public static final BpmnModelInstance BOUNDARY_EVENT_PROCESS = Bpmn.createExecutableProcess("boundaryProcess")
+      .camundaHistoryTimeToLive(180)
     .startEvent()
     .userTask("userTask")
     .boundaryEvent()

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/migration/MigrationContextSwitchClassesTest.java
Patch:
@@ -48,6 +48,7 @@ public class MigrationContextSwitchClassesTest extends AbstractFoxPlatformIntegr
 
   public static final BpmnModelInstance oneTaskProcess(String key) {
     return  Bpmn.createExecutableProcess(key)
+        .camundaHistoryTimeToLive(180)
       .startEvent()
       .userTask("userTask")
       .endEvent()
@@ -56,6 +57,7 @@ public static final BpmnModelInstance oneTaskProcess(String key) {
 
   public static final BpmnModelInstance subProcessProcess(String key) {
     return  Bpmn.createExecutableProcess(key)
+        .camundaHistoryTimeToLive(180)
       .startEvent()
       .subProcess()
       .camundaExecutionListenerClass(ExecutionListener.EVENTNAME_START, InstantiationListener.class.getName())
@@ -70,6 +72,7 @@ public static final BpmnModelInstance subProcessProcess(String key) {
   }
 
   public static final BpmnModelInstance BOUNDARY_EVENT_PROCESS = Bpmn.createExecutableProcess("boundaryProcess")
+      .camundaHistoryTimeToLive(180)
     .startEvent()
     .userTask("userTask")
     .boundaryEvent()

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/AbstractPaLocalScriptEngineTest.java
Patch:
@@ -48,6 +48,7 @@ public abstract class AbstractPaLocalScriptEngineTest extends AbstractFoxPlatfor
 
   protected static StringAsset createScriptTaskProcess(String scriptFormat, String scriptText) {
     BpmnModelInstance modelInstance = Bpmn.createExecutableProcess(PROCESS_ID)
+        .camundaHistoryTimeToLive(180)
       .startEvent()
       .scriptTask()
         .scriptFormat(scriptFormat)

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/AbstractScriptEngineSupportTest.java
Patch:
@@ -42,6 +42,7 @@ public abstract class AbstractScriptEngineSupportTest extends AbstractFoxPlatfor
 
   protected static StringAsset createScriptTaskProcess(String scriptFormat, String scriptTextPlain, String scriptTextSpin) {
     BpmnModelInstance modelInstance = Bpmn.createExecutableProcess(PROCESS_ID)
+        .camundaHistoryTimeToLive(180)
       .startEvent()
       .scriptTask()
         .scriptFormat(scriptFormat)

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/AbstractTemplateScriptEngineSupportTest.java
Patch:
@@ -44,6 +44,7 @@ public abstract class AbstractTemplateScriptEngineSupportTest extends AbstractFo
 
   protected static StringAsset createScriptTaskProcess(String scriptFormat, String scriptText) {
     BpmnModelInstance modelInstance = Bpmn.createExecutableProcess(PROCESS_ID)
+        .camundaHistoryTimeToLive(180)
       .startEvent()
       .scriptTask()
         .scriptFormat(scriptFormat)

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/GroovyAsyncScriptExecutionTest.java
Patch:
@@ -39,7 +39,7 @@ public class GroovyAsyncScriptExecutionTest extends AbstractFoxPlatformIntegrati
       "  xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\r\n" +
       "  xmlns:camunda=\"http://camunda.org/schema/1.0/bpmn\"\r\n" +
       "  targetNamespace=\"Examples\">\r\n" +
-      "  <process id=\"process\" isExecutable=\"true\">\r\n" +
+      "  <process id=\"process\" isExecutable=\"true\" camunda:historyTimeToLive=\"P180D\">\r\n" +
       "    <startEvent id=\"theStart\" />\r\n" +
       "    <sequenceFlow id=\"flow1\" sourceRef=\"theStart\" targetRef=\"theScriptTask\" />\r\n" +
       "    <scriptTask id=\"theScriptTask\" name=\"Execute script\" scriptFormat=\"groovy\" camunda:asyncBefore=\"true\">\r\n" +

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/GroovyPaClassImportTest.java
Patch:
@@ -54,7 +54,8 @@ public class GroovyPaClassImportTest extends AbstractFoxPlatformIntegrationTest
 
   protected static StringAsset createScriptTaskProcess(String scriptFormat, String scriptText, String pdk) {
     BpmnModelInstance modelInstance = Bpmn.createExecutableProcess(pdk)
-      .startEvent()
+        .camundaHistoryTimeToLive(180)
+        .startEvent()
       .scriptTask()
         .scriptFormat(scriptFormat)
         .scriptText(scriptText)

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/PythonPaClassImportTest.java
Patch:
@@ -54,6 +54,7 @@ public class PythonPaClassImportTest extends AbstractFoxPlatformIntegrationTest
 
   protected static StringAsset createScriptTaskProcess(String scriptFormat, String scriptText, String pdk) {
     BpmnModelInstance modelInstance = Bpmn.createExecutableProcess(pdk)
+        .camundaHistoryTimeToLive(180)
       .startEvent()
       .scriptTask()
         .scriptFormat(scriptFormat)

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/SetVariablesAsyncTest.java
Patch:
@@ -47,6 +47,7 @@ public class SetVariablesAsyncTest extends AbstractFoxPlatformIntegrationTest {
 
   public static BpmnModelInstance oneTaskProcess(String key) {
     return Bpmn.createExecutableProcess(key)
+        .camundaHistoryTimeToLive(180)
       .startEvent()
       .userTask("userTask")
       .endEvent()

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/util/TestHelper.java
Patch:
@@ -37,7 +37,7 @@
 public abstract class TestHelper {
 
   public final static String PROCESS_XML =
-          "<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"  targetNamespace=\"Examples\"><process id=\"PROCESS_KEY\" isExecutable=\"true\"><startEvent id=\"start\"/></process></definitions>";
+          "<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:camunda=\"http://camunda.org/schema/1.0/bpmn\"  targetNamespace=\"Examples\"><process id=\"PROCESS_KEY\" isExecutable=\"true\" camunda:historyTimeToLive=\"P180D\"><startEvent id=\"start\"/></process></definitions>";
 
   public static Asset getStringAsAssetWithReplacements(String string, String[][] replacements) {
 

File: commons/utils/src/main/java/org/camunda/commons/utils/cache/ConcurrentLruCache.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.concurrent.ConcurrentMap;
 
 /**
- * A thread-safe LRU {@link Cache} with a fixed capacity. If the cache reaches
+ * A thread-safe LRU org.camunda.commons.utils.cache.Cache with a fixed capacity. If the cache reaches
  * the capacity, it discards the least recently used entry first.
  * <p>
  * *Note*: The consistency of the keys queue with the keys in the cache is not ensured! This means, the keys queue

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/timer/StartTimerEventTest.java
Patch:
@@ -1765,6 +1765,7 @@ public void shouldReevaluateRepeatingToCronTimerCycle() throws Exception {
         .isEqualToIgnoringMinutes(new Date(ClockUtil.getCurrentTime().getTime() + TWO_HOURS));
   }
 
+  @Test
   public void shouldReevaluateCronToRepeatigTimerCycle() throws Exception {
     // given
     ClockUtil.setCurrentTime(new Date(1692338400000l)); //"2023/8/18 8:00:00"

File: engine/src/main/java/org/camunda/bpm/engine/impl/calendar/CycleBusinessCalendar.java
Patch:
@@ -54,7 +54,7 @@ public Date resolveDuedate(String duedateDescription, Date startDate, long repea
 
     }
     catch (Exception e) {
-      throw LOG.exceptionWhileParsingCronExpresison(duedateDescription, e);
+      throw LOG.exceptionWhileParsingCycleExpresison(duedateDescription, e);
     }
 
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/RepeatingFailedJobListener.java
Patch:
@@ -58,7 +58,7 @@ public Void execute(CommandContext commandContext) {
           .getJobManager()
           .findJobById(jobId);
 
-      Date newDueDate = failedJob.calculateRepeat();
+      Date newDueDate = failedJob.calculateNewDueDate();
 
       if (newDueDate != null) {
         failedJob.createNewTimerJob(newDueDate);

File: engine/src/main/java/org/camunda/bpm/engine/impl/util/EngineUtilLogger.java
Patch:
@@ -196,10 +196,10 @@ public IllegalStateException notInsideCommandContext(String operation) {
         "Operation {} requires active command context. No command context active on thread {}.", operation, Thread.currentThread()));
   }
 
-  public ProcessEngineException exceptionWhileParsingCronExpresison(String duedateDescription, Exception e) {
+  public ProcessEngineException exceptionWhileParsingCycleExpresison(String duedateDescription, Exception e) {
     return new ProcessEngineException(exceptionMessage(
         "026",
-        "Exception while parsing cron expression '{}': {}", duedateDescription, e.getMessage()), e);
+        "Exception while parsing cycle expression '{}': {}", duedateDescription, e.getMessage()), e);
   }
 
   public ProcessEngineException exceptionWhileResolvingDuedate(String duedate, Exception e) {

File: spin/dataformat-xml-dom/src/main/java/org/camunda/spin/impl/xml/dom/DomXmlLogger.java
Patch:
@@ -17,7 +17,6 @@
 package org.camunda.spin.impl.xml.dom;
 
 import java.util.NoSuchElementException;
-
 import org.camunda.commons.logging.BaseLogger;
 import org.camunda.spin.impl.logging.SpinLogger;
 import org.camunda.spin.xml.SpinXPathException;
@@ -189,7 +188,7 @@ public SpinXmlElementException elementIsNotChildOfThisElement(SpinXmlElement exi
   }
 
   public SpinXmlDataFormatException unableToFindStripSpaceXsl(String expression) {
-    return new SpinXmlDataFormatException(exceptionMessage("037", "Unable to find strip-space.xsl '{}'", expression));
+    return new SpinXmlDataFormatException(exceptionMessage("037", "No formatting configuration defined and unable to find the default '{}'", expression));
   }
 
   public SpinXmlDataFormatException unableToLoadFormattingTemplates(Throwable cause) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -1737,7 +1737,7 @@ public void initDatabaseType() {
       initDatabaseVendorAndVersion(databaseMetaData);
 
     } catch (SQLException e) {
-      LOG.databaseConnectionAccessException(e);
+      throw LOG.databaseConnectionAccessException(e);
     } finally {
       try {
         if (connection != null) {

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/DefaultDmnEngineConfiguration.java
Patch:
@@ -47,6 +47,7 @@ public class DefaultDmnEngineConfiguration extends DmnEngineConfiguration {
   public static final String FEEL_EXPRESSION_LANGUAGE_DMN12 = DmnModelConstants.FEEL12_NS;
   public static final String FEEL_EXPRESSION_LANGUAGE_DMN13 = DmnModelConstants.FEEL13_NS;
   public static final String FEEL_EXPRESSION_LANGUAGE_DMN14 = DmnModelConstants.FEEL14_NS;
+  public static final String FEEL_EXPRESSION_LANGUAGE_DMN15 = DmnModelConstants.FEEL15_NS;
   public static final String JUEL_EXPRESSION_LANGUAGE = "juel";
 
   protected DmnEngineMetricCollector engineMetricCollector;

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/evaluation/ExpressionEvaluationHandler.java
Patch:
@@ -170,7 +170,8 @@ public boolean isFeelExpressionLanguage(String expressionLanguage) {
       expressionLanguage.toLowerCase().equals(DefaultDmnEngineConfiguration.FEEL_EXPRESSION_LANGUAGE_ALTERNATIVE) ||
       expressionLanguage.equals(DefaultDmnEngineConfiguration.FEEL_EXPRESSION_LANGUAGE_DMN12) ||
       expressionLanguage.equals(DefaultDmnEngineConfiguration.FEEL_EXPRESSION_LANGUAGE_DMN13) ||
-      expressionLanguage.equals(DefaultDmnEngineConfiguration.FEEL_EXPRESSION_LANGUAGE_DMN14);
+      expressionLanguage.equals(DefaultDmnEngineConfiguration.FEEL_EXPRESSION_LANGUAGE_DMN14) ||
+      expressionLanguage.equals(DefaultDmnEngineConfiguration.FEEL_EXPRESSION_LANGUAGE_DMN15);
   }
 
 }

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/transform/DmnExpressionTransformHelper.java
Patch:
@@ -69,7 +69,8 @@ protected static String getGlobalExpressionLanguage(DmnElementTransformContext c
     if (!DefaultDmnEngineConfiguration.FEEL_EXPRESSION_LANGUAGE.equals(expressionLanguage) &&
         !DefaultDmnEngineConfiguration.FEEL_EXPRESSION_LANGUAGE_DMN12.equals(expressionLanguage) &&
         !DefaultDmnEngineConfiguration.FEEL_EXPRESSION_LANGUAGE_DMN13.equals(expressionLanguage) &&
-        !DefaultDmnEngineConfiguration.FEEL_EXPRESSION_LANGUAGE_DMN14.equals(expressionLanguage)) {
+        !DefaultDmnEngineConfiguration.FEEL_EXPRESSION_LANGUAGE_DMN14.equals(expressionLanguage) &&
+        !DefaultDmnEngineConfiguration.FEEL_EXPRESSION_LANGUAGE_DMN15.equals(expressionLanguage)) {
       return expressionLanguage;
     }
     else {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/Dmn.java
Patch:
@@ -22,6 +22,7 @@
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN13_ALTERNATIVE_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN13_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN14_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN15_NS;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -221,6 +222,7 @@ public static DmnModelInstance createEmptyModel() {
    */
   protected Dmn() {
     dmnModelBuilder = ModelBuilder.createInstance("DMN Model");
+    dmnModelBuilder.alternativeNamespace(DMN15_NS, DMN13_NS);
     dmnModelBuilder.alternativeNamespace(DMN14_NS, DMN13_NS);
     dmnModelBuilder.alternativeNamespace(DMN13_ALTERNATIVE_NS, DMN13_NS);
     dmnModelBuilder.alternativeNamespace(DMN12_NS, DMN13_NS);

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/DmnModelConstants.java
Patch:
@@ -23,6 +23,7 @@ public final class DmnModelConstants {
   public static final String DMN12_NS = "http://www.omg.org/spec/DMN/20180521/MODEL/";
   public static final String DMN13_NS = "https://www.omg.org/spec/DMN/20191111/MODEL/";
   public static final String DMN14_NS = "https://www.omg.org/spec/DMN/20211108/MODEL/";
+  public static final String DMN15_NS = "https://www.omg.org/spec/DMN/20230324/MODEL/";
   public static final String LATEST_DMN_NS = DMN13_NS;
 
   /**
@@ -40,7 +41,7 @@ public final class DmnModelConstants {
   public static final String DMN_12_SCHEMA_LOCATION = "org/camunda/bpm/model/dmn/schema/DMN12.xsd";
   public static final String DMN_13_SCHEMA_LOCATION = "org/camunda/bpm/model/dmn/schema/DMN13.xsd";
   public static final String DMN_14_SCHEMA_LOCATION = "org/camunda/bpm/model/dmn/schema/DMN14.xsd";
-
+  public static final String DMN_15_SCHEMA_LOCATION = "org/camunda/bpm/model/dmn/schema/DMN15.xsd";
   /**
    * The location of the DMN 1.1 XML schema released with Camunda 7.4.0
    */
@@ -51,6 +52,7 @@ public final class DmnModelConstants {
   public static final String FEEL12_NS = "http://www.omg.org/spec/DMN/20180521/FEEL/";
   public static final String FEEL13_NS = "https://www.omg.org/spec/DMN/20191111/FEEL/";
   public static final String FEEL14_NS = "https://www.omg.org/spec/DMN/20211108/FEEL/";
+  public static final String FEEL15_NS = "https://www.omg.org/spec/DMN/20230324/FEEL/";
 
   /** Camunda namespace */
   public static final String CAMUNDA_NS = "http://camunda.org/schema/1.0/dmn";

File: model-api/dmn-model/src/test/java/org/camunda/bpm/model/dmn/ExampleCompatibilityTest.java
Patch:
@@ -64,7 +64,9 @@ public static Collection<Object[]> parameters(){
          // DMN 1.3
          {Dmn.readModelFromStream(ExampleCompatibilityTest.class.getResourceAsStream("Example-DMN-1.3.dmn"))},
          // DMN 1.4
-         {Dmn.readModelFromStream(ExampleCompatibilityTest.class.getResourceAsStream("Example-DMN-1.4.dmn"))}
+         {Dmn.readModelFromStream(ExampleCompatibilityTest.class.getResourceAsStream("Example-DMN-1.4.dmn"))},
+         // DMN 1.5
+         {Dmn.readModelFromStream(ExampleCompatibilityTest.class.getResourceAsStream("Example-DMN-1.5.dmn"))}
      });
    }
 

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/DefaultDmnEngineConfiguration.java
Patch:
@@ -46,6 +46,7 @@ public class DefaultDmnEngineConfiguration extends DmnEngineConfiguration {
   public static final String FEEL_EXPRESSION_LANGUAGE_ALTERNATIVE = "feel";
   public static final String FEEL_EXPRESSION_LANGUAGE_DMN12 = DmnModelConstants.FEEL12_NS;
   public static final String FEEL_EXPRESSION_LANGUAGE_DMN13 = DmnModelConstants.FEEL13_NS;
+  public static final String FEEL_EXPRESSION_LANGUAGE_DMN14 = DmnModelConstants.FEEL14_NS;
   public static final String JUEL_EXPRESSION_LANGUAGE = "juel";
 
   protected DmnEngineMetricCollector engineMetricCollector;

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/evaluation/ExpressionEvaluationHandler.java
Patch:
@@ -169,7 +169,8 @@ public boolean isFeelExpressionLanguage(String expressionLanguage) {
     return expressionLanguage.equals(DefaultDmnEngineConfiguration.FEEL_EXPRESSION_LANGUAGE) ||
       expressionLanguage.toLowerCase().equals(DefaultDmnEngineConfiguration.FEEL_EXPRESSION_LANGUAGE_ALTERNATIVE) ||
       expressionLanguage.equals(DefaultDmnEngineConfiguration.FEEL_EXPRESSION_LANGUAGE_DMN12) ||
-      expressionLanguage.equals(DefaultDmnEngineConfiguration.FEEL_EXPRESSION_LANGUAGE_DMN13);
+      expressionLanguage.equals(DefaultDmnEngineConfiguration.FEEL_EXPRESSION_LANGUAGE_DMN13) ||
+      expressionLanguage.equals(DefaultDmnEngineConfiguration.FEEL_EXPRESSION_LANGUAGE_DMN14);
   }
 
 }

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/transform/DmnExpressionTransformHelper.java
Patch:
@@ -68,7 +68,8 @@ protected static String getGlobalExpressionLanguage(DmnElementTransformContext c
     String expressionLanguage = context.getModelInstance().getDefinitions().getExpressionLanguage();
     if (!DefaultDmnEngineConfiguration.FEEL_EXPRESSION_LANGUAGE.equals(expressionLanguage) &&
         !DefaultDmnEngineConfiguration.FEEL_EXPRESSION_LANGUAGE_DMN12.equals(expressionLanguage) &&
-        !DefaultDmnEngineConfiguration.FEEL_EXPRESSION_LANGUAGE_DMN13.equals(expressionLanguage)) {
+        !DefaultDmnEngineConfiguration.FEEL_EXPRESSION_LANGUAGE_DMN13.equals(expressionLanguage) &&
+        !DefaultDmnEngineConfiguration.FEEL_EXPRESSION_LANGUAGE_DMN14.equals(expressionLanguage)) {
       return expressionLanguage;
     }
     else {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/Dmn.java
Patch:
@@ -21,6 +21,7 @@
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN12_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN13_ALTERNATIVE_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN13_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN14_NS;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -220,6 +221,7 @@ public static DmnModelInstance createEmptyModel() {
    */
   protected Dmn() {
     dmnModelBuilder = ModelBuilder.createInstance("DMN Model");
+    dmnModelBuilder.alternativeNamespace(DMN14_NS, DMN13_NS);
     dmnModelBuilder.alternativeNamespace(DMN13_ALTERNATIVE_NS, DMN13_NS);
     dmnModelBuilder.alternativeNamespace(DMN12_NS, DMN13_NS);
     dmnModelBuilder.alternativeNamespace(DMN11_NS, DMN13_NS);

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/DmnModelConstants.java
Patch:
@@ -22,6 +22,7 @@ public final class DmnModelConstants {
   public static final String DMN11_NS = "http://www.omg.org/spec/DMN/20151101/dmn.xsd";
   public static final String DMN12_NS = "http://www.omg.org/spec/DMN/20180521/MODEL/";
   public static final String DMN13_NS = "https://www.omg.org/spec/DMN/20191111/MODEL/";
+  public static final String DMN14_NS = "https://www.omg.org/spec/DMN/20211108/MODEL/";
   public static final String LATEST_DMN_NS = DMN13_NS;
 
   /**
@@ -38,6 +39,7 @@ public final class DmnModelConstants {
   public static final String DMN_11_SCHEMA_LOCATION = "org/camunda/bpm/model/dmn/schema/DMN11.xsd";
   public static final String DMN_12_SCHEMA_LOCATION = "org/camunda/bpm/model/dmn/schema/DMN12.xsd";
   public static final String DMN_13_SCHEMA_LOCATION = "org/camunda/bpm/model/dmn/schema/DMN13.xsd";
+  public static final String DMN_14_SCHEMA_LOCATION = "org/camunda/bpm/model/dmn/schema/DMN14.xsd";
 
   /**
    * The location of the DMN 1.1 XML schema released with Camunda 7.4.0
@@ -48,6 +50,7 @@ public final class DmnModelConstants {
   public static final String FEEL_NS = "http://www.omg.org/spec/FEEL/20140401";
   public static final String FEEL12_NS = "http://www.omg.org/spec/DMN/20180521/FEEL/";
   public static final String FEEL13_NS = "https://www.omg.org/spec/DMN/20191111/FEEL/";
+  public static final String FEEL14_NS = "https://www.omg.org/spec/DMN/20211108/FEEL/";
 
   /** Camunda namespace */
   public static final String CAMUNDA_NS = "http://camunda.org/schema/1.0/dmn";

File: model-api/dmn-model/src/test/java/org/camunda/bpm/model/dmn/ExampleCompatibilityTest.java
Patch:
@@ -62,7 +62,9 @@ public static Collection<Object[]> parameters(){
          // DMN 1.2
          {Dmn.readModelFromStream(ExampleCompatibilityTest.class.getResourceAsStream("Example-DMN-1.2.dmn"))},
          // DMN 1.3
-         {Dmn.readModelFromStream(ExampleCompatibilityTest.class.getResourceAsStream("Example-DMN-1.3.dmn"))}
+         {Dmn.readModelFromStream(ExampleCompatibilityTest.class.getResourceAsStream("Example-DMN-1.3.dmn"))},
+         // DMN 1.4
+         {Dmn.readModelFromStream(ExampleCompatibilityTest.class.getResourceAsStream("Example-DMN-1.4.dmn"))}
      });
    }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/ConcurrencyTestHelper.java
Patch:
@@ -20,9 +20,9 @@
 
 import java.util.ArrayList;
 import java.util.List;
-
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.impl.interceptor.Command;
+import org.camunda.bpm.engine.impl.util.ExceptionUtil;
 import org.junit.After;
 import org.junit.Before;
 
@@ -187,7 +187,7 @@ public void sync() {
     public void makeContinue() {
       synchronized (this) {
         if (exception != null) {
-          fail();
+          fail("Controlled thread has run into an exception already: " + exception.getClass().getName() + ". Stack trace:\n" + ExceptionUtil.getExceptionStacktrace(exception));
         }
         notifyAll();
       }

File: distro/run/qa/integration-tests/src/test/java/org/camunda/bpm/run/qa/util/SpringBootManagedContainer.java
Patch:
@@ -31,7 +31,6 @@
 import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.TimeoutException;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -43,11 +42,12 @@ public class SpringBootManagedContainer {
 
   public static final String APPLICATION_YML_PATH = "configuration/default.yml";
   public static final String RESOURCES_PATH = "configuration/resources";
+  public static final String USERLIB_PATH = "configuration/userlib";
 
   protected static final String BASE_TEST_APPLICATION_YML = "base-test-application.yml";
   protected static final String RUN_HOME_VARIABLE = "camunda.run.home";
 
-  protected static final long RAMP_UP_SECONDS = 40;
+  protected static final long RAMP_UP_SECONDS = 60;
   protected static final long RAMP_DOWN_SECONDS = 20;
 
   protected static final Logger log = LoggerFactory.getLogger(SpringBootManagedContainer.class.getName());

File: engine/src/main/java/org/camunda/bpm/engine/impl/identity/db/DbIdentityServiceProvider.java
Patch:
@@ -299,7 +299,7 @@ public IdentityOperationResult createMembership(String userId, String groupId) {
   public IdentityOperationResult deleteMembership(String userId, String groupId) {
     checkAuthorization(Permissions.DELETE, Resources.GROUP_MEMBERSHIP, groupId);
     if (existsMembership(userId, groupId)) {
-      deleteAuthorizations(Resources.GROUP_MEMBERSHIP, groupId);
+      deleteAuthorizationsForUser(Resources.GROUP_MEMBERSHIP, groupId, userId);
 
       Map<String, Object> parameters = new HashMap<>();
       parameters.put("userId", userId);

File: engine-rest/engine-rest/src/test/java-resteasy/org/camunda/bpm/engine/rest/util/container/ResteasyTomcatServerBootstrap.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.camunda.bpm.engine.rest.util.container;
 
-import org.camunda.bpm.engine.rest.util.container.TomcatServerBootstrap;
 import org.jboss.shrinkwrap.api.spec.WebArchive;
 import org.jboss.shrinkwrap.resolver.api.maven.PomEquippedResolveStage;
 import org.jboss.shrinkwrap.resolver.api.maven.ScopeType;

File: spring-boot-starter/starter-client/spring-boot/src/test/java/org/camunda/bpm/client/spring/boot/starter/ParsePropertiesHelper.java
Patch:
@@ -23,7 +23,7 @@
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit4.SpringRunner;
 
-import javax.annotation.PostConstruct;
+import jakarta.annotation.PostConstruct;
 import java.util.Map;
 
 @RunWith(SpringRunner.class)

File: spring-boot-starter/starter-qa/integration-test-webapp/invoice-example/src/main/java/org/camunda/bpm/qa/Application.java
Patch:
@@ -26,7 +26,7 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.context.event.EventListener;
 
-import javax.annotation.PostConstruct;
+import jakarta.annotation.PostConstruct;
 
 @SpringBootApplication
 @EnableProcessApplication("myProcessApplication")

File: spring-boot-starter/starter-rest/src/main/java/org/camunda/bpm/spring/boot/starter/rest/CamundaJerseyResourceConfig.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.spring.boot.starter.rest;
 
-import javax.ws.rs.ApplicationPath;
+import jakarta.ws.rs.ApplicationPath;
 import org.camunda.bpm.engine.rest.impl.CamundaRestResources;
 import org.glassfish.jersey.jackson.JacksonFeature;
 import org.glassfish.jersey.server.ResourceConfig;

File: spring-boot-starter/starter-rest/src/test/java/my/own/custom/spring/boot/project/JerseyConfig.java
Patch:
@@ -16,7 +16,7 @@
  */
 package my.own.custom.spring.boot.project;
 
-import javax.ws.rs.ApplicationPath;
+import jakarta.ws.rs.ApplicationPath;
 
 import org.camunda.bpm.spring.boot.starter.rest.CamundaJerseyResourceConfig;
 import org.springframework.stereotype.Component;

File: spring-boot-starter/starter-rest/src/test/java/my/own/custom/spring/boot/project/ProcessStartService.java
Patch:
@@ -16,8 +16,8 @@
  */
 package my.own.custom.spring.boot.project;
 
-import javax.ws.rs.POST;
-import javax.ws.rs.Path;
+import jakarta.ws.rs.POST;
+import jakarta.ws.rs.Path;
 
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.rest.dto.runtime.ProcessInstanceDto;

File: spring-boot-starter/starter-webapp-core/src/main/java/org/camunda/bpm/spring/boot/starter/webapp/filter/LazyInitRegistration.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.HashSet;
 import java.util.Set;
 
-import javax.servlet.Filter;
+import jakarta.servlet.Filter;
 
 import org.camunda.bpm.spring.boot.starter.webapp.filter.LazyDelegateFilter.InitHook;
 import org.slf4j.Logger;

File: spring-boot-starter/starter-webapp-core/src/main/java/org/camunda/bpm/spring/boot/starter/webapp/filter/ResourceLoaderDependingFilter.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.spring.boot.starter.webapp.filter;
 
-import javax.servlet.Filter;
+import jakarta.servlet.Filter;
 import org.camunda.bpm.spring.boot.starter.property.WebappProperty;
 
 import org.springframework.core.io.ResourceLoader;

File: spring-boot-starter/starter-webapp-core/src/main/java/org/camunda/bpm/spring/boot/starter/webapp/filter/ResourceLoadingSecurityFilter.java
Patch:
@@ -19,8 +19,8 @@
 import java.io.IOException;
 import java.io.InputStream;
 
-import javax.servlet.FilterConfig;
-import javax.servlet.ServletException;
+import jakarta.servlet.FilterConfig;
+import jakarta.servlet.ServletException;
 
 import org.camunda.bpm.engine.impl.util.IoUtil;
 import org.camunda.bpm.spring.boot.starter.property.WebappProperty;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/apppath/ChangedAppPathIT.java
Patch:
@@ -24,7 +24,7 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.web.client.TestRestTemplate;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.test.context.TestPropertySource;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/apppath/EmptyAppPathIT.java
Patch:
@@ -24,7 +24,7 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.web.client.TestRestTemplate;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;
 

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/LazyInitRegistrationTest.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.HashSet;
 import java.util.Set;
 
-import javax.servlet.Filter;
+import jakarta.servlet.Filter;
 
 import org.camunda.bpm.spring.boot.starter.webapp.filter.LazyDelegateFilter.InitHook;
 import org.junit.Before;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/authcache/it/AuthCacheTTLDefaultIT.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/authcache/it/AuthCacheTTLDisabledIT.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/authcache/it/AuthCacheTTLValidateAllRequestsIT.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/CsrfPreventionIT.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.junit4.SpringRunner;
 

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/CookieNameIT.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/SameSiteCustomValueIT.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/SameSiteDisabledIT.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/SameSiteEnabledIT.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/SameSiteOptionLaxIT.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/SameSiteOptionStrictIT.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/SecureDisabledIT.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/SecureEnabledIT.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/headersec/it/HstsIT.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;
 

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/headersec/it/HttpHeaderSecurityDefaultsIT.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.context.junit4.SpringRunner;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/headersec/it/properties/HttpHeaderSecurityAbsenceIT.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/headersec/it/properties/HttpHeaderSecurityPresenceIT.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/headersec/it/properties/HttpHeaderSecurityValueIT.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/redirect/ResourceLoadingProcessEnginesAppPathCamundaIndexRedirectTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.junit4.SpringRunner;
 

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/redirect/ResourceLoadingProcessEnginesAppPathCamundaTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.junit4.SpringRunner;
 

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/redirect/ResourceLoadingProcessEnginesAppPathRootIndexRedirectTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.junit4.SpringRunner;
 

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/redirect/ResourceLoadingProcessEnginesAppPathRootTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.junit4.SpringRunner;
 

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/session/it/SessionCookieIT.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.junit4.SpringRunner;
 

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/session/it/properties/CookieNameIT.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/session/it/properties/SameSiteCustomValueIT.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/session/it/properties/SameSiteDisabledIT.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/session/it/properties/SameSiteEnabledIT.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/session/it/properties/SameSiteOptionLaxIT.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/session/it/properties/SameSiteOptionStrictIT.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/session/it/properties/SecureDisabledIT.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/session/it/properties/SecureEnabledIT.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/CamundaBpmTelemetryConfiguration.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.spring.boot.starter;
 
-import javax.servlet.ServletContext;
+import jakarta.servlet.ServletContext;
 
 import org.camunda.bpm.spring.boot.starter.telemetry.CamundaApplicationServerConfigurator;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/SpringBootProcessApplication.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.Optional;
 import java.util.Set;
 
-import javax.servlet.ServletContext;
+import jakarta.servlet.ServletContext;
 
 import org.camunda.bpm.application.PostDeploy;
 import org.camunda.bpm.application.PreUndeploy;

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/configuration/impl/DefaultMetricsConfiguration.java
Patch:
@@ -20,7 +20,7 @@
 import org.camunda.bpm.spring.boot.starter.configuration.CamundaMetricsConfiguration;
 import org.camunda.bpm.spring.boot.starter.property.MetricsProperty;
 
-import javax.annotation.PostConstruct;
+import jakarta.annotation.PostConstruct;
 
 public class DefaultMetricsConfiguration extends AbstractCamundaConfiguration implements CamundaMetricsConfiguration {
 

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/configuration/impl/custom/CreateAdminUserConfiguration.java
Patch:
@@ -29,7 +29,7 @@
 import org.camunda.bpm.spring.boot.starter.property.AdminUserProperty;
 import org.springframework.beans.BeanUtils;
 
-import javax.annotation.PostConstruct;
+import jakarta.annotation.PostConstruct;
 import java.util.Collections;
 import java.util.Optional;
 

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/configuration/impl/custom/CreateFilterConfiguration.java
Patch:
@@ -21,7 +21,7 @@
 import org.camunda.bpm.spring.boot.starter.configuration.impl.AbstractCamundaConfiguration;
 import org.camunda.bpm.spring.boot.starter.property.FilterProperty;
 
-import javax.annotation.PostConstruct;
+import jakarta.annotation.PostConstruct;
 import java.util.Collections;
 import java.util.Objects;
 import java.util.Optional;

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/telemetry/CamundaApplicationServerConfigurator.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.spring.boot.starter.telemetry;
 
-import javax.servlet.ServletContext;
+import jakarta.servlet.ServletContext;
 
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.impl.ManagementServiceImpl;

File: spring-boot-starter/starter/src/test/java/org/camunda/bpm/spring/boot/starter/CamundaEventingDisabledIT.java
Patch:
@@ -33,7 +33,7 @@
 import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.context.junit4.SpringRunner;
 
-import javax.transaction.Transactional;
+import jakarta.transaction.Transactional;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: spring-boot-starter/starter/src/test/java/org/camunda/bpm/spring/boot/starter/multitask/MultipleTaskExecutorsIT.java
Patch:
@@ -30,9 +30,9 @@
 import org.springframework.core.task.TaskExecutor;
 import org.springframework.messaging.simp.config.MessageBrokerRegistry;
 import org.springframework.test.context.junit4.SpringRunner;
-import org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer;
 import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
 import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
+import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;
 
 /**
  * @see <a href=
@@ -60,7 +60,7 @@ static class MultipleTaskExecutorsConfig {
 
     @Configuration
     @EnableWebSocketMessageBroker
-    public class WebSocketConfig extends AbstractWebSocketMessageBrokerConfigurer {
+    public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {
 
       @Override
       public void configureMessageBroker(MessageBrokerRegistry config) {

File: spring-boot-starter/starter/src/test/java/org/camunda/bpm/spring/boot/starter/property/ParsePropertiesHelper.java
Patch:
@@ -22,7 +22,7 @@
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
-import javax.annotation.PostConstruct;
+import jakarta.annotation.PostConstruct;
 
 @RunWith(SpringJUnit4ClassRunner.class)
 @ContextConfiguration(classes = ParsePropertiesHelper.TestConfig.class)

File: spring-boot-starter/starter/src/test/java/org/camunda/bpm/spring/boot/starter/test/nonpa/service/TransactionalTestService.java
Patch:
@@ -16,8 +16,8 @@
  */
 package org.camunda.bpm.spring.boot.starter.test.nonpa.service;
 
-import javax.transaction.Transactional;
-import javax.transaction.Transactional.TxType;
+import jakarta.transaction.Transactional;
+import jakarta.transaction.Transactional.TxType;
 
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 

File: spring-boot-starter/starter/src/test/java/org/camunda/bpm/spring/boot/starter/test/nonpa/service/TransactionalTestServiceImpl.java
Patch:
@@ -19,8 +19,8 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import javax.transaction.Transactional;
-import javax.transaction.Transactional.TxType;
+import jakarta.transaction.Transactional;
+import jakarta.transaction.Transactional.TxType;
 
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.runtime.ProcessInstance;

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/spi/transform/DmnElementTransformHandler.java
Patch:
@@ -19,7 +19,9 @@
 import org.camunda.bpm.model.dmn.instance.DmnModelElementInstance;
 
 /**
- * Handler to transform a DMN model element.
+ * Handler to transform a DMN model element. By design, all handler implementations have to be stateless since they are
+ * stored by the static context of DefaultElementTransformHandlerRegistry & can be shared across different
+ * DmnEngineConfigurations or ProcessEngineConfiguration.
  *
  * @param <Source> the type of the transformation input
  * @param <Target> the type of the transformation output

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -2641,8 +2641,7 @@ protected void initDmnEngine() {
           .dmnHistoryEventProducer(dmnHistoryEventProducer)
           .scriptEngineResolver(scriptingEngines)
           .feelCustomFunctionProviders(dmnFeelCustomFunctionProviders)
-          .enableFeelLegacyBehavior(dmnFeelEnableLegacyBehavior)
-          .historyTimeToLive(historyTimeToLive);
+          .enableFeelLegacyBehavior(dmnFeelEnableLegacyBehavior);
 
       if (dmnElProvider != null) {
         dmnEngineConfigurationBuilder.elProvider(dmnElProvider);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -2641,7 +2641,8 @@ protected void initDmnEngine() {
           .dmnHistoryEventProducer(dmnHistoryEventProducer)
           .scriptEngineResolver(scriptingEngines)
           .feelCustomFunctionProviders(dmnFeelCustomFunctionProviders)
-          .enableFeelLegacyBehavior(dmnFeelEnableLegacyBehavior);
+          .enableFeelLegacyBehavior(dmnFeelEnableLegacyBehavior)
+          .historyTimeToLive(historyTimeToLive);
 
       if (dmnElProvider != null) {
         dmnEngineConfigurationBuilder.elProvider(dmnElProvider);

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/SetTaskPropertyAuthorizationTest.java
Patch:
@@ -32,11 +32,11 @@
 import org.camunda.bpm.engine.AuthorizationException;
 import org.camunda.bpm.engine.TaskService;
 import org.camunda.bpm.engine.task.Task;
+import org.camunda.bpm.engine.test.util.ClockTestUtil;
 import org.camunda.bpm.engine.test.util.EntityRemoveRule;
 import org.camunda.bpm.engine.test.util.ObjectProperty;
 import org.camunda.bpm.engine.test.util.RemoveAfter;
 import org.camunda.bpm.engine.test.util.TriConsumer;
-import org.joda.time.DateTime;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -79,8 +79,8 @@ public static List<Object[]> data() {
         { "setPriority", setPriority, "taskId", 80 },
         { "setName", setName, "taskId", "name" },
         { "setDescription", setDescription, "taskId", "description" },
-        { "setDueDate", setDueDate, "taskId",  DateTime.now().toDate()},
-        { "setFollowUpDate", setFollowUpDate, "taskId", DateTime.now().toDate() }
+        { "setDueDate", setDueDate, "taskId",  ClockTestUtil.setClockToDateWithoutMilliseconds() },
+        { "setFollowUpDate", setFollowUpDate, "taskId", ClockTestUtil.setClockToDateWithoutMilliseconds() }
     });
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/ProcessEngineConfiguration.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.Collections;
 import java.util.List;
 import javax.sql.DataSource;
-
 import org.camunda.bpm.engine.authorization.Authorization;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 import org.camunda.bpm.engine.identity.PasswordPolicy;
@@ -259,6 +258,7 @@ public abstract class ProcessEngineConfiguration {
   protected Object jpaEntityManagerFactory;
   protected boolean jpaHandleTransaction;
   protected boolean jpaCloseEntityManager;
+
   protected int defaultNumberOfRetries = JobEntity.DEFAULT_RETRIES;
 
   protected ClassLoader classLoader;

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/EverLivingJobEntity.java
Patch:
@@ -20,6 +20,7 @@
 import org.camunda.bpm.engine.impl.db.EnginePersistenceLogger;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.jobexecutor.JobHandler;
+import org.camunda.bpm.engine.impl.jobexecutor.historycleanup.HistoryCleanupHelper;
 
 /**
  * JobEntity for ever living job, which can be rescheduled and executed again.
@@ -58,7 +59,8 @@ public void init(CommandContext commandContext, boolean shouldResetLock) {
     }
 
     //cancel the retries -> will resolve job incident if present
-    setRetries(commandContext.getProcessEngineConfiguration().getDefaultNumberOfRetries());
+    int retries = HistoryCleanupHelper.getMaxRetries();
+    setRetries(retries);
 
     //delete the job's exception byte array and exception message
     if (exceptionByteArrayId != null) {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/SetTaskPropertyAuthorizationTest.java
Patch:
@@ -50,7 +50,7 @@ public class SetTaskPropertyAuthorizationTest extends AuthorizationTest {
   protected static final String PROCESS_KEY = "oneTaskProcess";
 
   @Rule
-  public EntityRemoveRule entityRemoveRule = new EntityRemoveRule(testRule);
+  public EntityRemoveRule entityRemoveRule = EntityRemoveRule.of(testRule);
 
   protected final String operationName;
   protected final TriConsumer<TaskService, String, Object> operation;

File: spring-boot-starter/starter-webapp-core/src/main/java/org/camunda/bpm/spring/boot/starter/webapp/CamundaBpmWebappInitializer.java
Patch:
@@ -123,7 +123,7 @@ public void onStartup(ServletContext servletContext) {
         applicationPath + "/api/*", applicationPath + "/app/*");
 
     registerFilter("CacheControlFilter", CacheControlFilter.class,
-        applicationPath + "/api/*", applicationPath + "/app/*");
+        applicationPath + "/api/*", applicationPath + "/app/*", applicationPath + "/assets/*");
 
     registerServlet("Cockpit Api", CockpitApplication.class,
         applicationPath + "/api/cockpit/*");

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/deployment/processor/ModuleDependencyProcessor.java
Patch:
@@ -57,6 +57,7 @@ public class ModuleDependencyProcessor implements DeploymentUnitProcessor {
   public static ModuleIdentifier MODULE_IDENTIFYER_CONNECT = ModuleIdentifier.create("org.camunda.connect.camunda-connect-core");
   public static ModuleIdentifier MODULE_IDENTIFYER_ENGINE_DMN = ModuleIdentifier.create("org.camunda.bpm.dmn.camunda-engine-dmn");
   public static ModuleIdentifier MODULE_IDENTIFYER_GRAAL_JS = ModuleIdentifier.create("org.graalvm.js.js-scriptengine");
+  public static ModuleIdentifier MODULE_IDENTIFYER_JUEL = ModuleIdentifier.create("org.camunda.bpm.juel.camunda-juel");
 
   public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
 
@@ -124,6 +125,7 @@ private void addSystemDependencies(ModuleLoader moduleLoader, final ModuleSpecif
     addSystemDependency(moduleLoader, moduleSpecification, MODULE_IDENTIFYER_CONNECT);
     addSystemDependency(moduleLoader, moduleSpecification, MODULE_IDENTIFYER_ENGINE_DMN);
     addSystemDependency(moduleLoader, moduleSpecification, MODULE_IDENTIFYER_GRAAL_JS, true);
+    addSystemDependency(moduleLoader, moduleSpecification, MODULE_IDENTIFYER_JUEL, true);
   }
 
   private void addSystemDependency(ModuleLoader moduleLoader, final ModuleSpecification moduleSpecification, ModuleIdentifier dependency) {

File: distro/wildfly26/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/deployment/processor/ModuleDependencyProcessor.java
Patch:
@@ -57,6 +57,7 @@ public class ModuleDependencyProcessor implements DeploymentUnitProcessor {
   public static ModuleIdentifier MODULE_IDENTIFYER_CONNECT = ModuleIdentifier.create("org.camunda.connect.camunda-connect-core");
   public static ModuleIdentifier MODULE_IDENTIFYER_ENGINE_DMN = ModuleIdentifier.create("org.camunda.bpm.dmn.camunda-engine-dmn");
   public static ModuleIdentifier MODULE_IDENTIFYER_GRAAL_JS = ModuleIdentifier.create("org.graalvm.js.js-scriptengine");
+  public static ModuleIdentifier MODULE_IDENTIFYER_JUEL = ModuleIdentifier.create("org.camunda.bpm.juel.camunda-juel");
 
   public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
 
@@ -124,6 +125,7 @@ private void addSystemDependencies(ModuleLoader moduleLoader, final ModuleSpecif
     addSystemDependency(moduleLoader, moduleSpecification, MODULE_IDENTIFYER_CONNECT);
     addSystemDependency(moduleLoader, moduleSpecification, MODULE_IDENTIFYER_ENGINE_DMN);
     addSystemDependency(moduleLoader, moduleSpecification, MODULE_IDENTIFYER_GRAAL_JS, true);
+    addSystemDependency(moduleLoader, moduleSpecification, MODULE_IDENTIFYER_JUEL, true);
   }
 
   private void addSystemDependency(ModuleLoader moduleLoader, final ModuleSpecification moduleSpecification, ModuleIdentifier dependency) {

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/el/JuelElContextFactory.java
Patch:
@@ -16,12 +16,12 @@
  */
 package org.camunda.bpm.dmn.engine.impl.el;
 
-import javax.el.ELContext;
-import javax.el.ELResolver;
+import org.camunda.bpm.impl.juel.jakarta.el.ELContext;
+import org.camunda.bpm.impl.juel.jakarta.el.ELResolver;
 
 import org.camunda.bpm.engine.variable.context.VariableContext;
 
-import de.odysseus.el.util.SimpleContext;
+import org.camunda.bpm.impl.juel.SimpleContext;
 
 /**
  * @author Daniel Meyer

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/el/JuelExpression.java
Patch:
@@ -16,8 +16,8 @@
  */
 package org.camunda.bpm.dmn.engine.impl.el;
 
-import javax.el.ELContext;
-import javax.el.ValueExpression;
+import org.camunda.bpm.impl.juel.jakarta.el.ELContext;
+import org.camunda.bpm.impl.juel.jakarta.el.ValueExpression;
 
 import org.camunda.bpm.dmn.engine.impl.spi.el.ElExpression;
 import org.camunda.bpm.engine.variable.context.VariableContext;

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/el/VariableContextElResolver.java
Patch:
@@ -18,8 +18,8 @@
 
 import java.beans.FeatureDescriptor;
 import java.util.Iterator;
-import javax.el.ELContext;
-import javax.el.ELResolver;
+import org.camunda.bpm.impl.juel.jakarta.el.ELContext;
+import org.camunda.bpm.impl.juel.jakarta.el.ELResolver;
 
 import org.camunda.bpm.engine.variable.context.VariableContext;
 import org.camunda.bpm.engine.variable.value.TypedValue;

File: engine-dmn/feel-juel/src/main/java/org/camunda/bpm/dmn/feel/impl/juel/FeelEngineFactoryImpl.java
Patch:
@@ -20,8 +20,8 @@
 import java.util.List;
 import java.util.Properties;
 
-import javax.el.ELException;
-import javax.el.ExpressionFactory;
+import org.camunda.bpm.impl.juel.jakarta.el.ELException;
+import org.camunda.bpm.impl.juel.jakarta.el.ExpressionFactory;
 
 import org.camunda.bpm.dmn.feel.impl.FeelEngine;
 import org.camunda.bpm.dmn.feel.impl.FeelEngineFactory;
@@ -34,7 +34,7 @@
 import org.camunda.commons.utils.cache.Cache;
 import org.camunda.commons.utils.cache.ConcurrentLruCache;
 
-import de.odysseus.el.ExpressionFactoryImpl;
+import org.camunda.bpm.impl.juel.ExpressionFactoryImpl;
 
 public class FeelEngineFactoryImpl implements FeelEngineFactory {
 

File: engine-dmn/feel-juel/src/main/java/org/camunda/bpm/dmn/feel/impl/juel/el/CompositeFunctionMapper.java
Patch:
@@ -19,7 +19,7 @@
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.List;
-import javax.el.FunctionMapper;
+import org.camunda.bpm.impl.juel.jakarta.el.FunctionMapper;
 
 import org.camunda.bpm.dmn.feel.impl.juel.FeelEngineLogger;
 import org.camunda.bpm.dmn.feel.impl.juel.FeelLogger;

File: engine-dmn/feel-juel/src/main/java/org/camunda/bpm/dmn/feel/impl/juel/el/CustomFunctionMapper.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import javax.el.FunctionMapper;
+import org.camunda.bpm.impl.juel.jakarta.el.FunctionMapper;
 
 import org.camunda.bpm.dmn.feel.impl.juel.FeelEngineLogger;
 import org.camunda.bpm.dmn.feel.impl.juel.FeelLogger;

File: engine-dmn/feel-juel/src/main/java/org/camunda/bpm/dmn/feel/impl/juel/el/ElContextFactory.java
Patch:
@@ -18,8 +18,8 @@
 
 import java.lang.reflect.Method;
 
-import javax.el.ELContext;
-import javax.el.ExpressionFactory;
+import org.camunda.bpm.impl.juel.jakarta.el.ELContext;
+import org.camunda.bpm.impl.juel.jakarta.el.ExpressionFactory;
 
 import org.camunda.bpm.engine.variable.context.VariableContext;
 

File: engine-dmn/feel-juel/src/main/java/org/camunda/bpm/dmn/feel/impl/juel/el/FeelFunctionMapper.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Date;
 import java.util.HashMap;
 import java.util.Map;
-import javax.el.FunctionMapper;
+import org.camunda.bpm.impl.juel.jakarta.el.FunctionMapper;
 
 import org.camunda.bpm.dmn.feel.impl.juel.FeelEngineLogger;
 import org.camunda.bpm.dmn.feel.impl.juel.FeelLogger;

File: engine-dmn/feel-juel/src/main/java/org/camunda/bpm/dmn/feel/impl/juel/el/FeelTypeConverter.java
Patch:
@@ -18,12 +18,12 @@
 
 import java.math.BigDecimal;
 import java.math.BigInteger;
-import javax.el.ELException;
+import org.camunda.bpm.impl.juel.jakarta.el.ELException;
 
 import org.camunda.bpm.dmn.feel.impl.juel.FeelEngineLogger;
 import org.camunda.bpm.dmn.feel.impl.juel.FeelLogger;
 
-import de.odysseus.el.misc.TypeConverterImpl;
+import org.camunda.bpm.impl.juel.TypeConverterImpl;
 
 public class FeelTypeConverter extends TypeConverterImpl {
 

File: engine-dmn/feel-juel/src/main/java/org/camunda/bpm/dmn/feel/impl/juel/el/FeelTypedVariableMapper.java
Patch:
@@ -16,9 +16,9 @@
  */
 package org.camunda.bpm.dmn.feel.impl.juel.el;
 
-import javax.el.ExpressionFactory;
-import javax.el.ValueExpression;
-import javax.el.VariableMapper;
+import org.camunda.bpm.impl.juel.jakarta.el.ExpressionFactory;
+import org.camunda.bpm.impl.juel.jakarta.el.ValueExpression;
+import org.camunda.bpm.impl.juel.jakarta.el.VariableMapper;
 
 import org.camunda.bpm.dmn.feel.impl.juel.FeelEngineLogger;
 import org.camunda.bpm.dmn.feel.impl.juel.FeelLogger;

File: engine/src/main/java/org/camunda/bpm/application/AbstractProcessApplication.java
Patch:
@@ -25,8 +25,8 @@
 import org.camunda.bpm.engine.delegate.TaskListener;
 import org.camunda.bpm.engine.impl.ProcessEngineLogger;
 import org.camunda.bpm.engine.impl.context.Context;
-import org.camunda.bpm.engine.impl.javax.el.BeanELResolver;
-import org.camunda.bpm.engine.impl.javax.el.ELResolver;
+import org.camunda.bpm.impl.juel.jakarta.el.BeanELResolver;
+import org.camunda.bpm.impl.juel.jakarta.el.ELResolver;
 import org.camunda.bpm.engine.impl.scripting.ExecutableScript;
 import org.camunda.bpm.engine.impl.util.ClassLoaderUtil;
 import org.camunda.bpm.engine.impl.variable.serializer.VariableSerializers;

File: engine/src/main/java/org/camunda/bpm/application/ProcessApplicationElResolver.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Comparator;
 import java.util.ServiceLoader;
 
-import org.camunda.bpm.engine.impl.javax.el.ELResolver;
+import org.camunda.bpm.impl.juel.jakarta.el.ELResolver;
 
 /**
  * <p>SPI interface that allows providing a custom ElResolver implementation.</p>

File: engine/src/main/java/org/camunda/bpm/application/ProcessApplicationInterface.java
Patch:
@@ -25,8 +25,8 @@
 import org.camunda.bpm.application.impl.ServletProcessApplication;
 import org.camunda.bpm.engine.delegate.ExecutionListener;
 import org.camunda.bpm.engine.delegate.TaskListener;
-import org.camunda.bpm.engine.impl.javax.el.BeanELResolver;
-import org.camunda.bpm.engine.impl.javax.el.ELResolver;
+import org.camunda.bpm.impl.juel.jakarta.el.BeanELResolver;
+import org.camunda.bpm.impl.juel.jakarta.el.ELResolver;
 import org.camunda.bpm.engine.repository.DeploymentBuilder;
 
 /**

File: engine/src/main/java/org/camunda/bpm/application/impl/DefaultElResolverLookup.java
Patch:
@@ -24,8 +24,8 @@
 import org.camunda.bpm.application.AbstractProcessApplication;
 import org.camunda.bpm.application.ProcessApplicationElResolver;
 import org.camunda.bpm.engine.impl.ProcessEngineLogger;
-import org.camunda.bpm.engine.impl.javax.el.CompositeELResolver;
-import org.camunda.bpm.engine.impl.javax.el.ELResolver;
+import org.camunda.bpm.impl.juel.jakarta.el.CompositeELResolver;
+import org.camunda.bpm.impl.juel.jakarta.el.ELResolver;
 
 /**
  * @author Daniel Meyer

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/variable/scope/AbstractVariableScope.java
Patch:
@@ -32,7 +32,7 @@
 import org.camunda.bpm.engine.impl.core.variable.event.VariableEvent;
 import org.camunda.bpm.engine.impl.core.variable.event.VariableEventDispatcher;
 import org.camunda.bpm.engine.impl.db.entitymanager.DbEntityManager;
-import org.camunda.bpm.engine.impl.javax.el.ELContext;
+import org.camunda.bpm.impl.juel.jakarta.el.ELContext;
 import org.camunda.bpm.engine.impl.persistence.entity.VariableInstanceEntity;
 import org.camunda.bpm.engine.variable.Variables;
 import org.camunda.bpm.engine.variable.impl.VariableMapImpl;

File: engine/src/main/java/org/camunda/bpm/engine/impl/delegate/ExpressionGetInvocation.java
Patch:
@@ -17,8 +17,8 @@
 package org.camunda.bpm.engine.impl.delegate;
 
 import org.camunda.bpm.engine.delegate.BaseDelegateExecution;
-import org.camunda.bpm.engine.impl.javax.el.ELContext;
-import org.camunda.bpm.engine.impl.javax.el.ValueExpression;
+import org.camunda.bpm.impl.juel.jakarta.el.ELContext;
+import org.camunda.bpm.impl.juel.jakarta.el.ValueExpression;
 
 /**
  * Class responsible for handling Expression.getValue invocations

File: engine/src/main/java/org/camunda/bpm/engine/impl/delegate/ExpressionSetInvocation.java
Patch:
@@ -17,8 +17,8 @@
 package org.camunda.bpm.engine.impl.delegate;
 
 import org.camunda.bpm.engine.delegate.BaseDelegateExecution;
-import org.camunda.bpm.engine.impl.javax.el.ELContext;
-import org.camunda.bpm.engine.impl.javax.el.ValueExpression;
+import org.camunda.bpm.impl.juel.jakarta.el.ELContext;
+import org.camunda.bpm.impl.juel.jakarta.el.ValueExpression;
 
 /**
  * Class responsible for handling Expression.setValue() invocations.

File: engine/src/main/java/org/camunda/bpm/engine/impl/dmn/el/ProcessEngineJuelElExpression.java
Patch:
@@ -20,8 +20,8 @@
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.el.JuelExpressionManager;
-import org.camunda.bpm.engine.impl.javax.el.ELContext;
-import org.camunda.bpm.engine.impl.javax.el.ValueExpression;
+import org.camunda.bpm.impl.juel.jakarta.el.ELContext;
+import org.camunda.bpm.impl.juel.jakarta.el.ValueExpression;
 import org.camunda.bpm.engine.variable.context.VariableContext;
 
 /**

File: engine/src/main/java/org/camunda/bpm/engine/impl/el/AbstractElResolverDelegate.java
Patch:
@@ -20,8 +20,8 @@
 import java.util.Collections;
 import java.util.Iterator;
 
-import org.camunda.bpm.engine.impl.javax.el.ELContext;
-import org.camunda.bpm.engine.impl.javax.el.ELResolver;
+import org.camunda.bpm.impl.juel.jakarta.el.ELContext;
+import org.camunda.bpm.impl.juel.jakarta.el.ELResolver;
 
 /**
  * @author Thorben Lindhauer

File: engine/src/main/java/org/camunda/bpm/engine/impl/el/ExpressionFactoryResolver.java
Patch:
@@ -16,8 +16,8 @@
  */
 package org.camunda.bpm.engine.impl.el;
 
-import org.camunda.bpm.engine.impl.javax.el.ExpressionFactory;
-import org.camunda.bpm.engine.impl.juel.ExpressionFactoryImpl;
+import org.camunda.bpm.impl.juel.jakarta.el.ExpressionFactory;
+import org.camunda.bpm.impl.juel.ExpressionFactoryImpl;
 
 
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/el/ProcessApplicationBeanElResolverDelegate.java
Patch:
@@ -21,8 +21,8 @@
 import org.camunda.bpm.application.ProcessApplicationUnavailableException;
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.impl.context.Context;
-import org.camunda.bpm.engine.impl.javax.el.BeanELResolver;
-import org.camunda.bpm.engine.impl.javax.el.ELResolver;
+import org.camunda.bpm.impl.juel.jakarta.el.BeanELResolver;
+import org.camunda.bpm.impl.juel.jakarta.el.ELResolver;
 
 /**
  * <p>Resolves a {@link BeanELResolver} from the current process application.

File: engine/src/main/java/org/camunda/bpm/engine/impl/el/ProcessApplicationElResolverDelegate.java
Patch:
@@ -21,8 +21,8 @@
 import org.camunda.bpm.application.ProcessApplicationUnavailableException;
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.impl.context.Context;
-import org.camunda.bpm.engine.impl.javax.el.CompositeELResolver;
-import org.camunda.bpm.engine.impl.javax.el.ELResolver;
+import org.camunda.bpm.impl.juel.jakarta.el.CompositeELResolver;
+import org.camunda.bpm.impl.juel.jakarta.el.ELResolver;
 
 /**
  * <p>This is an {@link ELResolver} implementation that delegates to a ProcessApplication-provided

File: engine/src/main/java/org/camunda/bpm/engine/impl/el/ReadOnlyMapELResolver.java
Patch:
@@ -21,8 +21,8 @@
 import java.util.Map;
 
 import org.camunda.bpm.engine.ProcessEngineException;
-import org.camunda.bpm.engine.impl.javax.el.ELContext;
-import org.camunda.bpm.engine.impl.javax.el.ELResolver;
+import org.camunda.bpm.impl.juel.jakarta.el.ELContext;
+import org.camunda.bpm.impl.juel.jakarta.el.ELResolver;
 
 /**
  * An {@link ELResolver} that exposed object values in the map, under the name of the entry's key.

File: engine/src/main/java/org/camunda/bpm/engine/impl/el/UelExpressionCondition.java
Patch:
@@ -23,7 +23,7 @@
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.VariableScope;
 import org.camunda.bpm.engine.impl.Condition;
-import org.camunda.bpm.engine.impl.javax.el.PropertyNotFoundException;
+import org.camunda.bpm.impl.juel.jakarta.el.PropertyNotFoundException;
 
 
 /**

File: engine/src/main/java/org/camunda/bpm/engine/impl/el/VariableContextElResolver.java
Patch:
@@ -19,8 +19,8 @@
 import java.beans.FeatureDescriptor;
 import java.util.Iterator;
 
-import org.camunda.bpm.engine.impl.javax.el.ELContext;
-import org.camunda.bpm.engine.impl.javax.el.ELResolver;
+import org.camunda.bpm.impl.juel.jakarta.el.ELContext;
+import org.camunda.bpm.impl.juel.jakarta.el.ELResolver;
 import org.camunda.bpm.engine.variable.context.VariableContext;
 import org.camunda.bpm.engine.variable.value.TypedValue;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/el/VariableScopeElResolver.java
Patch:
@@ -21,8 +21,8 @@
 import org.camunda.bpm.engine.impl.bpmn.behavior.ExternalTaskActivityBehavior;
 import org.camunda.bpm.engine.impl.cmmn.entity.runtime.CaseExecutionEntity;
 import org.camunda.bpm.engine.impl.context.Context;
-import org.camunda.bpm.engine.impl.javax.el.ELContext;
-import org.camunda.bpm.engine.impl.javax.el.ELResolver;
+import org.camunda.bpm.impl.juel.jakarta.el.ELContext;
+import org.camunda.bpm.impl.juel.jakarta.el.ELResolver;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.ExternalTaskEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.TaskEntity;

File: engine/src/main/java/org/camunda/bpm/engine/test/mock/MockElResolver.java
Patch:
@@ -19,8 +19,8 @@
 import java.beans.FeatureDescriptor;
 import java.util.Iterator;
 
-import org.camunda.bpm.engine.impl.javax.el.ELContext;
-import org.camunda.bpm.engine.impl.javax.el.ELResolver;
+import org.camunda.bpm.impl.juel.jakarta.el.ELContext;
+import org.camunda.bpm.impl.juel.jakarta.el.ELResolver;
 
 public class MockElResolver extends ELResolver {
 

File: engine/src/test/java/org/camunda/bpm/application/impl/el/CalledProcessApplication.java
Patch:
@@ -22,7 +22,7 @@
 import org.camunda.bpm.application.ProcessApplication;
 import org.camunda.bpm.application.impl.EmbeddedProcessApplication;
 import org.camunda.bpm.engine.impl.el.ReadOnlyMapELResolver;
-import org.camunda.bpm.engine.impl.javax.el.ELResolver;
+import org.camunda.bpm.impl.juel.jakarta.el.ELResolver;
 
 /**
  * @author Thorben Lindhauer

File: engine/src/test/java/org/camunda/bpm/application/impl/el/CallingProcessApplication.java
Patch:
@@ -22,7 +22,7 @@
 import org.camunda.bpm.application.ProcessApplication;
 import org.camunda.bpm.application.impl.EmbeddedProcessApplication;
 import org.camunda.bpm.engine.impl.el.ReadOnlyMapELResolver;
-import org.camunda.bpm.engine.impl.javax.el.ELResolver;
+import org.camunda.bpm.impl.juel.jakarta.el.ELResolver;
 
 /**
  * @author Thorben Lindhauer

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/el/ExpressionBeanAccessTest.java
Patch:
@@ -23,7 +23,7 @@
 
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.RuntimeService;
-import org.camunda.bpm.engine.impl.javax.el.PropertyNotFoundException;
+import org.camunda.bpm.impl.juel.jakarta.el.PropertyNotFoundException;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.test.Deployment;
 import org.camunda.bpm.engine.test.util.ProcessEngineBootstrapRule;

File: juel/src/main/java/org/camunda/bpm/impl/juel/AstBinary.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
-import org.camunda.bpm.engine.impl.javax.el.ELContext;
+import jakarta.el.ELContext;
 
 
 public class AstBinary extends AstRightValue {

File: juel/src/main/java/org/camunda/bpm/impl/juel/AstBoolean.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
-import org.camunda.bpm.engine.impl.javax.el.ELContext;
+import jakarta.el.ELContext;
 
 
 public final class AstBoolean extends AstLiteral {

File: juel/src/main/java/org/camunda/bpm/impl/juel/AstBracket.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
-import org.camunda.bpm.engine.impl.javax.el.ELContext;
-import org.camunda.bpm.engine.impl.javax.el.ELException;
+import jakarta.el.ELContext;
+import jakarta.el.ELException;
 
 
 public class AstBracket extends AstProperty {

File: juel/src/main/java/org/camunda/bpm/impl/juel/AstComposite.java
Patch:
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
 import java.util.List;
 
-import org.camunda.bpm.engine.impl.javax.el.ELContext;
+import jakarta.el.ELContext;
 
 
 public class AstComposite extends AstRightValue {

File: juel/src/main/java/org/camunda/bpm/impl/juel/AstDot.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
-import org.camunda.bpm.engine.impl.javax.el.ELContext;
-import org.camunda.bpm.engine.impl.javax.el.ELException;
+import jakarta.el.ELContext;
+import jakarta.el.ELException;
 
 
 public class AstDot extends AstProperty {

File: juel/src/main/java/org/camunda/bpm/impl/juel/AstFunction.java
Patch:
@@ -13,14 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
 import java.lang.reflect.Array;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
-import org.camunda.bpm.engine.impl.javax.el.ELContext;
-import org.camunda.bpm.engine.impl.javax.el.ELException;
+import jakarta.el.ELContext;
+import jakarta.el.ELException;
 
 
 public class AstFunction extends AstRightValue implements FunctionNode {

File: juel/src/main/java/org/camunda/bpm/impl/juel/AstLiteral.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */ 
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
 public abstract class AstLiteral extends AstRightValue {
 	public final int getCardinality() {

File: juel/src/main/java/org/camunda/bpm/impl/juel/AstNested.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
-import org.camunda.bpm.engine.impl.javax.el.ELContext;
+import jakarta.el.ELContext;
 
 
 public final class AstNested extends AstRightValue {

File: juel/src/main/java/org/camunda/bpm/impl/juel/AstNode.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
-import org.camunda.bpm.engine.impl.javax.el.ELContext;
+import jakarta.el.ELContext;
 
 
 public abstract class AstNode implements ExpressionNode {

File: juel/src/main/java/org/camunda/bpm/impl/juel/AstNull.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
-import org.camunda.bpm.engine.impl.javax.el.ELContext;
+import jakarta.el.ELContext;
 
 
 public final class AstNull extends AstLiteral {

File: juel/src/main/java/org/camunda/bpm/impl/juel/AstNumber.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
-import org.camunda.bpm.engine.impl.javax.el.ELContext;
+import jakarta.el.ELContext;
 
 
 public final class AstNumber extends AstLiteral {

File: juel/src/main/java/org/camunda/bpm/impl/juel/AstParameters.java
Patch:
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
 import java.util.List;
 
-import org.camunda.bpm.engine.impl.javax.el.ELContext;
+import jakarta.el.ELContext;
 
 
 public class AstParameters extends AstRightValue {

File: juel/src/main/java/org/camunda/bpm/impl/juel/AstString.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
-import org.camunda.bpm.engine.impl.javax.el.ELContext;
+import jakarta.el.ELContext;
 
 
 public final class AstString extends AstLiteral {

File: juel/src/main/java/org/camunda/bpm/impl/juel/AstUnary.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
-import org.camunda.bpm.engine.impl.javax.el.ELContext;
-import org.camunda.bpm.engine.impl.javax.el.ELException;
+import jakarta.el.ELContext;
+import jakarta.el.ELException;
 
 
 public class AstUnary extends AstRightValue {

File: juel/src/main/java/org/camunda/bpm/impl/juel/BooleanOperations.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
 import java.math.BigDecimal;
 import java.math.BigInteger;
@@ -22,7 +22,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import org.camunda.bpm.engine.impl.javax.el.ELException;
+import jakarta.el.ELException;
 
 public class BooleanOperations {
 	private final static Set<Class<? extends Number>> SIMPLE_INTEGER_TYPES = new HashSet<Class<? extends Number>>();

File: juel/src/main/java/org/camunda/bpm/impl/juel/Cache.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */ 
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
 import java.util.Collections;
 import java.util.LinkedHashMap;

File: juel/src/main/java/org/camunda/bpm/impl/juel/FunctionNode.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */ 
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
 /**
  * Function node interface.

File: juel/src/main/java/org/camunda/bpm/impl/juel/IdentifierNode.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */ 
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
 /**
  * Identifier node interface.

File: juel/src/main/java/org/camunda/bpm/impl/juel/LocalMessages.java
Patch:
@@ -13,14 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
 import java.text.MessageFormat;
 import java.util.MissingResourceException;
 import java.util.ResourceBundle;
 
 public final class LocalMessages {
-	private static final String BUNDLE_NAME = "org.camunda.bpm.engine.impl.juel.misc.LocalStrings";
+	private static final String BUNDLE_NAME = "org.camunda.bpm.impl.juel.misc.LocalStrings";
 	private static final ResourceBundle RESOURCE_BUNDLE = ResourceBundle.getBundle(BUNDLE_NAME);
 
 	public static String get(String key, Object... args) {

File: juel/src/main/java/org/camunda/bpm/impl/juel/Node.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */ 
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
 /**
  * Basic node interface.

File: juel/src/main/java/org/camunda/bpm/impl/juel/NodePrinter.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
 import java.io.PrintWriter;
 import java.util.Stack;

File: juel/src/main/java/org/camunda/bpm/impl/juel/Scanner.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */ 
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
 import java.util.HashMap;
 

File: juel/src/main/java/org/camunda/bpm/impl/juel/TreeBuilder.java
Patch:
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */ 
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
 import java.io.Serializable;
 
-import org.camunda.bpm.engine.impl.javax.el.ELException;
+import jakarta.el.ELException;
 
 /**
  * Tree builder interface.

File: juel/src/main/java/org/camunda/bpm/impl/juel/TreeBuilderException.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */ 
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
-import org.camunda.bpm.engine.impl.javax.el.ELException;
+import jakarta.el.ELException;
 
 
 /**

File: juel/src/main/java/org/camunda/bpm/impl/juel/TreeCache.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */ 
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
 /**
  * Tree cache interface.

File: juel/src/main/java/org/camunda/bpm/impl/juel/TreeStore.java
Patch:
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */ 
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
 
 /**
  * Tree store class.
- * A tree store holds a {@link org.camunda.bpm.engine.impl.juel.TreeBuilder} and a
- * {@link org.camunda.bpm.engine.impl.juel.TreeCache}, provided at construction time.
+ * A tree store holds a {@link TreeBuilder} and a
+ * {@link TreeCache}, provided at construction time.
  * The <code>get(String)</code> method is then used to serve expression trees.
  *
  * @author Christoph Beck

File: juel/src/main/java/org/camunda/bpm/impl/juel/TypeConverter.java
Patch:
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */ 
-package org.camunda.bpm.engine.impl.juel;
+package org.camunda.bpm.impl.juel;
 
 import java.io.Serializable;
 
-import org.camunda.bpm.engine.impl.javax.el.ELException;
+import jakarta.el.ELException;
 
 public interface TypeConverter extends Serializable {
 	/**

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/el/NullELResolver.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.camunda.bpm.application.AbstractProcessApplication;
 import org.camunda.bpm.application.ProcessApplicationElResolver;
-import org.camunda.bpm.engine.impl.javax.el.ELResolver;
+import org.camunda.bpm.impl.juel.jakarta.el.ELResolver;
 
 /**
  * @author Thorben Lindhauer

File: qa/integration-tests-webapps/integration-tests/src/main/java/org/camunda/bpm/rest/EmbeddedEngineRest_WILDFLY.java
Patch:
@@ -48,7 +48,7 @@ public static WebArchive createDeployment() {
     WebArchive archive = ShrinkWrap.create(WebArchive.class, "embedded-engine-rest.war")
         .addAsWebInfResource(EmptyAsset.INSTANCE, "beans.xml")
         .addAsWebInfResource("jboss-deployment-structure.xml")
-        .addAsManifestResource("org.camunda.bpm.engine.rest.spi.ProcessEngineProvider", "services/org.camunda.bpm.engine.rest.spi.ProcessEngineProvider")
+        .addAsManifestResource("org.camunda.bpm.engine.rest.spi.ProcessEngineProvider", "META-INF/services/org.camunda.bpm.engine.rest.spi.ProcessEngineProvider")
         .addAsLibraries(engineRestClasses)
         .addClasses(CustomRestApplication.class, CustomProcessEngineProvider.class);
 

File: distro/run/qa/integration-tests/src/test/java/org/camunda/bpm/run/qa/webapps/AbstractWebappUiIT.java
Patch:
@@ -65,7 +65,8 @@ public static void createDriver() {
 
     ChromeOptions chromeOptions = new ChromeOptions()
         .setHeadless(true)
-        .addArguments("--window-size=1920,1200");
+        .addArguments("--window-size=1920,1200")
+        .addArguments("--remote-allow-origins=*");
 
     driver = new ChromeDriver(chromeDriverService, chromeOptions);
   }

File: qa/integration-tests-webapps/integration-tests/src/main/java/org/camunda/bpm/AbstractWebappUiIntegrationTest.java
Patch:
@@ -63,7 +63,8 @@ public static void createDriver() {
         .addArguments("--window-size=1920,1200")
         .addArguments("--disable-gpu")
         .addArguments("--no-sandbox")
-        .addArguments("--disable-dev-shm-usage");
+        .addArguments("--disable-dev-shm-usage")
+        .addArguments("--remote-allow-origins=*");
 
     driver = new ChromeDriver(chromeDriverService, chromeOptions);
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/partitioning/SkipHistoryOptimisticLockingExceptionsDisabledTest.java
Patch:
@@ -75,6 +75,7 @@ public class AsyncThread extends ControllableCommand<Void> {
       this.processInstanceId = processInstanceId;
     }
 
+    @Override
     public Void execute(CommandContext commandContext) {
       historyService.createHistoricVariableInstanceQuery()
         .singleResult()

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -231,7 +231,7 @@ protected void adjustStartEventSubscriptions(ProcessDefinitionEntity newLatestPr
   }
 
   @SuppressWarnings("unchecked")
-  protected void addTimerDeclarations(ProcessDefinitionEntity processDefinition) {
+  public void addTimerDeclarations(ProcessDefinitionEntity processDefinition) {
     List<TimerDeclarationImpl> timerDeclarations = (List<TimerDeclarationImpl>) processDefinition.getProperty(BpmnParse.PROPERTYNAME_START_TIMER);
     if (timerDeclarations!=null) {
       for (TimerDeclarationImpl timerDeclaration : timerDeclarations) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeleteProcessDefinitionsByIdsCmd.java
Patch:
@@ -206,6 +206,7 @@ protected void deleteProcessDefinitions(ProcessDefinitionGroup group) {
       for (Deployer deployer : deployers) {
         if (deployer instanceof BpmnDeployer) {
           ((BpmnDeployer) deployer).addEventSubscriptions(newLatestProcessDefinition);
+          ((BpmnDeployer) deployer).addTimerDeclarations(newLatestProcessDefinition);
         }
       }
     }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/JobRestServiceImpl.java
Patch:
@@ -106,7 +106,9 @@ public BatchDto setRetries(SetJobRetriesDto setJobRetriesDto) {
     }
     JobQuery jobQuery = null;
     if (setJobRetriesDto.getJobQuery() != null) {
-      jobQuery = setJobRetriesDto.getJobQuery().toQuery(getProcessEngine());
+      JobQueryDto jobQueryDto = setJobRetriesDto.getJobQuery();
+      jobQueryDto.setObjectMapper(getObjectMapper());
+      jobQuery = jobQueryDto.toQuery(getProcessEngine());
     }
 
     try {

File: distro/run/modules/example/src/main/java/org/camunda/bpm/run/example/invoice/Application.java
Patch:
@@ -17,8 +17,8 @@
 package org.camunda.bpm.run.example.invoice;
 
 import javax.annotation.PostConstruct;
-
 import org.camunda.bpm.engine.ProcessEngine;
+import org.camunda.bpm.example.invoice.InvoiceApplicationHelper;
 import org.camunda.bpm.example.invoice.InvoiceProcessApplication;
 import org.camunda.bpm.spring.boot.starter.annotation.EnableProcessApplication;
 import org.camunda.bpm.spring.boot.starter.event.PostDeployEvent;
@@ -47,7 +47,7 @@ public class Application implements WebMvcConfigurer {
   @PostConstruct
   public void deployInvoice() {
     LOG.info("Invoice example started, creating deployment");
-    invoicePa.createDeployment("invoiceProcessApplicationSpringBoot", processEngine, invoicePa.getClass().getClassLoader());
+    InvoiceApplicationHelper.createDeployment("invoiceProcessApplicationSpringBoot", processEngine, invoicePa.getClass().getClassLoader(), invoicePa.getReference());
   }
 
   @EventListener

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/config/ManagedJtaProcessEngineConfiguration.java
Patch:
@@ -17,8 +17,7 @@
 package org.camunda.bpm.container.impl.jboss.config;
 
 import java.util.Set;
-
-import org.camunda.bpm.engine.impl.cfg.JtaProcessEngineConfiguration;
+import org.camunda.bpm.engine.impl.cfg.JakartaTransactionProcessEngineConfiguration;
 import org.camunda.bpm.engine.impl.persistence.StrongUuidGenerator;
 import org.camunda.bpm.engine.impl.telemetry.CamundaIntegration;
 
@@ -27,7 +26,7 @@
  * @author Daniel Meyer
  *
  */
-public class ManagedJtaProcessEngineConfiguration extends JtaProcessEngineConfiguration {
+public class ManagedJtaProcessEngineConfiguration extends JakartaTransactionProcessEngineConfiguration {
 
   public ManagedJtaProcessEngineConfiguration() {
     // override job executor auto activate: set to true in shared engine scenario

File: distro/wildfly/subsystem/src/test/java/org/camunda/bpm/container/impl/jboss/test/BpmPlatformSubsystemTest.java
Patch:
@@ -16,12 +16,11 @@
  */
 package org.camunda.bpm.container.impl.jboss.test;
 
+import java.io.IOException;
 import org.camunda.bpm.container.impl.jboss.extension.BpmPlatformExtension;
 import org.camunda.bpm.container.impl.jboss.extension.ModelConstants;
 import org.jboss.as.subsystem.test.AbstractSubsystemBaseTest;
 
-import java.io.IOException;
-
 
 /**
  * @author Christian Lipphardt
@@ -46,7 +45,8 @@ protected String getSubsystemXml() throws IOException {
   /**
    * Method is only used by WF-10 to validate the subsystem schema. Isn't executed when running WF8.
    */
+  @Override
   protected String getSubsystemXsdPath() throws Exception {
-    return "schema/foxEngineSubsystem_1_1.xsd";
+    return "schema/camundaPlatformSubsystem.xsd";
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -142,10 +142,10 @@ protected void definitionAddedToDeploymentCache(DeploymentEntity deployment, Pro
 
     if (deployment.isNew()) {
       adjustStartEventSubscriptions(definition, latestDefinition);
-    }
 
-    // add "authorizations"
-    addAuthorizations(definition);
+      // add "authorizations"
+      addAuthorizations(definition);
+    }
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeleteTaskAttachmentCmd.java
Patch:
@@ -68,6 +68,8 @@ public Object execute(CommandContext commandContext) {
 
       commandContext.getOperationLogManager()
         .logAttachmentOperation(UserOperationLogEntry.OPERATION_TYPE_DELETE_ATTACHMENT, task, propertyChange);
+
+      task.triggerUpdateEvent();
     }
 
     return null;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/redirect/ResourceLoadingProcessEnginesAppPathCamundaIndexRedirectTest.java
Patch:
@@ -19,7 +19,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 import java.net.HttpURLConnection;
-import org.camunda.bpm.spring.boot.starter.webapp.filter.util.HeaderRule;
+import org.camunda.bpm.spring.boot.starter.webapp.filter.util.HttpClientRule;
 import org.camunda.bpm.spring.boot.starter.webapp.filter.util.TestApplication;
 import org.junit.Rule;
 import org.junit.Test;
@@ -40,7 +40,7 @@
 public class ResourceLoadingProcessEnginesAppPathCamundaIndexRedirectTest {
 
   @Rule
-  public HeaderRule rule = new HeaderRule().followRedirects(true);
+  public HttpClientRule rule = new HttpClientRule().followRedirects(true);
 
   @LocalServerPort
   public int port;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/redirect/ResourceLoadingProcessEnginesAppPathCamundaTest.java
Patch:
@@ -19,7 +19,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 import java.net.HttpURLConnection;
-import org.camunda.bpm.spring.boot.starter.webapp.filter.util.HeaderRule;
+import org.camunda.bpm.spring.boot.starter.webapp.filter.util.HttpClientRule;
 import org.camunda.bpm.spring.boot.starter.webapp.filter.util.TestApplication;
 import org.junit.Rule;
 import org.junit.Test;
@@ -40,7 +40,7 @@
 public class ResourceLoadingProcessEnginesAppPathCamundaTest {
 
   @Rule
-  public HeaderRule rule = new HeaderRule().followRedirects(true);
+  public HttpClientRule rule = new HttpClientRule().followRedirects(true);
 
   @LocalServerPort
   public int port;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/redirect/ResourceLoadingProcessEnginesAppPathRootIndexRedirectTest.java
Patch:
@@ -21,7 +21,7 @@
 import java.io.IOException;
 import java.net.HttpURLConnection;
 
-import org.camunda.bpm.spring.boot.starter.webapp.filter.util.HeaderRule;
+import org.camunda.bpm.spring.boot.starter.webapp.filter.util.HttpClientRule;
 import org.camunda.bpm.spring.boot.starter.webapp.filter.util.TestApplication;
 import org.junit.Rule;
 import org.junit.Test;
@@ -42,7 +42,7 @@
 public class ResourceLoadingProcessEnginesAppPathRootIndexRedirectTest {
 
   @Rule
-  public HeaderRule rule = new HeaderRule().followRedirects(true);
+  public HttpClientRule rule = new HttpClientRule().followRedirects(true);
 
   @LocalServerPort
   public int port;

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/redirect/ResourceLoadingProcessEnginesAppPathRootTest.java
Patch:
@@ -22,7 +22,7 @@
 import java.net.HttpURLConnection;
 
 import org.apache.commons.io.IOUtils;
-import org.camunda.bpm.spring.boot.starter.webapp.filter.util.HeaderRule;
+import org.camunda.bpm.spring.boot.starter.webapp.filter.util.HttpClientRule;
 import org.camunda.bpm.spring.boot.starter.webapp.filter.util.TestApplication;
 import org.junit.Rule;
 import org.junit.Test;
@@ -42,7 +42,7 @@
 public class ResourceLoadingProcessEnginesAppPathRootTest {
 
   @Rule
-  public HeaderRule rule = new HeaderRule().followRedirects(true);
+  public HttpClientRule rule = new HttpClientRule().followRedirects(true);
 
   @LocalServerPort
   public int port;

File: webapps/src/main/java/org/camunda/bpm/webapp/impl/security/SecurityActions.java
Patch:
@@ -35,7 +35,7 @@ public class SecurityActions {
 
   public static <T> T runWithAuthentications(SecurityAction<T> action, Authentications authentications) throws IOException, ServletException {
 
-    List<Authentication> currentAuthentications = authentications.getAuthentications();
+    List<UserAuthentication> currentAuthentications = authentications.getAuthentications();
     try {
       for (Authentication authentication : currentAuthentications) {
         authenticateProcessEngine(authentication);

File: webapps/src/main/java/org/camunda/bpm/webapp/impl/security/filter/headersec/provider/impl/ContentSecurityPolicyProvider.java
Patch:
@@ -17,6 +17,7 @@
 package org.camunda.bpm.webapp.impl.security.filter.headersec.provider.impl;
 
 import org.camunda.bpm.webapp.impl.security.filter.headersec.provider.HeaderSecurityProvider;
+import org.camunda.bpm.webapp.impl.util.ServletFilterUtil;
 
 import javax.servlet.ServletContext;
 import java.util.Base64;
@@ -56,7 +57,7 @@ public Map<String, String> initParams() {
   public void parseParams() {
     String disabled = initParams.get(DISABLED_PARAM);
 
-    if (isEmpty(disabled)) {
+    if (ServletFilterUtil.isEmpty(disabled)) {
       setDisabled(false);
 
     } else {
@@ -65,7 +66,7 @@ public void parseParams() {
     }
 
     String value = initParams.get(VALUE_PARAM);
-    if (!isEmpty(value)) {
+    if (!ServletFilterUtil.isEmpty(value)) {
       value = normalizeString(value);
       setValue(value);
 

File: webapps/src/main/java/org/camunda/bpm/webapp/impl/security/filter/headersec/provider/impl/ContentTypeOptionsProvider.java
Patch:
@@ -17,6 +17,7 @@
 package org.camunda.bpm.webapp.impl.security.filter.headersec.provider.impl;
 
 import org.camunda.bpm.webapp.impl.security.filter.headersec.provider.HeaderSecurityProvider;
+import org.camunda.bpm.webapp.impl.util.ServletFilterUtil;
 
 import java.util.Map;
 
@@ -41,7 +42,7 @@ public void parseParams() {
 
     String disabled = initParams.get(DISABLED_PARAM);
 
-    if (isEmpty(disabled)) {
+    if (ServletFilterUtil.isEmpty(disabled)) {
       setDisabled(false);
 
     } else {
@@ -52,7 +53,7 @@ public void parseParams() {
     String value = initParams.get(VALUE_PARAM);
 
     if (!isDisabled()) {
-      if (!isEmpty(value)) {
+      if (!ServletFilterUtil.isEmpty(value)) {
         setValue(value);
 
       } else {

File: webapps/src/main/java/org/camunda/bpm/webapp/impl/security/filter/util/CsrfConstants.java
Patch:
@@ -23,7 +23,7 @@
  */
 public final class CsrfConstants {
 
-  public static final String CSRF_SESSION_MUTEX = "CAMUNDA_SESSION_MUTEX";
+  public static final String CSRF_SESSION_MUTEX = "CAMUNDA_CSRF_SESSION_MUTEX";
 
   public static final String CSRF_TOKEN_SESSION_ATTR_NAME = "CAMUNDA_CSRF_TOKEN";
 

File: webapps/src/test/java/org/camunda/bpm/webapp/impl/security/filter/SecurityFilterRulesTest.java
Patch:
@@ -500,10 +500,10 @@ private static List<SecurityFilterRule> loadFilterRules(String appPath) throws I
   }
 
   private void authenticatedForEngine(String engineName, Runnable codeBlock) {
-    Authentication engineAuth = new Authentication(LOGGED_IN_USER.getIdentityId(), engineName);
+    UserAuthentication engineAuth = new UserAuthentication(LOGGED_IN_USER.getIdentityId(), engineName);
 
     Authentications authentications = new Authentications();
-    authentications.addAuthentication(engineAuth);
+    authentications.addOrReplace(engineAuth);
 
     Authentications.setCurrent(authentications);
 
@@ -523,7 +523,7 @@ private void authenticatedForApp(String engineName, String appName, Runnable cod
     engineAuth.setAuthorizedApps(authorizedApps);
 
     Authentications authentications = new Authentications();
-    authentications.addAuthentication(engineAuth);
+    authentications.addOrReplace(engineAuth);
 
     Authentications.setCurrent(authentications);
 

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/impl/ProcessDefinitionResourceImpl.java
Patch:
@@ -263,8 +263,8 @@ public ProcessDefinitionDiagramDto getProcessDefinitionBpmn20Xml() {
       return ProcessDefinitionDiagramDto.create(processDefinitionId, new String(processModel, "UTF-8"));
     } catch (AuthorizationException e) {
       throw e;
-    } catch (ProcessEngineException e) {
-      throw new InvalidRequestException(Status.BAD_REQUEST, e, "No matching definition with id " + processDefinitionId);
+    } catch (NotFoundException e) {
+      throw new InvalidRequestException(Status.NOT_FOUND, e, "No matching definition with id " + processDefinitionId);
     } catch (UnsupportedEncodingException e) {
       throw new RestException(Status.INTERNAL_SERVER_ERROR, e);
     } finally {
@@ -388,7 +388,7 @@ public List<CalledProcessDefinitionDto> getStaticCalledProcessDefinitions() {
       return engine.getRepositoryService().getStaticCalledProcessDefinitions(processDefinitionId).stream()
         .map(CalledProcessDefinitionDto::from)
         .collect(Collectors.toList());
-    } catch (NullValueException e) {
+    } catch (NotFoundException e) {
       throw new InvalidRequestException(Status.NOT_FOUND, e.getMessage());
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/RepositoryService.java
Patch:
@@ -523,7 +523,7 @@ public interface RepositoryService {
    * @param processDefinitionId
    *          id of a {@link ProcessDefinition}, cannot be null.
    *
-   * @throws ProcessEngineException
+   * @throws NotFoundException
    *           when the process model doesn't exist.
    * @throws AuthorizationException
    *          If the user has no {@link Permissions#READ} permission on {@link Resources#PROCESS_DEFINITION}.
@@ -809,7 +809,7 @@ public interface RepositoryService {
    * @param processDefinitionId id of a {@link ProcessDefinition}
    * @return a list of {@link CalledProcessDefinition}.
    *
-   * @throws ProcessEngineException
+   * @throws NotFoundException
    *          When the process definition doesn't exist.
    * @throws AuthorizationException
    *          If the user has no {@link Permissions#READ} permission on {@link Resources#PROCESS_DEFINITION}.

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/CreateMigrationPlanCmd.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.List;
 
 import org.camunda.bpm.engine.BadUserRequestException;
+import org.camunda.bpm.engine.exception.NotFoundException;
 import org.camunda.bpm.engine.exception.NullValueException;
 import org.camunda.bpm.engine.impl.cfg.CommandChecker;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
@@ -136,7 +137,7 @@ protected ProcessDefinitionEntity getProcessDefinition(CommandContext commandCon
       return commandContext.getProcessEngineConfiguration()
         .getDeploymentCache().findDeployedProcessDefinitionById(id);
     }
-    catch (NullValueException e) {
+    catch (NotFoundException e) {
       throw LOG.processDefinitionDoesNotExist(id, type);
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/deploy/cache/ProcessDefinitionCache.java
Patch:
@@ -22,6 +22,8 @@
 
 import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
 
+import org.camunda.bpm.engine.exception.NotFoundException;
+
 /**
  * @author: Johannes Heinemann
  */
@@ -44,7 +46,7 @@ protected void checkInvalidDefinitionId(String definitionId) {
 
   @Override
   protected void checkDefinitionFound(String definitionId, ProcessDefinitionEntity definition) {
-    ensureNotNull("no deployed process definition found with id '" + definitionId + "'", "processDefinition", definition);
+    ensureNotNull(NotFoundException.class, "no deployed process definition found with id '" + definitionId + "'", "processDefinition", definition);
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -3592,7 +3592,6 @@ protected TimerDeclarationImpl parseTimer(Element timerEventDefinition, Activity
     }
 
     // Parse the timer declaration
-    // TODO move the timer declaration into the bpmn activity or next to the TimerSession
     TimerDeclarationImpl timerDeclaration = new TimerDeclarationImpl(expression, type, jobHandlerType);
     timerDeclaration.setRawJobHandlerConfiguration(timerActivity.getId());
     timerDeclaration.setExclusive(TRUE.equals(timerEventDefinition.attributeNS(CAMUNDA_BPMN_EXTENSIONS_NS, "exclusive", String.valueOf(JobEntity.DEFAULT_EXCLUSIVE))));

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/JobDeclaration.java
Patch:
@@ -86,7 +86,9 @@ public T createJobInstance(S context) {
       if(jobDefinition != null) {
         // if job definition is suspended while creating a job instance,
         // suspend the job instance right away:
-        job.setSuspensionState(jobDefinition.getSuspensionState());
+        if(jobDefinition.isSuspended()) {
+          job.setSuspensionState(jobDefinition.getSuspensionState());
+        }
         job.setProcessDefinitionKey(jobDefinition.getProcessDefinitionKey());
         job.setProcessDefinitionId(jobDefinition.getProcessDefinitionId());
         job.setTenantId(jobDefinition.getTenantId());

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -1871,7 +1871,7 @@ public ScopeImpl parseMultiInstanceLoopCharacteristics(Element activityElement,
 
       // Validation
       if (behavior.getLoopCardinalityExpression() == null && behavior.getCollectionExpression() == null && behavior.getCollectionVariable() == null) {
-        addError("Either loopCardinality or loopDataInputRef/activiti:collection must been set", miLoopCharacteristics, id);
+        addError("Either loopCardinality or loopDataInputRef/activiti:collection must be set", miLoopCharacteristics, id);
       }
 
       // Validation

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/AbstractAuthorizedRestResource.java
Patch:
@@ -19,7 +19,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.camunda.bpm.engine.AuthorizationService;
 import org.camunda.bpm.engine.IdentityService;
-import org.camunda.bpm.engine.ProcessEngineConfiguration;
+import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.authorization.Permission;
 import org.camunda.bpm.engine.authorization.Resource;
 import org.camunda.bpm.engine.impl.identity.Authentication;
@@ -40,6 +40,7 @@ public AbstractAuthorizedRestResource(String processEngineName, Resource resourc
   }
 
   protected boolean isAuthorized(Permission permission, Resource resource, String resourceId) {
+    ProcessEngine processEngine = getProcessEngine();
     if (!processEngine.getProcessEngineConfiguration().isAuthorizationEnabled()) {
       // if authorization is disabled everyone is authorized
       return true;

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/ConditionRestServiceImpl.java
Patch:
@@ -47,19 +47,19 @@ public List<ProcessInstanceDto> evaluateCondition(EvaluationConditionDto conditi
     ConditionEvaluationBuilder builder = createConditionEvaluationBuilder(conditionDto);
     List<ProcessInstance> processInstances = builder.evaluateStartConditions();
 
-    List<ProcessInstanceDto> result = new ArrayList<ProcessInstanceDto>();
+    List<ProcessInstanceDto> result = new ArrayList<>();
     for (ProcessInstance processInstance : processInstances) {
       result.add(ProcessInstanceDto.fromProcessInstance(processInstance));
     }
     return result;
   }
 
   protected ConditionEvaluationBuilder createConditionEvaluationBuilder(EvaluationConditionDto conditionDto) {
-    RuntimeService runtimeService = processEngine.getRuntimeService();
+    RuntimeService runtimeService = getProcessEngine().getRuntimeService();
 
     ObjectMapper objectMapper = getObjectMapper();
 
-    VariableMap variables = VariableValueDto.toMap(conditionDto.getVariables(), processEngine, objectMapper);
+    VariableMap variables = VariableValueDto.toMap(conditionDto.getVariables(), getProcessEngine(), objectMapper);
 
     ConditionEvaluationBuilder builder = runtimeService.createConditionEvaluation();
 

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/ExternalTaskRestServiceImpl.java
Patch:
@@ -78,7 +78,7 @@ public List<ExternalTaskDto> queryExternalTasks(ExternalTaskQueryDto queryDto, I
       matchingTasks = query.list();
     }
 
-    List<ExternalTaskDto> taskResults = new ArrayList<ExternalTaskDto>();
+    List<ExternalTaskDto> taskResults = new ArrayList<>();
     for (ExternalTask task : matchingTasks) {
       ExternalTaskDto resultInstance = ExternalTaskDto.fromExternalTask(task);
       taskResults.add(resultInstance);
@@ -118,7 +118,7 @@ public CountResultDto queryExternalTasksCount(ExternalTaskQueryDto queryDto) {
   @Override
   public void fetchAndLock(FetchExternalTasksExtendedDto dto, AsyncResponse asyncResponse) {
     FetchAndLockHandler fetchAndLockHandler = FetchAndLockContextListener.getFetchAndLockHandler();
-    fetchAndLockHandler.addPendingRequest(dto, asyncResponse, processEngine);
+    fetchAndLockHandler.addPendingRequest(dto, asyncResponse, getProcessEngine());
   }
 
   @Override
@@ -152,7 +152,7 @@ public BatchDto setRetriesAsync(SetRetriesForExternalTasksDto retriesDto) {
   @Override
   public List<String> getTopicNames(boolean withLockedTasks, boolean withUnlockedTasks,
                                     boolean withRetriesLeft) {
-    return processEngine.getExternalTaskService()
+    return getProcessEngine().getExternalTaskService()
                         .getTopicNames(withLockedTasks, withUnlockedTasks, withRetriesLeft);
   }
 

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/IncidentRestServiceImpl.java
Patch:
@@ -43,7 +43,7 @@ public IncidentRestServiceImpl(String engineName, ObjectMapper objectMapper) {
   @Override
   public List<IncidentDto> getIncidents(UriInfo uriInfo, Integer firstResult, Integer maxResults) {
     IncidentQueryDto queryDto = new IncidentQueryDto(getObjectMapper(), uriInfo.getQueryParameters());
-    IncidentQuery query = queryDto.toQuery(processEngine);
+    IncidentQuery query = queryDto.toQuery(getProcessEngine());
 
     List<Incident> queryResult;
     if (firstResult != null || maxResults != null) {
@@ -52,7 +52,7 @@ public List<IncidentDto> getIncidents(UriInfo uriInfo, Integer firstResult, Inte
       queryResult = query.list();
     }
 
-    List<IncidentDto> result = new ArrayList<IncidentDto>();
+    List<IncidentDto> result = new ArrayList<>();
     for (Incident incident : queryResult) {
       IncidentDto dto = IncidentDto.fromIncident(incident);
       result.add(dto);
@@ -64,7 +64,7 @@ public List<IncidentDto> getIncidents(UriInfo uriInfo, Integer firstResult, Inte
   @Override
   public CountResultDto getIncidentsCount(UriInfo uriInfo) {
     IncidentQueryDto queryDto = new IncidentQueryDto(getObjectMapper(), uriInfo.getQueryParameters());
-    IncidentQuery query = queryDto.toQuery(processEngine);
+    IncidentQuery query = queryDto.toQuery(getProcessEngine());
 
     long count = query.count();
     CountResultDto result = new CountResultDto();

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/MessageRestServiceImpl.java
Patch:
@@ -22,6 +22,7 @@
 import javax.ws.rs.core.Response.Status;
 
 import org.camunda.bpm.engine.MismatchingMessageCorrelationException;
+import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.rest.MessageRestService;
 import org.camunda.bpm.engine.rest.dto.VariableValueDto;
@@ -115,6 +116,7 @@ protected Response createResponse(List<MessageCorrelationResultDto> resultDtos,
   }
 
   protected MessageCorrelationBuilder createMessageCorrelationBuilder(CorrelationMessageDto messageDto) {
+    ProcessEngine processEngine = getProcessEngine();
     RuntimeService runtimeService = processEngine.getRuntimeService();
 
     ObjectMapper objectMapper = getObjectMapper();

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/MetricsRestServiceImpl.java
Patch:
@@ -60,14 +60,14 @@ public MetricsRestServiceImpl(String engineName, ObjectMapper objectMapper) {
 
   @Override
   public MetricsResource getMetrics(String name) {
-    return new MetricsResourceImpl(name, processEngine, objectMapper);
+    return new MetricsResourceImpl(name, getProcessEngine(), objectMapper);
   }
 
   @Override
   public List<MetricsIntervalResultDto> interval(UriInfo uriInfo) {
     MultivaluedMap<String, String> queryParameters = uriInfo.getQueryParameters();
     final String name = queryParameters.getFirst(QUERY_PARAM_NAME);
-    MetricsQuery query = processEngine.getManagementService()
+    MetricsQuery query = getProcessEngine().getManagementService()
       .createMetricsQuery()
       .name(name)
       .reporter(queryParameters.getFirst(QUERY_PARAM_REPORTER));
@@ -94,7 +94,7 @@ public List<MetricsIntervalResultDto> interval(UriInfo uriInfo) {
   @Override
   public Response deleteTaskMetrics(String dateString) {
     Date date = dateConverter.convertQueryParameterToType(dateString);
-    processEngine.getManagementService().deleteTaskMetrics(date);
+    getProcessEngine().getManagementService().deleteTaskMetrics(date);
 
     // return no content (204) since resource is deleted
     return Response.noContent().build();

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/ProcessInstanceRestServiceImpl.java
Patch:
@@ -246,7 +246,7 @@ public BatchDto setVariablesAsync(SetVariablesAsyncDto setVariablesAsyncDto) {
 
     VariableMap variableMap = null;
     try {
-      variableMap = VariableValueDto.toMap(variables, processEngine, objectMapper);
+      variableMap = VariableValueDto.toMap(variables, getProcessEngine(), objectMapper);
 
     } catch (RestException e) {
       String errorMessage = String.format("Cannot set variables: %s", e.getMessage());
@@ -283,7 +283,7 @@ public BatchDto correlateMessageAsync(CorrelationMessageAsyncDto correlationMess
 
     VariableMap variableMap = null;
     try {
-      variableMap = VariableValueDto.toMap(variables, processEngine, objectMapper);
+      variableMap = VariableValueDto.toMap(variables, getProcessEngine(), objectMapper);
     } catch (RestException e) {
       String errorMessage = String.format("Cannot set variables: %s", e.getMessage());
       throw new InvalidRequestException(e.getStatus(), e, errorMessage);
@@ -324,7 +324,7 @@ protected <T extends Query, R extends AbstractQueryDto> T toQuery(R query) {
       return null;
     }
 
-    return (T) query.toQuery(processEngine);
+    return (T) query.toQuery(getProcessEngine());
   }
 
 }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/SchemaLogRestServiceImpl.java
Patch:
@@ -45,7 +45,7 @@ public List<SchemaLogEntryDto> getSchemaLog(Request request, UriInfo uriInfo, In
 
   @Override
   public List<SchemaLogEntryDto> querySchemaLog(SchemaLogQueryDto dto, Integer firstResult, Integer maxResults) {
-    SchemaLogQuery query = dto.toQuery(processEngine);
+    SchemaLogQuery query = dto.toQuery(getProcessEngine());
     List<SchemaLogEntry> schemaLogEntries;
     if (firstResult != null || maxResults != null) {
       schemaLogEntries = executePaginatedQuery(query, firstResult, maxResults);

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/SignalRestServiceImpl.java
Patch:
@@ -56,7 +56,7 @@ public void throwSignal(SignalDto dto) {
   }
 
   protected SignalEventReceivedBuilder createSignalEventReceivedBuilder(SignalDto dto) {
-    RuntimeService runtimeService = processEngine.getRuntimeService();
+    RuntimeService runtimeService = getProcessEngine().getRuntimeService();
     String name = dto.getName();
     SignalEventReceivedBuilder signalEvent = runtimeService.createSignalEvent(name);
 
@@ -67,7 +67,7 @@ protected SignalEventReceivedBuilder createSignalEventReceivedBuilder(SignalDto
 
     Map<String, VariableValueDto> variablesDto = dto.getVariables();
     if (variablesDto != null) {
-      Map<String, Object> variables = VariableValueDto.toMap(variablesDto, processEngine, objectMapper);
+      Map<String, Object> variables = VariableValueDto.toMap(variablesDto, getProcessEngine(), objectMapper);
       signalEvent.setVariables(variables);
     }
 

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/TelemetryRestServiceImpl.java
Patch:
@@ -34,22 +34,22 @@ public TelemetryRestServiceImpl(String engineName, ObjectMapper objectMapper) {
   public void configureTelemetry(TelemetryConfigurationDto dto) {
     boolean enableTelemetry = dto.isEnableTelemetry();
 
-    ManagementService managementService = processEngine.getManagementService();
+    ManagementService managementService = getProcessEngine().getManagementService();
 
     managementService.toggleTelemetry(enableTelemetry);
   }
 
   @Override
   public TelemetryConfigurationDto getTelemetryConfiguration() {
-    ManagementService managementService = processEngine.getManagementService();
+    ManagementService managementService = getProcessEngine().getManagementService();
 
     Boolean telemetryEnabled = managementService.isTelemetryEnabled();
     return new TelemetryConfigurationDto(telemetryEnabled);
   }
 
   @Override
   public TelemetryDataDto getTelemetryData() {
-    ManagementService managementService = processEngine.getManagementService();
+    ManagementService managementService = getProcessEngine().getManagementService();
     TelemetryData data = managementService.getTelemetryData();
 
     return TelemetryDataDto.fromEngineDto(data);

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/VariableInstanceRestServiceImpl.java
Patch:
@@ -39,7 +39,7 @@ public VariableInstanceRestServiceImpl(String engineName, ObjectMapper objectMap
 
   @Override
   public VariableInstanceResource getVariableInstance(String id) {
-    return new VariableInstanceResourceImpl(id, processEngine);
+    return new VariableInstanceResourceImpl(id, getProcessEngine());
   }
 
   @Override
@@ -69,7 +69,7 @@ public List<VariableInstanceDto> queryVariableInstances(VariableInstanceQueryDto
       matchingInstances = query.list();
     }
 
-    List<VariableInstanceDto> instanceResults = new ArrayList<VariableInstanceDto>();
+    List<VariableInstanceDto> instanceResults = new ArrayList<>();
     for (VariableInstance instance : matchingInstances) {
       VariableInstanceDto resultInstance = VariableInstanceDto.fromVariableInstance(instance);
       instanceResults.add(resultInstance);

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/authorization/impl/AuthorizationResourceImpl.java
Patch:
@@ -48,14 +48,14 @@ public class AuthorizationResourceImpl extends AbstractAuthorizedRestResource im
   public AuthorizationResourceImpl(String processEngineName, String resourceId, String relativeRootResourcePath, ObjectMapper objectMapper) {
     super(processEngineName, AUTHORIZATION, resourceId, objectMapper);
     this.relativeRootResourcePath = relativeRootResourcePath;
-    authorizationService = processEngine.getAuthorizationService();
+    authorizationService = getProcessEngine().getAuthorizationService();
   }
 
   public AuthorizationDto getAuthorization(UriInfo context) {
 
     Authorization dbAuthorization = getDbAuthorization();
 
-    return AuthorizationDto.fromAuthorization(dbAuthorization, processEngine.getProcessEngineConfiguration());
+    return AuthorizationDto.fromAuthorization(dbAuthorization, getProcessEngine().getProcessEngineConfiguration());
 
   }
 
@@ -68,7 +68,7 @@ public void updateAuthorization(AuthorizationDto dto) {
     // get db auth
     Authorization dbAuthorization = getDbAuthorization();
     // copy values from dto
-    AuthorizationDto.update(dto, dbAuthorization, processEngine.getProcessEngineConfiguration());
+    AuthorizationDto.update(dto, dbAuthorization, getProcessEngine().getProcessEngineConfiguration());
     // save
     authorizationService.saveAuthorization(dbAuthorization);
   }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/identity/impl/AbstractIdentityResource.java
Patch:
@@ -34,7 +34,7 @@ public abstract class AbstractIdentityResource extends AbstractAuthorizedRestRes
 
   public AbstractIdentityResource(String processEngineName, Resource resource, String resourceId, ObjectMapper objectMapper) {
     super(processEngineName, resource, resourceId, objectMapper);
-    this.identityService = processEngine.getIdentityService();
+    this.identityService = getProcessEngine().getIdentityService();
   }
 
   protected void ensureNotReadOnly() {

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/identity/impl/GroupResourceImpl.java
Patch:
@@ -103,7 +103,7 @@ public void deleteGroup() {
   }
 
   public GroupMembersResource getGroupMembersResource() {
-    return new GroupMembersResourceImpl(processEngine.getName(), resourceId, rootResourcePath, getObjectMapper());
+    return new GroupMembersResourceImpl(getProcessEngine().getName(), resourceId, rootResourcePath, getObjectMapper());
   }
 
   protected Group findGroupObject() {

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/identity/impl/TenantResourceImpl.java
Patch:
@@ -99,11 +99,11 @@ public ResourceOptionsDto availableOperations(UriInfo context) {
   }
 
   public TenantUserMembersResource getTenantUserMembersResource() {
-    return new TenantUserMembersResourceImpl(processEngine.getName(), resourceId, rootResourcePath, getObjectMapper());
+    return new TenantUserMembersResourceImpl(getProcessEngine().getName(), resourceId, rootResourcePath, getObjectMapper());
   }
 
   public TenantGroupMembersResource getTenantGroupMembersResource() {
-    return new TenantGroupMembersResourceImpl(processEngine.getName(), resourceId, rootResourcePath, getObjectMapper());
+    return new TenantGroupMembersResourceImpl(getProcessEngine().getName(), resourceId, rootResourcePath, getObjectMapper());
   }
 
   protected Tenant findTenantObject() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SignalEventReceivedCmd.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.camunda.bpm.engine.exception.NotFoundException;
 import org.camunda.bpm.engine.impl.ProcessEngineLogger;
 import org.camunda.bpm.engine.impl.SignalEventReceivedBuilderImpl;
 import org.camunda.bpm.engine.impl.cfg.CommandChecker;
@@ -123,7 +124,7 @@ protected void sendSignalToExecution(CommandContext commandContext, String signa
 
     EventSubscriptionManager eventSubscriptionManager = commandContext.getEventSubscriptionManager();
     List<EventSubscriptionEntity> signalEvents = eventSubscriptionManager.findSignalEventSubscriptionsByNameAndExecution(signalName, executionId);
-    ensureNotEmpty("Execution '" + executionId + "' has not subscribed to a signal event with name '" + signalName + "'.", signalEvents);
+    ensureNotEmpty(NotFoundException.class, "Execution '" + executionId + "' has not subscribed to a signal event with name '" + signalName + "'.", signalEvents);
 
     checkAuthorizationOfCatchSignals(commandContext, signalEvents);
     notifyExecutions(signalEvents);

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/UserEntity.java
Patch:
@@ -160,7 +160,7 @@ protected String generateSalt() {
       .getSaltGenerator()
       .generateSalt();
   }
-  
+
 
   public boolean checkPasswordAgainstPolicy() {
     PasswordPolicyResult result = Context.getProcessEngineConfiguration()
@@ -181,8 +181,8 @@ public String toString() {
            + ", firstName=" + firstName
            + ", lastName=" + lastName
            + ", email=" + email
-           + ", password=" + password
-           + ", salt=" + salt
+           + ", password=******" // sensitive for logging
+           + ", salt=******" // sensitive for logging
            + ", lockExpirationTime=" + lockExpirationTime
            + ", attempts=" + attempts
            + "]";

File: clients/java/client/src/main/java/org/camunda/bpm/client/exception/BadRequestException.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * Thrown when you perform an illegal operation or the given data is invalid.
  */
-public class BadRequestException extends NotAcquiredException {
+public class BadRequestException extends RestException {
 
   public BadRequestException(String message, RestException restException) {
     super(message, restException);

File: clients/java/client/src/main/java/org/camunda/bpm/client/exception/EngineException.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * Thrown if something went wrong during the engine execution (e.g., a persistence exception occurred).
  */
-public class EngineException extends NotResumedException {
+public class EngineException extends RestException {
 
   public EngineException(String message, RestException restException) {
     super(message, restException);

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/VariableInstanceEntity.java
Patch:
@@ -153,7 +153,7 @@ public static VariableInstanceEntity create(String name, TypedValue value, boole
   public void delete() {
 
     if (!isTransient()) {
-      typedValueField.notifyImplicitValueUpdate();
+      typedValueField.notifyImplicitValueUpdateIfEnabled();
     }
 
     // clear value

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/BatchJobPriorityRangeTest.java
Patch:
@@ -49,8 +49,8 @@ public class BatchJobPriorityRangeTest {
 
   protected long defaultBatchJobPriority;
   protected int defaultBatchJobsPerSeed;
-  protected Long defaultJobExecutorPriorityRangeMin;
-  protected Long defaultJobExecutorPriorityRangeMax;
+  protected long defaultJobExecutorPriorityRangeMin;
+  protected long defaultJobExecutorPriorityRangeMax;
 
   @Before
   public void setup() {

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/JobExecutorFollowUpTest.java
Patch:
@@ -114,8 +114,8 @@ protected static ControllableJobExecutor buildControllableJobExecutor() {
   protected static ThreadControl executionThread;
 
   protected ProcessEngineConfigurationImpl configuration;
-  protected Long defaultJobExecutorPriorityRangeMin;
-  protected Long defaultJobExecutorPriorityRangeMax;
+  protected long defaultJobExecutorPriorityRangeMin;
+  protected long defaultJobExecutorPriorityRangeMax;
 
   @Before
   public void setUp() throws Exception {

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/JobExecutorPriorityRangeConfigurationTest.java
Patch:
@@ -77,7 +77,7 @@ public void shouldThrowExceptionOnNegativeMinPriorityRangeConfiguration() {
   @Test
   public void shouldThrowExceptionOnNegativeMaxPriorityRangeConfiguration() {
     // given
-    config.setJobExecutorPriorityRangeMin(null);
+    config.setJobExecutorPriorityRangeMin(0L);
     config.setJobExecutorPriorityRangeMax(-10L);
 
     // then

File: engine-plugins/identity-ldap/src/test/java/org/camunda/bpm/identity/impl/ldap/LdapIdentityProviderTest.java
Patch:
@@ -16,8 +16,6 @@
  */
 package org.camunda.bpm.identity.impl.ldap;
 
-import java.util.ArrayList;
-
 import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
 
 /**

File: engine-plugins/identity-ldap/src/test/java/org/camunda/bpm/identity/impl/ldap/LdapTestUtilities.java
Patch:
@@ -60,7 +60,7 @@ public static void testGroupPaging(IdentityService identityService) {
     assertEquals(0, groups.size());
   }
 
-  public static void testUserPaging(IdentityService identityService) {
+  public static void testUserPaging(IdentityService identityService, LdapTestEnvironment ldapTestEnvironment) {
     Set<String> userNames = new HashSet<String>();
     List<User> users = identityService.createUserQuery().listPage(0, 2);
     assertEquals(2, users.size());
@@ -78,7 +78,8 @@ public static void testUserPaging(IdentityService identityService) {
     assertEquals(2, users.size());
     checkPagingResults(userNames, users.get(0).getId(), users.get(1).getId());
 
-    users = identityService.createUserQuery().listPage(12, 2);
+    // over the page.
+    users = identityService.createUserQuery().listPage(ldapTestEnvironment.getTotalNumberOfUsersCreated() + 1, 2);
     assertEquals(0, users.size());
   }
 

File: quarkus-extension/engine/deployment/src/test/java/org/camunda/bpm/quarkus/engine/test/ConfigurableProcessEngineTest.java
Patch:
@@ -35,7 +35,8 @@ public class ConfigurableProcessEngineTest {
   @RegisterExtension
   static final QuarkusUnitTest unitTest = new QuarkusUnitTest()
       .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)
-                                    .addClass(MyConfig.class));
+                                    .addClass(MyConfig.class))
+      .withConfigurationResource("application.properties");
 
   @ApplicationScoped
   static class MyConfig {

File: quarkus-extension/engine/deployment/src/test/java/org/camunda/bpm/quarkus/engine/test/persistence/conf/ChooseDatasourceConfigurationTest.java
Patch:
@@ -26,7 +26,6 @@
 import org.junit.jupiter.api.extension.RegisterExtension;
 
 import javax.inject.Inject;
-import javax.sql.DataSource;
 import java.sql.SQLException;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: quarkus-extension/engine/deployment/src/test/java/org/camunda/bpm/quarkus/engine/test/persistence/conf/DatasourceConfigurationTest.java
Patch:
@@ -31,7 +31,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class OverrideDefaultDatasourceConfigurationTest {
+public class DatasourceConfigurationTest {
 
   @RegisterExtension
   static QuarkusUnitTest unitTest = new ProcessEngineAwareExtension()

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetIdentityLinksForTaskCmd.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.io.Serializable;
 import java.util.List;
+import java.util.stream.Collectors;
 
 import org.camunda.bpm.engine.impl.cfg.CommandChecker;
 import org.camunda.bpm.engine.impl.interceptor.Command;
@@ -44,7 +45,6 @@ public GetIdentityLinksForTaskCmd(String taskId) {
     this.taskId = taskId;
   }
 
-  @SuppressWarnings({"unchecked", "rawtypes" })
   public List<IdentityLink> execute(CommandContext commandContext) {
     ensureNotNull("taskId", taskId);
 
@@ -54,7 +54,7 @@ public List<IdentityLink> execute(CommandContext commandContext) {
 
     checkGetIdentityLink(task, commandContext);
 
-    List<IdentityLink> identityLinks = (List) task.getIdentityLinks();
+    List<IdentityLink> identityLinks = task.getIdentityLinks().stream().collect(Collectors.toList());
 
     // assignee is not part of identity links in the db.
     // so if there is one, we add it here.
@@ -79,7 +79,7 @@ public List<IdentityLink> execute(CommandContext commandContext) {
       identityLinks.add(identityLink);
     }
 
-    return (List) task.getIdentityLinks();
+    return identityLinks;
   }
 
   protected void checkGetIdentityLink(TaskEntity task, CommandContext commandContext) {

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/timer/BoundaryTimerNonInterruptingEventTest.java
Patch:
@@ -645,7 +645,7 @@ public void testUpdateTimerRepeat() {
     // there should be a single timer job (R5/PT1H)
     TimerEntity timerJob = (TimerEntity) managementService.createJobQuery().singleResult();
     assertNotNull(timerJob);
-    assertEquals("R5/" + sdf.format(timerJob.getDuedate()) + "/PT1H", timerJob.getRepeat());
+    assertEquals("R5/" + sdf.format(ClockUtil.getCurrentTime()) + "/PT1H", timerJob.getRepeat());
 
     // WHEN
     // we update the repeat property of the timer job

File: clients/java/client/src/main/java/org/camunda/bpm/client/backoff/ExponentialErrorBackoffStrategy.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.camunda.bpm.client.backoff;
 
+import org.camunda.bpm.client.exception.ExternalTaskClientException;
 import org.camunda.bpm.client.task.ExternalTask;
 
 import java.util.List;
@@ -51,7 +52,7 @@ public ExponentialErrorBackoffStrategy(long initTime, float factor, long maxTime
   }
 
   @Override
-  public void reconfigure(List<ExternalTask> externalTasks, Exception error) {
+  public void reconfigure(List<ExternalTask> externalTasks, ExternalTaskClientException error) {
     if (error != null) {
       level++;
     } else {

File: clients/java/client/src/main/java/org/camunda/bpm/client/exception/NotFoundException.java
Patch:
@@ -21,12 +21,12 @@
  *
  * @author Tassilo Weidner
  */
-public class NotFoundException extends ExternalTaskClientException {
+public class NotFoundException extends RestException {
 
   private static final long serialVersionUID = 1L;
 
-  public NotFoundException(String message) {
-    super(message);
+  public NotFoundException(String message, RestException restException) {
+    super(message, restException);
   }
 
 }

File: clients/java/client/src/main/java/org/camunda/bpm/client/variable/impl/value/DeferredFileValueImpl.java
Patch:
@@ -53,7 +53,8 @@ protected void load() {
       this.isLoaded = true;
 
     } catch (EngineClientException e) {
-      throw LOG.cannotLoadDeferedFileValueException(variableName, e);
+      throw LOG.handledEngineClientException("loading deferred file", e);
+
     }
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/timer/BoundaryTimerNonInterruptingEventTest.java
Patch:
@@ -645,7 +645,7 @@ public void testUpdateTimerRepeat() {
     // there should be a single timer job (R5/PT1H)
     TimerEntity timerJob = (TimerEntity) managementService.createJobQuery().singleResult();
     assertNotNull(timerJob);
-    assertEquals("R5/" + sdf.format(ClockUtil.getCurrentTime()) + "/PT1H", timerJob.getRepeat());
+    assertEquals("R5/" + sdf.format(timerJob.getDuedate()) + "/PT1H", timerJob.getRepeat());
 
     // WHEN
     // we update the repeat property of the timer job

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/telemetry/TelemetryConnectPluginTest.java
Patch:
@@ -100,7 +100,8 @@ public static WebArchive createDeployment() {
         .addAsLibraries(Maven.resolver()
             .offline()
             .loadPomFromFile("pom.xml")
-            .resolve("com.github.tomakehurst:wiremock-standalone")
+            .resolve("com.github.tomakehurst:wiremock-jre8-standalone",
+                     "org.slf4j:slf4j-jdk14") // required to resolve classloading issues in WAS Liberty
             .withTransitivity()
             .as(JavaArchive.class));
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -1194,7 +1194,6 @@ public boolean transitionTo(TaskState state) {
   public boolean triggerUpdateEvent() {
     if (lifecycleState == TaskState.STATE_CREATED) {
       setLastUpdated(ClockUtil.getCurrentTime());
-      update();
       return fireEvent(TaskListener.EVENTNAME_UPDATE) && fireAssignmentEvent();
     }
     else {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/VariableInstanceConcurrentLocalInitializer.java
Patch:
@@ -34,7 +34,7 @@ public VariableInstanceConcurrentLocalInitializer(ExecutionEntity execution) {
 
   @Override
   public void onCreate(VariableInstanceEntity variableInstance, AbstractVariableScope sourceScope) {
-    variableInstance.setConcurrentLocal(!execution.isScope() || execution.isExecutingScopeLeafActivity());
+    variableInstance.setConcurrentLocal(!execution.isScope() || execution.getParent() != null && execution.isExecutingScopeLeafActivity());
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/impl/util/ExceptionUtil.java
Patch:
@@ -207,9 +207,8 @@ public static boolean checkForeignKeyConstraintViolation(SQLException sqlExcepti
           // H2
           "23506".equals(sqlState) && errorCode == 23506 ||
           // DB2
-          message.contains("sqlstate=23503") && message.toLowerCase().contains("sqlcode=-530") ||
-          // DB2 zOS
-          "23503".equals(sqlState) && errorCode == -530;
+          "23503".equals(sqlState) && errorCode == -530 ||
+          "23504".equals(sqlState) && errorCode == -532;
     }
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/BoundaryEventInputOutputTest.java
Patch:
@@ -17,11 +17,12 @@
 package org.camunda.bpm.engine.test.bpmn.event;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.fail;
 
 import java.util.List;
 
+import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.history.HistoricVariableInstance;
+import org.camunda.bpm.engine.test.RequiredHistoryLevel;
 import org.camunda.bpm.engine.test.bpmn.iomapping.VariableLogDelegate;
 import org.camunda.bpm.engine.test.util.PluggableProcessEngineTest;
 import org.camunda.bpm.engine.variable.Variables;
@@ -31,6 +32,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
+@RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_AUDIT)
 public class BoundaryEventInputOutputTest extends PluggableProcessEngineTest {
 
   protected static final BpmnModelInstance EVENT_GATEWAY_PROCESS =

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/gateway/EventBasedGatewayInputOutputTest.java
Patch:
@@ -20,7 +20,9 @@
 
 import java.util.List;
 
+import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.history.HistoricVariableInstance;
+import org.camunda.bpm.engine.test.RequiredHistoryLevel;
 import org.camunda.bpm.engine.test.bpmn.iomapping.VariableLogDelegate;
 import org.camunda.bpm.engine.test.util.PluggableProcessEngineTest;
 import org.camunda.bpm.engine.variable.Variables;
@@ -30,6 +32,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
+@RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_AUDIT)
 public class EventBasedGatewayInputOutputTest extends PluggableProcessEngineTest {
 
   protected static final BpmnModelInstance EVENT_GATEWAY_PROCESS =

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/TaskRestServiceQueryTest.java
Patch:
@@ -847,8 +847,8 @@ public void testSortingParameters() {
     inOrder.verify(mockQuery).asc();
 
     inOrder = Mockito.inOrder(mockQuery);
-    executeAndVerifySorting("updatedAfter", "asc", Status.OK);
-    inOrder.verify(mockQuery).orderByTaskUpdatedAfter();
+    executeAndVerifySorting("lastUpdated", "asc", Status.OK);
+    inOrder.verify(mockQuery).orderByLastUpdated();
     inOrder.verify(mockQuery).asc();
 
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/TaskQueryImpl.java
Patch:
@@ -1346,9 +1346,9 @@ public TaskQuery orderByTaskCreateTime() {
   }
 
   @Override
-  public TaskQuery orderByTaskUpdatedAfter() {
-    ensureNotInOrQuery("orderByTaskUpdatedAfter()");
-    return orderBy(TaskQueryProperty.UPDATED_AFTER);
+  public TaskQuery orderByLastUpdated() {
+    ensureNotInOrQuery("orderByLastUpdated()");
+    return orderBy(TaskQueryProperty.LAST_UPDATED);
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/impl/TaskQueryProperty.java
Patch:
@@ -35,7 +35,7 @@ public interface TaskQueryProperty {
   public static final QueryProperty PRIORITY = new QueryPropertyImpl("PRIORITY_");
   public static final QueryProperty ASSIGNEE = new QueryPropertyImpl("ASSIGNEE_");
   public static final QueryProperty CREATE_TIME = new QueryPropertyImpl("CREATE_TIME_");
-  public static final QueryProperty UPDATED_AFTER = new QueryPropertyImpl("LAST_UPDATED_");
+  public static final QueryProperty LAST_UPDATED = new QueryPropertyImpl("LAST_UPDATED_");
   public static final QueryProperty PROCESS_INSTANCE_ID = new QueryPropertyImpl("PROC_INST_ID_");
   public static final QueryProperty CASE_INSTANCE_ID = new QueryPropertyImpl("CASE_INST_ID_");
   public static final QueryProperty EXECUTION_ID = new QueryPropertyImpl("EXECUTION_ID_");

File: engine/src/main/java/org/camunda/bpm/engine/task/TaskQuery.java
Patch:
@@ -935,7 +935,7 @@ public interface TaskQuery extends Query<TaskQuery, Task>{
    *
    * @throws ProcessEngineException When method has been executed within "or query".
    */
-  TaskQuery orderByTaskUpdatedAfter();
+  TaskQuery orderByLastUpdated();
 
   /**
    * Order by process instance id (needs to be followed by {@link #asc()} or {@link #desc()}).

File: engine/src/test/java/org/camunda/bpm/engine/test/api/task/TaskQueryTest.java
Patch:
@@ -5517,7 +5517,7 @@ public void shouldReturnResultsOrderedByLastUpdatedAsc() {
     // when
     List<Task> tasks = taskService.createTaskQuery()
         .processInstanceIdIn(processInstance1.getId(), processInstance2.getId(), processInstance3.getId())
-        .taskUpdatedAfter(beforeUpdates).orderByTaskUpdatedAfter().asc().list();
+        .taskUpdatedAfter(beforeUpdates).orderByLastUpdated().asc().list();
 
     // then
     assertThat(tasks).hasSize(3);
@@ -5551,7 +5551,7 @@ public void shouldReturnResultsOrderedByLastUpdatedDesc() {
     // when
     List<Task> tasks = taskService.createTaskQuery()
         .processInstanceIdIn(processInstance1.getId(), processInstance2.getId(), processInstance3.getId())
-        .taskUpdatedAfter(beforeUpdates).orderByTaskUpdatedAfter().desc().list();
+        .taskUpdatedAfter(beforeUpdates).orderByLastUpdated().desc().list();
 
     // then
     assertThat(tasks).hasSize(3);

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/ConcurrencyTestHelper.java
Patch:
@@ -85,6 +85,9 @@ public ControllableCommand(ThreadControl threadControl) {
       this.monitor = threadControl;
     }
 
+    public ThreadControl getMonitor() {
+      return monitor;
+    }
   }
 
   public static class ThreadControl {

File: engine/src/main/java/org/camunda/bpm/engine/impl/interceptor/ExceptionCodeInterceptor.java
Patch:
@@ -126,6 +126,7 @@ protected Integer provideCode(ProcessEngineException pex, int initialCode) {
   /**
    * Resets codes to the {@link BuiltinExceptionCode#FALLBACK}
    * in case they are < {@link #MIN_CUSTOM_CODE} or > {@link #MAX_CUSTOM_CODE}.
+   * No log is written when code is {@link BuiltinExceptionCode#FALLBACK}.
    */
   protected Integer tryResetReservedCode(Integer code) {
     if (codeReserved(code)) {
@@ -139,7 +140,8 @@ protected Integer tryResetReservedCode(Integer code) {
   }
 
   protected boolean codeReserved(Integer code) {
-    return code != null && (code < MIN_CUSTOM_CODE || code > MAX_CUSTOM_CODE);
+    return code != null && code != BuiltinExceptionCode.FALLBACK.getCode() &&
+        (code < MIN_CUSTOM_CODE || code > MAX_CUSTOM_CODE);
   }
 
   protected void assignCodeToException(ProcessEngineException pex) {

File: engine/src/test/java/org/camunda/bpm/engine/test/errorcode/conf/CustomErrorCodeProviderTest.java
Patch:
@@ -17,7 +17,6 @@
 package org.camunda.bpm.engine.test.errorcode.conf;
 
 import ch.qos.logback.classic.Level;
-import org.assertj.core.api.ThrowableAssert;
 import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
 import org.camunda.bpm.engine.IdentityService;
 import org.camunda.bpm.engine.ProcessEngineException;
@@ -46,7 +45,6 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.assertj.core.api.Assertions.catchThrowable;
-import static org.junit.Assert.fail;
 
 public class CustomErrorCodeProviderTest {
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/el/UelExpressionCondition.java
Patch:
@@ -58,9 +58,9 @@ public boolean tryEvaluate(VariableScope scope, DelegateExecution execution) {
     boolean result = false;
     try {
       result = evaluate(scope, execution);
-    } catch (ProcessEngineException pee) {
-      if (!(pee.getCause() instanceof PropertyNotFoundException)) {
-        throw pee;
+    } catch (ProcessEngineException pex) {
+      if (!(pex.getCause() instanceof PropertyNotFoundException)) {
+        throw pex;
       }
     }
     return result;

File: engine/src/main/java/org/camunda/bpm/engine/impl/interceptor/CommandInvocationContext.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.List;
 import java.util.concurrent.Callable;
 
-import org.apache.ibatis.exceptions.PersistenceException;
 import org.camunda.bpm.application.InvocationContext;
 import org.camunda.bpm.application.ProcessApplicationReference;
 import org.camunda.bpm.engine.ProcessEngineException;

File: engine/src/test/java/org/camunda/bpm/engine/test/api/repository/DeleteProcessDefinitionTest.java
Patch:
@@ -145,10 +145,10 @@ public void testDeleteProcessDefinitionWithProcessInstance() {
     try {
       repositoryService.deleteProcessDefinition(processDefinition.getId());
       fail("Should fail, since there exists a process instance");
-    } catch (ProcessEngineException pee) {
+    } catch (ProcessEngineException pex) {
       // then Exception is expected, the deletion should fail since there exist a process instance
       // and the cascade flag is per default false
-      assertTrue(pee.getMessage().contains("Deletion of process definition without cascading failed."));
+      assertTrue(pex.getMessage().contains("Deletion of process definition without cascading failed."));
     }
     assertEquals(1, repositoryService.createProcessDefinitionQuery().count());
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/repository/RepositoryServiceTest.java
Patch:
@@ -203,9 +203,9 @@ public void testDeleteDeploymentWithRunningInstances() {
     try {
       repositoryService.deleteDeployment(processDefinition.getDeploymentId());
       fail("Exception expected");
-    } catch (ProcessEngineException pee) {
+    } catch (ProcessEngineException pex) {
       // Exception expected when deleting deployment with running process
-      assert(pee.getMessage().contains("Deletion of process definition without cascading failed."));
+      assert(pex.getMessage().contains("Deletion of process definition without cascading failed."));
     }
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/CompetingCompleteTaskSetVariableTest.java
Patch:
@@ -45,7 +45,7 @@ public ControllableCompleteTaskCommand(String taskId) {
     }
 
     public Void execute(CommandContext commandContext) {
-      monitor.sync();  // thread will block here until makeContinue() is called form main thread
+      monitor.sync();  // thread will block here until makeContinue() is called from main thread
 
       new CompleteTaskCmd(taskId, null).execute(commandContext);
 
@@ -70,7 +70,7 @@ public ControllableSetTaskVariablesCommand(String taskId,  Map<String, ? extends
     }
 
     public Void execute(CommandContext commandContext) {
-      monitor.sync();  // thread will block here until makeContinue() is called form main thread
+      monitor.sync();  // thread will block here until makeContinue() is called from main thread
 
       new SetTaskVariablesCmd(taskId, variables, true).execute(commandContext);
 

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/CompetingMessageCorrelationTest.java
Patch:
@@ -608,7 +608,7 @@ public ControllableMessageCorrelationCommand(String messageName, String processI
     @Override
     public Void execute(CommandContext commandContext) {
 
-      monitor.sync();  // thread will block here until makeContinue() is called form main thread
+      monitor.sync();  // thread will block here until makeContinue() is called from main thread
 
       MessageCorrelationBuilderImpl correlationBuilder = new MessageCorrelationBuilderImpl(commandContext, messageName);
       if (processInstanceId != null) {

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/ConcurrentDeploymentTest.java
Patch:
@@ -180,7 +180,7 @@ public ControllableDeployCommand(DeploymentBuilder deploymentBuilder) {
     }
 
     public Void execute(CommandContext commandContext) {
-      monitor.sync();  // thread will block here until makeContinue() is called form main thread
+      monitor.sync();  // thread will block here until makeContinue() is called from main thread
 
       new DeployCmd((DeploymentBuilderImpl) deploymentBuilder).execute(commandContext);
 

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/ConcurrentHistoryCleanupTest.java
Patch:
@@ -105,7 +105,7 @@ public void testRunTwoHistoryCleanups() throws InterruptedException {
   protected static class ControllableHistoryCleanupCommand extends ControllableCommand<Void> {
 
     public Void execute(CommandContext commandContext) {
-      monitor.sync();  // thread will block here until makeContinue() is called form main thread
+      monitor.sync();  // thread will block here until makeContinue() is called from main thread
 
       new HistoryCleanupCmd(true).execute(commandContext);
 

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/ConcurrentHistoryLevelTest.java
Patch:
@@ -92,7 +92,7 @@ protected static class ControllableUpdateHistoryLevelCommand extends Controllabl
 
     public Void execute(CommandContext commandContext) {
 
-      monitor.sync(); // thread will block here until makeContinue() is called form main thread
+      monitor.sync(); // thread will block here until makeContinue() is called from main thread
 
       new HistoryLevelSetupCommand().execute(commandContext);
 

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/ConcurrentInstallationIdInitializationTest.java
Patch:
@@ -91,7 +91,7 @@ protected static class ControllableInstallationIdInitializationCommand extends C
 
     public Void execute(CommandContext commandContext) {
 
-      monitor.sync(); // thread will block here until makeContinue() is called form main thread
+      monitor.sync(); // thread will block here until makeContinue() is called from main thread
 
       new BootstrapEngineCommand().initializeInstallationId(commandContext);
 

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/ConcurrentTelemetryConfigurationTest.java
Patch:
@@ -96,7 +96,7 @@ public ControllableUpdateTelemetrySetupCommand(boolean telemetryEnabled) {
 
     public Void execute(CommandContext commandContext) {
 
-      monitor.sync(); // thread will block here until makeContinue() is called form main thread
+      monitor.sync(); // thread will block here until makeContinue() is called from main thread
 
       new BootstrapEngineCommand().initializeTelemetryProperty(commandContext);
 

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricProcessInstanceTest.java
Patch:
@@ -72,7 +72,6 @@
 import org.camunda.bpm.engine.variable.Variables;
 import org.camunda.bpm.model.bpmn.Bpmn;
 import org.camunda.bpm.model.bpmn.BpmnModelInstance;
-import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -290,9 +289,10 @@ public void testDeleteProcessInstanceWithSubprocessInstances() {
   @Test
   @Deployment(resources = {"org/camunda/bpm/engine/test/history/oneTaskProcess.bpmn20.xml"})
   public void testHistoricProcessInstanceStartDate() {
+    ClockUtil.setCurrentTime(new Date());
     runtimeService.startProcessInstanceByKey("oneTaskProcess");
 
-    Date date = new Date();
+    Date date = ClockUtil.getCurrentTime();
 
     assertEquals(1, historyService.createHistoricProcessInstanceQuery().startDateOn(date).count());
     assertEquals(1, historyService.createHistoricProcessInstanceQuery().startDateBy(date).count());

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -55,7 +55,6 @@
 import org.camunda.bpm.engine.impl.db.HasDbRevision;
 import org.camunda.bpm.engine.impl.event.EventType;
 import org.camunda.bpm.engine.impl.history.HistoryLevel;
-import org.camunda.bpm.engine.impl.history.event.HistoricVariableUpdateEventEntity;
 import org.camunda.bpm.engine.impl.history.event.HistoryEvent;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventProcessor;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventTypes;
@@ -67,7 +66,6 @@
 import org.camunda.bpm.engine.impl.jobexecutor.TimerDeclarationImpl;
 import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.PvmProcessDefinition;
-import org.camunda.bpm.engine.impl.pvm.delegate.CompositeActivityBehavior;
 import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 import org.camunda.bpm.engine.impl.pvm.process.ProcessDefinitionImpl;
 import org.camunda.bpm.engine.impl.pvm.process.ScopeImpl;

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationCreateScope.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.PvmLogger;
-import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 import org.camunda.bpm.engine.impl.pvm.runtime.PvmExecutionImpl;
 
 /**

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/PvmExecutionImpl.java
Patch:
@@ -352,7 +352,7 @@ public void clearScope(String reason, boolean skipCustomListeners, boolean skipI
     PvmActivity activity = getActivity();
     if (isActive && activity != null) {
       // set activity instance state to cancel
-      if (activityInstanceState != ENDING.getStateCode()) {
+      if (activityInstanceState != ENDING.getStateCode() || activityInstanceEndListenersFailed) {
         setCanceled(true);
         performOperation(PvmAtomicOperation.FIRE_ACTIVITY_END);
       }
@@ -1848,6 +1848,7 @@ public boolean isInState(ActivityInstanceState state) {
     return activityInstanceState == state.getStateCode();
   }
 
+  @Override
   public boolean hasFailedOnEndListeners() {
     return activityInstanceEndListenersFailed;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java
Patch:
@@ -472,7 +472,7 @@ public void deleteAuthorizationsByResourceIdAndUserId(Resource resource, String
       deleteParams.put("resourceType", resource.resourceType());
       deleteParams.put("resourceId", resourceId);
       deleteParams.put("userId", userId);
-      getDbEntityManager().delete(AuthorizationEntity.class, "deleteAuthorizationsForResourceId", deleteParams);
+      getDbEntityManager().delete(AuthorizationEntity.class, "deleteAuthorizationsForResourceIdAndUserId", deleteParams);
     }
 
   }
@@ -488,7 +488,7 @@ public void deleteAuthorizationsByResourceIdAndGroupId(Resource resource, String
       deleteParams.put("resourceType", resource.resourceType());
       deleteParams.put("resourceId", resourceId);
       deleteParams.put("groupId", groupId);
-      getDbEntityManager().delete(AuthorizationEntity.class, "deleteAuthorizationsForResourceId", deleteParams);
+      getDbEntityManager().delete(AuthorizationEntity.class, "deleteAuthorizationsForResourceIdAndGroupId", deleteParams);
     }
 
   }

File: distro/run/modules/example/src/main/java/org/camunda/bpm/run/example/invoice/Application.java
Patch:
@@ -59,6 +59,7 @@ public void onPostDeploy(PostDeployEvent event) {
   @Override
   public void addResourceHandlers(ResourceHandlerRegistry registry) {
     registry.addResourceHandler("/forms/**").addResourceLocations("classpath:/forms/");
+    registry.addResourceHandler("/camunda-invoice/**").addResourceLocations("classpath:/camunda-invoice/");
   }
 
 }

File: test-utils/assert/core/src/main/java/org/camunda/bpm/engine/test/assertions/bpmn/ProcessInstanceAssert.java
Patch:
@@ -272,7 +272,7 @@ private ProcessInstanceAssert hasPassed(final String[] activityIds, boolean hasP
       (hasPassed ? "to have passed activities %s at least once"
         + (inOrder? " and in order" : "") + ", "
         : "NOT to have passed activities %s, ") +
-      "but actually we instead we found that it passed %s. (Please make sure you have set the history " +
+      "but actually we found that it passed %s. (Please make sure you have set the history " +
       "service of the engine to at least 'activity' or a higher level before making use of this assertion!)";
     ListAssert<String> assertion = (ListAssert<String>) Assertions.assertThat(finished)
       .overridingErrorMessage(message,
@@ -774,4 +774,4 @@ protected ProcessDefinitionQuery processDefinitionQuery() {
     return super.processDefinitionQuery().processDefinitionId(actual.getProcessDefinitionId());
   }
 
-}
\ No newline at end of file
+}

File: qa/integration-tests-webapps/integration-tests/src/main/java/org/camunda/bpm/ErrorPageIT.java
Patch:
@@ -37,7 +37,7 @@ public void createClient() throws Exception {
   @Test
   public void shouldCheckNonFoundResponse() {
     // when
-    ClientResponse response = client.resource(APP_BASE_PATH + "nonexisting")
+    ClientResponse response = client.resource(appBasePath + "nonexisting")
         .get(ClientResponse.class);
 
     // then

File: qa/integration-tests-webapps/integration-tests/src/main/java/org/camunda/bpm/ExceptionLoggerIT.java
Patch:
@@ -34,7 +34,7 @@ public void createClient() throws Exception {
   @Test
   public void shouldNotFailForUndefinedUser() {
     // when
-    ClientResponse response = client.resource(APP_BASE_PATH + "app/admin/default/#/users/undefined?tab=profile")
+    ClientResponse response = client.resource(appBasePath + "app/admin/default/#/users/undefined?tab=profile")
                                     .get(ClientResponse.class);
 
     // then

File: qa/integration-tests-webapps/integration-tests/src/main/java/org/camunda/bpm/SessionCookieSameSiteIT.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.List;
 
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
 public class SessionCookieSameSiteIT extends AbstractWebIntegrationTest {
@@ -41,7 +40,7 @@ public void shouldCheckPresenceOfSameSiteProperties() {
     // given
 
     // when
-    ClientResponse response = client.resource(APP_BASE_PATH + TASKLIST_PATH)
+    ClientResponse response = client.resource(appBasePath + TASKLIST_PATH)
         .get(ClientResponse.class);
 
     // then

File: qa/integration-tests-webapps/integration-tests/src/main/java/org/camunda/bpm/SessionCookieSecurityIT.java
Patch:
@@ -41,7 +41,7 @@ public void shouldCheckPresenceOfProperties() {
     // given
 
     // when
-    ClientResponse response = client.resource(APP_BASE_PATH + TASKLIST_PATH)
+    ClientResponse response = client.resource(appBasePath + TASKLIST_PATH)
         .get(ClientResponse.class);
 
     // then

File: qa/integration-tests-webapps/integration-tests/src/main/java/org/camunda/bpm/TestProperties.java
Patch:
@@ -73,7 +73,6 @@ public static Properties getTestProperties() throws IOException {
     try {
       propertiesStream = TestProperties.class.getResourceAsStream(TESTCONFIG_PROPERTIES_FILE);
       properties.load(propertiesStream);
-      String httpPort = (String) properties.get("http.port");
     } finally {
       try {
         if (propertiesStream != null) {

File: qa/integration-tests-webapps/integration-tests/src/main/java/org/camunda/bpm/rest/beans/CustomRestApplication.java
Patch:
@@ -28,7 +28,7 @@ public class CustomRestApplication extends Application {
 
   @Override
   public Set<Class<?>> getClasses() {
-    Set<Class<?>> classes = new HashSet<Class<?>>();
+    Set<Class<?>> classes = new HashSet<>();
 
     // add all camunda engine rest resources (or just add those that you actually need).
     classes.addAll(CamundaRestResources.getResourceClasses());

File: engine/src/main/java/org/camunda/bpm/engine/authorization/BatchPermissions.java
Patch:
@@ -35,8 +35,8 @@ public enum BatchPermissions implements Permission {
    * is revoked. This does not implicate that all individual
    * permissions are revoked.
    *
-   * Example: If the UPDATE permission is revoke also the ALL
-   * permission is revoked, because the user is not authorized
+   * Example: If the UPDATE permission is revoked then the ALL
+   * permission is revoked as well, because the user is not authorized
    * to execute all actions anymore.
    */
   ALL("ALL", Integer.MAX_VALUE),

File: engine/src/main/java/org/camunda/bpm/engine/authorization/HistoricProcessInstancePermissions.java
Patch:
@@ -33,8 +33,8 @@ public enum HistoricProcessInstancePermissions implements Permission {
    * is revoked. This does not implicate that all individual
    * permissions are revoked.
    *
-   * Example: If the UPDATE permission is revoked also the ALL
-   * permission is revoked, because the user is not authorized
+   * Example: If the UPDATE permission is revoked then the ALL
+   * permission is revoked as well, because the user is not authorized
    * to execute all actions anymore.
    */
   ALL("ALL", Integer.MAX_VALUE),

File: engine/src/main/java/org/camunda/bpm/engine/authorization/HistoricTaskPermissions.java
Patch:
@@ -33,8 +33,8 @@ public enum HistoricTaskPermissions implements Permission {
    * is revoked. This does not implicate that all individual
    * permissions are revoked.
    *
-   * Example: If the UPDATE permission is revoked also the ALL
-   * permission is revoked, because the user is not authorized
+   * Example: If the READ permission is revoked then the ALL
+   * permission is revoked as well, because the user is not authorized
    * to execute all actions anymore.
    */
   ALL("ALL", Integer.MAX_VALUE),

File: engine/src/main/java/org/camunda/bpm/engine/authorization/Permissions.java
Patch:
@@ -37,8 +37,8 @@ public enum Permissions implements Permission {
    * is revoked. This does not implicate that all individual
    * permissions are revoked.
    *
-   * Example: If the UPDATE permission is revoke also the ALL
-   * permission is revoked, because the user is not authorized
+   * Example: If the UPDATE permission is revoked then the ALL
+   * permission is revoked as well, because the user is not authorized
    * to execute all actions anymore.
    */
   ALL("ALL", Integer.MAX_VALUE, EnumSet.allOf(Resources.class)),

File: engine/src/main/java/org/camunda/bpm/engine/authorization/ProcessDefinitionPermissions.java
Patch:
@@ -35,8 +35,8 @@ public enum ProcessDefinitionPermissions implements Permission {
    * is revoked. This does not implicate that all individual
    * permissions are revoked.
    *
-   * Example: If the UPDATE permission is revoke also the ALL
-   * permission is revoked, because the user is not authorized
+   * Example: If the UPDATE permission is revoked then the ALL
+   * permission is revoked as well, because the user is not authorized
    * to execute all actions anymore.
    */
   ALL("ALL", Integer.MAX_VALUE),

File: engine/src/main/java/org/camunda/bpm/engine/authorization/ProcessInstancePermissions.java
Patch:
@@ -35,8 +35,8 @@ public enum ProcessInstancePermissions implements Permission {
    * is revoked. This does not implicate that all individual
    * permissions are revoked.
    *
-   * Example: If the UPDATE permission is revoke also the ALL
-   * permission is revoked, because the user is not authorized
+   * Example: If the UPDATE permission is revoked then the ALL
+   * permission is revoked as well, because the user is not authorized
    * to execute all actions anymore.
    */
   ALL("ALL", Integer.MAX_VALUE),

File: engine/src/main/java/org/camunda/bpm/engine/authorization/SystemPermissions.java
Patch:
@@ -29,8 +29,8 @@ public enum SystemPermissions implements Permission {
    * is revoked. This does not implicate that all individual
    * permissions are revoked.
    *
-   * Example: If the UPDATE permission is revoke also the ALL
-   * permission is revoked, because the user is not authorized
+   * Example: If the UPDATE permission is revoked then the ALL
+   * permission is revoked as well, because the user is not authorized
    * to execute all actions anymore.
    */
   ALL("ALL", Integer.MAX_VALUE),

File: engine/src/main/java/org/camunda/bpm/engine/authorization/TaskPermissions.java
Patch:
@@ -35,8 +35,8 @@ public enum TaskPermissions implements Permission {
    * is revoked. This does not implicate that all individual
    * permissions are revoked.
    *
-   * Example: If the UPDATE permission is revoke also the ALL
-   * permission is revoked, because the user is not authorized
+   * Example: If the UPDATE permission is revoked then the ALL
+   * permission is revoked as well, because the user is not authorized
    * to execute all actions anymore.
    */
   ALL("ALL", Integer.MAX_VALUE),

File: engine/src/main/java/org/camunda/bpm/engine/authorization/UserOperationLogCategoryPermissions.java
Patch:
@@ -35,8 +35,8 @@ public enum UserOperationLogCategoryPermissions implements Permission {
    * is revoked. This does not implicate that all individual
    * permissions are revoked.
    *
-   * Example: If the UPDATE permission is revoke also the ALL
-   * permission is revoked, because the user is not authorized
+   * Example: If the UPDATE permission is revoked then the ALL
+   * permission is revoked as well, because the user is not authorized
    * to execute all actions anymore.
    */
   ALL("ALL", Integer.MAX_VALUE),

File: engine-plugins/spin-plugin/src/test/java/org/camunda/spin/plugin/variables/HistoricVariableJsonSerializationWithValidationTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.spin.plugin.variables;
 
-import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: engine-plugins/spin-plugin/src/test/java/org/camunda/spin/plugin/variables/JsonSerializationWithValidationOnMultipleEnginesTest.java
Patch:
@@ -19,13 +19,11 @@
 import static org.camunda.bpm.engine.variable.Variables.objectValue;
 import static org.hamcrest.CoreMatchers.isA;
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.ProcessEngineException;
-import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.runtime.DeserializationTypeValidator;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.test.ProcessEngineRule;

File: engine-rest/engine-rest-jaxrs2/src/test/java/org/camunda/bpm/engine/rest/helper/MockGroupBuilder.java
Patch:
@@ -46,8 +46,6 @@ public MockGroupBuilder type(String type) {
   public Group build() {
     Group group = mock(Group.class);
     when(group.getId()).thenReturn(id);
-    when(group.getName()).thenReturn(name);
-    when(group.getType()).thenReturn(type);
     return group;
   }
 

File: engine-rest/engine-rest-jaxrs2/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -143,7 +143,6 @@ public static MockUserBuilder mockUser() {
   public static Tenant createMockTenant() {
     Tenant mockTenant = mock(Tenant.class);
     when(mockTenant.getId()).thenReturn(EXAMPLE_TENANT_ID);
-    when(mockTenant.getName()).thenReturn(EXAMPLE_TENANT_NAME);
     return mockTenant;
   }
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/AuthorizationRestServiceQueryTest.java
Patch:
@@ -181,7 +181,7 @@ public void testCompleteGetParameters() {
 
     RequestSpecification requestSpecification = given().contentType(POST_JSON_CONTENT_TYPE);
     for (Entry<String, String> paramEntry : queryParameters.entrySet()) {
-      requestSpecification.parameter(paramEntry.getKey(), paramEntry.getValue());
+      requestSpecification.param(paramEntry.getKey(), paramEntry.getValue());
     }
 
     requestSpecification.expect().statusCode(Status.OK.getStatusCode())

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/BatchRestServiceInteractionTest.java
Patch:
@@ -23,7 +23,7 @@
 import static org.hamcrest.Matchers.equalTo;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
-import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/BatchRestServiceQueryTest.java
Patch:
@@ -22,7 +22,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/BatchRestServiceStatisticsTest.java
Patch:
@@ -22,7 +22,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/CaseDefinitionRestServiceQueryTest.java
Patch:
@@ -42,7 +42,6 @@
 import org.junit.ClassRule;
 import org.junit.Test;
 import org.mockito.InOrder;
-import org.mockito.Matchers;
 import org.mockito.Mockito;
 
 import io.restassured.http.ContentType;
@@ -392,7 +391,7 @@ public void testCaseDefinitionRetrievalByEmptyList() {
 
     // assert query invocation
     InOrder inOrder = Mockito.inOrder(mockedQuery);
-    inOrder.verify(mockedQuery, never()).caseDefinitionIdIn(Matchers.<String[]>anyVararg());
+    inOrder.verify(mockedQuery, never()).caseDefinitionIdIn(Mockito.any());
     inOrder.verify(mockedQuery).list();
   }
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/CaseExecutionRestServiceQueryTest.java
Patch:
@@ -21,8 +21,8 @@
 import static io.restassured.path.json.JsonPath.from;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.hamcrest.Matchers.equalTo;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Matchers.eq;
+import static org.mockito.hamcrest.MockitoHamcrest.argThat;
+import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/CaseInstanceRestServiceQueryTest.java
Patch:
@@ -21,8 +21,8 @@
 import static io.restassured.path.json.JsonPath.from;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.hamcrest.Matchers.equalTo;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Matchers.eq;
+import static org.mockito.hamcrest.MockitoHamcrest.argThat;
+import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/CustomJacksonDateFormatTest.java
Patch:
@@ -18,8 +18,8 @@
 
 import static io.restassured.RestAssured.given;
 import static org.hamcrest.Matchers.is;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Matchers.eq;
+import static org.mockito.hamcrest.MockitoHamcrest.argThat;
+import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/DecisionDefinitionRestServiceQueryTest.java
Patch:
@@ -46,7 +46,7 @@
 import org.junit.ClassRule;
 import org.junit.Test;
 import org.mockito.InOrder;
-import org.mockito.Matchers;
+import org.mockito.Mockito;
 
 import io.restassured.http.ContentType;
 import io.restassured.response.Response;
@@ -398,7 +398,7 @@ public void testDecisionDefinitionRetrievalByEmptyList() {
 
     // assert query invocation
     InOrder inOrder = inOrder(mockedQuery);
-    inOrder.verify(mockedQuery, never()).decisionDefinitionIdIn(Matchers.<String[]>anyVararg());
+    inOrder.verify(mockedQuery, never()).decisionDefinitionIdIn(Mockito.any());
     inOrder.verify(mockedQuery).list();
   }
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/DecisionRequirementsDefinitionRestServiceInteractionTest.java
Patch:
@@ -21,8 +21,8 @@
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.anyString;
+import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/DecisionRequirementsDefinitionRestServiceQueryTest.java
Patch:
@@ -43,7 +43,6 @@
 import org.junit.ClassRule;
 import org.junit.Test;
 import org.mockito.InOrder;
-import org.mockito.Matchers;
 import org.mockito.Mockito;
 
 import io.restassured.http.ContentType;
@@ -359,7 +358,7 @@ public void testDecisionRequirementsDefinitionRetrievalByEmptyList() {
 
     // assert query invocation
     InOrder inOrder = Mockito.inOrder(mockedQuery);
-    inOrder.verify(mockedQuery, never()).decisionRequirementsDefinitionIdIn(Matchers.<String[]>anyVararg());
+    inOrder.verify(mockedQuery, never()).decisionRequirementsDefinitionIdIn(Mockito.any());
     inOrder.verify(mockedQuery).list();
   }
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/DeploymentRestServiceQueryTest.java
Patch:
@@ -21,7 +21,7 @@
 import static io.restassured.path.json.JsonPath.from;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.hamcrest.Matchers.equalTo;
-import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ExecutionRestServiceQueryTest.java
Patch:
@@ -22,8 +22,8 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Matchers.eq;
+import static org.mockito.hamcrest.MockitoHamcrest.argThat;
+import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ExternalTaskRestServiceQueryTest.java
Patch:
@@ -552,7 +552,7 @@ public void testQueryByPriorityListGet() {
     queryParameters.put("priorityLowerThanOrEquals", "4");
 
     Response response = given()
-        .queryParameters(queryParameters)
+        .queryParams(queryParameters)
     .expect()
       .statusCode(Status.OK.getStatusCode())
     .when()

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/FilterRestServiceQueryTest.java
Patch:
@@ -23,7 +23,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
-import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
@@ -214,7 +214,7 @@ public void testFilterQueryWithItemCount() {
       .queryParam("itemCount", true)
     .then().expect()
       .statusCode(Status.OK.getStatusCode())
-      .body("$.size", equalTo(2))
+      .body("$.size()", equalTo(2))
       .body("any { it.containsKey('itemCount') }", is(true))
       .body("[0].itemCount", equalTo(mockedFilterItemCount))
       .body("[1].itemCount", equalTo(anotherMockedFilterItemCount))
@@ -227,7 +227,7 @@ public void testFilterQueryWithoutItemCount() {
     given()
     .then().expect()
       .statusCode(Status.OK.getStatusCode())
-      .body("$.size", equalTo(2))
+      .body("$.size()", equalTo(2))
       .body("any { it.containsKey('itemCount') }", is(false))
     .when()
       .get(FILTER_QUERY_URL);

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/IdentityRestServiceQueryTest.java
Patch:
@@ -20,7 +20,7 @@
 import static io.restassured.RestAssured.given;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/IncidentRestServiceInteractionTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import static io.restassured.RestAssured.given;
 import static org.camunda.bpm.engine.rest.helper.MockProvider.EXAMPLE_USER_OPERATION_ANNOTATION;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/JobDefinitionRestServiceInteractionTest.java
Patch:
@@ -22,9 +22,9 @@
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.nullValue;
-import static org.mockito.Matchers.anyBoolean;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.anyBoolean;
+import static org.mockito.Mockito.anyString;
+import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/MetricsRestServiceInteractionTest.java
Patch:
@@ -412,7 +412,7 @@ public void testDeleteUtwWithoutTimestamp() {
   @Test
   public void testDeleteUtwThrowsAuthorizationException() {
     String message = "expected exception";
-    doThrow(new AuthorizationException(message)).when(managementServiceMock).deleteTaskMetrics(any(Date.class));
+    doThrow(new AuthorizationException(message)).when(managementServiceMock).deleteTaskMetrics(any());
 
     given()
     .then().expect()

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/PasswordPolicyServiceQueryTest.java
Patch:
@@ -18,9 +18,9 @@
 
 import static io.restassured.RestAssured.given;
 import static org.hamcrest.CoreMatchers.equalTo;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.isNull;
+import static org.mockito.Mockito.any;
+import static org.mockito.Mockito.anyString;
+import static org.mockito.Mockito.isNull;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ProcessDefinitionRestServiceQueryTest.java
Patch:
@@ -50,7 +50,7 @@
 import org.junit.ClassRule;
 import org.junit.Test;
 import org.mockito.InOrder;
-import org.mockito.Matchers;
+import org.mockito.Mockito;
 
 import io.restassured.http.ContentType;
 import io.restassured.response.Response;
@@ -230,7 +230,7 @@ public void testProcessDefinitionRetrievalByEmptyList() {
 
     // assert query invocation
     InOrder inOrder = inOrder(mockedQuery);
-    inOrder.verify(mockedQuery, never()).processDefinitionIdIn(Matchers.<String[]>anyVararg());
+    inOrder.verify(mockedQuery, never()).processDefinitionIdIn(Mockito.any());
     inOrder.verify(mockedQuery).list();
 
     String content = response.asString();

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/RestartProcessInstanceRestServiceTest.java
Patch:
@@ -19,8 +19,8 @@
 import static io.restassured.RestAssured.given;
 import static org.camunda.bpm.engine.rest.helper.MockProvider.createMockBatch;
 import static org.hamcrest.Matchers.equalTo;
-import static org.mockito.Matchers.anyListOf;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.anyList;
+import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.*;
 
 import io.restassured.http.ContentType;
@@ -72,7 +72,7 @@ public void setUpRuntimeData() {
     when(builderMock.startAfterActivity(anyString())).thenReturn(builderMock);
     when(builderMock.startBeforeActivity(anyString())).thenReturn(builderMock);
     when(builderMock.startTransition(anyString())).thenReturn(builderMock);
-    when(builderMock.processInstanceIds(anyListOf(String.class))).thenReturn(builderMock);
+    when(builderMock.processInstanceIds(anyList())).thenReturn(builderMock);
     when(builderMock.historicProcessInstanceQuery(any(HistoricProcessInstanceQuery.class))).thenReturn(builderMock);
     when(builderMock.skipCustomListeners()).thenReturn(builderMock);
     when(builderMock.skipIoMappings()).thenReturn(builderMock);

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/SignalRestServiceTest.java
Patch:
@@ -28,15 +28,15 @@
 import org.junit.Before;
 import org.junit.ClassRule;
 import org.junit.Test;
-import org.mockito.Matchers;
+import org.mockito.Mockito;
 
 import javax.ws.rs.core.Response.Status;
 import java.util.HashMap;
 import java.util.Map;
 
 import static io.restassured.RestAssured.given;
 import static org.hamcrest.core.IsEqual.equalTo;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
@@ -63,7 +63,7 @@ public void setupMocks() {
 
     signalBuilderMock = mock(SignalEventReceivedBuilderImpl.class);
     when(runtimeServiceMock.createSignalEvent(anyString())).thenReturn(signalBuilderMock);
-    when(signalBuilderMock.setVariables(Matchers.<Map<String,Object>>any())).thenReturn(signalBuilderMock);
+    when(signalBuilderMock.setVariables(Mockito.any())).thenReturn(signalBuilderMock);
     when(signalBuilderMock.executionId(anyString())).thenReturn(signalBuilderMock);
     when(signalBuilderMock.tenantId(anyString())).thenReturn(signalBuilderMock);
     when(signalBuilderMock.withoutTenantId()).thenReturn(signalBuilderMock);

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/StatisticsRestTest.java
Patch:
@@ -20,8 +20,8 @@
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.hasItems;
 import static org.hamcrest.Matchers.is;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.any;
+import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/TenantRestServiceQueryTest.java
Patch:
@@ -20,8 +20,8 @@
 import static io.restassured.RestAssured.given;
 import static io.restassured.path.json.JsonPath.from;
 import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
-import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
@@ -123,7 +123,7 @@ public void completeGetParameters() {
 
     RequestSpecification requestSpecification = given().contentType(POST_JSON_CONTENT_TYPE);
     for (Entry<String, String> paramEntry : queryParameters.entrySet()) {
-      requestSpecification.parameter(paramEntry.getKey(), paramEntry.getValue());
+      requestSpecification.param(paramEntry.getKey(), paramEntry.getValue());
     }
 
     requestSpecification

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/UserRestServiceQueryTest.java
Patch:
@@ -131,7 +131,7 @@ public void testCompleteGetParameters() {
 
     RequestSpecification requestSpecification = given().contentType(POST_JSON_CONTENT_TYPE);
     for (Entry<String, String> paramEntry : queryParameters.entrySet()) {
-      requestSpecification.parameter(paramEntry.getKey(), paramEntry.getValue());
+      requestSpecification.param(paramEntry.getKey(), paramEntry.getValue());
     }
 
     requestSpecification.expect().statusCode(Status.OK.getStatusCode())

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/VariableInstanceRestServiceInteractionTest.java
Patch:
@@ -21,8 +21,8 @@
 import static org.hamcrest.CoreMatchers.either;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.nullValue;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.times;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/VariableInstanceRestServiceQueryTest.java
Patch:
@@ -23,8 +23,8 @@
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.nullValue;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Matchers.eq;
+import static org.mockito.hamcrest.MockitoHamcrest.argThat;
+import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/converter/DateConverterTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.camunda.bpm.engine.rest.exception.InvalidRequestException;
 import org.junit.Before;
 import org.junit.Test;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/EqualsVariableMap.java
Patch:
@@ -20,11 +20,11 @@
 import java.util.Map;
 
 import org.camunda.bpm.engine.variable.VariableMap;
+import org.hamcrest.BaseMatcher;
 import org.hamcrest.Description;
 import org.hamcrest.Matcher;
-import org.mockito.ArgumentMatcher;
 
-public class EqualsVariableMap extends ArgumentMatcher<Map<String, Object>> {
+public class EqualsVariableMap extends BaseMatcher<Map<String, Object>> {
 
   protected Map<String, Matcher<?>> matchers;
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/variable/EqualsNullValue.java
Patch:
@@ -18,14 +18,14 @@
 
 import org.camunda.bpm.engine.variable.type.ValueType;
 import org.camunda.bpm.engine.variable.value.TypedValue;
+import org.hamcrest.BaseMatcher;
 import org.hamcrest.Description;
-import org.mockito.ArgumentMatcher;
 
 /**
  * @author Thorben Lindhauer
  *
  */
-public class EqualsNullValue extends ArgumentMatcher<TypedValue> {
+public class EqualsNullValue extends BaseMatcher<TypedValue> {
 
   public boolean matches(Object argument) {
     if (argument == null || !TypedValue.class.isAssignableFrom(argument.getClass())) {

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/variable/EqualsUntypedValue.java
Patch:
@@ -17,14 +17,14 @@
 package org.camunda.bpm.engine.rest.helper.variable;
 
 import org.camunda.bpm.engine.variable.value.TypedValue;
+import org.hamcrest.BaseMatcher;
 import org.hamcrest.Description;
-import org.mockito.ArgumentMatcher;
 
 /**
  * @author Thorben Lindhauer
  *
  */
-public class EqualsUntypedValue extends ArgumentMatcher<TypedValue> {
+public class EqualsUntypedValue extends BaseMatcher<TypedValue> {
 
   protected Object value;
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/CleanableHistoricCaseInstanceReportServiceTest.java
Patch:
@@ -21,7 +21,7 @@
 import static io.restassured.path.json.JsonPath.from;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.Matchers.containsString;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/CleanableHistoricDecisionInstanceReportServiceTest.java
Patch:
@@ -21,7 +21,7 @@
 import static io.restassured.path.json.JsonPath.from;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.Matchers.containsString;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/CleanableHistoricProcessInstanceReportServiceTest.java
Patch:
@@ -21,7 +21,7 @@
 import static io.restassured.path.json.JsonPath.from;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.Matchers.containsString;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricActivityInstanceRestServiceInteractionTest.java
Patch:
@@ -19,7 +19,7 @@
 import static io.restassured.RestAssured.given;
 import static io.restassured.path.json.JsonPath.from;
 import static org.hamcrest.Matchers.equalTo;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricActivityStatisticsRestServiceQueryTest.java
Patch:
@@ -22,7 +22,7 @@
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.hasItems;
 import static org.hamcrest.Matchers.is;
-import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricBatchRestServiceInteractionTest.java
Patch:
@@ -22,7 +22,7 @@
 import static org.hamcrest.Matchers.equalTo;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
-import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.RETURNS_DEEP_STUBS;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.inOrder;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricBatchRestServiceQueryTest.java
Patch:
@@ -21,7 +21,7 @@
 import static org.hamcrest.Matchers.equalTo;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricCaseActivityInstanceRestServiceInteractionTest.java
Patch:
@@ -19,7 +19,7 @@
 import static io.restassured.RestAssured.given;
 import static io.restassured.path.json.JsonPath.from;
 import static org.hamcrest.Matchers.equalTo;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricCaseActivityStatisticsRestServiceQueryTest.java
Patch:
@@ -20,7 +20,7 @@
 import static io.restassured.path.json.JsonPath.from;
 import static org.hamcrest.Matchers.hasItems;
 import static org.hamcrest.Matchers.is;
-import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricCaseInstanceRestServiceInteractionTest.java
Patch:
@@ -19,7 +19,7 @@
 import static io.restassured.RestAssured.given;
 import static io.restassured.path.json.JsonPath.from;
 import static org.hamcrest.Matchers.equalTo;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricCaseInstanceRestServiceQueryTest.java
Patch:
@@ -22,8 +22,8 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Matchers.eq;
+import static org.mockito.hamcrest.MockitoHamcrest.argThat;
+import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricDecisionInstanceRestServiceQueryTest.java
Patch:
@@ -20,6 +20,7 @@
 import static io.restassured.RestAssured.given;
 import static io.restassured.path.json.JsonPath.from;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.hasEntry;
@@ -28,7 +29,6 @@
 import static org.hamcrest.Matchers.notNullValue;
 import static org.hamcrest.Matchers.nullValue;
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricDecisionStatisticsRestServiceQueryTest.java
Patch:
@@ -34,7 +34,7 @@
 import static io.restassured.RestAssured.given;
 import static org.hamcrest.Matchers.hasItems;
 import static org.hamcrest.Matchers.is;
-import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricDetailRestServiceInteractionTest.java
Patch:
@@ -20,8 +20,8 @@
 import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.either;
 import static org.hamcrest.CoreMatchers.equalTo;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.times;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricProcessInstanceRestServiceQueryTest.java
Patch:
@@ -22,8 +22,8 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Matchers.eq;
+import static org.mockito.hamcrest.MockitoHamcrest.argThat;
+import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricProcessInstanceRestServiceReportTest.java
Patch:
@@ -31,8 +31,8 @@
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.Matchers.containsString;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.any;
+import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricTaskReportRestServiceTest.java
Patch:
@@ -59,7 +59,7 @@
 import static org.camunda.bpm.engine.rest.helper.MockProvider.createMockHistoricTaskInstanceReportWithProcDef;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.Matchers.containsString;
-import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricVariableInstanceRestServiceInteractionTest.java
Patch:
@@ -19,10 +19,10 @@
 import static io.restassured.RestAssured.given;
 import static org.hamcrest.CoreMatchers.either;
 import static org.hamcrest.CoreMatchers.equalTo;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.nullValue;
-import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricVariableInstanceRestServiceQueryTest.java
Patch:
@@ -59,7 +59,7 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.anyString;
 
 public class HistoricVariableInstanceRestServiceQueryTest extends AbstractRestServiceTest {
 
@@ -936,7 +936,7 @@ public void testHistoricVariableQueryByProcessDefinitionId() {
     when(mockedQuery.processDefinitionId(anyString())).thenReturn(mockedQuery);
 
     given()
-      .queryParameter("processDefinitionId", MockProvider.EXAMPLE_PROCESS_DEFINITION_ID)
+      .queryParam("processDefinitionId", MockProvider.EXAMPLE_PROCESS_DEFINITION_ID)
     .then().expect()
       .statusCode(Status.OK.getStatusCode())
     .when()
@@ -967,7 +967,7 @@ public void testHistoricVariableQueryByProcessDefinitionKey() {
     when(mockedQuery.processDefinitionKey(anyString())).thenReturn(mockedQuery);
 
     given()
-      .queryParameter("processDefinitionKey", MockProvider.EXAMPLE_PROCESS_DEFINITION_KEY)
+      .queryParam("processDefinitionKey", MockProvider.EXAMPLE_PROCESS_DEFINITION_KEY)
     .then().expect()
       .statusCode(Status.OK.getStatusCode())
     .when()

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoryCleanupRestServiceInteractionTest.java
Patch:
@@ -34,7 +34,7 @@
 import org.junit.Test;
 import io.restassured.http.ContentType;
 import static io.restassured.RestAssured.given;
-import static org.mockito.Matchers.anyBoolean;
+import static org.mockito.Mockito.anyBoolean;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/UserOperationLogRestServiceQueryTest.java
Patch:
@@ -24,9 +24,9 @@
 import static org.camunda.bpm.engine.rest.helper.MockProvider.EXAMPLE_USER_OPERATION_LOG_ID;
 import static org.hamcrest.Matchers.equalTo;
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.any;
+import static org.mockito.Mockito.anyInt;
+import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/mapper/Java8DateTimeTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import static io.restassured.RestAssured.given;
 import static org.hamcrest.Matchers.is;
-import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/optimize/OptimizeVariableUpdateRestServiceTest.java
Patch:
@@ -41,9 +41,9 @@
 import static io.restassured.path.json.JsonPath.from;
 import static org.camunda.bpm.engine.rest.helper.MockProvider.EXAMPLE_PRIMITIVE_VARIABLE_VALUE;
 import static org.camunda.bpm.engine.rest.util.DateTimeUtils.DATE_FORMAT_WITH_TIMEZONE;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyBoolean;
-import static org.mockito.Matchers.anyInt;
+import static org.mockito.Mockito.any;
+import static org.mockito.Mockito.anyBoolean;
+import static org.mockito.Mockito.anyInt;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/standalone/AbstractAuthenticationFilterTest.java
Patch:
@@ -18,8 +18,8 @@
 
 import static io.restassured.RestAssured.given;
 import static org.hamcrest.Matchers.equalTo;
-import static org.mockito.Matchers.anyBoolean;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.anyBoolean;
+import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/sub/impl/VariableDeserializationTypeValidationTest.java
Patch:
@@ -65,7 +65,7 @@ public void shouldValidateNothingForPrimitiveClass() {
     variablesResourceSpy.validateType(type);
 
     // then
-    Mockito.verifyZeroInteractions(validator);
+    Mockito.verifyNoInteractions(validator);
   }
 
   @Test

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/util/JsonPathUtil.java
Patch:
@@ -19,7 +19,7 @@
 import org.camunda.bpm.engine.rest.mapper.JacksonConfigurator;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
-import io.restassured.mapper.factory.DefaultJackson2ObjectMapperFactory;
+import io.restassured.path.json.mapper.factory.DefaultJackson2ObjectMapperFactory;
 import io.restassured.path.json.JsonPath;
 
 public final class JsonPathUtil {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/variables/JavaSerializationTest.java
Patch:
@@ -331,11 +331,10 @@ public void testStandaloneTaskTransientVariable() throws IOException {
       String serializedObject = StringUtil.fromBytes(Base64.encodeBase64(baos.toByteArray()), engineRule.getProcessEngine());
 
       taskService.setVariable(taskId, "instrument",
-        Variables.serializedObjectValue(serializedObject)
+        serializedObjectValue(serializedObject)
           .objectTypeName(String.class.getName())
           .serializationDataFormat(Variables.SerializationDataFormats.JAVA)
-          .setTransient(true)
-          );
+          .create());
       assertEquals("trumpet", taskService.getVariable(taskId, "instrument"));
     } finally {
       taskService.deleteTask(taskId, true);

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/engine/AbstractRenderFormDelegate.java
Patch:
@@ -468,7 +468,7 @@ protected boolean isReadOnly(FormField formField) {
     List<FormFieldValidationConstraint> validationConstraints = formField.getValidationConstraints();
     if(validationConstraints != null) {
       for (FormFieldValidationConstraint validationConstraint : validationConstraints) {
-        if("readonly".equals(validationConstraint.getName())){
+        if(HtmlFormEngine.CONSTRAINT_READONLY.equals(validationConstraint.getName())){
           return true;
         }
       }

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/engine/FormPropertyAdapter.java
Patch:
@@ -44,10 +44,10 @@ public FormPropertyAdapter(FormProperty formProperty) {
 
     validationConstraints = new ArrayList<FormFieldValidationConstraint>();
     if(formProperty.isRequired()) {
-      validationConstraints.add(new FormFieldValidationConstraintImpl("required", null));
+      validationConstraints.add(new FormFieldValidationConstraintImpl(HtmlFormEngine.CONSTRAINT_REQUIRED, null));
     }
     if(!formProperty.isWritable()) {
-      validationConstraints.add(new FormFieldValidationConstraintImpl("readonly", null));
+      validationConstraints.add(new FormFieldValidationConstraintImpl(HtmlFormEngine.CONSTRAINT_READONLY, null));
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -628,6 +628,7 @@ public ProcessDefinitionEntity parseProcess(Element processElement) {
     processDefinition.setProperty(PROPERTYNAME_DOCUMENTATION, parseDocumentation(processElement));
     processDefinition.setTaskDefinitions(new HashMap<String, TaskDefinition>());
     processDefinition.setDeploymentId(deployment.getId());
+    processDefinition.setTenantId(deployment.getTenantId());
     processDefinition.setProperty(PROPERTYNAME_JOB_PRIORITY, parsePriority(processElement, PROPERTYNAME_JOB_PRIORITY));
     processDefinition.setProperty(PROPERTYNAME_TASK_PRIORITY, parsePriority(processElement, PROPERTYNAME_TASK_PRIORITY));
     processDefinition.setVersionTag(processElement.attributeNS(CAMUNDA_BPMN_EXTENSIONS_NS, "versionTag"));

File: engine/src/test/java/org/camunda/bpm/application/impl/context/ProcessApplicationContextTest.java
Patch:
@@ -17,8 +17,8 @@
 package org.camunda.bpm.application.impl.context;
 
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.any;
+import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;

File: engine/src/test/java/org/camunda/bpm/engine/impl/cfg/JtaTransactionInterceptorTest.java
Patch:
@@ -34,7 +34,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 /**
  * This test covers the exception handling of the JTA transaction interceptor, especially

File: engine/src/test/java/org/camunda/bpm/engine/impl/incident/CompositeIncidentHandlerTest.java
Patch:
@@ -27,8 +27,8 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.any;
+import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/GroupAuthorizationTest.java
Patch:
@@ -20,8 +20,8 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Matchers.eq;
+import static org.mockito.hamcrest.MockitoHamcrest.argThat;
+import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.atLeastOnce;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;

File: engine/src/test/java/org/camunda/bpm/engine/test/api/cfg/AuthorizationCheckRevokesCfgTest.java
Patch:
@@ -17,7 +17,7 @@
 package org.camunda.bpm.engine.test.api.cfg;
 
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/AcquireJobCmdUnitTest.java
Patch:
@@ -17,7 +17,7 @@
 package org.camunda.bpm.engine.test.jobexecutor;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/delegate/ActivityExecution.java
Patch:
@@ -263,5 +263,7 @@ public interface ActivityExecution extends DelegateExecution {
   public Map<ScopeImpl, PvmExecutionImpl> createActivityExecutionMapping();
 
   void setEnded(boolean b);
+  
+  void setIgnoreAsync(boolean ignoreAsync);
 
 }

File: qa/test-db-instance-migration/test-fixture-716/src/main/java/org/camunda/bpm/qa/upgrade/TestFixture.java
Patch:
@@ -21,6 +21,7 @@
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.qa.upgrade.externaltask.ExternalTaskFailureLogScenario;
 import org.camunda.bpm.qa.upgrade.job.JobFailureLogScenario;
+import org.camunda.bpm.qa.upgrade.pvm.AsyncJoinScenario;
 
 public class TestFixture {
 
@@ -39,6 +40,7 @@ public static void main(String[] args) {
 
     runner.setupScenarios(ExternalTaskFailureLogScenario.class);
     runner.setupScenarios(JobFailureLogScenario.class);
+    runner.setupScenarios(AsyncJoinScenario.class);
 
     processEngine.close();
   }

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios7130/restart/RestartProcessIntanceWithInitialVariablesTest.java
Patch:
@@ -17,7 +17,6 @@
 package org.camunda.bpm.qa.upgrade.scenarios7130.restart;
 
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios7160/externaltask/ExternalTaskFailureLogTest.java
Patch:
@@ -19,11 +19,9 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 import org.camunda.bpm.engine.ExternalTaskService;
-import org.camunda.bpm.engine.ManagementService;
 import org.camunda.bpm.engine.externaltask.ExternalTask;
 import org.camunda.bpm.engine.history.HistoricIncident;
 import org.camunda.bpm.engine.runtime.Incident;
-import org.camunda.bpm.engine.runtime.Job;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.qa.upgrade.Origin;
 import org.camunda.bpm.qa.upgrade.ScenarioUnderTest;

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios730/boundary/NonInterruptingBoundaryEventScenarioTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import org.camunda.bpm.engine.management.ActivityStatistics;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
-import org.camunda.bpm.engine.task.Task;
 import org.camunda.bpm.qa.upgrade.Origin;
 import org.camunda.bpm.qa.upgrade.ScenarioUnderTest;
 import org.camunda.bpm.qa.upgrade.UpgradeTestRule;

File: engine-plugins/connect-plugin/src/test/java/org/camunda/connect/plugin/ConnectProcessEnginePluginTest.java
Patch:
@@ -254,7 +254,7 @@ public void testFollowingExceptionIsNotHandledByConnector(){
       assertThat(re.getMessage(), containsString("Invalid format"));
     }
   }
-  
+
   @Deployment
   public void testSendTaskWithConnector() {
     String outputParamValue = "someSendTaskOutputValue";
@@ -276,7 +276,7 @@ public void testSendTaskWithConnector() {
     assertNotNull(variable);
     assertEquals(outputParamValue, variable.getValue());
   }
-  
+
   @Deployment
   public void testIntermediateMessageThrowEventWithConnector() {
     String outputParamValue = "someMessageThrowOutputValue";
@@ -297,7 +297,7 @@ public void testIntermediateMessageThrowEventWithConnector() {
     VariableInstance variable = runtimeService.createVariableInstanceQuery().variableName("out1").singleResult();
     assertNotNull(variable);
     assertEquals(outputParamValue, variable.getValue());
-}
+  }
 
   @Deployment
   public void testMessageEndEventWithConnector() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/EnginePersistenceLogger.java
Patch:
@@ -764,7 +764,7 @@ public void errorFetchingTelemetryPropertyInDatabase(Exception exception) {
   public void errorConfiguringTelemetryProperty(Exception exception) {
     logDebug(
         "095",
-        "Error while configurting the telemetry property: {}", exception.getMessage());
+        "Error while configuring the telemetry property: {}", exception.getMessage());
   }
 
   public void noInstallationIdPropertyFound() {

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/api/DmnEngineMetricCollectorTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.camunda.bpm.engine.variable.Variables.createVariables;
-import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/el/ExpressionLanguageTest.java
Patch:
@@ -44,7 +44,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 import static org.camunda.bpm.dmn.engine.util.DmnExampleVerifier.assertExample;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.atLeastOnce;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.spy;

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/el/FeelIntegrationTest.java
Patch:
@@ -19,9 +19,9 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 import static org.camunda.bpm.dmn.engine.util.DmnExampleVerifier.assertExample;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.any;
+import static org.mockito.Mockito.anyString;
+import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.atLeastOnce;
 import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.spy;

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/type/DataTypeTransformerIntegrationTest.java
Patch:
@@ -16,8 +16,8 @@
  */
 package org.camunda.bpm.dmn.engine.type;
 
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.any;
+import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.atLeastOnce;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/type/DmnDataTypeTransformerTest.java
Patch:
@@ -42,7 +42,7 @@
 import java.util.TimeZone;
 
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
  * Tests the build-in {@link DmnDataTypeTransformer}s.

File: engine/src/main/java/org/camunda/bpm/engine/authorization/Authorization.java
Patch:
@@ -34,7 +34,7 @@
  * </ul>
  *
  * <h2>Identities</h2>
- * <p>Camunda Platform distinguished two types of identities: <em>users</em> and
+ * <p>Camunda Platform distinguishes two types of identities: <em>users</em> and
  * <em>groups</em>. Authorizations can either range over all users
  * (userId = {@link #ANY}), an individual {@link User} or a {@link Group} of users.</p>
  *

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/telemetry/InternalsDto.java
Patch:
@@ -23,6 +23,7 @@
 
 import org.camunda.bpm.engine.telemetry.Command;
 import org.camunda.bpm.engine.telemetry.Internals;
+import org.camunda.bpm.engine.telemetry.LicenseKeyData;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 
@@ -121,10 +122,11 @@ public void setWebapps(Set<String> webapps) {
 
   public static InternalsDto fromEngineDto(Internals other) {
 
+    LicenseKeyData licenseKey = other.getLicenseKey();
     InternalsDto dto = new InternalsDto(
         DatabaseDto.fromEngineDto(other.getDatabase()),
         ApplicationServerDto.fromEngineDto(other.getApplicationServer()),
-        LicenseKeyDataDto.fromEngineDto(other.getLicenseKey()),
+        licenseKey != null ? LicenseKeyDataDto.fromEngineDto(licenseKey) : null,
         JdkDto.fromEngineDto(other.getJdk()));
 
     dto.commands = new HashMap<>();

File: engine/src/main/java/org/camunda/bpm/engine/telemetry/Internals.java
Patch:
@@ -45,7 +45,7 @@ public interface Internals {
 
   /**
    * Information about the Camunda license key issued for enterprise editions of
-   * Camunda Platform.
+   * Camunda Platform. May be null when no license is used.
    */
   public LicenseKeyData getLicenseKey();
 

File: engine/src/main/java/org/camunda/bpm/application/impl/metadata/ProcessesXmlParser.java
Patch:
@@ -41,6 +41,7 @@ public class ProcessesXmlParser extends Parser {
   /**
    * create an configure the {@link ProcessesXmlParse} object.
    */
+  @Override
   public ProcessesXmlParse createParse() {
     ProcessesXmlParse processesXmlParse = new ProcessesXmlParse(this);
     processesXmlParse.setSchemaResource(ReflectUtil.getResourceUrlAsString(PROCESS_APPLICATION_XSD));

File: engine/src/main/java/org/camunda/bpm/container/impl/metadata/BpmPlatformXmlParser.java
Patch:
@@ -42,6 +42,7 @@ public class BpmPlatformXmlParser extends Parser {
   /**
    * create an configure the {@link ProcessesXmlParse} object.
    */
+  @Override
   public BpmPlatformXmlParse createParse() {
     BpmPlatformXmlParse parse = new BpmPlatformXmlParse(this);
     parse.setSchemaResource(ReflectUtil.getResourceUrlAsString(BPM_PLATFORM_XSD));

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParser.java
Patch:
@@ -92,6 +92,7 @@ public BpmnParser(ExpressionManager expressionManager, BpmnParseFactory bpmnPars
    * Creates a new {@link BpmnParse} instance that can be used
    * to parse only one BPMN 2.0 process definition.
    */
+  @Override
   public BpmnParse createParse() {
     return bpmnParseFactory.createBpmnParse(this);
   }

File: distro/run/core/src/main/java/org/camunda/bpm/run/property/CamundaBpmRunCorsProperty.java
Patch:
@@ -103,9 +103,9 @@ public String toString() {
     return "CamundaBpmRunCorsProperty [" +
         "enabled=" + enabled +
         ", allowCredentials=" + allowCredentials +
-        ", allowedOrigins='" + allowedOrigins +
-        ", allowedHeaders='" + allowedHeaders +
-        ", exposedHeaders='" + exposedHeaders +
+        ", allowedOrigins=" + allowedOrigins +
+        ", allowedHeaders=" + allowedHeaders +
+        ", exposedHeaders=" + exposedHeaders +
         ", preflightMaxAge=" + preflightMaxAge +
         ']';
   }

File: distro/run/core/src/main/java/org/camunda/bpm/run/property/CamundaBpmRunLdapProperties.java
Patch:
@@ -38,9 +38,9 @@ public String toString() {
         ", initialContextFactory=" + initialContextFactory +
         ", securityAuthentication=" + securityAuthentication +
         ", contextProperties=" + contextProperties +
-        ", serverUrl=" + serverUrl +
-        ", managerDn=" + managerDn +
-        ", managerPassword=" + managerPassword +
+        ", serverUrl=******" + // sensitive for logging
+        ", managerDn=******" + // sensitive for logging
+        ", managerPassword=******" + // sensitive for logging
         ", baseDn=" + baseDn +
         ", userDnPattern=" + userDnPattern +
         ", userSearchBase=" + userSearchBase +

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/property/AdminUserProperty.java
Patch:
@@ -104,7 +104,7 @@ public String toString() {
       .add("firstName=" + firstName)
       .add("lastName=" + lastName)
       .add("email=" + email)
-      .add("password=******")
+      .add("password=******") // sensitive for logging
       .toString();
   }
 

File: distro/run/core/src/test/java/org/camunda/bpm/run/test/config/cors/CorsConfigDecorateRequestTest.java
Patch:
@@ -41,6 +41,6 @@ public class CorsConfigDecorateRequestTest extends AbstractRestTest {
   @Test
   public void shouldSetDecorateRequestProperty() {
     // then
-    assertThat(camundaBpmRunProperties.getCors().getDecorateRequest()).isEqualTo("false");
+    assertThat(camundaBpmRunProperties.getCors().getDecorateRequest()).isFalse();
   }
 }
\ No newline at end of file

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/CsrfPreventionIT.java
Patch:
@@ -24,6 +24,7 @@
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.junit4.SpringRunner;
 
 import java.io.IOException;
@@ -35,6 +36,7 @@
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = { TestApplication.class }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
     properties = {"server.error.include-message=always"})
+@DirtiesContext
 public class CsrfPreventionIT {
 
   @Rule

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/session/it/SessionCookieIT.java
Patch:
@@ -25,11 +25,13 @@
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.junit4.SpringRunner;
 
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = { TestApplication.class }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
     properties = {"server.error.include-message=always"})
+@DirtiesContext
 public class SessionCookieIT {
 
   @Rule

File: engine-plugins/spin-plugin/src/main/java/org/camunda/spin/plugin/impl/JsonValueSerializer.java
Patch:
@@ -47,7 +47,7 @@ public SpinValue convertToTypedValue(UntypedValueImpl untypedValue) {
 
   protected SpinValue createDeserializedValue(Object deserializedObject, String serializedStringValue, ValueFields valueFields, boolean asTransientValue) {
     SpinJsonNode value = (SpinJsonNode) deserializedObject;
-    JsonValueImpl jsonValue = new JsonValueImpl(value, serializedStringValue, value.getDataFormatName(), true);
+    JsonValueImpl jsonValue = new JsonValueImpl(value, serializedStringValue, dataFormat.getName(), true);
     jsonValue.setTransient(asTransientValue);
     return jsonValue;
   }

File: engine/src/main/java/org/camunda/bpm/engine/ProcessEngines.java
Patch:
@@ -133,7 +133,7 @@ public synchronized static void init(boolean forceCreate) {
 
   protected static void initProcessEngineFromSpringResource(URL resource) {
     try {
-      Class< ? > springConfigurationHelperClass = ReflectUtil.loadClass("org.camunda.bpm.engine.test.spring.SpringConfigurationHelper");
+      Class< ? > springConfigurationHelperClass = ReflectUtil.loadClass("org.camunda.bpm.engine.spring.SpringConfigurationHelper");
       Method method = springConfigurationHelperClass.getMethod("buildProcessEngine", new Class<?>[]{URL.class});
       ProcessEngine processEngine = (ProcessEngine) method.invoke(null, new Object[]{resource});
 

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios7130/restart/RestartProcessIntanceWithInitialVariablesTest.java
Patch:
@@ -97,7 +97,7 @@ public void shouldRestartWithInitialVariablesJobExecutedIn712() {
         .processInstanceId(restartedProcessInstance.getId())
         .singleResult();
     assertNotNull(detail);
-    assertFalse(detail.isInitial());
+    assertTrue(detail.isInitial());
     assertEquals("initial1", detail.getVariableName());
     assertEquals("value1", detail.getTextValue());
   }
@@ -162,7 +162,7 @@ public void shouldRestartWithInitialVariablesJobExecutedIn713() {
 
     for (HistoricDetail historicDetail : details) {
       HistoricVariableUpdateEventEntity detail = (HistoricVariableUpdateEventEntity) historicDetail;
-      assertFalse(detail.isInitial());
+      assertTrue(detail.isInitial());
     }
   }
 
@@ -228,6 +228,6 @@ public void shouldRestartWithInitialVariablesJobExecutedAndSetVariablesIn713() {
         .processInstanceId(restartedProcessInstance.getId())
         .singleResult();
 
-    assertFalse(detail.isInitial());
+    assertTrue(detail.isInitial());
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/process/ProcessDefinitionImpl.java
Patch:
@@ -92,6 +92,7 @@ public PvmProcessInstance createProcessInstanceForInitial(ActivityImpl initial)
 
     PvmExecutionImpl processInstance = newProcessInstance();
 
+    processInstance.setStarting(true);
     processInstance.setProcessDefinition(this);
 
     processInstance.setProcessInstance(processInstance);

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityInitStack.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.List;
 
 import org.camunda.bpm.engine.impl.pvm.PvmActivity;
-import org.camunda.bpm.engine.impl.pvm.runtime.ExecutionStartContext;
+import org.camunda.bpm.engine.impl.pvm.runtime.ScopeInstantiationContext;
 import org.camunda.bpm.engine.impl.pvm.runtime.InstantiationStack;
 import org.camunda.bpm.engine.impl.pvm.runtime.PvmExecutionImpl;
 
@@ -41,7 +41,7 @@ public String getCanonicalName() {
   }
 
   public void execute(PvmExecutionImpl execution) {
-    ExecutionStartContext executionStartContext = execution.getExecutionStartContext();
+    ScopeInstantiationContext executionStartContext = execution.getScopeInstantiationContext();
 
     InstantiationStack instantiationStack = executionStartContext.getInstantiationStack();
     List<PvmActivity> activityStack = instantiationStack.getActivities();

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityInitStackNotifyListenerReturn.java
Patch:
@@ -19,7 +19,7 @@
 import org.camunda.bpm.engine.delegate.ExecutionListener;
 import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 import org.camunda.bpm.engine.impl.pvm.process.ScopeImpl;
-import org.camunda.bpm.engine.impl.pvm.runtime.ExecutionStartContext;
+import org.camunda.bpm.engine.impl.pvm.runtime.ScopeInstantiationContext;
 import org.camunda.bpm.engine.impl.pvm.runtime.InstantiationStack;
 import org.camunda.bpm.engine.impl.pvm.runtime.PvmExecutionImpl;
 
@@ -54,12 +54,13 @@ protected String getEventName() {
   protected void eventNotificationsCompleted(PvmExecutionImpl execution) {
     super.eventNotificationsCompleted(execution);
 
-    ExecutionStartContext startContext = execution.getExecutionStartContext();
+    ScopeInstantiationContext startContext = execution.getScopeInstantiationContext();
     InstantiationStack instantiationStack = startContext.getInstantiationStack();
 
     // if the stack has been instantiated
     if (instantiationStack.getActivities().isEmpty()) {
       // done
+      execution.disposeScopeInstantiationContext();
       return;
     }
     else {

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityStartCreateScope.java
Patch:
@@ -27,8 +27,7 @@ public class PvmAtomicOperationActivityStartCreateScope extends PvmAtomicOperati
 
   public boolean isAsync(PvmExecutionImpl execution) {
     PvmActivity activity = execution.getActivity();
-    return activity.isAsyncBefore()
-        && !execution.hasProcessInstanceStartContext();
+    return activity.isAsyncBefore();
   }
 
   public boolean isAsyncCapable() {
@@ -40,6 +39,7 @@ public String getCanonicalName() {
   }
 
   protected void scopeCreated(PvmExecutionImpl execution) {
+    execution.setIgnoreAsync(false);
     execution.performOperation(ACTIVITY_START);
   }
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/RestartProcessInstanceSyncTest.java
Patch:
@@ -442,7 +442,7 @@ public void shouldSetInitialVersionOfVariablesAsyncBeforeStartEvent() {
         .singleResult();
 
     assertNotNull(detail);
-    assertFalse(detail.isInitial());
+    assertTrue(detail.isInitial());
     assertEquals("var", detail.getVariableName());
     assertEquals("bar", detail.getTextValue());
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/entity/EntitySerializationTest.java
Patch:
@@ -80,7 +80,6 @@ public void testExecutionEntitySerialization() throws Exception {
    transitionImpl.addExecutionListener(new TestExecutionListener());
    execution.setTransition(transitionImpl);
 
-   execution.getProcessInstanceStartContext().setInitial(activityImpl);
    execution.setSuperExecution(new ExecutionEntity());
 
    execution.setActive(true);

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/mapper/JacksonConfigurator.java
Patch:
@@ -28,6 +28,7 @@
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.SerializationFeature;
+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
 
 @Provider
 @Produces({MediaType.APPLICATION_JSON, Hal.APPLICATION_HAL_JSON})
@@ -41,6 +42,8 @@ public static ObjectMapper configureObjectMapper(ObjectMapper mapper) {
     mapper.setDateFormat(dateFormat);
     mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
     mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
+    
+    mapper.registerModule(new JavaTimeModule());
 
     return mapper;
   }

File: qa/test-db-instance-migration/test-fixture-716/src/main/java/org/camunda/bpm/qa/upgrade/TestFixture.java
Patch:
@@ -19,6 +19,7 @@
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
+import org.camunda.bpm.qa.upgrade.externaltask.ExternalTaskFailureLogScenario;
 import org.camunda.bpm.qa.upgrade.job.JobFailureLogScenario;
 
 public class TestFixture {
@@ -36,6 +37,7 @@ public static void main(String[] args) {
     // register test scenarios
     ScenarioRunner runner = new ScenarioRunner(processEngine, ENGINE_VERSION);
 
+    runner.setupScenarios(ExternalTaskFailureLogScenario.class);
     runner.setupScenarios(JobFailureLogScenario.class);
 
     processEngine.close();

File: qa/test-db-instance-migration/test-fixture-716/src/main/java/org/camunda/bpm/qa/upgrade/TestFixture.java
Patch:
@@ -19,6 +19,7 @@
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
+import org.camunda.bpm.qa.upgrade.job.JobFailureLogScenario;
 
 public class TestFixture {
 
@@ -35,8 +36,7 @@ public static void main(String[] args) {
     // register test scenarios
     ScenarioRunner runner = new ScenarioRunner(processEngine, ENGINE_VERSION);
 
-    // example scenario setup
-    // runner.setupScenarios(ExampleScenario.class);
+    runner.setupScenarios(JobFailureLogScenario.class);
 
     processEngine.close();
   }

File: webapps/src/test/java/org/camunda/bpm/webapp/impl/security/filter/csrf/CsrfPreventionFilterAppPathTest.java
Patch:
@@ -29,7 +29,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.camunda.bpm.webapp.impl.security.filter.util.CsrfConstants.CSRF_PATH_FIELD_NAME;
-import static org.camunda.bpm.webapp.impl.security.filter.util.CsrfConstants.CSRF_SET_COOKIE_HEADER_NAME;
+import static org.camunda.bpm.webapp.impl.security.filter.util.CookieConstants.SET_COOKIE_HEADER_NAME;
 
 public class CsrfPreventionFilterAppPathTest extends CsrfPreventionFilterTest {
 
@@ -71,7 +71,7 @@ public void shouldCheckNonModifyingRequestTokenGenerationWithRootContextPathAndE
     applyFilter(nonModifyingRequest, response);
 
     // then
-    String cookieToken = response.getHeader(CSRF_SET_COOKIE_HEADER_NAME);
+    String cookieToken = response.getHeader(SET_COOKIE_HEADER_NAME);
     String headerToken = response.getHeader(CSRF_HEADER_NAME);
 
     assertThat(response.getStatus()).isEqualTo(Response.Status.OK.getStatusCode());

File: webapps/src/test/java/org/camunda/bpm/webapp/impl/security/filter/csrf/CsrfPreventionFilterTest.java
Patch:
@@ -43,7 +43,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.camunda.bpm.webapp.impl.security.filter.util.CsrfConstants.CSRF_PATH_FIELD_NAME;
-import static org.camunda.bpm.webapp.impl.security.filter.util.CsrfConstants.CSRF_SET_COOKIE_HEADER_NAME;
+import static org.camunda.bpm.webapp.impl.security.filter.util.CookieConstants.SET_COOKIE_HEADER_NAME;
 /**
  * @author Nikola Koevski
  */
@@ -119,7 +119,7 @@ protected void applyFilter(MockHttpServletRequest request, MockHttpServletRespon
   public void testNonModifyingRequestTokenGeneration() throws IOException, ServletException {
     MockHttpServletResponse response = performNonModifyingRequest(nonModifyingRequestUrl, new MockHttpSession());
 
-    String cookieToken = (String) response.getHeader(CSRF_SET_COOKIE_HEADER_NAME);
+    String cookieToken = (String) response.getHeader(SET_COOKIE_HEADER_NAME);
     String headerToken = (String) response.getHeader(CSRF_HEADER_NAME);
 
     Assert.assertNotNull(cookieToken);
@@ -149,7 +149,7 @@ public void testNonModifyingRequestTokenGenerationWithRootContextPath() throws I
     applyFilter(nonModifyingRequest, response);
 
     // then
-    String cookieToken = (String) response.getHeader(CSRF_SET_COOKIE_HEADER_NAME);
+    String cookieToken = (String) response.getHeader(SET_COOKIE_HEADER_NAME);
     String headerToken = (String) response.getHeader(CSRF_HEADER_NAME);
 
     Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -3815,13 +3815,11 @@ protected void parseBinding(Element callActivityElement, ActivityImpl activity,
   }
 
   protected void parseTenantId(Element callingActivityElement, ActivityImpl activity, BaseCallableElement callableElement, String attrName) {
-    ParameterValueProvider tenantIdValueProvider;
+    ParameterValueProvider tenantIdValueProvider = null;
 
     String tenantId = callingActivityElement.attributeNS(CAMUNDA_BPMN_EXTENSIONS_NS, attrName);
     if (tenantId != null && tenantId.length() > 0) {
       tenantIdValueProvider = createParameterValueProvider(tenantId, expressionManager);
-    } else {
-      tenantIdValueProvider = new DefaultCallableElementTenantIdProvider();
     }
 
     callableElement.setTenantIdProvider(tenantIdValueProvider);

File: engine/src/test/java/org/camunda/bpm/engine/test/api/repository/RepositoryServiceTest.java
Patch:
@@ -1339,7 +1339,7 @@ public void shouldNotTryToResolveDynamicCalledElementBinding() {
       Mockito.verify(callableElement, Mockito.never()).getDefinitionKey(Mockito.anyObject());
       Mockito.verify(callableElement, Mockito.never()).getVersion(Mockito.anyObject());
       Mockito.verify(callableElement, Mockito.never()).getVersionTag(Mockito.anyObject());
-      Mockito.verify(callableElement, Mockito.never()).getDefinitionTenantId(Mockito.anyObject());
+      Mockito.verify(callableElement, Mockito.never()).getDefinitionTenantId(Mockito.anyObject(), Mockito.anyString());
       Mockito.verify(callableElement, Mockito.times(1)).hasDynamicReferences();
     }
 

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/feel/BreakingScalaFeelBehaviorTest.java
Patch:
@@ -58,7 +58,6 @@ public void shouldCompareShortUntyped() {
       .hasSingleEntry(true);
   }
 
-  @Ignore("CAM-11269")
   @Test
   @DecisionResource(resource = "breaking_unary_test_boolean.dmn")
   public void shouldEqualBoolean() {
@@ -110,8 +109,8 @@ public void shouldUseSingleQuotesInStringLiterals() {
 
     // then
     thrown.expect(FeelException.class);
-    thrown.expectMessage("failed to parse expression ''Hello World'': " +
-      "Expected (\"not\" | positiveUnaryTests | unaryTests):1:1, found \"'Hello Wor\"");
+    thrown.expectMessage("FEEL/SCALA-01008 Error while evaluating expression: failed to parse expression ''Hello World'': "
+        + "Expected (acceptAnyInputValue | \"not\" | positiveUnaryTests):1:1, found \"'Hello Wor\"");
 
     // when
     engine.evaluateDecision(decision, Variables.createVariables().putValue("input", "Hello World"));

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/history/HistoricProcessInstanceRestServiceImpl.java
Patch:
@@ -39,6 +39,7 @@
 import org.camunda.bpm.engine.rest.history.HistoricProcessInstanceRestService;
 import org.camunda.bpm.engine.rest.sub.history.HistoricProcessInstanceResource;
 import org.camunda.bpm.engine.rest.sub.history.impl.HistoricProcessInstanceResourceImpl;
+import org.camunda.bpm.engine.rest.util.URLEncodingUtil;
 
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.MultivaluedMap;
@@ -144,7 +145,7 @@ else if (APPLICATION_CSV_TYPE.equals(mediaType) || TEXT_CSV_TYPE.equals(mediaTyp
         String csv = getReportResultAsCsv(uriInfo);
         return Response
             .ok(csv, mediaType)
-            .header("Content-Disposition", "attachment; filename=\"process-instance-report.csv\"")
+            .header("Content-Disposition", URLEncodingUtil.buildAttachmentValue("process-instance-report.csv"))
             .build();
       }
     }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/impl/VariableResponseProvider.java
Patch:
@@ -17,6 +17,7 @@
 package org.camunda.bpm.engine.rest.sub.impl;
 
 import org.camunda.bpm.engine.rest.exception.InvalidRequestException;
+import org.camunda.bpm.engine.rest.util.URLEncodingUtil;
 import org.camunda.bpm.engine.variable.type.ValueType;
 import org.camunda.bpm.engine.variable.value.BytesValue;
 import org.camunda.bpm.engine.variable.value.FileValue;
@@ -51,7 +52,7 @@ protected Response responseForFileVariable(FileValue fileValue) {
       type += "; charset=" + fileValue.getEncoding();
     }
     Object value = fileValue.getValue() == null ? "" : fileValue.getValue();
-    return Response.ok(value, type).header("Content-Disposition", "attachment; filename=\"" + fileValue.getFilename() + "\"").build();
+    return Response.ok(value, type).header("Content-Disposition", URLEncodingUtil.buildAttachmentValue(fileValue.getFilename())).build();
   }
 
   /**

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/impl/CaseDefinitionResourceImpl.java
Patch:
@@ -36,6 +36,7 @@
 import org.camunda.bpm.engine.rest.exception.InvalidRequestException;
 import org.camunda.bpm.engine.rest.exception.RestException;
 import org.camunda.bpm.engine.rest.sub.repository.CaseDefinitionResource;
+import org.camunda.bpm.engine.rest.util.URLEncodingUtil;
 import org.camunda.bpm.engine.runtime.CaseInstance;
 import org.camunda.bpm.engine.variable.VariableMap;
 
@@ -173,7 +174,7 @@ public Response getCaseDefinitionDiagram() {
       return Response.noContent().build();
     } else {
       String fileName = definition.getDiagramResourceName();
-      return Response.ok(caseDiagram).header("Content-Disposition", "attachment; filename=\"" + fileName + "\"")
+      return Response.ok(caseDiagram).header("Content-Disposition", URLEncodingUtil.buildAttachmentValue(fileName))
           .type(ProcessDefinitionResourceImpl.getMediaTypeForFileSuffix(fileName)).build();
     }
   }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/impl/DecisionDefinitionResourceImpl.java
Patch:
@@ -46,6 +46,7 @@
 import org.camunda.bpm.engine.rest.exception.InvalidRequestException;
 import org.camunda.bpm.engine.rest.exception.RestException;
 import org.camunda.bpm.engine.rest.sub.repository.DecisionDefinitionResource;
+import org.camunda.bpm.engine.rest.util.URLEncodingUtil;
 import org.camunda.bpm.engine.variable.VariableMap;
 import org.camunda.bpm.engine.variable.Variables;
 import org.camunda.bpm.engine.variable.value.TypedValue;
@@ -123,7 +124,7 @@ public Response getDecisionDefinitionDiagram() {
       return Response.noContent().build();
     } else {
       String fileName = definition.getDiagramResourceName();
-      return Response.ok(decisionDiagram).header("Content-Disposition", "attachment; filename=\"" + fileName + "\"")
+      return Response.ok(decisionDiagram).header("Content-Disposition",URLEncodingUtil.buildAttachmentValue(fileName))
           .type(ProcessDefinitionResourceImpl.getMediaTypeForFileSuffix(fileName)).build();
     }
   }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/impl/DecisionRequirementsDefinitionResourceImpl.java
Patch:
@@ -34,6 +34,7 @@
 import org.camunda.bpm.engine.rest.exception.InvalidRequestException;
 import org.camunda.bpm.engine.rest.exception.RestException;
 import org.camunda.bpm.engine.rest.sub.repository.DecisionRequirementsDefinitionResource;
+import org.camunda.bpm.engine.rest.util.URLEncodingUtil;
 
 /**
  * 
@@ -107,7 +108,7 @@ public Response getDecisionRequirementsDefinitionDiagram() {
       return Response.noContent().build();
     } else {
       String fileName = definition.getDiagramResourceName();
-      return Response.ok(decisionRequirementsDiagram).header("Content-Disposition", "attachment; filename=\"" + fileName + "\"")
+      return Response.ok(decisionRequirementsDiagram).header("Content-Disposition", URLEncodingUtil.buildAttachmentValue(fileName))
           .type(ProcessDefinitionResourceImpl.getMediaTypeForFileSuffix(fileName)).build();
     }
   }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/impl/DeploymentResourcesResourceImpl.java
Patch:
@@ -32,6 +32,7 @@
 import org.camunda.bpm.engine.rest.dto.repository.DeploymentResourceDto;
 import org.camunda.bpm.engine.rest.exception.InvalidRequestException;
 import org.camunda.bpm.engine.rest.sub.repository.DeploymentResourcesResource;
+import org.camunda.bpm.engine.rest.util.URLEncodingUtil;
 
 /**
  * @author Sebastian Menski
@@ -145,7 +146,7 @@ public Response getDeploymentResourceData(String resourceId) {
 
       return Response
           .ok(resourceAsStream, mediaType)
-          .header("Content-Disposition", "attachment; filename=\"" + filename + "\"")
+          .header("Content-Disposition", URLEncodingUtil.buildAttachmentValue(filename))
           .build();
     }
     else {

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/impl/ProcessDefinitionResourceImpl.java
Patch:
@@ -59,6 +59,7 @@
 import org.camunda.bpm.engine.rest.util.ApplicationContextPathUtil;
 import org.camunda.bpm.engine.rest.util.ContentTypeUtil;
 import org.camunda.bpm.engine.rest.util.EncodingUtil;
+import org.camunda.bpm.engine.rest.util.URLEncodingUtil;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.runtime.ProcessInstanceWithVariables;
 import org.camunda.bpm.engine.runtime.ProcessInstantiationBuilder;
@@ -280,7 +281,7 @@ public Response getProcessDefinitionDiagram() {
     } else {
       String fileName = definition.getDiagramResourceName();
       return Response.ok(processDiagram)
-          .header("Content-Disposition", "attachment; filename=\"" + fileName + "\"")
+          .header("Content-Disposition", URLEncodingUtil.buildAttachmentValue(fileName))
           .type(getMediaTypeForFileSuffix(fileName)).build();
     }
   }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/task/impl/TaskReportResourceImpl.java
Patch:
@@ -21,6 +21,7 @@
 import org.camunda.bpm.engine.rest.dto.task.TaskCountByCandidateGroupResultDto;
 import org.camunda.bpm.engine.rest.exception.InvalidRequestException;
 import org.camunda.bpm.engine.rest.sub.task.TaskReportResource;
+import org.camunda.bpm.engine.rest.util.URLEncodingUtil;
 import org.camunda.bpm.engine.task.TaskCountByCandidateGroupResult;
 
 import javax.ws.rs.core.MediaType;
@@ -56,7 +57,7 @@ else if (APPLICATION_CSV_TYPE.equals(mediaType) || TEXT_CSV_TYPE.equals(mediaTyp
         String csv = getReportResultAsCsv();
         return Response
           .ok(csv, mediaType)
-          .header("Content-Disposition", "attachment; filename=\"task-count-by-candidate-group.csv\"")
+          .header("Content-Disposition", URLEncodingUtil.buildAttachmentValue("task-count-by-candidate-group.csv"))
           .build();
       }
     }

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/VariableInstanceRestServiceInteractionTest.java
Patch:
@@ -316,7 +316,9 @@ public void testGetBinaryDataForFileVariable() {
     Response response = given().pathParam("id", MockProvider.EXAMPLE_VARIABLE_INSTANCE_ID)
     .then().expect().statusCode(Status.OK.getStatusCode())
     .and()
-      .header("Content-Disposition", "attachment; filename=\"" + filename + "\"")
+      .header("Content-Disposition", "attachment; " +
+              "filename=\"" + filename + "\"; " +
+              "filename*=UTF-8''" + filename)
     .and()
       .body(is(equalTo(new String(byteContent))))
     .when().get(VARIABLE_INSTANCE_BINARY_DATA_URL);

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricDetailRestServiceInteractionTest.java
Patch:
@@ -315,7 +315,9 @@ public void testBinaryDataForFileVariable() {
       .statusCode(Status.OK.getStatusCode())
       . body(is(equalTo(new String(byteContent))))
       .and()
-        .header("Content-Disposition", "attachment; filename=\"" + filename + "\"")
+        .header("Content-Disposition", "attachment; " +
+                "filename=\"" + filename + "\"; " +
+                "filename*=UTF-8''" + filename)
     .when().get(VARIABLE_INSTANCE_BINARY_DATA_URL);
     //due to some problems with wildfly we gotta check this separately
     String contentType = response.getContentType();

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricVariableInstanceRestServiceInteractionTest.java
Patch:
@@ -293,7 +293,9 @@ public void testGetBinaryDataForFileVariable() {
       .statusCode(Status.OK.getStatusCode())
     .and()
       .body(is(equalTo(new String(byteContent))))
-      .header("Content-Disposition", "attachment; filename=\"" + filename + "\"")
+      .header("Content-Disposition", "attachment; " +
+              "filename=\"" + filename + "\"; " +
+              "filename*=UTF-8''" + filename)
     .when().get(VARIABLE_INSTANCE_BINARY_DATA_URL);
     //due to some problems with wildfly we gotta check this separately
     String contentType = response.getContentType();

File: engine/src/main/java/org/camunda/bpm/engine/batch/Batch.java
Patch:
@@ -48,6 +48,7 @@ public interface Batch {
   String TYPE_DECISION_SET_REMOVAL_TIME = "decision-set-removal-time";
   String TYPE_BATCH_SET_REMOVAL_TIME = "batch-set-removal-time";
   String TYPE_SET_VARIABLES = "set-variables";
+  String TYPE_CORRELATE_MESSAGE = "correlate-message";
 
   /**
    * @return the id of the batch

File: engine/src/main/java/org/camunda/bpm/engine/impl/batch/BatchEntity.java
Patch:
@@ -340,7 +340,8 @@ public void delete(boolean cascadeToHistory, boolean deleteJobs) {
     CommandContext commandContext = Context.getCommandContext();
 
     if (Batch.TYPE_SET_VARIABLES.equals(type) ||
-        Batch.TYPE_PROCESS_INSTANCE_MIGRATION.equals(type)) {
+        Batch.TYPE_PROCESS_INSTANCE_MIGRATION.equals(type) ||
+        Batch.TYPE_CORRELATE_MESSAGE.equals(type)) {
       deleteVariables(commandContext);
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -413,6 +413,7 @@ public abstract class ProcessEngineConfigurationImpl extends ProcessEngineConfig
 
   public static final int DEFAULT_INVOCATIONS_PER_BATCH_JOB = 1;
 
+  protected static final Map<Object, Object> DEFAULT_BEANS_MAP = new HashMap<>();
 
   protected static final String PRODUCT_NAME = "Camunda BPM Runtime";
 
@@ -2584,7 +2585,7 @@ protected void initJpa() {
 
   protected void initBeans() {
     if (beans == null) {
-      beans = new HashMap<>();
+      beans = DEFAULT_BEANS_MAP;
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/type/DateFormType.java
Patch:
@@ -79,7 +79,7 @@ else if(value instanceof String) {
 
   public TypedValue convertToFormValue(TypedValue modelValue) {
     if(modelValue.getValue() == null) {
-      return Variables.stringValue(null, modelValue.isTransient());
+      return Variables.stringValue("", modelValue.isTransient());
     } else if(modelValue.getType() == ValueType.DATE) {
       return Variables.stringValue(dateFormat.format(modelValue.getValue()), modelValue.isTransient());
     }

File: quarkus-extension/engine/deployment/src/test/java/org/camunda/bpm/quarkus/engine/test/BusinessProcessContextTest.java
Patch:
@@ -21,6 +21,7 @@
 import io.quarkus.arc.InjectableInstance;
 import io.quarkus.test.QuarkusUnitTest;
 import org.camunda.bpm.engine.cdi.annotation.BusinessProcessScoped;
+import org.camunda.bpm.quarkus.engine.test.helper.ProcessEngineAwareExtension;
 import org.jboss.shrinkwrap.api.ShrinkWrap;
 import org.jboss.shrinkwrap.api.spec.JavaArchive;
 import org.junit.jupiter.api.Test;
@@ -34,7 +35,7 @@
 public class BusinessProcessContextTest {
 
   @RegisterExtension
-  protected static final QuarkusUnitTest unitTest = new QuarkusUnitTest()
+  protected static final QuarkusUnitTest unitTest = new ProcessEngineAwareExtension()
       .withConfigurationResource("application.properties")
       .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class));
 

File: quarkus-extension/engine/deployment/src/test/java/org/camunda/bpm/quarkus/engine/test/CamundaEngineConfigTest.java
Patch:
@@ -22,6 +22,7 @@
 
 import io.quarkus.test.QuarkusUnitTest;
 import org.camunda.bpm.quarkus.engine.extension.impl.CamundaEngineConfig;
+import org.camunda.bpm.quarkus.engine.test.helper.ProcessEngineAwareExtension;
 import org.jboss.shrinkwrap.api.ShrinkWrap;
 import org.jboss.shrinkwrap.api.spec.JavaArchive;
 import org.junit.jupiter.api.Test;
@@ -30,7 +31,7 @@
 public class CamundaEngineConfigTest {
 
   @RegisterExtension
-  static final QuarkusUnitTest unitTest = new QuarkusUnitTest()
+  static final QuarkusUnitTest unitTest = new ProcessEngineAwareExtension()
       .withConfigurationResource("job-executor-application.properties")
       .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class));
 

File: quarkus-extension/engine/deployment/src/test/java/org/camunda/bpm/quarkus/engine/test/EmbeddedProcessEngineTest.java
Patch:
@@ -22,6 +22,7 @@
 
 import io.quarkus.test.QuarkusUnitTest;
 import org.camunda.bpm.engine.ProcessEngine;
+import org.camunda.bpm.quarkus.engine.test.helper.ProcessEngineAwareExtension;
 import org.jboss.shrinkwrap.api.ShrinkWrap;
 import org.jboss.shrinkwrap.api.spec.JavaArchive;
 import org.junit.jupiter.api.Test;
@@ -30,7 +31,7 @@
 public class EmbeddedProcessEngineTest {
 
   @RegisterExtension
-  protected static final QuarkusUnitTest unitTest = new QuarkusUnitTest()
+  protected static final QuarkusUnitTest unitTest = new ProcessEngineAwareExtension()
       .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class));
 
   @Inject

File: quarkus-extension/engine/deployment/src/test/java/org/camunda/bpm/quarkus/engine/test/id/DefaultIdGeneratorTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.impl.persistence.StrongUuidGenerator;
 import org.camunda.bpm.engine.task.Task;
+import org.camunda.bpm.quarkus.engine.test.helper.ProcessEngineAwareExtension;
 import org.jboss.shrinkwrap.api.ShrinkWrap;
 import org.jboss.shrinkwrap.api.spec.JavaArchive;
 import org.junit.jupiter.api.Test;
@@ -34,7 +35,7 @@
 public class DefaultIdGeneratorTest {
 
   @RegisterExtension
-  static final QuarkusUnitTest unitTest = new QuarkusUnitTest()
+  static final QuarkusUnitTest unitTest = new ProcessEngineAwareExtension()
       .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class));
 
 

File: quarkus-extension/engine/deployment/src/test/java/org/camunda/bpm/quarkus/engine/test/lookup/ProgrammaticBeanLookupTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.camunda.bpm.quarkus.engine.test.lookup;
 
 import io.quarkus.test.QuarkusUnitTest;
+import org.camunda.bpm.quarkus.engine.test.helper.ProcessEngineAwareExtension;
 import org.jboss.shrinkwrap.api.ShrinkWrap;
 import org.jboss.shrinkwrap.api.spec.JavaArchive;
 import org.junit.jupiter.api.Disabled;
@@ -39,7 +40,7 @@
 public class ProgrammaticBeanLookupTest {
 
   @RegisterExtension
-  static final QuarkusUnitTest unitTest = new QuarkusUnitTest()
+  static final QuarkusUnitTest unitTest = new ProcessEngineAwareExtension()
       .withConfigurationResource("application.properties")
       .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)
           .addClass(TestBean.class)

File: quarkus-extension/engine/qa/src/test/java/org/camunda/bpm/engine/cdi/test/ArquillianAutomaticDeployment.java
Patch:
@@ -28,7 +28,7 @@ public class ArquillianAutomaticDeployment implements AutomaticDeployment {
   @Override
   public DeploymentConfiguration generateDeploymentScenario(TestClass testClass) {
     JavaArchive jar = ShrinkWrap.create(JavaArchive.class)
-        .addPackages(true, Package.getPackage("org.camunda.bpm.engine.cdi.test"))
+        .addPackages(true, this.getClass().getPackage())
         .addAsResource("application.properties");
 
     return new DeploymentContentBuilder(jar).get();

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -585,6 +585,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement(MSSQL, "selectEventSubscriptionsByNameAndExecution", "selectEventSubscriptionsByNameAndExecution_mssql");
     addDatabaseSpecificStatement(MSSQL, "selectEventSubscriptionsByExecutionAndType", "selectEventSubscriptionsByExecutionAndType_mssql");
     addDatabaseSpecificStatement(MSSQL, "selectHistoricDecisionInstancesByNativeQuery", "selectHistoricDecisionInstancesByNativeQuery_mssql_or_db2");
+    addDatabaseSpecificStatement(MSSQL, "deleteByteArraysByRemovalTime", "deleteByteArraysByRemovalTime_mssql");
 
     // related to CAM-13094
     addDatabaseSpecificStatement(MSSQL, "updateAttachmentsByRootProcessInstanceId", "updateAttachmentsByRootProcessInstanceId_mssql");

File: quarkus-extension/engine/runtime/src/main/java/org/camunda/bpm/quarkus/engine/extension/impl/QuarkusProcessEngineConfiguration.java
Patch:
@@ -17,11 +17,13 @@
 package org.camunda.bpm.quarkus.engine.extension.impl;
 
 import org.camunda.bpm.engine.cdi.CdiStandaloneProcessEngineConfiguration;
+import org.camunda.bpm.engine.impl.persistence.StrongUuidGenerator;
 
 // TODO: extend CdiJtaProcessEngineConfiguration when Agroal support is added
 public class QuarkusProcessEngineConfiguration extends CdiStandaloneProcessEngineConfiguration {
 
   public QuarkusProcessEngineConfiguration() {
     setJobExecutorActivate(true);
+    setIdGenerator(new StrongUuidGenerator());
   }
 }
\ No newline at end of file

File: quarkus-extension/engine/deployment/src/main/java/org/camunda/bpm/quarkus/engine/extension/deployment/impl/CamundaEngineProcessor.java
Patch:
@@ -42,6 +42,7 @@
 import org.camunda.bpm.engine.cdi.impl.context.RequestScopedAssociation;
 import org.camunda.bpm.engine.cdi.jsf.TaskForm;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
+import org.camunda.bpm.quarkus.engine.extension.impl.CamundaEngineConfig;
 import org.camunda.bpm.quarkus.engine.extension.impl.CamundaEngineRecorder;
 import org.camunda.bpm.quarkus.engine.extension.impl.InjectableBusinessProcessContext;
 import org.jboss.jandex.DotName;
@@ -101,11 +102,12 @@ protected void cdiConfig(CamundaEngineRecorder recorder, BeanContainerBuildItem
   @Record(RUNTIME_INIT)
   protected void processEngineConfiguration(CamundaEngineRecorder recorder,
                                             BeanContainerBuildItem beanContainer,
+                                            CamundaEngineConfig camundaEngineConfig,
                                             BuildProducer<ProcessEngineConfigurationBuildItem> configurationProducer) {
 
     recorder.configureProcessEngineCdiBeans(beanContainer.getValue());
     RuntimeValue<ProcessEngineConfigurationImpl> processEngineConfiguration =
-        recorder.createProcessEngineConfiguration(beanContainer.getValue());
+        recorder.createProcessEngineConfiguration(beanContainer.getValue(), camundaEngineConfig);
     configurationProducer.produce(new ProcessEngineConfigurationBuildItem(processEngineConfiguration));
   }
 

File: quarkus-extension/engine/qa/src/test/java/org/camunda/bpm/engine/cdi/test/ArquillianAutomaticDeployment.java
Patch:
@@ -28,7 +28,8 @@ public class ArquillianAutomaticDeployment implements AutomaticDeployment {
   @Override
   public DeploymentConfiguration generateDeploymentScenario(TestClass testClass) {
     JavaArchive jar = ShrinkWrap.create(JavaArchive.class)
-        .addPackages(true, Package.getPackage("org.camunda.bpm.engine.cdi.test"));
+        .addPackages(true, Package.getPackage("org.camunda.bpm.engine.cdi.test"))
+        .addAsResource("application.properties");
 
     return new DeploymentContentBuilder(jar).get();
   }

File: engine-cdi/src/test/java/org/camunda/bpm/engine/cdi/test/impl/util/InjectCustomProcessEngineTest.java
Patch:
@@ -43,7 +43,7 @@ public class InjectCustomProcessEngineTest extends CdiProcessEngineTestCase {
   @Before
   public void init() {
     processEngine = TestHelper.getProcessEngine("org/camunda/bpm/engine/cdi/test/impl/util/camunda.cfg.xml");
-    ProcessEngine defaultProcessEngine = BpmPlatform.getProcessEngineService().getDefaultProcessEngine();
+    defaultProcessEngine = BpmPlatform.getProcessEngineService().getDefaultProcessEngine();
 
     if (defaultProcessEngine != null) {
       RuntimeContainerDelegate.INSTANCE.get().unregisterProcessEngine(defaultProcessEngine);

File: engine-cdi/src/test/java/org/camunda/bpm/engine/cdi/test/impl/util/InjectDefaultProcessEngineTest.java
Patch:
@@ -43,7 +43,7 @@ public class InjectDefaultProcessEngineTest extends CdiProcessEngineTestCase {
   @Before
   public void init() {
     processEngine = TestHelper.getProcessEngine("activiti.cfg.xml");
-    ProcessEngine defaultProcessEngine = BpmPlatform.getProcessEngineService().getDefaultProcessEngine();
+    defaultProcessEngine = BpmPlatform.getProcessEngineService().getDefaultProcessEngine();
 
     if (defaultProcessEngine != null) {
       RuntimeContainerDelegate.INSTANCE.get().unregisterProcessEngine(defaultProcessEngine);

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/CdiBeanResolutionOnDeploymentTest.java
Patch:
@@ -36,7 +36,6 @@
  * @author Thorben Lindhauer
  *
  */
-@Ignore
 @RunWith(Arquillian.class)
 public class CdiBeanResolutionOnDeploymentTest extends AbstractFoxPlatformIntegrationTest {
 

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/DeploymentRestServiceImpl.java
Patch:
@@ -141,7 +141,7 @@ private DeploymentBuilder extractDeploymentInformation(MultipartFormData payload
     }
 
     FormPart deploymentActivationTime = payload.getNamedPart(DEPLOYMENT_ACTIVATION_TIME);
-    if (deploymentActivationTime != null) {
+    if (deploymentActivationTime != null && !deploymentActivationTime.getTextContent().isEmpty()) {
       deploymentBuilder.activateProcessDefinitionsOn(DateTimeUtil.parseDate(deploymentActivationTime.getTextContent()));
     }
 

File: engine/src/main/java/org/camunda/bpm/application/impl/ProcessApplicationScriptEnvironment.java
Patch:
@@ -25,6 +25,7 @@
 
 import org.camunda.bpm.application.ProcessApplicationInterface;
 import org.camunda.bpm.engine.impl.scripting.ExecutableScript;
+import org.camunda.bpm.engine.impl.scripting.engine.DefaultScriptEngineResolver;
 import org.camunda.bpm.engine.impl.scripting.engine.ScriptEngineResolver;
 
 /**
@@ -36,7 +37,7 @@ public class ProcessApplicationScriptEnvironment {
   protected ProcessApplicationInterface processApplication;
 
   protected ScriptEngineResolver processApplicationScriptEngineResolver;
-  protected Map<String, List<ExecutableScript>> environmentScripts = new HashMap<String, List<ExecutableScript>>();
+  protected Map<String, List<ExecutableScript>> environmentScripts = new HashMap<>();
 
   public ProcessApplicationScriptEnvironment(ProcessApplicationInterface processApplication) {
     this.processApplication = processApplication;
@@ -58,7 +59,7 @@ public ScriptEngine getScriptEngineForName(String scriptEngineName, boolean cach
     if(processApplicationScriptEngineResolver == null) {
       synchronized (this) {
         if(processApplicationScriptEngineResolver == null) {
-          processApplicationScriptEngineResolver = new ScriptEngineResolver(new ScriptEngineManager(getProcessApplicationClassloader()));
+          processApplicationScriptEngineResolver = new DefaultScriptEngineResolver(new ScriptEngineManager(getProcessApplicationClassloader()));
         }
       }
     }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/GroovyScriptEngineSupportTest.java
Patch:
@@ -28,7 +28,7 @@ public class GroovyScriptEngineSupportTest extends AbstractScriptEngineSupportTe
   public static WebArchive createProcessApplication() {
     return initWebArchiveDeployment()
       .addClass(AbstractScriptEngineSupportTest.class)
-      .addAsResource(createScriptTaskProcess("groovy", EXAMPLE_SCRIPT), "process.bpmn20.xml");
+      .addAsResource(createScriptTaskProcess("groovy", EXAMPLE_SCRIPT, EXAMPLE_SPIN_SCRIPT), "process.bpmn20.xml");
   }
 
 }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/JavascriptScriptEngineSupportGraalJsTest.java
Patch:
@@ -25,7 +25,7 @@ public class JavascriptScriptEngineSupportGraalJsTest extends AbstractScriptEngi
   public static WebArchive createProcessApplication() {
     return initWebArchiveDeployment()
       .addClass(AbstractScriptEngineSupportTest.class)
-      .addAsResource(createScriptTaskProcess("graal.js", EXAMPLE_SCRIPT), "process.bpmn20.xml");
+      .addAsResource(createScriptTaskProcess("graal.js", EXAMPLE_SCRIPT, EXAMPLE_SPIN_SCRIPT), "process.bpmn20.xml");
   }
 
 }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/JavascriptScriptEngineSupportNashornTest.java
Patch:
@@ -25,7 +25,7 @@ public class JavascriptScriptEngineSupportNashornTest extends AbstractScriptEngi
   public static WebArchive createProcessApplication() {
     return initWebArchiveDeployment()
       .addClass(AbstractScriptEngineSupportTest.class)
-      .addAsResource(createScriptTaskProcess("nashorn", EXAMPLE_SCRIPT), "process.bpmn20.xml");
+      .addAsResource(createScriptTaskProcess("nashorn", EXAMPLE_SCRIPT, EXAMPLE_SPIN_SCRIPT), "process.bpmn20.xml");
   }
 
 }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/JavascriptScriptEngineSupportTest.java
Patch:
@@ -28,7 +28,7 @@ public class JavascriptScriptEngineSupportTest extends AbstractScriptEngineSuppo
   public static WebArchive createProcessApplication() {
     return initWebArchiveDeployment()
       .addClass(AbstractScriptEngineSupportTest.class)
-      .addAsResource(createScriptTaskProcess("javascript", EXAMPLE_SCRIPT), "process.bpmn20.xml");
+      .addAsResource(createScriptTaskProcess("javascript", EXAMPLE_SCRIPT, EXAMPLE_SPIN_SCRIPT), "process.bpmn20.xml");
   }
 
 }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/PythonScriptEngineSupportTest.java
Patch:
@@ -28,7 +28,7 @@ public class PythonScriptEngineSupportTest extends AbstractScriptEngineSupportTe
   public static WebArchive createProcessApplication() {
     return initWebArchiveDeployment()
       .addClass(AbstractScriptEngineSupportTest.class)
-      .addAsResource(createScriptTaskProcess("python", EXAMPLE_SCRIPT), "process.bpmn20.xml");
+      .addAsResource(createScriptTaskProcess("python", EXAMPLE_SCRIPT, EXAMPLE_SPIN_SCRIPT), "process.bpmn20.xml");
   }
 
 }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/RubyScriptEngineSupportTest.java
Patch:
@@ -28,7 +28,7 @@ public class RubyScriptEngineSupportTest extends AbstractScriptEngineSupportTest
   public static WebArchive createProcessApplication() {
     return initWebArchiveDeployment()
       .addClass(AbstractScriptEngineSupportTest.class)
-      .addAsResource(createScriptTaskProcess("ruby", "$" + EXAMPLE_SCRIPT), "process.bpmn20.xml");
+      .addAsResource(createScriptTaskProcess("ruby", "$" + EXAMPLE_SCRIPT, "$" + EXAMPLE_SPIN_SCRIPT), "process.bpmn20.xml");
   }
 
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/UpdateProcessInstancesSuspendStateAsyncTest.java
Patch:
@@ -42,7 +42,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.RuleChain;
-import org.python.google.common.collect.Sets;
+import com.google.common.collect.Sets;
 
 
 public class UpdateProcessInstancesSuspendStateAsyncTest {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/UpdateProcessInstancesSuspendStateTest.java
Patch:
@@ -36,7 +36,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.RuleChain;
-import org.python.google.common.collect.Sets;
+import com.google.common.collect.Sets;
 
 public class UpdateProcessInstancesSuspendStateTest {
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/AbstractScriptEngineSupportTest.java
Patch:
@@ -35,7 +35,7 @@
 public abstract class AbstractScriptEngineSupportTest extends AbstractFoxPlatformIntegrationTest {
 
   public static final String PROCESS_ID = "testProcess";
-  public static final String EXAMPLE_SCRIPT = "execution.setVariable('foo', S('<bar/>').name())";
+  public static final String EXAMPLE_SCRIPT = "execution.setVariable('foo', 'bar')";
 
   public String processInstanceId;
 

File: engine/src/main/java/org/camunda/bpm/engine/test/ProcessEngineRule.java
Patch:
@@ -85,7 +85,7 @@
  * The processEngineRule also lets you
  * {@link ProcessEngineRule#setCurrentTime(Date) set the current time used by
  * the process engine}. This can be handy to control the exact time that is used
- * by the engine in order to verify e.g. e.g. due dates of timers. Or start, end
+ * by the engine in order to verify e.g., due dates of timers. Or start, end
  * and duration times in the history service. In the tearDown, the internal
  * clock will automatically be reset to use the current system time rather then
  * the time that was set during a test method. In other words, you don't have to

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/ExecuteJobsRunnable.java
Patch:
@@ -127,9 +127,7 @@ protected void unlockJob(String nextJobId, CommandExecutor commandExecutor) {
    * @return the classloader before the switch to return it back after the job execution
    */
   protected ClassLoader switchClassLoader() {
-    ClassLoader classLoaderBeforeExecution = Thread.currentThread().getContextClassLoader();
-    Thread.currentThread().setContextClassLoader(ProcessEngine.class.getClassLoader());
-    return classLoaderBeforeExecution;
+    return ClassLoaderUtil.switchToProcessEngineClassloader();
   }
 
 }

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/TaskRestServiceInteractionTest.java
Patch:
@@ -3259,7 +3259,7 @@ public void testGetDeployedTaskForm() {
   public void testGetDeployedTaskFormJson() {
     InputStream deployedFormMock = new ByteArrayInputStream("Test".getBytes());
     when(formServiceMock.getDeployedTaskForm(anyString())).thenReturn(deployedFormMock);
-    when(formServiceMock.getTaskFormKey(anyString(), anyString())).thenReturn("test.form");
+    when(mockTask.getFormKey()).thenReturn("test.form");
 
     given()
       .pathParam("id", MockProvider.EXAMPLE_TASK_ID)

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/deploy/cache/DeploymentCache.java
Patch:
@@ -309,13 +309,13 @@ public void setDeployers(List<Deployer> deployers) {
 
   public void removeDeployment(String deploymentId) {
     bpmnModelInstanceCache.removeAllDefinitionsByDeploymentId(deploymentId);
-    if(Context.getProcessEngineConfiguration().isCmmnEnabled()) {
+    if (Context.getProcessEngineConfiguration().isCmmnEnabled()) {
       cmmnModelInstanceCache.removeAllDefinitionsByDeploymentId(deploymentId);
     }
-    if(Context.getProcessEngineConfiguration().isDmnEnabled()) {
+    if (Context.getProcessEngineConfiguration().isDmnEnabled()) {
       dmnModelInstanceCache.removeAllDefinitionsByDeploymentId(deploymentId);
+      removeAllDecisionRequirementsDefinitionsByDeploymentId(deploymentId);
     }
-    removeAllDecisionRequirementsDefinitionsByDeploymentId(deploymentId);
   }
 
   protected void removeAllDecisionRequirementsDefinitionsByDeploymentId(String deploymentId) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -1658,8 +1658,8 @@ public void addIdentityLinkChanges(String type, String oldProperty, String newPr
   }
 
   @Override
-  public void setVariablesLocal(Map<String, ?> variables) {
-    super.setVariablesLocal(variables);
+  public void setVariablesLocal(Map<String, ?> variables, boolean skipJavaSerializationFormatCheck) {
+    super.setVariablesLocal(variables, skipJavaSerializationFormatCheck);
     Context.getCommandContext().getDbEntityManager().forceUpdate(this);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/runtime/EventSubscriptionQuery.java
Patch:
@@ -32,7 +32,7 @@ public interface EventSubscriptionQuery extends Query<EventSubscriptionQuery, Ev
   EventSubscriptionQuery eventName(String eventName);
 
   /** Only select subscriptions for events with the given type. "message" selects message event subscriptions,
-   * "signal" selects signal event subscriptions, "compensation" selects compensation event subscriptions,
+   * "signal" selects signal event subscriptions, "compensate" selects compensation event subscriptions,
    * "conditional" selects conditional event subscriptions.**/
   EventSubscriptionQuery eventType(String eventType);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/MigratingActivityInstance.java
Patch:
@@ -588,6 +588,7 @@ protected void becomeNonScope() {
 
       parentExecution.setActivity(representativeExecution.getActivity());
       parentExecution.setActivityInstanceId(representativeExecution.getActivityInstanceId());
+      parentExecution.setActive(representativeExecution.isActive());
 
       representativeExecution.remove();
       representativeExecution = parentExecution;

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/EnginePersistenceLogger.java
Patch:
@@ -837,11 +837,12 @@ public void errorFetchingTelemetryInitialMessagePropertyInDatabase(Exception exc
         "Error while fetching the telemetry initial message status property from the database: {}", exception.getMessage());
   }
 
-	
+
   public void logTaskWithoutExecution(String taskId) {
     logDebug("108",
       "Execution of external task {} is null. This indicates that the task was concurrently completed or deleted. "
       + "It is not returned by the current fetch and lock command.",
       taskId);
   }
+
 }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/task/impl/TaskResourceImpl.java
Patch:
@@ -426,8 +426,8 @@ public void handleEscalation(TaskEscalationDto dto) {
 
     try {
       taskService.handleEscalation(taskId, dto.getEscalationCode(), VariableValueDto.toMap(dto.getVariables(), engine, objectMapper));
-    } catch (NullValueException e) {
-      throw new RestException(Status.NOT_FOUND, e, "Task with id " + taskId + " does not exist");
+    } catch (NotFoundException e) {
+      throw new RestException(Status.NOT_FOUND, e, e.getMessage());
     } catch (BadUserRequestException e) {
       throw new RestException(Status.BAD_REQUEST, e, e.getMessage());
     }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/identity/impl/GroupMembersResourceImpl.java
Patch:
@@ -66,8 +66,6 @@ public ResourceOptionsDto availableOperations(UriInfo context) {
         .path(PATH)
         .build();
 
-    dto.addReflexiveLink(uri, HttpMethod.GET, "self");
-
     if (!identityService.isReadOnly() && isAuthorized(DELETE)) {
       dto.addReflexiveLink(uri, HttpMethod.DELETE, "delete");
     }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/identity/impl/TenantGroupMembersResourceImpl.java
Patch:
@@ -63,8 +63,6 @@ public ResourceOptionsDto availableOperations(UriInfo context) {
         .path(TenantGroupMembersResource.PATH)
         .build();
 
-    dto.addReflexiveLink(uri, HttpMethod.GET, "self");
-
     if (!identityService.isReadOnly() && isAuthorized(DELETE)) {
       dto.addReflexiveLink(uri, HttpMethod.DELETE, "delete");
     }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/identity/impl/TenantUserMembersResourceImpl.java
Patch:
@@ -63,8 +63,6 @@ public ResourceOptionsDto availableOperations(UriInfo context) {
         .path(TenantUserMembersResource.PATH)
         .build();
 
-    dto.addReflexiveLink(uri, HttpMethod.GET, "self");
-
     if (!identityService.isReadOnly() && isAuthorized(DELETE)) {
       dto.addReflexiveLink(uri, HttpMethod.DELETE, "delete");
     }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/telemetry/TelemetryConnectPluginTest.java
Patch:
@@ -162,7 +162,7 @@ protected Data createDataToSend() {
 
     internals.setWebapps(Collections.emptySet());
     Product product = new Product("Runtime", "7.14.0", "special", internals);
-    Data data = new Data("f5b19e2e-b49a-11ea-b3de-0242ac130004", product);
+    Data data = new Data("cb07ce31-c8e3-4f5f-94c2-1b28175c2022", product);
     return data;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -2745,7 +2745,7 @@ protected void initTelemetryData() {
     }
 
     ProcessEngineDetails engineInfo = ParseUtil
-        .parseProcessEngineVersion(ProcessEngineConfigurationImpl.class.getPackage().getImplementationVersion(), true);
+        .parseProcessEngineVersion(true);
 
     Product product = new Product(PRODUCT_NAME, engineInfo.getVersion(), engineInfo.getEdition(), internals);
 

File: spring-boot-starter/starter-client/spring/src/main/java/org/camunda/bpm/client/spring/impl/subscription/SpringTopicSubscriptionImpl.java
Patch:
@@ -153,6 +153,7 @@ public boolean isOpen() {
   public void closeInternally() {
     if (topicSubscription != null) {
       topicSubscription.close();
+      topicSubscription = null;
 
       String topicName = subscriptionConfiguration.getTopicName();
       LOG.closed(topicName);

File: spring-boot-starter/starter-client/spring-boot/src/main/java/org/camunda/bpm/client/spring/boot/starter/impl/ClientAutoConfiguration.java
Patch:
@@ -29,12 +29,12 @@
 public class ClientAutoConfiguration {
 
   @Bean
-  public SubscriptionPostProcessor subscriptionPostprocessor() {
+  public static SubscriptionPostProcessor subscriptionPostprocessor() {
     return new SubscriptionPostProcessor(PropertiesAwareSpringTopicSubscription.class);
   }
 
   @Bean
-  public ClientPostProcessor clientPostProcessor() {
+  public static ClientPostProcessor clientPostProcessor() {
     return new ClientPostProcessor(PropertiesAwareClientFactory.class);
   }
 

File: spring-boot-starter/starter-client/spring/src/main/java/org/camunda/bpm/client/spring/impl/PostProcessorConfiguration.java
Patch:
@@ -27,12 +27,12 @@
 public class PostProcessorConfiguration {
 
   @Bean
-  public SubscriptionPostProcessor subscriptionPostprocessor() {
+  public static SubscriptionPostProcessor subscriptionPostprocessor() {
     return new SubscriptionPostProcessor(SpringTopicSubscriptionImpl.class);
   }
 
   @Bean
-  public ClientPostProcessor clientPostProcessor() {
+  public static ClientPostProcessor clientPostProcessor() {
     return new ClientPostProcessor(ClientFactory.class);
   }
 

File: spring-boot-starter/starter-client/spring/src/test/java/org/camunda/bpm/client/spring/client/configuration/PropertyPlaceholderConfiguration.java
Patch:
@@ -33,7 +33,7 @@
 public class PropertyPlaceholderConfiguration {
 
   @Bean
-  public PropertySourcesPlaceholderConfigurer propertyPlaceholderConfigurer() {
+  public static PropertySourcesPlaceholderConfigurer propertyPlaceholderConfigurer() {
     PropertySourcesPlaceholderConfigurer configurer = new PropertySourcesPlaceholderConfigurer();
     Resource location = new ClassPathResource("client.properties");
     configurer.setLocation(location);

File: spin/core/src/main/java/org/camunda/spin/json/SpinJsonNode.java
Patch:
@@ -276,7 +276,7 @@ public abstract class SpinJsonNode extends Spin<SpinJsonNode> {
   public abstract Boolean isString();
 
   /**
-   * Get this node as a number value.
+   * Get this node as a string value.
    *
    * @return the string value of this node
    * @throws SpinDataFormatException if this node is not a string value

File: spin/core/src/main/java/org/camunda/spin/json/SpinJsonNode.java
Patch:
@@ -276,7 +276,7 @@ public abstract class SpinJsonNode extends Spin<SpinJsonNode> {
   public abstract Boolean isString();
 
   /**
-   * Get this node as a number value.
+   * Get this node as a string value.
    *
    * @return the string value of this node
    * @throws SpinDataFormatException if this node is not a string value

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/util/ContentTypeUtil.java
Patch:
@@ -20,14 +20,14 @@
 
 public class ContentTypeUtil {
 
-  private static final String SUFFIX_JSON_FILE = ".json";
+  private static final String SUFFIX_FORM_FILE = ".form";
 
   /**
    * @return the content type to use for the provided form's key
    *
    */
   public static String getFormContentType(String formKey) {
-    if (formKey.endsWith(SUFFIX_JSON_FILE)) {
+    if (formKey.endsWith(SUFFIX_FORM_FILE)) {
       return MediaType.APPLICATION_JSON;
     }
     return MediaType.APPLICATION_XHTML_XML;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ProcessDefinitionRestServiceInteractionTest.java
Patch:
@@ -3955,7 +3955,7 @@ public void testGetDeployedStartFormJson() {
     when(formServiceMock.getDeployedStartForm(MockProvider.EXAMPLE_PROCESS_DEFINITION_ID))
         .thenReturn(deployedStartFormMock);
     when(formServiceMock.getStartFormKey(MockProvider.EXAMPLE_PROCESS_DEFINITION_ID))
-        .thenReturn("test.json");
+        .thenReturn("test.form");
 
     given()
     .pathParam("id", MockProvider.EXAMPLE_PROCESS_DEFINITION_ID)

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/TaskRestServiceInteractionTest.java
Patch:
@@ -3259,7 +3259,7 @@ public void testGetDeployedTaskForm() {
   public void testGetDeployedTaskFormJson() {
     InputStream deployedFormMock = new ByteArrayInputStream("Test".getBytes());
     when(formServiceMock.getDeployedTaskForm(anyString())).thenReturn(deployedFormMock);
-    when(formServiceMock.getTaskFormKey(anyString(), anyString())).thenReturn("test.json");
+    when(formServiceMock.getTaskFormKey(anyString(), anyString())).thenReturn("test.form");
 
     given()
       .pathParam("id", MockProvider.EXAMPLE_TASK_ID)

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/AllowedAnswersImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_ALLOWED_ANSWERS;
 
 import org.camunda.bpm.model.dmn.instance.AllowedAnswers;
@@ -33,7 +33,7 @@ public AllowedAnswersImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(AllowedAnswers.class, DMN_ELEMENT_ALLOWED_ANSWERS)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .instanceProvider(new ModelTypeInstanceProvider<AllowedAnswers>() {
         public AllowedAnswers newInstance(ModelTypeInstanceContext instanceContext) {
           return new AllowedAnswersImpl(instanceContext);

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/AllowedValuesImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_ALLOWED_VALUE;
 
 import org.camunda.bpm.model.dmn.instance.AllowedValues;
@@ -34,7 +34,7 @@ public AllowedValuesImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(AllowedValues.class, DMN_ELEMENT_ALLOWED_VALUE)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(LiteralExpression.class)
       .instanceProvider(new ModelTypeInstanceProvider<AllowedValues>() {
         public AllowedValues newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/ArtifactImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_ARTIFACT;
 
 import org.camunda.bpm.model.dmn.instance.Artifact;
@@ -33,7 +33,7 @@ public ArtifactImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(Artifact.class, DMN_ELEMENT_ARTIFACT)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElement.class)
       .abstractType();
 

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/AssociationImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_ASSOCIATION_DIRECTION;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_ASSOCIATION;
 
@@ -71,7 +71,7 @@ public void setTarget(DmnElement target) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(Association.class, DMN_ELEMENT_ASSOCIATION)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(Artifact.class)
       .instanceProvider(new ModelTypeInstanceProvider<Association>() {
         public Association newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/AuthorityRequirementImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_AUTHORITY_REQUIREMENT;
 
 import org.camunda.bpm.model.dmn.instance.AuthorityRequirement;
@@ -69,7 +69,7 @@ public void setRequiredAuthority(KnowledgeSource requiredAuthority) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(AuthorityRequirement.class, DMN_ELEMENT_AUTHORITY_REQUIREMENT)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .instanceProvider(new ModelTypeInstanceProvider<AuthorityRequirement>() {
         public AuthorityRequirement newInstance(ModelTypeInstanceContext instanceContext) {
           return new AuthorityRequirementImpl(instanceContext);

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/BindingImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_BINDING;
 
 import org.camunda.bpm.model.dmn.instance.*;
@@ -54,7 +54,7 @@ public void setExpression(Expression expression) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(Binding.class, DMN_ELEMENT_BINDING)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .instanceProvider(new ModelTypeInstanceProvider<Binding>() {
         public Binding newInstance(ModelTypeInstanceContext instanceContext) {
           return new BindingImpl(instanceContext);

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/BusinessContextElementImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_URI;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_BUSINESS_CONTEXT_ELEMENT;
 
@@ -45,7 +45,7 @@ public void setUri(String uri) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(BusinessContextElement.class, DMN_ELEMENT_BUSINESS_CONTEXT_ELEMENT)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(NamedElement.class)
       .abstractType();
 

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/BusinessKnowledgeModelImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_BUSINESS_KNOWLEDGE_MODEL;
 
 import java.util.Collection;
@@ -72,7 +72,7 @@ public Collection<AuthorityRequirement> getAuthorityRequirement() {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(BusinessKnowledgeModel.class, DMN_ELEMENT_BUSINESS_KNOWLEDGE_MODEL)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DrgElement.class)
       .instanceProvider(new ModelTypeInstanceProvider<BusinessKnowledgeModel>() {
         public BusinessKnowledgeModel newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/ColumnImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_COLUMN;
 
 import org.camunda.bpm.model.dmn.instance.Column;
@@ -34,7 +34,7 @@ public ColumnImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(Column.class, DMN_ELEMENT_COLUMN)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(InformationItem.class)
       .instanceProvider(new ModelTypeInstanceProvider<Column>() {
         public Column newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/ContextEntryImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_CONTEXT_ENTRY;
 
 import org.camunda.bpm.model.dmn.instance.ContextEntry;
@@ -56,7 +56,7 @@ public void setExpression(Expression expression) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(ContextEntry.class, DMN_ELEMENT_CONTEXT_ENTRY)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .instanceProvider(new ModelTypeInstanceProvider<ContextEntry>() {
         public ContextEntry newInstance(ModelTypeInstanceContext instanceContext) {
           return new ContextEntryImpl(instanceContext);

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/ContextImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_CONTEXT;
 
 import java.util.Collection;
@@ -45,7 +45,7 @@ public Collection<ContextEntry> getContextEntries() {
   
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(Context.class, DMN_ELEMENT_CONTEXT)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(Expression.class)
       .instanceProvider(new ModelTypeInstanceProvider<Context>() {
         public Context newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/DecisionImpl.java
Patch:
@@ -19,7 +19,7 @@
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.CAMUNDA_ATTRIBUTE_HISTORY_TIME_TO_LIVE;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.CAMUNDA_ATTRIBUTE_VERSION_TAG;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.CAMUNDA_NS;
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_DECISION;
 
 import java.util.Collection;
@@ -181,7 +181,7 @@ public void setVersionTag(String inputVariable) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(Decision.class, DMN_ELEMENT_DECISION)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DrgElement.class)
       .instanceProvider(new ModelTypeInstanceProvider<Decision>() {
         public Decision newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/DecisionMadeReferenceImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_DECISION_MADE;
 
 import org.camunda.bpm.model.dmn.instance.DecisionMadeReference;
@@ -34,7 +34,7 @@ public DecisionMadeReferenceImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(DecisionMadeReference.class, DMN_ELEMENT_DECISION_MADE)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElementReference.class)
       .instanceProvider(new ModelTypeInstanceProvider<DecisionMadeReference>() {
         public DecisionMadeReference newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/DecisionMakerReferenceImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_DECISION_MAKER;
 
 import org.camunda.bpm.model.dmn.instance.DecisionMakerReference;
@@ -34,7 +34,7 @@ public DecisionMakerReferenceImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(DecisionMakerReference.class, DMN_ELEMENT_DECISION_MAKER)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElementReference.class)
       .instanceProvider(new ModelTypeInstanceProvider<DecisionMakerReference>() {
         public DecisionMakerReference newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/DecisionOwnedReferenceImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_DECISION_OWNED;
 
 import org.camunda.bpm.model.dmn.instance.DecisionOwnedReference;
@@ -34,7 +34,7 @@ public DecisionOwnedReferenceImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(DecisionOwnedReference.class, DMN_ELEMENT_DECISION_OWNED)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElementReference.class)
       .instanceProvider(new ModelTypeInstanceProvider<DecisionOwnedReference>() {
         public DecisionOwnedReference newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/DecisionOwnerReferenceImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_DECISION_OWNER;
 
 import org.camunda.bpm.model.dmn.instance.DecisionOwnerReference;
@@ -34,7 +34,7 @@ public DecisionOwnerReferenceImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(DecisionOwnerReference.class, DMN_ELEMENT_DECISION_OWNER)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElementReference.class)
       .instanceProvider(new ModelTypeInstanceProvider<DecisionOwnerReference>() {
         public DecisionOwnerReference newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/DecisionRuleImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_DECISION_RULE;
 
 import java.util.Collection;
@@ -51,7 +51,7 @@ public Collection<OutputEntry> getOutputEntries() {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(DecisionRule.class, DMN_ELEMENT_DECISION_RULE)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElement.class)
       .instanceProvider(new ModelTypeInstanceProvider<DecisionRule>() {
         public DecisionRule newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/DecisionServiceImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_DECISION_SERVICE;
 
 import java.util.Collection;
@@ -65,7 +65,7 @@ public Collection<InputData> getInputData() {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(DecisionService.class, DMN_ELEMENT_DECISION_SERVICE)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(NamedElement.class)
       .instanceProvider(new ModelTypeInstanceProvider<DecisionService>() {
         public DecisionService newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/DecisionTableImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_AGGREGATION;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_HIT_POLICY;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_OUTPUT_LABEL;
@@ -102,7 +102,7 @@ public Collection<Rule> getRules() {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(DecisionTable.class, DMN_ELEMENT_DECISION_TABLE)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(Expression.class)
       .instanceProvider(new ModelTypeInstanceProvider<DecisionTable>() {
         public DecisionTable newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/DefaultOutputEntryImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_DEFAULT_OUTPUT_ENTRY;
 
 import org.camunda.bpm.model.dmn.instance.DefaultOutputEntry;
@@ -34,7 +34,7 @@ public DefaultOutputEntryImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(DefaultOutputEntry.class, DMN_ELEMENT_DEFAULT_OUTPUT_ENTRY)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(LiteralExpression.class)
       .instanceProvider(new ModelTypeInstanceProvider<DefaultOutputEntry>() {
         public DefaultOutputEntry newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/DefinitionsImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_EXPORTER;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_EXPORTER_VERSION;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_EXPRESSION_LANGUAGE;
@@ -126,7 +126,7 @@ public Collection<BusinessContextElement> getBusinessContextElements() {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(Definitions.class, DMN_ELEMENT_DEFINITIONS)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(NamedElement.class)
       .instanceProvider(new ModelElementTypeBuilder.ModelTypeInstanceProvider<Definitions>() {
         public Definitions newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/DescriptionImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_DESCRIPTION;
 
 import org.camunda.bpm.model.dmn.instance.Description;
@@ -33,7 +33,7 @@ public DescriptionImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(Description.class, DMN_ELEMENT_DESCRIPTION)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .instanceProvider(new ModelTypeInstanceProvider<Description>() {
         public Description newInstance(ModelTypeInstanceContext instanceContext) {
           return new DescriptionImpl(instanceContext);

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/DmnElementImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_ID;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_LABEL;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT;
@@ -77,7 +77,7 @@ public void setExtensionElements(ExtensionElements extensionElements) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(DmnElement.class, DMN_ELEMENT)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .abstractType();
 
     idAttribute = typeBuilder.stringAttribute(DMN_ATTRIBUTE_ID)

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/DmnElementReferenceImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_HREF;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_REFERENCE;
 
@@ -45,7 +45,7 @@ public void setHref(String href) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(DmnElementReference.class, DMN_ELEMENT_REFERENCE)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .instanceProvider(new ModelTypeInstanceProvider<DmnElementReference>() {
         public DmnElementReference newInstance(ModelTypeInstanceContext instanceContext) {
           return new DmnElementReferenceImpl(instanceContext);

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/DrgElementImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_DRG_ELEMENT;
 
 import org.camunda.bpm.model.dmn.instance.DrgElement;
@@ -33,7 +33,7 @@ public DrgElementImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(DrgElement.class, DMN_ELEMENT_DRG_ELEMENT)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(NamedElement.class)
       .abstractType();
 

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/DrgElementReferenceImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_DRG_ELEMENT_REFERENCE;
 
 import org.camunda.bpm.model.dmn.instance.DmnElementReference;
@@ -34,7 +34,7 @@ public DrgElementReferenceImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(DrgElementReference.class, DMN_ELEMENT_DRG_ELEMENT_REFERENCE)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElementReference.class)
       .instanceProvider(new ModelTypeInstanceProvider<DrgElementReference>() {
         public DrgElementReference newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/ElementCollectionImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_ELEMENT_COLLECTION;
 
 import java.util.Collection;
@@ -46,7 +46,7 @@ public Collection<DrgElement> getDrgElements() {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(ElementCollection.class, DMN_ELEMENT_ELEMENT_COLLECTION)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(NamedElement.class)
       .instanceProvider(new ModelTypeInstanceProvider<ElementCollection>() {
         public ElementCollection newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/EncapsulatedDecisionReferenceImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_ENCAPSULATED_DECISION_REFERENCE;
 
 import org.camunda.bpm.model.dmn.instance.DmnElementReference;
@@ -34,7 +34,7 @@ public EncapsulatedDecisionReferenceImpl(ModelTypeInstanceContext instanceContex
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(EncapsulatedDecisionReference.class, DMN_ELEMENT_ENCAPSULATED_DECISION_REFERENCE)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElementReference.class)
       .instanceProvider(new ModelTypeInstanceProvider<EncapsulatedDecisionReference>() {
         public EncapsulatedDecisionReference newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/EncapsulatedLogicImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_ENCAPSULATED_LOGIC;
 
 import org.camunda.bpm.model.dmn.instance.EncapsulatedLogic;
@@ -34,7 +34,7 @@ public EncapsulatedLogicImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(EncapsulatedLogic.class, DMN_ELEMENT_ENCAPSULATED_LOGIC)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(FunctionDefinition.class)
       .instanceProvider(new ModelTypeInstanceProvider<EncapsulatedLogic>() {
         public EncapsulatedLogic newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/ExpressionImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_TYPE_REF;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_EXPRESSION;
 
@@ -45,7 +45,7 @@ public void setTypeRef(String typeRef) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(Expression.class, DMN_ELEMENT_EXPRESSION)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElement.class)
       .abstractType();
 

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/ExtensionElementsImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_EXTENSION_ELEMENTS;
 
 import java.util.Collection;
@@ -39,7 +39,7 @@ public class ExtensionElementsImpl extends DmnModelElementInstanceImpl implement
   public static void registerType(ModelBuilder modelBuilder) {
 
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(ExtensionElements.class, DMN_ELEMENT_EXTENSION_ELEMENTS)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .instanceProvider(new ModelElementTypeBuilder.ModelTypeInstanceProvider<ExtensionElements>() {
         public ExtensionElements newInstance(ModelTypeInstanceContext instanceContext) {
           return new ExtensionElementsImpl(instanceContext);

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/FormalParameterImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_FORMAL_PARAMETER;
 
 import org.camunda.bpm.model.dmn.instance.FormalParameter;
@@ -34,7 +34,7 @@ public FormalParameterImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(FormalParameter.class, DMN_ELEMENT_FORMAL_PARAMETER)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(InformationItem.class)
       .instanceProvider(new ModelTypeInstanceProvider<FormalParameter>() {
         public FormalParameter newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/FunctionDefinitionImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_FUNCTION_DEFINITION;
 
 import java.util.Collection;
@@ -55,7 +55,7 @@ public void setExpression(Expression expression) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(FunctionDefinition.class, DMN_ELEMENT_FUNCTION_DEFINITION)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(Expression.class)
       .instanceProvider(new ModelTypeInstanceProvider<FunctionDefinition>() {
         public FunctionDefinition newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/ImpactedPerformanceIndicatorReferenceImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_IMPACTED_PERFORMANCE_INDICATOR;
 
 import org.camunda.bpm.model.dmn.instance.DmnElementReference;
@@ -34,7 +34,7 @@ public ImpactedPerformanceIndicatorReferenceImpl(ModelTypeInstanceContext instan
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(ImpactedPerformanceIndicatorReference.class, DMN_ELEMENT_IMPACTED_PERFORMANCE_INDICATOR)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElementReference.class)
       .instanceProvider(new ModelTypeInstanceProvider<ImpactedPerformanceIndicatorReference>() {
         public ImpactedPerformanceIndicatorReference newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/ImpactingDecisionReferenceImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_IMPACTING_DECISION;
 
 import org.camunda.bpm.model.dmn.instance.DmnElementReference;
@@ -34,7 +34,7 @@ public ImpactingDecisionReferenceImpl(ModelTypeInstanceContext instanceContext)
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(ImpactingDecisionReference.class, DMN_ELEMENT_IMPACTING_DECISION)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElementReference.class)
       .instanceProvider(new ModelTypeInstanceProvider<ImpactingDecisionReference>() {
         public ImpactingDecisionReference newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/ImportImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_IMPORT_TYPE;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_LOCATION_URI;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_NAMESPACE;
@@ -65,7 +65,7 @@ public void setImportType(String importType) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(Import.class, DMN_ELEMENT_IMPORT)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .instanceProvider(new ModelTypeInstanceProvider<Import>() {
         public Import newInstance(ModelTypeInstanceContext instanceContext) {
           return new ImportImpl(instanceContext);

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/ImportedElementImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_IMPORTED_ELEMENT;
 
 import org.camunda.bpm.model.dmn.instance.ImportedElement;
@@ -33,7 +33,7 @@ public ImportedElementImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(ImportedElement.class, DMN_ELEMENT_IMPORTED_ELEMENT)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .instanceProvider(new ModelTypeInstanceProvider<ImportedElement>() {
         public ImportedElement newInstance(ModelTypeInstanceContext instanceContext) {
           return new ImportedElementImpl(instanceContext);

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/ImportedValuesImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_EXPRESSION_LANGUAGE;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_IMPORTED_VALUES;
 
@@ -59,7 +59,7 @@ public void setImportedElement(ImportedElement importedElement) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(ImportedValues.class, DMN_ELEMENT_IMPORTED_VALUES)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(Import.class)
       .instanceProvider(new ModelTypeInstanceProvider<ImportedValues>() {
         public ImportedValues newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/InformationItemImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_TYPE_REF;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_INFORMATION_ITEM;
 
@@ -46,7 +46,7 @@ public void setTypeRef(String typeRef) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(InformationItem.class, DMN_ELEMENT_INFORMATION_ITEM)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(NamedElement.class)
       .instanceProvider(new ModelTypeInstanceProvider<InformationItem>() {
         public InformationItem newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/InformationRequirementImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_INFORMATION_REQUIREMENT;
 
 import org.camunda.bpm.model.dmn.instance.Decision;
@@ -58,7 +58,7 @@ public void setRequiredInput(InputData requiredInput) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(InformationRequirement.class, DMN_ELEMENT_INFORMATION_REQUIREMENT)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .instanceProvider(new ModelTypeInstanceProvider<InformationRequirement>() {
         public InformationRequirement newInstance(ModelTypeInstanceContext instanceContext) {
           return new InformationRequirementImpl(instanceContext);

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/InputClauseImpl.java
Patch:
@@ -18,7 +18,7 @@
 
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.CAMUNDA_ATTRIBUTE_INPUT_VARIABLE;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.CAMUNDA_NS;
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_INPUT_CLAUSE;
 
 import org.camunda.bpm.model.dmn.instance.DmnElement;
@@ -74,7 +74,7 @@ public void setCamundaInputVariable(String inputVariable) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(InputClause.class, DMN_ELEMENT_INPUT_CLAUSE)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElement.class)
       .instanceProvider(new ModelTypeInstanceProvider<InputClause>() {
         public InputClause newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/InputDataImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_INPUT_DATA;
 
 import org.camunda.bpm.model.dmn.instance.DrgElement;
@@ -47,7 +47,7 @@ public void setInformationItem(InformationItem informationItem) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(InputData.class, DMN_ELEMENT_INPUT_DATA)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DrgElement.class)
       .instanceProvider(new ModelTypeInstanceProvider<InputData>() {
         public InputData newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/InputDataReferenceImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_INPUT_DATA_REFERENCE;
 
 import org.camunda.bpm.model.dmn.instance.DmnElementReference;
@@ -34,7 +34,7 @@ public InputDataReferenceImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(InputDataReference.class, DMN_ELEMENT_INPUT_DATA_REFERENCE)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElementReference.class)
       .instanceProvider(new ModelTypeInstanceProvider<InputDataReference>() {
         public InputDataReference newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/InputDecisionReferenceImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_INPUT_DECISION_REFERENCE;
 
 import org.camunda.bpm.model.dmn.instance.DmnElementReference;
@@ -34,7 +34,7 @@ public InputDecisionReferenceImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(InputDecisionReference.class, DMN_ELEMENT_INPUT_DECISION_REFERENCE)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElementReference.class)
       .instanceProvider(new ModelTypeInstanceProvider<InputDecisionReference>() {
         public InputDecisionReference newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/InputEntryImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_INPUT_ENTRY;
 
 import org.camunda.bpm.model.dmn.instance.InputEntry;
@@ -34,7 +34,7 @@ public InputEntryImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(InputEntry.class, DMN_ELEMENT_INPUT_ENTRY)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(UnaryTests.class)
       .instanceProvider(new ModelTypeInstanceProvider<InputEntry>() {
         public InputEntry newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/InputExpressionImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_INPUT_EXPRESSION;
 
 import org.camunda.bpm.model.dmn.instance.InputExpression;
@@ -34,7 +34,7 @@ public InputExpressionImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(InputExpression.class, DMN_ELEMENT_INPUT_EXPRESSION)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(LiteralExpression.class)
       .instanceProvider(new ModelTypeInstanceProvider<InputExpression>() {
         public InputExpression newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/InputImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_INPUT;
 
 import org.camunda.bpm.model.dmn.instance.Input;
@@ -34,7 +34,7 @@ public InputImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(Input.class, DMN_ELEMENT_INPUT)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(InputClause.class)
       .instanceProvider(new ModelTypeInstanceProvider<Input>() {
         public Input newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/InputValuesImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_INPUT_VALUES;
 
 import org.camunda.bpm.model.dmn.instance.InputValues;
@@ -34,7 +34,7 @@ public InputValuesImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(InputValues.class, DMN_ELEMENT_INPUT_VALUES)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(UnaryTests.class)
       .instanceProvider(new ModelTypeInstanceProvider<InputValues>() {
         public InputValues newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/InvocationImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_INVOCATION;
 
 import java.util.Collection;
@@ -55,7 +55,7 @@ public Collection<Binding> getBindings() {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(Invocation.class, DMN_ELEMENT_INVOCATION)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(Expression.class)
       .instanceProvider(new ModelTypeInstanceProvider<Invocation>() {
         public Invocation newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/ItemComponentImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_ITEM_COMPONENT;
 
 import org.camunda.bpm.model.dmn.instance.ItemComponent;
@@ -34,7 +34,7 @@ public ItemComponentImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(ItemComponent.class, DMN_ELEMENT_ITEM_COMPONENT)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(ItemDefinition.class)
       .instanceProvider(new ModelTypeInstanceProvider<ItemComponent>() {
         public ItemComponent newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/ItemDefinitionImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_IS_COLLECTION;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_TYPE_LANGUAGE;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_ITEM_DEFINITION;
@@ -88,7 +88,7 @@ public Collection<ItemComponent> getItemComponents() {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(ItemDefinition.class, DMN_ELEMENT_ITEM_DEFINITION)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(NamedElement.class)
       .instanceProvider(new ModelTypeInstanceProvider<ItemDefinition>() {
         public ItemDefinition newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/ItemDefinitionReferenceImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_ITEM_DEFINITION_REFERENCE;
 
 import org.camunda.bpm.model.dmn.instance.DmnElementReference;
@@ -34,7 +34,7 @@ public ItemDefinitionReferenceImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(ItemDefinitionReference.class, DMN_ELEMENT_ITEM_DEFINITION_REFERENCE)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElementReference.class)
       .instanceProvider(new ModelTypeInstanceProvider<ItemDefinitionReference>() {
         public ItemDefinitionReference newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/KnowledgeRequirementImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_KNOWLEDGE_REQUIREMENT;
 
 import org.camunda.bpm.model.dmn.instance.BusinessKnowledgeModel;
@@ -47,7 +47,7 @@ public void setRequiredKnowledge(BusinessKnowledgeModel requiredKnowledge) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(KnowledgeRequirement.class, DMN_ELEMENT_KNOWLEDGE_REQUIREMENT)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .instanceProvider(new ModelTypeInstanceProvider<KnowledgeRequirement>() {
         public KnowledgeRequirement newInstance(ModelTypeInstanceContext instanceContext) {
           return new KnowledgeRequirementImpl(instanceContext);

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/KnowledgeSourceImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_LOCATION_URI;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_KNOWLEDGE_SOURCE;
 
@@ -80,7 +80,7 @@ public void setOwner(OrganizationUnit owner) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(KnowledgeSource.class, DMN_ELEMENT_KNOWLEDGE_SOURCE)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DrgElement.class)
       .instanceProvider(new ModelTypeInstanceProvider<KnowledgeSource>() {
         public KnowledgeSource newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/ListImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_LIST;
 
 import java.util.Collection;
@@ -44,7 +44,7 @@ public Collection<Expression> getExpressions() {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(List.class, DMN_ELEMENT_LIST)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(Expression.class)
       .instanceProvider(new ModelTypeInstanceProvider<List>() {
         public List newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/LiteralExpressionImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_EXPRESSION_LANGUAGE;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_LITERAL_EXPRESSION;
 
@@ -69,7 +69,7 @@ public void setImportValues(ImportedValues importedValues) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(LiteralExpression.class, DMN_ELEMENT_LITERAL_EXPRESSION)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(Expression.class)
       .instanceProvider(new ModelTypeInstanceProvider<LiteralExpression>() {
         public LiteralExpression newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/NamedElementImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_NAME;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_NAMED_ELEMENT;
 
@@ -45,7 +45,7 @@ public void setName(String name) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(NamedElement.class, DMN_ELEMENT_NAMED_ELEMENT)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElement.class)
       .abstractType();
 

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/OrganizationUnitImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_ORGANIZATION_UNIT;
 
 import java.util.Collection;
@@ -52,7 +52,7 @@ public Collection<Decision> getDecisionsOwned() {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(OrganizationUnit.class, DMN_ELEMENT_ORGANIZATION_UNIT)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(BusinessContextElement.class)
       .instanceProvider(new ModelTypeInstanceProvider<OrganizationUnit>() {
         public OrganizationUnit newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/OutputClauseImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_NAME;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_TYPE_REF;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_OUTPUT_CLAUSE;
@@ -79,7 +79,7 @@ public void setDefaultOutputEntry(DefaultOutputEntry defaultOutputEntry) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(OutputClause.class, DMN_ELEMENT_OUTPUT_CLAUSE)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElement.class)
       .instanceProvider(new ModelTypeInstanceProvider<OutputClause>() {
         public OutputClause newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/OutputDecisionReferenceImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_OUTPUT_DECISION_REFERENCE;
 
 import org.camunda.bpm.model.dmn.instance.DmnElementReference;
@@ -34,7 +34,7 @@ public OutputDecisionReferenceImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(OutputDecisionReference.class, DMN_ELEMENT_OUTPUT_DECISION_REFERENCE)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElementReference.class)
       .instanceProvider(new ModelTypeInstanceProvider<OutputDecisionReference>() {
         public OutputDecisionReference newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/OutputEntryImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_OUTPUT_ENTRY;
 
 import org.camunda.bpm.model.dmn.instance.LiteralExpression;
@@ -34,7 +34,7 @@ public OutputEntryImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(OutputEntry.class, DMN_ELEMENT_OUTPUT_ENTRY)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(LiteralExpression.class)
       .instanceProvider(new ModelTypeInstanceProvider<OutputEntry>() {
         public OutputEntry newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/OutputImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_OUTPUT;
 
 import org.camunda.bpm.model.dmn.instance.Output;
@@ -34,7 +34,7 @@ public OutputImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(Output.class, DMN_ELEMENT_OUTPUT)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(OutputClause.class)
       .instanceProvider(new ModelTypeInstanceProvider<Output>() {
         public Output newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/OutputValuesImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_OUTPUT_VALUES;
 
 import org.camunda.bpm.model.dmn.instance.OutputValues;
@@ -34,7 +34,7 @@ public OutputValuesImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(OutputValues.class, DMN_ELEMENT_OUTPUT_VALUES)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(UnaryTests.class)
       .instanceProvider(new ModelTypeInstanceProvider<OutputValues>() {
         public OutputValues newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/OwnerReferenceImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_OWNER;
 
 import org.camunda.bpm.model.dmn.instance.DmnElementReference;
@@ -34,7 +34,7 @@ public OwnerReferenceImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(OwnerReference.class, DMN_ELEMENT_OWNER)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElementReference.class)
       .instanceProvider(new ModelTypeInstanceProvider<OwnerReference>() {
         public OwnerReference newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/ParameterImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_PARAMETER;
 
 import org.camunda.bpm.model.dmn.instance.InformationItem;
@@ -34,7 +34,7 @@ public ParameterImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(Parameter.class, DMN_ELEMENT_PARAMETER)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(InformationItem.class)
       .instanceProvider(new ModelTypeInstanceProvider<Parameter>() {
         @Override

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/PerformanceIndicatorImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_PERFORMANCE_INDICATOR;
 
 import java.util.Collection;
@@ -46,7 +46,7 @@ public Collection<Decision> getImpactingDecisions() {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(PerformanceIndicator.class, DMN_ELEMENT_PERFORMANCE_INDICATOR)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(BusinessContextElement.class)
       .instanceProvider(new ModelTypeInstanceProvider<PerformanceIndicator>() {
         public PerformanceIndicator newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/QuestionImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_QUESTION;
 
 import org.camunda.bpm.model.dmn.instance.Question;
@@ -33,7 +33,7 @@ public QuestionImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(Question.class, DMN_ELEMENT_QUESTION)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .instanceProvider(new ModelTypeInstanceProvider<Question>() {
         public Question newInstance(ModelTypeInstanceContext instanceContext) {
           return new QuestionImpl(instanceContext);

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/RelationImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_RELATION;
 
 import java.util.Collection;
@@ -51,7 +51,7 @@ public Collection<Row> getRows() {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(Relation.class, DMN_ELEMENT_RELATION)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(Expression.class)
       .instanceProvider(new ModelTypeInstanceProvider<Relation>() {
         public Relation newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/RequiredAuthorityReferenceImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_REQUIRED_AUTHORITY;
 
 import org.camunda.bpm.model.dmn.instance.DmnElementReference;
@@ -34,7 +34,7 @@ public RequiredAuthorityReferenceImpl(ModelTypeInstanceContext instanceContext)
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(RequiredAuthorityReference.class, DMN_ELEMENT_REQUIRED_AUTHORITY)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElementReference.class)
       .instanceProvider(new ModelTypeInstanceProvider<RequiredAuthorityReference>() {
         public RequiredAuthorityReference newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/RequiredDecisionReferenceImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_REQUIRED_DECISION;
 
 import org.camunda.bpm.model.dmn.instance.DmnElementReference;
@@ -34,7 +34,7 @@ public RequiredDecisionReferenceImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(RequiredDecisionReference.class, DMN_ELEMENT_REQUIRED_DECISION)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElementReference.class)
       .instanceProvider(new ModelTypeInstanceProvider<RequiredDecisionReference>() {
         public RequiredDecisionReference newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/RequiredInputReferenceImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_REQUIRED_INPUT;
 
 import org.camunda.bpm.model.dmn.instance.DmnElementReference;
@@ -34,7 +34,7 @@ public RequiredInputReferenceImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(RequiredInputReference.class, DMN_ELEMENT_REQUIRED_INPUT)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElementReference.class)
       .instanceProvider(new ModelTypeInstanceProvider<RequiredInputReference>() {
         public RequiredInputReference newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/RequiredKnowledgeReferenceImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_REQUIRED_KNOWLEDGE;
 
 import org.camunda.bpm.model.dmn.instance.DmnElementReference;
@@ -34,7 +34,7 @@ public RequiredKnowledgeReferenceImpl(ModelTypeInstanceContext instanceContext)
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(RequiredKnowledgeReference.class, DMN_ELEMENT_REQUIRED_KNOWLEDGE)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElementReference.class)
       .instanceProvider(new ModelTypeInstanceProvider<RequiredKnowledgeReference>() {
         public RequiredKnowledgeReference newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/RowImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_ROW;
 
 import org.camunda.bpm.model.dmn.instance.List;
@@ -34,7 +34,7 @@ public RowImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(Row.class, DMN_ELEMENT_ROW)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(List.class)
       .instanceProvider(new ModelTypeInstanceProvider<Row>() {
         public Row newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/RuleImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_RULE;
 
 import org.camunda.bpm.model.dmn.instance.DecisionRule;
@@ -34,7 +34,7 @@ public RuleImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(Rule.class, DMN_ELEMENT_RULE)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DecisionRule.class)
       .instanceProvider(new ModelTypeInstanceProvider<Rule>() {
         public Rule newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/SourceRefImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_SOURCE_REF;
 
 import org.camunda.bpm.model.dmn.instance.DmnElementReference;
@@ -34,7 +34,7 @@ public SourceRefImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(SourceRef.class, DMN_ELEMENT_SOURCE_REF)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElementReference.class)
       .instanceProvider(new ModelTypeInstanceProvider<SourceRef>() {
         public SourceRef newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/SupportedObjectiveReferenceImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_SUPPORTED_OBJECT;
 
 import org.camunda.bpm.model.dmn.instance.DmnElementReference;
@@ -34,7 +34,7 @@ public SupportedObjectiveReferenceImpl(ModelTypeInstanceContext instanceContext)
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(SupportedObjectiveReference.class, DMN_ELEMENT_SUPPORTED_OBJECT)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElementReference.class)
       .instanceProvider(new ModelTypeInstanceProvider<SupportedObjectiveReference>() {
         public SupportedObjectiveReference newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/TargetRefImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_TARGET_REF;
 
 import org.camunda.bpm.model.dmn.instance.DmnElementReference;
@@ -34,7 +34,7 @@ public TargetRefImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(TargetRef.class, DMN_ELEMENT_TARGET_REF)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElementReference.class)
       .instanceProvider(new ModelTypeInstanceProvider<TargetRef>() {
         public TargetRef newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/TextAnnotationImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_TEXT_FORMAT;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_TEXT_ANNOTATION;
 
@@ -59,7 +59,7 @@ public TextAnnotationImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(TextAnnotation.class, DMN_ELEMENT_TEXT_ANNOTATION)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(Artifact.class)
       .instanceProvider(new ModelTypeInstanceProvider<TextAnnotation>() {
         public TextAnnotation newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/TextImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_TEXT;
 
 import org.camunda.bpm.model.dmn.instance.Text;
@@ -33,7 +33,7 @@ public TextImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(Text.class, DMN_ELEMENT_TEXT)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .instanceProvider(new ModelTypeInstanceProvider<Text>() {
         public Text newInstance(ModelTypeInstanceContext instanceContext) {
           return new TextImpl(instanceContext);

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/TypeImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_TYPE;
 
 import org.camunda.bpm.model.dmn.instance.Type;
@@ -33,7 +33,7 @@ public TypeImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(Type.class, DMN_ELEMENT_TYPE)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .instanceProvider(new ModelTypeInstanceProvider<Type>() {
         public Type newInstance(ModelTypeInstanceContext instanceContext) {
           return new TypeImpl(instanceContext);

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/TypeRefImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_TYPE_REF;
 
 import org.camunda.bpm.model.dmn.instance.TypeRef;
@@ -33,7 +33,7 @@ public TypeRefImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(TypeRef.class, DMN_ELEMENT_TYPE_REF)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .instanceProvider(new ModelTypeInstanceProvider<TypeRef>() {
         public TypeRef newInstance(ModelTypeInstanceContext instanceContext) {
           return new TypeRefImpl(instanceContext);

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/UnaryTestsImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ATTRIBUTE_EXPRESSION_LANGUAGE;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_UNARY_TESTS;
 
@@ -59,7 +59,7 @@ public void setText(Text text) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(UnaryTests.class, DMN_ELEMENT_UNARY_TESTS)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElement.class)
       .instanceProvider(new ModelTypeInstanceProvider<UnaryTests>() {
         public UnaryTests newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/UsingProcessReferenceImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_USING_PROCESS;
 
 import org.camunda.bpm.model.dmn.instance.DmnElementReference;
@@ -34,7 +34,7 @@ public UsingProcessReferenceImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(UsingProcessReference.class, DMN_ELEMENT_USING_PROCESS)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElementReference.class)
       .instanceProvider(new ModelTypeInstanceProvider<UsingProcessReference>() {
         public UsingProcessReference newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/UsingTaskReferenceImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_USING_TASK;
 
 import org.camunda.bpm.model.dmn.instance.DmnElementReference;
@@ -34,7 +34,7 @@ public UsingTaskReferenceImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(UsingTaskReference.class, DMN_ELEMENT_USING_TASK)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(DmnElementReference.class)
       .instanceProvider(new ModelTypeInstanceProvider<UsingTaskReference>() {
         public UsingTaskReference newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/VariableImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.model.dmn.impl.instance;
 
-import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.LATEST_DMN_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN_ELEMENT_VARIABLE;
 
 import org.camunda.bpm.model.dmn.instance.InformationItem;
@@ -34,7 +34,7 @@ public VariableImpl(ModelTypeInstanceContext instanceContext) {
 
   public static void registerType(ModelBuilder modelBuilder) {
     ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(Variable.class, DMN_ELEMENT_VARIABLE)
-      .namespaceUri(DMN11_NS)
+      .namespaceUri(LATEST_DMN_NS)
       .extendsType(InformationItem.class)
       .instanceProvider(new ModelTypeInstanceProvider<Variable>() {
         public Variable newInstance(ModelTypeInstanceContext instanceContext) {

File: model-api/dmn-model/src/test/java/org/camunda/bpm/model/dmn/instance/DmnModelElementInstanceTest.java
Patch:
@@ -33,7 +33,7 @@ public static void initModelElementType() {
   }
 
   public String getDefaultNamespace() {
-    return DmnModelConstants.DMN11_NS;
+    return DmnModelConstants.LATEST_DMN_NS;
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -785,7 +785,7 @@ public abstract class ProcessEngineConfigurationImpl extends ProcessEngineConfig
 
   protected MetricsReporterIdProvider metricsReporterIdProvider;
 
-  protected boolean isTaskMetricsEnabled = false;
+  protected boolean isTaskMetricsEnabled = true;
 
   /**
    * the historic job log host name

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/Bpmn.java
Patch:
@@ -41,6 +41,7 @@
 import org.camunda.bpm.model.bpmn.impl.instance.camunda.CamundaConnectorImpl;
 import org.camunda.bpm.model.bpmn.impl.instance.camunda.CamundaConstraintImpl;
 import org.camunda.bpm.model.bpmn.impl.instance.camunda.CamundaEntryImpl;
+import org.camunda.bpm.model.bpmn.impl.instance.camunda.CamundaErrorEventDefinitionImpl;
 import org.camunda.bpm.model.bpmn.impl.instance.camunda.CamundaExecutionListenerImpl;
 import org.camunda.bpm.model.bpmn.impl.instance.camunda.CamundaExpressionImpl;
 import org.camunda.bpm.model.bpmn.impl.instance.camunda.CamundaFailedJobRetryTimeCycleImpl;
@@ -489,6 +490,7 @@ protected void doRegisterTypes(ModelBuilder bpmnModelBuilder) {
     CamundaConnectorIdImpl.registerType(bpmnModelBuilder);
     CamundaConstraintImpl.registerType(bpmnModelBuilder);
     CamundaEntryImpl.registerType(bpmnModelBuilder);
+    CamundaErrorEventDefinitionImpl.registerType(bpmnModelBuilder);
     CamundaExecutionListenerImpl.registerType(bpmnModelBuilder);
     CamundaExpressionImpl.registerType(bpmnModelBuilder);
     CamundaFailedJobRetryTimeCycleImpl.registerType(bpmnModelBuilder);

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/impl/BpmnModelConstants.java
Patch:
@@ -270,6 +270,7 @@ public final class BpmnModelConstants {
   public static final String CAMUNDA_ELEMENT_CONNECTOR_ID = "connectorId";
   public static final String CAMUNDA_ELEMENT_CONSTRAINT = "constraint";
   public static final String CAMUNDA_ELEMENT_ENTRY = "entry";
+  public static final String CAMUNDA_ELEMENT_ERROR_EVENT_DEFINITION = "errorEventDefinition";
   public static final String CAMUNDA_ELEMENT_EXECUTION_LISTENER = "executionListener";
   public static final String CAMUNDA_ELEMENT_EXPRESSION = "expression";
   public static final String CAMUNDA_ELEMENT_FAILED_JOB_RETRY_TIME_CYCLE = "failedJobRetryTimeCycle";

File: spring-boot-starter/starter/src/test/java/org/camunda/bpm/spring/boot/starter/configuration/impl/DefaultDeploymentConfigurationTest.java
Patch:
@@ -53,11 +53,11 @@ public void deploymentTest() throws IOException {
     defaultDeploymentConfiguration.preInit(configuration);
 
     final Resource[] resources = configuration.getDeploymentResources();
-    assertThat(resources).hasSize(9);
+    assertThat(resources).hasSize(10);
 
     assertThat(filenames(resources)).containsOnly("async-service-task.bpmn", "test.cmmn10.xml",
       "test.bpmn", "test.cmmn", "test.bpmn20.xml", "check-order.dmn", "eventing.bpmn",
-      "spin-java8-model.bpmn", "eventingWithTaskAssignee.bpmn");
+      "spin-java8-model.bpmn", "eventingWithTaskAssignee.bpmn","eventingWithBoundary.bpmn");
   }
 
   private Set<String> filenames(Resource[] resources) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/incident/IncidentHandler.java
Patch:
@@ -46,18 +46,18 @@ public interface IncidentHandler {
   public Incident handleIncident(IncidentContext context, String message);
 
   /**
-   * Called in situations in which an incidenthandler may wich to resolve existing incidents
+   * Called in situations in which an incident handler may wish to resolve existing incidents
    * The implementation receives this callback to enable it to resolve any open incidents that
    * may exist.
    */
   public void resolveIncident(IncidentContext context);
 
   /**
-   * Called in situations in which an incidenthandler may wich to delete existing incidents
+   * Called in situations in which an incident handler may wish to delete existing incidents
    * Example: when a scope is ended or a job is deleted. The implementation receives
    * this callback to enable it to delete any open incidents that may exist.
    */
   public void deleteIncident(IncidentContext context);
 
 }
- 
+

File: engine/src/main/java/org/camunda/bpm/engine/impl/calendar/DurationHelper.java
Patch:
@@ -154,8 +154,8 @@ private Duration parsePeriod(String period) {
 
   private Duration parsePnWDuration(String period) {
     String weeks = period.replaceAll("\\D", "");
-    int numberOfWeeks = Integer.parseInt(weeks);
-    return datatypeFactory.newDuration(numberOfWeeks * MS_PER_WEEK);
+    long duration = Long.parseLong(weeks) * MS_PER_WEEK;
+    return datatypeFactory.newDuration(duration);
   }
 
   private boolean isDuration(String time) {

File: clients/java/client/src/main/java/org/camunda/bpm/client/impl/ExternalTaskClientLogger.java
Patch:
@@ -151,7 +151,7 @@ protected ExternalTaskClientException interceptorNullException() {
 
   public ExternalTaskClientException maxTasksNotGreaterThanZeroException(Integer maxTasks) {
     return new ExternalTaskClientException(exceptionMessage(
-      "014", "Maximum amount of fetched tasks must be greater than zero, bus was '{}'", maxTasks));
+      "014", "Maximum amount of fetched tasks must be greater than zero, but was '{}'", maxTasks));
   }
 
   public ExternalTaskClientException asyncResponseTimeoutNotGreaterThanZeroException(Long asyncResponseTimeout) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/JobQueryImpl.java
Patch:
@@ -255,7 +255,7 @@ protected boolean hasExcludingConditions() {
     return super.hasExcludingConditions()
       || CompareUtil.areNotInAscendingOrder(priorityHigherThanOrEqual, priorityLowerThanOrEqual)
       || hasExcludingDueDateParameters()
-      || CompareUtil.areNotInAscendingOrder(createdBefore, createdAfter);
+      || CompareUtil.areNotInAscendingOrder(createdAfter, createdBefore);
   }
 
   private boolean hasExcludingDueDateParameters() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/context/Context.java
Patch:
@@ -87,7 +87,7 @@ public static void removeCommandInvocationContext() {
       }
     } else {
       // reset the MDC to the logging context of the outer command invocation
-      stack.peek().getProcessDataContext().updateMdc();
+      stack.peek().getProcessDataContext().updateMdcFromCurrentValues();
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/ExecuteJobHelper.java
Patch:
@@ -67,8 +67,7 @@ public static void executeJob(String nextJobId, CommandExecutor commandExecutor,
       // preserve MDC properties before listener invocation and clear MDC for job listener
       ProcessDataContext processDataContext = null;
       if (configuration != null) {
-        processDataContext = new ProcessDataContext(configuration);
-        processDataContext.fetchCurrentContext();
+        processDataContext = new ProcessDataContext(configuration, true);
         processDataContext.clearMdc();
       }
       // invoke job listener
@@ -79,7 +78,7 @@ public static void executeJob(String nextJobId, CommandExecutor commandExecutor,
        * of the listener is preserved and used from here on
        */
       if (processDataContext != null) {
-        processDataContext.updateMdc();
+        processDataContext.updateMdcFromCurrentValues();
       }
     }
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/ProcessInstantiationAtActivitiesHistoryTest.java
Patch:
@@ -221,7 +221,7 @@ public void testHistoricVariableInstanceSetOnProcessInstance() {
     // when
     ProcessInstance instance = runtimeService
       .createProcessInstanceByKey("exclusiveGateway")
-      // set the variables directly one the instance
+      // set the variables directly on the instance
       .setVariable("aVar", "aValue")
       .startBeforeActivity("task1")
       .execute();

File: engine-spring/core/src/main/java/org/camunda/bpm/engine/spring/SpringTransactionsProcessEngineConfiguration.java
Patch:
@@ -83,7 +83,7 @@ public ProcessEngine buildProcessEngine() {
     defaultCommandInterceptorsTxRequired.add(new LogInterceptor());
     defaultCommandInterceptorsTxRequired.add(new CommandCounterInterceptor(this));
     defaultCommandInterceptorsTxRequired.add(new ProcessApplicationContextInterceptor(this));
-    defaultCommandInterceptorsTxRequired.add(new SpringTransactionInterceptor(transactionManager, TransactionTemplate.PROPAGATION_REQUIRED));
+    defaultCommandInterceptorsTxRequired.add(new SpringTransactionInterceptor(transactionManager, TransactionTemplate.PROPAGATION_REQUIRED, this));
     CommandContextInterceptor commandContextInterceptor = new CommandContextInterceptor(commandContextFactory, this);
     defaultCommandInterceptorsTxRequired.add(commandContextInterceptor);
     return defaultCommandInterceptorsTxRequired;
@@ -99,7 +99,7 @@ public ProcessEngine buildProcessEngine() {
     defaultCommandInterceptorsTxRequiresNew.add(new LogInterceptor());
     defaultCommandInterceptorsTxRequiresNew.add(new CommandCounterInterceptor(this));
     defaultCommandInterceptorsTxRequiresNew.add(new ProcessApplicationContextInterceptor(this));
-    defaultCommandInterceptorsTxRequiresNew.add(new SpringTransactionInterceptor(transactionManager, TransactionTemplate.PROPAGATION_REQUIRES_NEW));
+    defaultCommandInterceptorsTxRequiresNew.add(new SpringTransactionInterceptor(transactionManager, TransactionTemplate.PROPAGATION_REQUIRES_NEW, this));
     CommandContextInterceptor commandContextInterceptor = new CommandContextInterceptor(commandContextFactory, this, true);
     defaultCommandInterceptorsTxRequiresNew.add(commandContextInterceptor);
     return defaultCommandInterceptorsTxRequiresNew;

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/JtaProcessEngineConfiguration.java
Patch:
@@ -73,7 +73,7 @@ protected void init() {
     defaultCommandInterceptorsTxRequired.add(new LogInterceptor());
     defaultCommandInterceptorsTxRequired.add(new CommandCounterInterceptor(this));
     defaultCommandInterceptorsTxRequired.add(new ProcessApplicationContextInterceptor(this));
-    defaultCommandInterceptorsTxRequired.add(new JtaTransactionInterceptor(transactionManager, false));
+    defaultCommandInterceptorsTxRequired.add(new JtaTransactionInterceptor(transactionManager, false, this));
     defaultCommandInterceptorsTxRequired.add(new CommandContextInterceptor(commandContextFactory, this));
     return defaultCommandInterceptorsTxRequired;
   }
@@ -89,7 +89,7 @@ protected void init() {
     defaultCommandInterceptorsTxRequiresNew.add(new LogInterceptor());
     defaultCommandInterceptorsTxRequiresNew.add(new CommandCounterInterceptor(this));
     defaultCommandInterceptorsTxRequiresNew.add(new ProcessApplicationContextInterceptor(this));
-    defaultCommandInterceptorsTxRequiresNew.add(new JtaTransactionInterceptor(transactionManager, true));
+    defaultCommandInterceptorsTxRequiresNew.add(new JtaTransactionInterceptor(transactionManager, true, this));
     defaultCommandInterceptorsTxRequiresNew.add(new CommandContextInterceptor(commandContextFactory, this, true));
     return defaultCommandInterceptorsTxRequiresNew;
   }

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ProcessInstanceRestServiceInteractionTest.java
Patch:
@@ -44,6 +44,7 @@
 import org.camunda.bpm.engine.BadUserRequestException;
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.batch.Batch;
+import org.camunda.bpm.engine.exception.NotFoundException;
 import org.camunda.bpm.engine.exception.NullValueException;
 import org.camunda.bpm.engine.history.HistoricProcessInstance;
 import org.camunda.bpm.engine.history.HistoricProcessInstanceQuery;
@@ -885,12 +886,11 @@ public void testDeleteProcessInstance() {
 
   @Test
   public void testDeleteNonExistingProcessInstance() {
-    doThrow(new ProcessEngineException("expected exception")).when(runtimeServiceMock).deleteProcessInstance(anyString(), anyString(), anyBoolean(), anyBoolean(), anyBoolean() ,anyBoolean());
+    doThrow(new NotFoundException()).when(runtimeServiceMock).deleteProcessInstance(anyString(), anyString(), anyBoolean(), anyBoolean(), anyBoolean() ,anyBoolean());
 
     given().pathParam("id", MockProvider.EXAMPLE_PROCESS_INSTANCE_ID)
       .then().expect().statusCode(Status.NOT_FOUND.getStatusCode()).contentType(ContentType.JSON)
       .body("type", equalTo(InvalidRequestException.class.getSimpleName()))
-      .body("message", equalTo("Process instance with id " + MockProvider.EXAMPLE_PROCESS_INSTANCE_ID + " does not exist"))
       .when().delete(SINGLE_PROCESS_INSTANCE_URL);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AbstractDeleteProcessInstanceCmd.java
Patch:
@@ -24,6 +24,7 @@
 
 import org.camunda.bpm.engine.BadUserRequestException;
 import org.camunda.bpm.engine.delegate.DelegateExecution;
+import org.camunda.bpm.engine.exception.NotFoundException;
 import org.camunda.bpm.engine.history.UserOperationLogEntry;
 import org.camunda.bpm.engine.impl.ProcessInstanceModificationBuilderImpl;
 import org.camunda.bpm.engine.impl.cfg.CommandChecker;
@@ -78,7 +79,8 @@ protected void deleteProcessInstance(
       return;
     }
 
-    ensureNotNull(BadUserRequestException.class, "No process instance found for id '" + processInstanceId + "'", "processInstance", execution);
+    ensureNotNull(NotFoundException.class, "No process instance found for id '" + processInstanceId + "'",
+        "processInstance", execution);
 
     checkDeleteProcessInstance(execution, commandContext);
 

File: engine/src/main/java/org/camunda/bpm/engine/TaskService.java
Patch:
@@ -25,6 +25,7 @@
 import org.camunda.bpm.engine.authorization.ProcessDefinitionPermissions;
 import org.camunda.bpm.engine.authorization.Resources;
 import org.camunda.bpm.engine.authorization.TaskPermissions;
+import org.camunda.bpm.engine.exception.NotFoundException;
 import org.camunda.bpm.engine.exception.NullValueException;
 import org.camunda.bpm.engine.history.UserOperationLogEntry;
 import org.camunda.bpm.engine.history.UserOperationLogQuery;
@@ -1157,7 +1158,8 @@ public interface TaskService {
    * @param taskId the id of an existing active task
    * @param errorCode the error code of the corresponding bmpn error
    *
-   * @throws NullValueException if no task with the given id exists
+   * @throws NotFoundException if no task with the given id exists
+   * @throws BadUserRequestException if task id or error code were null or empty
    * @throws SuspendedEntityInteractionException if the task is suspended
    * @throws AuthorizationException if the user has none of the following permissions:
    * <li>{@link Permissions#TASK_WORK} permission on {@link Resources#TASK} or

File: engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/TelemetryRegistry.java
Patch:
@@ -36,6 +36,9 @@ public class TelemetryRegistry {
   protected boolean isCollectingTelemetryDataEnabled = false;
 
   public synchronized ApplicationServer getApplicationServer() {
+    if (applicationServer == null) {
+      applicationServer = PlatformTelemetryRegistry.getApplicationServer();
+    }
     return applicationServer;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/test/ProcessEngineRule.java
Patch:
@@ -37,6 +37,7 @@
 import org.camunda.bpm.engine.TaskService;
 import org.camunda.bpm.engine.impl.ProcessEngineImpl;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
+import org.camunda.bpm.engine.impl.telemetry.PlatformTelemetryRegistry;
 import org.camunda.bpm.engine.impl.test.TestHelper;
 import org.camunda.bpm.engine.impl.util.ClockUtil;
 import org.junit.Assume;
@@ -237,6 +238,8 @@ public void finished(Description description) {
 
 
     clearServiceReferences();
+
+    PlatformTelemetryRegistry.clear();
   }
 
   public void setCurrentTime(Date currentTime) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ModifyProcessInstanceCmd.java
Patch:
@@ -83,7 +83,7 @@ public Void execute(CommandContext commandContext) {
 
     processInstance = executionManager.findExecutionById(processInstanceId);
 
-    if (!processInstance.hasChildren()) {
+    if (!processInstance.hasChildren() && !processInstance.isCanceled() && !processInstance.isRemoved()) {
       if (processInstance.getActivity() == null) {
         // process instance was cancelled
         checkDeleteProcessInstance(processInstance, commandContext);

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -876,8 +876,8 @@ public void parseStartEvents(Element parentElement, ScopeImpl scope) {
         parseExecutionListenersOnScope(startEventElement, startEventActivity);
       }
     } else {
-      if (parentElement.getTagName().equals("subProcess") ) {
-        addError("subProcess must define a startEvent element", parentElement);
+      if (Arrays.asList("process", "subProcess").contains(parentElement.getTagName())) {
+        addError(parentElement.getTagName() + " must define a startEvent element", parentElement);
       }
     }
     if (scope instanceof ProcessDefinitionEntity) {

File: qa/integration-tests-webapps/integration-tests/src/main/java/org/camunda/bpm/LoginIT.java
Patch:
@@ -58,7 +58,9 @@ public void login() throws InterruptedException {
 
     wait.until(presenceOfElementLocated(By.cssSelector("button[type=\"submit\"]")))
         .submit();
-
+    
+    Thread.sleep(200);
+    
     wait.until(presenceOfElementLocated(By.cssSelector(".modal-close")))
         .click();
   }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/task/TaskQueryDto.java
Patch:
@@ -1552,7 +1552,7 @@ public static TaskQueryDto fromQuery(Query<?, ?> query, boolean isOrQueryActive)
       dto.delegationState = taskQuery.getDelegationState().toString();
     }
 
-    if (taskQuery.isTenantIdSet()) {
+    if (taskQuery.isWithoutTenantId()) {
       if (taskQuery.getTenantIds() != null) {
         dto.tenantIdIn = taskQuery.getTenantIds();
       } else {

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/FilterRestServiceInteractionTest.java
Patch:
@@ -296,7 +296,7 @@ public void testGetFilterWithTaskQuery() {
     when(query.getOwner()).thenReturn(MockProvider.EXAMPLE_TASK_OWNER);
     when(query.getParentTaskId()).thenReturn(MockProvider.EXAMPLE_TASK_PARENT_TASK_ID);
     when(query.getTenantIds()).thenReturn(MockProvider.EXAMPLE_TENANT_ID_LIST.split(","));
-    when(query.isTenantIdSet()).thenReturn(true);
+    when(query.isWithoutTenantId()).thenReturn(true);
 
     filterMock = MockProvider.createMockFilter(EXAMPLE_FILTER_ID, query);
     when(filterServiceMock.getFilter(EXAMPLE_FILTER_ID)).thenReturn(filterMock);

File: engine/src/test/java/org/camunda/bpm/engine/test/api/multitenancy/MultiTenancyFilterServiceTest.java
Patch:
@@ -68,7 +68,7 @@ public void testCreateFilterWithNoTenantIdCriteria() {
     Filter savedFilter = filterService.getFilter(filterId);
     TaskQueryImpl savedQuery = savedFilter.getQuery();
 
-    assertThat(savedQuery.isTenantIdSet(), is(true));
+    assertThat(savedQuery.isWithoutTenantId(), is(true));
     assertThat(savedQuery.getTenantIds(), is(nullValue()));
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/CamundaIntegration.java
Patch:
@@ -20,8 +20,8 @@ public class CamundaIntegration {
 
   public static final String SPRING_BOOT_STARTER = "spring-boot-starter";
   public static final String CAMUNDA_BPM_RUN = "camunda-bpm-run";
-  public static final String WILDFLY_SUBSYSTEM = "wildfly-sybsystem";
-  public static final String JBOSS_SUBSYSTEM = "jboss-sybsystem";
+  public static final String WILDFLY_SUBSYSTEM = "wildfly-subsystem";
+  public static final String JBOSS_SUBSYSTEM = "jboss-subsystem";
   public static final String CAMUNDA_EJB_SERVICE = "camunda-ejb-service";
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetryReporter.java
Patch:
@@ -123,6 +123,8 @@ public synchronized void stop(boolean report) {
       timer.cancel();
       timer = null;
 
+      // sending initial message only upon start
+      telemetrySendingTask.sendInitialMessage = false;
       if (report) {
         // collect and send manually for the last time
         reportNow();

File: engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/dto/Internals.java
Patch:
@@ -57,6 +57,7 @@ public Internals(Database database, ApplicationServer server, LicenseKeyData lic
 
   public Internals(Internals internals) {
     this(internals.database, internals.applicationServer, internals.licenseKey, internals.jdk);
+    this.camundaIntegration = internals.camundaIntegration == null ? null : new HashSet<>(internals.getCamundaIntegration());
     this.commands = new HashMap<>(internals.getCommands());
     this.metrics = internals.metrics == null ? null : new HashMap<>(internals.getMetrics());
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/externaltask/ExternalTaskQueryTest.java
Patch:
@@ -676,7 +676,6 @@ public void testQueryListByBusinessKey() {
     }
   }
 
-  @Ignore("https://jira.camunda.com/browse/CAM-12333")
   @Test
   public void shouldCheckPresenceOfVersionTag() {
     BpmnModelInstance process = Bpmn.createExecutableProcess("process")

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/StandaloneProcessEngineConfiguration.java
Patch:
@@ -24,7 +24,6 @@
 import org.camunda.bpm.engine.impl.interceptor.CommandContextInterceptor;
 import org.camunda.bpm.engine.impl.interceptor.CommandCounterInterceptor;
 import org.camunda.bpm.engine.impl.interceptor.CommandInterceptor;
-import org.camunda.bpm.engine.impl.interceptor.CrdbTransactionRetryInterceptor;
 import org.camunda.bpm.engine.impl.interceptor.LogInterceptor;
 import org.camunda.bpm.engine.impl.interceptor.ProcessApplicationContextInterceptor;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/entitymanager/OptimisticLockingListener.java
Patch:
@@ -43,6 +43,8 @@ public interface OptimisticLockingListener {
    * Signifies that an operation failed due to optimistic locking.
    *
    * @param operation the failed operation.
+   * @return {@link OptimisticLockingResult} that instructs the caller how to handle
+   *            the result of the failed operation.
    */
   OptimisticLockingResult failedOperation(DbOperation operation);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/interceptor/Command.java
Patch:
@@ -26,9 +26,9 @@ public interface Command <T> {
   T execute(CommandContext commandContext);
 
   /**
-   * @return true if the {@link CrdbTransactionRetryInterceptor} will
+   * @return true if the {@link CrdbTransactionRetryInterceptor}
    *   can make a transparent retry of this command upon failure
-   *   with {@link CrdbTransactionRetryException}.
+   *   with a {@link CrdbTransactionRetryException} (only used when running on CockroachDB).
    */
   default boolean isRetryable() {
     return false;

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExternalTaskManager.java
Patch:
@@ -38,6 +38,7 @@
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.persistence.AbstractManager;
 import org.camunda.bpm.engine.impl.util.ClockUtil;
+import org.camunda.bpm.engine.impl.util.DatabaseUtil;
 import org.camunda.bpm.engine.impl.util.ImmutablePair;
 
 /**
@@ -84,9 +85,8 @@ public List<ExternalTaskEntity> selectExternalTasksForTopics(Collection<TopicFet
     List<QueryOrderingProperty> orderingProperties = new ArrayList<>();
     orderingProperties.add(EXT_TASK_PRIORITY_ORDERING_PROPERTY);
     parameters.put("orderingProperties", orderingProperties);
-    String databaseType = Context.getProcessEngineConfiguration().getDatabaseType();
     parameters.put("usesPostgres",
-        DbSqlSessionFactory.POSTGRES.equals(databaseType) || DbSqlSessionFactory.CRDB.equals(databaseType));
+        DatabaseUtil.checkDatabaseType(DbSqlSessionFactory.POSTGRES, DbSqlSessionFactory.CRDB));
 
     ListQueryParameterObject parameter = new ListQueryParameterObject(parameters, 0, maxResults);
     configureQuery(parameter);

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/metrics/AbstractMetricsTest.java
Patch:
@@ -55,7 +55,7 @@ public abstract class AbstractMetricsTest {
   protected ManagementService managementService;
 
   @Before
-  public void initializeServices() throws Exception {
+  public void initializeServices() {
     processEngineConfiguration = engineRule.getProcessEngineConfiguration();
     runtimeService = engineRule.getRuntimeService();
     taskService = engineRule.getTaskService();
@@ -68,7 +68,7 @@ public void initializeServices() throws Exception {
   }
 
   @After
-  public void cleanUpMetrics() throws Exception {
+  public void cleanUpMetrics() {
     clearMetrics();
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/ConcurrentHistoryCleanupTest.java
Patch:
@@ -94,7 +94,7 @@ public void testRunTwoHistoryCleanups() throws InterruptedException {
     assertEquals(1, historyCleanupJobs.size());
 
     assertNull(thread1.getException());
-    if (testRule.databaseSupportsIgnoredOLE()) {
+    if (testRule.isOptimisticLockingExceptionSuppressible()) {
       assertNull(thread2.getException());
     } else {
       assertThat(thread2.getException()).isInstanceOf(OptimisticLockingException.class);

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/partitioning/AbstractPartitioningTest.java
Patch:
@@ -42,7 +42,7 @@ public void setUp() throws Exception {
     processEngine.getProcessEngineConfiguration().setSkipHistoryOptimisticLockingExceptions(true);
   }
 
-  final protected BpmnModelInstance PROCESS_WITH_USERTASK = Bpmn.createExecutableProcess("process")
+  protected final BpmnModelInstance PROCESS_WITH_USERTASK = Bpmn.createExecutableProcess("process")
     .startEvent()
       .userTask()
     .endEvent().done();

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/JobAcquisitionBackoffTest.java
Patch:
@@ -125,7 +125,7 @@ public void testBackoffOnOptimisticLocking() {
     Assert.assertEquals(1, jobExecutor2WaitEvents.size());
     RecordedWaitEvent waitEvent = jobExecutor2WaitEvents.get(0);
 
-    if (testRule.databaseSupportsIgnoredOLE()) {
+    if (testRule.isOptimisticLockingExceptionSuppressible()) {
       // we don't know the exact wait time,
       // since there is random jitter applied
       JobAcquisitionTestHelper.assertInBetween(BASE_BACKOFF_TIME, BASE_BACKOFF_TIME + BASE_BACKOFF_TIME / 2, waitEvent.getTimeBetweenAcquisitions());
@@ -162,7 +162,7 @@ public void testBackoffOnOptimisticLocking() {
     RecordedWaitEvent secondWaitEvent = jobExecutor2WaitEvents.get(1);
     long expectedBackoffTime = BASE_BACKOFF_TIME * BACKOFF_FACTOR; // 1000 * 2^1
 
-    if (testRule.databaseSupportsIgnoredOLE()) {
+    if (testRule.isOptimisticLockingExceptionSuppressible()) {
       // then thread 2 has tried to acquire 6 jobs this time
       Assert.assertEquals(6, secondAcquisitionAttempt.getNumJobsToAcquire());
       // and again increased its backoff
@@ -219,7 +219,7 @@ public void testBackoffDecrease() {
     acquisitionThread2.makeContinueAndWaitForSync(); // acquire
     acquisitionThread2.makeContinueAndWaitForSync(); // continue after acquisition with next cycle
 
-    if (testRule.databaseSupportsIgnoredOLE()) {
+    if (testRule.isOptimisticLockingExceptionSuppressible()) {
       for (int i = 1; i < BACKOFF_DECREASE_THRESHOLD; i++) {
         // backoff has not decreased yet
         Assert.assertTrue(jobExecutor2WaitEvents.get(i).getTimeBetweenAcquisitions() > 0);

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/JobAcquisitionTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.util.List;
 
-import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.impl.ProcessEngineImpl;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.test.Deployment;
@@ -117,7 +116,7 @@ public void testJobLockingFailure() {
     List<RecordedWaitEvent> jobExecutor2WaitEvents = jobExecutor2.getAcquireJobsRunnable().getWaitEvents();
     Assert.assertEquals(1, jobExecutor2WaitEvents.size());
 
-    if (testRule.databaseSupportsIgnoredOLE()) {
+    if (testRule.isOptimisticLockingExceptionSuppressible()) {
       Assert.assertEquals(0, jobExecutor2WaitEvents.get(0).getTimeBetweenAcquisitions());
     } else {
       // In CRDB, Job Acquisition failures result in a complete rollback and retry of the transaction.

File: engine/src/main/java/org/camunda/bpm/engine/OptimisticLockingException.java
Patch:
@@ -32,4 +32,7 @@ public OptimisticLockingException(String message) {
     super(message);
   }
 
+  public OptimisticLockingException(String message, Throwable throwable) {
+    super(message, throwable);
+  }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/interceptor/Command.java
Patch:
@@ -24,5 +24,5 @@
 public interface Command <T> {
 
   T execute(CommandContext commandContext);
-  
+
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/interceptor/CommandInvocationContext.java
Patch:
@@ -23,14 +23,17 @@
 import org.apache.ibatis.exceptions.PersistenceException;
 import org.camunda.bpm.application.InvocationContext;
 import org.camunda.bpm.application.ProcessApplicationReference;
+import org.camunda.bpm.engine.CrdbTransactionRetryException;
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.impl.ProcessEngineLogger;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.impl.cmd.CommandLogger;
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.context.ProcessApplicationContextUtil;
+import org.camunda.bpm.engine.impl.db.sql.DbSqlSessionFactory;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 import org.camunda.bpm.engine.impl.pvm.runtime.AtomicOperation;
+import org.camunda.bpm.engine.impl.util.ExceptionUtil;
 
 /**
  * In contrast to {@link CommandContext}, this context holds resources that are only valid

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -1695,6 +1695,7 @@ public static void initSqlSessionFactoryProperties(Properties properties, String
       properties.put("orderBy", DbSqlSessionFactory.databaseSpecificOrderByStatements.get(databaseType));
       properties.put("limitBeforeNativeQuery", DbSqlSessionFactory.databaseSpecificLimitBeforeNativeQueryStatements.get(databaseType));
       properties.put("distinct", DbSqlSessionFactory.databaseSpecificDistinct.get(databaseType));
+      properties.put("numericCast", DbSqlSessionFactory.databaseSpecificNumericCast.get(databaseType));
 
       properties.put("countDistinctBeforeStart", DbSqlSessionFactory.databaseSpecificCountDistinctBeforeStart.get(databaseType));
       properties.put("countDistinctBeforeEnd", DbSqlSessionFactory.databaseSpecificCountDistinctBeforeEnd.get(databaseType));

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExternalTaskManager.java
Patch:
@@ -85,7 +85,8 @@ public List<ExternalTaskEntity> selectExternalTasksForTopics(Collection<TopicFet
     orderingProperties.add(EXT_TASK_PRIORITY_ORDERING_PROPERTY);
     parameters.put("orderingProperties", orderingProperties);
     String databaseType = Context.getProcessEngineConfiguration().getDatabaseType();
-    parameters.put("usesPostgres", DbSqlSessionFactory.POSTGRES.equals(databaseType));
+    parameters.put("usesPostgres",
+        DbSqlSessionFactory.POSTGRES.equals(databaseType) || DbSqlSessionFactory.CRDB.equals(databaseType));
 
     ListQueryParameterObject parameter = new ListQueryParameterObject(parameters, 0, maxResults);
     configureQuery(parameter);

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TableDataManager.java
Patch:
@@ -254,7 +254,9 @@ public TableMetaData getTableMetaData(String tableName) {
             .getConnection()
             .getMetaData();
 
-        if (DbSqlSessionFactory.POSTGRES.equals(getDbSqlSession().getDbSqlSessionFactory().getDatabaseType())) {
+        String databaseType = getDbSqlSession().getDbSqlSessionFactory().getDatabaseType();
+        if (DbSqlSessionFactory.POSTGRES.equals(databaseType)
+            || DbSqlSessionFactory.CRDB.equals(databaseType)) {
           tableName = tableName.toLowerCase();
         }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java
Patch:
@@ -603,7 +603,7 @@ public void configureTaskQuery(TaskQueryImpl query) {
       CompositePermissionCheck permissionCheck = new PermissionCheckBuilder()
               .disjunctive()
               .atomicCheck(TASK, "RES.ID_", READ)
-              .atomicCheck(PROCESS_DEFINITION, "PROCDEF.KEY_", READ_TASK)
+              .atomicCheck(PROCESS_DEFINITION, "D.KEY_", READ_TASK)
               .build();
         addPermissionCheck(query.getAuthCheck(), permissionCheck);
     }

File: webapps/src/main/java/org/camunda/bpm/webapp/plugin/resource/AbstractAppPluginRootResource.java
Patch:
@@ -74,13 +74,13 @@ public class AbstractAppPluginRootResource<T extends AppPlugin> {
   public static final String MIME_TYPE_TEXT_JAVASCRIPT = "text/javascript";
 
   @Context
-  private ServletContext servletContext;
+  protected ServletContext servletContext;
 
   @Context
-  private HttpHeaders headers;
+  protected HttpHeaders headers;
 
   @Context
-  private UriInfo uriInfo;
+  protected UriInfo uriInfo;
 
   private final String pluginName;
 

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/telemetry/TelemetryTaskWorkerMetricsTest.java
Patch:
@@ -150,7 +150,8 @@ public void shouldNotSendTelemetryWithTaskWorkersMetrics() {
                           data,
                           configuration.getTelemetryHttpConnector(),
                           configuration.getTelemetryRegistry(),
-                          configuration.getMetricsRegistry()).reportNow();
+                          configuration.getMetricsRegistry(),
+                          configuration.getTelemetryRequestTimeout()).reportNow();
 
     // then
     verify(postRequestedFor(urlEqualTo(TELEMETRY_ENDPOINT_PATH))

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/telemetry/TelemetryConnectPluginTest.java
Patch:
@@ -130,7 +130,8 @@ public void shouldSendTelemetryData() {
                                                                 data,
                                                                 configuration.getTelemetryHttpConnector(),
                                                                 configuration.getTelemetryRegistry(),
-                                                                configuration.getMetricsRegistry());
+                                                                configuration.getMetricsRegistry(),
+                                                                configuration.getTelemetryRequestTimeout());
 
     // when
     telemetryReporter.reportNow();

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/telemetry/TelemetryConnectPluginTest.java
Patch:
@@ -129,7 +129,8 @@ public void shouldSendTelemetryData() {
                                                                 configuration.getTelemetryReportingPeriod(),
                                                                 data,
                                                                 configuration.getTelemetryHttpConnector(),
-                                                                configuration.getTelemetryRegistry());
+                                                                configuration.getTelemetryRegistry(),
+                                                                configuration.getMetricsRegistry());
 
     // when
     telemetryReporter.reportNow();

File: engine/src/main/java/org/camunda/bpm/engine/impl/BootstrapEngineCommand.java
Patch:
@@ -31,7 +31,6 @@
 import org.camunda.bpm.engine.impl.telemetry.dto.Data;
 import org.camunda.bpm.engine.impl.telemetry.dto.LicenseKeyData;
 import org.camunda.bpm.engine.impl.telemetry.reporter.TelemetryReporter;
-import org.camunda.bpm.engine.impl.util.ClockUtil;
 import org.camunda.bpm.engine.impl.util.LicenseKeyUtil;
 
 /**
@@ -224,8 +223,6 @@ protected void startTelemetryReporter(CommandContext commandContext) {
     if (telemetryReporter != null && telemetryReporterActivate) {
       try {
         telemetryReporter.start();
-        // set start report time
-        processEngineConfiguration.getTelemetryRegistry().setStartReportTime(ClockUtil.getCurrentTime());
       } catch (Exception e) {
         ProcessEngineLogger.TELEMETRY_LOGGER.schedulingTaskFailsOnEngineStart(e);
       }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/TelemetryConfigureCmd.java
Patch:
@@ -65,8 +65,6 @@ protected void toggleTelemetry(CommandContext commandContext) {
 
     if (isReportedActivated && currentValue != null && !currentValue.booleanValue() && telemetryEnabled) {
       telemetryReporter.reschedule();
-      // set start report time
-      processEngineConfiguration.getTelemetryRegistry().setStartReportTime(ClockUtil.getCurrentTime());
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/metrics/reporter/MetricsCollectionTask.java
Patch:
@@ -65,7 +65,7 @@ public void run() {
   protected void collectMetrics() {
 
     final List<MeterLogEntity> logs = new ArrayList<MeterLogEntity>();
-    for (Meter meter : metricsRegistry.getMeters().values()) {
+    for (Meter meter : metricsRegistry.getDbMeters().values()) {
       logs.add(new MeterLogEntity(meter.getName(),
           reporterId,
           meter.getAndClear(),

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/MeterLogManager.java
Patch:
@@ -54,7 +54,7 @@ public Long executeSelectSum(MetricsQueryImpl query) {
       // add current unlogged count
       Meter meter = Context.getProcessEngineConfiguration()
         .getMetricsRegistry()
-        .getMeterByName(query.getName());
+        .getDbMeterByName(query.getName());
       if(meter != null) {
         result += meter.get();
       }
@@ -69,7 +69,7 @@ public List<MetricIntervalValue> executeSelectInterval(MetricsQueryImpl query) {
 
     String reporterId = Context.getProcessEngineConfiguration().getDbMetricsReporter().getMetricsCollectionTask().getReporter();
     if (!intervalResult.isEmpty() && isEndTimeAfterLastReportInterval(query) && reporterId != null) {
-      Map<String, Meter> metrics = Context.getProcessEngineConfiguration().getMetricsRegistry().getMeters();
+      Map<String, Meter> metrics = Context.getProcessEngineConfiguration().getMetricsRegistry().getDbMeters();
       String queryName = query.getName();
       //we have to add all unlogged metrics to last interval
       if (queryName != null) {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/HistoryCleanupAuthorizationTest.java
Patch:
@@ -214,7 +214,7 @@ public Void execute(CommandContext commandContext) {
   }
 
   protected void clearMetrics() {
-    Collection<Meter> meters = processEngineConfiguration.getMetricsRegistry().getMeters().values();
+    Collection<Meter> meters = processEngineConfiguration.getMetricsRegistry().getDbMeters().values();
     for (Meter meter : meters) {
       meter.getAndClear();
     }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/HistoricInstanceForCleanupQueryTest.java
Patch:
@@ -85,7 +85,7 @@ public void clearDatabase() {
   }
 
   protected void clearMetrics() {
-    Collection<Meter> meters = processEngineConfiguration.getMetricsRegistry().getMeters().values();
+    Collection<Meter> meters = processEngineConfiguration.getMetricsRegistry().getDbMeters().values();
     for (Meter meter : meters) {
       meter.getAndClear();
     }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/HistoryCleanupDmnDisabledTest.java
Patch:
@@ -100,7 +100,7 @@ public Void execute(CommandContext commandContext) {
   }
 
   protected void clearMetrics() {
-    Collection<Meter> meters = processEngineConfiguration.getMetricsRegistry().getMeters().values();
+    Collection<Meter> meters = processEngineConfiguration.getMetricsRegistry().getDbMeters().values();
     for (Meter meter : meters) {
       meter.getAndClear();
     }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/HistoryCleanupTest.java
Patch:
@@ -217,7 +217,7 @@ public Void execute(CommandContext commandContext) {
   }
 
   protected void clearMetrics() {
-    Collection<Meter> meters = processEngineConfiguration.getMetricsRegistry().getMeters().values();
+    Collection<Meter> meters = processEngineConfiguration.getMetricsRegistry().getDbMeters().values();
     for (Meter meter : meters) {
       meter.getAndClear();
     }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/metrics/AbstractMetricsIntervalTest.java
Patch:
@@ -70,7 +70,7 @@ public abstract class AbstractMetricsIntervalTest {
 
   protected void generateMeterData(long dataCount, long interval) {
     //set up for randomnes
-    Set<String> metricNames = metricsRegistry.getMeters().keySet();
+    Set<String> metricNames = metricsRegistry.getDbMeters().keySet();
     metricsCount = metricNames.size();
 
     //start date is the default interval since mariadb can't set 0 as timestamp
@@ -94,7 +94,7 @@ protected void generateMeterData(long dataCount, long interval) {
   }
 
   protected void reportMetrics() {
-    for (String metricName : metricsRegistry.getMeters().keySet()) {
+    for (String metricName : metricsRegistry.getDbMeters().keySet()) {
       //mark random occurence
       long occurence = (long) (rand.nextInt((MAX_OCCURENCE - MIN_OCCURENCE) + 1) + MIN_OCCURENCE);
       metricsRegistry.markOccurrence(metricName, occurence);
@@ -109,7 +109,7 @@ protected void clearMetrics() {
   }
 
   protected void clearLocalMetrics() {
-    Collection<Meter> meters = processEngineConfiguration.getMetricsRegistry().getMeters().values();
+    Collection<Meter> meters = processEngineConfiguration.getMetricsRegistry().getDbMeters().values();
     for (Meter meter : meters) {
       meter.getAndClear();
     }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/metrics/AbstractMetricsTest.java
Patch:
@@ -73,7 +73,7 @@ public void cleanUpMetrics() throws Exception {
   }
 
   protected void clearMetrics() {
-    Collection<Meter> meters = processEngineConfiguration.getMetricsRegistry().getMeters().values();
+    Collection<Meter> meters = processEngineConfiguration.getMetricsRegistry().getDbMeters().values();
     for (Meter meter : meters) {
       meter.getAndClear();
     }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/metrics/MetricsTest.java
Patch:
@@ -58,7 +58,7 @@ public class MetricsTest {
   protected static ManagementService managementService;
 
   protected static void clearMetrics() {
-    Collection<Meter> meters = processEngineConfiguration.getMetricsRegistry().getMeters().values();
+    Collection<Meter> meters = processEngineConfiguration.getMetricsRegistry().getDbMeters().values();
     for (Meter meter : meters) {
       meter.getAndClear();
     }

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/telemetry/TelemetryTaskWorkerMetricsSuiteElement.java
Patch:
@@ -117,7 +117,7 @@ public void tearDown() {
   }
 
   protected void clearMetrics() {
-    Collection<Meter> meters = configuration.getMetricsRegistry().getMeters().values();
+    Collection<Meter> meters = configuration.getMetricsRegistry().getDbMeters().values();
     for (Meter meter : meters) {
       meter.getAndClear();
     }
@@ -150,7 +150,8 @@ public void shouldNotSendTelemetryWithTaskWorkersMetrics() {
                           1000,
                           data,
                           configuration.getTelemetryHttpConnector(),
-                          configuration.getTelemetryRegistry()).reportNow();
+                          configuration.getTelemetryRegistry(),
+                          configuration.getMetricsRegistry()).reportNow();
 
     // then
     verify(postRequestedFor(urlEqualTo(TELEMETRY_ENDPOINT_PATH))

File: qa/performance-tests-engine/src/main/java/org/camunda/bpm/qa/performance/engine/loadgenerator/tasks/GenerateMetricsTask.java
Patch:
@@ -91,7 +91,7 @@ public void run() {
     //set up
     long startTime = START_TIME.get();
     MetricsRegistry metricsRegistry = processEngineConfiguration.getMetricsRegistry();
-    Set<String> metricNames = metricsRegistry.getMeters().keySet();
+    Set<String> metricNames = metricsRegistry.getDbMeters().keySet();
 
     //generate metric
     for (int i = 0; i < ITERATION_PER_EXECUTION; i++) {

File: engine/src/test/java/org/camunda/bpm/engine/test/persistence/SuppressSqlExceptionsTest.java
Patch:
@@ -44,6 +44,7 @@
 import org.camunda.bpm.model.bpmn.BpmnModelInstance;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.RuleChain;
@@ -171,6 +172,7 @@ public void shouldThrowExceptionOnSingleRowSelection() {
         .isInstanceOf(PersistenceException.class);
   }
 
+  @Ignore("https://jira.camunda.com/browse/CAM-12466")
   @Test
   public void shouldThrowExceptionOnInsert_ColumnSizeExceeded() {
     // given

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -2665,7 +2665,7 @@ protected void initTelemetryData() {
 
     Jdk jdk = ParseUtil.parseJdkDetails();
 
-    Internals internals = new Internals(database, telemetryRegistry.getApplicationServer(), jdk);
+    Internals internals = new Internals(database, telemetryRegistry.getApplicationServer(), telemetryRegistry.getLicenseKey(), jdk);
 
     String camundaIntegration = telemetryRegistry.getCamundaIntegration();
     if (camundaIntegration != null && !camundaIntegration.isEmpty()) {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/telemetry/TelemetryRegistryCounterTest.java
Patch:
@@ -78,13 +78,14 @@ public void shouldCountCommandsFromEngineStart() {
     // then
     TelemetryRegistry telemetryRegistry = processEngineInMem.getProcessEngineConfiguration().getTelemetryRegistry();
     Map<String, CommandCounter> entries = telemetryRegistry.getCommands();
-    assertThat(entries.size()).isEqualTo(5);
+    assertThat(entries.size()).isEqualTo(6);
     assertThat(entries.keySet()).containsExactlyInAnyOrder(
         "SchemaOperationsProcessEngineBuild",
         "HistoryLevelSetupCommand",
         "GetTableMetaDataCmd",
         "HistoryCleanupCmd",
-        "BootstrapEngineCommand");
+        "BootstrapEngineCommand",
+        "GetLicenseKeyCmd");
     for (String commandName : entries.keySet()) {
       assertThat(entries.get(commandName).get()).isEqualTo(1);
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/SimpleDbSqlSession.java
Patch:
@@ -23,12 +23,12 @@
 import java.util.List;
 
 import org.apache.ibatis.session.ExecutorType;
+import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.impl.db.DbEntity;
 import org.camunda.bpm.engine.impl.db.FlushResult;
 import org.camunda.bpm.engine.impl.db.entitymanager.operation.DbBulkOperation;
 import org.camunda.bpm.engine.impl.db.entitymanager.operation.DbEntityOperation;
 import org.camunda.bpm.engine.impl.db.entitymanager.operation.DbOperation;
-import org.camunda.bpm.engine.impl.db.entitymanager.operation.DbOperation.State;
 
 /**
  * For mybatis {@link ExecutorType#SIMPLE}
@@ -47,7 +47,7 @@ public SimpleDbSqlSession(DbSqlSessionFactory dbSqlSessionFactory, Connection co
 
   @Override
   protected void executeSelectForUpdate(String statement, Object parameter) {
-    sqlSession.update(statement, parameter);
+    update(statement, parameter);
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/impl/interceptor/CommandInvocationContext.java
Patch:
@@ -149,8 +149,6 @@ public void rethrow() {
     if (throwable != null) {
       if (throwable instanceof Error) {
         throw (Error) throwable;
-      } else if (throwable instanceof PersistenceException) {
-        throw new ProcessEngineException("Process engine persistence exception", throwable);
       } else if (throwable instanceof RuntimeException) {
         throw (RuntimeException) throwable;
       } else {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/cfg/PersistenceExceptionTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.camunda.bpm.engine.test.api.cfg;
 
-import static org.junit.Assert.assertTrue;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 
 import org.camunda.bpm.engine.ProcessEngineConfiguration;
@@ -67,7 +67,8 @@ public void testPersistenceExceptionContainsRealCause() {
       runtimeService.startProcessInstanceByKey("process1").getId();
       fail("persistence exception is expected");
     } catch (ProcessEngineException ex) {
-      assertTrue(ex.getMessage().contains("insertHistoricTaskInstanceEvent"));
+      Throwable cause = ex.getCause();
+      assertThat(cause.getMessage()).contains("insertHistoricTaskInstanceEvent");
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -2665,7 +2665,7 @@ protected void initTelemetryData() {
 
     Jdk jdk = ParseUtil.parseJdkDetails();
 
-    Internals internals = new Internals(database, telemetryRegistry.getApplicationServer(), jdk);
+    Internals internals = new Internals(database, telemetryRegistry.getApplicationServer(), telemetryRegistry.getLicenseKey(), jdk);
 
     String camundaIntegration = telemetryRegistry.getCamundaIntegration();
     if (camundaIntegration != null && !camundaIntegration.isEmpty()) {

File: engine-spring/core/src/test/java/org/camunda/bpm/engine/spring/test/autodeployment/SpringAutoDeployTest.java
Patch:
@@ -64,7 +64,7 @@ public class SpringAutoDeployTest extends PvmTestCase {
       = "org/camunda/bpm/engine/spring/test/autodeployment/SpringAutoDeployCustomNameTest-context.xml";
 
 
-  protected ApplicationContext applicationContext;
+  protected ClassPathXmlApplicationContext applicationContext;
   protected RepositoryService repositoryService;
 
   protected void createAppContext(String path) {
@@ -75,6 +75,7 @@ protected void createAppContext(String path) {
   protected void tearDown() throws Exception {
     DynamicResourceProducer.clearResources();
     removeAllDeployments();
+    this.applicationContext.close();
     this.applicationContext = null;
     this.repositoryService = null;
     super.tearDown();

File: engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/TelemetryRegistry.java
Patch:
@@ -21,14 +21,15 @@
 import java.util.Map;
 
 import org.camunda.bpm.engine.impl.telemetry.dto.ApplicationServer;
+import org.camunda.bpm.engine.impl.util.ClockUtil;
 
 public class TelemetryRegistry {
 
   public static final String UNIQUE_TASK_WORKERS = "unique-task-workers";
 
   protected Map<String, CommandCounter> commands = new HashMap<>();
   protected ApplicationServer applicationServer;
-  protected Date startReportTime;
+  protected Date startReportTime = ClockUtil.getCurrentTime();
   protected String camundaIntegration;
 
   public synchronized ApplicationServer getApplicationServer() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetrySendingTask.java
Patch:
@@ -126,7 +126,8 @@ protected void updateStaticData() {
   }
 
   protected boolean isTelemetryEnabled() {
-    return commandExecutor.execute(new IsTelemetryEnabledCmd());
+    Boolean telemetryEnabled = commandExecutor.execute(new IsTelemetryEnabledCmd());
+    return telemetryEnabled != null && telemetryEnabled.booleanValue();
   }
 
   protected void sendData(Data dataToSend) {

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/history/DetermineHistoryLevelCmdTest.java
Patch:
@@ -121,7 +121,6 @@ public boolean isHistoryEventProduced(HistoryEventType eventType, Object entity)
 
   @After
   public void after() {
-    TestHelper.dropSchema(processEngineImpl.getProcessEngineConfiguration());
     processEngineImpl.close();
     processEngineImpl = null;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/TelemetryLogger.java
Patch:
@@ -39,7 +39,7 @@ public void exceptionWhileSendingTelemetryData(Exception e) {
 
   public ProcessEngineException unexpectedResponseWhileSendingTelemetryData(int responseCode) {
     return new ProcessEngineException(
-      exceptionMessage("013", "Unexpected response code {} when sending telemetry data", responseCode));
+      exceptionMessage("004", "Unexpected response code {} when sending telemetry data", responseCode));
   }
 
   public void unexpectedResponseWhileSendingTelemetryData() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetryReporter.java
Patch:
@@ -30,8 +30,7 @@ public class TelemetryReporter {
 
   protected static final TelemetryLogger LOG = ProcessEngineLogger.TELEMETRY_LOGGER;
 
-  // send report every 24 hours
-  protected long reportingIntervalInSeconds = 24 * 60 * 60;
+  protected long reportingIntervalInSeconds;
   /**
    * Report after 5 minutes the first time so that we get an initial ping
    * quickly. 5 minutes delay so that other modules (e.g. those collecting the app
@@ -54,12 +53,14 @@ public class TelemetryReporter {
   public TelemetryReporter(CommandExecutor commandExecutor,
                            String telemetryEndpoint,
                            int telemetryRequestRetries,
+                           long telemetryReportingPeriod,
                            Data data,
                            Connector<? extends ConnectorRequest<?>> httpConnector,
                            TelemetryRegistry telemetryRegistry) {
     this.commandExecutor = commandExecutor;
     this.telemetryEndpoint = telemetryEndpoint;
     this.telemetryRequestRetries = telemetryRequestRetries;
+    this.reportingIntervalInSeconds = telemetryReportingPeriod;
     this.data = data;
     this.httpConnector = httpConnector;
     this.telemetryRegistry = telemetryRegistry;

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/telemetry/TelemetryReporterTest.java
Patch:
@@ -172,6 +172,7 @@ public void shouldSendTelemetry() {
     TelemetryReporter telemetryReporter = new TelemetryReporter(configuration.getCommandExecutorTxRequired(),
                                                                 TELEMETRY_ENDPOINT,
                                                                 0,
+                                                                1000,
                                                                 data,
                                                                 configuration.getTelemetryHttpConnector(),
                                                                 configuration.getTelemetryRegistry());
@@ -504,6 +505,7 @@ public void shouldLogErrorOnDebugWhenHttpConnectorNotInitialized() {
     TelemetryReporter telemetryReporter = new TelemetryReporter(configuration.getCommandExecutorTxRequired(),
                                                                 TELEMETRY_ENDPOINT,
                                                                 0,
+                                                                1000,
                                                                 data,
                                                                 null,
                                                                 configuration.getTelemetryRegistry());

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/telemetry/TelemetryTaskWorkerMetricsTest.java
Patch:
@@ -60,6 +60,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.RuleChain;
+import org.skyscreamer.jsonassert.JSONCompareMode;
 
 import com.github.tomakehurst.wiremock.junit.WireMockRule;
 import com.google.gson.Gson;
@@ -142,13 +143,14 @@ public void shouldNotSendTelemetryWithTaskWorkersMetrics() {
     new TelemetryReporter(configuration.getCommandExecutorSchemaOperations(),
                           TELEMETRY_ENDPOINT,
                           0,
+                          1000,
                           data,
                           configuration.getTelemetryHttpConnector(),
                           configuration.getTelemetryRegistry()).reportNow();
 
     // then
     verify(postRequestedFor(urlEqualTo(TELEMETRY_ENDPOINT_PATH))
-        .withRequestBody(equalToJson(requestBody))
+        .withRequestBody(equalToJson(requestBody, JSONCompareMode.LENIENT))
         .withHeader("Content-Type",  equalTo("application/json")));
     Map<String, Metric> metrics = configuration.getTelemetryData().getProduct().getInternals().getMetrics();
     assertThat(metrics.get(UNIQUE_TASK_WORKERS).getCount()).isEqualTo(0);

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/telemetry/TelemetryTaskWorkerMetricsTest.java
Patch:
@@ -141,8 +141,10 @@ public void shouldNotSendTelemetryWithTaskWorkersMetrics() {
     // when
     new TelemetryReporter(configuration.getCommandExecutorSchemaOperations(),
                           TELEMETRY_ENDPOINT,
+                          0,
                           data,
-                          configuration.getTelemetryHttpConnector()).reportNow();
+                          configuration.getTelemetryHttpConnector(),
+                          configuration.getTelemetryRegistry()).reportNow();
 
     // then
     verify(postRequestedFor(urlEqualTo(TELEMETRY_ENDPOINT_PATH))

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/telemetry/TelemetryTaskWorkerMetricsTest.java
Patch:
@@ -135,9 +135,8 @@ public void shouldNotSendTelemetryWithTaskWorkersMetrics() {
 
     String requestBody = new Gson().toJson(data);
     stubFor(post(urlEqualTo(TELEMETRY_ENDPOINT_PATH))
-        .willReturn(aResponse()
-            .withBody(requestBody)
-            .withStatus(HttpURLConnection.HTTP_ACCEPTED)));
+            .willReturn(aResponse()
+                        .withStatus(HttpURLConnection.HTTP_ACCEPTED)));
 
     // when
     new TelemetryReporter(configuration.getCommandExecutorSchemaOperations(),

File: engine/src/main/java/org/camunda/bpm/engine/impl/batch/variables/BatchSetVariablesHandler.java
Patch:
@@ -57,7 +57,7 @@ public void execute(BatchJobConfiguration configuration,
 
     Map<String, Object> variables = variableInstances.stream()
         .collect(Collectors.toMap(VariableInstanceEntity::getName,
-            VariableInstanceEntity::getTypedValue));
+            VariableInstanceEntity::getTypedValueWithImplicitUpdatesSkipped));
 
     List<String> processInstanceIds = batchConfiguration.getIds();
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -4736,7 +4736,7 @@ public Boolean isInitializeTelemetry() {
     return initializeTelemetry;
   }
 
-  public ProcessEngineConfigurationImpl setInitializeTelemetry(Boolean telemetryInitialized) {
+  public ProcessEngineConfigurationImpl setInitializeTelemetry(boolean telemetryInitialized) {
     this.initializeTelemetry = telemetryInitialized;
     return this;
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/task/TaskQueryExpressionTest.java
Patch:
@@ -145,11 +145,11 @@ public void testQueryByOwnerExpression() {
 
   @Test
   public void testQueryByInvolvedUserExpression() {
-    assertCount(taskQuery().taskInvolvedUserExpression("${'" + user.getId() + "'}"), 2);
+    assertCount(taskQuery().taskInvolvedUserExpression("${'" + user.getId() + "'}"), 3);
     assertCount(taskQuery().taskInvolvedUserExpression("${'" + anotherUser.getId() + "'}"), 0);
 
     setCurrentUser(user);
-    assertCount(taskQuery().taskInvolvedUserExpression("${currentUser()}"), 2);
+    assertCount(taskQuery().taskInvolvedUserExpression("${currentUser()}"), 3);
 
     setCurrentUser(anotherUser);
     assertCount(taskQuery().taskInvolvedUserExpression("${currentUser()}"), 0);

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/telemetry/TelemetryTaskWorkerMetricsTest.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.Map;
 
 import org.camunda.bpm.engine.ManagementService;
+import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.TaskService;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
@@ -73,6 +74,7 @@ public class TelemetryTaskWorkerMetricsTest {
       new ProcessEngineBootstrapRule(configuration ->
       configuration.setTelemetryEndpoint(TELEMETRY_ENDPOINT)
                    .setJdbcUrl("jdbc:h2:mem:TelemetryTaskWorkerMetricsTest")
+                   .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_CREATE_DROP)
                    .setHistoryLevel(HistoryLevel.HISTORY_LEVEL_NONE));
 
   protected ProcessEngineRule engineRule = new ProvidedProcessEngineRule(bootstrapRule);

File: engine/src/main/java/org/camunda/bpm/engine/impl/ManagementServiceImpl.java
Patch:
@@ -508,7 +508,8 @@ public void toggleTelemetry(boolean enabled) {
     commandExecutor.execute(new TelemetryConfigureCmd(enabled));
   }
 
-  public boolean isTelemetryEnabled() {
+  public Boolean isTelemetryEnabled() {
     return commandExecutor.execute(new IsTelemetryEnabledCmd());
   }
+
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -894,7 +894,7 @@ public abstract class ProcessEngineConfigurationImpl extends ProcessEngineConfig
    * Subsequent changes can be done only via the
    * {@link ManagementService#toggleTelemetry(boolean) Telemetry} API in {@link ManagementService}
    */
-  protected boolean initializeTelemetry = false;
+  protected Boolean initializeTelemetry = null;
   /** The endpoint which telemetry is sent to */
   protected String telemetryEndpoint = "https://api.telemetry.camunda.cloud/pings";
   protected TelemetryReporter telemetryReporter;
@@ -4732,11 +4732,11 @@ public ProcessEngineConfigurationImpl setDmnFeelEnableLegacyBehavior(boolean dmn
     return this;
   }
 
-  public boolean isInitializeTelemetry() {
+  public Boolean isInitializeTelemetry() {
     return initializeTelemetry;
   }
 
-  public ProcessEngineConfigurationImpl setInitializeTelemetry(boolean telemetryInitialized) {
+  public ProcessEngineConfigurationImpl setInitializeTelemetry(Boolean telemetryInitialized) {
     this.initializeTelemetry = telemetryInitialized;
     return this;
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/ConcurrentTelemetryConfigurationTest.java
Patch:
@@ -42,7 +42,7 @@ public class ConcurrentTelemetryConfigurationTest extends ConcurrencyTestCase {
 
   @Before
   public void setUp() {
-    TestHelper.deleteInstallationId(processEngineConfiguration);
+    TestHelper.deleteTelemetryProperty(processEngineConfiguration);
   }
 
   @Test
@@ -72,7 +72,7 @@ public void testEnableTelemetryWithoutConcurancyIssue() throws InterruptedExcept
 
     assertNull(thread1.exception);
     assertNull(thread2.exception);
-    assertThat(managementService.isTelemetryEnabled()).isFalse();
+    assertThat(managementService.isTelemetryEnabled()).isNull();
   }
 
   protected static class ControllableUpdateTelemetrySetupCommand extends ControllableCommand<Void> {

File: engine/src/main/java/org/camunda/bpm/engine/history/UserOperationLogEntry.java
Patch:
@@ -116,7 +116,7 @@ public interface UserOperationLogEntry {
   public static String OPERATION_TYPE_SET_JOB_RETRIES = "SetJobRetries";
   public static String OPERATION_TYPE_SET_EXTERNAL_TASK_RETRIES = "SetExternalTaskRetries";
   public static String OPERATION_TYPE_SET_VARIABLE = "SetVariable";
-  String OPERATION_TYPE_SET_VARIABLES_BATCH = "SetVariablesBatch";
+  String OPERATION_TYPE_SET_VARIABLES = "SetVariables";
 
   public static String OPERATION_TYPE_REMOVE_VARIABLE = "RemoveVariable";
   public static String OPERATION_TYPE_MODIFY_VARIABLE = "ModifyVariable";

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/batch/variables/SetVariablesToProcessInstancesBatchCmd.java
Patch:
@@ -17,7 +17,6 @@
 package org.camunda.bpm.engine.impl.cmd.batch.variables;
 
 import org.camunda.bpm.engine.BadUserRequestException;
-import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.authorization.BatchPermissions;
 import org.camunda.bpm.engine.batch.Batch;
 import org.camunda.bpm.engine.history.HistoricProcessInstanceQuery;
@@ -35,7 +34,6 @@
 import org.camunda.bpm.engine.impl.persistence.entity.PropertyChange;
 import org.camunda.bpm.engine.impl.persistence.entity.VariableInstanceEntity;
 import org.camunda.bpm.engine.impl.util.CollectionUtil;
-import org.camunda.bpm.engine.impl.util.EnsureUtil;
 import org.camunda.bpm.engine.impl.util.ImmutablePair;
 import org.camunda.bpm.engine.runtime.ProcessInstanceQuery;
 import org.camunda.bpm.engine.variable.Variables;
@@ -109,7 +107,7 @@ protected void writeUserOperationLog(CommandContext commandContext, int instance
     propChanges.add(new PropertyChange("async", null, true));
 
     commandContext.getOperationLogManager()
-        .logBatchOperation(UserOperationLogEntry.OPERATION_TYPE_SET_VARIABLES_BATCH, propChanges);
+        .logProcessInstanceOperation(UserOperationLogEntry.OPERATION_TYPE_SET_VARIABLES, propChanges);
   }
 
   protected void setVariable(String batchId, String variableName, Object variableValue) {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/SetVariablesBatchTest.java
Patch:
@@ -647,9 +647,9 @@ public void shouldLogOperation() {
         .extracting("property", "orgValue", "newValue", "operationType",
             "entityType", "category", "userId")
         .containsExactlyInAnyOrder(
-            tuple("nrOfInstances", null, "1", "SetVariablesBatch", "Batch", "Operator", "demo"),
-            tuple("nrOfVariables", null, "1", "SetVariablesBatch", "Batch", "Operator", "demo"),
-            tuple("async", null, "true", "SetVariablesBatch", "Batch", "Operator", "demo")
+            tuple("nrOfInstances", null, "1", "SetVariables", "ProcessInstance", "Operator", "demo"),
+            tuple("nrOfVariables", null, "1", "SetVariables", "ProcessInstance", "Operator", "demo"),
+            tuple("async", null, "true", "SetVariables", "ProcessInstance", "Operator", "demo")
         );
 
     // clear

File: webapps/src/test/java/org/camunda/bpm/webapp/impl/security/filter/csrf/CsrfPreventionFilterAppPathTest.java
Patch:
@@ -79,8 +79,8 @@ public void shouldCheckNonModifyingRequestTokenGenerationWithRootContextPathAndE
     assertThat(cookieToken).isNotNull().isNotEmpty();
     assertThat(headerToken).isNotNull().isNotEmpty();
 
-    assertThat(cookieToken).matches(CSRF_COOKIE_NAME + "=[A-Z0-9]{32}" +
-      CSRF_PATH_FIELD_NAME + "/;SameSite=Lax");
+    String regex = CSRF_COOKIE_NAME + "=[A-Z0-9]{32}" + CSRF_PATH_FIELD_NAME + "/;SameSite=Lax";
+    assertThat(cookieToken).matches(regex.replace(";", ";\\s*"));
 
     assertThat(cookieToken).contains(headerToken);
   }

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/util/SpringBootProcessEngineLogger.java
Patch:
@@ -57,8 +57,8 @@ public void autoDeployResources(Set<Resource> resources) {
     logInfo("021", "Auto-Deploying resources: {}", resources);
   }
 
-  public void enterLicenseKey(URL licenseKeyFile) {
-    logInfo("030", "Setting up license key: {}", licenseKeyFile);
+  public void enterLicenseKey(String licenseKeySource) {
+    logInfo("030", "Setting up license key: {}", licenseKeySource);
   }
 
   public void enterLicenseKeyFailed(URL licenseKeyFile, Exception e) {

File: engine-plugins/connect-plugin/src/main/java/org/camunda/connect/plugin/impl/ConnectProcessEnginePlugin.java
Patch:
@@ -34,6 +34,8 @@ public void preInit(ProcessEngineConfigurationImpl processEngineConfiguration) {
     Connectors.loadConnectors(classloader);
 
     addConnectorParseListener(processEngineConfiguration);
+
+    processEngineConfiguration.setTelemetryHttpConnector(Connectors.getConnector(Connectors.HTTP_CONNECTOR_ID));
   }
 
   private void addConnectorParseListener(ProcessEngineConfigurationImpl processEngineConfiguration) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/BootstrapEngineCommand.java
Patch:
@@ -194,7 +194,9 @@ protected void updateTelemetryData(CommandContext commandContext) {
   protected void startTelemetryReporter(CommandContext commandContext) {
     ProcessEngineConfigurationImpl processEngineConfiguration = commandContext.getProcessEngineConfiguration();
     // start telemetry reporter only if the telemetry is enabled
-    if (processEngineConfiguration.getManagementService().isTelemetryEnabled()) {
+    if (processEngineConfiguration.getManagementService().isTelemetryEnabled() &&
+        processEngineConfiguration.getTelemetryReporter() != null &&
+        processEngineConfiguration.getTelemetryReporter().getHttpConnector() != null) {
       processEngineConfiguration.getTelemetryReporter().start();
     }
   }

File: javaee/ejb-service/src/main/java/org/camunda/bpm/container/impl/ejb/EjbBpmPlatformBootstrap.java
Patch:
@@ -22,16 +22,15 @@
 import org.camunda.bpm.container.RuntimeContainerDelegate;
 import org.camunda.bpm.container.impl.RuntimeContainerDelegateImpl;
 import org.camunda.bpm.container.impl.deployment.DiscoverBpmPlatformPluginsStep;
-import org.camunda.bpm.container.impl.deployment.PlatformXmlStartProcessEnginesStep;
 import org.camunda.bpm.container.impl.deployment.StopProcessApplicationsStep;
 import org.camunda.bpm.container.impl.deployment.StopProcessEnginesStep;
 import org.camunda.bpm.container.impl.deployment.UnregisterBpmPlatformPluginsStep;
 import org.camunda.bpm.container.impl.deployment.jobexecutor.StartJobExecutorStep;
 import org.camunda.bpm.container.impl.deployment.jobexecutor.StopJobExecutorStep;
 import org.camunda.bpm.container.impl.ejb.deployment.EjbJarParsePlatformXmlStep;
+import org.camunda.bpm.container.impl.ejb.deployment.EjbPlatformXmlStartProcessEnginesStep;
 import org.camunda.bpm.container.impl.ejb.deployment.StartJcaExecutorServiceStep;
 import org.camunda.bpm.container.impl.ejb.deployment.StopJcaExecutorServiceStep;
-
 import javax.annotation.PostConstruct;
 import javax.annotation.PreDestroy;
 import javax.ejb.EJB;
@@ -72,7 +71,7 @@ protected void start() {
       .addStep(new DiscoverBpmPlatformPluginsStep())
       .addStep(new StartJcaExecutorServiceStep(executorServiceBean))
       .addStep(new StartJobExecutorStep())
-      .addStep(new PlatformXmlStartProcessEnginesStep())
+      .addStep(new EjbPlatformXmlStartProcessEnginesStep())
       .execute();
 
     processEngineService = containerDelegate.getProcessEngineService();

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/validator/MaxLengthValidator.java
Patch:
@@ -31,7 +31,7 @@ protected boolean validate(String submittedValue, String configuration) {
       throw new FormFieldConfigurationException(configuration, "Cannot validate \"maxlength\": configuration "+configuration+" cannot be interpreted as Integer");
     }
 
-    return submittedValue.length() < maxLength;
+    return submittedValue.length() <= maxLength;
   }
 
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/form/BuiltInValidatorsTest.java
Patch:
@@ -147,8 +147,8 @@ public void testMaxLengthValidator() {
 
     assertTrue(validator.validate(null, null));
 
-    assertTrue(validator.validate("test", new TestValidatorContext("5")));
-    assertFalse(validator.validate("test", new TestValidatorContext("4")));
+    assertTrue(validator.validate("test", new TestValidatorContext("4")));
+    assertFalse(validator.validate("test", new TestValidatorContext("3")));
 
     try {
       validator.validate("test", new TestValidatorContext("4.4"));

File: engine/src/main/java/org/camunda/bpm/engine/impl/repository/DefaultDeploymentHandler.java
Patch:
@@ -58,8 +58,8 @@ public Set<String> determineDeploymentsToResumeByProcessDefinitionKey(
       String[] processDefinitionKeys) {
 
     Set<String> deploymentIds = new HashSet<>();
-    List<ProcessDefinition> processDefinitions = repositoryService.createProcessDefinitionQuery()
-        .processDefinitionKeysIn(processDefinitionKeys).list();
+    List<ProcessDefinition> processDefinitions = Context.getCommandContext().getProcessDefinitionManager()
+        .findProcessDefinitionsByKeyIn(processDefinitionKeys);
     for (ProcessDefinition processDefinition : processDefinitions) {
       deploymentIds.add(processDefinition.getDeploymentId());
     }

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/ConcurrentHistoryCleanupUpdateOfFailingJobTest.java
Patch:
@@ -88,7 +88,7 @@ public void testFailedHistoryCleanupJobUpdate() throws InterruptedException {
 
     threadOne.waitUntilDone(); // let t1 commit, unblocking t2
 
-    threadTwo.waitUntilDone(); // continue with t2, expected to roll back
+    threadTwo.waitUntilDone(true); // continue with t2, expected to roll back
 
     // then
     assertThat(threadTwo.getException()).isNull();
@@ -106,6 +106,7 @@ public Void execute(CommandContext commandContext) {
 
       monitor.sync();
       new BootstrapEngineCommand().execute(commandContext);
+      monitor.sync();
       return null;
     }
 

File: qa/large-data-tests/src/test/java/org/camunda/bpm/qa/largedata/optimize/OptimizeApiPageSizeTest.java
Patch:
@@ -20,7 +20,7 @@
 import junitparams.Parameters;
 import org.camunda.bpm.engine.impl.OptimizeService;
 import org.camunda.bpm.engine.test.ProcessEngineRule;
-import org.camunda.bpm.qa.largedata.optimize.util.EngineDataGenerator;
+import org.camunda.bpm.qa.largedata.util.EngineDataGenerator;
 import org.junit.BeforeClass;
 import org.junit.ClassRule;
 import org.junit.Test;
@@ -41,13 +41,13 @@ public class OptimizeApiPageSizeTest {
   @ClassRule
   public static ProcessEngineRule processEngineRule = new ProcessEngineRule("camunda.cfg.xml");
 
-
   @BeforeClass
   public static void init() {
     optimizeService = processEngineRule.getProcessEngineConfiguration().getOptimizeService();
 
     // given the generated engine data
-    EngineDataGenerator generator = new EngineDataGenerator(processEngineRule.getProcessEngine(), OPTIMIZE_PAGE_SIZE);
+    // make sure that there are at least two pages of each entity available
+    EngineDataGenerator generator = new EngineDataGenerator(processEngineRule.getProcessEngine(), OPTIMIZE_PAGE_SIZE * 2);
     generator.generateData();
   }
 

File: qa/large-data-tests/src/test/java/org/camunda/bpm/qa/largedata/util/DmnHelper.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.qa.largedata.optimize.util;
+package org.camunda.bpm.qa.largedata.util;
 
 import org.camunda.bpm.model.dmn.Dmn;
 import org.camunda.bpm.model.dmn.DmnModelInstance;

File: engine/src/main/java/org/camunda/bpm/engine/impl/el/ExpressionManager.java
Patch:
@@ -61,7 +61,7 @@ public class ExpressionManager {
   // Default implementation (does nothing)
   protected ELContext parsingElContext = new ProcessEngineElContext(functionMappers);
   protected Map<Object, Object> beans;
-  protected ELResolver elResolver;
+  protected volatile ELResolver elResolver; // why volatile? => https://jira.camunda.com/browse/CAM-12106
 
   public ExpressionManager() {
     this(null);

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/SimpleDbSqlSession.java
Patch:
@@ -59,7 +59,7 @@ public FlushResult executeDbOperations(List<DbOperation> operations) {
 
       executeDbOperation(operation);
 
-      if (operation.getState() != State.APPLIED) {
+      if (operation.isFailed()) {
         List<DbOperation> remainingOperations = operations.subList(i + 1, operations.size());
         return FlushResult.withFailuresAndRemaining(Collections.singletonList(operation), remainingOperations);
       }

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -235,6 +235,9 @@ public class DbSqlSessionFactory implements SessionFactory {
       // related to CAM-10664
       addDatabaseSpecificStatement(mysqlLikeDatabase, "updateOperationLogAnnotationByOperationId", "updateOperationLogAnnotationByOperationId_mysql");
 
+      // related to CAM-12070
+      addDatabaseSpecificStatement(mysqlLikeDatabase, "updateByteArraysByBatchId", "updateByteArraysByBatchId_mysql");
+
       constants = new HashMap<>();
       constants.put("constant.event", "'event'");
       constants.put("constant.op_message", "CONCAT(NEW_VALUE_, '_|_', PROPERTY_)");

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/IdentityRestService.java
Patch:
@@ -17,7 +17,7 @@
 package org.camunda.bpm.engine.rest;
 
 import org.camunda.bpm.engine.rest.dto.identity.BasicUserCredentialsDto;
-import org.camunda.bpm.engine.rest.dto.identity.PasswordDto;
+import org.camunda.bpm.engine.rest.dto.identity.PasswordPolicyRequestDto;
 import org.camunda.bpm.engine.rest.dto.task.GroupInfoDto;
 import org.camunda.bpm.engine.rest.security.auth.AuthenticationResult;
 
@@ -55,5 +55,5 @@ public interface IdentityRestService {
   @Path("/password-policy")
   @Consumes(MediaType.APPLICATION_JSON)
   @Produces(MediaType.APPLICATION_JSON)
-  Response checkPassword(PasswordDto password);
+  Response checkPassword(PasswordPolicyRequestDto password);
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SaveUserCmd.java
Patch:
@@ -35,7 +35,7 @@ public class SaveUserCmd extends AbstractWritableIdentityServiceCmd<Void> implem
   
   private static final long serialVersionUID = 1L;
   protected UserEntity user;
-  private boolean skipPasswordPolicy;
+  protected boolean skipPasswordPolicy;
   
   public SaveUserCmd(User user) {
     this(user, false);

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/UserEntity.java
Patch:
@@ -165,7 +165,7 @@ protected String generateSalt() {
   public boolean checkPasswordAgainstPolicy() {
     PasswordPolicyResult result = Context.getProcessEngineConfiguration()
       .getIdentityService()
-      .checkPasswordAgainstPolicy(newPassword);
+      .checkPasswordAgainstPolicy(newPassword, this);
 
     return result.isValid();
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/identity/CustomPasswordPolicyTest.java
Patch:
@@ -67,7 +67,7 @@ public void tearDown() {
   public void testPasswordPolicyConfiguration() {
     PasswordPolicy policy = processEngineConfiguration.getPasswordPolicy();
     assertThat(policy.getClass().isAssignableFrom(DefaultPasswordPolicyImpl.class), is(true));
-    assertThat(policy.getRules().size(), is(5));
+    assertThat(policy.getRules().size(), is(6));
   }
 
   @Test

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/CreateGroupCmd.java
Patch:
@@ -22,7 +22,6 @@
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 
 import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
-import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureWhitelistedResourceId;
 
 /**
  * @author Tom Baeyens
@@ -39,8 +38,6 @@ public CreateGroupCmd(String groupId) {
   }
   
   protected Group executeCmd(CommandContext commandContext) {
-    ensureWhitelistedResourceId(commandContext, "Group", groupId);
-
     return commandContext
       .getWritableIdentityProvider()
       .createNewGroup(groupId);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/CreateTenantCmd.java
Patch:
@@ -17,7 +17,6 @@
 package org.camunda.bpm.engine.impl.cmd;
 
 import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
-import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureWhitelistedResourceId;
 
 import java.io.Serializable;
 
@@ -38,8 +37,6 @@ public CreateTenantCmd(String tenantId) {
 
   @Override
   protected Tenant executeCmd(CommandContext commandContext) {
-    ensureWhitelistedResourceId(commandContext, "Tenant", tenantId);
-
     return commandContext
       .getWritableIdentityProvider()
       .createNewTenant(tenantId);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/CreateUserCmd.java
Patch:
@@ -22,7 +22,6 @@
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 
 import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
-import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureWhitelistedResourceId;
 
 /**
  * @author Tom Baeyens
@@ -39,8 +38,6 @@ public CreateUserCmd(String userId) {
   }
   
   protected User executeCmd(CommandContext commandContext) {
-    ensureWhitelistedResourceId(commandContext, "User", userId);
-
     return commandContext
       .getWritableIdentityProvider()
       .createNewUser(userId);

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/ManagementServiceTest.java
Patch:
@@ -45,7 +45,6 @@
 import org.camunda.bpm.engine.task.Task;
 import org.camunda.bpm.engine.test.Deployment;
 import org.junit.Assert;
-
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Calendar;

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -557,6 +557,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement(MSSQL, "lockDeploymentLockProperty", "lockDeploymentLockProperty_mssql");
     addDatabaseSpecificStatement(MSSQL, "lockHistoryCleanupJobLockProperty", "lockHistoryCleanupJobLockProperty_mssql");
     addDatabaseSpecificStatement(MSSQL, "lockStartupLockProperty", "lockStartupLockProperty_mssql");
+    addDatabaseSpecificStatement(MSSQL, "lockTelemetryLockProperty", "lockTelemetryLockProperty_mssql");
     addDatabaseSpecificStatement(MSSQL, "selectEventSubscriptionsByNameAndExecution", "selectEventSubscriptionsByNameAndExecution_mssql");
     addDatabaseSpecificStatement(MSSQL, "selectEventSubscriptionsByExecutionAndType", "selectEventSubscriptionsByExecutionAndType_mssql");
     addDatabaseSpecificStatement(MSSQL, "selectHistoricDecisionInstancesByNativeQuery", "selectHistoricDecisionInstancesByNativeQuery_mssql_or_db2");

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/feel/NewScalaFeelBehaviorTest.java
Patch:
@@ -134,7 +134,7 @@ public void shouldEvaluateToUtilDateForTypedOutputClause() {
     assertThat(result).isEqualTo("2019-08-08T22:22:22");
   }
 
-  @Ignore("CAM-11382")
+  // https://jira.camunda.com/browse/CAM-11382
   @Test
   @DecisionResource(resource = "scala_output_expression_double.dmn")
   public void shouldReturnMaxDouble() {

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/feel/BreakingScalaFeelBehaviorTest.java
Patch:
@@ -47,7 +47,7 @@ public DmnEngineConfiguration getDmnEngineConfiguration() {
     return configuration;
   }
 
-  @Ignore("CAM-11304")
+  // https://jira.camunda.com/browse/CAM-11304
   @Test
   @DecisionResource(resource = "breaking_unary_test_compare_short_untyped.dmn")
   public void shouldCompareShortUntyped() {

File: webapps/src/test/java/org/camunda/bpm/webapp/impl/security/filter/headersec/StrictTransportSecurityTest.java
Patch:
@@ -90,7 +90,7 @@ public void shouldThrowExceptionWhenConfiguringCustomValueAndMaxAge() {
     // then
     assertThat(expectedException)
       .isInstanceOf(ProcessEngineException.class)
-      .hasMessage("WEBAPP-01001 StrictTransportSecurityProvider: cannot set hstsValue " +
+      .hasMessage("StrictTransportSecurityProvider: cannot set hstsValue " +
         "in conjunction with hstsMaxAge or hstsIncludeSubdomainsDisabled.");
   }
 

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/type/DateDataTypeTransformer.java
Patch:
@@ -45,7 +45,7 @@
  */
 public class DateDataTypeTransformer implements DmnDataTypeTransformer {
 
-  protected SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
+  protected String formatPattern = "yyyy-MM-dd'T'HH:mm:ss";
 
   @Override
   public TypedValue transform(Object value) throws IllegalArgumentException {
@@ -94,7 +94,7 @@ public TypedValue transform(Object value) throws IllegalArgumentException {
 
   protected Date transformString(String value) {
     try {
-      return format.parse(value);
+      return new SimpleDateFormat(formatPattern).parse(value);
     } catch (ParseException e) {
       throw new IllegalArgumentException(e);
     }

File: spring-boot-starter/starter-webapp-core/src/main/java/org/camunda/bpm/spring/boot/starter/webapp/CamundaBpmWebappInitializer.java
Patch:
@@ -26,11 +26,11 @@
 import org.camunda.bpm.spring.boot.starter.property.WebappProperty;
 import org.camunda.bpm.spring.boot.starter.webapp.filter.LazyProcessEnginesFilter;
 import org.camunda.bpm.spring.boot.starter.webapp.filter.LazySecurityFilter;
-import org.camunda.bpm.spring.boot.starter.webapp.filter.SpringBootCsrfPreventionFilter;
 import org.camunda.bpm.tasklist.impl.web.TasklistApplication;
 import org.camunda.bpm.tasklist.impl.web.bootstrap.TasklistContainerBootstrap;
 import org.camunda.bpm.webapp.impl.engine.EngineRestApplication;
 import org.camunda.bpm.webapp.impl.security.auth.AuthenticationFilter;
+import org.camunda.bpm.webapp.impl.security.filter.CsrfPreventionFilter;
 import org.camunda.bpm.webapp.impl.security.filter.headersec.HttpHeaderSecurityFilter;
 import org.camunda.bpm.webapp.impl.security.filter.util.HttpSessionMutexListener;
 import org.camunda.bpm.webapp.impl.util.ServletContextUtil;
@@ -96,7 +96,7 @@ public void onStartup(ServletContext servletContext) {
     registerFilter("Security Filter", LazySecurityFilter.class,
         singletonMap("configFile", webapp.getSecurityConfigFile()),
         applicationPath + "/api/*", applicationPath + "/app/*");
-    registerFilter("CsrfPreventionFilter", SpringBootCsrfPreventionFilter.class,
+    registerFilter("CsrfPreventionFilter", CsrfPreventionFilter.class,
         webapp.getCsrf().getInitParams(),
         applicationPath + "/api/*", applicationPath + "/app/*");
 

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/apppath/containerbasedauth/ChangedAppPathContainerBasedAuthIT.java
Patch:
@@ -33,9 +33,9 @@
     classes = { TestApplication.class },
     webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
 @TestPropertySource(properties = {
-    "camunda.bpm.webapp.applicationPath=" + ChangedAppPathContainerBasedAuthTest.MY_APP_PATH
+    "camunda.bpm.webapp.applicationPath=" + ChangedAppPathContainerBasedAuthIT.MY_APP_PATH
 })
-public class ChangedAppPathContainerBasedAuthTest {
+public class ChangedAppPathContainerBasedAuthIT {
 
   protected static final String MY_APP_PATH = "/my/application/path";
 

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/apppath/containerbasedauth/ContainerBasedAuthFilterRegistration.java
Patch:
@@ -36,7 +36,7 @@ public FilterRegistrationBean<ContainerBasedAuthenticationFilter> containerBased
         filterRegistration.setFilter(new ContainerBasedAuthenticationFilter());
         filterRegistration.setInitParameters(Collections.singletonMap("authentication-provider",
             "org.camunda.bpm.engine.rest.security.auth.impl.ContainerBasedAuthenticationProvider"));
-        filterRegistration.addUrlPatterns(ChangedAppPathContainerBasedAuthTest.MY_APP_PATH + "/*");
+        filterRegistration.addUrlPatterns(ChangedAppPathContainerBasedAuthIT.MY_APP_PATH + "/*");
         return filterRegistration;
     }
 

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/CookieNameIT.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.camunda.bpm.spring.boot.starter.webapp.filter.csrf.it.properties;
 
+import org.camunda.bpm.spring.boot.starter.property.WebappProperty;
 import org.camunda.bpm.spring.boot.starter.webapp.filter.util.HeaderRule;
 import org.camunda.bpm.spring.boot.starter.webapp.filter.util.TestApplication;
 import org.junit.Rule;
@@ -52,7 +53,8 @@ public void shouldChangeCookieName() {
     String xsrfTokenHeader = headerRule.getXsrfTokenHeader();
 
     // then
-    assertThat(xsrfCookieValue).matches("myFancyCookieName=[A-Z0-9]{32};Path=/;SameSite=Lax");
+    assertThat(xsrfCookieValue).matches("myFancyCookieName=[A-Z0-9]{32};" +
+        "Path=" + WebappProperty.DEFAULT_APP_PATH + ";SameSite=Lax");
     assertThat(xsrfTokenHeader).matches("[A-Z0-9]{32}");
 
     assertThat(xsrfCookieValue).contains(xsrfTokenHeader);

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/SameSiteCustomValueIT.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.camunda.bpm.spring.boot.starter.webapp.filter.csrf.it.properties;
 
+import org.camunda.bpm.spring.boot.starter.property.WebappProperty;
 import org.camunda.bpm.spring.boot.starter.webapp.filter.util.HeaderRule;
 import org.camunda.bpm.spring.boot.starter.webapp.filter.util.TestApplication;
 import org.junit.Rule;
@@ -50,7 +51,8 @@ public void shouldSetSameSiteCookieCustomValue() {
     String xsrfCookieValue = headerRule.getXsrfCookieValue();
     String xsrfTokenHeader = headerRule.getXsrfTokenHeader();
 
-    assertThat(xsrfCookieValue).matches("XSRF-TOKEN=[A-Z0-9]{32};Path=/;SameSite=aCustomValue");
+    assertThat(xsrfCookieValue).matches("XSRF-TOKEN=[A-Z0-9]{32};" +
+        "Path=" + WebappProperty.DEFAULT_APP_PATH + ";SameSite=aCustomValue");
     assertThat(xsrfTokenHeader).matches("[A-Z0-9]{32}");
 
     assertThat(xsrfCookieValue).contains(xsrfTokenHeader);

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/SameSiteDisabledIT.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.camunda.bpm.spring.boot.starter.webapp.filter.csrf.it.properties;
 
+import org.camunda.bpm.spring.boot.starter.property.WebappProperty;
 import org.camunda.bpm.spring.boot.starter.webapp.filter.util.HeaderRule;
 import org.camunda.bpm.spring.boot.starter.webapp.filter.util.TestApplication;
 import org.junit.Rule;
@@ -50,7 +51,8 @@ public void shouldDisableSameSiteCookie() {
     String xsrfCookieValue = headerRule.getXsrfCookieValue();
     String xsrfTokenHeader = headerRule.getXsrfTokenHeader();
 
-    assertThat(xsrfCookieValue).matches("XSRF-TOKEN=[A-Z0-9]{32};Path=/");
+    assertThat(xsrfCookieValue).matches("XSRF-TOKEN=[A-Z0-9]{32};" +
+        "Path=" + WebappProperty.DEFAULT_APP_PATH);
     assertThat(xsrfTokenHeader).matches("[A-Z0-9]{32}");
 
     assertThat(xsrfCookieValue).contains(xsrfTokenHeader);

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/SameSiteEnabledIT.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.camunda.bpm.spring.boot.starter.webapp.filter.csrf.it.properties;
 
+import org.camunda.bpm.spring.boot.starter.property.WebappProperty;
 import org.camunda.bpm.spring.boot.starter.webapp.filter.util.HeaderRule;
 import org.camunda.bpm.spring.boot.starter.webapp.filter.util.TestApplication;
 import org.junit.Rule;
@@ -50,7 +51,8 @@ public void shouldEnableSameSiteCookie() {
     String xsrfCookieValue = headerRule.getXsrfCookieValue();
     String xsrfTokenHeader = headerRule.getXsrfTokenHeader();
 
-    assertThat(xsrfCookieValue).matches("XSRF-TOKEN=[A-Z0-9]{32};Path=/;SameSite=Lax");
+    assertThat(xsrfCookieValue).matches("XSRF-TOKEN=[A-Z0-9]{32};" +
+        "Path=" + WebappProperty.DEFAULT_APP_PATH + ";SameSite=Lax");
     assertThat(xsrfTokenHeader).matches("[A-Z0-9]{32}");
 
     assertThat(xsrfCookieValue).contains(xsrfTokenHeader);

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/SameSiteOptionLaxIT.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.camunda.bpm.spring.boot.starter.webapp.filter.csrf.it.properties;
 
+import org.camunda.bpm.spring.boot.starter.property.WebappProperty;
 import org.camunda.bpm.spring.boot.starter.webapp.filter.util.HeaderRule;
 import org.camunda.bpm.spring.boot.starter.webapp.filter.util.TestApplication;
 import org.junit.Rule;
@@ -50,7 +51,8 @@ public void shouldSetSameSiteCookieOptionLax() {
     String xsrfCookieValue = headerRule.getXsrfCookieValue();
     String xsrfTokenHeader = headerRule.getXsrfTokenHeader();
 
-    assertThat(xsrfCookieValue).matches("XSRF-TOKEN=[A-Z0-9]{32};Path=/;SameSite=Lax");
+    assertThat(xsrfCookieValue).matches("XSRF-TOKEN=[A-Z0-9]{32};" +
+        "Path=" + WebappProperty.DEFAULT_APP_PATH + ";SameSite=Lax");
     assertThat(xsrfTokenHeader).matches("[A-Z0-9]{32}");
 
     assertThat(xsrfCookieValue).contains(xsrfTokenHeader);

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/SameSiteOptionStrictIT.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.camunda.bpm.spring.boot.starter.webapp.filter.csrf.it.properties;
 
+import org.camunda.bpm.spring.boot.starter.property.WebappProperty;
 import org.camunda.bpm.spring.boot.starter.webapp.filter.util.HeaderRule;
 import org.camunda.bpm.spring.boot.starter.webapp.filter.util.TestApplication;
 import org.junit.Rule;
@@ -50,7 +51,8 @@ public void shouldSetSameSiteCookieOptionStrict() {
     String xsrfCookieValue = headerRule.getXsrfCookieValue();
     String xsrfTokenHeader = headerRule.getXsrfTokenHeader();
 
-    assertThat(xsrfCookieValue).matches("XSRF-TOKEN=[A-Z0-9]{32};Path=/;SameSite=Strict");
+    assertThat(xsrfCookieValue).matches("XSRF-TOKEN=[A-Z0-9]{32};" +
+        "Path=" + WebappProperty.DEFAULT_APP_PATH + ";SameSite=Strict");
     assertThat(xsrfTokenHeader).matches("[A-Z0-9]{32}");
 
     assertThat(xsrfCookieValue).contains(xsrfTokenHeader);

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/SecureDisabledIT.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.camunda.bpm.spring.boot.starter.webapp.filter.csrf.it.properties;
 
+import org.camunda.bpm.spring.boot.starter.property.WebappProperty;
 import org.camunda.bpm.spring.boot.starter.webapp.filter.util.HeaderRule;
 import org.camunda.bpm.spring.boot.starter.webapp.filter.util.TestApplication;
 import org.junit.Rule;
@@ -50,7 +51,8 @@ public void shouldDisableSecureCookie() {
     String xsrfCookieValue = headerRule.getXsrfCookieValue();
     String xsrfTokenHeader = headerRule.getXsrfTokenHeader();
 
-    assertThat(xsrfCookieValue).matches("XSRF-TOKEN=[A-Z0-9]{32};Path=/;SameSite=Lax");
+    assertThat(xsrfCookieValue).matches("XSRF-TOKEN=[A-Z0-9]{32};" +
+        "Path=" + WebappProperty.DEFAULT_APP_PATH + ";SameSite=Lax");
     assertThat(xsrfTokenHeader).matches("[A-Z0-9]{32}");
 
     assertThat(xsrfCookieValue).contains(xsrfTokenHeader);

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/SecureEnabledIT.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.camunda.bpm.spring.boot.starter.webapp.filter.csrf.it.properties;
 
+import org.camunda.bpm.spring.boot.starter.property.WebappProperty;
 import org.camunda.bpm.spring.boot.starter.webapp.filter.util.HeaderRule;
 import org.camunda.bpm.spring.boot.starter.webapp.filter.util.TestApplication;
 import org.junit.Rule;
@@ -50,7 +51,8 @@ public void shouldEnableSecureCookie() {
     String xsrfCookieValue = headerRule.getXsrfCookieValue();
     String xsrfTokenHeader = headerRule.getXsrfTokenHeader();
 
-    assertThat(xsrfCookieValue).matches("XSRF-TOKEN=[A-Z0-9]{32};Path=/;SameSite=Lax;Secure");
+    assertThat(xsrfCookieValue).matches("XSRF-TOKEN=[A-Z0-9]{32};" +
+        "Path=" + WebappProperty.DEFAULT_APP_PATH + ";SameSite=Lax;Secure");
     assertThat(xsrfTokenHeader).matches("[A-Z0-9]{32}");
 
     assertThat(xsrfCookieValue).contains(xsrfTokenHeader);

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/history/HistoricProcessInstanceRestServiceImpl.java
Patch:
@@ -144,7 +144,7 @@ else if (APPLICATION_CSV_TYPE.equals(mediaType) || TEXT_CSV_TYPE.equals(mediaTyp
         String csv = getReportResultAsCsv(uriInfo);
         return Response
             .ok(csv, mediaType)
-            .header("Content-Disposition", "attachment; filename=process-instance-report.csv")
+            .header("Content-Disposition", "attachment; filename=\"process-instance-report.csv\"")
             .build();
       }
     }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/impl/VariableResponseProvider.java
Patch:
@@ -51,7 +51,7 @@ protected Response responseForFileVariable(FileValue fileValue) {
       type += "; charset=" + fileValue.getEncoding();
     }
     Object value = fileValue.getValue() == null ? "" : fileValue.getValue();
-    return Response.ok(value, type).header("Content-Disposition", "attachment; filename=" + fileValue.getFilename()).build();
+    return Response.ok(value, type).header("Content-Disposition", "attachment; filename=\"" + fileValue.getFilename() + "\"").build();
   }
 
   /**

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/impl/CaseDefinitionResourceImpl.java
Patch:
@@ -173,7 +173,7 @@ public Response getCaseDefinitionDiagram() {
       return Response.noContent().build();
     } else {
       String fileName = definition.getDiagramResourceName();
-      return Response.ok(caseDiagram).header("Content-Disposition", "attachment; filename=" + fileName)
+      return Response.ok(caseDiagram).header("Content-Disposition", "attachment; filename=\"" + fileName + "\"")
           .type(ProcessDefinitionResourceImpl.getMediaTypeForFileSuffix(fileName)).build();
     }
   }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/impl/DecisionDefinitionResourceImpl.java
Patch:
@@ -123,7 +123,7 @@ public Response getDecisionDefinitionDiagram() {
       return Response.noContent().build();
     } else {
       String fileName = definition.getDiagramResourceName();
-      return Response.ok(decisionDiagram).header("Content-Disposition", "attachment; filename=" + fileName)
+      return Response.ok(decisionDiagram).header("Content-Disposition", "attachment; filename=\"" + fileName + "\"")
           .type(ProcessDefinitionResourceImpl.getMediaTypeForFileSuffix(fileName)).build();
     }
   }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/impl/DecisionRequirementsDefinitionResourceImpl.java
Patch:
@@ -107,7 +107,7 @@ public Response getDecisionRequirementsDefinitionDiagram() {
       return Response.noContent().build();
     } else {
       String fileName = definition.getDiagramResourceName();
-      return Response.ok(decisionRequirementsDiagram).header("Content-Disposition", "attachment; filename=" + fileName)
+      return Response.ok(decisionRequirementsDiagram).header("Content-Disposition", "attachment; filename=\"" + fileName + "\"")
           .type(ProcessDefinitionResourceImpl.getMediaTypeForFileSuffix(fileName)).build();
     }
   }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/impl/DeploymentResourcesResourceImpl.java
Patch:
@@ -145,7 +145,7 @@ public Response getDeploymentResourceData(String resourceId) {
 
       return Response
           .ok(resourceAsStream, mediaType)
-          .header("Content-Disposition", "attachment; filename=" + filename)
+          .header("Content-Disposition", "attachment; filename=\"" + filename + "\"")
           .build();
     }
     else {

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/impl/ProcessDefinitionResourceImpl.java
Patch:
@@ -276,7 +276,7 @@ public Response getProcessDefinitionDiagram() {
     } else {
       String fileName = definition.getDiagramResourceName();
       return Response.ok(processDiagram)
-          .header("Content-Disposition", "attachment; filename=" + fileName)
+          .header("Content-Disposition", "attachment; filename=\"" + fileName + "\"")
           .type(getMediaTypeForFileSuffix(fileName)).build();
     }
   }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/task/impl/TaskReportResourceImpl.java
Patch:
@@ -56,7 +56,7 @@ else if (APPLICATION_CSV_TYPE.equals(mediaType) || TEXT_CSV_TYPE.equals(mediaTyp
         String csv = getReportResultAsCsv();
         return Response
           .ok(csv, mediaType)
-          .header("Content-Disposition", "attachment; filename=task-count-by-candidate-group.csv")
+          .header("Content-Disposition", "attachment; filename=\"task-count-by-candidate-group.csv\"")
           .build();
       }
     }

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/CaseDefinitionRestServiceInteractionTest.java
Patch:
@@ -564,8 +564,8 @@ public void testCaseDiagramRetrieval() throws FileNotFoundException, URISyntaxEx
         .expect()
           .statusCode(Status.OK.getStatusCode())
           .contentType("image/png")
-          .header("Content-Disposition", "attachment; filename=" +
-              MockProvider.EXAMPLE_CASE_DEFINITION_DIAGRAM_RESOURCE_NAME)
+          .header("Content-Disposition", "attachment; filename=\"" +
+              MockProvider.EXAMPLE_CASE_DEFINITION_DIAGRAM_RESOURCE_NAME + "\"")
         .when().get(DIAGRAM_DEFINITION_URL).getBody().asByteArray();
 
     // verify service interaction
@@ -591,7 +591,7 @@ public void testCaseDiagramNullFilename() throws FileNotFoundException, URISynta
       .expect()
       .statusCode(Status.OK.getStatusCode())
       .contentType("application/octet-stream")
-      .header("Content-Disposition", "attachment; filename=" + null)
+      .header("Content-Disposition", "attachment; filename=\"" + null + "\"")
       .when().get(DIAGRAM_DEFINITION_URL).getBody().asByteArray();
 
     // verify service interaction

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/DecisionDefinitionRestServiceInteractionTest.java
Patch:
@@ -328,8 +328,8 @@ public void testDecisionDiagramRetrieval() throws FileNotFoundException, URISynt
         .expect()
           .statusCode(Status.OK.getStatusCode())
           .contentType("image/png")
-          .header("Content-Disposition", "attachment; filename=" +
-              MockProvider.EXAMPLE_DECISION_DEFINITION_DIAGRAM_RESOURCE_NAME)
+          .header("Content-Disposition", "attachment; filename=\"" +
+              MockProvider.EXAMPLE_DECISION_DEFINITION_DIAGRAM_RESOURCE_NAME + "\"")
         .when().get(DIAGRAM_DEFINITION_URL).getBody().asByteArray();
 
     // verify service interaction
@@ -355,7 +355,7 @@ public void testDecisionDiagramNullFilename() throws FileNotFoundException, URIS
       .expect()
       .statusCode(Status.OK.getStatusCode())
       .contentType("application/octet-stream")
-      .header("Content-Disposition", "attachment; filename=" + null)
+      .header("Content-Disposition", "attachment; filename=\"" + null + "\"")
       .when().get(DIAGRAM_DEFINITION_URL).getBody().asByteArray();
 
     // verify service interaction

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/DecisionRequirementsDefinitionRestServiceInteractionTest.java
Patch:
@@ -236,8 +236,8 @@ public void decisionRequirementsDiagramRetrieval() throws FileNotFoundException,
       .expect()
         .statusCode(Status.OK.getStatusCode())
         .contentType("image/png")
-        .header("Content-Disposition", "attachment; filename=" +
-            MockProvider.EXAMPLE_DECISION_DEFINITION_DIAGRAM_RESOURCE_NAME)
+        .header("Content-Disposition", "attachment; filename=\"" +
+            MockProvider.EXAMPLE_DECISION_DEFINITION_DIAGRAM_RESOURCE_NAME + "\"")
       .when().get(DIAGRAM_DEFINITION_URL).getBody().asByteArray();
 
     verify(repositoryServiceMock).getDecisionRequirementsDefinition(MockProvider.EXAMPLE_DECISION_REQUIREMENTS_DEFINITION_ID);

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ProcessDefinitionRestServiceInteractionTest.java
Patch:
@@ -255,8 +255,8 @@ public void testProcessDiagramRetrieval() throws FileNotFoundException, URISynta
         .expect()
           .statusCode(Status.OK.getStatusCode())
           .contentType("image/png")
-          .header("Content-Disposition", "attachment; filename=" +
-              MockProvider.EXAMPLE_PROCESS_DEFINITION_DIAGRAM_RESOURCE_NAME)
+          .header("Content-Disposition", "attachment; filename=\"" +
+              MockProvider.EXAMPLE_PROCESS_DEFINITION_DIAGRAM_RESOURCE_NAME + "\"")
         .when().get(DIAGRAM_DEFINITION_URL).getBody().asByteArray();
 
     // verify service interaction
@@ -282,7 +282,7 @@ public void testProcessDiagramNullFilename() throws FileNotFoundException, URISy
       .expect()
       .statusCode(Status.OK.getStatusCode())
       .contentType("application/octet-stream")
-      .header("Content-Disposition", "attachment; filename=" + null)
+      .header("Content-Disposition", "attachment; filename=\"" + null + "\"")
       .when().get(DIAGRAM_DEFINITION_URL).getBody().asByteArray();
 
     // verify service interaction

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ProcessEngineRestServiceTest.java
Patch:
@@ -673,7 +673,7 @@ public void testHistoryServiceEngineAccess_HistoricVariableInstanceBinaryFile()
       .statusCode(Status.OK.getStatusCode())
       . body(is(equalTo(new String(byteContent))))
       .and()
-        .header("Content-Disposition", "attachment; filename="+filename)
+        .header("Content-Disposition", "attachment; filename=\"" + filename + "\"")
         .contentType(CoreMatchers.<String>either(equalTo(ContentType.TEXT.toString() + ";charset=UTF-8")).or(equalTo(ContentType.TEXT.toString() + " ;charset=UTF-8")))
       .when()
         .get(HISTORY_BINARY_VARIABLE_INSTANCE_URL);
@@ -744,7 +744,7 @@ public void testHistoryServiceEngineAccess_HistoricDetailBinaryFile() {
       .statusCode(Status.OK.getStatusCode())
       . body(is(equalTo(new String(byteContent))))
       .and()
-        .header("Content-Disposition", "attachment; filename="+filename)
+        .header("Content-Disposition", "attachment; filename=\"" + filename + "\"")
         .contentType(CoreMatchers.<String>either(equalTo(ContentType.TEXT.toString() + ";charset=UTF-8")).or(equalTo(ContentType.TEXT.toString() + " ;charset=UTF-8")))
       .when()
         .get(HISTORY_BINARY_DETAIL_URL);

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/TaskReportRestServiceTest.java
Patch:
@@ -149,7 +149,7 @@ public void testCsvTaskCountByCandidateGroupReport() {
         .expect()
           .statusCode(Status.OK.getStatusCode())
           .contentType("text/csv")
-          .header("Content-Disposition", "attachment; filename=task-count-by-candidate-group.csv")
+          .header("Content-Disposition", "attachment; filename=\"task-count-by-candidate-group.csv\"")
       .when()
         .get(CANDIDATE_GROUP_REPORT_URL);
 
@@ -167,7 +167,7 @@ public void testApplicationCsvTaskCountByCandidateGroupReport() {
         .expect()
           .statusCode(Status.OK.getStatusCode())
           .contentType("application/csv")
-          .header("Content-Disposition", "attachment; filename=task-count-by-candidate-group.csv")
+          .header("Content-Disposition", "attachment; filename=\"task-count-by-candidate-group.csv\"")
         .when()
           .get(CANDIDATE_GROUP_REPORT_URL);
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/VariableInstanceRestServiceInteractionTest.java
Patch:
@@ -313,7 +313,7 @@ public void testGetBinaryDataForFileVariable() {
     Response response = given().pathParam("id", MockProvider.EXAMPLE_VARIABLE_INSTANCE_ID)
     .then().expect().statusCode(Status.OK.getStatusCode())
     .and()
-      .header("Content-Disposition", "attachment; filename="+filename)
+      .header("Content-Disposition", "attachment; filename=\"" + filename + "\"")
     .and()
       .body(is(equalTo(new String(byteContent))))
     .when().get(VARIABLE_INSTANCE_BINARY_DATA_URL);

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricDetailRestServiceInteractionTest.java
Patch:
@@ -315,7 +315,7 @@ public void testBinaryDataForFileVariable() {
       .statusCode(Status.OK.getStatusCode())
       . body(is(equalTo(new String(byteContent))))
       .and()
-        .header("Content-Disposition", "attachment; filename="+filename)
+        .header("Content-Disposition", "attachment; filename=\"" + filename + "\"")
     .when().get(VARIABLE_INSTANCE_BINARY_DATA_URL);
     //due to some problems with wildfly we gotta check this separately
     String contentType = response.getContentType();

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricVariableInstanceRestServiceInteractionTest.java
Patch:
@@ -293,7 +293,7 @@ public void testGetBinaryDataForFileVariable() {
       .statusCode(Status.OK.getStatusCode())
     .and()
       .body(is(equalTo(new String(byteContent))))
-      .header("Content-Disposition", "attachment; filename="+filename)
+      .header("Content-Disposition", "attachment; filename=\"" + filename + "\"")
     .when().get(VARIABLE_INSTANCE_BINARY_DATA_URL);
     //due to some problems with wildfly we gotta check this separately
     String contentType = response.getContentType();

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExternalTaskManager.java
Patch:
@@ -33,6 +33,7 @@
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.db.ListQueryParameterObject;
 import org.camunda.bpm.engine.impl.db.entitymanager.DbEntityManager;
+import org.camunda.bpm.engine.impl.db.sql.DbSqlSessionFactory;
 import org.camunda.bpm.engine.impl.externaltask.TopicFetchInstruction;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.persistence.AbstractManager;
@@ -83,6 +84,8 @@ public List<ExternalTaskEntity> selectExternalTasksForTopics(Collection<TopicFet
     List<QueryOrderingProperty> orderingProperties = new ArrayList<>();
     orderingProperties.add(EXT_TASK_PRIORITY_ORDERING_PROPERTY);
     parameters.put("orderingProperties", orderingProperties);
+    String databaseType = Context.getProcessEngineConfiguration().getDatabaseType();
+    parameters.put("usesPostgres", DbSqlSessionFactory.POSTGRES.equals(databaseType));
 
     ListQueryParameterObject parameter = new ListQueryParameterObject(parameters, 0, maxResults);
     configureQuery(parameter);

File: distro/run/core/src/main/java/org/camunda/bpm/run/property/CamundaBpmRunCorsProperty.java
Patch:
@@ -20,6 +20,7 @@ public class CamundaBpmRunCorsProperty {
 
   public static final String PREFIX = CamundaBpmRunProperties.PREFIX + ".cors";
   public static final String DEFAULT_ORIGINS = "*";
+  public static final String DEFAULT_HTTP_METHODS = "GET,POST,HEAD,OPTIONS,PUT,DELETE";
 
   boolean enabled;
   String allowedOrigins;

File: distro/run/core/src/test/java/org/camunda/bpm/run/test/AbstractRestTest.java
Patch:
@@ -35,6 +35,8 @@
 @ActiveProfiles(profiles = { "test-auth-disabled" })
 public abstract class AbstractRestTest {
 
+  public static String CONTEXT_PATH = "/engine-rest";
+  
   @Autowired
   protected TestRestTemplate testRestTemplate;
 

File: distro/run/core/src/test/java/org/camunda/bpm/run/test/config/cors/CorsConfigurationDisabledTest.java
Patch:
@@ -35,6 +35,7 @@
 /**
  * Note: To run this test via an IDE you must set the system property
  * {@code sun.net.http.allowRestrictedHeaders} to {@code true}.
+ * (e.g. System.setProperty("sun.net.http.allowRestrictedHeaders", "true");)
  * 
  * @see https://jira.camunda.com/browse/CAM-11290
  */
@@ -52,7 +53,7 @@ public void shouldPassSameOriginRequest() {
     headers.add(HttpHeaders.ORIGIN, origin);
 
     // when
-    ResponseEntity<List> response = testRestTemplate.exchange("/engine-rest/task", HttpMethod.GET, new HttpEntity<>(headers), List.class);
+    ResponseEntity<List> response = testRestTemplate.exchange(CONTEXT_PATH + "/task", HttpMethod.GET, new HttpEntity<>(headers), List.class);
 
     // then
     assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
@@ -73,7 +74,7 @@ public void shouldFailCrossOriginRequest() {
     headers.add("Origin", origin);
 
     // when
-    ResponseEntity<List> response = testRestTemplate.exchange("/engine-rest/task", HttpMethod.GET, new HttpEntity<>(headers), List.class);
+    ResponseEntity<List> response = testRestTemplate.exchange(CONTEXT_PATH + "/task", HttpMethod.GET, new HttpEntity<>(headers), List.class);
 
     // then
     assertThat(response.getStatusCode()).isEqualTo(HttpStatus.FORBIDDEN);

File: distro/run/core/src/test/java/org/camunda/bpm/run/test/config/cors/CorsConfigurationEnabledWildcardTest.java
Patch:
@@ -32,6 +32,7 @@
 /**
  * Note: To run this test via an IDE you must set the system property
  * {@code sun.net.http.allowRestrictedHeaders} to {@code true}.
+ * (e.g. System.setProperty("sun.net.http.allowRestrictedHeaders", "true");)
  * 
  * @see https://jira.camunda.com/browse/CAM-11290
  */
@@ -48,7 +49,7 @@ public void shouldPassSameOriginRequest() {
     headers.add(HttpHeaders.ORIGIN, origin);
 
     // when
-    ResponseEntity<List> response = testRestTemplate.exchange("/engine-rest/task", HttpMethod.GET, new HttpEntity<>(headers), List.class);
+    ResponseEntity<List> response = testRestTemplate.exchange(CONTEXT_PATH + "/task", HttpMethod.GET, new HttpEntity<>(headers), List.class);
 
     // then
     assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
@@ -65,7 +66,7 @@ public void shouldPassCrossOriginRequest() {
     headers.add("Origin", origin);
 
     // when
-    ResponseEntity<List> response = testRestTemplate.exchange("/engine-rest/task", HttpMethod.GET, new HttpEntity<>(headers), List.class);
+    ResponseEntity<List> response = testRestTemplate.exchange(CONTEXT_PATH + "/task", HttpMethod.GET, new HttpEntity<>(headers), List.class);
 
     // then
     assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);

File: distro/run/core/src/test/java/org/camunda/bpm/run/test/config/https/HttpsConfigurationEnabledTest.java
Patch:
@@ -51,7 +51,7 @@ public void init() throws Exception {
   @Test
   public void shouldConnectWithHttps() {
     // given
-    String url = "https://localhost:" + localPort + "/engine-rest/task";
+    String url = "https://localhost:" + localPort + CONTEXT_PATH + "/task";
 
     // when
     ResponseEntity<List> response = testRestTemplate.exchange(url, HttpMethod.GET, new HttpEntity<>(null), List.class);
@@ -63,7 +63,7 @@ public void shouldConnectWithHttps() {
   @Test
   public void shouldNotRedirect() {
     // given
-    String url = "http://localhost:" + 8080 + "/engine-rest/task";
+    String url = "http://localhost:" + 8080 + CONTEXT_PATH + "/task";
 
     // then
     exceptionRule.expect(ResourceAccessException.class);

File: distro/run/qa/integration-tests/src/test/java/org/camunda/bpm/run/qa/ComponentAvailabilityIT.java
Patch:
@@ -97,7 +97,7 @@ public void shouldFindEngineViaRestApiRequest() {
 
   @Test
   public void shouldFindWelcomeApp() {
-    Response response = when().get(container.getBaseUrl() + "/app/welcome/default");
+    Response response = when().get(container.getBaseUrl() + "/camunda/app/welcome/default");
     if (webappsAvailable) {
       response.then()
         .statusCode(200)

File: spring-boot-starter/starter-webapp-core/src/main/java/org/camunda/bpm/spring/boot/starter/webapp/filter/ResourceLoadingSecurityFilter.java
Patch:
@@ -35,7 +35,7 @@ public class ResourceLoadingSecurityFilter extends SecurityFilter implements Res
 
   private WebappProperty webappProperty;
   @Override
-  protected void loadFilterRules(FilterConfig filterConfig) throws ServletException {
+  protected void loadFilterRules(FilterConfig filterConfig, String applicationPath) throws ServletException {
     String configFileName = filterConfig.getInitParameter("configFile");
     Resource resource = resourceLoader.getResource("classpath:" +webappProperty.getWebjarClasspath() + configFileName);
     InputStream configFileResource;
@@ -45,7 +45,7 @@ protected void loadFilterRules(FilterConfig filterConfig) throws ServletExceptio
       throw new ServletException("Could not read security filter config file '" + configFileName + "': no such resource in servlet context.");
     }
     try {
-      filterRules = FilterRules.load(configFileResource);
+      filterRules = FilterRules.load(configFileResource, applicationPath);
     } catch (Exception e) {
       throw new RuntimeException("Exception while parsing '" + configFileName + "'", e);
     } finally {

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/CookieNameIT.java
Patch:
@@ -46,7 +46,7 @@ public void shouldChangeCookieName() {
     // given
 
     // when
-    headerRule.performRequest("http://localhost:" + port + "/app/tasklist/default");
+    headerRule.performRequest("http://localhost:" + port + "/camunda/app/tasklist/default");
 
     String xsrfCookieValue = headerRule.getCookieValue("myFancyCookieName");
     String xsrfTokenHeader = headerRule.getXsrfTokenHeader();

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/SameSiteCustomValueIT.java
Patch:
@@ -45,7 +45,7 @@ public class SameSiteCustomValueIT {
 
   @Test
   public void shouldSetSameSiteCookieCustomValue() {
-    headerRule.performRequest("http://localhost:" + port + "/app/tasklist/default");
+    headerRule.performRequest("http://localhost:" + port + "/camunda/app/tasklist/default");
 
     String xsrfCookieValue = headerRule.getXsrfCookieValue();
     String xsrfTokenHeader = headerRule.getXsrfTokenHeader();

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/SameSiteDisabledIT.java
Patch:
@@ -45,7 +45,7 @@ public class SameSiteDisabledIT {
 
   @Test
   public void shouldDisableSameSiteCookie() {
-    headerRule.performRequest("http://localhost:" + port + "/app/tasklist/default");
+    headerRule.performRequest("http://localhost:" + port + "/camunda/app/tasklist/default");
 
     String xsrfCookieValue = headerRule.getXsrfCookieValue();
     String xsrfTokenHeader = headerRule.getXsrfTokenHeader();

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/SameSiteEnabledIT.java
Patch:
@@ -45,7 +45,7 @@ public class SameSiteEnabledIT {
 
   @Test
   public void shouldEnableSameSiteCookie() {
-    headerRule.performRequest("http://localhost:" + port + "/app/tasklist/default");
+    headerRule.performRequest("http://localhost:" + port + "/camunda/app/tasklist/default");
 
     String xsrfCookieValue = headerRule.getXsrfCookieValue();
     String xsrfTokenHeader = headerRule.getXsrfTokenHeader();

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/SameSiteOptionLaxIT.java
Patch:
@@ -45,7 +45,7 @@ public class SameSiteOptionLaxIT {
 
   @Test
   public void shouldSetSameSiteCookieOptionLax() {
-    headerRule.performRequest("http://localhost:" + port + "/app/tasklist/default");
+    headerRule.performRequest("http://localhost:" + port + "/camunda/app/tasklist/default");
 
     String xsrfCookieValue = headerRule.getXsrfCookieValue();
     String xsrfTokenHeader = headerRule.getXsrfTokenHeader();

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/SameSiteOptionStrictIT.java
Patch:
@@ -45,7 +45,7 @@ public class SameSiteOptionStrictIT {
 
   @Test
   public void shouldSetSameSiteCookieOptionStrict() {
-    headerRule.performRequest("http://localhost:" + port + "/app/tasklist/default");
+    headerRule.performRequest("http://localhost:" + port + "/camunda/app/tasklist/default");
 
     String xsrfCookieValue = headerRule.getXsrfCookieValue();
     String xsrfTokenHeader = headerRule.getXsrfTokenHeader();

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/SecureDisabledIT.java
Patch:
@@ -45,7 +45,7 @@ public class SecureDisabledIT {
 
   @Test
   public void shouldDisableSecureCookie() {
-    headerRule.performRequest("http://localhost:" + port + "/app/tasklist/default");
+    headerRule.performRequest("http://localhost:" + port + "/camunda/app/tasklist/default");
 
     String xsrfCookieValue = headerRule.getXsrfCookieValue();
     String xsrfTokenHeader = headerRule.getXsrfTokenHeader();

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/SecureEnabledIT.java
Patch:
@@ -45,7 +45,7 @@ public class SecureEnabledIT {
 
   @Test
   public void shouldEnableSecureCookie() {
-    headerRule.performRequest("http://localhost:" + port + "/app/tasklist/default");
+    headerRule.performRequest("http://localhost:" + port + "/camunda/app/tasklist/default");
 
     String xsrfCookieValue = headerRule.getXsrfCookieValue();
     String xsrfTokenHeader = headerRule.getXsrfTokenHeader();

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/BpmnActivityBehavior.java
Patch:
@@ -51,8 +51,8 @@ public class BpmnActivityBehavior {
    * the process instance. If multiple sequencer flow are selected, multiple,
    * parallel paths of executions are created.
    */
-  public void performDefaultOutgoingBehavior(ActivityExecution activityExceution) {
-    performOutgoingBehavior(activityExceution, true, null);
+  public void performDefaultOutgoingBehavior(ActivityExecution activityExecution) {
+    performOutgoingBehavior(activityExecution, true, null);
   }
 
   /**

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/jpa/BigIntegerIdJPAEntity.java
Patch:
@@ -29,7 +29,7 @@
 public class BigIntegerIdJPAEntity {
 
   @Id
-  @Column(name = "ID_")
+  @Column(name = "ID_", columnDefinition = "DECIMAL(65535, 32767)")
   private BigInteger bigIntegerId;
 
   public BigInteger getBigIntegerId() {

File: distro/run/core/src/test/java/org/camunda/bpm/run/test/config/cors/CorsConfigurationDisabledTest.java
Patch:
@@ -52,7 +52,7 @@ public void shouldPassSameOriginRequest() {
     headers.add(HttpHeaders.ORIGIN, origin);
 
     // when
-    ResponseEntity<List> response = testRestTemplate.exchange("/rest/task", HttpMethod.GET, new HttpEntity<>(headers), List.class);
+    ResponseEntity<List> response = testRestTemplate.exchange("/engine-rest/task", HttpMethod.GET, new HttpEntity<>(headers), List.class);
 
     // then
     assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
@@ -73,7 +73,7 @@ public void shouldFailCrossOriginRequest() {
     headers.add("Origin", origin);
 
     // when
-    ResponseEntity<List> response = testRestTemplate.exchange("/rest/task", HttpMethod.GET, new HttpEntity<>(headers), List.class);
+    ResponseEntity<List> response = testRestTemplate.exchange("/engine-rest/task", HttpMethod.GET, new HttpEntity<>(headers), List.class);
 
     // then
     assertThat(response.getStatusCode()).isEqualTo(HttpStatus.FORBIDDEN);

File: distro/run/core/src/test/java/org/camunda/bpm/run/test/config/cors/CorsConfigurationEnabledAllowedOriginConfiguredTest.java
Patch:
@@ -51,7 +51,7 @@ public void shouldPassSameOriginRequest() {
     headers.add(HttpHeaders.ORIGIN, origin);
 
     // when
-    ResponseEntity<List> response = testRestTemplate.exchange("/rest/task", HttpMethod.GET, new HttpEntity<>(headers), List.class);
+    ResponseEntity<List> response = testRestTemplate.exchange("/engine-rest/task", HttpMethod.GET, new HttpEntity<>(headers), List.class);
 
     // then
     assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
@@ -68,7 +68,7 @@ public void shouldFailCrossOriginRequestFromNotAllowedOrigin() {
     headers.add("Origin", origin);
 
     // when
-    ResponseEntity<List> response = testRestTemplate.exchange("/rest/task", HttpMethod.GET, new HttpEntity<>(headers), List.class);
+    ResponseEntity<List> response = testRestTemplate.exchange("/engine-rest/task", HttpMethod.GET, new HttpEntity<>(headers), List.class);
 
     // then
     assertThat(response.getStatusCode()).isEqualTo(HttpStatus.FORBIDDEN);
@@ -85,7 +85,7 @@ public void shouldPassCrossOriginRequestFromAllowedOrigin() {
     headers.add("Origin", origin);
 
     // when
-    ResponseEntity<List> response = testRestTemplate.exchange("/rest/task", HttpMethod.GET, new HttpEntity<>(headers), List.class);
+    ResponseEntity<List> response = testRestTemplate.exchange("/engine-rest/task", HttpMethod.GET, new HttpEntity<>(headers), List.class);
 
     // then
     assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);

File: distro/run/core/src/test/java/org/camunda/bpm/run/test/config/cors/CorsConfigurationEnabledWildcardTest.java
Patch:
@@ -48,7 +48,7 @@ public void shouldPassSameOriginRequest() {
     headers.add(HttpHeaders.ORIGIN, origin);
 
     // when
-    ResponseEntity<List> response = testRestTemplate.exchange("/rest/task", HttpMethod.GET, new HttpEntity<>(headers), List.class);
+    ResponseEntity<List> response = testRestTemplate.exchange("/engine-rest/task", HttpMethod.GET, new HttpEntity<>(headers), List.class);
 
     // then
     assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
@@ -65,7 +65,7 @@ public void shouldPassCrossOriginRequest() {
     headers.add("Origin", origin);
 
     // when
-    ResponseEntity<List> response = testRestTemplate.exchange("/rest/task", HttpMethod.GET, new HttpEntity<>(headers), List.class);
+    ResponseEntity<List> response = testRestTemplate.exchange("/engine-rest/task", HttpMethod.GET, new HttpEntity<>(headers), List.class);
 
     // then
     assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);

File: distro/run/core/src/test/java/org/camunda/bpm/run/test/config/https/HttpsConfigurationEnabledTest.java
Patch:
@@ -51,7 +51,7 @@ public void init() throws Exception {
   @Test
   public void shouldConnectWithHttps() {
     // given
-    String url = "https://localhost:" + localPort + "/rest/task";
+    String url = "https://localhost:" + localPort + "/engine-rest/task";
 
     // when
     ResponseEntity<List> response = testRestTemplate.exchange(url, HttpMethod.GET, new HttpEntity<>(null), List.class);
@@ -63,7 +63,7 @@ public void shouldConnectWithHttps() {
   @Test
   public void shouldNotRedirect() {
     // given
-    String url = "http://localhost:" + 8080 + "/rest/task";
+    String url = "http://localhost:" + 8080 + "/engine-rest/task";
 
     // then
     exceptionRule.expect(ResourceAccessException.class);

File: distro/run/qa/integration-tests/src/test/java/org/camunda/bpm/run/qa/AutoDeploymentIT.java
Patch:
@@ -43,8 +43,8 @@
 import io.restassured.response.Response;
 
 public class AutoDeploymentIT {
-  static final String PROCESS_DEFINITION_ENDPOINT = "/rest/process-definition";
-  static final String DEPLOYMENT_ENDPOINT = "/rest/deployment";
+  static final String PROCESS_DEFINITION_ENDPOINT = "/engine-rest/process-definition";
+  static final String DEPLOYMENT_ENDPOINT = "/engine-rest/deployment";
 
   static List<File> dummyFiles = new ArrayList<>();
   static SpringBootManagedContainer container;

File: distro/run/qa/integration-tests/src/test/java/org/camunda/bpm/run/qa/ComponentAvailabilityIT.java
Patch:
@@ -84,7 +84,7 @@ public static void stopApp() {
 
   @Test
   public void shouldFindEngineViaRestApiRequest() {
-    Response response = when().get(container.getBaseUrl() + "/rest/engine");
+    Response response = when().get(container.getBaseUrl() + "/engine-rest/engine");
     if (restAvailable) {
       response.then()
         .body("size()", is(1))

File: distro/run/qa/integration-tests/src/test/java/org/camunda/bpm/run/qa/ProductionConfigurationIT.java
Patch:
@@ -62,7 +62,7 @@ public void runStartScript() throws IOException {
   @Test
   public void shouldStartWithProductionConfiguration() {
     // when
-    Response engineResponse = when().get(container.getBaseUrl() + "/rest/engine");
+    Response engineResponse = when().get(container.getBaseUrl() + "/engine-rest/engine");
 
     // then
     engineResponse.then()

File: spring-boot-starter/starter-rest/src/main/java/org/camunda/bpm/spring/boot/starter/rest/CamundaJerseyResourceConfig.java
Patch:
@@ -23,7 +23,7 @@
 import org.slf4j.Logger;
 import org.springframework.beans.factory.InitializingBean;
 
-@ApplicationPath("/rest")
+@ApplicationPath("/engine-rest")
 public class CamundaJerseyResourceConfig extends ResourceConfig implements InitializingBean {
 
   private static final Logger log = org.slf4j.LoggerFactory.getLogger(CamundaJerseyResourceConfig.class);

File: spring-boot-starter/starter-rest/src/test/java/my/own/custom/spring/boot/project/JerseyConfig.java
Patch:
@@ -22,7 +22,7 @@
 import org.springframework.stereotype.Component;
 
 @Component
-@ApplicationPath("/rest")
+@ApplicationPath("/engine-rest")
 public class JerseyConfig extends CamundaJerseyResourceConfig {
 
   @Override

File: spring-boot-starter/starter-rest/src/test/java/org/camunda/bpm/spring/boot/starter/rest/CamundaBpmRestConfigurationIT.java
Patch:
@@ -44,9 +44,9 @@ public class CamundaBpmRestConfigurationIT {
   @Test
   public void processDefinitionTest() {
     // start process
-    testRestTemplate.postForEntity("/rest/start/process", HttpEntity.EMPTY, String.class);
+    testRestTemplate.postForEntity("/engine-rest/start/process", HttpEntity.EMPTY, String.class);
 
-    ResponseEntity<ProcessDefinitionDto> entity = testRestTemplate.getForEntity("/rest/engine/{engineName}/process-definition/key/TestProcess/",
+    ResponseEntity<ProcessDefinitionDto> entity = testRestTemplate.getForEntity("/engine-rest/engine/{engineName}/process-definition/key/TestProcess/",
         ProcessDefinitionDto.class, camundaBpmProperties.getProcessEngineName());
 
     assertEquals(HttpStatus.OK, entity.getStatusCode());

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/configuration/impl/DefaultJobConfiguration.java
Patch:
@@ -21,9 +21,9 @@
 import java.util.List;
 import java.util.Optional;
 
-import org.camunda.bpm.engine.impl.jobexecutor.CallerRunsRejectedJobsHandler;
 import org.camunda.bpm.engine.impl.jobexecutor.JobExecutor;
 import org.camunda.bpm.engine.impl.jobexecutor.JobHandler;
+import org.camunda.bpm.engine.impl.jobexecutor.NotifyAcquisitionRejectedJobsHandler;
 import org.camunda.bpm.engine.spring.SpringProcessEngineConfiguration;
 import org.camunda.bpm.engine.spring.components.jobexecutor.SpringJobExecutor;
 import org.camunda.bpm.spring.boot.starter.configuration.CamundaJobConfiguration;
@@ -103,7 +103,7 @@ public static TaskExecutor camundaTaskExecutor(CamundaBpmProperties properties)
     public static JobExecutor jobExecutor(@Qualifier(CAMUNDA_TASK_EXECUTOR_QUALIFIER) final TaskExecutor taskExecutor, CamundaBpmProperties properties) {
       final SpringJobExecutor springJobExecutor = new SpringJobExecutor();
       springJobExecutor.setTaskExecutor(taskExecutor);
-      springJobExecutor.setRejectedJobsHandler(new CallerRunsRejectedJobsHandler());
+      springJobExecutor.setRejectedJobsHandler(new NotifyAcquisitionRejectedJobsHandler());
 
       JobExecutionProperty jobExecution = properties.getJobExecution();
       Optional.ofNullable(jobExecution.getLockTimeInMillis()).ifPresent(springJobExecutor::setLockTimeInMillis);

File: engine-rest/engine-rest-openapi-generator/src/main/java/org/camunda/bpm/engine/rest/openapi/generator/impl/TemplateParser.java
Patch:
@@ -126,6 +126,8 @@ protected static void resolveVersions(Map<String, Object> templateData) {
   
       if (version.contains("SNAPSHOT")) {
         templateData.put("docsVersion", "develop");
+      } else if (version.contains("alpha")) {
+        templateData.put("docsVersion", "latest");
       } else {
         // docsVersion = 7.X
         templateData.put("docsVersion", version.substring(0, version.lastIndexOf(".")));

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/VariableInstanceRestServiceInteractionTest.java
Patch:
@@ -97,6 +97,7 @@ public void testGetSingleVariableInstance() {
       .body("name", equalTo(builder.getName()))
       .body("type", equalTo(VariableTypeHelper.toExpectedValueTypeName(builder.getTypedValue().getType())))
       .body("value", equalTo(builder.getTypedValue().getValue()))
+      .body("processDefinitionId", equalTo(builder.getProcessDefinitionId()))
       .body("processInstanceId", equalTo(builder.getProcessInstanceId()))
       .body("executionId", equalTo(builder.getExecutionId()))
       .body("caseInstanceId", equalTo(builder.getCaseInstanceId()))
@@ -171,6 +172,7 @@ public void testGetSingleVariableInstanceSerialized() {
       .body("value", equalTo("a serialized value"))
       .body("valueInfo.serializationDataFormat", equalTo("aDataFormat"))
       .body("valueInfo.objectTypeName", equalTo("aTypeName"))
+      .body("processDefinitionId", equalTo(builder.getProcessDefinitionId()))
       .body("processInstanceId", equalTo(builder.getProcessInstanceId()))
       .body("executionId", equalTo(builder.getExecutionId()))
       .body("caseInstanceId", equalTo(builder.getCaseInstanceId()))

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/VariableInstanceRestServiceQueryTest.java
Patch:
@@ -313,6 +313,7 @@ public void testVariableInstanceRetrieval() {
           .body("[0].name", equalTo(mockInstanceBuilder.getName()))
           .body("[0].type", equalTo(VariableTypeHelper.toExpectedValueTypeName(mockInstanceBuilder.getTypedValue().getType())))
           .body("[0].value", equalTo(mockInstanceBuilder.getValue()))
+          .body("[0].processDefinitionId", equalTo(mockInstanceBuilder.getProcessDefinitionId()))
           .body("[0].processInstanceId", equalTo(mockInstanceBuilder.getProcessInstanceId()))
           .body("[0].executionId", equalTo(mockInstanceBuilder.getExecutionId()))
           .body("[0].caseInstanceId", equalTo(mockInstanceBuilder.getCaseInstanceId()))

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -2350,7 +2350,8 @@ public static MockHistoricVariableUpdateBuilder mockHistoricVariableUpdate(Strin
         .caseDefinitionId(EXAMPLE_HISTORIC_VAR_UPDATE_CASE_DEF_ID)
         .caseInstanceId(EXAMPLE_HISTORIC_VAR_UPDATE_CASE_INST_ID)
         .caseExecutionId(EXAMPLE_HISTORIC_VAR_UPDATE_CASE_EXEC_ID)
-        .tenantId(tenantId);
+        .tenantId(tenantId)
+        .initial(false);
   }
 
   public static HistoricFormField createMockHistoricFormField() {

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricDetailRestServiceInteractionTest.java
Patch:
@@ -140,6 +140,7 @@ public void testGetSingleVariableUpdateDeserialized() {
       .body("value", equalTo("a value"))
       .body("valueInfo.serializationDataFormat", equalTo("aDataFormat"))
       .body("valueInfo.objectTypeName", equalTo("aTypeName"))
+      .body("initial", equalTo(false))
       .body("processDefinitionKey", equalTo(builder.getProcessDefinitionKey()))
       .body("processDefinitionId", equalTo(builder.getProcessDefinitionId()))
       .body("processInstanceId", equalTo(builder.getProcessInstanceId()))
@@ -185,6 +186,7 @@ public void testGetSingleVariableUpdateSerialized() {
       .body("value", equalTo("a serialized value"))
       .body("valueInfo.serializationDataFormat", equalTo("aDataFormat"))
       .body("valueInfo.objectTypeName", equalTo("aTypeName"))
+      .body("initial", equalTo(false))
       .body("processDefinitionKey", equalTo(builder.getProcessDefinitionKey()))
       .body("processDefinitionId", equalTo(builder.getProcessDefinitionId()))
       .body("processInstanceId", equalTo(builder.getProcessInstanceId()))

File: engine/src/main/java/org/camunda/bpm/engine/history/HistoricDetailQuery.java
Patch:
@@ -127,6 +127,9 @@ public interface HistoricDetailQuery extends Query<HistoricDetailQuery, Historic
   /** Only select historic details that have occurred after the given date (inclusive). */
   HistoricDetailQuery occurredAfter(Date date);
 
+  /** Only select historic details that were set during the process start. */
+  HistoricDetailQuery initial();
+
   /**
    * Order by tenant id (needs to be followed by {@link #asc()} or {@link #desc()}).
    * Note that the ordering of historic details without tenant id is database-specific.

File: engine/src/main/java/org/camunda/bpm/engine/impl/util/ExceptionUtil.java
Patch:
@@ -172,7 +172,7 @@ public static boolean checkVariableIntegrityViolation(Throwable cause) {
         // Oracle
         || (exception.getMessage().toLowerCase().contains("act_uniq_variable") && "23000".equals(exception.getSQLState()) && exception.getErrorCode() == 1)
         // H2
-        || (exception.getMessage().toLowerCase().contains("act_uniq_variable_index_c") && "23505".equals(exception.getSQLState()) && exception.getErrorCode() == 23505)
+        || (exception.getMessage().toLowerCase().contains("act_uniq_variable") && "23505".equals(exception.getSQLState()) && exception.getErrorCode() == 23505)
         ) {
         return true;
       }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/RestartProcessInstanceAsyncTest.java
Patch:
@@ -1088,7 +1088,7 @@ public void shouldNotSetInitialVariablesIfThereIsNoUniqueStartActivity() {
     // then
     List<ProcessInstance> restartedProcessInstances = runtimeService.createProcessInstanceQuery().processDefinitionId(processDefinition.getId()).list();
     List<VariableInstance> variables = runtimeService.createVariableInstanceQuery().processInstanceIdIn(restartedProcessInstances.get(0).getId(), restartedProcessInstances.get(1).getId()).list();
-    Assert.assertEquals(0, variables.size());
+    assertEquals(0, variables.size());
   }
 
   @Test

File: distro/run/qa/integration-tests/src/test/java/org/camunda/bpm/run/qa/SqlAvailabilityIT.java
Patch:
@@ -23,13 +23,14 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
+import org.camunda.bpm.run.qa.util.SpringBootManagedContainer;
 import org.junit.Test;
 
 public class SqlAvailabilityIT {
 
   @Test
   public void shouldFindSqlResources() throws URISyntaxException {
-    Path sqlDir = Paths.get(SqlAvailabilityIT.class.getClassLoader().getResource("camunda-bpm-run-distro/configuration/sql/").toURI());
+    Path sqlDir = Paths.get(SpringBootManagedContainer.getRunHome(), "configuration", "sql");
 
     Path createDir = sqlDir.resolve("create");
     Path dropDir = sqlDir.resolve("drop");

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TaskReportManager.java
Patch:
@@ -59,7 +59,7 @@ public List<DurationReportResult> createHistoricTaskDurationReport(HistoricTaskI
   }
 
   protected void configureQuery(HistoricTaskInstanceReportImpl parameter) {
-    getAuthorizationManager().checkAuthorization(Permissions.READ_HISTORY, Resources.TASK, Authorization.ANY);
+    getAuthorizationManager().checkAuthorization(Permissions.READ_HISTORY, Resources.PROCESS_DEFINITION, Authorization.ANY);
     getTenantManager().configureTenantCheck(parameter.getTenantCheck());
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/ExecuteJobsRunnable.java
Patch:
@@ -68,7 +68,7 @@ public void run() {
         if (jobExecutor.isActive()) {
           JobFailureCollector jobFailureCollector = new JobFailureCollector(nextJobId);
           try {
-            ExecuteJobHelper.executeJob(nextJobId, commandExecutor, jobFailureCollector, new ExecuteJobsCmd(nextJobId, jobFailureCollector), engineConfiguration);
+            executeJob(nextJobId, commandExecutor, jobFailureCollector);
           } catch(Throwable t) {
             if (ProcessEngineLogger.shouldLogJobException(engineConfiguration, jobFailureCollector.getJob())) {
               ExecuteJobHelper.LOGGING_HANDLER.exceptionWhileExecutingJob(nextJobId, t);
@@ -106,8 +106,8 @@ public void run() {
    * Note: this is a hook to be overridden by
    * org.camunda.bpm.container.impl.threading.ra.inflow.JcaInflowExecuteJobsRunnable.executeJob(String, CommandExecutor)
    */
-  protected void executeJob(String nextJobId, CommandExecutor commandExecutor) {
-    ExecuteJobHelper.executeJob(nextJobId, commandExecutor);
+  protected void executeJob(String nextJobId, CommandExecutor commandExecutor, JobFailureCollector jobFailureCollector) {
+    ExecuteJobHelper.executeJob(nextJobId, commandExecutor, jobFailureCollector, new ExecuteJobsCmd(nextJobId, jobFailureCollector), processEngine.getProcessEngineConfiguration());
   }
 
   protected void unlockJob(String nextJobId, CommandExecutor commandExecutor) {

File: javaee/jobexecutor-ra/src/main/java/org/camunda/bpm/container/impl/threading/ra/inflow/JcaInflowExecuteJobsRunnable.java
Patch:
@@ -55,7 +55,7 @@ public JcaInflowExecuteJobsRunnable(List<String> jobIds, ProcessEngineImpl proce
   }
 
   @Override
-  protected void executeJob(String nextJobId, CommandExecutor commandExecutor) {
+  protected void executeJob(String nextJobId, CommandExecutor commandExecutor, JobFailureCollector jobFailureCollector) {
     JobExecutionHandlerActivation jobHandlerActivation = ra.getJobHandlerActivation();
     if(jobHandlerActivation == null) {
       // TODO: stop acquisition / only activate acquisition if MDB active?
@@ -73,7 +73,6 @@ protected void executeJob(String nextJobId, CommandExecutor commandExecutor) {
       } catch (ResourceException e) {
         log.log(Level.WARNING, "ResourceException while invoking beforeDelivery() on MessageEndpoint '"+endpoint+"'", e);
       }
-      JobFailureCollector jobFailureCollector = null;
       try {
         jobFailureCollector = ((JobExecutionHandler)endpoint).executeJob(nextJobId, commandExecutor);
       }catch (Exception e) {

File: distro/run/qa/src/test/java/org/camunda/bpm/run/qa/ComponentAvailabilityIT.java
Patch:
@@ -41,7 +41,7 @@
  * Test cases for ensuring connectivity to REST API based on startup parameters
  */
 @RunWith(Parameterized.class)
-public class ComponentAvailabilityTest {
+public class ComponentAvailabilityIT {
 
   @Parameter(0)
   public String[] commands;
@@ -64,7 +64,7 @@ public static Collection<Object[]> commands() {
 
   @BeforeParam
   public static void runStartScript(String[] commands, boolean restAvailable, boolean webappsAvailable) {
-    URL distroBase = ComponentAvailabilityTest.class.getClassLoader().getResource("camunda-bpm-run-distro");
+    URL distroBase = ComponentAvailabilityIT.class.getClassLoader().getResource("camunda-bpm-run-distro");
     assertNotNull(distroBase);
     File file = new File(distroBase.getFile());
     container = new SpringBootManagedContainer(file.getAbsolutePath(), commands);

File: distro/run/qa/src/test/java/org/camunda/bpm/run/qa/ProductionConfigurationIT.java
Patch:
@@ -33,9 +33,9 @@
 
 import io.restassured.response.Response;
 
-public class ProductionConfigurationIntegrationTest {
+public class ProductionConfigurationIT {
 
-  static URL distroBase = ProductionConfigurationIntegrationTest.class.getClassLoader().getResource("camunda-bpm-run-distro");
+  static URL distroBase = ProductionConfigurationIT.class.getClassLoader().getResource("camunda-bpm-run-distro");
   static SpringBootManagedContainer container;
 
   @After
@@ -59,7 +59,7 @@ public void runStartScript() throws IOException {
     container = new SpringBootManagedContainer(file.getAbsolutePath(), "--production");
 
     container.createConfigurationYml("configuration/production.yml",
-        ProductionConfigurationIntegrationTest.class.getClassLoader().getResourceAsStream("ProductionConfigurationIntegrationTest_production.yml"));
+        ProductionConfigurationIT.class.getClassLoader().getResourceAsStream("ProductionConfigurationIntegrationTest_production.yml"));
 
     try {
       container.start();

File: distro/run/qa/src/test/java/org/camunda/bpm/run/qa/SqlAvailabilityIT.java
Patch:
@@ -24,11 +24,11 @@
 
 import org.junit.Test;
 
-public class SqlAvailabilityIntegrationTest {
+public class SqlAvailabilityIT {
 
   @Test
   public void shouldFindSqlResources() throws URISyntaxException {
-    Path sqlDir = Paths.get(SqlAvailabilityIntegrationTest.class.getClassLoader().getResource("camunda-bpm-run-distro/configuration/sql/").toURI());
+    Path sqlDir = Paths.get(SqlAvailabilityIT.class.getClassLoader().getResource("camunda-bpm-run-distro/configuration/sql/").toURI());
 
     Path createDir = sqlDir.resolve("create");
     Path dropDir = sqlDir.resolve("drop");

File: distro/run/qa/src/test/java/org/camunda/bpm/run/qa/webapps/AbstractWebIT.java
Patch:
@@ -36,9 +36,9 @@
  * <a href="https://github.com/camunda/camunda-bpm-platform/blob/master/qa/integration-tests-webapps/integration-tests/src/test/java/org/camunda/bpm/AbstractWebIntegrationTest.java">platform</a>,
  * might be removed with https://jira.camunda.com/browse/CAM-11379
  */
-public abstract class AbstractWebIntegrationTest {
+public abstract class AbstractWebIT {
 
-  private final static Logger LOGGER = Logger.getLogger(AbstractWebIntegrationTest.class.getName());
+  private final static Logger LOGGER = Logger.getLogger(AbstractWebIT.class.getName());
 
   protected String TASKLIST_PATH = "app/tasklist/default/";
   public static final String HOST_NAME = "localhost";

File: distro/run/qa/src/test/java/org/camunda/bpm/run/qa/webapps/AbstractWebappUiIT.java
Patch:
@@ -37,7 +37,7 @@
  * <a href="https://github.com/camunda/camunda-bpm-platform/blob/master/qa/integration-tests-webapps/integration-tests/src/test/java/org/camunda/bpm/AbstractWebappUiIntegrationTest.java">platform</a>,
  * might be removed with https://jira.camunda.com/browse/CAM-11379
  */
-public class AbstractWebappUiIntegrationTest extends AbstractWebIntegrationTest {
+public class AbstractWebappUiIT extends AbstractWebIT {
 
   protected static WebDriver driver;
 

File: distro/run/qa/src/test/java/org/camunda/bpm/run/qa/webapps/LoginIT.java
Patch:
@@ -50,7 +50,7 @@
  * and <code>@Parameters</code> for different setups, might be removed with https://jira.camunda.com/browse/CAM-11379
  */
 @RunWith(Parameterized.class)
-public class LoginITTest extends AbstractWebappUiIntegrationTest {
+public class LoginIT extends AbstractWebappUiIT {
 
   @Parameter
   public String[] commands;
@@ -75,7 +75,7 @@ public static Collection<Object[]> commands() {
 
   @BeforeParam
   public static void runStartScript(String[] commands) {
-    URL distroBase = LoginITTest.class.getClassLoader().getResource("camunda-bpm-run-distro");
+    URL distroBase = LoginIT.class.getClassLoader().getResource("camunda-bpm-run-distro");
     assertNotNull(distroBase);
     File file = new File(distroBase.getFile());
     container = new SpringBootManagedContainer(file.getAbsolutePath(), commands);

File: distro/run/core/src/main/java/org/camunda/bpm/run/property/CamundaBpmRunAuthenticationProperties.java
Patch:
@@ -25,7 +25,7 @@ public class CamundaBpmRunAuthenticationProperties {
   public static final String DEFAULT_AUTH = "basic";
   public static final List<String> AUTH_METHODS = Arrays.asList(DEFAULT_AUTH);
 
-  boolean enabled = true;
+  boolean enabled;
   String authentication = DEFAULT_AUTH;
 
   public boolean isEnabled() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/auth/AuthorizationCommandChecker.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.camunda.bpm.engine.impl.cfg.auth;
 
-import org.camunda.bpm.engine.authorization.Permissions;
 import org.camunda.bpm.engine.history.HistoricCaseInstance;
 import org.camunda.bpm.engine.history.HistoricDecisionInstance;
 import org.camunda.bpm.engine.history.HistoricProcessInstance;
@@ -158,9 +157,9 @@ public void checkUpdateRetriesProcessInstanceByProcessDefinitionId(String proces
         CompositePermissionCheck retryJobPermission = new PermissionCheckBuilder()
             .disjunctive()
               .atomicCheckForResourceId(PROCESS_INSTANCE, ANY, ProcessInstancePermissions.RETRY_JOB)
-              .atomicCheckForResourceId(PROCESS_DEFINITION, processDefinitionId, ProcessDefinitionPermissions.RETRY_JOB)
+              .atomicCheckForResourceId(PROCESS_DEFINITION, processDefinition.getKey(), ProcessDefinitionPermissions.RETRY_JOB)
               .atomicCheckForResourceId(PROCESS_INSTANCE, ANY, UPDATE)
-              .atomicCheckForResourceId(PROCESS_DEFINITION, processDefinitionId, UPDATE_INSTANCE)
+              .atomicCheckForResourceId(PROCESS_DEFINITION, processDefinition.getKey(), UPDATE_INSTANCE)
             .build();
 
         getAuthorizationManager().checkAuthorization(retryJobPermission);

File: engine-rest/engine-rest-openapi/src/test/java/org/camunda/bpm/engine/rest/openapi/client/DeploymentTest.java
Patch:
@@ -63,7 +63,7 @@ public void shouldCreateDeployment() throws ApiException {
                 "    \"id\": \"aDeploymentId\"," +
                 "    \"name\": \"" + deploymentName + "\"," +
                 "    \"source\": \"" + deploymentSource + "\"," +
-                "    \"deploymentTime\": \"2013-01-23T13:59:43+02:00\"," + // TODO Dates CAM-11407
+                "    \"deploymentTime\": \"2013-01-23T13:59:43.000+0200\"," +
                 "    \"tenantId\": null," +
                 "    \"deployedProcessDefinitions\": {" +
                 "        \"aProcDefId\": {" +

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/Dmn.java
Patch:
@@ -19,6 +19,7 @@
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_ALTERNATIVE_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN11_NS;
 import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN12_NS;
+import static org.camunda.bpm.model.dmn.impl.DmnModelConstants.DMN13_NS;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -220,6 +221,7 @@ protected Dmn() {
     dmnModelBuilder = ModelBuilder.createInstance("DMN Model");
     dmnModelBuilder.alternativeNamespace(DMN11_ALTERNATIVE_NS, DMN11_NS);
     dmnModelBuilder.alternativeNamespace(DMN12_NS, DMN11_NS);
+    dmnModelBuilder.alternativeNamespace(DMN13_NS, DMN11_NS);
     doRegisterTypes(dmnModelBuilder);
     dmnModel = dmnModelBuilder.build();
   }

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/DmnModelConstants.java
Patch:
@@ -21,6 +21,7 @@ public final class DmnModelConstants {
   /** The DMN 1.1 namespace */
   public static final String DMN11_NS = "http://www.omg.org/spec/DMN/20151101/dmn.xsd";
   public static final String DMN12_NS = "http://www.omg.org/spec/DMN/20180521/MODEL/";
+  public static final String DMN13_NS = "https://www.omg.org/spec/DMN/20191111/MODEL/";
   
   /**
    * The DMN 1.1 namespace URL release with Camunda 7.4.0
@@ -30,6 +31,7 @@ public final class DmnModelConstants {
   /** The location of the DMN 1.1 XML schema. */
   public static final String DMN_11_SCHEMA_LOCATION = "DMN11.xsd";
   public static final String DMN_12_SCHEMA_LOCATION = "DMN12.xsd";
+  public static final String DMN_13_SCHEMA_LOCATION = "DMN13.xsd";
 
   /**
    * The location of the DMN 1.1 XML schema released with Camunda 7.4.0
@@ -39,6 +41,7 @@ public final class DmnModelConstants {
   /** The FEEL namespace */
   public static final String FEEL_NS = "http://www.omg.org/spec/FEEL/20140401";
   public static final String FEEL12_NS = "http://www.omg.org/spec/DMN/20180521/FEEL/";
+  public static final String FEEL13_NS = "https://www.omg.org/spec/DMN/20191111/FEEL/";
 
   /** Camunda namespace */
   public static final String CAMUNDA_NS = "http://camunda.org/schema/1.0/dmn";

File: model-api/dmn-model/src/test/java/org/camunda/bpm/model/dmn/ExampleCompatibilityTest.java
Patch:
@@ -60,7 +60,9 @@ public static Collection<Object[]> parameters(){
          // for compatibility reasons we gotta check the old namespace, too
          {Dmn.readModelFromStream(ExampleCompatibilityTest.class.getResourceAsStream("ExampleCompatibility.dmn"))},
          // DMN 1.2
-         {Dmn.readModelFromStream(ExampleCompatibilityTest.class.getResourceAsStream("Example-DMN-1.2.dmn"))}
+         {Dmn.readModelFromStream(ExampleCompatibilityTest.class.getResourceAsStream("Example-DMN-1.2.dmn"))},
+         // DMN 1.3
+         {Dmn.readModelFromStream(ExampleCompatibilityTest.class.getResourceAsStream("Example-DMN-1.3.dmn"))}
      });
    }
 

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/delegate/DmnDecisionTableEvaluationListenerTest.java
Patch:
@@ -46,7 +46,8 @@ public class DmnDecisionTableEvaluationListenerTest extends DmnEngineTest {
 
   @Override
   public DmnEngineConfiguration getDmnEngineConfiguration() {
-    return new TestDecisionTableEvaluationListenerConfiguration();
+    return new TestDecisionTableEvaluationListenerConfiguration()
+      .enableFeelLegacyBehavior(true);
   }
 
   @BeforeClass

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/el/ExpressionLanguageTest.java
Patch:
@@ -39,7 +39,6 @@
 import org.camunda.bpm.dmn.feel.impl.FeelException;
 import org.camunda.bpm.engine.variable.VariableMap;
 import org.camunda.bpm.engine.variable.Variables;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -71,6 +70,7 @@ public DmnEngineConfiguration getDmnEngineConfiguration() {
 
     configuration.setScriptEngineResolver(createScriptEngineResolver());
     configuration.setElProvider(createElProvider());
+    configuration.enableFeelLegacyBehavior(true);
 
     return configuration;
   }
@@ -221,7 +221,6 @@ public void testJavascriptEmptyExpressions() {
     verify(scriptEngineResolver).getScriptEngineForLanguage("javascript");
   }
 
-  @Ignore("CAM-11317")
   @Test
   @DecisionResource(resource = EMPTY_EXPRESSIONS_DMN, decisionKey = "decision2")
   public void testFailFeelUseOfEmptyInputExpression() {

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/el/FeelIntegrationTest.java
Patch:
@@ -54,6 +54,7 @@ public class FeelIntegrationTest extends DmnEngineTest {
   @Override
   public DmnEngineConfiguration getDmnEngineConfiguration() {
     DefaultDmnEngineConfiguration configuration = new DefaultDmnEngineConfiguration();
+    configuration.enableFeelLegacyBehavior(true);
     configuration.setFeelEngineFactory(new TestFeelEngineFactory());
     return configuration;
   }

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/type/CustomDataTypeTransformerRegistryTest.java
Patch:
@@ -39,6 +39,7 @@ public class CustomDataTypeTransformerRegistryTest extends DmnEngineTest {
   public DmnEngineConfiguration getDmnEngineConfiguration() {
     DefaultDmnEngineConfiguration configuration = new DefaultDmnEngineConfiguration();
     configuration.getTransformer().setDataTypeTransformerRegistry(new CustomDataTypeTransformerRegistry());
+    configuration.enableFeelLegacyBehavior(true);
     return configuration;
   }
 

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/type/DataTypeTransformerIntegrationTest.java
Patch:
@@ -24,7 +24,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import org.camunda.bpm.dmn.engine.DmnEngine;
 import org.camunda.bpm.dmn.engine.DmnEngineConfiguration;
 import org.camunda.bpm.dmn.engine.impl.DefaultDmnEngineConfiguration;
 import org.camunda.bpm.dmn.engine.impl.spi.type.DmnDataTypeTransformer;
@@ -62,6 +61,7 @@ public DmnEngineConfiguration getDmnEngineConfiguration() {
     when(dataTypeTransformerRegistry.getTransformer(anyString())).thenReturn(dataTypeTransformerMock);
 
     configuration.getTransformer().setDataTypeTransformerRegistry(dataTypeTransformerRegistry);
+    configuration.enableFeelLegacyBehavior(true);
 
     return configuration;
   }

File: qa/integration-tests-webapps/integration-tests/src/test/java/org/camunda/bpm/CsrfPreventionIT.java
Patch:
@@ -97,7 +97,6 @@ public void shouldRejectModifyingRequest() {
       fail("Exception expected!");
     } catch (IOException e) {
       // then
-      assertTrue(getErrorResponseContent().contains("CSRFPreventionFilter: Token provided via HTTP Header is absent/empty."));
       assertTrue(getXsrfTokenHeader().equals("Required"));
       assertTrue(e.getMessage().contains("Server returned HTTP response code: 403 for URL"));
     }

File: webapps/src/main/java/org/camunda/bpm/webapp/impl/security/auth/Authentications.java
Patch:
@@ -180,7 +180,9 @@ public static void revalidateSession(HttpServletRequest request, Authentication
   }
 
   public static void updateSession(HttpSession session, Authentications authentications) {
-    session.setAttribute(CAM_AUTH_SESSION_KEY, authentications);
+    if (session != null) {
+      session.setAttribute(CAM_AUTH_SESSION_KEY, authentications);
+    }
   }
 
 }

File: freemarker-template-engine/velocity/src/main/java/org/camunda/templateengines/VelocityScriptEngineFactory.java
Patch:
@@ -32,7 +32,7 @@
 public class VelocityScriptEngineFactory implements ScriptEngineFactory {
 
   public final static String NAME = "velocity";
-  public final static String VERSION = "2.1";
+  public final static String VERSION = "2.2";
 
   public final static List<String> names;
   public final static List<String> extensions;

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/el/ExpressionLanguageTest.java
Patch:
@@ -39,6 +39,7 @@
 import org.camunda.bpm.dmn.feel.impl.FeelException;
 import org.camunda.bpm.engine.variable.VariableMap;
 import org.camunda.bpm.engine.variable.Variables;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -220,6 +221,7 @@ public void testJavascriptEmptyExpressions() {
     verify(scriptEngineResolver).getScriptEngineForLanguage("javascript");
   }
 
+  @Ignore("CAM-11317")
   @Test
   @DecisionResource(resource = EMPTY_EXPRESSIONS_DMN, decisionKey = "decision2")
   public void testFailFeelUseOfEmptyInputExpression() {

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/DefaultDmnEngineConfiguration.java
Patch:
@@ -35,8 +35,8 @@
 import org.camunda.bpm.dmn.engine.spi.DmnEngineMetricCollector;
 import org.camunda.bpm.dmn.feel.impl.FeelEngine;
 import org.camunda.bpm.dmn.feel.impl.FeelEngineFactory;
-import org.camunda.bpm.dmn.feel.impl.juel.FeelEngineFactoryImpl;
 import org.camunda.bpm.model.dmn.impl.DmnModelConstants;
+import org.camunda.feel.integration.CamundaFeelEngineFactory;
 
 public class DefaultDmnEngineConfiguration extends DmnEngineConfiguration {
 
@@ -141,7 +141,7 @@ protected void initScriptEngineResolver() {
 
   protected void initFeelEngine() {
     if (feelEngineFactory == null) {
-      feelEngineFactory = new FeelEngineFactoryImpl();
+      feelEngineFactory = new CamundaFeelEngineFactory();
     }
 
     if (feelEngine == null) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/MigratingActivityInstance.java
Patch:
@@ -361,7 +361,7 @@ protected void migrateProcessInstanceHistory(final DelegateExecution execution)
     HistoryEventProcessor.processHistoryEvents(new HistoryEventProcessor.HistoryEventCreator() {
       @Override
       public HistoryEvent createHistoryEvent(HistoryEventProducer producer) {
-        return producer.createProcessInstanceUpdateEvt(execution);
+        return producer.createProcessInstanceMigrateEvt(execution);
       }
     });
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/util/ProcessEngineConfigurator.java
Patch:
@@ -22,6 +22,7 @@
  * This is a functional interface to pass a callback that
  * adjusts the {@link ProcessEngineConfigurationImpl} and configure the Process Engine,
  */
+@FunctionalInterface
 public interface ProcessEngineConfigurator {
 
   /**

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HostnameProviderTest.java
Patch:
@@ -80,10 +80,11 @@ public static Collection<Object[]> data() {
   @Before
   public void setUp() {
     configuration =
-        (ProcessEngineConfigurationImpl)ProcessEngineConfiguration
+        (ProcessEngineConfigurationImpl) ProcessEngineConfiguration
             .createStandaloneInMemProcessEngineConfiguration();
 
     configuration
+        .setJdbcUrl("jdbc:h2:mem:camunda" + getClass().getSimpleName() + "testHostnameProvider")
         .setProcessEngineName(ENGINE_NAME)
         .setHostname(hostname)
         .setHostnameProvider(hostnameProvider)

File: spring-boot-starter/starter-qa/integration-test-webapp/invoice-example/src/main/java/org/camunda/bpm/qa/Application.java
Patch:
@@ -51,6 +51,7 @@ public void deployInvoice() {
     processEngine.getRepositoryService()
       .createDeployment()
         .addInputStream("invoice.v1.bpmn", classLoader.getResourceAsStream("invoice.v1.bpmn"))
+        .addInputStream("reviewInvoice.bpmn", classLoader.getResourceAsStream("reviewInvoice.bpmn"))
       .deploy();
   }
 

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/configuration/impl/DefaultHistoryConfiguration.java
Patch:
@@ -34,7 +34,7 @@ public void preInit(SpringProcessEngineConfiguration configuration) {
     }
     if (historyEventHandler != null) {
       logger.debug("registered history event handler: {}", historyEventHandler.getClass());
-      configuration.setHistoryEventHandler(historyEventHandler);
+      configuration.getCustomHistoryEventHandlers().add(historyEventHandler);
     }
   }
 

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/event/EventPublisherPlugin.java
Patch:
@@ -73,7 +73,8 @@ public void preInit(SpringProcessEngineConfiguration processEngineConfiguration)
     if (property.isHistory()) {
       logger.info("EVENTING-007: History events will be published as Spring events.");
       // register composite DB event handler.
-      processEngineConfiguration.setHistoryEventHandler(new CompositeDbHistoryEventHandler(new PublishHistoryEventHandler(this.publisher)));
+      processEngineConfiguration.getCustomHistoryEventHandlers()
+          .add(new PublishHistoryEventHandler(this.publisher));
     } else {
       logger.info("EVENTING-008: History eventing is disabled via property.");
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/handler/CompositeHistoryEventHandler.java
Patch:
@@ -35,7 +35,7 @@ public class CompositeHistoryEventHandler implements HistoryEventHandler {
   /**
    * The list of {@link HistoryEventHandler} which consume the event.
    */
-  protected final List<HistoryEventHandler> historyEventHandlers = new ArrayList<HistoryEventHandler>();
+  protected final List<HistoryEventHandler> historyEventHandlers = new ArrayList<>();
 
   /**
    * Non-argument constructor for default initialization.

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/event/HistoricDecisionInputInstanceEntity.java
Patch:
@@ -103,11 +103,11 @@ public Object getValue() {
 
   @Override
   public TypedValue getTypedValue() {
-    return typedValueField.getTypedValue();
+    return typedValueField.getTypedValue(false);
   }
 
   public TypedValue getTypedValue(boolean deserializeValue) {
-    return typedValueField.getTypedValue(deserializeValue);
+    return typedValueField.getTypedValue(deserializeValue, false);
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/event/HistoricDecisionOutputInstanceEntity.java
Patch:
@@ -135,11 +135,11 @@ public Object getValue() {
 
   @Override
   public TypedValue getTypedValue() {
-    return typedValueField.getTypedValue();
+    return typedValueField.getTypedValue(false);
   }
 
   public TypedValue getTypedValue(boolean deserializeValue) {
-    return typedValueField.getTypedValue(deserializeValue);
+    return typedValueField.getTypedValue(deserializeValue, false);
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricDetailVariableInstanceUpdateEntity.java
Patch:
@@ -50,11 +50,11 @@ public Object getValue() {
   }
 
   public TypedValue getTypedValue() {
-    return typedValueField.getTypedValue();
+    return typedValueField.getTypedValue(false);
   }
 
   public TypedValue getTypedValue(boolean deserializeValue) {
-    return typedValueField.getTypedValue(deserializeValue);
+    return typedValueField.getTypedValue(deserializeValue, false);
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricVariableInstanceEntity.java
Patch:
@@ -130,7 +130,7 @@ public void delete() {
   }
 
   public Object getPersistentState() {
-    List<Object> state = new ArrayList<Object>(8);
+    List<Object> state = new ArrayList<>(8);
     state.add(getSerializerName());
     state.add(textValue);
     state.add(textValue2);
@@ -152,11 +152,11 @@ public Object getValue() {
   }
 
   public TypedValue getTypedValue() {
-    return typedValueField.getTypedValue();
+    return typedValueField.getTypedValue(false);
   }
 
   public TypedValue getTypedValue(boolean deserializeValue) {
-    return typedValueField.getTypedValue(deserializeValue);
+    return typedValueField.getTypedValue(deserializeValue, false);
   }
 
   public TypedValueSerializer<?> getSerializer() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/BooleanValueSerializer.java
Patch:
@@ -40,15 +40,15 @@ public BooleanValue convertToTypedValue(UntypedValueImpl untypedValue) {
     return Variables.booleanValue((Boolean) untypedValue.getValue(), untypedValue.isTransient());
   }
 
-  public BooleanValue readValue(ValueFields valueFields) {
+  public BooleanValue readValue(ValueFields valueFields, boolean asTransientValue) {
     Boolean boolValue = null;
     Long longValue = valueFields.getLongValue();
 
     if(longValue != null) {
       boolValue = longValue.equals(TRUE);
     }
 
-    return Variables.booleanValue(boolValue);
+    return Variables.booleanValue(boolValue, asTransientValue);
   }
 
   public void writeValue(BooleanValue variableValue, ValueFields valueFields) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/ByteArrayValueSerializer.java
Patch:
@@ -45,8 +45,8 @@ public BytesValue convertToTypedValue(UntypedValueImpl untypedValue) {
     }
   }
 
-  public BytesValue readValue(ValueFields valueFields) {
-    return Variables.byteArrayValue(valueFields.getByteArrayValue());
+  public BytesValue readValue(ValueFields valueFields, boolean asTransientValue) {
+    return Variables.byteArrayValue(valueFields.getByteArrayValue(), asTransientValue);
   }
 
   public void writeValue(BytesValue variableValue, ValueFields valueFields) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/DateValueSerializer.java
Patch:
@@ -40,13 +40,13 @@ public DateValue convertToTypedValue(UntypedValueImpl untypedValue) {
     return Variables.dateValue((Date) untypedValue.getValue(), untypedValue.isTransient());
   }
 
-  public DateValue readValue(ValueFields valueFields) {
+  public DateValue readValue(ValueFields valueFields, boolean asTransientValue) {
     Long longValue = valueFields.getLongValue();
     Date dateValue = null;
     if (longValue!=null) {
       dateValue = new Date(longValue);
     }
-    return Variables.dateValue(dateValue);
+    return Variables.dateValue(dateValue, asTransientValue);
   }
 
   public void writeValue(DateValue typedValue, ValueFields valueFields) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/DoubleValueSerializer.java
Patch:
@@ -39,8 +39,8 @@ public void writeValue(DoubleValue value, ValueFields valueFields) {
     valueFields.setDoubleValue(value.getValue());
   }
 
-  public DoubleValue readValue(ValueFields valueFields) {
-    return Variables.doubleValue(valueFields.getDoubleValue());
+  public DoubleValue readValue(ValueFields valueFields, boolean asTransientValue) {
+    return Variables.doubleValue(valueFields.getDoubleValue(), asTransientValue);
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/IntegerValueSerializer.java
Patch:
@@ -48,14 +48,14 @@ public void writeValue(IntegerValue variableValue, ValueFields valueFields) {
 
   }
 
-  public IntegerValue readValue(ValueFields valueFields) {
+  public IntegerValue readValue(ValueFields valueFields, boolean asTransientValue) {
     Integer intValue = null;
 
     if(valueFields.getLongValue() != null) {
       intValue = Integer.valueOf(valueFields.getLongValue().intValue());
     }
 
-    return Variables.integerValue(intValue);
+    return Variables.integerValue(intValue, asTransientValue);
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/LongValueSerlializer.java
Patch:
@@ -35,8 +35,8 @@ public LongValue convertToTypedValue(UntypedValueImpl untypedValue) {
     return Variables.longValue((Long) untypedValue.getValue(), untypedValue.isTransient());
   }
 
-  public LongValue readValue(ValueFields valueFields) {
-    return Variables.longValue(valueFields.getLongValue());
+  public LongValue readValue(ValueFields valueFields, boolean asTransientValue) {
+    return Variables.longValue(valueFields.getLongValue(), asTransientValue);
   }
 
   public void writeValue(LongValue value, ValueFields valueFields) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/NullValueSerializer.java
Patch:
@@ -45,7 +45,7 @@ public void writeValue(NullValueImpl value, ValueFields valueFields) {
     // nothing to do
   }
 
-  public NullValueImpl readValue(ValueFields valueFields, boolean deserialize) {
+  public NullValueImpl readValue(ValueFields valueFields, boolean deserialize, boolean asTransientValue) {
     return NullValueImpl.INSTANCE;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/PrimitiveValueSerializer.java
Patch:
@@ -38,12 +38,12 @@ public String getName() {
     return valueType.getName();
   }
 
-  public T readValue(ValueFields valueFields, boolean deserializeObjectValue) {
+  public T readValue(ValueFields valueFields, boolean deserializeObjectValue, boolean asTransientValue) {
     // primitive values are always deserialized
-    return readValue(valueFields);
+    return readValue(valueFields, asTransientValue);
   }
 
-  public abstract T readValue(ValueFields valueFields);
+  public abstract T readValue(ValueFields valueFields, boolean asTransientValue);
 
   public PrimitiveValueType getType() {
     return (PrimitiveValueType) super.getType();

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/ShortValueSerializer.java
Patch:
@@ -35,15 +35,15 @@ public ShortValue convertToTypedValue(UntypedValueImpl untypedValue) {
     return Variables.shortValue((Short) untypedValue.getValue(), untypedValue.isTransient());
   }
 
-  public ShortValue readValue(ValueFields valueFields) {
+  public ShortValue readValue(ValueFields valueFields, boolean asTransientValue) {
     Long longValue = valueFields.getLongValue();
     Short shortValue = null;
 
     if(longValue != null) {
       shortValue = Short.valueOf(longValue.shortValue());
     }
 
-    return Variables.shortValue(shortValue);
+    return Variables.shortValue(shortValue, asTransientValue);
   }
 
   public void writeValue(ShortValue value, ValueFields valueFields) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/StringValueSerializer.java
Patch:
@@ -36,8 +36,8 @@ public StringValue convertToTypedValue(UntypedValueImpl untypedValue) {
     return Variables.stringValue((String) untypedValue.getValue(), untypedValue.isTransient());
   }
 
-  public StringValue readValue(ValueFields valueFields) {
-    return Variables.stringValue(valueFields.getTextValue());
+  public StringValue readValue(ValueFields valueFields, boolean asTransientValue) {
+    return Variables.stringValue(valueFields.getTextValue(), asTransientValue);
   }
 
   public void writeValue(StringValue variableValue, ValueFields valueFields) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/TypedValueSerializer.java
Patch:
@@ -62,7 +62,7 @@ public interface TypedValueSerializer<T extends TypedValue> {
    *
    * @return the {@link TypedValue}
    */
-  T readValue(ValueFields valueFields, boolean deserializeValue);
+  T readValue(ValueFields valueFields, boolean deserializeValue, boolean isTransient);
 
   /**
    * Used for auto-detecting the value type of a variable.

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/jpa/JPAVariableSerializer.java
Patch:
@@ -91,12 +91,12 @@ public void writeValue(ObjectValue objectValue, ValueFields valueFields) {
     }
   }
 
-  public ObjectValue readValue(ValueFields valueFields, boolean deserializeObjectValue) {
+  public ObjectValue readValue(ValueFields valueFields, boolean deserializeObjectValue, boolean asTransientValue) {
     if(valueFields.getTextValue() != null && valueFields.getTextValue2() != null) {
       Object jpaEntity = mappings.getJPAEntity(valueFields.getTextValue(), valueFields.getTextValue2());
-      return Variables.objectValue(jpaEntity).create();
+      return Variables.objectValue(jpaEntity).setTransient(asTransientValue).create();
     }
-    return Variables.objectValue(null).create();
+    return Variables.objectValue(null).setTransient(asTransientValue).create();
   }
 
 }

File: webapps/src/main/java/org/camunda/bpm/webapp/impl/test/util/DbSchemaPrefixTestHelper.java
Patch:
@@ -56,8 +56,8 @@ public void afterPropertiesSet() throws Exception {
     ProcessEngineConfigurationImpl config1 = createCustomProcessEngineConfiguration()
             .setProcessEngineName("DatabaseTablePrefixTest-engine1")
             .setDataSource(dataSource)
-            .setDatabaseSchemaUpdate("NO_CHECK") // disable auto create/drop schema
-            .setDbMetricsReporterActivate(false);
+            .setDbMetricsReporterActivate(false)
+            .setDatabaseSchemaUpdate("NO_CHECK"); // disable auto create/drop schema
     config1.setDatabaseTablePrefix("SCHEMA1.");
     ProcessEngine engine1 = config1.buildProcessEngine();
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DefaultJobRetryCmd.java
Patch:
@@ -111,7 +111,9 @@ protected void executeCustomStrategy(CommandContext commandContext, JobEntity jo
       int intervalsCount = intervals.size();
       int indexOfInterval = Math.max(0, Math.min(intervalsCount - 1, intervalsCount - (job.getRetries() - 1)));
       DurationHelper durationHelper = getDurationHelper(intervals.get(indexOfInterval));
-      job.setLockExpirationTime(durationHelper.getDateAfter());
+
+      job.setDuedate(durationHelper.getDateAfter());
+      job.unlock();
 
       logException(job);
       decrementRetries(job);

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/ConcurrentJobExecutorTest.java
Patch:
@@ -213,8 +213,8 @@ public void testCompetingJobExecutionFoxRetryStrategy() {
     JobEntity jobEntity = (JobEntity) remainingJob;
     assertNull(jobEntity.getLockOwner());
 
-    // and there is a custom lock expiration time
-    assertNotNull(jobEntity.getLockExpirationTime());
+    // and there is a due date time set
+    assertNotNull(jobEntity.getDuedate());
   }
 
   @Test

File: qa/test-db-instance-migration/test-fixture-712/src/main/java/org/camunda/bpm/qa/upgrade/TestFixture.java
Patch:
@@ -19,6 +19,7 @@
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
+import org.camunda.bpm.qa.upgrade.customretries.FailingIntermediateBoundaryTimerJobScenario;
 
 /**
  * @author Nikola Koevski
@@ -38,8 +39,7 @@ public static void main(String[] args) {
     // register test scenarios
     ScenarioRunner runner = new ScenarioRunner(processEngine, ENGINE_VERSION);
 
-    // example scenario setup
-    // runner.setupScenarios(ExampleScenario.class);
+    runner.setupScenarios(FailingIntermediateBoundaryTimerJobScenario.class);
 
     processEngine.close();
   }

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/IdentityRestServiceQueryTest.java
Patch:
@@ -34,7 +34,6 @@
 import org.camunda.bpm.engine.identity.User;
 import org.camunda.bpm.engine.identity.UserQuery;
 import org.camunda.bpm.engine.rest.dto.identity.BasicUserCredentialsDto;
-import org.camunda.bpm.engine.rest.dto.identity.GroupDto;
 import org.camunda.bpm.engine.rest.exception.InvalidRequestException;
 import org.camunda.bpm.engine.rest.helper.MockProvider;
 import org.camunda.bpm.engine.rest.util.container.TestContainerRule;
@@ -70,14 +69,14 @@ private void createMockIdentityQueries() {
     mockUser = MockProvider.createMockUser();
     mockUsers.add(mockUser);
 
-    when(sampleUserQuery.list()).thenReturn(mockUsers);
+    when(sampleUserQuery.unlimitedList()).thenReturn(mockUsers);
     when(sampleUserQuery.memberOfGroup(anyString())).thenReturn(sampleUserQuery);
     when(sampleUserQuery.count()).thenReturn((long) mockUsers.size());
 
     GroupQuery sampleGroupQuery = mock(GroupQuery.class);
 
     List<Group> mockGroups = MockProvider.createMockGroups();
-    when(sampleGroupQuery.list()).thenReturn(mockGroups);
+    when(sampleGroupQuery.unlimitedList()).thenReturn(mockGroups);
     when(sampleGroupQuery.groupMember(anyString())).thenReturn(sampleGroupQuery);
     when(sampleGroupQuery.orderByGroupName()).thenReturn(sampleGroupQuery);
     when(sampleGroupQuery.orderByGroupId()).thenReturn(sampleGroupQuery);

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ProcessEngineRestServiceTest.java
Patch:
@@ -306,7 +306,7 @@ private void createIdentityMocks() {
     when(sampleGroupQuery.groupMember(anyString())).thenReturn(sampleGroupQuery);
     when(sampleGroupQuery.orderByGroupName()).thenReturn(sampleGroupQuery);
     when(sampleGroupQuery.asc()).thenReturn(sampleGroupQuery);
-    when(sampleGroupQuery.list()).thenReturn(mockGroups);
+    when(sampleGroupQuery.unlimitedList()).thenReturn(mockGroups);
 
     when(mockIdentityService.createGroupQuery()).thenReturn(sampleGroupQuery);
     when(mockIdentityService.createUserQuery()).thenReturn(sampleUserQuery);

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/AuthorizationRestServiceInteractionTest.java
Patch:
@@ -1109,7 +1109,7 @@ protected List<String> setupGroupQueryMock() {
     List<Group> groupMocks = MockProvider.createMockGroups();
     when(identityServiceMock.createGroupQuery()).thenReturn(mockGroupQuery);
     when(mockGroupQuery.groupMember(anyString())).thenReturn(mockGroupQuery);
-    when(mockGroupQuery.list()).thenReturn(groupMocks);
+    when(mockGroupQuery.unlimitedList()).thenReturn(groupMocks);
     List<String> groupIds = new ArrayList<String>();
     for (Group group : groupMocks) {
       groupIds.add(group.getId());

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/UserRestService.java
Patch:
@@ -52,7 +52,7 @@ List<UserProfileDto> queryUsers(@Context UriInfo uriInfo,
 
   @POST
   @Path("/create")
-  @Consumes
+  @Consumes(MediaType.APPLICATION_JSON)
   void createUser(UserDto userDto);
 
   @OPTIONS

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AbstractDeleteProcessInstanceCmd.java
Patch:
@@ -65,7 +65,7 @@ protected void deleteProcessInstance(
       String processInstanceId,
       final String deleteReason,
       final boolean skipCustomListeners,
-      boolean externallyTerminated,
+      final boolean externallyTerminated,
       final boolean skipIoMappings,
       boolean skipSubprocesses) {
     ensureNotNull(BadUserRequestException.class, "processInstanceId is null", "processInstanceId", processInstanceId);
@@ -98,7 +98,7 @@ protected void deleteProcessInstance(
       commandContext.runWithoutAuthorization(new Callable<Void>() {
         public Void call() {
           ProcessInstanceModificationBuilderImpl builder = (ProcessInstanceModificationBuilderImpl) new ProcessInstanceModificationBuilderImpl(commandContext, superExecution.getProcessInstanceId(), deleteReason)
-            .cancelActivityInstance(superExecution.getActivityInstanceId());
+            .cancelActivityInstance(superExecution.getActivityInstanceId(), externallyTerminated);
           builder.execute(false, skipCustomListeners, skipIoMappings);
           return null;
         }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AbstractInstanceCancellationCmd.java
Patch:
@@ -59,11 +59,11 @@ public Void execute(CommandContext commandContext) {
     }
 
     if (topmostCancellableExecution.isPreserveScope()) {
-      topmostCancellableExecution.interrupt(cancellationReason, skipCustomListeners, skipIoMappings);
+      topmostCancellableExecution.interrupt(cancellationReason, skipCustomListeners, skipIoMappings, externallyTerminated);
       topmostCancellableExecution.leaveActivityInstance();
       topmostCancellableExecution.setActivity(null);
     } else {
-      topmostCancellableExecution.deleteCascade(cancellationReason, skipCustomListeners, skipIoMappings);
+      topmostCancellableExecution.deleteCascade(cancellationReason, skipCustomListeners, skipIoMappings, externallyTerminated, false);
       ModificationUtil.handleChildRemovalInScope(topmostCancellableExecution);
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AbstractInstantiationCmd.java
Patch:
@@ -253,7 +253,7 @@ else if (ActivityImpl.class.isAssignableFrom(elementToInstantiate.getClass())) {
         {
           ScopeImpl scopeToCancel = topMostActivity.getEventScope();
           ExecutionEntity executionToCancel = getSingleExecutionForScope(mapping, scopeToCancel);
-          executionToCancel.interrupt("Interrupting activity " + topMostActivity + " executed.", skipCustomListeners, skipIoMappings);
+          executionToCancel.interrupt("Interrupting activity " + topMostActivity + " executed.", skipCustomListeners, skipIoMappings, false);
           executionToCancel.setActivity(null);
           executionToCancel.leaveActivityInstance();
           instantiate(executionToCancel, activitiesToInstantiate, elementToInstantiate);
@@ -263,7 +263,7 @@ else if (ActivityImpl.class.isAssignableFrom(elementToInstantiate.getClass())) {
         {
           ScopeImpl scopeToCancel = topMostActivity.getFlowScope();
           ExecutionEntity executionToCancel = getSingleExecutionForScope(mapping, scopeToCancel);
-          executionToCancel.interrupt("Interrupting activity " + topMostActivity + " executed.", skipCustomListeners, skipIoMappings);
+          executionToCancel.interrupt("Interrupting activity " + topMostActivity + " executed.", skipCustomListeners, skipIoMappings, false);
           executionToCancel.setActivity(null);
           executionToCancel.leaveActivityInstance();
           instantiate(executionToCancel, activitiesToInstantiate, elementToInstantiate);

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -583,7 +583,7 @@ public void removeVariablesLocalInternal() {
   }
 
   @Override
-  public void interrupt(String reason, boolean skipCustomListeners, boolean skipIoMappings) {
+  public void interrupt(String reason, boolean skipCustomListeners, boolean skipIoMappings, boolean externallyTerminated) {
 
     // remove Jobs
     if (preserveScope) {
@@ -595,7 +595,7 @@ public void interrupt(String reason, boolean skipCustomListeners, boolean skipIo
 
     removeTasks(reason);
 
-    super.interrupt(reason, skipCustomListeners, skipIoMappings);
+    super.interrupt(reason, skipCustomListeners, skipIoMappings, externallyTerminated);
   }
 
   protected void removeActivityJobs(String reason) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/scripting/SourceExecutableScript.java
Patch:
@@ -98,7 +98,7 @@ protected void compileScript(ScriptEngine engine) {
   }
 
   public CompiledScript compile(ScriptEngine scriptEngine, String language, String src) {
-    if(scriptEngine instanceof Compilable) {
+    if(scriptEngine instanceof Compilable && !scriptEngine.getFactory().getLanguageName().equalsIgnoreCase("ecmascript")) {
       Compilable compilingEngine = (Compilable) scriptEngine;
 
       try {

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/SpringBootProcessApplication.java
Patch:
@@ -46,6 +46,7 @@
 import org.springframework.util.StringUtils;
 import org.springframework.web.context.ServletContextAware;
 
+@Configuration
 public class SpringBootProcessApplication extends SpringProcessApplication {
 
   @Bean
@@ -89,7 +90,7 @@ public void afterPropertiesSet() throws Exception {
       .ifPresent(this::setBeanName);
 
     if (camundaBpmProperties.getGenerateUniqueProcessApplicationName()) {
-      setBeanName(CamundaBpmProperties.getUniqueName(camundaBpmProperties.UNIQUE_APPLICATION_NAME_PREFIX));
+      setBeanName(CamundaBpmProperties.getUniqueName(CamundaBpmProperties.UNIQUE_APPLICATION_NAME_PREFIX));
     }
 
     String processEngineName = processEngine.getName();

File: spring-boot-starter/starter/src/test/java/org/camunda/bpm/spring/boot/starter/CustomContextPathWebProcessApplicationIT.java
Patch:
@@ -22,7 +22,6 @@
 import org.camunda.bpm.application.ProcessApplicationInfo;
 import org.camunda.bpm.engine.spring.application.SpringProcessApplication;
 import org.camunda.bpm.spring.boot.starter.test.pa.TestProcessApplication;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -43,7 +42,6 @@ public class CustomContextPathWebProcessApplicationIT {
   @Autowired
   private SpringProcessApplication application;
 
-  @Ignore("CAM-10187")
   @Test
   public void testPostDeployEvent() {
     assertNotNull(application);

File: spring-boot-starter/starter/src/test/java/org/camunda/bpm/spring/boot/starter/CustomContextPathWebProcessApplicationIT.java
Patch:
@@ -22,6 +22,7 @@
 import org.camunda.bpm.application.ProcessApplicationInfo;
 import org.camunda.bpm.engine.spring.application.SpringProcessApplication;
 import org.camunda.bpm.spring.boot.starter.test.pa.TestProcessApplication;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -42,6 +43,7 @@ public class CustomContextPathWebProcessApplicationIT {
   @Autowired
   private SpringProcessApplication application;
 
+  @Ignore("CAM-10187")
   @Test
   public void testPostDeployEvent() {
     assertNotNull(application);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AssignTaskCmd.java
Patch:
@@ -34,7 +34,7 @@ public AssignTaskCmd(String taskId, String userId) {
   @Override
   public Void execute(CommandContext commandContext) {
     super.execute(commandContext);
-    task.createHistoricTaskDetails(UserOperationLogEntry.OPERATION_TYPE_ASSIGN);
+    task.logUserOperation(UserOperationLogEntry.OPERATION_TYPE_ASSIGN);
     return null;
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ClaimTaskCmd.java
Patch:
@@ -68,7 +68,7 @@ public Void execute(CommandContext commandContext) {
       task.setAssignee(null);
     }
     task.triggerUpdateEvent();
-    task.createHistoricTaskDetails(UserOperationLogEntry.OPERATION_TYPE_CLAIM);
+    task.logUserOperation(UserOperationLogEntry.OPERATION_TYPE_CLAIM);
 
     return null;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/CompleteTaskCmd.java
Patch:
@@ -21,6 +21,7 @@
 import java.io.Serializable;
 import java.util.Map;
 
+import org.camunda.bpm.engine.history.UserOperationLogEntry;
 import org.camunda.bpm.engine.impl.cfg.CommandChecker;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
@@ -95,6 +96,7 @@ public VariableMap execute(CommandContext commandContext) {
   }
 
   protected void completeTask(TaskEntity task) {
+    task.logUserOperation(UserOperationLogEntry.OPERATION_TYPE_COMPLETE);
     task.complete();
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DelegateTaskCmd.java
Patch:
@@ -55,7 +55,7 @@ public Object execute(CommandContext commandContext) {
     task.delegate(userId);
 
     task.triggerUpdateEvent();
-    task.createHistoricTaskDetails(UserOperationLogEntry.OPERATION_TYPE_DELEGATE);
+    task.logUserOperation(UserOperationLogEntry.OPERATION_TYPE_DELEGATE);
 
     return null;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeleteTaskCmd.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Collection;
 
 import org.camunda.bpm.engine.ProcessEngineException;
+import org.camunda.bpm.engine.history.UserOperationLogEntry;
 import org.camunda.bpm.engine.impl.cfg.CommandChecker;
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.interceptor.Command;
@@ -78,6 +79,7 @@ protected void deleteTask(String taskId, CommandContext commandContext) {
       }
 
       checkDeleteTask(task, commandContext);
+      task.logUserOperation(UserOperationLogEntry.OPERATION_TYPE_DELETE);
 
       String reason = (deleteReason == null || deleteReason.length() == 0) ? TaskEntity.DELETE_REASON_DELETED : deleteReason;
       task.delete(reason, cascade);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ResolveTaskCmd.java
Patch:
@@ -37,6 +37,6 @@ public ResolveTaskCmd(String taskId, Map<String, Object> variables) {
   protected void completeTask(TaskEntity task) {
     task.resolve();
     task.triggerUpdateEvent();
-    task.createHistoricTaskDetails(UserOperationLogEntry.OPERATION_TYPE_RESOLVE);
+    task.logUserOperation(UserOperationLogEntry.OPERATION_TYPE_RESOLVE);
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SaveTaskCmd.java
Patch:
@@ -73,7 +73,7 @@ public Void execute(CommandContext commandContext) {
       task.triggerUpdateEvent();
     }
 
-    task.createHistoricTaskDetails(operation);
+    task.logUserOperation(operation);
 
     return null;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SetTaskOwnerCmd.java
Patch:
@@ -34,7 +34,7 @@ public SetTaskOwnerCmd(String taskId, String userId) {
   @Override
   public Void execute(CommandContext commandContext) {
     super.execute(commandContext);
-    task.createHistoricTaskDetails(UserOperationLogEntry.OPERATION_TYPE_SET_OWNER);
+    task.logUserOperation(UserOperationLogEntry.OPERATION_TYPE_SET_OWNER);
     return null;
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SetTaskPriorityCmd.java
Patch:
@@ -55,7 +55,7 @@ public Void execute(CommandContext commandContext) {
     task.setPriority(priority);
 
     task.triggerUpdateEvent();
-    task.createHistoricTaskDetails(UserOperationLogEntry.OPERATION_TYPE_SET_PRIORITY);
+    task.logUserOperation(UserOperationLogEntry.OPERATION_TYPE_SET_PRIORITY);
 
     return null;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SubmitTaskFormCmd.java
Patch:
@@ -87,11 +87,11 @@ public VariableMap execute(CommandContext commandContext) {
     // complete or resolve the task
     if (DelegationState.PENDING.equals(task.getDelegationState())) {
       task.resolve();
-      task.createHistoricTaskDetails(UserOperationLogEntry.OPERATION_TYPE_RESOLVE);
+      task.logUserOperation(UserOperationLogEntry.OPERATION_TYPE_RESOLVE);
       task.triggerUpdateEvent();
     } else {
+      task.logUserOperation(UserOperationLogEntry.OPERATION_TYPE_COMPLETE);
       task.complete();
-      task.createHistoricTaskDetails(UserOperationLogEntry.OPERATION_TYPE_COMPLETE);
     }
 
     if (returnVariables)

File: engine/src/test/java/org/camunda/bpm/engine/test/history/useroperationlog/UserOperationLogTaskServiceAndBeanTest.java
Patch:
@@ -134,14 +134,15 @@ public void testAllTrackedProperties() {
     Map<String, PropertyChange> changes = entity.getPropertyChanges();
     assertEquals("er", changes.get(ASSIGNEE).getNewValue());
     assertSame(DelegationState.PENDING, changes.get(DELEGATION).getNewValue());
-    assertTrue((Boolean) changes.get(DELETE).getNewValue());
     assertEquals("a description", changes.get(DESCRIPTION).getNewValue());
     assertEquals(tomorrow, changes.get(DUE_DATE).getNewValue());
     assertEquals(yesterday, changes.get(FOLLOW_UP_DATE).getNewValue());
     assertEquals("to do", changes.get(NAME).getNewValue());
     assertEquals("icke", changes.get(OWNER).getNewValue());
     assertEquals("parent", changes.get(PARENT_TASK).getNewValue());
     assertEquals(73, changes.get(PRIORITY).getNewValue());
+
+    // DELETE property is not validated here; it is set directly on task deletion
   }
 
   public void testDeleteTask() {

File: spin/dataformat-json-jackson/src/main/java/org/camunda/spin/impl/json/jackson/format/JacksonJsonDataFormat.java
Patch:
@@ -115,8 +115,9 @@ protected void initReader() {
 
 
   protected void initTypeDetectors() {
-    typeDetectors = new ArrayList<TypeDetector>();
-    typeDetectors.add(new ListJacksonJsonTypeDetector());
+    typeDetectors = new ArrayList<>();
+    typeDetectors.add(new CollectionJacksonJsonTypeDetector());
+    typeDetectors.add(new MapJacksonJsonTypeDetector());
     typeDetectors.add(new DefaultJsonJacksonTypeDetector());
   }
 

File: spring-boot-starter/starter-webapp-core/src/main/java/org/camunda/bpm/spring/boot/starter/webapp/filter/SpringBootCsrfPreventionFilter.java
Patch:
@@ -328,7 +328,6 @@ public void destroy() {
    * */
   protected boolean isNonModifyingRequest(HttpServletRequest request) {
     return CsrfConstants.CSRF_NON_MODIFYING_METHODS_PATTERN.matcher(request.getMethod()).matches()
-      || CsrfConstants.CSRF_DEFAULT_ENTRY_URL_PATTERN.matcher(getRequestedPath(request)).matches()
       || entryPoints.contains(getRequestedPath(request));
   }
 
@@ -427,8 +426,6 @@ public static final class CsrfConstants {
 
     public static final Pattern CSRF_NON_MODIFYING_METHODS_PATTERN = Pattern.compile("GET|HEAD|OPTIONS");
 
-    public static final Pattern CSRF_DEFAULT_ENTRY_URL_PATTERN = Pattern.compile("^/api/admin/auth/user/.+/login/(cockpit|tasklist|admin|welcome)$");
-
     public static final String CSRF_SET_COOKIE_HEADER_NAME = "Set-Cookie";
 
     public static final String CSRF_SAME_SITE_FIELD_NAME = ";SameSite=";

File: webapps/src/main/java/org/camunda/bpm/webapp/impl/security/filter/CsrfPreventionFilter.java
Patch:
@@ -367,7 +367,6 @@ public void destroy() {
    * */
   protected boolean isNonModifyingRequest(HttpServletRequest request) {
     return CsrfConstants.CSRF_NON_MODIFYING_METHODS_PATTERN.matcher(request.getMethod()).matches()
-      || CsrfConstants.CSRF_DEFAULT_ENTRY_URL_PATTERN.matcher(getRequestedPath(request)).matches()
       || entryPoints.contains(getRequestedPath(request));
   }
 

File: webapps/src/main/java/org/camunda/bpm/webapp/impl/security/filter/util/CsrfConstants.java
Patch:
@@ -35,8 +35,6 @@ public final class CsrfConstants {
 
   public static final Pattern CSRF_NON_MODIFYING_METHODS_PATTERN = Pattern.compile("GET|HEAD|OPTIONS");
 
-  public static final Pattern CSRF_DEFAULT_ENTRY_URL_PATTERN = Pattern.compile("^/api/admin/auth/user/.+/login/(cockpit|tasklist|admin|welcome)$");
-
   public static final String CSRF_SET_COOKIE_HEADER_NAME = "Set-Cookie";
 
   public static final String CSRF_SAME_SITE_FIELD_NAME = ";SameSite=";

File: clients/java/client/src/it/java/org/camunda/bpm/client/topic/TopicSubscriptionIT.java
Patch:
@@ -279,8 +279,8 @@ public void shouldSetProcessDefinitionVersionTag() {
 
     List<ExternalTask> handledTasks = handler.getHandledTasks();
     assertThat(handledTasks.size()).isEqualTo(2);
-    assertThat(handledTasks.get(0).getProcessDefinitionVersionTag()).isEqualTo(PROCESS_DEFINITION_VERSION_TAG);
-    assertThat(handledTasks.get(1).getProcessDefinitionVersionTag()).isEqualTo(null);
+    assertThat(handledTasks.get(0).getProcessDefinitionVersionTag()).isEqualTo(null);
+    assertThat(handledTasks.get(1).getProcessDefinitionVersionTag()).isEqualTo(PROCESS_DEFINITION_VERSION_TAG);
   }
 
   @Test

File: spring-boot-starter/starter-webapp-core/src/main/java/org/camunda/bpm/spring/boot/starter/webapp/filter/SpringBootCsrfPreventionFilter.java
Patch:
@@ -328,7 +328,6 @@ public void destroy() {
    * */
   protected boolean isNonModifyingRequest(HttpServletRequest request) {
     return CsrfConstants.CSRF_NON_MODIFYING_METHODS_PATTERN.matcher(request.getMethod()).matches()
-      || CsrfConstants.CSRF_DEFAULT_ENTRY_URL_PATTERN.matcher(getRequestedPath(request)).matches()
       || entryPoints.contains(getRequestedPath(request));
   }
 
@@ -427,8 +426,6 @@ public static final class CsrfConstants {
 
     public static final Pattern CSRF_NON_MODIFYING_METHODS_PATTERN = Pattern.compile("GET|HEAD|OPTIONS");
 
-    public static final Pattern CSRF_DEFAULT_ENTRY_URL_PATTERN = Pattern.compile("^/api/admin/auth/user/.+/login/(cockpit|tasklist|admin|welcome)$");
-
     public static final String CSRF_SET_COOKIE_HEADER_NAME = "Set-Cookie";
 
     public static final String CSRF_SAME_SITE_FIELD_NAME = ";SameSite=";

File: webapps/src/main/java/org/camunda/bpm/webapp/impl/security/filter/CsrfPreventionFilter.java
Patch:
@@ -367,7 +367,6 @@ public void destroy() {
    * */
   protected boolean isNonModifyingRequest(HttpServletRequest request) {
     return CsrfConstants.CSRF_NON_MODIFYING_METHODS_PATTERN.matcher(request.getMethod()).matches()
-      || CsrfConstants.CSRF_DEFAULT_ENTRY_URL_PATTERN.matcher(getRequestedPath(request)).matches()
       || entryPoints.contains(getRequestedPath(request));
   }
 

File: webapps/src/main/java/org/camunda/bpm/webapp/impl/security/filter/util/CsrfConstants.java
Patch:
@@ -35,8 +35,6 @@ public final class CsrfConstants {
 
   public static final Pattern CSRF_NON_MODIFYING_METHODS_PATTERN = Pattern.compile("GET|HEAD|OPTIONS");
 
-  public static final Pattern CSRF_DEFAULT_ENTRY_URL_PATTERN = Pattern.compile("^/api/admin/auth/user/.+/login/(cockpit|tasklist|admin|welcome)$");
-
   public static final String CSRF_SET_COOKIE_HEADER_NAME = "Set-Cookie";
 
   public static final String CSRF_SAME_SITE_FIELD_NAME = ";SameSite=";

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/engine/HtmlFormEngine.java
Patch:
@@ -65,7 +65,7 @@ public class HtmlFormEngine implements FormEngine {
 
   /* datepicker attributes*/
   protected static final String IS_OPEN_ATTRIBUTE = "is-open";
-  protected static final String DATEPICKER_POPUP_ATTRIBUTE = "datepicker-popup";
+  protected static final String DATEPICKER_POPUP_ATTRIBUTE = "uib-datepicker-popup";
 
   /* camunda attributes */
   protected static final String CAM_VARIABLE_TYPE_ATTRIBUTE = "cam-variable-type";

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/TaskAuthorizationTest.java
Patch:
@@ -350,7 +350,7 @@ public void testNewTask() {
 
   public void testSaveTaskInsertWithoutAuthorization() {
     // given
-    TaskEntity task = new TaskEntity("");
+    TaskEntity task = new TaskEntity();
 
     try {
       // when
@@ -365,7 +365,7 @@ public void testSaveTaskInsertWithoutAuthorization() {
 
   public void testSaveTaskInsert() {
     // given
-    TaskEntity task = new TaskEntity("");
+    TaskEntity task = new TaskEntity();
     task.setAssignee("demo");
 
     createGrantAuthorization(TASK, ANY, userId, CREATE);
@@ -384,7 +384,7 @@ public void testSaveTaskInsert() {
 
   public void testSaveAndUpdateTaskWithTaskAssignPermission() {
     // given
-    TaskEntity task = new TaskEntity("");
+    TaskEntity task = new TaskEntity();
     task.setAssignee("demo");
 
     createGrantAuthorization(TASK, ANY, userId, CREATE, TASK_ASSIGN);

File: engine-cdi/src/main/java/org/camunda/bpm/engine/cdi/BusinessProcessEventType.java
Patch:
@@ -46,6 +46,9 @@ public interface BusinessProcessEventType {
   /** Signifies that a task is completed **/
   public static final BusinessProcessEventType COMPLETE_TASK = new DefaultBusinessProcessEventType(TaskListener.EVENTNAME_COMPLETE);
 
+  /** Signifies that a task is updated **/
+  public static final BusinessProcessEventType UPDATE_TASK = new DefaultBusinessProcessEventType(TaskListener.EVENTNAME_UPDATE);
+
   /** Signifies that a task is deleted **/
   public static final BusinessProcessEventType DELETE_TASK = new DefaultBusinessProcessEventType(TaskListener.EVENTNAME_DELETE);
 

File: engine-cdi/src/main/java/org/camunda/bpm/engine/cdi/impl/event/CdiEventListener.java
Patch:
@@ -120,6 +120,9 @@ else if (TaskListener.EVENTNAME_ASSIGNMENT.equals(eventName)) {
     else if (TaskListener.EVENTNAME_COMPLETE.equals(eventName)) {
       type = BusinessProcessEventType.COMPLETE_TASK;
     }
+    else if (TaskListener.EVENTNAME_UPDATE.equals(eventName)) {
+      type = BusinessProcessEventType.UPDATE_TASK;
+    }
     else if (TaskListener.EVENTNAME_DELETE.equals(eventName)) {
       type = BusinessProcessEventType.DELETE_TASK;
     }

File: engine/src/main/java/org/camunda/bpm/engine/delegate/TaskListener.java
Patch:
@@ -24,6 +24,7 @@
  * <li>{@link #EVENTNAME_CREATE}</li>
  * <li>{@link #EVENTNAME_ASSIGNMENT}</li>
  * <li>{@link #EVENTNAME_COMPLETE}</li>
+ * <li>{@link #EVENTNAME_UPDATE}</li>
  * <li>{@link #EVENTNAME_DELETE}</li>
  * <li>{@link #EVENTNAME_TIMEOUT}</li>
  * </ul>
@@ -36,6 +37,7 @@ public interface TaskListener {
   String EVENTNAME_CREATE = "create";
   String EVENTNAME_ASSIGNMENT = "assignment";
   String EVENTNAME_COMPLETE = "complete";
+  String EVENTNAME_UPDATE = "update";
   String EVENTNAME_DELETE = "delete";
   String EVENTNAME_TIMEOUT = "timeout";
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -2814,14 +2814,15 @@ protected void parseTaskListeners(Element userTaskElement, ActivityImpl activity
         String eventName = taskListenerElement.attribute("event");
         if (eventName != null) {
           if (TaskListener.EVENTNAME_CREATE.equals(eventName) || TaskListener.EVENTNAME_ASSIGNMENT.equals(eventName)
-              || TaskListener.EVENTNAME_COMPLETE.equals(eventName) || TaskListener.EVENTNAME_DELETE.equals(eventName)) {
+              || TaskListener.EVENTNAME_COMPLETE.equals(eventName) || TaskListener.EVENTNAME_UPDATE.equals(eventName)
+              || TaskListener.EVENTNAME_DELETE.equals(eventName)) {
             TaskListener taskListener = parseTaskListener(taskListenerElement);
             taskDefinition.addTaskListener(eventName, taskListener);
           } else if (TaskListener.EVENTNAME_TIMEOUT.equals(eventName)) {
             TaskListener taskListener = parseTimeoutTaskListener(taskListenerElement, activity, taskDefinition);
             taskDefinition.addTimeoutTaskListener(taskListenerElement.attribute("id"), taskListener);
           } else {
-            addError("Attribute 'event' must be one of {create|assignment|complete|delete|timeout}", userTaskElement);
+            addError("Attribute 'event' must be one of {create|assignment|complete|update|delete|timeout}", userTaskElement);
           }
         } else {
           addError("Attribute 'event' is mandatory on taskListener", userTaskElement);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AddIdentityLinkCmd.java
Patch:
@@ -81,14 +81,15 @@ public Void execute(CommandContext commandContext) {
     EnsureUtil.ensureNotNull("Cannot find task with id " + taskId, "task", task);
 
     checkAddIdentityLink(task, commandContext);
-    
+
     if (IdentityLinkType.ASSIGNEE.equals(type)) {
       task.setAssignee(userId);
     } else if (IdentityLinkType.OWNER.equals(type)) {
       task.setOwner(userId);
     } else {
       task.addIdentityLink(userId, groupId, type);
     }
+    task.triggerUpdateEvent();
 
     return null;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ClaimTaskCmd.java
Patch:
@@ -67,7 +67,7 @@ public Void execute(CommandContext commandContext) {
       // Task should be assigned to no one
       task.setAssignee(null);
     }
-
+    task.triggerUpdateEvent();
     task.createHistoricTaskDetails(UserOperationLogEntry.OPERATION_TYPE_CLAIM);
 
     return null;

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/CreateTaskCmd.java
Patch:
@@ -37,9 +37,7 @@ public CreateTaskCmd(String taskId) {
   public Task execute(CommandContext commandContext) {
     checkCreateTask(commandContext);
 
-    TaskEntity task = TaskEntity.create();
-    task.setId(taskId);
-    return task;
+    return new TaskEntity(taskId);
   }
 
   protected void checkCreateTask(CommandContext commandContext) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DelegateTaskCmd.java
Patch:
@@ -53,7 +53,8 @@ public Object execute(CommandContext commandContext) {
     checkDelegateTask(task, commandContext);
 
     task.delegate(userId);
-    
+
+    task.triggerUpdateEvent();
     task.createHistoricTaskDetails(UserOperationLogEntry.OPERATION_TYPE_DELEGATE);
 
     return null;

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeleteIdentityLinkCmd.java
Patch:
@@ -89,6 +89,7 @@ public Void execute(CommandContext commandContext) {
     } else {
       task.deleteIdentityLink(userId, groupId, type);
     }
+    task.triggerUpdateEvent();
 
     return null;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ResolveTaskCmd.java
Patch:
@@ -36,6 +36,7 @@ public ResolveTaskCmd(String taskId, Map<String, Object> variables) {
   @Override
   protected void completeTask(TaskEntity task) {
     task.resolve();
+    task.triggerUpdateEvent();
     task.createHistoricTaskDetails(UserOperationLogEntry.OPERATION_TYPE_RESOLVE);
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SetTaskPriorityCmd.java
Patch:
@@ -54,6 +54,7 @@ public Void execute(CommandContext commandContext) {
 
     task.setPriority(priority);
 
+    task.triggerUpdateEvent();
     task.createHistoricTaskDetails(UserOperationLogEntry.OPERATION_TYPE_SET_PRIORITY);
 
     return null;

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SubmitTaskFormCmd.java
Patch:
@@ -88,6 +88,7 @@ public VariableMap execute(CommandContext commandContext) {
     if (DelegationState.PENDING.equals(task.getDelegationState())) {
       task.resolve();
       task.createHistoricTaskDetails(UserOperationLogEntry.OPERATION_TYPE_RESOLVE);
+      task.triggerUpdateEvent();
     } else {
       task.complete();
       task.createHistoricTaskDetails(UserOperationLogEntry.OPERATION_TYPE_COMPLETE);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/handler/HumanTaskItemHandler.java
Patch:
@@ -259,6 +259,7 @@ protected void initializeTaskListeners(CmmnElement element, CmmnActivity activit
         taskDefinition.addTaskListener(TaskListener.EVENTNAME_CREATE, taskListener);
         taskDefinition.addTaskListener(TaskListener.EVENTNAME_ASSIGNMENT, taskListener);
         taskDefinition.addTaskListener(TaskListener.EVENTNAME_COMPLETE, taskListener);
+        taskDefinition.addTaskListener(TaskListener.EVENTNAME_UPDATE, taskListener);
         taskDefinition.addTaskListener(TaskListener.EVENTNAME_DELETE, taskListener);
       }
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/TimerTaskListenerJobHandler.java
Patch:
@@ -45,7 +45,7 @@ public void execute(TimerJobConfiguration configuration, ExecutionEntity executi
     }
 
     if (targetTask != null) {
-      targetTask.fireTimeoutEvent(configuration.getTimerElementSecondaryKey());
+      targetTask.triggerTimeoutEvent(configuration.getTimerElementSecondaryKey());
     } else {
       throw new ProcessEngineException("Error while triggering timeout task listener '" + configuration.getTimerElementSecondaryKey()
           + "': cannot find task for activity id '" + configuration.getTimerElementKey() + "'.");

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/TaskAuthorizationTest.java
Patch:
@@ -350,7 +350,7 @@ public void testNewTask() {
 
   public void testSaveTaskInsertWithoutAuthorization() {
     // given
-    TaskEntity task = TaskEntity.create();
+    TaskEntity task = new TaskEntity("");
 
     try {
       // when
@@ -365,7 +365,7 @@ public void testSaveTaskInsertWithoutAuthorization() {
 
   public void testSaveTaskInsert() {
     // given
-    TaskEntity task = TaskEntity.create();
+    TaskEntity task = new TaskEntity("");
     task.setAssignee("demo");
 
     createGrantAuthorization(TASK, ANY, userId, CREATE);
@@ -384,7 +384,7 @@ public void testSaveTaskInsert() {
 
   public void testSaveAndUpdateTaskWithTaskAssignPermission() {
     // given
-    TaskEntity task = TaskEntity.create();
+    TaskEntity task = new TaskEntity("");
     task.setAssignee("demo");
 
     createGrantAuthorization(TASK, ANY, userId, CREATE, TASK_ASSIGN);

File: engine/src/test/java/org/camunda/bpm/engine/test/cmmn/decisiontask/DmnDecisionTaskResultListenerTest.java
Patch:
@@ -120,7 +120,7 @@ public void testCollectCountHitPolicyNoOutput() {
     assertEquals(1, results.size());
     DmnDecisionResultEntries firstOutput = results.get(0);
 
-    assertEquals(0, firstOutput.getFirstEntry());
+    assertEquals(0, (int) firstOutput.getFirstEntry());
     assertEquals(Variables.integerValue(0), firstOutput.getFirstEntryTyped());
   }
 
@@ -138,7 +138,7 @@ public void testCollectSumHitPolicySingleEntry() {
     assertEquals(1, results.size());
     DmnDecisionResultEntries firstOutput = results.get(0);
 
-    assertEquals(12, firstOutput.getFirstEntry());
+    assertEquals(12, (int) firstOutput.getFirstEntry());
     assertEquals(Variables.integerValue(12), firstOutput.getFirstEntryTyped());
   }
 
@@ -149,7 +149,7 @@ public void testCollectSumHitPolicySingleEntryList() {
     assertEquals(1, results.size());
     DmnDecisionResultEntries firstOutput = results.get(0);
 
-    assertEquals(33, firstOutput.getFirstEntry());
+    assertEquals(33, (int) firstOutput.getFirstEntry());
     assertEquals(Variables.integerValue(33), firstOutput.getFirstEntryTyped());
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/dmn/businessruletask/DmnDecisionResultListenerTest.java
Patch:
@@ -123,7 +123,7 @@ public void testCollectCountHitPolicyNoOutput() {
     assertEquals(1, results.size());
     DmnDecisionResultEntries firstOutput = results.get(0);
 
-    assertEquals(0, firstOutput.getFirstEntry());
+    assertEquals(0, (int) firstOutput.getFirstEntry());
     assertEquals(Variables.integerValue(0), firstOutput.getFirstEntryTyped());
   }
 
@@ -141,7 +141,7 @@ public void testCollectSumHitPolicySingleEntry() {
     assertEquals(1, results.size());
     DmnDecisionResultEntries firstOutput = results.get(0);
 
-    assertEquals(12, firstOutput.getFirstEntry());
+    assertEquals(12, (int) firstOutput.getFirstEntry());
     assertEquals(Variables.integerValue(12), firstOutput.getFirstEntryTyped());
   }
 
@@ -152,7 +152,7 @@ public void testCollectSumHitPolicySingleEntryList() {
     assertEquals(1, results.size());
     DmnDecisionResultEntries firstOutput = results.get(0);
 
-    assertEquals(33, firstOutput.getFirstEntry());
+    assertEquals(33, (int) firstOutput.getFirstEntry());
     assertEquals(Variables.integerValue(33), firstOutput.getFirstEntryTyped());
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/dmn/el/DmnExpressionLanguageTest.java
Patch:
@@ -62,7 +62,7 @@ public void testJuelDoesNotShadowInnerProperty() {
 
     DmnDecisionTableResult result = decisionService.evaluateDecisionTableByKey("decision_1", inputs);
 
-    assertThat(result.getSingleEntry()).isEqualTo("B_FROM_MAP");
+    assertThat((String)result.getSingleEntry()).isEqualTo("B_FROM_MAP");
   }
 
   @Test
@@ -77,6 +77,6 @@ public void testJuelResolvesListIndex() {
 
     DmnDecisionTableResult result = decisionService.evaluateDecisionTableByKey("decision_1", inputs);
 
-    assertThat(result.getSingleEntry()).isEqualTo("0_FROM_LIST");
+    assertThat((String)result.getSingleEntry()).isEqualTo("0_FROM_LIST");
   }
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricCaseActivityInstanceTest.java
Patch:
@@ -1003,7 +1003,7 @@ public CaseExecutionStateCountMap() {
     }
 
     public Long get(CaseExecutionState state) {
-      return state != null && containsKey(state) ? super.get(state) : 0;
+      return state != null && containsKey(state) ? super.get(state) : 0l;
     }
 
     public Long count() {

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/event/CdiProcessApplicationEventSupportTest.java
Patch:
@@ -68,7 +68,9 @@ public void testEventListener() {
     Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
     taskService.setAssignee(task.getId(), "demo");
     listenerInvocationCount = (Integer) runtimeService.getVariable(processInstance.getId(), ExecutionListenerProcessApplication.LISTENER_INVOCATION_COUNT);
-    Assert.assertEquals(7, listenerInvocationCount.intValue());
+
+    // assignment & update events fired
+    Assert.assertEquals(8, listenerInvocationCount.intValue());
   }
 
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/logging/ProcessDataLoggingContextTest.java
Patch:
@@ -436,7 +436,7 @@ public void shouldLogFailureFromParallelTasksInCorrectTaskContext() {
   }
 
   @Test
-  @WatchLogger(loggerNames = CONTEXT_LOGGER, level = "ERROR")
+  @WatchLogger(loggerNames = CONTEXT_LOGGER, level = "DEBUG")
   public void shouldLogFailureFromNestedDelegateInOuterContext() {
     // given
     manageDeployment("failing.bpmn", Bpmn.createExecutableProcess(FAILING_PROCESS)
@@ -466,7 +466,7 @@ public void shouldLogFailureFromNestedDelegateInOuterContext() {
   }
 
   @Test
-  @WatchLogger(loggerNames = CONTEXT_LOGGER, level = "ERROR")
+  @WatchLogger(loggerNames = CONTEXT_LOGGER, level = "DEBUG")
   public void shouldLogFailureFromNestedExecutionListenerInOuterContext() {
     // given
     manageDeployment("failing.bpmn", Bpmn.createExecutableProcess(FAILING_PROCESS)

File: engine/src/main/java/org/camunda/bpm/engine/impl/interceptor/CommandContextInterceptor.java
Patch:
@@ -90,7 +90,7 @@ public <T> T execute(Command<T> command) {
     boolean isNew = ProcessEngineContextImpl.consume();
     boolean openNew = (context == null || isNew);
 
-    CommandInvocationContext commandInvocationContext = new CommandInvocationContext(command);
+    CommandInvocationContext commandInvocationContext = new CommandInvocationContext(command, processEngineConfiguration);
     Context.setCommandInvocationContext(commandInvocationContext);
 
     try {

File: engine/src/main/java/org/camunda/bpm/engine/impl/test/TestHelper.java
Patch:
@@ -154,7 +154,7 @@ public static void annotationDeploymentTearDown(ProcessEngine processEngine, Str
 
   public static void deleteDeployment(ProcessEngine processEngine, String deploymentId) {
     if(deploymentId != null) {
-      processEngine.getRepositoryService().deleteDeployment(deploymentId, true);
+      processEngine.getRepositoryService().deleteDeployment(deploymentId, true, true, true);
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/interceptor/ContextLogger.java
Patch:
@@ -57,7 +57,7 @@ public void exceptionWhileInvokingOnCommandFailed(Throwable t) {
   }
 
   public void bpmnStackTrace(String string) {
-    logError(
+    logDebug(
         "006",
         string);
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/el/ExpressionManagerTest.java
Patch:
@@ -19,10 +19,12 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.task.Task;
 import org.camunda.bpm.engine.test.Deployment;
+import org.camunda.bpm.engine.test.RequiredHistoryLevel;
 import org.camunda.bpm.engine.variable.Variables;
 
 /**
@@ -88,6 +90,7 @@ public void testResolvesVariablesFromDifferentScopes() {
   }
 
   @Deployment
+  @RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_FULL)
   public void testSetVariableByExpressionFromListener() {
     // given
     runtimeService.startProcessInstanceByKey("fieldInjectionTest", Variables.putValue("myCounter", 5));

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/tasklistener/TaskListenerTest.java
Patch:
@@ -688,7 +688,7 @@ public void testThrowErrorOnCompleteAndCatchOnSubprocess() {
   public void testThrowErrorOnCreateAndCatchOnEventSubprocess() {
     // given
     BpmnModelInstance model = createModelThrowErrorInListenerAndCatchOnEventSubprocess(TaskListener.EVENTNAME_CREATE);
-    System.out.println(Bpmn.convertToString(model));
+
     testRule.deploy(model);
 
     // when

File: engine/src/main/java/org/camunda/bpm/engine/impl/el/VariableScopeElResolver.java
Patch:
@@ -96,6 +96,7 @@ public void setValue(ELContext context, Object base, Object property, Object val
         VariableScope variableScope = (VariableScope) object;
         if (variableScope.hasVariable(variable)) {
           variableScope.setVariable(variable, value);
+          context.setPropertyResolved(true);
         }
       }
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParseUtil.java
Patch:
@@ -223,7 +223,7 @@ protected static ParameterValueProvider parseParamValueProvider(Element paramete
   public static ExecutableScript parseCamundaScript(Element scriptElement) {
     String scriptLanguage = scriptElement.attribute("scriptFormat");
     if (scriptLanguage == null || scriptLanguage.isEmpty()) {
-      throw new BpmnParseException("Missing attribute 'scriptFormatAttribute' for 'script' element", scriptElement);
+      throw new BpmnParseException("Missing attribute 'scriptFormat' for 'script' element", scriptElement);
     }
     else {
       String scriptResource = scriptElement.attribute("resource");

File: webapps/src/main/java/org/camunda/bpm/cockpit/impl/plugin/base/sub/resources/ProcessDefinitionResource.java
Patch:
@@ -68,6 +68,7 @@ public List<ProcessDefinitionDto> execute(CommandContext commandContext) {
         queryParameter.setParentProcessDefinitionId(id);
         injectEngineConfig(queryParameter);
         configureExecutionQuery(queryParameter);
+        queryParameter.disableMaxResultsLimit();
         return getQueryService().executeQuery("selectCalledProcessDefinitions", queryParameter);
       }
     });

File: webapps/src/main/java/org/camunda/bpm/cockpit/impl/plugin/base/sub/resources/ProcessInstanceResource.java
Patch:
@@ -58,6 +58,7 @@ public List<CalledProcessInstanceDto> getCalledProcessInstances(@Context UriInfo
   public List<CalledProcessInstanceDto> queryCalledProcessInstances(CalledProcessInstanceQueryDto queryParameter) {
     queryParameter.setParentProcessInstanceId(id);
     configureExecutionQuery(queryParameter);
+    queryParameter.disableMaxResultsLimit();
     return getQueryService().executeQuery("selectCalledProcessInstances", queryParameter);
   }
 

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/ProcessDefinitionRestServiceImpl.java
Patch:
@@ -26,6 +26,7 @@
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.RepositoryService;
 import org.camunda.bpm.engine.exception.NotFoundException;
+import org.camunda.bpm.engine.impl.ProcessDefinitionStatisticsQueryImpl;
 import org.camunda.bpm.engine.management.ProcessDefinitionStatistics;
 import org.camunda.bpm.engine.management.ProcessDefinitionStatisticsQuery;
 import org.camunda.bpm.engine.repository.DeleteProcessDefinitionsBuilder;
@@ -172,7 +173,8 @@ public List<StatisticsResultDto> getStatistics(Boolean includeFailedJobs, Boolea
       query.includeRootIncidents();
     }
 
-    List<ProcessDefinitionStatistics> queryResults = query.list();
+    List<ProcessDefinitionStatistics> queryResults =
+        ((ProcessDefinitionStatisticsQueryImpl) query).unboundedResultList();
 
     List<StatisticsResultDto> results = new ArrayList<StatisticsResultDto>();
     for (ProcessDefinitionStatistics queryResult : queryResults) {

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/history/HistoricProcessDefinitionRestServiceImpl.java
Patch:
@@ -22,6 +22,7 @@
 import org.camunda.bpm.engine.history.CleanableHistoricProcessInstanceReportResult;
 import org.camunda.bpm.engine.history.HistoricActivityStatistics;
 import org.camunda.bpm.engine.history.HistoricActivityStatisticsQuery;
+import org.camunda.bpm.engine.impl.HistoricActivityStatisticsQueryImpl;
 import org.camunda.bpm.engine.rest.dto.converter.DateConverter;
 import org.camunda.bpm.engine.rest.dto.history.HistoricActivityStatisticsDto;
 import org.camunda.bpm.engine.rest.dto.history.CleanableHistoricProcessInstanceReportResultDto;
@@ -99,7 +100,8 @@ public List<HistoricActivityStatisticsDto> getHistoricActivityStatistics(UriInfo
 
     List<HistoricActivityStatisticsDto> result = new ArrayList<HistoricActivityStatisticsDto>();
 
-    List<HistoricActivityStatistics> statistics = query.list();
+    List<HistoricActivityStatistics> statistics =
+        ((HistoricActivityStatisticsQueryImpl) query).unboundedResultList();
 
     for (HistoricActivityStatistics currentStatistics : statistics) {
       result.add(HistoricActivityStatisticsDto.fromHistoricActivityStatistics(currentStatistics));

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/impl/ProcessDefinitionResourceImpl.java
Patch:
@@ -30,6 +30,7 @@
 import org.camunda.bpm.engine.exception.NotFoundException;
 import org.camunda.bpm.engine.exception.NullValueException;
 import org.camunda.bpm.engine.form.StartFormData;
+import org.camunda.bpm.engine.impl.ActivityStatisticsQueryImpl;
 import org.camunda.bpm.engine.impl.form.validator.FormFieldValidationException;
 import org.camunda.bpm.engine.impl.util.IoUtil;
 import org.camunda.bpm.engine.management.ActivityStatistics;
@@ -238,7 +239,8 @@ public List<StatisticsResultDto> getActivityStatistics(Boolean includeFailedJobs
       query.includeIncidentsForType(includeIncidentsForType);
     }
 
-    List<ActivityStatistics> queryResults = query.list();
+    List<ActivityStatistics> queryResults =
+        ((ActivityStatisticsQueryImpl) query).unboundedResultList();
 
     List<StatisticsResultDto> results = new ArrayList<>();
     for (ActivityStatistics queryResult : queryResults) {

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ProcessEngineRestServiceTest.java
Patch:
@@ -75,6 +75,7 @@
 import org.camunda.bpm.engine.identity.GroupQuery;
 import org.camunda.bpm.engine.identity.User;
 import org.camunda.bpm.engine.identity.UserQuery;
+import org.camunda.bpm.engine.impl.HistoricActivityStatisticsQueryImpl;
 import org.camunda.bpm.engine.management.JobDefinition;
 import org.camunda.bpm.engine.management.JobDefinitionQuery;
 import org.camunda.bpm.engine.repository.CaseDefinition;
@@ -385,7 +386,7 @@ private void createHistoricVariableInstanceMock() {
   private void createHistoricActivityStatisticsMock() {
     List<HistoricActivityStatistics> statistics = MockProvider.createMockHistoricActivityStatistics();
 
-    HistoricActivityStatisticsQuery query = mock(HistoricActivityStatisticsQuery.class);
+    HistoricActivityStatisticsQuery query = mock(HistoricActivityStatisticsQueryImpl.class);
     when(mockHistoryService.createHistoricActivityStatisticsQuery(MockProvider.EXAMPLE_PROCESS_DEFINITION_ID)).thenReturn(query);
     when(query.list()).thenReturn(statistics);
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ExecuteFilterListCmd.java
Patch:
@@ -17,6 +17,8 @@
 package org.camunda.bpm.engine.impl.cmd;
 
 import java.util.List;
+
+import org.camunda.bpm.engine.impl.AbstractQuery;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.query.Query;
@@ -38,6 +40,7 @@ public ExecuteFilterListCmd(String filterId, Query<?, ?> extendingQuery) {
 
   public List<?> execute(CommandContext commandContext) {
     Query<?, ?> query = getFilterQuery(commandContext);
+    ((AbstractQuery) query).enableMaxResultsLimit();
     return query.list();
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ExecuteFilterListPageCmd.java
Patch:
@@ -17,6 +17,8 @@
 package org.camunda.bpm.engine.impl.cmd;
 
 import java.util.List;
+
+import org.camunda.bpm.engine.impl.AbstractQuery;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.query.Query;
@@ -45,6 +47,7 @@ public ExecuteFilterListPageCmd(String filterId, Query<?, ?> extendingQuery, int
 
   public List<?> execute(CommandContext commandContext) {
     Query<?, ?> query = getFilterQuery(commandContext);
+    ((AbstractQuery) query).enableMaxResultsLimit();
     return query.listPage(firstResult, maxResults);
   }
 

File: spring-boot-starter/starter-webapp-core/src/main/java/org/camunda/bpm/spring/boot/starter/webapp/filter/SpringBootCsrfPreventionFilter.java
Patch:
@@ -479,7 +479,7 @@ public void parseParams(FilterConfig filterConfig) {
         }
 
       } else { // default
-        this.sameSiteCookieValue = SameSiteOption.STRICT.getValue();
+        this.sameSiteCookieValue = SameSiteOption.LAX.getValue();
 
       }
     }

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/CsrfPreventionFilterTest.java
Patch:
@@ -123,7 +123,7 @@ public void testNonModifyingRequestTokenGeneration() throws IOException, Servlet
     Assert.assertNotNull(cookieToken);
     Assert.assertNotNull(headerToken);
 
-    assertThat(cookieToken).matches(CSRF_COOKIE_NAME + "=[A-Z0-9]{32}; Path=/camunda; SameSite=Strict");
+    assertThat(cookieToken).matches(CSRF_COOKIE_NAME + "=[A-Z0-9]{32}; Path=/camunda; SameSite=Lax");
 
     Assert.assertEquals("No HTTP Header Token!",false, headerToken.isEmpty());
     assertThat(cookieToken).contains(headerToken);
@@ -211,7 +211,7 @@ public void testNonModifyingRequestTokenGenerationWithRootContextPath() throws I
     Assert.assertNotNull(cookieToken);
     Assert.assertNotNull(headerToken);
 
-    assertThat(cookieToken).matches(CSRF_COOKIE_NAME + "=[A-Z0-9]{32}; Path=/; SameSite=Strict");
+    assertThat(cookieToken).matches(CSRF_COOKIE_NAME + "=[A-Z0-9]{32}; Path=/; SameSite=Lax");
 
     Assert.assertEquals("No HTTP Header Token!",false, headerToken.isEmpty());
     assertThat(cookieToken).contains(headerToken);

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/CsrfPreventionIT.java
Patch:
@@ -46,7 +46,7 @@ public void shouldSetCookieWebapp() {
     String xsrfCookieValue = headerRule.getXsrfCookieValue(connection);
     String xsrfTokenHeader = headerRule.getXsrfTokenHeader(connection);
 
-    assertThat(xsrfCookieValue).matches("XSRF-TOKEN=[A-Z0-9]{32};Path=/;SameSite=Strict");
+    assertThat(xsrfCookieValue).matches("XSRF-TOKEN=[A-Z0-9]{32};Path=/;SameSite=Lax");
     assertThat(xsrfTokenHeader).matches("[A-Z0-9]{32}");
 
     assertThat(xsrfCookieValue).contains(xsrfTokenHeader);
@@ -59,7 +59,7 @@ public void shouldSetCookieWebappRest() {
     String xsrfCookieValue = headerRule.getXsrfCookieValue(connection);
     String xsrfTokenHeader = headerRule.getXsrfTokenHeader(connection);
 
-    assertThat(xsrfCookieValue).matches("XSRF-TOKEN=[A-Z0-9]{32};Path=/;SameSite=Strict");
+    assertThat(xsrfCookieValue).matches("XSRF-TOKEN=[A-Z0-9]{32};Path=/;SameSite=Lax");
     assertThat(xsrfTokenHeader).matches("[A-Z0-9]{32}");
 
     assertThat(xsrfCookieValue).contains(xsrfTokenHeader);

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/SameSiteEnabledIT.java
Patch:
@@ -50,7 +50,7 @@ public void shouldEnableSameSiteCookie() {
     String xsrfCookieValue = headerRule.getXsrfCookieValue(connection);
     String xsrfTokenHeader = headerRule.getXsrfTokenHeader(connection);
 
-    assertThat(xsrfCookieValue).matches("XSRF-TOKEN=[A-Z0-9]{32};Path=/;SameSite=Strict");
+    assertThat(xsrfCookieValue).matches("XSRF-TOKEN=[A-Z0-9]{32};Path=/;SameSite=Lax");
     assertThat(xsrfTokenHeader).matches("[A-Z0-9]{32}");
 
     assertThat(xsrfCookieValue).contains(xsrfTokenHeader);

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/SecureDisabledIT.java
Patch:
@@ -50,7 +50,7 @@ public void shouldDisableSecureCookie() {
     String xsrfCookieValue = headerRule.getXsrfCookieValue(connection);
     String xsrfTokenHeader = headerRule.getXsrfTokenHeader(connection);
 
-    assertThat(xsrfCookieValue).matches("XSRF-TOKEN=[A-Z0-9]{32};Path=/;SameSite=Strict");
+    assertThat(xsrfCookieValue).matches("XSRF-TOKEN=[A-Z0-9]{32};Path=/;SameSite=Lax");
     assertThat(xsrfTokenHeader).matches("[A-Z0-9]{32}");
 
     assertThat(xsrfCookieValue).contains(xsrfTokenHeader);

File: spring-boot-starter/starter-webapp-core/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/filter/csrf/it/properties/SecureEnabledIT.java
Patch:
@@ -50,7 +50,7 @@ public void shouldEnableSecureCookie() {
     String xsrfCookieValue = headerRule.getXsrfCookieValue(connection);
     String xsrfTokenHeader = headerRule.getXsrfTokenHeader(connection);
 
-    assertThat(xsrfCookieValue).matches("XSRF-TOKEN=[A-Z0-9]{32};Path=/;SameSite=Strict;Secure");
+    assertThat(xsrfCookieValue).matches("XSRF-TOKEN=[A-Z0-9]{32};Path=/;SameSite=Lax;Secure");
     assertThat(xsrfTokenHeader).matches("[A-Z0-9]{32}");
 
     assertThat(xsrfCookieValue).contains(xsrfTokenHeader);

File: qa/integration-tests-webapps/integration-tests/src/test/java/org/camunda/bpm/CsrfPreventionIT.java
Patch:
@@ -57,7 +57,7 @@ protected boolean checkCookieSet(ClientResponse response) {
     List<String> values = headers.get("Set-Cookie");
     for (String value : values) {
       if (value.startsWith("XSRF-TOKEN=")) {
-        return value.contains(";SameSite=Strict");
+        return value.contains(";SameSite=Lax");
       }
     }
 

File: webapps/src/main/java/org/camunda/bpm/webapp/impl/security/filter/CsrfPreventionCookieConfigurator.java
Patch:
@@ -73,7 +73,7 @@ public void parseParams(FilterConfig filterConfig) {
       }
 
     } else { // default
-      this.sameSiteCookieValue = SameSiteOption.STRICT.getValue();
+      this.sameSiteCookieValue = SameSiteOption.LAX.getValue();
 
     }
   }

File: webapps/src/test/java/org/camunda/bpm/webapp/impl/security/filter/csrf/CsrfPreventionFilterTest.java
Patch:
@@ -125,7 +125,7 @@ public void testNonModifyingRequestTokenGeneration() throws IOException, Servlet
     Assert.assertNotNull(cookieToken);
     Assert.assertNotNull(headerToken);
 
-    assertThat(cookieToken).matches(CSRF_COOKIE_NAME + "=[A-Z0-9]{32}" + CSRF_PATH_FIELD_NAME + "/camunda;SameSite=Strict");
+    assertThat(cookieToken).matches(CSRF_COOKIE_NAME + "=[A-Z0-9]{32}" + CSRF_PATH_FIELD_NAME + "/camunda;SameSite=Lax");
 
     Assert.assertEquals("No HTTP Header Token!",false, headerToken.isEmpty());
     assertThat(cookieToken).contains(headerToken);
@@ -156,7 +156,7 @@ public void testNonModifyingRequestTokenGenerationWithRootContextPath() throws I
     Assert.assertNotNull(cookieToken);
     Assert.assertNotNull(headerToken);
 
-    assertThat(cookieToken).matches(CSRF_COOKIE_NAME + "=[A-Z0-9]{32}" + CSRF_PATH_FIELD_NAME + "/;SameSite=Strict");
+    assertThat(cookieToken).matches(CSRF_COOKIE_NAME + "=[A-Z0-9]{32}" + CSRF_PATH_FIELD_NAME + "/;SameSite=Lax");
 
     Assert.assertEquals("No HTTP Header Token!",false, headerToken.isEmpty());
     assertThat(cookieToken).contains(headerToken);

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -686,6 +686,7 @@ public abstract class MockProvider {
   public static final String EXAMPLE_HIST_INCIDENT_CAUSE_INCIDENT_ID = "aCauseIncidentId";
   public static final String EXAMPLE_HIST_INCIDENT_ROOT_CAUSE_INCIDENT_ID = "aRootCauseIncidentId";
   public static final String EXAMPLE_HIST_INCIDENT_CONFIGURATION = "aConfiguration";
+  public static final String EXAMPLE_HIST_INCIDENT_HISTORY_CONFIGURATION = "aHistoryConfiguration";
   public static final String EXAMPLE_HIST_INCIDENT_MESSAGE = "anIncidentMessage";
   public static final boolean EXAMPLE_HIST_INCIDENT_STATE_OPEN = false;
   public static final boolean EXAMPLE_HIST_INCIDENT_STATE_DELETED = false;

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricIncidentQueryProperty.java
Patch:
@@ -35,6 +35,7 @@ public interface HistoricIncidentQueryProperty {
   public static final QueryProperty PROCESS_DEFINITION_ID = new QueryPropertyImpl("PROC_DEF_ID_");
   public static final QueryProperty CAUSE_INCIDENT_ID = new QueryPropertyImpl("CAUSE_INCIDENT_ID_");
   public static final QueryProperty ROOT_CAUSE_INCIDENT_ID = new QueryPropertyImpl("ROOT_CAUSE_INCIDENT_ID_");
+  public static final QueryProperty HISTORY_CONFIGURATION = new QueryPropertyImpl("HISTORY_CONFIGURATION_");
   public static final QueryProperty CONFIGURATION = new QueryPropertyImpl("CONFIGURATION_");
   public static final QueryProperty TENANT_ID = new QueryPropertyImpl("TENANT_ID_");
   public static final QueryProperty INCIDENT_STATE = new QueryPropertyImpl("INCIDENT_STATE_");

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -354,6 +354,7 @@ protected void initHistoricIncidentEvent(HistoricIncidentEventEntity evt, Incide
     evt.setIncidentMessage(incident.getIncidentMessage());
     evt.setTenantId(incident.getTenantId());
     evt.setJobDefinitionId(incident.getJobDefinitionId());
+    evt.setHistoryConfiguration(incident.getHistoryConfiguration());
 
     String jobId = incident.getConfiguration();
     if (jobId != null && isHistoryRemovalTimeStrategyStart()) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExternalTaskEntity.java
Patch:
@@ -26,7 +26,7 @@
 import org.camunda.bpm.engine.delegate.BpmnError;
 import org.camunda.bpm.engine.externaltask.ExternalTask;
 import org.camunda.bpm.engine.impl.ProcessEngineLogger;
-import org.camunda.bpm.engine.impl.bpmn.behavior.ExternalTaskActivityBehavior;
+import org.camunda.bpm.engine.impl.bpmn.helper.BpmnExceptionHandler;
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.db.DbEntity;
 import org.camunda.bpm.engine.impl.db.EnginePersistenceLogger;
@@ -388,11 +388,10 @@ public void bpmnError(String errorCode, String errorMessage, Map<String, Object>
       bpmnError = new BpmnError(errorCode);
     }
     try {
-      ExternalTaskActivityBehavior behavior = ((ExternalTaskActivityBehavior) activityExecution.getActivity().getActivityBehavior());
       if (variables != null && !variables.isEmpty()) {
         activityExecution.setVariables(variables);
       }
-      behavior.propagateBpmnError(bpmnError, activityExecution);
+      BpmnExceptionHandler.propagateBpmnError(bpmnError, activityExecution);
     } catch (Exception ex) {
       throw ProcessEngineLogger.CMD_LOGGER.exceptionBpmnErrorPropagationFailed(errorCode, ex);
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/BpmnBehaviorLogger.java
Patch:
@@ -156,7 +156,7 @@ public ProcessEngineException unresolvableExpressionException(String expression,
   }
 
   public ProcessEngineException invalidVariableTypeException(String variable, String type) {
-    return new ProcessEngineException(exceptionMessage("025", "Variable '{}' is not from type '{}'.", variable, type));
+    return new ProcessEngineException(exceptionMessage("025", "Variable '{}' is not of the expected type '{}'.", variable, type));
   }
 
   public ProcessEngineException resolveCollectionExpressionOrVariableReferenceException() {
@@ -166,7 +166,7 @@ public ProcessEngineException resolveCollectionExpressionOrVariableReferenceExce
   public ProcessEngineException expressionNotANumberException(String type, String expression) {
     return new ProcessEngineException(exceptionMessage(
       "027",
-      "Could not resolve expression from type '{}'. Expression '{}' needs to be a number or number String.",
+      "Could not resolve expression of type '{}'. Expression '{}' needs to be a number or number String.",
       type,
       expression
     ));
@@ -175,7 +175,7 @@ public ProcessEngineException expressionNotANumberException(String type, String
   public ProcessEngineException expressionNotBooleanException(String type, String expression) {
     return new ProcessEngineException(exceptionMessage(
       "028",
-      "Could not resolve expression from type '{}'. Expression '{}' needs to evaluate to a boolean value.",
+      "Could not resolve expression of type '{}'. Expression '{}' needs to evaluate to a boolean value.",
       type,
       expression
     ));

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/ExecuteJobsRunnable.java
Patch:
@@ -56,7 +56,7 @@ public void run() {
 
     Context.setJobExecutorContext(jobExecutorContext);
 
-    ClassLoader classLoaderBeforeExecution = setContextClassloader(ProcessEngine.class.getClassLoader());
+    ClassLoader classLoaderBeforeExecution = getContextClassloaderAndSwitchTheLoader();
 
     try {
       while (!currentProcessorJobQueue.isEmpty()) {
@@ -105,9 +105,9 @@ protected void unlockJob(String nextJobId, CommandExecutor commandExecutor) {
     commandExecutor.execute(new UnlockJobCmd(nextJobId));
   }
 
-  protected ClassLoader setContextClassloader(ClassLoader classLoader) {
+  protected ClassLoader getContextClassloaderAndSwitchTheLoader() {
     ClassLoader classLoaderBeforeExecution = Thread.currentThread().getContextClassLoader();
-    ClassLoaderUtil.setContextClassloader(ProcessEngine.class.getClassLoader());
+    Thread.currentThread().setContextClassLoader(ProcessEngine.class.getClassLoader());
     return classLoaderBeforeExecution;
   }
 

File: webapps/src/main/java/org/camunda/bpm/welcome/impl/plugin/resources/WelcomePluginsRootResource.java
Patch:
@@ -19,13 +19,13 @@
 import javax.ws.rs.Path;
 
 import org.camunda.bpm.welcome.impl.plugin.WelcomePlugins;
-import org.camunda.bpm.welcome.resource.AbstractWelcomePluginResource;
+import org.camunda.bpm.welcome.resource.AbstractWelcomePluginRootResource;
 
 /**
  * @author vale
  */
 @Path("plugin/" + WelcomePlugins.ID)
-public class WelcomePluginsRootResource extends AbstractWelcomePluginResource {
+public class WelcomePluginsRootResource extends AbstractWelcomePluginRootResource {
 
   public WelcomePluginsRootResource() {
     super(WelcomePlugins.ID);

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/DeploymentEntity.java
Patch:
@@ -60,7 +60,7 @@ public ResourceEntity getResource(String resourceName) {
 
   public void addResource(ResourceEntity resource) {
     if (resources==null) {
-      resources = new HashMap<String, ResourceEntity>();
+      resources = new HashMap<>();
     }
     resources.put(resource.getName(), resource);
   }
@@ -78,7 +78,7 @@ public Map<String, ResourceEntity> getResources() {
         .getCommandContext()
         .getResourceManager()
         .findResourcesByDeploymentId(id);
-      resources = new HashMap<String, ResourceEntity>();
+      resources = new HashMap<>();
       for (ResourceEntity resource: resourcesList) {
         resources.put(resource.getName(), resource);
       }

File: engine/src/main/java/org/camunda/bpm/engine/repository/Resource.java
Patch:
@@ -28,4 +28,6 @@ public interface Resource {
 
   String getDeploymentId();
 
+  byte[] getBytes();
+
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/cfg/DatabaseTablePrefixTest.java
Patch:
@@ -110,7 +110,8 @@ private static class CustomStandaloneInMemProcessEngineConfiguration extends Sta
     @Override
     public ProcessEngine buildProcessEngine() {
       init();
-      return new NoSchemaProcessEngineImpl(this);
+      processEngine =  new NoSchemaProcessEngineImpl(this);
+      return processEngine;
     }
 
     class NoSchemaProcessEngineImpl extends ProcessEngineImpl {

File: distro/run/modules/rest/src/main/java/org/camunda/camunda/rest/distro/rest/CamundaRestDistro.java
Patch:
@@ -1,7 +1,5 @@
 package org.camunda.camunda.rest.distro.rest;
 
-import org.camunda.bpm.spring.boot.starter.property.CamundaBpmProperties;
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -218,6 +218,9 @@ public class DbSqlSessionFactory implements SessionFactory {
       addDatabaseSpecificStatement(mysqlLikeDatabase, "updateHistoricIncidentsByProcessInstanceId", "updateHistoricIncidentsByProcessInstanceId_mysql");
       addDatabaseSpecificStatement(mysqlLikeDatabase, "updateIdentityLinkLogByProcessInstanceId", "updateIdentityLinkLogByProcessInstanceId_mysql");
 
+      // related to CAM-10664
+      addDatabaseSpecificStatement(mysqlLikeDatabase, "updateOperationLogAnnotationByOperationId", "updateOperationLogAnnotationByOperationId_mysql");
+
       constants = new HashMap<>();
       constants.put("constant.event", "'event'");
       constants.put("constant.op_message", "CONCAT(NEW_VALUE_, '_|_', PROPERTY_)");

File: spring-boot-starter/starter-webapp-core/src/main/java/org/camunda/bpm/spring/boot/starter/webapp/filter/LazyDelegateFilter.java
Patch:
@@ -62,7 +62,9 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
 
   @Override
   public void destroy() {
-    delegate.destroy();
+    if (delegate != null) {
+      delegate.destroy();
+    }
   }
 
   public InitHook<T> getInitHook() {

File: engine/src/main/java/org/camunda/bpm/engine/ProcessEngineConfiguration.java
Patch:
@@ -394,7 +394,7 @@ public abstract class ProcessEngineConfiguration {
    * If the value of this flag is set to <code>true</code> exceptions that occur
    * during the execution of a job that still has retries left will not be logged.
    * If the job does not have any retries left, the exception will still be logged
-   * on logging level ERROR.
+   * on logging level WARN.
    */
   protected boolean enableReducedJobExceptionLogging = false;
 

File: javaee/jobexecutor-ra/src/main/java/org/camunda/bpm/container/impl/threading/ra/inflow/JobExecutionHandler.java
Patch:
@@ -17,6 +17,7 @@
 package org.camunda.bpm.container.impl.threading.ra.inflow;
 
 import org.camunda.bpm.engine.impl.interceptor.CommandExecutor;
+import org.camunda.bpm.engine.impl.jobexecutor.JobFailureCollector;
 
 /**
  * Interface to be implemented by a MessageDriven bean handling the execution of
@@ -27,6 +28,6 @@
  */
 public interface JobExecutionHandler {
 
-  public void executeJob(String job, CommandExecutor commandExecutor);
+  public JobFailureCollector executeJob(String job, CommandExecutor commandExecutor);
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/ExecuteJobHelper.java
Patch:
@@ -31,8 +31,8 @@ public class ExecuteJobHelper {
     @Override
     public void exceptionWhileExecutingJob(String jobId, Throwable exception) {
       
-      // Default behavior, don't log exception. It is logged in ExecuteJobsRunnable#run.
-      // hook for custom logging handler
+      // Default behavior, just log exception
+      LOG.exceptionWhileExecutingJob(jobId, exception);
     }
 
   };
@@ -99,7 +99,6 @@ private static OptimisticLockingException callFailedJobListenerWithRetries(Comma
   }
 
   protected static void handleJobFailure(final String nextJobId, final JobFailureCollector jobFailureCollector, Throwable exception) {
-    LOGGING_HANDLER.exceptionWhileExecutingJob(nextJobId, exception);
     jobFailureCollector.setFailure(exception);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/ExecuteJobsRunnable.java
Patch:
@@ -63,7 +63,7 @@ public void run() {
           }
           catch(Throwable t) {
             if(ProcessEngineLogger.shouldLogJobException(processEngine.getProcessEngineConfiguration(), jobFailureCollector.getJob())) {
-              LOG.exceptionWhileExecutingJob(nextJobId, t);
+              ExecuteJobHelper.LOGGING_HANDLER.exceptionWhileExecutingJob(nextJobId, t);
             }
           }
         } else {

File: engine-rest/engine-rest-jaxrs2/src/main/java/org/camunda/bpm/engine/rest/impl/CamundaRestResources.java
Patch:
@@ -17,6 +17,8 @@
 package org.camunda.bpm.engine.rest.impl;
 
 import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;
+
+import org.camunda.bpm.engine.rest.exception.ExceptionHandler;
 import org.camunda.bpm.engine.rest.exception.JsonMappingExceptionHandler;
 import org.camunda.bpm.engine.rest.exception.JsonParseExceptionHandler;
 import org.camunda.bpm.engine.rest.exception.ProcessEngineExceptionHandler;
@@ -49,6 +51,7 @@ public class CamundaRestResources {
     CONFIGURATION_CLASSES.add(RestExceptionHandler.class);
     CONFIGURATION_CLASSES.add(MultipartPayloadProvider.class);
     CONFIGURATION_CLASSES.add(JacksonHalJsonProvider.class);
+    CONFIGURATION_CLASSES.add(ExceptionHandler.class);
   }
 
   /**

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/CamundaRestResources.java
Patch:
@@ -17,6 +17,8 @@
 package org.camunda.bpm.engine.rest.impl;
 
 import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;
+
+import org.camunda.bpm.engine.rest.exception.ExceptionHandler;
 import org.camunda.bpm.engine.rest.exception.JsonMappingExceptionHandler;
 import org.camunda.bpm.engine.rest.exception.JsonParseExceptionHandler;
 import org.camunda.bpm.engine.rest.exception.ProcessEngineExceptionHandler;
@@ -52,6 +54,7 @@ public class CamundaRestResources {
     CONFIGURATION_CLASSES.add(RestExceptionHandler.class);
     CONFIGURATION_CLASSES.add(MultipartPayloadProvider.class);
     CONFIGURATION_CLASSES.add(JacksonHalJsonProvider.class);
+    CONFIGURATION_CLASSES.add(ExceptionHandler.class);
   }
 
   /**

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/optimize/OptimizeHistoricVariableUpdateQueryCmd.java
Patch:
@@ -55,7 +55,7 @@ private void fetchVariableValues(List<HistoricVariableUpdate> historicVariableUp
       List<String> byteArrayIds = getByteArrayIds(historicVariableUpdates);
       if (!byteArrayIds.isEmpty()) {
         // pre-fetch all byte arrays into dbEntityCache to avoid (n+1) number of queries
-        commandContext.getOptimizeManager().getHistoricVariableUpdateByteArrays(byteArrayIds);
+        commandContext.getOptimizeManager().fetchHistoricVariableUpdateByteArrays(byteArrayIds);
       }
 
       resolveTypedValues(historicVariableUpdates);
@@ -72,7 +72,7 @@ protected boolean isHistoricDetailVariableInstanceUpdateEntity(HistoricVariableU
   }
 
   protected List<String> getByteArrayIds(List<HistoricVariableUpdate> variableUpdates) {
-    List<String> byteArrayIds = new ArrayList<String>();
+    List<String> byteArrayIds = new ArrayList<>();
 
     for (HistoricVariableUpdate variableUpdate : variableUpdates) {
       if (isHistoricDetailVariableInstanceUpdateEntity(variableUpdate)) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -432,7 +432,7 @@ public void parseErrors() {
 
       String errorMessage = errorElement.attributeNS(CAMUNDA_BPMN_EXTENSIONS_NS, "errorMessage");
       if(errorMessage != null) {
-        error.setErrorMessage(errorMessage);
+        error.setErrorMessageExpression(createParameterValueProvider(errorMessage, expressionManager));
       }
 
       errors.put(id, error);
@@ -2887,7 +2887,7 @@ public void parseEndEvents(Element parentElement, ScopeImpl scope) {
           }
           activity.getProperties().set(BpmnProperties.TYPE, ActivityTypes.END_EVENT_ERROR);
           if(error != null) {
-            activity.setActivityBehavior(new ErrorEndEventActivityBehavior(error.getErrorCode(), error.getErrorMessage()));
+            activity.setActivityBehavior(new ErrorEndEventActivityBehavior(error.getErrorCode(), error.getErrorMessageExpression()));
           } else {
             activity.setActivityBehavior(new ErrorEndEventActivityBehavior(errorRef, null));
           }

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/configuration/impl/DefaultJobConfiguration.java
Patch:
@@ -82,16 +82,16 @@ public static class JobConfiguration {
     public static TaskExecutor camundaTaskExecutor(CamundaBpmProperties properties) {
       int corePoolSize = properties.getJobExecution().getCorePoolSize();
       int maxPoolSize = properties.getJobExecution().getMaxPoolSize();
+      int queueCapacity = properties.getJobExecution().getQueueCapacity();
 
       final ThreadPoolTaskExecutor threadPoolTaskExecutor = new ThreadPoolTaskExecutor();
 
       threadPoolTaskExecutor.setCorePoolSize(corePoolSize);
       threadPoolTaskExecutor.setMaxPoolSize(maxPoolSize);
+      threadPoolTaskExecutor.setQueueCapacity(queueCapacity);
 
       Optional.ofNullable(properties.getJobExecution().getKeepAliveSeconds())
         .ifPresent(threadPoolTaskExecutor::setKeepAliveSeconds);
-      Optional.ofNullable(properties.getJobExecution().getQueueCapacity())
-        .ifPresent(threadPoolTaskExecutor::setQueueCapacity);
 
       LOG.configureJobExecutorPool(corePoolSize, maxPoolSize);
       return threadPoolTaskExecutor;

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/property/JobExecutionProperty.java
Patch:
@@ -32,8 +32,8 @@ public class JobExecutionProperty {
 
   private int corePoolSize = 3;
   private int maxPoolSize = 10;
+  private int queueCapacity = 3;
   private Integer keepAliveSeconds;
-  private Integer queueCapacity;
 
   /*
    * properties for job executor
@@ -87,11 +87,11 @@ public void setKeepAliveSeconds(Integer keepAliveSeconds) {
     this.keepAliveSeconds = keepAliveSeconds;
   }
 
-  public Integer getQueueCapacity() {
+  public int getQueueCapacity() {
     return queueCapacity;
   }
 
-  public void setQueueCapacity(Integer queueCapacity) {
+  public void setQueueCapacity(int queueCapacity) {
     this.queueCapacity = queueCapacity;
   }
 

File: spring-boot-starter/starter/src/test/java/org/camunda/bpm/spring/boot/starter/property/ParsePropertiesHelper.java
Patch:
@@ -38,11 +38,13 @@ public static class TestConfig {
   protected MetricsProperty metrics;
   protected ApplicationProperty application;
   protected WebappProperty webapp;
+  protected JobExecutionProperty jobExecution;
 
   @PostConstruct
   public void init() {
     metrics = properties.getMetrics();
     application = properties.getApplication();
     webapp = properties.getWebapp();
+    jobExecution = properties.getJobExecution();
   }
 }

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/impl/BpmnModelConstants.java
Patch:
@@ -442,6 +442,7 @@ public final class BpmnModelConstants {
   public static final String CAMUNDA_ATTRIBUTE_EVENT = "event";
   public static final String CAMUNDA_ATTRIBUTE_ERROR_CODE_VARIABLE = "errorCodeVariable";
   public static final String CAMUNDA_ATTRIBUTE_ERROR_MESSAGE_VARIABLE = "errorMessageVariable";
+  public static final String CAMUNDA_ATTRIBUTE_ERROR_MESSAGE = "errorMessage";
   public static final String CAMUNDA_ATTRIBUTE_EXCLUSIVE = "exclusive";
   public static final String CAMUNDA_ATTRIBUTE_EXPRESSION = "expression";
   public static final String CAMUNDA_ATTRIBUTE_FORM_HANDLER_CLASS = "formHandlerClass";

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/instance/ErrorTest.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.camunda.bpm.model.bpmn.instance;
 
+import static org.camunda.bpm.model.bpmn.impl.BpmnModelConstants.CAMUNDA_NS;
+
 import java.util.Arrays;
 import java.util.Collection;
 
@@ -36,6 +38,7 @@ public Collection<AttributeAssumption> getAttributesAssumptions() {
     return Arrays.asList(
       new AttributeAssumption("name"),
       new AttributeAssumption("errorCode"),
+      new AttributeAssumption(CAMUNDA_NS, "errorMessage"),
       new AttributeAssumption("structureRef")
     );
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/util/xml/Parse.java
Patch:
@@ -143,7 +143,7 @@ public Parse execute() {
 
       SAXParser saxParser = parser.getSaxParser();
       try {
-        saxParser.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "file,http,https");
+        saxParser.setProperty("http://javax.xml.XMLConstants/property/accessExternalSchema", "file,http,https,jar,wsjar");
       } catch (Exception e) {
         // ignore unavailable option
       }

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/parser/AbstractModelParser.java
Patch:
@@ -97,7 +97,7 @@ private void protectAgainstXxeAttacks(final DocumentBuilderFactory dbf) {
   private void enableSecureProcessing(final DocumentBuilderFactory dbf) {
     try {
       dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
-      dbf.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "file,http,https");
+      dbf.setAttribute("http://javax.xml.XMLConstants/property/accessExternalSchema", "file,http,https,jar,wsjar");
     } catch (ParserConfigurationException | IllegalArgumentException ignored) {
       // ignored
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/ManagementServiceImpl.java
Patch:
@@ -137,7 +137,7 @@ public void setJobRetriesByJobDefinitionId(String jobDefinitionId, int retries)
   public void setJobDuedate(String jobId, Date newDuedate) {
     commandExecutor.execute(new SetJobDuedateCmd(jobId, newDuedate));
   }
-  
+
   public void recalculateJobDuedate(String jobId, boolean creationDateBased) {
     commandExecutor.execute(new RecalculateJobDuedateCmd(jobId, creationDateBased));
   }
@@ -179,7 +179,7 @@ public String databaseSchemaUpgrade(final Connection connection, final String ca
       public String execute(CommandContext commandContext) {
         commandContext.getAuthorizationManager().checkCamundaAdmin();
         DbSqlSessionFactory dbSqlSessionFactory = (DbSqlSessionFactory) commandContext.getSessionFactories().get(DbSqlSession.class);
-        DbSqlSession dbSqlSession = new DbSqlSession(dbSqlSessionFactory, connection, catalog, schema);
+        DbSqlSession dbSqlSession = dbSqlSessionFactory.openSession(connection, catalog, schema);
         commandContext.getSessions().put(DbSqlSession.class, dbSqlSession);
         dbSqlSession.dbSchemaUpdate();
 
@@ -213,7 +213,7 @@ public Set<String> getRegisteredDeployments() {
       public Set<String> execute(CommandContext commandContext) {
         commandContext.getAuthorizationManager().checkCamundaAdmin();
         Set<String> registeredDeployments = Context.getProcessEngineConfiguration().getRegisteredDeployments();
-        return new HashSet<String>(registeredDeployments);
+        return new HashSet<>(registeredDeployments);
       }
     });
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/AbstractPersistenceSession.java
Patch:
@@ -35,7 +35,7 @@
 public abstract class AbstractPersistenceSession implements PersistenceSession {
 
   protected static final EnginePersistenceLogger LOG = ProcessEngineLogger.PERSISTENCE_LOGGER;
-  protected List<EntityLoadListener> listeners = new ArrayList<EntityLoadListener>(1);
+  protected List<EntityLoadListener> listeners = new ArrayList<>(1);
 
   public void executeDbOperation(DbOperation operation) {
     switch(operation.getOperationType()) {

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/ConcurrencyTestCase.java
Patch:
@@ -32,7 +32,7 @@ public abstract class ConcurrencyTestCase extends PluggableProcessEngineTestCase
 
   @Override
   protected void setUp() throws Exception {
-    controllableCommands = new ArrayList<ControllableCommand<?>>();
+    controllableCommands = new ArrayList<>();
     super.setUp();
   }
 

File: webapps/src/main/java/org/camunda/bpm/webapp/impl/security/filter/headersec/HttpHeaderSecurityFilter.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.camunda.bpm.webapp.impl.security.filter.headersec;
 
+import org.camunda.bpm.webapp.impl.security.filter.headersec.provider.impl.ContentTypeOptionsProvider;
 import org.camunda.bpm.webapp.impl.security.filter.headersec.provider.HeaderSecurityProvider;
 import org.camunda.bpm.webapp.impl.security.filter.headersec.provider.impl.XssProtectionProvider;
 
@@ -39,6 +40,7 @@ public class HttpHeaderSecurityFilter implements Filter {
   protected final List<HeaderSecurityProvider> headerSecurityProviders = new ArrayList<HeaderSecurityProvider>() {{
 
     add(new XssProtectionProvider());
+    add(new ContentTypeOptionsProvider());
 
   }};
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -1464,7 +1464,7 @@ protected void parseIntermediateLinkEventCatchBehavior(Element intermediateEvent
       if (!linkName.equals(elementName)) {
         // this is valid - but not a good practice (as it is really confusing
         // for the reader of the process model) - hence we log a warning
-        addWarning("Link Event named '" + elementName + "' containes link event definition with name '" + linkName
+        addWarning("Link Event named '" + elementName + "' contains link event definition with name '" + linkName
             + "' - it is recommended to use the same name for both.", intermediateEventElement);
       }
 

File: engine-spring/core/src/main/java/org/camunda/bpm/engine/spring/components/jobexecutor/SpringJobExecutor.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.concurrent.RejectedExecutionException;
 
 import org.camunda.bpm.engine.impl.ProcessEngineImpl;
-import org.camunda.bpm.engine.impl.jobexecutor.ExecuteJobsRunnable;
 import org.camunda.bpm.engine.impl.jobexecutor.JobExecutor;
 import org.springframework.core.task.TaskExecutor;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -1774,7 +1774,7 @@ protected BpmnDeployer getBpmnDeployer() {
   protected List<BpmnParseListener> getDefaultBPMNParseListeners() {
     List<BpmnParseListener> defaultListeners = new ArrayList<BpmnParseListener>();
     if (!HistoryLevel.HISTORY_LEVEL_NONE.equals(historyLevel)) {
-      defaultListeners.add(new HistoryParseListener(historyLevel, historyEventProducer));
+      defaultListeners.add(new HistoryParseListener(historyEventProducer));
     }
     if (isMetricsEnabled) {
       defaultListeners.add(new MetricsBpmnParseListener());
@@ -1813,7 +1813,7 @@ protected CmmnDeployer getCmmnDeployer() {
   protected List<CmmnTransformListener> getDefaultCmmnTransformListeners() {
     List<CmmnTransformListener> defaultListener = new ArrayList<CmmnTransformListener>();
     if (!HistoryLevel.HISTORY_LEVEL_NONE.equals(historyLevel)) {
-      defaultListener.add(new CmmnHistoryTransformListener(historyLevel, cmmnHistoryEventProducer));
+      defaultListener.add(new CmmnHistoryTransformListener(cmmnHistoryEventProducer));
     }
     if (isMetricsEnabled) {
       defaultListener.add(new MetricsCmmnTransformListener());
@@ -2176,7 +2176,6 @@ protected void initDmnEngine() {
       }
 
       dmnEngineConfiguration = new DmnEngineConfigurationBuilder(dmnEngineConfiguration)
-          .historyLevel(historyLevel)
           .dmnHistoryEventProducer(dmnHistoryEventProducer)
           .scriptEngineResolver(scriptingEngines)
           .expressionManager(expressionManager)

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/parser/ActivityInstanceEndListener.java
Patch:
@@ -17,7 +17,6 @@
 package org.camunda.bpm.engine.impl.history.parser;
 
 import org.camunda.bpm.engine.delegate.DelegateExecution;
-import org.camunda.bpm.engine.impl.history.HistoryLevel;
 import org.camunda.bpm.engine.impl.history.event.HistoryEvent;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventTypes;
 import org.camunda.bpm.engine.impl.history.producer.HistoryEventProducer;
@@ -28,11 +27,12 @@
  */
 public class ActivityInstanceEndListener extends HistoryExecutionListener {
 
-  public ActivityInstanceEndListener(HistoryEventProducer historyEventProducer, HistoryLevel historyLevel) {
-    super(historyEventProducer, historyLevel);
+  public ActivityInstanceEndListener(HistoryEventProducer historyEventProducer) {
+    super(historyEventProducer);
   }
 
   protected HistoryEvent createHistoryEvent(DelegateExecution execution) {
+    ensureHistoryLevelInitialized();
     if(historyLevel.isHistoryEventProduced(HistoryEventTypes.ACTIVITY_INSTANCE_END, execution)) {
       return eventProducer.createActivityInstanceEndEvt(execution);
     } else {

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/parser/ActivityInstanceStartListener.java
Patch:
@@ -17,7 +17,6 @@
 package org.camunda.bpm.engine.impl.history.parser;
 
 import org.camunda.bpm.engine.delegate.DelegateExecution;
-import org.camunda.bpm.engine.impl.history.HistoryLevel;
 import org.camunda.bpm.engine.impl.history.event.HistoryEvent;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventTypes;
 import org.camunda.bpm.engine.impl.history.producer.HistoryEventProducer;
@@ -28,11 +27,12 @@
  */
 public class ActivityInstanceStartListener extends HistoryExecutionListener {
 
-  public ActivityInstanceStartListener(HistoryEventProducer historyEventProducer, HistoryLevel historyLevel) {
-    super(historyEventProducer, historyLevel);
+  public ActivityInstanceStartListener(HistoryEventProducer historyEventProducer) {
+    super(historyEventProducer);
   }
 
   protected HistoryEvent createHistoryEvent(DelegateExecution execution) {
+    ensureHistoryLevelInitialized();
     if(historyLevel.isHistoryEventProduced(HistoryEventTypes.ACTIVITY_INSTANCE_START, execution)) {
       return eventProducer.createActivityInstanceStartEvt(execution);
     } else {

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/parser/ActivityInstanceUpdateListener.java
Patch:
@@ -17,7 +17,6 @@
 package org.camunda.bpm.engine.impl.history.parser;
 
 import org.camunda.bpm.engine.delegate.DelegateTask;
-import org.camunda.bpm.engine.impl.history.HistoryLevel;
 import org.camunda.bpm.engine.impl.history.event.HistoryEvent;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventTypes;
 import org.camunda.bpm.engine.impl.history.producer.HistoryEventProducer;
@@ -29,11 +28,12 @@
  */
 public class ActivityInstanceUpdateListener extends HistoryTaskListener {
 
-  public ActivityInstanceUpdateListener(HistoryEventProducer historyEventProducer, HistoryLevel historyLevel) {
-    super(historyEventProducer, historyLevel);
+  public ActivityInstanceUpdateListener(HistoryEventProducer historyEventProducer) {
+    super(historyEventProducer);
   }
 
   protected HistoryEvent createHistoryEvent(DelegateTask task, ExecutionEntity execution) {
+    ensureHistoryLevelInitialized();
     if(historyLevel.isHistoryEventProduced(HistoryEventTypes.ACTIVITY_INSTANCE_UPDATE, execution)) {
       return eventProducer.createActivityInstanceUpdateEvt(execution, task);
     } else {

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/parser/ProcessInstanceEndListener.java
Patch:
@@ -17,7 +17,6 @@
 package org.camunda.bpm.engine.impl.history.parser;
 
 import org.camunda.bpm.engine.delegate.DelegateExecution;
-import org.camunda.bpm.engine.impl.history.HistoryLevel;
 import org.camunda.bpm.engine.impl.history.event.HistoryEvent;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventTypes;
 import org.camunda.bpm.engine.impl.history.producer.HistoryEventProducer;
@@ -28,11 +27,12 @@
  */
 public class ProcessInstanceEndListener extends HistoryExecutionListener {
 
-  public ProcessInstanceEndListener(HistoryEventProducer historyEventProducer, HistoryLevel historyLevel) {
-    super(historyEventProducer, historyLevel);
+  public ProcessInstanceEndListener(HistoryEventProducer historyEventProducer) {
+    super(historyEventProducer);
   }
 
   protected HistoryEvent createHistoryEvent(DelegateExecution execution) {
+    ensureHistoryLevelInitialized();
     if(historyLevel.isHistoryEventProduced(HistoryEventTypes.PROCESS_INSTANCE_END, execution)) {
       return eventProducer.createProcessInstanceEndEvt(execution);
     } else {

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/parser/ProcessInstanceStartListener.java
Patch:
@@ -17,7 +17,6 @@
 package org.camunda.bpm.engine.impl.history.parser;
 
 import org.camunda.bpm.engine.delegate.DelegateExecution;
-import org.camunda.bpm.engine.impl.history.HistoryLevel;
 import org.camunda.bpm.engine.impl.history.event.HistoryEvent;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventTypes;
 import org.camunda.bpm.engine.impl.history.producer.HistoryEventProducer;
@@ -28,11 +27,12 @@
  */
 public class ProcessInstanceStartListener extends HistoryExecutionListener {
 
-  public ProcessInstanceStartListener(HistoryEventProducer historyEventProducer, HistoryLevel historyLevel) {
-    super(historyEventProducer, historyLevel);
+  public ProcessInstanceStartListener(HistoryEventProducer historyEventProducer) {
+    super(historyEventProducer);
   }
 
   protected HistoryEvent createHistoryEvent(DelegateExecution execution) {
+    ensureHistoryLevelInitialized();
     if(historyLevel.isHistoryEventProduced(HistoryEventTypes.PROCESS_INSTANCE_START, execution)) {
       return eventProducer.createProcessInstanceStartEvt(execution);
     } else {

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/parser/ProcessInstanceUpdateListener.java
Patch:
@@ -17,7 +17,6 @@
 package org.camunda.bpm.engine.impl.history.parser;
 
 import org.camunda.bpm.engine.delegate.DelegateExecution;
-import org.camunda.bpm.engine.impl.history.HistoryLevel;
 import org.camunda.bpm.engine.impl.history.event.HistoryEvent;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventTypes;
 import org.camunda.bpm.engine.impl.history.producer.HistoryEventProducer;
@@ -27,11 +26,12 @@
  */
 public class ProcessInstanceUpdateListener extends HistoryExecutionListener {
 
-  public ProcessInstanceUpdateListener(HistoryEventProducer historyEventProducer, HistoryLevel historyLevel) {
-    super(historyEventProducer, historyLevel);
+  public ProcessInstanceUpdateListener(HistoryEventProducer historyEventProducer) {
+    super(historyEventProducer);
   }
 
   protected HistoryEvent createHistoryEvent(DelegateExecution execution) {
+    ensureHistoryLevelInitialized();
     if(historyLevel.isHistoryEventProduced(HistoryEventTypes.PROCESS_INSTANCE_UPDATE, execution)) {
       return eventProducer.createProcessInstanceUpdateEvt(execution);
     } else {

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/transformer/CaseActivityInstanceCreateListener.java
Patch:
@@ -17,7 +17,6 @@
 package org.camunda.bpm.engine.impl.history.transformer;
 
 import org.camunda.bpm.engine.delegate.DelegateCaseExecution;
-import org.camunda.bpm.engine.impl.history.HistoryLevel;
 import org.camunda.bpm.engine.impl.history.event.HistoryEvent;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventTypes;
 import org.camunda.bpm.engine.impl.history.producer.CmmnHistoryEventProducer;
@@ -27,11 +26,12 @@
  */
 public class CaseActivityInstanceCreateListener extends HistoryCaseExecutionListener {
 
-  public CaseActivityInstanceCreateListener(CmmnHistoryEventProducer historyEventProducer, HistoryLevel historyLevel) {
-    super(historyEventProducer, historyLevel);
+  public CaseActivityInstanceCreateListener(CmmnHistoryEventProducer historyEventProducer) {
+    super(historyEventProducer);
   }
 
   protected HistoryEvent createHistoryEvent(DelegateCaseExecution caseExecution) {
+    ensureHistoryLevelInitialized();
     if (historyLevel.isHistoryEventProduced(HistoryEventTypes.CASE_ACTIVITY_INSTANCE_CREATE, caseExecution)) {
       return eventProducer.createCaseActivityInstanceCreateEvt(caseExecution);
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/transformer/CaseActivityInstanceEndListener.java
Patch:
@@ -17,7 +17,6 @@
 package org.camunda.bpm.engine.impl.history.transformer;
 
 import org.camunda.bpm.engine.delegate.DelegateCaseExecution;
-import org.camunda.bpm.engine.impl.history.HistoryLevel;
 import org.camunda.bpm.engine.impl.history.event.HistoryEvent;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventTypes;
 import org.camunda.bpm.engine.impl.history.producer.CmmnHistoryEventProducer;
@@ -27,11 +26,12 @@
  */
 public class CaseActivityInstanceEndListener extends HistoryCaseExecutionListener {
 
-  public CaseActivityInstanceEndListener(CmmnHistoryEventProducer historyEventProducer, HistoryLevel historyLevel) {
-    super(historyEventProducer, historyLevel);
+  public CaseActivityInstanceEndListener(CmmnHistoryEventProducer historyEventProducer) {
+    super(historyEventProducer);
   }
 
   protected HistoryEvent createHistoryEvent(DelegateCaseExecution caseExecution) {
+    ensureHistoryLevelInitialized();
     if (historyLevel.isHistoryEventProduced(HistoryEventTypes.CASE_ACTIVITY_INSTANCE_END, caseExecution)) {
       return eventProducer.createCaseActivityInstanceEndEvt(caseExecution);
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/transformer/CaseActivityInstanceUpdateListener.java
Patch:
@@ -17,7 +17,6 @@
 package org.camunda.bpm.engine.impl.history.transformer;
 
 import org.camunda.bpm.engine.delegate.DelegateCaseExecution;
-import org.camunda.bpm.engine.impl.history.HistoryLevel;
 import org.camunda.bpm.engine.impl.history.event.HistoryEvent;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventTypes;
 import org.camunda.bpm.engine.impl.history.producer.CmmnHistoryEventProducer;
@@ -27,11 +26,12 @@
  */
 public class CaseActivityInstanceUpdateListener extends HistoryCaseExecutionListener {
 
-  public CaseActivityInstanceUpdateListener(CmmnHistoryEventProducer historyEventProducer, HistoryLevel historyLevel) {
-    super(historyEventProducer, historyLevel);
+  public CaseActivityInstanceUpdateListener(CmmnHistoryEventProducer historyEventProducer) {
+    super(historyEventProducer);
   }
 
   protected HistoryEvent createHistoryEvent(DelegateCaseExecution caseExecution) {
+    ensureHistoryLevelInitialized();
     if (historyLevel.isHistoryEventProduced(HistoryEventTypes.CASE_ACTIVITY_INSTANCE_UPDATE, caseExecution)) {
       return eventProducer.createCaseActivityInstanceUpdateEvt(caseExecution);
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/transformer/CaseInstanceCloseListener.java
Patch:
@@ -17,7 +17,6 @@
 package org.camunda.bpm.engine.impl.history.transformer;
 
 import org.camunda.bpm.engine.delegate.DelegateCaseExecution;
-import org.camunda.bpm.engine.impl.history.HistoryLevel;
 import org.camunda.bpm.engine.impl.history.event.HistoryEvent;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventTypes;
 import org.camunda.bpm.engine.impl.history.producer.CmmnHistoryEventProducer;
@@ -27,11 +26,12 @@
  */
 public class CaseInstanceCloseListener extends HistoryCaseExecutionListener {
 
-  public CaseInstanceCloseListener(CmmnHistoryEventProducer historyEventProducer, HistoryLevel historyLevel) {
-    super(historyEventProducer, historyLevel);
+  public CaseInstanceCloseListener(CmmnHistoryEventProducer historyEventProducer) {
+    super(historyEventProducer);
   }
 
   protected HistoryEvent createHistoryEvent(DelegateCaseExecution caseExecution) {
+    ensureHistoryLevelInitialized();
     if (historyLevel.isHistoryEventProduced(HistoryEventTypes.CASE_INSTANCE_CLOSE, caseExecution)) {
       return eventProducer.createCaseInstanceCloseEvt(caseExecution);
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/transformer/CaseInstanceCreateListener.java
Patch:
@@ -17,7 +17,6 @@
 package org.camunda.bpm.engine.impl.history.transformer;
 
 import org.camunda.bpm.engine.delegate.DelegateCaseExecution;
-import org.camunda.bpm.engine.impl.history.HistoryLevel;
 import org.camunda.bpm.engine.impl.history.event.HistoryEvent;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventTypes;
 import org.camunda.bpm.engine.impl.history.producer.CmmnHistoryEventProducer;
@@ -27,11 +26,12 @@
  */
 public class CaseInstanceCreateListener extends HistoryCaseExecutionListener {
 
-  public CaseInstanceCreateListener(CmmnHistoryEventProducer historyEventProducer, HistoryLevel historyLevel) {
-    super(historyEventProducer, historyLevel);
+  public CaseInstanceCreateListener(CmmnHistoryEventProducer historyEventProducer) {
+    super(historyEventProducer);
   }
 
   protected HistoryEvent createHistoryEvent(DelegateCaseExecution caseExecution) {
+    ensureHistoryLevelInitialized();
     if (historyLevel.isHistoryEventProduced(HistoryEventTypes.CASE_INSTANCE_CREATE, caseExecution)) {
       return eventProducer.createCaseInstanceCreateEvt(caseExecution);
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/transformer/CaseInstanceUpdateListener.java
Patch:
@@ -17,7 +17,6 @@
 package org.camunda.bpm.engine.impl.history.transformer;
 
 import org.camunda.bpm.engine.delegate.DelegateCaseExecution;
-import org.camunda.bpm.engine.impl.history.HistoryLevel;
 import org.camunda.bpm.engine.impl.history.event.HistoryEvent;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventTypes;
 import org.camunda.bpm.engine.impl.history.producer.CmmnHistoryEventProducer;
@@ -27,11 +26,12 @@
  */
 public class CaseInstanceUpdateListener extends HistoryCaseExecutionListener {
 
-  public CaseInstanceUpdateListener(CmmnHistoryEventProducer historyEventProducer, HistoryLevel historyLevel) {
-    super(historyEventProducer, historyLevel);
+  public CaseInstanceUpdateListener(CmmnHistoryEventProducer historyEventProducer) {
+    super(historyEventProducer);
   }
 
   protected HistoryEvent createHistoryEvent(DelegateCaseExecution caseExecution) {
+    ensureHistoryLevelInitialized();
     if (historyLevel.isHistoryEventProduced(HistoryEventTypes.CASE_INSTANCE_UPDATE, caseExecution)) {
       return eventProducer.createCaseInstanceUpdateEvt(caseExecution);
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/auth/AuthorizationCommandChecker.java
Patch:
@@ -781,7 +781,7 @@ public void checkDeleteUserOperationLog(UserOperationLogEntry entry) {
     if (entry != null) {
       String category = entry.getCategory();
       String processDefinitionKey = entry.getProcessDefinitionKey();
-      if (category != null || processDefinitionKey != null
+      if (category != null || processDefinitionKey != null) {
         CompositePermissionCheck permissionCheck = null;
         if (category == null) {
           // case (3)

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/cleanup/HistoryCleanupStrategyConfigurationTest.java
Patch:
@@ -65,8 +65,10 @@ public void init() {
   @AfterClass
   public static void tearDown() {
     engineConfiguration
-      .setHistoryCleanupStrategy(null)
       .setHistoryRemovalTimeStrategy(null)
+      .initHistoryRemovalTime();
+    engineConfiguration
+      .setHistoryCleanupStrategy(null)
       .initHistoryCleanup();
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/ErrorEndEventActivityBehavior.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.camunda.bpm.engine.impl.bpmn.behavior;
 
+import org.camunda.bpm.engine.impl.bpmn.helper.BpmnExceptionHandler;
 import org.camunda.bpm.engine.impl.pvm.delegate.ActivityExecution;
 
 
@@ -32,7 +33,7 @@ public ErrorEndEventActivityBehavior(String errorCode) {
   }
 
   public void execute(ActivityExecution execution) throws Exception {
-    propagateError(errorCode, null, null, execution);
+    BpmnExceptionHandler.propagateError(errorCode, null, null, execution);
   }
 
   public String getErrorCode() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/PvmLogger.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.impl.ProcessEngineLogger;
-import org.camunda.bpm.engine.impl.core.variable.CoreVariableInstance;
 import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 import org.camunda.bpm.engine.impl.pvm.runtime.PvmExecutionImpl;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityInstanceStart.java
Patch:
@@ -39,6 +39,7 @@ protected PvmExecutionImpl eventNotificationsStarted(PvmExecutionImpl execution)
     execution.incrementSequenceCounter();
     execution.activityInstanceStarting();
     execution.enterActivityInstance();
+    execution.setTransition(null);
 
     return execution;
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/AuthorizationUserOperationLogTest.java
Patch:
@@ -91,7 +91,7 @@ public void testLogCreatedOnAuthorizationCreation() {
     assertEquals("testGroupId", entry.getNewValue());
   }
   
-  public void testLogCreatedOnAuthorizationUpdate() {
+  public void test1LogCreatedOnAuthorizationUpdate() {
     // given
     UserOperationLogQuery query = historyService.createUserOperationLogQuery();
     identityService.clearAuthentication();

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/ModificationExecutionAsyncTest.java
Patch:
@@ -149,7 +149,7 @@ public void restoreEngineSettings() {
 
   @After
   public void removeInstanceIds() {
-    helper.currentProcessInstances = new ArrayList<String>();
+    helper.currentProcessInstances = new ArrayList<>();
   }
 
   @After
@@ -772,7 +772,7 @@ public void testModificationJobsExecutionByJobExecutorWithAuthorizationEnabledAn
       Batch batch = helper.startAfterAsync("process1", 10, "user1", processDefinition.getId());
       helper.executeSeedJob(batch);
 
-      testRule.waitForJobExecutorToProcessAllJobs();
+      testRule.executeAvailableJobs();
 
       // then all process instances where modified
       for (String processInstanceId : helper.currentProcessInstances) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/SetRemovalTimeToHistoricBatchesBuilderImpl.java
Patch:
@@ -50,7 +50,7 @@ public SetRemovalTimeToHistoricBatchesBuilder byQuery(HistoricBatchQuery query)
   }
 
   public SetRemovalTimeToHistoricBatchesBuilder byIds(String... ids) {
-    this.ids = Arrays.asList(ids);
+    this.ids = ids != null ? Arrays.asList(ids) : null;
     return this;
   }
 

File: spring-boot-starter/starter/src/test/java/org/camunda/bpm/spring/boot/starter/property/ParsePropertiesHelper.java
Patch:
@@ -37,10 +37,12 @@ public static class TestConfig {
 
   protected MetricsProperty metrics;
   protected ApplicationProperty application;
+  protected WebappProperty webapp;
 
   @PostConstruct
   public void init() {
     metrics = properties.getMetrics();
     application = properties.getApplication();
+    webapp = properties.getWebapp();
   }
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/batch/creation/removaltime/SetRemovalTimeForHistoricBatchesBatchAuthorizationTest.java
Patch:
@@ -63,7 +63,7 @@ public static Collection<AuthorizationScenario[]> scenarios() {
   }
 
   @Test
-  @RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_AUDIT)
+  @RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_FULL)
   public void shouldAuthorizeSetRemovalTimeForHistoricBatchesBatch() {
     // given
     String batchId = engineRule.getHistoryService()

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/batch/creation/removaltime/SetRemovalTimeForHistoricDecisionInstancesBatchAuthorizationTest.java
Patch:
@@ -70,7 +70,7 @@ public static Collection<AuthorizationScenario[]> scenarios() {
   @Deployment(resources = {
     "org/camunda/bpm/engine/test/dmn/deployment/drdDish.dmn11.xml"
   })
-  @RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_AUDIT)
+  @RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_FULL)
   public void shouldAuthorizeSetRemovalTimeForHistoricDecisionInstancesBatch() {
     // given
     setupHistory();

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/SchemaLogRestService.java
Patch:
@@ -36,7 +36,7 @@
 @Produces(MediaType.APPLICATION_JSON)
 public interface SchemaLogRestService {
 
-  public static final String PATH = "/schema/update-log";
+  public static final String PATH = "/schema/log";
 
   @GET
   @Produces(MediaType.APPLICATION_JSON)

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/SchemaLogRestServiceQueryTest.java
Patch:
@@ -44,7 +44,7 @@
  * @author Miklas Boskamp
  *
  */
-public class SchemLogRestServiceQueryTest extends AbstractRestServiceTest {
+public class SchemaLogRestServiceQueryTest extends AbstractRestServiceTest {
 
   /**
    * 

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/task/impl/TaskResourceImpl.java
Patch:
@@ -99,7 +99,7 @@ public Response complete(CompleteTaskDto dto) {
     try {
       VariableMap variables = VariableValueDto.toMap(dto.getVariables(), engine, objectMapper);
       if (dto.isWithVariablesInReturn()) {
-        VariableMap taskVariables = taskService.completeWithVariablesInReturn(taskId, variables);
+        VariableMap taskVariables = taskService.completeWithVariablesInReturn(taskId, variables, false);
 
         Map<String, VariableValueDto> body = VariableValueDto.fromMap(taskVariables, true);
 
@@ -135,7 +135,7 @@ public Response submit(CompleteTaskDto dto) {
     try {
       VariableMap variables = VariableValueDto.toMap(dto.getVariables(), engine, objectMapper);
       if (dto.isWithVariablesInReturn()) {
-        VariableMap taskVariables = formService.submitTaskFormWithVariablesInReturn(taskId, variables);
+        VariableMap taskVariables = formService.submitTaskFormWithVariablesInReturn(taskId, variables, false);
 
         Map<String, VariableValueDto> body = VariableValueDto.fromMap(taskVariables, true);
         return Response

File: engine/src/main/java/org/camunda/bpm/engine/impl/FormServiceImpl.java
Patch:
@@ -88,11 +88,11 @@ public void submitTaskFormData(String taskId, Map<String, String> properties) {
   }
 
   public void submitTaskForm(String taskId, Map<String, Object> properties) {
-    commandExecutor.execute(new SubmitTaskFormCmd(taskId, properties, false));
+    commandExecutor.execute(new SubmitTaskFormCmd(taskId, properties, false, false));
   }
 
-  public VariableMap submitTaskFormWithVariablesInReturn(String taskId, Map<String, Object> properties) {
-    return commandExecutor.execute(new SubmitTaskFormCmd(taskId, properties, true));
+  public VariableMap submitTaskFormWithVariablesInReturn(String taskId, Map<String, Object> properties, boolean deserializeValues) {
+    return commandExecutor.execute(new SubmitTaskFormCmd(taskId, properties, true, deserializeValues));
   }
 
   public String getStartFormKey(String processDefinitionId) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/TaskServiceImpl.java
Patch:
@@ -174,11 +174,11 @@ public void complete(String taskId) {
   }
 
   public void complete(String taskId, Map<String, Object> variables) {
-    commandExecutor.execute(new CompleteTaskCmd(taskId, variables, false));
+    commandExecutor.execute(new CompleteTaskCmd(taskId, variables, false, false));
   }
 
-  public VariableMap completeWithVariablesInReturn(String taskId, Map<String, Object> variables) {
-    return commandExecutor.execute(new CompleteTaskCmd(taskId, variables, true));
+  public VariableMap completeWithVariablesInReturn(String taskId, Map<String, Object> variables, boolean deserializeValues) {
+    return commandExecutor.execute(new CompleteTaskCmd(taskId, variables, true, deserializeValues));
   }
 
   public void delegateTask(String taskId, String userId) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/CorrelateAllMessageCmd.java
Patch:
@@ -43,8 +43,8 @@ public class CorrelateAllMessageCmd extends AbstractCorrelateMessageCmd implemen
    *
    * @param messageCorrelationBuilderImpl
    */
-  public CorrelateAllMessageCmd(MessageCorrelationBuilderImpl messageCorrelationBuilderImpl, boolean collectVariables) {
-    super(messageCorrelationBuilderImpl, collectVariables);
+  public CorrelateAllMessageCmd(MessageCorrelationBuilderImpl messageCorrelationBuilderImpl, boolean collectVariables, boolean deserializeVariableValues) {
+    super(messageCorrelationBuilderImpl, collectVariables, deserializeVariableValues);
   }
 
   public List<MessageCorrelationResultImpl> execute(final CommandContext commandContext) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/CorrelateMessageCmd.java
Patch:
@@ -44,8 +44,8 @@ public class CorrelateMessageCmd extends AbstractCorrelateMessageCmd implements
    *
    * @param messageCorrelationBuilderImpl
    */
-  public CorrelateMessageCmd(MessageCorrelationBuilderImpl messageCorrelationBuilderImpl, boolean collectVariables) {
-    super(messageCorrelationBuilderImpl, collectVariables);
+  public CorrelateMessageCmd(MessageCorrelationBuilderImpl messageCorrelationBuilderImpl, boolean collectVariables, boolean deserializeVariableValues) {
+    super(messageCorrelationBuilderImpl, collectVariables, deserializeVariableValues);
   }
 
   public MessageCorrelationResultImpl execute(final CommandContext commandContext) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ResolveTaskCmd.java
Patch:
@@ -30,7 +30,7 @@ public class ResolveTaskCmd extends CompleteTaskCmd {
   private static final long serialVersionUID = 1L;
 
   public ResolveTaskCmd(String taskId, Map<String, Object> variables) {
-    super(taskId, variables, false);
+    super(taskId, variables, false, false);
   }
 
   @Override

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/CompetingTransactionsOptimisticLockingTestWithoutBatchProcessing.java
Patch:
@@ -61,7 +61,7 @@ public void run() {
       try {
         processEngineConfiguration
           .getCommandExecutorTxRequired()
-          .execute(new ControlledCommand(activeThread, new CompleteTaskCmd(taskId, null, false)));
+          .execute(new ControlledCommand(activeThread, new CompleteTaskCmd(taskId, null)));
 
       } catch (ProcessEngineException e) {
         this.exception = e;

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeNonHierarchicalTest.java
Patch:
@@ -628,7 +628,7 @@ public void shouldSetRemovalTime_Incident_WithPreservedCreateTime() {
     historicIncident = historyService.createHistoricIncidentQuery().singleResult();
 
     // then
-    assertThat(historicIncident.getRemovalTime()).isEqualTo(CREATE_TIME);
+    assertThat(historicIncident.getCreateTime()).isEqualTo(CREATE_TIME);
   }
 
   @Test

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ResolveTaskCmd.java
Patch:
@@ -30,7 +30,7 @@ public class ResolveTaskCmd extends CompleteTaskCmd {
   private static final long serialVersionUID = 1L;
 
   public ResolveTaskCmd(String taskId, Map<String, Object> variables) {
-    super(taskId, variables);
+    super(taskId, variables, false);
   }
 
   @Override

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/CompetingTransactionsOptimisticLockingTestWithoutBatchProcessing.java
Patch:
@@ -61,7 +61,7 @@ public void run() {
       try {
         processEngineConfiguration
           .getCommandExecutorTxRequired()
-          .execute(new ControlledCommand(activeThread, new CompleteTaskCmd(taskId, null)));
+          .execute(new ControlledCommand(activeThread, new CompleteTaskCmd(taskId, null, false)));
 
       } catch (ProcessEngineException e) {
         this.exception = e;

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/externaltask/LockedExternalTaskDto.java
Patch:
@@ -123,15 +123,15 @@ public static LockedExternalTaskDto fromLockedExternalTask(LockedExternalTask ta
     dto.topicName = task.getTopicName();
     dto.workerId = task.getWorkerId();
     dto.tenantId = task.getTenantId();
-    dto.variables = VariableValueDto.fromVariableMap(task.getVariables());
+    dto.variables = VariableValueDto.fromMap(task.getVariables());
     dto.priority = task.getPriority();
     dto.businessKey = task.getBusinessKey();
 
     return dto;
   }
 
   public static List<LockedExternalTaskDto> fromLockedExternalTasks(List<LockedExternalTask> tasks) {
-    List<LockedExternalTaskDto> dtos = new ArrayList<LockedExternalTaskDto>();
+    List<LockedExternalTaskDto> dtos = new ArrayList<>();
 
     for (LockedExternalTask task : tasks) {
       dtos.add(LockedExternalTaskDto.fromLockedExternalTask(task));

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/impl/DecisionDefinitionResourceImpl.java
Patch:
@@ -170,7 +170,7 @@ public void updateHistoryTimeToLive(HistoryTimeToLiveDto historyTimeToLiveDto) {
   }
 
   protected List<Map<String, VariableValueDto>> createDecisionResultDto(DmnDecisionResult decisionResult) {
-    List<Map<String, VariableValueDto>> dto = new ArrayList<Map<String, VariableValueDto>>();
+    List<Map<String, VariableValueDto>> dto = new ArrayList<>();
 
     for (DmnDecisionResultEntries entries : decisionResult) {
       Map<String, VariableValueDto> resultEntriesDto = createResultEntriesDto(entries);
@@ -188,7 +188,7 @@ protected Map<String, VariableValueDto> createResultEntriesDto(DmnDecisionResult
       variableMap.putValueTyped(key, typedValue);
     }
 
-    return VariableValueDto.fromVariableMap(variableMap);
+    return VariableValueDto.fromMap(variableMap);
   }
 
 }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/impl/ProcessDefinitionResourceImpl.java
Patch:
@@ -240,7 +240,7 @@ public List<StatisticsResultDto> getActivityStatistics(Boolean includeFailedJobs
 
     List<ActivityStatistics> queryResults = query.list();
 
-    List<StatisticsResultDto> results = new ArrayList<StatisticsResultDto>();
+    List<StatisticsResultDto> results = new ArrayList<>();
     for (ActivityStatistics queryResult : queryResults) {
       StatisticsResultDto dto = ActivityStatisticsResultDto.fromActivityStatistics(queryResult);
       results.add(dto);
@@ -374,7 +374,7 @@ public Map<String, VariableValueDto> getFormVariables(String variableNames, bool
 
     VariableMap startFormVariables = formService.getStartFormVariables(processDefinitionId, formVariables, deserializeValues);
 
-    return VariableValueDto.fromVariableMap(startFormVariables);
+    return VariableValueDto.fromMap(startFormVariables);
   }
 
   @Override

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/MessageRestServiceTest.java
Patch:
@@ -39,6 +39,7 @@
 import org.camunda.bpm.engine.rest.helper.EqualsMap;
 import org.camunda.bpm.engine.rest.helper.ErrorMessageHelper;
 import org.camunda.bpm.engine.rest.helper.MockProvider;
+import org.camunda.bpm.engine.rest.helper.VariableTypeHelper;
 import org.camunda.bpm.engine.rest.util.VariablesBuilder;
 import org.camunda.bpm.engine.rest.util.container.TestContainerRule;
 import org.camunda.bpm.engine.runtime.MessageCorrelationBuilder;
@@ -1254,7 +1255,7 @@ protected void checkVariablesInResult(String content, int idx) {
       String variablePath = "[" + idx + "].variables." + variableName;
       assertEquals(MockProvider.FORMAT_APPLICATION_JSON, from(content).getMap(variablePath + ".valueInfo").get("serializationDataFormat"));
       assertEquals(MockProvider.EXAMPLE_VARIABLE_INSTANCE_SERIALIZED_VALUE, from(content).get(variablePath + ".value"));
-      assertEquals(ValueType.OBJECT.getName(), from(content).get(variablePath + ".type"));
+      assertEquals(VariableTypeHelper.toExpectedValueTypeName(ValueType.OBJECT), from(content).get(variablePath + ".type"));
     }
 
     assertEquals(ArrayList.class.getName(),

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/authorization/impl/AuthorizationResourceImpl.java
Patch:
@@ -55,7 +55,7 @@ public AuthorizationDto getAuthorization(UriInfo context) {
 
     Authorization dbAuthorization = getDbAuthorization();
 
-    return AuthorizationDto.fromAuthorization(dbAuthorization);
+    return AuthorizationDto.fromAuthorization(dbAuthorization, processEngine.getProcessEngineConfiguration());
 
   }
 
@@ -68,7 +68,7 @@ public void updateAuthorization(AuthorizationDto dto) {
     // get db auth
     Authorization dbAuthorization = getDbAuthorization();
     // copy values from dto
-    AuthorizationDto.update(dto, dbAuthorization);
+    AuthorizationDto.update(dto, dbAuthorization, processEngine.getProcessEngineConfiguration());
     // save
     authorizationService.saveAuthorization(dbAuthorization);
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricJobLogTest.java
Patch:
@@ -31,7 +31,6 @@
 import org.camunda.bpm.engine.impl.jobexecutor.TimerStartEventSubprocessJobHandler;
 import org.camunda.bpm.engine.impl.persistence.entity.ByteArrayEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.HistoricJobLogEventEntity;
-import org.camunda.bpm.engine.impl.persistence.entity.JobEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.MessageEntity;
 import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
 import org.camunda.bpm.engine.impl.util.ClockUtil;
@@ -1257,7 +1256,7 @@ public void testThrowExceptionMessageTruncation() {
         .singleResult();
 
     assertNotNull(failedHistoricJobLog);
-    assertEquals(exceptionMessage.substring(0, JobEntity.MAX_EXCEPTION_MESSAGE_LENGTH),
+    assertEquals(exceptionMessage.substring(0, StringUtil.DB_MAX_STRING_LENGTH),
         failedHistoricJobLog.getJobExceptionMessage());
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/history/UserOperationLogEntry.java
Patch:
@@ -105,6 +105,7 @@ public interface UserOperationLogEntry {
 
   public static String OPERATION_TYPE_CREATE_HISTORY_CLEANUP_JOB = "CreateHistoryCleanupJobs";
   public static String OPERATION_TYPE_UPDATE_HISTORY_TIME_TO_LIVE = "UpdateHistoryTimeToLive";
+  public static String OPERATION_TYPE_DELETE_HISTORY = "DeleteHistory";
 
   public static String OPERATION_TYPE_MODIFY_PROCESS_INSTANCE = "ModifyProcessInstance";
   public static String OPERATION_TYPE_RESTART_PROCESS_INSTANCE  = "RestartProcessInstance";
@@ -116,7 +117,6 @@ public interface UserOperationLogEntry {
 
   public static String OPERATION_TYPE_REMOVE_VARIABLE = "RemoveVariable";
   public static String OPERATION_TYPE_MODIFY_VARIABLE = "ModifyVariable";
-  public static String OPERATION_TYPE_DELETE_VARIABLE_HISTORY = "DeleteVariableHistory";
 
   public static String OPERATION_TYPE_SUSPEND_BATCH = "SuspendBatch";
   public static String OPERATION_TYPE_ACTIVATE_BATCH = "ActivateBatch";

File: engine/src/main/java/org/camunda/bpm/engine/impl/batch/history/DeleteHistoricBatchCmd.java
Patch:
@@ -55,7 +55,7 @@ protected void checkAccess(CommandContext commandContext, HistoricBatchEntity ba
 
   protected void writeUserOperationLog(CommandContext commandContext) {
     commandContext.getOperationLogManager()
-      .logBatchOperation(UserOperationLogEntry.OPERATION_TYPE_DELETE, batchId, new PropertyChange("deleteReason", null, null));
+      .logBatchOperation(UserOperationLogEntry.OPERATION_TYPE_DELETE_HISTORY, batchId, new PropertyChange("deleteReason", null, null));
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeleteHistoricProcessInstancesCmd.java
Patch:
@@ -101,13 +101,12 @@ public List<HistoricProcessInstance> call() throws Exception {
 
   protected void writeUserOperationLog(CommandContext commandContext, int numInstances) {
 
-    List<PropertyChange> propertyChanges = new ArrayList<PropertyChange>();
+    List<PropertyChange> propertyChanges = new ArrayList<>();
     propertyChanges.add(new PropertyChange("nrOfInstances", null, numInstances));
     propertyChanges.add(new PropertyChange("async", null, false));
-    propertyChanges.add(new PropertyChange("type", null, "history"));
 
     commandContext.getOperationLogManager()
-      .logProcessInstanceOperation(UserOperationLogEntry.OPERATION_TYPE_DELETE,
+      .logProcessInstanceOperation(UserOperationLogEntry.OPERATION_TYPE_DELETE_HISTORY,
         null,
         null,
         null,

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeleteHistoricTaskInstanceCmd.java
Patch:
@@ -60,13 +60,12 @@ public Object execute(CommandContext commandContext) {
   }
 
   protected void writeUserOperationLog(CommandContext commandContext) {
-    List<PropertyChange> propertyChanges = new ArrayList<PropertyChange>();
+    List<PropertyChange> propertyChanges = new ArrayList<>();
     propertyChanges.add(new PropertyChange("nrOfInstances", null, 1));
     propertyChanges.add(new PropertyChange("async", null, false));
-    propertyChanges.add(new PropertyChange("type", null, "history"));
 
     commandContext.getOperationLogManager()
-      .logTaskOperations(UserOperationLogEntry.OPERATION_TYPE_DELETE,
+      .logTaskOperations(UserOperationLogEntry.OPERATION_TYPE_DELETE_HISTORY,
         taskId,
         propertyChanges,
         UserOperationLogEntry.CATEGORY_OPERATOR);

File: engine/src/main/java/org/camunda/bpm/engine/impl/dmn/cmd/DeleteHistoricDecisionInstanceByDefinitionIdCmd.java
Patch:
@@ -70,10 +70,9 @@ protected void writeUserOperationLog(CommandContext commandContext, long numInst
     List<PropertyChange> propertyChanges = new ArrayList<PropertyChange>();
     propertyChanges.add(new PropertyChange("nrOfInstances", null, numInstances));
     propertyChanges.add(new PropertyChange("async", null, false));
-    propertyChanges.add(new PropertyChange("type", null, "history"));
 
     commandContext.getOperationLogManager()
-      .logDecisionInstanceOperation(UserOperationLogEntry.OPERATION_TYPE_DELETE, propertyChanges);
+      .logDecisionInstanceOperation(UserOperationLogEntry.OPERATION_TYPE_DELETE_HISTORY, propertyChanges);
   }
 
   protected long getDecisionInstanceCount(CommandContext commandContext) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/dmn/cmd/DeleteHistoricDecisionInstanceByInstanceIdCmd.java
Patch:
@@ -68,8 +68,7 @@ protected void writeUserOperationLog(CommandContext commandContext) {
     List<PropertyChange> propertyChanges = new ArrayList<PropertyChange>();
     propertyChanges.add(new PropertyChange("nrOfInstances", null, 1));
     propertyChanges.add(new PropertyChange("async", null, false));
-    propertyChanges.add(new PropertyChange("type", null, "history"));
 
-    commandContext.getOperationLogManager().logDecisionInstanceOperation(UserOperationLogEntry.OPERATION_TYPE_DELETE, propertyChanges);
+    commandContext.getOperationLogManager().logDecisionInstanceOperation(UserOperationLogEntry.OPERATION_TYPE_DELETE_HISTORY, propertyChanges);
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/dmn/cmd/DeleteHistoricDecisionInstancesBatchCmd.java
Patch:
@@ -98,11 +98,10 @@ protected void writeUserOperationLog(CommandContext commandContext, int numInsta
     List<PropertyChange> propertyChanges = new ArrayList<PropertyChange>();
     propertyChanges.add(new PropertyChange("nrOfInstances", null, numInstances));
     propertyChanges.add(new PropertyChange("async", null, true));
-    propertyChanges.add(new PropertyChange("type", null, "history"));
     propertyChanges.add(new PropertyChange("deleteReason", null, deleteReason));
 
     commandContext.getOperationLogManager()
-      .logDecisionInstanceOperation(UserOperationLogEntry.OPERATION_TYPE_DELETE, propertyChanges);
+      .logDecisionInstanceOperation(UserOperationLogEntry.OPERATION_TYPE_DELETE_HISTORY, propertyChanges);
   }
 
   protected BatchConfiguration getAbstractIdsBatchConfiguration(List<String> processInstanceIds) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/dmn/cmd/DeleteHistoricDecisionInstancesBulkCmd.java
Patch:
@@ -59,9 +59,8 @@ protected void writeUserOperationLog(CommandContext commandContext, int numInsta
     List<PropertyChange> propertyChanges = new ArrayList<PropertyChange>();
     propertyChanges.add(new PropertyChange("nrOfInstances", null, numInstances));
     propertyChanges.add(new PropertyChange("async", null, false));
-    propertyChanges.add(new PropertyChange("type", null, "history"));
 
     commandContext.getOperationLogManager()
-      .logDecisionInstanceOperation(UserOperationLogEntry.OPERATION_TYPE_DELETE, propertyChanges);
+      .logDecisionInstanceOperation(UserOperationLogEntry.OPERATION_TYPE_DELETE_HISTORY, propertyChanges);
   }
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/batch/DeleteHistoricBatchAuthorizationTest.java
Patch:
@@ -46,7 +46,7 @@
 import java.util.List;
 
 import static org.camunda.bpm.engine.history.UserOperationLogEntry.CATEGORY_OPERATOR;
-import static org.camunda.bpm.engine.history.UserOperationLogEntry.OPERATION_TYPE_DELETE;
+import static org.camunda.bpm.engine.history.UserOperationLogEntry.OPERATION_TYPE_DELETE_HISTORY;
 import static org.camunda.bpm.engine.test.api.authorization.util.AuthorizationScenario.scenario;
 import static org.camunda.bpm.engine.test.api.authorization.util.AuthorizationSpec.grant;
 import static org.junit.Assert.assertEquals;
@@ -139,7 +139,7 @@ public void testDeleteBatch() {
 
       List<UserOperationLogEntry> userOperationLogEntries = engineRule.getHistoryService()
         .createUserOperationLogQuery()
-        .operationType(OPERATION_TYPE_DELETE)
+        .operationType(OPERATION_TYPE_DELETE_HISTORY)
         .list();
 
       assertEquals(1, userOperationLogEntries.size());

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/batch/DeleteHistoricProcessInstancesBatchAuthorizationTest.java
Patch:
@@ -52,7 +52,7 @@
 @RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_AUDIT)
 public class DeleteHistoricProcessInstancesBatchAuthorizationTest extends AbstractBatchAuthorizationTest {
 
-  protected static final long BATCH_OPERATIONS = 4;
+  protected static final long BATCH_OPERATIONS = 3;
   @Rule
   public RuleChain ruleChain = RuleChain.outerRule(engineRule).around(authRule).around(testHelper);
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/BulkHistoryDeleteTest.java
Patch:
@@ -72,7 +72,7 @@
 import java.util.Map;
 
 import static org.camunda.bpm.engine.history.UserOperationLogEntry.CATEGORY_OPERATOR;
-import static org.camunda.bpm.engine.history.UserOperationLogEntry.OPERATION_TYPE_DELETE;
+import static org.camunda.bpm.engine.history.UserOperationLogEntry.OPERATION_TYPE_DELETE_HISTORY;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
@@ -429,7 +429,7 @@ public void testCleanupHistoryDecisionData() {
 
 
     List<UserOperationLogEntry> userOperationLogEntries = historyService.createUserOperationLogQuery()
-      .operationType(OPERATION_TYPE_DELETE)
+      .operationType(OPERATION_TYPE_DELETE_HISTORY)
       .property("nrOfInstances")
       .list();
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/identity/CustomPasswordPolicyTest.java
Patch:
@@ -30,7 +30,6 @@
 import org.camunda.bpm.engine.test.util.ProvidedProcessEngineRule;
 import org.junit.After;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
@@ -98,7 +97,6 @@ public void testCustomPasswordPolicyWithNonCompliantPassword() {
     assertThat(identityService.createUserQuery().userId(user.getId()).count(), is(0L));
   }
 
-  @Ignore("CAM-10182")
   @Test
   public void shouldGetPasswordPolicy() {
     // given
@@ -109,5 +107,4 @@ public void shouldGetPasswordPolicy() {
     // when
     assertThat(passwordPolicy, notNullValue());
   }
-
 }
\ No newline at end of file

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/HistoryServiceAsyncOperationsTest.java
Patch:
@@ -130,7 +130,7 @@ public void testDeleteHistoryProcessInstancesAsyncWithFake() throws Exception {
     List<Exception> exceptions = executeBatchJobs(batch);
 
     //then
-    assertThat(exceptions.size(), is(1));
+    assertThat(exceptions.size(), is(0));
     assertHistoricBatchExists(testRule);
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/RuntimeServiceAsyncOperationsTest.java
Patch:
@@ -186,9 +186,9 @@ public void testDeleteProcessInstancesAsyncWithFake() throws Exception {
     List<Exception> exceptions = executeBatchJobs(batch);
 
     // then
-    assertEquals(1, exceptions.size());
+    assertEquals(0, exceptions.size());
 
-    assertThat(managementService.createJobQuery().withException().list().size(), is(1));
+    assertThat(managementService.createJobQuery().withException().list().size(), is(0));
 
     processIds.remove("aFake");
     assertHistoricTaskDeletionPresent(processIds, TESTING_INSTANCE_DELETE, testRule);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/batch/DeleteHistoricProcessInstancesBatchCmd.java
Patch:
@@ -123,7 +123,7 @@ protected void writeUserOperationLog(CommandContext commandContext,
 
   @Override
   protected BatchConfiguration getAbstractIdsBatchConfiguration(List<String> processInstanceIds) {
-    return new BatchConfiguration(processInstanceIds, true);
+    return new BatchConfiguration(processInstanceIds, false);
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/batch/DeleteProcessInstanceBatchCmd.java
Patch:
@@ -102,7 +102,7 @@ public Batch execute(CommandContext commandContext) {
   }
 
   protected BatchConfiguration getAbstractIdsBatchConfiguration(List<String> processInstanceIds) {
-    return new DeleteProcessInstanceBatchConfiguration(processInstanceIds, deleteReason, skipCustomListeners, skipSubprocesses, true);
+    return new DeleteProcessInstanceBatchConfiguration(processInstanceIds, deleteReason, skipCustomListeners, skipSubprocesses, false);
   }
 
   protected BatchJobHandler<DeleteProcessInstanceBatchConfiguration> getBatchJobHandler(ProcessEngineConfigurationImpl processEngineConfiguration) {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/identity/CustomPasswordPolicyTest.java
Patch:
@@ -57,7 +57,7 @@ public void init() {
   @After
   public void tearDown() {
     // reset configuration
-    processEngineConfiguration.setPasswordPolicy(new DefaultPasswordPolicyImpl());
+    processEngineConfiguration.setPasswordPolicy(null);
     processEngineConfiguration.setDisablePasswordPolicy(true);
     // reset database
     identityService.deleteUser("user");

File: engine/src/main/java/org/camunda/bpm/engine/history/UserOperationLogEntry.java
Patch:
@@ -178,6 +178,9 @@ public interface UserOperationLogEntry {
    * created with a common operationId. This allows grouping multiple entries which are part of a composite operation.
    */
   String getOperationId();
+  
+  /** External task reference. */
+  String getExternalTaskId();
 
   /**
    * Type of this operation, like create, assign, claim and so on.

File: engine/src/main/java/org/camunda/bpm/engine/history/UserOperationLogQuery.java
Patch:
@@ -104,6 +104,9 @@ public interface UserOperationLogQuery extends Query<UserOperationLogQuery, User
    * which will be logged as separate {@link UserOperationLogEntry OperationLogEntries} with the same 'operationId'
    * */
   UserOperationLogQuery operationId(String operationId);
+  
+  /** Query entries which are existing for the external task. */
+  UserOperationLogQuery externalTaskId(String externalTaskId);
 
   /** Query entries that changed a property. */
   UserOperationLogQuery property(String property);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AbstractSetExternalTaskRetriesCmd.java
Patch:
@@ -104,7 +104,7 @@ protected void writeUserOperationLog(CommandContext commandContext, int retries,
     propertyChanges.add(new PropertyChange("async", null, async));
     propertyChanges.add(new PropertyChange("retries", null, retries));
 
-    commandContext.getOperationLogManager().logProcessInstanceOperation(UserOperationLogEntry.OPERATION_TYPE_SET_EXTERNAL_TASK_RETRIES, null, null, null,
-        propertyChanges);
+    commandContext.getOperationLogManager().logExternalTaskOperation(
+        UserOperationLogEntry.OPERATION_TYPE_SET_EXTERNAL_TASK_RETRIES, null, propertyChanges);
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AbstractSetJobsRetriesBatchCmd.java
Patch:
@@ -79,7 +79,9 @@ protected void writeUserOperationLog(CommandContext commandContext,
     propertyChanges.add(new PropertyChange("retries", null, retries));
 
     commandContext.getOperationLogManager()
-        .logProcessInstanceOperation(UserOperationLogEntry.OPERATION_TYPE_SET_JOB_RETRIES,
+        .logJobOperation(UserOperationLogEntry.OPERATION_TYPE_SET_JOB_RETRIES,
+            null,
+            null,
             null,
             null,
             null,

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -327,6 +327,7 @@ protected void initUserOperationLogEvent(UserOperationLogEntryEventEntity evt, U
     evt.setCategory(contextEntry.getCategory());
     evt.setTimestamp(ClockUtil.getCurrentTime());
     evt.setRootProcessInstanceId(contextEntry.getRootProcessInstanceId());
+    evt.setExternalTaskId(contextEntry.getExternalTaskId());
 
     if (isHistoryRemovalTimeStrategyStart()) {
       provideRemovalTime(evt);

File: engine/src/main/java/org/camunda/bpm/engine/ProcessEngineConfiguration.java
Patch:
@@ -264,7 +264,7 @@ public abstract class ProcessEngineConfiguration {
   /**
    * configuration of password policy
    */
-  protected boolean disablePasswordPolicy;
+  protected boolean disablePasswordPolicy = true;
   protected PasswordPolicy passwordPolicy;
 
   /**

File: engine/src/main/java/org/camunda/bpm/engine/impl/test/ResourceProcessEngineTestCase.java
Patch:
@@ -43,7 +43,6 @@ protected void closeDownProcessEngine() {
   protected void initializeProcessEngine() {
     ProcessEngineConfigurationImpl processEngineConfig = (ProcessEngineConfigurationImpl) ProcessEngineConfiguration
         .createProcessEngineConfigurationFromResource(engineConfigurationResource);
-    processEngineConfig.setDisablePasswordPolicy(true);
     processEngine = processEngineConfig.buildProcessEngine();
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/util/ProcessEngineBootstrapRule.java
Patch:
@@ -43,7 +43,6 @@ public ProcessEngineBootstrapRule(String configurationResource) {
   public ProcessEngine bootstrapEngine(String configurationResource) {
     ProcessEngineConfigurationImpl processEngineConfiguration = (ProcessEngineConfigurationImpl) ProcessEngineConfiguration
       .createProcessEngineConfigurationFromResource(configurationResource);
-    processEngineConfiguration.setDisablePasswordPolicy(true);
     configureEngine(processEngineConfiguration);
     return processEngineConfiguration.buildProcessEngine();
   }

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/PasswordPolicyServiceQueryTest.java
Patch:
@@ -90,7 +90,6 @@ public void testGetPolicyNoPolicyConfigured() {
     .then()
       .expect()
         .statusCode(Status.NOT_FOUND.getStatusCode())
-        .body("policy", equalTo("No password policy is configured."))
     .when()
       .get(QUERY_URL);
   }

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/PasswordPolicyServiceQueryTest.java
Patch:
@@ -89,7 +89,7 @@ public void testGetPolicyNoPolicyConfigured() {
     given()
     .then()
       .expect()
-        .statusCode(Status.OK.getStatusCode())
+        .statusCode(Status.NOT_FOUND.getStatusCode())
         .body("policy", equalTo("No password policy is configured."))
     .when()
       .get(QUERY_URL);

File: engine/src/main/java/org/camunda/bpm/engine/identity/PasswordPolicyRule.java
Patch:
@@ -37,7 +37,7 @@ public interface PasswordPolicyRule {
   /**
    * Additional parameter that can be used to display a meaningful description.
    * 
-   * @return a map of parameter
+   * @return a map of parameters
    */
   Map<String, String> getParameters();
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/identity/DefaultPasswordPolicyImpl.java
Patch:
@@ -25,6 +25,8 @@
  * @author Miklas Boskamp
  */
 public class DefaultPasswordPolicyImpl implements PasswordPolicy {
+  
+  protected static final String PLACEHOLDER_PREFIX = "PASSWORD_POLICY_";
 
   // password length
   public static final int MIN_LENGTH = 10;

File: engine/src/main/java/org/camunda/bpm/engine/impl/identity/PasswordPolicyDigitRuleImpl.java
Patch:
@@ -25,7 +25,7 @@
  */
 public class PasswordPolicyDigitRuleImpl implements PasswordPolicyRule {
 
-  public static final String PLACEHOLDER = "DIGIT";
+  public static final String PLACEHOLDER = DefaultPasswordPolicyImpl.PLACEHOLDER_PREFIX + "DIGIT";
   
   protected int minDigit;
 
@@ -44,7 +44,7 @@ public Map<String, String> getParameters() {
     parameter.put("minDigit", "" + this.minDigit);
     return parameter;
   }
-
+  
   @Override
   public boolean execute(String password) {
     int digitCount = 0;

File: engine/src/main/java/org/camunda/bpm/engine/impl/identity/PasswordPolicyLengthRuleImpl.java
Patch:
@@ -25,7 +25,7 @@
  */
 public class PasswordPolicyLengthRuleImpl implements PasswordPolicyRule {
 
-  public static final String PLACEHOLDER = "LENGTH";
+  public static final String PLACEHOLDER = DefaultPasswordPolicyImpl.PLACEHOLDER_PREFIX + "LENGTH";
   
   protected int minLength;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/identity/PasswordPolicyLowerCaseRuleImpl.java
Patch:
@@ -25,7 +25,7 @@
  */
 public class PasswordPolicyLowerCaseRuleImpl implements PasswordPolicyRule {
 
-  public static final String PLACEHOLDER = "LOWERCASE";
+  public static final String PLACEHOLDER = DefaultPasswordPolicyImpl.PLACEHOLDER_PREFIX + "LOWERCASE";
   
   protected int minLowerCase;
   

File: engine/src/main/java/org/camunda/bpm/engine/impl/identity/PasswordPolicySpecialCharacterRuleImpl.java
Patch:
@@ -26,7 +26,7 @@
 public class PasswordPolicySpecialCharacterRuleImpl implements PasswordPolicyRule {
 
   public static final String SPECIALCHARACTERS = " !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
-  public static final String PLACEHOLDER = "SPECIAL";
+  public static final String PLACEHOLDER = DefaultPasswordPolicyImpl.PLACEHOLDER_PREFIX + "SPECIAL";
 
   protected int minSpecial;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/identity/PasswordPolicyUpperCaseRuleImpl.java
Patch:
@@ -25,7 +25,7 @@
  */
 public class PasswordPolicyUpperCaseRuleImpl implements PasswordPolicyRule {
 
-  public static final String PLACEHOLDER = "UPPERCASE";
+  public static final String PLACEHOLDER = DefaultPasswordPolicyImpl.PLACEHOLDER_PREFIX + "UPPERCASE";
   
   protected int minUpperCase;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobManager.java
Patch:
@@ -94,7 +94,7 @@ public void schedule(TimerEntity timer) {
   }
 
   public void reschedule(JobEntity jobEntity, Date newDuedate) {
-    jobEntity.init(Context.getCommandContext());
+    ((EverLivingJobEntity)jobEntity).init(Context.getCommandContext(), true);
     jobEntity.setSuspensionState(SuspensionState.ACTIVE.getStateCode());
     jobEntity.setDuedate(newDuedate);
     hintJobExecutorIfNeeded(jobEntity, newDuedate);

File: engine/src/main/java/org/camunda/bpm/engine/impl/test/AbstractProcessEngineTestCase.java
Patch:
@@ -147,7 +147,7 @@ public void runBare() throws Throwable {
     }
   }
 
-  private void deleteHistoryCleanupJobs() {
+  protected void deleteHistoryCleanupJobs() {
     final List<Job> jobs = historyService.findHistoryCleanupJobs();
     for (final Job job: jobs) {
       processEngineConfiguration.getCommandExecutorTxRequired().execute(new Command<Void>() {

File: spring-boot-starter/starter-client/external-task-client-java-spring/src/main/java/org/camunda/bpm/client/spring/EnableTaskSubscription.java
Patch:
@@ -31,5 +31,4 @@
 
   String defaultSerializationFormat() default NULL_VALUE_STRING;
 
-  boolean defaultExternalTaskRegistration() default true;
 }

File: spring-boot-starter/starter-client/external-task-client-java-spring/src/main/java/org/camunda/bpm/client/spring/TaskSubscriptionConfiguration.java
Patch:
@@ -24,7 +24,7 @@ public String[] selectImports(AnnotationMetadata importingClassMetadata) {
     AnnotationAttributes enableTaskSubscription = ClientRegistrar.getEnableTaskSubscription(importingClassMetadata);
     List<String> imports = new ArrayList<>();
 
-    if (ClientRegistrar.isDefaultExternalTaskRegistration(enableTaskSubscription)) {
+    if (!ClientRegistrar.getDisableDefaultExternalTaskRegistration(importingClassMetadata).isPresent()) {
       imports.add(PostProcessorConfig.class.getName());
     }
 

File: spring-boot-starter/starter-client/external-task-client-java-starter/src/main/java/org/camunda/bpm/client/spring/boot/starter/CamundaBpmClientAutoConfiguration.java
Patch:
@@ -1,5 +1,6 @@
 package org.camunda.bpm.client.spring.boot.starter;
 
+import org.camunda.bpm.client.spring.DisableDefaultExternalTaskRegistration;
 import org.camunda.bpm.client.spring.EnableTaskSubscription;
 import org.camunda.bpm.client.spring.boot.starter.CamundaBpmClientAutoConfiguration.PropertiesAwareClientRegistrar;
 import org.camunda.bpm.client.spring.boot.starter.task.PropertiesAwareExternalTaskClientFactory;
@@ -15,7 +16,8 @@
 import org.springframework.context.annotation.Role;
 
 @EnableConfigurationProperties({ CamundaBpmClientProperties.class })
-@EnableTaskSubscription(defaultExternalTaskRegistration = false)
+@EnableTaskSubscription
+@DisableDefaultExternalTaskRegistration
 @Import({ PropertiesAwareClientRegistrar.class })
 @Configuration
 public class CamundaBpmClientAutoConfiguration {

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/AuthorizationRestServiceImpl.java
Patch:
@@ -94,7 +94,7 @@ public AuthorizationCheckResultDto isUserAuthorized(String permissionName, Strin
 
     if(userId != null && !userId.equals(currentUserId)) {
       boolean isCurrentUserAuthorized = authorizationService.isUserAuthorized(currentUserId, currentAuthentication.getGroupIds(), Permissions.READ, Resources.AUTHORIZATION);
-      if (isCurrentUserAuthorized) {
+      if (!isCurrentUserAuthorized) {
         throw new InvalidRequestException(Status.FORBIDDEN, "You must have READ permission for Authorization resource.");
       }
       userIdToCheck = userId;

File: qa/integration-tests-engine/src/test/java-jboss-servlet/org/camunda/bpm/integrationtest/util/TestConstants.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: qa/integration-tests-engine/src/test/java-tomcat/org/camunda/bpm/integrationtest/util/TestConstants.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java
Patch:
@@ -402,10 +402,10 @@ public void configureQuery(AbstractQuery query, Resource resource, String queryP
   }
 
   public boolean isPermissionDisabled(Permission permission) {
-    Set<Permission> disabledPermissions = getCommandContext().getProcessEngineConfiguration().getDisabledPermissions();
+    List<String> disabledPermissions = getCommandContext().getProcessEngineConfiguration().getDisabledPermissions();
     if (disabledPermissions != null) {
-      for (Permission disabledPermission : disabledPermissions) {
-        if (permission.getName().equals(disabledPermission.getName())) {
+      for (String disabledPermission : disabledPermissions) {
+        if (permission.getName().equals(disabledPermission)) {
           return true;
         }
       }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/identity/UserResource.java
Patch:
@@ -34,7 +34,7 @@ public interface UserResource {
   @Produces(MediaType.APPLICATION_JSON)
   public void deleteUser();
 
-  @GET
+  @POST
   @Path("/unlock")
   public void unlockUser();
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/UserRestServiceInteractionTest.java
Patch:
@@ -763,7 +763,7 @@ public void testUnlockUser() {
     .then().expect()
       .statusCode(Status.NO_CONTENT.getStatusCode())
     .when()
-      .get(USER_UNLOCK);
+      .post(USER_UNLOCK);
 
     verify(identityServiceMock).unlockUser(MockProvider.EXAMPLE_USER_ID);
   }
@@ -775,7 +775,7 @@ public void testUnlockUserNonExistingUser() {
     .then().expect()
       .statusCode(Status.NO_CONTENT.getStatusCode())
     .when()
-      .get(USER_UNLOCK);
+      .post(USER_UNLOCK);
   }
 
   @Test
@@ -791,7 +791,7 @@ public void testUnlockUserThrowsAuthorizationException() {
       .body("type", equalTo(AuthorizationException.class.getSimpleName()))
       .body("message", equalTo(message))
     .when()
-      .get(USER_UNLOCK);
+      .post(USER_UNLOCK);
   }
 
   protected void verifyNoAuthorizationCheckPerformed() {

File: engine/src/test/java/org/camunda/bpm/engine/test/util/ProcessEngineBootstrapRule.java
Patch:
@@ -42,6 +42,7 @@ public ProcessEngineBootstrapRule(String configurationResource) {
   public ProcessEngine bootstrapEngine(String configurationResource) {
     ProcessEngineConfigurationImpl processEngineConfiguration = (ProcessEngineConfigurationImpl) ProcessEngineConfiguration
       .createProcessEngineConfigurationFromResource(configurationResource);
+    processEngineConfiguration.setDisablePasswordPolicy(true);
     configureEngine(processEngineConfiguration);
     return processEngineConfiguration.buildProcessEngine();
   }

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/deployment/processor/ProcessEngineStartProcessor.java
Patch:
@@ -44,8 +44,8 @@
  */
 public class ProcessEngineStartProcessor implements DeploymentUnitProcessor {
   
-  // this can happen early in the phase
-  public static final int PRIORITY = 0x0001; 
+  // this can happen at the beginning of the phase
+  public static final int PRIORITY = 0x0000; 
 
   public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
     

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/service/ProcessApplicationStartService.java
Patch:
@@ -260,9 +260,9 @@ protected Object[] getInjections(Method lifecycleMethod) {
 
         Class<?> parameterClass = (Class<?>)parameterType;
 
-        // support injection of the default process engine
+        // support injection of the default process engine, if present
         if(ProcessEngine.class.isAssignableFrom(parameterClass)) {
-          parameters.add(defaultProcessEngineInjector.getValue());
+          parameters.add(defaultProcessEngineInjector.getOptionalValue());
           injectionResolved = true;
         }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/RestartProcessInstancesBatchConfigurationJsonConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -60,6 +60,6 @@ public RestartProcessInstancesBatchConfiguration toObject(JsonObject json) {
   }
 
   protected List<String> readProcessInstanceIds(JsonObject jsonObject) {
-    return JsonUtil.asList(JsonUtil.getArray(jsonObject, PROCESS_INSTANCE_IDS));
+    return JsonUtil.asStringList(JsonUtil.getArray(jsonObject, PROCESS_INSTANCE_IDS));
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/batch/deletion/DeleteHistoricProcessInstanceBatchConfigurationJsonConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -44,6 +44,6 @@ public BatchConfiguration toObject(JsonObject json) {
   }
 
   protected List<String> readProcessInstanceIds(JsonObject jsonObject) {
-    return JsonUtil.asList(JsonUtil.getArray(jsonObject, HISTORIC_PROCESS_INSTANCE_IDS));
+    return JsonUtil.asStringList(JsonUtil.getArray(jsonObject, HISTORIC_PROCESS_INSTANCE_IDS));
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/batch/deletion/DeleteProcessInstanceBatchConfigurationJsonConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -57,6 +57,6 @@ public DeleteProcessInstanceBatchConfiguration toObject(JsonObject json) {
   }
 
   protected List<String> readProcessInstanceIds(JsonObject jsonObject) {
-    return JsonUtil.asList(JsonUtil.getArray(jsonObject, PROCESS_INSTANCE_IDS));
+    return JsonUtil.asStringList(JsonUtil.getArray(jsonObject, PROCESS_INSTANCE_IDS));
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/batch/externaltask/SetExternalTaskRetriesBatchConfigurationJsonConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -45,7 +45,7 @@ public SetRetriesBatchConfiguration toObject(JsonObject json) {
   }
   
   protected List<String> readExternalTaskIds(JsonObject json) {
-    return JsonUtil.asList(JsonUtil.getArray(json, EXTERNAL_TASK_IDS));
+    return JsonUtil.asStringList(JsonUtil.getArray(json, EXTERNAL_TASK_IDS));
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/batch/job/SetJobRetriesBatchConfigurationJsonConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -49,6 +49,6 @@ public SetRetriesBatchConfiguration toObject(JsonObject json) {
   }
 
   protected List<String> readJobIds(JsonObject jsonObject) {
-    return JsonUtil.asList(JsonUtil.getArray(jsonObject, JOB_IDS));
+    return JsonUtil.asStringList(JsonUtil.getArray(jsonObject, JOB_IDS));
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/batch/update/UpdateProcessInstancesSuspendStateBatchConfigurationJsonConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -43,6 +43,6 @@ public UpdateProcessInstancesSuspendStateBatchConfiguration toObject(JsonObject
   }
 
   protected List<String> readProcessInstanceIds(JsonObject jsonObject) {
-    return JsonUtil.asList(JsonUtil.getArray(jsonObject, PROCESS_INSTANCE_IDS));
+    return JsonUtil.asStringList(JsonUtil.getArray(jsonObject, PROCESS_INSTANCE_IDS));
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/dmn/batch/DeleteHistoricDecisionInstanceBatchConfigurationJsonConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -40,7 +40,7 @@ public BatchConfiguration toObject(JsonObject json) {
   }
 
   protected List<String> readDecisionInstanceIds(JsonObject jsonNode) {
-    return JsonUtil.asList(JsonUtil.getArray(jsonNode, HISTORIC_DECISION_INSTANCE_IDS));
+    return JsonUtil.asStringList(JsonUtil.getArray(jsonNode, HISTORIC_DECISION_INSTANCE_IDS));
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/json/MigrationBatchConfigurationJsonConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -52,7 +52,7 @@ public MigrationBatchConfiguration toObject(JsonObject json) {
   }
 
   protected List<String> readProcessInstanceIds(JsonObject jsonObject) {
-    return JsonUtil.asList(JsonUtil.getArray(jsonObject, PROCESS_INSTANCE_IDS));
+    return JsonUtil.asStringList(JsonUtil.getArray(jsonObject, PROCESS_INSTANCE_IDS));
   }
 
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/json/ModificationBatchConfigurationJsonConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -63,7 +63,7 @@ public ModificationBatchConfiguration toObject(JsonObject json) {
   }
 
   protected List<String> readProcessInstanceIds(JsonObject jsonObject) {
-    return JsonUtil.asList(JsonUtil.getArray(jsonObject, PROCESS_INSTANCE_IDS));
+    return JsonUtil.asStringList(JsonUtil.getArray(jsonObject, PROCESS_INSTANCE_IDS));
   }
 
 }

File: qa/test-db-instance-migration/test-fixture-710/src/main/java/org/camunda/bpm/qa/upgrade/TestFixture.java
Patch:
@@ -19,6 +19,7 @@
 import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.qa.upgrade.gson.ProcessInstanceModificationScenario;
+import org.camunda.bpm.qa.upgrade.gson.TaskFilterPropertiesScenario;
 import org.camunda.bpm.qa.upgrade.gson.TaskFilterScenario;
 import org.camunda.bpm.qa.upgrade.gson.TaskFilterVariablesScenario;
 import org.camunda.bpm.qa.upgrade.gson.TimerChangeJobDefinitionScenario;
@@ -73,6 +74,7 @@ public static void main(String[] args) {
     runner.setupScenarios(MigrationBatchScenario.class);
     runner.setupScenarios(TaskFilterScenario.class);
     runner.setupScenarios(TaskFilterVariablesScenario.class);
+    runner.setupScenarios(TaskFilterPropertiesScenario.class);
     runner.setupScenarios(DeploymentDeployTimeScenario.class);
     runner.setupScenarios(JobTimestampsScenario.class);
     runner.setupScenarios(IncidentTimestampScenario.class);

File: engine/src/main/java/org/camunda/bpm/engine/FormService.java
Patch:
@@ -188,7 +188,7 @@ public interface FormService {
    *          If the user has no {@link Permissions#UPDATE} permission on {@link Resources#TASK}
    *          or no {@link Permissions#UPDATE_TASK} permission on {@link Resources#PROCESS_DEFINITION}.
    */
-  Map<String, Object> submitTaskFormWithVariablesInReturn(String taskId, Map<String, Object> properties);
+  VariableMap submitTaskFormWithVariablesInReturn(String taskId, Map<String, Object> properties);
 
   /**
    * Retrieves a list of all variables for rendering a start from. The method takes into account

File: engine/src/main/java/org/camunda/bpm/engine/TaskService.java
Patch:
@@ -312,7 +312,7 @@ public interface TaskService {
    *          or no {@link Permissions#UPDATE_TASK} permission on {@link Resources#PROCESS_DEFINITION}
    *          (if the task is part of a running process instance).
    */
-  Map<String, Object> completeWithVariablesInReturn(String taskId, Map<String, Object> variables);
+  VariableMap completeWithVariablesInReturn(String taskId, Map<String, Object> variables);
 
   /**
    * Changes the assignee of the given task to the given userId.

File: engine/src/main/java/org/camunda/bpm/engine/impl/FormServiceImpl.java
Patch:
@@ -90,7 +90,7 @@ public void submitTaskForm(String taskId, Map<String, Object> properties) {
     commandExecutor.execute(new SubmitTaskFormCmd(taskId, properties));
   }
   
-  public Map<String, Object> submitTaskFormWithVariablesInReturn(String taskId, Map<String, Object> properties) {
+  public VariableMap submitTaskFormWithVariablesInReturn(String taskId, Map<String, Object> properties) {
     return commandExecutor.execute(new SubmitTaskFormCmd(taskId, properties));
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/TaskServiceImpl.java
Patch:
@@ -176,7 +176,7 @@ public void complete(String taskId, Map<String, Object> variables) {
     commandExecutor.execute(new CompleteTaskCmd(taskId, variables));
   }
 
-  public Map<String, Object> completeWithVariablesInReturn(String taskId, Map<String, Object> variables) {
+  public VariableMap completeWithVariablesInReturn(String taskId, Map<String, Object> variables) {
     return commandExecutor.execute(new CompleteTaskCmd(taskId, variables));
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/CompleteTaskCmd.java
Patch:
@@ -27,11 +27,12 @@
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionVariableSnapshotObserver;
 import org.camunda.bpm.engine.impl.persistence.entity.TaskEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.TaskManager;
+import org.camunda.bpm.engine.variable.VariableMap;
 
 /**
  * @author Joram Barrez
  */
-public class CompleteTaskCmd implements Command<Map<String, Object>>, Serializable {
+public class CompleteTaskCmd implements Command<VariableMap>, Serializable {
 
   private static final long serialVersionUID = 1L;
 
@@ -43,7 +44,7 @@ public CompleteTaskCmd(String taskId, Map<String, Object> variables) {
     this.variables = variables;
   }
 
-  public Map<String, Object> execute(CommandContext commandContext) {
+  public VariableMap execute(CommandContext commandContext) {
     ensureNotNull("taskId", taskId);
 
     TaskManager taskManager = commandContext.getTaskManager();

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SubmitTaskFormCmd.java
Patch:
@@ -39,7 +39,7 @@
  * @author Tom Baeyens
  * @author Joram Barrez
  */
-public class SubmitTaskFormCmd implements Command<Map<String, Object>>, Serializable {
+public class SubmitTaskFormCmd implements Command<VariableMap>, Serializable {
 
   private static final long serialVersionUID = 1L;
 
@@ -51,7 +51,7 @@ public SubmitTaskFormCmd(String taskId, Map<String, Object> properties) {
     this.properties = Variables.fromMap(properties);
   }
 
-  public Map<String, Object> execute(CommandContext commandContext) {
+  public VariableMap execute(CommandContext commandContext) {
     ensureNotNull("taskId", taskId);
     TaskManager taskManager = commandContext.getTaskManager();
     TaskEntity task = taskManager.findTaskById(taskId);

File: engine/src/main/java/org/camunda/bpm/engine/impl/delegate/DefaultDelegateInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: webapps/src/main/java/org/camunda/bpm/cockpit/plugin/resource/AbstractCockpitPluginResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2014-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2014-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: engine/src/main/java/org/camunda/bpm/engine/ProcessEngineConfiguration.java
Patch:
@@ -16,6 +16,7 @@
 package org.camunda.bpm.engine;
 
 import java.io.InputStream;
+import java.util.HashSet;
 import java.util.Set;
 
 import javax.sql.DataSource;
@@ -372,7 +373,7 @@ public abstract class ProcessEngineConfiguration {
    * Specifies which permissions will not be taken into account in
    * authorizations checks if authorization is enabled.
    */
-  protected Set<Permission> disabledPermissions;
+  protected Set<Permission> disabledPermissions = new HashSet<>();
 
   /** use one of the static createXxxx methods instead */
   protected ProcessEngineConfiguration() {

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/converter/PermissionConverter.java
Patch:
@@ -75,7 +75,7 @@ public static String[] getNamesForPermissions(Authorization authorization, Permi
 
   public static Permission getPermissionForName(String name, int resourceType) {
     // TODO: make this configurable via SPI
-    return ResourceTypeUtil.getPermissionForNameByResourceType(name, resourceType);
+    return ResourceTypeUtil.getPermissionByNameAndResourceType(name, resourceType);
   }
 
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/repository/diagram/ProcessDiagramParseTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013 - 2019 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/CreateAttachmentCmd.java
Patch:
@@ -37,7 +37,6 @@
 
 import static org.camunda.bpm.engine.ProcessEngineConfiguration.HISTORY_REMOVAL_TIME_STRATEGY_START;
 import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
-import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNumberOfElements;
 
 
 /**
@@ -75,7 +74,6 @@ public Attachment execute(CommandContext commandContext) {
     } else {
       ensureNotNull("taskId or processInstanceId has to be provided", this.processInstanceId);
       List<ExecutionEntity> executionsByProcessInstanceId = commandContext.getExecutionManager().findExecutionsByProcessInstanceId(processInstanceId);
-      ensureNumberOfElements("processInstances",executionsByProcessInstanceId,1);
       processInstance = executionsByProcessInstanceId.get(0);
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/authorization/Permissions.java
Patch:
@@ -100,8 +100,10 @@ public enum Permissions implements Permission {
   /** Indicates that MIGRATE_INSTANCE interactions are permitted */
   MIGRATE_INSTANCE("MIGRATE_INSTANCE", 65536, EnumSet.of(Resources.PROCESS_DEFINITION));
 
-  // Note: Please use *Permissions for new permissions
+  // NOTE: Please use XxxPermissions for new permissions
   // Keep in mind to use unique permissions' ids for the same Resource
+  // TODO in case a new XxxPermissions enum is created:
+  // please adjust ResourceTypeUtil#PERMISSION_ENUMS accordingly
 
 
   // implementation //////////////////////////

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/authorization/AuthorizationDto.java
Patch:
@@ -22,6 +22,7 @@
 import org.camunda.bpm.engine.authorization.ProcessDefinitionPermissions;
 import org.camunda.bpm.engine.authorization.ProcessInstancePermissions;
 import org.camunda.bpm.engine.authorization.Resources;
+import org.camunda.bpm.engine.authorization.TaskPermissions;
 import org.camunda.bpm.engine.rest.dto.converter.PermissionConverter;
 
 import java.util.ArrayList;
@@ -141,6 +142,8 @@ private static Permission[] getPermissions(Authorization dbAuthorization) {
       return dbAuthorization.getPermissions(ProcessDefinitionPermissions.values());
     } else if (givenResourceType == Resources.PROCESS_INSTANCE.resourceType()) {
       return dbAuthorization.getPermissions(ProcessInstancePermissions.values());
+    } else if (givenResourceType == Resources.TASK.resourceType()) {
+      return dbAuthorization.getPermissions(TaskPermissions.values());
     } else {
       return dbAuthorization.getPermissions(Permissions.values());
     }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/util/AuthorizationTestUtil.java
Patch:
@@ -39,6 +39,7 @@ public class AuthorizationTestUtil {
   protected static final int BATCH = Resources.BATCH.resourceType();
   protected static final int PROCESS_DEFINITION = Resources.PROCESS_DEFINITION.resourceType();
   protected static final int PROCESS_INSTANCE = Resources.PROCESS_INSTANCE.resourceType();
+  protected static final int TASK = Resources.TASK.resourceType();
 
   protected static Map<Integer, Resource> resourcesByType = new HashMap<Integer, Resource>();
   protected static Map<Integer, Permission[]> permissionMap = new HashMap<Integer, Permission[]>();
@@ -80,7 +81,7 @@ public static void assertExceptionInfo(String expectedPermissionName, String exp
   public static Permission[] getPermissions(Authorization authorization)
   {
     int resourceType = authorization.getResourceType();
-    if (resourceType == BATCH || resourceType == PROCESS_DEFINITION || resourceType == PROCESS_INSTANCE) {
+    if (resourceType == BATCH || resourceType == PROCESS_DEFINITION || resourceType == PROCESS_INSTANCE || resourceType == TASK) {
       Permission[] permissionsForType = permissionMap.get(resourceType);
       return authorization.getPermissions(permissionsForType);
     } else {

File: engine/src/main/java/org/camunda/bpm/engine/AuthorizationService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -31,7 +31,7 @@
  * <h2>Creating an authorization</h2>
  * <p>An authorization is created between a user/group and a resource. It describes 
  * the user/group's <em>permissions</em> to access that resource. An authorization may 
- * express different permissions, such as the permission to READ, WRITE, DELETE the 
+ * express different permissions, such as the permission to READ, UPDATE, DELETE the 
  * resource. (See {@link Authorization} for details).</p>
  * 
  * <h2>Granting / revoking permissions</h2>

File: engine/src/main/java/org/camunda/bpm/engine/authorization/Authorization.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -46,7 +46,7 @@
  * and resource:</p>
  * <pre>
  * authorization.addPermission(Permissions.READ);
- * authorization.addPermission(Permissions.WRITE);
+ * authorization.addPermission(Permissions.UPDATE);
  * authorization.addPermission(Permissions.DELETE);
  * </pre>
  * <p>On top of the built-in permissions, camunda BPM allows using custom

File: engine/src/main/java/org/camunda/bpm/engine/authorization/AuthorizationQuery.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -55,12 +55,12 @@ public interface AuthorizationQuery extends Query<AuthorizationQuery, Authorizat
    *   .resourceType("processDefinition")
    *   .resourceId("2313")
    *   .hasPermission(Permissions.READ)
-   *   .hasPermission(Permissions.WRITE)
+   *   .hasPermission(Permissions.UPDATE)
    *   .hasPermission(Permissions.DELETE)
    *   .list();
    * </pre>
    * 
-   * Selects all Authorization objects which provide READ,WRITE,DELETE 
+   * Selects all Authorization objects which provide READ,UPDATE,DELETE 
    * Permissions for the given user. 
    * 
    */

File: engine/src/main/java/org/camunda/bpm/engine/authorization/Permission.java
Patch:
@@ -55,7 +55,7 @@
  */
 public interface Permission {
   
-  /** returns the name of the permission, ie. 'WRITE' */
+  /** returns the name of the permission, ie. 'UPDATE' */
   String getName();
   
   /** returns the unique numeric value of the permission.

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetExecutionVariableCmd.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -66,7 +66,7 @@ public Object execute(CommandContext commandContext) {
 
   protected void checkGetExecutionVariable(ExecutionEntity execution, CommandContext commandContext) {
     for(CommandChecker checker : commandContext.getProcessEngineConfiguration().getCommandCheckers()) {
-      checker.checkReadProcessInstance(execution);
+      checker.checkReadProcessInstanceVariable(execution);
     }
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetExecutionVariableTypedCmd.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -69,7 +69,7 @@ public T execute(CommandContext commandContext) {
 
   public void checkGetExecutionVariableTyped(ExecutionEntity execution, CommandContext commandContext) {
     for(CommandChecker checker : commandContext.getProcessEngineConfiguration().getCommandCheckers()) {
-      checker.checkReadProcessInstance(execution);
+      checker.checkReadProcessInstanceVariable(execution);
     }
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetExecutionVariablesCmd.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -68,7 +68,7 @@ public VariableMap execute(CommandContext commandContext) {
 
   protected void checkGetExecutionVariables(ExecutionEntity execution, CommandContext commandContext) {
     for(CommandChecker checker : commandContext.getProcessEngineConfiguration().getCommandCheckers()) {
-      checker.checkReadProcessInstance(execution);
+      checker.checkReadProcessInstanceVariable(execution);
     }
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetTaskFormVariablesCmd.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -71,7 +71,7 @@ public VariableMap execute(CommandContext commandContext) {
 
   protected void checkGetTaskFormVariables(TaskEntity task, CommandContext commandContext) {
     for(CommandChecker checker : commandContext.getProcessEngineConfiguration().getCommandCheckers()) {
-      checker.checkReadTask(task);
+      checker.checkReadTaskVariable(task);
     }
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetTaskVariableCmd.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -68,7 +68,7 @@ public Object execute(CommandContext commandContext) {
 
   protected void checkGetTaskVariable(TaskEntity task, CommandContext commandContext) {
     for(CommandChecker checker : commandContext.getProcessEngineConfiguration().getCommandCheckers()) {
-      checker.checkReadTask(task);
+      checker.checkReadTaskVariable(task);
     }
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetTaskVariableCmdTyped.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -71,7 +71,7 @@ public TypedValue execute(CommandContext commandContext) {
 
   protected void checkGetTaskVariableTyped(TaskEntity task, CommandContext commandContext) {
     for(CommandChecker checker : commandContext.getProcessEngineConfiguration().getCommandCheckers()) {
-      checker.checkReadTask(task);
+      checker.checkReadTaskVariable(task);
     }
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetTaskVariablesCmd.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -70,7 +70,7 @@ public VariableMap execute(CommandContext commandContext) {
 
   protected void checkGetTaskVariables(TaskEntity task, CommandContext commandContext) {
     for(CommandChecker checker : commandContext.getProcessEngineConfiguration().getCommandCheckers()) {
-      checker.checkReadTask(task);
+      checker.checkReadTaskVariable(task);
     }
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -1453,6 +1453,8 @@ public static void initSqlSessionFactoryProperties(Properties properties, String
 
       properties.put("dayComparator", DbSqlSessionFactory.databaseSpecificDaysComparator.get(databaseType));
 
+      properties.put("collationForCaseSensitivity", DbSqlSessionFactory.databaseSpecificCollationForCaseSensitivity.get(databaseType));
+
       Map<String, String> constants = DbSqlSessionFactory.dbSpecificConstants.get(databaseType);
       for (Entry<String, String> entry : constants.entrySet()) {
         properties.put(entry.getKey(), entry.getValue());

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/externaltask/SetRetriesForExternalTasksDto.java
Patch:
@@ -28,7 +28,7 @@ public class SetRetriesForExternalTasksDto {
   protected ProcessInstanceQueryDto processInstanceQuery;
   protected HistoricProcessInstanceQueryDto historicProcessInstanceQuery;
 
-  protected int retries;
+  protected Integer retries;
 
   public List<String> getExternalTaskIds() {
     return externalTaskIds;
@@ -70,11 +70,11 @@ public void setHistoricProcessInstanceQuery(HistoricProcessInstanceQueryDto hist
     this.historicProcessInstanceQuery = historicProcessInstanceQueryDto;
   }
 
-  public int getRetries() {
+  public Integer getRetries() {
     return retries;
   }
 
-  public void setRetries(int retries) {
+  public void setRetries(Integer retries) {
     this.retries = retries;
   }
 }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/runtime/RetriesDto.java
Patch:
@@ -17,13 +17,13 @@
 
 public class RetriesDto {
 
-  private int retries;
+  private Integer retries;
 
-  public int getRetries() {
+  public Integer getRetries() {
     return retries;
   }
 
-  public void setRetries(int retries) {
+  public void setRetries(Integer retries) {
     this.retries = retries;
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/ExternalTaskService.java
Patch:
@@ -316,7 +316,7 @@ public interface ExternalTaskService {
    *     <li>{@link Permissions#UPDATE_INSTANCE} on {@link Resources#PROCESS_DEFINITION}</li>
    *   </ul>
    */
-  public void setRetries(String externalTaskId, int retries);
+  public void setRetries(String externalTaskId, Integer retries);
 
   /**
    * Sets the retries for external tasks. If the new value is 0, a new incident with a <code>null</code>

File: engine/src/main/java/org/camunda/bpm/engine/impl/ExternalTaskServiceImpl.java
Patch:
@@ -99,7 +99,7 @@ public String getExternalTaskErrorDetails(String externalTaskId) {
     return commandExecutor.execute(new GetExternalTaskErrorDetailsCmd(externalTaskId));
   }
 
-  public void setRetries(String externalTaskId, int retries) {
+  public void setRetries(String externalTaskId, Integer retries) {
     setRetries(externalTaskId, retries, true);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SetExternalTaskRetriesCmd.java
Patch:
@@ -31,10 +31,10 @@
  */
 public class SetExternalTaskRetriesCmd extends ExternalTaskCmd {
 
-  protected int retries;
+  protected Integer retries;
   protected boolean writeUserOperationLog;
 
-  public SetExternalTaskRetriesCmd(String externalTaskId, int retries, boolean writeUserOperationLog) {
+  public SetExternalTaskRetriesCmd(String externalTaskId, Integer retries, boolean writeUserOperationLog) {
     super(externalTaskId);
     this.retries = retries;
     this.writeUserOperationLog = writeUserOperationLog;

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/PermissionsTest.java
Patch:
@@ -91,6 +91,6 @@ private void verifyValuesAreUniqueAndPowerOfTwo(Permission[] permissions) {
   }
 
   private boolean isPowerOfTwo(int value) {
-    return value > 0 && (value & (value - 1)) == 0;
+    return value > 1 && (value & (value - 1)) == 0;
   }
 }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/DeploymentRestServiceImpl.java
Patch:
@@ -128,7 +128,7 @@ private DeploymentBuilder extractDeploymentInformation(MultipartFormData payload
         if (fileName != null) {
           deploymentBuilder.addInputStream(part.getFileName(), new ByteArrayInputStream(part.getBinaryContent()));
         } else {
-          throw new InvalidRequestException(Status.BAD_REQUEST, "No deployment resources found for file name " + name + ".");
+          throw new InvalidRequestException(Status.BAD_REQUEST, "No file name found in the deployment resource described by form parameter '" + fileName + "'.");
         }
       }
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/calendar/BusinessCalendar.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,5 +24,7 @@
 public interface BusinessCalendar {
 
   Date resolveDuedate(String duedateDescription);
+  
+  Date resolveDuedate(String duedateDescription, Date startDate);
 
 }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/MetricsRestService.java
Patch:
@@ -36,7 +36,6 @@ public interface MetricsRestService {
 
   public static final String PATH = "/metrics";
 
-  @Produces(MediaType.APPLICATION_JSON)
   @Path("/{name}")
   MetricsResource getMetrics(@PathParam("name") String name);
 

File: engine/src/main/java/org/camunda/bpm/engine/authorization/BatchPermissions.java
Patch:
@@ -87,6 +87,8 @@ public enum BatchPermissions implements Permission {
   /** Indicates that CREATE_BATCH_SUSPEND_PROCESS_INSTANCES interactions are permitted */
   CREATE_BATCH_UPDATE_PROCESS_INSTANCES_SUSPEND_STATE("CREATE_BATCH_UPDATE_PROCESS_INSTANCES_SUSPEND_STATE", 32768);
 
+  private static final Resource[] RESOURCES = new Resource[] { Resources.BATCH };
+
   private String name;
   private int id;
 
@@ -107,7 +109,7 @@ public int getValue() {
 
   @Override
   public Resource[] getTypes() {
-    return new Resource[] { Resources.BATCH };
+    return RESOURCES;
   }
 
   public static Permission forName(String name) {

File: engine/src/main/java/org/camunda/bpm/engine/authorization/ProcessDefinitionPermissions.java
Patch:
@@ -85,6 +85,8 @@ public enum ProcessDefinitionPermissions implements Permission {
   /** Indicates that RETRY_JOB interactions are permitted. */
   RETRY_JOB("RETRY_JOB", 32);
 
+  private static final Resource[] RESOURCES = new Resource[] { Resources.PROCESS_DEFINITION };
+
   private String name;
   private int id;
 
@@ -105,7 +107,7 @@ public int getValue() {
 
   @Override
   public Resource[] getTypes() {
-    return new Resource[] { Resources.PROCESS_DEFINITION };
+    return RESOURCES;
   }
 
   public static Permission forName(String name) {

File: engine/src/main/java/org/camunda/bpm/engine/authorization/ProcessInstancePermissions.java
Patch:
@@ -55,6 +55,7 @@ public enum ProcessInstancePermissions implements Permission {
   /** Indicates that RETRY_JOB interactions are permitted. */
   RETRY_JOB("RETRY_JOB", 32);
 
+  private static final Resource[] RESOURCES = new Resource[] { Resources.PROCESS_INSTANCE };
   private String name;
   private int id;
 
@@ -75,7 +76,7 @@ public int getValue() {
 
   @Override
   public Resource[] getTypes() {
-    return new Resource[] { Resources.PROCESS_INSTANCE };
+    return RESOURCES;
   }
 
   public static Permission forName(String name) {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/ModificationExecutionAsyncTest.java
Patch:
@@ -278,7 +278,7 @@ public void createSeedJob() {
     Job seedJob = helper.getSeedJob(batch);
     assertNotNull(seedJob);
     assertEquals(seedJobDefinition.getId(), seedJob.getJobDefinitionId());
-    assertEquals(seedJob.getDuedate(), currentTime);
+    assertEquals(currentTime, seedJob.getDuedate());
     assertNull(seedJob.getDeploymentId());
     assertNull(seedJob.getProcessDefinitionId());
     assertNull(seedJob.getProcessDefinitionKey());
@@ -305,7 +305,7 @@ public void createModificationJobs() {
 
     for (Job modificationJob : modificationJobs) {
       assertEquals(modificationJobDefinition.getId(), modificationJob.getJobDefinitionId());
-      assertEquals(modificationJob.getDuedate(), currentTime);
+      assertEquals(currentTime, modificationJob.getDuedate());
       assertNull(modificationJob.getProcessDefinitionId());
       assertNull(modificationJob.getProcessDefinitionKey());
       assertNull(modificationJob.getProcessInstanceId());
@@ -639,7 +639,7 @@ public void testMonitorJobPollingForCompletion() {
     // then the monitor job has a no due date set
     Job monitorJob = helper.getMonitorJob(batch);
     assertNotNull(monitorJob);
-    assertEquals(monitorJob.getDuedate(), currentTime);
+    assertEquals(currentTime, monitorJob.getDuedate());
 
     // when the monitor job is executed
     helper.executeMonitorJob(batch);

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/RestartProcessInstanceAsyncTest.java
Patch:
@@ -566,10 +566,10 @@ public void testMonitorJobPollingForCompletionDueDateSet() {
     Date createDate = testDate;
     helper.executeSeedJob(batch);
 
-    // then the monitor job has a no due date set
+    // then the monitor job has the create date as due date set
     Job monitorJob = helper.getMonitorJob(batch);
     assertNotNull(monitorJob);
-    assertEquals(monitorJob.getDuedate(), testDate);
+    assertEquals(testDate, monitorJob.getDuedate());
 
     // when the monitor job is executed
     helper.executeMonitorJob(batch);

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/batch/BatchMigrationTest.java
Patch:
@@ -292,7 +292,7 @@ public void testSeedJobCreation() {
     Job seedJob = helper.getSeedJob(batch);
     assertNotNull(seedJob);
     assertEquals(seedJobDefinition.getId(), seedJob.getJobDefinitionId());
-    assertEquals(seedJob.getDuedate(), currentTime);
+    assertEquals(currentTime, seedJob.getDuedate());
     assertNull(seedJob.getDeploymentId());
     assertNull(seedJob.getProcessDefinitionId());
     assertNull(seedJob.getProcessDefinitionKey());
@@ -325,7 +325,7 @@ public void testMigrationJobsCreation() {
 
     for (Job migrationJob : migrationJobs) {
       assertEquals(migrationJobDefinition.getId(), migrationJob.getJobDefinitionId());
-      assertEquals(migrationJob.getDuedate(), currentTime);
+      assertEquals(currentTime, migrationJob.getDuedate());
       assertEquals(sourceDeploymentId, migrationJob.getDeploymentId());
       assertNull(migrationJob.getProcessDefinitionId());
       assertNull(migrationJob.getProcessDefinitionKey());
@@ -487,7 +487,7 @@ public void testMonitorJobPollingForCompletion() {
     // then the monitor job has a no due date set
     Job monitorJob = helper.getMonitorJob(batch);
     assertNotNull(monitorJob);
-    assertEquals(monitorJob.getDuedate(), currentTime);
+    assertEquals(currentTime, monitorJob.getDuedate());
 
     // when the monitor job is executed
     helper.executeMonitorJob(batch);

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/signal/SignalEventTest.java
Patch:
@@ -538,7 +538,7 @@ public void testAsyncSignalStartEventJobPropertiesDueDateSet() {
     assertEquals(0, asyncJob.getPriority());
     assertNull(asyncJob.getProcessInstanceId());
     assertEquals(3, asyncJob.getRetries());
-    assertEquals(asyncJob.getDuedate(), testTime);
+    assertEquals(testTime, asyncJob.getDuedate());
     assertNull(asyncJob.getDeploymentId());
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricJobLogTest.java
Patch:
@@ -275,7 +275,7 @@ public void testAsyncBeforeJobHandlerTypeDueDateSet() {
 
     assertNotNull(historicJob);
 
-    assertEquals(historicJob.getJobDueDate(), testDate);
+    assertEquals(testDate, historicJob.getJobDueDate());
 
     assertEquals(job.getJobDefinitionId(), historicJob.getJobDefinitionId());
     assertEquals("serviceTask", historicJob.getActivityId());
@@ -342,7 +342,7 @@ public void testAsyncAfterJobHandlerTypeDueDateSet() {
 
     assertNotNull(historicJob);
 
-    assertEquals(historicJob.getJobDueDate(), testDate);
+    assertEquals(testDate, historicJob.getJobDueDate());
 
     assertEquals(anotherJob.getJobDefinitionId(), historicJob.getJobDefinitionId());
     assertEquals("serviceTask", historicJob.getActivityId());
@@ -511,7 +511,7 @@ public void testCatchingSignalEventJobHandlerTypeDueDateSet() {
 
     assertNotNull(historicJob);
 
-    assertEquals(historicJob.getJobDueDate(), testDate);
+    assertEquals(testDate, historicJob.getJobDueDate());
 
     assertEquals(job.getId(), historicJob.getJobId());
     assertEquals(job.getJobDefinitionId(), historicJob.getJobDefinitionId());

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/JobExecutorAcquireJobsByTypeTest.java
Patch:
@@ -65,7 +65,9 @@ public void testMessageJobHasDueDateSet() {
     runtimeService.startProcessInstanceByKey("simpleAsyncProcess");
 
     Job job = managementService.createJobQuery().singleResult();
-    assertEquals(job.getDuedate(), ClockUtil.getCurrentTime());
+
+    // time is fixed for the purposes of the test
+    assertEquals(ClockUtil.getCurrentTime(), job.getDuedate());
   }
 
   @Test

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/JobExecutorAcquireJobsDefaultTest.java
Patch:
@@ -58,7 +58,7 @@ public void setUp() {
   public void testProcessEngineConfiguration() {
     assertFalse(configuration.isJobExecutorPreferTimerJobs());
     assertFalse(configuration.isJobExecutorAcquireByDueDate());
-    assertEquals(configuration.isEnsureJobDueDateNotNull(), ensureJobDueDateSet);
+    assertEquals(ensureJobDueDateSet, configuration.isEnsureJobDueDateNotNull());
   }
 
   @Test
@@ -69,7 +69,7 @@ public void testJobDueDateValue() {
     List<JobEntity> jobList = findAcquirableJobs();
 
     // then
-    assertEquals(jobList.size(), 1);
-    assertEquals(jobList.get(0).getDuedate(), currentTime);
+    assertEquals(1, jobList.size());
+    assertEquals(currentTime, jobList.get(0).getDuedate());
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/JobDeclaration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -188,7 +188,7 @@ protected int resolveRetries(S context) {
 
   public Date resolveDueDate(S context) {
     ProcessEngineConfiguration processEngineConfiguration = Context.getProcessEngineConfiguration();
-    if (processEngineConfiguration != null && processEngineConfiguration.isJobExecutorAcquireByDueDate()) {
+    if (processEngineConfiguration != null && (processEngineConfiguration.isJobExecutorAcquireByDueDate() || processEngineConfiguration.isEnsureJobDueDateNotNull())) {
       return ClockUtil.getCurrentTime();
     }
     else {

File: webapps/src/main/java/org/camunda/bpm/webapp/impl/security/auth/AuthenticationService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2014-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2014-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: engine-plugins/identity-ldap/src/test/java/org/camunda/bpm/identity/impl/ldap/LdapGroupQueryTest.java
Patch:
@@ -155,7 +155,7 @@ public void testPaginationWithAuthenticatedUser() {
 
       identityService.setAuthenticatedUserId("oscar");
 
-      Set<String> groupNames = new HashSet<String>();
+      Set<String> groupNames = new HashSet<>();
       List<Group> groups = identityService.createGroupQuery().listPage(0, 2);
       assertEquals(2, groups.size());
       checkPagingResults(groupNames, groups.get(0).getId(), groups.get(1).getId());

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/converter/ReportResultToCsvConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -48,7 +48,7 @@ public static String convertReportResult(List<ReportResult> reports, String repo
   }
 
   protected static String convertDurationReportResult(List<ReportResult> reports) {
-    StringBuffer buffer = new StringBuffer();
+    StringBuilder buffer = new StringBuilder();
 
     buffer.append(DURATION_HEADER);
 

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/MetricsRestServiceImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -108,12 +108,12 @@ protected void applyQueryParams(MetricsQuery query, MultivaluedMap<String, Strin
     }
 
     if(queryParameters.getFirst(QUERY_PARAM_AGG_BY_REPORTER) != null) {
-      query = query.aggregateByReporter();
+      query.aggregateByReporter();
     }
   }
 
   protected List<MetricsIntervalResultDto> convertToDtos(List<MetricIntervalValue> metrics) {
-    List<MetricsIntervalResultDto> intervalMetrics = new ArrayList<MetricsIntervalResultDto>();
+    List<MetricsIntervalResultDto> intervalMetrics = new ArrayList<>();
     for (MetricIntervalValue m : metrics) {
       intervalMetrics.add(new MetricsIntervalResultDto(m));
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricTaskInstanceQueryImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -73,7 +73,7 @@ public class HistoricTaskInstanceQueryImpl extends AbstractQuery<HistoricTaskIns
   protected boolean unfinished;
   protected boolean processFinished;
   protected boolean processUnfinished;
-  protected List<TaskQueryVariableValue> variables = new ArrayList<TaskQueryVariableValue>();
+  protected List<TaskQueryVariableValue> variables = new ArrayList<>();
   protected Date dueDate;
   protected Date dueAfter;
   protected Date dueBefore;
@@ -381,7 +381,6 @@ protected void ensureVariablesInitialized() {
 
   public void addVariable(String name, Object value, QueryOperator operator, boolean isTaskVariable, boolean isProcessInstanceVariable) {
     ensureNotNull("name", name);
-    System.out.println("add var");
     if(value == null || isBoolean(value)) {
       // Null-values and booleans can only be used in EQUALS and NOT_EQUALS
       switch(operator) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/EnginePersistenceLogger.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -674,7 +674,7 @@ public ProcessEngineException flushDbOperationsException(List<DbOperation> opera
     do {
       if (exCause instanceof BatchExecutorException) {
         final List<SQLException> relatedSqlExceptions = ExceptionUtil.findRelatedSqlExceptions(exCause);
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         for (SQLException sqlException : relatedSqlExceptions) {
           sb.append(sqlException).append("\n");
         }

File: engine/src/main/java/org/camunda/bpm/engine/impl/management/UpdateJobDefinitionSuspensionStateBuilderImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -130,7 +130,7 @@ protected void validateParameters() {
     ensureOnlyOneNotNull("Need to specify either a job definition id, a process definition id or a process definition key.",
         jobDefinitionId, processDefinitionId, processDefinitionKey);
 
-    if (isProcessDefinitionTenantIdSet & (jobDefinitionId != null || processDefinitionId != null)) {
+    if (isProcessDefinitionTenantIdSet && (jobDefinitionId != null || processDefinitionId != null)) {
       throw LOG.exceptionUpdateSuspensionStateForTenantOnlyByProcessDefinitionKey();
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/management/UpdateJobSuspensionStateBuilderImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -129,7 +129,7 @@ protected void validateParameters() {
     ensureOnlyOneNotNull("Need to specify either a job id, a job definition id, a process instance id, a process definition id or a process definition key.", jobId,
         jobDefinitionId, processInstanceId, processDefinitionId, processDefinitionKey);
 
-    if (isProcessDefinitionTenantIdSet & (jobId != null || jobDefinitionId != null || processInstanceId != null || processDefinitionId != null)) {
+    if (isProcessDefinitionTenantIdSet && (jobId != null || jobDefinitionId != null || processInstanceId != null || processDefinitionId != null)) {
       throw LOG.exceptionUpdateSuspensionStateForTenantOnlyByProcessDefinitionKey();
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/IntegerValueSerializer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -51,7 +51,7 @@ public IntegerValue readValue(ValueFields valueFields) {
     Integer intValue = null;
 
     if(valueFields.getLongValue() != null) {
-      intValue = new Integer(valueFields.getLongValue().intValue());
+      intValue = Integer.valueOf(valueFields.getLongValue().intValue());
     }
 
     return Variables.integerValue(intValue);

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/ShortValueSerializer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -39,7 +39,7 @@ public ShortValue readValue(ValueFields valueFields) {
     Short shortValue = null;
 
     if(longValue != null) {
-      shortValue = new Short(longValue.shortValue());
+      shortValue = Short.valueOf(longValue.shortValue());
     }
 
     return Variables.shortValue(shortValue);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AbstractSetJobRetriesCmd.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SetJobRetriesCmd.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/JobAuthorizationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -194,6 +194,7 @@ public class DbSqlSessionFactory implements SessionFactory {
       addDatabaseSpecificStatement(mysqlLikeDatabase, "updateUserOperationLogByRootProcessInstanceId", "updateUserOperationLogByRootProcessInstanceId_mysql");
       addDatabaseSpecificStatement(mysqlLikeDatabase, "updateExternalTaskLogByRootProcessInstanceId", "updateExternalTaskLogByRootProcessInstanceId_mysql");
       addDatabaseSpecificStatement(mysqlLikeDatabase, "updateHistoricIncidentsByRootProcessInstanceId", "updateHistoricIncidentsByRootProcessInstanceId_mysql");
+      addDatabaseSpecificStatement(mysqlLikeDatabase, "updateHistoricIncidentsByBatchId", "updateHistoricIncidentsByBatchId_mysql");
       addDatabaseSpecificStatement(mysqlLikeDatabase, "updateIdentityLinkLogByRootProcessInstanceId", "updateIdentityLinkLogByRootProcessInstanceId_mysql");
 
       constants = new HashMap<String, String>();

File: engine/src/main/java/org/camunda/bpm/engine/impl/batch/RestartProcessInstancesBatchCmd.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Map;
 
 import org.camunda.bpm.engine.BadUserRequestException;
-import org.camunda.bpm.engine.authorization.Permissions;
+import org.camunda.bpm.engine.authorization.BatchPermissions;
 import org.camunda.bpm.engine.batch.Batch;
 import org.camunda.bpm.engine.impl.ProcessEngineLogger;
 import org.camunda.bpm.engine.impl.RestartProcessInstanceBuilderImpl;
@@ -85,7 +85,7 @@ public Batch execute(CommandContext commandContext) {
 
   protected void checkPermissions(CommandContext commandContext) {
     for(CommandChecker checker : commandContext.getProcessEngineConfiguration().getCommandCheckers()) {
-      checker.checkCreateBatch(Permissions.CREATE_BATCH_RESTART_PROCESS_INSTANCES);
+      checker.checkCreateBatch(BatchPermissions.CREATE_BATCH_RESTART_PROCESS_INSTANCES);
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AbstractSetJobsRetriesBatchCmd.java
Patch:
@@ -16,7 +16,7 @@
 package org.camunda.bpm.engine.impl.cmd;
 
 import org.camunda.bpm.engine.BadUserRequestException;
-import org.camunda.bpm.engine.authorization.Permissions;
+import org.camunda.bpm.engine.authorization.BatchPermissions;
 import org.camunda.bpm.engine.batch.Batch;
 import org.camunda.bpm.engine.history.UserOperationLogEntry;
 import org.camunda.bpm.engine.impl.batch.BatchEntity;
@@ -45,7 +45,7 @@ public Batch execute(CommandContext commandContext) {
 
     ensureNotEmpty(BadUserRequestException.class, "jobIds", jobIds);
     EnsureUtil.ensureGreaterThanOrEqual("Retries count", retries, 0);
-    checkAuthorizations(commandContext, Permissions.CREATE_BATCH_SET_JOB_RETRIES);
+    checkAuthorizations(commandContext, BatchPermissions.CREATE_BATCH_SET_JOB_RETRIES);
     writeUserOperationLog(commandContext,
         retries,
         jobIds.size(),

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ModifyProcessInstanceAsyncCmd.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.List;
 import java.util.Map;
 
-import org.camunda.bpm.engine.authorization.Permissions;
+import org.camunda.bpm.engine.authorization.BatchPermissions;
 import org.camunda.bpm.engine.batch.Batch;
 import org.camunda.bpm.engine.history.UserOperationLogEntry;
 import org.camunda.bpm.engine.impl.ModificationBatchConfiguration;
@@ -81,7 +81,7 @@ public Batch execute(CommandContext commandContext) {
 
   protected void checkPermissions(CommandContext commandContext) {
     for(CommandChecker checker : commandContext.getProcessEngineConfiguration().getCommandCheckers()) {
-      checker.checkCreateBatch(Permissions.CREATE_BATCH_MODIFY_PROCESS_INSTANCES);
+      checker.checkCreateBatch(BatchPermissions.CREATE_BATCH_MODIFY_PROCESS_INSTANCES);
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ProcessInstanceModificationBatchCmd.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Map;
 
 import org.camunda.bpm.engine.BadUserRequestException;
-import org.camunda.bpm.engine.authorization.Permissions;
+import org.camunda.bpm.engine.authorization.BatchPermissions;
 import org.camunda.bpm.engine.batch.Batch;
 import org.camunda.bpm.engine.impl.ModificationBatchConfiguration;
 import org.camunda.bpm.engine.impl.ModificationBuilderImpl;
@@ -76,7 +76,7 @@ public Batch execute(CommandContext commandContext) {
 
   protected void checkPermissions(CommandContext commandContext) {
     for(CommandChecker checker : commandContext.getProcessEngineConfiguration().getCommandCheckers()) {
-      checker.checkCreateBatch(Permissions.CREATE_BATCH_MODIFY_PROCESS_INSTANCES);
+      checker.checkCreateBatch(BatchPermissions.CREATE_BATCH_MODIFY_PROCESS_INSTANCES);
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SetExternalTasksRetriesBatchCmd.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.List;
 
 import org.camunda.bpm.engine.BadUserRequestException;
-import org.camunda.bpm.engine.authorization.Permissions;
+import org.camunda.bpm.engine.authorization.BatchPermissions;
 import org.camunda.bpm.engine.batch.Batch;
 import org.camunda.bpm.engine.impl.batch.BatchEntity;
 import org.camunda.bpm.engine.impl.batch.BatchJobHandler;
@@ -64,7 +64,7 @@ public Batch execute(CommandContext commandContext) {
 
   protected void checkPermissions(CommandContext commandContext) {
     for(CommandChecker checker : commandContext.getProcessEngineConfiguration().getCommandCheckers()) {
-      checker.checkCreateBatch(Permissions.CREATE_BATCH_SET_EXTERNAL_TASK_RETRIES);
+      checker.checkCreateBatch(BatchPermissions.CREATE_BATCH_SET_EXTERNAL_TASK_RETRIES);
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/UpdateProcessInstancesSuspendStateBatchCmd.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.List;
 import java.util.Map;
 import org.camunda.bpm.engine.BadUserRequestException;
-import org.camunda.bpm.engine.authorization.Permissions;
+import org.camunda.bpm.engine.authorization.BatchPermissions;
 import org.camunda.bpm.engine.batch.Batch;
 import org.camunda.bpm.engine.impl.UpdateProcessInstancesSuspensionStateBuilderImpl;
 import org.camunda.bpm.engine.impl.batch.BatchConfiguration;
@@ -95,7 +95,7 @@ protected BatchJobHandler<UpdateProcessInstancesSuspendStateBatchConfiguration>
 
   protected void checkAuthorizations(CommandContext commandContext) {
     for(CommandChecker checker : commandContext.getProcessEngineConfiguration().getCommandCheckers()) {
-      checker.checkCreateBatch(Permissions.CREATE_BATCH_UPDATE_PROCESS_INSTANCES_SUSPEND_STATE);
+      checker.checkCreateBatch(BatchPermissions.CREATE_BATCH_UPDATE_PROCESS_INSTANCES_SUSPEND_STATE);
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/batch/DeleteHistoricProcessInstancesBatchCmd.java
Patch:
@@ -16,7 +16,7 @@
 package org.camunda.bpm.engine.impl.cmd.batch;
 
 import org.camunda.bpm.engine.BadUserRequestException;
-import org.camunda.bpm.engine.authorization.Permissions;
+import org.camunda.bpm.engine.authorization.BatchPermissions;
 import org.camunda.bpm.engine.batch.Batch;
 import org.camunda.bpm.engine.history.HistoricProcessInstance;
 import org.camunda.bpm.engine.history.HistoricProcessInstanceQuery;
@@ -82,7 +82,7 @@ public Batch execute(CommandContext commandContext) {
     List<String> processInstanceIds = collectHistoricProcessInstanceIds();
 
     ensureNotEmpty(BadUserRequestException.class, "historicProcessInstanceIds", processInstanceIds);
-    checkAuthorizations(commandContext, Permissions.CREATE_BATCH_DELETE_FINISHED_PROCESS_INSTANCES);
+    checkAuthorizations(commandContext, BatchPermissions.CREATE_BATCH_DELETE_FINISHED_PROCESS_INSTANCES);
     writeUserOperationLog(commandContext,
         deleteReason,
         processInstanceIds.size(),

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/batch/DeleteProcessInstanceBatchCmd.java
Patch:
@@ -16,7 +16,7 @@
 package org.camunda.bpm.engine.impl.cmd.batch;
 
 import org.camunda.bpm.engine.BadUserRequestException;
-import org.camunda.bpm.engine.authorization.Permissions;
+import org.camunda.bpm.engine.authorization.BatchPermissions;
 import org.camunda.bpm.engine.batch.Batch;
 import org.camunda.bpm.engine.history.UserOperationLogEntry;
 import org.camunda.bpm.engine.impl.ProcessInstanceQueryImpl;
@@ -81,7 +81,7 @@ public Batch execute(CommandContext commandContext) {
     List<String> processInstanceIds = collectProcessInstanceIds();
 
     ensureNotEmpty(BadUserRequestException.class, "processInstanceIds", processInstanceIds);
-    checkAuthorizations(commandContext, Permissions.CREATE_BATCH_DELETE_RUNNING_PROCESS_INSTANCES);
+    checkAuthorizations(commandContext, BatchPermissions.CREATE_BATCH_DELETE_RUNNING_PROCESS_INSTANCES);
     writeUserOperationLog(commandContext,
         deleteReason,
         processInstanceIds.size(),

File: engine/src/main/java/org/camunda/bpm/engine/impl/dmn/cmd/DeleteHistoricDecisionInstancesBatchCmd.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Set;
 
 import org.camunda.bpm.engine.BadUserRequestException;
-import org.camunda.bpm.engine.authorization.Permissions;
+import org.camunda.bpm.engine.authorization.BatchPermissions;
 import org.camunda.bpm.engine.batch.Batch;
 import org.camunda.bpm.engine.history.HistoricDecisionInstance;
 import org.camunda.bpm.engine.history.HistoricDecisionInstanceQuery;
@@ -77,7 +77,7 @@ public Batch execute(CommandContext commandContext) {
     List<String> decisionInstanceIds = collectHistoricDecisionInstanceIds();
     ensureNotEmpty(BadUserRequestException.class, "historicDecisionInstanceIds", decisionInstanceIds);
 
-    checkAuthorizations(commandContext, Permissions.CREATE_BATCH_DELETE_DECISION_INSTANCES);
+    checkAuthorizations(commandContext, BatchPermissions.CREATE_BATCH_DELETE_DECISION_INSTANCES);
     writeUserOperationLog(commandContext, decisionInstanceIds.size());
 
     BatchEntity batch = createBatch(commandContext, decisionInstanceIds);

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/batch/MigrateProcessInstanceBatchCmd.java
Patch:
@@ -17,7 +17,7 @@
 
 
 import org.camunda.bpm.engine.BadUserRequestException;
-import org.camunda.bpm.engine.authorization.Permissions;
+import org.camunda.bpm.engine.authorization.BatchPermissions;
 import org.camunda.bpm.engine.batch.Batch;
 import org.camunda.bpm.engine.impl.ProcessEngineLogger;
 import org.camunda.bpm.engine.impl.batch.BatchEntity;
@@ -87,7 +87,7 @@ protected void checkAuthorizations(CommandContext commandContext, ProcessDefinit
                                      Collection<String> processInstanceIds) {
 
     for(CommandChecker checker : commandContext.getProcessEngineConfiguration().getCommandCheckers()) {
-      checker.checkCreateBatch(Permissions.CREATE_BATCH_MIGRATE_PROCESS_INSTANCES);
+      checker.checkCreateBatch(BatchPermissions.CREATE_BATCH_MIGRATE_PROCESS_INSTANCES);
     }
 
     super.checkAuthorizations(commandContext, sourceDefinition, targetDefinition, processInstanceIds);

File: engine/src/main/java/org/camunda/bpm/engine/migration/MigrationPlanExecutionBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,6 +18,7 @@
 import java.util.List;
 
 import org.camunda.bpm.engine.AuthorizationException;
+import org.camunda.bpm.engine.authorization.BatchPermissions;
 import org.camunda.bpm.engine.authorization.Permissions;
 import org.camunda.bpm.engine.authorization.Resources;
 import org.camunda.bpm.engine.batch.Batch;
@@ -78,7 +79,7 @@ public interface MigrationPlanExecutionBuilder {
    *   if the user has not all of the following permissions
    *   <ul>
    *     <li>{@link Permissions#MIGRATE_INSTANCE} permission on {@link Resources#PROCESS_DEFINITION} for source and target</li>
-   *     <li>{@link Permissions#CREATE} permission on {@link Resources#BATCH}</li>
+   *     <li>{@link Permissions#CREATE} or {@link BatchPermissions#CREATE_BATCH_MIGRATE_PROCESS_INSTANCES} permission on {@link Resources#BATCH}</li>
    *   </ul>
    */
   Batch executeAsync();

File: engine/src/main/java/org/camunda/bpm/engine/runtime/ModificationBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,6 +18,7 @@
 import java.util.List;
 
 import org.camunda.bpm.engine.AuthorizationException;
+import org.camunda.bpm.engine.authorization.BatchPermissions;
 import org.camunda.bpm.engine.authorization.Permissions;
 import org.camunda.bpm.engine.authorization.Resources;
 import org.camunda.bpm.engine.batch.Batch;
@@ -101,7 +102,7 @@ public interface ModificationBuilder extends InstantiationBuilder<ModificationBu
    * @throws AuthorizationException
    *   if the user has not all of the following permissions
    *   <ul>
-   *     <li>{@link Permissions#CREATE} permission on {@link Resources#BATCH}</li>
+   *     <li>{@link Permissions#CREATE} or {@link BatchPermissions#CREATE_BATCH_MODIFY_PROCESS_INSTANCES} permission on {@link Resources#BATCH}</li>
    *   </ul>
    */
   Batch executeAsync();

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/SingleProcessInstanceModificationAsyncAuthorizationTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import static org.camunda.bpm.engine.authorization.Authorization.ANY;
 import static org.camunda.bpm.engine.authorization.Permissions.CREATE;
-import static org.camunda.bpm.engine.authorization.Permissions.CREATE_BATCH_MODIFY_PROCESS_INSTANCES;
+import static org.camunda.bpm.engine.authorization.BatchPermissions.CREATE_BATCH_MODIFY_PROCESS_INSTANCES;
 import static org.camunda.bpm.engine.authorization.Permissions.CREATE_INSTANCE;
 import static org.camunda.bpm.engine.authorization.Permissions.READ_INSTANCE;
 import static org.camunda.bpm.engine.authorization.Permissions.UPDATE_INSTANCE;

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/batch/DeleteHistoricProcessInstancesBatchAuthorizationTest.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.camunda.bpm.engine.HistoryService;
 import org.camunda.bpm.engine.ProcessEngineConfiguration;
+import org.camunda.bpm.engine.authorization.BatchPermissions;
 import org.camunda.bpm.engine.authorization.Permissions;
 import org.camunda.bpm.engine.authorization.Resources;
 import org.camunda.bpm.engine.batch.Batch;
@@ -100,7 +101,7 @@ public static Collection<AuthorizationScenario[]> scenarios() {
         AuthorizationScenarioWithCount.scenario()
             .withCount(0L)
             .withAuthorizations(
-                grant(Resources.BATCH, "*", "userId", Permissions.CREATE_BATCH_DELETE_FINISHED_PROCESS_INSTANCES),
+                grant(Resources.BATCH, "*", "userId", BatchPermissions.CREATE_BATCH_DELETE_FINISHED_PROCESS_INSTANCES),
                 grant(Resources.PROCESS_DEFINITION, "Process_1", "userId", Permissions.READ_HISTORY, Permissions.DELETE_HISTORY),
                 grant(Resources.PROCESS_DEFINITION, "Process_2", "userId", Permissions.READ_HISTORY, Permissions.DELETE_HISTORY)
             ).succeeds()

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/batch/DeleteProcessInstancesBatchAuthorizationTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.camunda.bpm.engine.test.api.authorization.batch;
 
+import org.camunda.bpm.engine.authorization.BatchPermissions;
 import org.camunda.bpm.engine.authorization.Permissions;
 import org.camunda.bpm.engine.authorization.Resources;
 import org.camunda.bpm.engine.batch.Batch;
@@ -74,7 +75,7 @@ public static Collection<AuthorizationScenario[]> scenarios() {
             ).succeeds(),
         scenario()
             .withAuthorizations(
-                grant(Resources.BATCH, "*", "userId", Permissions.CREATE_BATCH_DELETE_RUNNING_PROCESS_INSTANCES),
+                grant(Resources.BATCH, "*", "userId", BatchPermissions.CREATE_BATCH_DELETE_RUNNING_PROCESS_INSTANCES),
                 grant(Resources.PROCESS_INSTANCE, "processInstance1", "userId", Permissions.ALL),
                 grant(Resources.PROCESS_INSTANCE, "processInstance2", "userId", Permissions.ALL)
             ).succeeds(),

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/batch/SetJobRetriesBatchAuthorizationTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.camunda.bpm.engine.test.api.authorization.batch;
 
+import org.camunda.bpm.engine.authorization.BatchPermissions;
 import org.camunda.bpm.engine.authorization.Permissions;
 import org.camunda.bpm.engine.authorization.Resources;
 import org.camunda.bpm.engine.batch.Batch;
@@ -117,7 +118,7 @@ public static Collection<AuthorizationScenario[]> scenarios() {
         AuthorizationScenarioWithCount.scenario()
             .withCount(5)
             .withAuthorizations(
-                grant(Resources.BATCH, "*", "userId", Permissions.CREATE_BATCH_SET_JOB_RETRIES),
+                grant(Resources.BATCH, "*", "userId", BatchPermissions.CREATE_BATCH_SET_JOB_RETRIES),
                 grant(Resources.PROCESS_DEFINITION, "Process", "userId", Permissions.READ_INSTANCE, Permissions.UPDATE_INSTANCE)
             ).succeeds()
     );

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/batch/creation/CreateDeleteProcessInstancesBatchAuthorizationTest.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.Collections;
 import java.util.List;
 
+import org.camunda.bpm.engine.authorization.BatchPermissions;
 import org.camunda.bpm.engine.authorization.Permissions;
 import org.camunda.bpm.engine.authorization.Resources;
 import org.camunda.bpm.engine.test.api.authorization.util.AuthorizationScenario;
@@ -37,15 +38,15 @@ public static Collection<AuthorizationScenario[]> scenarios() {
             .withoutAuthorizations()
             .failsDueToRequired(
                 grant(Resources.BATCH, "batchId", "userId", Permissions.CREATE),
-                grant(Resources.BATCH, "batchId", "userId", Permissions.CREATE_BATCH_DELETE_RUNNING_PROCESS_INSTANCES)
+                grant(Resources.BATCH, "batchId", "userId", BatchPermissions.CREATE_BATCH_DELETE_RUNNING_PROCESS_INSTANCES)
             ),
         scenario()
             .withAuthorizations(
                 grant(Resources.BATCH, "batchId", "userId", Permissions.CREATE)
             ),
         scenario()
             .withAuthorizations(
-                grant(Resources.BATCH, "batchId", "userId", Permissions.CREATE_BATCH_DELETE_RUNNING_PROCESS_INSTANCES)
+                grant(Resources.BATCH, "batchId", "userId", BatchPermissions.CREATE_BATCH_DELETE_RUNNING_PROCESS_INSTANCES)
             ).succeeds()
     );
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/batch/creation/HistoricProcessInstanceDeletionBatchAuthorizationTest.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.List;
 
 import org.camunda.bpm.engine.ProcessEngineConfiguration;
+import org.camunda.bpm.engine.authorization.BatchPermissions;
 import org.camunda.bpm.engine.authorization.Permissions;
 import org.camunda.bpm.engine.authorization.Resources;
 import org.camunda.bpm.engine.test.RequiredHistoryLevel;
@@ -39,15 +40,15 @@ public static Collection<AuthorizationScenario[]> scenarios() {
             .withoutAuthorizations()
             .failsDueToRequired(
                 grant(Resources.BATCH, "batchId", "userId", Permissions.CREATE),
-                grant(Resources.BATCH, "batchId", "userId", Permissions.CREATE_BATCH_DELETE_FINISHED_PROCESS_INSTANCES)
+                grant(Resources.BATCH, "batchId", "userId", BatchPermissions.CREATE_BATCH_DELETE_FINISHED_PROCESS_INSTANCES)
             ),
         scenario()
             .withAuthorizations(
                 grant(Resources.BATCH, "batchId", "userId", Permissions.CREATE)
             ),
         scenario()
             .withAuthorizations(
-                grant(Resources.BATCH, "batchId", "userId", Permissions.CREATE_BATCH_DELETE_FINISHED_PROCESS_INSTANCES)
+                grant(Resources.BATCH, "batchId", "userId", BatchPermissions.CREATE_BATCH_DELETE_FINISHED_PROCESS_INSTANCES)
             ).succeeds()
     );
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/batch/creation/ModificationBatchAuthorizationTest.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.Collection;
 import java.util.List;
 
+import org.camunda.bpm.engine.authorization.BatchPermissions;
 import org.camunda.bpm.engine.authorization.Permissions;
 import org.camunda.bpm.engine.authorization.Resources;
 import org.camunda.bpm.engine.batch.Batch;
@@ -44,15 +45,15 @@ public static Collection<AuthorizationScenario[]> scenarios() {
             .withoutAuthorizations()
             .failsDueToRequired(
                 grant(Resources.BATCH, "batchId", "userId", Permissions.CREATE),
-                grant(Resources.BATCH, "batchId", "userId", Permissions.CREATE_BATCH_MODIFY_PROCESS_INSTANCES)
+                grant(Resources.BATCH, "batchId", "userId", BatchPermissions.CREATE_BATCH_MODIFY_PROCESS_INSTANCES)
             ),
         scenario()
             .withAuthorizations(
                 grant(Resources.BATCH, "batchId", "userId", Permissions.CREATE)
             ),
         scenario()
             .withAuthorizations(
-                grant(Resources.BATCH, "batchId", "userId", Permissions.CREATE_BATCH_MODIFY_PROCESS_INSTANCES)
+                grant(Resources.BATCH, "batchId", "userId", BatchPermissions.CREATE_BATCH_MODIFY_PROCESS_INSTANCES)
             ).succeeds()
     );
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/batch/creation/SetJobRetriesBatchAuthorizationTest.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.Collections;
 import java.util.List;
 
+import org.camunda.bpm.engine.authorization.BatchPermissions;
 import org.camunda.bpm.engine.authorization.Permissions;
 import org.camunda.bpm.engine.authorization.Resources;
 import org.camunda.bpm.engine.repository.Deployment;
@@ -43,15 +44,15 @@ public static Collection<AuthorizationScenario[]> scenarios() {
             .withoutAuthorizations()
             .failsDueToRequired(
                 grant(Resources.BATCH, "batchId", "userId", Permissions.CREATE),
-                grant(Resources.BATCH, "batchId", "userId", Permissions.CREATE_BATCH_SET_JOB_RETRIES)
+                grant(Resources.BATCH, "batchId", "userId", BatchPermissions.CREATE_BATCH_SET_JOB_RETRIES)
             ),
         scenario()
             .withAuthorizations(
                 grant(Resources.BATCH, "batchId", "userId", Permissions.CREATE)
             ),
         scenario()
             .withAuthorizations(
-                grant(Resources.BATCH, "batchId", "userId", Permissions.CREATE_BATCH_SET_JOB_RETRIES)
+                grant(Resources.BATCH, "batchId", "userId", BatchPermissions.CREATE_BATCH_SET_JOB_RETRIES)
             ).succeeds()
     );
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/externaltask/SetExternalTasksRetriesBatchAuthorizationTest.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.Collection;
 import java.util.List;
 
+import org.camunda.bpm.engine.authorization.BatchPermissions;
 import org.camunda.bpm.engine.authorization.Permissions;
 import org.camunda.bpm.engine.authorization.Resources;
 import org.camunda.bpm.engine.batch.Batch;
@@ -70,7 +71,7 @@ public static Collection<AuthorizationScenario[]> scenarios() {
             grant(Resources.PROCESS_DEFINITION, "processDefinition", "userId", Permissions.READ, Permissions.READ_INSTANCE))
         .failsDueToRequired(
             grant(Resources.BATCH, "batchId", "userId", Permissions.CREATE),
-            grant(Resources.BATCH, "batchId", "userId", Permissions.CREATE_BATCH_SET_EXTERNAL_TASK_RETRIES)),
+            grant(Resources.BATCH, "batchId", "userId", BatchPermissions.CREATE_BATCH_SET_EXTERNAL_TASK_RETRIES)),
       scenario()
         .withAuthorizations(
             grant(Resources.PROCESS_DEFINITION, "processDefinition", "userId", Permissions.READ, Permissions.READ_INSTANCE, Permissions.UPDATE_INSTANCE),
@@ -79,7 +80,7 @@ public static Collection<AuthorizationScenario[]> scenarios() {
       scenario()
         .withAuthorizations(
             grant(Resources.PROCESS_DEFINITION, "processDefinition", "userId", Permissions.READ, Permissions.READ_INSTANCE, Permissions.UPDATE_INSTANCE),
-            grant(Resources.BATCH, "batchId", "userId", Permissions.CREATE_BATCH_SET_EXTERNAL_TASK_RETRIES))
+            grant(Resources.BATCH, "batchId", "userId", BatchPermissions.CREATE_BATCH_SET_EXTERNAL_TASK_RETRIES))
         .succeeds(),
       scenario()
         .withAuthorizations(

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/migration/MigrateProcessInstanceAsyncTest.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.Arrays;
 import java.util.Collection;
 
+import org.camunda.bpm.engine.authorization.BatchPermissions;
 import org.camunda.bpm.engine.authorization.Permissions;
 import org.camunda.bpm.engine.authorization.Resources;
 import org.camunda.bpm.engine.batch.Batch;
@@ -107,7 +108,7 @@ public static Collection<AuthorizationScenario[]> scenarios() {
         .succeeds(),
       scenario()
         .withAuthorizations(
-          grant(Resources.BATCH, "*", "userId", Permissions.CREATE_BATCH_MIGRATE_PROCESS_INSTANCES),
+          grant(Resources.BATCH, "*", "userId", BatchPermissions.CREATE_BATCH_MIGRATE_PROCESS_INSTANCES),
           grant(Resources.PROCESS_INSTANCE, "processInstance", "userId", Permissions.READ),
           grant(Resources.PROCESS_DEFINITION, "*", "userId", Permissions.MIGRATE_INSTANCE))
         .succeeds(),
@@ -116,7 +117,7 @@ public static Collection<AuthorizationScenario[]> scenarios() {
            grant(Resources.PROCESS_INSTANCE, "processInstance", "userId", Permissions.READ))
          .failsDueToRequired(
            grant(Resources.BATCH, "*", "userId", Permissions.CREATE),
-           grant(Resources.BATCH, "*", "userId", Permissions.CREATE_BATCH_MIGRATE_PROCESS_INSTANCES))
+           grant(Resources.BATCH, "*", "userId", BatchPermissions.CREATE_BATCH_MIGRATE_PROCESS_INSTANCES))
          );
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/BatchModificationAuthorizationTest.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.util.Collection;
 
+import org.camunda.bpm.engine.authorization.BatchPermissions;
 import org.camunda.bpm.engine.authorization.Permissions;
 import org.camunda.bpm.engine.authorization.Resources;
 import org.camunda.bpm.engine.batch.Batch;
@@ -68,7 +69,7 @@ public static Collection<AuthorizationScenario[]> scenarios() {
             ).succeeds(),
         scenario()
             .withAuthorizations(
-                grant(Resources.BATCH, "batchId", "userId", Permissions.CREATE_BATCH_MODIFY_PROCESS_INSTANCES),
+                grant(Resources.BATCH, "batchId", "userId", BatchPermissions.CREATE_BATCH_MODIFY_PROCESS_INSTANCES),
                 grant(Resources.PROCESS_INSTANCE, "processInstance1", "userId", Permissions.READ, Permissions.UPDATE),
                 grant(Resources.PROCESS_INSTANCE, "processInstance2", "userId", Permissions.READ, Permissions.UPDATE)
             ).succeeds(),
@@ -83,7 +84,7 @@ public static Collection<AuthorizationScenario[]> scenarios() {
             .succeeds(),
         scenario()
             .withAuthorizations(
-                grant(Resources.BATCH, "batchId", "userId", Permissions.CREATE_BATCH_MODIFY_PROCESS_INSTANCES),
+                grant(Resources.BATCH, "batchId", "userId", BatchPermissions.CREATE_BATCH_MODIFY_PROCESS_INSTANCES),
                 grant(Resources.PROCESS_INSTANCE, "processInstance1", "userId", Permissions.READ, Permissions.UPDATE),
                 grant(Resources.PROCESS_INSTANCE, "processInstance2", "userId", Permissions.READ)
             ).failsDueToRequired(

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/BatchRestartAuthorizationTest.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.util.Collection;
 import org.camunda.bpm.engine.ProcessEngineConfiguration;
+import org.camunda.bpm.engine.authorization.BatchPermissions;
 import org.camunda.bpm.engine.authorization.Permissions;
 import org.camunda.bpm.engine.authorization.Resources;
 import org.camunda.bpm.engine.batch.Batch;
@@ -71,7 +72,7 @@ public static Collection<AuthorizationScenario[]> scenarios() {
         .withoutAuthorizations()
         .failsDueToRequired(
           grant(Resources.BATCH, "*", "userId", Permissions.CREATE),
-          grant(Resources.BATCH, "*", "userId", Permissions.CREATE_BATCH_RESTART_PROCESS_INSTANCES)
+          grant(Resources.BATCH, "*", "userId", BatchPermissions.CREATE_BATCH_RESTART_PROCESS_INSTANCES)
         ),
       scenario()
         .withAuthorizations(
@@ -96,7 +97,7 @@ public static Collection<AuthorizationScenario[]> scenarios() {
         ),
       scenario()
         .withAuthorizations(
-          grant(Resources.BATCH, "*", "userId", Permissions.CREATE_BATCH_RESTART_PROCESS_INSTANCES),
+          grant(Resources.BATCH, "*", "userId", BatchPermissions.CREATE_BATCH_RESTART_PROCESS_INSTANCES),
           grant(Resources.PROCESS_DEFINITION, "Process", "userId", Permissions.READ_HISTORY, Permissions.CREATE_INSTANCE),
           grant(Resources.PROCESS_INSTANCE, "*", "userId", Permissions.CREATE)
         )

File: engine-rest/engine-rest-jaxrs2/src/main/java/org/camunda/bpm/engine/rest/impl/FetchAndLockContextListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -35,6 +35,7 @@ public class FetchAndLockContextListener implements ServletContextListener {
   public void contextInitialized(ServletContextEvent sce) {
     if (fetchAndLockHandler == null) {
       fetchAndLockHandler = lookupFetchAndLockHandler();
+      fetchAndLockHandler.contextInitialized(sce);
       fetchAndLockHandler.start();
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/authorization/Permission.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,7 +22,7 @@
  *  
  * <p>In camunda BPM, multiple permissions are grouped into an {@link Authorization}.
  * For efficient storage and checking of authorizations, the permissons that make
- * up an autorization are coded into a single integer. 
+ * up an authorization are coded into a single integer.
  * The implication of this design is that a permission must have a unique integer value 
  * and it must be a power of two, ie 2^0, 2^1, 2^2, 2^3, 2^4 ...
  * 
@@ -55,7 +55,7 @@
  */
 public interface Permission {
   
-  /** returns the name of the perwission, ie. 'WRITE' */
+  /** returns the name of the permission, ie. 'WRITE' */
   String getName();
   
   /** returns the unique numeric value of the permission.

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AbstractSetJobsRetriesBatchCmd.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,6 +16,7 @@
 package org.camunda.bpm.engine.impl.cmd;
 
 import org.camunda.bpm.engine.BadUserRequestException;
+import org.camunda.bpm.engine.authorization.Permissions;
 import org.camunda.bpm.engine.batch.Batch;
 import org.camunda.bpm.engine.history.UserOperationLogEntry;
 import org.camunda.bpm.engine.impl.batch.BatchEntity;
@@ -44,7 +45,7 @@ public Batch execute(CommandContext commandContext) {
 
     ensureNotEmpty(BadUserRequestException.class, "jobIds", jobIds);
     EnsureUtil.ensureGreaterThanOrEqual("Retries count", retries, 0);
-    checkAuthorizations(commandContext);
+    checkAuthorizations(commandContext, Permissions.CREATE_BATCH_SET_JOB_RETRIES);
     writeUserOperationLog(commandContext,
         retries,
         jobIds.size(),

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/batch/DeleteHistoricProcessInstancesBatchCmd.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,6 +16,7 @@
 package org.camunda.bpm.engine.impl.cmd.batch;
 
 import org.camunda.bpm.engine.BadUserRequestException;
+import org.camunda.bpm.engine.authorization.Permissions;
 import org.camunda.bpm.engine.batch.Batch;
 import org.camunda.bpm.engine.history.HistoricProcessInstance;
 import org.camunda.bpm.engine.history.HistoricProcessInstanceQuery;
@@ -81,7 +82,7 @@ public Batch execute(CommandContext commandContext) {
     List<String> processInstanceIds = collectHistoricProcessInstanceIds();
 
     ensureNotEmpty(BadUserRequestException.class, "historicProcessInstanceIds", processInstanceIds);
-    checkAuthorizations(commandContext);
+    checkAuthorizations(commandContext, Permissions.CREATE_BATCH_DELETE_FINISHED_PROCESS_INSTANCES);
     writeUserOperationLog(commandContext,
         deleteReason,
         processInstanceIds.size(),

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/batch/DeleteProcessInstanceBatchCmd.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,6 +16,7 @@
 package org.camunda.bpm.engine.impl.cmd.batch;
 
 import org.camunda.bpm.engine.BadUserRequestException;
+import org.camunda.bpm.engine.authorization.Permissions;
 import org.camunda.bpm.engine.batch.Batch;
 import org.camunda.bpm.engine.history.UserOperationLogEntry;
 import org.camunda.bpm.engine.impl.ProcessInstanceQueryImpl;
@@ -80,7 +81,7 @@ public Batch execute(CommandContext commandContext) {
     List<String> processInstanceIds = collectProcessInstanceIds();
 
     ensureNotEmpty(BadUserRequestException.class, "processInstanceIds", processInstanceIds);
-    checkAuthorizations(commandContext);
+    checkAuthorizations(commandContext, Permissions.CREATE_BATCH_DELETE_RUNNING_PROCESS_INSTANCES);
     writeUserOperationLog(commandContext,
         deleteReason,
         processInstanceIds.size(),

File: engine/src/main/java/org/camunda/bpm/engine/impl/dmn/cmd/DeleteHistoricDecisionInstancesBatchCmd.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,7 +24,6 @@
 
 import org.camunda.bpm.engine.BadUserRequestException;
 import org.camunda.bpm.engine.authorization.Permissions;
-import org.camunda.bpm.engine.authorization.Resources;
 import org.camunda.bpm.engine.batch.Batch;
 import org.camunda.bpm.engine.history.HistoricDecisionInstance;
 import org.camunda.bpm.engine.history.HistoricDecisionInstanceQuery;
@@ -78,7 +77,7 @@ public Batch execute(CommandContext commandContext) {
     List<String> decisionInstanceIds = collectHistoricDecisionInstanceIds();
     ensureNotEmpty(BadUserRequestException.class, "historicDecisionInstanceIds", decisionInstanceIds);
 
-    checkAuthorizations(commandContext);
+    checkAuthorizations(commandContext, Permissions.CREATE_BATCH_DELETE_DECISION_INSTANCES);
     writeUserOperationLog(commandContext, decisionInstanceIds.size());
 
     BatchEntity batch = createBatch(commandContext, decisionInstanceIds);

File: engine-spring/src/main/java/org/camunda/bpm/engine/spring/SpringTransactionsProcessEngineConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: engine-spring/src/test/java/org/camunda/bpm/engine/spring/test/autodeployment/CustomNameSpringEngineConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2019 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: engine-spring/src/test/java/org/camunda/bpm/engine/spring/test/autodeployment/SpringAutoDeployTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2013-2018 camunda services GmbH and various authors (info@camunda.com)
+ * Copyright © 2013-2019 camunda services GmbH and various authors (info@camunda.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: clients/java/client/src/it/java/org/camunda/bpm/client/topic/TopicSubscriptionIT.java
Patch:
@@ -258,7 +258,6 @@ public void shouldFilterByNoTenantId() {
   }
 
   @Test
-  @Ignore("CAM-9577")
   public void shouldNotApplyAnyFilter() {
     // given
     engineRule.startProcessInstance(processDefinition.getId());

File: clients/java/client/src/main/java/org/camunda/bpm/client/topic/impl/TopicSubscriptionImpl.java
Patch:
@@ -111,7 +111,6 @@ public TopicSubscription setProcessDefinitionKeyIn(List<String> processDefinitio
   }
 
   public boolean isWithoutTenantId() {
-    withoutTenantId = true;
     return withoutTenantId;
   }
 

File: spring-boot-starter/starter-webapp-ee/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/WebappEeTest.java
Patch:
@@ -49,7 +49,7 @@ public void testLicenseEndpointAvailable() {
 
   @Test
   public void testAdminEndpointAvailable() {
-    final ResponseEntity<String> response = testRestTemplate.getForEntity("/app/admin", String.class);
+    final ResponseEntity<String> response = testRestTemplate.getForEntity("/app/admin/", String.class);
 
     assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
   }

File: spring-boot-starter/starter-webapp/src/test/java/org/camunda/bpm/spring/boot/starter/webapp/WebappTest.java
Patch:
@@ -48,7 +48,7 @@ public void testLicenseEndpointNotAvailable() {
 
   @Test
   public void testAdminEndpointAvailable() {
-    final ResponseEntity<String> response = testRestTemplate.getForEntity("/app/admin", String.class);
+    final ResponseEntity<String> response = testRestTemplate.getForEntity("/app/admin/", String.class);
 
     assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
   }

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/CamundaBpmAutoConfiguration.java
Patch:
@@ -19,14 +19,12 @@
 import org.camunda.bpm.engine.impl.interceptor.CommandExecutor;
 import org.camunda.bpm.engine.spring.ProcessEngineFactoryBean;
 import org.camunda.bpm.engine.spring.SpringProcessEngineServicesConfiguration;
-import org.camunda.bpm.model.bpmn.instance.camunda.CamundaProperties;
 import org.camunda.bpm.spring.boot.starter.event.ProcessApplicationEventPublisher;
 import org.camunda.bpm.spring.boot.starter.property.CamundaBpmProperties;
 import org.camunda.bpm.spring.boot.starter.property.ManagementProperties;
 import org.camunda.bpm.spring.boot.starter.util.CamundaBpmVersion;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
-import org.springframework.boot.autoconfigure.cache.CacheProperties;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
@@ -46,6 +44,7 @@
     CamundaBpmPluginConfiguration.class,
     SpringProcessEngineServicesConfiguration.class
 })
+@Configuration
 @ConditionalOnProperty(prefix = CamundaBpmProperties.PREFIX, name = "enabled", matchIfMissing = true)
 @AutoConfigureAfter(HibernateJpaAutoConfiguration.class)
 public class CamundaBpmAutoConfiguration {

File: spring-boot-starter/starter/src/test/java/org/camunda/bpm/spring/boot/starter/CamundaNoJpaAutoConfigurationIT.java
Patch:
@@ -22,8 +22,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import javax.transaction.Transactional;
-
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.spring.boot.starter.test.nonpa.TestApplication;
 import org.camunda.bpm.spring.boot.starter.test.nonpa.jpa.domain.TestEntity;
@@ -39,7 +37,6 @@
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = { TestApplication.class }, webEnvironment = WebEnvironment.NONE)
 @ActiveProfiles("nojpa")
-@Transactional
 public class CamundaNoJpaAutoConfigurationIT extends AbstractCamundaAutoConfigurationIT {
 
   @Autowired

File: spring-boot-starter/starter/src/test/java/org/camunda/bpm/spring/boot/starter/jdbc/HistoryLevelDeterminatorJdbcTemplateImplIT.java
Patch:
@@ -17,8 +17,6 @@
 
 import static org.junit.Assert.assertEquals;
 
-import javax.transaction.Transactional;
-
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -27,7 +25,6 @@
 
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = { HistoryLevelDeterminatorJdbcTemplateImplTestApplication.class })
-@Transactional
 public class HistoryLevelDeterminatorJdbcTemplateImplIT {
 
   @Autowired

File: spring-boot-starter/starter-test/src/main/java/org/camunda/bpm/spring/boot/starter/test/helper/StandaloneInMemoryTestConfiguration.java
Patch:
@@ -20,6 +20,7 @@
 import org.camunda.bpm.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration;
 import org.camunda.bpm.engine.test.ProcessEngineRule;
 import org.camunda.bpm.engine.test.mock.MockExpressionManager;
+import org.camunda.bpm.engine.impl.history.HistoryLevel;
 
 import java.util.Arrays;
 import java.util.Collections;
@@ -43,6 +44,7 @@ public StandaloneInMemoryTestConfiguration(List<ProcessEnginePlugin> plugins) {
     expressionManager = new MockExpressionManager();
     databaseSchemaUpdate = DB_SCHEMA_UPDATE_DROP_CREATE;
     isDbMetricsReporterActivate = false;
+    historyLevel = HistoryLevel.HISTORY_LEVEL_FULL;
 
     getProcessEnginePlugins().addAll(plugins);
   }

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/property/WebappProperty.java
Patch:
@@ -5,8 +5,7 @@
 public class WebappProperty {
   private boolean indexRedirectEnabled = true;
 
-  // TODO: META-INF/resources/webjars/camunda}")
-  private String webjarClasspath = "/META-INF/resources";
+  private String webjarClasspath = "/META-INF/resources/webjars/camunda";
 
   private String securityConfigFile = "/securityFilterRules.json";
 

File: engine/src/main/java/org/camunda/bpm/application/ProcessApplication.java
Patch:
@@ -13,6 +13,7 @@
 package org.camunda.bpm.application;
 
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -26,6 +27,7 @@
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)
+@Inherited
 public @interface ProcessApplication {
 
   String DEFAULT_META_INF_PROCESSES_XML = "META-INF/processes.xml";

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/ear/TestPaAnnotatedEjb.java
Patch:
@@ -24,7 +24,6 @@
 import org.jboss.shrinkwrap.api.spec.JavaArchive;
 import org.junit.Assert;
 import org.junit.Test;
-import org.junit.Ignore;
 import org.junit.runner.RunWith;
 
 /**
@@ -66,7 +65,6 @@ public static EnterpriseArchive paAsEjbModule() {
   }
 
   @Test
-  @Ignore
   public void testPaAnnotatedEjb() {
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("process1");
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/cleanup/HistoryCleanupSchedulerBatchesTest.java
Patch:
@@ -42,7 +42,7 @@
 /**
  * @author Tassilo Weidner
  */
-public class HistoryCleanupScheduleBatchesTest extends AbstractHistoryCleanupSchedulerTest {
+public class HistoryCleanupSchedulerBatchesTest extends AbstractHistoryCleanupSchedulerTest {
 
   public ProcessEngineBootstrapRule bootstrapRule = new ProcessEngineBootstrapRule() {
     public ProcessEngineConfiguration configureEngine(ProcessEngineConfigurationImpl configuration) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -264,6 +264,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement(POSTGRES, "deleteHistoricVariableInstancesByRemovalTime", "deleteHistoricVariableInstancesByRemovalTime_postgres_or_db2");
     addDatabaseSpecificStatement(POSTGRES, "deleteUserOperationLogByRemovalTime", "deleteUserOperationLogByRemovalTime_postgres_or_db2");
     addDatabaseSpecificStatement(POSTGRES, "deleteByteArraysByRemovalTime", "deleteByteArraysByRemovalTime_postgres_or_db2");
+    addDatabaseSpecificStatement(POSTGRES, "deleteHistoricBatchesByRemovalTime", "deleteHistoricBatchesByRemovalTime_postgres_or_db2");
 
     constants = new HashMap<String, String>();
     constants.put("constant.event", "'event'");
@@ -331,6 +332,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement(ORACLE, "deleteHistoricVariableInstancesByRemovalTime", "deleteHistoricVariableInstancesByRemovalTime_oracle");
     addDatabaseSpecificStatement(ORACLE, "deleteUserOperationLogByRemovalTime", "deleteUserOperationLogByRemovalTime_oracle");
     addDatabaseSpecificStatement(ORACLE, "deleteByteArraysByRemovalTime", "deleteByteArraysByRemovalTime_oracle");
+    addDatabaseSpecificStatement(ORACLE, "deleteHistoricBatchesByRemovalTime", "deleteHistoricBatchesByRemovalTime_oracle");
 
     constants = new HashMap<String, String>();
     constants.put("constant.event", "cast('event' as nvarchar2(255))");
@@ -402,6 +404,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement(DB2, "deleteHistoricVariableInstancesByRemovalTime", "deleteHistoricVariableInstancesByRemovalTime_postgres_or_db2");
     addDatabaseSpecificStatement(DB2, "deleteUserOperationLogByRemovalTime", "deleteUserOperationLogByRemovalTime_postgres_or_db2");
     addDatabaseSpecificStatement(DB2, "deleteByteArraysByRemovalTime", "deleteByteArraysByRemovalTime_postgres_or_db2");
+    addDatabaseSpecificStatement(DB2, "deleteHistoricBatchesByRemovalTime", "deleteHistoricBatchesByRemovalTime_postgres_or_db2");
 
     constants = new HashMap<String, String>();
     constants.put("constant.event", "'event'");

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/cleanup/HistoryCleanupScheduleBatchesTest.java
Patch:
@@ -34,6 +34,8 @@
 import java.util.List;
 
 import static org.apache.commons.lang.time.DateUtils.addDays;
+import static org.apache.commons.lang.time.DateUtils.addSeconds;
+import static org.camunda.bpm.engine.impl.jobexecutor.historycleanup.HistoryCleanupJobHandlerConfiguration.START_DELAY;
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;
 
@@ -169,7 +171,7 @@ public void shouldScheduleToLater() {
     Job job = historyService.findHistoryCleanupJobs().get(0);
 
     // then
-    assertThat(job.getDuedate(), is(removalTime));
+    assertThat(job.getDuedate(), is(addSeconds(removalTime, START_DELAY)));
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/historycleanup/HistoryCleanupRemovalTime.java
Patch:
@@ -75,7 +75,7 @@ protected DbOperation performBatchCleanup() {
   }
 
   protected boolean isDmnEnabled() {
-    return Context.getCommandContext().getProcessEngineConfiguration()
+    return Context.getProcessEngineConfiguration()
       .isDmnEnabled();
   }
 
@@ -109,7 +109,7 @@ protected boolean isMaxBatchExceeded() {
   }
 
   public int getBatchSizePerDeleteOperation() {
-    return Context.getCommandContext().getProcessEngineConfiguration()
+    return Context.getProcessEngineConfiguration()
       .getHistoryCleanupBatchSize();
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -235,6 +235,7 @@ public BpmnParse(BpmnParser parser) {
     this.expressionManager = parser.getExpressionManager();
     this.parseListeners = parser.getParseListeners();
     setSchemaResource(ReflectUtil.getResourceUrlAsString(BpmnParser.BPMN_20_SCHEMA_LOCATION));
+    setEnableXxeProcessing(Context.getProcessEngineConfiguration().isEnableXxeProcessing());
   }
 
   public BpmnParse deployment(DeploymentEntity deployment) {

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/parse/BpmnParseTest.java
Patch:
@@ -41,7 +41,6 @@
 import org.camunda.bpm.engine.impl.test.TestHelper;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
 import org.camunda.bpm.engine.test.Deployment;
-import org.junit.Ignore;
 import org.junit.Test;
 
 /**
@@ -872,7 +871,7 @@ public void testParseProcessDefinitionStartable() {
     assertFalse(processDefinitions.get(0).isStartableInTasklist());
   }
 
-  public void testXXEProcessing() {
+  public void testXxeProcessing() {
     try {
       String resource = TestHelper.getBpmnProcessDefinitionResource(getClass(), "testParseProcessDefinitionXXE");
       repositoryService.createDeployment().name(resource).addClasspathResource(resource).deploy();

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/HistoryCleanupOnEngineBootstrapTest.java
Patch:
@@ -248,6 +248,7 @@ public void testHistoryCleanupJobScheduled() throws ParseException {
 
   @Test
   public void testBatchWindowOneDayOfWeek() throws ParseException {
+    ClockUtil.setCurrentTime(sdf.parse("2018-05-14T22:00:00"));       //monday
     //given
     final ProcessEngineConfigurationImpl configuration = (ProcessEngineConfigurationImpl)ProcessEngineConfiguration.createStandaloneInMemProcessEngineConfiguration();
     //we have batch window only once per week - Monday afternoon
@@ -256,7 +257,6 @@ public void testBatchWindowOneDayOfWeek() throws ParseException {
 
     //when
     //we're on Monday evening
-    ClockUtil.setCurrentTime(sdf.parse("2018-05-14T22:00:00"));       //monday
     //and we bootstrap the engine
     ProcessEngine engine = configuration.buildProcessEngine();
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricProcessInstanceManager.java
Patch:
@@ -263,12 +263,12 @@ public Map<Class<? extends DbEntity>, DbOperation> deleteHistoricProcessInstance
     DbOperation deleteAttachments = commandContext.getAttachmentManager()
       .deleteAttachmentsByRemovalTime(removalTime, minuteFrom, minuteTo, batchSize);
 
-    deleteOperations.put(deleteVariableInstances.getEntityType(), deleteAttachments);
+    deleteOperations.put(deleteAttachments.getEntityType(), deleteAttachments);
 
     DbOperation deleteByteArrays = commandContext.getByteArrayManager()
       .deleteByteArraysByRemovalTime(removalTime, minuteFrom, minuteTo, batchSize);
 
-    deleteOperations.put(deleteAttachments.getEntityType(), deleteByteArrays);
+    deleteOperations.put(deleteByteArrays.getEntityType(), deleteByteArrays);
 
     Map<String, Object> parameters = new HashMap<>();
     parameters.put("removalTime", removalTime);

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricVariableInstanceManager.java
Patch:
@@ -159,7 +159,7 @@ public DbOperation deleteHistoricVariableInstancesByRemovalTime(Date removalTime
     parameters.put("batchSize", batchSize);
 
     return getDbEntityManager()
-      .deletePreserveOrder(HistoricProcessInstanceEntity.class, "deleteHistoricVariableInstancesByRemovalTime",
+      .deletePreserveOrder(HistoricVariableInstanceEntity.class, "deleteHistoricVariableInstancesByRemovalTime",
         new ListQueryParameterObject(parameters, 0, batchSize));
   }
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/history/CustomHistoryLevelIncidentTest.java
Patch:
@@ -82,7 +82,7 @@ public static Collection<Object[]> data() {
 
   public ProcessEngineBootstrapRule bootstrapRule = new ProcessEngineBootstrapRule() {
     public ProcessEngineConfiguration configureEngine(ProcessEngineConfigurationImpl processEngineConfiguration) {
-      processEngineConfiguration.setJdbcUrl("jdbc:h2:mem:" + getClass().getSimpleName());
+      processEngineConfiguration.setJdbcUrl("jdbc:h2:mem:" + CustomHistoryLevelIncident.class.getSimpleName());
       List<HistoryLevel> levels = new ArrayList<>();
       levels.add(customHistoryLevelIncident);
       processEngineConfiguration.setCustomHistoryLevels(levels);
@@ -299,4 +299,4 @@ protected BpmnModelInstance createModelInstance() {
         .done();
     return instance;
   }
-}
\ No newline at end of file
+}

File: webapps/src/main/java/org/camunda/bpm/webapp/impl/security/filter/util/CsrfConstants.java
Patch:
@@ -7,6 +7,8 @@
  */
 public final class CsrfConstants {
 
+  public static final String CSRF_SESSION_MUTEX = "CAMUNDA_SESSION_MUTEX";
+
   public static final String CSRF_TOKEN_SESSION_ATTR_NAME = "CAMUNDA_CSRF_TOKEN";
 
   public static final String CSRF_TOKEN_HEADER_NAME = "X-XSRF-TOKEN";

File: engine/src/main/java/org/camunda/bpm/engine/impl/runtime/DefaultCorrelationHandler.java
Patch:
@@ -129,7 +129,9 @@ protected List<CorrelationHandlerResult> correlateMessageToExecutions(CommandCon
 
     for (Execution matchingExecution : matchingExecutions) {
       CorrelationHandlerResult correlationResult = CorrelationHandlerResult.matchedExecution((ExecutionEntity) matchingExecution);
-      result.add(correlationResult);
+      if (!commandContext.getDbEntityManager().isDeleted(correlationResult.getExecutionEntity())) {
+        result.add(correlationResult);
+      }
     }
 
     return result;

File: typed-values/src/main/java/org/camunda/bpm/engine/variable/impl/type/FileValueTypeImpl.java
Patch:
@@ -41,6 +41,9 @@ public FileValueTypeImpl() {
 
   @Override
   public TypedValue createValue(Object value, Map<String, Object> valueInfo) {
+    if (valueInfo == null) {
+      throw new IllegalArgumentException("Cannot create file without valueInfo.");
+    }
     Object filename = valueInfo.get(VALUE_INFO_FILE_NAME);
     if (filename == null) {
       throw new IllegalArgumentException("Cannot create file without filename! Please set a name into ValueInfo with key " + VALUE_INFO_FILE_NAME);

File: commons/typed-values/src/main/java/org/camunda/bpm/engine/variable/impl/type/FileValueTypeImpl.java
Patch:
@@ -41,6 +41,9 @@ public FileValueTypeImpl() {
 
   @Override
   public TypedValue createValue(Object value, Map<String, Object> valueInfo) {
+    if (valueInfo == null) {
+      throw new IllegalArgumentException("Cannot create file without valueInfo.");
+    }
     Object filename = valueInfo.get(VALUE_INFO_FILE_NAME);
     if (filename == null) {
       throw new IllegalArgumentException("Cannot create file without filename! Please set a name into ValueInfo with key " + VALUE_INFO_FILE_NAME);

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TimerEntity.java
Patch:
@@ -59,6 +59,7 @@ protected TimerEntity(TimerEntity te) {
     processDefinitionId = te.processDefinitionId;
     processDefinitionKey = te.processDefinitionKey;
     tenantId = te.tenantId;
+    priority = te.priority;
   }
 
   @Override

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/timer/StartTimerEventTest.java
Patch:
@@ -150,10 +150,8 @@ public void testCycleWithLimitStartTimerEvent() throws Exception {
 
   }
 
-
-  // TODO: Consecutive jobs produced by a Timer Cycle don't have the defined JobPriority (https://app.camunda.com/jira/browse/SUPPORT-4899)
   @Deployment
-  public void FAILING_testPriorityInTimerCycleEvent() throws Exception {
+  public void testPriorityInTimerCycleEvent() throws Exception {
     ClockUtil.setCurrentTime(new Date());
 
     // After process start, there should be timer created

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -1132,7 +1132,7 @@ protected HistoricExternalTaskLogEntity initHistoricExternalTaskLog(ExternalTask
   }
 
   protected boolean isRootProcessInstance(HistoricProcessInstanceEventEntity evt) {
-    return evt.getRootProcessInstanceId().equals(evt.getProcessInstanceId());
+    return evt.getProcessInstanceId().equals(evt.getRootProcessInstanceId());
   }
 
   protected boolean isHistoryRemovalTimeStrategyProcessStart() {

File: clients/java/client/src/main/java/org/camunda/bpm/client/topic/impl/TopicSubscriptionBuilderImpl.java
Patch:
@@ -58,6 +58,7 @@ public TopicSubscriptionBuilder handler(ExternalTaskHandler externalTaskHandler)
   }
 
   public TopicSubscriptionBuilder variables(String... variableNames) {
+    ensureNotNull(variableNames, "variableNames");
     this.variableNames = Arrays.asList(variableNames);
     return this;
   }

File: clients/java/client/src/main/java/org/camunda/bpm/client/topic/impl/TopicSubscriptionBuilderImpl.java
Patch:
@@ -73,6 +73,7 @@ public TopicSubscriptionBuilder processDefinitionId(String processDefinitionId)
   }
 
   public TopicSubscriptionBuilder processDefinitionIdIn(String... processDefinitionIds) {
+    ensureNotNull(processDefinitionIds, "processDefinitionIds");
     this.processDefinitionIds = Arrays.asList(processDefinitionIds);
     return this;
   }
@@ -83,6 +84,7 @@ public TopicSubscriptionBuilder processDefinitionKey(String processDefinitionKey
   }
 
   public TopicSubscriptionBuilder processDefinitionKeyIn(String... processDefinitionKeys) {
+    ensureNotNull(processDefinitionKeys, "processDefinitionKeys");
     this.processDefinitionKeys = Arrays.asList(processDefinitionKeys);
     return this;
   }

File: clients/java/client/src/it/java/org/camunda/bpm/client/topic/TopicSubscriptionIT.java
Patch:
@@ -286,7 +286,7 @@ public void shouldFilterByNotExistingVariable() {
     ExternalTask taskOne = handler.getHandledTasks().get(0);
     assertThat(taskOne.getAllVariables().size()).isEqualTo(0);
 
-    ExternalTask taskTwo = handler.getHandledTasks().get(0);
+    ExternalTask taskTwo = handler.getHandledTasks().get(1);
     assertThat(taskTwo.getAllVariables().size()).isEqualTo(0);
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/history/CustomHistoryLevelWithoutUserOperationLogTest.java
Patch:
@@ -109,7 +109,6 @@ public void setUp() throws Exception {
   @After
   public void tearDown() throws Exception {
     identityService.clearAuthentication();
-    managementService.purge();
   }
 
   @Test

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ExternalTaskRestServiceInteractionTest.java
Patch:
@@ -145,7 +145,6 @@ public void setUpRuntimeData() {
     when(fetchTopicBuilder.processDefinitionKeyIn(any(String.class))).thenReturn(fetchTopicBuilder);
     when(fetchTopicBuilder.processInstanceVariableEquals(anyMapOf(String.class, Object.class))).thenReturn(fetchTopicBuilder);
     when(fetchTopicBuilder.withoutTenantId()).thenReturn(fetchTopicBuilder);
-    when(fetchTopicBuilder.tenantId(any(String.class))).thenReturn(fetchTopicBuilder);
     when(fetchTopicBuilder.tenantIdIn(any(String.class))).thenReturn(fetchTopicBuilder);
 
     Batch batch = createMockBatch();
@@ -350,7 +349,6 @@ public void testFetchAndLockWithTenant() {
     inOrder.verify(externalTaskService).fetchAndLock(5, "aWorkerId", true);
     inOrder.verify(fetchTopicBuilder).topic("aTopicName", 12354L);
     inOrder.verify(fetchTopicBuilder).withoutTenantId();
-    inOrder.verify(fetchTopicBuilder).tenantId("tenant1");
     inOrder.verify(fetchTopicBuilder).tenantIdIn("tenant2");
     inOrder.verify(fetchTopicBuilder).execute();
     verifyNoMoreInteractions(fetchTopicBuilder, externalTaskService);

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExternalTaskManager.java
Patch:
@@ -65,14 +65,13 @@ public List<ExternalTaskEntity> findExternalTasksByProcessInstanceId(String proc
     return getDbEntityManager().selectList("selectExternalTasksByProcessInstanceId", processInstanceId);
   }
 
-  public List<ExternalTaskEntity> selectExternalTasksForTopics(Collection<TopicFetchInstruction> queryFilters, boolean filterByBusinessKey, int maxResults, boolean usePriority) {
+  public List<ExternalTaskEntity> selectExternalTasksForTopics(Collection<TopicFetchInstruction> queryFilters, int maxResults, boolean usePriority) {
     if (queryFilters.isEmpty()) {
       return new ArrayList<ExternalTaskEntity>();
     }
 
     Map<String, Object> parameters = new HashMap<String, Object>();
     parameters.put("topics", queryFilters);
-    parameters.put("businessKeyFilter", filterByBusinessKey);
     parameters.put("now", ClockUtil.getCurrentTime());
     parameters.put("applyOrdering", usePriority);
     List<QueryOrderingProperty> orderingProperties = new ArrayList<QueryOrderingProperty>();

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/history/CustomHistoryLevelWithoutUserOperationLogTest.java
Patch:
@@ -109,7 +109,6 @@ public void setUp() throws Exception {
   @After
   public void tearDown() throws Exception {
     identityService.clearAuthentication();
-    managementService.purge();
   }
 
   @Test

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/EnginePersistenceLogger.java
Patch:
@@ -311,7 +311,7 @@ public ProcessEngineException illegalValueForUserIdException(String id, String e
 
   public AuthorizationException requiredCamundaAdminException() {
     return new AuthorizationException(
-      exceptionMessage("029", "Required admin authenticated group."));
+      exceptionMessage("029", "Required admin authenticated group or user."));
   }
 
   public void createChildExecution(ExecutionEntity child, ExecutionEntity parent) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/plugin/AdministratorAuthorizationPlugin.java
Patch:
@@ -54,6 +54,9 @@ public void postInit(ProcessEngineConfigurationImpl processEngineConfiguration)
     if (administratorGroupName != null && administratorGroupName.length() > 0) {
       processEngineConfiguration.getAdminGroups().add(administratorGroupName);
     }
+    if (administratorUserName != null && administratorUserName.length() > 0) {
+      processEngineConfiguration.getAdminUsers().add(administratorUserName);
+    }
   }
 
   public void postProcessEngineBuild(ProcessEngine processEngine) {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/DeploymentAuthorizationTest.java
Patch:
@@ -42,7 +42,7 @@
  */
 public class DeploymentAuthorizationTest extends AuthorizationTest {
 
-  private static final String REQUIRED_ADMIN_AUTH_EXCEPTION = "ENGINE-03029 Required admin authenticated group.";
+  private static final String REQUIRED_ADMIN_AUTH_EXCEPTION = "ENGINE-03029 Required admin authenticated group or user.";
   protected static final String FIRST_RESOURCE = "org/camunda/bpm/engine/test/api/oneTaskProcess.bpmn20.xml";
   protected static final String SECOND_RESOURCE = "org/camunda/bpm/engine/test/api/authorization/messageBoundaryEventProcess.bpmn20.xml";
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/ManagementAuthorizationTest.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class ManagementAuthorizationTest extends AuthorizationTest {
 
-  private static final String REQUIRED_ADMIN_AUTH_EXCEPTION = "ENGINE-03029 Required admin authenticated group.";
+  private static final String REQUIRED_ADMIN_AUTH_EXCEPTION = "ENGINE-03029 Required admin authenticated group or user.";
 
   // get table count //////////////////////////////////////////////
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/HistoryCleanupAuthorizationTest.java
Patch:
@@ -92,7 +92,7 @@ public void testHistoryCleanupWithoutAuthorization() {
     } catch (AuthorizationException e) {
       // then
       String message = e.getMessage();
-      assertTextPresent("ENGINE-03029 Required admin authenticated group.", message);
+      assertTextPresent("ENGINE-03029 Required admin authenticated group or user.", message);
     }
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/identity/AdminGroupsTest.java
Patch:
@@ -99,7 +99,7 @@ public void testWithoutAdminGroup() {
     processEngineConfiguration.setAuthorizationEnabled(true);
 
     thrown.expect(AuthorizationException.class);
-    thrown.expectMessage("Required admin authenticated group.");
+    thrown.expectMessage("Required admin authenticated group or user.");
 
     // when
     identityService.unlockUser("jonny1");

File: engine/src/test/java/org/camunda/bpm/engine/test/api/identity/IdentityServiceAuthorizationsTest.java
Patch:
@@ -277,7 +277,7 @@ public void testUserUnlockWithoutAuthorization() throws ParseException {
       identityService.unlockUser(lockedUser.getId());
       fail("expected exception");
     } catch (AuthorizationException e) {
-      assertTrue(e.getMessage().contains("ENGINE-03029 Required admin authenticated group."));
+      assertTrue(e.getMessage().contains("ENGINE-03029 Required admin authenticated group or user."));
     }
 
     // return to god-mode

File: webapps/src/main/java/org/camunda/bpm/webapp/impl/security/auth/UserAuthenticationResource.java
Patch:
@@ -29,6 +29,7 @@
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.identity.Group;
 import org.camunda.bpm.engine.identity.Tenant;
+import org.camunda.bpm.engine.identity.User;
 import org.camunda.bpm.engine.rest.exception.InvalidRequestException;
 import org.camunda.bpm.webapp.impl.util.ProcessEngineUtil;
 
@@ -88,7 +89,8 @@ public Response doLogin(
     }
 
     AuthenticationService authenticationService = new AuthenticationService();
-    UserAuthentication authentication = (UserAuthentication) authenticationService.createAuthenticate(processEngine, username, null, null);
+    User user = processEngine.getIdentityService().createUserQuery().userId(username).singleResult();
+    UserAuthentication authentication = (UserAuthentication) authenticationService.createAuthenticate(processEngine, user.getId(), null, null);
 
     Set<String> authorizedApps = authentication.getAuthorizedApps();
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/HistoryCleanupTest.java
Patch:
@@ -106,13 +106,12 @@ public class HistoryCleanupTest {
   protected static final String ONE_TASK_CASE = "case";
   private static final int NUMBER_OF_THREADS = 3;
 
-  private static final SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
-
   protected String defaultStartTime;
   protected String defaultEndTime;
   protected int defaultBatchSize;
 
   protected boolean isHierarchicalCleanup;
+  protected boolean isHierarchicalCleanupInitValue;
 
   @Parameterized.Parameters(name = "Hierachical History Cleanup: {0}")
   public static Collection<Object[]> data() {
@@ -163,6 +162,7 @@ public void init() {
     defaultStartTime = processEngineConfiguration.getHistoryCleanupBatchWindowStartTime();
     defaultEndTime = processEngineConfiguration.getHistoryCleanupBatchWindowEndTime();
     defaultBatchSize = processEngineConfiguration.getHistoryCleanupBatchSize();
+    isHierarchicalCleanupInitValue = processEngineConfiguration.isHierarchicalHistoryCleanup();
     processEngineConfiguration.setHierarchicalHistoryCleanup(isHierarchicalCleanup);
   }
 
@@ -172,6 +172,7 @@ public void clearDatabase() {
     processEngineConfiguration.setHistoryCleanupBatchWindowStartTime(defaultStartTime);
     processEngineConfiguration.setHistoryCleanupBatchWindowEndTime(defaultEndTime);
     processEngineConfiguration.setHistoryCleanupBatchSize(defaultBatchSize);
+    processEngineConfiguration.setHierarchicalHistoryCleanup(isHierarchicalCleanupInitValue);
 
     processEngineConfiguration.getCommandExecutorTxRequired().execute(new Command<Void>() {
       public Void execute(CommandContext commandContext) {

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/async/FoxJobRetryCmdTest.java
Patch:
@@ -620,6 +620,8 @@ public void testEventBasedGateway() throws Exception {
           .camundaAsyncBefore()
           .camundaFailedJobRetryTimeCycle("R5/PT5M")
           .camundaExecutionListenerClass("start", "foo")
+        .intermediateCatchEvent()
+          .condition("${true}")
         .endEvent()
         .done();
 

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/async/FoxJobRetryCmdTest.java
Patch:
@@ -579,7 +579,7 @@ public void testExclusiveGateway() throws Exception {
   public void testInclusiveGateway() throws Exception {
     BpmnModelInstance bpmnModelInstance = Bpmn.createExecutableProcess("process")
         .startEvent()
-        .exclusiveGateway()
+        .inclusiveGateway()
           .camundaAsyncBefore()
           .camundaFailedJobRetryTimeCycle("R5/PT5M")
           .camundaExecutionListenerClass("start", "foo")
@@ -616,7 +616,7 @@ public void testInclusiveGateway() throws Exception {
   public void testEventBasedGateway() throws Exception {
     BpmnModelInstance bpmnModelInstance = Bpmn.createExecutableProcess("process")
         .startEvent()
-        .exclusiveGateway()
+        .eventBasedGateway()
           .camundaAsyncBefore()
           .camundaFailedJobRetryTimeCycle("R5/PT5M")
           .camundaExecutionListenerClass("start", "foo")
@@ -653,7 +653,7 @@ public void testEventBasedGateway() throws Exception {
   public void testParallelGateway() throws Exception {
     BpmnModelInstance bpmnModelInstance = Bpmn.createExecutableProcess("process")
         .startEvent()
-        .exclusiveGateway()
+        .parallelGateway()
           .camundaAsyncBefore()
           .camundaFailedJobRetryTimeCycle("R5/PT5M")
           .camundaExecutionListenerClass("start", "foo")

File: engine/src/test/java/org/camunda/bpm/engine/test/cmmn/stage/AutoCompleteTest.java
Patch:
@@ -12,14 +12,15 @@
  */
 package org.camunda.bpm.engine.test.cmmn.stage;
 
+import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.history.HistoricCaseActivityInstance;
 import org.camunda.bpm.engine.impl.test.CmmnProcessEngineTestCase;
 import org.camunda.bpm.engine.runtime.CaseExecution;
 import org.camunda.bpm.engine.runtime.CaseExecutionQuery;
 import org.camunda.bpm.engine.runtime.CaseInstance;
 import org.camunda.bpm.engine.runtime.CaseInstanceQuery;
 import org.camunda.bpm.engine.test.Deployment;
-import org.camunda.bpm.model.bpmn.Bpmn;
+import org.camunda.bpm.engine.test.RequiredHistoryLevel;
 
 import java.util.List;
 
@@ -384,6 +385,7 @@ public void testTerminate() {
     "org/camunda/bpm/engine/test/cmmn/stage/AutoCompleteTest.testProcessTasksOnStage.cmmn",
     "org/camunda/bpm/engine/test/cmmn/stage/AutoCompleteTest.testProcessTasksOnStage.bpmn"
   })
+  @RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_FULL)
   public void testProcessTasksOnStage() {
     // given
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeletePropertyCmd.java
Patch:
@@ -14,6 +14,7 @@
 
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
+import org.camunda.bpm.engine.impl.persistence.entity.AuthorizationManager;
 import org.camunda.bpm.engine.impl.persistence.entity.PropertyEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.PropertyManager;
 
@@ -33,6 +34,8 @@ public DeletePropertyCmd(String name) {
   }
 
   public Object execute(CommandContext commandContext) {
+    AuthorizationManager authorizationManager = commandContext.getAuthorizationManager();
+    authorizationManager.checkCamundaAdmin();
 
     final PropertyManager propertyManager = commandContext.getPropertyManager();
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SetPropertyCmd.java
Patch:
@@ -14,6 +14,7 @@
 
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
+import org.camunda.bpm.engine.impl.persistence.entity.AuthorizationManager;
 import org.camunda.bpm.engine.impl.persistence.entity.PropertyEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.PropertyManager;
 
@@ -34,6 +35,8 @@ public SetPropertyCmd(String name, String value) {
   }
 
   public Object execute(CommandContext commandContext) {
+    AuthorizationManager authorizationManager = commandContext.getAuthorizationManager();
+    authorizationManager.checkCamundaAdmin();
 
     final PropertyManager propertyManager = commandContext.getPropertyManager();
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/behavior/StageActivityBehavior.java
Patch:
@@ -139,7 +139,7 @@ protected boolean canComplete(CmmnActivityExecution execution, boolean throwExce
 
     // verify there are no STATE_ACTIVE children
     for (CmmnExecution child : children) {
-      if (child.isActive()) {
+      if (child.isNew() || child.isActive()) {
 
         if (throwException) {
           throw LOG.remainingChildException("complete", id, child.getId(), CaseExecutionState.ACTIVE);

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/DefaultFailedJobParseListener.java
Patch:
@@ -70,7 +70,7 @@ public void parseIntermediateThrowEvent(Element intermediateEventElement, ScopeI
   @Override
   public void parseIntermediateCatchEvent(Element intermediateEventElement, ScopeImpl scope, ActivityImpl activity) {
     String type = activity.getProperties().get(BpmnProperties.TYPE);
-    if (type != null && type.equals(INTERMEDIATE_TIMER)) {
+    if (type != null && type.equals(INTERMEDIATE_TIMER) || isAsync(activity)) {
       this.setFailedJobRetryTimeCycleValue(intermediateEventElement, activity);
     }
   }

File: engine-rest/engine-rest-jaxrs2/src/test/java/org/camunda/bpm/engine/rest/impl/FetchAndLockRestServiceInteractionTest.java
Patch:
@@ -213,7 +213,7 @@ public void shouldFetchWithCustomObjectDeserializationEnabled() {
 
   @Test
   public void shouldThrowInvalidRequestExceptionOnMaxTimeoutExceeded() {
-    FetchExternalTasksExtendedDto fetchExternalTasksDto = createDto(FetchAndLockHandlerImpl.MAX_TIMEOUT + 1);
+    FetchExternalTasksExtendedDto fetchExternalTasksDto = createDto(FetchAndLockHandlerImpl.MAX_REQUEST_TIMEOUT + 1);
 
     given()
       .contentType(ContentType.JSON)

File: engine/src/test/java/org/camunda/bpm/engine/test/api/resources/RepositoryByteArrayTest.java
Patch:
@@ -123,7 +123,7 @@ public void testUserPictureBinary() {
 
     // then
     assertNotNull(byteArrayEntity);
-    assertEquals(fixedDate, byteArrayEntity.getCreateTime());
+    assertEquals(fixedDate.toString(), byteArrayEntity.getCreateTime().toString());
     assertEquals(REPOSITORY.getValue(), byteArrayEntity.getType());
   }
 
@@ -137,7 +137,7 @@ protected void checkResource(Date expectedDate, String deploymentId) {
 
   protected void checkEntity(Date expectedDate, ResourceEntity entity) {
     assertNotNull(entity);
-    assertEquals(expectedDate, entity.getCreateTime());
+    assertEquals(expectedDate.toString(), entity.getCreateTime().toString());
     assertEquals(REPOSITORY.getValue(), entity.getType());
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/DeploymentManager.java
Patch:
@@ -34,6 +34,7 @@
 import org.camunda.bpm.engine.repository.DecisionRequirementsDefinition;
 import org.camunda.bpm.engine.repository.Deployment;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
+import org.camunda.bpm.engine.repository.ResourceTypes;
 
 
 /**
@@ -49,6 +50,7 @@ public void insertDeployment(DeploymentEntity deployment) {
 
     for (ResourceEntity resource : deployment.getResources().values()) {
       resource.setDeploymentId(deployment.getId());
+      resource.setType(ResourceTypes.REPOSITORY.getValue());
       getResourceManager().insertResource(resource);
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ResourceEntity.java
Patch:
@@ -33,7 +33,7 @@ public class ResourceEntity implements Serializable, DbEntity, Resource {
   protected String deploymentId;
   protected boolean generated = false;
   protected String tenantId;
-  protected int type;
+  protected Integer type;
   protected Date createTime;
 
   public String getId() {
@@ -92,11 +92,11 @@ public void setTenantId(String tenantId) {
     this.tenantId = tenantId;
   }
 
-  public int getType() {
+  public Integer getType() {
     return type;
   }
 
-  public void setType(int type) {
+  public void setType(Integer type) {
     this.type = type;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ResourceManager.java
Patch:
@@ -14,6 +14,7 @@
 package org.camunda.bpm.engine.impl.persistence.entity;
 
 import org.camunda.bpm.engine.impl.persistence.AbstractManager;
+import org.camunda.bpm.engine.impl.util.ClockUtil;
 
 import java.util.HashMap;
 import java.util.List;
@@ -27,6 +28,7 @@
 public class ResourceManager extends AbstractManager {
 
   public void insertResource(ResourceEntity resource) {
+    resource.setCreateTime(ClockUtil.getCurrentTime());
     getDbEntityManager().insert(resource);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/event/HistoricExternalTaskLogEntity.java
Patch:
@@ -19,6 +19,7 @@
 import org.camunda.bpm.engine.impl.persistence.entity.ExternalTaskEntity;
 import org.camunda.bpm.engine.impl.util.EnsureUtil;
 import org.camunda.bpm.engine.impl.util.ExceptionUtil;
+import org.camunda.bpm.engine.repository.ResourceTypes;
 
 import java.util.Date;
 
@@ -122,7 +123,7 @@ public void setErrorDetails(String exception) {
     EnsureUtil.ensureNotNull("exception", exception);
 
     byte[] exceptionBytes = toByteArray(exception);
-    ByteArrayEntity byteArray = createExceptionByteArray(EXCEPTION_NAME,exceptionBytes, null);
+    ByteArrayEntity byteArray = createExceptionByteArray(EXCEPTION_NAME,exceptionBytes, ResourceTypes.HISTORY);
     errorDetailsByteArrayId = byteArray.getId();
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExternalTaskEntity.java
Patch:
@@ -35,6 +35,7 @@
 import org.camunda.bpm.engine.impl.util.ClockUtil;
 import org.camunda.bpm.engine.impl.util.EnsureUtil;
 import org.camunda.bpm.engine.impl.util.ExceptionUtil;
+import org.camunda.bpm.engine.repository.ResourceTypes;
 import org.camunda.bpm.engine.runtime.Incident;
 
 import static org.camunda.bpm.engine.impl.util.ExceptionUtil.createExceptionByteArray;
@@ -277,7 +278,7 @@ protected void setErrorDetails(String exception) {
     ByteArrayEntity byteArray = getErrorByteArray();
 
     if(byteArray == null) {
-      byteArray = createExceptionByteArray(EXCEPTION_NAME,exceptionBytes, null);
+      byteArray = createExceptionByteArray(EXCEPTION_NAME,exceptionBytes, ResourceTypes.RUNTIME);
       errorDetailsByteArrayId = byteArray.getId();
       errorDetailsByteArray = byteArray;
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -40,6 +40,7 @@
 import org.camunda.bpm.engine.impl.pvm.process.ProcessDefinitionImpl;
 import org.camunda.bpm.engine.impl.util.ExceptionUtil;
 import org.camunda.bpm.engine.management.JobDefinition;
+import org.camunda.bpm.engine.repository.ResourceTypes;
 import org.camunda.bpm.engine.runtime.Incident;
 import org.camunda.bpm.engine.runtime.Job;
 
@@ -454,7 +455,7 @@ public void setExceptionStacktrace(String exception) {
     ByteArrayEntity byteArray = getExceptionByteArray();
 
     if(byteArray == null) {
-      byteArray = createJobExceptionByteArray(exceptionBytes);
+      byteArray = createJobExceptionByteArray(exceptionBytes, ResourceTypes.RUNTIME);
       exceptionByteArrayId = byteArray.getId();
       exceptionByteArray = byteArray;
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/event/HistoricExternalTaskLogEntity.java
Patch:
@@ -122,7 +122,7 @@ public void setErrorDetails(String exception) {
     EnsureUtil.ensureNotNull("exception", exception);
 
     byte[] exceptionBytes = toByteArray(exception);
-    ByteArrayEntity byteArray = createExceptionByteArray(EXCEPTION_NAME,exceptionBytes);
+    ByteArrayEntity byteArray = createExceptionByteArray(EXCEPTION_NAME,exceptionBytes, null);
     errorDetailsByteArrayId = byteArray.getId();
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -53,6 +53,7 @@
 import org.camunda.bpm.engine.impl.pvm.runtime.CompensationBehavior;
 import org.camunda.bpm.engine.impl.util.ClockUtil;
 import org.camunda.bpm.engine.management.JobDefinition;
+import org.camunda.bpm.engine.repository.ResourceTypes;
 import org.camunda.bpm.engine.runtime.Incident;
 import org.camunda.bpm.engine.runtime.Job;
 import org.camunda.bpm.engine.task.IdentityLink;
@@ -951,7 +952,7 @@ public HistoryEvent createHistoricJobLogFailedEvt(Job job, Throwable exception)
       // stacktrace
       String exceptionStacktrace = getExceptionStacktrace(exception);
       byte[] exceptionBytes = toByteArray(exceptionStacktrace);
-      ByteArrayEntity byteArray = createJobExceptionByteArray(exceptionBytes);
+      ByteArrayEntity byteArray = createJobExceptionByteArray(exceptionBytes, ResourceTypes.HISTORY);
       event.setExceptionByteArrayId(byteArray.getId());
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExternalTaskEntity.java
Patch:
@@ -277,7 +277,7 @@ protected void setErrorDetails(String exception) {
     ByteArrayEntity byteArray = getErrorByteArray();
 
     if(byteArray == null) {
-      byteArray = createExceptionByteArray(EXCEPTION_NAME,exceptionBytes);
+      byteArray = createExceptionByteArray(EXCEPTION_NAME,exceptionBytes, null);
       errorDetailsByteArrayId = byteArray.getId();
       errorDetailsByteArray = byteArray;
     }

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricJobLogTest.java
Patch:
@@ -36,6 +36,7 @@
 import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
 import org.camunda.bpm.engine.impl.util.ExceptionUtil;
 import org.camunda.bpm.engine.impl.util.StringUtil;
+import org.camunda.bpm.engine.repository.ResourceTypes;
 import org.camunda.bpm.engine.runtime.Job;
 import org.camunda.bpm.engine.test.Deployment;
 import org.camunda.bpm.engine.test.RequiredHistoryLevel;
@@ -1166,7 +1167,7 @@ public Void execute(CommandContext commandContext) {
 
 
           byte[] aByteValue = StringUtil.toByteArray("abc");
-          ByteArrayEntity byteArray = ExceptionUtil.createJobExceptionByteArray(aByteValue);
+          ByteArrayEntity byteArray = ExceptionUtil.createJobExceptionByteArray(aByteValue, ResourceTypes.HISTORY);
           log.setExceptionByteArrayId(byteArray.getId());
 
           commandContext

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/CreateAttachmentCmd.java
Patch:
@@ -27,6 +27,7 @@
 import org.camunda.bpm.engine.impl.persistence.entity.TaskEntity;
 import org.camunda.bpm.engine.impl.util.ClockUtil;
 import org.camunda.bpm.engine.impl.util.IoUtil;
+import org.camunda.bpm.engine.repository.ResourceTypes;
 import org.camunda.bpm.engine.task.Attachment;
 
 import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
@@ -86,8 +87,8 @@ public Attachment execute(CommandContext commandContext) {
 
     if (content != null) {
       byte[] bytes = IoUtil.readInputStream(content, attachmentName);
-      ByteArrayEntity byteArray = new ByteArrayEntity(bytes);
-      dbEntityManger.insert(byteArray);
+      ByteArrayEntity byteArray = new ByteArrayEntity(bytes, ResourceTypes.HISTORY);
+      commandContext.getByteArrayManager().insertByteArray(byteArray);
       attachment.setContentId(byteArray.getId());
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ByteArrayEntity.java
Patch:
@@ -51,8 +51,9 @@ public ByteArrayEntity(String name, byte[] bytes) {
     this.bytes = bytes;
   }
 
-  public ByteArrayEntity(byte[] bytes) {
+  public ByteArrayEntity(byte[] bytes, ResourceType type) {
     this.bytes = bytes;
+    this.type = type.getValue();
   }
 
   public byte[] getBytes() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/event/HistoricDecisionOutputInstanceEntity.java
Patch:
@@ -20,6 +20,7 @@
 import org.camunda.bpm.engine.impl.persistence.entity.util.ByteArrayField;
 import org.camunda.bpm.engine.impl.persistence.entity.util.TypedValueField;
 import org.camunda.bpm.engine.impl.variable.serializer.ValueFields;
+import org.camunda.bpm.engine.repository.ResourceTypes;
 import org.camunda.bpm.engine.variable.value.TypedValue;
 
 /**
@@ -46,7 +47,7 @@ public class HistoricDecisionOutputInstanceEntity extends HistoryEvent implement
 
   protected String tenantId;
 
-  protected ByteArrayField byteArrayField = new ByteArrayField(this);
+  protected ByteArrayField byteArrayField = new ByteArrayField(this, ResourceTypes.HISTORY);
   protected TypedValueField typedValueField = new TypedValueField(this, false);
 
   protected Date createTime;

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/event/HistoricDecisionInputInstanceEntity.java
Patch:
@@ -20,6 +20,7 @@
 import org.camunda.bpm.engine.impl.persistence.entity.util.ByteArrayField;
 import org.camunda.bpm.engine.impl.persistence.entity.util.TypedValueField;
 import org.camunda.bpm.engine.impl.variable.serializer.ValueFields;
+import org.camunda.bpm.engine.repository.ResourceTypes;
 import org.camunda.bpm.engine.variable.value.TypedValue;
 
 /**
@@ -41,7 +42,7 @@ public class HistoricDecisionInputInstanceEntity extends HistoryEvent implements
 
   protected String tenantId;
 
-  protected ByteArrayField byteArrayField = new ByteArrayField(this);
+  protected ByteArrayField byteArrayField = new ByteArrayField(this, ResourceTypes.HISTORY);
   protected TypedValueField typedValueField = new TypedValueField(this, false);
 
   protected Date createTime;

File: engine/src/main/java/org/camunda/bpm/engine/impl/batch/BatchEntity.java
Patch:
@@ -34,6 +34,7 @@
 import org.camunda.bpm.engine.impl.persistence.entity.SuspensionState;
 import org.camunda.bpm.engine.impl.persistence.entity.util.ByteArrayField;
 import org.camunda.bpm.engine.impl.util.ClockUtil;
+import org.camunda.bpm.engine.repository.ResourceTypes;
 
 public class BatchEntity implements Batch, DbEntity, HasDbReferences, Nameable, HasDbRevision {
 
@@ -53,7 +54,7 @@ public class BatchEntity implements Batch, DbEntity, HasDbReferences, Nameable,
   protected String monitorJobDefinitionId;
   protected String batchJobDefinitionId;
 
-  protected ByteArrayField configuration = new ByteArrayField(this);
+  protected ByteArrayField configuration = new ByteArrayField(this, ResourceTypes.RUNTIME);
 
   protected String tenantId;
   protected String createUserId;

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricDetailVariableInstanceUpdateEntity.java
Patch:
@@ -26,6 +26,7 @@
 import org.camunda.bpm.engine.impl.persistence.entity.util.TypedValueField;
 import org.camunda.bpm.engine.impl.variable.serializer.TypedValueSerializer;
 import org.camunda.bpm.engine.impl.variable.serializer.ValueFields;
+import org.camunda.bpm.engine.repository.ResourceTypes;
 import org.camunda.bpm.engine.variable.value.TypedValue;
 
 
@@ -39,7 +40,7 @@ public class HistoricDetailVariableInstanceUpdateEntity extends HistoricVariable
 
   protected TypedValueField typedValueField = new TypedValueField(this, false);
 
-  protected ByteArrayField byteArrayField = new ByteArrayField(this);
+  protected ByteArrayField byteArrayField = new ByteArrayField(this, ResourceTypes.HISTORY);
 
   public Object getValue() {
     return typedValueField.getValue();

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/DefaultFailedJobParseListener.java
Patch:
@@ -46,7 +46,7 @@ public class DefaultFailedJobParseListener extends AbstractBpmnParseListener {
   @Override
   public void parseStartEvent(Element startEventElement, ScopeImpl scope, ActivityImpl startEventActivity) {
     String type = startEventActivity.getProperties().get(BpmnProperties.TYPE);
-    if (type != null && type.equals(START_TIMER_EVENT)) {
+    if (type != null && type.equals(START_TIMER_EVENT) || isAsync(startEventActivity)) {
       this.setFailedJobRetryTimeCycleValue(startEventElement, startEventActivity);
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/PvmExecutionImpl.java
Patch:
@@ -226,12 +226,13 @@ public void start(Map<String, Object> variables) {
     startContext = new ProcessInstanceStartContext(getActivity());
 
     initialize();
-    initializeTimerDeclarations();
 
     if (variables != null) {
       setVariables(variables);
     }
 
+    initializeTimerDeclarations();
+
     fireHistoricProcessStartEvent();
 
     performOperation(PvmAtomicOperation.PROCESS_START);

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricVariableInstanceEntity.java
Patch:
@@ -30,6 +30,7 @@
 import org.camunda.bpm.engine.impl.persistence.entity.util.TypedValueField;
 import org.camunda.bpm.engine.impl.variable.serializer.TypedValueSerializer;
 import org.camunda.bpm.engine.impl.variable.serializer.ValueFields;
+import org.camunda.bpm.engine.repository.ResourceTypes;
 import org.camunda.bpm.engine.variable.value.TypedValue;
 
 /**
@@ -66,7 +67,7 @@ public class HistoricVariableInstanceEntity implements ValueFields, HistoricVari
   protected String textValue2;
 
   protected String state = "CREATED";
-  protected ByteArrayField byteArrayField = new ByteArrayField(this);
+  protected ByteArrayField byteArrayField = new ByteArrayField(this, ResourceTypes.HISTORY);
 
   protected TypedValueField typedValueField = new TypedValueField(this, false);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/VariableInstanceEntity.java
Patch:
@@ -37,6 +37,7 @@
 import org.camunda.bpm.engine.impl.persistence.entity.util.TypedValueUpdateListener;
 import org.camunda.bpm.engine.impl.variable.serializer.TypedValueSerializer;
 import org.camunda.bpm.engine.impl.variable.serializer.ValueFields;
+import org.camunda.bpm.engine.repository.ResourceTypes;
 import org.camunda.bpm.engine.runtime.VariableInstance;
 import org.camunda.bpm.engine.variable.value.TypedValue;
 
@@ -68,7 +69,7 @@ public class VariableInstanceEntity implements VariableInstance, CoreVariableIns
   protected String textValue;
   protected String textValue2;
 
-  protected ByteArrayField byteArrayField = new ByteArrayField(this);
+  protected ByteArrayField byteArrayField = new ByteArrayField(this, ResourceTypes.RUNTIME);
 
   protected TypedValueField typedValueField = new TypedValueField(this, true);
 

File: engine/src/main/java/org/camunda/bpm/engine/repository/Resource.java
Patch:
@@ -17,9 +17,6 @@
  */
 public interface Resource {
 
-  int TYPE_REPOSITORY = 1;
-  int TYPE_RUNTIME = 2;
-  int TYPE_HISTORY = 3;
 
   String getId();
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ResourceEntity.java
Patch:
@@ -33,7 +33,7 @@ public class ResourceEntity implements Serializable, DbEntity, Resource {
   protected String deploymentId;
   protected boolean generated = false;
   protected String tenantId;
-  protected String type;
+  protected int type;
   protected Date createTime;
 
   public String getId() {
@@ -92,11 +92,11 @@ public void setTenantId(String tenantId) {
     this.tenantId = tenantId;
   }
 
-  public String getType() {
+  public int getType() {
     return type;
   }
 
-  public void setType(String type) {
+  public void setType(int type) {
     this.type = type;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/repository/Resource.java
Patch:
@@ -17,9 +17,9 @@
  */
 public interface Resource {
 
-  String TYPE_REPOSITORY = "REPOSITORY";
-  String TYPE_RUNTIME = "RUNTIME";
-  String TYPE_HISTORY = "HISTORY";
+  int TYPE_REPOSITORY = 1;
+  int TYPE_RUNTIME = 2;
+  int TYPE_HISTORY = 3;
 
   String getId();
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -267,6 +267,7 @@ public ExecutionEntity createExecution(boolean initializeExecutionStartContext)
       createdExecution.setTenantId(tenantId);
     }
 
+    // with the fix of CAM-9249 we presume that the parent and the child have the same startContext
     if (initializeExecutionStartContext) {
       createdExecution.setStartContext(new ExecutionStartContext());
     } else if (startContext != null) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/ExecutionImpl.java
Patch:
@@ -30,7 +30,6 @@
 import org.camunda.bpm.engine.impl.core.variable.scope.VariableInstanceFactory;
 import org.camunda.bpm.engine.impl.core.variable.scope.VariableInstanceLifecycleListener;
 import org.camunda.bpm.engine.impl.core.variable.scope.VariableStore;
-import org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity;
 import org.camunda.bpm.engine.impl.pvm.PvmProcessInstance;
 import org.camunda.bpm.engine.impl.pvm.delegate.ActivityExecution;
 import org.camunda.bpm.model.bpmn.BpmnModelInstance;
@@ -104,6 +103,7 @@ public ExecutionImpl createExecution(boolean initializeExecutionStartContext) {
     // make created execution start in same activity instance
     createdExecution.activityInstanceId = activityInstanceId;
 
+    // with the fix of CAM-9249 we presume that the parent and the child have the same startContext
     if (initializeExecutionStartContext) {
       createdExecution.setStartContext(new ExecutionStartContext());
     } else if (startContext != null) {

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/conditional/AbstractConditionalEventTestCase.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.camunda.bpm.engine.test.bpmn.event.conditional;
 
+import org.camunda.bpm.engine.HistoryService;
 import org.camunda.bpm.engine.RepositoryService;
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.TaskService;
@@ -95,6 +96,7 @@ public abstract class AbstractConditionalEventTestCase {
   protected RuntimeService runtimeService;
   protected TaskService taskService;
   protected RepositoryService repositoryService;
+  protected HistoryService historyService;
   protected ProcessEngineConfigurationImpl processEngineConfiguration;
   protected EventSubscriptionQueryImpl conditionEventSubscriptionQuery;
 
@@ -103,6 +105,7 @@ public void init() {
     this.runtimeService = engine.getRuntimeService();
     this.taskService = engine.getTaskService();
     this.repositoryService = engine.getRepositoryService();
+    this.historyService = engine.getHistoryService();
     this.processEngineConfiguration = engine.getProcessEngineConfiguration();
     this.conditionEventSubscriptionQuery = new EventSubscriptionQueryImpl(processEngineConfiguration.getCommandExecutorTxRequired()).eventType(EventType.CONDITONAL.name());
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/escalation/EscalationEventSubprocessTest.java
Patch:
@@ -16,11 +16,13 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
 import org.camunda.bpm.engine.runtime.Job;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.task.Task;
 import org.camunda.bpm.engine.test.Deployment;
+import org.camunda.bpm.engine.test.RequiredHistoryLevel;
 
 /**
  * @author Philipp Ossler
@@ -41,6 +43,7 @@ public void testCatchEscalationEventInsideSubprocess() {
 
   /** CAM-9220 (https://app.camunda.com/jira/browse/CAM-9220) */
   @Deployment
+  @RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_FULL)
   public void testThrowEscalationEventFromEventSubprocess() {
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("embeddedEventSubprocess");
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/interceptor/AtomicOperationInvocation.java
Patch:
@@ -54,7 +54,8 @@ public void execute(BpmnStackTrace stackTrace) {
 
     if(operation != PvmAtomicOperation.ACTIVITY_START_CANCEL_SCOPE
        && operation != PvmAtomicOperation.ACTIVITY_START_INTERRUPT_SCOPE
-       && operation != PvmAtomicOperation.ACTIVITY_START_CONCURRENT) {
+       && operation != PvmAtomicOperation.ACTIVITY_START_CONCURRENT
+       && operation != PvmAtomicOperation.DELETE_CASCADE) {
       // execution might be replaced in the meantime:
       ExecutionEntity replacedBy = execution.getReplacedBy();
       if(replacedBy != null) {

File: clients/java/client/src/main/java/org/camunda/bpm/client/impl/EngineClient.java
Patch:
@@ -93,7 +93,8 @@ public void failure(String taskId, String errorMessage, String errorDetails, int
   }
 
   public void bpmnError(String taskId, String errorCode, String errorMessage, Map<String, Object> variables) throws EngineClientException {
-    BpmnErrorRequestDto payload = new BpmnErrorRequestDto(workerId, errorCode, errorMessage, variables);
+    Map<String, TypedValueField> typeValueDtoMap = typedValues.serializeVariables(variables);
+    BpmnErrorRequestDto payload = new BpmnErrorRequestDto(workerId, errorCode, errorMessage, typeValueDtoMap);
     String resourcePath = BPMN_ERROR_RESOURCE_PATH.replace("{id}", taskId);
     String resourceUrl = baseUrl + resourcePath;
     engineInteraction.postRequest(resourceUrl, payload, Void.class);

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/externaltask/impl/ExternalTaskResourceImpl.java
Patch:
@@ -138,7 +138,7 @@ public void handleBpmnError(ExternalTaskBpmnError dto) {
 
     try {
       if (dto.getVariables() != null) {
-        externalTaskService.handleBpmnError(externalTaskId, dto.getWorkerId(), dto.getErrorCode(), dto.getErrorMessage(), dto.getVariables());
+        externalTaskService.handleBpmnError(externalTaskId, dto.getWorkerId(), dto.getErrorCode(), dto.getErrorMessage(), VariableValueDto.toMap(dto.getVariables(), engine, objectMapper));
       } else if (dto.getErrorMessage() != null) {
         externalTaskService.handleBpmnError(externalTaskId, dto.getWorkerId(), dto.getErrorCode(), dto.getErrorMessage());
       } else {

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/variable/scope/AbstractVariableScope.java
Patch:
@@ -448,7 +448,7 @@ public void setVariableLocal(String variableName, Object value) {
    * output mapping.
    */
   public void setVariableLocalTransient(String variableName, Object value) {
-    TypedValue typedValue = Variables.untypedValue(value);
+    TypedValue typedValue = Variables.untypedValue(value, true);
 
     checkJavaSerialization(variableName, typedValue);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/AbstractObjectValueSerializer.java
Patch:
@@ -33,7 +33,7 @@ public AbstractObjectValueSerializer(String serializationDataFormat) {
 
   public ObjectValue convertToTypedValue(UntypedValueImpl untypedValue) {
     // untyped values are always deserialized
-    return Variables.objectValue(untypedValue.getValue()).create();
+    return Variables.objectValue(untypedValue.getValue(), untypedValue.isTransient()).create();
   }
 
   protected void writeToValueFields(ObjectValue value, ValueFields valueFields, byte[] serializedValue) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/BooleanValueSerializer.java
Patch:
@@ -33,7 +33,7 @@ public BooleanValueSerializer() {
   }
 
   public BooleanValue convertToTypedValue(UntypedValueImpl untypedValue) {
-    return Variables.booleanValue((Boolean) untypedValue.getValue());
+    return Variables.booleanValue((Boolean) untypedValue.getValue(), untypedValue.isTransient());
   }
 
   public BooleanValue readValue(ValueFields valueFields) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/ByteArrayValueSerializer.java
Patch:
@@ -34,10 +34,10 @@ public ByteArrayValueSerializer() {
   public BytesValue convertToTypedValue(UntypedValueImpl untypedValue) {
     Object value = untypedValue.getValue();
     if (value instanceof byte[]) {
-      return Variables.byteArrayValue((byte[]) value);
+      return Variables.byteArrayValue((byte[]) value, untypedValue.isTransient());
     } else {
       byte[] data = IoUtil.readInputStream((InputStream) value, null);
-      return Variables.byteArrayValue(data);
+      return Variables.byteArrayValue(data, untypedValue.isTransient());
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/DateValueSerializer.java
Patch:
@@ -33,7 +33,7 @@ public DateValueSerializer() {
   }
 
   public DateValue convertToTypedValue(UntypedValueImpl untypedValue) {
-    return Variables.dateValue((Date) untypedValue.getValue());
+    return Variables.dateValue((Date) untypedValue.getValue(), untypedValue.isTransient());
   }
 
   public DateValue readValue(ValueFields valueFields) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/DoubleValueSerializer.java
Patch:
@@ -28,7 +28,7 @@ public DoubleValueSerializer() {
   }
 
   public DoubleValue convertToTypedValue(UntypedValueImpl untypedValue) {
-    return Variables.doubleValue((Double) untypedValue.getValue());
+    return Variables.doubleValue((Double) untypedValue.getValue(), untypedValue.isTransient());
   }
 
   public void writeValue(DoubleValue value, ValueFields valueFields) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/IntegerValueSerializer.java
Patch:
@@ -28,7 +28,7 @@ public IntegerValueSerializer() {
   }
 
   public IntegerValue convertToTypedValue(UntypedValueImpl untypedValue) {
-    return Variables.integerValue((Integer) untypedValue.getValue());
+    return Variables.integerValue((Integer) untypedValue.getValue(), untypedValue.isTransient());
   }
 
   public void writeValue(IntegerValue variableValue, ValueFields valueFields) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/LongValueSerlializer.java
Patch:
@@ -28,7 +28,7 @@ public LongValueSerlializer() {
   }
 
   public LongValue convertToTypedValue(UntypedValueImpl untypedValue) {
-    return Variables.longValue((Long) untypedValue.getValue());
+    return Variables.longValue((Long) untypedValue.getValue(), untypedValue.isTransient());
   }
 
   public LongValue readValue(ValueFields valueFields) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/NullValueSerializer.java
Patch:
@@ -34,7 +34,7 @@ public String getName() {
   }
 
   public NullValueImpl convertToTypedValue(UntypedValueImpl untypedValue) {
-    return NullValueImpl.INSTANCE;
+    return !untypedValue.isTransient() ? NullValueImpl.INSTANCE : NullValueImpl.INSTANCE_TRANSIENT;
   }
 
   public void writeValue(NullValueImpl value, ValueFields valueFields) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/ShortValueSerializer.java
Patch:
@@ -28,7 +28,7 @@ public ShortValueSerializer() {
   }
 
   public ShortValue convertToTypedValue(UntypedValueImpl untypedValue) {
-    return Variables.shortValue((Short) untypedValue.getValue());
+    return Variables.shortValue((Short) untypedValue.getValue(), untypedValue.isTransient());
   }
 
   public ShortValue readValue(ValueFields valueFields) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/StringValueSerializer.java
Patch:
@@ -29,7 +29,7 @@ public StringValueSerializer() {
   }
 
   public StringValue convertToTypedValue(UntypedValueImpl untypedValue) {
-    return Variables.stringValue((String) untypedValue.getValue());
+    return Variables.stringValue((String) untypedValue.getValue(), untypedValue.isTransient());
   }
 
   public StringValue readValue(ValueFields valueFields) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/jpa/JPAVariableSerializer.java
Patch:
@@ -60,7 +60,7 @@ protected boolean isDeserializedObjectValue(TypedValue value) {
   }
 
   public ObjectValue convertToTypedValue(UntypedValueImpl untypedValue) {
-    return Variables.objectValue(untypedValue.getValue()).create();
+    return Variables.objectValue(untypedValue.getValue(), untypedValue.isTransient()).create();
   }
 
   public void writeValue(ObjectValue objectValue, ValueFields valueFields) {

File: engine/src/test/java/org/camunda/bpm/engine/test/cmmn/decisiontask/CmmnDecisionTaskResultMappingTest.java
Patch:
@@ -159,7 +159,7 @@ public void testFailedToOverrideDecisionResultVariable() {
       fail("expect exception");
 
     } catch (ProcessEngineException e) {
-      assertTextPresent("variable with name 'decisionResult' can not be updated", e.getMessage());
+      assertTextPresent("transient variable with name decisionResult to non-transient", e.getMessage());
     }
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/dmn/businessruletask/DmnBusinessRuleTaskResultMappingTest.java
Patch:
@@ -192,7 +192,7 @@ public void testFailedToOverrideDecisionResultVariable() {
       fail("expect exception");
 
     } catch (ProcessEngineException e) {
-      assertTextPresent("variable with name 'decisionResult' can not be updated", e.getMessage());
+      assertTextPresent("transient variable with name decisionResult to non-transient", e.getMessage());
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/LegacyBehavior.java
Patch:
@@ -105,7 +105,7 @@ public static void pruneConcurrentScope(PvmExecutionImpl execution) {
    * See: javadoc of this class for note about concurrent scopes.
    *
    * @param execution the concurrent scope execution to destroy
-   * @param cancellingActivity the activity that cancels the execution; it must hold that
+   * @param cancelledScopeActivity the activity that cancels the execution; it must hold that
    *   cancellingActivity's event scope is the scope the execution is responsible for
    */
   public static void cancelConcurrentScope(PvmExecutionImpl execution, PvmActivity cancelledScopeActivity) {
@@ -196,7 +196,6 @@ public static boolean destroySecondNonScope(PvmExecutionImpl execution) {
   /**
    * This method
    * @param scopeExecution
-   * @param isLegacyBehaviorTurnedOff
    * @return
    */
   protected static boolean isLegacyBehaviorRequired(ActivityExecution scopeExecution) {
@@ -221,7 +220,7 @@ protected static boolean isLegacyBehaviorRequired(ActivityExecution scopeExecuti
    * - For an event subprocess this is the scope execution of the scope in which the event subprocess is embeded in
    * - For a multi instance sequential subprocess this is the multi instace scope body.
    *
-   * @param targetScope
+   * @param scope
    * @param activityExecutionMapping
    * @return
    */

File: clients/java/client/src/it/java/org/camunda/bpm/client/util/ProcessModels.java
Patch:
@@ -1,9 +1,9 @@
 /* Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -92,7 +92,7 @@ public static BpmnModelInstance createProcessWithExclusiveGateway(String process
       .userTask(USER_TASK_ID)
       .endEvent()
       .moveToActivity(EXTERNAL_TASK_ID)
-      .boundaryEvent()
+      .boundaryEvent("catchBPMNError")
         .error("500")
       .userTask(USER_TASK_AFTER_BPMN_ERROR)
       .endEvent()

File: clients/java/client/src/main/java/org/camunda/bpm/client/impl/EngineClient.java
Patch:
@@ -92,8 +92,8 @@ public void failure(String taskId, String errorMessage, String errorDetails, int
     engineInteraction.postRequest(resourceUrl, payload, Void.class);
   }
 
-  public void bpmnError(String taskId, String errorCode, Map<String, Object> variables) throws EngineClientException {
-    BpmnErrorRequestDto payload = new BpmnErrorRequestDto(workerId, errorCode, variables);
+  public void bpmnError(String taskId, String errorCode, String errorMessage, Map<String, Object> variables) throws EngineClientException {
+    BpmnErrorRequestDto payload = new BpmnErrorRequestDto(workerId, errorCode, errorMessage, variables);
     String resourcePath = BPMN_ERROR_RESOURCE_PATH.replace("{id}", taskId);
     String resourceUrl = baseUrl + resourcePath;
     engineInteraction.postRequest(resourceUrl, payload, Void.class);

File: clients/java/client/src/main/java/org/camunda/bpm/client/impl/EngineClient.java
Patch:
@@ -92,8 +92,8 @@ public void failure(String taskId, String errorMessage, String errorDetails, int
     engineInteraction.postRequest(resourceUrl, payload, Void.class);
   }
 
-  public void bpmnError(String taskId, String errorCode) throws EngineClientException {
-    BpmnErrorRequestDto payload = new BpmnErrorRequestDto(workerId, errorCode);
+  public void bpmnError(String taskId, String errorCode, Map<String, Object> variables) throws EngineClientException {
+    BpmnErrorRequestDto payload = new BpmnErrorRequestDto(workerId, errorCode, variables);
     String resourcePath = BPMN_ERROR_RESOURCE_PATH.replace("{id}", taskId);
     String resourceUrl = baseUrl + resourcePath;
     engineInteraction.postRequest(resourceUrl, payload, Void.class);

File: spin/dataformat-json-jackson/src/main/java/org/camunda/spin/impl/json/jackson/format/JacksonJsonDataFormatMapper.java
Patch:
@@ -60,7 +60,7 @@ public <T> T mapInternalToJava(Object parameter, Class<T> type) {
   public <T> T mapInternalToJava(Object parameter, String typeIdentifier) {
     try {
       //sometimes the class identifier is at once a fully qualified class name
-      final Class<?> aClass = Class.forName(typeIdentifier);
+      final Class<?> aClass = Class.forName(typeIdentifier, true, Thread.currentThread().getContextClassLoader());
       return (T) mapInternalToJava(parameter, aClass);
     } catch (ClassNotFoundException e) {
       JavaType javaType = format.constructJavaTypeFromCanonicalString(typeIdentifier);

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/externaltask/impl/ExternalTaskResourceImpl.java
Patch:
@@ -137,7 +137,7 @@ public void handleBpmnError(ExternalTaskBpmnError dto) {
     ExternalTaskService externalTaskService = engine.getExternalTaskService();
 
     try {
-      externalTaskService.handleBpmnError(externalTaskId, dto.getWorkerId(), dto.getErrorCode(), dto.getVariables());
+      externalTaskService.handleBpmnError(externalTaskId, dto.getWorkerId(), dto.getErrorCode(), dto.getErrorMessage(), dto.getVariables());
     } catch (NotFoundException e) {
       throw new RestException(Status.NOT_FOUND, e, "External task with id " + externalTaskId + " does not exist");
     } catch (BadUserRequestException e) {

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ExternalTaskRestServiceInteractionTest.java
Patch:
@@ -849,6 +849,7 @@ public void testHandleBpmnErrorWithVariables() {
     Map<String, Object> parameters = new HashMap<String, Object>();
     parameters.put("workerId", "aWorkerId");
     parameters.put("errorCode", "anErrorCode");
+    parameters.put("errorMessage", "anErrorMessage");
     Map<String, Object> variables = new HashMap<String, Object>();
     variables.put("foo", "bar");
     parameters.put("variables", variables);
@@ -863,7 +864,7 @@ public void testHandleBpmnErrorWithVariables() {
     .when()
       .post(HANDLE_EXTERNAL_TASK_BPMN_ERROR_URL);
 
-    verify(externalTaskService).handleBpmnError("anExternalTaskId", "aWorkerId", "anErrorCode", variables);
+    verify(externalTaskService).handleBpmnError("anExternalTaskId", "aWorkerId", "anErrorCode", "anErrorMessage", variables);
     verifyNoMoreInteractions(externalTaskService);
   }
 

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/externaltask/impl/ExternalTaskResourceImpl.java
Patch:
@@ -135,9 +135,9 @@ public void handleFailure(ExternalTaskFailureDto dto) {
   @Override
   public void handleBpmnError(ExternalTaskBpmnError dto) {
     ExternalTaskService externalTaskService = engine.getExternalTaskService();
-    
+
     try {
-      externalTaskService.handleBpmnError(externalTaskId, dto.getWorkerId(), dto.getErrorCode());
+      externalTaskService.handleBpmnError(externalTaskId, dto.getWorkerId(), dto.getErrorCode(), dto.getVariables());
     } catch (NotFoundException e) {
       throw new RestException(Status.NOT_FOUND, e, "External task with id " + externalTaskId + " does not exist");
     } catch (BadUserRequestException e) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -294,6 +294,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement(ORACLE, "selectHistoricTaskInstanceCountByTaskNameReport", "selectHistoricTaskInstanceCountByTaskNameReport_oracle");
     addDatabaseSpecificStatement(ORACLE, "selectFilterByQueryCriteria", "selectFilterByQueryCriteria_oracleDb2");
     addDatabaseSpecificStatement(ORACLE, "selectHistoricProcessInstanceIdsForCleanup", "selectHistoricProcessInstanceIdsForCleanup_oracle");
+    addDatabaseSpecificStatement(ORACLE, "selectHierarchicalHistoricProcessInstanceIdsForCleanup", "selectHierarchicalHistoricProcessInstanceIdsForCleanup_oracle");
     addDatabaseSpecificStatement(ORACLE, "selectHistoricDecisionInstanceIdsForCleanup", "selectHistoricDecisionInstanceIdsForCleanup_oracle");
     addDatabaseSpecificStatement(ORACLE, "selectHistoricCaseInstanceIdsForCleanup", "selectHistoricCaseInstanceIdsForCleanup_oracle");
     addDatabaseSpecificStatement(ORACLE, "selectHistoricBatchIdsForCleanup", "selectHistoricBatchIdsForCleanup_oracle");

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/HistoryCleanupTest.java
Patch:
@@ -1278,7 +1278,7 @@ public void testCleanupOrder() {
       .singleResult();
 
     // when
-    ClockUtil.setCurrentTime(DateUtils.addDays(now, 2));
+    ClockUtil.setCurrentTime(DateUtils.addSeconds(DateUtils.addDays(now, 1), 1));
     runHistoryCleanup(true);
 
     assertEquals(expectedInstances, historyService.createHistoricProcessInstanceQuery()
@@ -1295,7 +1295,7 @@ public void testCleanupOrder() {
     processEngineConfiguration.getTaskService().complete(parentTask.getId());
 
     // then
-    ClockUtil.setCurrentTime(DateUtils.addDays(now, 4));
+    ClockUtil.setCurrentTime(DateUtils.addSeconds(DateUtils.addDays(now, 3), 2));
     runHistoryCleanup(true);
 
     assertEquals(0, historyService.createHistoricProcessInstanceQuery().processInstanceId(parentProcessInstanceId).count());

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/variable/scope/AbstractVariableScope.java
Patch:
@@ -309,7 +309,7 @@ public void setVariable(String variableName, Object value) {
 
   protected void setVariable(String variableName, TypedValue value, AbstractVariableScope sourceActivityVariableScope) {
     if (hasVariableLocal(variableName)) {
-      TypedValue previousTypeValue = getVariableInstanceLocal(variableName).getTypedValue(true);
+      TypedValue previousTypeValue = getVariableInstanceLocal(variableName).getTypedValue(false);
       if (value.isTransient() && previousTypeValue.isTransient()) {
         setVariableLocalTransient(variableName, value);
       } else if (!value.isTransient() && !previousTypeValue.isTransient()) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/CoreLogger.java
Patch:
@@ -64,7 +64,7 @@ public ProcessEngineException missingVariableInstanceException(CoreVariableInsta
   public ProcessEngineException transientVariableException(String variableName) {
     return new ProcessEngineException(exceptionMessage(
         "006",
-        "Cannot set transient variable with name {}. Persisted variable already exists",
+        "Cannot set transient variable with name {} to non-transient variable and vice versa.",
         variableName
       ));
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/VariableInstanceHistoryListener.java
Patch:
@@ -19,7 +19,6 @@
 import org.camunda.bpm.engine.impl.history.event.HistoryEvent;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventProcessor;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventTypes;
-import org.camunda.bpm.engine.impl.history.handler.HistoryEventHandler;
 import org.camunda.bpm.engine.impl.history.producer.HistoryEventProducer;
 
 /**
@@ -56,7 +55,7 @@ public HistoryEvent createHistoryEvent(HistoryEventProducer producer) {
 
   @Override
   public void onUpdate(final VariableInstanceEntity variableInstance, final AbstractVariableScope sourceScope) {
-    if (getHistoryLevel().isHistoryEventProduced(HistoryEventTypes.VARIABLE_INSTANCE_UPDATE, variableInstance)) {
+    if (getHistoryLevel().isHistoryEventProduced(HistoryEventTypes.VARIABLE_INSTANCE_UPDATE, variableInstance) && !variableInstance.isTransient()) {
       HistoryEventProcessor.processHistoryEvents(new HistoryEventProcessor.HistoryEventCreator() {
         @Override
         public HistoryEvent createHistoryEvent(HistoryEventProducer producer) {

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/util/SpringBootProcessEngineLogger.java
Patch:
@@ -16,11 +16,11 @@ public class SpringBootProcessEngineLogger extends BaseLogger {
   public static final SpringBootProcessEngineLogger LOG = createLogger(SpringBootProcessEngineLogger.class, PROJECT_CODE, PACKAGE, PROJECT_ID);
 
   public void creatingInitialAdminUser(User adminUser) {
-    logInfo("010", "creating initital Admin User: {}", adminUser);
+    logInfo("010", "creating initial Admin User: {}", adminUser);
   }
 
   public void skipAdminUserCreation(User existingUser) {
-    logInfo("011", "skip creating initital Admin User, user does exist: {}", existingUser);
+    logInfo("011", "skip creating initial Admin User, user does exist: {}", existingUser);
   }
 
   public void createInitialFilter(Filter filter) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSession.java
Patch:
@@ -481,7 +481,9 @@ public boolean isTablePresent(String tableName) {
         tables = databaseMetaData.getTables(this.connectionMetadataDefaultCatalog, schema, tableName, JDBC_METADATA_TABLE_TYPES);
         return tables.next();
       } finally {
-        tables.close();
+        if (tables != null) {
+          tables.close();
+        }
       }
 
     } catch (Exception e) {

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ProcessDefinitionRestServiceQueryTest.java
Patch:
@@ -473,7 +473,7 @@ public void testStartableInTasklistPermissionCheck() {
     mockedQuery = setUpMockDefinitionQuery(processDefinitions);
 
     given()
-      .queryParam("permissionCheck", true)
+      .queryParam("startablePermissionCheck", true)
       .then().expect()
       .statusCode(Status.OK.getStatusCode())
       .when()

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/repository/ProcessDefinitionQueryDto.java
Patch:
@@ -354,7 +354,7 @@ protected void applyFilters(ProcessDefinitionQuery query) {
       query.notStartableInTasklist();
     }
     if (TRUE.equals(permissionCheck)) {
-      query.permissionCheck();
+      query.startablePermissionCheck();
     }
 
   }

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ProcessDefinitionRestServiceQueryTest.java
Patch:
@@ -479,7 +479,7 @@ public void testStartableInTasklistPermissionCheck() {
       .when()
       .get(PROCESS_DEFINITION_QUERY_URL);
 
-    verify(mockedQuery).permissionCheck();
+    verify(mockedQuery).startablePermissionCheck();
     verify(mockedQuery).list();
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/repository/ProcessDefinitionQuery.java
Patch:
@@ -190,7 +190,7 @@ public interface ProcessDefinitionQuery extends Query<ProcessDefinitionQuery, Pr
    */
   ProcessDefinitionQuery notStartableInTasklist();
 
-  ProcessDefinitionQuery permissionCheck();
+  ProcessDefinitionQuery startablePermissionCheck();
 
   // ordering ////////////////////////////////////////////////////////////
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExternalTaskManager.java
Patch:
@@ -48,7 +48,7 @@ public ExternalTaskEntity findExternalTaskById(String id) {
 
   public void insert(ExternalTaskEntity externalTask) {
     getDbEntityManager().insert(externalTask);
-    fireExternalTaskCreatedEvent();
+    fireExternalTaskAvailableEvent();
   }
 
   public void delete(ExternalTaskEntity externalTask) {
@@ -147,8 +147,7 @@ protected ListQueryParameterObject configureParameterizedQuery(Object parameter)
     return getTenantManager().configureQuery(parameter);
   }
 
-  public void fireExternalTaskCreatedEvent() {
-
+  public void fireExternalTaskAvailableEvent() {
     Context.getCommandContext()
       .getTransactionContext()
       .addTransactionListener(TransactionState.COMMITTED, new TransactionListener() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/CreateTenantCmd.java
Patch:
@@ -14,6 +14,7 @@
 package org.camunda.bpm.engine.impl.cmd;
 
 import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
+import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureWhitelistedResourceId;
 
 import java.io.Serializable;
 
@@ -34,6 +35,8 @@ public CreateTenantCmd(String tenantId) {
 
   @Override
   protected Tenant executeCmd(CommandContext commandContext) {
+    ensureWhitelistedResourceId(commandContext, "Tenant", tenantId);
+
     return commandContext
       .getWritableIdentityProvider()
       .createNewTenant(tenantId);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/CreateUserCmd.java
Patch:
@@ -19,7 +19,7 @@
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 
 import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
-
+import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureWhitelistedResourceId;
 
 /**
  * @author Tom Baeyens
@@ -36,6 +36,8 @@ public CreateUserCmd(String userId) {
   }
   
   protected User executeCmd(CommandContext commandContext) {
+    ensureWhitelistedResourceId(commandContext, "User", userId);
+
     return commandContext
       .getWritableIdentityProvider()
       .createNewUser(userId);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SaveGroupCmd.java
Patch:
@@ -16,7 +16,6 @@
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.persistence.entity.GroupEntity;
-import org.camunda.bpm.engine.impl.util.EnsureUtil;
 
 import static org.camunda.bpm.engine.impl.util.EnsureUtil.*;
 
@@ -35,6 +34,7 @@ public SaveGroupCmd(GroupEntity group) {
   
   protected Void executeCmd(CommandContext commandContext) {
     ensureNotNull("group", group);
+    ensureWhitelistedResourceId(commandContext, "Group", group.getId());
 
     commandContext
       .getWritableIdentityProvider()

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SaveTenantCmd.java
Patch:
@@ -13,6 +13,7 @@
 package org.camunda.bpm.engine.impl.cmd;
 
 import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
+import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureWhitelistedResourceId;
 
 import java.io.Serializable;
 
@@ -32,6 +33,7 @@ public SaveTenantCmd(Tenant tenant) {
   @Override
   protected Void executeCmd(CommandContext commandContext) {
     ensureNotNull("tenant", tenant);
+    ensureWhitelistedResourceId(commandContext, "Tenant", tenant.getId());
 
     commandContext
       .getWritableIdentityProvider()

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SaveUserCmd.java
Patch:
@@ -19,7 +19,7 @@
 import org.camunda.bpm.engine.impl.persistence.entity.UserEntity;
 
 import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
-
+import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureWhitelistedResourceId;
 
 /**
  * @author Joram Barrez
@@ -35,6 +35,7 @@ public SaveUserCmd(User user) {
   
   protected Void executeCmd(CommandContext commandContext) {
     ensureNotNull("user", user);
+    ensureWhitelistedResourceId(commandContext, "User", user.getId());
 
     commandContext
       .getWritableIdentityProvider()

File: clients/java/client/src/main/java/org/camunda/bpm/client/ExternalTaskClientBuilder.java
Patch:
@@ -13,6 +13,7 @@
 package org.camunda.bpm.client;
 
 import org.camunda.bpm.client.backoff.BackoffStrategy;
+import org.camunda.bpm.client.backoff.ExponentialBackoffStrategy;
 import org.camunda.bpm.client.exception.ExternalTaskClientException;
 import org.camunda.bpm.client.interceptor.ClientRequestInterceptor;
 
@@ -54,7 +55,7 @@ public interface ExternalTaskClientBuilder {
 
   /**
    * Specifies the maximum amount of tasks that can be fetched within one request.
-   * This information is optional.
+   * This information is optional. Default is 10.
    *
    * @param maxTasks which are supposed to be fetched within one request
    * @return the builder
@@ -109,7 +110,7 @@ public interface ExternalTaskClientBuilder {
 
   /**
    * Adds a custom strategy to the client for defining the org.camunda.bpm.client.backoff between two requests.
-   * This information is optional.
+   * This information is optional. Default is {@link ExponentialBackoffStrategy}
    *
    * @param backoffStrategy which realizes a custom org.camunda.bpm.client.backoff strategy
    * @return the builder

File: clients/java/client/src/main/java/org/camunda/bpm/client/topic/impl/TopicSubscriptionManager.java
Patch:
@@ -123,6 +123,7 @@ protected List<ExternalTask> fetchAndLock(List<TopicRequestDto> subscriptions) {
     List<ExternalTask> externalTasks = Collections.emptyList();
 
     try {
+      LOG.fetchAndLock(subscriptions);
       externalTasks = engineClient.fetchAndLock(subscriptions);
     } catch (EngineClientException e) {
       LOG.exceptionWhilePerformingFetchAndLock(e);

File: clients/java/examples/loan-granting/src/main/java/org/camunda/bpm/App.java
Patch:
@@ -39,8 +39,6 @@ public static void main(String... args) throws InterruptedException {
         System.out.println("The External Task " + externalTask.getId() + " has been completed!");
 
       }).open();
-
-    Thread.sleep(1000 * 60 * 5);
   }
 
 }
\ No newline at end of file

File: clients/java/examples/order-handling/src/main/java/org/camunda/bpm/App.java
Patch:
@@ -46,8 +46,6 @@ public static void main(String... args) throws InterruptedException {
           " has been completed!");
 
       }).open();
-
-    Thread.sleep(1000 * 60 * 5);
   }
 
 }
\ No newline at end of file

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/history/CustomHistoryLevelWithoutUserOperationLogTest.java
Patch:
@@ -62,11 +62,11 @@ public class CustomHistoryLevelWithoutUserOperationLogTest {
   private static final String ONE_TASK_PROCESS = "org/camunda/bpm/engine/test/api/oneTaskProcess.bpmn20.xml";
   protected static final String ONE_TASK_CASE = "org/camunda/bpm/engine/test/api/cmmn/oneTaskCase.cmmn";
 
-  HistoryLevel customHistoryLevelFull = new CustomHistoryLevelFullWithoutUserOperationLog();
+  HistoryLevel customHistoryLevelFullWUOL = new CustomHistoryLevelFullWithoutUserOperationLog();
   public ProcessEngineBootstrapRule bootstrapRule = new ProcessEngineBootstrapRule() {
     public ProcessEngineConfiguration configureEngine(ProcessEngineConfigurationImpl configuration) {
       configuration.setJdbcUrl("jdbc:h2:mem:CustomHistoryLevelWithoutUserOperationLogTest");
-      configuration.setCustomHistoryLevels(Arrays.asList(customHistoryLevelFull));
+      configuration.setCustomHistoryLevels(Arrays.asList(customHistoryLevelFullWUOL));
       configuration.setHistory("aCustomHistoryLevelWUOL");
       configuration.setDatabaseSchemaUpdate(DB_SCHEMA_UPDATE_CREATE_DROP);
       return configuration;

File: engine/src/test/java/org/camunda/bpm/engine/test/api/identity/IdentityServiceTest.java
Patch:
@@ -996,7 +996,7 @@ public void testSeparateResourceWhitelistPatterns() {
       assertEquals("Group" + INVALID_ID_MESSAGE + "johnsGroup.", ex.getMessage());
     }
 
-    // left as general pattern: [a-zA-Z0-9]+|camunda-admin
+    // new general pattern (used for tenant whitelisting): [a-zA-Z0-9]+
     try {
       processEngine.getIdentityService().newTenant("!@##$%");
       fail("Invalid tenant id exception expected!");

File: engine/src/main/java/org/camunda/bpm/engine/impl/util/EnsureUtil.java
Patch:
@@ -372,7 +372,7 @@ public static void ensureActiveCommandContext(String operation) {
   }
 
   public static void ensureValidResourceId(CommandContext commandContext, String resourceType, String resourceId) {
-    String resourcePattern = commandContext.getProcessEngineConfiguration().getResourceWhitelistPattern();
+    String resourcePattern = commandContext.getProcessEngineConfiguration().getResourceWhitelistPattern(resourceType.toLowerCase());
     Pattern PATTERN = Pattern.compile(resourcePattern);
 
     if (!PATTERN.matcher(resourceId).matches()) {

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/instance/Process.java
Patch:
@@ -101,7 +101,7 @@ public interface Process extends CallableElement {
 
   void setCamundaHistoryTimeToLiveString(String historyTimeToLive);
 
-  Boolean isStartableInTasklist();
+  Boolean isCamundaStartableInTasklist();
 
-  void setStartableInTasklist(Boolean startableInTasklist);
+  void setCamundaIsStartableInTasklist(Boolean isStartableInTasklist);
 }

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/BpmnTestConstants.java
Patch:
@@ -78,6 +78,7 @@ public final class BpmnTestConstants {
   public static final String TEST_SERVICE_TASK_PRIORITY = "${test}";
   public static final String TEST_EXTERNAL_TASK_TOPIC = "${externalTaskTopic}";
   public static final Integer TEST_HISTORY_TIME_TO_LIVE = 5;
+  public static final Boolean TEST_STARTABLE_IN_TASKLIST = false;
 
   public static final String TEST_CONDITION = "${true}";
   public static final String TEST_CONDITIONAL_VARIABLE_NAME = "variable";

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/CamundaExtensionsTest.java
Patch:
@@ -250,7 +250,7 @@ public void testHistoryTimeToLive() {
 
   @Test
   public void testIsStartableInTasklist() {
-    assertThat(process.isStartableInTasklist()).isEqualTo(true);
+    assertThat(process.isCamundaStartableInTasklist()).isEqualTo(false);
   }
 
   @Test

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/instance/ProcessTest.java
Patch:
@@ -60,7 +60,7 @@ public Collection<AttributeAssumption> getAttributesAssumptions() {
       new AttributeAssumption(CAMUNDA_NS, "jobPriority"),
       new AttributeAssumption(CAMUNDA_NS, "taskPriority"),
       new AttributeAssumption(CAMUNDA_NS, "historyTimeToLive"),
-      new AttributeAssumption(CAMUNDA_NS, "isStartableInTasklist")
+      new AttributeAssumption(CAMUNDA_NS, "isStartableInTasklist", false, false, true)
     );
   }
 

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/instance/camunda/CompatabilityTest.java
Patch:
@@ -61,11 +61,11 @@ public void modifyingAttributeWithActivitiNsKeepsIt() {
     process.setCamundaTaskPriority(priority);
     Integer historyTimeToLive = 10;
     process.setCamundaHistoryTimeToLive(historyTimeToLive);
-    process.setStartableInTasklist(false);
+    process.setCamundaIsStartableInTasklist(false);
     assertThat(process.getAttributeValueNs(BpmnModelConstants.ACTIVITI_NS, "jobPriority"), is(priority));
     assertThat(process.getAttributeValueNs(BpmnModelConstants.ACTIVITI_NS, "taskPriority"), is(priority));
     assertThat(process.getAttributeValueNs(BpmnModelConstants.ACTIVITI_NS, "historyTimeToLive"), is(historyTimeToLive.toString()));
-    assertThat(process.isStartableInTasklist(), is(false));
+    assertThat(process.isCamundaStartableInTasklist(), is(false));
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/ProcessEngineConfiguration.java
Patch:
@@ -279,7 +279,7 @@ public abstract class ProcessEngineConfiguration {
    *
    * <p>By default only alphanumeric values will be accepted.</p>
    */
-  protected String resourceWhitelistPattern =  "\\w+";
+  protected String resourceWhitelistPattern =  "[\\w-]+";
 
   /**
    * If the value of this flag is set <code>true</code> then the process engine

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/history/CustomHistoryLevelUserOperationLogTest.java
Patch:
@@ -26,6 +26,7 @@
 import static org.camunda.bpm.engine.history.UserOperationLogEntry.OPERATION_TYPE_SUSPEND_JOB;
 import static org.camunda.bpm.engine.history.UserOperationLogEntry.OPERATION_TYPE_SUSPEND_JOB_DEFINITION;
 import static org.camunda.bpm.engine.history.UserOperationLogEntry.OPERATION_TYPE_SUSPEND_PROCESS_DEFINITION;
+import static org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl.DB_SCHEMA_UPDATE_CREATE_DROP;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
@@ -81,6 +82,7 @@ public ProcessEngineConfiguration configureEngine(ProcessEngineConfigurationImpl
       configuration.setJdbcUrl("jdbc:h2:mem:CustomHistoryLevelUserOperationLogTest");
       configuration.setCustomHistoryLevels(Arrays.asList(customHistoryLevelFull));
       configuration.setHistory("aCustomHistoryLevelUOL");
+      configuration.setDatabaseSchemaUpdate(DB_SCHEMA_UPDATE_CREATE_DROP);
       return configuration;
     }
   };

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/history/CustomHistoryLevelWithoutUserOperationLogTest.java
Patch:
@@ -16,6 +16,7 @@
 import static org.camunda.bpm.engine.EntityTypes.JOB_DEFINITION;
 import static org.camunda.bpm.engine.EntityTypes.PROCESS_DEFINITION;
 import static org.camunda.bpm.engine.EntityTypes.PROCESS_INSTANCE;
+import static org.camunda.bpm.engine.ProcessEngineConfiguration.DB_SCHEMA_UPDATE_CREATE_DROP;
 import static org.camunda.bpm.engine.history.UserOperationLogEntry.OPERATION_TYPE_SET_JOB_RETRIES;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
@@ -67,6 +68,7 @@ public ProcessEngineConfiguration configureEngine(ProcessEngineConfigurationImpl
       configuration.setJdbcUrl("jdbc:h2:mem:CustomHistoryLevelWithoutUserOperationLogTest");
       configuration.setCustomHistoryLevels(Arrays.asList(customHistoryLevelFull));
       configuration.setHistory("aCustomHistoryLevelWUOL");
+      configuration.setDatabaseSchemaUpdate(DB_SCHEMA_UPDATE_CREATE_DROP);
       return configuration;
     }
   };

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/CreateTenantCmd.java
Patch:
@@ -14,6 +14,7 @@
 package org.camunda.bpm.engine.impl.cmd;
 
 import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
+import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureValidResourceId;
 
 import java.io.Serializable;
 
@@ -34,6 +35,8 @@ public CreateTenantCmd(String tenantId) {
 
   @Override
   protected Tenant executeCmd(CommandContext commandContext) {
+    ensureValidResourceId(commandContext, "Tenant", tenantId);
+
     return commandContext
       .getWritableIdentityProvider()
       .createNewTenant(tenantId);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/CreateUserCmd.java
Patch:
@@ -19,7 +19,7 @@
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 
 import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
-
+import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureValidResourceId;
 
 /**
  * @author Tom Baeyens
@@ -36,6 +36,8 @@ public CreateUserCmd(String userId) {
   }
   
   protected User executeCmd(CommandContext commandContext) {
+    ensureValidResourceId(commandContext, "User", userId);
+
     return commandContext
       .getWritableIdentityProvider()
       .createNewUser(userId);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SaveGroupCmd.java
Patch:
@@ -35,6 +35,7 @@ public SaveGroupCmd(GroupEntity group) {
   
   protected Void executeCmd(CommandContext commandContext) {
     ensureNotNull("group", group);
+    ensureValidResourceId(commandContext, "Group", group.getId());
 
     commandContext
       .getWritableIdentityProvider()

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SaveTenantCmd.java
Patch:
@@ -13,6 +13,7 @@
 package org.camunda.bpm.engine.impl.cmd;
 
 import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
+import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureValidResourceId;
 
 import java.io.Serializable;
 
@@ -32,6 +33,7 @@ public SaveTenantCmd(Tenant tenant) {
   @Override
   protected Void executeCmd(CommandContext commandContext) {
     ensureNotNull("tenant", tenant);
+    ensureValidResourceId(commandContext, "Tenant", tenant.getId());
 
     commandContext
       .getWritableIdentityProvider()

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SaveUserCmd.java
Patch:
@@ -19,7 +19,7 @@
 import org.camunda.bpm.engine.impl.persistence.entity.UserEntity;
 
 import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
-
+import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureValidResourceId;
 
 /**
  * @author Joram Barrez
@@ -35,6 +35,7 @@ public SaveUserCmd(User user) {
   
   protected Void executeCmd(CommandContext commandContext) {
     ensureNotNull("user", user);
+    ensureValidResourceId(commandContext, "User", user.getId());
 
     commandContext
       .getWritableIdentityProvider()

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/UserOperationLogManager.java
Patch:
@@ -22,6 +22,7 @@
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.history.event.HistoryEvent;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventProcessor;
+import org.camunda.bpm.engine.impl.history.event.HistoryEventTypes;
 import org.camunda.bpm.engine.impl.history.event.UserOperationLogEntryEventEntity;
 import org.camunda.bpm.engine.impl.history.producer.HistoryEventProducer;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
@@ -298,7 +299,7 @@ public void logDeploymentOperation(String operation, String deploymentId, List<P
   }
 
   public boolean isUserOperationLogEnabled() {
-    return isHistoryLevelFullEnabled() &&
+    return Context.getProcessEngineConfiguration().getHistoryLevel().isHistoryEventProduced(HistoryEventTypes.USER_OPERATION_LOG, null) &&
         ((isUserOperationLogEnabledOnCommandContext() && isUserAuthenticated()) ||
             !writeUserOperationLogOnlyWithLoggedInUser());
   }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/optimize/OptimizeRestService.java
Patch:
@@ -129,7 +129,8 @@ public List<HistoricVariableUpdateDto> getHistoricVariableUpdates(@QueryParam("o
 
     List<HistoricVariableUpdateDto> result = new ArrayList<HistoricVariableUpdateDto>();
     for (HistoricVariableUpdate instance : historicVariableUpdates) {
-      HistoricVariableUpdateDto dto = HistoricVariableUpdateDto.fromHistoricVariableUpdate(instance);
+      HistoricVariableUpdateDto dto =
+        (HistoricVariableUpdateDto) HistoricVariableUpdateDto.fromHistoricDetail(instance);
       result.add(dto);
     }
     return result;

File: webapps/src/main/java/org/camunda/bpm/webapp/impl/security/auth/UserAuthenticationResource.java
Patch:
@@ -96,8 +96,9 @@ public Response doLogin(
       return forbidden();
     }
 
-    final Authentications authentications = Authentications.getCurrent();
-    authentications.addAuthentication(authentication);
+    if (request != null) {
+      Authentications.revalidateSession(request, authentication);
+    }
 
     return Response.ok(AuthenticationDto.fromAuthentication(authentication)).build();
   }

File: qa/test-db-instance-migration/test-fixture-79/src/main/java/org/camunda/bpm/qa/upgrade/json/CreateProcessInstanceWithJsonVariablesScenario.java
Patch:
@@ -29,7 +29,7 @@ public static ScenarioSetup initProcessInstance() {
     return new ScenarioSetup() {
       public void execute(ProcessEngine engine, String scenarioName) {
         // given
-        ProcessInstance processInstance = engine.getRuntimeService().startProcessInstanceByKey("Process", "processWithJsonVariables");
+        ProcessInstance processInstance = engine.getRuntimeService().startProcessInstanceByKey("Process", "processWithJsonVariables79");
         // when
         Execution execution = engine.getRuntimeService().createExecutionQuery().processInstanceId(processInstance.getId()).singleResult();
         engine.getRuntimeService().setVariable(execution.getId(), "objectVariable", createObjectVariable());

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios790/CreateProcessInstanceWithJsonVariablesTest.java
Patch:
@@ -36,7 +36,7 @@ public class CreateProcessInstanceWithJsonVariablesTest {
   @Test
   public void testCreateProcessInstanceWithVariable() {
     // then
-    ProcessInstance processInstance = engineRule.getRuntimeService().createProcessInstanceQuery().processInstanceBusinessKey("processWithJsonVariables").singleResult();
+    ProcessInstance processInstance = engineRule.getRuntimeService().createProcessInstanceQuery().processInstanceBusinessKey("processWithJsonVariables79").singleResult();
     List<VariableInstance> variables = engineRule.getRuntimeService().createVariableInstanceQuery().processInstanceIdIn(processInstance.getId()).list();
     assertEquals(4, variables.size());
 

File: engine/src/main/java/org/camunda/bpm/engine/history/HistoricDetailQuery.java
Patch:
@@ -171,7 +171,7 @@ public interface HistoricDetailQuery extends Query<HistoricDetailQuery, Historic
    * <code>
    * historyService.createHistoricDetailQuery()<br>
    * &nbsp;&nbsp;.variableInstanceId("myVariableInstId")<br>
-   * &nbsp;&nbsp;.orderBySequenceCounter()<br>
+   * &nbsp;&nbsp;.orderPartiallyByOccurrence()<br>
    * &nbsp;&nbsp;.asc()<br>
    * &nbsp;&nbsp;.list()
    * </code>

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/EnginePersistenceLogger.java
Patch:
@@ -27,7 +27,6 @@
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.SuspendedEntityInteractionException;
 import org.camunda.bpm.engine.WrongDbException;
-import org.camunda.bpm.engine.authorization.Groups;
 import org.camunda.bpm.engine.exception.NotValidException;
 import org.camunda.bpm.engine.impl.ProcessEngineLogger;
 import org.camunda.bpm.engine.impl.db.entitymanager.cache.CachedDbEntity;
@@ -312,7 +311,7 @@ public ProcessEngineException illegalValueForUserIdException(String id, String e
 
   public AuthorizationException requiredCamundaAdminException() {
     return new AuthorizationException(
-      exceptionMessage("029", "Required authenticated group '{}'.", Groups.CAMUNDA_ADMIN));
+      exceptionMessage("029", "Required admin authenticated group."));
   }
 
   public void createChildExecution(ExecutionEntity child, ExecutionEntity parent) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/plugin/AdministratorAuthorizationPlugin.java
Patch:
@@ -51,6 +51,9 @@ public class AdministratorAuthorizationPlugin extends AbstractProcessEnginePlugi
 
   public void postInit(ProcessEngineConfigurationImpl processEngineConfiguration) {
     authorizationEnabled = processEngineConfiguration.isAuthorizationEnabled();
+    if (administratorGroupName != null && administratorGroupName.length() > 0) {
+      processEngineConfiguration.getAdminGroups().add(administratorGroupName);
+    }
   }
 
   public void postProcessEngineBuild(ProcessEngine processEngine) {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/HistoryCleanupAuthorizationTest.java
Patch:
@@ -92,8 +92,7 @@ public void testHistoryCleanupWithoutAuthorization() {
     } catch (AuthorizationException e) {
       // then
       String message = e.getMessage();
-      assertTextPresent(Groups.CAMUNDA_ADMIN, message);
-      assertTextPresent("Required authenticated group", message);
+      assertTextPresent("ENGINE-03029 Required admin authenticated group.", message);
     }
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/identity/IdentityServiceAuthorizationsTest.java
Patch:
@@ -277,7 +277,7 @@ public void testUserUnlockWithoutAuthorization() throws ParseException {
       identityService.unlockUser(lockedUser.getId());
       fail("expected exception");
     } catch (AuthorizationException e) {
-      assertTrue(e.getMessage().contains("Required authenticated group 'camunda-admin'."));
+      assertTrue(e.getMessage().contains("ENGINE-03029 Required admin authenticated group."));
     }
 
     // return to god-mode

File: engine-plugins/identity-ldap/src/main/java/org/camunda/bpm/identity/impl/ldap/LdapIdentityProviderSession.java
Patch:
@@ -592,7 +592,7 @@ protected boolean isAuthenticatedUser(UserEntity user) {
     if(user.getId() == null) {
       return false;
     }
-    return user.getId().equals(org.camunda.bpm.engine.impl.context.Context.getCommandContext().getAuthenticatedUserId());
+    return user.getId().equalsIgnoreCase(org.camunda.bpm.engine.impl.context.Context.getCommandContext().getAuthenticatedUserId());
   }
 
   protected boolean isAuthorized(Permission permission, Resource resource, String resourceId) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -708,7 +708,7 @@ public abstract class ProcessEngineConfigurationImpl extends ProcessEngineConfig
 
   protected Map<Integer, BatchWindowConfiguration> historyCleanupBatchWindows = new HashMap<Integer, BatchWindowConfiguration>();
 
-  //shotcuts for batch windows configuration available to be configured from XML
+  //shortcuts for batch windows configuration available to be configured from XML
   protected String mondayHistoryCleanupBatchWindowStartTime;
   protected String mondayHistoryCleanupBatchWindowEndTime;
   protected String tuesdayHistoryCleanupBatchWindowStartTime;

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/historycleanup/DefaultBatchWindowManager.java
Patch:
@@ -55,7 +55,7 @@ public BatchWindow getCurrentOrNextBatchWindow(Date date, ProcessEngineConfigura
     }
 
     //check next week
-    for (int i=1; i<7; i++ ) {
+    for (int i=1; i<=7; i++ ) {
       Date dateToCheck = addDays(date, i);
       final BatchWindow batchWindowForDate = getBatchWindowForDate(dateToCheck, configuration);
       if (batchWindowForDate != null) {
@@ -73,7 +73,7 @@ public BatchWindow getNextBatchWindow(Date date, ProcessEngineConfigurationImpl
       return currentDayBatchWindow;
     } else {
       //check next week
-      for (int i=1; i<7; i++ ) {
+      for (int i=1; i<=7; i++ ) {
         Date dateToCheck = addDays(date, i);
         final BatchWindow batchWindowForDate = getBatchWindowForDate(dateToCheck, configuration);
         if (batchWindowForDate != null) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/historycleanup/HistoryCleanupHelper.java
Patch:
@@ -29,6 +29,9 @@ public abstract class HistoryCleanupHelper {
   public static boolean isWithinBatchWindow(Date date, ProcessEngineConfigurationImpl configuration) {
     if (configuration.getBatchWindowManager().isBatchWindowConfigured(configuration)) {
       BatchWindow batchWindow = configuration.getBatchWindowManager().getCurrentOrNextBatchWindow(date, configuration);
+      if (batchWindow == null) {
+        return false;
+      }
       return batchWindow.isWithin(date);
     } else {
       return false;

File: clients/java/client/src/main/java/org/camunda/bpm/client/variable/impl/value/DeferredFileValueImpl.java
Patch:
@@ -15,14 +15,15 @@
 import org.camunda.bpm.client.impl.EngineClient;
 import org.camunda.bpm.client.impl.EngineClientException;
 import org.camunda.bpm.client.impl.ExternalTaskClientLogger;
+import org.camunda.bpm.client.variable.value.DeferredFileValue;
 import org.camunda.bpm.engine.variable.impl.value.FileValueImpl;
 import org.camunda.bpm.engine.variable.type.PrimitiveValueType;
 import org.camunda.bpm.engine.variable.value.FileValue;
 
 /**
  * @author Tassilo Weidner
  */
-public class DeferredFileValue extends FileValueImpl {
+public class DeferredFileValueImpl extends FileValueImpl implements DeferredFileValue {
 
   protected static final ExternalTaskClientLogger LOG = ExternalTaskClientLogger.CLIENT_LOGGER;
 
@@ -32,7 +33,7 @@ public class DeferredFileValue extends FileValueImpl {
   protected String processInstanceId;
   protected EngineClient engineClient;
 
-  public DeferredFileValue(FileValue fileValue, String variableName, String processInstanceId, EngineClient engineClient) {
+  public DeferredFileValueImpl(FileValue fileValue, String variableName, String processInstanceId, EngineClient engineClient) {
     super(PrimitiveValueType.FILE, fileValue.getFilename());
 
     setValue(null); // deferred

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -604,12 +604,15 @@ public void setCaseExecution(DelegateCaseExecution caseExecution) {
       this.caseExecutionId = this.caseExecution.getId();
       this.caseInstanceId = this.caseExecution.getCaseInstanceId();
       this.caseDefinitionId = this.caseExecution.getCaseDefinitionId();
+      this.tenantId = this.caseExecution.getTenantId();
 
     } else {
       this.caseExecution = null;
       this.caseExecutionId = null;
       this.caseInstanceId = null;
       this.caseDefinitionId = null;
+      this.tenantId = null;
+
     }
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/multitenancy/MultiTenancyExecutionPropagationTest.java
Patch:
@@ -447,7 +447,7 @@ public void testPropagateTenantIdToVariableInstanceFromHumanTask() {
     assertThat(variableInstance.getTenantId(), is(TENANT_ID));
   }
 
-  public void FAILING_testPropagateTenantIdToTaskOnCreateCaseInstance() {
+  public void testPropagateTenantIdToTaskOnCreateCaseInstance() {
     deploymentForTenant(TENANT_ID, CMMN_FILE);
 
     CaseDefinition caseDefinition = repositoryService.createCaseDefinitionQuery().singleResult();

File: engine/src/test/java/org/camunda/bpm/engine/test/api/form/FormServiceTest.java
Patch:
@@ -73,7 +73,6 @@
 import org.camunda.commons.utils.IoUtil;
 import org.junit.After;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
@@ -1207,7 +1206,6 @@ public void testGetDeployedTaskForm() {
     assertEquals(deployedStartFormAsString, fileAsString);
   }
 
-  @Ignore("CAM-9081")
   @Deployment(resources = { "org/camunda/bpm/engine/test/api/form/DeployedFormsCase.cmmn11.xml",
     "org/camunda/bpm/engine/test/api/form/task.form" })
   @Test

File: clients/java/client/src/main/java/org/camunda/bpm/client/topic/impl/TopicSubscriptionManager.java
Patch:
@@ -133,6 +133,7 @@ protected List<ExternalTask> fetchAndLock(List<TopicRequestDto> subscriptions) {
 
   protected void handleExternalTask(ExternalTask externalTask, ExternalTaskHandler taskHandler) {
     ExternalTaskImpl task = (ExternalTaskImpl) externalTask;
+    task.setEngineClient(engineClient);
 
     Map<String, TypedValueField> variables = task.getVariables();
     Map<String, VariableValue> wrappedVariables = typedValues.wrapVariables(variables);

File: engine/src/main/java/org/camunda/bpm/engine/history/HistoricDetailQuery.java
Patch:
@@ -115,10 +115,10 @@ public interface HistoricDetailQuery extends Query<HistoricDetailQuery, Historic
    */
   HistoricDetailQuery userOperationId(String userOperationId);
 
-  /** Only select historic details that were occurred before the given date (inclusive). */
+  /** Only select historic details that have occurred before the given date (inclusive). */
   HistoricDetailQuery occurredBefore(Date date);
 
-  /** Only select historic details that were occurred after the given date (inclusive). */
+  /** Only select historic details that have occurred after the given date (inclusive). */
   HistoricDetailQuery occurredAfter(Date date);
 
   /**

File: engine/src/main/java/org/camunda/bpm/engine/history/HistoricDetailQuery.java
Patch:
@@ -106,6 +106,9 @@ public interface HistoricDetailQuery extends Query<HistoricDetailQuery, Historic
   /** Only select historic details with one of the given tenant ids. */
   HistoricDetailQuery tenantIdIn(String... tenantIds);
 
+  /** Only select historic details with the given process instance ids. */
+  HistoricDetailQuery processInstanceIdIn(String... processInstanceIds);
+
   /**
    * Select historic details related with given userOperationId.
    */

File: engine/src/main/java/org/camunda/bpm/engine/history/HistoricDetailQuery.java
Patch:
@@ -67,6 +67,9 @@ public interface HistoricDetailQuery extends Query<HistoricDetailQuery, Historic
   /** Only select historic variable updates associated to the given {@link HistoricVariableInstance historic variable instance}. */
   HistoricDetailQuery variableInstanceId(String variableInstanceId);
 
+  /** Only select historic process variables which match one of the given variable types. */
+  HistoricDetailQuery variableTypeIn(String... variableTypes);
+
   /** Only select {@link HistoricFormProperty}s. */
   @Deprecated
   HistoricDetailQuery formProperties();

File: clients/java/src/test/java/org/camunda/bpm/client/variable/DateValueMapperTest.java
Patch:
@@ -21,7 +21,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import java.text.SimpleDateFormat;
 import java.util.Date;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -401,7 +401,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     constants.put("constant.datepart.quarter", "QUARTER");
     constants.put("constant.datepart.month", "MONTH");
     constants.put("constant.datepart.minute", "MINUTE");
-    constants.put("constant.null.startTime", "CAST(NULL as TIMESTAMP) as START_TIME_");
+    constants.put("constant.null.startTime", "CAST(NULL AS datetime2) AS START_TIME_");
     constants.put("constant.varchar.cast", "'${key}'");
     dbSpecificConstants.put(MSSQL, constants);
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -401,7 +401,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     constants.put("constant.datepart.quarter", "QUARTER");
     constants.put("constant.datepart.month", "MONTH");
     constants.put("constant.datepart.minute", "MINUTE");
-    constants.put("constant.null.startTime", "null START_TIME_");
+    constants.put("constant.null.startTime", "CAST(NULL as TIMESTAMP) as START_TIME_");
     constants.put("constant.varchar.cast", "'${key}'");
     dbSpecificConstants.put(MSSQL, constants);
   }

File: engine/src/main/java/org/camunda/bpm/engine/runtime/ProcessInstanceQuery.java
Patch:
@@ -217,6 +217,9 @@ public interface ProcessInstanceQuery extends Query<ProcessInstanceQuery, Proces
    */
   ProcessInstanceQuery activityIdIn(String... activityIds);
 
+  /** Only selects process instances which are top level process instances. */
+  ProcessInstanceQuery rootProcessInstances();
+
   //ordering /////////////////////////////////////////////////////////////////
 
   /** Order by id (needs to be followed by {@link #asc()} or {@link #desc()}). */

File: engine-spring/src/main/java/org/camunda/bpm/engine/spring/SpringProcessEngineConfiguration.java
Patch:
@@ -27,7 +27,7 @@ public class SpringProcessEngineConfiguration extends SpringTransactionsProcessE
 
   @Override
   protected void initArtifactFactory() {
-    if (artifactFactory == null) {
+    if (artifactFactory == null && applicationContext != null) {
       artifactFactory = new SpringArtifactFactory(applicationContext);
     }
   }

File: clients/java/client/src/main/java/org/camunda/bpm/client/topic/TopicSubscription.java
Patch:
@@ -52,7 +52,7 @@ public interface TopicSubscription {
   List<String> getVariableNames();
 
   /**
-   * @return the business key associated with external tasks which are supposed be fetched and locked
+   * @return the business key associated with the external tasks which are supposed to be fetched and locked
    */
   String getBusinessKey();
 

File: clients/java/client/src/main/java/org/camunda/bpm/client/topic/TopicSubscriptionBuilder.java
Patch:
@@ -46,7 +46,7 @@ public interface TopicSubscriptionBuilder {
   TopicSubscriptionBuilder variables(String... variableNames);
 
   /**
-   * @param businessKey to filter for external tasks which are supposed be fetched and locked
+   * @param businessKey to filter for external tasks that are supposed to be fetched and locked
    * @return the builder
    */
   TopicSubscriptionBuilder businessKey(String businessKey);

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ExternalTaskRestServiceInteractionTest.java
Patch:
@@ -76,7 +76,6 @@
 import org.mockito.InOrder;
 
 import com.jayway.restassured.http.ContentType;
-import org.mockito.Mock;
 
 /**
  * @author Thorben Lindhauer
@@ -1020,6 +1019,7 @@ public void testGetSingleExternalTask() {
       .body("workerId", equalTo(MockProvider.EXTERNAL_TASK_WORKER_ID))
       .body("tenantId", equalTo(MockProvider.EXAMPLE_TENANT_ID))
       .body("priority", equalTo(MockProvider.EXTERNAL_TASK_PRIORITY))
+      .body("businessKey", equalTo(MockProvider.EXAMPLE_PROCESS_INSTANCE_BUSINESS_KEY))
     .when()
       .get(SINGLE_EXTERNAL_TASK_URL);
   }
@@ -1443,7 +1443,7 @@ public void testSetRetriesAsyncWithExternalTaskQuery() {
 
   @Test
   public void testExtendLockOnExternalTask() {
-    
+
     Map<String, Object> parameters = new HashMap<String, Object>();
     parameters.put("workerId", "workerId");
     parameters.put("newDuration", "1000");

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ExternalTaskRestServiceQueryTest.java
Patch:
@@ -136,6 +136,7 @@ public void testSimpleTaskQuery() {
     String workerId = from(content).getString("[0].workerId");
     String tenantId = from(content).getString("[0].tenantId");
     long priority = from(content).getLong("[0].priority");
+    String businessKey = from(content).getString("[0].businessKey");
 
     Assert.assertEquals(MockProvider.EXAMPLE_ACTIVITY_ID, activityId);
     Assert.assertEquals(MockProvider.EXAMPLE_ACTIVITY_INSTANCE_ID, activityInstanceId);
@@ -152,6 +153,7 @@ public void testSimpleTaskQuery() {
     Assert.assertEquals(MockProvider.EXTERNAL_TASK_WORKER_ID, workerId);
     Assert.assertEquals(MockProvider.EXAMPLE_TENANT_ID, tenantId);
     Assert.assertEquals(MockProvider.EXTERNAL_TASK_PRIORITY, priority);
+    Assert.assertEquals(MockProvider.EXAMPLE_PROCESS_INSTANCE_BUSINESS_KEY, businessKey);
   }
 
   @Test

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -2860,7 +2860,8 @@ public static MockExternalTaskBuilder mockExternalTask() {
       .topicName(EXTERNAL_TASK_TOPIC_NAME)
       .workerId(EXTERNAL_TASK_WORKER_ID)
       .tenantId(EXAMPLE_TENANT_ID)
-      .priority(EXTERNAL_TASK_PRIORITY);
+      .priority(EXTERNAL_TASK_PRIORITY)
+      .businessKey(EXAMPLE_PROCESS_INSTANCE_BUSINESS_KEY);
 
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExternalTaskManager.java
Patch:
@@ -52,7 +52,7 @@ public List<ExternalTaskEntity> findExternalTasksByExecutionId(String id) {
 
   @SuppressWarnings("unchecked")
   public List<ExternalTaskEntity> findExternalTasksByProcessInstanceId(String processInstanceId) {
-    return getDbEntityManager().selectList("selectExternalTasksByExecutionId", processInstanceId);
+    return getDbEntityManager().selectList("selectExternalTasksByProcessInstanceId", processInstanceId);
   }
 
   public List<ExternalTaskEntity> selectExternalTasksForTopics(Collection<TopicFetchInstruction> queryFilters, boolean filterByBusinessKey, int maxResults, boolean usePriority) {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/externaltask/ExternalTaskServiceTest.java
Patch:
@@ -2273,8 +2273,10 @@ public void testQueryByBusinessKey() {
           .singleResult();
       if (externalTask.getTopicName().equals(topicName1)) {
         assertEquals(businessKey1, pi.getBusinessKey());
+        assertEquals(businessKey1, externalTask.getBusinessKey());
       } else if (externalTask.getTopicName().equals(topicName2)){
         assertEquals(businessKey2, pi.getBusinessKey());
+        assertEquals(businessKey2, externalTask.getBusinessKey());
       } else {
         fail("No other topic name values should be available!");
       }
@@ -2327,6 +2329,7 @@ public void testQueryByBusinessKeyLocking() {
       .singleResult();
 
     assertEquals(businessKey1, pi.getBusinessKey());
+    assertEquals(businessKey1, externalTask.getBusinessKey());
   }
 
   @Deployment(resources = "org/camunda/bpm/engine/test/api/externaltask/ExternalTaskServiceTest.testVariableValueTopicQuery.bpmn20.xml")

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/HistoryCleanupCmd.java
Patch:
@@ -78,7 +78,9 @@ public Job execute(CommandContext commandContext) {
 
       // don't set a new due date if the current one is already within the batch window
       Date newDueDate;
-      if (!immediatelyDue && HistoryCleanupHelper.isWithinBatchWindow(historyCleanupJob.getDuedate(), commandContext)) {
+      if (!immediatelyDue
+        && historyCleanupJob.getDuedate() != null
+        && HistoryCleanupHelper.isWithinBatchWindow(historyCleanupJob.getDuedate(), commandContext)) {
         newDueDate = historyCleanupJob.getDuedate();
       } else {
         newDueDate = HISTORY_CLEANUP_JOB_DECLARATION.resolveDueDate(historyCleanupContext);

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/deploy/cache/CaseDefinitionCache.java
Patch:
@@ -71,9 +71,7 @@ protected void checkInvalidDefinitionByKeyVersionAndTenantId(String definitionKe
 
   @Override
   protected void checkInvalidDefinitionByKeyVersionTagAndTenantId(String definitionKey, String definitionVersionTag, String tenantId, CaseDefinitionEntity definition) {
-    ensureNotNull(CaseDefinitionNotFoundException.class, "no case definition deployed with key = '" + definitionKey + "', versionTag = '" + definitionVersionTag + "'"
-        + " and tenant-id = '" + tenantId + "'", "caseDefinition", definition);
-  }
+    throw new UnsupportedOperationException("Version tag is not implemented in case definition.");  }
 
   @Override
   protected void checkInvalidDefinitionByDeploymentAndKey(String deploymentId, String definitionKey, CaseDefinitionEntity definition) {

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/ConcurrencyTestCase.java
Patch:
@@ -55,7 +55,7 @@ protected ThreadControl executeControllableCommand(final ControllableCommand<?>
     Thread thread = new Thread(new Runnable() {
       public void run() {
         try {
-          processEngineConfiguration.getCommandExecutorTxRequired().execute(command);
+          processEngineConfiguration.getCommandExecutorTxRequiresNew().execute(command);
         } catch(RuntimeException e) {
           command.monitor.setException(e);
           controlThread.interrupt();

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ModifyProcessInstanceCmd.java
Patch:
@@ -78,7 +78,7 @@ public Void execute(CommandContext commandContext) {
     processInstance = executionManager.findExecutionById(processInstanceId);
 
     if (!processInstance.hasChildren()) {
-      if (!(processInstance.getActivity() != null && !processInstance.getId().equals(processInstance.getActivityInstanceId()))) {
+      if (processInstance.getActivity() == null) {
         // process instance was cancelled
         checkDeleteProcessInstance(processInstance, commandContext);
         deletePropagate(processInstance, builder.getModificationReason(), builder.isSkipCustomListeners(), builder.isSkipIoMappings());

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityEnd.java
Patch:
@@ -79,6 +79,7 @@ public void execute(PvmExecutionImpl execution) {
       }
       else {
         // 1.2 Process End
+        propagatingExecution.setEnded(true);
         if (!propagatingExecution.isPreserveScope()) {
           propagatingExecution.performOperation(PROCESS_END);
         }

File: clients/java/src/main/java/org/camunda/bpm/client/impl/variable/mapper/serializable/ObjectValueMapper.java
Patch:
@@ -132,7 +132,7 @@ protected Object fromJson(String serializedValue, Class<?> type) throws EngineCl
 
   protected Object fromXml(String serializedValue, Class<?> type) throws EngineClientException {
     if (spinDataFormatsClass == null) {
-      throw INTERNAL_LOG.missingSpinXmlDependencyExceptionInternal();
+      throw INTERNAL_LOG.missingSpinDependencyExceptionInternal("xml");
     }
 
     try {

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/SpringBootProcessApplication.java
Patch:
@@ -5,6 +5,7 @@
 import static org.camunda.bpm.spring.boot.starter.util.GetProcessApplicationNameFromAnnotation.processApplicationNameFromAnnotation;
 import static org.camunda.bpm.spring.boot.starter.util.SpringBootProcessEngineLogger.LOG;
 
+import java.util.Collections;
 import java.util.Optional;
 import java.util.Set;
 
@@ -36,7 +37,7 @@ public static CamundaDeploymentConfiguration deploymentConfiguration() {
     return new CamundaDeploymentConfiguration() {
       @Override
       public Set<Resource> getDeploymentResources() {
-        return EMPTY_SET;
+        return Collections.emptySet();
       }
 
       @Override

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/property/AuthorizationProperty.java
Patch:
@@ -5,12 +5,12 @@
 public class AuthorizationProperty {
 
   /**
-   * enables authorization
+   * Enables authorization.
    */
   private boolean enabled = Defaults.INSTANCE.isAuthorizationEnabled();
 
   /**
-   * enables authorization for custom code
+   * Enables authorization for custom code.
    */
   private boolean enabledForCustomCode = Defaults.INSTANCE.isAuthorizationEnabledForCustomCode();
 

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/util/CamundaBpmVersion.java
Patch:
@@ -12,7 +12,7 @@
 /**
  * Return the full version string of the present Camunda codebase, or
  * {@code null} if it cannot be determined.
- * <p>
+ * <p/>
  * return the version of Camunda or {@code null}
  *
  * @see Package#getImplementationVersion()
@@ -41,7 +41,7 @@ public CamundaBpmVersion() {
       .map(String::trim)
       .orElse("");
     this.isEnterprise = version.endsWith("-ee");
-    this.formattedVersion = String.format(String.format(VERSION_FORMAT, version));
+    this.formattedVersion = String.format(VERSION_FORMAT, version);
   }
 
   @Override

File: spring-boot-starter/starter/src/test/java/org/camunda/bpm/spring/boot/starter/actuator/JobExecutorHealthIndicatorTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 import org.springframework.boot.actuate.health.Health;
 import org.springframework.boot.actuate.health.Status;
 

File: spring-boot-starter/starter/src/test/java/org/camunda/bpm/spring/boot/starter/actuator/ProcessEngineHealthIndicatorTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 import org.springframework.boot.actuate.health.Health;
 import org.springframework.boot.actuate.health.Status;
 

File: clients/java/src/main/java/org/camunda/bpm/client/impl/EngineClientLogger.java
Patch:
@@ -94,6 +94,6 @@ public EngineClientException invalidSerializedValueException(String serializedVa
 
   public EngineClientException objectTypeNameUnknownException(String objectTypeName, Object serializedValue) {
     return new EngineClientException(exceptionMessage(
-      "013", "Exception while deserializing object value '{}': object type '{}' is unknown", serializedValue, objectTypeName));
+      "014", "Exception while deserializing object value '{}': object type '{}' is unknown", serializedValue, objectTypeName));
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -721,10 +721,10 @@ public abstract class ProcessEngineConfigurationImpl extends ProcessEngineConfig
   protected String failedJobRetryTimeCycle;
 
   // login attempts ///////////////////////////////////////////////////////
-  protected int loginMaxAttempts = 5;
+  protected int loginMaxAttempts = 10;
   protected int loginDelayFactor = 2;
   protected int loginDelayMaxTime = 60;
-  protected int loginDelayBase = 2;
+  protected int loginDelayBase = 3;
 
   // buildProcessEngine ///////////////////////////////////////////////////////
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/identity/IdentityServiceTest.java
Patch:
@@ -635,7 +635,7 @@ public void testUsuccessfulAttemptsResultInException() throws ParseException {
 
     Date now = sdf.parse("2000-01-24T13:00:00");
     ClockUtil.setCurrentTime(now);
-    for (int i = 0; i <= 6; i++) {
+    for (int i = 0; i <= 11; i++) {
       assertFalse(identityService.checkPassword("johndoe", "invalid pwd"));
       now = DateUtils.addMinutes(now, 1);
       ClockUtil.setCurrentTime(now);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DefaultJobRetryCmd.java
Patch:
@@ -165,7 +165,7 @@ protected String getFailedJobRetryTimeCycle(JobEntity job, Expression expression
     }
 
     try {
-       value = expression.getValue(execution);
+       value = expression.getValue(execution, execution);
     }
     catch (Exception e) {
       LOG.exceptionWhileParsingExpression(jobId, e.getCause().getMessage());

File: clients/java/src/main/java/org/camunda/bpm/client/impl/EngineClientLogger.java
Patch:
@@ -68,9 +68,10 @@ public EngineClientException exceptionWhileDeserializingVariables(String variabl
       "009", "Exception while deserializing variable {}: no suitable mapper found for type {}", variableName, variableType));
   }
 
-  public EngineClientException exceptionWhileDeserializingVariablesWrongType(String variableName, String variableType) {
+  public EngineClientException exceptionWhileDeserializingVariablesWrongType(String variableName, String variableType, Object variableValue) {
     return new EngineClientException(exceptionMessage(
-      "010", "Exception while deserializing variable {}: value does not match to the type {}", variableName, variableType));
+      "010", "Exception while deserializing variable '{}': value '{}' does not match type '{}'",
+      variableName, variableValue, variableType));
   }
 
 }

File: clients/java/src/main/java/org/camunda/bpm/client/impl/variable/mapper/primitive/BytesValueMapper.java
Patch:
@@ -13,6 +13,7 @@
 package org.camunda.bpm.client.impl.variable.mapper.primitive;
 
 import org.apache.commons.codec.binary.Base64;
+import org.camunda.bpm.client.impl.EngineClientException;
 import org.camunda.bpm.client.task.impl.dto.TypedValueDto;
 import org.camunda.bpm.engine.variable.type.ValueType;
 import org.camunda.bpm.engine.variable.value.BytesValue;
@@ -27,8 +28,7 @@ public BytesValueMapper() {
     super(ValueType.BYTES);
   }
 
-  @SuppressWarnings("unchecked")
-  public BytesValue deserializeTypedValue(TypedValueDto typedValueDto) {
+  public BytesValue deserializeTypedValue(TypedValueDto typedValueDto) throws EngineClientException {
     String value = (String) typedValueDto.getValue();
     byte[] bytes = Base64.decodeBase64(value);
     typedValueDto.setValue(bytes);

File: clients/java/src/main/java/org/camunda/bpm/client/impl/variable/mapper/primitive/DateValueMapper.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.camunda.bpm.client.impl.variable.mapper.primitive;
 
+import org.camunda.bpm.client.impl.EngineClientException;
 import org.camunda.bpm.client.task.impl.dto.TypedValueDto;
 import org.camunda.bpm.engine.variable.type.ValueType;
 import org.camunda.bpm.engine.variable.value.DateValue;
@@ -34,15 +35,14 @@ public DateValueMapper() {
     super(ValueType.DATE);
   }
 
-  @SuppressWarnings("unchecked")
-  public DateValue deserializeTypedValue(TypedValueDto typedValueDto) {
+  public DateValue deserializeTypedValue(TypedValueDto typedValueDto) throws EngineClientException {
     Object value = typedValueDto.getValue();
 
     Date date = null;
     try {
       date = sdf.parse((String) value);
     } catch (ParseException e) {
-      return null;
+      throw new EngineClientException(e);
     }
 
     typedValueDto.setValue(date);

File: clients/java/src/main/java/org/camunda/bpm/client/impl/variable/mapper/primitive/DoubleValueMapper.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.camunda.bpm.client.impl.variable.mapper.primitive;
 
+import org.camunda.bpm.client.impl.EngineClientException;
 import org.camunda.bpm.client.task.impl.dto.TypedValueDto;
 import org.camunda.bpm.engine.variable.type.ValueType;
 import org.camunda.bpm.engine.variable.value.DoubleValue;
@@ -25,7 +26,7 @@ public DoubleValueMapper() {
     super(ValueType.DOUBLE);
   }
 
-  public DoubleValue deserializeTypedValue(TypedValueDto typedValueDto) {
+  public DoubleValue deserializeTypedValue(TypedValueDto typedValueDto) throws EngineClientException {
     Object value = typedValueDto.getValue();
     double doubleValue = ((Number) value).doubleValue();
     typedValueDto.setValue(doubleValue);

File: clients/java/src/main/java/org/camunda/bpm/client/impl/variable/mapper/primitive/IntegerValueMapper.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.camunda.bpm.client.impl.variable.mapper.primitive;
 
+import org.camunda.bpm.client.impl.EngineClientException;
 import org.camunda.bpm.client.task.impl.dto.TypedValueDto;
 import org.camunda.bpm.engine.variable.type.ValueType;
 import org.camunda.bpm.engine.variable.value.IntegerValue;
@@ -25,7 +26,7 @@ public IntegerValueMapper() {
     super(ValueType.INTEGER);
   }
 
-  public IntegerValue deserializeTypedValue(TypedValueDto typedValueDto) {
+  public IntegerValue deserializeTypedValue(TypedValueDto typedValueDto) throws EngineClientException {
     Object value = typedValueDto.getValue();
     int intValue = ((Number) value).intValue();
     typedValueDto.setValue(intValue);

File: clients/java/src/main/java/org/camunda/bpm/client/impl/variable/mapper/primitive/LongValueMapper.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.camunda.bpm.client.impl.variable.mapper.primitive;
 
+import org.camunda.bpm.client.impl.EngineClientException;
 import org.camunda.bpm.client.task.impl.dto.TypedValueDto;
 import org.camunda.bpm.engine.variable.type.ValueType;
 import org.camunda.bpm.engine.variable.value.LongValue;
@@ -25,7 +26,7 @@ public LongValueMapper() {
     super(ValueType.LONG);
   }
 
-  public LongValue deserializeTypedValue(TypedValueDto typedValueDto) {
+  public LongValue deserializeTypedValue(TypedValueDto typedValueDto) throws EngineClientException {
     Object value = typedValueDto.getValue();
     long longValue = ((Number) value).longValue();
     typedValueDto.setValue(longValue);

File: clients/java/src/main/java/org/camunda/bpm/client/impl/variable/mapper/primitive/PrimitiveValueMapper.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.camunda.bpm.client.impl.variable.mapper.primitive;
 
+import org.camunda.bpm.client.impl.EngineClientException;
 import org.camunda.bpm.client.impl.variable.mapper.ValueMapper;
 import org.camunda.bpm.client.task.impl.dto.TypedValueDto;
 import org.camunda.bpm.engine.variable.impl.value.UntypedValueImpl;
@@ -52,7 +53,7 @@ public T convertToTypedValue(UntypedValueImpl untypedValue) {
   }
 
   @SuppressWarnings("unchecked")
-  public T deserializeTypedValue(TypedValueDto typedValueDto) {
+  public T deserializeTypedValue(TypedValueDto typedValueDto) throws EngineClientException {
     Object value = typedValueDto.getValue();
 
     if (isAssignable(value)) {

File: clients/java/src/main/java/org/camunda/bpm/client/impl/variable/mapper/primitive/ShortValueMapper.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.camunda.bpm.client.impl.variable.mapper.primitive;
 
+import org.camunda.bpm.client.impl.EngineClientException;
 import org.camunda.bpm.client.task.impl.dto.TypedValueDto;
 import org.camunda.bpm.engine.variable.type.ValueType;
 import org.camunda.bpm.engine.variable.value.ShortValue;
@@ -25,7 +26,7 @@ public ShortValueMapper() {
     super(ValueType.SHORT);
   }
 
-  public ShortValue deserializeTypedValue(TypedValueDto typedValueDto) {
+  public ShortValue deserializeTypedValue(TypedValueDto typedValueDto) throws EngineClientException {
     Object value = typedValueDto.getValue();
     short shortValue = ((Number) value).shortValue();
     typedValueDto.setValue(shortValue);

File: clients/java/examples/loan-granting/src/main/java/org/camunda/bpm/App.java
Patch:
@@ -41,7 +41,7 @@ public static void main(String... args) throws InterruptedException {
 
       }).open();
 
-    Thread.sleep(60 * 5);
+    Thread.sleep(1000 * 60 * 5);
   }
 
 }
\ No newline at end of file

File: clients/java/src/main/java/org/camunda/bpm/client/ExternalTaskClientBuilder.java
Patch:
@@ -24,13 +24,15 @@ public interface ExternalTaskClientBuilder {
 
   /**
    * @param baseUrl of the Camunda BPM Platform REST API
+   * @return the builder
    */
   ExternalTaskClientBuilder baseUrl(String baseUrl);
 
   /**
    * Adds an interceptor to change a request before it is sent to the http server
    *
    * @param interceptor which changes the request
+   * @return the builder
    */
   ExternalTaskClientBuilder addInterceptor(ClientRequestInterceptor interceptor);
 
@@ -42,6 +44,7 @@ public interface ExternalTaskClientBuilder {
    *   <li> if base url is null or string is empty
    *   <li> if hostname cannot be retrieved
    * </ul>
+   * @return the builder
    */
   ExternalTaskClient build();
 

File: clients/java/src/main/java/org/camunda/bpm/client/task/ExternalTask.java
Patch:
@@ -109,6 +109,7 @@ public interface ExternalTask {
    * Returns an untyped variable of the task's ancestor execution hierarchy
    *
    * @param variableName of the variable to be returned
+   * @param <T> the type of the variable
    * @return
    * <ul>
    *   <li> an untyped variable if such a named variable exists
@@ -121,6 +122,7 @@ public interface ExternalTask {
    * Returns a typed variable of the task's ancestor execution hierarchy
    *
    * @param variableName of the variable to be returned
+   * @param <T> the type of the variable
    * @return
    * <ul>
    *   <li> a typed variable if such a named variable exists

File: clients/java/src/main/java/org/camunda/bpm/client/task/ExternalTaskService.java
Patch:
@@ -54,12 +54,12 @@ public interface ExternalTaskService {
    * @param externalTask which is meant to notify a failure for
    * @param errorMessage indicates the reason of the failure.
    * @param errorDetails provides a detailed error description.
-   * @param retries      specifies how often the task should be retried. Must be >= 0.
+   * @param retries      specifies how often the task should be retried. Must be &gt;= 0.
    *                     If 0, an incident is created and the task cannot be fetched anymore
    *                     unless the retries are increased again. The incident's message is set
-   *                     to the {@param errorMessage} parameter.
+   *                     to the errorMessage parameter.
    * @param retryTimeout specifies a timeout in milliseconds before the external task
-   *                     becomes available again for fetching. Must be >= 0.
+   *                     becomes available again for fetching. Must be &gt;= 0.
    *
    * @throws NotFoundException if the task has been canceled and therefore does not exist anymore
    * @throws NotAcquiredException if the task's most recent lock could not be acquired

File: clients/java/src/main/java/org/camunda/bpm/client/topic/TopicSubscriptionBuilder.java
Patch:
@@ -25,11 +25,13 @@ public interface TopicSubscriptionBuilder {
   /**
    * @param lockDuration <ul><li>in milliseconds to lock the external tasks</li>
    *                     <li>must be greater than zero</li></ul>
+   * @return the builder
    */
   TopicSubscriptionBuilder lockDuration(long lockDuration);
 
   /**
    * @param handler which will be executed for the external task
+   * @return the builder
    */
   TopicSubscriptionBuilder handler(ExternalTaskHandler handler);
 
@@ -43,6 +45,7 @@ public interface TopicSubscriptionBuilder {
    *   <li> if external task handler is null
    *   <li> if topic name has already been subscribed
    * </ul>
+   * @return the builder
    */
   TopicSubscription open();
 

File: clients/java/src/main/java/org/camunda/bpm/client/impl/variable/mapper/primitive/BooleanValueMapper.java
Patch:
@@ -18,7 +18,7 @@
 /**
  * @author Tassilo Weidner
  */
-public class BooleanValueMapper extends AbstractPrimitiveValueMapper<BooleanValue> {
+public class BooleanValueMapper extends PrimitiveValueMapper<BooleanValue> {
 
   public BooleanValueMapper() {
     super(ValueType.BOOLEAN);

File: clients/java/src/main/java/org/camunda/bpm/client/impl/variable/mapper/primitive/BytesValueMapper.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * @author Tassilo Weidner
  */
-public class BytesValueMapper extends AbstractPrimitiveValueMapper<BytesValue> {
+public class BytesValueMapper extends PrimitiveValueMapper<BytesValue> {
 
   public BytesValueMapper() {
     super(ValueType.BYTES);

File: clients/java/src/main/java/org/camunda/bpm/client/impl/variable/mapper/primitive/DateValueMapper.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * @author Tassilo Weidner
  */
-public class DateValueMapper extends AbstractPrimitiveValueMapper<DateValue> {
+public class DateValueMapper extends PrimitiveValueMapper<DateValue> {
 
   public static final String DATE_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSSZ";
 

File: clients/java/src/main/java/org/camunda/bpm/client/impl/variable/mapper/primitive/DoubleValueMapper.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * @author Tassilo Weidner
  */
-public class DoubleValueMapper extends AbstractPrimitiveValueMapper<DoubleValue> {
+public class DoubleValueMapper extends PrimitiveValueMapper<DoubleValue> {
 
   public DoubleValueMapper() {
     super(ValueType.DOUBLE);

File: clients/java/src/main/java/org/camunda/bpm/client/impl/variable/mapper/primitive/IntegerValueMapper.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * @author Tassilo Weidner
  */
-public class IntegerValueMapper extends AbstractPrimitiveValueMapper<IntegerValue> {
+public class IntegerValueMapper extends PrimitiveValueMapper<IntegerValue> {
 
   public IntegerValueMapper() {
     super(ValueType.INTEGER);

File: clients/java/src/main/java/org/camunda/bpm/client/impl/variable/mapper/primitive/LongValueMapper.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * @author Tassilo Weidner
  */
-public class LongValueMapper extends AbstractPrimitiveValueMapper<LongValue> {
+public class LongValueMapper extends PrimitiveValueMapper<LongValue> {
 
   public LongValueMapper() {
     super(ValueType.LONG);

File: clients/java/src/main/java/org/camunda/bpm/client/impl/variable/mapper/primitive/NullValueMapper.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * @author Tassilo Weidner
  */
-public class NullValueMapper extends AbstractPrimitiveValueMapper<NullValueImpl> implements ValueMapper<NullValueImpl> {
+public class NullValueMapper extends PrimitiveValueMapper<NullValueImpl> implements ValueMapper<NullValueImpl> {
 
   public NullValueMapper() {
     super(ValueType.NULL);

File: clients/java/src/main/java/org/camunda/bpm/client/impl/variable/mapper/primitive/ShortValueMapper.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * @author Tassilo Weidner
  */
-public class ShortValueMapper extends AbstractPrimitiveValueMapper<ShortValue> {
+public class ShortValueMapper extends PrimitiveValueMapper<ShortValue> {
 
   public ShortValueMapper() {
     super(ValueType.SHORT);

File: clients/java/src/main/java/org/camunda/bpm/client/impl/variable/mapper/primitive/StringValueMapper.java
Patch:
@@ -18,7 +18,7 @@
 /**
  * @author Tassilo Weidner
  */
-public class StringValueMapper extends AbstractPrimitiveValueMapper<StringValue> {
+public class StringValueMapper extends PrimitiveValueMapper<StringValue> {
 
   public StringValueMapper() {
     super(ValueType.STRING);

File: clients/java/src/test/java/org/camunda/bpm/client/impl/EngineClientTest.java
Patch:
@@ -64,7 +64,7 @@
  * @author Tassilo Weidner
  */
 @RunWith(PowerMockRunner.class)
-@PrepareForTest({HttpClients.class, RequestExecutor.class})
+@PrepareForTest({HttpClients.class, ExternalTaskClientImpl.class})
 @PowerMockIgnore("javax.net.ssl.*")
 public class EngineClientTest {
 

File: clients/java/src/test/java/org/camunda/bpm/client/task/ExternalTaskServiceTest.java
Patch:
@@ -52,7 +52,7 @@
 import org.camunda.bpm.client.helper.ClosableHttpClientMock;
 import org.camunda.bpm.client.helper.MockProvider;
 import org.camunda.bpm.client.impl.EngineClient;
-import org.camunda.bpm.client.impl.RequestExecutor;
+import org.camunda.bpm.client.impl.ExternalTaskClientImpl;
 import org.camunda.bpm.client.task.impl.dto.BpmnErrorRequestDto;
 import org.camunda.bpm.client.task.impl.dto.ExtendLockRequestDto;
 import org.camunda.bpm.client.task.impl.dto.FailureRequestDto;
@@ -72,7 +72,7 @@
  * @author Tassilo Weidner
  */
 @RunWith(PowerMockRunner.class)
-@PrepareForTest({HttpClients.class, RequestExecutor.class})
+@PrepareForTest({HttpClients.class, ExternalTaskClientImpl.class})
 @PowerMockIgnore("javax.net.ssl.*")
 public class ExternalTaskServiceTest {
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/externaltask/SetExternalTasksRetriesTest.java
Patch:
@@ -312,6 +312,7 @@ public void shouldSetExternalTaskRetriesWithListAndQueryAsync() {
   }
 
   @Test
+  @RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_FULL)
   public void shouldSetExternalTaskRetriesWithLargeList() {
     // given
     engineRule.getProcessEngineConfiguration().setBatchJobsPerSeed(1010);

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/instance/DomElementImpl.java
Patch:
@@ -44,7 +44,7 @@ public DomElementImpl(Element element) {
     this.document = element.getOwnerDocument();
   }
 
-  public Element getElement() {
+  protected Element getElement() {
     return element;
   }
 

File: clients/java/src/main/java/org/camunda/bpm/client/impl/EngineClientException.java
Patch:
@@ -17,7 +17,7 @@
  */
 public class EngineClientException extends RuntimeException {
 
-  protected EngineClientException(String message) {
+  public EngineClientException(String message) {
     super(message);
   }
 

File: clients/java/src/main/java/org/camunda/bpm/client/task/impl/ExternalTaskServiceImpl.java
Patch:
@@ -17,6 +17,7 @@
 import org.camunda.bpm.client.impl.ExternalTaskClientLogger;
 import org.camunda.bpm.client.task.ExternalTask;
 import org.camunda.bpm.client.task.ExternalTaskService;
+import org.camunda.bpm.engine.variable.VariableMap;
 
 /**
  * @author Tassilo Weidner
@@ -45,7 +46,8 @@ public void unlock(ExternalTask externalTask) {
   @Override
   public void complete(ExternalTask externalTask) {
     try {
-      engineClient.complete(externalTask.getId());
+      VariableMap writtenVariableMap = ((ExternalTaskImpl)externalTask).getWrittenVariableMap();
+      engineClient.complete(externalTask.getId(), writtenVariableMap);
     } catch (EngineClientException e) {
       throw LOG.externalTaskServiceException("completing the external task", e);
     }

File: clients/java/src/main/java/org/camunda/bpm/client/task/impl/dto/FailureRequestDto.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.client.task.impl;
+package org.camunda.bpm.client.task.impl.dto;
 
 import org.camunda.bpm.client.impl.RequestDto;
 

File: clients/java/src/test/java/org/camunda/bpm/client/task/ExternalTaskServiceTest.java
Patch:
@@ -37,9 +37,9 @@
 import org.camunda.bpm.client.helper.MockProvider;
 import org.camunda.bpm.client.impl.EngineClient;
 import org.camunda.bpm.client.impl.RequestExecutor;
-import org.camunda.bpm.client.task.impl.FailureRequestDto;
 import org.camunda.bpm.client.task.impl.dto.BpmnErrorRequestDto;
 import org.camunda.bpm.client.task.impl.dto.ExtendLockRequestDto;
+import org.camunda.bpm.client.task.impl.dto.FailureRequestDto;
 import org.camunda.bpm.client.topic.TopicSubscriptionBuilder;
 import org.junit.Before;
 import org.junit.Test;

File: clients/java/src/test/java/org/camunda/bpm/client/topic/TopicSubscriptionTest.java
Patch:
@@ -222,7 +222,7 @@ public void shouldExecuteHandler() throws IOException, InterruptedException {
     // given
     List<ExternalTask> lockedTasks = new ArrayList<>();
     for (int i = 0; i < 5; i++) {
-      lockedTasks.add(MockProvider.createLockedTask());
+      lockedTasks.add(MockProvider.createExternalTaskWithoutVariables());
     }
 
     when(httpClient.execute(any(HttpUriRequest.class), any(AbstractResponseHandler.class)))

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/instance/DomElementImpl.java
Patch:
@@ -44,7 +44,7 @@ public DomElementImpl(Element element) {
     this.document = element.getOwnerDocument();
   }
 
-  protected Element getElement() {
+  public Element getElement() {
     return element;
   }
 

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/type/ModelElementTypeImpl.java
Patch:
@@ -236,7 +236,7 @@ public Collection<ModelElementInstance> getInstances(ModelInstance modelInstance
 
     List<ModelElementInstance> resultList = new ArrayList<ModelElementInstance>();
     for (DomElement element : elements) {
-      resultList.add(ModelUtil.getModelElement(element, modelInstanceImpl));
+      resultList.add(ModelUtil.getModelElement(element, modelInstanceImpl, this));
     }
     return resultList;
   }

File: clients/java/src/main/java/org/camunda/bpm/client/interceptor/impl/ClientRequestContextImpl.java
Patch:
@@ -20,11 +20,11 @@
 /**
  * @author Tassilo Weidner
  */
-public class ClientRequestImpl implements ClientRequestContext {
+public class ClientRequestContextImpl implements ClientRequestContext {
 
   protected Map<String, String> headers;
 
-  public ClientRequestImpl() {
+  public ClientRequestContextImpl() {
     this.headers = new LinkedHashMap<>();
   }
 

File: clients/java/src/main/java/org/camunda/bpm/client/interceptor/impl/RequestInterceptorHandler.java
Patch:
@@ -40,7 +40,7 @@ public RequestInterceptorHandler(List<ClientRequestInterceptor> interceptors) {
 
   @Override
   public void process(HttpRequest httpRequest, HttpContext context) throws HttpException, IOException {
-    ClientRequestImpl interceptedRequest = new ClientRequestImpl();
+    ClientRequestContextImpl interceptedRequest = new ClientRequestContextImpl();
     interceptors.forEach((ClientRequestInterceptor requestInterceptor) -> {
       try {
         requestInterceptor.intercept(interceptedRequest);

File: clients/java/src/main/java/org/camunda/bpm/client/LockedTaskHandler.java
Patch:
@@ -23,7 +23,8 @@ public interface LockedTaskHandler {
    * Has been executed for each fetched and locked task
    *
    * @param lockedTask the context is represented of
+   * @param lockedTaskService to interact with fetched and locked tasks
    */
-  void execute(LockedTask lockedTask);
+  void execute(LockedTask lockedTask, LockedTaskService lockedTaskService);
 
 }

File: clients/java/src/test/java/org/camunda/bpm/client/impl/ClosableHttpClientMock.java
Patch:
@@ -29,7 +29,7 @@ public class ClosableHttpClientMock extends CloseableHttpClient {
 
   private CloseableHttpResponse closeableHttpResponse;
 
-  public ClosableHttpClientMock(CloseableHttpResponse closeableHttpResponse) {
+  public ClosableHttpClientMock(final CloseableHttpResponse closeableHttpResponse) {
     this.closeableHttpResponse = closeableHttpResponse;
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/mail/EmailSendTaskTest.java
Patch:
@@ -143,7 +143,7 @@ public void testSendEmail() throws Exception {
     MimeMessage mimeMessage = message.getMimeMessage();
 
     assertEquals("Your order " + orderId + " has been shipped", mimeMessage.getHeader("Subject", null));
-    assertEquals("\"" + from + "\" <" +from.toString() + ">" , mimeMessage.getHeader("From", null));
+    assertEquals(from, mimeMessage.getHeader("From", null));
     assertTrue(mimeMessage.getHeader("To", null).contains(recipient));
   }
 
@@ -161,7 +161,7 @@ private void assertEmailSend(WiserMessage emailMessage, boolean htmlMail, String
       }
 
       assertEquals(subject, mimeMessage.getHeader("Subject", null));
-      assertEquals("\"" + from + "\" <" +from.toString() + ">" , mimeMessage.getHeader("From", null));
+      assertEquals(from, mimeMessage.getHeader("From", null));
       assertTrue(getMessage(mimeMessage).contains(message));
 
       for (String t : to) {

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/mail/EmailServiceTaskTest.java
Patch:
@@ -143,7 +143,7 @@ public void testSendEmail() throws Exception {
     MimeMessage mimeMessage = message.getMimeMessage();
 
     assertEquals("Your order " + orderId + " has been shipped", mimeMessage.getHeader("Subject", null));
-    assertEquals("\"" + from + "\" <" +from.toString() + ">" , mimeMessage.getHeader("From", null));
+    assertEquals(from, mimeMessage.getHeader("From", null));
     assertTrue(mimeMessage.getHeader("To", null).contains(recipient));
   }
 
@@ -161,7 +161,7 @@ public static void assertEmailSend(WiserMessage emailMessage, boolean htmlMail,
       }
 
       assertEquals(subject, mimeMessage.getHeader("Subject", null));
-      assertEquals("\"" + from + "\" <" +from.toString() + ">" , mimeMessage.getHeader("From", null));
+      assertEquals(from, mimeMessage.getHeader("From", null));
       assertTrue(getMessage(mimeMessage).contains(message));
 
       for (String t : to) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/historycleanup/HistoryCleanupHelper.java
Patch:
@@ -19,9 +19,9 @@ public abstract class HistoryCleanupHelper {
 
   private static final SimpleDateFormat TIME_FORMAT_WITHOUT_SECONDS = new SimpleDateFormat("yyyy-MM-ddHH:mm");
 
-  public static final SimpleDateFormat TIME_FORMAT_WITHOUT_SECONDS_WITH_TIMEZONE = new SimpleDateFormat("yyyy-MM-ddHH:mmZ");
+  private static final SimpleDateFormat TIME_FORMAT_WITHOUT_SECONDS_WITH_TIMEZONE = new SimpleDateFormat("yyyy-MM-ddHH:mmZ");
 
-  public static final SimpleDateFormat DATE_FORMAT_WITHOUT_TIME = new SimpleDateFormat("yyyy-MM-dd");
+  private static final SimpleDateFormat DATE_FORMAT_WITHOUT_TIME = new SimpleDateFormat("yyyy-MM-dd");
 
   public static Date getCurrentOrNextRunWithinBatchWindow(Date date, CommandContext commandContext) {
     if (!isBatchWindowConfigured(commandContext)) {
@@ -132,7 +132,7 @@ public static Date addDays(Date date, int amount) {
     return c.getTime();
   }
 
-  public static Date parseTimeConfiguration(String time) throws ParseException {
+  public static synchronized Date parseTimeConfiguration(String time) throws ParseException {
     String today = DATE_FORMAT_WITHOUT_TIME.format(ClockUtil.getCurrentTime());
     try {
       return TIME_FORMAT_WITHOUT_SECONDS_WITH_TIMEZONE.parse(today+time);

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/JobPrioritizationFailureJavaSerializationTest.java
Patch:
@@ -74,7 +74,7 @@ protected void unregisterProcessApplication() {
 
   @Deployment(order = 1)
   public static WebArchive createDeployment() {
-    final WebArchive webArchive = initWebArchiveDeployment("pa1.war", "org/camunda/bpm/integrationtest/processes-javaSerializationEnabled-pa1.xml")
+    final WebArchive webArchive = initWebArchiveDeployment("paJavaSerialization1.war", "org/camunda/bpm/integrationtest/processes-javaSerializationEnabled-pa1.xml")
       .addClass(PriorityBean.class)
       .addAsResource("org/camunda/bpm/integrationtest/jobexecutor/JobPrioritizationTest.priorityProcess.bpmn20.xml");
 
@@ -84,7 +84,7 @@ public static WebArchive createDeployment() {
 
   @Deployment(name = "dummy-client", order = 2)
   public static WebArchive createDummyClientDeployment() {
-    final WebArchive webArchive = initWebArchiveDeployment("pa2.war", "org/camunda/bpm/integrationtest/processes-javaSerializationEnabled-pa2.xml")
+    final WebArchive webArchive = initWebArchiveDeployment("paJavaSerialization2.war", "org/camunda/bpm/integrationtest/processes-javaSerializationEnabled-pa2.xml")
       .addAsResource(new ByteArrayAsset(serializeJavaObjectValue(new PriorityBean())), PRIORITY_BEAN_INSTANCE_FILE);
     return webArchive;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/batch/BatchEntity.java
Patch:
@@ -14,6 +14,7 @@
 
 import java.util.Date;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -388,7 +389,8 @@ public String toString() {
 
   @Override
   public Set<String> getReferencedEntityIds() {
-    return getReferencedEntitiesIdAndClass().keySet();
+    Set<String> referencedEntityIds = new HashSet<String>();
+    return referencedEntityIds;
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/entity/runtime/CaseSentryPartEntity.java
Patch:
@@ -13,6 +13,7 @@
 package org.camunda.bpm.engine.impl.cmmn.entity.runtime;
 
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 
@@ -186,7 +187,8 @@ protected CaseExecutionEntity findCaseExecutionById(String caseExecutionId) {
 
   @Override
   public Set<String> getReferencedEntityIds() {
-    return getReferencedEntitiesIdAndClass().keySet();
+    Set<String> referencedEntityIds = new HashSet<String>();
+    return referencedEntityIds;
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationEntity.java
Patch:
@@ -15,6 +15,7 @@
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -243,7 +244,8 @@ public Object getPersistentState() {
 
   @Override
   public Set<String> getReferencedEntityIds() {
-    return getReferencedEntitiesIdAndClass().keySet();
+    Set<String> referencedEntityIds = new HashSet<String>();
+    return referencedEntityIds;
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/EventSubscriptionEntity.java
Patch:
@@ -17,6 +17,7 @@
 import java.io.Serializable;
 import java.util.Date;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 
@@ -346,7 +347,8 @@ public boolean equals(Object obj) {
 
   @Override
   public Set<String> getReferencedEntityIds() {
-    return getReferencedEntitiesIdAndClass().keySet();
+    Set<String> referencedEntityIds = new HashSet<String>();
+    return referencedEntityIds;
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExternalTaskEntity.java
Patch:
@@ -14,6 +14,7 @@
 
 import java.util.Date;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 
@@ -484,7 +485,8 @@ public void extendLock(long newLockExpirationTime) {
 
   @Override
   public Set<String> getReferencedEntityIds() {
-    return getReferencedEntitiesIdAndClass().keySet();
+    Set<String> referencedEntityIds = new HashSet<String>();
+    return referencedEntityIds;
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/FilterEntity.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.io.Serializable;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 
@@ -223,7 +224,8 @@ public void postLoad() {
 
   @Override
   public Set<String> getReferencedEntityIds() {
-    return getReferencedEntitiesIdAndClass().keySet();
+    Set<String> referencedEntityIds = new HashSet<String>();
+    return referencedEntityIds;
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/IdentityLinkEntity.java
Patch:
@@ -14,6 +14,7 @@
 
 import java.io.Serializable;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 
@@ -220,7 +221,8 @@ public HistoryEvent createHistoryEvent(HistoryEventProducer producer) {
 
   @Override
   public Set<String> getReferencedEntityIds() {
-    return getReferencedEntitiesIdAndClass().keySet();
+    Set<String> referencedEntityIds = new HashSet<String>();
+    return referencedEntityIds;
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobDefinitionEntity.java
Patch:
@@ -14,6 +14,7 @@
 
 import java.io.Serializable;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 
@@ -181,7 +182,8 @@ public void setTenantId(String tenantId) {
 
   @Override
   public Set<String> getReferencedEntityIds() {
-    return getReferencedEntitiesIdAndClass().keySet();
+    Set<String> referencedEntityIds = new HashSet<String>();
+    return referencedEntityIds;
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -19,6 +19,7 @@
 import java.io.Serializable;
 import java.util.Date;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -659,7 +660,8 @@ public boolean equals(Object obj) {
 
   @Override
   public Set<String> getReferencedEntityIds() {
-    return getReferencedEntitiesIdAndClass().keySet();
+    Set<String> referencedEntityIds = new HashSet<String>();
+    return referencedEntityIds;
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/MeterLogEntity.java
Patch:
@@ -15,6 +15,7 @@
 import java.io.Serializable;
 import java.util.Date;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 
@@ -110,7 +111,8 @@ public Object getPersistentState() {
 
   @Override
   public Set<String> getReferencedEntityIds() {
-    return getReferencedEntitiesIdAndClass().keySet();
+    Set<String> referencedEntityIds = new HashSet<String>();
+    return referencedEntityIds;
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -1470,7 +1470,8 @@ public void setVariablesLocal(Map<String, ?> variables) {
 
   @Override
   public Set<String> getReferencedEntityIds() {
-    return getReferencedEntitiesIdAndClass().keySet();
+    Set<String> referencedEntityIds = new HashSet<String>();
+    return referencedEntityIds;
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/VariableInstanceEntity.java
Patch:
@@ -14,6 +14,7 @@
 
 import java.io.Serializable;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.Callable;
@@ -654,7 +655,8 @@ public void setTenantId(String tenantId) {
 
   @Override
   public Set<String> getReferencedEntityIds() {
-    return getReferencedEntitiesIdAndClass().keySet();
+    Set<String> referencedEntityIds = new HashSet<String>();
+    return referencedEntityIds;
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -533,12 +533,12 @@ protected void clearExecution() {
       observer.onClear(this);
     }
 
-    // delete all the variable instances
-    removeVariablesLocalInternal();
-
     // delete all the tasks and external tasks
     removeAllTasks();
 
+    // delete all the variable instances
+    removeVariablesLocalInternal();
+
     // remove all jobs
     removeJobs();
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/PvmExecutionImpl.java
Patch:
@@ -757,7 +757,7 @@ public void take() {
    * <li>CANCEL_EVENT_SCOPE: scope execution for {@link PvmActivity#getEventScope()}</li>
    * </ul>
    *
-   * @param the activity to start
+   * @param activity the activity to start
    */
   @Override
   public void executeActivity(PvmActivity activity) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -4220,7 +4220,7 @@ public void parseBPMNShape(Element bpmnShapeElement) {
                                                           // lane, but it might
                                                           // still reference
                                                           // 'something'
-            addError("Invalid reference in 'bpmnElement' attribute, activity " + bpmnElement + "not found", bpmnShapeElement);
+            addError("Invalid reference in 'bpmnElement' attribute, activity " + bpmnElement + " not found", bpmnShapeElement);
           }
         }
       }

File: engine-rest/engine-rest-jax-rs-two/src/test/java/org/camunda/bpm/engine/rest/impl/fetchAndLock/FetchAndLockRestServiceInteractionTest.java
Patch:
@@ -51,6 +51,7 @@
 import static org.mockito.Matchers.anyListOf;
 import static org.mockito.Matchers.anyLong;
 import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.atLeastOnce;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
@@ -231,7 +232,7 @@ public void shouldThrowProcessEngineExceptionDuringTimeout() {
     .when()
       .post(FETCH_EXTERNAL_TASK_URL_NAMED_ENGINE);
 
-    verify(fetchTopicBuilder, times(3)).execute();
+    verify(fetchTopicBuilder, atLeastOnce()).execute();
   }
 
   @Test
@@ -289,7 +290,7 @@ public void shouldSetAuthenticationProperly() {
       .post(FETCH_EXTERNAL_TASK_URL_NAMED_ENGINE);
 
     ArgumentCaptor<Authentication> argumentCaptor = ArgumentCaptor.forClass(Authentication.class);
-    verify(identityServiceMock, times(3)).setAuthentication(argumentCaptor.capture());
+    verify(identityServiceMock, atLeastOnce()).setAuthentication(argumentCaptor.capture());
 
     assertThat(argumentCaptor.getValue().getUserId(), is(MockProvider.EXAMPLE_USER_ID));
     assertThat(argumentCaptor.getValue().getGroupIds(), is(groupIds));

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/entitymanager/DbEntityManager.java
Patch:
@@ -333,7 +333,8 @@ protected void flushDbOperations(List<DbOperation> operationsToFlush) {
       try {
         persistenceSession.executeDbOperation(dbOperation);
       } catch (Exception e) {
-        throw LOG.flushDbOperationException(operationsToFlush, dbOperation, e);
+        boolean doOptimisticLockingException = isOptimisticLockingException(dbOperation);
+        throw LOG.flushDbOperationException(operationsToFlush, dbOperation, e, doOptimisticLockingException);
       }
       if (dbOperation.isFailed()) {
         handleOptimisticLockingException(dbOperation);

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/CompetingTransactionsOptimisticLockingTest.java
Patch:
@@ -5,7 +5,6 @@
 import org.camunda.bpm.engine.impl.ProcessEngineLogger;
 import org.camunda.bpm.engine.impl.cmd.CompleteTaskCmd;
 import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
-import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.task.Task;
 import org.camunda.bpm.engine.test.Deployment;
 import org.slf4j.Logger;

File: engine/src/test/java/org/camunda/bpm/engine/test/history/CleanableHistoricCaseInstanceReportTest.java
Patch:
@@ -54,7 +54,6 @@ public class CleanableHistoricCaseInstanceReportTest {
   @Rule
   public RuleChain ruleChain = RuleChain.outerRule(testRule).around(engineRule);
 
-  protected ProcessEngineConfiguration processEngineConfiguration;
   protected HistoryService historyService;
   protected RepositoryService repositoryService;
   protected RuntimeService runtimeService;
@@ -66,7 +65,6 @@ public class CleanableHistoricCaseInstanceReportTest {
   @Before
   public void setUp() {
     historyService = engineRule.getHistoryService();
-    processEngineConfiguration = engineRule.getProcessEngineConfiguration();
     repositoryService = engineRule.getRepositoryService();
     runtimeService = engineRule.getRuntimeService();
     caseService = engineRule.getCaseService();

File: engine/src/test/java/org/camunda/bpm/engine/test/history/CleanableHistoricProcessInstanceReportTest.java
Patch:
@@ -54,7 +54,6 @@ public class CleanableHistoricProcessInstanceReportTest {
   @Rule
   public RuleChain ruleChain = RuleChain.outerRule(testRule).around(engineRule);
 
-  protected ProcessEngineConfiguration processEngineConfiguration;
   protected HistoryService historyService;
   protected TaskService taskService;
   protected RepositoryService repositoryService;
@@ -68,7 +67,6 @@ public class CleanableHistoricProcessInstanceReportTest {
   @Before
   public void setUp() {
     historyService = engineRule.getHistoryService();
-    processEngineConfiguration = engineRule.getProcessEngineConfiguration();
     taskService = engineRule.getTaskService();
     repositoryService = engineRule.getRepositoryService();
     runtimeService = engineRule.getRuntimeService();

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/conditional/ConditionalStartEventTest.java
Patch:
@@ -41,7 +41,6 @@
 import org.camunda.bpm.model.bpmn.Bpmn;
 import org.camunda.bpm.model.bpmn.BpmnModelInstance;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
@@ -350,8 +349,8 @@ public void testMixedSubscriptionsWhenDeletingTwoProcessDefinitionsInOneTransact
    * Tests the case, when no new subscription is needed, as it is not the latest version, that is being deleted.
    */
   @Test
-  @Ignore("CAM-8666")
   public void testDeleteNotLatestVersion() {
+    @SuppressWarnings("unused")
     String definitionId1 = deployProcess(SINGLE_CONDITIONAL_XML);
     String definitionId2 = deployProcess(SINGLE_CONDITIONAL_XML);
     String definitionId3 = deployProcess(SINGLE_CONDITIONAL_XML);

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParseLogger.java
Patch:
@@ -43,7 +43,7 @@ public void parsingFailure(Throwable cause) {
   // EXCEPTIONS
 
   public ProcessEngineException parsingProcessException(Exception cause) {
-    return new ProcessEngineException(exceptionMessage("009", "Error while parsing process"), cause);
+    return new ProcessEngineException(exceptionMessage("009", "Error while parsing process. {}.", cause.getMessage()), cause);
   }
 
   public void exceptionWhileGeneratingProcessDiagram(Throwable t) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/util/EngineUtilLogger.java
Patch:
@@ -45,7 +45,7 @@ public ProcessEngineException multipleSourcesException(StreamSource source1, Str
   public ProcessEngineException parsingFailureException(String name, Throwable cause) {
     return new ProcessEngineException(exceptionMessage(
         "003",
-        "Could not parse '{}'.", name), cause);
+        "Could not parse '{}'. {}", name, cause.getMessage()), cause);
   }
 
   public void logParseWarnings(String formattedMessage) {

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/deployment/BpmnDeploymentTest.java
Patch:
@@ -340,7 +340,7 @@ public void testDeployInvalidExpression() {
     catch(ProcessEngineException expected) {
       // Check if no deployments are made
       assertEquals(0, repositoryService.createDeploymentQuery().count());
-      assertEquals("ENGINE-01009 Error while parsing process", expected.getMessage());
+      assertTextPresent("ENGINE-01009 Error while parsing process", expected.getMessage());
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -1285,6 +1285,8 @@ public static void initSqlSessionFactoryProperties(Properties properties, String
     if (databaseType != null) {
       properties.put("limitBefore", DbSqlSessionFactory.databaseSpecificLimitBeforeStatements.get(databaseType));
       properties.put("limitAfter", DbSqlSessionFactory.databaseSpecificLimitAfterStatements.get(databaseType));
+      properties.put("limitBeforeWithoutOffset", DbSqlSessionFactory.databaseSpecificLimitBeforeWithoutOffsetStatements.get(databaseType));
+      properties.put("limitAfterWithoutOffset", DbSqlSessionFactory.databaseSpecificLimitAfterWithoutOffsetStatements.get(databaseType));
       properties.put("innerLimitAfter", DbSqlSessionFactory.databaseSpecificInnerLimitAfterStatements.get(databaseType));
       properties.put("limitBetween", DbSqlSessionFactory.databaseSpecificLimitBetweenStatements.get(databaseType));
       properties.put("limitBetweenFilter", DbSqlSessionFactory.databaseSpecificLimitBetweenFilterStatements.get(databaseType));

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AbstractDeleteProcessInstanceCmd.java
Patch:
@@ -58,7 +58,7 @@ protected void checkDeleteProcessInstance(ExecutionEntity execution, CommandCont
   protected void deleteProcessInstance(
       final CommandContext commandContext,
       String processInstanceId,
-      String deleteReason,
+      final String deleteReason,
       final boolean skipCustomListeners,
       boolean externallyTerminated,
       final boolean skipIoMappings,
@@ -88,7 +88,7 @@ protected void deleteProcessInstance(
     if (superExecution != null) {
       commandContext.runWithoutAuthorization(new Callable<Void>() {
         public Void call() {
-          ProcessInstanceModificationBuilderImpl builder = (ProcessInstanceModificationBuilderImpl) new ProcessInstanceModificationBuilderImpl(commandContext, superExecution.getProcessInstanceId())
+          ProcessInstanceModificationBuilderImpl builder = (ProcessInstanceModificationBuilderImpl) new ProcessInstanceModificationBuilderImpl(commandContext, superExecution.getProcessInstanceId(), deleteReason)
             .cancelActivityInstance(superExecution.getActivityInstanceId());
           builder.execute(false, skipCustomListeners, skipIoMappings);
           return null;

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ModifyProcessInstanceCmd.java
Patch:
@@ -81,7 +81,7 @@ public Void execute(CommandContext commandContext) {
       if (!(processInstance.getActivity() != null && !processInstance.getId().equals(processInstance.getActivityInstanceId()))) {
         // process instance was cancelled
         checkDeleteProcessInstance(processInstance, commandContext);
-        deletePropagate(processInstance,"Cancellation due to process instance modifcation", builder.isSkipCustomListeners(), builder.isSkipIoMappings());
+        deletePropagate(processInstance, builder.getModificationReason(), builder.isSkipCustomListeners(), builder.isSkipIoMappings());
       }
       else if (processInstance.isEnded()) {
         // process instance has ended regularly

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/RuntimeServiceTest.java
Patch:
@@ -578,7 +578,6 @@ public void testDeleteProcessInstanceWithVariableOnScopeAndConcurrentExecution()
   }
 
   @Test
-  @Ignore("CAM-8680")
   public void testDeleteCalledSubprocess() {
 
     // given

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricTaskInstanceRestServiceQueryTest.java
Patch:
@@ -1982,7 +1982,7 @@ public void testQueryByInvalidProcessVariable() {
         .statusCode(Status.BAD_REQUEST.getStatusCode())
         .contentType(ContentType.JSON)
         .body("type", equalTo(InvalidRequestException.class.getSimpleName()))
-        .body("message", containsString("Invalid variable comparator specified: " + invalidComparator))
+        .body("message", containsString("Invalid process variable comparator specified: " + invalidComparator))
       .when()
         .get(HISTORIC_TASK_INSTANCE_RESOURCE_URL);
 
@@ -2027,7 +2027,7 @@ public void testQueryByInvalidProcessVariableAsPost() {
         .statusCode(Status.BAD_REQUEST.getStatusCode())
         .contentType(ContentType.JSON)
         .body("type", equalTo(InvalidRequestException.class.getSimpleName()))
-        .body("message", containsString("Invalid variable comparator specified: " + invalidComparator))
+        .body("message", containsString("Invalid process variable comparator specified: " + invalidComparator))
       .when()
         .post(HISTORIC_TASK_INSTANCE_RESOURCE_URL);
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -1163,7 +1163,7 @@ protected void addEventSubscriptionDeclaration(EventSubscriptionDeclaration subs
     }
     // if this is a conditional event, validate that it is the only one with the provided condition
     if (subscription.isStartEvent() && hasMultipleConditionalEventDefinitionsWithSameCondition(subscription, eventDefinitions.values())) {
-      addError("Cannot have more than one conditional event subscription with the same condition '" + ((ConditionalEventDefinition) subscription).getConditionAsString(), element);
+      addError("Cannot have more than one conditional event subscription with the same condition '" + ((ConditionalEventDefinition) subscription).getConditionAsString() + "'", element);
     }
 
     scope.getProperties().putMapEntry(BpmnProperties.EVENT_SUBSCRIPTION_DECLARATIONS, subscription.getActivityId(), subscription);

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/conditional/ConditionalStartEventTest.java
Patch:
@@ -349,7 +349,7 @@ public void testMixedSubscriptionsWhenDeletingTwoProcessDefinitionsInOneTransact
   public void testDeploymentOfTwoEqualConditionalStartEvent() {
     // expect
     thrown.expect(ProcessEngineException.class);
-    thrown.expectMessage("Could not parse BPMN process");
+    thrown.expectMessage("Cannot have more than one conditional event subscription with the same condition '${variable == 1}'");
 
     // when
     testRule.deploy("org/camunda/bpm/engine/test/bpmn/event/conditional/ConditionalStartEventTest.testTwoEqualConditionalStartEvent.bpmn20.xml");

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/conditional/ConditionalStartEventTest.java
Patch:
@@ -609,7 +609,7 @@ public void testStartInstanceByProcessDefinitionIdWithoutCondition() {
     assertEquals(0, eventSubscriptions.size());
 
     thrown.expect(ProcessEngineException.class);
-    thrown.expectMessage("No conditional start events were found during evaluation of the conditions by process definition with id: " + processDefinitionId);
+    thrown.expectMessage("Process definition with id " + processDefinitionId + " does not declare conditional start event");
 
 
     // when
@@ -654,7 +654,6 @@ public void testStartInstanceWithVariableNameNotFullfilled() {
     // when
     List<ProcessInstance> instances = runtimeService
         .createConditionEvaluation()
-        .setVariable("bar", 42)
         .evaluateStartConditions();
 
     // then

File: engine/src/main/java/org/camunda/bpm/engine/history/HistoricActivityStatisticsQuery.java
Patch:
@@ -44,10 +44,10 @@ public interface HistoricActivityStatisticsQuery extends Query<HistoricActivityS
   /** Only select historic activities of process instances that were started after the given date. */
   HistoricActivityStatisticsQuery startedAfter(Date date);
 
-  /** Only select historic activities of process instances that were started before the given date. */
+  /** Only select historic activities of process instances that were finished before the given date. */
   HistoricActivityStatisticsQuery finishedBefore(Date date);
 
-  /** Only select historic activities of process instances that were started after the given date. */
+  /** Only select historic activities of process instances that were finished after the given date. */
   HistoricActivityStatisticsQuery finishedAfter(Date date);
 
   /**

File: engine/src/main/java/org/camunda/bpm/engine/runtime/ConditionEvaluationBuilder.java
Patch:
@@ -18,7 +18,8 @@
 
 /**
  * <p>A fluent builder for defining conditional start event correlation</p>
- *  TODO
+ *
+ * @author Yana Vasileva
  */
 public interface ConditionEvaluationBuilder {
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -1286,6 +1286,8 @@ public static void initSqlSessionFactoryProperties(Properties properties, String
       properties.put("limitBeforeNativeQuery", DbSqlSessionFactory.databaseSpecificLimitBeforeNativeQueryStatements.get(databaseType));
       properties.put("distinct", DbSqlSessionFactory.databaseSpecificDistinct.get(databaseType));
 
+      properties.put("escapeChar", DbSqlSessionFactory.databaseSpecificEscapeChar.get(databaseType));
+
       properties.put("bitand1", DbSqlSessionFactory.databaseSpecificBitAnd1.get(databaseType));
       properties.put("bitand2", DbSqlSessionFactory.databaseSpecificBitAnd2.get(databaseType));
       properties.put("bitand3", DbSqlSessionFactory.databaseSpecificBitAnd3.get(databaseType));

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/BpmnTestConstants.java
Patch:
@@ -28,6 +28,7 @@ public final class BpmnTestConstants {
   public static final String TASK_ID = "task";
   public static final String USER_TASK_ID = "userTask";
   public static final String SERVICE_TASK_ID = "serviceTask";
+  public static final String EXTERNAL_TASK_ID = "externalTask";
   public static final String SEND_TASK_ID = "sendTask";
   public static final String SCRIPT_TASK_ID = "scriptTask";
   public static final String SEQUENCE_FLOW_ID = "sequenceFlow";
@@ -75,6 +76,7 @@ public final class BpmnTestConstants {
   public static final String TEST_PROCESS_JOB_PRIORITY = "15";
   public static final String TEST_PROCESS_TASK_PRIORITY = "13";
   public static final String TEST_SERVICE_TASK_PRIORITY = "${test}";
+  public static final String TEST_EXTERNAL_TASK_TOPIC = "${externalTaskTopic}";
   public static final Integer TEST_HISTORY_TIME_TO_LIVE = 5;
 
   public static final String TEST_CONDITION = "${true}";

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/JobPrioritizationFailureJavaSerializationTest.java
Patch:
@@ -77,6 +77,8 @@ public static WebArchive createDeployment() {
     final WebArchive webArchive = initWebArchiveDeployment("pa1.war", "org/camunda/bpm/integrationtest/processes-javaSerializationEnabled-pa1.xml")
       .addClass(PriorityBean.class)
       .addAsResource("org/camunda/bpm/integrationtest/jobexecutor/JobPrioritizationTest.priorityProcess.bpmn20.xml");
+
+    TestContainer.addContainerSpecificProcessEngineConfigurationClass(webArchive);
     return webArchive;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/variable/scope/AbstractVariableScope.java
Patch:
@@ -381,8 +381,9 @@ protected void checkJavaSerialization(String variableName, TypedValue value) {
           // check if Java serializer will be used
           final TypedValueSerializer serializerForValue = TypedValueField.getSerializers()
               .findSerializerForValue(serializableValue, processEngineConfiguration.getFallbackSerializerFactory());
-
-          requestedDataFormat = serializerForValue.getSerializationDataformat();
+          if (serializerForValue != null) {
+            requestedDataFormat = serializerForValue.getSerializationDataformat();
+          }
         }
 
         if (javaSerializationDataFormat.equals(requestedDataFormat)) {

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/JobPrioritizationFailureTest.java
Patch:
@@ -75,9 +75,10 @@ protected void unregisterProcessApplication() {
 
   @Deployment(order = 1)
   public static WebArchive createDeployment() {
-    return initWebArchiveDeployment()
-      .addClass(PriorityBean.class)
+    final WebArchive webArchive = initWebArchiveDeployment().addClass(PriorityBean.class)
       .addAsResource("org/camunda/bpm/integrationtest/jobexecutor/JobPrioritizationTest.priorityProcess.bpmn20.xml");
+    TestContainer.addSpinJacksonJsonDataFormat(webArchive);
+    return webArchive;
   }
 
   @Deployment(name = "dummy-client", order = 2)

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/JobPrioritizationFailureTest.java
Patch:
@@ -81,7 +81,7 @@ public static WebArchive createDeployment() {
 
   @Deployment(name = "dummy-client", order = 2)
   public static WebArchive createDummyClientDeployment() {
-    return initWebArchiveDeployment("pa2.war", "org/camunda/bpm/integrationtest/jobexecutor/processes-javaSerializationEnabled.xml")
+    return initWebArchiveDeployment("pa2.war", "org/camunda/bpm/integrationtest/processes-javaSerializationEnabled.xml")
        .addAsResource(new ByteArrayAsset(serializeJavaObjectValue(new PriorityBean())), PRIORITY_BEAN_INSTANCE_FILE);
   }
 

File: typed-values/src/test/java/org/camunda/bpm/engine/test/api/variable/VariableApiTest.java
Patch:
@@ -181,7 +181,8 @@ public void testTransientVariables() throws URISyntaxException {
                      .putValueTyped("long", longValue((long)10, true))
                      .putValueTyped("file", fileValue("org/camunda/bpm/engine/test/variables/simpleFile.txt").setTransient(true).create())
                      .putValueTyped("hi", untypedValue("stringUntyped", true))
-                     .putValueTyped("null", untypedValue(null, true));
+                     .putValueTyped("null", untypedValue(null, true))
+                     .putValueTyped("ser", serializedObjectValue("{\"name\" : \"foo\"}", true).create());
 
     for (Entry<String, Object> e : variableMap.entrySet()) {
       TypedValue value = (TypedValue) variableMap.getValueTyped(e.getKey());

File: commons/typed-values/src/test/java/org/camunda/bpm/engine/test/api/variable/VariableApiTest.java
Patch:
@@ -181,7 +181,8 @@ public void testTransientVariables() throws URISyntaxException {
                      .putValueTyped("long", longValue((long)10, true))
                      .putValueTyped("file", fileValue("org/camunda/bpm/engine/test/variables/simpleFile.txt").setTransient(true).create())
                      .putValueTyped("hi", untypedValue("stringUntyped", true))
-                     .putValueTyped("null", untypedValue(null, true));
+                     .putValueTyped("null", untypedValue(null, true))
+                     .putValueTyped("ser", serializedObjectValue("{\"name\" : \"foo\"}", true).create());
 
     for (Entry<String, Object> e : variableMap.entrySet()) {
       TypedValue value = (TypedValue) variableMap.getValueTyped(e.getKey());

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -271,7 +271,7 @@ protected void removeObsoleteEventSubscriptions(ProcessDefinitionEntity processD
     }
   }
 
-  protected void addEventSubscriptions(ProcessDefinitionEntity processDefinition) {
+  public void addEventSubscriptions(ProcessDefinitionEntity processDefinition) {
     Map<String, EventSubscriptionDeclaration> eventDefinitions = processDefinition.getProperties().get(BpmnProperties.EVENT_SUBSCRIPTION_DECLARATIONS);
     for (EventSubscriptionDeclaration eventDefinition : eventDefinitions.values()) {
       addEventSubscription(processDefinition, eventDefinition);

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -408,6 +408,7 @@ protected void addAuthorizationsFromIterator(Set<Expression> exprSet, ProcessDef
           identityLink.setGroupId(expr.toString());
         }
         identityLink.setType(IdentityLinkType.CANDIDATE);
+        identityLink.setTenantId(processDefinition.getTenantId());
         identityLink.insert();
       }
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -769,7 +769,7 @@ protected HistoryEvent createHistoricIncidentEvt(Incident incident, HistoryEvent
     // initialize
     initHistoricIncidentEvent(evt, incident, eventType);
 
-    if (!HistoryEventTypes.INCIDENT_CREATE.equals(eventType)) {
+    if (HistoryEventTypes.INCIDENT_RESOLVE.equals(eventType) || HistoryEventTypes.INCIDENT_DELETE.equals(eventType)) {
       evt.setEndTime(ClockUtil.getCurrentTime());
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/DeploymentManager.java
Patch:
@@ -45,6 +45,7 @@ public void insertDeployment(DeploymentEntity deployment) {
 
     for (ResourceEntity resource : deployment.getResources().values()) {
       resource.setDeploymentId(deployment.getId());
+      resource.setTenantId(deployment.getTenantId());
       getResourceManager().insertResource(resource);
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricActivityStatisticsQueryImpl.java
Patch:
@@ -39,7 +39,7 @@ public class HistoricActivityStatisticsQueryImpl extends AbstractQuery<HistoricA
   protected boolean includeCompleteScope;
 
   protected Date startDate = new Date(0);
-  protected Date endDate = new Date(ClockUtil.getCurrentTime().getTime() + 1);    //current time + 1 ms, as taken into account exclusively
+  protected Date endDate = new Date(ClockUtil.getCurrentTime().getTime() + 1000);    //current time + 1 sec, as taken into account exclusively
 
   public HistoricActivityStatisticsQueryImpl(String processDefinitionId, CommandExecutor commandExecutor) {
     super(commandExecutor);

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/history/HistoricProcessDefinitionRestService.java
Patch:
@@ -21,6 +21,7 @@
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.UriInfo;
 
+import java.util.Date;
 import java.util.List;
 
 /**
@@ -37,7 +38,7 @@ public interface HistoricProcessDefinitionRestService {
   @GET
   @Path("/{id}/statistics")
   @Produces(MediaType.APPLICATION_JSON)
-  public List<HistoricActivityStatisticsDto> getHistoricActivityStatistics(@PathParam("id") String processDefinitionId,
+  public List<HistoricActivityStatisticsDto> getHistoricActivityStatistics(@Context UriInfo uriInfo, @PathParam("id") String processDefinitionId,
                                                                            @QueryParam("canceled") Boolean includeCanceled,
       @QueryParam("finished") Boolean includeFinished, @QueryParam("completeScope") Boolean includeCompleteScope,
       @QueryParam("sortBy") String sortBy, @QueryParam("sortOrder") String sortOrder);

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/Dmn.java
Patch:
@@ -88,7 +88,7 @@
 import org.camunda.bpm.model.dmn.impl.instance.OutputImpl;
 import org.camunda.bpm.model.dmn.impl.instance.OutputValuesImpl;
 import org.camunda.bpm.model.dmn.impl.instance.OwnerReferenceImpl;
-import org.camunda.bpm.model.dmn.impl.instance.ParameterReferenceImpl;
+import org.camunda.bpm.model.dmn.impl.instance.ParameterImpl;
 import org.camunda.bpm.model.dmn.impl.instance.PerformanceIndicatorImpl;
 import org.camunda.bpm.model.dmn.impl.instance.QuestionImpl;
 import org.camunda.bpm.model.dmn.impl.instance.RelationImpl;
@@ -340,7 +340,7 @@ protected void doRegisterTypes(ModelBuilder modelBuilder) {
     OutputEntryImpl.registerType(modelBuilder);
     OutputValuesImpl.registerType(modelBuilder);
     OwnerReferenceImpl.registerType(modelBuilder);
-    ParameterReferenceImpl.registerType(modelBuilder);
+    ParameterImpl.registerType(modelBuilder);
     PerformanceIndicatorImpl.registerType(modelBuilder);
     QuestionImpl.registerType(modelBuilder);
     RelationImpl.registerType(modelBuilder);

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/instance/Binding.java
Patch:
@@ -15,9 +15,9 @@
 
 public interface Binding extends DmnModelElementInstance {
 
-  InformationItem getParameter();
+  Parameter getParameter();
 
-  void setParameter(InformationItem parameter);
+  void setParameter(Parameter parameter);
 
   Expression getExpression();
 

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/instance/Parameter.java
Patch:
@@ -13,5 +13,5 @@
 
 package org.camunda.bpm.model.dmn.instance;
 
-public interface ParameterReference extends DmnElementReference {
+public interface Parameter extends InformationItem {
 }

File: model-api/dmn-model/src/test/java/org/camunda/bpm/model/dmn/instance/BindingTest.java
Patch:
@@ -24,7 +24,7 @@ public TypeAssumption getTypeAssumption() {
 
   public Collection<ChildElementAssumption> getChildElementAssumptions() {
     return Arrays.asList(
-      new ChildElementAssumption(ParameterReference.class, 1, 1),
+      new ChildElementAssumption(Parameter.class, 1, 1),
       new ChildElementAssumption(Expression.class, 0, 1)
     );
   }

File: engine/src/main/java/org/camunda/bpm/engine/delegate/BaseDelegateExecution.java
Patch:
@@ -27,8 +27,7 @@ public interface BaseDelegateExecution extends VariableScope {
   /** The {@link ExecutionListener#EVENTNAME_START event name} in case this execution is passed in for an {@link ExecutionListener}  */
   String getEventName();
 
-  /** The business key for this execution. Only returns a value if the delegate execution
-   * is a a root execution (such as a process instance).
+  /** The business key for the root execution (e.g. process instance).
    */
   String getBusinessKey();
 

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/servicetask/util/BusinessKeyCheckJavaDelegate.java
Patch:
@@ -27,5 +27,6 @@ public class BusinessKeyCheckJavaDelegate implements JavaDelegate {
 
   public void execute(DelegateExecution execution) throws Exception {
     execution.setVariable("businessKeySetOnExecution", execution.getProcessBusinessKey());
+    execution.setVariable("businessKeyAsProcessBusinessKey", execution.getBusinessKey());
   }
 }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/VariableValueDto.java
Patch:
@@ -80,8 +80,8 @@ public TypedValue toTypedValue(ProcessEngine processEngine, ObjectMapper objectM
     ValueTypeResolver valueTypeResolver = processEngine.getProcessEngineConfiguration().getValueTypeResolver();
 
     if (type == null) {
-      if (valueInfo != null && valueInfo.get(ValueType.VALUE_INFO_TRANSIENT) == (Boolean) true) {
-        return Variables.transientUntypedValue(value);
+      if (valueInfo != null && valueInfo.get(ValueType.VALUE_INFO_TRANSIENT) instanceof Boolean) {
+        return Variables.untypedValue(value, (Boolean) valueInfo.get(ValueType.VALUE_INFO_TRANSIENT));
       }
       return Variables.untypedValue(value);
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/handler/FormFieldHandler.java
Patch:
@@ -124,7 +124,6 @@ public void handleSubmit(VariableScope variableScope, VariableMap values, Variab
     if (submittedValue != null) {
       if (type != null) {
         modelValue = type.convertToModelValue(submittedValue);
-        modelValue.setTransient(submittedValue.isTransient());
       }
       else {
         modelValue = submittedValue;

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/type/BooleanFormType.java
Patch:
@@ -36,10 +36,10 @@ public TypedValue convertValue(TypedValue propertyValue) {
     else {
       Object value = propertyValue.getValue();
       if(value == null) {
-        return Variables.booleanValue(null);
+        return Variables.booleanValue(null, propertyValue.isTransient());
       }
       else if((value instanceof Boolean) || (value instanceof String)) {
-        return Variables.booleanValue(new Boolean(value.toString()));
+        return Variables.booleanValue(new Boolean(value.toString()), propertyValue.isTransient());
       }
       else {
         throw new ProcessEngineException("Value '"+value+"' is not of type Boolean.");

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/type/EnumFormType.java
Patch:
@@ -49,7 +49,7 @@ public TypedValue convertValue(TypedValue propertyValue) {
     Object value = propertyValue.getValue();
     if(value == null || String.class.isInstance(value)) {
       validateValue(value);
-      return Variables.stringValue((String) value);
+      return Variables.stringValue((String) value, propertyValue.isTransient());
     }
     else {
       throw new ProcessEngineException("Value '"+value+"' is not of type String.");

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/type/LongFormType.java
Patch:
@@ -38,10 +38,10 @@ public TypedValue convertValue(TypedValue propertyValue) {
     else {
       Object value = propertyValue.getValue();
       if(value == null) {
-        return Variables.longValue(null);
+        return Variables.longValue(null, propertyValue.isTransient());
       }
       else if((value instanceof Number) || (value instanceof String)) {
-        return Variables.longValue(new Long(value.toString()));
+        return Variables.longValue(new Long(value.toString()), propertyValue.isTransient());
       }
       else {
         throw new ProcessEngineException("Value '"+value+"' is not of type Long.");

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/type/StringFormType.java
Patch:
@@ -37,10 +37,10 @@ public TypedValue convertValue(TypedValue propertyValue) {
     else {
       Object value = propertyValue.getValue();
       if(value == null) {
-        return Variables.stringValue(null);
+        return Variables.stringValue(null, propertyValue.isTransient());
       }
       else {
-        return Variables.stringValue(value.toString());
+        return Variables.stringValue(value.toString(), propertyValue.isTransient());
       }
     }
   }

File: typed-values/src/main/java/org/camunda/bpm/engine/variable/type/ValueType.java
Patch:
@@ -62,7 +62,7 @@ public interface ValueType extends Serializable {
 
   public static final FileValueType FILE = new FileValueTypeImpl();
 
-
+  public static final String VALUE_INFO_TRANSIENT = "transient";
   /**
    * Returns the name of the variable type
    */

File: typed-values/src/main/java/org/camunda/bpm/engine/variable/value/builder/FileValueBuilder.java
Patch:
@@ -72,4 +72,5 @@ public interface FileValueBuilder extends TypedValueBuilder<FileValue> {
    * @return
    */
   FileValueBuilder encoding(String encoding);
+
 }

File: typed-values/src/main/java/org/camunda/bpm/engine/variable/value/builder/TypedValueBuilder.java
Patch:
@@ -22,4 +22,6 @@ public interface TypedValueBuilder<T extends TypedValue> {
 
   T create();
 
+  TypedValueBuilder<T> setTransient(boolean isTransient);
+
 }

File: commons/typed-values/src/main/java/org/camunda/bpm/engine/variable/type/ValueType.java
Patch:
@@ -62,7 +62,7 @@ public interface ValueType extends Serializable {
 
   public static final FileValueType FILE = new FileValueTypeImpl();
 
-
+  public static final String VALUE_INFO_TRANSIENT = "transient";
   /**
    * Returns the name of the variable type
    */

File: commons/typed-values/src/main/java/org/camunda/bpm/engine/variable/value/builder/FileValueBuilder.java
Patch:
@@ -72,4 +72,5 @@ public interface FileValueBuilder extends TypedValueBuilder<FileValue> {
    * @return
    */
   FileValueBuilder encoding(String encoding);
+
 }

File: commons/typed-values/src/main/java/org/camunda/bpm/engine/variable/value/builder/TypedValueBuilder.java
Patch:
@@ -22,4 +22,6 @@ public interface TypedValueBuilder<T extends TypedValue> {
 
   T create();
 
+  TypedValueBuilder<T> setTransient(boolean isTransient);
+
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/deploy/cache/CacheDeployer.java
Patch:
@@ -64,6 +64,7 @@ public Void call() throws Exception {
         return null;
       }
     });
+    deployment.setResources(null);
   }
 
   protected void initDeployment(final DeploymentEntity deployment, String... resourceNames) {

File: spring-boot-starter/starter/src/test/java/org/camunda/bpm/spring/boot/starter/CamundaBpmActuatorConfigurationIT.java
Patch:
@@ -13,7 +13,7 @@
 
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = { TestApplication.class }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
-public class CamundaBpmActuatorConfigurationIT {
+public class CamundaBpmActuatorConfigurationIT extends AbstractCamundaAutoConfigurationIT{
 
   @Autowired
   private TestRestTemplate testRestTemplate;

File: spring-boot-starter/starter/src/test/java/org/camunda/bpm/spring/boot/starter/multitask/MultipleTaskExecutorsIT.java
Patch:
@@ -2,6 +2,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+import org.camunda.bpm.spring.boot.starter.AbstractCamundaAutoConfigurationIT;
 import org.camunda.bpm.spring.boot.starter.configuration.impl.DefaultJobConfiguration.JobConfiguration;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -23,7 +24,7 @@
  */
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = { MultipleTaskExecutorsIT.MultipleTaskExecutorsConfig.class })
-public class MultipleTaskExecutorsIT {
+public class MultipleTaskExecutorsIT extends AbstractCamundaAutoConfigurationIT {
 
   @Autowired
   private TaskExecutor[] taskExecutors;

File: webapps/src/main/java/org/camunda/bpm/admin/impl/web/SetupResource.java
Patch:
@@ -16,9 +16,11 @@
 import static org.camunda.bpm.engine.authorization.Authorization.AUTH_TYPE_GRANT;
 import static org.camunda.bpm.engine.authorization.Permissions.ALL;
 
+import java.io.IOException;
 import java.util.Iterator;
 import java.util.ServiceLoader;
 
+import javax.servlet.ServletException;
 import javax.ws.rs.Consumes;
 import javax.ws.rs.POST;
 import javax.ws.rs.Path;
@@ -67,7 +69,7 @@ public class SetupResource {
   @POST
   @Consumes(MediaType.APPLICATION_JSON)
   @Produces(MediaType.APPLICATION_JSON)
-  public void createInitialUser(final @PathParam("engine") String processEngineName, final UserDto user) {
+  public void createInitialUser(final @PathParam("engine") String processEngineName, final UserDto user) throws IOException, ServletException {
 
     final ProcessEngine processEngine = lookupProcessEngine(processEngineName);
     if(processEngine == null) {

File: webapps/src/main/java/org/camunda/bpm/webapp/impl/engine/ProcessEnginesFilter.java
Patch:
@@ -126,7 +126,7 @@ protected void applyFilter(HttpServletRequest request, HttpServletResponse respo
     chain.doFilter(request, response);
   }
 
-  protected void serveIndexPage(String appName, String engineName, String pageUri, String contextPath, HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException {
+  protected void serveIndexPage(String appName, String engineName, String pageUri, String contextPath, HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {
 
     // access to /
     if (appName == null) {
@@ -203,7 +203,7 @@ protected void serveTemplate(String requestUri, String appName, String pageUri,
     }
   }
 
-  protected boolean needsInitialUser(String engineName) {
+  protected boolean needsInitialUser(String engineName) throws IOException, ServletException {
     final ProcessEngine processEngine = Cockpit.getProcessEngine(engineName);
     if (processEngine == null) {
       return false;

File: engine/src/main/java/org/camunda/bpm/engine/RuntimeService.java
Patch:
@@ -1996,7 +1996,6 @@ void deleteProcessInstance(String processInstanceId, String deleteReason, boolea
    *
    * @param incidentType the type of incident, cannot be null
    * @param executionId execution id, cannot be null
-   * @param activityId activity id
    * @param configuration
    *
    * @return a new incident
@@ -2012,7 +2011,6 @@ void deleteProcessInstance(String processInstanceId, String deleteReason, boolea
    *
    * @param incidentType the type of incident, cannot be null
    * @param executionId execution id, cannot be null
-   * @param activityId activity id
    * @param configuration
    * @param message
    *

File: qa/performance-tests-engine/src/main/java/org/camunda/bpm/qa/performance/engine/junit/PerfTestProcessEngine.java
Patch:
@@ -58,6 +58,8 @@ protected static ProcessEngine createProcessEngine(javax.sql.DataSource datasour
 
     processEngineConfiguration.setHistory(properties.getProperty("historyLevel"));
 
+    processEngineConfiguration.setJdbcBatchProcessing(Boolean.valueOf(properties.getProperty("jdbcBatchProcessing")));
+
     // load plugins
     String processEnginePlugins = properties.getProperty("processEnginePlugins", "");
     for (String pluginName : processEnginePlugins.split(",")) {

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/JdbcStatementTimeoutTest.java
Patch:
@@ -47,7 +47,7 @@ protected void runTest() throws Throwable {
 
     if ((DbSqlSessionFactory.DB2.equals(databaseType) || DbSqlSessionFactory.MARIADB.equals(databaseType))
       && processEngine.getProcessEngineConfiguration().isJdbcBatchProcessing()) {
-      // skip test method - if database is H2
+      // skip test method - if database is DB2 and MariaDB and Batch mode on
     } else {
       // invoke the test method
       super.runTest();

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricTaskReportTest.java
Patch:
@@ -206,6 +206,7 @@ public void testReportWithNullTaskName() {
       .name("name_" + ANOTHER_PROCESS_DEFINITION_KEY)
       .startEvent()
         .userTask("task1_" + ANOTHER_PROCESS_DEFINITION_KEY)
+        .name(null)
         .endEvent()
       .done();
 

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/builder/AbstractBaseElementBuilder.java
Patch:
@@ -46,6 +46,9 @@ protected <T extends BaseElement> T createInstance(Class<T> typeClass, String id
     T instance = createInstance(typeClass);
     if (identifier != null) {
       instance.setId(identifier);
+      if (instance instanceof FlowElement) {
+        ((FlowElement) instance).setName(identifier);
+      }
     }
     return instance;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/PersistenceSession.java
Patch:
@@ -14,6 +14,7 @@
 
 import java.util.List;
 
+import org.apache.ibatis.executor.BatchResult;
 import org.camunda.bpm.engine.impl.db.entitymanager.operation.DbOperation;
 import org.camunda.bpm.engine.impl.interceptor.Session;
 
@@ -40,6 +41,8 @@ public interface PersistenceSession extends Session {
 
   int executeNonEmptyUpdateStmt(String updateStmt, Object parameter);
 
+  List<BatchResult> flushOperations();
+
   void commit();
 
   void rollback();

File: engine/src/test/java/org/camunda/bpm/engine/test/api/task/TaskVariablesTest.java
Patch:
@@ -50,7 +50,7 @@ public void testTaskExecutionVariableLongValue() {
 
     StringBuffer longString = new StringBuffer();
     for (int i = 0; i < 500; i++) {
-      longString.append("tensimbols");
+      longString.append("tensymbols");
     }
     try {
       runtimeService.setVariable(processInstanceId, "var", longString.toString());

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/event/HistoricProcessInstanceEventEntity.java
Patch:
@@ -38,10 +38,10 @@ public class HistoricProcessInstanceEventEntity extends HistoricScopeInstanceEve
   /** the reason why this process instance was cancelled (deleted) */
   protected String deleteReason;
 
-  /** id of the activity which started the process instance */
+  /** id of the activity which ended the process instance */
   protected String endActivityId;
 
-  /** id of the activity which ended the process instance */
+  /** id of the activity which started the process instance */
   protected String startActivityId;
 
   /** id of the tenant which belongs to the process instance  */

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/type/DateFormType.java
Patch:
@@ -64,7 +64,7 @@ else if(value instanceof String) {
         return Variables.dateValue(null);
       }
       try {
-        return Variables.dateValue((Date) dateFormat.parseObject(strValue);
+        return Variables.dateValue((Date) dateFormat.parseObject(strValue));
       } catch (ParseException e) {
         throw new ProcessEngineException("Could not parse value '"+value+"' as date using date format '"+datePattern+"'.");
       }

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/PersistenceSession.java
Patch:
@@ -14,7 +14,6 @@
 
 import java.util.List;
 
-import org.apache.ibatis.executor.BatchResult;
 import org.camunda.bpm.engine.impl.db.entitymanager.operation.DbOperation;
 import org.camunda.bpm.engine.impl.interceptor.Session;
 
@@ -41,8 +40,6 @@ public interface PersistenceSession extends Session {
 
   int executeNonEmptyUpdateStmt(String updateStmt, Object parameter);
 
-  List<BatchResult> flushOperations();
-
   void commit();
 
   void rollback();

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/HistoryCleanupAuthorizationTest.java
Patch:
@@ -113,7 +113,7 @@ protected void prepareInstances(Integer processInstanceTimeToLive, Integer decis
     repositoryService.updateCaseDefinitionHistoryTimeToLive(caseDefinitions.get(0).getId(), caseTimeToLive);
 
     Date oldCurrentTime = ClockUtil.getCurrentTime();
-    ClockUtil.setCurrentTime(DateUtils.addDays(new Date(), -6));
+    ClockUtil.setCurrentTime(DateUtils.addDays(oldCurrentTime, -6));
 
     // create 3 process instances
     List<String> processInstanceIds = new ArrayList<String>();

File: engine/src/main/java/org/camunda/bpm/engine/impl/VariableOrderProperty.java
Patch:
@@ -35,6 +35,9 @@ public VariableOrderProperty(String name, ValueType valueType) {
     relationConditions.add(new QueryEntityRelationCondition(VariableInstanceQueryProperty.VARIABLE_TYPE, valueType.getName()));
   }
 
+  public VariableOrderProperty() {
+  }
+
   public static VariableOrderProperty forProcessInstanceVariable(String variableName, ValueType valueType) {
     VariableOrderProperty orderingProperty = new VariableOrderProperty(variableName, valueType);
     orderingProperty.relationConditions.add(

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/property/CamundaBpmProperties.java
Patch:
@@ -56,7 +56,7 @@ static StringJoiner joinOn(final Class<?> clazz) {
   /**
    * the default history level to use when 'historyLevel' is 'auto'
    */
-  private String historyLevelDefault;
+  private String historyLevelDefault = ProcessEngineConfiguration.HISTORY_FULL;
 
   /**
    * enables auto deployment of processes

File: spring-boot-starter/starter/src/test/java/org/camunda/bpm/spring/boot/starter/jdbc/HistoryLevelDeterminatorJdbcTemplateImplTest.java
Patch:
@@ -8,10 +8,10 @@
 
 import java.util.Collections;
 
+import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.impl.history.HistoryLevel;
 import org.camunda.bpm.engine.impl.history.HistoryLevelAudit;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventType;
-import org.camunda.bpm.engine.spring.SpringProcessEngineConfiguration;
 import org.camunda.bpm.spring.boot.starter.property.CamundaBpmProperties;
 import org.junit.Before;
 import org.junit.Test;
@@ -41,7 +41,7 @@ public void afterPropertiesSetTest1() throws Exception {
     determinator.setJdbcTemplate(jdbcTemplate);
     determinator.setCamundaBpmProperties(camundaBpmProperties);
     determinator.afterPropertiesSet();
-    assertEquals(new SpringProcessEngineConfiguration().getHistory(), determinator.defaultHistoryLevel);
+    assertEquals(ProcessEngineConfiguration.HISTORY_FULL, determinator.defaultHistoryLevel);
   }
 
   @Test

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/HistoryCleanupTest.java
Patch:
@@ -987,7 +987,6 @@ public void testConfiguration() {
   @Test
   public void testHistoryCleanupHelper() throws ParseException {
     processEngineConfiguration.setHistoryCleanupBatchWindowStartTime("22:00+0100");
-    processEngineConfiguration.setHistoryCleanupBatchWindowEndTime("01:00+0200");
     processEngineConfiguration.initHistoryCleanup();
 
     SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
@@ -996,7 +995,7 @@ public void testHistoryCleanupHelper() throws ParseException {
     assertTrue(HistoryCleanupHelper.isWithinBatchWindow(date, processEngineConfiguration.getHistoryCleanupBatchWindowStartTimeAsDate(),
       processEngineConfiguration.getHistoryCleanupBatchWindowEndTimeAsDate()));
 
-    date = sdf.parse("2017-09-06T22:15:00+0200");   // = 21:15+0100 - which is outside batch window, but returns true now
+    date = sdf.parse("2017-09-06T22:15:00+0200");
     assertFalse(HistoryCleanupHelper.isWithinBatchWindow(date, processEngineConfiguration.getHistoryCleanupBatchWindowStartTimeAsDate(),
       processEngineConfiguration.getHistoryCleanupBatchWindowEndTimeAsDate()));
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/historycleanup/HistoryCleanupJobDeclaration.java
Patch:
@@ -61,7 +61,7 @@ private Date resolveDueDate(boolean isImmediatelyDue) {
     if (isImmediatelyDue) {
       return ClockUtil.getCurrentTime();
     } else {
-      return HistoryCleanupHelper.getNextRunWithinBatchWindow(ClockUtil.getCurrentTime(), commandContext);
+      return HistoryCleanupHelper.getCurrentOrNextRunWithinBatchWindow(ClockUtil.getCurrentTime(), commandContext);
     }
   }
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/parse/FoxFailedJobParseListenerTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.camunda.bpm.engine.test.bpmn.parse;
 
 import org.camunda.bpm.engine.impl.bpmn.parser.BpmnParse;
-import org.camunda.bpm.engine.impl.el.Expression;
 import org.camunda.bpm.engine.impl.persistence.entity.ProcessDefinitionEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.ProcessInstanceWithVariablesImpl;
 import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
@@ -138,8 +137,8 @@ protected void checkFoxFailedJobConfig(ActivityImpl activity) {
 
     assertTrue(activity.getProperties().contains(FAILED_JOB_CONFIGURATION));
 
-    Expression value = (Expression) activity.getProperties().get(FAILED_JOB_CONFIGURATION).getRetryCycle();
-    assertEquals("R5/PT5M", value.getExpressionText());
+    Object value = activity.getProperties().get(FAILED_JOB_CONFIGURATION).getRetryIntervals().get(0);
+    assertEquals("R5/PT5M", value);
   }
 
   protected void checkNotContainingFoxFailedJobConfig(ActivityImpl activity) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -833,7 +833,7 @@ protected void initBatchOperationsHistoryTimeToLive() {
       }
     }
 
-    Map<String, Integer> parsedBatchOperationsForHistoryCleanup = new HashMap<String, Integer>();
+    parsedBatchOperationsForHistoryCleanup = new HashMap<String, Integer>();
     if (batchOperationsForHistoryCleanup != null) {
       for (String operation : batchOperationsForHistoryCleanup.keySet()) {
         Integer historyTimeToLive = ParseUtil.parseHistoryTimeToLive(batchOperationsForHistoryCleanup.get(operation));

File: engine/src/main/java/org/camunda/bpm/engine/impl/ModificationBuilderImpl.java
Patch:
@@ -69,7 +69,7 @@ public ModificationBuilder cancelAllForActivity(String activityId) {
   public ModificationBuilder cancelAllForActivity(String activityId, boolean cancelCurrentActiveActivityInstances) {
     ensureNotNull(NotValidException.class, "activityId", activityId);
     ActivityCancellationCmd activityCancellationCmd = new ActivityCancellationCmd(activityId);
-    activityCancellationCmd.cancelCurrentActiveActivityInstances(cancelCurrentActiveActivityInstances);
+    activityCancellationCmd.setCancelCurrentActiveActivityInstances(cancelCurrentActiveActivityInstances);
     instructions.add(activityCancellationCmd);
     return this;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/json/ModificationCmdJsonConverter.java
Patch:
@@ -56,7 +56,7 @@ else if (json.has(START_TRANSITION)) {
     else if (json.has(CANCEL_ALL)) {
       cmd = new ActivityCancellationCmd(json.getString(CANCEL_ALL));
       boolean cancelCurrentActiveActivityInstances = json.getBoolean(CANCEL_CURRENT);
-      ((ActivityCancellationCmd) cmd).cancelCurrentActiveActivityInstances(cancelCurrentActiveActivityInstances);
+      ((ActivityCancellationCmd) cmd).setCancelCurrentActiveActivityInstances(cancelCurrentActiveActivityInstances);
     }
 
     return cmd;

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/historycleanup/HistoryCleanupHelper.java
Patch:
@@ -109,6 +109,8 @@ public static Date updateTime(Date now, Date newTime) {
     c.setTime(now);
     Calendar newTimeCalendar = Calendar.getInstance();
     newTimeCalendar.setTime(newTime);
+    c.set(Calendar.ZONE_OFFSET, newTimeCalendar.get(Calendar.ZONE_OFFSET));
+    c.set(Calendar.DST_OFFSET, newTimeCalendar.get(Calendar.DST_OFFSET));
     c.set(Calendar.HOUR_OF_DAY, newTimeCalendar.get(Calendar.HOUR_OF_DAY));
     c.set(Calendar.MINUTE, newTimeCalendar.get(Calendar.MINUTE));
     c.set(Calendar.SECOND, newTimeCalendar.get(Calendar.SECOND));

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/HistoryCleanupTest.java
Patch:
@@ -986,7 +986,6 @@ public void testConfiguration() {
   }
 
   @Test
-  @Ignore("CAM-8205")
   public void testHistoryCleanupHelper() throws ParseException {
     processEngineConfiguration.setHistoryCleanupBatchWindowStartTime("22:00+0100");
     processEngineConfiguration.setHistoryCleanupBatchWindowEndTime("01:00+0200");

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/builder/AbstractBoundaryEventBuilder.java
Patch:
@@ -139,7 +139,7 @@ protected void setCoordinates(BpmnShape shape) {
       double sourceHeight = sourceBounds.getHeight();
       double targetHeight = shapeBounds.getHeight();
 
-      x = sourceX + sourceWidth + SPACE;
+      x = sourceX + sourceWidth + SPACE / 4;
       y = sourceY + sourceHeight - targetHeight / 2 + SPACE;
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/historycleanup/HistoryCleanupBatch.java
Patch:
@@ -78,7 +78,7 @@ public void performCleanup() {
     }
     if (historicBatchIds.size() > 0) {
       commandContext.getHistoricBatchManager().deleteHistoricBatchesByIds(historicBatchIds);
-      recordValue(Metrics.HISTORY_CLEANUP_REMOVED_BATCH_INSTANCES, historicBatchIds.size());
+      recordValue(Metrics.HISTORY_CLEANUP_REMOVED_BATCH_OPERATIONS, historicBatchIds.size());
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/management/Metrics.java
Patch:
@@ -62,5 +62,5 @@ public class Metrics {
   public final static String HISTORY_CLEANUP_REMOVED_PROCESS_INSTANCES = "history-cleanup-removed-process-instances";
   public final static String HISTORY_CLEANUP_REMOVED_CASE_INSTANCES = "history-cleanup-removed-case-instances";
   public final static String HISTORY_CLEANUP_REMOVED_DECISION_INSTANCES = "history-cleanup-removed-decision-instances";
-  public final static String HISTORY_CLEANUP_REMOVED_BATCH_INSTANCES = "history-cleanup-removed-batch-instances";
+  public final static String HISTORY_CLEANUP_REMOVED_BATCH_OPERATIONS = "history-cleanup-removed-batch-operations";
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/HistoryCleanupHistoricBatchTest.java
Patch:
@@ -215,7 +215,7 @@ public void testHistoryCleanupBatchMetrics() {
     managementService.executeJob(jobId);
 
     // then
-    final long removedBatches = managementService.createMetricsQuery().name(Metrics.HISTORY_CLEANUP_REMOVED_BATCH_INSTANCES).sum();
+    final long removedBatches = managementService.createMetricsQuery().name(Metrics.HISTORY_CLEANUP_REMOVED_BATCH_OPERATIONS).sum();
 
     assertEquals(batchesCount, removedBatches);
   }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/history/CleanableHistoricProcessInstanceReportResultDto.java
Patch:
@@ -85,7 +85,7 @@ public Long getFinishedProcessInstanceCount() {
     return finishedProcessInstanceCount;
   }
 
-  public Long getCleanableProcessInstancesCount() {
+  public Long getCleanableProcessInstanceCount() {
     return cleanableProcessInstanceCount;
   }
 

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/property/ApplicationProperty.java
Patch:
@@ -33,7 +33,7 @@ public class ApplicationProperty {
 
   /**
    * Indicates whether old versions of the deployment should be resumed. If
-   * this property is not set, the default value is used: true.
+   * this property is not set, the default value is used: false.
    */
   private boolean isResumePreviousVersions = false;
 

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/runtime/ProcessInstanceResource.java
Patch:
@@ -37,7 +37,8 @@ public interface ProcessInstanceResource {
 
   @DELETE
   void deleteProcessInstance(@QueryParam("skipCustomListeners") @DefaultValue("false") boolean skipCustomListeners,
-      @QueryParam("skipIoMappings") @DefaultValue("false") boolean skipIoMappings);
+      @QueryParam("skipIoMappings") @DefaultValue("false") boolean skipIoMappings,
+      @QueryParam("skipSubprocesses") @DefaultValue("false") boolean skipSubprocesses);
 
   @Path("/variables")
   VariableResource getVariablesResource();

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/runtime/impl/ProcessInstanceResourceImpl.java
Patch:
@@ -57,10 +57,10 @@ public ProcessInstanceDto getProcessInstance() {
   }
 
   @Override
-  public void deleteProcessInstance(boolean skipCustomListeners, boolean skipIoMappings) {
+  public void deleteProcessInstance(boolean skipCustomListeners, boolean skipIoMappings, boolean skipSubprocesses) {
     RuntimeService runtimeService = engine.getRuntimeService();
     try {
-      runtimeService.deleteProcessInstance(processInstanceId, null, skipCustomListeners, true, skipIoMappings);
+      runtimeService.deleteProcessInstance(processInstanceId, null, skipCustomListeners, true, skipIoMappings, skipSubprocesses);
     } catch (AuthorizationException e) {
       throw e;
     } catch (ProcessEngineException e) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AbstractDeleteProcessInstanceCmd.java
Patch:
@@ -118,9 +118,8 @@ public HistoryEvent createHistoryEvent(HistoryEventProducer producer) {
             return producer.createProcessInstanceUpdateEvt((DelegateExecution) processInstance);
           }
         });
-    }
+      }
     }
   }
 
-
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ModifyProcessInstanceCmd.java
Patch:
@@ -128,6 +128,6 @@ protected void deletePropagate(ExecutionEntity processInstance, String deleteRea
         parentScopeExecution = (ExecutionEntity) topmostDeletableExecution.getParentScopeExecution(true);
     }
 
-    topmostDeletableExecution.deleteCascade(deleteReason, skipCustomListeners, skipIoMappings, false, false);
+    topmostDeletableExecution.deleteCascade(deleteReason, skipCustomListeners, skipIoMappings);
   }
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/RuntimeServiceAsyncOperationsTest.java
Patch:
@@ -334,7 +334,6 @@ public void testDeleteProcessInstancesAsyncWithSkipSubprocesses() {
     executeBatchJobs(batch);
 
     // then
-    assertThat(IncrementCounterListener.counter, is(0));
     ProcessInstance superInstance = runtimeService.createProcessInstanceQuery().processInstanceId(processIds.get(0)).singleResult();
     assertNull(superInstance);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DetermineHistoryLevelCmd.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.impl.HistoryLevelSetupCommand;
-import org.camunda.bpm.engine.impl.db.entitymanager.DbEntityManager;
 import org.camunda.bpm.engine.impl.history.HistoryLevel;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
@@ -22,7 +21,7 @@ public DetermineHistoryLevelCmd(final List<HistoryLevel> historyLevels) {
 
   @Override
   public HistoryLevel execute(final CommandContext commandContext) {
-    final Integer databaseHistoryLevel = HistoryLevelSetupCommand.databaseHistoryLevel(commandContext.getSession(DbEntityManager.class));
+    final Integer databaseHistoryLevel = HistoryLevelSetupCommand.databaseHistoryLevel(commandContext);
 
     HistoryLevel result = null;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/test/TestHelper.java
Patch:
@@ -474,7 +474,7 @@ public Object execute(CommandContext commandContext) {
              dbEntityManager.merge(historyLevelProperty);
            }
          } else {
-           HistoryLevelSetupCommand.dbCreateHistoryLevel(dbEntityManager);
+           HistoryLevelSetupCommand.dbCreateHistoryLevel(commandContext);
          }
          return null;
        }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/cfg/DatabaseHistoryPropertyAutoTest.java
Patch:
@@ -14,7 +14,6 @@
 import org.camunda.bpm.engine.impl.ProcessEngineImpl;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration;
-import org.camunda.bpm.engine.impl.db.entitymanager.DbEntityManager;
 import org.camunda.bpm.engine.impl.history.HistoryLevel;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
@@ -79,7 +78,7 @@ public void usesDefaultValueAuditWhenNoValueIsConfigured() {
     final Integer level = config.getCommandExecutorSchemaOperations().execute(new Command<Integer>() {
       @Override
       public Integer execute(CommandContext commandContext) {
-        return HistoryLevelSetupCommand.databaseHistoryLevel(commandContext.getSession(DbEntityManager.class));
+        return HistoryLevelSetupCommand.databaseHistoryLevel(commandContext);
       }
     });
 

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/ConcurrentDeploymentTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.camunda.bpm.engine.repository.DeploymentBuilder;
 import org.camunda.bpm.engine.repository.DeploymentQuery;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
+import org.camunda.bpm.engine.test.util.DatabaseHelper;
 import org.camunda.bpm.model.bpmn.Bpmn;
 import org.camunda.bpm.model.bpmn.BpmnModelInstance;
 
@@ -53,7 +54,7 @@ public class ConcurrentDeploymentTest extends ConcurrencyTestCase {
    */
   @Override
   protected void runTest() throws Throwable {
-    String databaseType = processEngineConfiguration.getDbSqlSessionFactory().getDatabaseType();
+    String databaseType = DatabaseHelper.getDatabaseType(processEngineConfiguration);
 
     if("h2".equals(databaseType)) {
       // skip test method - if database is H2

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/ConcurrentHistoryCleanupTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.persistence.entity.JobEntity;
 import org.camunda.bpm.engine.runtime.Job;
-import org.camunda.bpm.engine.test.util.ConcurrentTestHelper;
+import org.camunda.bpm.engine.test.util.DatabaseHelper;
 
 /**
  * <p>Tests the call to history cleanup simultaneously.</p>
@@ -54,8 +54,8 @@ public Void execute(CommandContext commandContext) {
 
   @Override
   protected void runTest() throws Throwable {
-    final Integer transactionIsolationLevel = ConcurrentTestHelper.getTransactionIsolationLevel(processEngineConfiguration);
-    String databaseType = ConcurrentTestHelper.getDatabaseType(processEngineConfiguration);
+    final Integer transactionIsolationLevel = DatabaseHelper.getTransactionIsolationLevel(processEngineConfiguration);
+    String databaseType = DatabaseHelper.getDatabaseType(processEngineConfiguration);
 
     if (DbSqlSessionFactory.H2.equals(databaseType) || DbSqlSessionFactory.MARIADB.equals(databaseType) || (transactionIsolationLevel != null && !transactionIsolationLevel.equals(Connection.TRANSACTION_READ_COMMITTED))) {
       // skip test method - if database is H2

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/ConcurrentHistoryLevelTest.java
Patch:
@@ -19,7 +19,7 @@
 import org.camunda.bpm.engine.impl.history.HistoryLevel;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.test.TestHelper;
-import org.camunda.bpm.engine.test.util.ConcurrentTestHelper;
+import org.camunda.bpm.engine.test.util.DatabaseHelper;
 
 /**
  * <p>Tests cluster scenario with two nodes trying to write the history level property in parallel.</p>
@@ -38,8 +38,8 @@ protected void setUp() throws Exception {
 
   @Override
   protected void runTest() throws Throwable {
-    final Integer transactionIsolationLevel = ConcurrentTestHelper.getTransactionIsolationLevel(processEngineConfiguration);
-    String databaseType = ConcurrentTestHelper.getDatabaseType(processEngineConfiguration);
+    final Integer transactionIsolationLevel = DatabaseHelper.getTransactionIsolationLevel(processEngineConfiguration);
+    String databaseType = DatabaseHelper.getDatabaseType(processEngineConfiguration);
 
     if (DbSqlSessionFactory.H2.equals(databaseType) || DbSqlSessionFactory.MARIADB.equals(databaseType)
         || (transactionIsolationLevel != null && !transactionIsolationLevel.equals(Connection.TRANSACTION_READ_COMMITTED))) {

File: engine/src/test/java/org/camunda/bpm/engine/test/util/DatabaseHelper.java
Patch:
@@ -19,7 +19,7 @@
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 
-public class ConcurrentTestHelper {
+public class DatabaseHelper {
 
   public static Integer getTransactionIsolationLevel(ProcessEngineConfigurationImpl processEngineConfiguration) {
     final Integer[] transactionIsolation = new Integer[1];

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/database/PurgeDatabaseTest.java
Patch:
@@ -89,7 +89,7 @@ public Object execute(CommandContext commandContext) {
               PersistenceSession persistenceSession = commandContext.getSession(PersistenceSession.class);
               persistenceSession.dbSchemaDrop();
               persistenceSession.dbSchemaCreate();
-              HistoryLevelSetupCommand.dbCreateHistoryLevel(commandContext.getDbEntityManager());
+              HistoryLevelSetupCommand.dbCreateHistoryLevel(commandContext);
               return null;
             }
           });

File: spring-boot-starter/starter-rest/src/test/java/org/camunda/bpm/spring/boot/starter/rest/CamundaBpmRestConfigurationIT.java
Patch:
@@ -1,10 +1,10 @@
-package org.camunda.bpm.extension.spring.boot.rest;
+package org.camunda.bpm.spring.boot.starter.rest;
 
 import static org.junit.Assert.assertEquals;
 
 import org.camunda.bpm.engine.rest.dto.repository.ProcessDefinitionDto;
-import org.camunda.bpm.extension.spring.boot.rest.test.TestRestApplication;
 import org.camunda.bpm.spring.boot.starter.property.CamundaBpmProperties;
+import org.camunda.bpm.spring.boot.starter.rest.test.TestRestApplication;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;

File: spring-boot-starter/starter-rest/src/test/java/org/camunda/bpm/spring/boot/starter/rest/SampleCamundaRestApplicationIT.java
Patch:
@@ -1,4 +1,4 @@
-package org.camunda.bpm.extension.spring.boot.rest;
+package org.camunda.bpm.spring.boot.starter.rest;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;

File: spring-boot-starter/starter-rest/src/test/java/org/camunda/bpm/spring/boot/starter/rest/test/TestRestApplication.java
Patch:
@@ -1,4 +1,4 @@
-package org.camunda.bpm.extension.spring.boot.rest.test;
+package org.camunda.bpm.spring.boot.starter.rest.test;
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/externaltask/ExtendLockOnExternalTaskAuthorizationTest.java
Patch:
@@ -11,7 +11,7 @@ public class ExtendLockOnExternalTaskAuthorizationTest extends HandleExternalTas
 
   @Override
   public void testExternalTaskApi(LockedExternalTask task) {
-    engineRule.getExternalTaskService().extendLock(task.getId(), "workerId", 1000L);
+    engineRule.getExternalTaskService().extendLock(task.getId(), "workerId", 2000L);
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/impl/ProcessEngineImpl.java
Patch:
@@ -129,6 +129,7 @@ public ProcessEngineImpl(ProcessEngineConfigurationImpl processEngineConfigurati
 
   protected void executeSchemaOperations() {
     commandExecutorSchemaOperations.execute(processEngineConfiguration.getSchemaOperationsCommand());
+    commandExecutorSchemaOperations.execute(processEngineConfiguration.getHistoryLevelCommand());
   }
 
   @Override
@@ -156,8 +157,8 @@ public void close() {
   public String getName() {
     return name;
   }
-  
-  @Override  
+
+  @Override
   public ProcessEngineConfigurationImpl getProcessEngineConfiguration() {
     return processEngineConfiguration;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DetermineHistoryLevelCmd.java
Patch:
@@ -1,7 +1,7 @@
 package org.camunda.bpm.engine.impl.cmd;
 
 import org.camunda.bpm.engine.ProcessEngineException;
-import org.camunda.bpm.engine.impl.SchemaOperationsProcessEngineBuild;
+import org.camunda.bpm.engine.impl.HistoryLevelSetupCommand;
 import org.camunda.bpm.engine.impl.db.entitymanager.DbEntityManager;
 import org.camunda.bpm.engine.impl.history.HistoryLevel;
 import org.camunda.bpm.engine.impl.interceptor.Command;
@@ -22,7 +22,7 @@ public DetermineHistoryLevelCmd(final List<HistoryLevel> historyLevels) {
 
   @Override
   public HistoryLevel execute(final CommandContext commandContext) {
-    final Integer databaseHistoryLevel = SchemaOperationsProcessEngineBuild.databaseHistoryLevel(commandContext.getSession(DbEntityManager.class));
+    final Integer databaseHistoryLevel = HistoryLevelSetupCommand.databaseHistoryLevel(commandContext.getSession(DbEntityManager.class));
 
     HistoryLevel result = null;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -350,6 +350,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement(MSSQL, "selectUserByNativeQuery", "selectUserByNativeQuery_mssql_or_db2");
     addDatabaseSpecificStatement(MSSQL, "lockDeploymentLockProperty", "lockDeploymentLockProperty_mssql");
     addDatabaseSpecificStatement(MSSQL, "lockHistoryCleanupJobLockProperty", "lockHistoryCleanupJobLockProperty_mssql");
+    addDatabaseSpecificStatement(MSSQL, "lockStartupLockProperty", "lockStartupLockProperty_mssql");
     addDatabaseSpecificStatement(MSSQL, "selectEventSubscriptionsByNameAndExecution", "selectEventSubscriptionsByNameAndExecution_mssql");
     addDatabaseSpecificStatement(MSSQL, "selectEventSubscriptionsByExecutionAndType", "selectEventSubscriptionsByExecutionAndType_mssql");
     addDatabaseSpecificStatement(MSSQL, "selectHistoricDecisionInstancesByNativeQuery", "selectHistoricDecisionInstancesByNativeQuery_mssql_or_db2");

File: engine/src/main/java/org/camunda/bpm/engine/impl/test/TestHelper.java
Patch:
@@ -18,10 +18,10 @@
 import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.history.UserOperationLogEntry;
+import org.camunda.bpm.engine.impl.HistoryLevelSetupCommand;
 import org.camunda.bpm.engine.impl.ManagementServiceImpl;
 import org.camunda.bpm.engine.impl.ProcessEngineImpl;
 import org.camunda.bpm.engine.impl.ProcessEngineLogger;
-import org.camunda.bpm.engine.impl.SchemaOperationsProcessEngineBuild;
 import org.camunda.bpm.engine.impl.application.ProcessApplicationManager;
 import org.camunda.bpm.engine.impl.bpmn.deployer.BpmnDeployer;
 import org.camunda.bpm.engine.impl.cfg.IdGenerator;
@@ -474,7 +474,7 @@ public Object execute(CommandContext commandContext) {
              dbEntityManager.merge(historyLevelProperty);
            }
          } else {
-           SchemaOperationsProcessEngineBuild.dbCreateHistoryLevel(dbEntityManager);
+           HistoryLevelSetupCommand.dbCreateHistoryLevel(dbEntityManager);
          }
          return null;
        }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/cfg/DatabaseHistoryPropertyAutoTest.java
Patch:
@@ -10,8 +10,8 @@
 
 import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.ProcessEngineException;
+import org.camunda.bpm.engine.impl.HistoryLevelSetupCommand;
 import org.camunda.bpm.engine.impl.ProcessEngineImpl;
-import org.camunda.bpm.engine.impl.SchemaOperationsProcessEngineBuild;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration;
 import org.camunda.bpm.engine.impl.db.entitymanager.DbEntityManager;
@@ -79,7 +79,7 @@ public void usesDefaultValueAuditWhenNoValueIsConfigured() {
     final Integer level = config.getCommandExecutorSchemaOperations().execute(new Command<Integer>() {
       @Override
       public Integer execute(CommandContext commandContext) {
-        return SchemaOperationsProcessEngineBuild.databaseHistoryLevel(commandContext.getSession(DbEntityManager.class));
+        return HistoryLevelSetupCommand.databaseHistoryLevel(commandContext.getSession(DbEntityManager.class));
       }
     });
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/database/PurgeDatabaseTest.java
Patch:
@@ -1,9 +1,9 @@
 package org.camunda.bpm.integrationtest.functional.database;
 
 import org.camunda.bpm.engine.ProcessEngine;
+import org.camunda.bpm.engine.impl.HistoryLevelSetupCommand;
 import org.camunda.bpm.engine.impl.ManagementServiceImpl;
 import org.camunda.bpm.engine.impl.ProcessEngineImpl;
-import org.camunda.bpm.engine.impl.SchemaOperationsProcessEngineBuild;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.impl.db.PersistenceSession;
 import org.camunda.bpm.engine.impl.interceptor.Command;
@@ -89,7 +89,7 @@ public Object execute(CommandContext commandContext) {
               PersistenceSession persistenceSession = commandContext.getSession(PersistenceSession.class);
               persistenceSession.dbSchemaDrop();
               persistenceSession.dbSchemaCreate();
-              SchemaOperationsProcessEngineBuild.dbCreateHistoryLevel(commandContext.getDbEntityManager());
+              HistoryLevelSetupCommand.dbCreateHistoryLevel(commandContext.getDbEntityManager());
               return null;
             }
           });

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricProcessInstanceQueryImpl.java
Patch:
@@ -487,15 +487,15 @@ public HistoricProcessInstanceQuery executedJobBefore(Date date) {
 
   @Override
   public HistoricProcessInstanceQuery executedActivityIdIn(String... ids) {
-    ensureNotNull(BadUserRequestException.class, "activity ids", Arrays.asList(ids));
+    ensureNotNull(BadUserRequestException.class, "activity ids", (Object[]) ids);
     ensureNotContainsNull(BadUserRequestException.class, "activity ids", Arrays.asList(ids));
     this.executedActivityIds = ids;
     return this;
   }
 
   @Override
   public HistoricProcessInstanceQuery activeActivityIdIn(String... ids) {
-    ensureNotNull(BadUserRequestException.class, "activity ids", Arrays.asList(ids));
+    ensureNotNull(BadUserRequestException.class, "activity ids", (Object[]) ids);
     ensureNotContainsNull(BadUserRequestException.class, "activity ids", Arrays.asList(ids));
     this.activeActivityIds = ids;
     return this;

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/parse/FoxFailedJobParseListenerTest.java
Patch:
@@ -138,7 +138,7 @@ protected void checkFoxFailedJobConfig(ActivityImpl activity) {
 
     assertTrue(activity.getProperties().contains(FAILED_JOB_CONFIGURATION));
 
-    Expression value = (Expression) activity.getProperties().get(FAILED_JOB_CONFIGURATION);
+    Expression value = (Expression) activity.getProperties().get(FAILED_JOB_CONFIGURATION).getRetryCycle();
     assertEquals("R5/PT5M", value.getExpressionText());
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -146,6 +146,7 @@ public class DbSqlSessionFactory implements SessionFactory {
       // related to CAM-8064
       addDatabaseSpecificStatement(mysqlLikeDatabase, "deleteExceptionByteArraysByIds", "deleteExceptionByteArraysByIds_mysql");
       addDatabaseSpecificStatement(mysqlLikeDatabase, "deleteErrorDetailsByteArraysByIds", "deleteErrorDetailsByteArraysByIds_mysql");
+      addDatabaseSpecificStatement(mysqlLikeDatabase, "deleteHistoricDetailsByIds", "deleteHistoricDetailsByIds_mysql");
       addDatabaseSpecificStatement(mysqlLikeDatabase, "deleteHistoricDetailByteArraysByIds", "deleteHistoricDetailByteArraysByIds_mysql");
       addDatabaseSpecificStatement(mysqlLikeDatabase, "deleteHistoricIdentityLinksByTaskProcessInstanceIds", "deleteHistoricIdentityLinksByTaskProcessInstanceIds_mysql");
       addDatabaseSpecificStatement(mysqlLikeDatabase, "deleteHistoricIdentityLinksByTaskCaseInstanceIds", "deleteHistoricIdentityLinksByTaskCaseInstanceIds_mysql");
@@ -155,6 +156,7 @@ public class DbSqlSessionFactory implements SessionFactory {
       addDatabaseSpecificStatement(mysqlLikeDatabase, "deleteHistoricVariableInstanceByteArraysByIds", "deleteHistoricVariableInstanceByteArraysByIds_mysql");
       addDatabaseSpecificStatement(mysqlLikeDatabase, "deleteCommentsByIds", "deleteCommentsByIds_mysql");
       addDatabaseSpecificStatement(mysqlLikeDatabase, "deleteAttachmentByteArraysByIds", "deleteAttachmentByteArraysByIds_mysql");
+      addDatabaseSpecificStatement(mysqlLikeDatabase, "deleteAttachmentByIds", "deleteAttachmentByIds_mysql");
 
       addDatabaseSpecificStatement(mysqlLikeDatabase, "deleteHistoricIncidentsByBatchIds", "deleteHistoricIncidentsByBatchIds_mysql");
 

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/configuration/id/IdGeneratorConfiguration.java
Patch:
@@ -19,7 +19,7 @@ public class IdGeneratorConfiguration {
 
   @Bean
   @ConditionalOnMissingBean(IdGenerator.class)
-  @ConditionalOnProperty(prefix = CamundaBpmProperties.PREFIX, name = PROPERTY_NAME, havingValue = STRONG)
+  @ConditionalOnProperty(prefix = CamundaBpmProperties.PREFIX, name = PROPERTY_NAME, havingValue = STRONG, matchIfMissing = true)
   public IdGenerator strongUuidGenerator() {
     return new StrongUuidGenerator();
   }

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/configuration/impl/custom/CreateAdminUserConfiguration.java
Patch:
@@ -1,4 +1,4 @@
-package org.camunda.bpm.spring.boot.starter.configuration.impl;
+package org.camunda.bpm.spring.boot.starter.configuration.impl.custom;
 
 import org.camunda.bpm.engine.AuthorizationService;
 import org.camunda.bpm.engine.IdentityService;
@@ -9,6 +9,7 @@
 import org.camunda.bpm.engine.identity.Group;
 import org.camunda.bpm.engine.identity.User;
 import org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity;
+import org.camunda.bpm.spring.boot.starter.configuration.impl.AbstractCamundaConfiguration;
 import org.camunda.bpm.spring.boot.starter.property.AdminUserProperty;
 import org.springframework.beans.BeanUtils;
 

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/configuration/impl/custom/CreateFilterConfiguration.java
Patch:
@@ -1,7 +1,8 @@
-package org.camunda.bpm.spring.boot.starter.configuration.impl;
+package org.camunda.bpm.spring.boot.starter.configuration.impl.custom;
 
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.filter.Filter;
+import org.camunda.bpm.spring.boot.starter.configuration.impl.AbstractCamundaConfiguration;
 import org.camunda.bpm.spring.boot.starter.property.FilterProperty;
 
 import javax.annotation.PostConstruct;

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/configuration/impl/custom/EnterLicenseKeyConfiguration.java
Patch:
@@ -1,8 +1,9 @@
-package org.camunda.bpm.spring.boot.starter.configuration.impl;
+package org.camunda.bpm.spring.boot.starter.configuration.impl.custom;
 
 
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.spring.boot.starter.CamundaBpmNestedRuntimeException;
+import org.camunda.bpm.spring.boot.starter.configuration.impl.AbstractCamundaConfiguration;
 import org.camunda.bpm.spring.boot.starter.util.CamundaBpmVersion;
 import org.springframework.beans.factory.annotation.Autowired;
 

File: spring-boot-starter/starter/src/main/java/org/camunda/bpm/spring/boot/starter/property/CamundaBpmProperties.java
Patch:
@@ -1,5 +1,6 @@
 package org.camunda.bpm.spring.boot.starter.property;
 
+import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.ProcessEngines;
 import org.camunda.bpm.spring.boot.starter.configuration.id.IdGeneratorConfiguration;
 import org.springframework.boot.context.properties.ConfigurationProperties;
@@ -17,7 +18,6 @@
 public class CamundaBpmProperties {
 
   public static final String PREFIX = "camunda.bpm";
-  private static final String CLASS_NAME = CamundaBpmProperties.class.getSimpleName();
 
   public static final String[] DEFAULT_BPMN_RESOURCE_SUFFIXES = new String[]{"bpmn20.xml", "bpmn" };
   public static final String[] DEFAULT_CMMN_RESOURCE_SUFFIXES = new String[]{"cmmn11.xml", "cmmn10.xml", "cmmn" };
@@ -46,12 +46,12 @@ static StringJoiner joinOn(final Class<?> clazz) {
    */
   private String processEngineName = ProcessEngines.NAME_DEFAULT;
 
-  private String idGenerator = IdGeneratorConfiguration.SIMPLE;
+  private String idGenerator = IdGeneratorConfiguration.STRONG;
 
   /**
    * the history level to use
    */
-  private String historyLevel;
+  private String historyLevel = ProcessEngineConfiguration.HISTORY_FULL;
 
   /**
    * the default history level to use when 'historyLevel' is 'auto'

File: spring-boot-starter/starter/src/test/java/org/camunda/bpm/spring/boot/starter/configuration/impl/custom/CreateAdminUserConfigurationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.camunda.bpm.spring.boot.starter.configuration.impl;
+package org.camunda.bpm.spring.boot.starter.configuration.impl.custom;
 
 
 import org.camunda.bpm.engine.identity.User;

File: spring-boot-starter/starter/src/test/java/org/camunda/bpm/spring/boot/starter/configuration/impl/custom/CreateFilterConfigurationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.camunda.bpm.spring.boot.starter.configuration.impl;
+package org.camunda.bpm.spring.boot.starter.configuration.impl.custom;
 
 
 import org.camunda.bpm.engine.FilterService;

File: spring-boot-starter/starter/src/test/java/org/camunda/bpm/spring/boot/starter/configuration/impl/custom/EnterLicenseKeyConfigurationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.camunda.bpm.spring.boot.starter.configuration.impl;
+package org.camunda.bpm.spring.boot.starter.configuration.impl.custom;
 
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DefaultJobRetryCmd.java
Patch:
@@ -142,7 +142,7 @@ protected ExecutionEntity fetchExecutionEntity(String executionId) {
 
   protected String getFailedJobRetryTimeCycle(JobEntity job, ActivityImpl activity) {
 
-    Expression expression = activity.getProperties().get(DefaultFailedJobParseListener.FOX_FAILED_JOB_CONFIGURATION);
+    Expression expression = activity.getProperties().get(DefaultFailedJobParseListener.FAILED_JOB_CONFIGURATION);
 
     String executionId = job.getExecutionId();
     ExecutionEntity execution = null;

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/historycleanup/HistoryCleanupBatch.java
Patch:
@@ -77,7 +77,7 @@ public void performCleanup() {
       recordValue(Metrics.HISTORY_CLEANUP_REMOVED_CASE_INSTANCES, historicCaseInstanceIds.size());
     }
     if (historicBatchIds.size() > 0) {
-      commandContext.getHistoricBatchManager().deleteHistoricBatchByIds(historicBatchIds);
+      commandContext.getHistoricBatchManager().deleteHistoricBatchesByIds(historicBatchIds);
       recordValue(Metrics.HISTORY_CLEANUP_REMOVED_BATCH_INSTANCES, historicBatchIds.size());
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/historycleanup/HistoryCleanupHelper.java
Patch:
@@ -105,12 +105,12 @@ private static Integer getHistoryCleanupBatchSize(CommandContext commandContext)
 
   public static Map<String, Integer> getBatchOperationsForHistoryCleanup(CommandContext commandContext) {
     Map<String, String> batchOperationsForHistoryCleanup = commandContext.getProcessEngineConfiguration().getBatchOperationsForHistoryCleanup();
-    Map<String, Integer> result = new HashMap<String, Integer>();
+    Map<String, Integer> batchOperations = new HashMap<String, Integer>();
     for (String operation : batchOperationsForHistoryCleanup.keySet()) {
       Integer historyTimeToLive = ParseUtil.parseHistoryTimeToLive(batchOperationsForHistoryCleanup.get(operation));
-      result.put(operation, historyTimeToLive);
+      batchOperations.put(operation, historyTimeToLive);
     }
-    return result;
+    return batchOperations;
   }
 
   /**

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -812,7 +812,6 @@ private void initBatchOperationsHistoryTimeToLive() {
         String propertyValue = batchOperationsForHistoryCleanup.get(operation);
         if (!batchHandlers.keySet().contains(operation)) {
           LOG.invalidBatchOperation(operation, propertyValue);
-          batchOperationsForHistoryCleanup.remove(operation);
         }
 
         try {

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/history/HistoryCleanupBatchTest.java
Patch:
@@ -31,11 +31,11 @@ public void testBatchHistoryTimeToLiveConfiguration() {
     assertEquals("P5D", batchOperationHistoryTimeToLive);
 
     Map<String, String> map = processEngineConfiguration.getBatchOperationsForHistoryCleanup();
-    assertEquals(8, map.size());
+    assertEquals(9, map.size());
     assertEquals("P10D", map.get("instance-migration"));
     assertEquals("P7D", map.get("instance-modification"));
     assertEquals("P5D", map.get("instance-restart"));
-    assertNull(map.get("uknown-operation"));
+    assertEquals("P3D", map.get("uknown-operation"));
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/DefaultFailedJobParseListener.java
Patch:
@@ -23,7 +23,7 @@
 import org.camunda.bpm.engine.impl.util.xml.Element;
 import org.camunda.bpm.engine.impl.util.xml.Namespace;
 
-public class FoxFailedJobParseListener extends AbstractBpmnParseListener {
+public class DefaultFailedJobParseListener extends AbstractBpmnParseListener {
 
   protected static final String TYPE = "type";
   protected static final String START_TIMER_EVENT = "startTimerEvent";

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/DefaultFailedJobCommandFactory.java
Patch:
@@ -12,14 +12,14 @@
  */
 package org.camunda.bpm.engine.impl.jobexecutor;
 
-import org.camunda.bpm.engine.impl.cmd.DecrementJobRetriesCmd;
+import org.camunda.bpm.engine.impl.cmd.DefaultJobRetryCmd;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 
 
 public class DefaultFailedJobCommandFactory implements FailedJobCommandFactory {
 
   public Command<Object> getCommand(String jobId, Throwable exception) {
-    return new DecrementJobRetriesCmd(jobId, exception);
+    return new DefaultJobRetryCmd(jobId, exception);
   }
 
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/parse/FoxFailedJobParseListenerTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.test.Deployment;
 
-import static org.camunda.bpm.engine.impl.bpmn.parser.FoxFailedJobParseListener.FOX_FAILED_JOB_CONFIGURATION;
+import static org.camunda.bpm.engine.impl.bpmn.parser.DefaultFailedJobParseListener.FOX_FAILED_JOB_CONFIGURATION;
 
 public class FoxFailedJobParseListenerTest extends PluggableProcessEngineTestCase {
 

File: engine-plugins/identity-ldap/src/test/java/org/camunda/bpm/identity/impl/ldap/LdapGroupQueryTest.java
Patch:
@@ -52,7 +52,7 @@ public void testFilterByGroupId() {
     assertNull(group);
   }
 
-  public void FAILING_testFilterByGroupIdIn() {
+  public void testFilterByGroupIdIn() {
     List<Group> groups = identityService.createGroupQuery()
       .groupIdIn("external", "management")
       .list();

File: engine/src/main/java/org/camunda/bpm/engine/impl/GroupQueryImpl.java
Patch:
@@ -124,5 +124,7 @@ public String getUserId() {
   public String getTenantId() {
     return tenantId;
   }
-
+  public String[] getIds() {
+    return ids;
+  }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationTransitionDestroyScope.java
Patch:
@@ -60,13 +60,13 @@ public void execute(PvmExecutionImpl execution) {
           LegacyBehavior.destroyConcurrentScope(execution);
         }
         else {
-          execution.destroy();
-          execution.remove();
           propagatingExecution = execution.getParent();
+          LOG.debugDestroyScope(execution, propagatingExecution);
+          execution.destroy();
           propagatingExecution.setActivity(execution.getActivity());
           propagatingExecution.setTransition(execution.getTransition());
           propagatingExecution.setActive(true);
-          LOG.debugDestroyScope(execution, propagatingExecution);
+          execution.remove();
         }
       }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/HistoryCleanupHistoricBatchTest.java
Patch:
@@ -217,7 +217,7 @@ public void testBatchOperationTypeConfigurationOnly() {
     map.put("instance-migration", 2);
     map.put("instance-deletion", 5);
     processEngineConfiguration.setBatchOperationHistoryTimeToLive(null);
-    processEngineConfiguration.setBatchOperationHistoryTimeToLiveMap(map);
+    processEngineConfiguration.setBatchOperationsForHistoryCleanup(map);
     processEngineConfiguration.initHistoryCleanup();
 
     assertNull(processEngineConfiguration.getBatchOperationHistoryTimeToLive());
@@ -265,7 +265,7 @@ public void testMixedConfiguration() {
     Map<String, Integer> map = new HashMap<String, Integer>();
     map.put("instance-modification", 20);
     processEngineConfiguration.setBatchOperationHistoryTimeToLive(5);
-    processEngineConfiguration.setBatchOperationHistoryTimeToLiveMap(map);
+    processEngineConfiguration.setBatchOperationsForHistoryCleanup(map);
     processEngineConfiguration.initHistoryCleanup();
 
     Date startDate = ClockUtil.getCurrentTime();

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -155,6 +155,8 @@ public class DbSqlSessionFactory implements SessionFactory {
       addDatabaseSpecificStatement(mysqlLikeDatabase, "deleteCommentsByIds", "deleteCommentsByIds_mysql");
       addDatabaseSpecificStatement(mysqlLikeDatabase, "deleteAttachmentByteArraysByIds", "deleteAttachmentByteArraysByIds_mysql");
 
+      addDatabaseSpecificStatement(mysqlLikeDatabase, "deleteHistoricIncidentsByBatchIds", "deleteHistoricIncidentsByBatchIds_mysql");
+
       constants = new HashMap<String, String>();
       constants.put("constant.event", "'event'");
       constants.put("constant.op_message", "CONCAT(NEW_VALUE_, '_|_', PROPERTY_)");

File: engine/src/main/java/org/camunda/bpm/engine/management/Metrics.java
Patch:
@@ -62,4 +62,5 @@ public class Metrics {
   public final static String HISTORY_CLEANUP_REMOVED_PROCESS_INSTANCES = "history-cleanup-removed-process-instances";
   public final static String HISTORY_CLEANUP_REMOVED_CASE_INSTANCES = "history-cleanup-removed-case-instances";
   public final static String HISTORY_CLEANUP_REMOVED_DECISION_INSTANCES = "history-cleanup-removed-decision-instances";
+  public final static String HISTORY_CLEANUP_REMOVED_BATCH_INSTANCES = "history-cleanup-removed-batch-instances";
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -141,6 +141,8 @@ public class DbSqlSessionFactory implements SessionFactory {
       addDatabaseSpecificStatement(mysqlLikeDatabase, "selectProcessDefinitionCountByQueryCriteria", "selectProcessDefinitionCountByQueryCriteria_mysql");
       addDatabaseSpecificStatement(mysqlLikeDatabase, "selectDeploymentsByQueryCriteria", "selectDeploymentsByQueryCriteria_mysql");
       addDatabaseSpecificStatement(mysqlLikeDatabase, "selectDeploymentCountByQueryCriteria", "selectDeploymentCountByQueryCriteria_mysql");
+      addDatabaseSpecificStatement(mysqlLikeDatabase, "deleteExceptionByteArraysByIds", "deleteExceptionByteArraysByIds_mysql");
+      addDatabaseSpecificStatement(mysqlLikeDatabase, "deleteErrorDetailsByteArraysByIds", "deleteErrorDetailsByteArraysByIds_mysql");
 
       constants = new HashMap<String, String>();
       constants.put("constant.event", "'event'");

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationTransitionDestroyScope.java
Patch:
@@ -60,13 +60,13 @@ public void execute(PvmExecutionImpl execution) {
           LegacyBehavior.destroyConcurrentScope(execution);
         }
         else {
+          execution.destroy();
+          execution.remove();
           propagatingExecution = execution.getParent();
           propagatingExecution.setActivity(execution.getActivity());
           propagatingExecution.setTransition(execution.getTransition());
           propagatingExecution.setActive(true);
           LOG.debugDestroyScope(execution, propagatingExecution);
-          execution.destroy();
-          execution.remove();
         }
       }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExternalTaskEntity.java
Patch:
@@ -473,7 +473,7 @@ protected void produceHistoricExternalTaskDeletedEvent() {
 
   public void extendLock(long newLockExpirationTime) {
     ensureActive();
-    long newTime = lockExpirationTime.getTime() + newLockExpirationTime;
+    long newTime = ClockUtil.getCurrentTime().getTime() + newLockExpirationTime;
     this.lockExpirationTime = new Date(newTime);
   }
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/iomapping/InputOutputTest.java
Patch:
@@ -380,6 +380,7 @@ public void testInputMapElMixedKey() {
     Map<String, Object> variables = new HashMap<String, Object>();
     variables.put("varExpr1", "a");
     variables.put("varExpr2", "b");
+    variables.put("varExprMapValue", "avocado");
     runtimeService.startProcessInstanceByKey("testProcess", variables);
 
     VariableInstance variable = runtimeService.createVariableInstanceQuery().variableName("var1").singleResult();

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/impl/IncidentResourceImpl.java
Patch:
@@ -4,6 +4,7 @@
 
 import org.camunda.bpm.engine.BadUserRequestException;
 import org.camunda.bpm.engine.ProcessEngine;
+import org.camunda.bpm.engine.exception.NotFoundException;
 import org.camunda.bpm.engine.rest.dto.runtime.IncidentDto;
 import org.camunda.bpm.engine.rest.exception.InvalidRequestException;
 import org.camunda.bpm.engine.rest.sub.runtime.IncidentResource;
@@ -34,6 +35,8 @@ public IncidentDto getIncident() {
   public void resolveIncident() {
     try {
       engine.getRuntimeService().resolveIncident(incidentId);
+    } catch (NotFoundException e) {
+      throw new InvalidRequestException(Status.NOT_FOUND, e.getMessage());
     } catch (BadUserRequestException e) {
       throw new InvalidRequestException(Status.BAD_REQUEST, e.getMessage());
     }

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ExecutionRestServiceInteractionTest.java
Patch:
@@ -1544,7 +1544,6 @@ public void testMessageEventTriggeringThrowsAuthorizationException() {
   public void testCreateIncident() {
     when(runtimeServiceMock.createIncident(anyString(), anyString(), anyString(), anyString())).thenReturn(mock(Incident.class));
     Map<String, Object> json = new HashMap<String, Object>();
-    json.put("activityId", "activityId");
     json.put("incidentType", "incidentType");
     json.put("configuration", "configuration");
     json.put("message", "message");
@@ -1559,7 +1558,6 @@ public void testCreateIncident() {
   public void testCreateIncidentWithNullIncidentType() {
     doThrow(new BadUserRequestException()).when(runtimeServiceMock).createIncident(anyString(), anyString(), anyString(), anyString());
     Map<String, Object> json = new HashMap<String, Object>();
-    json.put("activiyId", "activityId");
     json.put("configuration", "configuration");
     json.put("message", "message");
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/IncidentRestServiceInteractionTest.java
Patch:
@@ -3,6 +3,7 @@
 import org.camunda.bpm.engine.BadUserRequestException;
 import org.camunda.bpm.engine.RepositoryService;
 import org.camunda.bpm.engine.RuntimeService;
+import org.camunda.bpm.engine.exception.NotFoundException;
 import org.camunda.bpm.engine.impl.IncidentQueryImpl;
 import org.camunda.bpm.engine.impl.ManagementServiceImpl;
 import org.camunda.bpm.engine.impl.RepositoryServiceImpl;
@@ -102,12 +103,12 @@ public void testResolveIncident() {
 
   @Test
   public void testResolveUnexistingIncident() {
-    doThrow(new BadUserRequestException()).when(mockRuntimeService).resolveIncident(anyString());
+    doThrow(new NotFoundException()).when(mockRuntimeService).resolveIncident(anyString());
 
     given()
       .pathParam("id", MockProvider.EXAMPLE_INCIDENT_ID)
     .then().expect()
-      .statusCode(Status.BAD_REQUEST.getStatusCode())
+      .statusCode(Status.NOT_FOUND.getStatusCode())
     .when()
       .delete(SINGLE_INCIDENT_URL);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ResolveIncidentCmd.java
Patch:
@@ -1,6 +1,7 @@
 package org.camunda.bpm.engine.impl.cmd;
 
 import org.camunda.bpm.engine.BadUserRequestException;
+import org.camunda.bpm.engine.exception.NotFoundException;
 import org.camunda.bpm.engine.impl.cfg.CommandChecker;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
@@ -26,7 +27,7 @@ public ResolveIncidentCmd(String incidentId) {
   public Void execute(CommandContext commandContext) {
     final Incident incident = commandContext.getIncidentManager().findIncidentById(incidentId);
 
-    EnsureUtil.ensureNotNull(BadUserRequestException.class, "Cannot find an incident with id '" + incidentId + "'",
+    EnsureUtil.ensureNotNull(NotFoundException.class, "Cannot find an incident with id '" + incidentId + "'",
         "incident", incident);
 
     if (incident.getIncidentType().equals("failedJob") || incident.getIncidentType().equals("failedExternalTask")) {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/CreateAndResolveIncidentTest.java
Patch:
@@ -7,6 +7,7 @@
 import org.camunda.bpm.engine.BadUserRequestException;
 import org.camunda.bpm.engine.HistoryService;
 import org.camunda.bpm.engine.RuntimeService;
+import org.camunda.bpm.engine.exception.NotFoundException;
 import org.camunda.bpm.engine.runtime.Incident;
 import org.camunda.bpm.engine.runtime.Job;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
@@ -111,7 +112,7 @@ public void resolveUnexistingIncident() {
     try {
       runtimeService.resolveIncident("foo");
       fail("Exception expected");
-    } catch (BadUserRequestException e) {
+    } catch (NotFoundException e) {
       assertThat(e.getMessage(), containsString("Cannot find an incident with id 'foo'"));
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ResolveIncidentCmd.java
Patch:
@@ -18,6 +18,7 @@ public class ResolveIncidentCmd implements Command<Void> {
   protected String incidentId;
 
   public ResolveIncidentCmd(String incidentId) {
+    EnsureUtil.ensureNotNull(BadUserRequestException.class, "", "incidentId", incidentId);
     this.incidentId = incidentId;
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/CreateAndResolveIncidentTest.java
Patch:
@@ -122,7 +122,7 @@ public void resolveNullIncident() {
       runtimeService.resolveIncident(null);
       fail("Exception expected");
     } catch (BadUserRequestException e) {
-      assertThat(e.getMessage(), containsString("Cannot find an incident with id 'null'"));
+      assertThat(e.getMessage(), containsString("incidentId is null"));
     }
   }
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ExecutionRestServiceInteractionTest.java
Patch:
@@ -1542,7 +1542,7 @@ public void testMessageEventTriggeringThrowsAuthorizationException() {
 
   @Test
   public void testCreateIncident() {
-    when(runtimeServiceMock.createIncident(anyString(), anyString(), anyString(), anyString(), anyString())).thenReturn(mock(Incident.class));
+    when(runtimeServiceMock.createIncident(anyString(), anyString(), anyString(), anyString())).thenReturn(mock(Incident.class));
     Map<String, Object> json = new HashMap<String, Object>();
     json.put("activityId", "activityId");
     json.put("incidentType", "incidentType");
@@ -1552,12 +1552,12 @@ public void testCreateIncident() {
     given().pathParam("id", MockProvider.EXAMPLE_EXECUTION_ID).contentType(ContentType.JSON).body(json).then().expect().statusCode(Status.OK.getStatusCode())
         .when().post(CREATE_INCIDENT_URL);
 
-    verify(runtimeServiceMock).createIncident("incidentType", MockProvider.EXAMPLE_EXECUTION_ID, "activityId", "configuration", "message");
+    verify(runtimeServiceMock).createIncident("incidentType", MockProvider.EXAMPLE_EXECUTION_ID, "configuration", "message");
   }
 
   @Test
   public void testCreateIncidentWithNullIncidentType() {
-    doThrow(new BadUserRequestException()).when(runtimeServiceMock).createIncident(anyString(), anyString(), anyString(), anyString(), anyString());
+    doThrow(new BadUserRequestException()).when(runtimeServiceMock).createIncident(anyString(), anyString(), anyString(), anyString());
     Map<String, Object> json = new HashMap<String, Object>();
     json.put("activiyId", "activityId");
     json.put("configuration", "configuration");

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/runtime/impl/ExecutionResourceImpl.java
Patch:
@@ -94,8 +94,8 @@ public IncidentDto createIncident(CreateIncidentDto createIncidentDto) {
     Incident newIncident = null;
 
     try {
-      newIncident = engine.getRuntimeService().createIncident(createIncidentDto.getIncidentType(), executionId, createIncidentDto.getActivityId(),
-          createIncidentDto.getConfiguration(), createIncidentDto.getMessage());
+      newIncident = engine.getRuntimeService()
+          .createIncident(createIncidentDto.getIncidentType(), executionId, createIncidentDto.getConfiguration(), createIncidentDto.getMessage());
     } catch (BadUserRequestException e) {
       throw new InvalidRequestException(Status.BAD_REQUEST, e.getMessage());
     }

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/CompetingCompleteTaskSetVariableTest.java
Patch:
@@ -73,8 +73,7 @@ public Void execute(CommandContext commandContext) {
   }
 
   @Deployment
-  @Ignore("CAM-7477")
-  public void testCompleteTaskSetLocalVariable() {
+  public void ignoreTestCompleteTaskSetLocalVariable() {
     runtimeService.startProcessInstanceByKey("oneTaskProcess");
 
     final String taskId = taskService.createTaskQuery().singleResult().getId();

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/parse/BpmnParseTest.java
Patch:
@@ -783,7 +783,7 @@ public void testParseProcessDefinitionMalformedStringTtl() {
       repositoryService.createDeployment().name(resource).addClasspathResource(resource).deploy();
       fail("Exception expected: Process definition historyTimeToLive value can not be parsed.");
     } catch (ProcessEngineException e) {
-      assertTextPresent("Cannot parse historyTimeToLive", e.getMessage());
+      assertTextPresent("Cannot parse historyTimeToLive", e.getCause().getMessage());
     }
   }
 
@@ -813,7 +813,7 @@ public void testParseProcessDefinitionInvalidTtl() {
       repositoryService.createDeployment().name(resource).addClasspathResource(resource).deploy();
       fail("Exception expected: Process definition historyTimeToLive value can not be parsed.");
     } catch (ProcessEngineException e) {
-      assertTextPresent("Cannot parse historyTimeToLive", e.getMessage());
+      assertTextPresent("Cannot parse historyTimeToLive", e.getCause().getMessage());
     }
   }
 
@@ -823,7 +823,7 @@ public void testParseProcessDefinitionNegativTtl() {
       repositoryService.createDeployment().name(resource).addClasspathResource(resource).deploy();
       fail("Exception expected: Process definition historyTimeToLive value can not be parsed.");
     } catch (ProcessEngineException e) {
-      assertTextPresent("Cannot parse historyTimeToLive", e.getMessage());
+      assertTextPresent("Cannot parse historyTimeToLive", e.getCause().getMessage());
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java
Patch:
@@ -639,7 +639,7 @@ public void configureHistoricIdentityLinkQuery(HistoricIdentityLinkLogQueryImpl
   }
 
   public void configureHistoricDecisionInstanceQuery(HistoricDecisionInstanceQueryImpl query) {
-    configureQuery(query, DECISION_DEFINITION, "SELF.DEC_DEF_KEY_", READ_HISTORY);
+    configureQuery(query, DECISION_DEFINITION, "RES.DEC_DEF_KEY_", READ_HISTORY);
   }
 
   // historic external task log query /////////////////////////////////

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java
Patch:
@@ -629,7 +629,7 @@ public void configureHistoricJobLogQuery(HistoricJobLogQueryImpl query) {
   // historic incident query ////////////////////////////////
 
   public void configureHistoricIncidentQuery(HistoricIncidentQueryImpl query) {
-    configureQuery(query, PROCESS_DEFINITION, "SELF.PROC_DEF_KEY_", READ_HISTORY);
+    configureQuery(query, PROCESS_DEFINITION, "RES.PROC_DEF_KEY_", READ_HISTORY);
   }
 
   //historic identity link query ////////////////////////////////

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -196,7 +196,6 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement(POSTGRES, "selectCommentsByProcessInstanceId", "selectCommentsByProcessInstanceId_postgres");
     addDatabaseSpecificStatement(POSTGRES, "selectCommentByTaskIdAndCommentId", "selectCommentByTaskIdAndCommentId_postgres");
     addDatabaseSpecificStatement(POSTGRES, "selectEventsByTaskId", "selectEventsByTaskId_postgres");
-    addDatabaseSpecificStatement(POSTGRES, "selectHistoricVariableInstanceByQueryCriteria", "selectHistoricVariableInstanceByQueryCriteria_postgres");
     addDatabaseSpecificStatement(POSTGRES, "selectFilterByQueryCriteria", "selectFilterByQueryCriteria_postgres");
     addDatabaseSpecificStatement(POSTGRES, "selectFilter", "selectFilter_postgres");
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationDeleteCascadeFireActivityEnd.java
Patch:
@@ -91,7 +91,6 @@ protected void eventNotificationsCompleted(PvmExecutionImpl execution) {
             if(propagatingExecution.getActivity() == null && activity != null && activity.getFlowScope() != null) {
               propagatingExecution.setActivity(getFlowScopeActivity(activity));
             }
-            propagatingExecution.performOperation(DELETE_CASCADE);
           }
         }
       }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/event/HistoryEventTypes.java
Patch:
@@ -179,7 +179,7 @@ public enum HistoryEventTypes implements HistoryEventType {
   EXTERNAL_TASK_DELETE("external-task", "delete");
 
   private HistoryEventTypes(String entityType, String eventName) {
-    this.entityType = eventName;
+    this.entityType = entityType;
     this.eventName = eventName;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/interceptor/CommandContextInterceptor.java
Patch:
@@ -103,8 +103,8 @@ public <T> T execute(Command<T> command) {
       // delegate to next interceptor in chain
       return next.execute(command);
 
-    } catch (Exception e) {
-      commandInvocationContext.trySetThrowable(e);
+    } catch (Throwable t) {
+      commandInvocationContext.trySetThrowable(t);
 
     } finally {
       try {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -1002,6 +1002,7 @@ public void fireAuthorizationProvider() {
       String oldAssignee = assigneePropertyChange.getOrgValueString();
       String newAssignee = assigneePropertyChange.getNewValueString();
       fireAssigneeAuthorizationProvider(oldAssignee, newAssignee);
+      fireEvent(TaskListener.EVENTNAME_ASSIGNMENT);
     }
 
     PropertyChange ownerPropertyChange = propertyChanges.get(OWNER);

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -2883,8 +2883,10 @@ public void parseEndEvents(Element parentElement, ScopeImpl scope) {
         if (isServiceTaskLike(messageEventDefinitionElement)) {
 
           // CAM-436 same behaviour as service task
+          ActivityImpl act = parseServiceTaskLike(ActivityTypes.END_EVENT_MESSAGE, messageEventDefinitionElement, scope);
           activity.getProperties().set(BpmnProperties.TYPE, ActivityTypes.END_EVENT_MESSAGE);
-          activity.setActivityBehavior(parseServiceTaskLike(ActivityTypes.END_EVENT_MESSAGE, messageEventDefinitionElement, scope).getActivityBehavior());
+          activity.setActivityBehavior(act.getActivityBehavior());
+          scope.getActivities().remove(act);
         } else {
           // default to non behavior if no service task
           // properties have been specified

File: engine/src/main/java/org/camunda/bpm/engine/runtime/MessageCorrelationBuilder.java
Patch:
@@ -142,7 +142,7 @@ public interface MessageCorrelationBuilder {
   /**
    * Executes the message correlation.
    *
-   * @deprecated use {@link #correlateWithResult() ()} instead.
+   * @deprecated use {@link #correlateWithResult()} instead.
    */
   @Deprecated
   void correlate();
@@ -201,7 +201,7 @@ public interface MessageCorrelationBuilder {
   /**
    * Executes the message correlation for multiple messages.
    *
-   * @deprecated use {@link #correlateAllWithResult() ()} instead.
+   * @deprecated use {@link #correlateAllWithResult()} instead.
    */
   @Deprecated
   void correlateAll();

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/history/HistoricProcessDefinitionRestServiceImpl.java
Patch:
@@ -98,7 +98,7 @@ private void setSortOptions(HistoricActivityStatisticsQuery query, String sortOr
   public List<HistoricFinishedProcessInstanceReportDto> getHistoricFinishedProcessInstanceReport() {
     HistoryService historyService = processEngine.getHistoryService();
 
-    List<HistoricFinishedProcessInstanceReportResult> reportResult = historyService.createHistoricFinishedProcessInstanceReport().count();
+    List<HistoricFinishedProcessInstanceReportResult> reportResult = historyService.createHistoricFinishedProcessInstanceReport().list();
     return HistoricFinishedProcessInstanceReportDto.convert(reportResult);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricFinishedProcessInstanceReportImpl.java
Patch:
@@ -30,11 +30,11 @@ public HistoricFinishedProcessInstanceReportImpl(CommandExecutor commandExecutor
   }
 
   @Override
-  public List<HistoricFinishedProcessInstanceReportResult> count() {
+  public List<HistoricFinishedProcessInstanceReportResult> list() {
     return commandExecutor.execute(new Command<List<HistoricFinishedProcessInstanceReportResult>>() {
       @Override
       public List<HistoricFinishedProcessInstanceReportResult> execute(CommandContext commandContext) {
-        return commandContext.getHistoricProcessInstanceManager().findFinishedProcessInstancesReport();
+        return commandContext.getHistoricProcessInstanceManager().findFinishedProcessInstancesReportResults();
       }
     });
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/DefaultMigrationActivityMatcher.java
Patch:
@@ -22,7 +22,7 @@ public boolean matchActivities(ActivityImpl source, ActivityImpl target) {
   }
 
   protected boolean equalId(ActivityImpl source, ActivityImpl target) {
-    return source.getId().equals(target.getId());
+    return source.getId() != null && source.getId().equals(target.getId());
   }
 
 }

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/parser/AbstractModelParser.java
Patch:
@@ -56,6 +56,7 @@ protected void configureFactory(DocumentBuilderFactory dbf) {
     dbf.setIgnoringComments(false);
     dbf.setIgnoringElementContentWhitespace(false);
     dbf.setNamespaceAware(true);
+    dbf.setExpandEntityReferences(false);
   }
 
   public ModelInstance parseModelFromStream(InputStream inputStream) {

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricProcessInstanceTest.java
Patch:
@@ -270,6 +270,9 @@ public void testHistoricProcessInstanceQueryWithIncidents() {
 
     assertEquals(0, historyService.createHistoricProcessInstanceQuery().incidentMessage("Unknown message").count());
     assertEquals(0, historyService.createHistoricProcessInstanceQuery().incidentMessage("Unknown message").list().size());
+
+    assertEquals(1, historyService.createHistoricProcessInstanceQuery().incidentType("failedJob").count());
+    assertEquals(1, historyService.createHistoricProcessInstanceQuery().incidentType("failedJob").list().size());
   }
 
   @Deployment(resources = {"org/camunda/bpm/engine/test/api/mgmt/IncidentTest.testShouldDeleteIncidentAfterJobWasSuccessfully.bpmn"})

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/PaContextSwitchCustomSerializerTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.camunda.bpm.integrationtest.functional.spin.dataformat.XmlSerializableJsonSerializer;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.camunda.bpm.integrationtest.util.DeploymentHelper;
+import org.camunda.bpm.integrationtest.util.TestContainer;
 import org.camunda.spin.DataFormats;
 import org.camunda.spin.spi.DataFormatConfigurator;
 import org.jboss.arquillian.container.test.api.Deployment;
@@ -47,12 +48,11 @@ public static WebArchive createDeployment1() {
         .addClass(XmlSerializable.class)
         .addClass(XmlSerializableJsonDeserializer.class)
         .addClass(XmlSerializableJsonSerializer.class)
-        .addAsLibraries(DeploymentHelper.getSpinJacksonJsonDataFormatForServer("tomcat"))
         .addAsResource("org/camunda/bpm/integrationtest/functional/spin/paContextSwitchCustomSerializer.bpmn20.xml")
         .addClass(CustomDataFormatConfigurator.class)
         .addAsServiceProvider(DataFormatConfigurator.class, CustomDataFormatConfigurator.class);
 
-//    TestContainer.addSpinJacksonJsonDataFormat(webArchive);
+    TestContainer.addSpinJacksonJsonDataFormat(webArchive);
 
     return webArchive;
   }

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/parser/AbstractModelParser.java
Patch:
@@ -56,6 +56,7 @@ protected void configureFactory(DocumentBuilderFactory dbf) {
     dbf.setIgnoringComments(false);
     dbf.setIgnoringElementContentWhitespace(false);
     dbf.setNamespaceAware(true);
+    dbf.setExpandEntityReferences(false);
   }
 
   public ModelInstance parseModelFromStream(InputStream inputStream) {

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/task/TaskQueryDto.java
Patch:
@@ -768,7 +768,7 @@ public String getName() {
   }
 
   public String getNameNotEqual() {
-    return name;
+    return nameNotEqual;
   }
 
   public String getNameLike() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricProcessInstanceManager.java
Patch:
@@ -127,7 +127,7 @@ public Long findHistoricProcessInstanceIdsForCleanupCount() {
   public List<HistoricFinishedProcessInstanceReportResult> findFinishedProcessInstancesReport() {
     ListQueryParameterObject parameterObject = new ListQueryParameterObject();
     parameterObject.setParameter(ClockUtil.getCurrentTime());
-    getAuthorizationManager().configureQuery(parameterObject, Resources.PROCESS_DEFINITION, "PD.KEY_", Permissions.READ, Permissions.READ_HISTORY);
+    getAuthorizationManager().configureQuery(parameterObject, Resources.PROCESS_DEFINITION, "RES.KEY_", Permissions.READ, Permissions.READ_HISTORY);
     getTenantManager().configureQuery(parameterObject);
     return (List<HistoricFinishedProcessInstanceReportResult>) getDbEntityManager().selectList("selectFinishedProcessInstancesReportEntities", parameterObject);
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AbstractInstanceCancellationCmd.java
Patch:
@@ -40,13 +40,13 @@ public Void execute(CommandContext commandContext) {
     // 4. remove topmost execution (and concurrent parent) if topmostExecution is not the process instance
 
     ExecutionEntity topmostCancellableExecution = sourceInstanceExecution;
-    ExecutionEntity parentScopeExecution = (ExecutionEntity) topmostCancellableExecution.getParentScopeExecution(true);
+    ExecutionEntity parentScopeExecution = (ExecutionEntity) topmostCancellableExecution.getParentScopeExecution(false);
 
     // if topmostCancellableExecution's scope execution has no other non-event-scope children,
     // we have reached the correct execution
     while (parentScopeExecution != null && (parentScopeExecution.getNonEventScopeExecutions().size() <= 1)) {
         topmostCancellableExecution = parentScopeExecution;
-        parentScopeExecution = (ExecutionEntity) topmostCancellableExecution.getParentScopeExecution(true);
+        parentScopeExecution = (ExecutionEntity) topmostCancellableExecution.getParentScopeExecution(false);
     }
 
     if (topmostCancellableExecution.isPreserveScope()) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ModifyProcessInstanceCmd.java
Patch:
@@ -66,6 +66,7 @@ public Void execute(CommandContext commandContext) {
       AbstractProcessInstanceModificationCommand instruction = instructions.get(i);
       LOG.debugModificationInstruction(processInstanceId, i + 1, instruction.describe());
 
+
       instruction.setSkipCustomListeners(builder.isSkipCustomListeners());
       instruction.setSkipIoMappings(builder.isSkipIoMappings());
       instruction.execute(commandContext);
@@ -74,7 +75,7 @@ public Void execute(CommandContext commandContext) {
     processInstance = executionManager.findExecutionById(processInstanceId);
 
     if (!processInstance.hasChildren()) {
-      if (processInstance.getActivity() == null) {
+      if (!(processInstance.getActivity() != null && !processInstance.getId().equals(processInstance.getActivityInstanceId()))) {
         // process instance was cancelled
         checkDeleteProcessInstance(processInstance, commandContext);
         processInstance.deleteCascade("Cancellation due to process instance modification", builder.isSkipCustomListeners(), builder.isSkipIoMappings());

File: engine/src/main/java/org/camunda/bpm/engine/runtime/ProcessInstanceModificationBuilder.java
Patch:
@@ -82,6 +82,9 @@ public interface ProcessInstanceModificationBuilder extends
    * <p>Cancel an activity instance in a process. If this instance has child activity instances
    * (e.g. in a subprocess instance), these children, their grandchildren, etc. are cancelled as well.</p>
    *
+   * <p>Process instance cancellation will propagate upward, removing any parent process instances that are
+   * only waiting on the cancelled process to complete.</p>
+   *
    * @param activityInstanceId the id of the activity instance to cancel
    */
   ProcessInstanceModificationBuilder cancelActivityInstance(String activityInstanceId);

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/runtime/ProcessInstanceSuspensionStateDto.java
Patch:
@@ -109,11 +109,11 @@ public void updateSuspensionState(ProcessEngine engine) {
 
     UpdateProcessInstanceSuspensionStateBuilder updateSuspensionStateBuilder = createUpdateSuspensionStateBuilder(engine);
     if (syncParams > 0) {
-      UpdateProcessInstancesSuspensionStateBuilder updateProcessInstancesSuspensionStateBuilder = (UpdateProcessInstancesSuspensionStateBuilder) updateSuspensionStateBuilder;
+      //UpdateProcessInstancesSuspensionStateBuilder updateProcessInstancesSuspensionStateBuilder = (UpdateProcessInstancesSuspensionStateBuilder) updateSuspensionStateBuilder;
       if (getSuspended()) {
-        updateProcessInstancesSuspensionStateBuilder.suspend();
+        ((UpdateProcessInstancesSuspensionStateBuilder)updateSuspensionStateBuilder).suspend();
       } else {
-        updateProcessInstancesSuspensionStateBuilder.activate();
+        ((UpdateProcessInstancesSuspensionStateBuilder)updateSuspensionStateBuilder).activate();
       }
     } else {
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TaskManager.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.List;
 import java.util.Map;
 
-import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.authorization.Resources;
 import org.camunda.bpm.engine.history.UserOperationLogEntry;
 import org.camunda.bpm.engine.impl.Page;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractRestServiceTest.java
Patch:
@@ -29,7 +29,6 @@
 import org.camunda.bpm.engine.impl.persistence.entity.ActivityInstanceImpl;
 import org.camunda.bpm.engine.impl.persistence.entity.TransitionInstanceImpl;
 import org.camunda.bpm.engine.rest.hal.Hal;
-import org.camunda.bpm.engine.rest.mapper.JacksonConfigurator;
 import org.camunda.bpm.engine.rest.spi.ProcessEngineProvider;
 import org.camunda.bpm.engine.rest.spi.impl.MockedProcessEngineProvider;
 import org.camunda.bpm.engine.runtime.ActivityInstance;
@@ -140,7 +139,6 @@ public abstract class AbstractRestServiceTest {
 
   @BeforeClass
   public static void setUp() throws IOException {
-    JacksonConfigurator.setDateFormatString("yyyy-MM-dd'T'HH:mm:ss");
     setupTestScenario();
   }
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ProcessInstanceRestServiceQueryTest.java
Patch:
@@ -3,6 +3,7 @@
 import static com.jayway.restassured.RestAssured.expect;
 import static com.jayway.restassured.RestAssured.given;
 import static com.jayway.restassured.path.json.JsonPath.from;
+import static org.camunda.bpm.engine.rest.util.DateTimeUtils.withTimezone;
 import static org.fest.assertions.Assertions.assertThat;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
@@ -348,7 +349,7 @@ public void testMultipleVariableParametersAsPost() {
   @Test
   public void testDateVariableParameter() {
     String variableName = "varName";
-    String variableValue = "2014-06-16T10:00:00";
+    String variableValue = withTimezone("2014-06-16T10:00:00");
     String queryValue = variableName + "_eq_" + variableValue;
 
     given()
@@ -367,7 +368,7 @@ public void testDateVariableParameter() {
   @Test
   public void testDateVariableParameterAsPost() {
     String variableName = "varName";
-    String variableValue = "2014-06-16T10:00:00";
+    String variableValue = withTimezone("2014-06-16T10:00:00");
 
     Map<String, Object> variableJson = new HashMap<String, Object>();
     variableJson.put("name", variableName);

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TaskManager.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.authorization.Resources;
 import org.camunda.bpm.engine.history.UserOperationLogEntry;
 import org.camunda.bpm.engine.impl.Page;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractRestServiceTest.java
Patch:
@@ -29,6 +29,7 @@
 import org.camunda.bpm.engine.impl.persistence.entity.ActivityInstanceImpl;
 import org.camunda.bpm.engine.impl.persistence.entity.TransitionInstanceImpl;
 import org.camunda.bpm.engine.rest.hal.Hal;
+import org.camunda.bpm.engine.rest.mapper.JacksonConfigurator;
 import org.camunda.bpm.engine.rest.spi.ProcessEngineProvider;
 import org.camunda.bpm.engine.rest.spi.impl.MockedProcessEngineProvider;
 import org.camunda.bpm.engine.runtime.ActivityInstance;
@@ -139,6 +140,7 @@ public abstract class AbstractRestServiceTest {
 
   @BeforeClass
   public static void setUp() throws IOException {
+    JacksonConfigurator.setDateFormatString("yyyy-MM-dd'T'HH:mm:ss");
     setupTestScenario();
   }
 

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/mapper/JacksonConfigurator.java
Patch:
@@ -29,7 +29,7 @@
 @Produces({MediaType.APPLICATION_JSON, Hal.APPLICATION_HAL_JSON})
 public class JacksonConfigurator implements ContextResolver<ObjectMapper> {
 
-  public static final String DEFAULT_DATE_FORMAT = "yyyy-MM-dd'T'HH:mm:ss";
+  public static final String DEFAULT_DATE_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSSZ";
   public static String dateFormatString = DEFAULT_DATE_FORMAT;
 
   public static ObjectMapper configureObjectMapper(ObjectMapper mapper) {

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/CustomJacksonDateFormatTest.java
Patch:
@@ -35,8 +35,8 @@ public class CustomJacksonDateFormatTest extends AbstractRestServiceTest {
   protected static final String PROCESS_INSTANCE_VARIABLES_URL = SINGLE_PROCESS_INSTANCE_URL + "/variables";
   protected static final String SINGLE_PROCESS_INSTANCE_VARIABLE_URL = PROCESS_INSTANCE_VARIABLES_URL + "/{varId}";
 
-  protected static final SimpleDateFormat testDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
-  protected static final Date testDate = new Date(1450282812345L);
+  protected static final SimpleDateFormat testDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
+  protected static final Date testDate = new Date(1450282812000L);
   protected static final String testDateFormatted = testDateFormat.format(testDate);
 
   protected RuntimeServiceImpl runtimeServiceMock;

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/filter/CacheControlFilter.java
Patch:
@@ -34,7 +34,7 @@ public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain
     final HttpServletRequest request = (HttpServletRequest) req;
     final HttpServletResponse response = (HttpServletResponse) resp;
     
-    if("GET".equals(request.getMethod())) {
+    if("GET".equals(request.getMethod()) && !request.getRequestURI().endsWith("xml")) {
       response.setHeader("Cache-Control", "no-cache");
     }
     

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/ProcessInstanceRestServiceImpl.java
Patch:
@@ -237,6 +237,7 @@ public BatchDto setRetriesByProcessHistoricQueryBased(SetJobRetriesByProcessDto
       ManagementService managementService = getProcessEngine().getManagementService();
       Batch batch = managementService.setJobRetriesAsync(
         processInstanceIds,
+        (ProcessInstanceQuery) null,
         setJobRetriesDto.getRetries());
 
       return BatchDto.fromBatch(batch);

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/handler/DbHistoryEventHandler.java
Patch:
@@ -110,6 +110,7 @@ protected void insertHistoricVariableUpdateEntity(HistoricVariableUpdateEventEnt
       HistoricVariableInstanceEntity historicVariableInstanceEntity = dbEntityManager.selectById(HistoricVariableInstanceEntity.class, historyEvent.getVariableInstanceId());
       if(historicVariableInstanceEntity != null) {
         historicVariableInstanceEntity.updateFromEvent(historyEvent);
+        historicVariableInstanceEntity.setState(HistoricVariableInstance.STATE_CREATED);
 
       } else {
         // #CAM-1344 / #SUPPORT-688

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -301,7 +301,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     databaseSpecificLimitAfterStatements.put(MSSQL, databaseSpecificInnerLimitAfterStatements.get(MSSQL) + " ORDER BY SUB.rnk");
     databaseSpecificLimitBetweenStatements.put(MSSQL, ", row_number() over (ORDER BY ${internalOrderBy}) rnk FROM ( select distinct RES.* ");
     databaseSpecificLimitBetweenFilterStatements.put(MSSQL, "");
-    databaseSpecificOrderByStatements.put(MSSQL, defaultOrderBy);
+    databaseSpecificOrderByStatements.put(MSSQL, "");
     databaseSpecificLimitBeforeNativeQueryStatements.put(MSSQL, "SELECT SUB.* FROM ( select RES.* , row_number() over (ORDER BY ${internalOrderBy}) rnk FROM (");
     databaseSpecificDistinct.put(MSSQL, "");
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/UpdateProcessInstancesSuspendStateTest.java
Patch:
@@ -223,6 +223,7 @@ public void testBatchSuspensionByHistoricProcessInstanceQuery() {
   @Test
   @Deployment(resources = {"org/camunda/bpm/engine/test/api/externaltask/oneExternalTaskProcess.bpmn20.xml",
     "org/camunda/bpm/engine/test/api/externaltask/twoExternalTaskProcess.bpmn20.xml"})
+  @RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_ACTIVITY)
   public void testBatchActivatationByHistoricProcessInstanceQuery() {
     // given
     ProcessInstance processInstance1 = runtimeService.startProcessInstanceByKey("oneExternalTaskProcess");

File: engine/src/main/java/org/camunda/bpm/engine/impl/AbstractNativeQuery.java
Patch:
@@ -118,7 +118,7 @@ public Object execute(CommandContext commandContext) {
       parameterMap.put("resultType", "LIST_PAGE");
       parameterMap.put("firstResult", firstResult);
       parameterMap.put("maxResults", maxResults);
-      parameterMap.put("orderBy", "RES.ID_ asc");
+      parameterMap.put("internalOrderBy", "RES.ID_ asc");
 
       int firstRow = firstResult + 1;
       parameterMap.put("firstRow", firstRow);

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -301,7 +301,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     databaseSpecificLimitAfterStatements.put(MSSQL, databaseSpecificInnerLimitAfterStatements.get(MSSQL) + " ORDER BY SUB.rnk");
     databaseSpecificLimitBetweenStatements.put(MSSQL, ", row_number() over (ORDER BY ${orderBy}) rnk FROM ( select distinct RES.* ");
     databaseSpecificLimitBetweenFilterStatements.put(MSSQL, "");
-    databaseSpecificOrderByStatements.put(MSSQL, "");
+    databaseSpecificOrderByStatements.put(MSSQL, defaultOrderBy);
     databaseSpecificLimitBeforeNativeQueryStatements.put(MSSQL, "SELECT SUB.* FROM ( select RES.* , row_number() over (ORDER BY ${orderBy}) rnk FROM (");
     databaseSpecificDistinct.put(MSSQL, "");
 

File: engine/src/main/java/org/camunda/bpm/engine/history/HistoricVariableInstance.java
Patch:
@@ -23,6 +23,9 @@
  */
 public interface HistoricVariableInstance {
 
+  String STATE_CREATED = "CREATED";
+  String STATE_DELETED = "DELETED";
+
   /**
    * @return the Id of this variable instance
    */

File: engine/src/main/java/org/camunda/bpm/engine/history/HistoricVariableInstanceQuery.java
Patch:
@@ -96,6 +96,9 @@ public interface HistoricVariableInstanceQuery extends Query<HistoricVariableIns
    */
   HistoricVariableInstanceQuery disableCustomObjectDeserialization();
 
+  /**
+   * Include variables that has been already deleted during the execution
+   */
   HistoricVariableInstanceQuery includeDeleted();
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/handler/DbHistoryEventHandler.java
Patch:
@@ -14,6 +14,7 @@
 
 import java.util.List;
 
+import org.camunda.bpm.engine.history.HistoricVariableInstance;
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.db.entitymanager.DbEntityManager;
 import org.camunda.bpm.engine.impl.history.event.HistoricDecisionEvaluationEvent;
@@ -122,7 +123,7 @@ protected void insertHistoricVariableUpdateEntity(HistoricVariableUpdateEventEnt
     } else if(historyEvent.isEventOfType(HistoryEventTypes.VARIABLE_INSTANCE_DELETE)) {
       HistoricVariableInstanceEntity historicVariableInstanceEntity = dbEntityManager.selectById(HistoricVariableInstanceEntity.class, historyEvent.getVariableInstanceId());
       if(historicVariableInstanceEntity != null) {
-        historicVariableInstanceEntity.deleteButRemain();
+        historicVariableInstanceEntity.setState(HistoricVariableInstance.STATE_DELETED);
       }
     }
   }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/history/HistoryRestService.java
Patch:
@@ -85,7 +85,7 @@ public interface HistoryRestService {
   JobDto cleanupAsync(@QueryParam("immediatelyDue") @DefaultValue("true") boolean immediatelyDue);
 
   @GET
-  @Path("/find-cleanup-job")
+  @Path("/cleanup-job")
   @Produces(MediaType.APPLICATION_JSON)
   JobDto findCleanupJob();
 }

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoryRestServiceInteractionTest.java
Patch:
@@ -34,7 +34,7 @@ public class HistoryRestServiceInteractionTest extends AbstractRestServiceTest {
   public static TestContainerRule rule = new TestContainerRule();
   
   protected static final String HISTORY_CLEANUP_ASYNC_URL = TEST_RESOURCE_ROOT_PATH + "/history/cleanup";
-  protected static final String FIND_HISTORY_CLEANUP_JOB_URL = TEST_RESOURCE_ROOT_PATH + "/history/find-cleanup-job";
+  protected static final String FIND_HISTORY_CLEANUP_JOB_URL = TEST_RESOURCE_ROOT_PATH + "/history/cleanup-job";
 
   private HistoryService historyServiceMock;
 

File: engine/src/main/java/org/camunda/bpm/engine/management/Metrics.java
Patch:
@@ -57,7 +57,7 @@ public class Metrics {
   public final static String EXECUTED_DECISION_ELEMENTS = "executed-decision-elements";
 
   /**
-   * Number of instances removed by history coleanup.
+   * Number of instances removed by history cleanup.
    */
   public final static String HISTORY_CLEANUP_REMOVED_PROCESS_INSTANCES = "history-cleanup-removed-process-instances";
   public final static String HISTORY_CLEANUP_REMOVED_CASE_INSTANCES = "history-cleanup-removed-case-instances";

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricVariableInstanceTest.java
Patch:
@@ -937,6 +937,7 @@ public void FAILING_testImplicitVariableUpdateAndReplacementInOneTransaction() {
     }
   }
 
+  @RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_FULL)
   public void testImplicitVariableUpdateAndScopeDestroyedInOneTransaction() {
     deployment(Bpmn.createExecutableProcess("process1")
       .startEvent("start")

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/historycleanup/HistoryCleanupBatch.java
Patch:
@@ -57,15 +57,15 @@ public void performCleanup() {
     final CommandContext commandContext = Context.getCommandContext();
     if (historicProcessInstanceIds.size() > 0) {
       commandContext.getHistoricProcessInstanceManager().deleteHistoricProcessInstanceByIds(historicProcessInstanceIds);
-      recordValue(Metrics.HISTORY_REMOVED_PROCESS_INSTANCES, historicProcessInstanceIds.size());
+      recordValue(Metrics.HISTORY_CLEANUP_REMOVED_PROCESS_INSTANCES, historicProcessInstanceIds.size());
     }
     if (historicDecisionInstanceIds.size() > 0) {
       commandContext.getHistoricDecisionInstanceManager().deleteHistoricDecisionInstanceByIds(historicDecisionInstanceIds);
-      recordValue(Metrics.HISTORY_REMOVED_DECISION_INSTANCES, historicDecisionInstanceIds.size());
+      recordValue(Metrics.HISTORY_CLEANUP_REMOVED_DECISION_INSTANCES, historicDecisionInstanceIds.size());
     }
     if (historicCaseInstanceIds.size() > 0){
       commandContext.getHistoricCaseInstanceManager().deleteHistoricCaseInstancesByIds(historicCaseInstanceIds);
-      recordValue(Metrics.HISTORY_REMOVED_CASE_INSTANCES, historicCaseInstanceIds.size());
+      recordValue(Metrics.HISTORY_CLEANUP_REMOVED_CASE_INSTANCES, historicCaseInstanceIds.size());
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/management/Metrics.java
Patch:
@@ -59,7 +59,7 @@ public class Metrics {
   /**
    * Number of instances removed by history coleanup.
    */
-  public final static String HISTORY_REMOVED_PROCESS_INSTANCES = "history-removed-process-instances";
-  public final static String HISTORY_REMOVED_CASE_INSTANCES = "history-removed-case-instances";
-  public final static String HISTORY_REMOVED_DECISION_INSTANCES = "history-removed-decision-instances";
+  public final static String HISTORY_CLEANUP_REMOVED_PROCESS_INSTANCES = "history-cleanup-removed-process-instances";
+  public final static String HISTORY_CLEANUP_REMOVED_CASE_INSTANCES = "history-cleanup-removed-case-instances";
+  public final static String HISTORY_CLEANUP_REMOVED_DECISION_INSTANCES = "history-cleanup-removed-decision-instances";
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/HistoryCleanupTest.java
Patch:
@@ -211,9 +211,9 @@ public void testHistoryCleanupMetrics() {
     managementService.executeJob(jobId);
 
     //then
-    final long removedProcessInstances = managementService.createMetricsQuery().name(Metrics.HISTORY_REMOVED_PROCESS_INSTANCES).sum();
-    final long removedDecisionInstances = managementService.createMetricsQuery().name(Metrics.HISTORY_REMOVED_CASE_INSTANCES).sum();
-    final long removedCaseInstances = managementService.createMetricsQuery().name(Metrics.HISTORY_REMOVED_DECISION_INSTANCES).sum();
+    final long removedProcessInstances = managementService.createMetricsQuery().name(Metrics.HISTORY_CLEANUP_REMOVED_PROCESS_INSTANCES).sum();
+    final long removedDecisionInstances = managementService.createMetricsQuery().name(Metrics.HISTORY_CLEANUP_REMOVED_CASE_INSTANCES).sum();
+    final long removedCaseInstances = managementService.createMetricsQuery().name(Metrics.HISTORY_CLEANUP_REMOVED_DECISION_INSTANCES).sum();
 
     assertTrue(removedProcessInstances > 0);
     assertTrue(removedDecisionInstances > 0);

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/builder/AbstractBaseElementBuilder.java
Patch:
@@ -271,6 +271,9 @@ public BpmnShape createBpmnShape(FlowNode node) {
       } else if (node instanceof Gateway) {
         nodeBounds.setWidth(50);
         nodeBounds.setHeight(50);
+        if (node instanceof ExclusiveGateway) {
+          bpmnShape.setMarkerVisible(true);
+        }
       }
 
       nodeBounds.setX(0);

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/builder/AbstractFlowNodeBuilder.java
Patch:
@@ -115,9 +115,6 @@ protected <T extends FlowNode> T createTarget(Class<T> typeClass, String identif
     T target = createSibling(typeClass, identifier);
 
     BpmnShape targetBpmnShape = createBpmnShape(target);
-    if (target instanceof ExclusiveGateway) {
-      targetBpmnShape.setMarkerVisible(true);
-    }
     setCoordinates(targetBpmnShape);
     connectTarget(target);
     resizeSubProcess(targetBpmnShape);

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/builder/di/DiGeneratorForFlowNodesTest.java
Patch:
@@ -508,6 +508,8 @@ public void shouldGenerateShapeForExclusiveGateway() {
     assertEquals(3, allShapes.size());
 
     assertGatewayShapeProperties("or");
+    BpmnShape bpmnShape = findBpmnShape("or");
+    assertTrue(bpmnShape.isMarkerVisible());
   }
 
   protected void assertTaskShapeProperties(String id) {
@@ -525,9 +527,6 @@ protected void assertEventShapeProperties(String id) {
   protected void assertGatewayShapeProperties(String id) {
     BpmnShape bpmnShapeGateway = findBpmnShape(id);
     assertNotNull(bpmnShapeGateway);
-    if (id.equals("or")) {
-      assertTrue(bpmnShapeGateway.isMarkerVisible());
-    }
     assertGatewaySize(bpmnShapeGateway);
   }
 

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/builder/AbstractFlowNodeBuilder.java
Patch:
@@ -115,6 +115,9 @@ protected <T extends FlowNode> T createTarget(Class<T> typeClass, String identif
     T target = createSibling(typeClass, identifier);
 
     BpmnShape targetBpmnShape = createBpmnShape(target);
+    if (target instanceof ExclusiveGateway) {
+      targetBpmnShape.setMarkerVisible(true);
+    }
     setCoordinates(targetBpmnShape);
     connectTarget(target);
     resizeSubProcess(targetBpmnShape);

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/builder/di/DiGeneratorForFlowNodesTest.java
Patch:
@@ -525,6 +525,9 @@ protected void assertEventShapeProperties(String id) {
   protected void assertGatewayShapeProperties(String id) {
     BpmnShape bpmnShapeGateway = findBpmnShape(id);
     assertNotNull(bpmnShapeGateway);
+    if (id.equals("or")) {
+      assertTrue(bpmnShapeGateway.isMarkerVisible());
+    }
     assertGatewaySize(bpmnShapeGateway);
   }
 

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/builder/AbstractBoundaryEventBuilder.java
Patch:
@@ -148,7 +148,7 @@ protected void setCoordinates(BpmnShape shape) {
   }
 
   @Override
-  protected void setWaypoints(BpmnEdge edge, FlowNode edgeSource, FlowNode edgeTarget) {
+  protected void setWaypointsWithSourceAndTarget(BpmnEdge edge, FlowNode edgeSource, FlowNode edgeTarget) {
     BpmnShape source = findBpmnShape(edgeSource);
     BpmnShape target = findBpmnShape(edgeTarget);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/PvmExecutionImpl.java
Patch:
@@ -257,6 +257,9 @@ public void destroy() {
     setScope(false);
   }
 
+  public void removeAllTasks() {
+  }
+
   protected void removeEventScopes() {
     List<PvmExecutionImpl> childExecutions = new ArrayList<PvmExecutionImpl>(getEventScopeExecutions());
     for (PvmExecutionImpl childExecution : childExecutions) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationDeleteCascadeFireActivityEnd.java
Patch:
@@ -60,6 +60,7 @@ protected void eventNotificationsCompleted(PvmExecutionImpl execution) {
     if (execution.isScope()
         && (executesNonScopeActivity(execution) || isAsyncBeforeActivity(execution))
         && !CompensationBehavior.executesNonScopeCompensationHandler(execution))  {
+      execution.removeAllTasks();
       // case this is a scope execution and the activity is not a scope
       execution.leaveActivityInstance();
       execution.setActivity(getFlowScopeActivity(activity));

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/EverLivingJobEntity.java
Patch:
@@ -50,7 +50,7 @@ public void init(CommandContext commandContext) {
     }
 
     //cancel the retries -> will resolve job incident if present
-    setRetries(DEFAULT_RETRIES);
+    setRetries(commandContext.getProcessEngineConfiguration().getDefaultNumberOfRetries());
 
     //delete the job's exception byte array and exception message
     String exceptionByteArrayIdToDelete =null;

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/HistoryCleanupTest.java
Patch:
@@ -90,6 +90,7 @@ public class HistoryCleanupTest {
     public ProcessEngineConfiguration configureEngine(ProcessEngineConfigurationImpl configuration) {
       configuration.setHistoryCleanupBatchSize(20);
       configuration.setHistoryCleanupBatchThreshold(10);
+      configuration.setDefaultNumberOfRetries(5);
       return configuration;
     }
   };
@@ -503,12 +504,14 @@ public void testHistoryCleanupJobResolveIncident() {
     String jobId = historyService.cleanUpHistoryAsync(true).getId();
     imitateFailedJob(jobId);
 
+    assertEquals(5, processEngineConfiguration.getDefaultNumberOfRetries());
     //when
     //call to cleanup history means that incident was resolved
     jobId = historyService.cleanUpHistoryAsync(true).getId();
 
     //then
     JobEntity jobEntity = getJobEntity(jobId);
+    assertEquals(5, jobEntity.getRetries());
     assertEquals(null, jobEntity.getExceptionByteArrayId());
     assertEquals(null, jobEntity.getExceptionMessage());
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/RepositoryServiceImpl.java
Patch:
@@ -95,7 +95,7 @@ public ProcessApplicationDeploymentBuilder createDeployment(ProcessApplicationRe
     return new ProcessApplicationDeploymentBuilderImpl(this, processApplication);
   }
 
-  public DeploymentWithDefinitions deployAndReturnDefinitions(DeploymentBuilderImpl deploymentBuilder) {
+  public DeploymentWithDefinitions deployWithResult(DeploymentBuilderImpl deploymentBuilder) {
     return commandExecutor.execute(new DeployCmd(deploymentBuilder));
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/repository/DeploymentBuilderImpl.java
Patch:
@@ -263,7 +263,7 @@ public Deployment deploy() {
   }
 
   public DeploymentWithDefinitions deployWithResult() {
-    return repositoryService.deployAndReturnDefinitions(this);
+    return repositoryService.deployWithResult(this);
   }
 
 

File: engine/src/main/java/org/camunda/bpm/engine/history/HistoricVariableInstanceQuery.java
Patch:
@@ -40,6 +40,9 @@ public interface HistoricVariableInstanceQuery extends Query<HistoricVariableIns
   /** Only select historic process variables where the given variable name is like. */
   HistoricVariableInstanceQuery variableNameLike(String variableNameLike);
 
+  /** Only select historic process variables which match one of the given variable types. */
+  HistoricVariableInstanceQuery variableTypeIn(String... variableTypes);
+
   /**
    * only select historic process variables with the given name and value
    */

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/RuntimeServiceTest.java
Patch:
@@ -2372,7 +2372,7 @@ public void testRollbackAfterSubProcess() {
 
   }
 
-  public void FAILING_testGetActivityInstanceForCompletedInstanceInDelegate() {
+  public void testGetActivityInstanceForCompletedInstanceInDelegate() {
     // given
     BpmnModelInstance deletingProcess = Bpmn.createExecutableProcess("process1")
         .startEvent()
@@ -2402,7 +2402,7 @@ public void FAILING_testGetActivityInstanceForCompletedInstanceInDelegate() {
     // then
     boolean activityInstanceRetrieved =
         (Boolean) runtimeService.getVariable(deletingInstance.getId(), "activityInstancePresent");
-    assertTrue(activityInstanceRetrieved);
+    assertFalse(activityInstanceRetrieved);
   }
 
   public static class DeleteInstanceDelegate implements JavaDelegate {

File: engine/src/main/java/org/camunda/bpm/engine/ExternalTaskService.java
Patch:
@@ -263,11 +263,11 @@ public interface ExternalTaskService {
    * @param externalTaskQuery a query which selects the external tasks to set the retries for.
    * @throws NotFoundException if no external task with one of the given id exists
    * @throws BadUserRequestException if the ids are null or the number of retries is negative 
-   * @throws AuthorizationException thrown if the current user does not possess any of the following permissions:
+   * @throws AuthorizationException thrown if the current user has no {@link Permissions#CREATE} permission on {@link Resources#BATCH}
+   *    or does not possess any of the following permissions:
    *   <ul>
    *     <li>{@link Permissions#UPDATE} on {@link Resources#PROCESS_INSTANCE}</li>
    *     <li>{@link Permissions#UPDATE_INSTANCE} on {@link Resources#PROCESS_DEFINITION}</li>
-   *     <li>{@link Permissions#CREATE} on {@link Resources#BATCH}</li>
    *   </ul>
    */
   public Batch setRetriesAsync(List<String> externalTaskIds, ExternalTaskQuery externalTaskQuery, int retries);

File: engine-spring/src/test/java/org/camunda/bpm/engine/spring/test/transaction/FailDeploymentCommandInterceptor.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.camunda.bpm.engine.spring.test.transaction;
 
+import org.camunda.bpm.engine.impl.cmd.DeleteDeploymentCmd;
 import org.camunda.bpm.engine.impl.cmd.DeployCmd;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandInterceptor;

File: engine-spring/src/test/java/org/camunda/bpm/engine/spring/test/transaction/SpringTransactionIntegrationDeploymentFailTest.java
Patch:
@@ -22,8 +22,8 @@
  * @author Svetlana Dorokhova
  */
 
-@ContextConfiguration("classpath:org/camunda/bpm/engine/spring/test/transaction/SpringTransactionIntegrationCommandFailTest-context.xml")
-public class SpringTransactionIntegrationCommandFailTest extends SpringProcessEngineTestCase {
+@ContextConfiguration("classpath:org/camunda/bpm/engine/spring/test/transaction/SpringTransactionIntegrationDeploymentFailTest-context.xml")
+public class SpringTransactionIntegrationDeploymentFailTest extends SpringProcessEngineTestCase {
 
   @Override
   protected void tearDown() throws Exception {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeleteDeploymentCmd.java
Patch:
@@ -76,7 +76,8 @@ public Void execute(final CommandContext commandContext) {
       .getProcessApplicationManager()
       .getProcessApplicationForDeployment(deploymentId);
 
-    DeleteDeploymentFailListener listener = new DeleteDeploymentFailListener(deploymentId, processApplicationReference);
+    DeleteDeploymentFailListener listener = new DeleteDeploymentFailListener(deploymentId, processApplicationReference,
+      Context.getProcessEngineConfiguration().getCommandExecutorTxRequiresNew());
 
     try {
       commandContext.runWithoutAuthorization(new Callable<Void>() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/CaseServiceImpl.java
Patch:
@@ -24,7 +24,6 @@
 import org.camunda.bpm.engine.impl.cmmn.cmd.GetCaseExecutionVariableCmd;
 import org.camunda.bpm.engine.impl.cmmn.cmd.GetCaseExecutionVariableTypedCmd;
 import org.camunda.bpm.engine.impl.cmmn.cmd.GetCaseExecutionVariablesCmd;
-import org.camunda.bpm.engine.impl.cmmn.cmd.UpdateCaseDefinitionHistoryTimeToLiveCmd;
 import org.camunda.bpm.engine.impl.cmmn.entity.runtime.CaseExecutionQueryImpl;
 import org.camunda.bpm.engine.impl.cmmn.entity.runtime.CaseInstanceQueryImpl;
 import org.camunda.bpm.engine.runtime.CaseExecutionCommandBuilder;

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/EnginePersistenceLogger.java
Patch:
@@ -625,7 +625,7 @@ public void noHistoryCleanupLockPropertyFound() {
 
   public void logUpdateUnrelatedCaseDefinitionEntity(String thisKey, String thatKey, String thisDeploymentId, String thatDeploymentId) {
     logDebug(
-      "044",
+      "079",
       "Cannot update entity from an unrelated case definition: this key '{}', that key '{}', this deploymentId '{}', that deploymentId '{}'",
       thisKey,
       thatKey,
@@ -636,7 +636,7 @@ public void logUpdateUnrelatedCaseDefinitionEntity(String thisKey, String thatKe
 
   public void logUpdateUnrelatedDecisionDefinitionEntity(String thisKey, String thatKey, String thisDeploymentId, String thatDeploymentId) {
     logDebug(
-        "079",
+        "080",
         "Cannot update entity from an unrelated decision definition: this key '{}', that key '{}', this deploymentId '{}', that deploymentId '{}'",
         thisKey,
         thatKey,

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/CommandLogger.java
Patch:
@@ -248,8 +248,8 @@ public ProcessEngineException processDefinitionOfInstanceDoesNotMatchModificatio
     ));
   }
 
-  public void warnHistoryCleanupWrongConfiguration() {
-    logWarn("038", "History cleanup won't be scheduled. Either configure batch window or call it with immediatelyDue = true.");
+  public void debugHistoryCleanupWrongConfiguration() {
+    logDebug("038", "History cleanup won't be scheduled. Either configure batch window or call it with immediatelyDue = true.");
   }
 
   public ProcessEngineException processDefinitionOfHistoricInstanceDoesNotMatchTheGivenOne(HistoricProcessInstance historicProcessInstance, String processDefinitionId) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/HistoryCleanupCmd.java
Patch:
@@ -51,7 +51,7 @@ public Job execute(CommandContext commandContext) {
 
     //validate
     if (!willBeScheduled(commandContext)) {
-      LOG.warnHistoryCleanupWrongConfiguration();
+      LOG.debugHistoryCleanupWrongConfiguration();
     }
 
     //find job instance

File: engine/src/main/java/org/camunda/bpm/engine/impl/application/ProcessApplicationManager.java
Patch:
@@ -109,9 +109,11 @@ protected void removeProcessApplicationRegistration(final Set<String> deployment
 
   protected void createJobExecutorRegistrations(Set<String> deploymentIds) {
     try {
+      final DeploymentFailListener deploymentFailListener = new DeploymentFailListener(deploymentIds,
+        Context.getProcessEngineConfiguration().getCommandExecutorTxRequiresNew());
       Context.getCommandContext()
         .getTransactionContext()
-        .addTransactionListener(TransactionState.ROLLED_BACK, new DeploymentFailListener(deploymentIds));
+        .addTransactionListener(TransactionState.ROLLED_BACK, deploymentFailListener);
 
       Set<String> registeredDeployments = Context.getProcessEngineConfiguration().getRegisteredDeployments();
       registeredDeployments.addAll(deploymentIds);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeployCmd.java
Patch:
@@ -638,7 +638,8 @@ protected void registerWithJobExecutor(CommandContext commandContext, Deployment
       new RegisterDeploymentCmd(deployment.getId()).execute(commandContext);
 
     } finally {
-      DeploymentFailListener listener = new DeploymentFailListener(deployment.getId());
+      DeploymentFailListener listener = new DeploymentFailListener(deployment.getId(),
+        Context.getProcessEngineConfiguration().getCommandExecutorTxRequiresNew());
 
       try {
         commandContext.getTransactionContext().addTransactionListener(TransactionState.ROLLED_BACK, listener);

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ModificationRestServiceInteractionTest.java
Patch:
@@ -125,7 +125,7 @@ public void executeModificationWithNullProcessDefinitionIdAsync() {
     .when()
       .post(EXECUTE_MODIFICATION_ASYNC_URL);
 
-    verify(runtimeServiceMock).createModification("processDefinitionId");
+    verify(runtimeServiceMock).createModification(null);
     verify(modificationBuilderMock).processInstanceIds(eq(Arrays.asList("100", "20")));
     verify(modificationBuilderMock).cancelAllForActivity("activityId");
     verify(modificationBuilderMock).startBeforeActivity("activityId");
@@ -163,7 +163,7 @@ public void executeModificationWithNullProcessDefinitionIdSync() {
     .when()
       .post(EXECUTE_MODIFICATION_SYNC_URL);
 
-    verify(runtimeServiceMock).createModification("processDefinitionId");
+    verify(runtimeServiceMock).createModification(null);
     verify(modificationBuilderMock).processInstanceIds(eq(Arrays.asList("100", "20")));
     verify(modificationBuilderMock).cancelAllForActivity("activityId");
     verify(modificationBuilderMock).startBeforeActivity("activityId");

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/BulkHistoryDeleteTest.java
Patch:
@@ -384,10 +384,9 @@ public void testCleanupHistoryDecisionData() {
     final List<String> historicDecisionOutputIds = collectHistoricDecisionOutputIds(historicDecisionInstances);
 
     //when
-    historyService.deleteHistoricProcessInstancesBulk(ids);
+    historyService.deleteHistoricDecisionInstancesBulk(extractIds(historicDecisionInstances));
 
     //then
-    assertEquals(0, historyService.createHistoricProcessInstanceQuery().processDefinitionKey("testProcess").count());
     assertEquals(0, historyService.createHistoricDecisionInstanceQuery().count());
 
     //check that decision inputs and outputs were removed

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/deploy/cache/ModelInstanceCache.java
Patch:
@@ -17,6 +17,7 @@
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.db.EnginePersistenceLogger;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
+import org.camunda.bpm.engine.impl.repository.ResourceDefinitionEntity;
 import org.camunda.bpm.engine.repository.ResourceDefinition;
 import org.camunda.bpm.model.xml.ModelInstance;
 import org.camunda.commons.utils.cache.Cache;
@@ -28,7 +29,7 @@
 /**
  * @author: Johannes Heinemann
  */
-public abstract class ModelInstanceCache<InstanceType extends ModelInstance, DefinitionType extends ResourceDefinition> {
+public abstract class ModelInstanceCache<InstanceType extends ModelInstance, DefinitionType extends ResourceDefinitionEntity> {
 
   protected static final EnginePersistenceLogger LOG = ProcessEngineLogger.PERSISTENCE_LOGGER;
 

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/DeploymentRestServiceImpl.java
Patch:
@@ -91,7 +91,7 @@ public DeploymentWithDefinitionsDto createDeployment(UriInfo uriInfo, MultipartF
     DeploymentBuilder deploymentBuilder = extractDeploymentInformation(payload);
 
     if(!deploymentBuilder.getResourceNames().isEmpty()) {
-      DeploymentWithDefinitions deployment = deploymentBuilder.deployAndReturnDefinitions();
+      DeploymentWithDefinitions deployment = deploymentBuilder.deployWithResult();
 
       DeploymentWithDefinitionsDto deploymentDto = DeploymentWithDefinitionsDto.fromDeployment(deployment);
 

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/impl/DeploymentResourceImpl.java
Patch:
@@ -106,7 +106,7 @@ protected DeploymentWithDefinitions tryToRedeploy(RedeploymentDto redeployment)
       builder.addDeploymentResources(deploymentId);
     }
 
-    return builder.deployAndReturnDefinitions();
+    return builder.deployWithResult();
   }
 
   protected DeploymentBuilder addRedeploymentResources(DeploymentBuilder builder, RedeploymentDto redeployment) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/repository/DeploymentBuilderImpl.java
Patch:
@@ -259,10 +259,10 @@ public DeploymentBuilder tenantId(String tenantId) {
   }
 
   public Deployment deploy() {
-    return deployAndReturnDefinitions();
+    return deployWithResult();
   }
 
-  public DeploymentWithDefinitions deployAndReturnDefinitions() {
+  public DeploymentWithDefinitions deployWithResult() {
     return repositoryService.deployAndReturnDefinitions(this);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/repository/DeploymentBuilder.java
Patch:
@@ -196,7 +196,7 @@ public interface DeploymentBuilder {
    *
    *
    * <p> The returned {@link Deployment} instance has no information about the definitions, which are deployed
-   * with that deployment. To access this information you can use the {@link #deployAndReturnDefinitions()} method.
+   * with that deployment. To access this information you can use the {@link #deployWithResult()} method.
    * This method will return an instance of {@link DeploymentWithDefinitions}, which contains the information
    * about the successful deployed definitions.
    * </p>
@@ -240,7 +240,7 @@ public interface DeploymentBuilder {
    *   </ul>
    * @return the created deployment, contains the deployed definitions
    */
-  DeploymentWithDefinitions deployAndReturnDefinitions();
+  DeploymentWithDefinitions deployWithResult();
 
   /**
    *  @return the names of the resources which were added to this builder.

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/deployment/BpmnDeploymentTest.java
Patch:
@@ -381,7 +381,7 @@ public void testDeployAndGetProcessDefinition() throws Exception {
 
     // when process model is deployed
     DeploymentWithDefinitions deployment = repositoryService.createDeployment()
-      .addModelInstance("foo.bpmn", modelInstance).deployAndReturnDefinitions();
+      .addModelInstance("foo.bpmn", modelInstance).deployWithResult();
     deploymentIds.add(deployment.getId());
 
     // then deployment contains deployed process definitions
@@ -405,7 +405,7 @@ public void testDeployNonExecutableProcess() throws Exception {
 
     // when process model is deployed
     DeploymentWithDefinitions deployment = repositoryService.createDeployment()
-      .addModelInstance("foo.bpmn", modelInstance).deployAndReturnDefinitions();
+      .addModelInstance("foo.bpmn", modelInstance).deployWithResult();
     deploymentIds.add(deployment.getId());
 
     // then deployment contains no deployed process definition

File: engine/src/test/java/org/camunda/bpm/engine/test/cmmn/deployment/CmmnDeployerTest.java
Patch:
@@ -173,7 +173,7 @@ public void testDeployAndGetCaseDefinition() throws Exception {
 
     // when case model is deployed
     DeploymentWithDefinitions deployment = repositoryService.createDeployment()
-      .addModelInstance("foo.cmmn", modelInstance).deployAndReturnDefinitions();
+      .addModelInstance("foo.cmmn", modelInstance).deployWithResult();
     deploymentIds.add(deployment.getId());
 
     // then deployment contains deployed case definition
@@ -198,7 +198,7 @@ public void testDeployEmptyCaseDefinition() throws Exception {
 
     // when case model is deployed
     DeploymentWithDefinitions deployment = repositoryService.createDeployment()
-      .addModelInstance("foo.cmmn", modelInstance).deployAndReturnDefinitions();
+      .addModelInstance("foo.cmmn", modelInstance).deployWithResult();
     deploymentIds.add(deployment.getId());
 
     // then no case definition is deployed

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/deploy/DeploymentTest.java
Patch:
@@ -43,7 +43,7 @@ public void shouldDeleteDeployment() {
      DeploymentWithDefinitions deployment = engineRule.getRepositoryService()
          .createDeployment()
          .addModelInstance("foo.bpmn", instance)
-         .deployAndReturnDefinitions();
+         .deployWithResult();
 
      engineRule.getRepositoryService().deleteDeployment(deployment.getId(), true);
 

File: engine/src/test/java/org/camunda/bpm/engine/test/util/ProcessEngineTestRule.java
Patch:
@@ -101,7 +101,7 @@ public DeploymentWithDefinitions deploy(String... resources) {
   }
 
   public DeploymentWithDefinitions deploy(DeploymentBuilder deploymentBuilder) {
-    DeploymentWithDefinitions deployment = deploymentBuilder.deployAndReturnDefinitions();
+    DeploymentWithDefinitions deployment = deploymentBuilder.deployWithResult();
 
     processEngineRule.manageDeployment(deployment);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/multitenancy/TenantCommandChecker.java
Patch:
@@ -322,7 +322,7 @@ public void checkReadCaseDefinition(CaseDefinition caseDefinition) {
 
   public void checkUpdateCaseDefinition(CaseDefinition caseDefinition) {
     if (caseDefinition != null && !getTenantManager().isAuthenticatedTenant(caseDefinition.getTenantId())) {
-      throw LOG.exceptionCommandWithUnauthorizedTenant("get the case definition '" + caseDefinition.getId() + "'");
+      throw LOG.exceptionCommandWithUnauthorizedTenant("update the case definition '" + caseDefinition.getId() + "'");
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/cmd/UpdateCaseDefinitionHistoryTimeToLiveCmd.java
Patch:
@@ -34,7 +34,7 @@ public Void execute(CommandContext commandContext) {
     CaseDefinitionEntity caseDefinitionEntity = commandContext.getCaseDefinitionManager().findLatestDefinitionById(caseDefinitionId);
 
     for (CommandChecker checker : commandContext.getProcessEngineConfiguration().getCommandCheckers()) {
-      checker.checkReadCaseDefinition(caseDefinitionEntity);
+      checker.checkUpdateCaseDefinition(caseDefinitionEntity);
     }
 
     caseDefinitionEntity.setHistoryTimeToLive(historyTimeToLive);

File: engine/src/test/java/org/camunda/bpm/engine/test/api/repository/RepositoryServiceTest.java
Patch:
@@ -826,7 +826,7 @@ public void testDecisionDefinitionUpdateTimeToLiveNull() {
     repositoryService.updateDecisionDefinitionHistoryTimeToLive(decisionDefinition.getId(), null);
 
     //then
-    decisionDefinition = findOnlyDecisionDefinition();
+    decisionDefinition = (DecisionDefinitionEntity) repositoryService.getDecisionDefinition(decisionDefinition.getId());
     assertEquals(null, decisionDefinition.getHistoryTimeToLive());
 
   }

File: engine/src/main/java/org/camunda/bpm/engine/ExternalTaskService.java
Patch:
@@ -239,16 +239,16 @@ public interface ExternalTaskService {
    *
    * @param externalTaskIds the ids of the tasks to set the
    * @param retries
-   * @param externalTaskQuery a query which selects the external tasks to set the retries for.
    * @throws NotFoundException if no external task with one of the given id exists
    * @throws BadUserRequestException if the ids are null or the number of retries is negative 
    * @throws AuthorizationException thrown if the current user does not possess any of the following permissions:
    *   <ul>
    *     <li>{@link Permissions#UPDATE} on {@link Resources#PROCESS_INSTANCE}</li>
    *     <li>{@link Permissions#UPDATE_INSTANCE} on {@link Resources#PROCESS_DEFINITION}</li>
+   *      <li>{@link Permissions#CREATE} on {@link Resources#BATCH}</li>
    *   </ul>
    */
-  public void setRetriesSync(List<String> externalTaskIds, ExternalTaskQuery externalTaskQuery, int retries);
+  public void setRetries(List<String> externalTaskIds, int retries);
 
   /**
    * Sets the retries for external tasks asynchronously as batch. The returned batch

File: engine/src/main/java/org/camunda/bpm/engine/impl/ExternalTaskServiceImpl.java
Patch:
@@ -85,8 +85,8 @@ public String getExternalTaskErrorDetails(String externalTaskId) {
     return commandExecutor.execute(new GetExternalTaskErrorDetailsCmd(externalTaskId));
   }
 
-  public void setRetriesSync(List<String> externalTaskIds, ExternalTaskQuery externalTaskQuery, int retries) {
-    commandExecutor.execute(new SetExternalTasksRetriesCmd(externalTaskIds, externalTaskQuery, retries));
+  public void setRetries(List<String> externalTaskIds, int retries) {
+    commandExecutor.execute(new SetExternalTasksRetriesCmd(externalTaskIds, retries));
   }
 
   public Batch setRetriesAsync(List<String> externalTaskIds, int retries) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SetExternalTaskRetriesCmd.java
Patch:
@@ -50,9 +50,9 @@ protected void execute(ExternalTaskEntity externalTask) {
 
       Context.getCommandContext().getOperationLogManager()
           .logProcessInstanceOperation(UserOperationLogEntry.OPERATION_TYPE_SET_EXTERNAL_TASK_RETRIES,
-              null,
-              null,
-              null,
+              externalTask.getProcessInstanceId(),
+              externalTask.getProcessDefinitionId(),
+              externalTask.getProcessDefinitionKey(),
               propertyChanges);
     }
     externalTask.setRetriesAndManageIncidents(retries);

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/externaltask/SetExternalTasksRetriesAuthorizationTest.java
Patch:
@@ -100,7 +100,7 @@ public void testSetRetrieSync() {
     externalTaskIds.add(tasks.get(0).getId());
     externalTaskIds.add(tasks.get(1).getId());
     
-    engineRule.getExternalTaskService().setRetriesSync(externalTaskIds, null, 5);
+    engineRule.getExternalTaskService().setRetries(externalTaskIds, 5);
 
     // then
     if (authRule.assertScenario(scenario)) {

File: engine/src/test/java/org/camunda/bpm/engine/test/util/DbSchemaPrefixTestHelper.java
Patch:
@@ -55,7 +55,6 @@ public void afterPropertiesSet() throws Exception {
             .setDbMetricsReporterActivate(false)
             .setDatabaseSchemaUpdate("NO_CHECK"); // disable auto create/drop schema
     config1.setDatabaseTablePrefix("SCHEMA1.");
-    config1.setDatabaseSchema("SCHEMA1");
     ProcessEngine engine1 = config1.buildProcessEngine();
 
     // create the tables in SCHEMA1

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/ProcessInstanceRestService.java
Patch:
@@ -102,7 +102,7 @@ List<ProcessInstanceDto> queryProcessInstances(ProcessInstanceQueryDto query,
   @Path("/delete-historic-query-based")
   @Consumes(MediaType.APPLICATION_JSON)
   @Produces(MediaType.APPLICATION_JSON)
-  BatchDto deleteAsyncHistoricQueryBased(DeleteHistoricProcessInstancesDto dto);
+  BatchDto deleteAsyncHistoricQueryBased(DeleteProcessInstancesDto dto);
 
   @POST
   @Path("/job-retries")

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/RuntimeServiceTest.java
Patch:
@@ -371,7 +371,7 @@ public void testCascadingDeleteSubprocessInstanceSkipIoMappings() {
 
     ProcessInstance instance2 = runtimeService.createProcessInstanceQuery().superProcessInstanceId(instance.getId()).singleResult();
 
-    // when the process instance is deleted and we do not skip the io mappings
+    // when the process instance is deleted and we do skip the io mappings
     runtimeService.deleteProcessInstance(instance.getId(), "test_purposes", false, true, true);
 
     // then

File: engine/src/main/java/org/camunda/bpm/engine/impl/ProcessEngineImpl.java
Patch:
@@ -121,8 +121,7 @@ public ProcessEngineImpl(ProcessEngineConfigurationImpl processEngineConfigurati
     }
 
     //create history cleanup job
-    String tablePrefix = processEngineConfiguration.getDatabaseTablePrefix();
-    if (managementService.getTableMetaData(tablePrefix + "ACT_RU_JOB") != null) {
+    if (managementService.getTableMetaData("ACT_RU_JOB") != null) {
       processEngineConfiguration.getHistoryService().cleanUpHistoryAsync();
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/SchemaOperationsProcessEngineBuild.java
Patch:
@@ -64,8 +64,7 @@ public Void execute(CommandContext commandContext) {
     checkHistoryCleanupLockExists(entityManager);
 
     //create history cleanup job
-    String tablePrefix = Context.getProcessEngineConfiguration().getDatabaseTablePrefix();
-    if (Context.getProcessEngineConfiguration().getManagementService().getTableMetaData(tablePrefix + "ACT_RU_JOB") != null) {
+    if (Context.getProcessEngineConfiguration().getManagementService().getTableMetaData("ACT_RU_JOB") != null) {
       Context.getProcessEngineConfiguration().getHistoryService().cleanUpHistoryAsync();
     }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/ManagementServiceTest.java
Patch:
@@ -722,9 +722,7 @@ public void testSetJobPriorityToExtremeValues() {
 
   public void testGetTableMetaData() {
 
-    String tablePrefix = processEngineConfiguration.getDatabaseTablePrefix();
-
-    TableMetaData tableMetaData = managementService.getTableMetaData(tablePrefix + "ACT_RU_TASK");
+    TableMetaData tableMetaData = managementService.getTableMetaData("ACT_RU_TASK");
     assertEquals(tableMetaData.getColumnNames().size(), tableMetaData.getColumnTypes().size());
     assertEquals(21, tableMetaData.getColumnNames().size());
 

File: engine/src/test/java/org/camunda/bpm/engine/test/util/DbSchemaPrefixTestHelper.java
Patch:
@@ -55,6 +55,7 @@ public void afterPropertiesSet() throws Exception {
             .setDbMetricsReporterActivate(false)
             .setDatabaseSchemaUpdate("NO_CHECK"); // disable auto create/drop schema
     config1.setDatabaseTablePrefix("SCHEMA1.");
+    config1.setDatabaseSchema("SCHEMA1");
     ProcessEngine engine1 = config1.buildProcessEngine();
 
     // create the tables in SCHEMA1

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/HistoryCleanupOnEngineStartTest.java
Patch:
@@ -51,7 +51,6 @@ public class HistoryCleanupOnEngineStartTest {
   protected ProcessEngineBootstrapRule bootstrapRule = new ProcessEngineBootstrapRule() {
     @Override
     public ProcessEngineConfiguration configureEngine(ProcessEngineConfigurationImpl configuration) {
-      configuration.setHistoryLevel(HistoryLevel.HISTORY_LEVEL_FULL);
       configuration.setHistoryCleanupBatchWindowStartTime("23:00");
       configuration.setHistoryCleanupBatchWindowEndTime("01:00");
       return configuration;

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/HistoryCleanupOnEngineStartTest.java
Patch:
@@ -48,11 +48,12 @@ public class HistoryCleanupOnEngineStartTest {
 
   protected static final String ONE_TASK_PROCESS = "oneTaskProcess";
 
-  protected ProcessEngineBootstrapRule bootstrapRule = new ProcessEngineBootstrapRule(
-      "org/camunda/bpm/engine/test/api/history/historyCleanupConfigurationTest.cfg.xml") {
+  protected ProcessEngineBootstrapRule bootstrapRule = new ProcessEngineBootstrapRule() {
     @Override
     public ProcessEngineConfiguration configureEngine(ProcessEngineConfigurationImpl configuration) {
       configuration.setHistoryLevel(HistoryLevel.HISTORY_LEVEL_FULL);
+      configuration.setHistoryCleanupBatchWindowStartTime("23:00");
+      configuration.setHistoryCleanupBatchWindowEndTime("01:00");
       return configuration;
     }
   };

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/historycleanup/HistoryCleanupJobHandler.java
Patch:
@@ -37,8 +37,7 @@ public void execute(HistoryCleanupJobHandlerConfiguration configuration, Executi
     boolean rescheduled = false;
 
     if (configuration.isImmediatelyDue()
-        || (commandContext.getProcessEngineConfiguration().isEnableAutoHistoryCleanup()
-            && HistoryCleanupHelper.isBatchWindowConfigured(commandContext)
+        || (HistoryCleanupHelper.isBatchWindowConfigured(commandContext)
             && HistoryCleanupHelper.isWithinBatchWindow(ClockUtil.getCurrentTime(), commandContext)) ) {
       //find data to delete
       List<String> processInstanceIds = getProcessInstanceIds(commandContext);

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/ConcurrentHistoryCleanupTest.java
Patch:
@@ -107,6 +107,9 @@ public void testRunTwoHistoryCleanups() throws InterruptedException {
     Job historyCleanupJob = processEngine.getHistoryService().findHistoryCleanupJob();
     assertNotNull(historyCleanupJob);
 
+    assertNull(thread1.getException());
+    assertNull(thread2.getException());
+
   }
 
   protected static class ControllableHistoryCleanupCommand extends ControllableCommand<Void> {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/repository/RepositoryServiceTest.java
Patch:
@@ -27,6 +27,7 @@
 
 import org.camunda.bpm.engine.BadUserRequestException;
 import org.camunda.bpm.engine.ProcessEngine;
+import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.RepositoryService;
 import org.camunda.bpm.engine.RuntimeService;
@@ -62,6 +63,7 @@
 import org.camunda.bpm.engine.runtime.Job;
 import org.camunda.bpm.engine.task.Task;
 import org.camunda.bpm.engine.test.Deployment;
+import org.camunda.bpm.engine.test.RequiredHistoryLevel;
 import org.camunda.bpm.engine.test.bpmn.tasklistener.util.RecorderTaskListener;
 import org.camunda.bpm.engine.test.util.TestExecutionListener;
 import org.camunda.bpm.model.bpmn.Bpmn;
@@ -843,6 +845,7 @@ public void testProcessDefinitionUpdateTimeToLiveNegative() {
 
   }
 
+  @RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_FULL)
   @Deployment(resources = { "org/camunda/bpm/engine/test/api/oneTaskProcess.bpmn20.xml"})
   public void testProcessDefinitionUpdateTimeToLiveUserOperationLog() {
     //given

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/ExecuteJobsRunnable.java
Patch:
@@ -41,7 +41,6 @@ public ExecuteJobsRunnable(List<String> jobIds, ProcessEngineImpl processEngine)
 
   public void run() {
     final JobExecutorContext jobExecutorContext = new JobExecutorContext();
-    jobExecutorContext.setFailedJobListenerMaxRetries(processEngine.getProcessEngineConfiguration().getFailedJobListenerMaxRetries());
 
     final List<String> currentProcessorJobQueue = jobExecutorContext.getCurrentProcessorJobQueue();
     CommandExecutor commandExecutor = processEngine.getProcessEngineConfiguration().getCommandExecutorTxRequired();

File: engine/src/main/java/org/camunda/bpm/engine/history/UserOperationLogEntry.java
Patch:
@@ -97,6 +97,8 @@ public interface UserOperationLogEntry {
   public static String OPERATION_TYPE_SUSPEND_PROCESS_DEFINITION = "SuspendProcessDefinition";
   public static String OPERATION_TYPE_ACTIVATE_PROCESS_DEFINITION = "ActivateProcessDefinition";
 
+  public static String OPERATION_TYPE_UPDATE_HISTORY_TIME_TO_LIVE = "UpdateHistoryTimeToLive";
+
   public static String OPERATION_TYPE_MODIFY_PROCESS_INSTANCE = "ModifyProcessInstance";
 
   public static String OPERATION_TYPE_SUSPEND_JOB = "SuspendJob";

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ProcessDefinitionEntity.java
Patch:
@@ -282,6 +282,7 @@ protected void ensurePreviousProcessDefinitionIdInitialized() {
   public Object getPersistentState() {
     Map<String, Object> persistentState = new HashMap<String, Object>();
     persistentState.put("suspensionState", this.suspensionState);
+    persistentState.put("historyTimeToLive", this.historyTimeToLive);
     return persistentState;
   }
 

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/ProcessDefinitionResource.java
Patch:
@@ -13,7 +13,7 @@
 package org.camunda.bpm.engine.rest.sub.repository;
 
 import org.camunda.bpm.engine.rest.dto.StatisticsResultDto;
-import org.camunda.bpm.engine.rest.dto.TimeToLiveDto;
+import org.camunda.bpm.engine.rest.dto.HistoryTimeToLiveDto;
 import org.camunda.bpm.engine.rest.dto.VariableValueDto;
 import org.camunda.bpm.engine.rest.dto.repository.ProcessDefinitionDiagramDto;
 import org.camunda.bpm.engine.rest.dto.repository.ProcessDefinitionDto;
@@ -83,9 +83,9 @@ Response deleteProcessDefinition(@QueryParam("cascade") boolean cascade,
   void updateSuspensionState(ProcessDefinitionSuspensionStateDto dto);
 
   @PUT
-  @Path("/time-to-live")
+  @Path("/history-time-to-live")
   @Consumes(MediaType.APPLICATION_JSON)
-  void updateTimeToLive(TimeToLiveDto timeToLiveDto);
+  void updateHistoryTimeToLive(HistoryTimeToLiveDto historyTimeToLiveDto);
 
   @GET
   @Path("/form-variables")

File: engine/src/main/java/org/camunda/bpm/engine/RepositoryService.java
Patch:
@@ -434,9 +434,9 @@ public interface RepositoryService {
   /**
    * Updates time to live of process definition. The field is used within history cleanup process.
    * @param processDefinitionId
-   * @param timeToLive
+   * @param historyTimeToLive
    */
-  void updateProcessDefinitionTimeToLive(String processDefinitionId, Integer timeToLive);
+  void updateProcessDefinitionHistoryTimeToLive(String processDefinitionId, Integer historyTimeToLive);
 
   /**
    * Gives access to a deployed process model, e.g., a BPMN 2.0 XML file,

File: engine/src/main/java/org/camunda/bpm/engine/impl/RepositoryServiceImpl.java
Patch:
@@ -43,7 +43,7 @@
 import org.camunda.bpm.engine.impl.cmd.GetDeploymentResourceNamesCmd;
 import org.camunda.bpm.engine.impl.cmd.GetDeploymentResourcesCmd;
 import org.camunda.bpm.engine.impl.cmd.GetIdentityLinksForProcessDefinitionCmd;
-import org.camunda.bpm.engine.impl.cmd.UpdateProcessDefinitionTimeToLiveCmd;
+import org.camunda.bpm.engine.impl.cmd.UpdateProcessDefinitionHistoryTimeToLiveCmd;
 import org.camunda.bpm.engine.impl.cmmn.cmd.GetDeploymentCaseDefinitionCmd;
 import org.camunda.bpm.engine.impl.cmmn.cmd.GetDeploymentCaseDiagramCmd;
 import org.camunda.bpm.engine.impl.cmmn.cmd.GetDeploymentCaseModelCmd;
@@ -239,8 +239,8 @@ public UpdateProcessDefinitionSuspensionStateSelectBuilder updateProcessDefiniti
     return new UpdateProcessDefinitionSuspensionStateBuilderImpl(commandExecutor);
   }
 
-  public void updateProcessDefinitionTimeToLive(String processDefinitionId, Integer timeToLive){
-    commandExecutor.execute(new UpdateProcessDefinitionTimeToLiveCmd(processDefinitionId, timeToLive));
+  public void updateProcessDefinitionHistoryTimeToLive(String processDefinitionId, Integer historyTimeToLive){
+    commandExecutor.execute(new UpdateProcessDefinitionHistoryTimeToLiveCmd(processDefinitionId, historyTimeToLive));
   }
 
   public InputStream getProcessModel(String processDefinitionId) {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/HistoryCleanupTest.java
Patch:
@@ -221,7 +221,7 @@ public void testHistoryCleanupJobNullTTL() {
     assertEquals(1, processDefinitions.size());
     String id = processDefinitions.get(0).getId();
 
-    engineRule.getRepositoryService().updateProcessDefinitionTimeToLive(id, null);
+    engineRule.getRepositoryService().updateProcessDefinitionHistoryTimeToLive(id, null);
 
     prepareData(15);
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/repository/RepositoryServiceTest.java
Patch:
@@ -803,7 +803,7 @@ public void testProcessDefinitionUpdateTimeToLive() {
     ProcessDefinitionEntity processDefinition = findOnlyProcessDefinition();
 
     //when
-    repositoryService.updateProcessDefinitionTimeToLive(processDefinition.getId(), 6);
+    repositoryService.updateProcessDefinitionHistoryTimeToLive(processDefinition.getId(), 6);
 
     //then
     processDefinition = findOnlyProcessDefinition();
@@ -817,7 +817,7 @@ public void testProcessDefinitionUpdateTimeToLiveNull() {
     ProcessDefinitionEntity processDefinition = findOnlyProcessDefinition();
 
     //when
-    repositoryService.updateProcessDefinitionTimeToLive(processDefinition.getId(), null);
+    repositoryService.updateProcessDefinitionHistoryTimeToLive(processDefinition.getId(), null);
 
     //then
     processDefinition = findOnlyProcessDefinition();
@@ -832,7 +832,7 @@ public void testProcessDefinitionUpdateTimeToLiveNegative() {
 
     //when
     try {
-      repositoryService.updateProcessDefinitionTimeToLive(processDefinition.getId(), -1);
+      repositoryService.updateProcessDefinitionHistoryTimeToLive(processDefinition.getId(), -1);
       fail("Exception is expected, that negative velue is not allowed.");
     } catch (BadUserRequestException ex) {
       assertTrue(ex.getMessage().contains("greater than"));

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/repository/ProcessDefinitionDto.java
Patch:
@@ -96,7 +96,7 @@ public static ProcessDefinitionDto fromProcessDefinition(ProcessDefinition defin
     dto.suspended = definition.isSuspended();
     dto.tenantId = definition.getTenantId();
     dto.versionTag = definition.getVersionTag();
-    dto.timeToLive = definition.getTimeToLive();
+    dto.timeToLive = definition.getHistoryTimeToLive();
     return dto;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/HistoryService.java
Patch:
@@ -166,7 +166,7 @@ public interface HistoryService {
 
   /**
    * Schedules history cleanup job at batch window start time. The job will delete historic data for finished processes
-   * taking into account {@link ProcessDefinition#getTimeToLive()} value.
+   * taking into account {@link ProcessDefinition#getHistoryTimeToLive()} value.
    *
    * @throws AuthorizationException
    *          If the user has no {@link Permissions#DELETE_HISTORY} permission on {@link Resources#PROCESS_DEFINITION}
@@ -176,7 +176,7 @@ public interface HistoryService {
 
   /**
    * Schedules history cleanup job. The job will delete historic data for finished processes
-   * taking into account {@link ProcessDefinition#getTimeToLive()} value.
+   * taking into account {@link ProcessDefinition#getHistoryTimeToLive()} value.
    *
    * @param immediatelyDue must be true if cleanup must be scheduled at once, otherwise is will be scheduled according to configured batch window
    * @throws AuthorizationException

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -538,8 +538,8 @@ public ProcessDefinitionEntity parseProcess(Element processElement) {
     processDefinition.setVersionTag(
       processElement.attributeNS(CAMUNDA_BPMN_EXTENSIONS_NS, "versionTag")
     );
-    processDefinition.setTimeToLive(parseIntegerAttribute(processElement, "timeToLive",
-        processElement.attributeNS(CAMUNDA_BPMN_EXTENSIONS_NS, "timeToLive"), false));
+    processDefinition.setHistoryTimeToLive(parseIntegerAttribute(processElement, "historyTimeToLive",
+        processElement.attributeNS(CAMUNDA_BPMN_EXTENSIONS_NS, "historyTimeToLive"), false));
 
     LOG.parsingElement("process", processDefinition.getKey());
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/UpdateProcessDefinitionTimeToLiveCmd.java
Patch:
@@ -41,11 +41,11 @@ public Void execute(CommandContext commandContext) {
 
     ensureNotNull(BadUserRequestException.class, "processDefinitionId", processDefinitionId);
     if (timeToLive != null) {
-      ensureGreaterThanOrEqual(BadUserRequestException.class, "", "timeToLive", timeToLive, 0);
+      ensureGreaterThanOrEqual(BadUserRequestException.class, "", "historyTimeToLive", timeToLive, 0);
     }
 
     ProcessDefinitionEntity processDefinitionEntity = commandContext.getDbEntityManager().selectById(ProcessDefinitionEntity.class, processDefinitionId);
-    processDefinitionEntity.setTimeToLive(timeToLive);
+    processDefinitionEntity.setHistoryTimeToLive(timeToLive);
     commandContext.getProcessDefinitionManager().updateProcessDefinition(processDefinitionEntity);
 
     return null;

File: engine/src/main/java/org/camunda/bpm/engine/repository/ProcessDefinition.java
Patch:
@@ -45,5 +45,5 @@ public interface ProcessDefinition extends ResourceDefinition {
   String getVersionTag();
 
   /** Time to live. Is taken into account in history cleanup. */
-  Integer getTimeToLive();
+  Integer getHistoryTimeToLive();
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/repository/RepositoryServiceTest.java
Patch:
@@ -807,7 +807,7 @@ public void testProcessDefinitionUpdateTimeToLive() {
 
     //then
     processDefinition = findOnlyProcessDefinition();
-    assertEquals(6, processDefinition.getTimeToLive().intValue());
+    assertEquals(6, processDefinition.getHistoryTimeToLive().intValue());
 
   }
 
@@ -821,7 +821,7 @@ public void testProcessDefinitionUpdateTimeToLiveNull() {
 
     //then
     processDefinition = findOnlyProcessDefinition();
-    assertEquals(null, processDefinition.getTimeToLive());
+    assertEquals(null, processDefinition.getHistoryTimeToLive());
 
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricProcessInstanceManagerProcessInstancesForCleanupTest.java
Patch:
@@ -134,7 +134,7 @@ public Object execute(CommandContext commandContext) {
                 .processDefinitionId(historicProcessInstance.getProcessDefinitionId()).list();
             assertEquals(1, processDefinitions.size());
             ProcessDefinitionEntity processDefinition = (ProcessDefinitionEntity) processDefinitions.get(0);
-            assertTrue(historicProcessInstance.getEndTime().before(DateUtils.addDays(ClockUtil.getCurrentTime(), processDefinition.getTimeToLive())));
+            assertTrue(historicProcessInstance.getEndTime().before(DateUtils.addDays(ClockUtil.getCurrentTime(), processDefinition.getHistoryTimeToLive())));
           }
         }
 
@@ -148,7 +148,7 @@ private void updateTimeToLive(CommandContext commandContext, String businessKey,
     List<ProcessDefinition> processDefinitions = engineRule.getRepositoryService().createProcessDefinitionQuery().processDefinitionKey(businessKey).list();
     assertEquals(1, processDefinitions.size());
     ProcessDefinitionEntity processDefinition1 = (ProcessDefinitionEntity) processDefinitions.get(0);
-    processDefinition1.setTimeToLive(timeToLive);
+    processDefinition1.setHistoryTimeToLive(timeToLive);
     commandContext.getDbEntityManager().merge(processDefinition1);
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricProcessInstanceManagerTest.java
Patch:
@@ -85,7 +85,7 @@ private void updateTimeToLive(CommandContext commandContext, String businessKey,
     List<ProcessDefinition> processDefinitions = engineRule.getRepositoryService().createProcessDefinitionQuery().processDefinitionKey(businessKey).list();
     assertEquals(1, processDefinitions.size());
     ProcessDefinitionEntity processDefinition1 = (ProcessDefinitionEntity) processDefinitions.get(0);
-    processDefinition1.setTimeToLive(timeToLive);
+    processDefinition1.setHistoryTimeToLive(timeToLive);
     commandContext.getDbEntityManager().merge(processDefinition1);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationDeleteCascade.java
Patch:
@@ -40,7 +40,7 @@ public void execute(PvmExecutionImpl execution) {
     }
 
     if (firstLeaf.getSubProcessInstance()!=null) {
-      firstLeaf.getSubProcessInstance().deleteCascade(execution.getDeleteReason(), firstLeaf.isSkipCustomListeners());
+      firstLeaf.getSubProcessInstance().deleteCascade(execution.getDeleteReason(), firstLeaf.isSkipCustomListeners(), firstLeaf.isSkipIoMappings());
     }
 
     firstLeaf.performOperation(DELETE_CASCADE_FIRE_ACTIVITY_END);

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/HistoryCleanupTest.java
Patch:
@@ -86,7 +86,7 @@ public ProcessEngineConfiguration configureEngine(ProcessEngineConfigurationImpl
   private ManagementService managementService;
 
   @Rule
-  public RuleChain ruleChain = RuleChain.outerRule(engineRule).around(testRule);
+  public RuleChain ruleChain = RuleChain.outerRule(bootstrapRule).around(engineRule).around(testRule);
   
   @Before
   public void init() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/ProcessEngineImpl.java
Patch:
@@ -121,7 +121,7 @@ public ProcessEngineImpl(ProcessEngineConfigurationImpl processEngineConfigurati
     }
 
     //create history cleanup job
-//|TODO CAM-7541    processEngineConfiguration.getHistoryService().cleanUpHistoryAsync();
+    processEngineConfiguration.getHistoryService().cleanUpHistoryAsync();
 
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/HistoryCleanupTest.java
Patch:
@@ -737,9 +737,11 @@ private void prepareData(int processInstanceCount) {
   }
 
   private void prepareData(int processInstanceCount, String businesskey) {
+    Date oldCurrentTime = ClockUtil.getCurrentTime();
     ClockUtil.setCurrentTime(DateUtils.addDays(new Date(), -6));
-    final List<String> ids = prepareHistoricProcesses(businesskey, getVariables(), processInstanceCount);  //two batch sizes
+    final List<String> ids = prepareHistoricProcesses(businesskey, getVariables(), processInstanceCount);
     runtimeService.deleteProcessInstances(ids, null, true, true);
+    ClockUtil.setCurrentTime(oldCurrentTime);
   }
 
   private List<String> prepareHistoricProcesses(String businessKey, VariableMap variables, Integer processInstanceCount) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/historycleanup/HistoryCleanupHelper.java
Patch:
@@ -14,7 +14,7 @@ public abstract class HistoryCleanupHelper {
 
   private static final SimpleDateFormat TIME_FORMAT_WITHOUT_SECONDS = new SimpleDateFormat("HH:mm");
 
-  public static final SimpleDateFormat TIME_FORMAT_WITHOUT_SECONDS_WITH_TIMEZONE = new SimpleDateFormat("HH:mmX");
+  public static final SimpleDateFormat TIME_FORMAT_WITHOUT_SECONDS_WITH_TIMEZONE = new SimpleDateFormat("HH:mmZ");
 
   public static Date getNextRunWithinBatchWindow(Date date, CommandContext commandContext) {
     return getNextRunWithinBatchWindow(date, getBatchWindowStartTime(commandContext));

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/HistoryCleanupTest.java
Patch:
@@ -646,7 +646,7 @@ public void testLessThanThresholdWithinBatchWindowAfterMidnight() {
 
   @Test
   public void testConfiguration() {
-    engineRule.getProcessEngineConfiguration().setHistoryCleanupBatchWindowStartTime("23:00+02");
+    engineRule.getProcessEngineConfiguration().setHistoryCleanupBatchWindowStartTime("23:00+0200");
     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT+2:00"));
     Date startTime = engineRule.getProcessEngineConfiguration().getHistoryCleanupBatchWindowStartTimeAsDate();
     c.setTime(startTime);
@@ -662,7 +662,7 @@ public void testConfiguration() {
     assertEquals(0, c.get(Calendar.MINUTE));
     assertEquals(0, c.get(Calendar.SECOND));
 
-    engineRule.getProcessEngineConfiguration().setHistoryCleanupBatchWindowEndTime("01:35-08:00");
+    engineRule.getProcessEngineConfiguration().setHistoryCleanupBatchWindowEndTime("01:35-0800");
     c = Calendar.getInstance(TimeZone.getTimeZone("GMT-8:00"));
     Date endTime = engineRule.getProcessEngineConfiguration().getHistoryCleanupBatchWindowEndTimeAsDate();
     c.setTime(endTime);

File: engine/src/main/java/org/camunda/bpm/engine/impl/ProcessEngineImpl.java
Patch:
@@ -121,7 +121,7 @@ public ProcessEngineImpl(ProcessEngineConfigurationImpl processEngineConfigurati
     }
 
     //create history cleanup job
-    processEngineConfiguration.getHistoryService().cleanUpHistoryAsync();
+//|TODO CAM-7541    processEngineConfiguration.getHistoryService().cleanUpHistoryAsync();
 
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/HistoryCleanupOnEngineStartTest.java
Patch:
@@ -34,6 +34,7 @@
 import org.camunda.bpm.engine.test.util.ProcessEngineTestRule;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.RuleChain;
@@ -93,6 +94,7 @@ public Void execute(CommandContext commandContext) {
 
 
   @Test
+  @Ignore("CAM-7541")
   public void testHistoryCleanupJob() throws ParseException {
     Job historyCleanupJob = historyService.findHistoryCleanupJob();
     assertNotNull(historyCleanupJob);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -1764,8 +1764,6 @@ protected void initDefaultMetrics(MetricsRegistry metricsRegistry) {
     metricsRegistry.createMeter(Metrics.JOB_EXECUTION_REJECTED);
 
     metricsRegistry.createMeter(Metrics.EXECUTED_DECISION_ELEMENTS);
-
-    metricsRegistry.createMeter(Metrics.HISTORIC_PROCESS_INSTANCES_FOR_CLEANUP);
   }
 
   protected void initSerialization() {

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/db/entitymanager/PurgeDatabaseTest.java
Patch:
@@ -200,7 +200,7 @@ public void testPurgeComplexProcess() {
     assertEquals(2, (long) databasePurgeReport.getReportValue(databaseTablePrefix + "ACT_RU_JOBDEF"));
     assertEquals(2, (long) databasePurgeReport.getReportValue(databaseTablePrefix + "ACT_ID_USER"));
     assertEquals(5, (long) databasePurgeReport.getReportValue(databaseTablePrefix + "ACT_RU_EXECUTION"));
-    assertEquals(11, (long) databasePurgeReport.getReportValue(databaseTablePrefix + "ACT_RU_METER_LOG"));
+    assertEquals(10, (long) databasePurgeReport.getReportValue(databaseTablePrefix + "ACT_RU_METER_LOG"));
     assertEquals(1, (long) databasePurgeReport.getReportValue(databaseTablePrefix + "ACT_RU_VARIABLE"));
     assertEquals(1, (long) databasePurgeReport.getReportValue(databaseTablePrefix + "ACT_RE_PROCDEF"));
     assertEquals(2, (long) databasePurgeReport.getReportValue(databaseTablePrefix + "ACT_ID_TENANT"));

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/history/HistoryRestService.java
Patch:
@@ -80,8 +80,7 @@ public interface HistoryRestService {
 
   @POST
   @Path("/cleanup")
-  @Consumes(MediaType.APPLICATION_JSON)
   @Produces(MediaType.APPLICATION_JSON)
-  JobDto cleanupAsync(@QueryParam("executeAtOnce") @DefaultValue("true") boolean executeAtOnce);
+  JobDto cleanupAsync(@QueryParam("immediatelyDue") @DefaultValue("true") boolean immediatelyDue);
 
 }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/history/HistoryRestServiceImpl.java
Patch:
@@ -113,8 +113,8 @@ public HistoricExternalTaskLogRestService getExternalTaskLogService() {
   }
 
   @Override
-  public JobDto cleanupAsync(boolean executeAtOnce) {
-    Job job = processEngine.getHistoryService().cleanUpHistoryAsync(executeAtOnce);
+  public JobDto cleanupAsync(boolean immediatelyDue) {
+    Job job = processEngine.getHistoryService().cleanUpHistoryAsync(immediatelyDue);
     return JobDto.fromJob(job);
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoryServiceImpl.java
Patch:
@@ -138,8 +138,8 @@ public Job cleanUpHistoryAsync() {
     return cleanUpHistoryAsync(false);
   }
 
-  public Job cleanUpHistoryAsync(boolean executeAtOnce) {
-    return commandExecutor.execute(new HistoryCleanupCmd(executeAtOnce));
+  public Job cleanUpHistoryAsync(boolean immediatelyDue) {
+    return commandExecutor.execute(new HistoryCleanupCmd(immediatelyDue));
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/impl/ProcessEngineImpl.java
Patch:
@@ -121,9 +121,7 @@ public ProcessEngineImpl(ProcessEngineConfigurationImpl processEngineConfigurati
     }
 
     //create history cleanup job
-    if (processEngineConfiguration.getBatchWindowStartTime() != null && !processEngineConfiguration.getBatchWindowStartTime().isEmpty()) {
-      processEngineConfiguration.getHistoryService().cleanUpHistoryAsync();
-    }
+    processEngineConfiguration.getHistoryService().cleanUpHistoryAsync();
 
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/JobDeclaration.java
Patch:
@@ -183,7 +183,7 @@ protected int resolveRetries(S context) {
     return Context.getProcessEngineConfiguration().getDefaultNumberOfRetries();
   }
 
-  protected Date resolveDueDate(S context) {
+  public Date resolveDueDate(S context) {
     ProcessEngineConfiguration processEngineConfiguration = Context.getProcessEngineConfiguration();
     if (processEngineConfiguration != null && processEngineConfiguration.isJobExecutorAcquireByDueDate()) {
       return ClockUtil.getCurrentTime();

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/EverLivingJobEntity.java
Patch:
@@ -62,7 +62,6 @@ public void init(CommandContext commandContext) {
     //clean the lock information
     setLockOwner(null);
     setLockExpirationTime(null);
-    update();
 
     if (exceptionByteArrayIdToDelete != null) {
       ByteArrayEntity byteArray = commandContext.getDbEntityManager().selectById(ByteArrayEntity.class, exceptionByteArrayIdToDelete);

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/BulkHistoryDeleteDmnDisabledTest.java
Patch:
@@ -16,10 +16,10 @@
 import java.util.List;
 import org.camunda.bpm.engine.HistoryService;
 import org.camunda.bpm.engine.ProcessEngineConfiguration;
-import org.camunda.bpm.engine.RepositoryService;
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
+import org.camunda.bpm.engine.test.RequiredHistoryLevel;
 import org.camunda.bpm.engine.test.util.ProcessEngineBootstrapRule;
 import org.camunda.bpm.engine.test.util.ProcessEngineTestRule;
 import org.camunda.bpm.engine.test.util.ProvidedProcessEngineRule;
@@ -35,6 +35,7 @@
  * @author Svetlana Dorokhova
  *
  */
+@RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_FULL)
 public class BulkHistoryDeleteDmnDisabledTest {
 
   protected ProcessEngineBootstrapRule bootstrapRule = new ProcessEngineBootstrapRule() {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/form/FormServiceTest.java
Patch:
@@ -1027,13 +1027,13 @@ public void testBusinessKey() {
 
   @Deployment
   public void testSubmitStartFormWithFormFieldMarkedAsBusinessKey() {
-    String procDefId = repositoryService.createProcessDefinitionQuery().singleResult().getId();// runtimeService.startProcessInstanceByKey("FormPropertyDefaultValueTest.testDefaultValue");
+    String procDefId = repositoryService.createProcessDefinitionQuery().singleResult().getId();
     ProcessInstance pi = formService.submitStartForm(procDefId, "foo", Variables.createVariables().putValue("secondParam", "bar"));
 
     assertEquals("foo", pi.getBusinessKey());
 
     List<VariableInstance> result = runtimeService.createVariableInstanceQuery().list();
     assertEquals(1, result.size());
-    assert (result.get(0).getName().equals("secondParam"));
+    assertTrue(result.get(0).getName().equals("secondParam"));
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/handler/DefaultFormHandler.java
Patch:
@@ -34,7 +34,6 @@
 import org.camunda.bpm.engine.impl.history.event.HistoryEvent;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventProcessor;
 import org.camunda.bpm.engine.impl.history.event.HistoryEventTypes;
-import org.camunda.bpm.engine.impl.history.handler.HistoryEventHandler;
 import org.camunda.bpm.engine.impl.history.producer.HistoryEventProducer;
 import org.camunda.bpm.engine.impl.persistence.entity.DeploymentEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
@@ -292,7 +291,9 @@ public void submitFormVariables(VariableMap properties, VariableScope variableSc
 
     // support form data:
     for (FormFieldHandler formFieldHandler : formFieldHandlers) {
-      formFieldHandler.handleSubmit(variableScope, propertiesCopy, properties);
+      if (!formFieldHandler.isBusinessKey()) {
+        formFieldHandler.handleSubmit(variableScope, propertiesCopy, properties);
+      }
     }
 
     // any variables passed in which are not handled by form-fields or form

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/historycleanup/HistoryCleanupJobHandler.java
Patch:
@@ -39,14 +39,13 @@ public void execute(HistoryCleanupJobHandlerConfiguration configuration, Executi
       //find data to delete
       List<String> processInstanceIds = getProcessInstanceIds(configuration, commandContext);
       if (!processInstanceIds.isEmpty() && processInstanceIds.size() >= configuration.getBatchSizeThreshold()) {
-          //TODO CAM-7604
-//        insertMetric(commandContext);
+        insertMetric(commandContext);
 
         //delete bunch of data
         commandContext.getHistoricProcessInstanceManager().deleteHistoricProcessInstanceByIds(processInstanceIds);
 
         //TODO svt does not work as the removal is not flushed to the database yet CAM-7604
-//        insertMetric(commandContext);
+        insertMetric(commandContext);
 
         //reschedule now
         commandContext.getJobManager().reschedule(jobEntity, ClockUtil.getCurrentTime());

File: engine-plugins/identity-ldap/src/main/java/org/camunda/bpm/identity/impl/ldap/LdapIdentityProviderSession.java
Patch:
@@ -226,7 +226,7 @@ protected List<User> findUsersByGroupId(LdapUserQueryImpl query) {
     }
   }
 
-  public List<User> findUsersWithoutGroupId(LdapUserQueryImpl query, String userBaseDn, Boolean ignorePagination) {
+  public List<User> findUsersWithoutGroupId(LdapUserQueryImpl query, String userBaseDn, boolean ignorePagination) {
 
     if(ldapConfiguration.isSortControlSupported()) {
       applyRequestControls(query);
@@ -241,7 +241,7 @@ public List<User> findUsersWithoutGroupId(LdapUserQueryImpl query, String userBa
       // perform client-side paging
       int resultCount = 0;
       List<User> userList = new ArrayList<User>();
-      while (enumeration.hasMoreElements() && userList.size() < query.getMaxResults()) {
+      while (enumeration.hasMoreElements() && (userList.size() < query.getMaxResults() || ignorePagination)) {
         SearchResult result = enumeration.nextElement();
 
         UserEntity user = transformUser(result);

File: engine-plugins/identity-ldap/src/test/java/org/camunda/bpm/identity/impl/ldap/LdapTestUtilities.java
Patch:
@@ -96,9 +96,8 @@ public static void testUserPagingWithMemberOfGroup(IdentityService identityServi
     checkPagingResults(userNames, users.get(0).getId(), users.get(1).getId());
 
     users = identityService.createUserQuery().memberOfGroup("all").listPage(11, 2);
-    assertFalse(userNames.contains(users.get(0).getId()));
-    userNames.add(users.get(0).getId());
     assertEquals(1, users.size());
+    assertFalse(userNames.contains(users.get(0).getId()));
 
     users = identityService.createUserQuery().memberOfGroup("all").listPage(12, 2);
     assertEquals(0, users.size());

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/handler/DelegateFormHandler.java
Patch:
@@ -44,8 +44,6 @@ public void parseConfiguration(Element activityElement, DeploymentEntity deploym
   }
 
   protected <T> T performContextSwitch(final Callable<T> callable) {
-    //initialize operationId (won't be possible after context is switched, as it will disable user operation log)
-    Context.getCommandContext().initOperationId();
 
     ProcessApplicationReference targetProcessApplication = ProcessApplicationContextUtil.getTargetProcessApplication(deploymentId);
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/UserOperationIdTest.java
Patch:
@@ -37,6 +37,7 @@
 import org.camunda.bpm.engine.variable.Variables;
 import org.camunda.bpm.model.bpmn.Bpmn;
 import org.camunda.bpm.model.bpmn.BpmnModelInstance;
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Rule;
@@ -150,6 +151,7 @@ public void testWithoutAuthentication() {
 
     //then
     List<UserOperationLogEntry> userOperationLogEntries = historyService.createUserOperationLogQuery()
+        .taskId(taskId)
         .list();
     assertEquals(0, userOperationLogEntries.size());
     List<HistoricDetail> historicDetails = historyService.createHistoricDetailQuery().list();
@@ -161,7 +163,6 @@ public void testWithoutAuthentication() {
   }
 
   @Test
-  @Ignore("CAM-6669")
   public void testSetTaskVariablesInServiceTask() {
     // given
     BpmnModelInstance bpmnModelInstance = Bpmn.createExecutableProcess(PROCESS_KEY)

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricProcessInstanceManager.java
Patch:
@@ -101,7 +101,9 @@ public void deleteHistoricProcessInstanceByIds(List<String> processInstanceIds)
     commandContext.getHistoricJobLogManager().deleteHistoricJobLogsByProcessInstanceIds(processInstanceIds);
     commandContext.getHistoricExternalTaskLogManager().deleteHistoricExternalTaskLogsByProcessInstanceIds(processInstanceIds);
 
-    commandContext.getHistoricDecisionInstanceManager().deleteHistoricDecisionInstanceByProcessInstanceIds(processInstanceIds);
+    if (commandContext.getProcessEngineConfiguration().isDmnEnabled()) {
+      commandContext.getHistoricDecisionInstanceManager().deleteHistoricDecisionInstanceByProcessInstanceIds(processInstanceIds);
+    }
 
     commandContext.getDbEntityManager().deletePreserveOrder(HistoricProcessInstanceEntity.class, "deleteHistoricProcessInstances", processInstanceIds);
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/RuntimeServiceTest.java
Patch:
@@ -72,6 +72,7 @@
 import org.camunda.bpm.engine.task.Attachment;
 import org.camunda.bpm.engine.task.Task;
 import org.camunda.bpm.engine.test.Deployment;
+import org.camunda.bpm.engine.test.RequiredHistoryLevel;
 import org.camunda.bpm.engine.test.api.runtime.util.SimpleSerializableBean;
 import org.camunda.bpm.engine.test.bpmn.executionlistener.RecorderExecutionListener;
 import org.camunda.bpm.engine.test.bpmn.executionlistener.RecorderExecutionListener.RecordedEvent;
@@ -328,6 +329,7 @@ public void testDeleteProcessInstanceSkipCustomTaskListeners() {
 
   @Deployment(resources={
       "org/camunda/bpm/engine/test/api/oneTaskProcessWithIoMappings.bpmn20.xml" })
+  @RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_FULL)
   public void testDeleteProcessInstanceSkipIoMappings() {
 
     // given a process instance
@@ -344,6 +346,7 @@ public void testDeleteProcessInstanceSkipIoMappings() {
 
   @Deployment(resources = { 
       "org/camunda/bpm/engine/test/api/oneTaskProcessWithIoMappings.bpmn20.xml" })
+  @RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_FULL)
   public void testDeleteProcessInstanceWithoutSkipIoMappings() {
 
     // given a process instance

File: engine/src/main/java/org/camunda/bpm/engine/HistoryService.java
Patch:
@@ -161,7 +161,7 @@ public interface HistoryService {
    * @throws AuthorizationException
    *          If the user has no {@link Permissions#DELETE_HISTORY} permission on {@link Resources#PROCESS_DEFINITION}.
    */
-  void bulkDeleteHistoricProcessInstances(List<String> processInstanceIds);
+  void deleteHistoricProcessInstancesBulk(List<String> processInstanceIds);
 
   /**
    * Deletes historic process instances asynchronously. All historic activities, historic task and

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoryServiceImpl.java
Patch:
@@ -42,7 +42,7 @@
 import org.camunda.bpm.engine.history.UserOperationLogQuery;
 import org.camunda.bpm.engine.impl.batch.history.DeleteHistoricBatchCmd;
 import org.camunda.bpm.engine.impl.batch.history.HistoricBatchQueryImpl;
-import org.camunda.bpm.engine.impl.cmd.BulkDeleteHistoricProcessInstancesCmd;
+import org.camunda.bpm.engine.impl.cmd.DeleteHistoricProcessInstancesBulkCmd;
 import org.camunda.bpm.engine.impl.cmd.DeleteHistoricCaseInstanceCmd;
 import org.camunda.bpm.engine.impl.cmd.DeleteHistoricProcessInstanceCmd;
 import org.camunda.bpm.engine.impl.cmd.DeleteHistoricProcessInstancesCmd;
@@ -127,8 +127,8 @@ public void deleteHistoricProcessInstances(List<String> processInstanceIds) {
     commandExecutor.execute(new DeleteHistoricProcessInstancesCmd(processInstanceIds));
   }
 
-  public void bulkDeleteHistoricProcessInstances(List<String> processInstanceIds){
-    commandExecutor.execute(new BulkDeleteHistoricProcessInstancesCmd(processInstanceIds));
+  public void deleteHistoricProcessInstancesBulk(List<String> processInstanceIds){
+    commandExecutor.execute(new DeleteHistoricProcessInstancesBulkCmd(processInstanceIds));
   }
 
   public Batch deleteHistoricProcessInstancesAsync(List<String> processInstanceIds, String deleteReason) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeleteHistoricProcessInstancesBulkCmd.java
Patch:
@@ -30,11 +30,11 @@
 /**
  * @author Svetlana Dorokhova
  */
-public class BulkDeleteHistoricProcessInstancesCmd implements Command<Void>, Serializable {
+public class DeleteHistoricProcessInstancesBulkCmd implements Command<Void>, Serializable {
 
   protected final List<String> processInstanceIds;
 
-  public BulkDeleteHistoricProcessInstancesCmd(List<String> processInstanceIds) {
+  public DeleteHistoricProcessInstancesBulkCmd(List<String> processInstanceIds) {
     this.processInstanceIds = processInstanceIds;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/entitymanager/DbEntityManager.java
Patch:
@@ -480,7 +480,7 @@ protected DbBulkOperation performBulkOperationPreserveOrder(Class<? extends DbEn
     DbBulkOperation bulkOperation = createDbBulkOperation(entityType, statement, parameter, operationType);
 
     // schedule operation
-    dbOperationManager.addOperationPreservOrder(bulkOperation);
+    dbOperationManager.addOperationPreserveOrder(bulkOperation);
     return bulkOperation;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/entitymanager/operation/DbOperationManager.java
Patch:
@@ -119,7 +119,7 @@ public boolean addOperation(DbBulkOperation newOperation) {
     return bulksByType.add(newOperation);
   }
 
-  public boolean addOperationPreservOrder(DbBulkOperation newOperation) {
+  public boolean addOperationPreserveOrder(DbBulkOperation newOperation) {
     return bulkOperationsInsertionOrder.add(newOperation);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricProcessInstanceManager.java
Patch:
@@ -94,7 +94,7 @@ public void deleteHistoricProcessInstanceByIds(List<String> processInstanceIds)
     commandContext.getHistoricVariableInstanceManager().deleteHistoricVariableInstanceByProcessInstanceIds(processInstanceIds);
     commandContext.getCommentManager().deleteCommentsByProcessInstanceIds(processInstanceIds);
     commandContext.getAttachmentManager().deleteAttachmentsByProcessInstanceIds(processInstanceIds);
-    commandContext.getHistoricTaskInstanceManager().deleteHistoricTaskInstancesByProcessInstanceIds(processInstanceIds);
+    commandContext.getHistoricTaskInstanceManager().deleteHistoricTaskInstancesByProcessInstanceIds(processInstanceIds, false);
     commandContext.getHistoricActivityInstanceManager().deleteHistoricActivityInstancesByProcessInstanceIds(processInstanceIds);
     commandContext.getHistoricIncidentManager().deleteHistoricIncidentsByProcessInstanceIds(processInstanceIds);
     commandContext.getHistoricJobLogManager().deleteHistoricJobLogsByProcessInstanceIds(processInstanceIds);

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/BulkHistoryDeleteAuthorizationTest.java
Patch:
@@ -121,7 +121,7 @@ public void testCleanupHistory() {
         .start();
 
     //when
-    historyService.bulkDeleteHistoricProcessInstances(ids);
+    historyService.deleteHistoricProcessInstancesBulk(ids);
 
     if (authRule.assertScenario(scenario)) {
       assertEquals(0, historyService.createHistoricProcessInstanceQuery().processDefinitionKey(ONE_TASK_PROCESS).count());

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -692,12 +692,12 @@ public void deleteIdentityLink(String userId, String groupId, String type) {
     }
   }
 
-  public void deleteIdentityLinks() {
+  public void deleteIdentityLinks(boolean withHistory) {
     List<IdentityLinkEntity> identityLinkEntities = getIdentityLinks();
     for (IdentityLinkEntity identityLinkEntity : identityLinkEntities) {
       fireDeleteIdentityLinkAuthorizationProvider(identityLinkEntity.getType(),
         identityLinkEntity.getUserId(), identityLinkEntity.getGroupId());
-      identityLinkEntity.delete();
+      identityLinkEntity.delete(withHistory);
     }
     isIdentityLinksInitialized = false;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TaskManager.java
Patch:
@@ -81,7 +81,7 @@ public void deleteTask(TaskEntity task, String deleteReason, boolean cascade, bo
         ((TaskEntity) subTask).delete(deleteReason, cascade, skipCustomListeners);
       }
 
-      task.deleteIdentityLinks();
+      task.deleteIdentityLinks(false);
 
       commandContext
         .getVariableInstanceManager()

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/handler/DelegateFormHandler.java
Patch:
@@ -44,6 +44,9 @@ public void parseConfiguration(Element activityElement, DeploymentEntity deploym
   }
 
   protected <T> T performContextSwitch(final Callable<T> callable) {
+    //initialize operationId (won't be possible after context is switched, as it will disable user operation log)
+    Context.getCommandContext().initOperationId();
+
     ProcessApplicationReference targetProcessApplication = ProcessApplicationContextUtil.getTargetProcessApplication(deploymentId);
 
     if(targetProcessApplication != null) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/UserOperationLogManager.java
Patch:
@@ -299,7 +299,7 @@ public void logDeploymentOperation(String operation, String deploymentId, List<P
 
   }
 
-  protected boolean isUserOperationLogEnabled() {
+  public boolean isUserOperationLogEnabled() {
     return isHistoryLevelFullEnabled() &&
         ((isUserOperationLogEnabledOnCommandContext() && isUserAuthenticated()) ||
             !writeUserOperationLogOnlyWithLoggedInUser());

File: engine/src/main/java/org/camunda/bpm/engine/impl/interceptor/CommandContext.java
Patch:
@@ -567,6 +567,9 @@ public void setRestrictUserOperationLogToAuthenticatedUsers(boolean restrictUser
   }
 
   public String getOperationId() {
+    if (operationId == null) {
+      operationId = Context.getProcessEngineConfiguration().getIdGenerator().getNextId();
+    }
     return operationId;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/UserOperationLogManager.java
Patch:
@@ -299,7 +299,7 @@ public void logDeploymentOperation(String operation, String deploymentId, List<P
 
   }
 
-  public boolean isUserOperationLogEnabled() {
+  protected boolean isUserOperationLogEnabled() {
     return isHistoryLevelFullEnabled() &&
         ((isUserOperationLogEnabledOnCommandContext() && isUserAuthenticated()) ||
             !writeUserOperationLogOnlyWithLoggedInUser());

File: engine/src/main/java/org/camunda/bpm/engine/impl/interceptor/CommandContext.java
Patch:
@@ -567,9 +567,6 @@ public void setRestrictUserOperationLogToAuthenticatedUsers(boolean restrictUser
   }
 
   public String getOperationId() {
-    if (operationId == null) {
-      operationId = Context.getProcessEngineConfiguration().getIdGenerator().getNextId();
-    }
     return operationId;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/UserOperationLogManager.java
Patch:
@@ -299,7 +299,7 @@ public void logDeploymentOperation(String operation, String deploymentId, List<P
 
   }
 
-  protected boolean isUserOperationLogEnabled() {
+  public boolean isUserOperationLogEnabled() {
     return isHistoryLevelFullEnabled() &&
         ((isUserOperationLogEnabledOnCommandContext() && isUserAuthenticated()) ||
             !writeUserOperationLogOnlyWithLoggedInUser());

File: engine/src/test/java/org/camunda/bpm/engine/test/api/identity/UserQueryTest.java
Patch:
@@ -323,7 +323,7 @@ public void testNativeQuery() {
   }
 
   public void testNativeQueryOrLike() {
-    String searchPattern = "'%frog'";
+    String searchPattern = "%frog";
 
     String fromWhereClauses = String.format("FROM %s WHERE FIRST_ LIKE #{searchPattern} OR LAST_ LIKE #{searchPattern} OR EMAIL_ LIKE #{searchPattern}",
         managementService.getTableName(UserEntity.class));

File: engine/src/test/java/org/camunda/bpm/engine/test/api/identity/UserQueryTest.java
Patch:
@@ -325,7 +325,7 @@ public void testNativeQuery() {
   public void testNativeQueryOrLike() {
     String searchPattern = "'%\\_frog'";
 
-    String fromWhereClauses = String.format("FROM %s WHERE FIRST_ LIKE %s OR LAST_ LIKE %s OR EMAIL_ LIKE %s",
+    String fromWhereClauses = String.format("FROM %s WHERE FIRST_ LIKE %s ESCAPE '\\' OR LAST_ LIKE %s ESCAPE '\\' OR EMAIL_ LIKE %s ESCAPE '\\'",
         managementService.getTableName(UserEntity.class), searchPattern, searchPattern, searchPattern);
 
     assertEquals(1, identityService.createNativeUserQuery().sql("SELECT * " + fromWhereClauses).list().size());

File: engine/src/test/java/org/camunda/bpm/engine/test/api/repository/AlwaysFailingDelegate.java
Patch:
@@ -8,7 +8,7 @@ public class AlwaysFailingDelegate implements JavaDelegate {
 
   @Override
   public void execute(DelegateExecution execution) throws Exception {
-    throw new ProcessEngineException("Exception expected.");
+    throw new ProcessEngineException("Exception_expected.");
   }
 
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/repository/VersionTagTest.java
Patch:
@@ -29,7 +29,7 @@ public void testParsingVersionTag() {
       .asc()
       .singleResult();
 
-    assertEquals("ver-tag-1", process.getVersionTag());
+    assertEquals("ver_tag_1", process.getVersionTag());
   }
 
   @Deployment(resources={"org/camunda/bpm/engine/test/api/repository/processOne.bpmn20.xml"})

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/ExecutionQueryTest.java
Patch:
@@ -1245,7 +1245,7 @@ public void testQueryByIncidentMessageLike() {
 
     List<Execution> executionList = runtimeService
         .createExecutionQuery()
-        .incidentMessageLike("%exception%").list();
+        .incidentMessageLike("%\\_exception%").list();
 
     assertEquals(1, executionList.size());
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/FailingDelegate.java
Patch:
@@ -6,7 +6,7 @@
 
 public class FailingDelegate implements JavaDelegate {
 
-  public static final String EXCEPTION_MESSAGE = "Expected exception.";
+  public static final String EXCEPTION_MESSAGE = "Expected_exception.";
 
   @Override
   public void execute(DelegateExecution execution) throws Exception {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/IncidentQueryTest.java
Patch:
@@ -126,7 +126,7 @@ public void testQueryByInvalidIncidentType() {
 
   @Test
   public void testQueryByIncidentMessage() {
-    IncidentQuery query = runtimeService.createIncidentQuery().incidentMessage("Expected exception.");
+    IncidentQuery query = runtimeService.createIncidentQuery().incidentMessage("Expected_exception.");
     assertEquals(4, query.count());
 
     List<Incident> incidents = query.list();

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/ProcessInstanceQueryTest.java
Patch:
@@ -1342,7 +1342,7 @@ public void testQueryByIncidentMessageLike() {
 
     List<ProcessInstance> processInstanceList = runtimeService
         .createProcessInstanceQuery()
-        .incidentMessageLike("%exception%").list();
+        .incidentMessageLike("%\\_exception%").list();
 
     assertEquals(1, processInstanceList.size());
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/VariableInstanceQueryTest.java
Patch:
@@ -167,11 +167,11 @@ public void testQueryByVariableNames() {
   public void testQueryByVariableNameLike() {
     // given
     Map<String, Object> variables = new HashMap<String, Object>();
-    variables.put("stringVar", "test");
+    variables.put("string%Var", "test");
     runtimeService.startProcessInstanceByKey("oneTaskProcess", variables);
 
     // when
-    VariableInstanceQuery query = runtimeService.createVariableInstanceQuery().variableNameLike("%ingV%");
+    VariableInstanceQuery query = runtimeService.createVariableInstanceQuery().variableNameLike("%ing\\%V%");
 
     // then
     List<VariableInstance> result = query.list();
@@ -181,7 +181,7 @@ public void testQueryByVariableNameLike() {
     assertEquals(1, query.count());
 
     VariableInstance var = result.get(0);
-    assertEquals("stringVar", var.getName());
+    assertEquals("string%Var", var.getName());
     assertEquals("test", var.getValue());
     assertEquals("string", var.getTypeName());
   }

File: webapps/src/test/java/org/camunda/bpm/cockpit/plugin/base/ProcessDefinitionResourceTest.java
Patch:
@@ -485,12 +485,12 @@ public void testQueryWithVariable() {
     // given
     Map<String, Object> vars1 = new HashMap<String, Object>();
     vars1.put("callProcess", "userTaskProcess");
-    vars1.put("aVariableName", "test123");
+    vars1.put("aVariableName", "test_123");
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("DynamicCallActivity", vars1);
 
     Map<String, Object> vars2 = new HashMap<String, Object>();
     vars2.put("callProcess", "anotherUserTaskProcess");
-    vars1.put("aVariableName", "test456");
+    vars1.put("aVariableName", "test_456");
     runtimeService.startProcessInstanceByKey("DynamicCallActivity", vars2);
 
     resource = new ProcessDefinitionResource(getProcessEngine().getName(), processInstance.getProcessDefinitionId());
@@ -501,7 +501,7 @@ public void testQueryWithVariable() {
         .singleResult();
 
     // when
-    VariableQueryParameterDto variable = createVariableParameter("aVariableName", EQUALS_OPERATOR_NAME, "test123");
+    VariableQueryParameterDto variable = createVariableParameter("aVariableName", LIKE_OPERATOR_NAME, "test\\_1%");
 
     ProcessDefinitionQueryDto queryParameter = new ProcessDefinitionQueryDto();
     queryParameter.setVariables(Arrays.asList(variable));

File: webapps/src/test/java/org/camunda/bpm/cockpit/plugin/base/ProcessInstanceRestServiceTest.java
Patch:
@@ -416,6 +416,7 @@ public void testQueryWithComplexVariableFilter() {
         createVariableParameter("varstring", VariableQueryParameterDto.LIKE_OPERATOR_NAME, "F%"),
         createVariableParameter("varstring", VariableQueryParameterDto.EQUALS_OPERATOR_NAME, "FOO"),
         createVariableParameter("varstring", VariableQueryParameterDto.NOT_EQUALS_OPERATOR_NAME, "BAR"),
+        createVariableParameter("varstring2", VariableQueryParameterDto.LIKE_OPERATOR_NAME, "F\\_%"),
         createVariableParameter("varfloat", VariableQueryParameterDto.EQUALS_OPERATOR_NAME, 12.12),
         createVariableParameter("varfloat", VariableQueryParameterDto.NOT_EQUALS_OPERATOR_NAME, 13.0),
         createVariableParameter("varfloat", VariableQueryParameterDto.LESS_THAN_OR_EQUALS_OPERATOR_NAME, 12.13)));

File: webapps/src/test/java/org/camunda/bpm/cockpit/plugin/base/pa/VariableSavingDelegate.java
Patch:
@@ -9,6 +9,7 @@ public class VariableSavingDelegate implements JavaDelegate {
   public void execute(DelegateExecution execution) throws Exception {
 
     execution.setVariable("varstring", "FOO");
+    execution.setVariable("varstring2", "F_OO");
     execution.setVariable("varinteger", 12);
     execution.setVariable("varfloat", 12.12);
     execution.setVariable("varboolean", true);

File: engine/src/test/java/org/camunda/bpm/engine/test/api/variables/JavaSerializable.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.camunda.bpm.engine.test.api.variables;
 
+import java.io.ObjectOutputStream;
 import java.io.Serializable;
 
 /**

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/CommandLogger.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.camunda.bpm.engine.impl.cmd;
 
+import java.util.Arrays;
 import org.camunda.bpm.application.impl.ProcessApplicationIdentifier;
 import org.camunda.bpm.engine.BadUserRequestException;
 import org.camunda.bpm.engine.MismatchingMessageCorrelationException;
@@ -217,8 +218,8 @@ public ProcessEngineException exceptionCommandWithUnauthorizedTenant(String comm
         ));
   }
 
-  public void warnDeploymentResourceWasIgnored(String resourceName) {
+  public void warnDeploymentResourceHasWroneName(String resourceName, String[] suffixes) {
     logWarn(
-        "035", String.format("Deployment resource '%s' was not processed during deployment. Hint: check file extention.", resourceName));
+        "035", String.format("Deployment resource '%s' will be ignored as its name must have one of suffixes %s.", resourceName, Arrays.toString(suffixes)));
   }
 }

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios730/compensation/ParallelMultiInstanceCompensationScenarioTest.java
Patch:
@@ -316,7 +316,7 @@ public void testDefaultHandlerMultiInstancePartialActivityInstanceTree() {
         // non-deterministic behavior (i.e. depends on order that executions are returned from database)
         // traversing the tree from pre-migration compensation handling executions, the mi-body execution misses
         // traversing the tree from the post-migration compensation handling executions, the mi-body execution exists
-        .beginScope("subProcess", "userTask#multiInstanceBody")
+        .beginScope("subProcess", "userTask#multiInstanceBody", "subProcess#multiInstanceBody")
           .beginScope("subProcess")
             .activity("undoTask")
           .endScope()

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios730/compensation/SequentialMultiInstanceCompensationScenarioTest.java
Patch:
@@ -316,7 +316,7 @@ public void testDefaultHandlerMultiInstancePartialActivityInstanceTree() {
         // non-deterministic behavior (i.e. depends on order that executions are returned from database)
         // traversing the tree from pre-migration compensation handling executions, the mi-body execution misses
         // traversing the tree from the post-migration compensation handling executions, the mi-body execution exists
-        .beginScope("subProcess", "userTask#multiInstanceBody")
+        .beginScope("subProcess", "userTask#multiInstanceBody", "subProcess#multiInstanceBody")
           .beginScope("subProcess")
             .activity("undoTask")
           .endScope()

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/compensate/CompensateEventOrderTest.java
Patch:
@@ -1,12 +1,14 @@
 package org.camunda.bpm.engine.test.bpmn.event.compensate;
 
+import java.util.Date;
 import java.util.List;
 import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.history.HistoricActivityInstance;
 import org.camunda.bpm.engine.test.ProcessEngineRule;
 import org.camunda.bpm.engine.test.RequiredHistoryLevel;
 import org.camunda.bpm.engine.test.bpmn.event.compensate.helper.IncreaseCurrentTimeServiceTask;
 import org.camunda.bpm.engine.test.util.ProcessEngineTestRule;
+import org.camunda.bpm.engine.variable.Variables;
 import org.camunda.bpm.model.bpmn.AssociationDirection;
 import org.camunda.bpm.model.bpmn.Bpmn;
 import org.camunda.bpm.model.bpmn.BpmnModelInstance;
@@ -58,7 +60,7 @@ public void testTwoCompensateEventsInReverseOrder() {
     testHelper.deploy(model);
 
     //when
-    engineRule.getRuntimeService().startProcessInstanceByKey("Process_1");
+    engineRule.getRuntimeService().startProcessInstanceByKey("Process_1", Variables.createVariables().putValue("currentTime", new Date()));
 
     //then compensation activities are executed in the reverse order
     List<HistoricActivityInstance> list = engineRule.getHistoryService().createHistoricActivityInstanceQuery()

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/compensate/CompensateEventOrderTest.java
Patch:
@@ -1,8 +1,10 @@
 package org.camunda.bpm.engine.test.bpmn.event.compensate;
 
 import java.util.List;
+import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.history.HistoricActivityInstance;
 import org.camunda.bpm.engine.test.ProcessEngineRule;
+import org.camunda.bpm.engine.test.RequiredHistoryLevel;
 import org.camunda.bpm.engine.test.bpmn.event.compensate.helper.SleepServiceTask;
 import org.camunda.bpm.engine.test.util.ProcessEngineTestRule;
 import org.camunda.bpm.model.bpmn.AssociationDirection;
@@ -21,6 +23,7 @@
 /**
  * @author Svetlana Dorokhova
  */
+@RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_ACTIVITY)
 public class CompensateEventOrderTest {
 
   @Rule public ProcessEngineRule engineRule = new ProcessEngineRule();

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/deploy/cache/ResourceDefinitionCache.java
Patch:
@@ -106,7 +106,7 @@ public T resolveDefinition(T definition) {
               .getDeploymentManager()
               .findDeploymentById(deploymentId);
           deployment.setNew(false);
-          cacheDeployer.deployOnlyGivenResourceOfDeployment(deployment, definition.getResourceName());
+          cacheDeployer.deployOnlyGivenResourcesOfDeployment(deployment, definition.getResourceName(), definition.getDiagramResourceName());
           cachedDefinition = cache.get(definitionId);
         }
       }

File: engine-rest/engine-rest/src/test/java-jersey2/org/camunda/bpm/engine/rest/util/container/JerseyTomcatServerBootstrap.java
Patch:
@@ -23,6 +23,6 @@ public JerseyTomcatServerBootstrap(String webXmlPath) {
   }
 
   protected void addRuntimeSpecificLibraries(WebArchive wa, PomEquippedResolveStage resolver) {
-    wa.addAsLibraries(resolver.resolve("org.glassfish.jersey.containers:jersey-container-servlet:2.21.1").withTransitivity().asFile());
+    wa.addAsLibraries(resolver.resolve("org.glassfish.jersey.containers:jersey-container-servlet:2.25.1").withTransitivity().asFile());
   }
 }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/repository/DeploymentDto.java
Patch:
@@ -101,7 +101,7 @@ private static void initDeployedResourceLists(Deployment deployment, DeploymentD
     }
 
     List<DecisionDefinition> deployedDecisionDefinitions = deployment.getDeployedDecisionDefinitions();
-    if (deployedCaseDefinitions != null) {
+    if (deployedDecisionDefinitions != null) {
       dto.deployedDecisionDefinitions = new ArrayList<DecisionDefinitionDto>();
       for (DecisionDefinition decisionDefinition : deployedDecisionDefinitions) {
         dto.deployedDecisionDefinitions.add(DecisionDefinitionDto.fromDecisionDefinition(decisionDefinition));

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -1136,7 +1136,7 @@ protected void moveTasksTo(ExecutionEntity other) {
       task.setExecution(other);
 
       // update the related local task variables
-      List<VariableInstanceEntity> variables = commandContext.getVariableInstanceManager().findVariableInstancesByTaskId(task.getId());
+      Collection<VariableInstanceEntity> variables = task.getVariablesInternal();
 
       for (VariableInstanceEntity variable : variables) {
         variable.setExecution(other);

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -4432,7 +4432,7 @@ protected ParameterValueProvider createParameterValueProvider(Object value, Expr
     if (value == null) {
       return new NullValueProvider();
 
-    } else if (value instanceof String && StringUtil.isExpression((String) value)) {
+    } else if (value instanceof String && StringUtil.isCompositeExpression((String) value, expressionManager)) {
       Expression expression = expressionManager.createExpression((String) value);
       return new ElValueProvider(expression);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParseUtil.java
Patch:
@@ -203,7 +203,7 @@ protected static ParameterValueProvider parseParamValueProvider(Element paramete
 
     String textContent = parameterElement.getText().trim();
     if(!textContent.isEmpty()) {
-      if(StringUtil.isExpression(textContent)) {
+      if(StringUtil.isCompositeExpression(textContent, getExpressionManager())) {
         // EL
         return new ElValueProvider(getExpressionManager().createExpression(textContent));
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/handler/CallingTaskItemHandler.java
Patch:
@@ -111,7 +111,7 @@ protected ParameterValueProvider createParameterValueProvider(String value, Expr
     if (value == null) {
       return new NullValueProvider();
 
-    } else if (StringUtil.isExpression(value)) {
+    } else if (!expressionManager.createExpression(value).isLiteralText()) {
       Expression expression = expressionManager.createExpression(value);
       return new ElValueProvider(expression);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java
Patch:
@@ -630,10 +630,10 @@ public void configureHistoricDecisionInstanceQuery(HistoricDecisionInstanceQuery
     configureQuery(query, DECISION_DEFINITION, "SELF.DEC_DEF_KEY_", READ_HISTORY);
   }
 
-  // external task log query /////////////////////////////////
+  // historic external task log query /////////////////////////////////
 
   public void configureHistoricExternalTaskLogQuery(HistoricExternalTaskLogQueryImpl query) {
-    configureQuery(query, PROCESS_DEFINITION, "SELF.PROCESS_DEF_KEY_", READ_HISTORY);
+    configureQuery(query, PROCESS_DEFINITION, "SELF.PROC_DEF_KEY_", READ_HISTORY);
   }
 
   // user operation log query ///////////////////////////////

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TaskManager.java
Patch:
@@ -81,9 +81,7 @@ public void deleteTask(TaskEntity task, String deleteReason, boolean cascade, bo
         ((TaskEntity) subTask).delete(deleteReason, cascade, skipCustomListeners);
       }
 
-      commandContext
-        .getIdentityLinkManager()
-        .deleteIdentityLinksByTaskId(taskId);
+      task.deleteIdentityLinks();
 
       commandContext
         .getVariableInstanceManager()

File: engine-cdi/src/main/java/org/camunda/bpm/engine/cdi/CdiJtaProcessEngineConfiguration.java
Patch:
@@ -21,6 +21,7 @@ public class CdiJtaProcessEngineConfiguration extends JtaProcessEngineConfigurat
 
   @Override
   protected void initExpressionManager() {
-    expressionManager = new CdiExpressionManager();    
+    expressionManager = new CdiExpressionManager();
+    super.initExpressionManager();
   }
 }

File: engine-cdi/src/main/java/org/camunda/bpm/engine/cdi/CdiStandaloneProcessEngineConfiguration.java
Patch:
@@ -22,6 +22,7 @@ public class CdiStandaloneProcessEngineConfiguration extends StandaloneProcessEn
   @Override
   protected void initExpressionManager() {
     expressionManager = new CdiExpressionManager();
+    super.initExpressionManager();
   }
 
   @Override

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricExternalTaskLogQuerySortingTest.java
Patch:
@@ -14,6 +14,7 @@
 
 import org.camunda.bpm.engine.ExternalTaskService;
 import org.camunda.bpm.engine.HistoryService;
+import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.externaltask.ExternalTask;
 import org.camunda.bpm.engine.externaltask.LockedExternalTask;
@@ -22,6 +23,7 @@
 import org.camunda.bpm.engine.repository.ProcessDefinition;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.test.ProcessEngineRule;
+import org.camunda.bpm.engine.test.RequiredHistoryLevel;
 import org.camunda.bpm.engine.test.api.authorization.util.AuthorizationTestRule;
 import org.camunda.bpm.engine.test.api.runtime.TestOrderingUtil;
 import org.camunda.bpm.engine.test.api.runtime.TestOrderingUtil.*;
@@ -43,6 +45,7 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 
+@RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_FULL)
 public class HistoricExternalTaskLogQuerySortingTest {
 
   protected final String WORKER_ID = "aWorkerId";

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/deploy/cache/CachePurgeReport.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * @author Christopher Zell <christopher.zell@camunda.com>
  */
-public class CachePurgeResult implements PurgeReporting<Set<String>> {
+public class CachePurgeReport implements PurgeReporting<Set<String>> {
 
   public static final String PROCESS_DEF_CACHE = "PROC_DEF_CACHE";
   public static final String BPMN_MODEL_INST_CACHE = "BPMN_MODEL_INST_CACHE";

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TableDataManager.java
Patch:
@@ -44,10 +44,8 @@
 import org.camunda.bpm.engine.impl.dmn.entity.repository.DecisionRequirementsDefinitionEntity;
 import org.camunda.bpm.engine.impl.history.event.*;
 import org.camunda.bpm.engine.impl.persistence.AbstractManager;
-import org.camunda.bpm.engine.management.JobDefinition;
 import org.camunda.bpm.engine.management.TableMetaData;
 import org.camunda.bpm.engine.management.TablePage;
-import org.camunda.bpm.engine.repository.DecisionRequirementsDefinition;
 import org.camunda.bpm.engine.repository.Deployment;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
 import org.camunda.bpm.engine.runtime.Execution;

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricProcessInstanceTest.java
Patch:
@@ -342,7 +342,7 @@ public void testHistoricProcessInstanceQueryWithIncidentMessageLikeNull() {
     }
   }
 
-  @Deployment(resources = {"org/camunda/bpm/engine/test/history/oneTaskProcess.bpmn20.xml"})
+  @Deployment(resources = {"org/camunda/bpm/engine/test/history/oneAsyncTaskProcess.bpmn20.xml"})
   public void testHistoricProcessInstanceQuery() {
     Calendar startTime = Calendar.getInstance();
 

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricProcessInstanceTest.java
Patch:
@@ -990,8 +990,8 @@ public void testHistoricProcInstExecuteActivityBefore() {
     BpmnModelInstance model = Bpmn.createExecutableProcess("proc").startEvent().endEvent().done();
     deployment(model);
 
-    Calendar hourBeforNow = (Calendar) now.clone();
-    hourBeforNow.add(Calendar.MILLISECOND, -1);
+    Calendar hourBeforeNow = (Calendar) now.clone();
+    hourBeforeNow.add(Calendar.HOUR, -1);
 
     runtimeService.startProcessInstanceByKey("proc");
 
@@ -1002,7 +1002,7 @@ public void testHistoricProcInstExecuteActivityBefore() {
     assertNotNull(historicProcessInstance);
 
     //when query historic proc inst which executes an activity an hour before the starting time
-    historicProcessInstance = historyService.createHistoricProcessInstanceQuery().executeActivityBefore(hourBeforNow.getTime()).singleResult();
+    historicProcessInstance = historyService.createHistoricProcessInstanceQuery().executeActivityBefore(hourBeforeNow.getTime()).singleResult();
 
     //then query returns no result
     assertNull(historicProcessInstance);

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/callbacks/EjbPALifecycleCallbacksTest.java
Patch:
@@ -33,7 +33,6 @@ public static WebArchive createDeployment() {
 
     WebArchive archive = ShrinkWrap.create(WebArchive.class, "test.war")
         .addClass(CustomEjbProcessApplication.class)
-        .addAsLibraries(purgeDatabaseServlet())
         .addClass(AbstractFoxPlatformIntegrationTest.class);
 
     return archive;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/callbacks/TestPostDeployFailure_OTHERS.java
Patch:
@@ -12,12 +12,13 @@
  */
 package org.camunda.bpm.integrationtest.deployment.callbacks;
 
+import org.junit.Assert;
+
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.arquillian.container.test.api.OperateOnDeployment;
 import org.jboss.arquillian.junit.Arquillian;
 import org.jboss.shrinkwrap.api.spec.WebArchive;
-import org.junit.Assert;
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/callbacks/apps/PostDeployInjectApp.java
Patch:
@@ -12,14 +12,14 @@
  */
 package org.camunda.bpm.integrationtest.deployment.callbacks.apps;
 
+import java.util.List;
+
 import org.camunda.bpm.application.PostDeploy;
 import org.camunda.bpm.application.ProcessApplication;
 import org.camunda.bpm.application.ProcessApplicationInfo;
 import org.camunda.bpm.application.impl.ServletProcessApplication;
 import org.camunda.bpm.engine.ProcessEngine;
 
-import java.util.List;
-
 @ProcessApplication
 public class PostDeployInjectApp extends ServletProcessApplication {
   

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/cfg/TestCustomProcessesXmlFileLocation.java
Patch:
@@ -42,9 +42,8 @@ public static WebArchive processArchive() {
         .addAsResource("org/camunda/bpm/integrationtest/deployment/cfg/processes.xml", "my/alternate/location/processes.xml")
         .addClass(AbstractFoxPlatformIntegrationTest.class)
         .addClass(CustomProcessApplication.class)
-        .addAsResource("org/camunda/bpm/integrationtest/deployment/cfg/invoice-it.bpmn20.xml")
-        .addAsLibraries(purgeDatabaseServlet());
-
+        .addAsResource("org/camunda/bpm/integrationtest/deployment/cfg/invoice-it.bpmn20.xml");
+    
     return archive;
     
   }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/ear/TestFoxPlatformClientAsEjbModule_onePaAsLib.java
Patch:
@@ -74,10 +74,9 @@ public static EnterpriseArchive onePaAsLib() {
       .addAsWebInfResource(EmptyAsset.INSTANCE, "beans.xml")
       .setManifest(new ByteArrayAsset(("Class-Path: " + foxPlatformClientJar.getName()+"\n").getBytes()))
       .addClass(AbstractFoxPlatformIntegrationTest.class)
-      .addClass(TestFoxPlatformClientAsEjbModule_onePaAsLib.class)
-      .addAsLibraries(purgeDatabaseServlet());
+      .addClass(TestFoxPlatformClientAsEjbModule_onePaAsLib.class);
 
-    return ShrinkWrap.create(EnterpriseArchive.class, "onePaAsLib.ear")
+    return ShrinkWrap.create(EnterpriseArchive.class, "onePaAsLib.ear")            
       .addAsLibrary(processArchiveJar)
       .addAsModule(foxPlatformClientJar)
       .addAsModule(testJar)

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/ear/beans/NamedCdiBean.java
Patch:
@@ -12,11 +12,11 @@
  */
 package org.camunda.bpm.integrationtest.deployment.ear.beans;
 
+import javax.inject.Named;
+
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
-import javax.inject.Named;
-
 /**
  * @author Roman Smirnov
  */

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/spring/SpringLookupManagedProcessEngineTest.java
Patch:
@@ -39,8 +39,7 @@ public static WebArchive processArchive() {
       .addAsWebInfResource("org/camunda/bpm/integrationtest/deployment/spring/SpringLookupManagedProcessEngineTest-context.xml", "applicationContext.xml")
       .addAsLibraries(DeploymentHelper.getEngineSpring())
       .addAsManifestResource("org/camunda/bpm/integrationtest/deployment/spring/jboss-deployment-structure.xml", "jboss-deployment-structure.xml")
-      .addAsWebInfResource("org/camunda/bpm/integrationtest/deployment/spring/web.xml", "web.xml")
-      .addAsLibraries(purgeDatabaseServlet());
+      .addAsWebInfResource("org/camunda/bpm/integrationtest/deployment/spring/web.xml", "web.xml");
   }
   
     

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/spring/SpringServletPALifecycleTest.java
Patch:
@@ -38,9 +38,7 @@ public static WebArchive processArchive() {
       .addClass(CustomSpringServletProcessApplication.class)
       .addAsWebInfResource("org/camunda/bpm/integrationtest/deployment/spring/SpringServletPALifecycleTest-context.xml", "applicationContext.xml")
       .addAsLibraries(DeploymentHelper.getEngineSpring())
-      .addAsLibraries(purgeDatabaseServlet())
       .addAsWebInfResource("org/camunda/bpm/integrationtest/deployment/spring/web.xml", "web.xml");
-
   }
 
   @Test

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentCustomPAName.java
Patch:
@@ -34,13 +34,10 @@ public class TestWarDeploymentCustomPAName extends AbstractFoxPlatformIntegratio
 
   @Deployment
   public static WebArchive processArchive() {
-    DEPLOYMENT_NAMES.add("pa1");
-
     return ShrinkWrap.create(WebArchive.class, "pa1.war")
         .addAsResource("META-INF/processes.xml")
         .addClass(AbstractFoxPlatformIntegrationTest.class)
         .addClass(CustomNameServletPA.class)
-        .addAsLibraries(purgeDatabaseServlet())
         .addAsResource("org/camunda/bpm/integrationtest/testDeployProcessArchive.bpmn20.xml");
   }
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentDeployChangedOnlyWithJarAsLib.java
Patch:
@@ -97,15 +97,12 @@ public static WebArchive archive2() {
         .addAsLibraries(DeploymentHelper.getEngineCdi())
 
         .addAsLibraries(processArchiveJar)
-        .addAsLibraries(purgeDatabaseServlet())
 
         .addClass(AbstractFoxPlatformIntegrationTest.class)
         .addClass(TestWarDeploymentDeployChangedOnlyWithJarAsLib.class);
 
     TestContainer.addContainerSpecificResources(archive);
 
-    DEPLOYMENT_NAMES.add("pa2");
-
     return archive;
   }
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentIsDeployChangedOnly.java
Patch:
@@ -14,6 +14,8 @@
  * limitations under the License.
  */
 package org.camunda.bpm.integrationtest.deployment.war;
+import java.util.List;
+import java.util.Set;
 
 import org.camunda.bpm.BpmPlatform;
 import org.camunda.bpm.ProcessApplicationService;
@@ -29,9 +31,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import java.util.List;
-import java.util.Set;
-
 
 @RunWith(Arquillian.class)
 public class TestWarDeploymentIsDeployChangedOnly extends AbstractFoxPlatformIntegrationTest {

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentResumePrevious.java
Patch:
@@ -14,6 +14,8 @@
  * limitations under the License.
  */
 package org.camunda.bpm.integrationtest.deployment.war;
+import java.util.List;
+import java.util.Set;
 
 import org.camunda.bpm.BpmPlatform;
 import org.camunda.bpm.ProcessApplicationService;
@@ -29,9 +31,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import java.util.List;
-import java.util.Set;
-
 
 
 @RunWith(Arquillian.class)

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentResumePreviousOff.java
Patch:
@@ -14,6 +14,8 @@
  * limitations under the License.
  */
 package org.camunda.bpm.integrationtest.deployment.war;
+import java.util.List;
+import java.util.Set;
 
 import org.camunda.bpm.BpmPlatform;
 import org.camunda.bpm.ProcessApplicationService;
@@ -29,9 +31,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import java.util.List;
-import java.util.Set;
-
 
 
 @RunWith(Arquillian.class)

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentWithMultiplePasAsSubdeployment1.java
Patch:
@@ -16,6 +16,8 @@
 
 package org.camunda.bpm.integrationtest.deployment.war;
 
+import org.junit.Assert;
+
 import org.camunda.bpm.engine.repository.DeploymentQuery;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
@@ -29,7 +31,6 @@
 import org.jboss.shrinkwrap.api.asset.EmptyAsset;
 import org.jboss.shrinkwrap.api.spec.JavaArchive;
 import org.jboss.shrinkwrap.api.spec.WebArchive;
-import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -114,7 +115,6 @@ public static WebArchive processArchive() {
             
             .addAsLibraries(pa2)
             .addAsLibraries(pa3)
-            .addAsLibraries(purgeDatabaseServlet())
             
             .addAsResource(pa1ProcessesXml, "META-INF/processes.xml")
             .addAsResource(processAssets[0], "process0.bpmn")
@@ -124,7 +124,7 @@ public static WebArchive processArchive() {
             .addClass(AbstractFoxPlatformIntegrationTest.class);
     
     TestContainer.addContainerSpecificResources(deployment);
-
+    
     return deployment;
     
   }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentWithMultiplePasAsSubdeployment2.java
Patch:
@@ -16,6 +16,8 @@
 
 package org.camunda.bpm.integrationtest.deployment.war;
 
+import org.junit.Assert;
+
 import org.camunda.bpm.engine.repository.DeploymentQuery;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
@@ -29,7 +31,6 @@
 import org.jboss.shrinkwrap.api.asset.EmptyAsset;
 import org.jboss.shrinkwrap.api.spec.JavaArchive;
 import org.jboss.shrinkwrap.api.spec.WebArchive;
-import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -113,7 +114,6 @@ public static WebArchive processArchive() {
             
             .addAsLibraries(pa2)
             .addAsLibraries(pa3)
-            .addAsLibraries(purgeDatabaseServlet())
             
             .addAsResource(pa1ProcessesXml, "META-INF/processes.xml")
             .addAsResource(processAssets[0], "process0.bpmn")

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentWithMultiplePasAsSubdeployment3.java
Patch:
@@ -16,6 +16,8 @@
 
 package org.camunda.bpm.integrationtest.deployment.war;
 
+import org.junit.Assert;
+
 import org.camunda.bpm.engine.repository.DeploymentQuery;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
@@ -29,7 +31,6 @@
 import org.jboss.shrinkwrap.api.asset.EmptyAsset;
 import org.jboss.shrinkwrap.api.spec.JavaArchive;
 import org.jboss.shrinkwrap.api.spec.WebArchive;
-import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -85,7 +86,6 @@ public static WebArchive processArchive() {
             .addAsLibraries(DeploymentHelper.getEngineCdi())
             
             .addAsLibraries(pa2)
-            .addAsLibraries(purgeDatabaseServlet())
             
             .addAsResource(processAssets[0], "process0.bpmn")
             .addAsResource(processAssets[1], "directory/process1.bpmn")

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentWithMultiplePasAsSubdeployment4.java
Patch:
@@ -16,6 +16,8 @@
 
 package org.camunda.bpm.integrationtest.deployment.war;
 
+import org.junit.Assert;
+
 import org.camunda.bpm.engine.repository.DeploymentQuery;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
@@ -29,7 +31,6 @@
 import org.jboss.shrinkwrap.api.asset.EmptyAsset;
 import org.jboss.shrinkwrap.api.spec.JavaArchive;
 import org.jboss.shrinkwrap.api.spec.WebArchive;
-import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -106,7 +107,6 @@ public static WebArchive processArchive() {
             
             .addAsLibraries(pa2)
             .addAsLibraries(pa3)
-            .addAsLibraries(purgeDatabaseServlet())
 
             .addClass(AbstractFoxPlatformIntegrationTest.class);    
     

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentWithMultiplePasAsSubdeployment5.java
Patch:
@@ -16,6 +16,8 @@
 
 package org.camunda.bpm.integrationtest.deployment.war;
 
+import org.junit.Assert;
+
 import org.camunda.bpm.engine.repository.DeploymentQuery;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
@@ -29,7 +31,6 @@
 import org.jboss.shrinkwrap.api.asset.EmptyAsset;
 import org.jboss.shrinkwrap.api.spec.JavaArchive;
 import org.jboss.shrinkwrap.api.spec.WebArchive;
-import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -100,7 +101,6 @@ public static WebArchive processArchive() {
             
             .addAsLibraries(pa2)
             .addAsLibraries(pa3)
-            .addAsLibraries(purgeDatabaseServlet())
             
             .addAsResource(pa1ProcessesXml, "META-INF/processes.xml")
             .addAsResource(processAssets[0], "process0.bpmn")

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentWithProcessEnginePlugin.java
Patch:
@@ -47,7 +47,6 @@ public static WebArchive processArchive() {
         .addClass(GroovyProcessEnginePlugin.class)
         .addAsResource("org/camunda/bpm/integrationtest/deployment/war/groovy.bpmn20.xml")
         .addAsResource("org/camunda/bpm/integrationtest/deployment/war/groovyAsync.bpmn20.xml")
-        .addAsLibraries(purgeDatabaseServlet())
         .addAsLibraries(Maven.resolver()
             .offline()
             .loadPomFromFile("pom.xml")

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentWithoutDiagram.java
Patch:
@@ -15,6 +15,8 @@
  */
 package org.camunda.bpm.integrationtest.deployment.war;
 
+import java.io.IOException;
+
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.camunda.bpm.integrationtest.util.TestHelper;
 import org.jboss.arquillian.container.test.api.Deployment;
@@ -23,8 +25,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import java.io.IOException;
-
 
 /**
  * @author Christian Lipphardt

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentWithoutProcessesXml.java
Patch:
@@ -42,7 +42,6 @@ public static WebArchive processArchive() {
     WebArchive deployment = ShrinkWrap.create(WebArchive.class, "test.war")
             .addAsWebInfResource(EmptyAsset.INSTANCE, "beans.xml")
             .addAsLibraries(DeploymentHelper.getEngineCdi())
-            .addAsLibraries(purgeDatabaseServlet())
             .addClass(AbstractFoxPlatformIntegrationTest.class);
     
     TestContainer.addContainerSpecificResources(deployment);

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/bpmnmodelapi/beans/BpmnElementRetrievalDelegate.java
Patch:
@@ -12,14 +12,14 @@
  */
 package org.camunda.bpm.integrationtest.functional.bpmnmodelapi.beans;
 
+import javax.enterprise.context.ApplicationScoped;
+import javax.inject.Named;
+
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 import org.camunda.bpm.model.bpmn.BpmnModelInstance;
 import org.camunda.bpm.model.bpmn.instance.FlowElement;
 
-import javax.enterprise.context.ApplicationScoped;
-import javax.inject.Named;
-
 /**
  * @author Daniel Meyer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/CdiBeanCallActivityResolutionTest.java
Patch:
@@ -59,13 +59,10 @@ public static WebArchive clientDeployment() {
     WebArchive deployment = ShrinkWrap.create(WebArchive.class, "client.war")
             .addAsWebInfResource(EmptyAsset.INSTANCE, "beans.xml")
             .addClass(AbstractFoxPlatformIntegrationTest.class)
-            .addAsLibraries(purgeDatabaseServlet())
             .addAsLibraries(DeploymentHelper.getEngineCdi());
 
     TestContainer.addContainerSpecificResourcesForNonPa(deployment);
 
-    DEPLOYMENT_NAMES.add("client");
-
     return deployment;
   }
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/beans/CaseVariableBean.java
Patch:
@@ -12,12 +12,12 @@
  */
 package org.camunda.bpm.integrationtest.functional.cdi.beans;
 
-import org.camunda.bpm.engine.CaseService;
-import org.camunda.bpm.engine.delegate.DelegateCaseExecution;
-
 import javax.inject.Inject;
 import javax.inject.Named;
 
+import org.camunda.bpm.engine.CaseService;
+import org.camunda.bpm.engine.delegate.DelegateCaseExecution;
+
 /**
  * @author Thorben Lindhauer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/beans/ConditionalFlowBean.java
Patch:
@@ -12,12 +12,12 @@
  */
 package org.camunda.bpm.integrationtest.functional.cdi.beans;
 
-import org.camunda.bpm.engine.RuntimeService;
-import org.camunda.bpm.engine.runtime.ProcessInstance;
-
 import javax.inject.Inject;
 import javax.inject.Named;
 
+import org.camunda.bpm.engine.RuntimeService;
+import org.camunda.bpm.engine.runtime.ProcessInstance;
+
 /**
  * @author Thorben Lindhauer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/beans/ExampleDelegateBean.java
Patch:
@@ -15,11 +15,11 @@
  */
 package org.camunda.bpm.integrationtest.functional.cdi.beans;
 
+import javax.inject.Named;
+
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
-import javax.inject.Named;
-
 @Named
 public class ExampleDelegateBean implements JavaDelegate {
   

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/beans/ExampleSignallableActivityBehaviorBean.java
Patch:
@@ -12,12 +12,12 @@
  */
 package org.camunda.bpm.integrationtest.functional.cdi.beans;
 
+import javax.inject.Named;
+
 import org.camunda.bpm.engine.impl.bpmn.behavior.AbstractBpmnActivityBehavior;
 import org.camunda.bpm.engine.impl.pvm.delegate.ActivityExecution;
 import org.camunda.bpm.engine.impl.pvm.delegate.SignallableActivityBehavior;
 
-import javax.inject.Named;
-
 /**
  * @author Daniel Meyer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/beans/ProcessVariableBean.java
Patch:
@@ -12,12 +12,12 @@
  */
 package org.camunda.bpm.integrationtest.functional.cdi.beans;
 
-import org.camunda.bpm.engine.RuntimeService;
-import org.camunda.bpm.engine.runtime.ProcessInstance;
-
 import javax.inject.Inject;
 import javax.inject.Named;
 
+import org.camunda.bpm.engine.RuntimeService;
+import org.camunda.bpm.engine.runtime.ProcessInstance;
+
 /**
  * @author Thorben Lindhauer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/beans/RequestScopedDelegateBean.java
Patch:
@@ -1,11 +1,11 @@
 package org.camunda.bpm.integrationtest.functional.cdi.beans;
 
-import org.camunda.bpm.engine.delegate.DelegateExecution;
-import org.camunda.bpm.engine.delegate.JavaDelegate;
-
 import javax.enterprise.context.RequestScoped;
 import javax.inject.Named;
 
+import org.camunda.bpm.engine.delegate.DelegateExecution;
+import org.camunda.bpm.engine.delegate.JavaDelegate;
+
 /**
  * A {@link RequestScoped} bean
  * 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/beans/TimerStartBean.java
Patch:
@@ -12,13 +12,14 @@
  */
 package org.camunda.bpm.integrationtest.functional.cdi.beans;
 
-import javax.enterprise.context.ApplicationScoped;
-import javax.inject.Named;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
 import java.util.Date;
 
+import javax.enterprise.context.ApplicationScoped;
+import javax.inject.Named;
+
 /**
  * @author Thorben Lindhauer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/classloading/beans/ExampleCaseExecutionListener.java
Patch:
@@ -12,11 +12,11 @@
  */
 package org.camunda.bpm.integrationtest.functional.classloading.beans;
 
+import javax.inject.Named;
+
 import org.camunda.bpm.engine.delegate.CaseExecutionListener;
 import org.camunda.bpm.engine.delegate.DelegateCaseExecution;
 
-import javax.inject.Named;
-
 /**
  * @author Roman Smirnov
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/classloading/beans/ExampleTaskListener.java
Patch:
@@ -1,10 +1,10 @@
 package org.camunda.bpm.integrationtest.functional.classloading.beans;
 
+import javax.inject.Named;
+
 import org.camunda.bpm.engine.delegate.DelegateTask;
 import org.camunda.bpm.engine.delegate.TaskListener;
 
-import javax.inject.Named;
-
 @Named(value = "taskListener")
 public class ExampleTaskListener implements TaskListener {
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/classloading/deployment/RedeployProcessClassloadingTest.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.camunda.bpm.integrationtest.functional.classloading.deployment;
 
+import org.camunda.bpm.integrationtest.functional.classloading.beans.ExampleDelegate;
 import org.camunda.bpm.integrationtest.functional.classloading.deployment.beans.MyCustomDelegate;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.camunda.bpm.integrationtest.util.TestContainer;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/classloading/ear/TestJavaDelegateResolution_ClientAsLibInWebModule.java
Patch:
@@ -14,6 +14,7 @@
  * limitations under the License.
  */
 package org.camunda.bpm.integrationtest.functional.classloading.ear;
+import javax.transaction.SystemException;
 
 import org.camunda.bpm.integrationtest.functional.classloading.beans.ExampleDelegate;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
@@ -28,8 +29,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import javax.transaction.SystemException;
-
 
 /**
  * <p>Deploys an EAR application which contains a WAR process archive, and a client application deployed as a war</p>

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/connect/PaConnectSupportTest.java
Patch:
@@ -13,6 +13,9 @@
 
 package org.camunda.bpm.integrationtest.functional.connect;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+
 import org.camunda.bpm.engine.task.Task;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.camunda.connect.Connectors;
@@ -22,9 +25,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
 /**
  * <p>Smoketest Make sure camunda connect can be used in a process application </p>
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/connect/TestConnector.java
Patch:
@@ -13,13 +13,13 @@
 
 package org.camunda.bpm.integrationtest.functional.connect;
 
+import java.util.Collection;
+import java.util.List;
+
 import org.camunda.connect.spi.Connector;
 import org.camunda.connect.spi.ConnectorRequestInterceptor;
 import org.camunda.connect.spi.ConnectorResponse;
 
-import java.util.Collection;
-import java.util.List;
-
 public class TestConnector implements Connector<TestConnectorRequest> {
 
   public static final String ID = "pa-test-connector";

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/connect/TestConnectorRequest.java
Patch:
@@ -13,11 +13,11 @@
 
 package org.camunda.bpm.integrationtest.functional.connect;
 
-import org.camunda.connect.spi.ConnectorRequest;
-
 import java.util.HashMap;
 import java.util.Map;
 
+import org.camunda.connect.spi.ConnectorRequest;
+
 public class TestConnectorRequest implements ConnectorRequest<TestConnectorResponse> {
 
   protected Map<String, Object> requestParameters;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/connect/TestConnectorResponse.java
Patch:
@@ -13,10 +13,10 @@
 
 package org.camunda.bpm.integrationtest.functional.connect;
 
-import org.camunda.connect.spi.ConnectorResponse;
-
 import java.util.Map;
 
+import org.camunda.connect.spi.ConnectorResponse;
+
 public class TestConnectorResponse implements ConnectorResponse {
 
   protected Map<String, Object> responseParameters;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/context/ProcessApplicationWithInvocationContext.java
Patch:
@@ -12,13 +12,13 @@
  */
 package org.camunda.bpm.integrationtest.functional.context;
 
+import java.util.concurrent.Callable;
+
 import org.camunda.bpm.application.InvocationContext;
 import org.camunda.bpm.application.ProcessApplication;
 import org.camunda.bpm.application.ProcessApplicationExecutionException;
 import org.camunda.bpm.application.impl.ServletProcessApplication;
 
-import java.util.concurrent.Callable;
-
 @ProcessApplication("app")
 public class ProcessApplicationWithInvocationContext extends ServletProcessApplication {
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/context/beans/CalledProcessDelegate.java
Patch:
@@ -15,13 +15,13 @@
  */
 package org.camunda.bpm.integrationtest.functional.context.beans;
 
+import javax.inject.Inject;
+import javax.inject.Named;
+
 import org.camunda.bpm.engine.cdi.BusinessProcess;
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
-import javax.inject.Inject;
-import javax.inject.Named;
-
 /**
  * 
  * @author Daniel Meyer

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/context/beans/DelegateAfter.java
Patch:
@@ -15,13 +15,13 @@
  */
 package org.camunda.bpm.integrationtest.functional.context.beans;
 
+import javax.inject.Inject;
+import javax.inject.Named;
+
 import org.camunda.bpm.engine.cdi.BusinessProcess;
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
-import javax.inject.Inject;
-import javax.inject.Named;
-
 /**
  * 
  * @author Daniel Meyer

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/context/beans/DelegateBefore.java
Patch:
@@ -15,13 +15,13 @@
  */
 package org.camunda.bpm.integrationtest.functional.context.beans;
 
+import javax.inject.Inject;
+import javax.inject.Named;
+
 import org.camunda.bpm.engine.cdi.BusinessProcess;
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
-import javax.inject.Inject;
-import javax.inject.Named;
-
 /**
  * 
  * @author Daniel Meyer

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/delegation/beans/DelegateVarMapping.java
Patch:
@@ -15,12 +15,11 @@
  */
 package org.camunda.bpm.integrationtest.functional.delegation.beans;
 
+import javax.inject.Named;
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.DelegateVariableMapping;
 import org.camunda.bpm.engine.delegate.VariableScope;
 import org.camunda.bpm.engine.variable.VariableMap;
-
-import javax.inject.Named;
 /**
  *
  * @author Christopher Zell <christopher.zell@camunda.com>

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/SLSBExceptionInDelegateTest.java
Patch:
@@ -1,5 +1,8 @@
 package org.camunda.bpm.integrationtest.functional.ejb;
 
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+
 import org.camunda.bpm.engine.runtime.Incident;
 import org.camunda.bpm.engine.runtime.Job;
 import org.camunda.bpm.integrationtest.functional.ejb.beans.SLSBClientDelegate;
@@ -11,9 +14,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
-
 /**
  * Testcase verifying that if an exception is thrown inside an EJB the original
  * exception reaches the caller

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/beans/SFSBClientDelegate.java
Patch:
@@ -1,11 +1,11 @@
 package org.camunda.bpm.integrationtest.functional.ejb.beans;
 
-import org.camunda.bpm.engine.delegate.DelegateExecution;
-import org.camunda.bpm.engine.delegate.JavaDelegate;
-
 import javax.ejb.EJB;
 import javax.inject.Named;
 
+import org.camunda.bpm.engine.delegate.DelegateExecution;
+import org.camunda.bpm.engine.delegate.JavaDelegate;
+
 /**
  * This is a CDI bean delegating to a SFSB from the same deployment
  * 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/beans/SLSBClientDelegate.java
Patch:
@@ -1,11 +1,11 @@
 package org.camunda.bpm.integrationtest.functional.ejb.beans;
 
-import org.camunda.bpm.engine.delegate.DelegateExecution;
-import org.camunda.bpm.engine.delegate.JavaDelegate;
-
 import javax.ejb.EJB;
 import javax.inject.Named;
 
+import org.camunda.bpm.engine.delegate.DelegateExecution;
+import org.camunda.bpm.engine.delegate.JavaDelegate;
+
 /**
  * This is a CDI bean delegating to a SLSB from the same deployment
  * 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/beans/SingletonBeanClientDelegate.java
Patch:
@@ -1,11 +1,11 @@
 package org.camunda.bpm.integrationtest.functional.ejb.beans;
 
-import org.camunda.bpm.engine.delegate.DelegateExecution;
-import org.camunda.bpm.engine.delegate.JavaDelegate;
-
 import javax.ejb.EJB;
 import javax.inject.Named;
 
+import org.camunda.bpm.engine.delegate.DelegateExecution;
+import org.camunda.bpm.engine.delegate.JavaDelegate;
+
 /**
  * This is a CDI bean delegating to a SingletonBeanClientDelegate from the same deployment
  * 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/local/bean/InvokeStartProcessDelegateSLSB.java
Patch:
@@ -1,11 +1,11 @@
 package org.camunda.bpm.integrationtest.functional.ejb.local.bean;
 
-import org.camunda.bpm.engine.delegate.DelegateExecution;
-import org.camunda.bpm.engine.delegate.JavaDelegate;
-
 import javax.ejb.EJB;
 import javax.inject.Named;
 
+import org.camunda.bpm.engine.delegate.DelegateExecution;
+import org.camunda.bpm.engine.delegate.JavaDelegate;
+
 /**
  * A CDI bean delegating to the local business
  * interface of a SLSB from a different application.

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/local/bean/LocalSFSBClientDelegateBean.java
Patch:
@@ -1,11 +1,11 @@
 package org.camunda.bpm.integrationtest.functional.ejb.local.bean;
 
-import org.camunda.bpm.engine.delegate.DelegateExecution;
-import org.camunda.bpm.engine.delegate.JavaDelegate;
-
 import javax.ejb.EJB;
 import javax.inject.Named;
 
+import org.camunda.bpm.engine.delegate.DelegateExecution;
+import org.camunda.bpm.engine.delegate.JavaDelegate;
+
 /**
  * A CDI bean delegating to the local business 
  * interface of a SFSB from a different application.

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/local/bean/LocalSLSBClientDelegateBean.java
Patch:
@@ -1,11 +1,11 @@
 package org.camunda.bpm.integrationtest.functional.ejb.local.bean;
 
-import org.camunda.bpm.engine.delegate.DelegateExecution;
-import org.camunda.bpm.engine.delegate.JavaDelegate;
-
 import javax.ejb.EJB;
 import javax.inject.Named;
 
+import org.camunda.bpm.engine.delegate.DelegateExecution;
+import org.camunda.bpm.engine.delegate.JavaDelegate;
+
 /**
  * A CDI bean delegating to the local business 
  * interface of a SLSB from a different application.

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/local/bean/LocalSingletonBeanClientDelegateBean.java
Patch:
@@ -1,11 +1,11 @@
 package org.camunda.bpm.integrationtest.functional.ejb.local.bean;
 
-import org.camunda.bpm.engine.delegate.DelegateExecution;
-import org.camunda.bpm.engine.delegate.JavaDelegate;
-
 import javax.ejb.EJB;
 import javax.inject.Named;
 
+import org.camunda.bpm.engine.delegate.DelegateExecution;
+import org.camunda.bpm.engine.delegate.JavaDelegate;
+
 /**
  * A CDI bean delegating to the local business 
  * interface of a Singleton Bean from a different application.

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/local/bean/StartProcessSLSB.java
Patch:
@@ -1,10 +1,10 @@
 package org.camunda.bpm.integrationtest.functional.ejb.local.bean;
 
-import org.camunda.bpm.BpmPlatform;
-
 import javax.ejb.Local;
 import javax.ejb.Stateless;
 
+import org.camunda.bpm.BpmPlatform;
+
 /**
  * A SLSB with a local business interface
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/remote/bean/RemoteSFSBClientDelegateBean.java
Patch:
@@ -1,12 +1,12 @@
 package org.camunda.bpm.integrationtest.functional.ejb.remote.bean;
 
+import javax.inject.Named;
+import javax.naming.InitialContext;
+
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 import org.camunda.bpm.integrationtest.util.TestConstants;
 
-import javax.inject.Named;
-import javax.naming.InitialContext;
-
 
 /**
  * A CDI bean delegating to the remote business

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/remote/bean/RemoteSLSBClientDelegateBean.java
Patch:
@@ -1,12 +1,12 @@
 package org.camunda.bpm.integrationtest.functional.ejb.remote.bean;
 
+import javax.inject.Named;
+import javax.naming.InitialContext;
+
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 import org.camunda.bpm.integrationtest.util.TestConstants;
 
-import javax.inject.Named;
-import javax.naming.InitialContext;
-
 
 /**
  * A CDI bean delegating to the remote business

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/remote/bean/RemoteSingletonBeanClientDelegateBean.java
Patch:
@@ -1,12 +1,12 @@
 package org.camunda.bpm.integrationtest.functional.ejb.remote.bean;
 
+import javax.inject.Named;
+import javax.naming.InitialContext;
+
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 import org.camunda.bpm.integrationtest.util.TestConstants;
 
-import javax.inject.Named;
-import javax.naming.InitialContext;
-
 
 /**
  * A CDI bean delegating to the remote business

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/request/beans/InvocationCounterDelegateBean.java
Patch:
@@ -1,12 +1,12 @@
 package org.camunda.bpm.integrationtest.functional.ejb.request.beans;
 
+import javax.inject.Named;
+import javax.naming.InitialContext;
+
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 import org.camunda.bpm.integrationtest.util.TestConstants;
 
-import javax.inject.Named;
-import javax.naming.InitialContext;
-
 
 /**
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/request/beans/InvocationCounterDelegateBeanLocal.java
Patch:
@@ -1,11 +1,11 @@
 package org.camunda.bpm.integrationtest.functional.ejb.request.beans;
 
-import org.camunda.bpm.engine.delegate.DelegateExecution;
-import org.camunda.bpm.engine.delegate.JavaDelegate;
-
 import javax.ejb.EJB;
 import javax.inject.Named;
 
+import org.camunda.bpm.engine.delegate.DelegateExecution;
+import org.camunda.bpm.engine.delegate.JavaDelegate;
+
 /**
  * 
  * @author Daniel Meyer

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/request/beans/RequestScopedSFSBDelegate.java
Patch:
@@ -1,12 +1,12 @@
 package org.camunda.bpm.integrationtest.functional.ejb.request.beans;
 
-import org.camunda.bpm.engine.delegate.DelegateExecution;
-import org.camunda.bpm.engine.delegate.JavaDelegate;
-
 import javax.ejb.Stateful;
 import javax.enterprise.context.RequestScoped;
 import javax.inject.Named;
 
+import org.camunda.bpm.engine.delegate.DelegateExecution;
+import org.camunda.bpm.engine.delegate.JavaDelegate;
+
 /**
  * A request scoped Stateful Session Bean acting as as a JavaDelegate
  * 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/el/ResolveBeanFromDmnTest.java
Patch:
@@ -12,6 +12,8 @@
  */
 package org.camunda.bpm.integrationtest.functional.el;
 
+import static org.junit.Assert.assertNotNull;
+
 import org.camunda.bpm.engine.runtime.VariableInstance;
 import org.camunda.bpm.engine.task.Task;
 import org.camunda.bpm.integrationtest.functional.el.beans.GreeterBean;
@@ -22,8 +24,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import static org.junit.Assert.assertNotNull;
-
 /**
  * @author Daniel Meyer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/error/ThrowErrorDelegate.java
Patch:
@@ -13,12 +13,12 @@
 
 package org.camunda.bpm.integrationtest.functional.error;
 
+import javax.inject.Named;
+
 import org.camunda.bpm.engine.delegate.BpmnError;
 import org.camunda.bpm.engine.impl.bpmn.behavior.AbstractBpmnActivityBehavior;
 import org.camunda.bpm.engine.impl.pvm.delegate.ActivityExecution;
 
-import javax.inject.Named;
-
 @Named
 public class ThrowErrorDelegate extends AbstractBpmnActivityBehavior {
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/event/CdiProcessApplicationEventSupportTest.java
Patch:
@@ -41,7 +41,6 @@ public static WebArchive createDeployment() {
     WebArchive archive = ShrinkWrap.create(WebArchive.class, "test.war")
         .addAsWebInfResource(EmptyAsset.INSTANCE, "beans.xml")
         .addAsLibraries(DeploymentHelper.getEngineCdi())
-        .addAsLibraries(purgeDatabaseServlet())
         .addAsResource("META-INF/processes.xml", "META-INF/processes.xml")
         .addClass(AbstractFoxPlatformIntegrationTest.class)
         .addClass(CdiEventSupportProcessApplication.class)

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/event/ProcessApplicationExecutionListenerTest.java
Patch:
@@ -39,7 +39,6 @@ public static WebArchive createDeployment() {
       .addAsWebInfResource(EmptyAsset.INSTANCE, "beans.xml")
       .addAsLibraries(DeploymentHelper.getEngineCdi())
       .addAsResource("META-INF/processes.xml", "META-INF/processes.xml")
-      .addAsLibraries(purgeDatabaseServlet())
       .addClass(AbstractFoxPlatformIntegrationTest.class)
       .addClass(ExecutionListenerProcessApplication.class)
       .addAsResource("org/camunda/bpm/integrationtest/functional/event/ProcessApplicationEventSupportTest.testExecutionListener.bpmn20.xml");

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/event/ProcessApplicationTaskListenerTest.java
Patch:
@@ -44,7 +44,6 @@ public static WebArchive createDeployment() {
         .addAsWebInfResource(EmptyAsset.INSTANCE, "beans.xml")
         .addAsLibraries(DeploymentHelper.getEngineCdi())
         .addAsResource("META-INF/processes.xml", "META-INF/processes.xml")
-        .addAsLibraries(purgeDatabaseServlet())
         .addClass(AbstractFoxPlatformIntegrationTest.class)
         .addClass(TaskListenerProcessApplication.class)
         .addAsResource("org/camunda/bpm/integrationtest/functional/event/ProcessApplicationEventSupportTest.testTaskListener.bpmn20.xml");

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/event/beans/EventObserverCdiBean.java
Patch:
@@ -12,12 +12,12 @@
  */
 package org.camunda.bpm.integrationtest.functional.event.beans;
 
-import org.camunda.bpm.engine.cdi.BusinessProcess;
-import org.camunda.bpm.engine.cdi.BusinessProcessEvent;
-
 import javax.enterprise.event.Observes;
 import javax.inject.Inject;
 
+import org.camunda.bpm.engine.cdi.BusinessProcess;
+import org.camunda.bpm.engine.cdi.BusinessProcessEvent;
+
 /**
  * @author Daniel Meyer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/metadata/engine/TestProcessEnginesXmlInProcessApplication.java
Patch:
@@ -27,7 +27,6 @@ public static WebArchive processArchive() {
         .addAsWebInfResource(EmptyAsset.INSTANCE, "beans.xml")
         .addAsLibraries(DeploymentHelper.getEngineCdi())
         .addAsResource("singleEngine.xml", "META-INF/processes.xml")
-        .addAsLibraries(purgeDatabaseServlet())
         .addClass(AbstractFoxPlatformIntegrationTest.class);
 
       TestContainer.addContainerSpecificResources(archive);

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/migration/MigrationContextSwitchBeansTest.java
Patch:
@@ -12,6 +12,9 @@
  */
 package org.camunda.bpm.integrationtest.functional.migration;
 
+import java.io.ByteArrayOutputStream;
+import java.util.Arrays;
+
 import org.camunda.bpm.engine.migration.MigrationPlan;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
 import org.camunda.bpm.engine.runtime.Job;
@@ -31,9 +34,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import java.io.ByteArrayOutputStream;
-import java.util.Arrays;
-
 /**
  * @author Thorben Lindhauer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/AbstractPaLocalScriptEngineTest.java
Patch:
@@ -12,6 +12,9 @@
  */
 package org.camunda.bpm.integrationtest.functional.scriptengine;
 
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.fail;
+
 import org.camunda.bpm.application.ProcessApplicationInterface;
 import org.camunda.bpm.application.ProcessApplicationReference;
 import org.camunda.bpm.application.ProcessApplicationUnavailableException;
@@ -26,9 +29,6 @@
 import org.jboss.shrinkwrap.api.asset.StringAsset;
 import org.junit.runner.RunWith;
 
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.fail;
-
 /**
  * @author Roman Smirnov
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/AbstractTemplateScriptEngineSupportTest.java
Patch:
@@ -13,6 +13,8 @@
 
 package org.camunda.bpm.integrationtest.functional.scriptengine;
 
+import java.util.HashMap;
+import java.util.Map;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.camunda.bpm.model.bpmn.Bpmn;
 import org.camunda.bpm.model.bpmn.BpmnModelInstance;
@@ -21,9 +23,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import java.util.HashMap;
-import java.util.Map;
-
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/CamundaScriptResourceTest.java
Patch:
@@ -21,8 +21,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.*;
 
 /**
  * @author Daniel Meyer

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/GroovyPaClassImportTest.java
Patch:
@@ -12,6 +12,9 @@
  */
 package org.camunda.bpm.integrationtest.functional.scriptengine;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+
 import org.camunda.bpm.integrationtest.functional.scriptengine.classes.CustomClass;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.camunda.bpm.model.bpmn.Bpmn;
@@ -24,9 +27,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
 /**
  * @author Daniel Meyer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/PaLocalScriptEngineDisabledCacheTest.java
Patch:
@@ -12,6 +12,8 @@
  */
 package org.camunda.bpm.integrationtest.functional.scriptengine;
 
+import static org.junit.Assert.assertNotEquals;
+
 import org.camunda.bpm.application.AbstractProcessApplication;
 import org.camunda.bpm.integrationtest.functional.scriptengine.engine.AbstractScriptEngineFactory;
 import org.camunda.bpm.integrationtest.functional.scriptengine.engine.DummyScriptEngineFactory;
@@ -20,8 +22,6 @@
 import org.jboss.shrinkwrap.api.spec.WebArchive;
 import org.junit.Test;
 
-import static org.junit.Assert.assertNotEquals;
-
 /**
  * @author Roman Smirnov
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/PaLocalScriptEngineEnabledCacheTest.java
Patch:
@@ -12,6 +12,8 @@
  */
 package org.camunda.bpm.integrationtest.functional.scriptengine;
 
+import static org.junit.Assert.assertEquals;
+
 import org.camunda.bpm.application.AbstractProcessApplication;
 import org.camunda.bpm.integrationtest.functional.scriptengine.engine.AbstractScriptEngineFactory;
 import org.camunda.bpm.integrationtest.functional.scriptengine.engine.DummyScriptEngineFactory;
@@ -20,8 +22,6 @@
 import org.jboss.shrinkwrap.api.spec.WebArchive;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-
 /**
  * @author Roman Smirnov
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/PaLocalScriptEngineSupportTest.java
Patch:
@@ -12,16 +12,16 @@
  */
 package org.camunda.bpm.integrationtest.functional.scriptengine;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+
 import org.camunda.bpm.integrationtest.functional.scriptengine.engine.AbstractScriptEngineFactory;
 import org.camunda.bpm.integrationtest.functional.scriptengine.engine.DummyScriptEngineFactory;
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.shrinkwrap.api.asset.StringAsset;
 import org.jboss.shrinkwrap.api.spec.WebArchive;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
 /**
  * @author Roman Smirnov
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/PythonPaClassImportTest.java
Patch:
@@ -12,6 +12,9 @@
  */
 package org.camunda.bpm.integrationtest.functional.scriptengine;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+
 import org.camunda.bpm.integrationtest.functional.scriptengine.classes.CustomClass;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.camunda.bpm.model.bpmn.Bpmn;
@@ -24,9 +27,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
 /**
  * @author Daniel Meyer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/slf4j/Slf4jClassloadingTest.java
Patch:
@@ -39,7 +39,6 @@ public static WebArchive createDeployment() {
     WebArchive webArchive = ShrinkWrap.create(WebArchive.class, "test.war")
         .addAsResource("META-INF/processes.xml")
         .addClass(AbstractFoxPlatformIntegrationTest.class)
-        .addAsLibraries(purgeDatabaseServlet())
         .addClass(TestLogger.class);
 
     TestContainer.addContainerSpecificResourcesWithoutWeld(webArchive);

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/PaContextSwitchTest.java
Patch:
@@ -52,15 +52,12 @@ public static WebArchive createDeployment1() {
         .addClass(ProcessApplication1.class)
         .addClass(JsonSerializable.class)
         .addClass(RuntimeServiceDelegate.class)
-        .addAsLibraries(purgeDatabaseServlet())
         .addAsResource("org/camunda/bpm/integrationtest/functional/spin/paContextSwitch.bpmn20.xml")
         .addClass(JsonDataFormatConfigurator.class)
         .addAsServiceProvider(DataFormatConfigurator.class, JsonDataFormatConfigurator.class);
 
     TestContainer.addSpinJacksonJsonDataFormat(webArchive);
 
-    DEPLOYMENT_NAMES.add("pa1");
-
     return webArchive;
   }
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/PaDataFormatAndPostDeployTest.java
Patch:
@@ -46,7 +46,6 @@ public static WebArchive createDeployment() {
         .addClass(FooDataFormat.class)
         .addClass(FooDataFormatProvider.class)
         .addClass(FooSpin.class)
-        .addAsLibraries(purgeDatabaseServlet())
         .addAsServiceProvider(DataFormatProvider.class, FooDataFormatProvider.class);
 
     return archive;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/PaDataFormatConfiguratorJodaTest.java
Patch:
@@ -53,14 +53,11 @@ public static WebArchive createDeployment() {
         .addAsResource("org/camunda/bpm/integrationtest/oneTaskProcess.bpmn")
         .addClass(JodaJsonSerializable.class)
         .addClass(JodaJsonDataFormatConfigurator.class)
-         .addAsLibraries(purgeDatabaseServlet())
         .addAsServiceProvider(DataFormatConfigurator.class, JodaJsonDataFormatConfigurator.class);
 
     TestContainer.addSpinJacksonJsonDataFormat(webArchive);
     TestContainer.addJodaTimeJacksonModule(webArchive);
 
-    DEPLOYMENT_NAMES.add("PaDataFormatTest");
-
     return webArchive;
 
   }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/PaDataFormatConfiguratorTest.java
Patch:
@@ -62,9 +62,6 @@ public static WebArchive createDeployment() {
 
     TestContainer.addSpinJacksonJsonDataFormat(webArchive);
 
-    webArchive.addAsLibraries(purgeDatabaseServlet());
-    DEPLOYMENT_NAMES.add("PaDataFormatTest");
-
     return webArchive;
 
   }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/PaDataFormatProviderTest.java
Patch:
@@ -52,9 +52,6 @@ public static WebArchive createDeployment() {
         .addAsServiceProvider(DataFormatProvider.class, FooDataFormatProvider.class)
         .addClass(ReferenceStoringProcessApplication.class);
 
-    webArchive.addAsLibraries(purgeDatabaseServlet());
-    DEPLOYMENT_NAMES.add("PaDataFormatTest");
-
     return webArchive;
   }
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/PaDataformatAndPostDeployApp.java
Patch:
@@ -12,13 +12,13 @@
  */
 package org.camunda.bpm.integrationtest.functional.spin;
 
+import static org.junit.Assert.assertNotNull;
+
 import org.camunda.bpm.application.PostDeploy;
 import org.camunda.bpm.application.ProcessApplication;
 import org.camunda.bpm.application.impl.ServletProcessApplication;
 import org.camunda.bpm.engine.ProcessEngine;
 
-import static org.junit.Assert.assertNotNull;
-
 
 /**
  * @author Daniel Meyer

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/RuntimeServiceDelegate.java
Patch:
@@ -12,6 +12,8 @@
  */
 package org.camunda.bpm.integrationtest.functional.spin;
 
+import java.util.Date;
+
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
@@ -20,8 +22,6 @@
 import org.camunda.bpm.engine.variable.value.ObjectValue;
 import org.camunda.bpm.integrationtest.functional.spin.dataformat.JsonSerializable;
 
-import java.util.Date;
-
 /**
  * @author Thorben Lindhauer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/dataformat/FailingJsonDataFormatConfigurator.java
Patch:
@@ -12,11 +12,11 @@
  */
 package org.camunda.bpm.integrationtest.functional.spin.dataformat;
 
+import java.text.SimpleDateFormat;
+
 import org.camunda.spin.impl.json.jackson.format.JacksonJsonDataFormat;
 import org.camunda.spin.spi.DataFormatConfigurator;
 
-import java.text.SimpleDateFormat;
-
 /**
  * @author Thorben Lindhauer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/dataformat/FooSpin.java
Patch:
@@ -12,10 +12,10 @@
  */
 package org.camunda.bpm.integrationtest.functional.spin.dataformat;
 
-import org.camunda.spin.Spin;
-
 import java.io.Writer;
 
+import org.camunda.spin.Spin;
+
 /**
  * @author Thorben Lindhauer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/dataformat/ImplicitObjectValueUpdateHandler.java
Patch:
@@ -12,13 +12,13 @@
  */
 package org.camunda.bpm.integrationtest.functional.spin.dataformat;
 
+import java.util.Date;
+
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.DelegateTask;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 import org.camunda.bpm.engine.delegate.TaskListener;
 
-import java.util.Date;
-
 /**
  * @author Thorben Lindhauer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/dataformat/JodaJsonDataFormatConfigurator.java
Patch:
@@ -12,11 +12,12 @@
  */
 package org.camunda.bpm.integrationtest.functional.spin.dataformat;
 
-import com.fasterxml.jackson.databind.ObjectMapper;
-import com.fasterxml.jackson.datatype.joda.JodaModule;
 import org.camunda.spin.impl.json.jackson.format.JacksonJsonDataFormat;
 import org.camunda.spin.spi.DataFormatConfigurator;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.datatype.joda.JodaModule;
+
 /**
  * @author Thorben Lindhauer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spring/SpringPAExpressionResolvingTest.java
Patch:
@@ -56,9 +56,7 @@ public static WebArchive processArchive() {
 
       // spring application context & libs
       .addAsWebInfResource("org/camunda/bpm/integrationtest/functional/spring/SpringPAExpressionResolvingTest-context.xml", "applicationContext.xml")
-      .addAsLibraries(DeploymentHelper.getEngineSpring())
-
-      .addAsLibraries(purgeDatabaseServlet());
+      .addAsLibraries(DeploymentHelper.getEngineSpring());
   }
 
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/transactions/TransactionIsolationLevelTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.camunda.bpm.integrationtest.functional.transactions;
 
 import org.apache.ibatis.session.SqlSession;
+import org.apache.ibatis.session.TransactionIsolationLevel;
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/transactions/TransactionListenerTest.java
Patch:
@@ -1,5 +1,7 @@
 package org.camunda.bpm.integrationtest.functional.transactions;
 
+import org.junit.Assert;
+
 import org.camunda.bpm.engine.impl.cfg.TransactionListener;
 import org.camunda.bpm.engine.impl.cfg.TransactionState;
 import org.camunda.bpm.engine.impl.interceptor.Command;
@@ -8,7 +10,6 @@
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.arquillian.junit.Arquillian;
 import org.jboss.shrinkwrap.api.spec.WebArchive;
-import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/transactions/beans/FailingDelegate.java
Patch:
@@ -1,10 +1,10 @@
 package org.camunda.bpm.integrationtest.functional.transactions.beans;
 
+import javax.inject.Named;
+
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
-import javax.inject.Named;
-
 @Named
 public class FailingDelegate implements JavaDelegate {
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/transactions/beans/FailingTransactionListenerDelegate.java
Patch:
@@ -12,15 +12,15 @@
  */
 package org.camunda.bpm.integrationtest.functional.transactions.beans;
 
+import javax.inject.Named;
+
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 import org.camunda.bpm.engine.impl.cfg.TransactionListener;
 import org.camunda.bpm.engine.impl.cfg.TransactionState;
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 
-import javax.inject.Named;
-
 @Named
 public class FailingTransactionListenerDelegate implements JavaDelegate {
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jboss/TestJobExecutorActivateFalse_JBOSS.java
Patch:
@@ -23,8 +23,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.*;
 
 /**
  * @author Daniel Meyer

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jboss/TestManagedDomain_JBOSS.java
Patch:
@@ -12,6 +12,9 @@
  */
 package org.camunda.bpm.integrationtest.jboss;
 
+import javax.naming.InitialContext;
+import javax.naming.NamingException;
+
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.arquillian.container.test.api.TargetsContainer;
 import org.jboss.arquillian.junit.Arquillian;
@@ -21,9 +24,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import javax.naming.InitialContext;
-import javax.naming.NamingException;
-
 /**
  * <p>Ensures subsystem boots in domain mode</p>
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/AsyncIntermediateThrowSignalEventTest.java
Patch:
@@ -1,5 +1,7 @@
 package org.camunda.bpm.integrationtest.jobexecutor;
 
+import static org.junit.Assert.assertEquals;
+
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.jboss.arquillian.container.test.api.Deployment;
@@ -8,8 +10,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import static org.junit.Assert.assertEquals;
-
 
 @RunWith(Arquillian.class)
 public class AsyncIntermediateThrowSignalEventTest extends AbstractFoxPlatformIntegrationTest {

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/SignalReceivedDelegate.java
Patch:
@@ -1,12 +1,12 @@
 package org.camunda.bpm.integrationtest.jobexecutor;
 
+import javax.inject.Inject;
+import javax.inject.Named;
+
 import org.camunda.bpm.engine.cdi.BusinessProcess;
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
-import javax.inject.Inject;
-import javax.inject.Named;
-
 
 @Named
 public class SignalReceivedDelegate implements JavaDelegate {    

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/TimerExecutionTest.java
Patch:
@@ -1,5 +1,7 @@
 package org.camunda.bpm.integrationtest.jobexecutor;
 
+import java.util.List;
+
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.integrationtest.jobexecutor.beans.SampleServiceBean;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
@@ -10,8 +12,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import java.util.List;
-
 /**
  *
  * @author nico.rehwaldt

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/beans/FailingSLSB.java
Patch:
@@ -1,11 +1,11 @@
 package org.camunda.bpm.integrationtest.jobexecutor.beans;
 
-import org.camunda.bpm.engine.delegate.DelegateExecution;
-import org.camunda.bpm.engine.delegate.JavaDelegate;
-
 import javax.ejb.Stateless;
 import javax.inject.Named;
 
+import org.camunda.bpm.engine.delegate.DelegateExecution;
+import org.camunda.bpm.engine.delegate.JavaDelegate;
+
 @Named
 @Stateless
 public class FailingSLSB implements JavaDelegate {

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/beans/PriorityBean.java
Patch:
@@ -12,9 +12,10 @@
  */
 package org.camunda.bpm.integrationtest.jobexecutor.beans;
 
+import java.io.Serializable;
+
 import javax.ejb.Stateless;
 import javax.inject.Named;
-import java.io.Serializable;
 
 /**
  * @author Thorben Lindhauer

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/beans/SampleServiceBean.java
Patch:
@@ -1,10 +1,10 @@
 package org.camunda.bpm.integrationtest.jobexecutor.beans;
 
+import javax.enterprise.context.ApplicationScoped;
+
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
-import javax.enterprise.context.ApplicationScoped;
-
 /**
  *
  * @author nico.rehwaldt

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/service/PlatformServicesJndiBindingTest.java
Patch:
@@ -12,6 +12,9 @@
  */
 package org.camunda.bpm.integrationtest.service;
 
+import javax.naming.InitialContext;
+import javax.naming.NamingException;
+
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.camunda.bpm.integrationtest.util.TestConstants;
 import org.jboss.arquillian.container.test.api.Deployment;
@@ -21,9 +24,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import javax.naming.InitialContext;
-import javax.naming.NamingException;
-
 @RunWith(Arquillian.class)
 public class PlatformServicesJndiBindingTest extends AbstractFoxPlatformIntegrationTest {
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/service/ProcessApplicationServiceTest.java
Patch:
@@ -12,6 +12,9 @@
  */
 package org.camunda.bpm.integrationtest.service;
 
+import java.util.Arrays;
+import java.util.Set;
+
 import org.camunda.bpm.BpmPlatform;
 import org.camunda.bpm.ProcessApplicationService;
 import org.camunda.bpm.application.ProcessApplicationInfo;
@@ -24,9 +27,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import java.util.Arrays;
-import java.util.Set;
-
 
 /**
  * @author Daniel Meyer

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/service/ProcessEngineServiceTest.java
Patch:
@@ -1,5 +1,7 @@
 package org.camunda.bpm.integrationtest.service;
 
+import org.junit.Assert;
+
 import org.camunda.bpm.BpmPlatform;
 import org.camunda.bpm.ProcessEngineService;
 import org.camunda.bpm.engine.ProcessEngine;
@@ -8,7 +10,6 @@
 import org.jboss.arquillian.container.test.api.OperateOnDeployment;
 import org.jboss.arquillian.junit.Arquillian;
 import org.jboss.shrinkwrap.api.spec.WebArchive;
-import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/service/TestProcessEngineJndiBinding_JBOSS.java
Patch:
@@ -12,6 +12,8 @@
  */
 package org.camunda.bpm.integrationtest.service;
 
+import javax.naming.InitialContext;
+
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.jboss.arquillian.container.test.api.Deployment;
@@ -21,8 +23,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import javax.naming.InitialContext;
-
 /**
  * <p>Makes sure that the process engine JNDI bindings are created</p>
  * 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/jar/TestJarDeployment.java
Patch:
@@ -62,6 +62,7 @@ public static WebArchive purgeArchive() {
       .addAsWebInfResource(EmptyAsset.INSTANCE, "beans.xml")
       .addAsLibraries(DeploymentHelper.getEngineCdi())
       .addClass(TestJarDeployment.class)
+      .addClass(AbstractFoxPlatformIntegrationTest.class)
       .addAsLibraries(purgeDatabaseServlet());
 
     DEPLOYMENT_NAMES.add("purge");

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/callbacks/EjbPALifecycleCallbacksTest.java
Patch:
@@ -33,6 +33,7 @@ public static WebArchive createDeployment() {
 
     WebArchive archive = ShrinkWrap.create(WebArchive.class, "test.war")
         .addClass(CustomEjbProcessApplication.class)
+        .addAsLibraries(purgeDatabaseServlet())
         .addClass(AbstractFoxPlatformIntegrationTest.class);
 
     return archive;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/callbacks/TestPostDeployFailure_OTHERS.java
Patch:
@@ -12,13 +12,12 @@
  */
 package org.camunda.bpm.integrationtest.deployment.callbacks;
 
-import org.junit.Assert;
-
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.arquillian.container.test.api.OperateOnDeployment;
 import org.jboss.arquillian.junit.Arquillian;
 import org.jboss.shrinkwrap.api.spec.WebArchive;
+import org.junit.Assert;
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/callbacks/apps/PostDeployInjectApp.java
Patch:
@@ -12,14 +12,14 @@
  */
 package org.camunda.bpm.integrationtest.deployment.callbacks.apps;
 
-import java.util.List;
-
 import org.camunda.bpm.application.PostDeploy;
 import org.camunda.bpm.application.ProcessApplication;
 import org.camunda.bpm.application.ProcessApplicationInfo;
 import org.camunda.bpm.application.impl.ServletProcessApplication;
 import org.camunda.bpm.engine.ProcessEngine;
 
+import java.util.List;
+
 @ProcessApplication
 public class PostDeployInjectApp extends ServletProcessApplication {
   

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/cfg/TestCustomProcessesXmlFileLocation.java
Patch:
@@ -42,8 +42,9 @@ public static WebArchive processArchive() {
         .addAsResource("org/camunda/bpm/integrationtest/deployment/cfg/processes.xml", "my/alternate/location/processes.xml")
         .addClass(AbstractFoxPlatformIntegrationTest.class)
         .addClass(CustomProcessApplication.class)
-        .addAsResource("org/camunda/bpm/integrationtest/deployment/cfg/invoice-it.bpmn20.xml");
-    
+        .addAsResource("org/camunda/bpm/integrationtest/deployment/cfg/invoice-it.bpmn20.xml")
+        .addAsLibraries(purgeDatabaseServlet());
+
     return archive;
     
   }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/ear/TestFoxPlatformClientAsEjbModule_onePaAsLib.java
Patch:
@@ -74,9 +74,10 @@ public static EnterpriseArchive onePaAsLib() {
       .addAsWebInfResource(EmptyAsset.INSTANCE, "beans.xml")
       .setManifest(new ByteArrayAsset(("Class-Path: " + foxPlatformClientJar.getName()+"\n").getBytes()))
       .addClass(AbstractFoxPlatformIntegrationTest.class)
-      .addClass(TestFoxPlatformClientAsEjbModule_onePaAsLib.class);
+      .addClass(TestFoxPlatformClientAsEjbModule_onePaAsLib.class)
+      .addAsLibraries(purgeDatabaseServlet());
 
-    return ShrinkWrap.create(EnterpriseArchive.class, "onePaAsLib.ear")            
+    return ShrinkWrap.create(EnterpriseArchive.class, "onePaAsLib.ear")
       .addAsLibrary(processArchiveJar)
       .addAsModule(foxPlatformClientJar)
       .addAsModule(testJar)

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/ear/beans/NamedCdiBean.java
Patch:
@@ -12,11 +12,11 @@
  */
 package org.camunda.bpm.integrationtest.deployment.ear.beans;
 
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
+import javax.inject.Named;
+
 /**
  * @author Roman Smirnov
  */

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/spring/SpringLookupManagedProcessEngineTest.java
Patch:
@@ -39,7 +39,8 @@ public static WebArchive processArchive() {
       .addAsWebInfResource("org/camunda/bpm/integrationtest/deployment/spring/SpringLookupManagedProcessEngineTest-context.xml", "applicationContext.xml")
       .addAsLibraries(DeploymentHelper.getEngineSpring())
       .addAsManifestResource("org/camunda/bpm/integrationtest/deployment/spring/jboss-deployment-structure.xml", "jboss-deployment-structure.xml")
-      .addAsWebInfResource("org/camunda/bpm/integrationtest/deployment/spring/web.xml", "web.xml");
+      .addAsWebInfResource("org/camunda/bpm/integrationtest/deployment/spring/web.xml", "web.xml")
+      .addAsLibraries(purgeDatabaseServlet());
   }
   
     

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/spring/SpringServletPALifecycleTest.java
Patch:
@@ -38,7 +38,9 @@ public static WebArchive processArchive() {
       .addClass(CustomSpringServletProcessApplication.class)
       .addAsWebInfResource("org/camunda/bpm/integrationtest/deployment/spring/SpringServletPALifecycleTest-context.xml", "applicationContext.xml")
       .addAsLibraries(DeploymentHelper.getEngineSpring())
+      .addAsLibraries(purgeDatabaseServlet())
       .addAsWebInfResource("org/camunda/bpm/integrationtest/deployment/spring/web.xml", "web.xml");
+
   }
 
   @Test

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentCustomPAName.java
Patch:
@@ -34,10 +34,13 @@ public class TestWarDeploymentCustomPAName extends AbstractFoxPlatformIntegratio
 
   @Deployment
   public static WebArchive processArchive() {
+    DEPLOYMENT_NAMES.add("pa1");
+
     return ShrinkWrap.create(WebArchive.class, "pa1.war")
         .addAsResource("META-INF/processes.xml")
         .addClass(AbstractFoxPlatformIntegrationTest.class)
         .addClass(CustomNameServletPA.class)
+        .addAsLibraries(purgeDatabaseServlet())
         .addAsResource("org/camunda/bpm/integrationtest/testDeployProcessArchive.bpmn20.xml");
   }
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentDeployChangedOnlyWithJarAsLib.java
Patch:
@@ -97,12 +97,15 @@ public static WebArchive archive2() {
         .addAsLibraries(DeploymentHelper.getEngineCdi())
 
         .addAsLibraries(processArchiveJar)
+        .addAsLibraries(purgeDatabaseServlet())
 
         .addClass(AbstractFoxPlatformIntegrationTest.class)
         .addClass(TestWarDeploymentDeployChangedOnlyWithJarAsLib.class);
 
     TestContainer.addContainerSpecificResources(archive);
 
+    DEPLOYMENT_NAMES.add("pa2");
+
     return archive;
   }
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentIsDeployChangedOnly.java
Patch:
@@ -14,8 +14,6 @@
  * limitations under the License.
  */
 package org.camunda.bpm.integrationtest.deployment.war;
-import java.util.List;
-import java.util.Set;
 
 import org.camunda.bpm.BpmPlatform;
 import org.camunda.bpm.ProcessApplicationService;
@@ -31,6 +29,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import java.util.List;
+import java.util.Set;
+
 
 @RunWith(Arquillian.class)
 public class TestWarDeploymentIsDeployChangedOnly extends AbstractFoxPlatformIntegrationTest {

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentResumePrevious.java
Patch:
@@ -14,8 +14,6 @@
  * limitations under the License.
  */
 package org.camunda.bpm.integrationtest.deployment.war;
-import java.util.List;
-import java.util.Set;
 
 import org.camunda.bpm.BpmPlatform;
 import org.camunda.bpm.ProcessApplicationService;
@@ -31,6 +29,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import java.util.List;
+import java.util.Set;
+
 
 
 @RunWith(Arquillian.class)

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentResumePreviousOff.java
Patch:
@@ -14,8 +14,6 @@
  * limitations under the License.
  */
 package org.camunda.bpm.integrationtest.deployment.war;
-import java.util.List;
-import java.util.Set;
 
 import org.camunda.bpm.BpmPlatform;
 import org.camunda.bpm.ProcessApplicationService;
@@ -31,6 +29,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import java.util.List;
+import java.util.Set;
+
 
 
 @RunWith(Arquillian.class)

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentWithMultiplePasAsSubdeployment1.java
Patch:
@@ -16,8 +16,6 @@
 
 package org.camunda.bpm.integrationtest.deployment.war;
 
-import org.junit.Assert;
-
 import org.camunda.bpm.engine.repository.DeploymentQuery;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
@@ -31,6 +29,7 @@
 import org.jboss.shrinkwrap.api.asset.EmptyAsset;
 import org.jboss.shrinkwrap.api.spec.JavaArchive;
 import org.jboss.shrinkwrap.api.spec.WebArchive;
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -115,6 +114,7 @@ public static WebArchive processArchive() {
             
             .addAsLibraries(pa2)
             .addAsLibraries(pa3)
+            .addAsLibraries(purgeDatabaseServlet())
             
             .addAsResource(pa1ProcessesXml, "META-INF/processes.xml")
             .addAsResource(processAssets[0], "process0.bpmn")
@@ -124,7 +124,7 @@ public static WebArchive processArchive() {
             .addClass(AbstractFoxPlatformIntegrationTest.class);
     
     TestContainer.addContainerSpecificResources(deployment);
-    
+
     return deployment;
     
   }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentWithMultiplePasAsSubdeployment2.java
Patch:
@@ -16,8 +16,6 @@
 
 package org.camunda.bpm.integrationtest.deployment.war;
 
-import org.junit.Assert;
-
 import org.camunda.bpm.engine.repository.DeploymentQuery;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
@@ -31,6 +29,7 @@
 import org.jboss.shrinkwrap.api.asset.EmptyAsset;
 import org.jboss.shrinkwrap.api.spec.JavaArchive;
 import org.jboss.shrinkwrap.api.spec.WebArchive;
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -114,6 +113,7 @@ public static WebArchive processArchive() {
             
             .addAsLibraries(pa2)
             .addAsLibraries(pa3)
+            .addAsLibraries(purgeDatabaseServlet())
             
             .addAsResource(pa1ProcessesXml, "META-INF/processes.xml")
             .addAsResource(processAssets[0], "process0.bpmn")

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentWithMultiplePasAsSubdeployment3.java
Patch:
@@ -16,8 +16,6 @@
 
 package org.camunda.bpm.integrationtest.deployment.war;
 
-import org.junit.Assert;
-
 import org.camunda.bpm.engine.repository.DeploymentQuery;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
@@ -31,6 +29,7 @@
 import org.jboss.shrinkwrap.api.asset.EmptyAsset;
 import org.jboss.shrinkwrap.api.spec.JavaArchive;
 import org.jboss.shrinkwrap.api.spec.WebArchive;
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -86,6 +85,7 @@ public static WebArchive processArchive() {
             .addAsLibraries(DeploymentHelper.getEngineCdi())
             
             .addAsLibraries(pa2)
+            .addAsLibraries(purgeDatabaseServlet())
             
             .addAsResource(processAssets[0], "process0.bpmn")
             .addAsResource(processAssets[1], "directory/process1.bpmn")

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentWithMultiplePasAsSubdeployment4.java
Patch:
@@ -16,8 +16,6 @@
 
 package org.camunda.bpm.integrationtest.deployment.war;
 
-import org.junit.Assert;
-
 import org.camunda.bpm.engine.repository.DeploymentQuery;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
@@ -31,6 +29,7 @@
 import org.jboss.shrinkwrap.api.asset.EmptyAsset;
 import org.jboss.shrinkwrap.api.spec.JavaArchive;
 import org.jboss.shrinkwrap.api.spec.WebArchive;
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -107,6 +106,7 @@ public static WebArchive processArchive() {
             
             .addAsLibraries(pa2)
             .addAsLibraries(pa3)
+            .addAsLibraries(purgeDatabaseServlet())
 
             .addClass(AbstractFoxPlatformIntegrationTest.class);    
     

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentWithMultiplePasAsSubdeployment5.java
Patch:
@@ -16,8 +16,6 @@
 
 package org.camunda.bpm.integrationtest.deployment.war;
 
-import org.junit.Assert;
-
 import org.camunda.bpm.engine.repository.DeploymentQuery;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
@@ -31,6 +29,7 @@
 import org.jboss.shrinkwrap.api.asset.EmptyAsset;
 import org.jboss.shrinkwrap.api.spec.JavaArchive;
 import org.jboss.shrinkwrap.api.spec.WebArchive;
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -101,6 +100,7 @@ public static WebArchive processArchive() {
             
             .addAsLibraries(pa2)
             .addAsLibraries(pa3)
+            .addAsLibraries(purgeDatabaseServlet())
             
             .addAsResource(pa1ProcessesXml, "META-INF/processes.xml")
             .addAsResource(processAssets[0], "process0.bpmn")

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentWithProcessEnginePlugin.java
Patch:
@@ -47,6 +47,7 @@ public static WebArchive processArchive() {
         .addClass(GroovyProcessEnginePlugin.class)
         .addAsResource("org/camunda/bpm/integrationtest/deployment/war/groovy.bpmn20.xml")
         .addAsResource("org/camunda/bpm/integrationtest/deployment/war/groovyAsync.bpmn20.xml")
+        .addAsLibraries(purgeDatabaseServlet())
         .addAsLibraries(Maven.resolver()
             .offline()
             .loadPomFromFile("pom.xml")

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentWithoutDiagram.java
Patch:
@@ -15,8 +15,6 @@
  */
 package org.camunda.bpm.integrationtest.deployment.war;
 
-import java.io.IOException;
-
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.camunda.bpm.integrationtest.util.TestHelper;
 import org.jboss.arquillian.container.test.api.Deployment;
@@ -25,6 +23,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import java.io.IOException;
+
 
 /**
  * @author Christian Lipphardt

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentWithoutProcessesXml.java
Patch:
@@ -42,6 +42,7 @@ public static WebArchive processArchive() {
     WebArchive deployment = ShrinkWrap.create(WebArchive.class, "test.war")
             .addAsWebInfResource(EmptyAsset.INSTANCE, "beans.xml")
             .addAsLibraries(DeploymentHelper.getEngineCdi())
+            .addAsLibraries(purgeDatabaseServlet())
             .addClass(AbstractFoxPlatformIntegrationTest.class);
     
     TestContainer.addContainerSpecificResources(deployment);

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/bpmnmodelapi/beans/BpmnElementRetrievalDelegate.java
Patch:
@@ -12,14 +12,14 @@
  */
 package org.camunda.bpm.integrationtest.functional.bpmnmodelapi.beans;
 
-import javax.enterprise.context.ApplicationScoped;
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 import org.camunda.bpm.model.bpmn.BpmnModelInstance;
 import org.camunda.bpm.model.bpmn.instance.FlowElement;
 
+import javax.enterprise.context.ApplicationScoped;
+import javax.inject.Named;
+
 /**
  * @author Daniel Meyer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/CdiBeanCallActivityResolutionTest.java
Patch:
@@ -59,10 +59,13 @@ public static WebArchive clientDeployment() {
     WebArchive deployment = ShrinkWrap.create(WebArchive.class, "client.war")
             .addAsWebInfResource(EmptyAsset.INSTANCE, "beans.xml")
             .addClass(AbstractFoxPlatformIntegrationTest.class)
+            .addAsLibraries(purgeDatabaseServlet())
             .addAsLibraries(DeploymentHelper.getEngineCdi());
 
     TestContainer.addContainerSpecificResourcesForNonPa(deployment);
 
+    DEPLOYMENT_NAMES.add("client");
+
     return deployment;
   }
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/beans/CaseVariableBean.java
Patch:
@@ -12,12 +12,12 @@
  */
 package org.camunda.bpm.integrationtest.functional.cdi.beans;
 
-import javax.inject.Inject;
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.CaseService;
 import org.camunda.bpm.engine.delegate.DelegateCaseExecution;
 
+import javax.inject.Inject;
+import javax.inject.Named;
+
 /**
  * @author Thorben Lindhauer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/beans/ConditionalFlowBean.java
Patch:
@@ -12,12 +12,12 @@
  */
 package org.camunda.bpm.integrationtest.functional.cdi.beans;
 
-import javax.inject.Inject;
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 
+import javax.inject.Inject;
+import javax.inject.Named;
+
 /**
  * @author Thorben Lindhauer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/beans/ExampleDelegateBean.java
Patch:
@@ -15,11 +15,11 @@
  */
 package org.camunda.bpm.integrationtest.functional.cdi.beans;
 
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
+import javax.inject.Named;
+
 @Named
 public class ExampleDelegateBean implements JavaDelegate {
   

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/beans/ExampleSignallableActivityBehaviorBean.java
Patch:
@@ -12,12 +12,12 @@
  */
 package org.camunda.bpm.integrationtest.functional.cdi.beans;
 
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.impl.bpmn.behavior.AbstractBpmnActivityBehavior;
 import org.camunda.bpm.engine.impl.pvm.delegate.ActivityExecution;
 import org.camunda.bpm.engine.impl.pvm.delegate.SignallableActivityBehavior;
 
+import javax.inject.Named;
+
 /**
  * @author Daniel Meyer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/beans/ProcessVariableBean.java
Patch:
@@ -12,12 +12,12 @@
  */
 package org.camunda.bpm.integrationtest.functional.cdi.beans;
 
-import javax.inject.Inject;
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 
+import javax.inject.Inject;
+import javax.inject.Named;
+
 /**
  * @author Thorben Lindhauer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/beans/RequestScopedDelegateBean.java
Patch:
@@ -1,11 +1,11 @@
 package org.camunda.bpm.integrationtest.functional.cdi.beans;
 
-import javax.enterprise.context.RequestScoped;
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
+import javax.enterprise.context.RequestScoped;
+import javax.inject.Named;
+
 /**
  * A {@link RequestScoped} bean
  * 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/beans/TimerStartBean.java
Patch:
@@ -12,14 +12,13 @@
  */
 package org.camunda.bpm.integrationtest.functional.cdi.beans;
 
+import javax.enterprise.context.ApplicationScoped;
+import javax.inject.Named;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
 import java.util.Date;
 
-import javax.enterprise.context.ApplicationScoped;
-import javax.inject.Named;
-
 /**
  * @author Thorben Lindhauer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/classloading/beans/ExampleCaseExecutionListener.java
Patch:
@@ -12,11 +12,11 @@
  */
 package org.camunda.bpm.integrationtest.functional.classloading.beans;
 
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.delegate.CaseExecutionListener;
 import org.camunda.bpm.engine.delegate.DelegateCaseExecution;
 
+import javax.inject.Named;
+
 /**
  * @author Roman Smirnov
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/classloading/beans/ExampleTaskListener.java
Patch:
@@ -1,10 +1,10 @@
 package org.camunda.bpm.integrationtest.functional.classloading.beans;
 
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.delegate.DelegateTask;
 import org.camunda.bpm.engine.delegate.TaskListener;
 
+import javax.inject.Named;
+
 @Named(value = "taskListener")
 public class ExampleTaskListener implements TaskListener {
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/classloading/deployment/RedeployProcessClassloadingTest.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.camunda.bpm.integrationtest.functional.classloading.deployment;
 
-import org.camunda.bpm.integrationtest.functional.classloading.beans.ExampleDelegate;
 import org.camunda.bpm.integrationtest.functional.classloading.deployment.beans.MyCustomDelegate;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.camunda.bpm.integrationtest.util.TestContainer;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/classloading/ear/TestJavaDelegateResolution_ClientAsLibInWebModule.java
Patch:
@@ -14,7 +14,6 @@
  * limitations under the License.
  */
 package org.camunda.bpm.integrationtest.functional.classloading.ear;
-import javax.transaction.SystemException;
 
 import org.camunda.bpm.integrationtest.functional.classloading.beans.ExampleDelegate;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
@@ -29,6 +28,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import javax.transaction.SystemException;
+
 
 /**
  * <p>Deploys an EAR application which contains a WAR process archive, and a client application deployed as a war</p>

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/connect/PaConnectSupportTest.java
Patch:
@@ -13,9 +13,6 @@
 
 package org.camunda.bpm.integrationtest.functional.connect;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
 import org.camunda.bpm.engine.task.Task;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.camunda.connect.Connectors;
@@ -25,6 +22,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+
 /**
  * <p>Smoketest Make sure camunda connect can be used in a process application </p>
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/connect/TestConnector.java
Patch:
@@ -13,13 +13,13 @@
 
 package org.camunda.bpm.integrationtest.functional.connect;
 
-import java.util.Collection;
-import java.util.List;
-
 import org.camunda.connect.spi.Connector;
 import org.camunda.connect.spi.ConnectorRequestInterceptor;
 import org.camunda.connect.spi.ConnectorResponse;
 
+import java.util.Collection;
+import java.util.List;
+
 public class TestConnector implements Connector<TestConnectorRequest> {
 
   public static final String ID = "pa-test-connector";

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/connect/TestConnectorRequest.java
Patch:
@@ -13,11 +13,11 @@
 
 package org.camunda.bpm.integrationtest.functional.connect;
 
+import org.camunda.connect.spi.ConnectorRequest;
+
 import java.util.HashMap;
 import java.util.Map;
 
-import org.camunda.connect.spi.ConnectorRequest;
-
 public class TestConnectorRequest implements ConnectorRequest<TestConnectorResponse> {
 
   protected Map<String, Object> requestParameters;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/connect/TestConnectorResponse.java
Patch:
@@ -13,10 +13,10 @@
 
 package org.camunda.bpm.integrationtest.functional.connect;
 
-import java.util.Map;
-
 import org.camunda.connect.spi.ConnectorResponse;
 
+import java.util.Map;
+
 public class TestConnectorResponse implements ConnectorResponse {
 
   protected Map<String, Object> responseParameters;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/context/ProcessApplicationWithInvocationContext.java
Patch:
@@ -12,13 +12,13 @@
  */
 package org.camunda.bpm.integrationtest.functional.context;
 
-import java.util.concurrent.Callable;
-
 import org.camunda.bpm.application.InvocationContext;
 import org.camunda.bpm.application.ProcessApplication;
 import org.camunda.bpm.application.ProcessApplicationExecutionException;
 import org.camunda.bpm.application.impl.ServletProcessApplication;
 
+import java.util.concurrent.Callable;
+
 @ProcessApplication("app")
 public class ProcessApplicationWithInvocationContext extends ServletProcessApplication {
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/context/beans/CalledProcessDelegate.java
Patch:
@@ -15,13 +15,13 @@
  */
 package org.camunda.bpm.integrationtest.functional.context.beans;
 
-import javax.inject.Inject;
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.cdi.BusinessProcess;
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
+import javax.inject.Inject;
+import javax.inject.Named;
+
 /**
  * 
  * @author Daniel Meyer

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/context/beans/DelegateAfter.java
Patch:
@@ -15,13 +15,13 @@
  */
 package org.camunda.bpm.integrationtest.functional.context.beans;
 
-import javax.inject.Inject;
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.cdi.BusinessProcess;
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
+import javax.inject.Inject;
+import javax.inject.Named;
+
 /**
  * 
  * @author Daniel Meyer

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/context/beans/DelegateBefore.java
Patch:
@@ -15,13 +15,13 @@
  */
 package org.camunda.bpm.integrationtest.functional.context.beans;
 
-import javax.inject.Inject;
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.cdi.BusinessProcess;
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
+import javax.inject.Inject;
+import javax.inject.Named;
+
 /**
  * 
  * @author Daniel Meyer

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/delegation/beans/DelegateVarMapping.java
Patch:
@@ -15,11 +15,12 @@
  */
 package org.camunda.bpm.integrationtest.functional.delegation.beans;
 
-import javax.inject.Named;
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.DelegateVariableMapping;
 import org.camunda.bpm.engine.delegate.VariableScope;
 import org.camunda.bpm.engine.variable.VariableMap;
+
+import javax.inject.Named;
 /**
  *
  * @author Christopher Zell <christopher.zell@camunda.com>

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/SLSBExceptionInDelegateTest.java
Patch:
@@ -1,8 +1,5 @@
 package org.camunda.bpm.integrationtest.functional.ejb;
 
-import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
-
 import org.camunda.bpm.engine.runtime.Incident;
 import org.camunda.bpm.engine.runtime.Job;
 import org.camunda.bpm.integrationtest.functional.ejb.beans.SLSBClientDelegate;
@@ -14,6 +11,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+
 /**
  * Testcase verifying that if an exception is thrown inside an EJB the original
  * exception reaches the caller

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/beans/SFSBClientDelegate.java
Patch:
@@ -1,11 +1,11 @@
 package org.camunda.bpm.integrationtest.functional.ejb.beans;
 
-import javax.ejb.EJB;
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
+import javax.ejb.EJB;
+import javax.inject.Named;
+
 /**
  * This is a CDI bean delegating to a SFSB from the same deployment
  * 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/beans/SLSBClientDelegate.java
Patch:
@@ -1,11 +1,11 @@
 package org.camunda.bpm.integrationtest.functional.ejb.beans;
 
-import javax.ejb.EJB;
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
+import javax.ejb.EJB;
+import javax.inject.Named;
+
 /**
  * This is a CDI bean delegating to a SLSB from the same deployment
  * 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/beans/SingletonBeanClientDelegate.java
Patch:
@@ -1,11 +1,11 @@
 package org.camunda.bpm.integrationtest.functional.ejb.beans;
 
-import javax.ejb.EJB;
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
+import javax.ejb.EJB;
+import javax.inject.Named;
+
 /**
  * This is a CDI bean delegating to a SingletonBeanClientDelegate from the same deployment
  * 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/local/bean/InvokeStartProcessDelegateSLSB.java
Patch:
@@ -1,11 +1,11 @@
 package org.camunda.bpm.integrationtest.functional.ejb.local.bean;
 
-import javax.ejb.EJB;
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
+import javax.ejb.EJB;
+import javax.inject.Named;
+
 /**
  * A CDI bean delegating to the local business
  * interface of a SLSB from a different application.

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/local/bean/LocalSFSBClientDelegateBean.java
Patch:
@@ -1,11 +1,11 @@
 package org.camunda.bpm.integrationtest.functional.ejb.local.bean;
 
-import javax.ejb.EJB;
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
+import javax.ejb.EJB;
+import javax.inject.Named;
+
 /**
  * A CDI bean delegating to the local business 
  * interface of a SFSB from a different application.

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/local/bean/LocalSLSBClientDelegateBean.java
Patch:
@@ -1,11 +1,11 @@
 package org.camunda.bpm.integrationtest.functional.ejb.local.bean;
 
-import javax.ejb.EJB;
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
+import javax.ejb.EJB;
+import javax.inject.Named;
+
 /**
  * A CDI bean delegating to the local business 
  * interface of a SLSB from a different application.

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/local/bean/LocalSingletonBeanClientDelegateBean.java
Patch:
@@ -1,11 +1,11 @@
 package org.camunda.bpm.integrationtest.functional.ejb.local.bean;
 
-import javax.ejb.EJB;
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
+import javax.ejb.EJB;
+import javax.inject.Named;
+
 /**
  * A CDI bean delegating to the local business 
  * interface of a Singleton Bean from a different application.

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/local/bean/StartProcessSLSB.java
Patch:
@@ -1,10 +1,10 @@
 package org.camunda.bpm.integrationtest.functional.ejb.local.bean;
 
+import org.camunda.bpm.BpmPlatform;
+
 import javax.ejb.Local;
 import javax.ejb.Stateless;
 
-import org.camunda.bpm.BpmPlatform;
-
 /**
  * A SLSB with a local business interface
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/remote/bean/RemoteSFSBClientDelegateBean.java
Patch:
@@ -1,12 +1,12 @@
 package org.camunda.bpm.integrationtest.functional.ejb.remote.bean;
 
-import javax.inject.Named;
-import javax.naming.InitialContext;
-
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 import org.camunda.bpm.integrationtest.util.TestConstants;
 
+import javax.inject.Named;
+import javax.naming.InitialContext;
+
 
 /**
  * A CDI bean delegating to the remote business

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/remote/bean/RemoteSLSBClientDelegateBean.java
Patch:
@@ -1,12 +1,12 @@
 package org.camunda.bpm.integrationtest.functional.ejb.remote.bean;
 
-import javax.inject.Named;
-import javax.naming.InitialContext;
-
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 import org.camunda.bpm.integrationtest.util.TestConstants;
 
+import javax.inject.Named;
+import javax.naming.InitialContext;
+
 
 /**
  * A CDI bean delegating to the remote business

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/remote/bean/RemoteSingletonBeanClientDelegateBean.java
Patch:
@@ -1,12 +1,12 @@
 package org.camunda.bpm.integrationtest.functional.ejb.remote.bean;
 
-import javax.inject.Named;
-import javax.naming.InitialContext;
-
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 import org.camunda.bpm.integrationtest.util.TestConstants;
 
+import javax.inject.Named;
+import javax.naming.InitialContext;
+
 
 /**
  * A CDI bean delegating to the remote business

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/request/beans/InvocationCounterDelegateBean.java
Patch:
@@ -1,12 +1,12 @@
 package org.camunda.bpm.integrationtest.functional.ejb.request.beans;
 
-import javax.inject.Named;
-import javax.naming.InitialContext;
-
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 import org.camunda.bpm.integrationtest.util.TestConstants;
 
+import javax.inject.Named;
+import javax.naming.InitialContext;
+
 
 /**
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/request/beans/InvocationCounterDelegateBeanLocal.java
Patch:
@@ -1,11 +1,11 @@
 package org.camunda.bpm.integrationtest.functional.ejb.request.beans;
 
-import javax.ejb.EJB;
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
+import javax.ejb.EJB;
+import javax.inject.Named;
+
 /**
  * 
  * @author Daniel Meyer

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/request/beans/RequestScopedSFSBDelegate.java
Patch:
@@ -1,12 +1,12 @@
 package org.camunda.bpm.integrationtest.functional.ejb.request.beans;
 
+import org.camunda.bpm.engine.delegate.DelegateExecution;
+import org.camunda.bpm.engine.delegate.JavaDelegate;
+
 import javax.ejb.Stateful;
 import javax.enterprise.context.RequestScoped;
 import javax.inject.Named;
 
-import org.camunda.bpm.engine.delegate.DelegateExecution;
-import org.camunda.bpm.engine.delegate.JavaDelegate;
-
 /**
  * A request scoped Stateful Session Bean acting as as a JavaDelegate
  * 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/el/ResolveBeanFromDmnTest.java
Patch:
@@ -12,8 +12,6 @@
  */
 package org.camunda.bpm.integrationtest.functional.el;
 
-import static org.junit.Assert.assertNotNull;
-
 import org.camunda.bpm.engine.runtime.VariableInstance;
 import org.camunda.bpm.engine.task.Task;
 import org.camunda.bpm.integrationtest.functional.el.beans.GreeterBean;
@@ -24,6 +22,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import static org.junit.Assert.assertNotNull;
+
 /**
  * @author Daniel Meyer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/error/ThrowErrorDelegate.java
Patch:
@@ -13,12 +13,12 @@
 
 package org.camunda.bpm.integrationtest.functional.error;
 
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.delegate.BpmnError;
 import org.camunda.bpm.engine.impl.bpmn.behavior.AbstractBpmnActivityBehavior;
 import org.camunda.bpm.engine.impl.pvm.delegate.ActivityExecution;
 
+import javax.inject.Named;
+
 @Named
 public class ThrowErrorDelegate extends AbstractBpmnActivityBehavior {
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/event/CdiProcessApplicationEventSupportTest.java
Patch:
@@ -41,6 +41,7 @@ public static WebArchive createDeployment() {
     WebArchive archive = ShrinkWrap.create(WebArchive.class, "test.war")
         .addAsWebInfResource(EmptyAsset.INSTANCE, "beans.xml")
         .addAsLibraries(DeploymentHelper.getEngineCdi())
+        .addAsLibraries(purgeDatabaseServlet())
         .addAsResource("META-INF/processes.xml", "META-INF/processes.xml")
         .addClass(AbstractFoxPlatformIntegrationTest.class)
         .addClass(CdiEventSupportProcessApplication.class)

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/event/ProcessApplicationExecutionListenerTest.java
Patch:
@@ -39,6 +39,7 @@ public static WebArchive createDeployment() {
       .addAsWebInfResource(EmptyAsset.INSTANCE, "beans.xml")
       .addAsLibraries(DeploymentHelper.getEngineCdi())
       .addAsResource("META-INF/processes.xml", "META-INF/processes.xml")
+      .addAsLibraries(purgeDatabaseServlet())
       .addClass(AbstractFoxPlatformIntegrationTest.class)
       .addClass(ExecutionListenerProcessApplication.class)
       .addAsResource("org/camunda/bpm/integrationtest/functional/event/ProcessApplicationEventSupportTest.testExecutionListener.bpmn20.xml");

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/event/ProcessApplicationTaskListenerTest.java
Patch:
@@ -44,6 +44,7 @@ public static WebArchive createDeployment() {
         .addAsWebInfResource(EmptyAsset.INSTANCE, "beans.xml")
         .addAsLibraries(DeploymentHelper.getEngineCdi())
         .addAsResource("META-INF/processes.xml", "META-INF/processes.xml")
+        .addAsLibraries(purgeDatabaseServlet())
         .addClass(AbstractFoxPlatformIntegrationTest.class)
         .addClass(TaskListenerProcessApplication.class)
         .addAsResource("org/camunda/bpm/integrationtest/functional/event/ProcessApplicationEventSupportTest.testTaskListener.bpmn20.xml");

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/event/beans/EventObserverCdiBean.java
Patch:
@@ -12,12 +12,12 @@
  */
 package org.camunda.bpm.integrationtest.functional.event.beans;
 
-import javax.enterprise.event.Observes;
-import javax.inject.Inject;
-
 import org.camunda.bpm.engine.cdi.BusinessProcess;
 import org.camunda.bpm.engine.cdi.BusinessProcessEvent;
 
+import javax.enterprise.event.Observes;
+import javax.inject.Inject;
+
 /**
  * @author Daniel Meyer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/metadata/engine/TestProcessEnginesXmlInProcessApplication.java
Patch:
@@ -27,6 +27,7 @@ public static WebArchive processArchive() {
         .addAsWebInfResource(EmptyAsset.INSTANCE, "beans.xml")
         .addAsLibraries(DeploymentHelper.getEngineCdi())
         .addAsResource("singleEngine.xml", "META-INF/processes.xml")
+        .addAsLibraries(purgeDatabaseServlet())
         .addClass(AbstractFoxPlatformIntegrationTest.class);
 
       TestContainer.addContainerSpecificResources(archive);

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/migration/MigrationContextSwitchBeansTest.java
Patch:
@@ -12,9 +12,6 @@
  */
 package org.camunda.bpm.integrationtest.functional.migration;
 
-import java.io.ByteArrayOutputStream;
-import java.util.Arrays;
-
 import org.camunda.bpm.engine.migration.MigrationPlan;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
 import org.camunda.bpm.engine.runtime.Job;
@@ -34,6 +31,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import java.io.ByteArrayOutputStream;
+import java.util.Arrays;
+
 /**
  * @author Thorben Lindhauer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/AbstractPaLocalScriptEngineTest.java
Patch:
@@ -12,9 +12,6 @@
  */
 package org.camunda.bpm.integrationtest.functional.scriptengine;
 
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.fail;
-
 import org.camunda.bpm.application.ProcessApplicationInterface;
 import org.camunda.bpm.application.ProcessApplicationReference;
 import org.camunda.bpm.application.ProcessApplicationUnavailableException;
@@ -29,6 +26,9 @@
 import org.jboss.shrinkwrap.api.asset.StringAsset;
 import org.junit.runner.RunWith;
 
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.fail;
+
 /**
  * @author Roman Smirnov
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/AbstractTemplateScriptEngineSupportTest.java
Patch:
@@ -13,8 +13,6 @@
 
 package org.camunda.bpm.integrationtest.functional.scriptengine;
 
-import java.util.HashMap;
-import java.util.Map;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.camunda.bpm.model.bpmn.Bpmn;
 import org.camunda.bpm.model.bpmn.BpmnModelInstance;
@@ -23,6 +21,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import java.util.HashMap;
+import java.util.Map;
+
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/CamundaScriptResourceTest.java
Patch:
@@ -21,7 +21,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
 
 /**
  * @author Daniel Meyer

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/GroovyPaClassImportTest.java
Patch:
@@ -12,9 +12,6 @@
  */
 package org.camunda.bpm.integrationtest.functional.scriptengine;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
 import org.camunda.bpm.integrationtest.functional.scriptengine.classes.CustomClass;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.camunda.bpm.model.bpmn.Bpmn;
@@ -27,6 +24,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+
 /**
  * @author Daniel Meyer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/PaLocalScriptEngineDisabledCacheTest.java
Patch:
@@ -12,8 +12,6 @@
  */
 package org.camunda.bpm.integrationtest.functional.scriptengine;
 
-import static org.junit.Assert.assertNotEquals;
-
 import org.camunda.bpm.application.AbstractProcessApplication;
 import org.camunda.bpm.integrationtest.functional.scriptengine.engine.AbstractScriptEngineFactory;
 import org.camunda.bpm.integrationtest.functional.scriptengine.engine.DummyScriptEngineFactory;
@@ -22,6 +20,8 @@
 import org.jboss.shrinkwrap.api.spec.WebArchive;
 import org.junit.Test;
 
+import static org.junit.Assert.assertNotEquals;
+
 /**
  * @author Roman Smirnov
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/PaLocalScriptEngineEnabledCacheTest.java
Patch:
@@ -12,8 +12,6 @@
  */
 package org.camunda.bpm.integrationtest.functional.scriptengine;
 
-import static org.junit.Assert.assertEquals;
-
 import org.camunda.bpm.application.AbstractProcessApplication;
 import org.camunda.bpm.integrationtest.functional.scriptengine.engine.AbstractScriptEngineFactory;
 import org.camunda.bpm.integrationtest.functional.scriptengine.engine.DummyScriptEngineFactory;
@@ -22,6 +20,8 @@
 import org.jboss.shrinkwrap.api.spec.WebArchive;
 import org.junit.Test;
 
+import static org.junit.Assert.assertEquals;
+
 /**
  * @author Roman Smirnov
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/PaLocalScriptEngineSupportTest.java
Patch:
@@ -12,16 +12,16 @@
  */
 package org.camunda.bpm.integrationtest.functional.scriptengine;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
 import org.camunda.bpm.integrationtest.functional.scriptengine.engine.AbstractScriptEngineFactory;
 import org.camunda.bpm.integrationtest.functional.scriptengine.engine.DummyScriptEngineFactory;
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.shrinkwrap.api.asset.StringAsset;
 import org.jboss.shrinkwrap.api.spec.WebArchive;
 import org.junit.Test;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+
 /**
  * @author Roman Smirnov
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/PythonPaClassImportTest.java
Patch:
@@ -12,9 +12,6 @@
  */
 package org.camunda.bpm.integrationtest.functional.scriptengine;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
 import org.camunda.bpm.integrationtest.functional.scriptengine.classes.CustomClass;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.camunda.bpm.model.bpmn.Bpmn;
@@ -27,6 +24,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+
 /**
  * @author Daniel Meyer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/slf4j/Slf4jClassloadingTest.java
Patch:
@@ -39,6 +39,7 @@ public static WebArchive createDeployment() {
     WebArchive webArchive = ShrinkWrap.create(WebArchive.class, "test.war")
         .addAsResource("META-INF/processes.xml")
         .addClass(AbstractFoxPlatformIntegrationTest.class)
+        .addAsLibraries(purgeDatabaseServlet())
         .addClass(TestLogger.class);
 
     TestContainer.addContainerSpecificResourcesWithoutWeld(webArchive);

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/PaContextSwitchTest.java
Patch:
@@ -52,12 +52,15 @@ public static WebArchive createDeployment1() {
         .addClass(ProcessApplication1.class)
         .addClass(JsonSerializable.class)
         .addClass(RuntimeServiceDelegate.class)
+        .addAsLibraries(purgeDatabaseServlet())
         .addAsResource("org/camunda/bpm/integrationtest/functional/spin/paContextSwitch.bpmn20.xml")
         .addClass(JsonDataFormatConfigurator.class)
         .addAsServiceProvider(DataFormatConfigurator.class, JsonDataFormatConfigurator.class);
 
     TestContainer.addSpinJacksonJsonDataFormat(webArchive);
 
+    DEPLOYMENT_NAMES.add("pa1");
+
     return webArchive;
   }
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/PaDataFormatAndPostDeployTest.java
Patch:
@@ -46,6 +46,7 @@ public static WebArchive createDeployment() {
         .addClass(FooDataFormat.class)
         .addClass(FooDataFormatProvider.class)
         .addClass(FooSpin.class)
+        .addAsLibraries(purgeDatabaseServlet())
         .addAsServiceProvider(DataFormatProvider.class, FooDataFormatProvider.class);
 
     return archive;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/PaDataFormatConfiguratorJodaTest.java
Patch:
@@ -53,11 +53,14 @@ public static WebArchive createDeployment() {
         .addAsResource("org/camunda/bpm/integrationtest/oneTaskProcess.bpmn")
         .addClass(JodaJsonSerializable.class)
         .addClass(JodaJsonDataFormatConfigurator.class)
+         .addAsLibraries(purgeDatabaseServlet())
         .addAsServiceProvider(DataFormatConfigurator.class, JodaJsonDataFormatConfigurator.class);
 
     TestContainer.addSpinJacksonJsonDataFormat(webArchive);
     TestContainer.addJodaTimeJacksonModule(webArchive);
 
+    DEPLOYMENT_NAMES.add("PaDataFormatTest");
+
     return webArchive;
 
   }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/PaDataFormatConfiguratorTest.java
Patch:
@@ -62,6 +62,9 @@ public static WebArchive createDeployment() {
 
     TestContainer.addSpinJacksonJsonDataFormat(webArchive);
 
+    webArchive.addAsLibraries(purgeDatabaseServlet());
+    DEPLOYMENT_NAMES.add("PaDataFormatTest");
+
     return webArchive;
 
   }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/PaDataFormatProviderTest.java
Patch:
@@ -52,6 +52,9 @@ public static WebArchive createDeployment() {
         .addAsServiceProvider(DataFormatProvider.class, FooDataFormatProvider.class)
         .addClass(ReferenceStoringProcessApplication.class);
 
+    webArchive.addAsLibraries(purgeDatabaseServlet());
+    DEPLOYMENT_NAMES.add("PaDataFormatTest");
+
     return webArchive;
   }
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/PaDataformatAndPostDeployApp.java
Patch:
@@ -12,13 +12,13 @@
  */
 package org.camunda.bpm.integrationtest.functional.spin;
 
-import static org.junit.Assert.assertNotNull;
-
 import org.camunda.bpm.application.PostDeploy;
 import org.camunda.bpm.application.ProcessApplication;
 import org.camunda.bpm.application.impl.ServletProcessApplication;
 import org.camunda.bpm.engine.ProcessEngine;
 
+import static org.junit.Assert.assertNotNull;
+
 
 /**
  * @author Daniel Meyer

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/RuntimeServiceDelegate.java
Patch:
@@ -12,8 +12,6 @@
  */
 package org.camunda.bpm.integrationtest.functional.spin;
 
-import java.util.Date;
-
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
@@ -22,6 +20,8 @@
 import org.camunda.bpm.engine.variable.value.ObjectValue;
 import org.camunda.bpm.integrationtest.functional.spin.dataformat.JsonSerializable;
 
+import java.util.Date;
+
 /**
  * @author Thorben Lindhauer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/dataformat/FailingJsonDataFormatConfigurator.java
Patch:
@@ -12,11 +12,11 @@
  */
 package org.camunda.bpm.integrationtest.functional.spin.dataformat;
 
-import java.text.SimpleDateFormat;
-
 import org.camunda.spin.impl.json.jackson.format.JacksonJsonDataFormat;
 import org.camunda.spin.spi.DataFormatConfigurator;
 
+import java.text.SimpleDateFormat;
+
 /**
  * @author Thorben Lindhauer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/dataformat/FooSpin.java
Patch:
@@ -12,10 +12,10 @@
  */
 package org.camunda.bpm.integrationtest.functional.spin.dataformat;
 
-import java.io.Writer;
-
 import org.camunda.spin.Spin;
 
+import java.io.Writer;
+
 /**
  * @author Thorben Lindhauer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/dataformat/ImplicitObjectValueUpdateHandler.java
Patch:
@@ -12,13 +12,13 @@
  */
 package org.camunda.bpm.integrationtest.functional.spin.dataformat;
 
-import java.util.Date;
-
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.DelegateTask;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 import org.camunda.bpm.engine.delegate.TaskListener;
 
+import java.util.Date;
+
 /**
  * @author Thorben Lindhauer
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/dataformat/JodaJsonDataFormatConfigurator.java
Patch:
@@ -12,11 +12,10 @@
  */
 package org.camunda.bpm.integrationtest.functional.spin.dataformat;
 
-import org.camunda.spin.impl.json.jackson.format.JacksonJsonDataFormat;
-import org.camunda.spin.spi.DataFormatConfigurator;
-
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.datatype.joda.JodaModule;
+import org.camunda.spin.impl.json.jackson.format.JacksonJsonDataFormat;
+import org.camunda.spin.spi.DataFormatConfigurator;
 
 /**
  * @author Thorben Lindhauer

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spring/SpringPAExpressionResolvingTest.java
Patch:
@@ -56,7 +56,9 @@ public static WebArchive processArchive() {
 
       // spring application context & libs
       .addAsWebInfResource("org/camunda/bpm/integrationtest/functional/spring/SpringPAExpressionResolvingTest-context.xml", "applicationContext.xml")
-      .addAsLibraries(DeploymentHelper.getEngineSpring());
+      .addAsLibraries(DeploymentHelper.getEngineSpring())
+
+      .addAsLibraries(purgeDatabaseServlet());
   }
 
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/transactions/TransactionIsolationLevelTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.camunda.bpm.integrationtest.functional.transactions;
 
 import org.apache.ibatis.session.SqlSession;
-import org.apache.ibatis.session.TransactionIsolationLevel;
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/transactions/TransactionListenerTest.java
Patch:
@@ -1,7 +1,5 @@
 package org.camunda.bpm.integrationtest.functional.transactions;
 
-import org.junit.Assert;
-
 import org.camunda.bpm.engine.impl.cfg.TransactionListener;
 import org.camunda.bpm.engine.impl.cfg.TransactionState;
 import org.camunda.bpm.engine.impl.interceptor.Command;
@@ -10,6 +8,7 @@
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.arquillian.junit.Arquillian;
 import org.jboss.shrinkwrap.api.spec.WebArchive;
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/transactions/beans/FailingDelegate.java
Patch:
@@ -1,10 +1,10 @@
 package org.camunda.bpm.integrationtest.functional.transactions.beans;
 
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
+import javax.inject.Named;
+
 @Named
 public class FailingDelegate implements JavaDelegate {
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/transactions/beans/FailingTransactionListenerDelegate.java
Patch:
@@ -12,15 +12,15 @@
  */
 package org.camunda.bpm.integrationtest.functional.transactions.beans;
 
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 import org.camunda.bpm.engine.impl.cfg.TransactionListener;
 import org.camunda.bpm.engine.impl.cfg.TransactionState;
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 
+import javax.inject.Named;
+
 @Named
 public class FailingTransactionListenerDelegate implements JavaDelegate {
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jboss/TestJobExecutorActivateFalse_JBOSS.java
Patch:
@@ -23,7 +23,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 /**
  * @author Daniel Meyer

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jboss/TestManagedDomain_JBOSS.java
Patch:
@@ -12,9 +12,6 @@
  */
 package org.camunda.bpm.integrationtest.jboss;
 
-import javax.naming.InitialContext;
-import javax.naming.NamingException;
-
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.arquillian.container.test.api.TargetsContainer;
 import org.jboss.arquillian.junit.Arquillian;
@@ -24,6 +21,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import javax.naming.InitialContext;
+import javax.naming.NamingException;
+
 /**
  * <p>Ensures subsystem boots in domain mode</p>
  *

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/AsyncIntermediateThrowSignalEventTest.java
Patch:
@@ -1,7 +1,5 @@
 package org.camunda.bpm.integrationtest.jobexecutor;
 
-import static org.junit.Assert.assertEquals;
-
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.jboss.arquillian.container.test.api.Deployment;
@@ -10,6 +8,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import static org.junit.Assert.assertEquals;
+
 
 @RunWith(Arquillian.class)
 public class AsyncIntermediateThrowSignalEventTest extends AbstractFoxPlatformIntegrationTest {

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/SignalReceivedDelegate.java
Patch:
@@ -1,12 +1,12 @@
 package org.camunda.bpm.integrationtest.jobexecutor;
 
-import javax.inject.Inject;
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.cdi.BusinessProcess;
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
+import javax.inject.Inject;
+import javax.inject.Named;
+
 
 @Named
 public class SignalReceivedDelegate implements JavaDelegate {    

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/TimerExecutionTest.java
Patch:
@@ -1,7 +1,5 @@
 package org.camunda.bpm.integrationtest.jobexecutor;
 
-import java.util.List;
-
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.integrationtest.jobexecutor.beans.SampleServiceBean;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
@@ -12,6 +10,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import java.util.List;
+
 /**
  *
  * @author nico.rehwaldt

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/beans/FailingSLSB.java
Patch:
@@ -1,11 +1,11 @@
 package org.camunda.bpm.integrationtest.jobexecutor.beans;
 
-import javax.ejb.Stateless;
-import javax.inject.Named;
-
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
+import javax.ejb.Stateless;
+import javax.inject.Named;
+
 @Named
 @Stateless
 public class FailingSLSB implements JavaDelegate {

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/beans/PriorityBean.java
Patch:
@@ -12,10 +12,9 @@
  */
 package org.camunda.bpm.integrationtest.jobexecutor.beans;
 
-import java.io.Serializable;
-
 import javax.ejb.Stateless;
 import javax.inject.Named;
+import java.io.Serializable;
 
 /**
  * @author Thorben Lindhauer

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/beans/SampleServiceBean.java
Patch:
@@ -1,10 +1,10 @@
 package org.camunda.bpm.integrationtest.jobexecutor.beans;
 
-import javax.enterprise.context.ApplicationScoped;
-
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
+import javax.enterprise.context.ApplicationScoped;
+
 /**
  *
  * @author nico.rehwaldt

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/service/PlatformServicesJndiBindingTest.java
Patch:
@@ -12,9 +12,6 @@
  */
 package org.camunda.bpm.integrationtest.service;
 
-import javax.naming.InitialContext;
-import javax.naming.NamingException;
-
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.camunda.bpm.integrationtest.util.TestConstants;
 import org.jboss.arquillian.container.test.api.Deployment;
@@ -24,6 +21,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import javax.naming.InitialContext;
+import javax.naming.NamingException;
+
 @RunWith(Arquillian.class)
 public class PlatformServicesJndiBindingTest extends AbstractFoxPlatformIntegrationTest {
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/service/ProcessApplicationServiceTest.java
Patch:
@@ -12,9 +12,6 @@
  */
 package org.camunda.bpm.integrationtest.service;
 
-import java.util.Arrays;
-import java.util.Set;
-
 import org.camunda.bpm.BpmPlatform;
 import org.camunda.bpm.ProcessApplicationService;
 import org.camunda.bpm.application.ProcessApplicationInfo;
@@ -27,6 +24,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import java.util.Arrays;
+import java.util.Set;
+
 
 /**
  * @author Daniel Meyer

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/service/ProcessEngineServiceTest.java
Patch:
@@ -1,7 +1,5 @@
 package org.camunda.bpm.integrationtest.service;
 
-import org.junit.Assert;
-
 import org.camunda.bpm.BpmPlatform;
 import org.camunda.bpm.ProcessEngineService;
 import org.camunda.bpm.engine.ProcessEngine;
@@ -10,6 +8,7 @@
 import org.jboss.arquillian.container.test.api.OperateOnDeployment;
 import org.jboss.arquillian.junit.Arquillian;
 import org.jboss.shrinkwrap.api.spec.WebArchive;
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/service/TestProcessEngineJndiBinding_JBOSS.java
Patch:
@@ -12,8 +12,6 @@
  */
 package org.camunda.bpm.integrationtest.service;
 
-import javax.naming.InitialContext;
-
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.jboss.arquillian.container.test.api.Deployment;
@@ -23,6 +21,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import javax.naming.InitialContext;
+
 /**
  * <p>Makes sure that the process engine JNDI bindings are created</p>
  * 

File: webapps/src/main/java/org/camunda/bpm/cockpit/rest/dto/AbstractRestQueryParametersDto.java
Patch:
@@ -36,6 +36,7 @@
  * @author roman.smirnov
  */
 public abstract class AbstractRestQueryParametersDto<T> extends QueryParameters<T> {
+  protected static final String DEFAULT_ORDER = "RES.ID_ asc";
 
   private static final long serialVersionUID = 1L;
 
@@ -96,7 +97,7 @@ public String getOrderBy() {
       }
       return String.format("%s %s", getOrderByValue(sortBy), sortOrder);
     }
-    return MybatisJoinHelper.orderBy(super.getOrderingProperties());
+    return DEFAULT_ORDER;
   }
 
   protected abstract String getOrderByValue(String sortBy);

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSession.java
Patch:
@@ -503,7 +503,7 @@ public List<String> getTableNamesPresent() {
 
           // for postgres we have to use lower case
           if (DbSqlSessionFactory.POSTGRES.equals(getDbSqlSessionFactory().getDatabaseType())) {
-            schema = schema.toLowerCase();
+            schema = schema == null ? schema : schema.toLowerCase();
             tableNameFilter = tableNameFilter.toLowerCase();
           }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSession.java
Patch:
@@ -489,7 +489,7 @@ public List<String> getTableNamesPresent() {
           // preparation for database table prefix
           String databaseTablePrefix = getDbSqlSessionFactory().getDatabaseTablePrefix();
           String tableNameFilter = "ACT_%";
-          String schema = "PUBLIC";
+          String schema = null;
           if (!databaseTablePrefix.isEmpty()) {
             String[] split = databaseTablePrefix.split("\\.");
             if (split.length > 0) {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/cfg/DatabaseTablePrefixTest.java
Patch:
@@ -53,6 +53,7 @@ public void shouldPerformDatabaseSchemaOperationCreate() throws Exception{
     ProcessEngineConfigurationImpl config1 = createCustomProcessEngineConfiguration()
             .setProcessEngineName("DatabaseTablePrefixTest-engine1")
             .setDataSource(pooledDataSource)
+            .setDbMetricsReporterActivate(false)
             .setDatabaseSchemaUpdate("NO_CHECK"); // disable auto create/drop schema
     config1.setDatabaseTablePrefix("SCHEMA1.");
     config1.setUseSharedSqlSessionFactory(true);
@@ -61,6 +62,7 @@ public void shouldPerformDatabaseSchemaOperationCreate() throws Exception{
     ProcessEngineConfigurationImpl config2 = createCustomProcessEngineConfiguration()
             .setProcessEngineName("DatabaseTablePrefixTest-engine2")
             .setDataSource(pooledDataSource)
+            .setDbMetricsReporterActivate(false)
             .setDatabaseSchemaUpdate("NO_CHECK"); // disable auto create/drop schema
     config2.setDatabaseTablePrefix("SCHEMA2.");
     config2.setUseSharedSqlSessionFactory(true);

File: engine/src/test/java/org/camunda/bpm/engine/test/api/cfg/DatabaseTableSchemaTest.java
Patch:
@@ -55,6 +55,7 @@ public void testPerformDatabaseSchemaOperationCreateTwice() throws Exception {
         .setDataSource(pooledDataSource).setDatabaseSchemaUpdate("NO_CHECK");
     config1.setDatabaseTablePrefix(SCHEMA_NAME + ".");
     config1.setDatabaseSchema(SCHEMA_NAME);
+    config1.setDbMetricsReporterActivate(false);
     ProcessEngine engine1 = config1.buildProcessEngine();
 
     // create the tables for the first time
@@ -86,6 +87,7 @@ public void testTablePresentWithSchemaAndPrefix() throws SQLException {
         .setDataSource(pooledDataSource).setDatabaseSchemaUpdate("NO_CHECK");
     config1.setDatabaseTablePrefix(SCHEMA_NAME + "." + PREFIX_NAME);
     config1.setDatabaseSchema(SCHEMA_NAME);
+    config1.setDbMetricsReporterActivate(false);
     ProcessEngine engine = config1.buildProcessEngine();
     CommandExecutor commandExecutor = config1.getCommandExecutorTxRequired();
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/cfg/HistoryLevelTest.java
Patch:
@@ -53,6 +53,7 @@ public void shouldInitHistoryLevelByString() throws Exception {
   protected ProcessEngineConfigurationImpl createConfig() {
     StandaloneInMemProcessEngineConfiguration configuration = new StandaloneInMemProcessEngineConfiguration();
     configuration.setProcessEngineName("process-engine-HistoryTest");
+    configuration.setDbMetricsReporterActivate(false);
     configuration.setJdbcUrl("jdbc:h2:mem:HistoryTest");
     return configuration;
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/metrics/MetricsTest.java
Patch:
@@ -58,6 +58,7 @@ protected static void clearMetrics() {
       meter.getAndClear();
     }
     managementService.deleteMetrics(null);
+    processEngineConfiguration.setDbMetricsReporterActivate(false);
   }
 
   @BeforeClass

File: engine/src/test/java/org/camunda/bpm/engine/test/util/DbSchemaPrefixTestHelper.java
Patch:
@@ -52,6 +52,7 @@ public void afterPropertiesSet() throws Exception {
     ProcessEngineConfigurationImpl config1 = createCustomProcessEngineConfiguration()
             .setProcessEngineName("DatabaseTablePrefixTest-engine1")
             .setDataSource(dataSource)
+            .setDbMetricsReporterActivate(false)
             .setDatabaseSchemaUpdate("NO_CHECK"); // disable auto create/drop schema
     config1.setDatabaseTablePrefix("SCHEMA1.");
     ProcessEngine engine1 = config1.buildProcessEngine();

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -72,7 +72,7 @@ public class DbSqlSessionFactory implements SessionFactory {
 
   static {
 
-    String defaultOrderBy = "${orderBy}";
+    String defaultOrderBy = "order by ${orderBy}";
 
     // h2
     databaseSpecificLimitBeforeStatements.put(H2, "");
@@ -281,7 +281,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     databaseSpecificLimitAfterStatements.put(MSSQL, databaseSpecificInnerLimitAfterStatements.get(MSSQL) + " ORDER BY SUB.rnk");
     databaseSpecificLimitBetweenStatements.put(MSSQL, ", row_number() over (ORDER BY ${orderBy}) rnk FROM ( select distinct RES.* ");
     databaseSpecificLimitBetweenFilterStatements.put(MSSQL, "");
-    databaseSpecificOrderByStatements.put(MSSQL, defaultOrderBy);
+    databaseSpecificOrderByStatements.put(MSSQL, "");
     databaseSpecificLimitBeforeNativeQueryStatements.put(MSSQL, "SELECT SUB.* FROM ( select RES.* , row_number() over (ORDER BY ${orderBy}) rnk FROM (");
     databaseSpecificDistinct.put(MSSQL, "");
 

File: engine-cdi/src/main/java/org/camunda/bpm/engine/cdi/impl/ProcessEngineServicesProducer.java
Patch:
@@ -53,7 +53,7 @@ public ProcessEngine processEngine() {
       return processEngine;
     } else {
       List<ProcessEngine> processEngines = BpmPlatform.getProcessEngineService().getProcessEngines();
-      if (processEngines != null && !processEngines.isEmpty()) {
+      if (processEngines != null && processEngines.size() == 1) {
         return processEngines.get(0);
       } else {
         return ProcessEngines.getDefaultProcessEngine(false);

File: engine/src/main/java/org/camunda/bpm/engine/impl/batch/deletion/DeleteProcessInstancesJobHandler.java
Patch:
@@ -66,7 +66,7 @@ public void execute(BatchJobConfiguration configuration, ExecutionEntity executi
     try {
       commandContext.getProcessEngineConfiguration()
           .getRuntimeService()
-          .deleteProcessInstances(batchConfiguration.getIds(), batchConfiguration.deleteReason, true, true);
+          .deleteProcessInstances(batchConfiguration.getIds(), batchConfiguration.deleteReason, false, true);
     } finally {
       commandContext.enableUserOperationLog();
       commandContext.setRestrictUserOperationLogToAuthenticatedUsers(initialLegacyRestrictions);

File: qa/performance-tests-engine/src/main/java/org/camunda/bpm/qa/performance/engine/junit/ProcessEngineJobExecutorPerformanceTestCase.java
Patch:
@@ -23,6 +23,7 @@ public abstract class ProcessEngineJobExecutorPerformanceTestCase extends Proces
 
   protected JobExecutor jobExecutor;
 
+  @Override
   @Before
   public void setup() {
     super.setup();

File: qa/performance-tests-engine/src/main/java/org/camunda/bpm/qa/performance/engine/sqlstatementlog/StatementLogSqlSession.java
Patch:
@@ -284,7 +284,7 @@ public SqlStatementLog(SqlStatementType type, Object parameters, String statemen
       try {
         statementParameters = JsonUtil.getMapper().writeValueAsString(parameters).replaceAll("\"", "'");
       } catch (Exception e) {
-        e.printStackTrace();
+//        e.printStackTrace();
       }
     }
 

File: qa/performance-tests-engine/src/main/java/org/camunda/bpm/qa/performance/engine/steps/WaitStep.java
Patch:
@@ -13,7 +13,6 @@
 
 package org.camunda.bpm.qa.performance.engine.steps;
 
-import org.camunda.bpm.qa.performance.engine.framework.PerfTestRun;
 import org.camunda.bpm.qa.performance.engine.framework.PerfTestRunContext;
 import org.camunda.bpm.qa.performance.engine.framework.PerfTestStepBehavior;
 

File: qa/performance-tests-engine/src/main/java/org/camunda/bpm/qa/performance/engine/util/JsonUtil.java
Patch:
@@ -67,7 +67,8 @@ public static ObjectMapper getMapper() {
       mapper = new ObjectMapper();
       SerializationConfig config = mapper
           .getSerializationConfig()
-          .withSerializationInclusion(Inclusion.NON_EMPTY);
+          .withSerializationInclusion(Inclusion.NON_EMPTY)
+          .without(SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS);
       mapper.setSerializationConfig(config);
 
     }

File: engine/src/main/java/org/camunda/bpm/engine/runtime/MessageCorrelationBuilder.java
Patch:
@@ -124,7 +124,7 @@ public interface MessageCorrelationBuilder {
   /**
    * Executes the message correlation.
    *
-   * @deprecated use {@link #correlateAllWithResult() ()} instead.
+   * @deprecated use {@link #correlateWithResult() ()} instead.
    */
   @Deprecated
   void correlate();

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/PvmExecutionImpl.java
Patch:
@@ -1177,7 +1177,6 @@ public void setActivity(PvmActivity activity) {
   @Override
   public void enterActivityInstance() {
     ActivityImpl activity = getActivity();
-    activity.setEntered(true);
     activityInstanceId = generateActivityInstanceId(activity.getId());
 
     LOG.debugEnterActivityInstance(this, getParentActivityInstanceId());

File: engine-cdi/src/test/java/org/camunda/bpm/engine/cdi/test/CdiProcessEngineTestCase.java
Patch:
@@ -100,8 +100,8 @@ public void setUpCdiProcessEngineTestCase() throws Exception {
     }
 
     beanManager = ProgrammaticBeanLookup.lookup(BeanManager.class);
-    processEngine = ProgrammaticBeanLookup.lookup(ProcessEngine.class);
-    processEngineConfiguration = ((ProcessEngineImpl)BpmPlatform.getProcessEngineService().getDefaultProcessEngine()).getProcessEngineConfiguration();
+    processEngine = processEngineRule.getProcessEngine();
+    processEngineConfiguration = (ProcessEngineConfigurationImpl) processEngineRule.getProcessEngine().getProcessEngineConfiguration();
     formService = processEngine.getFormService();
     historyService = processEngine.getHistoryService();
     identityService = processEngine.getIdentityService();

File: engine-cdi/src/test/java/org/camunda/bpm/engine/cdi/test/impl/context/BusinessProcessContextTest.java
Patch:
@@ -15,6 +15,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 
+import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.cdi.BusinessProcess;
 import org.camunda.bpm.engine.cdi.test.CdiProcessEngineTestCase;
 import org.camunda.bpm.engine.cdi.test.impl.beans.CreditCard;
@@ -28,6 +29,7 @@
  */
 public class BusinessProcessContextTest extends CdiProcessEngineTestCase {
 
+
   @Test
   @Deployment
   public void testResolution() throws Exception {

File: engine/src/main/java/org/camunda/bpm/engine/impl/ProcessInstanceModificationBuilderImpl.java
Patch:
@@ -1,4 +1,4 @@
-/* Licensed under the Apache License, Version 2.0 (the "License");
+ /* Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -1238,8 +1238,8 @@ protected boolean isAutoFireHistoryEvents() {
 
     ActivityImpl currentActivity = getActivity();
 
-    return !(startContext != null && startContext.isDelayFireHistoricVariableEvents())
-        && !(currentActivity != null && isAsyncStartEvent(currentActivity));
+    return (startContext == null || !startContext.isDelayFireHistoricVariableEvents())
+      && (currentActivity == null || currentActivity.isEntered() || !isAsyncStartEvent(currentActivity));
   }
 
   protected boolean isAsyncStartEvent(ActivityImpl activity) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/PvmExecutionImpl.java
Patch:
@@ -1177,7 +1177,7 @@ public void setActivity(PvmActivity activity) {
   @Override
   public void enterActivityInstance() {
     ActivityImpl activity = getActivity();
-
+    activity.setEntered(true);
     activityInstanceId = generateActivityInstanceId(activity.getId());
 
     LOG.debugEnterActivityInstance(this, getParentActivityInstanceId());

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/evaluation/ExpressionEvaluationHandler.java
Patch:
@@ -31,7 +31,6 @@
 import org.camunda.bpm.dmn.engine.impl.spi.el.ElProvider;
 import org.camunda.bpm.dmn.feel.impl.FeelEngine;
 import org.camunda.bpm.engine.variable.context.VariableContext;
-import org.camunda.bpm.engine.variable.value.TypedValue;
 import org.camunda.commons.utils.StringUtil;
 
 public class ExpressionEvaluationHandler {
@@ -123,7 +122,7 @@ protected Object evaluateElExpression(String expressionLanguage, String expressi
     }
   }
 
-  protected TypedValue evaluateFeelSimpleExpression(String expressionText, VariableContext variableContext) {
+  protected Object evaluateFeelSimpleExpression(String expressionText, VariableContext variableContext) {
     return feelEngine.evaluateSimpleExpression(expressionText, variableContext);
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/models/ConditionalModels.java
Patch:
@@ -23,6 +23,7 @@
 public class ConditionalModels {
 
 
+  public static final String CONDITIONAL_PROCESS_KEY= "processKey";
   public static final String SUB_PROCESS_ID = "subProcess";
   public static final String BOUNDARY_ID = "boundaryId";
   public static final String PROC_DEF_KEY = "Process";

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/helper/CompensationUtil.java
Patch:
@@ -30,6 +30,7 @@
 import org.camunda.bpm.engine.impl.pvm.delegate.ActivityExecution;
 import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 import org.camunda.bpm.engine.impl.pvm.process.ScopeImpl;
+import org.camunda.bpm.engine.impl.pvm.runtime.ActivityInstanceState;
 import org.camunda.bpm.engine.impl.pvm.runtime.PvmExecutionImpl;
 import org.camunda.bpm.engine.impl.tree.TreeVisitor;
 import org.camunda.bpm.engine.impl.tree.FlowScopeWalker;
@@ -107,6 +108,7 @@ public static void createEventScopeExecution(ExecutionEntity execution) {
 
       ExecutionEntity eventScopeExecution = scopeExecution.createExecution();
       eventScopeExecution.setActivity(execution.getActivity());
+      eventScopeExecution.activityInstanceStarting();
       eventScopeExecution.enterActivityInstance();
       eventScopeExecution.setActive(false);
       eventScopeExecution.setConcurrent(false);

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/MigrationCompensationInstanceVisitor.java
Patch:
@@ -54,6 +54,7 @@ protected void instantiateScopes(
 
       compensationScopeExecution.setActivity((PvmActivity) scope);
       compensationScopeExecution.setActive(false);
+      compensationScopeExecution.activityInstanceStarting();
       compensationScopeExecution.enterActivityInstance();
 
       EventSubscriptionEntity eventSubscription = EventSubscriptionEntity.createAndInsert(parentExecution, EventType.COMPENSATE, (ActivityImpl) scope);

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityInstanceStart.java
Patch:
@@ -33,6 +33,7 @@ public abstract class PvmAtomicOperationActivityInstanceStart extends AbstractPv
   @Override
   protected PvmExecutionImpl eventNotificationsStarted(PvmExecutionImpl execution) {
     execution.incrementSequenceCounter();
+    execution.activityInstanceStarting();
     execution.enterActivityInstance();
 
     return execution;

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationCreateScope.java
Patch:
@@ -14,6 +14,7 @@
 
 import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.PvmLogger;
+import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 import org.camunda.bpm.engine.impl.pvm.runtime.PvmExecutionImpl;
 
 /**

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/validation/activity/SupportedActivityValidator.java
Patch:
@@ -49,6 +49,8 @@ public class SupportedActivityValidator implements MigrationActivityValidator {
     SUPPORTED_ACTIVITY_BEHAVIORS.add(ParallelGatewayActivityBehavior.class);
     SUPPORTED_ACTIVITY_BEHAVIORS.add(InclusiveGatewayActivityBehavior.class);;
     SUPPORTED_ACTIVITY_BEHAVIORS.add(IntermediateConditionalEventBehavior.class);
+    SUPPORTED_ACTIVITY_BEHAVIORS.add(BoundaryConditionalEventActivityBehavior.class);
+    SUPPORTED_ACTIVITY_BEHAVIORS.add(EventSubProcessStartConditionalEventActivityBehavior.class);
   }
 
   public boolean valid(ActivityImpl activity) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/validation/activity/SupportedPassiveEventTriggerActivityValidator.java
Patch:
@@ -37,10 +37,12 @@ public class SupportedPassiveEventTriggerActivityValidator implements MigrationA
     ActivityTypes.BOUNDARY_SIGNAL,
     ActivityTypes.BOUNDARY_TIMER,
     ActivityTypes.BOUNDARY_COMPENSATION,
+    ActivityTypes.BOUNDARY_CONDITIONAL,
     ActivityTypes.START_EVENT_MESSAGE,
     ActivityTypes.START_EVENT_SIGNAL,
     ActivityTypes.START_EVENT_TIMER,
-    ActivityTypes.START_EVENT_COMPENSATION
+    ActivityTypes.START_EVENT_COMPENSATION,
+    ActivityTypes.START_EVENT_CONDITIONAL
   );
 
   public boolean valid(ActivityImpl activity) {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationBoundaryEventsTest.java
Patch:
@@ -84,6 +84,7 @@ public void testMigrateMultipleBoundaryEvents() {
       .mapActivities("timerBoundary1", "timerBoundary1")
       .mapActivities("signalBoundary1", "signalBoundary1")
       .mapActivities("conditionalBoundary1", "conditionalBoundary1")
+      .updateEventTrigger()
       .mapActivities(USER_TASK_ID, USER_TASK_ID)
       .mapActivities("messageBoundary2", "messageBoundary2")
       .build();
@@ -429,7 +430,7 @@ public void testUpdateConditionalEventExpression() {
     MigrationPlan migrationPlan = rule.getRuntimeService()
       .createMigrationPlan(sourceProcessDefinition.getId(), targetProcessDefinition.getId())
       .mapActivities(USER_TASK_ID, USER_TASK_ID)
-      .mapActivities(BOUNDARY_ID, BOUNDARY_ID)//.updateEventTrigger()
+      .mapActivities(BOUNDARY_ID, BOUNDARY_ID).updateEventTrigger()
       .build();
 
     // when process is migrated without update event trigger

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationEventSubProcessTest.java
Patch:
@@ -642,7 +642,7 @@ public void testUpdateEventSignalWithExpression() {
   public void testUpdateConditionalEventExpression() {
     // given
     BpmnModelInstance sourceProcess = EventSubProcessModels.FALSE_CONDITIONAL_EVENT_SUBPROCESS_PROCESS;
-    BpmnModelInstance targetProcess = modify(EventSubProcessModels.TRUE_CONDITIONAL_EVENT_SUBPROCESS_PROCESS);
+    BpmnModelInstance targetProcess = modify(EventSubProcessModels.CONDITIONAL_EVENT_SUBPROCESS_PROCESS);
 
     ProcessDefinition sourceProcessDefinition = testHelper.deployAndGetDefinition(sourceProcess);
     ProcessDefinition targetProcessDefinition = testHelper.deployAndGetDefinition(targetProcess);
@@ -651,7 +651,7 @@ public void testUpdateConditionalEventExpression() {
     MigrationPlan migrationPlan = rule.getRuntimeService()
       .createMigrationPlan(sourceProcessDefinition.getId(), targetProcessDefinition.getId())
       .mapActivities(USER_TASK_ID, USER_TASK_ID)
-      .mapActivities(EVENT_SUB_PROCESS_START_ID, EVENT_SUB_PROCESS_START_ID)//.updateEventTrigger()
+      .mapActivities(EVENT_SUB_PROCESS_START_ID, EVENT_SUB_PROCESS_START_ID).updateEventTrigger()
       .build();
 
     // when process is migrated without update event trigger

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ProcessDefinitionRestServiceInteractionTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.camunda.bpm.engine.rest.helper.variable.EqualsPrimitiveValue;
 import org.camunda.bpm.engine.rest.helper.variable.EqualsUntypedValue;
 import org.camunda.bpm.engine.rest.sub.repository.impl.ProcessDefinitionResourceImpl;
+import org.camunda.bpm.engine.rest.util.EncodingUtil;
 import org.camunda.bpm.engine.rest.util.ModificationInstructionBuilder;
 import org.camunda.bpm.engine.rest.util.VariablesBuilder;
 import org.camunda.bpm.engine.rest.util.container.TestContainerRule;
@@ -428,7 +429,7 @@ public void testGetRenderedStartFormForDifferentPlatformEncoding() throws NoSuch
         .when()
           .get(RENDERED_FORM_URL);
 
-    String responseContent = new String(response.asByteArray(), "UTF-8");
+    String responseContent = new String(response.asByteArray(), EncodingUtil.DEFAULT_ENCODING);
     Assertions.assertThat(responseContent).isEqualTo(expectedResult);
   }
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/TaskRestServiceInteractionTest.java
Patch:
@@ -98,6 +98,7 @@
 import org.camunda.bpm.engine.rest.helper.MockProvider;
 import org.camunda.bpm.engine.rest.helper.VariableTypeHelper;
 import org.camunda.bpm.engine.rest.helper.variable.EqualsPrimitiveValue;
+import org.camunda.bpm.engine.rest.util.EncodingUtil;
 import org.camunda.bpm.engine.rest.util.VariablesBuilder;
 import org.camunda.bpm.engine.rest.util.container.TestContainerRule;
 import org.camunda.bpm.engine.task.Attachment;
@@ -621,7 +622,7 @@ public void testGetRenderedFormForDifferentPlatformEncoding() throws NoSuchField
         .when()
           .get(RENDERED_FORM_URL);
 
-    String responseContent = new String(response.asByteArray(), "UTF-8");
+    String responseContent = new String(response.asByteArray(), EncodingUtil.DEFAULT_ENCODING);
     Assertions.assertThat(responseContent).isEqualTo(expectedResult);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/behavior/StageActivityBehavior.java
Patch:
@@ -51,7 +51,9 @@ protected void performStart(CmmnActivityExecution execution) {
         // if "autoComplete == true" and there are no
         // required nor active child activities,
         // then the stage will be completed.
-        checkAndCompleteCaseExecution(execution);
+        if (execution.isActive()) {
+          checkAndCompleteCaseExecution(execution);
+        }
       }
 
     } else {

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/task/TaskResource.java
Patch:
@@ -28,6 +28,7 @@
 import javax.ws.rs.core.Context;
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Request;
+import javax.ws.rs.core.Response;
 
 import org.camunda.bpm.engine.rest.dto.VariableValueDto;
 import org.camunda.bpm.engine.rest.dto.task.CompleteTaskDto;
@@ -57,7 +58,7 @@ public interface TaskResource {
   @GET
   @Path("/rendered-form")
   @Produces(MediaType.APPLICATION_XHTML_XML)
-  String getRenderedForm();
+  Response getRenderedForm();
 
   @POST
   @Path("/claim")

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/ProcessDefinitionResource.java
Patch:
@@ -74,7 +74,7 @@ Response deleteProcessDefinition(@QueryParam("cascade") boolean cascade,
   @GET
   @Path("/rendered-form")
   @Produces(MediaType.APPLICATION_XHTML_XML)
-  byte[] getRenderedForm();
+  Response getRenderedForm();
 
   @PUT
   @Path("/suspended")

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ProcessDefinitionRestServiceInteractionTest.java
Patch:
@@ -447,9 +447,6 @@ public void testGetRenderedStartFormForDifferentPlatformEncoding() throws NoSuch
     String expectedResult = "<formField>unicode symbol: \u2200</formField>";
     when(formServiceMock.getRenderedStartForm(MockProvider.EXAMPLE_PROCESS_DEFINITION_ID)).thenReturn(expectedResult);
 
-    Charset charset = Charset.defaultCharset();
-    String encoding = charset.displayName();
-
     Response response = given()
         .pathParam("id", MockProvider.EXAMPLE_PROCESS_DEFINITION_ID)
         .then()

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/ProcessDefinitionResource.java
Patch:
@@ -74,7 +74,7 @@ Response deleteProcessDefinition(@QueryParam("cascade") boolean cascade,
   @GET
   @Path("/rendered-form")
   @Produces(MediaType.APPLICATION_XHTML_XML)
-  String getRenderedForm();
+  byte[] getRenderedForm();
 
   @PUT
   @Path("/suspended")

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/BoundaryConditionalEventActivityBehavior.java
Patch:
@@ -42,12 +42,11 @@ public ConditionalEventDefinition getConditionalEventDefinition() {
   }
 
   @Override
-  public void leaveOnSatisfiedCondition(final EventSubscriptionEntity eventSubscription,
-          final VariableEvent variableEvent, final CommandContext commandContext) {
+  public void leaveOnSatisfiedCondition(final EventSubscriptionEntity eventSubscription, final VariableEvent variableEvent) {
     final PvmExecutionImpl execution = eventSubscription.getExecution();
 
     if (execution != null && !execution.isEnded() && execution.isScope()
-        && variableEvent != null && conditionalEvent.tryEvaluate(variableEvent, execution)) {
+        && conditionalEvent.tryEvaluate(variableEvent, execution)) {
       execution.executeEventHandlerActivity(eventSubscription.getActivity());
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/ConditionalEventBehavior.java
Patch:
@@ -41,8 +41,6 @@ public interface ConditionalEventBehavior {
    *
    * @param eventSubscription the event subscription which contains all necessary informations
    * @param variableEvent the variableEvent to evaluate the condition
-   * @param commandContext the current command context
    */
-  void leaveOnSatisfiedCondition(final EventSubscriptionEntity eventSubscription,
-          final VariableEvent variableEvent, final CommandContext commandContext);
+  void leaveOnSatisfiedCondition(final EventSubscriptionEntity eventSubscription, final VariableEvent variableEvent);
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/EventSubProcessStartConditionalEventActivityBehavior.java
Patch:
@@ -40,11 +40,10 @@ public ConditionalEventDefinition getConditionalEventDefinition() {
   }
 
   @Override
-  public void leaveOnSatisfiedCondition(final EventSubscriptionEntity eventSubscription, final VariableEvent variableEvent, final CommandContext commandContext) {
+  public void leaveOnSatisfiedCondition(final EventSubscriptionEntity eventSubscription, final VariableEvent variableEvent) {
     PvmExecutionImpl execution = eventSubscription.getExecution();
 
     if (execution != null && !execution.isEnded() && execution.isScope()
-        && variableEvent != null
         && conditionalEvent.tryEvaluate(variableEvent, execution)) {
       ActivityImpl activity = eventSubscription.getActivity();
       activity = (ActivityImpl) activity.getFlowScope();

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/IntermediateConditionalEventBehavior.java
Patch:
@@ -49,7 +49,7 @@ public void execute(final ActivityExecution execution) throws Exception {
   }
 
   @Override
-  public void leaveOnSatisfiedCondition(final EventSubscriptionEntity eventSubscription, final VariableEvent variableEvent, final CommandContext commandContext) {
+  public void leaveOnSatisfiedCondition(final EventSubscriptionEntity eventSubscription, final VariableEvent variableEvent) {
     PvmExecutionImpl execution = eventSubscription.getExecution();
 
     if (execution != null && !execution.isEnded()

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/ConditionalEventDefinition.java
Patch:
@@ -100,6 +100,6 @@ public boolean tryEvaluate(DelegateExecution execution) {
   }
 
   public boolean tryEvaluate(VariableEvent variableEvent, DelegateExecution execution) {
-    return shouldEvaluateForVariableEvent(variableEvent) && tryEvaluate(execution);
+    return (variableEvent == null || shouldEvaluateForVariableEvent(variableEvent)) && tryEvaluate(execution);
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/event/ConditionalEventHandler.java
Patch:
@@ -37,7 +37,7 @@ public String getEventHandlerType() {
   @Override
   public void handleEvent(EventSubscriptionEntity eventSubscription, Object payload, CommandContext commandContext) {
     VariableEvent variableEvent;
-    if (payload instanceof VariableEvent) {
+    if (payload == null || payload instanceof VariableEvent) {
       variableEvent = (VariableEvent) payload;
     } else {
       throw new ProcessEngineException("Payload have to be " + VariableEvent.class.getName() + ", to evaluate condition.");
@@ -47,7 +47,7 @@ public void handleEvent(EventSubscriptionEntity eventSubscription, Object payloa
     ActivityBehavior activityBehavior = activity.getActivityBehavior();
     if (activityBehavior instanceof ConditionalEventBehavior) {
       ConditionalEventBehavior conditionalBehavior = (ConditionalEventBehavior) activityBehavior;
-      conditionalBehavior.leaveOnSatisfiedCondition(eventSubscription, variableEvent, commandContext);
+      conditionalBehavior.leaveOnSatisfiedCondition(eventSubscription, variableEvent);
     } else {
       throw new ProcessEngineException("Conditional Event has not correct behavior: " + activityBehavior);
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -25,6 +25,7 @@
 import org.camunda.bpm.engine.ProcessEngineServices;
 import org.camunda.bpm.engine.delegate.ExecutionListener;
 import org.camunda.bpm.engine.impl.ProcessEngineLogger;
+import org.camunda.bpm.engine.impl.bpmn.behavior.ConditionalEventBehavior;
 import org.camunda.bpm.engine.impl.bpmn.behavior.NoneStartEventActivityBehavior;
 import org.camunda.bpm.engine.impl.bpmn.parser.BpmnParse;
 import org.camunda.bpm.engine.impl.bpmn.parser.EventSubscriptionDeclaration;
@@ -59,6 +60,7 @@
 import org.camunda.bpm.engine.impl.persistence.entity.util.FormPropertyStartContext;
 import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.PvmProcessDefinition;
+import org.camunda.bpm.engine.impl.pvm.delegate.ActivityBehavior;
 import org.camunda.bpm.engine.impl.pvm.delegate.CompositeActivityBehavior;
 import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 import org.camunda.bpm.engine.impl.pvm.process.ProcessDefinitionImpl;

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityStart.java
Patch:
@@ -35,7 +35,6 @@ protected void eventNotificationsCompleted(PvmExecutionImpl execution) {
       execution.disposeExecutionStartContext();
     }
 
-
     execution.dispatchDelayedEventsAndPerformOperation(ACTIVITY_EXECUTE);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityStartCreateScope.java
Patch:
@@ -37,6 +37,5 @@ public String getCanonicalName() {
 
   protected void scopeCreated(PvmExecutionImpl execution) {
     execution.performOperation(ACTIVITY_START);
-
   }
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrateEventSubProcessAndTriggerTest.java
Patch:
@@ -137,7 +137,7 @@ public String toString() {
         new MigrateEventSubProcessAndTriggerTestConfiguration() {
           @Override
           public BpmnModelInstance getBpmnModel() {
-            return EventSubProcessModels.TRUE_CONDITIONAL_EVENT_SUBPROCESS_PROCESS;
+            return EventSubProcessModels.CONDITIONAL_EVENT_SUBPROCESS_PROCESS;
           }
 
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationBoundaryEventsParameterizedTest.java
Patch:
@@ -195,7 +195,7 @@ public BpmnModelInstance getSourceProcess(BpmnModelInstance modelInstance, Strin
             .activityBuilder(activityId)
             .boundaryEvent(BOUNDARY_ID)
             .conditionalEventDefinition()
-              .condition("${true}")
+              .condition("${any=='any'}")
             .conditionalEventDefinitionDone()
             .userTask(AFTER_BOUNDARY_TASK)
             .endEvent()

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationNestedEventSubProcessTest.java
Patch:
@@ -161,7 +161,8 @@ public BpmnModelInstance getSourceProcess() {
             .addSubProcessTo(EventSubProcessModels.SUB_PROCESS_ID)
             .triggerByEvent()
             .embeddedSubProcess()
-            .startEvent(EVENT_SUB_PROCESS_START_ID).condition(EventSubProcessModels.TRUE_CONDITION)
+            .startEvent(EVENT_SUB_PROCESS_START_ID)
+            .condition(EventSubProcessModels.VAR_CONDITION)
             .userTask(EVENT_SUB_PROCESS_TASK_ID)
             .endEvent()
             .subProcessDone()

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/EventBasedGatewayActivityBehavior.java
Patch:
@@ -36,7 +36,7 @@ public void execute(ActivityExecution execution) throws Exception {
         ConditionalEventBehavior conditionalEventBehavior = (ConditionalEventBehavior) activityBehavior;
         ConditionalEventDefinition conditionalEventDefinition = conditionalEventBehavior.getConditionalEventDefinition();
         if (conditionalEventDefinition.tryEvaluate(execution)) {
-          ((ExecutionEntity) execution).executeEventHandlerActivity(conditionalEventDefinition.getActivity());
+          ((ExecutionEntity) execution).executeEventHandlerActivity(conditionalEventDefinition.getConditionalActivity());
           return;
         }
       }

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/helper/BpmnProperties.java
Patch:
@@ -13,6 +13,7 @@
 
 package org.camunda.bpm.engine.impl.bpmn.helper;
 
+import org.camunda.bpm.engine.impl.bpmn.parser.ConditionalEventDefinition;
 import org.camunda.bpm.engine.impl.bpmn.parser.ErrorEventDefinition;
 import org.camunda.bpm.engine.impl.bpmn.parser.EscalationEventDefinition;
 import org.camunda.bpm.engine.impl.bpmn.parser.EventSubscriptionDeclaration;
@@ -36,6 +37,7 @@ public class BpmnProperties {
   public static final PropertyKey<String> TYPE = new PropertyKey<String>("type");
 
   public static final PropertyListKey<EscalationEventDefinition> ESCALATION_EVENT_DEFINITIONS = new PropertyListKey<EscalationEventDefinition>("escalationEventDefinitions");
+  public static final PropertyListKey<ConditionalEventDefinition> CONDITIONAL_EVENT_DEFINITIONS = new PropertyListKey<ConditionalEventDefinition>("conditionalEventDefinitions");
 
   public static final PropertyListKey<ErrorEventDefinition> ERROR_EVENT_DEFINITIONS = new PropertyListKey<ErrorEventDefinition>("errorEventDefinitions");
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/event/EventType.java
Patch:
@@ -29,7 +29,6 @@ public final class EventType {
   public static final EventType MESSAGE = new EventType("message");
   public static final EventType SIGNAL = new EventType("signal");
   public static final EventType COMPENSATE = new EventType("compensate");
-  public static final EventType CONDITONAL = new EventType("conditional");
 
   private final String name;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -495,7 +495,7 @@ protected List<VariableInstanceLifecycleListener<CoreVariableInstance>> getVaria
   @Override
   public void dispatchEvent(VariableEvent variableEvent) {
     if (execution != null && variableEvent.getVariableInstance().getTaskId() == null) {
-      execution.handleConditionalEventOnVariableChange(variableEvent);
+//      execution.handleConditionalEventOnVariableChange(variableEvent);
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/process/ScopeImpl.java
Patch:
@@ -237,4 +237,6 @@ public ProcessDefinitionImpl getProcessDefinition() {
     return processDefinition;
   }
 
+
+
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/PvmExecutionImpl.java
Patch:
@@ -1427,7 +1427,7 @@ public Map<ScopeImpl, PvmExecutionImpl> createActivityExecutionMapping() {
     return flowScopeExecution.createActivityExecutionMapping(flowScope);
   }
 
-  protected PvmExecutionImpl getFlowScopeExecution() {
+  public PvmExecutionImpl getFlowScopeExecution() {
     if (!isScope || CompensationBehavior.executesNonScopeCompensationHandler(this)) {
       // LEGACY: a correct implementation should also skip a compensation-throwing parent scope execution
       // (since compensation throwing activities are scopes), but this cannot be done for backwards compatibility
@@ -1922,6 +1922,7 @@ protected void dispatchScopeEvents(PvmExecutionImpl execution) {
       targetScope = getTargetScope(event);
       PvmExecutionImpl replaced = targetScope.getReplacedBy() != null ? targetScope.getReplacedBy() : targetScope;
       dispatchOnSameActivity(targetScope, replaced, activityIds, activityInstanceIds, event);
+
     }
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/conditional/AbstractConditionalEventTestCase.java
Patch:
@@ -92,15 +92,13 @@ public abstract class AbstractConditionalEventTestCase {
   protected TaskService taskService;
   protected RepositoryService repositoryService;
   protected ProcessEngineConfigurationImpl processEngineConfiguration;
-  protected EventSubscriptionQueryImpl conditionEventSubscriptionQuery;
 
   @Before
   public void init() {
     this.runtimeService = engine.getRuntimeService();
     this.taskService = engine.getTaskService();
     this.repositoryService = engine.getRepositoryService();
     this.processEngineConfiguration = engine.getProcessEngineConfiguration();
-    this.conditionEventSubscriptionQuery = new EventSubscriptionQueryImpl(processEngineConfiguration.getCommandExecutorTxRequired()).eventType(EventType.CONDITONAL.name());
   }
 
   @After
@@ -114,7 +112,6 @@ public void checkIfProcessCanBeFinished() {
     }
 
     //then
-    assertEquals(0, conditionEventSubscriptionQuery.list().size());
     assertNull(taskService.createTaskQuery().singleResult());
     assertNull(runtimeService.createProcessInstanceQuery().singleResult());
     tasksAfterVariableIsSet = null;

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/conditional/ConditionalEventTriggeredByExecutionListenerTest.java
Patch:
@@ -198,7 +198,6 @@ public void testNonInterruptingSetVariableInStartListener() {
     //non interrupting boundary event is triggered
     tasksAfterVariableIsSet = taskQuery.list();
     assertEquals(2, tasksAfterVariableIsSet.size());
-    assertEquals(specifier.expectedSubscriptions(), conditionEventSubscriptionQuery.list().size());
     for (Task task : tasksAfterVariableIsSet) {
       assertTrue(task.getName().equals(specifier.expectedActivityName()) || task.getName().equals(TASK_WITH_CONDITION));
     }
@@ -270,7 +269,6 @@ public void testNonInterruptingSetVariableInTakeListener() {
     //non interrupting boundary event is triggered
     tasksAfterVariableIsSet = taskQuery.list();
     assertEquals(2, tasksAfterVariableIsSet.size());
-    assertEquals(specifier.expectedSubscriptions(), conditionEventSubscriptionQuery.list().size());
   }
 
   @Test
@@ -340,7 +338,7 @@ public void testNonInterruptingSetVariableInTakeListenerWithAsyncBefore() {
     //and job was created
     Job job = engine.getManagementService().createJobQuery().singleResult();
     assertNotNull(job);
-    assertEquals(1, conditionEventSubscriptionQuery.list().size());
+
 
     //when job is executed task is created
     engine.getManagementService().executeJob(job.getId());

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/conditional/MixedConditionalEventTest.java
Patch:
@@ -808,7 +808,5 @@ public void testNonInterruptingSetVariableInOutMappingOfCallActivity() {
     //-> all non interrupting conditional events are triggered
     tasksAfterVariableIsSet = taskQuery.list();
     assertEquals(5, tasksAfterVariableIsSet.size());
-    //three subscriptions: event sub process in sub process and on process instance level and boundary event of sub process
-    assertEquals(3, conditionEventSubscriptionQuery.count());
   }
 }

File: engine/src/main/java/org/camunda/bpm/application/ProcessApplication.java
Patch:
@@ -28,7 +28,7 @@
 @Target(ElementType.TYPE)
 public @interface ProcessApplication {
 
-  String META_INF_PROCESSES_XML  = "META-INF/processes.xml";
+  String DEFAULT_META_INF_PROCESSES_XML = "META-INF/processes.xml";
 
   /**
    * Allows specifying the name of the process application.
@@ -51,6 +51,6 @@
    *
    * @return the location of the <code>processes.xml</code> file.
    */
-  String[] deploymentDescriptors() default { META_INF_PROCESSES_XML };
+  String[] deploymentDescriptors() default {DEFAULT_META_INF_PROCESSES_XML};
 
 }

File: engine/src/main/java/org/camunda/bpm/container/impl/deployment/ParseProcessesXmlStep.java
Patch:
@@ -116,7 +116,7 @@ protected List<URL> getProcessesXmlUrls(String[] deploymentDescriptors, Abstract
   protected String[] getDeploymentDescriptorLocations(AbstractProcessApplication processApplication) {
     ProcessApplication annotation = processApplication.getClass().getAnnotation(ProcessApplication.class);
     if(annotation == null) {
-      return new String[] {ProcessApplication.META_INF_PROCESSES_XML};
+      return new String[] {ProcessApplication.DEFAULT_META_INF_PROCESSES_XML};
 
     } else {
       return annotation.deploymentDescriptors();

File: engine/src/main/java/org/camunda/bpm/application/ProcessApplication.java
Patch:
@@ -28,6 +28,8 @@
 @Target(ElementType.TYPE)
 public @interface ProcessApplication {
 
+  String META_INF_PROCESSES_XML  = "META-INF/processes.xml";
+
   /**
    * Allows specifying the name of the process application.
    * Overrides the {@code name} property.
@@ -49,6 +51,6 @@
    *
    * @return the location of the <code>processes.xml</code> file.
    */
-  String[] deploymentDescriptors() default { "META-INF/processes.xml" };
+  String[] deploymentDescriptors() default { META_INF_PROCESSES_XML };
 
 }

File: engine/src/main/java/org/camunda/bpm/container/impl/deployment/ParseProcessesXmlStep.java
Patch:
@@ -46,8 +46,6 @@ public class ParseProcessesXmlStep extends DeploymentOperationStep {
 
   private final static ContainerIntegrationLogger LOG = ProcessEngineLogger.CONTAINER_INTEGRATION_LOGGER;
 
-  private static final String META_INF_PROCESSES_XML = "META-INF/processes.xml";
-
   public String getName() {
     return "Parse processes.xml deployment descriptor files.";
   }
@@ -118,7 +116,7 @@ protected List<URL> getProcessesXmlUrls(String[] deploymentDescriptors, Abstract
   protected String[] getDeploymentDescriptorLocations(AbstractProcessApplication processApplication) {
     ProcessApplication annotation = processApplication.getClass().getAnnotation(ProcessApplication.class);
     if(annotation == null) {
-      return new String[] {META_INF_PROCESSES_XML};
+      return new String[] {ProcessApplication.META_INF_PROCESSES_XML};
 
     } else {
       return annotation.deploymentDescriptors();

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/conditional/EventSubProcessStartConditionalEventTest.java
Patch:
@@ -1092,7 +1092,7 @@ public void testNonInterruptingConditionalSuspendedProcess() {
     tasksAfterVariableIsSet = taskService.createTaskQuery().list();
   }
 
-  @Test
+  @Ignore
   public void testNonInterruptingSetMultipleVariables() {
     BpmnModelInstance modelInstance = Bpmn.createExecutableProcess(CONDITIONAL_EVENT_PROCESS_KEY)
       .startEvent()

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/conditional/EventSubProcessStartConditionalEventTest.java
Patch:
@@ -1092,7 +1092,7 @@ public void testNonInterruptingConditionalSuspendedProcess() {
     tasksAfterVariableIsSet = taskService.createTaskQuery().list();
   }
 
-  @Ignore
+  @Test
   public void testNonInterruptingSetMultipleVariables() {
     BpmnModelInstance modelInstance = Bpmn.createExecutableProcess(CONDITIONAL_EVENT_PROCESS_KEY)
       .startEvent()

File: engine/src/main/java/org/camunda/bpm/engine/impl/interceptor/AtomicOperationInvocation.java
Patch:
@@ -52,7 +52,8 @@ protected void init(AtomicOperation operation, ExecutionEntity execution, boolea
   public void execute(BpmnStackTrace stackTrace) {
 
     if(operation != PvmAtomicOperation.ACTIVITY_START_CANCEL_SCOPE
-        && operation != PvmAtomicOperation.ACTIVITY_START_INTERRUPT_SCOPE) {
+       && operation != PvmAtomicOperation.ACTIVITY_START_INTERRUPT_SCOPE
+       && operation != PvmAtomicOperation.ACTIVITY_START_CONCURRENT) {
       // execution might be replaced in the meantime:
       ExecutionEntity replacedBy = execution.getReplacedBy();
       if(replacedBy != null) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -3442,7 +3442,7 @@ protected ConditionalEventDefinition parseConditionalEventDefinition(Element ele
     Element conditionExprElement = element.element(CONDITION);
     if (conditionExprElement != null) {
       Condition condition = parseConditionExpression(conditionExprElement);
-      conditionalEventDefinition = new ConditionalEventDefinition(condition, conditionalActivity.getId());
+      conditionalEventDefinition = new ConditionalEventDefinition(condition, conditionalActivity);
 
       final String variableName = element.attributeNS(CAMUNDA_BPMN_EXTENSIONS_NS, "variableName");
       conditionalEventDefinition.setVariableName(variableName);

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/AbstractBpmnActivityBehavior.java
Patch:
@@ -60,7 +60,6 @@ public class AbstractBpmnActivityBehavior extends FlowNodeActivityBehavior {
    */
   @Override
   public void doLeave(ActivityExecution execution) {
-    // TODO: call atomic operation
 
     PvmActivity currentActivity = execution.getActivity();
     ActivityImpl compensationHandler = ((ActivityImpl) currentActivity).findCompensationHandler();

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/operation/AbstractCmmnEventAtomicOperation.java
Patch:
@@ -33,7 +33,7 @@ public boolean isAsync(CmmnExecution execution) {
     return false;
   }
 
-  protected final void eventNotificationsCompleted(CmmnExecution execution) {
+  protected void eventNotificationsCompleted(CmmnExecution execution) {
     repetition(execution);
     preTransitionNotification(execution);
     performTransitionNotification(execution);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/operation/CmmnAtomicOperation.java
Patch:
@@ -47,6 +47,7 @@ public interface CmmnAtomicOperation extends CoreAtomicOperation<CmmnExecution>
   CmmnAtomicOperation CASE_EXECUTION_TERMINATING_ON_TERMINATION = new AtomicOperationCaseExecutionTerminatingOnTermination();
   CmmnAtomicOperation CASE_EXECUTION_TERMINATING_ON_PARENT_TERMINATION = new AtomicOperationCaseExecutionTerminatingOnParentTermination();
   CmmnAtomicOperation CASE_EXECUTION_TERMINATING_ON_EXIT = new AtomicOperationCaseExecutionTerminatingOnExit();
+  CmmnAtomicOperation CASE_EXECUTION_PARENT_COMPLETE = new AtomicOperationCaseExecutionParentComplete();
 
   // suspending
   CmmnAtomicOperation CASE_EXECUTION_SUSPENDING_ON_SUSPENSION = new AtomicOperationCaseExecutionSuspendingOnSuspension();

File: engine/src/main/java/org/camunda/bpm/engine/RuntimeService.java
Patch:
@@ -22,12 +22,10 @@
 import org.camunda.bpm.engine.repository.Deployment;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
 import org.camunda.bpm.engine.runtime.*;
-import org.camunda.bpm.engine.task.Attachment;
 import org.camunda.bpm.engine.variable.VariableMap;
 import org.camunda.bpm.engine.variable.value.SerializableValue;
 import org.camunda.bpm.engine.variable.value.TypedValue;
 
-import java.io.InputStream;
 import java.util.Collection;
 import java.util.List;
 import java.util.Map;

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/CancelEndEventActivityBehavior.java
Patch:
@@ -50,7 +50,7 @@ public void execute(ActivityExecution execution) throws Exception {
 
   }
 
-  protected void leave(ActivityExecution execution) {
+  public void doLeave(ActivityExecution execution) {
     // continue via the appropriate cancel boundary event
     ScopeImpl eventScope = (ScopeImpl) cancelBoundaryEvent.getEventScope();
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/ExclusiveGatewayActivityBehavior.java
Patch:
@@ -45,7 +45,7 @@ public class ExclusiveGatewayActivityBehavior extends GatewayActivityBehavior {
    * then the default sequence flow is taken (if defined).
    */
   @Override
-  protected void leave(ActivityExecution execution) {
+  public void doLeave(ActivityExecution execution) {
 
     LOG.leavingActivity(execution.getActivity().getId());
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/MultiInstanceActivityBehavior.java
Patch:
@@ -161,10 +161,10 @@ protected boolean completionConditionSatisfied(ActivityExecution execution) {
   }
 
   @Override
-  protected void leave(ActivityExecution execution) {
+  public void doLeave(ActivityExecution execution) {
     CompensationUtil.createEventScopeExecution((ExecutionEntity) execution);
 
-    super.leave(execution);
+    super.doLeave(execution);
   }
 
   /**

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/ScriptTaskActivityBehavior.java
Patch:
@@ -42,7 +42,8 @@ public ScriptTaskActivityBehavior(ExecutableScript script, String resultVariable
     this.resultVariable = resultVariable;
   }
 
-  public void execute(final ActivityExecution execution) throws Exception {
+  @Override
+  public void performExecution(final ActivityExecution execution) throws Exception {
     executeWithErrorPropagation(execution, new Callable<Void>() {
       @Override
       public Void call() throws Exception {

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/ServiceTaskDelegateExpressionActivityBehavior.java
Patch:
@@ -94,7 +94,7 @@ public Void call() throws Exception {
   }
 
 	@Override
-  public void execute(final ActivityExecution execution) throws Exception {
+  public void performExecution(final ActivityExecution execution) throws Exception {
 	  Callable<Void> callable = new Callable<Void>() {
       @Override
       public Void call() throws Exception {

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/ServiceTaskExpressionActivityBehavior.java
Patch:
@@ -38,7 +38,8 @@ public ServiceTaskExpressionActivityBehavior(Expression expression, String resul
     this.resultVariable = resultVariable;
   }
 
-  public void execute(final ActivityExecution execution) throws Exception {
+  @Override
+  public void performExecution(final ActivityExecution execution) throws Exception {
     executeWithErrorPropagation(execution, new Callable<Void>() {
       @Override
       public Void call() throws Exception {

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/SubProcessActivityBehavior.java
Patch:
@@ -56,10 +56,10 @@ public void complete(ActivityExecution scopeExecution) {
   }
 
   @Override
-  public void leave(ActivityExecution execution) {
+  public void doLeave(ActivityExecution execution) {
     CompensationUtil.createEventScopeExecution((ExecutionEntity) execution);
 
-    super.leave(execution);
+    super.doLeave(execution);
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/UserTaskActivityBehavior.java
Patch:
@@ -47,7 +47,8 @@ public UserTaskActivityBehavior(TaskDecorator taskDecorator) {
     this.taskDecorator = taskDecorator;
   }
 
-  public void execute(ActivityExecution execution) throws Exception {
+  @Override
+  public void performExecution(ActivityExecution execution) throws Exception {
     TaskEntity task = TaskEntity.createAndInsert(execution);
 
     taskDecorator.decorate(task, execution);

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/variable/scope/AbstractVariableScope.java
Patch:
@@ -284,6 +284,7 @@ public void removeVariablesLocal(Collection<String> variableNames) {
   public void setVariable(String variableName, Object value) {
     TypedValue typedValue = Variables.untypedValue(value);
     setVariable(variableName, typedValue, getSourceActivityVariableScope());
+
   }
 
   protected void setVariable(String variableName, TypedValue value, AbstractVariableScope sourceActivityVariableScope) {
@@ -376,7 +377,7 @@ public void removeVariable(String variableName) {
 
   protected void removeVariable(String variableName, AbstractVariableScope sourceActivityExecution) {
     if (getVariableStore().containsKey(variableName)) {
-      removeVariableLocal(variableName);
+      removeVariableLocal(variableName, sourceActivityExecution);
       return;
     }
     AbstractVariableScope parentVariableScope = getParentVariableScope();

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -488,8 +488,7 @@ protected List<VariableInstanceLifecycleListener<CoreVariableInstance>> getVaria
     return Arrays.<VariableInstanceLifecycleListener<CoreVariableInstance>>asList(
         (VariableInstanceLifecycleListener) VariableInstanceEntityPersistenceListener.INSTANCE,
         (VariableInstanceLifecycleListener) VariableInstanceSequenceCounterListener.INSTANCE,
-        (VariableInstanceLifecycleListener) VariableInstanceHistoryListener.INSTANCE,
-        (VariableInstanceLifecycleListener) new VariableListenerInvocationListener(this)
+        (VariableInstanceLifecycleListener) VariableInstanceHistoryListener.INSTANCE
       );
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/ActivityInstanceState.java
Patch:
@@ -27,6 +27,8 @@ public interface ActivityInstanceState {
   ActivityInstanceState DEFAULT = new ActivityInstanceStateImpl(0, "default");
   ActivityInstanceState SCOPE_COMPLETE = new ActivityInstanceStateImpl(1, "scopeComplete");
   ActivityInstanceState CANCELED = new ActivityInstanceStateImpl(2, "canceled");
+  ActivityInstanceState STARTING = new ActivityInstanceStateImpl(3, "starting");
+  ActivityInstanceState ENDING = new ActivityInstanceStateImpl(4, "ending");
 
   int getStateCode();
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/AbstractPvmAtomicOperationTransitionNotifyListenerTake.java
Patch:
@@ -34,7 +34,7 @@ protected void eventNotificationsCompleted(PvmExecutionImpl execution) {
     switch (destination.getActivityStartBehavior()) {
     case DEFAULT:
       execution.setActivity(destination);
-      execution.performOperation(TRANSITION_CREATE_SCOPE);
+      execution.dispatchDelayedEventsAndPerformOperation(TRANSITION_CREATE_SCOPE);
       break;
     case INTERRUPT_FLOW_SCOPE:
       execution.setActivity(null);

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperation.java
Patch:
@@ -52,4 +52,6 @@ public interface PvmAtomicOperation extends CoreAtomicOperation<PvmExecutionImpl
 
   PvmAtomicOperation DELETE_CASCADE = new PvmAtomicOperationDeleteCascade();
   PvmAtomicOperation DELETE_CASCADE_FIRE_ACTIVITY_END = new PvmAtomicOperationDeleteCascadeFireActivityEnd();
+
+  PvmAtomicOperation ACTIVITY_LEAVE = new PvmAtomicOperationActivityLeave();
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityExecute.java
Patch:
@@ -32,6 +32,9 @@ public boolean isAsync(PvmExecutionImpl execution) {
   }
 
   public void execute(PvmExecutionImpl execution) {
+
+    execution.activityInstanceStarted();
+
     ActivityBehavior activityBehavior = getActivityBehavior(execution);
 
     ActivityImpl activity = execution.getActivity();

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityStart.java
Patch:
@@ -14,6 +14,7 @@
 package org.camunda.bpm.engine.impl.pvm.runtime.operation;
 
 import org.camunda.bpm.engine.delegate.ExecutionListener;
+import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 import org.camunda.bpm.engine.impl.pvm.process.ScopeImpl;
 import org.camunda.bpm.engine.impl.pvm.runtime.ExecutionStartContext;
 import org.camunda.bpm.engine.impl.pvm.runtime.PvmExecutionImpl;
@@ -34,7 +35,8 @@ protected void eventNotificationsCompleted(PvmExecutionImpl execution) {
       execution.disposeExecutionStartContext();
     }
 
-    execution.performOperation(ACTIVITY_EXECUTE);
+
+    execution.dispatchDelayedEventsAndPerformOperation(ACTIVITY_EXECUTE);
   }
 
   protected String getEventName() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationProcessEnd.java
Patch:
@@ -42,7 +42,7 @@ protected String getEventName() {
   @Override
   protected void eventNotificationsCompleted(PvmExecutionImpl execution) {
 
-    super.eventNotificationsCompleted(execution);
+    execution.leaveActivityInstance();
 
     PvmExecutionImpl superExecution = execution.getSuperExecution();
     CmmnActivityExecution superCaseExecution = execution.getSuperCaseExecution();

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationTransitionNotifyListenerStart.java
Patch:
@@ -13,6 +13,7 @@
 package org.camunda.bpm.engine.impl.pvm.runtime.operation;
 
 import org.camunda.bpm.engine.delegate.ExecutionListener;
+import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.process.ScopeImpl;
 import org.camunda.bpm.engine.impl.pvm.process.TransitionImpl;
@@ -39,7 +40,7 @@ protected void eventNotificationsCompleted(PvmExecutionImpl execution) {
 
     TransitionImpl transition = execution.getTransition();
     PvmActivity destination;
-    if(transition == null) { // this is null after async cont. -> transition is not stored in execution
+    if (transition == null) { // this is null after async cont. -> transition is not stored in execution
       destination = execution.getActivity();
     } else {
       destination = transition.getDestination();
@@ -53,7 +54,7 @@ protected void eventNotificationsCompleted(PvmExecutionImpl execution) {
       execution.disposeExecutionStartContext();
     }
 
-    execution.performOperation(ACTIVITY_EXECUTE);
+    execution.dispatchDelayedEventsAndPerformOperation(ACTIVITY_EXECUTE);
   }
 
   public String getCanonicalName() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationsTransitionInterruptFlowScope.java
Patch:
@@ -28,7 +28,7 @@ public String getCanonicalName() {
   }
 
   protected void scopeInterrupted(PvmExecutionImpl execution) {
-    execution.performOperation(TRANSITION_CREATE_SCOPE);
+    execution.dispatchDelayedEventsAndPerformOperation(TRANSITION_CREATE_SCOPE);
   }
 
   protected PvmActivity getInterruptingActivity(PvmExecutionImpl execution) {

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/sendtask/DummyActivityBehavior.java
Patch:
@@ -28,7 +28,8 @@ public void signal(ActivityExecution execution, String signalName, Object signal
     leave(execution);
   }
 
-  public void execute(ActivityExecution execution) throws Exception {
+  @Override
+  public void performExecution(ActivityExecution execution) throws Exception {
     wasExecuted = true;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/ProcessDefinitionQueryImpl.java
Patch:
@@ -304,7 +304,7 @@ public List<ProcessDefinition> executeList(CommandContext commandContext, Page p
       .findProcessDefinitionsByQueryCriteria(this, page);
 
     boolean shouldQueryAddBpmnModelInstancesToCache =
-        commandContext.getProcessEngineConfiguration().getProcessDefinitionQueryExtendsDeploymentCache();
+        commandContext.getProcessEngineConfiguration().getEnableFetchProcessDefinitionDescription();
     if(shouldQueryAddBpmnModelInstancesToCache) {
       addProcessDefinitionToCacheAndRetrieveDocumentation(list);
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/SetJobsRetriesByProcessBatchCmd.java
Patch:
@@ -27,15 +27,15 @@ protected List<String> collectJobIds(CommandContext commandContext) {
 
     if (this.processInstanceIds != null) {
       for (String process : this.processInstanceIds) {
-        for (Job job : commandContext.getJobManager().findJobsByExecutionId(process)) {
+        for (Job job : commandContext.getJobManager().findJobsByProcessInstanceId(process)) {
           collectedJobIds.add(job.getId());
         }
       }
     }
 
     if (query != null) {
       for (ProcessInstance process : query.list()) {
-        for (Job job : commandContext.getJobManager().findJobsByExecutionId(process.getId())) {
+        for (Job job : commandContext.getJobManager().findJobsByProcessInstanceId(process.getId())) {
           collectedJobIds.add(job.getId());
         }
       }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/batch/DeleteHistoricProcessInstancesBatchAuthorizationTest.java
Patch:
@@ -75,7 +75,7 @@ public void cleanBatch() {
   public static Collection<AuthorizationScenario[]> scenarios() {
     return AuthorizationTestRule.asParameters(
         AuthorizationScenarioWithCount.scenario()
-            .withCount(1L)
+            .withCount(2L)
             .withAuthorizations(
                 grant(Resources.BATCH, "*", "userId", Permissions.CREATE),
                 grant(Resources.PROCESS_DEFINITION, "Process_1", "userId", Permissions.READ_HISTORY, Permissions.DELETE_HISTORY),

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/batch/SetJobRetriesBatchAuthorizationTest.java
Patch:
@@ -69,6 +69,7 @@ protected List<String> getAllJobIds() {
   @Parameterized.Parameter
   public AuthorizationScenarioWithCount scenario;
 
+  @Override
   @Before
   public void deployProcesses() {
     Deployment deploy = testHelper.deploy(DEFINITION_XML);
@@ -78,6 +79,7 @@ public void deployProcesses() {
     processInstance2 = engineRule.getRuntimeService().startProcessInstanceById(sourceDefinition.getId());
   }
 
+  @Override
   public void testCleanUp() {
     engineRule.getRuntimeService().deleteProcessInstances(
         Arrays.asList(new String [] {processInstance.getId(),processInstance2.getId()}), "test", true, true);

File: engine/src/main/java/org/camunda/bpm/engine/impl/dmn/cmd/DeleteHistoricDecisionInstanceByInstanceIdCmd.java
Patch:
@@ -37,14 +37,14 @@ public DeleteHistoricDecisionInstanceByInstanceIdCmd(String historicDecisionInst
   public Object execute(CommandContext commandContext) {
     ensureNotNull("historicDecisionInstanceId", historicDecisionInstanceId);
 
-    HistoricDecisionInstance instance = commandContext
+    HistoricDecisionInstance historicDecisionInstance = commandContext
         .getHistoricDecisionInstanceManager()
         .findHistoricDecisionInstance(historicDecisionInstanceId);
     ensureNotNull("No historic decision instance found with id: " + historicDecisionInstanceId,
-        "historicDecisionInstanceId", historicDecisionInstanceId);
+        "historicDecisionInstance", historicDecisionInstance);
 
     for (CommandChecker checker : commandContext.getProcessEngineConfiguration().getCommandCheckers()) {
-      checker.checkDeleteHistoricDecisionInstance(instance.getDecisionDefinitionKey());
+      checker.checkDeleteHistoricDecisionInstance(historicDecisionInstance.getDecisionDefinitionKey());
     }
 
     commandContext

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/evaluation/ExpressionEvaluationHandler.java
Patch:
@@ -132,7 +132,7 @@ protected TypedValue evaluateFeelSimpleExpression(String expressionText, Variabl
   protected String getExpressionTextForLanguage(DmnExpressionImpl expression, String expressionLanguage) {
     String expressionText = expression.getExpression();
     if (expressionText != null) {
-      if (DefaultDmnEngineConfiguration.JUEL_EXPRESSION_LANGUAGE.equals(expressionLanguage) && !StringUtil.isExpression(expressionText)) {
+      if (DefaultDmnEngineConfiguration.JUEL_EXPRESSION_LANGUAGE.equalsIgnoreCase(expressionLanguage) && !StringUtil.isExpression(expressionText)) {
         return "${" + expressionText + "}";
       } else {
         return expressionText;
@@ -154,7 +154,7 @@ protected ScriptEngine getScriptEngineForName(String expressionLanguage) {
   }
 
   protected boolean isElExpression(String expressionLanguage) {
-    return DefaultDmnEngineConfiguration.JUEL_EXPRESSION_LANGUAGE.equals(expressionLanguage);
+    return DefaultDmnEngineConfiguration.JUEL_EXPRESSION_LANGUAGE.equalsIgnoreCase(expressionLanguage);
   }
 
   public boolean isFeelExpressionLanguage(String expressionLanguage) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/dmn/cmd/DeleteHistoricDecisionInstanceByDefinitionIdCmd.java
Patch:
@@ -26,11 +26,11 @@
  * @author Philipp Ossler
  *
  */
-public class DeleteHistoricDecisionInstanceCmd implements Command<Object> {
+public class DeleteHistoricDecisionInstanceByDefinitionIdCmd implements Command<Object> {
 
   protected final String decisionDefinitionId;
 
-  public DeleteHistoricDecisionInstanceCmd(String decisionDefinitionId) {
+  public DeleteHistoricDecisionInstanceByDefinitionIdCmd(String decisionDefinitionId) {
     this.decisionDefinitionId = decisionDefinitionId;
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/history/dmn/HistoricDecisionInstanceTest.java
Patch:
@@ -372,7 +372,7 @@ public void testDeleteHistoricDecisionInstances() {
     assertThat(query.count(), is(1L));
 
     DecisionDefinition decisionDefinition = repositoryService.createDecisionDefinitionQuery().singleResult();
-    historyService.deleteHistoricDecisionInstance(decisionDefinition.getId());
+    historyService.deleteHistoricDecisionInstanceByDefinitionId(decisionDefinition.getId());
 
     assertThat(query.count(), is(0L));
   }

File: javaee/jobexecutor-ra/src/main/java/org/camunda/bpm/container/impl/threading/ra/inflow/JcaInflowExecuteJobsRunnable.java
Patch:
@@ -36,6 +36,7 @@ public JcaInflowExecuteJobsRunnable(List<String> jobIds, ProcessEngineImpl proce
     }
   }
 
+  @Override
   protected void executeJob(String nextJobId, CommandExecutor commandExecutor) {
     JobExecutionHandlerActivation jobHandlerActivation = ra.getJobHandlerActivation();
     if(jobHandlerActivation == null) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/deploy/CacheFactory.java
Patch:
@@ -18,7 +18,7 @@
 /**
  * <p>Builds the caches for the {@link DeploymentCache}.</p>
  */
-public interface CacheFactory<String, DbEntity> {
+public interface CacheFactory {
 
   /**
    * Creates a cache that does not exceed a specified number of elements.
@@ -28,5 +28,5 @@ public interface CacheFactory<String, DbEntity> {
    * @return
    *        The cache to be created.
    */
-  public Cache<String, DbEntity> createCache(int maxNumberOfElementsInCache);
+  public <T> Cache<String, T > createCache(int maxNumberOfElementsInCache);
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/deploy/DefaultCacheFactory.java
Patch:
@@ -22,10 +22,10 @@
  *
  * @author Johannes Heinemann
  */
-public class DefaultCacheFactory<String, DbEntity> implements CacheFactory<String, DbEntity>{
+public class DefaultCacheFactory implements CacheFactory{
 
   @Override
-  public Cache<String, DbEntity> createCache(int maxNumberOfElementsInCache) {
-    return new ConcurrentLruCache<String, DbEntity>(maxNumberOfElementsInCache);
+  public <T> Cache<String, T> createCache(int maxNumberOfElementsInCache) {
+    return new ConcurrentLruCache<String, T>(maxNumberOfElementsInCache);
   }
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/cfg/MyCacheFactory.java
Patch:
@@ -21,11 +21,11 @@
  *
  * @author Johannes Heinemann
  */
-public class MyCacheFactory<String, DbEntity> extends DefaultCacheFactory<String, DbEntity> {
+public class MyCacheFactory extends DefaultCacheFactory {
 
   @Override
-  public Cache<String, DbEntity> createCache(int maxNumberOfElementsInCache) {
-    return new MyCacheImplementation<String, DbEntity>(maxNumberOfElementsInCache);
+  public <T> Cache<String, T> createCache(int maxNumberOfElementsInCache) {
+    return new MyCacheImplementation<String, T>(maxNumberOfElementsInCache);
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -1651,7 +1651,7 @@ protected void initEventHandlers() {
       EventHandler messageEventHandler = new EventHandlerImpl(EventType.MESSAGE);
       eventHandlers.put(messageEventHandler.getEventHandlerType(), messageEventHandler);
 
-      EventHandler conditionalEventHandler = new EventHandlerImpl(EventType.CONDITONAL);
+      EventHandler conditionalEventHandler = new ConditionalEventHandler();
       eventHandlers.put(conditionalEventHandler.getEventHandlerType(), conditionalEventHandler);
 
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/variable/scope/AbstractVariableScope.java
Patch:
@@ -46,7 +46,7 @@ public abstract class AbstractVariableScope implements Serializable, VariableSco
   protected abstract VariableStore<CoreVariableInstance> getVariableStore();
   protected abstract VariableInstanceFactory<CoreVariableInstance> getVariableInstanceFactory();
   protected abstract List<VariableInstanceLifecycleListener<CoreVariableInstance>> getVariableInstanceLifecycleListeners();
-  
+
   public abstract AbstractVariableScope getParentVariableScope();
 
   // get variable map /////////////////////////////////////////

File: engine/src/main/java/org/camunda/bpm/engine/impl/EventSubscriptionQueryImpl.java
Patch:
@@ -101,7 +101,7 @@ public EventSubscriptionQuery includeEventSubscriptionsWithoutTenantId() {
 
   public EventSubscriptionQueryImpl eventType(String eventType) {
     ensureNotNull("event type", eventType);
-    this.eventType = eventType.toUpperCase();
+    this.eventType = eventType;
     return this;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/ConditionalEventDefinition.java
Patch:
@@ -33,8 +33,8 @@ public class ConditionalEventDefinition extends EventSubscriptionDeclaration imp
   protected final Condition conditionalExpression;
   protected boolean interrupting;
 
-  public ConditionalEventDefinition(Condition conditionalExpression, String eventName, String activityId) {
-    super(eventName, EventType.CONDITONAL);
+  public ConditionalEventDefinition(Condition conditionalExpression, String activityId) {
+    super(null, EventType.CONDITONAL);
     this.activityId = activityId;
     this.conditionalExpression = conditionalExpression;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/EventSubscriptionQueryImpl.java
Patch:
@@ -101,7 +101,7 @@ public EventSubscriptionQuery includeEventSubscriptionsWithoutTenantId() {
 
   public EventSubscriptionQueryImpl eventType(String eventType) {
     ensureNotNull("event type", eventType);
-    this.eventType = eventType;
+    this.eventType = eventType.toUpperCase();
     return this;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/BpmnBehaviorLogger.java
Patch:
@@ -16,7 +16,7 @@
 import org.camunda.bpm.engine.delegate.Expression;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 import org.camunda.bpm.engine.impl.ProcessEngineLogger;
-import org.camunda.bpm.engine.impl.persistence.entity.SignalEventSubscriptionEntity;
+import org.camunda.bpm.engine.impl.persistence.entity.EventSubscriptionEntity;
 import org.camunda.bpm.engine.impl.pvm.runtime.PvmExecutionImpl;
 
 /**
@@ -93,7 +93,7 @@ public void noActivityActivation(String activityId) {
     logDebug("012", "Element with id '{}' does not activate.", activityId);
   }
 
-  public void ignoringEventSubscription(SignalEventSubscriptionEntity eventSubscription, String processDefinitionId) {
+  public void ignoringEventSubscription(EventSubscriptionEntity eventSubscription, String processDefinitionId) {
     logDebug(
       "014",
       "Found event subscription '{}' but process definition with id '{}' could not be found.",

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/CancelEndEventActivityBehavior.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.List;
 
 import org.camunda.bpm.engine.impl.bpmn.helper.CompensationUtil;
-import org.camunda.bpm.engine.impl.persistence.entity.CompensateEventSubscriptionEntity;
+import org.camunda.bpm.engine.impl.persistence.entity.EventSubscriptionEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.delegate.ActivityExecution;
@@ -38,7 +38,7 @@ public void execute(ActivityExecution execution) throws Exception {
     EnsureUtil
     .ensureNotNull("Could not find cancel boundary event for cancel end event " + execution.getActivity(), "cancelBoundaryEvent", cancelBoundaryEvent);
 
-    List<CompensateEventSubscriptionEntity> compensateEventSubscriptions =
+    List<EventSubscriptionEntity> compensateEventSubscriptions =
         CompensationUtil.collectCompensateEventSubscriptionsForScope(execution);
 
     if(compensateEventSubscriptions.isEmpty()) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/CompensationEventActivityBehavior.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.camunda.bpm.engine.impl.bpmn.helper.CompensationUtil;
 import org.camunda.bpm.engine.impl.bpmn.parser.CompensateEventDefinition;
-import org.camunda.bpm.engine.impl.persistence.entity.CompensateEventSubscriptionEntity;
+import org.camunda.bpm.engine.impl.persistence.entity.EventSubscriptionEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 import org.camunda.bpm.engine.impl.pvm.delegate.ActivityExecution;
 import org.camunda.bpm.engine.impl.pvm.runtime.PvmExecutionImpl;
@@ -41,7 +41,7 @@ public CompensationEventActivityBehavior(CompensateEventDefinition compensateEve
   @Override
   public void execute(ActivityExecution execution) throws Exception {
 
-    final List<CompensateEventSubscriptionEntity> eventSubscriptions = collectEventSubscriptions(execution);
+    final List<EventSubscriptionEntity> eventSubscriptions = collectEventSubscriptions(execution);
     if (eventSubscriptions.isEmpty()) {
       leave(execution);
     } else {
@@ -50,7 +50,7 @@ public void execute(ActivityExecution execution) throws Exception {
     }
   }
 
-  protected List<CompensateEventSubscriptionEntity> collectEventSubscriptions(ActivityExecution execution) {
+  protected List<EventSubscriptionEntity> collectEventSubscriptions(ActivityExecution execution) {
     final String activityRef = compensateEventDefinition.getActivityRef();
     if (activityRef != null) {
       return CompensationUtil.collectCompensateEventSubscriptionsForActivity(execution, activityRef);

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/ConditionalEventDefinition.java
Patch:
@@ -18,6 +18,7 @@
 import java.io.Serializable;
 import org.camunda.bpm.engine.delegate.Expression;
 import org.camunda.bpm.engine.impl.Condition;
+import org.camunda.bpm.engine.impl.event.EventType;
 
 /**
  * Represents the conditional event definition corresponding to the
@@ -33,8 +34,8 @@ public class ConditionalEventDefinition extends EventSubscriptionDeclaration imp
   protected Condition conditionalExpression;
   protected boolean interrupting;
 
-  public ConditionalEventDefinition(String eventName, String eventType, String activityId) {
-    super(eventName, eventType);
+  public ConditionalEventDefinition(String eventName, String activityId) {
+    super(eventName, EventType.CONDITONAL);
     this.activityId = activityId;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/CommandLogger.java
Patch:
@@ -20,7 +20,6 @@
 import org.camunda.bpm.engine.impl.ProcessEngineLogger;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.persistence.entity.EventSubscriptionEntity;
-import org.camunda.bpm.engine.impl.persistence.entity.MessageEventSubscriptionEntity;
 import org.camunda.bpm.engine.impl.runtime.CorrelationSet;
 import org.camunda.bpm.engine.impl.util.ClassNameUtil;
 
@@ -110,7 +109,7 @@ public void exceptionWhileGettingValueForVariable(Exception t) {
         "015", "exception while getting value for variable {}", t.getMessage(), t);
   }
 
-  public void couldNotFindProcessDefinitionForEventSubscription(MessageEventSubscriptionEntity messageEventSubscription, String processDefinitionId) {
+  public void couldNotFindProcessDefinitionForEventSubscription(EventSubscriptionEntity messageEventSubscription, String processDefinitionId) {
     logDebug(
         "016",
         "Found event subscription with {} but process definition {} could not be found.", messageEventSubscription, processDefinitionId);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/MessageEventReceivedCmd.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Map;
 
 import org.camunda.bpm.engine.impl.cfg.CommandChecker;
-import org.camunda.bpm.engine.impl.event.MessageEventHandler;
+import org.camunda.bpm.engine.impl.event.EventType;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.persistence.entity.EventSubscriptionEntity;
@@ -61,10 +61,10 @@ public Void execute(CommandContext commandContext) {
     List<EventSubscriptionEntity> eventSubscriptions = null;
     if (messageName != null) {
       eventSubscriptions = eventSubscriptionManager.findEventSubscriptionsByNameAndExecution(
-          MessageEventHandler.EVENT_HANDLER_TYPE, messageName, executionId, exclusive);
+              EventType.MESSAGE.name(), messageName, executionId, exclusive);
     } else {
       eventSubscriptions = eventSubscriptionManager.findEventSubscriptionsByExecutionAndType(
-          executionId, MessageEventHandler.EVENT_HANDLER_TYPE, exclusive);
+          executionId, EventType.MESSAGE.name(), exclusive);
     }
 
     ensureNotEmpty("Execution with id '" + executionId + "' does not have a subscription to a message event with name '" + messageName + "'", "eventSubscriptions", eventSubscriptions);

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/MigratingCompensationEventSubscriptionInstance.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.camunda.bpm.engine.impl.ProcessEngineLogger;
 import org.camunda.bpm.engine.impl.migration.MigrationLogger;
-import org.camunda.bpm.engine.impl.persistence.entity.CompensateEventSubscriptionEntity;
+import org.camunda.bpm.engine.impl.persistence.entity.EventSubscriptionEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 import org.camunda.bpm.engine.impl.pvm.process.ScopeImpl;
@@ -28,13 +28,13 @@ public class MigratingCompensationEventSubscriptionInstance extends MigratingPro
 
   public static final MigrationLogger MIGRATION_LOGGER = ProcessEngineLogger.MIGRATION_LOGGER;
 
-  protected CompensateEventSubscriptionEntity eventSubscription;
+  protected EventSubscriptionEntity eventSubscription;
 
   public MigratingCompensationEventSubscriptionInstance(
       MigrationInstruction migrationInstruction,
       ScopeImpl sourceScope,
       ScopeImpl targetScope,
-      CompensateEventSubscriptionEntity eventSubscription) {
+      EventSubscriptionEntity eventSubscription) {
     this.migrationInstruction = migrationInstruction;
     this.eventSubscription = eventSubscription;
     this.sourceScope = sourceScope;

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/MigratingEventScopeInstance.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.camunda.bpm.engine.impl.ProcessEngineLogger;
 import org.camunda.bpm.engine.impl.migration.MigrationLogger;
-import org.camunda.bpm.engine.impl.persistence.entity.CompensateEventSubscriptionEntity;
+import org.camunda.bpm.engine.impl.persistence.entity.EventSubscriptionEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 import org.camunda.bpm.engine.impl.pvm.process.ScopeImpl;
@@ -48,7 +48,7 @@ public MigratingEventScopeInstance(
       ScopeImpl sourceScope,
       ScopeImpl targetScope,
       MigrationInstruction eventSubscriptionInstruction,
-      CompensateEventSubscriptionEntity eventSubscription,
+      EventSubscriptionEntity eventSubscription,
       ScopeImpl eventSubscriptionSourceScope,
       ScopeImpl eventSubscriptionTargetScope
       ) {
@@ -70,7 +70,7 @@ public MigratingEventScopeInstance(
    * Creates an emerged scope
    */
   public MigratingEventScopeInstance(
-      CompensateEventSubscriptionEntity eventSubscription,
+      EventSubscriptionEntity eventSubscription,
       ExecutionEntity eventScopeExecution,
       ScopeImpl targetScope
       ) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/MigratingProcessInstance.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.camunda.bpm.engine.impl.ProcessEngineLogger;
 import org.camunda.bpm.engine.impl.migration.MigrationLogger;
-import org.camunda.bpm.engine.impl.persistence.entity.CompensateEventSubscriptionEntity;
+import org.camunda.bpm.engine.impl.persistence.entity.EventSubscriptionEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.ProcessDefinitionEntity;
 import org.camunda.bpm.engine.impl.pvm.process.ScopeImpl;
@@ -148,7 +148,7 @@ public MigratingEventScopeInstance addEventScopeInstance(
       ScopeImpl sourceScope,
       ScopeImpl targetScope,
       MigrationInstruction eventSubscriptionInstruction,
-      CompensateEventSubscriptionEntity eventSubscription,
+      EventSubscriptionEntity eventSubscription,
       ScopeImpl eventSubscriptionSourceScope,
       ScopeImpl eventSubscriptionTargetScope) {
 
@@ -169,7 +169,7 @@ public MigratingEventScopeInstance addEventScopeInstance(
 
   public MigratingCompensationEventSubscriptionInstance addCompensationSubscriptionInstance(
       MigrationInstruction eventSubscriptionInstruction,
-      CompensateEventSubscriptionEntity eventSubscription,
+      EventSubscriptionEntity eventSubscription,
       ScopeImpl sourceScope,
       ScopeImpl targetScope) {
     MigratingCompensationEventSubscriptionInstance compensationInstance = new MigratingCompensationEventSubscriptionInstance(

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/MigrationCompensationInstanceVisitor.java
Patch:
@@ -13,8 +13,9 @@
 package org.camunda.bpm.engine.impl.migration.instance;
 
 import java.util.List;
+import org.camunda.bpm.engine.impl.event.EventType;
+import org.camunda.bpm.engine.impl.persistence.entity.EventSubscriptionEntity;
 
-import org.camunda.bpm.engine.impl.persistence.entity.CompensateEventSubscriptionEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
@@ -55,7 +56,7 @@ protected void instantiateScopes(
       compensationScopeExecution.setActive(false);
       compensationScopeExecution.enterActivityInstance();
 
-      CompensateEventSubscriptionEntity eventSubscription = CompensateEventSubscriptionEntity.createAndInsert(parentExecution, (ActivityImpl) scope);
+      EventSubscriptionEntity eventSubscription = EventSubscriptionEntity.createAndInsert(parentExecution, EventType.COMPENSATE, (ActivityImpl) scope);
       eventSubscription.setConfiguration(compensationScopeExecution.getId());
 
       executionBranch.visited(new MigratingEventScopeInstance(eventSubscription, compensationScopeExecution, scope));

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TableDataManager.java
Patch:
@@ -76,9 +76,6 @@ public class TableDataManager extends AbstractManager {
     persistentObjectToTableNameMap.put(IncidentEntity.class, "ACT_RU_INCIDENT");
 
     persistentObjectToTableNameMap.put(EventSubscriptionEntity.class, "ACT_RU_EVENT_SUBSCRIPTION");
-    persistentObjectToTableNameMap.put(CompensateEventSubscriptionEntity.class, "ACT_RU_EVENT_SUBSCRIPTION");
-    persistentObjectToTableNameMap.put(MessageEventSubscriptionEntity.class, "ACT_RU_EVENT_SUBSCRIPTION");
-    persistentObjectToTableNameMap.put(SignalEventSubscriptionEntity.class, "ACT_RU_EVENT_SUBSCRIPTION");
 
     persistentObjectToTableNameMap.put(FilterEntity.class, "ACT_RU_FILTER");
 

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/signal/SignalEventDeploymentTest.java
Patch:
@@ -14,6 +14,7 @@
 package org.camunda.bpm.engine.test.bpmn.event.signal;
 
 import java.util.List;
+import org.camunda.bpm.engine.impl.event.EventType;
 
 import org.camunda.bpm.engine.impl.history.HistoryLevel;
 import org.camunda.bpm.engine.impl.persistence.entity.EventSubscriptionEntity;
@@ -37,7 +38,7 @@ public void testCreateEventSubscriptionOnDeployment() {
     EventSubscription eventSubscription = runtimeService.createEventSubscriptionQuery().singleResult();
     assertNotNull(eventSubscription);
 
-    assertEquals("signal", eventSubscription.getEventType());
+    assertEquals(EventType.SIGNAL.name(), eventSubscription.getEventType());
     assertEquals("alert", eventSubscription.getEventName());
     assertEquals("start", eventSubscription.getActivityId());
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/batch/deletion/DeleteProcessInstancesJobHandler.java
Patch:
@@ -57,13 +57,16 @@ public void execute(BatchJobConfiguration configuration, ExecutionEntity executi
 
     DeleteProcessInstanceBatchConfiguration batchConfiguration = readConfiguration(configurationEntity.getBytes());
 
+    boolean initialLegacyRestrictions = commandContext.isRestrictUserOperationLogToAuthenticatedUsers();
     commandContext.disableUserOperationLog();
+    commandContext.setRestrictUserOperationLogToAuthenticatedUsers(true);
     try {
       commandContext.getProcessEngineConfiguration()
           .getRuntimeService()
           .deleteProcessInstances(batchConfiguration.getProcessInstanceIds(), batchConfiguration.deleteReason, true, true);
     } finally {
       commandContext.enableUserOperationLog();
+      commandContext.setRestrictUserOperationLogToAuthenticatedUsers(initialLegacyRestrictions);
     }
 
     commandContext.getByteArrayManager().delete(configurationEntity);

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/UserOperationLogManager.java
Patch:
@@ -302,8 +302,7 @@ protected String getAuthenticatedUserId() {
   }
 
   protected boolean writeUserOperationLogOnlyWithLoggedInUser() {
-    ProcessEngineConfigurationImpl configuration = Context.getProcessEngineConfiguration();
-    return configuration.isRestrictUserOperationLogToAuthenticatedUsers();
+    return Context.getCommandContext().isRestrictUserOperationLogToAuthenticatedUsers();
   }
 
   protected boolean isUserOperationLogEnabledOnCommandContext() {

File: engine/src/main/java/org/camunda/bpm/engine/ActivityTypes.java
Patch:
@@ -13,8 +13,9 @@
 package org.camunda.bpm.engine;
 
 /**
- * Represents the XML tags as used in the BPMN 2.0 process definition file.
- * Events, gateways and activities are summed together as activities by Camunda.
+ * Class contains constants that identifies the activity types, which are used by Camunda.
+ * Events, gateways and activities are summed together as activities.
+ * They typically correspond to the XML tags used in the BPMN 2.0 process definition file.
  *
  * @author Thorben Lindhauer
  * @author Christopher Zell <christopher.zell@camunda.com>

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/metrics/AbstractMetricsIntervalTest.java
Patch:
@@ -73,9 +73,8 @@ private static void generateMeterData(long dataCount, long interval) {
     metricsCount = metricNames.size();
     Random rand = new Random(new Date().getTime());
 
-    //current date as start date
-    long startDate = 0;//(long) Math.floor((double) (new DateTime().getMillis() / interval)) * interval;
-    //current date time floor to interval
+    //start date is the default interval since mariadb can't set 0 as timestamp
+    long startDate = DEFAULT_INTERVAL_MILLIS;
     firstInterval = new DateTime(startDate);
     //we will have 5 metric reports in an interval
     int dataPerInterval = 5;

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/MeterLogManager.java
Patch:
@@ -93,7 +93,7 @@ protected boolean isEndTimeAfterLastReportInterval(MetricsQueryImpl query) {
       .getReportingIntervalInSeconds();
 
     return (query.getEndDate() == null
-        || query.getEndDate() >= ClockUtil.getCurrentTime().getTime() - (1000 * reportingIntervalInSeconds));
+        || query.getEndDateMilliseconds()>= ClockUtil.getCurrentTime().getTime() - (1000 * reportingIntervalInSeconds));
   }
 
   protected boolean shouldAddCurrentUnloggedCount(MetricsQueryImpl query) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/validation/activity/SupportedPassiveEventTriggerActivityValidator.java
Patch:
@@ -19,7 +19,7 @@
 import org.camunda.bpm.engine.impl.bpmn.behavior.BoundaryEventActivityBehavior;
 import org.camunda.bpm.engine.impl.bpmn.behavior.EventSubProcessStartEventActivityBehavior;
 import org.camunda.bpm.engine.impl.bpmn.helper.BpmnProperties;
-import org.camunda.bpm.engine.impl.bpmn.parser.ActivityTypes;
+import org.camunda.bpm.engine.ActivityTypes;
 import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 
 /**

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/validation/instruction/SameEventScopeInstructionValidator.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.List;
 
 import org.camunda.bpm.engine.impl.bpmn.helper.BpmnProperties;
-import org.camunda.bpm.engine.impl.bpmn.parser.ActivityTypes;
+import org.camunda.bpm.engine.ActivityTypes;
 import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 import org.camunda.bpm.engine.impl.pvm.process.ScopeImpl;
 

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/ProcessInstanceRestService.java
Patch:
@@ -13,6 +13,7 @@
 package org.camunda.bpm.engine.rest;
 
 import org.camunda.bpm.engine.rest.dto.CountResultDto;
+import org.camunda.bpm.engine.rest.dto.batch.BatchDto;
 import org.camunda.bpm.engine.rest.dto.runtime.ProcessInstanceDto;
 import org.camunda.bpm.engine.rest.dto.runtime.ProcessInstanceQueryDto;
 import org.camunda.bpm.engine.rest.dto.runtime.ProcessInstanceSuspensionStateDto;
@@ -86,6 +87,6 @@ List<ProcessInstanceDto> queryProcessInstances(ProcessInstanceQueryDto query,
   @Path("/delete")
   @Consumes(MediaType.APPLICATION_JSON)
   @Produces(MediaType.APPLICATION_JSON)
-  Response deleteAsync(DeleteProcessInstancesDto dto);
+  BatchDto deleteAsync(DeleteProcessInstancesDto dto);
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/RuntimeService.java
Patch:
@@ -579,7 +579,7 @@ public interface RuntimeService {
    *          if the user has no {@link Permissions#DELETE} permission on {@link Resources#PROCESS_INSTANCE}
    *          or no {@link Permissions#DELETE_INSTANCE} permission on {@link Resources#PROCESS_DEFINITION}.
    */
-  void deleteProcessInstancesAsync (List<String> processInstanceIds, String deleteReason);
+  Batch deleteProcessInstancesAsync (List<String> processInstanceIds, String deleteReason);
 
   /**
    * Delete an existing runtime process instances asynchronously using Batch operation.
@@ -593,7 +593,7 @@ public interface RuntimeService {
    *          if the user has no {@link Permissions#DELETE} permission on {@link Resources#PROCESS_INSTANCE}
    *          or no {@link Permissions#DELETE_INSTANCE} permission on {@link Resources#PROCESS_DEFINITION}.
    */
-  void deleteProcessInstancesAsync (ProcessInstanceQuery processInstanceQuery, String deleteReason);
+  Batch deleteProcessInstancesAsync (ProcessInstanceQuery processInstanceQuery, String deleteReason);
 
   /**
    * Delete an existing runtime process instance.

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -838,6 +838,9 @@ protected void initService(Object service) {
     if (service instanceof ServiceImpl) {
       ((ServiceImpl)service).setCommandExecutor(commandExecutorTxRequired);
     }
+    if (service instanceof RepositoryServiceImpl) {
+      ((RepositoryServiceImpl) service).setDeploymentCharset(getDefaultCharset());
+    }
   }
 
   // DataSource ///////////////////////////////////////////////////////////////

File: qa/test-db-rolling-update/rolling-update-util/src/main/java/org/camunda/bpm/qa/rolling/update/TestFixture.java
Patch:
@@ -38,6 +38,7 @@
 public class TestFixture {
 
   public static final String DEFAULT_TAG = "7.5.0";
+  public static String currentFixtureTag;
 
   public TestFixture(ProcessEngine processEngine) {
   }
@@ -47,6 +48,7 @@ public static void main(String[] args) {
     if (args.length > 0) {
       tag = args[0];
     }
+    currentFixtureTag = tag;
 
     ProcessEngineConfigurationImpl processEngineConfiguration = (ProcessEngineConfigurationImpl) ProcessEngineConfiguration
       .createProcessEngineConfigurationFromResource("camunda.cfg.xml");

File: examples/invoice/src/main/java/org/camunda/bpm/example/invoice/service/NotifyCreditorService.java
Patch:
@@ -27,7 +27,7 @@ public class NotifyCreditorService implements JavaDelegate {
 
   public void execute(DelegateExecution execution) throws Exception {
 
-    LOGGER.info("\n\n  ... Now notfying creditor " + execution.getVariable("creditor") + "\n\n");
+    LOGGER.info("\n\n  ... Now notifying creditor " + execution.getVariable("creditor") + "\n\n");
 
   }
 

File: javaee/ejb-service/src/main/java/org/camunda/bpm/container/impl/ejb/JobExecutionHandlerMDB.java
Patch:
@@ -5,13 +5,13 @@
 import javax.ejb.TransactionAttributeType;
 
 import org.camunda.bpm.container.impl.threading.ra.inflow.JobExecutionHandler;
-import org.camunda.bpm.engine.impl.cmd.ExecuteJobsCmd;
 import org.camunda.bpm.engine.impl.interceptor.CommandExecutor;
+import org.camunda.bpm.engine.impl.jobexecutor.ExecuteJobHelper;
 
 
 /**
  * <p>MessageDrivenBean implementation of the {@link JobExecutionHandler} interface</p>
- * 
+ *
  * @author Daniel Meyer
  */
 @MessageDriven(
@@ -22,7 +22,7 @@
 public class JobExecutionHandlerMDB implements JobExecutionHandler {
 
   public void executeJob(String job, CommandExecutor commandExecutor) {
-    commandExecutor.execute(new ExecuteJobsCmd(job));
+    ExecuteJobHelper.executeJob(job, commandExecutor);
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/ManagementServiceImpl.java
Patch:
@@ -54,6 +54,8 @@
 import org.camunda.bpm.engine.impl.db.sql.DbSqlSessionFactory;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
+import org.camunda.bpm.engine.impl.jobexecutor.ExecuteJobHelper;
+import org.camunda.bpm.engine.impl.jobexecutor.JobFailureCollector;
 import org.camunda.bpm.engine.impl.management.UpdateJobDefinitionSuspensionStateBuilderImpl;
 import org.camunda.bpm.engine.impl.management.UpdateJobSuspensionStateBuilderImpl;
 import org.camunda.bpm.engine.impl.metrics.MetricsQueryImpl;
@@ -106,7 +108,7 @@ public TableMetaData getTableMetaData(String tableName) {
   }
 
   public void executeJob(String jobId) {
-    commandExecutor.execute(new ExecuteJobsCmd(jobId));
+    ExecuteJobHelper.executeJob(jobId, commandExecutor);
   }
 
   public void deleteJob(String jobId) {

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/JobExecutorCmdHappyTest.java
Patch:
@@ -18,11 +18,11 @@
 
 import org.camunda.bpm.engine.history.HistoricJobLog;
 import org.camunda.bpm.engine.impl.cmd.AcquireJobsCmd;
-import org.camunda.bpm.engine.impl.cmd.ExecuteJobsCmd;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.interceptor.CommandExecutor;
 import org.camunda.bpm.engine.impl.jobexecutor.AcquiredJobs;
+import org.camunda.bpm.engine.impl.jobexecutor.ExecuteJobHelper;
 import org.camunda.bpm.engine.impl.jobexecutor.JobExecutor;
 import org.camunda.bpm.engine.impl.persistence.entity.MessageEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.TimerEntity;
@@ -57,7 +57,7 @@ public String execute(CommandContext commandContext) {
     assertEquals(expectedJobIds, new ArrayList<String>(jobIds));
     assertEquals(0, tweetHandler.getMessages().size());
 
-    commandExecutor.execute(new ExecuteJobsCmd(jobId));
+    ExecuteJobHelper.executeJob(jobId, commandExecutor);
 
     assertEquals("i'm coding a test", tweetHandler.getMessages().get(0));
     assertEquals(1, tweetHandler.getMessages().size());
@@ -103,7 +103,7 @@ public String execute(CommandContext commandContext) {
 
     assertEquals(0, tweetHandler.getMessages().size());
 
-    commandExecutor.execute(new ExecuteJobsCmd(jobId));
+    ExecuteJobHelper.executeJob(jobId, commandExecutor);
 
     assertEquals("i'm coding a test", tweetHandler.getMessages().get(0));
     assertEquals(1, tweetHandler.getMessages().size());

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/FailedJobCommandTest.java
Patch:
@@ -39,18 +39,18 @@ public void testJobRetriesDecremented() {
   @Test
   public void testJobRetriesDecremented_multiple() {
 
-    for(int i = 0; i < 10; i++) {
+    for(int i = 0; i < 50; i++) {
       runtimeService.startProcessInstanceByKey("theProcess");
     }
 
-    Assert.assertEquals(10, managementService.createJobQuery().withRetriesLeft().count());
+    Assert.assertEquals(50, managementService.createJobQuery().withRetriesLeft().count());
 
     waitForJobExecutorToProcessAllJobs(6 * 60 * 1000);
 
     // now the retries = 0
 
     Assert.assertEquals(0, managementService.createJobQuery().withRetriesLeft().count());
-    Assert.assertEquals(11, managementService.createJobQuery().noRetriesLeft().count());
+    Assert.assertEquals(51, managementService.createJobQuery().noRetriesLeft().count());
 
   }
 

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/metrics/MetricsIntervalResultDto.java
Patch:
@@ -16,7 +16,7 @@
 package org.camunda.bpm.engine.rest.dto.metrics;
 
 import java.util.Date;
-import org.camunda.bpm.engine.management.Metric;
+import org.camunda.bpm.engine.management.MetricIntervalValue;
 
 /**
  *
@@ -32,7 +32,7 @@ public class MetricsIntervalResultDto {
 
   protected long value;
 
-  public MetricsIntervalResultDto(Metric metric) {
+  public MetricsIntervalResultDto(MetricIntervalValue metric) {
     this.timestamp = metric.getTimestamp();
     this.name = metric.getName();
     this.reporter = metric.getReporter();

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/MetricsRestServiceInteractionTest.java
Patch:
@@ -144,7 +144,6 @@ public void testGetIntervalWithOffset() {
     verifyNoMoreInteractions(meterQueryMock);
   }
 
-
   @Test
   public void testGetIntervalWithLimit() {
     given()

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -80,7 +80,6 @@
 import org.camunda.bpm.engine.management.ActivityStatistics;
 import org.camunda.bpm.engine.management.IncidentStatistics;
 import org.camunda.bpm.engine.management.JobDefinition;
-import org.camunda.bpm.engine.management.Metric;
 import org.camunda.bpm.engine.management.MetricsQuery;
 import org.camunda.bpm.engine.management.ProcessDefinitionStatistics;
 import org.camunda.bpm.engine.query.PeriodUnit;
@@ -117,6 +116,7 @@
 import org.camunda.bpm.engine.variable.value.ObjectValue;
 import org.camunda.bpm.engine.variable.value.StringValue;
 import org.camunda.bpm.engine.variable.value.TypedValue;
+import org.camunda.bpm.engine.management.MetricIntervalValue;
 
 /**
  * Provides mocks for the basic engine entities, such as
@@ -2536,8 +2536,8 @@ public static MetricsQuery createMockMeterQuery() {
 
   }
 
-  public static List<Metric> createMockMetricIntervalResult() {
-    List<Metric> metrics = new ArrayList<Metric>();
+  public static List<MetricIntervalValue> createMockMetricIntervalResult() {
+    List<MetricIntervalValue> metrics = new ArrayList<MetricIntervalValue>();
 
     MetricIntervalEntity entity1 = new MetricIntervalEntity(new Date(15 * 60 * 1000 * 1), EXAMPLE_METRICS_NAME, EXAMPLE_METRICS_REPORTER);
     entity1.setValue(21);

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/MeterLogEntity.java
Patch:
@@ -16,13 +16,12 @@
 import java.util.Date;
 
 import org.camunda.bpm.engine.impl.db.DbEntity;
-import org.camunda.bpm.engine.management.Metric;
 
 /**
  * @author Daniel Meyer
  *
  */
-public class MeterLogEntity implements Metric, DbEntity, Serializable {
+public class MeterLogEntity implements DbEntity, Serializable {
 
   private static final long serialVersionUID = 1L;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/MetricIntervalEntity.java
Patch:
@@ -18,13 +18,13 @@
 import java.io.Serializable;
 import java.util.Date;
 import org.camunda.bpm.engine.impl.db.DbEntity;
-import org.camunda.bpm.engine.management.Metric;
+import org.camunda.bpm.engine.management.MetricIntervalValue;
 
 /**
  *
  * @author Christopher Zell <christopher.zell@camunda.com>
  */
-public class MetricIntervalEntity implements Metric, DbEntity, Serializable {
+public class MetricIntervalEntity implements MetricIntervalValue, DbEntity, Serializable {
 
 
   protected Date timestamp;
@@ -86,7 +86,7 @@ public String getId() {
 
   @Override
   public void setId(String id) {
-    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
+    throw new UnsupportedOperationException("Not supported yet.");
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/management/MetricIntervalValue.java
Patch:
@@ -24,7 +24,7 @@
  * @author Christopher Zell <christopher.zell@camunda.com>
  * @since 7.6.0
  */
-public interface Metric {
+public interface MetricIntervalValue {
 
   /**
    * Returns the name of the metric.

File: engine/src/main/java/org/camunda/bpm/engine/management/MetricsQuery.java
Patch:
@@ -69,7 +69,7 @@ public interface MetricsQuery {
    *
    * @return the aggregated metrics
    */
-  List<Metric> interval();
+  List<MetricIntervalValue> interval();
 
 
 
@@ -84,7 +84,7 @@ public interface MetricsQuery {
    *                  The time unit is seconds.
    * @return the aggregated metrics
    */
-  List<Metric> interval(long interval);
+  List<MetricIntervalValue> interval(long interval);
 
   /**
    * @return the aggregated sum

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/transactions/TransactionIntegrationTest.java
Patch:
@@ -16,6 +16,7 @@
 package org.camunda.bpm.integrationtest.functional.transactions;
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
+import org.camunda.bpm.integrationtest.functional.transactions.beans.FailingDelegate;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.arquillian.junit.Arquillian;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/transactions/beans/FailingDelegate.java
Patch:
@@ -1,4 +1,4 @@
-package org.camunda.bpm.integrationtest.functional.transactions;
+package org.camunda.bpm.integrationtest.functional.transactions.beans;
 
 import javax.inject.Named;
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/transactions/beans/GetVersionInfoDelegate.java
Patch:
@@ -1,4 +1,4 @@
-package org.camunda.bpm.integrationtest.functional.transactions;
+package org.camunda.bpm.integrationtest.functional.transactions.beans;
 
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/transactions/beans/UpdateRouterConfiguration.java
Patch:
@@ -1,4 +1,4 @@
-package org.camunda.bpm.integrationtest.functional.transactions;
+package org.camunda.bpm.integrationtest.functional.transactions.beans;
 
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/FailedJobCommandTest.java
Patch:
@@ -39,18 +39,18 @@ public void testJobRetriesDecremented() {
   @Test
   public void testJobRetriesDecremented_multiple() {
 
-    for(int i = 0; i < 50; i++) {
+    for(int i = 0; i < 10; i++) {
       runtimeService.startProcessInstanceByKey("theProcess");
     }
 
-    Assert.assertEquals(50, managementService.createJobQuery().withRetriesLeft().count());
+    Assert.assertEquals(10, managementService.createJobQuery().withRetriesLeft().count());
 
     waitForJobExecutorToProcessAllJobs(6 * 60 * 1000);
 
     // now the retries = 0
 
     Assert.assertEquals(0, managementService.createJobQuery().withRetriesLeft().count());
-    Assert.assertEquals(51, managementService.createJobQuery().noRetriesLeft().count());
+    Assert.assertEquals(11, managementService.createJobQuery().noRetriesLeft().count());
 
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -175,7 +175,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     databaseSpecificFromTimestamp1.put(POSTGRES, "TO_TIMESTAMP(");
     databaseSpecificFromTimestamp2.put(POSTGRES, ") AT TIME ZONE 'UTC'");
     databaseSpecificToTimestamp1.put(POSTGRES, "EXTRACT(epoch FROM ");
-    databaseSpecificToTimestamp2.put(POSTGRES, ")");
+    databaseSpecificToTimestamp2.put(POSTGRES, " at time zone 'UTC')");
     databaseSpecificDummyTable.put(POSTGRES, "");
     databaseSpecificTrueConstant.put(POSTGRES, "true");
     databaseSpecificFalseConstant.put(POSTGRES, "false");

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/metrics/MetricsIntervalTest.java
Patch:
@@ -57,6 +57,7 @@ public class MetricsIntervalTest {
   protected static RuntimeService runtimeService;
   protected static ProcessEngineConfigurationImpl processEngineConfiguration;
   protected static ManagementService managementService;
+  protected static String lastReporterId;
 
   private static void generateMeterData(long dataCount, long intervall, long dataPerIntervall) {
     TEST_RULE.deploy(Bpmn.createExecutableProcess("testProcess")
@@ -82,13 +83,15 @@ public static void initMetrics() {
     processEngineConfiguration = ENGINE_RULE.getProcessEngineConfiguration();
     managementService = ENGINE_RULE.getManagementService();
     processEngineConfiguration.setDbMetricsReporterActivate(true);
+    lastReporterId = processEngineConfiguration.getDbMetricsReporter().getMetricsCollectionTask().getReporter();
     processEngineConfiguration.getDbMetricsReporter().setReporterId(REPORTER_ID);
     generateMeterData(3, 15 * 60 * 1000, 5);
   }
 
   @AfterClass
   public static void cleanUp() {
     processEngineConfiguration.setDbMetricsReporterActivate(false);
+    processEngineConfiguration.getDbMetricsReporter().setReporterId(lastReporterId);
     managementService.deleteMetrics(null);
   }
 

File: webapps/src/test/java/org/camunda/bpm/cockpit/plugin/base/ProcessInstanceRestServiceTest.java
Patch:
@@ -34,6 +34,7 @@
 import org.camunda.bpm.cockpit.impl.plugin.resources.ProcessInstanceRestService;
 import org.camunda.bpm.cockpit.plugin.test.AbstractCockpitPluginTest;
 import org.camunda.bpm.engine.ProcessEngine;
+import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.RepositoryService;
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.impl.calendar.DateTimeUtil;
@@ -43,6 +44,7 @@
 import org.camunda.bpm.engine.rest.dto.VariableQueryParameterDto;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.test.Deployment;
+import org.camunda.bpm.engine.test.RequiredHistoryLevel;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Ignore;
@@ -53,6 +55,7 @@
  * @author roman.smirnov
  * @author nico.rehwaldt
  */
+@RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_AUDIT)
 public class ProcessInstanceRestServiceTest extends AbstractCockpitPluginTest {
 
   private ProcessEngine processEngine;

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/CallableElementActivityBehavior.java
Patch:
@@ -129,7 +129,7 @@ protected void invoke() throws Exception {
   @Override
   public void passOutputVariables(final ActivityExecution execution, final VariableScope subInstance) {
     // only data. no control flow available on this execution.
-    Map<String, Object> variables = filterMIScopeVariables(getOutputVariables(subInstance));
+    VariableMap variables = filterMIScopeVariables(getOutputVariables(subInstance));
     VariableMap localVariables = getOutputVariablesLocal(subInstance);
 
     execution.setVariables(variables);
@@ -154,7 +154,7 @@ protected void invokeVarMappingDelegation(DelegateInvocation delegation) {
     }
   }
 
-  protected Map<String, Object> filterMIScopeVariables(VariableMap variables) {
+  protected VariableMap filterMIScopeVariables(VariableMap variables) {
     if (variables != null) {
       for (String key : variablesFilter) {
         variables.remove(key);

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -215,6 +215,7 @@ public class DbSqlSessionFactory implements SessionFactory {
 
     addDatabaseSpecificStatement(ORACLE, "selectHistoricProcessInstanceDurationReport", "selectHistoricProcessInstanceDurationReport_oracle");
     addDatabaseSpecificStatement(ORACLE, "selectHistoricTaskInstanceDurationReport", "selectHistoricTaskInstanceDurationReport_oracle");
+    addDatabaseSpecificStatement(ORACLE, "selectHistoricTaskInstanceCountByTaskNameReport", "selectHistoricTaskInstanceCountByTaskNameReport_oracle");
     addDatabaseSpecificStatement(ORACLE, "selectFilterByQueryCriteria", "selectFilterByQueryCriteria_oracleDb2");
 
     constants = new HashMap<String, String>();

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -951,6 +951,7 @@ public static List<HistoricTaskInstanceReportResult> createMockHistoricTaskInsta
     when(mock.getProcessDefinitionId()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_PROC_DEF_ID);
     when(mock.getProcessDefinitionKey()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_PROC_DEFINITION);
     when(mock.getProcessDefinitionName()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_PROC_DEF_NAME);
+    when(mock.getTenantId()).thenReturn(EXAMPLE_TENANT_ID);
     when(mock.getTaskName()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_TASK_NAME);
 
     return Collections.singletonList(mock);
@@ -962,6 +963,7 @@ public static List<HistoricTaskInstanceReportResult> createMockHistoricTaskInsta
     when(mock.getProcessDefinitionId()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_PROC_DEF_ID);
     when(mock.getProcessDefinitionKey()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_PROC_DEFINITION);
     when(mock.getProcessDefinitionName()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_PROC_DEF_NAME);
+    when(mock.getTenantId()).thenReturn(EXAMPLE_TENANT_ID);
     when(mock.getTaskName()).thenReturn(null);
 
     return Collections.singletonList(mock);

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricTaskReportTest.java
Patch:
@@ -35,7 +35,6 @@
 import java.util.List;
 
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -1343,6 +1343,9 @@ public void restoreProcessInstance(Collection<ExecutionEntity> executions,
       String parentId = execution.getParentId();
       ExecutionEntity parent = executionsMap.get(parentId);
       if (!execution.isProcessInstanceExecution()) {
+        if (parent == null) {
+          throw LOG.resolveParentOfExecutionFailedException(parentId, execution.getId());
+        }
         execution.processInstance = this;
         execution.parent = parent;
         if (parent.executions == null) {

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/transactions/FailingDelegate.java
Patch:
@@ -1,4 +1,4 @@
-package org.camunda.bpm.integrationtest.functional.transactions.beans;
+package org.camunda.bpm.integrationtest.functional.transactions;
 
 import javax.inject.Named;
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/transactions/GetVersionInfoDelegate.java
Patch:
@@ -1,4 +1,4 @@
-package org.camunda.bpm.integrationtest.functional.transactions.beans;
+package org.camunda.bpm.integrationtest.functional.transactions;
 
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/transactions/TransactionIntegrationTest.java
Patch:
@@ -16,7 +16,6 @@
 package org.camunda.bpm.integrationtest.functional.transactions;
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
-import org.camunda.bpm.integrationtest.functional.transactions.beans.FailingDelegate;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.arquillian.junit.Arquillian;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/transactions/UpdateRouterConfiguration.java
Patch:
@@ -1,4 +1,4 @@
-package org.camunda.bpm.integrationtest.functional.transactions.beans;
+package org.camunda.bpm.integrationtest.functional.transactions;
 
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -943,7 +943,6 @@ public static List<TaskCountByCandidateGroupResult> createMockTaskCountByCandida
   public static List<HistoricTaskInstanceReportResult> createMockHistoricTaskInstanceReport() {
     HistoricTaskInstanceReportResult mock = mock(HistoricTaskInstanceReportResult.class);
     when(mock.getCount()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_COUNT);
-    when(mock.getTaskDefinitionKey()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_DEFINITION);
     when(mock.getProcessDefinitionId()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_PROC_DEF_ID);
     when(mock.getProcessDefinitionKey()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_PROC_DEFINITION);
     when(mock.getProcessDefinitionName()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_PROC_DEF_NAME);
@@ -955,7 +954,6 @@ public static List<HistoricTaskInstanceReportResult> createMockHistoricTaskInsta
   public static List<HistoricTaskInstanceReportResult> createMockHistoricTaskInstanceReportWithProcDef() {
     HistoricTaskInstanceReportResult mock = mock(HistoricTaskInstanceReportResult.class);
     when(mock.getCount()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_COUNT);
-    when(mock.getTaskDefinitionKey()).thenReturn(null);
     when(mock.getProcessDefinitionId()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_PROC_DEF_ID);
     when(mock.getProcessDefinitionKey()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_PROC_DEFINITION);
     when(mock.getProcessDefinitionName()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_PROC_DEF_NAME);

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricTaskReportTest.java
Patch:
@@ -94,13 +94,13 @@ public void testHistoricTaskInstanceReportQuery() {
       .countByTaskName();
 
     // then
-    assertEquals(3, historicTaskInstanceReportResults.size());
+    assertEquals(2, historicTaskInstanceReportResults.size());
     assertEquals(2, historicTaskInstanceReportResults.get(0).getCount(), 0);
     assertEquals(ANOTHER_PROCESS_DEFINITION_KEY, historicTaskInstanceReportResults.get(0).getProcessDefinitionKey());
     assertEquals("name_" + ANOTHER_PROCESS_DEFINITION_KEY, historicTaskInstanceReportResults.get(0).getProcessDefinitionName());
     assertEquals(ANOTHER_PROCESS_DEFINITION_KEY + " Task 1", historicTaskInstanceReportResults.get(0).getTaskName());
 
-    assertTrue(historicTaskInstanceReportResults.get(2).getProcessDefinitionId().contains(":2:"));
+    assertTrue(historicTaskInstanceReportResults.get(1).getProcessDefinitionId().contains(":2:"));
   }
 
   @Test
@@ -124,7 +124,6 @@ public void testHistoricTaskInstanceReportGroupedByProcessDefinitionKey() {
     assertTrue(historicTaskInstanceReportResults.get(0).getProcessDefinitionId().contains(":1:"));
     assertEquals("name_" + ANOTHER_PROCESS_DEFINITION_KEY, historicTaskInstanceReportResults.get(0).getProcessDefinitionName());
 
-    assertNull(historicTaskInstanceReportResults.get(0).getTaskDefinitionKey());
     assertEquals(ANOTHER_PROCESS_DEFINITION_KEY, historicTaskInstanceReportResults.get(0).getProcessDefinitionKey());
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -71,10 +71,9 @@ protected void initActivityInstanceEvent(HistoricActivityInstanceEventEntity evt
     String parentActivityInstanceId = null;
     ExecutionEntity parentExecution = execution.getParent();
 
-    if (parentExecution != null && CompensationBehavior.isCompensationThrowing(parentExecution)) {
+    if (parentExecution != null && CompensationBehavior.isCompensationThrowing(parentExecution) && execution.getActivity() != null) {
       parentActivityInstanceId = CompensationBehavior.getParentActivityInstanceId(execution);
-    }
-    else {
+    } else {
       parentActivityInstanceId = execution.getParentActivityInstanceId();
     }
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/transactions/TransactionIntegrationTest.java
Patch:
@@ -16,6 +16,7 @@
 package org.camunda.bpm.integrationtest.functional.transactions;
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
+import org.camunda.bpm.integrationtest.functional.transactions.beans.FailingDelegate;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.arquillian.junit.Arquillian;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/transactions/beans/FailingDelegate.java
Patch:
@@ -1,4 +1,4 @@
-package org.camunda.bpm.integrationtest.functional.transactions;
+package org.camunda.bpm.integrationtest.functional.transactions.beans;
 
 import javax.inject.Named;
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/transactions/beans/GetVersionInfoDelegate.java
Patch:
@@ -1,4 +1,4 @@
-package org.camunda.bpm.integrationtest.functional.transactions;
+package org.camunda.bpm.integrationtest.functional.transactions.beans;
 
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/transactions/beans/UpdateRouterConfiguration.java
Patch:
@@ -1,4 +1,4 @@
-package org.camunda.bpm.integrationtest.functional.transactions;
+package org.camunda.bpm.integrationtest.functional.transactions.beans;
 
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -943,7 +943,7 @@ public static List<TaskCountByCandidateGroupResult> createMockTaskCountByCandida
   public static List<HistoricTaskInstanceReportResult> createMockHistoricTaskInstanceReport() {
     HistoricTaskInstanceReportResult mock = mock(HistoricTaskInstanceReportResult.class);
     when(mock.getCount()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_COUNT);
-    when(mock.getDefinitionKey()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_DEFINITION);
+    when(mock.getTaskDefinitionKey()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_DEFINITION);
     when(mock.getProcessDefinitionId()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_PROC_DEF_ID);
     when(mock.getProcessDefinitionKey()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_PROC_DEFINITION);
     when(mock.getProcessDefinitionName()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_PROC_DEF_NAME);
@@ -955,9 +955,9 @@ public static List<HistoricTaskInstanceReportResult> createMockHistoricTaskInsta
   public static List<HistoricTaskInstanceReportResult> createMockHistoricTaskInstanceReportWithProcDef() {
     HistoricTaskInstanceReportResult mock = mock(HistoricTaskInstanceReportResult.class);
     when(mock.getCount()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_COUNT);
-    when(mock.getDefinitionKey()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_PROC_DEFINITION);
+    when(mock.getTaskDefinitionKey()).thenReturn(null);
     when(mock.getProcessDefinitionId()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_PROC_DEF_ID);
-    when(mock.getProcessDefinitionKey()).thenReturn(null);
+    when(mock.getProcessDefinitionKey()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_PROC_DEFINITION);
     when(mock.getProcessDefinitionName()).thenReturn(EXAMPLE_HISTORIC_TASK_REPORT_PROC_DEF_NAME);
     when(mock.getTaskName()).thenReturn(null);
 

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricTaskReportTest.java
Patch:
@@ -124,7 +124,8 @@ public void testHistoricTaskInstanceReportGroupedByProcessDefinitionKey() {
     assertTrue(historicTaskInstanceReportResults.get(0).getProcessDefinitionId().contains(":1:"));
     assertEquals("name_" + ANOTHER_PROCESS_DEFINITION_KEY, historicTaskInstanceReportResults.get(0).getProcessDefinitionName());
 
-    assertNull(historicTaskInstanceReportResults.get(0).getProcessDefinitionKey());
+    assertNull(historicTaskInstanceReportResults.get(0).getTaskDefinitionKey());
+    assertEquals(ANOTHER_PROCESS_DEFINITION_KEY, historicTaskInstanceReportResults.get(0).getProcessDefinitionKey());
   }
 
   @Test

File: qa/test-db-instance-migration/test-fixture-75/src/main/java/org/camunda/bpm/qa/upgrade/TestFixture.java
Patch:
@@ -16,7 +16,7 @@
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
-import org.camunda.bpm.qa.upgrade.rolling.scenarios.StartProcessInstance;
+import org.camunda.bpm.qa.upgrade.scenarios.rolling.StartProcessInstance;
 import org.camunda.bpm.qa.upgrade.scenarios.deployment.DeployProcessWithoutIsExecutableAttributeScenario;
 
 /**

File: qa/test-db-instance-migration/test-fixture-75/src/main/java/org/camunda/bpm/qa/upgrade/scenarios/rolling/StartProcessInstance.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.qa.upgrade.rolling.scenarios;
+package org.camunda.bpm.qa.upgrade.scenarios.rolling;
 
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.test.Deployment;

File: engine/src/main/java/org/camunda/bpm/engine/RepositoryService.java
Patch:
@@ -139,7 +139,7 @@ public interface RepositoryService {
    * Cascades the deletion if the cascade is set to true.
    * Same behavior as {@link RepositoryService#deleteProcessDefinition(java.lang.String, boolean, boolean)}
    * The skipCustomListeners parameter is per default false. The custom listeners are called
-   * if the cascading flag is set to false and the process instances are deleted.
+   * if the cascading flag is set to true and the process instances are deleted.
    *
    * @param processDefinitionId the id, which corresponds to the process definition
    * @param cascade if set to true, all process instances (including) history are deleted

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/SequentialJobAcquisitionRunnable.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class SequentialJobAcquisitionRunnable extends AcquireJobsRunnable {
 
-  private final JobExecutorLogger LOG = ProcessEngineLogger.JOB_EXECUTOR_LOGGER;
+  protected final JobExecutorLogger LOG = ProcessEngineLogger.JOB_EXECUTOR_LOGGER;
 
   protected JobAcquisitionContext acquisitionContext;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TimerEntity.java
Patch:
@@ -58,8 +58,10 @@ protected TimerEntity(TimerEntity te) {
     deploymentId = te.deploymentId;
     processDefinitionId = te.processDefinitionId;
     processDefinitionKey = te.processDefinitionKey;
+    tenantId = te.tenantId;
   }
 
+  @Override
   protected void preExecute(CommandContext commandContext) {
     if (getJobHandler() instanceof TimerEventJobHandler) {
       TimerJobConfiguration configuration = (TimerJobConfiguration) getJobHandlerConfiguration();
@@ -118,6 +120,7 @@ public void setRepeat(String repeat) {
     this.repeat = repeat;
   }
 
+  @Override
   public String getType() {
     return TYPE;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/execution/CmmnExecution.java
Patch:
@@ -578,7 +578,7 @@ protected void collectCaseExecutionsInExecutionTree(List<CmmnExecution> children
   }
   
   protected void checkAndFireExitCriteria(List<String> satisfiedSentries) {
-    if (!isCompleted() && !isTerminated()) {
+    if (isActive()) {
       CmmnActivity activity = getActivity();
       ensureNotNull(PvmException.class, "Case execution '"+getId()+"': has no current activity.", "activity", activity);
 

File: engine/src/test/java/org/camunda/bpm/engine/test/cmmn/sentry/SentryVariableOnPartExitCriteriaTest.java
Patch:
@@ -115,14 +115,12 @@ public void testExitMultipleTasksOfDifferentScopes() {
 
     CaseExecution stageExecution1 = queryCaseExecutionByActivityId("Stage_1");
 
-    CaseExecution stageExecution2;
-
     caseService.setVariable(stageExecution1.getId(), "value", 101);
 
     stageExecution1 = queryCaseExecutionByActivityId("Stage_1");
     assertNull(stageExecution1);
 
-    stageExecution2 = queryCaseExecutionByActivityId("Stage_2");
+    CaseExecution stageExecution2 = queryCaseExecutionByActivityId("Stage_2");
     assertNull(stageExecution2);
     
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricCaseActivityInstanceTest.java
Patch:
@@ -166,6 +166,7 @@ public void testHistoricCaseActivityTaskStates() {
     assertHistoricState(humanTaskId3, ACTIVE);
     assertStateQuery(COMPLETED, ENABLED, ACTIVE);
 
+    manualStart(taskInstanceId2);
     // when human task 3 is terminated
     terminate(taskInstanceId3);
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/CdiBeanCaseTaskResolutionTest.java
Patch:
@@ -70,11 +70,9 @@ public void testResolveBeanInCmmnCase() {
 
     CaseExecution caseTaskInstance = caseService.createCaseExecutionQuery().activityId("PI_CaseTask_1")
         .singleResult();
-    caseService.withCaseExecution(caseTaskInstance.getId()).manualStart();
 
     CaseExecution calledCaseHumanTaskInstance = caseService.createCaseExecutionQuery().activityId("PI_HumanTask_1")
         .singleResult();
-    caseService.withCaseExecution(calledCaseHumanTaskInstance.getId()).manualStart();
 
     Task calledCaseTask = taskService.createTaskQuery().singleResult();
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/behavior/StageOrTaskActivityBehavior.java
Patch:
@@ -224,7 +224,7 @@ protected boolean evaluateManualActivationRule(CmmnActivityExecution execution)
       return rule.evaluate(execution);
     }
 
-    return true;
+    return false;
   }
 
   // helper ///////////////////////////////////////////////////////////

File: engine/src/test/java/org/camunda/bpm/engine/test/api/form/FormServiceTest.java
Patch:
@@ -514,9 +514,6 @@ public void testSubmitTaskFormForStandaloneTask() {
   public void testSubmitTaskFormForCmmnHumanTask() {
     caseService.createCaseInstanceByKey("oneTaskCase");
 
-    CaseExecution caseExecution = caseService.createCaseExecutionQuery().enabled().singleResult();
-    caseService.withCaseExecution(caseExecution.getId()).manualStart();
-
     Task task = taskService.createTaskQuery().singleResult();
 
     String stringValue = "some string";

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/metrics/ActivityInstanceCountMetricsTest.java
Patch:
@@ -105,7 +105,7 @@ public void testCmmnActivitiyInstances() {
 
     caseService.createCaseInstanceByKey("case");
 
-    assertEquals(0l, managementService.createMetricsQuery()
+    assertEquals(1l, managementService.createMetricsQuery()
         .name(Metrics.ACTIVTY_INSTANCE_START)
         .sum());
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/multitenancy/MultiTenancyExecutionPropagationTest.java
Patch:
@@ -439,7 +439,7 @@ public void testPropagateTenantIdToVariableInstanceFromHumanTask() {
 
     VariableMap variables = Variables.createVariables().putValue("var", "test");
     CaseExecution caseExecution = caseService.createCaseExecutionQuery().activityId("PI_HumanTask_1").singleResult();
-    caseService.manuallyStartCaseExecution(caseExecution.getId(), variables);
+    caseService.setVariables(caseExecution.getId(), variables);
 
     VariableInstance variableInstance = runtimeService.createVariableInstanceQuery().singleResult();
     assertThat(variableInstance, is(notNullValue()));

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/CaseExecutionQueryTest.java
Patch:
@@ -337,7 +337,7 @@ public void testQueryByEnabled() {
 
     query.enabled();
 
-    verifyQueryResults(query, 6);
+    verifyQueryResults(query, 2);
 
   }
 
@@ -346,7 +346,7 @@ public void testQueryByActive() {
 
     query.active();
 
-    verifyQueryResults(query, 5);
+    verifyQueryResults(query, 9);
 
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/cmmn/listener/VariableListenerTest.java
Patch:
@@ -403,8 +403,6 @@ public void testListenerOnAncestorScope() {
         caseService.createCaseExecutionQuery().activityId("PI_Stage_1").singleResult();
     assertNotNull(stageExecution);
 
-    caseService.withCaseExecution(stageExecution.getId()).manualStart();
-
     CaseExecution taskExecution =
         caseService.createCaseExecutionQuery().activityId("PI_HumanTask_1").singleResult();
     assertNotNull(taskExecution);

File: engine/src/test/java/org/camunda/bpm/engine/test/cmmn/operation/CaseExecutionReactivateTest.java
Patch:
@@ -15,6 +15,7 @@
 import org.camunda.bpm.engine.impl.cmmn.behavior.StageActivityBehavior;
 import org.camunda.bpm.engine.impl.cmmn.execution.CmmnActivityExecution;
 import org.camunda.bpm.engine.impl.cmmn.execution.CmmnCaseInstance;
+import org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler;
 import org.camunda.bpm.engine.impl.cmmn.model.CaseDefinitionBuilder;
 import org.camunda.bpm.engine.impl.cmmn.model.CmmnCaseDefinition;
 import org.camunda.bpm.engine.impl.test.PvmTestCase;
@@ -37,9 +38,11 @@ public void testReactivateCaseInstance() {
         .behavior(new StageActivityBehavior())
         .createActivity("A")
           .behavior(new TaskWaitState())
+          .property(ItemHandler.PROPERTY_MANUAL_ACTIVATION_RULE, defaultManualActivation())
         .endActivity()
         .createActivity("B")
           .behavior(new TaskWaitState())
+          .property(ItemHandler.PROPERTY_MANUAL_ACTIVATION_RULE, defaultManualActivation())
         .endActivity()
       .endActivity()
       .buildCaseDefinition();
@@ -51,8 +54,6 @@ public void testReactivateCaseInstance() {
     // a case execution associated with Stage X
     CmmnActivityExecution stageX = caseInstance.findCaseExecution("X");
 
-    stageX.manualStart();
-
     // a case execution associated with Task A
     CmmnActivityExecution taskA = caseInstance.findCaseExecution("A");
 

File: engine/src/test/java/org/camunda/bpm/engine/test/cmmn/operation/CaseInstanceCloseTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.camunda.bpm.engine.impl.cmmn.behavior.StageActivityBehavior;
 import org.camunda.bpm.engine.impl.cmmn.execution.CmmnActivityExecution;
 import org.camunda.bpm.engine.impl.cmmn.execution.CmmnCaseInstance;
+import org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler;
 import org.camunda.bpm.engine.impl.cmmn.model.CaseDefinitionBuilder;
 import org.camunda.bpm.engine.impl.cmmn.model.CmmnCaseDefinition;
 import org.camunda.bpm.engine.impl.test.PvmTestCase;
@@ -54,6 +55,7 @@ public void testCloseCompletedCaseInstance() {
       .listener("close", stateTransitionCollector)
       .createActivity("A")
         .behavior(new TaskWaitState())
+        .property(ItemHandler.PROPERTY_MANUAL_ACTIVATION_RULE, defaultManualActivation())
       .endActivity()
       .buildCaseDefinition();
 

File: engine/src/test/java/org/camunda/bpm/engine/test/cmmn/sentry/SentryCombinedEntryAndExitCriteriaTest.java
Patch:
@@ -238,15 +238,14 @@ public void testFireFirstExitCriteria() {
     CaseExecution firstHumanTask = queryCaseExecutionByActivityId("PI_HumanTask_1");
     String firstHumanTaskId = firstHumanTask.getId();
 
-    assertTrue(firstHumanTask.isEnabled());
+    assertTrue(firstHumanTask.isActive());
 
     CaseExecution secondHumanTask = queryCaseExecutionByActivityId("PI_HumanTask_2");
     String secondHumanTaskId = secondHumanTask.getId();
 
     assertTrue(secondHumanTask.isAvailable());
 
     // when
-    manualStart(firstHumanTaskId);
     complete(firstHumanTaskId);
 
     // then

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricActivityInstanceTest.java
Patch:
@@ -968,7 +968,6 @@ public void testCaseCallActivity() {
         .singleResult()
         .getId();
 
-    caseService.manuallyStartCaseExecution(humanTaskId);
     caseService.completeCaseExecution(humanTaskId);
 
     historicCallActivity = historyService

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricVariableInstanceTest.java
Patch:
@@ -1404,7 +1404,6 @@ public void testCaseDefinitionProperty() {
         .activityId("PI_HumanTask_1")
         .singleResult()
         .getId();
-    caseService.manuallyStartCaseExecution(humanTask);
     String taskId = taskService.createTaskQuery().singleResult().getId();
 
     caseService.setVariable(caseInstanceId, "aVariable", "aValue");

File: engine/src/test/java/org/camunda/bpm/engine/test/history/useroperationlog/UserOperationLogDeletionTest.java
Patch:
@@ -79,7 +79,6 @@ public void testDeleteCaseTaskKeepUserOperationLog() {
         .activityId("PI_HumanTask_1")
         .singleResult()
         .getId();
-    caseService.manuallyStartCaseExecution(caseExecutionId);
 
     String taskId = taskService.createTaskQuery().singleResult().getId();
     taskService.setAssignee(taskId, "demo");
@@ -133,7 +132,6 @@ public void testDeleteCaseInstanceKeepUserOperationLog() {
         .activityId("PI_HumanTask_1")
         .singleResult()
         .getId();
-    caseService.manuallyStartCaseExecution(caseExecutionId);
 
     String taskId = taskService.createTaskQuery().singleResult().getId();
     taskService.complete(taskId);

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/history/FullHistoryTest.java
Patch:
@@ -1620,7 +1620,6 @@ public void testHistoricVariableUpdateCaseDefinitionProperty() {
         .activityId("PI_HumanTask_1")
         .singleResult()
         .getId();
-    caseService.manuallyStartCaseExecution(humanTask);
     String taskId = taskService.createTaskQuery().singleResult().getId();
 
     caseService.setVariable(caseInstanceId, "aVariable", "aValue");

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/ProcessDefinitionResource.java
Patch:
@@ -46,8 +46,7 @@ public interface ProcessDefinitionResource {
   Response getProcessDefinitionDiagram();
 
   @DELETE
-  Response deleteProcessDefinition(@PathParam("id") String processDefinitionId,
-                                   @QueryParam("cascade") boolean cascade,
+  Response deleteProcessDefinition(@QueryParam("cascade") boolean cascade,
                                    @QueryParam("skipCustomListeners") boolean skipCustomListeners);
 
   @POST

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/auth/AuthorizationCommandChecker.java
Patch:
@@ -111,7 +111,7 @@ public void checkDeleteProcessDefinitionById(String processDefinitionId) {
     if (getAuthorizationManager().isAuthorizationEnabled()) {
       ProcessDefinitionEntity processDefinition = findLatestProcessDefinitionById(processDefinitionId);
       if (processDefinition != null) {
-        checkDeleteProcessDefinitionById(processDefinition.getKey());
+        checkDeleteProcessDefinitionByKey(processDefinition.getKey());
       }
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeleteProcessDefinitionCmd.java
Patch:
@@ -16,11 +16,12 @@
 package org.camunda.bpm.engine.impl.cmd;
 
 import java.io.Serializable;
+import org.camunda.bpm.engine.exception.NotFoundException;
 import org.camunda.bpm.engine.impl.cfg.CommandChecker;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
-import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
+import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
 
 /**
  * Command to delete a process definition form a deployment.
@@ -45,7 +46,7 @@ public Void execute(CommandContext commandContext) {
 
     ProcessDefinition processDefinition = commandContext.getProcessDefinitionManager()
                                                 .findLatestProcessDefinitionById(processDefinitionId);
-    ensureNotNull("No process definition found with id '" + processDefinitionId + "'", "processDefinition", processDefinition);
+    ensureNotNull(NotFoundException.class, "No process definition found with id '" + processDefinitionId + "'", "processDefinition", processDefinition);
 
     for(CommandChecker checker : commandContext.getProcessEngineConfiguration().getCommandCheckers()) {
       checker.checkDeleteProcessDefinitionById(processDefinitionId);

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/history/HistoricTaskInstanceReportDurationQueryDto.java
Patch:
@@ -34,7 +34,6 @@ public HistoricTaskInstanceReportDurationQueryDto() {}
 
   public HistoricTaskInstanceReportDurationQueryDto(ObjectMapper objectMapper, MultivaluedMap<String, String> queryParameters) {
     super(objectMapper, queryParameters);
-    this.reportType = REPORT_TYPE_DURATION;
   }
 
   public Date getCompletedBefore() {

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/history/HistoricTaskInstanceReportDurationQueryDto.java
Patch:
@@ -30,11 +30,11 @@ public class HistoricTaskInstanceReportDurationQueryDto extends AbstractReportDt
   protected Date completedBefore;
   protected Date completedAfter;
 
-
   public HistoricTaskInstanceReportDurationQueryDto() {}
 
   public HistoricTaskInstanceReportDurationQueryDto(ObjectMapper objectMapper, MultivaluedMap<String, String> queryParameters) {
     super(objectMapper, queryParameters);
+    this.reportType = REPORT_TYPE_DURATION;
   }
 
   public Date getCompletedBefore() {

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/history/HistoricTaskInstanceReportQueryDto.java
Patch:
@@ -29,6 +29,8 @@
  */
 public class HistoricTaskInstanceReportQueryDto extends AbstractSearchQueryDto {
 
+  public static final String PROCESS_DEFINITION = "processDefinition";
+
   protected Date completedBefore;
   protected Date completedAfter;
   protected String groupby;
@@ -84,7 +86,7 @@ public List<HistoricTaskInstanceReportResult> executeReport(ProcessEngine engine
     HistoricTaskInstanceReport reportQuery = createNewReportQuery(engine);
     applyFilters(reportQuery);
 
-    if("processDefinition".equals(groupby)) {
+    if(PROCESS_DEFINITION.equals(groupby)) {
       return reportQuery.countByProcessDefinitionKey();
     } else {
       return reportQuery.countByTaskDefinitionKey();

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/behavior/StageActivityBehavior.java
Patch:
@@ -130,7 +130,7 @@ protected boolean canComplete(CmmnActivityExecution execution, boolean throwExce
       return true;
     }
 
-    // verify there are no ACTIVE children
+    // verify there are no STATE_ACTIVE children
     for (CmmnExecution child : children) {
       if (child.isActive()) {
 
@@ -143,7 +143,7 @@ protected boolean canComplete(CmmnActivityExecution execution, boolean throwExce
     }
 
     if (autoComplete) {
-      // ensure that all required children are DISABLED, COMPLETED and/or TERMINATED
+      // ensure that all required children are DISABLED, STATE_COMPLETED and/or TERMINATED
       // available in the case execution tree.
 
       for (CmmnExecution child : children) {
@@ -158,7 +158,7 @@ protected boolean canComplete(CmmnActivityExecution execution, boolean throwExce
       }
 
     } else { /* autoComplete == false && manualCompletion == false */
-      // ensure that ALL children are DISABLED, COMPLETED and/or TERMINATED
+      // ensure that ALL children are DISABLED, STATE_COMPLETED and/or TERMINATED
 
       for (CmmnExecution child : children) {
         if (!child.isDisabled() && !child.isCompleted() && !child.isTerminated()) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/parser/HistoryParseListener.java
Patch:
@@ -56,7 +56,6 @@ public class HistoryParseListener implements BpmnParseListener {
   // configurations wired
   protected ExecutionListener PROCESS_INSTANCE_START_LISTENER;
   protected ExecutionListener PROCESS_INSTANCE_END_LISTENER;
-  protected ExecutionListener PROCESS_INSTANCE_UPDATE_LISTENER;
 
   protected ExecutionListener ACTIVITY_INSTANCE_START_LISTENER;
   protected ExecutionListener ACTIVITY_INSTANCE_END_LISTENER;
@@ -75,7 +74,6 @@ public HistoryParseListener(HistoryLevel historyLevel, HistoryEventProducer hist
   protected void initExecutionListeners(HistoryEventProducer historyEventProducer, HistoryLevel historyLevel) {
     PROCESS_INSTANCE_START_LISTENER = new ProcessInstanceStartListener(historyEventProducer, historyLevel);
     PROCESS_INSTANCE_END_LISTENER = new ProcessInstanceEndListener(historyEventProducer, historyLevel);
-    PROCESS_INSTANCE_UPDATE_LISTENER = new ProcessInstanceUpdateListener(historyEventProducer, historyLevel);
 
     ACTIVITY_INSTANCE_START_LISTENER = new ActivityInstanceStartListener(historyEventProducer, historyLevel);
     ACTIVITY_INSTANCE_END_LISTENER = new ActivityInstanceEndListener(historyEventProducer, historyLevel);

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/PvmExecutionImpl.java
Patch:
@@ -99,7 +99,7 @@ public abstract class PvmExecutionImpl extends CoreExecution implements Activity
 
   protected boolean deleteRoot;
   protected String deleteReason;
-  protected transient boolean externallyTerminated;
+  protected boolean externallyTerminated;
 
   //state/type of execution //////////////////////////////////////////////////
 

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/DbDeadlockTest.java
Patch:
@@ -94,7 +94,7 @@ public Void execute(CommandContext commandContext) {
       hpi.setProcessInstanceId(id);
       hpi.setProcessDefinitionId("someProcDefId");
       hpi.setStartTime(new Date());
-      hpi.setState(HistoricProcessInstance.ACTIVE);
+      hpi.setState(HistoricProcessInstance.STATE_ACTIVE);
 
       newEntityManager.insert(hpi);
       newEntityManager.flush();

File: engine/src/test/java/org/camunda/bpm/engine/test/api/repository/DeleteProcessDefinitionTest.java
Patch:
@@ -119,9 +119,9 @@ public void testDeleteProcessDefinitionWithProcessInstance() {
     try {
       repositoryService.deleteProcessDefinition(processDefinition.getId());
       fail("Should fail, since there exists a process instance");
-    } catch (Exception ex) {
-      //then the deletion should fail since there exist a process instance
-      assert (ex.getMessage().contains("Referential integrity constraint violation"));
+    } catch (RuntimeException ae) {
+      // then Exception is expected, the deletion should fail since there exist a process instance
+      // and the cascade flag is per default false
     }
     assertEquals(1, repositoryService.createProcessDefinitionQuery().count());
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricProcessInstanceStateTest.java
Patch:
@@ -1,10 +1,12 @@
 package org.camunda.bpm.engine.test.history;
 
+import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.history.HistoricProcessInstance;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.test.Deployment;
 import org.camunda.bpm.engine.test.ProcessEngineRule;
+import org.camunda.bpm.engine.test.RequiredHistoryLevel;
 import org.camunda.bpm.engine.test.util.ProcessEngineTestRule;
 import org.camunda.bpm.engine.test.util.ProvidedProcessEngineRule;
 import org.camunda.bpm.model.bpmn.Bpmn;
@@ -26,6 +28,7 @@
 /**
  * @author Askar Akhmerov
  */
+@RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_ACTIVITY)
 public class HistoricProcessInstanceStateTest {
 
   public static final String TERMINATION = "termination";

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/history/HistoricTaskInstanceReportService.java
Patch:
@@ -24,7 +24,6 @@ public interface HistoricTaskInstanceReportService {
    * creates a historic task instance report
    */
   @GET
-  @Consumes(MediaType.APPLICATION_JSON)
   @Produces(MediaType.APPLICATION_JSON)
   List<HistoricTaskInstanceReportResultDto> getTaskReportResults(@Context UriInfo uriInfo);
 
@@ -33,7 +32,6 @@ public interface HistoricTaskInstanceReportService {
    */
   @GET
   @Path("/duration")
-  @Consumes(MediaType.APPLICATION_JSON)
   @Produces(MediaType.APPLICATION_JSON)
   List<ReportResultDto> getTaskDurationReportResults(@Context UriInfo uriInfo);
 }

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/delegate/DmnDecisionEvaluationEvent.java
Patch:
@@ -23,12 +23,12 @@ public interface DmnDecisionEvaluationEvent {
   /**
    * @return the result of the evaluated decision
    */
-  DmnDecisionTableEvaluationEvent getDecisionResult();
+  DmnDecisionLogicEvaluationEvent getDecisionResult();
 
   /**
    * @return the collection of required decision results
    */
-  Collection<DmnDecisionTableEvaluationEvent> getRequiredDecisionResults();
+  Collection<DmnDecisionLogicEvaluationEvent> getRequiredDecisionResults();
 
   /**
    * @return the number of executed decision elements during the evaluation

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/delegate/DmnDecisionTableEvaluationEvent.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Event which represents the evaluation of a decision table
  */
-public interface DmnDecisionTableEvaluationEvent {
+public interface DmnDecisionTableEvaluationEvent extends DmnDecisionLogicEvaluationEvent {
 
   /**
    * @return the evaluated decision table

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/delegate/DmnEvaluatedDecisionRule.java
Patch:
@@ -26,7 +26,7 @@ public interface DmnEvaluatedDecisionRule {
   String getId();
 
   /**
-   * @return the evaluted output entries for the decision rule
+   * @return the evaluated output entries for the decision rule
    */
   Map<String, DmnEvaluatedOutput> getOutputEntries();
 

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/api/DmnDecisionTableResultTest.java
Patch:
@@ -30,14 +30,15 @@
 import org.camunda.bpm.engine.variable.value.TypedValue;
 import org.junit.Test;
 
-public class DmnResultTest extends DmnEngineTest {
+public class DmnDecisionTableResultTest extends DmnEngineTest {
 
   public static final String NO_OUTPUT_VALUE = "noOutputValue";
   public static final String SINGLE_OUTPUT_VALUE = "singleOutputValue";
   public static final String MULTIPLE_OUTPUT_VALUES = "multipleOutputValues";
 
   public static final String RESULT_TEST_DMN = "DmnResultTest.dmn";
   public static final String RESULT_TEST_WITH_TYPES_DMN = "DmnResultTypedTest.dmn";
+  public static final String RESULT_TEST_WITH_SINGLE_UNNAMED_OUTPUT_DMN = "DmnResultTest.testSingleOutputNoName.dmn";
 
   @Test
   @DecisionResource(resource = RESULT_TEST_DMN)
@@ -108,7 +109,7 @@ public void testSingleOutputValue() {
   }
 
   @Test
-  @DecisionResource
+  @DecisionResource(resource = RESULT_TEST_WITH_SINGLE_UNNAMED_OUTPUT_DMN)
   public void testSingleOutputNoName() {
     DmnDecisionTableResult decisionResult = evaluateDecisionTable();
     assertThat(decisionResult).hasSize(1);

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/transform/DmnTransformTest.java
Patch:
@@ -211,7 +211,7 @@ public void shouldTransformDecisionWithLiteralExpression() {
     assertThat(variable.getId()).isEqualTo("v1");
     assertThat(variable.getName()).isEqualTo("c");
     assertThat(variable.getTypeDefinition()).isNotNull();
-    assertThat(variable.getTypeDefinition().getTypeName()).isEqualTo("string");
+    assertThat(variable.getTypeDefinition().getTypeName()).isEqualTo("integer");
 
     DmnExpressionImpl dmnExpression = dmnDecisionLiteralExpression.getExpression();
     assertThat(dmnExpression).isNotNull();

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/runtime/ProcessInstanceWithVariablesDto.java
Patch:
@@ -51,7 +51,7 @@ public static ProcessInstanceDto fromProcessInstance(ProcessInstanceWithVariable
     VariableMap variables = instance.getVariables();
     Map<String, VariableValueDto> values = new HashMap<String, VariableValueDto>();
     for (String variableName : variables.keySet()) {
-      VariableValueDto valueDto = VariableValueDto.fromTypedValue(variables.getValueTyped(variableName));
+      VariableValueDto valueDto = VariableValueDto.fromTypedValue(variables.getValueTyped(variableName), true);
       values.put(variableName, valueDto);
     }
     result.variables = values;

File: engine/src/test/java/org/camunda/bpm/engine/test/api/variables/scope/TargetVariableScopeTest.java
Patch:
@@ -65,7 +65,7 @@ public void testExecutionWithoutProperTargetScope () {
     VariableMap variables = Variables.createVariables().putValue("orderIds", Arrays.asList(new int[]{1, 2, 3}));
     //fails due to inappropriate variable scope target
     thrown.expect(ScriptEvaluationException.class);
-    thrown.expectMessage(startsWith("Unable to evaluate script: org.camunda.bpm.engine.exception.NullValueException: no scope found with id: NOT_EXISTING"));
+    thrown.expectMessage(startsWith("Unable to evaluate script: org.camunda.bpm.engine.ProcessEngineException: ENGINE-20011 Scope with specified activity Id NOT_EXISTING and execution"));
     engineRule.getRuntimeService().startProcessInstanceByKey("Process_MultiInstanceCallAcitivity",variables);
   }
 
@@ -134,7 +134,7 @@ public void testWithDelegateVariableMappingAndChildScope () {
 
     ProcessDefinition processDefinition = testHelper.deployAndGetDefinition(instance);
     thrown.expect(ProcessEngineException.class);
-    thrown.expectMessage(startsWith("org.camunda.bpm.engine.exception.NullValueException: no scope found with id: SubProcess_2: target scope is null"));
+    thrown.expectMessage(startsWith("org.camunda.bpm.engine.ProcessEngineException: ENGINE-20011 Scope with specified activity Id SubProcess_2 and execution"));
     VariableMap variables = Variables.createVariables().putValue("orderIds", Arrays.asList(new int[]{1, 2, 3}));
     engineRule.getRuntimeService().startProcessInstanceById(processDefinition.getId(),variables);
   }

File: qa/integration-tests-webapps/src/test/java/org/camunda/bpm/cockpit/DashboardIT.java
Patch:
@@ -33,8 +33,8 @@ public void testLogin() throws URISyntaxException {
     WebElement submit = wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("button[type=\"submit\"]")));
     submit.submit();
 
-    wait.until(ExpectedConditions.textToBePresentInElementLocated(By.cssSelector("[ng-repeat=\"propName in procDefStatsKeys\"]:first-child > .value"), "1"));
-    wait.until(ExpectedConditions.textToBePresentInElementLocated(By.cssSelector("[ng-repeat=\"propName in procDefStatsKeys\"]:first-child > a"), "process definition"));
+    wait.until(ExpectedConditions.textToBePresentInElementLocated(By.cssSelector(".prop-definitions > .value"), "1"));
+    wait.until(ExpectedConditions.textToBePresentInElementLocated(By.cssSelector(".prop-definitions > a"), "Process definition"));
 
     wait.until(currentURIIs(new URI(appUrl + "/default/#/dashboard")));
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/UserOperationLogManager.java
Patch:
@@ -59,7 +59,9 @@ public void deleteOperationLogEntryById(String entryId) {
   }
 
   protected void fireUserOperationLog(final UserOperationLogContext context) {
-    context.setUserId(getAuthenticatedUserId());
+    if (context.getUserId() == null) {
+      context.setUserId(getAuthenticatedUserId());
+    }
 
     HistoryEventProcessor.processHistoryEvents(new HistoryEventProcessor.HistoryEventCreator() {
       @Override

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricTaskDurationReportTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.task.Task;
 import org.camunda.bpm.engine.test.ProcessEngineRule;
+import org.camunda.bpm.engine.test.RequiredHistoryLevel;
 import org.camunda.bpm.engine.test.util.ProcessEngineTestRule;
 import org.camunda.bpm.engine.test.util.ProvidedProcessEngineRule;
 import org.camunda.bpm.model.bpmn.Bpmn;
@@ -42,6 +43,7 @@
 /**
  * @author Stefan Hentschel.
  */
+@RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_FULL)
 public class HistoricTaskDurationReportTest {
 
   public ProcessEngineRule processEngineRule = new ProvidedProcessEngineRule();

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricTaskReportTest.java
Patch:
@@ -20,6 +20,7 @@
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.task.Task;
 import org.camunda.bpm.engine.test.ProcessEngineRule;
+import org.camunda.bpm.engine.test.RequiredHistoryLevel;
 import org.camunda.bpm.engine.test.util.ProcessEngineTestRule;
 import org.camunda.bpm.engine.test.util.ProvidedProcessEngineRule;
 import org.camunda.bpm.model.bpmn.Bpmn;
@@ -41,6 +42,7 @@
 /**
  * @author Stefan Hentschel.
  */
+@RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_FULL)
 public class HistoricTaskReportTest {
 
   public ProcessEngineRule processEngineRule = new ProvidedProcessEngineRule();

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricTaskReportTest.java
Patch:
@@ -91,7 +91,7 @@ public void testHistoricTaskInstanceReportQuery() {
 
     // then
     assertEquals(3, taskReportResults.size());
-    assertEquals(2, taskReportResults.get(1).getCount(), 0);
+    assertEquals(2, taskReportResults.get(0).getCount(), 0);
   }
 
   @Test

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricTaskReportTest.java
Patch:
@@ -91,7 +91,7 @@ public void testHistoricTaskInstanceReportQuery() {
 
     // then
     assertEquals(3, taskReportResults.size());
-    assertEquals(2, taskReportResults.get(1).getCount(), 0);
+    assertEquals(1, taskReportResults.get(1).getCount(), 0);
   }
 
   @Test

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricProcessInstanceReportImpl.java
Patch:
@@ -28,7 +28,7 @@
  * @author Roman Smirnov
  *
  */
-public class HistoricProcessInstanceHistoricProcessInstanceReportImpl extends AbstractHistoricProcessInstanceReport implements HistoricProcessInstanceReport {
+public class HistoricProcessInstanceReportImpl extends AbstractHistoricProcessInstanceReport implements HistoricProcessInstanceReport {
 
   private static final long serialVersionUID = 1L;
 
@@ -37,7 +37,7 @@ public class HistoricProcessInstanceHistoricProcessInstanceReportImpl extends Ab
   protected String[] processDefinitionIdIn;
   protected String[] processDefinitionKeyIn;
 
-  public HistoricProcessInstanceHistoricProcessInstanceReportImpl(CommandExecutor commandExecutor) {
+  public HistoricProcessInstanceReportImpl(CommandExecutor commandExecutor) {
     super(commandExecutor);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -214,6 +214,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     databaseSpecificIfNull.put(ORACLE, "NVL");
 
     addDatabaseSpecificStatement(ORACLE, "selectHistoricProcessInstanceDurationReport", "selectHistoricProcessInstanceDurationReport_oracle");
+    addDatabaseSpecificStatement(ORACLE, "selectHistoricTaskInstanceDurationReport", "selectHistoricTaskInstanceDurationReport_oracle");
     addDatabaseSpecificStatement(ORACLE, "selectFilterByQueryCriteria", "selectFilterByQueryCriteria_oracleDb2");
 
     constants = new HashMap<String, String>();

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ReportManager.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.List;
 
 import org.camunda.bpm.engine.history.DurationReportResult;
-import org.camunda.bpm.engine.impl.HistoricProcessInstanceHistoricProcessInstanceReportImpl;
+import org.camunda.bpm.engine.impl.HistoricProcessInstanceReportImpl;
 import org.camunda.bpm.engine.impl.persistence.AbstractManager;
 
 /**
@@ -25,12 +25,12 @@
 public class ReportManager extends AbstractManager {
 
   @SuppressWarnings("unchecked")
-  public List<DurationReportResult> createHistoricProcessInstanceDurationReport(HistoricProcessInstanceHistoricProcessInstanceReportImpl query) {
+  public List<DurationReportResult> createHistoricProcessInstanceDurationReport(HistoricProcessInstanceReportImpl query) {
     configureQuery(query);
     return getDbEntityManager().selectList("selectHistoricProcessInstanceDurationReport", query);
   }
 
-  protected void configureQuery(HistoricProcessInstanceHistoricProcessInstanceReportImpl parameter) {
+  protected void configureQuery(HistoricProcessInstanceReportImpl parameter) {
     getTenantManager().configureTenantCheck(parameter.getTenantCheck());
   }
 

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/externaltask/ExternalTaskDto.java
Patch:
@@ -25,7 +25,7 @@ public class ExternalTaskDto {
   protected String activityId;
   protected String activityInstanceId;
   protected String errorMessage;
-  protected String exceptionStackTrace;
+  protected String errorDetails;
   protected String executionId;
   protected String id;
   protected Date lockExpirationTime;
@@ -86,8 +86,8 @@ public long getPriority() {
     return priority;
   }
 
-  public String getExceptionStackTrace() {
-    return exceptionStackTrace;
+  public String getErrorDetails() {
+    return errorDetails;
   }
 
   public static ExternalTaskDto fromExternalTask(ExternalTask task) {

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ExternalTaskRestServiceInteractionTest.java
Patch:
@@ -387,7 +387,7 @@ public void testGetErrorDetails() {
   }
 
   @Test
-  public void testGetErrorDetailsExistingTask() {
+  public void testGetErrorDetailsNonExistingTask() {
     doThrow(new NotFoundException()).when(externalTaskService).getExternalTaskErrorDetails(any(String.class));
 
     given()

File: engine/src/main/java/org/camunda/bpm/engine/ExternalTaskService.java
Patch:
@@ -260,8 +260,8 @@ public interface ExternalTaskService {
   public ExternalTaskQuery createExternalTaskQuery();
 
   /**
-   * Returns the full stacktrace of the exception that occurred while running external task
-   * with the given id. Returns null when the external task has no exception stacktrace.
+   * Returns the full error details that occurred while running external task
+   * with the given id. Returns null when the external task has no error details.
    *
    * @param externalTaskId id of the external task, cannot be null.
    *

File: engine/src/main/java/org/camunda/bpm/engine/externaltask/ExternalTask.java
Patch:
@@ -88,7 +88,7 @@ public interface ExternalTask {
    *
    * @see ExternalTaskService#handleFailure(String, String,String, String, int, long)
    *
-   * To get the full exception stacktrace,
+   * To get the full error details,
    * use {@link ExternalTaskService#getExternalTaskErrorDetails(String)}
    */
   String getErrorMessage();

File: engine/src/main/java/org/camunda/bpm/engine/externaltask/LockedExternalTask.java
Patch:
@@ -90,8 +90,8 @@ public interface LockedExternalTask {
   String getErrorMessage();
 
   /**
-   * @return the short error message submitted with the latest reported failure executing this task;
-   *   <code>null</code> if no failure was reported previously or if no error message
+   * @return error details submitted with the latest reported failure executing this task;
+   *   <code>null</code> if no failure was reported previously or if no error details
    *   was submitted
    *
    * @see ExternalTaskService#handleFailure(String, String, String, String, int, long)

File: engine/src/main/java/org/camunda/bpm/engine/impl/util/ExceptionUtil.java
Patch:
@@ -43,8 +43,6 @@ public static ByteArrayEntity createJobExceptionByteArray(byte[] byteArray) {
   }
 
   /**
-   * CAM-5284
-   *
    * create ByteArrayEntity with specified name and payload and make sure it's
    * persisted
    *

File: engine/src/test/java/org/camunda/bpm/engine/test/api/externaltask/ExternalTaskQueryTest.java
Patch:
@@ -46,7 +46,6 @@ public class ExternalTaskQueryTest extends PluggableProcessEngineTestCase {
   protected static final String WORKER_ID = "aWorkerId";
   protected static final String TOPIC_NAME = "externalTaskTopic";
   protected static final String ERROR_MESSAGE = "error";
-  public static final String STACK_TRACE = "stackTrace";
 
   protected void setUp() throws Exception {
     ClockUtil.setCurrentTime(new Date());

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/operation/AbstractEventAtomicOperation.java
Patch:
@@ -48,13 +48,13 @@ public void execute(T execution) {
         execution.setEventSource(scope);
         DelegateListener<? extends BaseDelegateExecution> listener = listeners.get(listenerIndex);
         try {
+          execution.setListenerIndex(listenerIndex+1);
           execution.invokeListener(listener);
         } catch (RuntimeException e) {
           throw e;
         } catch (Exception e) {
           throw new PvmException("couldn't execute event listener : "+e.getMessage(), e);
         }
-        execution.setListenerIndex(listenerIndex+1);
         execution.performOperationSync(this);
 
       } else {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -39,13 +39,11 @@
 import org.camunda.bpm.engine.impl.core.instance.CoreExecution;
 import org.camunda.bpm.engine.impl.core.operation.CoreAtomicOperation;
 import org.camunda.bpm.engine.impl.core.variable.CoreVariableInstance;
-import org.camunda.bpm.engine.impl.core.variable.scope.AbstractVariableScope;
 import org.camunda.bpm.engine.impl.core.variable.scope.VariableCollectionProvider;
 import org.camunda.bpm.engine.impl.core.variable.scope.VariableInstanceFactory;
 import org.camunda.bpm.engine.impl.core.variable.scope.VariableInstanceLifecycleListener;
 import org.camunda.bpm.engine.impl.core.variable.scope.VariableListenerInvocationListener;
 import org.camunda.bpm.engine.impl.core.variable.scope.VariableStore;
-import org.camunda.bpm.engine.impl.core.variable.scope.VariableStore.VariableStoreObserver;
 import org.camunda.bpm.engine.impl.core.variable.scope.VariableStore.VariablesProvider;
 import org.camunda.bpm.engine.impl.db.DbEntity;
 import org.camunda.bpm.engine.impl.db.EnginePersistenceLogger;
@@ -1084,6 +1082,9 @@ public ExecutionEntity resolveReplacedBy() {
   public void replace(PvmExecutionImpl execution) {
     ExecutionEntity replacedExecution = (ExecutionEntity) execution;
 
+    setListenerIndex(replacedExecution.getListenerIndex());
+    replacedExecution.setListenerIndex(0);
+
     // update the related tasks
     replacedExecution.moveTasksTo(this);
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/SelfCancellationTest.java
Patch:
@@ -34,10 +34,10 @@
 import org.junit.Assert;
 import org.junit.Before;
 
-import static org.junit.Assert.assertEquals;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.RuleChain;
+import static org.junit.Assert.assertEquals;
 
 /**
  * Tests for when delegate code synchronously cancels the activity instance it belongs to.

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/JobRetryCmd.java
Patch:
@@ -12,8 +12,6 @@
  */
 package org.camunda.bpm.engine.impl.cmd;
 
-import static org.camunda.bpm.engine.impl.util.JobExceptionUtil.getJobExceptionStacktrace;
-
 import org.camunda.bpm.engine.OptimisticLockingException;
 import org.camunda.bpm.engine.impl.cfg.TransactionContext;
 import org.camunda.bpm.engine.impl.cfg.TransactionState;
@@ -23,6 +21,7 @@
 import org.camunda.bpm.engine.impl.jobexecutor.JobExecutor;
 import org.camunda.bpm.engine.impl.jobexecutor.MessageAddedNotification;
 import org.camunda.bpm.engine.impl.persistence.entity.JobEntity;
+import org.camunda.bpm.engine.impl.util.ExceptionUtil;
 
 /**
  * @author Roman Smirnov
@@ -59,7 +58,7 @@ protected void decrementRetries(JobEntity job) {
   }
 
   protected String getExceptionStacktrace() {
-    return getJobExceptionStacktrace(exception);
+    return ExceptionUtil.getExceptionStacktrace(exception);
   }
 
   protected boolean shouldDecrementRetriesFor(Throwable t) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.camunda.bpm.engine.impl.persistence.entity;
 
-import static org.camunda.bpm.engine.impl.util.JobExceptionUtil.createJobExceptionByteArray;
+import static org.camunda.bpm.engine.impl.util.ExceptionUtil.createJobExceptionByteArray;
 
 import java.io.Serializable;
 import java.util.Date;
@@ -33,11 +33,11 @@
 import org.camunda.bpm.engine.impl.jobexecutor.JobHandler;
 import org.camunda.bpm.engine.impl.jobexecutor.JobHandlerConfiguration;
 import org.camunda.bpm.engine.impl.pvm.process.ProcessDefinitionImpl;
+import org.camunda.bpm.engine.impl.util.ExceptionUtil;
 import org.camunda.bpm.engine.management.JobDefinition;
 import org.camunda.bpm.engine.runtime.Incident;
 import org.camunda.bpm.engine.runtime.Job;
 import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
-import static org.camunda.bpm.engine.impl.util.JobExceptionUtil.getJobExceptionStacktrace;
 import static org.camunda.bpm.engine.impl.util.StringUtil.toByteArray;
 
 /**
@@ -362,7 +362,7 @@ protected IncidentContext createIncidentContext() {
 
   public String getExceptionStacktrace() {
     ByteArrayEntity byteArray = getExceptionByteArray();
-    return getJobExceptionStacktrace(byteArray);
+    return ExceptionUtil.getExceptionStacktrace(byteArray);
   }
 
   public void setSuspensionState(int state) {

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricJobLogTest.java
Patch:
@@ -34,7 +34,7 @@
 import org.camunda.bpm.engine.impl.persistence.entity.JobEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.MessageEntity;
 import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
-import org.camunda.bpm.engine.impl.util.JobExceptionUtil;
+import org.camunda.bpm.engine.impl.util.ExceptionUtil;
 import org.camunda.bpm.engine.impl.util.StringUtil;
 import org.camunda.bpm.engine.runtime.Job;
 import org.camunda.bpm.engine.test.Deployment;
@@ -1166,7 +1166,7 @@ public Void execute(CommandContext commandContext) {
 
 
           byte[] aByteValue = StringUtil.toByteArray("abc");
-          ByteArrayEntity byteArray = JobExceptionUtil.createJobExceptionByteArray(aByteValue);
+          ByteArrayEntity byteArray = ExceptionUtil.createJobExceptionByteArray(aByteValue);
           log.setExceptionByteArrayId(byteArray.getId());
 
           commandContext

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/PvmExecutionImpl.java
Patch:
@@ -316,6 +316,7 @@ public void interrupt(String reason, boolean skipCustomListeners, boolean skipIo
   @Override
   public void end(boolean completeScope) {
 
+
     setCompleteScope(completeScope);
 
     isActive = false;
@@ -1630,7 +1631,7 @@ public boolean isCompleteScope() {
   }
 
   public void setCompleteScope(boolean completeScope) {
-    if (completeScope) {
+    if (completeScope && !isCanceled()) {
       activityInstanceState = ActivityInstanceState.SCOPE_COMPLETE.getStateCode();
     }
   }

File: engine-plugins/connect-plugin/src/main/java/org/camunda/connect/plugin/impl/ConnectorVariableScope.java
Patch:
@@ -20,10 +20,10 @@
 import org.camunda.bpm.engine.impl.core.variable.CoreVariableInstance;
 import org.camunda.bpm.engine.impl.core.variable.scope.AbstractVariableScope;
 import org.camunda.bpm.engine.impl.core.variable.scope.SimpleVariableInstance;
+import org.camunda.bpm.engine.impl.core.variable.scope.SimpleVariableInstance.SimpleVariableInstanceFactory;
 import org.camunda.bpm.engine.impl.core.variable.scope.VariableInstanceFactory;
 import org.camunda.bpm.engine.impl.core.variable.scope.VariableInstanceLifecycleListener;
 import org.camunda.bpm.engine.impl.core.variable.scope.VariableStore;
-import org.camunda.bpm.engine.impl.core.variable.scope.SimpleVariableInstance.SimpleVariableInstanceFactory;
 import org.camunda.connect.spi.ConnectorRequest;
 import org.camunda.connect.spi.ConnectorResponse;
 
@@ -60,7 +60,7 @@ protected VariableInstanceFactory<CoreVariableInstance> getVariableInstanceFacto
   }
 
   @Override
-  protected List<VariableInstanceLifecycleListener<CoreVariableInstance>> getVariableInstanceLifecycleListeners(AbstractVariableScope sourceScope) {
+  protected List<VariableInstanceLifecycleListener<CoreVariableInstance>> getVariableInstanceLifecycleListeners() {
     return Collections.emptyList();
   }
 

File: engine-plugins/spin-plugin/src/test/java/org/camunda/spin/plugin/script/TestVariableScope.java
Patch:
@@ -47,7 +47,7 @@ protected VariableInstanceFactory<CoreVariableInstance> getVariableInstanceFacto
   }
 
   @Override
-  protected List<VariableInstanceLifecycleListener<CoreVariableInstance>> getVariableInstanceLifecycleListeners(AbstractVariableScope sourceScope) {
+  protected List<VariableInstanceLifecycleListener<CoreVariableInstance>> getVariableInstanceLifecycleListeners() {
     return Collections.emptyList();
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/entity/runtime/CaseExecutionEntity.java
Patch:
@@ -39,7 +39,6 @@
 import org.camunda.bpm.engine.impl.core.instance.CoreExecution;
 import org.camunda.bpm.engine.impl.core.operation.CoreAtomicOperation;
 import org.camunda.bpm.engine.impl.core.variable.CoreVariableInstance;
-import org.camunda.bpm.engine.impl.core.variable.scope.AbstractVariableScope;
 import org.camunda.bpm.engine.impl.core.variable.scope.VariableInstanceFactory;
 import org.camunda.bpm.engine.impl.core.variable.scope.VariableInstanceLifecycleListener;
 import org.camunda.bpm.engine.impl.core.variable.scope.VariableListenerInvocationListener;
@@ -710,7 +709,7 @@ protected VariableInstanceFactory<CoreVariableInstance> getVariableInstanceFacto
 
   @Override
   @SuppressWarnings({ "unchecked", "rawtypes" })
-  protected List<VariableInstanceLifecycleListener<CoreVariableInstance>> getVariableInstanceLifecycleListeners(AbstractVariableScope sourceScope) {
+  protected List<VariableInstanceLifecycleListener<CoreVariableInstance>> getVariableInstanceLifecycleListeners() {
     return Arrays.<VariableInstanceLifecycleListener<CoreVariableInstance>>asList(
         (VariableInstanceLifecycleListener) VariableInstanceEntityPersistenceListener.INSTANCE,
         (VariableInstanceLifecycleListener) VariableInstanceSequenceCounterListener.INSTANCE,

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/execution/CaseExecutionImpl.java
Patch:
@@ -27,12 +27,11 @@
 import org.camunda.bpm.engine.impl.cmmn.model.CmmnActivity;
 import org.camunda.bpm.engine.impl.cmmn.model.CmmnCaseDefinition;
 import org.camunda.bpm.engine.impl.core.variable.CoreVariableInstance;
-import org.camunda.bpm.engine.impl.core.variable.scope.AbstractVariableScope;
 import org.camunda.bpm.engine.impl.core.variable.scope.SimpleVariableInstance;
+import org.camunda.bpm.engine.impl.core.variable.scope.SimpleVariableInstance.SimpleVariableInstanceFactory;
 import org.camunda.bpm.engine.impl.core.variable.scope.VariableInstanceFactory;
 import org.camunda.bpm.engine.impl.core.variable.scope.VariableInstanceLifecycleListener;
 import org.camunda.bpm.engine.impl.core.variable.scope.VariableStore;
-import org.camunda.bpm.engine.impl.core.variable.scope.SimpleVariableInstance.SimpleVariableInstanceFactory;
 import org.camunda.bpm.engine.impl.pvm.PvmProcessDefinition;
 import org.camunda.bpm.engine.impl.pvm.runtime.ExecutionImpl;
 import org.camunda.bpm.engine.impl.pvm.runtime.PvmExecutionImpl;
@@ -282,7 +281,7 @@ protected VariableInstanceFactory<CoreVariableInstance> getVariableInstanceFacto
   }
 
   @Override
-  protected List<VariableInstanceLifecycleListener<CoreVariableInstance>> getVariableInstanceLifecycleListeners(AbstractVariableScope sourceScope) {
+  protected List<VariableInstanceLifecycleListener<CoreVariableInstance>> getVariableInstanceLifecycleListeners() {
     return Collections.emptyList();
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionObserver.java
Patch:
@@ -27,5 +27,5 @@ public interface ExecutionObserver {
    *
    * @param execution the execution which is been observed
    */
-  public void onRemove(ExecutionEntity execution);
+  public void onClear(ExecutionEntity execution);
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -477,7 +477,7 @@ protected VariableInstanceFactory<CoreVariableInstance> getVariableInstanceFacto
 
   @Override
   @SuppressWarnings({ "unchecked", "rawtypes" })
-  protected List<VariableInstanceLifecycleListener<CoreVariableInstance>> getVariableInstanceLifecycleListeners(AbstractVariableScope sourceScope) {
+  protected List<VariableInstanceLifecycleListener<CoreVariableInstance>> getVariableInstanceLifecycleListeners() {
     return Arrays.<VariableInstanceLifecycleListener<CoreVariableInstance>>asList(
         (VariableInstanceLifecycleListener) VariableInstanceEntityPersistenceListener.INSTANCE,
         (VariableInstanceLifecycleListener) VariableInstanceSequenceCounterListener.INSTANCE,

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/ExecutionImpl.java
Patch:
@@ -299,7 +299,7 @@ protected VariableInstanceFactory<CoreVariableInstance> getVariableInstanceFacto
   }
 
   @Override
-  protected List<VariableInstanceLifecycleListener<CoreVariableInstance>> getVariableInstanceLifecycleListeners(AbstractVariableScope sourceScope) {
+  protected List<VariableInstanceLifecycleListener<CoreVariableInstance>> getVariableInstanceLifecycleListeners() {
     return Collections.emptyList();
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/util/TestVariableScope.java
Patch:
@@ -45,7 +45,7 @@ protected VariableInstanceFactory<CoreVariableInstance> getVariableInstanceFacto
   }
 
   @Override
-  protected List<VariableInstanceLifecycleListener<CoreVariableInstance>> getVariableInstanceLifecycleListeners(AbstractVariableScope sourceScope) {
+  protected List<VariableInstanceLifecycleListener<CoreVariableInstance>> getVariableInstanceLifecycleListeners() {
     return Collections.emptyList();
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/task/TaskQueryTest.java
Patch:
@@ -235,7 +235,7 @@ public void testTaskQueryLookupByNameCaseInsensitive() {
     assertThat(tasks.size(),is(6));
 
     query = taskService.createTaskQuery();
-    query.taskNameLike("TeStTaSk");
+    query.taskName("TeStTaSk");
 
     tasks = query.list();
     assertNotNull(tasks);

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/runtime/ProcessInstanceWithVariablesDto.java
Patch:
@@ -23,9 +23,8 @@
 import org.camunda.bpm.engine.variable.VariableMap;
 
 /**
- * Represents a process instance dto extension dto that contains additionally
- * variables which the process used during the execution.
- * 
+ * Represents a process instance dto extension dto that contains latest variables.
+ *
  * @author Christopher Zell <christopher.zell@camunda.com>
  */
 public class ProcessInstanceWithVariablesDto extends ProcessInstanceDto {

File: engine/src/main/java/org/camunda/bpm/engine/impl/event/CompensationEventHandler.java
Patch:
@@ -13,7 +13,6 @@
 
 package org.camunda.bpm.engine.impl.event;
 
-import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
 
 import java.util.List;
 
@@ -26,6 +25,7 @@
 import org.camunda.bpm.engine.impl.pvm.delegate.CompositeActivityBehavior;
 import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 import org.camunda.bpm.engine.impl.pvm.runtime.operation.PvmAtomicOperation;
+import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
 
 
 /**

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -13,8 +13,6 @@
 package org.camunda.bpm.engine.impl.history.producer;
 
 import static org.camunda.bpm.engine.impl.util.JobExceptionUtil.createJobExceptionByteArray;
-import static org.camunda.bpm.engine.impl.util.JobExceptionUtil.getJobExceptionStacktrace;
-import static org.camunda.bpm.engine.impl.util.StringUtil.toByteArray;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -61,6 +59,8 @@
 import org.camunda.bpm.engine.runtime.Incident;
 import org.camunda.bpm.engine.runtime.Job;
 import org.camunda.bpm.engine.task.IdentityLink;
+import static org.camunda.bpm.engine.impl.util.JobExceptionUtil.getJobExceptionStacktrace;
+import static org.camunda.bpm.engine.impl.util.StringUtil.toByteArray;
 
 /**
  * @author Daniel Meyer

File: engine/src/main/java/org/camunda/bpm/engine/impl/interceptor/AtomicOperationInvocation.java
Patch:
@@ -63,7 +63,8 @@ public void execute(BpmnStackTrace stackTrace) {
     // execution might have ended in the meanwhile
     if(execution.isEnded() &&
         (operation == PvmAtomicOperation.TRANSITION_NOTIFY_LISTENER_TAKE
-      || operation == PvmAtomicOperation.ACTIVITY_START_CREATE_SCOPE)) {
+      || operation == PvmAtomicOperation.ACTIVITY_START_CREATE_SCOPE)
+            ) {
       return;
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/EventSubscriptionEntity.java
Patch:
@@ -13,7 +13,6 @@
 
 package org.camunda.bpm.engine.impl.persistence.entity;
 
-import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
 
 import java.io.Serializable;
 import java.util.Date;
@@ -29,6 +28,7 @@
 import org.camunda.bpm.engine.impl.pvm.process.ProcessDefinitionImpl;
 import org.camunda.bpm.engine.impl.util.ClockUtil;
 import org.camunda.bpm.engine.runtime.EventSubscription;
+import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
 
 /**
  * @author Daniel Meyer

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -12,10 +12,7 @@
  */
 package org.camunda.bpm.engine.impl.persistence.entity;
 
-import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
 import static org.camunda.bpm.engine.impl.util.JobExceptionUtil.createJobExceptionByteArray;
-import static org.camunda.bpm.engine.impl.util.JobExceptionUtil.getJobExceptionStacktrace;
-import static org.camunda.bpm.engine.impl.util.StringUtil.toByteArray;
 
 import java.io.Serializable;
 import java.util.Date;
@@ -39,6 +36,9 @@
 import org.camunda.bpm.engine.management.JobDefinition;
 import org.camunda.bpm.engine.runtime.Incident;
 import org.camunda.bpm.engine.runtime.Job;
+import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
+import static org.camunda.bpm.engine.impl.util.JobExceptionUtil.getJobExceptionStacktrace;
+import static org.camunda.bpm.engine.impl.util.StringUtil.toByteArray;
 
 /**
  * Stub of the common parts of a Job. You will normally work with a subclass of

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/PvmExecutionImpl.java
Patch:
@@ -252,7 +252,6 @@ public void startWithoutExecuting(Map<String, Object> variables) {
   @Override
   public void destroy() {
     LOG.destroying(this);
-
     setScope(false);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/runtime/ProcessInstantiationBuilder.java
Patch:
@@ -49,7 +49,7 @@ public interface ProcessInstantiationBuilder
   /**
    * Start the process instance.
    *
-   * @return the newly created process instance  
+   * @return the newly created process instance
    * @throws AuthorizationException
    *           if the user has no {@link Permissions#CREATE} permission on
    *           {@link Resources#PROCESS_INSTANCE} and no
@@ -83,7 +83,7 @@ public interface ProcessInstantiationBuilder
    * instructions are executed in the order they are submitted. Custom execution
    * and task listeners, as well as task input output mappings are triggered.
    *
-   * @return the newly created process instance with the variables which are set during execution
+   * @return the newly created process instance with the latest variables
    *
    * @throws AuthorizationException
    *           if the user has no {@link Permissions#CREATE} permission on
@@ -106,7 +106,7 @@ public interface ProcessInstantiationBuilder
    *          specifies whether input/output mappings for tasks should be
    *          invoked throughout the transaction when executing the
    *          instructions. Only supported for instructions.
-   * @return the newly created process instance with the variables which are set during execution
+   * @return the newly created process instance with the latest variables
    *
    * @throws AuthorizationException
    *           if the user has no {@link Permissions#CREATE} permission on

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/SelfCancellationTest.java
Patch:
@@ -16,7 +16,6 @@
 import org.camunda.bpm.engine.TaskService;
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
-import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.task.Task;
 import org.camunda.bpm.engine.test.ProcessEngineRule;
 import org.camunda.bpm.engine.test.util.ProcessEngineTestRule;

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/parse/FoxFailedJobParseListenerTest.java
Patch:
@@ -3,7 +3,7 @@
 import org.camunda.bpm.engine.impl.bpmn.parser.BpmnParse;
 import org.camunda.bpm.engine.impl.bpmn.parser.FoxFailedJobParseListener;
 import org.camunda.bpm.engine.impl.persistence.entity.ProcessDefinitionEntity;
-import org.camunda.bpm.engine.impl.persistence.entity.ProcessInstanceWithVariablesEntity;
+import org.camunda.bpm.engine.impl.persistence.entity.ProcessInstanceWithVariablesImpl;
 import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
@@ -118,7 +118,7 @@ public void testMultiInstanceBodyAndInnerActivityWithFailedJobRetryTimeCycle() {
 
   protected ActivityImpl findActivity(ProcessInstance pi, String activityId) {
 
-    ProcessInstanceWithVariablesEntity entity = (ProcessInstanceWithVariablesEntity) pi;
+    ProcessInstanceWithVariablesImpl entity = (ProcessInstanceWithVariablesImpl) pi;
     ProcessDefinitionEntity processDefEntity = entity.getExecutionEntity().getProcessDefinition();
 
     assertNotNull(processDefEntity);

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/transform/DmnTransformLogger.java
Patch:
@@ -138,10 +138,10 @@ public void decisionWithoutExpression(Decision decision) {
     );
   }
 
-  public DmnTransformException requiredDecisionLoopDetected(Decision decision) {
+  public DmnTransformException requiredDecisionLoopDetected(String decisionId) {
     return new DmnTransformException(exceptionMessage(
       "015",
-      "The decision '{}' has a loop.", decision.getId())
+      "The decision '{}' has a loop.", decisionId)
     );
   }
 

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/test/DmnEngineTest.java
Patch:
@@ -22,7 +22,6 @@
 import org.camunda.bpm.dmn.engine.DmnDecisionTableResult;
 import org.camunda.bpm.dmn.engine.DmnEngine;
 import org.camunda.bpm.dmn.engine.DmnEngineConfiguration;
-import org.camunda.bpm.dmn.engine.impl.DefaultDmnEngineConfiguration;
 import org.camunda.bpm.dmn.engine.test.asserts.DmnDecisionTableResultAssert;
 import org.camunda.bpm.engine.variable.VariableMap;
 import org.camunda.bpm.engine.variable.Variables;

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/history/HistoricTaskInstanceQueryDto.java
Patch:
@@ -432,10 +432,10 @@ protected void applyFilters(HistoricTaskInstanceQuery query) {
       query.taskDeleteReasonLike(taskDeleteReasonLike);
     }
     if (assigned != null) {
-      query.assigned();
+      query.taskAssigned();
     }
     if (unassigned != null) {
-      query.unassigned();
+      query.taskUnassigned();
     }
     if (taskAssignee != null) {
       query.taskAssignee(taskAssignee);

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/history/HistoricTaskInstanceQueryTest.java
Patch:
@@ -282,7 +282,7 @@ public void testTaskWasAssigned() {
 
     taskService.saveTask(taskThree);
 
-    List<HistoricTaskInstance> list = historyService.createHistoricTaskInstanceQuery().assigned().list();
+    List<HistoricTaskInstance> list = historyService.createHistoricTaskInstanceQuery().taskAssigned().list();
 
     // then
     assertEquals(list.size(), 2);
@@ -310,7 +310,7 @@ public void testTaskWasUnassigned() {
 
     taskService.saveTask(taskThree);
 
-    List<HistoricTaskInstance> list = historyService.createHistoricTaskInstanceQuery().unassigned().list();
+    List<HistoricTaskInstance> list = historyService.createHistoricTaskInstanceQuery().taskUnassigned().list();
 
     // then
     assertEquals(list.size(), 1);

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/migration/MigrationContextSwitchBeansTest.java
Patch:
@@ -41,13 +41,13 @@
 @RunWith(Arquillian.class)
 public class MigrationContextSwitchBeansTest extends AbstractFoxPlatformIntegrationTest {
 
-  public static final BpmnModelInstance ONE_TASK_PROCESS = Bpmn.createProcess("oneTaskProcess")
+  public static final BpmnModelInstance ONE_TASK_PROCESS = Bpmn.createExecutableProcess("oneTaskProcess")
     .startEvent()
     .userTask("userTask")
     .endEvent()
     .done();
 
-  public static final BpmnModelInstance BOUNDARY_EVENT_PROCESS = Bpmn.createProcess("boundaryProcess")
+  public static final BpmnModelInstance BOUNDARY_EVENT_PROCESS = Bpmn.createExecutableProcess("boundaryProcess")
     .startEvent()
     .userTask("userTask")
     .boundaryEvent()

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/util/TestHelper.java
Patch:
@@ -21,7 +21,7 @@
 public abstract class TestHelper {
   
   public final static String PROCESS_XML = 
-          "<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"  targetNamespace=\"Examples\"><process id=\"PROCESS_KEY\" /></definitions>"; 
+          "<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"  targetNamespace=\"Examples\"><process id=\"PROCESS_KEY\" isExecutable=\"true\" /></definitions>";
     
   public static Asset getStringAsAssetWithReplacements(String string, String[][] replacements) {
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -505,11 +505,11 @@ protected Escalation createEscalation(String id, Element element) {
    */
   public void parseProcessDefinitions() {
     for (Element processElement : rootElement.elements("process")) {
-      boolean isExecutable = true;
+      boolean isExecutable = !deployment.isNew();
       String isExecutableStr = processElement.attribute("isExecutable");
       if (isExecutableStr != null) {
-        if (!Boolean.parseBoolean(isExecutableStr)) {
-          isExecutable = false;
+        isExecutable = Boolean.parseBoolean(isExecutableStr);
+        if (!isExecutable) {
           LOG.ignoringNonExecutableProcess(processElement.attribute("id"));
         }
       } else {

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/gateway/ExclusiveGatewayTest.java
Patch:
@@ -168,7 +168,7 @@ public void testNoIdOnSequenceFlow() {
   public void testInvalidProcessDefinition() {
     String flowWithoutConditionNoDefaultFlow = "<?xml version='1.0' encoding='UTF-8'?>" +
             "<definitions id='definitions' xmlns='http://www.omg.org/spec/BPMN/20100524/MODEL' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:activiti='http://activiti.org/bpmn' targetNamespace='Examples'>" +
-            "  <process id='exclusiveGwDefaultSequenceFlow'> " +
+            "  <process id='exclusiveGwDefaultSequenceFlow' isExecutable='true'> " +
             "    <startEvent id='theStart' /> " +
             "    <sequenceFlow id='flow1' sourceRef='theStart' targetRef='exclusiveGw' /> " +
 
@@ -193,7 +193,7 @@ public void testInvalidProcessDefinition() {
 
     String defaultFlowWithCondition = "<?xml version='1.0' encoding='UTF-8'?>" +
             "<definitions id='definitions' xmlns='http://www.omg.org/spec/BPMN/20100524/MODEL' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:activiti='http://activiti.org/bpmn' targetNamespace='Examples'>" +
-            "  <process id='exclusiveGwDefaultSequenceFlow'> " +
+            "  <process id='exclusiveGwDefaultSequenceFlow' isExecutable='true'> " +
             "    <startEvent id='theStart' /> " +
             "    <sequenceFlow id='flow1' sourceRef='theStart' targetRef='exclusiveGw' /> " +
 
@@ -219,7 +219,7 @@ public void testInvalidProcessDefinition() {
 
     String noOutgoingFlow = "<?xml version='1.0' encoding='UTF-8'?>" +
             "<definitions id='definitions' xmlns='http://www.omg.org/spec/BPMN/20100524/MODEL' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:activiti='http://activiti.org/bpmn' targetNamespace='Examples'>" +
-            "  <process id='exclusiveGwDefaultSequenceFlow'> " +
+            "  <process id='exclusiveGwDefaultSequenceFlow' isExecutable='true'> " +
             "    <startEvent id='theStart' /> " +
             "    <sequenceFlow id='flow1' sourceRef='theStart' targetRef='exclusiveGw' /> " +
             "    <exclusiveGateway id='exclusiveGw' name='Exclusive Gateway' /> " +

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ProcessDefinitionRestServiceInteractionTest.java
Patch:
@@ -864,7 +864,7 @@ public void testSimpleProcessInstantiation() {
   public void testSimpleProcessInstantiationWithVariables() {
     //given request with parameter withVariables to get the variables in return
     Map<String, Object> json = new HashMap<String, Object>();
-    json.put("withVariables", true);
+    json.put("withVariablesInReturn", true);
 
     given().pathParam("id", MockProvider.EXAMPLE_PROCESS_DEFINITION_ID)
             .contentType(POST_JSON_CONTENT_TYPE).body(json)
@@ -907,7 +907,7 @@ public void testProcessInstantiationWithParametersAndVariablesInReturn() {
 
     Map<String, Object> json = new HashMap<String, Object>();
     json.put("variables", parameters);
-    json.put("withVariables", true);
+    json.put("withVariablesInReturn", true);
 
     //when request then return process instance with variables
     given().pathParam("id", MockProvider.EXAMPLE_PROCESS_DEFINITION_ID)
@@ -1120,7 +1120,7 @@ public void testProcessInstantiationAtActivitiesByIdWithVariablesInReturn() {
           .getJson());
 
     json.put("startInstructions", startInstructions);
-    json.put("withVariables", true);
+    json.put("withVariablesInReturn", true);
 
     //request which should contain variables of process instance
     given().pathParam("id", EXAMPLE_PROCESS_DEFINITION_ID)

File: engine/src/main/java/org/camunda/bpm/engine/TaskService.java
Patch:
@@ -939,8 +939,6 @@ public interface TaskService {
   /** The list of subtasks for this parent task */
   List<Task> getSubTasks(String parentTaskId);
 
-  /**
-   * Instantiate a task report.
-   */
+  /** Instantiate a task report */
   TaskReport createTaskReport();
 }

File: engine/src/main/java/org/camunda/bpm/engine/task/TaskCountByCandidateGroupResult.java
Patch:
@@ -19,8 +19,10 @@
  */
 public interface TaskCountByCandidateGroupResult {
 
+  /** The number of tasks for a specific group */
   int getTaskCount();
 
+  /** The group which as the number of tasks */
   String getGroupName();
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/task/TaskReport.java
Patch:
@@ -21,6 +21,7 @@
  */
 public interface TaskReport {
 
+  /** Select a list with the number of tasks per group */
   List<TaskCountByCandidateGroupResult> taskCountByCandidateGroup();
 
 }

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/impl/BpmnModelConstants.java
Patch:
@@ -457,6 +457,8 @@ public final class BpmnModelConstants {
   public static final String CAMUNDA_ATTRIBUTE_TYPE = "type";
   public static final String CAMUNDA_ATTRIBUTE_VALUE = "value";
   public static final String CAMUNDA_ATTRIBUTE_VARIABLE = "variable";
+  public static final String CAMUNDA_ATTRIBUTE_VARIABLE_MAPPING_CLASS = "variableMappingClass";
+  public static final String CAMUNDA_ATTRIBUTE_VARIABLE_MAPPING_DELEGATE_EXPRESSION = "variableMappingDelegateExpression";
   public static final String CAMUNDA_ATTRIBUTE_VARIABLES = "variables";
   public static final String CAMUNDA_ATTRIBUTE_WRITEABLE = "writeable";
   public static final String CAMUNDA_ATTRIBUTE_CASE_REF = "caseRef";

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/instance/CallActivityTest.java
Patch:
@@ -46,8 +46,8 @@ public Collection<AttributeAssumption> getAttributesAssumptions() {
       new AttributeAssumption(CAMUNDA_NS, "caseBinding"),
       new AttributeAssumption(CAMUNDA_NS, "caseVersion"),
       new AttributeAssumption(CAMUNDA_NS, "caseTenantId"),
-      new AttributeAssumption(CAMUNDA_NS, "class"),
-      new AttributeAssumption(CAMUNDA_NS, "delegateExpression")
+      new AttributeAssumption(CAMUNDA_NS, "variableMappingClass"),
+      new AttributeAssumption(CAMUNDA_NS, "variableMappingDelegateExpression")
     );
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -424,9 +424,10 @@ public void start(Map<String, Object> variables) {
     super.start(variables);
   }
 
+  @Override
   public void startWithoutExecuting(Map<String, Object> variables) {
     provideTenantId(variables);
-    super.startWithoutExecuting();
+    super.startWithoutExecuting(variables);
   }
 
   protected void provideTenantId(Map<String, Object> variables) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/PvmExecutionImpl.java
Patch:
@@ -232,12 +232,14 @@ public void start(Map<String, Object> variables) {
 
   /**
    * perform starting behavior but don't execute the initial activity
+   * @param variables the variables which are used for the start
    */
-  public void startWithoutExecuting() {
+  public void startWithoutExecuting(Map<String, Object> variables) {
     initialize();
     initializeTimerDeclarations();
     fireHistoricProcessStartEvent();
     performOperation(PvmAtomicOperation.FIRE_PROCESS_START);
+    setVariables(variables);
   }
 
   public abstract void fireHistoricProcessStartEvent();

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/DefaultDmnDecisionContext.java
Patch:
@@ -84,7 +84,7 @@ public DefaultDmnDecisionContext(DefaultDmnEngineConfiguration configuration) {
   public DmnDecisionTableResult evaluateDecisionTable(DmnDecision decision, VariableContext variableContext) {
     DmnDecisionTableEvaluationEventImpl evaluationResult = new DmnDecisionTableEvaluationEventImpl();
     evaluationResult.setDecisionTable(decision);
-    DmnDecisionTableImpl decisionTable = ((DmnDecisionImpl)decision).getDecisionTable();
+    DmnDecisionTableImpl decisionTable = ((DmnDecisionImpl)decision).getRelatedDecisionTable();
     evaluationResult.setExecutedDecisionElements(calculateExecutedDecisionElements(decisionTable));
 
     int inputSize = decisionTable.getInputs().size();

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/DmnDecisionImpl.java
Patch:
@@ -29,11 +29,11 @@ public void setName(String name) {
     this.name = name;
   }
 
-  public void setDecisionTable(DmnDecisionTableImpl decisionTable) {
+  public void setRelatedDecisionTable(DmnDecisionTableImpl decisionTable) {
     this.decisionTable = decisionTable;   
   }
 
-  public DmnDecisionTableImpl getDecisionTable() {
+  public DmnDecisionTableImpl getRelatedDecisionTable() {
     return decisionTable;
   }
 

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/delegate/DmnDecisionTableEvaluationEventImpl.java
Patch:
@@ -86,7 +86,7 @@ public String toString() {
     return "DmnDecisionTableEvaluationEventImpl{" +
       " key="+ dmnDecision.getKey() +
       ", name="+ dmnDecision.getName() + 
-      ", decisionTable=" + dmnDecision.getDecisionTable() +
+      ", decisionTable=" + dmnDecision.getRelatedDecisionTable() +
       ", inputs=" + inputs +
       ", matchingRules=" + matchingRules +
       ", collectResultName='" + collectResultName + '\'' +

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/transform/DefaultDmnTransform.java
Patch:
@@ -165,7 +165,7 @@ protected DmnDecision transformDecision(Decision decision, List<String> decision
 
     if (expression instanceof DecisionTable) {
       DmnDecisionTableImpl dmnDecisionTable = transformDecisionTable((DecisionTable) expression);
-      dmnDecision.setDecisionTable(dmnDecisionTable);
+      dmnDecision.setRelatedDecisionTable(dmnDecisionTable);
     } else {
       LOG.decisionTypeNotSupported(expression, decision);
       return null;

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/delegate/DmnDecisionTableEvaluationListenerTest.java
Patch:
@@ -264,7 +264,7 @@ public void setDecisionTableHitPolicy(HitPolicy hitPolicy, BuiltinAggregator agg
     DmnHitPolicyHandler handler = hitPolicyHandlerRegistry.getHandler(hitPolicy, aggregator);
     assertThat(handler).isNotNull();
     DmnDecisionImpl DecisionEntity = (DmnDecisionImpl) this.decision;
-    DecisionEntity.getDecisionTable().setHitPolicyHandler(handler);
+    DecisionEntity.getRelatedDecisionTable().setHitPolicyHandler(handler);
   }
 
   public DmnDecisionTableResult evaluateDecisionTable(Object input1, Object input2, Object input3, Object output1) {

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/el/ExpressionLanguageTest.java
Patch:
@@ -72,7 +72,7 @@ protected DmnScriptEngineResolver createScriptEngineResolver() {
   @DecisionResource(resource = GROOVY_DMN)
   public void testGlobalExpressionLanguage() {
     DmnDecisionImpl decisionEntity  = (DmnDecisionImpl) decision;
-    DmnDecisionTableImpl decisionTable = decisionEntity.getDecisionTable();
+    DmnDecisionTableImpl decisionTable = decisionEntity.getRelatedDecisionTable();
     for (DmnDecisionTableInputImpl dmnInput : decisionTable.getInputs()) {
       assertThat(dmnInput.getExpression().getExpressionLanguage()).isEqualTo("groovy");
     }

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/transform/DmnTransformTest.java
Patch:
@@ -42,7 +42,7 @@ public class DmnTransformTest extends DmnEngineTest {
   public static final String TRANSFORM_DMN = "org/camunda/bpm/dmn/engine/transform/DmnTransformTest.dmn";
   public static final String REQUIRED_DECISIONS_DMN = "org/camunda/bpm/dmn/engine/api/RequiredDecision.dmn";
   public static final String MULTIPLE_REQUIRED_DECISIONS_DMN = "org/camunda/bpm/dmn/engine/api/MultipleRequiredDecisions.dmn";
-  public static final String MULTI_LEVEL_MULTIPLE_REQUIRED_DECISIONS_DMN = "org/camunda/bpm/dmn/engine/api/MultiLevelMultipleRequiredDecisions.dmn";
+  public static final String MULTI_LEVEL_MULTIPLE_REQUIRED_DECISIONS_DMN = "org/camunda/bpm/dmn/engine/api/MultilevelMultipleRequiredDecisions.dmn";
   public static final String LOOP_REQUIRED_DECISIONS_DMN = "org/camunda/bpm/dmn/engine/api/LoopInRequiredDecision.dmn";
   public static final String SELF_REQUIRED_DECISIONS_DMN = "org/camunda/bpm/dmn/engine/api/SelfRequiredDecision.dmn";
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/test/AbstractProcessEngineTestCase.java
Patch:
@@ -130,6 +130,7 @@ public void runBare() throws Throwable {
 
       // only fail if no test failure was recorded
       TestHelper.assertAndEnsureCleanDbAndCache(processEngine, exception == null);
+      TestHelper.resetIdGenerator(processEngineConfiguration);
       ClockUtil.reset();
 
       // Can't do this in the teardown, as the teardown will be called as part

File: engine/src/main/java/org/camunda/bpm/engine/test/ProcessEngineRule.java
Patch:
@@ -225,6 +225,7 @@ public void finished(Description description) {
       TestHelper.assertAndEnsureCleanDbAndCache(processEngine);
     }
 
+    TestHelper.resetIdGenerator(processEngineConfiguration);
     ClockUtil.reset();
 
 

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/error/ErrorEventSubProcessTest.java
Patch:
@@ -371,7 +371,7 @@ public void testShouldNotThrowErrorInLoopForMultipleSubProcess(){
       "org/camunda/bpm/engine/test/bpmn/event/error/ErrorEventSubProcessTest.testThrowErrorInLoopFromCallActivityToEventSubProcess.bpmn20.xml",
       "org/camunda/bpm/engine/test/bpmn/event/error/ThrowErrorToCallActivity.bpmn20.xml"
     })
-  public void testShouldNotThrowErrorInLoopFromCallActivityToEventSubProcess(){
+  public void FAILING_testShouldNotThrowErrorInLoopFromCallActivityToEventSubProcess(){
     runtimeService.startProcessInstanceByKey("Process_1"); 
     
     Task task = taskService.createTaskQuery().singleResult();
@@ -383,8 +383,8 @@ public void testShouldNotThrowErrorInLoopFromCallActivityToEventSubProcess(){
     taskService.complete(task.getId());
 
     // TODO: Loop exists when error thrown from call activity to event sub process
-    // as they both have different process definition
-    assertEquals("userTask", taskService.createTaskQuery().singleResult().getName());
+    // as they both have different process definition - CAM-6212
+    assertEquals("BoundaryEventTask", taskService.createTaskQuery().singleResult().getName());
   }
 
   

File: engine/src/main/java/org/camunda/bpm/engine/impl/MessageCorrelationBuilderImpl.java
Patch:
@@ -174,7 +174,7 @@ public void correlateAll() {
   }
 
   @Override
-  public List<? extends MessageCorrelationResult> correlateAllWithResult() {
+  public List<MessageCorrelationResult> correlateAllWithResult() {
     ensureProcessDefinitionIdNotSet();
     ensureProcessInstanceAndTenantIdNotSet();
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/runtime/CorrelationHandler.java
Patch:
@@ -34,7 +34,7 @@ public interface CorrelationHandler {
    * @return the matched correlation target or <code>null</code> if the message
    *         could not be correlated.
    */
-  public MessageCorrelationResultImpl correlateMessage(CommandContext commandContext, String messageName, CorrelationSet correlationSet);
+  public CorrelationHandlerResult correlateMessage(CommandContext commandContext, String messageName, CorrelationSet correlationSet);
 
   /**
    * Correlate the given message to all waiting executions and all process
@@ -46,7 +46,7 @@ public interface CorrelationHandler {
    * @return all matched correlation targets or an empty List if the message
    *         could not be correlated.
    */
-  public List<MessageCorrelationResultImpl> correlateMessages(CommandContext commandContext, String messageName, CorrelationSet correlationSet);
+  public List<CorrelationHandlerResult> correlateMessages(CommandContext commandContext, String messageName, CorrelationSet correlationSet);
 
   /**
    * Correlate the given message to process definitions with a message start
@@ -58,6 +58,6 @@ public interface CorrelationHandler {
    * @return the matched correlation targets or an empty list if the message
    *         could not be correlated.
    */
-  public List<MessageCorrelationResultImpl> correlateStartMessages(CommandContext commandContext, String messageName, CorrelationSet correlationSet);
+  public List<CorrelationHandlerResult> correlateStartMessages(CommandContext commandContext, String messageName, CorrelationSet correlationSet);
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/AbstractBpmnActivityBehavior.java
Patch:
@@ -269,7 +269,7 @@ public void visit(PvmScope scope) {
       List<ErrorEventDefinition> errorEventDefinitions = scope.getProperties().get(BpmnProperties.ERROR_EVENT_DEFINITIONS);
       for (ErrorEventDefinition errorEventDefinition : errorEventDefinitions) {
         PvmActivity activityHandler = scope.getProcessDefinition().findActivity(errorEventDefinition.getHandlerActivityId());
-        if ((!isReThrowingErrorEventSubprocess(errorEventDefinition, activityHandler)) && ((exception != null && errorEventDefinition.catchesException(exception)) 
+        if ((!isReThrowingErrorEventSubprocess(activityHandler)) && ((exception != null && errorEventDefinition.catchesException(exception)) 
           || (exception == null && errorEventDefinition.catchesError(errorCode)))) {
 
           errorHandlerActivity = activityHandler;
@@ -279,7 +279,7 @@ public void visit(PvmScope scope) {
       }
     }
 
-    protected boolean isReThrowingErrorEventSubprocess(ErrorEventDefinition errorEventDefinition, PvmActivity activityHandler) {
+    protected boolean isReThrowingErrorEventSubprocess(PvmActivity activityHandler) {
       return activityHandler.isSubProcessScope() && activityHandler.equals(currentActivity.getFlowScope());
     }
     

File: engine/src/main/java/org/camunda/bpm/engine/impl/MessageCorrelationBuilderImpl.java
Patch:
@@ -32,7 +32,7 @@
 
 /**
  * @author Daniel Meyer
- * @author Christopher
+ * @author Christopher Zell
  *
  */
 public class MessageCorrelationBuilderImpl implements MessageCorrelationBuilder {

File: engine/src/main/java/org/camunda/bpm/engine/impl/runtime/MessageCorrelationResultImpl.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.ProcessDefinitionEntity;
-import org.camunda.bpm.engine.impl.pvm.PvmProcessDefinition;
+import org.camunda.bpm.engine.repository.ProcessDefinition;
 import org.camunda.bpm.engine.runtime.Execution;
 import org.camunda.bpm.engine.runtime.MessageCorrelationResult;
 
@@ -90,7 +90,7 @@ public Execution getExecution() {
   }
 
   @Override
-  public PvmProcessDefinition getProcessDefinition() {
+  public ProcessDefinition getProcessDefinition() {
     return processDefinitionEntity;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/runtime/MessageCorrelationResult.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.camunda.bpm.engine.runtime;
 
-import org.camunda.bpm.engine.impl.pvm.PvmProcessDefinition;
+import org.camunda.bpm.engine.repository.ProcessDefinition;
 
 /**
  * <p>The result of a message correlation. A message may be correlated to either
@@ -40,7 +40,7 @@ public interface MessageCorrelationResult {
    *
    * @return the process definition
    */
-  PvmProcessDefinition getProcessDefinition();
+  ProcessDefinition getProcessDefinition();
 
   /**
    * Returns the activity id of the start event on which the message was correlated to.

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/AsyncContinuationJobHandler.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.Map;
 
 import org.camunda.bpm.engine.ProcessEngineException;
+import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.jobexecutor.AsyncContinuationJobHandler.AsyncContinuationConfiguration;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
@@ -72,7 +73,7 @@ public void execute(AsyncContinuationConfiguration configuration, ExecutionEntit
       execution.setTransition(transition);
     }
 
-    commandContext
+    Context.getCommandInvocationContext()
       .performOperation(atomicOperation, execution);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -586,7 +586,7 @@ public void performOperation(AtomicOperation executionOperation) {
     }
 
     Context
-      .getCommandContext()
+      .getCommandInvocationContext()
       .performOperation(executionOperation, this, async);
   }
 
@@ -596,7 +596,7 @@ public void performOperationSync(AtomicOperation executionOperation) {
       ensureNotSuspended();
     }
 
-    Context.getCommandContext().performOperation(executionOperation, this);
+    Context.getCommandInvocationContext().performOperation(executionOperation, this);
   }
 
   protected void ensureNotSuspended() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/AbstractBpmnActivityBehavior.java
Patch:
@@ -85,7 +85,7 @@ protected void propagateExceptionAsError(Exception exception, ActivityExecution
       throw exception;
     }
     else {
-      propagateError(null, null,exception, execution);
+      propagateError(null, exception.getMessage(),exception, execution);
     }
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/NestedExecutionAPIInvocationTest.java
Patch:
@@ -49,7 +49,7 @@ public class NestedExecutionAPIInvocationTest {
         .camundaClass(NestedProcessStartDelegate.class.getName())
       .endEvent()
       .done();
-
+  
   @Test
   @Ignore("CAM-5618")
   public void testWaitStateIsReachedOnNestedInstantiation() {

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/error/BoundaryErrorEventTest.java
Patch:
@@ -856,7 +856,6 @@ public void testCatchErrorOnSubprocessSetsErrorVariables(){
     Object errorCode = "error1";
 
     checkErrorVariable(variableName, errorCode);
-    checkErrorVariable("errorMessageVariable", "Exception");
   }
 
   @Deployment(resources={
@@ -871,7 +870,6 @@ public void testCatchErrorThrownByCallActivityOnSubprocessSetsErrorVariables(){
     Object errorCode = "error";
 
     checkErrorVariable(variableName, errorCode);
-    checkErrorVariable("errorMessageVariable", "Exception");
   }
 
   @Deployment(resources={
@@ -885,7 +883,6 @@ public void testCatchErrorThrownByMultiInstanceSubProcessSetsErrorVariables(){
     Object errorCode = "error";
 
     checkErrorVariable(variableName, errorCode);
-    checkErrorVariable("errorMessageVariable", "Exception");
   }
 
   private void checkErrorVariable(String variableName, Object expectedValue){

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/impl/BpmnModelConstants.java
Patch:
@@ -321,7 +321,6 @@ public final class BpmnModelConstants {
   public static final String BPMN_ATTRIBUTE_ITEM_REF = "itemRef";
   public static final String BPMN_ATTRIBUTE_ITEM_SUBJECT_REF = "itemSubjectRef";
   public static final String BPMN_ATTRIBUTE_ERROR_CODE = "errorCode";
-  public static final String BPMN_ATTRIBUTE_ERROR_MESSAGE = "errorMessage";
   public static final String BPMN_ATTRIBUTE_LANGUAGE = "language";
   public static final String BPMN_ATTRIBUTE_EVALUATES_TO_TYPE_REF = "evaluatesToTypeRef";
   public static final String BPMN_ATTRIBUTE_PARALLEL_MULTIPLE = "parallelMultiple";

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/instance/ErrorTest.java
Patch:
@@ -33,7 +33,6 @@ public Collection<AttributeAssumption> getAttributesAssumptions() {
     return Arrays.asList(
       new AttributeAssumption("name"),
       new AttributeAssumption("errorCode"),
-      new AttributeAssumption("errorMessage"),
       new AttributeAssumption("structureRef")
     );
   }

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/impl/BpmnModelConstants.java
Patch:
@@ -321,6 +321,7 @@ public final class BpmnModelConstants {
   public static final String BPMN_ATTRIBUTE_ITEM_REF = "itemRef";
   public static final String BPMN_ATTRIBUTE_ITEM_SUBJECT_REF = "itemSubjectRef";
   public static final String BPMN_ATTRIBUTE_ERROR_CODE = "errorCode";
+  public static final String BPMN_ATTRIBUTE_ERROR_MESSAGE = "errorMessage";
   public static final String BPMN_ATTRIBUTE_LANGUAGE = "language";
   public static final String BPMN_ATTRIBUTE_EVALUATES_TO_TYPE_REF = "evaluatesToTypeRef";
   public static final String BPMN_ATTRIBUTE_PARALLEL_MULTIPLE = "parallelMultiple";
@@ -429,6 +430,7 @@ public final class BpmnModelConstants {
   public static final String CAMUNDA_ATTRIBUTE_ELEMENT_VARIABLE = "elementVariable";
   public static final String CAMUNDA_ATTRIBUTE_EVENT = "event";
   public static final String CAMUNDA_ATTRIBUTE_ERROR_CODE_VARIABLE = "errorCodeVariable";
+  public static final String CAMUNDA_ATTRIBUTE_ERROR_MESSAGE_VARIABLE = "errorMessageVariable";
   public static final String CAMUNDA_ATTRIBUTE_EXCLUSIVE = "exclusive";
   public static final String CAMUNDA_ATTRIBUTE_EXPRESSION = "expression";
   public static final String CAMUNDA_ATTRIBUTE_FORM_HANDLER_CLASS = "formHandlerClass";

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/instance/ErrorEventDefinitionTest.java
Patch:
@@ -14,7 +14,8 @@ public class ErrorEventDefinitionTest extends AbstractEventDefinitionTest {
   public Collection<AttributeAssumption> getAttributesAssumptions() {
     return Arrays.asList(
       new AttributeAssumption("errorRef"),
-      new AttributeAssumption(CAMUNDA_NS, "errorCodeVariable")
+      new AttributeAssumption(CAMUNDA_NS, "errorCodeVariable"),
+      new AttributeAssumption(CAMUNDA_NS, "errorMessageVariable")
     );
   }
 

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/instance/ErrorTest.java
Patch:
@@ -33,6 +33,7 @@ public Collection<AttributeAssumption> getAttributesAssumptions() {
     return Arrays.asList(
       new AttributeAssumption("name"),
       new AttributeAssumption("errorCode"),
+      new AttributeAssumption("errorMessage"),
       new AttributeAssumption("structureRef")
     );
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/AbstractQuery.java
Patch:
@@ -214,6 +214,7 @@ public U executeSingleResult(CommandContext commandContext) {
   }
 
   @Deprecated
+  @Override
   public String getOrderBy() {
     if(orderBy == null) {
       return super.getOrderBy();

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/MigratingUserTaskInstance.java
Patch:
@@ -75,6 +75,7 @@ public void attachState(MigratingTransitionInstance targetTransitionInstance) {
   @Override
   public void migrateState() {
     userTask.setProcessDefinitionId(migratingActivityInstance.getTargetScope().getProcessDefinition().getId());
+    userTask.setTaskDefinitionKey(migratingActivityInstance.getTargetScope().getId());
 
     migrateHistory();
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationAddSubprocessTest.java
Patch:
@@ -451,7 +451,7 @@ public void testChangeActivityId() {
             .activity("userTask2", testHelper.getSingleActivityInstanceBeforeMigration("userTask1").getId())
         .done());
 
-    Task migratedTask = testHelper.snapshotAfterMigration.getTaskForKey("userTask1");
+    Task migratedTask = testHelper.snapshotAfterMigration.getTaskForKey("userTask2");
     Assert.assertNotNull(migratedTask);
     assertEquals(targetProcessDefinition.getId(), migratedTask.getProcessDefinitionId());
 
@@ -493,7 +493,7 @@ public void testChangeScopeActivityId() {
             .activity("userTask2", testHelper.getSingleActivityInstanceBeforeMigration("userTask1").getId())
         .done());
 
-    Task migratedTask = testHelper.snapshotAfterMigration.getTaskForKey("userTask1");
+    Task migratedTask = testHelper.snapshotAfterMigration.getTaskForKey("userTask2");
     Assert.assertNotNull(migratedTask);
     assertEquals(targetProcessDefinition.getId(), migratedTask.getProcessDefinitionId());
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationCompensationTest.java
Patch:
@@ -299,7 +299,7 @@ public void testCanTriggerAddedCompensationForActiveInstances() {
     ProcessInstance processInstance = testHelper.createProcessInstanceAndMigrate(migrationPlan);
 
     // then
-    testHelper.completeTask("userTask");
+    testHelper.completeTask("userTask1");
     Assert.assertEquals(1, rule.getRuntimeService().createEventSubscriptionQuery().count());
 
     testHelper.completeTask("userTask2");

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationEventSubProcessTest.java
Patch:
@@ -362,7 +362,7 @@ public void testMigrateActiveEventSubProcessToEmbeddedSubProcess() {
     Assert.assertEquals(0, testHelper.snapshotAfterMigration.getEventSubscriptions().size());
 
     // and it is possible to complete the process instance
-    testHelper.completeTask("eventSubProcessTask"); // the task definition key is not migrated, there is still eventSubProcessTask
+    testHelper.completeTask("userTask");
     testHelper.assertProcessEnded(processInstance.getId());
   }
 
@@ -400,7 +400,7 @@ public void testMigrateActiveEmbeddedSubProcessToEventSubProcess() {
     testHelper.assertEventSubscriptionCreated("eventSubProcessStart", EventSubProcessModels.MESSAGE_NAME);
 
     // and it is possible to complete the process instance
-    testHelper.completeTask("userTask"); // the task definition key is not migrated, there is still userTask
+    testHelper.completeTask("eventSubProcessTask");
     testHelper.assertProcessEnded(processInstance.getId());
   }
 
@@ -569,7 +569,7 @@ public void testMigrateTaskAddEventSubProcess() {
     testHelper.assertEventSubscriptionCreated("eventSubProcessStart", EventSubProcessModels.MESSAGE_NAME);
 
     // and it is possible to complete the process instance
-    testHelper.completeTask("userTask"); // the task definition key is not migrated, there is still userTask
+    testHelper.completeTask("eventSubProcessTask");
     testHelper.assertProcessEnded(processInstance.getId());
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationTransactionTest.java
Patch:
@@ -274,7 +274,7 @@ public void testMigrateEventSubProcessToTransaction() {
         testHelper.getSingleActivityInstanceBeforeMigration("eventSubProcess").getId(),
         testHelper.getSingleActivityInstanceAfterMigration("transaction").getId());
 
-    testHelper.completeTask("eventSubProcessTask");
+    testHelper.completeTask("userTask");
     testHelper.assertProcessEnded(processInstance.getId());
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/history/MigrationHistoricTaskInstanceTest.java
Patch:
@@ -103,6 +103,7 @@ public void testMigrateHistoryUserTaskInstance() {
     HistoricTaskInstance instance = targetHistoryTaskInstanceQuery.singleResult();
     assertEquals(targetProcessDefinition.getKey(), instance.getProcessDefinitionKey());
     assertEquals(targetProcessDefinition.getId(), instance.getProcessDefinitionId());
+    assertEquals("userTask2", instance.getTaskDefinitionKey());
     assertEquals(activityInstance.getActivityInstances("userTask")[0].getId(), instance.getActivityInstanceId());
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -181,6 +181,8 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement(POSTGRES, "selectCommentByTaskIdAndCommentId", "selectCommentByTaskIdAndCommentId_postgres");
     addDatabaseSpecificStatement(POSTGRES, "selectEventsByTaskId", "selectEventsByTaskId_postgres");
     addDatabaseSpecificStatement(POSTGRES, "selectHistoricVariableInstanceByQueryCriteria", "selectHistoricVariableInstanceByQueryCriteria_postgres");
+    addDatabaseSpecificStatement(POSTGRES, "selectFilterByQueryCriteria", "selectFilterByQueryCriteria_postgres");
+    addDatabaseSpecificStatement(POSTGRES, "selectFilter", "selectFilter_postgres");
 
     constants = new HashMap<String, String>();
     constants.put("constant.event", "'event'");

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -1009,7 +1009,7 @@ public static void initSqlSessionFactoryProperties(Properties properties, String
       properties.put("limitAfter" , DbSqlSessionFactory.databaseSpecificLimitAfterStatements.get(databaseType));
       properties.put("innerLimitAfter" , DbSqlSessionFactory.databaseSpecificInnerLimitAfterStatements.get(databaseType));
       properties.put("limitBetween" , DbSqlSessionFactory.databaseSpecificLimitBetweenStatements.get(databaseType));
-      properties.put("limitBetweenClob" , DbSqlSessionFactory.databaseSpecificLimitBetweenClobStatements.get(databaseType));
+      properties.put("limitBetweenFilter" , DbSqlSessionFactory.databaseSpecificLimitBetweenFilterStatements.get(databaseType));
       properties.put("orderBy" , DbSqlSessionFactory.databaseSpecificOrderByStatements.get(databaseType));
       properties.put("limitBeforeNativeQuery" , DbSqlSessionFactory.databaseSpecificLimitBeforeNativeQueryStatements.get(databaseType));
       properties.put("distinct" , DbSqlSessionFactory.databaseSpecificDistinct.get(databaseType));

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/MigrateProcessInstanceCmd.java
Patch:
@@ -230,7 +230,7 @@ protected void validateInstructions(CommandContext commandContext, MigratingProc
     }
 
     for (MigratingEventScopeInstance migratingEventScopeInstance : migratingProcessInstance.getMigratingEventScopeInstances()) {
-      MigratingActivityInstance ancestorInstance = migratingEventScopeInstance.getClosestAncestorAcitivityInstance();
+      MigratingActivityInstance ancestorInstance = migratingEventScopeInstance.getClosestAncestorActivityInstance();
 
       validateEventScopeInstance(
           migratingEventScopeInstance,
@@ -241,7 +241,7 @@ protected void validateInstructions(CommandContext commandContext, MigratingProc
 
     for (MigratingCompensationEventSubscriptionInstance migratingEventSubscriptionInstance
         : migratingProcessInstance.getMigratingCompensationSubscriptionInstances()) {
-      MigratingActivityInstance ancestorInstance = migratingEventSubscriptionInstance.getClosestAncestorAcitivityInstance();
+      MigratingActivityInstance ancestorInstance = migratingEventSubscriptionInstance.getClosestAncestorActivityInstance();
 
       validateCompensateSubscriptionInstance(
           migratingEventSubscriptionInstance,

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/MigratingProcessElementInstance.java
Patch:
@@ -61,7 +61,7 @@ public boolean migratesTo(ScopeImpl other) {
 
   public abstract ExecutionEntity resolveRepresentativeExecution();
 
-  public MigratingActivityInstance getClosestAncestorAcitivityInstance() {
+  public MigratingActivityInstance getClosestAncestorActivityInstance() {
     MigratingScopeInstance ancestorInstance = parentInstance;
 
     while (!(ancestorInstance instanceof MigratingActivityInstance)) {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/batch/BatchMigrationTest.java
Patch:
@@ -353,13 +353,13 @@ public void testMigrationJobsExecution() {
   }
 
   @Test
-  public void testMigrationJobsExecutionByJobExecutorWithAuthorizationEnabled() {
+  public void testMigrationJobsExecutionByJobExecutorWithAuthorizationEnabledAndTenant() {
     ProcessEngineConfigurationImpl processEngineConfiguration = engineRule.getProcessEngineConfiguration();
 
     processEngineConfiguration.setAuthorizationEnabled(true);
 
     try {
-      Batch batch = helper.migrateProcessInstancesAsync(10);
+      Batch batch = helper.migrateProcessInstancesAsyncForTenant(10, "someTenantId");
       helper.executeSeedJob(batch);
 
       testRule.waitForJobExecutorToProcessAllJobs();

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/validation/instruction/SameBehaviorInstructionValidator.java
Patch:
@@ -63,7 +63,7 @@ public void validate(ValidatingMigrationInstruction instruction, ValidatingMigra
     Class<?> targetBehaviorClass = targetActivity.getActivityBehavior().getClass();
 
     if (!sameBehavior(sourceBehaviorClass, targetBehaviorClass)) {
-      report.addFailure("Activities have incompatible behavior for migration "
+      report.addFailure("Activities have incompatible type for migration "
           + "(" + sourceBehaviorClass.getSimpleName() + " is not compatible with " + targetBehaviorClass.getSimpleName() + ")");
     }
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationExternalTaskTest.java
Patch:
@@ -274,7 +274,7 @@ public void cannotMigrateFromExternalToClassDelegateServiceTask() {
       // then
       assertThat(e.getValidationReport())
       .hasInstructionFailures("externalTask",
-        "Activities have incompatible behavior for migration (ExternalTaskActivityBehavior is not compatible with"
+        "Activities have incompatible type for migration (ExternalTaskActivityBehavior is not compatible with"
         + " ClassDelegateActivityBehavior)"
       );
     }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationGatewayTest.java
Patch:
@@ -251,7 +251,7 @@ public void testCannotMigrateParallelToInclusiveGateway() {
       // then
       assertThat(e.getValidationReport())
       .hasInstructionFailures("join",
-        "Activities have incompatible behavior for migration "
+        "Activities have incompatible type for migration "
         + "(ParallelGatewayActivityBehavior is not compatible with InclusiveGatewayActivityBehavior)"
       );
     }
@@ -273,7 +273,7 @@ public void testCannotMigrateInclusiveToParallelGateway() {
       // then
       assertThat(e.getValidationReport())
       .hasInstructionFailures("join",
-        "Activities have incompatible behavior for migration "
+        "Activities have incompatible type for migration "
         + "(InclusiveGatewayActivityBehavior is not compatible with ParallelGatewayActivityBehavior)"
       );
     }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationMultiInstanceTest.java
Patch:
@@ -406,7 +406,7 @@ public void testMigrateParallelToSequential() {
     catch (MigrationPlanValidationException e) {
       assertThat(e.getValidationReport())
         .hasInstructionFailures(miBodyOf("userTask"),
-          "Activities have incompatible behavior for migration (ParallelMultiInstanceActivityBehavior is not "
+          "Activities have incompatible type for migration (ParallelMultiInstanceActivityBehavior is not "
           + "compatible with SequentialMultiInstanceActivityBehavior)"
         );
     }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationPlanCreationTest.java
Patch:
@@ -239,7 +239,7 @@ public void testMigrateToUnsupportedActivityType() {
     } catch (MigrationPlanValidationException e) {
       assertThat(e.getValidationReport())
         .hasInstructionFailures("userTask",
-          "Activities have incompatible behavior for migration (UserTaskActivityBehavior is not compatible with ReceiveTaskActivityBehavior)"
+          "Activities have incompatible type for migration (UserTaskActivityBehavior is not compatible with ReceiveTaskActivityBehavior)"
         );
     }
   }
@@ -259,7 +259,7 @@ public void testNotMigrateActivitiesOfDifferentType() {
       fail("Should not succeed");
     } catch (MigrationPlanValidationException e) {
       assertThat(e.getValidationReport())
-        .hasInstructionFailures("userTask", "Activities have incompatible behavior for migration (UserTaskActivityBehavior is not "
+        .hasInstructionFailures("userTask", "Activities have incompatible type for migration (UserTaskActivityBehavior is not "
             + "compatible with SubProcessActivityBehavior)");
     }
   }

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/MigrationRestServiceInteractionTest.java
Patch:
@@ -1433,7 +1433,7 @@ protected void verifyMigrationExecutionBuilderInteraction(InOrder inOrder, Map<S
     if (processInstanceQuery != null) {
       verifyMigrationPlanExecutionProcessInstanceQuery(inOrder);
     }
-    Boolean skipCustomListeners = (Boolean) migrationExecution.getOrDefault(MigrationExecutionDtoBuilder.PROP_SKIP_CUSTOM_LISTENERS, false);
+    Boolean skipCustomListeners = (Boolean) migrationExecution.get(MigrationExecutionDtoBuilder.PROP_SKIP_CUSTOM_LISTENERS);
     if (Boolean.TRUE.equals(skipCustomListeners)) {
       inOrder.verify(migrationPlanExecutionBuilderMock).skipCustomListeners();
     }

File: examples/invoice/src/main/java/org/camunda/bpm/example/invoice/InvoiceProcessApplication.java
Patch:
@@ -163,7 +163,7 @@ private void startProcessInstances(ProcessEngine processEngine, String processDe
       processEngine.getIdentityService().setAuthenticatedUserId("mary");
       Task task = processEngine.getTaskService().createTaskQuery().processInstanceId(pi.getId()).singleResult();
       processEngine.getTaskService().createComment(null, pi.getId(), "I cannot approve this invoice: the amount is missing.\n\n Could you please provide the amount?");
-      processEngine.getTaskService().complete(task.getId(), createVariables().putValue("approved", "false"));
+      processEngine.getTaskService().complete(task.getId(), createVariables().putValue("approved", false));
     }
     finally{
       ClockUtil.reset();

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/validation/activity/SupportedActivityValidator.java
Patch:
@@ -68,7 +68,7 @@ public boolean valid(ActivityImpl activity) {
     return activity != null && (isSupportedActivity(activity) || isAsync(activity));
   }
 
-  protected boolean isSupportedActivity(ActivityImpl activity) {
+  public boolean isSupportedActivity(ActivityImpl activity) {
     return SUPPORTED_ACTIVITY_BEHAVIORS.contains(activity.getActivityBehavior().getClass());
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/validation/instance/SupportedActivityInstanceValidator.java
Patch:
@@ -33,7 +33,7 @@ public void validate(MigratingActivityInstance migratingInstance, MigratingProce
     if (sourceScope != sourceScope.getProcessDefinition()) {
       ActivityImpl sourceActivity = (ActivityImpl) migratingInstance.getSourceScope();
 
-      if (!SupportedActivityValidator.INSTANCE.valid(sourceActivity)) {
+      if (!SupportedActivityValidator.INSTANCE.isSupportedActivity(sourceActivity)) {
         instanceReport.addFailure("The type of the source activity is not supported for activity instance migration");
       }
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/validation/instruction/AdditionalFlowScopeInstructionValidator.java
Patch:
@@ -24,7 +24,7 @@ public void validate(ValidatingMigrationInstruction instruction, ValidatingMigra
     if (ancestorScopeInstruction != null && targetScope != null && targetScope != targetScope.getProcessDefinition()) {
       ScopeImpl parentInstanceTargetScope = ancestorScopeInstruction.getTargetActivity();
       if (parentInstanceTargetScope != null && !parentInstanceTargetScope.isAncestorFlowScopeOf(targetScope)) {
-        report.addFailure("The closest migrated ancestor '" + ancestorScopeInstruction.getSourceActivity().getId() + "' is migrated to scope '" +
+        report.addFailure("The closest mapped ancestor '" + ancestorScopeInstruction.getSourceActivity().getId() + "' is mapped to scope '" +
           parentInstanceTargetScope.getId() + "' which is not an ancestor of target scope '" + targetScope.getId() + "'");
       }
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/validation/instruction/CannotAddMultiInstanceBodyValidator.java
Patch:
@@ -45,7 +45,7 @@ public boolean isFulfilled(ScopeImpl element) {
 
     if (miBodyCollector.firstMiBody != null) {
       report.addFailure("Target activity '" + targetActivity.getId() + "' is a descendant of multi-instance body '" +
-        miBodyCollector.firstMiBody.getId() + "' that is not migrated from the source process definition.");
+        miBodyCollector.firstMiBody.getId() + "' that is not mapped from the source process definition.");
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/validation/instruction/CannotAddMultiInstanceInnerActivityValidator.java
Patch:
@@ -32,7 +32,7 @@ public void validate(ValidatingMigrationInstruction instruction, ValidatingMigra
       ActivityImpl innerActivity = getInnerActivity(targetActivity);
 
       if (instructions.getInstructionsByTargetScope(innerActivity).isEmpty()) {
-        report.addFailure("Must migrate the inner activity of a multi-instance body when the body migrates");
+        report.addFailure("Must map the inner activity of a multi-instance body when the body is mapped");
       }
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/validation/instruction/CannotRemoveMultiInstanceInnerActivityValidator.java
Patch:
@@ -33,7 +33,7 @@ public void validate(ValidatingMigrationInstruction instruction, ValidatingMigra
       ActivityImpl innerActivity = getInnerActivity(sourceActivity);
 
       if (instructions.getInstructionsBySourceScope(innerActivity).isEmpty()) {
-        report.addFailure("Cannot remove the inner activity of a multi-instance body when the body migrates");
+        report.addFailure("Cannot remove the inner activity of a multi-instance body when the body is mapped");
       }
     }
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationAddMultiInstanceTest.java
Patch:
@@ -54,7 +54,7 @@ public void testAddMultiInstanceBody() {
       assertThat(e.getValidationReport())
         .hasInstructionFailures("userTask",
           "Target activity 'userTask' is a descendant of multi-instance body 'userTask#multiInstanceBody' "
-          + "that is not migrated from the source process definition"
+          + "that is not mapped from the source process definition"
         );
     }
   }
@@ -76,7 +76,7 @@ public void testRemoveAndAddMultiInstanceBody() {
       assertThat(e.getValidationReport())
         .hasInstructionFailures("userTask",
           "Target activity 'userTask' is a descendant of multi-instance body 'userTask#multiInstanceBody' "
-          + "that is not migrated from the source process definition"
+          + "that is not mapped from the source process definition"
         );
     }
   }
@@ -99,7 +99,7 @@ public void testAddMultiInstanceBodyWithDeeperNestedMapping() {
       assertThat(e.getValidationReport())
         .hasInstructionFailures("userTask",
           "Target activity 'userTask' is a descendant of multi-instance body 'subProcess#multiInstanceBody' "
-          + "that is not migrated from the source process definition"
+          + "that is not mapped from the source process definition"
         );
     }
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationCompensationTest.java
Patch:
@@ -885,7 +885,7 @@ public void testEventScopeHierarchyPreservation() {
       // then
       assertThat(e.getValidationReport())
       .hasInstructionFailures("innerSubProcess",
-        "The closest migrated ancestor 'outerSubProcess' is migrated to scope 'innerSubProcess' "
+        "The closest mapped ancestor 'outerSubProcess' is mapped to scope 'innerSubProcess' "
         + "which is not an ancestor of target scope 'outerSubProcess'"
       );
     }
@@ -916,7 +916,7 @@ public void testCompensationBoundaryHierarchyPreservation() {
       // then
       assertThat(e.getValidationReport())
       .hasInstructionFailures("compensationBoundary",
-        "The closest migrated ancestor 'subProcess' is migrated to scope 'addedSubProcess' "
+        "The closest mapped ancestor 'subProcess' is mapped to scope 'addedSubProcess' "
         + "which is not an ancestor of target scope 'compensationBoundary'"
       );
     }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationFlipScopesTest.java
Patch:
@@ -54,7 +54,7 @@ public void testCannotFlipAncestorScopes() {
     } catch (MigrationPlanValidationException e) {
       MigrationPlanValidationReportAssert.assertThat(e.getValidationReport())
         .hasInstructionFailures("innerSubProcess",
-          "The closest migrated ancestor 'outerSubProcess' is migrated to scope 'innerSubProcess' which is not an ancestor of target scope 'outerSubProcess'"
+          "The closest mapped ancestor 'outerSubProcess' is mapped to scope 'innerSubProcess' which is not an ancestor of target scope 'outerSubProcess'"
         );
     }
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationHorizontalScopeChangeTest.java
Patch:
@@ -57,10 +57,10 @@ public void testCannotMigrateHorizontallyBetweenScopes() {
     catch (MigrationPlanValidationException e) {
       MigrationPlanValidationReportAssert.assertThat(e.getValidationReport())
         .hasInstructionFailures("userTask1",
-          "The closest migrated ancestor 'subProcess1' is migrated to scope 'subProcess1' which is not an ancestor of target scope 'userTask2'"
+          "The closest mapped ancestor 'subProcess1' is mapped to scope 'subProcess1' which is not an ancestor of target scope 'userTask2'"
         )
         .hasInstructionFailures("userTask2",
-          "The closest migrated ancestor 'subProcess2' is migrated to scope 'subProcess2' which is not an ancestor of target scope 'userTask1'"
+          "The closest mapped ancestor 'subProcess2' is mapped to scope 'subProcess2' which is not an ancestor of target scope 'userTask1'"
         );
     }
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationPlanCreationTest.java
Patch:
@@ -328,7 +328,7 @@ public void testMapEqualActivitiesWithParallelMultiInstance() {
       assertThat(e.getValidationReport())
         .hasInstructionFailures("userTask",
           "Target activity 'userTask' is a descendant of multi-instance body 'userTask#multiInstanceBody' "
-        + "that is not migrated from the source process definition."
+        + "that is not mapped from the source process definition."
         );
     }
   }
@@ -560,7 +560,7 @@ public void testMapBoundaryToParentActivity() {
       assertThat(e.getValidationReport())
         .hasInstructionFailures("boundary",
           "The source activity's event scope (userTask) must be mapped to the target activity's event scope (subProcess)",
-          "The closest migrated ancestor 'subProcess' is migrated to scope 'subProcess' which is not an ancestor of target scope 'boundary'"
+          "The closest mapped ancestor 'subProcess' is mapped to scope 'subProcess' which is not an ancestor of target scope 'boundary'"
         );
     }
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationRemoveSubprocessTest.java
Patch:
@@ -377,7 +377,7 @@ public void testCannotRemoveScopeAndMoveToConcurrentActivity() {
     } catch (MigrationPlanValidationException e) {
       MigrationPlanValidationReportAssert.assertThat(e.getValidationReport())
         .hasInstructionFailures("userTask2",
-          "The closest migrated ancestor 'subProcess' is migrated to scope 'subProcess' which is not an ancestor of target scope 'userTask2'"
+          "The closest mapped ancestor 'subProcess' is mapped to scope 'subProcess' which is not an ancestor of target scope 'userTask2'"
         );
     }
   }
@@ -563,7 +563,7 @@ public void testCannotRemoveParentScopeAndMoveOutOfGrandParentScope() {
     } catch (MigrationPlanValidationException e) {
       MigrationPlanValidationReportAssert.assertThat(e.getValidationReport())
         .hasInstructionFailures("subProcess3",
-          "The closest migrated ancestor 'subProcess1' is migrated to scope 'subProcess1' which is not an ancestor of target scope 'subProcess1'"
+          "The closest mapped ancestor 'subProcess1' is mapped to scope 'subProcess1' which is not an ancestor of target scope 'subProcess1'"
         );
     }
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/ExecutionQueryTest.java
Patch:
@@ -1090,8 +1090,9 @@ public void testQueryBySignalSubscriptionNameBoundary() {
   }
 
   public void testNativeQuery() {
+    String tablePrefix = processEngineConfiguration.getDatabaseTablePrefix();
     // just test that the query will be constructed and executed, details are tested in the TaskQueryTest
-    assertEquals("ACT_RU_EXECUTION", managementService.getTableName(Execution.class));
+    assertEquals(tablePrefix + "ACT_RU_EXECUTION", managementService.getTableName(Execution.class));
 
     long executionCount = runtimeService.createExecutionQuery().count();
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/ProcessInstanceQueryTest.java
Patch:
@@ -1131,8 +1131,9 @@ public void testQueryBySuspeded() throws Exception {
   }
 
   public void testNativeQuery() {
+    String tablePrefix = processEngineConfiguration.getDatabaseTablePrefix();
     // just test that the query will be constructed and executed, details are tested in the TaskQueryTest
-    assertEquals("ACT_RU_EXECUTION", managementService.getTableName(ProcessInstance.class));
+    assertEquals(tablePrefix + "ACT_RU_EXECUTION", managementService.getTableName(ProcessInstance.class));
 
     long piCount = runtimeService.createProcessInstanceQuery().count();
 

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricCaseActivityInstanceTest.java
Patch:
@@ -595,9 +595,10 @@ public void testNativeQuery() {
 
     String instanceId = caseService.createCaseExecutionQuery().activityId("PI_HumanTask_1").list().get(0).getId();
 
+    String tablePrefix = processEngineConfiguration.getDatabaseTablePrefix();
     String tableName = managementService.getTableName(HistoricCaseActivityInstance.class);
 
-    assertEquals("ACT_HI_CASEACTINST", tableName);
+    assertEquals(tablePrefix + "ACT_HI_CASEACTINST", tableName);
     assertEquals(tableName, managementService.getTableName(HistoricCaseActivityInstanceEntity.class));
 
     assertEquals(4, historyService.createNativeHistoricCaseActivityInstanceQuery().sql("SELECT * FROM " + tableName).list().size());

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricCaseInstanceTest.java
Patch:
@@ -513,9 +513,10 @@ public void testNativeQuery() {
     createCaseInstance();
     createCaseInstance();
 
+    String tablePrefix = processEngineConfiguration.getDatabaseTablePrefix();
     String tableName = managementService.getTableName(HistoricCaseInstance.class);
 
-    assertEquals("ACT_HI_CASEINST", tableName);
+    assertEquals(tablePrefix + "ACT_HI_CASEINST", tableName);
     assertEquals(tableName, managementService.getTableName(HistoricCaseInstanceEntity.class));
 
     assertEquals(4, historyService.createNativeHistoricCaseInstanceQuery().sql("SELECT * FROM " + tableName).list().size());

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/JobAcquisitionSuspensionStateTest.java
Patch:
@@ -58,12 +58,14 @@ public Void execute(CommandContext commandContext) {
         Statement statement = null;
         ResultSet rs = null;
 
+        String tablePrefix = commandContext.getProcessEngineConfiguration().getDatabaseTablePrefix();
+
         try {
           SqlSession sqlSession = commandContext.getDbSqlSession().getSqlSession();
           connection = sqlSession.getConnection();
           statement = connection
               .createStatement();
-          String insertStatementString = "INSERT INTO ACT_RU_JOB(ID_, REV_, RETRIES_, PROCESS_INSTANCE_ID_, TYPE_, EXCLUSIVE_, HANDLER_TYPE_, HANDLER_CFG_) " +
+          String insertStatementString = "INSERT INTO " + tablePrefix + "ACT_RU_JOB(ID_, REV_, RETRIES_, PROCESS_INSTANCE_ID_, TYPE_, EXCLUSIVE_, HANDLER_TYPE_, HANDLER_CFG_) " +
               "VALUES (" +
               "'" + jobId + "'," +
               "1," +

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -1013,6 +1013,7 @@ public static void initSqlSessionFactoryProperties(Properties properties, String
       properties.put("limitBetweenClob" , DbSqlSessionFactory.databaseSpecificLimitBetweenClobStatements.get(databaseType));
       properties.put("orderBy" , DbSqlSessionFactory.databaseSpecificOrderByStatements.get(databaseType));
       properties.put("limitBeforeNativeQuery" , DbSqlSessionFactory.databaseSpecificLimitBeforeNativeQueryStatements.get(databaseType));
+      properties.put("distinct" , DbSqlSessionFactory.databaseSpecificDistinct.get(databaseType));
 
       properties.put("bitand1" , DbSqlSessionFactory.databaseSpecificBitAnd1.get(databaseType));
       properties.put("bitand2" , DbSqlSessionFactory.databaseSpecificBitAnd2.get(databaseType));

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/AuthorizationTest.java
Patch:
@@ -56,7 +56,7 @@ public abstract class AuthorizationTest extends PluggableProcessEngineTestCase {
   protected String groupId = "accounting";
   protected User user;
   protected Group group;
-  
+
   protected static final String VARIABLE_NAME = "aVariableName";
   protected static final String VARIABLE_VALUE = "aVariableValue";
 
@@ -614,7 +614,7 @@ public Permission getDefaultTaskPermissionForUser() {
     // get the default task assignee permission
     ProcessEngineConfigurationImpl processEngineConfiguration = (ProcessEngineConfigurationImpl) processEngine
       .getProcessEngineConfiguration();
-    
+
     return processEngineConfiguration.getDefaultUserPermissionForTask();
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/externaltask/FetchExternalTaskAuthorizationTest.java
Patch:
@@ -39,6 +39,7 @@ public class FetchExternalTaskAuthorizationTest extends AuthorizationTest {
   protected String instance1Id;
   protected String instance2Id;
 
+  @Override
   protected void setUp() throws Exception {
     deploymentId = createDeployment(null,
         "org/camunda/bpm/engine/test/api/externaltask/oneExternalTaskProcess.bpmn20.xml",
@@ -49,6 +50,7 @@ protected void setUp() throws Exception {
     super.setUp();
   }
 
+  @Override
   public void tearDown() {
     super.tearDown();
     deleteDeployment(deploymentId);
@@ -214,4 +216,5 @@ public void testQueryWithReadProcessInstanceAndUpdateInstanceOnAnyProcessDefinit
     assertEquals(1, tasks.size());
     assertEquals(instance1Id, tasks.get(0).getProcessInstanceId());
   }
+
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -283,6 +283,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement(MSSQL, "selectEventSubscriptionsByNameAndExecution", "selectEventSubscriptionsByNameAndExecution_mssql");
     addDatabaseSpecificStatement(MSSQL, "selectEventSubscriptionsByExecutionAndType", "selectEventSubscriptionsByExecutionAndType_mssql");
     addDatabaseSpecificStatement(MSSQL, "selectHistoricDecisionInstancesByNativeQuery", "selectHistoricDecisionInstancesByNativeQuery_mssql_or_db2");
+    addDatabaseSpecificStatement(MSSQL, "selectFilterByQueryCriteria", "selectFilterByQueryCriteria_sqlserver");
 
     constants = new HashMap<String, String>();
     constants.put("constant.event", "'event'");

File: engine/src/test/java/org/camunda/bpm/engine/test/api/multitenancy/MultiTenancyTimerStartEventTest.java
Patch:
@@ -134,7 +134,7 @@ public void dontCreateNewJobsWhileReDeployment() {
   @Test
   public void failedJobRetryTimeCycle() {
 
-    testRule.deployForTenant(TENANT_ONE, Bpmn.createExecutableProcess()
+    testRule.deployForTenant(TENANT_ONE, Bpmn.createExecutableProcess("failingProcess")
       .startEvent()
         .timerWithDuration("PT1M")
         .camundaFailedJobRetryTimeCycle("R5/PT1M")
@@ -143,7 +143,7 @@ public void failedJobRetryTimeCycle() {
       .endEvent()
       .done());
 
-    testRule.deployForTenant(TENANT_TWO, Bpmn.createExecutableProcess()
+    testRule.deployForTenant(TENANT_TWO, Bpmn.createExecutableProcess("failingProcess")
       .startEvent()
         .timerWithDuration("PT1M")
         .camundaFailedJobRetryTimeCycle("R4/PT1M")

File: qa/performance-tests-engine/src/main/java/org/camunda/bpm/qa/performance/engine/loadgenerator/LoadGeneratorConfiguration.java
Patch:
@@ -19,7 +19,7 @@
 public class LoadGeneratorConfiguration {
 
   /** the number of threads to use when generating load */
-  protected int numOfThreads = Runtime.getRuntime().availableProcessors() - 1;
+  protected int numOfThreads = Math.max(1, Runtime.getRuntime().availableProcessors() - 1);
 
   /** controls how often the worker runnables are executed */
   protected int numberOfIterations = 10000;

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/FoxJobRetryCmd.java
Patch:
@@ -111,7 +111,7 @@ protected ActivityImpl getCurrentActivity(CommandContext commandContext, JobEnti
 
       DeploymentCache deploymentCache = Context.getProcessEngineConfiguration().getDeploymentCache();
       String definitionKey = configuration.getTimerElementKey();
-      ProcessDefinitionEntity processDefinition = deploymentCache.findDeployedLatestProcessDefinitionByKey(definitionKey);
+      ProcessDefinitionEntity processDefinition = deploymentCache.findDeployedLatestProcessDefinitionByKeyAndTenantId(definitionKey, job.getTenantId());
       if (processDefinition != null) {
         activity = processDefinition.getInitial();
       }

File: qa/integration-tests-webapps/src/test/java/org/camunda/bpm/cockpit/DashboardIT.java
Patch:
@@ -33,7 +33,8 @@ public void testLogin() throws URISyntaxException {
     WebElement submit = wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("button[type=\"submit\"]")));
     submit.submit();
 
-    wait.until(ExpectedConditions.textToBePresentInElementLocated(By.cssSelector("[ng-repeat=\"propName in procDefStatsKeys\"]:first-child"), "1 process definition"));
+    wait.until(ExpectedConditions.textToBePresentInElementLocated(By.cssSelector("[ng-repeat=\"propName in procDefStatsKeys\"]:first-child > .value"), "1"));
+    wait.until(ExpectedConditions.textToBePresentInElementLocated(By.cssSelector("[ng-repeat=\"propName in procDefStatsKeys\"]:first-child > a"), "process definition"));
 
     wait.until(currentURIIs(new URI(appUrl + "/default/#/dashboard")));
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationProcessInstanceTest.java
Patch:
@@ -101,6 +101,7 @@ public void testNullProcessInstanceIdsList() {
     }
   }
 
+  @Test
   public void testNullProcessInstanceIdsArray() {
     ProcessDefinition testProcessDefinition = testHelper.deployAndGetDefinition(ProcessModels.ONE_TASK_PROCESS);
     MigrationPlan migrationPlan = runtimeService.createMigrationPlan(testProcessDefinition.getId(), testProcessDefinition.getId())

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ConfigurationLogger.java
Patch:
@@ -58,10 +58,10 @@ public void usingDeprecatedHistoryLevelVariable() {
             "Consider using 'ACTIVITY' instead.");
   }
 
-  public ProcessEngineException invalidConfigDefaultTaskPermissionForUser(String defaultTaskPermissionForUser, String[] validPermissionNames) {
+  public ProcessEngineException invalidConfigDefaultUserPermissionNameForTask(String defaultUserPermissionNameForTask, String[] validPermissionNames) {
     return new ProcessEngineException(exceptionMessage(
         "007",
-        "Invalid value '{}' for configuration property 'defaultTaskPermissionForUser'. Valid values are: '{}'", defaultTaskPermissionForUser, validPermissionNames));
+        "Invalid value '{}' for configuration property 'defaultUserPermissionNameForTask'. Valid values are: '{}'", defaultUserPermissionNameForTask, validPermissionNames));
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -700,9 +700,9 @@ public String getProcessBusinessKey() {
 
   /** ensures initialization and returns the process definition. */
   @Override
-  public ProcessDefinitionImpl getProcessDefinition() {
+  public ProcessDefinitionEntity getProcessDefinition() {
     ensureProcessDefinitionInitialized();
-    return processDefinition;
+    return (ProcessDefinitionEntity) processDefinition;
   }
 
   public void setProcessDefinitionId(String processDefinitionId) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java
Patch:
@@ -981,7 +981,7 @@ public void configureDeploymentStatisticsQuery(DeploymentStatisticsQueryImpl que
   }
 
   public void configureProcessDefinitionStatisticsQuery(ProcessDefinitionStatisticsQueryImpl query) {
-    configureQuery(query, PROCESS_DEFINITION, "PROCDEF.KEY_");
+    configureQuery(query, PROCESS_DEFINITION, "RES.KEY_");
   }
 
   public void configureActivityStatisticsQuery(ActivityStatisticsQueryImpl query) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/MigratingJobInstance.java
Patch:
@@ -96,6 +96,9 @@ public void migrateState() {
     ProcessDefinitionEntity processDefinition = (ProcessDefinitionEntity) targetScope.getProcessDefinition();
     jobEntity.setProcessDefinitionId(processDefinition.getId());
     jobEntity.setProcessDefinitionKey(processDefinition.getKey());
+
+    // update deployment reference
+    jobEntity.setDeploymentId(processDefinition.getDeploymentId());
   }
 
   public void migrateDependentEntities() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/ManagementServiceImpl.java
Patch:
@@ -158,7 +158,7 @@ public void deleteProperty(String name) {
   public String databaseSchemaUpgrade(final Connection connection, final String catalog, final String schema) {
     return commandExecutor.execute(new Command<String>(){
       public String execute(CommandContext commandContext) {
-        commandContext.getAuthorizationManager().isCamundaAdmin();
+        commandContext.getAuthorizationManager().checkCamundaAdmin();
         DbSqlSessionFactory dbSqlSessionFactory = (DbSqlSessionFactory) commandContext.getSessionFactories().get(DbSqlSession.class);
         DbSqlSession dbSqlSession = new DbSqlSession(dbSqlSessionFactory, connection, catalog, schema);
         commandContext.getSessions().put(DbSqlSession.class, dbSqlSession);
@@ -184,7 +184,7 @@ public DeploymentStatisticsQuery createDeploymentStatisticsQuery() {
   public Set<String> getRegisteredDeployments() {
     return commandExecutor.execute(new Command<Set<String>>() {
       public Set<String> execute(CommandContext commandContext) {
-        commandContext.getAuthorizationManager().isCamundaAdmin();
+        commandContext.getAuthorizationManager().checkCamundaAdmin();
         Set<String> registeredDeployments = Context.getProcessEngineConfiguration().getRegisteredDeployments();
         return new HashSet<String>(registeredDeployments);
       }

File: engine/src/main/java/org/camunda/bpm/engine/impl/TablePageQueryImpl.java
Patch:
@@ -78,7 +78,7 @@ public TablePage listPage(int firstResult, int maxResults) {
   }
 
   public TablePage execute(CommandContext commandContext) {
-    commandContext.getAuthorizationManager().isCamundaAdmin();
+    commandContext.getAuthorizationManager().checkCamundaAdmin();
     return commandContext
       .getTableDataManager()
       .getTablePage(this, firstResult, maxResults);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetHistoryLevelCmd.java
Patch:
@@ -23,7 +23,7 @@
 public class GetHistoryLevelCmd implements Command<Integer> {
 
   public Integer execute(CommandContext commandContext) {
-    commandContext.getAuthorizationManager().isCamundaAdmin();
+    commandContext.getAuthorizationManager().checkCamundaAdmin();
     return Context.getProcessEngineConfiguration().getHistoryLevel().getId();
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetProcessApplicationForDeploymentCmd.java
Patch:
@@ -30,7 +30,7 @@ public GetProcessApplicationForDeploymentCmd(String deploymentId) {
   }
 
   public String execute(CommandContext commandContext) {
-    commandContext.getAuthorizationManager().isCamundaAdmin();
+    commandContext.getAuthorizationManager().checkCamundaAdmin();
 
     ProcessApplicationReference reference = Context.getProcessEngineConfiguration()
       .getProcessApplicationManager()

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetTableCountCmd.java
Patch:
@@ -27,7 +27,7 @@ public class GetTableCountCmd implements Command<Map<String,Long>>, Serializable
   private static final long serialVersionUID = 1L;
 
   public Map<String,Long> execute(CommandContext commandContext) {
-    commandContext.getAuthorizationManager().isCamundaAdmin();
+    commandContext.getAuthorizationManager().checkCamundaAdmin();
 
     return commandContext
       .getTableDataManager()

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetTableMetaDataCmd.java
Patch:
@@ -36,7 +36,7 @@ public GetTableMetaDataCmd(String tableName) {
   public TableMetaData execute(CommandContext commandContext) {
     ensureNotNull("tableName", tableName);
 
-    commandContext.getAuthorizationManager().isCamundaAdmin();
+    commandContext.getAuthorizationManager().checkCamundaAdmin();
 
     return commandContext
       .getTableDataManager()

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetTableNameCmd.java
Patch:
@@ -21,7 +21,7 @@ public GetTableNameCmd(Class< ? > entityClass) {
   public String execute(CommandContext commandContext) {
     ensureNotNull("entityClass", entityClass);
 
-    commandContext.getAuthorizationManager().isCamundaAdmin();
+    commandContext.getAuthorizationManager().checkCamundaAdmin();
 
     return commandContext
       .getTableDataManager()

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/RegisterDeploymentCmd.java
Patch:
@@ -36,7 +36,7 @@ public Void execute(CommandContext commandContext) {
 
     ensureNotNull("Deployment " + deploymentId + " does not exist", "deployment", deployment);
 
-    commandContext.getAuthorizationManager().isCamundaAdmin();
+    commandContext.getAuthorizationManager().checkCamundaAdmin();
 
     Context.getProcessEngineConfiguration().getRegisteredDeployments().add(deploymentId);
     return null;

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/RegisterProcessApplicationCmd.java
Patch:
@@ -33,7 +33,7 @@ public RegisterProcessApplicationCmd(Set<String> deploymentsToRegister, ProcessA
   }
 
   public ProcessApplicationRegistration execute(CommandContext commandContext) {
-    commandContext.getAuthorizationManager().isCamundaAdmin();
+    commandContext.getAuthorizationManager().checkCamundaAdmin();
 
     final ProcessEngineConfigurationImpl processEngineConfiguration = Context.getProcessEngineConfiguration();
     final ProcessApplicationManager processApplicationManager = processEngineConfiguration.getProcessApplicationManager();

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/UnregisterDeploymentCmd.java
Patch:
@@ -36,7 +36,7 @@ public UnregisterDeploymentCmd(String deploymentId) {
   }
 
   public Void execute(CommandContext commandContext) {
-    commandContext.getAuthorizationManager().isCamundaAdmin();
+    commandContext.getAuthorizationManager().checkCamundaAdmin();
     Context.getProcessEngineConfiguration().getRegisteredDeployments().removeAll(deploymentIds);
     return null;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/UnregisterProcessApplicationCmd.java
Patch:
@@ -44,7 +44,7 @@ public Void execute(CommandContext commandContext) {
       throw new ProcessEngineException("Deployment Ids cannot be null.");
     }
 
-    commandContext.getAuthorizationManager().isCamundaAdmin();
+    commandContext.getAuthorizationManager().checkCamundaAdmin();
 
     Context.getProcessEngineConfiguration()
       .getProcessApplicationManager()

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/EnginePersistenceLogger.java
Patch:
@@ -23,6 +23,7 @@
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.SuspendedEntityInteractionException;
 import org.camunda.bpm.engine.WrongDbException;
+import org.camunda.bpm.engine.authorization.Groups;
 import org.camunda.bpm.engine.exception.NotValidException;
 import org.camunda.bpm.engine.impl.ProcessEngineLogger;
 import org.camunda.bpm.engine.impl.db.entitymanager.cache.CachedDbEntity;
@@ -302,9 +303,9 @@ public ProcessEngineException illegalValueForUserIdException(String id, String e
       exceptionMessage("028", "Illegal value '{}' for userId for GLOBAL authorization. Must be '{}'", id, expected));
   }
 
-  public AuthorizationException notAMemberException(String id, String group) {
+  public AuthorizationException requiredCamundaAdminException() {
     return new AuthorizationException(
-      exceptionMessage("029", "The user with id '{}' is not a member of the group with id '{}'", id, group));
+      exceptionMessage("029", "Required authenticated group '{}'.", Groups.CAMUNDA_ADMIN));
   }
 
   public void createChildExecution(ExecutionEntity child, ExecutionEntity parent) {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/batch/BatchMigrationTest.java
Patch:
@@ -234,6 +234,7 @@ public void testMigrationJobsCreation() {
     Batch batch = helper.migrateProcessInstancesAsync(20);
     JobDefinition seedJobDefinition = helper.getSeedJobDefinition(batch);
     JobDefinition migrationJobDefinition = helper.getMigrationJobDefinition(batch);
+    String sourceDeploymentId = helper.getSourceProcessDefinition().getDeploymentId();
 
     // when
     helper.executeSeedJob(batch);
@@ -245,7 +246,7 @@ public void testMigrationJobsCreation() {
     for (Job migrationJob : migrationJobs) {
       assertEquals(migrationJobDefinition.getId(), migrationJob.getJobDefinitionId());
       assertNull(migrationJob.getDuedate());
-      assertNull(migrationJob.getDeploymentId());
+      assertEquals(sourceDeploymentId, migrationJob.getDeploymentId());
       assertNull(migrationJob.getProcessDefinitionId());
       assertNull(migrationJob.getProcessDefinitionKey());
       assertNull(migrationJob.getProcessInstanceId());

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/IncidentEntity.java
Patch:
@@ -398,6 +398,7 @@ public Object getPersistentState() {
     persistentState.put("executionId", executionId);
     persistentState.put("processDefinitionId", processDefinitionId);
     persistentState.put("activityId", activityId);
+    persistentState.put("jobDefinitionId", jobDefinitionId);
     return persistentState;
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationBoundaryEventsTest.java
Patch:
@@ -1656,9 +1656,10 @@ public void testMigrateIncidentForJob() {
     assertEquals(incidentBeforeMigration.getId(), incidentAfterMigration.getId());
     assertEquals(jobAfterMigration.getId(), incidentAfterMigration.getConfiguration());
 
-    // and the activity and process definition references were updated
+    // and the activity, process definition and job definition references were updated
     assertEquals("newBoundary", incidentAfterMigration.getActivityId());
     assertEquals(targetProcessDefinition.getId(), incidentAfterMigration.getProcessDefinitionId());
+    assertEquals(jobAfterMigration.getJobDefinitionId(), incidentAfterMigration.getJobDefinitionId());
   }
 
   @Test

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/MigratingActivityInstance.java
Patch:
@@ -157,7 +157,7 @@ public void attachState(MigratingActivityInstance activityInstance) {
   }
 
   @Override
-  public void attachState(MigratingTransitionInstance targetTranisitionInstance) {
+  public void attachState(MigratingTransitionInstance targetTransitionInstance) {
     throw MIGRATION_LOGGER.cannotAttachToTransitionInstance(this);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/MigratingCalledCaseInstance.java
Patch:
@@ -46,7 +46,7 @@ public void attachState(MigratingActivityInstance targetActivityInstance) {
   }
 
   @Override
-  public void attachState(MigratingTransitionInstance targetTranisitionInstance) {
+  public void attachState(MigratingTransitionInstance targetTransitionInstance) {
     throw MIGRATION_LOGGER.cannotAttachToTransitionInstance(this);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/MigratingCalledProcessInstance.java
Patch:
@@ -46,7 +46,7 @@ public void attachState(MigratingActivityInstance targetActivityInstance) {
   }
 
   @Override
-  public void attachState(MigratingTransitionInstance targetTranisitionInstance) {
+  public void attachState(MigratingTransitionInstance targetTransitionInstance) {
     throw MIGRATION_LOGGER.cannotAttachToTransitionInstance(this);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/MigratingEventSubscriptionInstance.java
Patch:
@@ -64,7 +64,7 @@ public void attachState(MigratingActivityInstance newOwningInstance) {
   }
 
   @Override
-  public void attachState(MigratingTransitionInstance targetTranisitionInstance) {
+  public void attachState(MigratingTransitionInstance targetTransitionInstance) {
     throw MIGRATION_LOGGER.cannotAttachToTransitionInstance(this);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/MigratingExternalTaskInstance.java
Patch:
@@ -67,7 +67,7 @@ public void attachState(MigratingActivityInstance owningInstance) {
   }
 
   @Override
-  public void attachState(MigratingTransitionInstance targetTranisitionInstance) {
+  public void attachState(MigratingTransitionInstance targetTransitionInstance) {
     throw MIGRATION_LOGGER.cannotAttachToTransitionInstance(this);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/MigratingIncident.java
Patch:
@@ -41,8 +41,8 @@ public void attachState(MigratingActivityInstance newOwningInstance) {
   }
 
   @Override
-  public void attachState(MigratingTransitionInstance targetTranisitionInstance) {
-    attachTo(targetTranisitionInstance.resolveRepresentativeExecution());
+  public void attachState(MigratingTransitionInstance targetTransitionInstance) {
+    attachTo(targetTransitionInstance.resolveRepresentativeExecution());
   }
 
   public void migrateState() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/MigratingInstance.java
Patch:
@@ -39,7 +39,7 @@ public interface MigratingInstance {
    * Restoration should restore the state that was detached
    * before.
    */
-  void attachState(MigratingTransitionInstance targetTranisitionInstance);
+  void attachState(MigratingTransitionInstance targetTransitionInstance);
 
   /**
    * Migrate state from the source process definition

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/MigratingJobInstance.java
Patch:
@@ -70,11 +70,11 @@ public void attachState(MigratingActivityInstance newOwningInstance) {
     }
   }
 
-  public void attachState(MigratingTransitionInstance targetTranisitionInstance) {
-    attachTo(targetTranisitionInstance.resolveRepresentativeExecution());
+  public void attachState(MigratingTransitionInstance targetTransitionInstance) {
+    attachTo(targetTransitionInstance.resolveRepresentativeExecution());
 
     for (MigratingInstance dependentInstance : migratingDependentInstances) {
-      dependentInstance.attachState(targetTranisitionInstance);
+      dependentInstance.attachState(targetTransitionInstance);
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/MigratingTransitionInstance.java
Patch:
@@ -99,7 +99,7 @@ public ExecutionEntity resolveRepresentativeExecution() {
   }
 
   @Override
-  public void attachState(MigratingTransitionInstance targetTranisitionInstance) {
+  public void attachState(MigratingTransitionInstance targetTransitionInstance) {
 
     throw MIGRATION_LOGGER.cannotAttachToTransitionInstance(this);
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/MigratingUserTaskInstance.java
Patch:
@@ -68,7 +68,7 @@ public void attachState(MigratingActivityInstance owningInstance) {
   }
 
   @Override
-  public void attachState(MigratingTransitionInstance targetTranisitionInstance) {
+  public void attachState(MigratingTransitionInstance targetTransitionInstance) {
     throw MIGRATION_LOGGER.cannotAttachToTransitionInstance(this);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/HistoryEventProducer.java
Patch:
@@ -95,11 +95,10 @@ public interface HistoryEventProducer {
   /**
    * Creates the history event which is fired when an activity instance is updated during a migration.
    *
-   * @param execution the current execution
    * @param actInstance the migrated activity instance which contains the new id's
    * @return the created history event
    */
-  HistoryEvent createActivityInstanceUpdateEvt(DelegateExecution execution, MigratingActivityInstance actInstance);
+  HistoryEvent createActivityInstanceUpdateEvt(MigratingActivityInstance actInstance);
 
   /**
    * Creates the history event fired when an activity instances is <strong>ended</strong>.

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/history/MigrationHistoricVariablesTest.java
Patch:
@@ -35,7 +35,7 @@
  * @author Thorben Lindhauer
  *
  */
-public class MigrationHistoryVariablesTest {
+public class MigrationHistoricVariablesTest {
 
   protected ProcessEngineRule rule = new ProvidedProcessEngineRule();
   protected MigrationTestRule testHelper = new MigrationTestRule(rule);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -404,7 +404,7 @@ public abstract class ProcessEngineConfigurationImpl extends ProcessEngineConfig
   protected List<BatchJobHandler<?>> customBatchJobHandlers;
 
   /** Number of jobs created by a batch seed job invocation */
-  protected int batchJobsPerSeed = 10;
+  protected int batchJobsPerSeed = 100;
   /** Number of invocations executed by a single batch job */
   protected int invocationsPerBatchJob = 1;
   /** seconds to wait between polling for batch completion */

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -2127,6 +2127,7 @@ public static Incident createMockIncident(String tenantId) {
     when(incident.getConfiguration()).thenReturn(EXAMPLE_INCIDENT_CONFIGURATION);
     when(incident.getIncidentMessage()).thenReturn(EXAMPLE_INCIDENT_MESSAGE);
     when(incident.getTenantId()).thenReturn(tenantId);
+    when(incident.getJobDefinitionId()).thenReturn(EXAMPLE_JOB_DEFINITION_ID);
 
     return incident;
   }
@@ -2162,6 +2163,7 @@ public static HistoricIncident createMockHistoricIncident(String tenantId) {
     when(incident.isDeleted()).thenReturn(EXAMPLE_HIST_INCIDENT_STATE_DELETED);
     when(incident.isResolved()).thenReturn(EXAMPLE_HIST_INCIDENT_STATE_RESOLVED);
     when(incident.getTenantId()).thenReturn(tenantId);
+    when(incident.getJobDefinitionId()).thenReturn(EXAMPLE_JOB_DEFINITION_ID);
 
     return incident;
   }

File: engine/src/main/java/org/camunda/bpm/engine/history/HistoricIncidentQuery.java
Patch:
@@ -53,6 +53,9 @@ public interface HistoricIncidentQuery extends Query<HistoricIncidentQuery, Hist
   /** Only select incidents which contain the configuration. **/
   HistoricIncidentQuery configuration(String configuration);
 
+  /** Only select incidents that belong to one of the given job definition ids. */
+  HistoricIncidentQuery jobDefinitionIdIn(String... jobDefinitionIds);
+
   /** Only select historic incidents which are open. **/
   HistoricIncidentQuery open();
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -294,6 +294,7 @@ protected void initHistoricIncidentEvent(HistoricIncidentEventEntity evt, Incide
     evt.setConfiguration(incident.getConfiguration());
     evt.setIncidentMessage(incident.getIncidentMessage());
     evt.setTenantId(incident.getTenantId());
+    evt.setJobDefinitionId(incident.getJobDefinitionId());
 
     IncidentEntity incidentEntity = (IncidentEntity) incident;
     ProcessDefinitionEntity definition = incidentEntity.getProcessDefinition();

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -348,6 +348,7 @@ protected IncidentContext createIncidentContext() {
     incidentContext.setExecutionId(executionId);
     incidentContext.setTenantId(tenantId);
     incidentContext.setConfiguration(id);
+    incidentContext.setJobDefinitionId(jobDefinitionId);
 
     return incidentContext;
   }

File: engine/src/main/java/org/camunda/bpm/engine/runtime/IncidentQuery.java
Patch:
@@ -52,6 +52,9 @@ public interface IncidentQuery extends Query<IncidentQuery, Incident> {
   /** Only select incidents that belong to one of the given tenant ids. */
   IncidentQuery tenantIdIn(String... tenantIds);
 
+  /** Only select incidents that belong to one of the given job definition ids. */
+  IncidentQuery jobDefinitionIdIn(String... jobDefinitionIds);
+
   /** Order by id (needs to be followed by {@link #asc()} or {@link #desc()}). */
   IncidentQuery orderByIncidentId();
 

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricIncidentTest.java
Patch:
@@ -55,6 +55,7 @@ public void testPropertiesOfHistoricIncident() {
     assertEquals(incident.getCauseIncidentId(), historicIncident.getCauseIncidentId());
     assertEquals(incident.getRootCauseIncidentId(), historicIncident.getRootCauseIncidentId());
     assertEquals(incident.getConfiguration(), historicIncident.getConfiguration());
+    assertEquals(incident.getJobDefinitionId(), historicIncident.getJobDefinitionId());
 
     assertTrue(historicIncident.isOpen());
     assertFalse(historicIncident.isDeleted());

File: webapps/src/test/java/org/camunda/bpm/cockpit/plugin/base/ProcessDefinitionResourceTest.java
Patch:
@@ -689,8 +689,6 @@ public void calledProcessDefinitionByParentProcessDefinitionIdDisabledTenantChec
     resource = new ProcessDefinitionResource(getProcessEngine().getName(), processInstance.getProcessDefinitionId());
 
     ProcessDefinitionQueryDto queryParameter = new ProcessDefinitionQueryDto();
-    // set sorting order to make sure to get the right order for the assertion
-    queryParameter.setOrderBy("EXEC2.ACT_ID_");
 
     processEngineConfiguration.setTenantCheckEnabled(false);
     identityService.setAuthentication("user", null, null);
@@ -702,6 +700,7 @@ public void calledProcessDefinitionByParentProcessDefinitionIdDisabledTenantChec
     identityService.clearAuthentication();
 
     ProcessDefinitionDto dto = result.get(0);
+
     String calledFrom = dto.getCalledFromActivityIds().get(0);
     assertThat(calledFrom).isEqualTo("CallActivity_Tenant1");
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/MigratingActivityInstance.java
Patch:
@@ -256,7 +256,7 @@ protected void migrateHistory(DelegateExecution execution) {
     if (activityInstance.getId().equalsIgnoreCase(activityInstance.getProcessInstanceId())) {
       historyEvent = historyEventProducer.createProcessInstanceUpdateEvt(execution);
     } else {
-      historyEvent = historyEventProducer.createActivityInstanceUpdateEvt(execution, null);
+      historyEvent = historyEventProducer.createActivityInstanceUpdateEvt(execution, this);
     }
     historyEventHandler.handleEvent(historyEvent);
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -355,7 +355,7 @@ public void fireHistoricActivityInstanceUpdate() {
 
       // publish update event for current activity instance (containing the id
       // of the sub process/case)
-      HistoryEvent haie = eventFactory.createActivityInstanceUpdateEvt(this, null);
+      HistoryEvent haie = eventFactory.createActivityInstanceUpdateEvt(this);
       eventHandler.handleEvent(haie);
     }
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/history/MigrationHistoryProcessInstanceTest.java
Patch:
@@ -139,7 +139,6 @@ public void testMigrateHistoryActivityInstance() {
     assertEquals(instance.getActivityId(), "userTask2");
   }
 
-  @Ignore
   @Test
   @RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_ACTIVITY)
   public void testMigrateHistoricSubProcessInstance() {
@@ -173,7 +172,6 @@ public void testMigrateHistoricSubProcessInstance() {
     assertMigratedTo(historicInstances.get(1), processDefinition, "userTask");
   }
 
-  @Ignore
   @Test
   @RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_ACTIVITY)
   public void testMigrateHistoricSubProcessRename() {
@@ -210,7 +208,6 @@ public void testMigrateHistoricSubProcessRename() {
     assertMigratedTo(historicInstances.get(1), targetDefinition, "userTask");
   }
 
-  @Ignore
   @Test
   @RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_ACTIVITY)
   public void testHistoricActivityInstanceBecomeScope() {

File: webapps/src/test/java/org/camunda/bpm/cockpit/plugin/base/ProcessDefinitionResourceTest.java
Patch:
@@ -689,6 +689,8 @@ public void calledProcessDefinitionByParentProcessDefinitionIdDisabledTenantChec
     resource = new ProcessDefinitionResource(getProcessEngine().getName(), processInstance.getProcessDefinitionId());
 
     ProcessDefinitionQueryDto queryParameter = new ProcessDefinitionQueryDto();
+    // set sorting order to make sure to get the right order for the assertion
+    queryParameter.setOrderBy("EXEC2.ACT_ID_");
 
     processEngineConfiguration.setTenantCheckEnabled(false);
     identityService.setAuthentication("user", null, null);

File: webapps/src/test/java/org/camunda/bpm/cockpit/plugin/base/ProcessInstanceResourceTest.java
Patch:
@@ -218,6 +218,8 @@ public void getCalledProcessInstancesByParentProcessInstanceIdDisabledTenantChec
     resource = new ProcessInstanceResource(getProcessEngine().getName(), processInstance.getId());
 
     CalledProcessInstanceQueryDto queryParameter = new CalledProcessInstanceQueryDto();
+    // set sorting order to make sure to get the right order for the assertion
+    queryParameter.setOrderBy("EXEC1.ACT_ID_");
 
     processEngineConfiguration.setTenantCheckEnabled(false);
     identityService.setAuthentication("user", null, null);

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/batch/BatchMigrationUserOperationLogTest.java
Patch:
@@ -143,6 +143,7 @@ public void testNoCreationOnSyncBatchJobExecution() {
       .newMigration(migrationPlan)
       .processInstanceIds(Arrays.asList(processInstance.getId()))
       .executeAsync();
+    batchHelper.executeSeedJob(batch);
 
     // when
     engineRule.getIdentityService().setAuthenticatedUserId(USER_ID);

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/history/MigrationHistoryProcessInstanceTest.java
Patch:
@@ -18,13 +18,15 @@
 import static org.junit.Assert.assertEquals;
 
 import org.camunda.bpm.engine.HistoryService;
+import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.history.HistoricProcessInstance;
 import org.camunda.bpm.engine.history.HistoricProcessInstanceQuery;
 import org.camunda.bpm.engine.migration.MigrationPlan;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
 import org.camunda.bpm.engine.runtime.ProcessInstanceQuery;
 import org.camunda.bpm.engine.test.ProcessEngineRule;
+import org.camunda.bpm.engine.test.RequiredHistoryLevel;
 import org.camunda.bpm.engine.test.api.runtime.migration.MigrationTestRule;
 import org.camunda.bpm.engine.test.api.runtime.migration.models.ProcessModels;
 import org.camunda.bpm.engine.test.util.ProvidedProcessEngineRule;
@@ -55,6 +57,7 @@ public void initServices() {
   }
 
   @Test
+  @RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_ACTIVITY)
   public void testMigrateHistoryProcessInstance() {
     //given
     int processInstanceCount = 10;

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/PvmExecutionImpl.java
Patch:
@@ -324,8 +324,8 @@ public void end(boolean completeScope) {
 
   @Override
   public void endCompensation() {
-    remove();
     performOperation(PvmAtomicOperation.FIRE_ACTIVITY_END);
+    remove();
 
     PvmExecutionImpl parent = getParent();
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -3310,7 +3310,7 @@ public void initDefaultTaskPermissionValidator() {
 
     Permission localDefaultPermissionForTaskUser = taskUserPermissionInputToPermission();
     if(localDefaultPermissionForTaskUser != Permissions.UPDATE && localDefaultPermissionForTaskUser !=  Permissions.TASK_WORK) {
-      throw new ProcessEngineException("defaultTaskAssigneePermission is neither UPDATE nor TASK_WORK");
+      throw new ProcessEngineException("defaultTaskPermissionForUser is neither UPDATE nor TASK_WORK");
     }
 
     setDefaultUserPermissionForTask(localDefaultPermissionForTaskUser); 

File: engine/src/main/java/org/camunda/bpm/engine/impl/batch/BatchMonitorJobHandler.java
Patch:
@@ -42,7 +42,7 @@ public void execute(BatchMonitorJobConfiguration configuration, ExecutionEntity
     boolean completed = batch.isCompleted();
 
     if (!completed) {
-      batch.createMonitorJob();
+      batch.createMonitorJob(true);
     }
     else {
       batch.delete(false);

File: engine/src/main/java/org/camunda/bpm/engine/impl/batch/BatchSeedJobHandler.java
Patch:
@@ -53,7 +53,7 @@ public void execute(BatchSeedJobConfiguration configuration, ExecutionEntity exe
       batch.createSeedJob();
     }
     else {
-      batch.createMonitorJob();
+      batch.createMonitorJob(false);
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/batch/BatchEntity.java
Patch:
@@ -250,7 +250,7 @@ public JobDefinitionEntity createBatchJobDefinition() {
   public JobEntity createSeedJob() {
     JobEntity seedJob = BATCH_SEED_JOB_DECLARATION.createJobInstance(this);
 
-    Context.getCommandContext().getJobManager().insertJob(seedJob);
+    Context.getCommandContext().getJobManager().insertAndHintJobExecutor(seedJob);
 
     return seedJob;
   }
@@ -274,7 +274,7 @@ public JobEntity createMonitorJob() {
     JobEntity monitorJob = BATCH_MONITOR_JOB_DECLARATION.createJobInstance(this);
     monitorJob.setDuedate(dueDate);
 
-    commandContext.getJobManager().insertJob(monitorJob);
+    commandContext.getJobManager().insertAndHintJobExecutor(monitorJob);
     return monitorJob;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/batch/MigrationBatchJobHandler.java
Patch:
@@ -100,7 +100,7 @@ public boolean createJobs(BatchEntity batch) {
       ByteArrayEntity configurationEntity = saveConfiguration(byteArrayManager, jobConfiguration);
       JobEntity job = createBatchJob(jobDefinition, configurationEntity);
 
-      jobManager.insertJob(job);
+      jobManager.insertAndHintJobExecutor(job);
 
       idsForJob.clear();
       createdJobs++;

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/batch/BatchMigrationTest.java
Patch:
@@ -33,6 +33,7 @@
 import org.camunda.bpm.engine.batch.history.HistoricBatch;
 import org.camunda.bpm.engine.impl.batch.BatchSeedJobHandler;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
+import org.camunda.bpm.engine.impl.persistence.entity.JobEntity;
 import org.camunda.bpm.engine.impl.util.ClockUtil;
 import org.camunda.bpm.engine.management.JobDefinition;
 import org.camunda.bpm.engine.migration.MigrationPlan;

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationPlanCreationTest.java
Patch:
@@ -90,7 +90,7 @@ public void testMigrateNonExistingSourceDefinition() {
         .build();
       fail("Should not succeed");
     } catch (BadUserRequestException e) {
-      assertExceptionMessage(e, "source process definition with id aNonExistingProcDefId does not exist");
+      assertExceptionMessage(e, "Source process definition with id 'aNonExistingProcDefId' does not exist");
     }
   }
 
@@ -119,7 +119,7 @@ public void testMigrateNonExistingTargetDefinition() {
         .build();
       fail("Should not succeed");
     } catch (BadUserRequestException e) {
-      assertExceptionMessage(e, "target process definition with id aNonExistingProcDefId does not exist");
+      assertExceptionMessage(e, "Target process definition with id 'aNonExistingProcDefId' does not exist");
     }
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricProcessInstanceTest.java
Patch:
@@ -35,6 +35,7 @@
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.task.Task;
 import org.camunda.bpm.engine.test.Deployment;
+import org.camunda.bpm.engine.test.RequiredHistoryLevel;
 
 
 /**
@@ -241,6 +242,7 @@ private void startHistoricProcessInstanceQueryWithIncidentsProcess() {
     }
   }
   @Deployment
+  @RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_FULL)
   public void testHistoricProcessInstanceQueryWithIncidents() {
     startHistoricProcessInstanceQueryWithIncidentsProcess();
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -2591,7 +2591,7 @@ public static MockBatchBuilder mockBatch() {
     return new MockBatchBuilder()
       .id(EXAMPLE_BATCH_ID)
       .type(EXAMPLE_BATCH_TYPE)
-      .size(EXAMPLE_BATCH_TOTAL_JOBS)
+      .totalJobs(EXAMPLE_BATCH_TOTAL_JOBS)
       .jobsCreated(EXAMPLE_BATCH_JOBS_CREATED)
       .batchJobsPerSeed(EXAMPLE_BATCH_JOBS_PER_SEED)
       .invocationsPerBatchJob(EXAMPLE_INVOCATIONS_PER_BATCH_JOB)
@@ -2615,7 +2615,7 @@ public static MockHistoricBatchBuilder mockHistoricBatch() {
     return new MockHistoricBatchBuilder()
       .id(EXAMPLE_BATCH_ID)
       .type(EXAMPLE_BATCH_TYPE)
-      .size(EXAMPLE_BATCH_TOTAL_JOBS)
+      .totalJobs(EXAMPLE_BATCH_TOTAL_JOBS)
       .batchJobsPerSeed(EXAMPLE_BATCH_JOBS_PER_SEED)
       .invocationsPerBatchJob(EXAMPLE_INVOCATIONS_PER_BATCH_JOB)
       .seedJobDefinitionId(EXAMPLE_SEED_JOB_DEFINITION_ID)

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricProcessInstanceQueryImpl.java
Patch:
@@ -129,12 +129,14 @@ public HistoricProcessInstanceQuery withIncidents() {
   }
 
   public HistoricProcessInstanceQuery incidentMessage(String incidentMessage) {
+    ensureNotNull("incidentMessage", incidentMessage);
     this.incidentMessage = incidentMessage;
 
     return this;
   }
 
   public HistoricProcessInstanceQuery incidentMessageLike(String incidentMessageLike) {
+    ensureNotNull("incidentMessageLike", incidentMessageLike);
     this.incidentMessageLike = incidentMessageLike;
 
     return this;

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/AcquiredJobs.java
Patch:
@@ -13,7 +13,7 @@
 package org.camunda.bpm.engine.impl.jobexecutor;
 
 import java.util.ArrayList;
-import java.util.Collections;
+import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
@@ -49,7 +49,7 @@ public void addJobIdBatch(List<String> jobIds) {
   }
 
   public void addJobIdBatch(String jobId) {
-    acquiredJobBatches.add(Collections.singletonList(jobId));
+    acquiredJobBatches.add(Arrays.asList(jobId));
     acquiredJobs.add(jobId);
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/AcquireJobsCmdTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.camunda.bpm.engine.test.standalone.jobexecutor;
+package org.camunda.bpm.engine.test.jobexecutor;
 
 import java.util.Date;
 

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/ControllableJobExecutor.java
Patch:
@@ -67,7 +67,7 @@ public ControllableJobExecutor(ProcessEngineImpl processEngine) {
    * <p>true: behave like embedded job executor where shutdown waits for all jobs to end
    * <p>false: behave like runtime container job executor where shutdown does not influence job execution
    */
-  public ControllableJobExecutor proceeedAndWaitOnShutdown(boolean syncOnShutdown) {
+  public ControllableJobExecutor proceedAndWaitOnShutdown(boolean syncOnShutdown) {
     this.syncOnShutdown = syncOnShutdown;
     return this;
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/JobExecutorShutdownTest.java
Patch:
@@ -81,7 +81,7 @@ public ProcessEngineConfiguration configureEngine(ProcessEngineConfigurationImpl
   protected static ControllableJobExecutor buildControllableJobExecutor() {
     ControllableJobExecutor jobExecutor = new ControllableJobExecutor();
     jobExecutor.setMaxJobsPerAcquisition(2);
-    jobExecutor.proceeedAndWaitOnShutdown(false);
+    jobExecutor.proceedAndWaitOnShutdown(false);
     return jobExecutor;
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/HistoricBatchQueryTest.java
Patch:
@@ -119,7 +119,7 @@ public void testBatchQueryResult() {
     HistoricBatch resultBatch = historyService.createHistoricBatchQuery().singleResult();
 
     // then
-    Assert.assertNotNull(batch);
+    Assert.assertNotNull(resultBatch);
 
     assertEquals(batch.getId(), resultBatch.getId());
     assertEquals(batch.getBatchJobDefinitionId(), resultBatch.getBatchJobDefinitionId());
@@ -277,7 +277,9 @@ public void testBatchQueryOrderByStartTimeAsc() {
   @Test
   public void testBatchQueryOrderByStartTimeDec() {
     // given
+    ClockTestUtil.setClockToDateWithoutMilliseconds();
     helper.migrateProcessInstancesAsync(1);
+    ClockTestUtil.incrementClock(1000);
     helper.migrateProcessInstancesAsync(1);
 
     // when

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/JobExecutorLogger.java
Patch:
@@ -109,7 +109,7 @@ public void ignoringSuspendedJob(ProcessDefinition processDefinition) {
 
   public void debugNotifyingJobExecutor(String string) {
     logDebug(
-        "017", "Notofing Job Executor of new job {}", string);
+        "017", "Notifying Job Executor of new job {}", string);
   }
 
   public void startingToAacquireJobs(String name) {
@@ -119,7 +119,7 @@ public void startingToAacquireJobs(String name) {
 
   public void exceptionDuringJobAcquisition(Exception e) {
     logError(
-        "019", "Exection during job acquistion {}", e.getMessage(), e);
+        "019", "Exception during job acquisition {}", e.getMessage(), e);
   }
 
   public void stoppedJobAcquisition(String name) {

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/BatchRestServiceImpl.java
Patch:
@@ -81,9 +81,7 @@ public List<BatchStatisticsDto> getStatistics(UriInfo uriInfo, Integer firstResu
       batchStatisticsList = executePaginatedStatisticsQuery(query, firstResult, maxResults);
     }
     else {
-      batchStatisticsList = getProcessEngine().getManagementService()
-        .createBatchStatisticsQuery()
-        .list();
+      batchStatisticsList = query.list();
     }
 
     List<BatchStatisticsDto> statisticsResults = new ArrayList<BatchStatisticsDto>();

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/MigrationPlanBuilderImpl.java
Patch:
@@ -66,7 +66,7 @@ public MigrationInstructionBuilder updateEventTrigger() {
 
   public MigrationInstructionsBuilder updateEventTriggers() {
     this.updateEventTriggersForGeneratedInstructions = true;
-    return null;
+    return this;
   }
 
   public String getSourceProcessDefinitionId() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/RemoveTaskVariablesCmd.java
Patch:
@@ -31,7 +31,7 @@ protected TaskEntity getEntity() {
     ensureNotNull("Cannot find task with id " + entityId, "task", task);
 
     AuthorizationManager authorizationManager = commandContext.getAuthorizationManager();
-    authorizationManager.checkTaskAssign(task);
+    authorizationManager.checkUpdateTask(task);
 
     return task;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SetTaskVariablesCmd.java
Patch:
@@ -45,7 +45,7 @@ protected TaskEntity getEntity() {
     ensureNotNull("task " + entityId + " doesn't exist", "task", task);
 
     AuthorizationManager authorizationManager = commandContext.getAuthorizationManager();
-    authorizationManager.checkTaskAssign(task);
+    authorizationManager.checkUpdateTask(task);
 
     return task;
   }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/MigrationRestService.java
Patch:
@@ -19,6 +19,7 @@
 import javax.ws.rs.core.MediaType;
 
 import org.camunda.bpm.engine.rest.dto.batch.BatchDto;
+import org.camunda.bpm.engine.rest.dto.migration.MigrationPlanGenerationDto;
 import org.camunda.bpm.engine.rest.dto.migration.MigrationExecutionDto;
 import org.camunda.bpm.engine.rest.dto.migration.MigrationPlanDto;
 
@@ -29,7 +30,7 @@ public interface MigrationRestService {
   @POST
   @Path("/generate")
   @Produces(MediaType.APPLICATION_JSON)
-  MigrationPlanDto generateMigrationPlan(MigrationPlanDto initialMigrationPlan);
+  MigrationPlanDto generateMigrationPlan(MigrationPlanGenerationDto generationDto);
 
   @POST
   @Path("/execute")

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -217,6 +217,7 @@
 import org.camunda.bpm.engine.impl.migration.validation.instruction.SameBehaviorInstructionValidator;
 import org.camunda.bpm.engine.impl.migration.validation.instruction.SameEventScopeInstructionValidator;
 import org.camunda.bpm.engine.impl.migration.validation.instruction.SameEventTypeValidator;
+import org.camunda.bpm.engine.impl.migration.validation.instruction.UpdateEventTriggersValidator;
 import org.camunda.bpm.engine.impl.persistence.GenericManagerFactory;
 import org.camunda.bpm.engine.impl.persistence.deploy.Deployer;
 import org.camunda.bpm.engine.impl.persistence.deploy.DeploymentCache;
@@ -3216,6 +3217,7 @@ public List<MigrationInstructionValidator> getDefaultMigrationInstructionValidat
     migrationInstructionValidators.add(new CannotRemoveMultiInstanceInnerActivityValidator());
     migrationInstructionValidators.add(new GatewayMappingValidator());
     migrationInstructionValidators.add(new SameEventScopeInstructionValidator());
+    migrationInstructionValidators.add(new UpdateEventTriggersValidator());
     return migrationInstructionValidators;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/MigrationInstructionGenerator.java
Patch:
@@ -55,6 +55,7 @@ public interface MigrationInstructionGenerator {
    * @return the list of generated instructions
    */
   ValidatingMigrationInstructions generate(ProcessDefinitionImpl sourceProcessDefinition,
-                                           ProcessDefinitionImpl targetProcessDefinition);
+                                           ProcessDefinitionImpl targetProcessDefinition,
+                                           boolean updateEventTriggers);
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/validation/instruction/ValidatingMigrationInstruction.java
Patch:
@@ -22,6 +22,8 @@ public interface ValidatingMigrationInstruction {
 
   ActivityImpl getTargetActivity();
 
+  boolean isUpdateEventTrigger();
+
   MigrationInstruction toMigrationInstruction();
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/EventSubscriptionEntity.java
Patch:
@@ -138,6 +138,7 @@ public Object getPersistentState() {
     persistentState.put("executionId", executionId);
     persistentState.put("configuration", configuration);
     persistentState.put("activityId", activityId);
+    persistentState.put("eventName", eventName);
     return persistentState;
   }
 
@@ -269,6 +270,7 @@ public String getActivityId() {
 
   public void setActivityId(String activityId) {
     this.activityId = activityId;
+    this.activity = null;
   }
 
   public Date getCreated() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -246,7 +246,7 @@ public void setExecutionId(String executionId) {
     this.executionId = executionId;
   }
 
-  protected ExecutionEntity getExecution() {
+  public ExecutionEntity getExecution() {
     ensureExecutionInitialized();
     return execution;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/runtime/DefaultCorrelationHandler.java
Patch:
@@ -203,7 +203,7 @@ protected MessageCorrelationResult correlateStartMessageByProcessDefinitionId(Co
   }
 
   protected String findStartActivityIdByMessage(ProcessDefinitionEntity processDefinition, String messageName) {
-    for (EventSubscriptionDeclaration declaration : EventSubscriptionDeclaration.getDeclarationsForScope(processDefinition)) {
+    for (EventSubscriptionDeclaration declaration : EventSubscriptionDeclaration.getDeclarationsForScope(processDefinition).values()) {
       if (isMessageStartEventWithName(declaration, messageName)) {
         return declaration.getActivityId();
       }

File: engine/src/main/java/org/camunda/bpm/engine/migration/MigrationPlanBuilder.java
Patch:
@@ -23,13 +23,13 @@ public interface MigrationPlanBuilder {
    * process definitions. By default, this is given if two activities are both user tasks, are on the same
    * level of sub process, and have the same id.
    */
-  MigrationPlanBuilder mapEqualActivities();
+  MigrationInstructionsBuilder mapEqualActivities();
 
   /**
    * Adds a migration instruction that maps activity instances of the source activity (of the source process definition)
    * to activity instances of the target activity (of the target process definition)
    */
-  MigrationPlanBuilder mapActivities(String sourceActivityId, String targetActivityId);
+  MigrationInstructionBuilder mapActivities(String sourceActivityId, String targetActivityId);
 
   /**
    * @return a migration plan with all previously specified instructions

File: engine-dmn/feel-juel/src/main/java/org/camunda/bpm/dmn/feel/impl/juel/el/FeelFunctionMapper.java
Patch:
@@ -28,7 +28,7 @@ public class FeelFunctionMapper extends FunctionMapper {
 
   public static final FeelEngineLogger LOG = FeelLogger.ENGINE_LOGGER;
 
-  public static final SimpleDateFormat FEEL_DATE_AND_TIME_FORMAT = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
+  protected static final SimpleDateFormat FEEL_DATE_AND_TIME_FORMAT = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
   public static final String JUEL_DATE_AND_TIME_METHOD = "dateAndTime";
 
   protected static final Map<String, Method> methods = new HashMap<String, Method>();
@@ -51,7 +51,8 @@ protected static Method getMethod(String name, Class<?>... parameterTypes) {
 
   public static Date parseDateAndTime(String dateAndTimeString) {
     try {
-      return FEEL_DATE_AND_TIME_FORMAT.parse(dateAndTimeString);
+      SimpleDateFormat clonedDateFormat = (SimpleDateFormat) FEEL_DATE_AND_TIME_FORMAT.clone();
+      return clonedDateFormat.parse(dateAndTimeString);
     } catch (ParseException e) {
       throw LOG.invalidDateAndTimeFormat(dateAndTimeString, e);
     }

File: engine/src/main/java/org/camunda/bpm/engine/history/HistoricIdentityLinkLogQuery.java
Patch:
@@ -41,7 +41,7 @@ public interface HistoricIdentityLinkLogQuery extends Query<HistoricIdentityLink
 	HistoricIdentityLinkLogQuery assignerId(String assignerId);
 	
 	/** Only select historic identity links which have the given tenant id. **/
-  HistoricIdentityLinkLogQuery tenantId(String tenantId);
+	HistoricIdentityLinkLogQuery tenantIdIn(String... tenantId);
 	
 	/** Order by time (needs to be followed by {@link #asc()} or {@link #desc()}). */
   HistoricIdentityLinkLogQuery orderByTime();

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/BatchRestService.java
Patch:
@@ -50,12 +50,13 @@ List<BatchDto> getBatches(@Context UriInfo uriInfo,
   @GET
   @Path("/statistics")
   @Produces(MediaType.APPLICATION_JSON)
-  List<BatchStatisticsDto> getStatistics(@QueryParam("firstResult") Integer firstResult,
+  List<BatchStatisticsDto> getStatistics(@Context UriInfo uriInfo,
+                                         @QueryParam("firstResult") Integer firstResult,
                                          @QueryParam("maxResults") Integer maxResults);
 
   @GET
   @Path("/statistics/count")
   @Produces(MediaType.APPLICATION_JSON)
-  CountResultDto getStatisticsCount();
+  CountResultDto getStatisticsCount(@Context UriInfo uriInfo);
 
 }

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/extension/Element.java
Patch:
@@ -41,9 +41,10 @@ public enum Element {
   MAX_THREADS(ModelConstants.MAX_THREADS),
   QUEUE_LENGTH(ModelConstants.QUEUE_LENGTH),
   KEEPALIVE_TIME(ModelConstants.KEEPALIVE_TIME),
+  ALLOW_CORE_TIMEOUT(ModelConstants.ALLOW_CORE_TIMEOUT),
   JOB_AQUISITIONS(ModelConstants.JOB_ACQUISITIONS),
-  JOB_AQUISITION(ModelConstants.JOB_ACQUISITION),
 
+  JOB_AQUISITION(ModelConstants.JOB_ACQUISITION),
   PROCESS_ENGINES(ModelConstants.PROCESS_ENGINES),
   PROCESS_ENGINE(ModelConstants.PROCESS_ENGINE),
   CONFIGURATION(ModelConstants.CONFIGURATION),

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ProcessDefinitionEntity.java
Patch:
@@ -152,7 +152,6 @@ public IdentityLinkEntity addIdentityLink(String userId, String groupId) {
     IdentityLinkEntity identityLinkEntity = IdentityLinkEntity.newIdentityLink();
     getIdentityLinks().add(identityLinkEntity);
     identityLinkEntity.setProcessDef(this);
-    identityLinkEntity.setProcessDefinitionKey(getKey());
     identityLinkEntity.setUserId(userId);
     identityLinkEntity.setGroupId(groupId);
     identityLinkEntity.setType(IdentityLinkType.CANDIDATE);
@@ -167,7 +166,7 @@ public void deleteIdentityLink(String userId, String groupId) {
       .findIdentityLinkByProcessDefinitionUserAndGroup(id, userId, groupId);
 
     for (IdentityLinkEntity identityLink: identityLinks) {
-      identityLink.delete(getKey());
+      identityLink.delete();
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/UserTaskActivityBehavior.java
Patch:
@@ -18,7 +18,7 @@
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.el.ExpressionManager;
 import org.camunda.bpm.engine.impl.migration.instance.MigratingActivityInstance;
-import org.camunda.bpm.engine.impl.migration.instance.MigratingTaskInstance;
+import org.camunda.bpm.engine.impl.migration.instance.MigratingUserTaskInstance;
 import org.camunda.bpm.engine.impl.migration.instance.parser.MigratingInstanceParseContext;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.TaskEntity;
@@ -75,7 +75,7 @@ public void onParseMigratingInstance(MigratingInstanceParseContext parseContext,
     ExecutionEntity execution = migratingInstance.resolveRepresentativeExecution();
 
     for (TaskEntity task : execution.getTasks()) {
-      migratingInstance.addMigratingDependentInstance(new MigratingTaskInstance(task, migratingInstance));
+      migratingInstance.addMigratingDependentInstance(new MigratingUserTaskInstance(task, migratingInstance));
       parseContext.consume(task);
 
       Collection<VariableInstanceEntity> variables = task.getVariablesInternal();

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetActivityInstanceCmd.java
Patch:
@@ -363,7 +363,7 @@ protected List<ExecutionEntity> loadFromDb(final String processInstanceId, final
 
     // initialize parent/child sets
     if (processInstance != null) {
-      processInstance.restoreProcessInstance(executions, null, null, null, null, null);
+      processInstance.restoreProcessInstance(executions, null, null, null, null, null, null);
     }
 
     return executions;

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/MigratingUserTaskInstance.java
Patch:
@@ -22,14 +22,14 @@
  * @author Thorben Lindhauer
  *
  */
-public class MigratingTaskInstance implements MigratingInstance {
+public class MigratingUserTaskInstance implements MigratingInstance {
 
   public static final MigrationLogger MIGRATION_LOGGER = ProcessEngineLogger.MIGRATION_LOGGER;
 
   protected TaskEntity userTask;
   protected MigratingActivityInstance migratingActivityInstance;
 
-  public MigratingTaskInstance(TaskEntity userTask, MigratingActivityInstance migratingActivityInstance) {
+  public MigratingUserTaskInstance(TaskEntity userTask, MigratingActivityInstance migratingActivityInstance) {
     this.userTask = userTask;
     this.migratingActivityInstance = migratingActivityInstance;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/validation/activity/SupportedActivityValidator.java
Patch:
@@ -22,6 +22,7 @@
 import org.camunda.bpm.engine.impl.bpmn.behavior.EventBasedGatewayActivityBehavior;
 import org.camunda.bpm.engine.impl.bpmn.behavior.EventSubProcessActivityBehavior;
 import org.camunda.bpm.engine.impl.bpmn.behavior.EventSubProcessStartEventActivityBehavior;
+import org.camunda.bpm.engine.impl.bpmn.behavior.ExternalTaskActivityBehavior;
 import org.camunda.bpm.engine.impl.bpmn.behavior.IntermediateCatchEventActivityBehavior;
 import org.camunda.bpm.engine.impl.bpmn.behavior.ParallelMultiInstanceActivityBehavior;
 import org.camunda.bpm.engine.impl.bpmn.behavior.ReceiveTaskActivityBehavior;
@@ -56,6 +57,7 @@ public class SupportedActivityValidator implements MigrationActivityValidator {
     SUPPORTED_ACTIVITY_BEHAVIORS.add(EventBasedGatewayActivityBehavior.class);
     SUPPORTED_ACTIVITY_BEHAVIORS.add(EventSubProcessActivityBehavior.class);
     SUPPORTED_ACTIVITY_BEHAVIORS.add(EventSubProcessStartEventActivityBehavior.class);
+    SUPPORTED_ACTIVITY_BEHAVIORS.add(ExternalTaskActivityBehavior.class);
   }
 
   public boolean valid(ActivityImpl activity) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/validation/instruction/CannotRemoveMultiInstanceInnerActivityValidator.java
Patch:
@@ -22,7 +22,7 @@
  *
  * @author Thorben Lindhauer
  */
-public class CannotRemoveMultiInstanceInnerActivityValidator  implements MigrationInstructionValidator {
+public class CannotRemoveMultiInstanceInnerActivityValidator implements MigrationInstructionValidator {
 
   @Override
   public void validate(ValidatingMigrationInstruction instruction, ValidatingMigrationInstructions instructions,

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationEventSubProcessTest.java
Patch:
@@ -671,7 +671,7 @@ public void testMigrateEventSubprocessChangeStartEventType() {
       // then
       assertThat(e.getValidationReport())
       .hasInstructionFailures("eventSubProcessStart",
-        "Activities are of different type"
+        "Events are not of the same type (signalStartEvent != startTimerEvent)"
       );
     }
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationMultiInstanceTest.java
Patch:
@@ -406,7 +406,8 @@ public void testMigrateParallelToSequential() {
     catch (MigrationPlanValidationException e) {
       assertThat(e.getValidationReport())
         .hasInstructionFailures(miBodyOf("userTask"),
-          "Source and target activity must be of the same multi-instance type (sequential or parallel)"
+          "Activities have incompatible behavior for migration (ParallelMultiInstanceActivityBehavior is not "
+          + "compatible with SequentialMultiInstanceActivityBehavior)"
         );
     }
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationUserTaskTest.java
Patch:
@@ -36,7 +36,7 @@
  * @author Thorben Lindhauer
  *
  */
-public class MigrationSameScopesTest {
+public class MigrationUserTaskTest {
 
   protected ProcessEngineRule rule = new PluggableProcessEngineRule();
   protected MigrationTestRule testHelper = new MigrationTestRule(rule);

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/event/CdiProcessApplicationEventSupportTest.java
Patch:
@@ -59,12 +59,12 @@ public void testEventListener() {
 
     Integer listenerInvocationCount = (Integer) runtimeService.getVariable(processInstance.getId(), ExecutionListenerProcessApplication.LISTENER_INVOCATION_COUNT);
     Assert.assertNotNull(listenerInvocationCount);
-    Assert.assertEquals(5, listenerInvocationCount.intValue());
+    Assert.assertEquals(6, listenerInvocationCount.intValue());
 
     Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
     taskService.setAssignee(task.getId(), "demo");
     listenerInvocationCount = (Integer) runtimeService.getVariable(processInstance.getId(), ExecutionListenerProcessApplication.LISTENER_INVOCATION_COUNT);
-    Assert.assertEquals(6, listenerInvocationCount.intValue());
+    Assert.assertEquals(7, listenerInvocationCount.intValue());
   }
 
 }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/event/ProcessApplicationExecutionListenerTest.java
Patch:
@@ -55,7 +55,7 @@ public void testExecutionListener() {
 
     Integer listenerInvocationCount = (Integer) runtimeService.getVariable(processInstance.getId(), ExecutionListenerProcessApplication.LISTENER_INVOCATION_COUNT);
     Assert.assertNotNull(listenerInvocationCount);
-    Assert.assertEquals(4, listenerInvocationCount.intValue());
+    Assert.assertEquals(5, listenerInvocationCount.intValue());
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/application/impl/ServletProcessApplication.java
Patch:
@@ -175,5 +175,4 @@ public Map<String, String> getProperties() {
   public ServletContext getServletContext() {
     return servletContext;
   }
-
 }
\ No newline at end of file

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -653,7 +653,7 @@ public void parseScope(Element scopeElement, ScopeImpl parentScope) {
     activityElements.removeAll(intermediateCatchEvents.values());
     Map<String, Element> compensationHandlers = filterCompensationHandlers(activityElements);
     activityElements.removeAll(compensationHandlers.values());
-
+    
     parseStartEvents(scopeElement, parentScope);
     parseActivities(activityElements, scopeElement, parentScope);
     parseIntermediateCatchEvents(scopeElement, parentScope, intermediateCatchEvents);

File: webapps/src/main/java/org/camunda/bpm/cockpit/plugin/resource/AbstractCockpitPluginResource.java
Patch:
@@ -27,7 +27,7 @@
 import org.camunda.bpm.webapp.plugin.resource.AbstractAppPluginResource;
 
 /**
- * Base class for implementing a pluigin REST resource.
+ * Base class for implementing a plugin REST resource.
  *
  * @author Daniel Meyer
  *
@@ -61,7 +61,7 @@ protected QueryService getQueryService() {
   // authorization //////////////////////////////////////////////////////////////
 
   /**
-   * Return <code>true</code> iff authorization is enabled.
+   * Return <code>true</code> if authorization is enabled.
    */
   protected boolean isAuthorizationEnabled() {
     return getProcessEngine().getProcessEngineConfiguration().isAuthorizationEnabled();

File: engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/HistoricIdentityLinkLogAuthorizationTest.java
Patch:
@@ -17,7 +17,7 @@ public class HistoricIdentityLinkLogAuthorizationTest extends AuthorizationTest
   protected String deploymentId;
 
   public void setUp() throws Exception {
-    deploymentId = createDeployment(null, "org/camunda/bpm/engine/test/api/authorization/OneTaskProcess.bpmn20.xml",
+    deploymentId = createDeployment(null, "org/camunda/bpm/engine/test/api/authorization/oneTaskProcess.bpmn20.xml",
     "org/camunda/bpm/engine/test/api/authorization/oneTaskCase.cmmn").getId();
     super.setUp();
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/test/AbstractProcessEngineTestCase.java
Patch:
@@ -123,11 +123,11 @@ public void runBare() throws Throwable {
     }
     finally {
 
-      deleteDeployments();
-
       identityService.clearAuthentication();
       processEngineConfiguration.setTenantCheckEnabled(true);
 
+      deleteDeployments();
+
       // only fail if no test failure was recorded
       TestHelper.assertAndEnsureCleanDbAndCache(processEngine, exception == null);
       ClockUtil.reset();

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/batch/impl/BatchResourceImpl.java
Patch:
@@ -51,7 +51,7 @@ public void deleteBatch(boolean cascade) {
         .deleteBatch(batchId, cascade);
     }
     catch (BadUserRequestException e) {
-      throw new InvalidRequestException(Status.BAD_REQUEST, "Unable to delete batch with id '" + batchId + "'");
+      throw new InvalidRequestException(Status.BAD_REQUEST, e, "Unable to delete batch with id '" + batchId + "'");
     }
   }
 

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/history/impl/HistoricBatchResourceImpl.java
Patch:
@@ -51,7 +51,7 @@ public void deleteHistoricBatch() {
         .deleteHistoricBatch(batchId);
     }
     catch (BadUserRequestException e) {
-      throw new InvalidRequestException(Status.BAD_REQUEST, "Unable to delete historic batch with id '" + batchId + "'");
+      throw new InvalidRequestException(Status.BAD_REQUEST, e, "Unable to delete historic batch with id '" + batchId + "'");
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/ExternalTaskActivityBehavior.java
Patch:
@@ -43,6 +43,7 @@ public void execute(ActivityExecution execution) throws Exception {
     PriorityProvider<ExternalTaskActivityBehavior> provider = Context.getProcessEngineConfiguration().getExternalTaskPriorityProvider();
     long priority = provider.determinePriority(executionEntity, this);
     ExternalTaskEntity.createAndInsert(executionEntity, topicName, priority);
+    
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -571,6 +571,7 @@ public ProcessDefinitionEntity parseProcess(Element processElement) {
     processDefinition.setTaskDefinitions(new HashMap<String, TaskDefinition>());
     processDefinition.setDeploymentId(deployment.getId());
     processDefinition.setProperty(PROPERTYNAME_JOB_PRIORITY, parsePriority(processElement, PROPERTYNAME_JOB_PRIORITY));
+    processDefinition.setProperty(PROPERTYNAME_TASK_PRIORITY, parsePriority(processElement, PROPERTYNAME_TASK_PRIORITY));
     processDefinition.setSemanticVersion(
       processElement.attributeNS(CAMUNDA_BPMN_EXTENSIONS_NS, "semanticVersion")
     );

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/history/HistoryRestService.java
Patch:
@@ -59,8 +59,8 @@ public interface HistoryRestService {
   @Path(HistoricDecisionInstanceRestService.PATH)
   HistoricDecisionInstanceRestService getDecisionInstanceService();
 
-  @Path(HistoricIdentityLinkRestService.PATH)
-  HistoricIdentityLinkRestService getIdentityLinkService();
+  @Path(HistoricIdentityLinkLogRestService.PATH)
+  HistoricIdentityLinkLogRestService getIdentityLinkService();
 
   @Path(HistoricBatchRestService.PATH)
   HistoricBatchRestService getBatchService();

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/history/HistoryRestServiceImpl.java
Patch:
@@ -29,7 +29,7 @@
 import org.camunda.bpm.engine.rest.history.HistoricCaseInstanceRestService;
 import org.camunda.bpm.engine.rest.history.HistoricDecisionInstanceRestService;
 import org.camunda.bpm.engine.rest.history.HistoricDetailRestService;
-import org.camunda.bpm.engine.rest.history.HistoricIdentityLinkRestService;
+import org.camunda.bpm.engine.rest.history.HistoricIdentityLinkLogRestService;
 import org.camunda.bpm.engine.rest.history.HistoricIncidentRestService;
 import org.camunda.bpm.engine.rest.history.HistoricJobLogRestService;
 import org.camunda.bpm.engine.rest.history.HistoricProcessInstanceRestService;
@@ -88,8 +88,8 @@ public HistoricIncidentRestService getIncidentService() {
     return new HistoricIncidentRestServiceImpl(getObjectMapper(), getProcessEngine());
   }
 
-  public HistoricIdentityLinkRestService getIdentityLinkService() {
-    return new HistoricIdentityLinkRestServiceImpl(getObjectMapper(), getProcessEngine());
+  public HistoricIdentityLinkLogRestService getIdentityLinkService() {
+    return new HistoricIdentityLinkLogRestServiceImpl(getObjectMapper(), getProcessEngine());
   }
 
   public HistoricJobLogRestService getJobLogService() {

File: engine/src/main/java/org/camunda/bpm/engine/HistoryService.java
Patch:
@@ -28,7 +28,7 @@
 import org.camunda.bpm.engine.history.HistoricDecisionInstanceQuery;
 import org.camunda.bpm.engine.history.HistoricDetail;
 import org.camunda.bpm.engine.history.HistoricDetailQuery;
-import org.camunda.bpm.engine.history.HistoricIdentityLinkQuery;
+import org.camunda.bpm.engine.history.HistoricIdentityLinkLogQuery;
 import org.camunda.bpm.engine.history.HistoricIncident;
 import org.camunda.bpm.engine.history.HistoricIncidentQuery;
 import org.camunda.bpm.engine.history.HistoricJobLog;
@@ -88,8 +88,8 @@ public interface HistoryService {
   /** Creates a new programmatic query to search for {@link HistoricIncident historic incidents}. */
   HistoricIncidentQuery createHistoricIncidentQuery();
 
-  /** Creates a new programmatic query to search for {@link HistoricIdentityLink historic identity links}. */
-  HistoricIdentityLinkQuery createHistoricIdentityLinkQuery();
+  /** Creates a new programmatic query to search for {@link HistoricIdentityLinkLog historic identity links}. */
+  HistoricIdentityLinkLogQuery createHistoricIdentityLinkLogQuery();
   
   /** Creates a new programmatic query to search for {@link HistoricCaseInstance}s. */
   HistoricCaseInstanceQuery createHistoricCaseInstanceQuery();

File: engine/src/main/java/org/camunda/bpm/engine/history/HistoricIdentityLinkLog.java
Patch:
@@ -30,7 +30,7 @@
  * For every log, an operation type (add/delete) is added to the database
  * based on the identity link operation
  */
-public interface HistoricIdentityLink {
+public interface HistoricIdentityLinkLog {
   
   /**
    * Returns the id of historic identity link (Candidate or Assignee or Owner).

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricIdentityLinkLogQueryProperty.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.camunda.bpm.engine.query.QueryProperty;
 
-public interface HistoricIdentityLinkQueryProperty {
+public interface HistoricIdentityLinkLogQueryProperty {
 
   public static final QueryProperty ID = new QueryPropertyImpl("ID_");
   public static final QueryProperty TIME = new QueryPropertyImpl("TIMESTAMP_");

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoryServiceImpl.java
Patch:
@@ -22,7 +22,7 @@
 import org.camunda.bpm.engine.history.HistoricCaseInstanceQuery;
 import org.camunda.bpm.engine.history.HistoricDecisionInstanceQuery;
 import org.camunda.bpm.engine.history.HistoricDetailQuery;
-import org.camunda.bpm.engine.history.HistoricIdentityLinkQuery;
+import org.camunda.bpm.engine.history.HistoricIdentityLinkLogQuery;
 import org.camunda.bpm.engine.history.HistoricIncidentQuery;
 import org.camunda.bpm.engine.history.HistoricJobLogQuery;
 import org.camunda.bpm.engine.history.HistoricProcessInstanceQuery;
@@ -84,8 +84,8 @@ public HistoricIncidentQuery createHistoricIncidentQuery() {
     return new HistoricIncidentQueryImpl(commandExecutor);
   }
 
-  public HistoricIdentityLinkQueryImpl createHistoricIdentityLinkQuery() {
-    return new HistoricIdentityLinkQueryImpl(commandExecutor);
+  public HistoricIdentityLinkLogQueryImpl createHistoricIdentityLinkLogQuery() {
+    return new HistoricIdentityLinkLogQueryImpl(commandExecutor);
   }
   
   public HistoricCaseInstanceQuery createHistoricCaseInstanceQuery() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -236,7 +236,7 @@
 import org.camunda.bpm.engine.impl.persistence.entity.HistoricCaseInstanceManager;
 import org.camunda.bpm.engine.impl.persistence.entity.HistoricDetailManager;
 import org.camunda.bpm.engine.impl.persistence.entity.HistoricIncidentManager;
-import org.camunda.bpm.engine.impl.persistence.entity.HistoricIdentityLinkManager;
+import org.camunda.bpm.engine.impl.persistence.entity.HistoricIdentityLinkLogManager;
 import org.camunda.bpm.engine.impl.persistence.entity.HistoricJobLogManager;
 import org.camunda.bpm.engine.impl.persistence.entity.HistoricProcessInstanceManager;
 import org.camunda.bpm.engine.impl.persistence.entity.HistoricStatisticsManager;
@@ -1039,7 +1039,7 @@ protected void initSessionFactories() {
       addSessionFactory(new GenericManagerFactory(HistoricTaskInstanceManager.class));
       addSessionFactory(new GenericManagerFactory(HistoricVariableInstanceManager.class));
       addSessionFactory(new GenericManagerFactory(HistoricIncidentManager.class));
-      addSessionFactory(new GenericManagerFactory(HistoricIdentityLinkManager.class));
+      addSessionFactory(new GenericManagerFactory(HistoricIdentityLinkLogManager.class));
       addSessionFactory(new GenericManagerFactory(HistoricJobLogManager.class));
       addSessionFactory(new GenericManagerFactory(IdentityInfoManager.class));
       addSessionFactory(new GenericManagerFactory(IdentityLinkManager.class));

File: engine/src/main/java/org/camunda/bpm/engine/impl/interceptor/CommandContext.java
Patch:
@@ -64,7 +64,7 @@
 import org.camunda.bpm.engine.impl.persistence.entity.HistoricCaseActivityInstanceManager;
 import org.camunda.bpm.engine.impl.persistence.entity.HistoricCaseInstanceManager;
 import org.camunda.bpm.engine.impl.persistence.entity.HistoricDetailManager;
-import org.camunda.bpm.engine.impl.persistence.entity.HistoricIdentityLinkManager;
+import org.camunda.bpm.engine.impl.persistence.entity.HistoricIdentityLinkLogManager;
 import org.camunda.bpm.engine.impl.persistence.entity.HistoricIncidentManager;
 import org.camunda.bpm.engine.impl.persistence.entity.HistoricJobLogManager;
 import org.camunda.bpm.engine.impl.persistence.entity.HistoricProcessInstanceManager;
@@ -424,8 +424,8 @@ public HistoricIncidentManager getHistoricIncidentManager() {
     return getSession(HistoricIncidentManager.class);
   }
 
-  public HistoricIdentityLinkManager getHistoricIdentityLinkManager() {
-    return getSession(HistoricIdentityLinkManager.class);
+  public HistoricIdentityLinkLogManager getHistoricIdentityLinkManager() {
+    return getSession(HistoricIdentityLinkLogManager.class);
   }
   
   public JobManager getJobManager() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/AbstractManager.java
Patch:
@@ -43,7 +43,7 @@
 import org.camunda.bpm.engine.impl.persistence.entity.HistoricCaseActivityInstanceManager;
 import org.camunda.bpm.engine.impl.persistence.entity.HistoricCaseInstanceManager;
 import org.camunda.bpm.engine.impl.persistence.entity.HistoricDetailManager;
-import org.camunda.bpm.engine.impl.persistence.entity.HistoricIdentityLinkManager;
+import org.camunda.bpm.engine.impl.persistence.entity.HistoricIdentityLinkLogManager;
 import org.camunda.bpm.engine.impl.persistence.entity.HistoricIncidentManager;
 import org.camunda.bpm.engine.impl.persistence.entity.HistoricJobLogManager;
 import org.camunda.bpm.engine.impl.persistence.entity.HistoricProcessInstanceManager;
@@ -171,8 +171,8 @@ protected HistoricIncidentManager getHistoricIncidentManager() {
     return getSession(HistoricIncidentManager.class);
   }
 
-  protected HistoricIdentityLinkManager getHistoricIdentityLinkManager() {
-    return getSession(HistoricIdentityLinkManager.class);
+  protected HistoricIdentityLinkLogManager getHistoricIdentityLinkManager() {
+    return getSession(HistoricIdentityLinkLogManager.class);
   }
   
   protected HistoricJobLogManager getHistoricJobLogManager() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java
Patch:
@@ -60,7 +60,7 @@
 import org.camunda.bpm.engine.impl.HistoricActivityInstanceQueryImpl;
 import org.camunda.bpm.engine.impl.HistoricDecisionInstanceQueryImpl;
 import org.camunda.bpm.engine.impl.HistoricDetailQueryImpl;
-import org.camunda.bpm.engine.impl.HistoricIdentityLinkQueryImpl;
+import org.camunda.bpm.engine.impl.HistoricIdentityLinkLogQueryImpl;
 import org.camunda.bpm.engine.impl.HistoricIncidentQueryImpl;
 import org.camunda.bpm.engine.impl.HistoricJobLogQueryImpl;
 import org.camunda.bpm.engine.impl.HistoricProcessInstanceQueryImpl;
@@ -922,7 +922,7 @@ public void configureHistoricIncidentQuery(HistoricIncidentQueryImpl query) {
 
   //historic identity link query ////////////////////////////////
 
-  public void configureHistoricIdentityLinkQuery(HistoricIdentityLinkQueryImpl query) {
+  public void configureHistoricIdentityLinkQuery(HistoricIdentityLinkLogQueryImpl query) {
    configureQuery(query, PROCESS_DEFINITION, "SELF.PROC_DEF_KEY_", READ_HISTORY);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/DeploymentManager.java
Patch:
@@ -97,7 +97,7 @@ public void deleteDeployment(String deploymentId, boolean cascade, boolean skipC
         getHistoricIncidentManager().deleteHistoricIncidentsByProcessDefinitionId(processDefinitionId);
 
         // remove historic identity links which are not reference to a process instance
-        getHistoricIdentityLinkManager().deleteHistoricIdentityLinksByProcessDefinitionId(processDefinitionId);
+        getHistoricIdentityLinkManager().deleteHistoricIdentityLinksLogByProcessDefinitionId(processDefinitionId);
         
         // remove historic job log entries not related to a process instance
         getHistoricJobLogManager().deleteHistoricJobLogsByProcessDefinitionId(processDefinitionId);

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricIdentityLinkLogEntity.java
Patch:
@@ -1,13 +1,13 @@
 package org.camunda.bpm.engine.impl.persistence.entity;
 
-import org.camunda.bpm.engine.history.HistoricIdentityLink;
-import org.camunda.bpm.engine.impl.history.event.HistoricIdentityLinkEventEntity;
+import org.camunda.bpm.engine.history.HistoricIdentityLinkLog;
+import org.camunda.bpm.engine.impl.history.event.HistoricIdentityLinkLogEventEntity;
 
 /**
  * 
  * @author Deivarayan Azhagappan
  *
  */
-public class HistoricIdentityLinkEntity extends HistoricIdentityLinkEventEntity implements HistoricIdentityLink{
+public class HistoricIdentityLinkLogEntity extends HistoricIdentityLinkLogEventEntity implements HistoricIdentityLinkLog{
 	private static final long serialVersionUID = 1L;
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricTaskInstanceManager.java
Patch:
@@ -121,7 +121,7 @@ public void deleteHistoricTaskInstanceById(final String taskId) {
 
         commandContext
           .getHistoricIdentityLinkManager()
-          .deleteHistoricIdentityLinksByTaskId(taskId);
+          .deleteHistoricIdentityLinksLogByTaskId(taskId);
         
         getDbEntityManager().delete(historicTaskInstance);
       }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TableDataManager.java
Patch:
@@ -96,7 +96,7 @@ public class TableDataManager extends AbstractManager {
 
     persistentObjectToTableNameMap.put(HistoricCaseInstanceEntity.class, "ACT_HI_CASEINST");
     persistentObjectToTableNameMap.put(HistoricCaseActivityInstanceEntity.class, "ACT_HI_CASEACTINST");
-    persistentObjectToTableNameMap.put(HistoricIdentityLinkEntity.class, "ACT_HI_IDENTITYLINK");
+    persistentObjectToTableNameMap.put(HistoricIdentityLinkLogEntity.class, "ACT_HI_IDENTITYLINK");
     // a couple of stuff goes to the same table
     persistentObjectToTableNameMap.put(HistoricFormPropertyEntity.class, "ACT_HI_DETAIL");
     persistentObjectToTableNameMap.put(HistoricVariableInstanceEntity.class, "ACT_HI_DETAIL");

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/parser/IncidentInstanceHandler.java
Patch:
@@ -28,7 +28,7 @@ public void handle(MigratingInstanceParseContext parseContext, IncidentEntity in
     if (IncidentEntity.FAILED_JOB_HANDLER_TYPE.equals(incident.getIncidentType())) {
       MigratingJobInstance owningInstance = parseContext.getMigratingJobInstanceById(incident.getConfiguration());
       parseContext.consume(incident);
-      if (owningInstance.migrates()) {
+      if (owningInstance != null && owningInstance.migrates()) {
         MigratingIncident migratingIncident = new MigratingIncident(incident, owningInstance.getTargetScope());
         owningInstance.addMigratingDependentInstance(migratingIncident);
       }

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricIdentityLinkQueryProperty.java
Patch:
@@ -10,7 +10,7 @@ public interface HistoricIdentityLinkQueryProperty {
   public static final QueryProperty USER_ID = new QueryPropertyImpl("USER_ID_");
   public static final QueryProperty GROUP_ID = new QueryPropertyImpl("GROUP_ID_");
   public static final QueryProperty TASK_ID = new QueryPropertyImpl("TASK_ID_");
-  public static final QueryProperty PROC_DEF_ID = new QueryPropertyImpl("PROC_DEF_ID_");
+  public static final QueryProperty PROC_DEFINITION_ID = new QueryPropertyImpl("PROC_DEF_ID_");
   public static final QueryProperty OPERATION_TYPE = new QueryPropertyImpl("OPERATION_TYPE_");
   public static final QueryProperty ASSIGNER_ID = new QueryPropertyImpl("ASSIGNER_ID_");
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -426,8 +426,7 @@ protected void addAuthorizationsFromIterator(Set<Expression> exprSet, ProcessDef
           identityLink.setGroupId(expr.toString());
         }
         identityLink.setType(IdentityLinkType.CANDIDATE);
-        dbEntityManager.insert(identityLink);
-        identityLink.fireHistoricIdentityLinkEvent(HistoryEventTypes.IDENTITY_LINK_ADD);
+        identityLink.insert();
       }
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -690,7 +690,7 @@ protected void initHistoricIdentityLinkEvent(HistoricIdentityLinkEventEntity evt
     evt.setUserId(identityLink.getUserId());
     evt.setGroupId(identityLink.getGroupId());
     evt.setTaskId(identityLink.getTaskId());
-    evt.setProcessDefId(identityLink.getProcessDefId());
+    evt.setProcessDefinitionId(identityLink.getProcessDefId());
 
     // There is a conflict in HistoryEventTypes for 'delete' keyword,
     // So HistoryEventTypes.IDENTITY_LINK_ADD /

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/testing/ProcessEngineRuleJunit4Test.java
Patch:
@@ -71,7 +71,6 @@ public void requiredHistoryLevelAudit() {
 
     assertThat(currentHistoryLevel(),
         CoreMatchers.<String>either(is(ProcessEngineConfiguration.HISTORY_AUDIT))
-        .or(is(ProcessEngineConfiguration.HISTORY_ACTIVITY))
         .or(is(ProcessEngineConfiguration.HISTORY_FULL)));
   }
 
@@ -81,6 +80,7 @@ public void requiredHistoryLevelActivity() {
 
     assertThat(currentHistoryLevel(),
         CoreMatchers.<String>either(is(ProcessEngineConfiguration.HISTORY_ACTIVITY))
+        .or(is(ProcessEngineConfiguration.HISTORY_AUDIT))
         .or(is(ProcessEngineConfiguration.HISTORY_FULL)));
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/testing/ProcessEngineRuleRequiredHistoryLevelClassTest.java
Patch:
@@ -34,7 +34,6 @@ public void requiredHistoryLevelOnClass() {
 
     assertThat(currentHistoryLevel(),
         CoreMatchers.<String>either(is(ProcessEngineConfiguration.HISTORY_AUDIT))
-        .or(is(ProcessEngineConfiguration.HISTORY_ACTIVITY))
         .or(is(ProcessEngineConfiguration.HISTORY_FULL)));
   }
 
@@ -44,6 +43,7 @@ public void overrideRequiredHistoryLevelOnClass() {
 
     assertThat(currentHistoryLevel(),
         CoreMatchers.<String>either(is(ProcessEngineConfiguration.HISTORY_ACTIVITY))
+        .or(is(ProcessEngineConfiguration.HISTORY_AUDIT))
         .or(is(ProcessEngineConfiguration.HISTORY_FULL)));
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/testing/ProcessEngineRuleRequiredHistoryLevelSuperClassTest.java
Patch:
@@ -31,7 +31,6 @@ public void requiredHistoryLevelOnSuperClass() {
 
     assertThat(currentHistoryLevel(),
         CoreMatchers.<String>either(is(ProcessEngineConfiguration.HISTORY_AUDIT))
-        .or(is(ProcessEngineConfiguration.HISTORY_ACTIVITY))
         .or(is(ProcessEngineConfiguration.HISTORY_FULL)));
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/testing/ProcessEngineTestCaseTest.java
Patch:
@@ -54,7 +54,6 @@ public void testRequiredHistoryLevelAudit() {
 
     assertThat(currentHistoryLevel(),
         CoreMatchers.<String>either(is(ProcessEngineConfiguration.HISTORY_AUDIT))
-        .or(is(ProcessEngineConfiguration.HISTORY_ACTIVITY))
         .or(is(ProcessEngineConfiguration.HISTORY_FULL)));
   }
 
@@ -63,6 +62,7 @@ public void testRequiredHistoryLevelActivity() {
 
     assertThat(currentHistoryLevel(),
         CoreMatchers.<String>either(is(ProcessEngineConfiguration.HISTORY_ACTIVITY))
+        .or(is(ProcessEngineConfiguration.HISTORY_AUDIT))
         .or(is(ProcessEngineConfiguration.HISTORY_FULL)));
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/ExternalTaskService.java
Patch:
@@ -181,7 +181,9 @@ public interface ExternalTaskService {
 
   /**
    * <p>Signals that an business error appears, which should be handled by the process engine. 
-   * The task must be assigned to the given worker.</p>
+   * The task must be assigned to the given worker. The error will be propagated to the next error handler.
+   * Is no existing error handler for the given bpmn error the activity instance of the external task
+   * ends.</p>
    * 
    * 
    * @param externalTaskId the id of the external task to report a bpmn error

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/CompleteExternalTaskCmd.java
Patch:
@@ -30,7 +30,7 @@ public CompleteExternalTaskCmd(String externalTaskId, String workerId, Map<Strin
   }
 
   @Override
-  public String getBadUserRequestMessage() {
+  public String getErrorMessageOnWrongWorkerAccess() {
     return "External Task " + externalTaskId + " cannot be completed by worker '" + workerId;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/HandleExternalTaskFailureCmd.java
Patch:
@@ -46,7 +46,7 @@ protected void validateInput() {
   }
 
   @Override
-  public String getBadUserRequestMessage() {
+  public String getErrorMessageOnWrongWorkerAccess() {
     return "Failure of External Task " + externalTaskId + " cannot be reported by worker '" + workerId;
   }
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/testing/ProcessEngineRuleJunit4Test.java
Patch:
@@ -13,7 +13,6 @@
 
 package org.camunda.bpm.engine.test.standalone.testing;
 
-import static org.hamcrest.CoreMatchers.either;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertThat;
@@ -25,6 +24,7 @@
 import org.camunda.bpm.engine.test.Deployment;
 import org.camunda.bpm.engine.test.ProcessEngineRule;
 import org.camunda.bpm.engine.test.RequiredHistoryLevel;
+import org.hamcrest.CoreMatchers;
 import org.junit.Rule;
 import org.junit.Test;
 
@@ -70,7 +70,7 @@ public void testWithoutDeploymentAnnotation() {
   public void requiredHistoryLevelAudit() {
 
     assertThat(currentHistoryLevel(),
-        either(is(ProcessEngineConfiguration.HISTORY_AUDIT))
+        CoreMatchers.<String>either(is(ProcessEngineConfiguration.HISTORY_AUDIT))
         .or(is(ProcessEngineConfiguration.HISTORY_ACTIVITY))
         .or(is(ProcessEngineConfiguration.HISTORY_FULL)));
   }
@@ -80,7 +80,7 @@ public void requiredHistoryLevelAudit() {
   public void requiredHistoryLevelActivity() {
 
     assertThat(currentHistoryLevel(),
-        either(is(ProcessEngineConfiguration.HISTORY_ACTIVITY))
+        CoreMatchers.<String>either(is(ProcessEngineConfiguration.HISTORY_ACTIVITY))
         .or(is(ProcessEngineConfiguration.HISTORY_FULL)));
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/testing/ProcessEngineRuleRequiredHistoryLevelClassTest.java
Patch:
@@ -13,13 +13,13 @@
 
 package org.camunda.bpm.engine.test.standalone.testing;
 
-import static org.hamcrest.CoreMatchers.either;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 
 import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.test.ProcessEngineRule;
 import org.camunda.bpm.engine.test.RequiredHistoryLevel;
+import org.hamcrest.CoreMatchers;
 import org.junit.Rule;
 import org.junit.Test;
 
@@ -33,7 +33,7 @@ public class ProcessEngineRuleRequiredHistoryLevelClassTest {
   public void requiredHistoryLevelOnClass() {
 
     assertThat(currentHistoryLevel(),
-        either(is(ProcessEngineConfiguration.HISTORY_AUDIT))
+        CoreMatchers.<String>either(is(ProcessEngineConfiguration.HISTORY_AUDIT))
         .or(is(ProcessEngineConfiguration.HISTORY_ACTIVITY))
         .or(is(ProcessEngineConfiguration.HISTORY_FULL)));
   }
@@ -43,7 +43,7 @@ public void requiredHistoryLevelOnClass() {
   public void overrideRequiredHistoryLevelOnClass() {
 
     assertThat(currentHistoryLevel(),
-        either(is(ProcessEngineConfiguration.HISTORY_ACTIVITY))
+        CoreMatchers.<String>either(is(ProcessEngineConfiguration.HISTORY_ACTIVITY))
         .or(is(ProcessEngineConfiguration.HISTORY_FULL)));
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/testing/ProcessEngineRuleRequiredHistoryLevelSuperClassTest.java
Patch:
@@ -13,11 +13,11 @@
 
 package org.camunda.bpm.engine.test.standalone.testing;
 
-import static org.hamcrest.CoreMatchers.either;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 
 import org.camunda.bpm.engine.ProcessEngineConfiguration;
+import org.hamcrest.CoreMatchers;
 import org.junit.Test;
 
 /**
@@ -30,7 +30,7 @@ public class ProcessEngineRuleRequiredHistoryLevelSuperClassTest extends Process
   public void requiredHistoryLevelOnSuperClass() {
 
     assertThat(currentHistoryLevel(),
-        either(is(ProcessEngineConfiguration.HISTORY_AUDIT))
+        CoreMatchers.<String>either(is(ProcessEngineConfiguration.HISTORY_AUDIT))
         .or(is(ProcessEngineConfiguration.HISTORY_ACTIVITY))
         .or(is(ProcessEngineConfiguration.HISTORY_FULL)));
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/testing/ProcessEngineTestCaseTest.java
Patch:
@@ -13,7 +13,6 @@
 
 package org.camunda.bpm.engine.test.standalone.testing;
 
-import static org.hamcrest.CoreMatchers.either;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 
@@ -24,6 +23,7 @@
 import org.camunda.bpm.engine.test.Deployment;
 import org.camunda.bpm.engine.test.ProcessEngineTestCase;
 import org.camunda.bpm.engine.test.RequiredHistoryLevel;
+import org.hamcrest.CoreMatchers;
 
 
 /**
@@ -53,7 +53,7 @@ public void testSimpleProcess() {
   public void testRequiredHistoryLevelAudit() {
 
     assertThat(currentHistoryLevel(),
-        either(is(ProcessEngineConfiguration.HISTORY_AUDIT))
+        CoreMatchers.<String>either(is(ProcessEngineConfiguration.HISTORY_AUDIT))
         .or(is(ProcessEngineConfiguration.HISTORY_ACTIVITY))
         .or(is(ProcessEngineConfiguration.HISTORY_FULL)));
   }
@@ -62,7 +62,7 @@ public void testRequiredHistoryLevelAudit() {
   public void testRequiredHistoryLevelActivity() {
 
     assertThat(currentHistoryLevel(),
-        either(is(ProcessEngineConfiguration.HISTORY_ACTIVITY))
+        CoreMatchers.<String>either(is(ProcessEngineConfiguration.HISTORY_ACTIVITY))
         .or(is(ProcessEngineConfiguration.HISTORY_FULL)));
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/ExternalTaskQueryProperty.java
Patch:
@@ -26,5 +26,6 @@ public interface ExternalTaskQueryProperty {
   public static final QueryProperty PROCESS_DEFINITION_ID = new QueryPropertyImpl("PROC_DEF_ID_");
   public static final QueryProperty PROCESS_DEFINITION_KEY = new QueryPropertyImpl("PROC_DEF_KEY_");
   public static final QueryProperty TENANT_ID = new QueryPropertyImpl("TENANT_ID_");
+  public static final QueryProperty PRIORITY = new QueryPropertyImpl("PRIORITY_");
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/ExternalTaskQueryImpl.java
Patch:
@@ -167,7 +167,7 @@ public ExternalTaskQuery orderByProcessDefinitionKey() {
   public ExternalTaskQuery orderByTenantId() {
     return orderBy(ExternalTaskQueryProperty.TENANT_ID);
   }
-
+  
   @Override
   public long executeCount(CommandContext commandContext) {
     checkQueryOk();

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricCaseActivityInstanceRestServiceInteractionTest.java
Patch:
@@ -87,6 +87,7 @@ public void testGetSingleHistoricCaseInstance() {
     String returnedCalledCaseInstanceId = from(content).getString("calledCaseInstanceId");
     String returnedCreateTime = from(content).getString("createTime");
     String returnedEndTime = from(content).getString("endTime");
+    String returnedTenantId = from(content).getString("tenantId");
     long returnedDurationInMillis = from(content).getLong("durationInMillis");
     boolean required = from(content).getBoolean("required");
     boolean available = from(content).getBoolean("available");
@@ -109,6 +110,7 @@ public void testGetSingleHistoricCaseInstance() {
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_CASE_ACTIVITY_INSTANCE_CALLED_CASE_INSTANCE_ID, returnedCalledCaseInstanceId);
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_CASE_ACTIVITY_INSTANCE_CREATE_TIME, returnedCreateTime);
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_CASE_ACTIVITY_INSTANCE_END_TIME, returnedEndTime);
+    Assert.assertEquals(MockProvider.EXAMPLE_TENANT_ID, returnedTenantId);
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_CASE_ACTIVITY_INSTANCE_DURATION, returnedDurationInMillis);
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_CASE_ACTIVITY_INSTANCE_IS_REQUIRED, required);
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_CASE_ACTIVITY_INSTANCE_IS_AVAILABLE, available);

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricCaseActivityInstanceQueryProperty.java
Patch:
@@ -33,5 +33,6 @@ public interface HistoricCaseActivityInstanceQueryProperty {
   public static final QueryProperty CREATE = new QueryPropertyImpl("CREATE_TIME_");
   public static final QueryProperty END = new QueryPropertyImpl("END_TIME_");
   public static final QueryProperty DURATION = new QueryPropertyImpl("DURATION_");
+  public static final QueryProperty TENANT_ID = new QueryPropertyImpl("TENANT_ID_");
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultCmmnHistoryEventProducer.java
Patch:
@@ -190,6 +190,8 @@ protected void initCaseActivityInstanceEvent(HistoricCaseActivityInstanceEventEn
     evt.setCaseActivityId(caseExecutionEntity.getActivityId());
     evt.setCaseActivityName(caseExecutionEntity.getActivityName());
     evt.setCaseActivityType(caseExecutionEntity.getActivityType());
+
+    evt.setTenantId(caseExecutionEntity.getTenantId());
   }
 
 }

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricCaseInstanceRestServiceInteractionTest.java
Patch:
@@ -83,6 +83,7 @@ public void testGetSingleHistoricCaseInstance() {
     String returnedCreateUserId = from(content).getString("createUserId");
     String returnedSuperCaseInstanceId = from(content).getString("superCaseInstanceId");
     String returnedSuperProcessInstanceId = from(content).getString("superProcessInstanceId");
+    String returnedTenantId = from(content).getString("tenantId");
     boolean active = from(content).getBoolean("active");
     boolean completed = from(content).getBoolean("completed");
     boolean terminated = from(content).getBoolean("terminated");
@@ -97,6 +98,7 @@ public void testGetSingleHistoricCaseInstance() {
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_CASE_INSTANCE_CREATE_USER_ID, returnedCreateUserId);
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_CASE_INSTANCE_SUPER_CASE_INSTANCE_ID, returnedSuperCaseInstanceId);
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_CASE_INSTANCE_SUPER_PROCESS_INSTANCE_ID, returnedSuperProcessInstanceId);
+    Assert.assertEquals(MockProvider.EXAMPLE_TENANT_ID, returnedTenantId);
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_CASE_INSTANCE_IS_ACTIVE, active);
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_CASE_INSTANCE_IS_COMPLETED, completed);
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_CASE_INSTANCE_IS_TERMINATED, terminated);

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricCaseInstanceQueryProperty.java
Patch:
@@ -29,5 +29,6 @@ public interface HistoricCaseInstanceQueryProperty {
   public static final QueryProperty CREATE_TIME = new QueryPropertyImpl("CREATE_TIME_");
   public static final QueryProperty CLOSE_TIME = new QueryPropertyImpl("CLOSE_TIME_");
   public static final QueryProperty DURATION = new QueryPropertyImpl("DURATION_");
+  public static final QueryProperty TENANT_ID = new QueryPropertyImpl("TENANT_ID_");
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultCmmnHistoryEventProducer.java
Patch:
@@ -165,6 +165,7 @@ protected void initCaseInstanceEvent(HistoricCaseInstanceEventEntity evt, CaseEx
     evt.setCaseExecutionId(caseExecutionEntity.getId());
     evt.setBusinessKey(caseExecutionEntity.getBusinessKey());
     evt.setState(caseExecutionEntity.getState());
+    evt.setTenantId(caseExecutionEntity.getTenantId());
   }
 
   protected HistoricCaseActivityInstanceEventEntity newCaseActivityInstanceEventEntity(CaseExecutionEntity caseExecutionEntity) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/ProcessDefinitionQueryImpl.java
Patch:
@@ -33,6 +33,8 @@
 import org.camunda.bpm.model.bpmn.BpmnModelInstance;
 import org.camunda.bpm.model.bpmn.instance.Documentation;
 import org.camunda.bpm.model.xml.instance.ModelElementInstance;
+import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
+import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensurePositive;
 
 
 /**

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricIdentityLinkQueryTest.java
Patch:
@@ -314,7 +314,7 @@ public void testQueryAddAndRemoveIdentityLinksForProcessDefinition() throws Exce
     assertEquals(query.operationType(IDENTITY_LINK_DELETE).count(), 2);
   }
 
-  @Deployment(resources = { "org/camunda/bpm/engine/test/api/runtime/oneTaskProcessWithMultipleCandidateUser.bpmn20.xml" })
+  @Deployment(resources = { "org/camunda/bpm/engine/test/api/runtime/OneTaskProcessWithMultipleCandidateUser.bpmn20.xml" })
   public void testHistoricIdentityLinkQueryPaging() {
     startProcessInstance(PROCESS_DEFINITION_KEY_MULTIPLE_CANDIDATE_USER);
 
@@ -326,7 +326,7 @@ public void testHistoricIdentityLinkQueryPaging() {
     assertEquals(3, query.listPage(1, 4).size());
   }
   
-  @Deployment(resources = { "org/camunda/bpm/engine/test/api/runtime/oneTaskProcessWithMultipleCandidateUser.bpmn20.xml" })
+  @Deployment(resources = { "org/camunda/bpm/engine/test/api/runtime/OneTaskProcessWithMultipleCandidateUser.bpmn20.xml" })
   public void testHistoricIdentityLinkQuerySorting() {
     
     // Pre test - Historical identity link is added as part of deployment

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/StatisticsRestTest.java
Patch:
@@ -106,6 +106,7 @@ public void testProcessDefinitionStatisticsRetrieval() {
       .body("[0].definition.resource", equalTo(MockProvider.EXAMPLE_PROCESS_DEFINITION_RESOURCE_NAME))
       .body("[0].definition.diagram", equalTo(MockProvider.EXAMPLE_PROCESS_DEFINITION_DIAGRAM_RESOURCE_NAME))
       .body("[0].definition.tenantId", equalTo(MockProvider.EXAMPLE_TENANT_ID))
+      .body("[0].definition.semanticVersion", equalTo(MockProvider.EXAMPLE_SEMANTIC_VERSION))
     .when().get(PROCESS_DEFINITION_STATISTICS_URL);
   }
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -974,6 +974,7 @@ public static List<ProcessDefinitionStatistics> createMockProcessDefinitionStati
     when(statistics.getName()).thenReturn(EXAMPLE_PROCESS_DEFINITION_NAME);
     when(statistics.getKey()).thenReturn(EXAMPLE_PROCESS_DEFINITION_KEY);
     when(statistics.getTenantId()).thenReturn(EXAMPLE_TENANT_ID);
+    when(statistics.getSemanticVersion()).thenReturn(EXAMPLE_SEMANTIC_VERSION);
     when(statistics.getCategory()).thenReturn(EXAMPLE_PROCESS_DEFINITION_CATEGORY);
     when(statistics.getDeploymentId()).thenReturn(EXAMPLE_DEPLOYMENT_ID);
     when(statistics.getDiagramResourceName()).thenReturn(EXAMPLE_PROCESS_DEFINITION_DIAGRAM_RESOURCE_NAME);
@@ -996,6 +997,7 @@ public static List<ProcessDefinitionStatistics> createMockProcessDefinitionStati
     when(anotherStatistics.getName()).thenReturn(EXAMPLE_PROCESS_DEFINITION_NAME);
     when(anotherStatistics.getKey()).thenReturn(EXAMPLE_PROCESS_DEFINITION_KEY);
     when(anotherStatistics.getTenantId()).thenReturn(ANOTHER_EXAMPLE_TENANT_ID);
+    when(anotherStatistics.getSemanticVersion()).thenReturn(ANOTHER_EXAMPLE_SEMANTIC_VERSION);
 
     IncidentStatistics anotherIncidentStaticits = mock(IncidentStatistics.class);
     when(anotherIncidentStaticits.getIncidentType()).thenReturn(ANOTHER_EXAMPLE_INCIDENT_TYPE);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/CommandLogger.java
Patch:
@@ -203,4 +203,7 @@ public BadUserRequestException exceptionUpdateSuspensionStateForTenantOnlyByProc
         "032", "Can only specify a tenant-id when update the suspension state which is referenced by process definition key."));
   }
 
+  public ProcessEngineException exceptionBpmnErrorPropagationFailed(String errorCode, Throwable cause) {
+    return new ProcessEngineException(exceptionMessage("032", "Propagation of bpmn error {} failed. ", errorCode), cause);
+  }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/HandleExternalTaskBpmnErrorCmd.java
Patch:
@@ -56,7 +56,7 @@ public void execute(ExternalTaskEntity externalTask) {
     try {
       ( (ExternalTaskActivityBehavior) activityExecution.getActivity().getActivityBehavior()).propagateBpmnError(bpmnError, activityExecution);      
     } catch (Exception ex) {
-      ProcessEngineLogger.BPMN_BEHAVIOR_LOGGER.errorPropagationException(workerId, ex);
+      throw ProcessEngineLogger.CMD_LOGGER.exceptionBpmnErrorPropagationFailed(errorCode, ex);
     }    
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -227,8 +227,8 @@ public class DbSqlSessionFactory implements SessionFactory {
     databaseSpecificLimitBeforeNativeQueryStatements.put(DB2, "SELECT SUB.* FROM ( select RES.* , row_number() over (ORDER BY ${orderBy}) rnk FROM (");
 
     databaseSpecificBitAnd1.put(DB2, "BITAND(");
-    databaseSpecificBitAnd2.put(DB2, ",");
-    databaseSpecificBitAnd3.put(DB2, ")");
+    databaseSpecificBitAnd2.put(DB2, ", CAST(");
+    databaseSpecificBitAnd3.put(DB2, " AS Integer))");
     databaseSpecificDatepart1.put(DB2, "");
     databaseSpecificDatepart2.put(DB2, "(");
     databaseSpecificDatepart3.put(DB2, ")");

File: engine/src/main/java/org/camunda/bpm/engine/impl/interceptor/Command.java
Patch:
@@ -19,6 +19,6 @@
  */
 public interface Command <T> {
 
-  T execute(CommandContext commandContext) throws Exception;
+  T execute(CommandContext commandContext);
   
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/interceptor/Command.java
Patch:
@@ -19,6 +19,6 @@
  */
 public interface Command <T> {
 
-  T execute(CommandContext commandContext);
+  T execute(CommandContext commandContext) throws Exception;
   
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/multitenancy/MultiTenancyDecisionTaskTest.java
Patch:
@@ -53,8 +53,8 @@ public void testEvaluateDecisionRefTenantIdConstant() {
   }
 
   public void testEvaluateDecisionRefWithoutTenantIdConstant() {
-    deployment(CMMN_WITHOUT_TENANT);
-    deploymentForTenant(TENANT_ONE, DMN_FILE);
+    deploymentForTenant(TENANT_ONE, CMMN_WITHOUT_TENANT);
+    deployment(DMN_FILE);
     deploymentForTenant(TENANT_TWO, DMN_FILE_VERSION_TWO);
 
     CaseInstance caseInstance = caseService.withCaseDefinitionByKey(CASE_DEFINITION_KEY).setVariable("status", "gold").create();

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationBoundaryEventsTest.java
Patch:
@@ -1630,7 +1630,6 @@ public void testMigrateIncidentForJob() {
     // if the timer job is triggered the failing delegate fails and an incident is created
     executeJob(jobBeforeMigration);
     Incident incidentBeforeMigration = rule.getRuntimeService().createIncidentQuery().singleResult();
-    assertEquals("userTask", incidentBeforeMigration.getActivityId());
 
     MigrationPlan migrationPlan = rule.getRuntimeService()
       .createMigrationPlan(sourceProcessDefinition.getId(), targetProcessDefinition.getId())

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationRemoveBoundaryEventsTest.java
Patch:
@@ -856,7 +856,7 @@ public void testRemoveIncidentForJob() {
     // if the timer job is triggered the failing delegate fails and an incident is created
     executeJob(jobBeforeMigration);
     Incident incidentBeforeMigration = rule.getRuntimeService().createIncidentQuery().singleResult();
-    assertEquals("userTask", incidentBeforeMigration.getActivityId());
+    assertEquals("boundary", incidentBeforeMigration.getActivityId());
 
     MigrationPlan migrationPlan = rule.getRuntimeService()
       .createMigrationPlan(sourceProcessDefinition.getId(), targetProcessDefinition.getId())

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/CaseExecutionRestServiceInteractionTest.java
Patch:
@@ -164,6 +164,7 @@ public void testCaseExecutionRetrieval() {
         .body("activityName", equalTo(MockProvider.EXAMPLE_CASE_EXECUTION_ACTIVITY_NAME))
         .body("activityType", equalTo(MockProvider.EXAMPLE_CASE_EXECUTION_ACTIVITY_TYPE))
         .body("activityDescription", equalTo(MockProvider.EXAMPLE_CASE_EXECUTION_ACTIVITY_DESCRIPTION))
+        .body("tenantId", equalTo(MockProvider.EXAMPLE_TENANT_ID))
         .body("required", equalTo(MockProvider.EXAMPLE_CASE_EXECUTION_IS_REQUIRED))
         .body("active", equalTo(MockProvider.EXAMPLE_CASE_EXECUTION_IS_ACTIVE))
         .body("enabled", equalTo(MockProvider.EXAMPLE_CASE_EXECUTION_IS_ENABLED))

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/CaseInstanceRestServiceInteractionTest.java
Patch:
@@ -158,6 +158,7 @@ public void testCaseInstanceRetrieval() {
         .body("id", equalTo(MockProvider.EXAMPLE_CASE_INSTANCE_ID))
         .body("businessKey", equalTo(MockProvider.EXAMPLE_CASE_INSTANCE_BUSINESS_KEY))
         .body("caseDefinitionId", equalTo(MockProvider.EXAMPLE_CASE_INSTANCE_CASE_DEFINITION_ID))
+        .body("tenantId", equalTo(MockProvider.EXAMPLE_TENANT_ID))
         .body("active", equalTo(MockProvider.EXAMPLE_CASE_INSTANCE_IS_ACTIVE))
         .body("completed", equalTo(MockProvider.EXAMPLE_CASE_INSTANCE_IS_COMPLETED))
         .body("terminated", equalTo(MockProvider.EXAMPLE_CASE_INSTANCE_IS_TERMINATED))

File: engine/src/main/java/org/camunda/bpm/engine/delegate/DelegateCaseExecution.java
Patch:
@@ -34,6 +34,8 @@ public interface DelegateCaseExecution extends BaseDelegateExecution, ProcessEng
 
   String getActivityName();
 
+  String getTenantId();
+
   boolean isAvailable();
 
   boolean isEnabled();

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/entity/runtime/CaseExecutionQueryProperty.java
Patch:
@@ -24,5 +24,6 @@ public interface CaseExecutionQueryProperty {
   public static final QueryProperty CASE_EXECUTION_ID = new QueryPropertyImpl("ID_");
   public static final QueryProperty CASE_DEFINITION_ID = new QueryPropertyImpl("CASE_DEF_ID_");
   public static final QueryProperty CASE_DEFINITION_KEY = new QueryPropertyImpl("KEY_");
+  public static final QueryProperty TENANT_ID = new QueryPropertyImpl("TENANT_ID_");
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/entity/runtime/CaseInstanceQueryProperty.java
Patch:
@@ -24,5 +24,6 @@ public interface CaseInstanceQueryProperty {
   public static final QueryProperty CASE_INSTANCE_ID = new QueryPropertyImpl("ID_");
   public static final QueryProperty CASE_DEFINITION_KEY = new QueryPropertyImpl("KEY_");
   public static final QueryProperty CASE_DEFINITION_ID = new QueryPropertyImpl("CASE_DEF_ID_");
+  public static final QueryProperty TENANT_ID = new QueryPropertyImpl("TENANT_ID_");
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/model/CmmnCaseDefinition.java
Patch:
@@ -50,7 +50,6 @@ public CmmnCaseInstance createCaseInstance(String businessKey) {
     // get the case plan model as "initial" activity
     CmmnActivity casePlanModel = getActivities().get(0);
 
-
     // set the case plan model activity
     caseInstance.setActivity(casePlanModel);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/VariableInstanceEntity.java
Patch:
@@ -205,10 +205,12 @@ public void setCaseExecution(CaseExecutionEntity caseExecution) {
     if (caseExecution != null) {
       this.caseInstanceId = caseExecution.getCaseInstanceId();
       this.caseExecutionId = caseExecution.getId();
+      this.tenantId = caseExecution.getTenantId();
     }
     else {
       this.caseInstanceId = null;
       this.caseExecutionId = null;
+      this.tenantId = null;
     }
   }
 

File: qa/integration-tests-webapps/src/test/java/org/camunda/bpm/cockpit/DashboardIT.java
Patch:
@@ -33,7 +33,7 @@ public void testLogin() throws URISyntaxException {
     WebElement submit = wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("button[type=\"submit\"]")));
     submit.submit();
 
-    wait.until(ExpectedConditions.textToBePresentInElementLocated(By.tagName("h3"), "1 process definition deployed"));
+    wait.until(ExpectedConditions.textToBePresentInElementLocated(By.cssSelector("[ng-repeat=\"propName in procDefStatsKeys\"]:first-child"), "1 process definition"));
 
     wait.until(currentURIIs(new URI(appUrl + "/default/#/dashboard")));
   }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/mapper/MultipartPayloadProvider.java
Patch:
@@ -48,7 +48,7 @@
 */
 @Provider
 @Consumes(MediaType.MULTIPART_FORM_DATA)
-public final class MultipartPayloadProvider implements MessageBodyReader<MultipartFormData> {
+public class MultipartPayloadProvider implements MessageBodyReader<MultipartFormData> {
 
   public static final String TYPE_NAME = "multipart";
   public static final String SUB_TYPE_NAME = "form-data";

File: qa/integration-tests-webapps/src/test/java/org/camunda/bpm/AbstractWebappIntegrationTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.http.params.HttpParams;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.BeforeClass;
 import org.openqa.selenium.chrome.ChromeDriverService;
 
 import java.util.logging.Logger;

File: engine-rest/engine-rest/src/test/java-jersey2/org/camunda/bpm/engine/rest/util/container/JerseyServerBootstrap.java
Patch:
@@ -38,7 +38,7 @@ private void setupServer(Application application) {
     ResourceConfig rc = ResourceConfig.forApplication(application);
 
     Map<String, Object> properties = new HashMap<String, Object>();
-    properties.put(ServerProperties.TRACING, Boolean.TRUE);
+    properties.put(ServerProperties.TRACING, "ALL");
     rc.addProperties(properties);
 
     Properties serverProperties = readProperties();

File: engine/src/test/java/org/camunda/bpm/engine/test/dmn/businessruletask/DmnBusinessRuleTaskTest.java
Patch:
@@ -54,7 +54,7 @@ public void testNoDecisionFound() {
       fail("Exception expected");
     }
     catch (DecisionDefinitionNotFoundException e) {
-      assertTextPresent("no decision definition deployed with key = 'testDecision' and version = '1'", e.getMessage());
+      assertTextPresent("no decision definition deployed with key = 'testDecision', version = '1' and tenant-id 'null", e.getMessage());
     }
   }
 

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/impl/instance/BusinessRuleTaskImpl.java
Patch:
@@ -229,11 +229,11 @@ public void setCamundaMapDecisionResult(String camundaMapDecisionResult) {
   }
 
   public String getCamundaDecisionRefTenantId() {
-    return camundaDecisionRefAttribute.getValue(this);
+    return camundaDecisionRefTenantIdAttribute.getValue(this);
   }
 
   public void setCamundaDecisionRefTenantId(String tenantId) {
-    camundaDecisionRefAttribute.setValue(this, tenantId);
+    camundaDecisionRefTenantIdAttribute.setValue(this, tenantId);
   }
 
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/multitenancy/MultiTenancyDecisionTaskTest.java
Patch:
@@ -30,8 +30,8 @@ public class MultiTenancyDecisionTaskTest extends PluggableProcessEngineTestCase
   protected static final String TENANT_ONE = "tenant1";
   protected static final String TENANT_TWO = "tenant2";
 
-  protected static final String DMN_FILE = "org/camunda/bpm/engine/test/api/multiTenancy/simpleDecisionTable.dmn";
-  protected static final String DMN_FILE_VERSION_TWO = "org/camunda/bpm/engine/test/api/multiTenancy/simpleDecisionTable_v2.dmn";
+  protected static final String DMN_FILE = "org/camunda/bpm/engine/test/api/multitenancy/simpleDecisionTable.dmn";
+  protected static final String DMN_FILE_VERSION_TWO = "org/camunda/bpm/engine/test/api/multitenancy/simpleDecisionTable_v2.dmn";
 
   public void testEvaluateDecisionTaskWithDeploymentBinding() {
 
@@ -118,7 +118,7 @@ public void testEvaluateDecisionTaskWithLatestBindingDifferentVersion() {
     assertThat((String)runtimeService.getVariable(processInstanceOne.getId(), "decisionVar"), is("A"));
     assertThat((String)runtimeService.getVariable(processInstanceTwo.getId(), "decisionVar"), is("C"));
 
-    // check whether DMN_FILE_VERSION_TWO version 2 is really used 
+    // check whether DMN_FILE_VERSION_TWO version 2 is really used
     DecisionDefinition latestDecisionDefinitionTenantTwo = repositoryService.createDecisionDefinitionQuery()
         .tenantIdIn(TENANT_TWO).decisionDefinitionKey("decision").latestVersion().singleResult();
 

File: qa/integration-tests-engine/src/test/java-glassfish-servlet/org/camunda/bpm/integrationtest/util/TestContainer.java
Patch:
@@ -40,11 +40,11 @@ public static void addContainerSpecificProcessEngineConfigurationClass(WebArchiv
   }
 
   public static void addSpinJacksonJsonDataFormat(WebArchive webArchive) {
-    webArchive.addAsLibraries(DeploymentHelper.getSpinJacksonJsonDataFormatForServer("glassfish-servlet"));
+    webArchive.addAsLibraries(DeploymentHelper.getSpinJacksonJsonDataFormatForServer("glassfish"));
   }
 
   public static void addJodaTimeJacksonModule(WebArchive webArchive) {
-    webArchive.addAsLibraries(DeploymentHelper.getJodaTimeModuleForServer("glassfish-servlet"));
+    webArchive.addAsLibraries(DeploymentHelper.getJodaTimeModuleForServer("glassfish"));
   }
 
   public static void addCommonLoggingDependency(WebArchive webArchive) {

File: qa/integration-tests-engine/src/test/java-jboss-servlet/org/camunda/bpm/integrationtest/util/TestContainer.java
Patch:
@@ -39,7 +39,7 @@ public static void addJodaTimeJacksonModule(WebArchive webArchive) {
   }
 
   public static void addCommonLoggingDependency(WebArchive webArchive) {
-    // nothing to do
+    webArchive.addAsManifestResource("jboss-deployment-structure-with-commons-logging.xml", "jboss-deployment-structure.xml");
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AbstractInstanceCancellationCmd.java
Patch:
@@ -64,7 +64,7 @@ public Void execute(CommandContext commandContext) {
 
   protected void handleChildRemovalInScope(ExecutionEntity removedExecution) {
     // TODO: the following should be closer to PvmAtomicOperationDeleteCascadeFireActivityEnd
-    // once CAM-3604 is fixed (note though that e.g. boundary events expect concurrent executions to be preserved)
+    // (note though that e.g. boundary events expect concurrent executions to be preserved)
     //
     // Idea: attempting to prune and synchronize on the parent is the default behavior when
     // a concurrent child is removed, but scope activities implementing ModificationObserverBehavior

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/entitymanager/cache/DbEntityCache.java
Patch:
@@ -159,6 +159,7 @@ public void putPersistent(DbEntity e) {
     CachedDbEntity cachedDbEntity = new CachedDbEntity();
     cachedDbEntity.setEntity(e);
     cachedDbEntity.setEntityState(PERSISTENT);
+    cachedDbEntity.determineEntityReferences();
     cachedDbEntity.makeCopy();
 
     putInternal(cachedDbEntity);
@@ -173,6 +174,7 @@ public void putMerged(DbEntity e) {
     CachedDbEntity cachedDbEntity = new CachedDbEntity();
     cachedDbEntity.setEntity(e);
     cachedDbEntity.setEntityState(MERGED);
+    cachedDbEntity.determineEntityReferences();
     // no copy required
 
     putInternal(cachedDbEntity);

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/ProcessInstanceModificationCancellationTest.java
Patch:
@@ -194,9 +194,8 @@ public void testCancellationInOneScopeTaskProcess() {
     assertProcessEnded(processInstanceId);
   }
 
-  // TODO: fix CAM-3604 first
   @Deployment(resources = ONE_SCOPE_TASK_PROCESS)
-  public void FAILING_testCancelAllInOneScopeTaskProcess() {
+  public void testCancelAllInOneScopeTaskProcess() {
     // given
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("oneTaskProcess");
     String processInstanceId = processInstance.getId();

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationRemoveSubprocessTest.java
Patch:
@@ -211,7 +211,6 @@ public void testRemoveScopeForConcurrentScopeActivity() {
   }
 
 
-  @Ignore("Suffers of CAM-3604")
   @Test
   public void testRemoveConcurrentScope() {
 
@@ -233,8 +232,8 @@ public void testRemoveConcurrentScope() {
       .hasProcessDefinitionId(targetProcessDefinition.getId())
       .matches(
         describeExecutionTree(null).scope().id(testHelper.snapshotBeforeMigration.getProcessInstanceId())
-          .child("userTask1").concurrent().noScope().up()
-          .child("userTask2").concurrent().noScope()
+          .child("userTask").concurrent().noScope().up()
+          .child("userTask").concurrent().noScope()
           .done());
 
     testHelper.assertActivityTreeAfterMigration().hasStructure(

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestMultipleClasspathRoots.java
Patch:
@@ -89,7 +89,6 @@ public static WebArchive processArchive() {
         .addAsResource(processAssets[1], "directory/processes/process.bpmn")
 
         .addClass(AbstractFoxPlatformIntegrationTest.class)
-        .addClass(TestContainer.class)
         .addClass(TestResourceName.class);
 
     TestContainer.addContainerSpecificResources(archive);

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentDeployChangedOnlyWithJarAsLib.java
Patch:
@@ -68,7 +68,6 @@ public static WebArchive archive1() {
         .addAsLibraries(processArchiveJar)
 
         .addClass(AbstractFoxPlatformIntegrationTest.class)
-        .addClass(TestContainer.class)
         .addClass(TestWarDeploymentDeployChangedOnlyWithJarAsLib.class);
 
     TestContainer.addContainerSpecificResources(archive);
@@ -100,7 +99,6 @@ public static WebArchive archive2() {
         .addAsLibraries(processArchiveJar)
 
         .addClass(AbstractFoxPlatformIntegrationTest.class)
-        .addClass(TestContainer.class)
         .addClass(TestWarDeploymentDeployChangedOnlyWithJarAsLib.class);
 
     TestContainer.addContainerSpecificResources(archive);

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/event/CdiProcessApplicationEventSupportTest.java
Patch:
@@ -43,7 +43,6 @@ public static WebArchive createDeployment() {
         .addAsLibraries(DeploymentHelper.getEngineCdi())
         .addAsResource("META-INF/processes.xml", "META-INF/processes.xml")
         .addClass(AbstractFoxPlatformIntegrationTest.class)
-        .addClass(TestContainer.class)
         .addClass(CdiEventSupportProcessApplication.class)
         .addClass(EventObserverCdiBean.class)
         .addAsResource("org/camunda/bpm/integrationtest/functional/event/ProcessApplicationEventSupportTest.testExecutionListener.bpmn20.xml");

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/event/ProcessApplicationExecutionListenerTest.java
Patch:
@@ -40,7 +40,6 @@ public static WebArchive createDeployment() {
       .addAsLibraries(DeploymentHelper.getEngineCdi())
       .addAsResource("META-INF/processes.xml", "META-INF/processes.xml")
       .addClass(AbstractFoxPlatformIntegrationTest.class)
-      .addClass(TestContainer.class)
       .addClass(ExecutionListenerProcessApplication.class)
       .addAsResource("org/camunda/bpm/integrationtest/functional/event/ProcessApplicationEventSupportTest.testExecutionListener.bpmn20.xml");
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/event/ProcessApplicationTaskListenerTest.java
Patch:
@@ -45,7 +45,6 @@ public static WebArchive createDeployment() {
         .addAsLibraries(DeploymentHelper.getEngineCdi())
         .addAsResource("META-INF/processes.xml", "META-INF/processes.xml")
         .addClass(AbstractFoxPlatformIntegrationTest.class)
-        .addClass(TestContainer.class)
         .addClass(TaskListenerProcessApplication.class)
         .addAsResource("org/camunda/bpm/integrationtest/functional/event/ProcessApplicationEventSupportTest.testTaskListener.bpmn20.xml");
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/metadata/engine/TestProcessEnginesXmlInProcessApplication.java
Patch:
@@ -27,8 +27,7 @@ public static WebArchive processArchive() {
         .addAsWebInfResource(EmptyAsset.INSTANCE, "beans.xml")
         .addAsLibraries(DeploymentHelper.getEngineCdi())
         .addAsResource("singleEngine.xml", "META-INF/processes.xml")
-        .addClass(AbstractFoxPlatformIntegrationTest.class)
-        .addClass(TestContainer.class);
+        .addClass(AbstractFoxPlatformIntegrationTest.class);
 
       TestContainer.addContainerSpecificResources(archive);
       

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/PaDataFormatAndPostDeployTest.java
Patch:
@@ -18,7 +18,6 @@
 import org.camunda.bpm.integrationtest.functional.spin.dataformat.FooDataFormatProvider;
 import org.camunda.bpm.integrationtest.functional.spin.dataformat.FooSpin;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
-import org.camunda.bpm.integrationtest.util.TestContainer;
 import org.camunda.spin.spi.DataFormatProvider;
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.arquillian.junit.Arquillian;
@@ -42,7 +41,6 @@ public static WebArchive createDeployment() {
         .addClass(PaDataformatAndPostDeployApp.class)
         .addAsResource("META-INF/processes.xml")
         .addClass(AbstractFoxPlatformIntegrationTest.class)
-        .addClass(TestContainer.class)
         .addAsResource("org/camunda/bpm/integrationtest/oneTaskProcess.bpmn")
         .addClass(Foo.class)
         .addClass(FooDataFormat.class)

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/PaDataFormatConfiguratorFailingTest.java
Patch:
@@ -12,8 +12,6 @@
  */
 package org.camunda.bpm.integrationtest.functional.spin;
 
-import java.util.Set;
-
 import org.camunda.bpm.BpmPlatform;
 import org.camunda.bpm.integrationtest.functional.spin.dataformat.FailingJsonDataFormatConfigurator;
 import org.camunda.bpm.integrationtest.functional.spin.dataformat.JsonSerializable;
@@ -32,6 +30,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import java.util.Set;
+
 /**
  * @author Thorben Lindhauer
  *
@@ -47,7 +47,6 @@ public static WebArchive createDeployment() {
     WebArchive webArchive = ShrinkWrap.create(WebArchive.class, "PaDataFormatConfiguratorFailingTest.war")
         .addAsResource("META-INF/processes.xml")
         .addClass(AbstractFoxPlatformIntegrationTest.class)
-        .addClass(TestContainer.class)
         .addClass(ReferenceStoringProcessApplication.class)
         .addAsResource("org/camunda/bpm/integrationtest/oneTaskProcess.bpmn")
         .addClass(JsonSerializable.class)

File: engine/src/main/java/org/camunda/bpm/container/impl/ContainerIntegrationLogger.java
Patch:
@@ -240,7 +240,7 @@ public ProcessEngineException configurationClassHasWrongType(String className, C
         "Class '{}' has wrong type. Must extend {}", expectedType.getName()), e);
   }
 
-  public void timeoutDuringSutdownOfThreadPool(int i, TimeUnit seconds) {
+  public void timeoutDuringShutdownOfThreadPool(int i, TimeUnit seconds) {
     logError(
         "033",
         "Timeout during shutdown of managed thread pool. The current running tasks could not end within {} {} after shutdown operation.",

File: engine/src/main/java/org/camunda/bpm/container/impl/deployment/StopProcessApplicationsStep.java
Patch:
@@ -25,7 +25,7 @@
 import org.camunda.bpm.engine.impl.ProcessEngineLogger;
 
 /**
- * <p>Deployment operation step that is responsible for stopping all process applications</p>
+ * <p>Deployment operation step that is responsible for stopping (undeploying) all process applications</p>
  *
  * @author Daniel Meyer
  *

File: engine/src/main/java/org/camunda/bpm/container/impl/jmx/services/JmxManagedThreadPool.java
Patch:
@@ -51,7 +51,7 @@ public void stop(PlatformServiceContainer mBeanServiceContainer) {
     // Waits for 1 minute to finish all currently executing jobs
     try {
       if(!threadPoolExecutor.awaitTermination(60L, TimeUnit.SECONDS)) {
-        LOG.timeoutDuringSutdownOfThreadPool(60, TimeUnit.SECONDS);
+        LOG.timeoutDuringShutdownOfThreadPool(60, TimeUnit.SECONDS);
       }
     }
     catch (InterruptedException e) {

File: engine/src/main/java/org/camunda/bpm/container/impl/tomcat/TomcatBpmPlatformBootstrap.java
Patch:
@@ -27,6 +27,7 @@
 import org.camunda.bpm.container.impl.deployment.jobexecutor.StartJobExecutorStep;
 import org.camunda.bpm.container.impl.deployment.jobexecutor.StartManagedThreadPoolStep;
 import org.camunda.bpm.container.impl.deployment.jobexecutor.StopJobExecutorStep;
+import org.camunda.bpm.container.impl.deployment.jobexecutor.StopManagedThreadPoolStep;
 import org.camunda.bpm.container.impl.tomcat.deployment.TomcatAttachments;
 import org.camunda.bpm.container.impl.tomcat.deployment.TomcatParseBpmPlatformXmlStep;
 import org.camunda.bpm.engine.ProcessEngine;
@@ -88,9 +89,10 @@ protected void undeployBpmPlatform(LifecycleEvent event) {
 
     containerDelegate.getServiceContainer().createUndeploymentOperation("undeploy BPM platform")
       .addAttachment(TomcatAttachments.SERVER, server)
+      .addStep(new StopJobExecutorStep())
+      .addStep(new StopManagedThreadPoolStep())
       .addStep(new StopProcessApplicationsStep())
       .addStep(new StopProcessEnginesStep())
-      .addStep(new StopJobExecutorStep())
       .addStep(new UnregisterBpmPlatformPluginsStep())
       .execute();
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricDecisionInstanceRestServiceQueryTest.java
Patch:
@@ -146,12 +146,12 @@ public void testSortingParameters() {
 
     inOrder = Mockito.inOrder(mockedQuery);
     executeAndVerifySorting("tenantId", "asc", Status.OK);
-    inOrder.verify(mockedQuery).orderByEvaluationTime();
+    inOrder.verify(mockedQuery).orderByTenantId();
     inOrder.verify(mockedQuery).asc();
 
     inOrder = Mockito.inOrder(mockedQuery);
     executeAndVerifySorting("tenantId", "desc", Status.OK);
-    inOrder.verify(mockedQuery).orderByEvaluationTime();
+    inOrder.verify(mockedQuery).orderByTenantId();
     inOrder.verify(mockedQuery).desc();
   }
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricDecisionInstanceRestServiceInteractionTest.java
Patch:
@@ -104,6 +104,7 @@ public void testGetSingleHistoricDecisionInstance() {
     List<Map<String, Object>> returnedInputs = from(content).getList("inputs");
     List<Map<String, Object>> returnedOutputs = from(content).getList("outputs");
     Double returnedCollectResultValue = from(content).getDouble("collectResultValue");
+    String returnedTenantId = from(content).getString("tenantId");
 
     assertThat(returnedHistoricDecisionInstanceId, is(MockProvider.EXAMPLE_HISTORIC_DECISION_INSTANCE_ID));
     assertThat(returnedDecisionDefinitionId, is(MockProvider.EXAMPLE_DECISION_DEFINITION_ID));
@@ -121,6 +122,7 @@ public void testGetSingleHistoricDecisionInstance() {
     assertThat(returnedInputs, is(nullValue()));
     assertThat(returnedOutputs, is(nullValue()));
     assertThat(returnedCollectResultValue, is(MockProvider.EXAMPLE_HISTORIC_DECISION_INSTANCE_COLLECT_RESULT_VALUE));
+    assertThat(returnedTenantId, is(MockProvider.EXAMPLE_TENANT_ID));
   }
 
   @Test

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricDecisionInstanceQueryProperty.java
Patch:
@@ -24,5 +24,6 @@
 public interface HistoricDecisionInstanceQueryProperty {
 
   public static final QueryProperty EVALUATION_TIME = new QueryPropertyImpl("EVAL_TIME_");
+  public static final QueryProperty TENANT_ID = new QueryPropertyImpl("TENANT_ID_");
 
 }

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricJobLogRestServiceInteractionTest.java
Patch:
@@ -97,6 +97,7 @@ public void testSimpleHistoricJobLogGet() {
         .body("processDefinitionId", equalTo(MockProvider.EXAMPLE_HISTORIC_JOB_LOG_PROC_DEF_ID))
         .body("processDefinitionKey", equalTo(MockProvider.EXAMPLE_HISTORIC_JOB_LOG_PROC_DEF_KEY))
         .body("deploymentId", equalTo(MockProvider.EXAMPLE_HISTORIC_JOB_LOG_DEPLOYMENT_ID))
+        .body("tenantId", equalTo(MockProvider.EXAMPLE_TENANT_ID))
         .body("creationLog", equalTo(MockProvider.EXAMPLE_HISTORIC_JOB_LOG_IS_CREATION_LOG))
         .body("failureLog", equalTo(MockProvider.EXAMPLE_HISTORIC_JOB_LOG_IS_FAILURE_LOG))
         .body("successLog", equalTo(MockProvider.EXAMPLE_HISTORIC_JOB_LOG_IS_SUCCESS_LOG))

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricJobLogQueryProperty.java
Patch:
@@ -33,5 +33,6 @@ public interface HistoricJobLogQueryProperty {
   public static final QueryProperty RETRIES = new QueryPropertyImpl("JOB_RETRIES_");
   public static final QueryProperty PRIORITY = new QueryPropertyImpl("JOB_PRIORITY_");
   public static final QueryProperty SEQUENCE_COUNTER = new QueryPropertyImpl("SEQUENCE_COUNTER_");
+  public static final QueryProperty TENANT_ID = new QueryPropertyImpl("TENANT_ID_");
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -719,6 +719,7 @@ protected void initHistoricJobLogEvent(HistoricJobLogEventEntity evt, Job job, H
     evt.setProcessDefinitionId(jobEntity.getProcessDefinitionId());
     evt.setProcessDefinitionKey(jobEntity.getProcessDefinitionKey());
     evt.setDeploymentId(jobEntity.getDeploymentId());
+    evt.setTenantId(jobEntity.getTenantId());
 
     // initialize sequence counter
     initSequenceCounter(jobEntity, evt);

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricIncidentRestServiceQueryTest.java
Patch:
@@ -235,7 +235,7 @@ public void testSortingParameters() {
 
     inOrder = Mockito.inOrder(mockedQuery);
     executeAndVerifySorting("tenantId", "desc", Status.OK);
-    inOrder.verify(mockedQuery).orderByIncidentId();
+    inOrder.verify(mockedQuery).orderByTenantId();
     inOrder.verify(mockedQuery).desc();
 
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricIncidentQueryProperty.java
Patch:
@@ -31,5 +31,6 @@ public interface HistoricIncidentQueryProperty {
   public static final QueryProperty CAUSE_INCIDENT_ID = new QueryPropertyImpl("CAUSE_INCIDENT_ID_");
   public static final QueryProperty ROOT_CAUSE_INCIDENT_ID = new QueryPropertyImpl("ROOT_CAUSE_INCIDENT_ID_");
   public static final QueryProperty CONFIGURATION = new QueryPropertyImpl("CONFIGURATION_");
+  public static final QueryProperty TENANT_ID = new QueryPropertyImpl("TENANT_ID_");
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -277,6 +277,7 @@ protected void initHistoricIncidentEvent(HistoricIncidentEventEntity evt, Incide
     evt.setRootCauseIncidentId(incident.getRootCauseIncidentId());
     evt.setConfiguration(incident.getConfiguration());
     evt.setIncidentMessage(incident.getIncidentMessage());
+    evt.setTenantId(incident.getTenantId());
 
     IncidentEntity incidentEntity = (IncidentEntity) incident;
     ProcessDefinitionEntity definition = incidentEntity.getProcessDefinition();

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DecrementJobRetriesCmd.java
Patch:
@@ -29,12 +29,11 @@ public DecrementJobRetriesCmd(String jobId, Throwable exception) {
   public Object execute(CommandContext commandContext) {
     JobEntity job = getJob();
 
-    unlockJob(job);
+    job.unlock();
     logException(job);
     decrementRetries(job);
     notifyAcquisition(commandContext);
 
-
     return null;
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/metrics/JobExecutorMetricsTest.java
Patch:
@@ -18,12 +18,10 @@
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
-import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.impl.ProcessEngineImpl;
 import org.camunda.bpm.engine.impl.jobexecutor.CallerRunsRejectedJobsHandler;
 import org.camunda.bpm.engine.impl.jobexecutor.DefaultJobExecutor;
 import org.camunda.bpm.engine.impl.jobexecutor.JobExecutor;
-import org.camunda.bpm.engine.impl.jobexecutor.ThreadPoolJobExecutor;
 import org.camunda.bpm.engine.management.Metrics;
 import org.camunda.bpm.engine.test.Deployment;
 import org.camunda.bpm.engine.test.concurrency.ConcurrencyTestCase.ThreadControl;
@@ -80,6 +78,7 @@ public void testCompetingJobAcquisitionMetricReporting() {
 
     // replace job executor
     ControllableJobExecutor jobExecutor1 = new ControllableJobExecutor((ProcessEngineImpl) processEngine);
+    processEngineConfiguration.setJobExecutor(jobExecutor1);
     ControllableJobExecutor jobExecutor2 = new ControllableJobExecutor((ProcessEngineImpl) processEngine);
 
     ThreadControl jobAcquisitionThread1 = jobExecutor1.getAcquisitionThreadControl();

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricDetailQueryProperty.java
Patch:
@@ -30,4 +30,5 @@ public interface HistoricDetailQueryProperty {
   public static final QueryProperty VARIABLE_REVISION = new QueryPropertyImpl("REV_");
   public static final QueryProperty TIME = new QueryPropertyImpl("TIME_");
   public static final QueryProperty SEQUENCE_COUNTER = new QueryPropertyImpl("SEQUENCE_COUNTER_");
+  public static final QueryProperty TENANT_ID = new QueryPropertyImpl("TENANT_ID_");
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/event/HistoricFormPropertyEventEntity.java
Patch:
@@ -60,6 +60,7 @@ public String toString() {
            + ", processDefinitionId=" + processDefinitionId
            + ", processInstanceId=" + processInstanceId
            + ", taskId=" + taskId
+           + ", tenantId=" + tenantId
            + "]";
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -614,6 +614,7 @@ public HistoryEvent createFormPropertyUpdateEvt(ExecutionEntity execution, Strin
     historicFormPropertyEntity.setPropertyId(propertyId);
     historicFormPropertyEntity.setPropertyValue(propertyValue);
     historicFormPropertyEntity.setTaskId(taskId);
+    historicFormPropertyEntity.setTenantId(execution.getTenantId());
 
     ProcessDefinitionEntity definition = (ProcessDefinitionEntity) execution.getProcessDefinition();
     if (definition != null) {

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/migration/MigrationPlanDto.java
Patch:
@@ -51,15 +51,15 @@ public void setInstructions(List<MigrationInstructionDto> instructions) {
     this.instructions = instructions;
   }
 
-  public static MigrationPlanDto fromMigrationPlan(MigrationPlan migrationPlan) {
+  public static MigrationPlanDto from(MigrationPlan migrationPlan) {
     MigrationPlanDto dto = new MigrationPlanDto();
 
     dto.setSourceProcessDefinitionId(migrationPlan.getSourceProcessDefinitionId());
     dto.setTargetProcessDefinitionId(migrationPlan.getTargetProcessDefinitionId());
 
     ArrayList<MigrationInstructionDto> instructionDtos = new ArrayList<MigrationInstructionDto>();
     for (MigrationInstruction migrationInstruction : migrationPlan.getInstructions()) {
-      MigrationInstructionDto migrationInstructionDto = MigrationInstructionDto.fromMigrationInstruction(migrationInstruction);
+      MigrationInstructionDto migrationInstructionDto = MigrationInstructionDto.from(migrationInstruction);
       instructionDtos.add(migrationInstructionDto);
     }
     dto.setInstructions(instructionDtos);
@@ -71,7 +71,7 @@ public static MigrationPlan toMigrationPlan(ProcessEngine processEngine, Migrati
     MigrationPlanBuilder migrationPlanBuilder = processEngine.getRuntimeService().createMigrationPlan(migrationPlanDto.getSourceProcessDefinitionId(), migrationPlanDto.getTargetProcessDefinitionId());
 
     for (MigrationInstructionDto migrationInstructionDto : migrationPlanDto.getInstructions()) {
-      migrationPlanBuilder.mapActivities(migrationInstructionDto.getSourceActivityIds(), migrationInstructionDto.getTargetActivityIds());
+      migrationPlanBuilder.mapActivities(migrationInstructionDto.getSourceActivityIds().get(0), migrationInstructionDto.getTargetActivityIds().get(0));
     }
 
     return migrationPlanBuilder.build();

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockMigrationInstructionBuilder.java
Patch:
@@ -48,8 +48,8 @@ public MockMigrationInstructionBuilder targetActivityId(String targetActivityId)
 
   public MigrationInstruction build() {
     MigrationInstruction migrationInstructionMock = mock(MigrationInstruction.class);
-    when(migrationInstructionMock.getSourceActivityIds()).thenReturn(sourceActivityIds);
-    when(migrationInstructionMock.getTargetActivityIds()).thenReturn(targetActivityIds);
+    when(migrationInstructionMock.getSourceActivityId()).thenReturn(sourceActivityIds.get(0));
+    when(migrationInstructionMock.getTargetActivityId()).thenReturn(targetActivityIds.get(0));
     return migrationInstructionMock;
   }
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockMigrationPlanBuilder.java
Patch:
@@ -72,7 +72,6 @@ public MigrationPlanBuilder builder() {
     MigrationPlanBuilder migrationPlanBuilderMock = mock(MigrationPlanBuilder.class);
     when(migrationPlanBuilderMock.mapEqualActivities()).thenReturn(migrationPlanBuilderMock);
     when(migrationPlanBuilderMock.mapActivities(anyString(), anyString())).thenReturn(migrationPlanBuilderMock);
-    when(migrationPlanBuilderMock.mapActivities(anyListOf(String.class), anyListOf(String.class))).thenReturn(migrationPlanBuilderMock);
     when(migrationPlanBuilderMock.build()).thenReturn(migrationPlanMock);
     return migrationPlanBuilderMock;
   }

File: engine/src/main/java/org/camunda/bpm/engine/RuntimeService.java
Patch:
@@ -19,7 +19,7 @@
 import org.camunda.bpm.engine.authorization.Permissions;
 import org.camunda.bpm.engine.authorization.Resources;
 import org.camunda.bpm.engine.delegate.ExecutionListener;
-import org.camunda.bpm.engine.migration.MigrationInstructionInstanceValidationException;
+import org.camunda.bpm.engine.migration.MigratingProcessInstanceValidationException;
 import org.camunda.bpm.engine.migration.MigrationPlan;
 import org.camunda.bpm.engine.repository.Deployment;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
@@ -1699,7 +1699,7 @@ public interface RuntimeService {
    * @param migrationPlan the migration plan to apply
    * @param processInstanceIds the instances to apply the plan to
    *
-   * @throws MigrationInstructionInstanceValidationException if the migration plan contains instructions
+   * @throws MigratingProcessInstanceValidationException if the migration plan contains instructions
    *   that are not applicable to any of the process instances
    */
   void executeMigrationPlan(MigrationPlan migrationPlan, List<String> processInstanceIds);

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/ProcessEventJobHandler.java
Patch:
@@ -32,7 +32,7 @@ public String getType() {
   public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext, String tenantId) {
     // lookup subscription:    
     EventSubscriptionEntity eventSubscription = commandContext.getEventSubscriptionManager()
-      .findEventSubscriptionbyId(configuration);
+      .findEventSubscriptionById(configuration);
     
     // if event subscription is null, ignore 
     if(eventSubscription != null) {      

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/MigratingProcessInstance.java
Patch:
@@ -70,5 +70,4 @@ public MigratingActivityInstance addActivityInstance(
     return migratingActivityInstance;
   }
 
-
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/parser/ActivityInstanceHandler.java
Patch:
@@ -41,7 +41,7 @@ public void handle(MigratingInstanceParseContext parseContext, ActivityInstance
       sourceScope = parseContext.getSourceProcessDefinition().findActivity(element.getActivityId());
 
       if (applyingInstruction != null) {
-        String activityId = applyingInstruction.getTargetActivityIds().get(0);
+        String activityId = applyingInstruction.getTargetActivityId();
         targetScope = parseContext.getTargetProcessDefinition().findActivity(activityId);
       }
     }
@@ -67,9 +67,8 @@ public void handle(MigratingInstanceParseContext parseContext, ActivityInstance
   }
 
   public void parseDependentInstances(MigratingInstanceParseContext parseContext, MigratingActivityInstance migratingInstance) {
-    // TODO: was ist die beste Art und Weise die dependent handlers aufzurufen? vll dem parse noch ne parseDependent-Methode geben und er gibt das dann an die Handler weiter?
     parseContext.handleDependentJobs(migratingInstance, migratingInstance.resolveRepresentativeExecution().getJobs());
-    parseContext.handleDependentEventsubscriptions(migratingInstance, migratingInstance.resolveRepresentativeExecution().getEventSubscriptions());
+    parseContext.handleDependentEventSubscriptions(migratingInstance, migratingInstance.resolveRepresentativeExecution().getEventSubscriptions());
     parseContext.handleDependentTasks(migratingInstance, migratingInstance.resolveRepresentativeExecution().getTasks());
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/parser/EventSubscriptionInstanceHandler.java
Patch:
@@ -36,7 +36,7 @@ public void handle(MigratingInstanceParseContext parseContext, MigratingActivity
       MigrationInstruction eventSubscriptionMigrationInstruction = parseContext.findSingleMigrationInstruction(eventSubscription.getActivityId());
       if (eventSubscriptionMigrationInstruction != null) {
         // the event subscription is migrated
-        ActivityImpl eventSubscriptionTargetActivity = parseContext.getTargetProcessDefinition().findActivity(eventSubscriptionMigrationInstruction.getTargetActivityIds().get(0));
+        ActivityImpl eventSubscriptionTargetActivity = parseContext.getTargetProcessDefinition().findActivity(eventSubscriptionMigrationInstruction.getTargetActivityId());
         migratedEventSubscriptionTargetActivityIds.add(eventSubscriptionTargetActivity.getId());
         owningInstance.addMigratingDependentInstance(new MigratingEventSubscriptionInstance(eventSubscription, eventSubscriptionTargetActivity));
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/parser/IncidentInstanceHandler.java
Patch:
@@ -27,10 +27,10 @@ public class IncidentInstanceHandler implements MigratingInstanceParseHandler<In
   public void handle(MigratingInstanceParseContext parseContext, IncidentEntity incident) {
     if (IncidentEntity.FAILED_JOB_HANDLER_TYPE.equals(incident.getIncidentType())) {
       MigratingJobInstance owningInstance = parseContext.getMigratingJobInstanceById(incident.getConfiguration());
+      parseContext.consume(incident);
       if (owningInstance.getTargetScope() != null) {
         MigratingIncident migratingIncident = new MigratingIncident(incident, (ScopeImpl) owningInstance.getTargetScope().getEventScope());
         owningInstance.addMigratingDependentInstance(migratingIncident);
-        parseContext.consume(incident);
       }
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/parser/JobInstanceHandler.java
Patch:
@@ -46,7 +46,7 @@ public void handle(MigratingInstanceParseContext parseContext, MigratingActivity
 
       if (timerJobMigrationInstruction != null) {
         // the timer job is migrated
-        ActivityImpl timerJobTargetActivity = parseContext.getTargetProcessDefinition().findActivity(timerJobMigrationInstruction.getTargetActivityIds().get(0));
+        ActivityImpl timerJobTargetActivity = parseContext.getTargetProcessDefinition().findActivity(timerJobMigrationInstruction.getTargetActivityId());
         migratingActivityIds.add(timerJobTargetActivity.getId());
         JobDefinitionEntity targetJobDefinitionEntity = parseContext.getTargetJobDefinition(timerJobTargetActivity.getActivityId(), job.getJobHandlerType());
         MigratingJobInstance migratingTimerJobInstance = new MigratingJobInstance(job, targetJobDefinitionEntity, timerJobTargetActivity);

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/EventSubscriptionManager.java
Patch:
@@ -65,7 +65,7 @@ public void deleteAndFlushEventSubscription(EventSubscriptionEntity persistentOb
     getDbEntityManager().flushEntity(persistentObject);
   }
 
-  public EventSubscriptionEntity findEventSubscriptionbyId(String id) {
+  public EventSubscriptionEntity findEventSubscriptionById(String id) {
     return (EventSubscriptionEntity) getDbEntityManager().selectOne("selectEventSubscription", id);
   }
 

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/CamundaExtensionsTest.java
Patch:
@@ -277,9 +277,9 @@ public void testCaseVersion() {
 
   @Test
   public void testCaseTenantId() {
-    assertThat(callActivity.getCamundaCalledElementTenantId()).isEqualTo(TEST_STRING_XML);
-    callActivity.setCamundaCalledElementTenantId(TEST_STRING_API);
-    assertThat(callActivity.getCamundaCalledElementTenantId()).isEqualTo(TEST_STRING_API);
+    assertThat(callActivity.getCamundaCaseTenantId()).isEqualTo(TEST_STRING_XML);
+    callActivity.setCamundaCaseTenantId(TEST_STRING_API);
+    assertThat(callActivity.getCamundaCaseTenantId()).isEqualTo(TEST_STRING_API);
   }
 
   @Test

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/CaseDefinitionRestServiceImpl.java
Patch:
@@ -54,7 +54,7 @@ public CaseDefinitionResource getCaseDefinitionByKey(String caseDefinitionKey) {
         .singleResult();
 
     if (caseDefinition == null) {
-      String errorMessage = String.format("No matching case definition with key: %s ", caseDefinitionKey);
+      String errorMessage = String.format("No matching case definition with key: %s and no tenant-id", caseDefinitionKey);
       throw new RestException(Status.NOT_FOUND, errorMessage);
 
     } else {

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/DecisionDefinitionRestServiceImpl.java
Patch:
@@ -49,7 +49,7 @@ public DecisionDefinitionResource getDecisionDefinitionByKey(String decisionDefi
         .singleResult();
 
     if (decisionDefinition == null) {
-      String errorMessage = String.format("No matching decision definition with key: %s ", decisionDefinitionKey);
+      String errorMessage = String.format("No matching decision definition with key: %s and no tenant-id", decisionDefinitionKey);
       throw new RestException(Status.NOT_FOUND, errorMessage);
 
     } else {

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricVariableInstanceRestServiceInteractionTest.java
Patch:
@@ -105,6 +105,7 @@ public void testGetSingleVariableInstance() {
       .body("caseInstanceId", equalTo(builder.getCaseInstanceId()))
       .body("caseExecutionId", equalTo(builder.getCaseExecutionId()))
       .body("taskId", equalTo(builder.getTaskId()))
+      .body("tenantId", equalTo(builder.getTenantId()))
     .when().get(VARIABLE_INSTANCE_URL);
 
     verify(variableInstanceQueryMock, times(1)).disableBinaryFetching();
@@ -145,6 +146,7 @@ public void testGetSingleVariableInstanceDeserialized() {
       .body("caseInstanceId", equalTo(builder.getCaseInstanceId()))
       .body("caseExecutionId", equalTo(builder.getCaseExecutionId()))
       .body("taskId", equalTo(builder.getTaskId()))
+      .body("tenantId", equalTo(builder.getTenantId()))
     .when().get(VARIABLE_INSTANCE_URL);
 
     verify(variableInstanceQueryMock, times(1)).disableBinaryFetching();
@@ -186,6 +188,7 @@ public void testGetSingleVariableInstanceSerialized() {
       .body("caseInstanceId", equalTo(builder.getCaseInstanceId()))
       .body("caseExecutionId", equalTo(builder.getCaseExecutionId()))
       .body("taskId", equalTo(builder.getTaskId()))
+      .body("tenantId", equalTo(builder.getTenantId()))
     .when().get(VARIABLE_INSTANCE_URL);
 
     verify(variableInstanceQueryMock, times(1)).disableBinaryFetching();

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricVariableInstanceQueryProperty.java
Patch:
@@ -26,4 +26,5 @@ public interface HistoricVariableInstanceQueryProperty {
 
   public static final QueryProperty PROCESS_INSTANCE_ID = new QueryPropertyImpl("PROC_INST_ID_");
   public static final QueryProperty VARIABLE_NAME = new QueryPropertyImpl("NAME_");
+  public static final QueryProperty TENANT_ID = new QueryPropertyImpl("TENANT_ID_");
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -208,6 +208,7 @@ protected void initHistoricVariableUpdateEvt(HistoricVariableUpdateEventEntity e
     evt.setRevision(variableInstance.getRevision());
     evt.setVariableName(variableInstance.getName());
     evt.setSerializerName(variableInstance.getSerializerName());
+    evt.setTenantId(variableInstance.getTenantId());
 
     ExecutionEntity execution = variableInstance.getExecution();
     if (execution != null) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricTaskInstanceQueryProperty.java
Patch:
@@ -41,5 +41,6 @@ public interface HistoricTaskInstanceQueryProperty {
   public static final QueryProperty CASE_DEFINITION_ID = new QueryPropertyImpl("CASE_DEFINITION_ID_");
   public static final QueryProperty CASE_INSTANCE_ID = new QueryPropertyImpl("CASE_INSTANCE_ID_");
   public static final QueryProperty CASE_EXECUTION_ID = new QueryPropertyImpl("CASE_EXECUTION_ID_");
+  public static final QueryProperty TENANT_ID = new QueryPropertyImpl("TENANT_ID_");
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -160,6 +160,7 @@ protected void initTaskInstanceEvent(HistoricTaskInstanceEventEntity evt, TaskEn
     String caseDefinitionId = taskEntity.getCaseDefinitionId();
     String caseExecutionId = taskEntity.getCaseExecutionId();
     String caseInstanceId = taskEntity.getCaseInstanceId();
+    String tenantId = taskEntity.getTenantId();
 
     evt.setId(taskEntity.getId());
     evt.setEventType(eventType.getEventName());
@@ -184,6 +185,7 @@ protected void initTaskInstanceEvent(HistoricTaskInstanceEventEntity evt, TaskEn
     evt.setParentTaskId(taskEntity.getParentTaskId());
     evt.setPriority(taskEntity.getPriority());
     evt.setTaskDefinitionKey(taskEntity.getTaskDefinitionKey());
+    evt.setTenantId(tenantId);
 
     ExecutionEntity execution = taskEntity.getExecution();
     if (execution != null) {

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricActivityInstanceRestServiceInteractionTest.java
Patch:
@@ -64,7 +64,7 @@ public void setUpRuntimeData() {
   }
 
   @Test
-  public void testGetSingleHistoricCaseInstance() {
+  public void testGetSingleHistoricActivityInstance() {
     Response response = given()
         .pathParam("id", MockProvider.EXAMPLE_HISTORIC_ACTIVITY_INSTANCE_ID)
       .then().expect()
@@ -92,6 +92,7 @@ public void testGetSingleHistoricCaseInstance() {
     long returnedDurationInMillis = from(content).getLong("durationInMillis");
     boolean canceled = from(content).getBoolean("canceled");
     boolean completeScope = from(content).getBoolean("completeScope");
+    String returnedTenantId = from(content).getString("tenantId");
 
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_ACTIVITY_INSTANCE_ID, returnedId);
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_ACTIVITY_INSTANCE_PARENT_ACTIVITY_INSTANCE_ID, returnedParentActivityInstanceId);
@@ -111,6 +112,7 @@ public void testGetSingleHistoricCaseInstance() {
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_ACTIVITY_INSTANCE_DURATION, returnedDurationInMillis);
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_ACTIVITY_INSTANCE_IS_CANCELED, canceled);
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_ACTIVITY_INSTANCE_IS_COMPLETE_SCOPE, completeScope);
+    Assert.assertEquals(MockProvider.EXAMPLE_TENANT_ID, returnedTenantId);
   }
 
   @Test

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricProcessInstanceRestServiceInteractionTest.java
Patch:
@@ -101,7 +101,7 @@ public void testGetSingleInstance() {
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_PROCESS_INSTANCE_SUPER_PROCESS_INSTANCE_ID, returnedSuperProcessInstanceId);
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_PROCESS_INSTANCE_SUPER_CASE_INSTANCE_ID, returnedSuperCaseInstanceId);
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_PROCESS_INSTANCE_CASE_INSTANCE_ID, returnedCaseInstanceId);
-    Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_PROCESS_INSTANCE_TENANT_ID, returnedTenantId);
+    Assert.assertEquals(MockProvider.EXAMPLE_TENANT_ID, returnedTenantId);
 
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricActivityInstanceQueryProperty.java
Patch:
@@ -35,4 +35,5 @@ public interface HistoricActivityInstanceQueryProperty {
   public static final QueryProperty END = new QueryPropertyImpl("END_TIME_");
   public static final QueryProperty DURATION = new QueryPropertyImpl("DURATION_");
   public static final QueryProperty SEQUENCE_COUNTER = new QueryPropertyImpl("SEQUENCE_COUNTER_");
+  public static final QueryProperty TENANT_ID = new QueryPropertyImpl("TENANT_ID_");
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -70,6 +70,7 @@ protected void initActivityInstanceEvent(HistoricActivityInstanceEventEntity evt
 
     String parentActivityInstanceId = null;
     ExecutionEntity parentExecution = execution.getParent();
+    String tenantId = execution.getTenantId();
 
     if (parentExecution != null && CompensationBehavior.isCompensationThrowing(parentExecution)) {
       parentActivityInstanceId = CompensationBehavior.getParentActivityInstanceId(execution);
@@ -85,6 +86,7 @@ protected void initActivityInstanceEvent(HistoricActivityInstanceEventEntity evt
     evt.setProcessDefinitionId(execution.getProcessDefinitionId());
     evt.setProcessInstanceId(execution.getProcessInstanceId());
     evt.setExecutionId(execution.getId());
+    evt.setTenantId(tenantId);
 
     ProcessDefinitionEntity definition = (ProcessDefinitionEntity) execution.getProcessDefinition();
     if (definition != null) {

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -431,6 +431,7 @@ public abstract class MockProvider {
   public static final String EXAMPLE_HISTORIC_PROCESS_INSTANCE_SUB_PROCESS_INSTANCE_ID = "aSubProcessInstanceId";
   public static final String EXAMPLE_HISTORIC_PROCESS_INSTANCE_CASE_INSTANCE_ID = "aCaseInstanceId";
   public static final String EXAMPLE_HISTORIC_PROCESS_INSTANCE_SUB_CASE_INSTANCE_ID = "aSubCaseInstanceId";
+  public static final String EXAMPLE_HISTORIC_PROCESS_INSTANCE_TENANT_ID = "aTenantId";
 
   public static final String EXAMPLE_HISTORIC_PROCESS_INSTANCE_STARTED_AFTER = "2013-04-23T13:42:43";
   public static final String EXAMPLE_HISTORIC_PROCESS_INSTANCE_STARTED_BEFORE = "2013-01-23T13:42:43";

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -431,6 +431,7 @@ public abstract class MockProvider {
   public static final String EXAMPLE_HISTORIC_PROCESS_INSTANCE_SUB_PROCESS_INSTANCE_ID = "aSubProcessInstanceId";
   public static final String EXAMPLE_HISTORIC_PROCESS_INSTANCE_CASE_INSTANCE_ID = "aCaseInstanceId";
   public static final String EXAMPLE_HISTORIC_PROCESS_INSTANCE_SUB_CASE_INSTANCE_ID = "aSubCaseInstanceId";
+  public static final String EXAMPLE_HISTORIC_PROCESS_INSTANCE_TENANT_ID = "aTenantId";
 
   public static final String EXAMPLE_HISTORIC_PROCESS_INSTANCE_STARTED_AFTER = "2013-04-23T13:42:43";
   public static final String EXAMPLE_HISTORIC_PROCESS_INSTANCE_STARTED_BEFORE = "2013-01-23T13:42:43";

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/history/impl/HistoricProcessInstanceResourceImpl.java
Patch:
@@ -12,18 +12,17 @@
  */
 package org.camunda.bpm.engine.rest.sub.history.impl;
 
+import javax.ws.rs.core.Response.Status;
+
 import org.camunda.bpm.engine.AuthorizationException;
 import org.camunda.bpm.engine.HistoryService;
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.ProcessEngineException;
-import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.history.HistoricProcessInstance;
 import org.camunda.bpm.engine.rest.dto.history.HistoricProcessInstanceDto;
 import org.camunda.bpm.engine.rest.exception.InvalidRequestException;
 import org.camunda.bpm.engine.rest.sub.history.HistoricProcessInstanceResource;
 
-import javax.ws.rs.core.Response.Status;
-
 public class HistoricProcessInstanceResourceImpl implements HistoricProcessInstanceResource {
 
   private ProcessEngine engine;

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/HistoricProcessInstanceRestServiceInteractionTest.java
Patch:
@@ -86,6 +86,7 @@ public void testGetSingleInstance() {
     String returnedSuperProcessInstanceId = from(content).getString("superProcessInstanceId");
     String returnedSuperCaseInstanceId = from(content).getString("superCaseInstanceId");
     String returnedCaseInstanceId = from(content).getString("caseInstanceId");
+    String returnedTenantId = from(content).getString("tenantId");
 
     Assert.assertEquals(MockProvider.EXAMPLE_PROCESS_INSTANCE_ID, returnedProcessInstanceId);
     Assert.assertEquals(MockProvider.EXAMPLE_PROCESS_INSTANCE_BUSINESS_KEY, returnedProcessInstanceBusinessKey);
@@ -100,6 +101,7 @@ public void testGetSingleInstance() {
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_PROCESS_INSTANCE_SUPER_PROCESS_INSTANCE_ID, returnedSuperProcessInstanceId);
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_PROCESS_INSTANCE_SUPER_CASE_INSTANCE_ID, returnedSuperCaseInstanceId);
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_PROCESS_INSTANCE_CASE_INSTANCE_ID, returnedCaseInstanceId);
+    Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_PROCESS_INSTANCE_TENANT_ID, returnedTenantId);
 
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricProcessInstanceQueryProperty.java
Patch:
@@ -29,5 +29,6 @@ public interface HistoricProcessInstanceQueryProperty {
   public static final QueryProperty START_TIME = new QueryPropertyImpl("START_TIME_");
   public static final QueryProperty END_TIME = new QueryPropertyImpl("END_TIME_");
   public static final QueryProperty DURATION = new QueryPropertyImpl("DURATION_");
+  public static final QueryProperty TENANT_ID = new QueryPropertyImpl("TENANT_ID_");
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -111,6 +111,7 @@ protected void initProcessInstanceEvent(HistoricProcessInstanceEventEntity evt,
     String executionId = execution.getId();
     // the given execution is the process instance!
     String caseInstanceId = execution.getCaseInstanceId();
+    String tenantId = execution.getTenantId();
 
     ProcessDefinitionEntity definition = (ProcessDefinitionEntity) execution.getProcessDefinition();
     String processDefinitionKey = null;
@@ -126,6 +127,7 @@ protected void initProcessInstanceEvent(HistoricProcessInstanceEventEntity evt,
     evt.setExecutionId(executionId);
     evt.setBusinessKey(execution.getProcessBusinessKey());
     evt.setCaseInstanceId(caseInstanceId);
+    evt.setTenantId(tenantId);
 
     if (execution.getSuperCaseExecution() != null) {
       evt.setSuperCaseInstanceId(execution.getSuperCaseExecution().getCaseInstanceId());

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/entitymanager/DbEntityManager.java
Patch:
@@ -219,7 +219,7 @@ public <T extends DbEntity> List<T> getCachedEntitiesByType(Class<T> type) {
   }
 
   protected List filterLoadedObjects(List<Object> loadedObjects) {
-    if (loadedObjects.isEmpty()) {
+    if (loadedObjects.isEmpty() || loadedObjects.get(0) == null) {
       return loadedObjects;
     }
     if (! (DbEntity.class.isAssignableFrom(loadedObjects.get(0).getClass()))) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/validation/MigrationActivityValidators.java
Patch:
@@ -23,6 +23,7 @@
 import org.camunda.bpm.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior;
 import org.camunda.bpm.engine.impl.bpmn.behavior.SubProcessActivityBehavior;
 import org.camunda.bpm.engine.impl.bpmn.behavior.UserTaskActivityBehavior;
+import org.camunda.bpm.engine.impl.bpmn.helper.BpmnProperties;
 import org.camunda.bpm.engine.impl.pvm.delegate.ActivityBehavior;
 import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 import org.camunda.bpm.engine.impl.pvm.process.ProcessDefinitionImpl;
@@ -63,7 +64,7 @@ public boolean canBeMigrated(ActivityImpl activity, ProcessDefinitionImpl proces
 
     public boolean canBeMigrated(ActivityImpl activity, ProcessDefinitionImpl processDefinition) {
       if (activity.getActivityBehavior().getClass().isAssignableFrom(BoundaryEventActivityBehavior.class)) {
-        String boundaryType = (String) activity.getProperty("type");
+        String boundaryType = (String) activity.getProperties().get(BpmnProperties.TYPE);
         return supportedTypes.contains(boundaryType);
       }
       else {

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/DefaultMigrationPlanGenerator.java
Patch:
@@ -49,6 +49,7 @@ public class DefaultMigrationPlanGenerator implements MigrationInstructionGenera
 
   public static final List<MigrationInstructionValidator> instructionValidators = Arrays.asList(
     MigrationInstructionValidators.SAME_ID_VALIDATOR,
+    MigrationInstructionValidators.SAME_TYPE,
     MigrationInstructionValidators.SAME_SCOPE,
     MigrationInstructionValidators.SAME_EVENT_SCOPE
   );

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/AbstractMigrationTest.java
Patch:
@@ -125,7 +125,8 @@ protected void assertTimerJobMigrated(String activityIdBefore, String activityId
 
     assertEquals(jobBefore.getId(), jobAfter.getId());
     assertEquals(jobBefore.getDuedate(), jobAfter.getDuedate());
-
+    assertEquals(jobDefinitionAfter.getProcessDefinitionId(), jobAfter.getProcessDefinitionId());
+    assertEquals(jobDefinitionAfter.getProcessDefinitionKey(), jobAfter.getProcessDefinitionKey());
   }
 
   protected void assertTimerJobsRemoved(String... activityIds) {

File: qa/integration-tests-webapps/src/test/java/org/camunda/bpm/cockpit/DashboardIT.java
Patch:
@@ -33,7 +33,7 @@ public void testLogin() throws URISyntaxException {
     WebElement submit = wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("button[type=\"submit\"]")));
     submit.submit();
 
-    wait.until(ExpectedConditions.textToBePresentInElementLocated(By.tagName("h3"), "1 process definition deployed"));
+    wait.until(ExpectedConditions.textToBePresentInElementLocated(By.tagName("h3"), "2 process definitions deployed"));
 
     wait.until(currentURIIs(new URI(appUrl + "/default/#/dashboard")));
   }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/context/ProcessApplicationWithInvocationContext.java
Patch:
@@ -19,7 +19,7 @@
 import org.camunda.bpm.application.ProcessApplicationExecutionException;
 import org.camunda.bpm.application.impl.ServletProcessApplication;
 
-@ProcessApplication("pa")
+@ProcessApplication("app")
 public class ProcessApplicationWithInvocationContext extends ServletProcessApplication {
 
   private static InvocationContext invocationContext = null;

File: engine/src/main/java/org/camunda/bpm/engine/impl/delegate/DefaultDelegateInterceptor.java
Patch:
@@ -14,6 +14,7 @@
 
 import java.util.concurrent.Callable;
 
+import org.camunda.bpm.application.InvocationContext;
 import org.camunda.bpm.application.ProcessApplicationReference;
 import org.camunda.bpm.engine.delegate.BaseDelegateExecution;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
@@ -52,7 +53,7 @@ public Void call() throws Exception {
           handleInvocation(invocation);
           return null;
         }
-      }, processApplication);
+      }, processApplication, new InvocationContext(invocation.getContextExecution()));
     }
     else {
       handleInvocationInContext(invocation);

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/VariableInstanceEntity.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.Map;
 import java.util.concurrent.Callable;
 
+import org.camunda.bpm.application.InvocationContext;
 import org.camunda.bpm.application.ProcessApplicationReference;
 import org.camunda.bpm.engine.delegate.VariableScope;
 import org.camunda.bpm.engine.impl.ProcessEngineLogger;
@@ -483,7 +484,7 @@ public Void call() throws Exception {
           return null;
         }
 
-      }, targetProcessApplication);
+      }, targetProcessApplication, new InvocationContext(getExecution()));
 
     }
     else {

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/builder/AbstractBoundaryEventBuilder.java
Patch:
@@ -17,7 +17,6 @@
 import org.camunda.bpm.model.bpmn.instance.BoundaryEvent;
 import org.camunda.bpm.model.bpmn.instance.ErrorEventDefinition;
 import org.camunda.bpm.model.bpmn.instance.EscalationEventDefinition;
-import org.camunda.bpm.model.bpmn.instance.SignalEventDefinition;
 
 /**
  * @author Sebastian Menski
@@ -82,7 +81,7 @@ public B escalation() {
    * Sets an escalation definition for the given escalation code. If already an escalation
    * with this code exists it will be used, otherwise a new escalation is created.
    *
-   * @param escalationCode the code of the error
+   * @param escalationCode the code of the escalation
    * @return the builder object
    */
   public B escalation(String escalationCode) {

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/builder/AbstractThrowEventBuilder.java
Patch:
@@ -60,7 +60,7 @@ public B signal(String signalName) {
    * Sets an escalation definition for the given escalation code. If already an escalation
    * with this code exists it will be used, otherwise a new escalation is created.
    *
-   * @param escalationCode the code of the error
+   * @param escalationCode the code of the escalation
    * @return the builder object
    */
   public B escalation(String escalationCode) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/entity/repository/CaseDefinitionEntity.java
Patch:
@@ -197,7 +197,7 @@ protected void ensurePreviousCaseDefinitionIdInitialized() {
       previousCaseDefinitionId = Context
           .getCommandContext()
           .getCaseDefinitionManager()
-          .findPreviousCaseDefinitionIdByKeyAndVersion(key, version);
+          .findPreviousCaseDefinitionId(key, version, tenantId);
 
       if (previousCaseDefinitionId == null) {
         firstVersion = true;

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/entity/repository/CaseDefinitionManager.java
Patch:
@@ -96,11 +96,12 @@ public CaseDefinitionEntity findCaseDefinitionByDeploymentAndKey(String deployme
     return (CaseDefinitionEntity) getDbEntityManager().selectOne("selectCaseDefinitionByDeploymentAndKey", parameters);
   }
 
-  public String findPreviousCaseDefinitionIdByKeyAndVersion(String caseDefinitionKey, Integer version) {
+  public String findPreviousCaseDefinitionId(String caseDefinitionKey, Integer version, String tenantId) {
     Map<String, Object> params = new HashMap<String, Object>();
     params.put("key", caseDefinitionKey);
     params.put("version", version);
-    return (String) getDbEntityManager().selectOne("selectPreviousCaseDefinitionIdByKeyAndVersion", params);
+    params.put("tenantId", tenantId);
+    return (String) getDbEntityManager().selectOne("selectPreviousCaseDefinitionId", params);
   }
 
   @SuppressWarnings("unchecked")

File: engine/src/main/java/org/camunda/bpm/engine/impl/dmn/entity/repository/DecisionDefinitionEntity.java
Patch:
@@ -206,7 +206,7 @@ protected void ensurePreviousDecisionDefinitionIdInitialized() {
       previousDecisionDefinitionId = Context
           .getCommandContext()
           .getDecisionDefinitionManager()
-          .findPreviousDecisionDefinitionIdByKeyAndVersion(key, version);
+          .findPreviousDecisionDefinitionId(key, version, tenantId);
 
       if (previousDecisionDefinitionId == null) {
         firstVersion = true;

File: engine/src/main/java/org/camunda/bpm/engine/impl/dmn/entity/repository/DecisionDefinitionManager.java
Patch:
@@ -106,11 +106,12 @@ public long findDecisionDefinitionCountByQueryCriteria(DecisionDefinitionQueryIm
     return (Long) getDbEntityManager().selectOne("selectDecisionDefinitionCountByQueryCriteria", decisionDefinitionQuery);
   }
 
-  public String findPreviousDecisionDefinitionIdByKeyAndVersion(String decisionDefinitionKey, Integer version) {
+  public String findPreviousDecisionDefinitionId(String decisionDefinitionKey, Integer version, String tenantId) {
     Map<String, Object> params = new HashMap<String, Object>();
     params.put("key", decisionDefinitionKey);
     params.put("version", version);
-    return (String) getDbEntityManager().selectOne("selectPreviousDecisionDefinitionIdByKeyAndVersion", params);
+    params.put("tenantId", tenantId);
+    return (String) getDbEntityManager().selectOne("selectPreviousDecisionDefinitionId", params);
   }
 
   @SuppressWarnings("unchecked")

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ProcessDefinitionEntity.java
Patch:
@@ -267,7 +267,7 @@ protected void ensurePreviousProcessDefinitionIdInitialized() {
       previousProcessDefinitionId = Context
           .getCommandContext()
           .getProcessDefinitionManager()
-          .findPreviousProcessDefinitionIdByKeyAndVersion(key, version);
+          .findPreviousProcessDefinitionId(key, version, tenantId);
 
       if (previousProcessDefinitionId == null) {
         firstVersion = true;

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ProcessDefinitionManager.java
Patch:
@@ -129,11 +129,12 @@ public List<ProcessDefinition> findProcessDefinitionsStartableByUser(String user
     return new ProcessDefinitionQueryImpl().startableByUser(user).list();
   }
 
-  public String findPreviousProcessDefinitionIdByKeyAndVersion(String processDefinitionKey, Integer version) {
+  public String findPreviousProcessDefinitionId(String processDefinitionKey, Integer version, String tenantId) {
     Map<String, Object> params = new HashMap<String, Object>();
     params.put("key", processDefinitionKey);
     params.put("version", version);
-    return (String) getDbEntityManager().selectOne("selectPreviousProcessDefinitionIdByKeyAndVersion", params);
+    params.put("tenantId", tenantId);
+    return (String) getDbEntityManager().selectOne("selectPreviousProcessDefinitionId", params);
   }
 
   @SuppressWarnings("unchecked")

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationAddBoundaryEventsTest.java
Patch:
@@ -1639,7 +1639,7 @@ public void testAddErrorBoundaryEventToSubProcessAndThrowError() {
   }
 
   @Test
-  public void testAddEscalationBoundaryEventToSubProcessAndThrowError() {
+  public void testAddEscalationBoundaryEventToSubProcessAndThrowEscalation() {
     // given
     ProcessDefinition sourceProcessDefinition = testHelper.deploy(ProcessModels.SUBPROCESS_PROCESS);
     ProcessDefinition targetProcessDefinition = testHelper.deploy(ProcessModels.SUBPROCESS_PROCESS.clone()

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/ProcessModels.java
Patch:
@@ -45,7 +45,7 @@ protected static ProcessBuilder newModel() {
         .embeddedSubProcess()
           .startEvent()
           .userTask("userTask").name("User Task")
-          .endEvent()
+          .endEvent("subProcessEnd")
         .subProcessDone()
       .endEvent()
       .done();

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationAddBoundaryEventsTest.java
Patch:
@@ -49,7 +49,7 @@ public class MigrationAddBoundaryEventsTest {
   public static final String AFTER_BOUNDARY_TASK = "afterBoundary";
   public static final String MESSAGE_NAME = "Message";
   public static final String SIGNAL_NAME = "Signal";
-  public static final String TIMER_DATE = "3016-02-11T12:13:14Z";
+  public static final String TIMER_DATE = "2016-02-11T12:13:14Z";
 
   protected ProcessEngineRule rule = new ProcessEngineRule();
   protected MigrationTestRule testHelper = new MigrationTestRule(rule);
@@ -1052,7 +1052,7 @@ public void testAddSignalBoundaryEventToParallelSubProcessAndCorrelateSignal() {
     sendSignalAndCompleteTasks(SIGNAL_NAME, AFTER_BOUNDARY_TASK, "userTask2");
     testHelper.assertProcessEnded(processInstance.getId());
   }
-  
+
   @Test
   public void testAddTimerBoundaryEventToUserTask() {
     // given

File: qa/performance-tests-engine/src/test/java/org/camunda/bpm/qa/performance/engine/query/DefaultLoadGenerator.java
Patch:
@@ -17,9 +17,7 @@
 import java.util.List;
 import java.util.Properties;
 
-import org.apache.log4j.jmx.LayoutDynamicMBean;
 import org.camunda.bpm.engine.ProcessEngine;
-import org.camunda.bpm.engine.impl.javax.el.DynamicBeanPropertyELResolver;
 import org.camunda.bpm.model.bpmn.Bpmn;
 import org.camunda.bpm.model.bpmn.BpmnModelInstance;
 import org.camunda.bpm.model.bpmn.instance.Process;

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/MigratingActivityInstance.java
Patch:
@@ -57,8 +57,6 @@ public void migrateDependentEntities() {
 
   public abstract ExecutionEntity resolveRepresentativeExecution();
 
-  public abstract ExecutionEntity getFlowScopeExecution();
-
   public void addDependentInstance(MigratingInstance migratingInstance) {
     if (dependentInstances == null) {
       dependentInstances = new ArrayList<MigratingInstance>();

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityInitStackNotifyListenerReturn.java
Patch:
@@ -64,7 +64,7 @@ protected void eventNotificationsCompleted(PvmExecutionImpl execution) {
     else {
       // else instantiate the activity stack further
       execution.setActivity(null);
-      execution.performOperation(ACTIVITY_INIT_STACK);
+      execution.performOperation(ACTIVITY_INIT_STACK_AND_RETURN);
 
     }
 

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/builder/AbstractBoundaryEventBuilder.java
Patch:
@@ -16,8 +16,6 @@
 import org.camunda.bpm.model.bpmn.BpmnModelInstance;
 import org.camunda.bpm.model.bpmn.instance.BoundaryEvent;
 
-import com.sun.org.apache.xpath.internal.operations.Bool;
-
 /**
  * @author Sebastian Menski
  */

File: engine/src/main/java/org/camunda/bpm/engine/MigrationPlanBuilder.java
Patch:
@@ -15,6 +15,7 @@
 import java.util.List;
 
 import org.camunda.bpm.engine.migration.MigrationPlan;
+import org.camunda.bpm.engine.migration.MigrationPlanValidationException;
 
 /**
  * @author Thorben Lindhauer
@@ -42,6 +43,8 @@ public interface MigrationPlanBuilder {
 
   /**
    * @return a migration plan with all previously specified instructions
+   *
+   * @throws MigrationPlanValidationException if the migration plan contains instructions that are not valid
    */
   MigrationPlan build();
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ActivityInstanceCancellationCmd.java
Patch:
@@ -32,7 +32,6 @@ public class ActivityInstanceCancellationCmd extends AbstractInstanceCancellatio
   public ActivityInstanceCancellationCmd(String processInstanceId, String activityInstanceId) {
     super(processInstanceId);
     this.activityInstanceId = activityInstanceId;
-
   }
 
   protected ExecutionEntity determineSourceInstanceExecution(final CommandContext commandContext) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/CreateMigrationPlanCmd.java
Patch:
@@ -23,7 +23,7 @@
 import org.camunda.bpm.engine.impl.migration.validation.DefaultMigrationPlanValidator;
 import org.camunda.bpm.engine.impl.migration.MigrationPlanBuilderImpl;
 import org.camunda.bpm.engine.impl.migration.MigrationPlanImpl;
-import org.camunda.bpm.engine.impl.migration.validation.MigrationPlanValidationReport;
+import org.camunda.bpm.engine.impl.migration.validation.MigrationPlanValidationReportImpl;
 import org.camunda.bpm.engine.impl.migration.validation.MigrationPlanValidator;
 import org.camunda.bpm.engine.impl.pvm.process.ProcessDefinitionImpl;
 import org.camunda.bpm.engine.impl.util.EngineUtilLogger;
@@ -80,7 +80,7 @@ public MigrationPlan execute(CommandContext commandContext) {
     instructions.addAll(migrationBuilder.getExplicitMigrationInstructions());
     migrationPlan.setInstructions(instructions);
 
-    MigrationPlanValidationReport validationReport = new MigrationPlanValidationReport(migrationPlan);
+    MigrationPlanValidationReportImpl validationReport = new MigrationPlanValidationReportImpl(migrationPlan);
 
     MigrationPlanValidator validator = new DefaultMigrationPlanValidator();
     validator.validateMigrationPlan(sourceProcessDefinition, targetProcessDefinition, migrationPlan, validationReport);

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/instance/MigratingInstance.java
Patch:
@@ -44,4 +44,5 @@ public interface MigratingInstance {
    * (e.g. an activity instance aggregates task instances).
    */
   void migrateDependentEntities();
+
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/validation/MigrationInstructionInstanceValidator.java
Patch:
@@ -24,5 +24,5 @@
 public interface MigrationInstructionInstanceValidator {
 
   void validate(MigratingProcessInstance migratingProcessInstance, MigratingActivityInstance migratingActivityInstance,
-      MigrationInstructionInstanceValidationReport validationReport);
+      MigrationInstructionInstanceValidationReportImpl validationReport);
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/migration/validation/MigrationPlanValidator.java
Patch:
@@ -24,6 +24,6 @@ public interface MigrationPlanValidator {
   void validateMigrationPlan(ProcessDefinitionImpl sourceProcessDefinition,
                              ProcessDefinitionImpl targetProcessDefinition,
                              MigrationPlan migrationPlan,
-                             MigrationPlanValidationReport validationReport);
+                             MigrationPlanValidationReportImpl validationReport);
 
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/ProcessInstanceModificationAsyncTest.java
Patch:
@@ -82,6 +82,7 @@ public void testStartBeforeAsync() {
     assertThat(updatedTree).hasStructure(
       describeActivityInstanceTree(processInstance.getProcessDefinitionId())
         .activity("task1")
+        .transition("task2")
       .done());
 
     ExecutionTree executionTree = ExecutionTree.forExecution(processInstanceId, processEngine);

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationHorizontalScopeChangeTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.camunda.bpm.engine.repository.ProcessDefinition;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.test.ProcessEngineRule;
-import org.camunda.bpm.model.bpmn.instance.UserTask;
 import org.hamcrest.CoreMatchers;
 import org.junit.Assert;
 import org.junit.Rule;
@@ -50,7 +49,7 @@ public void testCannotMigrateHorizontallyBetweenScopes() {
       .mapActivities("subProcess1", "subProcess1")
       .mapActivities("subProcess2", "subProcess2")
       .mapActivities("userTask1", "userTask2")
-      .mapActivities("userTask2", "userTask2")
+      .mapActivities("userTask2", "userTask1")
       .build();
 
     ProcessInstance processInstance = rule.getRuntimeService().startProcessInstanceById(sourceProcessDefinition.getId());

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/migration/MigrationSameScopesTest.java
Patch:
@@ -38,7 +38,7 @@
  * @author Thorben Lindhauer
  *
  */
-public class MigrationPlanExecutionTest {
+public class MigrationSameScopesTest {
 
   protected ProcessEngineRule rule = new ProcessEngineRule();
   protected MigrationTestRule testHelper = new MigrationTestRule(rule);
@@ -195,6 +195,7 @@ public void testChangeActivityId() {
         .createProcessInstanceById(sourceProcessDefinition.getId())
         .startBeforeActivity("userTask1")
         .execute();
+    ActivityInstance activityInstance = rule.getRuntimeService().getActivityInstance(processInstance.getId());
 
     // when
     rule.getRuntimeService().executeMigrationPlan(migrationPlan, Arrays.asList(processInstance.getId()));
@@ -210,7 +211,7 @@ public void testChangeActivityId() {
     ActivityInstance updatedTree = rule.getRuntimeService().getActivityInstance(processInstance.getId());
     assertThat(updatedTree).hasStructure(
         describeActivityInstanceTree(targetProcessDefinition.getId())
-          .activity("userTask2")
+          .activity("userTask2", testHelper.getSingleActivityInstance(activityInstance, "userTask1").getId())
         .done());
 
     Task migratedTask = rule.getTaskService().createTaskQuery().singleResult();

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -255,7 +255,7 @@ protected void addTimerDeclarations(ProcessDefinitionEntity processDefinition) {
 
   protected void removeObsoleteTimers(ProcessDefinitionEntity processDefinition) {
     List<JobEntity> jobsToDelete = getJobManager()
-      .findJobsByConfiguration(TimerStartEventJobHandler.TYPE, processDefinition.getKey());
+      .findJobsByConfiguration(TimerStartEventJobHandler.TYPE, processDefinition.getKey(), processDefinition.getTenantId());
 
     for (JobEntity job :jobsToDelete) {
         new DeleteJobsCmd(job.getId()).execute(Context.getCommandContext());

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/AsyncContinuationJobHandler.java
Patch:
@@ -56,7 +56,7 @@ public String getType() {
   }
 
   @Override
-  public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext) {
+  public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext, String tenantId) {
 
     LegacyBehavior.repairMultiInstanceAsyncJob(execution);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/ProcessEventJobHandler.java
Patch:
@@ -29,7 +29,7 @@ public String getType() {
     return TYPE;
   }
 
-  public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext) {
+  public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext, String tenantId) {
     // lookup subscription:    
     EventSubscriptionEntity eventSubscription = commandContext.getEventSubscriptionManager()
       .findEventSubscriptionbyId(configuration);

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/TimerCatchIntermediateEventJobHandler.java
Patch:
@@ -28,7 +28,7 @@ public String getType() {
     return TYPE;
   }
 
-  public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext) {
+  public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext, String tenantId) {
     String activityId = getKey(configuration);
     ActivityImpl intermediateEventActivity = execution.getProcessDefinition().findActivity(activityId);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/TimerChangeProcessDefinitionSuspensionStateJobHandler.java
Patch:
@@ -49,7 +49,7 @@ public static String createJobHandlerConfigurationByProcessDefinitionKey(String
     return json.toString();
   }
 
-  public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext) {
+  public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext, String tenantId) {
     AbstractSetProcessDefinitionStateCmd cmd = getCommand(configuration);
     cmd.disableLogUserOperation();
     cmd.execute(commandContext);

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/TimerExecuteNestedActivityJobHandler.java
Patch:
@@ -32,7 +32,7 @@ public String getType() {
     return TYPE;
   }
 
-  public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext) {
+  public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext, String tenantId) {
     String activityId = getKey(configuration);
     ActivityImpl activity = execution.getProcessDefinition().findActivity(activityId);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/TimerStartEventJobHandler.java
Patch:
@@ -32,16 +32,16 @@ public String getType() {
     return TYPE;
   }
 
-  public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext) {
+  public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext, String tenantId) {
     DeploymentCache deploymentCache = Context
             .getProcessEngineConfiguration()
             .getDeploymentCache();
 
     String definitionKey = getKey(configuration);
-    ProcessDefinition processDefinition = deploymentCache.findDeployedLatestProcessDefinitionByKey(definitionKey);
+    ProcessDefinition processDefinition = deploymentCache.findDeployedLatestProcessDefinitionByKeyAndTenantId(definitionKey, tenantId);
     try {
       if(!processDefinition.isSuspended()) {
-        new StartProcessInstanceCmd(definitionKey, null, null, null, null).execute(commandContext);
+        new StartProcessInstanceCmd(definitionKey, null, null, null, tenantId, null).execute(commandContext);
       }
       else {
         LOG.ignoringSuspendedJob(processDefinition);

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/TimerStartEventSubprocessJobHandler.java
Patch:
@@ -34,7 +34,7 @@ public String getType() {
     return TYPE;
   }
 
-  public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext) {
+  public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext, String tenantId) {
     String activityId = getKey(configuration);
     ActivityImpl eventSubprocessActivity = execution.getProcessDefinition()
       .findActivity(activityId);

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/DeploymentManager.java
Patch:
@@ -14,7 +14,6 @@
 package org.camunda.bpm.engine.impl.persistence.entity;
 
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 
 import org.camunda.bpm.engine.authorization.Resources;
@@ -80,7 +79,7 @@ public void deleteDeployment(String deploymentId, boolean cascade, boolean skipC
       getIdentityLinkManager().deleteIdentityLinksByProcDef(processDefinitionId);
 
       // remove timer start events:
-      List<JobEntity> timerStartJobs = getJobManager().findJobsByConfiguration(TimerStartEventJobHandler.TYPE, processDefinition.getKey());
+      List<JobEntity> timerStartJobs = getJobManager().findJobsByConfiguration(TimerStartEventJobHandler.TYPE, processDefinition.getKey(), processDefinition.getTenantId());
 
       ProcessDefinitionEntity latestVersion = getProcessDefinitionManager()
           .findLatestProcessDefinitionByKeyAndTenantId(processDefinition.getKey(), processDefinition.getTenantId());

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/EventSubscriptionManager.java
Patch:
@@ -50,7 +50,7 @@ public void deleteEventSubscription(EventSubscriptionEntity persistentObject) {
     }
 
     // if the event subscription has been triggered asynchronously but not yet executed
-    List<JobEntity> asyncJobs = getJobManager().findJobsByConfiguration(ProcessEventJobHandler.TYPE, persistentObject.getId());
+    List<JobEntity> asyncJobs = getJobManager().findJobsByConfiguration(ProcessEventJobHandler.TYPE, persistentObject.getId(), persistentObject.getTenantId());
     for (JobEntity asyncJob : asyncJobs) {
       asyncJob.delete();
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -125,7 +125,7 @@ public void execute(CommandContext commandContext) {
     preExecute(commandContext);
     JobHandler jobHandler = getJobHandler();
     ensureNotNull("Cannot find job handler '" + jobHandlerType + "' from job '" + this + "'", "jobHandler", jobHandler);
-    jobHandler.execute(jobHandlerConfiguration, execution, commandContext);
+    jobHandler.execute(jobHandlerConfiguration, execution, commandContext, tenantId);
     postExecute(commandContext);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobManager.java
Patch:
@@ -208,10 +208,11 @@ public List<Job> findJobsByQueryCriteria(JobQueryImpl jobQuery, Page page) {
   }
 
   @SuppressWarnings("unchecked")
-  public List<JobEntity> findJobsByConfiguration(String jobHandlerType, String jobHandlerConfiguration) {
+  public List<JobEntity> findJobsByConfiguration(String jobHandlerType, String jobHandlerConfiguration, String tenantId) {
     Map<String, String> params = new HashMap<String, String>();
     params.put("handlerType", jobHandlerType);
     params.put("handlerConfiguration", jobHandlerConfiguration);
+    params.put("tenantId", tenantId);
 
     if (TimerCatchIntermediateEventJobHandler.TYPE.equals(jobHandlerType)
       || TimerExecuteNestedActivityJobHandler.TYPE.equals(jobHandlerType)

File: engine/src/test/java/org/camunda/bpm/engine/test/api/multitenancy/MultiTenancyDelegateTaskTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.camunda.bpm.engine.delegate.DelegateTask;
 import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
+import org.camunda.bpm.engine.repository.ProcessDefinition;
 import org.camunda.bpm.engine.test.api.delegate.AssertingTaskListener;
 import org.camunda.bpm.engine.test.api.delegate.AssertingTaskListener.DelegateTaskAsserter;
 
@@ -37,7 +38,8 @@ public void testSingleExecutionWithUserTask() {
 
     AssertingTaskListener.addAsserts(hasTenantId("tenant1"));
 
-    runtimeService.startProcessInstanceByKey("testProcess");
+    ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery().singleResult();
+    runtimeService.startProcessInstanceById(processDefinition.getId());
   }
 
   protected static DelegateTaskAsserter hasTenantId(final String expectedTenantId) {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/multitenancy/query/MultiTenancyDeploymentQueryTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.camunda.bpm.engine.test.api.multitenancy;
+package org.camunda.bpm.engine.test.api.multitenancy.query;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;

File: engine/src/test/java/org/camunda/bpm/engine/test/api/multitenancy/query/MultiTenancyEventSubscriptionQueryTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.camunda.bpm.engine.test.api.multitenancy;
+package org.camunda.bpm.engine.test.api.multitenancy.query;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;

File: engine/src/test/java/org/camunda/bpm/engine/test/api/multitenancy/query/MultiTenancyExecutionQueryTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.camunda.bpm.engine.test.api.multitenancy;
+package org.camunda.bpm.engine.test.api.multitenancy.query;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;

File: engine/src/test/java/org/camunda/bpm/engine/test/api/multitenancy/query/MultiTenancyExternalTaskQueryTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.camunda.bpm.engine.test.api.multitenancy;
+package org.camunda.bpm.engine.test.api.multitenancy.query;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;

File: engine/src/test/java/org/camunda/bpm/engine/test/api/multitenancy/query/MultiTenancyIncidentQueryTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.camunda.bpm.engine.test.api.multitenancy;
+package org.camunda.bpm.engine.test.api.multitenancy.query;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;

File: engine/src/test/java/org/camunda/bpm/engine/test/api/multitenancy/query/MultiTenancyJobDefinitionQueryTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.camunda.bpm.engine.test.api.multitenancy;
+package org.camunda.bpm.engine.test.api.multitenancy.query;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;

File: engine/src/test/java/org/camunda/bpm/engine/test/api/multitenancy/query/MultiTenancyJobQueryTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.camunda.bpm.engine.test.api.multitenancy;
+package org.camunda.bpm.engine.test.api.multitenancy.query;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;

File: engine/src/test/java/org/camunda/bpm/engine/test/api/multitenancy/query/MultiTenancyProcessDefinitionQueryTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.camunda.bpm.engine.test.api.multitenancy;
+package org.camunda.bpm.engine.test.api.multitenancy.query;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;

File: engine/src/test/java/org/camunda/bpm/engine/test/api/multitenancy/query/MultiTenancyProcessInstanceQueryTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.camunda.bpm.engine.test.api.multitenancy;
+package org.camunda.bpm.engine.test.api.multitenancy.query;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;

File: engine/src/test/java/org/camunda/bpm/engine/test/api/multitenancy/query/MultiTenancyTaskQueryTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.test.api.multitenancy;
+package org.camunda.bpm.engine.test.api.multitenancy.query;
 
 import java.util.List;
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/multitenancy/query/MultiTenancyVariableInstanceQueryTest.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.camunda.bpm.engine.test.api.multitenancy;
+package org.camunda.bpm.engine.test.api.multitenancy.query;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/TweetExceptionHandler.java
Patch:
@@ -36,7 +36,7 @@ public String getType() {
     return TYPE;
   }
 
-  public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext) {
+  public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext, String tenantId) {
     if (exceptionsRemaining.decrementAndGet() >= 0) {
       throw new RuntimeException("exception remaining: "+exceptionsRemaining);
     }

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/TweetHandler.java
Patch:
@@ -28,7 +28,7 @@ public String getType() {
     return "tweet";
   }
 
-  public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext) {
+  public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext, String tenantId) {
     messages.add(configuration);
     Assert.assertNotNull(commandContext);
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/TweetNestedCommandExceptionHandler.java
Patch:
@@ -32,7 +32,7 @@ public String getType() {
     return TYPE;
   }
 
-  public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext) {
+  public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext, String tenantId) {
     Context.getProcessEngineConfiguration().getCommandExecutorTxRequired().execute(new Command<Void>() {
 
       public Void execute(CommandContext commandContext) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/test/TestHelper.java
Patch:
@@ -335,7 +335,7 @@ public static String assertAndEnsureCleanDb(ProcessEngine processEngine, boolean
         LOG.error("Dropping and recreating database");
 
         processEngineConfiguration
-          .getCommandExecutorTxRequired()
+          .getCommandExecutorSchemaOperations()
           .execute(new Command<Object>() {
             public Object execute(CommandContext commandContext) {
               PersistenceSession persistenceSession = commandContext.getSession(PersistenceSession.class);
@@ -422,6 +422,7 @@ public InteruptTask(Thread thread) {
     public boolean isTimeLimitExceeded() {
       return timeLimitExceeded;
     }
+    @Override
     public void run() {
       timeLimitExceeded = true;
       thread.interrupt();

File: webapps/src/main/java/org/camunda/bpm/webapp/plugin/resource/AbstractAppPluginRootResource.java
Patch:
@@ -33,7 +33,7 @@
 import org.camunda.bpm.engine.rest.exception.RestException;
 import org.camunda.bpm.webapp.AppRuntimeDelegate;
 import org.camunda.bpm.webapp.plugin.spi.AppPlugin;
-import org.camunda.commons.utils.IoUtil;
+import org.camunda.bpm.engine.impl.util.IoUtil;
 
 /**
  * A resource class that provides a plugins restful API.

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/builder/AbstractFlowNodeBuilder.java
Patch:
@@ -244,7 +244,7 @@ public <T extends AbstractActivityBuilder> T moveToActivity(String identifier) {
       return (T) ((Activity) instance).builder();
     }
     else {
-      throw new BpmnModelException("Flow node not found for id " + identifier);
+      throw new BpmnModelException("Activity not found for id " + identifier);
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeployCmd.java
Patch:
@@ -86,6 +86,7 @@ public DeployCmd(DeploymentBuilderImpl deploymentBuilder) {
     this.deploymentBuilder = deploymentBuilder;
   }
 
+  @Override
   public Deployment execute(final CommandContext commandContext) {
     // ensure serial processing of multiple deployments on the same node.
     // We experienced deadlock situations with highly concurrent deployment of multiple
@@ -125,6 +126,7 @@ protected Deployment doExecute(final CommandContext commandContext) {
 
     // perform deployment
     Deployment deployment = commandContext.runWithoutAuthorization(new Callable<Deployment>() {
+      @Override
       public Deployment call() throws Exception {
         acquireExclusiveLock(commandContext);
         DeploymentEntity deployment = initDeployment();
@@ -437,7 +439,7 @@ protected Map<String, ResourceEntity> resolveResourcesToDeploy(CommandContext co
 
       Map<String, ResourceEntity> existingResources = commandContext
           .getResourceManager()
-          .findLatestResourcesByDeploymentName(deployment.getName(), containedResources.keySet(), source);
+          .findLatestResourcesByDeploymentName(deployment.getName(), containedResources.keySet(), source, deployment.getTenantId());
 
       for (ResourceEntity deployedResource : containedResources.values()) {
         String resourceName = deployedResource.getName();

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ResourceManager.java
Patch:
@@ -70,11 +70,12 @@ public List<ResourceEntity> findResourcesByDeploymentId(String deploymentId) {
   }
 
   @SuppressWarnings("unchecked")
-  public Map<String, ResourceEntity> findLatestResourcesByDeploymentName(String deploymentName, Set<String> resourcesToFind, String source) {
+  public Map<String, ResourceEntity> findLatestResourcesByDeploymentName(String deploymentName, Set<String> resourcesToFind, String source, String tenantId) {
     Map<String, Object> params = new HashMap<String, Object>();
     params.put("deploymentName", deploymentName);
     params.put("resourcesToFind", resourcesToFind);
     params.put("source", source);
+    params.put("tenantId", tenantId);
 
     List<ResourceEntity> resources = getDbEntityManager().selectList("selectLatestResourcesByDeploymentName", params);
 

File: connect/http-client/src/main/java/org/camunda/connect/httpclient/impl/AbstractHttpConnector.java
Patch:
@@ -47,7 +47,7 @@ public AbstractHttpConnector(String connectorId) {
   }
 
   protected CloseableHttpClient createClient() {
-    return HttpClients.createDefault();
+    return HttpClients.createSystem();
   }
 
   public CloseableHttpClient getHttpClient() {
@@ -83,7 +83,6 @@ public R execute(Q request) {
    * @param request the given request
    * @return {@link HttpRequestBase} an apache representation of the request
    */
-  @SuppressWarnings("unchecked")
   protected <T extends HttpRequestBase> T createHttpRequest(Q request) {
     T httpRequest = createHttpRequestBase(request);
 

File: engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -953,6 +953,7 @@ public static EventSubscription createMockEventSubscription() {
     when(mock.getProcessInstanceId()).thenReturn(EXAMPLE_PROCESS_INSTANCE_ID);
     when(mock.getActivityId()).thenReturn(EXAMPLE_ACTIVITY_ID);
     when(mock.getCreated()).thenReturn(DateTimeUtil.parseDate(EXAMPLE_EVENT_SUBSCRIPTION_CREATION_DATE));
+    when(mock.getTenantId()).thenReturn(EXAMPLE_TENANT_ID);
 
     return mock;
   }

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/ExternalTaskRestServiceImpl.java
Patch:
@@ -113,9 +113,10 @@ public List<LockedExternalTaskDto> fetchAndLock(FetchExternalTasksDto fetchingDt
             fetchBuilder.topic(topicDto.getTopicName(), topicDto.getLockDuration());
 
         if (topicDto.getVariables() != null) {
-          topicFetchBuilder.variables(topicDto.getVariables());
-          fetchBuilder = topicFetchBuilder;
+          topicFetchBuilder = topicFetchBuilder.variables(topicDto.getVariables());
         }
+
+        fetchBuilder = topicFetchBuilder;
       }
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/ExternalTaskServiceImpl.java
Patch:
@@ -21,7 +21,7 @@
 import org.camunda.bpm.engine.impl.cmd.HandleExternalTaskFailureCmd;
 import org.camunda.bpm.engine.impl.cmd.SetExternalTaskRetriesCmd;
 import org.camunda.bpm.engine.impl.cmd.UnlockExternalTaskCmd;
-import org.camunda.bpm.engine.impl.externaltask.ExternalTaskQueryBuilderImpl;
+import org.camunda.bpm.engine.impl.externaltask.ExternalTaskQueryTopicBuilderImpl;
 
 /**
  * @author Thorben Lindhauer
@@ -30,7 +30,7 @@
 public class ExternalTaskServiceImpl extends ServiceImpl implements ExternalTaskService {
 
   public ExternalTaskQueryBuilder fetchAndLock(int maxTasks, String workerId) {
-    return new ExternalTaskQueryBuilderImpl(commandExecutor, workerId, maxTasks);
+    return new ExternalTaskQueryTopicBuilderImpl(commandExecutor, workerId, maxTasks);
   }
 
   public void complete(String externalTaskId, String workerId) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/PvmExecutionImpl.java
Patch:
@@ -460,6 +460,7 @@ else if (children.size() == 1) {
       PvmExecutionImpl concurrentReplacingExecution = this.createExecution();
       concurrentReplacingExecution.setConcurrent(true);
       concurrentReplacingExecution.setScope(false);
+      concurrentReplacingExecution.setActive(false);
       child.setParent(concurrentReplacingExecution);
       this.leaveActivityInstance();
       this.setActivity(null);
@@ -697,7 +698,6 @@ public void executeActivity(PvmActivity activity) {
     }
 
     PvmActivity activityImpl = activity;
-    setActive(true);
     switch (activityStartBehavior) {
     case CONCURRENT_IN_FLOW_SCOPE:
       this.nextActivity = activityImpl;

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationInterruptScope.java
Patch:
@@ -38,6 +38,7 @@ public void execute(PvmExecutionImpl execution) {
     scopeExecution.interrupt("Interrupting activity "+interruptingActivity+" executed.");
 
     scopeExecution.setActivity(interruptingActivity);
+    scopeExecution.setActive(true);
     scopeExecution.setTransition(execution.getTransition());
     scopeInterrupted(scopeExecution);
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/CompetingMessageCorrelationTest.java
Patch:
@@ -355,7 +355,7 @@ public void testEventSubprocess() {
   }
 
   @Deployment
-  public void testConcurrentMessageCorrelationAndTreeCompaction() {
+  public void FAILING_testConcurrentMessageCorrelationAndTreeCompaction() {
     runtimeService.startProcessInstanceByKey("process");
 
     // trigger non-interrupting boundary event and wait before flush

File: engine-dmn/feel-juel/src/test/java/org/camunda/bpm/dmn/feel/impl/FeelToJuelTransformTest.java
Patch:
@@ -217,7 +217,6 @@ public void testList() {
     assertTransform("x", "a,date(\"2015-12-12\"),date(\"2016-06-06\"),date(\"2017-07-07\")", "${(x == a) || (x == date(\"2015-12-12\")) || (x == date(\"2016-06-06\")) || (x == date(\"2017-07-07\"))}");
     assertTransform("x", "<a,<=date(\"2015-12-12\"),>date(\"2016-06-06\"),>=date(\"2017-07-07\")", "${(x < a) || (x <= date(\"2015-12-12\")) || (x > date(\"2016-06-06\")) || (x >= date(\"2017-07-07\"))}");
     assertTransform("x", "1,\"2,3,4\",5,\"6,7,8\",9", "${(x == 1) || (x == \"2,3,4\") || (x == 5) || (x == \"6,7,8\") || (x == 9)}");
-    assertTransform("x", "1,", "${(x == 1)}");
   }
 
   @Test

File: engine-dmn/feel-juel/src/test/java/org/camunda/bpm/dmn/feel/impl/FeelToJuelTransformTest.java
Patch:
@@ -36,6 +36,7 @@ public void testEndpointString() {
     assertTransform("x", "\"123\"", "${x == \"123\"}");
     assertTransform("x", "\"Why.not?\"", "${x == \"Why.not?\"}");
     assertTransform("x", "'Hello'", "${x == 'Hello'}");
+    assertTransform("x", "\"1,2,3\"", "${x == \"1,2,3\"}");
   }
 
   @Test
@@ -215,6 +216,8 @@ public void testList() {
     assertTransform("x", "<y,<=12,>13.37,>=.37", "${(x < y) || (x <= 12) || (x > 13.37) || (x >= .37)}");
     assertTransform("x", "a,date(\"2015-12-12\"),date(\"2016-06-06\"),date(\"2017-07-07\")", "${(x == a) || (x == date(\"2015-12-12\")) || (x == date(\"2016-06-06\")) || (x == date(\"2017-07-07\"))}");
     assertTransform("x", "<a,<=date(\"2015-12-12\"),>date(\"2016-06-06\"),>=date(\"2017-07-07\")", "${(x < a) || (x <= date(\"2015-12-12\")) || (x > date(\"2016-06-06\")) || (x >= date(\"2017-07-07\"))}");
+    assertTransform("x", "1,\"2,3,4\",5,\"6,7,8\",9", "${(x == 1) || (x == \"2,3,4\") || (x == 5) || (x == \"6,7,8\") || (x == 9)}");
+    assertTransform("x", "1,", "${(x == 1)}");
   }
 
   @Test

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/cfg/TestDeploymentTenantId.java
Patch:
@@ -29,7 +29,7 @@ public class TestDeploymentTenantId extends AbstractFoxPlatformIntegrationTest {
   @Deployment
   public static WebArchive processArchive() {
     return initWebArchiveDeployment()
-        .addAsResource("org/camunda/bpm/integrationtest/deployment/cfg/processes-with-tenand-id.xml", "META-INF/processes.xml")
+        .addAsResource("org/camunda/bpm/integrationtest/deployment/cfg/processes-with-tenant-id.xml", "META-INF/processes.xml")
         .addAsResource("org/camunda/bpm/integrationtest/deployment/cfg/invoice-it.bpmn20.xml");
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/DeploymentManager.java
Patch:
@@ -14,6 +14,7 @@
 package org.camunda.bpm.engine.impl.persistence.entity;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 import org.camunda.bpm.engine.authorization.Resources;
@@ -144,6 +145,7 @@ public void deleteDeployment(String deploymentId, boolean cascade, boolean skipC
 
     deleteAuthorizations(Resources.DEPLOYMENT, deploymentId);
     getDbEntityManager().delete(DeploymentEntity.class, "deleteDeployment", deploymentId);
+
   }
 
   protected void deleteCaseDeployment(String deploymentId, boolean cascade) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/operation/CmmnOperationLogger.java
Patch:
@@ -26,7 +26,8 @@ public void completingSubCaseError(CmmnExecution execution, Throwable cause) {
       "001",
       "Error while completing sub case of case execution '{}'. Reason: '{}'",
       execution,
-      cause.getMessage());
+      cause.getMessage(),
+      cause);
   }
 
   public ProcessEngineException completingSubCaseErrorException(CmmnExecution execution, Throwable cause) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/EnginePersistenceLogger.java
Patch:
@@ -271,7 +271,8 @@ public void removeEntryFromDeploymentCacheFailure(String modelName, String id, T
       "Could not remove {} definition with id '{}' from the cache. Reason: '{}'",
       modelName,
       id,
-      cause.getMessage()
+      cause.getMessage(),
+      cause
     );
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/JobExecutorLogger.java
Patch:
@@ -31,7 +31,7 @@ public void debugAcquiredJobNotFound(String jobId) {
 
   public void exceptionWhileExecutingJob(JobEntity job, RuntimeException exception) {
     logWarn(
-        "002", "Exception while executing job {}: {}", job, exception.getMessage());
+        "002", "Exception while executing job {}: ", job, exception);
   }
 
   public void debugFallbackToDefaultRetryStrategy() {
@@ -51,7 +51,7 @@ public void debugInitiallyAppyingRetryCycleForJob(String id, int times) {
 
   public void exceptionWhileExecutingJob(String nextJobId, Throwable t) {
     logWarn(
-        "006", "Exception while executing job {}: {}", nextJobId, t);
+        "006", "Exception while executing job {}: ", nextJobId, t);
   }
 
   public void couldNotDeterminePriority(ExecutionEntity execution, Object value, ProcessEngineException e) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/util/EngineUtilLogger.java
Patch:
@@ -65,7 +65,7 @@ public ProcessEngineException exceptionDuringParsing(String string) {
   public void unableToSetSchemaResource(Throwable cause) {
     logWarn(
         "006",
-        "Setting schema resource failed because of: '{}'", cause.getMessage());
+        "Setting schema resource failed because of: '{}'", cause.getMessage(), cause);
   }
 
   public ProcessEngineException invalidBitNumber(int bitNumber) {

File: engine-rest/engine-rest/src/test/java-resteasy/org/camunda/bpm/engine/rest/util/container/ResteasySpecifics.java
Patch:
@@ -17,6 +17,7 @@
 
 import javax.ws.rs.core.Application;
 
+import org.camunda.bpm.engine.rest.CustomJacksonDateFormatTest;
 import org.camunda.bpm.engine.rest.ExceptionHandlerTest;
 import org.camunda.bpm.engine.rest.application.TestCustomResourceApplication;
 import org.camunda.bpm.engine.rest.standalone.NoServletAuthenticationFilterTest;
@@ -42,6 +43,7 @@ public class ResteasySpecifics implements ContainerSpecifics {
     TEST_RULE_FACTORIES.put(ExceptionHandlerTest.class, new EmbeddedServerRuleFactory(new TestCustomResourceApplication()));
     TEST_RULE_FACTORIES.put(ServletAuthenticationFilterTest.class, new ServletContainerRuleFactory("auth-filter-servlet-web.xml"));
     TEST_RULE_FACTORIES.put(NoServletAuthenticationFilterTest.class, new ServletContainerRuleFactory("auth-filter-no-servlet-web.xml"));
+    TEST_RULE_FACTORIES.put(CustomJacksonDateFormatTest.class, new ServletContainerRuleFactory("custom-date-format-web.xml"));
   }
 
   public TestRule getTestRule(Class<?> testClass) {

File: engine-rest/engine-rest/src/test/java-wink/org/camunda/bpm/engine/rest/util/container/WinkSpecifics.java
Patch:
@@ -15,6 +15,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.camunda.bpm.engine.rest.CustomJacksonDateFormatTest;
 import org.camunda.bpm.engine.rest.ExceptionHandlerTest;
 import org.junit.rules.ExternalResource;
 import org.junit.rules.RuleChain;
@@ -35,6 +36,7 @@ public class WinkSpecifics implements ContainerSpecifics {
 
   static {
     TEST_RULE_FACTORIES.put(ExceptionHandlerTest.class, new ServletContainerRuleFactory("custom-application-web.xml"));
+    TEST_RULE_FACTORIES.put(CustomJacksonDateFormatTest.class, new ServletContainerRuleFactory("custom-date-format-web.xml"));
   }
 
   public TestRule getTestRule(Class<?> testClass) {

File: engine/src/test/java/org/camunda/bpm/application/impl/deployment/RedeploymentProcessApplicationTest.java
Patch:
@@ -624,6 +624,7 @@ protected CaseDefinitionQuery caseDefinitionQueryByKey(String key) {
   protected void deleteDeployments(Deployment... deployments){
     for (Deployment deployment : deployments) {
       repositoryService.deleteDeployment(deployment.getId(), true);
+      managementService.unregisterProcessApplication(deployment.getId(), false);
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/SequentialJobAcquisitionRunnable.java
Patch:
@@ -44,6 +44,8 @@ public synchronized void run() {
     while (!isInterrupted) {
       acquisitionContext.reset();
       acquisitionContext.setAcquisitionTime(System.currentTimeMillis());
+      // we are in a new acquisition cycle; discard any previous notification
+      clearJobAddedNotification();
 
       Iterator<ProcessEngineImpl> engineIterator = jobExecutor.engineIterator();
 

File: engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/identity/impl/GroupMembersResourceImpl.java
Patch:
@@ -62,6 +62,8 @@ public ResourceOptionsDto availableOperations(UriInfo context) {
         .path(PATH)
         .build();
 
+    dto.addReflexiveLink(uri, HttpMethod.GET, "self");
+
     if (!identityService.isReadOnly() && isAuthorized(DELETE)) {
       dto.addReflexiveLink(uri, HttpMethod.DELETE, "delete");
     }

File: commons/typed-values/src/main/java/org/camunda/bpm/engine/variable/impl/type/FileValueTypeImpl.java
Patch:
@@ -52,6 +52,8 @@ public TypedValue createValue(Object value, Map<String, Object> valueInfo) {
       builder.file((InputStream) value);
     } else if (value instanceof byte[]) {
       builder.file((byte[]) value);
+    } else {
+      throw new IllegalArgumentException("Provided value is not of File, InputStream or byte[] type.");
     }
 
     if (valueInfo.containsKey(VALUE_INFO_FILE_MIME_TYPE)) {

File: typed-values/src/main/java/org/camunda/bpm/engine/variable/impl/type/FileValueTypeImpl.java
Patch:
@@ -53,7 +53,7 @@ public TypedValue createValue(Object value, Map<String, Object> valueInfo) {
     } else if (value instanceof byte[]) {
       builder.file((byte[]) value);
     } else {
-      throw new IllegalArgumentException("Provided value is not a File, InputStream or byte[] value.");
+      throw new IllegalArgumentException("Provided value is not of File, InputStream or byte[] type.");
     }
 
     if (valueInfo.containsKey(VALUE_INFO_FILE_MIME_TYPE)) {

File: typed-values/src/main/java/org/camunda/bpm/engine/variable/impl/value/builder/FileValueBuilderImpl.java
Patch:
@@ -21,6 +21,7 @@
 import org.camunda.bpm.engine.variable.value.FileValue;
 import org.camunda.bpm.engine.variable.value.builder.FileValueBuilder;
 import org.camunda.commons.utils.EnsureUtil;
+import org.camunda.commons.utils.IoUtil;
 import org.camunda.commons.utils.IoUtilException;
 
 /**
@@ -51,7 +52,7 @@ public FileValueBuilder mimeType(String mimeType) {
   @Override
   public FileValueBuilder file(File file) {
     try {
-      return file(org.camunda.commons.utils.IoUtil.fileAsByteArray(file));
+      return file(IoUtil.fileAsByteArray(file));
     } catch(IoUtilException e) {
       throw new IllegalArgumentException(e);
     }
@@ -60,7 +61,7 @@ public FileValueBuilder file(File file) {
   @Override
   public FileValueBuilder file(InputStream stream) {
       try {
-        return file(org.camunda.commons.utils.IoUtil.inputStreamAsByteArray(stream));
+        return file(IoUtil.inputStreamAsByteArray(stream));
 	  } catch(IoUtilException e) {
 	  	throw new IllegalArgumentException(e);
 	  }

File: typed-values/src/test/java/org/camunda/bpm/engine/test/variables/FileValueTypeImplTest.java
Patch:
@@ -111,7 +111,6 @@ public void createValueFromBytes() throws IOException, URISyntaxException {
   @Test(expected = IllegalArgumentException.class)
   public void createValueFromObject() throws IOException, URISyntaxException {
     type.createValue(new Object(), Collections.<String, Object> singletonMap(FileValueTypeImpl.VALUE_INFO_FILE_NAME, "simpleFile.txt"));
-    fail();
   }
 
   @Test

File: commons/typed-values/src/main/java/org/camunda/bpm/engine/variable/impl/type/FileValueTypeImpl.java
Patch:
@@ -53,7 +53,7 @@ public TypedValue createValue(Object value, Map<String, Object> valueInfo) {
     } else if (value instanceof byte[]) {
       builder.file((byte[]) value);
     } else {
-      throw new IllegalArgumentException("Provided value is not a File, InputStream or byte[] value.");
+      throw new IllegalArgumentException("Provided value is not of File, InputStream or byte[] type.");
     }
 
     if (valueInfo.containsKey(VALUE_INFO_FILE_MIME_TYPE)) {

File: commons/typed-values/src/main/java/org/camunda/bpm/engine/variable/impl/value/builder/FileValueBuilderImpl.java
Patch:
@@ -21,6 +21,7 @@
 import org.camunda.bpm.engine.variable.value.FileValue;
 import org.camunda.bpm.engine.variable.value.builder.FileValueBuilder;
 import org.camunda.commons.utils.EnsureUtil;
+import org.camunda.commons.utils.IoUtil;
 import org.camunda.commons.utils.IoUtilException;
 
 /**
@@ -51,7 +52,7 @@ public FileValueBuilder mimeType(String mimeType) {
   @Override
   public FileValueBuilder file(File file) {
     try {
-      return file(org.camunda.commons.utils.IoUtil.fileAsByteArray(file));
+      return file(IoUtil.fileAsByteArray(file));
     } catch(IoUtilException e) {
       throw new IllegalArgumentException(e);
     }
@@ -60,7 +61,7 @@ public FileValueBuilder file(File file) {
   @Override
   public FileValueBuilder file(InputStream stream) {
       try {
-        return file(org.camunda.commons.utils.IoUtil.inputStreamAsByteArray(stream));
+        return file(IoUtil.inputStreamAsByteArray(stream));
 	  } catch(IoUtilException e) {
 	  	throw new IllegalArgumentException(e);
 	  }

File: commons/typed-values/src/test/java/org/camunda/bpm/engine/test/variables/FileValueTypeImplTest.java
Patch:
@@ -111,7 +111,6 @@ public void createValueFromBytes() throws IOException, URISyntaxException {
   @Test(expected = IllegalArgumentException.class)
   public void createValueFromObject() throws IOException, URISyntaxException {
     type.createValue(new Object(), Collections.<String, Object> singletonMap(FileValueTypeImpl.VALUE_INFO_FILE_NAME, "simpleFile.txt"));
-    fail();
   }
 
   @Test

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/ProcessApplication1.java
Patch:
@@ -19,7 +19,7 @@
  * @author Thorben Lindhauer
  *
  */
-@ProcessApplication(name = "pa1")
+@ProcessApplication("pa1")
 public class ProcessApplication1 extends ServletProcessApplication {
 
 }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/ProcessApplication2.java
Patch:
@@ -19,7 +19,7 @@
  * @author Thorben Lindhauer
  *
  */
-@ProcessApplication(name = "pa2")
+@ProcessApplication("pa2")
 public class ProcessApplication2 extends ServletProcessApplication {
 
 }

File: typed-values/src/main/java/org/camunda/bpm/engine/variable/impl/type/FileValueTypeImpl.java
Patch:
@@ -52,6 +52,8 @@ public TypedValue createValue(Object value, Map<String, Object> valueInfo) {
       builder.file((InputStream) value);
     } else if (value instanceof byte[]) {
       builder.file((byte[]) value);
+    } else {
+      throw new IllegalArgumentException("Provided value is not a File, InputStream or byte[] value.");
     }
 
     if (valueInfo.containsKey(VALUE_INFO_FILE_MIME_TYPE)) {

File: commons/typed-values/src/main/java/org/camunda/bpm/engine/variable/impl/type/FileValueTypeImpl.java
Patch:
@@ -52,6 +52,8 @@ public TypedValue createValue(Object value, Map<String, Object> valueInfo) {
       builder.file((InputStream) value);
     } else if (value instanceof byte[]) {
       builder.file((byte[]) value);
+    } else {
+      throw new IllegalArgumentException("Provided value is not a File, InputStream or byte[] value.");
     }
 
     if (valueInfo.containsKey(VALUE_INFO_FILE_MIME_TYPE)) {

File: engine-plugins/spin-plugin/src/main/java/org/camunda/spin/plugin/impl/SpinVariableSerializers.java
Patch:
@@ -43,7 +43,7 @@ public static List<TypedValueSerializer<?>> createSerializers(DataFormats dataFo
     }
     if(dataFormats.getDataFormatByName(DataFormats.XML_DATAFORMAT_NAME) != null){
       DataFormat<SpinXmlElement> xmlDataFormat =
-          (DataFormat<SpinXmlElement>) dataFormats.getDataFormatByName(DataFormats.JSON_DATAFORMAT_NAME);
+          (DataFormat<SpinXmlElement>) dataFormats.getDataFormatByName(DataFormats.XML_DATAFORMAT_NAME);
       serializers.add(new XmlValueSerializer(xmlDataFormat));
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/dmn/configuration/DmnEngineConfigurationBuilder.java
Patch:
@@ -111,7 +111,7 @@ public DefaultDmnEngineConfiguration build() {
 
   protected List<DmnDecisionTableEvaluationListener> createCustomPostDecisionTableEvaluationListeners() {
     ensureNotNull("dmnHistoryEventProducer", dmnHistoryEventProducer);
-    ensureNotNull("historyLevel", historyLevel);
+    // note that the history level may be null - see CAM-5165
 
     HistoryDecisionTableListener historyDecisionTableListener = new HistoryDecisionTableListener(dmnHistoryEventProducer, historyLevel);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/deployer/CmmnDeployer.java
Patch:
@@ -16,6 +16,7 @@
 import org.camunda.bpm.engine.impl.cmmn.entity.repository.CaseDefinitionEntity;
 import org.camunda.bpm.engine.impl.cmmn.entity.repository.CaseDefinitionManager;
 import org.camunda.bpm.engine.impl.cmmn.transformer.CmmnTransformer;
+import org.camunda.bpm.engine.impl.core.model.Properties;
 import org.camunda.bpm.engine.impl.el.ExpressionManager;
 import org.camunda.bpm.engine.impl.persistence.deploy.Deployer;
 import org.camunda.bpm.engine.impl.persistence.deploy.DeploymentCache;
@@ -43,7 +44,7 @@ protected String[] getResourcesSuffixes() {
     return CMMN_RESOURCE_SUFFIXES;
   }
 
-  protected List<CaseDefinitionEntity> transformDefinitions(DeploymentEntity deployment, ResourceEntity resource) {
+  protected List<CaseDefinitionEntity> transformDefinitions(DeploymentEntity deployment, ResourceEntity resource, Properties properties) {
     return transformer.createTransform().deployment(deployment).resource(resource).transform();
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/dmn/deployer/DmnDeployer.java
Patch:
@@ -15,6 +15,7 @@
 import org.camunda.bpm.dmn.engine.impl.spi.transform.DmnTransformer;
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.impl.AbstractDefinitionDeployer;
+import org.camunda.bpm.engine.impl.core.model.Properties;
 import org.camunda.bpm.engine.impl.dmn.entity.repository.DecisionDefinitionEntity;
 import org.camunda.bpm.engine.impl.dmn.entity.repository.DecisionDefinitionManager;
 import org.camunda.bpm.engine.impl.persistence.deploy.Deployer;
@@ -39,7 +40,7 @@ protected String[] getResourcesSuffixes() {
     return DMN_RESOURCE_SUFFIXES;
   }
 
-  protected List<DecisionDefinitionEntity> transformDefinitions(DeploymentEntity deployment, ResourceEntity resource) {
+  protected List<DecisionDefinitionEntity> transformDefinitions(DeploymentEntity deployment, ResourceEntity resource, Properties properties) {
     byte[] bytes = resource.getBytes();
     ByteArrayInputStream inputStream = new ByteArrayInputStream(bytes);
 

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/async/AsyncTaskTest.java
Patch:
@@ -719,7 +719,7 @@ public void testDeleteInScopeShouldNotInvokeOutputMapping() {
     }
   }
 
-  public void FAILING_testDeployAndRemoveAsyncActivity() {
+  public void testDeployAndRemoveAsyncActivity() {
     Set<String> deployments = new HashSet<String>();
 
     try {
@@ -737,7 +737,6 @@ public void FAILING_testDeployAndRemoveAsyncActivity() {
           .deploy();
       deployments.add(deployment2.getId());
 
-
       // and clearing the deployment cache (note that the equivalent of this in a real-world
       // scenario would be making the deployment with a different engine
       processEngineConfiguration.getDeploymentCache().discardProcessDefinitionCache();

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -1140,7 +1140,7 @@ public DmnEngineConfiguration getDmnEngineConfiguration() {
   }
 
   public void setDmnEngineConfiguration(DmnEngineConfiguration dmnEngineConfiguration) {
-    dmnEngineConfiguration = dmnEngineConfiguration;
+    this.dmnEngineConfiguration = dmnEngineConfiguration;
   }
 
   // job executor /////////////////////////////////////////////////////////////

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -977,6 +977,7 @@ protected void initPersistenceProviders() {
     dbSqlSessionFactory.setDbIdentityUsed(isDbIdentityUsed);
     dbSqlSessionFactory.setDbHistoryUsed(isDbHistoryUsed);
     dbSqlSessionFactory.setCmmnEnabled(cmmnEnabled);
+    dbSqlSessionFactory.setDmnEnabled(dmnEnabled);
     dbSqlSessionFactory.setDatabaseTablePrefix(databaseTablePrefix);
     dbSqlSessionFactory.setDatabaseSchema(databaseSchema);
     addSessionFactory(dbSqlSessionFactory);

File: engine/src/main/java/org/camunda/bpm/engine/impl/application/ProcessApplicationManager.java
Patch:
@@ -129,7 +129,7 @@ protected void removeJobExecutorRegistrations(Set<String> deploymentIds) {
 
   protected void logRegistration(Set<String> deploymentIds, ProcessApplicationReference reference) {
 
-    if (LOG.isInfoEnabled()) {
+    if (!LOG.isInfoEnabled()) {
       // building the log message is expensive (db queries) so we avoid it if we can
       return;
     }

File: webapps/webapp/src/main/runtime/develop/java/org/camunda/bpm/pa/DevProcessApplication.java
Patch:
@@ -91,6 +91,8 @@ private void createCockpitDemoData(final ProcessEngine engine) throws Exception
     ClockUtil.setCurrentTime(createArtificalDate(2));
     runtimeService.startProcessInstanceByKey("FailingProcess");
     runtimeService.startProcessInstanceByKey("CallActivity");
+    runtimeService.startProcessInstanceByKey("FailingErrorMessage");
+
 
     runtimeService.startProcessInstanceByKey("OrderProcess");
     ClockUtil.setCurrentTime(createArtificalDate(2));

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/DefaultDmnEngineConfiguration.java
Patch:
@@ -33,7 +33,7 @@
 import org.camunda.bpm.dmn.feel.impl.juel.FeelEngineFactoryImpl;
 import org.camunda.bpm.model.dmn.impl.DmnModelConstants;
 
-public class DefaultDmnEngineConfiguration implements DmnEngineConfiguration {
+public class DefaultDmnEngineConfiguration extends DmnEngineConfiguration {
 
   public static final String FEEL_EXPRESSION_LANGUAGE = DmnModelConstants.FEEL_NS;
   public static final String FEEL_EXPRESSION_LANGUAGE_ALTERNATIVE = "feel";

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/test/DmnEngineTest.java
Patch:
@@ -40,7 +40,7 @@ public abstract class DmnEngineTest {
   public VariableMap variables;
 
   public DmnEngineConfiguration getDmnEngineConfiguration() {
-    return new DefaultDmnEngineConfiguration();
+    return null;
   }
 
   @Before

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/type/DataTypeTransformerIntegrationTest.java
Patch:
@@ -20,6 +20,7 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
+import org.camunda.bpm.dmn.engine.DmnEngine;
 import org.camunda.bpm.dmn.engine.DmnEngineConfiguration;
 import org.camunda.bpm.dmn.engine.impl.DefaultDmnEngineConfiguration;
 import org.camunda.bpm.dmn.engine.impl.spi.type.DmnDataTypeTransformer;

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/el/ExpressionLanguageTest.java
Patch:
@@ -184,7 +184,7 @@ public void testFailFeelUseOfEmptyInputExpression() {
   }
 
   protected DmnEngine createEngineWithDefaultExpressionLanguage(String expressionLanguage) {
-    DmnEngineConfiguration configuration = getDmnEngineConfiguration();
+    DefaultDmnEngineConfiguration configuration = (DefaultDmnEngineConfiguration) getDmnEngineConfiguration();
 
     configuration.setDefaultInputExpressionExpressionLanguage(expressionLanguage);
     configuration.setDefaultInputEntryExpressionLanguage(expressionLanguage);

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/el/FeelIntegrationTest.java
Patch:
@@ -59,7 +59,7 @@ public void testDefaultEngineFeelInvocation() {
 
   @Test
   public void testFeelAlternativeName() {
-    DmnEngineConfiguration configuration = getDmnEngineConfiguration();
+    DefaultDmnEngineConfiguration configuration = (DefaultDmnEngineConfiguration) getDmnEngineConfiguration();
     configuration.setDefaultInputEntryExpressionLanguage("feel");
     DmnEngine dmnEngine = configuration.buildEngine();
 
@@ -70,7 +70,7 @@ public void testFeelAlternativeName() {
 
   @Test
   public void testFeelInputExpressions() {
-    DmnEngineConfiguration configuration = getDmnEngineConfiguration();
+    DefaultDmnEngineConfiguration configuration = (DefaultDmnEngineConfiguration) getDmnEngineConfiguration();
     configuration.setDefaultInputExpressionExpressionLanguage(DefaultDmnEngineConfiguration.FEEL_EXPRESSION_LANGUAGE);
     DmnEngine engine = configuration.buildEngine();
 
@@ -86,7 +86,7 @@ public void testFeelInputExpressions() {
 
   @Test
   public void testFeelOutputEntry() {
-    DmnEngineConfiguration configuration = getDmnEngineConfiguration();
+    DefaultDmnEngineConfiguration configuration = (DefaultDmnEngineConfiguration) getDmnEngineConfiguration();
     configuration.setDefaultOutputEntryExpressionLanguage(DefaultDmnEngineConfiguration.FEEL_EXPRESSION_LANGUAGE);
     DmnEngine engine = configuration.buildEngine();
 

File: engine/src/test/java/org/camunda/bpm/engine/test/db/DatabaseHistoryPropertyAutoTest.java
Patch:
@@ -52,7 +52,7 @@ public void failWhenSecondEngineDoesNotHaveTheSameHistoryLevel() {
     buildEngine(config("true", ProcessEngineConfiguration.HISTORY_FULL));
 
     thrown.expect(ProcessEngineException.class);
-    thrown.expectMessage("historyLevel mismatch: configuration says HistoryLevelAudit(name=audit, id=2) and database says 3");
+    thrown.expectMessage("historyLevel mismatch: configuration says HistoryLevelAudit(name=audit, id=2) and database says HistoryLevelFull(name=full, id=3)");
 
     buildEngine(config(ProcessEngineConfiguration.HISTORY_AUDIT));
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/SchemaOperationsProcessEngineBuild.java
Patch:
@@ -69,7 +69,7 @@ public static void dbCreateHistoryLevel(DbEntityManager entityManager) {
     HistoryLevel configuredHistoryLevel = processEngineConfiguration.getHistoryLevel();
     PropertyEntity property = new PropertyEntity("historyLevel", Integer.toString(configuredHistoryLevel.getId()));
     entityManager.insert(property);
-    LOG.creatingHistoryLevelPropertyInDatabase(configuredHistoryLevel.getId());
+    LOG.creatingHistoryLevelPropertyInDatabase(configuredHistoryLevel);
   }
 
   /**
@@ -106,7 +106,7 @@ public void checkHistoryLevel(DbEntityManager entityManager) {
     } else {
       if (!((Integer) configuredHistoryLevel.getId()).equals(databaseHistoryLevel.getId())) {
         throw new ProcessEngineException("historyLevel mismatch: configuration says " + configuredHistoryLevel
-            + " and database says " + databaseHistoryLevel.getId());
+            + " and database says " + databaseHistoryLevel);
       }
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/EnginePersistenceLogger.java
Patch:
@@ -27,6 +27,7 @@
 import org.camunda.bpm.engine.impl.db.entitymanager.cache.CachedDbEntity;
 import org.camunda.bpm.engine.impl.db.entitymanager.cache.DbEntityState;
 import org.camunda.bpm.engine.impl.db.entitymanager.operation.DbOperation;
+import org.camunda.bpm.engine.impl.history.HistoryLevel;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.JobEntity;
 import org.camunda.bpm.engine.impl.util.ClassNameUtil;
@@ -526,10 +527,10 @@ public ProcessEngineException updateTransientVariableException(String variableNa
         ));
   }
 
-  public void creatingHistoryLevelPropertyInDatabase(int id) {
+  public void creatingHistoryLevelPropertyInDatabase(HistoryLevel historyLevel) {
     logInfo(
         "065",
-        "Creating historyLevel property in database with value: {}", id);
+        "Creating historyLevel property in database for level: {}", historyLevel);
   }
 
   public void couldNotSelectHistoryLevel(String message) {

File: engine/src/main/java/org/camunda/bpm/container/impl/ContainerIntegrationLogger.java
Patch:
@@ -142,7 +142,7 @@ public void debugAutoCompletedUrl(String url) {
   public void foundConfigJndi(String jndi, String string) {
     logInfo(
         "018",
-        "Found camunda bpm platform configuration in JNDI [{}] at ", jndi, string);
+        "Found camunda bpm platform configuration in JNDI [{}] at {}", jndi, string);
   }
 
   public void debugExceptionWhileGettingConfigFromJndi(String jndi, NamingException e) {

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/callbacks/TestPostDeployFailure_OTHERS.java
Patch:
@@ -19,6 +19,7 @@
 import org.jboss.arquillian.container.test.api.OperateOnDeployment;
 import org.jboss.arquillian.junit.Arquillian;
 import org.jboss.shrinkwrap.api.spec.WebArchive;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -27,6 +28,7 @@
  *
  */
 @RunWith(Arquillian.class)
+@Ignore
 public class TestPostDeployFailure_OTHERS extends AbstractFoxPlatformIntegrationTest {
   
   @Deployment(name="fail")

File: engine/src/main/java/org/camunda/bpm/engine/impl/dmn/result/SingleResultDecisionTableResultMapper.java
Patch:
@@ -18,6 +18,7 @@
 import org.camunda.bpm.dmn.engine.DmnEngineException;
 import org.camunda.bpm.engine.impl.ProcessEngineLogger;
 import org.camunda.bpm.engine.impl.dmn.DecisionLogger;
+import org.camunda.bpm.engine.variable.Variables;
 
 /**
  * Maps the decision result to pairs of output name and untyped entries.
@@ -36,7 +37,7 @@ public Object mapDecisionTableResult(DmnDecisionTableResult decisionTableResult)
         return singleResult.getEntryMap();
       }
       else {
-        return null;
+        return Variables.untypedNullValue();
       }
     } catch (DmnEngineException e) {
       throw LOG.decisionResultMappingException(decisionTableResult, e);

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/CompetingVariableFetchingAndDeletionTest.java
Patch:
@@ -65,7 +65,7 @@
  * @author Daniel Meyer
  *
  */
-public class CompetingVariableFetchingAndDeletion extends ConcurrencyTestCase {
+public class CompetingVariableFetchingAndDeletionTest extends ConcurrencyTestCase {
 
   private ThreadControl asyncThread;
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/callbacks/TestPostDeployFailure_JBOSS.java
Patch:
@@ -29,7 +29,7 @@
  *
  */
 @RunWith(Arquillian.class)
-public class PostDeployFailureTest_JBOSS {
+public class TestPostDeployFailure_JBOSS {
   
   private static final String DEPLOYMENT = "DEPLOYMENT";
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/callbacks/TestPostDeployFailure_OTHERS.java
Patch:
@@ -27,11 +27,11 @@
  *
  */
 @RunWith(Arquillian.class)
-public class PostDeployFailureTest_OTHERS extends AbstractFoxPlatformIntegrationTest {
+public class TestPostDeployFailure_OTHERS extends AbstractFoxPlatformIntegrationTest {
   
   @Deployment(name="fail")
   public static WebArchive createDeployment1() {    
-   return PostDeployFailureTest_JBOSS.createDeployment1();    
+   return TestPostDeployFailure_JBOSS.createDeployment1();    
   }
   
   @Deployment(name="checker")

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/classloading/ear/TestJavaDelegateResolution_ClientAsLibInWebModule.java
Patch:
@@ -41,7 +41,7 @@
  * @author Daniel Meyer
  */
 @RunWith(Arquillian.class)
-public class JavaDelegateResolution_ClientAsLibInWebModule extends AbstractFoxPlatformIntegrationTest {
+public class TestJavaDelegateResolution_ClientAsLibInWebModule extends AbstractFoxPlatformIntegrationTest {
 
   @Deployment
   public static EnterpriseArchive createProcessArchiveDeplyoment() {

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jboss/TestJobExecutorActivateFalse_JBOSS.java
Patch:
@@ -30,7 +30,7 @@
  *
  */
 @RunWith(Arquillian.class)
-public class JobExecutorActivateFalseTest_JBOSS extends AbstractFoxPlatformIntegrationTest {
+public class TestJobExecutorActivateFalse_JBOSS extends AbstractFoxPlatformIntegrationTest {
 
   @Deployment(name="deployment1")
   public static WebArchive processArchive() {

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jboss/TestManagedDomain_JBOSS.java
Patch:
@@ -32,7 +32,7 @@
  *
  */
 @RunWith(Arquillian.class)
-public class ManagedDomainTestCase_JBOSS {
+public class TestManagedDomain_JBOSS {
 
   @Deployment @TargetsContainer("test-domain")
   public static WebArchive create1() {

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/service/TestProcessEngineJndiBinding_JBOSS.java
Patch:
@@ -30,7 +30,7 @@
  *
  */
 @RunWith(Arquillian.class)
-public class ProcessEngineJndiBindingTest_JBOSS extends AbstractFoxPlatformIntegrationTest {
+public class TestProcessEngineJndiBinding_JBOSS extends AbstractFoxPlatformIntegrationTest {
 
   @Deployment
   public static WebArchive app1() {    

File: engine/src/main/java/org/camunda/bpm/engine/impl/dmn/cmd/EvaluateDecisionByIdCmd.java
Patch:
@@ -53,7 +53,6 @@ public DmnDecisionTableResult execute(CommandContext commandContext) {
     DeploymentCache deploymentCache = processEngineConfiguration.getDeploymentCache();
 
     DecisionDefinitionEntity decisionDefinition = deploymentCache.findDeployedDecisionDefinitionById(decisionDefinitionId);
-    ensureNotNull("No decision definition found for id '" + decisionDefinitionId + "'", "decisionDefinition", decisionDefinition);
 
     // check authorization
     AuthorizationManager authorizationManager = commandContext.getAuthorizationManager();

File: engine/src/main/java/org/camunda/bpm/engine/impl/dmn/cmd/EvaluateDecisionByKeyCmd.java
Patch:
@@ -55,8 +55,6 @@ public DmnDecisionTableResult execute(CommandContext commandContext) {
     ensureNotNull("decision definition key is null", "processDefinitionKey", decisionDefinitionKey);
 
     DecisionDefinition decisionDefinition = getDecisionDefinition(commandContext);
-    ensureNotNull("No decision definition found for key '" + decisionDefinitionKey + "' and version '" + version + "'", "decisionDefinition",
-        decisionDefinition);
 
     // check authorization
     AuthorizationManager authorizationManager = commandContext.getAuthorizationManager();

File: engine/src/main/java/org/camunda/bpm/application/impl/ProcessApplicationLogger.java
Patch:
@@ -64,8 +64,8 @@ public void paDoesNotProvideExecutionListener(String paName) {
   }
 
   public void cannotInvokeListenerPaUnavailable(String paName, ProcessApplicationUnavailableException e) {
-    delegateLogger.debug(exceptionMessage("005",
-        "Exception while invoking listener: target process application '{}' unavailable", paName), e);
+    logDebug("005",
+        "Exception while invoking listener: target process application '{}' unavailable", paName, e);
   }
 
   public void paDoesNotProvideTaskListener(String paName) {
@@ -195,7 +195,7 @@ public void exceptionWhileLoggingRegistrationSummary(Throwable e) {
   }
 
   public boolean isContextSwitchLoggable() {
-    return delegateLogger.isDebugEnabled();
+    return isDebugEnabled();
   }
 
   public void debugNoTargetProcessApplicationFound(ExecutionEntity execution, ProcessApplicationManager processApplicationManager) {

File: engine/src/main/java/org/camunda/bpm/container/impl/ContainerIntegrationLogger.java
Patch:
@@ -48,9 +48,9 @@ public ProcessEngineException couldNotLoadJobExecutorClass(Exception e) {
   }
 
   public void exceptionWhileStopping(String serviceType, String serviceName, Throwable t) {
-    delegateLogger.warn(exceptionMessage(
+    logWarn(
         "003",
-        "Exception while stopping {} '{}': {}", serviceType, serviceName, t.getMessage()), t);
+        "Exception while stopping {} '{}': {}", serviceType, serviceName, t.getMessage(), t);
   }
 
   public void debugRootPath(String urlPath) {

File: engine-plugins/spin-plugin/src/main/java/org/camunda/spin/plugin/variable/type/SpinValueType.java
Patch:
@@ -22,6 +22,9 @@
  */
 public interface SpinValueType extends SerializableValueType {
 
+  /**
+   * Identifies the Spin data format a value is an instance of.
+   */
   static final String VALUE_INFO_SERIALIZATION_DATA_FORMAT = "serializationDataFormat";
 
   static final SpinValueType JSON = new JsonValueTypeImpl();

File: commons/typed-values/src/main/java/org/camunda/bpm/engine/variable/type/ValueType.java
Patch:
@@ -77,7 +77,9 @@ public interface ValueType extends Serializable {
   boolean isPrimitiveValueType();
 
   /**
-   * Get the value info for a {@link TypedValue}.
+   * Get the value info (meta data) for a {@link TypedValue}.
+   * The keys of the returned map for a {@link TypedValue} are available
+   * as constants in the value's {@link ValueType} interface.
    *
    * @param typedValue
    * @return

File: typed-values/src/main/java/org/camunda/bpm/engine/variable/type/ValueType.java
Patch:
@@ -77,7 +77,9 @@ public interface ValueType extends Serializable {
   boolean isPrimitiveValueType();
 
   /**
-   * Get the value info for a {@link TypedValue}.
+   * Get the value info (meta data) for a {@link TypedValue}.
+   * The keys of the returned map for a {@link TypedValue} are available
+   * as constants in the value's {@link ValueType} interface.
    *
    * @param typedValue
    * @return

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -31,7 +31,6 @@
 import org.camunda.bpm.engine.BpmnParseException;
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.delegate.ExecutionListener;
-import org.camunda.bpm.engine.delegate.Expression;
 import org.camunda.bpm.engine.delegate.TaskListener;
 import org.camunda.bpm.engine.impl.Condition;
 import org.camunda.bpm.engine.impl.ProcessEngineLogger;
@@ -94,6 +93,7 @@
 import org.camunda.bpm.engine.impl.dmn.result.SingleOutputDecisionResultMapper;
 import org.camunda.bpm.engine.impl.dmn.result.SingleValueDecisionResultMapper;
 import org.camunda.bpm.engine.impl.el.ElValueProvider;
+import org.camunda.bpm.engine.impl.el.Expression;
 import org.camunda.bpm.engine.impl.el.ExpressionManager;
 import org.camunda.bpm.engine.impl.el.FixedValue;
 import org.camunda.bpm.engine.impl.el.UelExpressionCondition;

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/behavior/TransferVariablesActivityBehavior.java
Patch:
@@ -13,13 +13,14 @@
 package org.camunda.bpm.engine.impl.cmmn.behavior;
 
 import org.camunda.bpm.engine.delegate.VariableScope;
+import org.camunda.bpm.engine.impl.cmmn.execution.CmmnActivityExecution;
 
 /**
  * @author Roman Smirnov
  *
  */
 public interface TransferVariablesActivityBehavior extends CmmnActivityBehavior {
 
-  public void transferVariables(VariableScope from, VariableScope to);
+  public void transferVariables(VariableScope sourceScope, CmmnActivityExecution caseExecution);
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/handler/ProcessOrCaseTaskItemHandler.java
Patch:
@@ -14,7 +14,6 @@
 
 import java.util.List;
 
-import org.camunda.bpm.engine.delegate.Expression;
 import org.camunda.bpm.engine.impl.cmmn.behavior.ProcessOrCaseTaskActivityBehavior;
 import org.camunda.bpm.engine.impl.cmmn.model.CmmnActivity;
 import org.camunda.bpm.engine.impl.core.model.BaseCallableElement.CallableElementBinding;
@@ -24,6 +23,7 @@
 import org.camunda.bpm.engine.impl.core.variable.mapping.value.NullValueProvider;
 import org.camunda.bpm.engine.impl.core.variable.mapping.value.ParameterValueProvider;
 import org.camunda.bpm.engine.impl.el.ElValueProvider;
+import org.camunda.bpm.engine.impl.el.Expression;
 import org.camunda.bpm.engine.impl.el.ExpressionManager;
 import org.camunda.bpm.engine.impl.util.StringUtil;
 import org.camunda.bpm.engine.repository.Deployment;

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/operation/AbstractAtomicOperationCaseExecutionComplete.java
Patch:
@@ -71,7 +71,7 @@ protected void postTransitionNotification(CmmnExecution execution) {
         SubProcessActivityBehavior behavior = (SubProcessActivityBehavior) getActivityBehavior(superExecution);
 
         try {
-          behavior.passOutputVariablesFromSubprocess(superExecution, execution);
+          behavior.passOutputVariables(superExecution, execution);
         } catch (RuntimeException e) {
           LOG.completingSubCaseError(execution, e);
           throw e;

File: engine/src/main/java/org/camunda/bpm/engine/impl/context/Context.java
Patch:
@@ -121,7 +121,6 @@ public static CoreExecutionContext<? extends CoreExecution> getCoreExecutionCont
     }
   }
 
-
   public static void setExecutionContext(ExecutionEntity execution) {
     getStack(executionContextStackThreadLocal).push(new BpmnExecutionContext(execution));
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/model/CallableElementParameter.java
Patch:
@@ -34,13 +34,13 @@ public class CallableElementParameter {
   // source ////////////////////////////////////////////////////////
 
   public Object getSource(VariableScope variableScope) {
+
     if (sourceValueProvider instanceof ConstantValueProvider) {
       String variableName = (String) sourceValueProvider.getValue(variableScope);
 
       return variableScope.getVariableTyped(variableName);
-
-    } else {
-
+    }
+    else {
       return sourceValueProvider.getValue(variableScope);
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/el/ElValueProvider.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.camunda.bpm.engine.impl.el;
 
-import org.camunda.bpm.engine.delegate.Expression;
 import org.camunda.bpm.engine.delegate.VariableScope;
 import org.camunda.bpm.engine.impl.core.variable.mapping.IoParameter;
 import org.camunda.bpm.engine.impl.core.variable.mapping.value.ParameterValueProvider;

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/delegate/SubProcessActivityBehavior.java
Patch:
@@ -29,9 +29,9 @@ public interface SubProcessActivityBehavior extends ActivityBehavior {
    * This should be called before the process instance is destroyed.
    *
    * @param targetExecution execution of the calling process instance to pass the variables to
-   * @param subProcessInstance process instance of the subprocess where the variables extract from
+   * @param subProcessInstance instance of the called element that serves as the variable source
    */
-  void passOutputVariablesFromSubprocess(VariableScope targetExecution, VariableScope subProcessInstance);
+  void passOutputVariables(ActivityExecution targetExecution, VariableScope calledElementInstance);
 
   /** called after the process instance is destroyed for
    * this activity to perform its outgoing control flow logic. */

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationProcessEnd.java
Patch:
@@ -58,7 +58,7 @@ protected void eventNotificationsCompleted(PvmExecutionImpl execution) {
       PvmActivity activity = superExecution.getActivity();
       subProcessActivityBehavior = (SubProcessActivityBehavior) activity.getActivityBehavior();
       try {
-        subProcessActivityBehavior.passOutputVariablesFromSubprocess(superExecution, execution);
+        subProcessActivityBehavior.passOutputVariables(superExecution, execution);
       } catch (RuntimeException e) {
           log.log(Level.SEVERE, "Error while completing sub process of execution " + execution, e);
           throw e;

File: engine/src/main/java/org/camunda/bpm/engine/impl/scripting/ScriptCondition.java
Patch:
@@ -38,7 +38,7 @@ public ScriptCondition(ExecutableScript script) {
   }
 
   public boolean evaluate(DelegateExecution execution) {
-    ScriptInvocation invocation = new ScriptInvocation(script, execution);
+    ScriptInvocation invocation = new ScriptInvocation(script, execution, execution);
     try {
       Context
         .getProcessEngineConfiguration()

File: engine/src/main/java/org/camunda/bpm/engine/impl/scripting/ScriptValueProvider.java
Patch:
@@ -37,9 +37,9 @@ public Object getValue(VariableScope variableScope) {
     ScriptInvocation invocation = new ScriptInvocation(script, variableScope);
     try {
       Context
-        .getProcessEngineConfiguration()
-        .getDelegateInterceptor()
-        .handleInvocation(invocation);
+      .getProcessEngineConfiguration()
+      .getDelegateInterceptor()
+      .handleInvocation(invocation);
     } catch (RuntimeException e) {
       throw e;
     } catch (Exception e) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/tree/OutputVariablesPropagator.java
Patch:
@@ -36,7 +36,7 @@ public void visit(ActivityExecution execution) {
       ActivityImpl activity = superExecution.getActivity();
       SubProcessActivityBehavior subProcessActivityBehavior = (SubProcessActivityBehavior) activity.getActivityBehavior();
 
-      subProcessActivityBehavior.passOutputVariablesFromSubprocess(superExecution, execution);
+      subProcessActivityBehavior.passOutputVariables(superExecution, execution);
     }
   }
 

File: engine/src/test/java/org/camunda/bpm/application/impl/el/CallingProcessApplication.java
Patch:
@@ -30,11 +30,9 @@
 )
 public class CallingProcessApplication extends EmbeddedProcessApplication {
 
-  public static final String STRING_VARIABLE_VALUE = "aVariableValue";
-
   protected ELResolver initProcessApplicationElResolver() {
     Map<Object, Object> resolvableValues = new HashMap<Object, Object>();
-    resolvableValues.put("aStringValue", STRING_VARIABLE_VALUE);
+    resolvableValues.put("shouldTakeFlow", true);
 
     return new ReadOnlyMapELResolver(resolvableValues);
   }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/AbstractPaLocalScriptEngineTest.java
Patch:
@@ -39,7 +39,7 @@ public abstract class AbstractPaLocalScriptEngineTest extends AbstractFoxPlatfor
   public static final String PROCESS_ID = "testProcess";
   public static final String SCRIPT_TEXT = "my-script";
   public static final String SCRIPT_FORMAT = "dummy";
-  public static final String SCRIPT_ENGINE_FACTORY_SPI = "org.camunda.bpm.integrationtest.functional.scriptengine.engine.DummyScriptEngineFactory";
+  public static final String DUMMY_SCRIPT_ENGINE_FACTORY_SPI = "org.camunda.bpm.integrationtest.functional.scriptengine.engine.DummyScriptEngineFactory";
   public static final String SCRIPT_ENGINE_FACTORY_PATH = "META-INF/services/javax.script.ScriptEngineFactory";
 
   protected static StringAsset createScriptTaskProcess(String scriptFormat, String scriptText) {

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/PaLocalScriptEngineDisabledCacheTest.java
Patch:
@@ -15,7 +15,7 @@
 import static org.junit.Assert.assertNotEquals;
 
 import org.camunda.bpm.application.AbstractProcessApplication;
-import org.camunda.bpm.integrationtest.functional.scriptengine.engine.DummyScriptEngine;
+import org.camunda.bpm.integrationtest.functional.scriptengine.engine.AbstractScriptEngineFactory;
 import org.camunda.bpm.integrationtest.functional.scriptengine.engine.DummyScriptEngineFactory;
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.shrinkwrap.api.asset.StringAsset;
@@ -32,9 +32,9 @@ public class PaLocalScriptEngineDisabledCacheTest extends AbstractPaLocalScriptE
   public static WebArchive createProcessApplication() {
     return initWebArchiveDeployment()
       .addClass(AbstractPaLocalScriptEngineTest.class)
-      .addClass(DummyScriptEngine.class)
+      .addClass(AbstractScriptEngineFactory.class)
       .addClass(DummyScriptEngineFactory.class)
-      .addAsResource(new StringAsset(SCRIPT_ENGINE_FACTORY_SPI), SCRIPT_ENGINE_FACTORY_PATH)
+      .addAsResource(new StringAsset(DUMMY_SCRIPT_ENGINE_FACTORY_SPI), SCRIPT_ENGINE_FACTORY_PATH)
       .addAsResource(createScriptTaskProcess(SCRIPT_FORMAT, SCRIPT_TEXT), "process.bpmn20.xml");
   }
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/PaLocalScriptEngineEnabledCacheTest.java
Patch:
@@ -15,7 +15,7 @@
 import static org.junit.Assert.assertEquals;
 
 import org.camunda.bpm.application.AbstractProcessApplication;
-import org.camunda.bpm.integrationtest.functional.scriptengine.engine.DummyScriptEngine;
+import org.camunda.bpm.integrationtest.functional.scriptengine.engine.AbstractScriptEngineFactory;
 import org.camunda.bpm.integrationtest.functional.scriptengine.engine.DummyScriptEngineFactory;
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.shrinkwrap.api.asset.StringAsset;
@@ -32,9 +32,9 @@ public class PaLocalScriptEngineEnabledCacheTest extends AbstractPaLocalScriptEn
   public static WebArchive createProcessApplication() {
     return initWebArchiveDeployment()
       .addClass(AbstractPaLocalScriptEngineTest.class)
-      .addClass(DummyScriptEngine.class)
+      .addClass(AbstractScriptEngineFactory.class)
       .addClass(DummyScriptEngineFactory.class)
-      .addAsResource(new StringAsset(SCRIPT_ENGINE_FACTORY_SPI), SCRIPT_ENGINE_FACTORY_PATH)
+      .addAsResource(new StringAsset(DUMMY_SCRIPT_ENGINE_FACTORY_SPI), SCRIPT_ENGINE_FACTORY_PATH)
       .addAsResource(createScriptTaskProcess(SCRIPT_FORMAT, SCRIPT_TEXT), "process.bpmn20.xml");
   }
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/PaLocalScriptEngineSupportTest.java
Patch:
@@ -15,7 +15,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 
-import org.camunda.bpm.integrationtest.functional.scriptengine.engine.DummyScriptEngine;
+import org.camunda.bpm.integrationtest.functional.scriptengine.engine.AbstractScriptEngineFactory;
 import org.camunda.bpm.integrationtest.functional.scriptengine.engine.DummyScriptEngineFactory;
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.shrinkwrap.api.asset.StringAsset;
@@ -33,9 +33,9 @@ public class PaLocalScriptEngineSupportTest extends AbstractPaLocalScriptEngineT
   public static WebArchive createProcessApplication() {
     return initWebArchiveDeployment()
       .addClass(AbstractPaLocalScriptEngineTest.class)
-      .addClass(DummyScriptEngine.class)
+      .addClass(AbstractScriptEngineFactory.class)
       .addClass(DummyScriptEngineFactory.class)
-      .addAsResource(new StringAsset(SCRIPT_ENGINE_FACTORY_SPI), SCRIPT_ENGINE_FACTORY_PATH)
+      .addAsResource(new StringAsset(DUMMY_SCRIPT_ENGINE_FACTORY_SPI), SCRIPT_ENGINE_FACTORY_PATH)
       .addAsResource(createScriptTaskProcess(SCRIPT_FORMAT, SCRIPT_TEXT), "process.bpmn20.xml");
   }
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentWithProcessEnginePlugin.java
Patch:
@@ -50,7 +50,7 @@ public static WebArchive processArchive() {
         .addAsLibraries(Maven.resolver()
             .offline()
             .loadPomFromFile("pom.xml")
-            .resolve("org.codehaus.groovy:groovy-all:2.3.0")
+            .resolve("org.codehaus.groovy:groovy-all")
             .withoutTransitivity()
             .as(JavaArchive.class));
   }

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/standalone/HalResourceCacheTest.java
Patch:
@@ -33,7 +33,6 @@
 import java.util.List;
 import java.util.Map;
 
-import org.camunda.bpm.engine.ClassLoadingException;
 import org.camunda.bpm.engine.identity.User;
 import org.camunda.bpm.engine.identity.UserQuery;
 import org.camunda.bpm.engine.impl.util.ClockUtil;
@@ -134,7 +133,7 @@ public void testUnknownCacheImplementationClass() {
       fail("Exception expected");
     }
     catch (HalRelationCacheConfigurationException e) {
-      assertTrue(e.getCause() instanceof ClassLoadingException);
+      assertTrue(e.getCause() instanceof ClassNotFoundException);
     }
   }
 

File: engine-plugins/connect-plugin/src/main/java/org/camunda/connect/plugin/impl/ConnectorParseListener.java
Patch:
@@ -13,8 +13,8 @@
 
 package org.camunda.connect.plugin.impl;
 
-import static org.camunda.bpm.engine.impl.util.BpmnParseUtil.findCamundaExtensionElement;
-import static org.camunda.bpm.engine.impl.util.BpmnParseUtil.parseInputOutput;
+import static org.camunda.bpm.engine.impl.bpmn.parser.BpmnParseUtil.findCamundaExtensionElement;
+import static org.camunda.bpm.engine.impl.bpmn.parser.BpmnParseUtil.parseInputOutput;
 
 import org.camunda.bpm.engine.BpmnParseException;
 import org.camunda.bpm.engine.impl.bpmn.parser.AbstractBpmnParseListener;

File: engine/src/test/java/org/camunda/bpm/engine/test/dmn/deployment/DmnDeployerTest.java
Patch:
@@ -44,7 +44,7 @@ public void testDmnDeployment() {
     DecisionDefinition decisionDefinition = query.singleResult();
 
     assertTrue(decisionDefinition.getId().startsWith("decision:1:"));
-    assertEquals("http://camunda.org/dmn", decisionDefinition.getCategory());
+    assertEquals("http://camunda.org/schema/1.0/dmn", decisionDefinition.getCategory());
     assertEquals("CheckOrder", decisionDefinition.getName());
     assertEquals("decision", decisionDefinition.getKey());
     assertEquals(1, decisionDefinition.getVersion());
@@ -75,7 +75,7 @@ public void testDmnDeploymentWithDmnSuffix() {
     DecisionDefinition decisionDefinition = query.singleResult();
 
     assertTrue(decisionDefinition.getId().startsWith("decision:1:"));
-    assertEquals("http://camunda.org/dmn", decisionDefinition.getCategory());
+    assertEquals("http://camunda.org/schema/1.0/dmn", decisionDefinition.getCategory());
     assertEquals("CheckOrder", decisionDefinition.getName());
     assertEquals("decision", decisionDefinition.getKey());
     assertEquals(1, decisionDefinition.getVersion());

File: engine/src/main/java/org/camunda/bpm/application/impl/DefaultElResolverLookup.java
Patch:
@@ -57,8 +57,9 @@ public final static ELResolver lookupResolver(AbstractProcessApplication process
         if (elResolver != null) {
           compositeResolver.add(elResolver);
           summary.append(String.format("Class %s", processApplicationElResolver.getClass().getName()));
-        } else {
-          LOG.noElResolverProvided(processApplication.getName(), elResolver);
+        }
+        else {
+          LOG.noElResolverProvided(processApplication.getName(), processApplicationElResolver.getClass().getName());
         }
       }
 

File: engine/src/main/java/org/camunda/bpm/application/impl/ProcessApplicationLogger.java
Patch:
@@ -75,11 +75,11 @@ public void paElResolversDiscovered(String summary) {
     logDebug("007", summary);
   }
 
-  public void noElResolverProvided(String paName, org.camunda.bpm.engine.impl.javax.el.ELResolver elResolver) {
+  public void noElResolverProvided(String paName, String string) {
     logWarn("008",
         "Process Application '{}': No ELResolver provided by ProcessApplicationElResolver {}",
         paName,
-        elResolver.getClass().getName());
+        string);
 
   }
 

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/impl/instance/ApplicabilityRuleImpl.java
Patch:
@@ -19,6 +19,7 @@
 import org.camunda.bpm.model.cmmn.instance.ApplicabilityRule;
 import org.camunda.bpm.model.cmmn.instance.CaseFileItem;
 import org.camunda.bpm.model.cmmn.instance.CmmnElement;
+import org.camunda.bpm.model.cmmn.instance.ConditionExpression;
 import org.camunda.bpm.model.xml.ModelBuilder;
 import org.camunda.bpm.model.xml.impl.instance.ModelTypeInstanceContext;
 import org.camunda.bpm.model.xml.type.ModelElementTypeBuilder;

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/impl/instance/CaseParameterImpl.java
Patch:
@@ -16,6 +16,7 @@
 import static org.camunda.bpm.model.cmmn.impl.CmmnModelConstants.CMMN_ATTRIBUTE_BINDING_REF;
 import static org.camunda.bpm.model.cmmn.impl.CmmnModelConstants.CMMN_ELEMENT_CASE_PARAMETER;
 
+import org.camunda.bpm.model.cmmn.instance.BindingRefinementExpression;
 import org.camunda.bpm.model.cmmn.instance.CaseFileItem;
 import org.camunda.bpm.model.cmmn.instance.CaseParameter;
 import org.camunda.bpm.model.cmmn.instance.Parameter;

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/impl/instance/CasePlanModel.java
Patch:
@@ -24,14 +24,14 @@
  * @author Roman Smirnov
  *
  */
-public class CasePlanModel extends StageImpl {
+public class CasePlanModel extends StageImpl implements org.camunda.bpm.model.cmmn.instance.CasePlanModel {
 
   public CasePlanModel(ModelTypeInstanceContext instanceContext) {
     super(instanceContext);
   }
 
   public static void registerType(ModelBuilder modelBuilder) {
-    ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(CasePlanModel.class, CMMN_ELEMENT_CASE_PLAN_MODEL)
+    ModelElementTypeBuilder typeBuilder = modelBuilder.defineType(org.camunda.bpm.model.cmmn.instance.CasePlanModel.class, CMMN_ELEMENT_CASE_PLAN_MODEL)
       .namespaceUri(CMMN10_NS)
       .extendsType(Stage.class)
       .instanceProvider(new ModelElementTypeBuilder.ModelTypeInstanceProvider<CasePlanModel>() {

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/impl/instance/CmmnElementImpl.java
Patch:
@@ -21,7 +21,6 @@
 import org.camunda.bpm.model.cmmn.instance.ExtensionElements;
 import org.camunda.bpm.model.xml.ModelBuilder;
 import org.camunda.bpm.model.xml.impl.instance.ModelTypeInstanceContext;
-import org.camunda.bpm.model.xml.impl.util.ModelUtil;
 import org.camunda.bpm.model.xml.type.ModelElementTypeBuilder;
 import org.camunda.bpm.model.xml.type.attribute.Attribute;
 import org.camunda.bpm.model.xml.type.child.ChildElement;

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/impl/instance/DiscretionaryItemImpl.java
Patch:
@@ -17,6 +17,7 @@
 import static org.camunda.bpm.model.cmmn.impl.CmmnModelConstants.CMMN_ELEMENT_DISCRETIONARY_ITEM;
 
 import org.camunda.bpm.model.cmmn.instance.DiscretionaryItem;
+import org.camunda.bpm.model.cmmn.instance.ItemControl;
 import org.camunda.bpm.model.cmmn.instance.PlanItemDefinition;
 import org.camunda.bpm.model.cmmn.instance.TableItem;
 import org.camunda.bpm.model.xml.ModelBuilder;

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/impl/instance/ExpressionImpl.java
Patch:
@@ -16,6 +16,7 @@
 import static org.camunda.bpm.model.cmmn.impl.CmmnModelConstants.CMMN_ATTRIBUTE_LANGUAGE;
 import static org.camunda.bpm.model.cmmn.impl.CmmnModelConstants.CMMN_ELEMENT_EXPRESSION;
 
+import org.camunda.bpm.model.cmmn.instance.Body;
 import org.camunda.bpm.model.cmmn.instance.CmmnElement;
 import org.camunda.bpm.model.cmmn.instance.Expression;
 import org.camunda.bpm.model.xml.ModelBuilder;

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/impl/instance/ExtensionElementsImpl.java
Patch:
@@ -26,7 +26,6 @@
 import org.camunda.bpm.model.xml.instance.ModelElementInstance;
 import org.camunda.bpm.model.xml.type.ModelElementType;
 import org.camunda.bpm.model.xml.type.ModelElementTypeBuilder;
-import org.camunda.bpm.model.xml.type.child.SequenceBuilder;
 
 /**
  * @author Roman Smirnov
@@ -44,8 +43,6 @@ public ExtensionElements newInstance(ModelTypeInstanceContext instanceContext) {
         }
       });
 
-    SequenceBuilder sequence = typeBuilder.sequence();
-
     typeBuilder.build();
   }
 

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/impl/instance/IfPartImpl.java
Patch:
@@ -20,6 +20,7 @@
 
 import org.camunda.bpm.model.cmmn.instance.CaseFileItem;
 import org.camunda.bpm.model.cmmn.instance.CmmnElement;
+import org.camunda.bpm.model.cmmn.instance.ConditionExpression;
 import org.camunda.bpm.model.cmmn.instance.IfPart;
 import org.camunda.bpm.model.xml.ModelBuilder;
 import org.camunda.bpm.model.xml.impl.instance.ModelTypeInstanceContext;

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/impl/instance/ManualActivationRuleImpl.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.camunda.bpm.model.cmmn.instance.CaseFileItem;
 import org.camunda.bpm.model.cmmn.instance.CmmnElement;
+import org.camunda.bpm.model.cmmn.instance.ConditionExpression;
 import org.camunda.bpm.model.cmmn.instance.ManualActivationRule;
 import org.camunda.bpm.model.xml.ModelBuilder;
 import org.camunda.bpm.model.xml.impl.instance.ModelTypeInstanceContext;

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/impl/instance/ParameterMappingImpl.java
Patch:
@@ -20,6 +20,7 @@
 import org.camunda.bpm.model.cmmn.instance.CmmnElement;
 import org.camunda.bpm.model.cmmn.instance.Parameter;
 import org.camunda.bpm.model.cmmn.instance.ParameterMapping;
+import org.camunda.bpm.model.cmmn.instance.TransformationExpression;
 import org.camunda.bpm.model.xml.ModelBuilder;
 import org.camunda.bpm.model.xml.impl.instance.ModelTypeInstanceContext;
 import org.camunda.bpm.model.xml.type.ModelElementTypeBuilder;

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/impl/instance/PlanItemDefinitionImpl.java
Patch:
@@ -17,6 +17,7 @@
 import static org.camunda.bpm.model.cmmn.impl.CmmnModelConstants.CMMN_ELEMENT_PLAN_ITEM_DEFINITION;
 
 import org.camunda.bpm.model.cmmn.instance.CmmnElement;
+import org.camunda.bpm.model.cmmn.instance.DefaultControl;
 import org.camunda.bpm.model.cmmn.instance.PlanItemDefinition;
 import org.camunda.bpm.model.xml.ModelBuilder;
 import org.camunda.bpm.model.xml.impl.instance.ModelTypeInstanceContext;

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/impl/instance/PlanItemImpl.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.Collection;
 
 import org.camunda.bpm.model.cmmn.instance.CmmnElement;
+import org.camunda.bpm.model.cmmn.instance.ItemControl;
 import org.camunda.bpm.model.cmmn.instance.PlanItem;
 import org.camunda.bpm.model.cmmn.instance.PlanItemDefinition;
 import org.camunda.bpm.model.cmmn.instance.Sentry;

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/impl/instance/ProcessImpl.java
Patch:
@@ -20,6 +20,8 @@
 import java.util.Collection;
 
 import org.camunda.bpm.model.cmmn.instance.CmmnElement;
+import org.camunda.bpm.model.cmmn.instance.InputProcessParameter;
+import org.camunda.bpm.model.cmmn.instance.OutputProcessParameter;
 import org.camunda.bpm.model.cmmn.instance.Process;
 import org.camunda.bpm.model.xml.ModelBuilder;
 import org.camunda.bpm.model.xml.impl.instance.ModelTypeInstanceContext;

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/impl/instance/RepetitionRuleImpl.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.camunda.bpm.model.cmmn.instance.CaseFileItem;
 import org.camunda.bpm.model.cmmn.instance.CmmnElement;
+import org.camunda.bpm.model.cmmn.instance.ConditionExpression;
 import org.camunda.bpm.model.cmmn.instance.RepetitionRule;
 import org.camunda.bpm.model.xml.ModelBuilder;
 import org.camunda.bpm.model.xml.impl.instance.ModelTypeInstanceContext;

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/impl/instance/RequiredRuleImpl.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.camunda.bpm.model.cmmn.instance.CaseFileItem;
 import org.camunda.bpm.model.cmmn.instance.CmmnElement;
+import org.camunda.bpm.model.cmmn.instance.ConditionExpression;
 import org.camunda.bpm.model.cmmn.instance.RequiredRule;
 import org.camunda.bpm.model.xml.ModelBuilder;
 import org.camunda.bpm.model.xml.impl.instance.ModelTypeInstanceContext;

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/impl/instance/TaskImpl.java
Patch:
@@ -18,6 +18,8 @@
 
 import java.util.Collection;
 
+import org.camunda.bpm.model.cmmn.instance.InputsCaseParameter;
+import org.camunda.bpm.model.cmmn.instance.OutputsCaseParameter;
 import org.camunda.bpm.model.cmmn.instance.PlanItemDefinition;
 import org.camunda.bpm.model.cmmn.instance.Task;
 import org.camunda.bpm.model.xml.ModelBuilder;

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/instance/ApplicabilityRule.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.camunda.bpm.model.cmmn.instance;
 
-import org.camunda.bpm.model.cmmn.impl.instance.ConditionExpression;
 
 /**
  * @author Roman Smirnov

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/instance/CaseParameter.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.camunda.bpm.model.cmmn.instance;
 
-import org.camunda.bpm.model.cmmn.impl.instance.BindingRefinementExpression;
 
 /**
  * @author Roman Smirnov

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/instance/DiscretionaryItem.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.camunda.bpm.model.cmmn.instance;
 
-import org.camunda.bpm.model.cmmn.impl.instance.ItemControl;
 
 /**
  * @author Roman Smirnov

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/instance/IfPart.java
Patch:
@@ -14,8 +14,6 @@
 
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.impl.instance.ConditionExpression;
-
 /**
  * @author Roman Smirnov
  *

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/instance/ManualActivationRule.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.camunda.bpm.model.cmmn.instance;
 
-import org.camunda.bpm.model.cmmn.impl.instance.ConditionExpression;
 
 /**
  * @author Roman Smirnov

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/instance/ParameterMapping.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.camunda.bpm.model.cmmn.instance;
 
-import org.camunda.bpm.model.cmmn.impl.instance.TransformationExpression;
 
 /**
  * @author Roman Smirnov

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/instance/PlanItem.java
Patch:
@@ -14,8 +14,6 @@
 
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.impl.instance.ItemControl;
-
 
 /**
  * @author Roman Smirnov

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/instance/PlanItemDefinition.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.camunda.bpm.model.cmmn.instance;
 
-import org.camunda.bpm.model.cmmn.impl.instance.DefaultControl;
 
 /**
  * @author Roman Smirnov

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/instance/Process.java
Patch:
@@ -14,9 +14,6 @@
 
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.impl.instance.InputProcessParameter;
-import org.camunda.bpm.model.cmmn.impl.instance.OutputProcessParameter;
-
 /**
  * @author Roman Smirnov
  *

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/instance/RepetitionRule.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.camunda.bpm.model.cmmn.instance;
 
-import org.camunda.bpm.model.cmmn.impl.instance.ConditionExpression;
 
 /**
  * @author Roman Smirnov

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/instance/RequiredRule.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.camunda.bpm.model.cmmn.instance;
 
-import org.camunda.bpm.model.cmmn.impl.instance.ConditionExpression;
 
 /**
  * @author Roman Smirnov

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/instance/Task.java
Patch:
@@ -14,9 +14,6 @@
 
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.impl.instance.InputsCaseParameter;
-import org.camunda.bpm.model.cmmn.impl.instance.OutputsCaseParameter;
-
 /**
  * @author Roman Smirnov
  *

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/CreateModelTest.java
Patch:
@@ -13,8 +13,8 @@
 
 package org.camunda.bpm.model.cmmn;
 
-import org.camunda.bpm.model.cmmn.impl.instance.CasePlanModel;
 import org.camunda.bpm.model.cmmn.instance.Case;
+import org.camunda.bpm.model.cmmn.instance.CasePlanModel;
 import org.camunda.bpm.model.cmmn.instance.CmmnModelElementInstance;
 import org.camunda.bpm.model.cmmn.instance.Definitions;
 import org.camunda.bpm.model.cmmn.instance.HumanTask;

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/GenerateIdTest.java
Patch:
@@ -15,8 +15,8 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import org.camunda.bpm.model.cmmn.impl.instance.CasePlanModel;
 import org.camunda.bpm.model.cmmn.instance.Case;
+import org.camunda.bpm.model.cmmn.instance.CasePlanModel;
 import org.camunda.bpm.model.cmmn.instance.Definitions;
 import org.camunda.bpm.model.cmmn.instance.HumanTask;
 import org.junit.Test;

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/SimpleTest.java
Patch:
@@ -16,8 +16,8 @@
 
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.impl.instance.CasePlanModel;
 import org.camunda.bpm.model.cmmn.instance.Case;
+import org.camunda.bpm.model.cmmn.instance.CasePlanModel;
 import org.camunda.bpm.model.cmmn.instance.HumanTask;
 import org.camunda.bpm.model.cmmn.instance.PlanItem;
 import org.camunda.bpm.model.cmmn.instance.PlanItemDefinition;
@@ -40,7 +40,7 @@ public void shouldGetElements() {
 
     Collection<Case> caseElements = cmmnModelInstance.getDefinitions().getCases();
     assertThat(caseElements).hasSize(1);
-    Case caseElement = (Case) caseElements.iterator().next();
+    Case caseElement = caseElements.iterator().next();
 
     assertThat(caseElement.getId()).isEqualTo("Case_1");
     assertThat(caseElement.getName()).isNull();

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/ApplicabilityRuleTest.java
Patch:
@@ -15,8 +15,6 @@
 import java.util.Arrays;
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.impl.instance.ConditionExpression;
-
 /**
  * @author Roman Smirnov
  *

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/BindingRefinementExpressionTest.java
Patch:
@@ -10,11 +10,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.model.cmmn.impl.instance;
+package org.camunda.bpm.model.cmmn.instance;
 
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.instance.CmmnModelElementInstanceTest;
 import org.camunda.bpm.model.cmmn.instance.Expression;
 
 /**

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/BodyTest.java
Patch:
@@ -10,12 +10,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.model.cmmn.impl.instance;
+package org.camunda.bpm.model.cmmn.instance;
 
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.instance.CmmnModelElementInstanceTest;
-
 /**
  * @author Roman Smirnov
  *

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/CaseFileModelTest.java
Patch:
@@ -10,12 +10,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.model.cmmn.impl.instance;
+package org.camunda.bpm.model.cmmn.instance;
 
 import java.util.Collection;
 
 import org.camunda.bpm.model.cmmn.instance.CaseFile;
-import org.camunda.bpm.model.cmmn.instance.CmmnModelElementInstanceTest;
 
 /**
  * @author Roman Smirnov

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/CaseParameterTest.java
Patch:
@@ -15,8 +15,6 @@
 import java.util.Arrays;
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.impl.instance.BindingRefinementExpression;
-
 /**
  * @author Roman Smirnov
  *

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/CasePlanModelTest.java
Patch:
@@ -10,11 +10,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.model.cmmn.impl.instance;
+package org.camunda.bpm.model.cmmn.instance;
 
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.instance.CmmnModelElementInstanceTest;
 import org.camunda.bpm.model.cmmn.instance.Stage;
 
 /**

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/CaseRolesTest.java
Patch:
@@ -10,11 +10,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.model.cmmn.impl.instance;
+package org.camunda.bpm.model.cmmn.instance;
 
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.instance.CmmnModelElementInstanceTest;
 import org.camunda.bpm.model.cmmn.instance.Role;
 
 /**

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/ConditionExpressionTest.java
Patch:
@@ -10,11 +10,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.model.cmmn.impl.instance;
+package org.camunda.bpm.model.cmmn.instance;
 
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.instance.CmmnModelElementInstanceTest;
 import org.camunda.bpm.model.cmmn.instance.Expression;
 
 /**

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/DefaultControlTest.java
Patch:
@@ -10,11 +10,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.model.cmmn.impl.instance;
+package org.camunda.bpm.model.cmmn.instance;
 
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.instance.CmmnModelElementInstanceTest;
 import org.camunda.bpm.model.cmmn.instance.PlanItemControl;
 
 /**

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/DiscretionaryItemTest.java
Patch:
@@ -15,8 +15,6 @@
 import java.util.Arrays;
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.impl.instance.ItemControl;
-
 /**
  * @author Roman Smirnov
  *

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/ExpressionTest.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.Collection;
 
 import org.camunda.bpm.model.cmmn.impl.CmmnModelConstants;
-import org.camunda.bpm.model.cmmn.impl.instance.Body;
 
 /**
  * @author Roman Smirnov

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/IfPartTest.java
Patch:
@@ -15,8 +15,6 @@
 import java.util.Arrays;
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.impl.instance.ConditionExpression;
-
 /**
  * @author Roman Smirnov
  *

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/InputCaseParameterTest.java
Patch:
@@ -10,12 +10,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.model.cmmn.impl.instance;
+package org.camunda.bpm.model.cmmn.instance;
 
 import java.util.Collection;
 
 import org.camunda.bpm.model.cmmn.instance.CaseParameter;
-import org.camunda.bpm.model.cmmn.instance.CmmnModelElementInstanceTest;
 
 /**
  * @author Roman Smirnov

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/InputProcessParameterTest.java
Patch:
@@ -10,11 +10,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.model.cmmn.impl.instance;
+package org.camunda.bpm.model.cmmn.instance;
 
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.instance.CmmnModelElementInstanceTest;
 import org.camunda.bpm.model.cmmn.instance.ProcessParameter;
 
 /**

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/InputsCaseParameterTest.java
Patch:
@@ -10,12 +10,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.model.cmmn.impl.instance;
+package org.camunda.bpm.model.cmmn.instance;
 
 import java.util.Collection;
 
 import org.camunda.bpm.model.cmmn.instance.CaseParameter;
-import org.camunda.bpm.model.cmmn.instance.CmmnModelElementInstanceTest;
 
 /**
  * @author Roman Smirnov

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/ItemControlTest.java
Patch:
@@ -10,11 +10,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.model.cmmn.impl.instance;
+package org.camunda.bpm.model.cmmn.instance;
 
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.instance.CmmnModelElementInstanceTest;
 import org.camunda.bpm.model.cmmn.instance.PlanItemControl;
 
 /**

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/ManualActivationRuleTest.java
Patch:
@@ -15,8 +15,6 @@
 import java.util.Arrays;
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.impl.instance.ConditionExpression;
-
 /**
  * @author Roman Smirnov
  *

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/OutputCaseParameterTest.java
Patch:
@@ -10,12 +10,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.model.cmmn.impl.instance;
+package org.camunda.bpm.model.cmmn.instance;
 
 import java.util.Collection;
 
 import org.camunda.bpm.model.cmmn.instance.CaseParameter;
-import org.camunda.bpm.model.cmmn.instance.CmmnModelElementInstanceTest;
 
 /**
  * @author Roman Smirnov

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/OutputProcessParameterTest.java
Patch:
@@ -10,11 +10,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.model.cmmn.impl.instance;
+package org.camunda.bpm.model.cmmn.instance;
 
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.instance.CmmnModelElementInstanceTest;
 import org.camunda.bpm.model.cmmn.instance.ProcessParameter;
 
 /**

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/OutputsCaseParameterTest.java
Patch:
@@ -10,12 +10,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.model.cmmn.impl.instance;
+package org.camunda.bpm.model.cmmn.instance;
 
 import java.util.Collection;
 
 import org.camunda.bpm.model.cmmn.instance.CaseParameter;
-import org.camunda.bpm.model.cmmn.instance.CmmnModelElementInstanceTest;
 
 /**
  * @author Roman Smirnov

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/ParameterMappingTest.java
Patch:
@@ -15,8 +15,6 @@
 import java.util.Arrays;
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.impl.instance.TransformationExpression;
-
 /**
  * @author Roman Smirnov
  *

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/PlanItemDefinitionTest.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.Arrays;
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.impl.instance.DefaultControl;
+import org.camunda.bpm.model.cmmn.impl.instance.DefaultControlImpl;
 
 /**
  * @author Roman Smirnov

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/PlanItemTest.java
Patch:
@@ -15,8 +15,6 @@
 import java.util.Arrays;
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.impl.instance.ItemControl;
-
 /**
  * @author Roman Smirnov
  *

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/ProcessTest.java
Patch:
@@ -15,9 +15,6 @@
 import java.util.Arrays;
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.impl.instance.InputProcessParameter;
-import org.camunda.bpm.model.cmmn.impl.instance.OutputProcessParameter;
-
 /**
  * @author Roman Smirnov
  *

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/RepetitionRuleTest.java
Patch:
@@ -15,8 +15,6 @@
 import java.util.Arrays;
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.impl.instance.ConditionExpression;
-
 /**
  * @author Roman Smirnov
  *

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/RequiredRuleTest.java
Patch:
@@ -15,8 +15,6 @@
 import java.util.Arrays;
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.impl.instance.ConditionExpression;
-
 /**
  * @author Roman Smirnov
  *

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/TaskTest.java
Patch:
@@ -15,9 +15,6 @@
 import java.util.Arrays;
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.impl.instance.InputsCaseParameter;
-import org.camunda.bpm.model.cmmn.impl.instance.OutputsCaseParameter;
-
 /**
  * @author Roman Smirnov
  *

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/TransformationExpressionTest.java
Patch:
@@ -10,11 +10,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.model.cmmn.impl.instance;
+package org.camunda.bpm.model.cmmn.instance;
 
 import java.util.Collection;
 
-import org.camunda.bpm.model.cmmn.instance.CmmnModelElementInstanceTest;
 import org.camunda.bpm.model.cmmn.instance.Expression;
 
 /**

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/CompensationEventActivityBehavior.java
Patch:
@@ -30,11 +30,11 @@
  * @author Philipp Ossler
  *
  */
-public class CompensationEndEventActivityBehavior extends FlowNodeActivityBehavior {
+public class CompensationEventActivityBehavior extends FlowNodeActivityBehavior {
 
   protected final CompensateEventDefinition compensateEventDefinition;
 
-  public CompensationEndEventActivityBehavior(CompensateEventDefinition compensateEventDefinition) {
+  public CompensationEventActivityBehavior(CompensateEventDefinition compensateEventDefinition) {
     this.compensateEventDefinition = compensateEventDefinition;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AbstractInstantiationCmd.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.exception.NotValidException;
-import org.camunda.bpm.engine.impl.ActivityExecutionMapping;
+import org.camunda.bpm.engine.impl.ActivityExecutionTreeMapping;
 import org.camunda.bpm.engine.impl.bpmn.behavior.SequentialMultiInstanceActivityBehavior;
 import org.camunda.bpm.engine.impl.bpmn.parser.BpmnParse;
 import org.camunda.bpm.engine.impl.core.delegate.CoreActivityBehavior;
@@ -97,7 +97,7 @@ public Void execute(final CommandContext commandContext) {
         elementToInstantiate);
 
     // rebuild the mapping because the execution tree changes with every iteration
-    final ActivityExecutionMapping mapping = new ActivityExecutionMapping(commandContext, processInstanceId);
+    final ActivityExecutionTreeMapping mapping = new ActivityExecutionTreeMapping(commandContext, processInstanceId);
 
     // before instantiating an activity, two things have to be determined:
     //
@@ -293,7 +293,7 @@ protected boolean supportsConcurrentChildInstantiation(ScopeImpl flowScope) {
     return behavior == null || !(behavior instanceof SequentialMultiInstanceActivityBehavior);
   }
 
-  protected ExecutionEntity getSingleExecutionForScope(ActivityExecutionMapping mapping, ScopeImpl scope) {
+  protected ExecutionEntity getSingleExecutionForScope(ActivityExecutionTreeMapping mapping, ScopeImpl scope) {
     Set<ExecutionEntity> executions = mapping.getExecutions(scope);
 
     if (!executions.isEmpty()) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AbstractProcessInstanceModificationCommand.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Set;
 
 import org.camunda.bpm.engine.ProcessEngineException;
-import org.camunda.bpm.engine.impl.ActivityExecutionMapping;
+import org.camunda.bpm.engine.impl.ActivityExecutionTreeMapping;
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
@@ -146,7 +146,7 @@ protected ScopeImpl getScopeForActivityInstance(ProcessDefinitionImpl processDef
   }
 
   protected ExecutionEntity getScopeExecutionForActivityInstance(ExecutionEntity processInstance,
-      ActivityExecutionMapping mapping, ActivityInstance activityInstance) {
+      ActivityExecutionTreeMapping mapping, ActivityInstance activityInstance) {
     ensureNotNull("activityInstance", activityInstance);
 
     ProcessDefinitionImpl processDefinition = processInstance.getProcessDefinition();

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ActivityInstanceCancellationCmd.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.concurrent.Callable;
 
 import org.camunda.bpm.engine.exception.NotValidException;
-import org.camunda.bpm.engine.impl.ActivityExecutionMapping;
+import org.camunda.bpm.engine.impl.ActivityExecutionTreeMapping;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 import org.camunda.bpm.engine.impl.util.EnsureUtil;
@@ -39,7 +39,7 @@ protected ExecutionEntity determineSourceInstanceExecution(final CommandContext
     ExecutionEntity processInstance = commandContext.getExecutionManager().findExecutionById(processInstanceId);
 
     // rebuild the mapping because the execution tree changes with every iteration
-    ActivityExecutionMapping mapping = new ActivityExecutionMapping(commandContext, processInstanceId);
+    ActivityExecutionTreeMapping mapping = new ActivityExecutionTreeMapping(commandContext, processInstanceId);
 
     ActivityInstance instance = commandContext.runWithoutAuthorization(new Callable<ActivityInstance>() {
       public ActivityInstance call() throws Exception {

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityInstanceEnd.java
Patch:
@@ -18,6 +18,7 @@
 import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.delegate.CompositeActivityBehavior;
 import org.camunda.bpm.engine.impl.pvm.runtime.CompensationBehavior;
+import org.camunda.bpm.engine.impl.pvm.runtime.LegacyBehavior;
 import org.camunda.bpm.engine.impl.pvm.runtime.PvmExecutionImpl;
 
 
@@ -41,7 +42,8 @@ protected PvmExecutionImpl eventNotificationsStarted(PvmExecutionImpl execution)
     if (parent != null && execution.isScope() &&
         activity != null && activity.isScope() &&
         (activity.getActivityBehavior() instanceof CompositeActivityBehavior
-            || CompensationBehavior.isCompensationThrowing(execution))) {
+            || (CompensationBehavior.isCompensationThrowing(execution))
+              && !LegacyBehavior.isCompensationThrowing(execution))) {
 
       if(log.isLoggable(Level.FINE)) {
         log.fine("[LEAVE] "+ execution + ": "+execution.getActivityInstanceId() );

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityInstanceStart.java
Patch:
@@ -12,8 +12,6 @@
  */
 package org.camunda.bpm.engine.impl.pvm.runtime.operation;
 
-import org.camunda.bpm.engine.impl.bpmn.behavior.CompensationEndEventActivityBehavior;
-import org.camunda.bpm.engine.impl.bpmn.behavior.IntermediateThrowCompensationEventActivityBehavior;
 import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.delegate.CompositeActivityBehavior;
 import org.camunda.bpm.engine.impl.pvm.runtime.CompensationBehavior;

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationCreateConcurrentExecution.java
Patch:
@@ -12,10 +12,7 @@
  */
 package org.camunda.bpm.engine.impl.pvm.runtime.operation;
 
-import java.util.List;
-
 import org.camunda.bpm.engine.impl.pvm.PvmActivity;
-import org.camunda.bpm.engine.impl.pvm.runtime.LegacyBehavior;
 import org.camunda.bpm.engine.impl.pvm.runtime.PvmExecutionImpl;
 
 /**

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationFireProcessStart.java
Patch:
@@ -15,8 +15,6 @@
 
 import org.camunda.bpm.engine.delegate.ExecutionListener;
 import org.camunda.bpm.engine.impl.pvm.process.ScopeImpl;
-import org.camunda.bpm.engine.impl.pvm.runtime.InstantiationStack;
-import org.camunda.bpm.engine.impl.pvm.runtime.ProcessInstanceStartContext;
 import org.camunda.bpm.engine.impl.pvm.runtime.PvmExecutionImpl;
 
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/tree/ActivityExecutionMappingCollector.java
Patch:
@@ -19,6 +19,7 @@
 import org.camunda.bpm.engine.impl.pvm.PvmScope;
 import org.camunda.bpm.engine.impl.pvm.delegate.ActivityExecution;
 import org.camunda.bpm.engine.impl.pvm.process.ScopeImpl;
+import org.camunda.bpm.engine.impl.pvm.runtime.LegacyBehavior;
 import org.camunda.bpm.engine.impl.pvm.runtime.PvmExecutionImpl;
 
 /**
@@ -52,7 +53,7 @@ public void visit(ActivityExecution execution) {
   }
 
   private void appendActivityExecutionMapping(ActivityExecution execution) {
-    if (execution.getActivity() != null) {
+    if (execution.getActivity() != null && !LegacyBehavior.hasInvalidIntermediaryActivityId((PvmExecutionImpl) execution)) {
       activityExecutionMapping.putAll(execution.createActivityExecutionMapping());
     }
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/parse/BpmnParseTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.impl.bpmn.behavior.BoundaryEventActivityBehavior;
-import org.camunda.bpm.engine.impl.bpmn.behavior.CompensationEndEventActivityBehavior;
+import org.camunda.bpm.engine.impl.bpmn.behavior.CompensationEventActivityBehavior;
 import org.camunda.bpm.engine.impl.bpmn.behavior.EventSubProcessStartEventActivityBehavior;
 import org.camunda.bpm.engine.impl.bpmn.behavior.NoneStartEventActivityBehavior;
 import org.camunda.bpm.engine.impl.bpmn.behavior.ThrowEscalationEventActivityBehavior;
@@ -381,7 +381,7 @@ public void testParseCompensationEndEvent() {
 
     assertEquals("compensationEndEvent", endEvent.getProperty("type"));
     assertEquals(Boolean.TRUE, endEvent.getProperty(BpmnParse.PROPERTYNAME_THROWS_COMPENSATION));
-    assertEquals(CompensationEndEventActivityBehavior.class, endEvent.getActivityBehavior().getClass());
+    assertEquals(CompensationEventActivityBehavior.class, endEvent.getActivityBehavior().getClass());
   }
 
   @Deployment

File: qa/test-db-instance-migration/test-fixture-72/src/main/java/org/camunda/bpm/qa/upgrade/scenarios/authorization/AuthorizationScenario.java
Patch:
@@ -54,7 +54,7 @@ public void execute(ProcessEngine engine, String scenarioName) {
         identityService.createMembership("test", "accounting");
 
         // start a process instance
-        engine.getRuntimeService().startProcessInstanceByKey("oneTaskProcess");
+        engine.getRuntimeService().startProcessInstanceByKey("oneTaskProcess", scenarioName);
       }
     };
   }

File: qa/test-db-instance-migration/test-fixture-72/src/main/java/org/camunda/bpm/qa/upgrade/scenarios/compensation/SubprocessParallelCreateCompensationScenario.java
Patch:
@@ -16,7 +16,6 @@
 import org.camunda.bpm.engine.task.Task;
 import org.camunda.bpm.engine.test.Deployment;
 import org.camunda.bpm.qa.upgrade.DescribesScenario;
-import org.camunda.bpm.qa.upgrade.ExtendsScenario;
 import org.camunda.bpm.qa.upgrade.ScenarioSetup;
 import org.camunda.bpm.qa.upgrade.Times;
 

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios720/boundary/NonInterruptingBoundaryEventScenarioTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.camunda.bpm.qa.upgrade.scenarios.boundary;
+package org.camunda.bpm.qa.upgrade.scenarios720.boundary;
 
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.assertThat;
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.describeActivityInstanceTree;
@@ -9,13 +9,15 @@
 import org.camunda.bpm.engine.runtime.Job;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.task.Task;
+import org.camunda.bpm.qa.upgrade.Origin;
 import org.camunda.bpm.qa.upgrade.ScenarioUnderTest;
 import org.camunda.bpm.qa.upgrade.UpgradeTestRule;
 import org.junit.Assert;
 import org.junit.Rule;
 import org.junit.Test;
 
 @ScenarioUnderTest("NonInterruptingBoundaryEventScenario")
+@Origin("7.2.0")
 public class NonInterruptingBoundaryEventScenarioTest {
 
   @Rule

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios720/compensation/SingleActivityCompensationScenarioTest.java
Patch:
@@ -10,14 +10,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.qa.upgrade.scenarios.compensation;
+package org.camunda.bpm.qa.upgrade.scenarios720.compensation;
 
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.assertThat;
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.describeActivityInstanceTree;
 
 import org.camunda.bpm.engine.runtime.ActivityInstance;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.task.Task;
+import org.camunda.bpm.qa.upgrade.Origin;
 import org.camunda.bpm.qa.upgrade.ScenarioUnderTest;
 import org.camunda.bpm.qa.upgrade.UpgradeTestRule;
 import org.junit.Assert;
@@ -29,6 +30,7 @@
  *
  */
 @ScenarioUnderTest("SingleActivityCompensationScenario")
+@Origin("7.2.0")
 public class SingleActivityCompensationScenarioTest {
 
   @Rule

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios720/eventsubprocess/InterruptingEventSubprocessScenarioTest.java
Patch:
@@ -1,18 +1,20 @@
-package org.camunda.bpm.qa.upgrade.scenarios.eventsubprocess;
+package org.camunda.bpm.qa.upgrade.scenarios720.eventsubprocess;
 
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.assertThat;
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.describeActivityInstanceTree;
 
 import org.camunda.bpm.engine.runtime.ActivityInstance;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.task.Task;
+import org.camunda.bpm.qa.upgrade.Origin;
 import org.camunda.bpm.qa.upgrade.ScenarioUnderTest;
 import org.camunda.bpm.qa.upgrade.UpgradeTestRule;
 import org.junit.Assert;
 import org.junit.Rule;
 import org.junit.Test;
 
 @ScenarioUnderTest("InterruptingEventSubprocessScenario")
+@Origin("7.2.0")
 public class InterruptingEventSubprocessScenarioTest {
 
   @Rule

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios720/eventsubprocess/NestedInterruptingErrorEventSubprocessScenarioTest.java
Patch:
@@ -10,14 +10,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.qa.upgrade.scenarios.eventsubprocess;
+package org.camunda.bpm.qa.upgrade.scenarios720.eventsubprocess;
 
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.assertThat;
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.describeActivityInstanceTree;
 
 import org.camunda.bpm.engine.runtime.ActivityInstance;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.task.Task;
+import org.camunda.bpm.qa.upgrade.Origin;
 import org.camunda.bpm.qa.upgrade.ScenarioUnderTest;
 import org.camunda.bpm.qa.upgrade.UpgradeTestRule;
 import org.camunda.bpm.qa.upgrade.util.ThrowBpmnErrorDelegate;
@@ -31,6 +32,7 @@
  *
  */
 @ScenarioUnderTest("NestedInterruptingErrorEventSubprocessScenario")
+@Origin("7.2.0")
 public class NestedInterruptingErrorEventSubprocessScenarioTest {
 
   @Rule

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios720/eventsubprocess/NestedInterruptingEventSubprocessParallelScenarioTest.java
Patch:
@@ -10,10 +10,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.qa.upgrade.scenarios.eventsubprocess;
+package org.camunda.bpm.qa.upgrade.scenarios720.eventsubprocess;
 
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.task.Task;
+import org.camunda.bpm.qa.upgrade.Origin;
 import org.camunda.bpm.qa.upgrade.ScenarioUnderTest;
 import org.camunda.bpm.qa.upgrade.UpgradeTestRule;
 import org.camunda.bpm.qa.upgrade.util.CompleteTaskThread;
@@ -26,6 +27,7 @@
  *
  */
 @ScenarioUnderTest("NestedInterruptingEventSubprocessParallelScenario")
+@Origin("7.2.0")
 public class NestedInterruptingEventSubprocessParallelScenarioTest {
 
   @Rule

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios720/eventsubprocess/NestedNonInterruptingEventSubprocessNestedSubprocessTest.java
Patch:
@@ -1,11 +1,12 @@
-package org.camunda.bpm.qa.upgrade.scenarios.eventsubprocess;
+package org.camunda.bpm.qa.upgrade.scenarios720.eventsubprocess;
 
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.assertThat;
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.describeActivityInstanceTree;
 
 import org.camunda.bpm.engine.runtime.ActivityInstance;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.task.Task;
+import org.camunda.bpm.qa.upgrade.Origin;
 import org.camunda.bpm.qa.upgrade.ScenarioUnderTest;
 import org.camunda.bpm.qa.upgrade.UpgradeTestRule;
 import org.camunda.bpm.qa.upgrade.util.ThrowBpmnErrorDelegate;
@@ -15,6 +16,7 @@
 import org.junit.Test;
 
 @ScenarioUnderTest("NestedNonInterruptingEventSubprocessNestedSubprocessScenario")
+@Origin("7.2.0")
 public class NestedNonInterruptingEventSubprocessNestedSubprocessTest {
 
   @Rule

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios720/eventsubprocess/NestedNonInterruptingEventSubprocessScenarioTest.java
Patch:
@@ -1,11 +1,12 @@
-package org.camunda.bpm.qa.upgrade.scenarios.eventsubprocess;
+package org.camunda.bpm.qa.upgrade.scenarios720.eventsubprocess;
 
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.assertThat;
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.describeActivityInstanceTree;
 
 import org.camunda.bpm.engine.runtime.ActivityInstance;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.task.Task;
+import org.camunda.bpm.qa.upgrade.Origin;
 import org.camunda.bpm.qa.upgrade.ScenarioUnderTest;
 import org.camunda.bpm.qa.upgrade.UpgradeTestRule;
 import org.camunda.bpm.qa.upgrade.util.ThrowBpmnErrorDelegate;
@@ -15,6 +16,7 @@
 import org.junit.Test;
 
 @ScenarioUnderTest("NestedNonInterruptingEventSubprocessScenario")
+@Origin("7.2.0")
 public class NestedNonInterruptingEventSubprocessScenarioTest {
 
   @Rule

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios720/eventsubprocess/NestedParallelNonInterruptingEventSubprocessScenarioTest.java
Patch:
@@ -1,11 +1,12 @@
-package org.camunda.bpm.qa.upgrade.scenarios.eventsubprocess;
+package org.camunda.bpm.qa.upgrade.scenarios720.eventsubprocess;
 
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.assertThat;
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.describeActivityInstanceTree;
 
 import org.camunda.bpm.engine.runtime.ActivityInstance;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.task.Task;
+import org.camunda.bpm.qa.upgrade.Origin;
 import org.camunda.bpm.qa.upgrade.ScenarioUnderTest;
 import org.camunda.bpm.qa.upgrade.UpgradeTestRule;
 import org.camunda.bpm.qa.upgrade.util.ThrowBpmnErrorDelegate;
@@ -15,6 +16,7 @@
 import org.junit.Test;
 
 @ScenarioUnderTest("NestedParallelNonInterruptingEventSubprocessScenario")
+@Origin("7.2.0")
 public class NestedParallelNonInterruptingEventSubprocessScenarioTest {
 
   @Rule

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios720/eventsubprocess/NonInterruptingEventSubprocessScenarioTest.java
Patch:
@@ -1,18 +1,20 @@
-package org.camunda.bpm.qa.upgrade.scenarios.eventsubprocess;
+package org.camunda.bpm.qa.upgrade.scenarios720.eventsubprocess;
 
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.assertThat;
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.describeActivityInstanceTree;
 
 import org.camunda.bpm.engine.runtime.ActivityInstance;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.task.Task;
+import org.camunda.bpm.qa.upgrade.Origin;
 import org.camunda.bpm.qa.upgrade.ScenarioUnderTest;
 import org.camunda.bpm.qa.upgrade.UpgradeTestRule;
 import org.junit.Assert;
 import org.junit.Rule;
 import org.junit.Test;
 
 @ScenarioUnderTest("NonInterruptingEventSubprocessScenario")
+@Origin("7.2.0")
 public class NonInterruptingEventSubprocessScenarioTest {
 
   @Rule

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios720/eventsubprocess/ParallelNestedNonInterruptingEventSubprocessScenarioTest.java
Patch:
@@ -1,11 +1,12 @@
-package org.camunda.bpm.qa.upgrade.scenarios.eventsubprocess;
+package org.camunda.bpm.qa.upgrade.scenarios720.eventsubprocess;
 
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.assertThat;
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.describeActivityInstanceTree;
 
 import org.camunda.bpm.engine.runtime.ActivityInstance;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.task.Task;
+import org.camunda.bpm.qa.upgrade.Origin;
 import org.camunda.bpm.qa.upgrade.ScenarioUnderTest;
 import org.camunda.bpm.qa.upgrade.UpgradeTestRule;
 import org.camunda.bpm.qa.upgrade.util.ThrowBpmnErrorDelegate;
@@ -15,6 +16,7 @@
 import org.junit.Test;
 
 @ScenarioUnderTest("ParallelNestedNonInterruptingEventSubprocessScenario")
+@Origin("7.2.0")
 public class ParallelNestedNonInterruptingEventSubprocessScenarioTest {
 
   @Rule

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios720/eventsubprocess/TwoLevelNestedNonInterruptingEventSubprocessScenarioTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.qa.upgrade.scenarios.eventsubprocess;
+package org.camunda.bpm.qa.upgrade.scenarios720.eventsubprocess;
 
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.assertThat;
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.describeActivityInstanceTree;
@@ -20,6 +20,7 @@
 import org.camunda.bpm.engine.runtime.ActivityInstance;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.task.Task;
+import org.camunda.bpm.qa.upgrade.Origin;
 import org.camunda.bpm.qa.upgrade.ScenarioUnderTest;
 import org.camunda.bpm.qa.upgrade.UpgradeTestRule;
 import org.camunda.bpm.qa.upgrade.util.ThrowBpmnErrorDelegate;
@@ -33,6 +34,7 @@
  *
  */
 @ScenarioUnderTest("TwoLevelNestedNonInterruptingEventSubprocessScenario")
+@Origin("7.2.0")
 public class TwoLevelNestedNonInterruptingEventSubprocessScenarioTest {
 
   @Rule

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios720/gateway/EventBasedGatewayScenarioTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.qa.upgrade.scenarios.gateway;
+package org.camunda.bpm.qa.upgrade.scenarios720.gateway;
 
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.assertThat;
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.describeActivityInstanceTree;
@@ -19,6 +19,7 @@
 import org.camunda.bpm.engine.runtime.Job;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.task.Task;
+import org.camunda.bpm.qa.upgrade.Origin;
 import org.camunda.bpm.qa.upgrade.ScenarioUnderTest;
 import org.camunda.bpm.qa.upgrade.UpgradeTestRule;
 import org.junit.Assert;
@@ -30,6 +31,7 @@
  *
  */
 @ScenarioUnderTest("EventBasedGatewayScenario")
+@Origin("7.2.0")
 public class EventBasedGatewayScenarioTest {
 
   @Rule

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios720/job/AsyncParallelMultiInstanceScenarioTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.camunda.bpm.qa.upgrade.scenarios.job;
+package org.camunda.bpm.qa.upgrade.scenarios720.job;
 
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.assertThat;
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.describeActivityInstanceTree;
@@ -10,13 +10,15 @@
 import org.camunda.bpm.engine.runtime.Job;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.task.Task;
+import org.camunda.bpm.qa.upgrade.Origin;
 import org.camunda.bpm.qa.upgrade.ScenarioUnderTest;
 import org.camunda.bpm.qa.upgrade.UpgradeTestRule;
 import org.junit.Assert;
 import org.junit.Rule;
 import org.junit.Test;
 
 @ScenarioUnderTest("AsyncParallelMultiInstanceScenario")
+@Origin("7.2.0")
 public class AsyncParallelMultiInstanceScenarioTest {
 
   @Rule

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios720/job/AsyncSequentialMultiInstanceScenarioTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.camunda.bpm.qa.upgrade.scenarios.job;
+package org.camunda.bpm.qa.upgrade.scenarios720.job;
 
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.assertThat;
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.describeActivityInstanceTree;
@@ -8,13 +8,15 @@
 import org.camunda.bpm.engine.runtime.Job;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.task.Task;
+import org.camunda.bpm.qa.upgrade.Origin;
 import org.camunda.bpm.qa.upgrade.ScenarioUnderTest;
 import org.camunda.bpm.qa.upgrade.UpgradeTestRule;
 import org.junit.Assert;
 import org.junit.Rule;
 import org.junit.Test;
 
 @ScenarioUnderTest("AsyncSequentialMultiInstanceScenario")
+@Origin("7.2.0")
 public class AsyncSequentialMultiInstanceScenarioTest {
 
   @Rule

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios720/multiinstance/NestedSequentialMultiInstanceScenarioTest.java
Patch:
@@ -1,11 +1,12 @@
-package org.camunda.bpm.qa.upgrade.scenarios.multiinstance;
+package org.camunda.bpm.qa.upgrade.scenarios720.multiinstance;
 
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.assertThat;
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.describeActivityInstanceTree;
 
 import org.camunda.bpm.engine.runtime.ActivityInstance;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.task.Task;
+import org.camunda.bpm.qa.upgrade.Origin;
 import org.camunda.bpm.qa.upgrade.ScenarioUnderTest;
 import org.camunda.bpm.qa.upgrade.UpgradeTestRule;
 import org.camunda.bpm.qa.upgrade.util.ThrowBpmnErrorDelegate;
@@ -15,6 +16,7 @@
 import org.junit.Test;
 
 @ScenarioUnderTest("NestedSequentialMultiInstanceSubprocessScenario")
+@Origin("7.2.0")
 public class NestedSequentialMultiInstanceScenarioTest {
 
   @Rule

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios720/task/OneScopeTaskScenarioTest.java
Patch:
@@ -10,13 +10,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.qa.upgrade.scenarios.task;
+package org.camunda.bpm.qa.upgrade.scenarios720.task;
 
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.assertThat;
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.describeActivityInstanceTree;
 
 import org.camunda.bpm.engine.runtime.ActivityInstance;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
+import org.camunda.bpm.qa.upgrade.Origin;
 import org.camunda.bpm.qa.upgrade.ScenarioUnderTest;
 import org.camunda.bpm.qa.upgrade.UpgradeTestRule;
 import org.junit.Assert;
@@ -28,6 +29,7 @@
  *
  */
 @ScenarioUnderTest("OneScopeTaskScenario")
+@Origin("7.2.0")
 public class OneScopeTaskScenarioTest {
 
   @Rule

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios720/task/OneTaskScenarioTest.java
Patch:
@@ -10,13 +10,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.qa.upgrade.scenarios.task;
+package org.camunda.bpm.qa.upgrade.scenarios720.task;
 
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.assertThat;
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.describeActivityInstanceTree;
 
 import org.camunda.bpm.engine.runtime.ActivityInstance;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
+import org.camunda.bpm.qa.upgrade.Origin;
 import org.camunda.bpm.qa.upgrade.ScenarioUnderTest;
 import org.camunda.bpm.qa.upgrade.UpgradeTestRule;
 import org.junit.Assert;
@@ -28,6 +29,7 @@
  *
  */
 @ScenarioUnderTest("OneTaskScenario")
+@Origin("7.2.0")
 public class OneTaskScenarioTest {
 
   @Rule

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios720/task/ParallelScopeTasksScenarioTest.java
Patch:
@@ -10,13 +10,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.qa.upgrade.scenarios.task;
+package org.camunda.bpm.qa.upgrade.scenarios720.task;
 
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.assertThat;
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.describeActivityInstanceTree;
 
 import org.camunda.bpm.engine.runtime.ActivityInstance;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
+import org.camunda.bpm.qa.upgrade.Origin;
 import org.camunda.bpm.qa.upgrade.ScenarioUnderTest;
 import org.camunda.bpm.qa.upgrade.UpgradeTestRule;
 import org.junit.Assert;
@@ -28,6 +29,7 @@
  *
  */
 @ScenarioUnderTest("ParallelScopeTasksScenario")
+@Origin("7.2.0")
 public class ParallelScopeTasksScenarioTest {
 
   @Rule

File: qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios720/task/ParallelTasksScenarioTest.java
Patch:
@@ -10,13 +10,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.qa.upgrade.scenarios.task;
+package org.camunda.bpm.qa.upgrade.scenarios720.task;
 
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.assertThat;
 import static org.camunda.bpm.qa.upgrade.util.ActivityInstanceAssert.describeActivityInstanceTree;
 
 import org.camunda.bpm.engine.runtime.ActivityInstance;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
+import org.camunda.bpm.qa.upgrade.Origin;
 import org.camunda.bpm.qa.upgrade.ScenarioUnderTest;
 import org.camunda.bpm.qa.upgrade.UpgradeTestRule;
 import org.junit.Assert;
@@ -28,6 +29,7 @@
  *
  */
 @ScenarioUnderTest("ParallelTasksScenario")
+@Origin("7.2.0")
 public class ParallelTasksScenarioTest {
 
   @Rule

File: engine/src/main/java/org/camunda/bpm/engine/history/HistoricVariableInstanceQuery.java
Patch:
@@ -62,8 +62,9 @@ public interface HistoricVariableInstanceQuery extends Query<HistoricVariableIns
   HistoricVariableInstanceQuery activityInstanceIdIn(String... activityInstanceIds);
 
   /**
-   * Disable fetching of byte array values. By default, the query will fetch the value of a byte array.
-   * By calling this method you can prevent the values of (potentially large) blob data chunks to be fetched.
+   * Disable fetching of byte array and file values. By default, the query will fetch such values
+   * By calling this method you can prevent the values of (potentially large) blob data chunks
+   * to be fetched. The variables themselves are nonetheless included in the query result.
    *
    * @return the query builder
    */

File: engine/src/main/java/org/camunda/bpm/engine/runtime/VariableInstanceQuery.java
Patch:
@@ -118,8 +118,9 @@ public interface VariableInstanceQuery extends Query<VariableInstanceQuery, Vari
   VariableInstanceQuery variableValueLessThanOrEqual(String name, Object value);
 
   /**
-   * Disable fetching of byte array values. By default, the query will fetch the value of a byte array.
-   * By calling this method you can prevent the values of (potentially large) blob data chunks to be fetched.
+   * Disable fetching of byte array and file values. By default, the query will fetch such values.
+   * By calling this method you can prevent the values of (potentially large) blob data chunks
+   * to be fetched. The variables themselves are nonetheless included in the query result.
    *
    * @return the query builder
    */

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/JobAcquisitionTest.java
Patch:
@@ -79,7 +79,7 @@ public void testJobLockingFailure() {
     assertEquals(0, managementService.createJobQuery().active().count());
     List<RecordedWaitEvent> jobExecutor1WaitEvents = jobExecutor1.getAcquireJobsRunnable().getWaitEvents();
     assertEquals(1, jobExecutor1WaitEvents.size());
-    assertEquals(0, jobExecutor1WaitEvents.get(0).getWaitTime());
+    assertEquals(0, jobExecutor1WaitEvents.get(0).getTimeBetweenAcquisitions());
 
     // when continuing acquisition thread 2
     acquisitionThread2.makeContinueAndWaitForSync();
@@ -88,7 +88,7 @@ public void testJobLockingFailure() {
     // but the acquisition thread immediately tries again
     List<RecordedWaitEvent> jobExecutor2WaitEvents = jobExecutor2.getAcquireJobsRunnable().getWaitEvents();
     assertEquals(1, jobExecutor2WaitEvents.size());
-    assertEquals(0, jobExecutor2WaitEvents.get(0).getWaitTime());
+    assertEquals(0, jobExecutor2WaitEvents.get(0).getTimeBetweenAcquisitions());
 
   }
 }

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/DmnModelConstants.java
Patch:
@@ -15,7 +15,7 @@
 
 public final class DmnModelConstants {
 
-  /** The DMN 1.0 namespace */
+  /** The DMN 1.1 namespace */
   public static final String DMN11_NS = "http://www.omg.org/spec/DMN/20130901";
 
   /** The location of the DMN 1.1 XML schema. */

File: engine-dmn/scriptengine-dmn/src/main/java/org/camunda/bpm/dmn/scriptengine/DmnScriptEngineFactory.java
Patch:
@@ -32,7 +32,7 @@ public class DmnScriptEngineFactory implements ScriptEngineFactory {
 
   static {
     names = Collections.unmodifiableList(Arrays.asList(NAME, "Dmn", "DMN"));
-    extensions = Collections.unmodifiableList(Arrays.asList(NAME, "dmn10.xml"));
+    extensions = Collections.unmodifiableList(Arrays.asList(NAME, "dmn11.xml"));
     mimeTypes = Collections.emptyList();
   }
 

File: engine-dmn/scriptengine-dmn/src/test/java/org/camunda/bpm/dmn/scriptengine/DmnScriptEngineTest.java
Patch:
@@ -62,7 +62,7 @@ public void shouldFindScriptEngineByExtension() {
     ScriptEngine scriptEngine = scriptEngineManager.getEngineByExtension("dmn");
     assertScriptEngine(scriptEngine);
 
-    scriptEngine = scriptEngineManager.getEngineByExtension("dmn10.xml");
+    scriptEngine = scriptEngineManager.getEngineByExtension("dmn11.xml");
     assertScriptEngine(scriptEngine);
   }
 

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -291,7 +291,7 @@ public abstract class MockProvider {
   public static final String EXAMPLE_DEPLOYMENT_DMN_RESOURCE_NAME = "a-dmn-resource.dmn";
 
   public static final String EXAMPLE_DEPLOYMENT_DMN_XML_RESOURCE_ID = "aDeploymentDmnXmlResourceId";
-  public static final String EXAMPLE_DEPLOYMENT_DMN_XML_RESOURCE_NAME = "a-dmn-resource.dmn10.xml";
+  public static final String EXAMPLE_DEPLOYMENT_DMN_XML_RESOURCE_NAME = "a-dmn-resource.dmn11.xml";
 
   public static final String EXAMPLE_DEPLOYMENT_XML_RESOURCE_ID = "aDeploymentXmlResourceId";
   public static final String EXAMPLE_DEPLOYMENT_XML_RESOURCE_NAME = "a-xml-resource.xml";

File: engine/src/main/java/org/camunda/bpm/engine/impl/dmn/deployer/DmnDeployer.java
Patch:
@@ -38,7 +38,7 @@
  */
 public class DmnDeployer extends AbstractDefinitionDeployer<DecisionDefinitionEntity> {
 
-  public static final String[] DMN_RESOURCE_SUFFIXES = new String[] { "dmn10.xml", "dmn" };
+  public static final String[] DMN_RESOURCE_SUFFIXES = new String[] { "dmn11.xml", "dmn" };
 
   protected DmnTransformer transformer;
 

File: engine/src/test/java/org/camunda/bpm/engine/test/authorization/history/HistoricDecisionInstanceAuthorizationTest.java
Patch:
@@ -40,7 +40,7 @@ public class HistoricDecisionInstanceAuthorizationTest extends AuthorizationTest
   public void setUp() throws Exception {
     deploymentId = createDeployment(null,
         "org/camunda/bpm/engine/test/history/HistoricDecisionInstanceTest.processWithBusinessRuleTask.bpmn20.xml",
-        "org/camunda/bpm/engine/test/history/HistoricDecisionInstanceTest.decisionSingleOutput.dmn10.xml")
+        "org/camunda/bpm/engine/test/history/HistoricDecisionInstanceTest.decisionSingleOutput.dmn11.xml")
         .getId();
     super.setUp();
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/sequenceflow/ConditionalScriptSequenceFlowTest.java
Patch:
@@ -73,8 +73,8 @@ public void testScriptResourceExpression() {
 
   @Deployment(resources = {
     "org/camunda/bpm/engine/test/bpmn/sequenceflow/ConditionalScriptSequenceFlowTest.testDmnCondition.bpmn20.xml",
-    "org/camunda/bpm/engine/test/bpmn/sequenceflow/ConditionalScriptSequenceFlowTest.condition-left.dmn10.xml",
-    "org/camunda/bpm/engine/test/bpmn/sequenceflow/ConditionalScriptSequenceFlowTest.condition-right.dmn10.xml"
+    "org/camunda/bpm/engine/test/bpmn/sequenceflow/ConditionalScriptSequenceFlowTest.condition-left.dmn11.xml",
+    "org/camunda/bpm/engine/test/bpmn/sequenceflow/ConditionalScriptSequenceFlowTest.condition-right.dmn11.xml"
   })
   public void testDmnCondition() {
     String[] directions = new String[] { "left", "right" };

File: engine/src/test/java/org/camunda/bpm/engine/test/dmn/businessruletask/DmnBusinessRuleTaskTest.java
Patch:
@@ -26,9 +26,9 @@ public class DmnBusinessRuleTaskTest extends PluggableProcessEngineTestCase {
   public static final String DECISION_PROCESS_LATEST = "org/camunda/bpm/engine/test/dmn/businessruletask/DmnBusinessRuleTaskTest.testDecisionRefLatestBinding.bpmn20.xml";
   public static final String DECISION_PROCESS_DEPLOYMENT = "org/camunda/bpm/engine/test/dmn/businessruletask/DmnBusinessRuleTaskTest.testDecisionRefDeploymentBinding.bpmn20.xml";
   public static final String DECISION_PROCESS_VERSION = "org/camunda/bpm/engine/test/dmn/businessruletask/DmnBusinessRuleTaskTest.testDecisionRefVersionBinding.bpmn20.xml";
-  public static final String DECISION_OKAY_DMN = "org/camunda/bpm/engine/test/dmn/businessruletask/DmnBusinessRuleTaskTest.testDecisionOkay.dmn10.xml";
-  public static final String DECISION_NOT_OKAY_DMN = "org/camunda/bpm/engine/test/dmn/businessruletask/DmnBusinessRuleTaskTest.testDecisionNotOkay.dmn10.xml";
-  public static final String DECISION_POJO_DMN = "org/camunda/bpm/engine/test/dmn/businessruletask/DmnBusinessRuleTaskTest.testPojo.dmn10.xml";
+  public static final String DECISION_OKAY_DMN = "org/camunda/bpm/engine/test/dmn/businessruletask/DmnBusinessRuleTaskTest.testDecisionOkay.dmn11.xml";
+  public static final String DECISION_NOT_OKAY_DMN = "org/camunda/bpm/engine/test/dmn/businessruletask/DmnBusinessRuleTaskTest.testDecisionNotOkay.dmn11.xml";
+  public static final String DECISION_POJO_DMN = "org/camunda/bpm/engine/test/dmn/businessruletask/DmnBusinessRuleTaskTest.testPojo.dmn11.xml";
 
   @Deployment(resources = { DECISION_PROCESS, DECISION_PROCESS_EXPRESSION, DECISION_OKAY_DMN })
   public void testDecisionRef() {

File: engine/src/test/java/org/camunda/bpm/engine/test/dmn/businessruletask/DmnDecisionResultListenerTest.java
Patch:
@@ -30,9 +30,9 @@
 public class DmnDecisionResultListenerTest extends PluggableProcessEngineTestCase {
 
   protected static final String TEST_PROCESS = "org/camunda/bpm/engine/test/dmn/result/DmnDecisionResultTest.bpmn20.xml";
-  protected static final String TEST_DECISION = "org/camunda/bpm/engine/test/dmn/result/DmnDecisionResultTest.dmn10.xml";
-  protected static final String TEST_DECISION_COLLECT_SUM = "org/camunda/bpm/engine/test/dmn/result/DmnDecisionResultCollectSumHitPolicyTest.dmn10.xml";
-  protected static final String TEST_DECISION_COLLECT_COUNT = "org/camunda/bpm/engine/test/dmn/result/DmnDecisionResultCollectCountHitPolicyTest.dmn10.xml";
+  protected static final String TEST_DECISION = "org/camunda/bpm/engine/test/dmn/result/DmnDecisionResultTest.dmn11.xml";
+  protected static final String TEST_DECISION_COLLECT_SUM = "org/camunda/bpm/engine/test/dmn/result/DmnDecisionResultCollectSumHitPolicyTest.dmn11.xml";
+  protected static final String TEST_DECISION_COLLECT_COUNT = "org/camunda/bpm/engine/test/dmn/result/DmnDecisionResultCollectCountHitPolicyTest.dmn11.xml";
 
   protected DmnDecisionResult ruleResult;
 

File: engine/src/test/java/org/camunda/bpm/engine/test/dmn/businessruletask/DmnDecisionResultMappingTest.java
Patch:
@@ -30,7 +30,7 @@
  */
 public class DmnDecisionResultMappingTest extends PluggableProcessEngineTestCase {
 
-  protected static final String TEST_DECISION = "org/camunda/bpm/engine/test/dmn/result/DmnDecisionResultTest.dmn10.xml";
+  protected static final String TEST_DECISION = "org/camunda/bpm/engine/test/dmn/result/DmnDecisionResultTest.dmn11.xml";
 
   @Deployment(resources = { "org/camunda/bpm/engine/test/dmn/result/DmnDecisionResultCustomOutputMapping.bpmn20.xml", TEST_DECISION })
   public void testCustomOutputMapping() {

File: engine/src/test/java/org/camunda/bpm/engine/test/dmn/scripttask/DmnScriptTaskTest.java
Patch:
@@ -36,7 +36,7 @@ public class DmnScriptTaskTest extends PluggableProcessEngineTestCase {
 
   @Deployment(resources = {
     "org/camunda/bpm/engine/test/dmn/scripttask/DmnScriptTaskTest.bpmn20.xml",
-    "org/camunda/bpm/engine/test/dmn/scripttask/DmnScriptTaskTest.dmn10.xml"
+    "org/camunda/bpm/engine/test/dmn/scripttask/DmnScriptTaskTest.dmn11.xml"
   })
   public void testDmnExampleWithScriptTask() {
     VariableMap variables = Variables.createVariables()

File: engine/src/test/java/org/camunda/bpm/engine/test/metrics/ExecutedDecisionElementsMetricsTest.java
Patch:
@@ -21,7 +21,7 @@
 
 public class ExecutedDecisionElementsMetricsTest extends AbstractMetricsTest {
 
-  public static final String DMN_FILE = "org/camunda/bpm/engine/test/metrics/ExecutedDecisionElementsTest.dmn10.xml";
+  public static final String DMN_FILE = "org/camunda/bpm/engine/test/metrics/ExecutedDecisionElementsTest.dmn11.xml";
   public static VariableMap VARIABLES = Variables.createVariables().putValue("status", "").putValue("sum", 100);
 
   protected void clearMetrics() {

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/history/DecisionInstanceHistoryTest.java
Patch:
@@ -24,7 +24,7 @@
 
 public class DecisionInstanceHistoryTest extends ResourceProcessEngineTestCase {
 
-  public static final String DECISION_SINGLE_OUTPUT_DMN = "org/camunda/bpm/engine/test/history/HistoricDecisionInstanceTest.decisionSingleOutput.dmn10.xml";
+  public static final String DECISION_SINGLE_OUTPUT_DMN = "org/camunda/bpm/engine/test/history/HistoricDecisionInstanceTest.decisionSingleOutput.dmn11.xml";
 
   public DecisionInstanceHistoryTest() {
     super("org/camunda/bpm/engine/test/standalone/history/decisionInstanceHistory.camunda.cfg.xml");

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/dmn/DmnHistoryTest.java
Patch:
@@ -39,7 +39,7 @@ public static WebArchive processArchive() {
 
     return initWebArchiveDeployment()
         .addAsResource("org/camunda/bpm/integrationtest/functional/dmn/BusinessRuleProcess.bpmn20.xml", "BusinessRuleProcess.bpmn20.xml")
-        .addAsResource("org/camunda/bpm/integrationtest/functional/dmn/Example.dmn10.xml", "Example.dmn10.xml");
+        .addAsResource("org/camunda/bpm/integrationtest/functional/dmn/Example.dmn11.xml", "Example.dmn11.xml");
 
   }
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/el/DecisionContextSwitchTest.java
Patch:
@@ -34,7 +34,7 @@
 @RunWith(Arquillian.class)
 public class DecisionContextSwitchTest extends AbstractFoxPlatformIntegrationTest {
 
-  protected static final String DMN_RESOURCE_NAME = "org/camunda/bpm/integrationtest/functional/el/BeanResolvingDecision.dmn10.xml";
+  protected static final String DMN_RESOURCE_NAME = "org/camunda/bpm/integrationtest/functional/el/BeanResolvingDecision.dmn11.xml";
 
   @Deployment(name="bpmnDeployment")
   public static WebArchive createBpmnDeplyoment() {

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/el/ResolveBeanFromDmnTest.java
Patch:
@@ -36,7 +36,7 @@ public static WebArchive processArchive() {
     return initWebArchiveDeployment()
       .addClass(GreeterBean.class)
       .addAsResource("org/camunda/bpm/integrationtest/functional/el/BusinessRuleProcess.bpmn20.xml")
-      .addAsResource("org/camunda/bpm/integrationtest/functional/el/BeanResolvingDecision.dmn10.xml");
+      .addAsResource("org/camunda/bpm/integrationtest/functional/el/BeanResolvingDecision.dmn11.xml");
   }
 
   @Test

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/DmnEngineImpl.java
Patch:
@@ -137,7 +137,7 @@ public DmnDecision parseDecision(DmnModelInstance modelInstance, String decision
 
   public DmnDecisionResult evaluate(DmnDecision decision, VariableContext variableContext) {
     ensureNotNull("decision", decision);
-    ensureNotNull("variables", variableContext);
+    ensureNotNull("variableContext", variableContext);
     DmnDecisionContext decisionContext = contextFactory.createDecisionContext(configuration);
     return decisionContext.evaluateDecision(decision, variableContext);
   }

File: model-api/dmn-model/src/main/java/org/camunda/bpm/model/dmn/impl/instance/DmnElementImpl.java
Patch:
@@ -39,9 +39,6 @@ public abstract class DmnElementImpl extends DmnModelElementInstanceImpl impleme
 
   public DmnElementImpl (ModelTypeInstanceContext instanceContext) {
     super(instanceContext);
-    if (getId() == null) {
-      setId(ModelUtil.getUniqueIdentifier(getElementType()));
-    }
   }
 
   public String getId() {

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/impl/instance/CmmnElementImpl.java
Patch:
@@ -39,9 +39,6 @@ public abstract class CmmnElementImpl extends CmmnModelElementInstanceImpl imple
 
   public CmmnElementImpl(ModelTypeInstanceContext instanceContext) {
     super(instanceContext);
-    if (getId() == null) {
-      setId(ModelUtil.getUniqueIdentifier(getElementType()));
-    }
   }
 
   public String getId() {

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/Bpmn.java
Patch:
@@ -189,8 +189,6 @@ public static ProcessBuilder createProcess() {
     definitions.getDomElement().registerNamespace("camunda", CAMUNDA_NS);
     modelInstance.setDefinitions(definitions);
     Process process = modelInstance.newInstance(Process.class);
-    String processId = ModelUtil.getUniqueIdentifier(process.getElementType());
-    process.setId(processId);
     definitions.addChildElement(process);
     return process.builder();
   }

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/impl/instance/BaseElementImpl.java
Patch:
@@ -67,9 +67,6 @@ public static void registerType(ModelBuilder bpmnModelBuilder) {
 
   public BaseElementImpl(ModelTypeInstanceContext instanceContext) {
     super(instanceContext);
-    if (getId() == null) {
-      setId(ModelUtil.getUniqueIdentifier(getElementType()));
-    }
   }
 
   public String getId() {

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/dmn/DmnScriptEngineSupportTest.java
Patch:
@@ -92,12 +92,12 @@ public void testDmnClassesAvailable() {
 
   protected String getResultVariable(ProcessInstance processInstance) {
     DmnDecisionResult result = (DmnDecisionResult) runtimeService.getVariable(processInstance.getId(), RESULT_VARIABLE);
-    return result.getSingleOutput().getValue("result");
+    return (String) result.getSingleOutput().get("result");
   }
 
   protected String getReasonVariable(ProcessInstance processInstance) {
     DmnDecisionResult result = (DmnDecisionResult) runtimeService.getVariable(processInstance.getId(), RESULT_VARIABLE);
-    return result.getSingleOutput().getValue("reason");
+    return (String) result.getSingleOutput().get("reason");
   }
 
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/identity/IdentityServiceAuthorizationsTest.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.List;
 
 import org.camunda.bpm.engine.AuthorizationException;
+import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.authorization.Authorization;
 import org.camunda.bpm.engine.authorization.MissingAuthorization;
 import org.camunda.bpm.engine.identity.Group;

File: engine-cdi/src/main/java/org/camunda/bpm/engine/cdi/impl/AbstractVariableMap.java
Patch:
@@ -7,8 +7,8 @@
 import javax.inject.Inject;
 
 import org.camunda.bpm.engine.cdi.BusinessProcess;
-import org.camunda.bpm.engine.variable.VariableContext;
 import org.camunda.bpm.engine.variable.VariableMap;
+import org.camunda.bpm.engine.variable.context.VariableContext;
 import org.camunda.bpm.engine.variable.value.TypedValue;
 
 abstract class AbstractVariableMap implements VariableMap {
@@ -131,4 +131,4 @@ public VariableContext asVariableContext() {
     throw new UnsupportedOperationException(getClass().getName()+".asVariableContext() is not supported.");
   }
 
-}
\ No newline at end of file
+}

File: commons/typed-values/src/main/java/org/camunda/bpm/engine/variable/VariableMap.java
Patch:
@@ -14,6 +14,7 @@
 
 import java.util.Map;
 
+import org.camunda.bpm.engine.variable.context.VariableContext;
 import org.camunda.bpm.engine.variable.value.TypedValue;
 
 /**

File: commons/typed-values/src/main/java/org/camunda/bpm/engine/variable/Variables.java
Patch:
@@ -19,6 +19,7 @@
 
 import javax.activation.MimetypesFileTypeMap;
 
+import org.camunda.bpm.engine.variable.context.VariableContext;
 import org.camunda.bpm.engine.variable.impl.VariableMapImpl;
 import org.camunda.bpm.engine.variable.impl.context.EmptyVariableContext;
 import org.camunda.bpm.engine.variable.impl.value.NullValueImpl;

File: commons/typed-values/src/main/java/org/camunda/bpm/engine/variable/context/VariableContext.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.variable;
+package org.camunda.bpm.engine.variable.context;
 
 import java.util.Set;
 

File: commons/typed-values/src/main/java/org/camunda/bpm/engine/variable/impl/VariableMapImpl.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import org.camunda.bpm.engine.variable.VariableContext;
+import org.camunda.bpm.engine.variable.context.VariableContext;
 import org.camunda.bpm.engine.variable.VariableMap;
 import org.camunda.bpm.engine.variable.Variables;
 import org.camunda.bpm.engine.variable.value.TypedValue;

File: commons/typed-values/src/main/java/org/camunda/bpm/engine/variable/impl/context/CompositeVariableContext.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.HashSet;
 import java.util.Set;
 
-import org.camunda.bpm.engine.variable.VariableContext;
+import org.camunda.bpm.engine.variable.context.VariableContext;
 import org.camunda.bpm.engine.variable.value.TypedValue;
 
 /**

File: commons/typed-values/src/main/java/org/camunda/bpm/engine/variable/impl/context/EmptyVariableContext.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.Collections;
 import java.util.Set;
 
-import org.camunda.bpm.engine.variable.VariableContext;
+import org.camunda.bpm.engine.variable.context.VariableContext;
 import org.camunda.bpm.engine.variable.value.TypedValue;
 
 /**

File: commons/typed-values/src/main/java/org/camunda/bpm/engine/variable/impl/context/SingleVariableContext.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.Collections;
 import java.util.Set;
 
-import org.camunda.bpm.engine.variable.VariableContext;
+import org.camunda.bpm.engine.variable.context.VariableContext;
 import org.camunda.bpm.engine.variable.value.TypedValue;
 
 /**

File: commons/typed-values/src/test/java/org/camunda/bpm/engine/test/api/variable/VariableApiTest.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.camunda.bpm.engine.variable.VariableContext;
+import org.camunda.bpm.engine.variable.context.VariableContext;
 import org.camunda.bpm.engine.variable.VariableMap;
 import org.camunda.bpm.engine.variable.Variables;
 import org.camunda.bpm.engine.variable.Variables.SerializationDataFormats;

File: typed-values/src/main/java/org/camunda/bpm/engine/variable/VariableMap.java
Patch:
@@ -14,6 +14,7 @@
 
 import java.util.Map;
 
+import org.camunda.bpm.engine.variable.context.VariableContext;
 import org.camunda.bpm.engine.variable.value.TypedValue;
 
 /**

File: typed-values/src/main/java/org/camunda/bpm/engine/variable/Variables.java
Patch:
@@ -19,6 +19,7 @@
 
 import javax.activation.MimetypesFileTypeMap;
 
+import org.camunda.bpm.engine.variable.context.VariableContext;
 import org.camunda.bpm.engine.variable.impl.VariableMapImpl;
 import org.camunda.bpm.engine.variable.impl.context.EmptyVariableContext;
 import org.camunda.bpm.engine.variable.impl.value.NullValueImpl;

File: typed-values/src/main/java/org/camunda/bpm/engine/variable/context/VariableContext.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.variable;
+package org.camunda.bpm.engine.variable.context;
 
 import java.util.Set;
 

File: typed-values/src/main/java/org/camunda/bpm/engine/variable/impl/VariableMapImpl.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import org.camunda.bpm.engine.variable.VariableContext;
+import org.camunda.bpm.engine.variable.context.VariableContext;
 import org.camunda.bpm.engine.variable.VariableMap;
 import org.camunda.bpm.engine.variable.Variables;
 import org.camunda.bpm.engine.variable.value.TypedValue;

File: typed-values/src/main/java/org/camunda/bpm/engine/variable/impl/context/CompositeVariableContext.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.HashSet;
 import java.util.Set;
 
-import org.camunda.bpm.engine.variable.VariableContext;
+import org.camunda.bpm.engine.variable.context.VariableContext;
 import org.camunda.bpm.engine.variable.value.TypedValue;
 
 /**

File: typed-values/src/main/java/org/camunda/bpm/engine/variable/impl/context/EmptyVariableContext.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.Collections;
 import java.util.Set;
 
-import org.camunda.bpm.engine.variable.VariableContext;
+import org.camunda.bpm.engine.variable.context.VariableContext;
 import org.camunda.bpm.engine.variable.value.TypedValue;
 
 /**

File: typed-values/src/main/java/org/camunda/bpm/engine/variable/impl/context/SingleVariableContext.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.Collections;
 import java.util.Set;
 
-import org.camunda.bpm.engine.variable.VariableContext;
+import org.camunda.bpm.engine.variable.context.VariableContext;
 import org.camunda.bpm.engine.variable.value.TypedValue;
 
 /**

File: typed-values/src/test/java/org/camunda/bpm/engine/test/api/variable/VariableApiTest.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.camunda.bpm.engine.variable.VariableContext;
+import org.camunda.bpm.engine.variable.context.VariableContext;
 import org.camunda.bpm.engine.variable.VariableMap;
 import org.camunda.bpm.engine.variable.Variables;
 import org.camunda.bpm.engine.variable.Variables.SerializationDataFormats;

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/DeploymentManager.java
Patch:
@@ -94,9 +94,6 @@ public void deleteDeployment(String deploymentId, boolean cascade, boolean skipC
         // remove historic incidents which are not referenced to a process instance
         getHistoricIncidentManager().deleteHistoricIncidentsByProcessDefinitionId(processDefinitionId);
 
-        // remove historic op log entries which are not related to a process instance
-        getUserOperationLogManager().deleteOperationLogEntriesByProcessDefinitionId(processDefinitionId);
-
         // remove historic job log entries not related to a process instance
         getHistoricJobLogManager().deleteHistoricJobLogsByProcessDefinitionId(processDefinitionId);
       }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricProcessInstanceManager.java
Patch:
@@ -73,9 +73,6 @@ public void deleteHistoricProcessInstanceById(String historicProcessInstanceId)
       getHistoricTaskInstanceManager()
         .deleteHistoricTaskInstancesByProcessInstanceId(historicProcessInstanceId);
 
-      getUserOperationLogManager()
-        .deleteOperationLogEntriesByProcessInstanceId(historicProcessInstanceId);
-
       getHistoricIncidentManager()
         .deleteHistoricIncidentsByProcessInstanceId(historicProcessInstanceId);
 

File: engine/src/test/java/org/camunda/bpm/engine/test/authorization/ActivityStatisticsAuthorizationTest.java
Patch:
@@ -35,16 +35,16 @@ public class ActivityStatisticsAuthorizationTest extends AuthorizationTest {
   protected String deploymentId;
 
   public void setUp() throws Exception {
-    super.setUp();
     deploymentId = createDeployment(null, "org/camunda/bpm/engine/test/authorization/oneIncidentProcess.bpmn20.xml").getId();
     startProcessAndExecuteJob(ONE_INCIDENT_PROCESS_KEY);
     startProcessAndExecuteJob(ONE_INCIDENT_PROCESS_KEY);
     startProcessAndExecuteJob(ONE_INCIDENT_PROCESS_KEY);
+    super.setUp();
   }
 
   public void tearDown() {
-    deleteDeployment(deploymentId);
     super.tearDown();
+    deleteDeployment(deploymentId);
   }
 
   // without any authorization

File: engine/src/test/java/org/camunda/bpm/engine/test/authorization/DeploymentStatisticsAuthorizationTest.java
Patch:
@@ -42,17 +42,17 @@ public class DeploymentStatisticsAuthorizationTest extends AuthorizationTest {
   protected String thirdDeploymentId;
 
   public void setUp() throws Exception {
-    super.setUp();
     firstDeploymentId = createDeployment("first", "org/camunda/bpm/engine/test/authorization/oneIncidentProcess.bpmn20.xml").getId();
     secondDeploymentId = createDeployment("second", "org/camunda/bpm/engine/test/authorization/timerStartEventProcess.bpmn20.xml").getId();
     thirdDeploymentId = createDeployment("third", "org/camunda/bpm/engine/test/authorization/timerBoundaryEventProcess.bpmn20.xml").getId();
+    super.setUp();
   }
 
   public void tearDown() {
+    super.tearDown();
     deleteDeployment(firstDeploymentId);
     deleteDeployment(secondDeploymentId);
     deleteDeployment(thirdDeploymentId);
-    super.tearDown();
   }
 
   // deployment statistics query without process instance authorizations /////////////////////////////////////////////

File: engine/src/test/java/org/camunda/bpm/engine/test/authorization/EventSubscriptionAuthorizationTest.java
Patch:
@@ -34,15 +34,15 @@ public class EventSubscriptionAuthorizationTest extends AuthorizationTest {
   protected String deploymentId;
 
   public void setUp() throws Exception {
-    super.setUp();
     deploymentId = createDeployment(null,
         "org/camunda/bpm/engine/test/api/oneMessageBoundaryEventProcess.bpmn20.xml",
         "org/camunda/bpm/engine/test/authorization/signalBoundaryEventProcess.bpmn20.xml").getId();
+    super.setUp();
   }
 
   public void tearDown() {
-    deleteDeployment(deploymentId);
     super.tearDown();
+    deleteDeployment(deploymentId);
   }
 
   public void testSimpleQueryWithoutAuthorization() {

File: engine/src/test/java/org/camunda/bpm/engine/test/authorization/ExecutionAuthorizationTest.java
Patch:
@@ -34,15 +34,15 @@ public class ExecutionAuthorizationTest extends AuthorizationTest {
   protected String deploymentId;
 
   public void setUp() throws Exception {
-    super.setUp();
     deploymentId = createDeployment(null,
         "org/camunda/bpm/engine/test/api/oneTaskProcess.bpmn20.xml",
         "org/camunda/bpm/engine/test/authorization/messageBoundaryEventProcess.bpmn20.xml").getId();
+    super.setUp();
   }
 
   public void tearDown() {
-    deleteDeployment(deploymentId);
     super.tearDown();
+    deleteDeployment(deploymentId);
   }
 
   public void testSimpleQueryWithoutAuthorization() {

File: engine/src/test/java/org/camunda/bpm/engine/test/authorization/FormAuthorizationTest.java
Patch:
@@ -44,16 +44,16 @@ public class FormAuthorizationTest extends AuthorizationTest {
   protected String deploymentId;
 
   public void setUp() throws Exception {
-    super.setUp();
     deploymentId = createDeployment(null,
         "org/camunda/bpm/engine/test/authorization/formKeyProcess.bpmn20.xml",
         "org/camunda/bpm/engine/test/authorization/renderedFormProcess.bpmn20.xml",
         "org/camunda/bpm/engine/test/authorization/oneTaskCase.cmmn").getId();
+    super.setUp();
   }
 
   public void tearDown() {
-    deleteDeployment(deploymentId);
     super.tearDown();
+    deleteDeployment(deploymentId);
   }
 
   // get start form data ///////////////////////////////////////////

File: engine/src/test/java/org/camunda/bpm/engine/test/authorization/IncidentAuthorizationTest.java
Patch:
@@ -47,16 +47,16 @@ public class IncidentAuthorizationTest extends AuthorizationTest {
   protected String deploymentId;
 
   public void setUp() throws Exception {
-    super.setUp();
     deploymentId = createDeployment(null,
         "org/camunda/bpm/engine/test/authorization/timerStartEventProcess.bpmn20.xml",
         "org/camunda/bpm/engine/test/authorization/oneIncidentProcess.bpmn20.xml",
         "org/camunda/bpm/engine/test/authorization/anotherOneIncidentProcess.bpmn20.xml").getId();
+    super.setUp();
   }
 
   public void tearDown() {
-    deleteDeployment(deploymentId);
     super.tearDown();
+    deleteDeployment(deploymentId);
   }
 
   public void testQueryForStandaloneIncidents() {
@@ -331,7 +331,6 @@ protected void verifyQueryResults(IncidentQuery query, int countExpected) {
   }
 
   protected void clearDatabase() {
-    clearOpLog();
     CommandExecutor commandExecutor = processEngineConfiguration.getCommandExecutorTxRequired();
     commandExecutor.execute(new Command<Object>() {
       public Object execute(CommandContext commandContext) {

File: engine/src/test/java/org/camunda/bpm/engine/test/authorization/ProcessDefinitionStatisticsAuthorizationTest.java
Patch:
@@ -37,15 +37,15 @@ public class ProcessDefinitionStatisticsAuthorizationTest extends AuthorizationT
   protected String deploymentId;
 
   public void setUp() throws Exception {
-    super.setUp();
     deploymentId = createDeployment(null,
         "org/camunda/bpm/engine/test/api/oneTaskProcess.bpmn20.xml",
         "org/camunda/bpm/engine/test/authorization/oneIncidentProcess.bpmn20.xml").getId();
+    super.setUp();
   }
 
   public void tearDown() {
-    deleteDeployment(deploymentId);
     super.tearDown();
+    deleteDeployment(deploymentId);
   }
 
   // without running instances //////////////////////////////////////////////////////////

File: engine/src/test/java/org/camunda/bpm/engine/test/authorization/TaskAuthorizationTest.java
Patch:
@@ -56,18 +56,18 @@ public class TaskAuthorizationTest extends AuthorizationTest {
   protected String deploymentId;
 
   public void setUp() throws Exception {
-    super.setUp();
     deploymentId = createDeployment(null,
         "org/camunda/bpm/engine/test/api/oneTaskProcess.bpmn20.xml",
         "org/camunda/bpm/engine/test/authorization/oneTaskCase.cmmn",
         "org/camunda/bpm/engine/test/authorization/oneTaskProcess.bpmn20.xml",
         "org/camunda/bpm/engine/test/authorization/candidateUsersProcess.bpmn20.xml",
         "org/camunda/bpm/engine/test/authorization/candidateGroupsProcess.bpmn20.xml").getId();
+    super.setUp();
   }
 
   public void tearDown() {
-    deleteDeployment(deploymentId);
     super.tearDown();
+    deleteDeployment(deploymentId);
   }
 
   // task query ///////////////////////////////////////////////////////

File: engine/src/test/java/org/camunda/bpm/engine/test/authorization/VariableInstanceAuthorizationTest.java
Patch:
@@ -34,15 +34,15 @@ public class VariableInstanceAuthorizationTest extends AuthorizationTest {
   protected String deploymentId;
 
   public void setUp() throws Exception {
-    super.setUp();
     deploymentId = createDeployment(null,
         "org/camunda/bpm/engine/test/api/oneTaskProcess.bpmn20.xml",
         "org/camunda/bpm/engine/test/authorization/oneTaskCase.cmmn").getId();
+    super.setUp();
   }
 
   public void tearDown() {
-    deleteDeployment(deploymentId);
     super.tearDown();
+    deleteDeployment(deploymentId);
   }
 
   public void testProcessVariableQueryWithoutAuthorization() {

File: engine/src/test/java/org/camunda/bpm/engine/test/authorization/externaltask/ExternalTaskQueryAuthorizationTest.java
Patch:
@@ -33,18 +33,18 @@ public class ExternalTaskQueryAuthorizationTest extends AuthorizationTest {
   protected String instance2Id;
 
   protected void setUp() throws Exception {
-    super.setUp();
     deploymentId = createDeployment(null,
         "org/camunda/bpm/engine/test/api/externaltask/oneExternalTaskProcess.bpmn20.xml",
         "org/camunda/bpm/engine/test/api/externaltask/twoExternalTaskProcess.bpmn20.xml").getId();
 
     instance1Id = startProcessInstanceByKey("oneExternalTaskProcess").getId();
     instance2Id = startProcessInstanceByKey("twoExternalTaskProcess").getId();
+    super.setUp();
   }
 
   public void tearDown() {
-    deleteDeployment(deploymentId);
     super.tearDown();
+    deleteDeployment(deploymentId);
   }
 
   public void testQueryWithoutAuthorization() {

File: engine/src/test/java/org/camunda/bpm/engine/test/authorization/externaltask/FetchExternalTaskAuthorizationTest.java
Patch:
@@ -40,18 +40,18 @@ public class FetchExternalTaskAuthorizationTest extends AuthorizationTest {
   protected String instance2Id;
 
   protected void setUp() throws Exception {
-    super.setUp();
     deploymentId = createDeployment(null,
         "org/camunda/bpm/engine/test/api/externaltask/oneExternalTaskProcess.bpmn20.xml",
         "org/camunda/bpm/engine/test/api/externaltask/twoExternalTaskProcess.bpmn20.xml").getId();
 
     instance1Id = startProcessInstanceByKey("oneExternalTaskProcess").getId();
     instance2Id = startProcessInstanceByKey("twoExternalTaskProcess").getId();
+    super.setUp();
   }
 
   public void tearDown() {
-    deleteDeployment(deploymentId);
     super.tearDown();
+    deleteDeployment(deploymentId);
   }
 
   public void testFetchWithoutAuthorization() {

File: engine/src/test/java/org/camunda/bpm/engine/test/authorization/history/HistoricActivityInstanceAuthorizationTest.java
Patch:
@@ -36,15 +36,15 @@ public class HistoricActivityInstanceAuthorizationTest extends AuthorizationTest
   protected String deploymentId;
 
   public void setUp() throws Exception {
-    super.setUp();
     deploymentId = createDeployment(null,
         "org/camunda/bpm/engine/test/api/oneTaskProcess.bpmn20.xml",
         "org/camunda/bpm/engine/test/authorization/messageStartEventProcess.bpmn20.xml").getId();
+    super.setUp();
   }
 
   public void tearDown() {
-    deleteDeployment(deploymentId);
     super.tearDown();
+    deleteDeployment(deploymentId);
   }
 
   // historic activity instance query /////////////////////////////////

File: engine/src/test/java/org/camunda/bpm/engine/test/authorization/history/HistoricActivityStatisticsAuthorizationTest.java
Patch:
@@ -35,14 +35,14 @@ public class HistoricActivityStatisticsAuthorizationTest extends AuthorizationTe
   protected String deploymentId;
 
   public void setUp() throws Exception {
-    super.setUp();
     deploymentId = createDeployment(null,
         "org/camunda/bpm/engine/test/api/oneTaskProcess.bpmn20.xml").getId();
+    super.setUp();
   }
 
   public void tearDown() {
-    deleteDeployment(deploymentId);
     super.tearDown();
+    deleteDeployment(deploymentId);
   }
 
   // historic activity statistics query //////////////////////////////////

File: engine/src/test/java/org/camunda/bpm/engine/test/authorization/history/HistoricDetailAuthorizationTest.java
Patch:
@@ -37,16 +37,16 @@ public class HistoricDetailAuthorizationTest extends AuthorizationTest {
   protected String deploymentId;
 
   public void setUp() throws Exception {
-    super.setUp();
     deploymentId = createDeployment(null,
         "org/camunda/bpm/engine/test/api/oneTaskProcess.bpmn20.xml",
         "org/camunda/bpm/engine/test/authorization/messageStartEventProcess.bpmn20.xml",
         "org/camunda/bpm/engine/test/authorization/oneTaskCase.cmmn").getId();
+    super.setUp();
   }
 
   public void tearDown() {
-    deleteDeployment(deploymentId);
     super.tearDown();
+    deleteDeployment(deploymentId);
   }
 
   // historic variable update query (standalone task) /////////////////////////////////////////////

File: engine/src/test/java/org/camunda/bpm/engine/test/authorization/history/HistoricIncidentAuthorizationTest.java
Patch:
@@ -44,16 +44,16 @@ public class HistoricIncidentAuthorizationTest extends AuthorizationTest {
   protected String deploymentId;
 
   public void setUp() throws Exception {
-    super.setUp();
     deploymentId = createDeployment(null,
         "org/camunda/bpm/engine/test/authorization/timerStartEventProcess.bpmn20.xml",
         "org/camunda/bpm/engine/test/authorization/oneIncidentProcess.bpmn20.xml",
         "org/camunda/bpm/engine/test/authorization/anotherOneIncidentProcess.bpmn20.xml").getId();
+    super.setUp();
   }
 
   public void tearDown() {
-    deleteDeployment(deploymentId);
     super.tearDown();
+    deleteDeployment(deploymentId);
   }
 
   // historic incident query (standalone) //////////////////////////////
@@ -395,7 +395,6 @@ protected void verifyQueryResults(HistoricIncidentQuery query, int countExpected
   }
 
   protected void clearDatabase() {
-    clearOpLog();
     CommandExecutor commandExecutor = processEngineConfiguration.getCommandExecutorTxRequired();
     commandExecutor.execute(new Command<Object>() {
       public Object execute(CommandContext commandContext) {

File: engine/src/test/java/org/camunda/bpm/engine/test/authorization/history/HistoricProcessInstanceAuthorizationTest.java
Patch:
@@ -38,15 +38,15 @@ public class HistoricProcessInstanceAuthorizationTest extends AuthorizationTest
   protected String deploymentId;
 
   public void setUp() throws Exception {
-    super.setUp();
     deploymentId = createDeployment(null,
         "org/camunda/bpm/engine/test/api/oneTaskProcess.bpmn20.xml",
         "org/camunda/bpm/engine/test/authorization/messageStartEventProcess.bpmn20.xml").getId();
+    super.setUp();
   }
 
   public void tearDown() {
-    deleteDeployment(deploymentId);
     super.tearDown();
+    deleteDeployment(deploymentId);
   }
 
   // historic process instance query //////////////////////////////////////////////////////////

File: engine/src/test/java/org/camunda/bpm/engine/test/authorization/history/HistoricTaskInstanceAuthorizationTest.java
Patch:
@@ -39,16 +39,16 @@ public class HistoricTaskInstanceAuthorizationTest extends AuthorizationTest {
   protected String deploymentId;
 
   public void setUp() throws Exception {
-    super.setUp();
     deploymentId = createDeployment(null,
         "org/camunda/bpm/engine/test/api/oneTaskProcess.bpmn20.xml",
         "org/camunda/bpm/engine/test/authorization/messageStartEventProcess.bpmn20.xml",
         "org/camunda/bpm/engine/test/authorization/oneTaskCase.cmmn").getId();
+    super.setUp();
   }
 
   public void tearDown() {
-    deleteDeployment(deploymentId);
     super.tearDown();
+    deleteDeployment(deploymentId);
   }
 
   // historic task instance query (standalone task) ///////////////////////////////////////

File: engine/src/test/java/org/camunda/bpm/engine/test/authorization/history/HistoricVariableInstanceAuthorizationTest.java
Patch:
@@ -37,16 +37,16 @@ public class HistoricVariableInstanceAuthorizationTest extends AuthorizationTest
   protected String deploymentId;
 
   public void setUp() throws Exception {
-    super.setUp();
     deploymentId = createDeployment(null,
         "org/camunda/bpm/engine/test/api/oneTaskProcess.bpmn20.xml",
         "org/camunda/bpm/engine/test/authorization/messageStartEventProcess.bpmn20.xml",
         "org/camunda/bpm/engine/test/authorization/oneTaskCase.cmmn").getId();
+    super.setUp();
   }
 
   public void tearDown() {
-    deleteDeployment(deploymentId);
     super.tearDown();
+    deleteDeployment(deploymentId);
   }
 
   // historic variable instance query (standalone task) /////////////////////////////////////////////

File: engine/src/test/java/org/camunda/bpm/engine/test/authorization/history/UserOperationLogAuthorizationTest.java
Patch:
@@ -47,16 +47,16 @@ public class UserOperationLogAuthorizationTest extends AuthorizationTest {
   protected String deploymentId;
 
   public void setUp() throws Exception {
-    super.setUp();
     deploymentId = createDeployment(null,
         "org/camunda/bpm/engine/test/api/oneTaskProcess.bpmn20.xml",
         "org/camunda/bpm/engine/test/authorization/oneTaskCase.cmmn",
         "org/camunda/bpm/engine/test/authorization/timerBoundaryEventProcess.bpmn20.xml").getId();
+    super.setUp();
   }
 
   public void tearDown() {
-    deleteDeployment(deploymentId);
     super.tearDown();
+    deleteDeployment(deploymentId);
   }
 
   // standalone task ///////////////////////////////
@@ -496,7 +496,6 @@ protected Job selectSingleJob() {
   }
 
   protected void clearDatabase() {
-    clearOpLog();
     CommandExecutor commandExecutor = processEngineConfiguration.getCommandExecutorTxRequired();
     commandExecutor.execute(new Command<Object>() {
       public Object execute(CommandContext commandContext) {

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -658,7 +658,7 @@ public abstract class MockProvider {
   public static final String EXAMPLE_DECISION_DEFINITION_DIAGRAM_RESOURCE_NAME = "aResourceName.png";
 
   public static final String EXAMPLE_DECISION_OUTPUT_KEY = "aDecisionOutput";
-  public static final String EXAMPLE_DECISION_OUTPUT_VALUE = "aDecisionOutputValue";
+  public static final StringValue EXAMPLE_DECISION_OUTPUT_VALUE = Variables.stringValue("aDecisionOutputValue");
 
   // historic job log
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/DecisionRuleTaskActivityBehavior.java
Patch:
@@ -21,6 +21,7 @@
 import org.camunda.bpm.engine.impl.delegate.DelegateInvocation;
 import org.camunda.bpm.engine.impl.dmn.invocation.DecisionInvocation;
 import org.camunda.bpm.engine.impl.dmn.invocation.VariableScopeContext;
+import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 import org.camunda.bpm.engine.impl.pvm.delegate.ActivityExecution;
 import org.camunda.bpm.engine.impl.util.CallableElementUtil;
 import org.camunda.bpm.engine.repository.DecisionDefinition;
@@ -62,7 +63,7 @@ public Void call() throws Exception {
 
         Object result = invocation.getInvocationResult();
         if (result != null && resultVariable != null) {
-          execution.setVariable(resultVariable, result);
+          ((ExecutionEntity) execution).setVariableLocalTransient(resultVariable, result);
         }
 
         leave(execution);

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -1987,6 +1987,8 @@ public ActivityImpl parseBusinessRuleTask(Element businessRuleTaskElement, Scope
    */
   protected ActivityImpl parseDecisionBusinessRuleTask(Element businessRuleTaskElement, ScopeImpl scope) {
     ActivityImpl activity = createActivityOnScope(businessRuleTaskElement, scope);
+ // the activity is a scope since the result variable is stored as local variable
+    activity.setScope(true);
 
     parseAsynchronousContinuationForActivity(businessRuleTaskElement, activity);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/variable/scope/AbstractVariableStore.java
Patch:
@@ -35,4 +35,5 @@ public void createOrUpdateVariable(String variableName, TypedValue value, Abstra
   protected abstract CoreVariableInstance createVariableInstance(String variableName, TypedValue value, AbstractVariableScope sourceActivityExecution);
 
   protected abstract void setVariableValue(CoreVariableInstance variableInstance, TypedValue value, AbstractVariableScope sourceActivityExecution);
+
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/test/ResourceProcessEngineTestCase.java
Patch:
@@ -14,14 +14,13 @@
 package org.camunda.bpm.engine.impl.test;
 
 import org.camunda.bpm.engine.ProcessEngineConfiguration;
-import org.camunda.bpm.engine.ProcessEngines;
 
 
 /**
  * @author Tom Baeyens
  * @author Joram Barrez
  */
-public class ResourceProcessEngineTestCase extends AbstractProcessEngineTestCase {
+public abstract class ResourceProcessEngineTestCase extends AbstractProcessEngineTestCase {
 
   protected String engineConfigurationResource;
 

File: examples/invoice/src/test/java/org/camunda/bpm/example/invoice/InvoiceTestCase.java
Patch:
@@ -70,10 +70,10 @@ public void testApproveInvoiceAssignment() {
     // create decision result
     DmnDecisionResultImpl decisionResult = new DmnDecisionResultImpl();
     DmnDecisionOutputImpl decisionOutput = new DmnDecisionOutputImpl();
-    decisionOutput.put("result", "sales");
+    decisionOutput.putValue("result", Variables.stringValue("sales"));
     decisionResult.add(decisionOutput);
     decisionOutput = new DmnDecisionOutputImpl();
-    decisionOutput.put("result", "accounting");
+    decisionOutput.putValue("result", Variables.stringValue("accounting"));
     decisionResult.add(decisionOutput);
 
     VariableMap variables = Variables.createVariables()

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/DmnDecisionTableResult.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.camunda.bpm.engine.variable.value.TypedValue;
 import org.camunda.bpm.model.dmn.HitPolicy;
 
 /**
@@ -41,7 +42,7 @@ public interface DmnDecisionTableResult {
   /**
    * @return the result value of the collect operation if the {@link HitPolicy#COLLECT} was used with an aggregator otherwise null
    */
-  Number getCollectResultValue();
+  TypedValue getCollectResultValue();
 
   /**
    * @return the number of executed decision elements during the evaluation

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/hitpolicy/DmnHitPolicyAggregator.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.List;
 
 import org.camunda.bpm.dmn.engine.impl.hitpolicy.DmnHitPolicyException;
+import org.camunda.bpm.engine.variable.value.TypedValue;
 
 public interface DmnHitPolicyAggregator {
 
@@ -26,6 +27,6 @@ public interface DmnHitPolicyAggregator {
    * @return the aggregated result value
    * @throws DmnHitPolicyException if the aggregation fails, e.g. it is not applicable to the decision outputs
    */
-  Number aggregate(List<Object> outputValues);
+  TypedValue aggregate(List<TypedValue> outputValues);
 
 }

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/test/asserts/DmnDecisionOutputAssertion.java
Patch:
@@ -45,7 +45,7 @@ public DmnDecisionOutputAssertion hasSingleEntryValue(Object expectedValue) {
   public DmnDecisionOutputAssertion hasSingleEntry(TypedValue expectedValue) {
     hasSingleEntry();
 
-    assertEquals(expectedValue, actual.getSingleValue());
+    assertEquals(expectedValue, actual.getSingleValueTyped());
 
     return this;
   }
@@ -62,7 +62,7 @@ else if (actualValue != null && !actualValue.equals(expectedValue)) {
   public DmnDecisionOutputAssertion hasEntryWithValue(String name, Object expectedValue) {
     isNotNull();
 
-    assertEquals(expectedValue, actual.get(name));
+    assertEquals(expectedValue, actual.getValue(name));
 
     return this;
   }

File: engine-cdi/src/main/java/org/camunda/bpm/engine/cdi/CdiExpressionManager.java
Patch:
@@ -14,6 +14,7 @@
 
 import org.camunda.bpm.engine.cdi.impl.el.CdiResolver;
 import org.camunda.bpm.engine.impl.el.ExpressionManager;
+import org.camunda.bpm.engine.impl.el.VariableContextElResolver;
 import org.camunda.bpm.engine.impl.el.VariableScopeElResolver;
 import org.camunda.bpm.engine.impl.javax.el.ArrayELResolver;
 import org.camunda.bpm.engine.impl.javax.el.BeanELResolver;
@@ -43,6 +44,7 @@ public class CdiExpressionManager extends ExpressionManager {
   protected ELResolver createElResolver() {
     CompositeELResolver compositeElResolver = new CompositeELResolver();
     compositeElResolver.add(new VariableScopeElResolver());
+    compositeElResolver.add(new VariableContextElResolver());
 
     compositeElResolver.add(new CdiResolver());
 

File: engine-spring/src/main/java/org/camunda/bpm/engine/spring/SpringExpressionManager.java
Patch:
@@ -15,6 +15,7 @@
 
 import org.camunda.bpm.engine.impl.el.ExpressionManager;
 import org.camunda.bpm.engine.impl.el.ReadOnlyMapELResolver;
+import org.camunda.bpm.engine.impl.el.VariableContextElResolver;
 import org.camunda.bpm.engine.impl.el.VariableScopeElResolver;
 import org.camunda.bpm.engine.impl.javax.el.ArrayELResolver;
 import org.camunda.bpm.engine.impl.javax.el.BeanELResolver;
@@ -54,6 +55,7 @@ public SpringExpressionManager(ApplicationContext applicationContext, Map<Object
   protected ELResolver createElResolver() {
     CompositeELResolver compositeElResolver = new CompositeELResolver();
     compositeElResolver.add(new VariableScopeElResolver());
+    compositeElResolver.add(new VariableContextElResolver());
 
     if(beans != null) {
       // Only expose limited set of beans in expressions

File: engine/src/main/java/org/camunda/bpm/engine/impl/el/VariableScopeElResolver.java
Patch:
@@ -43,7 +43,7 @@ public class VariableScopeElResolver extends ELResolver {
   public Object getValue(ELContext context, Object base, Object property)  {
 
     Object object = context.getContext(VariableScope.class);
-    if (object instanceof VariableScope) {
+    if(object != null) {
       VariableScope variableScope = (VariableScope) object;
       if (base == null) {
         String variable = (String) property; // according to javadoc, can only be a String
@@ -79,7 +79,7 @@ public boolean isReadOnly(ELContext context, Object base, Object property) {
     if (base == null) {
       String variable = (String) property;
       Object object = context.getContext(VariableScope.class);
-      return object instanceof VariableScope && !((VariableScope)object).hasVariable(variable);
+      return object != null && !((VariableScope)object).hasVariable(variable);
     }
     return true;
   }
@@ -88,7 +88,7 @@ public void setValue(ELContext context, Object base, Object property, Object val
     if (base == null) {
       String variable = (String) property;
       Object object = context.getContext(VariableScope.class);
-      if (object instanceof VariableScope) {
+      if (object != null) {
         VariableScope variableScope = (VariableScope) object;
         if (variableScope.hasVariable(variable)) {
           variableScope.setVariable(variable, value);

File: engine/src/main/java/org/camunda/bpm/engine/test/mock/MockExpressionManager.java
Patch:
@@ -15,6 +15,7 @@
 
 import org.camunda.bpm.engine.delegate.VariableScope;
 import org.camunda.bpm.engine.impl.el.ExpressionManager;
+import org.camunda.bpm.engine.impl.el.VariableContextElResolver;
 import org.camunda.bpm.engine.impl.el.VariableScopeElResolver;
 import org.camunda.bpm.engine.impl.javax.el.ArrayELResolver;
 import org.camunda.bpm.engine.impl.javax.el.BeanELResolver;
@@ -33,6 +34,7 @@ protected ELResolver createElResolver(VariableScope scope) {
   protected ELResolver createElResolver() {
     CompositeELResolver compositeElResolver = new CompositeELResolver();
     compositeElResolver.add(new VariableScopeElResolver());
+    compositeElResolver.add(new VariableContextElResolver());
     compositeElResolver.add(new MockElResolver());
     compositeElResolver.add(new ArrayELResolver());
     compositeElResolver.add(new ListELResolver());

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/ActivateJobDefinitionTest.java
Patch:
@@ -10,7 +10,6 @@
 import org.camunda.bpm.engine.impl.interceptor.CommandExecutor;
 import org.camunda.bpm.engine.impl.jobexecutor.TimerActivateJobDefinitionHandler;
 import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
-import org.camunda.bpm.engine.impl.test.TestHelper;
 import org.camunda.bpm.engine.impl.util.ClockUtil;
 import org.camunda.bpm.engine.management.JobDefinition;
 import org.camunda.bpm.engine.management.JobDefinitionQuery;
@@ -29,8 +28,6 @@ public Object execute(CommandContext commandContext) {
         return null;
       }
     });
-
-    TestHelper.clearOpLog(processEngineConfiguration);
   }
 
   // Test ManagementService#activateJobDefinitionById() /////////////////////////

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/JobQueryTest.java
Patch:
@@ -466,8 +466,6 @@ public void testQueryBySuspended() {
 
     managementService.suspendJobDefinitionByProcessDefinitionKey("timerOnTask", true);
     verifyQueryResults(query, 3);
-
-    TestHelper.clearOpLog(processEngineConfiguration);
   }
 
   //sorting //////////////////////////////////////////

File: engine/src/test/java/org/camunda/bpm/engine/test/authorization/AuthorizationTest.java
Patch:
@@ -400,6 +400,7 @@ protected Deployment createDeployment(String name, String... resources) {
   protected void deleteDeployment(String deploymentId) {
     disableAuthorization();
     repositoryService.deleteDeployment(deploymentId, true);
+    TestHelper.clearOpLog(processEngineConfiguration);
     enableAuthorization();
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/history/useroperationlog/UserOperationLogQueryTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.test.history;
+package org.camunda.bpm.engine.test.history.useroperationlog;
 
 import static org.camunda.bpm.engine.EntityTypes.JOB;
 import static org.camunda.bpm.engine.EntityTypes.JOB_DEFINITION;
@@ -59,7 +59,6 @@
 import org.camunda.bpm.engine.impl.interceptor.CommandExecutor;
 import org.camunda.bpm.engine.impl.jobexecutor.TimerActivateJobDefinitionHandler;
 import org.camunda.bpm.engine.impl.jobexecutor.TimerSuspendProcessDefinitionHandler;
-import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
 import org.camunda.bpm.engine.impl.test.TestHelper;
 import org.camunda.bpm.engine.impl.util.ClockUtil;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
@@ -74,7 +73,7 @@
 /**
  * @author Danny Gräf
  */
-public class OperationLogQueryTest extends PluggableProcessEngineTestCase {
+public class UserOperationLogQueryTest extends AbstractUserOperationLogTest {
 
   protected static final String ONE_TASK_PROCESS = "org/camunda/bpm/engine/test/history/oneTaskProcess.bpmn20.xml";
   protected static final String ONE_TASK_CASE = "org/camunda/bpm/engine/test/api/cmmn/oneTaskCase.cmmn";

File: engine-plugins/spin-plugin/src/main/java/org/camunda/spin/plugin/impl/JsonValueSerializer.java
Patch:
@@ -12,8 +12,8 @@
  */
 package org.camunda.spin.plugin.impl;
 
-import org.camunda.bpm.engine.impl.core.variable.value.UntypedValueImpl;
 import org.camunda.bpm.engine.impl.variable.serializer.ValueFields;
+import org.camunda.bpm.engine.variable.impl.value.UntypedValueImpl;
 import org.camunda.spin.DataFormats;
 import org.camunda.spin.json.SpinJsonNode;
 import org.camunda.spin.plugin.variable.SpinValues;

File: engine-plugins/spin-plugin/src/main/java/org/camunda/spin/plugin/impl/XmlValueSerializer.java
Patch:
@@ -12,8 +12,8 @@
  */
 package org.camunda.spin.plugin.impl;
 
-import org.camunda.bpm.engine.impl.core.variable.value.UntypedValueImpl;
 import org.camunda.bpm.engine.impl.variable.serializer.ValueFields;
+import org.camunda.bpm.engine.variable.impl.value.UntypedValueImpl;
 import org.camunda.spin.DataFormats;
 import org.camunda.spin.plugin.variable.SpinValues;
 import org.camunda.spin.plugin.variable.type.SpinValueType;

File: engine-plugins/spin-plugin/src/main/java/org/camunda/spin/plugin/variable/type/impl/SpinValueTypeImpl.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.Collections;
 import java.util.Map;
 
-import org.camunda.bpm.engine.impl.core.variable.type.AbstractValueTypeImpl;
+import org.camunda.bpm.engine.variable.impl.type.AbstractValueTypeImpl;
 import org.camunda.bpm.engine.variable.value.SerializableValue;
 import org.camunda.bpm.engine.variable.value.TypedValue;
 import org.camunda.spin.plugin.variable.type.SpinValueType;

File: engine-plugins/spin-plugin/src/main/java/org/camunda/spin/plugin/variable/value/impl/SpinValueImpl.java
Patch:
@@ -14,7 +14,7 @@
 
 import static org.camunda.spin.Spin.S;
 
-import org.camunda.bpm.engine.impl.core.variable.value.AbstractTypedValue;
+import org.camunda.bpm.engine.variable.impl.value.AbstractTypedValue;
 import org.camunda.bpm.engine.variable.type.ValueType;
 import org.camunda.spin.DataFormats;
 import org.camunda.spin.Spin;

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockObjectValue.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.camunda.bpm.engine.rest.helper;
 
-import org.camunda.bpm.engine.impl.core.variable.value.ObjectValueImpl;
+import org.camunda.bpm.engine.variable.impl.value.ObjectValueImpl;
 import org.camunda.bpm.engine.variable.value.ObjectValue;
 
 /**

File: engine-plugins/spin-plugin/src/main/java/org/camunda/spin/plugin/variable/type/impl/SpinValueTypeImpl.java
Patch:
@@ -30,8 +30,6 @@ public abstract class SpinValueTypeImpl extends AbstractValueTypeImpl implements
 
   private static final long serialVersionUID = 1L;
 
-  public final static String VALUE_INFO_SERIALIZATION_DATA_FORMAT = "serializationDataFormat";
-
   public SpinValueTypeImpl(String name) {
     super(name);
   }

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/AbstractHistoricDetailRestServiceQueryTest.java
Patch:
@@ -37,12 +37,12 @@
 import org.camunda.bpm.engine.history.HistoricFormField;
 import org.camunda.bpm.engine.history.HistoricVariableUpdate;
 import org.camunda.bpm.engine.impl.calendar.DateTimeUtil;
-import org.camunda.bpm.engine.impl.core.variable.type.ObjectTypeImpl;
 import org.camunda.bpm.engine.rest.AbstractRestServiceTest;
 import org.camunda.bpm.engine.rest.helper.MockHistoricVariableUpdateBuilder;
 import org.camunda.bpm.engine.rest.helper.MockProvider;
 import org.camunda.bpm.engine.rest.helper.VariableTypeHelper;
 import org.camunda.bpm.engine.variable.Variables;
+import org.camunda.bpm.engine.variable.type.SerializableValueType;
 import org.camunda.bpm.engine.variable.type.ValueType;
 import org.camunda.bpm.engine.variable.value.ObjectValue;
 import org.junit.Assert;
@@ -414,9 +414,9 @@ public void testSpinVariableInstanceRetrieval() {
           .body("[0].variableType", equalTo(VariableTypeHelper.toExpectedValueTypeName(ValueType.OBJECT)))
           .body("[0].errorMessage", nullValue())
           .body("[0].value", equalTo("aSerializedValue"))
-          .body("[0].valueInfo." + ObjectTypeImpl.VALUE_INFO_OBJECT_TYPE_NAME,
+          .body("[0].valueInfo." + SerializableValueType.VALUE_INFO_OBJECT_TYPE_NAME,
               equalTo("aRootType"))
-          .body("[0].valueInfo." + ObjectTypeImpl.VALUE_INFO_SERIALIZATION_DATA_FORMAT,
+          .body("[0].valueInfo." + SerializableValueType.VALUE_INFO_SERIALIZATION_DATA_FORMAT,
               equalTo("aDataFormat"))
         .when().get(HISTORIC_DETAIL_RESOURCE_URL);
   }

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/util/VariablesBuilder.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.camunda.bpm.engine.impl.core.variable.type.ObjectTypeImpl;
+import org.camunda.bpm.engine.variable.type.SerializableValueType;
 
 /**
  * <p>Builds maps that fulfill the camunda variable json format.</p>
@@ -102,8 +102,8 @@ public static Map<String, Object> getObjectValueMap(Object value, String variabl
     }
 
     Map<String, Object> typeInfo = new HashMap<String, Object>();
-    typeInfo.put(ObjectTypeImpl.VALUE_INFO_SERIALIZATION_DATA_FORMAT, serializationFormat);
-    typeInfo.put(ObjectTypeImpl.VALUE_INFO_OBJECT_TYPE_NAME, objectTypeName);
+    typeInfo.put(SerializableValueType.VALUE_INFO_SERIALIZATION_DATA_FORMAT, serializationFormat);
+    typeInfo.put(SerializableValueType.VALUE_INFO_OBJECT_TYPE_NAME, objectTypeName);
 
     serializedVariable.put("valueInfo", typeInfo);
 

File: commons/typed-values/src/main/java/org/camunda/bpm/engine/impl/core/variable/type/FileValueTypeImpl.java
Patch:
@@ -34,9 +34,6 @@
 public class FileValueTypeImpl extends AbstractValueTypeImpl implements FileValueType {
 
   private static final long serialVersionUID = 1L;
-  public final static String VALUE_INFO_FILE_NAME = "filename";
-  public final static String VALUE_INFO_FILE_MIME_TYPE = "mimeType";
-  public static final String VALUE_INFO_FILE_ENCODING = "encoding";
 
   public FileValueTypeImpl() {
     super("file");

File: commons/typed-values/src/main/java/org/camunda/bpm/engine/impl/core/variable/type/ObjectTypeImpl.java
Patch:
@@ -29,9 +29,6 @@
  */
 public class ObjectTypeImpl extends AbstractValueTypeImpl implements SerializableValueType {
 
-  public final static String VALUE_INFO_OBJECT_TYPE_NAME = "objectTypeName";
-  public final static String VALUE_INFO_SERIALIZATION_DATA_FORMAT = "serializationDataFormat";
-
   private static final long serialVersionUID = 1L;
 
   public static final String TYPE_NAME = "object";

File: typed-values/src/main/java/org/camunda/bpm/engine/impl/core/variable/type/FileValueTypeImpl.java
Patch:
@@ -34,9 +34,6 @@
 public class FileValueTypeImpl extends AbstractValueTypeImpl implements FileValueType {
 
   private static final long serialVersionUID = 1L;
-  public final static String VALUE_INFO_FILE_NAME = "filename";
-  public final static String VALUE_INFO_FILE_MIME_TYPE = "mimeType";
-  public static final String VALUE_INFO_FILE_ENCODING = "encoding";
 
   public FileValueTypeImpl() {
     super("file");

File: typed-values/src/main/java/org/camunda/bpm/engine/impl/core/variable/type/ObjectTypeImpl.java
Patch:
@@ -29,9 +29,6 @@
  */
 public class ObjectTypeImpl extends AbstractValueTypeImpl implements SerializableValueType {
 
-  public final static String VALUE_INFO_OBJECT_TYPE_NAME = "objectTypeName";
-  public final static String VALUE_INFO_SERIALIZATION_DATA_FORMAT = "serializationDataFormat";
-
   private static final long serialVersionUID = 1L;
 
   public static final String TYPE_NAME = "object";

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/type/DateDataTypeTransformer.java
Patch:
@@ -23,12 +23,12 @@
 
 /**
  * Transform values of type {@link Date} and {@link String} into
- * date-time as {@link DateValue}. A String should have the format
+ * {@link DateValue} which contains date and time. A String should have the format
  * {@code yyyy-MM-dd'T'HH:mm:ss}.
  *
  * @author Philipp Ossler
  */
-public class DateTimeDataTypeTransformer implements DataTypeTransformer {
+public class DateDataTypeTransformer implements DataTypeTransformer {
 
   protected SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
 

File: engine-spring/src/test/java/org/camunda/bpm/engine/spring/test/SpringProcessEngineTestCaseTest.java
Patch:
@@ -26,6 +26,5 @@ public class SpringProcessEngineTestCaseTest extends SpringProcessEngineTestCase
   public void testProgrammaticContextConfiguration() {
     assertNotNull(processEngine);
     assertTrue(((ProcessEngineImpl) processEngine).getProcessEngineConfiguration().isJobExecutorDeploymentAware());
-    assertNotNull(cachedProcessEngines.get(ExampleConfiguration.class.getName()));
   }
 }

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/runtime/impl/FilterResourceImpl.java
Patch:
@@ -505,7 +505,7 @@ protected Map<String, List<VariableInstance>> getSortedVariableInstances(Collect
     List<VariableInstance> variableInstances = queryVariablesInstancesByVariableScopeIds(variableNames, variableScopeIds);
     Map<String, List<VariableInstance>> sortedVariableInstances = new HashMap<String, List<VariableInstance>>();
     for (VariableInstance variableInstance : variableInstances) {
-      String variableScopeId = ((VariableInstanceEntity) variableInstance).getVariableScope();
+      String variableScopeId = ((VariableInstanceEntity) variableInstance).getVariableScopeId();
       if (!sortedVariableInstances.containsKey(variableScopeId)) {
         sortedVariableInstances.put(variableScopeId, new ArrayList<VariableInstance>());
       }

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockVariableInstanceBuilder.java
Patch:
@@ -148,13 +148,13 @@ public VariableInstance build() {
   public VariableInstanceEntity buildEntity() {
     VariableInstanceEntity mockVariable = mock(VariableInstanceEntity.class);
     if (taskId != null) {
-      when(mockVariable.getVariableScope()).thenReturn(taskId);
+      when(mockVariable.getVariableScopeId()).thenReturn(taskId);
     }
     else if (executionId != null) {
-      when(mockVariable.getVariableScope()).thenReturn(executionId);
+      when(mockVariable.getVariableScopeId()).thenReturn(executionId);
     }
     else {
-      when(mockVariable.getVariableScope()).thenReturn(caseExecutionId);
+      when(mockVariable.getVariableScopeId()).thenReturn(caseExecutionId);
     }
     return build(mockVariable);
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/event/HistoricDecisionInputInstanceEntity.java
Patch:
@@ -15,7 +15,6 @@
 
 import org.camunda.bpm.engine.history.HistoricDecisionInputInstance;
 import org.camunda.bpm.engine.impl.context.Context;
-import org.camunda.bpm.engine.impl.persistence.entity.ByteArrayEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.util.ByteArrayField;
 import org.camunda.bpm.engine.impl.persistence.entity.util.TypedValueField;
 import org.camunda.bpm.engine.impl.variable.serializer.ValueFields;
@@ -142,7 +141,6 @@ public void setDoubleValue(Double doubleValue) {
     this.doubleValue = doubleValue;
   }
 
-  @Override
   public String getByteArrayValueId() {
     return byteArrayField.getByteArrayId();
   }
@@ -152,7 +150,7 @@ public void setByteArrayValueId(String byteArrayId) {
   }
 
   @Override
-  public ByteArrayEntity getByteArrayValue() {
+  public byte[] getByteArrayValue() {
     return byteArrayField.getByteArrayValue();
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/event/HistoricDecisionOutputInstanceEntity.java
Patch:
@@ -15,7 +15,6 @@
 
 import org.camunda.bpm.engine.history.HistoricDecisionOutputInstance;
 import org.camunda.bpm.engine.impl.context.Context;
-import org.camunda.bpm.engine.impl.persistence.entity.ByteArrayEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.util.ByteArrayField;
 import org.camunda.bpm.engine.impl.persistence.entity.util.TypedValueField;
 import org.camunda.bpm.engine.impl.variable.serializer.ValueFields;
@@ -173,7 +172,6 @@ public void setDoubleValue(Double doubleValue) {
     this.doubleValue = doubleValue;
   }
 
-  @Override
   public String getByteArrayValueId() {
     return byteArrayField.getByteArrayId();
   }
@@ -183,7 +181,7 @@ public void setByteArrayValueId(String byteArrayId) {
   }
 
   @Override
-  public ByteArrayEntity getByteArrayValue() {
+  public byte[] getByteArrayValue() {
     return byteArrayField.getByteArrayValue();
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -229,8 +229,7 @@ protected void initHistoricVariableUpdateEvt(HistoricVariableUpdateEventEntity e
     evt.setDoubleValue(variableInstance.getDoubleValue());
     evt.setLongValue(variableInstance.getLongValue());
     if (variableInstance.getByteArrayValueId() != null) {
-      ByteArrayEntity byteArrayValue = variableInstance.getByteArrayValue();
-      evt.setByteValue(byteArrayValue.getBytes());
+      evt.setByteValue(variableInstance.getByteArrayValue());
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricVariableInstanceEntity.java
Patch:
@@ -153,7 +153,7 @@ public void setByteArrayId(String byteArrayId) {
     byteArrayField.setByteArrayId(byteArrayId);
   }
 
-  public ByteArrayEntity getByteArrayValue() {
+  public byte[] getByteArrayValue() {
     return byteArrayField.getByteArrayValue();
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/AbstractObjectValueSerializer.java
Patch:
@@ -38,7 +38,7 @@ public ObjectValue convertToTypedValue(UntypedValueImpl untypedValue) {
 
   protected void writeToValueFields(ObjectValue value, ValueFields valueFields, byte[] serializedValue) {
     String objectTypeName = getObjectTypeName(value, valueFields);
-    ByteArrayValueSerializer.setBytes(valueFields, serializedValue);
+    valueFields.setByteArrayValue(serializedValue);
     valueFields.setTextValue2(objectTypeName);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/AbstractSerializableValueSerializer.java
Patch:
@@ -98,7 +98,7 @@ public T readValue(ValueFields valueFields, boolean deserializeObjectValue) {
   protected abstract void updateTypedValue(T value, String serializedStringValue);
 
   protected byte[] readSerializedValueFromFields(ValueFields valueFields) {
-    return ByteArrayValueSerializer.getBytes(valueFields);
+    return valueFields.getByteArrayValue();
   }
 
   protected String getSerializedStringValue(byte[] serializedByteValue) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/FileValueSerializer.java
Patch:
@@ -67,7 +67,7 @@ public FileValue convertToTypedValue(UntypedValueImpl untypedValue) {
   public FileValue readValue(ValueFields valueFields, boolean deserializeValue) {
     FileValueBuilder builder = Variables.fileValue(valueFields.getTextValue());
     if (valueFields.getByteArrayValue() != null) {
-      builder.file(valueFields.getByteArrayValue().getBytes());
+      builder.file(valueFields.getByteArrayValue());
     }
     // to ensure the same array size all the time
     if (valueFields.getTextValue2() != null) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/EventSubscriptionEntity.java
Patch:
@@ -68,7 +68,7 @@ public EventSubscriptionEntity(ExecutionEntity executionEntity) {
 
   // processing /////////////////////////////
 
-  public void eventReceived(Serializable payload, boolean processASync) {
+  public void eventReceived(Object payload, boolean processASync) {
     if(processASync) {
       scheduleEventAsync(payload);
     } else {
@@ -82,7 +82,7 @@ protected void processEventSync(Object payload) {
     eventHandler.handleEvent(this, payload, Context.getCommandContext());
   }
 
-  protected void scheduleEventAsync(Serializable payload) {
+  protected void scheduleEventAsync(Object payload) {
 
     EventSubscriptionJobDeclaration asyncDeclaration = getJobDeclaration();
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/incident/DefaultIncidentHandler.java
Patch:
@@ -40,9 +40,6 @@
  */
 public class DefaultIncidentHandler implements IncidentHandler {
 
-  public static final String FAILED_JOB_HANDLER_TYPE = "failedJob";
-  public static final String EXTERNAL_TASK_HANDLER_TYPE = "failedExternalTask";
-
   protected String type;
 
   public DefaultIncidentHandler(String type) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExternalTaskEntity.java
Patch:
@@ -24,9 +24,9 @@
 import org.camunda.bpm.engine.impl.db.EnginePersistenceLogger;
 import org.camunda.bpm.engine.impl.db.HasDbRevision;
 import org.camunda.bpm.engine.impl.incident.IncidentHandler;
-import org.camunda.bpm.engine.impl.incident.DefaultIncidentHandler;
 import org.camunda.bpm.engine.impl.util.ClockUtil;
 import org.camunda.bpm.engine.impl.util.EnsureUtil;
+import org.camunda.bpm.engine.runtime.Incident;
 
 /**
  * @author Thorben Lindhauer
@@ -221,15 +221,15 @@ else if (!areRetriesLeft() && retries > 0) {
   protected void createIncident() {
     IncidentHandler incidentHandler = Context
         .getProcessEngineConfiguration()
-        .getIncidentHandler(DefaultIncidentHandler.EXTERNAL_TASK_HANDLER_TYPE);
+        .getIncidentHandler(Incident.EXTERNAL_TASK_HANDLER_TYPE);
 
     incidentHandler.handleIncident(processDefinitionId, activityId, executionId, id, errorMessage);
   }
 
   protected void removeIncident() {
     IncidentHandler handler = Context
         .getProcessEngineConfiguration()
-        .getIncidentHandler(DefaultIncidentHandler.EXTERNAL_TASK_HANDLER_TYPE);
+        .getIncidentHandler(Incident.EXTERNAL_TASK_HANDLER_TYPE);
 
     handler.resolveIncident(getProcessDefinitionId(), null, executionId, id);
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -30,7 +30,6 @@
 import org.camunda.bpm.engine.impl.db.DbEntity;
 import org.camunda.bpm.engine.impl.db.HasDbRevision;
 import org.camunda.bpm.engine.impl.incident.IncidentHandler;
-import org.camunda.bpm.engine.impl.incident.DefaultIncidentHandler;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.jobexecutor.DefaultJobPriorityProvider;
 import org.camunda.bpm.engine.impl.jobexecutor.JobHandler;
@@ -284,7 +283,7 @@ protected void createFailedJobIncident() {
     if (processEngineConfiguration
         .isCreateIncidentOnFailedJobEnabled()) {
 
-      String incidentHandlerType = DefaultIncidentHandler.FAILED_JOB_HANDLER_TYPE;
+      String incidentHandlerType = Incident.FAILED_JOB_HANDLER_TYPE;
 
       // make sure job has an ID set:
       if(id == null) {
@@ -316,7 +315,7 @@ protected void createFailedJobIncident() {
   protected void removeFailedJobIncident(boolean incidentResolved) {
     IncidentHandler handler = Context
         .getProcessEngineConfiguration()
-        .getIncidentHandler(DefaultIncidentHandler.FAILED_JOB_HANDLER_TYPE);
+        .getIncidentHandler(Incident.FAILED_JOB_HANDLER_TYPE);
 
     if (incidentResolved) {
       handler.resolveIncident(getProcessDefinitionId(), null, executionId, id);

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/ManagementServiceTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.camunda.bpm.engine.history.UserOperationLogEntry;
 import org.camunda.bpm.engine.impl.ProcessEngineImpl;
 import org.camunda.bpm.engine.impl.cmd.AcquireJobsCmd;
-import org.camunda.bpm.engine.impl.incident.DefaultIncidentHandler;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.interceptor.CommandExecutor;
@@ -40,6 +39,7 @@
 import org.camunda.bpm.engine.impl.util.ClockUtil;
 import org.camunda.bpm.engine.management.JobDefinition;
 import org.camunda.bpm.engine.management.TableMetaData;
+import org.camunda.bpm.engine.runtime.Incident;
 import org.camunda.bpm.engine.runtime.Job;
 import org.camunda.bpm.engine.runtime.JobQuery;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
@@ -385,7 +385,7 @@ public Void execute(CommandContext commandContext) {
   protected void deleteJobAndIncidents(final Job job) {
     final List<HistoricIncident> incidents =
         historyService.createHistoricIncidentQuery()
-        .incidentType(DefaultIncidentHandler.FAILED_JOB_HANDLER_TYPE).list();
+        .incidentType(Incident.FAILED_JOB_HANDLER_TYPE).list();
 
     CommandExecutor commandExecutor = processEngineConfiguration.getCommandExecutorTxRequired();
     commandExecutor.execute(new Command<Void>() {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/IncidentQueryTest.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.List;
 
 import org.camunda.bpm.engine.ProcessEngineException;
-import org.camunda.bpm.engine.impl.incident.DefaultIncidentHandler;
 import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
 import org.camunda.bpm.engine.runtime.Execution;
 import org.camunda.bpm.engine.runtime.Incident;
@@ -67,7 +66,7 @@ public void testQuery() {
   }
 
   public void testQueryByIncidentType() {
-    IncidentQuery query = runtimeService.createIncidentQuery().incidentType(DefaultIncidentHandler.FAILED_JOB_HANDLER_TYPE);
+    IncidentQuery query = runtimeService.createIncidentQuery().incidentType(Incident.FAILED_JOB_HANDLER_TYPE);
     assertEquals(4, query.count());
 
     List<Incident> incidents = query.list();

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricIncidentQueryTest.java
Patch:
@@ -14,7 +14,6 @@
 
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.history.HistoricIncidentQuery;
-import org.camunda.bpm.engine.impl.incident.DefaultIncidentHandler;
 import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
 import org.camunda.bpm.engine.runtime.Incident;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
@@ -60,7 +59,7 @@ public void testQueryByIncidentType() {
     startProcessInstance(PROCESS_DEFINITION_KEY);
 
     HistoricIncidentQuery query = historyService.createHistoricIncidentQuery()
-        .incidentType(DefaultIncidentHandler.FAILED_JOB_HANDLER_TYPE);
+        .incidentType(Incident.FAILED_JOB_HANDLER_TYPE);
 
     assertEquals(1, query.list().size());
     assertEquals(1, query.count());

File: engine-dmn/feel/src/main/java/org/camunda/bpm/dmn/feel/FeelEngineProvider.java
Patch:
@@ -16,7 +16,7 @@
 public interface FeelEngineProvider {
 
   /**
-   * Create a instance of a {@link FeelEngine}.
+   * Create an instance of a {@link FeelEngine}.
    *
    * @return the instance of a {@link FeelEngine}
    */

File: engine-dmn/feel/src/main/java/org/camunda/bpm/dmn/feel/FeelMethodInvocationException.java
Patch:
@@ -15,7 +15,7 @@
 
 /**
  * Exception thrown if an error occurs during a method invocation
- * ina a FEEL expression.
+ * in a FEEL expression.
  */
 public class FeelMethodInvocationException extends FeelException {
 

File: engine-dmn/feel/src/main/java/org/camunda/bpm/dmn/feel/impl/FeelEngineLogger.java
Patch:
@@ -55,7 +55,7 @@ public FeelSyntaxException invalidComparisonExpression(String feelExpression) {
   }
 
   public FeelException variableMapperIsReadOnly() {
-    return new FeelException(exceptionMessage("004", "The variable mapper is ready only."));
+    return new FeelException(exceptionMessage("004", "The variable mapper is read only."));
   }
 
   public FeelException unableToFindMethod(NoSuchMethodException e, String name, Class<?>... parameterTypes) {

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/DmnDecisionModelImpl.java
Patch:
@@ -22,11 +22,10 @@
 import org.camunda.bpm.dmn.engine.DmnDecision;
 import org.camunda.bpm.dmn.engine.DmnDecisionModel;
 import org.camunda.bpm.dmn.engine.DmnItemDefinition;
-import org.camunda.bpm.dmn.engine.impl.context.DmnDecisionContextImpl;
 
 public class DmnDecisionModelImpl extends DmnElementImpl implements DmnDecisionModel {
 
-  protected String expressionLanguage = DmnDecisionContextImpl.DEFAULT_SCRIPT_LANGUAGE;
+  protected String expressionLanguage;
   protected String typeLanguage;
   protected String namespace;
 

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/DmnLogger.java
Patch:
@@ -23,7 +23,6 @@ public class DmnLogger extends BaseLogger {
 
  public static DmnEngineLogger ENGINE_LOGGER = createLogger(DmnEngineLogger.class, PROJECT_CODE, PROJECT_LOGGER, "01");
  public static DmnTransformLogger TRANSFORM_LOGGER = createLogger(DmnTransformLogger.class, PROJECT_CODE, PROJECT_LOGGER + ".transform", "02");
- public static DmnExpressionLogger EXPRESSION_LOGGER = createLogger(DmnExpressionLogger.class, PROJECT_CODE, PROJECT_LOGGER + ".expression", "03");
- public static DmnHitPolicyLogger HIT_POLICY_LOGGER = createLogger(DmnHitPolicyLogger.class, PROJECT_CODE, PROJECT_LOGGER + ".hitPolicy", "04");
+ public static DmnHitPolicyLogger HIT_POLICY_LOGGER = createLogger(DmnHitPolicyLogger.class, PROJECT_CODE, PROJECT_LOGGER + ".hitPolicy", "03");
 
 }

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/handler/AbstractDmnElementHandler.java
Patch:
@@ -40,4 +40,5 @@ protected void initKey(DmnElementHandlerContext context, DmnElement element, I d
   protected void initName(DmnElementHandlerContext context, DmnElement element, I dmnElement) {
     dmnElement.setName(element.getName());
   }
+
 }

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/type/DefaultDataTypeTransformerFactory.java
Patch:
@@ -52,7 +52,7 @@ protected static Map<String, DataTypeTransformer> getDefaultTransformers() {
     transformers.put("double", new DoubleDataTypeTransformer());
     transformers.put("date and time", new DateTimeDataTypeTransformer());
     transformers.put("date", new LocalDateDataTypeTransformer());
-    transformers.put("time", new LocalTimeDataTypeTransformator());
+    transformers.put("time", new LocalTimeDataTypeTransformer());
     transformers.put("duration", new DurationDataTypeTransformer());
 
     return transformers;

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/type/LocalTimeDataTypeTransformer.java
Patch:
@@ -27,7 +27,7 @@
  *
  * @author Philipp Ossler
  */
-public class LocalTimeDataTypeTransformator implements DataTypeTransformer {
+public class LocalTimeDataTypeTransformer implements DataTypeTransformer {
 
   protected SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss");
 

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/DmnEngineMetricCollectorTest.java
Patch:
@@ -24,6 +24,7 @@
 
 public class DmnEngineMetricCollectorTest extends DmnDecisionTest {
 
+  public static final String EXAMPLE_DMN = "org/camunda/bpm/dmn/engine/Example.dmn";
   public static final Map<String, Object> VARIABLES = new HashMap<String, Object>();
 
   static {

File: engine-dmn/scriptengine-dmn/src/test/java/org/camunda/bpm/dmn/scriptengine/DmnScriptEngineTest.java
Patch:
@@ -13,14 +13,12 @@
 
 package org.camunda.bpm.dmn.scriptengine;
 
-import static org.assertj.core.api.Assertions.assertThat;
 import static org.camunda.bpm.dmn.engine.test.asserts.DmnAssertions.assertThat;
 
 import java.io.Reader;
 import java.io.StringReader;
 import java.util.HashMap;
 import java.util.Map;
-
 import javax.script.Bindings;
 import javax.script.ScriptContext;
 import javax.script.ScriptEngine;

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/DmnTypeDefinitionImpl.java
Patch:
@@ -45,7 +45,7 @@ protected TypedValue transformNotNullValue(Object value) {
       return transformer.transform(value);
 
     } catch (IllegalArgumentException e) {
-      throw LOG.invalidOutputValue(typeName, value);
+      throw LOG.invalidValueForTypeDefinition(typeName, value);
     }
   }
 

File: webapps/webapp/src/main/java/org/camunda/bpm/webapp/impl/engine/ProcessEnginesFilter.java
Patch:
@@ -52,7 +52,7 @@ public class ProcessEnginesFilter extends AbstractTemplateFilter {
   protected static final String ADMIN_APP_NAME = "admin";
   protected static final String TASKLIST_APP_NAME = "tasklist";
 
-  protected static final String DEFAULT_APP = COCKPIT_APP_NAME;
+  protected static final String DEFAULT_APP = TASKLIST_APP_NAME;
   protected static final String INDEX_PAGE = "index.html";
 
   protected static final String SETUP_PAGE = "setup/";

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/context/DmnDecisionContextImpl.java
Patch:
@@ -151,13 +151,13 @@ protected DmnDecisionResult generateDecisionResult(DmnDecisionTableResult decisi
     if (decisionTableResult.getCollectResultName() != null || decisionTableResult.getCollectResultValue() != null) {
       DmnDecisionOutputImpl decisionOutput = new DmnDecisionOutputImpl();
       NumberValue resultValue = Variables.numberValue(decisionTableResult.getCollectResultValue());
-      decisionOutput.putValueTyped(decisionTableResult.getCollectResultName(), resultValue);
+      decisionOutput.put(decisionTableResult.getCollectResultName(), resultValue.getValue());
       decisionResult.add(decisionOutput);
     } else {
       for (DmnDecisionTableRule matchingRule : decisionTableResult.getMatchingRules()) {
         DmnDecisionOutputImpl decisionOutput = new DmnDecisionOutputImpl();
         for (DmnDecisionTableValue outputValue : matchingRule.getOutputs().values()) {
-          decisionOutput.putValueTyped(outputValue.getOutputName(), outputValue.getValue());
+          decisionOutput.put(outputValue.getOutputName(), outputValue.getValue().getValue());
         }
         decisionResult.add(decisionOutput);
       }

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/hitpolicy/HitPolicyTest.java
Patch:
@@ -1590,7 +1590,7 @@ public void testCollectCountHitPolicyCompoundOutputMultipleMatchingRules() {
   public List<Object> collectSingleOutputValues(DmnDecisionResult result) {
     List<Object> values = new ArrayList<Object>();
     for (DmnDecisionOutput dmnDecisionOutput : result) {
-      values.add(dmnDecisionOutput.getValue().getValue());
+      values.add(dmnDecisionOutput.getValue());
     }
     return values;
   }

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/type/CustomDataTypeTransformerFactoryTest.java
Patch:
@@ -55,7 +55,7 @@ public void customOutputTransformer() {
     Map<String, Object> variables = new HashMap<String, Object>();
     variables.put("output", 21);
 
-    assertThat(engine).evaluates(decision, variables).hasResult(CustomDataTypeTransformer.CUSTOM_OBJECT);
+    assertThat(engine).evaluates(decision, variables).hasResultValue(CustomDataTypeTransformer.CUSTOM_OBJECT.getValue());
   }
 
   @Test

File: engine-dmn/engine/src/test/java/org/camunda/bpm/dmn/engine/type/DataTypeTransformerIntegerationTest.java
Patch:
@@ -69,7 +69,7 @@ public void invokeTransformerForOutputDefinition() {
     Map<String, Object> variables = new HashMap<String, Object>();
     variables.put("output", 21);
 
-    assertThat(engine).evaluates(decision, variables).hasResult(TRANSFORMED_VALUE);
+    assertThat(engine).evaluates(decision, variables).hasResultValue(TRANSFORMED_VALUE.getValue());
 
     verify(dataTypeTransformerMock, atLeastOnce()).transform(21);
   }
@@ -80,7 +80,7 @@ public void dontInvokeTransformerForOutputDefinitionWithNull() {
     Map<String, Object> variables = new HashMap<String, Object>();
     variables.put("output", null);
 
-    assertThat(engine).evaluates(decision, variables).hasResult(Variables.untypedNullValue());
+    assertThat(engine).evaluates(decision, variables).hasResultValue(null);
 
     verify(dataTypeTransformerMock, never()).transform(any());
   }

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/DmnDecisionTableValue.java
Patch:
@@ -13,6 +13,8 @@
 
 package org.camunda.bpm.dmn.engine;
 
+import org.camunda.bpm.engine.variable.value.TypedValue;
+
 /**
  * The value of a clause of a decision table.
  */
@@ -36,6 +38,6 @@ public interface DmnDecisionTableValue {
   /**
    * @return the value of the evaluated clause expression or null if no expression given
    */
-  Object getValue();
+  TypedValue getValue();
 
 }

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/DmnTypeDefinition.java
Patch:
@@ -13,6 +13,8 @@
 
 package org.camunda.bpm.dmn.engine;
 
+import org.camunda.bpm.engine.variable.value.TypedValue;
+
 public interface DmnTypeDefinition {
 
   String getTypeName();
@@ -24,6 +26,6 @@ public interface DmnTypeDefinition {
    * @return value of specified type
    * @throws IllegalArgumentException if the value can not be transformed
    */
-  Object transform(Object value) throws IllegalArgumentException;
+  TypedValue transform(Object value) throws IllegalArgumentException;
 
 }

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/DmnClauseImpl.java
Patch:
@@ -32,7 +32,7 @@ public class DmnClauseImpl extends DmnElementImpl implements DmnClause {
   protected List<DmnClauseEntry> inputEntries = new ArrayList<DmnClauseEntry>();
   protected List<DmnExpression> outputEntries = new ArrayList<DmnExpression>();
 
-  protected DmnItemDefinition outputDefinition;
+  protected DmnItemDefinition outputDefinition = new DefaultItemDefinition();
 
   public DmnExpression getInputExpression() {
     return inputExpression;

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/DmnExpressionImpl.java
Patch:
@@ -20,7 +20,7 @@ public class DmnExpressionImpl extends DmnElementImpl implements DmnExpression {
 
   protected String expressionLanguage;
   protected String expression;
-  protected DmnItemDefinition itemDefinition;
+  protected DmnItemDefinition itemDefinition = new DefaultItemDefinition();
 
   public DmnExpressionImpl() {
   }

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/DmnItemDefinitionImpl.java
Patch:
@@ -22,7 +22,7 @@
 
 public class DmnItemDefinitionImpl extends DmnElementImpl implements DmnItemDefinition {
 
-  protected DmnTypeDefinition typeDefinition;
+  protected DmnTypeDefinition typeDefinition = new DefaultTypeDefinition();
   protected List<DmnExpression> allowedValues = new ArrayList<DmnExpression>();
 
   public DmnTypeDefinition getTypeDefinition() {
@@ -45,6 +45,7 @@ public void addAllowedValue(DmnExpression allowedValue) {
     allowedValues.add(allowedValue);
   }
 
+  @Override
   public String toString() {
     return "DmnItemDefinitionImpl{" +
       "key='" + key + '\'' +

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/hitpolicy/CollectHitPolicyHandler.java
Patch:
@@ -26,6 +26,7 @@
 import org.camunda.bpm.dmn.engine.hitpolicy.DmnHitPolicyHandler;
 import org.camunda.bpm.dmn.engine.impl.DmnDecisionTableResultImpl;
 import org.camunda.bpm.dmn.engine.impl.DmnLogger;
+import org.camunda.bpm.engine.variable.value.TypedValue;
 import org.camunda.bpm.model.dmn.BuiltinAggregator;
 
 public class CollectHitPolicyHandler implements DmnHitPolicyHandler {
@@ -73,7 +74,8 @@ protected List<Object> collectSingleValues(BuiltinAggregator aggregator, List<Dm
         continue; // skip empty output
       }
       else if (outputs.size() == 1) {
-        values.add(outputs.values().iterator().next().getValue());
+        TypedValue typedValue = outputs.values().iterator().next().getValue();
+        values.add(typedValue.getValue());
       }
       else {
         throw LOG.aggregationNotApplicableOnCompoundOutput(aggregator, outputs);

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/type/DataTypeTransformer.java
Patch:
@@ -12,6 +12,8 @@
  */
 package org.camunda.bpm.dmn.engine.type;
 
+import org.camunda.bpm.engine.variable.value.TypedValue;
+
 /**
  * Transform a value into a specific type.
  *
@@ -27,6 +29,6 @@ public interface DataTypeTransformer {
    * @throws IllegalArgumentException
    *           if the value can not be transformed
    */
-  Object transform(Object value) throws IllegalArgumentException;
+  TypedValue transform(Object value) throws IllegalArgumentException;
 
 }

File: webapps/webapp/src/test/java/org/camunda/bpm/cockpit/plugin/base/authorization/ProcessInstanceResourceAuthorizationTest.java
Patch:
@@ -216,13 +216,13 @@ protected List<CalledProcessInstanceDto> executeCalledInstancesQueryWithAuthoriz
     firstPermCheck.setResource(PROCESS_INSTANCE);
     firstPermCheck.setResourceIdQueryParam("EXEC1.PROC_INST_ID_");
     firstPermCheck.setPermission(READ);
-    query.addPermissionCheck(firstPermCheck);
+    query.addAtomicPermissionCheck(firstPermCheck);
 
     PermissionCheck secondPermCheck = new PermissionCheck();
     secondPermCheck.setResource(PROCESS_DEFINITION);
     secondPermCheck.setResourceIdQueryParam("PROCDEF.KEY_");
     secondPermCheck.setPermission(READ_INSTANCE);
-    query.addPermissionCheck(secondPermCheck);
+    query.addAtomicPermissionCheck(secondPermCheck);
 
     return getQueryService().executeQuery("selectCalledProcessInstances", query);
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/ProcessDefinitionQueryImpl.java
Patch:
@@ -140,7 +140,8 @@ public ProcessDefinitionQueryImpl processDefinitionResourceNameLike(String resou
   }
 
   public ProcessDefinitionQueryImpl processDefinitionVersion(Integer version) {
-    ensurePositive("version", version);
+    ensureNotNull("version", version);
+    ensurePositive("version", version.longValue());
     this.version = version;
     return this;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SetProcessDefinitionVersionCmd.java
Patch:
@@ -83,7 +83,7 @@ public class SetProcessDefinitionVersionCmd implements Command<Void>, Serializab
   public SetProcessDefinitionVersionCmd(String processInstanceId, Integer processDefinitionVersion) {
     ensureNotEmpty("The process instance id is mandatory", "processInstanceId", processInstanceId);
     ensureNotNull("The process definition version is mandatory", "processDefinitionVersion", processDefinitionVersion);
-    ensurePositive("The process definition version must be positive", "processDefinitionVersion", processDefinitionVersion);
+    ensurePositive("The process definition version must be positive", "processDefinitionVersion", processDefinitionVersion.longValue());
     this.processInstanceId = processInstanceId;
     this.processDefinitionVersion = processDefinitionVersion;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/entity/repository/CaseDefinitionQueryImpl.java
Patch:
@@ -111,7 +111,7 @@ public CaseDefinitionQuery deploymentId(String deploymentId) {
 
   public CaseDefinitionQuery caseDefinitionVersion(Integer caseDefinitionVersion) {
     ensureNotNull(NotValidException.class, "version", caseDefinitionVersion);
-    ensurePositive(NotValidException.class, "version", caseDefinitionVersion);
+    ensurePositive(NotValidException.class, "version", caseDefinitionVersion.longValue());
     this.version = caseDefinitionVersion;
     return this;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/entitymanager/operation/comparator/EntityTypeComparatorForModifications.java
Patch:
@@ -24,6 +24,7 @@
 import org.camunda.bpm.engine.impl.persistence.entity.DeploymentEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.EventSubscriptionEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
+import org.camunda.bpm.engine.impl.persistence.entity.ExternalTaskEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.GroupEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.IdentityLinkEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.IncidentEntity;
@@ -70,6 +71,8 @@ public class EntityTypeComparatorForModifications implements Comparator<Class<?>
 
     typeOrder.put(CaseSentryPartEntity.class, 1);
 
+    typeOrder.put(ExternalTaskEntity.class, 1);
+
     // 2
     typeOrder.put(GroupEntity.class, 2);
     typeOrder.put(UserEntity.class, 2);

File: engine/src/main/java/org/camunda/bpm/engine/impl/dmn/entity/repository/DecisionDefinitionQueryImpl.java
Patch:
@@ -107,7 +107,7 @@ public DecisionDefinitionQuery deploymentId(String deploymentId) {
 
   public DecisionDefinitionQuery decisionDefinitionVersion(Integer decisionDefinitionVersion) {
     ensureNotNull(NotValidException.class, "version", decisionDefinitionVersion);
-    ensurePositive(NotValidException.class, "version", decisionDefinitionVersion);
+    ensurePositive(NotValidException.class, "version", decisionDefinitionVersion.longValue());
     this.version = decisionDefinitionVersion;
     return this;
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/variables/serializer/FileValueSerializerTest.java
Patch:
@@ -26,7 +26,6 @@
 import java.nio.charset.Charset;
 import java.util.Scanner;
 
-import org.camunda.bpm.engine.exception.NullValueException;
 import org.camunda.bpm.engine.impl.core.variable.type.FileValueTypeImpl;
 import org.camunda.bpm.engine.impl.core.variable.value.UntypedValueImpl;
 import org.camunda.bpm.engine.impl.persistence.entity.ByteArrayEntity;
@@ -251,7 +250,7 @@ public void testWriteFilenameAndEncodingValue() {
     assertThat(valueFields.getTextValue2(), is(SEPARATOR + encoding));
   }
 
-  @Test(expected = NullValueException.class)
+  @Test(expected = IllegalArgumentException.class)
   public void testSerializeFileValueWithoutName() {
     Variables.fileValue((String) null).file("abc".getBytes()).create();
   }

File: typed-value/src/main/java/org/camunda/bpm/engine/impl/core/variable/type/AbstractValueTypeImpl.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.camunda.bpm.engine.impl.core.variable.type;
 
-import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.variable.type.ValueType;
 import org.camunda.bpm.engine.variable.value.TypedValue;
 
@@ -34,6 +33,7 @@ public String getName() {
     return name;
   }
 
+  @Override
   public String toString() {
     return name;
   }
@@ -54,8 +54,8 @@ public TypedValue convertFromTypedValue(TypedValue typedValue) {
     throw unsupportedConversion(typedValue.getType());
   }
 
-  protected ProcessEngineException unsupportedConversion(ValueType typeToConvertTo) {
-    return new ProcessEngineException("The type " + getName() + " supports no conversion from type: " + typeToConvertTo.getName());
+  protected IllegalArgumentException unsupportedConversion(ValueType typeToConvertTo) {
+    return new IllegalArgumentException("The type " + getName() + " supports no conversion from type: " + typeToConvertTo.getName());
   }
 
 }

File: typed-value/src/main/java/org/camunda/bpm/engine/impl/core/variable/value/ObjectValueImpl.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.camunda.bpm.engine.impl.core.variable.value;
 
-import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.variable.type.SerializableValueType;
 import org.camunda.bpm.engine.variable.type.ValueType;
 import org.camunda.bpm.engine.variable.value.ObjectValue;
@@ -78,6 +77,7 @@ public boolean isDeserialized() {
     return isDeserialized;
   }
 
+  @Override
   public Object getValue() {
     if(isDeserialized) {
       return super.getValue();
@@ -94,7 +94,7 @@ public <T> T getValue(Class<T> type) {
       return (T) value;
     }
     else {
-      throw new ProcessEngineException("Value '"+value+"' is not of type '"+type+"'.");
+      throw new IllegalArgumentException("Value '"+value+"' is not of type '"+type+"'.");
     }
   }
 
@@ -109,6 +109,7 @@ public Class<?> getObjectType() {
     }
   }
 
+  @Override
   public SerializableValueType getType() {
     return (SerializableValueType) super.getType();
   }

File: typed-value/src/test/java/org/camunda/bpm/engine/test/variables/FileValueTypeImplTest.java
Patch:
@@ -28,7 +28,6 @@
 import java.util.Map;
 import java.util.Scanner;
 
-import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.impl.core.variable.type.FileValueTypeImpl;
 import org.camunda.bpm.engine.variable.Variables;
 import org.camunda.bpm.engine.variable.value.FileValue;
@@ -75,7 +74,7 @@ public void canNotConvertFromAnyValue() {
     assertThat(type.canConvertFromTypedValue(null), is(false));
   }
 
-  @Test(expected = ProcessEngineException.class)
+  @Test(expected = IllegalArgumentException.class)
   public void convertingThrowsException() {
     type.convertFromTypedValue(Variables.untypedNullValue());
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSession.java
Patch:
@@ -638,7 +638,8 @@ private void executeSchemaResource(String operation, String component, String re
 
         line = readNextTrimmedLine(reader);
       }
-      LOG.performedDatabaseOperation(operation, component, resourceName, logLines);
+      LOG.performingDatabaseOperation(operation, component, resourceName);
+      LOG.executingDDL(logLines);
 
       if (exception != null) {
         throw exception;

File: engine-plugins/connect-plugin/src/main/java/org/camunda/connect/plugin/impl/ServiceTaskConnectorActivityBehavior.java
Patch:
@@ -56,10 +56,11 @@ public Void call() throws Exception {
         // execute the request and obtain a response:
         ConnectorResponse response = request.execute();
         applyOutputParameters(execution, response);
+        leave(execution);
         return null;
       }
     });
-    leave(execution);
+
   }
 
   protected void applyInputParameters(ActivityExecution execution, ConnectorRequest<?> request) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/MultiInstanceActivityBehavior.java
Patch:
@@ -73,6 +73,8 @@ else if (nrOfInstances < 0) {
   protected void performInstance(ActivityExecution execution, PvmActivity activity, int loopCounter) {
     setLoopVariable(execution, LOOP_COUNTER, loopCounter);
     evaluateCollectionVariable(execution, loopCounter);
+    execution.setEnded(false);
+    execution.setActive(true);
     execution.executeActivity(activity);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/delegate/ActivityExecution.java
Patch:
@@ -257,4 +257,6 @@ public interface ActivityExecution extends DelegateExecution {
    */
   public Map<ScopeImpl, PvmExecutionImpl> createActivityExecutionMapping();
 
+  void setEnded(boolean b);
+
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/AtomicOperation.java
Patch:
@@ -46,4 +46,5 @@ public interface AtomicOperation extends CoreAtomicOperation<PvmExecutionImpl> {
   AtomicOperation DELETE_CASCADE = PvmAtomicOperation.DELETE_CASCADE;
   AtomicOperation DELETE_CASCADE_FIRE_ACTIVITY_END = PvmAtomicOperation.DELETE_CASCADE_FIRE_ACTIVITY_END;
 
+  boolean isAsyncCapable();
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperation.java
Patch:
@@ -50,5 +50,4 @@ public interface PvmAtomicOperation extends CoreAtomicOperation<PvmExecutionImpl
 
   PvmAtomicOperation DELETE_CASCADE = new PvmAtomicOperationDeleteCascade();
   PvmAtomicOperation DELETE_CASCADE_FIRE_ACTIVITY_END = new PvmAtomicOperationDeleteCascadeFireActivityEnd();
-
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityInitStack.java
Patch:
@@ -61,4 +61,7 @@ public PvmExecutionImpl getStartContextExecution(PvmExecutionImpl execution) {
     return execution;
   }
 
+  public boolean isAsyncCapable() {
+    return false;
+  }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationCancelActivity.java
Patch:
@@ -56,6 +56,7 @@ public void execute(PvmExecutionImpl execution) {
 
     propagatingExecution.setActivity(cancellingActivity);
     propagatingExecution.setActive(true);
+    propagatingExecution.setEnded(false);
     activityCancelled(propagatingExecution);
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/gateway/ExclusiveGatewayTest.java
Patch:
@@ -236,7 +236,7 @@ public void testInvalidProcessDefinition() {
 
   // see CAM-4172
   @Deployment
-  public void FAILING_testLoopWithManyIterations() {
+  public void testLoopWithManyIterations() {
     int numOfIterations = 1000;
 
     // this should not fail

File: engine-dmn/scriptengine-juel/src/test/java/org/camunda/bpm/dmn/juel/JuelScriptEngineTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-public class TestJuelScriptEngine {
+public class JuelScriptEngineTest {
 
   protected static ScriptEngineManager scriptEngineManager;
 
@@ -54,7 +54,7 @@ public void shouldFindScriptEngineByExtension() {
   public void shouldEvaluateConstant() throws ScriptException {
     ScriptEngine scriptEngine = scriptEngineManager.getEngineByName("juel");
     String test = (String) scriptEngine.eval("${'test'}");
-    assertThat(test).isEqualTo(test);
+    assertThat(test).isEqualTo("test");
   }
 
   @Test

File: engine/src/main/java/org/camunda/bpm/engine/RepositoryService.java
Patch:
@@ -103,7 +103,7 @@ public interface RepositoryService {
    * history process instances and jobs.
    *
    * @param deploymentId id of the deployment, cannot be null.
-   * @param cascade if set to true, all process instances (incuding) history are deleted
+   * @param cascade if set to true, all process instances (including) history are deleted
    * @param skipCustomListeners if true, only the built-in {@link ExecutionListener}s
    * are notified with the {@link ExecutionListener#EVENTNAME_END} event.
    *

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/context/DmnDecisionContextImpl.java
Patch:
@@ -300,7 +300,7 @@ protected ScriptEngine getScriptEngineForNameChecked(String expressionLanguage)
       return scriptEngine;
     }
     else {
-      throw LOG.noScriptEngineFoundForLanguage(expressionLanguage);
+      throw LOG.noScriptEngineFoundForLanguage(expressionLanguage, DEFAULT_SCRIPT_LANGUAGE);
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -228,6 +228,7 @@ public ExecutionEntity createExecution(boolean initializeExecutionStartContext)
     createdExecution.setProcessDefinition(getProcessDefinition());
     createdExecution.setProcessInstance(getProcessInstance());
     createdExecution.setActivity(getActivity());
+    createdExecution.setSuspensionState(getSuspensionState());
 
     // make created execution start in same activity instance
     createdExecution.activityInstanceId = activityInstanceId;

File: engine/src/main/java/org/camunda/bpm/engine/impl/ProcessInstantiationBuilderImpl.java
Patch:
@@ -17,12 +17,10 @@
 import java.util.Map;
 
 import org.camunda.bpm.engine.impl.cmd.StartProcessInstanceAtActivitiesCmd;
-import org.camunda.bpm.engine.impl.core.variable.VariableMapImpl;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.interceptor.CommandExecutor;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.runtime.ProcessInstantiationBuilder;
-import org.camunda.bpm.engine.variable.VariableMap;
 
 /**
  * Simply wraps a modification builder because their API is equivalent.

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeployCmd.java
Patch:
@@ -267,7 +267,7 @@ protected Set<String> resumePreviousByProcessDefinitionKey(CommandContext comman
    * @return a set of deployment ids
    */
   protected Set<String> resumePreviousByDeploymentName(CommandContext commandContext, DeploymentEntity deployment) {
-    List<Deployment> previousDeployments = new DeploymentQueryImpl(commandContext).deploymentName(deployment.getName()).list();
+    List<Deployment> previousDeployments = new DeploymentQueryImpl().deploymentName(deployment.getName()).list();
     Set<String> deploymentIds = new HashSet<String>(previousDeployments.size());
     for (Deployment d : previousDeployments) {
       deploymentIds.add(d.getId());

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetActivityInstanceCmd.java
Patch:
@@ -356,7 +356,7 @@ protected List<ExecutionEntity> loadProcessInstance(String processInstanceId, Co
   protected List<ExecutionEntity> loadFromDb(final String processInstanceId, final CommandContext commandContext) {
     List<ExecutionEntity> executions = commandContext.runWithoutAuthorization(new Callable<List<ExecutionEntity>>() {
       public List<ExecutionEntity> call() throws Exception {
-        return (List) new ExecutionQueryImpl(commandContext)
+        return (List) new ExecutionQueryImpl()
           .processInstanceId(processInstanceId)
           .list();
       }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetSubTasksCmd.java
Patch:
@@ -35,7 +35,7 @@ public GetSubTasksCmd(String parentTaskId) {
   }
 
   public List<Task> execute(CommandContext commandContext) {
-    return new TaskQueryImpl(commandContext)
+    return new TaskQueryImpl()
       .taskParentTaskId(parentTaskId)
       .list();
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/identity/db/DbReadOnlyIdentityServiceProvider.java
Patch:
@@ -52,7 +52,7 @@ public UserQuery createUserQuery() {
   }
 
   public UserQueryImpl createUserQuery(CommandContext commandContext) {
-    return new DbUserQueryImpl(commandContext);
+    return new DbUserQueryImpl();
   }
 
   public long findUserCountByQueryCriteria(DbUserQueryImpl query) {
@@ -92,7 +92,7 @@ public GroupQuery createGroupQuery() {
   }
 
   public GroupQuery createGroupQuery(CommandContext commandContext) {
-    return new DbGroupQueryImpl(commandContext);
+    return new DbGroupQueryImpl();
   }
 
   public long findGroupCountByQueryCriteria(DbGroupQueryImpl query) {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/EventSubscriptionQueryTest.java
Patch:
@@ -222,7 +222,7 @@ protected void cleanDb() {
     processEngineConfiguration.getCommandExecutorTxRequired()
     .execute(new Command<Void>() {
       public Void execute(CommandContext commandContext) {
-        final List<EventSubscription> subscriptions = new EventSubscriptionQueryImpl(commandContext).list();
+        final List<EventSubscription> subscriptions = new EventSubscriptionQueryImpl().list();
         for (EventSubscription eventSubscriptionEntity : subscriptions) {
           ((EventSubscriptionEntity) eventSubscriptionEntity).delete();
         }

File: qa/integration-tests-webapps/src/test/java/org/camunda/bpm/cockpit/DashboardIT.java
Patch:
@@ -33,7 +33,7 @@ public void testLogin() throws URISyntaxException {
     WebElement submit = wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("button[type=\"submit\"]")));
     submit.submit();
 
-    wait.until(ExpectedConditions.textToBePresentInElementLocated(By.tagName("h3"), "1 process deployed"));
+    wait.until(ExpectedConditions.textToBePresentInElementLocated(By.tagName("h3"), "1 process definition deployed"));
 
     wait.until(currentURIIs(new URI(appUrl + "/default/#/dashboard")));
   }

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/DmnExpression.java
Patch:
@@ -19,4 +19,6 @@ public interface DmnExpression extends DmnElement {
 
   String getExpressionLanguage();
 
+  DmnItemDefinition getItemDefinition();
+
 }

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/handler/AbstractDmnLiteralExpressionHandler.java
Patch:
@@ -23,11 +23,13 @@
 
 public abstract class AbstractDmnLiteralExpressionHandler<E extends LiteralExpression, I extends DmnExpressionImpl> extends AbstractDmnElementHandler<E, I> {
 
+  @Override
   @SuppressWarnings("unchecked")
   protected I createElement(DmnElementHandlerContext context, E expression) {
     return (I) new DmnExpressionImpl();
   }
 
+  @Override
   protected void initElement(DmnElementHandlerContext context, E expression, I dmnExpression) {
     super.initElement(context, expression, dmnExpression);
     initExpressionLanguage(context, expression, dmnExpression);

File: engine-plugins/identity-ldap/src/test/java/org/camunda/bpm/identity/impl/ldap/LdapUserQueryTest.java
Patch:
@@ -146,7 +146,7 @@ public void testFilterByGroupIdAndEmail() {
   public void testFilterByGroupIdAndEmailLike() {
     List<User> result = identityService.createUserQuery()
         .memberOfGroup("development")
-        .userEmail("*@camunda.org")
+        .userEmailLike("*@camunda.org")
         .list();
     assertEquals(3, result.size());
   }

File: engine/src/main/java/org/camunda/bpm/engine/HistoryService.java
Patch:
@@ -137,13 +137,13 @@ public interface HistoryService {
    * Deletes historic decision instances of a decision definition. All historic
    * decision inputs and outputs are deleted as well.
    *
-   * @param decisionDefinitionKey
-   *          the key of the decision definition
+   * @param decisionDefinitionId
+   *          the id of the decision definition
    *
    * @throws AuthorizationException
    *          If the user has no {@link Permissions#DELETE_HISTORY} permission on {@link Resources#DECISION_DEFINITION}.
    */
-  void deleteHistoricDecisionInstance(String decisionDefinitionKey);
+  void deleteHistoricDecisionInstance(String decisionDefinitionId);
 
   /**
    * creates a native query to search for {@link HistoricProcessInstance}s via SQL

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoryServiceImpl.java
Patch:
@@ -107,8 +107,8 @@ public void deleteHistoricCaseInstance(String caseInstanceId) {
     commandExecutor.execute(new DeleteHistoricCaseInstanceCmd(caseInstanceId));
   }
 
-  public void deleteHistoricDecisionInstance(String decisionDefinitionKey) {
-    commandExecutor.execute(new DeleteHistoricDecisionInstanceCmd(decisionDefinitionKey));
+  public void deleteHistoricDecisionInstance(String decisionDefinitionId) {
+    commandExecutor.execute(new DeleteHistoricDecisionInstanceCmd(decisionDefinitionId));
   }
 
   public NativeHistoricProcessInstanceQuery createNativeHistoricProcessInstanceQuery() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/DeploymentManager.java
Patch:
@@ -190,7 +190,7 @@ protected void deleteDecisionDeployment(String deploymentId, boolean cascade) {
       if(cascade) {
         // delete historic decision instances
         for(DecisionDefinition decisionDefinition : decisionDefinitions) {
-          getHistoricDecisionInstanceManager().deleteHistoricDecisionInstancesByDecisionDefinitionKey(decisionDefinition.getKey());
+          getHistoricDecisionInstanceManager().deleteHistoricDecisionInstancesByDecisionDefinitionId(decisionDefinition.getId());
         }
       }
 

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/DmnClause.java
Patch:
@@ -31,4 +31,5 @@ public interface DmnClause extends DmnElement {
 
   boolean isOutputClause();
 
+  DmnItemDefinition getOutputDefinition();
 }

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/DmnEngineConfiguration.java
Patch:
@@ -22,6 +22,7 @@
 import org.camunda.bpm.dmn.engine.transform.DmnTransformFactory;
 import org.camunda.bpm.dmn.engine.transform.DmnTransformListener;
 import org.camunda.bpm.dmn.engine.transform.DmnTransformer;
+import org.camunda.bpm.dmn.engine.type.DataTypeTransformerFactory;
 import org.camunda.bpm.model.dmn.HitPolicy;
 
 public interface DmnEngineConfiguration {
@@ -50,7 +51,8 @@ public interface DmnEngineConfiguration {
 
   ScriptEngineResolver getScriptEngineResolver();
 
-  DmnEngine buildEngine();
+  DataTypeTransformerFactory getDataTypeTransformerFactory();
 
+  DmnEngine buildEngine();
 
 }

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/handler/DmnElementHandlerContext.java
Patch:
@@ -15,6 +15,7 @@
 
 import org.camunda.bpm.dmn.engine.DmnDecision;
 import org.camunda.bpm.dmn.engine.DmnDecisionModel;
+import org.camunda.bpm.dmn.engine.type.DataTypeTransformerFactory;
 import org.camunda.bpm.model.dmn.DmnModelInstance;
 
 public interface DmnElementHandlerContext {
@@ -27,4 +28,6 @@ public interface DmnElementHandlerContext {
 
   DmnDecision getDecision();
 
+  DataTypeTransformerFactory getDataTypeTransformerFactory();
+
 }

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/impl/handler/DmnClauseHandler.java
Patch:
@@ -19,10 +19,12 @@
 
 public class DmnClauseHandler extends AbstractDmnElementHandler<Clause, DmnClauseImpl> {
 
+  @Override
   protected DmnClauseImpl createElement(DmnElementHandlerContext context, Clause clause) {
     return new DmnClauseImpl();
   }
 
+  @Override
   protected void initElement(DmnElementHandlerContext context, Clause clause, DmnClauseImpl dmnClause) {
     super.initElement(context, clause, dmnClause);
     initIsOrdered(context, clause, dmnClause);

File: engine-dmn/engine/src/main/java/org/camunda/bpm/dmn/engine/transform/DmnTransformer.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.List;
 
 import org.camunda.bpm.dmn.engine.handler.DmnElementHandlerRegistry;
+import org.camunda.bpm.dmn.engine.type.DataTypeTransformerFactory;
 
 public interface DmnTransformer {
 
@@ -25,6 +26,8 @@ public interface DmnTransformer {
 
   List<DmnTransformListener> getTransformListeners();
 
+  DataTypeTransformerFactory getDataTypeTransformerFactory();
+
   DmnTransform createTransform();
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/event/HistoricDecisionInstanceManager.java
Patch:
@@ -114,11 +114,11 @@ public List<HistoricDecisionInstance> findHistoricDecisionInstancesByQueryCriter
         decisionInstancesById.put(decisionInstance.getId(), (HistoricDecisionInstanceEntity) decisionInstance);
       }
 
-      if (query.isIncludeInput()) {
+      if (!decisionInstances.isEmpty() && query.isIncludeInput()) {
         appendHistoricDecisionInputInstances(decisionInstancesById, query);
       }
 
-      if(query.isIncludeOutputs()) {
+      if(!decisionInstances.isEmpty() && query.isIncludeOutputs()) {
         appendHistoricDecisionOutputInstances(decisionInstancesById, query);
       }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -86,7 +86,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     constants.put("constant.for.update", "for update");
     dbSpecificConstants.put(H2, constants);
 
-	  //mysql specific
+    //mysql specific
     databaseSpecificLimitBeforeStatements.put(MYSQL, "");
     databaseSpecificLimitAfterStatements.put(MYSQL, "LIMIT #{maxResults} OFFSET #{firstResult}");
     databaseSpecificInnerLimitAfterStatements.put(MYSQL, databaseSpecificLimitAfterStatements.get(MYSQL));
@@ -199,6 +199,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement(DB2, "selectHistoricCaseInstanceByNativeQuery", "selectHistoricCaseInstanceByNativeQuery_mssql_or_db2");
     addDatabaseSpecificStatement(DB2, "selectHistoricTaskInstanceByNativeQuery", "selectHistoricTaskInstanceByNativeQuery_mssql_or_db2");
     addDatabaseSpecificStatement(DB2, "selectTaskByNativeQuery", "selectTaskByNativeQuery_mssql_or_db2");
+    addDatabaseSpecificStatement(DB2, "selectHistoricDecisionInstancesByNativeQuery", "selectHistoricDecisionInstancesByNativeQuery_mssql_or_db2");
 
     constants = new HashMap<String, String>();
     constants.put("constant.event", "'event'");
@@ -232,6 +233,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement(MSSQL, "lockDeploymentLockProperty", "lockDeploymentLockProperty_mssql");
     addDatabaseSpecificStatement(MSSQL, "selectEventSubscriptionsByNameAndExecution", "selectEventSubscriptionsByNameAndExecution_mssql");
     addDatabaseSpecificStatement(MSSQL, "selectEventSubscriptionsByExecutionAndType", "selectEventSubscriptionsByExecutionAndType_mssql");
+    addDatabaseSpecificStatement(MSSQL, "selectHistoricDecisionInstancesByNativeQuery", "selectHistoricDecisionInstancesByNativeQuery_mssql_or_db2");
 
     constants = new HashMap<String, String>();
     constants.put("constant.event", "'event'");

File: engine/src/main/java/org/camunda/bpm/engine/EntityTypes.java
Patch:
@@ -33,5 +33,6 @@ public class EntityTypes {
   public static final String JOB_DEFINITION = "JobDefinition";
   public static final String VARIABLE = "Variable";
   public static final String DEPLOYMENT = "Deployment";
+  public static final String DECISION_DEFINITION = "DecisionDefinition";
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/authorization/Resources.java
Patch:
@@ -31,7 +31,8 @@ public enum Resources implements Resource {
   PROCESS_DEFINITION(EntityTypes.PROCESS_DEFINITION, 6),
   TASK(EntityTypes.TASK, 7),
   PROCESS_INSTANCE(EntityTypes.PROCESS_INSTANCE, 8),
-  DEPLOYMENT(EntityTypes.DEPLOYMENT, 9);
+  DEPLOYMENT(EntityTypes.DEPLOYMENT, 9),
+  DECISION_DEFINITION(EntityTypes.DECISION_DEFINITION, 10);
 
   String name;
   int id;

File: engine/src/main/java/org/camunda/bpm/engine/impl/dmn/configuration/ProcessEngineDmnEngineConfiguration.java
Patch:
@@ -16,13 +16,15 @@
 import org.camunda.bpm.dmn.engine.ScriptEngineResolver;
 import org.camunda.bpm.dmn.engine.impl.DmnEngineConfigurationImpl;
 import org.camunda.bpm.engine.impl.dmn.handler.ProcessEngineDmnElementHandlerRegistry;
+import org.camunda.bpm.engine.impl.history.parser.HistoryDecisionTableListener;
 import org.camunda.bpm.engine.impl.metrics.dmn.MetricsDecisionTableListener;
 
 public class ProcessEngineDmnEngineConfiguration extends DmnEngineConfigurationImpl {
 
-  public ProcessEngineDmnEngineConfiguration(ScriptEngineResolver scriptEngineResolver) {
+  public ProcessEngineDmnEngineConfiguration(ScriptEngineResolver scriptEngineResolver, HistoryDecisionTableListener historyDecisionTableListener) {
     this.scriptEngineResolver = scriptEngineResolver;
     this.customPostDmnDecisionTableListeners.add(new MetricsDecisionTableListener());
+  	this.customPostDmnDecisionTableListeners.add(historyDecisionTableListener);
   }
 
   protected void initElementHandlerRegistry() {

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/scriptengine/DmnScriptEngineMetricsTest.java
Patch:
@@ -44,7 +44,7 @@ public void testExecutedDecisionElements() {
 
     // clear metrics
     metricCollector.clearExecutedDecisionElements();
-    processEngineConfiguration.getMetricsRegistry().getMeterByName(Metrics.EXECTUED_DECISION_ELEMENTS).getAndClear();
+    processEngineConfiguration.getMetricsRegistry().getMeterByName(Metrics.EXECUTED_DECISION_ELEMENTS).getAndClear();
 
     VariableMap variables = Variables.createVariables().putValue("status", "bronze").putValue("sum", 100);
     ProcessInstance pi = runtimeService.startProcessInstanceByKey("testProcess", variables);

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/FlowNodeActivityBehavior.java
Patch:
@@ -55,5 +55,4 @@ public void signal(ActivityExecution execution, String signalName, Object signal
 
     throw LOG.unsupportedSignalException(execution.getActivity().getId());
   }
-
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityInstanceEnd.java
Patch:
@@ -15,8 +15,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import org.camunda.bpm.engine.impl.bpmn.behavior.CompensationEndEventActivityBehavior;
-import org.camunda.bpm.engine.impl.bpmn.behavior.IntermediateThrowCompensationEventActivityBehavior;
 import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.delegate.CompositeActivityBehavior;
 import org.camunda.bpm.engine.impl.pvm.runtime.CompensationBehavior;

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationDeleteCascade.java
Patch:
@@ -13,8 +13,6 @@
 
 package org.camunda.bpm.engine.impl.pvm.runtime.operation;
 
-import java.util.List;
-
 import org.camunda.bpm.engine.impl.pvm.runtime.PvmExecutionImpl;
 
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationTransitionDestroyScope.java
Patch:
@@ -19,7 +19,6 @@
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.PvmTransition;
-import org.camunda.bpm.engine.impl.pvm.process.TransitionImpl;
 import org.camunda.bpm.engine.impl.pvm.runtime.LegacyBehavior;
 import org.camunda.bpm.engine.impl.pvm.runtime.OutgoingExecution;
 import org.camunda.bpm.engine.impl.pvm.runtime.PvmExecutionImpl;

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricActivityInstanceStateTest.java
Patch:
@@ -315,8 +315,8 @@ public void testEventSubprocessSignalCancel() {
     assertIsCanceledActivityInstances(allInstances, "userTask", 1);
     assertNonCompletingActivityInstance(allInstances, "userTask");
 
-    assertIsCanceledActivityInstances(allInstances, "signalEnd", 1);
-    assertNonCompletingActivityInstance(allInstances, "signalEnd");
+//    assertIsCanceledActivityInstances(allInstances, "signalEnd", 1);
+//    assertNonCompletingActivityInstance(allInstances, "signalEnd");
 
     assertNonCanceledActivityInstance(allInstances, "eventSubprocessStart");
     assertNonCompletingActivityInstance(allInstances, "eventSubprocessStart");

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -161,6 +161,7 @@
 import org.camunda.bpm.engine.impl.jobexecutor.JobExecutor;
 import org.camunda.bpm.engine.impl.jobexecutor.JobHandler;
 import org.camunda.bpm.engine.impl.jobexecutor.JobPriorityProvider;
+import org.camunda.bpm.engine.impl.jobexecutor.NotifyAcquisitionRejectedJobsHandler;
 import org.camunda.bpm.engine.impl.jobexecutor.ProcessEventJobHandler;
 import org.camunda.bpm.engine.impl.jobexecutor.RejectedJobsHandler;
 import org.camunda.bpm.engine.impl.jobexecutor.TimerActivateJobDefinitionHandler;
@@ -1147,7 +1148,7 @@ protected void initJobExecutor() {
       if(customRejectedJobsHandler != null) {
         jobExecutor.setRejectedJobsHandler(customRejectedJobsHandler);
       } else {
-        jobExecutor.setRejectedJobsHandler(new CallerRunsRejectedJobsHandler());
+        jobExecutor.setRejectedJobsHandler(new NotifyAcquisitionRejectedJobsHandler());
       }
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/util/CollectionUtil.java
Patch:
@@ -59,5 +59,4 @@ public static <S, T> void addToMapOfLists(Map<S, List<T>> map, S key, T value) {
     }
     list.add(value);
   }
-
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/ManagementServiceTest.java
Patch:
@@ -31,6 +31,7 @@
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.interceptor.CommandExecutor;
+import org.camunda.bpm.engine.impl.jobexecutor.JobExecutor;
 import org.camunda.bpm.engine.impl.persistence.entity.HistoricIncidentEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.HistoricIncidentManager;
 import org.camunda.bpm.engine.impl.persistence.entity.JobEntity;
@@ -446,7 +447,8 @@ public void testDeleteJobThatWasAlreadyAcquired() {
 
     // Acquire job by running the acquire command manually
     ProcessEngineImpl processEngineImpl = (ProcessEngineImpl) processEngine;
-    AcquireJobsCmd acquireJobsCmd = new AcquireJobsCmd(processEngineImpl.getProcessEngineConfiguration().getJobExecutor());
+    JobExecutor jobExecutor = processEngineImpl.getProcessEngineConfiguration().getJobExecutor();
+    AcquireJobsCmd acquireJobsCmd = new AcquireJobsCmd(jobExecutor);
     CommandExecutor commandExecutor = processEngineImpl.getProcessEngineConfiguration().getCommandExecutorTxRequired();
     commandExecutor.execute(acquireJobsCmd);
 

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/JobDefinitionFunctionalTest.java
Patch:
@@ -316,8 +316,10 @@ public void testParallelSuspensionAndPriorityUpdate() {
   }
 
   protected AcquiredJobs acquireJobs() {
+    JobExecutor jobExecutor = processEngineConfiguration.getJobExecutor();
+
     return processEngineConfiguration.getCommandExecutorTxRequired()
-      .execute(new AcquireJobsCmd(processEngineConfiguration.getJobExecutor()));
+      .execute(new AcquireJobsCmd(jobExecutor));
   }
 
   Thread testThread = Thread.currentThread();

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/JobExecutorAcquireJobsByPriorityTest.java
Patch:
@@ -9,6 +9,8 @@
 
 public class JobExecutorAcquireJobsByPriorityTest extends AbstractJobExecutorAcquireJobsTest {
 
+  protected boolean defaultAcquireByPriority = false;
+
   protected boolean isJobExecutorAcquireByPriority() {
     return true;
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/JobExecutorCmdHappyTest.java
Patch:
@@ -92,7 +92,7 @@ public String execute(CommandContext commandContext) {
 
     ClockUtil.setCurrentTime(new Date(SOME_TIME + (20 * SECOND)));
 
-    acquiredJobs = commandExecutor.execute(new AcquireJobsCmd(jobExecutor));
+    acquiredJobs = commandExecutor.execute(new AcquireJobsCmd(jobExecutor, jobExecutor.getMaxJobsPerAcquisition()));
     jobIdsList = acquiredJobs.getJobIdBatches();
     assertEquals(1, jobIdsList.size());
 

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/JobExecutorTest.java
Patch:
@@ -105,7 +105,7 @@ public void testAcquiredJobs() {
     List<String> secondBatch = new ArrayList<String>(Arrays.asList("d", "e", "f"));
     List<String> thirdBatch = new ArrayList<String>(Arrays.asList("g"));
 
-    AcquiredJobs acquiredJobs = new AcquiredJobs();
+    AcquiredJobs acquiredJobs = new AcquiredJobs(0);
     acquiredJobs.addJobIdBatch(firstBatch);
     acquiredJobs.addJobIdBatch(secondBatch);
     acquiredJobs.addJobIdBatch(thirdBatch);

File: engine-plugins/identity-ldap/src/test/java/org/camunda/bpm/identity/impl/ldap/LdapUserQueryTest.java
Patch:
@@ -76,7 +76,7 @@ public void testFilterByLastname() {
     User user = identityService.createUserQuery().userLastName("The Crouch").singleResult();
     assertNotNull(user);
 
-    user = identityService.createUserQuery().userFirstNameLike("non-existing").singleResult();
+    user = identityService.createUserQuery().userLastName("non-existing").singleResult();
     assertNull(user);
   }
 

File: engine-plugins/identity-ldap/src/test/java/org/camunda/bpm/identity/impl/ldap/LdapUserQueryTest.java
Patch:
@@ -76,7 +76,7 @@ public void testFilterByLastname() {
     User user = identityService.createUserQuery().userLastName("The Crouch").singleResult();
     assertNotNull(user);
 
-    user = identityService.createUserQuery().userFirstNameLike("non-existing").singleResult();
+    user = identityService.createUserQuery().userLastName("non-existing").singleResult();
     assertNull(user);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/CallableElementActivityBehavior.java
Patch:
@@ -13,7 +13,6 @@
 package org.camunda.bpm.engine.impl.bpmn.behavior;
 
 import org.camunda.bpm.engine.delegate.VariableScope;
-import org.camunda.bpm.engine.impl.core.model.BaseCallableElement;
 import org.camunda.bpm.engine.impl.core.model.BaseCallableElement.CallableElementBinding;
 import org.camunda.bpm.engine.impl.core.model.CallableElement;
 import org.camunda.bpm.engine.impl.pvm.delegate.ActivityExecution;
@@ -28,13 +27,14 @@ public abstract class CallableElementActivityBehavior extends AbstractBpmnActivi
 
   protected CallableElement callableElement;
 
+  @Override
   public void execute(ActivityExecution execution) throws Exception {
     VariableMap variables = getInputVariables(execution);
     String businessKey = getBusinessKey(execution);
     startInstance(execution, variables, businessKey);
   }
 
-  public void completing(VariableScope execution, VariableScope subInstance) throws Exception {
+  public void passOutputVariablesFromSubprocess(VariableScope execution, VariableScope subInstance) {
     // only data. no control flow available on this execution.
     VariableMap variabes = getOutputVariables(subInstance);
     execution.setVariables(variabes);

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/ThrowEscalationEventActivityBehavior.java
Patch:
@@ -24,6 +24,7 @@
 import org.camunda.bpm.engine.impl.tree.ActivityExecutionHierarchyWalker;
 import org.camunda.bpm.engine.impl.tree.ActivityExecutionMappingCollector;
 import org.camunda.bpm.engine.impl.tree.ActivityExecutionTuple;
+import org.camunda.bpm.engine.impl.tree.OutputVariablesPropagator;
 import org.camunda.bpm.engine.impl.tree.TreeVisitor;
 import org.camunda.bpm.engine.impl.tree.TreeWalker.WalkCondition;
 
@@ -51,6 +52,7 @@ public void execute(ActivityExecution execution) throws Exception {
     ActivityExecutionHierarchyWalker walker = new ActivityExecutionHierarchyWalker(execution);
     walker.addScopePreVisitor(escalationEventDefinitionFinder);
     walker.addExecutionPreVisitor(activityExecutionMappingCollector);
+    walker.addExecutionPreVisitor(new OutputVariablesPropagator());
 
     walker.walkUntil(new WalkCondition<ActivityExecutionTuple>() {
 
@@ -65,7 +67,7 @@ public boolean isFulfilled(ActivityExecutionTuple element) {
 
       PvmActivity escalationHandler = escalationEventDefinition.getEscalationHandler();
       PvmScope escalationScope = getScopeForEscalation(escalationEventDefinition);
-      ActivityExecution escalationExecution = activityExecutionMappingCollector.getExecutionForScope(escalationScope);
+      final ActivityExecution escalationExecution = activityExecutionMappingCollector.getExecutionForScope(escalationScope);
 
       escalationExecution.executeActivity(escalationHandler);
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/helper/BpmnProperties.java
Patch:
@@ -13,6 +13,7 @@
 
 package org.camunda.bpm.engine.impl.bpmn.helper;
 
+import org.camunda.bpm.engine.impl.bpmn.parser.ErrorEventDefinition;
 import org.camunda.bpm.engine.impl.bpmn.parser.EscalationEventDefinition;
 import org.camunda.bpm.engine.impl.core.model.Properties;
 import org.camunda.bpm.engine.impl.core.model.PropertyKey;
@@ -32,4 +33,6 @@ public class BpmnProperties {
 
   public static final PropertyListKey<EscalationEventDefinition> ESCALATION_EVENT_DEFINITIONS = new PropertyListKey<EscalationEventDefinition>("escalationEventDefinitions");
 
+  public static final PropertyListKey<ErrorEventDefinition> ERROR_EVENT_DEFINITIONS = new PropertyListKey<ErrorEventDefinition>("errorEventDefinitions");
+
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/operation/AbstractAtomicOperationCaseExecutionComplete.java
Patch:
@@ -74,7 +74,7 @@ protected void postTransitionNotification(CmmnExecution execution) {
         SubProcessActivityBehavior behavior = (SubProcessActivityBehavior) getActivityBehavior(superExecution);
 
         try {
-          behavior.completing(superExecution, execution);
+          behavior.passOutputVariablesFromSubprocess(superExecution, execution);
         } catch (RuntimeException e) {
           LOG.completingSubCaseError(execution, e);
           throw e;

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationProcessEnd.java
Patch:
@@ -58,7 +58,7 @@ protected void eventNotificationsCompleted(PvmExecutionImpl execution) {
       PvmActivity activity = superExecution.getActivity();
       subProcessActivityBehavior = (SubProcessActivityBehavior) activity.getActivityBehavior();
       try {
-        subProcessActivityBehavior.completing(superExecution, execution);
+        subProcessActivityBehavior.passOutputVariablesFromSubprocess(superExecution, execution);
       } catch (RuntimeException e) {
           log.log(Level.SEVERE, "Error while completing sub process of execution " + execution, e);
           throw e;

File: engine/src/test/java/org/camunda/bpm/engine/test/pvm/activities/ReusableSubProcess.java
Patch:
@@ -42,7 +42,7 @@ public void execute(ActivityExecution execution) throws Exception {
     subProcessInstance.start();
   }
 
-  public void completing(VariableScope execution, VariableScope subProcessInstance) throws Exception {
+  public void passOutputVariablesFromSubprocess(VariableScope execution, VariableScope subProcessInstance) {
     // TODO extract information from the subprocess and inject it into the superprocess
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/model/CoreModelElement.java
Patch:
@@ -62,7 +62,7 @@ public String getName() {
   }
 
   /**
-   * @see Properties#set(PropertyKey)
+   * @see Properties#set(PropertyKey, Object)
    */
   public void setProperty(String name, Object value) {
     properties.set(new PropertyKey<Object>(name), value);

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/AbstractPersistenceSession.java
Patch:
@@ -84,7 +84,7 @@ public void dbSchemaCreate() {
     if (isEngineTablePresent()) {
       String dbVersion = getDbVersion();
       if (!ProcessEngine.VERSION.equals(dbVersion)) {
-        throw new WrongDbException(ProcessEngine.VERSION, dbVersion);
+        throw LOG.wrongDbVersionException(ProcessEngine.VERSION, dbVersion);
       }
     } else {
       dbSchemaCreateEngine();

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/initialization/ProcessEngineInitializationTest.java
Patch:
@@ -31,7 +31,7 @@ public void testNoTables() {
       fail("expected exception");
     } catch (Exception e) {
       // OK
-      assertTextPresent("no activiti tables in db", e.getMessage());
+      assertTextPresent("ENGINE-03057 There are no activiti tables in the database.Hint: Set <property name=\"databaseSchemaUpdate\" to value=\"true\" or value=\"create-drop\" (use create-drop for testing only!) in bean processEngineConfiguration in camunda.cfg.xml for automatic schema creation", e.getMessage());
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/FoxFailedJobParseListener.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.camunda.bpm.engine.impl.bpmn.parser;
 
+import org.camunda.bpm.engine.impl.core.model.PropertyKey;
 import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 import org.camunda.bpm.engine.impl.pvm.process.ScopeImpl;
 import org.camunda.bpm.engine.impl.util.xml.Element;
@@ -35,7 +36,7 @@ public class FoxFailedJobParseListener extends AbstractBpmnParseListener {
   @Deprecated
   public static final Namespace FOX_ENGINE_NS = new Namespace("http://www.camunda.com/fox");
 
-  public static final String FOX_FAILED_JOB_CONFIGURATION = "FOX_FAILED_JOB_CONFIGURATION";
+  public static final PropertyKey<String> FOX_FAILED_JOB_CONFIGURATION = new PropertyKey<String>("FOX_FAILED_JOB_CONFIGURATION");
 
   @Override
   public void parseStartEvent(Element startEventElement, ScopeImpl scope, ActivityImpl startEventActivity) {
@@ -156,7 +157,7 @@ protected void setFailedJobRetryTimeCycleValue(Element element, ActivityImpl act
       }
       if (failedJobRetryTimeCycleElement != null) {
         String failedJobRetryTimeCycleValue = failedJobRetryTimeCycleElement.getText();
-        activity.setProperty(FOX_FAILED_JOB_CONFIGURATION, failedJobRetryTimeCycleValue);
+        activity.getProperties().set(FOX_FAILED_JOB_CONFIGURATION, failedJobRetryTimeCycleValue);
       }
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/FoxJobRetryCmd.java
Patch:
@@ -135,7 +135,7 @@ protected ExecutionEntity fetchExecutionEntity(String executionId) {
   }
 
   protected String getFailedJobRetryTimeCycle(ActivityImpl activity) {
-    return (String) activity.getProperty(FoxFailedJobParseListener.FOX_FAILED_JOB_CONFIGURATION);
+    return activity.getProperties().get(FoxFailedJobParseListener.FOX_FAILED_JOB_CONFIGURATION);
   }
 
   protected DurationHelper getDurationHelper(String failedJobRetryTimeCycle) throws Exception {

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/parse/FoxFailedJobParseListenerTest.java
Patch:
@@ -175,15 +175,15 @@ public void testSignalEventWithFailedJobRetryTimeCycle() {
   }
 
   private void checkFoxFailedJobConfig(ActivityImpl activity) {
-    assertTrue(activity.getProperties().containsKey(FoxFailedJobParseListener.FOX_FAILED_JOB_CONFIGURATION));
+    assertTrue(activity.getProperties().contains(FoxFailedJobParseListener.FOX_FAILED_JOB_CONFIGURATION));
 
     Object value = activity.getProperties().get(FoxFailedJobParseListener.FOX_FAILED_JOB_CONFIGURATION);
     assertNotNull(value);
     assertEquals("R5/PT5M", value);
   }
 
   private void checkNotContainingFoxFailedJobConfig(ActivityImpl activity) {
-    assertFalse(activity.getProperties().containsKey(FoxFailedJobParseListener.FOX_FAILED_JOB_CONFIGURATION));
+    assertFalse(activity.getProperties().contains(FoxFailedJobParseListener.FOX_FAILED_JOB_CONFIGURATION));
   }
 
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/examples/bpmn/executionlistener/RecorderExecutionListener.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.ExecutionListener;
+import org.camunda.bpm.engine.impl.core.model.PropertyKey;
 import org.camunda.bpm.engine.impl.el.FixedValue;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 
@@ -98,7 +99,7 @@ public void notify(DelegateExecution execution) throws Exception {
 
     String activityName = null;
     if (executionCasted.getActivity() != null) {
-      activityName = (String)executionCasted.getActivity().getProperties().get("name");
+      activityName = executionCasted.getActivity().getProperties().get(new PropertyKey<String>("name"));
     }
 
     recordedEvents.add( new RecordedEvent(

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/HistoryLevelActivity.java
Patch:
@@ -23,6 +23,7 @@
 import static org.camunda.bpm.engine.impl.history.event.HistoryEventTypes.CASE_INSTANCE_UPDATE;
 import static org.camunda.bpm.engine.impl.history.event.HistoryEventTypes.PROCESS_INSTANCE_END;
 import static org.camunda.bpm.engine.impl.history.event.HistoryEventTypes.PROCESS_INSTANCE_START;
+import static org.camunda.bpm.engine.impl.history.event.HistoryEventTypes.PROCESS_INSTANCE_UPDATE;
 import static org.camunda.bpm.engine.impl.history.event.HistoryEventTypes.TASK_INSTANCE_COMPLETE;
 import static org.camunda.bpm.engine.impl.history.event.HistoryEventTypes.TASK_INSTANCE_CREATE;
 import static org.camunda.bpm.engine.impl.history.event.HistoryEventTypes.TASK_INSTANCE_DELETE;
@@ -47,6 +48,7 @@ public String getName() {
 
   public boolean isHistoryEventProduced(HistoryEventType eventType, Object entity) {
     return PROCESS_INSTANCE_START == eventType
+        || PROCESS_INSTANCE_UPDATE == eventType
         || PROCESS_INSTANCE_END == eventType
 
         || TASK_INSTANCE_CREATE == eventType

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/event/HistoryEventTypes.java
Patch:
@@ -16,12 +16,15 @@
  * The set of built-in history event types.
  *
  * @author Daniel Meyer
+ * @author Ingo Richtsmeier
  * @since 7.2
  */
 public enum HistoryEventTypes implements HistoryEventType {
 
   /** fired when a process instance is started. */
   PROCESS_INSTANCE_START("process-instance", "start"),
+  /** fired when a process instance is updated */
+  PROCESS_INSTANCE_UPDATE("process-instance-update", "update"),
   /** fired when a process instance is ended. */
   PROCESS_INSTANCE_END("process-instance", "end"),
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/AbstractBpmnActivityBehavior.java
Patch:
@@ -70,7 +70,7 @@ protected void leave(ActivityExecution execution) {
   }
 
   protected boolean isCompensationEventSubprocess(ActivityImpl activity) {
-    return activity.isCompensationHandler() && activity.isSubProcessScope();
+    return activity.isCompensationHandler() && activity.isSubProcessScope() && activity.isTriggeredByEvent();
   }
 
   protected void createCompensateEventSubscription(ActivityExecution execution, ActivityImpl compensationHandler) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/helper/CompensationUtil.java
Patch:
@@ -141,9 +141,9 @@ public static void createEventScopeExecution(ExecutionEntity execution) {
   }
 
   protected static boolean hasCompensationEventSubprocess(ActivityImpl activity) {
-    PvmActivity compensationHandler = activity.findCompensationHandler();
+    ActivityImpl compensationHandler = activity.findCompensationHandler();
 
-    return compensationHandler != null && compensationHandler.isSubProcessScope();
+    return compensationHandler != null && compensationHandler.isSubProcessScope() && compensationHandler.isTriggeredByEvent();
   }
 
   /**

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/compensate/CompensateEventTest.java
Patch:
@@ -825,7 +825,7 @@ public void testCompensationEventSubprocessConsumeCompensationEvent() {
   }
 
   @Deployment
-  public void FAILING_testSubprocessCompensationHandler() {
+  public void testSubprocessCompensationHandler() {
 
     // given a process instance
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("subProcessCompensationHandler");
@@ -855,7 +855,7 @@ public void FAILING_testSubprocessCompensationHandler() {
   }
 
   @Deployment(resources = "org/camunda/bpm/engine/test/bpmn/event/compensate/CompensateEventTest.testSubprocessCompensationHandler.bpmn20.xml")
-  public void FAILING_testSubprocessCompensationHandlerActivityInstanceTree() {
+  public void testSubprocessCompensationHandlerActivityInstanceTree() {
 
     // given a process instance
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("subProcessCompensationHandler");
@@ -875,7 +875,7 @@ public void FAILING_testSubprocessCompensationHandlerActivityInstanceTree() {
   }
 
   @Deployment(resources = "org/camunda/bpm/engine/test/bpmn/event/compensate/CompensateEventTest.testSubprocessCompensationHandler.bpmn20.xml")
-  public void FAILING_testSubprocessCompensationHandlerDeleteProcessInstance() {
+  public void testSubprocessCompensationHandlerDeleteProcessInstance() {
 
     // given a process instance in compensation
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("subProcessCompensationHandler");

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParseLogger.java
Patch:
@@ -24,7 +24,7 @@ public class BpmnParseLogger extends ProcessEngineLogger {
   // LOGGING
 
   public void logElementParsing(String elementType, String elementId) {
-    logInfo("001", "Parsing element from type '{}' with id '{}'", elementType, elementId);
+    logDebug("001", "Parsing element from type '{}' with id '{}'", elementType, elementId);
   }
 
   public void logIgnoringNonExecutableProcess(String elementId) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/CancelEndEventActivityBehavior.java
Patch:
@@ -38,8 +38,9 @@ public void execute(ActivityExecution execution) throws Exception {
     EnsureUtil
     .ensureNotNull("Could not find cancel boundary event for cancel end event " + execution.getActivity(), "cancelBoundaryEvent", cancelBoundaryEvent);
 
-    ExecutionEntity executionEntity = (ExecutionEntity) execution;
-    List<CompensateEventSubscriptionEntity> compensateEventSubscriptions = executionEntity.getCompensateEventSubscriptions();
+    List<CompensateEventSubscriptionEntity> compensateEventSubscriptions =
+        CompensationUtil.collectCompensateEventSubscriptionsForScope(execution);
+
     if(compensateEventSubscriptions.isEmpty()) {
       leave(execution);
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/helper/CompensationUtil.java
Patch:
@@ -63,6 +63,7 @@ public static void throwCompensationEvent(List<CompensateEventSubscriptionEntity
 
         // move the compensating execution under this execution:
         compensatingExecution.setParent((PvmExecutionImpl) execution);
+        ((ExecutionEntity) execution).getExecutions().add(compensatingExecution);
         compensatingExecution.setEventScope(false);
       } else {
         compensatingExecution = (ExecutionEntity) execution.createExecution();

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -1410,6 +1410,7 @@ public ActivityImpl parseIntermediateThrowEvent(Element intermediateEventElement
       CompensateEventDefinition compensateEventDefinition = parseThrowCompensateEventDefinition(compensateEventDefinitionElement, scopeElement);
       activityBehavior = new IntermediateThrowCompensationEventActivityBehavior(compensateEventDefinition);
       nestedActivityImpl.setProperty(PROPERTYNAME_THROWS_COMPENSATION, true);
+      nestedActivityImpl.setScope(true);
     } else if (messageEventDefinitionElement != null) {
       if (isServiceTaskLike(messageEventDefinitionElement)) {
 
@@ -2644,6 +2645,7 @@ public void parseEndEvents(Element parentElement, ScopeImpl scope) {
           activity.setActivityBehavior(new CancelEndEventActivityBehavior());
           activity.setActivityStartBehavior(ActivityStartBehavior.INTERRUPT_FLOW_SCOPE);
           activity.setProperty(PROPERTYNAME_THROWS_COMPENSATION, true);
+          activity.setScope(true);
         }
       } else if (terminateEventDefinition != null) {
         activity.setProperty("type", "terminateEndEvent");
@@ -2669,6 +2671,7 @@ public void parseEndEvents(Element parentElement, ScopeImpl scope) {
         CompensateEventDefinition compensateEventDefinition = parseThrowCompensateEventDefinition(compensateEventDefinitionElement, scope);
         activity.setActivityBehavior(new CompensationEndEventActivityBehavior(compensateEventDefinition));
         activity.setProperty(PROPERTYNAME_THROWS_COMPENSATION, true);
+        activity.setScope(true);
       } else { // default: none end event
         activity.setProperty("type", "noneEndEvent");
         activity.setActivityBehavior(new NoneEndEventActivityBehavior());

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -24,7 +24,6 @@
 import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricCaseInstanceTest.java
Patch:
@@ -148,6 +148,8 @@ public void testHistoricCaseInstanceDates() {
 
     assertCount(0, historicQuery().closedBefore(created));
     assertCount(1, historicQuery().closedBefore(afterClose));
+
+    assertCount(1, historicQuery().closedBefore(afterClose).closedAfter(created));
   }
 
   @Deployment(resources={"org/camunda/bpm/engine/test/api/cmmn/emptyStageCase.cmmn"})

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractJobRestServiceInteractionTest.java
Patch:
@@ -81,6 +81,7 @@ public void setUpRuntimeData() {
       .exceptionMessage(MockProvider.EXAMPLE_JOB_NO_EXCEPTION_MESSAGE)
       .dueDate(new Date())
       .priority(MockProvider.EXAMPLE_JOB_PRIORITY)
+      .jobDefinitionId(MockProvider.EXAMPLE_JOB_DEFINITION_ID)
       .build();
 
     when(mockQuery.singleResult()).thenReturn(mockedJob);
@@ -173,6 +174,7 @@ public void testSimpleJobGet() {
     .body("executionId", equalTo(MockProvider.EXAMPLE_EXECUTION_ID))
     .body("exceptionMessage", equalTo(MockProvider.EXAMPLE_JOB_NO_EXCEPTION_MESSAGE))
     .body("priority", equalTo(MockProvider.EXAMPLE_JOB_PRIORITY))
+    .body("jobDefinitionId", equalTo(MockProvider.EXAMPLE_JOB_DEFINITION_ID))
     .when().get(SINGLE_JOB_RESOURCE_URL);
 
     InOrder inOrder = inOrder(mockQuery);

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -974,6 +974,7 @@ public static Job createMockJob() {
       .dueDate(DateTimeUtil.parseDate(EXAMPLE_DUE_DATE))
       .suspended(EXAMPLE_JOB_IS_SUSPENDED)
       .priority(EXAMPLE_JOB_PRIORITY)
+      .jobDefinitionId(EXAMPLE_JOB_DEFINITION_ID)
       .build();
     return mock;
   }

File: engine/src/main/java/org/camunda/bpm/container/impl/deployment/scanning/ProcessApplicationScanningUtil.java
Patch:
@@ -96,7 +96,7 @@ public static boolean isDiagram(String fileName, String modelFileName) {
     // decision resources
     boolean isDmnDiagram = checkDiagram(fileName, modelFileName, DmnDeployer.DIAGRAM_SUFFIXES, DmnDeployer.DMN_RESOURCE_SUFFIXES);
 
-    return isBpmnDiagram || isCmmnDiagram;
+    return isBpmnDiagram || isCmmnDiagram || isDmnDiagram;
   }
 
   /**

File: engine/src/main/java/org/camunda/bpm/engine/impl/dmn/cmd/GetDeploymentDecisionDefinitionCmd.java
Patch:
@@ -22,6 +22,9 @@
 import org.camunda.bpm.engine.impl.persistence.deploy.DeploymentCache;
 import org.camunda.bpm.engine.repository.DecisionDefinition;
 
+/**
+ * Gives access to a deployed decision definition instance.
+ */
 public class GetDeploymentDecisionDefinitionCmd implements Command<DecisionDefinition>, Serializable {
 
   private static final long serialVersionUID = 1L;

File: engine/src/main/java/org/camunda/bpm/engine/impl/dmn/entity/repository/DecisionDefinitionQueryProperty.java
Patch:
@@ -15,6 +15,9 @@
 import org.camunda.bpm.engine.impl.QueryPropertyImpl;
 import org.camunda.bpm.engine.query.QueryProperty;
 
+/**
+ * Properties to sort decision definition queries by
+ */
 public interface DecisionDefinitionQueryProperty {
 
   public static final QueryProperty DECISION_DEFINITION_ID = new QueryPropertyImpl("ID_");

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/DeploymentManager.java
Patch:
@@ -140,7 +140,7 @@ public void deleteDeployment(String deploymentId, boolean cascade, boolean skipC
 
     deleteCaseDeployment(deploymentId, cascade);
 
-    deleteDecisionDeployment(deploymentId, cascade);
+    deleteDecisionDeployment(deploymentId);
 
     getResourceManager().deleteResourcesByDeploymentId(deploymentId);
 
@@ -181,7 +181,7 @@ protected void deleteCaseDeployment(String deploymentId, boolean cascade) {
     }
   }
 
-  protected void deleteDecisionDeployment(String deploymentId, boolean cascade) {
+  protected void deleteDecisionDeployment(String deploymentId) {
     ProcessEngineConfigurationImpl processEngineConfiguration = Context.getProcessEngineConfiguration();
     if (processEngineConfiguration.isDmnEnabled()) {
       DecisionDefinitionManager decisionDefinitionManager = getDecisionDefinitionManager();

File: engine/src/main/java/org/camunda/bpm/engine/repository/DecisionDefinition.java
Patch:
@@ -12,6 +12,9 @@
  */
 package org.camunda.bpm.engine.repository;
 
+/**
+ * Definition of a decision resource
+ */
 public interface DecisionDefinition extends ResourceDefinition {
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/repository/ResourceDefinition.java
Patch:
@@ -15,6 +15,9 @@
 
 import org.camunda.bpm.engine.RepositoryService;
 
+/**
+ * Definition of a resource which was deployed
+ */
 public interface ResourceDefinition {
 
   /** unique identifier */

File: engine/src/main/java/org/camunda/bpm/engine/repository/ResourceDefinitionEntity.java
Patch:
@@ -15,6 +15,9 @@
 
 import org.camunda.bpm.engine.RepositoryService;
 
+/**
+ * Entity of a deployed resource definition
+ */
 public interface ResourceDefinitionEntity extends ResourceDefinition {
 
   void setId(String id);

File: engine/src/main/java/org/camunda/bpm/engine/history/UserOperationLogEntry.java
Patch:
@@ -14,6 +14,7 @@
 package org.camunda.bpm.engine.history;
 
 import java.util.Date;
+
 import org.camunda.bpm.engine.EntityTypes;
 
 
@@ -79,7 +80,6 @@ public interface UserOperationLogEntry {
   public static String OPERATION_TYPE_RESOLVE = "Resolve";
   public static String OPERATION_TYPE_SET_OWNER = "SetOwner";
   public static String OPERATION_TYPE_SET_PRIORITY = "SetPriority";
-  public static String OPERATION_TYPE_SET_OVERRIDING_PRIORITY = "SetPriority";
   public static String OPERATION_TYPE_UPDATE = "Update";
   public static String OPERATION_TYPE_ACTIVATE = "Activate";
   public static String OPERATION_TYPE_SUSPEND = "Suspend";

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SetJobDefinitionPriorityCmd.java
Patch:
@@ -91,7 +91,7 @@ protected void createJobDefinitionOperationLogEntry(UserOperationLogContext opLo
         JOB_DEFINITION_OVERRIDING_PRIORITY, previousPriority, jobDefinition.getOverridingJobPriority());
 
     UserOperationLogContextEntry entry = UserOperationLogContextEntryBuilder
-        .entry(UserOperationLogEntry.OPERATION_TYPE_SET_OVERRIDING_PRIORITY, EntityTypes.JOB_DEFINITION)
+        .entry(UserOperationLogEntry.OPERATION_TYPE_SET_PRIORITY, EntityTypes.JOB_DEFINITION)
         .inContextOf(jobDefinition)
         .propertyChanges(propertyChange)
         .create();

File: engine/src/test/java/org/camunda/bpm/engine/test/history/OperationLogJobDefinitionTest.java
Patch:
@@ -53,7 +53,7 @@ public void testSetOverridingPriority() {
     assertEquals(EntityTypes.JOB_DEFINITION, userOperationLogEntry.getEntityType());
     assertEquals(jobDefinition.getId(), userOperationLogEntry.getJobDefinitionId());
 
-    assertEquals(UserOperationLogEntry.OPERATION_TYPE_SET_OVERRIDING_PRIORITY,
+    assertEquals(UserOperationLogEntry.OPERATION_TYPE_SET_PRIORITY,
         userOperationLogEntry.getOperationType());
 
     assertEquals("overridingPriority", userOperationLogEntry.getProperty());
@@ -87,7 +87,7 @@ public void testOverwriteOverridingPriority() {
     assertEquals(EntityTypes.JOB_DEFINITION, userOperationLogEntry.getEntityType());
     assertEquals(jobDefinition.getId(), userOperationLogEntry.getJobDefinitionId());
 
-    assertEquals(UserOperationLogEntry.OPERATION_TYPE_SET_OVERRIDING_PRIORITY,
+    assertEquals(UserOperationLogEntry.OPERATION_TYPE_SET_PRIORITY,
         userOperationLogEntry.getOperationType());
 
     assertEquals("overridingPriority", userOperationLogEntry.getProperty());
@@ -116,7 +116,7 @@ public void testClearOverridingPriority() {
     assertEquals(EntityTypes.JOB_DEFINITION, userOperationLogEntry.getEntityType());
     assertEquals(jobDefinition.getId(), userOperationLogEntry.getJobDefinitionId());
 
-    assertEquals(UserOperationLogEntry.OPERATION_TYPE_SET_OVERRIDING_PRIORITY,
+    assertEquals(UserOperationLogEntry.OPERATION_TYPE_SET_PRIORITY,
         userOperationLogEntry.getOperationType());
 
     assertEquals("overridingPriority", userOperationLogEntry.getProperty());

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/AbstractBpmnActivityBehavior.java
Patch:
@@ -64,7 +64,7 @@ protected void leave(ActivityExecution execution) {
     ActivityImpl compensationHandler = getCompensationHandler(currentActivity);
 
     // subscription for compensation event subprocess is already created
-    if(compensationHandler != null && !isCompensationStartEvent(compensationHandler)) {
+    if(compensationHandler != null && !isCompensationEventSubprocess(compensationHandler)) {
       createCompensateEventSubscription(execution, compensationHandler);
     }
     super.leave(execution);
@@ -80,8 +80,8 @@ protected ActivityImpl getCompensationHandler(PvmActivity activity) {
     }
   }
 
-  protected boolean isCompensationStartEvent(ActivityImpl compensationHandler) {
-    return "compensationStartEvent".equals(compensationHandler.getProperty("type"));
+  protected boolean isCompensationEventSubprocess(ActivityImpl compensationHandler) {
+    return compensationHandler.isSubProcessScope();
   }
 
   protected void createCompensateEventSubscription(ActivityExecution execution, ActivityImpl compensationHandler) {

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/compensate/CompensationEventParseInvalidProcessTest.java
Patch:
@@ -50,7 +50,8 @@ public static Collection<Object[]> data() {
         { "CompensationEventParseInvalidProcessTest.multipleCompensationCatchEventsCompensationAttributeMissingFails.bpmn20.xml", "compensation boundary catch must be connected to element with isForCompensation=true" },
         { "CompensationEventParseInvalidProcessTest.multipleCompensationCatchEventsFails.bpmn20.xml", "multiple boundary events with compensateEventDefinition not supported on same activity"},
         { "CompensationEventParseInvalidProcessTest.multipleCompensationEventSubProcesses.bpmn20.xml", "multiple event subprocesses with compensation start event are not supported on the same scope" },
-        { "CompensationEventParseInvalidProcessTest.compensationEventSubProcessesAtProcessLevel.bpmn20.xml", "event subprocess with compensation start event is only supported for embedded subprocess" }
+        { "CompensationEventParseInvalidProcessTest.compensationEventSubProcessesAtProcessLevel.bpmn20.xml", "event subprocess with compensation start event is only supported for embedded subprocess" },
+        { "CompensationEventParseInvalidProcessTest.compensationEventSubprocessAndBoundaryEvent.bpmn20.xml", "compensation boundary event and event subprocess with compensation start event are not supported on the same scope" }
     });
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/parse/BpmnParseTest.java
Patch:
@@ -388,11 +388,11 @@ public void testParseCompensationStartEvent() {
     assertEquals("compensationStartEvent", compensationStartEvent.getProperty("type"));
     assertEquals(EventSubProcessStartEventActivityBehavior.class, compensationStartEvent.getActivityBehavior().getClass());
 
-    ScopeImpl compensationEventSubProcess = compensationStartEvent.getFlowScope();
+    ActivityImpl compensationEventSubProcess = (ActivityImpl) compensationStartEvent.getFlowScope();
     assertEquals(Boolean.TRUE, compensationEventSubProcess.getProperty(BpmnParse.PROPERTYNAME_IS_FOR_COMPENSATION));
 
     ScopeImpl subprocess = compensationEventSubProcess.getFlowScope();
-    assertEquals(compensationStartEvent.getActivityId(), subprocess.getProperty(BpmnParse.PROPERTYNAME_COMPENSATION_HANDLER_ID));
+    assertEquals(compensationEventSubProcess.getActivityId(), subprocess.getProperty(BpmnParse.PROPERTYNAME_COMPENSATION_HANDLER_ID));
   }
 
   @Deployment

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/util/ModelUtil.java
Patch:
@@ -14,7 +14,6 @@
 
 import org.camunda.bpm.model.xml.Model;
 import org.camunda.bpm.model.xml.ModelException;
-import org.camunda.bpm.model.xml.impl.ModelImpl;
 import org.camunda.bpm.model.xml.impl.ModelInstanceImpl;
 import org.camunda.bpm.model.xml.impl.instance.ModelElementInstanceImpl;
 import org.camunda.bpm.model.xml.impl.type.ModelElementTypeImpl;
@@ -43,7 +42,7 @@ public static ModelElementInstance getModelElement(DomElement domElement, ModelI
     ModelElementInstance modelElement = domElement.getModelElementInstance();
     if(modelElement == null) {
 
-      ModelImpl model = (ModelImpl) modelInstance.getModel();
+      Model model = modelInstance.getModel();
       String namespaceUri = model.getActualNamespace(domElement.getNamespaceURI());
 
       String localName = domElement.getLocalName();

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/util/XmlQName.java
Patch:
@@ -32,6 +32,7 @@ public class XmlQName {
     KNOWN_PREFIXES = new HashMap<String, String>();
     KNOWN_PREFIXES.put("http://www.camunda.com/fox", "fox");
     KNOWN_PREFIXES.put("http://activiti.org/bpmn", "camunda");
+    KNOWN_PREFIXES.put("http://camunda.org/schema/1.0/bpmn", "camunda");
     KNOWN_PREFIXES.put("http://www.omg.org/spec/BPMN/20100524/MODEL", "bpmn2");
     KNOWN_PREFIXES.put("http://www.omg.org/spec/BPMN/20100524/DI", "bpmndi");
     KNOWN_PREFIXES.put("http://www.omg.org/spec/DD/20100524/DI", "di");

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/impl/AbstractVariablesResource.java
Patch:
@@ -192,7 +192,8 @@ protected void setFileValueVariable(String variableKey, FormPart dataPart) {
     }
     MimeType mimeType = null;
     try {
-      mimeType = new MimeType(dataPart.getContentType());
+      String contentType = dataPart.getContentType() == null ? MediaType.APPLICATION_OCTET_STREAM : dataPart.getContentType();
+      mimeType = new MimeType(contentType);
     } catch (MimeTypeParseException e) {
       throw new RestException(Status.BAD_REQUEST, "Invalid mime type given");
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/ProcessEngineImpl.java
Patch:
@@ -64,9 +64,8 @@ public class ProcessEngineImpl implements ProcessEngine {
   protected TransactionContextFactory transactionContextFactory;
   protected ProcessEngineConfigurationImpl processEngineConfiguration;
 
-
-
   public ProcessEngineImpl(ProcessEngineConfigurationImpl processEngineConfiguration) {
+
     this.processEngineConfiguration = processEngineConfiguration;
     this.name = processEngineConfiguration.getProcessEngineName();
     this.repositoryService = processEngineConfiguration.getRepositoryService();

File: engine/src/test/java/org/camunda/bpm/engine/test/db/DatabaseHistoryPropertyTest.java
Patch:
@@ -18,6 +18,7 @@
  */
 public class DatabaseHistoryPropertyTest {
 
+
   private static ProcessEngineImpl processEngineImpl;
 
   // make sure schema is dropped

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/Bpmn.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.camunda.bpm.model.bpmn;
 
+import static org.camunda.bpm.model.bpmn.impl.BpmnModelConstants.ACTIVITI_NS;
 import static org.camunda.bpm.model.bpmn.impl.BpmnModelConstants.BPMN20_NS;
 import static org.camunda.bpm.model.bpmn.impl.BpmnModelConstants.CAMUNDA_NS;
 
@@ -73,7 +74,6 @@
 import org.camunda.bpm.model.bpmn.impl.instance.di.StyleImpl;
 import org.camunda.bpm.model.bpmn.impl.instance.di.WaypointImpl;
 import org.camunda.bpm.model.bpmn.instance.Definitions;
-import org.camunda.bpm.model.bpmn.instance.PotentialOwner;
 import org.camunda.bpm.model.bpmn.instance.Process;
 import org.camunda.bpm.model.xml.Model;
 import org.camunda.bpm.model.xml.ModelBuilder;
@@ -213,6 +213,7 @@ public static ProcessBuilder createExecutableProcess(String processId) {
    */
   protected Bpmn() {
     bpmnModelBuilder = ModelBuilder.createInstance("BPMN Model");
+    bpmnModelBuilder.alternativeNamespace(ACTIVITI_NS, CAMUNDA_NS);
     doRegisterTypes(bpmnModelBuilder);
     bpmnModel = bpmnModelBuilder.build();
   }

File: engine-plugins/identity-ldap/src/test/java/org/camunda/bpm/identity/impl/ldap/posix/LdapPosixTestEnvironment.java
Patch:
@@ -13,7 +13,6 @@
 package org.camunda.bpm.identity.impl.ldap.posix;
 
 import org.apache.commons.lang.StringUtils;
-import org.apache.directory.server.core.DefaultDirectoryService;
 import org.apache.directory.server.core.entry.ServerEntry;
 import org.apache.directory.server.core.entry.ServerModification;
 import org.apache.directory.shared.ldap.entry.EntryAttribute;
@@ -33,7 +32,7 @@
 public class LdapPosixTestEnvironment extends LdapTestEnvironment {
 
   public LdapPosixTestEnvironment() {
-    super("ldap.posix.properties");
+    super();
   }
 
   public void init() throws Exception {

File: engine/src/main/java/org/camunda/bpm/engine/impl/event/SignalEventHandler.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import org.camunda.bpm.engine.impl.bpmn.behavior.IntermediateThrowSignalEventActivityBehavior;
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.persistence.deploy.DeploymentCache;

File: engine/src/main/java/org/camunda/bpm/engine/ProcessEngineConfiguration.java
Patch:
@@ -136,7 +136,7 @@ public abstract class ProcessEngineConfiguration {
   protected boolean jobExecutorAcquireByDueDate = false;
   protected boolean jobExecutorAcquireByPriority = false;
 
-  protected boolean producePrioritizedJobs = false;
+  protected boolean producePrioritizedJobs = true;
 
   /**
    * The flag will be used inside the method "JobManager#send()". It will be used to decide whether to notify the

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java
Patch:
@@ -506,7 +506,7 @@ public void checkUpdateProcessInstance(JobEntity job) {
 
     // ... OR ...
 
-    // - READ_INSTANCE on PROCESS_DEFINITION
+    // - UPDATE_INSTANCE on PROCESS_DEFINITION
     PermissionCheck secondCheck = new PermissionCheck();
     secondCheck.setPermission(UPDATE_INSTANCE);
     secondCheck.setResource(PROCESS_DEFINITION);

File: engine/src/main/java/org/camunda/bpm/engine/ProcessEngineConfiguration.java
Patch:
@@ -150,7 +150,7 @@ public abstract class ProcessEngineConfiguration {
   protected String mailServerPassword; // means no authentication for mail server
   protected int mailServerPort = 25;
   protected boolean useTLS = false;
-  protected String mailServerDefaultFrom = "activiti@localhost";
+  protected String mailServerDefaultFrom = "camunda@localhost";
 
   protected String databaseType;
   protected String databaseSchemaUpdate = DB_SCHEMA_UPDATE_FALSE;

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/async/AsyncEmailTaskTest.java
Patch:
@@ -41,7 +41,7 @@ public void testSimpleTextMail() throws Exception {
     assertEquals(1, messages.size());
 
     WiserMessage message = messages.get(0);
-    EmailServiceTaskTest.assertEmailSend(message, false, "Hello Kermit!", "This a text only e-mail.", "activiti@localhost",
+    EmailServiceTaskTest.assertEmailSend(message, false, "Hello Kermit!", "This a text only e-mail.", "camunda@localhost",
             Arrays.asList("kermit@camunda.org"), null);
     assertProcessEnded(procId);
   }
@@ -60,7 +60,7 @@ public void testSimpleTextMailSendTask() throws Exception {
     assertEquals(1, messages.size());
 
     WiserMessage message = messages.get(0);
-    EmailServiceTaskTest.assertEmailSend(message, false, "Hello Kermit!", "This a text only e-mail.", "activiti@localhost",
+    EmailServiceTaskTest.assertEmailSend(message, false, "Hello Kermit!", "This a text only e-mail.", "camunda@localhost",
             Arrays.asList("kermit@camunda.org"), null);
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/mail/EmailSendTaskTest.java
Patch:
@@ -45,7 +45,7 @@ public void testSimpleTextMail() throws Exception {
     assertEquals(1, messages.size());
 
     WiserMessage message = messages.get(0);
-    assertEmailSend(message, false, "Hello Kermit!", "This a text only e-mail.", "activiti@localhost",
+    assertEmailSend(message, false, "Hello Kermit!", "This a text only e-mail.", "camunda@localhost",
             Arrays.asList("kermit@camunda.org"), null);
   }
 
@@ -98,7 +98,7 @@ public void testCcAndBcc() throws Exception {
     runtimeService.startProcessInstanceByKey("ccAndBcc");
 
     List<WiserMessage> messages = wiser.getMessages();
-    assertEmailSend(messages.get(0), false, "Hello world", "This is the content", "activiti@localhost",
+    assertEmailSend(messages.get(0), false, "Hello world", "This is the content", "camunda@localhost",
             Arrays.asList("kermit@camunda.org"), Arrays.asList("fozzie@camunda.org"));
 
     // Bcc is not stored in the header (obviously)
@@ -112,7 +112,7 @@ public void testHtmlMail() throws Exception {
 
     List<WiserMessage> messages = wiser.getMessages();
     assertEquals(1, messages.size());
-    assertEmailSend(messages.get(0), true, "Test", "Mr. <b>Kermit</b>", "activiti@localhost", Arrays.asList("kermit@camunda.org"), null);
+    assertEmailSend(messages.get(0), true, "Test", "Mr. <b>Kermit</b>", "camunda@localhost", Arrays.asList("kermit@camunda.org"), null);
   }
 
   // Helper

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/mail/EmailServiceTaskTest.java
Patch:
@@ -44,7 +44,7 @@ public void testSimpleTextMail() throws Exception {
     assertEquals(1, messages.size());
 
     WiserMessage message = messages.get(0);
-    assertEmailSend(message, false, "Hello Kermit!", "This a text only e-mail.", "activiti@localhost",
+    assertEmailSend(message, false, "Hello Kermit!", "This a text only e-mail.", "camunda@localhost",
             Arrays.asList("kermit@camunda.org"), null);
     assertProcessEnded(procId);
   }
@@ -98,7 +98,7 @@ public void testCcAndBcc() throws Exception {
     runtimeService.startProcessInstanceByKey("ccAndBcc");
 
     List<WiserMessage> messages = wiser.getMessages();
-    assertEmailSend(messages.get(0), false, "Hello world", "This is the content", "activiti@localhost",
+    assertEmailSend(messages.get(0), false, "Hello world", "This is the content", "camunda@localhost",
             Arrays.asList("kermit@camunda.org"), Arrays.asList("fozzie@camunda.org"));
 
     // Bcc is not stored in the header (obviously)
@@ -112,7 +112,7 @@ public void testHtmlMail() throws Exception {
 
     List<WiserMessage> messages = wiser.getMessages();
     assertEquals(1, messages.size());
-    assertEmailSend(messages.get(0), true, "Test", "Mr. <b>Kermit</b>", "activiti@localhost", Arrays.asList("kermit@camunda.org"), null);
+    assertEmailSend(messages.get(0), true, "Test", "Mr. <b>Kermit</b>", "camunda@localhost", Arrays.asList("kermit@camunda.org"), null);
   }
 
   // Helper

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/PvmExecutionImpl.java
Patch:
@@ -693,6 +693,7 @@ public void executeActivity(PvmActivity activity) {
 
     default:
       setActivity(activityImpl);
+      setActivityInstanceId(null);
       performOperation(PvmAtomicOperation.ACTIVITY_START_CREATE_SCOPE);
       break;
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityStartCancelScope.java
Patch:
@@ -32,6 +32,7 @@ public String getCanonicalName() {
   }
 
   protected void activityCancelled(PvmExecutionImpl execution) {
+    execution.setActivityInstanceId(null);
     execution.performOperation(ACTIVITY_START_CREATE_SCOPE);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityStartConcurrent.java
Patch:
@@ -23,6 +23,7 @@
 public class PvmAtomicOperationActivityStartConcurrent extends PvmAtomicOperationCreateConcurrentExecution {
 
   protected void concurrentExecutionCreated(PvmExecutionImpl propagatingExecution) {
+    propagatingExecution.setActivityInstanceId(null);
     propagatingExecution.performOperation(ACTIVITY_START_CREATE_SCOPE);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityStartInterruptEventScope.java
Patch:
@@ -26,6 +26,7 @@ public String getCanonicalName() {
   }
 
   protected void scopeInterrupted(PvmExecutionImpl execution) {
+    execution.setActivityInstanceId(null);
     execution.performOperation(ACTIVITY_START_CREATE_SCOPE);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/el/ElValueProvider.java
Patch:
@@ -16,6 +16,7 @@
 import org.camunda.bpm.engine.delegate.VariableScope;
 import org.camunda.bpm.engine.impl.core.variable.mapping.IoParameter;
 import org.camunda.bpm.engine.impl.core.variable.mapping.value.ParameterValueProvider;
+import org.camunda.commons.utils.EnsureUtil;
 
 /**
  * Makes it possible to use expression in {@link IoParameter} mappings.
@@ -32,6 +33,7 @@ public ElValueProvider(Expression expression) {
   }
 
   public Object getValue(VariableScope variableScope) {
+    EnsureUtil.ensureNotNull("variableScope", variableScope);
     return expression.getValue(variableScope);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/JobPriorityProvider.java
Patch:
@@ -21,8 +21,6 @@
  */
 public interface JobPriorityProvider {
 
-  public static int DEFAULT_PRIORITY = 0;
-
   /**
    *
    * @param execution may be null when the job is not created in the context of a

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -32,8 +32,8 @@
 import org.camunda.bpm.engine.impl.incident.FailedJobIncidentHandler;
 import org.camunda.bpm.engine.impl.incident.IncidentHandler;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
+import org.camunda.bpm.engine.impl.jobexecutor.DefaultJobPriorityProvider;
 import org.camunda.bpm.engine.impl.jobexecutor.JobHandler;
-import org.camunda.bpm.engine.impl.jobexecutor.JobPriorityProvider;
 import org.camunda.bpm.engine.impl.pvm.process.ProcessDefinitionImpl;
 import org.camunda.bpm.engine.management.JobDefinition;
 import org.camunda.bpm.engine.runtime.Incident;
@@ -97,7 +97,7 @@ public abstract class JobEntity implements Serializable, Job, DbEntity, HasDbRev
 
   protected String jobDefinitionId;
 
-  protected int priority = JobPriorityProvider.DEFAULT_PRIORITY;
+  protected int priority = DefaultJobPriorityProvider.DEFAULT_PRIORITY;
 
   // runtime state /////////////////////////////
   protected boolean executing = false;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spin/PaSpinSupportTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.List;
 
 import org.camunda.bpm.engine.impl.cfg.ProcessEnginePlugin;
-import org.camunda.bpm.engine.impl.util.IoUtil;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.variable.Variables;
 import org.camunda.bpm.engine.variable.value.ObjectValue;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/JobPrioritizationTest.java
Patch:
@@ -64,7 +64,6 @@ public static WebArchive createDeployment() {
       .addAsResource("org/camunda/bpm/integrationtest/jobexecutor/JobPrioritizationTest.serviceTask.bpmn20.xml")
       .addAsResource("org/camunda/bpm/integrationtest/jobexecutor/JobPrioritizationTest.userTask.bpmn20.xml")
       .addAsResource("org/camunda/bpm/integrationtest/jobexecutor/JobPrioritizationTest.intermediateMessage.bpmn20.xml");
-
   }
 
   @After

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/JobPriorityProvider.java
Patch:
@@ -29,5 +29,5 @@ public interface JobPriorityProvider {
    *   running process instance (e.g. a timer start event)
    * @param jobDeclaration
    */
-  int determinePriority(ExecutionEntity execution, JobDeclaration<?> jobDeclaration);
+  int determinePriority(ExecutionEntity execution, JobDeclaration<?, ?> jobDeclaration);
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobDefinitionEntity.java
Patch:
@@ -59,7 +59,7 @@ public class JobDefinitionEntity implements JobDefinition, HasDbRevision, DbEnti
   public JobDefinitionEntity() {
   }
 
-  public JobDefinitionEntity(JobDeclaration<?> jobDeclaration) {
+  public JobDefinitionEntity(JobDeclaration<?, ?> jobDeclaration) {
     this.activityId = jobDeclaration.getActivityId();
     this.jobConfiguration = jobDeclaration.getJobConfiguration();
     this.jobType = jobDeclaration.getJobHandlerType();

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/instance/FlowNodeTest.java
Patch:
@@ -46,7 +46,7 @@ public Collection<AttributeAssumption> getAttributesAssumptions() {
       new AttributeAssumption(CAMUNDA_NS, "asyncAfter", false, false, false),
       new AttributeAssumption(CAMUNDA_NS, "asyncBefore", false, false, false),
       new AttributeAssumption(CAMUNDA_NS, "exclusive", false, false, true),
-      new AttributeAssumption(CAMUNDA_NS, "jobPriority", false, false, null)
+      new AttributeAssumption(CAMUNDA_NS, "jobPriority")
     );
   }
 

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/instance/ProcessTest.java
Patch:
@@ -55,7 +55,7 @@ public Collection<AttributeAssumption> getAttributesAssumptions() {
       /** camunda extensions */
       new AttributeAssumption(CAMUNDA_NS, "candidateStarterGroups"),
       new AttributeAssumption(CAMUNDA_NS, "candidateStarterUsers"),
-      new AttributeAssumption(CAMUNDA_NS, "jobPriority", false, false, null)
+      new AttributeAssumption(CAMUNDA_NS, "jobPriority")
     );
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/FoxDeleteProcessInstanceCmd.java
Patch:
@@ -33,7 +33,7 @@ public Void execute(CommandContext commandContext) {
 
     commandContext
       .getTaskManager()
-      .deleteTasksByProcessInstanceId(processInstanceId, deleteReason, false);
+      .deleteTasksByProcessInstanceId(processInstanceId, deleteReason, false, false);
 
     for (PvmExecutionImpl currentExecution : this.collectExecutionToDelete(execution)) {
       currentExecution.deleteCascade2(deleteReason);

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/parser/HistoryParseListener.java
Patch:
@@ -121,8 +121,8 @@ public void parseUserTask(Element userTaskElement, ScopeImpl scope, ActivityImpl
 
     if (historyLevel.isHistoryEventProduced(HistoryEventTypes.TASK_INSTANCE_CREATE, null)) {
       TaskDefinition taskDefinition = ((UserTaskActivityBehavior) activity.getActivityBehavior()).getTaskDefinition();
-      taskDefinition.addTaskListener(TaskListener.EVENTNAME_ASSIGNMENT, USER_TASK_ASSIGNMENT_HANDLER);
-      taskDefinition.addTaskListener(TaskListener.EVENTNAME_CREATE, USER_TASK_ID_HANDLER);
+      taskDefinition.addBuiltInTaskListener(TaskListener.EVENTNAME_ASSIGNMENT, USER_TASK_ASSIGNMENT_HANDLER);
+      taskDefinition.addBuiltInTaskListener(TaskListener.EVENTNAME_CREATE, USER_TASK_ID_HANDLER);
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -930,7 +930,7 @@ private void removeTasks(String reason) {
           this.getReplacedBy().addTask(task);
         }
       } else {
-        task.delete(reason, false);
+        task.delete(reason, false, skipCustomListeners);
       }
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionManager.java
Patch:
@@ -71,7 +71,7 @@ public void deleteProcessInstance(String processInstanceId, String deleteReason,
       throw new BadUserRequestException("No process instance found for id '" + processInstanceId + "'");
     }
 
-    getTaskManager().deleteTasksByProcessInstanceId(processInstanceId, deleteReason, cascade);
+    getTaskManager().deleteTasksByProcessInstanceId(processInstanceId, deleteReason, cascade, skipCustomListeners);
 
     // delete the execution BEFORE we delete the history, otherwise we will produce orphan HistoricVariableInstance instances
     execution.deleteCascade(deleteReason, skipCustomListeners);

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/ProcessInstanceModificationTest.java
Patch:
@@ -1095,7 +1095,7 @@ public void testSkipListenerInvocation() {
   }
 
   @Deployment(resources = TASK_LISTENER_PROCESS)
-  public void FAILING_testSkipTaskListenerInvocation() {
+  public void testSkipTaskListenerInvocation() {
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(
         "taskListenerProcess",
         Collections.<String, Object>singletonMap("listener", new RecorderTaskListener()));

File: engine/src/test/java/org/camunda/bpm/engine/test/task/TaskDecoratorTest.java
Patch:
@@ -427,7 +427,7 @@ public DeleteTaskCommand(TaskEntity task) {
     public Void execute(CommandContext commandContext) {
       commandContext
         .getTaskManager()
-        .deleteTask(task, null, true);
+        .deleteTask(task, null, true, false);
 
       return null;
     }

File: engine-dmn/engine/src/main/java/org/camunda/dmn/engine/impl/transform/DmnLiteralExpressionHandler.java
Patch:
@@ -14,6 +14,7 @@
 package org.camunda.dmn.engine.impl.transform;
 
 import org.camunda.bpm.model.dmn.instance.LiteralExpression;
+import org.camunda.bpm.model.dmn.instance.Text;
 import org.camunda.dmn.engine.DmnExpression;
 import org.camunda.dmn.engine.impl.DmnExpressionImpl;
 import org.camunda.dmn.engine.transform.DmnElementHandler;
@@ -28,7 +29,7 @@ public DmnExpression handleElement(DmnTransformContext context, LiteralExpressio
     if (expressionLanguage != null) {
       dmnExpression.setExpressionLanguage(expressionLanguage.trim());
     }
-    String text = expression.getText();
+    Text text = expression.getText();
     if (text != null) {
       String textContent = text.getTextContent();
       if (textContent != null) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParser.java
Patch:
@@ -45,7 +45,7 @@ public class BpmnParser extends Parser {
   /**
    * The namespace of the camunda custom BPMN extensions.
    */
-  public static final String CAMUNDA_BPMN_EXTENSIONS_NS = "http://camunda.org/bpmn";
+  public static final String CAMUNDA_BPMN_EXTENSIONS_NS = "http://camunda.org/schema/1.0/bpmn";
 
   /**
    * The namespace of the Activiti custom BPMN extensions.

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractCaseExecutionRestServiceInteractionTest.java
Patch:
@@ -67,15 +67,15 @@
 import org.camunda.bpm.engine.variable.value.BooleanValue;
 import org.camunda.bpm.engine.variable.value.FileValue;
 import org.camunda.bpm.engine.variable.value.ObjectValue;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.map.type.TypeFactory;
 import org.hamcrest.CoreMatchers;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
 import org.mockito.Matchers;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.type.TypeFactory;
 import com.jayway.restassured.http.ContentType;
 import com.jayway.restassured.response.Response;
 

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractCaseInstanceRestServiceInteractionTest.java
Patch:
@@ -71,15 +71,15 @@
 import org.camunda.bpm.engine.variable.value.BooleanValue;
 import org.camunda.bpm.engine.variable.value.FileValue;
 import org.camunda.bpm.engine.variable.value.ObjectValue;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.map.type.TypeFactory;
 import org.hamcrest.CoreMatchers;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
 import org.mockito.Matchers;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.type.TypeFactory;
 import com.jayway.restassured.http.ContentType;
 import com.jayway.restassured.response.Response;
 

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractExecutionRestServiceInteractionTest.java
Patch:
@@ -59,14 +59,14 @@
 import org.camunda.bpm.engine.variable.value.BooleanValue;
 import org.camunda.bpm.engine.variable.value.FileValue;
 import org.camunda.bpm.engine.variable.value.ObjectValue;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.map.type.TypeFactory;
 import org.hamcrest.CoreMatchers;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.type.TypeFactory;
 import com.jayway.restassured.http.ContentType;
 import com.jayway.restassured.response.Response;
 

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractProcessInstanceRestServiceInteractionTest.java
Patch:
@@ -67,15 +67,15 @@
 import org.camunda.bpm.engine.variable.value.FileValue;
 import org.camunda.bpm.engine.variable.value.LongValue;
 import org.camunda.bpm.engine.variable.value.ObjectValue;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.map.type.TypeFactory;
 import org.hamcrest.CoreMatchers;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
 import org.mockito.InOrder;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.type.TypeFactory;
 import com.jayway.restassured.http.ContentType;
 import com.jayway.restassured.response.Response;
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/JobPrioritizationDuringDeploymentTest.java
Patch:
@@ -56,7 +56,7 @@ public void setupBeforeTest() {
   // deploy this manually
   @Deployment(name="timerStart", managed = false)
   public static WebArchive createTimerStartDeployment() {
-    return initWebArchiveDeployment("pa.war", "org/camunda/bpm/integrationtest/jobexecutor/jobPriorityEngine.xml")
+    return initWebArchiveDeployment("pa1.war", "org/camunda/bpm/integrationtest/jobexecutor/jobPriorityEngine.xml")
       .addClass(PriorityBean.class)
       .addAsResource("org/camunda/bpm/integrationtest/jobexecutor/JobPrioritizationDuringDeploymentTest.timerStart.bpmn20.xml");
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/JobPrioritizationTest.java
Patch:
@@ -58,7 +58,7 @@ public void setEngines() {
 
   @Deployment
   public static WebArchive createDeployment() {
-    return initWebArchiveDeployment("pa.war", "org/camunda/bpm/integrationtest/jobexecutor/jobPriorityEngine.xml")
+    return initWebArchiveDeployment("pa1.war", "org/camunda/bpm/integrationtest/jobexecutor/jobPriorityEngine.xml")
       .addClass(PriorityBean.class)
       .addAsResource("org/camunda/bpm/integrationtest/jobexecutor/JobPrioritizationTest.serviceTask.bpmn20.xml")
       .addAsResource("org/camunda/bpm/integrationtest/jobexecutor/JobPrioritizationTest.userTask.bpmn20.xml")

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/handler/DefaultStartFormHandler.java
Patch:
@@ -16,7 +16,6 @@
 import org.camunda.bpm.engine.delegate.Expression;
 import org.camunda.bpm.engine.form.StartFormData;
 import org.camunda.bpm.engine.impl.bpmn.parser.BpmnParse;
-import org.camunda.bpm.engine.impl.bpmn.parser.BpmnParser;
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.el.ExpressionManager;
 import org.camunda.bpm.engine.impl.form.StartFormDataImpl;
@@ -42,7 +41,7 @@ public void parseConfiguration(Element activityElement, DeploymentEntity deploym
         .getProcessEngineConfiguration()
         .getExpressionManager();
 
-    String formKeyAttribute = activityElement.attributeNS(BpmnParser.ACTIVITI_BPMN_EXTENSIONS_NS, "formKey");
+    String formKeyAttribute = activityElement.attributeNS(BpmnParse.CAMUNDA_BPMN_EXTENSIONS_NS, "formKey");
 
     if (formKeyAttribute != null) {
       this.formKey = expressionManager.createExpression(formKeyAttribute);

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/type/FormTypes.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.Map;
 
 import org.camunda.bpm.engine.impl.bpmn.parser.BpmnParse;
-import org.camunda.bpm.engine.impl.bpmn.parser.BpmnParser;
 import org.camunda.bpm.engine.impl.util.xml.Element;
 
 
@@ -45,7 +44,7 @@ public AbstractFormFieldType parseFormPropertyType(Element formFieldElement, Bpm
     } else if ("enum".equals(typeText)) {
       // ACT-1023: Using linked hashmap to preserve the order in which the entries are defined
       Map<String, String> values = new LinkedHashMap<String, String>();
-      for (Element valueElement: formFieldElement.elementsNS(BpmnParser.ACTIVITI_BPMN_EXTENSIONS_NS,"value")) {
+      for (Element valueElement: formFieldElement.elementsNS(BpmnParse.CAMUNDA_BPMN_EXTENSIONS_NS,"value")) {
         String valueId = valueElement.attribute("id");
         String valueName = valueElement.attribute("name");
         values.put(valueId, valueName);

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/CompetingMessageCorrelationTest.java
Patch:
@@ -14,14 +14,12 @@
 
 import java.util.concurrent.atomic.AtomicInteger;
 
-import org.apache.ibatis.logging.LogFactory;
 import org.camunda.bpm.engine.OptimisticLockingException;
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 import org.camunda.bpm.engine.impl.MessageCorrelationBuilderImpl;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
-import org.camunda.bpm.engine.impl.util.LogUtil;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.task.Task;
 import org.camunda.bpm.engine.test.Deployment;

File: engine/src/main/java/org/camunda/bpm/engine/runtime/ActivityInstance.java
Patch:
@@ -55,6 +55,6 @@ public interface ActivityInstance extends ProcessElementInstance {
   /**
    * all descendant (children, grandchildren, etc.) transition instances that are leaving or entering the supplied activity
    */
-  TransitionInstance[] getTransitionInstances(String transitionId);
+  TransitionInstance[] getTransitionInstances(String activityId);
 
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/ProcessInstanceModificationCancellationTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.camunda.bpm.engine.runtime.ActivityInstance;
 import org.camunda.bpm.engine.runtime.EventSubscription;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
+import org.camunda.bpm.engine.runtime.TransitionInstance;
 import org.camunda.bpm.engine.task.Task;
 import org.camunda.bpm.engine.test.Deployment;
 import org.camunda.bpm.engine.test.examples.bpmn.executionlistener.RecorderExecutionListener;

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricJobLogQueryImpl.java
Patch:
@@ -25,6 +25,7 @@
 import org.camunda.bpm.engine.history.JobState;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.interceptor.CommandExecutor;
+import org.camunda.bpm.engine.impl.util.CollectionUtil;
 
 /**
  * @author Roman Smirnov
@@ -98,15 +99,15 @@ public HistoricJobLogQuery jobDefinitionConfiguration(String jobDefinitionConfig
   }
 
   public HistoricJobLogQuery activityIdIn(String... activityIds) {
-    List<String> activityIdList = Arrays.asList(activityIds);
+    List<String> activityIdList = CollectionUtil.asArrayList(activityIds);
     ensureNotContainsNull("activityIds", activityIdList);
     ensureNotContainsEmptyString("activityIds", activityIdList);
     this.activityIds = activityIds;
     return this;
   }
 
   public HistoricJobLogQuery executionIdIn(String... executionIds) {
-    List<String> executionIdList = Arrays.asList(executionIds);
+    List<String> executionIdList = CollectionUtil.asArrayList(executionIds);
     ensureNotContainsNull("executionIds", executionIdList);
     ensureNotContainsEmptyString("executionIds", executionIdList);
     this.executionIds = executionIds;

File: engine/src/main/java/org/camunda/bpm/engine/impl/JobQueryProperty.java
Patch:
@@ -31,5 +31,6 @@ public interface JobQueryProperty {
   public static final QueryProperty DUEDATE = new QueryPropertyImpl("DUEDATE_");
   public static final QueryProperty RETRIES = new QueryPropertyImpl("RETRIES_");
   public static final QueryProperty TYPE = new QueryPropertyImpl("TYPE_");
+  public static final QueryProperty PRIORITY = new QueryPropertyImpl("PRIORITY_");
 
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/async/AsyncEndEventTest.java
Patch:
@@ -14,7 +14,6 @@
 
 import java.util.List;
 
-import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.history.HistoricVariableInstanceQuery;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/JobExecutorAcquireJobsByDueDateTest.java
Patch:
@@ -24,6 +24,7 @@ public void testProcessEngineConfiguration() {
     ProcessEngineConfigurationImpl configuration = ((ProcessEngineImpl) processEngine).getProcessEngineConfiguration();
     assertFalse(configuration.isJobExecutorPreferTimerJobs());
     assertTrue(configuration.isJobExecutorAcquireByDueDate());
+    assertFalse(configuration.isJobExecutorAcquireByPriority());
   }
 
   @Deployment(resources = "org/camunda/bpm/engine/test/jobexecutor/simpleAsyncProcess.bpmn20.xml")

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/JobExecutorAcquireJobsByTypeAndDueDateTest.java
Patch:
@@ -24,6 +24,7 @@ public void testProcessEngineConfiguration() {
     ProcessEngineConfigurationImpl configuration = ((ProcessEngineImpl) processEngine).getProcessEngineConfiguration();
     assertTrue(configuration.isJobExecutorPreferTimerJobs());
     assertTrue(configuration.isJobExecutorAcquireByDueDate());
+    assertFalse(configuration.isJobExecutorAcquireByPriority());
   }
 
   @Deployment(resources = "org/camunda/bpm/engine/test/jobexecutor/simpleAsyncProcess.bpmn20.xml")

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/JobExecutorAcquireJobsByTypeTest.java
Patch:
@@ -24,6 +24,7 @@ public void testProcessEngineConfiguration() {
     ProcessEngineConfigurationImpl configuration = ((ProcessEngineImpl) processEngine).getProcessEngineConfiguration();
     assertTrue(configuration.isJobExecutorPreferTimerJobs());
     assertFalse(configuration.isJobExecutorAcquireByDueDate());
+    assertFalse(configuration.isJobExecutorAcquireByPriority());
   }
 
   @Deployment(resources = "org/camunda/bpm/engine/test/jobexecutor/simpleAsyncProcess.bpmn20.xml")

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/variable/type/FileValueTypeImpl.java
Patch:
@@ -74,7 +74,7 @@ public Map<String, Object> getValueInfo(TypedValue typedValue) {
       result.put(VALUE_INFO_FILE_MIME_TYPE, fileValue.getMimeType());
     }
     if (fileValue.getEncoding() != null) {
-      result.put(VALUE_INFO_FILE_ENCODING, fileValue.getEncoding().name());
+      result.put(VALUE_INFO_FILE_ENCODING, fileValue.getEncoding());
     }
     return result;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/variable/type/FileValueTypeImpl.java
Patch:
@@ -34,7 +34,7 @@
 public class FileValueTypeImpl extends AbstractValueTypeImpl implements FileValueType {
 
   private static final long serialVersionUID = 1L;
-  public final static String VALUE_INFO_FILE_NAME = "fileName";
+  public final static String VALUE_INFO_FILE_NAME = "filename";
   public final static String VALUE_INFO_FILE_MIME_TYPE = "mimeType";
 
   public FileValueTypeImpl() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -222,6 +222,7 @@
 import org.camunda.bpm.engine.impl.variable.serializer.DateValueSerializer;
 import org.camunda.bpm.engine.impl.variable.serializer.DefaultVariableSerializers;
 import org.camunda.bpm.engine.impl.variable.serializer.DoubleValueSerializer;
+import org.camunda.bpm.engine.impl.variable.serializer.FileValueSerializer;
 import org.camunda.bpm.engine.impl.variable.serializer.IntegerValueSerializer;
 import org.camunda.bpm.engine.impl.variable.serializer.JavaObjectSerializer;
 import org.camunda.bpm.engine.impl.variable.serializer.LongValueSerlializer;
@@ -1262,6 +1263,7 @@ protected void initSerialization() {
       variableSerializers.addSerializer(new DoubleValueSerializer());
       variableSerializers.addSerializer(new ByteArrayValueSerializer());
       variableSerializers.addSerializer(new JavaObjectSerializer());
+      variableSerializers.addSerializer(new FileValueSerializer());
 
       if (customPostVariableSerializers!=null) {
         for (TypedValueSerializer<?> customVariableType: customPostVariableSerializers) {

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/DbDeadlockTest.java
Patch:
@@ -21,11 +21,13 @@
 import org.camunda.bpm.engine.impl.history.event.HistoricProcessInstanceEventEntity;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
+import org.junit.Ignore;
 
 /**
  * @author Daniel Meyer
  *
  */
+@Ignore // remove after CAM-4060 is solved
 public class DbDeadlockTest extends ConcurrencyTestCase {
 
   private ThreadControl thread1;

File: engine/src/main/java/org/camunda/bpm/engine/management/MetricsQuery.java
Patch:
@@ -33,12 +33,12 @@ public interface MetricsQuery {
   MetricsQuery reporter(String reporter);
 
   /**
-   * Restrict to data collected after the given date
+   * Restrict to data collected after the given date (inclusive)
    */
   MetricsQuery startDate(Date startTime);
 
   /**
-   * Restrict to data collected before the given date
+   * Restrict to data collected before the given date (exclusive)
    */
   MetricsQuery endDate(Date endTime);
 

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/type/ModelElementTypeBuilder.java
Patch:
@@ -41,6 +41,8 @@ public interface ModelElementTypeBuilder {
 
   <V extends Enum<V>> AttributeBuilder<V> enumAttribute(String attributeName, Class<V> enumType);
 
+  <V extends Enum<V>> AttributeBuilder<V> namedEnumAttribute(String attributeName, Class<V> enumType);
+
   SequenceBuilder sequence();
 
   ModelElementType build();

File: examples/invoice/src/main/java/org/camunda/bpm/example/invoice/InvoiceProcessApplication.java
Patch:
@@ -71,6 +71,7 @@ private void startProcessInstance(ProcessEngine processEngine) {
     // process instance 3
     pi = processEngine.getRuntimeService().startProcessInstanceByKey("invoice", createVariables()
         .putValue("creditor", "Papa Steve's all you can eat")
+        .putValue("amount", "10.99$")
         .putValue("invoiceNumber", "PSACE-5342"));
     try {
       Calendar calendar = Calendar.getInstance();

File: webapps/webapp/src/main/java/org/camunda/bpm/webapp/impl/security/auth/AuthenticationFilter.java
Patch:
@@ -29,9 +29,9 @@
 
 
 /**
- * <p>Servlet {@link Filter} implementation responsible for poulating the
+ * <p>Servlet {@link Filter} implementation responsible for populating the
  * {@link Authentications#getCurrent()} thread-local (ie. binding the current
- * set of authentications to the current thread so that it may esily be obtained
+ * set of authentications to the current thread so that it may easily be obtained
  * by application parts not having access to the current session.</p>
  *
  * @author Daniel Meyer

File: webapps/webapp/src/main/java/org/camunda/bpm/webapp/impl/security/auth/AuthenticationFilter.java
Patch:
@@ -29,9 +29,9 @@
 
 
 /**
- * <p>Servlet {@link Filter} implementation responsible for poulating the
+ * <p>Servlet {@link Filter} implementation responsible for populating the
  * {@link Authentications#getCurrent()} thread-local (ie. binding the current
- * set of authentications to the current thread so that it may esily be obtained
+ * set of authentications to the current thread so that it may easily be obtained
  * by application parts not having access to the current session.</p>
  *
  * @author Daniel Meyer

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/gateway/ParallelGatewayTest.java
Patch:
@@ -29,6 +29,7 @@
 import org.camunda.bpm.engine.task.Task;
 import org.camunda.bpm.engine.task.TaskQuery;
 import org.camunda.bpm.engine.test.Deployment;
+import org.hamcrest.CoreMatchers;
 
 /**
  * @author Joram Barrez
@@ -212,7 +213,7 @@ public void testParallelGatewayBeforeAndInSubProcess() {
       if (activityInstance.getActivityId().equals("SubProcess_1")) {
         ActivityInstance[] instances = activityInstance.getChildActivityInstances();
         for (ActivityInstance activityInstance2 : instances) {
-          assertThat(activityInstance2.getActivityName(), is(either(equalTo("Inner User Task 1")).or(equalTo("Inner User Task 2"))));
+          assertThat(activityInstance2.getActivityName(), is(either(equalTo("Inner User Task 1")).or(CoreMatchers.<Object>equalTo("Inner User Task 2"))));
         }
       } else {
         assertThat(activityInstance.getActivityName(), is("Outer User Task"));

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityInitStackNotifyListenerStart.java
Patch:
@@ -66,7 +66,7 @@ protected void eventNotificationsCompleted(PvmExecutionImpl execution) {
     // if the stack has been instantiated
     if (instantiationStack.getActivities().isEmpty() && instantiationStack.getTargetActivity() != null) {
       // as if we are entering the target activity instance id via a transition
-      execution.setActivityInstanceId(null);
+      propagatingExecution.setActivityInstanceId(null);
 
       // execute the target activity with this execution
       startContext.applyVariables(propagatingExecution);
@@ -76,7 +76,7 @@ protected void eventNotificationsCompleted(PvmExecutionImpl execution) {
     }
     else if (instantiationStack.getActivities().isEmpty() && instantiationStack.getTargetTransition() != null) {
       // as if we are entering the target activity instance id via a transition
-      execution.setActivityInstanceId(null);
+      propagatingExecution.setActivityInstanceId(null);
 
       // execute the target transition with this execution
       PvmTransition transition = instantiationStack.getTargetTransition();

File: engine/src/main/java/org/camunda/bpm/engine/impl/metrics/parser/MetricsCmmnTransformListener.java
Patch:
@@ -35,6 +35,7 @@ protected void addListeners(CmmnActivity activity) {
     if(activity != null) {
       activity.addBuiltInListener(CaseExecutionListener.START, listener);
       activity.addBuiltInListener(CaseExecutionListener.MANUAL_START, listener);
+      activity.addBuiltInListener(CaseExecutionListener.OCCUR, listener);
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/AbstractPersistentVariableStore.java
Patch:
@@ -124,7 +124,8 @@ public void setVariableValue(CoreVariableInstance variableInstance, TypedValue v
     fireVariableEvent(variableInstanceEntity, VariableListener.UPDATE, sourceActivityExecution);
   }
 
-  public CoreVariableInstance createVariableInstance(String variableName, TypedValue value, AbstractVariableScope sourceActivityExecution) {
+  public CoreVariableInstance createVariableInstance(String variableName, TypedValue value,
+      AbstractVariableScope sourceActivityExecution) {
 
     // create variable instance
     VariableInstanceEntity variableInstance = VariableInstanceEntity.createAndInsert(variableName, value);

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricVariableInstanceScopeTest.java
Patch:
@@ -241,7 +241,7 @@ public void testSetVariableLocalOnServiceTaskInsideParallelBranch() {
 
     HistoricVariableInstance variable = query.singleResult();
     // the variable is in the service task scope
-    assertEquals(pi.getId(), variable.getActivityInstanceId());
+    assertEquals(serviceTask.getId(), variable.getActivityInstanceId());
 
     assertProcessEnded(pi.getId());
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/metrics/MetricsTest.java
Patch:
@@ -33,6 +33,7 @@ protected void setUp() throws Exception {
     for (Meter meter : meters) {
       meter.getAndClear();
     }
+    managementService.deleteMetrics(null);
   }
 
   public void testDeleteMetrics() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -376,12 +376,12 @@ public void startWithFormProperties(VariableMap properties) {
 
       initialize();
       initializeTimerDeclarations();
-      fireProcessStartEvent();
+      fireHistoricProcessStartEvent();
     }
     performOperation(PvmAtomicOperation.PROCESS_START);
   }
 
-  public void fireProcessStartEvent() {
+  public void fireHistoricProcessStartEvent() {
     ProcessEngineConfigurationImpl configuration = Context.getProcessEngineConfiguration();
     HistoryLevel historyLevel = configuration.getHistoryLevel();
     // TODO: This smells bad, as the rest of the history is done via the ParseListener

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/ExecutionImpl.java
Patch:
@@ -329,7 +329,7 @@ public void forceUpdate() {
     // nothing to do
   }
 
-  public void fireProcessStartEvent() {
+  public void fireHistoricProcessStartEvent() {
     // do nothing
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityEnd.java
Patch:
@@ -76,7 +76,9 @@ public void execute(PvmExecutionImpl execution) {
       }
       else {
         // 1.2 Process End
-        propagatingExecution.performOperation(PROCESS_END);
+        if (!propagatingExecution.isPreserveScope()) {
+          propagatingExecution.performOperation(PROCESS_END);
+        }
       }
     }
     else {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/RuntimeServiceTest.java
Patch:
@@ -170,14 +170,14 @@ public void testDeleteProcessInstanceWithListeners() {
 
     // then
     List<RecordedEvent> recordedEvents = RecorderExecutionListener.getRecordedEvents();
-    assertEquals(4, recordedEvents.size());
+    assertEquals(5, recordedEvents.size());
 
     Set<String> endActivityIds = new HashSet<String>();
     for (RecordedEvent event : recordedEvents) {
       endActivityIds.add(event.getActivityId());
     }
 
-    assertEquals(4, endActivityIds.size());
+    assertEquals(5, endActivityIds.size());
     assertTrue(endActivityIds.contains("innerTask1"));
     assertTrue(endActivityIds.contains("innerTask2"));
     assertTrue(endActivityIds.contains("outerTask"));

File: engine-cdi/src/main/java/org/camunda/bpm/engine/cdi/impl/event/CdiEventSupportBpmnParseListener.java
Patch:
@@ -175,6 +175,8 @@ public void parseSendTask(Element sendTaskElement, ScopeImpl scope, ActivityImpl
 
   @Override
   public void parseMultiInstanceLoopCharacteristics(Element activityElement, Element multiInstanceLoopCharacteristicsElement, ActivityImpl activity) {
+    addStartEventListener(activity);
+    addEndEventListener(activity);
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/application/impl/event/ProcessApplicationEventParseListener.java
Patch:
@@ -181,6 +181,8 @@ public void parseSendTask(Element sendTaskElement, ScopeImpl scope, ActivityImpl
 
   @Override
   public void parseMultiInstanceLoopCharacteristics(Element activityElement, Element multiInstanceLoopCharacteristicsElement, ActivityImpl activity) {
+    addStartEventListener(activity);
+    addEndEventListener(activity);
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -1429,7 +1429,6 @@ public ScopeImpl parseMultiInstanceLoopCharacteristics(Element activityElement,
         addError("LoopDataInputRef/activiti:collection must be set when using inputDataItem or activiti:elementVariable", miLoopCharacteristics);
       }
 
-      // TODO: for backwards compatibility we should consider invoking this on the other activity
       for (BpmnParseListener parseListener : parseListeners) {
         parseListener.parseMultiInstanceLoopCharacteristics(activityElement, miLoopCharacteristics, miBodyScope);
       }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -340,7 +340,7 @@ public void initialize() {
 
   @SuppressWarnings("unchecked")
   public void initializeTimerDeclarations() {
-    log.fine("initializing timer declaration"+this);
+    log.fine("initializing timer declaration "+this);
     ScopeImpl scope = getScopeActivity();
     List<TimerDeclarationImpl> timerDeclarations = (List<TimerDeclarationImpl>) scope.getProperty(BpmnParse.PROPERTYNAME_TIMER_DECLARATION);
     if (timerDeclarations!=null) {

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/iomapping/InputOutputEventTest.java
Patch:
@@ -74,7 +74,7 @@ public void testMessageCatchEvent() {
   }
 
   @Deployment
-  public void FAILING_testTimerCatchEvent() {
+  public void testTimerCatchEvent() {
     Map<String, Object> variables = new HashMap<String, Object>();
     Date dueDate = DateTimeUtil.now().plusMinutes(5).toDate();
     variables.put("outerVariable", new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(dueDate));

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationDeleteCascadeFireActivityEnd.java
Patch:
@@ -84,7 +84,7 @@ protected void eventNotificationsCompleted(PvmExecutionImpl execution) {
 
       if (continueRemoval) {
         PvmExecutionImpl propagatingExecution = execution.getParent();
-        if (propagatingExecution != null && !propagatingExecution.isScope()) {
+        if (propagatingExecution != null && !propagatingExecution.isScope() && propagatingExecution.getExecutions().isEmpty()) {
           propagatingExecution.remove();
           continueRemoval = !propagatingExecution.isDeleteRoot();
           propagatingExecution = propagatingExecution.getParent();

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationTransitionDestroyScope.java
Patch:
@@ -102,7 +102,7 @@ else if (transitionsToTake.size() == 1) {
             outgoingExecutions.remove(0);
             // get ahold of the concurrent execution that replaced the scope propagating execution
             PvmExecutionImpl replacingExecution = null;
-            for (PvmExecutionImpl concurrentChild : scopeExecution.getExecutions())  {
+            for (PvmExecutionImpl concurrentChild : scopeExecution.getNonEventScopeExecutions())  {
               if (!(concurrentChild == propagatingExecution)) {
                 replacingExecution = concurrentChild;
                 break;

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/SubProcessActivityBehavior.java
Patch:
@@ -53,7 +53,7 @@ public void complete(ActivityExecution scopeExecution) {
 
   public void leave(ActivityExecution execution) {
     CompensationUtil.createEventScopeExecution((ExecutionEntity) execution);
-    bpmnActivityBehavior.performDefaultOutgoingBehavior(execution);
+    super.leave(execution);
   }
 
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/compensate/CompensateEventTest.java
Patch:
@@ -148,7 +148,7 @@ public void testCompensateActivityRef() {
    * CAM-3628
    */
   @Deployment
-  public void FAILING_testCompensateSubprocessWithBoundaryEvent() {
+  public void testCompensateSubprocessWithBoundaryEvent() {
     ProcessInstance instance = runtimeService.startProcessInstanceByKey("compensateProcess");
 
     Task compensationTask = taskService.createTaskQuery().singleResult();

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/VariableInstanceEntity.java
Patch:
@@ -508,8 +508,8 @@ public String getActivityInstanceId() {
     return activityInstanceId;
   }
 
-  public void setActivityInstanceId(String acitivtyInstanceId) {
-    this.activityInstanceId = acitivtyInstanceId;
+  public void setActivityInstanceId(String activityInstanceId) {
+    this.activityInstanceId = activityInstanceId;
   }
 
   public String getSerializerName() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/ExecutionImpl.java
Patch:
@@ -123,7 +123,7 @@ protected ExecutionImpl newExecution() {
   }
 
   public void initialize() {
-    executeIoMapping();
+    return;
   }
 
   // parent ///////////////////////////////////////////////////////////////////

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/ProcessInstanceModificationHistoryTest.java
Patch:
@@ -68,7 +68,7 @@ public void testStartBeforeWithVariablesInHistory() {
       .singleResult();
 
     assertNotNull(localVariable);
-    assertNull(localVariable.getActivityInstanceId());
+    assertEquals(updatedTree.getId(), localVariable.getActivityInstanceId());
     assertEquals("localVar", localVariable.getName());
     assertEquals("localValue", localVariable.getValue());
 
@@ -116,7 +116,7 @@ public void testStartBeforeAsyncWithVariablesInHistory() {
       .singleResult();
 
     assertNotNull(localVariable);
-    assertNull(localVariable.getActivityInstanceId());
+    assertEquals(updatedTree.getId(), localVariable.getActivityInstanceId());
     assertEquals("localVar", localVariable.getName());
     assertEquals("localValue", localVariable.getValue());
 

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/iomapping/InputOutputEventTest.java
Patch:
@@ -74,7 +74,7 @@ public void testMessageCatchEvent() {
   }
 
   @Deployment
-  public void testTimerCatchEvent() {
+  public void FAILING_testTimerCatchEvent() {
     Map<String, Object> variables = new HashMap<String, Object>();
     Date dueDate = DateTimeUtil.now().plusMinutes(5).toDate();
     variables.put("outerVariable", new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(dueDate));

File: engine-plugins/spin-plugin/src/test/java/org/camunda/spin/plugin/impl/SpinProcessEnginePluginTest.java
Patch:
@@ -32,7 +32,7 @@ public class SpinProcessEnginePluginTest extends PluggableProcessEngineTestCase
 
   public void testPluginDoesNotRegisterXmlSerializerIfNotPresentInClasspath() throws IOException {
     ClassLoader mockClassloader = Mockito.mock(ClassLoader.class);
-    Mockito.when(mockClassloader.getResources(Mockito.anyString())).thenReturn(Collections.<URL>emptyEnumeration());
+    Mockito.when(mockClassloader.getResources(Mockito.anyString())).thenReturn(Collections.enumeration(Collections.<URL>emptyList()));
     DataFormats.loadDataFormats(mockClassloader);
     ProcessEngineConfigurationImpl mockConfig = Mockito.mock(ProcessEngineConfigurationImpl.class);
     DefaultVariableSerializers serializers = new DefaultVariableSerializers();
@@ -44,7 +44,7 @@ public void testPluginDoesNotRegisterXmlSerializerIfNotPresentInClasspath() thro
 
   public void testPluginDoesNotRegisterJsonSerializerIfNotPresentInClasspath() throws IOException {
     ClassLoader mockClassloader = Mockito.mock(ClassLoader.class);
-    Mockito.when(mockClassloader.getResources(Mockito.anyString())).thenReturn(Collections.<URL>emptyEnumeration());
+    Mockito.when(mockClassloader.getResources(Mockito.anyString())).thenReturn(Collections.enumeration(Collections.<URL>emptyList()));
     DataFormats.loadDataFormats(mockClassloader);
     ProcessEngineConfigurationImpl mockConfig = Mockito.mock(ProcessEngineConfigurationImpl.class);
     DefaultVariableSerializers serializers = new DefaultVariableSerializers();

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/task/TaskQueryDto.java
Patch:
@@ -1240,6 +1240,7 @@ public static TaskQueryDto fromQuery(Query<?, ?> query) {
     dto.processInstanceBusinessKey = taskQuery.getProcessInstanceBusinessKey();
     dto.processInstanceBusinessKeyLike = taskQuery.getProcessInstanceBusinessKeyLike();
     dto.processDefinitionKey = taskQuery.getProcessDefinitionKey();
+    dto.processDefinitionKeyIn = taskQuery.getProcessDefinitionKeys();
     dto.processDefinitionId = taskQuery.getProcessDefinitionId();
     dto.executionId = taskQuery.getExecutionId();
     dto.activityInstanceIdIn = taskQuery.getActivityInstanceIdIn();
@@ -1249,6 +1250,7 @@ public static TaskQueryDto fromQuery(Query<?, ?> query) {
     dto.assignee = taskQuery.getAssignee();
     dto.assigneeLike = taskQuery.getAssigneeLike();
     dto.taskDefinitionKey = taskQuery.getKey();
+    dto.taskDefinitionKeyIn = taskQuery.getKeys();
     dto.taskDefinitionKeyLike = taskQuery.getKeyLike();
     dto.description = taskQuery.getDescription();
     dto.descriptionLike = taskQuery.getDescriptionLike();

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractProcessInstanceRestServiceInteractionTest.java
Patch:
@@ -140,6 +140,8 @@ public void testGetActivityInstanceTree() {
         .body("childTransitionInstances[0].id", equalTo(CHILD_EXAMPLE_ACTIVITY_INSTANCE_ID))
         .body("childTransitionInstances[0].parentActivityInstanceId", equalTo(CHILD_EXAMPLE_PARENT_ACTIVITY_INSTANCE_ID))
         .body("childTransitionInstances[0].activityId", equalTo(CHILD_EXAMPLE_ACTIVITY_ID))
+        .body("childTransitionInstances[0].activityName", equalTo(CHILD_EXAMPLE_ACTIVITY_NAME))
+        .body("childTransitionInstances[0].activityType", equalTo(CHILD_EXAMPLE_ACTIVITY_TYPE))
         .body("childTransitionInstances[0].targetActivityId", equalTo(CHILD_EXAMPLE_ACTIVITY_ID))
         .body("childTransitionInstances[0].processInstanceId", equalTo(CHILD_EXAMPLE_PROCESS_INSTANCE_ID))
         .body("childTransitionInstances[0].processDefinitionId", equalTo(CHILD_EXAMPLE_PROCESS_DEFINITION_ID))

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractRestServiceTest.java
Patch:
@@ -121,6 +121,8 @@ public abstract class AbstractRestServiceTest {
     childTransition.setId(CHILD_EXAMPLE_ACTIVITY_INSTANCE_ID);
     childTransition.setParentActivityInstanceId(CHILD_EXAMPLE_PARENT_ACTIVITY_INSTANCE_ID);
     childTransition.setActivityId(CHILD_EXAMPLE_ACTIVITY_ID);
+    childTransition.setActivityName(CHILD_EXAMPLE_ACTIVITY_NAME);
+    childTransition.setActivityType(CHILD_EXAMPLE_ACTIVITY_TYPE);
     childTransition.setProcessInstanceId(CHILD_EXAMPLE_PROCESS_INSTANCE_ID);
     childTransition.setProcessDefinitionId(CHILD_EXAMPLE_PROCESS_DEFINITION_ID);
     childTransition.setExecutionId(EXAMPLE_EXECUTION_ID);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AbstractInstanceCancellationCmd.java
Patch:
@@ -42,8 +42,9 @@ public Void execute(CommandContext commandContext) {
     ExecutionEntity topmostCancellableExecution = sourceInstanceExecution;
     ExecutionEntity parentScopeExecution = (ExecutionEntity) topmostCancellableExecution.getParentScopeExecution(false);
 
-    // if topmostCancellabelExecution's parent is concurrent, we have reached the target execution
-    while (parentScopeExecution != null && !topmostCancellableExecution.isConcurrent() && !topmostCancellableExecution.getParent().isConcurrent()) {
+    // if topmostCancellableExecution's scope execution has no other non-event-scope children,
+    // we have reached the correct execution
+    while (parentScopeExecution != null && (parentScopeExecution.getNonEventScopeExecutions().size() <= 1)) {
       topmostCancellableExecution = parentScopeExecution;
       parentScopeExecution = (ExecutionEntity) topmostCancellableExecution.getParentScopeExecution(false);
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AbstractCorrelateMessageCmd.java
Patch:
@@ -37,6 +37,7 @@ public abstract class AbstractCorrelateMessageCmd implements Command<Void> {
   protected final Map<String, Object> correlationKeys;
   protected final Map<String, Object> processVariables;
   protected String processInstanceId;
+  protected boolean isExclusiveCorrelation = false;
 
   protected AbstractCorrelateMessageCmd(String messageName, String businessKey,
       Map<String, Object> correlationKeys, Map<String, Object> processVariables) {
@@ -57,10 +58,11 @@ protected AbstractCorrelateMessageCmd(MessageCorrelationBuilderImpl messageCorre
     this.correlationKeys = messageCorrelationBuilderImpl.getCorrelationProcessInstanceVariables();
     this.businessKey = messageCorrelationBuilderImpl.getBusinessKey();
     this.processInstanceId = messageCorrelationBuilderImpl.getProcessInstanceId();
+    this.isExclusiveCorrelation = messageCorrelationBuilderImpl.isExclusiveCorrelation();
   }
 
   protected void triggerExecution(CommandContext commandContext, MessageCorrelationResult correlationResult) {
-    new MessageEventReceivedCmd(messageName, correlationResult.getExecutionEntity().getId(), processVariables).execute(commandContext);
+    new MessageEventReceivedCmd(messageName, correlationResult.getExecutionEntity().getId(), processVariables, isExclusiveCorrelation).execute(commandContext);
   }
 
   protected void instantiateProcess(CommandContext commandContext, MessageCorrelationResult correlationResult) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/PersistenceSession.java
Patch:
@@ -34,7 +34,7 @@ public interface PersistenceSession extends Session {
 
   Object selectOne(String statement, Object parameter);
 
-  void lock(String statement);
+  void lock(String statement, Object parameter);
 
   void commit();
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSession.java
Patch:
@@ -101,13 +101,13 @@ public Object selectOne(String statement, Object parameter) {
 
   // lock ////////////////////////////////////////////
 
-  public void lock(String statement) {
+  public void lock(String statement, Object parameter) {
     // do not perform locking if H2 database is used. H2 uses table level locks
     // by default which may cause deadlocks if the deploy command needs to get a new
     // Id using the DbIdGenerator while performing a deployment.
     if (!DbSqlSessionFactory.H2.equals(dbSqlSessionFactory.getDatabaseType())) {
       String mappedStatement = dbSqlSessionFactory.mapStatement(statement);
-      sqlSession.update(mappedStatement);
+      sqlSession.update(mappedStatement, parameter);
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -230,6 +230,8 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement(MSSQL, "selectHistoricTaskInstanceByNativeQuery", "selectHistoricTaskInstanceByNativeQuery_mssql_or_db2");
     addDatabaseSpecificStatement(MSSQL, "selectTaskByNativeQuery", "selectTaskByNativeQuery_mssql_or_db2");
     addDatabaseSpecificStatement(MSSQL, "lockDeploymentLockProperty", "lockDeploymentLockProperty_mssql");
+    addDatabaseSpecificStatement(MSSQL, "selectEventSubscriptionsByNameAndExecution", "selectEventSubscriptionsByNameAndExecution_mssql");
+    addDatabaseSpecificStatement(MSSQL, "selectEventSubscriptionsByExecutionAndType", "selectEventSubscriptionsByExecutionAndType_mssql");
 
     constants = new HashMap<String, String>();
     constants.put("constant.event", "'event'");

File: engine-plugins/connect-plugin/src/main/java/org/camunda/connect/plugin/impl/ServiceTaskConnectorActivityBehavior.java
Patch:
@@ -48,9 +48,9 @@ public void execute(ActivityExecution execution) throws Exception {
     ensureConnectorInitialized();
 
     ConnectorRequest<?> request = connectorInstance.createRequest();
-    applyInputParameters(execution, request);
 
     try {
+      applyInputParameters(execution, request);
       // execute the request and obtain a response:
       ConnectorResponse response = request.execute();
       applyOutputParameters(execution, response);

File: engine/src/main/java/org/camunda/bpm/engine/impl/scripting/ScriptValueProvider.java
Patch:
@@ -13,7 +13,6 @@
 package org.camunda.bpm.engine.impl.scripting;
 
 import org.camunda.bpm.engine.ProcessEngineException;
-import org.camunda.bpm.engine.delegate.BpmnError;
 import org.camunda.bpm.engine.delegate.VariableScope;
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.core.variable.mapping.IoParameter;

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -1308,6 +1308,7 @@ public static MockHistoricVariableInstanceBuilder mockHistoricVariableInstance()
         .processDefinitionKey(EXAMPLE_VARIABLE_INSTANCE_PROC_DEF_KEY)
         .processDefinitionId(EXAMPLE_VARIABLE_INSTANCE_PROC_DEF_ID)
         .processInstanceId(EXAMPLE_VARIABLE_INSTANCE_PROC_INST_ID)
+        .executionId(EXAMPLE_VARIABLE_INSTANCE_EXECUTION_ID)
         .activityInstanceId(EXAMPLE_VARIABLE_INSTANCE_ACTIVITY_INSTANCE_ID)
         .caseDefinitionKey(EXAMPLE_VARIABLE_INSTANCE_CASE_DEF_KEY)
         .caseDefinitionId(EXAMPLE_VARIABLE_INSTANCE_CASE_DEF_ID)

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/AbstractHistoricVariableInstanceRestServiceInteractionTest.java
Patch:
@@ -87,6 +87,7 @@ public void testGetSingleVariableInstance() {
       .body("processDefinitionKey", equalTo(builder.getProcessDefinitionKey()))
       .body("processDefinitionId", equalTo(builder.getProcessDefinitionId()))
       .body("processInstanceId", equalTo(builder.getProcessInstanceId()))
+      .body("executionId", equalTo(builder.getExecutionId()))
       .body("errorMessage", equalTo(builder.getErrorMessage()))
       .body("activityInstanceId", equalTo(builder.getActivityInstanceId()))
       .body("caseDefinitionKey", equalTo(builder.getCaseDefinitionKey()))
@@ -126,6 +127,7 @@ public void testGetSingleVariableInstanceDeserialized() {
       .body("processDefinitionKey", equalTo(builder.getProcessDefinitionKey()))
       .body("processDefinitionId", equalTo(builder.getProcessDefinitionId()))
       .body("processInstanceId", equalTo(builder.getProcessInstanceId()))
+      .body("executionId", equalTo(builder.getExecutionId()))
       .body("errorMessage", equalTo(builder.getErrorMessage()))
       .body("activityInstanceId", equalTo(builder.getActivityInstanceId()))
       .body("caseDefinitionKey", equalTo(builder.getCaseDefinitionKey()))
@@ -166,6 +168,7 @@ public void testGetSingleVariableInstanceSerialized() {
       .body("processInstanceId", equalTo(builder.getProcessInstanceId()))
       .body("processDefinitionKey", equalTo(builder.getProcessDefinitionKey()))
       .body("processDefinitionId", equalTo(builder.getProcessDefinitionId()))
+      .body("executionId", equalTo(builder.getExecutionId()))
       .body("errorMessage", equalTo(builder.getErrorMessage()))
       .body("activityInstanceId", equalTo(builder.getActivityInstanceId()))
       .body("caseDefinitionKey", equalTo(builder.getCaseDefinitionKey()))

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/AbstractHistoricVariableInstanceRestServiceQueryTest.java
Patch:
@@ -330,6 +330,7 @@ public void testSimpleHistoricVariableQuery() {
           .body("[0].processDefinitionKey", equalTo(mockInstanceBuilder.getProcessDefinitionKey()))
           .body("[0].processDefinitionId", equalTo(mockInstanceBuilder.getProcessDefinitionId()))
           .body("[0].processInstanceId", equalTo(mockInstanceBuilder.getProcessInstanceId()))
+          .body("[0].executionId", equalTo(mockInstanceBuilder.getExecutionId()))
           .body("[0].errorMessage", equalTo(mockInstanceBuilder.getErrorMessage()))
           .body("[0].activityInstanceId", equalTo(mockInstanceBuilder.getActivityInstanceId()))
           .body("[0].caseDefinitionKey", equalTo(mockInstanceBuilder.getCaseDefinitionKey()))

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/AbstractHistoricVariableInstanceRestServiceQueryTest.java
Patch:
@@ -334,6 +334,8 @@ public void testSimpleHistoricVariableQuery() {
           .body("[0].activityInstanceId", equalTo(mockInstanceBuilder.getActivityInstanceId()))
           .body("[0].caseDefinitionKey", equalTo(mockInstanceBuilder.getCaseDefinitionKey()))
           .body("[0].caseDefinitionId", equalTo(mockInstanceBuilder.getCaseDefinitionId()))
+          .body("[0].caseInstanceId", equalTo(mockInstanceBuilder.getCaseInstanceId()))
+          .body("[0].caseExecutionId", equalTo(mockInstanceBuilder.getCaseExecutionId()))
           .body("[0].taskId", equalTo(mockInstanceBuilder.getTaskId()))
       .when()
         .get(HISTORIC_VARIABLE_INSTANCE_RESOURCE_URL);

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -1307,6 +1307,7 @@ public static MockHistoricVariableInstanceBuilder mockHistoricVariableInstance()
         .activityInstanceId(EXAMPLE_VARIABLE_INSTANCE_ACTIVITY_INSTANCE_ID)
         .caseDefinitionKey(EXAMPLE_VARIABLE_INSTANCE_CASE_DEF_KEY)
         .caseDefinitionId(EXAMPLE_VARIABLE_INSTANCE_CASE_DEF_ID)
+        .taskId(EXAMPLE_VARIABLE_INSTANCE_TASK_ID)
         .errorMessage(null);
   }
 

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/AbstractHistoricVariableInstanceRestServiceInteractionTest.java
Patch:
@@ -91,6 +91,7 @@ public void testGetSingleVariableInstance() {
       .body("activityInstanceId", equalTo(builder.getActivityInstanceId()))
       .body("caseDefinitionKey", equalTo(builder.getCaseDefinitionKey()))
       .body("caseDefinitionId", equalTo(builder.getCaseDefinitionId()))
+      .body("taskId", equalTo(builder.getTaskId()))
     .when().get(VARIABLE_INSTANCE_URL);
 
     verify(variableInstanceQueryMock, times(1)).disableBinaryFetching();
@@ -127,6 +128,7 @@ public void testGetSingleVariableInstanceDeserialized() {
       .body("activityInstanceId", equalTo(builder.getActivityInstanceId()))
       .body("caseDefinitionKey", equalTo(builder.getCaseDefinitionKey()))
       .body("caseDefinitionId", equalTo(builder.getCaseDefinitionId()))
+      .body("taskId", equalTo(builder.getTaskId()))
     .when().get(VARIABLE_INSTANCE_URL);
 
     verify(variableInstanceQueryMock, times(1)).disableBinaryFetching();
@@ -164,6 +166,7 @@ public void testGetSingleVariableInstanceSerialized() {
       .body("activityInstanceId", equalTo(builder.getActivityInstanceId()))
       .body("caseDefinitionKey", equalTo(builder.getCaseDefinitionKey()))
       .body("caseDefinitionId", equalTo(builder.getCaseDefinitionId()))
+      .body("taskId", equalTo(builder.getTaskId()))
     .when().get(VARIABLE_INSTANCE_URL);
 
     verify(variableInstanceQueryMock, times(1)).disableBinaryFetching();

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/AbstractHistoricVariableInstanceRestServiceQueryTest.java
Patch:
@@ -2,8 +2,8 @@
 
 import static com.jayway.restassured.RestAssured.expect;
 import static com.jayway.restassured.RestAssured.given;
+import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;
@@ -334,6 +334,7 @@ public void testSimpleHistoricVariableQuery() {
           .body("[0].activityInstanceId", equalTo(mockInstanceBuilder.getActivityInstanceId()))
           .body("[0].caseDefinitionKey", equalTo(mockInstanceBuilder.getCaseDefinitionKey()))
           .body("[0].caseDefinitionId", equalTo(mockInstanceBuilder.getCaseDefinitionId()))
+          .body("[0].taskId", equalTo(mockInstanceBuilder.getTaskId()))
       .when()
         .get(HISTORIC_VARIABLE_INSTANCE_RESOURCE_URL);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/parser/HistoryParseListener.java
Patch:
@@ -85,7 +85,7 @@ protected void initExecutionListeners(HistoryEventProducer historyEventProducer,
 
   public void parseProcess(Element processElement, ProcessDefinitionEntity processDefinition) {
     if (historyLevel.isHistoryEventProduced(HistoryEventTypes.PROCESS_INSTANCE_END, null)) {
-      processDefinition.addExecutionListener(PvmEvent.EVENTNAME_END, PROCESS_INSTANCE_END_LISTENER);
+      processDefinition.addBuiltInListener(PvmEvent.EVENTNAME_END, PROCESS_INSTANCE_END_LISTENER);
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/scripting/ScriptValueProvider.java
Patch:
@@ -13,6 +13,7 @@
 package org.camunda.bpm.engine.impl.scripting;
 
 import org.camunda.bpm.engine.ProcessEngineException;
+import org.camunda.bpm.engine.delegate.BpmnError;
 import org.camunda.bpm.engine.delegate.VariableScope;
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.core.variable.mapping.IoParameter;

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractDeploymentRestServiceInteractionTest.java
Patch:
@@ -311,7 +311,7 @@ public void testCreateCompleteDeployment() throws Exception {
       .multiPart("data", "unspecified", createMockDeploymentResourceByteData())
       .multiPart("more-data", "unspecified", createMockDeploymentResourceBpmnData())
       .multiPart("deployment-name", MockProvider.EXAMPLE_DEPLOYMENT_ID)
-      .multiPart("enable-duplicate-filtering", "true")
+      .multiPart("enable-duplicate-filtering", "true").log().body()
     .expect()
       .statusCode(Status.OK.getStatusCode())
     .when()

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/AsyncContinuationJobHandler.java
Patch:
@@ -22,6 +22,7 @@
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.process.TransitionImpl;
+import org.camunda.bpm.engine.impl.pvm.runtime.LegacyBehavior;
 import org.camunda.bpm.engine.impl.pvm.runtime.operation.PvmAtomicOperation;
 
 /**
@@ -55,6 +56,8 @@ public String getType() {
 
   public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext) {
 
+    LegacyBehavior.repairMultiInstanceAsyncJob(execution);
+
     String operationName = null;
     String transitionId = null;
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/beans/SLSBThrowExceptionDelegate.java
Patch:
@@ -3,6 +3,7 @@
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.JavaDelegate;
 
+import javax.ejb.ApplicationException;
 import javax.ejb.Stateless;
 import javax.inject.Named;
 
@@ -20,6 +21,7 @@ public void execute(DelegateExecution execution) throws Exception {
     throw new MyException("error");
   }
 
+  @ApplicationException
   public static class MyException extends RuntimeException{
 
     private static final long serialVersionUID = 826202870386719558L;

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/IntermediateThrowCompensationEventActivityBehavior.java
Patch:
@@ -30,7 +30,6 @@
 import org.camunda.bpm.engine.impl.pvm.runtime.PvmExecutionImpl;
 import org.camunda.bpm.engine.impl.tree.Collector;
 import org.camunda.bpm.engine.impl.tree.FlowScopeWalker;
-import org.camunda.bpm.engine.impl.tree.TreeWalker;
 import org.camunda.bpm.engine.impl.tree.TreeWalker.WalkCondition;
 
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/SequentialMultiInstanceActivityBehavior.java
Patch:
@@ -23,6 +23,7 @@
 public class SequentialMultiInstanceActivityBehavior extends MultiInstanceActivityBehavior {
 
   protected void createInstances(ActivityExecution execution, int nrOfInstances) throws Exception {
+
     setLoopVariable(execution, NUMBER_OF_INSTANCES, nrOfInstances);
     setLoopVariable(execution, NUMBER_OF_COMPLETED_INSTANCES, 0);
     setLoopVariable(execution, NUMBER_OF_ACTIVE_INSTANCES, 1);

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/EventSubscriptionDeclaration.java
Patch:
@@ -26,6 +26,7 @@
 import org.camunda.bpm.engine.impl.persistence.entity.SignalEventSubscriptionEntity;
 import org.camunda.bpm.engine.impl.pvm.PvmScope;
 import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
+import org.camunda.bpm.engine.impl.pvm.runtime.LegacyBehavior;
 
 
 /**
@@ -121,6 +122,8 @@ private EventSubscriptionEntity createEventSubscription(ExecutionEntity executio
     }
 
     eventSubscriptionEntity.insert();
+    LegacyBehavior.removeLegacySubscriptionOnParent(execution, eventSubscriptionEntity);
+
     return eventSubscriptionEntity;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/PvmExecutionImpl.java
Patch:
@@ -1040,8 +1040,10 @@ public Map<ScopeImpl, PvmExecutionImpl> createActivityExecutionMapping() {
 
     // if
     // - this is a scope execution currently executing a non scope activity
+    // - or it is not scope but the current activity is (e.g. can happen during activity end, when the actual
+    //   scope execution has been removed and the concurrent parent has been set to the scope activity)
     // - or it is asyncBefore/asyncAfter
-    if (!currentActivity.isScope() || activityInstanceId == null) {
+    if (!currentActivity.isScope() || activityInstanceId == null || (currentActivity.isScope() && !isScope())) {
       currentActivity = currentActivity.getFlowScope();
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationCancelActivity.java
Patch:
@@ -38,9 +38,9 @@ public void execute(PvmExecutionImpl execution) {
 
     PvmExecutionImpl propagatingExecution = null;
 
-    if(execution.isConcurrent()) {
+    if(LegacyBehavior.isConcurrentScope(execution)) {
       // this is legacy behavior
-      LegacyBehavior.cancelConcurrentScope(execution, cancellingActivity);
+      LegacyBehavior.cancelConcurrentScope(execution, (PvmActivity) cancellingActivity.getEventScope());
       propagatingExecution = execution;
     }
     else {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/TransactionContext.java
Patch:
@@ -44,4 +44,6 @@ public interface TransactionContext {
    */
   void addTransactionListener(TransactionState transactionState, TransactionListener transactionListener);
 
+  boolean isTransactionActive();
+
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -125,8 +125,6 @@ public class DbSqlSessionFactory implements SessionFactory {
     databaseSpecificDummyTable.put(MYSQL, "");
     databaseSpecificTrueConstant.put(MYSQL, "1");
     databaseSpecificFalseConstant.put(MYSQL, "0");
-    addDatabaseSpecificStatement(MYSQL, "selectNextJobsToExecute", "selectNextJobsToExecute_mysql");
-    addDatabaseSpecificStatement(MYSQL, "selectExclusiveJobsToExecute", "selectExclusiveJobsToExecute_mysql");
     addDatabaseSpecificStatement(MYSQL, "selectProcessDefinitionsByQueryCriteria", "selectProcessDefinitionsByQueryCriteria_mysql");
     addDatabaseSpecificStatement(MYSQL, "selectProcessDefinitionCountByQueryCriteria", "selectProcessDefinitionCountByQueryCriteria_mysql");
     addDatabaseSpecificStatement(MYSQL, "selectDeploymentsByQueryCriteria", "selectDeploymentsByQueryCriteria_mysql");

File: engine/src/test/java/org/camunda/bpm/application/impl/embedded/EmbeddedProcessApplicationTest.java
Patch:
@@ -77,7 +77,9 @@ public void testDeployAppWithCustomEngine() {
     ProcessEngineConfiguration configuration = ((ProcessEngineImpl) processEngine).getProcessEngineConfiguration();
 
     // assert engine properties specified
-    assertEquals(true, configuration.isJobExecutorDeploymentAware());
+    assertTrue(configuration.isJobExecutorDeploymentAware());
+    assertTrue(configuration.isJobExecutorPreferTimerJobs());
+    assertTrue(configuration.isJobExecutorAcquireByDueDate());
     assertEquals(5, configuration.getJdbcMaxActiveConnections());
 
     processApplication.undeploy();

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/DeploymentAwareJobExecutorTest.java
Patch:
@@ -212,7 +212,7 @@ public void testIntermediateTimerEvent() {
 
     Job existingJob = managementService.createJobQuery().singleResult();
 
-    ClockUtil.setCurrentTime(new Date(System.currentTimeMillis()+1000));
+    ClockUtil.setCurrentTime(new Date(System.currentTimeMillis() + 61 * 1000));
 
     List<JobEntity> acquirableJobs = findAcquirableJobs();
 

File: qa/performance-tests-engine/src/main/java/org/camunda/bpm/qa/performance/engine/steps/CompleteTaskStep.java
Patch:
@@ -16,13 +16,12 @@
 
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.qa.performance.engine.framework.PerfTestRunContext;
-import org.camunda.bpm.qa.performance.engine.framework.PerfTestStepBehavior;
 
 /**
  * @author Daniel Meyer, Ingo Richtsmeier
  *
  */
-public class CompleteTaskStep extends ProcessEngineAwareStep implements PerfTestStepBehavior {
+public class CompleteTaskStep extends ProcessEngineAwareStep {
 
   protected String taskIdKey;
   private Map<String, Object> processVariables;

File: qa/performance-tests-engine/src/main/java/org/camunda/bpm/qa/performance/engine/steps/CorrelateMessageStep.java
Patch:
@@ -15,13 +15,12 @@
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.runtime.Execution;
 import org.camunda.bpm.qa.performance.engine.framework.PerfTestRunContext;
-import org.camunda.bpm.qa.performance.engine.framework.PerfTestStepBehavior;
 
 /**
  * @author Daniel Meyer
  *
  */
-public class CorrelateMessageStep extends ProcessEngineAwareStep implements PerfTestStepBehavior {
+public class CorrelateMessageStep extends ProcessEngineAwareStep {
 
   protected String message;
   protected String processInstanceKey;

File: qa/performance-tests-engine/src/main/java/org/camunda/bpm/qa/performance/engine/benchmark/BenchmarkAggregator.java
Patch:
@@ -35,7 +35,7 @@ public BenchmarkAggregator(String resultsFolderPath) {
     super(resultsFolderPath);
   }
 
-  protected TabularResultSet createAggrgatedResultsInstance() {
+  protected TabularResultSet createAggregatedResultsInstance() {
     return new TabularResultSet();
   }
 

File: qa/performance-tests-engine/src/main/java/org/camunda/bpm/qa/performance/engine/benchmark/BenchmarkLongtermAggregator.java
Patch:
@@ -32,7 +32,7 @@ public BenchmarkLongtermAggregator(String resultsFolderPath) {
   }
 
   @Override
-  protected TabularResultSet createAggrgatedResultsInstance() {
+  protected TabularResultSet createAggregatedResultsInstance() {
     return new TabularResultSet();
   }
 

File: qa/performance-tests-engine/src/main/java/org/camunda/bpm/qa/performance/engine/framework/aggregate/SqlStatementCountAggregator.java
Patch:
@@ -41,7 +41,7 @@ public SqlStatementCountAggregator(String resultsFolderPath) {
     super(resultsFolderPath);
   }
 
-  protected TabularResultSet createAggrgatedResultsInstance() {
+  protected TabularResultSet createAggregatedResultsInstance() {
     TabularResultSet tabularResultSet = new TabularResultSet();
 
     List<String> resultColumnNames = tabularResultSet.getResultColumnNames();

File: qa/performance-tests-engine/src/main/java/org/camunda/bpm/qa/performance/engine/framework/aggregate/TabularResultAggregator.java
Patch:
@@ -50,7 +50,7 @@ public TabularResultAggregator sortResults(boolean isSortingEnabled) {
   }
 
   public TabularResultSet execute() {
-    TabularResultSet tabularResultSet = createAggrgatedResultsInstance();
+    TabularResultSet tabularResultSet = createAggregatedResultsInstance();
 
     File[] resultFiles = resultDirectory.listFiles();
     for (File resultFile : resultFiles) {
@@ -83,7 +83,7 @@ protected void processFile(File resultFile, TabularResultSet tabularResultSet) {
 
   }
 
-  protected abstract TabularResultSet createAggrgatedResultsInstance();
+  protected abstract TabularResultSet createAggregatedResultsInstance();
 
   protected abstract void processResults(PerfTestResults results, TabularResultSet tabularResultSet);
 

File: qa/performance-tests-engine/src/main/java/org/camunda/bpm/qa/performance/engine/sqlstatementlog/SqlStatementCountAggregator.java
Patch:
@@ -43,7 +43,7 @@ public SqlStatementCountAggregator(String resultsFolderPath) {
     super(resultsFolderPath);
   }
 
-  protected TabularResultSet createAggrgatedResultsInstance() {
+  protected TabularResultSet createAggregatedResultsInstance() {
     TabularResultSet tabularResultSet = new TabularResultSet();
 
     List<String> resultColumnNames = tabularResultSet.getResultColumnNames();

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -924,8 +924,8 @@ protected void initPersistenceProviders() {
   protected void ensurePrefixAndSchemaFitToegether(String prefix, String schema) {
     if(schema == null) {
       return;
-    } else if(!prefix.equals(schema + ".")){
-      throw new ProcessEngineException("When setting a schema the prefix has to be schema + \'.\'. Received schema: " + schema + " prefix: " + prefix);
+    } else if(prefix == null || (prefix != null && !prefix.startsWith(schema + "."))){
+      throw new ProcessEngineException("When setting a schema the prefix has to be schema + '.'. Received schema: " + schema + " prefix: " + prefix);
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/entity/runtime/CaseExecutionEntityVariableStore.java
Patch:
@@ -23,8 +23,6 @@
  */
 public class CaseExecutionEntityVariableStore extends AbstractPersistentVariableStore {
 
-  private static final long serialVersionUID = 1L;
-
   protected CaseExecutionEntity caseExecutionEntity;
 
   public CaseExecutionEntityVariableStore(CaseExecutionEntity executionEntity) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/instance/CoreExecution.java
Patch:
@@ -52,6 +52,7 @@ public abstract class CoreExecution extends AbstractVariableScope implements Bas
 
   // atomic operations ////////////////////////////////////////////////////////
 
+  @SuppressWarnings("unchecked")
   public <T extends CoreExecution> void performOperation(CoreAtomicOperation<T> operation) {
     if (log.isLoggable(Level.FINEST)) {
       log.finest("AtomicOperation: " + operation + " on " + this);

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/event/HistoryEventTypes.java
Patch:
@@ -47,6 +47,8 @@ public enum HistoryEventTypes implements HistoryEventType {
   VARIABLE_INSTANCE_CREATE("variable-instance", "create"),
   /** fired when a variable instance is updated. */
   VARIABLE_INSTANCE_UPDATE("variable-instance", "update"),
+  /** fired when a variable instance is updated. */
+  VARIABLE_INSTANCE_UPDATE_DETAIL("variable-instance", "update-detail"),
   /** fired when a variable instance is deleted. */
   VARIABLE_INSTANCE_DELETE("variable-instance", "delete"),
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/handler/DbHistoryEventHandler.java
Patch:
@@ -16,7 +16,6 @@
 
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.db.entitymanager.DbEntityManager;
-import org.camunda.bpm.engine.impl.history.HistoryLevel;
 import org.camunda.bpm.engine.impl.history.event.HistoricScopeInstanceEvent;
 import org.camunda.bpm.engine.impl.history.event.HistoricVariableUpdateEventEntity;
 import org.camunda.bpm.engine.impl.history.event.HistoryEvent;
@@ -82,7 +81,8 @@ protected void insertHistoricVariableUpdateEntity(HistoricVariableUpdateEventEnt
     DbEntityManager dbEntityManager = getDbEntityManager();
 
     // insert update only if history level = FULL
-    if(Context.getProcessEngineConfiguration().getHistoryLevel().equals(HistoryLevel.HISTORY_LEVEL_FULL)) {
+    if(Context.getProcessEngineConfiguration().getHistoryLevel()
+        .isHistoryEventProduced(HistoryEventTypes.VARIABLE_INSTANCE_UPDATE_DETAIL, historyEvent)) {
 
       // insert byte array entity (if applicable)
       byte[] byteValue = historyEvent.getByteValue();

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/model/CallableElement.java
Patch:
@@ -18,9 +18,9 @@
 
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.delegate.VariableScope;
-import org.camunda.bpm.engine.impl.core.variable.VariableMapImpl;
 import org.camunda.bpm.engine.impl.core.variable.mapping.value.ParameterValueProvider;
 import org.camunda.bpm.engine.variable.VariableMap;
+import org.camunda.bpm.engine.variable.Variables;
 
 /**
  * @author Roman Smirnov
@@ -193,7 +193,7 @@ public VariableMap getOutputVariables(VariableScope variableScope) {
   // variables //////////////////////////////////////////////////////////////////
 
   protected VariableMap getVariables(List<CallableElementParameter> params, VariableScope variableScope) {
-    VariableMap result = new VariableMapImpl();
+    VariableMap result = Variables.createVariables();
 
     for (CallableElementParameter param : params) {
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/model/CallableElementParameter.java
Patch:
@@ -31,7 +31,7 @@ public class CallableElementParameter {
   public Object getSource(VariableScope variableScope) {
     if (sourceValueProvider instanceof ConstantValueProvider) {
       String variableName = (String) sourceValueProvider.getValue(variableScope);
-      return variableScope.getVariable(variableName);
+      return variableScope.getVariableTyped(variableName);
 
     } else {
       return sourceValueProvider.getValue(variableScope);

File: engine/src/main/java/org/camunda/bpm/application/impl/metadata/spi/ProcessArchiveXml.java
Patch:
@@ -19,6 +19,7 @@
  * <p>Java API representation of a ProcessArchive definition inside a processes.xml file</p>
  *
  * @author Daniel Meyer
+ * @author Ronny Bräunlich
  *
  */
 public interface ProcessArchiveXml {
@@ -89,6 +90,8 @@ public interface ProcessArchiveXml {
   public static final String PROP_ADDITIONAL_RESOURCE_SUFFIXES = "additionalResourceSuffixes";
   public static final String PROP_ADDITIONAL_RESOURCE_SUFFIXES_SEPARATOR = ",";
 
+  public static final String PROP_RESUME_PREVIOUS_BY = "resumePreviousBy";
+
   /**
    * @return the name of the process archive. Must not be null.
    */

File: engine/src/main/java/org/camunda/bpm/application/impl/metadata/spi/ProcessesXml.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.camunda.bpm.application.impl.metadata.ProcessArchiveXmlImpl;
 import org.camunda.bpm.container.impl.metadata.spi.ProcessEngineXml;
+import org.camunda.bpm.engine.repository.ResumePreviousBy;
 
 /**
  * <p>Java API representation of the {@link ProcessesXml} Metadata.</p>
@@ -62,6 +63,7 @@ public List<ProcessArchiveXml> getProcessArchives() {
       properties.put(ProcessArchiveXml.PROP_IS_DELETE_UPON_UNDEPLOY, Boolean.FALSE.toString());
       properties.put(ProcessArchiveXml.PROP_IS_SCAN_FOR_PROCESS_DEFINITIONS, Boolean.TRUE.toString());
       properties.put(ProcessArchiveXml.PROP_IS_DEPLOY_CHANGED_ONLY, Boolean.FALSE.toString());
+      properties.put(ProcessArchiveXml.PROP_RESUME_PREVIOUS_BY, ResumePreviousBy.RESUME_BY_PROCESS_DEFINITION_KEY);
 
       return processArchives;
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/PvmExecutionImpl.java
Patch:
@@ -1012,8 +1012,8 @@ public void leaveActivityInstance() {
         log.fine("[LEAVE] "+ this + ": "+activityInstanceId );
       }
 
-      activityInstanceId = getParentActivityInstanceId();
     }
+    activityInstanceId = getParentActivityInstanceId();
 
     activityInstanceState = ActivityInstanceState.DEFAULT.getStateCode();
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/MultiInstanceActivityBehavior.java
Patch:
@@ -22,6 +22,7 @@
 
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.delegate.Expression;
+import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.delegate.ActivityExecution;
 import org.camunda.bpm.engine.impl.pvm.delegate.CompositeActivityBehavior;
 import org.camunda.bpm.engine.variable.value.IntegerValue;
@@ -66,10 +67,10 @@ else if (nrOfInstances < 0) {
     }
   }
 
-  protected void performInstance(ActivityExecution execution, int loopCounter) {
+  protected void performInstance(ActivityExecution execution, PvmActivity activity, int loopCounter) {
     setLoopVariable(execution, LOOP_COUNTER, loopCounter);
     evaluateCollectionVariable(execution, loopCounter);
-    execution.executeActivity(execution.getActivity().getActivities().get(0));
+    execution.executeActivity(activity);
   }
 
   protected void evaluateCollectionVariable(ActivityExecution execution, int loopCounter) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/SequentialMultiInstanceActivityBehavior.java
Patch:
@@ -27,7 +27,7 @@ protected void createInstances(ActivityExecution execution, int nrOfInstances) t
     setLoopVariable(execution, NUMBER_OF_COMPLETED_INSTANCES, 0);
     setLoopVariable(execution, NUMBER_OF_ACTIVE_INSTANCES, 1);
 
-    performInstance(execution, 0);
+    performInstance(execution, execution.getActivity().getActivities().get(0), 0);
   }
 
   public void complete(ActivityExecution scopeExecution) {
@@ -41,7 +41,7 @@ public void complete(ActivityExecution scopeExecution) {
       leave(scopeExecution);
     }
     else {
-      performInstance(scopeExecution, loopCounter);
+      performInstance(scopeExecution, scopeExecution.getActivity().getActivities().get(0), loopCounter);
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityEnd.java
Patch:
@@ -77,7 +77,6 @@ public void execute(PvmExecutionImpl execution) {
     else {
       // 2. flowScope != process definition
       PvmActivity flowScopeActivity = (PvmActivity) flowScope;
-      propagatingExecution.setActivity(flowScopeActivity);
 
       ActivityBehavior activityBehavior = flowScopeActivity.getActivityBehavior();
       if (activityBehavior instanceof CompositeActivityBehavior) {
@@ -88,6 +87,7 @@ public void execute(PvmExecutionImpl execution) {
         }
         else {
           // 2.2 Scope Execution => composite behavior.complete()
+          propagatingExecution.setActivity(flowScopeActivity);
           compositeActivityBehavior.complete(propagatingExecution);
         }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationCreateScope.java
Patch:
@@ -27,6 +27,9 @@ public abstract class PvmAtomicOperationCreateScope implements PvmAtomicOperatio
 
   public void execute(PvmExecutionImpl execution) {
 
+    // reset activity instance id before creating the scope
+    execution.setActivityInstanceId(execution.getParentActivityInstanceId());
+
     PvmExecutionImpl propagatingExecution = null;
     PvmActivity activity = execution.getActivity();
     if (activity.isScope()) {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/ProcessInstanceModificationEventTest.java
Patch:
@@ -342,8 +342,6 @@ public void testStartBeforeCancelEndEvent() {
 
     assertThat(updatedTree).hasStructure(
       describeActivityInstanceTree(processInstance.getProcessDefinitionId())
-      // TODO: fix activity instance tree first, then remove next instruction
-        .activity("tx")
         .activity("afterCancellation")
         .activity("afterSuccess")
       .done());

File: engine/src/main/java/org/camunda/bpm/engine/impl/json/JsonTaskQueryConverter.java
Patch:
@@ -272,12 +272,12 @@ public TaskQuery toObject(JSONObject json) {
     if (json.has(CANDIDATE_GROUP)) {
       query.taskCandidateGroup(json.getString(CANDIDATE_GROUP));
     }
-    if (json.has(INCLUDE_ASSIGNED_TASKS) && json.getBoolean(INCLUDE_ASSIGNED_TASKS)){
-      query.includeAssignedTasks();
-    }
     if (json.has(CANDIDATE_GROUPS) && !json.has(CANDIDATE_USER) && !json.has(CANDIDATE_GROUP)) {
       query.taskCandidateGroupIn(getList(json.getJSONArray(CANDIDATE_GROUPS)));
     }
+    if (json.has(INCLUDE_ASSIGNED_TASKS) && json.getBoolean(INCLUDE_ASSIGNED_TASKS)) {
+      query.includeAssignedTasksInternal();
+    }
     if (json.has(PROCESS_INSTANCE_ID)) {
       query.processInstanceId(json.getString(PROCESS_INSTANCE_ID));
     }

File: engine-plugins/connect-plugin/src/main/java/org/camunda/connect/plugin/impl/ConnectorParseListener.java
Patch:
@@ -19,15 +19,14 @@
 import org.camunda.bpm.engine.BpmnParseException;
 import org.camunda.bpm.engine.impl.bpmn.parser.AbstractBpmnParseListener;
 import org.camunda.bpm.engine.impl.core.variable.mapping.IoMapping;
-import org.camunda.bpm.engine.impl.pvm.PvmScope;
 import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 import org.camunda.bpm.engine.impl.pvm.process.ScopeImpl;
 import org.camunda.bpm.engine.impl.util.xml.Element;
 
 public class ConnectorParseListener extends AbstractBpmnParseListener {
 
   @Override
-  public void parseServiceTask(Element serviceTaskElement, PvmScope scope, ActivityImpl activity) {
+  public void parseServiceTask(Element serviceTaskElement, ScopeImpl scope, ActivityImpl activity) {
     Element connectorDefinition = findCamundaExtensionElement(serviceTaskElement, "connector");
     if (connectorDefinition != null) {
       Element connectorIdElement = connectorDefinition.element("connectorId");

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/AbstractBpmnActivityBehavior.java
Patch:
@@ -82,8 +82,7 @@ protected void createCompensateEventSubscription(ActivityExecution execution, Ac
     // the compensate event subscription is created "at the level of subprocess" of the the current activity.
     ActivityExecution levelOfSubprocessScopeExecution = execution.findExecutionForFlowScope(levelOfSubprocessScope);
 
-    CompensateEventSubscriptionEntity compensateEventSubscriptionEntity = CompensateEventSubscriptionEntity.createAndInsert((ExecutionEntity) levelOfSubprocessScopeExecution);
-    compensateEventSubscriptionEntity.setActivity(compensationHandler);
+    CompensateEventSubscriptionEntity.createAndInsert((ExecutionEntity) levelOfSubprocessScopeExecution, compensationHandler);
   }
 
   protected void propagateExceptionAsError(Exception exception, ActivityExecution execution) throws Exception {

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/CancelBoundaryEventActivityBehavior.java
Patch:
@@ -18,7 +18,7 @@
  *
  * @author Daniel Meyer
  */
-public class CancelBoundaryEventActivityBehavior extends AbstractBpmnActivityBehavior {
+public class CancelBoundaryEventActivityBehavior extends BoundaryEventActivityBehavior {
 
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/CancelEndEventActivityBehavior.java
Patch:
@@ -51,6 +51,7 @@ public void execute(ActivityExecution execution) throws Exception {
   }
 
   protected void leave(ActivityExecution execution) {
+    // continue via the appropriate cancel boundary event
     ScopeImpl eventScope = (ScopeImpl) cancelBoundaryEvent.getEventScope();
     eventScope = LegacyBehavior.get().normalizeSecondNonScope(eventScope);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/TerminateEndEventActivityBehavior.java
Patch:
@@ -18,7 +18,7 @@
 /**
  * <p>The BPMN terminate End Event.</p>
  *
- * <p>The start behavior of the event based gateway is {@link ActivityStartBehavior#INTERRUPT_FLOW_SCOPE}.
+ * <p>The start behavior of the terminate end event is {@link ActivityStartBehavior#INTERRUPT_FLOW_SCOPE}.
  * as a result, the current scope will be interrupted (all concurrent executions cancelled) and this
  * behavior is entered with the scope execution.</p>
  *

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/helper/CompensationUtil.java
Patch:
@@ -111,8 +111,7 @@ public static void createEventScopeExecution(ExecutionEntity execution) {
         eventSubscriptionEntity = eventSubscriptionEntity.moveUnder(eventScopeExecution);
       }
 
-      CompensateEventSubscriptionEntity eventSubscription = CompensateEventSubscriptionEntity.createAndInsert(levelOfSubprocessScopeExecution);
-      eventSubscription.setActivity(execution.getActivity());
+      CompensateEventSubscriptionEntity eventSubscription = CompensateEventSubscriptionEntity.createAndInsert(levelOfSubprocessScopeExecution, execution.getActivity());
       eventSubscription.setConfiguration(eventScopeExecution.getId());
 
     }

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/task/TaskQueryDto.java
Patch:
@@ -1235,7 +1235,7 @@ public static TaskQueryDto fromQuery(Query<?, ?> query) {
     dto.candidateUser = taskQuery.getCandidateUser();
     dto.candidateGroup = taskQuery.getCandidateGroup();
     dto.candidateGroups = taskQuery.getCandidateGroupsInternal();
-    dto.includeAssignedTasks = taskQuery.isIncludeAssignedTasks();
+    dto.includeAssignedTasks = taskQuery.isIncludeAssignedTasksInternal();
 
     dto.processInstanceBusinessKey = taskQuery.getProcessInstanceBusinessKey();
     dto.processInstanceBusinessKeyLike = taskQuery.getProcessInstanceBusinessKeyLike();

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractFilterRestServiceInteractionTest.java
Patch:
@@ -334,7 +334,7 @@ public void testGetFilterWithCandidateGroupQuery() {
       .statusCode(Status.OK.getStatusCode())
       .body("query.candidateGroup", equalTo("abc"))
       .body("query.containsKey('candidateGroups')", is(false))
-      .body("query.includeAssignedTasks", is(false))
+      .body("query.containsKey('includeAssignedTasks')", is(false))
     .when()
       .get(SINGLE_FILTER_URL);
   }
@@ -352,7 +352,7 @@ public void testGetFilterWithCandidateUserQuery() {
       .statusCode(Status.OK.getStatusCode())
       .body("query.candidateUser", equalTo("abc"))
       .body("query.containsKey('candidateGroups')", is(false))
-      .body("query.includeAssignedTasks", is(false))
+      .body("query.containsKey('includeAssignedTasks')", is(false))
   .when()
       .get(SINGLE_FILTER_URL);
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/json/JsonTaskQueryConverter.java
Patch:
@@ -132,6 +132,7 @@ public JSONObject toJsonObject(TaskQuery taskQuery) {
     addField(json, CANDIDATE_USER, query.getCandidateUser());
     addField(json, CANDIDATE_GROUP, query.getCandidateGroup());
     addListField(json, CANDIDATE_GROUPS, query.getCandidateGroupsInternal());
+    addField(json, INCLUDE_ASSIGNED_TASKS, query.isIncludeAssignedTasksInternal());
     addField(json, PROCESS_INSTANCE_ID, query.getProcessInstanceId());
     addField(json, EXECUTION_ID, query.getExecutionId());
     addArrayField(json, ACTIVITY_INSTANCE_ID_IN, query.getActivityInstanceIdIn());

File: engine/src/test/java/org/camunda/bpm/engine/test/api/filter/FilterTaskQueryTest.java
Patch:
@@ -467,8 +467,8 @@ public void testTaskQueryCandidateIncludeAssignedTasks() {
     query.taskCandidateUser(testUser.getId());
     query.includeAssignedTasks();
 
-    filter.setQuery(query);
-    query = filter.getQuery();
+    saveQuery(query);
+    query = filterService.getFilter(filter.getId()).getQuery();
 
     assertEquals(testUser.getId(), query.getCandidateUser());
     assertTrue(query.isIncludeAssignedTasks());

File: engine-plugins/connect-plugin/src/main/java/org/camunda/connect/plugin/impl/ConnectorParseListener.java
Patch:
@@ -19,14 +19,15 @@
 import org.camunda.bpm.engine.BpmnParseException;
 import org.camunda.bpm.engine.impl.bpmn.parser.AbstractBpmnParseListener;
 import org.camunda.bpm.engine.impl.core.variable.mapping.IoMapping;
+import org.camunda.bpm.engine.impl.pvm.PvmScope;
 import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 import org.camunda.bpm.engine.impl.pvm.process.ScopeImpl;
 import org.camunda.bpm.engine.impl.util.xml.Element;
 
 public class ConnectorParseListener extends AbstractBpmnParseListener {
 
   @Override
-  public void parseServiceTask(Element serviceTaskElement, ScopeImpl scope, ActivityImpl activity) {
+  public void parseServiceTask(Element serviceTaskElement, PvmScope scope, ActivityImpl activity) {
     Element connectorDefinition = findCamundaExtensionElement(serviceTaskElement, "connector");
     if (connectorDefinition != null) {
       Element connectorIdElement = connectorDefinition.element("connectorId");

File: engine/src/main/java/org/camunda/bpm/engine/impl/ActivityExecutionMapping.java
Patch:
@@ -87,7 +87,7 @@ protected void assignExecutionsToActivities(List<ExecutionEntity> leaves) {
             scopeExecution = scopeExecution.getParent();
           }
 
-          assignToActivity(scopeExecution, activity.getParentScope());
+          assignToActivity(scopeExecution, activity.getFlowScope());
         }
 
 
@@ -111,15 +111,15 @@ protected void assignToActivity(ExecutionEntity execution, ScopeImpl activity) {
     else {
 
       if(!activity.isScope() && execution.isScope()) {
-        assignToActivity(execution, activity.getParentScope());
+        assignToActivity(execution, activity.getFlowScope());
       }
       else {
         ExecutionEntity parent = execution.getParent();
 
         if (!parent.isScope()) {
           parent = parent.getParent();
         }
-        assignToActivity(parent, activity.getParentScope());
+        assignToActivity(parent, activity.getFlowScope());
       }
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/BoundaryEventActivityBehavior.java
Patch:
@@ -20,7 +20,7 @@
  *
  * <p>The corresponding activity must either be
  * <ul>
- *  <li>{@link PvmActivity#isCancelScope()} in case of an interrupting boundary event. In this case
+ *  <li>{@link PvmActivity#isCancelActivity()} in case of an interrupting boundary event. In this case
  *  the scope to which the boundary event is attached will already be cancelled when this behavior is executed.</li>
  *  <li>{@link PvmActivity#isConcurrent()} in case of a non-interrupting boundary event. In this case
  *  the new concurrent execution will already have been created when this behavior is executed.</li>

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/ParallelGatewayActivityBehavior.java
Patch:
@@ -70,7 +70,7 @@ public void execute(ActivityExecution execution) throws Exception {
       
       // Fork
       log.fine("parallel gateway '"+activity.getId()+"' activates: "+nbrOfExecutionsJoined+" of "+nbrOfExecutionsToJoin+" joined");
-      execution.takeAll(outgoingTransitions, joinedExecutions);
+      execution.leaveActivityViaTransitions(outgoingTransitions, joinedExecutions);
       
     } else if (log.isLoggable(Level.FINE)){
       log.fine("parallel gateway '"+activity.getId()+"' does not activate: "+nbrOfExecutionsJoined+" of "+nbrOfExecutionsToJoin+" joined");

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/ErrorEventDefinition.java
Patch:
@@ -65,7 +65,7 @@ public void setPrecedence(Integer precedence) {
   }
 
   public boolean catchesError(String errorCode) {
-    return errorCode == null || this.errorCode == null || this.errorCode.equals(errorCode) ;
+    return this.errorCode == null || this.errorCode.equals(errorCode);
   }
 
   public boolean catchesException(Exception ex) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ActivityBeforeInstantiationCmd.java
Patch:
@@ -13,6 +13,7 @@
 package org.camunda.bpm.engine.impl.cmd;
 
 import org.camunda.bpm.engine.impl.core.model.CoreModelElement;
+import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 import org.camunda.bpm.engine.impl.pvm.process.ProcessDefinitionImpl;
 import org.camunda.bpm.engine.impl.pvm.process.ScopeImpl;
@@ -36,7 +37,7 @@ public ActivityBeforeInstantiationCmd(String processInstanceId, String activityI
   }
 
   protected ScopeImpl getTargetFlowScope(ProcessDefinitionImpl processDefinition) {
-    ActivityImpl activity = processDefinition.findActivity(activityId);
+    PvmActivity activity = processDefinition.findActivity(activityId);
     return activity.getFlowScope();
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ActivityCancellationCmd.java
Patch:
@@ -77,7 +77,7 @@ protected Set<String> collectParentScopeIdsForActivity(ProcessDefinitionImpl pro
 
     while (scope != null) {
       parentScopeIds.add(scope.getId());
-      scope = scope.getParentScope();
+      scope = scope.getFlowScope();
     }
 
     return parentScopeIds;

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetActivityInstanceCmd.java
Patch:
@@ -254,8 +254,8 @@ public static ScopeImpl getActivity(ExecutionEntity executionEntity) {
       }
       ActivityImpl scope = executionEntity.getActivity();
       for (int j = 0; j < i; j++) {
-        if(scope.getParentActivity() != null) {
-        scope = scope.getParentActivity();
+        if(scope.getParentFlowScopeActivity() != null) {
+        scope = scope.getParentFlowScopeActivity();
         }
       }
       return scope;

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ModifyProcessInstanceCmd.java
Patch:
@@ -49,6 +49,8 @@ public ExecutionEntity call() throws Exception {
     AuthorizationManager authorizationManager = commandContext.getAuthorizationManager();
     authorizationManager.checkUpdateProcessInstance(processInstance);
 
+    processInstance.setPreserveScope(true);
+
     for (AbstractProcessInstanceModificationCommand instruction : builder.getModificationOperations()) {
       instruction.setSkipCustomListeners(builder.isSkipCustomListeners());
       instruction.setSkipIoMappings(builder.isSkipIoMappings());

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SetProcessDefinitionVersionCmd.java
Patch:
@@ -37,7 +37,7 @@
 import org.camunda.bpm.engine.impl.persistence.entity.JobEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.ProcessDefinitionEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.TaskEntity;
-import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
+import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.process.ProcessDefinitionImpl;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 
@@ -198,7 +198,7 @@ protected void validateAndSwitchVersionOfExecution(CommandContext commandContext
     // check that the new process definition version contains the current activity
     if (execution.getActivity() != null) {
       String activityId = execution.getActivity().getId();
-      ActivityImpl newActivity = newProcessDefinition.findActivity(activityId);
+      PvmActivity newActivity = newProcessDefinition.findActivity(activityId);
 
       if (newActivity == null) {
         throw new ProcessEngineException(

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/behavior/CmmnCompositeActivityBehavior.java
Patch:
@@ -19,7 +19,7 @@
  * @author Roman Smirnov
  *
  */
-public interface CompositeActivityBehavior extends CmmnActivityBehavior {
+public interface CmmnCompositeActivityBehavior extends CmmnActivityBehavior {
 
   public void handleChildDisabled(CmmnActivityExecution execution, CmmnActivityExecution child);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/behavior/StageActivityBehavior.java
Patch:
@@ -39,7 +39,7 @@
  * @author Roman Smirnov
  *
  */
-public class StageActivityBehavior extends StageOrTaskActivityBehavior implements CompositeActivityBehavior {
+public class StageActivityBehavior extends StageOrTaskActivityBehavior implements CmmnCompositeActivityBehavior {
 
   // start /////////////////////////////////////////////////////////////////////
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/operation/AbstractAtomicOperationCaseExecutionComplete.java
Patch:
@@ -22,7 +22,7 @@
 
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.impl.cmmn.behavior.CmmnActivityBehavior;
-import org.camunda.bpm.engine.impl.cmmn.behavior.CompositeActivityBehavior;
+import org.camunda.bpm.engine.impl.cmmn.behavior.CmmnCompositeActivityBehavior;
 import org.camunda.bpm.engine.impl.cmmn.behavior.TransferVariablesActivityBehavior;
 import org.camunda.bpm.engine.impl.cmmn.execution.CmmnExecution;
 import org.camunda.bpm.engine.impl.pvm.delegate.SubProcessActivityBehavior;
@@ -103,8 +103,8 @@ protected void postTransitionNotification(CmmnExecution execution) {
     CmmnExecution parent = execution.getParent();
     if (parent != null) {
       CmmnActivityBehavior behavior = getActivityBehavior(parent);
-      if (behavior instanceof CompositeActivityBehavior) {
-        CompositeActivityBehavior compositeBehavior = (CompositeActivityBehavior) behavior;
+      if (behavior instanceof CmmnCompositeActivityBehavior) {
+        CmmnCompositeActivityBehavior compositeBehavior = (CmmnCompositeActivityBehavior) behavior;
         compositeBehavior.handleChildCompletion(parent, execution);
       }
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/operation/AbstractAtomicOperationCaseExecutionSuspend.java
Patch:
@@ -16,7 +16,7 @@
 import static org.camunda.bpm.engine.impl.util.ActivityBehaviorUtil.getActivityBehavior;
 
 import org.camunda.bpm.engine.impl.cmmn.behavior.CmmnActivityBehavior;
-import org.camunda.bpm.engine.impl.cmmn.behavior.CompositeActivityBehavior;
+import org.camunda.bpm.engine.impl.cmmn.behavior.CmmnCompositeActivityBehavior;
 import org.camunda.bpm.engine.impl.cmmn.execution.CmmnExecution;
 
 /**
@@ -41,8 +41,8 @@ protected void postTransitionNotification(CmmnExecution execution) {
 
   protected void notifyParent(CmmnExecution parent, CmmnExecution execution) {
     CmmnActivityBehavior behavior = getActivityBehavior(parent);
-    if (behavior instanceof CompositeActivityBehavior) {
-      CompositeActivityBehavior compositeBehavior = (CompositeActivityBehavior) behavior;
+    if (behavior instanceof CmmnCompositeActivityBehavior) {
+      CmmnCompositeActivityBehavior compositeBehavior = (CmmnCompositeActivityBehavior) behavior;
       compositeBehavior.handleChildSuspension(parent, execution);
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/operation/AbstractAtomicOperationCaseExecutionTerminate.java
Patch:
@@ -16,7 +16,7 @@
 import static org.camunda.bpm.engine.impl.util.ActivityBehaviorUtil.getActivityBehavior;
 
 import org.camunda.bpm.engine.impl.cmmn.behavior.CmmnActivityBehavior;
-import org.camunda.bpm.engine.impl.cmmn.behavior.CompositeActivityBehavior;
+import org.camunda.bpm.engine.impl.cmmn.behavior.CmmnCompositeActivityBehavior;
 import org.camunda.bpm.engine.impl.cmmn.execution.CmmnExecution;
 
 /**
@@ -45,8 +45,8 @@ protected void postTransitionNotification(CmmnExecution execution) {
 
   protected void notifyParent(CmmnExecution parent, CmmnExecution execution) {
     CmmnActivityBehavior behavior = getActivityBehavior(parent);
-    if (behavior instanceof CompositeActivityBehavior) {
-      CompositeActivityBehavior compositeBehavior = (CompositeActivityBehavior) behavior;
+    if (behavior instanceof CmmnCompositeActivityBehavior) {
+      CmmnCompositeActivityBehavior compositeBehavior = (CmmnCompositeActivityBehavior) behavior;
       compositeBehavior.handleChildTermination(parent, execution);
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/operation/AtomicOperationCaseExecutionDisable.java
Patch:
@@ -17,7 +17,7 @@
 import static org.camunda.bpm.engine.impl.util.ActivityBehaviorUtil.getActivityBehavior;
 
 import org.camunda.bpm.engine.impl.cmmn.behavior.CmmnActivityBehavior;
-import org.camunda.bpm.engine.impl.cmmn.behavior.CompositeActivityBehavior;
+import org.camunda.bpm.engine.impl.cmmn.behavior.CmmnCompositeActivityBehavior;
 import org.camunda.bpm.engine.impl.cmmn.execution.CmmnExecution;
 
 /**
@@ -47,8 +47,8 @@ protected void preTransitionNotification(CmmnExecution execution) {
     CmmnExecution parent = execution.getParent();
     if (parent != null) {
       CmmnActivityBehavior behavior = getActivityBehavior(parent);
-      if (behavior instanceof CompositeActivityBehavior) {
-        CompositeActivityBehavior compositeBehavior = (CompositeActivityBehavior) behavior;
+      if (behavior instanceof CmmnCompositeActivityBehavior) {
+        CmmnCompositeActivityBehavior compositeBehavior = (CmmnCompositeActivityBehavior) behavior;
         compositeBehavior.handleChildDisabled(parent, execution);
       }
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/event/CompensationEventHandler.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.List;
 
 import org.camunda.bpm.engine.ProcessEngineException;
-import org.camunda.bpm.engine.impl.bpmn.helper.ScopeUtil;
+import org.camunda.bpm.engine.impl.bpmn.helper.CompensationUtil;
 import org.camunda.bpm.engine.impl.bpmn.parser.BpmnParse;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.persistence.entity.CompensateEventSubscriptionEntity;
@@ -57,7 +57,7 @@ public void handleEvent(EventSubscriptionEntity eventSubscription, Object payloa
       compensatingExecution.setActive(true);
       // descend into scope:
       List<CompensateEventSubscriptionEntity> eventsForThisScope = compensatingExecution.getCompensateEventSubscriptions();
-      ScopeUtil.throwCompensationEvent(eventsForThisScope, compensatingExecution, false);
+      CompensationUtil.throwCompensationEvent(eventsForThisScope, compensatingExecution, false);
 
     } else {
       try {

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/AsyncContinuationJobHandler.java
Patch:
@@ -20,7 +20,7 @@
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
-import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
+import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.process.TransitionImpl;
 import org.camunda.bpm.engine.impl.pvm.runtime.operation.PvmAtomicOperation;
 
@@ -79,8 +79,8 @@ public void execute(String configuration, ExecutionEntity execution, CommandCont
 
     // reset transition id.
     if (transitionId != null) {
-      ActivityImpl activity = execution.getActivity();
-      TransitionImpl transition = activity.findOutgoingTransition(transitionId);
+      PvmActivity activity = execution.getActivity();
+      TransitionImpl transition = (TransitionImpl) activity.findOutgoingTransition(transitionId);
       execution.setTransition(transition);
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/MessageJobDeclaration.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.MessageEntity;
-import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
+import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.runtime.AtomicOperation;
 
 /**
@@ -46,7 +46,7 @@ protected MessageEntity newJobInstance(ExecutionEntity execution) {
 
   public void setJobHandlerConfiguration(MessageEntity message, ExecutionEntity execution, AtomicOperation executionOperation) {
     String configuration = executionOperation.getCanonicalName();
-    ActivityImpl activity = execution.getActivity();
+    PvmActivity activity = execution.getActivity();
 
     if(activity != null && activity.isAsyncAfter()) {
       if(execution.getTransition() != null) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/TimerExecuteNestedActivityJobHandler.java
Patch:
@@ -39,13 +39,13 @@ public String getType() {
 
   public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext) {
     String activityId = getKey(configuration);
-    ActivityImpl borderEventActivity = execution.getProcessDefinition().findActivity(activityId);
+    ActivityImpl activity = execution.getProcessDefinition().findActivity(activityId);
 
-    ensureNotNull("Error while firing timer: border event activity " + configuration + " not found", "borderEventActivity", borderEventActivity);
+    ensureNotNull("Error while firing timer: boundary event activity " + configuration + " not found", "boundary event activity", activity);
 
     try {
 
-      execution.executeActivity(borderEventActivity);
+      execution.executeEventHandlerActivity(activity);
 
     } catch (RuntimeException e) {
       log.log(Level.SEVERE, "exception during timer execution", e);

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/TimerStartEventSubprocessJobHandler.java
Patch:
@@ -40,7 +40,7 @@ public void execute(String configuration, ExecutionEntity execution, CommandCont
       .findActivity(activityId);
 
     if(eventSubprocessActivity != null) {
-      execution.executeActivity(eventSubprocessActivity);
+      execution.executeEventHandlerActivity(eventSubprocessActivity);
 
     } else {
       throw new ProcessEngineException("Error while triggering event subprocess using timer start event: cannot find activity with id '"+configuration+"'.");

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/PvmProcessInstance.java
Patch:
@@ -29,6 +29,8 @@ public interface PvmProcessInstance extends PvmExecution {
 
   PvmExecution findExecution(String activityId);
 
+  List<PvmExecution> findExecutions(String activityId);
+
   List<String> findActiveActivityIds();
 
   boolean isEnded();

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/process/TransitionImpl.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.camunda.bpm.engine.delegate.ExecutionListener;
 import org.camunda.bpm.engine.impl.core.model.CoreModelElement;
+import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.PvmProcessDefinition;
 import org.camunda.bpm.engine.impl.pvm.PvmTransition;
 
@@ -84,7 +85,7 @@ protected void setSource(ActivityImpl source) {
     this.source = source;
   }
 
-  public ActivityImpl getDestination() {
+  public PvmActivity getDestination() {
     return destination;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/AtomicOperation.java
Patch:
@@ -41,7 +41,6 @@ public interface AtomicOperation extends CoreAtomicOperation<PvmExecutionImpl> {
   AtomicOperation TRANSITION_DESTROY_SCOPE = PvmAtomicOperation.TRANSITION_DESTROY_SCOPE;
   AtomicOperation TRANSITION_NOTIFY_LISTENER_TAKE = PvmAtomicOperation.TRANSITION_NOTIFY_LISTENER_TAKE;
   AtomicOperation TRANSITION_CREATE_SCOPE = PvmAtomicOperation.TRANSITION_CREATE_SCOPE;
-  AtomicOperation TRANSITION_CANCEL_SCOPE = PvmAtomicOperation.TRANSITION_CANCEL_SCOPE;
   AtomicOperation TRANSITION_NOTIFY_LISTENER_START = PvmAtomicOperation.TRANSITION_NOTIFY_LISTENER_START;
 
   AtomicOperation DELETE_CASCADE = PvmAtomicOperation.DELETE_CASCADE;

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/FoxAtomicOperationDeleteCascadeFireActivityEnd.java
Patch:
@@ -4,8 +4,8 @@
 
 import org.camunda.bpm.engine.delegate.BaseDelegateExecution;
 import org.camunda.bpm.engine.delegate.DelegateListener;
+import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.PvmException;
-import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 import org.camunda.bpm.engine.impl.pvm.process.ScopeImpl;
 import org.camunda.bpm.engine.impl.pvm.runtime.PvmExecutionImpl;
 
@@ -14,12 +14,12 @@ public class FoxAtomicOperationDeleteCascadeFireActivityEnd extends PvmAtomicOpe
 
   @Override
   protected void eventNotificationsCompleted(PvmExecutionImpl execution) {
-    ActivityImpl activity = execution.getActivity();
+    PvmActivity activity = execution.getActivity();
     if ( (execution.isScope())
             && (activity!=null)
             && (!activity.isScope())
           )  {
-      execution.setActivity(activity.getParentActivity());
+      execution.setActivity((PvmActivity) activity.getFlowScope());
       execution.performOperation(this);
 
     } else {

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperation.java
Patch:
@@ -31,6 +31,7 @@ public interface PvmAtomicOperation extends CoreAtomicOperation<PvmExecutionImpl
   PvmAtomicOperation ACTIVITY_START = new PvmAtomicOperationActivityStart();
   PvmAtomicOperation ACTIVITY_START_CONCURRENT = new PvmAtomicOperationActivityStartConcurrent();
   PvmAtomicOperation ACTIVITY_START_CANCEL_SCOPE = new PvmAtomicOperationActivityStartCancelScope();
+  PvmAtomicOperation ACTIVITY_START_INTERRUPT_SCOPE = new PvmAtomicOperationActivityStartInterruptEventScope();
   PvmAtomicOperation ACTIVITY_START_CREATE_SCOPE = new PvmAtomicOperationActivityStartCreateScope();
   PvmAtomicOperation ACTIVITY_INIT_STACK = new PvmAtomicOperationActivityInitStack();
   PvmAtomicOperation ACTIVITY_INIT_STACK_NOTIFY_LISTENER_START = new PvmAtomicOperationActivityInitStackNotifyListenerStart();
@@ -44,7 +45,7 @@ public interface PvmAtomicOperation extends CoreAtomicOperation<PvmExecutionImpl
   PvmAtomicOperation TRANSITION_NOTIFY_LISTENER_TAKE = new PvmAtomicOperationTransitionNotifyListenerTake();
   PvmAtomicOperation TRANSITION_START_NOTIFY_LISTENER_TAKE = new PvmAtomicOperationStartTransitionNotifyListenerTake();
   PvmAtomicOperation TRANSITION_CREATE_SCOPE = new PvmAtomicOperationTransitionCreateScope();
-  PvmAtomicOperation TRANSITION_CANCEL_SCOPE = new PvmAtomicOperationTransitionCancelScope();
+  PvmAtomicOperation TRANSITION_INTERRUPT_FLOW_SCOPE = new PvmAtomicOperationsTransitionInterruptFlowScope();
   PvmAtomicOperation TRANSITION_NOTIFY_LISTENER_START = new PvmAtomicOperationTransitionNotifyListenerStart();
 
   PvmAtomicOperation DELETE_CASCADE = new PvmAtomicOperationDeleteCascade();

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityInstanceEnd.java
Patch:
@@ -15,8 +15,8 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.delegate.CompositeActivityBehavior;
-import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 import org.camunda.bpm.engine.impl.pvm.runtime.PvmExecutionImpl;
 
 
@@ -36,7 +36,7 @@ protected PvmExecutionImpl eventNotificationsStarted(PvmExecutionImpl execution)
     // if we end a scope activity, take remembered activity instance from parent and set on
     // execution before calling END listeners.
     PvmExecutionImpl parent = execution.getParent();
-    ActivityImpl activity = execution.getActivity();
+    PvmActivity activity = execution.getActivity();
     if (parent != null && execution.isScope() &&
         activity != null && activity.isScope() &&
         (activity.getActivityBehavior() instanceof CompositeActivityBehavior)) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityInstanceStart.java
Patch:
@@ -12,8 +12,8 @@
  */
 package org.camunda.bpm.engine.impl.pvm.runtime.operation;
 
+import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.delegate.CompositeActivityBehavior;
-import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 import org.camunda.bpm.engine.impl.pvm.runtime.PvmExecutionImpl;
 
 
@@ -42,7 +42,7 @@ protected void eventNotificationsCompleted(PvmExecutionImpl execution) {
     // hack around execution tree structure not being in sync with activity instance concept:
     // if we start a scope activity, remember current activity instance in parent
     PvmExecutionImpl parent = execution.getParent();
-    ActivityImpl activity = execution.getActivity();
+    PvmActivity activity = execution.getActivity();
     if(parent != null && execution.isScope() && activity.isScope() && (activity.getActivityBehavior() instanceof CompositeActivityBehavior)) {
       parent.setActivityInstanceId(execution.getActivityInstanceId());
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityStartConcurrent.java
Patch:
@@ -23,7 +23,7 @@
 public class PvmAtomicOperationActivityStartConcurrent extends PvmAtomicOperationCreateConcurrentExecution {
 
   protected void concurrentExecutionCreated(PvmExecutionImpl propagatingExecution) {
-    propagatingExecution.performOperation(ACTIVITY_START);
+    propagatingExecution.performOperation(ACTIVITY_START_CREATE_SCOPE);
   }
 
   public String getCanonicalName() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityStartCreateScope.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.camunda.bpm.engine.impl.pvm.runtime.operation;
 
-import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
+import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.runtime.PvmExecutionImpl;
 
 /**
@@ -22,7 +22,7 @@
 public class PvmAtomicOperationActivityStartCreateScope extends PvmAtomicOperationCreateScope {
 
   public boolean isAsync(PvmExecutionImpl execution) {
-    ActivityImpl activity = execution.getActivity();
+    PvmActivity activity = execution.getActivity();
     return activity.isAsyncBefore();
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationProcessEnd.java
Patch:
@@ -21,8 +21,8 @@
 import org.camunda.bpm.engine.impl.cmmn.behavior.TransferVariablesActivityBehavior;
 import org.camunda.bpm.engine.impl.cmmn.execution.CmmnActivityExecution;
 import org.camunda.bpm.engine.impl.cmmn.model.CmmnActivity;
+import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.delegate.SubProcessActivityBehavior;
-import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 import org.camunda.bpm.engine.impl.pvm.process.ScopeImpl;
 import org.camunda.bpm.engine.impl.pvm.runtime.PvmExecutionImpl;
 
@@ -55,7 +55,7 @@ protected void eventNotificationsCompleted(PvmExecutionImpl execution) {
 
     // copy variables before destroying the ended sub process instance
     if (superExecution!=null) {
-      ActivityImpl activity = superExecution.getActivity();
+      PvmActivity activity = superExecution.getActivity();
       subProcessActivityBehavior = (SubProcessActivityBehavior) activity.getActivityBehavior();
       try {
         subProcessActivityBehavior.completing(superExecution, execution);

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationProcessStartInitial.java
Patch:
@@ -14,6 +14,7 @@
 package org.camunda.bpm.engine.impl.pvm.runtime.operation;
 
 import org.camunda.bpm.engine.delegate.ExecutionListener;
+import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 import org.camunda.bpm.engine.impl.pvm.process.ProcessDefinitionImpl;
 import org.camunda.bpm.engine.impl.pvm.process.ScopeImpl;
@@ -42,7 +43,7 @@ protected void eventNotificationsCompleted(PvmExecutionImpl execution) {
 
     super.eventNotificationsCompleted(execution);
 
-    ActivityImpl activity = execution.getActivity();
+    PvmActivity activity = execution.getActivity();
     ProcessDefinitionImpl processDefinition = execution.getProcessDefinition();
 
     ProcessInstanceStartContext processInstanceStartContext = execution.getProcessInstanceStartContext();

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationTransitionNotifyListenerEnd.java
Patch:
@@ -33,6 +33,7 @@ protected String getEventName() {
   @Override
   protected void eventNotificationsCompleted(PvmExecutionImpl execution) {
     super.eventNotificationsCompleted(execution);
+
     execution.performOperation(TRANSITION_DESTROY_SCOPE);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/tree/FlowScopeWalker.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.camunda.bpm.engine.impl.tree;
 
+import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 import org.camunda.bpm.engine.impl.pvm.process.ScopeImpl;
 
@@ -23,12 +24,12 @@
 public class FlowScopeWalker extends TreeWalker<ScopeImpl> {
 
   public FlowScopeWalker(ScopeImpl startActivity) {
-    this.currentElement = startActivity;
+    super(startActivity);
   }
 
   protected ScopeImpl nextElement() {
     if (currentElement != null && ActivityImpl.class.isAssignableFrom(currentElement.getClass())) {
-      return ((ActivityImpl) currentElement).getFlowScope();
+      return ((PvmActivity) currentElement).getFlowScope();
 
     }
     else {

File: engine/src/main/java/org/camunda/bpm/engine/impl/util/ActivityBehaviorUtil.java
Patch:
@@ -17,9 +17,9 @@
 import org.camunda.bpm.engine.impl.cmmn.behavior.CmmnActivityBehavior;
 import org.camunda.bpm.engine.impl.cmmn.execution.CmmnExecution;
 import org.camunda.bpm.engine.impl.cmmn.model.CmmnActivity;
+import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.PvmException;
 import org.camunda.bpm.engine.impl.pvm.delegate.ActivityBehavior;
-import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 import org.camunda.bpm.engine.impl.pvm.runtime.PvmExecutionImpl;
 
 /**
@@ -43,7 +43,7 @@ public static CmmnActivityBehavior getActivityBehavior(CmmnExecution execution)
   public static ActivityBehavior getActivityBehavior(PvmExecutionImpl execution) {
     String id = execution.getId();
 
-    ActivityImpl activity = execution.getActivity();
+    PvmActivity activity = execution.getActivity();
     ensureNotNull(PvmException.class, "Execution '"+id+"' has no current activity.", "activity", activity);
 
     ActivityBehavior behavior = activity.getActivityBehavior();

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/ProcessInstanceModificationAsyncTest.java
Patch:
@@ -387,7 +387,7 @@ public void testCancelNestedConcurrentTransitionInstance() {
 
     assertThat(executionTree)
     .matches(
-      describeExecutionTree("fork").scope()
+      describeExecutionTree(null).scope()
         .child("outerTask").concurrent().noScope().up()
         .child(null).concurrent().noScope()
           .child("innerTask2").scope()
@@ -441,7 +441,7 @@ public void testCancelNestedConcurrentTransitionInstanceWithConcurrentScopeTask(
 
     assertThat(executionTree)
     .matches(
-      describeExecutionTree("fork").scope()
+      describeExecutionTree(null).scope()
         .child("outerTask").concurrent().noScope().up()
         .child(null).concurrent().noScope()
           .child(null).scope()

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/RuntimeServiceTest.java
Patch:
@@ -1301,10 +1301,11 @@ public void testGetActivityInstancesForActivity() {
     assertEquals(tree.getId(), processActivityInstances[0].getId());
     assertEquals(definition.getId(), processActivityInstances[0].getActivityId());
 
+    assertActivityInstances(tree.getActivityInstances("subProcess$multiInstanceBody"), 1, "subProcess$multiInstanceBody");
     assertActivityInstances(tree.getActivityInstances("subProcess"), 3, "subProcess");
     assertActivityInstances(tree.getActivityInstances("innerTask"), 3, "innerTask");
 
-    ActivityInstance subProcessInstance = tree.getChildActivityInstances()[0];
+    ActivityInstance subProcessInstance = tree.getChildActivityInstances()[0].getChildActivityInstances()[0];
     assertActivityInstances(subProcessInstance.getActivityInstances("subProcess"), 1, "subProcess");
 
     ActivityInstance[] childInstances = subProcessInstance.getActivityInstances("innerTask");

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/iomapping/InputOutputTest.java
Patch:
@@ -780,13 +780,13 @@ public void testParallelMISubprocessIoSupport() {
     variables.put("nrOfLoops", 2);
     ProcessInstance instance = runtimeService.startProcessInstanceByKey("miParallelSubprocess", variables);
 
-    // first sequential mi execution
+    // first parallel mi execution
     Execution miScopeExecution1 = runtimeService.createExecutionQuery().activityId("task")
         .variableValueEquals("loopCounter", 0).singleResult();
     assertNotNull(miScopeExecution1);
     assertEquals(1, runtimeService.getVariableLocal(miScopeExecution1.getId(), "miCounterValue"));
 
-    // second sequential mi execution
+    // second parallel mi execution
     Execution miScopeExecution2 = runtimeService.createExecutionQuery().activityId("task")
         .variableValueEquals("loopCounter", 1).singleResult();
     assertNotNull(miScopeExecution2);

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/parse/BpmnParseTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.interceptor.CommandExecutor;
 import org.camunda.bpm.engine.impl.persistence.entity.ProcessDefinitionEntity;
+import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.PvmTransition;
 import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 import org.camunda.bpm.engine.impl.pvm.process.TransitionImpl;
@@ -334,7 +335,7 @@ public ProcessDefinitionEntity execute(CommandContext commandContext) {
 
     // Test that the process definition has been deployed
     assertNotNull(processDefinitionEntity);
-    ActivityImpl activity = processDefinitionEntity.findActivity("ExclusiveGateway_1");
+    PvmActivity activity = processDefinitionEntity.findActivity("ExclusiveGateway_1");
     assertNotNull(activity);
 
     // Test that the conditions has been resolved

File: engine/src/test/java/org/camunda/bpm/engine/test/examples/pvm/Automatic.java
Patch:
@@ -1,9 +1,9 @@
 /* Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -24,6 +24,6 @@ public class Automatic implements ActivityBehavior {
 
   public void execute(ActivityExecution activityContext) throws Exception {
     PvmTransition defaultOutgoingTransition = activityContext.getActivity().getOutgoingTransitions().get(0);
-    activityContext.take(defaultOutgoingTransition);
+    activityContext.leaveActivityViaTransition(defaultOutgoingTransition);
   }
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/history/Noop.java
Patch:
@@ -1,9 +1,9 @@
 /* Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -25,7 +25,7 @@ public class Noop implements ActivityBehavior {
 
   public void execute(ActivityExecution execution) throws Exception {
     PvmTransition transition = execution.getActivity().getOutgoingTransitions().get(0);
-    execution.take(transition);
+    execution.leaveActivityViaTransition(transition);
   }
 
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/pvm/activities/Automatic.java
Patch:
@@ -30,7 +30,7 @@ public void execute(ActivityExecution execution) throws Exception {
     if(outgoingTransitions.isEmpty()) {
       execution.end(true);
     } else {
-      execution.take(outgoingTransitions.get(0));
+      execution.leaveActivityViaTransition(outgoingTransitions.get(0));
     }
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/pvm/activities/ParallelGateway.java
Patch:
@@ -42,7 +42,7 @@ public void execute(ActivityExecution execution) {
     
     if (nbrOfExecutionsJoined==nbrOfExecutionsToJoin) {
       log.fine("parallel gateway '"+activity.getId()+"' activates: "+nbrOfExecutionsJoined+" of "+nbrOfExecutionsToJoin+" joined");
-      execution.takeAll(outgoingTransitions, joinedExecutions);
+      execution.leaveActivityViaTransitions(outgoingTransitions, joinedExecutions);
       
     } else if (log.isLoggable(Level.FINE)){
       log.fine("parallel gateway '"+activity.getId()+"' does not activate: "+nbrOfExecutionsJoined+" of "+nbrOfExecutionsToJoin+" joined");

File: engine/src/test/java/org/camunda/bpm/engine/test/pvm/activities/ReusableSubProcess.java
Patch:
@@ -48,6 +48,6 @@ public void completing(VariableScope execution, VariableScope subProcessInstance
 
   public void completed(ActivityExecution execution) throws Exception {
     List<PvmTransition> outgoingTransitions = execution.getActivity().getOutgoingTransitions();
-    execution.takeAll(outgoingTransitions, null);
+    execution.leaveActivityViaTransitions(outgoingTransitions, null);
   }
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/serializable/ObjectSerializableTest.java
Patch:
@@ -60,7 +60,6 @@ public void testExecutionEntitySerialization() throws Exception {
    transitionImpl.addExecutionListener(new TestExecutionListener());
    execution.setTransition(transitionImpl);
 
-   execution.setTransitionBeingTaken(transitionImpl);
    execution.getProcessInstanceStartContext().setInitial(activityImpl);
    execution.setSuperExecution(new ExecutionEntity());
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/VariableOrderProperty.java
Patch:
@@ -90,8 +90,6 @@ public static QueryProperty typeToQueryProperty(ValueType type) {
       return VariableInstanceQueryProperty.LONG;
     } else if (ValueType.DOUBLE.equals(type)) {
       return VariableInstanceQueryProperty.DOUBLE;
-    } else if (ValueType.DATE.equals(type)) {
-      return VariableInstanceQueryProperty.LONG;
     } else {
       throw new ProcessEngineException("Cannot order by variables of type " + type.getName());
     }

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/error/BoundaryErrorEventTest.java
Patch:
@@ -856,7 +856,7 @@ private void checkErrorCodeVariable(String variableName, Object expectedValue){
   
   @Deployment(resources={
     "org/camunda/bpm/engine/test/bpmn/event/error/BoundaryErrorEventTest.testCatchBpmnErrorThrownByJavaDelegateInCallActivityOnSubprocessSetsErrorCodeVariable.bpmn",
-    "org/camunda/bpm/engine/test/bpmn/callActivity/subProcessWithThrownError.bpmn"
+    "org/camunda/bpm/engine/test/bpmn/callactivity/subProcessWithThrownError.bpmn"
   })
   public void testCatchBpmnErrorThrownByJavaDelegateInCallActivityOnSubprocessSetsErrorCodeVariable(){
     runtimeService.startProcessInstanceByKey("Process_1");

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/error/ErrorEventSubProcessTest.java
Patch:
@@ -309,7 +309,7 @@ public void testCatchErrorFromCallActivitySetsErrorVariable(){
   
   @Deployment(resources={
       "org/camunda/bpm/engine/test/bpmn/event/error/ErrorEventSubProcessTest.testCatchBpmnErrorFromJavaDelegateInsideCallActivitySetsErrorVariable.bpmn",
-      "org/camunda/bpm/engine/test/bpmn/callActivity/subProcessWithThrownError.bpmn"
+      "org/camunda/bpm/engine/test/bpmn/callactivity/subProcessWithThrownError.bpmn"
     })
   public void testCatchBpmnErrorFromJavaDelegateInsideCallActivitySetsErrorVariable(){
     runtimeService.startProcessInstanceByKey("Process_1");

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/impl/BpmnModelConstants.java
Patch:
@@ -415,6 +415,7 @@ public final class BpmnModelConstants {
   public static final String CAMUNDA_ATTRIBUTE_FOLLOW_UP_DATE = "followUpDate";
   public static final String CAMUNDA_ATTRIBUTE_ELEMENT_VARIABLE = "elementVariable";
   public static final String CAMUNDA_ATTRIBUTE_EVENT = "event";
+  public static final String CAMUNDA_ATTRIBUTE_ERROR_CODE_VARIABLE = "errorCodeVariable";
   public static final String CAMUNDA_ATTRIBUTE_EXCLUSIVE = "exclusive";
   public static final String CAMUNDA_ATTRIBUTE_EXPRESSION = "expression";
   public static final String CAMUNDA_ATTRIBUTE_FORM_HANDLER_CLASS = "formHandlerClass";

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/instance/ErrorEventDefinition.java
Patch:
@@ -24,4 +24,7 @@ public interface ErrorEventDefinition extends EventDefinition {
 
   void setError(Error error);
 
+  void setCamundaErrorCodeVariable(String camundaErrorCodeVariable);
+  
+  String getCamundaErrorCodeVariable();
 }

File: engine/src/main/java/org/camunda/bpm/engine/test/ProcessEngineRule.java
Patch:
@@ -107,7 +107,8 @@ public void starting(Description description) {
 
     initializeServices();
 
-    deploymentId = TestHelper.annotationDeploymentSetUp(processEngine, description.getTestClass(), description.getMethodName());
+    deploymentId = TestHelper.annotationDeploymentSetUp(processEngine, description.getTestClass(), description.getMethodName(),
+        description.getAnnotation(Deployment.class));
   }
 
   protected void initializeProcessEngine() {

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/testing/ProcessEngineTestCaseTest.java
Patch:
@@ -13,7 +13,6 @@
 
 package org.camunda.bpm.engine.test.standalone.testing;
 
-import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.impl.ProcessEngineImpl;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.task.Task;
@@ -25,7 +24,7 @@
  * @author Joram Barrez
  * @author Falko Menge (camunda)
  */
-public class ActivitiTestCaseTest extends ProcessEngineTestCase {
+public class ProcessEngineTestCaseTest extends ProcessEngineTestCase {
 
   @Deployment
   public void testSimpleProcess() {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/task/TaskQueryExpressionTest.java
Patch:
@@ -52,7 +52,7 @@ public void setUp() {
     anotherUser = createUser("anotherUser", group3.getId());
     userWithoutGroups = createUser("userWithoutGroups");
 
-    setTime(new DateTime().withMillisOfSecond(0).toDate());
+    setTime(1427547759000l);
     task = createTestTask("task");
     // shift time to force distinguishable create times
     adjustTime(2 * 60);

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/handler/FormFieldValidationConstraintHandler.java
Patch:
@@ -39,7 +39,8 @@ public FormFieldValidationConstraint createValidationConstraint(ExecutionEntity
   // submit /////////////////////////////////
 
   public void validate(Object submittedValue, VariableMap submittedValues, FormFieldHandler formFieldHandler, VariableScope variableScope) {
-    boolean isValid = validator.validate(submittedValue, new DefaultFormFieldValidatorContext(variableScope, config, submittedValues));
+    boolean isValid = validator.validate(submittedValue, new DefaultFormFieldValidatorContext(variableScope, config,
+      submittedValues, formFieldHandler));
     if(!isValid) {
       throw new ProcessEngineException("Invalid value submitted for form field '"+formFieldHandler.getId()+"': validation of "+this+" failed.");
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/validator/FormFieldValidatorContext.java
Patch:
@@ -16,6 +16,7 @@
 
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.VariableScope;
+import org.camunda.bpm.engine.impl.form.handler.FormFieldHandler;
 
 /**
  * <p>Object passed in to a {@link FormFieldValidator} providing access to validation properties</p>
@@ -25,6 +26,8 @@
  */
 public interface FormFieldValidatorContext {
 
+  public FormFieldHandler getFormFieldHandler();
+
   /** @return the execution
    * Deprecated, use {@link #getVariableScope()} */
   @Deprecated

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/el/ElResolveFormBean.java
Patch:
@@ -48,7 +48,7 @@ public void testFormDataWithExpression() {
     TypedValue value = startFormData.getFormFields().get(0).getValue();
 
     Assert.assertNotNull(value);
-    Assert.assertEquals("testString123", value.toString());
+    Assert.assertEquals("testString123", value.getValue());
   }
 
 }

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/task/TaskQueryDto.java
Patch:
@@ -870,7 +870,7 @@ protected void applyFilters(TaskQuery query) {
     if (candidateUserExpression != null) {
       query.taskCandidateUserExpression(candidateUserExpression);
     }
-    if (taskDefinitionKeyIn != null && taskDefinitionKey.length() > 0) {
+    if (taskDefinitionKeyIn != null && taskDefinitionKeyIn.length > 0) {
       query.taskDefinitionKeyIn(taskDefinitionKeyIn);
     }
     if (taskDefinitionKey != null) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobManager.java
Patch:
@@ -101,7 +101,7 @@ protected void hintJobExecutor(JobEntity job) {
       Date currentTime = ClockUtil.getCurrentTime();
       job.setLockExpirationTime(new Date(currentTime.getTime() + jobExecutor.getLockTimeInMillis()));
       job.setLockOwner(jobExecutor.getLockOwner());
-      transactionListener = new ExclusiveJobAddedNotification(job.getId());
+      transactionListener = new ExclusiveJobAddedNotification(job.getId(), jobExecutorContext);
     } else {
       // notify job executor:
       transactionListener = new MessageAddedNotification(jobExecutor);

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -415,6 +415,7 @@ public abstract class MockProvider {
   public static final String EXAMPLE_HISTORIC_VAR_UPDATE_VALUE_TYPE_NAME = "String";
   public static final int EXAMPLE_HISTORIC_VAR_UPDATE_REVISION = 1;
   public static final String EXAMPLE_HISTORIC_VAR_UPDATE_ERROR = "anErrorMessage";
+  public static final String EXAMPLE_HISTORIC_VAR_UPDATE_VAR_INST_ID = "aVariableInstanceId";
 
   public static final String EXAMPLE_HISTORIC_FORM_FIELD_ID = "anId";
   public static final String EXAMPLE_HISTORIC_FORM_FIELD_PROC_INST_ID = "aProcInst";
@@ -1414,6 +1415,7 @@ public static MockHistoricVariableUpdateBuilder mockHistoricVariableUpdate() {
         .taskId(EXAMPLE_HISTORIC_VAR_UPDATE_TASK_ID)
         .time(EXAMPLE_HISTORIC_VAR_UPDATE_TIME)
         .name(EXAMPLE_HISTORIC_VAR_UPDATE_NAME)
+        .variableInstanceId(EXAMPLE_HISTORIC_VAR_UPDATE_VAR_INST_ID)
         .typedValue(EXAMPLE_PRIMITIVE_VARIABLE_VALUE)
         .revision(EXAMPLE_HISTORIC_VAR_UPDATE_REVISION)
         .errorMessage(null);

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/AbstractHistoricDetailRestServiceQueryTest.java
Patch:
@@ -304,6 +304,7 @@ public void testSimpleHistoricActivityQuery() {
         .and()
           .body("[0].id", equalTo(historicUpdateBuilder.getId()))
           .body("[0].variableName", equalTo(historicUpdateBuilder.getName()))
+          .body("[0].variableInstanceId", equalTo(historicUpdateBuilder.getVariableInstanceId()))
           .body("[0].variableType", equalTo(VariableTypeHelper.toExpectedValueTypeName(
               historicUpdateBuilder.getTypedValue().getType())))
           .body("[0].value", equalTo(historicUpdateBuilder.getTypedValue().getValue()))

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -133,7 +133,6 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement(POSTGRES, "selectResourceByDeploymentIdAndResourceId", "selectResourceByDeploymentIdAndResourceId_postgres");
     addDatabaseSpecificStatement(POSTGRES, "selectResourcesByDeploymentId", "selectResourcesByDeploymentId_postgres");
     addDatabaseSpecificStatement(POSTGRES, "selectLatestResourcesByDeploymentName", "selectLatestResourcesByDeploymentName_postgres");
-    addDatabaseSpecificStatement(POSTGRES, "selectHistoricDetailsByQueryCriteria", "selectHistoricDetailsByQueryCriteria_postgres");
     addDatabaseSpecificStatement(POSTGRES, "insertIdentityInfo", "insertIdentityInfo_postgres");
     addDatabaseSpecificStatement(POSTGRES, "updateIdentityInfo", "updateIdentityInfo_postgres");
     addDatabaseSpecificStatement(POSTGRES, "selectIdentityInfoById", "selectIdentityInfoById_postgres");

File: engine-cdi/src/main/java/org/camunda/bpm/engine/cdi/impl/ProcessEngineServicesProducer.java
Patch:
@@ -70,6 +70,6 @@ public ProcessEngine processEngine() {
 
   @Produces @Named @ApplicationScoped public AuthorizationService authorizationService() { return processEngine().getAuthorizationService(); }
 
-  @Produces @Named @ApplicationScoped public FilterService filterService() { return processEngine().getFilerService(); }
+  @Produces @Named @ApplicationScoped public FilterService filterService() { return processEngine().getFilterService(); }
 
 }

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/runtime/TransitionInstanceDto.java
Patch:
@@ -24,7 +24,6 @@ public class TransitionInstanceDto {
   protected String parentActivityInstanceId;
   protected String processInstanceId;
   protected String processDefinitionId;
-  protected String targetActivityId;
   protected String activityId;
   protected String executionId;
 
@@ -42,7 +41,7 @@ public String getProcessDefinitionId() {
   }
   @Deprecated
   public String getTargetActivityId() {
-    return targetActivityId;
+    return activityId;
   }
   public String getActivityId() {
     return activityId;
@@ -55,7 +54,6 @@ public static TransitionInstanceDto fromTransitionInstance(TransitionInstance in
     TransitionInstanceDto result = new TransitionInstanceDto();
     result.id = instance.getId();
     result.parentActivityInstanceId = instance.getParentActivityInstanceId();
-    result.targetActivityId = instance.getTargetActivityId();
     result.activityId = instance.getActivityId();
     result.processInstanceId = instance.getProcessInstanceId();
     result.processDefinitionId = instance.getProcessDefinitionId();

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractProcessInstanceRestServiceInteractionTest.java
Patch:
@@ -41,7 +41,6 @@
 import org.camunda.bpm.engine.rest.exception.RestException;
 import org.camunda.bpm.engine.rest.helper.EqualsList;
 import org.camunda.bpm.engine.rest.helper.EqualsMap;
-import org.camunda.bpm.engine.rest.helper.EqualsVariableMap;
 import org.camunda.bpm.engine.rest.helper.ErrorMessageHelper;
 import org.camunda.bpm.engine.rest.helper.ExampleVariableObject;
 import org.camunda.bpm.engine.rest.helper.MockObjectValue;
@@ -139,6 +138,7 @@ public void testGetActivityInstanceTree() {
         .body("childTransitionInstances", not(empty()))
         .body("childTransitionInstances[0].id", equalTo(CHILD_EXAMPLE_ACTIVITY_INSTANCE_ID))
         .body("childTransitionInstances[0].parentActivityInstanceId", equalTo(CHILD_EXAMPLE_PARENT_ACTIVITY_INSTANCE_ID))
+        .body("childTransitionInstances[0].activityId", equalTo(CHILD_EXAMPLE_ACTIVITY_ID))
         .body("childTransitionInstances[0].targetActivityId", equalTo(CHILD_EXAMPLE_ACTIVITY_ID))
         .body("childTransitionInstances[0].processInstanceId", equalTo(CHILD_EXAMPLE_PROCESS_INSTANCE_ID))
         .body("childTransitionInstances[0].processDefinitionId", equalTo(CHILD_EXAMPLE_PROCESS_DEFINITION_ID))

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractRestServiceTest.java
Patch:
@@ -120,7 +120,7 @@ public abstract class AbstractRestServiceTest {
     TransitionInstanceImpl childTransition = new TransitionInstanceImpl();
     childTransition.setId(CHILD_EXAMPLE_ACTIVITY_INSTANCE_ID);
     childTransition.setParentActivityInstanceId(CHILD_EXAMPLE_PARENT_ACTIVITY_INSTANCE_ID);
-    childTransition.setTargetActivityId(CHILD_EXAMPLE_ACTIVITY_ID);
+    childTransition.setActivityId(CHILD_EXAMPLE_ACTIVITY_ID);
     childTransition.setProcessInstanceId(CHILD_EXAMPLE_PROCESS_INSTANCE_ID);
     childTransition.setProcessDefinitionId(CHILD_EXAMPLE_PROCESS_DEFINITION_ID);
     childTransition.setExecutionId(EXAMPLE_EXECUTION_ID);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AbstractInstantiationCmd.java
Patch:
@@ -220,8 +220,9 @@ else if (ActivityImpl.class.isAssignableFrom(elementToInstantiate.getClass())) {
         }
         else {
           // perform cancellation
-          scopeExecution.cancelScope("Cancel scope activity " + topMostActivity + " executed.", skipCustomListeners, skipIoMappings);
-          instantiate(scopeExecution, activitiesToInstantiate, elementToInstantiate);
+          ExecutionEntity cancellingExecution = interruptedExecution.getParent();
+          cancellingExecution.cancelScope("Cancel scope activity " + topMostActivity + " executed.", skipCustomListeners, skipIoMappings);
+          instantiate(cancellingExecution, activitiesToInstantiate, elementToInstantiate);
         }
       }
       else {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/ProcessInstanceModificationBoundaryEventTest.java
Patch:
@@ -756,7 +756,7 @@ public void testStartBeforeNonInterruptingBoundaryEventOnSubProcess() {
   }
 
   @Deployment(resources = INTERRUPTING_BOUNDARY_EVENT_WITH_PARALLEL_GATEWAY)
-  public void FAILING_testStartBeforeInterruptingBoundaryEvent() {
+  public void testStartBeforeInterruptingBoundaryEvent() {
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("process");
     String processInstanceId = processInstance.getId();
 
@@ -825,7 +825,7 @@ public void testStartBeforeNonInterruptingBoundaryEvent() {
   }
 
   @Deployment(resources = INTERRUPTING_BOUNDARY_EVENT_WITH_PARALLEL_GATEWAY_INSIDE_SUB_PROCESS)
-  public void FAILING_testStartBeforeInterruptingBoundaryEventInsideSubProcess() {
+  public void testStartBeforeInterruptingBoundaryEventInsideSubProcess() {
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("process");
     String processInstanceId = processInstance.getId();
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetActivityInstanceCmd.java
Patch:
@@ -159,7 +159,7 @@ protected void initActivityInstanceTree(ActivityInstanceImpl parentActInst, Map<
         // can use execution id as persistent ID for transition as an execution can execute as most one transition at a time.
         transitionInstance.setId(execution.getId());
         transitionInstance.setExecutionId(execution.getId());
-        transitionInstance.setTargetActivityId(execution.getActivityId());
+        transitionInstance.setActivityId(execution.getActivityId());
 
         childTransitionInstances.add(transitionInstance);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ActivityInstanceImpl.java
Patch:
@@ -121,7 +121,7 @@ protected void writeTransition(TransitionInstance transition, StringWriter write
       writer.append("├── ");
     }
 
-    writer.append("transition to " + transition.getTargetActivityId() + "=>" + transition.getId() + "\n");
+    writer.append("transition to/from " + transition.getActivityId() + ":" + transition.getId() + "\n");
   }
 
   public String toString() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityNotifyListenerEnd.java
Patch:
@@ -36,6 +36,8 @@ protected void eventNotificationsCompleted(PvmExecutionImpl execution) {
     // invoke behavior from abstract AtomicOperationActivityInstanceEnd
     super.eventNotificationsCompleted(execution);
 
+    execution.setActivityInstanceId(null);
+
     // perform activity end behavior
     execution.performOperation(ACTIVITY_END);
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/ProcessInstanceModificationAsyncTest.java
Patch:
@@ -267,7 +267,7 @@ protected ActivityInstance getChildInstanceForActivity(ActivityInstance activity
 
   protected TransitionInstance getChildTransitionInstanceForTargetActivity(ActivityInstance activityInstance, String targetActivityId) {
     for (TransitionInstance childTransitionInstance : activityInstance.getChildTransitionInstances()) {
-      if (targetActivityId.equals(childTransitionInstance.getTargetActivityId())) {
+      if (targetActivityId.equals(childTransitionInstance.getActivityId())) {
         return childTransitionInstance;
       }
     }

File: engine/src/test/java/org/camunda/bpm/engine/test/util/ActivityInstanceAssert.java
Patch:
@@ -83,7 +83,7 @@ protected boolean isTreeMatched(ActivityInstance actualInstance, ActivityInstanc
             boolean matchFound = false;
             while (expectedTransitionInstanceIt.hasNext() && !matchFound) {
               TransitionInstance expectedChild = expectedTransitionInstanceIt.next();
-              if (expectedChild.getTargetActivityId().equals(child.getTargetActivityId())) {
+              if (expectedChild.getActivityId().equals(child.getActivityId())) {
                 matchFound = true;
                 expectedTransitionInstanceIt.remove();
               }
@@ -139,10 +139,10 @@ public ActivityInstanceTreeBuilder activity(String activityId) {
       return this;
     }
 
-    public ActivityInstanceTreeBuilder transitionTo(String targetActivityId) {
+    public ActivityInstanceTreeBuilder transition(String activityId) {
 
       TransitionInstanceImpl newInstance = new TransitionInstanceImpl();
-      newInstance.setTargetActivityId(targetActivityId);
+      newInstance.setActivityId(activityId);
       ActivityInstanceImpl parentInstance = activityInstanceStack.peek();
 
       List<TransitionInstance> childInstances = new ArrayList<TransitionInstance>(

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationCreateConcurrentExecution.java
Patch:
@@ -64,7 +64,7 @@ public void execute(PvmExecutionImpl execution) {
 
         // 1) create new concurrent execution (CCE-1) replacing the the active scope execution (e)
         PvmExecutionImpl replacingExecution = execution.createExecution();
-        replacingExecution.replace(execution); // only copy tasks(?)
+        replacingExecution.replace(execution);
         replacingExecution.setActivity(execution.getActivity());
         replacingExecution.setActive(execution.isActive());
         replacingExecution.setScope(false);

File: spin/dataformat-xml-dom/src/test/java/org/camunda/spin/xml/XmlTestConstants.java
Patch:
@@ -156,7 +156,4 @@ public static Order createExampleOrder() {
     return order;
   }
 
-  public static String replaceLineBreaks(String source) {
-    return source.replace("\n", "").replace("\r", "");
-  }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ActivateJobCmd.java
Patch:
@@ -30,6 +30,6 @@ protected SuspensionState getSuspensionState() {
 
   @Override
   protected String getLogEntryOperation() {
-    return UserOperationLogEntry.OPERATION_TYPE_ACTIVATE;
+    return UserOperationLogEntry.OPERATION_TYPE_ACTIVATE_JOB;
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ActivateJobDefinitionCmd.java
Patch:
@@ -40,7 +40,7 @@ protected AbstractSetJobStateCmd getSetJobStateCmd() {
 
   @Override
   protected String getLogEntryOperation() {
-    return UserOperationLogEntry.OPERATION_TYPE_ACTIVATE;
+    return UserOperationLogEntry.OPERATION_TYPE_ACTIVATE_JOB_DEFINITION;
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ActivateProcessDefinitionCmd.java
Patch:
@@ -54,7 +54,7 @@ protected AbstractSetProcessInstanceStateCmd getSetProcessInstanceStateCmd() {
 
   @Override
   protected String getLogEntryOperation() {
-    return UserOperationLogEntry.OPERATION_TYPE_ACTIVATE;
+    return UserOperationLogEntry.OPERATION_TYPE_ACTIVATE_PROCESS_DEFINITION;
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ExecuteJobsCmd.java
Patch:
@@ -91,7 +91,7 @@ public Object execute(CommandContext commandContext) {
     if (jobExecutorContext != null) { // if null, then we are not called by the job executor
       jobExecutorContext.setCurrentJob(job);
     } else {
-      commandContext.getOperationLogManager().logJobRetryOperation(getLogEntryOperation(), job.getId(),
+      commandContext.getOperationLogManager().logJobOperation(getLogEntryOperation(), job.getId(),
         job.getJobDefinitionId(), job.getProcessInstanceId(), job.getProcessDefinitionId(),
         job.getProcessDefinitionKey(), new PropertyChange(null, null, null));
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SetJobRetriesCmd.java
Patch:
@@ -73,7 +73,7 @@ protected void setJobRetriesByJobId(CommandContext commandContext) {
       job.setRetries(retries);
 
       PropertyChange propertyChange = new PropertyChange(RETRIES, oldRetries, job.getRetries());
-      commandContext.getOperationLogManager().logJobRetryOperation(getLogEntryOperation(), job.getId(),
+      commandContext.getOperationLogManager().logJobOperation(getLogEntryOperation(), job.getId(),
         job.getJobDefinitionId(), job.getProcessInstanceId(), job.getProcessDefinitionId(),
         job.getProcessDefinitionKey(), propertyChange);
     } else {
@@ -88,7 +88,7 @@ protected void setJobRetriesByJobDefinitionId(CommandContext commandContext) {
 
     JobDefinitionEntity jobDefinitionEntity = commandContext.getJobDefinitionManager().findById(jobDefinitionId);
     PropertyChange propertyChange = new PropertyChange(RETRIES, null, retries);
-    commandContext.getOperationLogManager().logJobRetryOperation(getLogEntryOperation(), null, jobDefinitionId, null,
+    commandContext.getOperationLogManager().logJobOperation(getLogEntryOperation(), null, jobDefinitionId, null,
       jobDefinitionEntity.getProcessDefinitionId(), jobDefinitionEntity.getProcessDefinitionKey(), propertyChange);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SuspendJobCmd.java
Patch:
@@ -30,6 +30,6 @@ protected SuspensionState getSuspensionState() {
 
   @Override
   protected String getLogEntryOperation() {
-    return UserOperationLogEntry.OPERATION_TYPE_SUSPEND;
+    return UserOperationLogEntry.OPERATION_TYPE_SUSPEND_JOB;
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SuspendJobDefinitionCmd.java
Patch:
@@ -41,7 +41,7 @@ protected AbstractSetJobStateCmd getSetJobStateCmd() {
 
   @Override
   protected String getLogEntryOperation() {
-    return UserOperationLogEntry.OPERATION_TYPE_SUSPEND;
+    return UserOperationLogEntry.OPERATION_TYPE_SUSPEND_JOB_DEFINITION;
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SuspendProcessDefinitionCmd.java
Patch:
@@ -54,7 +54,7 @@ protected AbstractSetProcessInstanceStateCmd getSetProcessInstanceStateCmd() {
 
   @Override
   protected String getLogEntryOperation() {
-    return UserOperationLogEntry.OPERATION_TYPE_SUSPEND;
+    return UserOperationLogEntry.OPERATION_TYPE_SUSPEND_PROCESS_DEFINITION;
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -502,9 +502,7 @@ public List<HistoryEvent> createUserOperationLogEvents(UserOperationLogContext c
     context.setUserId(userId);
 
     String operationId = Context.getProcessEngineConfiguration().getIdGenerator().getNextId();
-    if(context.getOperationId() == null || context.getOperationId().equals("")) {
-      context.setOperationId(operationId);
-    }
+    context.setOperationId(operationId);
 
     for (PropertyChange propertyChange : context.getPropertyChanges()) {
       UserOperationLogEntryEventEntity evt = new UserOperationLogEntryEventEntity();

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/TimerActivateJobDefinitionHandler.java
Patch:
@@ -52,7 +52,7 @@ public void execute(String configuration, ExecutionEntity execution, CommandCont
       cmd = new ActivateJobDefinitionCmd(null, null, processDefinitionKey, activateJobs, null);
     }
 
-    cmd.execute(commandContext);
+    cmd.disableLogUserOperation().execute(commandContext);
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/TimerActivateProcessDefinitionHandler.java
Patch:
@@ -48,7 +48,7 @@ public void execute(String configuration, ExecutionEntity execution, CommandCont
       cmd = new ActivateProcessDefinitionCmd(null, processDefinitionKey, activateProcessInstances, null);
     }
 
-    cmd.execute(commandContext);
+    cmd.disableLogUserOperation().execute(commandContext);
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/TimerSuspendJobDefinitionHandler.java
Patch:
@@ -52,7 +52,7 @@ public void execute(String configuration, ExecutionEntity execution, CommandCont
       cmd = new SuspendJobDefinitionCmd(null, null, processDefinitionKey, activateJobs, null);
     }
 
-    cmd.execute(commandContext);
+    cmd.disableLogUserOperation().execute(commandContext);
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/TimerSuspendProcessDefinitionHandler.java
Patch:
@@ -48,7 +48,7 @@ public void execute(String configuration, ExecutionEntity execution, CommandCont
       cmd = new SuspendProcessDefinitionCmd(null, processDefinitionKey, activateProcessInstances, null);
     }
 
-    cmd.execute(commandContext);
+    cmd.disableLogUserOperation().execute(commandContext);
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/DeploymentManager.java
Patch:
@@ -88,7 +88,6 @@ public void deleteDeployment(String deploymentId, boolean cascade, boolean skipC
 
         // remove historic op log entries which are not related to a process instance
         getUserOperationLogManager().deleteOperationLogEntriesByProcessDefinitionId(processDefinitionId);
-        getUserOperationLogManager().deleteOperationLogEntriesByProcessDefinitionKey(processDefinition.getKey());
       }
     }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/JobQueryTest.java
Patch:
@@ -33,6 +33,7 @@
 import org.camunda.bpm.engine.impl.persistence.entity.MessageEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.TimerEntity;
 import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
+import org.camunda.bpm.engine.impl.test.TestHelper;
 import org.camunda.bpm.engine.impl.util.ClockUtil;
 import org.camunda.bpm.engine.management.JobDefinition;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
@@ -453,6 +454,8 @@ public void testQueryBySuspended() {
 
     managementService.suspendJobDefinitionByProcessDefinitionKey("timerOnTask", true);
     verifyQueryResults(query, 3);
+
+    TestHelper.clearOpLog(processEngineConfiguration);
   }
 
   //sorting //////////////////////////////////////////

File: engine/src/test/java/org/camunda/bpm/engine/test/api/repository/ProcessDefinitionSuspensionTest.java
Patch:
@@ -51,6 +51,8 @@ public Object execute(CommandContext commandContext) {
         return null;
       }
     });
+
+    TestHelper.clearOpLog(processEngineConfiguration);
   }
 
   @Deployment(resources={"org/camunda/bpm/engine/test/db/processOne.bpmn20.xml"})

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeleteProcessInstanceCmd.java
Patch:
@@ -47,7 +47,7 @@ public Void execute(CommandContext commandContext) {
       .deleteProcessInstance(processInstanceId, deleteReason, false, skipCustomListeners);
 
     commandContext.getOperationLogManager()
-      .logProcessInstanceOperation(UserOperationLogEntry.OPERATION_TYPE_DELETE, processInstanceId,
+      .logProcessInstanceOperation(null, UserOperationLogEntry.OPERATION_TYPE_DELETE, processInstanceId,
           null, null, PropertyChange.EMPTY_CHANGE);
 
     return null;

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SetJobRetriesCmd.java
Patch:
@@ -30,7 +30,7 @@
 public class SetJobRetriesCmd implements Command<Void>, Serializable {
 
   private static final long serialVersionUID = 1L;
-  protected static final String RETRY_STATE_PROPERTY = "retryState";
+  protected static final String RETRIES = "retries";
 
   protected final String jobId;
   protected final String jobDefinitionId;
@@ -72,7 +72,7 @@ protected void setJobRetriesByJobId(CommandContext commandContext) {
       int oldRetries = job.getRetries();
       job.setRetries(retries);
 
-      PropertyChange propertyChange = new PropertyChange(RETRY_STATE_PROPERTY, oldRetries, job.getRetries());
+      PropertyChange propertyChange = new PropertyChange(RETRIES, oldRetries, job.getRetries());
       commandContext.getOperationLogManager().logJobRetryOperation(getLogEntryOperation(), job.getId(),
         job.getJobDefinitionId(), job.getProcessInstanceId(), job.getProcessDefinitionId(),
         job.getProcessDefinitionKey(), propertyChange);
@@ -87,7 +87,7 @@ protected void setJobRetriesByJobDefinitionId(CommandContext commandContext) {
         .updateFailedJobRetriesByJobDefinitionId(jobDefinitionId, retries);
 
     JobDefinitionEntity jobDefinitionEntity = commandContext.getJobDefinitionManager().findById(jobDefinitionId);
-    PropertyChange propertyChange = new PropertyChange(RETRY_STATE_PROPERTY, null, retries);
+    PropertyChange propertyChange = new PropertyChange(RETRIES, null, retries);
     commandContext.getOperationLogManager().logJobRetryOperation(getLogEntryOperation(), null, jobDefinitionId, null,
       jobDefinitionEntity.getProcessDefinitionId(), jobDefinitionEntity.getProcessDefinitionKey(), propertyChange);
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -502,7 +502,9 @@ public List<HistoryEvent> createUserOperationLogEvents(UserOperationLogContext c
     context.setUserId(userId);
 
     String operationId = Context.getProcessEngineConfiguration().getIdGenerator().getNextId();
-    context.setOperationId(operationId);
+    if(context.getOperationId() == null || context.getOperationId().equals("")) {
+      context.setOperationId(operationId);
+    }
 
     for (PropertyChange propertyChange : context.getPropertyChanges()) {
       UserOperationLogEntryEventEntity evt = new UserOperationLogEntryEventEntity();

File: engine/src/test/java/org/camunda/bpm/engine/test/history/OperationLogQueryTest.java
Patch:
@@ -614,6 +614,7 @@ public void testQueryJobRetryOperationsById() {
     assertEquals("3", jobRetryEntry.getOrgValue());
     assertEquals("10", jobRetryEntry.getNewValue());
     assertEquals("retryState", jobRetryEntry.getProperty());
+    assertEquals(job.getJobDefinitionId(), jobRetryEntry.getJobDefinitionId());
     assertEquals(job.getProcessInstanceId(), jobRetryEntry.getProcessInstanceId());
     assertEquals(job.getProcessDefinitionKey(), jobRetryEntry.getProcessDefinitionKey());
     assertEquals(job.getProcessDefinitionId(), jobRetryEntry.getProcessDefinitionId());
@@ -637,12 +638,14 @@ public void testQueryJobExecutionOperationsById() {
     UserOperationLogEntry jobExecutionEntry = query().
       entityType(JOB)
       .jobId(job.getId())
+      .jobDefinitionId(job.getJobDefinitionId())
       .operationType(OPERATION_TYPE_EXECUTE_JOB)
       .singleResult();
 
     assertNull(jobExecutionEntry.getOrgValue());
     assertNull(jobExecutionEntry.getNewValue());
     assertNull(jobExecutionEntry.getProperty());
+    assertEquals(job.getJobDefinitionId(), jobExecutionEntry.getJobDefinitionId());
     assertEquals(job.getProcessInstanceId(), jobExecutionEntry.getProcessInstanceId());
     assertEquals(job.getProcessDefinitionKey(), jobExecutionEntry.getProcessDefinitionKey());
     assertEquals(job.getProcessDefinitionId(), jobExecutionEntry.getProcessDefinitionId());

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -394,6 +394,8 @@ protected void initializeVariableInstanceBackPointer(VariableInstanceEntity vari
     variableInstance.setTaskId(id);
     variableInstance.setExecutionId(executionId);
     variableInstance.setProcessInstanceId(processInstanceId);
+    variableInstance.setCaseExecutionId(caseExecutionId);
+    variableInstance.setCaseInstanceId(caseInstanceId);
   }
 
   protected List<VariableInstanceEntity> loadVariableInstances() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSession.java
Patch:
@@ -105,7 +105,7 @@ public void lock(String statement) {
     // do not perform locking if H2 database is used. H2 uses table level locks
     // by default which may cause deadlocks if the deploy command needs to get a new
     // Id using the DbIdGenerator while performing a deployment.
-    if (!"h2".equals(dbSqlSessionFactory.getDatabaseType())) {
+    if (!DbSqlSessionFactory.H2.equals(dbSqlSessionFactory.getDatabaseType())) {
       String mappedStatement = dbSqlSessionFactory.mapStatement(statement);
       sqlSession.update(mappedStatement);
     }
@@ -411,7 +411,7 @@ public boolean isTablePresent(String tableName) {
 
       String databaseType = dbSqlSessionFactory.getDatabaseType();
 
-      if ("postgres".equals(databaseType)) {
+      if (DbSqlSessionFactory.POSTGRES.equals(databaseType)) {
         tableName = tableName.toLowerCase();
       }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -785,6 +785,7 @@ protected void initSqlSessionFactory() {
         if(databaseType != null) {
           properties.put("limitBefore" , DbSqlSessionFactory.databaseSpecificLimitBeforeStatements.get(databaseType));
           properties.put("limitAfter" , DbSqlSessionFactory.databaseSpecificLimitAfterStatements.get(databaseType));
+          properties.put("innerLimitAfter" , DbSqlSessionFactory.databaseSpecificInnerLimitAfterStatements.get(databaseType));
           properties.put("limitBetween" , DbSqlSessionFactory.databaseSpecificLimitBetweenStatements.get(databaseType));
           properties.put("limitBetweenClob" , DbSqlSessionFactory.databaseSpecificLimitBetweenClobStatements.get(databaseType));
           properties.put("orderBy" , DbSqlSessionFactory.databaseSpecificOrderByStatements.get(databaseType));

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/CaseExecutionQueryTest.java
Patch:
@@ -2415,7 +2415,7 @@ public void testCaseVariableValueEqualsNumber() throws Exception {
     assertEquals(1, caseService.createCaseExecutionQuery().variableValueEquals("var", Variables.numberValue(null)).count());
 
     // other operators
-    assertEquals(3, caseService.createCaseExecutionQuery().variableValueNotEquals("var", Variables.numberValue(123)).count());
+    assertEquals(4, caseService.createCaseExecutionQuery().variableValueNotEquals("var", Variables.numberValue(123)).count());
     assertEquals(1, caseService.createCaseExecutionQuery().variableValueGreaterThan("var", Variables.numberValue(123L)).count());
     assertEquals(5, caseService.createCaseExecutionQuery().variableValueGreaterThanOrEqual("var", Variables.numberValue(123.0d)).count());
     assertEquals(0, caseService.createCaseExecutionQuery().variableValueLessThan("var", Variables.numberValue((short) 123)).count());
@@ -2430,7 +2430,7 @@ public void testCaseVariableValueEqualsNumber() throws Exception {
     assertEquals(2, caseService.createCaseExecutionQuery().caseInstanceVariableValueEquals("var", Variables.numberValue(null)).count());
 
     // other operators
-    assertEquals(6, caseService.createCaseExecutionQuery().caseInstanceVariableValueNotEquals("var", Variables.numberValue(123)).count());
+    assertEquals(8, caseService.createCaseExecutionQuery().caseInstanceVariableValueNotEquals("var", Variables.numberValue(123)).count());
     assertEquals(2, caseService.createCaseExecutionQuery().caseInstanceVariableValueGreaterThan("var", Variables.numberValue(123L)).count());
     assertEquals(10, caseService.createCaseExecutionQuery().caseInstanceVariableValueGreaterThanOrEqual("var", Variables.numberValue(123.0d)).count());
     assertEquals(0, caseService.createCaseExecutionQuery().caseInstanceVariableValueLessThan("var", Variables.numberValue((short) 123)).count());

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/CaseInstanceQueryTest.java
Patch:
@@ -1411,7 +1411,7 @@ public void testCaseVariableValueEqualsNumber() throws Exception {
     assertEquals(1, caseService.createCaseInstanceQuery().variableValueEquals("var", Variables.numberValue(null)).count());
 
     // other operators
-    assertEquals(3, caseService.createCaseInstanceQuery().variableValueNotEquals("var", Variables.numberValue(123)).count());
+    assertEquals(4, caseService.createCaseInstanceQuery().variableValueNotEquals("var", Variables.numberValue(123)).count());
     assertEquals(1, caseService.createCaseInstanceQuery().variableValueGreaterThan("var", Variables.numberValue(123L)).count());
     assertEquals(5, caseService.createCaseInstanceQuery().variableValueGreaterThanOrEqual("var", Variables.numberValue(123.0d)).count());
     assertEquals(0, caseService.createCaseInstanceQuery().variableValueLessThan("var", Variables.numberValue((short) 123)).count());

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/ExecutionQueryTest.java
Patch:
@@ -1526,7 +1526,7 @@ public void testProcessVariableValueNumberComparison() throws Exception {
     runtimeService.startProcessInstanceByKey("oneTaskProcess",
         Collections.<String, Object>singletonMap("var", "123"));
 
-    assertEquals(3, runtimeService.createExecutionQuery().processVariableValueNotEquals("var", Variables.numberValue(123)).count());
+    assertEquals(4, runtimeService.createExecutionQuery().processVariableValueNotEquals("var", Variables.numberValue(123)).count());
   }
 
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/task/TaskQueryTest.java
Patch:
@@ -979,7 +979,7 @@ public void testProcessVariableValueNumberComparison() throws Exception {
     runtimeService.startProcessInstanceByKey("oneTaskProcess",
         Collections.<String, Object>singletonMap("var", "123"));
 
-    assertEquals(3, taskService.createTaskQuery().processVariableValueNotEquals("var", Variables.numberValue(123)).count());
+    assertEquals(4, taskService.createTaskQuery().processVariableValueNotEquals("var", Variables.numberValue(123)).count());
     assertEquals(1, taskService.createTaskQuery().processVariableValueGreaterThan("var", Variables.numberValue(123)).count());
     assertEquals(5, taskService.createTaskQuery().processVariableValueGreaterThanOrEquals("var", Variables.numberValue(123)).count());
     assertEquals(0, taskService.createTaskQuery().processVariableValueLessThan("var", Variables.numberValue(123)).count());

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -479,8 +479,9 @@ public ProcessDefinitionEntity parseProcess(Element processElement) {
     ProcessDefinitionEntity processDefinition = new ProcessDefinitionEntity();
 
     /*
-     * Mapping object model - bpmn xml: processDefinition.id -> generated by
-     * activiti engine processDefinition.key -> bpmn id (required)
+     * Mapping object model - bpmn xml:
+     * processDefinition.id -> generated by
+     * processDefinition.key -> bpmn id (required)
      * processDefinition.name -> bpmn name (optional)
      */
     processDefinition.setKey(processElement.attribute("id"));

File: engine/src/test/java/org/camunda/bpm/engine/test/api/repository/ProcessDefinitionQueryTest.java
Patch:
@@ -70,18 +70,21 @@ public void testProcessDefinitionProperties() {
     ProcessDefinition processDefinition = processDefinitions.get(0);
     assertEquals("one", processDefinition.getKey());
     assertEquals("One", processDefinition.getName());
+    assertEquals("Desc one", processDefinition.getDescription());
     assertTrue(processDefinition.getId().startsWith("one:1"));
     assertEquals("Examples", processDefinition.getCategory());
 
     processDefinition = processDefinitions.get(1);
     assertEquals("one", processDefinition.getKey());
     assertEquals("One", processDefinition.getName());
+    assertEquals("Desc one", processDefinition.getDescription());
     assertTrue(processDefinition.getId().startsWith("one:2"));
     assertEquals("Examples", processDefinition.getCategory());
 
     processDefinition = processDefinitions.get(2);
     assertEquals("two", processDefinition.getKey());
     assertEquals("Two", processDefinition.getName());
+    assertNull(processDefinition.getDescription());
     assertTrue(processDefinition.getId().startsWith("two:1"));
     assertEquals("Examples2", processDefinition.getCategory());
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/handler/HumanTaskItemHandler.java
Patch:
@@ -202,8 +202,8 @@ protected void initializeTaskDefinitionFollowUpDate(CmmnElement element, TaskDef
     String followUpDate = definition.getCamundaFollowUpDate();
     if (followUpDate != null) {
       ExpressionManager expressionManager = context.getExpressionManager();
-      Expression dueDateExpression = expressionManager.createExpression(followUpDate);
-      taskDefinition.setFollowUpDateExpression(dueDateExpression);
+      Expression followUpDateExpression = expressionManager.createExpression(followUpDate);
+      taskDefinition.setFollowUpDateExpression(followUpDateExpression);
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/execution/CmmnExecution.java
Patch:
@@ -426,7 +426,7 @@ protected void checkAndFireExitCriteria(List<String> satisfiedSentries) {
       List<CmmnSentryDeclaration> exitCriteria = activity.getExitCriteria();
       for (CmmnSentryDeclaration sentryDeclaration : exitCriteria) {
 
-        if (satisfiedSentries.contains(sentryDeclaration.getId())) {
+        if (sentryDeclaration != null && satisfiedSentries.contains(sentryDeclaration.getId())) {
           fireExitCriteria();
           break;
         }
@@ -445,7 +445,7 @@ protected void checkAndFireEntryCriteria(List<String> satisfiedSentries) {
       List<CmmnSentryDeclaration> entryCriteria = activity.getEntryCriteria();
       for (CmmnSentryDeclaration sentryDeclaration : entryCriteria) {
 
-        if (satisfiedSentries.contains(sentryDeclaration.getId())) {
+        if (sentryDeclaration != null && satisfiedSentries.contains(sentryDeclaration.getId())) {
           fireEntryCriteria();
           break;
         }

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSession.java
Patch:
@@ -316,7 +316,7 @@ public void dbSchemaCheckVersion() {
       }
     }
 
-    log.fine("activiti db schema check successful");
+    log.fine("database schema check successful");
   }
 
   protected String addMissingComponent(String missingComponents, String component) {
@@ -516,7 +516,7 @@ private void executeSchemaResource(String operation, String component, String re
         throw exception;
       }
 
-      log.fine("activiti db schema " + operation + " for component "+component+" successful");
+      log.fine("database schema " + operation + " for component "+component+" successful");
 
     } catch (Exception e) {
       throw new ProcessEngineException("couldn't "+operation+" db schema: "+exceptionSqlStatement, e);

File: qa/performance-tests-engine/src/main/java/org/camunda/bpm/qa/performance/engine/sqlstatementlog/StatementLogProcessEnginePlugin.java
Patch:
@@ -15,7 +15,7 @@
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.camunda.bpm.engine.impl.cfg.AbstractProcessEnginePlugin;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
-import org.camunda.bpm.engine.impl.db.DbSqlSessionFactory;
+import org.camunda.bpm.engine.impl.db.sql.DbSqlSessionFactory;
 
 /**
  * <p>ProcessEnginePlugin activating statement logging.</p>

File: engine-plugins/spin-plugin/src/test/java/org/camunda/spin/plugin/variables/JsonSerializationTest.java
Patch:
@@ -516,7 +516,7 @@ public void testRemoveVariable() throws JSONException {
    * CAM-3222
    */
   @Deployment(resources = SERVICE_TASK_PROCESS)
-  public void FAILING_testImplicitlyUpdateEmptyList() {
+  public void testImplicitlyUpdateEmptyList() {
     ProcessInstance instance = runtimeService.startProcessInstanceByKey("serviceTaskProcess",
         Variables.createVariables()
           .putValueTyped("listVar",

File: engine-plugins/spin-plugin/src/test/java/org/camunda/spin/plugin/variables/UpdateValueDelegate.java
Patch:
@@ -36,9 +36,8 @@ public void execute(DelegateExecution execution) throws Exception {
     List<JsonSerializable> var = (List<JsonSerializable>) typedValue.getValue();
     JsonSerializable newElement = new JsonSerializable();
     newElement.setStringProperty(STRING_PROPERTY);
+    // implicit update of the list, so no execution.setVariable call
     var.add(newElement);
-//    execution.setVariable("var", Variables.objectValue(var)
-//        .serializationDataFormat("application/json").create());
 
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -213,7 +213,6 @@
 import org.camunda.bpm.engine.impl.variable.serializer.ByteArrayValueSerializer;
 import org.camunda.bpm.engine.impl.variable.serializer.DateValueSerializer;
 import org.camunda.bpm.engine.impl.variable.serializer.DefaultVariableSerializers;
-import org.camunda.bpm.engine.impl.variable.serializer.DeserializedObjectsSessionFactory;
 import org.camunda.bpm.engine.impl.variable.serializer.DoubleValueSerializer;
 import org.camunda.bpm.engine.impl.variable.serializer.IntegerValueSerializer;
 import org.camunda.bpm.engine.impl.variable.serializer.JavaObjectSerializer;
@@ -875,8 +874,6 @@ protected void initSessionFactories() {
       addSessionFactory(new GenericManagerFactory(CaseExecutionManager.class));
       addSessionFactory(new GenericManagerFactory(CaseSentryPartManager.class));
 
-      addSessionFactory(new DeserializedObjectsSessionFactory());
-
       sessionFactories.put(ReadOnlyIdentityProvider.class, identityProviderSessionFactory);
 
       // check whether identityProviderSessionFactory implements WritableIdentityProvider

File: engine/src/test/java/org/camunda/bpm/engine/test/variables/JavaSerializationTest.java
Patch:
@@ -135,7 +135,7 @@ public void testJavaObjectNotDeserializedIfNotRequested() throws Exception {
         .serializationDataFormat(JAVA_DATA_FORMAT)
         .objectTypeName(JavaSerializable.class.getName())
         .create()));
-    
+
     // then
     // it does not fail
   }

File: engine-plugins/spin-plugin/src/main/java/org/camunda/spin/plugin/impl/SpinObjectValueSerializer.java
Patch:
@@ -99,7 +99,7 @@ protected Object deserializeFromByteArray(byte[] bytes, String objectTypeName) t
     }
   }
 
-  protected boolean canSerializeObject(Object value) {
+  protected boolean canSerializeValue(Object value) {
     return dataFormat.getMapper().canMap(value);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/ValueTypeResolverImpl.java
Patch:
@@ -59,7 +59,7 @@ public ValueTypeResolverImpl() {
     addType(NUMBER);
   }
 
-  protected void addType(ValueType type) {
+  public void addType(ValueType type) {
     knownTypes.put(type.getName(), type);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/AbstractTypedValueSerializer.java
Patch:
@@ -37,7 +37,7 @@ public String getSerializationDataformat() {
   }
 
   public boolean canHandle(TypedValue value) {
-    if(value.getType() != null && !valueType.equals(value.getType())) {
+    if(value.getType() != null && !valueType.getClass().isAssignableFrom(value.getType().getClass())) {
       return false;
     }
     else {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/DeserializedObject.java
Patch:
@@ -25,12 +25,12 @@
  */
 public class DeserializedObject {
 
-  protected AbstractObjectValueSerializer serializer;
+  protected AbstractSerializableValueSerializer<?> serializer;
   Object deserializedObject;
   byte[] originalBytes;
   VariableInstanceEntity variableInstanceEntity;
 
-  public DeserializedObject(AbstractObjectValueSerializer serializer, Object deserializedObject, byte[] serializedBytes, VariableInstanceEntity variableInstanceEntity) {
+  public DeserializedObject(AbstractSerializableValueSerializer<?> serializer, Object deserializedObject, byte[] serializedBytes, VariableInstanceEntity variableInstanceEntity) {
     this.serializer = serializer;
     this.deserializedObject = deserializedObject;
     this.originalBytes = serializedBytes;

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/DeserializedObjectsSession.java
Patch:
@@ -30,7 +30,7 @@ protected void addDeserializedObject(DeserializedObject deserializedObject) {
     deserializedObjects.add(deserializedObject);
   }
 
-  public void addDeserializedObject(AbstractObjectValueSerializer serializer, Object deserializedObject, byte[] serializedBytes, VariableInstanceEntity variableInstanceEntity) {
+  public void addDeserializedObject(AbstractSerializableValueSerializer<?> serializer, Object deserializedObject, byte[] serializedBytes, VariableInstanceEntity variableInstanceEntity) {
     addDeserializedObject(new DeserializedObject(serializer, deserializedObject, serializedBytes, variableInstanceEntity));
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/serializer/JavaObjectSerializer.java
Patch:
@@ -23,7 +23,7 @@
 
 import org.camunda.bpm.engine.impl.util.IoUtil;
 import org.camunda.bpm.engine.impl.util.ReflectUtil;
-import static org.camunda.bpm.engine.variable.Variables.SerializationDataFormats;
+import org.camunda.bpm.engine.variable.Variables.SerializationDataFormats;
 
 /**
  * Uses default java serialization to serialize java objects as byte streams.
@@ -78,7 +78,7 @@ protected String getTypeNameForDeserialized(Object deserializedObject) {
     return deserializedObject.getClass().getName();
   }
 
-  protected boolean canSerializeObject(Object value) {
+  protected boolean canSerializeValue(Object value) {
     return value instanceof Serializable;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/variable/type/ValueTypeResolver.java
Patch:
@@ -19,6 +19,8 @@
  */
 public interface ValueTypeResolver {
 
+  void addType(ValueType type);
+
   ValueType typeForName(String typeName);
 
   /**

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -365,7 +365,7 @@ public void setExceptionStacktrace(String exception) {
     }
   }
 
-  public JobHandler getJobHandler() {
+  protected JobHandler getJobHandler() {
     Map<String, JobHandler> jobHandlers = Context.getProcessEngineConfiguration().getJobHandlers();
     return jobHandlers.get(jobHandlerType);
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobManager.java
Patch:
@@ -14,7 +14,7 @@
 package org.camunda.bpm.engine.impl.persistence.entity;
 
 import static org.camunda.bpm.engine.impl.jobexecutor.TimerEventJobHandler.JOB_HANDLER_CONFIG_PROPERTY_DELIMITER;
-import static org.camunda.bpm.engine.impl.jobexecutor.TimerEventJobHandler.JOB_HANDLER_CONFIG_PROPERTY_FOLLOW_UP_TIMER_JOB_CREATED;
+import static org.camunda.bpm.engine.impl.jobexecutor.TimerEventJobHandler.JOB_HANDLER_CONFIG_PROPERTY_FOLLOW_UP_JOB_CREATED;
 import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
 
 import java.util.Date;
@@ -170,7 +170,7 @@ public List<Job> findJobsByConfiguration(String jobHandlerType, String jobHandle
       || TimerStartEventJobHandler.TYPE.equals(jobHandlerType)
       || TimerStartEventSubprocessJobHandler.TYPE.equals(jobHandlerType)) {
 
-      String queryValue = jobHandlerConfiguration + JOB_HANDLER_CONFIG_PROPERTY_DELIMITER + JOB_HANDLER_CONFIG_PROPERTY_FOLLOW_UP_TIMER_JOB_CREATED;
+      String queryValue = jobHandlerConfiguration + JOB_HANDLER_CONFIG_PROPERTY_DELIMITER + JOB_HANDLER_CONFIG_PROPERTY_FOLLOW_UP_JOB_CREATED;
       params.put("handlerConfigurationWithFollowUpJobCreatedProperty", queryValue);
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/TimerDeclarationImpl.java
Patch:
@@ -112,7 +112,7 @@ else if (dueDateValue instanceof Date) {
       timer.setExecution(execution);
     }
 
-    if (type == TimerDeclarationType.CYCLE) {
+    if (type == TimerDeclarationType.CYCLE && jobHandlerType != TimerCatchIntermediateEventJobHandler.TYPE) {
 
       // See ACT-1427: A boundary timer with a cancelActivity='true', doesn't need to repeat itself
       if (!isInterruptingTimer) {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/TestOrderingUtil.java
Patch:
@@ -169,7 +169,7 @@ public boolean hasNullProperty(Task object) {
   public static NullTolerantComparator<Task> taskByPriority() {
     return new NullTolerantComparator<Task>() {
       public int compare(Task o1, Task o2) {
-        return Integer.compare(o1.getPriority(), o2.getPriority());
+        return o1.getPriority() - o2.getPriority();
       }
 
       public boolean hasNullProperty(Task object) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/ExecutionQueryImpl.java
Patch:
@@ -180,17 +180,17 @@ public ExecutionQuery incidentMessageLike(String incidentMessageLike) {
   //ordering ////////////////////////////////////////////////////
 
   public ExecutionQueryImpl orderByProcessInstanceId() {
-    this.orderProperty = ExecutionQueryProperty.PROCESS_INSTANCE_ID;
+    orderBy(ExecutionQueryProperty.PROCESS_INSTANCE_ID);
     return this;
   }
 
   public ExecutionQueryImpl orderByProcessDefinitionId() {
-    this.orderProperty = ExecutionQueryProperty.PROCESS_DEFINITION_ID;
+    orderBy(new QueryOrderingProperty(QueryOrderingProperty.RELATION_PROCESS_DEFINITION, ExecutionQueryProperty.PROCESS_DEFINITION_ID));
     return this;
   }
 
   public ExecutionQueryImpl orderByProcessDefinitionKey() {
-    this.orderProperty = ExecutionQueryProperty.PROCESS_DEFINITION_KEY;
+    orderBy(new QueryOrderingProperty(QueryOrderingProperty.RELATION_PROCESS_DEFINITION, ExecutionQueryProperty.PROCESS_DEFINITION_KEY));
     return this;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/entity/runtime/CaseInstanceQueryImpl.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.camunda.bpm.engine.exception.NotValidException;
 import org.camunda.bpm.engine.impl.AbstractVariableQueryImpl;
+import org.camunda.bpm.engine.impl.QueryOrderingProperty;
 import org.camunda.bpm.engine.impl.Page;
 import org.camunda.bpm.engine.impl.cmmn.execution.CaseExecutionState;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
@@ -128,7 +129,8 @@ public CaseInstanceQuery orderByCaseInstanceId() {
   }
 
   public CaseInstanceQuery orderByCaseDefinitionKey() {
-    orderBy(CaseInstanceQueryProperty.CASE_DEFINITION_KEY);
+    orderBy(new QueryOrderingProperty(QueryOrderingProperty.RELATION_CASE_DEFINITION,
+        CaseInstanceQueryProperty.CASE_DEFINITION_KEY));
     return this;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -174,7 +174,7 @@ public class DbSqlSessionFactory implements SessionFactory {
 
     // db2
     databaseSpecificLimitBeforeStatements.put(DB2, "SELECT SUB.* FROM (");
-    databaseSpecificLimitAfterStatements.put(DB2, ")RES ) SUB WHERE SUB.rnk >= #{firstRow} AND SUB.rnk < #{lastRow}");
+    databaseSpecificLimitAfterStatements.put(DB2, ")RES ) SUB WHERE SUB.rnk >= #{firstRow} AND SUB.rnk < #{lastRow} ORDER BY SUB.rnk");
     databaseSpecificLimitBetweenStatements.put(DB2, ", row_number() over (ORDER BY ${orderBy}) rnk FROM ( select distinct RES.* ");
     databaseSpecificLimitBetweenClobStatements.put(DB2, ", row_number() over (ORDER BY ${orderBy}) rnk FROM ( select RES.* ");
     databaseSpecificOrderByStatements.put(DB2, "");
@@ -200,8 +200,9 @@ public class DbSqlSessionFactory implements SessionFactory {
     dbSpecificConstants.put(DB2, constants);
 
     // mssql
+
     databaseSpecificLimitBeforeStatements.put(MSSQL, "SELECT SUB.* FROM (");
-    databaseSpecificLimitAfterStatements.put(MSSQL, ")RES ) SUB WHERE SUB.rnk >= #{firstRow} AND SUB.rnk < #{lastRow}");
+    databaseSpecificLimitAfterStatements.put(MSSQL, ")RES ) SUB WHERE SUB.rnk >= #{firstRow} AND SUB.rnk < #{lastRow} ORDER BY SUB.rnk");
     databaseSpecificLimitBetweenStatements.put(MSSQL, ", row_number() over (ORDER BY ${orderBy}) rnk FROM ( select distinct RES.* ");
     databaseSpecificLimitBetweenClobStatements.put(MSSQL, databaseSpecificLimitBetweenStatements.get(MSSQL));
     databaseSpecificOrderByStatements.put(MSSQL, "");

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/message/MessageEventSubprocessTest.java
Patch:
@@ -582,7 +582,7 @@ public void testNonInterruptingInMultiSequentialEmbeddedSubprocess() {
   }
 
   @Deployment
-  public void FAILING_testNonInterruptingWithParallelForkInsideEmbeddedSubProcess() {
+  public void testNonInterruptingWithParallelForkInsideEmbeddedSubProcess() {
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("process");
     runtimeService.messageEventReceived("newMessage", runtimeService.createEventSubscriptionQuery().singleResult().getExecutionId());
 

File: engine-cdi/src/test/java/org/camunda/bpm/engine/cdi/test/impl/context/MultiInstanceTest.java
Patch:
@@ -17,14 +17,12 @@
 import org.camunda.bpm.engine.cdi.BusinessProcess;
 import org.camunda.bpm.engine.cdi.test.CdiProcessEngineTestCase;
 import org.camunda.bpm.engine.test.Deployment;
-import org.junit.Ignore;
 import org.junit.Test;
 
 /**
  * @author Daniel Meyer
  *
  */
-@Ignore("see: https://app.camunda.com/jira/browse/CAM-986")
 public class MultiInstanceTest extends CdiProcessEngineTestCase {
   
   @Test

File: engine/src/test/java/org/camunda/bpm/engine/test/cmmn/sentry/SentryEntryCriteriaTest.java
Patch:
@@ -789,7 +789,7 @@ public void testFireAlsoNotAffectedSentries() {
    * CAM-3226
    */
   @Deployment
-  public void FAILING_testSentryShouldNotBeEvaluatedAfterStageComplete() {
+  public void testSentryShouldNotBeEvaluatedAfterStageComplete() {
     // given
     String caseInstanceId = createCaseInstance().getId();
 

File: engine/src/test/java/org/camunda/bpm/engine/test/cmmn/activation/ManualActivationRuleTest.java
Patch:
@@ -28,7 +28,7 @@ public class ManualActivationRuleTest extends CmmnProcessEngineTestCase {
    * CAM-3170
    */
   @Deployment(resources = "org/camunda/bpm/engine/test/cmmn/activation/ManualActivationRuleTest.testVariableBasedRule.cmmn")
-  public void FAILING_testManualActivationRuleEvaluatesToTrue() {
+  public void testManualActivationRuleEvaluatesToTrue() {
     caseService.createCaseInstanceByKey("case", Collections.<String, Object>singletonMap("manualActivation", true));
 
     CaseExecution taskExecution = caseService.createCaseExecutionQuery().activityId("PI_HumanTask_1").singleResult();
@@ -41,7 +41,7 @@ public void FAILING_testManualActivationRuleEvaluatesToTrue() {
    * CAM-3170
    */
   @Deployment(resources = "org/camunda/bpm/engine/test/cmmn/activation/ManualActivationRuleTest.testVariableBasedRule.cmmn")
-  public void FAILING_testManualActivationRuleEvaluatesToFalse() {
+  public void testManualActivationRuleEvaluatesToFalse() {
     caseService.createCaseInstanceByKey("case", Collections.<String, Object>singletonMap("manualActivation", false));
 
     CaseExecution taskExecution = caseService.createCaseExecutionQuery().activityId("PI_HumanTask_1").singleResult();

File: engine/src/test/java/org/camunda/bpm/engine/test/cmmn/handler/CaseTaskPlanItemHandlerTest.java
Patch:
@@ -12,8 +12,8 @@
  */
 package org.camunda.bpm.engine.test.cmmn.handler;
 
-import static org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler.PROPERTY_ACTIVITY_TYPE;
 import static org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler.PROPERTY_ACTIVITY_DESCRIPTION;
+import static org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler.PROPERTY_ACTIVITY_TYPE;
 import static org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler.PROPERTY_IS_BLOCKING;
 import static org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler.PROPERTY_MANUAL_ACTIVATION_RULE;
 import static org.junit.Assert.assertEquals;
@@ -44,6 +44,7 @@
 import org.camunda.bpm.model.cmmn.impl.instance.Body;
 import org.camunda.bpm.model.cmmn.impl.instance.ConditionExpression;
 import org.camunda.bpm.model.cmmn.impl.instance.DefaultControl;
+import org.camunda.bpm.model.cmmn.impl.instance.ItemControl;
 import org.camunda.bpm.model.cmmn.instance.CaseTask;
 import org.camunda.bpm.model.cmmn.instance.ExtensionElements;
 import org.camunda.bpm.model.cmmn.instance.IfPart;
@@ -808,7 +809,7 @@ public void testEntryCriteriaAndExitCriteria() {
   @Test
   public void testManualActivationRule() {
     // given
-    PlanItemControl itemControl = createElement(planItem, "ItemControl_1", PlanItemControl.class);
+    ItemControl itemControl = createElement(planItem, "ItemControl_1", ItemControl.class);
     ManualActivationRule manualActivationRule = createElement(itemControl, "ManualActivationRule_1", ManualActivationRule.class);
     ConditionExpression expression = createElement(manualActivationRule, "Expression_1", ConditionExpression.class);
     Body body = createElement(expression, Body.class);

File: engine/src/test/java/org/camunda/bpm/engine/test/cmmn/handler/HumanTaskDicretionaryItemHandlerTest.java
Patch:
@@ -12,8 +12,8 @@
  */
 package org.camunda.bpm.engine.test.cmmn.handler;
 
-import static org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler.PROPERTY_ACTIVITY_TYPE;
 import static org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler.PROPERTY_ACTIVITY_DESCRIPTION;
+import static org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler.PROPERTY_ACTIVITY_TYPE;
 import static org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler.PROPERTY_DISCRETIONARY;
 import static org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler.PROPERTY_IS_BLOCKING;
 import static org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler.PROPERTY_MANUAL_ACTIVATION_RULE;
@@ -32,6 +32,7 @@
 import org.camunda.bpm.model.cmmn.impl.instance.Body;
 import org.camunda.bpm.model.cmmn.impl.instance.ConditionExpression;
 import org.camunda.bpm.model.cmmn.impl.instance.DefaultControl;
+import org.camunda.bpm.model.cmmn.impl.instance.ItemControl;
 import org.camunda.bpm.model.cmmn.instance.DiscretionaryItem;
 import org.camunda.bpm.model.cmmn.instance.HumanTask;
 import org.camunda.bpm.model.cmmn.instance.ManualActivationRule;
@@ -199,7 +200,7 @@ public void testWithParent() {
   @Test
   public void testManualActivationRule() {
     // given
-    PlanItemControl itemControl = createElement(discretionaryItem, "ItemControl_1", PlanItemControl.class);
+    ItemControl itemControl = createElement(discretionaryItem, "ItemControl_1", ItemControl.class);
     ManualActivationRule manualActivationRule = createElement(itemControl, "ManualActivationRule_1", ManualActivationRule.class);
     ConditionExpression expression = createElement(manualActivationRule, "Expression_1", ConditionExpression.class);
     Body body = createElement(expression, Body.class);

File: engine/src/test/java/org/camunda/bpm/engine/test/cmmn/handler/HumanTaskPlanItemHandlerTest.java
Patch:
@@ -12,8 +12,8 @@
  */
 package org.camunda.bpm.engine.test.cmmn.handler;
 
-import static org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler.PROPERTY_ACTIVITY_TYPE;
 import static org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler.PROPERTY_ACTIVITY_DESCRIPTION;
+import static org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler.PROPERTY_ACTIVITY_TYPE;
 import static org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler.PROPERTY_IS_BLOCKING;
 import static org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler.PROPERTY_MANUAL_ACTIVATION_RULE;
 import static org.junit.Assert.assertEquals;
@@ -48,6 +48,7 @@
 import org.camunda.bpm.model.cmmn.impl.instance.CaseRoles;
 import org.camunda.bpm.model.cmmn.impl.instance.ConditionExpression;
 import org.camunda.bpm.model.cmmn.impl.instance.DefaultControl;
+import org.camunda.bpm.model.cmmn.impl.instance.ItemControl;
 import org.camunda.bpm.model.cmmn.instance.ExtensionElements;
 import org.camunda.bpm.model.cmmn.instance.HumanTask;
 import org.camunda.bpm.model.cmmn.instance.IfPart;
@@ -1119,7 +1120,7 @@ public void testEntryCriteriaAndExitCriteria() {
   @Test
   public void testManualActivationRule() {
     // given
-    PlanItemControl itemControl = createElement(planItem, "ItemControl_1", PlanItemControl.class);
+    ItemControl itemControl = createElement(planItem, "ItemControl_1", ItemControl.class);
     ManualActivationRule manualActivationRule = createElement(itemControl, "ManualActivationRule_1", ManualActivationRule.class);
     ConditionExpression expression = createElement(manualActivationRule, "Expression_1", ConditionExpression.class);
     Body body = createElement(expression, Body.class);

File: engine/src/test/java/org/camunda/bpm/engine/test/cmmn/handler/ProcessTaskPlanItemHandlerTest.java
Patch:
@@ -12,8 +12,8 @@
  */
 package org.camunda.bpm.engine.test.cmmn.handler;
 
-import static org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler.PROPERTY_ACTIVITY_TYPE;
 import static org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler.PROPERTY_ACTIVITY_DESCRIPTION;
+import static org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler.PROPERTY_ACTIVITY_TYPE;
 import static org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler.PROPERTY_IS_BLOCKING;
 import static org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler.PROPERTY_MANUAL_ACTIVATION_RULE;
 import static org.junit.Assert.assertEquals;
@@ -44,6 +44,7 @@
 import org.camunda.bpm.model.cmmn.impl.instance.Body;
 import org.camunda.bpm.model.cmmn.impl.instance.ConditionExpression;
 import org.camunda.bpm.model.cmmn.impl.instance.DefaultControl;
+import org.camunda.bpm.model.cmmn.impl.instance.ItemControl;
 import org.camunda.bpm.model.cmmn.instance.ExtensionElements;
 import org.camunda.bpm.model.cmmn.instance.IfPart;
 import org.camunda.bpm.model.cmmn.instance.ManualActivationRule;
@@ -809,7 +810,7 @@ public void testEntryCriteriaAndExitCriteria() {
   @Test
   public void testManualActivationRule() {
     // given
-    PlanItemControl itemControl = createElement(planItem, "ItemControl_1", PlanItemControl.class);
+    ItemControl itemControl = createElement(planItem, "ItemControl_1", ItemControl.class);
     ManualActivationRule manualActivationRule = createElement(itemControl, "ManualActivationRule_1", ManualActivationRule.class);
     ConditionExpression expression = createElement(manualActivationRule, "Expression_1", ConditionExpression.class);
     Body body = createElement(expression, Body.class);

File: engine/src/test/java/org/camunda/bpm/engine/test/cmmn/handler/StageDiscretionaryItemHandlerTest.java
Patch:
@@ -12,8 +12,8 @@
  */
 package org.camunda.bpm.engine.test.cmmn.handler;
 
-import static org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler.PROPERTY_ACTIVITY_TYPE;
 import static org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler.PROPERTY_ACTIVITY_DESCRIPTION;
+import static org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler.PROPERTY_ACTIVITY_TYPE;
 import static org.camunda.bpm.engine.impl.cmmn.handler.ItemHandler.PROPERTY_MANUAL_ACTIVATION_RULE;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
@@ -30,6 +30,7 @@
 import org.camunda.bpm.model.cmmn.impl.instance.Body;
 import org.camunda.bpm.model.cmmn.impl.instance.ConditionExpression;
 import org.camunda.bpm.model.cmmn.impl.instance.DefaultControl;
+import org.camunda.bpm.model.cmmn.impl.instance.ItemControl;
 import org.camunda.bpm.model.cmmn.instance.DiscretionaryItem;
 import org.camunda.bpm.model.cmmn.instance.ManualActivationRule;
 import org.camunda.bpm.model.cmmn.instance.PlanItemControl;
@@ -153,7 +154,7 @@ public void testWithParent() {
   @Test
   public void testManualActivationRule() {
     // given
-    PlanItemControl itemControl = createElement(discretionaryItem, "ItemControl_1", PlanItemControl.class);
+    ItemControl itemControl = createElement(discretionaryItem, "ItemControl_1", ItemControl.class);
     ManualActivationRule manualActivationRule = createElement(itemControl, "ManualActivationRule_1", ManualActivationRule.class);
     ConditionExpression expression = createElement(manualActivationRule, "Expression_1", ConditionExpression.class);
     Body body = createElement(expression, Body.class);

File: engine/src/test/java/org/camunda/bpm/engine/test/cmmn/handler/StagePlanItemHandlerTest.java
Patch:
@@ -35,6 +35,7 @@
 import org.camunda.bpm.model.cmmn.impl.instance.Body;
 import org.camunda.bpm.model.cmmn.impl.instance.ConditionExpression;
 import org.camunda.bpm.model.cmmn.impl.instance.DefaultControl;
+import org.camunda.bpm.model.cmmn.impl.instance.ItemControl;
 import org.camunda.bpm.model.cmmn.instance.IfPart;
 import org.camunda.bpm.model.cmmn.instance.ManualActivationRule;
 import org.camunda.bpm.model.cmmn.instance.PlanItem;
@@ -371,7 +372,7 @@ public void testEntryCriteriaAndExitCriteria() {
   @Test
   public void testManualActivationRule() {
     // given
-    PlanItemControl itemControl = createElement(planItem, "ItemControl_1", PlanItemControl.class);
+    ItemControl itemControl = createElement(planItem, "ItemControl_1", ItemControl.class);
     ManualActivationRule manualActivationRule = createElement(itemControl, "ManualActivationRule_1", ManualActivationRule.class);
     ConditionExpression expression = createElement(manualActivationRule, "Expression_1", ConditionExpression.class);
     Body body = createElement(expression, Body.class);

File: engine/src/test/java/org/camunda/bpm/engine/test/cmmn/handler/TaskPlanItemHandlerTest.java
Patch:
@@ -36,6 +36,7 @@
 import org.camunda.bpm.model.cmmn.impl.instance.Body;
 import org.camunda.bpm.model.cmmn.impl.instance.ConditionExpression;
 import org.camunda.bpm.model.cmmn.impl.instance.DefaultControl;
+import org.camunda.bpm.model.cmmn.impl.instance.ItemControl;
 import org.camunda.bpm.model.cmmn.instance.IfPart;
 import org.camunda.bpm.model.cmmn.instance.ManualActivationRule;
 import org.camunda.bpm.model.cmmn.instance.PlanItem;
@@ -397,7 +398,7 @@ public void testEntryCriteriaAndExitCriteria() {
   @Test
   public void testManualActivationRule() {
     // given
-    PlanItemControl itemControl = createElement(planItem, "ItemControl_1", PlanItemControl.class);
+    ItemControl itemControl = createElement(planItem, "ItemControl_1", ItemControl.class);
     ManualActivationRule manualActivationRule = createElement(itemControl, "ManualActivationRule_1", ManualActivationRule.class);
     ConditionExpression expression = createElement(manualActivationRule, "Expression_1", ConditionExpression.class);
     Body body = createElement(expression, Body.class);

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/Cmmn.java
Patch:
@@ -50,6 +50,7 @@
 import org.camunda.bpm.model.cmmn.impl.instance.InputCaseParameter;
 import org.camunda.bpm.model.cmmn.impl.instance.InputProcessParameter;
 import org.camunda.bpm.model.cmmn.impl.instance.InputsCaseParameter;
+import org.camunda.bpm.model.cmmn.impl.instance.ItemControl;
 import org.camunda.bpm.model.cmmn.impl.instance.ManualActivationRuleImpl;
 import org.camunda.bpm.model.cmmn.impl.instance.MilestoneImpl;
 import org.camunda.bpm.model.cmmn.impl.instance.OnPartImpl;
@@ -292,6 +293,7 @@ protected void doRegisterTypes(ModelBuilder modelBuilder) {
     InputCaseParameter.registerType(modelBuilder);
     InputProcessParameter.registerType(modelBuilder);
     InputsCaseParameter.registerType(modelBuilder);
+    ItemControl.registerType(modelBuilder);
     ManualActivationRuleImpl.registerType(modelBuilder);
     MilestoneImpl.registerType(modelBuilder);
     ModelElementInstanceImpl.registerType(modelBuilder);

File: model-api/cmmn-model/src/main/java/org/camunda/bpm/model/cmmn/impl/CmmnModelConstants.java
Patch:
@@ -77,6 +77,7 @@ public class CmmnModelConstants {
   // plan item control
   public static final String CMMN_ELEMENT_PLAN_ITEM_CONTROL = "planItemControl";
   public static final String CMMN_ELEMENT_DEFAULT_CONTROL = "defaultControl";
+  public static final String CMMN_ELEMENT_ITEM_CONTROL = "itemControl";
 
   // plan item definitions
   public static final String CMMN_ELEMENT_PLAN_ITEM_DEFINITION = "planItemDefinition";

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/DiscretionaryItemTest.java
Patch:
@@ -15,6 +15,8 @@
 import java.util.Arrays;
 import java.util.Collection;
 
+import org.camunda.bpm.model.cmmn.impl.instance.ItemControl;
+
 /**
  * @author Roman Smirnov
  *
@@ -27,7 +29,7 @@ public TypeAssumption getTypeAssumption() {
 
   public Collection<ChildElementAssumption> getChildElementAssumptions() {
     return Arrays.asList(
-          new ChildElementAssumption(PlanItemControl.class, 0, 1)
+          new ChildElementAssumption(ItemControl.class, 0, 1)
         );
   }
 

File: model-api/cmmn-model/src/test/java/org/camunda/bpm/model/cmmn/instance/PlanItemTest.java
Patch:
@@ -15,6 +15,8 @@
 import java.util.Arrays;
 import java.util.Collection;
 
+import org.camunda.bpm.model.cmmn.impl.instance.ItemControl;
+
 /**
  * @author Roman Smirnov
  *
@@ -27,7 +29,7 @@ public TypeAssumption getTypeAssumption() {
 
   public Collection<ChildElementAssumption> getChildElementAssumptions() {
     return Arrays.asList(
-          new ChildElementAssumption(PlanItemControl.class, 0, 1)
+          new ChildElementAssumption(ItemControl.class, 0, 1)
         );
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -616,8 +616,9 @@ public Map<String, Object> getActivityInstanceVariables() {
   }
 
   public void setExecutionVariables(Map<String, Object> parameters) {
-    if (getExecution()!=null) {
-      execution.setVariables(parameters);
+    AbstractVariableScope scope = getParentVariableScope();
+    if (scope != null) {
+      scope.setVariables(parameters);
     }
   }
 

File: connect/core/src/main/java/org/camunda/connect/spi/ConnectorRequest.java
Patch:
@@ -43,8 +43,9 @@
  * This makes it easy to use the connector in a standalone way.
  * </p>
  *
- * <p>The request may return a value representing the output of the connector
- * invocation. Requests not returning a value should be of type {@link Void}.</p>
+ * <p>A request must return a {@link ConnectorResponse} that contains response
+ * data. Requests for which the response contains no payload or is not relevant should
+ * return an empty response that provides no data.</p>
  *
  * @author Daniel Meyer
  *

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/type/reference/ElementReferenceCollectionImpl.java
Patch:
@@ -52,7 +52,6 @@ protected void setReferenceIdentifier(ModelElementInstance referenceSourceElemen
     referenceSourceElement.setTextContent(referenceIdentifier);
   }
 
-  @SuppressWarnings("unchecked")
   private void performAddOperation(ModelElementInstanceImpl referenceSourceParentElement, Target referenceTargetElement) {
     ModelInstanceImpl modelInstance = referenceSourceParentElement.getModelInstance();
     String referenceTargetIdentifier = referenceTargetAttribute.getValue(referenceTargetElement);
@@ -112,7 +111,6 @@ public ModelElementType getReferenceSourceElementType() {
     return referenceSourceType;
   }
 
-  @SuppressWarnings("unchecked")
   private Collection<DomElement> getView(ModelElementInstanceImpl referenceSourceParentElement) {
     DomDocument document = referenceSourceParentElement.getModelInstance().getDocument();
     Collection<Source> referenceSourceElements = referenceSourceCollection.get(referenceSourceParentElement);

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/util/DomUtil.java
Patch:
@@ -37,6 +37,8 @@
 
 /**
  * Helper methods which abstract some gruesome DOM specifics.
+ * It does not provide synchronization when invoked in parallel with
+ * the same objects.
  *
  * @author Daniel Meyer
  * @author Sebastian Menski
@@ -128,7 +130,6 @@ public boolean matches(Node node) {
    * @param filter the {@link NodeListFilter} to apply to the {@link NodeList}
    * @return the List of all Nodes which match the filter
    */
-  @SuppressWarnings("unchecked")
   public static List<DomElement> filterNodeList(NodeList nodeList, NodeListFilter filter) {
 
     List<DomElement> filteredList = new ArrayList<DomElement>();
@@ -228,6 +229,7 @@ public static DomDocument getEmptyDocument(DocumentBuilderFactory documentBuilde
    * @throws ModelParseException if a parsing or IO error is triggered
    */
   public static DomDocument parseInputStream(DocumentBuilderFactory documentBuilderFactory, InputStream inputStream) {
+
     try {
       DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
       documentBuilder.setErrorHandler(new DomErrorHandler());

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/instance/DomElement.java
Patch:
@@ -13,14 +13,14 @@
 
 package org.camunda.bpm.model.xml.instance;
 
+import java.util.List;
+
 import org.camunda.bpm.model.xml.ModelException;
 import org.camunda.bpm.model.xml.impl.ModelInstanceImpl;
 import org.w3c.dom.Element;
 
-import java.util.List;
-
 /**
- * Encapsulates {@link Element}
+ * Encapsulates {@link Element}. Implementations of this interface must be thread-safe.
  *
  * @author Sebastian Menski
  */

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractProcessDefinitionRestServiceQueryTest.java
Patch:
@@ -63,7 +63,7 @@ public void testInvalidNumericParameter() {
     given().queryParam("version", anInvalidIntegerQueryParam)
       .then().expect().statusCode(Status.BAD_REQUEST.getStatusCode()).contentType(ContentType.JSON)
       .body("type", equalTo(InvalidRequestException.class.getSimpleName()))
-      .body("message", equalTo("Cannot set query parameter 'ver' to value 'aString': "
+      .body("message", equalTo("Cannot set query parameter 'version' to value 'aString': "
           + "Cannot convert value aString to java type java.lang.Integer"))
       .when().get(PROCESS_DEFINITION_QUERY_URL);
   }

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/AbstractProcessEngineRestServiceImpl.java
Patch:
@@ -54,7 +54,7 @@
 public abstract class AbstractProcessEngineRestServiceImpl {
 
   @Context
-  public Providers providers;
+  protected Providers providers;
 
   public ProcessDefinitionRestService getProcessDefinitionService(String engineName) {
     String rootResourcePath = getRelativeEngineUri(engineName).toASCIIString();

File: engine/src/test/java/org/camunda/bpm/engine/test/el/CustomExpressionManagerTest.java
Patch:
@@ -29,7 +29,8 @@ public class CustomExpressionManagerTest {
   @Test
   public void testBuiltinFunctionMapperRegistration() {
     // given a process engine configuration with a custom function mapper
-    ProcessEngineConfigurationImpl config = (ProcessEngineConfigurationImpl) ProcessEngineConfiguration.createStandaloneInMemProcessEngineConfiguration();
+    ProcessEngineConfigurationImpl config = (ProcessEngineConfigurationImpl) ProcessEngineConfiguration.createStandaloneInMemProcessEngineConfiguration()
+        .setJdbcUrl("jdbc:h2:mem:camunda" + getClass().getSimpleName());
 
     CustomExpressionManager customExpressionManager = new CustomExpressionManager();
     Assert.assertTrue(customExpressionManager.getFunctionMappers().isEmpty());

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SetProcessDefinitionVersionCmd.java
Patch:
@@ -129,7 +129,7 @@ public Void execute(CommandContext commandContext) {
     }
 
     // switch all jobs to the new process definition version
-    List<JobEntity> jobs = commandContext.getJobManager().findJobsByExecutionId(processInstanceId);
+    List<JobEntity> jobs = commandContext.getJobManager().findJobsByProcessInstanceId(processInstanceId);
     List<JobDefinitionEntity> currentJobDefinitions =
         commandContext.getJobDefinitionManager().findByProcessDefinitionId(currentProcessDefinition.getId());
     List<JobDefinitionEntity> newVersionJobDefinitions =

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/VariableInstanceEntity.java
Patch:
@@ -283,6 +283,7 @@ public void clearValueFields() {
     this.doubleValue = null;
     this.textValue = null;
     this.textValue2 = null;
+    this.cachedValue = null;
 
     if(this.byteArrayValueId != null) {
       deleteByteArrayValue();

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/impl/ProcessDefinitionResourceImpl.java
Patch:
@@ -255,7 +255,7 @@ public FormDto getStartForm() {
     }
     FormDto dto = FormDto.fromFormData(formData);
     if(dto.getKey() == null || dto.getKey().isEmpty()) {
-      if(formData.getFormFields() != null && !formData.getFormFields().isEmpty()) {
+      if(formData != null && formData.getFormFields() != null && !formData.getFormFields().isEmpty()) {
         dto.setKey("embedded:engine://engine/:engine/process-definition/"+processDefinitionId+"/rendered-form");
       }
     }

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/task/impl/TaskResourceImpl.java
Patch:
@@ -15,6 +15,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
+
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Request;
 import javax.ws.rs.core.Response.Status;
@@ -159,7 +160,7 @@ public FormDto getForm() {
 
     FormDto dto = FormDto.fromFormData(formData);
     if(dto.getKey() == null || dto.getKey().isEmpty()) {
-      if(formData.getFormFields() != null && !formData.getFormFields().isEmpty()) {
+      if(formData != null && formData.getFormFields() != null && !formData.getFormFields().isEmpty()) {
         dto.setKey("embedded:engine://engine/:engine/task/"+taskId+"/rendered-form");
       }
     }

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/ProcessDefinitionResource.java
Patch:
@@ -89,5 +89,5 @@ public interface ProcessDefinitionResource {
   @Path("/form-variables")
   @Produces(MediaType.APPLICATION_JSON)
   Map<String, VariableValueDto> getFormVariables(@QueryParam("variableNames") String variableNames,
-      @QueryParam(VariableResource.DESERIALIZE_VALUE_QUERY_PARAM) @DefaultValue("true") boolean deserializeValues);
+      @QueryParam(VariableResource.DESERIALIZE_VALUES_QUERY_PARAM) @DefaultValue("true") boolean deserializeValues);
 }

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/task/TaskResource.java
Patch:
@@ -14,6 +14,7 @@
 
 import java.util.List;
 import java.util.Map;
+
 import javax.ws.rs.Consumes;
 import javax.ws.rs.DefaultValue;
 import javax.ws.rs.GET;
@@ -113,7 +114,7 @@ public interface TaskResource {
   @Path("/form-variables")
   @Produces(MediaType.APPLICATION_JSON)
   Map<String, VariableValueDto> getFormVariables(@QueryParam("variableNames") String variableNames,
-      @QueryParam(VariableResource.DESERIALIZE_VALUE_QUERY_PARAM) @DefaultValue("true") boolean deserializeValues);
+      @QueryParam(VariableResource.DESERIALIZE_VALUES_QUERY_PARAM) @DefaultValue("true") boolean deserializeValues);
 
   @PUT
   @Consumes(MediaType.APPLICATION_JSON)

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/service/MscManagedProcessEngineController.java
Patch:
@@ -225,7 +225,7 @@ private Object createInstance(String configurationClassName) {
       return configurationClass.newInstance();
 
     } catch (Exception e) {
-      throw new ProcessEngineException("Could not load '"+configurationClassName+"': the class must be visible from the camunda-jboss-subsystem module.");
+      throw new ProcessEngineException("Could not load '"+configurationClassName+"': the class must be visible from the camunda-wildfly-subsystem module.");
     }
   }
 

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/service/MscManagedProcessEngineController.java
Patch:
@@ -225,7 +225,7 @@ private Object createInstance(String configurationClassName) {
       return configurationClass.newInstance();
 
     } catch (Exception e) {
-      throw new ProcessEngineException("Could not load '"+configurationClassName+"': the class must be visible from the camunda-jboss-subsystem module.");
+      throw new ProcessEngineException("Could not load '"+configurationClassName+"': the class must be visible from the camunda-wildfly-subsystem module.");
     }
   }
 

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/instance/DomDocumentImpl.java
Patch:
@@ -54,7 +54,7 @@ public void setRootElement(DomElement rootElement) {
     Element documentElement = document.getDocumentElement();
     Element newDocumentElement = ((DomElementImpl) rootElement).getElement();
     if (documentElement != null) {
-      document.replaceChild(documentElement, newDocumentElement);
+      document.replaceChild(newDocumentElement, documentElement);
     }
     else {
       document.appendChild(newDocumentElement);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetIdentityLinksForTaskCmd.java
Patch:
@@ -57,12 +57,14 @@ public List<IdentityLink> execute(CommandContext commandContext) {
     if (task.getAssignee() != null) {
       IdentityLinkEntity identityLink = new IdentityLinkEntity();
       identityLink.setUserId(task.getAssignee());
+      identityLink.setTask(task);
       identityLink.setType(IdentityLinkType.ASSIGNEE);
       identityLinks.add(identityLink);
     }
     if (task.getOwner() != null) {
       IdentityLinkEntity identityLink = new IdentityLinkEntity();
       identityLink.setUserId(task.getOwner());
+      identityLink.setTask(task);
       identityLink.setType(IdentityLinkType.OWNER);
       identityLinks.add(identityLink);
     }

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/history/FullHistoryTest.java
Patch:
@@ -1195,7 +1195,7 @@ public void testHistoricProcessInstanceVariableValueNotEquals() throws Exception
     assertEquals(0, historyService.createHistoricProcessInstanceQuery().variableValueNotEquals("stringVar","stringValue").count());
     assertEquals(0, historyService.createHistoricProcessInstanceQuery().variableValueNotEquals("booleanVar", true).count());
     assertEquals(0, historyService.createHistoricProcessInstanceQuery().variableValueNotEquals("dateVar", date).count());
-    assertEquals(0, historyService.createHistoricProcessInstanceQuery().variableValueNotEquals("nullVar", "123").count());
+    assertEquals(0, historyService.createHistoricProcessInstanceQuery().variableValueNotEquals("nullVar", null).count());
 
 //    assertEquals(1, historyService.createHistoricProcessInstanceQuery().variableValueNotEquals("longVar", 67890L).count());
 //    assertEquals(1, historyService.createHistoricProcessInstanceQuery().variableValueNotEquals("shortVar", (short) 456).count());

File: engine/src/main/java/org/camunda/bpm/engine/impl/TaskQueryImpl.java
Patch:
@@ -615,13 +615,13 @@ public TaskQuery followUpBeforeExpression(String followUpBeforeExpression) {
   public TaskQuery followUpBeforeOrNotExistent(Date followUpDate) {
     this.followUpBefore = followUpDate;
     this.followUpNullAccepted = true;
-    expressions.remove("followUpBefore");
+    expressions.remove("followUpBeforeOrNotExistent");
     return this;
   }
 
   @Override
   public TaskQuery followUpBeforeOrNotExistentExpression(String followUpDateExpression) {
-    expressions.put("followUpBefore", followUpDateExpression);
+    expressions.put("followUpBeforeOrNotExistent", followUpDateExpression);
     this.followUpNullAccepted = true;
     return this;
   }

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractCaseExecutionRestServiceInteractionTest.java
Patch:
@@ -149,6 +149,8 @@ public void testCaseExecutionRetrieval() {
         .body("caseDefinitionId", equalTo(MockProvider.EXAMPLE_CASE_EXECUTION_CASE_DEFINITION_ID))
         .body("activityId", equalTo(MockProvider.EXAMPLE_CASE_EXECUTION_ACTIVITY_ID))
         .body("activityName", equalTo(MockProvider.EXAMPLE_CASE_EXECUTION_ACTIVITY_NAME))
+        .body("activityType", equalTo(MockProvider.EXAMPLE_CASE_EXECUTION_ACTIVITY_TYPE))
+        .body("activityDescription", equalTo(MockProvider.EXAMPLE_CASE_EXECUTION_ACTIVITY_DESCRIPTION))
         .body("active", equalTo(MockProvider.EXAMPLE_CASE_EXECUTION_IS_ACTIVE))
         .body("enabled", equalTo(MockProvider.EXAMPLE_CASE_EXECUTION_IS_ENABLED))
         .body("disabled", equalTo(MockProvider.EXAMPLE_CASE_EXECUTION_IS_DISABLED))

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/AbstractHistoricCaseActivityInstanceRestServiceInteractionTest.java
Patch:
@@ -73,6 +73,7 @@ public void testGetSingleHistoricCaseInstance() {
     String returnedParentCaseActivityInstanceId = from(content).getString("parentCaseActivityInstanceId");
     String returnedCaseActivityId = from(content).getString("caseActivityId");
     String returnedCaseActivityName = from(content).getString("caseActivityName");
+    String returnedCaseActivityType = from(content).getString("caseActivityType");
     String returnedCaseDefinitionId = from(content).getString("caseDefinitionId");
     String returnedCaseInstanceId = from(content).getString("caseInstanceId");
     String returnedCaseExecutionId = from(content).getString("caseExecutionId");
@@ -93,6 +94,7 @@ public void testGetSingleHistoricCaseInstance() {
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_CASE_ACTIVITY_INSTANCE_PARENT_CASE_ACTIVITY_INSTANCE_ID, returnedParentCaseActivityInstanceId);
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_CASE_ACTIVITY_ID, returnedCaseActivityId);
     Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_CASE_ACTIVITY_NAME, returnedCaseActivityName);
+    Assert.assertEquals(MockProvider.EXAMPLE_HISTORIC_CASE_ACTIVITY_TYPE, returnedCaseActivityType);
     Assert.assertEquals(MockProvider.EXAMPLE_CASE_DEFINITION_ID, returnedCaseDefinitionId);
     Assert.assertEquals(MockProvider.EXAMPLE_CASE_INSTANCE_ID, returnedCaseInstanceId);
     Assert.assertEquals(MockProvider.EXAMPLE_CASE_EXECUTION_ID, returnedCaseExecutionId);

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/resteasy/HistoricCaseActivityInstanceRestServiceQueryTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.camunda.bpm.engine.rest.history.resteasy;
 
 import org.camunda.bpm.engine.rest.history.AbstractHistoricCaseActivityInstanceRestServiceQueryTest;
-import org.camunda.bpm.engine.rest.history.AbstractHistoricCaseInstanceRestServiceQueryTest;
 import org.camunda.bpm.engine.rest.util.EmbeddedServerBootstrap;
 import org.camunda.bpm.engine.rest.util.ResteasyServerBootstrap;
 import org.junit.AfterClass;

File: engine/src/main/java/org/camunda/bpm/engine/history/HistoricCaseActivityInstance.java
Patch:
@@ -34,6 +34,9 @@ public interface HistoricCaseActivityInstance {
    /** The display name for the case activity. */
    String getCaseActivityName();
 
+   /** The display type for the case activity. */
+   String getCaseActivityType();
+
    /** The case definition reference. */
    String getCaseDefinitionId();
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricCaseActivityInstanceQueryProperty.java
Patch:
@@ -35,6 +35,7 @@ public class HistoricCaseActivityInstanceQueryProperty implements QueryProperty
   public static final HistoricCaseActivityInstanceQueryProperty CASE_INSTANCE_ID = new HistoricCaseActivityInstanceQueryProperty("CASE_INST_ID_");
   public static final HistoricCaseActivityInstanceQueryProperty CASE_ACTIVITY_ID = new HistoricCaseActivityInstanceQueryProperty("CASE_ACT_ID_");
   public static final HistoricCaseActivityInstanceQueryProperty CASE_ACTIVITY_NAME = new HistoricCaseActivityInstanceQueryProperty("CASE_ACT_NAME_");
+  public static final HistoricCaseActivityInstanceQueryProperty CASE_ACTIVITY_TYPE = new HistoricCaseActivityInstanceQueryProperty("CASE_ACT_TYPE_");
   public static final HistoricCaseActivityInstanceQueryProperty CASE_DEFINITION_ID = new HistoricCaseActivityInstanceQueryProperty("CASE_DEF_ID_");
   public static final HistoricCaseActivityInstanceQueryProperty CREATE = new HistoricCaseActivityInstanceQueryProperty("CREATE_TIME_");
   public static final HistoricCaseActivityInstanceQueryProperty END = new HistoricCaseActivityInstanceQueryProperty("END_TIME_");

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/entity/runtime/CaseExecutionManager.java
Patch:
@@ -19,7 +19,6 @@
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.persistence.AbstractManager;
-import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 import org.camunda.bpm.engine.runtime.CaseExecution;
 import org.camunda.bpm.engine.runtime.CaseInstance;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/entity/runtime/CaseExecutionQueryImpl.java
Patch:
@@ -180,8 +180,8 @@ public List<CaseExecution> executeList(CommandContext commandContext, Page page)
 
     for (CaseExecution caseExecution : result) {
       CaseExecutionEntity caseExecutionEntity = (CaseExecutionEntity) caseExecution;
-      // initializes the name of the activity
-      // on current case execution
+      // initializes the name, type and description
+      // of the activity on current case execution
       caseExecutionEntity.getActivity();
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultCmmnHistoryEventProducer.java
Patch:
@@ -179,6 +179,7 @@ protected void initCaseActivityInstanceEvent(HistoricCaseActivityInstanceEventEn
 
     evt.setCaseActivityId(caseExecutionEntity.getActivityId());
     evt.setCaseActivityName(caseExecutionEntity.getActivityName());
+    evt.setCaseActivityType(caseExecutionEntity.getActivityType());
   }
 
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/CaseExecutionQueryTest.java
Patch:
@@ -2488,7 +2488,8 @@ public void testCaseExecutionProperties() {
     assertEquals(caseDefinitionId, task.getCaseDefinitionId());
     assertEquals(caseInstanceId, task.getCaseInstanceId());
     assertEquals(caseInstanceId, task.getParentId());
+    assertEquals("humanTask", task.getActivityType());
+    assertNotNull(task.getActivityDescription());
     assertNotNull(task.getId());
-
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/variable/type/ValueTypeResolver.java
Patch:
@@ -22,7 +22,7 @@ public interface ValueTypeResolver {
   ValueType typeForName(String typeName);
 
   /**
-   * Returns all sub types of the provided type
+   * Returns all (transitive) sub types of the provided type
    * given they are not abstract
    *
    * @return

File: engine/src/main/java/org/camunda/bpm/engine/history/HistoricVariableInstance.java
Patch:
@@ -16,7 +16,7 @@
 
 /**
  * A single process variable containing the last value when its process instance has finished.
- * It is only available when HISTORY_LEVEL is set >= VARIABLE
+ * It is only available when HISTORY_LEVEL is set >= AUDIT
  *
  * @author Christian Lipphardt (camunda)
  * @author ruecker

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/VariableQueryParameterDto.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.camunda.bpm.engine.rest.dto;
 
-import org.camunda.bpm.engine.impl.QueryOperator;
 import org.camunda.bpm.engine.impl.TaskQueryVariableValue;
 
 public class VariableQueryParameterDto extends ConditionQueryParameterDto {
@@ -23,7 +22,7 @@ public VariableQueryParameterDto() {
 
   public VariableQueryParameterDto(TaskQueryVariableValue variableValue) {
     this.name = variableValue.getName();
-    this.operator = OPERATOR_NAME_MAP.get(QueryOperator.valueOf(variableValue.getOperator()));
+    this.operator = OPERATOR_NAME_MAP.get(variableValue.getOperator());
     this.value = variableValue.getValue();
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/filter/FilterTaskQueryTest.java
Patch:
@@ -239,7 +239,7 @@ public void testTaskQuery() {
       TaskQueryVariableValue variable = variables.get(i);
       assertEquals(variableNames[i], variable.getName());
       assertEquals(variableValues[i], variable.getValue());
-      assertEquals(variableOperators[i].toString(), variable.getOperator());
+      assertEquals(variableOperators[i], variable.getOperator());
       assertEquals(isTaskVariable[i], variable.isLocal());
       assertEquals(isProcessVariable[i], variable.isProcessInstanceVariable());
     }
@@ -631,7 +631,7 @@ public void testExtendingVariableQuery() {
     // assert variables (ordering: extending variables are inserted first)
     assertEquals("hello", variables.get(0).getName());
     assertEquals("world", variables.get(0).getValue());
-    assertEquals(QueryOperator.EQUALS.toString(), variables.get(0).getOperator());
+    assertEquals(QueryOperator.EQUALS, variables.get(0).getOperator());
     assertFalse(variables.get(0).isProcessInstanceVariable());
     assertTrue(variables.get(0).isLocal());
     assertEquals("hello", variables.get(1).getName());

File: engine/src/main/java/org/camunda/bpm/engine/task/TaskQuery.java
Patch:
@@ -471,7 +471,7 @@ public interface TaskQuery extends Query<TaskQuery, Task>{
    * Only select tasks which have no follow-up date or a follow-up date before the described date by the given expression.
    * Serves the typical use case "give me all tasks without follow-up or follow-up date which is already due"
    */
-  TaskQuery followUpBeforeExpressionOrNotExistent(String followUpDateExpression);
+  TaskQuery followUpBeforeOrNotExistentExpression(String followUpDateExpression);
   
   /**
    * Only select tasks which have a follow-up date after the given date.

File: qa/integration-tests-webapps/src/test/java/org/camunda/bpm/cockpit/test/DashboardIT.java
Patch:
@@ -56,7 +56,7 @@ public void testLogin() {
 
     WebElement element = wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("a.tile")));
     element.click();
-    Boolean found = wait.until(ExpectedConditions.textToBePresentInElement(By.tagName("h1"), "invoice receipt"));
+    Boolean found = wait.until(ExpectedConditions.textToBePresentInElement(By.tagName("h1"), "Invoice Receipt"));
   }
 
   @After

File: qa/integration-tests-webapps/src/test/java/org/camunda/bpm/rest/test/RestIT.java
Patch:
@@ -73,7 +73,7 @@ public void testScenario() throws JSONException {
 
     assertEquals("invoice", definitionJson.getString("key"));
     assertEquals("http://www.omg.org/spec/BPMN/20100524/MODEL", definitionJson.getString("category"));
-    assertEquals("invoice receipt", definitionJson.getString("name"));
+    assertEquals("Invoice Receipt", definitionJson.getString("name"));
     Assert.assertTrue(definitionJson.isNull("description"));
     Assert.assertTrue(definitionJson.getString("resource").contains("invoice.bpmn"));
     Assert.assertFalse(definitionJson.getBoolean("suspended"));
@@ -93,7 +93,7 @@ public void assertJodaTimePresent() {
     assertEquals(200, response.getStatus());
 
     JSONArray definitionsJson = response.getEntity(JSONArray.class);
-    assertEquals(1, definitionsJson.length());
+    assertEquals(3, definitionsJson.length());
 
     response.close();
   }

File: qa/integration-tests-webapps/src/test/java/org/camunda/bpm/rest/test/RestIT.java
Patch:
@@ -1,6 +1,7 @@
 package org.camunda.bpm.rest.test;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 import java.util.Collections;
 import java.util.HashMap;
@@ -201,8 +202,8 @@ protected void assertMediaTypes(WebResource resource, boolean postSupported, Med
   protected void assertMediaType(ClientResponse response, MediaType expected) {
     MediaType actual = response.getType();
     assertEquals(200, response.getStatus());
-    // use startsWith cause sometimes server also returns quality parameters
-    assertEquals(expected, actual);
+    // use startsWith cause sometimes server also returns quality parameters (e.g. websphere/wink)
+    assertTrue("Expected: " + expected + " Actual: " + actual, actual.toString().startsWith(expected.toString()));
   }
 
 }

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/hal/JacksonHalJsonProvider.java
Patch:
@@ -25,8 +25,8 @@
  *
  */
 @Provider
-@Consumes({Hal.MEDIA_TYPE_HAL, "text/json"})
-@Produces({Hal.MEDIA_TYPE_HAL, "text/json"})
+@Consumes({Hal.APPLICATION_HAL_JSON, "text/json"})
+@Produces({Hal.APPLICATION_HAL_JSON, "text/json"})
 public class JacksonHalJsonProvider extends JacksonJsonProvider implements
     MessageBodyReader<Object>,
     MessageBodyWriter<Object> {

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/mapper/JacksonConfigurator.java
Patch:
@@ -25,7 +25,7 @@
 import org.codehaus.jackson.map.SerializationConfig;
 
 @Provider
-@Produces({MediaType.APPLICATION_JSON, Hal.MEDIA_TYPE_HAL})
+@Produces({MediaType.APPLICATION_JSON, Hal.APPLICATION_HAL_JSON})
 public class JacksonConfigurator implements ContextResolver<ObjectMapper> {
 
   public static ObjectMapper configureObjectMapper(ObjectMapper mapper) {

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractRestServiceTest.java
Patch:
@@ -47,7 +47,7 @@ public abstract class AbstractRestServiceTest {
 
   protected static final Header ACCEPT_WILDCARD_HEADER = new Header("Accept", MediaType.WILDCARD);
   protected static final Header ACCEPT_JSON_HEADER = new Header("Accept", MediaType.APPLICATION_JSON);
-  protected static final Header ACCEPT_HAL_HEADER = new Header("Accept", Hal.MEDIA_TYPE_HAL);
+  protected static final Header ACCEPT_HAL_HEADER = new Header("Accept", Hal.APPLICATION_HAL_JSON);
 
   protected static final String POST_JSON_CONTENT_TYPE = ContentType.create(MediaType.APPLICATION_JSON, "UTF-8").toString();
   protected static final String XHTML_XML_CONTENT_TYPE = ContentType.create(MediaType.APPLICATION_XHTML_XML).toString();

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractTaskRestServiceInteractionTest.java
Patch:
@@ -319,7 +319,7 @@ public void testGetSingleTaskHal() {
     when(processEngine.getRepositoryService().createCaseDefinitionQuery()).thenReturn(sampleCaseDefinitionQuery);
 
     Response response = given()
-      .header("accept", Hal.MEDIA_TYPE_HAL)
+      .header("accept", Hal.APPLICATION_HAL_JSON)
       .pathParam("id", EXAMPLE_TASK_ID)
       .then().expect().statusCode(Status.OK.getStatusCode())
       .body("id", equalTo(EXAMPLE_TASK_ID))

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractTaskRestServiceQueryTest.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response.Status;
 
@@ -214,9 +213,9 @@ public void testSimpleHalTaskQuery() {
     RuntimeContainerDelegate.INSTANCE.set(delegate);
 
     Response response = given().queryParam("name", queryName)
-      .header("accept", Hal.MEDIA_TYPE_HAL)
+      .header("accept", Hal.APPLICATION_HAL_JSON)
       .then().expect().statusCode(Status.OK.getStatusCode())
-      .contentType(Hal.MEDIA_TYPE_HAL)
+      .contentType(Hal.APPLICATION_HAL_JSON)
       .when().get(TASK_QUERY_URL);
 
     InOrder inOrder = inOrder(mockQuery);

File: examples/invoice/src/main/java/org/camunda/bpm/example/invoice/InvoiceProcessApplication.java
Patch:
@@ -41,8 +41,8 @@ private void startProcessInstance(ProcessEngine processEngine) {
     // start an initial demo process.
 
     Map<String, Object> variables = new HashMap<String, Object>();
-    variables.put("creditor", "Great Pizzas for Everyone Inc.");
-    variables.put("amount", "30$");
+    variables.put("creditor", "Great Pizza for Everyone Inc.");
+    variables.put("amount", "30€");
     variables.put("invoiceNumber", "GPFE-23232323");
 
     processEngine.getRuntimeService().startProcessInstanceByKey("invoice", variables);

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/InclusiveGatewayActivityBehavior.java
Patch:
@@ -71,6 +71,8 @@ public void execute(ActivityExecution execution) throws Exception {
         if (defaultSequenceFlow != null) {
           PvmTransition defaultTransition = execution.getActivity().findOutgoingTransition(defaultSequenceFlow);
           if (defaultTransition != null) {
+            // since this execution is the only foregoing, it has to be reactivated
+            execution.setActive(true);
             execution.take(defaultTransition);
           } else {
             throw new ProcessEngineException("Default sequence flow '" + defaultSequenceFlow + "' could not be not found");

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetStartFormVariablesCmd.java
Patch:
@@ -40,7 +40,7 @@ public VariableMap execute(CommandContext commandContext) {
 
     for (FormField formField : startFormData.getFormFields()) {
       if(formVariableNames == null || formVariableNames.contains(formField.getId())) {
-        result.put(formField.getId(), createVariable(formField));
+        result.put(formField.getId(), createVariable(formField, null));
       }
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetTaskFormVariablesCmd.java
Patch:
@@ -48,7 +48,7 @@ public VariableMap execute(CommandContext commandContext) {
     TaskFormData taskFormData = task.getTaskDefinition().getTaskFormHandler().createTaskForm(task);
     for (FormField formField : taskFormData.getFormFields()) {
       if(formVariableNames == null || formVariableNames.contains(formField.getId())) {
-        result.put(formField.getId(), createVariable(formField));
+        result.put(formField.getId(), createVariable(formField, task));
       }
     }
 

File: spin/dataformat-json-jackson/src/main/java/org/camunda/spin/impl/json/jackson/format/JacksonJsonDataFormat.java
Patch:
@@ -151,8 +151,8 @@ public String getCanonicalTypeName(Object object) {
    * Constructs a {@link JavaType} object based on the parameter, which
    * has to follow Jackson's canonical type string format.
    *
-   * @param canonicalString
-   * @return
+   * @param canonicalString canonical string representation of the type
+   * @return the constructed java type
    * @throws SpinJsonDataFormatException if no type can be constructed from the given parameter
    */
   public JavaType constructJavaTypeFromCanonicalString(String canonicalString) {

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/error/ThrowErrorDelegate.java
Patch:
@@ -13,10 +13,13 @@
 
 package org.camunda.bpm.integrationtest.functional.error;
 
+import javax.inject.Named;
+
 import org.camunda.bpm.engine.delegate.BpmnError;
 import org.camunda.bpm.engine.impl.bpmn.behavior.AbstractBpmnActivityBehavior;
 import org.camunda.bpm.engine.impl.pvm.delegate.ActivityExecution;
 
+@Named
 public class ThrowErrorDelegate extends AbstractBpmnActivityBehavior {
 
   @Override

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/CaseDefinitionRestService.java
Patch:
@@ -33,7 +33,6 @@
  * @author Roman Smirnov
  *
  */
-@Path(CaseDefinitionRestService.PATH)
 @Produces(MediaType.APPLICATION_JSON)
 public interface CaseDefinitionRestService {
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/CaseExecutionRestService.java
Patch:
@@ -36,7 +36,6 @@
  * @author Roman Smirnov
  *
  */
-@Path(CaseExecutionRestService.PATH)
 @Produces(MediaType.APPLICATION_JSON)
 public interface CaseExecutionRestService {
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/CaseInstanceRestService.java
Patch:
@@ -35,7 +35,6 @@
  * @author Roman Smirnov
  *
  */
-@Path(CaseInstanceRestService.PATH)
 @Produces(MediaType.APPLICATION_JSON)
 public interface CaseInstanceRestService {
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/DeploymentRestService.java
Patch:
@@ -23,7 +23,6 @@
 import javax.ws.rs.core.UriInfo;
 import java.util.List;
 
-@Path(DeploymentRestService.PATH)
 @Produces(MediaType.APPLICATION_JSON)
 public interface DeploymentRestService {
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/FilterRestService.java
Patch:
@@ -32,7 +32,6 @@
 import org.camunda.bpm.engine.rest.dto.runtime.FilterDto;
 import org.camunda.bpm.engine.rest.sub.runtime.FilterResource;
 
-@Path(FilterRestService.PATH)
 @Produces(MediaType.APPLICATION_JSON)
 public interface FilterRestService {
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/IncidentRestService.java
Patch:
@@ -30,7 +30,6 @@
  * @author Roman Smirnov
  *
  */
-@Path(IncidentRestService.PATH)
 @Produces(MediaType.APPLICATION_JSON)
 public interface IncidentRestService {
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/JobDefinitionRestService.java
Patch:
@@ -36,7 +36,6 @@
 /**
  * @author roman.smirnov
  */
-@Path(JobDefinitionRestService.PATH)
 @Produces(MediaType.APPLICATION_JSON)
 public interface JobDefinitionRestService {
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/JobRestService.java
Patch:
@@ -32,7 +32,6 @@
 import org.camunda.bpm.engine.rest.dto.runtime.JobSuspensionStateDto;
 import org.camunda.bpm.engine.rest.sub.runtime.JobResource;
 
-@Path(JobRestService.PATH)
 @Produces(MediaType.APPLICATION_JSON)
 public interface JobRestService {
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/ProcessDefinitionRestService.java
Patch:
@@ -31,7 +31,6 @@
 import org.camunda.bpm.engine.rest.dto.repository.ProcessDefinitionSuspensionStateDto;
 import org.camunda.bpm.engine.rest.sub.repository.ProcessDefinitionResource;
 
-@Path(ProcessDefinitionRestService.PATH)
 @Produces(MediaType.APPLICATION_JSON)
 public interface ProcessDefinitionRestService {
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/ProcessInstanceRestService.java
Patch:
@@ -33,7 +33,6 @@
 import org.camunda.bpm.engine.rest.sub.runtime.ProcessInstanceResource;
 import org.camunda.bpm.engine.runtime.ProcessInstanceQuery;
 
-@Path(ProcessInstanceRestService.PATH)
 @Produces(MediaType.APPLICATION_JSON)
 public interface ProcessInstanceRestService {
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/TaskRestService.java
Patch:
@@ -33,7 +33,6 @@
 import org.camunda.bpm.engine.rest.hal.task.HalTaskList;
 import org.camunda.bpm.engine.rest.sub.task.TaskResource;
 
-@Path(TaskRestService.PATH)
 @Produces(MediaType.APPLICATION_JSON)
 public interface TaskRestService {
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/UserRestService.java
Patch:
@@ -36,7 +36,6 @@
  * @author Daniel Meyer
  *
  */
-@Path(UserRestService.PATH)
 @Produces(MediaType.APPLICATION_JSON)
 public interface UserRestService {
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/VariableInstanceRestService.java
Patch:
@@ -36,7 +36,6 @@
 /**
  * @author roman.smirnov
  */
-@Path(VariableInstanceRestService.PATH)
 @Produces(MediaType.APPLICATION_JSON)
 public interface VariableInstanceRestService {
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/ConditionQueryParameterDto.java
Patch:
@@ -16,8 +16,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import javax.ws.rs.core.Response.Status;
-
 import org.camunda.bpm.engine.impl.QueryOperator;
 import org.codehaus.jackson.map.ObjectMapper;
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/runtime/FilterDto.java
Patch:
@@ -14,6 +14,7 @@
 package org.camunda.bpm.engine.rest.dto.runtime;
 
 import java.util.Map;
+
 import javax.ws.rs.core.Response.Status;
 
 import org.camunda.bpm.engine.EntityTypes;
@@ -23,7 +24,6 @@
 import org.camunda.bpm.engine.rest.dto.AbstractQueryDto;
 import org.camunda.bpm.engine.rest.dto.task.TaskQueryDto;
 import org.camunda.bpm.engine.rest.exception.InvalidRequestException;
-import org.camunda.bpm.engine.rest.mapper.JacksonConfigurator;
 import org.codehaus.jackson.JsonNode;
 import org.codehaus.jackson.map.ObjectMapper;
 import org.codehaus.jackson.map.annotate.JsonSerialize;

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/hal/task/HalTaskList.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.camunda.bpm.engine.rest.hal.task;
 
-import static javax.ws.rs.core.UriBuilder.fromResource;
+import static javax.ws.rs.core.UriBuilder.fromPath;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -50,7 +50,7 @@ public static HalTaskList fromTaskList(List<Task> tasks, long count) {
     taskList.addEmbedded("task", embeddedTasks);
 
     // links
-    taskList.addLink("self", fromResource(TaskRestService.class).build());
+    taskList.addLink("self", fromPath(TaskRestService.PATH).build());
 
     taskList.count = count;
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/history/HistoryRestService.java
Patch:
@@ -16,7 +16,6 @@
 import javax.ws.rs.Produces;
 import javax.ws.rs.core.MediaType;
 
-@Path(HistoryRestService.PATH)
 @Produces(MediaType.APPLICATION_JSON)
 public interface HistoryRestService {
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/authorization/impl/AuthorizationResourceImpl.java
Patch:
@@ -76,7 +76,7 @@ public ResourceOptionsDto availableOperations(UriInfo context) {
 
     URI uri = context.getBaseUriBuilder()
         .path(relativeRootResourcePath)
-        .path(AuthorizationRestService.class)
+        .path(AuthorizationRestService.PATH)
         .path(resourceId)
         .build();
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/history/impl/HistoricDetailResourceImpl.java
Patch:
@@ -20,8 +20,6 @@
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.history.HistoricDetail;
 import org.camunda.bpm.engine.history.HistoricDetailQuery;
-import org.camunda.bpm.engine.history.HistoricVariableInstance;
-import org.camunda.bpm.engine.history.HistoricVariableInstanceQuery;
 import org.camunda.bpm.engine.history.HistoricVariableUpdate;
 import org.camunda.bpm.engine.rest.dto.history.HistoricDetailDto;
 import org.camunda.bpm.engine.rest.exception.InvalidRequestException;

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/identity/impl/GroupMembersResourceImpl.java
Patch:
@@ -58,7 +58,7 @@ public ResourceOptionsDto availableOperations(UriInfo context) {
 
     URI uri = context.getBaseUriBuilder()
         .path(relativeRootResourcePath)
-        .path(GroupRestService.class)
+        .path(GroupRestService.PATH)
         .path(resourceId)
         .path(PATH)
         .build();

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/identity/impl/GroupResourceImpl.java
Patch:
@@ -64,7 +64,7 @@ public ResourceOptionsDto availableOperations(UriInfo context) {
     // add links if operations are authorized
     URI uri = context.getBaseUriBuilder()
         .path(rootResourcePath)
-        .path(GroupRestService.class)
+        .path(GroupRestService.PATH)
         .path(resourceId)
         .build();
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/identity/impl/UserResourceImpl.java
Patch:
@@ -65,7 +65,7 @@ public ResourceOptionsDto availableOperations(UriInfo context) {
     // add links if operations are authorized
     UriBuilder baseUriBuilder = context.getBaseUriBuilder()
         .path(rootResourcePath)
-        .path(UserRestService.class)
+        .path(UserRestService.PATH)
         .path(resourceId);
     URI baseUri = baseUriBuilder.build();
     URI profileUri = baseUriBuilder.path("/profile").build();

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/impl/CaseDefinitionResourceImpl.java
Patch:
@@ -151,7 +151,7 @@ public CaseInstanceDto createCaseInstance(UriInfo context, CreateCaseInstanceDto
 
     URI uri = context.getBaseUriBuilder()
       .path(rootResourcePath)
-      .path(CaseInstanceRestService.class)
+      .path(CaseInstanceRestService.PATH)
       .path(instance.getId())
       .build();
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/impl/ProcessDefinitionResourceImpl.java
Patch:
@@ -110,7 +110,7 @@ public ProcessInstanceDto startProcessInstance(UriInfo context, StartProcessInst
 
     URI uri = context.getBaseUriBuilder()
       .path(rootResourcePath)
-      .path(ProcessInstanceRestService.class)
+      .path(ProcessInstanceRestService.PATH)
       .path(instance.getId())
       .build();
 
@@ -147,7 +147,7 @@ public ProcessInstanceDto submitForm(UriInfo context, StartProcessInstanceDto pa
 
     URI uri = context.getBaseUriBuilder()
       .path(rootResourcePath)
-      .path(ProcessInstanceRestService.class)
+      .path(ProcessInstanceRestService.PATH)
       .path(instance.getId())
       .build();
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/runtime/impl/FilterResourceImpl.java
Patch:
@@ -250,7 +250,7 @@ public ResourceOptionsDto availableOperations(UriInfo context) {
 
     UriBuilder baseUriBuilder = context.getBaseUriBuilder()
       .path(relativeRootResourcePath)
-      .path(FilterRestService.class)
+      .path(FilterRestService.PATH)
       .path(resourceId);
 
     URI baseUri = baseUriBuilder.build();

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/task/impl/TaskAttachmentResourceImpl.java
Patch:
@@ -20,11 +20,10 @@
 import java.util.List;
 
 import javax.ws.rs.HttpMethod;
-import javax.ws.rs.core.UriInfo;
 import javax.ws.rs.core.Response.Status;
+import javax.ws.rs.core.UriInfo;
 
 import org.camunda.bpm.engine.ProcessEngine;
-import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.history.HistoricTaskInstance;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
@@ -146,7 +145,7 @@ public AttachmentDto addAttachment(UriInfo uriInfo, MultipartFormData payload) {
 
     URI uri = uriInfo.getBaseUriBuilder()
         .path(rootResourcePath)
-        .path(TaskRestService.class)
+        .path(TaskRestService.PATH)
         .path(taskId + "/attachment/" + attachment.getId())
         .build();
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/task/impl/TaskCommentResourceImpl.java
Patch:
@@ -85,7 +85,7 @@ public CommentDto createComment(UriInfo uriInfo, CommentDto commentDto) {
 
     URI uri = uriInfo.getBaseUriBuilder()
       .path(rootResourcePath)
-      .path(TaskRestService.class)
+      .path(TaskRestService.PATH)
       .path(taskId + "/comment/" + comment.getId())
       .build();
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/runtime/impl/FilterResourceImpl.java
Patch:
@@ -483,7 +483,7 @@ protected List<VariableInstance> queryVariablesInstancesByVariableScopeIds(Colle
     return getProcessEngine().getRuntimeService()
       .createVariableInstanceQuery()
       .disableBinaryFetching()
-      .disableObjectValueDeserialization()
+      .disableCustomObjectDeserialization()
       .variableNameIn(variableNames.toArray(new String[variableNames.size()]))
       .variableScopeIdIn(variableScopeIds.toArray(new String[variableScopeIds.size()]))
       .list();

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractFilterRestServiceInteractionTest.java
Patch:
@@ -185,7 +185,7 @@ public void setUpRuntimeData() {
     when(variableInstanceQueryMock.variableNameIn((String) anyVararg()))
       .thenReturn(variableInstanceQueryMock);
     when(variableInstanceQueryMock.disableBinaryFetching()).thenReturn(variableInstanceQueryMock);
-    when(variableInstanceQueryMock.disableObjectValueDeserialization()).thenReturn(variableInstanceQueryMock);
+    when(variableInstanceQueryMock.disableCustomObjectDeserialization()).thenReturn(variableInstanceQueryMock);
   }
 
   @Test
@@ -1081,7 +1081,7 @@ public void testHalTaskQueryWithAdditionalVariables() {
     verify(variableInstanceQueryMock).variableNameIn("foo", "bar");
     verify(variableInstanceQueryMock, times(1)).list();
     verify(variableInstanceQueryMock, times(1)).disableBinaryFetching();
-    verify(variableInstanceQueryMock, times(1)).disableObjectValueDeserialization();
+    verify(variableInstanceQueryMock, times(1)).disableCustomObjectDeserialization();
 
     String content = response.asString();
     List<Map<String, Object>> variables = from(content).getJsonObject("_embedded.variable");

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/VariableValueDto.java
Patch:
@@ -166,7 +166,7 @@ public static String fromRestApiTypeName(String name) {
   public static Map<String, VariableValueDto> fromVariableMap(VariableMap variables) {
     Map<String, VariableValueDto> result = new HashMap<String, VariableValueDto>();
     for(String name: variables.keySet()) {
-      result.put(name, fromTypedValue(variables.getTypedValue(name)));
+      result.put(name, fromTypedValue(variables.getValueTyped(name)));
     }
     return result;
   }

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/impl/AbstractVariablesResource.java
Patch:
@@ -57,7 +57,7 @@ public Map<String, VariableValueDto> getVariables(boolean deserializeValues) {
 
     Map<String, VariableValueDto> values = new HashMap<String, VariableValueDto>();
     for (String variableName : variables.keySet()) {
-      VariableValueDto valueDto = VariableValueDto.fromTypedValue(variables.getTypedValue(variableName));
+      VariableValueDto valueDto = VariableValueDto.fromTypedValue(variables.getValueTyped(variableName));
       values.put(variableName, valueDto);
     }
 

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/EqualsVariableMap.java
Patch:
@@ -47,7 +47,7 @@ protected boolean matchesMatchers(Object argument) {
 
     for (String key : argumentMap.keySet()) {
       Matcher<?> matcher = matchers.get(key);
-      if (!matcher.matches(argumentMap.getTypedValue(key))) {
+      if (!matcher.matches(argumentMap.getValueTyped(key))) {
         return false;
       }
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/variable/scope/AbstractVariableScope.java
Patch:
@@ -211,7 +211,7 @@ public void setVariables(Map<String, ? extends Object> variables) {
       for (String variableName : variables.keySet()) {
         Object value = null;
         if (variables instanceof VariableMap) {
-          value = ((VariableMap) variables).getTypedValue(variableName);
+          value = ((VariableMap) variables).getValueTyped(variableName);
         }
         else {
           value = variables.get(variableName);
@@ -226,7 +226,7 @@ public void setVariablesLocal(Map<String, ? extends Object> variables) {
       for (String variableName : variables.keySet()) {
         Object value = null;
         if (variables instanceof VariableMap) {
-          value = ((VariableMap) variables).getTypedValue(variableName);
+          value = ((VariableMap) variables).getValueTyped(variableName);
         }
         else {
           value = variables.get(variableName);

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/variable/value/ObjectValueImpl.java
Patch:
@@ -123,6 +123,4 @@ public String toString() {
         + ", serializedValue="+ (serializedValue != null ? (serializedValue.length() + " chars") : null)
         + "]";
   }
-
-
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/handler/FormHandler.java
Patch:
@@ -13,13 +13,12 @@
 
 package org.camunda.bpm.engine.impl.form.handler;
 
-import java.util.Map;
-
 import org.camunda.bpm.engine.impl.bpmn.parser.BpmnParse;
 import org.camunda.bpm.engine.impl.persistence.entity.DeploymentEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.ProcessDefinitionEntity;
 import org.camunda.bpm.engine.impl.util.xml.Element;
+import org.camunda.bpm.engine.variable.VariableMap;
 
 
 /**
@@ -31,5 +30,5 @@ public interface FormHandler {
 
   void parseConfiguration(Element activityElement, DeploymentEntity deployment, ProcessDefinitionEntity processDefinition, BpmnParse bpmnParse);
 
-  void submitFormProperties(Map<String, Object> properties, ExecutionEntity execution);
+  void submitFormVariables(VariableMap properties, ExecutionEntity execution);
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -487,7 +487,7 @@ public HistoryEvent createHistoricVariableUpdateEvt(VariableInstanceEntity varia
 
   // form Properties ///////////////////////////
 
-  public HistoryEvent createFormPropertyUpdateEvt(ExecutionEntity execution, String propertyId, Object propertyValue, String taskId) {
+  public HistoryEvent createFormPropertyUpdateEvt(ExecutionEntity execution, String propertyId, String propertyValue, String taskId) {
 
     final IdGenerator idGenerator = Context.getProcessEngineConfiguration().getIdGenerator();
 
@@ -501,7 +501,7 @@ public HistoryEvent createFormPropertyUpdateEvt(ExecutionEntity execution, Strin
     historicFormPropertyEntity.setProcessDefinitionId(execution.getProcessDefinitionId());
     historicFormPropertyEntity.setProcessInstanceId(execution.getProcessInstanceId());
     historicFormPropertyEntity.setPropertyId(propertyId);
-    historicFormPropertyEntity.setPropertyValue(propertyValue.toString());
+    historicFormPropertyEntity.setPropertyValue(propertyValue);
     historicFormPropertyEntity.setTaskId(taskId);
 
     return historicFormPropertyEntity;

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/HistoryEventProducer.java
Patch:
@@ -160,7 +160,7 @@ public interface HistoryEventProducer {
    * @param taskId
    * @return the history event
    */
-  public HistoryEvent createFormPropertyUpdateEvt(ExecutionEntity execution, String propertyId, Object propertyValue, String taskId);
+  public HistoryEvent createFormPropertyUpdateEvt(ExecutionEntity execution, String propertyId, String propertyValue, String taskId);
 
   // Incidents //////////////////////////////////////////
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -66,6 +66,7 @@
 import org.camunda.bpm.engine.runtime.Execution;
 import org.camunda.bpm.engine.runtime.Job;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
+import org.camunda.bpm.engine.variable.VariableMap;
 import org.camunda.bpm.model.bpmn.BpmnModelInstance;
 import org.camunda.bpm.model.bpmn.instance.FlowElement;
 import org.camunda.bpm.model.xml.instance.ModelElementInstance;
@@ -377,7 +378,7 @@ protected void initializeAssociations(ExecutionEntity execution) {
     execution.cachedEntityState = 0;
   }
 
-   public void startWithFormProperties(Map<String, Object> properties) {
+   public void startWithFormProperties(VariableMap properties) {
      if(isProcessInstanceExecution()) {
        ActivityImpl initial = processDefinition.getInitial();
        if(processInstanceStartContext != null) {

File: engine/src/main/java/org/camunda/bpm/engine/variable/VariableMap.java
Patch:
@@ -34,6 +34,6 @@ public interface VariableMap extends Map<String, Object> {
 
   <T> T getValue(String name, Class<T> type);
 
-  <T extends TypedValue> T getTypedValue(String name);
+  <T extends TypedValue> T getValueTyped(String name);
 
 }

File: webapps/webapp/src/main/runtime/develop/java/org/camunda/bpm/pa/service/CreateInvoiceDataListener.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.ExecutionListener;
+import org.camunda.bpm.engine.variable.Variables;
 
 /**
  * @author Daniel Meyer
@@ -39,7 +40,7 @@ public void notify(DelegateExecution execution) throws Exception {
     potentialApprovers.put("mary", "Mary Anne");
     potentialApprovers.put("peter", "Peter Meter");
 
-    execution.setVariable("potentialApprovers", potentialApprovers);
+    execution.setVariable("potentialApprovers", Variables.objectValue(potentialApprovers).serializationDataFormat("application/json"));
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/event/HistoryEvent.java
Patch:
@@ -65,7 +65,7 @@ public class HistoryEvent implements Serializable, DbEntity {
   @Deprecated
   public static final String VARIABLE_EVENT_TYPE_UPDATE = HistoryEventTypes.VARIABLE_INSTANCE_UPDATE.getEventName();
   @Deprecated
-  public static final String VARIABLE_EVENT_TYPE_DELETE = HistoryEventTypes.VARIABLE_INSTANCE_DELTE.getEventName();
+  public static final String VARIABLE_EVENT_TYPE_DELETE = HistoryEventTypes.VARIABLE_INSTANCE_DELETE.getEventName();
 
   @Deprecated
   public static final String FORM_PROPERTY_UPDATE = HistoryEventTypes.FORM_PROPERTY_UPDATE.getEventName();

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/event/HistoryEventTypes.java
Patch:
@@ -46,7 +46,7 @@ public enum HistoryEventTypes implements HistoryEventType {
   /** fired when a variable instance is updated. */
   VARIABLE_INSTANCE_UPDATE("variable-instance", "update"),
   /** fired when a variable instance is deleted. */
-  VARIABLE_INSTANCE_DELTE("variable-instance", "delete"),
+  VARIABLE_INSTANCE_DELETE("variable-instance", "delete"),
 
   /** fired when a form property is updated. */
   FORM_PROPERTY_UPDATE("form-property", "form-property-update"),

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/handler/DbHistoryEventHandler.java
Patch:
@@ -117,7 +117,7 @@ protected void insertHistoricVariableUpdateEntity(HistoricVariableUpdateEventEnt
         dbEntityManager.insert(persistentObject);
       }
 
-    } else if(HistoryEventTypes.VARIABLE_INSTANCE_DELTE.getEventName().equals(historyEvent.getEventType())) {
+    } else if(HistoryEventTypes.VARIABLE_INSTANCE_DELETE.getEventName().equals(historyEvent.getEventType())) {
       HistoricVariableInstanceEntity historicVariableInstanceEntity = dbEntityManager.selectById(HistoricVariableInstanceEntity.class, historyEvent.getVariableInstanceId());
       if(historicVariableInstanceEntity != null) {
         historicVariableInstanceEntity.delete();

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -476,7 +476,7 @@ public HistoryEvent createHistoricVariableCreateEvt(VariableInstanceEntity varia
   }
 
   public HistoryEvent createHistoricVariableDeleteEvt(VariableInstanceEntity variableInstance, VariableScope sourceVariableScope) {
-    return createHistoricVariableEvent(variableInstance, sourceVariableScope, HistoryEventTypes.VARIABLE_INSTANCE_DELTE);
+    return createHistoricVariableEvent(variableInstance, sourceVariableScope, HistoryEventTypes.VARIABLE_INSTANCE_DELETE);
   }
 
   public HistoryEvent createHistoricVariableUpdateEvt(VariableInstanceEntity variableInstance, VariableScope sourceVariableScope) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/AbstractPersistentVariableStore.java
Patch:
@@ -153,7 +153,7 @@ public void removeVariablesWithoutFiringEvents() {
   public void fireHistoricVariableInstanceDelete(VariableInstanceEntity variableInstance, AbstractVariableScope sourceActivityExecution) {
 
     HistoryLevel historyLevel = Context.getProcessEngineConfiguration().getHistoryLevel();
-    if (historyLevel.isHistoryEventProduced(HistoryEventTypes.VARIABLE_INSTANCE_DELTE, variableInstance)) {
+    if (historyLevel.isHistoryEventProduced(HistoryEventTypes.VARIABLE_INSTANCE_DELETE, variableInstance)) {
 
       final ProcessEngineConfigurationImpl processEngineConfiguration = Context.getProcessEngineConfiguration();
       final HistoryEventHandler eventHandler = processEngineConfiguration.getHistoryEventHandler();

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/runtime/VariableInstanceResource.java
Patch:
@@ -14,6 +14,7 @@
 
 import java.io.InputStream;
 
+import javax.ws.rs.DefaultValue;
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
 import javax.ws.rs.Produces;
@@ -30,7 +31,8 @@ public interface VariableInstanceResource {
 
   @GET
   @Produces(MediaType.APPLICATION_JSON)
-  public VariableInstanceDto getVariable(@QueryParam("deserializeObjectValue") boolean deserializeObjectValue);
+  public VariableInstanceDto getVariable(
+      @QueryParam("deserializeObjectValue") @DefaultValue("true") boolean deserializeObjectValue);
 
 
   @GET

File: webapps/core/src/main/java/org/camunda/bpm/cockpit/impl/db/QuerySessionFactory.java
Patch:
@@ -51,7 +51,7 @@ public void initFromProcessEngineConfiguration(ProcessEngineConfigurationImpl pr
     setHistory(processEngineConfiguration.getHistory());
 
     initDataSource();
-    initVariableTypes();
+    initSerialization();
     initCommandContextFactory();
     initTransactionFactory();
     initTransactionContextFactory();

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/InclusiveGatewayActivityBehavior.java
Patch:
@@ -106,7 +106,7 @@ public boolean activeConcurrentExecutionsExist(ActivityExecution execution) {
     PvmActivity activity = execution.getActivity();
     if (execution.isConcurrent()) {
       for (ActivityExecution concurrentExecution : getLeaveExecutions(execution.getParent())) {
-        if (concurrentExecution.isActive() && concurrentExecution.getActivity() != activity) {
+        if (concurrentExecution.isActive()) {
 
           // TODO: when is transitionBeingTaken cleared? Should we clear it?
           boolean reachable = false;

File: spin/core/src/main/java/org/camunda/spin/impl/xml/dom/DomXmlElement.java
Patch:
@@ -384,12 +384,12 @@ protected XPathFactory getXPathFactory() {
 
   public <C> C mapTo(Class<C> javaClass) {
     DataFormatMapper mapper = dataFormat.getMapper();
-    return mapper.mapInternalToJava(this, javaClass);
+    return mapper.mapInternalToJava(this.domElement, javaClass);
   }
 
   public <C> C mapTo(String javaClass) {
     DataFormatMapper mapper = dataFormat.getMapper();
-    return mapper.mapInternalToJava(this, javaClass);
+    return mapper.mapInternalToJava(this.domElement, javaClass);
   }
 
 }

File: spin/core/src/main/java/org/camunda/spin/impl/xml/dom/format/DomXmlDataFormatMapper.java
Patch:
@@ -13,7 +13,6 @@
 package org.camunda.spin.impl.xml.dom.format;
 
 import org.camunda.spin.impl.logging.SpinLogger;
-import org.camunda.spin.impl.xml.dom.DomXmlElement;
 import org.camunda.spin.impl.xml.dom.DomXmlLogger;
 import org.camunda.spin.impl.xml.dom.format.spi.JaxBContextProvider;
 import org.camunda.spin.spi.DataFormatMapper;
@@ -81,11 +80,11 @@ public <T> T mapInternalToJava(Object parameter, Class<T> javaClass) {
     ensureNotNull("Parameter", parameter);
     ensureNotNull("Type", javaClass);
 
-    DomXmlElement xmlNode = (DomXmlElement) parameter;
+    Node xmlNode = (Node) parameter;
     try {
       Unmarshaller unmarshaller = getUnmarshaller(javaClass);
 
-      return (T) unmarshaller.unmarshal(new DOMSource(xmlNode.unwrap()));
+      return (T) unmarshaller.unmarshal(new DOMSource(xmlNode));
     } catch (JAXBException e) {
       throw LOG.unableToDeserialize(parameter, javaClass.getCanonicalName(), e);
     }

File: engine-cdi/src/main/java/org/camunda/bpm/engine/cdi/CdiExpressionManager.java
Patch:
@@ -41,7 +41,7 @@
 public class CdiExpressionManager extends ExpressionManager {
 
   @Override
-  protected ELResolver createElResolver(VariableScope<?> variableScope) {
+  protected ELResolver createElResolver(VariableScope variableScope) {
     CompositeELResolver compositeElResolver = new CompositeELResolver();
     compositeElResolver.add(new VariableScopeElResolver(variableScope));
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/FilterRestService.java
Patch:
@@ -26,7 +26,6 @@
 import javax.ws.rs.core.Context;
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.UriInfo;
-import javax.ws.rs.ext.Providers;
 
 import org.camunda.bpm.engine.rest.dto.CountResultDto;
 import org.camunda.bpm.engine.rest.dto.ResourceOptionsDto;
@@ -40,7 +39,7 @@ public interface FilterRestService {
   static final String PATH = "/filter";
 
   @Path("/{id}")
-  FilterResource getFilter(@Context Providers providers, @PathParam("id") String filterId);
+  FilterResource getFilter(@PathParam("id") String filterId);
 
   @GET
   @Produces(MediaType.APPLICATION_JSON)

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/converter/DelegationStateConverter.java
Patch:
@@ -17,7 +17,7 @@
 import org.camunda.bpm.engine.rest.exception.InvalidRequestException;
 import org.camunda.bpm.engine.task.DelegationState;
 
-public class DelegationStateConverter implements StringToTypeConverter<DelegationState> {
+public class DelegationStateConverter extends JacksonAwareStringToTypeConverter<DelegationState> {
 
   @Override
   public DelegationState convertQueryParameterToType(String value) {

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/converter/StringArrayConverter.java
Patch:
@@ -1,9 +1,9 @@
 /* Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -13,7 +13,7 @@
 package org.camunda.bpm.engine.rest.dto.converter;
 
 
-public class StringArrayConverter implements StringToTypeConverter<String[]> {
+public class StringArrayConverter extends JacksonAwareStringToTypeConverter<String[]> {
 
   @Override
   public String[] convertQueryParameterToType(String value) {

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/converter/StringConverter.java
Patch:
@@ -1,9 +1,9 @@
 /* Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -12,7 +12,7 @@
  */
 package org.camunda.bpm.engine.rest.dto.converter;
 
-public class StringConverter implements StringToTypeConverter<String> {
+public class StringConverter extends JacksonAwareStringToTypeConverter<String> {
 
   @Override
   public String convertQueryParameterToType(String value) {

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/converter/StringListConverter.java
Patch:
@@ -1,9 +1,9 @@
 /* Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -15,7 +15,7 @@
 import java.util.Arrays;
 import java.util.List;
 
-public class StringListConverter implements StringToTypeConverter<List<String>> {
+public class StringListConverter extends JacksonAwareStringToTypeConverter<List<String>> {
 
   @Override
   public List<String> convertQueryParameterToType(String value) {

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/converter/StringSetConverter.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.HashSet;
 import java.util.Set;
 
-public class StringSetConverter implements StringToTypeConverter<Set<String>> {
+public class StringSetConverter extends JacksonAwareStringToTypeConverter<Set<String>> {
 
   @Override
   public Set<String> convertQueryParameterToType(String value) {

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/history/HistoricActivityInstanceQueryDto.java
Patch:
@@ -24,6 +24,7 @@
 import org.camunda.bpm.engine.rest.dto.CamundaQueryParam;
 import org.camunda.bpm.engine.rest.dto.converter.BooleanConverter;
 import org.camunda.bpm.engine.rest.dto.converter.DateConverter;
+import org.codehaus.jackson.map.ObjectMapper;
 
 public class HistoricActivityInstanceQueryDto extends AbstractQueryDto<HistoricActivityInstanceQuery> {
 
@@ -73,8 +74,8 @@ public class HistoricActivityInstanceQueryDto extends AbstractQueryDto<HistoricA
   public HistoricActivityInstanceQueryDto() {
   }
 
-  public HistoricActivityInstanceQueryDto(MultivaluedMap<String, String> queryParameters) {
-    super(queryParameters);
+  public HistoricActivityInstanceQueryDto(ObjectMapper objectMapper, MultivaluedMap<String, String> queryParameters) {
+    super(objectMapper, queryParameters);
   }
 
   @CamundaQueryParam("activityInstanceId")

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/history/HistoricDetailQueryDto.java
Patch:
@@ -22,6 +22,7 @@
 import org.camunda.bpm.engine.rest.dto.AbstractQueryDto;
 import org.camunda.bpm.engine.rest.dto.CamundaQueryParam;
 import org.camunda.bpm.engine.rest.dto.converter.BooleanConverter;
+import org.codehaus.jackson.map.ObjectMapper;
 
 /**
  * @author Roman Smirnov
@@ -59,8 +60,8 @@ public class HistoricDetailQueryDto extends AbstractQueryDto<HistoricDetailQuery
   public HistoricDetailQueryDto() {
   }
 
-  public HistoricDetailQueryDto(MultivaluedMap<String, String> queryParameters) {
-    super(queryParameters);
+  public HistoricDetailQueryDto(ObjectMapper objectMapper, MultivaluedMap<String, String> queryParameters) {
+    super(objectMapper, queryParameters);
   }
 
   @CamundaQueryParam(value = "processInstanceId")

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/history/HistoricIncidentQueryDto.java
Patch:
@@ -22,6 +22,7 @@
 import org.camunda.bpm.engine.rest.dto.AbstractQueryDto;
 import org.camunda.bpm.engine.rest.dto.CamundaQueryParam;
 import org.camunda.bpm.engine.rest.dto.converter.BooleanConverter;
+import org.codehaus.jackson.map.ObjectMapper;
 
 /**
  * @author Roman Smirnov
@@ -73,8 +74,8 @@ public class HistoricIncidentQueryDto extends AbstractQueryDto<HistoricIncidentQ
 
   public HistoricIncidentQueryDto() {}
 
-  public HistoricIncidentQueryDto(MultivaluedMap<String, String> queryParameters) {
-    super(queryParameters);
+  public HistoricIncidentQueryDto(ObjectMapper objectMapper, MultivaluedMap<String, String> queryParameters) {
+    super(objectMapper, queryParameters);
   }
 
   @CamundaQueryParam("incidentId")

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/history/HistoricVariableInstanceQueryDto.java
Patch:
@@ -24,6 +24,7 @@
 import org.camunda.bpm.engine.rest.dto.CamundaQueryParam;
 import org.camunda.bpm.engine.rest.dto.converter.StringArrayConverter;
 import org.camunda.bpm.engine.rest.exception.InvalidRequestException;
+import org.codehaus.jackson.map.ObjectMapper;
 
 public class HistoricVariableInstanceQueryDto extends AbstractQueryDto<HistoricVariableInstanceQuery> {
 
@@ -48,8 +49,8 @@ public class HistoricVariableInstanceQueryDto extends AbstractQueryDto<HistoricV
   public HistoricVariableInstanceQueryDto() {
   }
 
-  public HistoricVariableInstanceQueryDto(MultivaluedMap<String, String> queryParameters) {
-    super(queryParameters);
+  public HistoricVariableInstanceQueryDto(ObjectMapper objectMapper, MultivaluedMap<String, String> queryParameters) {
+    super(objectMapper, queryParameters);
   }
 
   @CamundaQueryParam("processInstanceId")

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/history/UserOperationLogQueryDto.java
Patch:
@@ -21,6 +21,7 @@
 import org.camunda.bpm.engine.rest.dto.AbstractQueryDto;
 import org.camunda.bpm.engine.rest.dto.CamundaQueryParam;
 import org.camunda.bpm.engine.rest.dto.converter.DateConverter;
+import org.codehaus.jackson.map.ObjectMapper;
 
 /**
  * @author Danny Gräf
@@ -45,8 +46,8 @@ public class UserOperationLogQueryDto extends AbstractQueryDto<UserOperationLogQ
   protected Date afterTimestamp;
   protected Date beforeTimestamp;
 
-  public UserOperationLogQueryDto(MultivaluedMap<String, String> queryParameters) {
-    super(queryParameters);
+  public UserOperationLogQueryDto(ObjectMapper objectMapper, MultivaluedMap<String, String> queryParameters) {
+    super(objectMapper, queryParameters);
   }
 
   @Override

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/management/JobDefinitionQueryDto.java
Patch:
@@ -23,6 +23,7 @@
 import org.camunda.bpm.engine.rest.dto.CamundaQueryParam;
 import org.camunda.bpm.engine.rest.dto.converter.BooleanConverter;
 import org.camunda.bpm.engine.rest.dto.converter.StringArrayConverter;
+import org.codehaus.jackson.map.ObjectMapper;
 
 /**
  * @author roman.smirnov
@@ -60,8 +61,8 @@ public class JobDefinitionQueryDto extends AbstractQueryDto<JobDefinitionQuery>
 
   public JobDefinitionQueryDto() {}
 
-  public JobDefinitionQueryDto(MultivaluedMap<String, String> queryParameters) {
-    super(queryParameters);
+  public JobDefinitionQueryDto(ObjectMapper objectMapper, MultivaluedMap<String, String> queryParameters) {
+    super(objectMapper, queryParameters);
   }
 
   @CamundaQueryParam("jobDefinitionId")

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/message/CorrelationMessageDto.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.util.Map;
 
-import org.camunda.bpm.engine.rest.dto.runtime.VariableValueDto;
+import org.camunda.bpm.engine.rest.dto.VariableValueDto;
 
 public class CorrelationMessageDto {
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/repository/DeploymentQueryDto.java
Patch:
@@ -21,6 +21,7 @@
 import org.camunda.bpm.engine.repository.DeploymentQuery;
 import org.camunda.bpm.engine.rest.dto.AbstractQueryDto;
 import org.camunda.bpm.engine.rest.dto.CamundaQueryParam;
+import org.codehaus.jackson.map.ObjectMapper;
 
 public class DeploymentQueryDto extends AbstractQueryDto<DeploymentQuery> {
 
@@ -43,8 +44,8 @@ public class DeploymentQueryDto extends AbstractQueryDto<DeploymentQuery> {
   public DeploymentQueryDto() {
   }
 
-  public DeploymentQueryDto(MultivaluedMap<String, String> queryParameters) {
-    super(queryParameters);
+  public DeploymentQueryDto(ObjectMapper objectMapper, MultivaluedMap<String, String> queryParameters) {
+    super(objectMapper, queryParameters);
   }
 
   @CamundaQueryParam("id")

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/repository/ProcessDefinitionQueryDto.java
Patch:
@@ -23,6 +23,7 @@
 import org.camunda.bpm.engine.rest.dto.CamundaQueryParam;
 import org.camunda.bpm.engine.rest.dto.converter.BooleanConverter;
 import org.camunda.bpm.engine.rest.dto.converter.IntegerConverter;
+import org.codehaus.jackson.map.ObjectMapper;
 
 public class ProcessDefinitionQueryDto extends AbstractQueryDto<ProcessDefinitionQuery> {
 
@@ -67,9 +68,8 @@ public ProcessDefinitionQueryDto() {
 
   }
 
-  public ProcessDefinitionQueryDto(
-      MultivaluedMap<String, String> queryParameters) {
-    super(queryParameters);
+  public ProcessDefinitionQueryDto(ObjectMapper objectMapper, MultivaluedMap<String, String> queryParameters) {
+    super(objectMapper, queryParameters);
   }
 
   @CamundaQueryParam("category")

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/runtime/ActivityInstanceDto.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.camunda.bpm.engine.rest.dto.runtime;
 
-import org.camunda.bpm.engine.impl.persistence.entity.ActivityInstanceImpl;
 import org.camunda.bpm.engine.runtime.ActivityInstance;
 
 /**

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/runtime/CreateCaseInstanceDto.java
Patch:
@@ -14,6 +14,8 @@
 
 import java.util.Map;
 
+import org.camunda.bpm.engine.rest.dto.VariableValueDto;
+
 /**
  *
  * @author Roman Smirnov

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/runtime/FilterQueryDto.java
Patch:
@@ -22,6 +22,7 @@
 import org.camunda.bpm.engine.filter.FilterQuery;
 import org.camunda.bpm.engine.rest.dto.AbstractQueryDto;
 import org.camunda.bpm.engine.rest.dto.CamundaQueryParam;
+import org.codehaus.jackson.map.ObjectMapper;
 
 /**
  * @author Sebastian Menski
@@ -52,8 +53,8 @@ public FilterQueryDto() {
 
   }
 
-  public FilterQueryDto(MultivaluedMap<String, String> queryParameters) {
-    super(queryParameters);
+  public FilterQueryDto(ObjectMapper objectMapper, MultivaluedMap<String, String> queryParameters) {
+    super(objectMapper, queryParameters);
   }
 
   @CamundaQueryParam("filterId")

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/runtime/IncidentQueryDto.java
Patch:
@@ -21,6 +21,7 @@
 import org.camunda.bpm.engine.rest.dto.AbstractQueryDto;
 import org.camunda.bpm.engine.rest.dto.CamundaQueryParam;
 import org.camunda.bpm.engine.runtime.IncidentQuery;
+import org.codehaus.jackson.map.ObjectMapper;
 
 /**
  * @author Roman Smirnov
@@ -67,8 +68,8 @@ public class IncidentQueryDto extends AbstractQueryDto<IncidentQuery>{
 
   public IncidentQueryDto() {}
 
-  public IncidentQueryDto(MultivaluedMap<String, String> queryParameters) {
-    super(queryParameters);
+  public IncidentQueryDto(ObjectMapper objectMapper, MultivaluedMap<String, String> queryParameters) {
+    super(objectMapper, queryParameters);
   }
 
   @CamundaQueryParam("incidentId")

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/runtime/StartProcessInstanceDto.java
Patch:
@@ -14,6 +14,8 @@
 
 import java.util.Map;
 
+import org.camunda.bpm.engine.rest.dto.VariableValueDto;
+
 public class StartProcessInstanceDto {
 
   private Map<String, VariableValueDto> variables;

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/runtime/TriggerVariableValueDto.java
Patch:
@@ -12,6 +12,8 @@
  */
 package org.camunda.bpm.engine.rest.dto.runtime;
 
+import org.camunda.bpm.engine.rest.dto.VariableValueDto;
+
 /**
  *
  * @author Roman Smirnov

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/task/CompleteTaskDto.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.util.Map;
 
-import org.camunda.bpm.engine.rest.dto.runtime.VariableValueDto;
+import org.camunda.bpm.engine.rest.dto.VariableValueDto;
 
 public class CompleteTaskDto {
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/hal/task/HalTaskList.java
Patch:
@@ -34,6 +34,7 @@ public static HalTaskList generate(List<Task> tasks, long count, ProcessEngine e
       .embed(HalTask.REL_ASSIGNEE, engine)
       .embed(HalTask.REL_OWNER, engine)
       .embed(HalTask.REL_PROCESS_DEFINITION, engine);
+
   }
 
   public static HalTaskList fromTaskList(List<Task> tasks, long count) {

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/identity/impl/GroupMembersResourceImpl.java
Patch:
@@ -25,15 +25,16 @@
 import org.camunda.bpm.engine.rest.dto.ResourceOptionsDto;
 import org.camunda.bpm.engine.rest.sub.identity.GroupMembersResource;
 import org.camunda.bpm.engine.rest.util.PathUtil;
+import org.codehaus.jackson.map.ObjectMapper;
 
 /**
  * @author Daniel Meyer
  *
  */
 public class GroupMembersResourceImpl extends AbstractIdentityResource implements GroupMembersResource {
 
-  public GroupMembersResourceImpl(String processEngineName, String resourceId, String rootResourcePath) {
-    super(processEngineName, Resources.GROUP_MEMBERSHIP, resourceId);
+  public GroupMembersResourceImpl(String processEngineName, String resourceId, String rootResourcePath, ObjectMapper objectMapper) {
+    super(processEngineName, Resources.GROUP_MEMBERSHIP, resourceId, objectMapper);
     this.relativeRootResourcePath = rootResourcePath;
   }
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/identity/impl/UserResourceImpl.java
Patch:
@@ -32,6 +32,7 @@
 import org.camunda.bpm.engine.rest.dto.identity.UserProfileDto;
 import org.camunda.bpm.engine.rest.exception.InvalidRequestException;
 import org.camunda.bpm.engine.rest.sub.identity.UserResource;
+import org.codehaus.jackson.map.ObjectMapper;
 
 /**
  * @author Daniel Meyer
@@ -41,8 +42,8 @@ public class UserResourceImpl extends AbstractIdentityResource implements UserRe
 
   protected String rootResourcePath;
 
-  public UserResourceImpl(String processEngineName, String userId, String rootResourcePath) {
-    super(processEngineName, USER, userId);
+  public UserResourceImpl(String processEngineName, String userId, String rootResourcePath, ObjectMapper objectMapper) {
+    super(processEngineName, USER, userId, objectMapper);
     this.rootResourcePath = rootResourcePath;
   }
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/runtime/VariableInstanceResource.java
Patch:
@@ -17,6 +17,7 @@
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
 import javax.ws.rs.Produces;
+import javax.ws.rs.QueryParam;
 import javax.ws.rs.core.MediaType;
 
 import org.camunda.bpm.engine.rest.dto.runtime.VariableInstanceDto;
@@ -29,7 +30,7 @@ public interface VariableInstanceResource {
 
   @GET
   @Produces(MediaType.APPLICATION_JSON)
-  public VariableInstanceDto getVariable();
+  public VariableInstanceDto getVariable(@QueryParam("deserializeObjectValue") boolean deserializeObjectValue);
 
 
   @GET

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractCaseDefinitionRestServiceQueryTest.java
Patch:
@@ -84,7 +84,8 @@ public void testInvalidNumericParameter() {
           .statusCode(Status.BAD_REQUEST.getStatusCode())
           .contentType(ContentType.JSON)
           .body("type", equalTo(InvalidRequestException.class.getSimpleName()))
-          .body("message", equalTo("Cannot set query parameter 'version' to value 'aString'"))
+          .body("message", equalTo("Cannot set query parameter 'version' to value 'aString': "
+          + "Cannot convert value aString to java type java.lang.Integer"))
       .when()
         .get(CASE_DEFINITION_QUERY_URL);
   }

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractTaskRestServiceQueryTest.java
Patch:
@@ -83,7 +83,8 @@ public void testInvalidDateParameter() {
       .header("accept", MediaType.APPLICATION_JSON)
       .expect().statusCode(Status.BAD_REQUEST.getStatusCode()).contentType(ContentType.JSON)
       .body("type", equalTo(InvalidRequestException.class.getSimpleName()))
-      .body("message", equalTo("Cannot set query parameter 'due' to value 'anInvalidDate'"))
+      .body("message", equalTo("Cannot set query parameter 'due' to value 'anInvalidDate': "
+          + "Cannot convert value \"anInvalidDate\" to java type java.util.Date"))
       .when().get(TASK_QUERY_URL);
   }
 

File: engine-spring/src/main/java/org/camunda/bpm/engine/spring/SpringExpressionManager.java
Patch:
@@ -52,7 +52,7 @@ public SpringExpressionManager(ApplicationContext applicationContext, Map<Object
   }
 
   @Override
-  protected ELResolver createElResolver(VariableScope<?> variableScope) {
+  protected ELResolver createElResolver(VariableScope variableScope) {
     CompositeELResolver compositeElResolver = new CompositeELResolver();
     compositeElResolver.add(new VariableScopeElResolver(variableScope));
 

File: engine-spring/src/main/java/org/camunda/bpm/engine/spring/SpringProcessEngineConfiguration.java
Patch:
@@ -21,15 +21,15 @@
 
 import javax.sql.DataSource;
 
-import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.ProcessEngine;
+import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.RepositoryService;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.impl.cfg.StandaloneProcessEngineConfiguration;
 import org.camunda.bpm.engine.impl.interceptor.CommandContextInterceptor;
 import org.camunda.bpm.engine.impl.interceptor.CommandInterceptor;
 import org.camunda.bpm.engine.impl.interceptor.LogInterceptor;
-import org.camunda.bpm.engine.impl.variable.EntityManagerSession;
+import org.camunda.bpm.engine.impl.variable.serializer.jpa.EntityManagerSession;
 import org.camunda.bpm.engine.repository.DeploymentBuilder;
 import org.springframework.core.io.ByteArrayResource;
 import org.springframework.core.io.ContextResource;

File: engine/src/main/java/org/camunda/bpm/engine/ProcessEngine.java
Patch:
@@ -62,4 +62,6 @@ public interface ProcessEngine extends ProcessEngineServices {
   String getName();
 
   void close();
+
+  ProcessEngineConfiguration getProcessEngineConfiguration();
 }

File: engine/src/main/java/org/camunda/bpm/engine/delegate/BaseDelegateExecution.java
Patch:
@@ -19,7 +19,7 @@
  * @author Sebastian Menski
  *
  */
-public interface BaseDelegateExecution extends PersistentVariableScope {
+public interface BaseDelegateExecution extends VariableScope {
 
   /** Unique id of this path of execution that can be used as a handle to provide external signals back into the engine after wait states. */
   String getId();

File: engine/src/main/java/org/camunda/bpm/engine/delegate/DelegateTask.java
Patch:
@@ -26,7 +26,7 @@
  * @author Daniel Meyer
  * @author Sebastian Menski
  */
-public interface DelegateTask extends VariableScope<PersistentVariableInstance>, BpmnModelExecutionContext, ProcessEngineServicesAware {
+public interface DelegateTask extends VariableScope, BpmnModelExecutionContext, ProcessEngineServicesAware {
 
   /** DB id of the task. */
   String getId();

File: engine/src/main/java/org/camunda/bpm/engine/delegate/Expression.java
Patch:
@@ -20,9 +20,9 @@
  */
 public interface Expression {
 
-   Object getValue(VariableScope<?> variableScope);
+   Object getValue(VariableScope variableScope);
 
-   void setValue(Object value, VariableScope<?> variableScope);
+   void setValue(Object value, VariableScope variableScope);
 
    String getExpressionText();
 

File: engine/src/main/java/org/camunda/bpm/engine/history/HistoricProcessInstanceQuery.java
Patch:
@@ -87,7 +87,7 @@ public interface HistoricProcessInstanceQuery extends Query<HistoricProcessInsta
    * greater than the passed value. The type only applies to already ended
    * process instances, otherwise use a {@link ProcessInstanceQuery} instead! of
    * variable is determined based on the value, using types configured in
-   * {@link ProcessEngineConfiguration#getVariableTypes()}. Byte-arrays and
+   * {@link ProcessEngineConfiguration#getVariableSerializers()}. Byte-arrays and
    * {@link Serializable} objects (which are not primitive type wrappers) are
    * not supported.
    * @param name of the variable, cannot be null. */

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricTaskInstanceQueryImpl.java
Patch:
@@ -24,7 +24,7 @@
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.interceptor.CommandExecutor;
-import org.camunda.bpm.engine.impl.variable.VariableTypes;
+import org.camunda.bpm.engine.impl.variable.serializer.VariableSerializers;
 
 
 /**
@@ -253,7 +253,7 @@ public HistoricTaskInstanceQuery processUnfinished() {
   }
 
   protected void ensureVariablesInitialized() {
-    VariableTypes types = Context.getProcessEngineConfiguration().getVariableTypes();
+    VariableSerializers types = Context.getProcessEngineConfiguration().getVariableSerializers();
     for(QueryVariableValue var : variables) {
       var.initialize(types);
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/TaskQueryImpl.java
Patch:
@@ -29,7 +29,7 @@
 import org.camunda.bpm.engine.impl.interceptor.CommandExecutor;
 import org.camunda.bpm.engine.impl.persistence.entity.SuspensionState;
 import org.camunda.bpm.engine.impl.persistence.entity.TaskEntity;
-import org.camunda.bpm.engine.impl.variable.VariableTypes;
+import org.camunda.bpm.engine.impl.variable.serializer.VariableSerializers;
 import org.camunda.bpm.engine.task.DelegationState;
 import org.camunda.bpm.engine.task.Task;
 import org.camunda.bpm.engine.task.TaskQuery;
@@ -684,7 +684,7 @@ protected List<String> getGroupsForCandidateUser(String candidateUser) {
   }
 
   protected void ensureVariablesInitialized() {
-    VariableTypes types = Context.getProcessEngineConfiguration().getVariableTypes();
+    VariableSerializers types = Context.getProcessEngineConfiguration().getVariableSerializers();
     for(QueryVariableValue var : variables) {
       var.initialize(types);
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/CancelEndEventActivityBehavior.java
Patch:
@@ -13,13 +13,13 @@
 
 package org.camunda.bpm.engine.impl.bpmn.behavior;
 
+import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
+
 import org.camunda.bpm.engine.impl.bpmn.helper.ScopeUtil;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 import org.camunda.bpm.engine.impl.pvm.delegate.ActivityExecution;
 import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 
-import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
-
 
 /**
  * @author Daniel Meyer

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/MailActivityBehavior.java
Patch:
@@ -13,6 +13,8 @@
 
 package org.camunda.bpm.engine.impl.bpmn.behavior;
 
+import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
+
 import org.apache.commons.mail.Email;
 import org.apache.commons.mail.EmailException;
 import org.apache.commons.mail.HtmlEmail;
@@ -24,8 +26,6 @@
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.pvm.delegate.ActivityExecution;
 
-import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
-
 /**
  * @author Joram Barrez
  * @author Frederik Heremans

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/ParallelMultiInstanceBehavior.java
Patch:
@@ -18,8 +18,7 @@
 
 import org.camunda.bpm.engine.impl.bpmn.parser.BpmnParse;
 import org.camunda.bpm.engine.impl.bpmn.parser.EventSubscriptionDeclaration;
-import org.camunda.bpm.engine.impl.core.mapping.IoMapping;
-import org.camunda.bpm.engine.impl.core.variable.CoreVariableScope;
+import org.camunda.bpm.engine.impl.core.variable.scope.AbstractVariableScope;
 import org.camunda.bpm.engine.impl.jobexecutor.TimerDeclarationImpl;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 import org.camunda.bpm.engine.impl.pvm.delegate.ActivityBehavior;
@@ -72,7 +71,7 @@ protected void createInstances(ActivityExecution execution, int nrOfInstances) t
       }
 
       if (ioMapping != null) {
-        ioMapping.executeInputParameters((CoreVariableScope<?>) concurrentExecution);
+        ioMapping.executeInputParameters((AbstractVariableScope) concurrentExecution);
       }
 
       // create timer job for the current execution

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/ScriptTaskActivityBehavior.java
Patch:
@@ -12,6 +12,8 @@
  */
 package org.camunda.bpm.engine.impl.bpmn.behavior;
 
+import javax.script.ScriptException;
+
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.delegate.BpmnError;
 import org.camunda.bpm.engine.impl.bpmn.helper.ErrorPropagation;
@@ -20,8 +22,6 @@
 import org.camunda.bpm.engine.impl.pvm.delegate.ActivityExecution;
 import org.camunda.bpm.engine.impl.scripting.ExecutableScript;
 
-import javax.script.ScriptException;
-
 
 /**
  * <p>{@link ActivityBehavior} implementation of the BPMN 2.0 script task.</p>

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/SequentialMultiInstanceBehavior.java
Patch:
@@ -18,7 +18,7 @@
 import org.camunda.bpm.engine.delegate.BpmnError;
 import org.camunda.bpm.engine.impl.bpmn.parser.BpmnParse;
 import org.camunda.bpm.engine.impl.bpmn.parser.EventSubscriptionDeclaration;
-import org.camunda.bpm.engine.impl.core.variable.CoreVariableScope;
+import org.camunda.bpm.engine.impl.core.variable.scope.AbstractVariableScope;
 import org.camunda.bpm.engine.impl.jobexecutor.TimerDeclarationImpl;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.JobEntity;
@@ -48,7 +48,7 @@ protected void createInstances(ActivityExecution execution, int nrOfInstances) t
     setLoopVariable(execution, NUMBER_OF_ACTIVE_INSTANCES, 1);
     logLoopDetails(execution, "initialized", 0, 0, 1, nrOfInstances);
 
-    executeIoMapping((CoreVariableScope<?>) execution);
+    executeIoMapping((AbstractVariableScope) execution);
 
     executeOriginalBehavior(execution, 0);
   }
@@ -84,7 +84,7 @@ public void leave(ActivityExecution execution) {
 
       callActivityEndListeners(execution);
 
-      executeIoMapping((CoreVariableScope<?>) execution);
+      executeIoMapping((AbstractVariableScope) execution);
 
       // create timer job for the current execution
       List<TimerDeclarationImpl> timerDeclarations = (List<TimerDeclarationImpl>) execution.getActivity().getProperty(BpmnParse.PROPERTYNAME_TIMER_DECLARATION);

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/SubProcessActivityBehavior.java
Patch:
@@ -13,6 +13,8 @@
 
 package org.camunda.bpm.engine.impl.bpmn.behavior;
 
+import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
+
 import org.camunda.bpm.engine.impl.bpmn.helper.ScopeUtil;
 import org.camunda.bpm.engine.impl.bpmn.parser.BpmnParse;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
@@ -21,8 +23,6 @@
 import org.camunda.bpm.engine.impl.pvm.delegate.CompositeActivityBehavior;
 import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 
-import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
-
 
 /**
  * Implementation of the BPMN 2.0 subprocess (formally known as 'embedded' subprocess):

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/behavior/TransferVariablesActivityBehavior.java
Patch:
@@ -20,6 +20,6 @@
  */
 public interface TransferVariablesActivityBehavior extends CmmnActivityBehavior {
 
-  public void transferVariables(VariableScope<?> from, VariableScope<?> to);
+  public void transferVariables(VariableScope from, VariableScope to);
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/entity/runtime/CaseExecutionEntity.java
Patch:
@@ -29,7 +29,7 @@
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.core.instance.CoreExecution;
 import org.camunda.bpm.engine.impl.core.operation.CoreAtomicOperation;
-import org.camunda.bpm.engine.impl.core.variable.CorePersistentVariableStore;
+import org.camunda.bpm.engine.impl.core.variable.scope.CoreVariableStore;
 import org.camunda.bpm.engine.impl.db.DbEntity;
 import org.camunda.bpm.engine.impl.db.HasDbReferences;
 import org.camunda.bpm.engine.impl.db.HasDbRevision;
@@ -539,7 +539,7 @@ protected CaseSentryPartEntity newSentryPart() {
 
   // variables //////////////////////////////////////////////////////////////
 
-  protected CorePersistentVariableStore getVariableStore() {
+  protected CoreVariableStore getVariableStore() {
     return variableStore;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/handler/ProcessOrCaseTaskItemHandler.java
Patch:
@@ -20,9 +20,9 @@
 import org.camunda.bpm.engine.impl.cmmn.behavior.CallableElementParameter;
 import org.camunda.bpm.engine.impl.cmmn.behavior.ProcessOrCaseTaskActivityBehavior;
 import org.camunda.bpm.engine.impl.cmmn.model.CmmnActivity;
-import org.camunda.bpm.engine.impl.core.mapping.value.ConstantValueProvider;
-import org.camunda.bpm.engine.impl.core.mapping.value.NullValueProvider;
-import org.camunda.bpm.engine.impl.core.mapping.value.ParameterValueProvider;
+import org.camunda.bpm.engine.impl.core.variable.mapping.value.ConstantValueProvider;
+import org.camunda.bpm.engine.impl.core.variable.mapping.value.NullValueProvider;
+import org.camunda.bpm.engine.impl.core.variable.mapping.value.ParameterValueProvider;
 import org.camunda.bpm.engine.impl.el.ElValueProvider;
 import org.camunda.bpm.engine.impl.el.ExpressionManager;
 import org.camunda.bpm.engine.impl.util.StringUtil;

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/instance/CoreExecution.java
Patch:
@@ -19,7 +19,7 @@
 import org.camunda.bpm.engine.delegate.DelegateListener;
 import org.camunda.bpm.engine.impl.core.model.CoreModelElement;
 import org.camunda.bpm.engine.impl.core.operation.CoreAtomicOperation;
-import org.camunda.bpm.engine.impl.core.variable.CorePersistentVariableScope;
+import org.camunda.bpm.engine.impl.core.variable.scope.AbstractVariableScope;
 
 /**
  * Defines the base API for the execution of an activity.
@@ -29,7 +29,7 @@
  * @author Sebastian Menski
  *
  */
-public abstract class CoreExecution extends CorePersistentVariableScope implements BaseDelegateExecution {
+public abstract class CoreExecution extends AbstractVariableScope implements BaseDelegateExecution {
 
   private static final long serialVersionUID = 1L;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/model/CoreActivity.java
Patch:
@@ -16,7 +16,7 @@
 
 import org.camunda.bpm.engine.delegate.BaseDelegateExecution;
 import org.camunda.bpm.engine.impl.core.delegate.CoreActivityBehavior;
-import org.camunda.bpm.engine.impl.core.mapping.IoMapping;
+import org.camunda.bpm.engine.impl.core.variable.mapping.IoMapping;
 
 /**
  * @author Daniel Meyer

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/variable/event/VariableEventDispatcher.java
Patch:
@@ -10,7 +10,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.core.variable;
+package org.camunda.bpm.engine.impl.core.variable.event;
+
 
 
 /**

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/variable/mapping/value/ConstantValueProvider.java
Patch:
@@ -10,9 +10,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.core.mapping.value;
+package org.camunda.bpm.engine.impl.core.variable.mapping.value;
 
-import org.camunda.bpm.engine.impl.core.variable.CoreVariableScope;
+import org.camunda.bpm.engine.impl.core.variable.scope.AbstractVariableScope;
 
 /**
  * A constant parameter value.
@@ -28,7 +28,7 @@ public ConstantValueProvider(Object value) {
     this.value = value;
   }
 
-  public Object getValue(CoreVariableScope<?> scope) {
+  public Object getValue(AbstractVariableScope scope) {
     return value;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/variable/mapping/value/ListValueProvider.java
Patch:
@@ -10,12 +10,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.core.mapping.value;
+package org.camunda.bpm.engine.impl.core.variable.mapping.value;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import org.camunda.bpm.engine.impl.core.variable.CoreVariableScope;
+import org.camunda.bpm.engine.impl.core.variable.scope.AbstractVariableScope;
 
 /**
  * @author Daniel Meyer
@@ -29,7 +29,7 @@ public ListValueProvider(List<ParameterValueProvider> providerList) {
     this.providerList = providerList;
   }
 
-  public Object getValue(CoreVariableScope variableScope) {
+  public Object getValue(AbstractVariableScope variableScope) {
     List<Object> valueList = new ArrayList<Object>();
     for (ParameterValueProvider provider : providerList) {
       valueList.add(provider.getValue(variableScope));

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/variable/mapping/value/MapValueProvider.java
Patch:
@@ -10,13 +10,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.core.mapping.value;
+package org.camunda.bpm.engine.impl.core.variable.mapping.value;
 
 import java.util.Map;
 import java.util.TreeMap;
 import java.util.Map.Entry;
 
-import org.camunda.bpm.engine.impl.core.variable.CoreVariableScope;
+import org.camunda.bpm.engine.impl.core.variable.scope.AbstractVariableScope;
 
 /**
  * @author Daniel Meyer
@@ -30,7 +30,7 @@ public MapValueProvider(TreeMap<String, ParameterValueProvider> providerMap) {
     this.providerMap = providerMap;
   }
 
-  public Object getValue(CoreVariableScope<?> variableScope) {
+  public Object getValue(AbstractVariableScope variableScope) {
     Map<String, Object> valueMap = new TreeMap<String, Object>();
     for (Entry<String, ParameterValueProvider> entry : providerMap.entrySet()) {
       valueMap.put(entry.getKey(), entry.getValue().getValue(variableScope));

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/variable/mapping/value/NullValueProvider.java
Patch:
@@ -10,17 +10,17 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.core.mapping.value;
+package org.camunda.bpm.engine.impl.core.variable.mapping.value;
 
-import org.camunda.bpm.engine.impl.core.variable.CoreVariableScope;
+import org.camunda.bpm.engine.impl.core.variable.scope.AbstractVariableScope;
 
 /**
  * @author Daniel Meyer
  *
  */
 public class NullValueProvider implements ParameterValueProvider {
 
-  public Object getValue(CoreVariableScope<?> variableScope) {
+  public Object getValue(AbstractVariableScope variableScope) {
     return null;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/variable/mapping/value/ParameterValueProvider.java
Patch:
@@ -10,9 +10,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.core.mapping.value;
+package org.camunda.bpm.engine.impl.core.variable.mapping.value;
 
-import org.camunda.bpm.engine.impl.core.variable.CoreVariableScope;
+import org.camunda.bpm.engine.impl.core.variable.scope.AbstractVariableScope;
 
 /**
  *
@@ -25,6 +25,6 @@ public interface ParameterValueProvider {
    * @param variableScope the scope in which the value is to be resolved.
    * @return the value
    */
-  Object getValue(CoreVariableScope<?> variableScope);
+  Object getValue(AbstractVariableScope variableScope);
 
 }

File: identity/identity-ldap/src/main/java/org/camunda/bpm/identity/impl/ldap/util/CertificateHelper.java
Patch:
@@ -30,7 +30,7 @@ public static void acceptUntrusted() {
       sslContext.init(new KeyManager[0], new TrustManager[] { new DefaultTrustManager() }, new SecureRandom());
       SSLContext.setDefault(sslContext);
     } catch (Exception ex) {
-      throw new RuntimeException("Could not change SSL TrustManager to accept arbitray certificates", ex);
+      throw new RuntimeException("Could not change SSL TrustManager to accept arbitrary certificates", ex);
     }
   }
 

File: identity/identity-ldap/src/test/java/org/camunda/bpm/identity/impl/ldap/LdapTestEnvironment.java
Patch:
@@ -182,7 +182,7 @@ public void shutdown() {
     }
   }
   
-  protected Properties loadTestProperties() throws FileNotFoundException, IOException {
+  protected Properties loadTestProperties() throws IOException {
     Properties properties = new Properties();
     File file = IoUtil.getFile("ldap.properties");
     FileInputStream propertiesStream= null;

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/entitymanager/DbEntityManager.java
Patch:
@@ -295,7 +295,7 @@ protected void flushEntityCache() {
         // mark PERSISTENT
         cachedDbEntity.setEntityState(PERSISTENT);
 
-      } else if(cachedDbEntity.isDirty()) {
+      } else if(cachedDbEntity.getEntityState() == PERSISTENT && cachedDbEntity.isDirty()) {
         // object is dirty -> perform UPDATE
         performEntityOperation(cachedDbEntity, UPDATE);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -95,7 +95,7 @@
 import org.camunda.bpm.engine.impl.cmmn.transformer.CmmnTransformFactory;
 import org.camunda.bpm.engine.impl.cmmn.transformer.CmmnTransformListener;
 import org.camunda.bpm.engine.impl.cmmn.transformer.CmmnTransformer;
-import org.camunda.bpm.engine.impl.cmmn.transformer.DefaultCmmnTranformFactory;
+import org.camunda.bpm.engine.impl.cmmn.transformer.DefaultCmmnTransformFactory;
 import org.camunda.bpm.engine.impl.connector.Connectors;
 import org.camunda.bpm.engine.impl.db.DbIdGenerator;
 import org.camunda.bpm.engine.impl.db.IbatisVariableTypeHandler;
@@ -995,7 +995,7 @@ protected CmmnDeployer getCmmnDeployer() {
     cmmnDeployer.setIdGenerator(idGenerator);
 
     if (cmmnTransformFactory == null) {
-      cmmnTransformFactory = new DefaultCmmnTranformFactory();
+      cmmnTransformFactory = new DefaultCmmnTransformFactory();
     }
 
     if (cmmnElementHandlerRegistry == null) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/transformer/DefaultCmmnTransformFactory.java
Patch:
@@ -16,7 +16,7 @@
  * @author Roman Smirnov
  *
  */
-public class DefaultCmmnTranformFactory implements CmmnTransformFactory {
+public class DefaultCmmnTransformFactory implements CmmnTransformFactory {
 
   public CmmnTransform createTransform(CmmnTransformer cmmnTransformer) {
     return new CmmnTransform(cmmnTransformer);

File: engine/src/test/java/org/camunda/bpm/engine/test/cmmn/transformer/CmmnTransformerTest.java
Patch:
@@ -38,7 +38,7 @@
  * @author Roman Smirnov
  *
  */
-public class CmmnTranformerTest {
+public class CmmnTransformerTest {
 
   protected CmmnTransform transformer;
   protected CmmnModelInstance modelInstance;

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeleteHistoricCaseInstanceCmd.java
Patch:
@@ -42,11 +42,11 @@ public Object execute(CommandContext commandContext) {
       .findHistoricCaseInstance(caseInstanceId);
 
     ensureNotNull("No historic case instance found with id: " + caseInstanceId, "instance", instance);
-    ensureNotNull("Case instance is still running, cannot delete historic process instance: " + caseInstanceId, "instance.getCloseTime()", instance.getCloseTime());
+    ensureNotNull("Case instance is still running, cannot delete historic case instance: " + caseInstanceId, "instance.getCloseTime()", instance.getCloseTime());
 
     commandContext
-      .getHistoricProcessInstanceManager()
-      .deleteHistoricProcessInstanceById(caseInstanceId);
+      .getHistoricCaseInstanceManager()
+      .deleteHistoricCaseInstanceById(caseInstanceId);
 
     return null;
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricCaseInstanceTest.java
Patch:
@@ -126,7 +126,9 @@ public void testHistoricCaseInstanceDates() {
     assertDateSimilar(created, createTime);
     assertDateSimilar(closed, closeTime);
 
-    assertEquals(closeTime.getTime() - createTime.getTime(), (long) durationInMillis);
+    // test that duration is as expected with a maximal difference of one second
+    assertTrue(durationInMillis >= duration);
+    assertTrue(durationInMillis < duration + 1000);
 
     // test queries
     Date beforeCreate = new Date(created.getTime() - 3600 * 1000);

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -148,7 +148,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement(POSTGRES, "selectFilter", "selectFilter_postgres");
     addDatabaseSpecificStatement(POSTGRES, "selectFilterByQueryCriteria", "selectFilterByQueryCriteria_postgres");
     addDatabaseSpecificStatement(POSTGRES, "selectCaseSentryPartsByQueryCriteria", "selectCaseSentryPartsByQueryCriteria_postgres");
-    addDatabaseSpecificStatement(POSTGRES, "selectCaseSentryPartsCountByQueryCriteria", "selectCaseSentryPartsCountByQueryCriteria_postges");
+    addDatabaseSpecificStatement(POSTGRES, "selectCaseSentryPartsCountByQueryCriteria", "selectCaseSentryPartsCountByQueryCriteria_postgres");
 
     constants = new HashMap<String, String>();
     constants.put("constant.event", "'event'");

File: engine/src/test/java/org/camunda/bpm/engine/test/cmmn/sentry/SentryCombinedEntryAndExitCriteriaTest.java
Patch:
@@ -127,7 +127,7 @@ public void FAILING_testParentSuspendInsideStage() {
   }
 
   @Deployment(resources = {"org/camunda/bpm/engine/test/cmmn/sentry/SentryCombinedEntryAndExitCriteriaTest.testParentResumeInsideStageDifferentPlanItemOrder.cmmn"})
-  public void testParentResumeInsideStageDifferentPlanItemOrder() {
+  public void FAILING_testParentResumeInsideStageDifferentPlanItemOrder() {
     // given
     createCaseInstance();
 
@@ -186,7 +186,7 @@ public void testParentResumeInsideStageDifferentPlanItemOrder() {
   }
 
   @Deployment(resources = {"org/camunda/bpm/engine/test/cmmn/sentry/SentryCombinedEntryAndExitCriteriaTest.testParentSuspendInsideStageDifferentPlanItemOrder.cmmn"})
-  public void testParentSuspendInsideStageDifferentPlanItemOrder() {
+  public void FAILING_testParentSuspendInsideStageDifferentPlanItemOrder() {
     // given
     createCaseInstance();
 

File: engine/src/test/java/org/camunda/bpm/engine/test/cmmn/sentry/SentryEntryCriteriaTest.java
Patch:
@@ -583,7 +583,7 @@ public void testEnableByInstanceCreation() {
   }
 
   @Deployment(resources = {"org/camunda/bpm/engine/test/cmmn/sentry/SentryEntryCriteriaTest.testEnableOnParentSuspendInsideStage.cmmn"})
-  public void testEnableOnParentSuspendInsideStage() {
+  public void FAILING_testEnableOnParentSuspendInsideStage() {
     // given
     createCaseInstance();
 
@@ -631,7 +631,7 @@ public void testEnableOnParentSuspendInsideStage() {
   }
 
   @Deployment(resources = {"org/camunda/bpm/engine/test/cmmn/sentry/SentryEntryCriteriaTest.testEnableOnParentResumeInsideStage.cmmn"})
-  public void testEnableOnParentResumeInsideStage() {
+  public void FAILING_testEnableOnParentResumeInsideStage() {
     // given
     createCaseInstance();
 

File: engine/src/test/java/org/camunda/bpm/engine/test/cmmn/sentry/SentryExitCriteriaTest.java
Patch:
@@ -430,7 +430,7 @@ public void testExitCriteriaOnCasePlanModel() {
   }
 
   @Deployment(resources = {"org/camunda/bpm/engine/test/cmmn/sentry/SentryExitCriteriaTest.testExitOnParentSuspendInsideStage.cmmn"})
-  public void testExitOnParentSuspendInsideStage() {
+  public void FAILING_testExitOnParentSuspendInsideStage() {
     // given
     createCaseInstance();
 
@@ -465,7 +465,7 @@ public void testExitOnParentSuspendInsideStage() {
   }
 
   @Deployment(resources = {"org/camunda/bpm/engine/test/cmmn/sentry/SentryExitCriteriaTest.testExitOnParentResumeInsideStage.cmmn"})
-  public void testExitOnParentResumeInsideStage() {
+  public void FAILING_testExitOnParentResumeInsideStage() {
     // given
     createCaseInstance();
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TimerEntity.java
Patch:
@@ -51,6 +51,7 @@ private TimerEntity(TimerEntity te) {
     processInstanceId = te.processInstanceId;
     jobDefinitionId = te.jobDefinitionId;
     suspensionState = te.suspensionState;
+    deploymentId = te.deploymentId;
   }
 
   @Override

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/task/impl/TaskAttachmentResourceImpl.java
Patch:
@@ -24,6 +24,7 @@
 import javax.ws.rs.core.Response.Status;
 
 import org.camunda.bpm.engine.ProcessEngine;
+import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.history.HistoricTaskInstance;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/task/impl/TaskCommentResourceImpl.java
Patch:
@@ -13,6 +13,7 @@
 package org.camunda.bpm.engine.rest.sub.task.impl;
 
 import org.camunda.bpm.engine.ProcessEngine;
+import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.history.HistoricTaskInstance;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractTaskRestServiceInteractionTest.java
Patch:
@@ -66,6 +66,7 @@
 import org.camunda.bpm.engine.FormService;
 import org.camunda.bpm.engine.HistoryService;
 import org.camunda.bpm.engine.ManagementService;
+import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.RepositoryService;
 import org.camunda.bpm.engine.TaskService;

File: engine/src/main/java/org/camunda/bpm/engine/impl/ProcessEngineImpl.java
Patch:
@@ -14,10 +14,12 @@
 
 import java.util.Map;
 import java.util.logging.Logger;
+
 import org.camunda.bpm.engine.*;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.impl.cfg.TransactionContextFactory;
 import org.camunda.bpm.engine.impl.el.ExpressionManager;
+import org.camunda.bpm.engine.impl.history.HistoryLevel;
 import org.camunda.bpm.engine.impl.interceptor.CommandExecutor;
 import org.camunda.bpm.engine.impl.interceptor.SessionFactory;
 import org.camunda.bpm.engine.impl.jobexecutor.JobExecutor;
@@ -46,7 +48,7 @@ public class ProcessEngineImpl implements ProcessEngine {
   protected CommandExecutor commandExecutorSchemaOperations;
   protected Map<Class<?>, SessionFactory> sessionFactories;
   protected ExpressionManager expressionManager;
-  protected int historyLevel;
+  protected HistoryLevel historyLevel;
   protected TransactionContextFactory transactionContextFactory;
   protected ProcessEngineConfigurationImpl processEngineConfiguration;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetHistoryLevelCmd.java
Patch:
@@ -23,7 +23,7 @@
 public class GetHistoryLevelCmd implements Command<Integer> {
 
   public Integer execute(CommandContext commandContext) {
-    return Context.getProcessEngineConfiguration().getHistoryLevel();
+    return Context.getProcessEngineConfiguration().getHistoryLevel().getId();
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/AbstractPersistenceSession.java
Patch:
@@ -21,6 +21,7 @@
 import org.camunda.bpm.engine.impl.db.entitymanager.operation.DbBulkOperation;
 import org.camunda.bpm.engine.impl.db.entitymanager.operation.DbEntityOperation;
 import org.camunda.bpm.engine.impl.db.entitymanager.operation.DbOperation;
+import org.camunda.bpm.engine.impl.history.HistoryLevel;
 
 /**
  * @author Sebastian Menski
@@ -66,9 +67,9 @@ public void executeDbOperation(DbOperation operation) {
   public void dbSchemaCreate() {
     ProcessEngineConfigurationImpl processEngineConfiguration = Context.getProcessEngineConfiguration();
 
-    int configuredHistoryLevel = processEngineConfiguration.getHistoryLevel();
+    HistoryLevel configuredHistoryLevel = processEngineConfiguration.getHistoryLevel();
     if ( (!processEngineConfiguration.isDbHistoryUsed())
-         && (configuredHistoryLevel>ProcessEngineConfigurationImpl.HISTORYLEVEL_NONE)
+         && (!configuredHistoryLevel.equals(HistoryLevel.HISTORY_LEVEL_NONE))
        ) {
       throw new ProcessEngineException("historyLevel config is higher then 'none' and dbHistoryUsed is set to false");
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricActivityInstanceManager.java
Patch:
@@ -20,7 +20,6 @@
 import org.camunda.bpm.engine.history.HistoricActivityInstance;
 import org.camunda.bpm.engine.impl.HistoricActivityInstanceQueryImpl;
 import org.camunda.bpm.engine.impl.Page;
-import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.impl.persistence.AbstractHistoricManager;
 
 
@@ -30,7 +29,7 @@
 public class HistoricActivityInstanceManager extends AbstractHistoricManager {
 
   public void deleteHistoricActivityInstancesByProcessInstanceId(String historicProcessInstanceId) {
-    if (historyLevel>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {
+    if (isHistoryEnabled()) {
       getDbEntityManager().delete(HistoricActivityInstanceEntity.class, "deleteHistoricActivityInstancesByProcessInstanceId", historicProcessInstanceId);
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricProcessInstanceManager.java
Patch:
@@ -20,7 +20,6 @@
 import org.camunda.bpm.engine.history.HistoricProcessInstance;
 import org.camunda.bpm.engine.impl.HistoricProcessInstanceQueryImpl;
 import org.camunda.bpm.engine.impl.Page;
-import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.history.event.HistoricProcessInstanceEventEntity;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
@@ -40,7 +39,7 @@ public HistoricProcessInstanceEntity findHistoricProcessInstance(String processI
   }
 
   public HistoricProcessInstanceEventEntity findHistoricProcessInstanceEvent(String eventId) {
-    if (historyLevel>ProcessEngineConfigurationImpl.HISTORYLEVEL_NONE) {
+    if (isHistoryEnabled()) {
       return getDbEntityManager().selectById(HistoricProcessInstanceEventEntity.class, eventId);
     }
     return null;

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricVariableInstanceManager.java
Patch:
@@ -19,7 +19,6 @@
 import org.camunda.bpm.engine.history.HistoricVariableInstanceQuery;
 import org.camunda.bpm.engine.impl.HistoricVariableInstanceQueryImpl;
 import org.camunda.bpm.engine.impl.Page;
-import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.persistence.AbstractHistoricManager;
 
@@ -30,7 +29,7 @@
 public class HistoricVariableInstanceManager extends AbstractHistoricManager {
 
   public void deleteHistoricVariableInstanceByProcessInstanceId(String historicProcessInstanceId) {
-    if (historyLevel >= ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {
+    if (isHistoryEnabled()) {
 
       // delete entries in DB
       List<HistoricVariableInstance> historicProcessVariables = Context
@@ -72,7 +71,7 @@ public HistoricVariableInstanceEntity findHistoricVariableInstanceByVariableInst
   }
 
   public void deleteHistoricVariableInstancesByTaskId(String taskId) {
-    if (historyLevel >= ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {
+    if (isHistoryEnabled()) {
       HistoricVariableInstanceQuery historicProcessVariableQuery = new HistoricVariableInstanceQueryImpl().taskIdIn(taskId);
       List<HistoricVariableInstance> historicProcessVariables = historicProcessVariableQuery.list();
       for(HistoricVariableInstance historicProcessVariable : historicProcessVariables) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/util/FormPropertyStartContext.java
Patch:
@@ -19,7 +19,9 @@
 import org.camunda.bpm.engine.impl.form.StartFormHelper;
 import org.camunda.bpm.engine.impl.form.handler.DefaultStartFormHandler;
 import org.camunda.bpm.engine.impl.form.handler.StartFormHandler;
+import org.camunda.bpm.engine.impl.history.HistoryLevel;
 import org.camunda.bpm.engine.impl.history.event.HistoryEvent;
+import org.camunda.bpm.engine.impl.history.event.HistoryEventTypes;
 import org.camunda.bpm.engine.impl.history.handler.HistoryEventHandler;
 import org.camunda.bpm.engine.impl.history.producer.HistoryEventProducer;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
@@ -48,7 +50,6 @@ public void setFormProperties(Map<String, Object> properties) {
   }
 
   public void initialStarted(PvmExecutionImpl execution) {
-
     StartFormHelper.initFormPropertiesOnScope(formProperties, execution);
 
     // make sure create events are fired after form is submitted

File: engine/src/main/java/org/camunda/bpm/engine/impl/test/TestHelper.java
Patch:
@@ -263,8 +263,8 @@ public Object execute(CommandContext commandContext) {
          DbEntityManager dbEntityManager = commandContext.getDbEntityManager();
          PropertyEntity historyLevelProperty = dbEntityManager.selectById(PropertyEntity.class, "historyLevel");
          if (historyLevelProperty != null) {
-           if (processEngineConfiguration.getHistoryLevel() != new Integer(historyLevelProperty.getValue())) {
-             historyLevelProperty.setValue(Integer.toString(processEngineConfiguration.getHistoryLevel()));
+           if (processEngineConfiguration.getHistoryLevel().getId() != new Integer(historyLevelProperty.getValue())) {
+             historyLevelProperty.setValue(Integer.toString(processEngineConfiguration.getHistoryLevel().getId()));
              dbEntityManager.merge(historyLevelProperty);
            }
          } else {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/ManagementServiceTest.java
Patch:
@@ -575,7 +575,7 @@ public void  testDeleteNonexistingProperty() {
 
   public void testGetHistoryLevel() {
     int historyLevel = managementService.getHistoryLevel();
-    assertEquals(processEngineConfiguration.getHistoryLevel(), historyLevel);
+    assertEquals(processEngineConfiguration.getHistoryLevel().getId(), historyLevel);
   }
 
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/RuntimeServiceTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.camunda.bpm.engine.history.HistoricDetail;
 import org.camunda.bpm.engine.history.HistoricTaskInstance;
 import org.camunda.bpm.engine.impl.RuntimeServiceImpl;
-import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
+import org.camunda.bpm.engine.impl.history.HistoryLevel;
 import org.camunda.bpm.engine.impl.persistence.entity.HistoricDetailVariableInstanceUpdateEntity;
 import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
 import org.camunda.bpm.engine.impl.util.CollectionUtil;
@@ -534,7 +534,7 @@ public void testSetVariablesNullExecutionId() {
   }
 
   private void checkHistoricVariableUpdateEntity(String variableName, String processInstanceId) {
-    if (processEngineConfiguration.getHistoryLevel() == ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {
+    if (processEngineConfiguration.getHistoryLevel().equals(HistoryLevel.HISTORY_LEVEL_FULL)) {
       boolean deletedVariableUpdateFound = false;
 
       List<HistoricDetail> resultSet = historyService.createHistoricDetailQuery().processInstanceId(processInstanceId).list();

File: engine/src/test/java/org/camunda/bpm/engine/test/api/task/TaskIdentityLinksTest.java
Patch:
@@ -17,6 +17,7 @@
 
 import junit.framework.AssertionFailedError;
 
+import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
 import org.camunda.bpm.engine.task.Event;
@@ -79,7 +80,7 @@ public void testCandidateGroupLink() {
 
     assertEquals(1, identityLinks.size());
 
-    if (processEngineConfiguration.getHistoryLevel()>=ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {
+    if (processEngineConfiguration.getHistoryLevel().getId()>= ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {
       List<Event> taskEvents = taskService.getTaskEvents(taskId);
       assertEquals(1, taskEvents.size());
       Event taskEvent = taskEvents.get(0);
@@ -92,7 +93,7 @@ public void testCandidateGroupLink() {
 
     taskService.deleteCandidateGroup(taskId, "muppets");
 
-    if (processEngineConfiguration.getHistoryLevel()>=ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {
+    if (processEngineConfiguration.getHistoryLevel().getId()>= ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {
       List<Event> taskEvents = taskService.getTaskEvents(taskId);
       Event taskEvent = findTaskEvent(taskEvents, Event.ACTION_DELETE_GROUP_LINK);
       assertEquals(Event.ACTION_DELETE_GROUP_LINK, taskEvent.getAction());

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/callactivity/CallActivityAdvancedTest.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.history.HistoricProcessInstance;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
@@ -777,7 +778,7 @@ public void testSubProcessBusinessKeyInput() {
 
     taskService.complete(taskBeforeSubProcess.getId());
 
-    if(processEngineConfiguration.getHistoryLevel() > ProcessEngineConfigurationImpl.HISTORYLEVEL_NONE) {
+    if(processEngineConfiguration.getHistoryLevel().getId() > ProcessEngineConfigurationImpl.HISTORYLEVEL_NONE) {
       // called process started so businesskey should be written in history
       HistoricProcessInstance hpi = historyService.createHistoricProcessInstanceQuery().superProcessInstanceId(processInstance.getId()).singleResult();
       assertEquals(businessKey, hpi.getBusinessKey());
@@ -804,7 +805,7 @@ public void testSubProcessBusinessKeyInput() {
     assertProcessEnded(processInstance.getId());
     assertEquals(0, runtimeService.createExecutionQuery().list().size());
 
-    if(processEngineConfiguration.getHistoryLevel() > ProcessEngineConfigurationImpl.HISTORYLEVEL_NONE) {
+    if(processEngineConfiguration.getHistoryLevel().getId() > ProcessEngineConfigurationImpl.HISTORYLEVEL_NONE) {
       HistoricProcessInstance hpi = historyService.createHistoricProcessInstanceQuery().superProcessInstanceId(processInstance.getId()).finished().singleResult();
       assertEquals(businessKey, hpi.getBusinessKey());
 

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/link/LinkEventTest.java
Patch:
@@ -15,6 +15,7 @@
 import java.util.Arrays;
 import java.util.List;
 
+import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.history.HistoricActivityInstance;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
@@ -45,7 +46,7 @@ public void testValidEventLink() {
     assertProcessEnded(pi.getId());
 
     // validate history
-    if(processEngineConfiguration.getHistoryLevel() >= ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {
+    if(processEngineConfiguration.getHistoryLevel().getId() >= ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {
       List<HistoricActivityInstance> activities = historyService.createHistoricActivityInstanceQuery().processInstanceId(pi.getId()).orderByActivityId().asc().list();
       assertEquals(4, activities.size());
       assertEquals("EndEvent_1", activities.get(0).getActivityId());
@@ -67,7 +68,7 @@ public void testEventLinkMultipleSources() {
     runtimeService.deleteProcessInstance(pi.getId(), "test done");
 
     // validate history
-    if(processEngineConfiguration.getHistoryLevel() >= ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {
+    if(processEngineConfiguration.getHistoryLevel().getId() >= ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {
       List<HistoricActivityInstance> activities = historyService.createHistoricActivityInstanceQuery().processInstanceId(pi.getId()).orderByActivityId().asc().list();
       assertEquals(5, activities.size());
       assertEquals("ManualTask_1", activities.get(0).getActivityId());

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/message/MessageBoundaryEventTest.java
Patch:
@@ -15,6 +15,7 @@
 
 import java.util.List;
 
+import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.history.HistoricActivityInstance;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
@@ -523,7 +524,7 @@ public void testBoundaryMessageEventOnSubprocessWithIntermediateMessageCatch() {
     // the process instance is ended
     assertProcessEnded(processInstance.getId());
 
-    if(processEngineConfiguration.getHistoryLevel()>ProcessEngineConfigurationImpl.HISTORYLEVEL_NONE) {
+    if(processEngineConfiguration.getHistoryLevel().getId()> ProcessEngineConfigurationImpl.HISTORYLEVEL_NONE) {
       // and all activity instances in history have an end time set
       List<HistoricActivityInstance> hais = historyService.createHistoricActivityInstanceQuery().list();
       for (HistoricActivityInstance historicActivityInstance : hais) {

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/usertask/UserTaskTest.java
Patch:
@@ -15,6 +15,7 @@
 
 import java.util.List;
 
+import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
@@ -46,7 +47,7 @@ public void testTaskPropertiesNotNull() {
     assertNotNull(task.getCreateTime());
 
     // the next test verifies that if an execution creates a task, that no events are created during creation of the task.
-    if (processEngineConfiguration.getHistoryLevel() >= ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {
+    if (processEngineConfiguration.getHistoryLevel().getId() >= ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {
       assertEquals(0, taskService.getTaskEvents(task.getId()).size());
     }
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/db/ProcessInstanceMigrationTest.java
Patch:
@@ -15,6 +15,7 @@
 
 import java.util.List;
 
+import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.history.HistoricProcessInstance;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
@@ -188,7 +189,7 @@ public void testSetProcessDefinitionVersion() {
     assertEquals(newProcessDefinition.getId(), pi.getProcessDefinitionId());
 
     // check history
-    if (processEngineConfiguration.getHistoryLevel() > ProcessEngineConfigurationImpl.HISTORYLEVEL_NONE) {
+    if (processEngineConfiguration.getHistoryLevel().getId() > ProcessEngineConfigurationImpl.HISTORYLEVEL_NONE) {
       HistoricProcessInstance historicPI = historyService
         .createHistoricProcessInstanceQuery()
         .processInstanceId(pi.getId())

File: engine/src/test/java/org/camunda/bpm/engine/test/examples/bpmn/executionlistener/ExecutionListenerTest.java
Patch:
@@ -181,7 +181,7 @@ public void testScriptListener() {
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("process");
     assertTrue(processInstance.isEnded());
 
-    if (processEngineConfiguration.getHistoryLevel() >= HISTORYLEVEL_AUDIT) {
+    if (processEngineConfiguration.getHistoryLevel().getId() >= HISTORYLEVEL_AUDIT) {
       HistoricVariableInstanceQuery query = historyService.createHistoricVariableInstanceQuery();
       long count = query.count();
       assertEquals(5, count);
@@ -204,7 +204,7 @@ public void testScriptResourceListener() {
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("process");
     assertTrue(processInstance.isEnded());
 
-    if (processEngineConfiguration.getHistoryLevel() >= HISTORYLEVEL_AUDIT) {
+    if (processEngineConfiguration.getHistoryLevel().getId() >= HISTORYLEVEL_AUDIT) {
       HistoricVariableInstanceQuery query = historyService.createHistoricVariableInstanceQuery();
       long count = query.count();
       assertEquals(5, count);

File: engine/src/test/java/org/camunda/bpm/engine/test/examples/bpmn/tasklistener/TaskListenerTest.java
Patch:
@@ -122,7 +122,7 @@ public void testScriptListener() {
 
     runtimeService.deleteProcessInstance(processInstance.getId(), "test");
 
-    if (processEngineConfiguration.getHistoryLevel() >= HISTORYLEVEL_AUDIT) {
+    if (processEngineConfiguration.getHistoryLevel().getId() >= HISTORYLEVEL_AUDIT) {
       HistoricVariableInstance variable = historyService.createHistoricVariableInstanceQuery().variableName("delete").singleResult();
       assertNotNull(variable);
       assertTrue((Boolean) variable.getValue());
@@ -152,7 +152,7 @@ public void testScriptResourceListener() {
 
     runtimeService.deleteProcessInstance(processInstance.getId(), "test");
 
-    if (processEngineConfiguration.getHistoryLevel() >= HISTORYLEVEL_AUDIT) {
+    if (processEngineConfiguration.getHistoryLevel().getId() >= HISTORYLEVEL_AUDIT) {
       HistoricVariableInstance variable = historyService.createHistoricVariableInstanceQuery().variableName("delete").singleResult();
       assertNotNull(variable);
       assertTrue((Boolean) variable.getValue());

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/history/VariableHistoryLevelCompatibilityTest.java
Patch:
@@ -38,7 +38,7 @@ protected void closeDownProcessEngine() {
   }
 
   public void testCompatibilty() {
-    int historyLevel = processEngineConfiguration.getHistoryLevel();
+    int historyLevel = processEngineConfiguration.getHistoryLevel().getId();
     assertEquals(ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY, historyLevel);
   }
    

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/testing/ActivitiTestCaseTest.java
Patch:
@@ -13,6 +13,7 @@
 
 package org.camunda.bpm.engine.test.standalone.testing;
 
+import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.impl.ProcessEngineImpl;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.task.Task;
@@ -38,7 +39,7 @@ public void testSimpleProcess() {
 
     ProcessEngineConfigurationImpl configuration = ((ProcessEngineImpl)processEngine).getProcessEngineConfiguration();
 
-    if (configuration.getHistoryLevel() > ProcessEngineConfigurationImpl.HISTORYLEVEL_NONE) {
+    if (configuration.getHistoryLevel().getId() > ProcessEngineConfigurationImpl.HISTORYLEVEL_NONE) {
       assertEquals(1, historyService.createHistoricProcessInstanceQuery().count());
     }
   }

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/builder/AbstractCallActivityBuilder.java
Patch:
@@ -46,7 +46,7 @@ public B calledElement(String calledElement) {
    * @return the builder object
    */
   public B camundaAsync() {
-    element.setCamundaAsync(true);
+    element.setCamundaAsyncBefore(true);
     return myself;
   }
 
@@ -59,7 +59,7 @@ public B camundaAsync() {
    * @return the builder object
    */
   public B camundaAsync(boolean isCamundaAsync) {
-    element.setCamundaAsync(isCamundaAsync);
+    element.setCamundaAsyncBefore(isCamundaAsync);
     return myself;
   }
 

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/builder/AbstractStartEventBuilder.java
Patch:
@@ -35,7 +35,7 @@ protected AbstractStartEventBuilder(BpmnModelInstance modelInstance, StartEvent
    * @return the builder object
    */
   public B camundaAsync() {
-    element.setCamundaAsync(true);
+    element.setCamundaAsyncBefore(true);
     return myself;
   }
 
@@ -48,7 +48,7 @@ public B camundaAsync() {
    * @return the builder object
    */
   public B camundaAsync(boolean isCamundaAsync) {
-    element.setCamundaAsync(isCamundaAsync);
+    element.setCamundaAsyncBefore(isCamundaAsync);
     return myself;
   }
 

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/builder/AbstractSubProcessBuilder.java
Patch:
@@ -49,7 +49,7 @@ public B triggerByEvent() {
    * @return the builder object
    */
   public B camundaAsync() {
-    element.setCamundaAsync(true);
+    element.setCamundaAsyncBefore(true);
     return myself;
   }
 
@@ -62,7 +62,7 @@ public B camundaAsync() {
    * @return the builder object
    */
   public B camundaAsync(boolean isCamundaAsync) {
-    element.setCamundaAsync(isCamundaAsync);
+    element.setCamundaAsyncBefore(isCamundaAsync);
     return myself;
   }
 

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/builder/AbstractTaskBuilder.java
Patch:
@@ -35,7 +35,7 @@ protected AbstractTaskBuilder(BpmnModelInstance modelInstance, E element, Class<
    * @return the builder object
    */
   public B camundaAsync() {
-    element.setCamundaAsync(true);
+    element.setCamundaAsyncBefore(true);
     return myself;
   }
 
@@ -48,7 +48,7 @@ public B camundaAsync() {
    * @return the builder object
    */
   public B camundaAsync(boolean isCamundaAsync) {
-    element.setCamundaAsync(isCamundaAsync);
+    element.setCamundaAsyncBefore(isCamundaAsync);
     return myself;
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/handler/StartFormHandler.java
Patch:
@@ -1,9 +1,9 @@
 /* Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/local/LocalSLSBInvocationWithCallbackTest.java
Patch:
@@ -15,7 +15,6 @@
 import org.jboss.shrinkwrap.api.asset.StringAsset;
 import org.jboss.shrinkwrap.api.spec.WebArchive;
 import org.junit.Assert;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -56,7 +55,7 @@
  *
  */
 @RunWith(Arquillian.class)
-public abstract class LocalSLSBInvocationWithCallbackTest extends AbstractFoxPlatformIntegrationTest {
+public class LocalSLSBInvocationWithCallbackTest extends AbstractFoxPlatformIntegrationTest {
 
   @Deployment(name="pa", order=2)
   public static WebArchive processArchive() {
@@ -82,7 +81,6 @@ public static WebArchive delegateDeployment() {
     return webArchive;
   }
 
-  @Ignore
   @Test
   @OperateOnDeployment("pa")
   public void testInvokeBean() throws Exception{

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/task/TaskQueryDto.java
Patch:
@@ -1119,7 +1119,9 @@ public static TaskQueryDto fromQuery(Query<?, ?> query) {
       dto.delegationState = taskQuery.getDelegationState().toString();
     }
 
+    dto.processVariables = new ArrayList<VariableQueryParameterDto>();
     dto.taskVariables = new ArrayList<VariableQueryParameterDto>();
+    dto.caseInstanceVariables = new ArrayList<VariableQueryParameterDto>();
     for (TaskQueryVariableValue variableValue : taskQuery.getVariables()) {
       VariableQueryParameterDto variableValueDto = new VariableQueryParameterDto(variableValue);
 

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -457,7 +457,7 @@ public abstract class MockProvider {
   public static final String EXAMPLE_FILTER_RESOURCE_TYPE = EntityTypes.TASK;
   public static final String EXAMPLE_FILTER_NAME = "aFilterName";
   public static final String EXAMPLE_FILTER_OWNER = "aFilterOwner";
-  public static final Query EXAMPLE_FILTER_QUERY = new TaskQueryImpl().taskName("test");
+  public static final Query EXAMPLE_FILTER_QUERY = new TaskQueryImpl().taskName("test").processVariableValueEquals("foo", "bar").caseInstanceVariableValueEquals("foo", "bar").taskVariableValueEquals("foo", "bar");
   public static final TaskQueryDto EXAMPLE_FILTER_QUERY_DTO = TaskQueryDto.fromQuery(EXAMPLE_FILTER_QUERY);
   public static final Map<String, Object> EXAMPLE_FILTER_PROPERTIES = Collections.singletonMap("color", (Object) "#112233");
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/entitymanager/operation/DbEntityOperation.java
Patch:
@@ -31,7 +31,7 @@ public class DbEntityOperation extends DbOperation {
   /**
    * Indicates whether the operation failed to execute due to OptimisticLocking
    */
-  protected boolean failed;
+  protected boolean failed = false;
 
   public void recycle() {
     entity = null;

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ExecuteJobsCmd.java
Patch:
@@ -50,9 +50,7 @@ public Object execute(CommandContext commandContext) {
     if (log.isLoggable(Level.FINE)) {
       log.fine("Executing job " + jobId);
     }
-    JobEntity job = commandContext
-      .getJobManager()
-      .findJobById(jobId);
+    JobEntity job = commandContext.getDbEntityManager().selectById(JobEntity.class, jobId);
 
     final CommandExecutor commandExecutor = Context.getProcessEngineConfiguration().getCommandExecutorTxRequiresNew();
     final JobExecutorContext jobExecutorContext = Context.getJobExecutorContext();

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSession.java
Patch:
@@ -129,10 +129,10 @@ protected void executeInsertEntity(String insertStatement, Object parameter) {
     }
     sqlSession.insert(insertStatement, parameter);
 
-    // increment revision of our copy
+    // set revision of our copy to 1
     if (parameter instanceof HasDbRevision) {
       HasDbRevision versionedObject = (HasDbRevision) parameter;
-      versionedObject.setRevision(versionedObject.getRevisionNext());
+      versionedObject.setRevision(1);
     }
   }
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/runtime/FilterDto.java
Patch:
@@ -39,7 +39,6 @@ public class FilterDto {
   protected AbstractQueryDto<?> query;
   protected Map<String, Object> properties;
 
-  @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
   protected Long itemCount;
 
   public String getId() {
@@ -95,6 +94,7 @@ public void setProperties(Map<String, Object> properties) {
     this.properties = properties;
   }
 
+  @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
   public Long getItemCount() {
     return itemCount;
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/iomapping/InputOutputEventTest.java
Patch:
@@ -19,13 +19,13 @@
 import java.util.Map;
 
 import org.camunda.bpm.engine.ProcessEngineException;
+import org.camunda.bpm.engine.impl.calendar.DateTimeUtil;
 import org.camunda.bpm.engine.impl.persistence.entity.TimerEntity;
 import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
 import org.camunda.bpm.engine.runtime.Execution;
 import org.camunda.bpm.engine.runtime.Job;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.test.Deployment;
-import org.joda.time.DateTime;
 
 /**
  * @author Thorben Lindhauer
@@ -76,7 +76,7 @@ public void testMessageCatchEvent() {
   @Deployment
   public void testTimerCatchEvent() {
     Map<String, Object> variables = new HashMap<String, Object>();
-    Date dueDate = DateTime.now().plusMinutes(5).toDate();
+    Date dueDate = DateTimeUtil.now().plusMinutes(5).toDate();
     variables.put("outerVariable", new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(dueDate));
     runtimeService.startProcessInstanceByKey("testProcess", variables);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationTransitionNotifyListenerTake.java
Patch:
@@ -58,7 +58,7 @@ public void execute(PvmExecutionImpl execution) {
         throw new PvmException("couldn't execute event listener : "+e.getMessage(), e);
       }
       execution.setListenerIndex(executionListenerIndex + 1);
-      execution.performOperation(this);
+      execution.performOperationSync(this);
 
     } else {
       log.fine(execution+" takes transition "+transition);

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractFilterRestServiceInteractionTest.java
Patch:
@@ -176,7 +176,7 @@ public void testGetNonExistingFilter() {
 
   @Test
   public void testCreateFilter() {
-    FilterDto dto = FilterDto.fromFilter(eq(MockProvider.createMockFilter()));
+    FilterDto dto = FilterDto.fromFilter(MockProvider.createMockFilter());
 
     given()
       .contentType(POST_JSON_CONTENT_TYPE)

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricActivityInstanceTest.java
Patch:
@@ -881,7 +881,7 @@ private HistoricActivityInstanceQuery startEventTestProcess(String message) {
   }
 
   @Deployment(resources = "org/camunda/bpm/engine/test/history/HistoricActivityInstanceTest.startEventTypesForEventSubprocess.bpmn20.xml")
-  public void FAILING_testMessageEventSubprocess() {
+  public void testMessageEventSubprocess() {
     Map<String, Object> vars = new HashMap<String, Object>();
     vars.put("shouldThrowError", false);
     runtimeService.startProcessInstanceByKey("process", vars);
@@ -895,7 +895,7 @@ public void FAILING_testMessageEventSubprocess() {
   }
 
   @Deployment(resources = "org/camunda/bpm/engine/test/history/HistoricActivityInstanceTest.startEventTypesForEventSubprocess.bpmn20.xml")
-  public void FAILING_testSignalEventSubprocess() {
+  public void testSignalEventSubprocess() {
     Map<String, Object> vars = new HashMap<String, Object>();
     vars.put("shouldThrowError", false);
     runtimeService.startProcessInstanceByKey("process", vars);

File: webapps/webapp/src/main/runtime/develop/java/org/camunda/bpm/pa/service/ArchiveInvoiceService.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.example.invoice.service;
+package org.camunda.bpm.pa.service;
 
 import java.util.logging.Logger;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeployCmd.java
Patch:
@@ -47,7 +47,7 @@
 import org.camunda.bpm.engine.repository.ProcessDefinition;
 import org.camunda.bpm.model.bpmn.Bpmn;
 import org.camunda.bpm.model.bpmn.BpmnModelInstance;
-import org.camunda.bpm.model.bpmn.instance.bpmndi.BpmnDiagram;
+import org.camunda.bpm.model.bpmn.instance.Process;
 import org.camunda.bpm.model.cmmn.Cmmn;
 import org.camunda.bpm.model.cmmn.CmmnModelInstance;
 import org.camunda.bpm.model.cmmn.instance.Case;
@@ -240,8 +240,8 @@ protected Set<String> retrieveProcessKeysFromResources(Map<String, ResourceEntit
 
         ByteArrayInputStream byteStream = new ByteArrayInputStream(resource.getBytes());
         BpmnModelInstance model = Bpmn.readModelFromStream(byteStream);
-        for (BpmnDiagram bpmnDiagram : model.getDefinitions().getBpmDiagrams()) {
-          keys.add(bpmnDiagram.getId());
+        for (Process process : model.getDefinitions().getChildElementsByType(Process.class)) {
+          keys.add(process.getId());
         }
       } else if (isCmmnResource(resource)) {
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/repository/ProcessApplicationDeploymentBuilderImpl.java
Patch:
@@ -92,8 +92,8 @@ public ProcessApplicationDeploymentBuilderImpl enableDuplicateFiltering() {
   }
 
   @Override
-  public ProcessApplicationDeploymentBuilderImpl enableDuplicateFiltering(boolean deployAllOnSingleChange) {
-    return (ProcessApplicationDeploymentBuilderImpl) super.enableDuplicateFiltering(deployAllOnSingleChange);
+  public ProcessApplicationDeploymentBuilderImpl enableDuplicateFiltering(boolean deployChangedOnly) {
+    return (ProcessApplicationDeploymentBuilderImpl) super.enableDuplicateFiltering(deployChangedOnly);
   }
 
   // getters / setters ///////////////////////////////////////////////

File: engine/src/main/java/org/camunda/bpm/engine/repository/ProcessApplicationDeploymentBuilder.java
Patch:
@@ -63,7 +63,7 @@ public interface ProcessApplicationDeploymentBuilder extends DeploymentBuilder {
   @Deprecated
   ProcessApplicationDeploymentBuilder enableDuplicateFiltering();
   /* {@inheritDoc} */
-  ProcessApplicationDeploymentBuilder enableDuplicateFiltering(boolean deployAllOnSingleChange);
+  ProcessApplicationDeploymentBuilder enableDuplicateFiltering(boolean deployChangedOnly);
   /* {@inheritDoc} */
   ProcessApplicationDeploymentBuilder activateProcessDefinitionsOn(Date date);
 

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/service/ProcessApplicationDeploymentService.java
Patch:
@@ -135,7 +135,7 @@ protected void performDeployment() throws StartException {
       final ProcessApplicationDeploymentBuilder deploymentBuilder = repositoryService.createDeployment(processApplication.getReference());
 
       // enable duplicate filtering
-      deploymentBuilder.enableDuplicateFiltering();
+      deploymentBuilder.enableDuplicateFiltering(PropertyHelper.getBooleanProperty(processArchive.getProperties(), ProcessArchiveXml.PROP_IS_DEPLOY_CHANGED_ONLY, false));
 
       // enable resuming of previous versions:
       if(PropertyHelper.getBooleanProperty(processArchive.getProperties(), ProcessArchiveXml.PROP_IS_RESUME_PREVIOUS_VERSIONS, true)) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/FilterEntity.java
Patch:
@@ -15,6 +15,7 @@
 
 import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotEmpty;
 import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
+import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNull;
 
 import java.io.Serializable;
 import java.util.HashMap;
@@ -72,6 +73,8 @@ public String getResourceType() {
 
   public Filter setResourceType(String resourceType) {
     ensureNotEmpty(NotValidException.class, "Filter resource type must not be null or empty", "resourceType", resourceType);
+    ensureNull(NotValidException.class, "Cannot overwrite filter resource type", "resourceType", this.resourceType);
+
     this.resourceType = resourceType;
     return this;
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/task/TaskQueryTest.java
Patch:
@@ -1178,7 +1178,7 @@ public void testNativeQuery() {
 
     // join task and variable instances
     assertEquals(1, taskService.createNativeTaskQuery().sql("SELECT count(*) FROM " + managementService.getTableName(Task.class) + " T1, "+managementService.getTableName(VariableInstanceEntity.class)+" V1 WHERE V1.TASK_ID_ = T1.ID_").count());
-    List<Task> tasks = taskService.createNativeTaskQuery().sql("SELECT * FROM " + managementService.getTableName(Task.class) + " T1, "+managementService.getTableName(VariableInstanceEntity.class)+" V1 WHERE V1.TASK_ID_ = T1.ID_").list();
+    List<Task> tasks = taskService.createNativeTaskQuery().sql("SELECT T1.* FROM " + managementService.getTableName(Task.class) + " T1, "+managementService.getTableName(VariableInstanceEntity.class)+" V1 WHERE V1.TASK_ID_ = T1.ID_").list();
     assertEquals(1, tasks.size());
     assertEquals("gonzoTask", tasks.get(0).getName());
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeployCmd.java
Patch:
@@ -127,7 +127,7 @@ protected Map<String, ResourceEntity> resolveResourcesToDeploy(CommandContext co
 
       Map<String, ResourceEntity> existingResources = commandContext
           .getResourceManager()
-          .findLatestResourcesByDeploymentName(deployment.getName());
+          .findLatestResourcesByDeploymentName(deployment.getName(), containedResources.keySet());
 
       for (ResourceEntity deployedResource : containedResources.values()) {
         String resourceName = deployedResource.getName();

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -142,6 +142,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement(POSTGRES, "selectResourceByDeploymentIdAndResourceName", "selectResourceByDeploymentIdAndResourceName_postgres");
     addDatabaseSpecificStatement(POSTGRES, "selectResourceByDeploymentIdAndResourceId", "selectResourceByDeploymentIdAndResourceId_postgres");
     addDatabaseSpecificStatement(POSTGRES, "selectResourcesByDeploymentId", "selectResourcesByDeploymentId_postgres");
+    addDatabaseSpecificStatement(POSTGRES, "selectLatestResourcesByDeploymentName", "selectLatestResourcesByDeploymentName_postgres");
     addDatabaseSpecificStatement(POSTGRES, "selectHistoricDetailsByQueryCriteria", "selectHistoricDetailsByQueryCriteria_postgres");
     addDatabaseSpecificStatement(POSTGRES, "insertIdentityInfo", "insertIdentityInfo_postgres");
     addDatabaseSpecificStatement(POSTGRES, "updateIdentityInfo", "updateIdentityInfo_postgres");

File: engine/src/main/java/org/camunda/bpm/engine/filter/Filter.java
Patch:
@@ -86,7 +86,7 @@ public interface Filter {
    * and if the filter is saved the query is updated.
    *
    * @param extendingQuery the query to extend the filter with
-   * @return this filter
+   * @return a copy of this filter with the extended query
    */
   <T extends Query> Filter extend(T extendingQuery);
 
@@ -95,7 +95,7 @@ public interface Filter {
    * and if the filter is saved the query is updated.
    *
    * @param extendingQuery the query to extend the filter with
-   * @return this filter
+   * @return a copy of this filter with the extended query
    */
   <T extends Query> Filter extend(String extendingQuery);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -762,6 +762,7 @@ protected void initSqlSessionFactory() {
           properties.put("limitBefore" , DbSqlSessionFactory.databaseSpecificLimitBeforeStatements.get(databaseType));
           properties.put("limitAfter" , DbSqlSessionFactory.databaseSpecificLimitAfterStatements.get(databaseType));
           properties.put("limitBetween" , DbSqlSessionFactory.databaseSpecificLimitBetweenStatements.get(databaseType));
+          properties.put("limitBetweenClob" , DbSqlSessionFactory.databaseSpecificLimitBetweenClobStatements.get(databaseType));
           properties.put("orderBy" , DbSqlSessionFactory.databaseSpecificOrderByStatements.get(databaseType));
           properties.put("limitBeforeNativeQuery" , DbSqlSessionFactory.databaseSpecificLimitBeforeNativeQueryStatements.get(databaseType));
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/application/ProcessApplicationManager.java
Patch:
@@ -144,7 +144,7 @@ protected void logRegistration(Set<String> deploymentIds, ProcessApplicationRefe
       for (String deploymentId : deploymentIds) {
 
         DeploymentEntity deployment = commandContext
-          .getDbEntityManger()
+          .getDbEntityManager()
           .selectById(DeploymentEntity.class, deploymentId);
 
         if(deployment != null) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AbstractExecuteFilterCmd.java
Patch:
@@ -40,7 +40,7 @@ public AbstractExecuteFilterCmd(String filterId, Query extendingQuery) {
   protected Filter getFilter(CommandContext commandContext) {
     ensureNotNull("No filter id given to execute", "filterId", filterId);
     Filter filter = commandContext
-      .getDbEntityManger()
+      .getDbEntityManager()
       .selectById(FilterEntity.class, filterId);
 
     ensureNotNull("No filter found for id '" + filterId + "'", "filter", filter);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/CreateAttachmentCmd.java
Patch:
@@ -17,7 +17,6 @@
 
 import org.camunda.bpm.engine.history.UserOperationLogEntry;
 import org.camunda.bpm.engine.impl.db.entitymanager.DbEntityManager;
-import org.camunda.bpm.engine.impl.db.sql.DbSqlSession;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.persistence.entity.AttachmentEntity;
@@ -71,7 +70,7 @@ public Attachment execute(CommandContext commandContext) {
     attachment.setProcessInstanceId(processInstanceId);
     attachment.setUrl(url);
 
-    DbEntityManager dbEntityManger = commandContext.getDbEntityManger();
+    DbEntityManager dbEntityManger = commandContext.getDbEntityManager();
     dbEntityManger.insert(attachment);
 
     if (content != null) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeleteAttachmentCmd.java
Patch:
@@ -38,11 +38,11 @@ public DeleteAttachmentCmd(String attachmentId) {
 
   public Object execute(CommandContext commandContext) {
     AttachmentEntity attachment = commandContext
-      .getDbEntityManger()
+      .getDbEntityManager()
       .selectById(AttachmentEntity.class, attachmentId);
 
     commandContext
-      .getDbEntityManger()
+      .getDbEntityManager()
       .delete(attachment);
 
     if (attachment.getContentId() != null) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeleteFilterCmd.java
Patch:
@@ -36,13 +36,13 @@ public DeleteFilterCmd(String filterId) {
 
   public Filter execute(CommandContext commandContext) {
     FilterEntity filter = commandContext
-      .getDbEntityManger()
+      .getDbEntityManager()
       .selectById(FilterEntity.class, filterId);
 
     ensureNotNull("No filter found for filter id '" + filterId + "'", "filter", filter);
 
     commandContext
-      .getDbEntityManger()
+      .getDbEntityManager()
       .delete(filter);
 
     return filter;

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeleteTaskAttachmentCmd.java
Patch:
@@ -47,7 +47,7 @@ public Object execute(CommandContext commandContext) {
     ensureNotNull("No attachment exist for task id '" + taskId + " and attachmentId '" + attachmentId + "'.", "attachment", attachment);
 
     commandContext
-      .getDbEntityManger()
+      .getDbEntityManager()
       .delete(attachment);
 
     if (attachment.getContentId() != null) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetActivityInstanceCmd.java
Patch:
@@ -95,7 +95,7 @@ protected List<ExecutionEntity> loadProcessInstance(String processInstanceId, Co
 
     // first try to load from cache
     // check whether the process instance is already (partially) loaded in command context
-    List<ExecutionEntity> cachedExecutions = commandContext.getDbEntityManger().getCachedEntitiesByType(ExecutionEntity.class);
+    List<ExecutionEntity> cachedExecutions = commandContext.getDbEntityManager().getCachedEntitiesByType(ExecutionEntity.class);
     for (ExecutionEntity executionEntity : cachedExecutions) {
       if(processInstanceId.equals(executionEntity.getProcessInstanceId())) {
         // found one execution from process instance

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetAttachmentCmd.java
Patch:
@@ -35,7 +35,7 @@ public GetAttachmentCmd(String attachmentId) {
 
   public Attachment execute(CommandContext commandContext) {
     return commandContext
-      .getDbEntityManger()
+      .getDbEntityManager()
       .selectById(AttachmentEntity.class, attachmentId);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetAttachmentContentCmd.java
Patch:
@@ -36,7 +36,7 @@ public GetAttachmentContentCmd(String attachmentId) {
   }
 
   public InputStream execute(CommandContext commandContext) {
-    DbEntityManager dbEntityManger = commandContext.getDbEntityManger();
+    DbEntityManager dbEntityManger = commandContext.getDbEntityManager();
     AttachmentEntity attachment = dbEntityManger.selectById(AttachmentEntity.class, attachmentId);
     
     String contentId = attachment.getContentId();

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetPropertiesCmd.java
Patch:
@@ -33,7 +33,7 @@ public class GetPropertiesCmd implements Command<Map<String, String>>, Serializa
   @SuppressWarnings("unchecked")
   public Map<String, String> execute(CommandContext commandContext) {
     List<PropertyEntity> propertyEntities = commandContext
-      .getDbEntityManger()
+      .getDbEntityManager()
       .selectList("selectProperties");
     
     Map<String, String> properties = new HashMap<String, String>();

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetTaskAttachmentContentCmd.java
Patch:
@@ -53,7 +53,7 @@ public InputStream execute(CommandContext commandContext) {
     }
 
     ByteArrayEntity byteArray = commandContext
-        .getDbEntityManger()
+        .getDbEntityManager()
         .selectById(ByteArrayEntity.class, contentId);
 
     byte[] bytes = byteArray.getBytes();

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetUserPictureCmd.java
Patch:
@@ -19,7 +19,6 @@
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.persistence.entity.ByteArrayEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.IdentityInfoEntity;
-import org.camunda.bpm.engine.impl.util.EnsureUtil;
 
 import static org.camunda.bpm.engine.impl.util.EnsureUtil.*;
 
@@ -46,7 +45,7 @@ public Picture execute(CommandContext commandContext) {
     if (pictureInfo != null) {
       String pictureByteArrayId = pictureInfo.getValue();
       if (pictureByteArrayId != null) {
-        ByteArrayEntity byteArray = commandContext.getDbEntityManger()
+        ByteArrayEntity byteArray = commandContext.getDbEntityManager()
           .selectById(ByteArrayEntity.class, pictureByteArrayId);
         return new Picture(byteArray.getBytes(), byteArray.getName());
       }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SaveAttachmentCmd.java
Patch:
@@ -35,7 +35,7 @@ public SaveAttachmentCmd(Attachment attachment) {
 
   public Object execute(CommandContext commandContext) {
     AttachmentEntity updateAttachment = commandContext
-      .getDbEntityManger()
+      .getDbEntityManager()
       .selectById(AttachmentEntity.class, attachment.getId());
     
     updateAttachment.setName(attachment.getName());

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SaveFilterCmd.java
Patch:
@@ -40,12 +40,12 @@ public Filter execute(CommandContext commandContext) {
 
     if (filter.getId() == null) {
       commandContext
-        .getDbEntityManger()
+        .getDbEntityManager()
         .insert(filterEntity);
     }
     else {
       commandContext
-        .getDbEntityManger()
+        .getDbEntityManager()
         .merge(filterEntity);
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SetUserPictureCmd.java
Patch:
@@ -19,7 +19,6 @@
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.persistence.entity.ByteArrayEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.IdentityInfoEntity;
-import org.camunda.bpm.engine.impl.util.EnsureUtil;
 
 import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
 
@@ -57,12 +56,12 @@ public Void execute(CommandContext commandContext) {
       pictureInfo = new IdentityInfoEntity();
       pictureInfo.setUserId(userId);
       pictureInfo.setKey("picture");
-      commandContext.getDbEntityManger().insert(pictureInfo);
+      commandContext.getDbEntityManager().insert(pictureInfo);
     }
 
     ByteArrayEntity byteArrayEntity = new ByteArrayEntity(picture.getMimeType(), picture.getBytes());
 
-    commandContext.getDbEntityManger()
+    commandContext.getDbEntityManager()
       .insert(byteArrayEntity);
 
     pictureInfo.setValue(byteArrayEntity.getId());

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/handler/DbHistoryEventHandler.java
Patch:
@@ -89,7 +89,7 @@ protected void insertHistoricVariableUpdateEntity(HistoricVariableUpdateEventEnt
         ByteArrayEntity byteArrayEntity = new ByteArrayEntity(historyEvent.getVariableName(), byteValue);
         Context
         .getCommandContext()
-        .getDbEntityManger()
+        .getDbEntityManager()
         .insert(byteArrayEntity);
         historyEvent.setByteArrayId(byteArrayEntity.getId());
 
@@ -134,7 +134,7 @@ protected boolean isInitialEvent(String eventType) {
   }
 
   protected DbEntityManager getDbEntityManager() {
-    return Context.getCommandContext().getDbEntityManger();
+    return Context.getCommandContext().getDbEntityManager();
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/CacheAwareHistoryEventProducer.java
Patch:
@@ -90,7 +90,7 @@ protected HistoricIncidentEventEntity loadIncidentEvent(Incident incident) {
   /** find a cached entity by primary key */
   protected <T extends HistoryEvent> T findInCache(Class<T> type, String id) {
     return Context.getCommandContext()
-      .getDbEntityManger()
+      .getDbEntityManager()
       .getCachedEntity(type, id);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -211,7 +211,7 @@ protected HistoryEvent createHistoricVariableEvent(VariableInstanceEntity variab
 
     if(variableInstance.getExecutionId() != null) {
       ExecutionEntity scopeExecution = Context.getCommandContext()
-        .getDbEntityManger()
+        .getDbEntityManager()
         .selectById(ExecutionEntity.class, variableInstance.getExecutionId());
 
       if (variableInstance.getTaskId() == null

File: engine/src/main/java/org/camunda/bpm/engine/impl/interceptor/CommandContext.java
Patch:
@@ -280,7 +280,7 @@ public <T> T getSession(Class<T> sessionClass) {
     return (T) session;
   }
 
-  public DbEntityManager getDbEntityManger() {
+  public DbEntityManager getDbEntityManager() {
     return getSession(DbEntityManager.class);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/deploy/DeploymentCache.java
Patch:
@@ -64,7 +64,7 @@ public void deploy(DeploymentEntity deployment) {
   public ProcessDefinitionEntity findDeployedProcessDefinitionById(String processDefinitionId) {
     ensureNotNull("Invalid process definition id", "processDefinitionId", processDefinitionId);
     CommandContext commandContext = Context.getCommandContext();
-    ProcessDefinitionEntity processDefinition = commandContext.getDbEntityManger().getCachedEntity(ProcessDefinitionEntity.class, processDefinitionId);
+    ProcessDefinitionEntity processDefinition = commandContext.getDbEntityManager().getCachedEntity(ProcessDefinitionEntity.class, processDefinitionId);
     if (processDefinition == null) {
       processDefinition = commandContext
         .getProcessDefinitionManager()
@@ -171,7 +171,7 @@ public CaseDefinitionEntity findDeployedCaseDefinitionById(String caseDefinition
 
     // try to load case definition from cache
     CaseDefinitionEntity caseDefinition = commandContext
-      .getDbEntityManger()
+      .getDbEntityManager()
       .getCachedEntity(CaseDefinitionEntity.class, caseDefinitionId);
 
     if (caseDefinition == null) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -806,7 +806,7 @@ public void remove() {
 
     // finally delete this execution
     Context.getCommandContext()
-      .getDbEntityManger()
+      .getDbEntityManager()
       .delete(this);
   }
 
@@ -879,7 +879,7 @@ public void setReplacedBy(PvmExecutionImpl replacedBy) {
     this.replacedBy = (ExecutionEntity) replacedBy;
 
     CommandContext commandContext = Context.getCommandContext();
-    DbEntityManager dbEntityManger = commandContext.getDbEntityManger();
+    DbEntityManager dbEntityManger = commandContext.getDbEntityManager();
 
     // update the related tasks
     for (TaskEntity task: getTasks()) {
@@ -1065,7 +1065,7 @@ public Object getPersistentState() {
   public void insert() {
     Context
       .getCommandContext()
-      .getDbEntityManger()
+      .getDbEntityManager()
       .insert(this);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricDetailVariableInstanceUpdateEntity.java
Patch:
@@ -58,7 +58,7 @@ public void delete() {
 
     DbEntityManager dbEntityManger = Context
         .getCommandContext()
-        .getDbEntityManger();
+        .getDbEntityManager();
 
     dbEntityManger.delete(this);
 
@@ -102,7 +102,7 @@ public ByteArrayEntity getByteArrayValue() {
       if(Context.getCommandContext() != null) {
         byteArrayValue = Context
           .getCommandContext()
-          .getDbEntityManger()
+          .getDbEntityManager()
           .selectById(ByteArrayEntity.class, byteArrayId);
       }
     }
@@ -122,7 +122,7 @@ public void setByteArrayValue(byte[] bytes) {
       byteArrayValue = new ByteArrayEntity(bytes);
       Context
         .getCommandContext()
-        .getDbEntityManger()
+        .getDbEntityManager()
         .insert(byteArrayValue);
     }
     this.byteArrayValue = byteArrayValue;

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricProcessInstanceManager.java
Patch:
@@ -86,7 +86,7 @@ public void deleteHistoricProcessInstanceById(String historicProcessInstanceId)
           .getHistoricIncidentManager()
           .deleteHistoricIncidentsByProcessInstanceId(historicProcessInstanceId);
 
-      commandContext.getDbEntityManger().delete(HistoricProcessInstanceEntity.class, "deleteHistoricProcessInstance", historicProcessInstanceId);
+      commandContext.getDbEntityManager().delete(HistoricProcessInstanceEntity.class, "deleteHistoricProcessInstance", historicProcessInstanceId);
 
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricTaskInstanceManager.java
Patch:
@@ -161,7 +161,7 @@ public void markTaskInstanceEnded(String taskId, String deleteReason) {
       final HistoryEventHandler eventHandler = configuration.getHistoryEventHandler();
 
       TaskEntity taskEntity = Context.getCommandContext()
-          .getDbEntityManger()
+          .getDbEntityManager()
           .selectById(TaskEntity.class, taskId);
 
       HistoryEvent evt = eventProducer.createTaskInstanceCompleteEvt(taskEntity, deleteReason);

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricVariableInstanceEntity.java
Patch:
@@ -92,7 +92,7 @@ public void delete() {
     deleteByteArrayValue();
     Context
       .getCommandContext()
-      .getDbEntityManger()
+      .getDbEntityManager()
       .delete(this);
   }
 
@@ -152,7 +152,7 @@ public ByteArrayEntity getByteArrayValue() {
       if(Context.getCommandContext() != null) {
         byteArrayValue = Context
           .getCommandContext()
-          .getDbEntityManger()
+          .getDbEntityManager()
           .selectById(ByteArrayEntity.class, byteArrayId);
       }
     }
@@ -166,7 +166,7 @@ public void setByteArrayValue(byte[] bytes) {
       byteArrayValue = new ByteArrayEntity(name, bytes);
       Context
         .getCommandContext()
-        .getDbEntityManger()
+        .getDbEntityManager()
         .insert(byteArrayValue);
     }
     this.byteArrayValue = byteArrayValue;

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/IdentityLinkEntity.java
Patch:
@@ -51,7 +51,7 @@ public static IdentityLinkEntity createAndInsert() {
     IdentityLinkEntity identityLinkEntity = new IdentityLinkEntity();
     Context
       .getCommandContext()
-      .getDbEntityManger()
+      .getDbEntityManager()
       .insert(identityLinkEntity);
     return identityLinkEntity;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/IncidentEntity.java
Patch:
@@ -147,7 +147,7 @@ protected static void insert(IncidentEntity incident) {
     // persist new incident
     Context
       .getCommandContext()
-      .getDbEntityManger()
+      .getDbEntityManager()
       .insert(incident);
 
     incident.fireHistoricIncidentEvent(HistoryEvent.INCIDENT_CREATE);
@@ -191,7 +191,7 @@ protected void remove(boolean resolved) {
     // always delete the incident
     Context
       .getCommandContext()
-      .getDbEntityManger()
+      .getDbEntityManager()
       .delete(this);
 
     // update historic incident

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ProcessDefinitionEntity.java
Patch:
@@ -171,7 +171,7 @@ public void deleteIdentityLink(String userId, String groupId) {
     for (IdentityLinkEntity identityLink: identityLinks) {
       Context
         .getCommandContext()
-        .getDbEntityManger()
+        .getDbEntityManager()
         .delete(identityLink);
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/test/TestHelper.java
Patch:
@@ -147,7 +147,7 @@ public Object execute(CommandContext commandContext) {
             PersistenceSession persistenceSession = commandContext.getSession(PersistenceSession.class);
             persistenceSession.dbSchemaDrop();
             persistenceSession.dbSchemaCreate();
-            SchemaOperationsProcessEngineBuild.dbCreateHistoryLevel(commandContext.getDbEntityManger());
+            SchemaOperationsProcessEngineBuild.dbCreateHistoryLevel(commandContext.getDbEntityManager());
             return null;
           }
         });
@@ -252,7 +252,7 @@ public static void createOrUpdateHistoryLevel(final ProcessEngineConfigurationIm
     processEngineConfiguration.getCommandExecutorTxRequired()
       .execute(new Command<Object>() {
        public Object execute(CommandContext commandContext) {
-         DbEntityManager dbEntityManager = commandContext.getDbEntityManger();
+         DbEntityManager dbEntityManager = commandContext.getDbEntityManager();
          PropertyEntity historyLevelProperty = dbEntityManager.selectById(PropertyEntity.class, "historyLevel");
          if (historyLevelProperty != null) {
            if (processEngineConfiguration.getHistoryLevel() != new Integer(historyLevelProperty.getValue())) {
@@ -271,7 +271,7 @@ public static void deleteHistoryLevel(ProcessEngineConfigurationImpl processEngi
     processEngineConfiguration.getCommandExecutorTxRequired()
       .execute(new Command<Object>() {
        public Object execute(CommandContext commandContext) {
-         DbEntityManager dbEntityManager = commandContext.getDbEntityManger();
+         DbEntityManager dbEntityManager = commandContext.getDbEntityManager();
          PropertyEntity historyLevelProperty = dbEntityManager.selectById(PropertyEntity.class, "historyLevel");
          if (historyLevelProperty != null) {
            dbEntityManager.delete(historyLevelProperty);

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/JobQueryTest.java
Patch:
@@ -470,7 +470,7 @@ private void setRetries(final String processInstanceId, final int retries) {
     commandExecutor.execute(new Command<Void>() {
 
       public Void execute(CommandContext commandContext) {
-        JobEntity timer = commandContext.getDbEntityManger().selectById(JobEntity.class, job.getId());
+        JobEntity timer = commandContext.getDbEntityManager().selectById(JobEntity.class, job.getId());
         timer.setRetries(retries);
         return null;
       }
@@ -594,7 +594,7 @@ public Void execute(CommandContext commandContext) {
 
           for (HistoricIncident historicIncident : historicIncidents) {
             commandContext
-              .getDbEntityManger()
+              .getDbEntityManager()
               .delete((DbEntity) historicIncident);
           }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/DbDeadlockTests.java
Patch:
@@ -82,7 +82,7 @@ public TestCommand(String id) {
     }
 
     public Void execute(CommandContext commandContext) {
-      final DbEntityManager dbEntityManger = commandContext.getDbEntityManger();
+      final DbEntityManager dbEntityManger = commandContext.getDbEntityManager();
       final DbEntityManagerFactory dbEntityManagerFactory = new DbEntityManagerFactory(Context.getProcessEngineConfiguration().getIdGenerator());
 
       HistoricProcessInstanceEventEntity hpi = new HistoricProcessInstanceEventEntity();
@@ -118,9 +118,9 @@ protected void tearDown() throws Exception {
       .execute(new Command<Void>() {
 
         public Void execute(CommandContext commandContext) {
-          List<HistoricProcessInstance> list = commandContext.getDbEntityManger().createHistoricProcessInstanceQuery().list();
+          List<HistoricProcessInstance> list = commandContext.getDbEntityManager().createHistoricProcessInstanceQuery().list();
           for (HistoricProcessInstance historicProcessInstance : list) {
-            commandContext.getDbEntityManger().delete(HistoricProcessInstanceEventEntity.class, "deleteHistoricProcessInstance", historicProcessInstance.getId());
+            commandContext.getDbEntityManager().delete(HistoricProcessInstanceEventEntity.class, "deleteHistoricProcessInstance", historicProcessInstance.getId());
           }
           return null;
         }

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/JobExecutorCmdExceptionTest.java
Patch:
@@ -175,7 +175,7 @@ public Void execute(CommandContext commandContext) {
 
         for (HistoricIncident historicIncident : historicIncidents) {
           commandContext
-            .getDbEntityManger()
+            .getDbEntityManager()
             .delete((DbEntity) historicIncident);
         }
 

File: distro/jbossas7/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/deployment/processor/ProcessApplicationDeploymentProcessor.java
Patch:
@@ -102,7 +102,7 @@ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitPro
         Map<String, byte[]> deploymentResources = getDeploymentResources(processArchive, deploymentUnit, processesXmlWrapper.getProcessesXmlFile());
 
         // add the deployment service for each process archive we deploy.
-        ProcessApplicationDeploymentService deploymentService = new ProcessApplicationDeploymentService(deploymentResources, processArchive);
+        ProcessApplicationDeploymentService deploymentService = new ProcessApplicationDeploymentService(deploymentResources, processArchive, module);
         String processArachiveName = processArchive.getName();
         if(processArachiveName == null) {
           // use random name for deployment service if name is null (we cannot ask the process application yet since the component might not be up.

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/deployment/processor/ProcessApplicationDeploymentProcessor.java
Patch:
@@ -102,7 +102,7 @@ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitPro
         Map<String, byte[]> deploymentResources = getDeploymentResources(processArchive, deploymentUnit, processesXmlWrapper.getProcessesXmlFile());
 
         // add the deployment service for each process archive we deploy.
-        ProcessApplicationDeploymentService deploymentService = new ProcessApplicationDeploymentService(deploymentResources, processArchive);
+        ProcessApplicationDeploymentService deploymentService = new ProcessApplicationDeploymentService(deploymentResources, processArchive, module);
         String processArachiveName = processArchive.getName();
         if(processArachiveName == null) {
           // use random name for deployment service if name is null (we cannot ask the process application yet since the component might not be up.

File: engine/src/main/java/org/camunda/bpm/engine/delegate/ProcessEngineVariableType.java
Patch:
@@ -129,7 +129,7 @@
  *   </tr>
  *
  *   <tr>
- *   <td>SpinSerialization</td>
+ *   <td>spin-serialization</td>
  *   <td>&lt;Custom Class&gt;</td>
  *   <td>String</td>
  *   <td>

File: engine/src/main/java/org/camunda/bpm/engine/delegate/ProcessEngineVariableType.java
Patch:
@@ -258,7 +258,7 @@ public interface ProcessEngineVariableType {
    * {@link SPIN_TYPE_CONFIG_ROOT_TYPE}</li>
    * </ul>
    */
-  public static final ProcessEngineVariableType SPIN = new DefaultProcessEngineVariableType("SpinSerialization");
+  public static final ProcessEngineVariableType SPIN = new DefaultProcessEngineVariableType("spin-serialization");
 
 
   /**

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/AbstractHistoricDetailRestServiceInteractionTest.java
Patch:
@@ -80,6 +80,7 @@ public void testGetSingleDetail() {
       .body("id", equalTo(builder.getId()))
       .body("variableName", equalTo(builder.getName()))
       .body("variableTypeName", equalTo(builder.getValueTypeName()))
+      .body("typeName", equalTo(builder.getTypeName()))
       .body("value", equalTo(builder.getValue()))
       .body("processInstanceId", equalTo(builder.getProcessInstanceId()))
       .body("errorMessage", equalTo(builder.getErrorMessage()))

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/async/AsyncStartEventTest.java
Patch:
@@ -100,7 +100,7 @@ public void testAsyncStartEventVariableHistory() {
       assertNotNull(variable);
       assertEquals("foo", variable.getVariableName());
       assertEquals("bar", variable.getValue());
-      assertEquals(processInstanceId, variable.getActivtyInstanceId());
+      assertEquals(processInstanceId, variable.getActivityInstanceId());
 
       if(processEngineConfiguration.getHistoryLevel() > ProcessEngineConfigurationImpl.HISTORYLEVEL_AUDIT) {
 
@@ -175,7 +175,7 @@ public void testMultipleAsyncStartEventsVariableHistory() {
       assertNotNull(variable);
       assertEquals("foo", variable.getVariableName());
       assertEquals("bar", variable.getValue());
-      assertEquals(processInstanceId, variable.getActivtyInstanceId());
+      assertEquals(processInstanceId, variable.getActivityInstanceId());
 
       if(processEngineConfiguration.getHistoryLevel() > ProcessEngineConfigurationImpl.HISTORYLEVEL_AUDIT) {
 
@@ -255,7 +255,7 @@ public void FAILING_testSubmitForm() {
       assertNotNull(variable);
       assertEquals("foo", variable.getVariableName());
       assertEquals("bar", variable.getValue());
-      assertEquals(processInstanceId, variable.getActivtyInstanceId());
+      assertEquals(processInstanceId, variable.getActivityInstanceId());
 
       if(processEngineConfiguration.getHistoryLevel() > ProcessEngineConfigurationImpl.HISTORYLEVEL_AUDIT) {
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/VariableInstanceQueryTest.java
Patch:
@@ -2229,23 +2229,21 @@ public void testDisableCustomObjectDeserialization() {
 
     for (VariableInstance variableInstance : results) {
       if(variableInstance.getName().equals("customSerializable")) {
-        assertNull(variableInstance.getValue());
         assertNull(variableInstance.getErrorMessage());
 
         SerializedVariableValue serializedValue = variableInstance.getSerializedValue();
         assertNotNull(serializedValue);
         assertNotNull(serializedValue.getValue());
       }
       if(variableInstance.getName().equals("failingSerializable")) {
-        // no value was fetched
-        assertNull(variableInstance.getValue());
         // no error message is present
         assertNull(variableInstance.getErrorMessage());
 
         SerializedVariableValue serializedValue = variableInstance.getSerializedValue();
         assertNotNull(serializedValue);
         assertNotNull(serializedValue.getValue());
       }
+
     }
 
     // delete task

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricVariableInstanceTest.java
Patch:
@@ -514,16 +514,13 @@ public void testDisableCustomObjectDeserialization() {
 
     for (HistoricVariableInstance variableInstance : variableInstances) {
       if(variableInstance.getName().equals("customSerializable")) {
-        assertNull(variableInstance.getValue());
         assertNull(variableInstance.getErrorMessage());
 
         SerializedVariableValue serializedValue = variableInstance.getSerializedValue();
         assertNotNull(serializedValue);
         assertNotNull(serializedValue.getValue());
       }
       if(variableInstance.getName().equals("failingSerializable")) {
-        // no value was fetched
-        assertNull(variableInstance.getValue());
         // no error message is present
         assertNull(variableInstance.getErrorMessage());
 

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/history/FullHistoryTest.java
Patch:
@@ -1374,16 +1374,13 @@ public void testDisableCustomObjectDeserialization() {
     for (HistoricDetail detail : results) {
       HistoricVariableUpdate update = (HistoricVariableUpdate) detail;
       if(update.getVariableName().equals("customSerializable")) {
-        assertNull(update.getValue());
         assertNull(update.getErrorMessage());
 
         SerializedVariableValue serializedValue = update.getSerializedValue();
         assertNotNull(serializedValue);
         assertNotNull(serializedValue.getValue());
       }
       if(update.getVariableName().equals("failingSerializable")) {
-        // no value was fetched
-        assertNull(update.getValue());
         // no error message is present
         assertNull(update.getErrorMessage());
 

File: engine/src/test/java/org/camunda/bpm/engine/test/variables/VariableDataFormatTest.java
Patch:
@@ -440,7 +440,6 @@ public void testDisabledDeserialization() {
 
     // then
     assertNotNull(instance);
-    assertNull(instance.getValue());
     assertNotNull(instance.getSerializedValue());
     assertNotNull(instance.getSerializedValue().getValue());
 

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractMessageRestServiceTest.java
Patch:
@@ -374,7 +374,7 @@ public void testFailingDueToNotSupportedTypeInCorrelationKeys() {
     given().contentType(POST_JSON_CONTENT_TYPE).body(messageParameters)
     .then().expect().statusCode(Status.BAD_REQUEST.getStatusCode())
     .body("type", equalTo(RestException.class.getSimpleName()))
-    .body("message", equalTo("Cannot deliver a message: The variable type 'X' is not supported."))
+    .body("message", equalTo("Cannot deliver a message: The value type 'X' is not supported."))
     .when().post(MESSAGE_URL);
   }
 
@@ -500,7 +500,7 @@ public void testFailingDueToNotSupportedTypeInProcessVariables() {
     given().contentType(POST_JSON_CONTENT_TYPE).body(messageParameters)
     .then().expect().statusCode(Status.BAD_REQUEST.getStatusCode())
     .body("type", equalTo(RestException.class.getSimpleName()))
-    .body("message", equalTo("Cannot deliver a message: The variable type 'X' is not supported."))
+    .body("message", equalTo("Cannot deliver a message: The value type 'X' is not supported."))
     .when().post(MESSAGE_URL);
   }
 }

File: spin/core/src/test/java/org/camunda/spin/xml/dom/XmlDomAttributeTest.java
Patch:
@@ -89,7 +89,7 @@ public void canWriteToStream() throws IOException {
     OutputStream outputStream = attribute.toStream();
     attribute.writeToStream(outputStream);
     InputStream inputStream = SpinIoUtil.convertOutputStreamToInputStream(outputStream);
-    String value = SpinIoUtil.getStringFromInputStream(inputStream, false);
+    String value = SpinIoUtil.getStringFromInputStream(inputStream);
     assertThat(value).isEqualTo("order1order1");
   }
 

File: spin/core/src/main/java/org/camunda/spin/scripting/SpinScriptEnv.java
Patch:
@@ -13,7 +13,7 @@
 package org.camunda.spin.scripting;
 
 import org.camunda.spin.SpinScriptException;
-import org.camunda.spin.impl.util.IoUtil;
+import org.camunda.spin.impl.util.SpinIoUtil;
 import org.camunda.spin.logging.SpinCoreLogger;
 import org.camunda.spin.logging.SpinLogger;
 
@@ -94,10 +94,10 @@ protected static String loadScriptEnv(String language, String extension) {
 
     } else {
       try {
-        return IoUtil.inputStreamAsString(envResource);
+        return SpinIoUtil.inputStreamAsString(envResource);
 
       } finally {
-        IoUtil.closeSilently(envResource);
+        SpinIoUtil.closeSilently(envResource);
 
       }
     }

File: spin/core/src/test/java/org/camunda/spin/json/tree/JsonJacksonTreeDataFormatReaderTest.java
Patch:
@@ -19,10 +19,11 @@
 
 import org.camunda.spin.DataFormats;
 import org.camunda.spin.impl.json.tree.JsonJacksonTreeDataFormatReader;
-import org.camunda.spin.impl.util.IoUtil;
+import org.camunda.spin.impl.util.SpinIoUtil;
 import org.camunda.spin.impl.util.RewindableInputStream;
 import static org.camunda.spin.json.JsonTestConstants.EXAMPLE_JSON;
 import static org.camunda.spin.json.JsonTestConstants.EXAMPLE_JSON_COLLECTION;
+
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -67,7 +68,7 @@ public void shouldNotMatchInvalidJson() throws IOException {
   }
   
   public RewindableInputStream stringToStream(String input) {
-    InputStream stream = IoUtil.stringAsInputStream(input);
+    InputStream stream = SpinIoUtil.stringAsInputStream(input);
     return new RewindableInputStream(stream, REWINDING_LIMIT);
   }
   

File: spin/core/src/test/java/org/camunda/spin/json/tree/JsonTreeCreateTest.java
Patch:
@@ -19,7 +19,7 @@
 import static org.camunda.spin.Spin.JSON;
 import static org.camunda.spin.Spin.S;
 import static org.camunda.spin.Spin.XML;
-import static org.camunda.spin.impl.util.IoUtil.stringAsInputStream;
+import static org.camunda.spin.impl.util.SpinIoUtil.stringAsInputStream;
 import static org.camunda.spin.json.JsonTestConstants.EXAMPLE_EMPTY_STRING;
 import static org.camunda.spin.json.JsonTestConstants.EXAMPLE_INVALID_JSON;
 import static org.camunda.spin.json.JsonTestConstants.EXAMPLE_JSON;

File: spin/core/src/test/java/org/camunda/spin/xml/dom/XmlDomAttributeTest.java
Patch:
@@ -13,7 +13,7 @@
 
 package org.camunda.spin.xml.dom;
 
-import org.camunda.spin.impl.util.IoUtil;
+import org.camunda.spin.impl.util.SpinIoUtil;
 import org.camunda.spin.xml.XmlTestConstants;
 import org.camunda.spin.xml.tree.SpinXmlTreeAttribute;
 import org.camunda.spin.xml.tree.SpinXmlTreeAttributeException;
@@ -88,8 +88,8 @@ public void canWriteToString() {
   public void canWriteToStream() throws IOException {
     OutputStream outputStream = attribute.toStream();
     attribute.writeToStream(outputStream);
-    InputStream inputStream = IoUtil.convertOutputStreamToInputStream(outputStream);
-    String value = IoUtil.getStringFromInputStream(inputStream);
+    InputStream inputStream = SpinIoUtil.convertOutputStreamToInputStream(outputStream);
+    String value = SpinIoUtil.getStringFromInputStream(inputStream);
     assertThat(value).isEqualTo("order1order1");
   }
 

File: spin/core/src/test/java/org/camunda/spin/xml/dom/XmlDomCreateTest.java
Patch:
@@ -22,7 +22,7 @@
 import static org.camunda.spin.DataFormats.xmlDom;
 import static org.camunda.spin.Spin.S;
 import static org.camunda.spin.Spin.XML;
-import static org.camunda.spin.impl.util.IoUtil.stringAsInputStream;
+import static org.camunda.spin.impl.util.SpinIoUtil.stringAsInputStream;
 import static org.camunda.spin.xml.XmlTestConstants.*;
 
 /**

File: spin/core/src/test/java/org/camunda/spin/xml/dom/XmlDomDataFormatReaderTest.java
Patch:
@@ -18,7 +18,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 
-import org.camunda.spin.impl.util.IoUtil;
+import org.camunda.spin.impl.util.SpinIoUtil;
 import org.camunda.spin.impl.util.RewindableInputStream;
 import org.camunda.spin.impl.xml.dom.XmlDomDataFormatReader;
 import org.junit.After;
@@ -61,7 +61,7 @@ public void shouldNotMatchInvalidXml() throws IOException {
   }
   
   public RewindableInputStream stringToStream(String input) {
-    InputStream stream = IoUtil.stringAsInputStream(input);
+    InputStream stream = SpinIoUtil.stringAsInputStream(input);
     return new RewindableInputStream(stream, REWINDING_LIMIT);
   }
   

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/VariableInstanceRestServiceImpl.java
Patch:
@@ -56,6 +56,9 @@ public List<VariableInstanceDto> queryVariableInstances(VariableInstanceQueryDto
     // disable binary fetching by default.
     query.disableBinaryFetching();
 
+    // disable custom object fetching by default.
+    query.disableCustomObjectDeserialization();
+
     List<VariableInstance> matchingInstances;
     if (firstResult != null || maxResults != null) {
       matchingInstances = executePaginatedQuery(query, firstResult, maxResults);

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/history/HistoricDetailRestServiceImpl.java
Patch:
@@ -48,6 +48,7 @@ public List<HistoricDetailDto> getHistoricDetails(UriInfo uriInfo, Integer first
     HistoricDetailQueryDto queryDto = new HistoricDetailQueryDto(uriInfo.getQueryParameters());
     HistoricDetailQuery query = queryDto.toQuery(processEngine);
     query.disableBinaryFetching();
+    query.disableCustomObjectDeserialization();
 
     List<HistoricDetail> queryResult;
     if (firstResult != null || maxResults != null) {

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/history/HistoricVariableInstanceRestServiceImpl.java
Patch:
@@ -49,6 +49,7 @@ public List<HistoricVariableInstanceDto> getHistoricVariableInstances(UriInfo ur
   public List<HistoricVariableInstanceDto> queryHistoricVariableInstances(HistoricVariableInstanceQueryDto queryDto, Integer firstResult, Integer maxResults) {
     HistoricVariableInstanceQuery query = queryDto.toQuery(processEngine);
     query.disableBinaryFetching();
+    query.disableCustomObjectDeserialization();
 
     List<HistoricVariableInstance> matchingHistoricVariableInstances;
     if (firstResult != null || maxResults != null) {

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/history/impl/HistoricDetailResourceImpl.java
Patch:
@@ -42,6 +42,7 @@ public HistoricDetailResourceImpl(String detailId, ProcessEngine engine) {
   public HistoricDetailDto getDetail() {
     HistoricDetail detail = baseQuery()
       .disableBinaryFetching()
+      .disableCustomObjectDeserialization()
       .singleResult();
     if(detail != null) {
       return HistoricDetailDto.fromHistoricDetail(detail);
@@ -54,6 +55,7 @@ public HistoricDetailDto getDetail() {
 
   public InputStream getBinaryVariable() {
     HistoricDetail variableInstance = baseQuery()
+        .disableCustomObjectDeserialization()
         .singleResult();
     if(variableInstance == null) {
       throw new InvalidRequestException(Status.NOT_FOUND, "Historic detail with Id '"+detailId + "' does not exist.");

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/history/impl/HistoricVariableInstanceResourceImpl.java
Patch:
@@ -41,6 +41,7 @@ public HistoricVariableInstanceResourceImpl(String variableId, ProcessEngine eng
   public HistoricVariableInstanceDto getVariable() {
     HistoricVariableInstance variableInstance = baseQuery()
       .disableBinaryFetching()
+      .disableCustomObjectDeserialization()
       .singleResult();
     if(variableInstance != null) {
       return HistoricVariableInstanceDto.fromHistoricVariableInstance(variableInstance);
@@ -53,6 +54,7 @@ public HistoricVariableInstanceDto getVariable() {
 
   public InputStream getBinaryVariable() {
     HistoricVariableInstance variableInstance = baseQuery()
+        .disableCustomObjectDeserialization()
         .singleResult();
     if(variableInstance != null) {
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/runtime/impl/VariableInstanceResourceImpl.java
Patch:
@@ -41,6 +41,7 @@ public VariableInstanceResourceImpl(String variableId, ProcessEngine engine) {
   public VariableInstanceDto getVariable() {
     VariableInstance variableInstance = baseQuery()
       .disableBinaryFetching()
+      .disableCustomObjectDeserialization()
       .singleResult();
     if(variableInstance != null) {
       return VariableInstanceDto.fromVariableInstance(variableInstance);
@@ -53,6 +54,7 @@ public VariableInstanceDto getVariable() {
 
   public InputStream getBinaryVariable() {
     VariableInstance variableInstance = baseQuery()
+        .disableCustomObjectDeserialization()
         .singleResult();
     if(variableInstance != null) {
 

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/AbstractHistoricDetailRestServiceQueryTest.java
Patch:
@@ -111,6 +111,7 @@ public void testNoParametersQuery() {
 
     verify(mockedQuery).list();
     verify(mockedQuery).disableBinaryFetching();
+    verify(mockedQuery).disableCustomObjectDeserialization();
     verifyNoMoreInteractions(mockedQuery);
   }
 

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/AbstractHistoricVariableInstanceRestServiceQueryTest.java
Patch:
@@ -87,6 +87,7 @@ public void testNoParametersQuery() {
 
     verify(mockedQuery).list();
     verify(mockedQuery).disableBinaryFetching();
+    verify(mockedQuery).disableCustomObjectDeserialization();
     verifyNoMoreInteractions(mockedQuery);
   }
 
@@ -102,6 +103,7 @@ public void testNoParametersQueryAsPost() {
 
     verify(mockedQuery).list();
     verify(mockedQuery).disableBinaryFetching();
+    verify(mockedQuery).disableCustomObjectDeserialization();
     verifyNoMoreInteractions(mockedQuery);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/SerializableType.java
Patch:
@@ -46,7 +46,7 @@ public Object getValue(ValueFields valueFields) {
       return cachedObject;
     }
     byte[] bytes = (byte[]) super.getValue(valueFields);
-    if(bytes != null) {
+    if(bytes != null && Context.getCommandContext() != null) {
       ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
       Object deserializedObject;
       try {

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/history/impl/HistoricDetailResourceImpl.java
Patch:
@@ -62,7 +62,7 @@ public InputStream getBinaryVariable() {
       throw new InvalidRequestException(Status.BAD_REQUEST, "Historic detail with Id '"+detailId + "' is not a variable update.");
 
     } else {
-      Object value = ((HistoricVariableUpdate) variableInstance).getValue();
+      Object value = ((HistoricVariableUpdate) variableInstance).getSerializedValue().getValue();
       if(value instanceof byte[]) {
         return new ByteArrayInputStream((byte[]) value);
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/history/impl/HistoricVariableInstanceResourceImpl.java
Patch:
@@ -56,7 +56,7 @@ public InputStream getBinaryVariable() {
         .singleResult();
     if(variableInstance != null) {
 
-      Object value = variableInstance.getValue();
+      Object value = variableInstance.getSerializedValue().getValue();
       if(value instanceof byte[]) {
         return new ByteArrayInputStream((byte[]) value);
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/runtime/impl/VariableInstanceResourceImpl.java
Patch:
@@ -56,7 +56,7 @@ public InputStream getBinaryVariable() {
         .singleResult();
     if(variableInstance != null) {
 
-      Object value = variableInstance.getValue();
+      Object value = variableInstance.getSerializedValue().getValue();
       if(value instanceof byte[]) {
         return new ByteArrayInputStream((byte[]) value);
 

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractProcessDefinitionRestServiceInteractionTest.java
Patch:
@@ -558,7 +558,7 @@ public void testGetStartFormVariables() {
         .statusCode(Status.OK.getStatusCode()).contentType(ContentType.JSON)
         .body(MockProvider.EXAMPLE_VARIABLE_INSTANCE_NAME+".id", equalTo(MockProvider.EXAMPLE_VARIABLE_INSTANCE_ID))
         .body(MockProvider.EXAMPLE_VARIABLE_INSTANCE_NAME+".name", equalTo(MockProvider.EXAMPLE_VARIABLE_INSTANCE_NAME))
-        .body(MockProvider.EXAMPLE_VARIABLE_INSTANCE_NAME+".type", equalTo(MockProvider.EXAMPLE_VARIABLE_INSTANCE_TYPE))
+        .body(MockProvider.EXAMPLE_VARIABLE_INSTANCE_NAME+".type", equalTo(MockProvider.STRING_VARIABLE_INSTANCE_TYPE))
       .when().get(START_FORM_VARIABLES_URL)
       .body();
 

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractProcessEngineRestServiceTest.java
Patch:
@@ -287,7 +287,7 @@ private void createHistoricProcessInstanceMock() {
 
   private void createHistoricVariableInstanceMock() {
     List<HistoricVariableInstance> variables = new ArrayList<HistoricVariableInstance>();
-    HistoricVariableInstance mockInstance = MockProvider.createMockHistoricVariableInstance();
+    HistoricVariableInstance mockInstance = MockProvider.mockHistoricVariableInstance().build();
     variables.add(mockInstance);
 
     HistoricVariableInstanceQuery mockHistoricVariableInstanceQuery = mock(HistoricVariableInstanceQuery.class);

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractTaskRestServiceInteractionTest.java
Patch:
@@ -650,7 +650,7 @@ public void testGetTaskFormVariables() {
         .statusCode(Status.OK.getStatusCode()).contentType(ContentType.JSON)
         .body(MockProvider.EXAMPLE_VARIABLE_INSTANCE_NAME+".id", equalTo(MockProvider.EXAMPLE_VARIABLE_INSTANCE_ID))
         .body(MockProvider.EXAMPLE_VARIABLE_INSTANCE_NAME+".name", equalTo(MockProvider.EXAMPLE_VARIABLE_INSTANCE_NAME))
-        .body(MockProvider.EXAMPLE_VARIABLE_INSTANCE_NAME+".type", equalTo(MockProvider.EXAMPLE_VARIABLE_INSTANCE_TYPE))
+        .body(MockProvider.EXAMPLE_VARIABLE_INSTANCE_NAME+".type", equalTo(MockProvider.STRING_VARIABLE_INSTANCE_TYPE))
       .when().get(FORM_VARIABLES_URL)
       .body();
 

File: engine/src/main/java/org/camunda/bpm/engine/history/HistoricVariableUpdate.java
Patch:
@@ -25,6 +25,8 @@ public interface HistoricVariableUpdate extends HistoricDetail {
   String getVariableName();
   String getVariableTypeName();
   Object getValue();
+  String getValueTypeName();
+  boolean storesCustomObjects();
   int getRevision();
 
   /**

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/BooleanType.java
Patch:
@@ -58,7 +58,7 @@ public boolean isAbleToStore(Object value) {
            || boolean.class.isAssignableFrom(value.getClass());
   }
 
-  public String getTypeNameForValue(Object value) {
+  public String getTypeNameForValue(ValueFields valueFields) {
     // typename independent of value
     return Boolean.class.getSimpleName();
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/ByteArrayType.java
Patch:
@@ -58,7 +58,7 @@ public boolean isAbleToStore(Object value) {
     return byte[].class.isAssignableFrom(value.getClass());
   }
 
-  public String getTypeNameForValue(Object value) {
-    return "Binary";
+  public String getTypeNameForValue(ValueFields valueFields) {
+    return byte[].class.getSimpleName();
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/DoubleType.java
Patch:
@@ -45,7 +45,7 @@ public boolean isAbleToStore(Object value) {
     return Double.class.isAssignableFrom(value.getClass());
   }
 
-  public String getTypeNameForValue(Object value) {
+  public String getTypeNameForValue(ValueFields valueFields) {
     // typename independent of value
     return Double.class.getSimpleName();
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/IntegerType.java
Patch:
@@ -55,7 +55,7 @@ public boolean isAbleToStore(Object value) {
            || int.class.isAssignableFrom(value.getClass());
   }
 
-  public String getTypeNameForValue(Object value) {
+  public String getTypeNameForValue(ValueFields valueFields) {
     // typename independent of value
     return Integer.class.getSimpleName();
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/LongType.java
Patch:
@@ -51,7 +51,7 @@ public boolean isAbleToStore(Object value) {
            || long.class.isAssignableFrom(value.getClass());
   }
 
-  public String getTypeNameForValue(Object value) {
+  public String getTypeNameForValue(ValueFields valueFields) {
     // typename independent of value
     return Long.class.getSimpleName();
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/NullType.java
Patch:
@@ -41,7 +41,7 @@ public boolean isAbleToStore(Object value) {
   public void setValue(Object value, ValueFields valueFields) {
   }
 
-  public String getTypeNameForValue(Object value) {
+  public String getTypeNameForValue(ValueFields valueFields) {
     return "Null";
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/ShortType.java
Patch:
@@ -55,7 +55,7 @@ public boolean isAbleToStore(Object value) {
            || short.class.isAssignableFrom(value.getClass());
   }
 
-  public String getTypeNameForValue(Object value) {
+  public String getTypeNameForValue(ValueFields valueFields) {
     // typename independent of value
     return Short.class.getSimpleName();
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/StringType.java
Patch:
@@ -45,7 +45,7 @@ public boolean isAbleToStore(Object value) {
     return String.class.isAssignableFrom(value.getClass());
   }
 
-  public String getTypeNameForValue(Object value) {
+  public String getTypeNameForValue(ValueFields valueFields) {
     // typename independent of value
     return String.class.getSimpleName();
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/VariableType.java
Patch:
@@ -30,18 +30,19 @@ public interface VariableType {
   String getTypeName();
 
   /**
-   * <p>Returns the type name (i.e. the simple class name) of the passed value.</p>
+   * <p>Returns the type name (i.e. the simple class name) of the stored value.</p>
    *
    * <p><strong>Note:</strong>For a serializable value only the type name "Serializable"
    * will currently be returned and not the simple class name of the passed value.</p>
    */
-  String getTypeNameForValue(Object value);
+  String getTypeNameForValue(ValueFields valueFields);
   boolean isCachable();
   boolean isAbleToStore(Object value);
   void setValue(Object value, ValueFields valueFields);
   Object getValue(ValueFields valueFields);
   SerializedVariableValue getSerializedValue(ValueFields valueFields);
   void setValueFromSerialized(Object serializedValue, Map<String, Object> configuration, ValueFields valueFields);
   boolean isAbleToStoreSerializedValue(Object value, Map<String, Object> configuration);
+  boolean storesCustomObjects();
 
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/variables/VariableDataFormatTest.java
Patch:
@@ -264,6 +264,8 @@ public void testGetSerializedVariableValue() throws JSONException {
     VariableInstance beanVariable = runtimeService.createVariableInstanceQuery().singleResult();
     assertNotNull(beanVariable);
     assertEquals(ProcessEngineVariableType.SPIN.getName(), beanVariable.getTypeName());
+    assertEquals(Object.class.getSimpleName(), beanVariable.getValueTypeName());
+    assertTrue(beanVariable.storesCustomObjects());
 
     SerializedVariableValue serializedVariable = beanVariable.getSerializedValue();
 

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/deployment/processor/ProcessApplicationDeploymentProcessor.java
Patch:
@@ -15,14 +15,14 @@
 import org.camunda.bpm.application.ProcessApplicationInterface;
 import org.camunda.bpm.application.impl.metadata.spi.ProcessArchiveXml;
 import org.camunda.bpm.application.impl.metadata.spi.ProcessesXml;
+import org.camunda.bpm.container.impl.deployment.scanning.VfsProcessApplicationScanner;
 import org.camunda.bpm.container.impl.jboss.deployment.marker.ProcessApplicationAttachments;
 import org.camunda.bpm.container.impl.jboss.service.MscManagedProcessApplication;
 import org.camunda.bpm.container.impl.jboss.service.ProcessApplicationDeploymentService;
 import org.camunda.bpm.container.impl.jboss.service.ProcessApplicationStartService;
 import org.camunda.bpm.container.impl.jboss.service.ServiceNames;
 import org.camunda.bpm.container.impl.jboss.util.JBossCompatibilityExtension;
 import org.camunda.bpm.container.impl.jboss.util.ProcessesXmlWrapper;
-import org.camunda.bpm.container.impl.jmx.deployment.scanning.VfsProcessApplicationScanner;
 import org.camunda.bpm.container.impl.metadata.PropertyHelper;
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.impl.util.IoUtil;

File: distro/wildfly/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/service/ProcessApplicationStartService.java
Patch:
@@ -30,7 +30,7 @@
 import org.camunda.bpm.application.ProcessApplicationInterface;
 import org.camunda.bpm.application.impl.ProcessApplicationDeploymentInfoImpl;
 import org.camunda.bpm.application.impl.ProcessApplicationInfoImpl;
-import org.camunda.bpm.container.impl.jmx.deployment.util.InjectionUtil;
+import org.camunda.bpm.container.impl.deployment.util.InjectionUtil;
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.repository.ProcessApplicationDeployment;

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/management/JobDefinitionSuspensionStateDto.java
Patch:
@@ -70,7 +70,7 @@ public void updateSuspensionState(ProcessEngine engine) {
 
     Date delayedExecutionDate = null;
     if (executionDate != null && !executionDate.equals("")) {
-      delayedExecutionDate = DateTimeUtil.parseDateTime(executionDate).toDate();
+      delayedExecutionDate = DateTimeUtil.parseDate(executionDate);
     }
 
     if (jobDefinitionId != null) {

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/repository/ProcessDefinitionSuspensionStateDto.java
Patch:
@@ -61,7 +61,7 @@ public void updateSuspensionState(ProcessEngine engine) {
 
     Date delayedExecutionDate = null;
     if (executionDate != null && !executionDate.equals("")) {
-      delayedExecutionDate = DateTimeUtil.parseDateTime(executionDate).toDate();
+      delayedExecutionDate = DateTimeUtil.parseDate(executionDate);
     }
 
     if (processDefinitionId != null) {

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractDeploymentRestServiceInteractionTest.java
Patch:
@@ -298,7 +298,7 @@ private void verifyDeploymentValues(Deployment mockDeployment, String responseCo
     JsonPath path = from(responseContent);
     String returnedId = path.get("id");
     String returnedName = path.get("name");
-    Date returnedDeploymentTime = DateTimeUtil.parseDateTime(path.<String>get("deploymentTime")).toDate();
+    Date returnedDeploymentTime = DateTimeUtil.parseDate(path.<String>get("deploymentTime"));
 
     assertEquals(mockDeployment.getId(), returnedId);
     assertEquals(mockDeployment.getName(), returnedName);

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractJobRestServiceQueryTest.java
Patch:
@@ -132,7 +132,7 @@ public void testSimpleJobQuery() {
 		String returnedExecutionId = from(content).getString("[0].executionId");
 		String returnedExceptionMessage = from(content).getString("[0].exceptionMessage");
 		int returnedRetries = from(content).getInt("[0].retries");
-		Date returnedDueDate = DateTimeUtil.parseDateTime(from(content).getString("[0].dueDate")).toDate();
+		Date returnedDueDate = DateTimeUtil.parseDate(from(content).getString("[0].dueDate"));
 		boolean returnedSuspended = from(content).getBoolean("[0].suspended");
 
 		Assert.assertEquals(MockProvider.EXAMPLE_JOB_ID, returnedJobId);
@@ -142,7 +142,7 @@ public void testSimpleJobQuery() {
 		Assert.assertEquals(MockProvider.EXAMPLE_EXECUTION_ID, returnedExecutionId);
 		Assert.assertEquals(MockProvider.EXAMPLE_JOB_NO_EXCEPTION_MESSAGE, returnedExceptionMessage);
 		Assert.assertEquals(MockProvider.EXAMPLE_JOB_RETRIES, returnedRetries);
-		Assert.assertEquals(DateTimeUtil.parseDateTime(MockProvider.EXAMPLE_DUE_DATE).toDate(), returnedDueDate);
+		Assert.assertEquals(DateTimeUtil.parseDate(MockProvider.EXAMPLE_DUE_DATE), returnedDueDate);
 		Assert.assertEquals(MockProvider.EXAMPLE_JOB_IS_SUSPENDED, returnedSuspended);
 	}
 

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractTaskRestServiceInteractionTest.java
Patch:
@@ -2947,7 +2947,7 @@ private void verifyTaskComments(List<Comment> mockTaskComments, Response respons
     String returnedId = resourceHashMap.get("id");
     String returnedUserId = resourceHashMap.get("userId");
     String returnedTaskId = resourceHashMap.get("taskId");
-    Date returnedTime = DateTimeUtil.parseDateTime(resourceHashMap.get("time")).toDate();
+    Date returnedTime = DateTimeUtil.parseDate(resourceHashMap.get("time"));
     String returnedFullMessage = resourceHashMap.get("message");
 
     Comment mockComment = mockTaskComments.get(0);
@@ -2970,7 +2970,7 @@ private void verifyTaskCommentValues(Comment mockTaskComment, String responseCon
     String returnedId = path.get("id");
     String returnedUserId = path.get("userId");
     String returnedTaskId = path.get("taskId");
-    Date returnedTime = DateTimeUtil.parseDateTime(path.<String>get("time")).toDate();
+    Date returnedTime = DateTimeUtil.parseDate(path.<String>get("time"));
     String returnedFullMessage = path.get("message");
 
     assertEquals(mockTaskComment.getId(), returnedId);

File: engine/src/test/java/org/camunda/bpm/engine/test/variables/VariableDataFormatTest.java
Patch:
@@ -246,7 +246,7 @@ public void testApplicationOfGlobalConfiguration() throws JSONException {
 
     DataFormats.jsonTreeFormat().mapper().config("aKey", null);
 
-    JsonJacksonTreeDataFormat dataFormat = (JsonJacksonTreeDataFormat) variableType.getDataFormat();
+    JsonJacksonTreeDataFormat dataFormat = (JsonJacksonTreeDataFormat) variableType.getDefaultDataFormat();
     assertNotSame("The variable type should not use the global data format instance",
         DataFormats.jsonTreeFormat(), dataFormat);
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/history/HistoricVariableInstanceDto.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.camunda.bpm.engine.rest.dto.history;
 
-import org.camunda.bpm.engine.delegate.SerializedVariableTypes;
+import org.camunda.bpm.engine.delegate.ProcessEngineVariableType;
 import org.camunda.bpm.engine.history.HistoricVariableInstance;
 import org.camunda.bpm.engine.impl.persistence.entity.HistoricVariableInstanceEntity;
 import org.camunda.bpm.engine.rest.dto.runtime.SerializedObjectDto;
@@ -65,7 +65,7 @@ public static HistoricVariableInstanceDto fromHistoricVariableInstance(HistoricV
     dto.name = entity.getVariableName();
     dto.processInstanceId = entity.getProcessInstanceId();
     dto.activityInstanceId = entity.getActivtyInstanceId();
-    if(SerializedVariableTypes.Serializable.getName().equals(entity.getVariableType().getTypeName())) {
+    if(ProcessEngineVariableType.SERIALIZABLE.getName().equals(entity.getVariableType().getTypeName())) {
       if(entity.getValue() != null) {
         dto.value = new SerializedObjectDto(entity.getValue());
       }

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/history/HistoricVariableUpdateDto.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.camunda.bpm.engine.rest.dto.history;
 
-import org.camunda.bpm.engine.delegate.SerializedVariableTypes;
+import org.camunda.bpm.engine.delegate.ProcessEngineVariableType;
 import org.camunda.bpm.engine.history.HistoricVariableUpdate;
 import org.camunda.bpm.engine.impl.persistence.entity.HistoricDetailVariableInstanceUpdateEntity;
 import org.camunda.bpm.engine.impl.variable.SerializableType;
@@ -59,7 +59,7 @@ public static HistoricVariableUpdateDto fromHistoricVariableUpdate(HistoricVaria
     dto.revision = entity.getRevision();
     dto.variableName = entity.getVariableName();
     dto.variableTypeName = entity.getVariableTypeName();
-    if(SerializedVariableTypes.Serializable.getName().equals(entity.getVariableType().getTypeName())) {
+    if(ProcessEngineVariableType.SERIALIZABLE.getName().equals(entity.getVariableType().getTypeName())) {
       if(entity.getValue() != null) {
         dto.value = new SerializedObjectDto(entity.getValue());
       }

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/runtime/VariableInstanceDto.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.camunda.bpm.engine.rest.dto.runtime;
 
-import org.camunda.bpm.engine.delegate.SerializedVariableTypes;
+import org.camunda.bpm.engine.delegate.ProcessEngineVariableType;
 import org.camunda.bpm.engine.impl.persistence.entity.VariableInstanceEntity;
 import org.camunda.bpm.engine.runtime.VariableInstance;
 
@@ -130,7 +130,7 @@ public static VariableInstanceDto fromVariableInstance(VariableInstance variable
 
     dto.setTaskId(entity.getTaskId());
     dto.setActivityInstanceId(entity.getActivityInstanceId());
-    if(SerializedVariableTypes.Serializable.getName().equals(entity.getType().getTypeName())) {
+    if(ProcessEngineVariableType.SERIALIZABLE.getName().equals(entity.getType().getTypeName())) {
       if(entity.getValue() != null) {
         dto.setValue(new SerializedObjectDto(entity.getValue()));
       }

File: engine/src/main/java/org/camunda/bpm/engine/delegate/PersistentVariableInstance.java
Patch:
@@ -29,8 +29,8 @@ public interface PersistentVariableInstance extends CoreVariableInstance {
   SerializedVariableValue getSerializedValue();
 
   /**
-   * Returns the name of the type of <code>this</code> variable instance
-   * @return
+   * Returns the name of the type of <code>this</code> variable instance;
+   * corresponds to the types defined in {@link ProcessEngineVariableType}.
    */
   String getTypeName();
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricDetailQueryImpl.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import org.camunda.bpm.engine.delegate.SerializedVariableTypes;
+import org.camunda.bpm.engine.delegate.ProcessEngineVariableType;
 import org.camunda.bpm.engine.history.HistoricDetail;
 import org.camunda.bpm.engine.history.HistoricDetailQuery;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
@@ -139,7 +139,7 @@ public List<HistoricDetail> executeList(CommandContext commandContext, Page page
           HistoricDetailVariableInstanceUpdateEntity entity = (HistoricDetailVariableInstanceUpdateEntity) historicDetail;
           // do not fetch values for byte arrays eagerly (unless requested by the user)
           if (isByteArrayFetchingEnabled
-              || !SerializedVariableTypes.ByteArray.getName().equals(entity.getVariableType().getTypeName())) {
+              || !ProcessEngineVariableType.BYTES.getName().equals(entity.getVariableType().getTypeName())) {
 
             try {
               entity.getValue();

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricVariableInstanceQueryImpl.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import org.camunda.bpm.engine.delegate.SerializedVariableTypes;
+import org.camunda.bpm.engine.delegate.ProcessEngineVariableType;
 import org.camunda.bpm.engine.history.HistoricVariableInstance;
 import org.camunda.bpm.engine.history.HistoricVariableInstanceQuery;
 import org.camunda.bpm.engine.impl.context.Context;
@@ -142,7 +142,7 @@ public List<HistoricVariableInstance> executeList(CommandContext commandContext,
 
         // do not fetch values for byte arrays eagerly (unless requested by the user)
         if (isByteArrayFetchingEnabled
-            || !SerializedVariableTypes.ByteArray.getName().equals(variableInstanceEntity.getVariableType().getTypeName())) {
+            || !ProcessEngineVariableType.BYTES.getName().equals(variableInstanceEntity.getVariableType().getTypeName())) {
 
           try {
             variableInstanceEntity.getValue();

File: engine/src/main/java/org/camunda/bpm/engine/impl/VariableInstanceQueryImpl.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import org.camunda.bpm.engine.delegate.SerializedVariableTypes;
+import org.camunda.bpm.engine.delegate.ProcessEngineVariableType;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.interceptor.CommandExecutor;
 import org.camunda.bpm.engine.impl.persistence.entity.VariableInstanceEntity;
@@ -149,7 +149,7 @@ public List<VariableInstance> executeList(CommandContext commandContext, Page pa
 
       // do not fetch values for byte arrays eagerly (unless requested by the user)
       if (isByteArrayFetchingEnabled
-          || !SerializedVariableTypes.ByteArray.getName().equals(variableInstanceEntity.getType().getTypeName())) {
+          || !ProcessEngineVariableType.BYTES.getName().equals(variableInstanceEntity.getType().getTypeName())) {
 
         try {
           variableInstanceEntity.getValue();

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -61,7 +61,7 @@
 import org.camunda.bpm.engine.RepositoryService;
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.TaskService;
-import org.camunda.bpm.engine.delegate.SerializedVariableTypes;
+import org.camunda.bpm.engine.delegate.ProcessEngineVariableType;
 import org.camunda.bpm.engine.impl.AuthorizationServiceImpl;
 import org.camunda.bpm.engine.impl.DefaultArtifactFactory;
 import org.camunda.bpm.engine.impl.FormServiceImpl;
@@ -1298,11 +1298,11 @@ protected void initJpa() {
     }
     if(jpaEntityManagerFactory!=null) {
       sessionFactories.put(EntityManagerSession.class, new EntityManagerSessionFactory(jpaEntityManagerFactory, jpaHandleTransaction, jpaCloseEntityManager));
-      VariableType jpaType = variableTypes.getVariableType(SerializedVariableTypes.JPA.getName());
+      VariableType jpaType = variableTypes.getVariableType(ProcessEngineVariableType.JPA.getName());
       // Add JPA-type
       if(jpaType == null) {
         // We try adding the variable right before SerializableType, if available
-        int serializableIndex = variableTypes.getTypeIndex(SerializedVariableTypes.Serializable.getName());
+        int serializableIndex = variableTypes.getTypeIndex(ProcessEngineVariableType.SERIALIZABLE.getName());
         if(serializableIndex > -1) {
           variableTypes.addType(new JPAEntityVariableType(), serializableIndex);
         } else {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SetExecutionVariableFromSerializedCmd.java
Patch:
@@ -20,6 +20,9 @@
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 
+/**
+ * @author Thorben Lindhauer
+ */
 public class SetExecutionVariableFromSerializedCmd extends SetScopeVariableFromSerializedCmd {
 
   public SetExecutionVariableFromSerializedCmd(String executionId, String variableName, Object serializedVariableValue, String variableType,

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/BooleanType.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.camunda.bpm.engine.impl.variable;
 
-import org.camunda.bpm.engine.delegate.SerializedVariableTypes;
+import org.camunda.bpm.engine.delegate.ProcessEngineVariableType;
 
 
 
@@ -23,7 +23,7 @@
 public class BooleanType extends PrimitiveVariableType {
 
   public String getTypeName() {
-    return SerializedVariableTypes.Boolean.getName();
+    return ProcessEngineVariableType.BOOLEAN.getName();
   }
 
   public boolean isCachable() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/ByteArrayType.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.camunda.bpm.engine.impl.variable;
 
-import org.camunda.bpm.engine.delegate.SerializedVariableTypes;
+import org.camunda.bpm.engine.delegate.ProcessEngineVariableType;
 import org.camunda.bpm.engine.impl.persistence.entity.ByteArrayEntity;
 
 /**
@@ -21,7 +21,7 @@
 public class ByteArrayType extends PrimitiveVariableType {
 
   public String getTypeName() {
-    return SerializedVariableTypes.ByteArray.getName();
+    return ProcessEngineVariableType.BYTES.getName();
   }
 
   public boolean isCachable() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/DateType.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.Date;
 import java.util.Map;
 
-import org.camunda.bpm.engine.delegate.SerializedVariableTypes;
+import org.camunda.bpm.engine.delegate.ProcessEngineVariableType;
 import org.camunda.bpm.engine.delegate.SerializedVariableValue;
 import org.camunda.bpm.engine.impl.core.variable.SerializedVariableValueImpl;
 
@@ -26,7 +26,7 @@
 public class DateType implements VariableType {
 
   public String getTypeName() {
-    return SerializedVariableTypes.Date.getName();
+    return ProcessEngineVariableType.DATE.getName();
   }
 
   public boolean isCachable() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/DoubleType.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.camunda.bpm.engine.impl.variable;
 
-import org.camunda.bpm.engine.delegate.SerializedVariableTypes;
+import org.camunda.bpm.engine.delegate.ProcessEngineVariableType;
 
 
 
@@ -23,7 +23,7 @@
 public class DoubleType extends PrimitiveVariableType {
 
   public String getTypeName() {
-    return SerializedVariableTypes.Double.getName();
+    return ProcessEngineVariableType.DOUBLE.getName();
   }
 
   public boolean isCachable() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/IntegerType.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.camunda.bpm.engine.impl.variable;
 
-import org.camunda.bpm.engine.delegate.SerializedVariableTypes;
+import org.camunda.bpm.engine.delegate.ProcessEngineVariableType;
 
 
 
@@ -23,7 +23,7 @@
 public class IntegerType extends PrimitiveVariableType {
 
   public String getTypeName() {
-    return SerializedVariableTypes.Integer.getName();
+    return ProcessEngineVariableType.INTEGER.getName();
   }
 
   public boolean isCachable() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/LongType.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.camunda.bpm.engine.impl.variable;
 
-import org.camunda.bpm.engine.delegate.SerializedVariableTypes;
+import org.camunda.bpm.engine.delegate.ProcessEngineVariableType;
 
 
 
@@ -23,7 +23,7 @@
 public class LongType extends PrimitiveVariableType {
 
   public String getTypeName() {
-    return SerializedVariableTypes.Long.getName();
+    return ProcessEngineVariableType.LONG.getName();
   }
 
   public boolean isCachable() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/NullType.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.camunda.bpm.engine.impl.variable;
 
-import org.camunda.bpm.engine.delegate.SerializedVariableTypes;
+import org.camunda.bpm.engine.delegate.ProcessEngineVariableType;
 
 
 
@@ -23,7 +23,7 @@
 public class NullType extends PrimitiveVariableType {
 
   public String getTypeName() {
-    return SerializedVariableTypes.Null.getName();
+    return ProcessEngineVariableType.NULL.getName();
   }
 
   public boolean isCachable() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/SerializableType.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Map;
 
 import org.camunda.bpm.engine.ProcessEngineException;
-import org.camunda.bpm.engine.delegate.SerializedVariableTypes;
+import org.camunda.bpm.engine.delegate.ProcessEngineVariableType;
 import org.camunda.bpm.engine.delegate.SerializedVariableValue;
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.core.variable.SerializedVariableValueImpl;
@@ -37,7 +37,7 @@
 public class SerializableType extends ByteArrayType {
 
   public String getTypeName() {
-    return SerializedVariableTypes.Serializable.getName();
+    return ProcessEngineVariableType.SERIALIZABLE.getName();
   }
 
   public Object getValue(ValueFields valueFields) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/ShortType.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.camunda.bpm.engine.impl.variable;
 
-import org.camunda.bpm.engine.delegate.SerializedVariableTypes;
+import org.camunda.bpm.engine.delegate.ProcessEngineVariableType;
 
 
 
@@ -23,7 +23,7 @@
 public class ShortType extends PrimitiveVariableType {
 
   public String getTypeName() {
-    return SerializedVariableTypes.Short.getName();
+    return ProcessEngineVariableType.SHORT.getName();
   }
 
   public boolean isCachable() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/StringType.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.camunda.bpm.engine.impl.variable;
 
-import org.camunda.bpm.engine.delegate.SerializedVariableTypes;
+import org.camunda.bpm.engine.delegate.ProcessEngineVariableType;
 
 
 
@@ -23,7 +23,7 @@
 public class StringType extends PrimitiveVariableType {
 
   public String getTypeName() {
-    return SerializedVariableTypes.String.getName();
+    return ProcessEngineVariableType.STRING.getName();
   }
 
   public boolean isCachable() {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/RuntimeServiceTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.camunda.bpm.engine.BadUserRequestException;
 import org.camunda.bpm.engine.ProcessEngineConfiguration;
 import org.camunda.bpm.engine.ProcessEngineException;
-import org.camunda.bpm.engine.delegate.SerializedVariableTypes;
+import org.camunda.bpm.engine.delegate.ProcessEngineVariableType;
 import org.camunda.bpm.engine.history.HistoricActivityInstance;
 import org.camunda.bpm.engine.history.HistoricDetail;
 import org.camunda.bpm.engine.history.HistoricTaskInstance;
@@ -1010,7 +1010,7 @@ public void FAILING_testChangeVariableType() {
     VariableInstance variableInstance = runtimeService.createVariableInstanceQuery().singleResult();
 
     assertEquals(47, variableInstance.getValue());
-    assertEquals(SerializedVariableTypes.Integer.getName(), variableInstance.getTypeName());
+    assertEquals(ProcessEngineVariableType.INTEGER.getName(), variableInstance.getTypeName());
   }
 
   @Deployment(resources = "org/camunda/bpm/engine/test/api/oneTaskProcess.bpmn20.xml")

File: spin/core/src/test/java/org/camunda/spin/xml/dom/XmlDomMapJavaToXmlScriptTest.java
Patch:
@@ -37,7 +37,7 @@ public void shouldMapJavaToXml() {
     script.execute();
     String xml = script.getVariable("xml");
 
-    assertThat(xml).isEqualTo(EXAMPLE_VALIDATION_XML);
+    assertThat(replaceLineBreaks(xml)).isEqualTo(replaceLineBreaks(EXAMPLE_VALIDATION_XML));
   }
 
   @Test
@@ -56,7 +56,7 @@ public void shouldMapWithValidation() {
     script.execute();
     String xml = script.getVariable("xml");
 
-    assertThat(xml).isEqualTo(EXAMPLE_VALIDATION_XML);
+    assertThat(replaceLineBreaks(xml)).isEqualTo(replaceLineBreaks(EXAMPLE_VALIDATION_XML));
   }
 
   @Test(expected = SpinXmlDataFormatException.class)

File: spin/core/src/test/java/org/camunda/spin/xml/dom/XmlDomMapJavaToXmlTest.java
Patch:
@@ -31,7 +31,7 @@ public class XmlDomMapJavaToXmlTest {
   @Test
   public void shouldMapJavaToXml() {
     Order order = createExampleOrder();
-    assertThat(XML(order).toString()).isEqualTo(EXAMPLE_VALIDATION_XML);
+    assertThat(replaceLineBreaks(XML(order).toString())).isEqualTo(replaceLineBreaks(EXAMPLE_VALIDATION_XML));
   }
 
   @Test
@@ -45,7 +45,7 @@ public void shouldMapWithValidation() {
       .done();
 
     String xml = XML(createExampleOrder(), dataFormat).toString();
-    assertThat(xml).isEqualTo(EXAMPLE_VALIDATION_XML);
+    assertThat(replaceLineBreaks(xml)).isEqualTo(replaceLineBreaks(EXAMPLE_VALIDATION_XML));
   }
 
   @Test

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/ServiceTaskConnectorActivityBehavior.java
Patch:
@@ -16,6 +16,7 @@
 import org.camunda.bpm.connect.ConnectorRequest;
 import org.camunda.bpm.connect.ConnectorResponse;
 import org.camunda.bpm.engine.ProcessEngineException;
+import org.camunda.bpm.engine.delegate.CoreVariableInstance;
 import org.camunda.bpm.engine.impl.connector.ConnectorVariableScope;
 import org.camunda.bpm.engine.impl.connector.Connectors;
 import org.camunda.bpm.engine.impl.context.Context;

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/behavior/CallableElement.java
Patch:
@@ -55,7 +55,7 @@ public CallableElement() {
 
   // definitionKey ////////////////////////////////////////////////////////////////
 
-  public String getDefinitionKey(CoreVariableScope variableScope) {
+  public String getDefinitionKey(CoreVariableScope<?> variableScope) {
     Object result = definitionKeyValueProvider.getValue(variableScope);
 
     if (result != null && !(result instanceof String)) {
@@ -85,7 +85,7 @@ public void setBinding(CallableElementBinding binding) {
 
   // version //////////////////////////////////////////////////////////////////////
 
-  public Integer getVersion(CoreVariableScope variableScope) {
+  public Integer getVersion(CoreVariableScope<?> variableScope) {
     Object result = versionValueProvider.getValue(variableScope);
 
     if (result != null) {
@@ -111,7 +111,7 @@ public void setVersionValueProvider(ParameterValueProvider version) {
 
   // businessKey /////////////////////////////////////////////////////////////////
 
-  public String getBusinessKey(CoreVariableScope variableScope) {
+  public String getBusinessKey(CoreVariableScope<?> variableScope) {
     if (businessKeyValueProvider == null) {
       return null;
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/behavior/CallableElementParameter.java
Patch:
@@ -28,7 +28,7 @@ public class CallableElementParameter {
 
   // source ////////////////////////////////////////////////////////
 
-  public Object getSource(CoreVariableScope variableScope) {
+  public Object getSource(CoreVariableScope<?> variableScope) {
     if (sourceValueProvider instanceof ConstantValueProvider) {
       String variableName = (String) sourceValueProvider.getValue(variableScope);
       return variableScope.getVariable(variableName);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/behavior/ProcessOrCaseTaskActivityBehavior.java
Patch:
@@ -48,16 +48,16 @@ protected void performStart(CmmnActivityExecution execution) {
 
   }
 
-  public void transferVariables(VariableScope from, VariableScope to) {
-    CoreVariableScope fromVariableScope = (CoreVariableScope) from;
+  public void transferVariables(VariableScope<?> from, VariableScope<?> to) {
+    CoreVariableScope<?> fromVariableScope = (CoreVariableScope<?>) from;
 
     List<CallableElementParameter> outputs = callableElement.getOutputs();
     Map<String, Object> variables = getVariables(outputs, fromVariableScope);
 
     to.setVariables(variables);
   }
 
-  protected Map<String, Object> getVariables(List<CallableElementParameter> params, CoreVariableScope variableScope) {
+  protected Map<String, Object> getVariables(List<CallableElementParameter> params, CoreVariableScope<?> variableScope) {
     Map<String, Object> result = new HashMap<String, Object>();
 
     for (CallableElementParameter param : params) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/behavior/TransferVariablesActivityBehavior.java
Patch:
@@ -20,6 +20,6 @@
  */
 public interface TransferVariablesActivityBehavior extends CmmnActivityBehavior {
 
-  public void transferVariables(VariableScope from, VariableScope to);
+  public void transferVariables(VariableScope<?> from, VariableScope<?> to);
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/mapping/InputParameter.java
Patch:
@@ -38,7 +38,7 @@ public InputParameter(String name, ParameterValueProvider valueProvider) {
     super(name, valueProvider);
   }
 
-  protected void execute(CoreVariableScope innerScope, CoreVariableScope outerScope) {
+  protected void execute(CoreVariableScope<?> innerScope, CoreVariableScope<?> outerScope) {
 
     // get value from outer scope
     Object value = valueProvider.getValue(outerScope);

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/mapping/IoMapping.java
Patch:
@@ -30,13 +30,13 @@ public class IoMapping {
 
   protected List<OutputParameter> outputParameters;
 
-  public void executeInputParameters(CoreVariableScope variableScope) {
+  public void executeInputParameters(CoreVariableScope<?> variableScope) {
     for (InputParameter inputParameter : getInputParameters()) {
       inputParameter.execute(variableScope);
     }
   }
 
-  public void executeOutputParameters(CoreVariableScope variableScope) {
+  public void executeOutputParameters(CoreVariableScope<?> variableScope) {
     for (OutputParameter outputParameter : getOutputParameters()) {
       outputParameter.execute(variableScope);
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/mapping/IoParameter.java
Patch:
@@ -43,15 +43,15 @@ public IoParameter(String name, ParameterValueProvider valueProvider) {
   /**
    * Execute the parameter in a given variable scope.
    */
-  public void execute(CoreVariableScope scope) {
+  public void execute(CoreVariableScope<?> scope) {
     execute(scope, scope.getParentVariableScope());
   }
 
    /**
    * @param innerScope
    * @param outerScope
    */
-  protected abstract void execute(CoreVariableScope innerScope, CoreVariableScope outerScope);
+  protected abstract void execute(CoreVariableScope<?> innerScope, CoreVariableScope<?> outerScope);
 
   // getters / setters ///////////////////////////
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/mapping/OutputParameter.java
Patch:
@@ -39,7 +39,7 @@ public OutputParameter(String name, ParameterValueProvider valueProvider) {
     super(name, valueProvider);
   }
 
-  protected void execute(CoreVariableScope innerScope, CoreVariableScope outerScope) {
+  protected void execute(CoreVariableScope<?> innerScope, CoreVariableScope<?> outerScope) {
 
     // get value from inner scope
     Object value = valueProvider.getValue(innerScope);

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/mapping/value/ConstantValueProvider.java
Patch:
@@ -28,7 +28,7 @@ public ConstantValueProvider(Object value) {
     this.value = value;
   }
 
-  public Object getValue(CoreVariableScope scope) {
+  public Object getValue(CoreVariableScope<?> scope) {
     return value;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/mapping/value/MapValueProvider.java
Patch:
@@ -30,7 +30,7 @@ public MapValueProvider(TreeMap<String, ParameterValueProvider> providerMap) {
     this.providerMap = providerMap;
   }
 
-  public Object getValue(CoreVariableScope variableScope) {
+  public Object getValue(CoreVariableScope<?> variableScope) {
     Map<String, Object> valueMap = new TreeMap<String, Object>();
     for (Entry<String, ParameterValueProvider> entry : providerMap.entrySet()) {
       valueMap.put(entry.getKey(), entry.getValue().getValue(variableScope));

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/mapping/value/NullValueProvider.java
Patch:
@@ -20,7 +20,7 @@
  */
 public class NullValueProvider implements ParameterValueProvider {
 
-  public Object getValue(CoreVariableScope variableScope) {
+  public Object getValue(CoreVariableScope<?> variableScope) {
     return null;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/mapping/value/ParameterValueProvider.java
Patch:
@@ -25,6 +25,6 @@ public interface ParameterValueProvider {
    * @param variableScope the scope in which the value is to be resolved.
    * @return the value
    */
-  Object getValue(CoreVariableScope variableScope);
+  Object getValue(CoreVariableScope<?> variableScope);
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/el/ElValueProvider.java
Patch:
@@ -31,7 +31,7 @@ public ElValueProvider(Expression expression) {
     this.expression = expression;
   }
 
-  public Object getValue(CoreVariableScope variableScope) {
+  public Object getValue(CoreVariableScope<?> variableScope) {
     return expression.getValue(variableScope);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/el/VariableScopeElResolver.java
Patch:
@@ -40,9 +40,9 @@ public class VariableScopeElResolver extends ELResolver {
   public static final String TASK_KEY = "task";
   public static final String LOGGED_IN_USER_KEY = "authenticatedUserId";
 
-  protected VariableScope variableScope;
+  protected VariableScope<?> variableScope;
 
-  public VariableScopeElResolver(VariableScope variableScope) {
+  public VariableScopeElResolver(VariableScope<?> variableScope) {
     this.variableScope = variableScope;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/engine/JuelFormEngine.java
Patch:
@@ -58,7 +58,7 @@ public Object renderTaskForm(TaskFormData taskForm) {
     return executeScript(formTemplateString, task.getExecution());
   }
 
-  protected Object executeScript(String scriptSrc, VariableScope scope) {
+  protected Object executeScript(String scriptSrc, VariableScope<?> scope) {
     ProcessEngineConfigurationImpl processEngineConfiguration = Context.getProcessEngineConfiguration();
     ScriptingEnvironment scriptingEnvironment = processEngineConfiguration.getScriptingEnvironment();
     ScriptFactory scriptFactory = processEngineConfiguration.getScriptFactory();

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/handler/FormFieldHandler.java
Patch:
@@ -47,7 +47,7 @@ public FormField createFormField(ExecutionEntity executionEntity) {
     formField.setId(id);
 
     // set label (evaluate expression)
-    VariableScope variableScope = executionEntity != null ? executionEntity : StartProcessVariableScope.getSharedInstance();
+    VariableScope<?> variableScope = executionEntity != null ? executionEntity : StartProcessVariableScope.getSharedInstance();
     Object labelValueObject = label.getValue(variableScope);
     if(labelValueObject != null) {
       formField.setLabel(labelValueObject.toString());

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/TimerDeclarationImpl.java
Patch:
@@ -85,7 +85,7 @@ protected TimerEntity newJobInstance(ExecutionEntity execution) {
 
     // ACT-1415: timer-declaration on start-event may contain expressions NOT
     // evaluating variables but other context, evaluating should happen nevertheless
-    VariableScope scopeForExpression = execution;
+    VariableScope<?> scopeForExpression = execution;
     if(scopeForExpression == null) {
       scopeForExpression = StartProcessVariableScope.getSharedInstance();
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/PvmExecutionImpl.java
Patch:
@@ -21,7 +21,6 @@
 import org.camunda.bpm.engine.impl.cmmn.execution.CmmnExecution;
 import org.camunda.bpm.engine.impl.core.instance.CoreExecution;
 import org.camunda.bpm.engine.impl.core.variable.CorePersistentVariableScope;
-import org.camunda.bpm.engine.impl.core.variable.CoreVariableScope;
 import org.camunda.bpm.engine.impl.pvm.PvmActivity;
 import org.camunda.bpm.engine.impl.pvm.PvmException;
 import org.camunda.bpm.engine.impl.pvm.PvmProcessDefinition;

File: engine/src/main/java/org/camunda/bpm/engine/impl/scripting/CompiledExecutableScript.java
Patch:
@@ -42,7 +42,7 @@ protected CompiledExecutableScript(String language, CompiledScript compiledScrip
     this.compiledScript = compiledScript;
   }
 
-  public Object execute(ScriptEngine scriptEngine, VariableScope variableScope, Bindings bindings) {
+  public Object execute(ScriptEngine scriptEngine, VariableScope<?> variableScope, Bindings bindings) {
     try {
       return compiledScript.eval(bindings);
     } catch (ScriptException e) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/scripting/DynamicExecutableScript.java
Patch:
@@ -34,12 +34,12 @@ protected DynamicExecutableScript(Expression scriptExpression, String language)
     this.scriptExpression = scriptExpression;
   }
 
-  public Object execute(ScriptEngine scriptEngine, VariableScope variableScope, Bindings bindings) {
+  public Object execute(ScriptEngine scriptEngine, VariableScope<?> variableScope, Bindings bindings) {
     ExecutableScript script = getScript(variableScope);
     return script.execute(scriptEngine, variableScope, bindings);
   }
 
-  public abstract ExecutableScript getScript(VariableScope variableScope);
+  public abstract ExecutableScript getScript(VariableScope<?> variableScope);
 
   protected ExecutableScript compileScript(String scriptSource) {
     return Context.getProcessEngineConfiguration()

File: engine/src/main/java/org/camunda/bpm/engine/impl/scripting/DynamicResourceExecutableScript.java
Patch:
@@ -31,7 +31,7 @@ public DynamicResourceExecutableScript(Expression scriptResourceExpression, Stri
     super(scriptResourceExpression, language);
   }
 
-  public ExecutableScript getScript(VariableScope variableScope) {
+  public ExecutableScript getScript(VariableScope<?> variableScope) {
     String scriptPath = (String) scriptExpression.getValue(variableScope);
     String scriptSource = ResourceUtil.loadResourceContent(scriptPath, getDeployment());
     return compileScript(scriptSource);

File: engine/src/main/java/org/camunda/bpm/engine/impl/scripting/DynamicSourceExecutableScript.java
Patch:
@@ -28,7 +28,7 @@ public DynamicSourceExecutableScript(Expression scriptSourceExpression, String l
     super(scriptSourceExpression, language);
   }
 
-  public ExecutableScript getScript(VariableScope variableScope) {
+  public ExecutableScript getScript(VariableScope<?> variableScope) {
     String scriptSource = (String) scriptExpression.getValue(variableScope);
     return compileScript(scriptSource);
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/scripting/ExecutableScript.java
Patch:
@@ -44,7 +44,7 @@ protected ExecutableScript(String language) {
   * @throws ProcessEngineException in case the script cannot be evaluated.
   * @return the result of the script evaluation
   */
-  public abstract Object execute(ScriptEngine scriptEngine, VariableScope variableScope, Bindings bindings);
+  public abstract Object execute(ScriptEngine scriptEngine, VariableScope<?> variableScope, Bindings bindings);
 
   /**
    * The language in which the script is written.

File: engine/src/main/java/org/camunda/bpm/engine/impl/scripting/ScriptValueProvider.java
Patch:
@@ -31,7 +31,7 @@ public ScriptValueProvider(ExecutableScript script) {
     this.script = script;
   }
 
-  public Object getValue(CoreVariableScope variableScope) {
+  public Object getValue(CoreVariableScope<?> variableScope) {
     return Context.getProcessEngineConfiguration()
       .getScriptingEnvironment()
       .execute(script, variableScope);

File: engine/src/main/java/org/camunda/bpm/engine/impl/scripting/SourceExecutableScript.java
Patch:
@@ -39,7 +39,7 @@ public SourceExecutableScript(String language, String src) {
     scriptSrc = src;
   }
 
-  public Object execute(ScriptEngine engine, VariableScope variableScope, Bindings bindings) {
+  public Object execute(ScriptEngine engine, VariableScope<?> variableScope, Bindings bindings) {
     try {
       LOG.fine("Evaluating un-compiled script using " + language + " script engine ");
       return engine.eval(scriptSrc, bindings);

File: engine/src/main/java/org/camunda/bpm/engine/impl/scripting/engine/BeansResolverFactory.java
Patch:
@@ -24,7 +24,7 @@
  */
 public class BeansResolverFactory implements ResolverFactory, Resolver {
 
-  public Resolver createResolver(VariableScope variableScope) {
+  public Resolver createResolver(VariableScope<?> variableScope) {
     return this;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/scripting/engine/ResolverFactory.java
Patch:
@@ -21,5 +21,5 @@
  */
 public interface ResolverFactory {
 
-  Resolver createResolver(VariableScope variableScope);
+  Resolver createResolver(VariableScope<?> variableScope);
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/scripting/engine/ScriptBindings.java
Patch:
@@ -57,14 +57,14 @@ public class ScriptBindings implements Bindings {
     new HashSet<String>(Arrays.asList("out", "out:print", "lang:import", "context", "elcontext", "print", "println"));
 
   protected List<Resolver> scriptResolvers;
-  protected VariableScope variableScope;
+  protected VariableScope<?> variableScope;
 
   protected Bindings wrappedBindings;
 
   /** if true, all script variables will be set in the variable scope. */
   protected boolean autoStoreScriptVariables;
 
-  public ScriptBindings(List<Resolver> scriptResolvers, VariableScope variableScope, Bindings wrappedBindings) {
+  public ScriptBindings(List<Resolver> scriptResolvers, VariableScope<?> variableScope, Bindings wrappedBindings) {
     this.scriptResolvers = scriptResolvers;
     this.variableScope = variableScope;
     this.wrappedBindings = wrappedBindings;

File: engine/src/main/java/org/camunda/bpm/engine/impl/scripting/engine/ScriptBindingsFactory.java
Patch:
@@ -37,7 +37,7 @@ public ScriptBindingsFactory(List<ResolverFactory> resolverFactories) {
     this.resolverFactories = resolverFactories;
   }
 
-  public Bindings createBindings(VariableScope variableScope, Bindings engineBindings) {
+  public Bindings createBindings(VariableScope<?> variableScope, Bindings engineBindings) {
     List<Resolver> scriptResolvers = new ArrayList<Resolver>();
     for (ResolverFactory scriptResolverFactory: resolverFactories) {
       Resolver resolver = scriptResolverFactory.createResolver(variableScope);

File: engine/src/main/java/org/camunda/bpm/engine/impl/scripting/engine/ScriptingEngines.java
Patch:
@@ -214,7 +214,7 @@ protected void configureGroovyScriptEngine(ScriptEngine scriptEngine) {
   /** override to build a spring aware ScriptingEngines
    * @param engineBindings
    * @param scriptEngine */
-  public Bindings createBindings(ScriptEngine scriptEngine, VariableScope variableScope) {
+  public Bindings createBindings(ScriptEngine scriptEngine, VariableScope<?> variableScope) {
     return scriptBindingsFactory.createBindings(variableScope, scriptEngine.createBindings());
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/scripting/engine/VariableScopeResolver.java
Patch:
@@ -32,10 +32,10 @@
  */
 public class VariableScopeResolver implements Resolver {
 
-  protected VariableScope variableScope;
+  protected VariableScope<?> variableScope;
   protected String variableScopeKey = "scope";
 
-  public VariableScopeResolver(VariableScope variableScope) {
+  public VariableScopeResolver(VariableScope<?> variableScope) {
     ensureNotNull("variableScope", variableScope);
     if (variableScope instanceof ExecutionEntity) {
       variableScopeKey = "execution";

File: engine/src/main/java/org/camunda/bpm/engine/impl/scripting/engine/VariableScopeResolverFactory.java
Patch:
@@ -21,7 +21,7 @@
  */
 public class VariableScopeResolverFactory implements ResolverFactory {
 
-  public Resolver createResolver(VariableScope variableScope) {
+  public Resolver createResolver(VariableScope<?> variableScope) {
     if (variableScope!=null) {
       return new VariableScopeResolver(variableScope);
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/scripting/env/ScriptingEnvironment.java
Patch:
@@ -64,7 +64,7 @@ public ScriptingEnvironment(ScriptFactory scriptFactory, List<ScriptEnvResolver>
    * @param scope the scope in which to execute the script
    * @return the result of the script evaluation
    */
-  public Object execute(ExecutableScript script, VariableScope scope) {
+  public Object execute(ExecutableScript script, VariableScope<?> scope) {
 
     final String scriptLanguage = script.getLanguage();
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/task/listener/DelegateExpressionTaskListener.java
Patch:
@@ -43,7 +43,7 @@ public void notify(DelegateTask delegateTask) {
     // Note: we can't cache the result of the expression, because the
     // execution can change: eg. delegateExpression='${mySpringBeanFactory.randomSpringBean()}'
 
-    VariableScope variableScope = delegateTask.getExecution();
+    VariableScope<?> variableScope = delegateTask.getExecution();
     if (variableScope == null) {
       variableScope = delegateTask.getCaseExecution();
     }

File: engine/src/main/java/org/camunda/bpm/engine/test/mock/MockExpressionManager.java
Patch:
@@ -1,9 +1,9 @@
 /* Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -26,7 +26,7 @@
 public class MockExpressionManager extends ExpressionManager {
 
   @Override
-  protected ELResolver createElResolver(VariableScope variableScope) {
+  protected ELResolver createElResolver(VariableScope<?> variableScope) {
     CompositeELResolver compositeElResolver = new CompositeELResolver();
     compositeElResolver.add(new VariableScopeElResolver(variableScope));
     compositeElResolver.add(new MockElResolver());

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricVariableInstanceEntity.java
Patch:
@@ -24,6 +24,7 @@
 import org.camunda.bpm.engine.impl.history.event.HistoricVariableUpdateEventEntity;
 import org.camunda.bpm.engine.impl.variable.ValueFields;
 import org.camunda.bpm.engine.impl.variable.VariableType;
+import org.camunda.bpm.engine.runtime.SerializedVariableValue;
 
 /**
  * @author Christian Lipphardt (camunda)
@@ -338,8 +339,8 @@ public void setDataFormatId(String dataFormatId) {
     this.dataFormatId = dataFormatId;
   }
 
-  public Object getRawValue() {
-    return variableType.getRawValue(this);
+  public SerializedVariableValue getSerializedValue() {
+    return variableType.getSerializedValue(this);
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/VariableType.java
Patch:
@@ -12,6 +12,8 @@
  */
 package org.camunda.bpm.engine.impl.variable;
 
+import org.camunda.bpm.engine.runtime.SerializedVariableValue;
+
 
 
 /**
@@ -36,6 +38,6 @@ public interface VariableType {
   boolean isAbleToStore(Object value);
   void setValue(Object value, ValueFields valueFields);
   Object getValue(ValueFields valueFields);
-  Object getRawValue(ValueFields valueFields);
+  SerializedVariableValue getSerializedValue(ValueFields valueFields);
 
 }

File: identity/identity-ldap/src/test/java/org/camunda/bpm/identity/impl/ldap/LdapGroupQueryTest.java
Patch:
@@ -54,14 +54,14 @@ public void testFilterByGroupName() {
   }
   
   public void testFilterByGroupNameLike() {
-    Group group = identityService.createGroupQuery().groupName("manage*").singleResult();
+    Group group = identityService.createGroupQuery().groupNameLike("manage*").singleResult();
     assertNotNull(group);
     
     // validate result
     assertEquals("management", group.getId());
     assertEquals("management", group.getName());
     
-    group = identityService.createGroupQuery().groupName("what*").singleResult();
+    group = identityService.createGroupQuery().groupNameLike("what*").singleResult();
     assertNull(group);
   }
   

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricProcessInstanceTest.java
Patch:
@@ -547,8 +547,8 @@ public void testBusinessKey() {
   }
 
   @Deployment(resources = {
-      "org/camunda/bpm/engine/test/history/HistoricProcessInstanceTest.testStartActivtyId-super.bpmn20.xml",
-      "org/camunda/bpm/engine/test/history/HistoricProcessInstanceTest.testStartActivtyId-sub.bpmn20.xml"
+      "org/camunda/bpm/engine/test/history/HistoricProcessInstanceTest.testStartActivityId-super.bpmn20.xml",
+      "org/camunda/bpm/engine/test/history/HistoricProcessInstanceTest.testStartActivityId-sub.bpmn20.xml"
   })
   public void testStartActivityId() {
     // given
@@ -567,7 +567,7 @@ public void testStartActivityId() {
   }
 
   @Deployment(resources = {
-      "org/camunda/bpm/engine/test/history/HistoricProcessInstanceTest.testStartActivtyId-super.bpmn20.xml",
+      "org/camunda/bpm/engine/test/history/HistoricProcessInstanceTest.testStartActivityId-super.bpmn20.xml",
       "org/camunda/bpm/engine/test/history/HistoricProcessInstanceTest.testAsyncStartActivityId-sub.bpmn20.xml"
   })
   public void testAsyncStartActivityId() {

File: engine-cdi/src/main/java/org/camunda/bpm/engine/cdi/impl/util/ProgrammaticBeanLookup.java
Patch:
@@ -123,7 +123,7 @@ private static boolean isDependentScoped(Bean<?> bean) {
   private static void releaseOnContextClose(CreationalContext<?> creationalContext, Bean<?> bean) {
     CommandContext commandContext = Context.getCommandContext();
     if(commandContext != null) {
-      commandContext.registerCommandContextCloseListener(new CreationalContextReleaseListener(creationalContext));
+      commandContext.registerCommandContextListener(new CreationalContextReleaseListener(creationalContext));
 
     } else {
       LOG.warning("Obtained instance of @Dependent scoped bean "+bean +" outside of process engine command context. "

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/task/impl/TaskResourceImpl.java
Patch:
@@ -138,7 +138,8 @@ public HalTask getHalTask() {
       throw new InvalidRequestException(Status.NOT_FOUND, "No matching task with id " + taskId);
     }
 
-    return HalTask.fromTask(task);
+    return HalTask.fromTask(task)
+      .embed(HalTask.REL_PROCESS_DEFINITION, engine);
   }
 
   @Override

File: engine/src/main/java/org/camunda/bpm/engine/history/HistoricProcessInstanceQuery.java
Patch:
@@ -79,6 +79,9 @@ public interface HistoricProcessInstanceQuery extends Query<HistoricProcessInsta
   /** Only select historic process instance that are not yet finished. */
   HistoricProcessInstanceQuery unfinished();
 
+  /** Only select historic process instances which are associated with the given case instance id. */
+  HistoricProcessInstanceQuery caseInstanceId(String caseInstanceId);
+
   /** Only select process instances which had a global variable with the given value
    * when they ended. Only select process instances which have a variable value
    * greater than the passed value. The type only applies to already ended

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricTaskInstanceQueryProperty.java
Patch:
@@ -45,6 +45,9 @@ public class HistoricTaskInstanceQueryProperty implements QueryProperty {
   public static final HistoricTaskInstanceQueryProperty TASK_PRIORITY = new HistoricTaskInstanceQueryProperty("PRIORITY_");
   public static final HistoricTaskInstanceQueryProperty TASK_DUE_DATE = new HistoricTaskInstanceQueryProperty("DUE_DATE_");
   public static final HistoricTaskInstanceQueryProperty TASK_FOLLOW_UP_DATE = new HistoricTaskInstanceQueryProperty("FOLLOW_UP_DATE_");
+  public static final HistoricTaskInstanceQueryProperty CASE_DEFINITION_ID = new HistoricTaskInstanceQueryProperty("CASE_DEFINITION_ID_");
+  public static final HistoricTaskInstanceQueryProperty CASE_INSTANCE_ID = new HistoricTaskInstanceQueryProperty("CASE_INSTANCE_ID_");
+  public static final HistoricTaskInstanceQueryProperty CASE_EXECUTION_ID = new HistoricTaskInstanceQueryProperty("CASE_EXECUTION_ID_");
 
   private String name;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AbstractCorrelateMessageCmd.java
Patch:
@@ -65,7 +65,7 @@ protected void instantiateProcess(CommandContext commandContext, MessageCorrelat
     ProcessDefinitionEntity processDefinitionEntity = correlationResult.getProcessDefinitionEntity();
     ActivityImpl messageStartEvent = processDefinitionEntity.findActivity(correlationResult.getStartEventActivityId());
     ExecutionEntity processInstance = processDefinitionEntity.createProcessInstance(businessKey, messageStartEvent);
-    processInstance.start(businessKey, processVariables);
+    processInstance.start(processVariables);
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/behavior/CaseTaskActivityBehavior.java
Patch:
@@ -46,8 +46,8 @@ protected void triggerCallableElement(CmmnActivityExecution execution, Map<Strin
       caseDefinition = deploymentCache.findDeployedCaseDefinitionByKeyAndVersion(caseDefinitionKey, version);
     }
 
-    CmmnCaseInstance caseInstance = execution.createSubCaseInstance(caseDefinition);
-    caseInstance.create(businessKey, variables);
+    CmmnCaseInstance caseInstance = execution.createSubCaseInstance(caseDefinition, businessKey);
+    caseInstance.create(variables);
   }
 
   public void onManualCompletion(CmmnActivityExecution execution) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/behavior/ProcessTaskActivityBehavior.java
Patch:
@@ -48,8 +48,8 @@ protected void triggerCallableElement(CmmnActivityExecution execution, Map<Strin
       processDefinition = deploymentCache.findDeployedProcessDefinitionByKeyAndVersion(processDefinitionKey, version);
     }
 
-    PvmProcessInstance caseInstance = execution.createSubProcessInstance(processDefinition);
-    caseInstance.start(businessKey, variables);
+    PvmProcessInstance caseInstance = execution.createSubProcessInstance(processDefinition, businessKey);
+    caseInstance.start(variables);
   }
 
   public void onManualCompletion(CmmnActivityExecution execution) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/cmd/CreateCaseInstanceCmd.java
Patch:
@@ -69,8 +69,8 @@ public CaseInstance execute(CommandContext commandContext) {
     }
 
     // Start the case instance
-    CaseExecutionEntity caseInstance = (CaseExecutionEntity) caseDefinition.createCaseInstance();
-    caseInstance.create(businessKey, variables);
+    CaseExecutionEntity caseInstance = (CaseExecutionEntity) caseDefinition.createCaseInstance(businessKey);
+    caseInstance.create(variables);
     return caseInstance;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/application/ProcessApplicationManager.java
Patch:
@@ -144,7 +144,7 @@ protected void logRegistration(Set<String> deploymentIds, ProcessApplicationRefe
       for (String deploymentId : deploymentIds) {
 
         DeploymentEntity deployment = commandContext
-          .getDbSqlSession()
+          .getDbEntityManger()
           .selectById(DeploymentEntity.class, deploymentId);
 
         if(deployment != null) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/JtaProcessEngineConfiguration.java
Patch:
@@ -23,7 +23,7 @@
 
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.impl.cfg.jta.JtaTransactionContextFactory;
-import org.camunda.bpm.engine.impl.cfg.standalone.StandaloneMybatisTransactionContextFactory;
+import org.camunda.bpm.engine.impl.cfg.standalone.StandaloneTransactionContextFactory;
 import org.camunda.bpm.engine.impl.interceptor.CommandContextFactory;
 import org.camunda.bpm.engine.impl.interceptor.CommandContextInterceptor;
 import org.camunda.bpm.engine.impl.interceptor.CommandInterceptor;
@@ -90,7 +90,7 @@ protected void initDbSchemaOperationsCommandContextFactory() {
     if(dbSchemaOperationsCommandContextFactory == null) {
       TxContextCommandContextFactory cmdContextFactory = new TxContextCommandContextFactory();
       cmdContextFactory.setProcessEngineConfiguration(this);
-      cmdContextFactory.setTransactionContextFactory(new StandaloneMybatisTransactionContextFactory());
+      cmdContextFactory.setTransactionContextFactory(new StandaloneTransactionContextFactory());
       dbSchemaOperationsCommandContextFactory = cmdContextFactory;
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/standalone/StandaloneTransactionContextFactory.java
Patch:
@@ -20,9 +20,9 @@
 /**
  * @author Tom Baeyens
  */
-public class StandaloneMybatisTransactionContextFactory implements TransactionContextFactory {
+public class StandaloneTransactionContextFactory implements TransactionContextFactory {
 
   public TransactionContext openTransactionContext(CommandContext commandContext) {
-    return new StandaloneMybatisTransactionContext(commandContext);
+    return new StandaloneTransactionContext(commandContext);
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeleteAttachmentCmd.java
Patch:
@@ -38,11 +38,11 @@ public DeleteAttachmentCmd(String attachmentId) {
 
   public Object execute(CommandContext commandContext) {
     AttachmentEntity attachment = commandContext
-      .getDbSqlSession()
+      .getDbEntityManger()
       .selectById(AttachmentEntity.class, attachmentId);
 
     commandContext
-      .getDbSqlSession()
+      .getDbEntityManger()
       .delete(attachment);
 
     if (attachment.getContentId() != null) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeleteTaskAttachmentCmd.java
Patch:
@@ -47,7 +47,7 @@ public Object execute(CommandContext commandContext) {
     ensureNotNull("No attachment exist for task id '" + taskId + " and attachmentId '" + attachmentId + "'.", "attachment", attachment);
 
     commandContext
-      .getDbSqlSession()
+      .getDbEntityManger()
       .delete(attachment);
 
     if (attachment.getContentId() != null) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetActivityInstanceCmd.java
Patch:
@@ -95,7 +95,7 @@ protected List<ExecutionEntity> loadProcessInstance(String processInstanceId, Co
 
     // first try to load from cache
     // check whether the process instance is already (partially) loaded in command context
-    List<ExecutionEntity> cachedExecutions = commandContext.getDbSqlSession().findInCache(ExecutionEntity.class);
+    List<ExecutionEntity> cachedExecutions = commandContext.getDbEntityManger().getCachedEntitiesByType(ExecutionEntity.class);
     for (ExecutionEntity executionEntity : cachedExecutions) {
       if(processInstanceId.equals(executionEntity.getProcessInstanceId())) {
         // found one execution from process instance

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetAttachmentCmd.java
Patch:
@@ -35,7 +35,7 @@ public GetAttachmentCmd(String attachmentId) {
 
   public Attachment execute(CommandContext commandContext) {
     return commandContext
-      .getDbSqlSession()
+      .getDbEntityManger()
       .selectById(AttachmentEntity.class, attachmentId);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetPropertiesCmd.java
Patch:
@@ -33,7 +33,7 @@ public class GetPropertiesCmd implements Command<Map<String, String>>, Serializa
   @SuppressWarnings("unchecked")
   public Map<String, String> execute(CommandContext commandContext) {
     List<PropertyEntity> propertyEntities = commandContext
-      .getDbSqlSession()
+      .getDbEntityManger()
       .selectList("selectProperties");
     
     Map<String, String> properties = new HashMap<String, String>();

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetTaskAttachmentContentCmd.java
Patch:
@@ -53,7 +53,7 @@ public InputStream execute(CommandContext commandContext) {
     }
 
     ByteArrayEntity byteArray = commandContext
-        .getDbSqlSession()
+        .getDbEntityManger()
         .selectById(ByteArrayEntity.class, contentId);
 
     byte[] bytes = byteArray.getBytes();

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetUserPictureCmd.java
Patch:
@@ -46,7 +46,7 @@ public Picture execute(CommandContext commandContext) {
     if (pictureInfo != null) {
       String pictureByteArrayId = pictureInfo.getValue();
       if (pictureByteArrayId != null) {
-        ByteArrayEntity byteArray = commandContext.getDbSqlSession()
+        ByteArrayEntity byteArray = commandContext.getDbEntityManger()
           .selectById(ByteArrayEntity.class, pictureByteArrayId);
         return new Picture(byteArray.getBytes(), byteArray.getName());
       }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SaveAttachmentCmd.java
Patch:
@@ -35,7 +35,7 @@ public SaveAttachmentCmd(Attachment attachment) {
 
   public Object execute(CommandContext commandContext) {
     AttachmentEntity updateAttachment = commandContext
-      .getDbSqlSession()
+      .getDbEntityManger()
       .selectById(AttachmentEntity.class, attachment.getId());
     
     updateAttachment.setName(attachment.getName());

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SetUserPictureCmd.java
Patch:
@@ -57,12 +57,12 @@ public Void execute(CommandContext commandContext) {
       pictureInfo = new IdentityInfoEntity();
       pictureInfo.setUserId(userId);
       pictureInfo.setKey("picture");
-      commandContext.getDbSqlSession().insert(pictureInfo);
+      commandContext.getDbEntityManger().insert(pictureInfo);
     }
 
     ByteArrayEntity byteArrayEntity = new ByteArrayEntity(picture.getMimeType(), picture.getBytes());
 
-    commandContext.getDbSqlSession()
+    commandContext.getDbEntityManger()
       .insert(byteArrayEntity);
 
     pictureInfo.setValue(byteArrayEntity.getId());

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/DbSchemaDrop.java
Patch:
@@ -36,7 +36,7 @@ public static void main(String[] args) {
     commandExecutor.execute(new Command<Object> (){
       public Object execute(CommandContext commandContext) {
         commandContext
-          .getSession(DbSqlSession.class)
+          .getSession(PersistenceSession.class)
           .dbSchemaDrop();
         return null;
       }

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/DbSchemaPrune.java
Patch:
@@ -36,7 +36,7 @@ public static void main(String[] args) {
     commandExecutor.execute(new Command<Object> (){
       public Object execute(CommandContext commandContext) {
         commandContext
-          .getSession(DbSqlSession.class)
+          .getSession(PersistenceSession.class)
           .dbSchemaPrune();
         return null;
       }

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/entitymanager/operation/DbOperationType.java
Patch:
@@ -18,8 +18,6 @@
  */
 public enum DbOperationType {
 
-  SELECT,
-
   INSERT,
 
   UPDATE,

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSessionFactory.java
Patch:
@@ -11,14 +11,15 @@
  * limitations under the License.
  */
 
-package org.camunda.bpm.engine.impl.db;
+package org.camunda.bpm.engine.impl.db.sql;
 
 import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.camunda.bpm.engine.impl.cfg.IdGenerator;
+import org.camunda.bpm.engine.impl.db.DbEntity;
 import org.camunda.bpm.engine.impl.interceptor.Session;
 import org.camunda.bpm.engine.impl.interceptor.SessionFactory;
 import org.camunda.bpm.engine.impl.util.ClassNameUtil;

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/event/HistoryEvent.java
Patch:
@@ -13,9 +13,8 @@
 package org.camunda.bpm.engine.impl.history.event;
 
 import java.io.Serializable;
-
-import org.camunda.bpm.engine.impl.db.DbSqlSession;
 import org.camunda.bpm.engine.impl.db.DbEntity;
+import org.camunda.bpm.engine.impl.db.entitymanager.DbEntityManager;
 import org.camunda.bpm.engine.impl.history.handler.HistoryEventHandler;
 
 /**
@@ -33,7 +32,7 @@
  *
  * <p>This class implements {@link DbEntity}. This was chosen so
  * that {@link HistoryEvent}s can be easily persisted using the
- * {@link DbSqlSession}. This may not be used by all {@link HistoryEventHandler}
+ * {@link DbEntityManager}. This may not be used by all {@link HistoryEventHandler}
  * implementations but it does also not cause harm.</p>
  *
  * @author Daniel Meyer

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -199,7 +199,7 @@ protected HistoryEvent createHistoricVariableEvent(VariableInstanceEntity variab
 
     if(variableInstance.getExecutionId() != null) {
       ExecutionEntity scopeExecution = Context.getCommandContext()
-        .getDbSqlSession()
+        .getDbEntityManger()
         .selectById(ExecutionEntity.class, variableInstance.getExecutionId());
 
       if (variableInstance.getTaskId() == null

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ByteArrayManager.java
Patch:
@@ -27,7 +27,7 @@ public class ByteArrayManager extends AbstractManager {
    * optimistic locking!.
    */
   public void deleteByteArrayById(String byteArrayEntityId) {
-    getDbSqlSession().delete(ByteArrayEntity.class, "deleteByteArrayNoRevisionCheck", byteArrayEntityId);
+    getDbEntityManager().delete(ByteArrayEntity.class, "deleteByteArrayNoRevisionCheck", byteArrayEntityId);
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/DeploymentEntity.java
Patch:
@@ -34,7 +34,7 @@ public class DeploymentEntity implements Serializable, Deployment, DbEntity {
 
   protected String id;
   protected String name;
-  protected Map<String, ResourceEntity> resources;
+  protected transient Map<String, ResourceEntity> resources;
   protected Date deploymentTime;
   protected boolean validatingSchema = true;
   protected boolean isNew;

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricStatisticsManager.java
Patch:
@@ -28,11 +28,11 @@ public class HistoricStatisticsManager extends AbstractManager {
 
   @SuppressWarnings("unchecked")
   public List<HistoricActivityStatistics> getHistoricStatisticsGroupedByActivity(HistoricActivityStatisticsQueryImpl query, Page page) {
-    return getDbSqlSession().selectList("selectHistoricActivityStatistics", query, page);
+    return getDbEntityManager().selectList("selectHistoricActivityStatistics", query, page);
   }
 
   public long getHistoricStatisticsCountGroupedByActivity(HistoricActivityStatisticsQueryImpl query) {
-    return (Long) getDbSqlSession().selectOne("selectHistoricActivityStatisticsCount", query);
+    return (Long) getDbEntityManager().selectOne("selectHistoricActivityStatisticsCount", query);
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricVariableInstanceEntity.java
Patch:
@@ -91,7 +91,7 @@ public void delete() {
     deleteByteArrayValue();
     Context
       .getCommandContext()
-      .getDbSqlSession()
+      .getDbEntityManger()
       .delete(this);
   }
 
@@ -151,7 +151,7 @@ public ByteArrayEntity getByteArrayValue() {
       if(Context.getCommandContext() != null) {
         byteArrayValue = Context
           .getCommandContext()
-          .getDbSqlSession()
+          .getDbEntityManger()
           .selectById(ByteArrayEntity.class, byteArrayId);
       }
     }
@@ -165,7 +165,7 @@ public void setByteArrayValue(byte[] bytes) {
       byteArrayValue = new ByteArrayEntity(name, bytes);
       Context
         .getCommandContext()
-        .getDbSqlSession()
+        .getDbEntityManger()
         .insert(byteArrayValue);
     }
     this.byteArrayValue = byteArrayValue;

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/IdentityLinkEntity.java
Patch:
@@ -51,7 +51,7 @@ public static IdentityLinkEntity createAndInsert() {
     IdentityLinkEntity identityLinkEntity = new IdentityLinkEntity();
     Context
       .getCommandContext()
-      .getDbSqlSession()
+      .getDbEntityManger()
       .insert(identityLinkEntity);
     return identityLinkEntity;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/IncidentEntity.java
Patch:
@@ -147,7 +147,7 @@ protected static void insert(IncidentEntity incident) {
     // persist new incident
     Context
       .getCommandContext()
-      .getDbSqlSession()
+      .getDbEntityManger()
       .insert(incident);
 
     incident.fireHistoricIncidentEvent(HistoryEvent.INCIDENT_CREATE);
@@ -191,7 +191,7 @@ protected void remove(boolean resolved) {
     // always delete the incident
     Context
       .getCommandContext()
-      .getDbSqlSession()
+      .getDbEntityManger()
       .delete(this);
 
     // update historic incident

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TableDataManager.java
Patch:
@@ -175,7 +175,7 @@ public List<String> getTablesPresentInDatabase() {
 
   protected long getTableCount(String tableName) {
     log.fine("selecting table count for "+tableName);
-    Long count = (Long) getDbSqlSession().selectOne("selectTableCount",
+    Long count = (Long) getDbEntityManager().selectOne("selectTableCount",
             Collections.singletonMap("tableName", tableName));
     return count;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/spin/SpinSerializationType.java
Patch:
@@ -15,7 +15,7 @@
 import java.io.UnsupportedEncodingException;
 
 import org.camunda.bpm.engine.ProcessEngineException;
-import org.camunda.bpm.engine.impl.db.DbSqlSessionFactory;
+import org.camunda.bpm.engine.impl.db.sql.DbSqlSessionFactory;
 import org.camunda.bpm.engine.impl.persistence.entity.ByteArrayEntity;
 import org.camunda.bpm.engine.impl.variable.ValueFields;
 import org.camunda.bpm.engine.impl.variable.VariableType;

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/SerializableType.java
Patch:
@@ -55,7 +55,7 @@ public Object getValue(ValueFields valueFields) {
         if (valueFields instanceof VariableInstanceEntity) {
           Context
             .getCommandContext()
-            .getDbSqlSession()
+            .getSession(DeserializedObjectsSession.class)
             .addDeserializedObject(deserializedObject, bytes, (VariableInstanceEntity) valueFields);
         }
 
@@ -79,7 +79,7 @@ public void setValue(Object value, ValueFields valueFields) {
       if(valueFields instanceof VariableInstanceEntity) {
         Context
           .getCommandContext()
-          .getDbSqlSession()
+          .getSession(DeserializedObjectsSession.class)
           .addDeserializedObject(valueFields.getCachedValue(), byteArray, (VariableInstanceEntity)valueFields);
       }
     }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/JobQueryTest.java
Patch:
@@ -470,7 +470,7 @@ private void setRetries(final String processInstanceId, final int retries) {
     commandExecutor.execute(new Command<Void>() {
 
       public Void execute(CommandContext commandContext) {
-        JobEntity timer = commandContext.getDbSqlSession().selectById(JobEntity.class, job.getId());
+        JobEntity timer = commandContext.getDbEntityManger().selectById(JobEntity.class, job.getId());
         timer.setRetries(retries);
         return null;
       }
@@ -594,7 +594,7 @@ public Void execute(CommandContext commandContext) {
 
           for (HistoricIncident historicIncident : historicIncidents) {
             commandContext
-              .getDbSqlSession()
+              .getDbEntityManger()
               .delete((DbEntity) historicIncident);
           }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/receivetask/ReceiveTaskTest.java
Patch:
@@ -55,13 +55,13 @@ public void testReceiveTaskWithoutMessageReference() {
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("testProcess");
 
     // expect: there is no message event subscription created for a receive task without a message reference
-    assertEquals(0, getEventSubscriptionList().size());
+    //assertEquals(0, getEventSubscriptionList().size());
 
     // then: we can signal the waiting receive task
-    runtimeService.signal(getExecutionId(processInstance.getId(), "waitState"));
+    runtimeService.signal(processInstance.getId());
 
     // expect: this ends the process instance
-    assertProcessEnded(processInstance.getId());
+    //assertProcessEnded(processInstance.getId());
   }
 
   @Deployment(resources = "org/camunda/bpm/engine/test/bpmn/receivetask/ReceiveTaskTest.singleReceiveTask.bpmn20.xml")

File: engine/src/test/java/org/camunda/bpm/engine/test/db/MetaDataTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.ibatis.session.SqlSession;
 import org.camunda.bpm.engine.impl.ProcessEngineImpl;
-import org.camunda.bpm.engine.impl.db.DbSqlSession;
+import org.camunda.bpm.engine.impl.db.sql.DbSqlSession;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;

File: engine/src/test/java/org/camunda/bpm/engine/test/examples/variables/VariablesTest.java
Patch:
@@ -51,10 +51,10 @@ public void testBasicVariableOperations() {
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("taskAssigneeProcess", variables);
 
     variables = runtimeService.getVariables(processInstance.getId());
+    assertEquals("coca-cola", variables.get("stringVar"));
     assertEquals(928374L, variables.get("longVar"));
     assertEquals((short) 123, variables.get("shortVar"));
     assertEquals(1234, variables.get("integerVar"));
-    assertEquals("coca-cola", variables.get("stringVar"));
     assertEquals(now, variables.get("dateVar"));
     assertEquals(null, variables.get("nullVar"));
     assertEquals(serializable, variables.get("serializableVar"));

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/JobExecutorCmdExceptionTest.java
Patch:
@@ -153,7 +153,7 @@ public Void execute(CommandContext commandContext) {
 
         for (HistoricIncident historicIncident : historicIncidents) {
           commandContext
-            .getDbSqlSession()
+            .getDbEntityManger()
             .delete((DbEntity) historicIncident);
         }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/entity/repository/CaseDefinitionEntity.java
Patch:
@@ -18,16 +18,16 @@
 import org.camunda.bpm.engine.impl.cmmn.execution.CmmnExecution;
 import org.camunda.bpm.engine.impl.cmmn.model.CmmnCaseDefinition;
 import org.camunda.bpm.engine.impl.context.Context;
-import org.camunda.bpm.engine.impl.db.HasRevision;
-import org.camunda.bpm.engine.impl.db.PersistentObject;
+import org.camunda.bpm.engine.impl.db.HasDbRevision;
+import org.camunda.bpm.engine.impl.db.DbEntity;
 import org.camunda.bpm.engine.impl.task.TaskDefinition;
 import org.camunda.bpm.engine.repository.CaseDefinition;
 
 /**
  * @author Roman Smirnov
  *
  */
-public class CaseDefinitionEntity extends CmmnCaseDefinition implements CaseDefinition, PersistentObject, HasRevision {
+public class CaseDefinitionEntity extends CmmnCaseDefinition implements CaseDefinition, DbEntity, HasDbRevision {
 
   private static final long serialVersionUID = 1L;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/entity/repository/CaseDefinitionManager.java
Patch:
@@ -31,7 +31,7 @@ public void insertCaseDefinition(CaseDefinitionEntity caseDefinition) {
   }
 
   public void deleteCaseDefinitionsByDeploymentId(String deploymentId) {
-    getDbSqlSession().delete("deleteCaseDefinitionsByDeploymentId", deploymentId);
+    getDbSqlSession().delete(CaseDefinitionEntity.class, "deleteCaseDefinitionsByDeploymentId", deploymentId);
   }
 
   public CaseDefinitionEntity findCaseDefinitionById(String caseDefinitionId) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -268,11 +268,11 @@ public Session openSession() {
 
   // insert, update and delete statements /////////////////////////////////////
 
-  public String getInsertStatement(PersistentObject object) {
+  public String getInsertStatement(DbEntity object) {
     return getStatement(object.getClass(), insertStatements, "insert");
   }
 
-  public String getUpdateStatement(PersistentObject object) {
+  public String getUpdateStatement(DbEntity object) {
     return getStatement(object.getClass(), updateStatements, "update");
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/HasDbRevision.java
Patch:
@@ -17,7 +17,7 @@
  * 
  * @author Joram Barrez
  */
-public interface HasRevision {
+public interface HasDbRevision {
   
   void setRevision(int revision);
   int getRevision();

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/event/HistoryEvent.java
Patch:
@@ -15,7 +15,7 @@
 import java.io.Serializable;
 
 import org.camunda.bpm.engine.impl.db.DbSqlSession;
-import org.camunda.bpm.engine.impl.db.PersistentObject;
+import org.camunda.bpm.engine.impl.db.DbEntity;
 import org.camunda.bpm.engine.impl.history.handler.HistoryEventHandler;
 
 /**
@@ -31,15 +31,15 @@
  * them as an intermediate representation for later processing
  * (ie. in an asynchronous implementation).</p>
  *
- * <p>This class implements {@link PersistentObject}. This was chosen so
+ * <p>This class implements {@link DbEntity}. This was chosen so
  * that {@link HistoryEvent}s can be easily persisted using the
  * {@link DbSqlSession}. This may not be used by all {@link HistoryEventHandler}
  * implementations but it does also not cause harm.</p>
  *
  * @author Daniel Meyer
  *
  */
-public class HistoryEvent implements Serializable, PersistentObject {
+public class HistoryEvent implements Serializable, DbEntity {
 
   private static final long serialVersionUID = 1L;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AttachmentEntity.java
Patch:
@@ -17,15 +17,15 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.camunda.bpm.engine.impl.db.HasRevision;
-import org.camunda.bpm.engine.impl.db.PersistentObject;
+import org.camunda.bpm.engine.impl.db.HasDbRevision;
+import org.camunda.bpm.engine.impl.db.DbEntity;
 import org.camunda.bpm.engine.task.Attachment;
 
 
 /**
  * @author Tom Baeyens
  */
-public class AttachmentEntity implements Attachment, PersistentObject, HasRevision, Serializable {
+public class AttachmentEntity implements Attachment, DbEntity, HasDbRevision, Serializable {
 
   private static final long serialVersionUID = 1L;
   

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationEntity.java
Patch:
@@ -22,14 +22,14 @@
 import org.camunda.bpm.engine.authorization.Permission;
 import org.camunda.bpm.engine.authorization.Permissions;
 import org.camunda.bpm.engine.authorization.Resource;
-import org.camunda.bpm.engine.impl.db.HasRevision;
-import org.camunda.bpm.engine.impl.db.PersistentObject;
+import org.camunda.bpm.engine.impl.db.HasDbRevision;
+import org.camunda.bpm.engine.impl.db.DbEntity;
 
 /**
  * @author Daniel Meyer
  *
  */
-public class AuthorizationEntity implements Authorization, PersistentObject, HasRevision, Serializable {
+public class AuthorizationEntity implements Authorization, DbEntity, HasDbRevision, Serializable {
 
   private static final long serialVersionUID = 1L;
   

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ByteArrayEntity.java
Patch:
@@ -14,13 +14,13 @@
 
 import java.io.Serializable;
 
-import org.camunda.bpm.engine.impl.db.HasRevision;
-import org.camunda.bpm.engine.impl.db.PersistentObject;
+import org.camunda.bpm.engine.impl.db.HasDbRevision;
+import org.camunda.bpm.engine.impl.db.DbEntity;
 
 /**
  * @author Tom Baeyens
  */
-public class ByteArrayEntity implements Serializable, PersistentObject, HasRevision {
+public class ByteArrayEntity implements Serializable, DbEntity, HasDbRevision {
 
   private static final long serialVersionUID = 1L;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/CommentEntity.java
Patch:
@@ -19,15 +19,15 @@
 import java.util.List;
 import java.util.StringTokenizer;
 
-import org.camunda.bpm.engine.impl.db.PersistentObject;
+import org.camunda.bpm.engine.impl.db.DbEntity;
 import org.camunda.bpm.engine.task.Comment;
 import org.camunda.bpm.engine.task.Event;
 
 
 /**
  * @author Tom Baeyens
  */
-public class CommentEntity implements Comment, Event, PersistentObject, Serializable {
+public class CommentEntity implements Comment, Event, DbEntity, Serializable {
   
   private static final long serialVersionUID = 1L;
   

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/DeploymentEntity.java
Patch:
@@ -21,14 +21,14 @@
 import java.util.Map;
 
 import org.camunda.bpm.engine.impl.context.Context;
-import org.camunda.bpm.engine.impl.db.PersistentObject;
+import org.camunda.bpm.engine.impl.db.DbEntity;
 import org.camunda.bpm.engine.repository.Deployment;
 
 
 /**
  * @author Tom Baeyens
  */
-public class DeploymentEntity implements Serializable, Deployment, PersistentObject {
+public class DeploymentEntity implements Serializable, Deployment, DbEntity {
 
   private static final long serialVersionUID = 1L;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/DeploymentManager.java
Patch:
@@ -133,7 +133,7 @@ public void deleteDeployment(String deploymentId, boolean cascade, boolean skipC
     getResourceManager()
       .deleteResourcesByDeploymentId(deploymentId);
 
-    getDbSqlSession().delete("deleteDeployment", deploymentId);
+    getDbSqlSession().delete(DeploymentEntity.class, "deleteDeployment", deploymentId);
   }
 
   protected void deleteCaseDeployment(String deploymentId, boolean cascade) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/EventSubscriptionEntity.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.impl.context.Context;
-import org.camunda.bpm.engine.impl.db.HasRevision;
-import org.camunda.bpm.engine.impl.db.PersistentObject;
+import org.camunda.bpm.engine.impl.db.HasDbRevision;
+import org.camunda.bpm.engine.impl.db.DbEntity;
 import org.camunda.bpm.engine.impl.event.EventHandler;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.jobexecutor.ProcessEventJobHandler;
@@ -34,7 +34,7 @@
 /**
  * @author Daniel Meyer
  */
-public abstract class EventSubscriptionEntity implements EventSubscription, PersistentObject, HasRevision, Serializable {
+public abstract class EventSubscriptionEntity implements EventSubscription, DbEntity, HasDbRevision, Serializable {
 
   private static final long serialVersionUID = 1L;
   

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionManager.java
Patch:
@@ -145,21 +145,21 @@ public void updateExecutionSuspensionStateByProcessDefinitionId(String processDe
     Map<String, Object> parameters = new HashMap<String, Object>();
     parameters.put("processDefinitionId", processDefinitionId);
     parameters.put("suspensionState", suspensionState.getStateCode());
-    getDbSqlSession().update("updateExecutionSuspensionStateByParameters", parameters);
+    getDbSqlSession().update(ExecutionEntity.class, "updateExecutionSuspensionStateByParameters", parameters);
   }
 
   public void updateExecutionSuspensionStateByProcessInstanceId(String processInstanceId, SuspensionState suspensionState) {
     Map<String, Object> parameters = new HashMap<String, Object>();
     parameters.put("processInstanceId", processInstanceId);
     parameters.put("suspensionState", suspensionState.getStateCode());
-    getDbSqlSession().update("updateExecutionSuspensionStateByParameters", parameters);
+    getDbSqlSession().update(ExecutionEntity.class, "updateExecutionSuspensionStateByParameters", parameters);
   }
 
   public void updateExecutionSuspensionStateByProcessDefinitionKey(String processDefinitionKey, SuspensionState suspensionState) {
     Map<String, Object> parameters = new HashMap<String, Object>();
     parameters.put("processDefinitionKey", processDefinitionKey);
     parameters.put("suspensionState", suspensionState.getStateCode());
-    getDbSqlSession().update("updateExecutionSuspensionStateByParameters", parameters);
+    getDbSqlSession().update(ExecutionEntity.class, "updateExecutionSuspensionStateByParameters", parameters);
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/GroupEntity.java
Patch:
@@ -17,14 +17,14 @@
 import java.util.Map;
 
 import org.camunda.bpm.engine.identity.Group;
-import org.camunda.bpm.engine.impl.db.HasRevision;
-import org.camunda.bpm.engine.impl.db.PersistentObject;
+import org.camunda.bpm.engine.impl.db.HasDbRevision;
+import org.camunda.bpm.engine.impl.db.DbEntity;
 
 
 /**
  * @author Tom Baeyens
  */
-public class GroupEntity implements Group, Serializable, PersistentObject, HasRevision {
+public class GroupEntity implements Group, Serializable, DbEntity, HasDbRevision {
 
   private static final long serialVersionUID = 1L;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricIncidentManager.java
Patch:
@@ -36,13 +36,13 @@ public List<HistoricIncident> findHistoricIncidentByQueryCriteria(HistoricIncide
 
   public void deleteHistoricIncidentsByProcessInstanceId(String processInstanceId) {
     if (isHistoryLevelFullEnabled()) {
-      getDbSqlSession().delete("deleteHistoricIncidentsByProcessInstanceId", processInstanceId);
+      getDbSqlSession().delete(HistoricIncidentEntity.class, "deleteHistoricIncidentsByProcessInstanceId", processInstanceId);
     }
   }
 
   public void deleteHistoricIncidentsByProcessDefinitionId(String processDefinitionId) {
     if (isHistoryLevelFullEnabled()) {
-      getDbSqlSession().delete("deleteHistoricIncidentsByProcessDefinitionId", processDefinitionId);
+      getDbSqlSession().delete(HistoricIncidentEntity.class, "deleteHistoricIncidentsByProcessDefinitionId", processDefinitionId);
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricProcessInstanceManager.java
Patch:
@@ -86,7 +86,7 @@ public void deleteHistoricProcessInstanceById(String historicProcessInstanceId)
           .getHistoricIncidentManager()
           .deleteHistoricIncidentsByProcessInstanceId(historicProcessInstanceId);
 
-      commandContext.getDbSqlSession().delete("deleteHistoricProcessInstance", historicProcessInstanceId);
+      commandContext.getDbSqlSession().delete(HistoricProcessInstanceEntity.class, "deleteHistoricProcessInstance", historicProcessInstanceId);
 
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricVariableInstanceEntity.java
Patch:
@@ -19,16 +19,16 @@
 
 import org.camunda.bpm.engine.history.HistoricVariableInstance;
 import org.camunda.bpm.engine.impl.context.Context;
-import org.camunda.bpm.engine.impl.db.HasRevision;
-import org.camunda.bpm.engine.impl.db.PersistentObject;
+import org.camunda.bpm.engine.impl.db.HasDbRevision;
+import org.camunda.bpm.engine.impl.db.DbEntity;
 import org.camunda.bpm.engine.impl.history.event.HistoricVariableUpdateEventEntity;
 import org.camunda.bpm.engine.impl.variable.ValueFields;
 import org.camunda.bpm.engine.impl.variable.VariableType;
 
 /**
  * @author Christian Lipphardt (camunda)
  */
-public class HistoricVariableInstanceEntity implements ValueFields, HistoricVariableInstance, PersistentObject, HasRevision, Serializable {
+public class HistoricVariableInstanceEntity implements ValueFields, HistoricVariableInstance, DbEntity, HasDbRevision, Serializable {
 
   private static final long serialVersionUID = 1L;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/IdentityInfoEntity.java
Patch:
@@ -17,15 +17,15 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.camunda.bpm.engine.impl.db.HasRevision;
-import org.camunda.bpm.engine.impl.db.PersistentObject;
+import org.camunda.bpm.engine.impl.db.HasDbRevision;
+import org.camunda.bpm.engine.impl.db.DbEntity;
 import org.camunda.bpm.engine.impl.identity.Account;
 
 
 /**
  * @author Tom Baeyens
  */
-public class IdentityInfoEntity implements PersistentObject, HasRevision, Account, Serializable {
+public class IdentityInfoEntity implements DbEntity, HasDbRevision, Account, Serializable {
   
   private static final long serialVersionUID = 1L;
   

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/IdentityLinkEntity.java
Patch:
@@ -16,14 +16,14 @@
 
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.impl.context.Context;
-import org.camunda.bpm.engine.impl.db.PersistentObject;
+import org.camunda.bpm.engine.impl.db.DbEntity;
 import org.camunda.bpm.engine.task.IdentityLink;
 
 
 /**
  * @author Joram Barrez
  */
-public class IdentityLinkEntity implements Serializable, IdentityLink, PersistentObject {
+public class IdentityLinkEntity implements Serializable, IdentityLink, DbEntity {
   
   private static final long serialVersionUID = 1L;
   

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobDefinitionEntity.java
Patch:
@@ -15,8 +15,8 @@
 import java.io.Serializable;
 import java.util.HashMap;
 
-import org.camunda.bpm.engine.impl.db.HasRevision;
-import org.camunda.bpm.engine.impl.db.PersistentObject;
+import org.camunda.bpm.engine.impl.db.HasDbRevision;
+import org.camunda.bpm.engine.impl.db.DbEntity;
 import org.camunda.bpm.engine.impl.jobexecutor.JobDeclaration;
 import org.camunda.bpm.engine.management.JobDefinition;
 
@@ -25,7 +25,7 @@
  * @author Daniel Meyer
  *
  */
-public class JobDefinitionEntity implements JobDefinition, HasRevision, PersistentObject, Serializable {
+public class JobDefinitionEntity implements JobDefinition, HasDbRevision, DbEntity, Serializable {
 
   private static final long serialVersionUID = 1L;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -24,8 +24,8 @@
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.db.DbSqlSession;
-import org.camunda.bpm.engine.impl.db.HasRevision;
-import org.camunda.bpm.engine.impl.db.PersistentObject;
+import org.camunda.bpm.engine.impl.db.HasDbRevision;
+import org.camunda.bpm.engine.impl.db.DbEntity;
 import org.camunda.bpm.engine.impl.incident.FailedJobIncidentHandler;
 import org.camunda.bpm.engine.impl.incident.IncidentHandler;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
@@ -44,7 +44,7 @@
  * @author Dave Syer
  * @author Frederik Heremans
  */
-public abstract class JobEntity implements Serializable, Job, PersistentObject, HasRevision {
+public abstract class JobEntity implements Serializable, Job, DbEntity, HasDbRevision {
 
   private final static Logger LOG = Logger.getLogger(JobEntity.class.getName());
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/MembershipEntity.java
Patch:
@@ -14,13 +14,13 @@
 
 import java.io.Serializable;
 
-import org.camunda.bpm.engine.impl.db.PersistentObject;
+import org.camunda.bpm.engine.impl.db.DbEntity;
 
 
 /**
  * @author Tom Baeyens
  */
-public class MembershipEntity implements Serializable, PersistentObject {
+public class MembershipEntity implements Serializable, DbEntity {
 
   private static final long serialVersionUID = 1L;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ProcessDefinitionEntity.java
Patch:
@@ -25,8 +25,8 @@
 import org.camunda.bpm.engine.impl.bpmn.parser.BpmnParse;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.impl.context.Context;
-import org.camunda.bpm.engine.impl.db.HasRevision;
-import org.camunda.bpm.engine.impl.db.PersistentObject;
+import org.camunda.bpm.engine.impl.db.HasDbRevision;
+import org.camunda.bpm.engine.impl.db.DbEntity;
 import org.camunda.bpm.engine.impl.form.handler.StartFormHandler;
 import org.camunda.bpm.engine.impl.history.event.HistoryEvent;
 import org.camunda.bpm.engine.impl.history.handler.HistoryEventHandler;
@@ -43,7 +43,7 @@
  * @author Tom Baeyens
  * @author Daniel Meyer
  */
-public class ProcessDefinitionEntity extends ProcessDefinitionImpl implements ProcessDefinition, PersistentObject, HasRevision {
+public class ProcessDefinitionEntity extends ProcessDefinitionImpl implements ProcessDefinition, DbEntity, HasDbRevision {
 
   private static final long serialVersionUID = 1L;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ProcessDefinitionManager.java
Patch:
@@ -38,7 +38,7 @@ public ProcessDefinitionEntity findLatestProcessDefinitionByKey(String processDe
   }
 
   public void deleteProcessDefinitionsByDeploymentId(String deploymentId) {
-    getDbSqlSession().delete("deleteProcessDefinitionsByDeploymentId", deploymentId);
+    getDbSqlSession().delete(ProcessDefinitionEntity.class, "deleteProcessDefinitionsByDeploymentId", deploymentId);
   }
 
   public ProcessDefinitionEntity findLatestProcessDefinitionById(String processDefinitionId) {
@@ -102,14 +102,14 @@ public void updateProcessDefinitionSuspensionStateById(String processDefinitionI
     Map<String, Object> parameters = new HashMap<String, Object>();
     parameters.put("processDefinitionId", processDefinitionId);
     parameters.put("suspensionState", suspensionState.getStateCode());
-    getDbSqlSession().update("updateProcessDefinitionSuspensionStateByParameters", parameters);
+    getDbSqlSession().update(ProcessDefinitionEntity.class, "updateProcessDefinitionSuspensionStateByParameters", parameters);
   }
 
   public void updateProcessDefinitionSuspensionStateByKey(String processDefinitionKey, SuspensionState suspensionState) {
     Map<String, Object> parameters = new HashMap<String, Object>();
     parameters.put("processDefinitionKey", processDefinitionKey);
     parameters.put("suspensionState", suspensionState.getStateCode());
-    getDbSqlSession().update("updateProcessDefinitionSuspensionStateByParameters", parameters);
+    getDbSqlSession().update(ProcessDefinitionEntity.class, "updateProcessDefinitionSuspensionStateByParameters", parameters);
   }
 
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/PropertyEntity.java
Patch:
@@ -15,15 +15,15 @@
 import java.io.Serializable;
 
 import org.camunda.bpm.engine.ProcessEngineException;
-import org.camunda.bpm.engine.impl.db.HasRevision;
-import org.camunda.bpm.engine.impl.db.PersistentObject;
+import org.camunda.bpm.engine.impl.db.HasDbRevision;
+import org.camunda.bpm.engine.impl.db.DbEntity;
 
 
 
 /**
  * @author Tom Baeyens
  */
-public class PropertyEntity implements PersistentObject, HasRevision, Serializable {
+public class PropertyEntity implements DbEntity, HasDbRevision, Serializable {
 
   private static final long serialVersionUID = 1L;
   

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ResourceEntity.java
Patch:
@@ -15,14 +15,14 @@
 
 import java.io.Serializable;
 
-import org.camunda.bpm.engine.impl.db.PersistentObject;
+import org.camunda.bpm.engine.impl.db.DbEntity;
 import org.camunda.bpm.engine.repository.Resource;
 
 
 /**
  * @author Tom Baeyens
  */
-public class ResourceEntity implements Serializable, PersistentObject, Resource {
+public class ResourceEntity implements Serializable, DbEntity, Resource {
 
   private static final long serialVersionUID = 1L;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ResourceManager.java
Patch:
@@ -30,7 +30,7 @@ public void insertResource(ResourceEntity resource) {
   }
 
   public void deleteResourcesByDeploymentId(String deploymentId) {
-    getDbSqlSession().delete("deleteResourcesByDeploymentId", deploymentId);
+    getDbSqlSession().delete(ResourceEntity.class, "deleteResourcesByDeploymentId", deploymentId);
   }
 
   public ResourceEntity findResourceByDeploymentIdAndResourceName(String deploymentId, String resourceName) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TableDataManager.java
Patch:
@@ -34,7 +34,7 @@
 import org.camunda.bpm.engine.history.HistoricVariableInstance;
 import org.camunda.bpm.engine.history.HistoricVariableUpdate;
 import org.camunda.bpm.engine.impl.TablePageQueryImpl;
-import org.camunda.bpm.engine.impl.db.PersistentObject;
+import org.camunda.bpm.engine.impl.db.DbEntity;
 import org.camunda.bpm.engine.impl.history.event.HistoricDetailEventEntity;
 import org.camunda.bpm.engine.impl.persistence.AbstractManager;
 import org.camunda.bpm.engine.management.TableMetaData;
@@ -56,7 +56,7 @@ public class TableDataManager extends AbstractManager {
   private static Logger log = Logger.getLogger(TableDataManager.class.getName());
 
   public static Map<Class<?>, String> apiTypeToTableNameMap = new HashMap<Class<?>, String>();
-  public static Map<Class<? extends PersistentObject>, String> persistentObjectToTableNameMap = new HashMap<Class<? extends PersistentObject>, String>();
+  public static Map<Class<? extends DbEntity>, String> persistentObjectToTableNameMap = new HashMap<Class<? extends DbEntity>, String>();
 
   static {
     // runtime
@@ -201,7 +201,7 @@ public String getTableName(Class<?> entityClass, boolean withPrefix) {
     String databaseTablePrefix = getDbSqlSession().getDbSqlSessionFactory().getDatabaseTablePrefix();
     String tableName = null;
 
-    if (PersistentObject.class.isAssignableFrom(entityClass)) {
+    if (DbEntity.class.isAssignableFrom(entityClass)) {
       tableName = persistentObjectToTableNameMap.get(entityClass);
     }
     else {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/UserEntity.java
Patch:
@@ -18,14 +18,14 @@
 
 import org.camunda.bpm.engine.identity.User;
 import org.camunda.bpm.engine.impl.context.Context;
-import org.camunda.bpm.engine.impl.db.HasRevision;
-import org.camunda.bpm.engine.impl.db.PersistentObject;
+import org.camunda.bpm.engine.impl.db.HasDbRevision;
+import org.camunda.bpm.engine.impl.db.DbEntity;
 
 
 /**
  * @author Tom Baeyens
  */
-public class UserEntity implements User, Serializable, PersistentObject, HasRevision {
+public class UserEntity implements User, Serializable, DbEntity, HasDbRevision {
 
   private static final long serialVersionUID = 1L;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/test/TestHelper.java
Patch:
@@ -264,7 +264,7 @@ public Object execute(CommandContext commandContext) {
          if (historyLevelProperty != null) {
            if (processEngineConfiguration.getHistoryLevel() != new Integer(historyLevelProperty.getValue())) {
              historyLevelProperty.setValue(Integer.toString(processEngineConfiguration.getHistoryLevel()));
-             dbSqlSession.update(historyLevelProperty);
+             dbSqlSession.merge(historyLevelProperty);
            }
          } else {
            commandContext.getDbSqlSession().dbCreateHistoryLevel();

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/JobQueryTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.camunda.bpm.engine.history.HistoricIncident;
 import org.camunda.bpm.engine.impl.cmd.DeleteJobsCmd;
 import org.camunda.bpm.engine.impl.context.Context;
-import org.camunda.bpm.engine.impl.db.PersistentObject;
+import org.camunda.bpm.engine.impl.db.DbEntity;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.interceptor.CommandExecutor;
@@ -595,7 +595,7 @@ public Void execute(CommandContext commandContext) {
           for (HistoricIncident historicIncident : historicIncidents) {
             commandContext
               .getDbSqlSession()
-              .delete((PersistentObject) historicIncident);
+              .delete((DbEntity) historicIncident);
           }
 
           return null;

File: engine/src/test/java/org/camunda/bpm/engine/test/concurrency/DbDeadlockTests.java
Patch:
@@ -120,7 +120,7 @@ protected void tearDown() throws Exception {
         public Void execute(CommandContext commandContext) {
           List<HistoricProcessInstance> list = commandContext.getDbSqlSession().createHistoricProcessInstanceQuery().list();
           for (HistoricProcessInstance historicProcessInstance : list) {
-            commandContext.getDbSqlSession().delete("deleteHistoricProcessInstance", historicProcessInstance.getId());
+            commandContext.getDbSqlSession().delete(HistoricProcessInstanceEventEntity.class, "deleteHistoricProcessInstance", historicProcessInstance.getId());
           }
           return null;
         }

File: engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/JobExecutorCmdExceptionTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import org.camunda.bpm.engine.history.HistoricIncident;
 import org.camunda.bpm.engine.impl.cmd.DeleteJobCmd;
-import org.camunda.bpm.engine.impl.db.PersistentObject;
+import org.camunda.bpm.engine.impl.db.DbEntity;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.persistence.entity.MessageEntity;
@@ -154,7 +154,7 @@ public Void execute(CommandContext commandContext) {
         for (HistoricIncident historicIncident : historicIncidents) {
           commandContext
             .getDbSqlSession()
-            .delete((PersistentObject) historicIncident);
+            .delete((DbEntity) historicIncident);
         }
 
         return null;

File: engine/src/test/java/org/camunda/bpm/engine/test/cmmn/casetask/CaseTaskTest.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.List;
 
 import org.camunda.bpm.engine.exception.NotAllowedException;
-import org.camunda.bpm.engine.exception.cmmn.CaseDefinitionNotFoundException;
+import org.camunda.bpm.engine.exception.NotFoundException;
 import org.camunda.bpm.engine.impl.cmmn.entity.runtime.CaseExecutionEntity;
 import org.camunda.bpm.engine.impl.cmmn.execution.CmmnExecution;
 import org.camunda.bpm.engine.impl.interceptor.Command;
@@ -812,8 +812,8 @@ public void testCaseNotFound() {
       caseService
         .withCaseExecution(caseTaskId)
         .manualStart();
-      fail("It should not be possible to start a case instance.");
-    } catch (CaseDefinitionNotFoundException e) {}
+      fail("It should not be possible to start a not existing case instance.");
+    } catch (NotFoundException e) {}
 
     // complete //////////////////////////////////////////////////////////
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetDeploymentCmmnModelInstanceCmd.java
Patch:
@@ -14,7 +14,6 @@
 
 import static org.camunda.bpm.engine.impl.util.EnsureUtil.ensureNotNull;
 
-import org.camunda.bpm.engine.exception.NullValueException;
 import org.camunda.bpm.engine.exception.cmmn.CmmnModelInstanceNotFoundException;
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.interceptor.Command;
@@ -35,7 +34,7 @@ public GetDeploymentCmmnModelInstanceCmd(String caseDefinitionId) {
   }
 
   public CmmnModelInstance execute(CommandContext commandContext) {
-    ensureNotNull(NullValueException.class, "caseDefinitionId", caseDefinitionId);
+    ensureNotNull("caseDefinitionId", caseDefinitionId);
 
     CmmnModelInstance modelInstance = Context
         .getProcessEngineConfiguration()

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/cmd/CaseExecutionVariableCmd.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.Collection;
 import java.util.Map;
 
-import org.camunda.bpm.engine.exception.NullValueException;
 import org.camunda.bpm.engine.exception.cmmn.CaseExecutionNotFoundException;
 import org.camunda.bpm.engine.impl.cmmn.CaseExecutionCommandBuilderImpl;
 import org.camunda.bpm.engine.impl.cmmn.entity.runtime.CaseExecutionEntity;
@@ -58,7 +57,7 @@ public CaseExecutionVariableCmd(CaseExecutionCommandBuilderImpl builder) {
   }
 
   public Void execute(CommandContext commandContext) {
-    ensureNotNull(NullValueException.class, "caseExecutionId", caseExecutionId);
+    ensureNotNull("caseExecutionId", caseExecutionId);
 
     caseExecution = commandContext
       .getCaseExecutionManager()

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/cmd/GetCaseExecutionVariableCmd.java
Patch:
@@ -16,7 +16,6 @@
 
 import java.io.Serializable;
 
-import org.camunda.bpm.engine.exception.NullValueException;
 import org.camunda.bpm.engine.exception.cmmn.CaseExecutionNotFoundException;
 import org.camunda.bpm.engine.impl.cmmn.entity.runtime.CaseExecutionEntity;
 import org.camunda.bpm.engine.impl.interceptor.Command;
@@ -41,8 +40,8 @@ public GetCaseExecutionVariableCmd(String caseExecutionId, String variableName,
   }
 
   public Object execute(CommandContext commandContext) {
-    ensureNotNull(NullValueException.class, "caseExecutionId", caseExecutionId);
-    ensureNotNull(NullValueException.class, "variableName", variableName);
+    ensureNotNull("caseExecutionId", caseExecutionId);
+    ensureNotNull("variableName", variableName);
 
     CaseExecutionEntity caseExecution = commandContext
       .getCaseExecutionManager()

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/cmd/GetCaseExecutionVariablesCmd.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.camunda.bpm.engine.exception.NullValueException;
 import org.camunda.bpm.engine.exception.cmmn.CaseExecutionNotFoundException;
 import org.camunda.bpm.engine.impl.cmmn.entity.runtime.CaseExecutionEntity;
 import org.camunda.bpm.engine.impl.interceptor.Command;
@@ -44,7 +43,7 @@ public GetCaseExecutionVariablesCmd(String caseExecutionId, Collection<String> v
   }
 
   public Map<String, Object> execute(CommandContext commandContext) {
-    ensureNotNull(NullValueException.class, "caseExecutionId", caseExecutionId);
+    ensureNotNull("caseExecutionId", caseExecutionId);
 
     CaseExecutionEntity caseExecution = commandContext
       .getCaseExecutionManager()

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/cmd/GetDeploymentCaseDefinitionCmd.java
Patch:
@@ -16,7 +16,6 @@
 
 import java.io.Serializable;
 
-import org.camunda.bpm.engine.exception.NullValueException;
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
@@ -36,7 +35,7 @@ public GetDeploymentCaseDefinitionCmd(String caseDefinitionId) {
   }
 
   public CaseDefinition execute(CommandContext commandContext) {
-    ensureNotNull(NullValueException.class, "caseDefinitionId", caseDefinitionId);
+    ensureNotNull("caseDefinitionId", caseDefinitionId);
 
     return Context
       .getProcessEngineConfiguration()

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/cmd/GetDeploymentCaseModelCmd.java
Patch:
@@ -17,7 +17,6 @@
 import java.io.InputStream;
 import java.io.Serializable;
 
-import org.camunda.bpm.engine.exception.NullValueException;
 import org.camunda.bpm.engine.impl.cmd.GetDeploymentResourceCmd;
 import org.camunda.bpm.engine.impl.cmmn.entity.repository.CaseDefinitionEntity;
 import org.camunda.bpm.engine.impl.context.Context;
@@ -39,7 +38,7 @@ public GetDeploymentCaseModelCmd(String caseDefinitionId) {
   }
 
   public InputStream execute(CommandContext commandContext) {
-    ensureNotNull(NullValueException.class, "caseDefinitionId", caseDefinitionId);
+    ensureNotNull("caseDefinitionId", caseDefinitionId);
 
     CaseDefinitionEntity caseDefinition = Context
             .getProcessEngineConfiguration()

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ProcessDefinitionEntity.java
Patch:
@@ -86,7 +86,7 @@ public ExecutionEntity createProcessInstance(String businessKey, ActivityImpl in
       processInstance = (ExecutionEntity) super.createProcessInstanceForInitial(initial);
     }
 
-    processInstance.setExecutions(new ArrayList<ExecutionEntity>());
+    // do not reset executions (CAM-2557)! //  processInstance.setExecutions(new ArrayList<ExecutionEntity>());
     processInstance.setProcessDefinition(processDefinition);
     // Do not initialize variable map (let it happen lazily)
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/TransactionContextFactory.java
Patch:
@@ -1,9 +1,9 @@
 /* Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/jta/JtaTransactionContextFactory.java
Patch:
@@ -1,9 +1,9 @@
 /* Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -24,7 +24,7 @@
  * @author Daniel Meyer
  */
 public class JtaTransactionContextFactory implements TransactionContextFactory {
-  
+
   protected final TransactionManager transactionManager;
 
   public JtaTransactionContextFactory(TransactionManager transactionManager) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/standalone/StandaloneMybatisTransactionContextFactory.java
Patch:
@@ -1,9 +1,9 @@
 /* Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/ExecuteJobsCmd.java
Patch:
@@ -15,6 +15,7 @@
 import java.io.Serializable;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.impl.cfg.TransactionState;
 import org.camunda.bpm.engine.impl.context.Context;

File: engine/src/test/java/org/camunda/bpm/engine/test/cmd/FoxJobRetryCmdTest.java
Patch:
@@ -761,7 +761,6 @@ public void testFailedIntermediateCatchingTimerEvent() {
 
     assertEquals(0, job.getRetries());
     assertEquals(1, managementService.createJobQuery().noRetriesLeft().count());
-
   }
 
   @Deployment(resources = { "org/camunda/bpm/engine/test/cmd/FoxJobRetryCmdTest.testBrokenFoxJobRetryValue.bpmn20.xml" })

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/BpmnActivityBehavior.java
Patch:
@@ -127,9 +127,7 @@ protected void performOutgoingBehavior(ActivityExecution execution,
         Object isForCompensation = execution.getActivity().getProperty(BpmnParse.PROPERTYNAME_IS_FOR_COMPENSATION);
         if(isForCompensation != null && (Boolean) isForCompensation) {
 
-          ActivityExecution parentExecution = execution.getParent();
-          execution.remove();
-          parentExecution.signal("compensationDone", null);
+          execution.endCompensation();
 
         } else {
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/scripting/engine/ScriptingEngines.java
Patch:
@@ -104,7 +104,7 @@ public CompiledScript compile(String src, String language) {
       try {
         CompiledScript compiledScript = compilingEngine.compile(src);
 
-        LOG.log(Level.FINE, "Compiled script using {0} script engine ", language);
+        LOG.fine("Compiled script using " + language + " script engine");
 
         return compiledScript;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/entity/runtime/CaseExecutionEntity.java
Patch:
@@ -109,7 +109,7 @@ protected void ensureCaseDefinitionInitialized() {
       CaseDefinitionEntity deployedCaseDefinition = Context
         .getProcessEngineConfiguration()
         .getDeploymentCache()
-        .findDeployedCaseDefinitionById(caseDefinitionId);
+        .getCaseDefinitionById(caseDefinitionId);
 
       setCaseDefinition(deployedCaseDefinition);
     }
@@ -165,7 +165,7 @@ public void setActivity(CmmnActivity activity) {
     super.setActivity(activity);
     if (activity != null) {
       this.activityId = activity.getId();
-      this.activityName = (String) activity.getProperty("name");
+      this.activityName = (String) activity.getName();
     } else {
       this.activityId = null;
       this.activityName = null;

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/hal/HalLinker.java
Patch:
@@ -106,7 +106,7 @@ public List<HalResource<?>> resolve(HalRelation relation, ProcessEngine processE
   /**
    * merge the links of an embedded resource into this linker.
    * This is useful when building resources which are actually resource collections.
-   * You can then merge the relations of all resources in the collection and the unique the set of linked resources to embedd.
+   * You can then merge the relations of all resources in the collection and the unique the set of linked resources to embed.
    *
    * @param embedded the embedded resource for which the links should be merged into this linker.
    */

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/hal/HalResource.java
Patch:
@@ -84,14 +84,14 @@ public Object getEmbedded(String name) {
   }
 
   /**
-   * Can be used to embedd a relation. Embedded all linked resources in the given relation.
+   * Can be used to embed a relation. Embedded all linked resources in the given relation.
    *
    * @param relation the relation to embedded
    * @param processEngine used to resolve the resources
    * @return the resource itself.
    */
   @SuppressWarnings("unchecked")
-  public T embedd(HalRelation relation, ProcessEngine processEngine) {
+  public T embed(HalRelation relation, ProcessEngine processEngine) {
     List<HalResource<?>> resolvedLinks = linker.resolve(relation, processEngine);
     if(resolvedLinks != null && resolvedLinks.size() > 0) {
       addEmbedded(relation.relName, resolvedLinks);

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/hal/task/HalTaskList.java
Patch:
@@ -12,15 +12,15 @@
  */
 package org.camunda.bpm.engine.rest.hal.task;
 
+import static javax.ws.rs.core.UriBuilder.fromResource;
+
 import java.util.ArrayList;
 import java.util.List;
 
 import org.camunda.bpm.engine.rest.TaskRestService;
 import org.camunda.bpm.engine.rest.hal.HalResource;
 import org.camunda.bpm.engine.task.Task;
 
-import static javax.ws.rs.core.UriBuilder.fromResource;
-
 /**
  * @author Daniel Meyer
  *
@@ -37,7 +37,7 @@ public static HalTaskList fromTaskList(List<Task> tasks, long count) {
 
     HalTaskList taskList = new HalTaskList();
 
-    // embedd tasks
+    // embed tasks
     List<HalResource<?>> embeddedTasks = new ArrayList<HalResource<?>>();
     for (Task task : tasks) {
       embeddedTasks.add(HalTask.fromTask(task));

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/TaskRestServiceImpl.java
Patch:
@@ -59,9 +59,9 @@ public HalTaskList getHalTasks(UriInfo uriInfo, Integer firstResult, Integer max
     long count = query.count();
 
     HalTaskList list = HalTaskList.fromTaskList(matchingTasks, count)
-        .embedd(HalTask.REL_ASSIGNEE, engine)
-        .embedd(HalTask.REL_OWNER, engine)
-        .embedd(HalTask.REL_PROCESS_DEFINITION, engine);
+        .embed(HalTask.REL_ASSIGNEE, engine)
+        .embed(HalTask.REL_OWNER, engine)
+        .embed(HalTask.REL_PROCESS_DEFINITION, engine);
 
     return list;
   }

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/builder/AbstractBaseElementBuilder.java
Patch:
@@ -86,7 +86,7 @@ public B addExtensionElement(BpmnModelElementInstance extensionElement) {
       extensionElements = modelInstance.newInstance(ExtensionElements.class);
       element.setExtensionElements(extensionElements);
     }
-    extensionElements.getElements().add(extensionElement);
+    extensionElements.addChildElement(extensionElement);
     return myself;
   }
 }

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/instance/ExtensionElements.java
Patch:
@@ -12,11 +12,11 @@
  */
 package org.camunda.bpm.model.bpmn.instance;
 
+import java.util.Collection;
+
 import org.camunda.bpm.model.bpmn.Query;
 import org.camunda.bpm.model.xml.instance.ModelElementInstance;
 
-import java.util.Collection;
-
 /**
  * The BPMN extensionElements element
  *

File: spin/core/src/main/java/org/camunda/spin/impl/xml/dom/SpinXmlDomElement.java
Patch:
@@ -38,7 +38,7 @@
 import static org.camunda.spin.impl.util.SpinEnsure.*;
 
 /**
- * Wrapper for a xml dom element.
+ * Wrapper for an xml dom element.
  *
  * @author Sebastian Menski
  */
@@ -334,7 +334,7 @@ public SpinXmlTreeXPathQuery xPath(String expression) {
   }
 
   /**
-   * Adopts a xml dom element to the owner document of this element if necessary.
+   * Adopts an xml dom element to the owner document of this element if necessary.
    *
    * @param elementToAdopt the element to adopt
    */

File: spin/core/src/test/java/org/camunda/spin/json/tree/JsonTreeSetPropertyScriptTest.java
Patch:
@@ -130,7 +130,7 @@ public void shouldReplaceLongProperty() {
   }
 
   /**
-   * Please note: in jython exists a known issue that Boolean
+   * Please note: in jython there is a known issue that Boolean
    * and boolean values are casted to long if a matching method
    * is found first. See script source code for workaround.
    */
@@ -146,7 +146,7 @@ public void shouldSetBooleanProperty() {
   }
 
   /**
-   * Please note: in jython exists a known issue that Boolean
+   * Please note: in jython there is a known issue that Boolean
    * and boolean values are casted to long if a matching method
    * is found first. See script source code for workaround.
    */

File: spin/core/src/main/java/org/camunda/spin/impl/json/tree/SpinJsonJacksonTreeNode.java
Patch:
@@ -460,7 +460,7 @@ public SpinJsonTreePathQuery jsonPath(String expression) {
     ensureNotNull("expression", expression);
     try {
       JsonPath query = JsonPath.compile(expression);
-      return new SpinJsonPathQuery(this, query, dataFormat);
+      return new SpinJsonJacksonPathQuery(this, query, dataFormat);
     } catch(InvalidPathException pex) {
       throw LOG.unableToCompileJsonPathExpression(expression, pex);
     } catch(IllegalArgumentException aex) {

File: spin/core/src/main/java/org/camunda/spin/json/SpinJsonNode.java
Patch:
@@ -32,8 +32,9 @@ public abstract class SpinJsonNode extends Spin<SpinJsonNode> {
    * Fetches the first index of the searched object in an array.
    *
    * @param searchObject Object for which the index should be searched.
-   * @return {@link Integer} index of searchObject or -1 if object not found.
+   * @return {@link Integer} index of searchObject.
    * @throws SpinJsonTreeNodeException if the current node is not an array.
+   * @throws SpinJsonTreePropertyException if object is not found.
    */
   public abstract Integer indexOf(Object searchObject);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -29,6 +29,8 @@
  */
 public class DbSqlSessionFactory implements SessionFactory {
 
+  public static final int ACT_RU_VARIABLE_TEXT_LENGTH = 4000;
+
   private static final String MSSQL = "mssql";
   private static final String DB2 = "db2";
   private static final String ORACLE = "oracle";

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricVariableInstanceEntity.java
Patch:
@@ -348,8 +348,8 @@ public void setConfiguration(String configuration) {
     this.configuration = configuration;
   }
 
-  public String getRawValue() {
-    return textValue;
+  public Object getRawValue() {
+    return variableType.getRawValue(this);
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/VariableInstanceEntity.java
Patch:
@@ -352,9 +352,8 @@ public String getErrorMessage() {
     return errorMessage;
   }
 
-  public String getRawValue() {
-    // TODO: delegate this to the variable type
-    return textValue;
+  public Object getRawValue() {
+    return type.getRawValue(this);
   }
 
   public String getDataFormatId() {

File: engine/src/main/java/org/camunda/bpm/engine/runtime/VariableInstance.java
Patch:
@@ -80,9 +80,9 @@ public interface VariableInstance {
 
   /**
    * Returns the variable's raw value as it is stored in the database. This is the same
-   * as {@link #getValue()} unless a specific default serialization data format is used.
+   * as {@link #getValue()} but no conversion to the stored type is applied.
    */
-  String getRawValue();
+  Object getRawValue();
 
   /**
    * Returns the identifier of the data format that is used to serialize the variable.

File: engine/src/test/java/org/camunda/bpm/engine/test/variables/HistoricVariableDataFormatTest.java
Patch:
@@ -43,7 +43,7 @@ public void testSelectHistoricVariableInstances() throws JSONException {
     assertEquals(bean.getIntProperty(), historyValue.getIntProperty());
     assertEquals(bean.getBooleanProperty(), historyValue.getBooleanProperty());
 
-    JSONAssert.assertEquals(bean.toExpectedJsonString(), historicVariable.getRawValue(), true);
+    JSONAssert.assertEquals(bean.toExpectedJsonString(), (String) historicVariable.getRawValue(), true);
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/DefaultSerializationFormatType.java
Patch:
@@ -63,8 +63,6 @@ public void setValue(Object value, ValueFields valueFields) {
 
       valueFields.setDataFormatId(dataFormat.getName());
       valueFields.setConfiguration(dataFormat.getCanonicalTypeName(value));
-
-      valueFields.setCachedValue(value);
     } catch (SpinRuntimeException e) {
       throw new ProcessEngineException("Cannot serialize object of type " + value.getClass() + ": " + value, e);
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/AbstractVariableStore.java
Patch:
@@ -125,8 +125,6 @@ public VariableInstanceEntity createVariableInstance(String variableName, Object
     initializeVariableInstanceBackPointer(variableInstance);
     variableInstances.put(variableName, variableInstance);
 
-    variableInstance.setValue(value);
-
     // fire CREATE event
     if(isAutoFireHistoryEvents()) {
       fireHistoricVariableInstanceCreate(variableInstance, sourceActivityExecution);

File: spin/core/src/main/java/org/camunda/spin/logging/SpinCoreLogger.java
Patch:
@@ -57,11 +57,11 @@ public SpinRuntimeException unableToReadInputStream(Exception e) {
   public SpinDataFormatException wrongDataFormatException(String requestedDataFormat, String givenDataFormat) {
     return new SpinDataFormatException(exceptionMessage("007", "Wrong data format: requested '{}', given '{}'", requestedDataFormat, givenDataFormat));
   }
-  
+
   public SpinDataFormatException unknownDataFormatException(String givenDataFormat) {
     return new SpinDataFormatException(exceptionMessage("008", "Unknown data format: given '{}'", givenDataFormat));
   }
-  
+
   public SpinDataFormatException unrecognizableDataFormatException() {
     return new SpinDataFormatException(exceptionMessage("009", "No matching data format detected"));
   }

File: spin/core/src/main/java/org/camunda/spin/impl/json/tree/JsonJacksonTreeConfigurable.java
Patch:
@@ -25,6 +25,8 @@ public interface JsonJacksonTreeConfigurable {
   
   JsonJacksonGeneratorConfiguration writer();
   
+  JsonJacksonMapperConfiguration mapper();
+  
   JsonJacksonTreeDataFormat done();
   
   void applyTo(ObjectMapper mapper);

File: spin/core/src/main/java/org/camunda/spin/json/SpinJsonNode.java
Patch:
@@ -131,5 +131,4 @@ public abstract class SpinJsonNode extends Spin<SpinJsonNode> {
    * @throws SpinDataFormatException if this node is not a array value
    */
   public abstract List<String> fieldNames();
-
 }

File: spin/core/src/test/java/org/camunda/spin/json/mapping/Order.java
Patch:
@@ -18,7 +18,7 @@ public class Order {
 
   private long id;
   private String order;
-  private int dueUntil;
+  private Object dueUntil;
   private boolean active;
   private List<RegularCustomer> customers;
   private OrderDetails orderDetails;
@@ -35,10 +35,10 @@ public String getOrder() {
   public void setOrder(String order) {
     this.order = order;
   }
-  public int getDueUntil() {
+  public Object getDueUntil() {
     return dueUntil;
   }
-  public void setDueUntil(int dueUntil) {
+  public void setDueUntil(Object dueUntil) {
     this.dueUntil = dueUntil;
   }
   public boolean isActive() {

File: spin/core/src/test/java/org/camunda/spin/json/tree/JsonTreeConfigureReaderTest.java
Patch:
@@ -107,7 +107,7 @@ public void shouldApplyConfigurationOnCreationFromInputStream() {
   }
   
   @Test
-  public void shouldCreateNewInstanceOnConfiguration() {
+  public void shouldPassConfigurationToNewInstance() {
     JsonJacksonTreeDataFormat jsonDataFormat = new JsonJacksonTreeDataFormat();
     jsonDataFormat.reader().config("aKey", "aValue");
     

File: spin/core/src/main/java/org/camunda/spin/spi/DataFormat.java
Patch:
@@ -31,7 +31,7 @@ public interface DataFormat<T extends Spin<?>> {
   
   DataFormatReader getReader();
   
-  String getCanonicalTypeString(Object object);
-  
+  String getCanonicalTypeName(Object object);
   
+  void addTypeDetector(TypeDetector typeDetector);
 }

File: spin/core/src/test/java/org/camunda/spin/json/mapping/Order.java
Patch:
@@ -20,7 +20,7 @@ public class Order {
   private String order;
   private int dueUntil;
   private boolean active;
-  private List<Customer> customers;
+  private List<RegularCustomer> customers;
   private OrderDetails orderDetails;
   
   public long getId() {
@@ -47,10 +47,10 @@ public boolean isActive() {
   public void setActive(boolean active) {
     this.active = active;
   }
-  public List<Customer> getCustomers() {
+  public List<RegularCustomer> getCustomers() {
     return customers;
   }
-  public void setCustomers(List<Customer> customers) {
+  public void setCustomers(List<RegularCustomer> customers) {
     this.customers = customers;
   }
   public OrderDetails getOrderDetails() {

File: spin/core/src/main/java/org/camunda/spin/impl/xml/dom/SpinXmlDomElement.java
Patch:
@@ -26,6 +26,7 @@
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.transform.stream.StreamResult;
 import javax.xml.xpath.*;
+
 import java.io.ByteArrayOutputStream;
 import java.io.OutputStream;
 import java.io.StringWriter;

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/Bpmn.java
Patch:
@@ -285,7 +285,7 @@ protected void doRegisterTypes(ModelBuilder bpmnModelBuilder) {
     ConditionImpl.registerType(bpmnModelBuilder);
     ConditionalEventDefinitionImpl.registerType(bpmnModelBuilder);
     ComplexGatewayImpl.registerType(bpmnModelBuilder);
-    ConditionExpression.registerType(bpmnModelBuilder);
+    ConditionExpressionImpl.registerType(bpmnModelBuilder);
     ConversationAssociationImpl.registerType(bpmnModelBuilder);
     ConversationImpl.registerType(bpmnModelBuilder);
     ConversationLinkImpl.registerType(bpmnModelBuilder);

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/builder/AbstractSequenceFlowBuilder.java
Patch:
@@ -14,7 +14,7 @@
 package org.camunda.bpm.model.bpmn.builder;
 
 import org.camunda.bpm.model.bpmn.BpmnModelInstance;
-import org.camunda.bpm.model.bpmn.impl.instance.ConditionExpression;
+import org.camunda.bpm.model.bpmn.instance.ConditionExpression;
 import org.camunda.bpm.model.bpmn.instance.FlowNode;
 import org.camunda.bpm.model.bpmn.instance.SequenceFlow;
 

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/impl/instance/SequenceFlowImpl.java
Patch:
@@ -15,6 +15,7 @@
 
 import org.camunda.bpm.model.bpmn.BpmnModelInstance;
 import org.camunda.bpm.model.bpmn.builder.SequenceFlowBuilder;
+import org.camunda.bpm.model.bpmn.instance.ConditionExpression;
 import org.camunda.bpm.model.bpmn.instance.FlowElement;
 import org.camunda.bpm.model.bpmn.instance.FlowNode;
 import org.camunda.bpm.model.bpmn.instance.SequenceFlow;

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/instance/SequenceFlow.java
Patch:
@@ -14,7 +14,6 @@
 package org.camunda.bpm.model.bpmn.instance;
 
 import org.camunda.bpm.model.bpmn.builder.SequenceFlowBuilder;
-import org.camunda.bpm.model.bpmn.impl.instance.ConditionExpression;
 import org.camunda.bpm.model.bpmn.instance.bpmndi.BpmnEdge;
 
 /**

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/BpmnTestConstants.java
Patch:
@@ -29,6 +29,7 @@ public final class BpmnTestConstants {
   public static final String USER_TASK_ID = "userTask";
   public static final String SERVICE_TASK_ID = "serviceTask";
   public static final String SEND_TASK_ID = "sendTask";
+  public static final String SCRIPT_TASK_ID = "scriptTask";
   public static final String SEQUENCE_FLOW_ID = "sequenceFlow";
   public static final String MESSAGE_FLOW_ID = "messageFlow";
   public static final String DATA_INPUT_ASSOCIATION_ID = "dataInputAssociation";

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/instance/ScriptTaskTest.java
Patch:
@@ -37,7 +37,8 @@ public Collection<AttributeAssumption> getAttributesAssumptions() {
     return Arrays.asList(
       new AttributeAssumption("scriptFormat"),
       /** camunda extensions */
-      new AttributeAssumption(CAMUNDA_NS, "resultVariable")
+      new AttributeAssumption(CAMUNDA_NS, "resultVariable"),
+      new AttributeAssumption(CAMUNDA_NS, "resource")
     );
   }
 }

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/instance/SequenceFlowTest.java
Patch:
@@ -13,8 +13,6 @@
 
 package org.camunda.bpm.model.bpmn.instance;
 
-import org.camunda.bpm.model.bpmn.impl.instance.ConditionExpression;
-
 import java.util.Arrays;
 import java.util.Collection;
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/FormVariablesDto.java
Patch:
@@ -24,6 +24,8 @@
  */
 public class FormVariablesDto extends TreeMap<String, VariableInstanceDto> implements Map<String, VariableInstanceDto> {
 
+  private static final long serialVersionUID = 1L;
+
   public static FormVariablesDto fromVariableInstanceMap(Map<String, VariableInstance> formVariables) {
     FormVariablesDto formVariablesDto = new FormVariablesDto();
     for (VariableInstance variableInstance : formVariables.values()) {

File: spin/core/src/main/java/org/camunda/spin/impl/json/tree/JsonJacksonTreeDataFormat.java
Patch:
@@ -12,15 +12,15 @@
  */
 package org.camunda.spin.impl.json.tree;
 
+import java.util.Map;
+
 import com.fasterxml.jackson.core.JsonParser.Feature;
 import com.fasterxml.jackson.databind.JsonNode;
-import java.util.Map;
+
 import org.camunda.spin.json.SpinJsonNode;
 import org.camunda.spin.spi.DataFormat;
 import org.camunda.spin.spi.DataFormatReader;
 
-import com.fasterxml.jackson.databind.JsonNode;
-
 /**
  * @author Thorben Lindhauer
  * @author Stefan Hentschel

File: spin/core/src/test/java/org/camunda/spin/json/tree/JsonTreeReadPropertyScriptTest.java
Patch:
@@ -39,8 +39,8 @@ public abstract class JsonTreeReadPropertyScriptTest extends ScriptTest {
   public void shouldReadProperty() {
     SpinJsonNode property = script.getVariable("property");
     String value = script.getVariable("value");
+
     assertThat(property).isNotNull();
-    assertThat(property).isInstanceOf(SpinJsonNode.class);
     assertThat(value).isEqualTo("order1");
   }
 

File: spin/core/src/main/java/org/camunda/spin/test/ScriptEngineRule.java
Patch:
@@ -15,7 +15,6 @@
 
 import java.util.HashMap;
 import java.util.Map;
-
 import javax.script.ScriptEngine;
 import javax.script.ScriptEngineManager;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/core/variable/CoreVariableStore.java
Patch:
@@ -13,6 +13,7 @@
 package org.camunda.bpm.engine.impl.core.variable;
 
 import java.util.Collection;
+import java.util.Map;
 import java.util.Set;
 
 /**
@@ -41,4 +42,6 @@ public interface CoreVariableStore {
 
   void clearForNewValue(CoreVariableInstance variableInstance, Object newValue);
 
+  Map<String, CoreVariableInstance> getVariableInstances();
+
 }
\ No newline at end of file

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/handler/DefaultFormHandler.java
Patch:
@@ -115,7 +115,7 @@ protected void parseFormField(Element formField, BpmnParse bpmnParse, Expression
     String defaultValue = formField.attribute("defaultValue");
     if(defaultValue != null) {
       Expression defaultValueExpression = expressionManager.createExpression(defaultValue);
-      formFieldHandler.setDefaultValue(defaultValueExpression);
+      formFieldHandler.setDefaultValueExpression(defaultValueExpression);
     }
 
     formFieldHandlers.add(formFieldHandler);

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/VariableInstanceEntity.java
Patch:
@@ -60,7 +60,7 @@ public class VariableInstanceEntity implements CoreVariableInstance, VariableIns
   protected String errorMessage;
 
   // Default constructor for SQL mapping
-  protected VariableInstanceEntity() {
+  public VariableInstanceEntity() {
   }
 
   public static VariableInstanceEntity createAndInsert(String name, VariableType type, Object value) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/VariableInstanceManager.java
Patch:
@@ -43,10 +43,10 @@ public List<VariableInstanceEntity> findVariableInstancesByCaseExecutionId(Strin
   }
 
   public void deleteVariableInstanceByTask(TaskEntity task) {
-    Map<String, VariableInstanceEntity> variableInstances = task.getVariableInstances();
+    Map<String, VariableInstance> variableInstances = task.getVariableInstancesLocal();
     if (variableInstances!=null) {
-      for (VariableInstanceEntity variableInstance: variableInstances.values()) {
-        variableInstance.delete();
+      for (VariableInstance variableInstance: variableInstances.values()) {
+        ((VariableInstanceEntity) variableInstance).delete();
       }
     }
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/form/FormDataTest.java
Patch:
@@ -89,14 +89,14 @@ public void testGetFormFieldBuiltInTypes() {
     assertNotNull(longField);
     assertEquals("long", longField.getTypeName());
     assertNotNull(longField.getType());
-    assertEquals("1", longField.getDefaultValue());
+    assertEquals(Long.valueOf(1l), longField.getDefaultValue());
 
     // validate boolean field
     FormField booleanField = formFields.get(2);
     assertNotNull(booleanField);
     assertEquals("boolean", booleanField.getTypeName());
     assertNotNull(booleanField.getType());
-    assertEquals("true", booleanField.getDefaultValue());
+    assertEquals(Boolean.valueOf(true), booleanField.getDefaultValue());
 
     // validate date field
     FormField dateField = formFields.get(3);

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/instance/ModelElementInstance.java
Patch:
@@ -155,11 +155,11 @@ public interface ModelElementInstance {
   /**
    * Returns a child element with the given name or 'null' if no such element exists
    *
-   * @param elementName the local name of the element
-   * @param namespaceUri the namespace of the element
+   * @param namespaceUri the local name of the element
+   * @param elementName the namespace of the element
    * @return the child element or null.
    */
-  ModelElementInstance getUniqueChildElementByNameNs(String elementName, String namespaceUri);
+  ModelElementInstance getUniqueChildElementByNameNs(String namespaceUri, String elementName);
 
   /**
    * Returns a child element with the given type

File: distro/jbossas7/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/deployment/processor/ProcessApplicationDeploymentProcessor.java
Patch:
@@ -26,6 +26,7 @@
 import org.camunda.bpm.container.impl.metadata.PropertyHelper;
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.impl.util.IoUtil;
+import org.camunda.bpm.engine.impl.util.StringUtil;
 import org.jboss.as.ee.component.ComponentDescription;
 import org.jboss.as.ee.component.ComponentView;
 import org.jboss.as.ee.component.ViewDescription;
@@ -212,8 +213,9 @@ protected Map<String, byte[]> getDeploymentResources(ProcessArchiveXml processAr
       final VfsProcessApplicationScanner scanner = new VfsProcessApplicationScanner();
 
       String resourceRootPath = processArchive.getProperties().get(ProcessArchiveXml.PROP_RESOURCE_ROOT_PATH);
+      String[] additionalResourceSuffixes = StringUtil.split(processArchive.getProperties().get(ProcessArchiveXml.PROP_ADDITIONAL_RESOURCE_SUFFIXES), ProcessArchiveXml.PROP_ADDITIONAL_RESOURCE_SUFFIXES_SEPARATOR);
       URL processesXmlUrl = vfsFileAsUrl(processesXmlFile);
-      resources.putAll(scanner.findResources(classLoader, resourceRootPath, processesXmlUrl));
+      resources.putAll(scanner.findResources(classLoader, resourceRootPath, processesXmlUrl, additionalResourceSuffixes));
     }
 
     return resources;

File: engine/src/main/java/org/camunda/bpm/container/impl/jmx/deployment/DeployProcessArchiveStep.java
Patch:
@@ -33,6 +33,7 @@
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.RepositoryService;
 import org.camunda.bpm.engine.impl.util.IoUtil;
+import org.camunda.bpm.engine.impl.util.StringUtil;
 import org.camunda.bpm.engine.repository.ProcessApplicationDeployment;
 import org.camunda.bpm.engine.repository.ProcessApplicationDeploymentBuilder;
 
@@ -87,7 +88,8 @@ public void performOperationStep(MBeanDeploymentOperation operationContext) {
     // scan for additional process definitions if not turned off
     if(PropertyHelper.getBooleanProperty(processArchive.getProperties(), ProcessArchiveXml.PROP_IS_SCAN_FOR_PROCESS_DEFINITIONS, true)) {
       String paResourceRoot = processArchive.getProperties().get(ProcessArchiveXml.PROP_RESOURCE_ROOT_PATH);
-      deploymentMap.putAll(ProcessApplicationScanningUtil.findResources(processApplicationClassloader, paResourceRoot, metaFileUrl));
+      String[] additionalResourceSuffixes = StringUtil.split(processArchive.getProperties().get(ProcessArchiveXml.PROP_ADDITIONAL_RESOURCE_SUFFIXES), ProcessArchiveXml.PROP_ADDITIONAL_RESOURCE_SUFFIXES_SEPARATOR);
+      deploymentMap.putAll(ProcessApplicationScanningUtil.findResources(processApplicationClassloader, paResourceRoot, metaFileUrl, additionalResourceSuffixes));
     }
 
     // perform process engine deployment

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/impl/CaseDefinitionResourceImpl.java
Patch:
@@ -102,7 +102,7 @@ public CaseInstanceDto createCaseInstance(UriInfo context, CreateCaseInstanceDto
       Map<String, Object> variables = DtoUtil.toMap(parameters.getVariables());
 
       instance = caseService
-          .createCaseInstanceById(caseDefinitionId)
+          .withCaseDefinition(caseDefinitionId)
           .businessKey(businessKey)
           .setVariables(variables)
           .create();

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/CaseServiceImpl.java
Patch:
@@ -32,11 +32,11 @@
  */
 public class CaseServiceImpl extends ServiceImpl implements CaseService {
 
-  public CaseInstanceBuilder createCaseInstanceByKey(String caseDefinitionKey) {
+  public CaseInstanceBuilder withCaseDefinitionByKey(String caseDefinitionKey) {
     return new CaseInstanceBuilderImpl(commandExecutor, caseDefinitionKey, null);
   }
 
-  public CaseInstanceBuilder createCaseInstanceById(String caseDefinitionId) {
+  public CaseInstanceBuilder withCaseDefinition(String caseDefinitionId) {
     return new CaseInstanceBuilderImpl(commandExecutor, null, caseDefinitionId);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/behavior/StageActivityBehavior.java
Patch:
@@ -122,7 +122,7 @@ protected boolean canComplete(CmmnActivityExecution execution, boolean manualCom
         if (!child.isDisabled()) {
 
           if (throwException) {
-            throw new ProcessEngineException("At least one required child case execution is availabe|enabled|suspended.");
+            throw new ProcessEngineException("At least one required child case execution is available|enabled|suspended.");
           }
 
           return false;

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/handler/HumanTaskPlanItemHandler.java
Patch:
@@ -52,7 +52,6 @@ public CmmnActivity handleElement(PlanItem planItem, CmmnHandlerContext context)
 
 
   protected CmmnActivity createActivity(CmmnElement element, CmmnHandlerContext context) {
-    // TODO Auto-generated method stub
     return super.createActivity(element, context);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/runtime/CaseExecutionCommandBuilder.java
Patch:
@@ -31,7 +31,7 @@
  *    <li>{@link #execute()}</li>
  *    <li>{@link #manualStart()}</li>
  *    <li>{@link #disable()}</li>
- *    <li>{@link #enable()}</li>
+ *    <li>{@link #reenable()}</li>
  *    <li>{@link #complete()}</li>
  *    <li>{@link #close()}</li>
  *  </ul>
@@ -208,7 +208,7 @@ public interface CaseExecutionCommandBuilder {
 
   /**
    * <p>Additionally to {@link #execute()} the associated case execution will
-   * be started manually. Therefore the happens a transition from the state
+   * be started manually. Therefore there happens a transition from the state
    * <code>ENABLED</code> to state <code>ACTIVE</code>.</p>
    *
    * <p>According to CMMN 1.0 specification the state <code>ACTIVE</code> means,
@@ -240,7 +240,7 @@ public interface CaseExecutionCommandBuilder {
    *
    * <p>If the given case execution has a parent case execution, that parent
    * case execution will be notified that the given case execution has been
-   * completed. This can lead to a completion of the parent case execution if
+   * disabled. This can lead to a completion of the parent case execution if
    * the completion criteria are fulfilled.</p>
    *
    * @throws ProcessEngineException this exception will be thrown

File: engine/src/main/java/org/camunda/bpm/engine/runtime/CaseInstance.java
Patch:
@@ -32,7 +32,7 @@ public interface CaseInstance extends CaseExecution {
    * <p>Returns <code>true</code> if the case instance is completed.</p>
    *
    * <p><strong>Note:</strong> If this case execution is not the case instance,
-   * it will return always <code>false</code>.</p>
+   * it will always return <code>false</code>.</p>
    */
   boolean isCompleted();
 

File: engine/src/main/java/org/camunda/bpm/engine/runtime/CaseInstanceBuilder.java
Patch:
@@ -66,7 +66,7 @@ public interface CaseInstanceBuilder {
   CaseInstanceBuilder setVariables(Map<String, Object> variables);
 
   /**
-   * <p>Creates a new {@link CaseInstance}, which will be in the ACTIVE state.</p>
+   * <p>Creates a new {@link CaseInstance}, which will be in the <code>ACTIVE</code> state.</p>
    *
    * @throws ProcessEngineException when no case definition is deployed with the given key or id.
    */

File: engine/src/test/java/org/camunda/bpm/engine/test/api/task/TaskServiceTest.java
Patch:
@@ -549,7 +549,7 @@ public void testCompleteTaskShouldCompleteCaseExecution() {
 
     // an active case instance
     caseService
-       .createCaseInstanceById(caseDefinitionId)
+       .withCaseDefinition(caseDefinitionId)
        .create();
 
     String caseExecutionId = caseService
@@ -1305,7 +1305,7 @@ public void testDeleteTaskPartOfCaseInstance() {
 
     // an active case instance
     caseService
-       .createCaseInstanceById(caseDefinitionId)
+       .withCaseDefinition(caseDefinitionId)
        .create();
 
     String caseExecutionId = caseService

File: engine/src/test/java/org/camunda/bpm/engine/test/cmmn/operation/CaseExecutionTerminationTest.java
Patch:
@@ -27,7 +27,7 @@
 public class CaseExecutionTerminationTest extends PvmTestCase {
 
   @Test
-  public void testSuspendCaseInstance() {
+  public void testTerminateCaseInstance() {
 
     // given ///////////////////////////////////////////////////////////////
 
@@ -71,7 +71,7 @@ public void testSuspendCaseInstance() {
   }
 
   @Test
-  public void testSuspendStage() {
+  public void testTerminateStage() {
 
     // given ///////////////////////////////////////////////////////////////
 
@@ -115,7 +115,7 @@ public void testSuspendStage() {
   }
 
   @Test
-  public void testSuspendTask() {
+  public void testTerminateTask() {
 
     // given ///////////////////////////////////////////////////////////////
 

File: engine/src/test/java/org/camunda/bpm/engine/test/history/OperationLogQueryTest.java
Patch:
@@ -219,7 +219,7 @@ public void testQueryByCaseDefinitionId() {
 
     // an active case instance
     caseService
-       .createCaseInstanceById(caseDefinitionId)
+       .withCaseDefinition(caseDefinitionId)
        .create();
 
     String caseExecutionId = caseService
@@ -259,7 +259,7 @@ public void testQueryByCaseInstanceId() {
 
     // an active case instance
     String caseInstanceId = caseService
-       .createCaseInstanceById(caseDefinitionId)
+       .withCaseDefinition(caseDefinitionId)
        .create()
        .getId();
 
@@ -300,7 +300,7 @@ public void testQueryByCaseExecutionId() {
 
     // an active case instance
     caseService
-       .createCaseInstanceById(caseDefinitionId)
+       .withCaseDefinition(caseDefinitionId)
        .create();
 
     String caseExecutionId = caseService

File: spin/core/src/main/java/org/camunda/spin/test/ScriptRule.java
Patch:
@@ -258,7 +258,7 @@ private String getPackageDirectoryPath(Description description) {
    * @return the processed path
    */
   private String replaceDotsWithPathSeparators(String path) {
-    return path.replaceAll("\\.", File.separator);
+    return path.replace(".", File.separator);
   }
 
   /**

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -3392,7 +3392,7 @@ protected ParameterValueProvider parseNestedParamValueProvider(Element element)
       return parseParamValueProvider(element.elements().get(0));
 
     } else {
-      addError("Output parameter can at most have one child element", element);
+      addError("Nested parameter can at most have one child element", element);
       return null;
     }
   }
@@ -3404,7 +3404,7 @@ protected ParameterValueProvider parseParamValueProvider(Element parameterElemen
       List<ParameterValueProvider> providerList = new ArrayList<ParameterValueProvider>();
       for (Element element : parameterElement.elements()) {
         // parse nested provider
-        providerList.add(parseNestedParamValueProvider(element));
+        providerList.add(parseParamValueProvider(element));
       }
       return new ListValueProvider(providerList);
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/util/IoUtil.java
Patch:
@@ -23,6 +23,7 @@
 import java.io.OutputStream;
 import java.net.URL;
 
+import java.nio.charset.Charset;
 import org.camunda.bpm.engine.ProcessEngineException;
 
 
@@ -59,7 +60,7 @@ public static String readFileAsString(String filePath) {
     } finally {
       IoUtil.closeSilently(inputStream);
     }
-    return new String(buffer);
+    return new String(buffer, Charset.forName("UTF-8"));
   }
   
   public static File getFile(String filePath) {

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricVariableInstanceTest.java
Patch:
@@ -516,7 +516,7 @@ public void testHistoricVariableInstanceRevision() {
 
     HistoricVariableInstanceEntity variableEntity = (HistoricVariableInstanceEntity) variable;
 
-    // the revision have to be 0
+    // the revision has to be 0
     assertEquals(0, variableEntity.getRevision());
 
     List<HistoricDetail> details = historyService
@@ -551,7 +551,7 @@ public void testHistoricVariableInstanceRevisionAsync() {
 
     HistoricVariableInstanceEntity variableEntity = (HistoricVariableInstanceEntity) variable;
 
-    // the revision have to be 2
+    // the revision has to be 2
     assertEquals(2, variableEntity.getRevision());
 
     List<HistoricDetail> details = historyService

File: webapps/webapp/src/main/java/org/camunda/bpm/webapp/impl/security/auth/UserAuthenticationResource.java
Patch:
@@ -82,7 +82,7 @@ public Response doLogin(
 
     final ProcessEngine processEngine = lookupProcessEngine(engineName);
     if(processEngine == null) {
-      throw new InvalidRequestException(Status.BAD_REQUEST, "Process engine with name "+engineName+" does not exisist");
+      throw new InvalidRequestException(Status.BAD_REQUEST, "Process engine with name "+engineName+" does not exist");
     }
 
     // make sure authentication is executed without authentication :)

File: webapps/camunda-webapp/webapp/src/main/java/org/camunda/bpm/webapp/impl/security/auth/UserAuthenticationResource.java
Patch:
@@ -82,7 +82,7 @@ public Response doLogin(
 
     final ProcessEngine processEngine = lookupProcessEngine(engineName);
     if(processEngine == null) {
-      throw new InvalidRequestException(Status.BAD_REQUEST, "Process engine with name "+engineName+" does not exisist");
+      throw new InvalidRequestException(Status.BAD_REQUEST, "Process engine with name "+engineName+" does not exist");
     }
 
     // make sure authentication is executed without authentication :)

File: identity/identity-ldap/src/test/java/org/camunda/bpm/identity/impl/ldap/LdapUserQueryTest.java
Patch:
@@ -24,7 +24,7 @@ public class LdapUserQueryTest extends LdapIdentityProviderTest {
 
   public void testQueryNoFilter() {
     List<User> result = identityService.createUserQuery().list();
-    assertEquals(6, result.size());
+    assertEquals(7, result.size());
   }
 
   public void testFilterByUserId() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/AsyncContinuationJobHandler.java
Patch:
@@ -35,8 +35,11 @@ public class AsyncContinuationJobHandler implements JobHandler {
 
   public AsyncContinuationJobHandler() {
     supportedOperations = new HashMap<String, PvmAtomicOperation>();
+    // async before activity
     supportedOperations.put(PvmAtomicOperation.TRANSITION_CREATE_SCOPE.getCanonicalName(), PvmAtomicOperation.TRANSITION_CREATE_SCOPE);
+    // async before start event
     supportedOperations.put(PvmAtomicOperation.PROCESS_START.getCanonicalName(), PvmAtomicOperation.PROCESS_START);
+    // async after activity depending if an outgoing sequence flow exists
     supportedOperations.put(PvmAtomicOperation.TRANSITION_NOTIFY_LISTENER_TAKE.getCanonicalName(), PvmAtomicOperation.TRANSITION_NOTIFY_LISTENER_TAKE);
     supportedOperations.put(PvmAtomicOperation.ACTIVITY_END.getCanonicalName(), PvmAtomicOperation.ACTIVITY_END);
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/async/AsyncAfterTest.java
Patch:
@@ -152,7 +152,6 @@ public void testAsyncAfterServiceTaskMultipleTransitionsConcurrent() {
 
     // start process instance
     Map<String, Object> varMap = new HashMap<String, Object>();
-    varMap.put("flowToTake", "flow2");
     ProcessInstance pi = runtimeService.startProcessInstanceByKey("testProcess", varMap);
 
     // the service task is completely invoked

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/builder/AbstractEmbeddedSubProcessBuilder.java
Patch:
@@ -16,6 +16,7 @@
 /**
  * @author Sebastian Menski
  */
+@SuppressWarnings("rawtypes")
 public class AbstractEmbeddedSubProcessBuilder<B extends AbstractEmbeddedSubProcessBuilder<B, E>, E extends AbstractSubProcessBuilder> {
 
   protected final E subProcessBuilder;

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/builder/AbstractFlowNodeBuilder.java
Patch:
@@ -190,10 +190,12 @@ public Gateway findLastGateway() {
     }
   }
 
+  @SuppressWarnings("rawtypes")
   public AbstractGatewayBuilder moveToLastGateway() {
     return findLastGateway().builder();
   }
 
+  @SuppressWarnings("rawtypes")
   public AbstractFlowNodeBuilder moveToNode(String identifier) {
     ModelElementInstance instance = modelInstance.getModelElementById(identifier);
     if (instance != null && instance instanceof FlowNode) {
@@ -204,6 +206,7 @@ public AbstractFlowNodeBuilder moveToNode(String identifier) {
     }
   }
 
+  @SuppressWarnings("rawtypes")
   public AbstractFlowNodeBuilder connectTo(String identifier) {
     ModelElementInstance target = modelInstance.getModelElementById(identifier);
     if (target == null) {

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/builder/EmbeddedSubProcessBuilder.java
Patch:
@@ -20,7 +20,7 @@
  */
 public class EmbeddedSubProcessBuilder extends AbstractEmbeddedSubProcessBuilder<EmbeddedSubProcessBuilder, SubProcessBuilder> {
 
-
+  @SuppressWarnings("rawtypes")
   protected EmbeddedSubProcessBuilder(AbstractSubProcessBuilder subProcessBuilder) {
     super((SubProcessBuilder) subProcessBuilder, EmbeddedSubProcessBuilder.class);
   }

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/impl/instance/BaseElementImpl.java
Patch:
@@ -92,6 +92,7 @@ public void setExtensionElements(ExtensionElements extensionElements) {
     extensionElementsChild.setChild(this, extensionElements);
   }
 
+  @SuppressWarnings("rawtypes")
   public DiagramElement getDiagramElement() {
     Collection<Reference> incomingReferences = getIncomingReferencesByType(DiagramElement.class);
     for (Reference<?> reference : incomingReferences) {
@@ -105,7 +106,7 @@ public DiagramElement getDiagramElement() {
     return null;
   }
 
-  @SuppressWarnings("unchecked")
+  @SuppressWarnings("rawtypes")
   public Collection<Reference> getIncomingReferencesByType(Class<? extends ModelElementInstance> referenceSourceTypeClass) {
     Collection<Reference> references = new ArrayList<Reference>();
     // we traverse all incoming references in reverse direction

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/impl/instance/BoundaryEventImpl.java
Patch:
@@ -63,6 +63,7 @@ public BoundaryEventImpl(ModelTypeInstanceContext context) {
     super(context);
   }
 
+  @SuppressWarnings("rawtypes")
   public AbstractFlowNodeBuilder builder() {
     throw new ModelTypeException("Builder is not supported for type " + getClass());
   }

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/impl/instance/BpmnModelElementInstanceImpl.java
Patch:
@@ -31,6 +31,7 @@ public BpmnModelElementInstanceImpl(ModelTypeInstanceContext instanceContext) {
     super(instanceContext);
   }
 
+  @SuppressWarnings("rawtypes")
   public AbstractBaseElementBuilder builder() {
     throw new BpmnModelException("No builder implemented for " + this);
   }

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/impl/instance/ConditionalEventDefinitionImpl.java
Patch:
@@ -16,7 +16,6 @@
 import org.camunda.bpm.model.bpmn.instance.Condition;
 import org.camunda.bpm.model.bpmn.instance.ConditionalEventDefinition;
 import org.camunda.bpm.model.bpmn.instance.EventDefinition;
-import org.camunda.bpm.model.bpmn.instance.Expression;
 import org.camunda.bpm.model.xml.ModelBuilder;
 import org.camunda.bpm.model.xml.impl.instance.ModelTypeInstanceContext;
 import org.camunda.bpm.model.xml.type.ModelElementTypeBuilder;

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/impl/instance/FlowNodeImpl.java
Patch:
@@ -66,10 +66,12 @@ public FlowNodeImpl(ModelTypeInstanceContext context) {
     super(context);
   }
 
+  @SuppressWarnings("rawtypes")
   public AbstractFlowNodeBuilder builder() {
     throw new BpmnModelException("No builder implemented for type " + getElementType().getTypeNamespace() +":" + getElementType().getTypeName());
   }
 
+  @SuppressWarnings("rawtypes")
   public void updateAfterReplacement() {
     super.updateAfterReplacement();
     Collection<Reference> incomingReferences = getIncomingReferencesByType(SequenceFlow.class);

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/impl/instance/IntermediateCatchEventImpl.java
Patch:
@@ -50,7 +50,6 @@ public IntermediateCatchEventImpl(ModelTypeInstanceContext context) {
   }
 
   @Override
-  @SuppressWarnings("unchecked")
   public IntermediateCatchEventBuilder builder() {
     return new IntermediateCatchEventBuilder((BpmnModelInstance) modelInstance, this);
   }

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/impl/instance/IntermediateThrowEventImpl.java
Patch:
@@ -50,7 +50,6 @@ public IntermediateThrowEventImpl(ModelTypeInstanceContext context) {
   }
 
   @Override
-  @SuppressWarnings("unchecked")
   public IntermediateThrowEventBuilder builder() {
     return new IntermediateThrowEventBuilder((BpmnModelInstance) modelInstance, this);
   }

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/impl/instance/TaskImpl.java
Patch:
@@ -67,6 +67,7 @@ public TaskImpl(ModelTypeInstanceContext context) {
     super(context);
   }
 
+  @SuppressWarnings("rawtypes")
   public AbstractTaskBuilder builder() {
     throw new ModelTypeException("No builder implemented.");
   }

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/instance/BpmnModelElementInstance.java
Patch:
@@ -27,6 +27,7 @@ public interface BpmnModelElementInstance extends ModelElementInstance {
    *
    * @return the builder object
    */
+  @SuppressWarnings("rawtypes")
   AbstractBaseElementBuilder builder();
 
   /**

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/instance/FlowNode.java
Patch:
@@ -24,6 +24,7 @@
  */
 public interface FlowNode extends FlowElement {
 
+  @SuppressWarnings("rawtypes")
   AbstractFlowNodeBuilder builder();
 
   Collection<SequenceFlow> getIncoming();

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/instance/Gateway.java
Patch:
@@ -24,6 +24,7 @@
  */
 public interface Gateway extends FlowNode {
 
+  @SuppressWarnings("rawtypes")
   AbstractGatewayBuilder builder();
 
   GatewayDirection getGatewayDirection();

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/instance/IntermediateCatchEvent.java
Patch:
@@ -22,7 +22,6 @@
  */
 public interface IntermediateCatchEvent extends CatchEvent {
 
-  @SuppressWarnings("unchecked")
   IntermediateCatchEventBuilder builder();
 
 }

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/instance/IntermediateThrowEvent.java
Patch:
@@ -22,7 +22,6 @@
  */
 public interface IntermediateThrowEvent extends ThrowEvent {
 
-  @SuppressWarnings("unchecked")
   IntermediateThrowEventBuilder builder();
 
 }

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/instance/ConditionalEventDefinitionTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.camunda.bpm.model.bpmn.instance;
 
-import org.camunda.bpm.model.bpmn.impl.instance.ConditionImpl;
 import org.junit.Test;
 
 import java.util.Arrays;

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/impl/instance/bpmndi/BpmnLabelImpl.java
Patch:
@@ -47,7 +47,6 @@ public BpmnLabel newInstance(ModelTypeInstanceContext instanceContext) {
       });
 
     labelStyleAttribute = typeBuilder.stringAttribute(BPMNDI_ATTRIBUTE_LABEL_STYLE)
-      .namespace(BPMNDI_NS)
       .qNameAttributeReference(BpmnLabelStyle.class)
       .build();
 

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/impl/instance/bpmndi/BpmnPlaneImpl.java
Patch:
@@ -47,7 +47,6 @@ public BpmnPlane newInstance(ModelTypeInstanceContext instanceContext) {
       });
 
     bpmnElementAttribute = typeBuilder.stringAttribute(BPMNDI_ATTRIBUTE_BPMN_ELEMENT)
-      .namespace(BPMNDI_NS)
       .qNameAttributeReference(BaseElement.class)
       .build();
 

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/impl/instance/dc/PointImpl.java
Patch:
@@ -43,12 +43,10 @@ public Point newInstance(ModelTypeInstanceContext instanceContext) {
       });
 
     xAttribute = typeBuilder.doubleAttribute(DC_ATTRIBUTE_X)
-      .namespace(DC_NS)
       .required()
       .build();
 
     yAttribute = typeBuilder.doubleAttribute(DC_ATTRIBUTE_Y)
-      .namespace(DC_NS)
       .required()
       .build();
 

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/impl/instance/di/DiagramElementImpl.java
Patch:
@@ -43,7 +43,6 @@ public static void registerType(ModelBuilder modelBuilder) {
       .abstractType();
 
     idAttribute = typeBuilder.stringAttribute(DI_ATTRIBUTE_ID)
-      .namespace(DI_NS)
       .idAttribute()
       .build();
 

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/impl/instance/di/StyleImpl.java
Patch:
@@ -39,7 +39,6 @@ public static void registerType(ModelBuilder modelBuilder) {
       .abstractType();
 
     idAttribute = typeBuilder.stringAttribute(DI_ATTRIBUTE_ID)
-      .namespace(DI_NS)
       .idAttribute()
       .build();
 

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/instance/bpmndi/BpmnLabelTest.java
Patch:
@@ -36,7 +36,7 @@ public Collection<ChildElementAssumption> getChildElementAssumptions() {
 
   public Collection<AttributeAssumption> getAttributesAssumptions() {
     return Arrays.asList(
-      new AttributeAssumption(BPMNDI_NS, "labelStyle")
+      new AttributeAssumption("labelStyle")
     );
   }
 }

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/instance/bpmndi/BpmnPlaneTest.java
Patch:
@@ -36,7 +36,7 @@ public Collection<ChildElementAssumption> getChildElementAssumptions() {
 
   public Collection<AttributeAssumption> getAttributesAssumptions() {
     return Arrays.asList(
-      new AttributeAssumption(BPMNDI_NS, "bpmnElement")
+      new AttributeAssumption("bpmnElement")
     );
   }
 }

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/instance/dc/PointTest.java
Patch:
@@ -35,8 +35,8 @@ public Collection<ChildElementAssumption> getChildElementAssumptions() {
 
   public Collection<AttributeAssumption> getAttributesAssumptions() {
     return Arrays.asList(
-      new AttributeAssumption(DC_NS, "x", false, true),
-      new AttributeAssumption(DC_NS, "y", false, true)
+      new AttributeAssumption("x", false, true),
+      new AttributeAssumption("y", false, true)
     );
   }
 

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/instance/di/DiagramElementTest.java
Patch:
@@ -37,7 +37,7 @@ public Collection<ChildElementAssumption> getChildElementAssumptions() {
 
   public Collection<AttributeAssumption> getAttributesAssumptions() {
     return Arrays.asList(
-      new AttributeAssumption(DI_NS, "id", true)
+      new AttributeAssumption("id", true)
     );
   }
 }

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/instance/di/StyleTest.java
Patch:
@@ -35,7 +35,7 @@ public Collection<ChildElementAssumption> getChildElementAssumptions() {
 
   public Collection<AttributeAssumption> getAttributesAssumptions() {
     return Arrays.asList(
-      new AttributeAssumption(DI_NS, "id", true)
+      new AttributeAssumption("id", true)
     );
   }
 }

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/impl/instance/Source.java
Patch:
@@ -22,7 +22,7 @@
 import static org.camunda.bpm.model.xml.type.ModelElementTypeBuilder.ModelTypeInstanceProvider;
 
 /**
- * The BPMN source element of the BPMN tRelationship type
+ * The BPMN source element of the BPMN tRelationship and tLinkEventDefinition type
  *
  * @author Sebastian Menski
  */

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/ModelTest.java
Patch:
@@ -64,8 +64,7 @@ public void testExtendingTypeCalculation() {
     baseInstanceTypes.add(model.getType(ExtensionElements.class));
     baseInstanceTypes.add(model.getType(EventDefinition.class));
     Collection<ModelElementType> allExtendingTypes = ModelUtil.calculateAllExtendingTypes(bpmnModelInstance.getModel(), baseInstanceTypes);
-    assertThat(allExtendingTypes).hasSize(8);
+    assertThat(allExtendingTypes).hasSize(16);
   }
 
-
 }

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/Bpmn.java
Patch:
@@ -290,6 +290,7 @@ protected void doRegisterTypes(ModelBuilder bpmnModelBuilder) {
     InterfaceImpl.registerType(bpmnModelBuilder);
     InterfaceRef.registerType(bpmnModelBuilder);
     IntermediateCatchEventImpl.registerType(bpmnModelBuilder);
+    IntermediateThrowEventImpl.registerType(bpmnModelBuilder);
     IoBindingImpl.registerType(bpmnModelBuilder);
     IoSpecificationImpl.registerType(bpmnModelBuilder);
     ItemAwareElementImpl.registerType(bpmnModelBuilder);

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/impl/BpmnModelConstants.java
Patch:
@@ -154,6 +154,7 @@ public final class BpmnModelConstants {
   public static final String BPMN_ELEMENT_PARALLEL_GATEWAY = "parallelGateway";
   public static final String BPMN_ELEMENT_EXCLUSIVE_GATEWAY = "exclusiveGateway";
   public static final String BPMN_ELEMENT_INTERMEDIATE_CATCH_EVENT = "intermediateCatchEvent";
+  public static final String BPMN_ELEMENT_INTERMEDIATE_THROW_EVENT = "intermediateThrowEvent";
   public static final String BPMN_ELEMENT_END_POINT = "endPoint";
   public static final String BPMN_ELEMENT_PARTICIPANT_MULTIPLICITY = "participantMultiplicity";
   public static final String BPMN_ELEMENT_PARTICIPANT = "participant";

File: model-api/bpmn-model/src/test/java/org/camunda/bpm/model/bpmn/ModelTest.java
Patch:
@@ -64,7 +64,7 @@ public void testExtendingTypeCalculation() {
     baseInstanceTypes.add(model.getType(ExtensionElements.class));
     baseInstanceTypes.add(model.getType(EventDefinition.class));
     Collection<ModelElementType> allExtendingTypes = ModelUtil.calculateAllExtendingTypes(bpmnModelInstance.getModel(), baseInstanceTypes);
-    assertThat(allExtendingTypes).hasSize(7);
+    assertThat(allExtendingTypes).hasSize(8);
   }
 
 

File: model-api/bpmn-model/src/main/java/org/camunda/bpm/model/bpmn/instance/OutputSet.java
Patch:
@@ -26,11 +26,11 @@ public interface OutputSet extends BaseElement {
 
   void setName(String name);
 
-  Collection<DataInput> getDataOutputRefs();
+  Collection<DataOutput> getDataOutputRefs();
 
-  Collection<DataInput> getOptionalOutputRefs();
+  Collection<DataOutput> getOptionalOutputRefs();
 
-  Collection<DataInput> getWhileExecutingOutputRefs();
+  Collection<DataOutput> getWhileExecutingOutputRefs();
 
   Collection<InputSet> getInputSetRefs();
 }

File: webapps/camunda-webapp/core/src/main/java/org/camunda/bpm/cockpit/plugin/PluginRegistry.java
Patch:
@@ -18,8 +18,8 @@
 /**
  * The holder of registered cockpit plugins.
  *
- * This class is deprecated, use
- *
+ * This class is deprecated, use {@link AppPluginRegistry}
+ * 
  * @author nico.rehwaldt
  */
 @Deprecated

File: webapps/core/src/main/java/org/camunda/bpm/cockpit/plugin/PluginRegistry.java
Patch:
@@ -18,8 +18,8 @@
 /**
  * The holder of registered cockpit plugins.
  *
- * This class is deprecated, use
- *
+ * This class is deprecated, use {@link AppPluginRegistry}
+ * 
  * @author nico.rehwaldt
  */
 @Deprecated

File: webapps/camunda-webapp/core/src/main/java/org/camunda/bpm/cockpit/plugin/PluginRegistry.java
Patch:
@@ -18,8 +18,8 @@
 /**
  * The holder of registered cockpit plugins.
  *
- * This class is deprecated, use
- *
+ * This class is deprecated, use {@link AppPluginRegistry}
+ * 
  * @author nico.rehwaldt
  */
 @Deprecated

File: webapps/webapp/src/main/java/org/camunda/bpm/webapp/impl/engine/ProcessEnginesFilter.java
Patch:
@@ -82,6 +82,7 @@ protected void applyFilter(HttpServletRequest request, HttpServletResponse respo
       String requestUrl = request.getRequestURL().toString();
       if("tasklist".equals(appName) && requestUrl.contains("default/")) {
           response.sendRedirect(requestUrl.replace("default/", ""));
+          return;
       }
     }
 

File: webapps/camunda-webapp/webapp/src/main/java/org/camunda/bpm/webapp/impl/engine/ProcessEnginesFilter.java
Patch:
@@ -82,6 +82,7 @@ protected void applyFilter(HttpServletRequest request, HttpServletResponse respo
       String requestUrl = request.getRequestURL().toString();
       if("tasklist".equals(appName) && requestUrl.contains("default/")) {
           response.sendRedirect(requestUrl.replace("default/", ""));
+          return;
       }
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -3258,8 +3258,8 @@ protected void parseInputParameterElement(Element inputElement, IoMapping ioMapp
 
   protected void parseCamundaOutputParameters(Element inputOutputElement, IoMapping ioMapping) {
     List<Element> outputParameters = inputOutputElement.elementsNS(BpmnParser.ACTIVITI_BPMN_EXTENSIONS_NS, "outputParameter");
-    for (Element inputParameterElement : outputParameters) {
-      parseOutputParameterElement(inputParameterElement, ioMapping);
+    for (Element outputParameterElement : outputParameters) {
+      parseOutputParameterElement(outputParameterElement, ioMapping);
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/listener/ScriptTaskListener.java
Patch:
@@ -13,8 +13,6 @@
 
 package org.camunda.bpm.engine.impl.bpmn.listener;
 
-import java.io.StringReader;
-
 import org.camunda.bpm.engine.delegate.DelegateTask;
 import org.camunda.bpm.engine.delegate.TaskListener;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
@@ -24,6 +22,8 @@
 import org.camunda.bpm.engine.impl.scripting.ScriptFactory;
 import org.camunda.bpm.engine.impl.scripting.env.ScriptingEnvironment;
 
+import java.io.StringReader;
+
 public class ScriptTaskListener implements TaskListener {
 	private Expression script;
 
@@ -43,7 +43,7 @@ public void notify(DelegateTask delegateTask) {
 		ProcessEngineConfigurationImpl processEngineConfiguration = Context.getProcessEngineConfiguration();
     ScriptingEnvironment scriptEnv = processEngineConfiguration.getScriptingEnvironment();
     ScriptFactory scriptFactory = processEngineConfiguration.getScriptFactory();
-    ExecutableScript executableScript = scriptFactory.crateScript(new StringReader(script.getExpressionText()), language.getExpressionText());
+    ExecutableScript executableScript = scriptFactory.createScript(new StringReader(script.getExpressionText()), language.getExpressionText());
 
     Object result = scriptEnv.execute(executableScript, delegateTask);
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -1486,7 +1486,7 @@ public ActivityImpl parseScriptTask(Element scriptTaskElement, ScopeImpl scope)
   protected ExecutableScript parseScript(String script, String language) {
     ExecutableScript executableScript = Context.getProcessEngineConfiguration()
       .getScriptFactory()
-      .crateScript(new StringReader(script), language);
+      .createScript(new StringReader(script), language);
     return executableScript;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/engine/JuelFormEngine.java
Patch:
@@ -61,7 +61,7 @@ protected Object executeScript(String scriptSrc, VariableScope scope) {
     ProcessEngineConfigurationImpl processEngineConfiguration = Context.getProcessEngineConfiguration();
     ScriptingEnvironment scriptingEnvironment = processEngineConfiguration.getScriptingEnvironment();
     ScriptFactory scriptFactory = processEngineConfiguration.getScriptFactory();
-    ExecutableScript script = scriptFactory.crateScript(new StringReader(scriptSrc), ScriptingEngines.DEFAULT_SCRIPTING_LANGUAGE);
+    ExecutableScript script = scriptFactory.createScript(new StringReader(scriptSrc), ScriptingEngines.DEFAULT_SCRIPTING_LANGUAGE);
     return scriptingEnvironment.execute(script, scope);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/scripting/engine/ScriptingEngines.java
Patch:
@@ -109,7 +109,7 @@ public void setScriptEngineFactories(List<ScriptEngineFactory> scriptEngineFacto
   public CompiledScript compile(Reader reader, String language) {
     ScriptEngine scriptEngine = getScriptEngineForLanguage(language);
 
-    if(scriptEngine instanceof Compilable) {
+    if(scriptEngine instanceof Compilable && !scriptEngine.getFactory().getLanguageName().equalsIgnoreCase("ecmascript")) {
       Compilable compilingEngine = (Compilable) scriptEngine;
 
       try {

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/beans/GroovyProcessEnginePlugin.java
Patch:
@@ -3,8 +3,8 @@
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.impl.cfg.ProcessEnginePlugin;
-import org.camunda.bpm.engine.impl.scripting.ScriptBindingsFactory;
-import org.camunda.bpm.engine.impl.scripting.ScriptingEngines;
+import org.camunda.bpm.engine.impl.scripting.engine.ScriptBindingsFactory;
+import org.camunda.bpm.engine.impl.scripting.engine.ScriptingEngines;
 
 public class GroovyProcessEnginePlugin implements ProcessEnginePlugin {
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/connect/PaConnectSupportTest.java
Patch:
@@ -13,8 +13,6 @@
 
 package org.camunda.bpm.integrationtest.functional.connect;
 
-import java.io.ByteArrayInputStream;
-
 import org.camunda.bpm.connect.interceptor.ConnectorInvocation;
 import org.camunda.bpm.connect.interceptor.RequestInterceptor;
 import org.camunda.bpm.connect.soap.httpclient.SoapHttpConnector;
@@ -55,7 +53,7 @@ public Object handleInvocation(ConnectorInvocation invocation) throws Exception
     soapHttpConnector.createRequest()
       .endpointUrl("http://foo")
       .soapAction("bar")
-      .soapEnvelope(new ByteArrayInputStream("foo".getBytes()))
+      .soapEnvelope("foo")
       .execute();
   }
 

File: connect/soap-httpclient/src/main/java/org/camunda/bpm/connect/soap/httpclient/SoapHttpResponse.java
Patch:
@@ -36,7 +36,7 @@ public SoapHttpResponse(CloseableHttpResponse httpResponse) {
     this.httpResponse = httpResponse;
   }
 
-  public int getStatusCode() {
+  public Integer getStatusCode() {
     return getResponseParameter(PARAM_NAME_STATUS_CODE);
   }
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/CamundaRestResources.java
Patch:
@@ -55,6 +55,8 @@ public class CamundaRestResources {
     RESOURCE_CLASSES.add(DeploymentRestServiceImpl.class);
 
     RESOURCE_CLASSES.add(CaseDefinitionRestServiceImpl.class);
+    RESOURCE_CLASSES.add(CaseInstanceRestServiceImpl.class);
+    RESOURCE_CLASSES.add(CaseExecutionRestServiceImpl.class);
 
     CONFIGURATION_CLASSES.add(JacksonConfigurator.class);
     CONFIGURATION_CLASSES.add(JacksonJsonProvider.class);

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/CaseDefinitionRestServiceImpl.java
Patch:
@@ -71,7 +71,7 @@ public CaseDefinitionResource getCaseDefinitionByKey(String caseDefinitionKey) {
 
   @Override
   public CaseDefinitionResource getCaseDefinitionById(String caseDefinitionId) {
-    return new CaseDefinitionResourceImpl(getProcessEngine(), caseDefinitionId);
+    return new CaseDefinitionResourceImpl(getProcessEngine(), caseDefinitionId, relativeRootResourcePath);
   }
 
   @Override

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/spi/impl/MockedProcessEngineProvider.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Map;
 import java.util.Set;
 
+import org.camunda.bpm.engine.CaseService;
 import org.camunda.bpm.engine.FormService;
 import org.camunda.bpm.engine.HistoryService;
 import org.camunda.bpm.engine.IdentityService;
@@ -56,6 +57,7 @@ private void mockServices(ProcessEngine engine) {
     FormService formService = mock(FormService.class);
     HistoryService historyService = mock(HistoryService.class);
     ManagementService managementService = mock(ManagementService.class);
+    CaseService caseService = mock(CaseService.class);
 
     when(engine.getRepositoryService()).thenReturn(repoService);
     when(engine.getIdentityService()).thenReturn(identityService);
@@ -64,6 +66,7 @@ private void mockServices(ProcessEngine engine) {
     when(engine.getFormService()).thenReturn(formService);
     when(engine.getHistoryService()).thenReturn(historyService);
     when(engine.getManagementService()).thenReturn(managementService);
+    when(engine.getCaseService()).thenReturn(caseService);
   }
 
   @Override

File: spin/core/src/main/java/org/camunda/spin/Spin.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.camunda.spin;
 
-import org.camunda.spin.impl.xml.dom.SpinXmlDomElement;
 import org.camunda.spin.spi.DataFormat;
 import org.camunda.spin.spi.SpinDataFormatException;
 import org.camunda.spin.xml.tree.SpinXmlTreeElement;

File: spin/core/src/main/java/org/camunda/spin/SpinFileNotFoundException.java
Patch:
@@ -20,6 +20,8 @@
  */
 public class SpinFileNotFoundException extends SpinRuntimeException {
 
+  private static final long serialVersionUID = 1L;
+
   public SpinFileNotFoundException(String message) {
     super(message);
   }

File: spin/core/src/main/java/org/camunda/spin/SpinScriptException.java
Patch:
@@ -18,6 +18,8 @@
  */
 public class SpinScriptException extends SpinRuntimeException {
 
+  private static final long serialVersionUID = 1L;
+
   public SpinScriptException(String message) {
     super(message);
   }

File: spin/core/src/main/java/org/camunda/spin/impl/SpinListImpl.java
Patch:
@@ -24,6 +24,8 @@
  */
 public class SpinListImpl<E extends Spin<?>> extends ArrayList<E> implements SpinList<E> {
 
+  private static final long serialVersionUID = 1L;
+
   public SpinListImpl() {
     super();
   }

File: spin/core/src/main/java/org/camunda/spin/xml/tree/SpinXmlTreeAttribute.java
Patch:
@@ -13,6 +13,7 @@
 package org.camunda.spin.xml.tree;
 
 /**
+ * An attribute in a tree-oriented XML data format.
  *
  * @author Sebastian  Menski
  * @author Daniel Meyer

File: spin/core/src/main/java/org/camunda/spin/xml/tree/SpinXmlTreeAttributeException.java
Patch:
@@ -20,6 +20,8 @@
  */
 public class SpinXmlTreeAttributeException extends SpinXmlTreeNodeException {
 
+  private static final long serialVersionUID = 1L;
+
   public SpinXmlTreeAttributeException(String message) {
     super(message);
   }

File: spin/core/src/main/java/org/camunda/spin/xml/tree/SpinXmlTreeElement.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.List;
 
 /**
+ * An element in a tree-oriented XML data format.
  *
  * @author Sebastian Menski
  * @author Daniel Meyer

File: spin/core/src/main/java/org/camunda/spin/xml/tree/SpinXmlTreeElementException.java
Patch:
@@ -20,6 +20,8 @@
  */
 public class SpinXmlTreeElementException extends SpinXmlTreeNodeException {
 
+  private static final long serialVersionUID = 1L;
+
   public SpinXmlTreeElementException(String message) {
     super(message);
   }

File: spin/core/src/main/java/org/camunda/spin/xml/tree/SpinXmlTreeNode.java
Patch:
@@ -15,6 +15,7 @@
 import org.camunda.spin.Spin;
 
 /**
+ * An element in a tree-oriented XML data format.
  *
  * @author Sebastian Menski
  * @author Daniel Meyer

File: spin/core/src/main/java/org/camunda/spin/xml/SpinXmlElement.java
Patch:
@@ -13,7 +13,7 @@
 package org.camunda.spin.xml;
 
 import org.camunda.spin.Spin;
-import org.camunda.spin.SpinCollection;
+import org.camunda.spin.SpinList;
 import org.camunda.spin.impl.xml.dom.SpinXmlDomAttribute;
 
 /**
@@ -24,7 +24,7 @@
  */
 public abstract class SpinXmlElement extends Spin<SpinXmlElement> {
 
-  public SpinCollection<SpinXmlDomAttribute> attrs() {
+  public SpinList<SpinXmlDomAttribute> attrs() {
     return null;
   }
 

File: commons/logging/src/main/java/org/camunda/commons/logging/BaseLogger.java
Patch:
@@ -72,8 +72,7 @@ public abstract class BaseLogger {
   /** the component Id of the logger. */
   protected String componentId;
 
-  BaseLogger() {
-    // hidden
+  protected BaseLogger() {
   }
 
   /**

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/type/reference/AttributeReferenceImpl.java
Patch:
@@ -24,7 +24,7 @@
  */
 public class AttributeReferenceImpl<T extends ModelElementInstance> extends ReferenceImpl<T> implements AttributeReference<T> {
 
-  private final AttributeImpl<String> referenceSourceAttribute;
+  protected final AttributeImpl<String> referenceSourceAttribute;
 
   public AttributeReferenceImpl(AttributeImpl<String> referenceSourceAttribute) {
     this.referenceSourceAttribute = referenceSourceAttribute;
@@ -58,7 +58,7 @@ protected void updateReference(ModelElementInstance referenceSourceElement, Stri
     }
   }
 
-  protected void removeReference(ModelElementInstance referenceSourceElement) {
+  protected void removeReference(ModelElementInstance referenceSourceElement, ModelElementInstance referenceTargetElement) {
     referenceSourceAttribute.removeAttribute(referenceSourceElement);
   }
 

File: model-api/xml-model/src/test/java/org/camunda/bpm/model/xml/testmodel/TestModelConstants.java
Patch:
@@ -42,6 +42,7 @@ public abstract class TestModelConstants {
   public static final String ATTRIBUTE_NAME_IS_ENDANGERED = "isEndangered";
   public static final String ATTRIBUTE_NAME_GENDER = "gender";
   public static final String ATTRIBUTE_NAME_AGE = "age";
+  public static final String ATTRIBUTE_NAME_BEST_FRIEND_REFS = "bestFriendRefs";
   public static final String ATTRIBUTE_NAME_ANIMAL_REF = "animalRef";
   public static final String ATTRIBUTE_NAME_WINGSPAN = "wingspan";
 

File: engine/src/main/java/org/camunda/bpm/application/impl/metadata/ProcessesXmlParser.java
Patch:
@@ -39,7 +39,7 @@ public class ProcessesXmlParser extends Parser {
    */
   public ProcessesXmlParse createParse() {
     ProcessesXmlParse processesXmlParse = new ProcessesXmlParse(this);
-    processesXmlParse.setSchemaResource(ReflectUtil.getResource(PROCESS_APPLICATION_XSD).toString());
+    processesXmlParse.setSchemaResource(ReflectUtil.getResourceUrlAsString(PROCESS_APPLICATION_XSD));
     return processesXmlParse;
   }
 

File: engine/src/main/java/org/camunda/bpm/container/impl/metadata/BpmPlatformXmlParser.java
Patch:
@@ -40,7 +40,7 @@ public class BpmPlatformXmlParser extends Parser {
    */
   public BpmPlatformXmlParse createParse() {
     BpmPlatformXmlParse parse = new BpmPlatformXmlParse(this);
-    parse.setSchemaResource(ReflectUtil.getResource(BPM_PLATFORM_XSD).toString());
+    parse.setSchemaResource(ReflectUtil.getResourceUrlAsString(BPM_PLATFORM_XSD));
     return parse;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -147,7 +147,7 @@ public BpmnParse(BpmnParser parser) {
     super(parser);
     this.expressionManager = parser.getExpressionManager();
     this.parseListeners = parser.getParseListeners();
-    setSchemaResource(ReflectUtil.getResource(BpmnParser.BPMN_20_SCHEMA_LOCATION).toString());
+    setSchemaResource(ReflectUtil.getResourceUrlAsString(BpmnParser.BPMN_20_SCHEMA_LOCATION));
   }
 
   public BpmnParse deployment(DeploymentEntity deployment) {

File: engine/src/main/java/org/camunda/bpm/application/impl/metadata/ProcessesXmlParser.java
Patch:
@@ -39,7 +39,7 @@ public class ProcessesXmlParser extends Parser {
    */
   public ProcessesXmlParse createParse() {
     ProcessesXmlParse processesXmlParse = new ProcessesXmlParse(this);
-    processesXmlParse.setSchemaResource(ReflectUtil.getResourceUrlAsString(PROCESS_APPLICATION_XSD));
+    processesXmlParse.setSchemaResource(ReflectUtil.getResource(PROCESS_APPLICATION_XSD).toString());
     return processesXmlParse;
   }
 

File: engine/src/main/java/org/camunda/bpm/container/impl/metadata/BpmPlatformXmlParser.java
Patch:
@@ -40,7 +40,7 @@ public class BpmPlatformXmlParser extends Parser {
    */
   public BpmPlatformXmlParse createParse() {
     BpmPlatformXmlParse parse = new BpmPlatformXmlParse(this);
-    parse.setSchemaResource(ReflectUtil.getResourceUrlAsString(BPM_PLATFORM_XSD));
+    parse.setSchemaResource(ReflectUtil.getResource(BPM_PLATFORM_XSD).toString());
     return parse;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -147,7 +147,7 @@ public BpmnParse(BpmnParser parser) {
     super(parser);
     this.expressionManager = parser.getExpressionManager();
     this.parseListeners = parser.getParseListeners();
-    setSchemaResource(ReflectUtil.getResourceUrlAsString(BpmnParser.BPMN_20_SCHEMA_LOCATION));
+    setSchemaResource(ReflectUtil.getResource(BpmnParser.BPMN_20_SCHEMA_LOCATION).toString());
   }
 
   public BpmnParse deployment(DeploymentEntity deployment) {

File: spin/core/src/main/java/org/camunda/spin/logging/SpinCoreLogger.java
Patch:
@@ -31,11 +31,11 @@ public SpinCoreLogger() {
   }
 
   public IllegalArgumentException parameterIsNullException(String parameterName) {
-    return new IllegalArgumentException(prepareExceptionMessage("001", "Parameter '{}' is null", parameterName));
+    return new IllegalArgumentException(exceptionMessage("001", "Parameter '{}' is null", parameterName));
   }
 
   public SpinRuntimeException unableToInstantiateClass(String className, Exception cause) {
-    return new SpinRuntimeException(prepareExceptionMessage("002", "Unable to instantiate class '{}'", className), cause);
+    return new SpinRuntimeException(exceptionMessage("002", "Unable to instantiate class '{}'", className), cause);
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetActivityInstanceCmd.java
Patch:
@@ -66,7 +66,7 @@ public ActivityInstance execute(CommandContext commandContext) {
     // find process instance && index executions by parentActivityInstanceId
     Map<String, List<ExecutionEntity>> executionsByParentActIds = new HashMap<String, List<ExecutionEntity>>();
     for (ExecutionEntity executionEntity : executionList) {
-      if(executionEntity.isProcessInstance()) {
+      if(executionEntity.isProcessInstanceExecution()) {
         processInstance = executionEntity;
       }
       String parentActivityInstanceId = executionEntity.getParentActivityInstanceId();

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SetProcessDefinitionVersionCmd.java
Patch:
@@ -85,7 +85,7 @@ public Void execute(CommandContext commandContext) {
     ExecutionEntity processInstance = executionManager.findExecutionById(processInstanceId);
     if (processInstance == null) {
       throw new ProcessEngineException("No process instance found for id = '" + processInstanceId + "'.");
-    } else if (!processInstance.isProcessInstance()) {
+    } else if (!processInstance.isProcessInstanceExecution()) {
       throw new ProcessEngineException(
         "A process instance id is required, but the provided id " +
         "'"+processInstanceId+"' " +

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/delegate/ActivityExecution.java
Patch:
@@ -130,7 +130,7 @@ public interface ActivityExecution extends DelegateExecution {
   /**
    * returns whether this execution is a process instance or not.
    */
-  boolean isProcessInstance();
+  boolean isProcessInstanceExecution();
 
   /**
    * Inactivates this execution.

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/ExecutionImpl.java
Patch:
@@ -186,7 +186,7 @@ public String getProcessDefinitionId() {
   // process instance /////////////////////////////////////////////////////////
 
   public void start(String businessKey, Map<String, Object> variables) {
-    if (isProcessInstance()) {
+    if (isProcessInstanceExecution()) {
       if (processInstanceStartContext == null) {
         processInstanceStartContext = new ProcessInstanceStartContext(processDefinition.getInitial());
       }
@@ -240,7 +240,7 @@ protected String generateActivityInstanceId(String activityId) {
   // toString /////////////////////////////////////////////////////////////////
 
   public String toString() {
-    if (isProcessInstance()) {
+    if (isProcessInstanceExecution()) {
       return "ProcessInstance["+getToStringIdentity()+"]";
     } else {
       return (isEventScope? "EventScope":"")+(isConcurrent? "Concurrent" : "")+(isScope() ? "Scope" : "")+"Execution["+getToStringIdentity()+"]";

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationActivityEnd.java
Patch:
@@ -52,7 +52,7 @@ protected void eventNotificationsCompleted(PvmExecutionImpl execution) {
       execution.setActivity(parentActivity);
       execution.performOperation(ACTIVITY_END);
 
-    } else if (execution.isProcessInstance()) {
+    } else if (execution.isProcessInstanceExecution()) {
       execution.performOperation(PROCESS_END);
 
     } else if (execution.isScope()) {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/ExecutionQueryTest.java
Patch:
@@ -1078,7 +1078,7 @@ public void testExecutionQueryWithProcessVariable() {
     List<Execution> concurrentExecutions = runtimeService.createExecutionQuery().processInstanceId(pi.getId()).list();
     assertEquals(3, concurrentExecutions.size());
     for (Execution execution : concurrentExecutions) {
-      if (!((ExecutionEntity)execution).isProcessInstance()) {
+      if (!((ExecutionEntity)execution).isProcessInstanceExecution()) {
         // only the concurrent executions, not the root one, would be cooler to query that directly, see http://jira.codehaus.org/browse/ACT-1373
         runtimeService.setVariableLocal(execution.getId(), "x", "child");
       }

File: spin/core/src/test/java/org/camunda/spin/xml/SpinXmlTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;
-import java.nio.charset.StandardCharsets;
+import java.nio.charset.Charset;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.camunda.spin.DataFormats.xml;
@@ -30,7 +30,7 @@
 public class SpinXmlTest {
 
   public final static String TEST_STRING = "<customers><customer id=\"customer1\" /><customer id=\"customer2\" /></customers>";
-  public final static InputStream TEST_INPUT_STREAM = new ByteArrayInputStream(TEST_STRING.getBytes(StandardCharsets.UTF_8));
+  public final static InputStream TEST_INPUT_STREAM = new ByteArrayInputStream(TEST_STRING.getBytes(Charset.forName("UTF-8")));
 
   @Test
   public void shouldWrapXmlString() {

File: engine/src/main/java/org/camunda/bpm/engine/RuntimeService.java
Patch:
@@ -792,6 +792,8 @@ public interface RuntimeService {
    *          the name of the message event
    * @param businessKey
    *          the business key of process instances to correlate against
+   * @param processVariables
+   *          a map of variables added to the execution or newly created process instance
    * @throws MismatchingMessageCorrelationException if none or more than one execution or process definition is correlated
    * @throws ProcessEngineException if messageName is null
    */

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/message/MessageEventSubprocessTest.java
Patch:
@@ -442,7 +442,7 @@ public void testNonInterruptingInEmbeddedSubprocess() {
   }
 
   @Deployment
-  public void FAILING_testMultipleNonInterruptingInEmbeddedSubprocess() {
+  public void testMultipleNonInterruptingInEmbeddedSubprocess() {
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("process");
 
     // the process instance must have a message event subscription:

File: engine/src/main/java/org/camunda/bpm/engine/RuntimeService.java
Patch:
@@ -792,6 +792,8 @@ public interface RuntimeService {
    *          the name of the message event
    * @param businessKey
    *          the business key of process instances to correlate against
+   * @param processVariables
+   *          a map of variables added to the execution or newly created process instance
    * @throws MismatchingMessageCorrelationException if none or more than one execution or process definition is correlated
    * @throws ProcessEngineException if messageName is null
    */

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/DeploymentManager.java
Patch:
@@ -161,4 +161,5 @@ public void close() {
 
   public void flush() {
   }
+
 }

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/DeploymentRestService.java
Patch:
@@ -39,6 +39,7 @@ List<DeploymentDto> getDeployments(@Context UriInfo uriInfo,
                                      @QueryParam("maxResults") Integer maxResults);
 
   @POST
+  @Path("/create")
   @Consumes(MediaType.MULTIPART_FORM_DATA)
   @Produces(MediaType.APPLICATION_JSON)
   DeploymentDto createDeployment(@Context UriInfo uriInfo, MultipartFormData multipartFormData);

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/ProcessEngineRestService.java
Patch:
@@ -67,6 +67,9 @@ public interface ProcessEngineRestService {
   @Path("/{name}" + IncidentRestService.PATH)
   IncidentRestService getIncidentService(@PathParam("name") String engineName);
 
+  @Path("/{name}" + DeploymentRestService.PATH)
+  DeploymentRestService getDeploymentRestService(@PathParam("name") String engineName);
+
   @Path("/{name}" + HistoryRestService.PATH)
   HistoryRestService getHistoryRestService(@PathParam("name") String engineName);
 

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractDeploymentRestServiceQueryTest.java
Patch:
@@ -30,7 +30,7 @@
 
 public abstract class AbstractDeploymentRestServiceQueryTest extends AbstractRestServiceTest {
 
-  protected static final String DEPLOYMENT_QUERY_URL = TEST_RESOURCE_ROOT_PATH + "/deployments";
+  protected static final String DEPLOYMENT_QUERY_URL = TEST_RESOURCE_ROOT_PATH + "/deployment";
   protected static final String DEPLOYMENT_COUNT_QUERY_URL = DEPLOYMENT_QUERY_URL + "/count";
   private DeploymentQuery mockedQuery;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/scripting/ScriptBindings.java
Patch:
@@ -36,7 +36,7 @@
  * <li>additional bindings provided through a set of {@link Resolver Resolvers}.</li>
  * </ul>
  *
- * <p><strong>Note on backwards compatibility:</strong> before 7.1 the Script
+ * <p><strong>Note on backwards compatibility:</strong> before 7.2 the Script
  * bindings behaved in a way that all script variables were automatically exposed
  * as process variables. You can enable this behavior by setting {@link #autoStoreScriptVariables}.
  * </p>

File: engine/src/main/java/org/camunda/bpm/engine/impl/util/ReflectUtil.java
Patch:
@@ -148,7 +148,6 @@ public static String getResourceUrlAsString(String name) {
    */
   public static URI urlToURI(URL url) {
     try {
-      //return new URI(url.getProtocol(), url.getAuthority(), url.getPath(), url.getQuery(), null);
       return new URI(url.getProtocol(), url.getPath(), null);
     } catch (URISyntaxException e) {
       throw new ProcessEngineException("couldn't convert URL to URI " + url, e);

File: engine/src/main/java/org/camunda/bpm/engine/impl/util/ReflectUtil.java
Patch:
@@ -148,7 +148,8 @@ public static String getResourceUrlAsString(String name) {
    */
   public static URI urlToURI(URL url) {
     try {
-      return new URI(url.getProtocol(), url.getAuthority(), url.getPath(), url.getQuery(), null);
+      //return new URI(url.getProtocol(), url.getAuthority(), url.getPath(), url.getQuery(), null);
+      return new URI(url.getProtocol(), url.getPath(), null);
     } catch (URISyntaxException e) {
       throw new ProcessEngineException("couldn't convert URL to URI " + url, e);
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/scripting/ResolverFactory.java
Patch:
@@ -1,9 +1,9 @@
 /* Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: engine/src/main/java/org/camunda/bpm/engine/impl/scripting/VariableScopeResolverFactory.java
Patch:
@@ -1,9 +1,9 @@
 /* Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/event/CdiProcessApplicationEventSupportTest.java
Patch:
@@ -62,7 +62,7 @@ public void testEventListener() {
     Assert.assertNotNull(listenerInvocationCount);
     Assert.assertEquals(5, listenerInvocationCount.intValue());
 
-    Task task = taskService.createTaskQuery().singleResult();
+    Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
     taskService.setAssignee(task.getId(), "demo");
     listenerInvocationCount = (Integer) runtimeService.getVariable(processInstance.getId(), ExecutionListenerProcessApplication.LISTENER_INVOCATION_COUNT);
     Assert.assertEquals(6, listenerInvocationCount.intValue());

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/ParallelMultiInstanceBehavior.java
Patch:
@@ -55,7 +55,7 @@ protected void createInstances(ActivityExecution execution, int nrOfInstances) t
 
       // In case of an embedded subprocess, and extra child execution is required
       // Otherwise, all child executions would end up under the same parent,
-      // without any differentation to which embedded subprocess they belong
+      // without any differentiation to which embedded subprocess they belong
       if (isExtraScopeNeeded()) {
         ActivityExecution extraScopedExecution = concurrentExecution.createExecution();
         extraScopedExecution.setActive(true);

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -2303,7 +2303,7 @@ protected void parseTimerStartEventDefinition(Element timerEventDefinition, Acti
 
   protected void parseTimerStartEventDefinitionforEventSubprocess(Element timerEventDefinition, ActivityImpl timerActivity, ScopeImpl catchingScope) {
     timerActivity.setProperty("type", "startTimerEvent");
-    TimerDeclarationImpl timerDeclaration = parseTimer(timerEventDefinition, timerActivity, TimerStartEventSubprocessJobHander.TYPE);
+    TimerDeclarationImpl timerDeclaration = parseTimer(timerEventDefinition, timerActivity, TimerStartEventSubprocessJobHandler.TYPE);
     timerDeclaration.setActivityId(timerActivity.getId());
     timerDeclaration.setEventScopeActivityId(catchingScope.getId());
     timerDeclaration.setJobHandlerConfiguration(timerActivity.getParent().getId());

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -135,7 +135,7 @@
 import org.camunda.bpm.engine.impl.jobexecutor.TimerCatchIntermediateEventJobHandler;
 import org.camunda.bpm.engine.impl.jobexecutor.TimerExecuteNestedActivityJobHandler;
 import org.camunda.bpm.engine.impl.jobexecutor.TimerStartEventJobHandler;
-import org.camunda.bpm.engine.impl.jobexecutor.TimerStartEventSubprocessJobHander;
+import org.camunda.bpm.engine.impl.jobexecutor.TimerStartEventSubprocessJobHandler;
 import org.camunda.bpm.engine.impl.jobexecutor.TimerSuspendJobDefinitionHandler;
 import org.camunda.bpm.engine.impl.jobexecutor.TimerSuspendProcessDefinitionHandler;
 import org.camunda.bpm.engine.impl.mail.MailScanner;
@@ -894,7 +894,7 @@ protected void initJobExecutor() {
     TimerStartEventJobHandler timerStartEvent = new TimerStartEventJobHandler();
     jobHandlers.put(timerStartEvent.getType(), timerStartEvent);
 
-    TimerStartEventSubprocessJobHander timerStartEventSubprocess = new TimerStartEventSubprocessJobHander();
+    TimerStartEventSubprocessJobHandler timerStartEventSubprocess = new TimerStartEventSubprocessJobHandler();
     jobHandlers.put(timerStartEventSubprocess.getType(), timerStartEventSubprocess);
 
     AsyncContinuationJobHandler asyncContinuationJobHandler = new AsyncContinuationJobHandler();

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/TimerStartEventSubprocessJobHandler.java
Patch:
@@ -28,9 +28,9 @@
  * @author Kristin Polenz
  *
  */
-public class TimerStartEventSubprocessJobHander implements JobHandler {
+public class TimerStartEventSubprocessJobHandler implements JobHandler {
 
-  private static Logger log = Logger.getLogger(TimerStartEventSubprocessJobHander.class.getName());
+  private static Logger log = Logger.getLogger(TimerStartEventSubprocessJobHandler.class.getName());
 
   public static final String TYPE = "timer-start-event-subprocess";
 

File: qa/test-db-instance-migration/test-fixture-71/src/test/java/org/camunda/bpm/qa/upgrade/TestJobSuspensionStateUpgrade.java
Patch:
@@ -17,7 +17,7 @@ public void testCascadingSuspensionOfJobs() {
     Assert.assertEquals(0, managementService.createJobQuery().processDefinitionKey(key).active().count());
     Assert.assertEquals(1, managementService.createJobQuery().processDefinitionKey(key).suspended().count());
 
-    // if I activate the process instnace
+    // if I activate the process instance
     runtimeService.activateProcessInstanceById(runtimeService.createProcessInstanceQuery().processDefinitionKey(key).singleResult().getId());
 
     // then the job is active as well

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricVariableInstanceTest.java
Patch:
@@ -442,7 +442,7 @@ public void testQueryByInvalidActivityInstanceIdIn() {
     } catch (ProcessEngineException e) {}
   }
 
-  public void testbinaryFetchingEnabled() {
+  public void testBinaryFetchingEnabled() {
 
     // by default, binary fetching is enabled
 
@@ -461,7 +461,7 @@ public void testbinaryFetchingEnabled() {
     taskService.deleteTask(newTask.getId(), true);
   }
 
-  public void testbinaryFetchingDisabled() {
+  public void testBinaryFetchingDisabled() {
 
     Task newTask = taskService.newTask();
     taskService.saveTask(newTask);

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/history/FullHistoryTest.java
Patch:
@@ -1298,7 +1298,7 @@ public void testHistoricDetailQueryByNonExistingId() {
   }
 
 
-  public void testbinaryFetchingEnabled() {
+  public void testBinaryFetchingEnabled() {
 
     // by default, binary fetching is enabled
 
@@ -1317,7 +1317,7 @@ public void testbinaryFetchingEnabled() {
     taskService.deleteTask(newTask.getId(), true);
   }
 
-  public void testbinaryFetchingDisabled() {
+  public void testBinaryFetchingDisabled() {
 
     Task newTask = taskService.newTask();
     taskService.saveTask(newTask);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/StandaloneInMemProcessEngineConfiguration.java
Patch:
@@ -21,6 +21,6 @@ public class StandaloneInMemProcessEngineConfiguration extends StandaloneProcess
 
   public StandaloneInMemProcessEngineConfiguration() {
     this.databaseSchemaUpdate = DB_SCHEMA_UPDATE_CREATE_DROP;
-    this.jdbcUrl = "jdbc:h2:mem:activiti";
+    this.jdbcUrl = "jdbc:h2:mem:camunda";
   }
 }

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractProcessInstanceRestServiceInteractionTest.java
Patch:
@@ -90,6 +90,7 @@ public void testGetActivityInstanceTree() {
         .body("childActivityInstances[0].id", equalTo(CHILD_EXAMPLE_ACTIVITY_INSTANCE_ID))
         .body("childActivityInstances[0].parentActivityInstanceId", equalTo(CHILD_EXAMPLE_PARENT_ACTIVITY_INSTANCE_ID))
         .body("childActivityInstances[0].activityId", equalTo(CHILD_EXAMPLE_ACTIVITY_ID))
+        .body("childActivityInstances[0].activityType", equalTo(CHILD_EXAMPLE_ACTIVITY_TYPE))
         .body("childActivityInstances[0].processInstanceId", equalTo(CHILD_EXAMPLE_PROCESS_INSTANCE_ID))
         .body("childActivityInstances[0].processDefinitionId", equalTo(CHILD_EXAMPLE_PROCESS_DEFINITION_ID))
         .body("childActivityInstances[0].executionIds", not(empty()))
@@ -105,7 +106,7 @@ public void testGetActivityInstanceTree() {
         .body("childTransitionInstances[0].executionId", equalTo(EXAMPLE_EXECUTION_ID))
         .when().get(PROCESS_INSTANCE_ACTIVIY_INSTANCES_URL);
 
-    Assert.assertEquals("Should return exactly eight properties", 9, response.jsonPath().getMap("").size());
+    Assert.assertEquals("Should return right number of properties", 10, response.jsonPath().getMap("").size());
   }
 
   @Test

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractRestServiceTest.java
Patch:
@@ -76,6 +76,7 @@ public abstract class AbstractRestServiceTest {
   protected static final String CHILD_EXAMPLE_ACTIVITY_INSTANCE_ID = "aChildActivityInstanceId";
   protected static final String CHILD_EXAMPLE_PARENT_ACTIVITY_INSTANCE_ID = "aChildParentActivityInstanceId";
   protected static final String CHILD_EXAMPLE_ACTIVITY_ID = "aChildActivityId";
+  protected static final String CHILD_EXAMPLE_ACTIVITY_TYPE = "aChildActivityType";
   protected static final String CHILD_EXAMPLE_ACTIVITY_NAME = "aChildActivityName";
   protected static final String CHILD_EXAMPLE_PROCESS_INSTANCE_ID = "aChildProcessInstanceId";
   protected static final String CHILD_EXAMPLE_PROCESS_DEFINITION_ID = "aChildProcessDefinitionId";
@@ -87,6 +88,7 @@ public abstract class AbstractRestServiceTest {
     instance.setId(EXAMPLE_ACTIVITY_INSTANCE_ID);
     instance.setParentActivityInstanceId(EXAMPLE_PARENT_ACTIVITY_INSTANCE_ID);
     instance.setActivityId(EXAMPLE_ACTIVITY_ID);
+    instance.setActivityType(CHILD_EXAMPLE_ACTIVITY_TYPE);
     instance.setActivityName(EXAMPLE_ACTIVITY_NAME);
     instance.setProcessInstanceId(EXAMPLE_PROCESS_INSTANCE_ID);
     instance.setProcessDefinitionId(EXAMPLE_PROCESS_DEFINITION_ID);
@@ -98,6 +100,7 @@ public abstract class AbstractRestServiceTest {
     childActivity.setParentActivityInstanceId(CHILD_EXAMPLE_PARENT_ACTIVITY_INSTANCE_ID);
     childActivity.setActivityId(CHILD_EXAMPLE_ACTIVITY_ID);
     childActivity.setActivityName(CHILD_EXAMPLE_ACTIVITY_NAME);
+    childActivity.setActivityType(CHILD_EXAMPLE_ACTIVITY_TYPE);
     childActivity.setProcessInstanceId(CHILD_EXAMPLE_PROCESS_INSTANCE_ID);
     childActivity.setProcessDefinitionId(CHILD_EXAMPLE_PROCESS_DEFINITION_ID);
     childActivity.setBusinessKey(CHILD_EXAMPLE_BUSINESS_KEY);

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/history/HistoricDetailRestServiceImpl.java
Patch:
@@ -47,6 +47,7 @@ public HistoricDetailResource historicDetail(String detailId) {
   public List<HistoricDetailDto> getHistoricDetails(UriInfo uriInfo, Integer firstResult, Integer maxResults) {
     HistoricDetailQueryDto queryDto = new HistoricDetailQueryDto(uriInfo.getQueryParameters());
     HistoricDetailQuery query = queryDto.toQuery(processEngine);
+    query.disableBinaryFetching();
 
     List<HistoricDetail> queryResult;
     if (firstResult != null || maxResults != null) {

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/history/HistoricVariableInstanceRestServiceImpl.java
Patch:
@@ -48,6 +48,7 @@ public List<HistoricVariableInstanceDto> getHistoricVariableInstances(UriInfo ur
   @Override
   public List<HistoricVariableInstanceDto> queryHistoricVariableInstances(HistoricVariableInstanceQueryDto queryDto, Integer firstResult, Integer maxResults) {
     HistoricVariableInstanceQuery query = queryDto.toQuery(processEngine);
+    query.disableBinaryFetching();
 
     List<HistoricVariableInstance> matchingHistoricVariableInstances;
     if (firstResult != null || maxResults != null) {

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/AbstractHistoricDetailRestServiceQueryTest.java
Patch:
@@ -87,6 +87,7 @@ public void testNoParametersQuery() {
       .get(HISTORIC_DETAIL_RESOURCE_URL);
 
     verify(mockedQuery).list();
+    verify(mockedQuery).disableBinaryFetching();
     verifyNoMoreInteractions(mockedQuery);
   }
 

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/history/AbstractHistoricVariableInstanceRestServiceQueryTest.java
Patch:
@@ -76,6 +76,7 @@ public void testNoParametersQuery() {
       .get(HISTORIC_VARIABLE_INSTANCE_RESOURCE_URL);
 
     verify(mockedQuery).list();
+    verify(mockedQuery).disableBinaryFetching();
     verifyNoMoreInteractions(mockedQuery);
   }
 
@@ -90,6 +91,7 @@ public void testNoParametersQueryAsPost() {
       .post(HISTORIC_VARIABLE_INSTANCE_RESOURCE_URL);
 
     verify(mockedQuery).list();
+    verify(mockedQuery).disableBinaryFetching();
     verifyNoMoreInteractions(mockedQuery);
   }
 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/VariableInstanceRestServiceImpl.java
Patch:
@@ -53,6 +53,9 @@ public List<VariableInstanceDto> queryVariableInstances(VariableInstanceQueryDto
     ProcessEngine engine = getProcessEngine();
     VariableInstanceQuery query = queryDto.toQuery(engine);
 
+    // disable binary fetching by default.
+    query.disableBinaryFetching();
+
     List<VariableInstance> matchingInstances;
     if (firstResult != null || maxResults != null) {
       matchingInstances = executePaginatedQuery(query, firstResult, maxResults);

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/runtime/impl/VariableInstanceResourceImpl.java
Patch:
@@ -40,6 +40,7 @@ public VariableInstanceResourceImpl(String variableId, ProcessEngine engine) {
 
   public VariableInstanceDto getVariable() {
     VariableInstance variableInstance = baseQuery()
+      .disableBinaryFetching()
       .singleResult();
     if(variableInstance != null) {
       return VariableInstanceDto.fromVariableInstance(variableInstance);
@@ -52,7 +53,6 @@ public VariableInstanceDto getVariable() {
 
   public InputStream getBinaryVariable() {
     VariableInstance variableInstance = baseQuery()
-        .fetchBinaryValues() // enable byte array fetching
         .singleResult();
     if(variableInstance != null) {
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/VariableInstanceQueryImpl.java
Patch:
@@ -41,7 +41,7 @@ public class VariableInstanceQueryImpl extends AbstractVariableQueryImpl<Variabl
   protected String[] taskIds;
   protected String[] activityInstanceIds;
 
-  protected boolean isByteArrayFetchingEnabled = false;
+  protected boolean isByteArrayFetchingEnabled = true;
 
   public VariableInstanceQueryImpl() { }
 
@@ -85,8 +85,8 @@ public VariableInstanceQuery activityInstanceIdIn(String... activityInstanceIds)
     return this;
   }
 
-  public VariableInstanceQuery fetchBinaryValues() {
-    this.isByteArrayFetchingEnabled = true;
+  public VariableInstanceQuery disableBinaryFetching() {
+    this.isByteArrayFetchingEnabled = false;
     return this;
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/incident/IncidentTest.java
Patch:
@@ -378,7 +378,7 @@ public void testDoNotCreateNewIncident() {
     // execute the available job (should fail again)
     executeAvailableJobs();
 
-    // the incident still exists and their
+    // the incident still exists and there
     // should be not a new incident
     assertEquals(1, query.count());
     tmp = query.singleResult();

File: engine/src/main/java/org/camunda/bpm/application/impl/metadata/ProcessesXmlParser.java
Patch:
@@ -39,7 +39,7 @@ public class ProcessesXmlParser extends Parser {
    */
   public ProcessesXmlParse createParse() {
     ProcessesXmlParse processesXmlParse = new ProcessesXmlParse(this);
-    processesXmlParse.setSchemaResource(ReflectUtil.getResource(PROCESS_APPLICATION_XSD).toString());
+    processesXmlParse.setSchemaResource(ReflectUtil.getResourceUrlAsString(PROCESS_APPLICATION_XSD));
     return processesXmlParse;
   }
 

File: engine/src/main/java/org/camunda/bpm/container/impl/metadata/BpmPlatformXmlParser.java
Patch:
@@ -40,7 +40,7 @@ public class BpmPlatformXmlParser extends Parser {
    */
   public BpmPlatformXmlParse createParse() {
     BpmPlatformXmlParse parse = new BpmPlatformXmlParse(this);
-    parse.setSchemaResource(ReflectUtil.getResource(BPM_PLATFORM_XSD).toString());
+    parse.setSchemaResource(ReflectUtil.getResourceUrlAsString(BPM_PLATFORM_XSD));
     return parse;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -147,7 +147,7 @@ public BpmnParse(BpmnParser parser) {
     super(parser);
     this.expressionManager = parser.getExpressionManager();
     this.parseListeners = parser.getParseListeners();
-    setSchemaResource(ReflectUtil.getResource(BpmnParser.BPMN_20_SCHEMA_LOCATION).toString());
+    setSchemaResource(ReflectUtil.getResourceUrlAsString(BpmnParser.BPMN_20_SCHEMA_LOCATION));
   }
 
   public BpmnParse deployment(DeploymentEntity deployment) {

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/impl/AbstractVariablesResource.java
Patch:
@@ -208,9 +208,9 @@ protected Object deserializeJsonObject(String className, byte[] data) {
     try {
 
       ObjectMapper objectMapper = new ObjectMapper();
-      JavaType type = TypeFactory.defaultInstance().constructFromCanonical(className);
+      JavaType type = TypeFactory.fromCanonical(className);
 
-      return objectMapper.readValue(data, type);
+      return objectMapper.readValue(new String(data), type);
 
     } catch(Exception e) {
       throw new InvalidRequestException(Status.INTERNAL_SERVER_ERROR, "Could not deserialize JSON object: "+e.getMessage());

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractExecutionRestServiceInteractionTest.java
Patch:
@@ -618,7 +618,7 @@ public void testPutSingleLocalSerializableVariable() throws Exception {
 
     ObjectMapper mapper = new ObjectMapper();
     String jsonBytes = mapper.writeValueAsString(serializable);
-    String typeName = TypeFactory.defaultInstance().constructType(serializable.getClass()).toCanonical();
+    String typeName = TypeFactory.type(serializable.getClass()).toCanonical();
 
     String variableKey = "aVariableKey";
 
@@ -641,7 +641,7 @@ public void testPutSingleLocalSerializableVariableUnsupportedMediaType() throws
 
     ObjectMapper mapper = new ObjectMapper();
     String jsonBytes = mapper.writeValueAsString(serializable);
-    String typeName = TypeFactory.defaultInstance().constructType(serializable.getClass()).toCanonical();
+    String typeName = TypeFactory.type(serializable.getClass()).toCanonical();
 
     String variableKey = "aVariableKey";
 

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractProcessInstanceRestServiceInteractionTest.java
Patch:
@@ -732,7 +732,7 @@ public void testPutSingleSerializableVariable() throws Exception {
 
     ObjectMapper mapper = new ObjectMapper();
     String jsonBytes = mapper.writeValueAsString(serializable);
-    String typeName = TypeFactory.defaultInstance().constructType(serializable.getClass()).toCanonical();
+    String typeName = TypeFactory.type(serializable.getClass()).toCanonical();
 
     String variableKey = "aVariableKey";
 
@@ -755,7 +755,7 @@ public void testPutSingleSerializableVariableUnsupportedMediaType() throws Excep
 
     ObjectMapper mapper = new ObjectMapper();
     String jsonBytes = mapper.writeValueAsString(serializable);
-    String typeName = TypeFactory.defaultInstance().constructType(serializable.getClass()).toCanonical();
+    String typeName = TypeFactory.type(serializable.getClass()).toCanonical();
 
     String variableKey = "aVariableKey";
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobManager.java
Patch:
@@ -69,7 +69,8 @@ protected void hintJobExecutor(JobEntity job) {
     JobExecutor jobExecutor = Context.getProcessEngineConfiguration().getJobExecutor();
     JobExecutorContext jobExecutorContext = Context.getJobExecutorContext();
     TransactionListener transactionListener = null;
-    if(job.isExclusive()
+    if(!job.isSuspended()
+            && job.isExclusive()
             && jobExecutorContext != null
             && jobExecutorContext.isExecutingExclusiveJob()) {
       // lock job & add to the queue of the current processor

File: engine/src/main/java/org/camunda/bpm/engine/impl/test/AbstractProcessEngineTestCase.java
Patch:
@@ -295,7 +295,7 @@ public void executeAvailableJobs() {
   public boolean areJobsAvailable() {
     List<Job> list = managementService.createJobQuery().list();
     for (Job job : list) {
-      if (job.getRetries() > 0 && (job.getDuedate() == null || ClockUtil.getCurrentTime().after(job.getDuedate()))) {
+      if (!job.isSuspended() && job.getRetries() > 0 && (job.getDuedate() == null || ClockUtil.getCurrentTime().after(job.getDuedate()))) {
         return true;
       }
     }

File: engine/src/main/java/org/camunda/bpm/engine/SuspendedEntityInteractionException.java
Patch:
@@ -19,7 +19,7 @@
  * 
  * @author Thorben Lindhauer
  */
-public class SuspendedEntityInteractionException extends ProcessEngineException {
+public class SuspendedEntityInteractionException extends BadUserRequestException {
 
   private static final long serialVersionUID = 1L;
 

File: engine-cdi/src/main/java/org/camunda/bpm/engine/cdi/jsf/TaskForm.java
Patch:
@@ -18,7 +18,7 @@
 import org.camunda.bpm.engine.repository.ProcessDefinition;
 
 @ConversationScoped
-@Named("camunda.taskForm")
+@Named("camundaTaskForm")
 public class TaskForm implements Serializable {
 
   private static Logger log = Logger.getLogger(TaskForm.class.getName());
@@ -55,7 +55,7 @@ public void startTask(String taskId, String callbackUrl) {
         return;
       }
       // return it anyway but log an info message
-      log.log(Level.INFO, "Called startTask method without proper parameter (taskId='"+taskId+"'; callbackUrl='"+callbackUrl+"') even if it seems we are not called by an AJAX Postback. Are you using the camunda.taskForm bean correctly?");
+      log.log(Level.INFO, "Called startTask method without proper parameter (taskId='"+taskId+"'; callbackUrl='"+callbackUrl+"') even if it seems we are not called by an AJAX Postback. Are you using the camundaTaskForm bean correctly?");
       return;
     }
     // Note that we always run in a conversation
@@ -81,7 +81,7 @@ public void startTaskForm() {
         return;
       }
       // return it anyway but log an info message
-      log.log(Level.INFO, "Called startTask method without proper parameter (taskId='"+taskId+"'; callbackUrl='"+callbackUrl+"') even if it seems we are not called by an AJAX Postback. Are you using the camunda.taskForm bean correctly?");
+      log.log(Level.INFO, "Called startTask method without proper parameter (taskId='"+taskId+"'; callbackUrl='"+callbackUrl+"') even if it seems we are not called by an AJAX Postback. Are you using the camundaTaskForm bean correctly?");
       return;
     }
     // Note that we always run in a conversation

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/mapper/JacksonConfigurator.java
Patch:
@@ -32,7 +32,9 @@ public class JacksonConfigurator implements ContextResolver<ObjectMapper> {
   public JacksonConfigurator() {
     mapper = new ObjectMapper();
 
-    mapper.getSerializationConfig().setDateFormat(new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"));
+    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
+    mapper.getSerializationConfig().setDateFormat(dateFormat);
+    mapper.getDeserializationConfig().setDateFormat(dateFormat);
     mapper.configure(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES, false);
     mapper.configure(SerializationConfig.Feature.WRITE_DATES_AS_TIMESTAMPS, false);
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/EventSubProcessStartEventActivityBehavior.java
Patch:
@@ -33,16 +33,16 @@
 public class EventSubProcessStartEventActivityBehavior extends NoneStartEventActivityBehavior {
 
   public void execute(ActivityExecution execution) throws Exception {
-    PvmActivity activity = execution.getActivity();
+    PvmActivity parent = (PvmActivity) execution.getActivity().getParent();
 
-    if (activity.isCancelScope()) {
+    if (parent.isCancelScope()) {
 
       // We need to do an interrupt scope in order to remove all jobs (timers ...) and
       // Message / signal event subscriptions created by this or other start events.
 
       // The interrupting event subprocess must only fire once and cancel the Event Handlers
       // created by other event subprocesses.
-      execution.interruptScope("Interrupting event sub process "+ activity + " fired.");
+      execution.interruptScope("Interrupting event sub process "+ parent + " fired.");
     }
 
     super.execute(execution);

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/AtomicOperation.java
Patch:
@@ -30,6 +30,7 @@ public interface AtomicOperation {
   AtomicOperation ACTIVITY_START_CANCEL_SCOPE = new AtomicOperationActivityStartCancelScope();
   AtomicOperation ACTIVITY_EXECUTE = new AtomicOperationActivityExecute();
   AtomicOperation ACTIVITY_END = new AtomicOperationActivityEnd();
+  AtomicOperation FIRE_ACTIVITY_END = new AtomicOperationFireActivityEnd();
 
   AtomicOperation TRANSITION_NOTIFY_LISTENER_END = new AtomicOperationTransitionNotifyListenerEnd();
   AtomicOperation TRANSITION_DESTROY_SCOPE = new AtomicOperationTransitionDestroyScope();

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/AtomicOperationTransitionNotifyListenerEnd.java
Patch:
@@ -1,9 +1,9 @@
 /* Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -31,7 +31,7 @@ protected String getEventName() {
   }
 
   @Override
-  protected void eventNotificationsCompleted(InterpretableExecution execution) {   
+  protected void eventNotificationsCompleted(InterpretableExecution execution) {
     super.eventNotificationsCompleted(execution);
     execution.performOperation(TRANSITION_DESTROY_SCOPE);
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/AtomicOperationTransitionNotifyListenerTake.java
Patch:
@@ -64,7 +64,7 @@ public void execute(InterpretableExecution execution) {
       execution.setEventSource(null);
 
       ActivityImpl activity = (ActivityImpl) execution.getActivity();
-      ActivityImpl nextScope = findNextScope((ScopeImpl) activity.getScope(), transition.getDestination());
+      ActivityImpl nextScope = findNextScope((ScopeImpl) activity.getFlowScope(), transition.getDestination());
       execution.setActivity(nextScope);
 
       if (nextScope.isCancelScope()) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -918,7 +918,7 @@ public ActivityImpl getActivity() {
   /** must be called before the activity member field or getActivity() is called */
   protected void ensureActivityInitialized() {
     if ((activity == null) && (activityId != null)) {
-      activity = getProcessDefinition().findActivity(activityId);
+      setActivity(getProcessDefinition().findActivity(activityId));
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -382,7 +382,7 @@ protected void initializeAssociations(ExecutionEntity execution) {
     execution.tasks = new ArrayList<TaskEntity>();
     execution.incidents = new ArrayList<IncidentEntity>();
 
-    // Cached entity-state initialized to null, all bits are zore, indicating NO entities present
+    // Cached entity-state initialized to null, all bits are zero, indicating NO entities present
     execution.cachedEntityState = 0;
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/ManagementServiceTest.java
Patch:
@@ -352,7 +352,7 @@ public void testSetJobDuedateUnexistingJobId() {
   public void testGetProperties() {
     Map<String, String> properties = managementService.getProperties();
     assertNotNull(properties);
-    assertTrue(!properties.isEmpty());
+    assertFalse(properties.isEmpty());
   }
 
   public void  testSetProperty() {

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/bpmnmodelapi/DelegationCodeBpmnModelRetrievalTest.java
Patch:
@@ -39,7 +39,7 @@ public static WebArchive createProcessApplication() {
     BpmnModelInstance process = Bpmn.createExecutableProcess(TEST_PROCESS)
         .startEvent()
         .serviceTask()
-          .delegateExpression("${bpmnElementRetrievalDelegate}")
+          .camundaDelegateExpression("${bpmnElementRetrievalDelegate}")
       .done();
 
     return initWebArchiveDeployment()

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/callbacks/PostDeployFailureTest_JBOSS.java
Patch:
@@ -41,7 +41,7 @@ public static WebArchive createDeployment1() {
     
     WebArchive archive = ShrinkWrap.create(WebArchive.class, "failingDeployment.war")
         .addAsResource("META-INF/processes.xml", "META-INF/processes.xml")
-        .addAsResource("org/camunda/bpm/integrationtest/invoice.bpmn20.xml")
+        .addAsResource("org/camunda/bpm/integrationtest/invoice-it.bpmn20.xml")
         .addClass(PostDeployFailureApp.class);
 
     return archive;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/cfg/TestCustomProcessesXmlFileLocation.java
Patch:
@@ -15,7 +15,6 @@
 import org.camunda.bpm.engine.RepositoryService;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.camunda.bpm.integrationtest.util.DeploymentHelper;
-import org.camunda.bpm.integrationtest.util.TestContainer;
 import org.jboss.arquillian.container.test.api.Deployment;
 import org.jboss.arquillian.junit.Arquillian;
 import org.jboss.shrinkwrap.api.ShrinkWrap;
@@ -43,7 +42,7 @@ public static WebArchive processArchive() {
         .addAsResource("org/camunda/bpm/integrationtest/deployment/cfg/processes.xml", "my/alternate/location/processes.xml")
         .addClass(AbstractFoxPlatformIntegrationTest.class)
         .addClass(CustomProcessApplication.class)
-        .addAsResource("org/camunda/bpm/integrationtest/deployment/cfg/invoice.bpmn20.xml");
+        .addAsResource("org/camunda/bpm/integrationtest/deployment/cfg/invoice-it.bpmn20.xml");
     
     return archive;
     
@@ -54,7 +53,7 @@ public void testDeployProcessArchive() {
     Assert.assertNotNull(processEngine);
     RepositoryService repositoryService = processEngine.getRepositoryService();
     long count = repositoryService.createProcessDefinitionQuery()
-      .processDefinitionKey("invoice")
+      .processDefinitionKey("invoice-it")
       .count();
     
     Assert.assertEquals(1, count);

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/classloading/war/JavaDelegateResolutionTest.java
Patch:
@@ -81,11 +81,11 @@ public void testResolveClassFromJobExecutor() throws InterruptedException {
     
     runtimeService.startProcessInstanceByKey("testResolveClassFromJobExecutor");        
     
-    Assert.assertEquals(1, runtimeService.createProcessInstanceQuery().count());
+    Assert.assertEquals(1, runtimeService.createProcessInstanceQuery().processDefinitionKey("testResolveClassFromJobExecutor").count());
     
     waitForJobExecutorToProcessAllJobs(16000);
     
-    Assert.assertEquals(0, runtimeService.createProcessInstanceQuery().count());
+    Assert.assertEquals(0, runtimeService.createProcessInstanceQuery().processDefinitionKey("testResolveClassFromJobExecutor").count());
     
   }
   

File: engine/src/test/java/org/camunda/bpm/engine/test/history/OperationLogTaskProcessTest.java
Patch:
@@ -184,7 +184,7 @@ public void testSubmitTaskForm_Resolve() {
     assertEquals(2, query.count());
 
     // assert: delegation
-    assertEquals(null, query.property("delegation").singleResult().getOrgValue());
+    assertEquals(DelegationState.PENDING.toString(), query.property("delegation").singleResult().getOrgValue());
     assertEquals(DelegationState.RESOLVED.toString(), query.property("delegation").singleResult().getNewValue());
 
     // assert: assignee

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricTaskInstanceQueryImpl.java
Patch:
@@ -264,7 +264,7 @@ public HistoricTaskInstanceQueryImpl orderByTaskId() {
   }
 
   public HistoricTaskInstanceQueryImpl orderByHistoricActivityInstanceId() {
-    orderBy(HistoricTaskInstanceQueryProperty.PROCESS_DEFINITION_ID);
+    orderBy(HistoricTaskInstanceQueryProperty.ACTIVITY_INSTANCE_ID);
     return this;
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/incident/FailedJobIncidentHandler.java
Patch:
@@ -28,9 +28,9 @@
  * via {@link org.camunda.bpm.engine.ProcessEngineConfiguration#setCreateIncidentOnFailedJobEnabled(boolean)}.
  *
  * @see IncidentHandler
- * 
+ *
  * @author nico.rehwaldt
- * @author roman.smirnow
+ * @author roman.smirnov
  */
 public class FailedJobIncidentHandler implements IncidentHandler {
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SubmitTaskFormCmd.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.Map;
 
 import org.camunda.bpm.engine.ProcessEngineException;
+import org.camunda.bpm.engine.history.UserOperationLogEntry;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.form.handler.TaskFormHandler;
@@ -84,8 +85,10 @@ public Object execute(CommandContext commandContext) {
     // complete or resolve the task
     if(DelegationState.PENDING.equals(task.getDelegationState())) {
       task.resolve();
+      task.createHistoricTaskDetails(UserOperationLogEntry.OPERATION_TYPE_RESOLVE);
     } else {
       task.complete();
+      task.createHistoricTaskDetails(UserOperationLogEntry.OPERATION_TYPE_COMPLETE);
     }
 
     return null;

File: engine/src/main/java/org/camunda/bpm/container/impl/jmx/deployment/AbstractParseBpmPlatformXmlStep.java
Patch:
@@ -145,7 +145,7 @@ protected URL checkValidFileLocation(String url) throws MalformedURLException {
   }
 
   protected URL lookupBpmPlatformXmlLocationFromJndi() {
-    String jndi = "java:/comp/env/" + BPM_PLATFORM_XML_LOCATION;
+    String jndi = "java:comp/env/" + BPM_PLATFORM_XML_LOCATION;
 
     try {
       String bpmPlatformXmlLocation = InitialContext.doLookup(jndi);

File: engine/src/test/java/org/camunda/bpm/container/impl/jmx/deployment/BpmPlatformXmlLocationTest.java
Patch:
@@ -101,7 +101,7 @@ public void checkValidBpmPlatformXmlResourceLocation() throws NamingException, M
   @Test
   public void getBpmPlatformXmlLocationFromJndi() throws NamingException, MalformedURLException {
     Context context = new InitialContext();
-    context.bind("java:/comp/env/" + BPM_PLATFORM_XML_LOCATION, BPM_PLATFORM_XML_FILE_ABSOLUTE_LOCATION);
+    context.bind("java:comp/env/" + BPM_PLATFORM_XML_LOCATION, BPM_PLATFORM_XML_FILE_ABSOLUTE_LOCATION);
 
     URL url = new TomcatParseBpmPlatformXmlStep().lookupBpmPlatformXmlLocationFromJndi();
 

File: engine-cdi/src/main/java/org/camunda/bpm/engine/cdi/BusinessProcess.java
Patch:
@@ -378,7 +378,7 @@ public void saveTask() {
   public void stopTask() {
     assertCommandContextNotActive();
     assertTaskAssociated();
-    associationManager.setTask(null);
+    associationManager.disAssociate();
   }
 
   /**

File: engine/src/test/java/org/camunda/bpm/engine/test/history/OperationLogTaskProcessTest.java
Patch:
@@ -14,7 +14,6 @@
 
 import org.camunda.bpm.engine.history.UserOperationLogEntry;
 import org.camunda.bpm.engine.history.UserOperationLogQuery;
-import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.task.DelegationState;
@@ -146,7 +145,6 @@ public void testResolveTask() {
   }
 
   private void startTestProcess() {
-    processEngineConfiguration.setHistoryLevel(ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL);
     process = runtimeService.startProcessInstanceByKey("oneTaskProcess");
     task = taskService.createTaskQuery().singleResult();
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -108,7 +108,7 @@ public class DbSqlSessionFactory implements SessionFactory {
 
     constants = new HashMap<String, String>();
     constants.put("constant.event", "'event'");
-    constants.put("constant.op_message", "NEW_VALUE_ || '_|_' || PROPERTY_");
+    constants.put("constant.op_message", "CONCAT(NEW_VALUE_, '_|_', PROPERTY_)");
     dbSpecificConstants.put(MYSQL, constants);
 
     //postgres specific

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/AtomicOperationActivityInstanceEnd.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.logging.Logger;
 
 import org.camunda.bpm.engine.impl.pvm.delegate.ActivityExecution;
+import org.camunda.bpm.engine.impl.pvm.delegate.CompositeActivityBehavior;
 import org.camunda.bpm.engine.impl.pvm.process.ActivityImpl;
 
 
@@ -35,7 +36,7 @@ protected InterpretableExecution eventNotificationsStarted(InterpretableExecutio
     // execution before calling END listeners.
     ActivityExecution parent = execution.getParent();
     ActivityImpl activity = (ActivityImpl)execution.getActivity();
-    if(parent != null && execution.isScope() && activity != null && activity.isScope()) {
+    if(parent != null && execution.isScope() && activity != null && activity.isScope() && (activity.getActivityBehavior() instanceof CompositeActivityBehavior)) {
 
       if(log.isLoggable(Level.FINE)) {
         log.fine("[LEAVE] "+ execution + ": "+execution.getActivityInstanceId() );

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/ExecutionImpl.java
Patch:
@@ -483,7 +483,8 @@ public void leaveActivityInstance() {
 
   public String getParentActivityInstanceId() {
     if(isProcessInstance()) {
-      return String.valueOf(System.identityHashCode(getProcessInstance()));
+      return getId();
+
     } else {
       ExecutionImpl parent = getParent();
       ActivityImpl activity = getActivity();
@@ -889,7 +890,7 @@ public void inactivate() {
   // allow for subclasses to expose a real id /////////////////////////////////
 
   public String getId() {
-    return null;
+    return String.valueOf(System.identityHashCode(this));
   }
 
   // getters and setters //////////////////////////////////////////////////////

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/ModelInstanceImpl.java
Patch:
@@ -83,7 +83,7 @@ public Model getModel() {
     return model;
   }
 
-  public ModelElementType registerGenericType(String localName, String namespaceUri) {
+  public ModelElementType registerGenericType(String namespaceUri, String localName) {
     ModelElementType elementType = modelBuilder.defineGenericType(localName, namespaceUri);
     model = (ModelImpl) modelBuilder.build();
     return elementType;

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/util/ModelUtil.java
Patch:
@@ -47,7 +47,7 @@ public static ModelElementInstance getModelElement(DomElement domElement, ModelI
 
       ModelElementTypeImpl modelType = (ModelElementTypeImpl) modelInstance.getModel().getTypeForName(localName, namespaceUri);
       if(modelType == null) {
-        modelType = (ModelElementTypeImpl) modelInstance.registerGenericType(localName, namespaceUri);
+        modelType = (ModelElementTypeImpl) modelInstance.registerGenericType(namespaceUri, localName);
       }
       modelElement = modelType.newInstance(modelInstance, domElement);
       domElement.setModelElementInstance(modelElement);

File: model-api/xml-model/src/test/java/org/camunda/bpm/model/xml/testmodel/instance/UnknownAnimalTest.java
Patch:
@@ -75,7 +75,7 @@ public void testGetUnknownAnimalById() {
   @Test
   public void testGetUnknownAnimalByType() {
     ModelInstanceImpl modelInstanceImpl = (ModelInstanceImpl) modelInstance;
-    ModelElementType unknownAnimalType = modelInstanceImpl.registerGenericType("unknownAnimal", MODEL_NAMESPACE);
+    ModelElementType unknownAnimalType = modelInstanceImpl.registerGenericType(MODEL_NAMESPACE, "unknownAnimal");
     List<ModelElementInstance> unknownAnimals = new ArrayList<ModelElementInstance>(modelInstance.getModelElementsByType(unknownAnimalType));
     assertThat(unknownAnimals).hasSize(2);
 
@@ -93,7 +93,7 @@ public void testGetUnknownAnimalByType() {
   @Test
   public void testAddUnknownAnimal() {
     ModelInstanceImpl modelInstanceImpl = (ModelInstanceImpl) modelInstance;
-    ModelElementType unknownAnimalType = modelInstanceImpl.registerGenericType("unknownAnimal", MODEL_NAMESPACE);
+    ModelElementType unknownAnimalType = modelInstanceImpl.registerGenericType(MODEL_NAMESPACE, "unknownAnimal");
     ModelElementType animalsType = modelInstance.getModel().getType(Animals.class);
     ModelElementType animalType = modelInstance.getModel().getType(Animal.class);
 

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/type/ModelElementTypeBuilder.java
Patch:
@@ -37,6 +37,8 @@ public interface ModelElementTypeBuilder {
 
   AttributeBuilder<Integer> integerAttribute(String attributeName);
 
+  AttributeBuilder<Double> doubleAttribute(String attributeName);
+
   <V extends Enum<V>> AttributeBuilder<V> enumAttribute(String attributeName, Class<V> enumType);
 
   SequenceBuilder sequence();

File: model-api/xml-model/src/test/java/org/camunda/bpm/model/xml/testmodel/TestModelConstants.java
Patch:
@@ -43,6 +43,7 @@ public abstract class TestModelConstants {
   public static final String ATTRIBUTE_NAME_GENDER = "gender";
   public static final String ATTRIBUTE_NAME_AGE = "age";
   public static final String ATTRIBUTE_NAME_ANIMAL_REF = "animalRef";
+  public static final String ATTRIBUTE_NAME_WINGSPAN = "wingspan";
 
   private TestModelConstants() {
 

File: model-api/xml-model/src/test/java/org/camunda/bpm/model/xml/type/ModelElementTypeTest.java
Patch:
@@ -76,7 +76,7 @@ public void testInstanceType() {
   public void testAttributes() {
     assertThat(animalsType).hasNoAttributes();
     assertThat(animalType).hasAttributes("id", "name", "father", "mother", "isEndangered", "gender", "age");
-    assertThat(flyingAnimalType).hasNoAttributes();
+    assertThat(flyingAnimalType).hasAttributes("wingspan");
     assertThat(birdType).hasNoAttributes();
   }
 

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/util/XmlQName.java
Patch:
@@ -26,7 +26,7 @@
  */
 public class XmlQName {
 
-  private static final Map<String, String> KNOWN_PREFIXES;
+  public static final Map<String, String> KNOWN_PREFIXES;
   static
   {
     KNOWN_PREFIXES = new HashMap<String, String>();

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/ModelImpl.java
Patch:
@@ -15,7 +15,6 @@
 import org.camunda.bpm.model.xml.Model;
 import org.camunda.bpm.model.xml.impl.util.ModelUtil;
 import org.camunda.bpm.model.xml.impl.util.QName;
-import org.camunda.bpm.model.xml.impl.util.XmlQName;
 import org.camunda.bpm.model.xml.instance.ModelElementInstance;
 import org.camunda.bpm.model.xml.type.ModelElementType;
 

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/instance/ModelElementInstanceImpl.java
Patch:
@@ -149,7 +149,7 @@ public String getRawTextContent() {
     return domElement.getTextContent();
   }
 
-  public ModelElementInstance getUniqueChildElementByNameNs(String elementName, String namespaceUri) {
+  public ModelElementInstance getUniqueChildElementByNameNs(String namespaceUri, String elementName) {
     List<DomElement> childElements = domElement.getChildElementsByNameNs(namespaceUri, elementName);
 
     if(!childElements.isEmpty()) {
@@ -326,7 +326,7 @@ public boolean equals(Object obj) {
       return false;
     } else {
       ModelElementInstanceImpl other = (ModelElementInstanceImpl) obj;
-      return other.domElement == domElement;
+      return other.domElement.equals(domElement);
     }
   }
 

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/type/ModelElementTypeImpl.java
Patch:
@@ -73,7 +73,8 @@ public ModelElementInstance newInstance(ModelInstance modelInstance) {
   }
 
   public ModelElementInstance newInstance(ModelInstanceImpl modelInstance, DomElement domElement) {
-    return createModelElementInstance(new ModelTypeInstanceContext(domElement, modelInstance, this));
+    ModelTypeInstanceContext modelTypeInstanceContext = new ModelTypeInstanceContext(domElement, modelInstance, this);
+    return createModelElementInstance(modelTypeInstanceContext);
   }
 
   public void registerAttribute(Attribute<?> attribute) {

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/type/reference/QNameAttributeReferenceImpl.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.camunda.bpm.model.xml.impl.type.reference;
 
-import org.camunda.bpm.model.xml.impl.instance.ModelElementInstanceImpl;
 import org.camunda.bpm.model.xml.impl.type.attribute.AttributeImpl;
 import org.camunda.bpm.model.xml.impl.util.QName;
 import org.camunda.bpm.model.xml.instance.ModelElementInstance;

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/type/reference/QNameElementReferenceCollectionImpl.java
Patch:
@@ -13,7 +13,6 @@
 
 package org.camunda.bpm.model.xml.impl.type.reference;
 
-import org.camunda.bpm.model.xml.impl.instance.ModelElementInstanceImpl;
 import org.camunda.bpm.model.xml.impl.util.QName;
 import org.camunda.bpm.model.xml.instance.ModelElementInstance;
 import org.camunda.bpm.model.xml.type.child.ChildElementCollection;

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/type/reference/QNameElementReferenceImpl.java
Patch:
@@ -13,7 +13,6 @@
 
 package org.camunda.bpm.model.xml.impl.type.reference;
 
-import org.camunda.bpm.model.xml.impl.instance.ModelElementInstanceImpl;
 import org.camunda.bpm.model.xml.impl.util.QName;
 import org.camunda.bpm.model.xml.instance.ModelElementInstance;
 import org.camunda.bpm.model.xml.type.child.ChildElement;

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/util/IoUtil.java
Patch:
@@ -119,9 +119,8 @@ public static void writeDocumentToOutputStream(DomDocument document, OutputStrea
    */
   public static void transformDocumentToXml(DomDocument document, StreamResult result) {
     TransformerFactory transformerFactory = TransformerFactory.newInstance();
-    Transformer transformer = null;
     try {
-      transformer = transformerFactory.newTransformer();
+      Transformer transformer = transformerFactory.newTransformer();
       transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
       transformer.setOutputProperty(OutputKeys.INDENT, "yes");
       transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/util/QName.java
Patch:
@@ -51,7 +51,7 @@ public static QName parseQName(String identifier) {
       localName = split[0];
     }
 
-    return new QName(localName, qualifier);
+    return new QName(qualifier, localName);
   }
 
   @Override

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/test/assertions/ModelAssertions.java
Patch:
@@ -39,7 +39,7 @@ public static ChildElementAssert assertThat(ChildElementCollection<?> actual) {
 
   public static AttributeReferenceAssert assertThat(AttributeReference<?> actual) {
     return new AttributeReferenceAssert(actual);
-  };
+  }
 
   public static ElementReferenceCollectionAssert assertThat(ElementReferenceCollection<?,?> actual) {
     return new ElementReferenceCollectionAssert(actual);

File: model-api/xml-model/src/test/java/org/camunda/bpm/model/xml/testmodel/instance/AnimalTest.java
Patch:
@@ -17,19 +17,18 @@
 import org.camunda.bpm.model.xml.ModelValidationException;
 import org.camunda.bpm.model.xml.impl.parser.AbstractModelParser;
 import org.camunda.bpm.model.xml.testmodel.Gender;
-import org.camunda.bpm.model.xml.testmodel.TestModelConstants;
 import org.camunda.bpm.model.xml.testmodel.TestModelParser;
 import org.camunda.bpm.model.xml.testmodel.TestModelTest;
 import org.junit.Before;
 import org.junit.Test;
 
-import javax.xml.XMLConstants;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.camunda.bpm.model.xml.testmodel.TestModelConstants.MODEL_NAMESPACE;
 import static org.junit.Assert.fail;
 import static org.junit.runners.Parameterized.Parameters;
 
@@ -71,7 +70,7 @@ public static Object[] createModel() {
     modelInstance.setDocumentElement(animals);
 
     // add a tns namespace prefix for QName testing
-    animals.setAttributeValueNs(XMLConstants.XMLNS_ATTRIBUTE_NS_URI, "xmlns:tns", TestModelConstants.MODEL_NAMESPACE);
+    animals.getDomElement().registerNamespace("tns", MODEL_NAMESPACE);
 
     Animal tweety = createBird(modelInstance, "tweety", Gender.Female);
     Animal hedwig = createBird(modelInstance, "hedwig", Gender.Male);

File: model-api/xml-model/src/test/java/org/camunda/bpm/model/xml/testmodel/instance/BirdTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import javax.xml.XMLConstants;
 import java.util.Arrays;
 import java.util.Collection;
 

File: model-api/xml-model/src/test/java/org/camunda/bpm/model/xml/testmodel/instance/FlyingAnimalTest.java
Patch:
@@ -16,19 +16,18 @@
 import org.camunda.bpm.model.xml.ModelInstance;
 import org.camunda.bpm.model.xml.impl.parser.AbstractModelParser;
 import org.camunda.bpm.model.xml.testmodel.Gender;
-import org.camunda.bpm.model.xml.testmodel.TestModelConstants;
 import org.camunda.bpm.model.xml.testmodel.TestModelParser;
 import org.camunda.bpm.model.xml.testmodel.TestModelTest;
 import org.junit.Before;
 import org.junit.Test;
 
-import javax.xml.XMLConstants;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.camunda.bpm.model.xml.testmodel.TestModelConstants.MODEL_NAMESPACE;
 import static org.junit.runners.Parameterized.Parameters;
 
 /**
@@ -62,7 +61,7 @@ public static Object[] createModel() {
     modelInstance.setDocumentElement(animals);
 
     // add a tns namespace prefix for QName testing
-    animals.setAttributeValueNs(XMLConstants.XMLNS_ATTRIBUTE_NS_URI, "xmlns:tns", TestModelConstants.MODEL_NAMESPACE);
+    animals.getDomElement().registerNamespace("tns", MODEL_NAMESPACE);
 
     FlyingAnimal tweety = createBird(modelInstance, "tweety", Gender.Female);
     FlyingAnimal hedwig = createBird(modelInstance, "hedwig", Gender.Male);

File: engine-cdi/src/main/java/org/camunda/bpm/engine/cdi/impl/context/DefaultContextAssociationManager.java
Patch:
@@ -124,9 +124,9 @@ public void setVariableLocal(String variableName, Object value) {
       cachedVariablesLocal.put(variableName, value);
     }
 
-	  public Map<String, Object> getCachedVariablesLocal() {
-	    return cachedVariablesLocal;
-	  }
+    public Map<String, Object> getCachedVariablesLocal() {
+      return cachedVariablesLocal;
+    }
 
     public void flushVariableCache() {
       if(task != null) {

File: webapps/test-utility/src/main/java/org/camunda/bpm/webapp/test/util/DbSchemaPrefixTestHelper.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.cockpit.plugin.base.util;
+package org.camunda.bpm.webapp.test.util;
 
 import java.sql.Connection;
 

File: webapps/webapp/src/test/java/org/camunda/bpm/cockpit/plugin/base/ProcessInstanceResourceTest.java
Patch:
@@ -21,7 +21,6 @@
 import org.camunda.bpm.cockpit.impl.plugin.base.dto.ProcessInstanceDto;
 import org.camunda.bpm.cockpit.impl.plugin.base.dto.query.ProcessInstanceQueryDto;
 import org.camunda.bpm.cockpit.impl.plugin.base.sub.resources.ProcessInstanceResource;
-import org.camunda.bpm.cockpit.plugin.base.util.JobExecutorHelper;
 import org.camunda.bpm.cockpit.plugin.test.AbstractCockpitPluginTest;
 import org.camunda.bpm.engine.ManagementService;
 import org.camunda.bpm.engine.ProcessEngine;
@@ -32,6 +31,7 @@
 import org.camunda.bpm.engine.runtime.Job;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.test.Deployment;
+import org.camunda.bpm.webapp.test.util.JobExecutorHelper;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -216,7 +216,7 @@ public void testGetCalledProcessInstancesByParentProcessInstanceIdAndActivityIns
     helper.waitForJobExecutorToProcessAllJobs(15000);
 
     ProcessInstanceQueryDto queryParameter1 = new ProcessInstanceQueryDto();
-    
+
     String[] activityInstanceIds1 = {firstActivityInstanceId};
     queryParameter1.setActivityInstanceIdIn(activityInstanceIds1);
 

File: webapps/camunda-webapp/test-utility/src/main/java/org/camunda/bpm/webapp/test/util/DbSchemaPrefixTestHelper.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.cockpit.plugin.base.util;
+package org.camunda.bpm.webapp.test.util;
 
 import java.sql.Connection;
 

File: webapps/camunda-webapp/webapp/src/test/java/org/camunda/bpm/cockpit/plugin/base/ProcessInstanceResourceTest.java
Patch:
@@ -21,7 +21,6 @@
 import org.camunda.bpm.cockpit.impl.plugin.base.dto.ProcessInstanceDto;
 import org.camunda.bpm.cockpit.impl.plugin.base.dto.query.ProcessInstanceQueryDto;
 import org.camunda.bpm.cockpit.impl.plugin.base.sub.resources.ProcessInstanceResource;
-import org.camunda.bpm.cockpit.plugin.base.util.JobExecutorHelper;
 import org.camunda.bpm.cockpit.plugin.test.AbstractCockpitPluginTest;
 import org.camunda.bpm.engine.ManagementService;
 import org.camunda.bpm.engine.ProcessEngine;
@@ -32,6 +31,7 @@
 import org.camunda.bpm.engine.runtime.Job;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.engine.test.Deployment;
+import org.camunda.bpm.webapp.test.util.JobExecutorHelper;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -216,7 +216,7 @@ public void testGetCalledProcessInstancesByParentProcessInstanceIdAndActivityIns
     helper.waitForJobExecutorToProcessAllJobs(15000);
 
     ProcessInstanceQueryDto queryParameter1 = new ProcessInstanceQueryDto();
-    
+
     String[] activityInstanceIds1 = {firstActivityInstanceId};
     queryParameter1.setActivityInstanceIdIn(activityInstanceIds1);
 

File: engine/src/main/java/org/camunda/bpm/container/impl/jmx/deployment/scanning/VfsProcessApplicationScanner.java
Patch:
@@ -104,7 +104,7 @@ protected void scanRoot(VirtualFile processArchiveRoot, Map<String, byte[]> reso
     try {
       List<VirtualFile> processes = processArchiveRoot.getChildrenRecursively(new VirtualFileFilter() {
         public boolean accepts(VirtualFile file) {
-          return ProcessApplicationScanningUtil.isDeployable(file.getName());
+          return file.isFile() && ProcessApplicationScanningUtil.isDeployable(file.getName());
         }
       });
       for (final VirtualFile process : processes) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -2247,6 +2247,8 @@ public void parseBoundaryEvents(Element parentElement, ScopeImpl scopeElement) {
       // scope of the boundary event is the parent of the activity to which it is attached.
       nestedActivity.setScope(parentActivity.getParentScope());
       nestedActivity.setActivityBehavior(behavior);
+
+      parseExecutionListenersOnScope(boundaryEventElement, nestedActivity);
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -137,6 +137,7 @@ public void delete() {
 
   public Object getPersistentState() {
     Map<String, Object> persistentState = new HashMap<String, Object>();
+    persistentState.put("executionId", executionId);
     persistentState.put("lockOwner", lockOwner);
     persistentState.put("lockExpirationTime", lockExpirationTime);
     persistentState.put("retries", retries);

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/instance/ModelElementInstanceImpl.java
Patch:
@@ -258,7 +258,7 @@ public Collection<ModelElementInstance> getChildElementsByType(ModelElementType
    * @return the element to insert after or null
    */
   private ModelElementInstance findElementToInsertAfter(ModelElementInstance elementToInsert) {
-    List<ModelElementType> childElementTypes = elementType.getChildElementTypes();
+    List<ModelElementType> childElementTypes = elementType.getAllChildElementTypes();
     List<Element> childDomElements = DomUtil.filterNodeList(domElement.getChildNodes(), new DomUtil.ElementNodeListFilter());
     Collection<ModelElementInstance> childElements = ModelUtil.getModelElementCollection(childDomElements, modelInstance);
 
@@ -315,7 +315,7 @@ private void unlinkAllReferences() {
    * Removes every reference to children of this.
    */
   private void unlinkAllChildReferences() {
-    List<ModelElementType> childElementTypes = elementType.getChildElementTypes();
+    List<ModelElementType> childElementTypes = elementType.getAllChildElementTypes();
     for (ModelElementType type : childElementTypes) {
       Collection<ModelElementInstance> childElementsForType = getChildElementsByType(type);
       for (ModelElementInstance childElement : childElementsForType) {

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/type/child/ChildElementCollectionBuilderImpl.java
Patch:
@@ -100,6 +100,7 @@ public void performModelBuild(Model model) {
       throw new ModelException(parentElementType +" declares undefined child element of type "+childElementType+".");
     }
     parentElementType.registerChildElementType(elementType);
+    parentElementType.registerChildElementCollection(collection);
     for (ModelBuildOperation modelBuildOperation : modelBuildOperations) {
       modelBuildOperation.performModelBuild(model);
     }

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/type/child/SequenceBuilderImpl.java
Patch:
@@ -12,9 +12,6 @@
  */
 package org.camunda.bpm.model.xml.impl.type.child;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import org.camunda.bpm.model.xml.Model;
 import org.camunda.bpm.model.xml.impl.ModelBuildOperation;
 import org.camunda.bpm.model.xml.impl.type.ModelElementTypeImpl;
@@ -23,6 +20,9 @@
 import org.camunda.bpm.model.xml.type.child.ChildElementCollectionBuilder;
 import org.camunda.bpm.model.xml.type.child.SequenceBuilder;
 
+import java.util.ArrayList;
+import java.util.List;
+
 /**
  * @author Daniel Meyer
  *

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/type/ModelElementType.java
Patch:
@@ -52,4 +52,6 @@ public interface ModelElementType {
 
   List<ModelElementType> getChildElementTypes();
 
+  List<ModelElementType> getAllChildElementTypes();
+
 }

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/util/IoUtil.java
Patch:
@@ -98,11 +98,10 @@ public static String convertXmlDocumentToString(Document document) {
     StringWriter stringWriter = new StringWriter();
     try {
       TransformerFactory transformerFactory = TransformerFactory.newInstance();
-      transformerFactory.setAttribute("indent-number", new Integer(2));
+      transformerFactory.setAttribute("indent-number", 2);
       Transformer transformer = transformerFactory.newTransformer();
       transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
       transformer.setOutputProperty(OutputKeys.INDENT, "yes");
-      //transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
       transformer.transform(new DOMSource(document), new StreamResult(stringWriter));
     } catch (TransformerConfigurationException e) {
       e.printStackTrace();

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/ModelBuilder.java
Patch:
@@ -14,6 +14,7 @@
 
 import org.camunda.bpm.model.xml.impl.ModelBuilderImpl;
 import org.camunda.bpm.model.xml.instance.ModelElementInstance;
+import org.camunda.bpm.model.xml.type.ModelElementType;
 import org.camunda.bpm.model.xml.type.ModelElementTypeBuilder;
 
 /**
@@ -26,6 +27,8 @@ public abstract class ModelBuilder {
 
   public abstract ModelElementTypeBuilder defineType(Class<? extends ModelElementInstance> modelInstanceType, String typeName);
 
+  public abstract ModelElementType defineGenericType(String typeName, String typeNamespaceUri);
+
   public abstract Model build();
 
   public static ModelBuilder createInstance(String modelName) {

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/type/reference/ElementReferenceImpl.java
Patch:
@@ -17,11 +17,9 @@
 import org.camunda.bpm.model.xml.ModelReferenceException;
 import org.camunda.bpm.model.xml.impl.ModelInstanceImpl;
 import org.camunda.bpm.model.xml.impl.instance.ModelElementInstanceImpl;
-import org.camunda.bpm.model.xml.impl.util.DomUtil;
 import org.camunda.bpm.model.xml.instance.ModelElementInstance;
 import org.camunda.bpm.model.xml.type.child.ChildElement;
 import org.camunda.bpm.model.xml.type.reference.ElementReference;
-import org.w3c.dom.Element;
 
 /**
  * @author Sebastian Menski

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/util/ModelUtil.java
Patch:
@@ -51,7 +51,7 @@ public static ModelElementInstance getModelElement(Element domElement, ModelInst
 
       ModelElementTypeImpl modelType = (ModelElementTypeImpl) modelInstance.getModel().getTypeForName(localName, namespaceUri);
       if(modelType == null) {
-        throw new ModelException("Cannot create model type instance for type "+getQName(localName, namespaceUri)+" no instance type registered.");
+        modelType = (ModelElementTypeImpl) modelInstance.registerGenericType(localName, namespaceUri);
       }
       modelElement = modelType.newInstance(modelInstance, domElement);
       domElement.setUserData(MODEL_ELEMENT_KEY, modelElement, null);

File: model-api/xml-model/src/test/java/org/camunda/bpm/model/xml/testmodel/TestModelParser.java
Patch:
@@ -54,7 +54,7 @@ protected void configureFactory(DocumentBuilderFactory dbf) {
 
   @Override
   protected ModelInstance createModelInstance(Document document) {
-    return new ModelInstanceImpl((ModelImpl) TestModel.getTestModel(), document);
+    return new ModelInstanceImpl((ModelImpl) TestModel.getTestModel(), TestModel.getModelBuilder(), document);
   }
 
 }

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/ModelInstanceImpl.java
Patch:
@@ -97,9 +97,7 @@ public ModelElementInstance getModelElementById(String id) {
   }
 
   public Collection<ModelElementInstance> getModelElementsByType(ModelElementType type) {
-    HashSet<ModelElementType> extendingTypes = new HashSet<ModelElementType>();
-    extendingTypes.add(type);
-    ((ModelElementTypeImpl)type).resolveExtendingTypes(extendingTypes);
+    Collection<ModelElementType> extendingTypes = type.getAllExtendingTypes();
 
     List<ModelElementInstance> instances = new ArrayList<ModelElementInstance>();
     for (ModelElementType modelElementType : extendingTypes) {

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/type/ModelElementType.java
Patch:
@@ -42,6 +42,8 @@ public interface ModelElementType {
 
   Collection<ModelElementType> getExtendingTypes();
 
+  Collection<ModelElementType> getAllExtendingTypes();
+
   Attribute<?> getAttribute(String attributeName);
 
   Model getModel();

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/type/reference/QNameElementReferenceCollectionBuilderImpl.java
Patch:
@@ -23,7 +23,7 @@
  */
 public class QNameElementReferenceCollectionBuilderImpl<Target extends ModelElementInstance, Source extends ModelElementInstance> extends ElementReferenceCollectionBuilderImpl<Target, Source> {
 
-  public QNameElementReferenceCollectionBuilderImpl(Class<Source> childElementType, Class<Target> referenceTargetClass, ChildElementCollectionImpl<Source> collection, ModelElementTypeImpl containingType) {
+  public QNameElementReferenceCollectionBuilderImpl(Class<Source> childElementType, Class<Target> referenceTargetClass, ChildElementCollectionImpl<Source> collection) {
     super(childElementType, referenceTargetClass, collection);
     this.elementReferenceCollectionImpl = new QNameElementReferenceCollectionImpl<Target, Source>(collection);
   }

File: model-api/xml-model/src/test/java/org/camunda/bpm/model/xml/testmodel/instance/Animal.java
Patch:
@@ -81,7 +81,7 @@ public static void registerType(ModelBuilder modelBuilder) {
     relationshipDefinitionsColl = sequence.elementCollection(RelationshipDefinition.class)
       .build();
 
-    relationshipDefinitionRefsColl = sequence.elementCollection(RelationshipDefinitionRef.class, ELEMENT_NAME_RELATIONSHIP_DEFINITION_REF)
+    relationshipDefinitionRefsColl = sequence.elementCollection(RelationshipDefinitionRef.class)
       .qNameElementReferenceCollection(RelationshipDefinition.class)
       .build();
 

File: model-api/xml-model/src/test/java/org/camunda/bpm/model/xml/testmodel/instance/Bird.java
Patch:
@@ -45,12 +45,12 @@ public Bird newInstance(ModelTypeInstanceContext instanceContext) {
 
     SequenceBuilder sequence = typeBuilder.sequence();
 
-    eggColl = sequence.elementCollection(Egg.class, ELEMENT_NAME_EGG)
+    eggColl = sequence.elementCollection(Egg.class)
       .minOccurs(0)
       .maxOccurs(6)
       .build();
 
-    spouseRefsColl = sequence.element(SpouseRef.class, ELEMENT_NAME_SPOUSE_REF)
+    spouseRefsColl = sequence.element(SpouseRef.class)
       .qNameElementReference(Bird.class)
       .build();
 

File: model-api/xml-model/src/test/java/org/camunda/bpm/model/xml/testmodel/instance/FlyingAnimal.java
Patch:
@@ -40,7 +40,7 @@ public static void registerType(ModelBuilder modelBuilder) {
 
     SequenceBuilder sequence = typeBuilder.sequence();
 
-    flightPartnerRefsColl = sequence.elementCollection(FlightPartnerRef.class, ELEMENT_NAME_FLIGHT_PARTNER_REF)
+    flightPartnerRefsColl = sequence.elementCollection(FlightPartnerRef.class)
       .idElementReferenceCollection(FlyingAnimal.class)
       .build();
 

File: model-api/xml-model/src/test/java/org/camunda/bpm/model/xml/testmodel/instance/FlyingAnimal.java
Patch:
@@ -28,7 +28,8 @@
  */
 public abstract class FlyingAnimal extends Animal {
 
-  private static ElementReferenceCollection<FlyingAnimal, FlightPartnerRef> flightPartnerRefsColl;
+  // only public for testing (normally private)
+  public static ElementReferenceCollection<FlyingAnimal, FlightPartnerRef> flightPartnerRefsColl;
 
   public static void registerType(ModelBuilder modelBuilder) {
 

File: model-api/xml-model/src/test/java/org/camunda/bpm/model/xml/type/attribute/AttributeTest.java
Patch:
@@ -17,6 +17,7 @@
 import org.camunda.bpm.model.xml.impl.parser.AbstractModelParser;
 import org.camunda.bpm.model.xml.impl.type.attribute.AttributeImpl;
 import org.camunda.bpm.model.xml.testmodel.Gender;
+import org.camunda.bpm.model.xml.testmodel.TestModelConstants;
 import org.camunda.bpm.model.xml.testmodel.TestModelParser;
 import org.camunda.bpm.model.xml.testmodel.TestModelTest;
 import org.camunda.bpm.model.xml.testmodel.instance.Animal;
@@ -30,6 +31,7 @@
 import java.util.Arrays;
 import java.util.Collection;
 
+import static org.camunda.bpm.model.xml.testmodel.TestModelConstants.MODEL_NAMESPACE;
 import static org.fest.assertions.Assertions.assertThat;
 import static org.junit.runners.Parameterized.Parameters;
 
@@ -127,6 +129,7 @@ public void testSetNamespaceUri() {
     String testNamespace = "http://camunda.org/test";
     ((AttributeImpl<String>) idAttribute).setNamespaceUri(testNamespace);
     assertThat(idAttribute.getNamespaceUri()).isEqualTo(testNamespace);
+    ((AttributeImpl<String>) idAttribute).setNamespaceUri(null);
   }
 
   @Test

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/type/ModelElementTypeBuilderImpl.java
Patch:
@@ -95,7 +95,7 @@ public ModelElementType build() {
   }
 
   public ModelElementTypeBuilder abstractType() {
-    modelType.setAbstract();
+    modelType.setAbstract(true);
     return this;
   }
 

File: qa/performance-tests-engine/src/test/java/org/camunda/bpm/qa/performance/engine/bpmn/VariablesPerformanceTest.java
Patch:
@@ -131,7 +131,7 @@ public void noneStartEvent10ByteVars() {
     {"org/camunda/bpm/qa/performance/engine/bpmn/StartEventPerformanceTest.noneStartEvent.bpmn"})
   public void noneStartEventLargeByteVar() {
     HashMap<String, Object> variables = new HashMap<String, Object>();
-    byte[] bytes = new byte[1048576]; // = 1MB
+    byte[] bytes = new byte[5*1024];
     variables.put(VARIABLE1, bytes);
 
     perfomanceTest()

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/ModelBuilderImpl.java
Patch:
@@ -41,6 +41,9 @@ public ModelElementTypeBuilder defineType(Class<? extends ModelElementInstance>
   }
 
   public Model build() {
+    for (ModelElementTypeBuilderImpl typeBuilder : typeBuilders) {
+      typeBuilder.buildTypeHierarchy(model);
+    }
     for (ModelElementTypeBuilderImpl typeBuilder : typeBuilders) {
       typeBuilder.performModelBuild(model);
     }

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/type/ModelElementTypeBuilderImpl.java
Patch:
@@ -105,7 +105,7 @@ public SequenceBuilder sequence() {
     return builder;
   }
 
-  public void performModelBuild(Model model) {
+  public void buildTypeHierarchy(Model model) {
 
     // build type hierarchy
     if(extendedType != null) {
@@ -118,7 +118,9 @@ public void performModelBuild(Model model) {
         extendedModelElementType.registerExtendingType(modelType);
       }
     }
+  }
 
+  public void performModelBuild(Model model) {
     for (ModelBuildOperation operation : modelBuildOperations) {
       operation.performModelBuild(model);
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/parser/HistoryParseListener.java
Patch:
@@ -188,6 +188,7 @@ public void parseIntermediateSignalCatchEventDefinition(Element signalEventDefin
   }
 
   public void parseTransaction(Element transactionElement, ScopeImpl scope, ActivityImpl activity) {
+    addActivityHandlers(activity);
   }
 
   public void parseCompensateEventDefinition(Element compensateEventDefinition, ActivityImpl compensationActivity) {

File: model-api/xml-model/src/test/java/org/camunda/bpm/model/xml/testmodel/instance/Animal.java
Patch:
@@ -63,7 +63,7 @@ public static void registerType(ModelBuilder modelBuilder) {
       .build();
 
     motherRef = typeBuilder.stringAttribute(ATTRIBUTE_NAME_MOTHER)
-      .qNameAttributeReference(Animal.class)
+      .idAttributeReference(Animal.class)
       .build();
 
     isEndangeredAttr = typeBuilder.booleanAttribute(ATTRIBUTE_NAME_IS_ENDANGERED)

File: model-api/xml-model/src/test/java/org/camunda/bpm/model/xml/testmodel/instance/AnimalTest.java
Patch:
@@ -165,8 +165,8 @@ public void testMother() {
     animal.setMother(mother);
     assertThat(animal.getMother()).isEqualTo(mother);
 
-    // set mother by name with namespace
-    animal.setAttributeValue("mother", "tns:" + stepmother.getId(), false);
+    // set mother by name
+    animal.setAttributeValue("mother", stepmother.getId(), false);
     assertThat(animal.getMother()).isEqualTo(stepmother);
 
     // replace mother

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/util/ModelUtil.java
Patch:
@@ -149,7 +149,7 @@ public static String valueAsString(short shortValue) {
    * @return the collection of model element instances of the view
    */
   @SuppressWarnings("unchecked")
-  public static <T> Collection<T> getModelElementCollection(Collection<Element> view, ModelInstanceImpl model) {
+  public static <T extends ModelElementInstance> Collection<T> getModelElementCollection(Collection<Element> view, ModelInstanceImpl model) {
     List<ModelElementInstance> resultList = new ArrayList<ModelElementInstance>();
     for (Element element : view) {
       resultList.add(getModelElement(element, model));

File: model-api/xml-model/src/main/java/org/camunda/bpm/model/xml/impl/type/attribute/AttributeImpl.java
Patch:
@@ -169,10 +169,10 @@ public void removeAttribute(ModelElementInstance modelElement) {
     }
   }
 
-  public void unlinkReference(ModelElementInstance modelElement) {
+  public void unlinkReference(ModelElementInstance modelElement, Object referenceIdentifier) {
     if (!incomingReferences.isEmpty()) {
       for (Reference<?> incomingReference : incomingReferences) {
-        ((ReferenceImpl<?>) incomingReference).referencedElementRemoved(modelElement);
+        ((ReferenceImpl<?>) incomingReference).referencedElementRemoved(modelElement, referenceIdentifier);
       }
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/digest/_apacheCommonsCodec/package-info.java
Patch:
@@ -11,14 +11,14 @@
  * limitations under the License.
  */
 /**
- * <p>The following classes are copied from apache commons codec:</p>
+ * The following classes are copied from Apache Commons Codec:
  * 
  * <ul>
  *  <li> {@link org.camunda.bpm.engine.impl.digest._apacheCommonsCodec.Base64} </li>
  *  <li> {@link org.camunda.bpm.engine.impl.digest._apacheCommonsCodec.StringUtils} </li>
  * </ul>
  * 
- * The classes are slightly modifyed to minimize imports.
+ * The classes are slightly modified to minimize imports.
  * 
  * Used apache commons codec version: 1.4
  * 

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -80,6 +80,7 @@ public abstract class MockProvider {
   public static final String EXAMPLE_TASK_ASSIGNEE_NAME = "anAssignee";
   public static final String EXAMPLE_TASK_CREATE_TIME = "2013-01-23T13:42:42";
   public static final String EXAMPLE_TASK_DUE_DATE = "2013-01-23T13:42:43";
+  public static final String EXAMPLE_FOLLOW_UP_DATE = "2013-01-23T13:42:44";
   public static final DelegationState EXAMPLE_TASK_DELEGATION_STATE = DelegationState.RESOLVED;
   public static final String EXAMPLE_TASK_DESCRIPTION = "aDescription";
   public static final String EXAMPLE_TASK_EXECUTION_ID = "anExecution";
@@ -254,6 +255,7 @@ public abstract class MockProvider {
   public static Task createMockTask() {
     Task mockTask = new MockTaskBuilder().id(EXAMPLE_TASK_ID).name(EXAMPLE_TASK_NAME).assignee(EXAMPLE_TASK_ASSIGNEE_NAME)
         .createTime(DateTime.parse(EXAMPLE_TASK_CREATE_TIME).toDate()).dueDate(DateTime.parse(EXAMPLE_TASK_DUE_DATE).toDate())
+        .followUpDate(DateTime.parse(EXAMPLE_FOLLOW_UP_DATE).toDate())
         .delegationState(EXAMPLE_TASK_DELEGATION_STATE).description(EXAMPLE_TASK_DESCRIPTION).executionId(EXAMPLE_TASK_EXECUTION_ID).owner(EXAMPLE_TASK_OWNER)
         .parentTaskId(EXAMPLE_TASK_PARENT_TASK_ID).priority(EXAMPLE_TASK_PRIORITY).processDefinitionId(EXAMPLE_PROCESS_DEFINITION_ID)
         .processInstanceId(EXAMPLE_PROCESS_INSTANCE_ID).taskDefinitionKey(EXAMPLE_TASK_DEFINITION_KEY).build();

File: engine/src/main/java/org/camunda/bpm/engine/history/HistoricTaskInstance.java
Patch:
@@ -75,4 +75,7 @@ public interface HistoricTaskInstance {
   /** The parent task of this task, in case this task was a subtask */
   String getParentTaskId();
 
+  /** Task follow-up date */
+  Date getFollowUpDate();
+
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/HistoricTaskInstanceQueryProperty.java
Patch:
@@ -43,6 +43,7 @@ public class HistoricTaskInstanceQueryProperty implements QueryProperty {
   public static final HistoricTaskInstanceQueryProperty DURATION = new HistoricTaskInstanceQueryProperty("DURATION_");
   public static final HistoricTaskInstanceQueryProperty TASK_PRIORITY = new HistoricTaskInstanceQueryProperty("PRIORITY_");
   public static final HistoricTaskInstanceQueryProperty TASK_DUE_DATE = new HistoricTaskInstanceQueryProperty("DUE_DATE_");
+  public static final HistoricTaskInstanceQueryProperty TASK_FOLLOW_UP_DATE = new HistoricTaskInstanceQueryProperty("FOLLOW_UP_DATE_");
 
   private String name;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/TaskQueryProperty.java
Patch:
@@ -54,6 +54,7 @@ public class TaskQueryProperty implements QueryProperty {
   public static final TaskQueryProperty PROCESS_INSTANCE_ID = new TaskQueryProperty("RES.PROC_INST_ID_");
   public static final TaskQueryProperty EXECUTION_ID = new TaskQueryProperty("RES.EXECUTION_ID_");
   public static final TaskQueryProperty DUE_DATE = new TaskQueryProperty("RES.DUE_DATE_");
+  public static final TaskQueryProperty FOLLOW_UP_DATE = new TaskQueryProperty("RES.FOLLOW_UP_DATE_");
   
   private String name;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/producer/DefaultHistoryEventProducer.java
Patch:
@@ -95,6 +95,7 @@ protected void initTaskInstanceEvent(HistoricTaskInstanceEventEntity evt, TaskEn
     evt.setAssignee(taskEntity.getAssignee());
     evt.setDescription(taskEntity.getDescription());
     evt.setDueDate(taskEntity.getDueDate());
+    evt.setFollowUpDate(taskEntity.getFollowUpDate());
     evt.setName(taskEntity.getName());
     evt.setOwner(taskEntity.getOwner());
     evt.setParentTaskId(taskEntity.getParentTaskId());

File: engine/src/test/java/org/camunda/bpm/engine/test/examples/mgmt/ManagementServiceTest.java
Patch:
@@ -49,7 +49,7 @@ public void testGetTableMetaData() {
     
     TableMetaData tableMetaData = managementService.getTableMetaData(tablePrefix+"ACT_RU_TASK");
     assertEquals(tableMetaData.getColumnNames().size(), tableMetaData.getColumnTypes().size());
-    assertEquals(16, tableMetaData.getColumnNames().size());
+    assertEquals(17, tableMetaData.getColumnNames().size());
 
     int assigneeIndex = tableMetaData.getColumnNames().indexOf("ASSIGNEE_");
     int createTimeIndex = tableMetaData.getColumnNames().indexOf("CREATE_TIME_");

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -531,7 +531,7 @@ && allExecutionsInSameActivity(concurrentInActiveExecutions)
         // Others are already ended (end activities)
         if (!prunedExecution.isEnded()) {
           log.fine("pruning execution " + prunedExecution);
-          prunedExecution.remove();
+          prunedExecution.end();
         }
       }
 
@@ -1275,6 +1275,7 @@ public void insert() {
   public void deleteCascade(String deleteReason) {
     this.deleteReason = deleteReason;
     this.deleteRoot = true;
+    this.isEnded = true;
     performOperation(AtomicOperation.DELETE_CASCADE);
   }
 

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/standalone/AbstractAuthenticationFilterTest.java
Patch:
@@ -113,7 +113,7 @@ public void testHttpBasicAuthenticationCheck() {
     }
 
     verify(identityServiceMock).setAuthentication(MockProvider.EXAMPLE_USER_ID, groups);
-    verify(identityServiceMock).clearAuthentication();
+//    verify(identityServiceMock).clearAuthentication();
   }
 
   @Test

File: webapps/core/src/main/java/org/camunda/bpm/cockpit/plugin/spi/CockpitPlugin.java
Patch:
@@ -34,7 +34,7 @@
  *
  * Plugin developers should not use this interface directly but use
  * {@link org.camunda.bpm.cockpit.plugin.spi.impl.AbstractCockpitPlugin} as a base class.
- * 
+ *
  * @author nico.rehwaldt
  *
  * @see org.camunda.bpm.cockpit.plugin.spi.impl.AbstractCockpitPlugin
@@ -70,10 +70,10 @@ public interface CockpitPlugin {
   public List<String> getMappingFiles();
 
   /**
-   * Returns a uri to a plugins asset directory.
+   * Returns a uri to a plugin resources directory.
    * The directory must be unique across all plugins.
    *
-   * @return the directory providing the plugins client side assets
+   * @return the directory providing the plugins client side resources
    */
   public String getAssetDirectory();
 

File: webapps/core/src/test/java/org/camunda/bpm/cockpit/test/plugin/PluginArchiveTest.java
Patch:
@@ -38,7 +38,7 @@ public void shouldContainCorrectResources() {
     assertThat(contents)
         .contains("/META-INF/services/" + CockpitPlugin.class.getName())
         .contains("/" + pluginPkg + "/" + SimplePlugin.class.getSimpleName() + ".class")
-        .contains("/" + pluginPkg + "/assets/test.txt")
+        .contains("/plugin-webapp/simple/test.txt")
         .contains("/" + pluginPkg + "/queries/simple.xml");
   }
 }

File: webapps/core/src/test/java/org/camunda/bpm/cockpit/test/plugin/resources/EmbeddedPluginApiTest.java
Patch:
@@ -50,7 +50,7 @@ public static Archive<?> createDeployment() {
     WebArchive archive = createBaseDeployment("test-embedded.war")
           .addAsServiceProvider(CockpitPlugin.class, EmbeddedPlugin.class)
           .addPackages(true, EmbeddedPlugin.class.getPackage())
-          .addAsWebResource("org/camunda/bpm/cockpit/test/sample/plugin/simple/assets/test.txt", "/plugin/embedded/test.txt");
+          .addAsWebResource("plugin-webapp/simple/test.txt", "/plugin-webapp/embedded/test.txt");
 
     return archive;
   }

File: webapps/core/src/test/java/org/camunda/bpm/cockpit/test/util/DeploymentHelper.java
Patch:
@@ -121,6 +121,7 @@ public static JavaArchive getTestPluginAsFiles() {
     String pkgName = SimplePlugin.class.getPackage().getName().replaceAll("\\.", "/");
 
     addFiles(archive, pkgName, new File("src/test/resources/" + pkgName));
+    addFiles(archive, "plugin-webapp", new File("src/test/resources/plugin-webapp"));
 
     return archive;
   }

File: webapps/webapp/src/main/java/org/camunda/bpm/cockpit/impl/plugin/base/BasePlugin.java
Patch:
@@ -50,7 +50,7 @@ public String getId() {
 
   @Override
   public String getAssetDirectory() {
-    return "webapp://plugin/base";
+    return "plugin/base";
   }
 
   @Override

File: webapps/webapp/src/main/java/org/camunda/bpm/cockpit/impl/plugin/jobdefinition/JobDefinitionPlugin.java
Patch:
@@ -41,7 +41,7 @@ public Set<Class<?>> getResourceClasses() {
 
   @Override
   public String getAssetDirectory() {
-    return "webapp://plugin/jobDefinition";
+    return "plugin/jobDefinition";
   }
 
 }

File: webapps/camunda-webapp/core/src/main/java/org/camunda/bpm/cockpit/plugin/spi/CockpitPlugin.java
Patch:
@@ -34,7 +34,7 @@
  *
  * Plugin developers should not use this interface directly but use
  * {@link org.camunda.bpm.cockpit.plugin.spi.impl.AbstractCockpitPlugin} as a base class.
- * 
+ *
  * @author nico.rehwaldt
  *
  * @see org.camunda.bpm.cockpit.plugin.spi.impl.AbstractCockpitPlugin
@@ -70,10 +70,10 @@ public interface CockpitPlugin {
   public List<String> getMappingFiles();
 
   /**
-   * Returns a uri to a plugins asset directory.
+   * Returns a uri to a plugin resources directory.
    * The directory must be unique across all plugins.
    *
-   * @return the directory providing the plugins client side assets
+   * @return the directory providing the plugins client side resources
    */
   public String getAssetDirectory();
 

File: webapps/camunda-webapp/core/src/test/java/org/camunda/bpm/cockpit/test/plugin/PluginArchiveTest.java
Patch:
@@ -38,7 +38,7 @@ public void shouldContainCorrectResources() {
     assertThat(contents)
         .contains("/META-INF/services/" + CockpitPlugin.class.getName())
         .contains("/" + pluginPkg + "/" + SimplePlugin.class.getSimpleName() + ".class")
-        .contains("/" + pluginPkg + "/assets/test.txt")
+        .contains("/plugin-webapp/simple/test.txt")
         .contains("/" + pluginPkg + "/queries/simple.xml");
   }
 }

File: webapps/camunda-webapp/core/src/test/java/org/camunda/bpm/cockpit/test/plugin/resources/EmbeddedPluginApiTest.java
Patch:
@@ -50,7 +50,7 @@ public static Archive<?> createDeployment() {
     WebArchive archive = createBaseDeployment("test-embedded.war")
           .addAsServiceProvider(CockpitPlugin.class, EmbeddedPlugin.class)
           .addPackages(true, EmbeddedPlugin.class.getPackage())
-          .addAsWebResource("org/camunda/bpm/cockpit/test/sample/plugin/simple/assets/test.txt", "/plugin/embedded/test.txt");
+          .addAsWebResource("plugin-webapp/simple/test.txt", "/plugin-webapp/embedded/test.txt");
 
     return archive;
   }

File: webapps/camunda-webapp/core/src/test/java/org/camunda/bpm/cockpit/test/util/DeploymentHelper.java
Patch:
@@ -121,6 +121,7 @@ public static JavaArchive getTestPluginAsFiles() {
     String pkgName = SimplePlugin.class.getPackage().getName().replaceAll("\\.", "/");
 
     addFiles(archive, pkgName, new File("src/test/resources/" + pkgName));
+    addFiles(archive, "plugin-webapp", new File("src/test/resources/plugin-webapp"));
 
     return archive;
   }

File: webapps/camunda-webapp/webapp/src/main/java/org/camunda/bpm/cockpit/impl/plugin/base/BasePlugin.java
Patch:
@@ -50,7 +50,7 @@ public String getId() {
 
   @Override
   public String getAssetDirectory() {
-    return "webapp://plugin/base";
+    return "plugin/base";
   }
 
   @Override

File: webapps/camunda-webapp/webapp/src/main/java/org/camunda/bpm/cockpit/impl/plugin/jobdefinition/JobDefinitionPlugin.java
Patch:
@@ -41,7 +41,7 @@ public Set<Class<?>> getResourceClasses() {
 
   @Override
   public String getAssetDirectory() {
-    return "webapp://plugin/jobDefinition";
+    return "plugin/jobDefinition";
   }
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/CallActivityBehavior.java
Patch:
@@ -159,7 +159,7 @@ public void completing(DelegateExecution execution, DelegateExecution subProcess
     for (AbstractDataAssociation dataOutputAssociation : dataOutputAssociations) {
       Object value = null;
         if (dataOutputAssociation.getVariables() != null) {
-          Map<String, Object> variables = execution.getVariables();
+          Map<String, Object> variables = subProcessInstance.getVariables();
           if (variables != null && !variables.isEmpty()) {
             execution.setVariables(subProcessInstance.getVariables());
           }

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -2928,7 +2928,7 @@ public ActivityImpl parseCallActivity(Element callActivityElement, ScopeImpl sco
     }
 
     CallActivityBehavior callActivityBehaviour = null;
-    String expressionRegex = "\\$+\\{+.+\\}";
+    String expressionRegex = "[$#]+\\{+.+\\}";
     if (calledElement != null && calledElement.matches(expressionRegex)) {
       if (calledElementBinding == null) {
         callActivityBehaviour = new CallActivityBehavior(expressionManager.createExpression(calledElement));

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/SuspensionStateDto.java
Patch:
@@ -16,13 +16,13 @@
 
 public class SuspensionStateDto {
 
-  protected boolean suspended;
+  private boolean suspended;
 
   public boolean getSuspended() {
     return suspended;
   }
 
-  public void setState(boolean suspended) {
+  public void setSuspended(boolean suspended) {
     this.suspended = suspended;
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/compensate/CompensateEventTest.java
Patch:
@@ -107,7 +107,7 @@ public void testCompensateScope() {
 
   // See: https://app.camunda.com/jira/browse/CAM-1410
   @Deployment
-  public void FAILING_testCompensateActivityRef() {
+  public void testCompensateActivityRef() {
 
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("compensateProcess");
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/type/EnumFormType.java
Patch:
@@ -23,14 +23,16 @@
  */
 public class EnumFormType extends AbstractFormFieldType {
 
+  public final static String TYPE_NAME = "enum";
+
   protected Map<String, String> values;
 
   public EnumFormType(Map<String, String> values) {
     this.values = values;
   }
 
   public String getName() {
-    return "enum";
+    return TYPE_NAME;
   }
 
   @Override

File: engine/src/test/java/org/camunda/bpm/engine/test/api/identity/AuthorizationServiceTest.java
Patch:
@@ -757,7 +757,6 @@ public void testUserOverrideGlobalRevokeAuthorizationCheck() {
   public void testNullAuthorizationCheck() {
 
     TestResource resource1 = new TestResource("resource1", 100);
-
     assertFalse(authorizationService.isUserAuthorized(null, null, UPDATE, resource1));
 
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/ProcessInstanceSuspensionTest.java
Patch:
@@ -447,7 +447,7 @@ public void testChildExecutionsSuspendedAfterProcessInstanceSuspend() {
     assertEquals(0, runtimeService.createProcessInstanceQuery().count());
   }
 
-  @Deployment(resources = {"org/camunda/bpm/engine/test/api/runtime/PRocessInstanceSuspensionTest.testChildExecutionsSuspendedAfterProcessInstanceSuspend.bpmn20.xml"})
+  @Deployment(resources = {"org/camunda/bpm/engine/test/api/runtime/ProcessInstanceSuspensionTest.testChildExecutionsSuspendedAfterProcessInstanceSuspend.bpmn20.xml"})
   public void testChildExecutionsSuspendedAfterProcessInstanceSuspendByProcessDefinitionId() {
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("testChildExecutionsSuspended");
     runtimeService.suspendProcessInstanceByProcessDefinitionId(processInstance.getProcessDefinitionId());
@@ -473,7 +473,7 @@ public void testChildExecutionsSuspendedAfterProcessInstanceSuspendByProcessDefi
     assertEquals(0, runtimeService.createProcessInstanceQuery().count());
   }
 
-  @Deployment(resources = {"org/camunda/bpm/engine/test/api/runtime/PRocessInstanceSuspensionTest.testChildExecutionsSuspendedAfterProcessInstanceSuspend.bpmn20.xml"})
+  @Deployment(resources = {"org/camunda/bpm/engine/test/api/runtime/ProcessInstanceSuspensionTest.testChildExecutionsSuspendedAfterProcessInstanceSuspend.bpmn20.xml"})
   public void testChildExecutionsSuspendedAfterProcessInstanceSuspendByProcessDefinitionKey() {
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("testChildExecutionsSuspended");
     runtimeService.suspendProcessInstanceByProcessDefinitionKey("testChildExecutionsSuspended");

File: webapps/core/src/main/java/org/camunda/bpm/cockpit/plugin/test/application/TestProcessEngineProvider.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.cockpit.test.sample.application;
+package org.camunda.bpm.cockpit.plugin.test.application;
 
 import java.util.Set;
 

File: webapps/core/src/test/java/org/camunda/bpm/cockpit/test/util/DeploymentHelper.java
Patch:
@@ -18,7 +18,7 @@
 import org.camunda.bpm.cockpit.Cockpit;
 import org.camunda.bpm.cockpit.core.test.util.TestContainer;
 import org.camunda.bpm.cockpit.plugin.spi.CockpitPlugin;
-import org.camunda.bpm.cockpit.test.sample.application.TestProcessEngineProvider;
+import org.camunda.bpm.cockpit.plugin.test.application.TestProcessEngineProvider;
 import org.camunda.bpm.cockpit.test.sample.plugin.simple.SimplePlugin;
 import org.camunda.bpm.engine.rest.spi.ProcessEngineProvider;
 import org.jboss.shrinkwrap.api.ShrinkWrap;

File: webapps/camunda-webapp/core/src/main/java/org/camunda/bpm/cockpit/plugin/test/application/TestProcessEngineProvider.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.cockpit.test.sample.application;
+package org.camunda.bpm.cockpit.plugin.test.application;
 
 import java.util.Set;
 

File: webapps/camunda-webapp/core/src/test/java/org/camunda/bpm/cockpit/test/util/DeploymentHelper.java
Patch:
@@ -18,7 +18,7 @@
 import org.camunda.bpm.cockpit.Cockpit;
 import org.camunda.bpm.cockpit.core.test.util.TestContainer;
 import org.camunda.bpm.cockpit.plugin.spi.CockpitPlugin;
-import org.camunda.bpm.cockpit.test.sample.application.TestProcessEngineProvider;
+import org.camunda.bpm.cockpit.plugin.test.application.TestProcessEngineProvider;
 import org.camunda.bpm.cockpit.test.sample.plugin.simple.SimplePlugin;
 import org.camunda.bpm.engine.rest.spi.ProcessEngineProvider;
 import org.jboss.shrinkwrap.api.ShrinkWrap;

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -315,7 +315,7 @@ protected ExecutionEntity newExecution() {
   public void initialize() {
     log.fine("initializing "+this);
 
-    ScopeImpl scope = getScope();
+    ScopeImpl scope = getScopeActivity();
     ensureParentInitialized();
 
     List<VariableDeclaration> variableDeclarations = (List<VariableDeclaration>) scope.getProperty(BpmnParse.PROPERTYNAME_VARIABLE_DECLARATIONS);
@@ -985,7 +985,7 @@ protected void ensureSubProcessInstanceInitialized() {
 
   // scopes ///////////////////////////////////////////////////////////////////
 
-  protected ScopeImpl getScope() {
+  protected ScopeImpl getScopeActivity() {
     ScopeImpl scope = null;
     if (isProcessInstance()) {
       scope = getProcessDefinition();

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/repository/ProcessDefinitionResourceImpl.java
Patch:
@@ -214,7 +214,7 @@ public FormDto getStartForm() {
     }
     FormDto dto = FormDto.fromFormData(formData);
     if(dto.getKey() == null || dto.getKey().isEmpty()) {
-      if(formData.getFormFieldGroups() != null && !formData.getFormFieldGroups().isEmpty()) {
+      if(formData.getFormFields() != null && !formData.getFormFields().isEmpty()) {
         dto.setKey("embedded:engine://engine/:engine/process-definition/"+processDefinitionId+"/rendered-form");
       }
     }

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/task/impl/TaskResourceImpl.java
Patch:
@@ -139,7 +139,7 @@ public FormDto getForm() {
 
     FormDto dto = FormDto.fromFormData(formData);
     if(dto.getKey() == null || dto.getKey().isEmpty()) {
-      if(formData.getFormFieldGroups() != null && !formData.getFormFieldGroups().isEmpty()) {
+      if(formData.getFormFields() != null && !formData.getFormFields().isEmpty()) {
         dto.setKey("embedded:engine://engine/:engine/task/"+taskId+"/rendered-form");
       }
     }

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/task/CompleteTaskDto.java
Patch:
@@ -1,9 +1,9 @@
 /* Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/task/FormDto.java
Patch:
@@ -1,9 +1,9 @@
 /* Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetFormKeyCmd.java
Patch:
@@ -15,7 +15,7 @@
 
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.impl.context.Context;
-import org.camunda.bpm.engine.impl.form.DefaultFormHandler;
+import org.camunda.bpm.engine.impl.form.handler.DefaultFormHandler;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.persistence.entity.ProcessDefinitionEntity;

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetRenderedStartFormCmd.java
Patch:
@@ -17,8 +17,8 @@
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.form.StartFormData;
 import org.camunda.bpm.engine.impl.context.Context;
-import org.camunda.bpm.engine.impl.form.FormEngine;
-import org.camunda.bpm.engine.impl.form.StartFormHandler;
+import org.camunda.bpm.engine.impl.form.engine.FormEngine;
+import org.camunda.bpm.engine.impl.form.handler.StartFormHandler;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.persistence.entity.ProcessDefinitionEntity;

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetRenderedTaskFormCmd.java
Patch:
@@ -18,8 +18,8 @@
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.form.TaskFormData;
 import org.camunda.bpm.engine.impl.context.Context;
-import org.camunda.bpm.engine.impl.form.FormEngine;
-import org.camunda.bpm.engine.impl.form.TaskFormHandler;
+import org.camunda.bpm.engine.impl.form.engine.FormEngine;
+import org.camunda.bpm.engine.impl.form.handler.TaskFormHandler;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.persistence.entity.TaskEntity;

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetStartFormCmd.java
Patch:
@@ -18,7 +18,7 @@
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.form.StartFormData;
 import org.camunda.bpm.engine.impl.context.Context;
-import org.camunda.bpm.engine.impl.form.StartFormHandler;
+import org.camunda.bpm.engine.impl.form.handler.StartFormHandler;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.persistence.entity.ProcessDefinitionEntity;

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/GetTaskFormCmd.java
Patch:
@@ -18,7 +18,7 @@
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.form.TaskFormData;
 import org.camunda.bpm.engine.impl.context.Context;
-import org.camunda.bpm.engine.impl.form.TaskFormHandler;
+import org.camunda.bpm.engine.impl.form.handler.TaskFormHandler;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.persistence.entity.TaskEntity;

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/FormPropertyImpl.java
Patch:
@@ -15,6 +15,7 @@
 
 import org.camunda.bpm.engine.form.FormProperty;
 import org.camunda.bpm.engine.form.FormType;
+import org.camunda.bpm.engine.impl.form.handler.FormPropertyHandler;
 
 
 /**

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/engine/FormEngine.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.form;
+package org.camunda.bpm.engine.impl.form.engine;
 
 import org.camunda.bpm.engine.form.StartFormData;
 import org.camunda.bpm.engine.form.TaskFormData;

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/engine/JuelFormEngine.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.engine.impl.form;
+package org.camunda.bpm.engine.impl.form.engine;
 
 import java.io.UnsupportedEncodingException;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/handler/StartFormHandler.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.camunda.bpm.engine.impl.form;
+package org.camunda.bpm.engine.impl.form.handler;
 
 import org.camunda.bpm.engine.form.StartFormData;
 import org.camunda.bpm.engine.impl.persistence.entity.ProcessDefinitionEntity;

File: engine/src/main/java/org/camunda/bpm/engine/impl/form/handler/TaskFormHandler.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.camunda.bpm.engine.impl.form;
+package org.camunda.bpm.engine.impl.form.handler;
 
 import org.camunda.bpm.engine.form.TaskFormData;
 import org.camunda.bpm.engine.impl.persistence.entity.TaskEntity;

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -383,7 +383,7 @@ public void start(String businessKey, Map<String, Object> variables) {
     performOperation(AtomicOperation.PROCESS_START);
   }
 
-   public void startWithFormProperties(Map<String, String> properties) {
+   public void startWithFormProperties(Map<String, Object> properties) {
      if(isProcessInstance()) {
        ActivityImpl initial = processDefinition.getInitial();
        if(processInstanceStartContext != null) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ProcessDefinitionEntity.java
Patch:
@@ -27,7 +27,7 @@
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.db.HasRevision;
 import org.camunda.bpm.engine.impl.db.PersistentObject;
-import org.camunda.bpm.engine.impl.form.StartFormHandler;
+import org.camunda.bpm.engine.impl.form.handler.StartFormHandler;
 import org.camunda.bpm.engine.impl.history.event.HistoryEvent;
 import org.camunda.bpm.engine.impl.history.handler.HistoryEventHandler;
 import org.camunda.bpm.engine.impl.history.producer.HistoryEventProducer;

File: engine/src/main/java/org/camunda/bpm/engine/impl/task/TaskDefinition.java
Patch:
@@ -21,7 +21,7 @@
 
 import org.camunda.bpm.engine.delegate.Expression;
 import org.camunda.bpm.engine.delegate.TaskListener;
-import org.camunda.bpm.engine.impl.form.TaskFormHandler;
+import org.camunda.bpm.engine.impl.form.handler.TaskFormHandler;
 
 /**
  * Container for task definition information gathered at parsing time.

File: engine/src/main/java/org/camunda/bpm/application/impl/event/ProcessApplicationEventListenerDelegate.java
Patch:
@@ -75,7 +75,7 @@ public Void call() throws Exception {
       try {
         performNotification(execution, notification);
       } catch(Exception e) {
-        throw new ProcessEngineException("Execption while notifying process application task listener.", e);
+        throw new ProcessEngineException("Exception while notifying process application task listener.", e);
       }
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -127,7 +127,7 @@ public void deploy(DeploymentEntity deployment) {
     List<String> keyList = new ArrayList<String>();
     for (ProcessDefinitionEntity processDefinition : processDefinitions) {
       if (keyList.contains(processDefinition.getKey())) {
-        throw new ProcessEngineException("The deployment contains process definitions with the same key (process id atrribute), this is not allowed");
+        throw new ProcessEngineException("The deployment contains process definitions with the same key '" + processDefinition.getKey() + "' (process id attribute), this is not allowed");
       }
       keyList.add(processDefinition.getKey());
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/ExecuteJobsRunnable.java
Patch:
@@ -66,7 +66,7 @@ public void run() {
         try {
           executeJob(nextJobId, commandExecutor);        
         } catch(Throwable t) {
-          LOGG.log(Level.WARNING, "Execption while executing job with id "+nextJobId, t);
+          LOGG.log(Level.WARNING, "Exception while executing job with id "+nextJobId, t);
         }
         
       }      

File: identity/identity-ldap/src/main/java/org/camunda/bpm/identity/impl/ldap/LdapIdentityProviderSession.java
Patch:
@@ -497,7 +497,7 @@ protected void applyRequestControls(AbstractQuery query) {
       initialContext.setRequestControls(controls.toArray(new Control[0]));
 
     } catch (Exception e) {
-      throw new IdentityProviderException("Execption while setting paging settings", e);
+      throw new IdentityProviderException("Exception while setting paging settings", e);
     }
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/error/ThrowSpecializedExceptionDelegate.java
Patch:
@@ -23,7 +23,7 @@ public class ThrowSpecializedExceptionDelegate implements JavaDelegate {
 
   public void execute(DelegateExecution execution) throws Exception {
 
-    throw new MySpecializedException("This should be caught!");
+    throw new MySpecializedException("Business Exception");
 
   }
 

File: engine/src/test/java/org/camunda/bpm/engine/test/api/history/HistoryServiceTest.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.List;
 import java.util.Map;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.history.HistoricProcessInstance;

File: identity/identity-ldap/src/main/java/org/camunda/bpm/identity/impl/ldap/LdapIdentityProviderSession.java
Patch:
@@ -169,7 +169,7 @@ protected List<User> findUsersByGroupId(LdapUserQueryImpl query) {
       // first find group
       while (enumeration.hasMoreElements()) {
         SearchResult result = (SearchResult) enumeration.nextElement();
-        Attribute memberAttribute = result.getAttributes().get("member");
+        Attribute memberAttribute = result.getAttributes().get(ldapConfiguration.getGroupMemberAttribute());
         NamingEnumeration<?> allMembers = memberAttribute.getAll();
 
         // iterate group members

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/event/HistoricActivityInstanceEventEntity.java
Patch:
@@ -73,7 +73,7 @@ public String getAssignee() {
   }
 
   public Long getDurationInMillis() {
-    if(endTime != null) {
+    if(endTime != null && startTime != null) {
         return endTime.getTime() - startTime.getTime();
     } else {
       return durationInMillis;

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/event/HistoricProcessInstanceEventEntity.java
Patch:
@@ -53,7 +53,7 @@ public class HistoricProcessInstanceEventEntity extends HistoryEvent {
   // getters / setters ////////////////////////////////////////
 
   public Long getDurationInMillis() {
-    if(endTime != null) {
+    if(endTime != null && startTime != null) {
       return endTime.getTime() - startTime.getTime();
     } else {
       return durationInMillis;

File: engine/src/main/java/org/camunda/bpm/engine/impl/history/event/HistoricTaskInstanceEventEntity.java
Patch:
@@ -38,7 +38,7 @@ public class HistoricTaskInstanceEventEntity extends HistoryEvent {
   // getters and setters //////////////////////////////////////////////////////
 
   public Long getDurationInMillis() {
-    if(endTime != null) {
+    if(endTime != null && startTime != null) {
       return endTime.getTime() - startTime.getTime();
     } else {
       return durationInMillis;

File: webapps/webapp/src/test/java/org/camunda/bpm/cockpit/plugin/base/IncidentRestServiceTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.camunda.bpm.cockpit.impl.plugin.base.dto.IncidentDto;
 import org.camunda.bpm.cockpit.impl.plugin.base.dto.query.IncidentQueryDto;
 import org.camunda.bpm.cockpit.impl.plugin.base.resources.IncidentRestService;
+import org.camunda.bpm.cockpit.plugin.base.util.JobExecutorHelper;
 import org.camunda.bpm.cockpit.plugin.test.AbstractCockpitPluginTest;
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.RuntimeService;

File: webapps/webapp/src/test/java/org/camunda/bpm/cockpit/plugin/base/ProcessInstanceResourceTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.camunda.bpm.cockpit.impl.plugin.base.dto.ProcessInstanceDto;
 import org.camunda.bpm.cockpit.impl.plugin.base.dto.query.ProcessInstanceQueryDto;
 import org.camunda.bpm.cockpit.impl.plugin.base.sub.resources.ProcessInstanceResource;
+import org.camunda.bpm.cockpit.plugin.base.util.JobExecutorHelper;
 import org.camunda.bpm.cockpit.plugin.test.AbstractCockpitPluginTest;
 import org.camunda.bpm.engine.ManagementService;
 import org.camunda.bpm.engine.ProcessEngine;

File: webapps/webapp/src/test/java/org/camunda/bpm/cockpit/plugin/base/ProcessInstanceRestServiceTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.camunda.bpm.cockpit.impl.plugin.base.dto.ProcessInstanceDto;
 import org.camunda.bpm.cockpit.impl.plugin.base.dto.query.ProcessInstanceQueryDto;
 import org.camunda.bpm.cockpit.impl.plugin.base.resources.ProcessInstanceRestService;
+import org.camunda.bpm.cockpit.plugin.base.util.JobExecutorHelper;
 import org.camunda.bpm.cockpit.plugin.test.AbstractCockpitPluginTest;
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.RepositoryService;

File: webapps/webapp/src/test/java/org/camunda/bpm/cockpit/plugin/base/util/JobExecutorHelper.java
Patch:
@@ -1,4 +1,4 @@
-package org.camunda.bpm.cockpit.plugin.base;
+package org.camunda.bpm.cockpit.plugin.base.util;
 
 import java.util.List;
 import java.util.Timer;

File: webapps/camunda-webapp/webapp/src/test/java/org/camunda/bpm/cockpit/plugin/base/IncidentRestServiceTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.camunda.bpm.cockpit.impl.plugin.base.dto.IncidentDto;
 import org.camunda.bpm.cockpit.impl.plugin.base.dto.query.IncidentQueryDto;
 import org.camunda.bpm.cockpit.impl.plugin.base.resources.IncidentRestService;
+import org.camunda.bpm.cockpit.plugin.base.util.JobExecutorHelper;
 import org.camunda.bpm.cockpit.plugin.test.AbstractCockpitPluginTest;
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.RuntimeService;

File: webapps/camunda-webapp/webapp/src/test/java/org/camunda/bpm/cockpit/plugin/base/ProcessInstanceResourceTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.camunda.bpm.cockpit.impl.plugin.base.dto.ProcessInstanceDto;
 import org.camunda.bpm.cockpit.impl.plugin.base.dto.query.ProcessInstanceQueryDto;
 import org.camunda.bpm.cockpit.impl.plugin.base.sub.resources.ProcessInstanceResource;
+import org.camunda.bpm.cockpit.plugin.base.util.JobExecutorHelper;
 import org.camunda.bpm.cockpit.plugin.test.AbstractCockpitPluginTest;
 import org.camunda.bpm.engine.ManagementService;
 import org.camunda.bpm.engine.ProcessEngine;

File: webapps/camunda-webapp/webapp/src/test/java/org/camunda/bpm/cockpit/plugin/base/ProcessInstanceRestServiceTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.camunda.bpm.cockpit.impl.plugin.base.dto.ProcessInstanceDto;
 import org.camunda.bpm.cockpit.impl.plugin.base.dto.query.ProcessInstanceQueryDto;
 import org.camunda.bpm.cockpit.impl.plugin.base.resources.ProcessInstanceRestService;
+import org.camunda.bpm.cockpit.plugin.base.util.JobExecutorHelper;
 import org.camunda.bpm.cockpit.plugin.test.AbstractCockpitPluginTest;
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.RepositoryService;

File: webapps/camunda-webapp/webapp/src/test/java/org/camunda/bpm/cockpit/plugin/base/util/JobExecutorHelper.java
Patch:
@@ -1,4 +1,4 @@
-package org.camunda.bpm.cockpit.plugin.base;
+package org.camunda.bpm.cockpit.plugin.base.util;
 
 import java.util.List;
 import java.util.Timer;

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -257,7 +257,7 @@ public ExecutionEntity createExecution() {
     return createdExecution;
   }
 
-  public PvmProcessInstance createSubProcessInstance(PvmProcessDefinition processDefinition) {
+  public PvmProcessInstance createSubProcessInstance(PvmProcessDefinition processDefinition, String businessKey) {
     ExecutionEntity subProcessInstance = newExecution();
 
     // manage bidirectional super-subprocess relation
@@ -267,6 +267,7 @@ public PvmProcessInstance createSubProcessInstance(PvmProcessDefinition processD
     // Initialize the new execution
     subProcessInstance.setProcessDefinition((ProcessDefinitionImpl) processDefinition);
     subProcessInstance.setProcessInstance(subProcessInstance);
+    subProcessInstance.setBusinessKey(businessKey);
 
     ProcessEngineConfigurationImpl configuration = Context.getProcessEngineConfiguration();
     int historyLevel = configuration.getHistoryLevel();

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/delegate/ActivityExecution.java
Patch:
@@ -69,7 +69,7 @@ public interface ActivityExecution extends DelegateExecution {
    * 
    * @param processDefinition The {@link PvmProcessDefinition} of the subprocess.
    */
-  PvmProcessInstance createSubProcessInstance(PvmProcessDefinition processDefinition);
+  PvmProcessInstance createSubProcessInstance(PvmProcessDefinition processDefinition, String businessKey);
   
   /**
    * returns the parent of this execution, or null if there no parent.

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/ExecutionImpl.java
Patch:
@@ -173,7 +173,7 @@ protected ExecutionImpl newExecution() {
     return new ExecutionImpl();
   }
 
-  public PvmProcessInstance createSubProcessInstance(PvmProcessDefinition processDefinition) {
+  public PvmProcessInstance createSubProcessInstance(PvmProcessDefinition processDefinition, String businessKey) {
     ExecutionImpl subProcessInstance = newExecution();
 
     // manage bidirectional super-subprocess relation
@@ -183,6 +183,7 @@ public PvmProcessInstance createSubProcessInstance(PvmProcessDefinition processD
     // Initialize the new execution
     subProcessInstance.setProcessDefinition((ProcessDefinitionImpl) processDefinition);
     subProcessInstance.setProcessInstance(subProcessInstance);
+    subProcessInstance.setBusinessKey(businessKey);
 
     return subProcessInstance;
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/pvm/activities/ReusableSubProcess.java
Patch:
@@ -35,7 +35,7 @@ public ReusableSubProcess(PvmProcessDefinition processDefinition) {
   }
 
   public void execute(ActivityExecution execution) throws Exception {
-    PvmProcessInstance subProcessInstance = execution.createSubProcessInstance(processDefinition);
+    PvmProcessInstance subProcessInstance = execution.createSubProcessInstance(processDefinition, null);
     
     // TODO set variables
     

File: engine/src/main/java/org/camunda/bpm/engine/impl/calendar/DurationHelper.java
Patch:
@@ -44,10 +44,10 @@ public class DurationHelper {
 
   DatatypeFactory datatypeFactory;
 
-  public DurationHelper(String expressionS) throws Exception {
+  public DurationHelper(String expressions) throws Exception {
     List<String> expression = new ArrayList<String>();
-    if(expressionS != null) {
-      expression = Arrays.asList(expressionS.split("/"));
+    if(expressions != null) {
+      expression = Arrays.asList(expressions.split("/"));
     }
     datatypeFactory = DatatypeFactory.newInstance();
 

File: engine/src/main/java/org/camunda/bpm/engine/delegate/DelegateExecution.java
Patch:
@@ -71,7 +71,7 @@ public interface DelegateExecution extends VariableScope {
   /** return the Id of the parent activity instance currently executed by this execution */
   String getParentActivityInstanceId();
 
-  /** return te Id of the current transition */
+  /** return the Id of the current transition */
   String getCurrentTransitionId();
 
 }

File: webapps/camunda-webapp/webapp/src/main/runtime/develop/java/org/camunda/bpm/pa/DevProcessApplication.java
Patch:
@@ -113,9 +113,6 @@ private void createCockpitDemoData(ProcessEngine engine) throws Exception {
     runtimeService.startProcessInstanceByKey("executionProcess");
     runtimeService.startProcessInstanceByKey("executionProcess");
 
-
-    runtimeService.startProcessInstanceByKey("exclusiveGatewayProcess");
-
     ((ProcessEngineImpl) engine).getProcessEngineConfiguration().getJobExecutor().start();
   }
 

File: webapps/webapp/src/main/runtime/develop/java/org/camunda/bpm/pa/DevProcessApplication.java
Patch:
@@ -113,9 +113,6 @@ private void createCockpitDemoData(ProcessEngine engine) throws Exception {
     runtimeService.startProcessInstanceByKey("executionProcess");
     runtimeService.startProcessInstanceByKey("executionProcess");
 
-
-    runtimeService.startProcessInstanceByKey("exclusiveGatewayProcess");
-
     ((ProcessEngineImpl) engine).getProcessEngineConfiguration().getJobExecutor().start();
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/ManagementService.java
Patch:
@@ -77,8 +77,8 @@ public interface ManagementService {
    * between the process engine and the process application and optionally removes the associated
    * process definitions from the cache.
    *
-   * @param deploymentId
-   *          the Id of the deployment to deactivate
+   * @param deploymentIds
+   *          the Ids of the deployments to deactivate
    * @param removeProcessDefinitionsFromCache
    *          indicates whether the process definitions should be removed from the deployment cache
    * @return true if the registration was cleared

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -86,8 +86,8 @@ public class DbSqlSessionFactory implements SessionFactory {
     databaseSpecificDateDiff1.put("mysql", "TIMESTAMPDIFF(SECOND,");
     databaseSpecificDateDiff2.put("mysql", ",");
     databaseSpecificDateDiff3.put("mysql", ")*1000");
-    databaseSpecificTrueConstant.put("h2", "1");
-    databaseSpecificFalseConstant.put("h2", "0");
+    databaseSpecificTrueConstant.put("mysql", "1");
+    databaseSpecificFalseConstant.put("mysql", "0");
     addDatabaseSpecificStatement("mysql", "selectNextJobsToExecute", "selectNextJobsToExecute_mysql");
     addDatabaseSpecificStatement("mysql", "selectExclusiveJobsToExecute", "selectExclusiveJobsToExecute_mysql");
     addDatabaseSpecificStatement("mysql", "selectProcessDefinitionsByQueryCriteria", "selectProcessDefinitionsByQueryCriteria_mysql");

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -694,6 +694,9 @@ protected void initSqlSessionFactory() {
           properties.put("dateDiff2" , DbSqlSessionFactory.databaseSpecificDateDiff2.get(databaseType));
           properties.put("dateDiff3" , DbSqlSessionFactory.databaseSpecificDateDiff3.get(databaseType));
 
+          properties.put("trueConstant", DbSqlSessionFactory.databaseSpecificTrueConstant.get(databaseType));
+          properties.put("falseConstant", DbSqlSessionFactory.databaseSpecificFalseConstant.get(databaseType));
+
           properties.put("dbSpecificDummyTable" , DbSqlSessionFactory.databaseSpecificDummyTable.get(databaseType));
         }
         XMLConfigBuilder parser = new XMLConfigBuilder(reader,"", properties);

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/calendar/DurationHelperTest.java
Patch:
@@ -14,7 +14,6 @@
 
 package org.camunda.bpm.engine.test.standalone.calendar;
 
-import static groovy.util.GroovyTestCase.assertEquals;
 import static junit.framework.Assert.assertNull;
 import static junit.framework.TestCase.assertEquals;
 

File: engine/src/main/java/org/camunda/bpm/engine/test/ProcessEngineTestCase.java
Patch:
@@ -25,6 +25,7 @@
 import org.camunda.bpm.engine.RepositoryService;
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.TaskService;
+import org.camunda.bpm.engine.impl.test.ProcessEngineAssert;
 import org.camunda.bpm.engine.impl.test.TestHelper;
 import org.camunda.bpm.engine.impl.util.ClockUtil;
 
@@ -75,7 +76,7 @@ public ProcessEngineTestCase() {
   }
   
   public void assertProcessEnded(final String processInstanceId) {
-    TestHelper.assertProcessEnded(processEngine, processInstanceId);
+    ProcessEngineAssert.assertProcessEnded(processEngine, processInstanceId);
   }
   
   @Override

File: webapps/webapp/src/main/java/org/camunda/bpm/webapp/impl/security/SecurityActions.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.camunda.bpm.webapp.impl.security;
 
-import java.util.Arrays;
 import java.util.List;
 
 import org.camunda.bpm.cockpit.Cockpit;
@@ -52,7 +51,7 @@ private static void clearAuthentication(Authentication authentication) {
     }
   }
 
-  private static void authenticateProcessEngine(org.camunda.bpm.webapp.impl.security.auth.Authentication authentication) {
+  private static void authenticateProcessEngine(Authentication authentication) {
 
     ProcessEngine processEngine = Cockpit.getProcessEngine(authentication.getProcessEngineName());
     if (processEngine != null) {

File: webapps/webapp/src/main/java/org/camunda/bpm/webapp/impl/security/auth/AuthenticationDto.java
Patch:
@@ -14,7 +14,6 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Set;
 
 /**
  * @author Daniel Meyer

File: webapps/webapp/src/main/java/org/camunda/bpm/webapp/impl/security/auth/UserAuthenticationResource.java
Patch:
@@ -12,8 +12,8 @@
  */
 package org.camunda.bpm.webapp.impl.security.auth;
 
-import static org.camunda.bpm.engine.authorization.Permissions.*;
-import static org.camunda.bpm.engine.authorization.Resources.*;
+import static org.camunda.bpm.engine.authorization.Permissions.ACCESS;
+import static org.camunda.bpm.engine.authorization.Resources.APPLICATION;
 
 import java.util.ArrayList;
 import java.util.HashSet;
@@ -32,7 +32,6 @@
 
 import org.camunda.bpm.engine.AuthorizationService;
 import org.camunda.bpm.engine.ProcessEngine;
-import org.camunda.bpm.engine.authorization.Authorization;
 import org.camunda.bpm.engine.identity.Group;
 import org.camunda.bpm.engine.rest.exception.InvalidRequestException;
 import org.camunda.bpm.engine.rest.exception.RestException;

File: webapps/webapp/src/main/java/org/camunda/bpm/webapp/impl/security/filter/Authorization.java
Patch:
@@ -13,8 +13,9 @@
 package org.camunda.bpm.webapp.impl.security.filter;
 
 import java.util.Collection;
-import java.util.Set;
+
 import javax.servlet.http.HttpServletResponse;
+
 import org.camunda.bpm.webapp.impl.security.auth.Authentication;
 import org.camunda.bpm.webapp.impl.security.auth.UserAuthentication;
 

File: webapps/webapp/src/main/java/org/camunda/bpm/webapp/impl/security/filter/PathFilterRule.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.camunda.bpm.webapp.impl.security.auth.Authentication;
 import org.camunda.bpm.webapp.impl.security.filter.RequestMatcher.Match;
+import org.springframework.util.PathMatcher;
 
 /**
  * <p>A {@link SecurityFilterRule} that deleagates to a set of {@link PathMatcher}s</p>

File: webapps/webapp/src/main/java/org/camunda/bpm/webapp/impl/security/filter/util/FilterRules.java
Patch:
@@ -22,9 +22,9 @@
 import org.camunda.bpm.webapp.impl.security.auth.Authentication;
 import org.camunda.bpm.webapp.impl.security.filter.Authorization;
 import org.camunda.bpm.webapp.impl.security.filter.PathFilterRule;
-import org.camunda.bpm.webapp.impl.security.filter.RequestMatcher;
 import org.camunda.bpm.webapp.impl.security.filter.RequestAuthorizer;
 import org.camunda.bpm.webapp.impl.security.filter.RequestFilter;
+import org.camunda.bpm.webapp.impl.security.filter.RequestMatcher;
 import org.camunda.bpm.webapp.impl.security.filter.SecurityFilterConfig;
 import org.camunda.bpm.webapp.impl.security.filter.SecurityFilterConfig.PathFilterConfig;
 import org.camunda.bpm.webapp.impl.security.filter.SecurityFilterConfig.PathMatcherConfig;

File: webapps/camunda-webapp/webapp/src/main/java/org/camunda/bpm/webapp/impl/security/SecurityActions.java
Patch:
@@ -12,7 +12,6 @@
  */
 package org.camunda.bpm.webapp.impl.security;
 
-import java.util.Arrays;
 import java.util.List;
 
 import org.camunda.bpm.cockpit.Cockpit;
@@ -52,7 +51,7 @@ private static void clearAuthentication(Authentication authentication) {
     }
   }
 
-  private static void authenticateProcessEngine(org.camunda.bpm.webapp.impl.security.auth.Authentication authentication) {
+  private static void authenticateProcessEngine(Authentication authentication) {
 
     ProcessEngine processEngine = Cockpit.getProcessEngine(authentication.getProcessEngineName());
     if (processEngine != null) {

File: webapps/camunda-webapp/webapp/src/main/java/org/camunda/bpm/webapp/impl/security/auth/AuthenticationDto.java
Patch:
@@ -14,7 +14,6 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Set;
 
 /**
  * @author Daniel Meyer

File: webapps/camunda-webapp/webapp/src/main/java/org/camunda/bpm/webapp/impl/security/auth/UserAuthenticationResource.java
Patch:
@@ -12,8 +12,8 @@
  */
 package org.camunda.bpm.webapp.impl.security.auth;
 
-import static org.camunda.bpm.engine.authorization.Permissions.*;
-import static org.camunda.bpm.engine.authorization.Resources.*;
+import static org.camunda.bpm.engine.authorization.Permissions.ACCESS;
+import static org.camunda.bpm.engine.authorization.Resources.APPLICATION;
 
 import java.util.ArrayList;
 import java.util.HashSet;
@@ -32,7 +32,6 @@
 
 import org.camunda.bpm.engine.AuthorizationService;
 import org.camunda.bpm.engine.ProcessEngine;
-import org.camunda.bpm.engine.authorization.Authorization;
 import org.camunda.bpm.engine.identity.Group;
 import org.camunda.bpm.engine.rest.exception.InvalidRequestException;
 import org.camunda.bpm.engine.rest.exception.RestException;

File: webapps/camunda-webapp/webapp/src/main/java/org/camunda/bpm/webapp/impl/security/filter/Authorization.java
Patch:
@@ -13,8 +13,9 @@
 package org.camunda.bpm.webapp.impl.security.filter;
 
 import java.util.Collection;
-import java.util.Set;
+
 import javax.servlet.http.HttpServletResponse;
+
 import org.camunda.bpm.webapp.impl.security.auth.Authentication;
 import org.camunda.bpm.webapp.impl.security.auth.UserAuthentication;
 

File: webapps/camunda-webapp/webapp/src/main/java/org/camunda/bpm/webapp/impl/security/filter/PathFilterRule.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.camunda.bpm.webapp.impl.security.auth.Authentication;
 import org.camunda.bpm.webapp.impl.security.filter.RequestMatcher.Match;
+import org.springframework.util.PathMatcher;
 
 /**
  * <p>A {@link SecurityFilterRule} that deleagates to a set of {@link PathMatcher}s</p>

File: webapps/camunda-webapp/webapp/src/main/java/org/camunda/bpm/webapp/impl/security/filter/util/FilterRules.java
Patch:
@@ -22,9 +22,9 @@
 import org.camunda.bpm.webapp.impl.security.auth.Authentication;
 import org.camunda.bpm.webapp.impl.security.filter.Authorization;
 import org.camunda.bpm.webapp.impl.security.filter.PathFilterRule;
-import org.camunda.bpm.webapp.impl.security.filter.RequestMatcher;
 import org.camunda.bpm.webapp.impl.security.filter.RequestAuthorizer;
 import org.camunda.bpm.webapp.impl.security.filter.RequestFilter;
+import org.camunda.bpm.webapp.impl.security.filter.RequestMatcher;
 import org.camunda.bpm.webapp.impl.security.filter.SecurityFilterConfig;
 import org.camunda.bpm.webapp.impl.security.filter.SecurityFilterConfig.PathFilterConfig;
 import org.camunda.bpm.webapp.impl.security.filter.SecurityFilterConfig.PathMatcherConfig;

File: engine-spring/src/test/java/org/camunda/bpm/engine/spring/test/application/SpringProcessApplicationTest.java
Patch:
@@ -39,16 +39,16 @@ public void testProcessApplicationDeployment() {
     AbstractApplicationContext applicationContext = new ClassPathXmlApplicationContext("org/camunda/bpm/engine/spring/test/application/SpringProcessApplicationDeploymentTest-context.xml");
     applicationContext.start();
 
-    // assert that there is a process application deployed with the name of the current application context.
+    // assert that there is a process application deployed with the name of the process application bean
     Assert.assertNotNull(BpmPlatform.getProcessApplicationService()
-      .getProcessApplicationInfo(applicationContext.getDisplayName()));
+      .getProcessApplicationInfo("myProcessApplication"));
 
     // close the spring application context
     applicationContext.close();
 
     // after closing the application context, the process application is undeployed.
     Assert.assertNull(BpmPlatform.getProcessApplicationService()
-      .getProcessApplicationInfo(applicationContext.getDisplayName()));
+      .getProcessApplicationInfo("myProcessApplication"));
 
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/jobexecutor/AsyncContinuationJobHandler.java
Patch:
@@ -23,6 +23,7 @@
 /**
  * 
  * @author Daniel Meyer
+ * @author Thorben Lindhauer
  */
 public class AsyncContinuationJobHandler implements JobHandler {
   
@@ -41,7 +42,6 @@ public String getType() {
   }
 
   public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext) {
-    // ATM only AtomicOperationTransitionCreateScope can be performed asynchronously 
     AtomicOperation atomicOperation = findMatchingAtomicOperation(configuration);
     if (atomicOperation == null) {
       throw new ProcessEngineException("Cannot process job with configuration " + configuration);

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -588,7 +588,7 @@ public void performOperation(AtomicOperation executionOperation) {
     }    
   }
   
-  protected void performOperationSync(AtomicOperation executionOperation) {
+  public void performOperationSync(AtomicOperation executionOperation) {
     if (requiresUnsuspendedExecution(executionOperation)) {
       ensureNotSuspended();
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/AbstractEventAtomicOperation.java
Patch:
@@ -53,7 +53,7 @@ public void execute(InterpretableExecution execution) {
           throw new PvmException("couldn't execute event listener : "+e.getMessage(), e);
         }
         execution.setExecutionListenerIndex(executionListenerIndex+1);
-        execution.performOperation(this);
+        execution.performOperationSync(this);
   
       } else {
         execution.setExecutionListenerIndex(0);

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/AtomicOperation.java
Patch:
@@ -17,6 +17,7 @@
 /**
  * @author Tom Baeyens
  * @author Daniel Meyer
+ * @author Thorben Lindhauer
  */
 public interface AtomicOperation {
   

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/InterpretableExecution.java
Patch:
@@ -43,6 +43,8 @@ public interface InterpretableExecution extends ActivityExecution, ExecutionList
   void setActivity(ActivityImpl activity);
 
   void performOperation(AtomicOperation etomicOperation);
+  
+  void performOperationSync(AtomicOperation executionOperation);
 
   boolean isScope();
 

File: engine-cdi/src/main/java/org/camunda/bpm/engine/cdi/annotation/event/BusinessProcessDefinition.java
Patch:
@@ -32,7 +32,7 @@
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Qualifier
-public @interface BusinessProcess {
+public @interface BusinessProcessDefinition {
   /** the key of the process */  
   String value() default "";
 }

File: engine-cdi/src/main/java/org/camunda/bpm/engine/cdi/annotation/event/BusinessProcessLiteral.java
Patch:
@@ -14,7 +14,7 @@
 
 import javax.enterprise.util.AnnotationLiteral;
 
-public class BusinessProcessLiteral extends AnnotationLiteral<BusinessProcess> implements BusinessProcess {
+public class BusinessProcessLiteral extends AnnotationLiteral<BusinessProcessDefinition> implements BusinessProcessDefinition {
   
   protected final String key;   
   

File: engine-cdi/src/test/java/org/camunda/bpm/engine/cdi/test/impl/event/TestEventListener.java
Patch:
@@ -19,7 +19,7 @@
 import javax.enterprise.event.Observes;
 
 import org.camunda.bpm.engine.cdi.BusinessProcessEvent;
-import org.camunda.bpm.engine.cdi.annotation.event.BusinessProcess;
+import org.camunda.bpm.engine.cdi.annotation.event.BusinessProcessDefinition;
 import org.camunda.bpm.engine.cdi.annotation.event.EndActivity;
 import org.camunda.bpm.engine.cdi.annotation.event.StartActivity;
 import org.camunda.bpm.engine.cdi.annotation.event.TakeTransition;
@@ -39,7 +39,7 @@ public void reset() {
   private final Set<BusinessProcessEvent> eventsReceivedByKey = new HashSet<BusinessProcessEvent>();
   
   // receives all events related to "process1"
-  public void onProcessEventByKey(@Observes @BusinessProcess("process1") BusinessProcessEvent businessProcessEvent) {
+  public void onProcessEventByKey(@Observes @BusinessProcessDefinition("process1") BusinessProcessEvent businessProcessEvent) {
     eventsReceivedByKey.add(businessProcessEvent);
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -1147,7 +1147,7 @@ public void setReplacedBy(InterpretableExecution replacedBy) {
     // All tasks have been moved to 'replacedBy', safe to clear the list 
     this.tasks.clear();
     
-    tasks = dbSqlSession.findInCache(TaskEntity.class);
+    List<TaskEntity> tasks = dbSqlSession.findInCache(TaskEntity.class);
     for (TaskEntity task: tasks) {
       if (id.equals(task.getExecutionId())) {
         task.setExecutionId(replacedBy.getId());

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -502,7 +502,7 @@ public void fireEvent(String taskEventName) {
           try {
             Context.getProcessEngineConfiguration()
               .getDelegateInterceptor()
-              .handleInvocation(new TaskListenerInvocation(taskListener, (DelegateTask)this));
+              .handleInvocation(new TaskListenerInvocation(taskListener, (DelegateTask)this, execution));
           }catch (Exception e) {
             throw new ProcessEngineException("Exception while invoking TaskListener: "+e.getMessage(), e);
           }

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/classloading/war/JavaDelegateResolutionTest.java
Patch:
@@ -14,7 +14,6 @@
  * limitations under the License.
  */
 package org.camunda.bpm.integrationtest.functional.classloading.war;
-import javax.transaction.SystemException;
 
 import org.camunda.bpm.integrationtest.functional.classloading.beans.ExampleDelegate;
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
@@ -40,7 +39,7 @@
  * @author Daniel Meyer
  */
 @RunWith(Arquillian.class)
-public class JavaDelegateResolutionTestWar extends AbstractFoxPlatformIntegrationTest {
+public class JavaDelegateResolutionTest extends AbstractFoxPlatformIntegrationTest {
     
   @Deployment
   public static WebArchive createProcessArchiveDeplyoment() {    
@@ -78,7 +77,7 @@ public void testResolveClass() {
   
   @Test
   @OperateOnDeployment("clientDeployment")
-  public void testResolveClassFromJobExecutor() throws InterruptedException, SystemException {
+  public void testResolveClassFromJobExecutor() throws InterruptedException {
     
     runtimeService.startProcessInstanceByKey("testResolveClassFromJobExecutor");        
     

File: engine/src/main/java/org/camunda/bpm/container/impl/jmx/JmxRuntimeContainerDelegate.java
Patch:
@@ -143,7 +143,7 @@ public void deployProcessApplication(AbstractProcessApplication processApplicati
       .addStep(new PostDeployInvocationStep())
       .execute();
     
-    LOGGER.info("Process Application "+processApplication.getName()+" sucessfully deployed.");  
+    LOGGER.info("Process Application "+processApplication.getName()+" successfully deployed.");
     
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/ErrorEndEventActivityBehavior.java
Patch:
@@ -29,7 +29,7 @@ public ErrorEndEventActivityBehavior(String errorCode) {
   }
   
   public void execute(ActivityExecution execution) throws Exception {    
-    ErrorPropagation.propagateError(errorCode, execution);    
+    ErrorPropagation.propagateError(errorCode, null, execution);    
   }
 
   public String getErrorCode() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/MultiInstanceActivityBehavior.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.logging.Logger;
 
 import org.camunda.bpm.engine.ProcessEngineException;
-import org.camunda.bpm.engine.SuspendedEntityInteractionException;
 import org.camunda.bpm.engine.delegate.BpmnError;
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.ExecutionListener;
@@ -93,6 +92,8 @@ public void execute(ActivityExecution execution) throws Exception {
         }
       } catch (BpmnError error) {
         ErrorPropagation.propagateError(error, execution);
+      } catch (Exception ex) {
+        ErrorPropagation.propagateException(ex, execution);
       }
     } else {
         innerActivityBehavior.execute(execution);

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/ScriptTaskActivityBehavior.java
Patch:
@@ -61,7 +61,7 @@ public void execute(ActivityExecution execution) throws Exception {
           && e.getCause().getCause().getCause() instanceof BpmnError) {
         ErrorPropagation.propagateError((BpmnError) e.getCause().getCause().getCause(), execution);
       } else {
-        throw e;
+        ErrorPropagation.propagateException(e, execution);
       }
     }
      if (noErrors) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/ServiceTaskDelegateExpressionActivityBehavior.java
Patch:
@@ -96,7 +96,7 @@ public void execute(ActivityExecution execution) throws Exception {
       if (error != null) {
         ErrorPropagation.propagateError(error, execution);
       } else {
-        throw exc;
+        ErrorPropagation.propagateException(exc, execution);
       }
 
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/ServiceTaskExpressionActivityBehavior.java
Patch:
@@ -62,7 +62,7 @@ public void execute(ActivityExecution execution) throws Exception {
       if (error != null) {
         ErrorPropagation.propagateError(error, execution);
       } else {
-        throw exc;
+        ErrorPropagation.propagateException(exc, execution);
       }
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/helper/ClassDelegate.java
Patch:
@@ -107,6 +107,8 @@ public void execute(ActivityExecution execution) throws Exception {
       activityBehaviorInstance.execute(execution);
     } catch (BpmnError error) {
       ErrorPropagation.propagateError(error, execution);
+    } catch (Exception ex) {
+      ErrorPropagation.propagateException(ex, execution);
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/javax/el/ELException.java
Patch:
@@ -15,10 +15,12 @@
  */
 package org.camunda.bpm.engine.impl.javax.el;
 
+import org.camunda.bpm.engine.ProcessEngineException;
+
 /**
  * Represents any of the exception conditions that can arise during expression evaluation.
  */
-public class ELException extends RuntimeException {
+public class ELException extends ProcessEngineException {
 	private static final long serialVersionUID = 1L;
 
 	/**

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/PvmException.java
Patch:
@@ -13,11 +13,13 @@
 
 package org.camunda.bpm.engine.impl.pvm;
 
+import org.camunda.bpm.engine.ProcessEngineException;
+
 
 /**
  * @author Tom Baeyens
  */
-public class PvmException extends RuntimeException {
+public class PvmException extends ProcessEngineException {
 
   private static final long serialVersionUID = 1L;
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/interceptor/CommandContext.java
Patch:
@@ -193,7 +193,7 @@ public void close() {
       if (exception instanceof Error) {
         throw (Error) exception;
       } else if (exception instanceof PersistenceException) {
-        throw new ProcessEngineException("Process engnine persistence exception", exception);
+        throw new ProcessEngineException("Process engine persistence exception", exception);
       } else if (exception instanceof RuntimeException) {
         throw (RuntimeException) exception;
       } else {

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/ProcessDefinitionRestService.java
Patch:
@@ -45,7 +45,7 @@ public interface ProcessDefinitionRestService {
   
   /**
    * Exposes the {@link ProcessDefinitionQuery} interface as a REST service.
-   * @param query
+   * @param uriInfo
    * @param firstResult
    * @param maxResults
    * @return

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/ProcessInstanceRestService.java
Patch:
@@ -43,7 +43,7 @@ public interface ProcessInstanceRestService {
   /**
    * Exposes the {@link ProcessInstanceQuery} interface as a REST service.
    * 
-   * @param query
+   * @param uriInfo
    * @param firstResult
    * @param maxResults
    * @return
@@ -56,7 +56,7 @@ List<ProcessInstanceDto> getProcessInstances(@Context UriInfo uriInfo,
 
   /**
    * Expects the same parameters as
-   * {@link ProcessInstanceRestService#getProcessInstances(ProcessInstanceQueryDto, Integer, Integer)} (as a JSON message body)
+   * {@link ProcessInstanceRestService#getProcessInstances(UriInfo, Integer, Integer)} (as a JSON message body)
    * and allows for any number of variable checks.
    * 
    * @param query

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/TaskRestService.java
Patch:
@@ -45,7 +45,7 @@ List<TaskDto> getTasks(@Context UriInfo uriInfo,
       @QueryParam("firstResult") Integer firstResult, @QueryParam("maxResults") Integer maxResults);
 
   /**
-   * Expects the same parameters as {@link TaskRestService#getTasks(TaskQueryDto, Integer, Integer)} (as
+   * Expects the same parameters as {@link TaskRestService#getTasks(UriInfo, Integer, Integer)} (as
    * JSON message body) and allows more than one variable check.
    * @param query
    * @param firstResult

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/VariableInstanceRestService.java
Patch:
@@ -41,7 +41,7 @@ public interface VariableInstanceRestService {
   /**
    * Exposes the {@link VariableInstanceQuery} interface as a REST service.
    * 
-   * @param query
+   * @param uriInfo
    * @param firstResult
    * @param maxResults
    * @return
@@ -54,10 +54,10 @@ List<VariableInstanceDto> getVariableInstances(@Context UriInfo uriInfo,
 
   /**
    * Expects the same parameters as
-   * {@link VariableInstanceRestService#getVariableInstances(VariableInstanceQueryDto, Integer, Integer)} (as a JSON message body)
+   * {@link VariableInstanceRestService#getVariableInstances(UriInfo, Integer, Integer)} (as a JSON message body)
    * and allows for any number of variable checks.
    * 
-   * @param query
+   * @param queryDto
    * @param firstResult
    * @param maxResults
    * @return

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/MultiInstanceActivityBehavior.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.logging.Logger;
 
 import org.camunda.bpm.engine.ProcessEngineException;
-import org.camunda.bpm.engine.SuspendedEntityInteractionException;
 import org.camunda.bpm.engine.delegate.BpmnError;
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.ExecutionListener;
@@ -93,6 +92,8 @@ public void execute(ActivityExecution execution) throws Exception {
         }
       } catch (BpmnError error) {
         ErrorPropagation.propagateError(error, execution);
+      } catch (Exception ex) {
+        ErrorPropagation.propagateException(ex, execution);
       }
     } else {
         innerActivityBehavior.execute(execution);

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/ScriptTaskActivityBehavior.java
Patch:
@@ -61,7 +61,7 @@ public void execute(ActivityExecution execution) throws Exception {
           && e.getCause().getCause().getCause() instanceof BpmnError) {
         ErrorPropagation.propagateError((BpmnError) e.getCause().getCause().getCause(), execution);
       } else {
-        throw e;
+        ErrorPropagation.propagateException(e, execution);
       }
     }
      if (noErrors) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/ServiceTaskDelegateExpressionActivityBehavior.java
Patch:
@@ -96,7 +96,7 @@ public void execute(ActivityExecution execution) throws Exception {
       if (error != null) {
         ErrorPropagation.propagateError(error, execution);
       } else {
-        throw exc;
+        ErrorPropagation.propagateException(exc, execution);
       }
 
     }

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/ServiceTaskExpressionActivityBehavior.java
Patch:
@@ -62,7 +62,7 @@ public void execute(ActivityExecution execution) throws Exception {
       if (error != null) {
         ErrorPropagation.propagateError(error, execution);
       } else {
-        throw exc;
+        ErrorPropagation.propagateException(exc, execution);
       }
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/helper/ClassDelegate.java
Patch:
@@ -107,8 +107,8 @@ public void execute(ActivityExecution execution) throws Exception {
       activityBehaviorInstance.execute(execution);
     } catch (BpmnError error) {
       ErrorPropagation.propagateError(error, execution);
-    } catch (Exception e) {
-      ErrorPropagation.propagateThrowable(e, execution);
+    } catch (Exception ex) {
+      ErrorPropagation.propagateException(ex, execution);
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/javax/el/ELException.java
Patch:
@@ -15,10 +15,12 @@
  */
 package org.camunda.bpm.engine.impl.javax.el;
 
+import org.camunda.bpm.engine.ProcessEngineException;
+
 /**
  * Represents any of the exception conditions that can arise during expression evaluation.
  */
-public class ELException extends RuntimeException {
+public class ELException extends ProcessEngineException {
 	private static final long serialVersionUID = 1L;
 
 	/**

File: engine/src/main/java/org/camunda/bpm/engine/impl/pvm/PvmException.java
Patch:
@@ -13,11 +13,13 @@
 
 package org.camunda.bpm.engine.impl.pvm;
 
+import org.camunda.bpm.engine.ProcessEngineException;
+
 
 /**
  * @author Tom Baeyens
  */
-public class PvmException extends RuntimeException {
+public class PvmException extends ProcessEngineException {
 
   private static final long serialVersionUID = 1L;
 

File: engine/src/main/java/org/camunda/bpm/engine/ProcessEngines.java
Patch:
@@ -94,7 +94,7 @@ public synchronized static void init() {
       }
       for (Iterator<URL> iterator = configUrls.iterator(); iterator.hasNext();) {
         URL resource = iterator.next();
-        initProcessEnginFromResource(resource);
+        initProcessEngineFromResource(resource);
       }
       
       try {
@@ -145,7 +145,7 @@ public static void unregister(ProcessEngine processEngine) {
     processEngines.remove(processEngine.getName());
   }
 
-  private static ProcessEngineInfo initProcessEnginFromResource(URL resourceUrl) {
+  private static ProcessEngineInfo initProcessEngineFromResource(URL resourceUrl) {
     ProcessEngineInfo processEngineInfo = processEngineInfosByResourceUrl.get(resourceUrl);
     // if there is an existing process engine info
     if (processEngineInfo!=null) {
@@ -229,7 +229,7 @@ public static ProcessEngine getProcessEngine(String processEngineName) {
   public static ProcessEngineInfo retry(String resourceUrl) {
     log.fine("retying initializing of resource " + resourceUrl);
     try {
-      return initProcessEnginFromResource(new URL(resourceUrl));
+      return initProcessEngineFromResource(new URL(resourceUrl));
     } catch (MalformedURLException e) {
       throw new ProcessEngineException("invalid url: "+resourceUrl, e);
     }

File: engine/src/main/java/org/camunda/bpm/engine/authorization/Resources.java
Patch:
@@ -13,7 +13,7 @@
 package org.camunda.bpm.engine.authorization;
 
 /**
- * <p>The set of built-in resurce names.</p>
+ * <p>The set of built-in {@link Resource} names.</p>
  * 
  * @author Daniel Meyer
  *

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/AuthorizationRestService.java
Patch:
@@ -67,6 +67,7 @@ List<AuthorizationDto> queryAuthorizations(@Context UriInfo uriInfo,
   @POST
   @Path("/create")
   @Consumes(MediaType.APPLICATION_JSON)
+  @Produces(MediaType.APPLICATION_JSON)
   AuthorizationDto createAuthorization(@Context UriInfo context, AuthorizationCreateDto dto);
   
 }

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/ProcessEngineRestService.java
Patch:
@@ -56,6 +56,9 @@ public interface ProcessEngineRestService {
   
   @Path("/{name}" + UserRestService.PATH)
   UserRestService getUserRestService(@PathParam("name") String engineName);
+
+  @Path("/{name}" + AuthorizationRestService.PATH)
+  AuthorizationRestService getAuthorizationRestService(@PathParam("name") String engineName);
   
   @GET
   @Produces(MediaType.APPLICATION_JSON)

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/identity/GroupDto.java
Patch:
@@ -16,12 +16,13 @@
 import java.util.List;
 
 import org.camunda.bpm.engine.identity.Group;
+import org.camunda.bpm.engine.rest.dto.LinkableDto;
 
 /**
  * @author Daniel Meyer
  *
  */
-public class GroupDto {
+public class GroupDto extends LinkableDto {
 
   protected String id;
   protected String name;

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/exception/ExceptionHandler.java
Patch:
@@ -37,7 +37,7 @@ public class ExceptionHandler implements ExceptionMapper<Exception> {
 
   @Override
   public Response toResponse(Exception exception) {
-    ExceptionDto dto = ExceptionDto.fromException(exception, true);
+    ExceptionDto dto = ExceptionDto.fromException(exception);
 
     LOGGER.log(Level.WARNING, getStackTrace(exception));
     

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/exception/RestExceptionHandler.java
Patch:
@@ -26,7 +26,7 @@ public class RestExceptionHandler implements ExceptionMapper<RestException> {
 
   @Override
   public Response toResponse(RestException exception) {
-    ExceptionDto dto = ExceptionDto.fromException(exception, true);
+    ExceptionDto dto = ExceptionDto.fromException(exception);
 
     LOGGER.log(Level.WARNING, getStackTrace(exception));
     

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/application/DefaultApplication.java
Patch:
@@ -20,6 +20,7 @@
 
 import org.camunda.bpm.engine.rest.exception.ProcessEngineExceptionHandler;
 import org.camunda.bpm.engine.rest.exception.RestExceptionHandler;
+import org.camunda.bpm.engine.rest.impl.AuthorizationRestServiceImpl;
 import org.camunda.bpm.engine.rest.impl.ExecutionRestServiceImpl;
 import org.camunda.bpm.engine.rest.impl.GroupRestServiceImpl;
 import org.camunda.bpm.engine.rest.impl.IdentityRestServiceImpl;
@@ -29,8 +30,8 @@
 import org.camunda.bpm.engine.rest.impl.ProcessEngineRestServiceImpl;
 import org.camunda.bpm.engine.rest.impl.ProcessInstanceRestServiceImpl;
 import org.camunda.bpm.engine.rest.impl.TaskRestServiceImpl;
-import org.camunda.bpm.engine.rest.impl.VariableInstanceRestServiceImpl;
 import org.camunda.bpm.engine.rest.impl.UserRestServiceImpl;
+import org.camunda.bpm.engine.rest.impl.VariableInstanceRestServiceImpl;
 import org.camunda.bpm.engine.rest.mapper.JacksonConfigurator;
 import org.codehaus.jackson.jaxrs.JacksonJsonProvider;
 import org.codehaus.jackson.jaxrs.JsonMappingExceptionMapper;
@@ -64,6 +65,7 @@ public Set<Class<?>> getClasses() {
     classes.add(VariableInstanceRestServiceImpl.class);
     classes.add(UserRestServiceImpl.class);
     classes.add(GroupRestServiceImpl.class);
+    classes.add(AuthorizationRestServiceImpl.class);
     
     classes.add(JacksonConfigurator.class);
     

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/mapper/JacksonConfigurator.java
Patch:
@@ -19,6 +19,7 @@
 import javax.ws.rs.ext.ContextResolver;
 import javax.ws.rs.ext.Provider;
 
+import org.codehaus.jackson.map.DeserializationConfig;
 import org.codehaus.jackson.map.ObjectMapper;
 import org.codehaus.jackson.map.SerializationConfig;
 
@@ -32,6 +33,7 @@ public JacksonConfigurator() {
     mapper = new ObjectMapper();
 
     mapper.getSerializationConfig().setDateFormat(new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"));
+    mapper.configure(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES, false);
     mapper.configure(SerializationConfig.Feature.WRITE_DATES_AS_TIMESTAMPS, false);
   }
   

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/identity/GroupResource.java
Patch:
@@ -18,7 +18,9 @@
 import javax.ws.rs.PUT;
 import javax.ws.rs.Path;
 import javax.ws.rs.Produces;
+import javax.ws.rs.core.Context;
 import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.UriInfo;
 
 import org.camunda.bpm.engine.rest.dto.identity.GroupDto;
 
@@ -30,7 +32,7 @@ public interface GroupResource {
 
   @GET
   @Produces(MediaType.APPLICATION_JSON)
-  public GroupDto getGroup();
+  public GroupDto getGroup(@Context UriInfo context);
 
   @DELETE
   @Produces(MediaType.APPLICATION_JSON)

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/identity/UserResource.java
Patch:
@@ -18,7 +18,9 @@
 import javax.ws.rs.PUT;
 import javax.ws.rs.Path;
 import javax.ws.rs.Produces;
+import javax.ws.rs.core.Context;
 import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.UriInfo;
 
 import org.camunda.bpm.engine.rest.dto.identity.UserCredentialsDto;
 import org.camunda.bpm.engine.rest.dto.identity.UserProfileDto;
@@ -38,7 +40,7 @@ public interface UserResource {
   @GET
   @Path("/profile")
   @Produces(MediaType.APPLICATION_JSON)
-  public UserProfileDto getUserProfile();
+  public UserProfileDto getUserProfile(@Context UriInfo context);
   
   @PUT
   @Path("/profile")

File: engine/src/main/java/org/camunda/bpm/engine/AuthorizationException.java
Patch:
@@ -32,7 +32,7 @@ public AuthorizationException(String userId, String permissionName, String resou
     super(
         "The user with id '"+userId+ 
         "' does not have '"+permissionName+"' permission " +
-        "on resource ' " + (resourceId != null ? (resourceId+"' of type '") : "" ) + resourceType+"' .");
+        "on resource '" + (resourceId != null ? (resourceId+"' of type '") : "" ) + resourceType+"' .");
     this.resourceType = resourceType;
     this.permissionName = permissionName;    
     this.userId = userId;

File: engine/src/main/java/org/camunda/bpm/engine/authorization/Groups.java
Patch:
@@ -20,4 +20,7 @@
 public interface Groups {
 
   public static final String CAMUNDA_ADMIN = "camunda-admin";
+  public static final String GROUP_TYPE_SYSTEM = "SYSTEM";
+  public static final String GROUP_TYPE_WORKFLOW = "WORKFLOW";
+  
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AddCommentCmd.java
Patch:
@@ -15,7 +15,6 @@
 
 import java.io.Serializable;
 
-import org.camunda.bpm.engine.impl.identity.Authentication;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.persistence.entity.CommentEntity;
@@ -41,7 +40,7 @@ public AddCommentCmd(String taskId, String processInstanceId, String message) {
   }
   
   public Object execute(CommandContext commandContext) {
-    String userId = Authentication.getAuthenticatedUserId();
+    String userId = commandContext.getAuthenticatedUserId();
     CommentEntity comment = new CommentEntity();
     comment.setUserId(userId);
     comment.setType(CommentEntity.TYPE_COMMENT);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AddIdentityLinkCmd.java
Patch:
@@ -95,7 +95,7 @@ public Void execute(CommandContext commandContext) {
 
     CommentManager commentManager = commandContext.getCommentManager();
     if (commentManager.isHistoryEnabled()) {
-      String authenticatedUserId = Authentication.getAuthenticatedUserId();
+      String authenticatedUserId = commandContext.getAuthenticatedUserId();
       CommentEntity comment = new CommentEntity();
       comment.setUserId(authenticatedUserId);
       comment.setType(CommentEntity.TYPE_EVENT);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/CreateAttachmentCmd.java
Patch:
@@ -76,7 +76,7 @@ public Attachment execute(CommandContext commandContext) {
 
     CommentManager commentManager = commandContext.getCommentManager();
     if (commentManager.isHistoryEnabled()) {
-      String userId = Authentication.getAuthenticatedUserId();
+      String userId = commandContext.getAuthenticatedUserId();
       CommentEntity comment = new CommentEntity();
       comment.setUserId(userId);
       comment.setType(CommentEntity.TYPE_EVENT);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DecrementJobRetriesCmd.java
Patch:
@@ -62,7 +62,7 @@ public Object execute(CommandContext commandContext) {
         Context
           .getProcessEngineConfiguration()
           .getIncidentHandler(FailedJobIncidentHandler.INCIDENT_HANDLER_TYPE)
-          .handleIncident(null, null, job.getExecutionId(), job.getId());
+          .handleIncident(null, null, job.getExecutionId(), job.getId(), exception.getMessage());
       }
     }
     

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeleteAttachmentCmd.java
Patch:
@@ -56,7 +56,7 @@ public Object execute(CommandContext commandContext) {
     if (attachment.getTaskId()!=null) {
       CommentManager commentManager = commandContext.getCommentManager();
       if (commentManager.isHistoryEnabled()) {
-        String authenticatedUserId = Authentication.getAuthenticatedUserId();
+        String authenticatedUserId = commandContext.getAuthenticatedUserId();
         CommentEntity comment = new CommentEntity();
         comment.setUserId(authenticatedUserId);
         comment.setType(CommentEntity.TYPE_EVENT);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeleteIdentityLinkCmd.java
Patch:
@@ -97,7 +97,7 @@ public Void execute(CommandContext commandContext) {
     
     CommentManager commentManager = commandContext.getCommentManager();
     if (commentManager.isHistoryEnabled()) {
-      String authenticatedUserId = Authentication.getAuthenticatedUserId();
+      String authenticatedUserId = commandContext.getAuthenticatedUserId();
       CommentEntity comment = new CommentEntity();
       comment.setUserId(authenticatedUserId);
       comment.setType(CommentEntity.TYPE_EVENT);

File: engine/src/main/java/org/camunda/bpm/engine/impl/el/VariableScopeElResolver.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.Iterator;
 
 import org.camunda.bpm.engine.delegate.VariableScope;
+import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.identity.Authentication;
 import org.camunda.bpm.engine.impl.javax.el.ELContext;
 import org.camunda.bpm.engine.impl.javax.el.ELResolver;
@@ -58,7 +59,7 @@ public Object getValue(ELContext context, Object base, Object property)  {
         return ((TaskEntity) variableScope).getExecution();
       } else if(LOGGED_IN_USER_KEY.equals(property)){
         context.setPropertyResolved(true);
-        return Authentication.getAuthenticatedUserId();
+        return Context.getCommandContext().getAuthenticatedUserId();
       } else {
         if (variableScope.hasVariable(variable)) {
           context.setPropertyResolved(true); // if not set, the next elResolver in the CompositeElResolver will be called

File: engine/src/main/java/org/camunda/bpm/engine/impl/incident/FailedJobIncidentHandler.java
Patch:
@@ -40,14 +40,14 @@ public String getIncidentHandlerType() {
     return INCIDENT_HANDLER_TYPE;
   }
 
-  public void handleIncident(String processDefinitionId, String activityId, String executionId, String jobId) {
+  public void handleIncident(String processDefinitionId, String activityId, String executionId, String jobId, String message) {
 
     if(executionId != null) {
-      IncidentEntity newIncident = IncidentEntity.createAndInsertIncident(INCIDENT_HANDLER_TYPE, executionId, jobId);
+      IncidentEntity newIncident = IncidentEntity.createAndInsertIncident(INCIDENT_HANDLER_TYPE, executionId, jobId, message);
       newIncident.createRecursiveIncidents();
 
     } else {
-      IncidentEntity.createAndInsertIncident(INCIDENT_HANDLER_TYPE, processDefinitionId, activityId, jobId);
+      IncidentEntity.createAndInsertIncident(INCIDENT_HANDLER_TYPE, processDefinitionId, activityId, jobId, message);
 
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/incident/IncidentHandler.java
Patch:
@@ -37,7 +37,7 @@ public interface IncidentHandler {
   /**
    * Handle an incident that arose in the context of an execution.
    */
-  public void handleIncident(String processDefinitionId, String activityId, String executionId, String configuration);
+  public void handleIncident(String processDefinitionId, String activityId, String executionId, String configuration, String message);
 
   /**
    * Resolve an incident that arose in the context of an execution.

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricProcessInstanceEntity.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Map;
 
 import org.camunda.bpm.engine.history.HistoricProcessInstance;
-import org.camunda.bpm.engine.impl.identity.Authentication;
+import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.util.ClockUtil;
 
 /**
@@ -44,7 +44,7 @@ public HistoricProcessInstanceEntity(ExecutionEntity processInstance) {
     businessKey = processInstance.getBusinessKey();
     processDefinitionId = processInstance.getProcessDefinitionId();
     startTime = ClockUtil.getCurrentTime();
-    startUserId = Authentication.getAuthenticatedUserId();
+    startUserId = Context.getCommandContext().getAuthenticatedUserId();
     startActivityId = processInstance.getActivityId();
     superProcessInstanceId = processInstance.getSuperExecution() != null ? processInstance.getSuperExecution().getProcessInstanceId() : null;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ProcessDefinitionEntity.java
Patch:
@@ -104,7 +104,7 @@ public ExecutionEntity createProcessInstance(String businessKey, ActivityImpl in
     
     String initiatorVariableName = (String) getProperty(BpmnParse.PROPERTYNAME_INITIATOR_VARIABLE_NAME);
     if (initiatorVariableName!=null) {
-      String authenticatedUserId = Authentication.getAuthenticatedUserId();
+      String authenticatedUserId = Context.getCommandContext().getAuthenticatedUserId();
       processInstance.setVariable(initiatorVariableName, authenticatedUserId);
     }
     

File: engine/src/main/java/org/camunda/bpm/engine/impl/test/AbstractProcessEngineTestCase.java
Patch:
@@ -316,13 +316,13 @@ protected List<ActivityInstance> getInstancesForActivitiyId(ActivityInstance act
   protected void runAsUser(String userId, List<String> groupIds, Runnable r) {
     try {
       identityService.setAuthenticatedUserId(userId);
-      processEngineConfiguration.setAuthorizationChecksEnabled(true);
+      processEngineConfiguration.setAuthorizationEnabled(true);
       
       r.run();
       
     } finally {
       identityService.setAuthenticatedUserId(null);
-      processEngineConfiguration.setAuthorizationChecksEnabled(false);      
+      processEngineConfiguration.setAuthorizationEnabled(false);      
     }
   }
   

File: engine/src/main/java/org/camunda/bpm/engine/runtime/IncidentQuery.java
Patch:
@@ -25,6 +25,9 @@ public interface IncidentQuery extends Query<IncidentQuery, Incident> {
   /** Only select incidents which have the given incident type. **/
   IncidentQuery incidentType(String incidentType);
   
+  /** Only select incidents which have the given incident message. **/
+  IncidentQuery incidentMessage(String incidentMessage);
+  
   /** Only select incidents which have the given process definition id. **/
   IncidentQuery processDefinitionId(String processDefinitionId);
   

File: engine/src/test/java/org/camunda/bpm/engine/test/el/ExpressionManagerTest.java
Patch:
@@ -60,7 +60,7 @@ public void testExecutionAvailable() {
   public void testAuthenticatedUserIdAvailable() {
     try {
       // Setup authentication
-      Authentication.setAuthenticatedUserId("frederik");
+      identityService.setAuthenticatedUserId("frederik");
       ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("testAuthenticatedUserIdAvailableProcess");
       
       // Check if the variable that has been set in service-task is the authenticated user
@@ -69,7 +69,7 @@ public void testAuthenticatedUserIdAvailable() {
       assertEquals("frederik", value);
     } finally {
       // Cleanup
-      Authentication.setAuthenticatedUserId(null);
+      identityService.clearAuthentication();
     }
   }
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/examples/bpmn/event/error/BoundaryErrorEventTest.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.List;
 import java.util.Map;
 
-import org.camunda.bpm.engine.impl.identity.Authentication;
 import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
 import org.camunda.bpm.engine.task.Task;
 import org.camunda.bpm.engine.test.Deployment;
@@ -32,12 +31,12 @@ protected void setUp() throws Exception {
     super.setUp();
     
     // Normally the UI will do this automatically for us
-    Authentication.setAuthenticatedUserId("kermit");
+    identityService.setAuthenticatedUserId("kermit");
   }
   
   @Override
   protected void tearDown() throws Exception {
-    Authentication.setAuthenticatedUserId(null);
+    identityService.clearAuthentication();
     super.tearDown();
   }
   

File: qa/integration-tests-webapps/src/test/java/org/camunda/bpm/cockpit/test/DashboardIT.java
Patch:
@@ -31,7 +31,7 @@ public void before() throws Exception {
 
     testUtil = new TestUtil(testProperties);
 
-    testUtil.createUser("admin", "admin", "Mr.", "Admin");
+    testUtil.createInitialUser("admin", "admin", "Mr.", "Admin");
   }
 
   @Test

File: webapps/camunda-webapp/core/src/main/java/org/camunda/bpm/cockpit/db/QueryParameters.java
Patch:
@@ -22,6 +22,8 @@
  */
 public class QueryParameters<T> extends ListQueryParameterObject {
 
+  private static final long serialVersionUID = 1L;
+  
   protected boolean historyEnabled = true;
 
   public QueryParameters() { }

File: webapps/camunda-webapp/core/src/main/java/org/camunda/bpm/cockpit/impl/DefaultRuntimeDelegate.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.ServiceLoader;
 import java.util.Set;
 
-import org.camunda.bpm.BpmPlatform;
 import org.camunda.bpm.cockpit.CockpitRuntimeDelegate;
 import org.camunda.bpm.cockpit.plugin.PluginRegistry;
 import org.camunda.bpm.cockpit.db.CommandExecutor;

File: webapps/camunda-webapp/webapp/src/main/java/org/camunda/bpm/cockpit/impl/plugin/base/BasePlugin.java
Patch:
@@ -30,7 +30,8 @@ public class BasePlugin extends AbstractCockpitPlugin {
 
   private static final String[] MAPPING_FILES = {
     "org/camunda/bpm/cockpit/plugin/base/queries/processDefinition.xml",
-    "org/camunda/bpm/cockpit/plugin/base/queries/processInstance.xml"
+    "org/camunda/bpm/cockpit/plugin/base/queries/processInstance.xml",
+    "org/camunda/bpm/cockpit/plugin/base/queries/incident.xml"
   };
 
   @Override

File: webapps/camunda-webapp/webapp/src/main/java/org/camunda/bpm/cockpit/impl/plugin/base/query/parameter/ProcessInstanceQueryParameter.java
Patch:
@@ -17,6 +17,8 @@
 
 public class ProcessInstanceQueryParameter extends QueryParameters<ProcessInstanceDto> {
 
+  private static final long serialVersionUID = 1L;
+  
   protected String processDefinitionId;
   protected String orderBy = "START_TIME_ desc";
   

File: webapps/camunda-webapp/webapp/src/main/java/org/camunda/bpm/webapp/impl/security/auth/AuthenticationCookie.java
Patch:
@@ -18,6 +18,7 @@
 import javax.servlet.http.HttpSession;
 import javax.ws.rs.core.NewCookie;
 
+
 /**
  * <p>Util class allowing to obtain a Cookie from the current Authentications.</p>
  * 

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/identity/impl/UserResourceImpl.java
Patch:
@@ -62,7 +62,8 @@ public UserProfileDto getUserProfile(UriInfo context) {
     URI baseUri = baseUriBuilder.build();
     URI profileUri = baseUriBuilder.path("/profile").build();
     
-    user.addReflexiveLink(baseUri, HttpMethod.GET, "self");    
+    user.addReflexiveLink(profileUri, HttpMethod.GET, "self");    
+    
     if(isAuthorized(DELETE, USER, resourceId)) {
       user.addReflexiveLink(baseUri, HttpMethod.DELETE, "delete");
     }    

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractUserRestServiceInteractionTest.java
Patch:
@@ -113,7 +113,7 @@ public void testGetSingleUserProfileLinksUnauthenticated() {
         .body("lastName", equalTo(MockProvider.EXAMPLE_USER_LAST_NAME))
         .body("email", equalTo(MockProvider.EXAMPLE_USER_EMAIL))
         
-        .body("links[0].href", equalTo(fullUserUrl))
+        .body("links[0].href", equalTo(fullUserUrl+"/profile"))
         .body("links[0].method", equalTo(HttpMethod.GET))
         .body("links[0].rel", equalTo("self"))
         
@@ -156,7 +156,7 @@ public void testGetSingleUserProfileLinksUnauthorized() {
         .body("lastName", equalTo(MockProvider.EXAMPLE_USER_LAST_NAME))
         .body("email", equalTo(MockProvider.EXAMPLE_USER_EMAIL))
         
-        .body("links[0].href", equalTo(fullUserUrl))
+        .body("links[0].href", equalTo(fullUserUrl+"/profile"))
         .body("links[0].method", equalTo(HttpMethod.GET))
         .body("links[0].rel", equalTo("self"))
         
@@ -195,7 +195,7 @@ public void testGetSingleUserProfileLinksDeleteAuthorized() {
         .body("lastName", equalTo(MockProvider.EXAMPLE_USER_LAST_NAME))
         .body("email", equalTo(MockProvider.EXAMPLE_USER_EMAIL))
         
-        .body("links[0].href", equalTo(fullUserUrl))
+        .body("links[0].href", equalTo(fullUserUrl+"/profile"))
         .body("links[0].method", equalTo(HttpMethod.GET))
         .body("links[0].rel", equalTo("self"))
         

File: qa/integration-tests-webapps/src/test/java/org/camunda/bpm/cockpit/test/DashboardIT.java
Patch:
@@ -31,7 +31,7 @@ public void before() throws Exception {
 
     testUtil = new TestUtil(testProperties);
 
-    testUtil.createUser("admin", "admin", "Mr.", "Admin");
+    testUtil.createInitialUser("admin", "admin", "Mr.", "Admin");
   }
 
   @Test

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/ErrorEndEventActivityBehavior.java
Patch:
@@ -29,7 +29,7 @@ public ErrorEndEventActivityBehavior(String errorCode) {
   }
   
   public void execute(ActivityExecution execution) throws Exception {    
-    ErrorPropagation.propagateError(errorCode, execution);    
+    ErrorPropagation.propagateError(errorCode, null, execution);    
   }
 
   public String getErrorCode() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/helper/ClassDelegate.java
Patch:
@@ -107,6 +107,8 @@ public void execute(ActivityExecution execution) throws Exception {
       activityBehaviorInstance.execute(execution);
     } catch (BpmnError error) {
       ErrorPropagation.propagateError(error, execution);
+    } catch (Exception e) {
+      ErrorPropagation.propagateThrowable(e, execution);
     }
   }
 

File: webapps/camunda/webapp/src/main/java/org/camunda/bpm/webapp/impl/engine/EngineRestApplication.java
Patch:
@@ -35,12 +35,14 @@ public class EngineRestApplication extends Application {
   public Set<Class<?>> getClasses() {
     Set<Class<?>> classes = new HashSet<Class<?>>();
 
+    // only provide named process engine access.
     classes.add(ProcessEngineRestServiceImpl.class);
 
     // mandatory
     classes.add(JacksonConfigurator.class);
     classes.add(JacksonJsonProvider.class);
     classes.add(RestExceptionHandler.class);
+    
     classes.add(ProcessEngineExceptionHandler.class);
     classes.add(ExceptionHandler.class);
     

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/exception/ExceptionHandler.java
Patch:
@@ -37,7 +37,7 @@ public class ExceptionHandler implements ExceptionMapper<Exception> {
 
   @Override
   public Response toResponse(Exception exception) {
-    ExceptionDto dto = ExceptionDto.fromException(exception, true);
+    ExceptionDto dto = ExceptionDto.fromException(exception);
 
     LOGGER.log(Level.WARNING, getStackTrace(exception));
     

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/exception/RestExceptionHandler.java
Patch:
@@ -26,7 +26,7 @@ public class RestExceptionHandler implements ExceptionMapper<RestException> {
 
   @Override
   public Response toResponse(RestException exception) {
-    ExceptionDto dto = ExceptionDto.fromException(exception, true);
+    ExceptionDto dto = ExceptionDto.fromException(exception);
 
     LOGGER.log(Level.WARNING, getStackTrace(exception));
     

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractGroupRestServiceInteractionTest.java
Patch:
@@ -25,6 +25,7 @@
 import javax.ws.rs.core.Response.Status;
 
 import org.camunda.bpm.engine.IdentityService;
+import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.identity.Group;
 import org.camunda.bpm.engine.identity.GroupQuery;
 import org.camunda.bpm.engine.rest.dto.identity.GroupDto;
@@ -161,12 +162,11 @@ public void testGroupCreate() {
   public void testGroupCreateExistingFails() {
     Group newGroup = MockProvider.createMockGroup();    
     when(identityServiceMock.newGroup(MockProvider.EXAMPLE_GROUP_ID)).thenReturn(newGroup);
-    doThrow(new RuntimeException("")).when(identityServiceMock).saveGroup(newGroup);
+    doThrow(new ProcessEngineException("")).when(identityServiceMock).saveGroup(newGroup);
     
     given().body(GroupDto.fromGroup(newGroup)).contentType(ContentType.JSON)
       .then().expect().statusCode(Status.INTERNAL_SERVER_ERROR.getStatusCode()).contentType(ContentType.JSON)
-      .body("type", equalTo(InvalidRequestException.class.getSimpleName()))
-      .body("message", equalTo("Exception while saving new group "))
+      .body("type", equalTo(ProcessEngineException.class.getSimpleName()))
       .when().post(GROUP_CREATE_URL);
     
     verify(identityServiceMock).newGroup(MockProvider.EXAMPLE_GROUP_ID);

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractUserRestServiceInteractionTest.java
Patch:
@@ -25,6 +25,7 @@
 import javax.ws.rs.core.Response.Status;
 
 import org.camunda.bpm.engine.IdentityService;
+import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.identity.User;
 import org.camunda.bpm.engine.identity.UserQuery;
 import org.camunda.bpm.engine.rest.dto.identity.UserCredentialsDto;
@@ -167,16 +168,15 @@ public void testCreateNewUserWithoutCredentials() {
   public void testUserCreateExistingFails() {
     User newUser = MockProvider.createMockUser();    
     when(identityServiceMock.newUser(MockProvider.EXAMPLE_USER_ID)).thenReturn(newUser);
-    doThrow(new RuntimeException("")).when(identityServiceMock).saveUser(newUser);
+    doThrow(new ProcessEngineException("")).when(identityServiceMock).saveUser(newUser);
     
     UserDto userDto = UserDto.fromUser(newUser, true);
     
     given()
       .body(userDto).contentType(ContentType.JSON)
     .then()
       .statusCode(Status.INTERNAL_SERVER_ERROR.getStatusCode()).contentType(ContentType.JSON)
-      .body("type", equalTo(InvalidRequestException.class.getSimpleName()))
-      .body("message", equalTo("Exception while saving new user: "))
+      .body("type", equalTo(ProcessEngineException.class.getSimpleName()))
     .when()
       .post(USER_CREATE_URL);
     

File: engine/src/main/java/org/camunda/bpm/engine/AuthorizationException.java
Patch:
@@ -32,7 +32,7 @@ public AuthorizationException(String userId, String permissionName, String resou
     super(
         "The user with id '"+userId+ 
         "' does not have '"+permissionName+"' permission " +
-        "on resource ' " + (resourceId != null ? (resourceId+"' of type '") : "" ) + resourceType+"' .");
+        "on resource '" + (resourceId != null ? (resourceId+"' of type '") : "" ) + resourceType+"' .");
     this.resourceType = resourceType;
     this.permissionName = permissionName;    
     this.userId = userId;

File: engine/src/main/java/org/camunda/bpm/engine/authorization/Groups.java
Patch:
@@ -20,4 +20,7 @@
 public interface Groups {
 
   public static final String CAMUNDA_ADMIN = "camunda-admin";
+  public static final String GROUP_TYPE_SYSTEM = "SYSTEM";
+  public static final String GROUP_TYPE_WORKFLOW = "WORKFLOW";
+  
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AddCommentCmd.java
Patch:
@@ -15,7 +15,6 @@
 
 import java.io.Serializable;
 
-import org.camunda.bpm.engine.impl.identity.Authentication;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.persistence.entity.CommentEntity;
@@ -41,7 +40,7 @@ public AddCommentCmd(String taskId, String processInstanceId, String message) {
   }
   
   public Object execute(CommandContext commandContext) {
-    String userId = Authentication.getAuthenticatedUserId();
+    String userId = commandContext.getAuthenticatedUserId();
     CommentEntity comment = new CommentEntity();
     comment.setUserId(userId);
     comment.setType(CommentEntity.TYPE_COMMENT);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AddIdentityLinkCmd.java
Patch:
@@ -95,7 +95,7 @@ public Void execute(CommandContext commandContext) {
 
     CommentManager commentManager = commandContext.getCommentManager();
     if (commentManager.isHistoryEnabled()) {
-      String authenticatedUserId = Authentication.getAuthenticatedUserId();
+      String authenticatedUserId = commandContext.getAuthenticatedUserId();
       CommentEntity comment = new CommentEntity();
       comment.setUserId(authenticatedUserId);
       comment.setType(CommentEntity.TYPE_EVENT);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/CreateAttachmentCmd.java
Patch:
@@ -76,7 +76,7 @@ public Attachment execute(CommandContext commandContext) {
 
     CommentManager commentManager = commandContext.getCommentManager();
     if (commentManager.isHistoryEnabled()) {
-      String userId = Authentication.getAuthenticatedUserId();
+      String userId = commandContext.getAuthenticatedUserId();
       CommentEntity comment = new CommentEntity();
       comment.setUserId(userId);
       comment.setType(CommentEntity.TYPE_EVENT);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeleteAttachmentCmd.java
Patch:
@@ -56,7 +56,7 @@ public Object execute(CommandContext commandContext) {
     if (attachment.getTaskId()!=null) {
       CommentManager commentManager = commandContext.getCommentManager();
       if (commentManager.isHistoryEnabled()) {
-        String authenticatedUserId = Authentication.getAuthenticatedUserId();
+        String authenticatedUserId = commandContext.getAuthenticatedUserId();
         CommentEntity comment = new CommentEntity();
         comment.setUserId(authenticatedUserId);
         comment.setType(CommentEntity.TYPE_EVENT);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeleteIdentityLinkCmd.java
Patch:
@@ -97,7 +97,7 @@ public Void execute(CommandContext commandContext) {
     
     CommentManager commentManager = commandContext.getCommentManager();
     if (commentManager.isHistoryEnabled()) {
-      String authenticatedUserId = Authentication.getAuthenticatedUserId();
+      String authenticatedUserId = commandContext.getAuthenticatedUserId();
       CommentEntity comment = new CommentEntity();
       comment.setUserId(authenticatedUserId);
       comment.setType(CommentEntity.TYPE_EVENT);

File: engine/src/main/java/org/camunda/bpm/engine/impl/el/VariableScopeElResolver.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.Iterator;
 
 import org.camunda.bpm.engine.delegate.VariableScope;
+import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.identity.Authentication;
 import org.camunda.bpm.engine.impl.javax.el.ELContext;
 import org.camunda.bpm.engine.impl.javax.el.ELResolver;
@@ -58,7 +59,7 @@ public Object getValue(ELContext context, Object base, Object property)  {
         return ((TaskEntity) variableScope).getExecution();
       } else if(LOGGED_IN_USER_KEY.equals(property)){
         context.setPropertyResolved(true);
-        return Authentication.getAuthenticatedUserId();
+        return Context.getCommandContext().getAuthenticatedUserId();
       } else {
         if (variableScope.hasVariable(variable)) {
           context.setPropertyResolved(true); // if not set, the next elResolver in the CompositeElResolver will be called

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/HistoricProcessInstanceEntity.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Map;
 
 import org.camunda.bpm.engine.history.HistoricProcessInstance;
-import org.camunda.bpm.engine.impl.identity.Authentication;
+import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.util.ClockUtil;
 
 /**
@@ -44,7 +44,7 @@ public HistoricProcessInstanceEntity(ExecutionEntity processInstance) {
     businessKey = processInstance.getBusinessKey();
     processDefinitionId = processInstance.getProcessDefinitionId();
     startTime = ClockUtil.getCurrentTime();
-    startUserId = Authentication.getAuthenticatedUserId();
+    startUserId = Context.getCommandContext().getAuthenticatedUserId();
     startActivityId = processInstance.getActivityId();
     superProcessInstanceId = processInstance.getSuperExecution() != null ? processInstance.getSuperExecution().getProcessInstanceId() : null;
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ProcessDefinitionEntity.java
Patch:
@@ -104,7 +104,7 @@ public ExecutionEntity createProcessInstance(String businessKey, ActivityImpl in
     
     String initiatorVariableName = (String) getProperty(BpmnParse.PROPERTYNAME_INITIATOR_VARIABLE_NAME);
     if (initiatorVariableName!=null) {
-      String authenticatedUserId = Authentication.getAuthenticatedUserId();
+      String authenticatedUserId = Context.getCommandContext().getAuthenticatedUserId();
       processInstance.setVariable(initiatorVariableName, authenticatedUserId);
     }
     

File: engine/src/main/java/org/camunda/bpm/engine/impl/test/AbstractProcessEngineTestCase.java
Patch:
@@ -316,13 +316,13 @@ protected List<ActivityInstance> getInstancesForActivitiyId(ActivityInstance act
   protected void runAsUser(String userId, List<String> groupIds, Runnable r) {
     try {
       identityService.setAuthenticatedUserId(userId);
-      processEngineConfiguration.setAuthorizationChecksEnabled(true);
+      processEngineConfiguration.setAuthorizationEnabled(true);
       
       r.run();
       
     } finally {
       identityService.setAuthenticatedUserId(null);
-      processEngineConfiguration.setAuthorizationChecksEnabled(false);      
+      processEngineConfiguration.setAuthorizationEnabled(false);      
     }
   }
   

File: engine/src/test/java/org/camunda/bpm/engine/test/el/ExpressionManagerTest.java
Patch:
@@ -60,7 +60,7 @@ public void testExecutionAvailable() {
   public void testAuthenticatedUserIdAvailable() {
     try {
       // Setup authentication
-      Authentication.setAuthenticatedUserId("frederik");
+      identityService.setAuthenticatedUserId("frederik");
       ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("testAuthenticatedUserIdAvailableProcess");
       
       // Check if the variable that has been set in service-task is the authenticated user
@@ -69,7 +69,7 @@ public void testAuthenticatedUserIdAvailable() {
       assertEquals("frederik", value);
     } finally {
       // Cleanup
-      Authentication.setAuthenticatedUserId(null);
+      identityService.clearAuthentication();
     }
   }
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/examples/bpmn/event/error/BoundaryErrorEventTest.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.List;
 import java.util.Map;
 
-import org.camunda.bpm.engine.impl.identity.Authentication;
 import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
 import org.camunda.bpm.engine.task.Task;
 import org.camunda.bpm.engine.test.Deployment;
@@ -32,12 +31,12 @@ protected void setUp() throws Exception {
     super.setUp();
     
     // Normally the UI will do this automatically for us
-    Authentication.setAuthenticatedUserId("kermit");
+    identityService.setAuthenticatedUserId("kermit");
   }
   
   @Override
   protected void tearDown() throws Exception {
-    Authentication.setAuthenticatedUserId(null);
+    identityService.clearAuthentication();
     super.tearDown();
   }
   

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -645,6 +645,7 @@ protected void initSqlSessionFactory() {
           properties.put("bitand1" , DbSqlSessionFactory.databaseSpecificBitAnd1.get(databaseType));
           properties.put("bitand2" , DbSqlSessionFactory.databaseSpecificBitAnd2.get(databaseType));
           properties.put("bitand3" , DbSqlSessionFactory.databaseSpecificBitAnd3.get(databaseType));
+          properties.put("dbSpecificDummyTable" , DbSqlSessionFactory.databaseSpecificDummyTable.get(databaseType));
         }
         XMLConfigBuilder parser = new XMLConfigBuilder(reader,"", properties);
         Configuration configuration = parser.getConfiguration();

File: distro/jbossas71/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/extension/handler/ProcessEngineAdd.java
Patch:
@@ -171,7 +171,7 @@ protected ManagedProcessEngineMetadata transformConfiguration(final OperationCon
     String configuration = model.get(CONFIGURATION).asString();
     boolean isDefault = model.get(DEFAULT).asBoolean();
     
-    Map<String,Object> properties = new HashMap<String, Object>();
+    Map<String, String> properties = new HashMap<String, String>();
     if (model.hasDefined(Element.PROPERTIES.getLocalName())) {
       ModelNode propertiesNode = model.get(Element.PROPERTIES.getLocalName());
       List<Property> propertyList = propertiesNode.asPropertyList();

File: engine/src/main/java/org/camunda/bpm/engine/impl/test/AbstractProcessEngineTestCase.java
Patch:
@@ -57,7 +57,7 @@ public abstract class AbstractProcessEngineTestCase extends PvmTestCase {
 
   static {
     // this ensures that mybatis uses the jdk logging
-    LogFactory.useJdkLogging();
+//    LogFactory.useJdkLogging();
     // with an upgrade of mybatis, this might have to become org.mybatis.generator.logging.LogFactory.forceJavaLogging();
   }
   

File: engine/src/main/java/org/camunda/bpm/engine/identity/Permissions.java
Patch:
@@ -21,7 +21,7 @@
 public enum Permissions implements Permission {
  
   NONE("NONE", 0),
-  ALL("ALL", ~0),
+  ALL("ALL", Integer.MAX_VALUE),
   
   READ("READ", 2),
   UPDATE("UPDATE", 4),

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/runtime/VariableInstanceDto.java
Patch:
@@ -98,9 +98,9 @@ public static VariableInstanceDto fromVariableInstance(VariableInstance variable
     dto.setTaskId(entity.getTaskId());
     dto.setActivityInstanceId(entity.getActivityInstanceId());
     
-    if (!entity.getType().getTypeName().equals(SerializableType.TYPE_NAME)) {
+    if (!entity.getTypeName().equals(SerializableType.TYPE_NAME)) {
       dto.setValue(entity.getValue());
-      dto.setType(entity.getTypeName());
+      dto.setType(entity.getType().getTypeNameForValue(entity.getValue()));
     } else {
       dto.setValue("Cannot deserialize object.");
       dto.setType(entity.getType().getTypeNameForValue(null));

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -88,7 +88,7 @@ public abstract class MockProvider {
   
   // variable instance
   public static final String EXAMPLE_VARIABLE_INSTANCE_NAME = "aVariableInstanceName";
-  public static final String EXAMPLE_VARIABLE_INSTANCE_TYPE = "aVariableInstanceType";
+  public static final String EXAMPLE_VARIABLE_INSTANCE_TYPE = "String";
   public static final String EXAMPLE_VARIABLE_INSTANCE_VALUE = "aVariableInstanceValue";
   public static final String EXAMPLE_VARIABLE_INSTANCE_PROC_INST_ID = "aVariableInstanceProcInstId";
   public static final String EXAMPLE_VARIABLE_INSTANCE_EXECUTION_ID = "aVariableInstanceExecutionId";

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/VariableInstanceEntity.java
Patch:
@@ -278,6 +278,6 @@ public void setActivityInstanceId(String acitivtyInstanceId) {
     this.activityInstanceId = acitivtyInstanceId;
   }
   public String getTypeName() {
-    return (type != null ? type.getTypeNameForValue(getValue()) : null);
+    return (type != null ? type.getTypeName() : null);
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/VariableInstanceEntity.java
Patch:
@@ -278,6 +278,6 @@ public void setActivityInstanceId(String acitivtyInstanceId) {
     this.activityInstanceId = acitivtyInstanceId;
   }
   public String getTypeName() {
-    return (type != null ? type.getTypeName() : null);
+    return (type != null ? type.getTypeNameForValue(getValue()) : null);
   }
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/variable/JPAEntityVariableType.java
Patch:
@@ -79,5 +79,8 @@ public Object getValue(ValueFields valueFields) {
     return null;
   }
 
+  public String getTypeNameForValue(Object value) {
+    return value.getClass().getSimpleName();
+  }
  
 }

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/AddVariablesService.java
Patch:
@@ -21,9 +21,11 @@ public void execute(DelegateExecution execution) throws Exception {
     
     // Start process instance with different types of variables
     Map<String, Object> variables = new HashMap<String, Object>();
-    variables.put("longVar", 928374L);
+    
     variables.put("shortVar", (short) 123);
     variables.put("integerVar", 1234);
+    variables.put("longVar", 928374L);
+       
     variables.put("stringVar", "coca-cola");
     variables.put("dateVar", now);
     variables.put("nullVar", null);

File: webapps/cockpit/cockpit-webapp/src/test/java/org/camunda/bpm/cockpit/impl/web/filter/engine/EnginesFilterTest.java
Patch:
@@ -19,9 +19,9 @@ public void testHTML_FILE_PATTERN() throws Exception {
     Pattern pattern = EnginesFilter.HTML_FILE_PATTERN;
 
     // when
-    Matcher matcher1 = pattern.matcher("/app/");
-    Matcher matcher2 = pattern.matcher("/app/engine1/");
-    Matcher matcher3 = pattern.matcher("/app/engine1/something/asd.html");
+    Matcher matcher1 = pattern.matcher("/app/cockpit/");
+    Matcher matcher2 = pattern.matcher("/app/cockpit/engine1/");
+    Matcher matcher3 = pattern.matcher("/app/cockpit/engine1/something/asd.html");
 
     // then
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -110,6 +110,8 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement("db2", "selectHistoricProcessInstanceByNativeQuery", "selectHistoricProcessInstanceByNativeQuery_mssql_or_db2");
     addDatabaseSpecificStatement("db2", "selectHistoricTaskInstanceByNativeQuery", "selectHistoricTaskInstanceByNativeQuery_mssql_or_db2");
     addDatabaseSpecificStatement("db2", "selectTaskByNativeQuery", "selectTaskByNativeQuery_mssql_or_db2");
+    addDatabaseSpecificStatement("db2", "selectAuthorizationByQueryCriteria", "selectAuthorizationByQueryCriteria_BITAND");
+    addDatabaseSpecificStatement("db2", "selectAuthorizationCountByQueryCriteria", "selectAuthorizationCountByQueryCriteria_BITAND");
     
     // mssql
     databaseSpecificLimitBeforeStatements.put("mssql", "SELECT SUB.* FROM (");

File: webapps/cockpit/cockpit-core/src/main/java/org/camunda/bpm/cockpit/impl/db/QuerySessionFactory.java
Patch:
@@ -56,6 +56,7 @@ public void initFromProcessEngineConfiguration(ProcessEngineConfigurationImpl pr
     initTransactionFactory();
     initTransactionContextFactory();
     initCommandExecutors();
+    initIdentityProviderSessionFactory();
     initSqlSessionFactory();
     initSessionFactories();
   }

File: webapps/tasklist/tasklist/src/main/java/org/camunda/bpm/tasklist/resources/TaskFormResource.java
Patch:
@@ -12,9 +12,9 @@
 import org.camunda.bpm.engine.form.StartFormData;
 import org.camunda.bpm.engine.form.TaskFormData;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
+import org.camunda.bpm.engine.rest.spi.impl.AbstractProcessEngineAware;
 import org.camunda.bpm.engine.task.Task;
 import org.camunda.bpm.tasklist.dto.FormDto;
-import org.camunda.bpm.tasklist.spi.AbstractProcessEngineAware;
 
 /**
  * @author drobisch

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/ProcessInstanceSuspensionTest.java
Patch:
@@ -599,11 +599,11 @@ public void testJobNotExecutedAfterProcessInstanceSuspend() {
     
     // The jobs should not be executed now
     ClockUtil.setCurrentTime(new Date(now.getTime() + (60 * 60 * 1000))); // Timer is set to fire on 5 minutes
-    waitForJobExecutorToProcessAllJobs(1000L);
-    assertEquals(1, managementService.createJobQuery().count());
+    assertEquals(0, managementService.createJobQuery().executable().count());
     
     // Activation of the process instance should now allow for job execution
     runtimeService.activateProcessInstanceById(processInstance.getId());
+    assertEquals(1, managementService.createJobQuery().executable().count());
     waitForJobExecutorToProcessAllJobs(1000L);
     assertEquals(0, managementService.createJobQuery().count());
     assertEquals(0, runtimeService.createProcessInstanceQuery().count());

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -40,7 +40,7 @@
 import org.camunda.bpm.engine.impl.bpmn.behavior.ExclusiveGatewayActivityBehavior;
 import org.camunda.bpm.engine.impl.bpmn.behavior.InclusiveGatewayActivityBehavior;
 import org.camunda.bpm.engine.impl.bpmn.behavior.IntermediateCatchEventActivitiBehaviour;
-import org.camunda.bpm.engine.impl.bpmn.behavior.IntermediateCatchLinkEventActivitiBehaviour;
+import org.camunda.bpm.engine.impl.bpmn.behavior.IntermediateCatchLinkEventActivityBehaviour;
 import org.camunda.bpm.engine.impl.bpmn.behavior.IntermediateThrowCompensationEventActivityBehavior;
 import org.camunda.bpm.engine.impl.bpmn.behavior.IntermediateThrowNoneEventActivityBehavior;
 import org.camunda.bpm.engine.impl.bpmn.behavior.IntermediateThrowSignalEventActivityBehavior;
@@ -1232,7 +1232,7 @@ public ActivityImpl parseIntermediateCatchEvent(Element intermediateEventElement
       parseIntemediateMessageEventDefinition(messageEventDefinition, nestedActivity, isAfterEventBasedGateway);
       
     } else if(linkEventDefinitionElement != null) {
-      nestedActivity.setActivityBehavior(new IntermediateCatchLinkEventActivitiBehaviour());
+      nestedActivity.setActivityBehavior(new IntermediateCatchLinkEventActivityBehaviour());
       parseIntermediateLinkEventCatchBehavior(intermediateEventElement, nestedActivity, linkEventDefinitionElement);
         
     } else {

File: engine/src/main/java/org/camunda/bpm/engine/history/HistoricActivityInstanceQuery.java
Patch:
@@ -24,7 +24,7 @@
 public interface HistoricActivityInstanceQuery extends Query<HistoricActivityInstanceQuery, HistoricActivityInstance>{
 
   /** Only select historic activity instances with the given id (primary key within history tables). */
-  HistoricActivityInstanceQuery activityInstanceId(String processInstanceId);
+  HistoricActivityInstanceQuery activityInstanceId(String activityInstanceId);
   
   /** Only select historic activity instances with the given process instance.
    * {@link ProcessInstance) ids and {@link HistoricProcessInstance} ids match. */

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/CdiBeanResolutionTest.java
Patch:
@@ -91,7 +91,7 @@ public void testResolveBeanFromJobExecutor() {
     runtimeService.startProcessInstanceByKey("testResolveBeanFromJobExecutor");
     Assert.assertEquals(1,runtimeService.createProcessInstanceQuery().count());
     
-    waitForJobExecutorToProcessAllJobs(16000, 500);    
+    waitForJobExecutorToProcessAllJobs(16000);    
     
     Assert.assertEquals(0,runtimeService.createProcessInstanceQuery().count());    
     

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/cdi/CdiDelegateBeanResolutionTest.java
Patch:
@@ -92,7 +92,7 @@ public void testResolveBeanFromJobExecutor() {
     runtimeService.startProcessInstanceByKey("testResolveBeanFromJobExecutor");
     Assert.assertEquals(1,runtimeService.createProcessInstanceQuery().count());
     
-    waitForJobExecutorToProcessAllJobs(16000, 100);    
+    waitForJobExecutorToProcessAllJobs(16000);    
     
     Assert.assertEquals(0,runtimeService.createProcessInstanceQuery().count());    
     

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/classloading/ear/JavaDelegateResolution_ClientAsLibInWebModule.java
Patch:
@@ -87,7 +87,7 @@ public void testResolveClassFromJobExecutor() throws InterruptedException, Syste
     
     Assert.assertEquals(1, runtimeService.createProcessInstanceQuery().count());
     
-    waitForJobExecutorToProcessAllJobs(16000, 100);
+    waitForJobExecutorToProcessAllJobs(16000);
     
     Assert.assertEquals(0, runtimeService.createProcessInstanceQuery().count());
     

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/classloading/war/JavaDelegateResolutionTestWar.java
Patch:
@@ -84,7 +84,7 @@ public void testResolveClassFromJobExecutor() throws InterruptedException, Syste
     
     Assert.assertEquals(1, runtimeService.createProcessInstanceQuery().count());
     
-    waitForJobExecutorToProcessAllJobs(16000, 100);
+    waitForJobExecutorToProcessAllJobs(16000);
     
     Assert.assertEquals(0, runtimeService.createProcessInstanceQuery().count());
     

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/SFSBDelegateTest.java
Patch:
@@ -45,7 +45,7 @@ public void testBeanResolution() {
     
     taskService.complete(taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult().getId());
     
-    waitForJobExecutorToProcessAllJobs(6000, 300);
+    waitForJobExecutorToProcessAllJobs(6000);
     
     Assert.assertEquals(true, runtimeService.getVariable(pi.getId(), SFSBDelegate.class.getName()));
     
@@ -67,7 +67,7 @@ public void testBeanResolutionfromClient() {
     
     taskService.complete(taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult().getId());
     
-    waitForJobExecutorToProcessAllJobs(6000, 300);
+    waitForJobExecutorToProcessAllJobs(6000);
     
     Assert.assertEquals(true, runtimeService.getVariable(pi.getId(), SFSBDelegate.class.getName()));
     
@@ -88,7 +88,7 @@ public void testMultipleInvocations() {
       taskService.complete(taskService.createTaskQuery().processInstanceId(ids[i]).singleResult().getId());
     }
         
-    waitForJobExecutorToProcessAllJobs(60*1000, 300);
+    waitForJobExecutorToProcessAllJobs(60*1000);
     
     for(int i=0; i<instances; i++) {    
       Assert.assertEquals("Incovation=" + i, true, runtimeService.getVariable(ids[i], SFSBDelegate.class.getName()));    

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/SLSBDelegateTest.java
Patch:
@@ -44,7 +44,7 @@ public void testBeanResolution() {
     
     taskService.complete(taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult().getId());
     
-    waitForJobExecutorToProcessAllJobs(6000, 300);
+    waitForJobExecutorToProcessAllJobs(6000);
     
     Assert.assertEquals(true, runtimeService.getVariable(pi.getId(), SLSBDelegate.class.getName()));
     
@@ -65,7 +65,7 @@ public void testBeanResolutionfromClient() {
     
     taskService.complete(taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult().getId());
     
-    waitForJobExecutorToProcessAllJobs(6000, 300);
+    waitForJobExecutorToProcessAllJobs(6000);
     
     Assert.assertEquals(true, runtimeService.getVariable(pi.getId(), SLSBDelegate.class.getName()));
     
@@ -86,7 +86,7 @@ public void testMultipleInvocations() {
       taskService.complete(taskService.createTaskQuery().processInstanceId(ids[i]).singleResult().getId());
     }
         
-    waitForJobExecutorToProcessAllJobs(60*1000, 300);
+    waitForJobExecutorToProcessAllJobs(60*1000);
     
     for(int i=0; i<instances; i++) {    
       Assert.assertEquals("Incovation=" + i, true, runtimeService.getVariable(ids[i], SLSBDelegate.class.getName()));    

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/SingletonBeanDelegateTest.java
Patch:
@@ -45,7 +45,7 @@ public void testBeanResolution() {
     
     taskService.complete(taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult().getId());
     
-    waitForJobExecutorToProcessAllJobs(6000, 300);
+    waitForJobExecutorToProcessAllJobs(6000);
     
     Assert.assertEquals(true, runtimeService.getVariable(pi.getId(), SingletonBeanDelegate.class.getName()));
     
@@ -67,7 +67,7 @@ public void testBeanResolutionfromClient() {
     
     taskService.complete(taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult().getId());
     
-    waitForJobExecutorToProcessAllJobs(6000, 300);
+    waitForJobExecutorToProcessAllJobs(6000);
     
     Assert.assertEquals(true, runtimeService.getVariable(pi.getId(), SingletonBeanDelegate.class.getName()));
     
@@ -88,7 +88,7 @@ public void testMultipleInvocations() {
       taskService.complete(taskService.createTaskQuery().processInstanceId(ids[i]).singleResult().getId());
     }
         
-    waitForJobExecutorToProcessAllJobs(60*1000, 300);
+    waitForJobExecutorToProcessAllJobs(60*1000);
     
     for(int i=0; i<instances; i++) {    
       Assert.assertEquals("Incovation=" + i, true, runtimeService.getVariable(ids[i], SingletonBeanDelegate.class.getName()));    

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/local/LocalSFSBInvocationTest.java
Patch:
@@ -68,7 +68,7 @@ public void testInvokeBean() throws Exception{
     
     taskService.complete(taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult().getId());
     
-    waitForJobExecutorToProcessAllJobs(6000, 300);
+    waitForJobExecutorToProcessAllJobs(6000);
     
     Assert.assertEquals(runtimeService.getVariable(pi.getId(), "result"), true);
     
@@ -89,7 +89,7 @@ public void testMultipleInvocations() {
       taskService.complete(taskService.createTaskQuery().processInstanceId(ids[i]).singleResult().getId());
     }
         
-    waitForJobExecutorToProcessAllJobs(60*1000, 300);
+    waitForJobExecutorToProcessAllJobs(60*1000);
     
     for(int i=0; i<instances; i++) {    
       Assert.assertEquals(runtimeService.getVariable(ids[i], "result"), true);    

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/local/LocalSLSBInvocationTest.java
Patch:
@@ -68,7 +68,7 @@ public void testInvokeBean() throws Exception{
     
     taskService.complete(taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult().getId());
     
-    waitForJobExecutorToProcessAllJobs(6000, 300);
+    waitForJobExecutorToProcessAllJobs(6000);
     
     Assert.assertEquals(runtimeService.getVariable(pi.getId(), "result"), true);
     
@@ -89,7 +89,7 @@ public void testMultipleInvocations() {
       taskService.complete(taskService.createTaskQuery().processInstanceId(ids[i]).singleResult().getId());
     }
         
-    waitForJobExecutorToProcessAllJobs(60*1000, 300);
+    waitForJobExecutorToProcessAllJobs(60*1000);
     
     for(int i=0; i<instances; i++) {    
       Assert.assertEquals(runtimeService.getVariable(ids[i], "result"), true);    

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/local/LocalSingletonBeanInvocationTest.java
Patch:
@@ -69,7 +69,7 @@ public void testInvokeBean() throws Exception{
     
     taskService.complete(taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult().getId());
     
-    waitForJobExecutorToProcessAllJobs(6000, 300);
+    waitForJobExecutorToProcessAllJobs(6000);
     
     Assert.assertEquals(runtimeService.getVariable(pi.getId(), "result"), true);
     
@@ -90,7 +90,7 @@ public void testMultipleInvocations() {
       taskService.complete(taskService.createTaskQuery().processInstanceId(ids[i]).singleResult().getId());
     }
         
-    waitForJobExecutorToProcessAllJobs(60*1000, 300);
+    waitForJobExecutorToProcessAllJobs(60*1000);
     
     for(int i=0; i<instances; i++) {    
       Assert.assertEquals(runtimeService.getVariable(ids[i], "result"), true);    

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/remote/RemoteSFSBInvocationTest.java
Patch:
@@ -70,7 +70,7 @@ public void testInvokeBean() throws Exception{
     
     taskService.complete(taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult().getId());
     
-    waitForJobExecutorToProcessAllJobs(6000, 300);
+    waitForJobExecutorToProcessAllJobs(6000);
     
     Assert.assertEquals(true, runtimeService.getVariable(pi.getId(), "result"));
     
@@ -91,7 +91,7 @@ public void testMultipleInvocations() {
       taskService.complete(taskService.createTaskQuery().processInstanceId(ids[i]).singleResult().getId());
     }
         
-    waitForJobExecutorToProcessAllJobs(60*1000, 300);
+    waitForJobExecutorToProcessAllJobs(60*1000);
     
     for(int i=0; i<instances; i++) {    
       Assert.assertEquals("Incovation=" + i, true, runtimeService.getVariable(ids[i], "result"));    

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/remote/RemoteSLSBInvocationTest.java
Patch:
@@ -69,7 +69,7 @@ public void testInvokeBean() throws Exception{
     
     taskService.complete(taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult().getId());
     
-    waitForJobExecutorToProcessAllJobs(6000, 300);
+    waitForJobExecutorToProcessAllJobs(6000);
     
     Assert.assertEquals(true, runtimeService.getVariable(pi.getId(), "result"));
     
@@ -90,7 +90,7 @@ public void testMultipleInvocations() {
       taskService.complete(taskService.createTaskQuery().processInstanceId(ids[i]).singleResult().getId());
     }
         
-    waitForJobExecutorToProcessAllJobs(60*1000, 300);
+    waitForJobExecutorToProcessAllJobs(60*1000);
     
     for(int i=0; i<instances; i++) {    
       Assert.assertEquals("Incovation=" + i, true, runtimeService.getVariable(ids[i], "result"));    

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/remote/RemoteSingletonBeanInvocationTest.java
Patch:
@@ -70,7 +70,7 @@ public void testInvokeBean() throws Exception{
     
     taskService.complete(taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult().getId());
     
-    waitForJobExecutorToProcessAllJobs(6000, 300);
+    waitForJobExecutorToProcessAllJobs(6000);
     
     Assert.assertEquals(true, runtimeService.getVariable(pi.getId(), "result"));
     
@@ -91,7 +91,7 @@ public void testMultipleInvocations() {
       taskService.complete(taskService.createTaskQuery().processInstanceId(ids[i]).singleResult().getId());
     }
         
-    waitForJobExecutorToProcessAllJobs(60*1000, 300);
+    waitForJobExecutorToProcessAllJobs(60*1000);
     
     for(int i=0; i<instances; i++) {    
       Assert.assertEquals("Incovation=" + i, true, runtimeService.getVariable(ids[i], "result"));    

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/request/JobExecutorRequestContextLocalInvocationTest.java
Patch:
@@ -79,7 +79,7 @@ public void testRequestContextPropagationEjbLocal() throws Exception{
       
     ProcessInstance pi = runtimeService.startProcessInstanceByKey("testContextPropagationEjbLocal");    
     
-    waitForJobExecutorToProcessAllJobs(6000, 100);
+    waitForJobExecutorToProcessAllJobs(6000);
     
     Object variable = runtimeService.getVariable(pi.getId(), "invocationCounter");
     // -> the same bean instance was invoked 2 times!
@@ -90,7 +90,7 @@ public void testRequestContextPropagationEjbLocal() throws Exception{
       .singleResult();
     taskService.complete(task.getId());
     
-    waitForJobExecutorToProcessAllJobs(6000, 100);
+    waitForJobExecutorToProcessAllJobs(6000);
     
     variable = runtimeService.getVariable(pi.getId(), "invocationCounter");
     // now it's '1' again! -> new instance of the bean

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/ejb/request/JobExecutorRequestContextRemoteInvocationTest.java
Patch:
@@ -62,7 +62,7 @@ public void testRequestContextPropagationEjbRemote() {
       
     ProcessInstance pi = runtimeService.startProcessInstanceByKey("testContextPropagationEjbRemote");    
     
-    waitForJobExecutorToProcessAllJobs(6000, 100);
+    waitForJobExecutorToProcessAllJobs(6000);
     
     Object variable = runtimeService.getVariable(pi.getId(), "invocationCounter");
     Assert.assertEquals(1, variable);
@@ -75,7 +75,7 @@ public void testRequestContextPropagationEjbRemote() {
       .singleResult();
     taskService.complete(task.getId());
     
-    waitForJobExecutorToProcessAllJobs(6000, 100);
+    waitForJobExecutorToProcessAllJobs(6000);
     
     variable = runtimeService.getVariable(pi.getId(), "invocationCounter");
     // now it's '1' again! -> new instance of the bean

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spring/SpringExpressionResolvingTest.java
Patch:
@@ -98,7 +98,7 @@ public void testResolveBeanFromJobExecutor() {
     runtimeService.startProcessInstanceByKey("testResolveBeanFromJobExecutor");
     Assert.assertEquals(1,runtimeService.createProcessInstanceQuery().count());
     
-    waitForJobExecutorToProcessAllJobs(16000, 500);    
+    waitForJobExecutorToProcessAllJobs(16000);    
     
     Assert.assertEquals(0,runtimeService.createProcessInstanceQuery().count());    
     

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/spring/SpringPAExpressionResolvingTest.java
Patch:
@@ -93,7 +93,7 @@ public void testResolveBeanFromJobExecutor() {
     runtimeService.startProcessInstanceByKey("testResolveBeanFromJobExecutor");
     Assert.assertEquals(1,runtimeService.createProcessInstanceQuery().count());
     
-    waitForJobExecutorToProcessAllJobs(16000, 500);    
+    waitForJobExecutorToProcessAllJobs(16000);    
     
     Assert.assertEquals(0,runtimeService.createProcessInstanceQuery().count());    
     

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/transactions/AsyncJobExecutionTest.java
Patch:
@@ -36,7 +36,7 @@ public void testAsyncServiceTasks() {
       variables.put("serialnumber", "23");
       runtimeService.startProcessInstanceByKey("configure-router", variables);
       
-      waitForJobExecutorToProcessAllJobs(2000, 200);
+      waitForJobExecutorToProcessAllJobs(2000);
       
     } catch (Exception ex) {
       Assert.fail("Unexpected exception!");

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/transactions/TransactionIntegrationTest.java
Patch:
@@ -122,7 +122,7 @@ public void testAsyncDelegateNewTx() throws Exception {
       throw e;
     }
     
-    waitForJobExecutorToProcessAllJobs(10000, 100);
+    waitForJobExecutorToProcessAllJobs(10000);
     
   }
   

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/AsyncIntermediateThrowSignalEventTest.java
Patch:
@@ -27,7 +27,7 @@ public void testAsyncSignalEvent() throws InterruptedException {
 
     ProcessInstance piThrowSignal = runtimeService.startProcessInstanceByKey("throwSignal");
 
-    waitForJobExecutorToProcessAllJobs(2000, 200);
+    waitForJobExecutorToProcessAllJobs(2000);
 
     assertEquals(1, runtimeService.createExecutionQuery().processInstanceId(piCatchSignal.getProcessInstanceId()).activityId("receiveTask").count());
     assertEquals(1, runtimeService.createExecutionQuery().processInstanceId(piThrowSignal.getProcessInstanceId()).activityId("receiveTask").count());

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/FailedJobCommandTest.java
Patch:
@@ -27,7 +27,7 @@ public void testJobRetriesDecremented() {
     
     Assert.assertEquals(1, managementService.createJobQuery().withRetriesLeft().count());
     
-    waitForJobExecutorToProcessAllJobs(30000, 500);
+    waitForJobExecutorToProcessAllJobs(30000);
     
     // now the retries = 0
     
@@ -44,7 +44,7 @@ public void testJobRetriesDecremented_multiple() {
     
     Assert.assertEquals(50, managementService.createJobQuery().withRetriesLeft().count());
     
-    waitForJobExecutorToProcessAllJobs(180000, 500);
+    waitForJobExecutorToProcessAllJobs(180000);
     
     // now the retries = 0
     

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/FailingJobBoundaryTimerWithDelegateVariablesTest.java
Patch:
@@ -66,7 +66,9 @@ public void testFailingJobBoundaryTimerWithDelegateVariables() throws Interrupte
     assertEquals(1, runtimeService.createExecutionQuery().processInstanceId(pi.getProcessInstanceId()).activityId("usertask1").count());
     assertEquals(2, runtimeService.createExecutionQuery().processInstanceId(pi.getProcessInstanceId()).count());
     
-    waitForJobExecutorToProcessAllJobs(21000, 5000);
+    assertEquals(1, managementService.createJobQuery().executable().count()); 
+    
+    waitForJobExecutorToProcessAllJobs(21000);
 
     assertEquals(0, managementService.createJobQuery().executable().count()); // should be 0, because it has failed 3 times
     assertEquals(1, managementService.createJobQuery().withException().count()); // should be 1, because job failed!

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/SignalEventCatchBoundaryWithVariablesTest.java
Patch:
@@ -54,7 +54,7 @@ public void testSignalCatchBoundaryWithVariables() throws InterruptedException {
     variables2.put("signalProcessInstanceId", piCatchSignal.getProcessInstanceId());
     ProcessInstance piThrowSignal = runtimeService.startProcessInstanceByKey("throwSignal", variables2);
 
-    waitForJobExecutorToProcessAllJobs(2000, 200);
+    waitForJobExecutorToProcessAllJobs(2000);
 
     assertEquals(1, runtimeService.createExecutionQuery().processInstanceId(piCatchSignal.getProcessInstanceId()).activityId("receiveTask").count());
     assertEquals(1, runtimeService.createExecutionQuery().processInstanceId(piThrowSignal.getProcessInstanceId()).activityId("receiveTask").count());

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/TimerExecutionTest.java
Patch:
@@ -53,7 +53,7 @@ public void testProcessExecution() throws Exception {
       managementService.createJobQuery().duedateHigherThen(new Date()).list();
     }
     
-    waitForJobExecutorToProcessAllJobs(10000, 1500);
+    waitForJobExecutorToProcessAllJobs(10000);
     
     List<ProcessInstance> finallyRunningInstances = runtimeService.createProcessInstanceQuery().processInstanceId(instance.getId()).list();
     Assert.assertEquals(0, finallyRunningInstances.size());

File: distro/jbossas71/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/service/MscManagedProcessEngineController.java
Patch:
@@ -145,6 +145,8 @@ protected void startProcessEngine() {
     // set auto schema update
     if(processEngineMetadata.isAutoSchemaUpdate()) {
       processEngineConfiguration.setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);
+    } else {
+      processEngineConfiguration.setDatabaseSchemaUpdate("off");
     }
 
     // set db table prefix

File: qa/integration-tests-webapps/src/test/java/org/camunda/bpm/cycle/test/TestCycleRoundtripIT.java
Patch:
@@ -66,7 +66,8 @@ public TestCycleRoundtripIT(ConnectorConfiguration connectorConfiguration, Conne
   }
 
   @Parameters
-  public static List<Object[]> data(TestProperties testProperties) throws IOException, SVNException {
+  public static List<Object[]> data() throws IOException, SVNException {
+    TestProperties testProperties = new TestProperties(48080);
     ConnectorConfiguration vfsConnectorConfiguration = new ConnectorConfiguration();
     vfsConnectorConfiguration.setConnectorName("FileSystemConnector");
     vfsConnectorConfiguration.setName("FileSystemConnector");

File: webapps/cockpit/cockpit-webapp/src/main/java/org/camunda/bpm/cockpit/plugin/base/query/parameter/ProcessInstanceQueryParameter.java
Patch:
@@ -18,7 +18,7 @@
 public class ProcessInstanceQueryParameter extends QueryParameters<ProcessInstanceDto> {
 
   protected String processDefinitionId;
-  protected String orderBy = "HISTORY.START_TIME_ desc";
+  protected String orderBy = "START_TIME_ desc";
   
   public ProcessInstanceQueryParameter() {
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/CallActivityBehavior.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.List;
 
 import org.camunda.bpm.engine.ProcessEngineException;
+import org.camunda.bpm.engine.SuspendedEntityInteractionException;
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.Expression;
 import org.camunda.bpm.engine.impl.bpmn.data.AbstractDataAssociation;
@@ -26,7 +27,6 @@
 import org.camunda.bpm.engine.impl.pvm.delegate.ActivityExecution;
 import org.camunda.bpm.engine.impl.pvm.delegate.SubProcessActivityBehavior;
 import org.camunda.bpm.engine.impl.pvm.process.ProcessDefinitionImpl;
-import org.camunda.bpm.engine.impl.pvm.runtime.InterpretableExecution;
 
 
 /**
@@ -115,7 +115,7 @@ public void completed(ActivityExecution execution) throws Exception {
 
   protected void ensureExecutionNotSuspended(ActivityExecution execution) {
     if (((ExecutionEntity) execution).isSuspended()) {
-      throw new ProcessEngineException("Parent execution " + execution + " is suspended.");
+      throw new SuspendedEntityInteractionException("Parent execution " + execution + " is suspended.");
     }
   }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/MultiInstanceActivityBehavior.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.logging.Logger;
 
 import org.camunda.bpm.engine.ProcessEngineException;
+import org.camunda.bpm.engine.SuspendedEntityInteractionException;
 import org.camunda.bpm.engine.delegate.BpmnError;
 import org.camunda.bpm.engine.delegate.DelegateExecution;
 import org.camunda.bpm.engine.delegate.ExecutionListener;
@@ -142,7 +143,7 @@ public void completed(ActivityExecution execution) throws Exception {
   
   protected void ensureExecutionNotSuspended(ActivityExecution execution) {
     if (((ExecutionEntity) execution).isSuspended()) {
-      throw new ProcessEngineException("Parent execution " + execution + " is suspended.");
+      throw new SuspendedEntityInteractionException("Parent execution " + execution + " is suspended.");
     }
   }
   

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/ParallelMultiInstanceBehavior.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.List;
 import java.util.logging.Level;
 
-import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 import org.camunda.bpm.engine.impl.pvm.delegate.ActivityBehavior;
 import org.camunda.bpm.engine.impl.pvm.delegate.ActivityExecution;

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/NeedsActiveExecutionCmd.java
Patch:
@@ -15,6 +15,7 @@
 import java.io.Serializable;
 
 import org.camunda.bpm.engine.ProcessEngineException;
+import org.camunda.bpm.engine.SuspendedEntityInteractionException;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
@@ -46,7 +47,7 @@ public T execute(CommandContext commandContext) {
     }
     
     if (execution.isSuspended()) {
-      throw new ProcessEngineException(getSuspendedExceptionMessage());
+      throw new SuspendedEntityInteractionException(getSuspendedExceptionMessage());
     }
     
     return execute(commandContext, execution);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/NeedsActiveProcessDefinitionCmd.java
Patch:
@@ -15,6 +15,7 @@
 import java.io.Serializable;
 
 import org.camunda.bpm.engine.ProcessEngineException;
+import org.camunda.bpm.engine.SuspendedEntityInteractionException;
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
@@ -45,7 +46,7 @@ public T execute(CommandContext commandContext) {
     }
     
     if (processDefinition.isSuspended()) {
-      throw new ProcessEngineException("Cannot execute operation because process definition '" 
+      throw new SuspendedEntityInteractionException("Cannot execute operation because process definition '" 
               + processDefinition.getName() + "' (id=" + processDefinition.getId() + ") is supended");
     }
     

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/NeedsActiveTaskCmd.java
Patch:
@@ -15,6 +15,7 @@
 import java.io.Serializable;
 
 import org.camunda.bpm.engine.ProcessEngineException;
+import org.camunda.bpm.engine.SuspendedEntityInteractionException;
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
@@ -52,7 +53,7 @@ public T execute(CommandContext commandContext) {
     }
     
     if (task.isSuspended()) {
-      throw new ProcessEngineException(getSuspendedTaskException());
+      throw new SuspendedEntityInteractionException(getSuspendedTaskException());
     }
     
     return execute(commandContext, task);

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/SignalEventReceivedCmd.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.Map;
 
 import org.camunda.bpm.engine.ProcessEngineException;
+import org.camunda.bpm.engine.SuspendedEntityInteractionException;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
@@ -56,7 +57,7 @@ public Void execute(CommandContext commandContext) {
       }
       
       if (execution.isSuspended()) {
-        throw new ProcessEngineException("Cannot throw signal event '" + eventName 
+        throw new SuspendedEntityInteractionException("Cannot throw signal event '" + eventName 
                 + "' because execution '" + executionId + "' is suspended");
       }
       

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/StartProcessInstanceCmd.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.Map;
 
 import org.camunda.bpm.engine.ProcessEngineException;
+import org.camunda.bpm.engine.SuspendedEntityInteractionException;
 import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
@@ -67,7 +68,7 @@ public ProcessInstance execute(CommandContext commandContext) {
     
     // Do not start process a process instance if the process definition is suspended
     if (processDefinition.isSuspended()) {
-      throw new ProcessEngineException("Cannot start process instance. Process definition " 
+      throw new SuspendedEntityInteractionException("Cannot start process instance. Process definition " 
               + processDefinition.getName() + " (id = " + processDefinition.getId() + ") is suspended");
     }
 

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/ParallelMultiInstanceBehavior.java
Patch:
@@ -121,6 +121,7 @@ public void leave(ActivityExecution execution) {
     
     List<ActivityExecution> joinedExecutions = executionEntity.findInactiveConcurrentExecutions(execution.getActivity());
     if (joinedExecutions.size() == nrOfInstances || completionConditionSatisfied(execution)) {
+      ensureExecutionNotSuspended(execution);
       
       execution.getParent().getParent().setActivityInstanceId(execution.getActivityInstanceId());      
       

File: engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/SequentialMultiInstanceBehavior.java
Patch:
@@ -61,6 +61,7 @@ public void leave(ActivityExecution execution) {
     logLoopDetails(execution, "instance completed", loopCounter, nrOfCompletedInstances, nrOfActiveInstances, nrOfInstances);
     
     if (loopCounter == nrOfInstances || completionConditionSatisfied(execution)) {
+      ensureExecutionNotSuspended(execution);
       super.leave(execution);
     } else {      
       try {

File: engine/src/main/java/org/camunda/bpm/engine/impl/interceptor/CommandContext.java
Patch:
@@ -34,6 +34,7 @@
 import org.camunda.bpm.engine.impl.persistence.entity.CommentManager;
 import org.camunda.bpm.engine.impl.persistence.entity.DeploymentManager;
 import org.camunda.bpm.engine.impl.persistence.entity.EventSubscriptionManager;
+import org.camunda.bpm.engine.impl.persistence.entity.ExecutionEntity;
 import org.camunda.bpm.engine.impl.persistence.entity.ExecutionManager;
 import org.camunda.bpm.engine.impl.persistence.entity.GroupManager;
 import org.camunda.bpm.engine.impl.persistence.entity.HistoricActivityInstanceManager;
@@ -121,7 +122,7 @@ public Void call() throws Exception {
     }   
     
   }
-  
+
   protected ProcessApplicationReference getTargetProcessApplication(InterpretableExecution execution) {
     
     String deploymentId = execution.getProcessDefinition().getDeploymentId();

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/AbstractSetProcessDefinitionStateCmd.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.impl.ProcessDefinitionQueryImpl;
-import org.camunda.bpm.engine.impl.context.Context;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 import org.camunda.bpm.engine.impl.interceptor.CommandContext;
 import org.camunda.bpm.engine.impl.jobexecutor.JobHandler;

File: webapps/cockpit/cockpit-webapp/src/main/java/org/camunda/bpm/cockpit/impl/web/filter/engine/EnginesFilter.java
Patch:
@@ -8,7 +8,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.camunda.bpm.BpmPlatform;
+import org.camunda.bpm.cockpit.Cockpit;
 import org.camunda.bpm.cockpit.impl.web.filter.AbstractTemplateFilter;
 
 /**
@@ -55,7 +55,7 @@ protected void applyFilter(HttpServletRequest request, HttpServletResponse respo
   }
 
   protected String getDefaultEngineName() {
-    return BpmPlatform.getDefaultProcessEngine().getName();
+    return Cockpit.getRuntimeDelegate().getDefaultProcessEngine().getName();
   }
 
   protected void serveIndexPage(String engineName, HttpServletRequest request, HttpServletResponse response) throws IOException {

File: engine/src/main/java/org/camunda/bpm/application/AbstractProcessApplication.java
Patch:
@@ -39,7 +39,7 @@ public abstract class AbstractProcessApplication implements ProcessApplicationIn
               
   // deployment /////////////////////////////////////////////////////
 
-  public final void deploy() {
+  public void deploy() {
     if(isDeployed) {
       LOGGER.warning("Calling deploy() on process application that is already deployed.");      
     } else {      
@@ -49,7 +49,7 @@ public final void deploy() {
     }
   }
 
-  public final void undeploy() {
+  public void undeploy() {
     if(!isDeployed) {
       LOGGER.fine("Calling undeploy() on process application that is already undeployed.");
     } else {

File: engine/src/main/java/org/camunda/bpm/engine/impl/event/CompensationEventHandler.java
Patch:
@@ -53,6 +53,8 @@ public void handleEvent(EventSubscriptionEntity eventSubscription, Object payloa
         ||!(Boolean)compensationHandler.getProperty(BpmnParse.PROPERTYNAME_IS_FOR_COMPENSATION))
             && compensationHandler.isScope()) {      
    
+      // activate execution
+      compensatingExecution.setActive(true);
       // descend into scope:
       List<CompensateEventSubscriptionEntity> eventsForThisScope = compensatingExecution.getCompensateEventSubscriptions();      
       ScopeUtil.throwCompensationEvent(eventsForThisScope, compensatingExecution, false);

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/exception/ExceptionHandler.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;
 import javax.ws.rs.ext.ExceptionMapper;
 import javax.ws.rs.ext.Provider;
@@ -40,7 +41,7 @@ public Response toResponse(Exception exception) {
 
     LOGGER.log(Level.WARNING, getStackTrace(exception));
     
-    return Response.serverError().entity(dto).build();
+    return Response.serverError().entity(dto).type(MediaType.APPLICATION_JSON_TYPE).build();
   }
   
   protected String getStackTrace(Throwable aThrowable) {

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/exception/ProcessEngineExceptionHandler.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;
 import javax.ws.rs.ext.ExceptionMapper;
 import javax.ws.rs.ext.Provider;
@@ -41,7 +42,7 @@ public Response toResponse(ProcessEngineException exception) {
 
     LOGGER.log(Level.WARNING, getStackTrace(exception));
     
-    return Response.serverError().entity(dto).build();
+    return Response.serverError().entity(dto).type(MediaType.APPLICATION_JSON_TYPE).build();
   }
 
   protected String getStackTrace(Throwable aThrowable) {

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/jersey/ExecutionRestServiceInteractionTest.java
Patch:
@@ -8,7 +8,7 @@
 
 public class ExecutionRestServiceInteractionTest extends AbstractExecutionRestServiceInteractionTest {
 
-protected static EmbeddedServerBootstrap serverBootstrap;  
+  protected static EmbeddedServerBootstrap serverBootstrap;  
   
   @BeforeClass
   public static void setUpEmbeddedRuntime() {

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/sub/runtime/impl/ProcessInstanceResourceImpl.java
Patch:
@@ -72,7 +72,7 @@ public ActivityInstanceDto getActivityInstanceTree() {
     ActivityInstance activityInstance = null;
     
     try {
-      activityInstance = runtimeService.getProcessInstance(processInstanceId);
+      activityInstance = runtimeService.getActivityInstance(processInstanceId);
     } catch (ProcessEngineException e) {
       throw new InvalidRequestException(Status.INTERNAL_SERVER_ERROR, e, e.getMessage());
     }

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractProcessInstanceRestServiceInteractionTest.java
Patch:
@@ -68,7 +68,7 @@ public void setUpRuntimeData() {
     when(runtimeServiceMock.getVariables(MockProvider.ANOTHER_EXAMPLE_PROCESS_INSTANCE_ID)).thenReturn(EXAMPLE_OBJECT_VARIABLES);
     
     // activity instances
-    when(runtimeServiceMock.getProcessInstance(MockProvider.EXAMPLE_PROCESS_INSTANCE_ID)).thenReturn(EXAMPLE_ACTIVITY_INSTANCE);
+    when(runtimeServiceMock.getActivityInstance(MockProvider.EXAMPLE_PROCESS_INSTANCE_ID)).thenReturn(EXAMPLE_ACTIVITY_INSTANCE);
     
     // runtime service
     when(processEngine.getRuntimeService()).thenReturn(runtimeServiceMock);
@@ -104,7 +104,7 @@ public void testGetActivityInstanceTree() {
   
   @Test
   public void testGetActivityInstanceTreeForNonExistingProcessInstance() {
-    when(runtimeServiceMock.getProcessInstance(anyString())).thenReturn(null);
+    when(runtimeServiceMock.getActivityInstance(anyString())).thenReturn(null);
     
     given().pathParam("id", "aNonExistingProcessInstanceId")
       .then().expect().statusCode(Status.NOT_FOUND.getStatusCode()).contentType(ContentType.JSON)
@@ -115,7 +115,7 @@ public void testGetActivityInstanceTreeForNonExistingProcessInstance() {
   
   @Test
   public void testGetActivityInstanceTreeWithInternalError() {
-    when(runtimeServiceMock.getProcessInstance(anyString())).thenThrow(new ProcessEngineException("expected exception"));
+    when(runtimeServiceMock.getActivityInstance(anyString())).thenThrow(new ProcessEngineException("expected exception"));
     
     given().pathParam("id", "aNonExistingProcessInstanceId")
       .then().expect().statusCode(Status.INTERNAL_SERVER_ERROR.getStatusCode()).contentType(ContentType.JSON)

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/FailedJobCommandTest.java
Patch:
@@ -44,7 +44,7 @@ public void testJobRetriesDecremented_multiple() {
     
     Assert.assertEquals(50, managementService.createJobQuery().withRetriesLeft().count());
     
-    waitForJobExecutorToProcessAllJobs(90000, 500);
+    waitForJobExecutorToProcessAllJobs(180000, 500);
     
     // now the retries = 0
     

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/FailedJobCommandTest.java
Patch:
@@ -44,7 +44,7 @@ public void testJobRetriesDecremented_multiple() {
     
     Assert.assertEquals(50, managementService.createJobQuery().withRetriesLeft().count());
     
-    waitForJobExecutorToProcessAllJobs(30000, 500);
+    waitForJobExecutorToProcessAllJobs(90000, 500);
     
     // now the retries = 0
     

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/FailedJobCommandTest.java
Patch:
@@ -27,7 +27,7 @@ public void testJobRetriesDecremented() {
     
     Assert.assertEquals(1, managementService.createJobQuery().withRetriesLeft().count());
     
-    waitForJobExecutorToProcessAllJobs(6000, 500);
+    waitForJobExecutorToProcessAllJobs(30000, 500);
     
     // now the retries = 0
     

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/ExecutionRestServiceImpl.java
Patch:
@@ -37,7 +37,6 @@ public ExecutionRestServiceImpl(String engineName) {
     super(engineName);
   }
   
-
   @Override
   public ExecutionResource getExecution(String executionId) {
     return new ExecutionResourceImpl(getProcessEngine(), executionId);

File: javaee/jobexecutor-ra/src/main/java/org/camunda/bpm/container/impl/threading/ra/JcaExecutorServiceConnector.java
Patch:
@@ -53,7 +53,7 @@ private void setExecutorService(Object executorService) {
 
   }
 
-  protected ExecutorServiceWrapper executorServiceWrapper;
+  protected ExecutorServiceWrapper executorServiceWrapper = new ExecutorServiceWrapper();
 
   private static final long serialVersionUID = 1L;
 
@@ -95,8 +95,6 @@ public void start(BootstrapContext ctx) throws ResourceAdapterInternalException
       return;
     }
 
-    executorServiceWrapper = new ExecutorServiceWrapper();
-
     // initialize the ExecutorService (CommonJ or JCA, depending on configuration)
     if(isUseCommonJWorkManager) {
       if(commonJWorkManagerName != null & commonJWorkManagerName.length() > 0) {

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DecrementJobRetriesCmd.java
Patch:
@@ -62,7 +62,7 @@ public Object execute(CommandContext commandContext) {
         Context
           .getProcessEngineConfiguration()
           .getIncidentHandler(FailedJobIncidentHandler.INCIDENT_HANDLER_TYPE)
-          .handleIncident(job.getExecutionId(), job.getId());
+          .handleIncident(null, null, job.getExecutionId(), job.getId());
       }
     }
     

File: engine/src/main/java/org/camunda/bpm/engine/impl/incident/IncidentHandler.java
Patch:
@@ -19,8 +19,8 @@ public interface IncidentHandler {
   
   public String getIncidentHandlerType();
   
-  public void handleIncident(String executionId, String configuration);
+  public void handleIncident(String processDefinitionId, String activityId, String executionId, String configuration);
   
-  public void resolveIncident(String executionId, String configuration);
+  public void resolveIncident(String processDefinitionId, String activityId, String executionId, String configuration);
 
 }

File: engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -921,7 +921,7 @@ private void removeIncidents() {
       if (replacedBy!=null) {
         incident.setExecution((ExecutionEntity) replacedBy);
       } else {
-        incident.delete(this);
+        incident.delete();
       }
     }
   }

File: engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DecrementJobRetriesCmd.java
Patch:
@@ -62,7 +62,7 @@ public Object execute(CommandContext commandContext) {
         Context
           .getProcessEngineConfiguration()
           .getIncidentHandler(FailedJobIncidentHandler.INCIDENT_HANDLER_TYPE)
-          .handleIncident(true, job.getExecutionId(), null, null, job.getId());
+          .handleIncident(job.getExecutionId(), job.getId());
       }
     }
     

File: engine/src/main/java/org/camunda/bpm/engine/impl/incident/IncidentHandler.java
Patch:
@@ -19,6 +19,8 @@ public interface IncidentHandler {
   
   public String getIncidentHandlerType();
   
-  public void handleIncident(boolean recursive, String executionId, String causeIncidentId, String rootCauseIncidentId, String configuration);
+  public void handleIncident(String executionId, String configuration);
+  
+  public void resolveIncident(String executionId, String configuration);
 
 }

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/exception/RestExceptionHandler.java
Patch:
@@ -6,6 +6,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;
 import javax.ws.rs.ext.ExceptionMapper;
 import javax.ws.rs.ext.Provider;
@@ -30,9 +31,9 @@ public Response toResponse(RestException exception) {
     LOGGER.log(Level.WARNING, getStackTrace(exception));
     
     if (exception.getStatus() != null) {
-      return Response.status(exception.getStatus()).entity(dto).build();
+      return Response.status(exception.getStatus()).entity(dto).type(MediaType.APPLICATION_JSON_TYPE).build();
     } else {
-      return Response.serverError().entity(dto).build();
+      return Response.serverError().entity(dto).type(MediaType.APPLICATION_JSON_TYPE).build();
     }
   }
   

File: webapps/cockpit/cockpit-webapp/src/test/java/org/camunda/bpm/cockpit/plugin/base/PluginQueryTest.java
Patch:
@@ -26,9 +26,6 @@
  * @author nico.rehwaldt
  */
 public class PluginQueryTest extends AbstractCockpitPluginTest {
-  
-  
-
 
   @Test
   public void testCustomQuery() {

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/event/timer/StartTimerEventTest.java
Patch:
@@ -79,7 +79,7 @@ public void testFixedDateStartTimerEvent() throws Exception {
 
   // FIXME: This test likes to run in an endless loop when invoking the waitForJobExecutorOnCondition method
   @Deployment
-  public void testCycleDateStartTimerEvent() throws Exception {
+  public void FAILING_testCycleDateStartTimerEvent() throws Exception {
     ClockUtil.setCurrentTime(new Date());
 
     // After process start, there should be timer created

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/converter/VariableListConverter.java
Patch:
@@ -15,6 +15,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import javax.ws.rs.core.Response.Status;
+
 import org.camunda.bpm.engine.rest.dto.VariableQueryParameterDto;
 import org.camunda.bpm.engine.rest.exception.InvalidRequestException;
 
@@ -35,7 +37,7 @@ public List<VariableQueryParameterDto> convertQueryParameterToType(String value)
     
     String[] valueTriple = value.split("_");
     if (valueTriple.length != 3) {
-      throw new InvalidRequestException("variable query parameter has to have format KEY_OPERATOR_VALUE.");
+      throw new InvalidRequestException(Status.BAD_REQUEST, "variable query parameter has to have format KEY_OPERATOR_VALUE.");
     }
     queryVariable.setName(valueTriple[0]);
     queryVariable.setOperator(valueTriple[1]);

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/repository/ProcessDefinitionQueryDto.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.List;
 
 import javax.ws.rs.core.MultivaluedMap;
+import javax.ws.rs.core.Response.Status;
 
 import org.camunda.bpm.engine.RepositoryService;
 import org.camunda.bpm.engine.repository.ProcessDefinitionQuery;
@@ -195,7 +196,7 @@ public ProcessDefinitionQuery toQuery(RepositoryService repositoryService) {
     }
     
     if (!sortOptionsValid()) {
-      throw new InvalidRequestException("You may not specify a single sorting parameter.");
+      throw new InvalidRequestException(Status.BAD_REQUEST, "You may not specify a single sorting parameter");
     }
     
     if (sortBy != null) {

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/runtime/ProcessInstanceQueryDto.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.List;
 
 import javax.ws.rs.core.MultivaluedMap;
+import javax.ws.rs.core.Response.Status;
 
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.rest.dto.CamundaQueryParam;
@@ -152,13 +153,13 @@ public ProcessInstanceQuery toQuery(RuntimeService runtimeService) {
         } else if (op.equals(VariableQueryParameterDto.LIKE_OPERATOR_NAME)) {
           query.variableValueLike(variableName, String.valueOf(variableValue));
         } else {
-          throw new InvalidRequestException("You have specified an invalid variable comparator.");
+          throw new InvalidRequestException(Status.BAD_REQUEST, "You have specified an invalid variable comparator");
         }
       }
     }
     
     if (!sortOptionsValid()) {
-      throw new InvalidRequestException("You may not specify a single sorting parameter.");
+      throw new InvalidRequestException(Status.BAD_REQUEST, "You may not specify a single sorting parameter");
     }
     
     if (sortBy != null) {

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/AbstractRestProcessEngineAware.java
Patch:
@@ -12,10 +12,10 @@
  */
 package org.camunda.bpm.engine.rest.impl;
 
-import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.Response.Status;
 
 import org.camunda.bpm.engine.ProcessEngine;
+import org.camunda.bpm.engine.rest.exception.InvalidRequestException;
 import org.camunda.bpm.engine.rest.spi.impl.AbstractProcessEngineAware;
 
 public abstract class AbstractRestProcessEngineAware extends AbstractProcessEngineAware {
@@ -32,7 +32,7 @@ public AbstractRestProcessEngineAware(String engineName) {
   
   protected ProcessEngine getProcessEngine() {
     if (processEngine == null) {
-      throw new WebApplicationException(Status.BAD_REQUEST.getStatusCode());
+      throw new InvalidRequestException(Status.BAD_REQUEST, "No process engine available");
     }
     return processEngine;
   }

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/IdentityRestServiceImpl.java
Patch:
@@ -17,7 +17,6 @@
 import java.util.List;
 import java.util.Set;
 
-import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.Response.Status;
 
 import org.camunda.bpm.engine.IdentityService;
@@ -28,6 +27,7 @@
 import org.camunda.bpm.engine.rest.dto.task.GroupDto;
 import org.camunda.bpm.engine.rest.dto.task.GroupInfoDto;
 import org.camunda.bpm.engine.rest.dto.task.UserDto;
+import org.camunda.bpm.engine.rest.exception.InvalidRequestException;
 
 public class IdentityRestServiceImpl extends AbstractRestProcessEngineAware implements IdentityRestService {
 
@@ -42,7 +42,7 @@ public IdentityRestServiceImpl(String engineName) {
   @Override
   public GroupInfoDto getGroupInfo(String userId) {
     if (userId == null) {
-      throw new WebApplicationException(Status.BAD_REQUEST.getStatusCode());
+      throw new InvalidRequestException(Status.BAD_REQUEST, "No user id was supplied");
     }
     
     IdentityService identityService = getProcessEngine().getIdentityService();

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/spi/impl/AbstractProcessEngineAware.java
Patch:
@@ -15,6 +15,8 @@
 import java.util.Iterator;
 import java.util.ServiceLoader;
 
+import javax.ws.rs.core.Response.Status;
+
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.engine.rest.exception.RestException;
 import org.camunda.bpm.engine.rest.spi.ProcessEngineProvider;
@@ -44,7 +46,7 @@ protected ProcessEngine lookupProcessEngine(String engineName) {
         return provider.getProcessEngine(engineName);
       }
     } else {
-      throw new RestException("Could not find an implementation of the "+ProcessEngineProvider.class+"- SPI");
+      throw new RestException(Status.INTERNAL_SERVER_ERROR, "Could not find an implementation of the "+ProcessEngineProvider.class+"- SPI");
     }
 
   }

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractIdentityRestServiceQueryTest.java
Patch:
@@ -80,7 +80,7 @@ public void testGroupInfoQuery() {
   public void testGroupInfoQueryWithMissingUserParameter() {
     expect().statusCode(Status.BAD_REQUEST.getStatusCode()).contentType(ContentType.JSON)
     .body("type", equalTo(InvalidRequestException.class.getSimpleName()))
-    .body("message", equalTo("userId has to be supplied"))
+    .body("message", equalTo("No user id was supplied"))
     .when().get(TASK_GROUPS_URL);
   }
 }

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractProcessEngineRestServiceTest.java
Patch:
@@ -135,7 +135,7 @@ public void testNonExistingEngineAccess() {
     .then().expect()
       .statusCode(Status.BAD_REQUEST.getStatusCode()).contentType(ContentType.JSON)
       .body("type", equalTo(InvalidRequestException.class.getSimpleName()))
-      .body("message", equalTo(""))
+      .body("message", equalTo("No process engine available"))
     .when().get(PROCESS_DEFINITION_URL);
   }
   

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractProcessInstanceRestServiceInteractionTest.java
Patch:
@@ -108,7 +108,7 @@ public void testGetNonExistingProcessInstance() {
     given().pathParam("id", "aNonExistingInstanceId")
       .then().expect().statusCode(Status.NOT_FOUND.getStatusCode()).contentType(ContentType.JSON)
       .body("type", equalTo(InvalidRequestException.class.getSimpleName()))
-      .body("message", equalTo("TODO: fix me"))
+      .body("message", equalTo("Process instance with id aNonExistingInstanceId does not exist"))
       .when().get(PROCESS_INSTANCE_URL);
   }
 

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractTaskRestServiceQueryTest.java
Patch:
@@ -71,7 +71,7 @@ public void testInvalidDateParameter() {
     given().queryParams("due", "anInvalidDate")
       .expect().statusCode(Status.BAD_REQUEST.getStatusCode()).contentType(ContentType.JSON)
       .body("type", equalTo(InvalidRequestException.class.getSimpleName()))
-      .body("message", equalTo("TODO: fix me"))
+      .body("message", equalTo("Cannot set query parameter 'due' to value 'anInvalidDate'"))
       .when().get(TASK_QUERY_URL);
   }
   
@@ -80,7 +80,7 @@ public void testSortByParameterOnly() {
     given().queryParam("sortBy", "dueDate")
       .then().expect().statusCode(Status.BAD_REQUEST.getStatusCode()).contentType(ContentType.JSON)
       .body("type", equalTo(InvalidRequestException.class.getSimpleName()))
-      .body("message", equalTo("TODO: fix me"))
+      .body("message", equalTo("You may not specify a single sorting parameter"))
       .when().get(TASK_QUERY_URL);
   }
   
@@ -89,7 +89,7 @@ public void testSortOrderParameterOnly() {
     given().queryParam("sortOrder", "asc")
       .then().expect().statusCode(Status.BAD_REQUEST.getStatusCode()).contentType(ContentType.JSON)
       .body("type", equalTo(InvalidRequestException.class.getSimpleName()))
-      .body("message", equalTo("TODO: fix me"))
+      .body("message", equalTo("You may not specify a single sorting parameter"))
       .when().get(TASK_QUERY_URL);
   }
 

File: webapps/cockpit/cockpit-webapp/src/main/java/org/camunda/bpm/cockpit/impl/web/EngineRestApplication.java
Patch:
@@ -6,6 +6,7 @@
 import javax.ws.rs.core.Application;
 
 import org.camunda.bpm.engine.rest.exception.ExceptionHandler;
+import org.camunda.bpm.engine.rest.exception.RestExceptionHandler;
 import org.camunda.bpm.engine.rest.impl.ProcessDefinitionRestServiceImpl;
 import org.camunda.bpm.engine.rest.impl.ProcessInstanceRestServiceImpl;
 import org.camunda.bpm.engine.rest.impl.TaskRestServiceImpl;
@@ -30,6 +31,7 @@ public Set<Class<?>> getClasses() {
     classes.add(JacksonConfigurator.class);
     classes.add(JacksonJsonProvider.class);
     classes.add(ExceptionHandler.class);
+    classes.add(RestExceptionHandler.class);
 
     return classes;
   }

File: webapps/tasklist/tasklist/src/main/java/org/camunda/bpm/tasklist/EngineApiApplication.java
Patch:
@@ -18,6 +18,7 @@
 import javax.ws.rs.core.Application;
 
 import org.camunda.bpm.engine.rest.exception.ExceptionHandler;
+import org.camunda.bpm.engine.rest.exception.RestExceptionHandler;
 import org.camunda.bpm.engine.rest.impl.IdentityRestServiceImpl;
 import org.camunda.bpm.engine.rest.impl.ProcessDefinitionRestServiceImpl;
 import org.camunda.bpm.engine.rest.impl.ProcessInstanceRestServiceImpl;
@@ -38,6 +39,7 @@ public Set<Class<?>> getClasses() {
 
     classes.add(JacksonConfigurator.class);
     classes.add(JacksonJsonProvider.class);
+    classes.add(RestExceptionHandler.class);
     classes.add(ExceptionHandler.class);
     
     return classes;

File: webapps/cockpit/cockpit-core/src/main/java/org/camunda/bpm/cockpit/plugin/spi/CockpitPlugin.java
Patch:
@@ -15,9 +15,6 @@
 import java.util.List;
 import java.util.Set;
 
-import org.camunda.bpm.cockpit.Cockpit;
-import org.camunda.bpm.cockpit.db.QueryService;
-
 /**
  * The service provider interface (SPI) that must be provided by
  * a cockpit plugin.

File: webapps/cockpit/cockpit-core/src/test/java/org/camunda/bpm/cockpit/test/sample/plugin/embedded/EmbeddedPlugin.java
Patch:
@@ -12,10 +12,7 @@
  */
 package org.camunda.bpm.cockpit.test.sample.plugin.embedded;
 
-import java.util.Arrays;
-
 import java.util.HashSet;
-import java.util.List;
 import java.util.Set;
 
 import org.camunda.bpm.cockpit.plugin.spi.impl.AbstractCockpitPlugin;

File: engine/src/main/java/org/camunda/bpm/engine/impl/test/AbstractProcessEngineTestCase.java
Patch:
@@ -230,7 +230,7 @@ public void waitForJobExecutorOnCondition(long maxMillisToWait, long intervalMil
       timer.schedule(task, maxMillisToWait);
       boolean conditionIsViolated = true;
       try {
-        while (conditionIsViolated) {
+        while (conditionIsViolated && !task.isTimeLimitExceeded()) {
           Thread.sleep(intervalMillis);
           conditionIsViolated = !condition.call();
         }

File: webapps/cockpit/cockpit-core/src/test/java/org/camunda/bpm/cockpit/test/plugin/resources/PluginApiTest.java
Patch:
@@ -63,7 +63,7 @@ public void shouldServePluginAsset() throws Exception {
     WebResource appResource = client.resource(contextPath.toURI());
 
     // /api/plugin/:pluginName/static/...
-    ClientResponse result = appResource.path("/api/plugin/test/static/test.txt").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);
+    ClientResponse result = appResource.path("/api/plugin/simple/static/test.txt").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);
 
     assertThat(result.getStatus()).isEqualTo(200);
     assertThat(result.getEntity(String.class)).isEqualTo("FOO BAR");
@@ -75,7 +75,7 @@ public void shouldPublishPluginApi() throws Exception {
 
     WebResource appResource = client.resource(contextPath.toURI());
     // /api/plugin/:pluginName/:engineName/...
-    ClientResponse result = appResource.path("/api/plugin/test/default/test").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);
+    ClientResponse result = appResource.path("/api/plugin/simple/default/test").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);
 
     assertThat(result.getStatus()).isEqualTo(200);
     assertThat(result.getEntity(String.class)).contains("[");

File: webapps/cockpit/cockpit-core/src/test/java/org/camunda/bpm/cockpit/test/sample/TestProcessApplication.java
Patch:
@@ -37,8 +37,6 @@ public void startFirstProcess(ProcessEngine processEngine) {
     variables.put("amount", "30$");
     variables.put("invoiceNumber", "GPFE-23232323");
 
-    System.out.println("Start instance of fox-invoice_en");
     processEngine.getRuntimeService().startProcessInstanceByKey("fox-invoice_en", variables);
   }
-
 }

File: webapps/cockpit/cockpit-core/src/test/java/org/camunda/bpm/cockpit/test/sample/plugin/simple/resources/SimpleResource.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.cockpit.test.sample.plugin.resources;
+package org.camunda.bpm.cockpit.test.sample.plugin.simple.resources;
 
 import java.util.List;
 import javax.ws.rs.GET;
@@ -24,9 +24,9 @@
  *
  * @author nico.rehwaldt
  */
-public class TestResource extends AbstractPluginResource {
+public class SimpleResource extends AbstractPluginResource {
 
-  public TestResource(String engine) {
+  public SimpleResource(String engine) {
     super(engine);
   }
 

File: webapps/cockpit/cockpit-core/src/test/java/org/camunda/bpm/cockpit/test/sample/web/CockpitTestApplication.java
Patch:
@@ -18,7 +18,7 @@
 
 import javax.ws.rs.core.Application;
 
-import org.camunda.bpm.cockpit.plugin.Registry;
+import org.camunda.bpm.cockpit.Cockpit;
 import org.camunda.bpm.cockpit.plugin.spi.CockpitPlugin;
 import org.camunda.bpm.engine.rest.exception.ExceptionHandler;
 import org.camunda.bpm.engine.rest.mapper.JacksonConfigurator;
@@ -45,8 +45,8 @@ public Set<Class<?>> getClasses() {
 
   private void addPluginResourceClasses(Set<Class<?>> classes) {
 
-    List<CockpitPlugin> plugins = Registry.getCockpitPlugins();
-
+    List<CockpitPlugin> plugins = Cockpit.getRuntimeDelegate().getPluginRegistry().getPlugins();
+    
     for (CockpitPlugin plugin : plugins) {
       classes.addAll(plugin.getResourceClasses());
     }

File: webapps/cockpit/cockpit-core/src/test/java/org/camunda/bpm/cockpit/test/sample/web/CockpitTestBootstrap.java
Patch:
@@ -14,7 +14,6 @@
 
 import javax.servlet.ServletContextEvent;
 import javax.servlet.ServletContextListener;
-import javax.servlet.annotation.WebListener;
 
 import org.camunda.bpm.cockpit.impl.DefaultRuntimeDelegate;
 import org.camunda.bpm.cockpit.Cockpit;
@@ -26,7 +25,6 @@
  *
  * @author nico.rehwaldt
  */
-@WebListener
 public class CockpitTestBootstrap implements ServletContextListener {
 
   private ProcessEngine processEngine;

File: webapps/cockpit/cockpit-core/src/test/java/org/camunda/bpm/cockpit/test/util/DeploymentHelper.java
Patch:
@@ -60,6 +60,7 @@ public static File[] getResteasyJaxRs() {
         .artifact("org.jboss.resteasy:resteasy-jaxrs")
           .exclusion("org.apache.httpcomponents:httpclient")
           .exclusion("commons-httpclient:commons-httpclient")
+          .exclusion("commons-io:commons-io")
           .resolveAsFiles();
   }
 

File: distro/jbossas71/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/deployment/processor/ModuleDependencyProcessor.java
Patch:
@@ -78,6 +78,7 @@ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitPro
     
     phaseContext.getServiceTarget()
       .addService(serviceName, processApplicationModuleService)
+      .addDependency(phaseContext.getPhaseServiceName())
       .setInitialMode(Mode.ACTIVE)
       .install();
     

File: distro/jbossas71/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/deployment/processor/ProcessApplicationDeploymentProcessor.java
Patch:
@@ -109,6 +109,8 @@ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitPro
           .setInitialMode(Mode.ACTIVE);
         
         if(paViewServiceName != null) {
+          // add a dependency on the component start service to make sure we are started after the pa-component (Singleton EJB) has started
+          serviceBuilder.addDependency(paComponent.getStartServiceName()); 
           serviceBuilder.addDependency(paViewServiceName, ComponentView.class, deploymentService.getPaComponentViewInjector());
         } else {
           serviceBuilder.addDependency(noViewStartService, ProcessApplicationInterface.class, deploymentService.getNoViewProcessApplication());

File: distro/jbossas71/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/extension/BpmPlatformParser.java
Patch:
@@ -387,6 +387,7 @@ private void writeProcessEnginesContent(final XMLExtendedStreamWriter writer, fi
         writeAttribute(Attribute.DEFAULT, writer, entry);
         writeElement(Element.DATASOURCE, writer, entry);
         writeElement(Element.HISTORY_LEVEL, writer, entry);
+        writeElement(Element.CONFIGURATION, writer, entry);
   
         writeProperties(writer, entry);
   

File: engine/src/main/java/org/camunda/bpm/container/impl/jmx/deployment/StartProcessApplicationServiceStep.java
Patch:
@@ -57,7 +57,7 @@ public void performOperationStep(MBeanDeploymentOperation operationContext) {
     ProcessApplicationInfoImpl processApplicationInfo = createProcessApplicationInfo(processApplication, processArchiveDeploymentMap);
     
     // create service
-    JmxManagedProcessApplication mbean = new JmxManagedProcessApplication(processApplicationInfo);    
+    JmxManagedProcessApplication mbean = new JmxManagedProcessApplication(processApplicationInfo, processApplication.getReference());    
     mbean.setProcessesXmls(new ArrayList<ProcessesXml>(processesXmls.values()));
     mbean.setDeploymentMap(processArchiveDeploymentMap);
     

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/DbSqlSession.java
Patch:
@@ -1088,7 +1088,7 @@ public void performSchemaOperationsProcessEngineBuild() {
       dbSchemaUpdate();
     }
     
-//    checkHistoryLevel();
+    checkHistoryLevel();
   }
 
   public void performSchemaOperationsProcessEngineClose() {

File: engine/src/main/java/org/camunda/bpm/engine/test/ProcessEngineRule.java
Patch:
@@ -94,9 +94,10 @@ public ProcessEngineRule(ProcessEngine processEngine) {
   public void starting(FrameworkMethod method) {
     if (processEngine==null) {
       initializeProcessEngine();
-      initializeServices();
     }
-
+    
+    initializeServices();
+    
     deploymentId = TestHelper.annotationDeploymentSetUp(processEngine, method.getMethod().getDeclaringClass(), method.getName());
   }
   

File: engine/src/test/java/org/camunda/bpm/engine/test/api/repository/diagram/ProcessDiagramRetrievalTest.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.commons.io.FileUtils;
 import org.camunda.bpm.engine.RepositoryService;
 import org.camunda.bpm.engine.impl.bpmn.diagram.ProcessDiagramLayoutFactory;
+import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
 import org.camunda.bpm.engine.repository.DiagramLayout;
 import org.camunda.bpm.engine.repository.DiagramNode;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
@@ -78,7 +79,7 @@ public class ProcessDiagramRetrievalTest {
   private static final boolean OVERWRITE_EXPECTED_HTML_FILES = false;
   
   @Rule
-  public ProcessEngineRule activitiRule = new ProcessEngineRule();
+  public ProcessEngineRule activitiRule = new ProcessEngineRule(PluggableProcessEngineTestCase.getProcessEngine());
 
   /**
    * Provides a list of parameters for

File: engine/src/test/java/org/camunda/bpm/engine/test/db/DatabaseTablePrefixTest.java
Patch:
@@ -35,7 +35,7 @@ public void testPerformDatabaseSchemaOperationCreate() throws Exception{
     // both process engines will be using this datasource.
     PooledDataSource pooledDataSource = new PooledDataSource(ReflectUtil.getClassLoader(), 
             "org.h2.Driver", 
-            "jdbc:h2:mem:activiti-test;DB_CLOSE_DELAY=1000", 
+            "jdbc:h2:mem:DatabaseTablePrefixTest;DB_CLOSE_DELAY=1000", 
             "sa", 
             "" );
           
@@ -49,12 +49,14 @@ public void testPerformDatabaseSchemaOperationCreate() throws Exception{
 
     // configure & build two different process engines, each having a separate table prefix 
     ProcessEngineConfigurationImpl config1 = createCustomProcessEngineConfiguration()
+            .setProcessEngineName("DatabaseTablePrefixTest-engine1")
             .setDataSource(pooledDataSource)
             .setDatabaseSchemaUpdate("NO_CHECK"); // disable auto create/drop schema
     config1.setDatabaseTablePrefix("SCHEMA1.");
     ProcessEngine engine1 = config1.buildProcessEngine();
     
     ProcessEngineConfigurationImpl config2 = createCustomProcessEngineConfiguration()
+            .setProcessEngineName("DatabaseTablePrefixTest-engine2")
             .setDataSource(pooledDataSource)
             .setDatabaseSchemaUpdate("NO_CHECK"); // disable auto create/drop schema        
     config2.setDatabaseTablePrefix("SCHEMA2.");

File: engine/src/test/java/org/camunda/bpm/engine/test/db/IdGeneratorDataSource.java
Patch:
@@ -7,7 +7,7 @@ public class IdGeneratorDataSource extends PooledDataSource {
 
   public IdGeneratorDataSource() {
     setDriver("org.h2.Driver");
-    setUrl("jdbc:h2:mem:activiti");
+    setUrl("jdbc:h2:mem:IdGeneratorDataSourceTest");
     setUsername("sa");
     setPassword("");
     setPoolMaximumActiveConnections(2);

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricVariableInstanceTest.java
Patch:
@@ -40,8 +40,9 @@ public class HistoricVariableInstanceTest extends AbstractProcessEngineTestCase
   @Override
   protected void initializeProcessEngine() {
     processEngineConfiguration = (ProcessEngineConfigurationImpl) ProcessEngineConfiguration.createStandaloneProcessEngineConfiguration()
+    .setProcessEngineName("HistoricVariableInstanceTest-engine")
     .setJdbcDriver("org.h2.Driver")
-    .setJdbcUrl("jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000")
+    .setJdbcUrl("jdbc:h2:mem:HistoricVariableInstanceTest;DB_CLOSE_DELAY=1000")
     .setJdbcUsername("sa")
     .setJdbcPassword("")
     .setDatabaseSchemaUpdate(ProcessEngineConfigurationImpl.DB_SCHEMA_UPDATE_TRUE)

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/initialization/ProcessEnginesTest.java
Patch:
@@ -30,11 +30,9 @@ protected void setUp() throws Exception {
     super.setUp();
     ProcessEngines.destroy();
     ProcessEngines.init();
-    TestHelper.createOrUpdateHistoryLevel(((ProcessEngineImpl) ProcessEngines.getDefaultProcessEngine()).getProcessEngineConfiguration());
   }
   
   protected void tearDown() throws Exception {
-    TestHelper.deleteHistoryLevel(((ProcessEngineImpl) ProcessEngines.getDefaultProcessEngine()).getProcessEngineConfiguration());
     ProcessEngines.destroy();
     super.tearDown();
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/testing/ActivitiRuleJunit4Test.java
Patch:
@@ -18,8 +18,8 @@
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.TaskService;
 import org.camunda.bpm.engine.task.Task;
-import org.camunda.bpm.engine.test.ProcessEngineRule;
 import org.camunda.bpm.engine.test.Deployment;
+import org.camunda.bpm.engine.test.ProcessEngineRule;
 import org.junit.Rule;
 import org.junit.Test;
 

File: javaee/jobexecutor-ra/src/main/java/org/camunda/bpm/container/impl/threading/ra/JcaWorkManagerExecutorService.java
Patch:
@@ -32,8 +32,8 @@ public class JcaWorkManagerExecutorService implements Referenceable, ExecutorSer
   protected final JcaExecutorServiceConnector ra;
   protected WorkManager workManager;
   
-  public JcaWorkManagerExecutorService(JcaExecutorServiceConnector connector) {
-    this.workManager = connector.getWorkManager();
+  public JcaWorkManagerExecutorService(JcaExecutorServiceConnector connector, WorkManager workManager) {
+    this.workManager = workManager;
     this.ra = connector;
   }
   

File: distro/jbossas71/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/deployment/processor/ModuleDependencyProcessor.java
Patch:
@@ -78,6 +78,7 @@ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitPro
     
     phaseContext.getServiceTarget()
       .addService(serviceName, processApplicationModuleService)
+      .addDependency(phaseContext.getPhaseServiceName())
       .setInitialMode(Mode.ACTIVE)
       .install();
     

File: distro/jbossas71/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/deployment/processor/ProcessApplicationDeploymentProcessor.java
Patch:
@@ -108,6 +108,8 @@ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitPro
           .setInitialMode(Mode.ACTIVE);
         
         if(paViewServiceName != null) {
+          // add a dependency on the component start service to make sure we are started after the pa-component (Singleton EJB) has started
+          serviceBuilder.addDependency(paComponent.getStartServiceName()); 
           serviceBuilder.addDependency(paViewServiceName, ComponentView.class, deploymentService.getPaComponentViewInjector());
         } else {
           serviceBuilder.addDependency(noViewStartService, AbstractProcessApplication.class, deploymentService.getNoViewProcessApplication());

File: webapps/cockpit/cockpit-core/src/test/java-tomcat/org/camunda/bpm/cockpit/core/test/util/TestContainer.java
Patch:
@@ -3,8 +3,6 @@
 import org.camunda.bpm.cockpit.test.util.DeploymentHelper;
 import org.jboss.shrinkwrap.api.spec.WebArchive;
 
-
-
 /**
  * Tomcat test container
  *

File: webapps/cockpit/cockpit-core/src/test/java/org/camunda/bpm/cockpit/test/plugin/DeploymentTest.java
Patch:
@@ -12,8 +12,6 @@
  */
 package org.camunda.bpm.cockpit.test.plugin;
 
-import org.camunda.bpm.cockpit.plugin.Registry;
-
 import static org.fest.assertions.Assertions.assertThat;
 
 import org.camunda.bpm.cockpit.Cockpit;

File: engine/src/main/java/org/camunda/bpm/container/impl/jmx/deployment/StartProcessApplicationServiceStep.java
Patch:
@@ -57,7 +57,7 @@ public void performOperationStep(MBeanDeploymentOperation operationContext) {
     ProcessApplicationInfoImpl processApplicationInfo = createProcessApplicationInfo(processApplication, processArchiveDeploymentMap);
     
     // create service
-    JmxManagedProcessApplication mbean = new JmxManagedProcessApplication(processApplicationInfo);    
+    JmxManagedProcessApplication mbean = new JmxManagedProcessApplication(processApplicationInfo, processApplication.getReference());    
     mbean.setProcessesXmls(new ArrayList<ProcessesXml>(processesXmls.values()));
     mbean.setDeploymentMap(processArchiveDeploymentMap);
     

File: distro/jbossas71/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/extension/BpmPlatformParser.java
Patch:
@@ -387,6 +387,7 @@ private void writeProcessEnginesContent(final XMLExtendedStreamWriter writer, fi
         writeAttribute(Attribute.DEFAULT, writer, entry);
         writeElement(Element.DATASOURCE, writer, entry);
         writeElement(Element.HISTORY_LEVEL, writer, entry);
+        writeElement(Element.CONFIGURATION, writer, entry);
   
         writeProperties(writer, entry);
   

File: engine/src/main/java/org/camunda/bpm/engine/test/ProcessEngineRule.java
Patch:
@@ -94,9 +94,10 @@ public ProcessEngineRule(ProcessEngine processEngine) {
   public void starting(FrameworkMethod method) {
     if (processEngine==null) {
       initializeProcessEngine();
-      initializeServices();
     }
-
+    
+    initializeServices();
+    
     deploymentId = TestHelper.annotationDeploymentSetUp(processEngine, method.getMethod().getDeclaringClass(), method.getName());
   }
   

File: engine/src/test/java/org/camunda/bpm/engine/test/api/repository/diagram/ProcessDiagramRetrievalTest.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.commons.io.FileUtils;
 import org.camunda.bpm.engine.RepositoryService;
 import org.camunda.bpm.engine.impl.bpmn.diagram.ProcessDiagramLayoutFactory;
+import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
 import org.camunda.bpm.engine.repository.DiagramLayout;
 import org.camunda.bpm.engine.repository.DiagramNode;
 import org.camunda.bpm.engine.repository.ProcessDefinition;
@@ -78,7 +79,7 @@ public class ProcessDiagramRetrievalTest {
   private static final boolean OVERWRITE_EXPECTED_HTML_FILES = false;
   
   @Rule
-  public ProcessEngineRule activitiRule = new ProcessEngineRule();
+  public ProcessEngineRule activitiRule = new ProcessEngineRule(PluggableProcessEngineTestCase.getProcessEngine());
 
   /**
    * Provides a list of parameters for

File: engine/src/test/java/org/camunda/bpm/engine/test/db/DatabaseHistoryPropertyTest.java
Patch:
@@ -13,13 +13,11 @@
 import org.junit.AfterClass;
 import org.junit.Assert;
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 import org.junit.Test;
 
 /**
  * @author Christian Lipphardt
  */
-@Ignore
 public class DatabaseHistoryPropertyTest {
 
   private static ProcessEngineImpl processEngineImpl;
@@ -143,9 +141,12 @@ private static ProcessEngineImpl createProcessEngineImpl(String databaseSchemaUp
     ProcessEngineImpl processEngine = 
         (ProcessEngineImpl) new CustomStandaloneInMemProcessEngineConfiguration()
                .setExecuteSchemaOperations(executeSchemaOperations)
+               .setProcessEngineName("database-history-test-engine")
                .setDatabaseSchemaUpdate(databaseSchemaUpdate)
                .setHistory(ProcessEngineConfiguration.HISTORY_FULL)
+               .setJdbcUrl("jdbc:h2:mem:DatabaseHistoryPropertyTest")
                .buildProcessEngine();
+    
     return processEngine;
   }
   

File: engine/src/test/java/org/camunda/bpm/engine/test/db/DatabaseTablePrefixTest.java
Patch:
@@ -35,7 +35,7 @@ public void testPerformDatabaseSchemaOperationCreate() throws Exception{
     // both process engines will be using this datasource.
     PooledDataSource pooledDataSource = new PooledDataSource(ReflectUtil.getClassLoader(), 
             "org.h2.Driver", 
-            "jdbc:h2:mem:activiti-test;DB_CLOSE_DELAY=1000", 
+            "jdbc:h2:mem:DatabaseTablePrefixTest;DB_CLOSE_DELAY=1000", 
             "sa", 
             "" );
           
@@ -49,12 +49,14 @@ public void testPerformDatabaseSchemaOperationCreate() throws Exception{
 
     // configure & build two different process engines, each having a separate table prefix 
     ProcessEngineConfigurationImpl config1 = createCustomProcessEngineConfiguration()
+            .setProcessEngineName("DatabaseTablePrefixTest-engine1")
             .setDataSource(pooledDataSource)
             .setDatabaseSchemaUpdate("NO_CHECK"); // disable auto create/drop schema
     config1.setDatabaseTablePrefix("SCHEMA1.");
     ProcessEngine engine1 = config1.buildProcessEngine();
     
     ProcessEngineConfigurationImpl config2 = createCustomProcessEngineConfiguration()
+            .setProcessEngineName("DatabaseTablePrefixTest-engine2")
             .setDataSource(pooledDataSource)
             .setDatabaseSchemaUpdate("NO_CHECK"); // disable auto create/drop schema        
     config2.setDatabaseTablePrefix("SCHEMA2.");

File: engine/src/test/java/org/camunda/bpm/engine/test/db/IdGeneratorDataSource.java
Patch:
@@ -7,7 +7,7 @@ public class IdGeneratorDataSource extends PooledDataSource {
 
   public IdGeneratorDataSource() {
     setDriver("org.h2.Driver");
-    setUrl("jdbc:h2:mem:activiti");
+    setUrl("jdbc:h2:mem:IdGeneratorDataSourceTest");
     setUsername("sa");
     setPassword("");
     setPoolMaximumActiveConnections(2);

File: engine/src/test/java/org/camunda/bpm/engine/test/history/HistoricVariableInstanceTest.java
Patch:
@@ -40,8 +40,9 @@ public class HistoricVariableInstanceTest extends AbstractProcessEngineTestCase
   @Override
   protected void initializeProcessEngine() {
     processEngineConfiguration = (ProcessEngineConfigurationImpl) ProcessEngineConfiguration.createStandaloneProcessEngineConfiguration()
+    .setProcessEngineName("HistoricVariableInstanceTest-engine")
     .setJdbcDriver("org.h2.Driver")
-    .setJdbcUrl("jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000")
+    .setJdbcUrl("jdbc:h2:mem:HistoricVariableInstanceTest;DB_CLOSE_DELAY=1000")
     .setJdbcUsername("sa")
     .setJdbcPassword("")
     .setDatabaseSchemaUpdate(ProcessEngineConfigurationImpl.DB_SCHEMA_UPDATE_TRUE)

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/initialization/ProcessEnginesTest.java
Patch:
@@ -30,11 +30,9 @@ protected void setUp() throws Exception {
     super.setUp();
     ProcessEngines.destroy();
     ProcessEngines.init();
-    TestHelper.createOrUpdateHistoryLevel(((ProcessEngineImpl) ProcessEngines.getDefaultProcessEngine()).getProcessEngineConfiguration());
   }
   
   protected void tearDown() throws Exception {
-    TestHelper.deleteHistoryLevel(((ProcessEngineImpl) ProcessEngines.getDefaultProcessEngine()).getProcessEngineConfiguration());
     ProcessEngines.destroy();
     super.tearDown();
   }

File: engine/src/test/java/org/camunda/bpm/engine/test/standalone/testing/ActivitiRuleJunit4Test.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.camunda.bpm.engine.RuntimeService;
 import org.camunda.bpm.engine.TaskService;
+import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
 import org.camunda.bpm.engine.task.Task;
 import org.camunda.bpm.engine.test.ProcessEngineRule;
 import org.camunda.bpm.engine.test.Deployment;

File: webapps/cockpit/cockpit-core/src/main/java/org/camunda/bpm/cockpit/db/CommandExecutor.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.cockpit.plugin.core.db;
+package org.camunda.bpm.cockpit.db;
 
 import org.camunda.bpm.engine.impl.interceptor.Command;
 

File: webapps/cockpit/cockpit-core/src/main/java/org/camunda/bpm/cockpit/db/QueryParameters.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.cockpit.plugin.core.db;
+package org.camunda.bpm.cockpit.db;
 
 import org.camunda.bpm.engine.impl.db.ListQueryParameterObject;
 

File: webapps/cockpit/cockpit-core/src/main/java/org/camunda/bpm/cockpit/db/QueryService.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.cockpit.plugin.core.db;
+package org.camunda.bpm.cockpit.db;
 
 import java.util.List;
 

File: webapps/cockpit/cockpit-core/src/main/java/org/camunda/bpm/cockpit/impl/db/CommandExecutorImpl.java
Patch:
@@ -10,11 +10,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.cockpit.plugin.core.impl.db;
+package org.camunda.bpm.cockpit.impl.db;
 
 import java.util.List;
 
-import org.camunda.bpm.cockpit.plugin.core.db.CommandExecutor;
+import org.camunda.bpm.cockpit.db.CommandExecutor;
 import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.camunda.bpm.engine.impl.interceptor.Command;
 

File: webapps/cockpit/cockpit-core/src/main/java/org/camunda/bpm/cockpit/impl/db/QuerySessionFactory.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.cockpit.plugin.core.impl.db;
+package org.camunda.bpm.cockpit.impl.db;
 
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;

File: webapps/cockpit/cockpit-core/src/main/java/org/camunda/bpm/cockpit/plugin/Registry.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.cockpit.plugin.core;
+package org.camunda.bpm.cockpit.plugin;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -19,7 +19,7 @@
 import java.util.Map;
 import java.util.ServiceLoader;
 
-import org.camunda.bpm.cockpit.plugin.core.spi.CockpitPlugin;
+import org.camunda.bpm.cockpit.plugin.spi.CockpitPlugin;
 
 /**
  *

File: webapps/cockpit/cockpit-core/src/main/java/org/camunda/bpm/cockpit/plugin/spi/CockpitPlugin.java
Patch:
@@ -10,12 +10,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.cockpit.plugin.core.spi;
+package org.camunda.bpm.cockpit.plugin.spi;
 
 import java.util.List;
 import java.util.Set;
 
-import org.camunda.bpm.cockpit.plugin.core.spi.impl.AbstractCockpitPlugin;
+import org.camunda.bpm.cockpit.plugin.spi.impl.AbstractCockpitPlugin;
 
 /**
  *

File: webapps/cockpit/cockpit-core/src/main/java/org/camunda/bpm/cockpit/plugin/spi/impl/AbstractCockpitPlugin.java
Patch:
@@ -1,10 +1,10 @@
-package org.camunda.bpm.cockpit.plugin.core.spi.impl;
+package org.camunda.bpm.cockpit.plugin.spi.impl;
 
 import java.util.Collections;
 import java.util.List;
 import java.util.Set;
 
-import org.camunda.bpm.cockpit.plugin.core.spi.CockpitPlugin;
+import org.camunda.bpm.cockpit.plugin.spi.CockpitPlugin;
 
 /**
  *

File: webapps/cockpit/cockpit-core/src/test/java/org/camunda/bpm/cockpit/test/sample/TestProcessApplication.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.cockpit.test.pa;
+package org.camunda.bpm.cockpit.test.sample;
 
 import java.util.HashMap;
 import java.util.Map;

File: webapps/cockpit/cockpit-core/src/test/java/org/camunda/bpm/cockpit/test/sample/plugin/resources/TestPluginRootResource.java
Patch:
@@ -10,13 +10,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.cockpit.test.plugin.resources;
+package org.camunda.bpm.cockpit.test.sample.plugin.resources;
 
 import javax.ws.rs.Path;
 import javax.ws.rs.PathParam;
 
-import org.camunda.bpm.cockpit.plugin.core.resource.AbstractPluginRootResource;
-import org.camunda.bpm.cockpit.test.plugin.TestPlugin;
+import org.camunda.bpm.cockpit.plugin.resource.AbstractPluginRootResource;
+import org.camunda.bpm.cockpit.test.sample.plugin.TestPlugin;
 
 /**
  * A test root resource

File: webapps/cockpit/cockpit-core/src/test/java/org/camunda/bpm/cockpit/test/sample/plugin/resources/TestResource.java
Patch:
@@ -10,13 +10,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.cockpit.test.plugin.resources;
+package org.camunda.bpm.cockpit.test.sample.plugin.resources;
 
 import java.util.List;
 import javax.ws.rs.GET;
 
-import org.camunda.bpm.cockpit.plugin.core.db.QueryParameters;
-import org.camunda.bpm.cockpit.plugin.core.resource.AbstractPluginResource;
+import org.camunda.bpm.cockpit.db.QueryParameters;
+import org.camunda.bpm.cockpit.plugin.resource.AbstractPluginResource;
 import org.camunda.bpm.engine.runtime.Execution;
 
 /**

File: webapps/cockpit/cockpit-core/src/test/java/org/camunda/bpm/cockpit/test/sample/web/CockpitTestApplication.java
Patch:
@@ -10,16 +10,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.camunda.bpm.cockpit.plugin.web;
+package org.camunda.bpm.cockpit.test.sample.web;
 
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 
 import javax.ws.rs.core.Application;
 
-import org.camunda.bpm.cockpit.plugin.core.Registry;
-import org.camunda.bpm.cockpit.plugin.core.spi.CockpitPlugin;
+import org.camunda.bpm.cockpit.plugin.Registry;
+import org.camunda.bpm.cockpit.plugin.spi.CockpitPlugin;
 import org.camunda.bpm.engine.rest.exception.ExceptionHandler;
 import org.camunda.bpm.engine.rest.mapper.JacksonConfigurator;
 import org.codehaus.jackson.jaxrs.JacksonJsonProvider;

File: webapps/cockpit/cockpit-plugin/core/src/main/java/org/camunda/bpm/cockpit/plugin/core/impl/db/QuerySessionFactory.java
Patch:
@@ -47,6 +47,9 @@ public void initFromProcessEngineConfiguration(ProcessEngineConfigurationImpl pr
     setDataSource(processEngineConfiguration.getDataSource());
     setDatabaseTablePrefix(processEngineConfiguration.getDatabaseTablePrefix());
 
+    setHistoryLevel(processEngineConfiguration.getHistoryLevel());
+    setHistory(processEngineConfiguration.getHistory());
+
     initDataSource();
     initVariableTypes();
     initCommandContextFactory();

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/DbSqlSession.java
Patch:
@@ -1088,7 +1088,7 @@ public void performSchemaOperationsProcessEngineBuild() {
       dbSchemaUpdate();
     }
     
-//    checkHistoryLevel();
+    checkHistoryLevel();
   }
 
   public void performSchemaOperationsProcessEngineClose() {

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/DbSqlSession.java
Patch:
@@ -1088,7 +1088,7 @@ public void performSchemaOperationsProcessEngineBuild() {
       dbSchemaUpdate();
     }
     
-    checkHistoryLevel();
+//    checkHistoryLevel();
   }
 
   public void performSchemaOperationsProcessEngineClose() {

File: engine/src/test/java/org/camunda/bpm/engine/test/db/DatabaseHistoryPropertyTest.java
Patch:
@@ -13,11 +13,13 @@
 import org.junit.AfterClass;
 import org.junit.Assert;
 import org.junit.BeforeClass;
+import org.junit.Ignore;
 import org.junit.Test;
 
 /**
  * @author Christian Lipphardt
  */
+@Ignore
 public class DatabaseHistoryPropertyTest {
 
   private static ProcessEngineImpl processEngineImpl;

File: qa/integration-tests-webapps/src/test/java/org/camunda/bpm/tasklist/test/TasklistIT.java
Patch:
@@ -42,7 +42,7 @@ public void testLogin() throws InterruptedException {
     WebElement submit = wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(".form-signin")));
     submit.submit();
 
-    wait.until(ExpectedConditions.textToBePresentInElement(By.cssSelector("td"), "assign approver"));
+    wait.until(ExpectedConditions.textToBePresentInElement(By.cssSelector("td"), "Assign Approver"));
   }
 
   @After

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/util/DeploymentHelper.java
Patch:
@@ -105,7 +105,8 @@ public static Collection<JavaArchive> getEngineSpring() {
           .use(MavenDependencyResolver.class)
           .goOffline()
           .loadMetadataFromPom("pom.xml")
-          .artifacts("org.camunda.bpm:camunda-engine-spring", "org.springframework:spring-web")          
+          .artifacts("org.camunda.bpm:camunda-engine-spring", "org.springframework:spring-web")
+          .exclusion("org.camunda.bpm:camunda-engine")          
           .resolveAs(JavaArchive.class);
       
       if(resolvedArchives.size()==0) {

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/ProcessEngineRestService.java
Patch:
@@ -36,6 +36,9 @@ public interface ProcessEngineRestService {
   @Path("/{name}" + TaskRestService.PATH)
   TaskRestService getTaskRestService(@PathParam("name") String engineName);
   
+  @Path("/{name}" + IdentityRestService.PATH)
+  IdentityRestService getIdentityRestService(@PathParam("name") String engineName);
+  
   @GET
   @Produces(MediaType.APPLICATION_JSON)
   List<ProcessEngineDto> getProcessEngineNames();

File: engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -988,7 +988,7 @@ protected void initProcessApplicationManager() {
   }
   
   // correlation handler //////////////////////////////////////////////////////
-  private void initCorrelationHandler() {
+  protected void initCorrelationHandler() {
     if (correlationHandler == null) {
       correlationHandler = new DefaultCorrelationHandler();
     }

File: engine/src/main/java/org/camunda/bpm/engine/runtime/ExecutionQuery.java
Patch:
@@ -35,7 +35,7 @@ public interface ExecutionQuery extends Query<ExecutionQuery, Execution>{
   /** Only select executions which have the given process instance id. **/
   ExecutionQuery processInstanceId(String processInstanceId);
   
-  /** Only executions with the given business key */
+  /** Only select executions that belong to a process instance with the given business key */
   ExecutionQuery processInstanceBusinessKey(String processInstanceBusinessKey);
 
   /** Only select executions with the given id. **/

File: engine/src/test/java/org/camunda/bpm/engine/test/api/runtime/ExecutionQueryTest.java
Patch:
@@ -174,8 +174,8 @@ public void testQueryInvalidSorting() {
   }
   
   public void testQueryByBusinessKey() {
-    assertEquals(1, runtimeService.createExecutionQuery().processDefinitionKey(CONCURRENT_PROCESS_KEY).processInstanceBusinessKey("BUSINESS-KEY-1").list().size());
-    assertEquals(1, runtimeService.createExecutionQuery().processDefinitionKey(CONCURRENT_PROCESS_KEY).processInstanceBusinessKey("BUSINESS-KEY-2").list().size());
+    assertEquals(3, runtimeService.createExecutionQuery().processDefinitionKey(CONCURRENT_PROCESS_KEY).processInstanceBusinessKey("BUSINESS-KEY-1").list().size());
+    assertEquals(3, runtimeService.createExecutionQuery().processDefinitionKey(CONCURRENT_PROCESS_KEY).processInstanceBusinessKey("BUSINESS-KEY-2").list().size());
     assertEquals(0, runtimeService.createExecutionQuery().processDefinitionKey(CONCURRENT_PROCESS_KEY).processInstanceBusinessKey("NON-EXISTING").list().size());
   }  
   

File: javaee/ejb-service/src/main/java/org/camunda/bpm/container/impl/ejb/EjbBpmPlatformBootstrap.java
Patch:
@@ -5,7 +5,6 @@
 
 import javax.annotation.PostConstruct;
 import javax.annotation.PreDestroy;
-import javax.annotation.Resource;
 import javax.ejb.EJB;
 import javax.ejb.Singleton;
 import javax.ejb.Startup;
@@ -33,12 +32,12 @@
  */
 @Startup
 @Singleton(name="BpmPlatformBootstrap")
-@TransactionAttribute(TransactionAttributeType.SUPPORTS)
+@TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED)
 public class EjbBpmPlatformBootstrap {
 
   final private static Logger LOGGER = Logger.getLogger(EjbBpmPlatformBootstrap.class.getName());
   
-  @Resource(description="The location of the bpm-platform.xml file.")
+//  @Resource
   private String bpmPlatformXmlLocation = "META-INF/bpm-platform.xml";
   
   @EJB

File: distro/jbossas71/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/extension/handler/JobAcquisitionAdd.java
Patch:
@@ -107,6 +107,7 @@ protected void performRuntime(OperationContext context, ModelNode operation, Mod
   
     // start new service for job executor
     ServiceController<RuntimeContainerJobExecutor> serviceController = context.getServiceTarget().addService(ServiceNames.forMscRuntimeContainerJobExecutorService(acquisitionName), mscRuntimeContainerJobExecutor)
+      .addDependency(ServiceNames.forMscRuntimeContainerDelegate())
       .addDependency(ServiceNames.forMscExecutorService())
       .addListener(verificationHandler)
       .setInitialMode(Mode.ACTIVE)

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/servicetask/ServiceTaskVariablesTest.java
Patch:
@@ -77,7 +77,7 @@ public void testSerializedVariablesBothAsync() {
     // third service task in the sequence
     
     runtimeService.startProcessInstanceByKey("process");
-    waitForJobExecutorToProcessAllJobs(1000, 500);
+    waitForJobExecutorToProcessAllJobs(10000, 500);
     
     synchronized (ServiceTaskVariablesTest.class) {
       assertTrue(isNullInDelegate2);
@@ -91,7 +91,7 @@ public void testSerializedVariablesThirdAsync() {
     // in this test, only the third service task is async
         
     runtimeService.startProcessInstanceByKey("process");
-    waitForJobExecutorToProcessAllJobs(1000, 500);
+    waitForJobExecutorToProcessAllJobs(10000, 500);
     
     synchronized (ServiceTaskVariablesTest.class) {
       assertTrue(isNullInDelegate2); 

File: distro/jbossas71/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/service/MscRuntimeContainerDelegate.java
Patch:
@@ -222,7 +222,7 @@ public Set<String> getProcessApplicationNames() {
   protected void createJndiBindings() {
     final ServiceName processEngineServiceBindingServiceName = ContextNames.GLOBAL_CONTEXT_SERVICE_NAME            
       .append(BpmPlatform.APP_JNDI_NAME)
-      .append(BpmPlatform.MODUL_JNDI_NAME)
+      .append(BpmPlatform.MODULE_JNDI_NAME)
       .append(BpmPlatform.PROCESS_ENGINE_SERVICE_NAME);
     
     BinderService processEngineServiceBinder = new BinderService(BpmPlatform.PROCESS_ENGINE_SERVICE_JNDI_NAME);
@@ -235,7 +235,7 @@ protected void createJndiBindings() {
     
     final ServiceName processApplicationServiceBindingServiceName = ContextNames.GLOBAL_CONTEXT_SERVICE_NAME            
         .append(BpmPlatform.APP_JNDI_NAME)
-        .append(BpmPlatform.MODUL_JNDI_NAME)
+        .append(BpmPlatform.MODULE_JNDI_NAME)
         .append(BpmPlatform.PROCESS_APPLICATION_SERVICE_NAME);
       
     BinderService processApplicationServiceBinder = new BinderService(BpmPlatform.PROCESS_APPLICATION_SERVICE_JNDI_NAME);

File: engine/src/main/java/org/camunda/bpm/BpmPlatform.java
Patch:
@@ -26,13 +26,13 @@ public final class BpmPlatform {
   
   public final static String JNDI_NAME_PREFIX = "java:global";
   public final static String APP_JNDI_NAME = "camunda-bpm-platform";
-  public final static String MODUL_JNDI_NAME = "process-engine";
+  public final static String MODULE_JNDI_NAME = "process-engine";
   
   public final static String PROCESS_ENGINE_SERVICE_NAME = "ProcessEngineService!org.camunda.bpm.ProcessEngineService";
   public final static String PROCESS_APPLICATION_SERVICE_NAME = "ProcessApplicationService!org.camunda.bpm.ProcessApplicationService";
   
-  public final static String PROCESS_ENGINE_SERVICE_JNDI_NAME = JNDI_NAME_PREFIX + "/" + APP_JNDI_NAME + "/" + MODUL_JNDI_NAME + "/" + PROCESS_ENGINE_SERVICE_NAME;
-  public final static String PROCESS_APPLICATION_SERVICE_JNDI_NAME = JNDI_NAME_PREFIX + "/" + APP_JNDI_NAME + "/" + MODUL_JNDI_NAME + "/" + PROCESS_APPLICATION_SERVICE_NAME;
+  public final static String PROCESS_ENGINE_SERVICE_JNDI_NAME = JNDI_NAME_PREFIX + "/" + APP_JNDI_NAME + "/" + MODULE_JNDI_NAME + "/" + PROCESS_ENGINE_SERVICE_NAME;
+  public final static String PROCESS_APPLICATION_SERVICE_JNDI_NAME = JNDI_NAME_PREFIX + "/" + APP_JNDI_NAME + "/" + MODULE_JNDI_NAME + "/" + PROCESS_APPLICATION_SERVICE_NAME;
   
   public static ProcessEngineService getProcessEngineService() {
     return RuntimeContainerDelegate.INSTANCE.get().getProcessEngineService();

File: engine/src/main/java/org/camunda/bpm/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -79,6 +79,8 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement("postgres", "selectCommentsByTaskId", "selectCommentsByTaskId_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByProcessInstanceId", "selectCommentsByProcessInstanceId_postgres");
     addDatabaseSpecificStatement("postgres", "selectEventsByTaskId", "selectEventsByTaskId_postgres");
+    addDatabaseSpecificStatement("postgres", "selectActivityStatistics", "selectActivityStatistics_postgres");
+    addDatabaseSpecificStatement("postgres", "selectActivityStatisticsCount", "selectActivityStatisticsCount_postgres");
         
     // oracle
     databaseSpecificLimitBeforeStatements.put("oracle", "select * from ( select a.*, ROWNUM rnum from (");

File: qa/integration-tests-webapps/src/test/java/org/camunda/bpm/rest/test/RestIT.java
Patch:
@@ -82,7 +82,8 @@ public void testScenario() throws JSONException {
     Assert.assertEquals(200, response.getStatus());
 
     JSONArray definitionsJson = response.getEntity(JSONArray.class);
-    Assert.assertEquals(1, definitionsJson.length());
+    // 2 = simple process + invoice example
+    Assert.assertEquals(2, definitionsJson.length());
 
     JSONObject definitionJson = definitionsJson.getJSONObject(0);
 

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/callbacks/PostDeployFailureTest_JBOSS.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.camunda.bpm.integrationtest.deployment.callbacks;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import org.camunda.bpm.integrationtest.deployment.callbacks.apps.PostDeployFailureApp;
 import org.jboss.arquillian.container.test.api.Deployer;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/callbacks/PostDeployFailureTest_OTHERS.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.camunda.bpm.integrationtest.deployment.callbacks;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import org.camunda.bpm.integrationtest.util.AbstractFoxPlatformIntegrationTest;
 import org.jboss.arquillian.container.test.api.Deployment;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/callbacks/PostDeployInjectDefaultEngineTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import org.camunda.bpm.engine.ProcessEngine;
 import org.camunda.bpm.integrationtest.deployment.callbacks.apps.PostDeployInjectApp;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentWithMultiplePasAsSubdeployment1.java
Patch:
@@ -16,7 +16,7 @@
 
 package org.camunda.bpm.integrationtest.deployment.war;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import org.camunda.bpm.engine.repository.DeploymentQuery;
 import org.camunda.bpm.engine.repository.ProcessDefinition;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentWithMultiplePasAsSubdeployment2.java
Patch:
@@ -16,7 +16,7 @@
 
 package org.camunda.bpm.integrationtest.deployment.war;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import org.camunda.bpm.engine.repository.DeploymentQuery;
 import org.camunda.bpm.engine.repository.ProcessDefinition;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentWithMultiplePasAsSubdeployment3.java
Patch:
@@ -16,7 +16,7 @@
 
 package org.camunda.bpm.integrationtest.deployment.war;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import org.camunda.bpm.engine.repository.DeploymentQuery;
 import org.camunda.bpm.engine.repository.ProcessDefinition;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentWithMultiplePasAsSubdeployment4.java
Patch:
@@ -16,7 +16,7 @@
 
 package org.camunda.bpm.integrationtest.deployment.war;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import org.camunda.bpm.engine.repository.DeploymentQuery;
 import org.camunda.bpm.engine.repository.ProcessDefinition;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/deployment/war/TestWarDeploymentWithMultiplePasAsSubdeployment5.java
Patch:
@@ -16,7 +16,7 @@
 
 package org.camunda.bpm.integrationtest.deployment.war;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import org.camunda.bpm.engine.repository.DeploymentQuery;
 import org.camunda.bpm.engine.repository.ProcessDefinition;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/context/CallActivityContextSwitchTest.java
Patch:
@@ -23,7 +23,7 @@
 import javax.enterprise.inject.spi.BeanManager;
 import javax.inject.Inject;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.integrationtest.functional.context.beans.CalledProcessDelegate;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/functional/transactions/TransactionListenerTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.camunda.bpm.integrationtest.functional.transactions;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import org.camunda.bpm.engine.impl.cfg.TransactionListener;
 import org.camunda.bpm.engine.impl.cfg.TransactionState;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/jobexecutor/TimerExecutionTest.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.Date;
 import java.util.List;
 import javax.inject.Inject;
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import org.camunda.bpm.engine.runtime.ProcessInstance;
 import org.camunda.bpm.integrationtest.jobexecutor.beans.SampleServiceBean;

File: qa/integration-tests-engine/src/test/java/org/camunda/bpm/integrationtest/service/ProcessEngineServiceTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.camunda.bpm.integrationtest.service;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import org.camunda.bpm.BpmPlatform;
 import org.camunda.bpm.ProcessEngineService;

File: distro/jbossas71/subsystem/src/test/java/org/camunda/bpm/container/impl/jboss/test/JBossSubsystemXMLTest.java
Patch:
@@ -20,8 +20,8 @@
 import junit.framework.Assert;
 
 import org.camunda.bpm.container.impl.jboss.extension.Attribute;
-import org.camunda.bpm.container.impl.jboss.extension.Element;
 import org.camunda.bpm.container.impl.jboss.extension.BpmPlatformExtension;
+import org.camunda.bpm.container.impl.jboss.extension.Element;
 import org.camunda.bpm.container.impl.jboss.extension.ModelConstants;
 import org.camunda.bpm.container.impl.jboss.service.ServiceNames;
 import org.camunda.bpm.engine.ProcessEngineException;
@@ -57,7 +57,7 @@ public class JBossSubsystemXMLTest extends AbstractSubsystemTest {
   public static final ServiceName PLATFORM_JOBEXECUTOR_SERVICE_NAME = ServiceName.of("foxPlatform").append("containerJobExecutorService");
     
   public static final ServiceName processEngineServiceBindingServiceName = ContextNames.GLOBAL_CONTEXT_SERVICE_NAME            
-    .append("camunda")
+    .append("camunda-bpm-platform")
     .append("process-engine")
     .append("ProcessEngineService!org.camunda.bpm.ProcessEngineService");
    

File: qa/integration-tests-webapps/src/test/java/org/camunda/bpm/cycle/test/TestCycleRoundtripIT.java
Patch:
@@ -28,7 +28,6 @@
 import org.camunda.bpm.cycle.web.dto.SynchronizationResultDTO.SynchronizationStatus;
 import org.junit.After;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
@@ -106,7 +105,6 @@ public static List<Object[]> data() {
   @Before
   public void init() throws Exception {
     initTmpDir();
-    connectToWebapp();
     createInitialUserAndLogin();
     createConnector();
     createRoundtripWithDetails();

File: webapps/cockpit/src/test/java/org/camunda/bpm/engine/rest/util/DevEnvironmentSetup.java
Patch:
@@ -15,7 +15,6 @@
 import org.camunda.bpm.engine.rest.impl.ProcessDefinitionRestServiceImpl;
 import org.camunda.bpm.engine.rest.impl.ProcessInstanceRestServiceImpl;
 import org.camunda.bpm.engine.rest.impl.TaskRestServiceImpl;
-import org.camunda.bpm.engine.rest.mapper.EngineQueryDtoGetReader;
 import org.camunda.bpm.engine.rest.mapper.JacksonConfigurator;
 import org.camunda.bpm.engine.rest.spi.ProcessEngineProvider;
 import org.camunda.bpm.engine.runtime.ProcessInstance;
@@ -81,7 +80,6 @@ private static void startEmbeddedHttpServer() {
     server.getDeployment().getActualResourceClasses().add(ProcessInstanceRestServiceImpl.class);
     server.getDeployment().getActualResourceClasses().add(TaskRestServiceImpl.class);
 
-    server.getDeployment().getActualProviderClasses().add(EngineQueryDtoGetReader.class);
     server.getDeployment().getActualProviderClasses().add(JacksonConfigurator.class);
 
     server.getDeployment().getActualProviderClasses().add(JacksonJsonProvider.class);

File: webapps/tasklist/src/main/java/org/camunda/bpm/tasklist/EngineApiApplication.java
Patch:
@@ -21,7 +21,6 @@
 import org.camunda.bpm.engine.rest.impl.ProcessDefinitionRestServiceImpl;
 import org.camunda.bpm.engine.rest.impl.ProcessInstanceRestServiceImpl;
 import org.camunda.bpm.engine.rest.impl.TaskRestServiceImpl;
-import org.camunda.bpm.engine.rest.mapper.EngineQueryDtoGetReader;
 import org.camunda.bpm.engine.rest.mapper.JacksonConfigurator;
 import org.codehaus.jackson.jaxrs.JacksonJsonProvider;
 
@@ -35,7 +34,6 @@ public Set<Class<?>> getClasses() {
     classes.add(ProcessInstanceRestServiceImpl.class);
     classes.add(TaskRestServiceImpl.class);
 
-    classes.add(EngineQueryDtoGetReader.class);
     classes.add(JacksonConfigurator.class);
     classes.add(JacksonJsonProvider.class);
     classes.add(ExceptionHandler.class);

File: webapps/tasklist/src/main/java/org/camunda/bpm/tasklist/TasklistApplication.java
Patch:
@@ -6,7 +6,6 @@
 import javax.ws.rs.core.Application;
 
 import org.camunda.bpm.engine.rest.exception.ExceptionHandler;
-import org.camunda.bpm.engine.rest.mapper.EngineQueryDtoGetReader;
 import org.camunda.bpm.engine.rest.mapper.JacksonConfigurator;
 import org.camunda.bpm.tasklist.resources.AuthenticationResource;
 import org.camunda.bpm.tasklist.resources.TaskFormResource;
@@ -24,7 +23,6 @@ public Set<Class<?>> getClasses() {
     classes.add(AuthenticationResource.class);
     classes.add(TaskFormResource.class);
 
-    classes.add(EngineQueryDtoGetReader.class);
     classes.add(JacksonConfigurator.class);
     classes.add(JacksonJsonProvider.class);
     classes.add(ExceptionHandler.class);

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/ProcessDefinitionRestServiceImpl.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.ws.rs.PathParam;
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.Response.Status;
 import javax.ws.rs.core.UriBuilder;
@@ -201,7 +200,7 @@ public ProcessDefinitionDiagramDto getProcessDefinitionBpmn20Xml(String processD
   }
 
   @Override
-  public FormDto getStartForm(@PathParam("id") String processDefinitionId) {
+  public FormDto getStartForm(String processDefinitionId) {
     final FormService formService = getProcessEngine().getFormService();
     
     final StartFormData formData;

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/ProcessInstanceRestServiceImpl.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.List;
 import java.util.Map;
 
-import javax.ws.rs.PathParam;
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.Response.Status;
 
@@ -123,7 +122,7 @@ public CountResultDto queryProcessInstancesCount(ProcessInstanceQueryDto queryDt
   }
 
   @Override
-  public VariableListDto getVariables(@PathParam("id") String processInstanceId) {
+  public VariableListDto getVariables(String processInstanceId) {
     List<VariableValueDto> values = new ArrayList<VariableValueDto>();
 
     for (Map.Entry<String, Object> entry : getProcessEngine().getRuntimeService().getVariables(processInstanceId).entrySet()) {

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/TaskRestServiceImpl.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.Map;
 import java.util.Set;
 
-import javax.ws.rs.PathParam;
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.Response.Status;
 
@@ -109,7 +108,7 @@ public void claim(String taskId, UserIdDto dto) {
   }
 
   @Override
-  public void unclaim(@PathParam("id") String taskId) {
+  public void unclaim(String taskId) {
     getProcessEngine().getTaskService().setAssignee(taskId, null);
   }
 
@@ -121,7 +120,7 @@ public void complete(String taskId, CompleteTaskDto dto) {
   }
 
   @Override
-  public void delegate(@PathParam("id") String taskId, UserIdDto delegatedUser) {
+  public void delegate(String taskId, UserIdDto delegatedUser) {
     getProcessEngine().getTaskService().delegateTask(taskId, delegatedUser.getUserId());
   }
 

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractProcessDefinitionRestServiceInteractionTest.java
Patch:
@@ -129,12 +129,11 @@ public void testProcessDefinitionBpmn20XmlRetrieval() {
 
   @Test
   public void testGetStartFormData() {
-    Response response = given().pathParam("id", MockProvider.EXAMPLE_PROCESS_DEFINITION_ID)
+    given().pathParam("id", MockProvider.EXAMPLE_PROCESS_DEFINITION_ID)
     .then().expect()
       .statusCode(Status.OK.getStatusCode())
-//      .body("key", equalTo(MockProvider.EXAMPLE_FORM_KEY))
+      .body("key", equalTo(MockProvider.EXAMPLE_FORM_KEY))
     .when().get(START_FORM_URL);
-    System.out.println(response.asString());
   }
 
   @Test

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/AbstractRestServiceTest.java
Patch:
@@ -25,8 +25,6 @@
 import org.camunda.bpm.engine.ProcessEngineException;
 import org.camunda.bpm.engine.rest.spi.ProcessEngineProvider;
 import org.camunda.bpm.engine.rest.spi.impl.MockedProcessEngineProvider;
-import org.camunda.bpm.engine.rest.util.EmbeddedServerBootstrap;
-import org.junit.AfterClass;
 import org.junit.BeforeClass;
 
 import com.jayway.restassured.RestAssured;

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/helper/MockProvider.java
Patch:
@@ -76,6 +76,7 @@ public abstract class MockProvider {
   // process instance
   public static final String EXAMPLE_PROCESS_INSTANCE_BUSINESS_KEY = "aKey";
   public static final String EXAMPLE_PROCESS_INSTANCE_ID = "anId";
+  public static final String ANOTHER_EXAMPLE_PROCESS_INSTANCE_ID = "anotherId";
   public static final boolean EXAMPLE_PROCESS_INSTANCE_IS_SUSPENDED = false;
   public static final boolean EXAMPLE_PROCESS_INSTANCE_IS_ENDED = false;
   

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/util/JerseyServerBootstrap.java
Patch:
@@ -58,7 +58,6 @@ public void stop() {
     server.stop();
   }
   
-  // TODO refactor
   private Class<?>[] getResourceClasses() {
     Class<?>[] classes = new Class<?>[]{
       ProcessDefinitionRestServiceImpl.class,

File: engine/src/test/java/org/camunda/bpm/engine/test/bpmn/multiinstance/MultiInstanceTest.java
Patch:
@@ -1006,7 +1006,7 @@ public void testActiveExecutionsInParallelTasks() {
     for (Execution execution : executions) {
       ExecutionEntity entity = (ExecutionEntity) execution;
       
-      if (entity.getId() != instance.getId() && entity.getParentId() != instance.getId()) {
+      if (!entity.getId().equals(instance.getId()) && !entity.getParentId().equals(instance.getId())) {
         // child executions
         assertTrue(entity.isActive());
       } else {

File: engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/ActivityStatisticsQueryTest.java
Patch:
@@ -101,10 +101,10 @@ public void testManyInstancesActivityStatisticsQuery() {
   
   @Test
   @Deployment(resources = "org/camunda/bpm/engine/test/api/mgmt/StatisticsTest.testMultiInstanceStatisticsQuery.bpmn20.xml")
-  public void failing_testMultiInstanceActivityStatisticsQuery() {
+  public void testParallelMultiInstanceActivityStatisticsQuery() {
     runtimeService.startProcessInstanceByKey("MIExampleProcess");
     ProcessDefinition definition = repositoryService.createProcessDefinitionQuery()
-        .processDefinitionKey("ExampleProcess").singleResult();
+        .processDefinitionKey("MIExampleProcess").singleResult();
     
     List<ActivityStatistics> statistics = 
         managementService.createActivityStatisticsQuery(definition.getId()).includeFailedJobs().list();

File: webapps/cockpit/src/test/java/org/camunda/bpm/engine/rest/util/DevEnvironmentSetup.java
Patch:
@@ -56,7 +56,6 @@ private static void createDemoData() {
       .addClasspathResource("processes/fox-invoice_en.bpmn")
       .addClasspathResource("processes/fox-invoice_en_long_id.bpmn")
       .addClasspathResource("processes/collaboration_scroll.bpmn")
-      .addClasspathResource("processes/newBpmnDiagram_1.bpmn")
       .deploy();
     
     RuntimeService runtimeService = processEngine.getRuntimeService();
@@ -73,7 +72,7 @@ private static void startEmbeddedHttpServer() {
     
     TJWSEmbeddedJaxrsServer server = new TJWSEmbeddedJaxrsServer();
 
-    server.setRootResourcePath("/camunda-engine-rest");
+    server.setRootResourcePath("/engine-rest");
     server.addFileMapping("/cockpit", new File("./src/main/webapp"));
 
     server.setPort(8081);

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/StatisticsRestTest.java
Patch:
@@ -86,7 +86,7 @@ public void testAdditionalFailedJobsOption() throws IOException {
   
   @Test
   public void testActivityStatisticsRetrieval() throws IOException {
-    setupTestScenario();
+    setUp();
     
     given().pathParam("id", "aDefinitionId")
     .then().expect()

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/application/DefaultApplication.java
Patch:
@@ -18,6 +18,7 @@
 import javax.ws.rs.ApplicationPath;
 import javax.ws.rs.core.Application;
 
+import org.camunda.bpm.engine.rest.impl.EngineServiceImpl;
 import org.camunda.bpm.engine.rest.impl.ProcessDefinitionServiceImpl;
 import org.camunda.bpm.engine.rest.impl.ProcessInstanceServiceImpl;
 import org.camunda.bpm.engine.rest.impl.TaskRestServiceImpl;
@@ -41,6 +42,7 @@ public class DefaultApplication extends Application {
   @Override
   public Set<Class<?>> getClasses() {
     Set<Class<?>> classes = new HashSet<Class<?>>();
+    classes.add(EngineServiceImpl.class);
     classes.add(ProcessDefinitionServiceImpl.class);
     classes.add(ProcessInstanceServiceImpl.class);
     classes.add(TaskRestServiceImpl.class);

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/spi/ProcessEngineProvider.java
Patch:
@@ -22,6 +22,8 @@
  */
 public interface ProcessEngineProvider {
 
-  public ProcessEngine getProcessEngine();
+  public ProcessEngine getDefaultProcessEngine();
+  
+  public ProcessEngine getProcessEngine(String name);
   
 }

File: engine-rest/src/test/java/org/camunda/bpm/engine/rest/util/ResteasyServerBootstrap.java
Patch:
@@ -5,6 +5,7 @@
 import java.util.Properties;
 
 import org.camunda.bpm.engine.rest.AbstractRestServiceTest;
+import org.camunda.bpm.engine.rest.impl.EngineServiceImpl;
 import org.camunda.bpm.engine.rest.impl.ProcessDefinitionServiceImpl;
 import org.camunda.bpm.engine.rest.impl.ProcessInstanceServiceImpl;
 import org.camunda.bpm.engine.rest.impl.TaskRestServiceImpl;
@@ -45,6 +46,7 @@ private void setupServer() {
     server.getDeployment().getActualResourceClasses().add(ProcessDefinitionServiceImpl.class);
     server.getDeployment().getActualResourceClasses().add(ProcessInstanceServiceImpl.class);
     server.getDeployment().getActualResourceClasses().add(TaskRestServiceImpl.class);
+    server.getDeployment().getActualResourceClasses().add(EngineServiceImpl.class);
     
     server.getDeployment().getActualProviderClasses().add(EngineQueryDtoGetReader.class);
     server.getDeployment().getActualProviderClasses().add(JacksonConfigurator.class);

File: engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/application/DefaultApplication.java
Patch:
@@ -36,7 +36,7 @@
  *
  */
 @ApplicationPath("/")
-public class CamundaEngineRestApplication extends Application {
+public class DefaultApplication extends Application {
   
   @Override
   public Set<Class<?>> getClasses() {

File: engine-cdi/src/main/java/org/camunda/bpm/engine/cdi/CurrentProcessInstance.java
Patch:
@@ -17,6 +17,7 @@
 import javax.inject.Inject;
 import javax.inject.Named;
 
+import org.camunda.bpm.engine.cdi.annotation.ExecutionId;
 import org.camunda.bpm.engine.cdi.annotation.ProcessInstanceId;
 import org.camunda.bpm.engine.cdi.annotation.TaskId;
 import org.camunda.bpm.engine.runtime.Execution;
@@ -80,6 +81,7 @@ public Execution getExecution() {
   /* Makes the id of the current Execution available for injection */
   @Produces
   @Named
+  @ExecutionId
   public String getExecutionId() {
     return businessProcess.getExecutionId();
   }

File: distro/jbossas71/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/deployment/processor/ModuleDependencyProcessor.java
Patch:
@@ -39,7 +39,7 @@ public class ModuleDependencyProcessor implements DeploymentUnitProcessor {
   
   public static final int PRIORITY = 0x2300;
   
-  public static ModuleIdentifier MODULE_IDENTIFYER_PROCESS_ENGINE = ModuleIdentifier.create("com.camunda.fox.engine.fox-engine");
+  public static ModuleIdentifier MODULE_IDENTIFYER_PROCESS_ENGINE = ModuleIdentifier.create("org.camunda.bpm.camunda-engine");
 
   public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
     

File: distro/jbossas71/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/deployment/processor/ProcessEngineStartProcessor.java
Patch:
@@ -70,6 +70,9 @@ protected void startProcessEngine(ProcessEngineXml processEngineXml, DeploymentP
     // transform configuration
     ManagedProcessEngineMetadata configuration = transformConfiguration(processEngineXml);
     
+    // validate the configuration
+    configuration.validate();
+    
     // create service instance
     MscManagedProcessEngineController service = new MscManagedProcessEngineController(configuration);
     

File: distro/jbossas71/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/extension/BpmPlatformExtension.java
Patch:
@@ -68,8 +68,7 @@ public void initialize(ExtensionContext context) {
   }
 
   public void initializeParsers(ExtensionParsingContext context) {
-    context.setSubsystemXmlMapping(ModelConstants.SUBSYSTEM_NAME, Namespace.FOX_PLATFORM_1_0.getUriString(), parser);
-    context.setSubsystemXmlMapping(ModelConstants.SUBSYSTEM_NAME, Namespace.FOX_PLATFORM_1_1.getUriString(), parser);
+    context.setSubsystemXmlMapping(ModelConstants.SUBSYSTEM_NAME, Namespace.CAMUNDA_BPM_PLATFORM_1_1.getUriString(), parser);
   }
 
   public static ServiceName getPlatformServiceType() {

File: distro/jbossas71/subsystem/src/main/java/org/camunda/bpm/container/impl/jboss/extension/Namespace.java
Patch:
@@ -29,14 +29,13 @@ public enum Namespace {
    */
   UNKNOWN((String) null),
   
-  FOX_PLATFORM_1_0("urn:com.camunda.fox.fox-platform:1.0"),
-  FOX_PLATFORM_1_1("urn:com.camunda.fox.fox-platform:1.1");
+  CAMUNDA_BPM_PLATFORM_1_1("urn:org.camunda.bpm.jboss:1.1");
   
   /**
    * The current namespace version.
    */
   
-  public static final Namespace CURRENT = FOX_PLATFORM_1_1;
+  public static final Namespace CURRENT = CAMUNDA_BPM_PLATFORM_1_1;
   
   private final String name;
 

File: camunda-engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/ProcessInstanceServiceImpl.java
Patch:
@@ -92,7 +92,7 @@ public VariableListDto getVariables(@PathParam("id") String processInstanceId) {
     List<VariableValueDto> values = new ArrayList<VariableValueDto>();
 
     for (Map.Entry<String, Object> entry : processEngine.getRuntimeService().getVariables(processInstanceId).entrySet()) {
-      values.add(new VariableValueDto(entry.getKey(), entry.getValue(),entry.getValue().getClass().getSimpleName()));
+      values.add(new VariableValueDto(entry.getKey(), entry.getValue(), entry.getValue().getClass().getSimpleName()));
     }
 
     return new VariableListDto(values);

File: javaee/ejb-client/src/main/java/org/camunda/bpm/application/impl/ejb/DefaultEjbProcessApplication.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.camunda.fox.client.impl;
+package org.camunda.bpm.application.impl.ejb;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -34,14 +34,15 @@
 /**
  * 
  * @author Daniel Meyer
+ * @author Roman Smirnov
  * 
  */
 @Singleton
 @Startup
 @ConcurrencyManagement(ConcurrencyManagementType.BEAN) 
 @TransactionAttribute(TransactionAttributeType.SUPPORTS)
 @ProcessApplication
-public class ProcessArchiveSupport extends EjbProcessApplication {
+public class DefaultEjbProcessApplication extends EjbProcessApplication {
   
   protected Map<String, String> properties = new HashMap<String, String>();
   

File: javaee/ejb-client/src/main/java/org/camunda/bpm/application/impl/web/TaskForm.java
Patch:
@@ -1,4 +1,4 @@
-package com.camunda.fox.client.impl.web;
+package org.camunda.bpm.application.impl.web;
 
 import java.io.IOException;
 import java.io.Serializable;

File: javaee/ejb-service/src/main/java/org/camunda/bpm/container/impl/ejb/BpmPlatformBootstrapBean.java
Patch:
@@ -1,4 +1,4 @@
-package com.camunda.fox.platform.impl.service;
+package org.camunda.bpm.container.impl.ejb;
 
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -12,13 +12,13 @@
 import javax.ejb.TransactionAttributeType;
 
 import org.camunda.bpm.container.RuntimeContainerDelegate;
+import org.camunda.bpm.container.impl.ejb.deployment.EjbJarAttachments;
+import org.camunda.bpm.container.impl.ejb.deployment.EjbJarParsePlatformXmlStep;
 import org.camunda.bpm.container.impl.jmx.JmxRuntimeContainerDelegate;
 import org.camunda.bpm.container.impl.jmx.deployment.PlatformXmlStartProcessEnginesStep;
 import org.camunda.bpm.container.impl.jmx.deployment.StopProcessApplicationsStep;
 import org.camunda.bpm.container.impl.jmx.deployment.StopProcessEnginesStep;
 
-import com.camunda.fox.platform.impl.service.deployment.EjbJarAttachments;
-import com.camunda.fox.platform.impl.service.deployment.EjbJarParsePlatformXmlStep;
 
 /**
  * <p>Bootstrap for the camunda BPM platform using a singleton EJB</p>

File: javaee/ejb-service/src/main/java/org/camunda/bpm/container/impl/ejb/deployment/EjbJarAttachments.java
Patch:
@@ -1,4 +1,4 @@
-package com.camunda.fox.platform.impl.service.deployment;
+package org.camunda.bpm.container.impl.ejb.deployment;
 
 /**
  * <p>Constants used for naming attachments in ejb jar BPM platform deployment operations.</p>

File: javaee/ejb-service/src/main/java/org/camunda/bpm/container/impl/ejb/deployment/EjbJarParsePlatformXmlStep.java
Patch:
@@ -1,4 +1,4 @@
-package com.camunda.fox.platform.impl.service.deployment;
+package org.camunda.bpm.container.impl.ejb.deployment;
 
 import java.net.URL;
 

File: distro/jbossas71/subsystem/src/main/java/com/camunda/fox/platform/subsystem/impl/service/ServiceNames.java
Patch:
@@ -66,7 +66,7 @@ public static ServiceName forMscRuntimeContainerDelegate() {
    * @param deploymentId
    */
   public static ServiceName forProcessApplicationDeploymentService(String deploymentUnitName, String deploymentName) {
-    return PROCESS_APPLICATION.append(deploymentUnitName).append(deploymentName);
+    return PROCESS_APPLICATION.append("deployment").append(deploymentUnitName).append(deploymentName);
   }
 
   /**
@@ -82,15 +82,15 @@ public static ServiceName forManagedProcessEngines() {
    * ServiceNames used for {@link MscManagedProcessApplication}.
    */
   public static ServiceName forManagedProcessApplications() {
-    return PROCESS_APPLICATION;
+    return PROCESS_APPLICATION.append("runtime");
   }
   
   /**
    * @param applicationName
    * @return the name to be used for an {@link MscManagedProcessApplication} service.
    */
   public static ServiceName forManagedProcessApplication(String applicationName) {
-    return PROCESS_APPLICATION.append(applicationName);
+    return PROCESS_APPLICATION.append("runtime").append(applicationName);
   }
   
   /**

File: webapps/tasklist/tasklist/src/main/java/org/camunda/bpm/tasklist/dto/AuthenticationResponseDto.java
Patch:
@@ -3,11 +3,11 @@
 /**
  * @author : drobisch
  */
-public class AuthenticationResponse {
+public class AuthenticationResponseDto {
   boolean success;
   String user;
 
-  public AuthenticationResponse(boolean success, String user) {
+  public AuthenticationResponseDto(boolean success, String user) {
     this.success = success;
     this.user = user;
   }

File: camunda-engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -151,7 +151,7 @@ public List<StatisticsResultDto> getStatistics(Boolean includeFailedJobs) {
   @Override
   public List<StatisticsResultDto> getActivityStatistics(String processDefinitionId, Boolean includeFailedJobs) {
     ManagementService mgmtService = processEngine.getManagementService();
-    ActivityStatisticsQuery query = mgmtService.createActivityRuntimeStatisticsQuery(processDefinitionId);
+    ActivityStatisticsQuery query = mgmtService.createActivityStatisticsQuery(processDefinitionId);
     if (includeFailedJobs != null && includeFailedJobs) {
       query.includeFailedJobs();
     }

File: camunda-engine-rest/src/test/java/org/camunda/bpm/engine/rest/StatisticsRestTest.java
Patch:
@@ -71,7 +71,7 @@ private void setupActivityStatisticsMock() {
     
     activityQueryMock = mock(ActivityStatisticsQuery.class);
     when(activityQueryMock.list()).thenReturn(activityResults);
-    when(processEngine.getManagementService().createActivityRuntimeStatisticsQuery(any(String.class))).thenReturn(activityQueryMock);
+    when(processEngine.getManagementService().createActivityStatisticsQuery(any(String.class))).thenReturn(activityQueryMock);
   }
   
   private void setupProcessDefinitionStatisticsMock() {

File: activiti-engine/src/test/java/org/activiti/engine/test/api/mgmt/ActivityStatisticsTest.java
Patch:
@@ -89,7 +89,7 @@ public void testManyInstancesActivityStatisticsQuery() {
   
   @Test
   @Deployment(resources = "org/activiti/engine/test/api/mgmt/StatisticsTest.testMultiInstanceStatisticsQuery.bpmn20.xml")
-  public void testMultiInstanceActivityStatisticsQuery() {
+  public void failing_testMultiInstanceActivityStatisticsQuery() {
     runtimeService.startProcessInstanceByKey("ExampleProcess");
     ProcessDefinition definition = repositoryService.createProcessDefinitionQuery()
         .processDefinitionKey("ExampleProcess").singleResult();
@@ -100,7 +100,7 @@ public void testMultiInstanceActivityStatisticsQuery() {
     Assert.assertEquals(1, statistics.size());
     
     ActivityStatistics activityResult = statistics.get(0);
-    Assert.assertEquals(4, activityResult.getInstances());
+    Assert.assertEquals(3, activityResult.getInstances());
     Assert.assertEquals("theTask", activityResult.getId());
     Assert.assertEquals(0, activityResult.getFailedJobs());
   }

File: distro/jbossas71/subsystem/src/main/java/com/camunda/fox/platform/subsystem/impl/util/ServiceTracker.java
Patch:
@@ -10,7 +10,7 @@
 
 /**
  * <p>Service Listener that adds / removes services to / from a collection as they
- * areadded / removed to the service controller.</p>
+ * are added / removed to the service controller.</p>
  * 
  * @author Daniel Meyer
  * 

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -230,7 +230,7 @@ public BpmnParse execute() {
       LOGGER.log(Level.SEVERE, "Unknown exception", e);
       
       // ALL unexpected exceptions should bubble up since they are not handled
-      // accordingly by onderlying parse-methods and can't be deployed
+      // accordingly by underlying parse-methods and the process can't be deployed
       throw new ActivitiException("Error while parsing process: " + e.getMessage(), e);
       
     } finally {

File: distro/jbossas71/subsystem/src/main/java/com/camunda/fox/platform/subsystem/impl/service/ProcessArchiveService.java
Patch:
@@ -32,6 +32,7 @@ public ProcessArchiveService getValue() throws IllegalStateException, IllegalArg
 
   public void start(StartContext arg0) throws StartException {
     ContainerPlatformService containerPlatformService = containerPlatformServiceInjector.getOptionalValue();
+    
     try {
       processArchiveInstallation = containerPlatformService.installProcessArchiveInternal(processArchive);
     } catch(Throwable e) {

File: qa/cycle-tests/src/test/java/com/camunda/fox/cycle/test/AbstractCycleIT.java
Patch:
@@ -126,7 +126,7 @@ public void deleteAllUsers() throws Exception {
     List<Map> users = response.getEntity(List.class);
     response.close();
     for (Map userDTO : users) {
-      deleteUser((String) userDTO.get("id"));
+      deleteUser(String.valueOf(userDTO.get("id")));
     }    
   }
 
@@ -142,7 +142,7 @@ public void deleteAllRoundtrips() {
     List<Map> roundtrips = response.getEntity(List.class);
     response.close();
     for (Map roundtripDTO : roundtrips) {
-      deleteRoundtrip((String) roundtripDTO.get("id"));
+      deleteRoundtrip(String.valueOf(roundtripDTO.get("id")));
     }
   }
 
@@ -159,7 +159,7 @@ public void deleteAllConnectors() {
     List<Map> entity = response.getEntity(List.class);
     response.close();
     for (Map<String,Object> connectorConfigurationDTO : entity) {
-      deleteConnector((String) connectorConfigurationDTO.get("connectorId"));
+      deleteConnector(String.valueOf(connectorConfigurationDTO.get("connectorId")));
     }    
   }
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -101,6 +101,7 @@
 import org.activiti.engine.impl.persistence.deploy.Deployer;
 import org.activiti.engine.impl.persistence.deploy.DeploymentCache;
 import org.activiti.engine.impl.persistence.entity.AttachmentManager;
+import org.activiti.engine.impl.persistence.entity.ByteArrayManager;
 import org.activiti.engine.impl.persistence.entity.CommentManager;
 import org.activiti.engine.impl.persistence.entity.DeploymentManager;
 import org.activiti.engine.impl.persistence.entity.EventSubscriptionManager;
@@ -626,6 +627,7 @@ protected void initSessionFactories() {
       addSessionFactory(new GenericManagerFactory(ProcessDefinitionManager.class));
       addSessionFactory(new GenericManagerFactory(PropertyManager.class));
       addSessionFactory(new GenericManagerFactory(ResourceManager.class));
+      addSessionFactory(new GenericManagerFactory(ByteArrayManager.class));
       addSessionFactory(new GenericManagerFactory(TableDataManager.class));
       addSessionFactory(new GenericManagerFactory(TaskManager.class));
       addSessionFactory(new GenericManagerFactory(UserManager.class));

File: activiti-engine/src/main/java/org/activiti/engine/impl/cmd/DeleteAttachmentCmd.java
Patch:
@@ -45,7 +45,7 @@ public Object execute(CommandContext commandContext) {
 
     commandContext
       .getDbSqlSession()
-      .delete(AttachmentEntity.class, attachmentId);
+      .delete(attachment);
 	  
     if (attachment.getContentId() != null) {
       commandContext

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/AttachmentManager.java
Patch:
@@ -43,9 +43,9 @@ public void deleteAttachmentsByTaskId(String taskId) {
     for (AttachmentEntity attachment: attachments) {
       String contentId = attachment.getContentId();
       if (contentId!=null) {
-        getDbSqlSession().delete(ByteArrayEntity.class, contentId);
+        getByteArrayManager().deleteByteArrayById(contentId);
       }
-      getDbSqlSession().delete(AttachmentEntity.class, attachment.getId());
+      getDbSqlSession().delete(attachment);
     }
   }
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/EventSubscriptionManager.java
Patch:
@@ -41,7 +41,7 @@ public void insert(EventSubscriptionEntity persistentObject) {
   }
   
   public void deleteEventSubscription(EventSubscriptionEntity persistentObject) {
-    getDbSqlSession().delete(persistentObject.getClass(), persistentObject.getId());
+    getDbSqlSession().delete(persistentObject);
     if(persistentObject instanceof SignalEventSubscriptionEntity) {
       createdSignalSubscriptions.remove(persistentObject);
     }

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -856,7 +856,7 @@ public void remove() {
     // finally delete this execution
     Context.getCommandContext()
       .getDbSqlSession()
-      .delete(ExecutionEntity.class, id);
+      .delete(this);
   }
 
   public void destroyScope(String reason) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/GroupManager.java
Patch:
@@ -50,8 +50,9 @@ public void updateGroup(GroupEntity updatedGroup) {
   }
 
   public void deleteGroup(String groupId) {
+    GroupEntity group = getDbSqlSession().selectById(GroupEntity.class, groupId);
     getDbSqlSession().delete("deleteMembershipsByGroupId", groupId);
-    getDbSqlSession().delete("deleteGroup", groupId);
+    getDbSqlSession().delete(group);
   }
 
   public GroupQuery createNewGroupQuery() {

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricDetailEntity.java
Patch:
@@ -46,7 +46,7 @@ public void delete() {
       .getCommandContext()
       .getDbSqlSession();
 
-    dbSqlSession.delete(HistoricDetailEntity.class, id);
+    dbSqlSession.delete(this);
   }
 
   // getters and setters //////////////////////////////////////////////////////

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricProcessInstanceManager.java
Patch:
@@ -54,6 +54,7 @@ public void deleteHistoricProcessInstanceByProcessDefinitionId(String processDef
   public void deleteHistoricProcessInstanceById(String historicProcessInstanceId) {
     if (historyLevel>ProcessEngineConfigurationImpl.HISTORYLEVEL_NONE) {
       CommandContext commandContext = Context.getCommandContext();
+      HistoricProcessInstanceEntity historicProcessInstance = findHistoricProcessInstance(historicProcessInstanceId);
       
       commandContext
         .getHistoricDetailManager()
@@ -71,7 +72,7 @@ public void deleteHistoricProcessInstanceById(String historicProcessInstanceId)
         .getHistoricTaskInstanceManager()
         .deleteHistoricTaskInstancesByProcessInstanceId(historicProcessInstanceId);
 
-      getDbSqlSession().delete(HistoricProcessInstanceEntity.class, historicProcessInstanceId);
+      getDbSqlSession().delete(historicProcessInstance);
     }
   }
   

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricTaskInstanceManager.java
Patch:
@@ -90,7 +90,7 @@ public void deleteHistoricTaskInstanceById(String taskId) {
           .getAttachmentManager()
           .deleteAttachmentsByTaskId(taskId);
       
-        getDbSqlSession().delete(HistoricTaskInstanceEntity.class, taskId);
+        getDbSqlSession().delete(historicTaskInstance);
       }
     }
   }

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/IdentityInfoManager.java
Patch:
@@ -36,10 +36,10 @@ public void deleteUserInfoByUserIdAndKey(String userId, String key) {
   }
 
   public void deleteIdentityInfo(IdentityInfoEntity identityInfo) {
-    getDbSqlSession().delete(IdentityInfoEntity.class, identityInfo.getId());
+    getDbSqlSession().delete(identityInfo);
     if (IdentityInfoEntity.TYPE_USERACCOUNT.equals(identityInfo.getType())) {
       for (IdentityInfoEntity identityInfoDetail: findIdentityInfoDetails(identityInfo.getId())) {
-        getDbSqlSession().delete(IdentityInfoEntity.class, identityInfoDetail.getId());
+        getDbSqlSession().delete(identityInfoDetail);
       }
     }
   }

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/IdentityLinkManager.java
Patch:
@@ -27,7 +27,7 @@
 public class IdentityLinkManager extends AbstractManager {
 
   public void deleteIdentityLink(IdentityLinkEntity identityLink) {
-    getDbSqlSession().delete(IdentityLinkEntity.class, identityLink.getId());
+    getDbSqlSession().delete(identityLink);
   }
   
   @SuppressWarnings("unchecked")

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -100,11 +100,11 @@ public void delete() {
       .getCommandContext()
       .getDbSqlSession();
 
-    dbSqlSession.delete(getClass(), id);
+    dbSqlSession.delete(this);
 
     // Also delete the job's exception byte array
     if (exceptionByteArrayId != null) {
-      dbSqlSession.delete(ByteArrayEntity.class, exceptionByteArrayId);
+      Context.getCommandContext().getByteArrayManager().deleteByteArrayById(exceptionByteArrayId);
     }
     
     // remove link to execution

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ProcessDefinitionEntity.java
Patch:
@@ -168,7 +168,7 @@ public void deleteIdentityLink(String userId, String groupId) {
       Context
         .getCommandContext()
         .getDbSqlSession()
-        .delete(IdentityLinkEntity.class, identityLink.getId());
+        .delete(identityLink);
     }
   }
   

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -294,7 +294,7 @@ public void deleteIdentityLink(String userId, String groupId, String type) {
       Context
         .getCommandContext()
         .getDbSqlSession()
-        .delete(IdentityLinkEntity.class, identityLink.getId());
+        .delete(identityLink);
     }
   }
   

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskManager.java
Patch:
@@ -74,7 +74,7 @@ public void deleteTask(TaskEntity task, String deleteReason, boolean cascade) {
           .markTaskInstanceEnded(taskId, deleteReason);
       }
         
-      getDbSqlSession().delete(TaskEntity.class, task.getId());
+      getDbSqlSession().delete(task);
     }
   }
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/UserEntity.java
Patch:
@@ -73,8 +73,8 @@ public void setPicture(Picture picture) {
     if (pictureByteArrayId!=null) {
       Context
         .getCommandContext()
-        .getDbSqlSession()
-        .delete(ByteArrayEntity.class, pictureByteArrayId);
+        .getByteArrayManager()
+        .deleteByteArrayById(pictureByteArrayId);
     }
     if (picture!=null) {
       pictureByteArray = new ByteArrayEntity(picture.getMimeType(), picture.getBytes());

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/UserManager.java
Patch:
@@ -59,14 +59,14 @@ public void deleteUser(String userId) {
     UserEntity user = findUserById(userId);
     if (user!=null) {
       if (user.getPictureByteArrayId()!=null) {
-        getDbSqlSession().delete(ByteArrayEntity.class, user.getPictureByteArrayId());
+        getByteArrayManager().deleteByteArrayById(user.getPictureByteArrayId());
       }
       List<IdentityInfoEntity> identityInfos = getDbSqlSession().selectList("selectIdentityInfoByUserId", userId);
       for (IdentityInfoEntity identityInfo: identityInfos) {
         getIdentityInfoManager().deleteIdentityInfo(identityInfo);
       }
       getDbSqlSession().delete("deleteMembershipsByUserId", userId);
-      getDbSqlSession().delete("deleteUser", userId);
+      getDbSqlSession().delete(user);
     }
   }
   

File: activiti-engine/src/main/java/org/activiti/engine/repository/DeploymentBuilder.java
Patch:
@@ -18,7 +18,7 @@
 /**
  * Builder for creating new deployments.
  * 
- * A builder instance can be obtained through {@link org.activiti.engine.RuntimeService#createDeployment()}.
+ * A builder instance can be obtained through {@link org.activiti.engine.RepositoryService#createDeployment()}.
  * 
  * Multiple resources can be added to one deployment before calling the {@link #deploy()}
  * operation.

File: activiti-engine/src/main/java/org/activiti/engine/impl/form/DefaultStartFormHandler.java
Patch:
@@ -38,7 +38,9 @@ public void parseConfiguration(Element activityElement, DeploymentEntity deploym
 
   public StartFormData createStartFormData(ProcessDefinitionEntity processDefinition) {
     StartFormDataImpl startFormData = new StartFormDataImpl();
-    startFormData.setFormKey(formKey);
+    if (formKey != null) {
+      startFormData.setFormKey(formKey.getExpressionText());
+    }
     startFormData.setDeploymentId(deploymentId);
     startFormData.setProcessDefinition(processDefinition);
     initializeFormProperties(startFormData, null);

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -1737,14 +1737,14 @@ public ActivityImpl parseBusinessRuleTask(Element businessRuleTaskElement, Scope
       }
   
       if (ruleVariableInputString != null) {
-        String[] ruleVariableInputObjects = ruleVariableInputString.split(",");
+        List<String> ruleVariableInputObjects = parseCommaSeparatedList(ruleVariableInputString);
         for (String ruleVariableInputObject : ruleVariableInputObjects) {
           ruleActivity.addRuleVariableInputIdExpression(expressionManager.createExpression(ruleVariableInputObject.trim()));
         }
       }
   
       if (rulesString != null) {
-        String[] rules = rulesString.split(",");
+        List<String> rules = parseCommaSeparatedList(rulesString);
         for (String rule : rules) {
           ruleActivity.addRuleIdExpression(expressionManager.createExpression(rule.trim()));
         }

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -66,6 +66,8 @@ public class BpmnDeployer implements Deployer {
   protected IdGenerator idGenerator;
 
   public void deploy(DeploymentEntity deployment) {
+    LOG.info("Processing deployment " + deployment.getName());
+    
     List<ProcessDefinitionEntity> processDefinitions = new ArrayList<ProcessDefinitionEntity>();
     Map<String, ResourceEntity> resources = deployment.getResources();
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/variable/SerializableType.java
Patch:
@@ -57,7 +57,7 @@ public Object getValue(ValueFields valueFields) {
       }
       
     } catch (Exception e) {
-      throw new ActivitiException("coudn't deserialize object in variable '"+valueFields.getName()+"'", e);
+      throw new ActivitiException("Couldn't deserialize object in variable '"+valueFields.getName()+"'", e);
     } finally {
       IoUtil.closeSilently(bais);
     }
@@ -90,7 +90,7 @@ public static byte[] serialize(Object value, ValueFields valueFields) {
       ois = new ObjectOutputStream(baos);
       ois.writeObject(value);
     } catch (Exception e) {
-      throw new ActivitiException("coudn't serialize value '"+value+"' in variable '"+valueFields.getName()+"'", e);
+      throw new ActivitiException("Couldn't serialize value '"+value+"' in variable '"+valueFields.getName()+"'", e);
     } finally {
       IoUtil.closeSilently(ois);
     }

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -78,6 +78,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement("postgres", "insertComment", "insertComment_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByTaskId", "selectCommentsByTaskId_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByProcessInstanceId", "selectCommentsByProcessInstanceId_postgres");
+    addDatabaseSpecificStatement("postgres", "selectEventsByTaskId", "selectEventsByTaskId_postgres");
         
     // oracle
     databaseSpecificLimitBeforeStatements.put("oracle", "select * from ( select a.*, ROWNUM rnum from (");

File: activiti-engine/src/main/java/org/activiti/engine/impl/identity/Account.java
Patch:
@@ -18,6 +18,8 @@
 
 /**
  * @author Tom Baeyens
+ * 
+ * @deprecated Will be removed in Activiti 5.12
  */
 public interface Account {
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/AttachmentEntity.java
Patch:
@@ -17,14 +17,15 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.task.Attachment;
 
 
 /**
  * @author Tom Baeyens
  */
-public class AttachmentEntity implements Attachment, PersistentObject, Serializable {
+public class AttachmentEntity implements Attachment, PersistentObject, HasRevision, Serializable {
 
   private static final long serialVersionUID = 1L;
   

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ByteArrayEntity.java
Patch:
@@ -14,12 +14,13 @@
 
 import java.io.Serializable;
 
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 
 /**
  * @author Tom Baeyens
  */
-public class ByteArrayEntity implements Serializable, PersistentObject {
+public class ByteArrayEntity implements Serializable, PersistentObject, HasRevision {
 
   private static final long serialVersionUID = 1L;
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/CommentEntity.java
Patch:
@@ -35,6 +35,9 @@ public class CommentEntity implements Comment, Event, PersistentObject, Serializ
   public static final String TYPE_COMMENT = "comment";
   
   protected String id;
+  
+  // If comments would be removeable, revision needs to be added!
+  
   protected String type;
   protected String userId;
   protected Date time;

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/EventSubscriptionEntity.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.impl.context.Context;
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.impl.event.EventHandler;
 import org.activiti.engine.impl.interceptor.CommandContext;
@@ -30,7 +31,7 @@
 /**
  * @author Daniel Meyer
  */
-public abstract class EventSubscriptionEntity implements PersistentObject, Serializable {
+public abstract class EventSubscriptionEntity implements PersistentObject, HasRevision, Serializable {
 
   private static final long serialVersionUID = 1L;
   

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ExecutionEntity.java
Patch:
@@ -26,6 +26,7 @@
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.db.DbSqlSession;
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.impl.history.handler.ActivityInstanceEndHandler;
 import org.activiti.engine.impl.interceptor.CommandContext;
@@ -63,7 +64,7 @@
  * @author Daniel Meyer
  * @author Falko Menge
  */
-public class ExecutionEntity extends VariableScopeImpl implements ActivityExecution, ExecutionListenerExecution, Execution, PvmExecution, ProcessInstance, InterpretableExecution, PersistentObject {
+public class ExecutionEntity extends VariableScopeImpl implements ActivityExecution, ExecutionListenerExecution, Execution, PvmExecution, ProcessInstance, InterpretableExecution, PersistentObject, HasRevision {
 
   private static final long serialVersionUID = 1L;
   

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/HistoricVariableInstanceEntity.java
Patch:
@@ -18,17 +18,16 @@
 import java.util.List;
 
 import org.activiti.engine.history.HistoricVariableInstance;
-import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.context.Context;
-import org.activiti.engine.impl.db.DbSqlSession;
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.impl.variable.ValueFields;
 import org.activiti.engine.impl.variable.VariableType;
 
 /**
  * @author Christian Lipphardt (camunda)
  */
-public class HistoricVariableInstanceEntity implements ValueFields, HistoricVariableInstance, PersistentObject, Serializable {
+public class HistoricVariableInstanceEntity implements ValueFields, HistoricVariableInstance, PersistentObject, HasRevision, Serializable {
 
   private static final long serialVersionUID = 1L;
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/IdentityInfoEntity.java
Patch:
@@ -17,14 +17,15 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.impl.identity.Account;
 
 
 /**
  * @author Tom Baeyens
  */
-public class IdentityInfoEntity implements PersistentObject, Account, Serializable {
+public class IdentityInfoEntity implements PersistentObject, HasRevision, Account, Serializable {
   
   private static final long serialVersionUID = 1L;
   

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/JobEntity.java
Patch:
@@ -21,6 +21,7 @@
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.db.DbSqlSession;
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.jobexecutor.JobHandler;
@@ -35,7 +36,7 @@
  * @author Dave Syer
  * @author Frederik Heremans
  */
-public abstract class JobEntity implements Serializable, Job, PersistentObject {
+public abstract class JobEntity implements Serializable, Job, PersistentObject, HasRevision {
 
   public static final boolean DEFAULT_EXCLUSIVE = true;
   public static final int DEFAULT_RETRIES = 3;

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ProcessDefinitionEntity.java
Patch:
@@ -26,6 +26,7 @@
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.db.DbSqlSession;
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.impl.form.StartFormHandler;
 import org.activiti.engine.impl.identity.Authentication;
@@ -43,7 +44,7 @@
  * @author Tom Baeyens
  * @author Daniel Meyer
  */
-public class ProcessDefinitionEntity extends ProcessDefinitionImpl implements ProcessDefinition, PersistentObject {
+public class ProcessDefinitionEntity extends ProcessDefinitionImpl implements ProcessDefinition, PersistentObject, HasRevision {
 
   private static final long serialVersionUID = 1L;
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/PropertyEntity.java
Patch:
@@ -15,14 +15,15 @@
 import java.io.Serializable;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 
 
 
 /**
  * @author Tom Baeyens
  */
-public class PropertyEntity implements PersistentObject, Serializable {
+public class PropertyEntity implements PersistentObject, HasRevision, Serializable {
 
   private static final long serialVersionUID = 1L;
   

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/VariableInstanceEntity.java
Patch:
@@ -16,17 +16,16 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.context.Context;
-import org.activiti.engine.impl.db.DbSqlSession;
+import org.activiti.engine.impl.db.HasRevision;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.impl.variable.ValueFields;
 import org.activiti.engine.impl.variable.VariableType;
 
 /**
  * @author Tom Baeyens
  */
-public class VariableInstanceEntity implements ValueFields, PersistentObject, Serializable {
+public class VariableInstanceEntity implements ValueFields, PersistentObject, HasRevision, Serializable {
 
   private static final long serialVersionUID = 1L;
 

File: activiti-engine/src/test/java/org/activiti/engine/test/bpmn/usertask/UserTaskTest.java
Patch:
@@ -46,5 +46,5 @@ public void testTaskPropertiesNotNull() {
       assertEquals(0, taskService.getTaskEvents(task.getId()).size());
     }
   }
-
+  
 }

File: cycle/src/test/java/com/camunda/fox/cycle/connector/signavio/SignavioClientProxyIT.java
Patch:
@@ -34,6 +34,7 @@
 import org.xml.sax.SAXException;
 
 import com.camunda.fox.cycle.entity.ConnectorConfiguration;
+import com.camunda.fox.cycle.exception.CycleException;
 import com.camunda.fox.cycle.util.BpmnNamespaceContext;
 import com.camunda.fox.cycle.util.IoUtil;
 
@@ -198,7 +199,7 @@ public void testImportSignavioArchive() throws ParseException, IOException, JSON
     }
   }
 
-  @Test(expected=NullPointerException.class)
+  @Test(expected=CycleException.class)
   public void testDispose() {
     signavioClient.dispose();
     // should throw NPE

File: cycle/src/test/java/com/camunda/fox/cycle/connector/signavio/SignavioClientIT.java
Patch:
@@ -34,6 +34,7 @@
 import org.xml.sax.SAXException;
 
 import com.camunda.fox.cycle.entity.ConnectorConfiguration;
+import com.camunda.fox.cycle.exception.CycleException;
 import com.camunda.fox.cycle.util.BpmnNamespaceContext;
 import com.camunda.fox.cycle.util.IoUtil;
 
@@ -200,7 +201,7 @@ public void testImportSignavioArchive() throws ParseException, IOException, JSON
     }
   }
 
-  @Test(expected=NullPointerException.class)
+  @Test(expected=CycleException.class)
   public void testDispose() {
     signavioClient.dispose();
     // should throw NPE

File: cycle/src/test/java/com/camunda/fox/cycle/connector/signavio/SignavioClientIT.java
Patch:
@@ -54,7 +54,8 @@ public class SignavioClientIT {
   public void setUp() throws Exception {
     configuration = connectorConfiguration.get(0);
     signavioClient = 
-            new SignavioClient(configuration.getProperties().get(SignavioConnector.CONFIG_KEY_SIGNAVIO_BASE_URL),
+            new SignavioClient(configuration.getName(),
+                               configuration.getProperties().get(SignavioConnector.CONFIG_KEY_SIGNAVIO_BASE_URL),
                                configuration.getProperties().get(SignavioConnector.CONFIG_KEY_PROXY_URL),
                                configuration.getProperties().get(SignavioConnector.CONFIG_KEY_PROXY_USERNAME),
                                configuration.getProperties().get(SignavioConnector.CONFIG_KEY_PROXY_PASSWORD),

File: cycle/src/test/java/com/camunda/fox/cycle/connector/signavio/SignavioClientProxyIT.java
Patch:
@@ -54,7 +54,8 @@ public class SignavioClientProxyIT {
   public void setUp() throws Exception {
     configuration = connectorConfiguration.get(1);
     signavioClient = 
-            new SignavioClient(configuration.getProperties().get(SignavioConnector.CONFIG_KEY_SIGNAVIO_BASE_URL),
+            new SignavioClient(configuration.getName(),
+                               configuration.getProperties().get(SignavioConnector.CONFIG_KEY_SIGNAVIO_BASE_URL),
                                configuration.getProperties().get(SignavioConnector.CONFIG_KEY_PROXY_URL),
                                configuration.getProperties().get(SignavioConnector.CONFIG_KEY_PROXY_USERNAME),
                                configuration.getProperties().get(SignavioConnector.CONFIG_KEY_PROXY_PASSWORD),

File: cycle/src/main/java/com/camunda/fox/cycle/connector/signavio/SignavioConnector.java
Patch:
@@ -77,14 +77,15 @@ public void init(ConnectorConfiguration config) {
         
         String defaultCommitMessage = getDefaultCommitMessage();
         
-        signavioClient = new SignavioClient(getConfiguration().getProperties().get(CONFIG_KEY_SIGNAVIO_BASE_URL),
+        signavioClient = new SignavioClient(getConfiguration().getName(),
+                                            getConfiguration().getProperties().get(CONFIG_KEY_SIGNAVIO_BASE_URL),
                                             getConfiguration().getProperties().get(CONFIG_KEY_PROXY_URL),
                                             getConfiguration().getProperties().get(CONFIG_KEY_PROXY_USERNAME),
                                             getConfiguration().getProperties().get(CONFIG_KEY_PROXY_PASSWORD),
                                             defaultCommitMessage);
       }
     } catch (URISyntaxException e) {
-      throw new CycleException("Unable to initialize Signavio REST client!", e);
+      throw new CycleException("Unable to initialize Signavio REST client for connector '" + getConfiguration().getName() + "'!", e);
     }
   }
 

File: cycle/src/main/java/com/camunda/fox/cycle/connector/svn/SvnConnector.java
Patch:
@@ -159,7 +159,7 @@ public List<ConnectorNode> getChildren(ConnectorNode parent) {
       return nodes;
     } catch (Exception e) {
       logger.log(Level.FINER, "Cannot get children for node " + parent.getId(), e);
-      throw new CycleException("Children for SVN connector '" + getConfiguration().getName() + "' could not be loaded in repository '" + parent.getId() + "'.", e);
+      throw new CycleException("Children for SVN connector '" + getConfiguration().getName() + "' could not be loaded from repository '" + parent.getId() + "'.", e);
     }
     
   }

File: cycle/src/main/java/com/camunda/fox/cycle/exception/CycleException.java
Patch:
@@ -23,7 +23,7 @@ public CycleException(Throwable cause) {
   @Override
   public String getMessage() {
     if(getCause() != null) {
-      return getCause().getMessage();
+      return super.getMessage() + " - " + getCause().getMessage();
     } else {
       return super.getMessage();
     }

File: cycle/src/main/java/com/camunda/fox/cycle/exception/CycleExceptionMapper.java
Patch:
@@ -19,7 +19,7 @@ public class CycleExceptionMapper implements ExceptionMapper<CycleException> {
 
   @Override
   public Response toResponse(CycleException exception) {
-    Logger.getLogger(getClass().getSimpleName()).log(Level.SEVERE, "Exception occured during request", exception);
+    Logger.getLogger(getClass().getSimpleName()).log(Level.SEVERE, "Exception occurred during request", exception);
     return JaxRsUtil.createResponse()
             .status(Status.INTERNAL_SERVER_ERROR)
             .entity(new ExceptionDTO(exception))

File: cycle/src/main/java/com/camunda/fox/cycle/connector/vfs/VfsConnector.java
Patch:
@@ -127,8 +127,6 @@ public InputStream getContent(ConnectorNode node) {
       IOUtils.closeQuietly(is);
       
       return new ByteArrayInputStream(os.toByteArray());
-    } catch (FileSystemException e) {
-      throw new CycleException(e);
     } catch (IOException e) {
       throw new CycleException(e);
     }

File: cycle/src/test/java/com/camunda/fox/cycle/connector/signavio/SignavioClientProxyIT.java
Patch:
@@ -127,8 +127,9 @@ public void testUpdateModel() throws JSONException, ParseException, IOException
       String importedModelSvg = signavioClient.getModelAsSVG(importedModelId);
       
       // update model
-      String updatedModel = signavioClient.updateModel(modelId, label, importedModelJson, importedModelSvg, folderId, "update model");
-      Assert.assertEquals("update model", SignavioJson.extractModelComment(new JSONObject(updatedModel)));
+      String comment = "updating model...";
+      String updatedModel = signavioClient.updateModel(modelId, label, importedModelJson, importedModelSvg, folderId, comment);
+      assertThat(updatedModel).contains(comment);
       
       // compare model contents
       InputStream newXmlContentStream = signavioClient.getXmlContent(modelId);

File: cycle/src/test/java/com/camunda/fox/cycle/connector/signavio/SignavioClientIT.java
Patch:
@@ -57,7 +57,8 @@ public void setUp() throws Exception {
             new SignavioClient(configuration.getProperties().get(SignavioConnector.CONFIG_KEY_SIGNAVIO_BASE_URL),
                                configuration.getProperties().get(SignavioConnector.CONFIG_KEY_PROXY_URL),
                                configuration.getProperties().get(SignavioConnector.CONFIG_KEY_PROXY_USERNAME),
-                               configuration.getProperties().get(SignavioConnector.CONFIG_KEY_PROXY_PASSWORD));
+                               configuration.getProperties().get(SignavioConnector.CONFIG_KEY_PROXY_PASSWORD),
+                               "");
     assertTrue("Failed to login.", signavioClient.login(configuration.getGlobalUser(), configuration.getGlobalPassword()));
   }
 

File: cycle/src/test/java/com/camunda/fox/cycle/connector/signavio/SignavioClientProxyIT.java
Patch:
@@ -57,7 +57,8 @@ public void setUp() throws Exception {
             new SignavioClient(configuration.getProperties().get(SignavioConnector.CONFIG_KEY_SIGNAVIO_BASE_URL),
                                configuration.getProperties().get(SignavioConnector.CONFIG_KEY_PROXY_URL),
                                configuration.getProperties().get(SignavioConnector.CONFIG_KEY_PROXY_USERNAME),
-                               configuration.getProperties().get(SignavioConnector.CONFIG_KEY_PROXY_PASSWORD));
+                               configuration.getProperties().get(SignavioConnector.CONFIG_KEY_PROXY_PASSWORD),
+                               "");
     assertTrue("Failed to login.", signavioClient.login(configuration.getGlobalUser(), configuration.getGlobalPassword()));
   }
 

File: cycle/src/main/java/com/camunda/fox/cycle/connector/Connector.java
Patch:
@@ -57,9 +57,7 @@ public void login(String userName, String password) {
   public void dispose() {
   }
 
-  public boolean needsLogin() {
-    return false;
-  }
+  public abstract boolean needsLogin();
 
   public ConnectorConfiguration getConfiguration() {
     return configuration;

File: cycle/src/main/java/com/camunda/fox/cycle/connector/signavio/SignavioConnector.java
Patch:
@@ -58,7 +58,7 @@ public void login(String username, String password) {
     getSignavioClient().login(username, password);
     loggedIn = true;
   }
-  
+
   @Override
   public boolean needsLogin() {
     return !loggedIn;

File: cycle/src/main/java/com/camunda/fox/cycle/web/service/resource/ConnectorService.java
Patch:
@@ -13,6 +13,7 @@
 import javax.ws.rs.Produces;
 import javax.ws.rs.QueryParam;
 import javax.ws.rs.core.Response;
+import javax.ws.rs.core.Response.Status;
 
 import com.camunda.fox.cycle.connector.Connector;
 import com.camunda.fox.cycle.connector.ConnectorNode;
@@ -94,14 +95,14 @@ public Response getTypedContent(@PathParam("connectorId") long connectorId, @Que
     
     // nre: TODO: Why not guess by extension?
     try {
-      return Response.ok(IoUtil.readInputStream(content, connectorId + "-" + nodeId + "-content-stream"))
+      return createResponse().status(Status.OK).entity(IoUtil.readInputStream(content, connectorId + "-" + nodeId + "-content-stream"))
               .header("Content-Type", type.getMimeType())
               .build();
     } finally {
       IoUtil.closeSilently(content);
     }
   }
-  
+
   @GET
   @Path("{connectorId}/contents/info")
   public ContentInformation getContentInfo(

File: qa/cycle-tests/src/test/java/com/camunda/fox/cycle/test/TestCycleRoundtripIT.java
Patch:
@@ -73,10 +73,10 @@ public static void testCycleDeployment() throws Exception {
       if("jboss".equals(serverName)) {
         httpPort = "38080";    
       } else if("glassfish".equals(serverName)) {
-        httpPort = "28080";
+        httpPort = "38080";
       } else if ("websphere".equals(serverName)) {
         // TODO!
-        httpPort = "9080";
+        httpPort = "9082";
       }
     }
     
@@ -112,7 +112,7 @@ public static void testCycleDeployment() throws Exception {
       createVfsConnector();
       createRoundtripWithDetails();
     } else {
-      Assert.fail("Cycle is not available! Check cycle deployment.");
+      throw new RuntimeException("Cycle is not available! Check cycle deployment.");
     }
   }
   

File: cycle/src/main/java/com/camunda/fox/cycle/connector/ConnectorRegistry.java
Patch:
@@ -119,7 +119,7 @@ public Connector getConnector(Class<? extends Connector> cls) {
    * 
    * @throws CycleException if the connector is unavailable
    */
-  public Connector getConnector(long connectorId) {
+  public synchronized Connector getConnector(long connectorId) {
     Connector connector = cache.get(connectorId);
     if (connector == null) {
       connector = instantiateConnector(connectorId);

File: cycle/src/main/java/com/camunda/fox/cycle/connector/signavio/SignavioClient.java
Patch:
@@ -454,7 +454,7 @@ private void configureProxy() throws URISyntaxException {
       String proxyHost = proxyURI.getHost();
       int proxyPort = proxyURI.getPort();
       apacheHttpClient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY,
-              new HttpHost(proxyHost, proxyPort, proxyURI.getScheme()));
+              new HttpHost(proxyHost, proxyPort));
       
       if (proxyUsername != null && !proxyUsername.isEmpty() && proxyPassword != null && !proxyPassword.isEmpty()) {
         apacheHttpClient.getCredentialsProvider().setCredentials(

File: cycle/src/main/java/com/camunda/fox/cycle/web/dto/SynchronizationResultDTO.java
Patch:
@@ -7,6 +7,8 @@ public class SynchronizationResultDTO {
   
   private String message;
   
+  public SynchronizationResultDTO() { }
+  
   public SynchronizationResultDTO(SynchronizationStatus status) {
     this.status = status;
   }

File: cycle/src/main/java/com/camunda/fox/cycle/connector/svn/SvnConnector.java
Patch:
@@ -261,9 +261,8 @@ public ContentInformation updateContent(ConnectorNode node, InputStream newConte
       
       stopTransaction();
       
-      ContentInformation result = new ContentInformation(true, new Date(file.lastModified())); 
       deleteRecursively(temporaryFileStore);
-      return result;
+      return getContentInformation(node);
     } catch (Exception e) {
       stopTransaction();
       logger.log(Level.FINER, "Error while updating file '" + node.getLabel() + "' in '" + extractParentFolder(node) + "'.", e);

File: cycle/src/main/java/com/camunda/fox/security/web/SecurityFilter.java
Patch:
@@ -64,7 +64,6 @@ void doFilterSecure(HttpServletRequest request, HttpServletResponse response, Fi
     else {
       String uri = performSecurityCheck(request.getRequestURI(), request, response);
       if (uri != null) {
-        boolean forward = false;
 
         // handle special do nothing actions
         // needed in case of ajax requests where only a 
@@ -73,6 +72,8 @@ void doFilterSecure(HttpServletRequest request, HttpServletResponse response, Fi
           return;
         }
 
+        boolean forward = false;
+
         if (uri.startsWith("forward:")) {
           uri = uri.substring("forward:".length());
           forward = true;
@@ -90,7 +91,7 @@ void doFilterSecure(HttpServletRequest request, HttpServletResponse response, Fi
     chain.doFilter(request, response);
   }
 
-  private String performSecurityCheck(String requestUri, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
+  String performSecurityCheck(String requestUri, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
     if (requiresAuthentication(requestUri)) {
       if (isAjax(request)) {
         response.sendError(401, "Authorization required");

File: cycle/src/main/java/com/camunda/fox/cycle/entity/BpmnDiagram.java
Patch:
@@ -22,7 +22,7 @@
 public class BpmnDiagram extends AbstractEntity {
   
   private static final long serialVersionUID = 1L;
-  
+  // FIXME what is what?
   public static enum Status {
     UNSPECIFIED,
     UNAVAILABLE, 

File: cycle/src/main/java/com/camunda/fox/cycle/web/service/AbstractRestService.java
Patch:
@@ -32,7 +32,7 @@ protected Response redirectTo(String uri) {
    */
   protected WebApplicationException notFound(String message) {
     
-    return createWebApplicationException(message, Response.Status.FORBIDDEN);
+    return createWebApplicationException(message, Response.Status.NOT_FOUND);
   }
 
   /**

File: cycle/src/test/java/com/camunda/fox/cycle/web/service/resource/diagram/BpmnDiagramServiceSyncStatusTest.java
Patch:
@@ -35,9 +35,11 @@ public class BpmnDiagramServiceSyncStatusTest extends AbstractDiagramServiceTest
   @Inject
   @ReplaceWithMock
   private ConnectorRegistry registry;
+  
   @Inject
   @ReplaceWithMock
   private ConnectorCache connectorCache;
+  
   @Inject
   @ReplaceWithMock
   private DummyConnector connector;

File: cycle/src/main/java/com/camunda/fox/cycle/web/service/resource/BpmnDiagramService.java
Patch:
@@ -35,6 +35,8 @@
 @Path("secured/resource/diagram")
 public class BpmnDiagramService extends AbstractRestService {
 
+  private static final int OFFSET = 5000;
+
   private static Logger log = Logger.getLogger(BpmnDiagramService.class.getName());
   
   @Inject
@@ -79,7 +81,7 @@ public Response getImage(@PathParam("id") long id) {
       Date imageLastModified = imageInformation.getLastModified();
       if (imageLastModified != null) {
         // need to do comparison based on timestamp to ignore time zones
-        if ((imageLastModified.getTime() + 5000) < diagramLastModified.getTime()) {
+        if ((imageLastModified.getTime() + OFFSET) < diagramLastModified.getTime()) {
           // diagram is younger than the image --> image out of date
           throw notFound("no up to date image");
         }

File: cycle/src/test/java/com/camunda/fox/cycle/connector/AbstractConnectorTestBase.java
Patch:
@@ -10,6 +10,7 @@
 
 import org.junit.Test;
 
+import com.camunda.fox.cycle.util.DateUtil;
 import com.camunda.fox.cycle.util.IoUtil;
 
 /**
@@ -168,7 +169,7 @@ public void shouldUpdateSingleFileContentFromConnector() throws Exception {
     ConnectorNode sourceFileNode = new ConnectorNode("//" + TMP_DIR_NAME + "/test-lhs.bpmn", "test-lhs.bpmn");
 
     // now, with seconds accuracy
-    Date now = new Date((System.currentTimeMillis() / 1000) * 1000);
+    Date now = DateUtil.getNormalizedDate(System.currentTimeMillis());
 
     try {
       originalInputStream = connector.getContent(sourceFileNode);
@@ -206,7 +207,7 @@ public void shouldUpdateSingleFileContents() throws Exception {
     InputStream nodeInputStream = null;
 
     // now, with seconds accuracy
-    Date beforeUpdate = new Date((System.currentTimeMillis() / 1000) * 1000);
+    Date beforeUpdate = DateUtil.getNormalizedDate(System.currentTimeMillis());
 
     try {
       originalInputStream = getDiagramResourceAsStream("test-rhs.bpmn");

File: cycle/src/test/java/com/camunda/fox/cycle/web/service/resource/RoundtripServiceTest.java
Patch:
@@ -166,6 +166,8 @@ public void shouldSynchronizeLeftToRight() throws FileNotFoundException, Excepti
     RoundtripDTO testRoundtrip = createAndFlushRoundtrip();
     BpmnDiagramDTO rightHandSide = testRoundtrip.getRightHandSide();
     
+    Thread.sleep(6000);
+    
     roundtripService.doSynchronize(SyncMode.LEFT_TO_RIGHT, testRoundtrip.getId());
     
     assertThatIsInSync(testRoundtrip.getRightHandSide());

File: cycle/src/main/java/com/camunda/fox/cycle/web/service/resource/BpmnDiagramService.java
Patch:
@@ -184,7 +184,7 @@ public BpmnDiagramStatusDTO synchronizationStatus(@PathParam("id") long id) {
     // update last modified diagram status
     diagram.setLastModified(lastModified);
     
-    BpmnDiagramStatusDTO statusDTO = new BpmnDiagramStatusDTO(diagram.getId(), status, lastModified);
+    BpmnDiagramStatusDTO statusDTO = new BpmnDiagramStatusDTO(diagram.getId(), status, diagram.getLastModified());
     statusDTO.setLastUpdated(new Date());
     return statusDTO;
   }

File: cycle/src/main/java/com/camunda/fox/cycle/web/service/resource/BpmnDiagramService.java
Patch:
@@ -78,7 +78,8 @@ public Response getImage(@PathParam("id") long id) {
       
       Date imageLastModified = imageInformation.getLastModified();
       if (imageLastModified != null) {
-        if (imageLastModified.before(diagramLastModified)) {
+        // need to do comparison based on timestamp to ignore time zones
+        if (imageLastModified.getTime() < diagramLastModified.getTime()) {
           // diagram is younger than the image --> image out of date
           throw notFound("no up to date image");
         }

File: cycle/src/main/java/com/camunda/fox/cycle/web/service/resource/BpmnDiagramService.java
Patch:
@@ -160,7 +160,7 @@ public BpmnDiagramStatusDTO synchronizationStatus(@PathParam("id") long id) {
       notFoundStatus.setLastUpdated(new Date());
       return notFoundStatus;
     }
-    
+
     Status status = Status.UNSPECIFIED;
     Date lastModified = null;
 

File: cycle/src/main/java/com/camunda/fox/cycle/web/service/resource/RoundtripService.java
Patch:
@@ -196,14 +196,13 @@ public RoundtripDTO create(@PathParam("id") long roundtripId, @QueryParam("diagr
     
     Roundtrip roundtrip = roundtripRepository.findById(roundtripId);
     if (roundtrip == null) {
-      throw new IllegalArgumentException("Roundtrip not found");
+      throw notFound("Roundtrip not found");
     }
     
     if (roundtrip.getLeftHandSide() == null && roundtrip.getRightHandSide() == null) {
       throw new CycleException("No model exists in roundtrip '" + roundtrip.getName() + "'. It is not possible to create a diagram model.");
     }
     
-    
     Connector connector = connectorRegistry.getConnector(connectorId);
     if (!(connector instanceof SignavioConnector)) {
       if (!diagramLabel.endsWith(".xml") && !diagramLabel.endsWith(".bpmn")) {

File: cycle/src/test/java/com/camunda/fox/cycle/connector/VfsConnectorTest.java
Patch:
@@ -4,8 +4,6 @@
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 
-import com.camunda.fox.cycle.connector.AbstractConnectorTestBase;
-import com.camunda.fox.cycle.connector.Connector;
 import com.camunda.fox.cycle.connector.test.util.RepositoryUtil;
 import com.camunda.fox.cycle.connector.vfs.VfsConnector;
 import com.camunda.fox.cycle.entity.ConnectorConfiguration;

File: cycle/src/test/java/com/camunda/fox/cycle/repository/AbstractRepositoryTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.fest.assertions.api.Assertions.*;
 import org.junit.After;
 import static org.junit.Assume.*;
 import static org.junit.Assert.*;

File: cycle/src/test/java/com/camunda/fox/cycle/repository/BpmnDiagramRepositoryTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.camunda.fox.cycle.repository;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.fest.assertions.api.Assertions.*;
 
 import javax.inject.Inject;
 

File: cycle/src/test/java/com/camunda/fox/cycle/web/service/resource/diagram/BpmnDiagramServiceSyncStatusTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.fest.assertions.api.Assertions.*;
 
 import com.camunda.fox.cycle.connector.ConnectorRegistry;
 import com.camunda.fox.cycle.entity.BpmnDiagram;

File: cycle/src/test/java/com/camunda/fox/cycle/web/service/resource/diagram/BpmnDiagramServiceTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.camunda.fox.cycle.web.service.resource.diagram;
 
 import static org.mockito.BDDMockito.given;
-import static org.fest.assertions.Assertions.assertThat;
+import static org.fest.assertions.api.Assertions.*;
 
 import javax.inject.Inject;
 import javax.ws.rs.WebApplicationException;
@@ -18,8 +18,7 @@
 import com.camunda.fox.cycle.entity.BpmnDiagram;
 import com.camunda.fox.cycle.web.service.resource.ConnectorService;
 
-import static org.fest.assertions.Assertions.assertThat;
-import static org.fest.assertions.Fail.fail;
+import static org.fest.assertions.api.Assertions.*;
 import org.junit.Ignore;
 
 /**

File: cycle/src/main/java/com/camunda/fox/cycle/connector/svn/SvnConnector.java
Patch:
@@ -120,7 +120,7 @@ public List<ConnectorNode> getChildren(ConnectorNode parent) {
       return nodes;
     } catch (Exception e) {
       logger.log(Level.FINER, "Cannot get children for node " + parent.getId(), e);
-      throw new CycleException("Children for SVN connector '" + getConfiguration().getLabel() + "' could not be loaded in repository '" + parent.getId() + "'.", e);
+      throw new CycleException("Children for SVN connector '" + getConfiguration().getName() + "' could not be loaded in repository '" + parent.getId() + "'.", e);
     }
     
   }

File: cycle/src/main/java/com/camunda/fox/cycle/web/dto/ConnectorDTO.java
Patch:
@@ -14,7 +14,7 @@ public class ConnectorDTO {
   
   public ConnectorDTO(Connector connector) {
     this.connectorId = connector.getConfiguration().getId();
-    this.name = connector.getConfiguration().getLabel();
+    this.name = connector.getConfiguration().getName();
   }
     
   public String getName() {

File: cycle/src/test/java/com/camunda/fox/cycle/connector/signavio/SignavioConnectorTest.java
Patch:
@@ -53,7 +53,7 @@ public void testConfigurableViaXml() throws Exception {
     assertNotNull(config);
     
     assertTrue(config.getId() == 2);
-    assertEquals("My SignavioConnector", config.getLabel());
+    assertEquals("My SignavioConnector", config.getName());
     
     Map<String, String> prop = config.getProperties();
     assertNotNull(prop);

File: cycle/src/test/java/com/camunda/fox/cycle/connector/svn/SvnConnectorTest.java
Patch:
@@ -25,12 +25,12 @@ public static void beforeClass() throws Exception {
     connector.setConfiguration(config);
     connector.init();
   }
-  
+
   @AfterClass
   public static void afterClass() throws Exception {
     connector.deleteNode(TMP_FOLDER);
   }
-  
+
   @Override
   public Connector getConnector() {
     return connector;

File: cycle/src/test/java/com/camunda/fox/cycle/web/service/resource/BpmnDiagramServiceTest.java
Patch:
@@ -11,6 +11,7 @@
 import javax.ws.rs.core.Response;
 
 import org.junit.After;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.kubek2k.springockito.annotations.ReplaceWithMock;
@@ -31,7 +32,7 @@
 @RunWith(SpringJUnit4ClassRunner.class)
 @ContextConfiguration(
   loader = SpringockitoContextLoader.class,
-  locations = { "classpath:/spring/test-mock-context.xml", "classpath:/spring/test-persistence.xml" }
+  locations = { "classpath:/spring/mock/test-context.xml", "classpath:/spring/mock/test-persistence.xml" }
 )
 public class BpmnDiagramServiceTest {
 

File: activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/timer/IntermediateTimerEventTest.java
Patch:
@@ -66,8 +66,8 @@ public void testExpression() {
     assertEquals(1, managementService.createJobQuery().processInstanceId(pi1.getId()).count());
     assertEquals(1, managementService.createJobQuery().processInstanceId(pi2.getId()).count());
 
-    // After setting the clock to one second in the future the timers should fire
-    ClockUtil.setCurrentTime(new Date(currentTime.getTime() + 1000));
+    // After setting the clock to 2 seconds in the future the timers should fire
+    ClockUtil.setCurrentTime(new Date(currentTime.getTime() + 2000));
     
     List<Job> jobs = managementService.createJobQuery().executable().list();
     for (Job job : jobs) {

File: activiti-engine/src/test/java/org/activiti/examples/mgmt/ManagementServiceTest.java
Patch:
@@ -59,7 +59,7 @@ public void testGetTableMetaData() {
     assertTrue(createTimeIndex >= 0);
     
     assertOneOf(new String [] {"VARCHAR", "NVARCHAR2", "nvarchar", "NVARCHAR"}, tableMetaData.getColumnTypes().get(assigneeIndex));
-    assertOneOf(new String [] {"TIMESTAMP", "TIMESTAMP(6)", "datetime", "datetime2", "DATETIME"}, tableMetaData.getColumnTypes().get(createTimeIndex));
+    assertOneOf(new String [] {"TIMESTAMP", "TIMESTAMP(6)", "datetime", "DATETIME", "DATETIME2"}, tableMetaData.getColumnTypes().get(createTimeIndex));
   }
   
   private void assertOneOf(String[] possibleValues, String currentValue) {

File: activiti-engine/src/test/java/org/activiti/examples/mgmt/ManagementServiceTest.java
Patch:
@@ -59,7 +59,7 @@ public void testGetTableMetaData() {
     assertTrue(createTimeIndex >= 0);
     
     assertOneOf(new String [] {"VARCHAR", "NVARCHAR2", "nvarchar", "NVARCHAR"}, tableMetaData.getColumnTypes().get(assigneeIndex));
-    assertOneOf(new String [] {"TIMESTAMP", "TIMESTAMP(6)", "datetime", "DATETIME"}, tableMetaData.getColumnTypes().get(createTimeIndex));
+    assertOneOf(new String [] {"TIMESTAMP", "TIMESTAMP(6)", "datetime", "datetime2", "DATETIME"}, tableMetaData.getColumnTypes().get(createTimeIndex));
   }
   
   private void assertOneOf(String[] possibleValues, String currentValue) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/ExecutionQueryProperty.java
Patch:
@@ -31,7 +31,7 @@ public class ExecutionQueryProperty implements QueryProperty {
   private static final Map<String, ExecutionQueryProperty> properties = new HashMap<String, ExecutionQueryProperty>();
 
   public static final ExecutionQueryProperty PROCESS_INSTANCE_ID = new ExecutionQueryProperty("RES.ID_");
-  public static final ExecutionQueryProperty PROCESS_DEFINITION_KEY = new ExecutionQueryProperty("P.KEY_");
+  public static final ExecutionQueryProperty PROCESS_DEFINITION_KEY = new ExecutionQueryProperty("KEY_");
   public static final ExecutionQueryProperty PROCESS_DEFINITION_ID = new ExecutionQueryProperty("RES.ID_");
   
   private String name;

File: activiti-engine/src/main/java/org/activiti/engine/impl/ProcessInstanceQueryProperty.java
Patch:
@@ -32,8 +32,8 @@ public class ProcessInstanceQueryProperty implements QueryProperty {
   private static final Map<String, ProcessInstanceQueryProperty> properties = new HashMap<String, ProcessInstanceQueryProperty>();
 
   public static final ProcessInstanceQueryProperty PROCESS_INSTANCE_ID = new ProcessInstanceQueryProperty("RES.ID_");
-  public static final ProcessInstanceQueryProperty PROCESS_DEFINITION_KEY = new ProcessInstanceQueryProperty("P.KEY_");
-  public static final ProcessInstanceQueryProperty PROCESS_DEFINITION_ID = new ProcessInstanceQueryProperty("P.ID_");
+  public static final ProcessInstanceQueryProperty PROCESS_DEFINITION_KEY = new ProcessInstanceQueryProperty("KEY_");
+  public static final ProcessInstanceQueryProperty PROCESS_DEFINITION_ID = new ProcessInstanceQueryProperty("RES.ID_");
   
   private String name;
 

File: cycle/src/test/java/com/camunda/fox/cycle/connector/AbstractConnectorTestBase.java
Patch:
@@ -150,7 +150,7 @@ public void shouldUpdateSingleFileContents() throws Exception {
       
       // see if updated was set
       assertFalse(new Date().before(updatedContentInfo.getLastModified()));
-      assertFalse(now.after(updatedContentInfo.getLastModified()));
+      assertFalse(now.getTime() >= updatedContentInfo.getLastModified().getTime());
       
       // see if file contents equal the new contents
       nodeInputStream = connector.getContent(fileNode);

File: core/ext-config/src/main/java/com/camunda/fox/platform/impl/ext/config/engine/ProcessEnginesXmlSupportImpl.java
Patch:
@@ -130,7 +130,7 @@ public void stopProcessEngines(ProcessEngineService processEngineService) {
         errorMessage.append("   ");
         errorMessage.append(engineName);
       }
-      errorMessage.append("Consider restarting the fox platform.");
+      errorMessage.append("\nConsider restarting the fox platform.");
       log.severe(errorMessage.toString());      
     }
   }

File: activiti-engine/src/main/java/org/activiti/engine/impl/pvm/runtime/InterpretableExecution.java
Patch:
@@ -13,6 +13,7 @@
 
 package org.activiti.engine.impl.pvm.runtime;
 
+
 import org.activiti.engine.impl.pvm.PvmProcessElement;
 import org.activiti.engine.impl.pvm.PvmProcessInstance;
 import org.activiti.engine.impl.pvm.PvmTransition;
@@ -59,6 +60,8 @@ public interface InterpretableExecution extends ActivityExecution, ExecutionList
 
   void deleteCascade(String deleteReason);
   
+  void deleteCascade2(String deleteReason);
+  
   boolean isDeleteRoot();
 
   TransitionImpl getTransition();

File: core/ext-config/src/main/java/com/camunda/fox/platform/impl/ext/util/ServiceLoaderUtil.java
Patch:
@@ -13,7 +13,7 @@
 public class ServiceLoaderUtil {
 
   public static <T> T loadService(Class<T> type, Class<? extends T> defaultImplementation) {
-    ServiceLoader<T> loader = ServiceLoader.load(type);
+    ServiceLoader<T> loader = ServiceLoader.load(type, ServiceLoaderUtil.class.getClassLoader());
     Iterator<T> iterator = loader.iterator();
     if(iterator.hasNext()) {
       return iterator.next();

File: activiti-engine/src/main/java/org/activiti/engine/impl/ProcessInstanceQueryProperty.java
Patch:
@@ -32,8 +32,8 @@ public class ProcessInstanceQueryProperty implements QueryProperty {
   private static final Map<String, ProcessInstanceQueryProperty> properties = new HashMap<String, ProcessInstanceQueryProperty>();
 
   public static final ProcessInstanceQueryProperty PROCESS_INSTANCE_ID = new ProcessInstanceQueryProperty("RES.ID_");
-  public static final ProcessInstanceQueryProperty PROCESS_DEFINITION_KEY = new ProcessInstanceQueryProperty("RES.KEY_");
-  public static final ProcessInstanceQueryProperty PROCESS_DEFINITION_ID = new ProcessInstanceQueryProperty("RES.ID_");
+  public static final ProcessInstanceQueryProperty PROCESS_DEFINITION_KEY = new ProcessInstanceQueryProperty("P.KEY_");
+  public static final ProcessInstanceQueryProperty PROCESS_DEFINITION_ID = new ProcessInstanceQueryProperty("P.ID_");
   
   private String name;
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -13,7 +13,6 @@
 
 package org.activiti.engine.impl.db;
 
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
@@ -77,7 +76,6 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement("postgres", "insertComment", "insertComment_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByTaskId", "selectCommentsByTaskId_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByProcessInstanceId", "selectCommentsByProcessInstanceId_postgres");
-    addDatabaseSpecificStatement("postgres", "selectHistoricVariableInstanceByQueryCriteria", "selectHistoricVariableInstanceByQueryCriteria_postgres");
         
     // oracle
     databaseSpecificLimitBeforeStatements.put("oracle", "select * from ( select a.*, ROWNUM rnum from (");

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -117,7 +117,6 @@
 import org.activiti.engine.impl.util.xml.Parse;
 import org.activiti.engine.impl.variable.VariableDeclaration;
 import org.activiti.engine.repository.ProcessDefinition;
-import org.drools.core.util.StringUtils;
 
 /**
  * Specific parsing of one BPMN 2.0 XML file, created by the {@link BpmnParser}.
@@ -846,7 +845,7 @@ protected AbstractDataAssociation parseDataInputAssociation(Element dataAssociat
       targetRef = targetElement.getText();
     }
     
-    if (StringUtils.isEmpty(targetRef)) {
+    if (targetRef != null && targetRef.equals("")) {
       addError("targetRef is required", dataAssociationElement);
     }
     

File: cycle/src/main/java/com/camunda/fox/cycle/roundtrip/BpmnProcessModelUtil.java
Patch:
@@ -18,6 +18,7 @@
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.transform.stream.StreamResult;
 
+import org.springframework.stereotype.Component;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;

File: activiti-cdi/src/main/java/org/activiti/cdi/BusinessProcess.java
Patch:
@@ -406,7 +406,7 @@ public void setVariable(String variableName, Object value) {
   // ----------------------------------- Getters / Setters
 
   /*
-   * Note that Producers should go into {@link BusinessProcessProducers} in
+   * Note that Producers should go into {@link CurrentProcessInstance} in
    * order to allow for specializing {@link BusinessProcess}.
    */
 

File: activiti-cdi/src/main/java/org/activiti/cdi/ProcessVariables.java
Patch:
@@ -25,8 +25,8 @@
 import org.activiti.cdi.impl.ProcessVariableMap;
 
 /**
- * Allows to access the process variables of the managed process instance. A
- * process instnace cyn be managed, using the {@link BusinessProcess}-bean.
+ * Allows to access the process variables of a managed process instance.
+ * A process instance can be managed, using the {@link BusinessProcess}-bean.
  * 
  * @author Daniel Meyer
  */

File: cycle/src/main/java/com/camunda/fox/cycle/connector/signavio/SignavioConnector.java
Patch:
@@ -94,6 +94,7 @@ public class SignavioConnector extends Connector {
   private static final String MODEL_NAME_TEMPLATE = "cycle-import_";
   
   private static final String BPMN2_0_FILE_PROP = "bpmn2_0file";
+  private static final String X_SIGNAVIO_ID_PROP = "x-signavio-id";
 
   private static final String UTF_8 = "UTF-8";
 
@@ -182,7 +183,7 @@ public ClientResponse execute(ClientExecutionContext ctx) throws Exception {
           logger.fine("Sending request to " + uri);
           logger.fine("Request: " + request.getHeaders()+ "," + request.getBody());
           if (SignavioConnector.this.securityToken != null) {
-            request.header("x-signavio-id", SignavioConnector.this.securityToken);
+            request.header(X_SIGNAVIO_ID_PROP, SignavioConnector.this.securityToken);
           }
           
           ClientResponse<?> response =  ctx.proceed();
@@ -393,6 +394,7 @@ protected ConnectorNode importContent(ConnectorNode parent, String content, fina
       signavioURL = signavioURL + SLASH_CHAR + REPOSITORY_BACKEND_URL_SUFFIX;
     }
     HttpPost post = new HttpPost(signavioURL + BPMN2_0_IMPORT_SUFFIX);
+    post.addHeader(X_SIGNAVIO_ID_PROP, this.securityToken);
     
     MultipartEntity entity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
     // creating a temporary file

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/TerminateEndEventActivityBehavior.java
Patch:
@@ -40,7 +40,7 @@ public void execute(ActivityExecution execution) throws Exception {
   }
   
   
-  // If we use this implementation, we run into trouble in the DbSqlSession
+  // If we use this implementation, we run into trouble in the DbSqlSession, see ACT-1382
   
 //  public void execute(ActivityExecution execution) throws Exception {
 //    

File: activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerDeclarationImpl.java
Patch:
@@ -100,7 +100,7 @@ public TimerEntity prepareTimerEntity(ExecutionEntity executionEntity) {
     BusinessCalendar businessCalendar = Context
         .getProcessEngineConfiguration()
         .getBusinessCalendarManager()
-        .getBusinessCalendar(type.caledarName);
+        .getBusinessCalendar(type.calendarName);
     
     if (description==null) {
       // Prefent NPE from happening in the next line

File: activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerDeclarationType.java
Patch:
@@ -17,14 +17,13 @@
 import org.activiti.engine.impl.calendar.CycleBusinessCalendar;
 import org.activiti.engine.impl.calendar.DueDateBusinessCalendar;
 import org.activiti.engine.impl.calendar.DurationBusinessCalendar;
-import org.activiti.engine.impl.calendar.DurationHelper;
 
 public enum TimerDeclarationType {
   DATE(DueDateBusinessCalendar.NAME),DURATION(DurationBusinessCalendar.NAME),CYCLE(CycleBusinessCalendar.NAME);
 
-  public final String caledarName;
+  public final String calendarName;
 
   TimerDeclarationType(String caledarName) {
-    this.caledarName = caledarName;
+    this.calendarName = caledarName;
   }
 }

File: activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/ProcessInstanceQueryTest.java
Patch:
@@ -1106,7 +1106,7 @@ public void testNativeQuery() {
     long piCount = runtimeService.createProcessInstanceQuery().count();
     
     assertEquals(piCount, runtimeService.createNativeProcessInstanceQuery().sql("SELECT * FROM " + managementService.getTableName(ProcessInstance.class)).list().size());
-    assertEquals(piCount, runtimeService.createNativeProcessInstanceQuery().sql("SELECT count(*= FROM " + managementService.getTableName(ProcessInstance.class)).count());
+    assertEquals(piCount, runtimeService.createNativeProcessInstanceQuery().sql("SELECT count(*) FROM " + managementService.getTableName(ProcessInstance.class)).count());
   }  
 
 }

File: activiti-engine/src/test/java/org/activiti/engine/test/api/task/TaskQueryTest.java
Patch:
@@ -794,7 +794,7 @@ public void testNativeQuery() {
     assertEquals(12, taskService.createNativeTaskQuery().sql("SELECT * FROM " + managementService.getTableName(Task.class)).list().size());
     assertEquals(12, taskService.createNativeTaskQuery().sql("SELECT count(*) FROM " + managementService.getTableName(Task.class)).count());
     
-    assertEquals(144, taskService.createNativeTaskQuery().sql("SELECT count(*) FROM ACT_RU_TASK T1, ACT_RU_TASK T1").count());
+    assertEquals(144, taskService.createNativeTaskQuery().sql("SELECT count(*) FROM ACT_RU_TASK T1, ACT_RU_TASK T2").count());
     
     // join task and variable instances
     assertEquals(1, taskService.createNativeTaskQuery().sql("SELECT count(*) FROM " + managementService.getTableName(Task.class) + " T1, "+managementService.getTableName(VariableInstanceEntity.class)+" V1 WHERE V1.TASK_ID_ = T1.ID_").count());    

File: activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/ExecutionQueryTest.java
Patch:
@@ -1058,8 +1058,8 @@ public void testNativeQuery() {
     
     long executionCount = runtimeService.createExecutionQuery().count();
     
-    assertEquals(executionCount, runtimeService.createNativeExecutionQuery().from(managementService.getTableName(Execution.class)).list().size());
-    assertEquals(executionCount, runtimeService.createNativeExecutionQuery().from(managementService.getTableName(Execution.class)).count());
+    assertEquals(executionCount, runtimeService.createNativeExecutionQuery().sql("SELECT * FROM " + managementService.getTableName(Execution.class)).list().size());
+    assertEquals(executionCount, runtimeService.createNativeExecutionQuery().sql("SELECT count(*) FROM " + managementService.getTableName(Execution.class)).count());
   }
 
   @Deployment(resources={"org/activiti/engine/test/api/runtime/concurrentExecution.bpmn20.xml"})

File: activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/ProcessInstanceQueryTest.java
Patch:
@@ -1105,8 +1105,8 @@ public void testNativeQuery() {
     
     long piCount = runtimeService.createProcessInstanceQuery().count();
     
-    assertEquals(piCount, runtimeService.createNativeProcessInstanceQuery().from(managementService.getTableName(ProcessInstance.class)).list().size());
-    assertEquals(piCount, runtimeService.createNativeProcessInstanceQuery().from(managementService.getTableName(ProcessInstance.class)).count());
+    assertEquals(piCount, runtimeService.createNativeProcessInstanceQuery().sql("SELECT * FROM " + managementService.getTableName(ProcessInstance.class)).list().size());
+    assertEquals(piCount, runtimeService.createNativeProcessInstanceQuery().sql("SELECT count(*= FROM " + managementService.getTableName(ProcessInstance.class)).count());
   }  
 
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/form/EnumFormType.java
Patch:
@@ -55,7 +55,7 @@ public String convertModelValueToFormValue(Object modelValue) {
       }
       validateValue((String) modelValue);
     }
-    return null;
+    return (String) modelValue;
   }
   
   protected void validateValue(String value) {

File: qa/integration-tests/src/test/java/com/camunda/fox/platform/test/functional/ejb/request/JobExecutorRequestContextRemoteInvocationTest.java
Patch:
@@ -66,7 +66,7 @@ public void testRequestContextPropagationEjbRemote() {
     
     Object variable = runtimeService.getVariable(pi.getId(), "invocationCounter");
     // remote invocations of a bean from a separate deployment constitutes separate requests
-    Assert.assertEquals(1, variable);
+    Assert.assertEquals(2, variable);
     
     Task task = taskService.createTaskQuery()
       .processInstanceId(pi.getProcessInstanceId())

File: qa/integration-tests/src/test/java/com/camunda/fox/platform/test/functional/ejb/remote/bean/RemoteSFSBClientDelegateBean.java
Patch:
@@ -16,7 +16,7 @@
 @Named
 public class RemoteSFSBClientDelegateBean implements JavaDelegate {
   
-  @EJB(lookup="java:global/service/RemoteSFSBean!com.camunda.fox.platform.test.functional.ejb.remote.bean.BusinessInterface")
+  @EJB(lookup="java:global/service/service/RemoteSFSBean!com.camunda.fox.platform.test.functional.ejb.remote.bean.BusinessInterface")
   private BusinessInterface businessInterface;
 
   @Override

File: qa/integration-tests/src/test/java/com/camunda/fox/platform/test/functional/ejb/remote/bean/RemoteSLSBClientDelegateBean.java
Patch:
@@ -16,7 +16,7 @@
 @Named
 public class RemoteSLSBClientDelegateBean implements JavaDelegate {
   
-  @EJB(lookup="java:global/service/RemoteSLSBean!com.camunda.fox.platform.test.functional.ejb.remote.bean.BusinessInterface")
+  @EJB(lookup="java:global/service/service/RemoteSLSBean!com.camunda.fox.platform.test.functional.ejb.remote.bean.BusinessInterface")
   private BusinessInterface businessInterface;
 
   @Override

File: qa/integration-tests/src/test/java/com/camunda/fox/platform/test/functional/ejb/remote/bean/RemoteSingletonBeanClientDelegateBean.java
Patch:
@@ -16,7 +16,7 @@
 @Named
 public class RemoteSingletonBeanClientDelegateBean implements JavaDelegate {
   
-  @EJB(lookup="java:global/service/RemoteSingletonBean!com.camunda.fox.platform.test.functional.ejb.remote.bean.BusinessInterface")
+  @EJB(lookup="java:global/service/service/RemoteSingletonBean!com.camunda.fox.platform.test.functional.ejb.remote.bean.BusinessInterface")
   private BusinessInterface businessInterface;
 
   @Override

File: qa/integration-tests/src/test/java/com/camunda/fox/platform/test/functional/ejb/request/beans/InvocationCounterDelegateBean.java
Patch:
@@ -15,7 +15,7 @@
 public class InvocationCounterDelegateBean implements JavaDelegate {
   
   @EJB(lookup="java:global/" +
-    "service/" +
+    "service/service/" +
   	"InvocationCounterServiceBean!com.camunda.fox.platform.test.functional.ejb.request.beans.InvocationCounterService")
   private InvocationCounterService invocationCounterService;
 

File: core/service/src/main/java/com/camunda/fox/platform/impl/deployment/ClassPathScanner.java
Patch:
@@ -107,7 +107,7 @@ protected void scanUrl(URL url, String paResourceRootPath, boolean isPaLocal, Ma
     
     if(isPaLocal) {
   
-      if (urlPath.startsWith("file:") || urlPath.startsWith("jar:")) {
+      if (urlPath.startsWith("file:") || urlPath.startsWith("jar:") || urlPath.startsWith("wsjar:")) {
         urlPath = url.getPath();
         int withinArchive = urlPath.indexOf('!');
         if (withinArchive != -1) {
@@ -119,7 +119,7 @@ protected void scanUrl(URL url, String paResourceRootPath, boolean isPaLocal, Ma
       }
       
     } else {
-      if (urlPath.startsWith("file:") || urlPath.startsWith("jar:")) {
+      if (urlPath.startsWith("file:") || urlPath.startsWith("jar:") || urlPath.startsWith("wsjar:")) {
         urlPath = url.getPath();
         int withinArchive = urlPath.indexOf('!');
         if (withinArchive != -1) {

File: qa/integration-tests/src/test/java/com/camunda/fox/platform/test/functional/ejb/request/JobExecutorRequestContextRemoteInvocationTest.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * This test verifies that if a delegate bean invoked from the Job Executor 
- * calls a REMOTE SLSB from a different deployment, the RequestContest is active there as well.
+ * calls a REMOTE SLSB from a different deployment, the RequestContext is active there as well.
  * 
  * NOTE: 
  * - does not work on Jboss AS with a remote invocation (Bug in Jboss AS?) SEE HEMERA-2453
@@ -58,14 +58,14 @@ public static WebArchive delegateDeployment() {
   public void testRequestContextPropagationEjbRemote() {
     
     // This test verifies that if a delegate bean invoked from the Job Executor 
-    // calls an EJB from a different deployment, the RequestContest is active there as well.
+    // calls an EJB from a different deployment, the RequestContext is active there as well.
       
     ProcessInstance pi = runtimeService.startProcessInstanceByKey("testContextPropagationEjbRemote");    
     
     waitForJobExecutorToProcessAllJobs(6000, 100);
     
     Object variable = runtimeService.getVariable(pi.getId(), "invocationCounter");
-    // remote invocations of a bean from a seperate deployment constitutes seperate requests
+    // remote invocations of a bean from a separate deployment constitutes separate requests
     Assert.assertEquals(1, variable);
     
     Task task = taskService.createTaskQuery()

File: cycle/src/main/java/com/camunda/fox/cycle/web/jaxrs/ext/TemplateExceptionMapper.java
Patch:
@@ -5,7 +5,6 @@
 
 import javax.ws.rs.core.Response;
 import javax.ws.rs.ext.ExceptionMapper;
-import javax.ws.rs.ext.Provider;
 
 import org.thymeleaf.exceptions.TemplateInputException;
 
@@ -14,12 +13,11 @@
  * 
  * @author nico.rehwaldt
  */
-@Provider
+//@Provider
 public class TemplateExceptionMapper implements ExceptionMapper<TemplateInputException> {
 
   @Override
   public Response toResponse(TemplateInputException exception) {
-    exception.printStackTrace();
     Logger.getLogger(getClass().getSimpleName()).log(Level.SEVERE, "Error during JAX-RS Request", exception);
     return Response.status(Response.Status.NOT_FOUND).entity("error/not-found").build();
   }

File: cycle/src/main/java/com/camunda/fox/cycle/impl/connector/signavio/SignavioConnector.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.http.entity.mime.MultipartEntity;
 import org.apache.http.entity.mime.content.FileBody;
 import org.apache.http.entity.mime.content.StringBody;
+import org.apache.http.impl.NoConnectionReuseStrategy;
 import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
 import org.apache.http.params.HttpConnectionParams;
@@ -153,11 +154,12 @@ public void init(ConnectorConfiguration config) {
       
       HttpConnectionParams.setConnectionTimeout(params, 3000);
       HttpConnectionParams.setStaleCheckingEnabled(params, true);
-      HttpConnectionParams.setSoTimeout(params,5000);
       HttpConnectionParams.setLinger(params, 5000);
+      connectionManager.setDefaultMaxPerRoute(5);
       
       final DefaultHttpClient signavioHttpClient = new DefaultHttpClient(connectionManager, params);
       httpClient4Executor = new ApacheHttpClient4Executor(signavioHttpClient);
+      signavioHttpClient.setReuseStrategy(new NoConnectionReuseStrategy());
       
       ClientRequestFactory factory = null;
       try {

File: cycle/src/main/java/com/camunda/fox/cycle/web/dto/BpmnDiagramDTO.java
Patch:
@@ -30,6 +30,7 @@ public BpmnDiagramDTO(BpmnDiagram diagram) {
     this.diagramPath = diagram.getDiagramPath();
     this.connectorId = diagram.getConnectorId();
     this.label = diagram.getLabel();
+    this.lastModified = diagram.getLastModified();
   }
 
   public Long getId() {

File: cycle/src/main/java/com/camunda/fox/cycle/service/roundtrip/BpmnProcessModelUtil.java
Patch:
@@ -195,7 +195,7 @@ public String importChangesFromExecutableBpmnModel(String sourceModel, String ta
     String mergedBpmn20XmlContent;
     if (processes.getLength() < 2) {
       // no merge required
-      mergedBpmn20XmlContent = targetModel;
+      mergedBpmn20XmlContent = sourceModel;
     } else {
       // locate engine pool => get id
       // this search could be avoided by fixing HEMERA-1057

File: cycle/src/main/java/com/camunda/fox/cycle/connector/DefaultConnectorConfiguration.java
Patch:
@@ -1,7 +1,5 @@
 package com.camunda.fox.cycle.connector;
 
-import java.io.File;
-
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
@@ -13,7 +11,7 @@ public class DefaultConnectorConfiguration {
   @Bean
   public ConnectorConfiguration vfsConnectorConfig () {
     ConnectorConfiguration config = new ConnectorConfiguration();
-    config.getProperties().put("BASE_PATH", "file://" + System.getProperty("user.home") + File.separatorChar + "cycle" + File.separatorChar);
+    config.getProperties().put(VfsConnector.BASE_PATH_KEY, VfsConnector.DEFAULT_BASE_PATH);
     config.setGlobalUser("user");
     config.setGlobalPassword("password");
     return config;

File: cycle/src/main/java/com/camunda/fox/cycle/service/roundtrip/BpmnProcessModelUtil.java
Patch:
@@ -4,7 +4,6 @@
 import java.io.ByteArrayOutputStream;
 import java.io.UnsupportedEncodingException;
 
-import javax.servlet.http.HttpSession;
 import com.camunda.fox.cycle.exception.CycleException;
 import com.camunda.fox.cycle.service.roundtrip.transform.XsltTransformer;
 import com.camunda.fox.cycle.util.IoUtil;

File: cycle/src/main/java/com/camunda/fox/cycle/web/service/resource/RoundtripService.java
Patch:
@@ -82,7 +82,6 @@ public RoundtripDTO updateDetails(RoundtripDTO data) {
       throw new IllegalArgumentException("Not found");
     }
     
-    System.out.println("Received roundtrip data with left:" + data.getLeftHandSide() + " and right:" + data.getRightHandSide());
     if (data.getLeftHandSide() != null) {
       BpmnDiagram leftHandSide = bpmnDiagramController.createOrUpdate(data.getLeftHandSide());
       roundtrip.setLeftHandSide(leftHandSide);

File: cycle/src/test/java/com/camunda/fox/cycle/web/service/resource/RoundtripControllerTest.java
Patch:
@@ -12,11 +12,11 @@
 
 import static org.hamcrest.Matchers.*;
 import org.junit.After;
-import static org.junit.Assume.*;
 import static org.junit.Assert.*;
 
 import com.camunda.fox.cycle.entity.Roundtrip;
 import com.camunda.fox.cycle.web.dto.BpmnDiagramDTO;
+import com.camunda.fox.cycle.web.dto.ConnectorNodeDTO;
 import com.camunda.fox.cycle.web.dto.RoundtripDTO;
 
 /**
@@ -82,11 +82,11 @@ private RoundtripDTO createTestRoundtripDTOWithDetails() {
     RoundtripDTO dto = createTestRoundtripDTO();
     
     BpmnDiagramDTO rhs = new BpmnDiagramDTO();
-    rhs.setDiagramPath("foo/bar");
+    rhs.setDiagramPath(new ConnectorNodeDTO("foo/foo", "foo", -1l));
     rhs.setModeler("Fox modeler");
     
     BpmnDiagramDTO lhs = new BpmnDiagramDTO();
-    lhs.setDiagramPath("foo/foo");
+    lhs.setDiagramPath(new ConnectorNodeDTO("foo/bar", "bar", -1l));
     lhs.setModeler("Another Modeler");
     
     dto.setRightHandSide(rhs);

File: cycle/src/main/java/com/camunda/fox/cycle/web/dto/BpmnDiagramDTO.java
Patch:
@@ -16,7 +16,7 @@ public class BpmnDiagramDTO {
 
   private Status status;
   
-  private BpmnDiagramDTO(BpmnDiagram diagram) {
+  public BpmnDiagramDTO(BpmnDiagram diagram) {
     this.id = diagram.getId();
     this.modeller = diagram.getModeller();
     this.diagramPath = diagram.getDiagramPath();

File: cycle/src/main/java/com/camunda/fox/cycle/api/connector/ConnectorNode.java
Patch:
@@ -5,7 +5,7 @@ public class ConnectorNode {
   protected String path;
   protected String name;
   protected String displayName;
-  private ConnectorNodeType type;
+  protected ConnectorNodeType type = ConnectorNodeType.FOLDER;
   
   public enum ConnectorNodeType {
     FILE,

File: cycle/src/main/java/com/camunda/fox/cycle/connector/ConnectorService.java
Patch:
@@ -47,7 +47,7 @@ public ArrayNode tree(@PathParam("id") String connectorId) {
     rootNode.put("name", "/");
     rootNode.put("displayName", connectorId);
     rootNode.put("path", "/");
-    rootNode.put("type", "folder");
+    rootNode.put("type", "FOLDER");
     resultList.add(rootNode);
     return resultList;
   }

File: cycle-root/cycle/src/main/java/com/camunda/fox/cycle/web/I18nResolver.java
Patch:
@@ -14,11 +14,10 @@ public I18nResolver(I18n i18n) {
   }
 
   public MessageResolution resolveMessage(Arguments arguments, String key, Object[] messageParameters) {
-    return new MessageResolution(i18n.tr(key));
+    return new MessageResolution(i18n.tr(key, messageParameters));
   }
 
   public void initialize() {
-
   }
 
   public Integer getOrder() {
@@ -28,5 +27,4 @@ public Integer getOrder() {
   public String getName() {
     return "gettext:org.xnap.commons.i18n";
   }
-
 }

File: cycle-root/cycle/src/main/java/com/camunda/fox/cycle/web/filter/SlashUriFilter.java
Patch:
@@ -39,7 +39,8 @@ public void filter(HttpServletRequest request, HttpServletResponse response, Fil
     if (uri.lastIndexOf(".") > lastIndexOfSlash || lastIndexOfSlash == uri.length() - 1) {
       chain.doFilter(request, response);
     } else {
-      response.sendRedirect(uri + "/");
+      String query = request.getQueryString();
+      response.sendRedirect(uri + "/" + (query != null ? query : ""));
     }
   }
   

File: activiti-engine/src/main/java/org/activiti/engine/impl/variable/VariableType.java
Patch:
@@ -20,7 +20,7 @@
 public interface VariableType {
 
   /**
-   * name of variable type (limited to 25 characters length)
+   * name of variable type (limited to 100 characters length)
    */
   String getTypeName();
   boolean isCachable();

File: activiti-engine/src/main/java/org/activiti/engine/impl/variable/VariableType.java
Patch:
@@ -19,6 +19,9 @@
  */
 public interface VariableType {
 
+  /**
+   * name of variable type (limited to 25 characters length)
+   */
   String getTypeName();
   boolean isCachable();
   boolean isAbleToStore(Object value);

File: activiti-webapp-rest2/src/main/java/org/activiti/rest/api/task/TaskOperationResource.java
Patch:
@@ -40,8 +40,8 @@ public ObjectNode executeTaskOperation(Representation entity) {
     String operation = (String) getRequest().getAttributes().get("operation");
     try {
       Map<String, Object> variables = new HashMap<String, Object>();
-      if (entity != null && StringUtils.isNotEmpty(entity.getText())) {
-        String startParams = entity.getText();
+      String startParams = entity.getText();
+      if (StringUtils.isNotEmpty(startParams)) {
         JsonNode startJSON = new ObjectMapper().readTree(startParams);
         Iterator<String> itName = startJSON.getFieldNames();
         while(itName.hasNext()) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -209,8 +209,9 @@ public List selectList(String statement, ListQueryParameterObject parameter) {
     }
     List loadedObjects = null;
     String databaseType = dbSqlSessionFactory.databaseType;
-    if(databaseType.equals("mssql") || databaseType.equals("db2")) {
+    if(databaseType.equals("mssql")) {
       // use mybatis paging (native database paging not yet implemented)
+      log.log(Level.FINE, "Using mybatis paging (native database paging not yet implemented for mssql)");
       loadedObjects = sqlSession.selectList(statement, parameter, new RowBounds(parameter.getFirstResult(), parameter.getMaxResults()));
     } else {
       // use native database paging

File: activiti-engine/src/main/java/org/activiti/engine/impl/el/JuelExpression.java
Patch:
@@ -56,9 +56,9 @@ public Object getValue(VariableScope variableScope) {
     } catch (MethodNotFoundException mnfe) {
       throw new ActivitiException("Unknown method used in expression", mnfe);
     } catch(ELException ele) {
-      throw new ActivitiException("Error while evalutaing expression", ele);
+      throw new ActivitiException("Error while evaluating expression", ele);
     } catch (Exception e) {
-      throw new ActivitiException("Error while evalutaing expression", e);
+      throw new ActivitiException("Error while evaluating expression", e);
     }
   }
   
@@ -70,7 +70,7 @@ public void setValue(Object value, VariableScope variableScope) {
         .getDelegateInterceptor()
         .handleInvocation(invocation);
     }catch (Exception e) {
-      throw new ActivitiException("Error while evalutaing expression", e);
+      throw new ActivitiException("Error while evaluating expression", e);
     }
   }
   

File: core/service/src/test/java/com/camunda/fox/platform/impl/deployment/MultipleClasspathRootsClassPathScannerTest.java
Patch:
@@ -49,13 +49,13 @@ public void testScanClassPath_multipleRoots() throws MalformedURLException {
     
     assertTrue("'testDeployProcessArchive.bpmn20.xml' not found", contains(scanResult, "testDeployProcessArchive.bpmn20.xml"));
     assertTrue("'testDeployProcessArchive.png' not found", contains(scanResult, "testDeployProcessArchive.png"));
-    assertEquals(4, scanResult.size());
+    assertEquals(2, scanResult.size());
     
     scanResult = scanner.scanPaResourceRootPath(classLoader, null, "directory/");
     
     assertTrue("'testDeployProcessArchive.bpmn20.xml' not found", contains(scanResult, "testDeployProcessArchive.bpmn20.xml"));
     assertTrue("'testDeployProcessArchive.png' not found", contains(scanResult, "testDeployProcessArchive.png"));
-    assertEquals(4, scanResult.size());
+    assertEquals(2, scanResult.size());
     
     scanResult = scanner.scanPaResourceRootPath(classLoader, new URL("file:src/test/resources/com/camunda/fox/platform/impl/deployment/ClassPathScannerTest.testScanClassPathWithFilesRecursive/META-INF/processes.xml"), "pa:directory/");
 

File: webapps/cockpit-webapp-fox/src/main/java/com/camunda/fox/cockpit/demo/deployer/FoxPlatformDemoDataDeployer.java
Patch:
@@ -25,8 +25,9 @@ public class FoxPlatformDemoDataDeployer implements DemoDataDeployer {
 
   private DemoDataProcessArchiveImpl demoDataProcessArchiveImpl;
   
-  public String deployDemoData() {
+  public String deployDemoData(String processEngineName) {
     demoDataProcessArchiveImpl = new DemoDataProcessArchiveImpl(processArchiveContextExecutorBean);
+    demoDataProcessArchiveImpl.setProcessEngineName(processEngineName);
     return processEngineService.installProcessArchive(demoDataProcessArchiveImpl).getProcessEngineDeploymentId();
   }
   

File: core/service/src/main/java/com/camunda/fox/platform/impl/context/spi/ProcessArchiveServices.java
Patch:
@@ -36,6 +36,8 @@ public interface ProcessArchiveServices {
 
   public ProcessArchiveContext getProcessArchiveContext(String processDefinitionKey);
 
+  public ProcessEngineController getProcessEngineController();
+  
   public void setProcessEngineController(ProcessEngineController processEngineServiceBean);
 
   /**

File: activiti-engine/src/main/java/org/activiti/engine/history/HistoricProcessVariableQuery.java
Patch:
@@ -35,7 +35,7 @@ public interface HistoricProcessVariableQuery extends Query<HistoricProcessVaria
   /**
    * only select historic process variables with the given name and value
    */
-  HistoricProcessVariableQuery variableEquals(String variableName, Object variableValue);
+  HistoricProcessVariableQuery variableValueEquals(String variableName, Object variableValue);
 
   HistoricProcessVariableQuery orderByProcessInstanceId();
   

File: activiti-engine/src/main/java/org/activiti/engine/impl/HistoricProcessVariableQueryImpl.java
Patch:
@@ -78,7 +78,7 @@ public HistoricProcessVariableQuery variableName(String variableName) {
     return this;
   }
 
-  public HistoricProcessVariableQuery variableEquals(String variableName, Object variableValue) {
+  public HistoricProcessVariableQuery variableValueEquals(String variableName, Object variableValue) {
     if (variableName == null) {
       throw new ActivitiException("variableName is null");
     }

File: activiti-engine/src/main/java/org/activiti/engine/impl/history/handler/HistoryParseListener.java
Patch:
@@ -60,6 +60,9 @@ public void parseProcess(Element processElement, ProcessDefinitionEntity process
     if (activityHistoryEnabled(processDefinition, historyLevel)) {
       processDefinition.addExecutionListener(org.activiti.engine.impl.pvm.PvmEvent.EVENTNAME_END, new ProcessInstanceEndHandler());
     }
+    if (variableHistoryEnabled(processDefinition, historyLevel)) {
+      processDefinition.addExecutionListener(org.activiti.engine.impl.pvm.PvmEvent.EVENTNAME_END, HISTORIC_PROCESS_VARIABLE_HANDLER);
+    }
   }
 
   public void parseExclusiveGateway(Element exclusiveGwElement, ScopeImpl scope, ActivityImpl activity) {
@@ -124,9 +127,6 @@ public void parseSendTask(Element sendTaskElement, ScopeImpl scope, ActivityImpl
 
   public void parseEndEvent(Element endEventElement, ScopeImpl scope, ActivityImpl activity) {
     addActivityHandlers(activity);
-    if (variableHistoryEnabled(activity,historyLevel)) {
-      activity.addExecutionListener(org.activiti.engine.impl.pvm.PvmEvent.EVENTNAME_END, HISTORIC_PROCESS_VARIABLE_HANDLER, -1);
-    }
   }
 
   public void parseParallelGateway(Element parallelGwElement, ScopeImpl scope, ActivityImpl activity) {

File: core/service/src/main/java/com/camunda/fox/platform/impl/configuration/CmpeProcessEngineConfiguration.java
Patch:
@@ -37,6 +37,7 @@
 
 import com.camunda.fox.engine.impl.bpmn.parser.FoxFailedJobParseListener;
 import com.camunda.fox.engine.impl.jobexecutor.FoxFailedJobCommandFactory;
+import com.camunda.fox.platform.impl.context.DefaultProcessArchiveServices;
 import com.camunda.fox.platform.impl.context.ProcessArchiveServicesSupport;
 import com.camunda.fox.platform.impl.context.spi.ProcessArchiveServices;
 import com.camunda.fox.platform.impl.jobexecutor.spi.JobExecutorFactory;
@@ -85,7 +86,7 @@ protected List<BpmnParseListener> getDefaultBPMNParseListeners() {
   
   protected void initProcessArchiveServices() {
     if(processArchiveServices == null) {
-      processArchiveServices = Services.getService(ProcessArchiveServices.class);
+      processArchiveServices = new DefaultProcessArchiveServices();
       processArchiveServices.setProcessEngineController(cmpeProcessEngine);
     }
   }

File: core/service/src/main/java/com/camunda/fox/platform/impl/service/SimplePlatformService.java
Patch:
@@ -50,7 +50,7 @@ public ProcessEngineStartOperation call() throws Exception {
           processEngineController.start();      
           return new ProcessEngineStartOperationImpl(processEngineController.getProcessEngine());
         } catch (Exception e) {
-          log.log(Level.SEVERE,"Caught exception while tying to start process engine", e);
+          log.log(Level.SEVERE,"Caught exception while trying to start process engine", e);
           return new ProcessEngineStartOperationImpl(e);
         }
       }

File: core/service/src/main/java/com/camunda/fox/platform/impl/util/Services.java
Patch:
@@ -23,8 +23,6 @@
 import com.camunda.fox.platform.FoxPlatformException;
 import com.camunda.fox.platform.impl.configuration.JtaCmpeProcessEngineConfigurationFactory;
 import com.camunda.fox.platform.impl.configuration.spi.ProcessEngineConfigurationFactory;
-import com.camunda.fox.platform.impl.context.DefaultProcessArchiveServices;
-import com.camunda.fox.platform.impl.context.spi.ProcessArchiveServices;
 import com.camunda.fox.platform.impl.deployment.ClassPathScanner;
 import com.camunda.fox.platform.impl.deployment.spi.ProcessArchiveScanner;
 import com.camunda.fox.platform.impl.jobexecutor.simple.SimpleJobExecutorFactory;
@@ -46,7 +44,7 @@ public class Services {
     defaultImplementations.put(ProcessEngineConfigurationFactory.class, JtaCmpeProcessEngineConfigurationFactory.class);
     defaultImplementations.put(ProcessArchiveScanner.class, ClassPathScanner.class);
     defaultImplementations.put(JobExecutorFactory.class, SimpleJobExecutorFactory.class);    
-    defaultImplementations.put(ProcessArchiveServices.class, DefaultProcessArchiveServices.class);
+//    defaultImplementations.put(ProcessArchiveServices.class, DefaultProcessArchiveServices.class);
   }
   
   @SuppressWarnings("unchecked")

File: qa/test-deployer/deployer/src/test/java/com/camunda/fox/platform/StressDeploymentTest.java
Patch:
@@ -47,7 +47,7 @@ public static Archive<?> createApplicationDeployment() {
     "processes/CdiResolvingBean.bpmn20.xml",
     "processes/CdiResolvingBeanFromJobExecutor.bpmn20.xml",
     "processes/DelegateExecution.bpmn20.xml",
-    "processes/SimpleExpressionEvaluation.bpmn20.xml",
+    "processes/SimpleExpressionEvaluation.bpmn20.xml"
   })
   public void shouldWorkOkWhenManyProcessesAreDeployedInParallel() throws Exception {
     // given

File: qa/test-deployer/deployer/src/test/java/com/camunda/fox/platform/qa/deployer/sample/WithMixedProcessDeployments.java
Patch:
@@ -17,7 +17,7 @@ public class WithMixedProcessDeployments {
   private ProcessEngine processEngine;
   
   @Deployment(resources = {
-    "processes/CdiResolvingBean.bpmn20.xml",
+    "processes/CdiResolvingBean.bpmn20.xml"
   })
   public void testNotExists() throws Exception {
     

File: qa/cockpit-tests/src/test/java/com/camunda/fox/cockpit/test/CockpitTestBase.java
Patch:
@@ -16,7 +16,7 @@
 import com.camunda.fox.cockpit.service.ProcessService;
 import com.camunda.fox.cockpit.service.VariableService;
 import com.camunda.fox.cockpit.service.producer.ProcessServicesProducer;
-import com.camunda.fox.cockpit.service.query.impl.MyBatisService;
+import com.camunda.fox.cockpit.service.query.impl.QueryService;
 import com.camunda.fox.cockpit.spi.engine.impl.PlatformProcessEngineLookup;
 import com.camunda.fox.cockpit.spi.engine.impl.PlatformProcessEngines;
 import com.camunda.fox.cockpit.spi.persistence.impl.EeEntityManagerFactories;
@@ -52,7 +52,7 @@ public static WebArchive createBaseDeployment() {
           EntityManagerFactories.class, 
           ProcessService.class,
           VariableService.class,
-          MyBatisService.class,
+          QueryService.class,
           AuditService.class,
           JobService.class,
           ExecutionService.class,

File: webapps/cockpit-webapp-fox/src/main/java/com/camunda/fox/cockpit/demo/deployer/FoxPlatformDemoDataDeployer.java
Patch:
@@ -25,9 +25,9 @@ public class FoxPlatformDemoDataDeployer implements DemoDataDeployer {
 
   private DemoDataProcessArchiveImpl demoDataProcessArchiveImpl;
   
-  public void deployDemoData() {
+  public String deployDemoData() {
     demoDataProcessArchiveImpl = new DemoDataProcessArchiveImpl(processArchiveContextExecutorBean);
-    processEngineService.installProcessArchive(demoDataProcessArchiveImpl);
+    return processEngineService.installProcessArchive(demoDataProcessArchiveImpl).getProcessEngineDeploymentId();
   }
   
   public void undeployDemoData() {

File: core/service/src/main/java/com/camunda/fox/platform/impl/deployment/ClassPathScanner.java
Patch:
@@ -106,7 +106,7 @@ protected Set<String> scanPaResourceRootPath(final ClassLoader classLoader, fina
         for (String string : scanResult) {
           String prefix = strippedPath.endsWith("/") ? strippedPath : strippedPath +  "/";
           if(!string.startsWith(prefix)) {
-            string = string.concat(prefix);
+            string = prefix.concat(string);
           }
           discoveredProcesses.add(string);  
         }

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -67,6 +67,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement("postgres", "insertComment", "insertComment_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByTaskId", "selectCommentsByTaskId_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByProcessInstanceId", "selectCommentsByProcessInstanceId_postgres");
+    addDatabaseSpecificStatement("postgres", "selectHistoricProcessVariableByQueryCriteria", "selectHistoricProcessVariableByQueryCriteria_postgres");
         
     // oracle
     databaseSpecificLimitBeforeStatements.put("oracle", "select * from ( select a.*, ROWNUM rnum from (");

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -810,6 +810,7 @@ private void executeSchemaResource(String operation, String component, String re
             throw new ActivitiException("database update java class '"+upgradestepClassName+"' can't be instantiated: "+e.getMessage(), e);
           }
           try {
+            log.fine("executing upgrade step java class "+upgradestepClassName);
             dbUpgradeStep.execute(this);
           } catch (Exception e) {
             throw new ActivitiException("error while executing database update java class '"+upgradestepClassName+"': "+e.getMessage(), e);
@@ -822,6 +823,7 @@ private void executeSchemaResource(String operation, String component, String re
             Statement jdbcStatement = connection.createStatement();
             try {
               // no logging needed as the connection will log it
+              log.fine("SQL: "+sqlStatement);
               jdbcStatement.execute(sqlStatement);
               jdbcStatement.close();
             } catch (Exception e) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/event/AbstractEventHandler.java
Patch:
@@ -41,7 +41,7 @@ public void handleEvent(EventSubscriptionEntity eventSubscription, Object payloa
               + "no activity associated with event subscription");
     }
 
-    if (!execution.getActivity().equals(activity)) {
+    if (!activity.equals( execution.getActivity() )) {
       execution.setActivity(activity);
     }
 

File: activiti-engine/src/test/java/org/activiti/standalone/history/FullHistoryTest.java
Patch:
@@ -626,7 +626,7 @@ public void testDeleteHistoricProcessInstance() {
     taskService.complete(task.getId());
     
     assertEquals(1, historyService.createHistoricProcessInstanceQuery().processInstanceId(processInstance.getId()).count());
-    assertEquals(2, historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).count());
+    assertEquals(3, historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).count());
     assertEquals(4, historyService.createHistoricDetailQuery().processInstanceId(processInstance.getId()).count());
     assertEquals(1, historyService.createHistoricTaskInstanceQuery().processInstanceId(processInstance.getId()).count());
     

File: activiti-engine/src/main/java/org/activiti/engine/impl/history/handler/HistoryParseListener.java
Patch:
@@ -105,7 +105,7 @@ public void parseSubProcess(Element subProcessElement, ScopeImpl scope, Activity
   }
 
   public void parseStartEvent(Element startEventElement, ScopeImpl scope, ActivityImpl activity) {
-    if (fullHistoryEnabled(historyLevel)) {
+    if (activityHistoryEnabled(activity, historyLevel)) {
       activity.addExecutionListener(org.activiti.engine.impl.pvm.PvmEvent.EVENTNAME_END, START_EVENT_END_HANDLER);
     }
   }

File: activiti-cdi/src/main/java/org/activiti/cdi/BusinessProcess.java
Patch:
@@ -169,7 +169,7 @@ public ProcessInstance startProcessByKey(String key, String businessKey, Map<Str
     return instance;
   }
 
-  public ProcessInstance startProcessInstanceByMessage(String messageName) { 
+  public ProcessInstance startProcessByMessage(String messageName) { 
     validateValidUsage();
     
     Map<String, Object> cachedVariables = getAndClearCachedVariables();
@@ -178,7 +178,7 @@ public ProcessInstance startProcessInstanceByMessage(String messageName) {
     return processInstance;
   }
 
-  public ProcessInstance startProcessInstanceByMessage(String messageName, Map<String, Object> processVariables) { 
+  public ProcessInstance startProcessByMessage(String messageName, Map<String, Object> processVariables) { 
     validateValidUsage();
     
     Map<String, Object> cachedVariables = getAndClearCachedVariables();
@@ -188,7 +188,7 @@ public ProcessInstance startProcessInstanceByMessage(String messageName, Map<Str
     return processInstance;
   }
 
-  public ProcessInstance startProcessInstanceByMessage(String messageName, String businessKey, Map<String, Object> processVariables) { 
+  public ProcessInstance startProcessByMessage(String messageName, String businessKey, Map<String, Object> processVariables) { 
     validateValidUsage();
     
     Map<String, Object> cachedVariables = getAndClearCachedVariables();

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -2618,7 +2618,7 @@ public ActivityImpl parseCallActivity(Element callActivityElement, ScopeImpl sco
 
     CallActivityBehavior callActivityBehaviour = null;
     String expressionRegex = "\\$+\\{+.+\\}";
-    if (calledElement.matches(expressionRegex)) {
+    if (calledElement != null && calledElement.matches(expressionRegex)) {
       callActivityBehaviour = new CallActivityBehavior(expressionManager.createExpression(calledElement));
     } else {
       callActivityBehaviour = new CallActivityBehavior(calledElement);

File: activiti-webapp-rest2/src/main/java/org/activiti/rest/api/process/ProcessInstanceDiagramResource.java
Patch:
@@ -22,6 +22,7 @@
 import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
 import org.activiti.rest.api.ActivitiUtil;
 import org.activiti.rest.api.SecuredResource;
+import org.restlet.data.MediaType;
 import org.restlet.representation.InputRepresentation;
 import org.restlet.resource.Get;
 
@@ -53,7 +54,7 @@ public InputRepresentation getInstanceDiagram() {
     if (pde != null && pde.isGraphicalNotationDefined()) {
       InputStream resource = ProcessDiagramGenerator.generateDiagram(pde, "png", ActivitiUtil.getRuntimeService().getActiveActivityIds(processInstanceId));
 
-      InputRepresentation output = new InputRepresentation(resource);
+      InputRepresentation output = new InputRepresentation(resource, MediaType.IMAGE_PNG);
       return output;
       
     } else {

File: qa/tasklist-gui-tests/src/test/java/com/camunda/fox/tasklist/TestTasklistGui.java
Patch:
@@ -74,7 +74,7 @@ public void testDeploymentAndPrepareUsers() {
   public void testApplication(@Drone WebDriver driver, @ArquillianResource URL contextPath) {
     driver.get(contextPath + "../tasklist");
     
-    Assert.assertTrue(driver.getCurrentUrl().endsWith("tasklist/signin.jsf"));
+    Assert.assertTrue(driver.getCurrentUrl().contains("tasklist/signin.jsf"));
     
     // sign in
     driver.findElement(By.id("signin:username")).sendKeys("kermit");

File: activiti-spring/src/main/java/org/activiti/spring/ProcessEngineFactoryBean.java
Patch:
@@ -59,9 +59,9 @@ public ProcessEngine getObject() throws Exception {
   }
 
   protected void initializeExpressionManager() {
-    if (applicationContext != null) {
+    if (processEngineConfiguration.getExpressionManager() == null && applicationContext != null) {
       processEngineConfiguration.setExpressionManager(
-        new SpringExpressionManager(applicationContext, processEngineConfiguration.getBeans()));
+          new SpringExpressionManager(applicationContext, processEngineConfiguration.getBeans()));
     }
   }
   

File: qa/tasklist-gui-tests/src/test/java/com/camunda/fox/tasklist/TestTasklistGui.java
Patch:
@@ -74,7 +74,7 @@ public void testDeploymentAndPrepareUsers() {
   public void testApplication(@Drone WebDriver driver, @ArquillianResource URL contextPath) {
     driver.get(contextPath + "../tasklist");
     
-    Assert.assertTrue(driver.getCurrentUrl().endsWith("tasklist/signin.jsf"));
+    Assert.assertTrue(driver.getCurrentUrl().contains("tasklist/signin.jsf"));
     
     // sign in
     driver.findElement(By.id("signin:username")).sendKeys("kermit");

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/form/BooleanFormPropertyRenderer.java
Patch:
@@ -36,7 +36,8 @@ public Field getPropertyField(FormProperty formProperty) {
     checkBox.setEnabled(formProperty.isWritable());
 
     if (formProperty.getValue() != null) {
-      checkBox.setValue(formProperty.getValue());
+      Boolean value = new Boolean(Boolean.parseBoolean(formProperty.getValue()));
+      checkBox.setValue(value); 
     }
 
     return checkBox;

File: activiti-engine/src/main/java/org/activiti/engine/impl/HistoricTaskInstanceQueryProperty.java
Patch:
@@ -36,7 +36,7 @@ public class HistoricTaskInstanceQueryProperty implements QueryProperty {
   public static final HistoricTaskInstanceQueryProperty TASK_DESCRIPTION = new HistoricTaskInstanceQueryProperty("DESCRIPTION_");
   public static final HistoricTaskInstanceQueryProperty TASK_ASSIGNEE = new HistoricTaskInstanceQueryProperty("ASSIGNEE_");
   public static final HistoricTaskInstanceQueryProperty TASK_OWNER = new HistoricTaskInstanceQueryProperty("OWNER_");
-  public static final HistoricTaskInstanceQueryProperty TASK_DEFINITION_KEY = new HistoricTaskInstanceQueryProperty("TASK_DEF_ID_");
+  public static final HistoricTaskInstanceQueryProperty TASK_DEFINITION_KEY = new HistoricTaskInstanceQueryProperty("TASK_DEF_KEY_");
   public static final HistoricTaskInstanceQueryProperty DELETE_REASON = new HistoricTaskInstanceQueryProperty("DELETE_REASON_");
   public static final HistoricTaskInstanceQueryProperty START = new HistoricTaskInstanceQueryProperty("HTI.START_TIME_");
   public static final HistoricTaskInstanceQueryProperty END = new HistoricTaskInstanceQueryProperty("HTI.END_TIME_");

File: activiti-cdi/src/test/java/org/activiti/cdi/test/impl/bpmn/SignalEventTest.java
Patch:
@@ -78,8 +78,8 @@ public void execute(DelegateExecution execution) throws Exception {
   }
 
   @Test
-  @Deployment(resources = {"org/activiti/cdi/test/bpmn/SignalEventTests.catchAlertSignalBoundaryWithReceiveTask.bpmn20.xml", 
-                          "org/activiti/cdi/test/bpmn/SignalEventTests.throwAlertSignalWithDelegate.bpmn20.xml"})
+  @Deployment(resources = {"org/activiti/cdi/test/impl/bpmn/SignalEventTests.catchAlertSignalBoundaryWithReceiveTask.bpmn20.xml", 
+                          "org/activiti/cdi/test/impl/bpmn/SignalEventTests.throwAlertSignalWithDelegate.bpmn20.xml"})
   public void testSignalCatchBoundaryWithVariables() throws InterruptedException {
     HashMap<String, Object> variables1 = new HashMap<String, Object>();
     variables1.put("processName", "catchSignal");

File: activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/message/MessageStartEventTest.java
Patch:
@@ -216,7 +216,7 @@ public void testMultipleMessageStartEvents() {
       runtimeService.startProcessInstanceByKey("testProcess");
       fail("exception expected");
     }catch (ActivitiException e) {
-      assertTrue("different exception expected", e.getMessage().contains("Cannot start process instance, initial is null"));
+      assertTrue("different exception expected, not " + e.getMessage(), e.getMessage().contains("has no default start activity"));
     }
     
   }

File: activiti-engine/src/main/java/org/activiti/engine/impl/variable/SerializableType.java
Patch:
@@ -90,7 +90,7 @@ public static byte[] serialize(Object value, ValueFields valueFields) {
       ois = new ObjectOutputStream(baos);
       ois.writeObject(value);
     } catch (Exception e) {
-      throw new ActivitiException("coudn't deserialize value '"+value+"' in variable '"+valueFields.getName()+"'", e);
+      throw new ActivitiException("coudn't serialize value '"+value+"' in variable '"+valueFields.getName()+"'", e);
     } finally {
       IoUtil.closeSilently(ois);
     }

File: activiti-cdi/src/main/java/org/activiti/cdi/impl/context/ContextAssociationManager.java
Patch:
@@ -69,7 +69,7 @@ public interface ContextAssociationManager {
   /**
    * get a process variable
    */
-  public <T> T getVariable(String variableName);
+  public Object getVariable(String variableName);
 
   /**  
    * @return a map of process variables cached between flushes

File: activiti-cdi/src/main/java/org/activiti/cdi/impl/context/DefaultContextAssociationManager.java
Patch:
@@ -195,12 +195,12 @@ public Execution getExecution() {
   }
 
   @Override
-  public <T> T getVariable(String variableName) {
+  public Object getVariable(String variableName) {
     ExecutionEntity execution = getExecutionFromContext();
     if(execution != null) {
-      return (T) execution.getVariable(variableName);
+      return execution.getVariable(variableName);
     } else {
-      return (T) getScopedAssociation().getVariable(variableName);  
+      return getScopedAssociation().getVariable(variableName);  
     }
   }
   

File: activiti-engine/src/main/java/org/activiti/engine/TaskService.java
Patch:
@@ -46,6 +46,8 @@ public interface TaskService {
 	/**
 	 * Saves the given task to the persistent data store. If the task is already
 	 * present in the persistent store, it is updated.
+	 * After a new task has been saved, the task instance passed into this method
+	 * is updated with the id of the newly created task.
 	 * @param task the task, cannot be null.
 	 */
 	void saveTask(Task task);

File: activiti-engine/src/main/java/org/activiti/engine/TaskService.java
Patch:
@@ -83,11 +83,12 @@ public interface TaskService {
 	 /**
    * Claim responsibility for a task: the given user is made assignee for the task.
    * The difference with {@link #setAssignee(String, String)} is that here 
-   * a check is done if the provided user is known by the identity component.
+   * a check is done if the task already has a user assigned to it.
+   * No check is done whether the user is known by the identity component.
    * @param taskId task to claim, cannot be null.
    * @param userId user that claims the task. When userId is null the task is unclaimed,
    * assigned to no one.
-   * @throws ActivitiException when the user or task doesn't exist or when the task
+   * @throws ActivitiException when the task doesn't exist or when the task
    * is already claimed by another user.
    */
   void claim(String taskId, String userId);

File: activiti-engine/src/test/java/org/activiti/engine/test/bpmn/servicetask/ServiceTaskVariablesTest.java
Patch:
@@ -25,7 +25,7 @@
  *
  * @author Daniel Meyer
  */
-public class ServiceTaskVariablesTest extends PluggableActivitiTestCase {
+public abstract class ServiceTaskVariablesTest extends PluggableActivitiTestCase {
   
   static boolean isNullInDelegate2;
   static boolean isNullInDelegate3;
@@ -112,6 +112,6 @@ public void FAILING_testSerializedVariablesThirdAsync() {
     }
     
   }
-  
+
 }
 

File: webapps/tasklist/tasklist-webapp/src/main/java/com/camunda/fox/tasklist/impl/ActivitiIdentityServiceImpl.java
Patch:
@@ -14,6 +14,7 @@
 import com.camunda.fox.tasklist.api.TaskListGroup;
 import com.camunda.fox.tasklist.api.TasklistIdentityService;
 import com.camunda.fox.tasklist.api.TasklistUser;
+import com.camunda.fox.webapp.faces.exception.TaskListAuthenticationFailedException;
 
 @Named
 @ApplicationScoped
@@ -27,7 +28,7 @@ public class ActivitiIdentityServiceImpl implements TasklistIdentityService, Ser
   @Override
   public void authenticateUser(String userId, String password) {
     if (!identityService.checkPassword(userId, password)) {
-      throw new RuntimeException("Username or password is incorrect");
+      throw new TaskListAuthenticationFailedException("The username or password you entered is incorrect.");
     }
   }
 

File: webapps/tasklist/tasklist-webapp/src/main/java/com/camunda/fox/tasklist/Identity.java
Patch:
@@ -54,7 +54,7 @@ public void signIn() {
   public String signOut() {
     signOutEvent.fire(new SignOutEvent());
     this.currentUser = new TasklistUser();
-    return "../signin.jsf";
+    return "../signin.jsf?faces-redirect=true";
   }
 
   public boolean isSignedIn() {

File: activiti-engine/src/test/java/org/activiti/engine/test/bpmn/multiinstance/MultiInstanceTest.java
Patch:
@@ -575,7 +575,7 @@ public void testParallelSubProcessWithTimer() {
   @Deployment
   public void testParallelSubProcessCompletionCondition() {
     String procId = runtimeService.startProcessInstanceByKey("miParallelSubprocessCompletionCondition").getId();
-    List<Task> tasks = taskService.createTaskQuery().orderByTaskId().asc().list();
+    List<Task> tasks = taskService.createTaskQuery().orderByExecutionId().asc().list();
     assertEquals(4, tasks.size());
     
     for (int i=0; i<2; i++) {

File: core/client/src/main/java/com/camunda/fox/client/impl/web/TaskForm.java
Patch:
@@ -88,7 +88,7 @@ public ProcessDefinition getProcessDefinition() {
     if (processDefinitionId!=null) {
       return repositoryService.createProcessDefinitionQuery().processDefinitionId(processDefinitionId).singleResult();
     } else {
-      return repositoryService.createProcessDefinitionQuery().processDefinitionId(processDefinitionKey).latestVersion().singleResult();      
+      return repositoryService.createProcessDefinitionQuery().processDefinitionKey(processDefinitionKey).latestVersion().singleResult();      
     }
   }
   

File: core/client/src/main/java/com/camunda/fox/client/impl/web/TaskForm.java
Patch:
@@ -21,7 +21,7 @@ public class TaskForm implements Serializable {
   @Inject
   private BusinessProcess businessProcess;
   
-  public void beginTask(String taskId, String callbackUrl) {
+  public void startTask(String taskId, String callbackUrl) {
     // Note that we always run in a conversation
     this.url = callbackUrl;
     businessProcess.startTask(taskId, true);

File: webapps/fox-platform-tasklist/src/main/java/com/camunda/fox/platform/tasklist/TaskNavigation.java
Patch:
@@ -30,10 +30,10 @@ public class TaskNavigation implements Serializable {
   private Identity identity;
 
   @Inject
-  TaskService taskService;
+  private TaskService taskService;
 
   @Inject
-  FoxIdentityService foxIdentityService;
+  private FoxIdentityService foxIdentityService;
 
   @Inject
   private Event<TaskNavigationLinkSelectedEvent> taskNavigationLinkSelectedEvent;

File: activiti-engine/src/main/java/org/activiti/engine/impl/HistoricTaskInstanceQueryProperty.java
Patch:
@@ -38,8 +38,8 @@ public class HistoricTaskInstanceQueryProperty implements QueryProperty {
   public static final HistoricTaskInstanceQueryProperty TASK_OWNER = new HistoricTaskInstanceQueryProperty("OWNER_");
   public static final HistoricTaskInstanceQueryProperty TASK_DEFINITION_KEY = new HistoricTaskInstanceQueryProperty("TASK_DEF_ID_");
   public static final HistoricTaskInstanceQueryProperty DELETE_REASON = new HistoricTaskInstanceQueryProperty("DELETE_REASON_");
-  public static final HistoricTaskInstanceQueryProperty START = new HistoricTaskInstanceQueryProperty("START_TIME_");
-  public static final HistoricTaskInstanceQueryProperty END = new HistoricTaskInstanceQueryProperty("END_TIME_");
+  public static final HistoricTaskInstanceQueryProperty START = new HistoricTaskInstanceQueryProperty("HTI.START_TIME_");
+  public static final HistoricTaskInstanceQueryProperty END = new HistoricTaskInstanceQueryProperty("HTI.END_TIME_");
   public static final HistoricTaskInstanceQueryProperty DURATION = new HistoricTaskInstanceQueryProperty("DURATION_");
   public static final HistoricTaskInstanceQueryProperty TASK_PRIORITY = new HistoricTaskInstanceQueryProperty("PRIORITY_");
 

File: jbossas71/subsystem/src/main/java/com/camunda/fox/platform/subsystem/impl/extension/handler/FoxPlatformSubsystemAdd.java
Patch:
@@ -26,7 +26,6 @@
 import org.jboss.msc.service.ServiceController.Mode;
 
 import com.camunda.fox.platform.subsystem.impl.extension.ModelConstants;
-import com.camunda.fox.platform.subsystem.impl.platform.ContainerJobExecutorService;
 import com.camunda.fox.platform.subsystem.impl.platform.ContainerPlatformService;
 
 /**

File: jbossas71/subsystem/src/main/java/com/camunda/fox/platform/subsystem/impl/extension/handler/FoxPlatformSubsystemDescribe.java
Patch:
@@ -116,7 +116,7 @@ private void addProcessEngine(ModelNode property, ModelNode processEngineAdd, Pa
   }
   
   private void addJobExecutor(ModelNode property, ModelNode jobExecutorAdd, PathAddress jobExecutorAddress, ModelNode result) {
-    jobExecutorAdd.get(NAME).set(property.get(NAME).asString());
+    jobExecutorAdd.get(THREAD_POOL_NAME).set(property.get(THREAD_POOL_NAME).asString());
     
     result.add(jobExecutorAdd);
   }

File: jbossas71/subsystem/src/main/java/com/camunda/fox/platform/subsystem/impl/platform/ProcessEngineConfigurationImpl.java
Patch:
@@ -68,7 +68,7 @@ public Map<String, Object> getProperties() {
   private void initProcessEngineConfigurationDefaultValues() {
     // TODO: populate ProcessEngineConfiguration field via reflection from this map
     boolean isActivateJobExecutor=true;
-    boolean isAutoUpdateSchema =true;
+    boolean isAutoUpdateSchema =false;
     String dbTablePrefix = null;
     
     if (properties.get(PROP_IS_ACTIVATE_JOB_EXECUTOR) == null) {

File: jbossas71/subsystem/src/test/java/com/camunda/fox/platform/subsystem/impl/JBossSubsystemXMLTest.java
Patch:
@@ -180,6 +180,8 @@ public void testInstallSubsystemXmlWithEnginesAndJobExecutor() throws Exception
     KernelServices services = installInController(subsystemXml);
     //services.getContainer().dumpServices();
     Assert.assertEquals(7, services.getContainer().getServiceNames().size());
+    
+    System.out.println(services.getPersistedSubsystemXml());
   }
   
 }

File: core/jobexecutor-ext-config/src/main/java/com/camunda/fox/platform/impl/jobexecutor/ext/config/JobAcquisitionXml.java
Patch:
@@ -21,7 +21,7 @@ public class JobAcquisitionXml implements JobAcquisitionConfiguration {
   @XmlAttribute(name = "name", required = true)
   private String acquisitionName;
 
-  @XmlAttribute(name = "acquisition-strategy", required = true)
+  @XmlElement(name = "acquisition-strategy", required = true)
   private String jobAcquistionStrategy;
   
   @XmlElement(name="properties", required=false)

File: core/jobexecutor-ext-config/src/main/java/com/camunda/fox/platform/impl/jobexecutor/ext/config/JobExecutorXmlParserImpl.java
Patch:
@@ -26,7 +26,6 @@ public List<JobExecutorXml> parseJobExecutorXml(String jobExecutorXmlLocation) {
     
     Enumeration<URL> resources = this.getResourcesAsStream(jobExecutorXmlLocation);
     while (resources.hasMoreElements()) {
-      System.out.println("--------------------------------------------------------------------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> bin in der Schleife");
       URL url = (URL) resources.nextElement();
       InputStream stream = null;
       try {

File: core/jobexecutor-ext-config/src/main/java/com/camunda/fox/platform/impl/jobexecutor/ext/config/JobExecutorXmlSupportImpl.java
Patch:
@@ -39,7 +39,7 @@ protected void startJobExecutor(JobExecutorXml jobExecutorXml, PlatformJobExecut
       try {
         startedJobAcquisitions.add((JobAcquisition) platformJobExecutorService.startJobAcquisition(jobAcquisitionConfiguration));
       } catch (Exception e) {
-        log.log(Level.SEVERE, "Exception while staring job-acquisition '" + jobAcquisitionConfiguration.getAcquisitionName() + "' defined in file '"+jobExecutorXml.getResourceName()+"'.", e);
+        log.log(Level.SEVERE, "Exception while starting job-acquisition '" + jobAcquisitionConfiguration.getAcquisitionName() + "' defined in file '"+jobExecutorXml.getResourceName()+"'.", e);
       }
     }
     if (!startedJobAcquisitions.isEmpty()) {
@@ -73,6 +73,7 @@ public void stopJobExecutor(PlatformJobExecutorService platformJobExecutorServic
         errorMessage.append("   ");
         errorMessage.append(engineName);
       }
+      errorMessage.append("\n");
       errorMessage.append("Consider restarting the fox platform.");
       log.severe(errorMessage.toString());      
     }

File: jobexecutor/core/src/main/java/com/camunda/fox/platform/jobexecutor/impl/PlatformJobExecutor.java
Patch:
@@ -53,8 +53,8 @@ protected void loadJobAcquisitionStrategies() {
     }
     
     // register default strategies if not overriden by user:
-    if(!discoveredStrategies.containsKey(JobAcquisitionStrategy.SEQENTIAL)) {
-      discoveredStrategies.put(JobAcquisitionStrategy.SEQENTIAL, new SequentialJobAcquisition());
+    if(!discoveredStrategies.containsKey(JobAcquisitionStrategy.SEQUENTIAL)) {
+      discoveredStrategies.put(JobAcquisitionStrategy.SEQUENTIAL, new SequentialJobAcquisition());
     }
   }
 

File: jobexecutor/core/src/main/java/com/camunda/fox/platform/jobexecutor/impl/acquisition/SequentialJobAcquisition.java
Patch:
@@ -18,7 +18,7 @@
 public class SequentialJobAcquisition implements JobAcquisitionStrategy {
 
   public String getJobAcquisitionName() {
-    return SEQENTIAL;
+    return SEQUENTIAL;
   }
 
   public AcquireJobsRunnable getAcquireJobsRunnable(JobAcquisition jobAcquisition) {

File: jobexecutor/core/src/main/java/com/camunda/fox/platform/jobexecutor/spi/JobAcquisitionStrategy.java
Patch:
@@ -22,7 +22,7 @@ public interface JobAcquisitionStrategy {
   
   /** this strategy iterates through the process engines and queries 
    * each process engine for jobs, one process engine at a time */
-  public static String SEQENTIAL = "SEQUENTIAL";
+  public static String SEQUENTIAL = "SEQUENTIAL";
   
 // TODO:
 //  /** this strategy queries multile process engines at the same time */

File: jobexecutor/core/src/test/java/com/camunda/fox/platform/jobexecutorimpl/test/TestPlatformJobExecutorFunctional.java
Patch:
@@ -13,7 +13,6 @@
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ManagementService;
 import org.activiti.engine.ProcessEngine;
-import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration;
 import org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration;
 import org.activiti.engine.impl.jobexecutor.JobExecutor;
@@ -40,7 +39,7 @@ public class TestPlatformJobExecutorFunctional {
   @Parameters
   public static List<String[]> strategies() {
     return Arrays.asList(new String[][]{
-      {JobAcquisitionStrategy.SEQENTIAL},
+      {JobAcquisitionStrategy.SEQUENTIAL},
 //      {JobAcquisitionStrategy.SIMULTANEOUS}
     });    
   }

File: jobexecutor/core/src/test/java/com/camunda/fox/platform/jobexecutorimpl/test/TestPlatformJobexecutorServiceApi.java
Patch:
@@ -32,7 +32,7 @@ public void initPlaformJobExecutor() {
     
     JobAcquisitionConfigurationBean acquisitionConfiguration = new JobAcquisitionConfigurationBean();
     acquisitionConfiguration.setAcquisitionName("default");
-    acquisitionConfiguration.setJobAcquisitionStrategy(JobAcquisitionStrategy.SEQENTIAL);
+    acquisitionConfiguration.setJobAcquisitionStrategy(JobAcquisitionStrategy.SEQUENTIAL);
     acquisitionConfiguration.setLockOwner(UUID.randomUUID().toString());
     acquisitionConfiguration.setLockTimeInMillis(5*60*1000);
     acquisitionConfiguration.setMaxJobsPerAcquisition(3);
@@ -196,7 +196,7 @@ public void testRemoveUnexistingJobAcquisitionFails() {
   public void testAddRemoveJobAcquisition() {
     JobAcquisitionConfigurationBean acquisitionConfiguration = new JobAcquisitionConfigurationBean();
     acquisitionConfiguration.setAcquisitionName("acquisition2");
-    acquisitionConfiguration.setJobAcquisitionStrategy(JobAcquisitionStrategy.SEQENTIAL);
+    acquisitionConfiguration.setJobAcquisitionStrategy(JobAcquisitionStrategy.SEQUENTIAL);
     acquisitionConfiguration.setLockOwner(UUID.randomUUID().toString());
     acquisitionConfiguration.setLockTimeInMillis(5*60*1000);
     acquisitionConfiguration.setMaxJobsPerAcquisition(3);
@@ -225,7 +225,7 @@ public void testAddRemoveJobAcquisition() {
   public void testAddJobAcquisitionWithExistingNameFails() {
     JobAcquisitionConfigurationBean acquisitionConfiguration = new JobAcquisitionConfigurationBean();
     acquisitionConfiguration.setAcquisitionName("default");
-    acquisitionConfiguration.setJobAcquisitionStrategy(JobAcquisitionStrategy.SEQENTIAL);
+    acquisitionConfiguration.setJobAcquisitionStrategy(JobAcquisitionStrategy.SEQUENTIAL);
     acquisitionConfiguration.setLockOwner(UUID.randomUUID().toString());
     acquisitionConfiguration.setLockTimeInMillis(5*60*1000);
     acquisitionConfiguration.setMaxJobsPerAcquisition(3);

File: core/client/src/main/java/com/camunda/fox/client/impl/web/ProcessArchiveServletContextListener.java
Patch:
@@ -21,7 +21,7 @@ public class ProcessArchiveServletContextListener implements ServletContextListe
   @Inject
   private ProcessArchiveSupport processArchiveSupport;
 
-  public void contextDestroyed(ServletContextEvent contextEvent) {
+  public void contextInitialized(ServletContextEvent contextEvent) {
 
     String contextPath = contextEvent.getServletContext().getContextPath();
     
@@ -32,7 +32,7 @@ public void contextDestroyed(ServletContextEvent contextEvent) {
     
   }
 
-  public void contextInitialized(ServletContextEvent arg0) {
+  public void contextDestroyed(ServletContextEvent arg0) {
   }
 
 }

File: core/client/src/main/java/com/camunda/fox/client/impl/web/ProcessArchiveServletContextListener.java
Patch:
@@ -21,7 +21,7 @@ public class ProcessArchiveServletContextListener implements ServletContextListe
   @Inject
   private ProcessArchiveSupport processArchiveSupport;
 
-  public void contextDestroyed(ServletContextEvent contextEvent) {
+  public void contextInitialized(ServletContextEvent contextEvent) {
 
     String contextPath = contextEvent.getServletContext().getContextPath();
     
@@ -32,7 +32,7 @@ public void contextDestroyed(ServletContextEvent contextEvent) {
     
   }
 
-  public void contextInitialized(ServletContextEvent arg0) {
+  public void contextDestroyed(ServletContextEvent arg0) {
   }
 
 }

File: core/api/src/main/java/com/camunda/fox/platform/spi/ProcessEngineConfiguration.java
Patch:
@@ -31,6 +31,9 @@ public interface ProcessEngineConfiguration {
   /** indicates whether the job executor should be automatically activated */
   public static String PROP_IS_ACTIVATE_JOB_EXECUTOR = "isActivateJobExecutor";
   
+  /** the prefix to be used for all process engine database tables */
+  public static String PROP_DB_TABLE_PREFIX = "dbTablePrefix";
+  
   /**
    * @return true if this is the default process engine.
    * There can only be one default process engine per 

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/diagram/ProcessDiagramCanvas.java
Patch:
@@ -492,9 +492,9 @@ public void drawActivityMarkers(int x, int y, int width, int height, boolean mul
       }
     } else {
       if (multiInstanceSequential) {
-        drawMultiInstanceMarker(false, x, y, width, height);
-      } else if (multiInstanceParallel) {
         drawMultiInstanceMarker(true, x, y, width, height);
+      } else if (multiInstanceParallel) {
+        drawMultiInstanceMarker(false, x, y, width, height);
       }
     }
   }

File: core/api/src/main/java/com/camunda/fox/platform/spi/ProcessEngineConfiguration.java
Patch:
@@ -31,6 +31,9 @@ public interface ProcessEngineConfiguration {
   /** indicates whether the job executor should be automatically activated */
   public static String PROP_IS_ACTIVATE_JOB_EXECUTOR = "isActivateJobExecutor";
   
+  /** the prefix to be used for all process engine database tables */
+  public static String PROP_DB_TABLE_PREFIX = "dbTablePrefix";
+  
   /**
    * @return true if this is the default process engine.
    * There can only be one default process engine per 

File: core/client/src/main/java/com/camunda/fox/client/impl/executor/ProcessArchiveContextExecutor.java
Patch:
@@ -18,6 +18,8 @@
 import javax.ejb.ConcurrencyManagement;
 import javax.ejb.ConcurrencyManagementType;
 import javax.ejb.Singleton;
+import javax.ejb.TransactionAttribute;
+import javax.ejb.TransactionAttributeType;
 
 import com.camunda.fox.platform.spi.ProcessArchive;
 import com.camunda.fox.platform.spi.ProcessArchiveCallback;
@@ -33,6 +35,7 @@
 @Singleton
 //make sure the container does not synchronize access to this bean
 @ConcurrencyManagement(ConcurrencyManagementType.BEAN) 
+@TransactionAttribute(TransactionAttributeType.SUPPORTS)
 public class ProcessArchiveContextExecutor {
   
   public <T> T executeWithinContext(ProcessArchiveCallback<T> callback) throws

File: core/client/src/main/java/com/camunda/fox/client/impl/executor/ProcessArchiveContextExecutor.java
Patch:
@@ -18,6 +18,8 @@
 import javax.ejb.ConcurrencyManagement;
 import javax.ejb.ConcurrencyManagementType;
 import javax.ejb.Singleton;
+import javax.ejb.TransactionAttribute;
+import javax.ejb.TransactionAttributeType;
 
 import com.camunda.fox.platform.spi.ProcessArchive;
 import com.camunda.fox.platform.spi.ProcessArchiveCallback;
@@ -33,6 +35,7 @@
 @Singleton
 //make sure the container does not synchronize access to this bean
 @ConcurrencyManagement(ConcurrencyManagementType.BEAN) 
+@TransactionAttribute(TransactionAttributeType.SUPPORTS)
 public class ProcessArchiveContextExecutor {
   
   public <T> T executeWithinContext(ProcessArchiveCallback<T> callback) throws

File: core/service/src/main/java/com/camunda/fox/platform/impl/configuration/CmpeProcessEngineConfiguration.java
Patch:
@@ -64,7 +64,8 @@ public CmpeProcessEngineConfiguration(ProcessEngineController processEngineServi
   @Override
   protected void init() {
     transactionsExternallyManaged = true;
-    initProcessArchiveServices();
+    isCreateDiagramOnDeploy = false;
+    initProcessArchiveServices();    
     super.init();    
   }
   

File: qa/integration-tests/src/test/java/com/camunda/fox/platform/test/util/AbstractFoxPlatformIntegrationTest.java
Patch:
@@ -99,7 +99,7 @@ public static ProcessArchiveService getProcessArchiveService() {
       return null;
     }
   }
-         
+
   @Before
   public void setupBeforeTest() {
     processEngineService = getProcessEngineService();

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -2166,7 +2166,7 @@ protected TaskListener parseTaskListener(Element taskListenerElement) {
     } else if (delegateExpression != null) {
       taskListener = new DelegateExpressionTaskListener(expressionManager.createExpression(delegateExpression));
     } else {
-      addError("Element 'class' or 'expression' is mandatory on taskListener", taskListenerElement);
+      addError("Element 'class', 'expression' or 'delegateExpression' is mandatory on taskListener", taskListenerElement);
     }
     return taskListener;
   }

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -2143,7 +2143,7 @@ protected void parseTaskListeners(Element userTaskElement, TaskDefinition taskDe
             TaskListener taskListener = parseTaskListener(taskListenerElement);
             taskDefinition.addTaskListener(eventName, taskListener);
           } else {
-            addError("Invalid eventName for taskListener: choose 'create' |'assignment'", userTaskElement);
+            addError("Invalid eventName for taskListener: choose 'create' | 'assignment' | 'complete'", userTaskElement);
           }
         } else {
           addError("Event is mandatory on taskListener", userTaskElement);

File: core/service/src/main/java/com/camunda/fox/platform/impl/configuration/CmpeProcessEngineConfiguration.java
Patch:
@@ -59,6 +59,7 @@ public CmpeProcessEngineConfiguration(ProcessEngineController processEngineServi
   @Override
   protected void init() {
     transactionsExternallyManaged = true;
+    isCreateDiagramOnDeploy = false;
     initProcessArchiveServices();    
     super.init();    
   }

File: qa/integration-tests/src/test/java/com/camunda/fox/platform/test/util/AbstractFoxPlatformIntegrationTest.java
Patch:
@@ -99,7 +99,7 @@ public static ProcessArchiveService getProcessArchiveService() {
       return null;
     }
   }
-         
+
   @Before
   public void setupBeforeTest() {
     processEngineService = getProcessEngineService();

File: activiti-engine/src/test/java/org/activiti/examples/bpmn/authorization/StartAuthorizationTest.java
Patch:
@@ -270,15 +270,15 @@ public void testProcessDefinitionList() throws Exception {
               .createProcessDefinitionQuery().processDefinitionKey("process2")
               .singleResult();      
       List<Group> authorizedGroups =  ProcessEngines.getDefaultProcessEngine().getIdentityService()
-          .createGroupQuery().potentialStarter(latestProcessDef.getId()).orderByGroupId().asc().list();
+          .createGroupQuery().potentialStarter(latestProcessDef.getId()).list();
       assertEquals(0, authorizedGroups.size());
       
       // Process 3 has 3 groups as authorized starter groups
       latestProcessDef = repositoryService
               .createProcessDefinitionQuery().processDefinitionKey("process4")
               .singleResult();      
       authorizedGroups =  ProcessEngines.getDefaultProcessEngine().getIdentityService()
-          .createGroupQuery().potentialStarter(latestProcessDef.getId()).list();
+          .createGroupQuery().potentialStarter(latestProcessDef.getId()).orderByGroupId().asc().list();
       assertEquals(3, authorizedGroups.size());
       assertEquals("group1", authorizedGroups.get(0).getId());
       assertEquals("group2", authorizedGroups.get(1).getId());

File: activiti-engine/src/test/java/org/activiti/examples/bpmn/authorization/StartAuthorizationTest.java
Patch:
@@ -270,7 +270,7 @@ public void testProcessDefinitionList() throws Exception {
               .createProcessDefinitionQuery().processDefinitionKey("process2")
               .singleResult();      
       List<Group> authorizedGroups =  ProcessEngines.getDefaultProcessEngine().getIdentityService()
-          .createGroupQuery().potentialStarter(latestProcessDef.getId()).list();
+          .createGroupQuery().potentialStarter(latestProcessDef.getId()).orderByGroupId().asc().list();
       assertEquals(0, authorizedGroups.size());
       
       // Process 3 has 3 groups as authorized starter groups

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -2188,7 +2188,7 @@ public void parseBoundaryEvents(Element parentElement, ScopeImpl scopeElement) {
       boolean interrupting = cancelActivity.equals("true") ? true : false;
 
       // Catch event behavior is the same for most types
-      ActivityBehavior behavior = new BoundaryEventActivityBehavior(interrupting);
+      ActivityBehavior behavior = new BoundaryEventActivityBehavior(interrupting, nestedActivity.getId());
 
       // Depending on the sub-element definition, the correct activityBehavior
       // parsing is selected

File: activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerExecuteNestedActivityJobHandler.java
Patch:
@@ -43,7 +43,6 @@ public void execute(String configuration, ExecutionEntity execution, CommandCont
     }
 
     try {
-      execution.setActivity(borderEventActivity);
       
       borderEventActivity
         .getActivityBehavior()

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParseListener.java
Patch:
@@ -63,5 +63,7 @@ public interface BpmnParseListener {
   void parseTransaction(Element transactionElement, ScopeImpl scope, ActivityImpl activity);
   void parseCompensateEventDefinition(Element compensateEventDefinition, ActivityImpl compensationActivity);
   void parseIntermediateThrowEvent(Element intermediateEventElement, ScopeImpl scope, ActivityImpl activity);
+  void parseIntermediateCatchEvent(Element intermediateEventElement, ScopeImpl scope, ActivityImpl activity);
+  void parseBoundaryEvent(Element boundaryEventElement, ScopeImpl scopeElement, ActivityImpl nestedActivity);
 
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/cmd/ExecuteJobsCmd.java
Patch:
@@ -22,7 +22,7 @@
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.interceptor.CommandExecutor;
-import org.activiti.engine.impl.jobexecutor.DecrementJobRetriesListener;
+import org.activiti.engine.impl.jobexecutor.FailedJobListener;
 import org.activiti.engine.impl.jobexecutor.JobExecutorContext;
 import org.activiti.engine.impl.persistence.entity.JobEntity;
 
@@ -73,7 +73,7 @@ public Object execute(CommandContext commandContext) {
       
       commandContext.getTransactionContext().addTransactionListener(
         TransactionState.ROLLED_BACK, 
-        new DecrementJobRetriesListener(commandExecutor, jobId, exception));
+        new FailedJobListener(commandExecutor, jobId, exception));
        
       // throw the original exception to indicate the ExecuteJobCmd failed
       throw exception;

File: activiti-cdi/src/main/java/org/activiti/cdi/BusinessProcess.java
Patch:
@@ -434,7 +434,8 @@ public void setExecutionId(String executionId) {
    * @see #getExecution()
    */
   @Produces @Named public String getExecutionId() {
-    return associationManager.getExecutionId();
+    Execution e = getExecution();
+    return e != null ? e.getId() : null;
   }
 
   /**

File: core/client/src/main/java/com/camunda/fox/client/impl/parser/DefaultProcessesXmlParser.java
Patch:
@@ -21,15 +21,14 @@
 import java.util.logging.Logger;
 
 import javax.xml.bind.JAXBContext;
-import javax.xml.bind.JAXBException;
 import javax.xml.bind.Unmarshaller;
 
 import org.activiti.engine.impl.util.IoUtil;
 
 import com.camunda.fox.client.impl.parser.spi.ProcessesXmlParser;
 import com.camunda.fox.client.impl.schema.ProcessesXml;
-import com.camunda.fox.client.impl.schema.ProcessesXmlDeprecated;
 import com.camunda.fox.client.impl.schema.ProcessesXml.ProcessArchiveXml;
+import com.camunda.fox.client.impl.schema.ProcessesXmlDeprecated;
 import com.camunda.fox.client.impl.schema.ProcessesXmlDeprecated.Process;
 import com.camunda.fox.platform.FoxPlatformException;
 

File: core/api/src/main/java/com/camunda/fox/platform/api/ProcessArchiveService.java
Patch:
@@ -54,7 +54,7 @@ public static interface ProcessArchiveInstallation {
     /**
      * @return the {@link ProcessEngine} to which the {@link ProcessArchive} was installed.
      */
-    public ProcessEngine getProcessenEngine();
+    public ProcessEngine getProcessEngine();
     
     /**
      * @return the id of the deployment made to the {@link ProcessEngine}. 

File: core/client/src/main/java/com/camunda/fox/processarchive/ProcessArchiveSupport.java
Patch:
@@ -84,7 +84,7 @@ protected void installProcessArchive() {
     ProcessesXml processesXml = parser.parseProcessesXml();
     setProcessArchiveName(processesXml);
     processArchive = new ProcessArchiveImpl(processesXml, processArchiveContextExecutorBean, defaultProcessEngineName);
-    processEngine = processArchiveService.installProcessArchive(processArchive).getProcessenEngine();
+    processEngine = processArchiveService.installProcessArchive(processArchive).getProcessEngine();
   }
 
   @PreDestroy

File: core/service/src/main/java/com/camunda/fox/platform/impl/service/PlatformService.java
Patch:
@@ -214,7 +214,7 @@ public ProcessArchiveInstallationImpl(ProcessEngine processEngine, String proces
       this.processEngineDeploymentId = processEngineDeploymentId;
     }
 
-    public ProcessEngine getProcessenEngine() {
+    public ProcessEngine getProcessEngine() {
       return processEngine;
     }
 

File: core/service/src/test/java/com/camunda/fox/platform/impl/test/TestProcessArchiveService.java
Patch:
@@ -49,7 +49,7 @@ public void testInstallProcessArchive() throws Exception {
     ProcessArchive processArchive = new DummyProcessArchive("archive1", engine1.getName(), false, new HashMap<String, byte[]>(), true);    
     ProcessArchiveInstallation installProcessArchive = processArchiveService.installProcessArchive(processArchive);    
     
-    Assert.assertNotNull(installProcessArchive.getProcessenEngine());
+    Assert.assertNotNull(installProcessArchive.getProcessEngine());
     Assert.assertNull(installProcessArchive.getProcessEngineDeploymentId());
     
     Assert.assertEquals(1, processArchiveService.getInstalledProcessArchives().size());

File: src/main/java/com/camunda/fox/cockpit/demo/deployer/FoxPlatformDemoDataDeployer.java
Patch:
@@ -16,7 +16,7 @@ public class FoxPlatformDemoDataDeployer implements DemoDataDeployer {
      "java:global/" +
      "camunda-fox-platform/" +
      "process-engine/" +
-     "ProcessEngineService!com.camunda.fox.platform.api.ProcessArchiveService")
+     "PlatformService!com.camunda.fox.platform.api.ProcessArchiveService")
   protected ProcessArchiveService processEngineService;
  
   // lookup the process archive context executor

File: qa/activiti-testsuite/src/main/java/org/activiti/engine/impl/test/TestHelper.java
Patch:
@@ -39,6 +39,7 @@
 import org.activiti.engine.test.Deployment;
 
 import com.camunda.fox.platform.api.ProcessArchiveService;
+import com.camunda.fox.platform.api.ProcessEngineService;
 import com.camunda.fox.platform.spi.ProcessArchive;
 import com.camunda.fox.platform.spi.ProcessArchiveCallback;
 import com.camunda.fox.processarchive.executor.ProcessArchiveContextExecutor;
@@ -137,7 +138,7 @@ public <T> T executeWithinContext(ProcessArchiveCallback<T> callback) throws Exc
 
       @Override
       public String getProcessEngineName() {
-        return "process-engine";
+        return null;
       }
 
       @Override

File: core/service/src/main/java/com/camunda/fox/platform/impl/service/ProcessEngineController.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.io.StringWriter;
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
@@ -106,7 +107,8 @@ public synchronized void start() {
   public synchronized void stop() {
     closeProcessEngine();       
 
-    for (ProcessArchiveContext processArchive : installedProcessArchivesByName.values()) {
+    Collection<ProcessArchiveContext> installedProcessArchives = new ArrayList<ProcessArchiveContext>(installedProcessArchivesByName.values());
+    for (ProcessArchiveContext processArchive : installedProcessArchives) {
       unInstallProcessArchive(processArchive.getProcessArchive());      
     }
 

File: qa/activiti-testsuite/src/main/java/org/activiti/engine/impl/test/PluggableActivitiTestCase.java
Patch:
@@ -63,7 +63,7 @@ private static void initEngine() {
       try {
         InitialContext initialContext = new InitialContext();
         ProcessEngineService processEngineService = (ProcessEngineService) initialContext.lookup(PROCESS_ENGINE_SERVICE_LOOKUP);
-        cachedProcessEngine = processEngineService.getProcessEngine("process-engine");
+        cachedProcessEngine = processEngineService.getDefaultProcessEngine();
       }catch (Exception e) {
         throw new FoxPlatformException("Could not lookup process engine: ",e);
       }

File: activiti-webapp-explorer2/src/test/java/org/activiti/explorer/util/time/HumanTimeTest.java
Patch:
@@ -33,6 +33,7 @@ public void testHumanTime() {
     I18nManager i18nManager = new DummyI18nManager();
     
     Calendar now = Calendar.getInstance();
+    now.setTime(new Date(293840293840L));
     HumanTime humanTime = new HumanTime(now.getTime(), i18nManager);
     
     // Edge cases

File: activiti-engine/src/test/java/org/activiti/examples/processdefinitions/ProcessDefinitionsTest.java
Patch:
@@ -110,7 +110,7 @@ public void testDeployIdenticalProcessDefinitions() {
   }
   
   private String deployProcessString(String processString) {
-    String resourceName = "xmlString." + BpmnDeployer.BPMN_RESOURCE_SUFFIX;
+    String resourceName = "xmlString." + BpmnDeployer.BPMN_RESOURCE_SUFFIXES[0];
     return repositoryService.createDeployment().addString(resourceName, processString).deploy().getId();
   }
   

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -54,6 +54,7 @@ public class BpmnDeployer implements Deployer {
 
   private static final Logger LOG = Logger.getLogger(BpmnDeployer.class.getName());;
 
+  //TODO: Add suffix .bpmn as well, since that is "normal" in the BPMN world (Eclipde Designer, Signavio, jBPM 5)
   public static final String BPMN_RESOURCE_SUFFIX = "bpmn20.xml";
   public static final String[] DIAGRAM_SUFFIXES = new String[]{"png", "jpg", "gif", "svg"};
 

File: activiti-webapp-rest2/src/main/java/org/activiti/rest/api/SecuredResource.java
Patch:
@@ -42,6 +42,7 @@ protected boolean authenticate(String group) {
       return false;
     
     } else if(group == null) {
+      ActivitiUtil.getIdentityService().setAuthenticatedUserId(loggedInUser);
       return true;
     
     } else {
@@ -51,6 +52,7 @@ protected boolean authenticate(String group) {
         for (Group groupObject : groupList) {
           if(groupObject.getId().equals(group)) {
             allowed = true;
+            ActivitiUtil.getIdentityService().setAuthenticatedUserId(loggedInUser);
             break;
           }
         }

File: activiti-webapp-rest2/src/main/java/org/activiti/rest/api/process/StartProcessInstanceResource.java
Patch:
@@ -59,7 +59,6 @@ public StartProcessInstanceResponse startProcessInstance(Representation entity)
       variables.remove("processDefinitionKey");
       variables.remove("businessKey");
       
-      ActivitiUtil.getIdentityService().setAuthenticatedUserId(loggedInUser);
       ProcessInstance processInstance = null;
       if (processDefinitionKey != null) {
         processInstance = ActivitiUtil.getRuntimeService().startProcessInstanceByKey(processDefinitionKey, businessKey, variables);

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/helper/ErrorPropagation.java
Patch:
@@ -47,6 +47,7 @@ public static void propagateError(BpmnError error, ActivityExecution execution)
       // search for error handler with same error code as thrown Error
       for (PvmActivity activity : scope.getActivities()) {
         if (((ActivityImpl) activity).getActivityBehavior() instanceof BoundaryEventActivityBehavior
+                && "boundaryError".equals(activity.getProperty("type"))
                 && error.getErrorCode().equals(activity.getProperty("errorCode"))) {
           errorEventHandler = activity;
           break;
@@ -56,6 +57,7 @@ public static void propagateError(BpmnError error, ActivityExecution execution)
       if (errorEventHandler == null) {
         for (PvmActivity activity : scope.getActivities()) {
           if (((ActivityImpl) activity).getActivityBehavior() instanceof BoundaryEventActivityBehavior
+                  && "boundaryError".equals(activity.getProperty("type"))
                   && (activity.getProperty("errorCode") == null || "".equals(activity.getProperty("errorCode")))) {
             errorEventHandler = activity;
             break;

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/helper/ErrorPropagation.java
Patch:
@@ -137,8 +137,7 @@ protected static void executeCatchInSuperProcess(String errorCode, ActivityExecu
       if (superSuperExecution != null) {
         executeCatchInSuperProcess(errorCode, superSuperExecution);
       } else {
-        // TODO maybe throw BpmnError?
-        throw new ActivitiException("No catching boundary event found for error with errorCode '" 
+        throw new BpmnError(errorCode, "No catching boundary event found for error with errorCode '" 
                 + errorCode + "', neither in same process nor in parent process");
       }
     }

File: activiti-engine/src/main/java/org/activiti/engine/delegate/BpmnError.java
Patch:
@@ -11,10 +11,9 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.impl.bpmn.event;
+package org.activiti.engine.delegate;
 
 import org.activiti.engine.ActivitiException;
-import org.activiti.engine.delegate.JavaDelegate;
 import org.activiti.engine.impl.bpmn.parser.Error;
 
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ErrorEndEventActivityBehavior.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.activiti.engine.impl.bpmn.behavior;
 
-import org.activiti.engine.impl.bpmn.event.ErrorPropagation;
+import org.activiti.engine.impl.bpmn.helper.ErrorPropagation;
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
 
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/MultiInstanceActivityBehavior.java
Patch:
@@ -20,11 +20,11 @@
 import java.util.logging.Logger;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.delegate.BpmnError;
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.ExecutionListener;
 import org.activiti.engine.delegate.Expression;
-import org.activiti.engine.impl.bpmn.event.BpmnError;
-import org.activiti.engine.impl.bpmn.event.ErrorPropagation;
+import org.activiti.engine.impl.bpmn.helper.ErrorPropagation;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.delegate.ExecutionListenerInvocation;
 import org.activiti.engine.impl.pvm.delegate.ActivityBehavior;
@@ -45,6 +45,7 @@
  * to delegate to the {@link MultiInstanceActivityBehavior} if needed.
  * 
  * @author Joram Barrez
+ * @author Falko Menge
  */
 public abstract class MultiInstanceActivityBehavior extends FlowNodeActivityBehavior  
   implements CompositeActivityBehavior, SubProcessActivityBehavior {

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ScriptTaskActivityBehavior.java
Patch:
@@ -15,8 +15,8 @@
 import javax.script.ScriptException;
 
 import org.activiti.engine.ActivitiException;
-import org.activiti.engine.impl.bpmn.event.BpmnError;
-import org.activiti.engine.impl.bpmn.event.ErrorPropagation;
+import org.activiti.engine.delegate.BpmnError;
+import org.activiti.engine.impl.bpmn.helper.ErrorPropagation;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
 import org.activiti.engine.impl.scripting.ScriptingEngines;
@@ -27,6 +27,7 @@
  * 
  * @author Joram Barrez
  * @author Christian Stettler
+ * @author Falko Menge
  */
 public class ScriptTaskActivityBehavior extends TaskActivityBehavior {
   

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/SequentialMultiInstanceBehavior.java
Patch:
@@ -13,14 +13,15 @@
 package org.activiti.engine.impl.bpmn.behavior;
 
 import org.activiti.engine.ActivitiException;
-import org.activiti.engine.impl.bpmn.event.BpmnError;
+import org.activiti.engine.delegate.BpmnError;
 import org.activiti.engine.impl.pvm.delegate.ActivityBehavior;
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
 import org.activiti.engine.impl.pvm.process.ActivityImpl;
 
 
 /**
  * @author Joram Barrez
+ * @author Falko Menge
  */
 public class SequentialMultiInstanceBehavior extends MultiInstanceActivityBehavior {
   

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/helper/ClassDelegate.java
Patch:
@@ -19,15 +19,14 @@
 import java.util.List;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.delegate.BpmnError;
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.DelegateTask;
 import org.activiti.engine.delegate.ExecutionListener;
 import org.activiti.engine.delegate.JavaDelegate;
 import org.activiti.engine.delegate.TaskListener;
 import org.activiti.engine.impl.bpmn.behavior.AbstractBpmnActivityBehavior;
 import org.activiti.engine.impl.bpmn.behavior.ServiceTaskJavaDelegateActivityBehavior;
-import org.activiti.engine.impl.bpmn.event.BpmnError;
-import org.activiti.engine.impl.bpmn.event.ErrorPropagation;
 import org.activiti.engine.impl.bpmn.parser.FieldDeclaration;
 import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.delegate.ExecutionListenerInvocation;

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/helper/ErrorPropagation.java
Patch:
@@ -11,11 +11,12 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.impl.bpmn.event;
+package org.activiti.engine.impl.bpmn.helper;
 
 import java.util.logging.Logger;
 
 import org.activiti.engine.ActivitiException;
+import org.activiti.engine.delegate.BpmnError;
 import org.activiti.engine.impl.bpmn.behavior.BoundaryEventActivityBehavior;
 import org.activiti.engine.impl.bpmn.behavior.ErrorEndEventActivityBehavior;
 import org.activiti.engine.impl.persistence.entity.ExecutionEntity;

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/Error.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.activiti.engine.impl.bpmn.parser;
 
-import org.activiti.engine.impl.bpmn.event.BpmnError;
+import org.activiti.engine.delegate.BpmnError;
 
 
 /**

File: activiti-engine/src/test/java/org/activiti/engine/test/bpmn/event/error/ThrowBpmnErrorDelegate.java
Patch:
@@ -13,9 +13,9 @@
 
 package org.activiti.engine.test.bpmn.event.error;
 
+import org.activiti.engine.delegate.BpmnError;
 import org.activiti.engine.delegate.DelegateExecution;
 import org.activiti.engine.delegate.JavaDelegate;
-import org.activiti.engine.impl.bpmn.event.BpmnError;
 
 
 /**

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/MultiInstanceActivityBehavior.java
Patch:
@@ -84,7 +84,7 @@ public void execute(ActivityExecution execution) throws Exception {
       try {
         createInstances(execution);
       } catch (BpmnError error) {
-        ErrorPropagation.propagateError(execution, error);
+        ErrorPropagation.propagateError(error, execution);
       }
     } else {
         innerActivityBehavior.execute(execution);

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/helper/ClassDelegate.java
Patch:
@@ -115,7 +115,7 @@ public void execute(ActivityExecution execution) throws Exception {
     try {
       activityBehaviorInstance.execute(execution);
     } catch (BpmnError error) {
-      ErrorPropagation.propagateError(execution, error);
+      ErrorPropagation.propagateError(error, execution);
     }
   }
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ErrorEndEventActivityBehavior.java
Patch:
@@ -50,7 +50,7 @@ public void execute(ActivityExecution execution) throws Exception {
       if (superExecution != null) {
         executeCatchInSuperProcess(superExecution);
       } else {
-        // TODO Shouldn't this be an exception as in executeCatchInSuperProcess()?
+        // TODO Shouldn't this be an exception as in executeCatchInSuperProcess() or is this dead code?
         LOG.info(execution.getActivity().getId() + " throws error event with errorCode '"
                 + errorCode + "', but no catching boundary event was defined. "
                 +   "Execution will simply be ended (none end event semantics).");

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ErrorEndEventActivityBehavior.java
Patch:
@@ -69,7 +69,8 @@ protected void executeCatchInSuperProcess(ActivityExecution superExecution) {
       if (outgoingExecution != null && catchingActivity != null) {
         for (ActivityImpl nestedActivity : catchingActivity.getActivities()) {
           if ("boundaryError".equals(nestedActivity.getProperty("type"))
-                  && errorCode.equals(nestedActivity.getProperty("errorCode"))) {
+                  && (nestedActivity.getProperty("errorCode") == null 
+                      || errorCode.equals(nestedActivity.getProperty("errorCode")))) {
             found = true;
             catchingActivity = nestedActivity;
           }

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -58,7 +58,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement("postgres", "selectCommentsByProcessInstanceId", "selectCommentsByProcessInstanceId_postgres");
     
     // oracle
-    addDatabaseSpecificStatement("oracle", "selectNextJobsToExecute", "selectNextJobsToExecute_oracle");
+    addDatabaseSpecificStatement("oracle", "selectExclusiveJobsToExecute", "selectExclusiveJobsToExecute_oracle");
   }
   
   protected String databaseType;

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -56,6 +56,9 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement("postgres", "insertComment", "insertComment_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByTaskId", "selectCommentsByTaskId_postgres");
     addDatabaseSpecificStatement("postgres", "selectCommentsByProcessInstanceId", "selectCommentsByProcessInstanceId_postgres");
+    
+    // oracle
+    addDatabaseSpecificStatement("oracle", "selectNextJobsToExecute", "selectNextJobsToExecute_oracle");
   }
   
   protected String databaseType;

File: activiti-webapp-rest2/src/main/java/org/activiti/rest/application/ActivitiRestApplication.java
Patch:
@@ -20,6 +20,7 @@
 import org.activiti.rest.api.identity.GroupUsersResource;
 import org.activiti.rest.api.identity.LoginResource;
 import org.activiti.rest.api.identity.UserGroupsResource;
+import org.activiti.rest.api.identity.UserPictureResource;
 import org.activiti.rest.api.identity.UserResource;
 import org.activiti.rest.api.management.JobExecuteResource;
 import org.activiti.rest.api.management.JobResource;
@@ -100,6 +101,8 @@ protected boolean authenticate(Request request, Response response) {
     
     router.attach("/user/{userId}", UserResource.class);
     router.attach("/user/{userId}/groups", UserGroupsResource.class);
+    router.attach("/user/{userId}/picture", UserPictureResource.class);
+    
     router.attach("/group/{groupId}", GroupResource.class);
     router.attach("/groups/{groupId}/users", GroupUsersResource.class);
     

File: activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetPropertiesCmd.java
Patch:
@@ -34,7 +34,7 @@ public class GetPropertiesCmd implements Command<Map<String, String>>, Serializa
   public Map<String, String> execute(CommandContext commandContext) {
     List<PropertyEntity> propertyEntities = commandContext
       .getDbSqlSession()
-      .selectList("org.activiti.persistence.selectProperties");
+      .selectList("selectProperties");
     
     Map<String, String> properties = new HashMap<String, String>();
     for (PropertyEntity propertyEntity: propertyEntities) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/JobManager.java
Patch:
@@ -110,7 +110,7 @@ public List<TimerEntity> findTimersByExecutionId(String executionId) {
 
   @SuppressWarnings("unchecked")
   public List<Job> findJobsByQueryCriteria(JobQueryImpl jobQuery, Page page) {
-    final String query = "org.activiti.persistence.selectJobByQueryCriteria";
+    final String query = "selectJobByQueryCriteria";
     return getDbSqlSession().selectList(query, jobQuery, page);
   }
 
@@ -119,11 +119,11 @@ public List<Job> findJobsByConfiguration(String jobHandlerType, String jobHandle
     Map<String, String> params = new HashMap<String, String>();
     params.put("handlerType", jobHandlerType);
     params.put("handlerConfiguration", jobHandlerConfiguration);
-    return getDbSqlSession().selectList("org.activiti.persistence.selectJobsByConfiguration", params);
+    return getDbSqlSession().selectList("selectJobsByConfiguration", params);
   }
 
   public long findJobCountByQueryCriteria(JobQueryImpl jobQuery) {
-    return (Long) getDbSqlSession().selectOne("org.activiti.persistence.selectJobCountByQueryCriteria", jobQuery);
+    return (Long) getDbSqlSession().selectOne("selectJobCountByQueryCriteria", jobQuery);
   }
 
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/ManagementServiceImpl.java
Patch:
@@ -67,7 +67,7 @@ public Map<String, String> getProperties() {
   public String databaseSchemaUpgrade(final Connection connection, final String catalog, final String schema) {
     return commandExecutor.execute(new Command<String>(){
       public String execute(CommandContext commandContext) {
-        DbSqlSessionFactory dbSqlSessionFactory = (DbSqlSessionFactory) commandContext.getSessionFactories().get(DbSqlSessionFactory.class);
+        DbSqlSessionFactory dbSqlSessionFactory = (DbSqlSessionFactory) commandContext.getSessionFactories().get(DbSqlSession.class);
         DbSqlSession dbSqlSession = new DbSqlSession(dbSqlSessionFactory, connection, catalog, schema);
         commandContext.getSessions().put(DbSqlSession.class, dbSqlSession);
         return dbSqlSession.dbSchemaUpdate();

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParseListener.java
Patch:
@@ -13,6 +13,8 @@
 
 package org.activiti.engine.impl.bpmn.parser;
 
+import java.util.List;
+
 import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
 import org.activiti.engine.impl.pvm.process.ActivityImpl;
 import org.activiti.engine.impl.pvm.process.ScopeImpl;
@@ -48,4 +50,5 @@ public interface BpmnParseListener {
   void parseSendTask(Element sendTaskElement, ScopeImpl scope, ActivityImpl activity);
   void parseMultiInstanceLoopCharacteristics(Element activityElement, Element multiInstanceLoopCharacteristicsElement, ActivityImpl activity);
   void parseIntermediateTimerEventDefinition(Element timerEventDefinition, ActivityImpl timerActivity);
+  void parseRootElement(Element rootElement, List<ProcessDefinitionEntity> processDefinitions);
 }

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/management/deployment/DeploymentListQuery.java
Patch:
@@ -72,11 +72,11 @@ class DeploymentListitem extends PropertysetItem implements Comparable<Deploymen
     private static final long serialVersionUID = 1L;
     
     public DeploymentListitem(Deployment deployment) {
-      addItemProperty("id", new ObjectProperty<String>(deployment.getId()));
+      addItemProperty("id", new ObjectProperty<String>(deployment.getId(), String.class));
       if(deployment.getName() != null) {
-        addItemProperty("name", new ObjectProperty<String>(deployment.getName()));
+        addItemProperty("name", new ObjectProperty<String>(deployment.getName(), String.class));
       } else {
-        addItemProperty("name", new ObjectProperty<String>(ExplorerApp.get().getI18nManager().getMessage(Messages.DEPLOYMENT_NO_NAME)));
+        addItemProperty("name", new ObjectProperty<String>(ExplorerApp.get().getI18nManager().getMessage(Messages.DEPLOYMENT_NO_NAME), String.class));
       }
     }
 

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/management/identity/GroupListQuery.java
Patch:
@@ -66,12 +66,12 @@ class GroupListItem extends PropertysetItem implements Comparable<GroupListItem>
     private static final long serialVersionUID = 1L;
     
     public GroupListItem(Group group) {
-      addItemProperty("id", new ObjectProperty<String>(group.getId()));
+      addItemProperty("id", new ObjectProperty<String>(group.getId(), String.class));
       if (group.getName() != null) {
         addItemProperty("name", new ObjectProperty<String>(group.getName()
-                + " (" + group.getName() + ")"));
+                + " (" + group.getName() + ")", String.class));
       } else {
-        addItemProperty("name", new ObjectProperty<String>("(" + group.getId() + ")"));
+        addItemProperty("name", new ObjectProperty<String>("(" + group.getId() + ")", String.class));
       }
     }
 

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/management/identity/GroupSelectionQuery.java
Patch:
@@ -96,12 +96,12 @@ class GroupSelectionItem extends PropertysetItem {
     private static final long serialVersionUID = 1L;
 
     public GroupSelectionItem(Group group) {
-      addItemProperty("id", new ObjectProperty<String>(group.getId()));
+      addItemProperty("id", new ObjectProperty<String>(group.getId(), String.class));
       if (group.getName() != null) {
-        addItemProperty("name", new ObjectProperty<String>(group.getName()));
+        addItemProperty("name", new ObjectProperty<String>(group.getName(), String.class));
       }
       if (group.getType() != null) {
-        addItemProperty("type", new ObjectProperty<String>(group.getType()));
+        addItemProperty("type", new ObjectProperty<String>(group.getType(), String.class));
       }
     }
     

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/management/identity/UserListQuery.java
Patch:
@@ -68,9 +68,9 @@ class UserListItem extends PropertysetItem implements Comparable<UserListItem> {
     private static final long serialVersionUID = 1L;
 
     public UserListItem(User user) {
-      addItemProperty("id", new ObjectProperty<String>(user.getId()));
+      addItemProperty("id", new ObjectProperty<String>(user.getId(), String.class));
       addItemProperty("name", new ObjectProperty<String>(user.getFirstName() 
-              + " " + user.getLastName() + " (" + user.getId() + ")"));
+              + " " + user.getLastName() + " (" + user.getId() + ")", String.class));
     }
 
     public int compareTo(UserListItem other) {

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/management/job/JobListQuery.java
Patch:
@@ -74,9 +74,9 @@ class JobListItem extends PropertysetItem implements Comparable<JobListItem> {
     
     
     public JobListItem(Job job) {
-      addItemProperty("id", new ObjectProperty<String>(job.getId()));
-      addItemProperty("dueDate", new ObjectProperty<Date>(job.getDuedate()));
-      addItemProperty("name", new ObjectProperty<String>(getName(job)));
+      addItemProperty("id", new ObjectProperty<String>(job.getId(), String.class));
+      addItemProperty("dueDate", new ObjectProperty<Date>(job.getDuedate(), Date.class));
+      addItemProperty("name", new ObjectProperty<String>(getName(job), String.class));
     }
     
     private String getName(Job theJob) {

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/management/process/ProcessInstanceListItem.java
Patch:
@@ -28,8 +28,8 @@ class ProcessInstanceListItem extends PropertysetItem implements Comparable<Proc
   public static final String PROPERTY_NAME = "name";
   
   public ProcessInstanceListItem(final ProcessInstance processInstance, final String processDefinitionName) {
-    addItemProperty(PROPERTY_ID, new ObjectProperty<String>(processInstance.getId()));
-    addItemProperty(PROPERTY_NAME, new ObjectProperty<String>(processDefinitionName + " (id=" + processInstance.getId() +")"));
+    addItemProperty(PROPERTY_ID, new ObjectProperty<String>(processInstance.getId(), String.class));
+    addItemProperty(PROPERTY_NAME, new ObjectProperty<String>(processDefinitionName + " (id=" + processInstance.getId() +")", String.class));
   }
 
   public int compareTo(ProcessInstanceListItem other) {

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/process/ProcessInstanceItem.java
Patch:
@@ -29,8 +29,8 @@ public ProcessInstanceItem() {
   }
   
   public ProcessInstanceItem(ProcessInstance processInstance) {
-    addItemProperty("id", new ObjectProperty<String>(processInstance.getId()));
-    addItemProperty("businessKey", new ObjectProperty<String>(processInstance.getBusinessKey()));
+    addItemProperty("id", new ObjectProperty<String>(processInstance.getId(), String.class));
+    addItemProperty("businessKey", new ObjectProperty<String>(processInstance.getBusinessKey(), String.class));
   }
 
   public int compareTo(ProcessInstanceItem other) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/test/AbstractActivitiTestCase.java
Patch:
@@ -170,7 +170,7 @@ public void assertProcessEnded(final String processInstanceId) {
       .singleResult();
     
     if (processInstance!=null) {
-      throw new AssertionFailedError("expected finished process instance '"+processInstanceId+"' but it was still in the db"); 
+      throw new AssertionFailedError("Expected finished process instance '"+processInstanceId+"' but it was still in the db"); 
     }
   }
 

File: activiti-webapp-rest2/src/main/java/org/activiti/rest/api/task/TaskOperationResource.java
Patch:
@@ -50,9 +50,9 @@ public void executeTaskOperation(Representation entity) {
           variables.put(name, valueNode.getTextValue());
         }
       }
-      String currentUserId = "kermit";
+      
       if ("claim".equals(operation)) {
-        ActivitiUtil.getTaskService().claim(taskId, currentUserId);
+        ActivitiUtil.getTaskService().claim(taskId, loggedInUser);
       } else if ("complete".equals(operation)) {
         variables.remove("taskId");
         ActivitiUtil.getTaskService().complete(taskId, variables);

File: activiti-engine/src/main/java/org/activiti/engine/impl/cfg/IdGenerator.java
Patch:
@@ -26,6 +26,6 @@
  */
 public interface IdGenerator {
 
-  long getNextId();
+  String getNextId();
 
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/DbIdGenerator.java
Patch:
@@ -29,11 +29,12 @@ public class DbIdGenerator implements IdGenerator {
   
   protected CommandExecutor commandExecutor;
   
-  public synchronized long getNextId() {
+  public synchronized String getNextId() {
     if (lastId<nextId) {
       getNewBlock();
     }
-    return nextId++;
+    long _nextId = nextId++;
+    return Long.toString(_nextId);
   }
 
   protected synchronized void getNewBlock() {

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -101,8 +101,7 @@ public DbSqlSession(DbSqlSessionFactory dbSqlSessionFactory, Connection connecti
   
   public void insert(PersistentObject persistentObject) {
     if (persistentObject.getId()==null) {
-      long nextId = dbSqlSessionFactory.getIdGenerator().getNextId();
-      String id = Long.toString(nextId);
+      String id = dbSqlSessionFactory.getIdGenerator().getNextId();  
       persistentObject.setId(id);
     }
     insertedObjects.add(persistentObject);

File: activiti-engine/src/main/java/org/activiti/engine/impl/history/handler/ActivityInstanceStartHandler.java
Patch:
@@ -36,7 +36,7 @@ public void notify(DelegateExecution execution) {
     String executionId = execution.getId();
 
     HistoricActivityInstanceEntity historicActivityInstance = new HistoricActivityInstanceEntity();
-    historicActivityInstance.setId(Long.toString(idGenerator.getNextId()));
+    historicActivityInstance.setId(idGenerator.getNextId());
     historicActivityInstance.setProcessDefinitionId(processDefinitionId);
     historicActivityInstance.setProcessInstanceId(processInstanceId);
     historicActivityInstance.setExecutionId(executionId);

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/ProcessDefinitionEntity.java
Patch:
@@ -94,7 +94,7 @@ public ExecutionEntity createProcessInstance(String businessKey) {
       String executionId = processInstance.getId();
 
       HistoricActivityInstanceEntity historicActivityInstance = new HistoricActivityInstanceEntity();
-      historicActivityInstance.setId(Long.toString(idGenerator.getNextId()));
+      historicActivityInstance.setId(idGenerator.getNextId());
       historicActivityInstance.setProcessDefinitionId(processDefinitionId);
       historicActivityInstance.setProcessInstanceId(processInstanceId);
       historicActivityInstance.setExecutionId(executionId);

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BusinessRuleTaskActivityBehavior.java
Patch:
@@ -63,7 +63,7 @@ public void execute(ActivityExecution execution) throws Exception {
         Expression ruleName = itRuleNames.next();
         filter.addSuffic(ruleName.getValue(execution).toString());
       }
-      filter.setAccept(exclude);
+      filter.setAccept(!exclude);
       ksession.fireAllRules(filter);
       
     } else {

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/Messages.java
Patch:
@@ -241,6 +241,7 @@ public interface Messages {
   static final String DEPLOYMENT_HEADER_RESOURCES = "deployment.header.resources";
   static final String DEPLOYMENT_UPLOAD = "deployment.upload";
   static final String DEPLOYMENT_UPLOAD_DESCRIPTION = "deployment.upload.description";
+  static final String DEPLOYMENT_UPLOAD_FAILED = "deployment.upload.failed";
   static final String DEPLOYMENT_UPLOAD_INVALID_FILE = "deployment.upload.invalid.file";
   static final String DEPLOYMENT_UPLOAD_INVALID_FILE_EXPLANATION = "deployment.upload.invalid.file.explanation";
   static final String DEPLOYMENT_UPLOAD_SERVER_ERROR = "deployment.upload.server.error";

File: activiti-engine/src/test/java/org/activiti/engine/test/api/repository/ProcessDefinitionQueryTest.java
Patch:
@@ -117,7 +117,7 @@ public void testQueryByInvalidName() {
   }
   
   public void testQueryByNameLike() {
-    ProcessDefinitionQuery query = repositoryService.createProcessDefinitionQuery().processDefinitionNameLike("%o%");
+    ProcessDefinitionQuery query = repositoryService.createProcessDefinitionQuery().processDefinitionNameLike("%w%");
     verifyQueryResults(query, 1);
   }
   

File: activiti-engine/src/test/java/org/activiti/examples/mgmt/ManagementServiceTest.java
Patch:
@@ -29,7 +29,7 @@ public class ManagementServiceTest extends PluggableActivitiTestCase {
 
   public void testTableCount() {
     Map<String, Long> tableCount = managementService.getTableCount();
-
+    
     assertEquals(new Long(4), tableCount.get("ACT_GE_PROPERTY"));
     assertEquals(new Long(0), tableCount.get("ACT_GE_BYTEARRAY"));
     assertEquals(new Long(0), tableCount.get("ACT_RE_DEPLOYMENT"));
@@ -53,8 +53,8 @@ public void testGetTableMetaData() {
     assertTrue(assigneeIndex >= 0);
     assertTrue(createTimeIndex >= 0);
     
-    assertOneOf(new String [] {"VARCHAR", "NVARCHAR2", "nvarchar"}, tableMetaData.getColumnTypes().get(assigneeIndex));
-    assertOneOf(new String [] {"TIMESTAMP", "TIMESTAMP(6)", "datetime"}, tableMetaData.getColumnTypes().get(createTimeIndex));
+    assertOneOf(new String [] {"VARCHAR", "NVARCHAR2", "nvarchar", "NVARCHAR"}, tableMetaData.getColumnTypes().get(assigneeIndex));
+    assertOneOf(new String [] {"TIMESTAMP", "TIMESTAMP(6)", "datetime", "DATETIME"}, tableMetaData.getColumnTypes().get(createTimeIndex));
   }
   
   private void assertOneOf(String[] possibleValues, String currentValue) {

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ExplorerApp.java
Patch:
@@ -71,7 +71,7 @@ public void init() {
 //  public Window getWindow(String name) {
 //    Window window = super.getWindow(name);
 //    if (window == null) {
-//      window = new Window("Explorer - The Next generation");
+//      window = new Window("Activiti Explorer");
 //      window.setName(name);
 //      addWindow(window);
 //      window.open(new ExternalResource(window.getURL()));

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/management/db/DatabasePage.java
Patch:
@@ -26,7 +26,6 @@
 import com.vaadin.data.Property;
 import com.vaadin.data.Property.ValueChangeEvent;
 import com.vaadin.terminal.Resource;
-import com.vaadin.ui.Component;
 import com.vaadin.ui.Embedded;
 import com.vaadin.ui.Table;
 
@@ -103,14 +102,14 @@ protected Embedded determineTableIcon(String tableName) {
       Resource image = null;
       if (tableName.startsWith("ACT_HI")) {
         image = Images.DATABASE_HISTORY;
-      } else if (tableName.startsWith("ACT_GE")) {
-        image = Images.DATABASE_22;
       } else if (tableName.startsWith("ACT_RU")) {
         image = Images.DATABASE_RUNTIME;
       } else if (tableName.startsWith("ACT_RE")) {
         image = Images.DATABASE_REPOSITORY;
       } else if (tableName.startsWith("ACT_ID")) {
         image = Images.DATABASE_IDENTITY;
+      } else {
+        image = Images.DATABASE_22;
       }
       return new Embedded(null, image);
     }

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ExplorerApp.java
Patch:
@@ -172,13 +172,12 @@ public void onRequestStart(HttpServletRequest request, HttpServletResponse respo
 
     if(user != null) {
       Authentication.setAuthenticatedUserId(user.getId());
-      
       if (mainWindow != null && mainWindow.isShowingLoginPage()) {
         viewManager.showDefaultPage();
       }
     }
     
- // Callback to the login handler
+    // Callback to the login handler
     loginHandler.onRequestStart(request, response);
   }
   

File: activiti-engine/src/test/java/org/activiti/engine/test/bpmn/mail/EmailTestCase.java
Patch:
@@ -37,9 +37,7 @@ protected void tearDown() throws Exception {
     wiser.stop();
     
     // Fix for slow Jenkins
-    while (wiser.getServer().isRunning()) {
-      Thread.sleep(100L);
-    }
+    Thread.sleep(250L);
     
     super.tearDown();
   }

File: activiti-cycle/src/main/java/org/activiti/cycle/service/CycleConfigurationService.java
Patch:
@@ -125,7 +125,7 @@ public interface CycleConfigurationService {
   public void setConfigurationValue(String groupId, String key, String value);
 
   /**
-   * set a global configuration value, providing a default value
+   * get a global configuration value, providing a default value
    */
   public String getConfigurationValue(String groupId, String key, String defaultValue);
 
@@ -136,7 +136,7 @@ public interface CycleConfigurationService {
 
   /**
    * @param groupId
-   *          the groupId to retreive the configuration values for.
+   *          the groupId to retrieve the configuration values for.
    * @return an map of configuration Key/Value pairs for the provided groupid
    */
   public Map<String, String> getConfigurationValuesForGroup(String groupId);

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ExplorerApp.java
Patch:
@@ -18,6 +18,8 @@
 import org.activiti.engine.impl.identity.Authentication;
 import org.activiti.engine.impl.util.LogUtil;
 import org.activiti.explorer.cache.UserCache;
+import org.activiti.explorer.identity.LoggedInUser;
+import org.activiti.explorer.identity.LoggedInUserImpl;
 import org.activiti.explorer.navigation.UriFragment;
 import org.activiti.explorer.ui.ComponentFactory;
 import org.activiti.explorer.ui.MainWindow;

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/alfresco/AlfrescoMainMenuBar.java
Patch:
@@ -34,8 +34,8 @@ public synchronized void setMainNavigation(String navigation) {
   }
   
   @Override
-  protected void initProfileButton() {
-    // No profile button is needed
+  protected boolean useProfile() {
+    // Only show logout button, profile is not used in alfresco
+    return false;
   }
-
 }

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/custom/SelectUsersPopupWindow.java
Patch:
@@ -21,9 +21,9 @@
 import org.activiti.engine.identity.User;
 import org.activiti.explorer.ExplorerApp;
 import org.activiti.explorer.I18nManager;
-import org.activiti.explorer.LoggedInUser;
 import org.activiti.explorer.Messages;
 import org.activiti.explorer.cache.UserCache;
+import org.activiti.explorer.identity.LoggedInUser;
 import org.activiti.explorer.ui.Images;
 import org.activiti.explorer.ui.event.SubmitEvent;
 import org.activiti.explorer.ui.event.SubmitEventListener;

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/login/LoginHandler.java
Patch:
@@ -13,7 +13,7 @@
 
 package org.activiti.explorer.ui.login;
 
-import org.activiti.explorer.LoggedInUser;
+import org.activiti.explorer.identity.LoggedInUser;
 
 
 /**

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/login/LoginPage.java
Patch:
@@ -19,10 +19,10 @@
 import org.activiti.engine.ProcessEngines;
 import org.activiti.explorer.ExplorerApp;
 import org.activiti.explorer.I18nManager;
-import org.activiti.explorer.LoggedInUser;
 import org.activiti.explorer.Messages;
 import org.activiti.explorer.NotificationManager;
 import org.activiti.explorer.ViewManager;
+import org.activiti.explorer.identity.LoggedInUser;
 import org.activiti.explorer.ui.mainlayout.ExplorerLayout;
 
 import com.vaadin.ui.CustomLayout;

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/task/SubTaskComponent.java
Patch:
@@ -21,8 +21,8 @@
 import org.activiti.engine.task.Task;
 import org.activiti.explorer.ExplorerApp;
 import org.activiti.explorer.I18nManager;
-import org.activiti.explorer.LoggedInUser;
 import org.activiti.explorer.Messages;
+import org.activiti.explorer.identity.LoggedInUser;
 import org.activiti.explorer.ui.Images;
 import org.activiti.explorer.ui.mainlayout.ExplorerLayout;
 import org.activiti.explorer.ui.task.listener.DeleteSubTaskClickListener;

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/task/TaskMenuBar.java
Patch:
@@ -20,9 +20,9 @@
 import org.activiti.engine.identity.Group;
 import org.activiti.explorer.ExplorerApp;
 import org.activiti.explorer.I18nManager;
-import org.activiti.explorer.LoggedInUser;
 import org.activiti.explorer.Messages;
 import org.activiti.explorer.ViewManager;
+import org.activiti.explorer.identity.LoggedInUser;
 import org.activiti.explorer.ui.Images;
 import org.activiti.explorer.ui.custom.ToolBar;
 import org.activiti.explorer.ui.custom.ToolbarEntry;

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/custom/InMemoryUploadReceiver.java
Patch:
@@ -19,7 +19,7 @@
 import org.activiti.explorer.ExplorerApp;
 import org.activiti.explorer.Messages;
 import org.activiti.explorer.NotificationManager;
-import org.activiti.explorer.ui.util.StringUtil;
+import org.activiti.explorer.util.StringUtil;
 
 import com.vaadin.ui.Upload;
 import com.vaadin.ui.Upload.ProgressListener;

File: activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/TagsGet.java
Patch:
@@ -29,7 +29,7 @@ public class TagsGet extends ActivitiCycleWebScript {
   void execute(ActivitiRequest req, Status status, Cache cache, Map<String, Object> model) {
 
     String connectorId = req.getString("connectorId");
-    String repositoryNodeId = req.getString("repositoryNodeId");
+    String repositoryNodeId = req.getString("nodeId");
     String tag = req.getString("tag");
 
     List<String> tags;

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ExclusiveGatewayActivityBehavior.java
Patch:
@@ -60,7 +60,7 @@ protected void leave(ActivityExecution execution) {
       PvmTransition seqFlow = transitionIterator.next();
       
       Condition condition = (Condition) seqFlow.getProperty(BpmnParse.PROPERTYNAME_CONDITION);
-      if ( (condition == null && !seqFlow.getId().equals(defaultSequenceFlow)) 
+      if ( (condition == null && (defaultSequenceFlow == null || !defaultSequenceFlow.equals(seqFlow.getId())) ) 
               || (condition != null && condition.evaluate(execution)) ) {
         if (log.isLoggable(Level.FINE)) {
           log.fine("Sequence flow '" + seqFlow.getId() + " '"

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/Messages.java
Patch:
@@ -51,6 +51,7 @@ public interface Messages {
   static final String MAIN_MENU_FLOWS = "main.menu.flows";
   static final String MAIN_MENU_MANAGEMENT = "main.menu.management";
   static final String MAIN_MENU_REPORTS = "main.menu.reports";
+  static final String MAIN_MENU_REPOSITOTIES = "main.menu.repositories";
   
   // Password
   static final String PASSWORD_CHANGE = "password.change";

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/Images.java
Patch:
@@ -37,6 +37,7 @@ public class Images {
   public static final Resource MAIN_MENU_FLOWS = new ThemeResource("img/mm-flows.png");
   public static final Resource MAIN_MENU_MANAGE = new ThemeResource("img/mm-manage.png");
   public static final Resource MAIN_MENU_REPORTS = new ThemeResource("img/mm-reports.png");
+  public static final Resource MAIN_MENU_REPOSITORIES = new ThemeResource("img/mm-repository.png");
   
   // Task
   public static final Resource TASK_16 =  new ThemeResource("img/task-16.png");;
@@ -87,4 +88,5 @@ public class Images {
   // Flows
   public static final Resource FLOW_50 = new ThemeResource("img/flow-50.png");
   public static final Resource FLOW_22 = new ThemeResource("img/flow-22.png");
+  
 }

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/flow/ProcessInstancePage.java
Patch:
@@ -17,7 +17,7 @@
 import org.activiti.explorer.data.LazyLoadingContainer;
 import org.activiti.explorer.data.LazyLoadingQuery;
 import org.activiti.explorer.navigation.UriFragment;
-import org.activiti.explorer.ui.AbstractPage;
+import org.activiti.explorer.ui.AbstractTablePage;
 import org.activiti.explorer.ui.ExplorerLayout;
 import org.activiti.explorer.ui.Images;
 import org.activiti.explorer.ui.custom.ToolBar;
@@ -32,7 +32,7 @@
 /**
  * @author Frederik Heremans
  */
-public abstract class ProcessInstancePage extends AbstractPage {
+public abstract class ProcessInstancePage extends AbstractTablePage {
 
   private static final long serialVersionUID = 1L;
 

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/management/ManagementPage.java
Patch:
@@ -12,14 +12,14 @@
  */
 package org.activiti.explorer.ui.management;
 
-import org.activiti.explorer.ui.AbstractPage;
+import org.activiti.explorer.ui.AbstractTablePage;
 import org.activiti.explorer.ui.custom.ToolBar;
 
 
 /**
  * @author Joram Barrez
  */
-public abstract class ManagementPage extends AbstractPage {
+public abstract class ManagementPage extends AbstractTablePage {
   
   private static final long serialVersionUID = 1L;
   

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/management/deployment/DeleteDeploymentPopupWindow.java
Patch:
@@ -118,7 +118,7 @@ public void buttonClick(ClickEvent event) {
         // Delete deployment, close popup window and refresh deployment list
         repositoryService.deleteDeployment(deployment.getId(), true);
         close();
-        deploymentPage.refreshListSelectNext();
+        deploymentPage.refreshSelectNext();
       }
     });
     

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/management/identity/GroupDetailPanel.java
Patch:
@@ -269,7 +269,7 @@ protected void confirmed(ConfirmationEvent event) {
             identityService.deleteGroup(group.getId());
 
             // Update ui
-            groupPage.refreshListSelectNext();
+            groupPage.refreshSelectNext();
           }
         });
         

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/management/identity/UserDetailPanel.java
Patch:
@@ -315,7 +315,7 @@ protected void confirmed(ConfirmationEvent event) {
             identityService.deleteUser(user.getId());
 
             // Update ui
-            userPage.refreshListSelectNext();
+            userPage.refreshSelectNext();
             
             // Update user cache
             ExplorerApp.get().getUserCache().notifyUserDataChanged(user.getId());

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/task/TaskDetailPanel.java
Patch:
@@ -309,7 +309,7 @@ protected void handleFormSubmit(FormPropertiesEvent event) {
           Map<String, String> properties = event.getFormProperties();
           formService.submitTaskFormData(task.getId(), properties);
           notificationManager.showInformationNotification(Messages.TASK_COMPLETED, task.getName());
-          taskPage.refreshListSelectNext();
+          taskPage.refreshSelectNext();
         }
         
         @Override
@@ -347,7 +347,7 @@ public void buttonClick(ClickEvent event) {
           
           taskService.complete(task.getId());     
           notificationManager.showInformationNotification(Messages.TASK_COMPLETED, task.getName());
-          taskPage.refreshListSelectNext();
+          taskPage.refreshSelectNext();
         }
       });
       

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskEntity.java
Patch:
@@ -665,4 +665,7 @@ public void setDeleted(boolean isDeleted) {
   public String getParentTaskId() {
     return parentTaskId;
   }
+  public Map<String, VariableInstanceEntity> getVariableInstances() {
+    return variableInstances;
+  }
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TaskManager.java
Patch:
@@ -59,7 +59,7 @@ public void deleteTask(TaskEntity task, String deleteReason, boolean cascade) {
 
       commandContext
         .getVariableInstanceManager()
-        .deleteVariableInstanceByTaskId(taskId);
+        .deleteVariableInstanceByTask(task);
 
       if (cascade) {
         commandContext

File: activiti-engine/src/test/java/org/activiti/examples/bpmn/tasklistener/TaskCompleteListener.java
Patch:
@@ -28,6 +28,8 @@ public class TaskCompleteListener implements TaskListener {
   public void notify(DelegateTask delegateTask) {
     delegateTask.getExecution().setVariable("greeting", "Hello from " + greeter.getValue(delegateTask.getExecution()));
     delegateTask.getExecution().setVariable("shortName", shortName.getValue(delegateTask.getExecution()));
+    
+    delegateTask.setVariableLocal("myTaskVariable", "test");
   }
 
 }

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/task/ArchivedPage.java
Patch:
@@ -52,6 +52,7 @@ protected LazyLoadingQuery createLazyLoadingQuery() {
   protected Component createDetailComponent(String id) {
     HistoryService historyService = ProcessEngines.getDefaultProcessEngine().getHistoryService();
     HistoricTaskInstance historicTaskInstance = historyService.createHistoricTaskInstanceQuery().taskId(id).singleResult();
+    taskEventPanel.setTaskId(historicTaskInstance.getId());
     return new HistoricTaskDetailPanel(historicTaskInstance, this);
   }
 

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/task/TaskPage.java
Patch:
@@ -129,7 +129,7 @@ public void valueChange(ValueChangeEvent event) {
   protected Component createDetailComponent(String id) {
     Task task = taskService.createTaskQuery().taskId(id).singleResult();
     Component detailComponent = new TaskDetailPanel(task, TaskPage.this);
-    taskEventPanel.setTask(task);
+    taskEventPanel.setTaskId(task.getId());
     return detailComponent;
   }
   
@@ -140,7 +140,7 @@ protected Component getEventComponent() {
   
   public TaskEventsPanel getTaskEventPanel() {
     if(taskEventPanel == null) {
-      taskEventPanel = new TaskEventsPanel(null);
+      taskEventPanel = new TaskEventsPanel();
     }
     return taskEventPanel;
   }

File: activiti-engine/src/main/java/org/activiti/engine/impl/mail/MailScanCmd.java
Patch:
@@ -92,14 +92,14 @@ public Object execute(CommandContext commandContext) {
       throw new ActivitiException("couldn't scan mail for user "+userId+": "+e.getMessage(), e);
       
     } finally {
-      if (toDoInActivitiFolder!=null) {
+      if (toDoInActivitiFolder!=null && toDoInActivitiFolder.isOpen()) {
         try {
           toDoInActivitiFolder.close(false);
         } catch (MessagingException e) {
           e.printStackTrace();
         }
       }
-      if (toDoFolder!=null) {
+      if (toDoFolder!=null && toDoFolder.isOpen()) {
         try {
           toDoFolder.close(true); // true means that all messages that are flagged for deletion are permanently removed 
         } catch (Exception e) {

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/ExplorerLayout.java
Patch:
@@ -77,6 +77,8 @@ public interface ExplorerLayout {
   
   //Forms
   static final String STYLE_FORM_PROPERTIES = "formprops";
+  static final String STYLE_FORM_USER_SELECTED = "formprop-user-selected";
+  static final String STYLE_FORM_NO_USER_SELECTED = "formprop-no-user-selected";
   
   // Login page
   static final String STYLE_LOGIN_PAGE = "login-general";

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/flow/ProcessInstanceDetailPanel.java
Patch:
@@ -156,9 +156,9 @@ protected void addTaskItem(HistoricTaskInstance task, Table taskTable) {
     Item item = taskTable.addItem(task.getId());
     
     if(task.getEndTime() != null) {
-      item.getItemProperty("finished").setValue(new Embedded(null, Images.TASK_22));
-    } else {
       item.getItemProperty("finished").setValue(new Embedded(null, Images.TASK_FINISHED_22));
+    } else {
+      item.getItemProperty("finished").setValue(new Embedded(null, Images.TASK_22));
     }
     
     item.getItemProperty("name").setValue(task.getName());

File: activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -65,6 +65,7 @@
 import org.activiti.engine.impl.db.IbatisVariableTypeHandler;
 import org.activiti.engine.impl.el.ExpressionManager;
 import org.activiti.engine.impl.form.AbstractFormType;
+import org.activiti.engine.impl.form.BooleanFormType;
 import org.activiti.engine.impl.form.DateFormType;
 import org.activiti.engine.impl.form.FormEngine;
 import org.activiti.engine.impl.form.FormTypes;
@@ -739,6 +740,7 @@ protected void initFormTypes() {
       formTypes.addFormType(new StringFormType());
       formTypes.addFormType(new LongFormType());
       formTypes.addFormType(new DateFormType("dd/MM/yyyy"));
+      formTypes.addFormType(new BooleanFormType());
     }
     if (customFormTypes!=null) {
       for (AbstractFormType customFormType: customFormTypes) {

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/I18nManager.java
Patch:
@@ -13,6 +13,7 @@
 
 package org.activiti.explorer;
 
+import java.io.Serializable;
 import java.text.MessageFormat;
 import java.util.Locale;
 import java.util.ResourceBundle;
@@ -26,8 +27,9 @@
  */
 @Component
 @Scope(value="session")
-public class I18nManager {
+public class I18nManager implements Serializable {
 
+  private static final long serialVersionUID = 1L;
   protected ResourceBundle messages;
   
   public String getMessage(String key) {

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/navigation/NavigatorManager.java
Patch:
@@ -13,6 +13,7 @@
 
 package org.activiti.explorer.navigation;
 
+import java.io.Serializable;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -24,8 +25,9 @@
  * @author Joram Barrez
  */
 @Component
-public class NavigatorManager implements InitializingBean {
+public class NavigatorManager implements InitializingBean, Serializable {
 
+  private static final long serialVersionUID = 1L;
   protected Map<String, Navigator> navigationHandlers = new HashMap<String, Navigator>();
   protected Navigator defaultHandler;
 

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/MainMenuBar.java
Patch:
@@ -176,7 +176,7 @@ public void menuSelected(MenuItem selectedItem) {
   private class ShowTasksClickListener implements ClickListener {
 
     public void buttonClick(ClickEvent event) {
-      ExplorerApp.get().getViewManager().showInboxPage();
+      ExplorerApp.get().getViewManager().showCasesPage();
     }
   }
   

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/content/AttachmentRendererManager.java
Patch:
@@ -13,6 +13,7 @@
 
 package org.activiti.explorer.ui.content;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -34,8 +35,9 @@
  * @author Joram Barrez
  */
 @Component
-public class AttachmentRendererManager implements InitializingBean {
+public class AttachmentRendererManager implements InitializingBean, Serializable {
 
+  private static final long serialVersionUID = 1L;
   private final List<AttachmentRenderer> renderers = new ArrayList<AttachmentRenderer>();
   private final List<AttachmentEditor> editors = new ArrayList<AttachmentEditor>();
   

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/form/FormPropertyRendererManager.java
Patch:
@@ -13,6 +13,7 @@
 
 package org.activiti.explorer.ui.form;
 
+import java.io.Serializable;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -28,8 +29,9 @@
  * Note: NOT configured by @Component, but in Spring XML config, to make it
  * easy for users to extends with custom renderers.
  */
-public class FormPropertyRendererManager {
+public class FormPropertyRendererManager implements Serializable {
 
+  private static final long serialVersionUID = 1L;
   protected Map<Class<? extends FormType>, FormPropertyRenderer> propertyRenderers = new HashMap<Class<? extends FormType>, FormPropertyRenderer>();
   protected FormPropertyRenderer noTypePropertyRenderer;
   

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/profile/ProfilePanel.java
Patch:
@@ -384,8 +384,7 @@ protected void initContactSection() {
       skypeIdLabel.setSizeUndefined();
       skypeLayout.addComponent(skypeIdLabel);
       
-      Label skypeImage = new SkypeLabel(skypeId);
-      skypeImage.setSizeUndefined();
+      Component skypeImage = new SkypeLabel(skypeId);
       skypeLayout.addComponent(skypeImage);
       
       addProfileEntry(contactLayout, i18nManager.getMessage(Messages.PROFILE_SKYPE), skypeLayout);

File: activiti-engine/src/test/java/org/activiti/engine/test/api/task/TaskServiceTest.java
Patch:
@@ -179,6 +179,7 @@ public void testTaskAttachments() {
       taskService.deleteTask(taskId);
       
       assertEquals(0, taskService.getTaskComments(taskId).size());
+      assertEquals(1, historyService.createHistoricTaskInstanceQuery().taskId(taskId).list().size());
 
       taskService.deleteTask(taskId, true);
     }

File: activiti-engine/src/main/java/org/activiti/engine/task/Task.java
Patch:
@@ -22,7 +22,9 @@
  */
 public interface Task {
   
-  int PRIORITY_NORMAL = 50; 
+  int PRIORITY_MINIUM = 0; 
+  int PRIORITY_NORMAL = 50;
+  int PRIORITY_MAXIMUM = 100;
 	
   /** DB id of the task. */
 	String getId();

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/Constants.java
Patch:
@@ -59,12 +59,12 @@ public class Constants {
    MIMETYPE_EXTENSION_MAPPING = Collections.unmodifiableMap(mapping);
  }
  
- // User INFO
+ // User Info
  public static final String USER_INFO_BIRTH_DATE = "birthDate";
  public static final String USER_INFO_JOB_TITLE = "jobTitle";
  public static final String USER_INFO_LOCATION = "location";
  public static final String USER_INFO_PHONE = "phone";
  public static final String USER_INFO_TWITTER = "twitterName";
  public static final String USER_INFO_SKYPE = "skype";
-
+ 
 }

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/content/AttachmentDetailPopupWindow.java
Patch:
@@ -24,6 +24,7 @@
 
 /**
  * @author Frederik Heremans
+ * @author Joram Barrez
  */
 public class AttachmentDetailPopupWindow extends PopupWindow {
 
@@ -33,9 +34,6 @@ public AttachmentDetailPopupWindow(Attachment attachment) {
     super(attachment.getName());
     
     addStyleName(Reindeer.PANEL_LIGHT);
-    
-    setWidth(50, UNITS_PERCENTAGE);
-    setHeight(50, UNITS_PERCENTAGE);
     center();
     
     AttachmentRenderer renderer = ExplorerApp.get().getAttachmentRendererManager().getRenderer(attachment.getType());
@@ -46,5 +44,7 @@ public AttachmentDetailPopupWindow(Attachment attachment) {
     } else {
       addComponent(detail);
     }
+    getContent().setSizeUndefined();
   }
+  
 }

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/content/CreateAttachmentPopupWindow.java
Patch:
@@ -65,8 +65,8 @@ public CreateAttachmentPopupWindow() {
     this.taskService = ProcessEngines.getDefaultProcessEngine().getTaskService();
 
     setCaption(i18nManager.getMessage(Messages.RELATED_CONTENT_ADD));
-    setWidth(50, UNITS_PERCENTAGE);
-    setHeight(50, UNITS_PERCENTAGE);
+    setWidth(700, UNITS_PIXELS);
+    setHeight(430, UNITS_PIXELS);
     center();
     setModal(true);
     addStyleName(Reindeer.WINDOW_LIGHT);

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/content/file/FileAttachmentEditorComponent.java
Patch:
@@ -74,8 +74,6 @@ public FileAttachmentEditorComponent(Attachment attachment, String taskId, Strin
     this.i18nManager = ExplorerApp.get().getI18nManager();
     taskService = ProcessEngines.getDefaultProcessEngine().getTaskService();
     
-    setSizeFull();
-    
     form = new Form();
     form.setDescription(i18nManager.getMessage(Messages.RELATED_CONTENT_TYPE_FILE_HELP));
     setSizeFull();
@@ -146,7 +144,7 @@ protected String getFriendlyName(String name) {
   protected void initDescription() {
     TextArea descriptionField = new TextArea(i18nManager.getMessage(Messages.RELATED_CONTENT_DESCRIPTION));
     descriptionField.setWidth(100, UNITS_PERCENTAGE);
-    descriptionField.setHeight(100, UNITS_PIXELS);
+    descriptionField.setHeight(50, UNITS_PIXELS);
     form.addField("description", descriptionField);
   }
 

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/SignavioConnector.java
Patch:
@@ -706,7 +706,7 @@ protected RepositoryArtifact createArtifactFromJSON(String parentFolderId, Strin
       sendRequest(jsonRequest);
 
       // TODO: return the object
-      return getRepositoryArtifact(id);
+      return getRepositoryArtifact("/"+id);
     } catch (Exception je) {
       throw new RepositoryException("Unable to create model '" + artifactName + "' in parent folder '" + parentFolderId + "'", je);
     }

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/demo/DemoDataGenerator.java
Patch:
@@ -35,6 +35,7 @@
 import org.activiti.explorer.navigation.MyFlowsNavigationHandler;
 import org.activiti.explorer.navigation.NavigationHandlers;
 import org.activiti.explorer.navigation.TaskNavigationHandler;
+import org.activiti.explorer.navigation.UserNavigationHandler;
 import org.activiti.explorer.ui.content.AttachmentRenderers;
 import org.activiti.explorer.ui.content.file.FileAttachmentEditor;
 import org.activiti.explorer.ui.content.file.ImageAttachmentRenderer;
@@ -110,6 +111,7 @@ protected void initUriNavigation() {
     NavigationHandlers.addNavigationHandler(new DeploymentNavigationHandler());
     NavigationHandlers.addNavigationHandler(new DataBaseNavigationHandler());
     NavigationHandlers.addNavigationHandler(new JobNavigationHandler());
+    NavigationHandlers.addNavigationHandler(new UserNavigationHandler());
     NavigationHandlers.addNavigationHandler(new MyFlowsNavigationHandler());
   }
   

File: activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -432,6 +432,7 @@ protected static Properties getDefaultDatabaseTypeMappings() {
     databaseTypeMappings.setProperty("DB2 UDP","db2");
     databaseTypeMappings.setProperty("DB2/LINUX","db2");
     databaseTypeMappings.setProperty("DB2/LINUX390","db2");
+    databaseTypeMappings.setProperty("DB2/LINUXZ64","db2");
     databaseTypeMappings.setProperty("DB2/400 SQL","db2");
     databaseTypeMappings.setProperty("DB2/6000","db2");
     databaseTypeMappings.setProperty("DB2 UDB iSeries","db2");

File: activiti-mule/src/test/java/org/activiti/engine/test/bpmn/servicetask/WebServiceUELTest.java
Patch:
@@ -37,7 +37,7 @@ public ProcessDefinitionEntity execute(CommandContext commandContext) {
           return Context
             .getProcessEngineConfiguration()
             .getDeploymentCache()
-            .findDeployedLatestProcessDefinitionByKey("asyncWebServiceInvocationWithDataFlowUEL");
+            .findDeployedLatestProcessDefinitionByKey("webServiceInvocationWithDataFlowUEL");
         }
       });
   

File: activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ActivitiCycleWebScript.java
Patch:
@@ -79,7 +79,7 @@ protected void executeWebScript(ActivitiRequest req, Status status, Cache cache,
 
     } finally {
       // close the CycleHttpSession
-      CycleHttpSession.closeSession();
+      CycleHttpSession.closeSession(req);
     }
   }
 

File: activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ContentGet.java
Patch:
@@ -87,7 +87,7 @@ protected void executeStreamingWebScript(ActivitiRequest req, WebScriptResponse
       getContent(req, res);
     } finally {
       // close the CycleHttpSession
-      CycleHttpSession.closeSession();
+      CycleHttpSession.closeSession(req);
     }
   }
 

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/task/TaskPage.java
Patch:
@@ -18,7 +18,6 @@
 import org.activiti.explorer.ExplorerApplication;
 import org.activiti.explorer.data.LazyLoadingContainer;
 import org.activiti.explorer.data.LazyLoadingQuery;
-import org.activiti.explorer.navigation.TaskNavigationHandler;
 import org.activiti.explorer.navigation.UriFragment;
 import org.activiti.explorer.ui.AbstractPage;
 import org.activiti.explorer.ui.ExplorerLayout;
@@ -69,7 +68,7 @@ public void valueChange(ValueChangeEvent event) {
         } else {
           // Nothing is selected
           splitPanel.removeComponent(splitPanel.getSecondComponent());
-          ExplorerApplication.getCurrent().setCurrentUriFragment(new UriFragment(TaskNavigationHandler.TASK_URI_PART));
+          ExplorerApplication.getCurrent().setCurrentUriFragment(getUriFragment(null));
         }
       }
     });

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/ParameterizedActionImpl.java
Patch:
@@ -38,20 +38,20 @@ public ParameterizedActionImpl(String actionId) {
    */
   public abstract String getFormAsHtml();
 
-  public Object getParameter(Map<String, Object> parameters, String name, boolean required, Object defaultValue, Class expectedClass) {
+  public <T> T getParameter(Map<String, Object> parameters, String name, boolean required, Object defaultValue, Class<T> expectedClass) {
     Object value = parameters.get(name);
     if (value == null || (value instanceof String && ((String) value).length() == 0)) {
       if (required) {
         throw new RepositoryException("Required parameter '" + name + "' not set while executing action '" + getId() + "'");
       } else {
-        return defaultValue;
+        return (T) defaultValue;
       }
     }
     if (expectedClass != null && !expectedClass.isAssignableFrom(value.getClass())) {
       throw new RepositoryException("Parameter '" + name + "' with value '" + value + "' has wrong type " + value.getClass() + " instead of " + expectedClass
               + " not set while executing action '" + getId() + "'");
     }
-    return value;
+    return (T) value;
   }
   
   @Override

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/action/SelectDiffTargetAction.java
Patch:
@@ -32,8 +32,8 @@ public SelectDiffTargetAction() {
   public void execute(RepositoryConnector connector, RepositoryArtifact artifact, Map<String, Object> parameters) throws Exception {
     // TODO: Check with Nils that we get the object instead of the string in
     // here!
-    String targetNodeId = (String) getParameter(parameters, PARAM_TARGET_ARTIFACT, true, null, String.class);
-    RepositoryConnector targetConnector = (RepositoryConnector) getParameter(parameters, PARAM_TARGET_CONNECTOR, true, null, RepositoryConnector.class);
+    String targetNodeId = getParameter(parameters, PARAM_TARGET_ARTIFACT, true, null, String.class);
+    RepositoryConnector targetConnector = getParameter(parameters, PARAM_TARGET_CONNECTOR, true, null, RepositoryConnector.class);
     RepositoryArtifact targetArtifact = targetConnector.getRepositoryArtifact(targetNodeId);
 
     // yeah, that is pretty hacky! Especially with multiple users. But as a

File: activiti-engine/src/test/java/org/activiti/engine/test/api/task/TaskQueryTest.java
Patch:
@@ -537,11 +537,11 @@ public void testTaskDueDate() throws Exception {
     Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
     
     // Set due-date on task
-    Calendar dueDateCal = Calendar.getInstance();
-    task.setDueDate(dueDateCal.getTime());
+    Date dueDate = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss").parse("01/02/2003 01:12:13");
+    task.setDueDate(dueDate);
     taskService.saveTask(task);
 
-    assertEquals(1, taskService.createTaskQuery().dueDate(dueDateCal.getTime()).count());
+    assertEquals(1, taskService.createTaskQuery().dueDate(dueDate).count());
     
     Calendar otherDate = Calendar.getInstance();
     otherDate.add(Calendar.YEAR, 1);

File: activiti-engine/src/main/java/org/activiti/engine/impl/el/FixedValue.java
Patch:
@@ -14,7 +14,6 @@
 package org.activiti.engine.impl.el;
 
 import org.activiti.engine.ActivitiException;
-import org.activiti.engine.delegate.Expression;
 import org.activiti.engine.delegate.VariableScope;
 
 /**

File: activiti-engine/src/main/java/org/activiti/engine/impl/el/JuelExpression.java
Patch:
@@ -14,7 +14,6 @@
 package org.activiti.engine.impl.el;
 
 import org.activiti.engine.ActivitiException;
-import org.activiti.engine.delegate.Expression;
 import org.activiti.engine.delegate.VariableScope;
 import org.activiti.engine.impl.javax.el.ELContext;
 import org.activiti.engine.impl.javax.el.ELException;

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/Constants.java
Patch:
@@ -65,6 +65,9 @@ public class Constants {
 
   public static final String STYLE_PROCESS_DEFINITION_LIST = "proc-def-list";
   
+  public static final String STYLE_DATABASE_DETAILS = "database-details";
+  public static final String STYLE_DATABASE_TABLE_ROW = "database-table-row";
+  
   
   // Date formatting
   public static final DateFormat DEFAULT_DATE_FORMATTER = new SimpleDateFormat("dd MMM yyyy - hh:mm");

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/servlet/BootProcessEngineContextListener.java
Patch:
@@ -108,7 +108,7 @@ protected void initRandomUsers(ProcessEngine processEngine) {
   
   protected void initTasks(ProcessEngine processEngine) {
     TaskService taskService = processEngine.getTaskService();
-    for (int i=0; i<30; i++) {
+    for (int i=0; i<500; i++) {
       Task task = taskService.newTask();
       task.setAssignee("kermit");
       task.setDescription("This is task nr " + i + ", please do it asap!");

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/ui/ThemeImageColumnGenerator.java
Patch:
@@ -13,8 +13,6 @@
 
 package org.activiti.explorer.ui;
 
-import javax.persistence.Embeddable;
-
 import com.vaadin.terminal.Resource;
 import com.vaadin.terminal.ThemeResource;
 import com.vaadin.ui.Component;

File: activiti-webapp-explorer2/src/main/java/org/activiti/explorer/servlet/BootProcessEngineContextListener.java
Patch:
@@ -71,8 +71,8 @@ protected void initKermit(ProcessEngine processEngine) {
     identityService.setUserInfo("kermit", "skype", "kermit.frog");
     
     // Accounts
-    identityService.setUserAccount("kermit", "google", "kermit.frog@gmail.com", "kermit123");
-    identityService.setUserAccount("kermit", "alfresco", "kermit_alf", "kermit_alf_123");
+    identityService.setUserAccount("kermit", "kermit", "google", "kermit.frog@gmail.com", "kermit123", null);
+    identityService.setUserAccount("kermit", "kermit", "alfresco", "kermit_alf", "kermit_alf_123", null);
     
     // Picture
     byte[] pictureBytes = IoUtil.readInputStream(this.getClass().getClassLoader().getResourceAsStream("org/activiti/explorer/images/kermit.jpg"), null);

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -45,6 +45,7 @@ public class DbSqlSessionFactory implements SessionFactory {
     addDatabaseSpecificStatement("postgres", "selectByteArrayById", "selectByteArrayById_postgres");
     addDatabaseSpecificStatement("postgres", "selectResourceByDeploymentIdAndResourceName", "selectResourceByDeploymentIdAndResourceName_postgres");
     addDatabaseSpecificStatement("postgres", "selectResourcesByDeploymentId", "selectResourcesByDeploymentId_postgres");
+    addDatabaseSpecificStatement("postgres", "selectHistoricDetailsByQueryCriteria", "selectHistoricDetailsByQueryCriteria_postgres");
   }
   
   protected String databaseType;

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/action/fom/FormHandler.java
Patch:
@@ -11,8 +11,8 @@
 import org.activiti.cycle.annotations.CycleComponent;
 import org.activiti.cycle.context.CycleContext;
 import org.activiti.cycle.context.CycleContextType;
+import org.activiti.engine.delegate.Expression;
 import org.activiti.engine.delegate.VariableScope;
-import org.activiti.engine.impl.el.Expression;
 import org.activiti.engine.impl.el.ExpressionManager;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;

File: activiti-cactus/src/main/java/org/activiti/test/cactus/ActivitiServletTestCase.java
Patch:
@@ -102,7 +102,7 @@ private static void addTestToSuite(String classname, ServletTestSuite suite) {
     } else if (Test.class.isAssignableFrom(testClass)) {
       // Test case, should be wrapped in TestSuite to have all
       // test-methods turned into a single Test
-      TestSuite testSuite = new TestSuite(testClass);
+      ServletTestSuite testSuite = new ServletTestSuite(testClass);
       suite.addTest(testSuite);
     } else {
       throw new RuntimeException("Class " + classname + " is not a TestCase nor a TestSuite");

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/diagram/ProcessDiagramCanvas.java
Patch:
@@ -156,6 +156,7 @@ public InputStream generateImage(String imageType) {
     
     ByteArrayOutputStream out = new ByteArrayOutputStream();
     try {
+      // Try to remove white space
       minX = (minX <= 5) ? 5 : minX;
       minY = (minY <= 5) ? 5 : minY;
       BufferedImage imageToSerialize = processDiagram;

File: activiti-engine/src/main/java/org/activiti/engine/impl/pvm/ReadOnlyProcessDefinition.java
Patch:
@@ -16,10 +16,13 @@
 
 /**
  * @author Tom Baeyens
+ * @author Joram Barrez
  */
 public interface ReadOnlyProcessDefinition extends PvmScope {
   
   String getName();
+  
+  String getDescription();
 
   PvmActivity getInitial();
 

File: activiti-engine/src/main/java/org/activiti/engine/repository/ProcessDefinition.java
Patch:
@@ -16,7 +16,7 @@
 import org.activiti.engine.RepositoryService;
 import org.activiti.engine.runtime.ProcessInstance;
 
-/** Is an object structure representing an executable process composed of 
+/** An object structure representing an executable process composed of 
  * activities and transitions.
  * 
  * Business processes are often created with graphical editors that store the
@@ -54,7 +54,7 @@ public interface ProcessDefinition {
   /** The deployment in which this process definition is contained. */
   String getDeploymentId();
   
-  /** The resource name in the deployment of the diagram image. */
+  /** The resource name in the deployment of the diagram image (if any). */
   String getDiagramResourceName();
 
   /** Does this process definition has a {@link FormService#getStartFormData(String) start form key}. */

File: activiti-engine/src/test/java/org/activiti/engine/test/api/form/Address.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.engine.test.forms;
+package org.activiti.engine.test.api.form;
 
 import java.io.Serializable;
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/MailActivityBehavior.java
Patch:
@@ -29,7 +29,7 @@
  * @author Joram Barrez
  * @author Frederik Heremans
  */
-public class MailActivityBehavior implements ActivityBehavior {
+public class MailActivityBehavior extends FlowNodeActivityBehavior {
 
   private Expression to;
   private Expression from;
@@ -62,6 +62,7 @@ public void execute(ActivityExecution execution) {
     } catch (EmailException e) {
       throw new ActivitiException("Could not send e-mail", e);
     }
+    leave(execution);
   }
 
   protected Email createEmail(String text, String html) {

File: activiti-engine/src/test/java/org/activiti/engine/test/bpmn/mail/EmailServiceTaskTest.java
Patch:
@@ -56,14 +56,15 @@ protected void tearDown() throws Exception {
   
   @Deployment
   public void testSimpleTextMail() throws Exception {
-    runtimeService.startProcessInstanceByKey("simpleTextOnly");
+    String procId = runtimeService.startProcessInstanceByKey("simpleTextOnly").getId();
     
     List<WiserMessage> messages = wiser.getMessages();
     assertEquals(1, messages.size());
     
     WiserMessage message = messages.get(0);
     assertEmailSend(message, false, "Hello Kermit!", "This a text only e-mail.", "activiti@localhost",
             Arrays.asList("kermit@activiti.org"), null);
+    assertProcessEnded(procId);
   }
   
   @Deployment

File: activiti-engine/src/test/java/org/activiti/examples/bpmn/servicetask/OkReturningService.java
Patch:
@@ -7,6 +7,8 @@
  */
 public class OkReturningService implements Serializable {
 
+  private static final long serialVersionUID = 1L;
+
   public String invoke() {
     return "ok";
   }

File: activiti-engine/src/test/java/org/activiti/examples/bpmn/servicetask/ValueBean.java
Patch:
@@ -7,6 +7,8 @@
  */
 public class ValueBean implements Serializable {
 
+  private static final long serialVersionUID = 1L;
+  
   private final String value;
 
   public ValueBean(String value) {

File: activiti-engine/src/test/java/org/activiti/examples/bpmn/subprocess/SubProcessTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.activiti.engine.repository.Deployment;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.task.Task;
-import org.activiti.engine.task.TaskQuery;
 
 
 /**

File: activiti-webapp-kickstart/src/main/java/org/activiti/kickstart/ui/panel/KickstartWorkflowPanel.java
Patch:
@@ -86,6 +86,9 @@ protected void initUi() {
     initTitle();
 
     GridLayout layout = new GridLayout(2, 7);
+    layout.setSizeFull();
+    layout.setColumnExpandRatio(0, 1.0f);
+    layout.setColumnExpandRatio(1, 9.0f);
     layout.setSpacing(true);
     addComponent(layout);
 

File: activiti-webapp-kickstart/src/main/java/org/activiti/kickstart/ui/table/TaskTable.java
Patch:
@@ -48,6 +48,7 @@ public TaskTable(ViewManager viewManager) {
     setEditable(true);
     setColumnReorderingAllowed(true);
 
+    setSizeFull();
     setPageLength(0);
 
     addContainerProperty("name", String.class, null);

File: activiti-engine/src/test/java/org/activiti/examples/bpmn/servicetask/JavaServiceTaskTest.java
Patch:
@@ -15,6 +15,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.activiti.engine.ActivitiClassLoadingException;
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.impl.test.PluggableActivitiTestCase;
 import org.activiti.engine.impl.util.CollectionUtil;
@@ -77,6 +78,8 @@ public void testUnexistingClassDelegation() {
       fail();
     } catch (ActivitiException e) {
       assertTrue(e.getMessage().contains("couldn't instantiate class org.activiti.BogusClass"));
+      assertNotNull(e.getCause());
+      assertTrue(e.getCause() instanceof ActivitiClassLoadingException);
     }
   }
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/BoundaryEventActivityBehavior.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.List;
 import java.util.logging.Logger;
 
-import org.activiti.engine.ActivitiException;
 import org.activiti.engine.impl.pvm.PvmTransition;
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
 import org.activiti.engine.impl.runtime.ExecutionEntity;

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ParallelMultiInstanceBehavior.java
Patch:
@@ -73,7 +73,9 @@ protected void createInstances(ActivityExecution execution) throws Exception {
       ActivityExecution concurrentExecution = concurrentExecutions.get(loopCounter);
       // executions can be inactive, if instances are all automatics (no-waitstate)
       // and completionCondition has been met in the meantime
-      if (concurrentExecution.isActive() && concurrentExecution.getParent().isActive()) { 
+      if (concurrentExecution.isActive() && !concurrentExecution.isEnded() 
+              && concurrentExecution.getParent().isActive() 
+              && !concurrentExecution.getParent().isEnded()) { 
         setLoopVariable(concurrentExecution, LOOP_COUNTER, loopCounter);
         executeOriginalBehavior(concurrentExecution, loopCounter);
       }

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -694,6 +694,7 @@ public void parseMultiInstanceLoopCharacteristics(Element activityElement, Activ
         miActivityBehavior = new ParallelMultiInstanceBehavior(activity, (AbstractBpmnActivityBehavior) activity.getActivityBehavior());
       }
       activity.setScope(true);
+      activity.setProperty("multiInstance", isSequential ? "sequential" : "parallel");
       activity.setActivityBehavior(miActivityBehavior);
       
       // loopCardinality

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/provider/Bpmn20Provider.java
Patch:
@@ -43,8 +43,8 @@ public Content getContent(RepositoryArtifact artifact) {
       // use the bpmn2_0_serialization export servlet to provide bpmn20 xml
       // by doing this, we can support different signavio versions instead of
       // the commercial Signavio only
-      Response jsonResponse = getJsonResponse(signavioConnector, artifact, "/json");
-      JSONObject jsonData = new JSONObject(jsonResponse.getEntity().getText());
+      String jsonResponse = getJsonResponse(signavioConnector, artifact, "/json");
+      JSONObject jsonData = new JSONObject(jsonResponse);
       String result = signavioConnector.transformJsonToBpmn20Xml(jsonData.toString());
 
       // This would have been the alternative that works only for signavio but

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/provider/Jpdl4Provider.java
Patch:
@@ -27,7 +27,7 @@
 import org.activiti.cycle.impl.connector.signavio.repositoryartifacttype.SignavioJpdl4ArtifactType;
 import org.activiti.cycle.impl.mimetype.XmlMimeType;
 import org.activiti.cycle.impl.transform.XmlToTextTransformation;
-import org.restlet.Response;
+import org.restlet.ext.json.JsonRepresentation;
 import org.restlet.ext.xml.DomRepresentation;
 
 @CycleComponent(context = CycleContextType.APPLICATION)
@@ -42,8 +42,8 @@ public Content getContent(RepositoryArtifact artifact) {
       SignavioConnectorInterface signavioConnector = (SignavioConnectorInterface) CycleSessionContext.get(RuntimeConnectorList.class).getConnectorById(artifact.getConnectorId());
       Content content = new Content();
 
-      Response jpdlResponse = getJsonResponse(signavioConnector, artifact, "/jpdl4");
-      DomRepresentation xmlData = new DomRepresentation(jpdlResponse.getEntity());
+      String jpdlResponse = getJsonResponse(signavioConnector, artifact, "/jpdl4");
+      DomRepresentation xmlData = new DomRepresentation(new JsonRepresentation( jpdlResponse ));
       XmlToTextTransformation transformation = CycleApplicationContext.get(XmlToTextTransformation.class);
       String jpdl4AsString = transformation.getXmlAsString(xmlData.getDomSource());
       // log.finest("JPDL4 String: " + jpdl4AsString);

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/provider/JsonProvider.java
Patch:
@@ -38,9 +38,7 @@ public Content getContent(RepositoryArtifact artifact) {
     try {
       SignavioConnectorInterface signavioConnector = (SignavioConnectorInterface) CycleSessionContext.get(RuntimeConnectorList.class).getConnectorById(artifact.getConnectorId());
       Content content = new Content();
-      Response jsonResponse = getJsonResponse(signavioConnector, artifact, "/json");
-
-      String jsonString = jsonResponse.getEntity().getText();
+      String jsonString = getJsonResponse(signavioConnector, artifact, "/json");
       JSONObject jsonObj = new JSONObject(jsonString);
       content.setValue(jsonObj.toString(2));
       return content;

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/provider/SignavioContentRepresentationProvider.java
Patch:
@@ -17,13 +17,12 @@
 import org.activiti.cycle.ContentRepresentation;
 import org.activiti.cycle.RepositoryArtifact;
 import org.activiti.cycle.impl.connector.signavio.SignavioConnectorInterface;
-import org.restlet.Response;
 
 public abstract class SignavioContentRepresentationProvider implements ContentRepresentation {
 
   private static final long serialVersionUID = 1L;
 
-  public static Response getJsonResponse(SignavioConnectorInterface connector, RepositoryArtifact artifact, String urlSuffix) throws IOException {
+  public static String getJsonResponse(SignavioConnectorInterface connector, RepositoryArtifact artifact, String urlSuffix) throws IOException {
     String url = connector.getModelUrl(artifact) + urlSuffix;
     return connector.getJsonResponse(url);
   }

File: activiti-engine/src/test/java/org/activiti/examples/bpmn/servicetask/ToUpperCaseSetterInjected.java
Patch:
@@ -13,10 +13,9 @@
  */
 package org.activiti.examples.bpmn.servicetask;
 
-import org.activiti.engine.delegate.JavaDelegate;
 import org.activiti.engine.delegate.DelegateExecution;
+import org.activiti.engine.delegate.JavaDelegate;
 import org.activiti.engine.impl.el.Expression;
-import org.junit.Assert;
 
 
 /**
@@ -30,7 +29,7 @@ public class ToUpperCaseSetterInjected implements JavaDelegate {
   public void execute(DelegateExecution execution) {
     
     if(!setterInvoked) {
-      Assert.fail("Setter was not invoked");
+      throw new RuntimeException("Setter was not invoked");
     }
     execution.setVariable("setterVar", ((String)text.getValue(execution)).toUpperCase());
   }

File: activiti-spring/src/main/java/org/activiti/spring/SpringExpressionManager.java
Patch:
@@ -58,7 +58,7 @@ protected ELResolver createElResolver(VariableScope variableScope) {
     
     if(beans != null) {
       // Only expose limited set of beans in expressions
-      compositeElResolver.add(new ReadonlyMapELResolver(beans));
+      compositeElResolver.add(new ReadOnlyMapELResolver(beans));
     } else {
       // Expose full application-context in expressions
       compositeElResolver.add(new ApplicationContextElResolver(applicationContext));

File: activiti-spring/src/main/java/org/activiti/spring/ReadOnlyMapELResolver.java
Patch:
@@ -28,11 +28,11 @@
  * 
  * @author Frederik Heremans
  */
-public class ReadonlyMapELResolver extends ELResolver {
+public class ReadOnlyMapELResolver extends ELResolver {
 
   protected Map<Object, Object> wrappedMap;
   
-  public ReadonlyMapELResolver(Map<Object, Object> map) {
+  public ReadOnlyMapELResolver(Map<Object, Object> map) {
     this.wrappedMap = map;
   }
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -801,7 +801,7 @@ protected String addSqlStatementPiece(String sqlStatement, String line) {
     if (sqlStatement==null) {
       return line;
     }
-    return sqlStatement + " "+ System.getProperty("line.separator") + line;
+    return sqlStatement + " " + line;
   }
   
   protected String readNextTrimmedLine(BufferedReader reader) throws IOException {

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -801,7 +801,7 @@ protected String addSqlStatementPiece(String sqlStatement, String line) {
     if (sqlStatement==null) {
       return line;
     }
-    return sqlStatement + " \n" + line;
+    return sqlStatement + " "+ System.getProperty("line.separator") + line;
   }
   
   protected String readNextTrimmedLine(BufferedReader reader) throws IOException {

File: activiti-engine/src/main/java/org/activiti/engine/impl/DeploymentQueryImpl.java
Patch:
@@ -32,7 +32,8 @@ public class DeploymentQueryImpl extends AbstractQuery<DeploymentQuery, Deployme
   protected String name;
   protected String nameLike;
 
-  public DeploymentQueryImpl() {
+  public DeploymentQueryImpl(CommandContext commandContext) {
+    super(commandContext);
   }
 
   public DeploymentQueryImpl(CommandExecutor commandExecutor) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/ExecutionQueryImpl.java
Patch:
@@ -40,7 +40,8 @@ public class ExecutionQueryImpl extends ExecutionVariableQueryImpl<ExecutionQuer
   
   protected CommandExecutor commandExecutor;
   
-  public ExecutionQueryImpl() {
+  public ExecutionQueryImpl(CommandContext commandContext) {
+    super(commandContext);
   }
   
   public ExecutionQueryImpl(CommandExecutor commandExecutor) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/ExecutionVariableQueryImpl.java
Patch:
@@ -33,7 +33,8 @@ public abstract class ExecutionVariableQueryImpl<T extends Query<?,?>, U> extend
 
   protected List<QueryVariableValue> queryVariableValues = new ArrayList<QueryVariableValue>();
   
-  public ExecutionVariableQueryImpl() {
+  public ExecutionVariableQueryImpl(CommandContext commandContext) {
+    super(commandContext);
   }
 
   public ExecutionVariableQueryImpl(CommandExecutor commandExecutor) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/HistoricActivityInstanceQueryImpl.java
Patch:
@@ -38,7 +38,8 @@ public class HistoricActivityInstanceQueryImpl extends AbstractQuery<HistoricAct
   protected boolean finished;
   protected boolean unfinished;
 
-  public HistoricActivityInstanceQueryImpl() {
+  public HistoricActivityInstanceQueryImpl(CommandContext commandContext) {
+    super(commandContext);
   }
   
   public HistoricActivityInstanceQueryImpl(CommandExecutor commandExecutor) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/HistoricDetailQueryImpl.java
Patch:
@@ -32,7 +32,8 @@ public class HistoricDetailQueryImpl extends AbstractQuery<HistoricDetailQuery,
   protected String activityInstanceId;
   protected String type;
 
-  public HistoricDetailQueryImpl() {
+  public HistoricDetailQueryImpl(CommandContext commandContext) {
+    super(commandContext);
   }
 
   public HistoricDetailQueryImpl(CommandExecutor commandExecutor) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/HistoricProcessInstanceQueryImpl.java
Patch:
@@ -32,7 +32,8 @@ public class HistoricProcessInstanceQueryImpl extends AbstractQuery<HistoricProc
   protected boolean finished = false;
   protected boolean unfinished = false;
   
-  public HistoricProcessInstanceQueryImpl() {
+  public HistoricProcessInstanceQueryImpl(CommandContext commandContext) {
+    super(commandContext);
   }
   
   public HistoricProcessInstanceQueryImpl(CommandExecutor commandExecutor) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/JobQueryImpl.java
Patch:
@@ -42,7 +42,8 @@ public class JobQueryImpl extends AbstractQuery<JobQuery, Job> implements JobQue
   protected Date duedateHigherThenOrEqual;
   protected Date duedateLowerThenOrEqual;
   
-  public JobQueryImpl() {
+  public JobQueryImpl(CommandContext commandContext) {
+    super(commandContext);
   }
 
   public JobQueryImpl(CommandExecutor commandExecutor) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/ProcessDefinitionQueryImpl.java
Patch:
@@ -42,7 +42,8 @@ public class ProcessDefinitionQueryImpl extends AbstractQuery<ProcessDefinitionQ
   protected Integer version;
   protected boolean latest = false;
 
-  public ProcessDefinitionQueryImpl() {
+  public ProcessDefinitionQueryImpl(CommandContext commandContext) {
+    super(commandContext);
   }
 
   public ProcessDefinitionQueryImpl(CommandExecutor commandExecutor) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/ProcessInstanceQueryImpl.java
Patch:
@@ -41,7 +41,8 @@ public class ProcessInstanceQueryImpl extends ExecutionVariableQueryImpl<Process
   
   protected CommandExecutor commandExecutor;
   
-  public ProcessInstanceQueryImpl() {
+  public ProcessInstanceQueryImpl(CommandContext commandContext) {
+    super(commandContext);
   }
   
   public ProcessInstanceQueryImpl(CommandExecutor commandExecutor) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/TaskQueryImpl.java
Patch:
@@ -51,7 +51,8 @@ public class TaskQueryImpl extends AbstractQuery<TaskQuery, Task> implements Tas
   protected String keyLike;
   protected List<QueryVariableValue> variables = new ArrayList<QueryVariableValue>();
   
-  public TaskQueryImpl() {
+  public TaskQueryImpl(CommandContext commandContext) {
+    super(commandContext);
   }
   
   public TaskQueryImpl(CommandExecutor commandExecutor) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/behavior/ScriptTaskActivityBehavior.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.activiti.engine.impl.bpmn.behavior;
 
+import org.activiti.engine.impl.context.Context;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
 import org.activiti.engine.impl.scripting.ScriptingEngines;
@@ -36,9 +37,8 @@ public ScriptTaskActivityBehavior(String script, String language, String resultV
   }
   
   public void execute(ActivityExecution execution) throws Exception {
-    ScriptingEngines scriptingEngines = CommandContext
-      .getCurrent()
-      .getProcessEngineConfiguration()
+    ScriptingEngines scriptingEngines = Context
+      .getProcessEngineContext()
       .getScriptingEngines();
 
     Object result = scriptingEngines.evaluate(script, language, execution);

File: activiti-engine/src/main/java/org/activiti/engine/impl/cfg/IdentitySession.java
Patch:
@@ -20,7 +20,6 @@
 import org.activiti.engine.identity.User;
 import org.activiti.engine.identity.UserQuery;
 import org.activiti.engine.impl.Page;
-import org.activiti.engine.impl.interceptor.CommandExecutor;
 
 
 /**
@@ -36,7 +35,7 @@ public interface IdentitySession {
   User findUserById(String userId);
   List<User> findUsersByGroupId(String groupId);
   boolean isValidUser(String userId);
-  UserQuery createNewUserQuery(CommandExecutor commandExecutor);
+  UserQuery createNewUserQuery();
   List<User> findUserByQueryCriteria(Object query, Page page);
   long findUserCountByQueryCriteria(Object query);
   
@@ -47,7 +46,7 @@ public interface IdentitySession {
   void deleteGroup(String groupId);
   Group findGroupById(String groupId);
   List<Group> findGroupsByUser(String userId);
-  GroupQuery createNewGroupQuery(CommandExecutor commandExecutor);
+  GroupQuery createNewGroupQuery();
   List<Group> findGroupByQueryCriteria(Object query, Page page);
   long findGroupCountByQueryCriteria(Object query);
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/cmd/CreateGroupQueryCmd.java
Patch:
@@ -16,7 +16,6 @@
 import org.activiti.engine.identity.GroupQuery;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
-import org.activiti.engine.impl.interceptor.CommandExecutor;
 
 
 /**
@@ -25,10 +24,9 @@
 public class CreateGroupQueryCmd implements Command<GroupQuery> {
 
   public GroupQuery execute(CommandContext commandContext) {
-    CommandExecutor commandExecutor = commandContext.getProcessEngineConfiguration().getCommandExecutorTxRequired();
     return commandContext
       .getIdentitySession()
-      .createNewGroupQuery(commandExecutor);
+      .createNewGroupQuery();
   }
 
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/cmd/CreateUserQueryCmd.java
Patch:
@@ -16,7 +16,6 @@
 import org.activiti.engine.identity.UserQuery;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
-import org.activiti.engine.impl.interceptor.CommandExecutor;
 
 
 /**
@@ -25,10 +24,9 @@
 public class CreateUserQueryCmd implements Command<UserQuery> {
   
   public UserQuery execute(CommandContext commandContext) {
-    CommandExecutor commandExecutor = commandContext.getProcessEngineConfiguration().getCommandExecutorTxRequired();
     return commandContext
       .getIdentitySession()
-      .createNewUserQuery(commandExecutor);
+      .createNewUserQuery();
   }
 
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetTaskFormCmd.java
Patch:
@@ -19,7 +19,6 @@
 import org.activiti.engine.impl.form.TaskFormHandler;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
-import org.activiti.engine.impl.interceptor.CommandExecutor;
 import org.activiti.engine.impl.task.TaskEntity;
 
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SaveGroupCmd.java
Patch:
@@ -13,7 +13,6 @@
 package org.activiti.engine.impl.cmd;
 
 import org.activiti.engine.ActivitiException;
-import org.activiti.engine.identity.Group;
 import org.activiti.engine.impl.identity.GroupEntity;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/DbHistorySession.java
Patch:
@@ -48,9 +48,9 @@ public void insertHistoricProcessInstance(HistoricProcessInstanceEntity historic
   public void deleteHistoricProcessInstance(String historicProcessInstanceId) {
     int historyLevel = Context.getProcessEngineContext().getHistoryLevel();
     if (historyLevel>=ProcessEngineConfigurationImpl.HISTORYLEVEL_AUDIT) {
-      List<HistoricDetailEntity> historicDetails = (List) new HistoricDetailQueryImpl()
+      List<HistoricDetailEntity> historicDetails = (List) new HistoricDetailQueryImpl(CommandContext.getCurrent())
         .processInstanceId(historicProcessInstanceId)
-        .executeList(CommandContext.getCurrent(), null);
+        .list();
       for (HistoricDetailEntity historicDetail: historicDetails) {
         historicDetail.delete();
       }

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/DbRuntimeSession.java
Patch:
@@ -53,9 +53,9 @@ public void deleteProcessInstance(String processInstanceId, String deleteReason)
       throw new ActivitiException("No process instance found for id '" + processInstanceId + "'");
     }
     
-    List<TaskEntity> tasks = (List) new TaskQueryImpl()
+    List<TaskEntity> tasks = (List) new TaskQueryImpl(CommandContext.getCurrent())
       .processInstanceId(processInstanceId)
-      .executeList(CommandContext.getCurrent(), null);
+      .list();
     for (TaskEntity task: tasks) {
       task.delete(TaskEntity.DELETE_REASON_DELETED);
     }

File: activiti-engine/src/main/java/org/activiti/engine/impl/history/HistoricTaskInstanceEntity.java
Patch:
@@ -75,9 +75,9 @@ public void delete() {
     int historyLevel = commandContext.getProcessEngineConfiguration().getHistoryLevel();
     if (historyLevel >= ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {
       HistoricDetailQueryImpl variableQuery = 
-        (HistoricDetailQueryImpl) new HistoricDetailQueryImpl().taskId(id);
+        (HistoricDetailQueryImpl) new HistoricDetailQueryImpl(commandContext).taskId(id);
       
-      List<HistoricDetail> details = variableQuery.executeList(commandContext, null);
+      List<HistoricDetail> details = variableQuery.list();
       for(HistoricDetail detail : details) {
         ((HistoricDetailEntity) detail).delete();
       }

File: activiti-engine/src/main/java/org/activiti/engine/impl/history/handler/ActivityInstanceEndHandler.java
Patch:
@@ -17,7 +17,6 @@
 
 import org.activiti.engine.history.HistoricActivityInstance;
 import org.activiti.engine.impl.HistoricActivityInstanceQueryImpl;
-import org.activiti.engine.impl.Page;
 import org.activiti.engine.impl.db.DbSqlSession;
 import org.activiti.engine.impl.history.HistoricActivityInstanceEntity;
 import org.activiti.engine.impl.interceptor.CommandContext;
@@ -63,11 +62,11 @@ public static HistoricActivityInstanceEntity findActivityInstance(ExecutionEntit
       }
     }
     
-    List<HistoricActivityInstance> historicActivityInstances = new HistoricActivityInstanceQueryImpl()
+    List<HistoricActivityInstance> historicActivityInstances = new HistoricActivityInstanceQueryImpl(commandContext)
       .executionId(executionId)
       .activityId(activityId)
       .unfinished()
-      .executeList(commandContext, new Page(0, 1));
+      .listPage(0, 1);
     
     if (!historicActivityInstances.isEmpty()) {
       return (HistoricActivityInstanceEntity) historicActivityInstances.get(0);

File: activiti-engine/src/main/java/org/activiti/engine/impl/rules/RulesHelper.java
Patch:
@@ -57,11 +57,11 @@ public static KnowledgeBase findKnowledgeBaseByDeploymentId(String deploymentId)
   }
 
   public static KnowledgeBase findLatestKnowledgeBaseByDeploymentName(String deploymentName) {
-    DeploymentQueryImpl deploymentQuery = new DeploymentQueryImpl();
+    DeploymentQueryImpl deploymentQuery = new DeploymentQueryImpl(CommandContext.getCurrent());
     deploymentQuery
       .deploymentName(deploymentName)
       .orderByDeploymenTime().asc();
-    List<Deployment> deployments = deploymentQuery.executeList(CommandContext.getCurrent(), new Page(0, 1));
+    List<Deployment> deployments = deploymentQuery.listPage(0, 1);
     if (deployments.isEmpty()) {
       throw new ActivitiException("no deployments with name "+deploymentName);
     }

File: activiti-engine/src/test/java/org/activiti/standalone/cfg/identity/CustomIdentitySession.java
Patch:
@@ -23,7 +23,6 @@
 import org.activiti.engine.impl.Page;
 import org.activiti.engine.impl.cfg.IdentitySession;
 import org.activiti.engine.impl.identity.UserEntity;
-import org.activiti.engine.impl.interceptor.CommandExecutor;
 import org.activiti.engine.impl.interceptor.Session;
 
 /**
@@ -48,7 +47,7 @@ public Group createNewGroup(String groupId) {
     return null;
   }
 
-  public GroupQuery createNewGroupQuery(CommandExecutor commandExecutor) {
+  public GroupQuery createNewGroupQuery() {
     trace(Thread.currentThread().getStackTrace());
     return null;
   }
@@ -58,7 +57,7 @@ public User createNewUser(String userId) {
     return new UserEntity(userId);
   }
 
-  public UserQuery createNewUserQuery(CommandExecutor commandExecutor) {
+  public UserQuery createNewUserQuery() {
     trace(Thread.currentThread().getStackTrace());
     return null;
   }

File: activiti-engine/src/main/java/org/activiti/engine/impl/context/ProcessEngineContext.java
Patch:
@@ -14,6 +14,7 @@
 package org.activiti.engine.impl.context;
 
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
+import org.activiti.engine.impl.scripting.ScriptingEngines;
 import org.activiti.engine.impl.variable.VariableTypes;
 
 import java.util.Map;
@@ -27,6 +28,7 @@ public class ProcessEngineContext {
   protected int historyLevel;
   protected Map<Object, Object> beans;
   protected VariableTypes variableTypes;
+  protected ScriptingEngines scriptingEngines;
   protected String mailServerDefaultFrom;
   protected String mailServerHost;
   protected int mailServerPort;

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/DbManagementSession.java
Patch:
@@ -129,8 +129,8 @@ public TableMetaData getTableMetaData(String tableName) {
 
       ResultSet resultSet = metaData.getColumns(null, null, tableName, null);
       while(resultSet.next()) {
-        String name = resultSet.getString("COLUMN_NAME");
-        String type = resultSet.getString("TYPE_NAME");
+        String name = resultSet.getString("COLUMN_NAME").toUpperCase();
+        String type = resultSet.getString("TYPE_NAME").toUpperCase();
         result.addColumnMetaData(name, type);
       }
       

File: activiti-engine/src/test/java/org/activiti/examples/mgmt/ManagementServiceTest.java
Patch:
@@ -40,7 +40,6 @@ public void testTableCount() {
     assertEquals(new Long(0), tableCount.get("ACT_RE_PROCDEF"));
     assertEquals(new Long(0), tableCount.get("ACT_RU_TASK"));
     assertEquals(new Long(0), tableCount.get("ACT_RU_IDENTITYLINK"));
-    ;
   }
 
   public void testGetTableMetaData() {

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSession.java
Patch:
@@ -26,7 +26,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.StringTokenizer;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/DbManagementSession.java
Patch:
@@ -71,7 +71,7 @@ public List<String> getTablesPresentInDatabase() {
         tables = databaseMetaData.getTables(null, null, "ACT_%", DbSqlSession.JDBC_METADATA_TABLE_TYPES);
         while (tables.next()) {
           String tableName = tables.getString("TABLE_NAME");
-          tableNames.add(tableName);
+          tableNames.add(tableName.toUpperCase());
         }
       } finally {
         tables.close();

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/db/CycleConfigurationDao.java
Patch:
@@ -17,8 +17,10 @@ public interface CycleConfigurationDao {
 
   public List<CycleConfigEntity> selectCycleConfigByGroup(String group);
 
-  public List<CycleConfigEntity> selectCycleConfigById(String id);
+  public CycleConfigEntity selectCycleConfigById(String id);
   
   public List<String> selectCycleConfigurationGroups();
+  
+  public void deleteCycleConfigurationEntry(String id);
 
 }

File: activiti-cycle/src/test/java/org/activiti/cycle/impl/ActivitiCycleDbAwareTest.java
Patch:
@@ -31,8 +31,8 @@ protected void ensureCycleDbCreated() {
 
       public Object execute(CommandContext commandContext) {
         DbSqlSession session = commandContext.getSession(DbSqlSession.class);
-        session.executeSchemaResourceOperation("cycle/drop", "drop");
-        session.executeSchemaResourceOperation("cycle/create", "create");
+//        session.executeSchemaResourceOperation("cycle/drop", "drop");
+//        session.executeSchemaResourceOperation("cycle/create", "create");
         return null;
       }
     });
@@ -44,7 +44,7 @@ protected void ensureCycleDbDropped() {
 
       public Object execute(CommandContext commandContext) {
         DbSqlSession session = commandContext.getSession(DbSqlSession.class);
-        session.executeSchemaResourceOperation("cycle/drop", "drop");
+//        session.executeSchemaResourceOperation("cycle/drop", "drop");
         return null;
       }
     });

File: activiti-engine/src/main/java/org/activiti/engine/ProcessEngineConfiguration.java
Patch:
@@ -117,7 +117,7 @@ public abstract class ProcessEngineConfiguration {
   protected int mailServerPort = 25;
   protected String mailServerDefaultFrom = "activiti@localhost";
 
-  protected String databaseType = "h2";
+  protected String databaseType;
   protected String databaseSchemaUpdate = DB_SCHEMA_UPDATE_FALSE;
   protected String jdbcDriver = "org.h2.Driver";
   protected String jdbcUrl = "jdbc:h2:tcp://localhost/activiti";

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -133,7 +133,7 @@ public class BpmnParse extends Parse {
    * that this map doesn't need to be re-initialized for each new process
    * definition.
    */
-  protected Map<String, MessageDefinition> messages;
+  protected Map<String, MessageDefinition> messages = new HashMap<String, MessageDefinition>();
   protected Map<String, StructureDefinition> structures = new HashMap<String, StructureDefinition>();
   protected Map<String, BpmnInterfaceImplementation> interfaceImplementations = new HashMap<String, BpmnInterfaceImplementation>();
   protected Map<String, OperationImplementation> operationImplementations = new HashMap<String, OperationImplementation>();

File: activiti-webapp-rest/src/main/java/org/activiti/rest/api/process/ProcessDefinitionsGet.java
Patch:
@@ -65,9 +65,9 @@ protected void executeWebScript(ActivitiRequest req, Status status, Cache cache,
         StartFormData startFormData = getFormService().getStartFormData(p.getId());
         if (startFormData != null) {
           restProcessDefinition.setStartFormResourceKey(startFormData.getFormKey());
-          restProcessDefinition.setGraphicNotationDefined(isGraphicNotationDefined(p.getId()));
-
         }
+        
+        restProcessDefinition.setGraphicNotationDefined(isGraphicNotationDefined(p.getId()));
         processDefinitionTasks.add(restProcessDefinition);
       }
       // Add the list of wrapped Tasks to the model

File: activiti-engine/src/main/java/org/activiti/engine/impl/cmd/GetPropertiesCmd.java
Patch:
@@ -28,7 +28,6 @@
 public class GetPropertiesCmd implements Command<Map<String, String>> {
 
   @SuppressWarnings("unchecked")
-  @Override
   public Map<String, String> execute(CommandContext commandContext) {
     List<PropertyEntity> propertyEntities = commandContext
       .getDbSqlSession()

File: activiti-upgrade/src/test/java/org/activiti/upgrade/test/UserTaskBeforeTest.java
Patch:
@@ -33,11 +33,9 @@ public void testSimplestTask() {
 
   @Deployment
   public void testTaskWithExecutionVariables() {
-    runtimeService.startProcessInstanceByKey("taskWithExecutionVariablesProcess");
-
     Map<String, Object> variables = new HashMap<String, Object>();
     variables.put("instrument", "trumpet");
     variables.put("player", "gonzo");
-    runtimeService.startProcessInstanceByKey("userTaskProcess", variables);
+    runtimeService.startProcessInstanceByKey("taskWithExecutionVariablesProcess", variables);
   }
 }

File: activiti-cxf/src/main/java/org/activiti/engine/impl/webservice/WSDLImporter.java
Patch:
@@ -196,7 +196,7 @@ private S2JJAXBModel compileModel(Types types, SchemaCompiler compiler, Element
   }
 
   private void createDefaultStructures(Element rootTypes) {
-    NodeList complexTypes = rootTypes.getElementsByTagName("xs:complexType");
+    NodeList complexTypes = rootTypes.getElementsByTagNameNS("http://www.w3.org/2001/XMLSchema", "complexType");
     for (int i = 0; i < complexTypes.getLength(); i++) {
       Element element = (Element) complexTypes.item(i);
       String structureName = this.namespace + element.getAttribute("name");
@@ -212,7 +212,7 @@ private Element getRootTypes() {
       Document doc = parser.getDocument();
       Element root = (Element) doc.getFirstChild();
       Element typesElement = (Element) root.getElementsByTagName("wsdl:types").item(0);
-      return (Element) typesElement.getElementsByTagName("xs:schema").item(0);
+      return (Element) typesElement.getElementsByTagNameNS("http://www.w3.org/2001/XMLSchema", "schema").item(0);
     } catch (SAXException e) {
       throw new ActivitiException(e.getMessage(), e);
     } catch (IOException e) {

File: activiti-jbpm-migration/src/main/java/org/activiti/migration/ProcessDataMigration.java
Patch:
@@ -43,7 +43,7 @@ public class ProcessDataMigration {
   }
   
   protected static final Logger LOGGER = Logger.getLogger(ProcessConversion.class.getName());
-  protected static final DateFormat DATE_FORMATTER = new SimpleDateFormat("yyyy-MM-dd-HH:mm:ss");
+  protected static final DateFormat DATE_FORMATTER = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
   
   protected ServiceFactory serviceFactory;
   protected String workingDir;

File: activiti-jbpm-migration/src/main/java/org/activiti/migration/service/ProcessConversionService.java
Patch:
@@ -70,7 +70,7 @@ public interface ProcessConversionService {
   
   Element convertTransition(Document processDefinitionDocument, Transition transition);
   
-  Document createEmptyBpmn20Document(String processName);
+  Document createEmptyBpmn20Document(String processName, int version);
   
   void close();
   

File: activiti-jbpm-migration/src/main/java/org/activiti/migration/service/ProcessConversionServiceImpl.java
Patch:
@@ -63,13 +63,13 @@ public Map<String, Document> convertAllProcessDefinitions() {
                 + "', version " + processDefinition.getVersion());
       }
       Document processDefinitionDocument = convertProcessDefinition(processDefinition);
-      processDefinitionMap.put(processDefinition.getName(), processDefinitionDocument);
+      processDefinitionMap.put(processDefinition.getName() + "-" + processDefinition.getVersion(), processDefinitionDocument);
     }
     return processDefinitionMap;
   }
   
   public Document convertProcessDefinition(ProcessDefinition processDefinition) {
-    Document processDefinitionXml = createEmptyBpmn20Document(processDefinition.getName());
+    Document processDefinitionXml = createEmptyBpmn20Document(processDefinition.getName(), processDefinition.getVersion());
     Element processElement = getProcessElement(processDefinitionXml);
     
     for (Node node : jbpm3Dao.getNodes(processDefinition)) {
@@ -207,7 +207,7 @@ public Element convertTransition(Document processDefinitionDocument, Transition
     return sequenceFlowElement;
   }
   
-  public Document createEmptyBpmn20Document(String processName) {
+  public Document createEmptyBpmn20Document(String processName, int version) {
     try {
       DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
       factory.setNamespaceAware(true);

File: activiti-jbpm-migration/src/test/java/org/activiti/migration/test/MigrationTestCase.java
Patch:
@@ -117,7 +117,7 @@ protected ServiceFactory createServiceFactory() throws IOException {
     return ServiceFactory.configureFromProperties(jbpm3DbProperties, activitiDbProperties);
   }
   
-  protected String convertProcess(String processName) {
+  protected String getConvertedProcess(String processName) {
     Map<String, Document> migratedProcessDefinitions = processConversionService.convertAllProcessDefinitions();
     return xmlTransformationService.convertToString(migratedProcessDefinitions.get(processName));
   }

File: activiti-jbpm-migration/src/test/java/org/activiti/migration/test/process/conversion/SimplestProcessDefinitionConversionTest.java
Patch:
@@ -32,7 +32,7 @@ protected void setUp() throws Exception {
   }
   
   public void testStartProcessInstanceOfMigratedProcess() throws Exception {
-    String migratedBpmn20Xml = convertProcess("simplest");
+    String migratedBpmn20Xml = getConvertedProcess("simplest-1");
     String deployId = repositoryService.createDeployment()
       .addString("simplest.bpmn20.xml", migratedBpmn20Xml)
       .deploy()

File: activiti-jbpm-migration/src/test/java/org/activiti/migration/test/process/conversion/TaskNodeConversionTest.java
Patch:
@@ -29,7 +29,7 @@ protected void setUp() throws Exception {
   }
   
   public void testActorIdToAssigneeConversion() {
-    String migratedBpmn20Xml = convertProcess("actorIdProcess");
+    String migratedBpmn20Xml = getConvertedProcess("actorIdProcess-1");
     String deployId = repositoryService.createDeployment()
       .addString("actorIdProcess.bpmn20.xml", migratedBpmn20Xml) .deploy().getId();
     
@@ -44,7 +44,7 @@ public void testActorIdToAssigneeConversion() {
   }
   
   public void testPooledActorsConversion() {
-    String migratedBpmn20Xml = convertProcess("pooledActorsProcess");
+    String migratedBpmn20Xml = getConvertedProcess("pooledActorsProcess-1");
     String deployId = repositoryService.createDeployment()
       .addString("pooledActorsProcess.bpmn20.xml", migratedBpmn20Xml).deploy().getId();
     

File: activiti-jbpm-migration/src/main/java/org/activiti/migration/service/ProcessConversionService.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.migration.process;
+package org.activiti.migration.service;
 
 import java.util.List;
 import java.util.Map;

File: activiti-jbpm-migration/src/main/java/org/activiti/migration/service/ProcessConversionServiceImpl.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.migration.process;
+package org.activiti.migration.service;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -59,7 +59,8 @@ public Map<String, Document> convertAllProcessDefinitions() {
     List<ProcessDefinition> processDefinitions = jbpm3Dao.getAllProcessDefinitions();
     for (ProcessDefinition processDefinition : processDefinitions) {
       if (LOGGER.isLoggable(Level.INFO)) {
-        LOGGER.info("Converting process definition '" + processDefinition.getName() + "'");
+        LOGGER.info("Converting process definition '" + processDefinition.getName() 
+                + "', version " + processDefinition.getVersion());
       }
       Document processDefinitionDocument = convertProcessDefinition(processDefinition);
       processDefinitionMap.put(processDefinition.getName(), processDefinitionDocument);

File: activiti-jbpm-migration/src/main/java/org/activiti/migration/util/ZipUtil.java
Patch:
@@ -14,7 +14,6 @@
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
-import java.io.IOException;
 import java.util.Map;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipInputStream;

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/SignavioConnector.java
Patch:
@@ -301,6 +301,7 @@ private RepositoryArtifact getArtifactInfoFromFile(String id, JSONObject json) t
     String parent = json.optString("parent");
     if (parent != null) {
       String parentId = getConfiguration().getModelIdFromUrl(parent);
+      parentId = parentId.replace("/directory", "");      
       fileInfo.getMetadata().setParentFolderId(parentId);
     }
 
@@ -772,7 +773,7 @@ protected void validateConfiguration() {
       path = path + "/";
     }
     setConfigValue(CONFIG_KEY_SIGNAVIO_BASE_URL, path);
-    String type = getConfigValue(CONFIG_KEY_TYPE,String.class);
+    String type = getConfigValue(CONFIG_KEY_TYPE, String.class);
     if ("oryx".equals(type)) {
       configuration = new OryxConnectorConfiguration(this);
     } else {

File: activiti-engine/src/test/java/org/activiti/examples/mgmt/ManagementServiceTest.java
Patch:
@@ -54,8 +54,8 @@ public void testGetTableMetaData() {
     assertTrue(assigneeIndex >= 0);
     assertTrue(createTimeIndex >= 0);
     
-    assertOneOf(new String [] {"VARCHAR", "NVARCHAR2"}, tableMetaData.getColumnTypes().get(assigneeIndex));
-    assertOneOf(new String [] {"TIMESTAMP", "TIMESTAMP(6)"}, tableMetaData.getColumnTypes().get(createTimeIndex));
+    assertOneOf(new String [] {"VARCHAR", "NVARCHAR2", "nvarchar"}, tableMetaData.getColumnTypes().get(assigneeIndex));
+    assertOneOf(new String [] {"TIMESTAMP", "TIMESTAMP(6)", "datetime"}, tableMetaData.getColumnTypes().get(createTimeIndex));
   }
   
   private void assertOneOf(String[] possibleValues, String currentValue) {

File: activiti-engine/src/test/java/org/activiti/engine/test/bpmn/callactivity/CallActivityAdvancedTest.java
Patch:
@@ -98,7 +98,6 @@ public void testCallParallelSubProcess() {
     // Completing the first task should not end the subprocess
     taskService.complete(taskA.getId());
     assertEquals(1, taskQuery.list().size());
-    assertEquals(2, runtimeService.createExecutionQuery().count());
     
     // Completing the second task should end the subprocess and end the whole process instance
     taskService.complete(taskB.getId());

File: activiti-spring/src/test/java/org/activiti/spring/test/taskListener/TaskListenerSpringTest.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * @author Joram Barrez
  */
-@ContextConfiguration("classpath:org/activiti/spring/test/tasklistener/TaskListenerDelegateExpressionTest-context.xml")
+@ContextConfiguration("classpath:org/activiti/spring/test/taskListener/TaskListenerDelegateExpressionTest-context.xml")
 public class TaskListenerSpringTest extends SpringActivitiTestCase {
   
   @Deployment

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/AbstractBpmnActivity.java
Patch:
@@ -52,5 +52,5 @@ public void signal(ActivityExecution execution, String signalName, Object signal
     // concrete activity behaviours that do accept signals should override this method;
     throw new ActivitiException("this activity doesn't accept signals");
   }
-
+  
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/ReceiveTaskActivity.java
Patch:
@@ -29,6 +29,7 @@ public class ReceiveTaskActivity extends TaskActivity {
 
   public void execute(ActivityExecution execution) throws Exception {
     // Do nothing: waitstate behavior
+    System.out.println("iep");
   }
   
   public void signal(ActivityExecution execution, String signalName, Object data) throws Exception {

File: activiti-camel/src/main/java/org/activiti/camel/ContextProvider.java
Patch:
@@ -17,7 +17,6 @@
 
 public interface ContextProvider {
 
-    CamelContext getContext(String processName); 
-
+  CamelContext getContext(String processName);
 
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParseListener.java
Patch:
@@ -24,6 +24,7 @@
 /**
  * @author Tom Baeyens
  * @author Falko Menge
+ * @author Joram Barrez
  */
 public interface BpmnParseListener {
 
@@ -39,6 +40,7 @@ public interface BpmnParseListener {
   void parseUserTask(Element userTaskElement, ScopeImpl scope, ActivityImpl activity);
   void parseEndEvent(Element endEventElement, ScopeImpl scope, ActivityImpl activity);
   void parseBoundaryTimerEventDefinition(Element timerEventDefinition, boolean interrupting, ActivityImpl timerActivity);
+  void parseBoundaryErrorEventDefinition(Element errorEventDefinition, boolean interrupting, ActivityImpl activity, ActivityImpl nestedErrorEventActivity);
   void parseSubProcess(Element subProcessElement, ScopeImpl scope, ActivityImpl activity);
   void parseCallActivity(Element callActivityElement, ScopeImpl scope, ActivityImpl activity);
   void parseProperty(Element propertyElement, VariableDeclaration variableDeclaration, ActivityImpl activity);

File: activiti-engine/src/main/java/org/activiti/engine/impl/history/handler/HistoryParseListener.java
Patch:
@@ -112,6 +112,9 @@ public void parseParallelGateway(Element parallelGwElement, ScopeImpl scope, Act
 
   public void parseBoundaryTimerEventDefinition(Element timerEventDefinition, boolean interrupting, ActivityImpl timerActivity) {
   }
+  
+  public void parseBoundaryErrorEventDefinition(Element errorEventDefinition, boolean interrupting, ActivityImpl activity, ActivityImpl nestedErrorEventActivity) {
+  }
 
   public void parseProperty(Element propertyElement, VariableDeclaration variableDeclaration, ActivityImpl activity) {
   }

File: activiti-engine/src/main/java/org/activiti/engine/impl/repository/ProcessDefinitionEntity.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.Date;
 import java.util.Map;
 
+import org.activiti.engine.impl.bpmn.parser.BpmnParse;
 import org.activiti.engine.impl.cfg.IdGenerator;
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.db.DbSqlSession;
@@ -76,7 +77,7 @@ public ExecutionEntity createProcessInstance(String businessKey) {
 	    // reset the process instance in order to have the db-generated process instance id available
 	    processInstance.setProcessInstance(processInstance);
 	    
-	    String initiatorVariableName = (String) getProperty("initiatorVariableName");
+	    String initiatorVariableName = (String) getProperty(BpmnParse.PROPERTYNAME_INITIATOR_VARIABLE_NAME);
 	    if (initiatorVariableName!=null) {
 	      String authenticatedUserId = Authentication.getAuthenticatedUserId();
 	      processInstance.setVariable(initiatorVariableName, authenticatedUserId);

File: activiti-engine/src/main/java/org/activiti/engine/delegate/DelegateExecution.java
Patch:
@@ -24,4 +24,6 @@ public interface DelegateExecution extends VariableScope {
 
   String getId();
   
+  String getProcessInstanceId();
+  
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/NoneEndEventActivity.java
Patch:
@@ -21,9 +21,7 @@
 public class NoneEndEventActivity extends AbstractBpmnActivity {
   
   public void execute(ActivityExecution execution) throws Exception {
-    
     execution.end();
-    
   }
 
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/history/handler/ProcessInstanceEndHandler.java
Patch:
@@ -15,6 +15,7 @@
 
 import org.activiti.engine.impl.history.HistoricProcessInstanceEntity;
 import org.activiti.engine.impl.interceptor.CommandContext;
+import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
 import org.activiti.engine.impl.pvm.delegate.ExecutionListener;
 import org.activiti.engine.impl.pvm.delegate.ExecutionListenerExecution;
 import org.activiti.engine.impl.runtime.ExecutionEntity;
@@ -29,7 +30,7 @@ public void notify(ExecutionListenerExecution execution) {
     HistoricProcessInstanceEntity historicProcessInstance = CommandContext
       .getCurrent()
       .getHistorySession()
-      .findHistoricProcessInstance(execution.getId());
+      .findHistoricProcessInstance(execution.getProcessInstanceId());
     
     String deleteReason = ((ExecutionEntity)execution).getDeleteReason();
     historicProcessInstance.markEnded(deleteReason);

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/GatewayActivityBehavior.java
Patch:
@@ -18,7 +18,7 @@
  * 
  * @author Joram Barrez
  */
-public abstract class GatewayActivity extends AbstractBpmnActivity {
+public abstract class GatewayActivityBehavior extends AbstractBpmnActivity {
   
   // TODO: implement diverging/converging 
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/ParallelGatewayActivity.java
Patch:
@@ -49,7 +49,7 @@
  * @author Joram Barrez
  * @author Tom Baeyens
  */
-public class ParallelGatewayActivity extends GatewayActivity {
+public class ParallelGatewayActivity extends GatewayActivityBehavior {
   
   private static Logger log = Logger.getLogger(ParallelGatewayActivity.class.getName());
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerExecuteNestedActivityJobHandler.java
Patch:
@@ -23,6 +23,7 @@
 
 /**
  * @author Tom Baeyens
+ * @author Joram Barrez
  */
 public class TimerExecuteNestedActivityJobHandler implements JobHandler {
   
@@ -35,8 +36,7 @@ public String getType() {
   }
 
   public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext) {
-    ActivityImpl activity = execution.getActivity();
-    ActivityImpl borderEventActivity = activity.getProcessDefinition().findActivity(configuration);
+    ActivityImpl borderEventActivity = execution.getProcessDefinition().findActivity(configuration);
 
     if (borderEventActivity == null) {
       throw new ActivitiException("Error while firing timer: border event activity " + configuration + " not found");

File: activiti-mule/src/test/java/org/activiti/engine/test/bpmn/sendtask/WebServiceUELTest.java
Patch:
@@ -34,7 +34,9 @@ public void testAsyncInvocationWithDataFlowUEL() throws Exception {
 
     DbRepositorySessionFactory dbRepositorySessionFactory = (DbRepositorySessionFactory) 
       this.processEngineConfiguration.getSessionFactories().get(RepositorySession.class);
-    ProcessDefinitionEntity processDefinition = dbRepositorySessionFactory.getProcessDefinitionCache().get("asyncWebServiceInvocationWithDataFlowUEL:1");
+    
+    String processDefinitionId = repositoryService.createProcessDefinitionQuery().processDefinitionKey("asyncWebServiceInvocationWithDataFlowUEL").singleResult().getId();
+    ProcessDefinitionEntity processDefinition = dbRepositorySessionFactory.getProcessDefinitionCache().get(processDefinitionId);
     ItemDefinition itemDefinition = processDefinition.getIoSpecification().getDataInputs().get(0).getDefinition();
 
     ItemInstance itemInstance = itemDefinition.createInstance();

File: activiti-mule/src/test/java/org/activiti/engine/test/bpmn/servicetask/WebServiceUELTest.java
Patch:
@@ -31,7 +31,8 @@ public class WebServiceUELTest extends AbstractWebServiceTaskTest {
   public void testWebServiceInvocationWithDataFlowUEL() throws Exception {
     DbRepositorySessionFactory dbRepositorySessionFactory = (DbRepositorySessionFactory) 
       this.processEngineConfiguration.getSessionFactories().get(RepositorySession.class);
-    ProcessDefinitionEntity processDefinition = dbRepositorySessionFactory.getProcessDefinitionCache().get("webServiceInvocationWithDataFlowUEL:1");
+    String processDefinitionId = repositoryService.createProcessDefinitionQuery().processDefinitionKey("webServiceInvocationWithDataFlowUEL").singleResult().getId();
+    ProcessDefinitionEntity processDefinition = dbRepositorySessionFactory.getProcessDefinitionCache().get(processDefinitionId);
     ItemDefinition itemDefinition = processDefinition.getIoSpecification().getDataInputs().get(0).getDefinition();
 
     ItemInstance itemInstance = itemDefinition.createInstance();

File: activiti-engine/src/main/java/org/activiti/engine/impl/history/handler/ActivityInstanceEndHandler.java
Patch:
@@ -52,7 +52,8 @@ public static HistoricActivityInstanceEntity findActivityInstance(ExecutionEntit
     DbSqlSession dbSqlSession = commandContext.getDbSqlSession();
     List<HistoricActivityInstanceEntity> cachedHistoricActivityInstances = dbSqlSession.findInCache(HistoricActivityInstanceEntity.class);
     for (HistoricActivityInstanceEntity cachedHistoricActivityInstance: cachedHistoricActivityInstances) {
-      if ( executionId.equals(cachedHistoricActivityInstance.getExecutionId())
+      if (executionId.equals(cachedHistoricActivityInstance.getExecutionId())
+           && activityId != null
            && (activityId.equals(cachedHistoricActivityInstance.getActivityId()))
            && (cachedHistoricActivityInstance.getEndTime()==null)
          ) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -236,10 +236,10 @@ protected void init() {
     initTransactionContextFactory();
     initCommandExecutors();
     initServices();
+    initIdGenerator();
     initDeployers();
     initJobExecutor();
     initDataSource();
-    initIdGenerator();
     initTransactionFactory();
     initSqlSessionFactory();
     initSessionFactories();
@@ -455,6 +455,7 @@ protected void initDeployers() {
 
     BpmnDeployer bpmnDeployer = new BpmnDeployer();
     bpmnDeployer.setExpressionManager(expressionManager);
+    bpmnDeployer.setIdGenerator(idGenerator);
     BpmnParser bpmnParser = new BpmnParser(expressionManager);
     
     if(preParseListeners != null) {

File: activiti-engine/src/test/java/org/activiti/engine/test/api/repository/ProcessDefinitionQueryTest.java
Patch:
@@ -67,19 +67,19 @@ public void testProcessDefinitionProperties() {
     ProcessDefinition processDefinition = processDefinitions.get(0);
     assertEquals("one", processDefinition.getKey());
     assertEquals("One", processDefinition.getName());
-    assertEquals("one:1", processDefinition.getId());
+    assertTrue(processDefinition.getId().startsWith("one:1"));
     assertEquals("Examples", processDefinition.getCategory());
 
     processDefinition = processDefinitions.get(1);
     assertEquals("one", processDefinition.getKey());
     assertEquals("One", processDefinition.getName());
-    assertEquals("one:2", processDefinition.getId());
+    assertTrue(processDefinition.getId().startsWith("one:2"));
     assertEquals("Examples", processDefinition.getCategory());
 
     processDefinition = processDefinitions.get(2);
     assertEquals("two", processDefinition.getKey());
     assertEquals("Two", processDefinition.getName());
-    assertEquals("two:1", processDefinition.getId());
+    assertTrue(processDefinition.getId().startsWith("two:1"));
     assertEquals("Examples", processDefinition.getCategory());
   }
   

File: activiti-engine/src/test/java/org/activiti/engine/test/db/ProcessDefinitionPersistenceTest.java
Patch:
@@ -54,9 +54,10 @@ public void testProcessDefinitionIntrospection() {
       .deploy()
       .getId();
   
-    ReadOnlyProcessDefinition processDefinition = ((RepositoryServiceImpl)repositoryService).getDeployedProcessDefinition("processOne:1");
+    String procDefId = repositoryService.createProcessDefinitionQuery().singleResult().getId();
+    ReadOnlyProcessDefinition processDefinition = ((RepositoryServiceImpl)repositoryService).getDeployedProcessDefinition(procDefId);
     
-    assertEquals("processOne:1", processDefinition.getId());
+    assertEquals(procDefId, processDefinition.getId());
     assertEquals("Process One", processDefinition.getName());
     assertEquals("the first process", processDefinition.getProperty("documentation"));
     

File: activiti-engine/src/test/java/org/activiti/standalone/rules/RulesDeployerTest.java
Patch:
@@ -43,7 +43,7 @@ public void testRulesDeployment() {
     
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("rulesDeployment", variableMap);
     assertNotNull(processInstance);
-    assertEquals("rulesDeployment:1", processInstance.getProcessDefinitionId());
+    assertTrue(processInstance.getProcessDefinitionId().startsWith("rulesDeployment:1"));
     
     Collection<Object> ruleOutputList = (Collection<Object>)
         runtimeService.getVariable(processInstance.getId(), "rulesOutput");

File: activiti-webapp-kickstart/src/main/java/org/activiti/kickstart/dto/FormDto.java
Patch:
@@ -57,8 +57,8 @@ public void addFormProperty(FormPropertyDto formProperty) {
 
   public String toString() {
     StringBuilder strb = new StringBuilder();
-    strb.append(title + ",");
-    strb.append(description + ",");
+    strb.append(title + "___");
+    strb.append(description + "___");
     for (FormPropertyDto property : formProperties) {
       strb.append(property.getProperty() + ";");
       strb.append(property.getType() + ";");
@@ -99,7 +99,7 @@ public String convertToHtml() {
   }
 
   public static FormDto createFromSerialized(String serialized) {
-    String[] content = serialized.split(",");
+    String[] content = serialized.split("___");
 
     FormDto form = new FormDto();
     form.setTitle(content[0].trim());

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/ProcessDiagramCanvas.java
Patch:
@@ -114,7 +114,7 @@ public ProcessDiagramCanvas(int width, int height) {
     g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
     g.setPaint(Color.black);
     
-    Font font = new Font("Arial",Font.BOLD, 12);
+    Font font = new Font("Arial",Font.BOLD, 10);
     g.setFont(font);
     this.fontMetrics = g.getFontMetrics();
   }

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/util/BPMN12.java
Patch:
@@ -29,6 +29,7 @@ public class BPMN12 {
   public static String MULTIPLE_START_EVENT = "StartMultipleEvent";
 
   public static String NONE_INTERMEDIATE_EVENT = "IntermediateEvent";
+  public static String ERROR_INTERMEDIATE_EVENT = "IntermediateErrorEvent";
 
   public static boolean isStartEvent(Shape shape) {
     return isStartEvent(shape.getStencilId());

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -79,7 +79,7 @@ public List<ProcessDefinitionEntity> deploy(DeploymentEntity deployment) {
             } catch (Exception e) { // if anything goes wrong, we don't store the image (the process will still be executable).
               LOG.log(Level.WARNING, "Error while generating process diagram, image will not be stored in repository", e);
             }
-          }
+          } 
           
           processDefinition.setDiagramResourceName(diagramResourceName);
           processDefinitions.add(processDefinition);

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/ProcessDiagramCanvas.java
Patch:
@@ -149,6 +149,8 @@ public InputStream generateImage(String imageType) {
     
     ByteArrayOutputStream out = new ByteArrayOutputStream();
     try {
+      minX = (minX <= 5) ? 5 : minX;
+      minY = (minY <= 5) ? 5 : minY;
       BufferedImage imageToSerialize = processDiagram;
       if (minX >= 0 && minY >= 0) {
         imageToSerialize = processDiagram.getSubimage(minX - 5, minY - 5, 

File: activiti-engine/src/main/java/org/activiti/engine/impl/runtime/VariableScopeImpl.java
Patch:
@@ -34,6 +34,7 @@
 
 /**
  * @author Tom Baeyens
+ * @author Joram Barrez
  */
 public abstract class VariableScopeImpl implements Serializable, VariableScope {
   

File: activiti-engine/src/test/java/org/activiti/examples/bpmn/tasklistener/TaskListenerTest.java
Patch:
@@ -54,7 +54,7 @@ public void testTaskListenerWithExpression() {
     Task task = taskService.createTaskQuery().singleResult();
     taskService.complete(task.getId());
     
-    assertEquals("Hello from second task", runtimeService.getVariable(processInstance.getId(), "greeting2"));
+    assertEquals("Write meeting notes", runtimeService.getVariable(processInstance.getId(), "greeting2"));
   }
 
 }

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/db/impl/CycleDaoMyBatisImpl.java
Patch:
@@ -237,12 +237,12 @@ public void deleteComment(String id) {
   }
   
   @SuppressWarnings("unchecked")
-  public List<RepositoryNodeCommentEntity> getCommentsForNode(String connectorId, String artifactId) {
+  public List<RepositoryNodeCommentEntity> getCommentsForNode(String connectorId, String nodeId) {
     SqlSession session = openSession();
     try {
       HashMap<String, Object> parameters = new HashMap<String, Object>();
       parameters.put("connectorId", connectorId);
-      parameters.put("artifactId", artifactId);
+      parameters.put("nodeId", nodeId);
 
       return session.selectList("selectCycleCommentForSourceArtifact", parameters);
     } finally {

File: activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ActivitiCycleWebScript.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.Map;
 
 import org.activiti.cycle.RepositoryAuthenticationException;
+import org.activiti.cycle.service.CycleCommentService;
 import org.activiti.cycle.service.CycleConfigurationService;
 import org.activiti.cycle.service.CycleContentService;
 import org.activiti.cycle.service.CyclePluginService;
@@ -35,6 +36,7 @@ public abstract class ActivitiCycleWebScript extends ActivitiWebScript {
 
   protected CycleRepositoryService repositoryService;
   protected CycleTagService tagService;
+  protected CycleCommentService commentService;
   protected CycleConfigurationService configurationService;
   protected CycleContentService contentService;
   protected CyclePluginService pluginService;
@@ -43,6 +45,7 @@ public ActivitiCycleWebScript() {
     configurationService = CycleServiceFactory.getConfigurationService();
     repositoryService = CycleServiceFactory.getRepositoryService();
     tagService = CycleServiceFactory.getTagService();
+    commentService = CycleServiceFactory.getCommentService();
     contentService = CycleServiceFactory.getContentService();
     pluginService = CycleServiceFactory.getCyclePluginService();
   }

File: activiti-cycle/src/main/java/org/activiti/cycle/annotations/CycleComponent.java
Patch:
@@ -1,6 +1,5 @@
 package org.activiti.cycle.annotations;
 
-import java.awt.Desktop.Action;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -11,6 +10,7 @@
 import org.activiti.cycle.MimeType;
 import org.activiti.cycle.RepositoryArtifactType;
 import org.activiti.cycle.RepositoryConnector;
+import org.activiti.cycle.action.Action;
 import org.activiti.cycle.action.CreateUrlAction;
 import org.activiti.cycle.action.DownloadContentAction;
 import org.activiti.cycle.action.ParameterizedAction;

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/view/TagConnector.java
Patch:
@@ -49,7 +49,7 @@ public boolean login(String username, String password) {
   }
   
   /**
-   * only operation making sense, since the tag connector "just" introduces tga
+   * only operation making sense, since the tag connector "just" introduces tag
    * folders
    */
   public RepositoryNodeCollection getChildren(String id) throws RepositoryNodeNotFoundException {

File: activiti-cycle/src/main/java/org/activiti/cycle/annotations/CycleComponent.java
Patch:
@@ -22,7 +22,7 @@
   String name() default "";
 
   /**
-   * optional parameter: if a {@link CycleContextType} is set, cycle will store
+   * Optional parameter: if a {@link CycleContextType} is set, cycle will store
    * instances of the corresponding component in the corresponding context.
    */
   CycleContextType context() default CycleContextType.NONE;

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/artifacttype/AbstractBPMN20ProcessModel.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.cycle.impl.repositoryartifacttype;
+package org.activiti.cycle.impl.artifacttype;
 
 import org.activiti.cycle.RepositoryArtifactType;
 

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/artifacttype/AbstractProcessModel.java
Patch:
@@ -1,4 +1,4 @@
-package org.activiti.cycle.impl.repositoryartifacttype;
+package org.activiti.cycle.impl.artifacttype;
 
 import org.activiti.cycle.RepositoryArtifactType;
 

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/repositoryartifacttype/SignavioBpmn20ArtifactType.java
Patch:
@@ -5,8 +5,8 @@
 import org.activiti.cycle.annotations.CycleComponent;
 import org.activiti.cycle.context.CycleApplicationContext;
 import org.activiti.cycle.context.CycleContextType;
+import org.activiti.cycle.impl.artifacttype.AbstractBPMN20ProcessModel;
 import org.activiti.cycle.impl.mimetype.XmlMimeType;
-import org.activiti.cycle.impl.repositoryartifacttype.AbstractBPMN20ProcessModel;
 
 /**
  * {@link RepositoryArtifactType} for representing Signavio (or Oryx/Activiti

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/repositoryartifacttype/SignavioDefaultArtifactType.java
Patch:
@@ -5,8 +5,8 @@
 import org.activiti.cycle.context.CycleApplicationContext;
 import org.activiti.cycle.context.CycleContextType;
 import org.activiti.cycle.context.CycleSessionContext;
+import org.activiti.cycle.impl.artifacttype.AbstractRepositoryArtifactType;
 import org.activiti.cycle.impl.mimetype.JsonMimeType;
-import org.activiti.cycle.impl.repositoryartifacttype.AbstractRepositoryArtifactType;
 
 /**
  * Artifact type for Signavio Artifact, which are not

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/repositoryartifacttype/SignavioJpdl4ArtifactType.java
Patch:
@@ -3,8 +3,8 @@
 import org.activiti.cycle.MimeType;
 import org.activiti.cycle.RepositoryArtifactType;
 import org.activiti.cycle.annotations.CycleComponent;
+import org.activiti.cycle.impl.artifacttype.AbstractProcessModel;
 import org.activiti.cycle.impl.mimetype.UnknownMimeType;
-import org.activiti.cycle.impl.repositoryartifacttype.AbstractProcessModel;
 
 /**
  * {@link RepositoryArtifactType} for representing Signavio jBPM 4 models

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/representation/ContentRepresentations.java
Patch:
@@ -54,4 +54,5 @@ public Set<ContentRepresentation> getContentRepresentations(RepositoryArtifactTy
     }
     return representations;
   }
+
 }

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/service/CycleContentServiceImpl.java
Patch:
@@ -13,9 +13,9 @@
 import org.activiti.cycle.RepositoryArtifact;
 import org.activiti.cycle.RepositoryArtifactType;
 import org.activiti.cycle.context.CycleApplicationContext;
+import org.activiti.cycle.impl.artifacttype.RepositoryArtifactTypes;
 import org.activiti.cycle.impl.connector.signavio.provider.AbstractPngProvider;
 import org.activiti.cycle.impl.mimetype.Mimetypes;
-import org.activiti.cycle.impl.repositoryartifacttype.RepositoryArtifactTypes;
 import org.activiti.cycle.impl.representation.ContentRepresentations;
 import org.activiti.cycle.impl.transform.Transformations;
 import org.activiti.cycle.service.CycleContentService;
@@ -67,6 +67,7 @@ private void sortContentReprsentations(List<ContentRepresentation> sortedList) {
     // for the moment: sort alphabetically and make sure that "PNG" is the first
     // tab:
     Collections.sort(sortedList, new Comparator<ContentRepresentation>() {
+
       public int compare(ContentRepresentation o1, ContentRepresentation o2) {
         if (o1.equals(o2)) {
           return 0;

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/service/CycleRepositoryServiceImpl.java
Patch:
@@ -22,12 +22,12 @@
 import org.activiti.cycle.context.CycleSessionContext;
 import org.activiti.cycle.impl.RepositoryFolderImpl;
 import org.activiti.cycle.impl.RepositoryNodeCollectionImpl;
+import org.activiti.cycle.impl.artifacttype.RepositoryArtifactTypes;
 import org.activiti.cycle.impl.conf.PasswordEnabledRepositoryConnectorConfiguration;
 import org.activiti.cycle.impl.connector.util.TransactionalConnectorUtils;
 import org.activiti.cycle.impl.db.CycleLinkDao;
 import org.activiti.cycle.impl.db.entity.RepositoryArtifactLinkEntity;
 import org.activiti.cycle.impl.mimetype.Mimetypes;
-import org.activiti.cycle.impl.repositoryartifacttype.RepositoryArtifactTypes;
 import org.activiti.cycle.impl.transform.Transformations;
 import org.activiti.cycle.service.CycleRepositoryService;
 import org.activiti.cycle.transform.ContentTransformationException;

File: activiti-cycle/src/main/java/org/activiti/cycle/service/CycleContentService.java
Patch:
@@ -8,7 +8,7 @@
 import org.activiti.cycle.MimeType;
 import org.activiti.cycle.RepositoryArtifact;
 import org.activiti.cycle.RepositoryArtifactType;
-import org.activiti.cycle.impl.repositoryartifacttype.RepositoryArtifactTypes;
+import org.activiti.cycle.impl.artifacttype.RepositoryArtifactTypes;
 import org.activiti.cycle.transform.ContentTransformationException;
 
 /**

File: activiti-cycle/src/main/java/org/activiti/cycle/service/CycleRepositoryService.java
Patch:
@@ -27,8 +27,8 @@
 import org.activiti.cycle.RepositoryFolder;
 import org.activiti.cycle.RepositoryNodeCollection;
 import org.activiti.cycle.RepositoryNodeNotFoundException;
+import org.activiti.cycle.impl.artifacttype.RepositoryArtifactTypes;
 import org.activiti.cycle.impl.mimetype.Mimetypes;
-import org.activiti.cycle.impl.repositoryartifacttype.RepositoryArtifactTypes;
 import org.activiti.cycle.transform.ContentTransformationException;
 
 /**

File: activiti-cycle/src/test/java/org/activiti/cycle/impl/connector/signavio/transform/pattern/SubProcessExpansionTest.java
Patch:
@@ -35,7 +35,8 @@ public void testTransform() throws FileNotFoundException, IOException, JSONExcep
     String input = IoUtils.readText(new FileInputStream(inputFileName));
     String expected = IoUtils.readText(new FileInputStream(expectedFileName));
 
-    FileSystemConnector repositoryConnector = new SignavioFileSystemConnector(new FileSystemConnectorConfiguration("filesystem", new File(path)));
+    FileSystemConnector repositoryConnector = new SignavioFileSystemConnector();
+    repositoryConnector.setConfiguration(new FileSystemConnectorConfiguration("filesystem", new File(path)));
 
     JsonTransformer jsonTransformer = new JsonTransformer();
     jsonTransformer.addJsonTransformation(new SubProcessExpansion(repositoryConnector));

File: activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ChildNodesGet.java
Patch:
@@ -52,7 +52,6 @@ protected void execute(ActivitiRequest req, Status status, Cache cache, Map<Stri
       // throwing a HTTP 500 here will cause the tree to load the node for ever.
       // throw new WebScriptException(Status.STATUS_INTERNAL_SERVER_ERROR,
       // "exception.message");
-
     }
 
     // provide empty list as default

File: activiti-cycle/src/main/java/org/activiti/cycle/MimeType.java
Patch:
@@ -22,6 +22,8 @@
 public interface MimeType {
 
   public String getName();
+  
+  public String getContentType();
 
   public String[] getCommonFileExtensions();
 

File: activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ArtifactGet.java
Patch:
@@ -65,7 +65,7 @@ protected void execute(ActivitiRequest req, Status status, Cache cache, Map<Stri
       try {
         String url = restProxyUri + "content?connectorId=" + URLEncoder.encode(connectorId, "UTF-8") + "&artifactId=" + URLEncoder.encode(artifactId, "UTF-8")
                 + "&contentRepresentationId=" + URLEncoder.encode(action.getContentRepresentation().getId(), "UTF-8");
-        downloads.add(new DownloadActionView(action.getId(), url, action.getContentRepresentation().getRepositoryArtifactType().getMimeType().getName(), action
+        downloads.add(new DownloadActionView(action.getId(), url, action.getContentRepresentation().getRepositoryArtifactType().getMimeType().getContentType(), action
                 .getContentRepresentation().getId()));
       } catch (UnsupportedEncodingException e) {
         // should never be reached as long as we use UTF-8, which is valid in

File: activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ContentGet.java
Patch:
@@ -156,14 +156,14 @@ private void getContent(ActivitiRequest req, WebScriptResponse res) throws IOExc
       if (etag.equals(requestEtag)) {
         throw new WebScriptException(HttpServletResponse.SC_NOT_MODIFIED, "");
       } else {
-        streamResponse(res, contentInputStream, new Date(0), etag, attach, attachmentFileName, contentType.getName());
+        streamResponse(res, contentInputStream, new Date(0), etag, attach, attachmentFileName, contentType.getContentType());
       }
 
     } catch (TransformationException e) {
       // Stream the contents of the exception as HTML, this is a workaround to
       // display exceptions that occur during content transformations
       streamResponse(res, new ByteArrayInputStream(e.getRenderContent().getBytes()), new Date(0), "", false, null,
-              CycleApplicationContext.get(HtmlMimeType.class).getName());
+              CycleApplicationContext.get(HtmlMimeType.class).getContentType());
     } catch (NoSuchAlgorithmException e) {
       // This should never be reached... MessageDigest throws an exception if it
       // is being instantiated with a wrong algorithm, but we know that MD5

File: activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ContentRepresentationGet.java
Patch:
@@ -60,12 +60,12 @@ protected void execute(ActivitiRequest req, Status status, Cache cache, Map<Stri
       }
       model.put("renderInfo", contentRepresentation.getRenderInfo().name());
       model.put("contentRepresentationId", contentRepresentation.getId());
-      model.put("contentType", contentRepresentation.getRepresentationMimeType().getName());
+      model.put("contentType", contentRepresentation.getRepresentationMimeType().getContentType());
     } catch (TransformationException e) {
       // Show errors that occur during transformations as HTML in the UI
       model.put("renderInfo", RenderInfo.HTML);
       model.put("contentRepresentationId", representationId);
-      model.put("contentType", CycleApplicationContext.get(HtmlMimeType.class).getName());
+      model.put("contentType", CycleApplicationContext.get(HtmlMimeType.class).getContentType());
     } 
   }
 }

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/repositoryartifacttype/SignavioBpmn20ArtifactType.java
Patch:
@@ -3,6 +3,7 @@
 import org.activiti.cycle.MimeType;
 import org.activiti.cycle.RepositoryArtifactType;
 import org.activiti.cycle.annotations.CycleComponent;
+import org.activiti.cycle.context.CycleApplicationContext;
 import org.activiti.cycle.context.CycleContextType;
 import org.activiti.cycle.impl.mimetype.XmlMimeType;
 import org.activiti.cycle.impl.repositoryartifacttype.AbstractBPMN20ProcessModel;
@@ -21,7 +22,7 @@ public class SignavioBpmn20ArtifactType extends AbstractBPMN20ProcessModel {
 
   public MimeType getMimeType() {
     // TODO: which mimetype is this?
-    return new XmlMimeType();
+    return CycleApplicationContext.get(XmlMimeType.class);
   }
 
   public String[] getCommonFileExtensions() {

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/service/CycleContentServiceImpl.java
Patch:
@@ -13,7 +13,7 @@
 import org.activiti.cycle.RepositoryArtifact;
 import org.activiti.cycle.RepositoryArtifactType;
 import org.activiti.cycle.context.CycleApplicationContext;
-import org.activiti.cycle.impl.connector.signavio.provider.PngProvider;
+import org.activiti.cycle.impl.connector.signavio.provider.AbstractPngProvider;
 import org.activiti.cycle.impl.mimetype.Mimetypes;
 import org.activiti.cycle.impl.repositoryartifacttype.RepositoryArtifactTypes;
 import org.activiti.cycle.impl.representation.ContentRepresentations;
@@ -71,10 +71,10 @@ public int compare(ContentRepresentation o1, ContentRepresentation o2) {
         if (o1.equals(o2)) {
           return 0;
         }
-        if (o1.getClass().equals(PngProvider.class)) {
+        if (AbstractPngProvider.class.isAssignableFrom(o1.getClass())) {
           return -1;
         }
-        if (o2.getClass().equals(PngProvider.class)) {
+        if (AbstractPngProvider.class.isAssignableFrom(o2.getClass())) {
           return 1;
         }
         return o1.getId().compareTo(o2.getId());

File: activiti-engine/src/main/java/org/activiti/engine/ProcessEngineConfiguration.java
Patch:
@@ -112,8 +112,8 @@ public abstract class ProcessEngineConfiguration {
   protected boolean jobExecutorActivate;
 
   protected String mailServerHost = "localhost";
-  protected String mailServerUsername = "activiti";
-  protected String mailServerPassword = "activiti";
+  protected String mailServerUsername; // by default no name and password are provided, which 
+  protected String mailServerPassword; // means no authentication for mail server
   protected int mailServerPort = 25;
   protected String mailServerDefaultFrom = "activiti@localhost";
 

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/ConnectorLoginInterceptor.java
Patch:
@@ -22,6 +22,7 @@ public void interceptMethodCall(Method m, Object object, Object... args) {
       return;
     }
     if ("login".equals(m.getName())) {
+      // TODO: Why always return true? When is it really logged in?
       return;
     }
     if (!connector.isLoggedIn()) {

File: activiti-webapp-rest/src/main/java/org/activiti/rest/builder/process/ProcessDefinitionJSONConverter.java
Patch:
@@ -35,6 +35,7 @@ public JSONObject getJSONObject(ProcessDefinition processDefinition) throws JSON
     JSONUtil.putRetainNull(json, "version", processDefinition.getVersion());
     JSONUtil.putRetainNull(json, "deploymentId", processDefinition.getDeploymentId());
     JSONUtil.putRetainNull(json, "resourceName", processDefinition.getResourceName());
+    JSONUtil.putRetainNull(json, "diagramResourceName", processDefinition.getDiagramResourceName());
     // TODO: custom handling, review when ACT-160 is fixed
     if(processDefinition instanceof RestProcessDefinition) {      
       JSONUtil.putRetainNull(json, "startFormResourceKey", ((RestProcessDefinition) processDefinition).getStartFormResourceKey());

File: activiti-webapp-rest/src/main/java/org/activiti/rest/model/RestProcessDefinition.java
Patch:
@@ -32,6 +32,7 @@ public RestProcessDefinition(ProcessDefinitionEntity processDefinition) {
     this.setVersion(processDefinition.getVersion());
     this.setDeploymentId(processDefinition.getDeploymentId());
     this.setResourceName(processDefinition.getResourceName());
+    this.setDiagramResourceName(processDefinition.getDiagramResourceName());
   }
 
   protected String startFormResourceKey;

File: activiti-cycle/src/main/java/org/activiti/cycle/ContentProvider.java
Patch:
@@ -1,5 +1,6 @@
 package org.activiti.cycle;
 
+
 /**
  * A content provider can create content, normaly nevessary for a
  * {@link ContentRepresentation} for a special {@link RepositoryArtifact}

File: activiti-cycle/src/main/java/org/activiti/cycle/CycleTagContent.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.util.List;
 
+
 /**
  * Returns a tag with the tagged contents
  * 

File: activiti-cycle/src/main/java/org/activiti/cycle/MimeType.java
Patch:
@@ -16,12 +16,13 @@
  * Provides a simple interface to retrieve the content-type of artifacts and
  * their content representations.
  * 
- * See {@link CycleDefaultMimeType} for a list of standard mime-types.
  * 
  * @author nils.preusker@camunda.com
  */
 public interface MimeType {
 
-  public String getContentType();
+  public String getName();
+
+  public String[] getCommonFileExtensions();
 
 }

File: activiti-cycle/src/main/java/org/activiti/cycle/RepositoryNodeCollection.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.util.List;
 
+
 public interface RepositoryNodeCollection {
 
   /**

File: activiti-cycle/src/main/java/org/activiti/cycle/action/ArtifactAwareParameterizedAction.java
Patch:
@@ -1,4 +1,6 @@
-package org.activiti.cycle;
+package org.activiti.cycle.action;
+
+import org.activiti.cycle.RepositoryArtifact;
 
 /**
  * {@link ParameterizedAction} allowing indicating whether it is applicable to a

File: activiti-cycle/src/main/java/org/activiti/cycle/action/RepositoryArtifactOpenLinkAction.java
Patch:
@@ -1,7 +1,9 @@
-package org.activiti.cycle;
+package org.activiti.cycle.action;
 
 import java.net.URL;
 
+import org.activiti.cycle.RepositoryArtifact;
+
 /**
  * Action to open an external URl for an {@link RepositoryArtifact}, for example
  * opening the Signavio modeler for a BPMN model

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/ParameterizedActionImpl.java
Patch:
@@ -2,8 +2,8 @@
 
 import java.util.Map;
 
-import org.activiti.cycle.ParameterizedAction;
 import org.activiti.cycle.RepositoryException;
+import org.activiti.cycle.action.ParameterizedAction;
 
 /**
  * Base class for actions requiring paremeters which must be displayed in an own

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/action/CreateUrlActionImpl.java
Patch:
@@ -1,8 +1,9 @@
-package org.activiti.cycle.impl;
+package org.activiti.cycle.impl.action;
 
 import java.net.URL;
 
-import org.activiti.cycle.CreateUrlAction;
+import org.activiti.cycle.action.CreateUrlAction;
+import org.activiti.cycle.impl.AbstractArtifactActionImpl;
 
 /**
  * Base class for actions to open {@link URL}s in the GUI (e.g. download files,

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/fs/SignavioFileSystemConnector.java
Patch:
@@ -38,9 +38,9 @@ public SignavioFileSystemConnector(FileSystemConnectorConfiguration conf) {
    * Takes a Signavio model id and obtains an according JSON file from the file
    * system.
    */
-  public Content getContent(String artifactId, String representationName) throws RepositoryNodeNotFoundException {
+  public Content getContent(String artifactId) throws RepositoryNodeNotFoundException {
     artifactId = (String) artifactId.subSequence(15, artifactId.lastIndexOf(".signavio.xml"));
-    artifactId = "/" + artifactId + "." + representationName.toLowerCase();
-    return super.getContent(artifactId, representationName);
+    artifactId = "/" + artifactId + ".json";
+    return super.getContent(artifactId);
   }
 }
\ No newline at end of file

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/action/AbstractTechnicalBpmnXmlAction.java
Patch:
@@ -37,5 +37,7 @@ public String getProcessName(RepositoryArtifact artifact) {
   public String getFormResourceName() {
     return getDefaultFormName();
   }
+  
+  
 
 }

File: activiti-cycle/src/test/java/org/activiti/cycle/impl/connector/signavio/transform/pattern/SubProcessExpansionTest.java
Patch:
@@ -11,7 +11,6 @@
 import org.activiti.cycle.impl.connector.fs.FileSystemConnector;
 import org.activiti.cycle.impl.connector.fs.FileSystemConnectorConfiguration;
 import org.activiti.cycle.impl.connector.fs.SignavioFileSystemConnector;
-import org.activiti.cycle.impl.plugin.PluginFinder;
 import org.activiti.cycle.impl.connector.signavio.transform.JsonTransformer;
 import org.activiti.cycle.impl.util.IoUtils;
 import org.json.JSONException;
@@ -36,7 +35,6 @@ public void testTransform() throws FileNotFoundException, IOException, JSONExcep
     String input = IoUtils.readText(new FileInputStream(inputFileName));
     String expected = IoUtils.readText(new FileInputStream(expectedFileName));
 
-    PluginFinder.checkPluginInitialization(); // needed for registering artifact types
     FileSystemConnector repositoryConnector = new SignavioFileSystemConnector(new FileSystemConnectorConfiguration("filesystem", new File(path)));
 
     JsonTransformer jsonTransformer = new JsonTransformer();

File: activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/session/CycleHttpSession.java
Patch:
@@ -12,12 +12,13 @@
 import org.activiti.cycle.components.RuntimeConnectorList;
 import org.activiti.cycle.context.CycleSessionContext;
 import org.activiti.cycle.impl.conf.PasswordEnabledRepositoryConnectorConfiguration;
-import org.activiti.cycle.impl.plugin.PluginFinder;
 import org.activiti.cycle.service.CycleServiceFactory;
 import org.activiti.rest.util.ActivitiRequest;
 
 /**
- * Initializes the Cycle Http-Session.
+ * Initializes the Cycle Http-Session. 
+ * 
+ * TODO: find a better place for this, a ServletFilter?
  * 
  * @author daniel.meyer@camunda.com
  */
@@ -39,7 +40,6 @@ public static void openSession(ActivitiRequest req) {
     String cuid = req.getCurrentUserId();
 
     // TODO: find a better place for this ?
-    PluginFinder.registerServletContext(httpSession.getServletContext());
     CycleComponentFactory.registerServletContext(httpSession.getServletContext());
 
     // Makes the HttpSession available as CycleSessionContext

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/conf/CycleDbSqlSessionFactory.java
Patch:
@@ -92,9 +92,9 @@ public static void executeSchemaResource(String operation, String databaseName,
     } finally {
       IoUtil.closeSilently(inputStream);
       if (success) {
-        sqlSession.commit(true);
+        sqlSession.commit();
       } else {
-        sqlSession.rollback(true);
+        sqlSession.rollback();
       }
       sqlSession.close();
     }

File: activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfigurationImpl.java
Patch:
@@ -50,7 +50,7 @@
 import org.activiti.engine.impl.calendar.BusinessCalendarManager;
 import org.activiti.engine.impl.calendar.DurationBusinessCalendar;
 import org.activiti.engine.impl.calendar.MapBusinessCalendarManager;
-import org.activiti.engine.impl.cfg.standalone.StandaloneIbatisTransactionContextFactory;
+import org.activiti.engine.impl.cfg.standalone.StandaloneMybatisTransactionContextFactory;
 import org.activiti.engine.impl.db.DbHistorySessionFactory;
 import org.activiti.engine.impl.db.DbIdGenerator;
 import org.activiti.engine.impl.db.DbIdentitySessionFactory;
@@ -509,7 +509,7 @@ protected void initCommandContextFactory() {
 
   protected void initTransactionContextFactory() {
     if (transactionContextFactory==null) {
-      transactionContextFactory = new StandaloneIbatisTransactionContextFactory();
+      transactionContextFactory = new StandaloneMybatisTransactionContextFactory();
     }
   }
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/cfg/standalone/StandaloneMybatisTransactionContext.java
Patch:
@@ -28,14 +28,14 @@
 /**
  * @author Tom Baeyens
  */
-public class StandaloneIbatisTransactionContext implements TransactionContext {
+public class StandaloneMybatisTransactionContext implements TransactionContext {
   
-  private static Logger log = Logger.getLogger(StandaloneIbatisTransactionContext.class.getName());
+  private static Logger log = Logger.getLogger(StandaloneMybatisTransactionContext.class.getName());
 
   protected CommandContext commandContext;
   protected Map<TransactionState,List<TransactionListener>> stateTransactionListeners = null;
   
-  public StandaloneIbatisTransactionContext(CommandContext commandContext) {
+  public StandaloneMybatisTransactionContext(CommandContext commandContext) {
     this.commandContext = commandContext;
   }
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/cfg/standalone/StandaloneMybatisTransactionContextFactory.java
Patch:
@@ -20,9 +20,9 @@
 /**
  * @author Tom Baeyens
  */
-public class StandaloneIbatisTransactionContextFactory implements TransactionContextFactory {
+public class StandaloneMybatisTransactionContextFactory implements TransactionContextFactory {
 
   public TransactionContext openTransactionContext(CommandContext commandContext) {
-    return new StandaloneIbatisTransactionContext(commandContext);
+    return new StandaloneMybatisTransactionContext(commandContext);
   }
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -237,9 +237,9 @@ public static void executeSchemaResource(String directory, String operation, Str
 
     } finally {
       if (success) {
-        sqlSession.commit(true);
+        sqlSession.commit();
       } else {
-        sqlSession.rollback(true);
+        sqlSession.rollback();
       }
       sqlSession.close();
     }

File: activiti-engine/src/main/java/org/activiti/engine/impl/variable/EntityManagerSessionFactory.java
Patch:
@@ -24,9 +24,9 @@
  */
 public class EntityManagerSessionFactory implements SessionFactory {
 
-  private EntityManagerFactory entityManagerFactory;
-  private boolean handleTransactions;
-  private boolean closeEntityManager;
+  protected EntityManagerFactory entityManagerFactory;
+  protected boolean handleTransactions;
+  protected boolean closeEntityManager;
 
   public EntityManagerSessionFactory(Object entityManagerFactory, boolean handleTransactions, boolean closeEntityManager) {
     if(entityManagerFactory == null) {

File: activiti-engine/src/test/java/org/activiti/standalone/initialization/ProcessEngineInitializationTest.java
Patch:
@@ -68,9 +68,9 @@ public void testVersionMismatch() {
       throw new ActivitiException("couldn't update db schema version", e);
     } finally {
       if (success) {
-        sqlSession.commit(true);
+        sqlSession.commit();
       } else {
-        sqlSession.rollback(true);
+        sqlSession.rollback();
       }
       sqlSession.close();
     }

File: activiti-cycle/src/test/java/org/activiti/cycle/impl/connector/signavio/transform/pattern/AdjustShapeNamesForXmlNCNameTest.java
Patch:
@@ -10,7 +10,7 @@ public class AdjustShapeNamesForXmlNCNameTest {
   @Test
   public void testAdjustNamesForEngine() {
     assertEquals("Send_rejection_e-mail", AdjustShapeNamesForXmlNCName.adjustForXmlNCName("Send rejection e-mail"));
-    assertEquals("_15__everything_mine__-_", AdjustShapeNamesForXmlNCName.adjustForXmlNCName("�15: everything mine :-)"));
+    assertEquals("______________________________-_", AdjustShapeNamesForXmlNCName.adjustForXmlNCName("<!\"§$%&/()=?{[]}\\´`.,_;#+*~> :-)"));
   }
 
 }

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/SignavioPluginDefinition.java
Patch:
@@ -71,7 +71,7 @@ public void addArtifactTypes(List<ArtifactType> types) {
     artifactType1.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_BPMN_20_DEVELOPER, CycleDefaultMimeType.XML, RenderInfo.CODE),
             new ActivitiCompliantBpmn20Provider());
     artifactType1.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_BPMN_20_RAW, CycleDefaultMimeType.XML, RenderInfo.CODE), new Bpmn20Provider());
-    artifactType1.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_JSON, CycleDefaultMimeType.XML, RenderInfo.CODE), new JsonProvider());
+    artifactType1.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_JSON, CycleDefaultMimeType.JSON, RenderInfo.CODE), new JsonProvider());
     artifactType1.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_SVGAPI, CycleDefaultMimeType.HTML, RenderInfo.HTML), new SvgApiProvider());
     // artifactType1.addContentRepresentation(new
     // ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_DIFF,
@@ -93,7 +93,7 @@ public void addArtifactTypes(List<ArtifactType> types) {
     ArtifactTypeImpl artifactType2 = new ArtifactTypeImpl(ARTIFACT_TYPE_BPMN_FOR_JPDL4, CycleDefaultMimeType.XML);
     artifactType2.addDefaultContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_PNG, CycleDefaultMimeType.PNG, RenderInfo.IMAGE), new PngProvider());
     artifactType2.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_JPDL4, CycleDefaultMimeType.XML, RenderInfo.CODE), new Jpdl4Provider());
-    artifactType2.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_JSON, CycleDefaultMimeType.XML, RenderInfo.CODE), new JsonProvider());
+    artifactType2.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_JSON, CycleDefaultMimeType.JSON, RenderInfo.CODE), new JsonProvider());
 
     artifactType2.addOpenUrlAction(new OpenModelerAction());
     artifactType2.addDownloadContentAction(CONTENT_REPRESENTATION_ID_JPDL4);

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/transform/pattern/BpmnPoolExtraction.java
Patch:
@@ -9,6 +9,8 @@
 
 public class BpmnPoolExtraction extends OryxTransformation {
 
+  public static final String DEFAULT_ENGINE_POOL_NAME = "Process Engine";
+  
   protected final String poolName;
 
   public BpmnPoolExtraction(String poolName) {

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/util/SignavioTransformationHelper.java
Patch:
@@ -22,7 +22,7 @@ public class SignavioTransformationHelper {
     // TODO: How to register JSON-Transformations
 
     // example with cutting out just the Engine Pool
-    addTransformation(new BpmnPoolExtraction("Process Engine"));
+    addTransformation(new BpmnPoolExtraction(BpmnPoolExtraction.DEFAULT_ENGINE_POOL_NAME));
     addTransformation(new ReplaceEmptyShapeNamesWithTypes());
     addTransformation(new ExchangeSignavioUuidWithName());
   }

File: activiti-cycle/src/test/java/org/activiti/cycle/impl/connector/signavio/SignavioConnectorTest.java
Patch:
@@ -67,7 +67,7 @@ public void testTransformation() throws IOException, JSONException {
   public void testSignavioTransformations() throws IOException, JSONException, ParserConfigurationException, SAXException {
     // define transformations
     List<JsonTransformation> transformations = new ArrayList<JsonTransformation>();
-    transformations.add(new BpmnPoolExtraction("Process Engine"));
+    transformations.add(new BpmnPoolExtraction(BpmnPoolExtraction.DEFAULT_ENGINE_POOL_NAME));
     transformations.add(new ReplaceEmptyShapeNamesWithTypes());
     transformations.add(new ExchangeSignavioUuidWithName());
     
@@ -112,7 +112,7 @@ public void testSignavioTransformations() throws IOException, JSONException, Par
   public void testActivitiCompliantBpmn20() throws Exception {
     // define transformations
     List<JsonTransformation> transformations = new ArrayList<JsonTransformation>();
-    transformations.add(new BpmnPoolExtraction("Process Engine"));
+    transformations.add(new BpmnPoolExtraction(BpmnPoolExtraction.DEFAULT_ENGINE_POOL_NAME));
     transformations.add(new AdjustShapeNamesTransformation());
 //    transformations.add(new ExchangeSignavioUuidWithName());
     

File: activiti-cycle/src/main/java/org/activiti/cycle/service/CycleConfigurationService.java
Patch:
@@ -24,7 +24,7 @@
  * String-based interface.
  * <p />
  * Retreive an instance of this Service by
- * {@link CycleService#getConfigurationService()}
+ * {@link CycleServiceFactory#getConfigurationService()}
  * 
  * @see CycleService
  * @author daniel.meyer@camunda.com

File: activiti-cycle/src/main/java/org/activiti/cycle/service/CycleRepositoryService.java
Patch:
@@ -30,12 +30,11 @@
  * Cycle service used for accessing repositories.
  * <p />
  * Get an instance of this service by
- * {@link CycleService#getRepositoryService()}
+ * {@link CycleServiceFactory#getRepositoryService()}
  * 
- *  @see CycleService 
  */
 public interface CycleRepositoryService {
-  
+
   public static class RuntimeConnectorList implements Serializable {
 
     private static final long serialVersionUID = 1L;

File: activiti-cycle/src/main/java/org/activiti/cycle/service/CycleTagService.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * Cycle service used for managing tags.
  * <p />
- * Get an instance of this service by {@link CycleService#getCycleTagService()}
+ * Get an instance of this service by {@link CycleServiceFactory#getCycleTagService()}
  * 
  * @see CycleService
  */

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -658,8 +658,7 @@ public void parseActivities(Element parentElement, ScopeImpl scopeElement) {
         parseSubProcess(activityElement, scopeElement);
       } else if (activityElement.getTagName().equals("callActivity")) {
         parseCallActivity(activityElement, scopeElement);
-      } else if (activityElement.getTagName().equals("sendTask")
-              || activityElement.getTagName().equals("adHocSubProcess")
+      } else if (activityElement.getTagName().equals("adHocSubProcess")
               || activityElement.getTagName().equals("businessRuleTask")
               || activityElement.getTagName().equals("complexGateway")
               || activityElement.getTagName().equals("eventBasedGateway")

File: activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SubmitStartFormCmd.java
Patch:
@@ -16,14 +16,11 @@
 import java.util.Map;
 
 import org.activiti.engine.ActivitiException;
-import org.activiti.engine.ProcessEngineConfiguration;
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.cfg.RepositorySession;
 import org.activiti.engine.impl.db.DbSqlSession;
 import org.activiti.engine.impl.form.StartFormHandler;
 import org.activiti.engine.impl.history.HistoricFormPropertyEntity;
-import org.activiti.engine.impl.history.HistoricProcessInstanceEntity;
-import org.activiti.engine.impl.identity.Authentication;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.repository.ProcessDefinitionEntity;

File: activiti-engine/src/main/java/org/activiti/engine/impl/history/HistoricFormPropertyEntity.java
Patch:
@@ -29,9 +29,9 @@ public class HistoricFormPropertyEntity extends HistoricDetailEntity implements
   public HistoricFormPropertyEntity() {
   }
 
-  public HistoricFormPropertyEntity(ExecutionEntity processInstance, String propertyId, String propertyValue) {
-    this.processInstanceId = processInstance.getId();
-    this.executionId = processInstance.getId();
+  public HistoricFormPropertyEntity(ExecutionEntity execution, String propertyId, String propertyValue) {
+    this.processInstanceId = execution.getProcessInstanceId();
+    this.executionId = execution.getId();
     this.propertyId = propertyId;
     this.propertyValue = propertyValue;
     this.time = ClockUtil.getCurrentTime();

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/DbMetaDataHandler.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.activiti.engine.management.TableMetaData;
 /**
- * @author Christian M�lder
+ * @author Christian Muelder
  */
 public interface DbMetaDataHandler {
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/PostgresDbMetaDataHandler.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.activiti.engine.management.TableMetaData;
 /**
- * @author Christian M�lder
+ * @author Christian Muelder
  */
 public class PostgresDbMetaDataHandler extends StdDbMetaDataHandler implements DbMetaDataHandler {
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/StdDbMetaDataHandler.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.activiti.engine.management.TableMetaData;
 /**
- * @author Christian M�lder
+ * @author Christian Muelder
  */
 public class StdDbMetaDataHandler implements DbMetaDataHandler {
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/TableMetaDataCache.java
Patch:
@@ -16,7 +16,7 @@
 
 import org.activiti.engine.management.TableMetaData;
 /**
- * @author Christian M�lder
+ * @author Christian Muelder
  */
 public class TableMetaDataCache extends HashMap<String, TableMetaData> {
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/TableMetaDataCacheHandler.java
Patch:
@@ -16,7 +16,7 @@
 import java.sql.SQLException;
 
 /**
- * @author Christian M�lder
+ * @author Christian Muelder
  */
 public class TableMetaDataCacheHandler {
 	

File: activiti-engine/src/main/java/org/activiti/engine/query/Query.java
Patch:
@@ -40,7 +40,7 @@ public interface Query<T extends Query< ? , ? >, U extends Object> {
   /**
    * Executes the query and returns the resulting entity.
    * @throws ActivitiException when the query results in more than one
-   * entities.. �
+   * entities.
    */
   U singleResult();
 

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/util/CustomProperty.java
Patch:
@@ -22,14 +22,15 @@
 public enum CustomProperty {
 
 	ORIGINAL_NAME("Original Name"),
-	ORIGINAL_ID("Original ID");
+	ORIGINAL_ID("Original ID"),
+	ORIGINAL_TYPE("Original Type");
 
 	private final String name;
 	private final Pattern pattern;
 
 	private CustomProperty(String name) {
 		this.name = name;
-		this.pattern = Pattern.compile("(.*)(" + name + ":\\s+\"((?:[^\"]|\"\")+)\")(.*)", Pattern.DOTALL);
+		this.pattern = Pattern.compile("(.*)(" + name + ":\\s+\"((?:[^\"]|\"\")*)\")(.*)", Pattern.DOTALL);
 	}
 
   public String getValue(String propertyContainer) {

File: activiti-engine/src/main/java/org/activiti/engine/ProcessEngines.java
Patch:
@@ -26,12 +26,12 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import org.activiti.engine.impl.ProcessEngineImpl;
 import org.activiti.engine.impl.ProcessEngineInfoImpl;
 import org.activiti.engine.impl.util.IoUtil;
 import org.activiti.engine.impl.util.ReflectUtil;
 
 
+
 /** Helper for initializing and closing process engines in server environments.
  * <br>
  * All created {@link ProcessEngine}s will be registered with this class.
@@ -100,7 +100,7 @@ public static void registerProcessEngine(ProcessEngine processEngine) {
   /**
    * Unregisters the given process engine.
    */
-  public static void unregister(ProcessEngineImpl processEngine) {
+  public static void unregister(ProcessEngine processEngine) {
     processEngines.remove(processEngine.getName());
   }
 

File: activiti-engine/src/main/java/org/activiti/engine/history/HistoricVariableUpdate.java
Patch:
@@ -13,7 +13,6 @@
 
 package org.activiti.engine.history;
 
-import org.activiti.engine.impl.variable.VariableType;
 
 
 /** Update of a process variable.  This is only available if history 
@@ -24,7 +23,7 @@
 public interface HistoricVariableUpdate extends HistoricDetail {
 
   String getVariableName();
-  VariableType getVariableType();
+  String getVariableTypeName();
   Object getValue();
   int getRevision();
 }

File: activiti-engine/src/main/java/org/activiti/engine/repository/ProcessDefinition.java
Patch:
@@ -14,8 +14,6 @@
 
 import org.activiti.engine.FormService;
 import org.activiti.engine.RepositoryService;
-import org.activiti.engine.form.FormData;
-import org.activiti.engine.impl.bpmn.IOSpecification;
 import org.activiti.engine.runtime.ProcessInstance;
 
 /** Is an object structure representing an executable process composed of 

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/transform/util/CustomProperty.java
Patch:
@@ -29,7 +29,7 @@ public enum CustomProperty {
 
 	private CustomProperty(String name) {
 		this.name = name;
-		this.pattern = Pattern.compile("(.*)(" + name + ":\\s+\"((?:[^\"]|\"\")+)\")(.*)");
+		this.pattern = Pattern.compile("(.*)(" + name + ":\\s+\"((?:[^\"]|\"\")+)\")(.*)", Pattern.DOTALL);
 	}
 
   public String getValue(String propertyContainer) {

File: activiti-cycle/src/test/java/org/activiti/cycle/impl/transform/util/CustomPropertyTest.java
Patch:
@@ -17,7 +17,7 @@ public void testGetValue() {
 
     propertyContainer = "Original Name: \"Do\\n\"\"Something\"\"\"\nOriginal ID: \"sid-910BF305-8A75-4319-A3A9-23C5B2828944\"";
     actual = CustomProperty.ORIGINAL_NAME.getValue(propertyContainer);
-    // FIXME assertEquals(expected, actual);
+    assertEquals(expected, actual);
   }
 
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SubmitStartFormCmd.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ProcessEngineConfiguration;
+import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.cfg.RepositorySession;
 import org.activiti.engine.impl.db.DbSqlSession;
 import org.activiti.engine.impl.form.StartFormHandler;
@@ -54,10 +55,10 @@ public ProcessInstance execute(CommandContext commandContext) {
     processInstance = processDefinition.createProcessInstance();
 
     int historyLevel = commandContext.getProcessEngineConfiguration().getHistoryLevel();
-    if (historyLevel>=ProcessEngineConfiguration.HISTORYLEVEL_ACTIVITY) {
+    if (historyLevel>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {
       DbSqlSession dbSqlSession = commandContext.getSession(DbSqlSession.class);
 
-      if (historyLevel>=ProcessEngineConfiguration.HISTORYLEVEL_AUDIT) {
+      if (historyLevel>=ProcessEngineConfigurationImpl.HISTORYLEVEL_AUDIT) {
         for (String propertyId: properties.keySet()) {
           String propertyValue = properties.get(propertyId);
           HistoricFormPropertyEntity historicFormProperty = new HistoricFormPropertyEntity(processInstance, propertyId, propertyValue);

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/DbRepositorySession.java
Patch:
@@ -25,6 +25,7 @@
 import org.activiti.engine.impl.Page;
 import org.activiti.engine.impl.ProcessDefinitionQueryImpl;
 import org.activiti.engine.impl.ProcessInstanceQueryImpl;
+import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.cfg.RepositorySession;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.interceptor.Session;
@@ -115,7 +116,7 @@ public void deleteDeployment(String deploymentId, boolean cascade) {
         .executeList(commandContext, null);
 
       int historyLevel = commandContext.getProcessEngineConfiguration().getHistoryLevel();
-      boolean isHistoryEnabled = historyLevel >= ProcessEngineConfiguration.HISTORYLEVEL_ACTIVITY;
+      boolean isHistoryEnabled = historyLevel >= ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY;
       
       for (ProcessDefinition processDefinition: processDefinitions) {
         if (isHistoryEnabled) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/repository/ProcessDefinitionEntity.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.Map;
 
 import org.activiti.engine.ProcessEngineConfiguration;
+import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.db.DbSqlSession;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.impl.form.StartFormHandler;
@@ -82,7 +83,7 @@ public ExecutionEntity createProcessInstance(String businessKey) {
 	    processInstance.setVariables(variableMap);
 
 	    int historyLevel = commandContext.getProcessEngineConfiguration().getHistoryLevel();
-	    if (historyLevel>=ProcessEngineConfiguration.HISTORYLEVEL_ACTIVITY) {
+	    if (historyLevel>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {
 	      DbSqlSession dbSqlSession = commandContext.getSession(DbSqlSession.class);
 	      HistoricProcessInstanceEntity historicProcessInstance = new HistoricProcessInstanceEntity(processInstance);
 	      dbSqlSession.insert(historicProcessInstance);

File: activiti-engine/src/main/java/org/activiti/engine/impl/runtime/ExecutionEntity.java
Patch:
@@ -27,6 +27,7 @@
 import org.activiti.engine.impl.bpmn.parser.BpmnParse;
 import org.activiti.engine.impl.calendar.BusinessCalendar;
 import org.activiti.engine.impl.calendar.DurationBusinessCalendar;
+import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.db.DbSqlSession;
 import org.activiti.engine.impl.db.PersistentObject;
 import org.activiti.engine.impl.history.HistoricActivityInstanceEntity;
@@ -119,7 +120,7 @@ public PvmProcessInstance createSubProcessInstance(PvmProcessDefinition processD
     
     CommandContext commandContext = CommandContext.getCurrent();
     int historyLevel = commandContext.getProcessEngineConfiguration().getHistoryLevel();
-    if (historyLevel>=ProcessEngineConfiguration.HISTORYLEVEL_ACTIVITY) {
+    if (historyLevel>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {
       DbSqlSession dbSqlSession = commandContext.getSession(DbSqlSession.class);
       HistoricProcessInstanceEntity historicProcessInstance = new HistoricProcessInstanceEntity((ExecutionEntity) subProcessInstance);
       dbSqlSession.insert(historicProcessInstance);

File: activiti-engine/src/main/java/org/activiti/engine/impl/runtime/VariableMap.java
Patch:
@@ -22,6 +22,7 @@
 
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.ProcessEngineConfiguration;
+import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
 import org.activiti.engine.impl.db.DbSqlSession;
 import org.activiti.engine.impl.history.HistoricVariableUpdateEntity;
 import org.activiti.engine.impl.interceptor.CommandContext;
@@ -116,7 +117,7 @@ public Object put(String key, Object value) {
     variableInstance.setValue(value);
     
     int historyLevel = commandContext.getProcessEngineConfiguration().getHistoryLevel();
-    if (historyLevel==ProcessEngineConfiguration.HISTORYLEVEL_FULL) {
+    if (historyLevel==ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {
       DbSqlSession dbSqlSession = commandContext.getDbSqlSession();
       HistoricVariableUpdateEntity historicVariableUpdate = new HistoricVariableUpdateEntity(variableInstance, dbSqlSession);
       dbSqlSession.insert(historicVariableUpdate);

File: activiti-engine/src/test/java/org/activiti/engine/test/api/history/HistoryServiceTest.java
Patch:
@@ -56,6 +56,5 @@ public void testHistoricProcessInstanceUserIdAndActivityId() {
     
     historicProcessInstance = historyService.createHistoricProcessInstanceQuery().singleResult();
     assertEquals("theEnd", historicProcessInstance.getEndActivityId());
-    
   }
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/cfg/JtaProcessEngineConfiguration.java
Patch:
@@ -38,7 +38,7 @@ public class JtaProcessEngineConfiguration extends ProcessEngineConfigurationImp
     List<CommandInterceptor> defaultCommandInterceptorsTxRequired = new ArrayList<CommandInterceptor>();
     defaultCommandInterceptorsTxRequired.add(new LogInterceptor());
     defaultCommandInterceptorsTxRequired.add(new JtaTransactionInterceptor(transactionManager, false));
-    defaultCommandInterceptorsTxRequired.add(new CommandContextInterceptor());
+    defaultCommandInterceptorsTxRequired.add(new CommandContextInterceptor(commandContextFactory));
     defaultCommandInterceptorsTxRequired.add(new CommandExecutorImpl());
     return defaultCommandInterceptorsTxRequired;
   }
@@ -48,7 +48,7 @@ public class JtaProcessEngineConfiguration extends ProcessEngineConfigurationImp
     List<CommandInterceptor> defaultCommandInterceptorsTxRequiresNew = new ArrayList<CommandInterceptor>();
     defaultCommandInterceptorsTxRequiresNew.add(new LogInterceptor());
     defaultCommandInterceptorsTxRequiresNew.add(new JtaTransactionInterceptor(transactionManager, true));
-    defaultCommandInterceptorsTxRequiresNew.add(new CommandContextInterceptor());
+    defaultCommandInterceptorsTxRequiresNew.add(new CommandContextInterceptor(commandContextFactory));
     defaultCommandInterceptorsTxRequiresNew.add(new CommandExecutorImpl());
     return defaultCommandInterceptorsTxRequiresNew;
   }

File: activiti-cycle/src/test/java/org/activiti/cycle/impl/connector/signavio/SignavioConnectorTest.java
Patch:
@@ -175,7 +175,7 @@ public void testGetFolderInfo() throws IOException, JSONException {
     SignavioConnector connector = (SignavioConnector) conf.createConnector();
     connector.login(conf.getUser(), conf.getPassword());
     
-    RepositoryFolder folder = connector.getRepositoryFolder(conf.getDirectoryUrl("/407c45d65cad48548f7b2dac5cfde5fe"));
+    RepositoryFolder folder = connector.getRepositoryFolder("/407c45d65cad48548f7b2dac5cfde5fe");
     Assert.assertNotNull(folder);
     System.out.println(folder);
   }

File: activiti-cycle/src/main/java/org/activiti/cycle/incubator/connector/svn/SvnConnectorConfiguration.java
Patch:
@@ -52,7 +52,7 @@ public void setTemporaryFileStore(String temporaryFileStore) {
   }
 
   public ArtifactType getDefaultArtifactType() {
-    return getArtifactType(SvnConnectorPluginDefinition.ARTIFACT_TYPE_DEFAULT);
+    return SvnConnectorPluginDefinition.artifactTypeDefault;
   }
 
 }

File: activiti-cycle/src/main/java/org/activiti/cycle/incubator/connector/svn/SvnConnectorPluginDefinition.java
Patch:
@@ -40,14 +40,15 @@ public class SvnConnectorPluginDefinition implements ActivitiCyclePluginDefiniti
   public static final String CONTENT_REPRESENTATION_ID_BINARY = "Binary";
   public static final String CONTENT_REPRESENTATION_ID_HTML = "HTML";
   public static final String CONTENT_REPRESENTATION_ID_HTML_SOURCE = "HTML source";
+  public static ArtifactTypeImpl artifactTypeDefault;
 
   // public static final String CONTENT_REPRESENTATION_ID_MS_WORD_X = "docx";
   // public static final String CONTENT_REPRESENTATION_ID_MS_PP = "ppt";
   // public static final String CONTENT_REPRESENTATION_ID_MS_PP_X = "pptx";
   // public static final String CONTENT_REPRESENTATION_ID_PDF = "pdf";
 
   public void addArtifactTypes(List<ArtifactType> types) {
-    ArtifactTypeImpl artifactTypeDefault = new ArtifactTypeImpl(ARTIFACT_TYPE_DEFAULT, CycleDefaultMimeType.TEXT);
+     artifactTypeDefault = new ArtifactTypeImpl(ARTIFACT_TYPE_DEFAULT, CycleDefaultMimeType.TEXT);
     artifactTypeDefault.addDefaultContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_TEXT, CycleDefaultMimeType.TEXT,
             RenderInfo.TEXT_PLAIN), new SvnTextFileContentProvider());
     artifactTypeDefault.addDownloadContentAction(CONTENT_REPRESENTATION_ID_TEXT);

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/DbSqlSessionFactory.java
Patch:
@@ -148,7 +148,7 @@ public void dbSchemaCheckVersion() {
     } catch (Exception e) {
       if (isMissingTablesException(e)) {
         throw new ActivitiException(
-                "no activiti tables in db.  set schema-strategy='create-drop' in activiti.cfg.xml for automatic schema creation", e);
+                "no activiti tables in db.  set databaseSchemaUpdate to 'true' or 'create-drop' in activiti.cfg.xml for automatic schema creation", e);
       } else {
         if (e instanceof RuntimeException) {
           throw (RuntimeException) e;

File: activiti-cycle/src/main/java/org/activiti/cycle/CycleService.java
Patch:
@@ -112,6 +112,8 @@ public RepositoryArtifact createArtifactFromContentRepresentation(String connect
   public void addArtifactLink(RepositoryArtifactLink link);
 
   public List<RepositoryArtifactLink> getArtifactLinks(String sourceConnectorId, String sourceArtifactId);
+  
+  public List<RepositoryArtifactLink> getIncomingArtifactLinks(String targetConnectorId, String targetArtifactId);
 
   public void deleteLink(String linkId);
 

File: activiti-webapp-rest/src/main/java/org/activiti/rest/util/ActivitiRequestObject.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.activiti.rest.util;
 
+import java.io.InputStream;
 import java.util.List;
 import java.util.Map;
 

File: activiti-webapp-rest/src/main/java/org/activiti/rest/util/MultipartRequestObject.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.Map;
 
 import org.springframework.extensions.webscripts.WebScriptRequest;
+import org.springframework.extensions.webscripts.servlet.FormData;
 import org.springframework.extensions.webscripts.servlet.WebScriptServletRequest;
 
 /**

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/CycleServiceImpl.java
Patch:
@@ -82,8 +82,9 @@ public CycleServiceImpl(List<RepositoryConnector> repositoryConnectors) {
       }
     }
 
-    // add tag connector hard coded for the moment
-    this.repositoryConnectors.add(new TagConnectorConfiguration(this).createConnector());
+    // add tag connector hard coded for the moment (at the first node in the
+    // tree)
+    this.repositoryConnectors.add(0, new TagConnectorConfiguration(this).createConnector());
   }
 
   // bootstrapping for cycle

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/SignavioConnector.java
Patch:
@@ -407,9 +407,6 @@ public String getModelUrl(RepositoryArtifact artifact) {
     return getConfiguration().getModelUrl(artifact.getNodeId());
   }
 
-  public void commitPendingChanges(String comment) {
-  }
-
   public void moveModel(String targetFolderId, String modelId) throws IOException {
     try {
       Form bodyForm = new Form();

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/action/ValidateActivitiDeployment.java
Patch:
@@ -5,6 +5,7 @@
 import org.activiti.cycle.RepositoryArtifact;
 import org.activiti.cycle.RepositoryConnector;
 import org.activiti.cycle.impl.connector.signavio.SignavioConnector;
+import org.activiti.cycle.impl.connector.signavio.provider.ActivitiCompliantBpmn20Provider;
 import org.activiti.engine.ProcessEngines;
 import org.activiti.engine.impl.ProcessEngineImpl;
 import org.activiti.engine.impl.bpmn.parser.BpmnParser;
@@ -34,7 +35,7 @@ public void execute(RepositoryConnector connector, RepositoryArtifact artifact,
             .getProcessEngineConfiguration();
     ExpressionManager expressionManager = processEngineConfiguration.getExpressionManager();
     
-    String bpmnXml = createBpmnXml((SignavioConnector) connector, artifact); 
+    String bpmnXml = ActivitiCompliantBpmn20Provider.createBpmnXml((SignavioConnector) connector, artifact); 
     
     BpmnParser bpmnParser = new BpmnParser(expressionManager);
     

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/util/SignavioSvgApiBuilder.java
Patch:
@@ -28,7 +28,8 @@ public class SignavioSvgApiBuilder {
   private String authToken;
   private String clickFunction;
 
-  private boolean useLocalScripts = false;
+  // TODO: Remove the hard coded urls anyway!
+  private boolean useLocalScripts = true;
   private static String svgApiScript = "";
   
   /**

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/view/TagConnector.java
Patch:
@@ -121,6 +121,9 @@ public void updateContent(String artifactId, Content content) throws RepositoryN
 
   public void updateContent(String artifactId, String contentRepresentationName, Content content) throws RepositoryNodeNotFoundException {
     throw new UnsupportedOperationException("Cannot update content in TagConnector, use real RepositoryConnector istead.");    
+  }
+
+  public void beginTransaction(String folderId, String lockComment, boolean autocommit) {
   } 
   
 }

File: activiti-cycle/src/main/java/org/activiti/cycle/incubator/connector/svn/SvnRepositoryConnector.java
Patch:
@@ -649,7 +649,7 @@ public void cancelTransaction() {
 		}
 	}
 
-	public void beginTransaction(String onFolderId, String lockComment, boolean autocommit) throws RepositoryNodeNotFoundException {
+  public void beginTransaction(boolean autocommit) {
 
 		synchronized (transaction_lock) {
 			if (transactionActive == true) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -444,7 +444,7 @@ public ProcessDefinitionEntity parseProcess(Element processElement) {
     processDefinition.setTaskDefinitions(new HashMap<String, TaskDefinition>());
     processDefinition.setDeploymentId(deployment.getId());
     
-    String historyLevelText = processElement.attribute("history");
+    String historyLevelText = processElement.attributeNS(BpmnParser.ACTIVITI_BPMN_EXTENSIONS_NS, "history");
     if (historyLevelText!=null) {
       processDefinition.setHistoryLevel(ProcessEngineConfiguration.parseHistoryLevel(historyLevelText));
     }

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -229,10 +229,9 @@ private void parseDefinitionsAttributes() {
       }
     }
     
-    
     if (expressionLanguage != null) {
       if(expressionLanguage.contains("XPath")) {
-        LOG.info("XPath currently not supported as typeLanguage");
+        LOG.info("XPath currently not supported as expressionLanguage");
       }
     }
     

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/DataInputAssociation.java
Patch:
@@ -18,19 +18,19 @@
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
 
 /**
- * A data association between a source and a target
+ * A data input association between a source and a target
  * 
  * @author Esteban Robles Luna
  */
-public class DataAssociation {
+public class DataInputAssociation {
 
   protected String source;
   
   protected String target;
   
   protected List<Assignment> assignments;
   
-  public DataAssociation(String source, String target) {
+  public DataInputAssociation(String source, String target) {
     this.source = source;
     this.target = target;
     this.assignments = new ArrayList<Assignment>();

File: activiti-engine/src/main/java/org/activiti/engine/impl/repository/ProcessDefinitionEntity.java
Patch:
@@ -15,6 +15,7 @@
 import java.util.ArrayList;
 import java.util.Map;
 
+import org.activiti.engine.impl.bpmn.IOSpecification;
 import org.activiti.engine.impl.cfg.ProcessEngineConfiguration;
 import org.activiti.engine.impl.db.DbSqlSession;
 import org.activiti.engine.impl.db.PersistentObject;

File: activiti-engine/src/main/java/org/activiti/engine/impl/variable/DefaultVariableTypes.java
Patch:
@@ -40,6 +40,7 @@ public DefaultVariableTypes() {
     addType(new DoubleType());
     addType(new ByteArrayType());
     addType(new SerializableType());
+    addType(new ItemType());
   }
 
   public DefaultVariableTypes addType(VariableType type) {

File: activiti-webapp-rest/src/main/java/org/activiti/rest/auth/ActivitiBasicHttpAuthenticatorFactory.java
Patch:
@@ -16,6 +16,7 @@
 import org.activiti.engine.identity.Group;
 import org.activiti.engine.identity.GroupQuery;
 import org.activiti.rest.Config;
+import org.springframework.extensions.webscripts.AbstractBasicHttpAuthenticatorFactory;
 import org.springframework.extensions.webscripts.Description;
 
 import java.util.ArrayList;

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/provider/SignavioDiffProvider.java
Patch:
@@ -95,7 +95,7 @@ public void addValueToContent(Content content, SignavioConnector connector, Repo
     htmlContent += "Changes from " + artifact.getMetadata().getName() + " in " + diffTarget.getMetadata().getName();
     htmlContent += script2;
 
-    String html = SignavioSvgApiBuilder.buildHtml(htmlContent, 200, 600);
+    String html = SignavioSvgApiBuilder.buildHtml(htmlContent, "", 200, 600);
     content.setValue(html);
     
   }

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/SignavioConnector.java
Patch:
@@ -359,7 +359,7 @@ public RepositoryFolder createFolder(String parentFolderId, String name) throws
       Form createFolderForm = new Form();
       createFolderForm.add("name", name);
       createFolderForm.add("description", ""); // TODO: what should we use here?
-      createFolderForm.add("parent", "/directory/" + parentFolderId);
+      createFolderForm.add("parent", "/directory" + parentFolderId);
       Representation createFolderRep = createFolderForm.getWebRepresentation();
 
       Request jsonRequest = new Request(Method.POST, new Reference(getConfiguration().getDirectoryRootUrl()), createFolderRep);

File: activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/FolderPost.java
Patch:
@@ -43,6 +43,7 @@ void execute(ActivitiRequest req, Status status, Cache cache, Map<String, Object
       model.put("result", true);
     } catch (Exception e) {
       model.put("result", false);
+      throw new RuntimeException(e);
     }
   }
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/BpmnActivityBehavior.java
Patch:
@@ -23,8 +23,8 @@
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
 
 /**
- * helper class for implementing BPMN 2.0 activities, offering convience methods
- * specific to BPMN 2.0.
+ * helper class for implementing BPMN 2.0 activities, offering convenience
+ * methods specific to BPMN 2.0.
  * 
  * This class can be used by inheritance or aggregation.
  * 

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/SignavioConnector.java
Patch:
@@ -502,7 +502,8 @@ public RepositoryArtifact createArtifactFromJSON(String containingFolderId, Stri
       // this ID ourself.
       // But anyway, then we don't know the id and cannot load the artifact down
       // to return it correctly, so we generate one ourself
-      String id = UUID.randomUUID().toString();
+      // Christian: We need to remove the hypen in the generated uuid, otherwise signavio is unable to create a model
+      String id = UUID.randomUUID().toString().replace("-", "");
       modelForm.add("id", id);
       
       // modelForm.add("views", new JSONArray().toString());

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/fs/FileSystemConnector.java
Patch:
@@ -104,9 +104,9 @@ public void deleteArtifact(String artifactId) throws RepositoryNodeNotFoundExcep
   }
 
   public RepositoryFolder createFolder(String parentFolderId, String name) throws RepositoryNodeNotFoundException {
-    File newSubFolder = new File(getFileFromId(parentFolderId), parentFolderId);
+    File newSubFolder = new File(getFileFromId(parentFolderId), name);
     if (!newSubFolder.mkdir()) {
-      throw new RepositoryException("Unable to create subfolder " + parentFolderId + " in parentfolder " + parentFolderId);
+      throw new RepositoryException("Unable to create subfolder '" + name + "' in parentfolder '" + parentFolderId + "'");
     }
     
     return getRepositoryFolder(getRepositoryNodeId(parentFolderId, name));

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/SignavioPluginDefinition.java
Patch:
@@ -9,6 +9,7 @@
 import org.activiti.cycle.impl.ContentRepresentationImpl;
 import org.activiti.cycle.impl.conf.RepositoryConnectorConfiguration;
 import org.activiti.cycle.impl.connector.signavio.action.CopySignavioModelAction;
+import org.activiti.cycle.impl.connector.signavio.action.CreateMavenProjectAction;
 import org.activiti.cycle.impl.connector.signavio.action.CreateTechnicalBpmnXmlAction;
 import org.activiti.cycle.impl.connector.signavio.action.OpenModelerAction;
 import org.activiti.cycle.impl.connector.signavio.action.SelectDiffTargetAction;
@@ -80,6 +81,7 @@ public void addArtifactTypes(List<ArtifactType> types) {
     artifactType1.addParameterizedAction(new ValidateActivitiDeployment());
     artifactType1.addParameterizedAction(new CopySignavioModelAction());
     artifactType1.addParameterizedAction(new SelectDiffTargetAction());
+    artifactType1.addParameterizedAction(new CreateMavenProjectAction());
     artifactType1.addOpenUrlAction(new OpenModelerAction());
     artifactType1.addDownloadContentAction(CONTENT_REPRESENTATION_ID_BPMN_20_DEVELOPER);
     artifactType1.addDownloadContentAction(CONTENT_REPRESENTATION_ID_BPMN_20_RAW);

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/action/ValidateActivitiDeployment.java
Patch:
@@ -34,9 +34,7 @@ public void execute(RepositoryConnector connector, RepositoryArtifact artifact,
             .getProcessEngineConfiguration();
     ExpressionManager expressionManager = processEngineConfiguration.getExpressionManager();
     
-    String sourceJson = getBpmn20Json((SignavioConnector) connector, artifact);
-    String transformedJson = applyJsonTransformations(sourceJson);
-    String bpmnXml = transformToBpmn20((SignavioConnector) connector, transformedJson); 
+    String bpmnXml = createBpmnXml((SignavioConnector) connector, artifact); 
     
     BpmnParser bpmnParser = new BpmnParser(expressionManager);
     

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -1338,10 +1338,10 @@ public void parseSequenceFlow(Element processElement, ScopeImpl scope) {
       ActivityImpl destinationActivity = scope.findActivity(destinationRef);
 
       if (sourceActivity == null) {
-        addError("Invalid source of sequence flow '" + id + "'", sequenceFlowElement);
+        addError("Invalid source '" + sourceRef + "' of sequence flow '" + id + "'", sequenceFlowElement);
       }
       if (destinationActivity == null) {
-        addError("Invalid destination of sequence flow '" + id + "'", sequenceFlowElement);
+        addError("Invalid destination '" + destinationRef + "' of sequence flow '" + id + "'", sequenceFlowElement);
       }
 
       TransitionImpl transition = sourceActivity.createOutgoingTransition(id);

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/provider/SignavioDiffProvider.java
Patch:
@@ -98,7 +98,7 @@ public void addValueToContent(Content content, SignavioConnector connector, Repo
       htmlContent += "Changes from " + artifact.getMetadata().getName() + " in " + diffTarget.getMetadata().getName();
       htmlContent += script2;
       
-      String html = SignavioSvgApiBuilder.buildHtml(htmlContent, 200);
+      String html = SignavioSvgApiBuilder.buildHtml(htmlContent, 200, 600);
       content.setValue(html);
     } catch (JSONException e) {
       throw new RepositoryException("Could not show DIFF due to exception in SvgApi", e);

File: activiti-engine/src/test/java/org/activiti/engine/test/pvm/activities/Automatic.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.test.pvm.activities;
+package org.activiti.engine.test.pvm.activities;
 
 import org.activiti.engine.impl.pvm.PvmTransition;
 import org.activiti.engine.impl.pvm.delegate.ActivityBehavior;

File: activiti-engine/src/test/java/org/activiti/engine/test/pvm/activities/EmbeddedSubProcess.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.test.pvm.activities;
+package org.activiti.engine.test.pvm.activities;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: activiti-engine/src/test/java/org/activiti/engine/test/pvm/activities/End.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.test.pvm.activities;
+package org.activiti.engine.test.pvm.activities;
 
 import org.activiti.engine.impl.pvm.delegate.ActivityBehavior;
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;

File: activiti-engine/src/test/java/org/activiti/engine/test/pvm/activities/ParallelGateway.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.test.pvm.activities;
+package org.activiti.engine.test.pvm.activities;
 
 import java.util.List;
 import java.util.logging.Level;

File: activiti-engine/src/test/java/org/activiti/engine/test/pvm/activities/ReusableSubProcess.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.test.pvm.activities;
+package org.activiti.engine.test.pvm.activities;
 
 import java.util.List;
 

File: activiti-engine/src/test/java/org/activiti/engine/test/pvm/activities/WaitState.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.test.pvm.activities;
+package org.activiti.engine.test.pvm.activities;
 
 import org.activiti.engine.impl.pvm.PvmTransition;
 import org.activiti.engine.impl.pvm.delegate.ActivityExecution;

File: activiti-engine/src/test/java/org/activiti/engine/test/pvm/activities/While.java
Patch:
@@ -11,7 +11,7 @@
  * limitations under the License.
  */
 
-package org.activiti.test.pvm.activities;
+package org.activiti.engine.test.pvm.activities;
 
 import org.activiti.engine.impl.pvm.PvmTransition;
 import org.activiti.engine.impl.pvm.delegate.ActivityBehavior;

File: activiti-spring/src/main/java/org/activiti/spring/ProcessEngineFactoryBean.java
Patch:
@@ -210,7 +210,7 @@ public void setJobExecutor(JobExecutor jobExecutor) {
     processEngineConfiguration.setJobExecutor(jobExecutor);
   }
 
-  public void setJobExecutorAutoActivate(boolean jobExecutorAutoActivate) {
+  public void setJobExecutorActivate(boolean jobExecutorAutoActivate) {
     processEngineConfiguration.setJobExecutorActivate(jobExecutorAutoActivate);
   }
 

File: activiti-webapp-rest/src/main/java/org/activiti/rest/api/process/ProcessInstancePost.java
Patch:
@@ -42,7 +42,7 @@ protected void executeWebScript(ActivitiRequest req, Status status, Cache cache,
     String processDefinitionId = req.getMandatoryString(obj, "processDefinitionId");
     Map<String, Object> variables = req.getFormVariables();
     variables.remove("processDefinitionId");
-    model.put("instance", getRuntimeService().startProcessInstanceById(processDefinitionId, variables));
+    model.put("processInstance", getRuntimeService().startProcessInstanceById(processDefinitionId, variables));
   }
 
 }

File: activiti-engine/src/test/java/org/activiti/examples/mgmt/ManagementServiceTest.java
Patch:
@@ -37,9 +37,9 @@ public void testTableCount() {
     assertEquals(new Long(0), tableCount.get("ACT_ID_GROUP"));
     assertEquals(new Long(0), tableCount.get("ACT_ID_MEMBERSHIP"));
     assertEquals(new Long(0), tableCount.get("ACT_ID_USER"));
-    assertEquals(new Long(0), tableCount.get("ACT_RE_PROC_DEF"));
+    assertEquals(new Long(0), tableCount.get("ACT_RE_PROCDEF"));
     assertEquals(new Long(0), tableCount.get("ACT_RU_TASK"));
-    assertEquals(new Long(0), tableCount.get("ACT_RU_IDENTITY_LINK"));
+    assertEquals(new Long(0), tableCount.get("ACT_RU_IDENTITYLINK"));
     ;
   }
 

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/ArtifactTypeImpl.java
Patch:
@@ -315,7 +315,8 @@ public void addDownloadContentAction(String contentRepresentationId) {
   public List<RepositoryArtifactOpenLinkAction> createOpenLinkActions(RepositoryConnector connector, RepositoryArtifact artifact) {
     ArrayList<RepositoryArtifactOpenLinkAction> list = new ArrayList<RepositoryArtifactOpenLinkAction>();
     for (CreateUrlAction action : getCreateUrlActions()) {
-      RepositoryArtifactOpenLinkAction link = new RepositoryArtifactOpenLinkAction(action.getId(), action.getUrl(connector, artifact));
+      // TODO: Think about id
+      RepositoryArtifactOpenLinkAction link = new RepositoryArtifactOpenLinkAction("Open " + action.getId(), action.getUrl(connector, artifact));
       list.add(link);
     }
     return list;

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/action/OpenModelerAction.java
Patch:
@@ -32,7 +32,7 @@ public class OpenModelerAction extends CreateUrlActionImpl {
   
   public OpenModelerAction() {
     // TODO: remove when real labels are introduced in the GUI
-    super("Open modeler action");
+    super("modeler");
   }
 
   public URL getUrl(RepositoryConnector connector, RepositoryArtifact artifact) {

File: activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ContentRepresentationGet.java
Patch:
@@ -86,7 +86,6 @@ protected void executeWebScript(ActivitiRequest req, Status status, Cache cache,
       // Show errors that occur during transformations as HTML in the UI
       model.put("renderInfo", RenderInfo.HTML);
       model.put("contentRepresentationId", representationId);
-      model.put("content", e.getRenderContent());
       model.put("contentType", CycleDefaultMimeType.HTML.getContentType());
     } catch (Exception ex) {
       log.log(Level.WARNING, "Exception while loading content representation", ex);

File: activiti-cycle/src/test/java/org/activiti/cycle/impl/connector/demo/DemoConnectorTest.java
Patch:
@@ -104,7 +104,7 @@ public void testFirstPlay() throws Exception {
     parameters.put("targetConnectorId", "demo");
     parameters.put("targetFolderId", "/minutes");
 
-    cycleService.executeParameterizedAction("demo", file1.getNodeId(), CopyArtifactAction.class.getName(), parameters);
+    cycleService.executeParameterizedAction("demo", file1.getNodeId(), new CopyArtifactAction().getId(), parameters);
 
     List<RepositoryNode> nodes = DemoConnector.nodes;
     assertEquals(8, DemoConnector.nodes.size());

File: activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ContentRepresentationGet.java
Patch:
@@ -85,7 +85,7 @@ protected void executeWebScript(ActivitiRequest req, Status status, Cache cache,
     } catch (TransformationException e) {
       // Show errors that occur during transformations as HTML in the UI
       model.put("renderInfo", RenderInfo.HTML);
-      model.put("contentRepresentationId", "Exception");
+      model.put("contentRepresentationId", representationId);
       model.put("content", e.getRenderContent());
       model.put("contentType", CycleDefaultMimeType.HTML.getContentType());
     } catch (Exception ex) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/DbRepositorySession.java
Patch:
@@ -209,6 +209,9 @@ public ProcessDefinitionEntity findDeployedLatestProcessDefinitionByKey(String p
   }
 
   public ProcessDefinitionEntity findDeployedProcessDefinitionById(String processDefinitionId) {
+    if (processDefinitionId == null) {
+      throw new ActivitiException("Invalid process definition id : null");
+    }
     ProcessDefinitionEntity processDefinition = (ProcessDefinitionEntity) dbSqlSession.selectOne("selectProcessDefinitionById", processDefinitionId);
     if(processDefinition == null) {
       throw new ActivitiException("no deployed process definition found with id '" + processDefinitionId + "'");

File: activiti-cycle/src/main/java/org/activiti/cycle/ArtifactType.java
Patch:
@@ -46,7 +46,7 @@ public interface ArtifactType {
   
   public ParameterizedAction getParameterizedAction(String name);
 
-  public List<RepositoryArtifactOutgoingLink> createLinks(RepositoryConnector connector, RepositoryArtifact artifact);
+  public List<RepositoryArtifactOpenLinkAction> createOpenLinkActions(RepositoryConnector connector, RepositoryArtifact artifact);
 
   public List<DownloadContentAction> getDownloadContentActions();
   

File: activiti-cycle/src/main/java/org/activiti/cycle/RepositoryArtifact.java
Patch:
@@ -25,5 +25,5 @@ public interface RepositoryArtifact extends RepositoryNode {
   
   public ArtifactType getArtifactType();
   
-  public List<RepositoryArtifactOutgoingLink> getOutgoingLinks();
+  public List<RepositoryArtifactOpenLinkAction> getOpenLinkActions();
 }

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/ContentProviderImpl.java
Patch:
@@ -35,7 +35,7 @@ public Content createContent(RepositoryConnector connector, RepositoryArtifact a
 
     addValueToContent(c, connector, artifact);
     if (c.isNull()) {
-      throw new RepositoryException("No content created for artifact " + artifact.getId() + " ' by provider '" + this.getClass().getName()
+      throw new RepositoryException("No content created for artifact " + artifact.getGlobalUniqueId() + " ' by provider '" + this.getClass().getName()
               + "' (was null). Please check provider or artifact.");
     }
 

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/RepositoryFolderImpl.java
Patch:
@@ -23,8 +23,8 @@ public class RepositoryFolderImpl extends RepositoryNodeImpl implements Reposito
 
   private static final long serialVersionUID = 1L;
 
-  public RepositoryFolderImpl(String id) {
-    super(id);
+  public RepositoryFolderImpl(String connectorId, String nodeId) {
+    super(connectorId, nodeId);
   }
 
 }

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/demo/DemoConnectorConfiguration.java
Patch:
@@ -7,6 +7,7 @@ public class DemoConnectorConfiguration extends RepositoryConnectorConfiguration
   
   public DemoConnectorConfiguration(String name) {
     setName(name);
+    setId(name);
   }
 
   @Override

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/demo/action/CopyArtifactAction.java
Patch:
@@ -58,7 +58,7 @@ private void copyArtifact(RepositoryConnector sourceConnector, RepositoryConnect
     // targetName;
     // }
 
-    Content content = sourceConnector.getContent(artifact.getId(), artifact.getArtifactType().getDefaultContentRepresentation().getId());
+    Content content = sourceConnector.getContent(artifact.getOriginalNodeId(), artifact.getArtifactType().getDefaultContentRepresentation().getId());
     targetConnector.createArtifact(targetFolder, targetName, artifact.getArtifactType().getId(), content);
   }
 }

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/demo/provider/DemoProvider.java
Patch:
@@ -25,12 +25,12 @@ public String toString() {
 
   @Override
   public void addValueToContent(Content content, RepositoryConnector connector, RepositoryArtifact artifact) {
-    Map<String, byte[]> map = DemoConnector.content.get(artifact.getId());
+    Map<String, byte[]> map = DemoConnector.content.get(artifact.getOriginalNodeId());
     if (map != null) {
       content.setValue(map.get(contentRepresentationName));
       return;
     }
-    throw new RepositoryException("Couldn't find content representation '" + contentRepresentationName + "' for artifact " + artifact.getId());
+    throw new RepositoryException("Couldn't find content representation '" + contentRepresentationName + "' for artifact " + artifact.getOriginalNodeId());
   }
 
 }

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/fs/FileSystemConnector.java
Patch:
@@ -160,7 +160,7 @@ private RepositoryArtifact getArtifactInfo(File file) throws IOException {
     // TODO: We should have an extension to ArtifactType mapping somewhere
     ArtifactType artifactType = getConfiguration().getArtifactType(mimeType);
 
-    RepositoryArtifactImpl artifact = new RepositoryArtifactImpl(id, artifactType, this);
+    RepositoryArtifactImpl artifact = new RepositoryArtifactImpl(getConfiguration().getId(), id, artifactType, this);
     artifact.getMetadata().setName(file.getName());
         
     // TODO: CHECK Implementation
@@ -202,7 +202,7 @@ private RepositoryFolder getFolderInfo(File file) throws IOException {
       // root folder is again a special case
       id = "/";
     }
-    RepositoryFolderImpl folder = new RepositoryFolderImpl(id);
+    RepositoryFolderImpl folder = new RepositoryFolderImpl(getConfiguration().getId(), id);
     folder.getMetadata().setName(file.getName());
     // TODO: Implement
     // folder.getMetadata().setParentFolderId();

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/fs/provider/FileBinaryContentProvider.java
Patch:
@@ -17,7 +17,7 @@
 public class FileBinaryContentProvider extends ContentProviderImpl {
   @Override
   public void addValueToContent(Content content, RepositoryConnector connector, RepositoryArtifact artifact) {
-    String fileName = ((FileSystemConnector) connector).getConfiguration().getBasePath() + artifact.getId();
+    String fileName = ((FileSystemConnector) connector).getConfiguration().getBasePath() + artifact.getOriginalNodeId();
     File file = new File(fileName);
     FileInputStream fis = null;
 

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/fs/provider/TextFileContentProvider.java
Patch:
@@ -15,7 +15,7 @@ public class TextFileContentProvider extends ContentProviderImpl {
 
   @Override
   public void addValueToContent(Content content, RepositoryConnector connector, RepositoryArtifact artifact) {
-    String fileName = ((FileSystemConnector) connector).getConfiguration().getBasePath() + artifact.getId();
+    String fileName = ((FileSystemConnector) connector).getConfiguration().getBasePath() + artifact.getOriginalNodeId();
     File file = new File(fileName);
     try{
     	content.setValue(new FileInputStream(file));

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/fs/provider/XmlFileContentProvider.java
Patch:
@@ -18,7 +18,7 @@ public class XmlFileContentProvider extends ContentProviderImpl {
 
   @Override
   public void addValueToContent(Content content, RepositoryConnector connector, RepositoryArtifact artifact) {
-    String fileName = ((FileSystemConnector) connector).getConfiguration().getBasePath() + artifact.getId();
+    String fileName = ((FileSystemConnector) connector).getConfiguration().getBasePath() + artifact.getOriginalNodeId();
     File file = new File(fileName);
 
     try {

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/action/CreateTechnicalBpmnXmlAction.java
Patch:
@@ -86,7 +86,7 @@ public void execute(RepositoryConnector connector, RepositoryArtifact artifact,
   }
 
   protected String getBpmn20Json(RepositoryConnector connector, RepositoryArtifact artifact) {
-    return connector.getContent(artifact.getId(), SignavioPluginDefinition.CONTENT_REPRESENTATION_ID_JSON).asString();
+    return connector.getContent(artifact.getOriginalNodeId(), SignavioPluginDefinition.CONTENT_REPRESENTATION_ID_JSON).asString();
   }
 
   protected String applyJsonTransformations(String sourceJson) {

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/action/OpenModelerAction.java
Patch:
@@ -37,7 +37,7 @@ public OpenModelerAction() {
 
   public URL getUrl(RepositoryConnector connector, RepositoryArtifact artifact) {
     try {
-      return new URL(((SignavioConnector) connector).getConfiguration().getEditorUrl(artifact.getId()));
+      return new URL(((SignavioConnector) connector).getConfiguration().getEditorUrl(artifact.getOriginalNodeId()));
     } catch (MalformedURLException ex) {
       throw new RepositoryException("Error while creating URL for opening Signavio modeler", ex);
     }

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/action/ValidateActivitiDeployment.java
Patch:
@@ -39,7 +39,7 @@ public void execute(RepositoryConnector connector, RepositoryArtifact artifact,
     
     BpmnParser bpmnParser = new BpmnParser(expressionManager);
     // parse to validate
-    bpmnParser.createParse().sourceString(bpmnXml).name(artifact.getId()).execute();    
+    bpmnParser.createParse().sourceString(bpmnXml).name(artifact.getOriginalNodeId()).execute();    
     // That's it, now we get an exception is the file is invalid
   }
 

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/provider/EmbeddableModelProvider.java
Patch:
@@ -60,7 +60,7 @@ public JSONArray getEmbeddedModel(SignavioConnector connector, RepositoryArtifac
     embeddedModelForm.add("label", "");
     embeddedModelForm.add("mails", "");
     embeddedModelForm.add("message", "");
-    embeddedModelForm.add("sbo", artifact.getId());
+    embeddedModelForm.add("sbo", artifact.getOriginalNodeId());
     embeddedModelForm.add("type", "png");
     Representation embeddedModelRep = embeddedModelForm.getWebRepresentation();
 
@@ -171,7 +171,7 @@ public String getHmtlSnippet(SignavioConnector connector, RepositoryArtifact art
     // Creating the JSON Object for the Snippet
     JSONObject resultJsonObject = new JSONObject();
 
-    resultJsonObject.put("url", connector.getConfiguration().getModelUrl(artifact.getId()));
+    resultJsonObject.put("url", connector.getConfiguration().getModelUrl(artifact.getOriginalNodeId()));
     resultJsonObject.put("overflowX", "fit");
     resultJsonObject.put("overflowY", "fit");
     resultJsonObject.put("zoomSlider", true);
@@ -237,7 +237,7 @@ public void deleteEmbeddedModel(SignavioConnector connector, RepositoryArtifact
     try {
       Client client = connector.initClient();
 
-      Reference embeddedModelRef = new Reference(connector.getConfiguration().getSignavioUrl() + "purl/" + artifact.getId() + "/info/");
+      Reference embeddedModelRef = new Reference(connector.getConfiguration().getSignavioUrl() + "purl/" + artifact.getOriginalNodeId() + "/info/");
 
       Request embeddedModelRequest = new Request(Method.DELETE, embeddedModelRef);
 

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/provider/PngProvider.java
Patch:
@@ -25,7 +25,7 @@ public class PngProvider extends SignavioContentRepresentationProvider {
   @Override
   public void addValueToContent(Content content, SignavioConnector connector, RepositoryArtifact artifact) {
     try {
-      String modelAsPngUrl = connector.getConfiguration().getPngUrl(artifact.getId(), connector.getSecurityToken());
+      String modelAsPngUrl = connector.getConfiguration().getPngUrl(artifact.getOriginalNodeId(), connector.getSecurityToken());
       InputStream is = new URL(modelAsPngUrl).openStream();
       content.setValue(is);
     } catch (Exception ex) {

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/util/RepositoryLogHelper.java
Patch:
@@ -45,7 +45,7 @@ public static void printNodes(RepositoryConnector connector, List<RepositoryNode
   public static void logFolder(RepositoryConnector connector, String intend, RepositoryNodeCollection folder) {
     log.log(Level.INFO, intend + folder);
     for (RepositoryFolder subFolder : folder.getFolderList()) {
-      printFolder(connector, intend + "   ", connector.getChildren(subFolder.getId()));
+      printFolder(connector, intend + "   ", connector.getChildren(subFolder.getOriginalNodeId()));
     }
     for (RepositoryArtifact file : folder.getArtifactList()) {
       log.log(Level.INFO, intend + "-" + file);
@@ -60,7 +60,7 @@ public static void printFolder(RepositoryConnector connector, String intend, Rep
   public static void printNodes(RepositoryConnector connector, String intend, List<RepositoryNode> nodes) {    
     for (RepositoryNode node : nodes) {
       if (node instanceof RepositoryFolder) {
-        printFolder(connector, intend + "   ", connector.getChildren(node.getId()));
+        printFolder(connector, intend + "   ", connector.getChildren(node.getOriginalNodeId()));
       } else {
         printArtifact(intend, (RepositoryArtifact) node);
       }

File: activiti-cycle/src/test/java/org/activiti/cycle/impl/connector/fs/FileSystemConnectorTest.java
Patch:
@@ -51,7 +51,7 @@ public void testFileSystemConnector() {
 
         Collection<ContentRepresentation> contentRepresentations = artifact.getArtifactType().getContentRepresentations();
         for (ContentRepresentation contentRepresentation : contentRepresentations) {
-          System.out.println(contentRepresentation.getId() + " -> " + conn.getContent(artifact.getId(), contentRepresentation.getId()).asString());
+          System.out.println(contentRepresentation.getId() + " -> " + conn.getContent(artifact.getOriginalNodeId(), contentRepresentation.getId()).asString());
         }
       }
     }

File: activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ArtifactGet.java
Patch:
@@ -86,7 +86,7 @@ protected void executeWebScript(ActivitiRequest req, Status status, Cache cache,
     }
 
     model.put("downloads", downloads);
-    model.put("links", artifact.getOutgoingLinks());
-    model.put("artifactId", artifact.getId());
+    model.put("links", artifact.getOpenLinkActions());
+    model.put("artifactId", artifact.getCurrentPath());
   }
 }

File: activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ContentGet.java
Patch:
@@ -18,9 +18,9 @@
 import javax.servlet.http.HttpSession;
 
 import org.activiti.cycle.ContentRepresentation;
+import org.activiti.cycle.CycleDefaultMimeType;
 import org.activiti.cycle.RepositoryArtifact;
 import org.activiti.cycle.RepositoryConnector;
-import org.activiti.cycle.CycleDefaultMimeType;
 import org.activiti.cycle.impl.db.CycleServiceDbXStreamImpl;
 import org.activiti.rest.util.ActivitiRequest;
 import org.activiti.rest.util.ActivitiStreamingWebScript;
@@ -83,7 +83,7 @@ protected void executeStreamingWebScript(ActivitiRequest req, WebScriptResponse
     }
 
     // TODO: what is a good way to determine the etag? Using a fake one...
-    streamResponse(res, repositoryConnector.getContent(artifact.getId(), contentRepresentation.getId()).asInputStream(), new Date(0),
+    streamResponse(res, repositoryConnector.getContent(artifact.getCurrentPath(), contentRepresentation.getId()).asInputStream(), new Date(0),
             "W/\"647-1281077702000\"", attach, attachmentFileName, contentType);
 
   }

File: activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfiguration.java
Patch:
@@ -123,11 +123,11 @@ public static Integer parseHistoryLevel(String historyLevelText) {
 
   protected String processEngineName;
 
-  /** the configurable list which will be {@link #initializeInterceptorChain(List, ProcessEngineConfiguration) processed} to build the {@link #commandExecutorTxRequired} */
+  /** the configurable list which will be {@link #initializeInterceptorChain(List) processed} to build the {@link #commandExecutorTxRequired} */
   protected List<CommandInterceptor> commandInterceptorsTxRequired;
   /** this will be initialized during the configurationComplete() */
   protected CommandExecutor commandExecutorTxRequired;
-  /** the configurable list which will be {@link #initializeInterceptorChain(List, ProcessEngineConfiguration) processed} to build the {@link #commandExecutorTxRequiresNew} */
+  /** the configurable list which will be {@link #initializeInterceptorChain(List) processed} to build the {@link #commandExecutorTxRequiresNew} */
   protected List<CommandInterceptor> commandInterceptorsTxRequiresNew;
   /** this will be initialized during the configurationComplete() */
   protected CommandExecutor commandExecutorTxRequiresNew;

File: activiti-pvm/src/main/java/org/activiti/pvm/activity/ActivityExecution.java
Patch:
@@ -29,7 +29,7 @@ public interface ActivityExecution extends DelegateExecution {
   /* Process instance/activity/transition retrieval */
 
   /**
-   * returns the current {@link Activity} of the execution.
+   * returns the current {@link PvmActivity} of the execution.
    */
   PvmActivity getActivity();
   
@@ -51,7 +51,7 @@ public interface ActivityExecution extends DelegateExecution {
    * creates a new sub process instance.
    * The current execution will be the super execution of the created execution.
    * 
-   * @param processDefinition The {@link ProcessDefinition} of the subprocess.
+   * @param processDefinition The {@link PvmProcessDefinition} of the subprocess.
    */
   PvmProcessInstance createSubProcessInstance(PvmProcessDefinition processDefinition);
   

File: activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ContentRepresentationGet.java
Patch:
@@ -62,6 +62,7 @@ protected void executeWebScript(ActivitiRequest req, Status status, Cache cache,
         model.put("content", content);
       }
 
+      model.put("artifactId", artifactId);
       model.put("renderInfo", contentRepresentation.getRenderInfo().name());
       model.put("contentRepresentationId", contentRepresentation.getId());
       model.put("contentType", contentRepresentation.getMimeType().getContentType());

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/view/RootConnector.java
Patch:
@@ -94,7 +94,7 @@ public void commitPendingChanges(String comment) {
   private String getIdWithRepoName(RepositoryConnector connector, RepositoryNode repositoryNode) {
     String repositoryName = connector.getConfiguration().getName();
     if (!repositoryNode.getId().startsWith("/")) {
-      throw new RepositoryException("RepositoryNode id doesn't start with a slash, which is copnsidered invalid: '" + repositoryNode.getId()
+      throw new RepositoryException("RepositoryNode id doesn't start with a slash, which is considered invalid: '" + repositoryNode.getId()
               + "' in repository '" + repositoryName + "'");
     } else {
       return getRepositoryPrefix(repositoryName) + repositoryNode.getId();

File: activiti-cycle/src/test/java/org/activiti/cycle/impl/connector/demo/DemoConnectorTest.java
Patch:
@@ -101,6 +101,9 @@ public void testFirstPlay() throws Exception {
     Map<String, Object> parameters = new HashMap<String, Object>();
     parameters.put("targetName", "xxx.txt");
     parameters.put("copyCount", 2);
+    parameters.put("targetFolderConnector", conn);
+    parameters.put("targetFolder", "/demo/minutes");
+    
     conn.executeParameterizedAction(file1.getId(), CopyArtifactAction.class.getName(), parameters);
     
     List<RepositoryNode> nodes = DemoConnector.nodes;

File: activiti-cycle/src/main/java/org/activiti/cycle/ContentRepresentation.java
Patch:
@@ -4,7 +4,7 @@
 
 /**
  * Data structure for link to content, including the URL to the content, the
- * type (see {@link StandardMimeType}) and a name (which is shown in the GUI).
+ * type (see {@link CycleDefaultMimeType}) and a name (which is shown in the GUI).
  * 
  * The client URL should be normally set by the infrastructure, so a
  * {@link ContentRepresentationProvider} can concentrate on really providing the

File: activiti-cycle/src/main/java/org/activiti/cycle/MimeType.java
Patch:
@@ -16,7 +16,7 @@
  * Provides a simple interface to retrieve the content-type of artifacts and
  * their content representations.
  * 
- * See {@link StandardMimeType} for a list of standard mime-types.
+ * See {@link CycleDefaultMimeType} for a list of standard mime-types.
  * 
  * @author nils.preusker@camunda.com
  */

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/ArtifactTypeImpl.java
Patch:
@@ -28,7 +28,7 @@
 import org.activiti.cycle.RepositoryArtifactOutgoingLink;
 import org.activiti.cycle.RepositoryConnector;
 import org.activiti.cycle.RepositoryException;
-import org.activiti.cycle.StandardMimeType;
+import org.activiti.cycle.CycleDefaultMimeType;
 
 /**
  * The type specifies the type of an artifact, e.g. Signavio model, jpdl process
@@ -67,7 +67,7 @@ public class ArtifactTypeImpl implements ArtifactType {
 
   private List<DownloadContentAction> downloadContentActions; 
 
-  public ArtifactTypeImpl(String id, StandardMimeType mimeType) {
+  public ArtifactTypeImpl(String id, CycleDefaultMimeType mimeType) {
     this.id = id;
     this.mimeType = mimeType;
     this.contentRepresentationList = new ArrayList<ContentRepresentation>();

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/ContentRepresentationImpl.java
Patch:
@@ -3,13 +3,13 @@
 import java.io.Serializable;
 
 import org.activiti.cycle.RenderInfo;
-import org.activiti.cycle.StandardMimeType;
+import org.activiti.cycle.CycleDefaultMimeType;
 import org.activiti.cycle.ContentRepresentation;
 import org.activiti.cycle.MimeType;
 
 /**
  * Data structure for link to content, including the URL to the content, the
- * type (see {@link StandardMimeType}) and a name (which is shown in the GUI).
+ * type (see {@link CycleDefaultMimeType}) and a name (which is shown in the GUI).
  * 
  * The client URL should be normally set by the infrastructure, so a
  * {@link ContentRepresentationProvider} can concentrate on really providing the

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/view/RootConnector.java
Patch:
@@ -245,7 +245,7 @@ public void executeParameterizedAction(String artifactId, String actionId, Map<S
     RepositoryConnector connector = getConnectorFromUrl(artifactId);
     String repoPartOfId = getRepositoryPartOfUrl(artifactId);
     for (Entry<String, Object> parameter : new HashSet<Entry<String, Object>>(parameters.entrySet())) {
-      if (parameter.getKey().equals("targetFolderId")) {
+      if (parameter.getKey().equals("treeTarget")) {
           String targetFolderId = (String) parameter.getValue();
           parameters.put("targetFolderConnector", getConnectorFromUrl(targetFolderId));
           parameters.put("targetFolder", getRepositoryPartOfUrl(targetFolderId));

File: activiti-cycle/src/main/java/org/activiti/cycle/ArtifactType.java
Patch:
@@ -29,14 +29,14 @@ public interface ArtifactType {
 
   public String getId();
   
-  public ContentType getContentType();
+  public MimeType getMimeType();
 
   /**
    * list of {@link ContentRepresentation} in the configured order
    */
   public List<ContentRepresentation> getContentRepresentations();
 
-  // public ContentRepresentation getContentRepresentation(String id);
+  public ContentRepresentation getContentRepresentation(String id);
 
   public ContentRepresentation getDefaultContentRepresentation();  
 

File: activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ArtifactGet.java
Patch:
@@ -67,9 +67,9 @@ protected void executeWebScript(ActivitiRequest req, Status status, Cache cache,
     List<DownloadActionView> downloads = new ArrayList<DownloadActionView>();
     for (DownloadContentAction action : artifact.getArtifactType().getDownloadContentActions()) {
       try {
-        String url = wsReq.getServerPath() + wsReq.getContextPath() + "/service/content?artifactId=" + URLEncoder.encode(artifactId, "UTF-8") + "&content-type="
-                + URLEncoder.encode(action.getContentRepresentation().getContentType().getName(), "UTF-8");
-        downloads.add(new DownloadActionView(action.getId(), url, action.getContentRepresentation().getContentType().name(), action.getContentRepresentation().getId()));
+        String url = wsReq.getServerPath() + wsReq.getContextPath() + "/service/content?artifactId=" + URLEncoder.encode(artifactId, "UTF-8") + "&contentRepresentationId="
+                + URLEncoder.encode(action.getContentRepresentation().getId(), "UTF-8");
+        downloads.add(new DownloadActionView(action.getId(), url, action.getContentRepresentation().getMimeType().getContentType(), action.getContentRepresentation().getId()));
       } catch (UnsupportedEncodingException e) {
         // should never be reached as long as we use UTF-8, which is valid in
         // java on all platforms

File: activiti-engine/src/main/java/org/activiti/engine/impl/util/xml/ParseHandler.java
Patch:
@@ -56,10 +56,10 @@ public void endElement(String uri, String localName, String qName) throws SAXExc
   }
 
   public void error(SAXParseException e) {
-    parse.addProblem(e);
+    parse.addError(e);
   }
   public void fatalError(SAXParseException e) {
-    parse.addProblem(e);
+    parse.addError(e);
   }
   public void warning(SAXParseException e) {
     log.warning(e.toString());

File: activiti-engine/src/main/java/org/activiti/engine/impl/util/xml/Problem.java
Patch:
@@ -17,6 +17,7 @@
 
 /**
  * @author Tom Baeyens
+ * @author Joram Barrez
  */
 public class Problem {
 
@@ -35,6 +36,7 @@ public Problem(SAXParseException e, String resource) {
       }
       exception = exception.getCause();
     }
+    this.resource = resource;
     this.line = e.getLineNumber();
     this.column = e.getColumnNumber();
   }
@@ -47,7 +49,7 @@ public Problem(String errorMessage, String resourceName, Element element) {
       this.column = element.getColumn();
     }
   }
-
+  
   public String toString() {
     return errorMessage+(resource!=null ? " | "+resource : "")+" | line "+line+" | column "+column;
   }

File: activiti-webapp-rest/src/main/java/org/activiti/rest/api/identity/UserGet.java
Patch:
@@ -23,8 +23,7 @@
  *
  * @author Erik Winlof
  */
-public class UserGet extends ActivitiWebScript
-{
+public class UserGet extends ActivitiWebScript {
 
   /**
    * Collects details about a user for the webscript template.

File: activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ArtifactGet.java
Patch:
@@ -68,8 +68,8 @@ protected void executeWebScript(ActivitiRequest req, Status status, Cache cache,
     for (DownloadContentAction action : artifact.getArtifactType().getDownloadContentActions()) {
       try {
         String url = wsReq.getServerPath() + wsReq.getContextPath() + "/service/content?artifactId=" + URLEncoder.encode(artifactId, "UTF-8") + "&content-type="
-                + URLEncoder.encode(action.getContentRepresentation().getMimeType(), "UTF-8");
-        downloads.add(new DownloadActionView(action.getId(), url, action.getContentRepresentation().getMimeType(), action.getContentRepresentation().getId()));
+                + URLEncoder.encode(action.getContentRepresentation().getContentType().getName(), "UTF-8");
+        downloads.add(new DownloadActionView(action.getId(), url, action.getContentRepresentation().getContentType().name(), action.getContentRepresentation().getId()));
       } catch (UnsupportedEncodingException e) {
         // should never be reached as long as we use UTF-8, which is valid in
         // java on all platforms

File: activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ContentGet.java
Patch:
@@ -48,7 +48,7 @@ protected void executeStreamingWebScript(ActivitiRequest req, WebScriptResponse
 
     Collection<ContentRepresentation> representations = artifact.getArtifactType().getContentRepresentations();
     for (ContentRepresentation representation : representations) {
-      if (representation.getMimeType().equals(contentType)) {
+      if (representation.getContentType().getName().equals(contentType)) {
 
         // assuming we want to create an attachment for binary data...
         boolean attach = contentType.startsWith("application/") ? true : false;

File: activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ContentRepresentationGet.java
Patch:
@@ -40,9 +40,9 @@ protected void executeWebScript(ActivitiRequest req, Status status, Cache cache,
     try {
       for (ContentRepresentation contentRepresentation : artifact.getArtifactType().getContentRepresentations()) {
         if (contentRepresentation.getId().equals(representationId)) {
-          if (contentRepresentation.getMimeType().startsWith("image/")) {
+          if (contentRepresentation.getContentType().getName().startsWith("image/")) {
             String imageUrl = restProxyUri + "/content?artifactId=" + URLEncoder.encode(artifactId, "UTF-8")
-                    + "&content-type=" + URLEncoder.encode(contentRepresentation.getMimeType(), "UTF-8");
+                    + "&content-type=" + URLEncoder.encode(contentRepresentation.getContentType().getName(), "UTF-8");
             model.put("imageUrl", imageUrl);
           } else {
             String content = conn.getContent(artifactId, contentRepresentation.getId()).asString();

File: activiti-cycle/src/main/java/org/activiti/cycle/ArtifactType.java
Patch:
@@ -28,6 +28,8 @@
 public interface ArtifactType {
 
   public String getId();
+  
+  public ContentType getContentType();
 
   /**
    * list of {@link ContentRepresentation} in the configured order

File: activiti-cycle/src/main/java/org/activiti/cycle/ContentRepresentation.java
Patch:
@@ -25,10 +25,10 @@ public interface ContentRepresentation extends Serializable {
 	public String getId();
 
 	/**
-   * type of content as normally indicated by {@link ContentType} (e.g. text
-   * file, image, ...). Information for the client to render it correctly.
+   * Type of content (e.g. text file, image, ...). Information for the client 
+   * to render the content correctly.
    */
-  public String getMimeType();
+  public ContentType getContentType();
 	// TODO: Think about that, maybe as annotation in the Plugin-Config
   // public boolean isDownloadable();
 }

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/demo/DemoConnectorPluginDefinition.java
Patch:
@@ -27,7 +27,7 @@ public class DemoConnectorPluginDefinition implements ActivitiCyclePluginDefinit
   public static final String CONTENT_REPRESENTATION_ID_XML = "XML";
 
   public void addArtifactTypes(List<ArtifactType> types) {
-    ArtifactTypeImpl artifactType1 = new ArtifactTypeImpl(ARTIFACT_TYPE_TEXT);
+    ArtifactTypeImpl artifactType1 = new ArtifactTypeImpl(ARTIFACT_TYPE_TEXT, ContentType.TEXT);
     artifactType1.addDefaultContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_TEXT, ContentType.TEXT), new DemoProvider(
             CONTENT_REPRESENTATION_ID_TEXT));
     artifactType1.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_EXCEPTION, ContentType.TEXT), new ExceptionProvider());
@@ -36,14 +36,14 @@ public void addArtifactTypes(List<ArtifactType> types) {
     artifactType1.addDownloadContentAction(CONTENT_REPRESENTATION_ID_TEXT);
     types.add(artifactType1);
 
-    ArtifactTypeImpl artifactType2 = new ArtifactTypeImpl(ARTIFACT_TYPE_MINDMAP);
+    ArtifactTypeImpl artifactType2 = new ArtifactTypeImpl(ARTIFACT_TYPE_MINDMAP, ContentType.XML);
     artifactType2.addDefaultContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_TEXT, ContentType.TEXT), new DemoProvider(
             CONTENT_REPRESENTATION_ID_TEXT));
     artifactType2.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_PNG, ContentType.PNG), new DemoProvider(
             CONTENT_REPRESENTATION_ID_PNG));
     types.add(artifactType2);
 
-    ArtifactTypeImpl artifactType3 = new ArtifactTypeImpl(ARTIFACT_TYPE_BPMN_20);
+    ArtifactTypeImpl artifactType3 = new ArtifactTypeImpl(ARTIFACT_TYPE_BPMN_20, ContentType.XML);
     artifactType3.addDefaultContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_XML, ContentType.TEXT), new DemoProvider(
             CONTENT_REPRESENTATION_ID_XML));
     artifactType3.addParameterizedAction(new CopyArtifactAction());

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/SignavioPluginDefinition.java
Patch:
@@ -59,7 +59,7 @@ public void addArtifactTypes(List<ArtifactType> types) {
     // SignavioConnector.SIGNAVIO_NAMESPACE_FOR_BPMN_JBPM4));
 
    
-    ArtifactTypeImpl artifactType1 = new ArtifactTypeImpl(ARTIFACT_TYPE_BPMN_20);
+    ArtifactTypeImpl artifactType1 = new ArtifactTypeImpl(ARTIFACT_TYPE_BPMN_20, ContentType.XML);
     artifactType1.addDefaultContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_PNG, ContentType.PNG), new PngProvider());
     artifactType1.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_BPMN_20_DEVELOPER, ContentType.XML),
             new ActivitiCompliantBpmn20Provider());
@@ -75,7 +75,7 @@ public void addArtifactTypes(List<ArtifactType> types) {
     types.add(artifactType1);
    
    
-    ArtifactTypeImpl artifactType2 = new ArtifactTypeImpl(ARTIFACT_TYPE_BPMN_FOR_JPDL4);
+    ArtifactTypeImpl artifactType2 = new ArtifactTypeImpl(ARTIFACT_TYPE_BPMN_FOR_JPDL4, ContentType.XML);
     artifactType2.addDefaultContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_PNG, ContentType.PNG), new PngProvider());
     artifactType2.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_JPDL4, ContentType.XML), new Jpdl4Provider());
     artifactType2.addContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_JSON, ContentType.XML), new JsonProvider());
@@ -89,7 +89,7 @@ public void addArtifactTypes(List<ArtifactType> types) {
     // initialize RepositoryRegistry with supported formats?
 
     // TODO: Check if really any artifact in Signavio has a PNG?
-    ArtifactTypeImpl artifactTypeDefault = new ArtifactTypeImpl(ARTIFACT_TYPE_DEFAULT);
+    ArtifactTypeImpl artifactTypeDefault = new ArtifactTypeImpl(ARTIFACT_TYPE_DEFAULT, ContentType.XML);
     artifactTypeDefault.addDefaultContentRepresentation(new ContentRepresentationImpl(CONTENT_REPRESENTATION_ID_PNG, ContentType.PNG), new PngProvider());
     types.add(artifactTypeDefault);
   }

File: activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ContentRepresentationGet.java
Patch:
@@ -32,6 +32,7 @@ protected void executeWebScript(ActivitiRequest req, Status status, Cache cache,
 
     String artifactId = req.getString("artifactId");
     String representationId = req.getString("representationId");
+    String restProxyUri = req.getString("restProxyUri");
 
     RepositoryArtifact artifact = conn.getRepositoryArtifact(artifactId);
 
@@ -40,7 +41,7 @@ protected void executeWebScript(ActivitiRequest req, Status status, Cache cache,
       for (ContentRepresentation contentRepresentation : artifact.getArtifactType().getContentRepresentations()) {
         if (contentRepresentation.getId().equals(representationId)) {
           if (contentRepresentation.getMimeType().startsWith("image/")) {
-            String imageUrl = wsReq.getServerPath() + wsReq.getContextPath() + "/service/content?artifactId=" + URLEncoder.encode(artifactId, "UTF-8")
+            String imageUrl = restProxyUri + "/content?artifactId=" + URLEncoder.encode(artifactId, "UTF-8")
                     + "&content-type=" + URLEncoder.encode(contentRepresentation.getMimeType(), "UTF-8");
             model.put("imageUrl", imageUrl);
           } else {

File: activiti-engine/src/test/java/org/activiti/engine/test/el/ExpressionManagerTest.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * @author Frederik Heremans
  */
-public class ELTest extends ActivitiInternalTestCase {
+public class ExpressionManagerTest extends ActivitiInternalTestCase {
   
   @Override
   protected void setUp() throws Exception {

File: activiti-engine/src/main/java/org/activiti/engine/impl/cmd/DeployCmd.java
Patch:
@@ -58,18 +58,18 @@ protected boolean deploymentsDiffer(DeploymentEntity deployment, DeploymentEntit
     Map<String, ResourceEntity> resources = deployment.getResources();
     Map<String, ResourceEntity> savedResources = saved.getResources();
     if (!resources.keySet().equals(savedResources.keySet())) {
-      return false;
+      return true;
     }
     for (String resourceName: resources.keySet()) {
       ResourceEntity resource = resources.get(resourceName);
       byte[] bytes = resource.getBytes();
       ResourceEntity savedResource = savedResources.get(resourceName);
       byte[] savedBytes = savedResource.getBytes();
       if (!Arrays.equals(bytes, savedBytes)) {
-        return false;
+        return true;
       }
     }
-    return true;
+    return false;
   }
 
 //  private boolean resourcesDiffer(ByteArrayEntity value, ByteArrayEntity other) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -61,6 +61,7 @@
 import org.activiti.engine.impl.util.xml.Element;
 import org.activiti.engine.impl.util.xml.Parse;
 import org.activiti.engine.impl.variable.VariableDeclaration;
+import org.activiti.engine.impl.webservice.WSDLImporter;
 import org.activiti.pvm.activity.ActivityBehavior;
 import org.activiti.pvm.impl.process.ActivityImpl;
 import org.activiti.pvm.impl.process.ProcessDefinitionImpl;
@@ -160,7 +161,7 @@ public class BpmnParse extends Parse {
     this.parseListeners = parser.getParseListeners();
     setSchemaResource(BpmnParser.SCHEMA_RESOURCE);
     
-   // this.importers.put("http://schemas.xmlsoap.org/wsdl/", new WSDLImporter());
+    this.importers.put("http://schemas.xmlsoap.org/wsdl/", new WSDLImporter());
   }
 
   @Override

File: activiti-engine/src/main/java/org/activiti/engine/impl/webservice/WSDLImporter.java
Patch:
@@ -37,6 +37,7 @@
 import org.activiti.engine.impl.bpmn.Structure;
 import org.activiti.engine.impl.bpmn.parser.BpmnParse;
 import org.activiti.engine.impl.bpmn.parser.XMLImporter;
+import org.apache.xerces.parsers.DOMParser;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 import org.w3c.dom.NodeList;
@@ -49,7 +50,6 @@
 import com.sun.tools.xjc.api.Mapping;
 import com.sun.tools.xjc.api.S2JJAXBModel;
 import com.sun.tools.xjc.api.SchemaCompiler;
-import com.sun.tools.xjc.api.TypeAndAnnotation;
 import com.sun.tools.xjc.api.XJC;
 
 /**
@@ -203,7 +203,7 @@ private void createDefaultStructures(Element rootTypes) {
 
   private Element getRootTypes() {
     try {
-      com.sun.org.apache.xerces.internal.parsers.DOMParser parser = new com.sun.org.apache.xerces.internal.parsers.DOMParser();
+      DOMParser parser = new DOMParser();
       parser.parse(this.wsdlLocation);
       Document doc = parser.getDocument();
       Element root = (Element) doc.getFirstChild();

File: activiti-rest/src/main/java/org/activiti/rest/api/cycle/ActionExecutionPut.java
Patch:
@@ -9,8 +9,6 @@
 import org.activiti.rest.util.ActivitiWebScript;
 import org.springframework.extensions.webscripts.Cache;
 import org.springframework.extensions.webscripts.Status;
-import org.springframework.extensions.webscripts.WebScriptRequest;
-import org.springframework.extensions.webscripts.servlet.WebScriptServletRequest;
 
 public class ActionExecutionPut extends ActivitiWebScript {
 

File: activiti-rest/src/main/java/org/activiti/rest/api/cycle/ArtifactActionFormGet.java
Patch:
@@ -12,8 +12,6 @@
 import org.springframework.extensions.webscripts.Cache;
 import org.springframework.extensions.webscripts.Status;
 import org.springframework.extensions.webscripts.WebScriptException;
-import org.springframework.extensions.webscripts.WebScriptRequest;
-import org.springframework.extensions.webscripts.servlet.WebScriptServletRequest;
 
 public class ArtifactActionFormGet extends ActivitiWebScript {
 

File: activiti-rest/src/main/java/org/activiti/rest/api/cycle/TreeGet.java
Patch:
@@ -28,8 +28,6 @@
 import org.activiti.rest.util.ActivitiWebScript;
 import org.springframework.extensions.webscripts.Cache;
 import org.springframework.extensions.webscripts.Status;
-import org.springframework.extensions.webscripts.WebScriptRequest;
-import org.springframework.extensions.webscripts.servlet.WebScriptServletRequest;
 
 /**
  * @author Nils Preusker

File: activiti-rest/src/main/java/org/activiti/rest/api/cycle/dto/ContentView.java
Patch:
@@ -15,6 +15,7 @@
 /**
  * @author Nils Preusker
  */
+@Deprecated
 public class ContentView {
 
   private String key;

File: activiti-rest/src/main/java/org/activiti/rest/util/ActivitiStreamingWebScript.java
Patch:
@@ -71,7 +71,7 @@ public void execute(WebScriptRequest req, WebScriptResponse res) throws IOExcept
    * @param req The activiti request
    * @param res The webscript response
    */
-  protected void executeStreamingWebScript(ActivitiRequest req, WebScriptResponse res) {
+  protected void executeStreamingWebScript(ActivitiRequest req, WebScriptResponse res) throws IOException {
     // Override to make something useful
   }
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -61,7 +61,6 @@
 import org.activiti.engine.impl.util.xml.Element;
 import org.activiti.engine.impl.util.xml.Parse;
 import org.activiti.engine.impl.variable.VariableDeclaration;
-import org.activiti.engine.impl.webservice.WSDLImporter;
 import org.activiti.pvm.activity.ActivityBehavior;
 import org.activiti.pvm.impl.process.ActivityImpl;
 import org.activiti.pvm.impl.process.ProcessDefinitionImpl;
@@ -160,7 +159,7 @@ public class BpmnParse extends Parse {
     this.parseListeners = parser.getParseListeners();
     setSchemaResource(BpmnParser.SCHEMA_RESOURCE);
     
-    this.importers.put("http://schemas.xmlsoap.org/wsdl/", new WSDLImporter());
+   // this.importers.put("http://schemas.xmlsoap.org/wsdl/", new WSDLImporter());
   }
 
   @Override

File: activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/ProcessInstanceQueryTest.java
Patch:
@@ -143,7 +143,7 @@ public void testQueryByInvalidSubProcessInstanceId() {
   }
   
   // Nested subprocess make the query complexer, hence this test
-  @Deployment(resources = {"org/activiti/engine/test/api/runtime/nestedSuperProcess.bpmn20.xml",
+  @Deployment(resources = {"org/activiti/engine/test/api/runtime/superProcessWithNestedSubProcess.bpmn20.xml",
                            "org/activiti/engine/test/api/runtime/nestedSubProcess.bpmn20.xml",
                            "org/activiti/engine/test/api/runtime/subProcess.bpmn20.xml"})
   public void testQueryBySuperProcessInstanceIdNested() {
@@ -157,7 +157,7 @@ public void testQueryBySuperProcessInstanceIdNested() {
   }
   
   //Nested subprocess make the query complexer, hence this test
-  @Deployment(resources = {"org/activiti/engine/test/api/runtime/nestedSuperProcess.bpmn20.xml",
+  @Deployment(resources = {"org/activiti/engine/test/api/runtime/superProcessWithNestedSubProcess.bpmn20.xml",
           "org/activiti/engine/test/api/runtime/nestedSubProcess.bpmn20.xml",
           "org/activiti/engine/test/api/runtime/subProcess.bpmn20.xml"})
   public void testQueryBySubProcessInstanceIdNested() {

File: activiti-engine/src/main/java/org/activiti/engine/impl/task/TaskEntity.java
Patch:
@@ -45,7 +45,7 @@ public class TaskEntity implements Task, Serializable, PersistentObject {
   protected String name;
   protected String description;
   protected String formResourceKey;
-  protected Integer priority;
+  protected int priority = Task.PRIORITY_NORMAL;
   protected Date createTime; // The time when the task has been created
   protected boolean isTaskInvolvementsInitialized = false;
   protected List<TaskInvolvementEntity> taskInvolvementEntities = new ArrayList<TaskInvolvementEntity>(); 
@@ -276,11 +276,11 @@ public void setDescription(String description) {
     this.description = description;
   }
 
-  public Integer getPriority() {
+  public int getPriority() {
     return priority;
   }
 
-  public void setPriority(Integer priority) {
+  public void setPriority(int priority) {
     this.priority = priority;
   }
 

File: activiti-engine/src/test/java/org/activiti/engine/test/api/task/TaskServiceTest.java
Patch:
@@ -43,7 +43,7 @@ public void testSaveTaskUpdate() {
     task = taskService.createTaskQuery().taskId(task.getId()).singleResult();
     assertEquals("description", task.getDescription());
     assertEquals("taskname", task.getName());
-    assertEquals(0, task.getPriority().intValue());
+    assertEquals(0, task.getPriority());
 
     task.setDescription("updateddescription");
     task.setName("updatedtaskname");
@@ -53,7 +53,7 @@ public void testSaveTaskUpdate() {
     task = taskService.createTaskQuery().taskId(task.getId()).singleResult();
     assertEquals("updateddescription", task.getDescription());
     assertEquals("updatedtaskname", task.getName());
-    assertEquals(1, task.getPriority().intValue());
+    assertEquals(1, task.getPriority());
 
     // Finally, delete task
     taskService.deleteTask(task.getId());
@@ -565,7 +565,7 @@ public void testSetPriority() {
     
     // Fetch task again to check if the priority is set
     task = taskService.createTaskQuery().taskId(task.getId()).singleResult();
-    assertEquals(12345, task.getPriority().intValue());
+    assertEquals(12345, task.getPriority());
     
     taskService.deleteTask(task.getId());
   }

File: activiti-engine/src/main/java/org/activiti/engine/ProcessEngineBuilder.java
Patch:
@@ -24,7 +24,7 @@
  * To build a ProcessEngine that's using a h2 database over a TCP connection:
  * 
  * <pre>
- * ProcessEngine processEngine = DbProcessEngineBuilder
+ * ProcessEngine processEngine = ProcessEngineBuilder
  *   .setDatabaseName(&quot;h2&quot;)
  *   .setJdbcDriver(&quot;org.h2.Driver&quot;)
  *   .setJdbcUrl(&quot;jdbc:h2:tcp://localhost/activiti&quot;)
@@ -37,7 +37,7 @@
  * To build a ProcessEngine that's using a h2 in memory database:
  * 
  * <pre>
- * ProcessEngine processEngine = DbProcessEngineBuilder
+ * ProcessEngine processEngine = ProcessEngineBuilder
  *   .setDatabaseName(&quot;h2&quot;)
  *   .setJdbcDriver(&quot;org.h2.Driver&quot;)
  *   .setJdbcUrl(&quot;jdbc:h2:mem:activiti&quot;)

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/SignavioConnector.java
Patch:
@@ -260,6 +260,9 @@ private ArtifactType getArtifactTypeForSignavioArtifact(JSONObject json) throws
       if (SignavioPluginDefinition.ORYX_TYPE_ATTRIBUTE_FOR_BPMN_20.equals(type)) {
         artifactTypeID = SignavioPluginDefinition.ARTIFACT_TYPE_BPMN_20;
       }
+      else if (SignavioPluginDefinition.SIGNAVIO_NAMESPACE_FOR_BPMN_2_0.equals(type)) {
+        artifactTypeID = SignavioPluginDefinition.ARTIFACT_TYPE_BPMN_20;
+      }
     }
     return getConfiguration().getArtifactType(artifactTypeID);
   }

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/view/CustomizedViewConnector.java
Patch:
@@ -245,6 +245,7 @@ public void executeParameterizedAction(String artifactId, String actionId, Map<S
           // folder id, I think the best for the moment.
           String targetFolderId = (String) parameter.getValue();
           parameters.put("targetFolderConnector", getConnectorFromUrl(targetFolderId));
+          parameters.put("targetFolder", getRepositoryPartOfUrl(targetFolderId));
           
         } else if (parameter.getValue() instanceof RepositoryFolder) {
           throw new IllegalStateException("TArget Folder shouldn't be resolved by GUI any more");

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/transform/signavio/ExchangeSignavioUuidWithNameTransformation.java
Patch:
@@ -49,8 +49,6 @@ private void adjustShapeNames(List<Shape> shapes, Set<String> existingNames) {
             counter++;
           }
           newName = newName + "_" + counter;
-        } else {
-          System.out.println(shape);
         }
   
         existingNames.add(newName);

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/fs/FileSystemConnector.java
Patch:
@@ -180,6 +180,7 @@ private String getMimeType(File file) {
     String extension = MimeUtil.getExtension(file);
     
     // so we overwrite it with a temporary hack
+    // But this cannot recognize *.bpmn20.xml :-/
     String name = file.getName();
     if (name.indexOf(".") > 0) {
       return name.substring(name.lastIndexOf(".") + 1);

File: activiti-rest/src/main/java/org/activiti/rest/api/cycle/ArtifactGet.java
Patch:
@@ -58,7 +58,7 @@ protected void executeWebScript(WebScriptRequest req, Status status, Cache cache
         if (representation.getMimeType().equals(ContentType.TEXT) || representation.getMimeType().equals(ContentType.XML)
                 || representation.getMimeType().equals(ContentType.HTML)) {
           String content = conn.getContent(artifactId, representation.getId()).asString();
-          contentViews.add(new ContentView(representation.getMimeType(), representation.getMimeType(), content));
+          contentViews.add(new ContentView(representation.getMimeType(), representation.getId(), content));
         } else if (representation.getMimeType().startsWith("image/")) {
           String url = req.getServerPath() + req.getContextPath() + "/service/content?artifactId=" + URLEncoder.encode(artifactId, "UTF-8") + "&content-type="
                   + URLEncoder.encode(representation.getMimeType(), "UTF-8");

File: activiti-rest/src/main/java/org/activiti/rest/api/cycle/TreeGet.java
Patch:
@@ -53,6 +53,7 @@ protected void executeWebScript(WebScriptRequest req, Status status, Cache cache
 
         model.put("files", children.getArtifactList());
         model.put("folders", children.getFolderList());
+        return;
 
       } catch (RepositoryException e) {
         log.log(Level.SEVERE, "Cannot load children for id '" + id + "'", e);

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/SignavioConnector.java
Patch:
@@ -294,7 +294,8 @@ public List<RepositoryNode> getChildNodes(String parentId) {
 
   private ArrayList<RepositoryNode> getModelsFromOryxBackend() throws IOException, JSONException {
     ArrayList<RepositoryNode> nodes = new ArrayList<RepositoryNode>();
-    Response filterResponse = getJsonResponse(getConfiguration().getRepositoryBackendUrl() + "filter?sort=rating");
+    // extracts only BPMN 2.0 models, since everything else is more or less unsupported
+    Response filterResponse = getJsonResponse(getConfiguration().getRepositoryBackendUrl() + "filter?type=http%3A%2F%2Fb3mn.org%2Fstencilset%2Fbpmn2.0%23&sort=rating");
     JsonRepresentation jsonRepresentation = new JsonRepresentation(filterResponse.getEntity());
     JSONArray modelRefs = jsonRepresentation.toJsonArray();
     for (int i = 0; i < modelRefs.length(); i++) {

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/SignavioConnectorConfiguration.java
Patch:
@@ -38,12 +38,12 @@ public class SignavioConnectorConfiguration extends PasswordEnabledRepositoryCon
   private boolean loginRequired = false;
 
   // these values differ between Oryx and Signavio
-  private static String REPOSITORY_BACKEND_URL_SUFFIX = "p/";
+  protected static String REPOSITORY_BACKEND_URL_SUFFIX = "p/";
   protected static String EDITOR_BACKEND_URL_SUFFIX = "editor/";
+  protected static String EDITOR_URL_SUFFIX = "editor?id=";
 
   public static String REGISTRATION_URL_SUFFIX = "register/";
   public static String LOGIN_URL_SUFFIX = "login/";
-  public static String EDITOR_URL_SUFFIX = "editor?id=";
   public static String EXPLORER_URL_SUFFIX = "explorer/";
   public static String MODEL_URL_SUFFIX = "model";
   public static String DIRECTORY_URL_SUFFIX = "directory";

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/OryxConnectorConfiguration.java
Patch:
@@ -22,10 +22,12 @@ public OryxConnectorConfiguration(String name, String signavioBaseUrl) {
     super(name, signavioBaseUrl);
   }
 
-  public static String getRepositoryBackendUrlSuffix() {
+  @Override
+  public String getRepositoryBackendUrlSuffix() {
     return REPOSITORY_BACKEND_URL_SUFFIX;
   }
 
+  @Override
   public String getEditorBackendUrlSuffix() {
     return EDITOR_BACKEND_URL_SUFFIX;
   }

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/SignavioConnectorConfiguration.java
Patch:
@@ -209,7 +209,7 @@ public String getModelInfoUrl(String modelId) {
     return getModelUrl(modelId) + "/" + MODEL_INFO_URL_SUFFIX;
   }
 
-  public static String getRepositoryBackendUrlSuffix() {
+  public String getRepositoryBackendUrlSuffix() {
     return REPOSITORY_BACKEND_URL_SUFFIX;
   }
 

File: activiti-engine/src/main/java/org/activiti/engine/TaskService.java
Patch:
@@ -16,8 +16,8 @@
 import java.util.List;
 import java.util.Map;
 
-import org.activiti.engine.impl.task.TaskInvolvementType;
 import org.activiti.engine.task.Task;
+import org.activiti.engine.task.TaskInvolvementType;
 import org.activiti.engine.task.TaskQuery;
 
 /** provides access to {@link Task} related operations.

File: activiti-engine/src/main/java/org/activiti/engine/impl/TaskServiceImpl.java
Patch:
@@ -28,8 +28,8 @@
 import org.activiti.engine.impl.cmd.SetTaskPriorityCmd;
 import org.activiti.engine.impl.interceptor.CommandExecutor;
 import org.activiti.engine.impl.task.TaskEntity;
-import org.activiti.engine.impl.task.TaskInvolvementType;
 import org.activiti.engine.task.Task;
+import org.activiti.engine.task.TaskInvolvementType;
 import org.activiti.engine.task.TaskQuery;
 
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/cmd/AddTaskInvolvementCmd.java
Patch:
@@ -18,7 +18,7 @@
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.task.TaskEntity;
 import org.activiti.engine.impl.task.TaskInvolvementEntity;
-import org.activiti.engine.impl.task.TaskInvolvementType;
+import org.activiti.engine.task.TaskInvolvementType;
 
 
 /**

File: activiti-engine/src/main/java/org/activiti/engine/impl/scripting/ScriptCondition.java
Patch:
@@ -16,7 +16,6 @@
 import org.activiti.engine.impl.bpmn.Condition;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.pvm.delegate.DelegateExecution;
-import org.activiti.pvm.impl.runtime.ExecutionImpl;
 
 /**
  * @author Tom Baeyens

File: activiti-engine/src/main/java/org/activiti/engine/impl/task/TaskEntity.java
Patch:
@@ -27,6 +27,7 @@
 import org.activiti.engine.impl.runtime.ExecutionEntity;
 import org.activiti.engine.impl.util.ClockUtil;
 import org.activiti.engine.task.Task;
+import org.activiti.engine.task.TaskInvolvementType;
 import org.activiti.pvm.delegate.DelegateExecution;
 
 /**

File: activiti-engine/src/main/java/org/activiti/engine/task/TaskInvolvementType.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.impl.task;
+package org.activiti.engine.task;
 
 
 /**

File: activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessDefinitionFormGet.java
Patch:
@@ -33,11 +33,11 @@ protected void executeWebScript(WebScriptRequest req, Status status, Cache cache
         model.put("form", processDefinitionForm);
       }
       else {
-        throw new WebScriptException(Status.STATUS_NOT_IMPLEMENTED, "The form for process definitionForm '" + processDefinitionForm + "' cannot be rendered using the rest api.");
+        throw new WebScriptException(Status.STATUS_NOT_IMPLEMENTED, "The form for process definition '" + processDefinitionId + "' cannot be rendered using the rest api.");
       }
     }
     else {
-      throw new WebScriptException(Status.STATUS_NOT_FOUND, "There is no form for process definitionForm '" + processDefinitionForm + "'.");
+      throw new WebScriptException(Status.STATUS_NOT_FOUND, "There is no form for process definition '" + processDefinitionId + "'.");
     }
   }
 }

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/action/CreateTechnicalBpmnXmlAction.java
Patch:
@@ -85,7 +85,7 @@ protected String applyJsonTransformations(String sourceJson) {
       JSONObject jsonObject = new JSONObject(sourceJson);
 
       for (JsonTransformation trafo : registeredTransformations) {
-        trafo.transform(jsonObject);
+        jsonObject = trafo.transform(jsonObject);
       }
 
       return jsonObject.toString();

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/action/CreateTechnicalBpmnXmlAction.java
Patch:
@@ -45,7 +45,7 @@ public class CreateTechnicalBpmnXmlAction extends ParametrizedFreemakerTemplateA
      // TODO: How to register JSON-Transformations
 
     // example with cutting out just the Engine Pool
-    addTransformation(new BpmnPoolExtraction("Engine Pool"));
+    addTransformation(new BpmnPoolExtraction("Process Engine"));
     addTransformation(new ExchangeSignavioUuidWithNameTransformation());
     addTransformation(new AdjustShapeNamesTransformation());
   }

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/provider/ActivitiCompliantBpmn20Provider.java
Patch:
@@ -39,7 +39,7 @@ public void addValueToContent(Content content, RepositoryArtifact artifact) {
       Response jsonResponse = getJsonResponse(artifact, "/json");
       JSONObject jsonData = new JSONObject(jsonResponse.getEntity().getText());
 
-      jsonData = new BpmnPoolExtraction("Engine Pool").transform(jsonData);
+      jsonData = new BpmnPoolExtraction("Process Engine").transform(jsonData);
       jsonData = new AdjustShapeNamesTransformation().transform(jsonData);
       jsonData = new ExchangeSignavioUuidWithNameTransformation().transform(jsonData);
 

File: activiti-engine/src/main/java/org/activiti/engine/SortOrder.java
Patch:
@@ -18,6 +18,8 @@
  */
 public enum SortOrder {
 
+  // TODO fix the sort ordering http://jira.codehaus.org/browse/ACT-100
+
   ASC,
   DESC;
   

File: activiti-engine/src/main/java/org/activiti/engine/impl/TablePageQueryImpl.java
Patch:
@@ -61,8 +61,11 @@ public String getTableName() {
   }
 
   protected void addOrder(String column, String sortOrder) {
+    
+    // TODO fix the sort ordering http://jira.codehaus.org/browse/ACT-100
     this.sortColumn = column;
     this.sortOrder = sortOrder;
+    
     if (orderBy==null) {
       orderBy = "";
     } else {

File: activiti-engine/src/main/java/org/activiti/engine/impl/db/DbManagementSession.java
Patch:
@@ -100,6 +100,8 @@ public TablePage getTablePage(TablePageQueryImpl tablePageQuery, int firstResult
     tablePage.setRows(tableData);
     tablePage.setFirstResult(firstResult);
     tablePage.setSort(tablePageQuery.getSortColumn());
+
+    // TODO fix the sort ordering http://jira.codehaus.org/browse/ACT-100
     String sortOrderString = tablePageQuery.getSortOrder();
     if (AbstractQuery.SORTORDER_ASC.equals(sortOrderString)) {
       tablePage.setOrder(SortOrder.ASC);

File: activiti-engine/src/main/java/org/activiti/engine/TablePage.java
Patch:
@@ -30,7 +30,7 @@ public class TablePage {
   /**
    * The total number of rows in the table.
    */
-  protected long total = -1;;
+  protected long total = -1;
   
   /**
    * Identifies the index of the first result stored in this TablePage. 
@@ -40,7 +40,7 @@ public class TablePage {
   protected long firstResult;
   
   /**
-   * Indicates the key or column on which the signalData is sorted.
+   * Indicates the key or column on which the rows are sorted.
    */
   protected String sort;
   

File: activiti-engine/src/main/java/org/activiti/engine/impl/AbstractQuery.java
Patch:
@@ -28,8 +28,8 @@
  */
 public abstract class AbstractQuery<T> implements Command<Object>{
   
-  protected static final String SORTORDER_ASC = "asc";
-  protected static final String SORTORDER_DESC = "desc";
+  public static final String SORTORDER_ASC = "asc";
+  public static final String SORTORDER_DESC = "desc";
   
   private static enum ResultType {
     LIST, LIST_PAGE, SINGLE_RESULT, COUNT

File: activiti-engine/src/main/java/org/activiti/engine/test/ProcessEngineTestCase.java
Patch:
@@ -57,7 +57,7 @@ public class ProcessEngineTestCase extends PvmTestCase {
   private static Logger log = Logger.getLogger(ProcessEngineTestCase.class.getName());
 
   private static final List<String> TABLENAMES_EXCLUDED_FROM_DB_CLEAN_CHECK = Arrays.asList(
-    "ACT_PROPERTY"
+    "ACT_GE_PROPERTY"
   );
 
   static final String DEFAULT_CONFIGURATION_RESOURCE = "activiti.properties";

File: activiti-cycle/src/main/java/org/activiti/cycle/impl/connector/signavio/action/CreateTechnicalBpmnXmlAction.java
Patch:
@@ -70,7 +70,7 @@ public void execute(Map<String, Object> parameters) throws Exception {
     String sourceJson = getBpmn20Json();
     String transformedJson = applyJsonTransformations(sourceJson);
     String bpmnXml = transformToBpmn20(transformedJson);
-    createTargetArtifact(targetFolder, targetName + ".bpmn.xml", bpmnXml, SignavioConnector.BPMN_2_0_XML);
+    createTargetArtifact(targetFolder, targetName + ".bpmn20.xml", bpmnXml, SignavioConnector.BPMN_2_0_XML);
 
     // TODO: Think about that more, does it make sense like this?
     targetFolder.getConnector().commitPendingChanges(comment);

File: activiti-rest/src/main/java/org/activiti/rest/api/cycle/ArtifactGet.java
Patch:
@@ -77,7 +77,7 @@ protected void executeWebScript(WebScriptRequest req, Status status, Cache cache
       try {
         String url = req.getServerPath() + req.getContextPath() + "/service/content?artifactId=" + URLEncoder.encode(artifactId, "UTF-8") + "&content-type="
                 + URLEncoder.encode(action.getDefiniton().getType(), "UTF-8");
-        downloads.add(new DownloadActionView(action.getLabel(), url, action.getDefiniton().getType()));
+        downloads.add(new DownloadActionView(action.getLabel(), url, action.getDefiniton().getType(), action.getDefiniton().getName()));
       } catch (UnsupportedEncodingException e) {
         // should never be reached as long as we use UTF-8, which is valid in
         // java on all platforms

File: activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessDefinitionFormGet.java
Patch:
@@ -26,7 +26,7 @@ public class ProcessDefinitionFormGet extends ActivitiWebScript {
   @Override
   protected void executeWebScript(WebScriptRequest req, Status status, Cache cache, Map<String, Object> model)
   {
-    String processDefinitionId = getMandatoryPathParameter(req, "processInstanceId");
+    String processDefinitionId = getMandatoryPathParameter(req, "processDefinitionId");
     Object processDefinitionForm = getRepositoryService().getStartFormById(processDefinitionId);
     if (processDefinitionForm != null) {
       if (processDefinitionForm instanceof String) {

File: activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessInstancePost.java
Patch:
@@ -40,9 +40,9 @@ public class ProcessInstancePost extends ActivitiWebScript
   protected void executeWebScript(WebScriptRequest req, Status status, Cache cache, Map<String, Object> model)
   {
     ActivitiWebScriptBody body = getBody(req);
-    String processDefinitionId = getMandatoryString(body, "processInstanceId");
+    String processDefinitionId = getMandatoryString(body, "processDefinitionId");
     Map<String, Object> variables = getFormVariables(body);
-    variables.remove("processInstanceId");
+    variables.remove("processDefinitionId");
     model.put("instance", getRuntimeService().startProcessInstanceById(processDefinitionId, variables));
   }
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/ManagementServiceImpl.java
Patch:
@@ -14,15 +14,13 @@
 
 import java.util.Map;
 
-import org.activiti.engine.Job;
 import org.activiti.engine.JobQuery;
 import org.activiti.engine.ManagementService;
 import org.activiti.engine.TableMetaData;
 import org.activiti.engine.TablePageQuery;
 import org.activiti.engine.impl.cmd.ExecuteJobCmd;
 import org.activiti.engine.impl.cmd.GetTableCountCmd;
 import org.activiti.engine.impl.cmd.GetTableMetaDataCmd;
-import org.activiti.engine.impl.interceptor.CommandExecutor;
 
 
 /**

File: activiti-engine/src/main/java/org/activiti/engine/impl/RepositoryServiceImpl.java
Patch:
@@ -26,7 +26,6 @@
 import org.activiti.engine.impl.cmd.FindDeploymentResourceNamesCmd;
 import org.activiti.engine.impl.cmd.FindDeploymentsCmd;
 import org.activiti.engine.impl.cmd.FindProcessDefinitionCmd;
-import org.activiti.engine.impl.cmd.FindProcessDefinitionsCmd;
 import org.activiti.engine.impl.cmd.GetDeploymentResourceCmd;
 import org.activiti.engine.impl.cmd.GetFormCmd;
 import org.activiti.engine.impl.persistence.repository.DeploymentBuilderImpl;

File: activiti-pvm/src/test/java/org/activiti/test/pvm/activities/EmbeddedSubProcess.java
Patch:
@@ -41,9 +41,10 @@ public void execute(ActivityExecution execution) throws Exception {
     }
   }
 
+  @SuppressWarnings("unchecked")
   public void lastExecutionEnded(ActivityExecution execution) {
     List<PvmTransition> outgoingTransitions = execution.getActivity().getOutgoingTransitions();
-    execution.takeAll(outgoingTransitions, new ArrayList<ActivityExecution>());
+    execution.takeAll(outgoingTransitions, Collections.EMPTY_LIST);
   }
 
 

File: activiti-engine/src/main/java/org/activiti/engine/ManagementService.java
Patch:
@@ -50,4 +50,7 @@ public interface ManagementService {
    */
   JobQuery createJobQuery();
   
+  /** forced synchronous execution of a job for testing purposes. */
+  void executeJob(String jobId);
+  
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/BoundaryTimerEventActivity.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.activiti.engine.impl.bpmn;
 
+import java.util.ArrayList;
 import java.util.List;
 
 import org.activiti.pvm.activity.ActivityExecution;
@@ -39,7 +40,7 @@ public void execute(ActivityExecution execution) throws Exception {
         executionImpl.getSubProcessInstance().deleteCascade(executionImpl.getDeleteReason());
       }
       
-      interruptedExecutions = executionImpl.getExecutions();
+      interruptedExecutions = new ArrayList<ExecutionImpl>(executionImpl.getExecutions());
       for (ExecutionImpl interruptedExecution: interruptedExecutions) {
         interruptedExecution.deleteCascade("interrupting timer event '"+execution.getActivity().getId()+"' fired");
       }

File: activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/JobExecutor.java
Patch:
@@ -39,7 +39,6 @@ public class JobExecutor implements ProcessEngineConfigurationAware {
   private static Logger log = Logger.getLogger(JobExecutor.class.getName());
 
   protected CommandExecutor commandExecutor;
-  protected JobHandlers jobHandlers;
   protected boolean isAutoActivate = false;
 
   protected int maxJobsPerAcquisition = 3;
@@ -57,7 +56,6 @@ public class JobExecutor implements ProcessEngineConfigurationAware {
 
   public void configurationCompleted(ProcessEngineConfiguration processEngineConfiguration) {
     this.commandExecutor = processEngineConfiguration.getCommandExecutor();
-    this.jobHandlers = processEngineConfiguration.getJobHandlers();
     this.isAutoActivate = processEngineConfiguration.isJobExecutorAutoActivate();
   }
 
@@ -132,7 +130,7 @@ public void jobWasAdded() {
   
   public void executeJobs(List<String> jobIds) {
     // TODO: RejectedExecutionException handling!
-    threadPoolExecutor.execute(new ExecuteJobsRunnable(commandExecutor, jobIds, jobHandlers, this));
+    threadPoolExecutor.execute(new ExecuteJobsRunnable(commandExecutor, jobIds, this));
   }
 
   // getters and setters ////////////////////////////////////////////////////// 

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/runtime/MessageEntity.java
Patch:
@@ -15,7 +15,6 @@
 import java.util.Map;
 
 import org.activiti.engine.impl.interceptor.CommandContext;
-import org.activiti.engine.impl.jobexecutor.JobHandler;
 
 
 /**
@@ -28,8 +27,8 @@ public class MessageEntity extends JobEntity {
   private String repeat = null;
   
   @Override
-  public void execute(JobHandler jobHandler, CommandContext commandContext) {
-    super.execute(jobHandler, commandContext);
+  public void execute(CommandContext commandContext) {
+    super.execute(commandContext);
     commandContext
       .getDbSqlSession()
       .delete(JobEntity.class, id);

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/runtime/TimerEntity.java
Patch:
@@ -43,9 +43,9 @@ public TimerEntity(TimerDeclarationImpl timerDeclaration) {
   }
 
   @Override
-  public void execute(JobHandler jobHandler, CommandContext commandContext) {
+  public void execute(CommandContext commandContext) {
 
-    super.execute(jobHandler, commandContext);
+    super.execute(commandContext);
 
     if (repeat==null){
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -777,6 +777,7 @@ protected void addVariableDeclaration(ScopeImpl scope, VariableDeclaration varia
    */
   public void parseSubProcess(Element subProcessElement, ScopeImpl scopeElement) {
     ActivityImpl activity = parseAndCreateActivityOnScopeElement(subProcessElement, scopeElement);
+    activity.setScope(true);
     activity.setActivityBehavior(new SubProcessActivity());
     parseScope(subProcessElement, activity);
   }

File: activiti-engine/src/main/java/org/activiti/engine/test/ProcessEngineTestCase.java
Patch:
@@ -162,7 +162,7 @@ private void initializeProcessEngine() {
    * After a test method executed, this method scans all tables to see if the DB is completely clean. 
    * It throws AssertionFailed in case the DB is not clean.
    * If the DB is not clean, it is cleaned by performing a create a drop. */
-  private void assertAndEnsureCleanDb() throws Throwable {
+  protected void assertAndEnsureCleanDb() throws Throwable {
     log.fine("verifying that db is clean after test");
     Map<String, Long> tableCounts = processEngine.getManagementService().getTableCount();
     StringBuilder outputMessage = new StringBuilder();

File: activiti-engine/src/test/java/org/activiti/engine/test/bpmn/compatibility/BpmnBetaCompatibilityTest.java
Patch:
@@ -48,7 +48,7 @@ public void testScriptTask() {
       .startProcessInstanceByKey("scriptTask", CollectionUtil.singletonMap("numbers", Arrays.asList(1,2,3)));
 
     Task task = taskService.createTaskQuery()
-      .processInstance(processInstance.getId())
+      .processInstanceId(processInstance.getId())
       .singleResult();
     assertEquals("Human task", task.getName());
     

File: activiti-engine/src/test/java/org/activiti/engine/test/bpmn/gateway/ExclusiveGatewayTest.java
Patch:
@@ -32,7 +32,7 @@ public void testDivergingExclusiveGateway() {
     for (int i = 1; i <= 3; i++) {
       ProcessInstance pi = runtimeService.startProcessInstanceByKey("exclusiveGwDiverging", CollectionUtil.singletonMap("input", i));
       assertEquals("Task " + i, taskService.createTaskQuery().singleResult().getName());
-      runtimeService.deleteProcessInstance(pi.getId());
+      runtimeService.deleteProcessInstance(pi.getId(), "testing deletion");
     }
   }
 
@@ -102,7 +102,7 @@ public void testDecideBasedOnListOrArrayOfBeans() {
     ProcessInstance pi = runtimeService.startProcessInstanceByKey(
             "decisionBasedOnListOrArrayOfBeans", CollectionUtil.singletonMap("orders", orders));
     
-    Task task = taskService.createTaskQuery().processInstance(pi.getId()).singleResult();
+    Task task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
     assertNotNull(task);
     assertEquals("Gold Member service", task.getName());
     
@@ -113,7 +113,7 @@ public void testDecideBasedOnListOrArrayOfBeans() {
     pi = runtimeService.startProcessInstanceByKey(
             "decisionBasedOnListOrArrayOfBeans", CollectionUtil.singletonMap("orders", orderArray));
     
-    task = taskService.createTaskQuery().processInstance(pi.getId()).singleResult();
+    task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
     assertNotNull(task);
     assertEquals("Basic service", task.getName());
   }

File: activiti-engine/src/test/java/org/activiti/engine/test/bpmn/parse/InvalidProcessTest.java
Patch:
@@ -14,7 +14,6 @@
 
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.test.ProcessEngineTestCase;
-import org.activiti.test.ProcessDeployer;
 
 /**
  * Test case for verifying if the parser throws validation exceptions when a
@@ -26,7 +25,7 @@ public class InvalidProcessTest extends ProcessEngineTestCase {
 
   public void testInvalidProcessDefinition() {
     try {
-      String resource = ProcessDeployer.getBpmnProcessDefinitionResource(getClass(), "testInvalidProcessDefinition");
+      String resource = getBpmnProcessDefinitionResource(getClass(), "testInvalidProcessDefinition");
       repositoryService.createDeployment().name(resource).addClasspathResource(resource).deploy();
       fail();
     } catch (ActivitiException e) {

File: activiti-engine/src/test/java/org/activiti/engine/test/bpmn/sequenceflow/ConditionalSequenceFlowTest.java
Patch:
@@ -29,7 +29,7 @@ public class ConditionalSequenceFlowTest extends ProcessEngineTestCase {
   public void testUelValueExpression() {
     ProcessInstance pi = runtimeService.startProcessInstanceByKey(
             "condSeqFlowUelValueExpr", CollectionUtil.singletonMap("input", "right"));
-    Task task = taskService.createTaskQuery().processInstance(pi.getId()).singleResult();
+    Task task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
     assertEquals("task right", task.getName());
   }
   

File: activiti-engine/src/test/java/org/activiti/engine/test/bpmn/usertask/TaskAssignmentExtensionsTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.activiti.engine.TaskQuery;
 import org.activiti.engine.test.Deployment;
 import org.activiti.engine.test.ProcessEngineTestCase;
-import org.activiti.test.ProcessDeployer;
 
 /**
  * Testcase for the non-spec extensions to the task candidate use case.
@@ -59,7 +58,7 @@ public void testAssigneeExtension() {
 
   public void testDuplicateAssigneeDeclaration() {
     try {
-      String resource = ProcessDeployer.getBpmnProcessDefinitionResource(getClass(), "testDuplicateAssigneeDeclaration");
+      String resource = getBpmnProcessDefinitionResource(getClass(), "testDuplicateAssigneeDeclaration");
       repositoryService.createDeployment().addClasspathResource(resource).deploy();
       fail("Invalid BPMN 2.0 process should not parse, but it gets parsed sucessfully");
     } catch (ActivitiException e) {

File: activiti-engine/src/test/java/org/activiti/engine/test/jobexecutor/JobExecutorCmdExceptionTest.java
Patch:
@@ -8,13 +8,12 @@
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.interceptor.CommandExecutor;
 import org.activiti.engine.impl.persistence.runtime.MessageEntity;
-import org.activiti.engine.test.ProcessEngineImplTestCase;
-import org.junit.Test;
+import org.activiti.engine.test.ProcessEngineTestCase;
 
 /**
  * @author Tom Baeyens
  */
-public class JobExecutorCmdExceptionTest extends ProcessEngineImplTestCase {
+public class JobExecutorCmdExceptionTest extends ProcessEngineTestCase {
 
   protected TweetExceptionHandler tweetExceptionHandler = new TweetExceptionHandler();
 

File: activiti-engine/src/test/java/org/activiti/engine/test/jobexecutor/JobExecutorTestCase.java
Patch:
@@ -16,12 +16,12 @@
 
 import org.activiti.engine.impl.persistence.runtime.MessageEntity;
 import org.activiti.engine.impl.persistence.runtime.TimerEntity;
-import org.activiti.engine.test.ProcessEngineImplTestCase;
+import org.activiti.engine.test.ProcessEngineTestCase;
 
 /**
  * @author Tom Baeyens
  */
-public class JobExecutorTestCase extends ProcessEngineImplTestCase {
+public class JobExecutorTestCase extends ProcessEngineTestCase {
 
   protected TweetHandler tweetHandler = new TweetHandler();
 

File: activiti-engine/src/test/java/org/activiti/engine/test/jobexecutor/TweetExceptionHandler.java
Patch:
@@ -16,8 +16,7 @@
 
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.jobexecutor.JobHandler;
-import org.activiti.engine.impl.persistence.runtime.ActivityInstanceEntity;
-import org.activiti.engine.impl.persistence.runtime.ProcessInstanceEntity;
+import org.activiti.engine.impl.persistence.runtime.ExecutionEntity;
 
 
 /**
@@ -33,7 +32,7 @@ public String getType() {
     return "tweet-exception";
   }
 
-  public void execute(String configuration, ProcessInstanceEntity processInstance, ActivityInstanceEntity activityInstance, CommandContext commandContext) {
+  public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext) {
     if (exceptionsRemaining>0) {
       exceptionsRemaining--;
       throw new RuntimeException("exception remaining: "+exceptionsRemaining);

File: activiti-engine/src/test/java/org/activiti/engine/test/jobexecutor/TweetHandler.java
Patch:
@@ -17,8 +17,7 @@
 
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.jobexecutor.JobHandler;
-import org.activiti.engine.impl.persistence.runtime.ActivityInstanceEntity;
-import org.activiti.engine.impl.persistence.runtime.ProcessInstanceEntity;
+import org.activiti.engine.impl.persistence.runtime.ExecutionEntity;
 import org.junit.Assert;
 
 public class TweetHandler implements JobHandler {
@@ -29,7 +28,7 @@ public String getType() {
     return "tweet";
   }
 
-  public void execute(String configuration, ProcessInstanceEntity processInstance, ActivityInstanceEntity activityInstance, CommandContext commandContext) {
+  public void execute(String configuration, ExecutionEntity execution, CommandContext commandContext) {
     messages.add(configuration);
     Assert.assertNotNull(commandContext);
   }

File: activiti-engine/src/test/java/org/activiti/engine/test/service/HistoricDataServiceTest.java
Patch:
@@ -22,12 +22,12 @@
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.test.Deployment;
-import org.activiti.engine.test.ProcessEngineImplTestCase;
+import org.activiti.engine.test.ProcessEngineTestCase;
 
 /**
  * @author Christian Stettler
  */
-public class HistoricDataServiceTest extends ProcessEngineImplTestCase {
+public class HistoricDataServiceTest extends ProcessEngineTestCase {
 
   @Deployment(resources = {"oneTaskProcess.bpmn20.xml"})
   public void testHistoricDataCreatedForProcessExecution() {
@@ -45,7 +45,7 @@ public void testHistoricDataCreatedForProcessExecution() {
 
       // TODO: check for HistoricActivityInstance created once events get fired
 
-      List<Task> tasks = taskService.createTaskQuery().processInstance(processInstance.getId()).list();
+      List<Task> tasks = taskService.createTaskQuery().processInstanceId(processInstance.getId()).list();
 
       assertEquals(1, tasks.size());
 

File: activiti-engine/src/test/java/org/activiti/engine/test/service/ProcessServiceTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.activiti.engine.ProcessInstance;
 import org.activiti.engine.test.Deployment;
 import org.activiti.engine.test.ProcessEngineTestCase;
-import org.junit.Test;
 
 /**
  * @author Joram Barrez
@@ -28,7 +27,7 @@ public class ProcessServiceTest extends ProcessEngineTestCase {
 
   @Deployment(resources = {"oneTaskProcess.bpmn20.xml"})
   public void testStartProcessInstanceById() {
-    List<ProcessDefinition> processDefinitions = repositoryService.findProcessDefinitions();
+    List<ProcessDefinition> processDefinitions = repositoryService.createProcessDefinitionQuery().list();
     assertEquals(1, processDefinitions.size());
 
     ProcessDefinition processDefinition = processDefinitions.get(0);
@@ -42,7 +41,7 @@ public void testStartProcessInstanceById() {
 
   @Deployment(resources={"oneTaskProcess.bpmn20.xml"})
   public void testFindProcessDefinitionById() {
-    List<ProcessDefinition> definitions = repositoryService.findProcessDefinitions();
+    List<ProcessDefinition> definitions = repositoryService.createProcessDefinitionQuery().list();
     assertEquals(1, definitions.size());
 
     ProcessDefinition processDefinition = repositoryService.findProcessDefinitionById(definitions.get(0).getId());

File: activiti-engine-test-cfg/src/test/java/org/activiti/test/db/ProcessEngineInitializationTest.java
Patch:
@@ -86,7 +86,7 @@ public void testVersionMismatch() {
       fail("expected exception");
     } catch (ActivitiWrongDbException e) {
       assertTextPresent("version mismatch", e.getMessage());
-      assertEquals(25.7, e.getDbVersion());
+      assertEquals("25.7", e.getDbVersion());
       assertEquals(ProcessEngine.VERSION, e.getLibraryVersion());
     }
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/UserTaskActivity.java
Patch:
@@ -72,7 +72,7 @@ protected void handleAssignments(TaskEntity task, ActivityExecution execution) {
   }
 
   protected String evaluateExpression(String expr, ActivityExecution execution) {
-    // TODO move parsing of value expression to bpmn parser and only keep evaluation here
+    // TODO http://jira.codehaus.org/browse/ACT-84 move parsing of value expression to bpmn parser and only keep evaluation here
     return (String) expressionManager.createValueExpression(expr).getValue(execution);
   }
 

File: activiti-engine/src/test/java/org/activiti/engine/test/bpmn/callactivity/CallActivityAdvancedTest.java
Patch:
@@ -21,12 +21,12 @@
 import org.activiti.engine.TaskQuery;
 import org.activiti.engine.impl.util.ClockUtil;
 import org.activiti.engine.test.Deployment;
-import org.activiti.engine.test.ProcessEngineImplTestCase;
+import org.activiti.engine.test.ProcessEngineTestCase;
 
 /**
  * @author Joram Barrez
  */
-public class CallActivityAdvancedTest extends ProcessEngineImplTestCase {
+public class CallActivityAdvancedTest extends ProcessEngineTestCase {
 
   @Deployment(resources = {
     "org/activiti/engine/test/bpmn/callactivity/CallActivity.testCallSimpleSubProcess.bpmn20.xml", 

File: activiti-engine/src/test/java/org/activiti/impl/interceptor/CommandContextTest.java
Patch:
@@ -15,13 +15,13 @@
 
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
-import org.activiti.engine.test.ProcessEngineImplTestCase;
+import org.activiti.engine.test.ProcessEngineTestCase;
 
 
 /**
  * @author Tom Baeyens
  */
-public class CommandContextTest extends ProcessEngineImplTestCase {
+public class CommandContextTest extends ProcessEngineTestCase {
 
   public void testCommandContextGetCurrentAfterException() {
     try {

File: activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/usertask/FinancialReportProcessTest.java
Patch:
@@ -28,7 +28,8 @@ public void tearDown() throws Exception {
     identityService.deleteGroup("management");
   }
   
-  @Deployment(resources={"FinancialReportProcess.bpmn20.xml"})
+  @Deployment(resources={
+    "org/activiti/examples/bpmn/usertask/FinancialReportProcess.bpmn20.xml"})
   public void testProcess() {
     
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("financialReport");

File: activiti-engine/src/main/java/org/activiti/engine/ExecutionQuery.java
Patch:
@@ -22,10 +22,11 @@
  */
 public interface ExecutionQuery {
   
-  ExecutionQuery processInstanceId(String processInstanceId);
-  ExecutionQuery activityId(String activityId);
   ExecutionQuery processDefinitionKey(String processDefinitionKey);
   ExecutionQuery processDefinitionId(String processDefinitionId);
+  ExecutionQuery processInstanceId(String processInstanceId);
+  ExecutionQuery executionId(String executionId);
+  ExecutionQuery activityId(String activityId);
   
   List<Execution> list();
   List<Execution> listPage(int start, int maxResults);

File: activiti-engine/src/main/java/org/activiti/engine/RuntimeService.java
Patch:
@@ -41,6 +41,8 @@ public interface RuntimeService {
   /** creates a new {@link ExecutionQuery} instance, 
    * that can be used to query the executions and process instances. */
   ExecutionQuery createExecutionQuery();
+  
+  Execution findExecutionById(String executionId);
 
   ProcessInstanceQuery createProcessInstanceQuery();
 

File: activiti-pvm/src/main/java/org/activiti/pvm/delegate/DelegateExecution.java
Patch:
@@ -21,6 +21,8 @@
  */
 public interface DelegateExecution {
 
+  String getId();
+  
   boolean hasVariable(String variableName);
   void setVariable(String variableName, Object value);
   Object getVariable(String variableName);

File: activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/callactivity/CallActivityTest.java
Patch:
@@ -32,12 +32,12 @@ public void testOrderProcessWithCallActivity() {
     // After the process has started, the 'verify credit history' task should be active
     runtimeService.startProcessInstanceByKey("orderProcess");
     TaskQuery taskQuery = taskService.createTaskQuery();
-    Task verifyCreditTask = taskQuery.listPage();
+    Task verifyCreditTask = taskQuery.singleResult();
     assertEquals("Verify credit history", verifyCreditTask.getName());
     
     // Completing the task with approval, will end the subprocess and continue the original process
     taskService.complete(verifyCreditTask.getId(), CollectionUtil.singletonMap("creditApproved", true));
-    Task prepareAndShipTask = taskQuery.listPage();
+    Task prepareAndShipTask = taskQuery.singleResult();
     assertEquals("Prepare and Ship", prepareAndShipTask.getName());
   }
 }

File: activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/event/timer/BoundaryTimerEventTest.java
Patch:
@@ -34,15 +34,15 @@ public void testInterruptingTimerDuration() {
     ProcessInstance pi = runtimeService.startProcessInstanceByKey("interruptingBoundaryTimer");
 
     // There should be one task, with a timer : first line support
-    Task task = taskService.createTaskQuery().processInstanceId(pi.getId()).listPage();
+    Task task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
     assertEquals("First line support", task.getName());
 
     // Set clock to the future such that the timer can fire
     ClockUtil.setCurrentTime(new Date(startTime.getTime() + (5 * 60 * 60 * 1000)));
     waitForJobExecutorToProcessAllJobs(10000L, 250L);
 
     // The timer has fired, and the second task (secondlinesupport) now exists
-    task = taskService.createTaskQuery().processInstanceId(pi.getId()).listPage();
+    task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
     assertEquals("Second line support", task.getName());
   }
 

File: activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/expression/UelExpressionTest.java
Patch:
@@ -31,14 +31,14 @@ public void testValueAndMethodExpression() {
     UelExpressionTestOrder order = new UelExpressionTestOrder(150);
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("uelExpressions", 
             CollectionUtil.singletonMap("order",  order));
-    Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).listPage();
+    Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
     assertEquals("Standard service", task.getName());
     
     // While an order of 300, gives us a premium service (goes through an UEL method expression)
     order = new UelExpressionTestOrder(300);
     processInstance = runtimeService.startProcessInstanceByKey("uelExpressions",
             CollectionUtil.singletonMap("order",  order));
-    task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).listPage();
+    task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
     assertEquals("Premium service", task.getName());
     
   }

File: activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/gateway/ExclusiveGatewayTest.java
Patch:
@@ -41,19 +41,19 @@ public void testDecisionFunctionality() {
     // Test with input == 1
     variables.put("input", 1);
     ProcessInstance pi = runtimeService.startProcessInstanceByKey("exclusiveGateway", variables);
-    Task task = taskService.createTaskQuery().processInstanceId(pi.getId()).listPage();
+    Task task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
     assertEquals("Send e-mail for more information", task.getName());
 
     // Test with input == 2
     variables.put("input", 2);
     pi = runtimeService.startProcessInstanceByKey("exclusiveGateway", variables);
-    task = taskService.createTaskQuery().processInstanceId(pi.getId()).listPage();
+    task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
     assertEquals("Check account balance", task.getName());
 
     // Test with input == 3
     variables.put("input", 3);
     pi = runtimeService.startProcessInstanceByKey("exclusiveGateway", variables);
-    task = taskService.createTaskQuery().processInstanceId(pi.getId()).listPage();
+    task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
     assertEquals("Call customer", task.getName());
 
     // Test with input == 4

File: activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/receivetask/ReceiveTaskTest.java
Patch:
@@ -30,7 +30,7 @@ public void testWaitStateBehavior() {
     Execution execution = runtimeService.createExecutionQuery()
       .processInstanceId(pi.getId())
       .activityId("waitState")
-      .listPage();
+      .singleResult();
     assertNotNull(execution);
     
     runtimeService.signal(execution.getId());

File: activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/servicetask/JavaServiceTaskTest.java
Patch:
@@ -29,7 +29,7 @@ public void testJavaServiceDelegation() {
     Execution execution = runtimeService.createExecutionQuery()
       .processInstanceId(pi.getId())
       .activityId("waitState")
-      .listPage();
+      .singleResult();
     assertEquals("ACTIVITI BPM ENGINE", runtimeService.getVariable(execution.getId(), "input"));
   }
 

File: activiti-engine-examples/src/test/java/org/activiti/examples/taskforms/TaskFormsTest.java
Patch:
@@ -51,7 +51,7 @@ public void testTaskFormsWithVacationRequestProcess() {
     runtimeService.startProcessInstanceByKey("vacationRequest", parameters);
 
     // Management should now have a task assigned to them
-    Task task = taskService.createTaskQuery().candidateGroup("management").listPage();
+    Task task = taskService.createTaskQuery().candidateGroup("management").singleResult();
     assertEquals("Vacation request by kermit", task.getDescription());
     Object taskForm = taskService.getTaskForm(task.getId());
     assertNotNull(taskForm);
@@ -63,7 +63,7 @@ public void testTaskFormUnavailable() {
     assertNull(repositoryService.getStartFormByKey("noStartOrTaskForm"));
 
     runtimeService.startProcessInstanceByKey("noStartOrTaskForm");
-    Task task = taskService.createTaskQuery().listPage();
+    Task task = taskService.createTaskQuery().singleResult();
     assertNull(taskService.getTaskForm(task.getId()));
   }
 

File: activiti-engine/src/main/java/org/activiti/engine/ExecutionQuery.java
Patch:
@@ -29,6 +29,6 @@ public interface ExecutionQuery {
   
   List<Execution> list();
   List<Execution> listPage(int start, int maxResults);
-  Execution listPage();
+  Execution singleResult();
   long count();
 }

File: activiti-engine/src/main/java/org/activiti/engine/JobQuery.java
Patch:
@@ -31,7 +31,7 @@ public interface JobQuery {
   
   long count();
   
-  Job listPage();
+  Job singleResult();
   
   List<Job> list();
   

File: activiti-engine/src/main/java/org/activiti/engine/ProcessDefinitionQuery.java
Patch:
@@ -33,7 +33,7 @@ public interface ProcessDefinitionQuery {
 
   long count();
   
-  ProcessDefinition listPage();
+  ProcessDefinition singleResult();
   
   List<ProcessDefinition> list();
   

File: activiti-engine/src/main/java/org/activiti/engine/ProcessInstanceQuery.java
Patch:
@@ -27,6 +27,6 @@ public interface ProcessInstanceQuery {
   
   List<ProcessInstance> list();
   List<ProcessInstance> listPage(int start, int maxResults);
-  ProcessInstance listPage();
+  ProcessInstance singleResult();
   long count();
 }

File: activiti-engine/src/main/java/org/activiti/engine/TaskQuery.java
Patch:
@@ -42,7 +42,7 @@ public interface TaskQuery {
   
   long count();
   
-  Task listPage();
+  Task singleResult();
   
   List<Task> list();
   

File: activiti-engine/src/main/java/org/activiti/engine/impl/AbstractQuery.java
Patch:
@@ -50,7 +50,7 @@ protected AbstractQuery(CommandExecutor commandExecutor) {
   }
 
   @SuppressWarnings("unchecked")
-  public T listPage() {
+  public T singleResult() {
     this.resultType = ResultType.SINGLE_RESULT;
     return (T) commandExecutor.execute(this);
   }

File: activiti-engine/src/main/java/org/activiti/engine/test/ProcessEngineTestCase.java
Patch:
@@ -98,7 +98,7 @@ public void assertProcessEnded(final String processInstanceId) {
       .getRuntimeService()
       .createProcessInstanceQuery()
       .processInstanceId(processInstanceId)
-      .listPage();
+      .singleResult();
     
     if (processInstance!=null) {
       throw new AssertionFailedError("expected finished process instance '"+processInstanceId+"' but it was still in the db"); 

File: activiti-engine/src/test/java/org/activiti/engine/test/db/EngineRebootProcessDefinitionCacheTest.java
Patch:
@@ -93,7 +93,7 @@ public void testStartProcessInstanceByIdAfterReboot() {
        .getRuntimeService()
        .createProcessInstanceQuery()
        .processInstanceId(processInstanceId)
-       .listPage();
+       .singleResult();
      
      assertNotNull(processInstance);
      
@@ -111,7 +111,7 @@ public void testStartProcessInstanceByIdAfterReboot() {
        .getRuntimeService()
        .createProcessInstanceQuery()
        .processInstanceId(processInstanceId)
-       .listPage();
+       .singleResult();
 
      assertNull(processInstance);
      

File: activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/callactivity/CallActivityTest.java
Patch:
@@ -32,12 +32,12 @@ public void testOrderProcessWithCallActivity() {
     // After the process has started, the 'verify credit history' task should be active
     runtimeService.startProcessInstanceByKey("orderProcess");
     TaskQuery taskQuery = taskService.createTaskQuery();
-    Task verifyCreditTask = taskQuery.singleResult();
+    Task verifyCreditTask = taskQuery.listPage();
     assertEquals("Verify credit history", verifyCreditTask.getName());
     
     // Completing the task with approval, will end the subprocess and continue the original process
     taskService.complete(verifyCreditTask.getId(), CollectionUtil.singletonMap("creditApproved", true));
-    Task prepareAndShipTask = taskQuery.singleResult();
+    Task prepareAndShipTask = taskQuery.listPage();
     assertEquals("Prepare and Ship", prepareAndShipTask.getName());
   }
 }

File: activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/event/timer/BoundaryTimerEventTest.java
Patch:
@@ -34,15 +34,15 @@ public void testInterruptingTimerDuration() {
     ProcessInstance pi = runtimeService.startProcessInstanceByKey("interruptingBoundaryTimer");
 
     // There should be one task, with a timer : first line support
-    Task task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
+    Task task = taskService.createTaskQuery().processInstanceId(pi.getId()).listPage();
     assertEquals("First line support", task.getName());
 
     // Set clock to the future such that the timer can fire
     ClockUtil.setCurrentTime(new Date(startTime.getTime() + (5 * 60 * 60 * 1000)));
     waitForJobExecutorToProcessAllJobs(10000L, 250L);
 
     // The timer has fired, and the second task (secondlinesupport) now exists
-    task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
+    task = taskService.createTaskQuery().processInstanceId(pi.getId()).listPage();
     assertEquals("Second line support", task.getName());
   }
 

File: activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/expression/UelExpressionTest.java
Patch:
@@ -31,14 +31,14 @@ public void testValueAndMethodExpression() {
     UelExpressionTestOrder order = new UelExpressionTestOrder(150);
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("uelExpressions", 
             CollectionUtil.singletonMap("order",  order));
-    Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
+    Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).listPage();
     assertEquals("Standard service", task.getName());
     
     // While an order of 300, gives us a premium service (goes through an UEL method expression)
     order = new UelExpressionTestOrder(300);
     processInstance = runtimeService.startProcessInstanceByKey("uelExpressions",
             CollectionUtil.singletonMap("order",  order));
-    task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
+    task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).listPage();
     assertEquals("Premium service", task.getName());
     
   }

File: activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/gateway/ExclusiveGatewayTest.java
Patch:
@@ -41,19 +41,19 @@ public void testDecisionFunctionality() {
     // Test with input == 1
     variables.put("input", 1);
     ProcessInstance pi = runtimeService.startProcessInstanceByKey("exclusiveGateway", variables);
-    Task task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
+    Task task = taskService.createTaskQuery().processInstanceId(pi.getId()).listPage();
     assertEquals("Send e-mail for more information", task.getName());
 
     // Test with input == 2
     variables.put("input", 2);
     pi = runtimeService.startProcessInstanceByKey("exclusiveGateway", variables);
-    task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
+    task = taskService.createTaskQuery().processInstanceId(pi.getId()).listPage();
     assertEquals("Check account balance", task.getName());
 
     // Test with input == 3
     variables.put("input", 3);
     pi = runtimeService.startProcessInstanceByKey("exclusiveGateway", variables);
-    task = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
+    task = taskService.createTaskQuery().processInstanceId(pi.getId()).listPage();
     assertEquals("Call customer", task.getName());
 
     // Test with input == 4

File: activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/receivetask/ReceiveTaskTest.java
Patch:
@@ -30,7 +30,7 @@ public void testWaitStateBehavior() {
     Execution execution = runtimeService.createExecutionQuery()
       .processInstanceId(pi.getId())
       .activityId("waitState")
-      .singleResult();
+      .listPage();
     assertNotNull(execution);
     
     runtimeService.signal(execution.getId());

File: activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/servicetask/JavaServiceTaskTest.java
Patch:
@@ -29,7 +29,7 @@ public void testJavaServiceDelegation() {
     Execution execution = runtimeService.createExecutionQuery()
       .processInstanceId(pi.getId())
       .activityId("waitState")
-      .singleResult();
+      .listPage();
     assertEquals("ACTIVITI BPM ENGINE", runtimeService.getVariable(execution.getId(), "input"));
   }
 

File: activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/subprocess/SubProcessTest.java
Patch:
@@ -50,7 +50,7 @@ public void testSimpleSubProcess() {
     // Completing boith the tasks finishes the subprocess and enables the task after the subprocess
     taskService.complete(investigateHardwareTask.getId());
     taskService.complete(investigateSoftwareTask.getId());
-    Task writeReportTask = taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();
+    Task writeReportTask = taskService.createTaskQuery().processInstanceId(pi.getId()).listPage();
     assertEquals("Write report", writeReportTask.getName());
     
     // Clean up

File: activiti-engine-examples/src/test/java/org/activiti/examples/taskforms/TaskFormsTest.java
Patch:
@@ -51,7 +51,7 @@ public void testTaskFormsWithVacationRequestProcess() {
     runtimeService.startProcessInstanceByKey("vacationRequest", parameters);
 
     // Management should now have a task assigned to them
-    Task task = taskService.createTaskQuery().candidateGroup("management").singleResult();
+    Task task = taskService.createTaskQuery().candidateGroup("management").listPage();
     assertEquals("Vacation request by kermit", task.getDescription());
     Object taskForm = taskService.getTaskForm(task.getId());
     assertNotNull(taskForm);
@@ -63,7 +63,7 @@ public void testTaskFormUnavailable() {
     assertNull(repositoryService.getStartFormByKey("noStartOrTaskForm"));
 
     runtimeService.startProcessInstanceByKey("noStartOrTaskForm");
-    Task task = taskService.createTaskQuery().singleResult();
+    Task task = taskService.createTaskQuery().listPage();
     assertNull(taskService.getTaskForm(task.getId()));
   }
 

File: activiti-engine-test-cfg/src/test/java/org/activiti/test/processengines/ProcessEnginesTest.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.examples.mgmt;
+package org.activiti.test.processengines;
 
 import java.util.List;
 
@@ -19,6 +19,7 @@
 import org.activiti.engine.ProcessEngine;
 import org.activiti.engine.ProcessEngineInfo;
 import org.activiti.engine.ProcessEngines;
+import org.activiti.engine.test.ProcessEngineTestCase;
 
 /**
  * @author Tom Baeyens
@@ -28,6 +29,7 @@ public class ProcessEnginesTest extends TestCase {
   @Override
   protected void setUp() throws Exception {
     super.setUp();
+    ProcessEngineTestCase.closeProcessEngines();
     ProcessEngines.init();
   }
   

File: activiti-engine/src/main/java/org/activiti/engine/ExecutionQuery.java
Patch:
@@ -28,7 +28,7 @@ public interface ExecutionQuery {
   ExecutionQuery processDefinitionId(String processDefinitionId);
   
   List<Execution> list();
-  List<Execution> paginatedList(int start, int maxResults);
-  Execution singleResult();
+  List<Execution> listPage(int start, int maxResults);
+  Execution listPage();
   long count();
 }

File: activiti-engine/src/main/java/org/activiti/engine/JobQuery.java
Patch:
@@ -31,10 +31,10 @@ public interface JobQuery {
   
   long count();
   
-  Job singleResult();
+  Job listPage();
   
   List<Job> list();
   
-  List<Job> paginatedList(int start, int size);
+  List<Job> listPage(int start, int size);
 
 }

File: activiti-engine/src/main/java/org/activiti/engine/ProcessDefinitionQuery.java
Patch:
@@ -33,9 +33,9 @@ public interface ProcessDefinitionQuery {
 
   long count();
   
-  ProcessDefinition singleResult();
+  ProcessDefinition listPage();
   
   List<ProcessDefinition> list();
   
-  List<ProcessDefinition> paginatedList(int start, int size);
+  List<ProcessDefinition> listPage(int start, int size);
 }

File: activiti-engine/src/main/java/org/activiti/engine/ProcessInstanceQuery.java
Patch:
@@ -26,7 +26,7 @@ public interface ProcessInstanceQuery {
   ProcessInstanceQuery processDefinitionKey(String processDefinitionKey);
   
   List<ProcessInstance> list();
-  List<ProcessInstance> paginatedList(int start, int maxResults);
-  ProcessInstance singleResult();
+  List<ProcessInstance> listPage(int start, int maxResults);
+  ProcessInstance listPage();
   long count();
 }

File: activiti-engine/src/main/java/org/activiti/engine/TaskQuery.java
Patch:
@@ -42,10 +42,10 @@ public interface TaskQuery {
   
   long count();
   
-  Task singleResult();
+  Task listPage();
   
   List<Task> list();
   
-  List<Task> paginatedList(int start, int size);
+  List<Task> listPage(int start, int size);
 
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/ExecutionQueryImpl.java
Patch:
@@ -84,7 +84,7 @@ public long executeCount(CommandContext commandContext) {
   public List<Execution> executeList(CommandContext commandContext, Page page) {
     return (List) commandContext
       .getRuntimeSession()
-      .findExecutionsByQueryCriteria(this);
+      .findExecutionsByQueryCriteria(this, page);
   }
   
   public String getProcessDefinitionKey() {

File: activiti-engine/src/main/java/org/activiti/engine/impl/ProcessInstanceQueryImpl.java
Patch:
@@ -85,7 +85,7 @@ public long executeCount(CommandContext commandContext) {
   public List<ProcessInstance> executeList(CommandContext commandContext, Page page) {
     return (List) commandContext
       .getRuntimeSession()
-      .findExecutionsByQueryCriteria(this);
+      .findExecutionsByQueryCriteria(this, page);
   }
   
   public String getProcessDefinitionKey() {

File: activiti-engine/src/main/java/org/activiti/engine/impl/TaskServiceImpl.java
Patch:
@@ -70,7 +70,7 @@ public List<Task> findAssignedTasks(String assignee) {
   public List<Task> findAssignedTasks(String assignee, Page page) {
     TaskQuery query = createTaskQuery().assignee(assignee);
     if (page != null) {
-      return query.paginatedList(page.getOffset(), page.getMaxResults());
+      return query.listPage(page.getFirstResult(), page.getMaxResults());
     } else {
       return query.list();
     }
@@ -83,7 +83,7 @@ public List<Task> findUnassignedTasks(String userId) {
   public List<Task> findUnassignedTasks(String userId, Page page) {
     TaskQuery query = createTaskQuery().candidateUser(userId);
     if (page != null) {
-      return query.paginatedList(page.getOffset(), page.getMaxResults());
+      return query.listPage(page.getFirstResult(), page.getMaxResults());
     } else {
       return query.list();
     }

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/deployer/BpmnDeployer.java
Patch:
@@ -38,9 +38,11 @@ public class BpmnDeployer implements Deployer, ProcessEngineConfigurationAware {
   public static final String BPMN_RESOURCE_SUFFIX = "bpmn20.xml";
 
   protected ExpressionManager expressionManager;
+  protected BpmnParser bpmnParser;
 
   public void configurationCompleted(ProcessEngineConfiguration processEngineConfiguration) {
     this.expressionManager = processEngineConfiguration.getExpressionManager();
+    this.bpmnParser = new BpmnParser(expressionManager);
   }
 
   public List<ProcessDefinitionEntity> deploy(DeploymentEntity deployment) {
@@ -54,7 +56,7 @@ public List<ProcessDefinitionEntity> deploy(DeploymentEntity deployment) {
         ResourceEntity resource = resources.get(resourceName);
         byte[] bytes = resource.getBytes();
         ByteArrayInputStream inputStream = new ByteArrayInputStream(bytes);
-        BpmnParse bpmnParse = new BpmnParser(expressionManager)
+        BpmnParse bpmnParse = bpmnParser
           .createParse()
           .sourceInputStream(inputStream)
           .name(resourceName)

File: activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ManagementSession.java
Patch:
@@ -15,9 +15,9 @@
 
 import java.util.Map;
 
-import org.activiti.engine.SortOrder;
 import org.activiti.engine.TableMetaData;
 import org.activiti.engine.TablePage;
+import org.activiti.engine.impl.TablePageQueryImpl;
 import org.activiti.engine.impl.persistence.db.IdBlock;
 
 
@@ -28,7 +28,7 @@ public interface ManagementSession {
 
   /* Management */
   Map<String, Long> getTableCount();
-  TablePage getTablePage(String tableName, int offset, int maxResults, String sortColumn, SortOrder sortOrder);
+  TablePage getTablePage(TablePageQueryImpl tablePageQuery, int firstResult, int maxResults);
   TableMetaData getTableMetaData(String tableName);
 
   IdBlock getNextIdBlock();

File: activiti-engine/src/main/java/org/activiti/engine/impl/cfg/RuntimeSession.java
Patch:
@@ -34,7 +34,7 @@ public interface RuntimeSession {
   void deleteProcessInstance(String processInstanceId, String deleteReason);
   ExecutionEntity findSubProcessInstanceBySuperExecutionId(String superExecutionId);
   long findExecutionCountByQueryCriteria(Object executionQuery);
-  List<ExecutionEntity> findExecutionsByQueryCriteria(Object executionQuery);
+  List<ExecutionEntity> findExecutionsByQueryCriteria(Object executionQuery, Page page);
   List<ExecutionEntity> findChildExecutionsByParentExecutionId(String executionId);
   ExecutionEntity findExecutionById(String activityInstanceId);
   
@@ -46,9 +46,9 @@ public interface RuntimeSession {
 
   JobEntity findJobById(String jobId);
   List<JobEntity> findJobs();
-  List<JobEntity> findNextJobsToExecute(int maxNrOfJobs);
+  List<JobEntity> findNextJobsToExecute(Page page);
   List<JobEntity> findLockedJobs();
-  List<TimerEntity> findUnlockedTimersByDuedate(Date duedate, int nrOfTimers);
+  List<TimerEntity> findUnlockedTimersByDuedate(Date duedate, Page page);
   List<TimerEntity> findTimersByExecutionId(String executionId);
   List<Job> findJobsByQueryCriteria(JobQueryImpl jobQuery, Page page);
   long findJobCountByQueryCriteria(JobQueryImpl jobQuery);

File: activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/AcquireJobsCmd.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.GregorianCalendar;
 import java.util.List;
 
+import org.activiti.engine.Page;
 import org.activiti.engine.impl.cfg.RuntimeSession;
 import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.interceptor.CommandContext;
@@ -44,7 +45,7 @@ public AcquiredJobs execute(CommandContext commandContext) {
     
     
     AcquiredJobs acquiredJobs = new AcquiredJobs();
-    List<JobEntity> jobs = runtimeSession.findNextJobsToExecute(maxJobsPerAcquisition);
+    List<JobEntity> jobs = runtimeSession.findNextJobsToExecute(new Page(0, maxJobsPerAcquisition));
     for (JobEntity job: jobs) {
       List<String> jobIds = new ArrayList<String>();
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/JobAcquisitionThread.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import org.activiti.engine.Page;
 import org.activiti.engine.impl.interceptor.CommandExecutor;
 import org.activiti.engine.impl.persistence.runtime.TimerEntity;
 import org.activiti.engine.impl.util.ClockUtil;
@@ -73,7 +74,7 @@ public void run() {
           
           // check if the next timer should fire before the normal sleep time is over
           Date duedate = new Date(ClockUtil.getCurrentTime().getTime() + millisToWait);
-          List<TimerEntity> nextTimers = commandExecutor.execute(new GetUnlockedTimersByDuedateCmd(duedate, 1));
+          List<TimerEntity> nextTimers = commandExecutor.execute(new GetUnlockedTimersByDuedateCmd(duedate, new Page(0, 1)));
           
           if (!nextTimers.isEmpty()) {
         	long millisTillNextTimer = nextTimers.get(0).getDuedate().getTime() - ClockUtil.getCurrentTime().getTime();

File: activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerExecuteNestedActivityJobHandler.java
Patch:
@@ -43,6 +43,8 @@ public void execute(String configuration, ExecutionEntity execution, CommandCont
     }
 
     try {
+      execution.setActivity(borderEventActivity);
+      
       borderEventActivity
         .getActivityBehavior()
         .execute(execution);

File: activiti-engine/src/main/java/org/activiti/engine/impl/scripting/ActivityContextBindings.java
Patch:
@@ -93,6 +93,9 @@ public void putAll(Map< ? extends String, ? extends Object> toMerge) {
   }
 
   public Object remove(Object key) {
+    if (UNSTORED_KEYS.contains(key)) {
+      return null;
+    }
     throw new UnsupportedOperationException();
   }
 

File: activiti-engine/src/main/java/org/activiti/engine/test/ProcessEngineTestCase.java
Patch:
@@ -98,7 +98,7 @@ public void assertProcessEnded(final String processInstanceId) {
       .getRuntimeService()
       .createProcessInstanceQuery()
       .processInstanceId(processInstanceId)
-      .singleResult();
+      .listPage();
     
     if (processInstance!=null) {
       throw new AssertionFailedError("expected finished process instance '"+processInstanceId+"' but it was still in the db"); 

File: activiti-engine/src/test/java/org/activiti/engine/test/db/EngineRebootProcessDefinitionCacheTest.java
Patch:
@@ -93,7 +93,7 @@ public void testStartProcessInstanceByIdAfterReboot() {
        .getRuntimeService()
        .createProcessInstanceQuery()
        .processInstanceId(processInstanceId)
-       .singleResult();
+       .listPage();
      
      assertNotNull(processInstance);
      
@@ -111,7 +111,7 @@ public void testStartProcessInstanceByIdAfterReboot() {
        .getRuntimeService()
        .createProcessInstanceQuery()
        .processInstanceId(processInstanceId)
-       .singleResult();
+       .listPage();
 
      assertNull(processInstance);
      

File: activiti-engine/src/test/java/org/activiti/impl/interceptor/CommandContextTest.java
Patch:
@@ -23,7 +23,7 @@
  */
 public class CommandContextTest extends ProcessEngineImplTestCase {
 
-  public void testOne() {
+  public void testCommandContextGetCurrentAfterException() {
     try {
       processEngineConfiguration.getCommandExecutor().execute(new Command<Object>() {
         public Object execute(CommandContext commandContext) {

File: activiti-pvm/src/main/java/org/activiti/pvm/impl/runtime/ExecutionImpl.java
Patch:
@@ -560,7 +560,9 @@ protected void collectVariables(Map<String, Object> collectedVariables) {
       parent.collectVariables(collectedVariables);
     }
     ensureVariablesInitialized();
-    collectedVariables.putAll(variables);
+    for (String variableName: variables.keySet()) {
+      collectedVariables.put(variableName, variables.get(variableName));
+    }
   }
 
   public void setVariables(Map<String, Object> variables) {

File: activiti-rest/src/main/java/org/activiti/rest/api/tasks/TasksGet.java
Patch:
@@ -55,7 +55,7 @@ else if (candidateGroupId != null) {
     else {
       throw new WebScriptException(Status.STATUS_BAD_REQUEST, "Tasks must be filtered with 'assignee', 'candidate' or 'candidate-group'");
     }
-    model.put("tasks", tq.paginatedList(start, size));
+    model.put("tasks", tq.listPage(start, size));
     model.put("start", start);
     model.put("total", tq.count());
     model.put("size", size);

File: activiti-engine/src/main/java/org/activiti/engine/impl/AbstractQuery.java
Patch:
@@ -96,7 +96,7 @@ public Object execute(CommandContext commandContext) {
   public abstract List<T> executeList(CommandContext commandContext, Page page);
   
   public T executeSingleResult(CommandContext commandContext) {
-    List<T> results = list();
+    List<T> results = executeList(commandContext, null);
     if (results.size() == 1) {
       return results.get(0);
     } else if (results.size() > 1) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/cfg/RuntimeSession.java
Patch:
@@ -15,10 +15,10 @@
 
 import java.util.Date;
 import java.util.List;
-import java.util.Map;
 
 import org.activiti.engine.Job;
 import org.activiti.engine.Page;
+import org.activiti.engine.impl.JobQueryImpl;
 import org.activiti.engine.impl.persistence.runtime.ByteArrayEntity;
 import org.activiti.engine.impl.persistence.runtime.ExecutionEntity;
 import org.activiti.engine.impl.persistence.runtime.JobEntity;
@@ -50,6 +50,6 @@ public interface RuntimeSession {
   List<JobEntity> findLockedJobs();
   List<TimerEntity> findUnlockedTimersByDuedate(Date duedate, int nrOfTimers);
   List<TimerEntity> findTimersByExecutionId(String executionId);
-  List<Job> dynamicFindJobs(Map<String, Object> params, Page page);
-  long dynamicJobCount(Map<String, Object> params);
+  List<Job> findJobsByQueryCriteria(JobQueryImpl jobQuery, Page page);
+  long findJobCountByQueryCriteria(JobQueryImpl jobQuery);
 }

File: activiti-engine/src/test/java/org/activiti/engine/test/bpmn/callactivity/CallActivityAdvancedTest.java
Patch:
@@ -118,7 +118,7 @@ public void testTimerOnCallActivity() {
     
     // When the timer on the subprocess is fired, the complete subprocess is destroyed
     ClockUtil.setCurrentTime(new Date(startTime.getTime() + (6 * 60 * 1000))); // + 6 minutes, timer fires on 5 minutes
-    waitForJobExecutorToProcessAllJobs(10000, 100);
+    waitForJobExecutorToProcessAllJobs(10000000, 1000000);
     
     Task escalatedTask = taskQuery.singleResult();
     assertEquals("Escalated Task", escalatedTask.getName());

File: activiti-pvm/src/main/java/org/activiti/pvm/impl/process/ProcessDefinitionImpl.java
Patch:
@@ -49,7 +49,9 @@ public PvmProcessInstance createProcessInstance() {
       if (initialActivity.isScope()) {
         scopeInstance = scopeInstance.createExecution();
         scopeInstance.setActivity(initialActivity);
-        scopeInstance.initialize();
+        if (initialActivity.isScope()) {
+          scopeInstance.initialize();
+        }
       }
     }
     

File: activiti-pvm/src/main/java/org/activiti/pvm/impl/runtime/AtomicOperationTransitionCreateScope.java
Patch:
@@ -35,7 +35,7 @@ public void execute(ExecutionImpl execution) {
         execution.setTransition(null);
         execution.setActivity(null);
         execution.setActive(false);
-        log.fine("create scope: parent scope "+execution+" continues as scoped execution "+propagatingExecution);
+        log.fine("create scope: parent "+execution+" continues as execution "+propagatingExecution);
         propagatingExecution.initialize();
 
       } else {

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/ServiceInvocationActivityBehaviour.java
Patch:
@@ -69,7 +69,5 @@ public void signal(ActivityExecution execution, String signalName, Object signal
       throw new ActivitiException("Service " + object + " is used in a serviceTask, but does not" + " implement the "
               + SignallableActivityBehavior.class.getCanonicalName() + " interface");
     }
-}
-
-
+  }
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/task/TaskEntity.java
Patch:
@@ -117,6 +117,9 @@ public Object getPersistentState() {
     persistentState.put("assignee", this.assignee);
     persistentState.put("name", this.name);
     persistentState.put("priority", this.priority);
+    if (executionId!=null) {
+      persistentState.put("executionId", this.executionId);
+    }
     if (createTime!=null) {
       persistentState.put("createTime", this.createTime);
     }

File: activiti-engine/src/test/java/org/activiti/engine/test/bpmn/callactivity/CallActivityAdvancedTest.java
Patch:
@@ -93,7 +93,7 @@ public void testCallParallelSubProcess() {
     Task taskB = tasks.get(1);
     assertEquals("Task A", taskA.getName());
     assertEquals("Task B", taskB.getName());
-    
+
     // Completing the first task should not end the subprocess
     taskService.complete(taskA.getId());
     assertEquals(1, taskQuery.list().size());

File: activiti-pvm/src/main/java/org/activiti/pvm/impl/runtime/AtomicOperationActivityEnd.java
Patch:
@@ -99,8 +99,8 @@ protected void eventNotificationsCompleted(ExecutionImpl execution) {
         if (concurrentRoot.getExecutions().size()==1) {
           ExecutionImpl lastConcurrent = concurrentRoot.getExecutions().get(0);
           concurrentRoot.setActivity(lastConcurrent.getActivity());
-          lastConcurrent.remove();
           lastConcurrent.setReplacedBy(concurrentRoot);
+          lastConcurrent.remove();
         
         } else if (concurrentRoot.getExecutions().isEmpty()) {
           ActivityBehavior parentActivityBehavior = parentActivity.getActivityBehavior();

File: activiti-pvm/src/main/java/org/activiti/pvm/impl/runtime/AtomicOperationTransitionDestroyScope.java
Patch:
@@ -66,7 +66,7 @@ public void execute(ExecutionImpl execution) {
             lastConcurrent.setConcurrent(false);
             
           } else {
-            log.fine("replacing concurrent root "+concurrentRoot+" with last concurrent "+lastConcurrent);
+            log.fine("merging last concurrent "+lastConcurrent+" into concurrent root "+concurrentRoot);
             
             // We can't just merge the data of the lastConcurrent into the concurrentRoot.
             // This is because the concurrent root might be in a takeAll-loop.  So the 

File: activiti-pvm/src/main/java/org/activiti/pvm/impl/runtime/ExecutionImpl.java
Patch:
@@ -183,6 +183,7 @@ public void destroy() {
   }
   
   public void remove() {
+    ensureParentInitialized();
     if (parent!=null) {
       parent.ensureExecutionsInitialized();
       parent.executions.remove(this);
@@ -375,6 +376,7 @@ public void start() {
   // methods that translate to operations /////////////////////////////////////
 
   public void signal(String signalName, Object signalData) {
+    ensureActivityInitialized();
     SignallableActivityBehavior activityBehavior = (SignallableActivityBehavior) activity.getActivityBehavior();
     try {
       activityBehavior.signal(this, signalName, signalData);

File: activiti-engine/src/main/java/org/activiti/engine/impl/ExecutionQueryImpl.java
Patch:
@@ -67,14 +67,14 @@ public ExecutionQueryImpl activityId(String activityId) {
   public long executeCount(CommandContext commandContext) {
     return commandContext
       .getRuntimeSession()
-      .findExecutionCountByDynamicCriteria(this);
+      .findExecutionCountByQueryCriteria(this);
   }
 
   @SuppressWarnings("unchecked")
   public List<Execution> executeList(CommandContext commandContext, Page page) {
     return (List) commandContext
       .getRuntimeSession()
-      .findExecutionsByDynamicCriteria(this);
+      .findExecutionsByQueryCriteria(this);
   }
   
   public String getProcessDefinitionKey() {

File: activiti-engine/src/main/java/org/activiti/engine/impl/ProcessInstanceQueryImpl.java
Patch:
@@ -68,14 +68,14 @@ public ProcessInstanceQueryImpl activityId(String activityId) {
   public long executeCount(CommandContext commandContext) {
     return commandContext
       .getRuntimeSession()
-      .findExecutionCountByDynamicCriteria(this);
+      .findExecutionCountByQueryCriteria(this);
   }
 
   @SuppressWarnings("unchecked")
   public List<ProcessInstance> executeList(CommandContext commandContext, Page page) {
     return (List) commandContext
       .getRuntimeSession()
-      .findExecutionsByDynamicCriteria(this);
+      .findExecutionsByQueryCriteria(this);
   }
   
   public String getProcessDefinitionKey() {

File: activiti-engine/src/main/java/org/activiti/engine/impl/RepositoryServiceImpl.java
Patch:
@@ -22,7 +22,7 @@
 import org.activiti.engine.RepositoryService;
 import org.activiti.engine.impl.cmd.DeleteDeploymentCmd;
 import org.activiti.engine.impl.cmd.DeployCmd;
-import org.activiti.engine.impl.cmd.FindDeploymentResourcesCmd;
+import org.activiti.engine.impl.cmd.FindDeploymentResourceNamesCmd;
 import org.activiti.engine.impl.cmd.FindDeploymentsCmd;
 import org.activiti.engine.impl.cmd.FindProcessDefinitionCmd;
 import org.activiti.engine.impl.cmd.FindProcessDefinitionsCmd;
@@ -68,7 +68,7 @@ public List<Deployment> findDeployments() {
 
   @SuppressWarnings("unchecked")
   public List<String> findDeploymentResourceNames(String deploymentId) {
-    return commandExecutor.execute(new FindDeploymentResourcesCmd(deploymentId));
+    return commandExecutor.execute(new FindDeploymentResourceNamesCmd(deploymentId));
   }
 
   public InputStream getResourceAsStream(String deploymentId, String resourceName) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/cfg/RuntimeSession.java
Patch:
@@ -33,8 +33,8 @@ public interface RuntimeSession {
   
   void endProcessInstance(String processInstanceId, String nonCompletionReason);
   ExecutionEntity findSubProcessInstanceBySuperExecutionId(String superExecutionId);
-  long findExecutionCountByDynamicCriteria(Object executionQuery);
-  List<ExecutionEntity> findExecutionsByDynamicCriteria(Object executionQuery);
+  long findExecutionCountByQueryCriteria(Object executionQuery);
+  List<ExecutionEntity> findExecutionsByQueryCriteria(Object executionQuery);
   List<ExecutionEntity> findChildExecutionsByParentExecutionId(String executionId);
   ExecutionEntity findExecutionById(String activityInstanceId);
   

File: activiti-engine/src/main/java/org/activiti/engine/impl/cmd/FindDeploymentResourceNamesCmd.java
Patch:
@@ -23,11 +23,11 @@
  * @author Joram Barrez
  */
 @SuppressWarnings("unchecked")
-public class FindDeploymentResourcesCmd implements Command<List> {
+public class FindDeploymentResourceNamesCmd implements Command<List> {
   
   protected String deploymentId;
   
-  public FindDeploymentResourcesCmd(String deploymentId) {
+  public FindDeploymentResourceNamesCmd(String deploymentId) {
     this.deploymentId = deploymentId;
   }
   

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/db/DbRepositorySession.java
Patch:
@@ -124,7 +124,7 @@ public List<ResourceEntity> findResourcesByDeploymentId(String deploymentId) {
   
   @SuppressWarnings("unchecked")
   public List<String> findDeploymentResourceNames(String deploymentId) {
-    return dbSqlSession.selectList("selectResourceNamesByDeploymentId", deploymentId);
+    return dbSqlSession.getSqlSession().selectList("selectResourceNamesByDeploymentId", deploymentId);
   }
 
   @SuppressWarnings("unchecked")

File: activiti-engine/src/main/java/org/activiti/engine/test/ProcessEngineTestCase.java
Patch:
@@ -289,5 +289,6 @@ public static void closeProcessEngines() {
     for (ProcessEngine processEngine: processEngines.values()) {
       processEngine.close();
     }
+    processEngines.clear();
   }
 }

File: activiti-pvm/src/main/java/org/activiti/pvm/impl/runtime/AtomicOperationProcessEnd.java
Patch:
@@ -41,6 +41,7 @@ public void execute(ExecutionImpl execution) {
       execution.setEventListenerIndex(0);
       execution.setEventName(null);
       execution.setEventSource(null);
+      execution.remove();
     }
   }
 

File: activiti-pvm/src/main/java/org/activiti/pvm/impl/runtime/AtomicOperationTransitionDestroyScope.java
Patch:
@@ -41,7 +41,7 @@ public void execute(ExecutionImpl execution) {
         parentScopeInstance = execution.getParent().getParent();
 
         log.fine("moving concurrent "+execution+" one scope up under "+parentScopeInstance);
-        concurrentRoot.removeExecution(execution);
+        concurrentRoot.getExecutions().remove(execution);
         parentScopeInstance.getExecutions().add(execution);
         execution.setParent(parentScopeInstance);
         execution.setActivity(activity);

File: activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/servicetask/JavaServiceTaskTest.java
Patch:
@@ -25,8 +25,7 @@ public class JavaServiceTaskTest extends ProcessEngineTestCase {
 
   @Deployment
   public void testJavaServiceDelegation() {
-    ProcessInstance pi = runtimeService.startProcessInstanceByKey("javaServiceDelegation", 
-            CollectionUtil.singletonMap("input", "Activiti BPM Engine"));
+    ProcessInstance pi = runtimeService.startProcessInstanceByKey("javaServiceDelegation", CollectionUtil.singletonMap("input", "Activiti BPM Engine"));
     Execution execution = runtimeService.createExecutionQuery()
       .processInstanceId(pi.getId())
       .activityId("waitState")

File: activiti-engine-examples/src/test/java/org/activiti/examples/identity/IdentityTest.java
Patch:
@@ -71,6 +71,7 @@ public void testFindGroupsByUserAndType() {
     List<Group> groups = identityService.findGroupsByUserAndType("johndoe", "security-role");
     Set<String> groupIds = getGroupIds(groups);
     Set<String> expectedGroupIds = new HashSet<String>();
+    expectedGroupIds.add("sales");
     expectedGroupIds.add("user");
     expectedGroupIds.add("admin");
     assertEquals(expectedGroupIds, groupIds);

File: activiti-engine/src/main/java/org/activiti/engine/SortOrder.java
Patch:
@@ -18,7 +18,7 @@
  */
 public enum SortOrder {
 
-  ASCENDING,
-  DESCENDING;
+  ASC,
+  DESC;
   
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/TablePageQueryImpl.java
Patch:
@@ -58,7 +58,7 @@ public TablePageQuery orderAsc(String column) {
     if (sortColumn != null) {
       throw new ActivitiException("Invalid usage: cannot use both orderAsc and orderDesc in same query");
     }
-    this.sortOrder = SortOrder.ASCENDING;
+    this.sortOrder = SortOrder.ASC;
     this.sortColumn = column;
     return this;
   }
@@ -67,7 +67,7 @@ public TablePageQuery orderDesc(String column) {
     if (sortColumn != null) {
       throw new ActivitiException("Invalid usage: cannot use both orderAsc and orderDesc in same query");
     }
-    this.sortOrder = SortOrder.DESCENDING;
+    this.sortOrder = SortOrder.DESC;
     this.sortColumn = column;
     return this;
   }

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/CallActivityBehaviour.java
Patch:
@@ -44,7 +44,7 @@ public void execute(ActivityExecution execution) throws Exception {
     processInstance.start();
   }
   
-  public void event(ActivityExecution execution, String signalEvent, Object signalData) throws Exception {
+  public void signal(ActivityExecution execution, String signalEvent, Object signalData) throws Exception {
     leave(execution);
   }
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/cfg/TaskSession.java
Patch:
@@ -14,10 +14,10 @@
 package org.activiti.engine.impl.cfg;
 
 import java.util.List;
-import java.util.Map;
 
 import org.activiti.engine.Page;
 import org.activiti.engine.Task;
+import org.activiti.engine.impl.TaskQueryImpl;
 import org.activiti.engine.impl.persistence.task.TaskEntity;
 import org.activiti.engine.impl.persistence.task.TaskInvolvementEntity;
 
@@ -35,8 +35,8 @@ public interface TaskSession {
   List<Task> findTasksByAssignee(String assignee);
   List<Task> findCandidateTasks(String userId, List<String> groupIds);
   
-  List<Task> dynamicFindTasks(Map<String, Object> params, Page page);
-  long dynamicFindTaskCount(Map<String, Object> params);
+  List<Task> findTasksByQueryCriteria(TaskQueryImpl taskQuery, Page page);
+  long findTaskCountByQueryCriteria(TaskQueryImpl taskQuery);
 
   /* TaskInvolvementEntity */
   void deleteTaskInvolvement(TaskInvolvementEntity taskInvolvement);

File: activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SaveGroupCmd.java
Patch:
@@ -28,7 +28,7 @@ public SaveGroupCmd(GroupEntity group) {
   }
   
   public void executeVoid(CommandContext commandContext) {
-    if (group.getId()==null) {
+    if (group.getRevision()==0) {
       commandContext
         .getIdentitySession()
         .insertGroup(group);

File: activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SaveUserCmd.java
Patch:
@@ -29,7 +29,7 @@ public SaveUserCmd(User user) {
   }
   
   public void executeVoid(CommandContext commandContext) {
-    if (user.getId()==null) {
+    if (user.getRevision()==0) {
       commandContext
         .getIdentitySession()
         .insertUser(user);

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/db/DbManagementSession.java
Patch:
@@ -93,7 +93,7 @@ public TablePage getTablePage(String tableName, int offset, int maxResults,
     params.put("tableName", tableName);
     if (sortColumn != null) {
       params.put("sortColumn", sortColumn);
-      if (sortOrder.equals(SortOrder.ASCENDING)) {
+      if (sortOrder.equals(SortOrder.ASC)) {
         params.put("sortOrder", "asc");
       } else {
         params.put("sortOrder", "desc");

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/db/DbSqlSessionFactory.java
Patch:
@@ -62,7 +62,7 @@ public class DbSqlSessionFactory implements SessionFactory, ProcessEngineConfigu
   protected static final Map<String, Map<String, String>> databaseSpecificStatements = new HashMap<String, Map<String,String>>();
 
   static {
-    addDatabaseSpecificStatement("mysql", "selectTaskByDynamicCriteria", "selectTaskByDynamicCriteria_mysql");
+    addDatabaseSpecificStatement("mysql", "selectTaskByQueryCriteria", "selectTaskByQueryCriteria_mysql");
     addDatabaseSpecificStatement("mysql", "selectNextJobsToExecute", "selectNextJobsToExecute_mysql");
   }
   

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/runtime/ExecutionEntity.java
Patch:
@@ -106,6 +106,8 @@ public ExecutionEntity(ProcessDefinitionEntity processDefinition) {
 
     // reset the process instance in order to have the db-generated process instance id available
     setProcessInstance(this);
+    
+    this.variables = VariableMap.createNewInitialized(id, processInstanceId);
   }
 
   @Override

File: activiti-engine/src/main/java/org/activiti/engine/test/ProcessEngineTestCase.java
Patch:
@@ -40,7 +40,6 @@
 import org.activiti.engine.impl.ProcessEngineImpl;
 import org.activiti.engine.impl.bpmn.deployer.BpmnDeployer;
 import org.activiti.engine.impl.jobexecutor.JobExecutor;
-import org.activiti.engine.impl.persistence.db.DbSqlSessionFactory;
 import org.activiti.engine.impl.util.ClockUtil;
 import org.activiti.pvm.impl.util.ClassNameUtil;
 import org.activiti.pvm.impl.util.LogUtil.ThreadLogMode;
@@ -226,7 +225,7 @@ public static String getBpmnProcessDefinitionResource(Class< ? > type, String na
   protected void annotationDeploymentAfter() {
     for (String deploymentId: deploymentsToDeleteAfterTestMethod) {
       log.fine("annotation @Deployment deletes deployment for "+ClassNameUtil.getClassNameWithoutPackage(this)+"."+getName());
-      repositoryService.deleteDeployment(deploymentId);
+      repositoryService.deleteDeploymentCascade(deploymentId);
     }
   }
 

File: activiti-pvm/src/main/java/org/activiti/pvm/impl/runtime/ExecutionImpl.java
Patch:
@@ -236,6 +236,7 @@ public void end() {
     // if there is a parent 
     ensureParentInitialized();
     if (parent!=null) {
+      ensureActivityInitialized();
       activity = activity.getParentActivity();
       while(activity!=null && !activity.isScope()) {
         // TODO add destroy scope if activity is scope

File: activiti-engine-test-cfg/src/test/java/org/activiti/test/cfg/spring/SpringTest.java
Patch:
@@ -84,7 +84,7 @@ public void testProcessExecutionWithTaskAssignedFromExpression() {
     List<Task> tasks = processEngine.getTaskService().findAssignedTasks("kermit");
     assertEquals(before + 1, tasks.size());
 
-    processEngine.getRuntimeService().deleteProcessInstance(processInstance.getId());
+    processEngine.getRuntimeService().endProcessInstance(processInstance.getId());
     
   }
 
@@ -95,7 +95,7 @@ public void testJavaServiceDelegation() {
             CollectionUtil.singletonMap("input", "Activiti BPM Engine"));
     ActivityInstance activityInstance = runtimeService.findActivityInstanceByProcessInstanceIdAndActivityId(pi.getId(), "waitState");
     assertEquals("ACTIVITI BPM ENGINE", runtimeService.getVariable(activityInstance.getId(), "input"));
-    processEngine.getRuntimeService().deleteProcessInstance(activityInstance.getId());
+    processEngine.getRuntimeService().endProcessInstance(activityInstance.getId());
   }
 
   @Test

File: activiti-engine/src/main/java/org/activiti/engine/RuntimeService.java
Patch:
@@ -36,7 +36,7 @@ public interface RuntimeService {
   ProcessInstance startProcessInstanceById(String processDefinitionId, Map<String, Object> variables);
   
   /** delete an existing runtime process instance */
-  void deleteProcessInstance(String processInstanceId);
+  void endProcessInstance(String processInstanceId, String nonCompletionReason);
   
   /** gets the details of a process instance 
    * @return the process instance or null if no process instance could be found with the given id. */

File: activiti-engine/src/main/java/org/activiti/engine/impl/RuntimeServiceImpl.java
Patch:
@@ -19,7 +19,7 @@
 import org.activiti.engine.ProcessInstance;
 import org.activiti.engine.ProcessInstanceQuery;
 import org.activiti.engine.RuntimeService;
-import org.activiti.engine.impl.cmd.DeleteProcessInstanceCmd;
+import org.activiti.engine.impl.cmd.EndProcessInstanceCmd;
 import org.activiti.engine.impl.cmd.FindActivitiyInstanceCmd;
 import org.activiti.engine.impl.cmd.FindActivityInstanceInActivityCmd;
 import org.activiti.engine.impl.cmd.FindProcessInstanceCmd;
@@ -38,8 +38,8 @@ public ActivityInstance findActivityInstanceById(String activityInstanceId) {
     return commandExecutor.execute(new FindActivitiyInstanceCmd(activityInstanceId));
   }
 
-  public void deleteProcessInstance(String processInstanceId) {
-    commandExecutor.execute(new DeleteProcessInstanceCmd(processInstanceId));
+  public void endProcessInstance(String processInstanceId, String nonCompletionReason) {
+    commandExecutor.execute(new EndProcessInstanceCmd(processInstanceId, nonCompletionReason));
   }
 
   public ProcessInstance startProcessInstanceByKey(String processDefinitionKey) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/BpmnActivityBehavior.java
Patch:
@@ -98,7 +98,7 @@ protected void performOutgoingBehavior(ActivityContext activityContext, boolean
           log.fine("No outgoing sequence flow found for " + activityContext.getActivity().getId() 
                   + ". Ending execution.");
         }
-        activityContext.end();
+        activityContext.endActivityInstance();
         
       }
   }

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/NoneEndEventActivity.java
Patch:
@@ -22,7 +22,7 @@ public class NoneEndEventActivity extends AbstractBpmnActivity {
   
   public void start(ActivityContext activityContext) throws Exception {
     
-    activityContext.end();
+    activityContext.endActivityInstance();
     
 //    // TODO: needs cleanup!
 //    ActivityImpl currentActivity = (ActivityImpl) activityContext.getActivity();

File: activiti-engine/src/main/java/org/activiti/engine/impl/cfg/RuntimeSession.java
Patch:
@@ -34,7 +34,7 @@
  */
 public interface RuntimeSession {
   
-  void deleteProcessInstance(String processInstanceId);
+  void endProcessInstance(String processInstanceId, String nonCompletionReason);
   ProcessInstanceEntity findProcessInstanceById(String processInstanceId);
   List<ProcessInstanceEntity> findProcessInstancesByProcessDefintionId(String processDefinitionId);
   ProcessInstanceEntity findSubProcessInstance(String superExecutionId);

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/db/DbRepositorySession.java
Patch:
@@ -96,7 +96,7 @@ public void deleteDeployment(String deploymentId, boolean cascade) {
         for (ProcessInstance processInstance: processInstances) {
           commandContext
             .getRuntimeSession()
-            .deleteProcessInstance(processInstance.getId());
+            .endProcessInstance(processInstance.getId());
         }
       }
     }

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/db/DbRuntimeSession.java
Patch:
@@ -43,8 +43,8 @@ public DbRuntimeSession() {
     this.dbSqlSession = CommandContext.getCurrentSession(DbSqlSession.class);
   }
 
-  public void deleteProcessInstance(String processInstanceId) {
-    findProcessInstanceById(processInstanceId).delete();
+  public void endProcessInstance(String processInstanceId, String nonCompletionReason) {
+    findProcessInstanceById(processInstanceId).end();
   }
 
   public ProcessInstanceEntity findProcessInstanceById(String processInstanceId) {

File: activiti-pvm/src/main/java/org/activiti/pvm/impl/process/ActivityImpl.java
Patch:
@@ -30,6 +30,7 @@
  */
 public class ActivityImpl extends ScopeImpl implements PvmActivity {
 
+  private static final long serialVersionUID = 1L;
   protected List<TransitionImpl> outgoingTransitions = new ArrayList<TransitionImpl>();
   protected Map<String, TransitionImpl> namedOutgoingTransitions = new HashMap<String, TransitionImpl>();
   protected List<TransitionImpl> incomingTransitions = new ArrayList<TransitionImpl>();

File: activiti-pvm/src/main/java/org/activiti/pvm/impl/process/TransitionImpl.java
Patch:
@@ -23,6 +23,8 @@
  */
 public class TransitionImpl extends ProcessElementImpl implements PvmTransition {
 
+  private static final long serialVersionUID = 1L;
+  
   protected ActivityImpl source;
   protected ActivityImpl destination;
 

File: activiti-pvm/src/main/java/org/activiti/pvm/impl/runtime/ProcessInstanceImpl.java
Patch:
@@ -25,6 +25,8 @@
  */
 public class ProcessInstanceImpl extends ScopeInstanceImpl implements PvmProcessInstance {
   
+  private static final long serialVersionUID = 1L;
+
   protected ProcessInstanceImpl() {
   }
   
@@ -36,7 +38,7 @@ public void start() {
     ExecutionContextImpl.startProcessInstance(this);
   }
   
-  public void remove() {
+  public void destroy() {
   }
 
   public List<String> findActivityIds() {

File: activiti-pvm/src/main/java/org/activiti/pvm/process/PvmProcessDefinition.java
Patch:
@@ -19,10 +19,10 @@
 /**
  * @author Tom Baeyens
  */
-public interface PvmProcessDefinition {
+public interface PvmProcessDefinition extends PvmScope {
 
   PvmProcessInstance createProcessInstance();
 
-  Object getProperty(String name);
+  PvmActivity getInitial();
 
 }

File: activiti-pvm/src/main/java/org/activiti/pvm/runtime/PvmScopeInstance.java
Patch:
@@ -13,13 +13,14 @@
 
 package org.activiti.pvm.runtime;
 
+import java.io.Serializable;
 import java.util.Map;
 
 
 /**
  * @author Tom Baeyens
  */
-public interface PvmScopeInstance {
+public interface PvmScopeInstance extends Serializable {
 
   boolean hasVariable(String variableName);
 

File: activiti-pvm/src/test/java/org/activiti/pvm/test/PvmConcurrencyTest.java
Patch:
@@ -20,6 +20,7 @@
 import org.activiti.pvm.runtime.PvmActivityInstance;
 import org.activiti.pvm.runtime.PvmProcessInstance;
 import org.activiti.test.pvm.activities.Automatic;
+import org.activiti.test.pvm.activities.End;
 import org.activiti.test.pvm.activities.ParallelGateway;
 import org.activiti.test.pvm.activities.WaitState;
 import org.junit.Test;
@@ -56,14 +57,14 @@ public void testSimpleAutmaticConcurrency() {
         .transition("end")
       .endActivity()
       .createActivity("end")
-        .behavior(new WaitState())
+        .behavior(new End())
       .endActivity()
     .buildProcessDefinition();
     
     PvmProcessInstance processInstance = processDefinition.createProcessInstance(); 
     processInstance.start();
     
-    assertNotNull(processInstance.findActivityInstance("end"));
+    assertTrue(processInstance.isEnded());
   }
 
   @Test

File: activiti-pvm/src/test/java/org/activiti/test/pvm/activities/Automatic.java
Patch:
@@ -24,7 +24,7 @@
 public class Automatic implements ActivityBehavior {
 
   public void start(ActivityContext activityExecutionContext) {
-    PvmTransition transition = activityExecutionContext.getOutgoingTransitions().get(0);
+    PvmTransition transition = activityExecutionContext.getActivity().getOutgoingTransitions().get(0);
     activityExecutionContext.take(transition);
   }
 

File: activiti-pvm/src/test/java/org/activiti/test/pvm/activities/End.java
Patch:
@@ -23,7 +23,7 @@
 public class End implements ActivityBehavior {
 
   public void start(ActivityContext activityContext) throws Exception {
-    activityContext.end();
+    activityContext.endActivityInstance();
   }
 
 }

File: activiti-pvm/src/test/java/org/activiti/test/pvm/activities/WaitState.java
Patch:
@@ -27,7 +27,7 @@ public void start(ActivityContext activityExecutionContext) {
   }
   
   public void signal(ActivityContext activityExecutionContext, String signal, Object signalData) {
-    PvmTransition transition = activityExecutionContext.getOutgoingTransitions().get(0);
+    PvmTransition transition = activityExecutionContext.getActivity().getOutgoingTransitions().get(0);
     activityExecutionContext.take(transition);
   }
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/db/DbRuntimeSession.java
Patch:
@@ -44,12 +44,11 @@ public DbRuntimeSession() {
   }
 
   public void deleteProcessInstance(String processInstanceId) {
-    findProcessInstanceById(processInstanceId)
-      .delete();
+    findProcessInstanceById(processInstanceId).delete();
   }
 
   public ProcessInstanceEntity findProcessInstanceById(String processInstanceId) {
-    throw new UnsupportedOperationException("please implement me");
+    return (ProcessInstanceEntity) dbSqlSession.selectOne("selectProcessInstanceById", processInstanceId);
   }
 
   @SuppressWarnings("unchecked")

File: activiti-engine-test-cfg/src/test/java/org/activiti/test/cfg/spring/SpringTest.java
Patch:
@@ -27,9 +27,9 @@
 import org.activiti.engine.impl.persistence.runtime.ProcessInstanceEntity;
 import org.activiti.engine.impl.persistence.task.TaskDefinition;
 import org.activiti.engine.impl.util.CollectionUtil;
-import org.activiti.engine.impl.util.LogUtil;
 import org.activiti.pvm.impl.process.ActivityImpl;
 import org.activiti.pvm.impl.runtime.ActivityInstanceImpl;
+import org.activiti.pvm.impl.util.LogUtil;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;

File: activiti-engine/src/main/java/org/activiti/engine/ProcessInstanceQuery.java
Patch:
@@ -22,6 +22,7 @@
  */
 public interface ProcessInstanceQuery {
   
+  ProcessInstanceQuery processInstanceId(String processInstanceId);
   ProcessInstanceQuery processDefinitionKey(String processDefinitionKey);
   
   long count();
@@ -31,5 +32,4 @@ public interface ProcessInstanceQuery {
   List<ProcessInstance> paginatedList(int start, int maxResults);
   
   ProcessInstance singleResult();
-
 }

File: activiti-engine/src/main/java/org/activiti/engine/impl/JobQueryImpl.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * @author jbarrez
  */
-public class JobQueryImpl extends AbstractListQuery<Job> implements JobQuery {
+public class JobQueryImpl extends AbstractQuery<Job> implements JobQuery {
   
   protected String processInstanceId;
   
@@ -40,13 +40,13 @@ public JobQueryImpl(CommandExecutor commandExecutor) {
     super(commandExecutor);
   }
 
-  protected long executeCount(CommandContext commandContext) {
+  public long executeCount(CommandContext commandContext) {
     return commandContext
       .getRuntimeSession()
       .dynamicJobCount(createParamMap());
   }
 
-  protected List<Job> executeList(CommandContext commandContext, Page page) {
+  public List<Job> executeList(CommandContext commandContext, Page page) {
     return commandContext
       .getRuntimeSession()
       .dynamicFindJobs(createParamMap(), page);

File: activiti-engine/src/main/java/org/activiti/engine/impl/RuntimeServiceImpl.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * @author Tom Baeyens
  */
-public class ProcessServiceImpl extends ServiceImpl implements RuntimeService {
+public class RuntimeServiceImpl extends ServiceImpl implements RuntimeService {
 
   public ActivityInstance findActivityInstanceById(String activityInstanceId) {
     return commandExecutor.execute(new FindActivitiyInstanceCmd(activityInstanceId));

File: activiti-engine/src/main/java/org/activiti/engine/impl/TaskQueryImpl.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * @author Joram Barrez
  */
-public class TaskQueryImpl extends AbstractListQuery<Task> implements TaskQuery {
+public class TaskQueryImpl extends AbstractQuery<Task> implements TaskQuery {
   
   protected String name;
   
@@ -99,13 +99,13 @@ public TaskQuery orderDesc(String column) {
     return this;
   }
   
-  protected List<Task> executeList(CommandContext commandContext, Page page) {
+  public List<Task> executeList(CommandContext commandContext, Page page) {
     return commandContext
       .getTaskSession()
       .dynamicFindTasks(createParamMap(), page);
   }
   
-  protected long executeCount(CommandContext commandContext) {
+  public long executeCount(CommandContext commandContext) {
     return commandContext
       .getTaskSession()
       .dynamicFindTaskCount(createParamMap());

File: activiti-engine/src/main/java/org/activiti/engine/impl/ant/DeployBarTask.java
Patch:
@@ -23,7 +23,7 @@
 import org.activiti.engine.ProcessEngine;
 import org.activiti.engine.ProcessEngines;
 import org.activiti.engine.RepositoryService;
-import org.activiti.engine.impl.util.LogUtil;
+import org.activiti.pvm.impl.util.LogUtil;
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.DirectoryScanner;
 import org.apache.tools.ant.Task;

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/UserTaskActivity.java
Patch:
@@ -50,7 +50,7 @@ public void start(ActivityContext activityContext) throws Exception {
     handleAssignments(task, activityContext);
   }
 
-  public void event(ActivityContext activityContext, Object event) throws Exception {
+  public void signal(ActivityContext activityContext, String signalName, Object signalData) throws Exception {
     leave(activityContext);
   }
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfiguration.java
Patch:
@@ -33,7 +33,7 @@
 import org.activiti.engine.impl.IdentityServiceImpl;
 import org.activiti.engine.impl.ManagementServiceImpl;
 import org.activiti.engine.impl.ProcessEngineImpl;
-import org.activiti.engine.impl.ProcessServiceImpl;
+import org.activiti.engine.impl.RuntimeServiceImpl;
 import org.activiti.engine.impl.RepositoryServiceImpl;
 import org.activiti.engine.impl.TaskServiceImpl;
 import org.activiti.engine.impl.bpmn.deployer.BpmnDeployer;
@@ -125,7 +125,7 @@ public ProcessEngineConfiguration() {
     transactionContextFactory = new StandaloneIbatisTransactionContextFactory();
 
     repositoryService = new RepositoryServiceImpl();
-    runtimeService = new ProcessServiceImpl();
+    runtimeService = new RuntimeServiceImpl();
     taskService = new TaskServiceImpl();
     managementService = new ManagementServiceImpl();
     identityService = new IdentityServiceImpl();

File: activiti-engine/src/main/java/org/activiti/engine/impl/cfg/RepositorySession.java
Patch:
@@ -34,7 +34,7 @@ public interface RepositorySession {
   
   /** deletes the deployment and cascades deletion to the contained resources
    * and process definitions */
-  void deleteDeployment(String deploymentId);
+  void deleteDeployment(String deploymentId, boolean cascade);
   
   // TODO replace with query api
   List<DeploymentEntity> findDeployments();

File: activiti-engine/src/main/java/org/activiti/engine/impl/cfg/RuntimeSession.java
Patch:
@@ -20,6 +20,7 @@
 import org.activiti.engine.Job;
 import org.activiti.engine.Page;
 import org.activiti.engine.ProcessInstance;
+import org.activiti.engine.impl.ProcessInstanceQueryImpl;
 import org.activiti.engine.impl.persistence.runtime.ActivityInstanceEntity;
 import org.activiti.engine.impl.persistence.runtime.ByteArrayEntity;
 import org.activiti.engine.impl.persistence.runtime.JobEntity;
@@ -33,13 +34,12 @@
  */
 public interface RuntimeSession {
   
-  void insertProcessInstance(ProcessInstanceEntity processInstance);
   void deleteProcessInstance(String processInstanceId);
   ProcessInstanceEntity findProcessInstanceById(String processInstanceId);
   List<ProcessInstanceEntity> findProcessInstancesByProcessDefintionId(String processDefinitionId);
   ProcessInstanceEntity findSubProcessInstance(String superExecutionId);
-  long findProcessInstanceCountByDynamicCriteria(Map<String, Object> params);
-  List<ProcessInstance> findProcessInstancesByDynamicCriteria(Map<String, Object> params);
+  long findProcessInstanceCountByDynamicCriteria(ProcessInstanceQueryImpl processInstanceQuery);
+  List<ProcessInstance> findProcessInstancesByDynamicCriteria(ProcessInstanceQueryImpl processInstanceQuery);
 
   void insertActivityInstance(ActivityInstanceEntity activityInstance);
   void deleteActivityInstance(String activityInstanceId);

File: activiti-engine/src/main/java/org/activiti/engine/impl/interceptor/DefaultCommandExecutor.java
Patch:
@@ -21,7 +21,7 @@
 import org.activiti.engine.ActivitiException;
 import org.activiti.engine.impl.cfg.ProcessEngineConfiguration;
 import org.activiti.engine.impl.cfg.ProcessEngineConfigurationAware;
-import org.activiti.engine.impl.util.ClassNameUtil;
+import org.activiti.pvm.impl.util.ClassNameUtil;
 
 /**
  * @author Tom Baeyens

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/db/DbSqlSession.java
Patch:
@@ -24,8 +24,8 @@
 import org.activiti.engine.impl.interceptor.Session;
 import org.activiti.engine.impl.persistence.PersistentObject;
 import org.activiti.engine.impl.persistence.runtime.VariableInstanceEntity;
-import org.activiti.engine.impl.util.ClassNameUtil;
 import org.activiti.engine.impl.variable.DeserializedObject;
+import org.activiti.pvm.impl.util.ClassNameUtil;
 import org.apache.ibatis.session.RowBounds;
 import org.apache.ibatis.session.SqlSession;
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/db/DbSqlSessionFactory.java
Patch:
@@ -36,9 +36,9 @@
 import org.activiti.engine.impl.interceptor.Session;
 import org.activiti.engine.impl.interceptor.SessionFactory;
 import org.activiti.engine.impl.persistence.PersistentObject;
-import org.activiti.engine.impl.util.ClassNameUtil;
 import org.activiti.engine.impl.util.IoUtil;
 import org.activiti.engine.impl.variable.Type;
+import org.activiti.pvm.impl.util.ClassNameUtil;
 import org.apache.ibatis.builder.xml.XMLConfigBuilder;
 import org.apache.ibatis.datasource.pooled.PooledDataSource;
 import org.apache.ibatis.mapping.Environment;
@@ -158,6 +158,7 @@ private String getStatement(Class<?> persistentObjectClass, Map<Class<?>,String>
       return statement;
     }
     statement = prefix+ClassNameUtil.getClassNameWithoutPackage(persistentObjectClass);
+    statement = statement.substring(0, statement.length()-6);
     cachedStatements.put(persistentObjectClass, statement);
     return statement;
   }
@@ -252,7 +253,7 @@ public static void executeSchemaResource(String operation, String databaseName,
         if (!ddlStatement.startsWith("#")) {
           Statement jdbcStatement = connection.createStatement();
           try {
-            log.fine("\n" + ddlStatement);
+            log.finest("\n" + ddlStatement);
             jdbcStatement.execute(ddlStatement);
             jdbcStatement.close();
           } catch (Exception e) {

File: activiti-engine/src/main/java/org/activiti/engine/test/ProcessEngineImplTestCase.java
Patch:
@@ -15,7 +15,7 @@
 
 import org.activiti.engine.impl.ProcessEngineImpl;
 import org.activiti.engine.impl.cfg.ProcessEngineConfiguration;
-import org.activiti.engine.impl.util.LogUtil.ThreadLogMode;
+import org.activiti.pvm.impl.util.LogUtil.ThreadLogMode;
 
 
 /** JUnit 3 style base class that also exposes selected implementation 

File: activiti-engine/src/main/java/org/activiti/impl/event/AbstractProcessInstanceEvent.java
Patch:
@@ -35,7 +35,7 @@ public abstract class AbstractProcessInstanceEvent<T> extends AbstractProcessEve
    * Standard constructor used to create a new process event based on the given
    * relations.
    *
-   * @param processDefinitionId the id of the process definition this event is
+   * @param processInstanceId the id of the process definition this event is
    * related to (must not be <code>null</code>)
    * @param processInstanceId the id of the process instance this event is
    * related to (must not be <code>null</code>)

File: activiti-engine/src/main/java/org/activiti/test/LogInitializer.java
Patch:
@@ -18,8 +18,8 @@
 import junit.framework.AssertionFailedError;
 
 import org.activiti.engine.impl.util.ClockUtil;
-import org.activiti.engine.impl.util.LogUtil;
-import org.activiti.engine.impl.util.LogUtil.ThreadLogMode;
+import org.activiti.pvm.impl.util.LogUtil;
+import org.activiti.pvm.impl.util.LogUtil.ThreadLogMode;
 import org.junit.rules.MethodRule;
 import org.junit.runners.model.FrameworkMethod;
 import org.junit.runners.model.Statement;

File: activiti-pvm/src/main/java/org/activiti/pvm/impl/util/LogUtil.java
Patch:
@@ -10,7 +10,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.activiti.engine.impl.util;
+package org.activiti.pvm.impl.util;
 
 import java.io.InputStream;
 import java.io.PrintWriter;
@@ -25,7 +25,7 @@
 import java.util.logging.LogManager;
 import java.util.logging.LogRecord;
 
-import org.activiti.engine.ActivitiException;
+import org.activiti.pvm.PvmException;
 
 /**
  * @author Tom Baeyens
@@ -65,7 +65,7 @@ public static void readJavaUtilLoggingConfigFromClasspath() {
         inputStream.close();
       }
     } catch (Exception e) {
-      throw new ActivitiException("couldn't initialize logging properly", e);
+      throw new PvmException("couldn't initialize logging properly", e);
     }
   }
 

File: activiti-pvm/src/test/java/org/activiti/pvm/test/PvmTest.java
Patch:
@@ -1,8 +1,6 @@
 package org.activiti.pvm.test;
 import java.util.ArrayList;
 
-import junit.framework.TestCase;
-
 import org.activiti.pvm.ProcessDefinitionBuilder;
 import org.activiti.pvm.process.PvmProcessDefinition;
 import org.activiti.pvm.runtime.PvmActivityInstance;
@@ -28,7 +26,7 @@
 /**
  * @author Tom Baeyens
  */
-public class PvmTest extends TestCase {
+public class PvmTest extends PvmTestCase {
 
   public void testBasicLinearActivities() {
     PvmProcessDefinition processDefinition = new ProcessDefinitionBuilder()

File: activiti-pvm/src/test/java/org/activiti/pvm/test/PvmVariablesTest.java
Patch:
@@ -12,8 +12,6 @@
  */
 package org.activiti.pvm.test;
 
-import static org.junit.Assert.*;
-
 import java.util.HashMap;
 import java.util.Map;
 
@@ -28,7 +26,7 @@
 /**
  * @author Tom Baeyens
  */
-public class PvmVariablesTest {
+public class PvmVariablesTest extends PvmTestCase {
 
   @Test
   public void testVariables() {

File: activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessDefinitionFormGet.java
Patch:
@@ -26,7 +26,7 @@ public class ProcessDefinitionFormGet extends ActivitiWebScript {
   @Override
   protected void executeWebScript(WebScriptRequest req, Status status, Cache cache, Map<String, Object> model)
   {
-    String processDefinitionId = getMandatoryPathParameter(req, "processDefinitionId");
+    String processDefinitionId = getMandatoryPathParameter(req, "processInstanceId");
     Object processDefinitionForm = getRepositoryService().getStartFormById(processDefinitionId);
     if (processDefinitionForm != null) {
       if (processDefinitionForm instanceof String) {

File: activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessDefinitionGet.java
Patch:
@@ -26,7 +26,7 @@ public class ProcessDefinitionGet extends ActivitiWebScript
   @Override
   protected void executeWebScript(WebScriptRequest req, Status status, Cache cache, Map<String, Object> model)
   {
-    String processDefinitionId = getMandatoryPathParameter(req, "processDefinitionId");
+    String processDefinitionId = getMandatoryPathParameter(req, "processInstanceId");
     model.put("processDefinition", getRepositoryService().findProcessDefinitionById(processDefinitionId));
   }
 

File: activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessInstancePost.java
Patch:
@@ -40,9 +40,9 @@ public class ProcessInstancePost extends ActivitiWebScript
   protected void executeWebScript(WebScriptRequest req, Status status, Cache cache, Map<String, Object> model)
   {
     ActivitiWebScriptBody body = getBody(req);
-    String processDefinitionId = getMandatoryString(body, "processDefinitionId");
+    String processDefinitionId = getMandatoryString(body, "processInstanceId");
     Map<String, Object> variables = getFormVariables(body);
-    variables.remove("processDefinitionId");
+    variables.remove("processInstanceId");
     model.put("instance", getRuntimeService().startProcessInstanceById(processDefinitionId, variables));
   }
 

File: activiti-engine/src/main/java/org/activiti/engine/ActivitiOptimisticLockingException.java
Patch:
@@ -15,7 +15,7 @@
 
 /**
  * is thrown when an optimistic locking occurs in the datastore 
- * caused by concurrent access of the same data entry. 
+ * caused by concurrent access of the same signalData entry. 
  * 
  * @author Tom Baeyens
  * @author Joram Barrez

File: activiti-engine/src/main/java/org/activiti/engine/ManagementService.java
Patch:
@@ -40,7 +40,7 @@ public interface ManagementService {
  
   /**
    * creates a {@link TablePageQuery} that can be used to fetch {@link TablePage}
-   * containing specific sections of table row data.
+   * containing specific sections of table row signalData.
    */
   TablePageQuery createTablePageQuery();
   

File: activiti-engine/src/main/java/org/activiti/engine/TableMetaData.java
Patch:
@@ -17,7 +17,7 @@
 
 
 /**
- * data structure containing meta data (column names, column types, etc.) 
+ * signalData structure containing meta signalData (column names, column types, etc.) 
  * about a certain database table.
  * 
  * @author Joram Barrez

File: activiti-engine/src/main/java/org/activiti/engine/TablePage.java
Patch:
@@ -40,7 +40,7 @@ public class TablePage {
   protected long start;
   
   /**
-   * Indicates the key or column on which the data is sorted.
+   * Indicates the key or column on which the signalData is sorted.
    */
   protected String sort;
   

File: activiti-engine/src/main/java/org/activiti/engine/TaskService.java
Patch:
@@ -36,7 +36,7 @@ public interface TaskService {
   Task newTask(String taskId);
 	
 	/**
-	 * Saves the given task to the persistent data store.
+	 * Saves the given task to the persistent signalData store.
 	 */
 	void saveTask(Task task);
 	

File: activiti-engine/src/main/java/org/activiti/engine/impl/HistoricDataServiceImpl.java
Patch:
@@ -22,7 +22,7 @@
  * @author Tom Baeyens
  * @author Christian Stettler
  */
-// TODO: define/implement semantics of historic data: only completed processes vs. also ongoing ones
+// TODO: define/implement semantics of historic signalData: only completed processes vs. also ongoing ones
 public class HistoricDataServiceImpl extends ServiceImpl implements HistoricDataService {
 
   public HistoricActivityInstance findHistoricActivityInstance(String activityId, String processInstanceId) {
@@ -41,7 +41,7 @@ public HistoricProcessInstance findHistoricProcessInstance(String processInstanc
 //  }
 //
 //  public void registerEventConsumers(ProcessEventBus processEventBus) {
-//    // TODO: where/how to register historic data service with event bus?
+//    // TODO: where/how to register historic signalData service with event bus?
 //    
 //    processEventBus.subscribe(new ProcessInstanceStartedEventConsumer(), ProcessInstanceStartedEvent.class);
 //    processEventBus.subscribe(new ProcessInstanceEndedEventConsumer(), ProcessInstanceEndedEvent.class);

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/ExclusiveGatewayActivity.java
Patch:
@@ -23,7 +23,7 @@
 
 
 /**
- * implementation of the Exclusive Gateway/XOR gateway/exclusive data=based gateway
+ * implementation of the Exclusive Gateway/XOR gateway/exclusive signalData=based gateway
  * as defined in the BPMN specification.
  * 
  * @author Joram Barrez

File: activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java
Patch:
@@ -216,7 +216,7 @@ public Operation parseOperation(Element operationElement, BpmnInterface bpmnInte
    *          The root element of the XML file.
    */
   public void parseProcessDefinitions(Element definitionsElement) {
-    // TODO: parse specific definitions data (id, imports, etc)
+    // TODO: parse specific definitions signalData (id, imports, etc)
     for (Element processElement : definitionsElement.elements("process")) {
       processDefinitions.add(parseProcess(processElement));
     }

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/identity/UserEntity.java
Patch:
@@ -41,7 +41,7 @@ public UserEntity(String id) {
     this.id = id;
   }
   
-  /** update this user by copying all the given user's data into this user.
+  /** update this user by copying all the given user's signalData into this user.
    * @see SaveUserCmd */
   public void update(UserEntity user) {
     this.firstName = user.getFirstName();

File: activiti-engine/src/main/java/org/activiti/engine/impl/util/json/CDL.java
Patch:
@@ -27,10 +27,10 @@ of this software and associated documentation files (the "Software"), to deal
 /**
  * This provides static methods to convert comma delimited text into a
  * JSONArray, and to covert a JSONArray into comma delimited text. Comma
- * delimited text is a very popular format for data interchange. It is
+ * delimited text is a very popular format for signalData interchange. It is
  * understood by most database, spreadsheet, and organizer programs.
  * <p>
- * Each row of text represents a row in a table or a data record. Each row
+ * Each row of text represents a row in a table or a signalData record. Each row
  * ends with a NEWLINE character. Each row contains one or more values.
  * Values are separated by commas. A value can contain any character except
  * for comma, unless is is wrapped in single quotes or double quotes.

File: activiti-engine/src/main/java/org/activiti/engine/impl/util/json/XML.java
Patch:
@@ -284,15 +284,15 @@ private static boolean parse(XMLTokener x, JSONObject context,
     /**
      * Convert a well-formed (but not necessarily valid) XML string into a
      * JSONObject. Some information may be lost in this transformation
-     * because JSON is a data format and XML is a document format. XML uses
+     * because JSON is a signalData format and XML is a document format. XML uses
      * elements, attributes, and content text, while JSON uses unordered
      * collections of name/value pairs and arrays of values. JSON does not
      * does not like to distinguish between elements and attributes.
      * Sequences of similar elements are represented as JSONArrays. Content
      * text may be placed in a "content" member. Comments, prologs, DTDs, and
      * <code>&lt;[ [ ]]></code> are ignored.
      * @param string The source string.
-     * @return A JSONObject containing the structured data from the XML string.
+     * @return A JSONObject containing the structured signalData from the XML string.
      * @throws JSONException
      */
     public static JSONObject toJSONObject(String string) throws JSONException {

File: activiti-engine/src/main/java/org/activiti/test/ProcessDeployer.java
Patch:
@@ -166,7 +166,7 @@ private DeploymentBuilder getDeploymentBuilderProxy(final DeploymentBuilder buil
   }
 
   /**
-   * Registers the given deployment for post-test clean up. All the related data
+   * Registers the given deployment for post-test clean up. All the related signalData
    * such as process instances, tasks, etc will be deleted when the test case
    * has run.
    */

File: activiti-pvm/src/main/java/org/activiti/pvm/impl/runtime/ScopeInstanceImpl.java
Patch:
@@ -57,7 +57,7 @@ public void removeActivityInstance(ActivityInstanceImpl activityInstance) {
     activityInstances.remove(activityInstance);
     activityInstance.setParent(null);
   }
-  
+
   public List<ActivityInstanceImpl> findActivityInstances(String activityId) {
     List<ActivityInstanceImpl> foundActivityInstances = new ArrayList<ActivityInstanceImpl>();
     collectActivityInstances(foundActivityInstances, activityId);
@@ -210,4 +210,5 @@ public boolean isEnded() {
   public void setEnded(boolean isEnded) {
     this.isEnded = isEnded;
   }
+
 }

File: activiti-pvm/src/main/java/org/activiti/pvm/runtime/PvmScopeInstance.java
Patch:
@@ -30,4 +30,6 @@ public interface PvmScopeInstance {
   Map<String, Object> getVariables();
 
   PvmScopeInstance getParent();
+  
+  boolean isEnded();
 }

File: activiti-rest/src/main/java/org/activiti/rest/api/management/TableDataGet.java
Patch:
@@ -21,15 +21,15 @@
 import java.util.Map;
 
 /**
- * Returns data, metadata and paging info about a table.
+ * Returns signalData, metadata and paging info about a table.
  *
  * @author Erik Winl�f
  */
 public class TableDataGet extends ActivitiWebScript
 {
 
   /**
-   * Prepares data, metadata and paging info about a table for the webscript template.
+   * Prepares signalData, metadata and paging info about a table for the webscript template.
    *
    * @param req The webscripts request
    * @param status The webscripts status

File: activiti-rest/src/main/java/org/activiti/rest/api/management/TableGet.java
Patch:
@@ -20,15 +20,15 @@
 import org.springframework.extensions.webscripts.WebScriptRequest;
 
 /**
- * Returns data, metadata and paging info about a table.
+ * Returns signalData, metadata and paging info about a table.
  *
  * @author Erik Winl�f
  */
 public class TableGet extends ActivitiWebScript
 {
 
   /**
-   * Prepares data, metadata and paging info about a table for the webscript template.
+   * Prepares signalData, metadata and paging info about a table for the webscript template.
    *
    * @param req The webscripts request
    * @param status The webscripts status

File: activiti-engine/src/main/java/org/activiti/engine/impl/cfg/ProcessEngineConfiguration.java
Patch:
@@ -55,6 +55,7 @@
 import org.activiti.engine.impl.persistence.db.DbIdentitySessionFactory;
 import org.activiti.engine.impl.persistence.db.DbManagementSessionFactory;
 import org.activiti.engine.impl.persistence.db.DbRepositorySessionFactory;
+import org.activiti.engine.impl.persistence.db.DbRuntimeSessionFactory;
 import org.activiti.engine.impl.persistence.db.DbSqlSession;
 import org.activiti.engine.impl.persistence.db.DbSqlSessionFactory;
 import org.activiti.engine.impl.persistence.db.DbTaskSessionFactory;
@@ -132,7 +133,7 @@ public ProcessEngineConfiguration() {
 
     sessionFactories = new HashMap<Class<?>, SessionFactory>();
     sessionFactories.put(RepositorySession.class, new DbRepositorySessionFactory());
-    sessionFactories.put(RuntimeSession.class, new DbRepositorySessionFactory());
+    sessionFactories.put(RuntimeSession.class, new DbRuntimeSessionFactory());
     sessionFactories.put(TaskSession.class, new DbTaskSessionFactory());
     sessionFactories.put(IdentitySession.class, new DbIdentitySessionFactory());
     sessionFactories.put(ManagementSession.class, new DbManagementSessionFactory());

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/db/DbManagementSession.java
Patch:
@@ -44,7 +44,8 @@ public class DbManagementSession implements ManagementSession, Session {
     "ACT_PROPERTY",
     "ACT_BYTEARRAY",
     "ACT_DEPLOYMENT",
-    "ACT_EXECUTION",
+    "ACT_RNT_PROCESSINSTANCE",
+    "ACT_RNT_ACTIVITYINSTANCE",
     "ACT_ID_GROUP",
     "ACT_ID_MEMBERSHIP",
     "ACT_ID_USER",

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/history/HistoricActivityInstanceEntity.java
Patch:
@@ -21,17 +21,17 @@
 /**
  * @author Christian Stettler
  */
-public class HistoricActivityInstanceImpl extends HistoricScopeInstanceImpl implements HistoricActivityInstance {
+public class HistoricActivityInstanceEntity extends HistoricScopeInstanceEntity implements HistoricActivityInstance {
 
   private String activityId;
   private String activityName;
   private String activityType;
 
-  protected HistoricActivityInstanceImpl() {
+  protected HistoricActivityInstanceEntity() {
     // for ibatis
   }
 
-  public HistoricActivityInstanceImpl(String activityId, String activityName, String activityType, String processInstanceId, String processDefinitionId, Date startTime) {
+  public HistoricActivityInstanceEntity(String activityId, String activityName, String activityType, String processInstanceId, String processDefinitionId, Date startTime) {
     super(processInstanceId, processDefinitionId, startTime);
 
     if (activityId == null) {

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/history/HistoricProcessInstanceEntity.java
Patch:
@@ -22,15 +22,15 @@
 /**
  * @author Christian Stettler
  */
-public class HistoricProcessInstanceImpl extends HistoricScopeInstanceImpl implements HistoricProcessInstance {
+public class HistoricProcessInstanceEntity extends HistoricScopeInstanceEntity implements HistoricProcessInstance {
 
   private String endStateName;
 
-  protected HistoricProcessInstanceImpl() {
+  protected HistoricProcessInstanceEntity() {
     // for ibatis
   }
 
-  public HistoricProcessInstanceImpl(String processInstanceId, String processDefinitionId, Date startTime) {
+  public HistoricProcessInstanceEntity(String processInstanceId, String processDefinitionId, Date startTime) {
     super(processInstanceId, processDefinitionId, startTime);
   }
 

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/history/HistoricScopeInstanceEntity.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * @author Christian Stettler
  */
-public abstract class HistoricScopeInstanceImpl implements PersistentObject {
+public abstract class HistoricScopeInstanceEntity implements PersistentObject {
 
   private String id;
   protected String processInstanceId;
@@ -32,11 +32,11 @@ public abstract class HistoricScopeInstanceImpl implements PersistentObject {
   protected Date endTime;
   protected Long durationInMillis;
 
-  protected HistoricScopeInstanceImpl() {
+  protected HistoricScopeInstanceEntity() {
     // for ibatis
   }
 
-  protected HistoricScopeInstanceImpl(String processInstanceId, String processDefinitionId, Date startTime) {
+  protected HistoricScopeInstanceEntity(String processInstanceId, String processDefinitionId, Date startTime) {
     if (processInstanceId == null) {
       throw new IllegalArgumentException("Process instance id must not be null");
     }

File: activiti-engine/src/main/java/org/activiti/engine/impl/persistence/task/TaskEntity.java
Patch:
@@ -298,6 +298,7 @@ public void setRevision(int revision) {
     this.revision = revision;
   }
 
+  @SuppressWarnings("unchecked")
   public Map<String, Object> getActivityInstanceVariables() {
     if (activityInstance!=null) {
       return activityInstance.getVariables();

File: activiti-cycle/src/main/java/org/activiti/cycle/ContentRepresentation.java
Patch:
@@ -76,7 +76,7 @@ public byte[] getContent() {
   }
   
   public String getContentAsString() {
-    return content.toString();
+    return new String(content);
   }
 
   public void setContent(String text) {

File: activiti-cycle/src/main/java/org/activiti/cycle/RepositoryNodeMetadata.java
Patch:
@@ -33,7 +33,7 @@ public class RepositoryNodeMetadata {
 	
 	private String lastAuthor;
 	
-	private int version;
+	private String version;
 	 // ...?
 
 	/**
@@ -109,11 +109,11 @@ public void setLastAuthor(String lastAuthor) {
 		this.lastAuthor = lastAuthor;
 	}
 
-	public int getVersion() {
+	public String getVersion() {
 		return version;
 	}
 
-	public void setVersion(int version) {
+	public void setVersion(String version) {
 		this.version = version;
 	}
 }

File: activiti-cycle/src/main/java/org/activiti/cycle/RepositoryNode.java
Patch:
@@ -75,7 +75,7 @@ public RepositoryConnector getConnector() {
   }
 
   public String toString() {
-    return this.getClass() + " [id=" + id + ";metadata=" + metadata + "]";
+    return this.getClass().getSimpleName() + " [id=" + id + ";metadata=" + metadata + "]";
   }
 
   public boolean isDetailsFetched() {

File: activiti-engine/src/main/java/org/activiti/impl/interceptor/CommandContext.java
Patch:
@@ -105,7 +105,6 @@ public void close() {
           }
 
           if (exception != null) {
-            exception.printStackTrace();
             transactionContext.rollback();
           }
         }
@@ -152,7 +151,7 @@ public void exception(Throwable exception) {
     if (this.exception == null) {
       this.exception = exception;
     } else {
-      log.log(Level.SEVERE, "exception in command context", exception);
+      log.log(Level.SEVERE, "masked exception in command context. for root cause, see below as it will be rethrown later.", exception);
     }
   }
 

File: activiti-engine/src/main/java/org/activiti/impl/interceptor/DefaultCommandContext.java
Patch:
@@ -86,6 +86,7 @@ public void close() {
           }
 
           if (exception != null) {
+            exception.printStackTrace();
             transactionContext.rollback();
           }
         }

File: activiti-engine/src/main/java/org/activiti/impl/jobexecutor/JobExecutor.java
Patch:
@@ -77,6 +77,7 @@ public synchronized void start() {
       }
       if (threadPoolExecutor==null) {
         threadPoolExecutor = new ThreadPoolExecutor(corePoolSize, maxPoolSize, 0L, TimeUnit.MILLISECONDS, threadPoolQueue);
+        threadPoolExecutor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());
       }
       
       // Create our pending jobs fetcher

File: activiti-engine/src/main/java/org/activiti/impl/jobexecutor/JobExecutor.java
Patch:
@@ -130,6 +130,7 @@ public void jobWasAdded() {
   }
   
   public void executeJobs(List<String> jobIds) {
+    // TODO: RejectedExecutionException handling!
     threadPoolExecutor.execute(new ExecuteJobsRunnable(commandExecutor, jobIds, jobHandlers, this));
   }
 

File: activiti-engine/src/main/java/org/activiti/impl/persistence/IbatisPersistenceSessionFactory.java
Patch:
@@ -91,6 +91,7 @@ public class IbatisPersistenceSessionFactory implements PersistenceSessionFactor
     statements.add("selectJobs");
     statements.add("selectNextJobsToExecute");
     statements.add("selectUnlockedTimersByDuedate");
+    statements.add("selectLockedJobs");
     statements.add("selectTimersByExecutionId");
     statements.add("selectUser");
     statements.add("selectUsersByGroup");

File: activiti-engine/src/main/java/org/activiti/impl/persistence/PersistenceSession.java
Patch:
@@ -103,9 +103,10 @@ public interface PersistenceSession extends Session {
   /* Job */
   JobImpl findJobById(String jobId);
   List<JobImpl> findJobs();
-  List<JobImpl> findNextJobsToExecute(int maxJobsPerAcquisition);
+  List<JobImpl> findNextJobsToExecute(int maxNrOfJobs);
   List<TimerImpl> findUnlockedTimersByDuedate(Date duedate, int nrOfTimers);
   List<TimerImpl> findTimersByExecutionId(String executionId);
+  List<JobImpl> findLockedJobs();
   
   List<Job> dynamicFindJobs(Map<String, Object> params, Page page);
   long dynamicJobCount(Map<String, Object> params);

File: activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/event/timer/BoundaryTimerEventTest.java
Patch:
@@ -39,6 +39,8 @@ public class BoundaryTimerEventTest {
   @Test
   @ProcessDeclared
   public void testInterruptingTimerDuration() {
+    
+    Date startTime = new Date();
 
     // Start process instance
     ProcessInstance pi = deployer.getProcessService().startProcessInstanceByKey("interruptingBoundaryTimer");
@@ -48,7 +50,7 @@ public void testInterruptingTimerDuration() {
     assertEquals("First line support", task.getName());
 
     // Set clock to the future such that the timer can fire
-    Clock.setCurrentTime(new Date(System.currentTimeMillis() + (5 * 60 * 60 * 1000)));
+    Clock.setCurrentTime(new Date(startTime.getTime() + (5 * 60 * 60 * 1000)));
     new JobExecutorPoller(deployer.getJobExecutor(), deployer.getCommandExecutor()).waitForJobExecutorToProcessAllJobs(10000L, 250);
 
     // The timer has fired, and the second task (secondlinesupport) now exists

File: activiti-engine/src/main/java/org/activiti/impl/definition/ActivityImpl.java
Patch:
@@ -85,7 +85,7 @@ public ActivityImpl getParentActivity() {
   }
 
   public String toString() {
-    return "activity[" + getId() + "]";
+    return "activity(" + getId() + ")";
   }
 
   // public getters and setters

File: activiti-engine/src/main/java/org/activiti/impl/execution/ExeOpTransitionNotifyListenerTake.java
Patch:
@@ -45,7 +45,7 @@ public void execute(ExecutionImpl execution) {
     } else {
       execution.setEventListenerIndex(0);
       ActivityImpl activity = execution.getActivity();
-      ActivityImpl nextScope = findNextScope(activity, transition.getDestination());
+      ActivityImpl nextScope = findNextScope(activity.getParent(), transition.getDestination());
       execution.setActivity(nextScope);
       execution.performOperation(TRANSITION_CREATE_SCOPE);
     }

File: activiti-engine/src/main/java/org/activiti/impl/persistence/IbatisPersistenceSessionFactory.java
Patch:
@@ -152,6 +152,7 @@ public class IbatisPersistenceSessionFactory implements PersistenceSessionFactor
     // e.g. addDatabaseSpecificStatement("oracle", "selectExecution",
     // "selectExecution_oracle");
     addDatabaseSpecificStatement("mysql", "selectTaskByDynamicCriteria", "selectTaskByDynamicCriteria_mysql");
+    addDatabaseSpecificStatement("mysql", "selectNextJobsToExecute", "selectNextJobsToExecute_mysql");
   }
 
   protected static void addDatabaseSpecificStatement(String databaseName, String activitiStatement, String ibatisStatement) {

File: activiti-engine/src/main/java/org/activiti/impl/persistence/IbatisPersistenceSessionFactory.java
Patch:
@@ -89,7 +89,7 @@ public class IbatisPersistenceSessionFactory implements PersistenceSessionFactor
     statements.add("selectJob");
     statements.add("selectJobs");
     statements.add("selectNextJobsToExecute");
-    statements.add("selectFirstTimer");
+    statements.add("selectUnlockedTimersByDuedate");
     statements.add("selectTimersByExecutionId");
     statements.add("selectUser");
     statements.add("selectUsersByGroup");

File: activiti-engine/src/main/java/org/activiti/impl/persistence/PersistenceSession.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.activiti.impl.persistence;
 
+import java.util.Date;
 import java.util.List;
 import java.util.Map;
 
@@ -102,7 +103,7 @@ public interface PersistenceSession extends Session {
   JobImpl findJobById(String jobId);
   List<JobImpl> findJobs();
   List<JobImpl> findNextJobsToExecute(int maxJobsPerAcquisition);
-  TimerImpl findFirstTimer();
+  List<TimerImpl> findUnlockedTimersByDuedate(Date duedate, int nrOfTimers);
   List<TimerImpl> findTimersByExecutionId(String executionId);
   
   List<Job> dynamicFindJobs(Map<String, Object> params, Page page);

File: activiti-engine/src/main/java/org/activiti/test/JobExecutorPoller.java
Patch:
@@ -65,7 +65,7 @@ public void waitForJobExecutorToProcessAllJobs(long maxMillisToWait, long interv
   }
 
   private boolean areJobsAvailable() {
-     Boolean areJobsAvailable = commandExecutor.execute(new Command<Boolean>() {
+    Boolean areJobsAvailable = commandExecutor.execute(new Command<Boolean>() {
       public Boolean execute(CommandContext commandContext) {
         return !commandContext.getPersistenceSession().findNextJobsToExecute(1).isEmpty();
       }

File: activiti-engine-test-cfg/src/test/java/org/activiti/test/cfg/spring/SpringTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.junit.rules.ExpectedException;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 import org.springframework.transaction.PlatformTransactionManager;
@@ -84,6 +85,7 @@ public Object doInTransaction(TransactionStatus status) {
   }
 
   @Test
+  @DirtiesContext
   public void testSaveDeployment() {
 
     String resource = ClassUtils.addResourcePathToPackagePath(getClass(), "testProcess.bpmn20.xml");

File: activiti-engine/src/main/java/org/activiti/DbProcessEngineBuilder.java
Patch:
@@ -241,7 +241,7 @@ public ProcessEngine buildProcessEngine() {
     
 
     persistenceSessionFactory = new IbatisPersistenceSessionFactory(processEngineConfiguration.getVariableTypes(), idGenerator, databaseName, jdbcDriver, jdbcUrl, jdbcUsername, jdbcPassword);
-    persistenceSessionFactory = new CachingPersistenceSessionFactory(persistenceSessionFactory, Thread.currentThread().getContextClassLoader());
+    persistenceSessionFactory = new CachingPersistenceSessionFactory(persistenceSessionFactory, processEngineConfiguration.getDeployerManager(), Thread.currentThread().getContextClassLoader());
     processEngineConfiguration.setPersistenceSessionFactory(persistenceSessionFactory);
 
     return processEngineConfiguration.buildProcessEngine();

File: activiti-engine/src/main/java/org/activiti/impl/cmd/StartProcessInstanceCmd.java
Patch:
@@ -39,15 +39,15 @@ public StartProcessInstanceCmd(String processDefinitionKey, String processDefini
   }
   
   public ProcessInstance execute(CommandContext commandContext) {
-    PersistenceSession processCache = commandContext.getPersistenceSession();
+    PersistenceSession persistenceSession = commandContext.getPersistenceSession();
     ProcessDefinitionImpl processDefinition = null;
     if (processDefinitionId!=null) {
-      processDefinition = processCache.findProcessDefinitionById(processDefinitionId);
+      processDefinition = persistenceSession.findProcessDefinitionById(processDefinitionId);
       if (processDefinition == null) {
         throw new ActivitiException("No process definition found for id = '" + processDefinitionId + "'");
       }
     } else {
-      processDefinition = processCache.findLatestProcessDefinitionByKey(processDefinitionKey);
+      processDefinition = persistenceSession.findLatestProcessDefinitionByKey(processDefinitionKey);
       if (processDefinition == null) {
         throw new ActivitiException("No process definition found for key '" + processDefinitionKey +"'");
       }

File: activiti-engine/src/main/java/org/activiti/impl/db/execution/DbExecutionImpl.java
Patch:
@@ -97,11 +97,8 @@ public class DbExecutionImpl extends ExecutionImpl implements PersistentObject {
 
   public static DbExecutionImpl createAndInsert(ProcessDefinitionDbImpl processDefinition) {
     DbExecutionImpl processInstance = new DbExecutionImpl(processDefinition);
-
     CommandContext.getCurrent().getPersistenceSession().insert(processInstance);
-
     processInstance.setProcessInstance(processInstance);
-
     return processInstance;
   }
 

File: activiti-engine-test-cfg/src/test/java/org/activiti/test/db/ProcessEngineInitializationTest.java
Patch:
@@ -57,7 +57,7 @@ public void testNoTables() {
   public void testVersionMismatch() {
     // first create the schema
     ProcessEngineImpl processEngine = (ProcessEngineImpl) new DbProcessEngineBuilder().configureFromPropertiesResource(
-            "org/activiti/test/db/activiti.properties").setDbSchemaStrategy(DbSchemaStrategy.CREATE_DROP).buildProcessEngine();
+            "org/activiti/test/db/activiti.properties").setDbSchemaStrategy(DbSchemaStrategy.DROP_CREATE).buildProcessEngine();
 
     // then update the version to something that is different to the library
     // version

File: activiti-engine-test-api/src/test/java/org/activiti/test/bpmn/sequenceflow/ConditionalSequenceFlowTest.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * @author Joram Barrez
  */
-public class ConditionalSequenceflowTest {
+public class ConditionalSequenceFlowTest {
   
   @Rule
   public LogInitializer logSetup = new LogInitializer();

File: activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/usertask/FinancialReportProcessTest.java
Patch:
@@ -64,7 +64,7 @@ public void testProcess() {
     assertEquals(1, tasks.size());
     assertEquals("Verify monthly financial report", tasks.get(0).getName());
     deployer.getTaskService().complete(tasks.get(0).getId());
-    
+
     deployer.assertProcessEnded(processInstance.getId());
   }
 

File: activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/usertask/taskassignee/TaskAssigneeTest.java
Patch:
@@ -54,6 +54,7 @@ public void testTaskAssignee() {
 
     // Complete task. Process is now finished
     deployer.getTaskService().complete(myTask.getId());
+    // assert if the process instance completed
     deployer.assertProcessEnded(processInstance.getId());
   }
 

File: activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/usertask/FinancialReportProcessTest.java
Patch:
@@ -47,7 +47,6 @@ public void tearDown() throws Exception {
   public void testProcess() {
     
     ProcessInstance processInstance = deployer.getProcessService().startProcessInstanceByKey("financialReport");
-    deployer.assertProcessEnded(processInstance.getId());
     
     List<Task> tasks = deployer.getTaskService().findUnassignedTasks("fozzie");
     assertEquals(1, tasks.size());
@@ -65,6 +64,8 @@ public void testProcess() {
     assertEquals(1, tasks.size());
     assertEquals("Verify monthly financial report", tasks.get(0).getName());
     deployer.getTaskService().complete(tasks.get(0).getId());
+    
+    deployer.assertProcessEnded(processInstance.getId());
   }
 
 }

File: activiti-engine-examples/src/test/java/org/activiti/examples/bpmn/usertask/taskassignee/TaskAssigneeTest.java
Patch:
@@ -45,9 +45,6 @@ public void testTaskAssignee() {
     // Start process instance
     ProcessInstance processInstance = deployer.getProcessService().startProcessInstanceByKey("taskAssigneeProcess");
 
-    // assert if the process instance completed
-    deployer.assertProcessEnded(processInstance.getId());
-
     // Get task list
     List<Task> tasks = deployer.getTaskService().findAssignedTasks("kermit");
     assertEquals(1, tasks.size());
@@ -57,6 +54,7 @@ public void testTaskAssignee() {
 
     // Complete task. Process is now finished
     deployer.getTaskService().complete(myTask.getId());
+    deployer.assertProcessEnded(processInstance.getId());
   }
 
 }

File: activiti-rest/src/main/java/org/activiti/rest/Config.java
Patch:
@@ -13,7 +13,7 @@
 package org.activiti.rest;
 
 /**
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class Config {
 

File: activiti-rest/src/main/java/org/activiti/rest/api/engine/ProcessEngineGet.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Returns details about the process engine.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class ProcessEngineGet extends ActivitiWebScript
 {

File: activiti-rest/src/main/java/org/activiti/rest/api/identity/GroupGet.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * Returns details about a user.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class GroupGet extends ActivitiWebScript
 {

File: activiti-rest/src/main/java/org/activiti/rest/api/identity/GroupUsersGet.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * Returns info about a groups's users.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class GroupUsersGet extends ActivitiWebScript
 {

File: activiti-rest/src/main/java/org/activiti/rest/api/identity/LoginPost.java
Patch:
@@ -34,7 +34,7 @@
 /**
  * Authenticates username and password..
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class LoginPost extends ActivitiWebScript
 {

File: activiti-rest/src/main/java/org/activiti/rest/api/identity/UserGroupsGet.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * Returns details about a user's groups.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class UserGroupsGet extends ActivitiWebScript
 {

File: activiti-rest/src/main/java/org/activiti/rest/api/management/TablesGet.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * Returns details about all of the process engine's database tables.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class TablesGet extends ActivitiWebScript
 {

File: activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessDefinitionFormGet.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * Returns a process definition's form.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class ProcessDefinitionFormGet extends ActivitiWebScript {
 

File: activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessDefinitionGet.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * Returns details about a process definition.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class ProcessDefinitionGet extends ActivitiWebScript
 {

File: activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessDefinitionsGet.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Returns details about the process definitions.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class ProcessDefinitionsGet extends ActivitiWebScript
 {

File: activiti-rest/src/main/java/org/activiti/rest/api/process/ProcessInstancePost.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Creates a new process instance base on a process definition id and returns details about the new process instance.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class ProcessInstancePost extends ActivitiWebScript
 {

File: activiti-rest/src/main/java/org/activiti/rest/api/tasks/TaskFormGet.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * Returns a task's form.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class TaskFormGet extends ActivitiWebScript {
 

File: activiti-rest/src/main/java/org/activiti/rest/api/tasks/TaskGet.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * Returns info about a task.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class TaskGet extends ActivitiWebScript {
 

File: activiti-rest/src/main/java/org/activiti/rest/api/tasks/TasksSummaryGet.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Creates a summary of a users tasks.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class TasksSummaryGet extends ActivitiWebScript {
 

File: activiti-rest/src/main/java/org/activiti/rest/auth/AbstractBasicHttpAuthenticatorFactory.java
Patch:
@@ -32,7 +32,7 @@
  * Extend this class and implement doAuthenticate and doAuthorize to authenticate and authorize against a specific
  * user store.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public abstract class AbstractBasicHttpAuthenticatorFactory implements ServletAuthenticatorFactory
 {
@@ -73,7 +73,7 @@ public Authenticator create(WebScriptServletRequest req, WebScriptServletRespons
   /**
    * HTTP Basic Authentication
    *
-   * @author Erik Winl�f
+   * @author Erik Winlöf
    */
   public class BasicHttpAuthenticator implements Authenticator {
 

File: activiti-rest/src/main/java/org/activiti/rest/auth/ActivitiBasicHttpAuthenticatorFactory.java
Patch:
@@ -24,7 +24,7 @@
  * This class performs the authentication and authorization to make sure that the user that accesses the webscripts
  * has the right to do so.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class ActivitiBasicHttpAuthenticatorFactory extends AbstractBasicHttpAuthenticatorFactory {
 

File: activiti-rest/src/main/java/org/activiti/rest/auth/AuthenticationException.java
Patch:
@@ -13,7 +13,7 @@
 package org.activiti.rest.auth;
 
 /**
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class AuthenticationException extends RuntimeException {
 

File: activiti-rest/src/main/java/org/activiti/rest/util/ActivitiWebScript.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * Helper class for all activiti webscripts.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class ActivitiWebScript extends DeclarativeWebScript {
 

File: activiti-webapp/src/main/java/org/activiti/surf/ActivitiRESTAuthenticator.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * Connects to a activiti rest endpoint's login webscript using json format.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class ActivitiRESTAuthenticator extends AbstractAuthenticator
 {

File: activiti-webapp/src/main/java/org/activiti/surf/ActivitiUser.java
Patch:
@@ -21,7 +21,7 @@
  * The Activiti user object that, besides the base user info, contains the users
  * security role groups and assignment groups.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class ActivitiUser extends User {
 

File: activiti-webapp/src/main/java/org/activiti/surf/ActivitiUserFactory.java
Patch:
@@ -34,7 +34,7 @@
  * The user is stored in the request context and can be fetched using context.getUser().
  * The user is also available in the root of the a script component context as 'user'.
  *
- * @author Erik Winl�f
+ * @author Erik Winlöf
  */
 public class ActivitiUserFactory extends AbstractUserFactory
 {

File: activiti-engine/src/main/java/org/activiti/impl/bpmn/UserTaskActivity.java
Patch:
@@ -71,7 +71,7 @@ protected void handleAssignments(TaskImpl task, ActivityExecution execution) {
   protected String evaluateExpression(String expr, ActivityExecution execution) {
     ScriptingEngines scriptingEngines = CommandContext.getCurrent().getScriptingEngines();
     return (String) scriptingEngines.evaluate(expr, 
-            ScriptingEngines.DEFAULT_EXPRESSION_LANGUAGE, (ExecutionImpl) execution);
+            ScriptingEngines.DEFAULT_SCRIPTING_LANGUAGE, (ExecutionImpl) execution);
   }
 
   public void setTaskDefinition(TaskDefinition taskDefinition) {

File: activiti-engine/src/main/java/org/activiti/impl/scripting/ScriptingEngines.java
Patch:
@@ -34,7 +34,7 @@
  */
 public class ScriptingEngines {
   
-  public static final String DEFAULT_EXPRESSION_LANGUAGE =  "juel"; 
+  public static final String DEFAULT_SCRIPTING_LANGUAGE =  "juel"; 
 
   static ScriptingEngines defaultScriptingEngines = new ScriptingEngines(
     new ScriptEngineFactory[]{

File: activiti-engine/src/test/java/org/activiti/test/pvm/activities/Join.java
Patch:
@@ -34,6 +34,7 @@ public void execute(ActivityExecution execution) {
     
     Activity joinActivity = execution.getActivity();
     List<ActivityExecution> joinedExecutions = new ArrayList<ActivityExecution>();
+    
     ExecutionController executionController = execution.getExecutionController();
     List<? extends ActivityExecution> concurrentExecutions = executionController.getExecutions();
     for (ActivityExecution concurrentExecution: concurrentExecutions) {

File: activiti-engine/src/main/java/org/activiti/impl/jobexecutor/AcquireJobsCmd.java
Patch:
@@ -21,6 +21,7 @@
 import org.activiti.impl.interceptor.CommandContext;
 import org.activiti.impl.job.JobImpl;
 import org.activiti.impl.persistence.PersistenceSession;
+import org.activiti.impl.time.Clock;
 
 
 /**
@@ -46,6 +47,7 @@ public AcquiredJobs execute(CommandContext commandContext) {
       if (job != null) {
         job.setLockOwner(lockOwner);
         GregorianCalendar gregorianCalendar = new GregorianCalendar();
+        gregorianCalendar.setTime(Clock.getCurrentTime());
         gregorianCalendar.add(Calendar.MILLISECOND, lockTimeInMillis);
         job.setLockExpirationTime(gregorianCalendar.getTime());
         jobIds.add(job.getId());

File: activiti-engine/src/main/java/org/activiti/impl/time/Clock.java
Patch:
@@ -20,7 +20,7 @@
  */
 public class Clock {
   
-  protected static Date CURRENT_TIME = null;
+  private volatile static Date CURRENT_TIME = null;
   
   public static void setCurrentTime(Date currentTime) {
     Clock.CURRENT_TIME = currentTime;

File: activiti-engine/src/main/java/org/activiti/DbProcessEngineBuilder.java
Patch:
@@ -244,6 +244,7 @@ public ProcessEngine buildProcessEngine() {
     if (jdbcPassword == null) {
       throw new ActivitiException("no jdbc password specified");
     }
+    
 
     persistenceSessionFactory = new IbatisPersistenceSessionFactory(idGenerator, databaseName, jdbcDriver, jdbcUrl, jdbcUsername, jdbcPassword);
     processEngineConfiguration.setPersistenceSessionFactory(persistenceSessionFactory);

File: activiti-engine/src/main/java/org/activiti/impl/bpmn/BoundaryTimerEventActivity.java
Patch:
@@ -33,7 +33,7 @@ public void execute(ActivityExecution execution) throws Exception {
       throw new ActivitiException("Non-interrupting boundary timer event not yet implemented");
     }
     
-    leave(execution, true);
+    leave(execution);
   }
 
   public boolean isInterrupting() {

File: activiti-engine/src/main/java/org/activiti/impl/bpmn/NoneEndEventActivity.java
Patch:
@@ -21,7 +21,7 @@
 public class NoneEndEventActivity extends BpmnActivity {
   
   public void execute(ActivityExecution execution) throws Exception {
-    execution.end(); // todo: implement for subprocesses / on the border etc.
+    execution.getExecutionController().end(); // todo: implement for subprocesses / on the border etc.
   }
 
 }

File: activiti-engine/src/main/java/org/activiti/impl/bpmn/ScriptTaskActivity.java
Patch:
@@ -39,7 +39,7 @@ public ScriptTaskActivity(String script, String language) {
   
   public void execute(ActivityExecution execution) throws Exception {
     ScriptingEngines.getScriptingEngines().evaluate(script, language, (ExecutionImpl) execution);
-    leave(execution, true);
+    leave(execution);
   }
 
   public void setScript(String script) {

File: activiti-engine/src/main/java/org/activiti/impl/bpmn/UserTaskActivity.java
Patch:
@@ -47,7 +47,7 @@ public void execute(ActivityExecution execution) throws Exception {
   }
   
   public void event(ActivityExecution execution, Object event) throws Exception {
-    leave(execution, true);
+    leave(execution);
   }
   
   protected void handleAssignments(TaskImpl task, ActivityExecution execution) {

File: activiti-engine/src/main/java/org/activiti/pvm/EventActivityBehavior.java
Patch:
@@ -19,4 +19,5 @@
 public interface EventActivityBehavior extends ActivityBehavior {
 
   void event(ActivityExecution execution, Object event) throws Exception;
+  
 }

File: activiti-engine/src/test/java/org/activiti/test/pvm/activities/Fork.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.activiti.pvm.ActivityBehavior;
 import org.activiti.pvm.ActivityExecution;
-import org.activiti.pvm.ConcurrencyController;
+import org.activiti.pvm.ExecutionController;
 import org.activiti.pvm.Transition;
 
 
@@ -24,9 +24,9 @@
 public class Fork implements ActivityBehavior {
 
   public void execute(ActivityExecution execution) {
-    execution.end();
+    execution.getExecutionController().end();
 
-    ConcurrencyController scopeInstance = execution.getConcurrencyController();
+    ExecutionController scopeInstance = execution.getExecutionController();
     for (Transition transition: execution.getOutgoingTransitions()) {
       ActivityExecution concurrentExecution = scopeInstance.createExecution();
       concurrentExecution.take(transition);

File: activiti-engine/src/main/java/org/activiti/DbProcessEngineBuilder.java
Patch:
@@ -181,6 +181,8 @@ public DbProcessEngineBuilder configureFromProperties(Properties configurationPr
     if (dbSchemaStrategy!=null) {
       if ("create-drop".equals(dbSchemaStrategy)) {
         this.dbSchemaStrategy = DbSchemaStrategy.CREATE_DROP;
+      } else if ("create".equals(dbSchemaStrategy)) { 
+        this.dbSchemaStrategy = DbSchemaStrategy.CREATE;
       } else if ("check-version".equals(dbSchemaStrategy)) {
         this.dbSchemaStrategy = DbSchemaStrategy.CHECK_VERSION;
       } else {

File: activiti-engine/src/main/java/org/activiti/impl/ProcessEngineImpl.java
Patch:
@@ -52,7 +52,8 @@ public ProcessEngineImpl(ProcessEngineConfiguration processEngineConfiguration)
     this.jobExecutor = processEngineConfiguration.getJobExecutor();
     this.persistenceSessionFactory = processEngineConfiguration.getPersistenceSessionFactory();
 
-    if (DbSchemaStrategy.CREATE_DROP==dbSchemaStrategy) {
+    if (DbSchemaStrategy.CREATE_DROP==dbSchemaStrategy 
+            || DbSchemaStrategy.CREATE==dbSchemaStrategy) {
       persistenceSessionFactory.dbSchemaCreate();
     } else if (DbSchemaStrategy.CHECK_VERSION==dbSchemaStrategy) {
       persistenceSessionFactory.dbSchemaCheckVersion();

File: activiti-engine-test-api/src/test/java/org/activiti/test/jobexecutor/JobExecutorCmdHappyTest.java
Patch:
@@ -37,7 +37,7 @@ public class JobExecutorCmdHappyTest extends JobExecutorTestCase {
 
   @Test
   public void testJobCommandsWithMessage() {
-    ProcessEngineImpl processEngineImpl = (ProcessEngineImpl) processEngineBuilder.getProcessEngine();
+    ProcessEngineImpl processEngineImpl = (ProcessEngineImpl) deployer.getProcessEngine();
     CommandExecutor commandExecutor = processEngineImpl.getProcessEngineConfiguration().getCommandExecutor();
     String jobId = commandExecutor.execute(new Command<String>() {
 
@@ -74,7 +74,7 @@ public void testJobCommandsWithTimer() {
     // clock gets automatically reset in LogTestCase.runTest
     Clock.setCurrentTime(new Date(SOME_TIME));
 
-    ProcessEngineImpl processEngineImpl = (ProcessEngineImpl) processEngineBuilder.getProcessEngine();
+    ProcessEngineImpl processEngineImpl = (ProcessEngineImpl) deployer.getProcessEngine();
     CommandExecutor commandExecutor = processEngineImpl.getProcessEngineConfiguration().getCommandExecutor();
     String jobId = commandExecutor.execute(new Command<String>() {
 

File: activiti-engine-test-api/src/test/java/org/activiti/test/jobexecutor/JobExecutorTest.java
Patch:
@@ -36,7 +36,7 @@ public class JobExecutorTest extends JobExecutorTestCase {
 
   @Test
   public void testBasicJobExecutorOperation() throws Exception {
-    ProcessEngineImpl processEngineImpl = (ProcessEngineImpl)processEngineBuilder.getProcessEngine();
+    ProcessEngineImpl processEngineImpl = (ProcessEngineImpl)deployer.getProcessEngine();
     CommandExecutor commandExecutor = processEngineImpl.getProcessEngineConfiguration().getCommandExecutor();
     commandExecutor.execute(new Command<Void>() {
       public Void execute(CommandContext commandContext) {
@@ -53,7 +53,7 @@ public Void execute(CommandContext commandContext) {
       }
     });
     
-    new JobExecutorPoller(processEngineBuilder.getProcessEngine()).waitForJobExecutorToProcessAllJobs(8000, 200);
+    new JobExecutorPoller(deployer.getProcessEngine()).waitForJobExecutorToProcessAllJobs(8000, 200);
     
     Set<String> messages = new HashSet<String>(tweetHandler.getMessages());
     Set<String> expectedMessages = new HashSet<String>();

File: activiti-engine-test-api/src/test/java/org/activiti/test/bpmn/parse/InvalidProcessTest.java
Patch:
@@ -33,7 +33,7 @@ public class InvalidProcessTest extends ActivitiTestCase {
   public void testInvalidProcessDefinition() {
     exception.expect(ActivitiException.class);
     exception.expectMessage("Attribute 'invalidAttribute' is not allowed to appear in element 'process'");
-    String resource = ActivitiTestCase.getProcessDefinitionResource(getClass(), "testInvalidProcessDefinition");
+    String resource = ActivitiTestCase.getProcessDefinitionResource(getClass(), getClass().getSimpleName()+".testInvalidProcessDefinition.bpmn20.xml");
     processEngine.getProcessService().createDeployment().name(resource).addClasspathResource(resource).deploy();
   }
 

File: activiti-engine-test-api/src/test/java/org/activiti/test/bpmn/usertask/TaskAssignmentExtensionsTest.java
Patch:
@@ -73,7 +73,7 @@ public void testAssigneeExtension() {
   public void testDuplicateAssigneeDeclaration() {
     exception.expect(ActivitiException.class);
     exception.expectMessage("duplicate assignee declaration for task");
-    String resource = ActivitiTestCase.getProcessDefinitionResource(getClass(), "testDuplicateAssigneeDeclaration");
+    String resource = ActivitiTestCase.getProcessDefinitionResource(getClass(), getClass().getSimpleName()+".testDuplicateAssigneeDeclaration.bpmn20.xml");
     processEngine.getProcessService().createDeployment().name(resource).addClasspathResource(resource).deploy();
   }
 

File: activiti-engine/src/main/java/org/activiti/impl/bpmn/BpmnActivity.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.logging.Logger;
 
 import org.activiti.pvm.ActivityExecution;
-import org.activiti.pvm.ConcurrencyScope;
+import org.activiti.pvm.ConcurrencyController;
 import org.activiti.pvm.EventActivityBehavior;
 import org.activiti.pvm.Transition;
 
@@ -68,13 +68,13 @@ protected void leave(ActivityExecution execution, boolean checkConditions) {
 
       Map<ActivityExecution, Transition> childExecutionMapping 
           = new LinkedHashMap<ActivityExecution, Transition>(); // Linked? -> order is important
-      ConcurrencyScope scopeInstance = execution.getConcurrencyScope();
+      ConcurrencyController concurrencyController = execution.getConcurrencyController();
       
       for (Transition outSeqFlow: outgoingSequenceFlow) {
         if (outSeqFlow.getCondition() == null 
                 || !checkConditions 
                 || outSeqFlow.getCondition().evaluate(execution)) {
-          ActivityExecution concurrentExecution = scopeInstance.createExecution();
+          ActivityExecution concurrentExecution = concurrencyController.createExecution();
           childExecutionMapping.put(concurrentExecution, outSeqFlow);
         }
       }

File: activiti-engine/src/main/java/org/activiti/impl/bpmn/ParallelGatewayActivity.java
Patch:
@@ -62,7 +62,7 @@ public void execute(ActivityExecution execution) throws Exception {
       Activity joinActivity = execution.getActivity();
       List<ActivityExecution> joinedExecutions = new ArrayList<ActivityExecution>();
       
-      List<? extends ActivityExecution> concurrentExecutions = execution.getConcurrencyScope().getExecutions();
+      List<? extends ActivityExecution> concurrentExecutions = execution.getConcurrencyController().getExecutions();
       for (ActivityExecution concurrentExecution: concurrentExecutions) {
         if (concurrentExecution.getActivity().equals(joinActivity)) {
           joinedExecutions.add(concurrentExecution);
@@ -90,7 +90,7 @@ protected void fork(ActivityExecution execution) {
   }
   
   protected ActivityExecution join(ActivityExecution execution, List<ActivityExecution> joinedExecutions) {
-    ActivityExecution outgoingExecution = execution.getConcurrencyScope().createExecution();
+    ActivityExecution outgoingExecution = execution.getConcurrencyController().createExecution();
     outgoingExecution.setActivity(execution.getActivity());
     
     for (ActivityExecution joinedExecution: joinedExecutions) {

