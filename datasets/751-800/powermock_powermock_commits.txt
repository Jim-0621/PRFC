File: powermock-reflect/src/main/java/org/powermock/reflect/internal/WhiteboxImpl.java
Patch:
@@ -1791,7 +1791,8 @@ public static Method[] getMethods(Class<?> clazz, String methodName, Class<?>[]
             final Class<?>[] parameterTypes = method.getParameterTypes();
             if (checkIfParameterTypesAreSame(method.isVarArgs(), expectedTypes, parameterTypes)
                         || (!exactParameterTypeMatch && checkIfParameterTypesAreSame(method.isVarArgs(),
-                    convertParameterTypesToPrimitive(expectedTypes), parameterTypes))) {
+                    convertParameterTypesToPrimitive(expectedTypes),
+                    convertParameterTypesToPrimitive(parameterTypes)))) {
                 matchingArgumentTypes.add(method);
             }
         }

File: powermock-modules/powermock-module-javaagent/src/main/java/org/powermock/modules/agent/DefinalizingClassVisitor.java
Patch:
@@ -4,9 +4,9 @@
 import net.bytebuddy.jar.asm.MethodVisitor;
 import net.bytebuddy.jar.asm.Opcodes;
 
-class PowerMockClassVisitor extends ClassVisitor {
+class DefinalizingClassVisitor extends ClassVisitor {
 
-    public PowerMockClassVisitor(ClassVisitor classVisitor) {
+    public DefinalizingClassVisitor(ClassVisitor classVisitor) {
         super(Opcodes.ASM5, classVisitor);
     }
 

File: tests/easymock/junit4-agent/src/test/java/samples/powermockito/junit4/agent/AnnotationUsageTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.easymock.Mock;
 import org.easymock.TestSubject;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -72,8 +71,6 @@ public void setUp() {
         replay(server);
     }
 
-
-    @Ignore
     @Test
     public void annotationsAreEnabledWhenUsingTheJUnitRule() {
         String serviceMessage = tested.getServiceMessage();

File: tests/easymock/testng-agent/src/test/java/samples/testng/agent/AnnotationDemoTest.java
Patch:
@@ -21,7 +21,7 @@ public class AnnotationDemoTest extends PowerMockTestCase {
     @Mock
     private Service serviceMock;
 
-    @Test(enabled = false)
+    @Test
     public void assertInjectionWorked() throws Exception {
         AnnotationDemo tested = new AnnotationDemo(serviceMock);
         final String expected = "mock";

File: tests/easymock/testng-agent/src/test/java/samples/testng/agent/AnnotationDemoWithBeforeMethodTest.java
Patch:
@@ -29,7 +29,7 @@ public void setup() {
 		tested = new AnnotationDemo(serviceMock);
 	}
 
-	@Test(enabled = false)
+	@Test
     @PrepareForTest
 	public void assertInjectionWorked() throws Exception {
 		final String expected = "mock";

File: tests/easymock/testng-agent/src/test/java/samples/testng/agent/FinalDemoTest.java
Patch:
@@ -28,12 +28,12 @@
 
 /**
  * Test class to demonstrate non-static final mocking.
- * 
+ *
  */
 @PrepareForTest(FinalDemo.class)
 public class FinalDemoTest extends PowerMockTestCase {
 
-	@Test(enabled = false)
+	@Test
 	public void testSay() throws Exception {
 		FinalDemo tested = createMock(FinalDemo.class);
 		String expected = "Hello altered World";
@@ -55,7 +55,7 @@ public void testSay() throws Exception {
 
 	}
 
-	@Test(enabled = false)
+	@Test
 	public void testSayFinalNative() throws Exception {
 		FinalDemo tested = createMock(FinalDemo.class);
 		String expected = "Hello altered World";

File: tests/easymock/testng-agent/src/test/java/samples/testng/agent/MockStaticExtendsPowerMockTestCaseTest.java
Patch:
@@ -28,14 +28,14 @@
 /**
  * Test class to demonstrate static, static+final, static+native and
  * static+final+native methods mocking.
- * 
+ *
  * @author Johan Haleby
  * @author Jan Kronquist
  */
 @PrepareForTest( { StaticService.class, StaticHelper.class })
 public class MockStaticExtendsPowerMockTestCaseTest extends PowerMockTestCase {
 
-    @Test(enabled = false)
+    @Test
     public void testMockStatic() throws Exception {
         mockStatic(StaticService.class);
         String expected = "Hello altered World";
@@ -56,7 +56,7 @@ public void testMockStatic() throws Exception {
         }
     }
 
-    @Test(enabled = false)
+    @Test
     public void testMockStaticFinal() throws Exception {
         mockStatic(StaticService.class);
         String expected = "Hello altered World";

File: tests/easymock/testng-agent/src/test/java/samples/testng/agent/PartialMockingWithBeforeClassTest.java
Patch:
@@ -39,7 +39,7 @@ public void setup() {
 		tested = createPartialMock(PrivateFinal.class, "sayIt");
 	}
 
-	@Test(enabled = false)
+	@Test
 	public void partialMockingWithMockCreatedInBeforeClassMethod() throws Exception {
 		String expected = "Hello altered World";
 		expectPrivate(tested, "sayIt", "name").andReturn(expected);

File: tests/easymock/testng-agent/src/test/java/samples/testng/agent/SampleServletTest.java
Patch:
@@ -32,7 +32,7 @@
 @PrepareForTest(SampleServlet.class)
 public class SampleServletTest {
 
-    @Test(enabled = false)
+    @Test
     public void doGet() throws Exception {
         SampleServlet servlet = new SampleServlet();
 

File: powermock-modules/powermock-module-junit4/src/main/java/org/powermock/modules/junit4/internal/impl/NotificationBuilder.java
Patch:
@@ -47,7 +47,7 @@ enum DetectedTestRunBehaviour {
     }
 
     private static final Pattern methodDisplayNameRgx =
-            Pattern.compile("^[^\\(\\[]++");
+            Pattern.compile("(^[^\\(\\[]++)|([^(]+(?=\\)))");
     private final Method[] testMethods;
     private final List<?> pendingTestInstances;
     private final PowerMockTestNotifier powerMockTestNotifier;

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/privatemocking/PrivateInstanceMockingCases.java
Patch:
@@ -27,7 +27,6 @@
 import samples.privateandfinal.PrivateFinal;
 import samples.privatemocking.PrivateMethodDemo;
 
-import javax.activation.FileDataSource;
 import java.io.File;
 import java.io.StringReader;
 

File: tests/utils/src/main/java/samples/privatemocking/PrivateMethodDemo.java
Patch:
@@ -15,7 +15,6 @@
  */
 package samples.privatemocking;
 
-import javax.activation.FileDataSource;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.Reader;

File: powermock-modules/powermock-module-junit4/src/test/java/org/powermock/modules/junit4/internal/impl/PowerMockRunNotifierTest.java
Patch:
@@ -23,14 +23,14 @@
 import org.junit.runner.notification.RunListener;
 import org.junit.runner.notification.RunNotifier;
 import org.junit.runners.Parameterized;
+import org.easymock.EasyMock;
 import org.powermock.tests.utils.PowerMockTestNotifier;
 
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.List;
 
 import static org.easymock.EasyMock.createMock;
-import static org.easymock.EasyMock.createNiceMock;
 import static org.easymock.EasyMock.replay;
 import static org.easymock.EasyMock.verify;
 
@@ -76,7 +76,7 @@ public void verifyBackendRunNotifierIsProperlyNotified() throws Exception {
         replay(backendRunNotifierMock);
         method.invoke(new PowerMockRunNotifier(
                 backendRunNotifierMock,
-                createNiceMock(PowerMockTestNotifier.class),
+                EasyMock.<PowerMockTestNotifier, PowerMockTestNotifier>createNiceMock(PowerMockTestNotifier.class),
                 new Method[0]),
                 testData);
         verify(backendRunNotifierMock);

File: tests/easymock/junit4-agent/src/test/java/samples/powermockito/junit4/agent/AnnotationUsageTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.easymock.Mock;
 import org.easymock.TestSubject;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -72,6 +73,7 @@ public void setUp() {
     }
 
 
+    @Ignore
     @Test
     public void annotationsAreEnabledWhenUsingTheJUnitRule() {
         String serviceMessage = tested.getServiceMessage();

File: tests/easymock/testng-agent/src/test/java/samples/testng/agent/AnnotationDemoTest.java
Patch:
@@ -21,7 +21,7 @@ public class AnnotationDemoTest extends PowerMockTestCase {
     @Mock
     private Service serviceMock;
 
-    @Test
+    @Test(enabled = false)
     public void assertInjectionWorked() throws Exception {
         AnnotationDemo tested = new AnnotationDemo(serviceMock);
         final String expected = "mock";

File: tests/easymock/testng-agent/src/test/java/samples/testng/agent/AnnotationDemoWithBeforeMethodTest.java
Patch:
@@ -29,7 +29,7 @@ public void setup() {
 		tested = new AnnotationDemo(serviceMock);
 	}
 
-	@Test
+	@Test(enabled = false)
     @PrepareForTest
 	public void assertInjectionWorked() throws Exception {
 		final String expected = "mock";

File: tests/easymock/testng-agent/src/test/java/samples/testng/agent/FinalDemoTest.java
Patch:
@@ -33,7 +33,7 @@
 @PrepareForTest(FinalDemo.class)
 public class FinalDemoTest extends PowerMockTestCase {
 
-	@Test
+	@Test(enabled = false)
 	public void testSay() throws Exception {
 		FinalDemo tested = createMock(FinalDemo.class);
 		String expected = "Hello altered World";
@@ -55,7 +55,7 @@ public void testSay() throws Exception {
 
 	}
 
-	@Test
+	@Test(enabled = false)
 	public void testSayFinalNative() throws Exception {
 		FinalDemo tested = createMock(FinalDemo.class);
 		String expected = "Hello altered World";

File: tests/easymock/testng-agent/src/test/java/samples/testng/agent/MockStaticExtendsPowerMockTestCaseTest.java
Patch:
@@ -35,7 +35,7 @@
 @PrepareForTest( { StaticService.class, StaticHelper.class })
 public class MockStaticExtendsPowerMockTestCaseTest extends PowerMockTestCase {
 
-    @Test
+    @Test(enabled = false)
     public void testMockStatic() throws Exception {
         mockStatic(StaticService.class);
         String expected = "Hello altered World";
@@ -56,7 +56,7 @@ public void testMockStatic() throws Exception {
         }
     }
 
-    @Test
+    @Test(enabled = false)
     public void testMockStaticFinal() throws Exception {
         mockStatic(StaticService.class);
         String expected = "Hello altered World";

File: tests/easymock/testng-agent/src/test/java/samples/testng/agent/PartialMockingWithBeforeClassTest.java
Patch:
@@ -39,7 +39,7 @@ public void setup() {
 		tested = createPartialMock(PrivateFinal.class, "sayIt");
 	}
 
-	@Test
+	@Test(enabled = false)
 	public void partialMockingWithMockCreatedInBeforeClassMethod() throws Exception {
 		String expected = "Hello altered World";
 		expectPrivate(tested, "sayIt", "name").andReturn(expected);

File: tests/easymock/testng-agent/src/test/java/samples/testng/agent/PrivateFinalTest.java
Patch:
@@ -31,7 +31,7 @@
 @PrepareForTest(PrivateFinal.class)
 public class PrivateFinalTest {
 
-  @Test
+  @Test(enabled = false)
   public void testSay() throws Exception {
     PrivateFinal tested = createPartialMock(PrivateFinal.class, "sayIt");
     String expected = "Hello altered World";
@@ -44,7 +44,7 @@ public void testSay() throws Exception {
     Assert.assertEquals(expected, actual);
   }
 
-  @Test
+  @Test(enabled = false)
   public void testMultiMock() throws Exception {
     PrivateFinal tested1 = createPartialMock(PrivateFinal.class, "sayIt");
     String expected1 = "Hello altered World";

File: tests/easymock/testng-agent/src/test/java/samples/testng/agent/SampleServletTest.java
Patch:
@@ -32,7 +32,7 @@
 @PrepareForTest(SampleServlet.class)
 public class SampleServletTest {
 
-    @Test
+    @Test(enabled = false)
     public void doGet() throws Exception {
         SampleServlet servlet = new SampleServlet();
 

File: powermock-api/powermock-api-easymock/src/main/java/org/powermock/api/easymock/internal/invocationcontrol/EasyMockNewInvocationControl.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.easymock.EasyMock;
 import org.easymock.IExpectationSetters;
+import org.easymock.MockType;
 import org.easymock.internal.MocksControl;
 import org.powermock.core.MockRepository;
 import org.powermock.core.spi.NewInvocationControl;
@@ -51,12 +52,12 @@ public Object invoke(Class<?> type, Object[] args, Class<?>[] sig) throws Except
             args = (Object[]) args[length-1];
         }
         try {
-            final MocksControl.MockType mockType = ((EasyMockMethodInvocationControl<?>) MockRepository.getInstanceMethodInvocationControl(substitute))
+            final MockType mockType = ((EasyMockMethodInvocationControl<?>) MockRepository.getInstanceMethodInvocationControl(substitute))
                     .getMockType();
             Object result = substitute.performSubstitutionLogic(args);
 
             if (result == null) {
-                if (mockType == MocksControl.MockType.NICE) {
+                if (mockType == MockType.NICE) {
                     result = EasyMock.createNiceMock(subsitutionType);
                 } else {
                     throw new IllegalStateException("Must replay class " + type.getName() + " to get configured expectation.");

File: powermock-core/src/main/java/org/powermock/core/ClassReplicaCreator.java
Patch:
@@ -60,7 +60,7 @@ public <T> Class<T> createClassReplica(Class<T> clazz) {
                         code, newClass);
             }
 
-            return newClass.toClass(this.getClass().getClassLoader(), this.getClass().getProtectionDomain());
+            return (Class<T>) newClass.toClass(this.getClass().getClassLoader(), this.getClass().getProtectionDomain());
         } catch (Exception e) {
             throw new RuntimeException(e);
         }
@@ -105,7 +105,7 @@ public <T> Class<T> createInstanceReplica(T delegator) {
                 CtConstructor copy = CtNewConstructor.copy(ctConstructor, newClass, null);
                 newClass.addConstructor(copy);
             }
-            return newClass.toClass(this.getClass().getClassLoader(), this.getClass().getProtectionDomain());
+            return (Class<T>) newClass.toClass(this.getClass().getClassLoader(), this.getClass().getProtectionDomain());
         } catch (Exception e) {
             throw new RuntimeException(e);
         }

File: powermock-core/src/test/java/org/powermock/configuration/support/ConfigurationFactoryImplTest.java
Patch:
@@ -50,7 +50,7 @@ public void setUp() {
         
         @Test
         public void should_read_byte_code_framework_from_environment_variable_if_defined() {
-            environmentVariables.set("powermock.byte-code-framework", ByteCodeFramework.ByteBuddy.name());
+            environmentVariables.set("powermock.byte-code-framework", ByteCodeFramework.Javassist.name());
             
             PowerMockConfiguration configuration = configurationFactory.create(PowerMockConfiguration.class);
             
@@ -60,7 +60,7 @@ public void should_read_byte_code_framework_from_environment_variable_if_defined
             
             assertThat(configuration.getByteCodeFramework())
                 .as("Enum from configuration is read correctly")
-                .isEqualTo(ByteCodeFramework.ByteBuddy);
+                .isEqualTo(ByteCodeFramework.Javassist);
         }
     }
     
@@ -90,7 +90,7 @@ public void should_return_configuration_from_file_if_configuration_file_exist()
                 .contains("org.somepackage");
             assertThat(configuration.getByteCodeFramework())
                 .as("Enum from configuration is read correctly")
-                .isEqualTo(ByteCodeFramework.ByteBuddy);
+                .isEqualTo(ByteCodeFramework.Javassist);
         }
         
         @Test

File: powermock-core/src/test/java/org/powermock/core/test/MockClassLoaderFactory.java
Patch:
@@ -21,7 +21,6 @@
 import org.powermock.core.classloader.MockClassLoader;
 import org.powermock.core.classloader.MockClassLoaderConfiguration;
 import org.powermock.core.classloader.annotations.UseClassPathAdjuster;
-import org.powermock.core.classloader.bytebuddy.ByteBuddyMockClassLoader;
 import org.powermock.reflect.internal.WhiteboxImpl;
 
 import java.lang.reflect.Constructor;
@@ -52,7 +51,7 @@ private MockClassLoader getInstance(MockClassLoaderConfiguration configuration)
     }
     
     public boolean isByteBuddy(){
-        return classLoaderClass.isAssignableFrom(ByteBuddyMockClassLoader.class);
+        return false;
     }
     
     @Override

File: powermock-core/src/test/java/org/powermock/core/transformers/ClassFinalModifierMockTransformerTest.java
Patch:
@@ -22,7 +22,6 @@
 import org.junit.Test;
 import org.junit.runners.Parameterized;
 import org.powermock.core.test.MockClassLoaderFactory;
-import org.powermock.core.transformers.bytebuddy.ClassFinalModifierMockTransformer;
 import powermock.test.support.MainMockTransformerTestSupport.SomeInterface;
 import powermock.test.support.MainMockTransformerTestSupport.SupportClasses;
 
@@ -45,7 +44,6 @@ public static Iterable<Object[]> data() {
         Collection<Object[]> data = new ArrayList<Object[]>();
         
         data.addAll(MockTransformerTestHelper.createTransformerTestData(org.powermock.core.transformers.javassist.ClassFinalModifierMockTransformer.class));
-        data.addAll(MockTransformerTestHelper.createTransformerTestData(ClassFinalModifierMockTransformer.class));
         
         return data;
     }

File: powermock-core/src/test/java/org/powermock/core/transformers/ConstructorModifiersMockTransformerTest.java
Patch:
@@ -21,7 +21,6 @@
 import org.junit.Test;
 import org.junit.runners.Parameterized;
 import org.powermock.core.test.MockClassLoaderFactory;
-import org.powermock.core.transformers.bytebuddy.ConstructorModifiersMockTransformer;
 import org.powermock.core.transformers.javassist.ConstructorsMockTransformer;
 import powermock.test.support.MainMockTransformerTestSupport.ParentTestClass;
 import powermock.test.support.MainMockTransformerTestSupport.ParentTestClass.NestedTestClass;
@@ -46,7 +45,6 @@ public static Iterable<Object[]> data() {
         Collection<Object[]> data = new ArrayList<Object[]>();
         
         data.addAll(MockTransformerTestHelper.createTransformerTestData(ConstructorsMockTransformer.class));
-        data.addAll(MockTransformerTestHelper.createTransformerTestData(ConstructorModifiersMockTransformer.class));
         
         return data;
     }

File: powermock-core/src/test/java/org/powermock/core/transformers/StaticFinalFieldsMockTransformerTest.java
Patch:
@@ -43,7 +43,6 @@ public static Iterable<Object[]> data() {
         Collection<Object[]> data = new ArrayList<Object[]>();
         
         data.addAll(MockTransformerTestHelper.createTransformerTestData(StaticFinalFieldsMockTransformer.class));
-        data.addAll(MockTransformerTestHelper.createTransformerTestData(org.powermock.core.transformers.bytebuddy.StaticFinalFieldsMockTransformer.class));
         
         return data;
     }

File: powermock-core/src/test/java/org/powermock/core/transformers/SuppressStaticInitializerMockTransformerTest.java
Patch:
@@ -24,7 +24,6 @@
 import org.junit.runners.Parameterized;
 import org.powermock.core.MockRepository;
 import org.powermock.core.test.MockClassLoaderFactory;
-import org.powermock.core.transformers.bytebuddy.StaticInitializerMockTransformer;
 import org.powermock.core.transformers.javassist.SuppressStaticInitializerMockTransformer;
 import org.powermock.reflect.Whitebox;
 import powermock.test.support.MainMockTransformerTestSupport.StaticInitialization;
@@ -45,7 +44,6 @@ public static Iterable<Object[]> data() {
         Collection<Object[]> data = new ArrayList<Object[]>();
         
         data.addAll(MockTransformerTestHelper.createTransformerTestData(SuppressStaticInitializerMockTransformer.class));
-        data.addAll(MockTransformerTestHelper.createTransformerTestData(StaticInitializerMockTransformer.class));
         
         return data;
     }

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/bugs/github806/DoThrowTest.java
Patch:
@@ -18,18 +18,17 @@
 
 package samples.powermockito.junit4.bugs.github806;
 
-import javassist.NotFoundException;
 import org.junit.Test;
 import org.mockito.Mockito;
 
 import static org.mockito.Mockito.doThrow;
 
 public class DoThrowTest {
     
-    @Test(expected = NotFoundException.class)
+    @Test(expected = RuntimeException.class)
     public void should_throw_expected_exception() {
         final DoThrowTMockClass mock = Mockito.mock(DoThrowTMockClass.class);
-        doThrow(NotFoundException.class).when(mock).doSomething();
+        doThrow(RuntimeException.class).when(mock).doSomething();
         mock.doSomething();
     }
     

File: powermock-api/powermock-api-easymock/src/main/java/org/powermock/api/easymock/internal/mockstrategy/impl/AbstractMockStrategyBase.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.easymock.IMocksControl;
 import org.easymock.internal.MocksControl;
-import org.easymock.internal.MocksControl.MockType;
+import org.easymock.MockType;
 import org.powermock.api.easymock.internal.mockstrategy.MockStrategy;
 
 /**

File: powermock-api/powermock-api-easymock/src/main/java/org/powermock/api/easymock/internal/mockstrategy/impl/DefaultMockStrategy.java
Patch:
@@ -1,6 +1,6 @@
 package org.powermock.api.easymock.internal.mockstrategy.impl;
 
-import org.easymock.internal.MocksControl.MockType;
+import org.easymock.MockType;
 
 public class DefaultMockStrategy extends AbstractMockStrategyBase {
 

File: powermock-api/powermock-api-easymock/src/main/java/org/powermock/api/easymock/internal/mockstrategy/impl/NiceMockStrategy.java
Patch:
@@ -1,6 +1,6 @@
 package org.powermock.api.easymock.internal.mockstrategy.impl;
 
-import org.easymock.internal.MocksControl.MockType;
+import org.easymock.MockType;
 
 public class NiceMockStrategy extends AbstractMockStrategyBase {
 

File: powermock-api/powermock-api-easymock/src/main/java/org/powermock/api/easymock/internal/mockstrategy/impl/StrictMockStrategy.java
Patch:
@@ -1,6 +1,6 @@
 package org.powermock.api.easymock.internal.mockstrategy.impl;
 
-import org.easymock.internal.MocksControl.MockType;
+import org.easymock.MockType;
 
 public class StrictMockStrategy extends AbstractMockStrategyBase {
 

File: powermock-core/src/main/java/org/powermock/core/classloader/ByteCodeFramework.java
Patch:
@@ -3,6 +3,7 @@
 import org.powermock.configuration.GlobalConfiguration;
 import org.powermock.core.classloader.annotations.PrepareEverythingForTest;
 import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.core.classloader.annotations.PrepareOnlyThisForTest;
 import org.powermock.core.classloader.annotations.SuppressStaticInitializationFor;
 import org.powermock.core.classloader.annotations.UseClassPathAdjuster;
 import org.powermock.core.classloader.bytebuddy.ByteBuddyMockClassLoader;
@@ -68,6 +69,8 @@ public static ByteCodeFramework getByteCodeFrameworkForTestClass(final Class<?>
     private static ByteCodeFramework getByteCodeFramework(final AnnotatedElement element) {
         if (element.isAnnotationPresent(PrepareForTest.class)) {
             return element.getAnnotation(PrepareForTest.class).byteCodeFramework();
+        } else if (element.isAnnotationPresent(PrepareOnlyThisForTest.class)) {
+            return element.getAnnotation(PrepareOnlyThisForTest.class).byteCodeFramework();
         } else if (element.isAnnotationPresent(PrepareEverythingForTest.class)) {
             return element.getAnnotation(PrepareEverythingForTest.class).byteCodeFramework();
         } else if (element.isAnnotationPresent(SuppressStaticInitializationFor.class)){

File: powermock-core/src/main/java/org/powermock/core/classloader/annotations/PrepareOnlyThisForTest.java
Patch:
@@ -16,6 +16,7 @@
 package org.powermock.core.classloader.annotations;
 
 import org.powermock.core.IndicateReloadClass;
+import org.powermock.core.classloader.ByteCodeFramework;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -71,4 +72,6 @@
 	Class<?>[] value() default IndicateReloadClass.class;
 
 	String[] fullyQualifiedNames() default "";
+    
+    ByteCodeFramework byteCodeFramework() default ByteCodeFramework.Javassist;
 }

File: powermock-core/src/main/java/org/powermock/configuration/Configuration.java
Patch:
@@ -34,6 +34,8 @@ public interface Configuration<T extends Configuration> {
     
     /**
      * Merge values of the configuration with values of <code>configuration</code>.
+     * Values with the same keys from the <code>configuration</code>
+     * overwrite value in the current configuration.
      *
      * @param configuration source configurations.
      * @return a new instance of {@link Configuration} with merged values.

File: powermock-core/src/main/java/org/powermock/configuration/PowerMockConfiguration.java
Patch:
@@ -58,10 +58,10 @@ public PowerMockConfiguration merge(final PowerMockConfiguration configuration)
             String[] globalIgnore = ArrayUtil.mergeArrays(this.globalIgnore, configuration.globalIgnore);
             
             powerMockConfiguration.setGlobalIgnore(globalIgnore);
-            if (byteCodeFramework == null) {
-                powerMockConfiguration.setByteCodeFramework(configuration.byteCodeFramework);
-            }else {
+            if (configuration.byteCodeFramework == null) {
                 powerMockConfiguration.setByteCodeFramework(byteCodeFramework);
+            }else {
+                powerMockConfiguration.setByteCodeFramework(configuration.byteCodeFramework);
             }
             
             return powerMockConfiguration;

File: powermock-core/src/main/java/org/powermock/configuration/support/ConfigurationMapper.java
Patch:
@@ -20,12 +20,11 @@
 
 import org.powermock.configuration.Configuration;
 import org.powermock.configuration.ConfigurationType;
-import org.powermock.core.PowerMockInternalException;
+import org.powermock.PowerMockInternalException;
 
 import java.beans.BeanInfo;
 import java.beans.Introspector;
 import java.beans.PropertyDescriptor;
-import java.lang.reflect.InvocationTargetException;
 import java.util.Properties;
 
 class ConfigurationMapper<T extends Configuration> {

File: powermock-core/src/main/java/org/powermock/configuration/support/ConfigurationReaderBuilder.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.powermock.configuration.Configuration;
 import org.powermock.configuration.ConfigurationReader;
-import org.powermock.core.PowerMockInternalException;
+import org.powermock.PowerMockInternalException;
 
 import java.util.HashMap;
 import java.util.Map;

File: powermock-core/src/main/java/org/powermock/core/classloader/MockClassLoaderBuilder.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.List;
 
 import static org.powermock.core.transformers.support.FilterPredicates.isInstanceOf;
+import static org.powermock.utils.Asserts.internalAssertNotNull;
 
 public class MockClassLoaderBuilder {
 
@@ -51,6 +52,7 @@ private MockClassLoaderBuilder(final ByteCodeFramework byteCodeFramework) {
     }
 
     public MockClassLoader build() {
+        internalAssertNotNull(testClass, "Test class is null during building classloader. ");
     
         final MockClassLoaderConfiguration configuration = new MockClassLoaderConfiguration(classesToModify, packagesToIgnore);
         final MockClassLoader classLoader = byteCodeFramework.createClassloader(configuration, useClassPathAdjuster);

File: powermock-core/src/main/java/org/powermock/core/classloader/MockClassLoaderFactory.java
Patch:
@@ -133,6 +133,7 @@ private MockClassLoader createMockClassLoader(final ByteCodeFramework byteCodeFr
                                                   final UseClassPathAdjuster useClassPathAdjuster,
                                                   final MockTransformer... extraMockTransformer) {
         return MockClassLoaderBuilder.create(byteCodeFramework)
+                                     .forTestClass(testClass)
                                      .addIgnorePackage(packagesToIgnore)
                                      .addClassesToModify(classesToLoadByMockClassloader)
                                      .addClassPathAdjuster(useClassPathAdjuster)

File: powermock-core/src/main/java/org/powermock/core/classloader/annotations/UseClassPathAdjuster.java
Patch:
@@ -28,11 +28,13 @@
 /**
  * Use this annotation to enable adjusting of the class path used by powermock
  * to locate class files.
+ * @deprecated Class path adjuster is supported only for Javassist and will be removed in next release.
  */
 @Target( { ElementType.TYPE, ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @Inherited
+@Deprecated()
 public @interface UseClassPathAdjuster {
     Class<? extends ClassPathAdjuster>  value();
 }

File: powermock-core/src/main/java/org/powermock/core/transformers/MethodSignatures.java
Patch:
@@ -4,7 +4,7 @@
 import javassist.CtMethod;
 import javassist.NotFoundException;
 import net.bytebuddy.description.method.MethodDescription;
-import org.powermock.core.PowerMockInternalException;
+import org.powermock.PowerMockInternalException;
 
 import java.lang.reflect.Method;
 

File: powermock-core/src/main/java/org/powermock/core/transformers/bytebuddy/ByteBuddyMockTransformerChainFactory.java
Patch:
@@ -60,6 +60,7 @@ private MockTransformerChainBuilder createDefaultChainBuilder(final TransformStr
                                           .append(new ClassFinalModifierMockTransformer(transformStrategy))
                                           .append(new ConstructorCallMockTransformer(transformStrategy))
                                           .append(new ConstructorModifiersMockTransformer(transformStrategy))
+                                          .append(new MethodMockTransformer(transformStrategy))
                                           .append(new NativeMethodMockTransformer(transformStrategy))
                                           .append(new StaticFinalFieldsMockTransformer(transformStrategy))
                                           .append(new StaticInitializerMockTransformer(transformStrategy));

File: powermock-core/src/test/java/org/powermock/configuration/ConfigurationFactoryImplTest.java
Patch:
@@ -104,6 +104,6 @@ public void should_read_enum_values() throws IOException, URISyntaxException {
     
         assertThat(configuration.getByteCodeFramework())
             .as("Enum from configuration is read correctly")
-            .isEqualTo(ByteCodeFramework.ByteBuddy);
+            .isEqualTo(ByteCodeFramework.Javassist);
     }
 }

File: tests/easymock/junit4/src/test/java/samples/junit4/mockpolicy/MockPolicyUsageExampleTest.java
Patch:
@@ -52,7 +52,7 @@ public void applyClassLoadingPolicy(MockPolicyClassLoadingSettings settings) {
 
 	@Override
 	public void applyInterceptionPolicy(MockPolicyInterceptionSettings settings) {
-		Method calculateMethod = Whitebox.getMethod(ResultCalculator.class);
-		settings.stubMethod(calculateMethod, 4);
+		Method calculateMethod = Whitebox.getMethod(ResultCalculator.class, "calculate");
+		settings.stubMethod(calculateMethod, 4d);
 	}
 }

File: tests/easymock/junit4/src/test/java/samples/junit4/mockpolicy/MockPolicyWithInvocationHandlerTest.java
Patch:
@@ -39,7 +39,7 @@
 public class MockPolicyWithInvocationHandlerTest {
 
 	@Test
-	public void mockPolicyWithInvocationHandlerWorks() throws Exception {
+    public void mockPolicyWithInvocationHandlerWorks() {
 		final SimpleClassWithADependency tested = new SimpleClassWithADependency();
 		Whitebox.setInternalState(tested, new ResultCalculator(0));
 
@@ -57,7 +57,7 @@ public void applyClassLoadingPolicy(MockPolicyClassLoadingSettings settings) {
 
 	@Override
 	public void applyInterceptionPolicy(MockPolicyInterceptionSettings settings) {
-		settings.proxyMethod(method(ResultCalculator.class), new InvocationHandler() {
+        settings.proxyMethod(method(ResultCalculator.class, "calculate"), new InvocationHandler() {
 
 			@Override
 			public Object invoke(Object object, Method method, Object[] args) throws Throwable {

File: tests/easymock/junit4/src/test/java/samples/junit4/mockpolicy/frameworkexample/SimpleFrameworkUserTest.java
Patch:
@@ -28,7 +28,7 @@
 public class SimpleFrameworkUserTest {
 
 	@Test
-	public void testPerformComplexOperation() throws Exception {
+	public void testPerformComplexOperation() {
 		SimpleFrameworkUser tested = new SimpleFrameworkUser();
 		assertEquals(SimpleFrameworkMockPolicy.NATIVE_RESULT_VALUE, tested.performComplexOperation("some complex stuff"));
 	}

File: powermock-core/src/main/java/org/powermock/core/classloader/bytebuddy/ByteBuddyMockClassLoader.java
Patch:
@@ -85,7 +85,7 @@ protected byte[] defineAndTransformClass(final String name, ProtectionDomain pro
         
         Builder<Object> builder = createByteBuddyBuilder(typeDefinitions);
         
-        ClassWrapper<ByteBuddyClass> wrap = classWrapperFactory.wrap(new ByteBuddyClass(typeDefinitions, builder));
+        ClassWrapper<ByteBuddyClass> wrap = classWrapperFactory.wrap(ByteBuddyClass.from(typeDefinitions, builder));
         
         try {
             wrap = transformClass(wrap);

File: powermock-core/src/main/java/org/powermock/core/testlisteners/GlobalNotificationBuildSupport.java
Patch:
@@ -72,7 +72,7 @@ public static void testClassInitiated(Class<?> testClass) {
 
     private static int countInitializersInTrace(final String className) {
         int initializerCount = 0;
-        for (StackTraceElement ste : new Throwable().getStackTrace()) {
+        for (StackTraceElement ste : Thread.currentThread().getStackTrace()) {
             if ("<init>".equals(ste.getMethodName())
                     && className.equals(ste.getClassName())
                     && 2 <= ++initializerCount) {

File: powermock-core/src/main/java/org/powermock/core/transformers/bytebuddy/AbstractByteBuddyMockTransformer.java
Patch:
@@ -37,7 +37,7 @@ public ClassWrapper<ByteBuddyClass> transform(final ClassWrapper<ByteBuddyClass>
         ByteBuddyClass byteBuddyClass = clazz.unwrap();
     
         if (byteBuddyClass != null) {
-            TypeDescription typeDefinitions = byteBuddyClass.getTypeDefinitions();
+            TypeDescription typeDefinitions = byteBuddyClass.getTypeDescription();
     
             if (!classShouldTransformed(typeDefinitions)) {
                 return clazz;

File: powermock-core/src/main/java/org/powermock/core/transformers/bytebuddy/ByteBuddyMockTransformerChainFactory.java
Patch:
@@ -59,6 +59,8 @@ private MockTransformerChainBuilder createDefaultChainBuilder(final TransformStr
         return DefaultMockTransformerChain.newBuilder()
                                           .append(new ClassFinalModifierMockTransformer(transformStrategy))
                                           .append(new ConstructorCallMockTransformer(transformStrategy))
+                                          .append(new ConstructorModifiersMockTransformer(transformStrategy))
+                                          .append(new NativeMethodMockTransformer(transformStrategy))
                                           .append(new StaticFinalFieldsMockTransformer(transformStrategy))
                                           .append(new StaticInitializerMockTransformer(transformStrategy));
     }

File: powermock-core/src/main/java/org/powermock/core/transformers/bytebuddy/NativeMethodMockTransformer.java
Patch:
@@ -45,7 +45,7 @@ public ByteBuddyClass transform(final ByteBuddyClass clazz) throws Exception {
                                      .method(isNative().and(ElementMatchers.isStatic()))
                                      .intercept(MethodDelegation.to(StaticInception.class))
                                      .annotateMethod(identifier);
-        return new ByteBuddyClass(clazz.getTypeDefinitions(), builder);
+        return ByteBuddyClass.from(clazz.getTypeDescription(), builder);
     }
     
     public static class InstanceInception {

File: powermock-core/src/test/java/org/powermock/configuration/ConfigurationFactoryImplTest.java
Patch:
@@ -104,6 +104,6 @@ public void should_read_enum_values() throws IOException, URISyntaxException {
     
         assertThat(configuration.getByteCodeFramework())
             .as("Enum from configuration is read correctly")
-            .isEqualTo(ByteCodeFramework.Javassist);
+            .isEqualTo(ByteCodeFramework.ByteBuddy);
     }
 }

File: powermock-core/src/test/java/org/powermock/core/classloader/MockClassLoaderTest.java
Patch:
@@ -368,13 +368,13 @@ public ClassWrapper<ByteBuddyClass> transform(final ClassWrapper<ByteBuddyClass>
             ByteBuddyClass bytebuddy = clazz.unwrap();
     
             Builder builder = bytebuddy.getBuilder();
-            TypeDescription typeDefinitions = bytebuddy.getTypeDefinitions();
+            TypeDescription typeDefinitions = bytebuddy.getTypeDescription();
     
             builder = builder.method(isDeclaredBy(typeDefinitions))
                              .intercept(FixedValue.nullValue());
     
             
-            return clazz.wrap(new ByteBuddyClass(typeDefinitions, builder));
+            return clazz.wrap(ByteBuddyClass.from(typeDefinitions, builder));
         }
     }
 }

File: powermock-core/src/test/java/org/powermock/core/transformers/MockTransformerTestHelper.java
Patch:
@@ -120,6 +120,8 @@ private static MockTransformer getInstance(final Class<?> mockGateway, final Tra
     }
     
     private static MockTransformerChain createChainFrom(final MockTransformer transformer) {
-        return DefaultMockTransformerChain.newBuilder().append(transformer).build();
+        return DefaultMockTransformerChain.newBuilder()
+                                          .append(transformer)
+                                          .build();
     }
 }

File: powermock-core/src/main/java/org/powermock/configuration/support/ConfigurationFactoryImpl.java
Patch:
@@ -28,7 +28,8 @@ public class ConfigurationFactoryImpl implements ConfigurationFactory {
     private static final String USER_CONFIGURATION = "org/powermock/extensions/configuration.properties";
     private static final String DEFAULT_CONFIGURATION = "org/powermock/default.properties";
     
-    @Override public <T extends Configuration<T>> T create(final Class<T> configurationType) {
+    @Override
+    public <T extends Configuration<T>> T create(final Class<T> configurationType) {
         T configuration = readUserConfiguration(configurationType);
         T defaultConfiguration = readDefault(configurationType);
         return defaultConfiguration.merge(configuration);

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/partialmocking/PartialMockingRetainsStateTest.java
Patch:
@@ -33,14 +33,14 @@
 public class PartialMockingRetainsStateTest {
 
 	@Test
-	public void spyingOnAnObjectRetainsState() throws Exception {
+    public void spyingOnAnObjectRetainsState() {
 		MockSelfDemo demo = new MockSelfDemo(4);
 		MockSelfDemo spy = PowerMockito.spy(demo);
 		assertEquals(4, spy.getConstructorValue());
 	}
 
 	@Test
-	public void spyingOnAClassRetainsState() throws Exception {
+    public void spyingOnAClassRetainsState() {
 		PowerMockito.spy(MockWithStaticStateDemo.class);
 		assertEquals(5, MockWithStaticStateDemo.getState());
 	}

File: powermock-core/src/main/java/org/powermock/core/classloader/annotations/PrepareEverythingForTest.java
Patch:
@@ -15,6 +15,8 @@
  */
 package org.powermock.core.classloader.annotations;
 
+import org.powermock.core.classloader.ByteCodeFramework;
+
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Inherited;
@@ -43,4 +45,5 @@
 @Documented
 @Inherited
 public @interface PrepareEverythingForTest {
+    ByteCodeFramework byteCodeFramework() default ByteCodeFramework.Javassist;
 }

File: powermock-core/src/main/java/org/powermock/core/classloader/annotations/PrepareForTest.java
Patch:
@@ -16,6 +16,7 @@
 package org.powermock.core.classloader.annotations;
 
 import org.powermock.core.IndicateReloadClass;
+import org.powermock.core.classloader.ByteCodeFramework;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -76,4 +77,6 @@
     Class<?>[] value() default IndicateReloadClass.class;
 
     String[] fullyQualifiedNames() default "";
+    
+    ByteCodeFramework byteCodeFramework() default ByteCodeFramework.Javassist;
 }

File: powermock-core/src/main/java/org/powermock/core/transformers/javassist/JavaAssistTestClassTransformer.java
Patch:
@@ -48,7 +48,7 @@ public ClassWrapper<CtClass> transform(final ClassWrapper<CtClass> clazz) throws
             return clazz;
     }
     
-    private CtClass transform(final CtClass clazz) throws Exception {
+    private void transform(final CtClass clazz) throws Exception {
         if (clazz.isFrozen()) {
             clazz.defrost();
         }
@@ -63,8 +63,7 @@ private CtClass transform(final CtClass clazz) throws Exception {
             makeDeferConstructorNonPublic(clazz);
             restoreOriginalConstructorsAccesses(clazz);
         }
-        
-        return clazz;
+    
     }
     
     private boolean isTestClass(CtClass clazz) {

File: powermock-core/src/test/java/org/powermock/core/transformers/javassist/TestClassTransformerJavaAssistTest.java
Patch:
@@ -60,7 +60,7 @@ public static List<?> values() {
     }
     
     @Before
-    public void setUp() throws Exception {
+    public void setUp() {
         transformerChainFactory = new JavassistMockTransformerChainFactory();
     }
     

File: powermock-core/src/main/java/org/powermock/core/transformers/javassist/MethodMockTransformer.java
Patch:
@@ -70,7 +70,7 @@ private void modifyNativeMethod(CtMethod method, CtClass returnTypeAsCtClass,
         String classOrInstance = classOrInstance(method);
         method.setModifiers(method.getModifiers() - Modifier.NATIVE);
         String code = "Object value = "
-                          + MockGateway.class.getName()
+                          + mockGetawayClass.getName()
                           + ".methodCall("
                           + classOrInstance
                           + ", \""

File: powermock-modules/powermock-module-testng/src/main/java/org/powermock/modules/testng/internal/PowerMockClassloaderObjectFactory.java
Patch:
@@ -23,10 +23,10 @@
 
 public class PowerMockClassloaderObjectFactory implements IObjectFactory {
 
-    private final ClassLoaderFactory classLoaderFactory;
+    private final TestNGMockClassLoaderFactory classLoaderFactory;
 
     public PowerMockClassloaderObjectFactory() {
-        classLoaderFactory = new ClassLoaderFactory();
+        classLoaderFactory = new TestNGMockClassLoaderFactory();
     }
 
     @Override

File: powermock-modules/powermock-module-testng/src/main/java/org/powermock/modules/testng/internal/PowerMockExpectedExceptionsExtractorImpl.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.powermock.modules.testng.internal;
 
+import org.powermock.tests.utils.IgnorePackagesExtractor;
 import org.testng.annotations.Test;
 
 import java.lang.reflect.AnnotatedElement;
@@ -23,7 +24,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-public class PowerMockExpectedExceptionsExtractorImpl implements ExpectedExceptionsExtractor {
+public class PowerMockExpectedExceptionsExtractorImpl implements IgnorePackagesExtractor {
 
     public String[] getPackagesToIgnore(AnnotatedElement element) {
         List<String> ignoredPackages = new LinkedList<String>();

File: powermock-modules/powermock-module-testng/src/main/java/org/powermock/modules/testng/internal/TestClassInstanceFactory.java
Patch:
@@ -30,7 +30,7 @@ class TestClassInstanceFactory {
     private final Object[] params;
     private final ClassLoader mockLoader;
 
-    TestClassInstanceFactory(Constructor constructor, ClassLoaderFactory classLoaderFactory, Object... params) {
+    TestClassInstanceFactory(Constructor constructor, TestNGMockClassLoaderFactory classLoaderFactory, Object... params) {
         this.constructor = constructor;
         this.params = params;
         this.testClass = constructor.getDeclaringClass();

File: powermock-modules/powermock-module-testng/src/main/java/org/powermock/modules/testng/internal/ClassLoaderFactory.java
Patch:
@@ -29,6 +29,7 @@ class ClassLoaderFactory {
     private final TestClassesExtractor testClassesExtractor;
     private final IgnorePackagesExtractor ignorePackagesExtractor;
     private final StaticConstructorSuppressExtractorImpl staticConstructorSuppressExtractor;
+    
     private final ExpectedExceptionsExtractor expectedExceptionsExtractor;
     
     ClassLoaderFactory() {

File: powermock-modules/powermock-module-testng/src/main/java/org/powermock/modules/testng/internal/TestClassInstanceFactory.java
Patch:
@@ -24,9 +24,6 @@
 
 import java.lang.reflect.Constructor;
 
-/**
- *
- */
 class TestClassInstanceFactory {
     private final Constructor constructor;
     private final Class<?> testClass;

File: powermock-classloading/powermock-classloading-objenesis/src/test/java/powermock/classloading/ObjenesisClassloaderExecutorTest.java
Patch:
@@ -16,6 +16,7 @@
 
 package powermock.classloading;
 
+import org.junit.Ignore;
 import org.junit.Test;
 import org.powermock.classloading.SingleClassloaderExecutor;
 import org.powermock.core.classloader.MockClassLoader;
@@ -42,6 +43,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertSame;
 
+@Ignore("Test are failed on JDK more that 1.6. On Travis we can run only on JDK8 and JDK9")
 public class ObjenesisClassloaderExecutorTest {
     
     @Test

File: powermock-classloading/powermock-classloading-objenesis/src/test/java/powermock/classloading/ObjenesisDeepClonerTest.java
Patch:
@@ -17,6 +17,7 @@
 package powermock.classloading;
 
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.powermock.classloading.DeepCloner;
 
@@ -29,6 +30,7 @@
 import static org.junit.Assert.assertNotSame;
 import static org.junit.Assume.assumeTrue;
 
+@Ignore("Test are failed on JDK more that 1.6. On Travis we can run only on JDK8 and JDK9")
 public class ObjenesisDeepClonerTest {
     
     /**

File: powermock-core/src/main/java/org/powermock/core/classloader/MockClassLoaderConfiguration.java
Patch:
@@ -42,6 +42,7 @@ public class MockClassLoaderConfiguration {
      */
     static final String[] PACKAGES_TO_BE_DEFERRED = new String[]{
         "org.hamcrest.*",
+        "jdk.*",
         "java.*",
         "javax.accessibility.*",
         "sun.*",

File: powermock-core/src/test/java/org/powermock/core/test/ClassLoaderTestHelper.java
Patch:
@@ -77,7 +77,6 @@ private static MockClassLoader getMockClassLoader(final MockTransformerChain moc
         if (loader == null) {
             loader = mockClassloaderFactory.getInstance(new String[]{MockClassLoader.MODIFY_ALL_CLASSES});
             loader.setMockTransformerChain(mockTransformerChain);
-            loader.getConfiguration().addIgnorePackage(GlobalConfiguration.powerMockConfiguration().getGlobalIgnore());
             classloaders.put(mockTransformerChain, loader);
         }
         return loader;

File: tests/junit4/src/test/java/samples/powermockito/junit4/bugs/github352/GitHub352Test.java
Patch:
@@ -9,9 +9,6 @@
 
 import static org.assertj.core.api.Java6Assertions.assertThat;
 
-/**
- *
- */
 public class GitHub352Test {
 
 

File: tests/junit4/src/test/java/samples/powermockito/junit4/bugs/github733/GitHub733Test.java
Patch:
@@ -7,7 +7,7 @@ public class GitHub733Test {
 
     @Test
     public void testPowerMockJUnit4MethodValidatorAcceptsTestAnnotatedMethods() throws Exception {
-
+    
         PowerMockJUnit4MethodValidator validator = new PowerMockJUnit4MethodValidator(new UseTestAnnotatedTest(UseTestAnnotatedTest.MethodToTest.class));
         validator.validateInstanceMethods();
     }

File: powermock-core/src/test/java/org/powermock/core/classloader/MockClassLoaderConfigurationTest.java
Patch:
@@ -21,10 +21,8 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.powermock.reflect.Whitebox;
 
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.assertTrue;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 
 public class MockClassLoaderConfigurationTest {
     

File: powermock-core/src/test/java/org/powermock/core/test/ClassLoaderTestHelper.java
Patch:
@@ -20,6 +20,8 @@
 
 import javassist.ClassPool;
 import javassist.Loader;
+import org.powermock.configuration.GlobalConfiguration;
+import org.powermock.configuration.PowerMockConfiguration;
 import org.powermock.core.classloader.MockClassLoader;
 import org.powermock.core.transformers.MockTransformerChain;
 
@@ -75,6 +77,7 @@ private static MockClassLoader getMockClassLoader(final MockTransformerChain moc
         if (loader == null) {
             loader = mockClassloaderFactory.getInstance(new String[]{MockClassLoader.MODIFY_ALL_CLASSES});
             loader.setMockTransformerChain(mockTransformerChain);
+            loader.getConfiguration().addIgnorePackage(GlobalConfiguration.powerMockConfiguration().getGlobalIgnore());
             classloaders.put(mockTransformerChain, loader);
         }
         return loader;

File: powermock-core/src/test/java/org/powermock/core/transformers/ClassFinalModifierMockTransformerTest.java
Patch:
@@ -31,8 +31,8 @@
 import java.util.Collection;
 
 import static java.lang.reflect.Modifier.isFinal;
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.catchThrowable;
+import static org.assertj.core.api.Java6Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.catchThrowable;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.not;
 import static org.junit.Assert.assertFalse;

File: powermock-core/src/test/java/org/powermock/core/transformers/ConstructorCallMockTransformerTest.java
Patch:
@@ -44,8 +44,8 @@
 import java.util.ArrayList;
 import java.util.Collection;
 
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.catchThrowable;
+import static org.assertj.core.api.Java6Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.catchThrowable;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.junit.Assume.assumeThat;
 import static org.junit.Assume.assumeTrue;

File: powermock-core/src/test/java/org/powermock/core/transformers/ConstructorsMockTransformerTest.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.Collection;
 import java.util.Comparator;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.not;
 import static org.junit.Assume.assumeThat;

File: powermock-core/src/test/java/org/powermock/core/transformers/InstrumentMockTransformerTest.java
Patch:
@@ -34,8 +34,7 @@
 
 import java.lang.reflect.Field;
 
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.fail;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.powermock.core.test.ClassLoaderTestHelper.runTestWithNewClassLoader;
 
 public class InstrumentMockTransformerTest extends AbstractBaseMockTransformerTest {

File: powermock-core/src/test/java/org/powermock/core/transformers/MethodSizeMockTransformerTest.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.assertj.core.api.Assertions.catchThrowable;
 import static org.junit.Assert.assertNotNull;
 

File: powermock-core/src/test/java/org/powermock/core/transformers/MockTransformerChainTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.Test;
 import org.powermock.core.transformers.support.DefaultMockTransformerChain;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 
 public class MockTransformerChainTest {
     

File: powermock-core/src/test/java/org/powermock/core/transformers/StaticFinalFieldsMockTransformerTest.java
Patch:
@@ -31,7 +31,7 @@
 
 import static java.lang.reflect.Modifier.isFinal;
 import static java.lang.reflect.Modifier.isTransient;
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.not;
 import static org.junit.Assume.assumeThat;

File: powermock-core/src/test/java/org/powermock/core/transformers/StaticMethodsMockTransformerTest.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.ArrayList;
 import java.util.Collection;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.powermock.core.transformers.mock.MockGatewaySpy.ConditionBuilder.registered;
 import static org.powermock.core.transformers.mock.MockGatewaySpy.methodCalls;
 

File: powermock-core/src/test/java/org/powermock/core/transformers/SuppressStaticInitializerMockTransformerTest.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.ArrayList;
 import java.util.Collection;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.not;
 import static org.junit.Assume.assumeThat;

File: tests/easymock/junit412/src/test/java/samples/junit412/bug/github755/TwoObjectsAnnotatedTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.powermock.modules.junit4.PowerMockRunner;
 import samples.newmocking.SomeDependency;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 
 @RunWith(PowerMockRunner.class)
 public class TwoObjectsAnnotatedTest {

File: tests/mockito/inline/src/test/java/samples/powermockito/inline/bugs/github793/PowerMockStaticMockingTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.powermock.modules.junit4.PowerMockRunner;
 
 import static org.assertj.core.api.Java6Assertions.assertThat;
-import static org.assertj.core.api.Assertions.assertThatThrownBy;
+import static org.assertj.core.api.Java6Assertions.assertThatThrownBy;
 import static org.junit.Assume.assumeTrue;
 import static org.mockito.Mockito.when;
 

File: tests/mockito/junit4-agent/src/test/java/samples/powermockito/junit4/agent/AssertPowerMockRuleDelagatesToOtherRulesTest.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 
 /**
  * This test demonstrates that the PowerMockRule delegates to other rules.

File: tests/mockito/junit4-rule-xstream/src/test/java/samples/powermockito/junit4/rule/xstream/AssertPowerMockRuleDelagatesToOtherRulesTest.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.List;
 
 import static junit.framework.Assert.assertTrue;
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 
 /**

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/staticmocking/MockStaticCases.java
Patch:
@@ -28,7 +28,7 @@
 import samples.singleton.StaticService;
 
 import static org.assertj.core.api.Java6Assertions.assertThat;
-import static org.assertj.core.api.Assertions.assertThatThrownBy;
+import static org.assertj.core.api.Java6Assertions.assertThatThrownBy;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.fail;

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/verify/VerifyNoMoreInteractionsTest.java
Patch:
@@ -27,7 +27,7 @@
 import samples.singleton.StaticHelper;
 import samples.singleton.StaticService;
 
-import static org.assertj.core.api.Assertions.assertThatThrownBy;
+import static org.assertj.core.api.Java6Assertions.assertThatThrownBy;
 import static org.junit.Assert.assertNull;
 import static org.mockito.Mockito.times;
 import static org.powermock.api.mockito.PowerMockito.mock;

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/verify/VerifyZeroInteractionsTest.java
Patch:
@@ -29,7 +29,7 @@
 import samples.singleton.StaticExample;
 
 import static org.assertj.core.api.Java6Assertions.assertThat;
-import static org.assertj.core.api.Assertions.assertThatThrownBy;
+import static org.assertj.core.api.Java6Assertions.assertThatThrownBy;
 import static org.assertj.core.api.Assertions.catchThrowable;
 import static org.powermock.api.mockito.PowerMockito.mock;
 import static org.powermock.api.mockito.PowerMockito.mockStatic;

File: powermock-core/src/main/java/org/powermock/core/classloader/MockClassLoader.java
Patch:
@@ -117,7 +117,7 @@ private Class<?> loadMockClass(String name, ProtectionDomain protectionDomain) t
         return defineClass(name, protectionDomain, clazz);
     }
     
-    protected Class<?> defineClass(final String name, final ProtectionDomain protectionDomain, final byte[] clazz) {
+    public Class<?> defineClass(final String name, final ProtectionDomain protectionDomain, final byte[] clazz) {
         return defineClass(name, clazz, 0, clazz.length, protectionDomain);
     }
     

File: powermock-core/src/main/java/org/powermock/core/transformers/javassist/support/PowerMockExpressionEditor.java
Patch:
@@ -144,7 +144,7 @@ public void edit(ConstructorCall c) throws CannotCompileException {
             code.append("{Object value =")
                 .append(mockGetawayClass.getName())
                 .append(".constructorCall($class, $args, $sig);");
-            code.append("if (value != ").append(mockGetawayClass.getName()).append(".PROCEED){");
+            code.append("if (value != ").append(MockGateway.class.getName()).append(".PROCEED){");
 
             /*
              * TODO Suppress and lazy inject field (when this feature is ready).

File: powermock-core/src/test/java/org/powermock/core/transformers/javassist/TestClassTransformerJavaAssistTest.java
Patch:
@@ -76,7 +76,7 @@ public void preparedSubclassShouldNotGetPublicDeferConstructor() throws Exceptio
         assertEquals("Original number of constructoprs",
                      1, SupportClasses.SubClass.class.getConstructors().length);
         try {
-            fail("A public defer-constructor is not expected: " + clazz.getConstructor(IndicateReloadClass.class));
+            fail("A public defer-constructor is not returnOnMethodCall: " + clazz.getConstructor(IndicateReloadClass.class));
         } catch (NoSuchMethodException is_expected) {
             
         }

File: powermock-core/src/test/java/org/powermock/core/classloader/MockClassLoaderTest.java
Patch:
@@ -44,10 +44,8 @@
 import java.util.List;
 
 import static org.assertj.core.api.Java6Assertions.assertThat;
-import static org.junit.Assert.assertEquals;
 import static java.util.Arrays.asList;
 import static net.bytebuddy.matcher.ElementMatchers.isDeclaredBy;
-import static org.assertj.core.api.Assertions.assertThat;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assume.assumeThat;

File: powermock-core/src/main/java/org/powermock/core/transformers/bytebuddy/StaticInitializerMockTransformer.java
Patch:
@@ -76,8 +76,6 @@ private StaticInitializerClassVisitor(final ClassVisitor classVisitor) {
         public MethodVisitor visitMethod(int modifiers, String internalName, String descriptor, String signature, String[] exception) {
             if (MethodDescription.TYPE_INITIALIZER_INTERNAL_NAME.equals(internalName)) {
                 return new MethodVisitor(Opcodes.ASM5) {
-                
-                    
                 };
             }
             return super.visitMethod(modifiers, internalName, descriptor, signature, exception);

File: powermock-core/src/main/java/org/powermock/core/transformers/bytebuddy/support/ByteBuddyClass.java
Patch:
@@ -22,11 +22,10 @@
 import net.bytebuddy.dynamic.DynamicType.Builder;
 
 public class ByteBuddyClass {
-    
     private final Builder builder;
     private final TypeDescription typeDefinitions;
     
-    public ByteBuddyClass (final TypeDescription typeDefinitions, final Builder builder) {
+    public ByteBuddyClass(final TypeDescription typeDefinitions, final Builder builder) {
         this.builder = builder;
         this.typeDefinitions = typeDefinitions;
     }

File: powermock-core/src/main/java/org/powermock/core/transformers/javassist/StaticFinalNativeMethodMockTransformer.java
Patch:
@@ -24,7 +24,6 @@
 import javassist.NotFoundException;
 import org.powermock.core.transformers.TransformStrategy;
 
-import static org.powermock.core.transformers.TransformStrategy.INST_TRANSFORM;
 
 public class StaticFinalNativeMethodMockTransformer extends MethodMockTransformer {
     
@@ -34,11 +33,9 @@ public StaticFinalNativeMethodMockTransformer(final TransformStrategy strategy)
     
     @Override
     public CtClass transform(final CtClass clazz) throws NotFoundException, CannotCompileException {
-        if (getStrategy() != INST_TRANSFORM) {
             for (CtMethod m : clazz.getDeclaredMethods()) {
                 modifyMethod(m);
             }
-        }
         return clazz;
     }
 }

File: powermock-core/src/main/java/org/powermock/tests/utils/impl/MockClassLoaderFactory.java
Patch:
@@ -81,7 +81,7 @@ public MockClassLoader run() {
         return mockLoader;
     }
     
-    private JavassistMockClassLoader createMockClassLoader(final String[] classesToLoadByMockClassloader, final UseClassPathAdjuster useClassPathAdjuster) {
+    private MockClassLoader createMockClassLoader(final String[] classesToLoadByMockClassloader, final UseClassPathAdjuster useClassPathAdjuster) {
         return new JavassistMockClassLoader(classesToLoadByMockClassloader, packagesToIgnore, useClassPathAdjuster);
     }
     

File: powermock-core/src/test/java/org/powermock/core/classloader/MockClassLoaderTest.java
Patch:
@@ -22,6 +22,7 @@
 import net.bytebuddy.description.type.TypeDescription;
 import net.bytebuddy.dynamic.DynamicType.Builder;
 import net.bytebuddy.implementation.FixedValue;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
@@ -235,7 +236,7 @@ public Class<?> loadClass(String name)
     }
     
     @Test(expected = ClassNotFoundException.class)
-    @Ignore
+    @Ignore("Has to be decided desirable behaviour in this case")
     public void should_throw_ClassNotFoundException_if_cannot_find_dynamic_class_in_deferred_class_loader() throws Exception {
         
         MockClassLoader mockClassLoader = mockClassLoaderFactory.getInstance(new String[0]);

File: powermock-core/src/test/java/org/powermock/core/transformers/SuppressStaticInitializerMockTransformerTest.java
Patch:
@@ -24,9 +24,7 @@
 import org.junit.runners.Parameterized;
 import org.powermock.core.MockRepository;
 import org.powermock.core.test.MockClassLoaderFactory;
-import org.powermock.core.transformers.bytebuddy.FinalModifiersMockTransformer;
 import org.powermock.core.transformers.bytebuddy.StaticInitializerMockTransformer;
-import org.powermock.core.transformers.javassist.ClassFinalModifierMockTransformer;
 import org.powermock.core.transformers.javassist.SuppressStaticInitializerMockTransformer;
 import org.powermock.reflect.Whitebox;
 import powermock.test.support.MainMockTransformerTestSupport.StaticInitialization;
@@ -62,6 +60,7 @@ public SuppressStaticInitializerMockTransformerTest(
     
     @Before
     public void setUp() throws Exception {
+        super.setUp();
         MockRepository.removeSuppressStaticInitializer(StaticInitialization.class.getName());
     }
     

File: powermock-core/src/test/java/org/powermock/core/transformers/javassist/TestClassTransformerJavaAssistTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.powermock.core.classloader.javassist.JavassistMockClassLoader;
 import org.powermock.core.transformers.MockTransformer;
 import org.powermock.core.transformers.MockTransformerChainFactory;
+import org.powermock.core.transformers.TestClassTransformer;
 import powermock.test.support.MainMockTransformerTestSupport.SupportClasses;
 
 import java.lang.reflect.Constructor;
@@ -41,7 +42,7 @@
 import static org.junit.Assert.fail;
 
 @RunWith(Parameterized.class)
-public class TestClassTransformerTest {
+public class TestClassTransformerJavaAssistTest {
     
     private MockTransformerChainFactory transformerChainFactory;
     

File: powermock-core/src/main/java/org/powermock/core/transformers/bytebuddy/AbstractByteBuddyMockTransformer.java
Patch:
@@ -39,7 +39,7 @@ public ClassWrapper<ByteBuddyClass> transform(final ClassWrapper<ByteBuddyClass>
         if (byteBuddyClass != null) {
             TypeDescription typeDefinitions = byteBuddyClass.getTypeDefinitions();
     
-            if (classShouldBeIgnored(typeDefinitions)) {
+            if (!classShouldTransformed(typeDefinitions)) {
                 return clazz;
             }
             
@@ -49,7 +49,7 @@ public ClassWrapper<ByteBuddyClass> transform(final ClassWrapper<ByteBuddyClass>
         return clazz.wrap(byteBuddyClass);
     }
     
-    protected abstract boolean classShouldBeIgnored(final TypeDescription typeDefinitions);
+    protected abstract boolean classShouldTransformed(final TypeDescription typeDefinitions);
     
     public abstract ByteBuddyClass transform(ByteBuddyClass clazz) throws Exception;
     

File: powermock-core/src/main/java/org/powermock/core/transformers/bytebuddy/FinalModifiersMockTransformer.java
Patch:
@@ -49,8 +49,8 @@ public ByteBuddyClass transform(final ByteBuddyClass clazz) throws Exception {
         return visit(clazz, new RemoveFinalModifier());
     }
     
-    protected boolean classShouldBeIgnored(final TypeDescription typeDefinitions) {
-        return getStrategy() == INST_REDEFINE || typeDefinitions.isInterface();
+    protected boolean classShouldTransformed(final TypeDescription typeDefinitions) {
+        return getStrategy() != INST_REDEFINE && !typeDefinitions.isInterface();
     }
     
     private static class RemoveFinalModifier extends AbstractBase {

File: powermock-core/src/main/java/org/powermock/core/classloader/bytebuddy/ByteBuddyMockClassLoader.java
Patch:
@@ -66,7 +66,7 @@ protected byte[] defineAndTransformClass(final String name) throws ClassNotFound
         TypeDescription typeDefinitions = getTypeDefinitions(name);
     
         Builder<Object> builder = createByteBuddyBuilder(typeDefinitions);
-    
+        
         ClassWrapper<ByteBuddyClass> wrap = classWrapperFactory.wrap(new ByteBuddyClass(typeDefinitions, builder));
         
         try {

File: powermock-classloading/powermock-classloading-objenesis/src/test/java/powermock/classloading/ObjenesisClassloaderExecutorTest.java
Patch:
@@ -192,9 +192,9 @@ public void run() {
     private MockClassLoader createClassloader() {
         MockClassLoader classloader = new JavassistMockClassLoader(new String[]{MyClass.class.getName(),
             MyArgument.class.getName(), MyReturnValue.class.getName()});
-        MockTransformer mainMockTransformer = new MockTransformer() {
+        MockTransformer mainMockTransformer = new MockTransformer<Object>() {
             @Override
-            public <T> ClassWrapper<T> transform(ClassWrapper<T> clazz) throws Exception {
+            public ClassWrapper<Object> transform(ClassWrapper<Object> clazz) throws Exception {
                 return clazz;
             }
         };

File: powermock-classloading/powermock-classloading-xstream/src/test/java/powermock/classloading/XStreamClassloaderExecutorTest.java
Patch:
@@ -289,9 +289,9 @@ public void run() {
 	private MockClassLoader createClassloader() {
 		MockClassLoader classloader = new JavassistMockClassLoader(new String[] { MyClass.class.getName(),
 				MyArgument.class.getName(), MyReturnValue.class.getName() });
-		MockTransformer mainMockTransformer = new MockTransformer() {
+		MockTransformer mainMockTransformer = new MockTransformer<Object>() {
 			@Override
-			public <T> ClassWrapper<T> transform(ClassWrapper<T> clazz) throws Exception {
+			public ClassWrapper<Object> transform(ClassWrapper<Object> clazz) throws Exception {
 				return clazz;
 			}
 		};

File: powermock-core/src/main/java/org/powermock/core/transformers/MockTransformer.java
Patch:
@@ -23,7 +23,7 @@
  *
  * @author Johan Haleby
  */
-public interface MockTransformer {
+public interface MockTransformer<T> {
     
     /**
      * Transforms the {@code clazz}.
@@ -32,5 +32,5 @@ public interface MockTransformer {
      *              transform into a mock enabled class.
      * @return A {@code ClassWrapper} representation of the mocked class.
      */
-    <T> ClassWrapper<T> transform(ClassWrapper<T> clazz) throws Exception;
+    ClassWrapper<T> transform(ClassWrapper<T> clazz) throws Exception;
 }

File: powermock-core/src/main/java/org/powermock/core/transformers/TransformStrategy.java
Patch:
@@ -17,5 +17,7 @@
 package org.powermock.core.transformers;
 
 public enum TransformStrategy {
-    CLASSLOADER, INST_REDEFINE, INST_TRANSFORM
+    CLASSLOADER,
+    INST_REDEFINE,
+    INST_TRANSFORM
 }

File: powermock-core/src/main/java/org/powermock/core/transformers/javassist/ClassFinalModifierMockTransformer.java
Patch:
@@ -43,7 +43,7 @@ public CtClass transform(final CtClass clazz) {
             if (Modifier.isFinal(clazz.getModifiers())) {
                 clazz.setModifiers(clazz.getModifiers() ^ Modifier.FINAL);
             }
-    
+            
             ClassFile classFile = clazz.getClassFile2();
             AttributeInfo attribute = classFile.getAttribute(InnerClassesAttribute.tag);
             if (attribute != null && attribute instanceof InnerClassesAttribute) {

File: powermock-core/src/main/java/org/powermock/core/transformers/javassist/MethodMockTransformer.java
Patch:
@@ -51,7 +51,7 @@ void modifyMethod(final CtMethod method) throws NotFoundException, CannotCompile
             }
         }
     }
- 
+    
     
     private void modifyNativeMethod(CtMethod method, CtClass returnTypeAsCtClass,
                                     String returnTypeAsString) throws CannotCompileException {
@@ -108,5 +108,5 @@ private void modifyMethod(CtMethod method, CtClass returnTypeAsCtClass,
         
         method.insertBefore("{ " + code + "}");
     }
-  
+    
 }

File: powermock-core/src/main/java/org/powermock/core/transformers/javassist/StaticFinalNativeMethodMockTransformer.java
Patch:
@@ -41,6 +41,4 @@ public CtClass transform(final CtClass clazz) throws NotFoundException, CannotCo
         }
         return clazz;
     }
-    
-    
 }

File: powermock-core/src/main/java/org/powermock/core/transformers/support/DefaultMockTransformerChain.java
Patch:
@@ -19,7 +19,6 @@
 package org.powermock.core.transformers.support;
 
 
-import org.powermock.core.classloader.MockClassLoaderBuilder;
 import org.powermock.core.transformers.ClassWrapper;
 import org.powermock.core.transformers.MockTransformer;
 import org.powermock.core.transformers.MockTransformerChain;
@@ -60,12 +59,12 @@ public MockTransformerChainBuilder append(MockTransformer transformer) {
             transformers.add(transformer);
             return this;
         }
-    
+        
         public MockTransformerChainBuilder append(final List<MockTransformer> mockTransformerChain) {
             transformers.addAll(mockTransformerChain);
             return this;
         }
-    
+        
         public MockTransformerChain build() {
             return new DefaultMockTransformerChain(transformers);
         }

File: powermock-modules/powermock-module-javaagent/src/main/java/org/powermock/modules/agent/PowerMockClassTransformer.java
Patch:
@@ -25,7 +25,7 @@
 import org.powermock.core.transformers.MockTransformerChain;
 import org.powermock.core.transformers.TransformStrategy;
 import org.powermock.core.transformers.javassist.JavassistMockTransformerChainFactory;
-import org.powermock.core.transformers.javassist.support.ClassWrapperFactoryImpl;
+import org.powermock.core.transformers.javassist.support.JavaAssistClassWrapperFactory;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
@@ -46,7 +46,7 @@ class PowerMockClassTransformer extends AbstractClassTransformer implements Clas
     
     PowerMockClassTransformer() {
         super();
-        wrapperFactory = new ClassWrapperFactoryImpl();
+        wrapperFactory = new JavaAssistClassWrapperFactory();
     }
     
     public void setClassesToTransform(Collection<String> classesToTransform) {

File: powermock-classloading/powermock-classloading-xstream/src/test/java/powermock/classloading/XStreamClassloaderExecutorTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.powermock.core.classloader.javassist.JavassistMockClassLoader;
 import org.powermock.core.transformers.ClassWrapper;
 import org.powermock.core.transformers.MockTransformer;
+import org.powermock.core.transformers.support.DefaultMockTransformerChain;
 import powermock.classloading.classes.MyArgument;
 import powermock.classloading.classes.MyClass;
 import powermock.classloading.classes.MyCollectionHolder;
@@ -294,9 +295,7 @@ public <T> ClassWrapper<T> transform(ClassWrapper<T> clazz) throws Exception {
 				return clazz;
 			}
 		};
-		LinkedList<MockTransformer> linkedList = new LinkedList<MockTransformer>();
-		linkedList.add(mainMockTransformer);
-		classloader.setMockTransformerChain(linkedList);
+		classloader.setMockTransformerChain(DefaultMockTransformerChain.newBuilder().append(mainMockTransformer).build());
 		return classloader;
 	}
 }

File: powermock-core/src/main/java/org/powermock/tests/utils/impl/AbstractCommonTestSuiteChunkerImpl.java
Patch:
@@ -6,7 +6,7 @@
 import org.powermock.core.classloader.annotations.PrepareOnlyThisForTest;
 import org.powermock.core.classloader.annotations.SuppressStaticInitializationFor;
 import org.powermock.core.transformers.MockTransformer;
-import org.powermock.core.transformers.impl.TestClassTransformer;
+import org.powermock.core.transformers.javassist.TestClassTransformer;
 import org.powermock.tests.utils.ArrayMerger;
 import org.powermock.tests.utils.IgnorePackagesExtractor;
 import org.powermock.tests.utils.TestChunk;

File: powermock-core/src/main/java/org/powermock/core/classloader/annotations/UseClassPathAdjuster.java
Patch:
@@ -16,7 +16,7 @@
 
 package org.powermock.core.classloader.annotations;
 
-import org.powermock.core.classloader.ClassPathAdjuster;
+import org.powermock.core.classloader.javassist.ClassPathAdjuster;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;

File: powermock-core/src/main/java/org/powermock/core/classloader/javassist/ClassPathAdjuster.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.powermock.core.classloader;
+package org.powermock.core.classloader.javassist;
 
 import javassist.ClassPool;
 import org.powermock.core.classloader.annotations.UseClassPathAdjuster;

File: powermock-core/src/main/java/org/powermock/core/transformers/impl/ClassMockTransformer.java
Patch:
@@ -24,7 +24,7 @@
 import static org.powermock.core.transformers.TransformStrategy.CLASSLOADER;
 import static org.powermock.core.transformers.TransformStrategy.INST_TRANSFORM;
 
-public class ClassMockTransformer extends AbstractMainMockTransformer {
+public class ClassMockTransformer extends AbstractJavaAssistMainMockTransformer {
 
     public ClassMockTransformer() {
         this(CLASSLOADER);
@@ -35,7 +35,7 @@ public ClassMockTransformer(TransformStrategy strategy) {
     }
 
     @Override
-    protected CtClass transformMockClass(CtClass clazz) throws CannotCompileException, NotFoundException {
+    protected CtClass transform(CtClass clazz) throws CannotCompileException, NotFoundException {
         if (clazz.isInterface()) {
             return clazz;
         }

File: powermock-core/src/main/java/org/powermock/core/transformers/impl/InterfaceMockTransformer.java
Patch:
@@ -28,7 +28,7 @@
 /**
  *
  */
-public class InterfaceMockTransformer extends AbstractMainMockTransformer {
+public class InterfaceMockTransformer extends AbstractJavaAssistMainMockTransformer {
 
     public InterfaceMockTransformer() {
         this(CLASSLOADER);
@@ -39,7 +39,7 @@ public InterfaceMockTransformer(TransformStrategy strategy) {
     }
 
     @Override
-    protected CtClass transformMockClass(CtClass clazz) throws CannotCompileException, NotFoundException {
+    protected CtClass transform(CtClass clazz) throws CannotCompileException, NotFoundException {
         if (!clazz.isInterface()) {
             return clazz;
         }

File: powermock-core/src/main/java/org/powermock/core/transformers/impl/TestClassTransformer.java
Patch:
@@ -57,7 +57,7 @@
  * The #3 and #4 enhancements will also be enforced on the constructors
  * of classes that are nested within the test-class.
  */
-public abstract class TestClassTransformer implements MockTransformer {
+public abstract class TestClassTransformer extends AbstractJavaAssistMockTransformer {
 
     private final Class<?> testClass;
     private final Class<? extends Annotation> testMethodAnnotationType;

File: powermock-core/src/main/java/org/powermock/tests/utils/impl/MockClassLoaderFactory.java
Patch:
@@ -20,6 +20,7 @@
 import org.powermock.core.classloader.MockClassLoader;
 import org.powermock.core.classloader.annotations.MockPolicy;
 import org.powermock.core.classloader.annotations.UseClassPathAdjuster;
+import org.powermock.core.classloader.javassist.JavassistMockClassLoader;
 import org.powermock.core.spi.PowerMockPolicy;
 import org.powermock.core.transformers.MockTransformer;
 import org.powermock.core.transformers.impl.ClassMockTransformer;
@@ -64,7 +65,7 @@ protected ClassLoader createMockClassLoader(final String[] classesToLoadByMockCl
         ClassLoader mockLoader = AccessController.doPrivileged(new PrivilegedAction<MockClassLoader>() {
             @Override
             public MockClassLoader run() {
-                return new MockClassLoader(classesToLoadByMockClassloader, packagesToIgnore, useClassPathAdjuster);
+                return new JavassistMockClassLoader(classesToLoadByMockClassloader, packagesToIgnore, useClassPathAdjuster);
             }
         });
 

File: powermock-core/src/main/java/org/powermock/utils/ArrayUtil.java
Patch:
@@ -42,7 +42,7 @@ private static <T> boolean isEmpty(T[] a) {
         return a == null || a.length == 0;
     }
 
-    private static <T> T[] clone(T[] array) {
+    public static <T> T[] clone(T[] array) {
         if (array == null) {
             return null;
         }

File: powermock-api/powermock-api-mockito2/src/main/java/org/powermock/api/mockito/internal/expectation/DelegatingToConstructorsOngoingStubbing.java
Patch:
@@ -143,7 +143,7 @@ public OngoingStubbing<T> invoke() {
                 Object[] paramArgs = new Object[parameterTypesForCtor.length];
                 for (int i = 0; i < parameterTypesForCtor.length; i++) {
                     Class<?> paramType = parameterTypesForCtor[i];
-                    paramArgs[i] = ArgumentMatchers.any(paramType);
+                    paramArgs[i] = ArgumentMatchers.nullable(paramType);
                 }
                 try {
                     final OngoingStubbing<T> when = when(mock.performSubstitutionLogic(paramArgs));

File: powermock-modules/powermock-module-javaagent/src/main/java/org/powermock/modules/agent/DefinalizingClassTransformer.java
Patch:
@@ -16,8 +16,8 @@
 
 package org.powermock.modules.agent;
 
-import org.powermock.objectweb.asm.ClassReader;
-import org.powermock.objectweb.asm.ClassWriter;
+import net.bytebuddy.jar.asm.ClassReader;
+import net.bytebuddy.jar.asm.ClassWriter;
 
 import java.lang.instrument.ClassFileTransformer;
 import java.lang.instrument.IllegalClassFormatException;

File: powermock-api/powermock-api-mockito2/src/test/java/org/powermock/api/mockito/mockmaker/PowerMockMakerTestCase.java
Patch:
@@ -38,7 +38,7 @@
 
 import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.assertj.core.api.Java6Assertions.fail;
-import static org.junit.Assume.assumeTrue;
+import static org.junit.Assume.assumeFalse;
 
 public class PowerMockMakerTestCase {
     
@@ -47,7 +47,7 @@ public void should_delegate_calls_to_mock_maker_from_configuration() {
     
         final String javaVersion = System.getProperty("java.version");
         
-        assumeTrue("Test failed on JDK9. System class loader does not extends URLClassloader any more.", Double.parseDouble(javaVersion) < 9);
+        assumeFalse("Test failed on JDK9. System class loader does not extends URLClassloader any more.", javaVersion.startsWith("9"));
     
         ClassLoader currentCL = Thread.currentThread().getContextClassLoader();
     

File: powermock-api/powermock-api-mockito2/src/main/java/org/powermock/api/mockito/internal/invocation/InvocationControlAssertionError.java
Patch:
@@ -62,7 +62,7 @@ public static void updateErrorMessageForVerifyNoMoreInteractions(AssertionError
         builder.replace(startOfVerifyNoMoreInteractionsInvocation, endOfVerifyNoMoreInteractionsInvocation,
                         verifyNoMoreInteractionsInvocation);
         builder.delete(builder.indexOf("\n", endOfVerifyNoMoreInteractionsInvocation + 1), builder.lastIndexOf("\n"));
-        Whitebox.setInternalState(errorToUpdate, builder.toString());
+        Whitebox.setInternalState(errorToUpdate, "detailMessage", builder.toString());
     }
 
     public static void updateErrorMessageForMethodInvocation(AssertionError errorToUpdate) {
@@ -72,7 +72,7 @@ public static void updateErrorMessageForMethodInvocation(AssertionError errorToU
          * whenNew(MyClass.class).thenReturn(myMock).times(3) when in fact an
          * instance of MyClass has been created less or more times than 3.
          */
-        Whitebox.setInternalState(errorToUpdate, "\n" + changeMessageContent(errorToUpdate.getMessage()));
+        Whitebox.setInternalState(errorToUpdate, "detailMessage", "\n" + changeMessageContent(errorToUpdate.getMessage()));
     }
 
     public static void throwAssertionErrorForNewSubstitutionFailure(AssertionError oldError, Class<?> type) {

File: powermock-api/powermock-api-mockito2/src/main/java/org/powermock/api/mockito/invocation/MockitoMethodInvocationControl.java
Patch:
@@ -121,6 +121,7 @@ public void verifyNoMoreInteractions() {
         try {
             Mockito.verifyNoMoreInteractions(getMockHandlerAdaptor().getMock());
         } catch (MockitoAssertionError e) {
+            //TODO replace this dirty hack
             InvocationControlAssertionError.updateErrorMessageForVerifyNoMoreInteractions(e);
             throw e;
         } catch (Exception e) {

File: powermock-api/powermock-api-mockito2/src/test/java/org/powermock/api/mockito/internal/mockcreation/MockCreatorTestCase.java
Patch:
@@ -9,7 +9,7 @@
 
 import java.util.List;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 
 public class MockCreatorTestCase {
 

File: powermock-core/src/main/java/org/powermock/core/transformers/impl/AbstractMainMockTransformer.java
Patch:
@@ -414,7 +414,7 @@ public void edit(ConstructorCall c) throws CannotCompileException {
                  */
                 addNewDeferConstructor(clazz);
                 final StringBuilder code = new StringBuilder();
-                code.append("{Object value =")
+                code.append("{java.lang.Object value =")
                     .append(MockGateway.class.getName())
                     .append(".constructorCall($class, $args, $sig);");
                 code.append("if (value != ").append(MockGateway.class.getName()).append(".PROCEED){");

File: powermock-core/src/test/java/org/powermock/configuration/ConfigurationFactoryImplTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.powermock.api.mockito.ConfigurationTestUtils;
 import org.powermock.configuration.support.ConfigurationFactoryImpl;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 
 public class ConfigurationFactoryImplTest {
     

File: powermock-core/src/test/java/org/powermock/configuration/ConfigurationReaderTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.Test;
 import org.powermock.configuration.support.ConfigurationReaderBuilder;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 
 public class ConfigurationReaderTest {
     

File: powermock-core/src/test/java/org/powermock/core/classloader/MockClassLoaderTest.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;

File: powermock-core/src/test/java/org/powermock/core/transformers/impl/ClassMockTransformerTest.java
Patch:
@@ -42,7 +42,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;

File: powermock-core/src/test/java/org/powermock/tests/utils/impl/PowerMockIgnorePackagesExtractorImplTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.powermock.configuration.PowerMockConfiguration;
 import org.powermock.core.classloader.annotations.PowerMockIgnore;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 
 @SuppressWarnings("unchecked")
 public class PowerMockIgnorePackagesExtractorImplTest {

File: powermock-reflect/src/test/java/org/powermock/reflect/WhiteBoxGetFieldTest.java
Patch:
@@ -20,7 +20,7 @@
 
 import java.lang.reflect.Field;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 
 /**
  * A test case to demonstrate an issue

File: powermock-reflect/src/test/java/org/powermock/reflect/WhiteBoxTest.java
Patch:
@@ -65,7 +65,7 @@
 import java.sql.Connection;
 import java.util.Set;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;

File: powermock-reflect/src/test/java/org/powermock/reflect/internal/WhiteboxImplTest.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Collection;
 import java.util.List;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.junit.Assume.assumeTrue;
 
 

File: tests/easymock/junit4-legacy/src/test/java/samples/junit4/legacy/noannotation/NoAnnotationUsageTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.powermock.modules.junit4.legacy.PowerMockRunner;
 import samples.staticandinstance.StaticAndInstanceDemo;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.easymock.EasyMock.expect;
 import static org.powermock.api.easymock.PowerMock.*;
 

File: tests/easymock/junit4-legacy/src/test/java/samples/junit4/legacy/singleton/MockStaticTest.java
Patch:
@@ -23,7 +23,7 @@
 import samples.singleton.StaticHelper;
 import samples.singleton.StaticService;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.easymock.EasyMock.expect;
 import static org.easymock.EasyMock.expectLastCall;
 import static org.junit.Assert.assertEquals;

File: tests/easymock/junit4-legacy/src/test/java/samples/junit4/legacy/suppressconstructor/SuppressConstructorHierarchyDemoTest.java
Patch:
@@ -23,7 +23,7 @@
 import samples.suppressconstructor.SuppressConstructorHierarchy;
 import samples.suppressconstructor.SuppressConstructorHierarchyParent;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.junit.Assert.*;
 import static org.powermock.api.support.membermodification.MemberMatcher.constructor;
 import static org.powermock.api.support.membermodification.MemberModifier.suppress;

File: tests/easymock/junit4/src/test/java/samples/junit4/expectnew/ExpectNewCases.java
Patch:
@@ -17,7 +17,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.easymock.EasyMock.aryEq;
 import static org.easymock.EasyMock.expect;
 import static org.easymock.EasyMock.expectLastCall;
@@ -621,8 +621,8 @@ public void testNewWithWrongArgument() throws Exception {
             fail("Should throw AssertionError!");
         } catch (AssertionError e) {
             assertEquals(
-                    "\n  Unexpected constructor call samples.expectnew.ExpectNewServiceUser(EasyMock for interface samples.Service, 4):"
-                            + "\n    samples.expectnew.ExpectNewServiceUser(EasyMock for interface samples.Service, 2): expected: 1, actual: 0",
+                    "\n  Unexpected constructor call samples.expectnew.ExpectNewServiceUser(EasyMock for interface samples.Service, 4 (int)):"
+                            + "\n    samples.expectnew.ExpectNewServiceUser(EasyMock for interface samples.Service, 2 (int)): expected: 1, actual: 0",
                     e.getMessage());
         }
     }

File: tests/easymock/junit4/src/test/java/samples/junit4/prepareeverything/ExpectNewDemoUsingThePrepareEverythingAnnotationTest.java
Patch:
@@ -631,8 +631,8 @@ public void testNewWithWrongArgument() throws Exception {
             fail("Should throw AssertionError!");
         } catch (AssertionError e) {
             assertEquals(
-                    "\n  Unexpected constructor call samples.expectnew.ExpectNewServiceUser(EasyMock for interface samples.Service, 4):"
-                            + "\n    samples.expectnew.ExpectNewServiceUser(EasyMock for interface samples.Service, 2): expected: 1, actual: 0",
+                    "\n  Unexpected constructor call samples.expectnew.ExpectNewServiceUser(EasyMock for interface samples.Service, 4 (int)):"
+                            + "\n    samples.expectnew.ExpectNewServiceUser(EasyMock for interface samples.Service, 2 (int)): expected: 1, actual: 0",
                     e.getMessage());
         }
     }

File: tests/easymock/junit412/src/test/java/samples/junit412/expectnew/ExpectNewOfFinalSystemClassTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package samples.junit410.expectnew;
+package samples.junit412.expectnew;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: tests/java8/mockito-junit4-agent/src/test/java/samples/powermockito/junit4/bugs/github510/ClassUsesInterfaceTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.rule.PowerMockRule;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.powermock.api.mockito.PowerMockito.mockStatic;
 import static org.powermock.api.mockito.PowerMockito.when;
 

File: tests/java8/mockito-junit4-rule-xstream/src/test/java/samples/powermockito/junit4/bugs/github510/ClassUsesInterfaceTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.rule.PowerMockRule;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.powermock.api.mockito.PowerMockito.mockStatic;
 import static org.powermock.api.mockito.PowerMockito.when;
 

File: tests/java8/mockito-junit4/src/test/java/samples/powermockito/junit4/bugs/github510/Github510Test.java
Patch:
@@ -6,7 +6,7 @@
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.powermock.api.mockito.PowerMockito.mock;
 import static org.powermock.api.mockito.PowerMockito.mockStatic;
 import static org.powermock.api.mockito.PowerMockito.when;

File: tests/junit4/src/test/java/samples/powermockito/junit4/bugs/github352/GitHub352Test.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.runner.Runner;
 import org.powermock.modules.junit4.PowerMockRunner;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 
 /**
  *

File: tests/junit4/src/test/java/samples/powermockito/junit4/bugs/github722/GitHub722Test.java
Patch:
@@ -8,7 +8,7 @@
 
 import java.lang.reflect.Method;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 
 public class GitHub722Test {
 

File: tests/mockito/inline/src/test/java/samples/powermockito/inline/bugs/github793/MockitoFinalClassMockingTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.mockito.Mockito;
 import org.powermock.api.mockito.MockitoVersion;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.assertj.core.api.Assertions.catchThrowable;
 import static org.junit.Assume.assumeTrue;
 import static org.mockito.Mockito.doNothing;

File: tests/mockito/junit4-agent/src/test/java/samples/powermockito/junit4/agent/github512/Github512Test.java
Patch:
@@ -7,7 +7,7 @@
 import org.powermock.modules.junit4.rule.PowerMockRule;
 import samples.singleton.StaticService;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.powermock.api.mockito.PowerMockito.method;
 import static org.powermock.api.mockito.PowerMockito.suppress;
 

File: tests/mockito/junit4-rule-objenesis/src/test/java/samples/powermockito/junit4/rule/objenesis/bugs/github512/Github512Test.java
Patch:
@@ -6,7 +6,7 @@
 import org.powermock.modules.junit4.rule.PowerMockRule;
 import samples.singleton.StaticService;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.powermock.api.mockito.PowerMockito.method;
 import static org.powermock.api.mockito.PowerMockito.suppress;
 

File: tests/mockito/junit4-rule-xstream/src/test/java/samples/powermockito/junit4/rule/xstream/github512/Github512Test.java
Patch:
@@ -6,7 +6,7 @@
 import org.powermock.modules.junit4.rule.PowerMockRule;
 import samples.singleton.StaticService;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.powermock.api.mockito.PowerMockito.method;
 import static org.powermock.api.mockito.PowerMockito.suppress;
 

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/bugs/github668/GitHub668Test.java
Patch:
@@ -10,7 +10,7 @@
 
 import java.util.HashSet;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.powermock.api.mockito.PowerMockito.mock;
 import static org.powermock.api.mockito.PowerMockito.when;
 

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/bugs/github701/GitHub701Test.java
Patch:
@@ -6,7 +6,7 @@
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.powermock.api.mockito.PowerMockito.doReturn;
 import static org.powermock.api.mockito.PowerMockito.mock;
 

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/bugs/github704/PrepareForTestSignedTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.powermock.api.mockito.PowerMockito.mock;
 import static org.powermock.api.mockito.PowerMockito.mockStatic;
 import static org.powermock.api.mockito.PowerMockito.when;

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/bugs/github781/GitHub781Test.java
Patch:
@@ -6,7 +6,7 @@
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.mockito.Mockito.spy;
 
 @RunWith(PowerMockRunner.class)

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/bugs/github801/GlobalPowerMockIgnoreTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.runner.RunWith;
 import org.powermock.modules.junit4.PowerMockRunner;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 
 @RunWith(PowerMockRunner.class)
 public class GlobalPowerMockIgnoreTest {

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/finalmocking/MockFinalMethodsCases.java
Patch:
@@ -6,7 +6,7 @@
 
 import java.lang.reflect.Method;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/jacoco/JacocoCoverageTest.java
Patch:
@@ -25,7 +25,7 @@
 import java.net.URISyntaxException;
 import java.net.URL;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 
 public class JacocoCoverageTest {
 

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/jacoco/TargetTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.powermock.api.mockito.PowerMockito.doReturn;
 import static org.powermock.api.mockito.PowerMockito.mock;
 import static org.powermock.api.mockito.PowerMockito.mockStatic;

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/partialmocking/PartialMockingExampleTest.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.CountDownLatch;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/staticmocking/MockStaticCases.java
Patch:
@@ -27,7 +27,7 @@
 import samples.singleton.SimpleStaticService;
 import samples.singleton.StaticService;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/verify/VerifyZeroInteractionsTest.java
Patch:
@@ -28,7 +28,7 @@
 import samples.Service;
 import samples.singleton.StaticExample;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.assertj.core.api.Assertions.catchThrowable;
 import static org.powermock.api.mockito.PowerMockito.mock;

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/whennew/WhenNewCases.java
Patch:
@@ -39,7 +39,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertSame;

File: tests/utils/src/main/java/samples/privatemocking/PrivateMethodDemo.java
Patch:
@@ -97,7 +97,7 @@ private int varArgsMethod(int... ints) {
         return sum;
     }
 
-    private Reader createReader(File folder, FileDataSource fileDataSource) throws FileNotFoundException {
+    private Reader createReader(File folder) throws FileNotFoundException {
         return null;
     }
 }

File: powermock-api/powermock-api-easymock/src/main/java/org/powermock/api/extension/listener/MockMetadata.java
Patch:
@@ -24,6 +24,8 @@
  *
  */
 public interface MockMetadata {
+    String getFieldName();
+    
     String getQualifier();
 
     Class<? extends Annotation> getAnnotation();

File: powermock-api/powermock-api-easymock/src/main/java/org/powermock/api/easymock/powermocklistener/AnnotationEnabler.java
Patch:
@@ -17,10 +17,9 @@
 
 import org.powermock.api.easymock.annotation.MockNice;
 import org.powermock.api.easymock.annotation.MockStrict;
-import org.powermock.core.classloader.annotations.Mock;
 
 /**
- * Before each test method all fields annotated with {@link Mock},
+ * Before each test method all fields annotated with {@link org.powermock.api.easymock.annotation.Mock},
  * {@link MockNice} or {@link MockStrict} will have mock objects created for
  * them and injected to the fields.
  * 

File: powermock-api/powermock-api-easymock/src/main/java/org/powermock/api/extension/listener/AnnotationEnabler.java
Patch:
@@ -16,9 +16,9 @@
 package org.powermock.api.extension.listener;
 
 import org.powermock.api.easymock.EasyMockConfiguration;
+import org.powermock.api.easymock.annotation.Mock;
 import org.powermock.api.easymock.annotation.MockNice;
 import org.powermock.api.easymock.annotation.MockStrict;
-import org.powermock.core.classloader.annotations.Mock;
 import org.powermock.core.spi.listener.AnnotationEnablerListener;
 import org.powermock.core.spi.support.AbstractPowerMockTestListenerBase;
 import org.powermock.reflect.Whitebox;
@@ -53,7 +53,7 @@ public class AnnotationEnabler extends AbstractPowerMockTestListenerBase impleme
 
     @SuppressWarnings("unchecked")
     public Class<? extends Annotation>[] getMockAnnotations() {
-        return new Class[]{org.powermock.api.easymock.annotation.Mock.class, Mock.class, MockNice.class, MockStrict.class};
+        return new Class[]{Mock.class, MockNice.class, MockStrict.class};
     }
 
     @Override

File: powermock-api/powermock-api-easymock/src/main/java/org/powermock/api/extension/listener/EasyMockAnnotationSupport.java
Patch:
@@ -68,7 +68,6 @@ protected void injectNiceMocks() throws Exception {
     @SuppressWarnings("deprecation")
     protected void injectDefaultMocks() throws Exception {
         inject(testInstance, Mock.class, annotationMockCreatorFactory.createDefaultMockCreator());
-        inject(testInstance, org.powermock.core.classloader.annotations.Mock.class, annotationMockCreatorFactory.createDefaultMockCreator());
     }
 
     @SuppressWarnings("unchecked")

File: powermock-api/powermock-api-easymock/src/main/java/org/powermock/api/extension/listener/TestSubjectInjector.java
Patch:
@@ -27,7 +27,7 @@
 
 /**
  * The class injects mocks created with {@link Mock}, {@link org.powermock.api.easymock.annotation.Mock}
- * and {@link org.powermock.core.classloader.annotations.Mock} to fields of objects which is annotated with {@link TestSubject}
+ * to fields of objects which is annotated with {@link TestSubject}
  * @see TestSubject
  * @since 1.6.5
  */

File: powermock-api/powermock-api-mockito2/src/main/java/org/powermock/api/mockito/powermocklistener/AnnotationEnabler.java
Patch:
@@ -17,8 +17,7 @@
 package org.powermock.api.mockito.powermocklistener;
 
 /**
- * Before each test method all fields annotated with {@link org.mockito.MockitoAnnotations.Mock},
- * {@link org.mockito.Mock} or {@link org.powermock.core.classloader.annotations.Mock} have mock objects created for them
+ * Before each test method all fields annotated with {@link org.mockito.Mock} have mock objects created for them
  * and injected to the fields.
  * 
  * @deprecated Test Runners uses an annotation enabling listener per default

File: powermock-api/powermock-api-mockito2/src/main/java/org/powermock/api/mockito/internal/expectation/DelegatingToConstructorsOngoingStubbing.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.powermock.api.mockito.internal.expectation;
 
-import org.mockito.Matchers;
+import org.mockito.ArgumentMatchers;
 import org.mockito.stubbing.Answer;
 import org.mockito.stubbing.OngoingStubbing;
 import org.powermock.core.spi.support.InvocationSubstitute;
@@ -143,7 +143,7 @@ public OngoingStubbing<T> invoke() {
                 Object[] paramArgs = new Object[parameterTypesForCtor.length];
                 for (int i = 0; i < parameterTypesForCtor.length; i++) {
                     Class<?> paramType = parameterTypesForCtor[i];
-                    paramArgs[i] = Matchers.any(paramType);
+                    paramArgs[i] = ArgumentMatchers.any(paramType);
                 }
                 try {
                     final OngoingStubbing<T> when = when(mock.performSubstitutionLogic(paramArgs));

File: powermock-api/powermock-api-mockito2/src/main/java/org/powermock/api/mockito/mockmaker/PowerMockMaker.java
Patch:
@@ -37,7 +37,7 @@ public PowerMockMaker() {
     }
     
     @Override
-    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
+    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler){
         return mockMaker.createMock(settings, handler);
     }
     

File: powermock-api/powermock-api-mockito2/src/test/java/org/powermock/api/mockito/internal/expectation/DefaultMethodExpectationSetupTestCase.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * @author Stanislav Chizhov
  */
-public class DefaultMethodExpectationSetupTest {
+public class DefaultMethodExpectationSetupTestCase {
 
     private final CUT object = new CUT();
 

File: powermock-api/powermock-api-mockito2/src/test/java/org/powermock/api/mockito/internal/mockcreation/MockCreatorTestCase.java
Patch:
@@ -11,7 +11,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class MockCreatorTest {
+public class MockCreatorTestCase {
 
 	@Test
 	public void should_return_mock_name_when_settings_have_name() throws NoSuchMethodException, SecurityException {

File: tests/utils/src/main/java/org/powermock/api/mockito/ConfigurationTestUtils.java
Patch:
@@ -32,7 +32,6 @@ public final class ConfigurationTestUtils {
     private File config;
     
     public void copyTemplateToPropertiesFile() throws URISyntaxException, IOException {
-        
         ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
         URL resource = classLoader.getResource("org/powermock/extensions/configuration.template");
         
@@ -46,8 +45,6 @@ public void copyTemplateToPropertiesFile() throws URISyntaxException, IOExceptio
             throw new AssertionError("Test data not created: cannot create " + CONFIG_FILE);
         }
         
-        System.out.printf("Copying template %s to %s", file, config);
-        
         copyFileUsingStream(file, config);
     }
     

File: powermock-api/powermock-api-easymock/src/main/java/org/powermock/api/easymock/PowerMock.java
Patch:
@@ -24,7 +24,7 @@
 import org.easymock.internal.MocksControl;
 import org.powermock.api.easymock.internal.invocationcontrol.EasyMockMethodInvocationControl;
 import org.powermock.api.easymock.internal.invocationcontrol.NewInvocationControlAssertionError;
-import org.powermock.api.easymock.internal.invocationcontrol.NewInvocationControlImpl;
+import org.powermock.api.easymock.internal.invocationcontrol.EasyMockNewInvocationControl;
 import org.powermock.api.easymock.internal.mockstrategy.MockStrategy;
 import org.powermock.api.easymock.internal.mockstrategy.impl.DefaultMockStrategy;
 import org.powermock.api.easymock.internal.mockstrategy.impl.NiceMockStrategy;
@@ -1645,7 +1645,7 @@ private static <T> IExpectationSetters<T> doExpectNew(Class<T> type, MockStrateg
         if (newInvocationControl == null) {
             InvocationSubstitute<T> mock = doMock(InvocationSubstitute.class, false, mockStrategy, null,
                     (Method[]) null);
-            newInvocationControl = new NewInvocationControlImpl<T>(mock, type);
+            newInvocationControl = new EasyMockNewInvocationControl<T>(mock, type);
             MockRepository.putNewInstanceControl(type, newInvocationControl);
             MockRepository.addObjectsToAutomaticallyReplayAndVerify(WhiteboxImpl.getOriginalUnmockedType(type));
         }
@@ -2082,7 +2082,7 @@ private static synchronized void verifyClass(Class<?>... types) {
             if (invocationHandler != null) {
                 invocationHandler.verify();
             }
-            NewInvocationControlImpl<?> newInvocationControl = (NewInvocationControlImpl<?>) MockRepository.getNewInstanceControl(type);
+            EasyMockNewInvocationControl<?> newInvocationControl = (EasyMockNewInvocationControl<?>) MockRepository.getNewInstanceControl(type);
             if (newInvocationControl != null) {
                 try {
                     newInvocationControl.verify();

File: powermock-api/powermock-api-easymock/src/main/java/org/powermock/api/easymock/internal/invocationcontrol/EasyMockNewInvocationControl.java
Patch:
@@ -25,14 +25,13 @@
 
 import java.lang.reflect.Constructor;
 
-//TODO rename to EasyMock
-public class NewInvocationControlImpl<T> implements NewInvocationControl<IExpectationSetters<T>> {
+public class EasyMockNewInvocationControl<T> implements NewInvocationControl<IExpectationSetters<T>> {
     private final InvocationSubstitute<T> substitute;
     private final Class<T> subsitutionType;
     private boolean hasReplayed;
     private boolean hasVerified;
 
-    public NewInvocationControlImpl(InvocationSubstitute<T> substitute, Class<T> type) {
+    public EasyMockNewInvocationControl(InvocationSubstitute<T> substitute, Class<T> type) {
         if (substitute == null) {
             throw new IllegalArgumentException("Internal error: substitute cannot be null.");
         }

File: powermock-api/powermock-api-mockito2/src/main/java/org/powermock/api/mockito/PowerMockito.java
Patch:
@@ -526,7 +526,6 @@ public static void verifyNoMoreInteractions(Object... mocks) {
      *
      * @param mocks to be verified
      */
-    //TODO cover by test
     public static void verifyZeroInteractions(Object... mocks) {
         VerifyNoMoreInteractions.verifyNoMoreInteractions(mocks);
     }
@@ -617,7 +616,6 @@ public static PowerMockitoStubber doThrow(Throwable toBeThrown) {
      *
      * @return stubber - to select a method for stubbing
      */
-    //TODO cover by test
     public static PowerMockitoStubber doCallRealMethod() {
         return POWERMOCKITO_CORE.doCallRealMethod();
     }

File: powermock-api/powermock-api-mockito2/src/main/java/org/powermock/api/mockito/verification/PrivateMethodVerification.java
Patch:
@@ -26,8 +26,9 @@ public interface PrivateMethodVerification {
      * possible).
      *
      * @throws Exception If something unexpected goes wrong.
+     * @deprecated Use {@link #invoke(String, Object...)} instead. Will be remove in PowerMock 3.0
      */
-    //TODO add test
+    @Deprecated
     void invoke(Object... arguments) throws Exception;
 
     /**
@@ -42,7 +43,6 @@ public interface PrivateMethodVerification {
      * to verify.
      *
      * @throws Exception If something unexpected goes wrong.
-     * @see #invoke(Object...)
      */
     void invoke(String methodToVerify, Object... arguments) throws Exception;
 }

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/verify/VerifyNoMoreInteractionsTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package samples.powermockito.junit4.verifynomoreinteractions;
+package samples.powermockito.junit4.verify;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: powermock-api/powermock-api-mockito2/src/main/java/org/powermock/api/mockito/expectation/reporter/MockitoPowerMockReporter.java
Patch:
@@ -26,8 +26,7 @@ public class MockitoPowerMockReporter implements PowerMockReporter {
 
     @Override
     public <T> void classNotPrepared(Class<T> type) {
-        throw new ClassNotPreparedException(join(String.format("The class %s not prepared for test.", type
-                                                                                                              .getName()),
+        throw new ClassNotPreparedException(join(String.format("The class %s not prepared for test.", type.getName()),
                 "To prepare this class, add class to the '@PrepareForTest' annotation.",
                 "In case if you don't use this annotation, add the annotation on class or  method level. "));
     }

File: powermock-api/powermock-api-mockito2/src/main/java/org/powermock/api/mockito/internal/PowerMockitoCore.java
Patch:
@@ -111,7 +111,9 @@ public <T> DefaultConstructorArgumentsVerification<T> verifyNew(final Class<T> m
     }
     
     public <T> T spy(final T object) {
-        MockSettings mockSettings = Mockito.withSettings().defaultAnswer(POWER_MOCK_CALL_REAL_METHOD);
+        MockSettings mockSettings = Mockito.withSettings()
+                                           .spiedInstance(object)
+                                           .defaultAnswer(POWER_MOCK_CALL_REAL_METHOD);
         //noinspection unchecked
         return DefaultMockCreator.mock((Class<T>) Whitebox.getType(object), false, true, object, mockSettings, (Method[]) null);
     }

File: powermock-core/src/main/java/org/powermock/configuration/support/ConfigurationFactoryImpl.java
Patch:
@@ -50,7 +50,6 @@ private <T extends Configuration> T  readDefault(final Class<T> configurationTyp
     private <T extends Configuration> T  readUserConfiguration(final Class<T> configurationType) {
         return newBuilder()
                    .forConfigurationFile(USER_CONFIGURATION)
-                   .withValueAlias("mock-maker-inline", "org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker")
                    .build()
                    .read(configurationType);
     }

File: powermock-api/powermock-api-mockito2/src/main/java/org/powermock/api/mockito/internal/verification/VerifyNoMoreInteractions.java
Patch:
@@ -17,8 +17,8 @@
 package org.powermock.api.mockito.internal.verification;
 
 import org.mockito.Mockito;
-import org.powermock.api.mockito.invocation.MockitoMethodInvocationControl;
 import org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl;
+import org.powermock.api.mockito.invocation.MockitoMethodInvocationControl;
 import org.powermock.core.MockRepository;
 
 /**

File: powermock-api/powermock-api-mockito2/src/main/java/org/powermock/api/mockito/invocation/InvocationFactory.java
Patch:
@@ -36,7 +36,9 @@ class InvocationFactory {
     Invocation createInvocation(final Object mock, final Method method, final MockCreationSettings settings,
                                 final Object... arguments) {
         final Callable realMethod = createRealMethod(mock, method, arguments);
-        return Mockito.framework().createInvocation(mock, settings, method, realMethod, arguments);
+        return Mockito.framework()
+                      .getInvocationFactory()
+                      .createInvocation(mock, settings, method, realMethod, arguments);
     }
     
     private Callable createRealMethod(final Object delegator, final Method method,

File: powermock-api/powermock-api-mockito2/src/main/java/org/powermock/api/mockito/verification/WithVerifiedArguments.java
Patch:
@@ -18,7 +18,5 @@
 
 
 public interface WithVerifiedArguments {
-
-    public abstract void withArguments(Object firstArgument, Object... additionalArguments) throws Exception;
-
+    void withArguments(Object firstArgument, Object... additionalArguments) throws Exception;
 }
\ No newline at end of file

File: powermock-api/powermock-api-mockito2/src/main/java/org/powermock/api/mockito/verification/WithoutVerifiedArguments.java
Patch:
@@ -17,7 +17,5 @@
 package org.powermock.api.mockito.verification;
 
 public interface WithoutVerifiedArguments {
-
-	public void withNoArguments() throws Exception;
-
+    void withNoArguments() throws Exception;
 }
\ No newline at end of file

File: powermock-api/powermock-api-mockito2/src/main/java/org/powermock/api/mockito/mockmaker/PowerMockMaker.java
Patch:
@@ -33,7 +33,6 @@
  * The reason for its existence is that the current Mockito MockMaker throws exception when getting the name
  * from of a mock that is created by PowerMock but not know for Mockito. This is triggered when by the
  * {@link org.mockito.internal.util.MockUtil} class.
- * For more details see the {@link org.powermock.api.mockito.internal.invocation.ToStringGenerator}.
  */
 public class PowerMockMaker implements MockMaker {
     private final MockMaker mockMaker;

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/largemethod/LargeMethodTest.java
Patch:
@@ -44,6 +44,7 @@ public void largeMethodShouldBeAbleToBeMocked() {
         when(MethodExceedingJvmLimit.init()).thenReturn("ok");
         assertEquals("Mocked method should return: ok", "ok", MethodExceedingJvmLimit.init());
         verifyStatic(MethodExceedingJvmLimit.class);
+        MethodExceedingJvmLimit.init();
     }
 
     @Test(expected = IllegalStateException.class)
@@ -52,5 +53,6 @@ public void largeMethodShouldBeAbleToBeMockedAndThrowException() {
         when(MethodExceedingJvmLimit.init()).thenThrow(new IllegalStateException());
         MethodExceedingJvmLimit.init();
         verifyStatic(MethodExceedingJvmLimit.class);
+        MethodExceedingJvmLimit.init();
     }
 }

File: powermock-api/powermock-api-easymock/src/main/java/org/powermock/api/easymock/PowerMock.java
Patch:
@@ -1471,7 +1471,7 @@ public static synchronized void verify(Object... objects) {
             if (mock instanceof Class<?>) {
                 verifyClass((Class<?>) mock);
             } else {
-                MethodInvocationControl invocationControl = MockRepository.getInstanceMethodInvocationControl(mock);
+                EasyMockMethodInvocationControl invocationControl = (EasyMockMethodInvocationControl) MockRepository.getInstanceMethodInvocationControl(mock);
                 if (invocationControl != null) {
                     invocationControl.verify();
                 } else {
@@ -2078,11 +2078,11 @@ private static synchronized void replay(Class<?>... types) {
      */
     private static synchronized void verifyClass(Class<?>... types) {
         for (Class<?> type : types) {
-            final MethodInvocationControl invocationHandler = MockRepository.getStaticMethodInvocationControl(type);
+            final EasyMockMethodInvocationControl invocationHandler = (EasyMockMethodInvocationControl) MockRepository.getStaticMethodInvocationControl(type);
             if (invocationHandler != null) {
                 invocationHandler.verify();
             }
-            NewInvocationControl<?> newInvocationControl = MockRepository.getNewInstanceControl(type);
+            NewInvocationControlImpl<?> newInvocationControl = (NewInvocationControlImpl<?>) MockRepository.getNewInstanceControl(type);
             if (newInvocationControl != null) {
                 try {
                     newInvocationControl.verify();

File: powermock-api/powermock-api-easymock/src/main/java/org/powermock/api/easymock/internal/invocationcontrol/EasyMockMethodInvocationControl.java
Patch:
@@ -120,7 +120,6 @@ public synchronized Object replay(Object... mocks) {
         return null;
     }
 
-    @Override
     public synchronized Object verify(Object... mocks) {
         // Silently ignore verify if someone has verified the mock before.
         if (!hasVerified) {

File: powermock-api/powermock-api-easymock/src/main/java/org/powermock/api/easymock/internal/invocationcontrol/NewInvocationControlImpl.java
Patch:
@@ -25,6 +25,7 @@
 
 import java.lang.reflect.Constructor;
 
+//TODO rename to EasyMock
 public class NewInvocationControlImpl<T> implements NewInvocationControl<IExpectationSetters<T>> {
     private final InvocationSubstitute<T> substitute;
     private final Class<T> subsitutionType;
@@ -85,7 +86,6 @@ public synchronized Object replay(Object... mocks) {
         return null;
     }
 
-    @Override
     public synchronized Object verify(Object... mocks) {
         if (!hasVerified) {
             EasyMock.verify(substitute);

File: powermock-api/powermock-api-mockito2/src/main/java/org/powermock/api/mockito/internal/verification/DefaultConstructorArgumentsVerification.java
Patch:
@@ -22,13 +22,13 @@
 import org.powermock.api.mockito.verification.ConstructorArgumentsVerification;
 import org.powermock.core.spi.NewInvocationControl;
 
-public class DefaultConstructorArgumentsVerfication<T> implements ConstructorArgumentsVerification {
+public class DefaultConstructorArgumentsVerification<T> implements ConstructorArgumentsVerification {
 
     private final MockitoNewInvocationControl<T> invocationControl;
     private final Class<?> type;
 
     @SuppressWarnings("unchecked")
-    public DefaultConstructorArgumentsVerfication(NewInvocationControl<T> invocationControl, Class<?> type) {
+    public DefaultConstructorArgumentsVerification(NewInvocationControl<T> invocationControl, Class<?> type) {
         this.type = type;
         this.invocationControl = (MockitoNewInvocationControl<T>) invocationControl;
     }

File: powermock-api/powermock-api-mockito2/src/main/java/org/powermock/api/mockito/invocation/MockitoMethodInvocationControl.java
Patch:
@@ -132,7 +132,6 @@ public Object reset(Object... mocks) {
         throw new IllegalStateException("Internal error: No such thing as reset exists in Mockito.");
     }
     
-    @Override
     public Object verify(Object... mocks) {
         if (mocks == null || mocks.length != 1) {
             throw new IllegalArgumentException("Must supply one mock to the verify method.");

File: tests/java8/mockito-junit4/src/test/java/org/powermock/modules/junit4/largemethod/LargeMethodInInterfaceTest.java
Patch:
@@ -44,6 +44,7 @@ public void largeMethodShouldBeAbleToBeMocked() {
         when(InterfaceMethodExceedingJvmLimit.init()).thenReturn("ok");
         assertEquals("Mocked method should return: ok", "ok", InterfaceMethodExceedingJvmLimit.init());
         verifyStatic(InterfaceMethodExceedingJvmLimit.class);
+        InterfaceMethodExceedingJvmLimit.init();
     }
 
     @Test(expected = IllegalStateException.class)
@@ -52,5 +53,6 @@ public void largeMethodShouldBeAbleToBeMockedAndThrowException() {
         when(InterfaceMethodExceedingJvmLimit.init()).thenThrow(new IllegalStateException());
         InterfaceMethodExceedingJvmLimit.init();
         verifyStatic(InterfaceMethodExceedingJvmLimit.class);
+        InterfaceMethodExceedingJvmLimit.init();
     }
 }

File: tests/mockito/junit4-agent/src/test/java/samples/powermockito/junit4/agent/LargeMethodTest.java
Patch:
@@ -46,6 +46,7 @@ public void largeMethodShouldBeAbleToBeMocked() {
         when(MethodExceedingJvmLimit.init()).thenReturn("ok");
         assertEquals("Mocked method should return: ok", "ok", MethodExceedingJvmLimit.init());
         verifyStatic(MethodExceedingJvmLimit.class);
+        MethodExceedingJvmLimit.init();
     }
 
     @Test(expected = IllegalStateException.class)
@@ -54,5 +55,6 @@ public void largeMethodShouldBeAbleToBeMockedAndThrowException() {
         when(MethodExceedingJvmLimit.init()).thenThrow(new IllegalStateException());
         MethodExceedingJvmLimit.init();
         verifyStatic(MethodExceedingJvmLimit.class);
+        MethodExceedingJvmLimit.init();
     }
 }

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/staticmocking/MockStaticCases.java
Patch:
@@ -79,6 +79,7 @@ public void should_not_verify_behaviour_of_another_mock_class_not_specified_in_v
         verifyStatic(StaticService.class);
         
         SimpleStaticService.say("Something");
+        StaticService.sayHello();
     }
     
     @Test

File: tests/java8/mockito-junit4/src/test/java/org/powermock/modules/junit4/largemethod/LargeMethodInInterfaceTest.java
Patch:
@@ -43,14 +43,14 @@ public void largeMethodShouldBeAbleToBeMocked() {
         mockStatic(InterfaceMethodExceedingJvmLimit.class);
         when(InterfaceMethodExceedingJvmLimit.init()).thenReturn("ok");
         assertEquals("Mocked method should return: ok", "ok", InterfaceMethodExceedingJvmLimit.init());
-        verifyStatic();
+        verifyStatic(InterfaceMethodExceedingJvmLimit.class);
     }
 
     @Test(expected = IllegalStateException.class)
     public void largeMethodShouldBeAbleToBeMockedAndThrowException() {
         mockStatic(InterfaceMethodExceedingJvmLimit.class);
         when(InterfaceMethodExceedingJvmLimit.init()).thenThrow(new IllegalStateException());
         InterfaceMethodExceedingJvmLimit.init();
-        verifyStatic();
+        verifyStatic(InterfaceMethodExceedingJvmLimit.class);
     }
 }

File: tests/mockito/junit4-agent/src/test/java/samples/powermockito/junit4/agent/LargeMethodTest.java
Patch:
@@ -45,14 +45,14 @@ public void largeMethodShouldBeAbleToBeMocked() {
         mockStatic(MethodExceedingJvmLimit.class);
         when(MethodExceedingJvmLimit.init()).thenReturn("ok");
         assertEquals("Mocked method should return: ok", "ok", MethodExceedingJvmLimit.init());
-        verifyStatic();
+        verifyStatic(MethodExceedingJvmLimit.class);
     }
 
     @Test(expected = IllegalStateException.class)
     public void largeMethodShouldBeAbleToBeMockedAndThrowException() {
         mockStatic(MethodExceedingJvmLimit.class);
         when(MethodExceedingJvmLimit.init()).thenThrow(new IllegalStateException());
         MethodExceedingJvmLimit.init();
-        verifyStatic();
+        verifyStatic(MethodExceedingJvmLimit.class);
     }
 }

File: tests/mockito/junit4-agent/src/test/java/samples/powermockito/junit4/agent/SystemClassUserTest.java
Patch:
@@ -104,7 +104,7 @@ public void assertThatMockingOfCollectionsWork() throws Exception {
 
         new SystemClassUser().shuffleCollection(list);
 
-        verifyStatic(times(2));
+        verifyStatic(Collections.class, times(2));
         Collections.shuffle(list);
     }
 

File: tests/mockito/junit4-delegate/src/test/java/powermock/modules/test/mockito/junit4/delegate/EnclosedTest.java
Patch:
@@ -60,7 +60,7 @@ public void stubbedStaticReturnValue() {
             assertThat("Stubbed return-value of #getStaticMessag()",
                     StaticAndInstanceDemo.getStaticMessage(),
                     equalTo(stubbedReturnValue));
-            verifyStatic();
+            verifyStatic(StaticAndInstanceDemo.class);
             StaticAndInstanceDemo.getStaticMessage();
             verifyNoMoreInteractions(StaticAndInstanceDemo.class);
         }

File: tests/mockito/junit4-delegate/src/test/java/powermock/modules/test/mockito/junit4/delegate/SystemClassUserCases.java
Patch:
@@ -98,7 +98,7 @@ public void assertThatMockingOfCollectionsWork() throws Exception {
 
         new SystemClassUser().shuffleCollection(list);
 
-        verifyStatic(times(2));
+        verifyStatic(Collections.class, times(2));
         Collections.shuffle(list);
     }
 

File: tests/mockito/junit4-rule-xstream/src/test/java/samples/powermockito/junit4/rule/xstream/SystemClassUserTest.java
Patch:
@@ -105,7 +105,7 @@ public void assertThatMockingOfCollectionsWork() throws Exception {
 
         new SystemClassUser().shuffleCollection(list);
 
-        verifyStatic(times(2));
+        verifyStatic(Collections.class, times(2));
         Collections.shuffle(list);
     }
 

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/annotationbased/CaptorAnnotationTest.java
Patch:
@@ -26,7 +26,7 @@
 import samples.privateandfinal.PrivateFinalOverload;
 
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.verify;
 import static org.powermock.api.mockito.PowerMockito.*;
 

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/argumentmatcher/ArgumentMatcherTest.java
Patch:
@@ -24,8 +24,8 @@
 import java.util.List;
 
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.anyList;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.anyList;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.powermock.api.mockito.PowerMockito.doReturn;
 import static org.powermock.api.mockito.PowerMockito.mock;
 

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/finalmocking/MockFinalMethodsCases.java
Patch:
@@ -7,7 +7,7 @@
 import java.lang.reflect.Method;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Matchers.isA;
+import static org.mockito.ArgumentMatchers.isA;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.powermock.api.mockito.PowerMockito.doThrow;

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/largemethod/LargeMethodTest.java
Patch:
@@ -43,14 +43,14 @@ public void largeMethodShouldBeAbleToBeMocked() {
         mockStatic(MethodExceedingJvmLimit.class);
         when(MethodExceedingJvmLimit.init()).thenReturn("ok");
         assertEquals("Mocked method should return: ok", "ok", MethodExceedingJvmLimit.init());
-        verifyStatic();
+        verifyStatic(MethodExceedingJvmLimit.class);
     }
 
     @Test(expected = IllegalStateException.class)
     public void largeMethodShouldBeAbleToBeMockedAndThrowException() {
         mockStatic(MethodExceedingJvmLimit.class);
         when(MethodExceedingJvmLimit.init()).thenThrow(new IllegalStateException());
         MethodExceedingJvmLimit.init();
-        verifyStatic();
+        verifyStatic(MethodExceedingJvmLimit.class);
     }
 }

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/privatemocking/PrivateInstanceMockingTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertSame;
-import static org.mockito.Matchers.isA;
+import static org.mockito.ArgumentMatchers.isA;
 import static org.powermock.api.mockito.PowerMockito.doReturn;
 import static org.powermock.api.mockito.PowerMockito.mock;
 import static org.powermock.api.mockito.PowerMockito.spy;

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/simplemix/SimpleMixTest.java
Patch:
@@ -60,7 +60,7 @@ public void staticPartialFinalMocking() throws Exception {
 
         assertEquals(4, tested.calculate());
 
-        verifyStatic();
+        verifyStatic(SimpleMixUtilities.class);
         SimpleMixUtilities.getRandomInteger();
         verifyNew(SimpleMixConstruction.class).withNoArguments();
         verifyPrivate(tested).invoke(method(SimpleMix.class, "getValue"));

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/staticandinstance/StaticAndInstanceDemoTest.java
Patch:
@@ -42,7 +42,7 @@ public void partialMockingOfStaticAndInstanceMethod() throws Exception {
     
         assertEquals(privateExpected + staticExpected, actual);
         
-        verifyStatic();
+        verifyStatic(StaticAndInstanceDemo.class);
         StaticAndInstanceDemo.getStaticMessage();
     
         verifyPrivate(tested).invoke("getPrivateMessage");

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/verifynomoreinteractions/VerifyNoMoreInteractionsTest.java
Patch:
@@ -43,7 +43,7 @@ public void verifyNoMoreInteractionsForStaticMethodsReturnsSilentlyWhenNoMoreInt
 		mockStatic(StaticService.class);
 		assertNull(StaticService.say("hello"));
 
-		verifyStatic();
+		verifyStatic(StaticService.class);
 		StaticService.say("hello");
 		verifyNoMoreInteractions(StaticService.class);
 	}

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/whennew/WhenNewCases.java
Patch:
@@ -45,7 +45,7 @@
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.atLeastOnce;
 import static org.mockito.Mockito.doNothing;
 import static org.mockito.Mockito.times;

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/system/ServiceLoaderTest.java
Patch:
@@ -34,7 +34,9 @@ public class ServiceLoaderTest {
     public void supportsMockingServiceLoader() throws Exception {
         final ServiceLoader mock = mock(ServiceLoader.class);
 
-        doThrow(new IllegalArgumentException("something")).when(mock).reload();
+        doThrow(new IllegalArgumentException("something"))
+            .when(mock)
+            .reload();
 
         mock.reload();
     }

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/system/SystemClassUserTest.java
Patch:
@@ -163,6 +163,7 @@ public void mockingUUIDWorks() throws Exception {
         final UUID mock = mock(UUID.class);
         mockStatic(UUID.class);
         given(UUID.randomUUID()).willReturn(mock);
+        given(mock.toString()).willCallRealMethod();
 
 		// when
 		String actual = new SystemClassUser().generatePerishableToken();

File: powermock-api/powermock-api-easymock/src/main/java/org/powermock/api/easymock/PowerMock.java
Patch:
@@ -1990,8 +1990,8 @@ public void run() {
     }
 
     private static <T> Class<?> createReplicaType(Class<T> type, boolean isStatic, ConstructorArgs constructorArgs) {
-        ClassReplicaCreator classReplicaCreator = new ClassReplicaCreator();
-        Class<?> replicaType = null;
+        final ClassReplicaCreator classReplicaCreator = new ClassReplicaCreator();
+        final Class<?> replicaType;
         if (isStatic || constructorArgs == null) {
             replicaType = classReplicaCreator.createClassReplica(type);
         } else {

File: powermock-api/powermock-api-mockito2/src/main/java/org/powermock/api/mockito/PowerMockito.java
Patch:
@@ -28,11 +28,11 @@
 import org.mockito.stubbing.OngoingStubbing;
 import org.mockito.verification.VerificationMode;
 import org.powermock.api.mockito.expectation.ConstructorExpectationSetup;
+import org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup;
 import org.powermock.api.mockito.expectation.PowerMockitoStubber;
 import org.powermock.api.mockito.expectation.WithOrWithoutExpectedArguments;
 import org.powermock.api.mockito.internal.PowerMockitoCore;
-import org.powermock.api.mockito.internal.expectation.ConstructorAwareExpectationSetup;
-import org.powermock.api.mockito.internal.expectation.DefaultConstructorExpectationSetup;
+import org.powermock.api.mockito.expectation.ConstructorAwareExpectationSetup;
 import org.powermock.api.mockito.internal.expectation.DefaultMethodExpectationSetup;
 import org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator;
 import org.powermock.api.mockito.internal.stubbing.answers.ChainReturns;

File: powermock-api/powermock-api-mockito2/src/main/java/org/powermock/api/mockito/internal/verification/VerifyNoMoreInteractions.java
Patch:
@@ -17,7 +17,7 @@
 package org.powermock.api.mockito.internal.verification;
 
 import org.mockito.Mockito;
-import org.powermock.api.mockito.internal.invocation.MockitoMethodInvocationControl;
+import org.powermock.api.mockito.invocation.MockitoMethodInvocationControl;
 import org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl;
 import org.powermock.core.MockRepository;
 

File: powermock-core/src/main/java/org/powermock/core/ClassReplicaCreator.java
Patch:
@@ -43,7 +43,7 @@ public class ClassReplicaCreator {
     // Used to make each new replica class of a specific type unique.
     private static AtomicInteger counter = new AtomicInteger(0);
 
-    public Class<?> createClassReplica(Class<?> clazz) {
+    public <T> Class<T> createClassReplica(Class<T> clazz) {
         if (clazz == null) {
             throw new IllegalArgumentException("clazz cannot be null");
         }

File: powermock-api/powermock-api-mockito2/src/main/java/org/powermock/api/mockito/expectation/reporter/MockitoPowerMockReporter.java
Patch:
@@ -22,9 +22,6 @@
 
 import static org.powermock.utils.StringJoiner.join;
 
-/**
- *
- */
 public class MockitoPowerMockReporter implements PowerMockReporter {
 
     @Override

File: powermock-api/powermock-api-mockito2/src/main/java/org/powermock/api/mockito/internal/expectation/PowerMockitoStubberImpl.java
Patch:
@@ -17,6 +17,7 @@
 package org.powermock.api.mockito.internal.expectation;
 
 import org.mockito.internal.stubbing.StubberImpl;
+import org.mockito.invocation.InvocationContainer;
 import org.mockito.invocation.MockHandler;
 import org.mockito.stubbing.Stubber;
 import org.powermock.api.mockito.expectation.PowerMockitoStubber;
@@ -64,9 +65,10 @@ public <T> T when(T instanceMock) {
     @SuppressWarnings("unchecked")
     private void addAnswersForStubbing(MockitoMethodInvocationControl invocationControl) {
         final MockHandler mockHandler = invocationControl.getMockHandler();
+        InvocationContainer invocationContainer = mockHandler.getInvocationContainer();
         final List list = Whitebox.getInternalState(this, List.class);
         try {
-            Whitebox.invokeMethod(mockHandler, "setAnswersForStubbing", list);
+            Whitebox.invokeMethod(invocationContainer, "setAnswersForStubbing", list);
         } catch (Exception e) {
             throw new RuntimeException(e);
         }

File: powermock-modules/powermock-module-testng-common/src/main/java/org/powermock/modules/testng/PowerMockTestCase.java
Patch:
@@ -135,6 +135,7 @@ private void disableReporter() {
     }
 
     /**
+     * @param context the test context.
      * @return The PowerMock object factory.
      */
     @ObjectFactory

File: powermock-core/src/main/java/org/powermock/configuration/support/ConfigurationFactoryImpl.java
Patch:
@@ -25,7 +25,7 @@
 
 public class ConfigurationFactoryImpl implements ConfigurationFactory {
     
-    private static final String USER_CONFIGURATION = "org/powermock/configuration.properties";
+    private static final String USER_CONFIGURATION = "org/powermock/extensions/configuration.properties";
     private static final String DEFAULT_CONFIGURATION = "org/powermock/default.properties";
     
     @Override public <T extends Configuration<T>> T create(final Class<T> configurationType) {
@@ -41,7 +41,7 @@ private <T extends Configuration> T  readDefault(final Class<T> configurationTyp
                                     .build()
                                     .read(configurationType);
         if (configuration == null){
-            throw new RuntimeException("It should never happen. If you see this exception, it means that something wrong with build." +
+            throw new RuntimeException("Default configuration is null. It should never happen. If you see this exception, it means that something wrong with build." +
                                            " Please report to PowerMock issues tracker.");
         }
         return configuration;

File: powermock-core/src/test/java/org/powermock/configuration/ConfigurationReaderTest.java
Patch:
@@ -26,7 +26,7 @@
 
 public class ConfigurationReaderTest {
     
-    private static final String CONF_PATH = "org/powermock/configuration";
+    private static final String CONF_PATH = "org/powermock/extensions";
     private static final String CONFIGURATION_FILE = CONF_PATH + "/test.properties";
     private ConfigurationReader reader;
     

File: tests/utils/src/main/java/org/powermock/api/mockito/ConfigurationTestUtils.java
Patch:
@@ -34,7 +34,7 @@ public final class ConfigurationTestUtils {
     public void copyTemplateToPropertiesFile() throws URISyntaxException, IOException {
         
         ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
-        URL resource = classLoader.getResource("org/powermock/configuration.template");
+        URL resource = classLoader.getResource("org/powermock/extensions/configuration.template");
         
         File file = new File(resource.toURI());
         

File: powermock-core/src/main/java/org/powermock/configuration/ConfigurationReader.java
Patch:
@@ -19,5 +19,5 @@
 package org.powermock.configuration;
 
 public interface ConfigurationReader {
-    Configuration read();
+    <T extends Configuration> T read(final Class<T> configurationType);
 }

File: powermock-core/src/main/java/org/powermock/tests/utils/impl/PowerMockIgnorePackagesExtractorImpl.java
Patch:
@@ -23,14 +23,15 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.HashSet;
 import java.util.LinkedHashSet;
 import java.util.Set;
 
 public class PowerMockIgnorePackagesExtractorImpl implements IgnorePackagesExtractor {
 
     @Override
     public String[] getPackagesToIgnore(AnnotatedElement element) {
-        Set<String> ignoredPackages = new LinkedHashSet<String>();
+        Set<String> ignoredPackages = new HashSet<String>();
         PowerMockIgnore annotation = element.getAnnotation(PowerMockIgnore.class);
         if (annotation != null) {
             String[] ignores = annotation.value();

File: powermock-api/powermock-api-mockito2/src/test/java/org/powermock/api/mockito/internal/mockcreation/MockCreatorTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.powermock.api.mockito.internal.mockcreation;
 
+import org.junit.Ignore;
 import org.junit.Test;
 import org.mockito.internal.creation.MockSettingsImpl;
 import org.mockito.internal.util.MockUtil;
@@ -13,6 +14,7 @@
 public class MockCreatorTest {
 
 	@Test
+	@Ignore
 	public void testMock_shouldReturnMockNameWhenSettingsHaveName()
 			throws NoSuchMethodException, SecurityException {
 		final MockSettingsImpl<List<?>> settings = new MockSettingsImpl<List<?>>();
@@ -27,6 +29,7 @@ public void testMock_shouldReturnMockNameWhenSettingsHaveName()
 	}
 
 	@Test
+	@Ignore
 	public void testMock_shouldReturnClassNameWhenSettingsHaveNoName()
 			throws NoSuchMethodException, SecurityException {
 		final MockSettingsImpl<List<?>> settings = new MockSettingsImpl<List<?>>();

File: powermock-core/src/test/java/org/powermock/core/classloader/MockClassLoaderTest.java
Patch:
@@ -18,6 +18,7 @@
 import javassist.ByteArrayClassPath;
 import javassist.ClassPool;
 import javassist.CtClass;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.powermock.core.classloader.annotations.UseClassPathAdjuster;
 import org.powermock.core.transformers.MockTransformer;
@@ -191,6 +192,7 @@ public Class<?> loadClass(String name)
     }
 
     @Test(expected = ClassNotFoundException.class)
+    @Ignore
     public void cannotFindDynamicClassInDeferredClassLoader() throws Exception {
 
         MockClassLoader mockClassLoader = new MockClassLoader(new String[0]);

File: tests/mockito/junit4/src/test/java/samples/powermockito/junit4/staticmocking/MockStaticTest.java
Patch:
@@ -106,7 +106,6 @@ public void testMockStaticThatThrowsException() throws Exception {
 	}
 
 	@Test(expected = ArgumentsAreDifferent.class)
-    // TODO Fix error message!!
 	public void testMockStaticVerificationFails() throws Exception {
 		mockStatic(StaticService.class);
 		assertNull(StaticService.say("hello"));

File: tests/mockito/junit4-delegate/src/test/java/powermock/modules/test/mockito/junit4/delegate/parameterized/WhenNewTest.java
Patch:
@@ -16,6 +16,7 @@
 package powermock.modules.test.mockito.junit4.delegate.parameterized;
 
 import org.powermock.core.classloader.annotations.PrepareForTest;
+import samples.classwithinnermembers.ClassWithInnerMembers;
 import samples.expectnew.ExpectNewDemo;
 import samples.newmocking.MyClass;
 
@@ -33,7 +34,8 @@
 import powermock.modules.test.mockito.junit4.delegate.WhenNewCaseMethod;
 import samples.powermockito.junit4.whennew.WhenNewCases;
 
-@PrepareForTest({MyClass.class, ExpectNewDemo.class, DataInputStream.class, WhenNewCases.class})
+@PrepareForTest({MyClass.class, ExpectNewDemo.class, ClassWithInnerMembers.class, DataInputStream.class,
+        WhenNewCases.class})
 @RunWith(PowerMockRunner.class)
 @PowerMockRunnerDelegate(Parameterized.class)
 public class WhenNewTest {

File: powermock-api/powermock-api-mockito2/src/main/java/org/powermock/api/mockito/repackaged/AcrossJVMSerializationFeature.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
 
-import static org.mockito.internal.util.StringJoiner.join;
+import static org.powermock.utils.StringJoiner.join;
 
 /**
  * This is responsible for serializing a mock, it is enabled if the mock is implementing

File: powermock-api/powermock-api-mockito2/src/main/java/org/powermock/api/mockito/repackaged/ClassImposterizer.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Collection;
 import java.util.List;
 
-import static org.mockito.internal.util.StringJoiner.join;
+import static org.powermock.utils.StringJoiner.join;
 
 /**
  * Inspired on jMock (thanks jMock guys!!!)

File: powermock-api/powermock-api-easymock/src/main/java/org/powermock/api/easymock/PowerMock.java
Patch:
@@ -1618,7 +1618,7 @@ private static <T> IExpectationSetters<T> doExpectNew(Class<T> type, MockStrateg
 
         final boolean isNiceMock = mockStrategy instanceof NiceMockStrategy;
 
-        final Class<T> unmockedType = (Class<T>) WhiteboxImpl.getUnmockedType(type);
+        final Class<T> unmockedType = (Class<T>) WhiteboxImpl.getOriginalUnmockedType(type);
         if (!isNiceMock) {
             if (parameterTypes == null) {
                 WhiteboxImpl.findUniqueConstructorOrThrowException(type, arguments);
@@ -1637,7 +1637,7 @@ private static <T> IExpectationSetters<T> doExpectNew(Class<T> type, MockStrateg
                     (Method[]) null);
             newInvocationControl = new NewInvocationControlImpl<T>(mock, type);
             MockRepository.putNewInstanceControl(type, newInvocationControl);
-            MockRepository.addObjectsToAutomaticallyReplayAndVerify(WhiteboxImpl.getUnmockedType(type));
+            MockRepository.addObjectsToAutomaticallyReplayAndVerify(WhiteboxImpl.getOriginalUnmockedType(type));
         }
 
         if (isNiceMock && (arguments == null || arguments.length == 0)) {

File: powermock-reflect/src/main/java/org/powermock/reflect/internal/ConstructorFinder.java
Patch:
@@ -20,7 +20,7 @@ class ConstructorFinder {
 
         this.type = type;
         this.arguments = arguments;
-        this.unmockedType = WhiteboxImpl.getUnmockedType(type);
+        this.unmockedType = WhiteboxImpl.getOriginalUnmockedType(type);
 
         if (isNestedClass() && arguments != null) {
             addArgumentForNestedClass();
@@ -119,7 +119,7 @@ private boolean isPowerMockConstructor(Class<?>[] parameterTypes) {
 
     private void throwExceptionIfConstructorWasNotFound() {
         if (potentialConstructor == null) {
-            String message = "No constructor found in class '" + WhiteboxImpl.getUnmockedType(type).getName() + "' " +
+            String message = "No constructor found in class '" + WhiteboxImpl.getOriginalUnmockedType(type).getName() + "' " +
                                      "with "
                                      + "parameter types: [ " + WhiteboxImpl.getArgumentTypesAsString(arguments) + " ].";
             throw new ConstructorNotFoundException(message);

File: powermock-reflect/src/test/java/org/powermock/reflect/internal/proxy/SomeInterface.java
Patch:
@@ -1,7 +1,4 @@
 package org.powermock.reflect.internal.proxy;
 
-/**
- *
- */
 public interface SomeInterface {
 }

File: core/src/main/java/org/powermock/core/classloader/MockClassLoader.java
Patch:
@@ -19,13 +19,15 @@
 import javassist.ClassClassPath;
 import javassist.ClassPool;
 import javassist.CtClass;
+import javassist.CtMethod;
 import org.powermock.core.ClassReplicaCreator;
 import org.powermock.core.WildcardMatcher;
 import org.powermock.core.classloader.annotations.UseClassPathAdjuster;
 import org.powermock.core.spi.PowerMockPolicy;
 import org.powermock.core.spi.support.InvocationSubstitute;
 import org.powermock.core.transformers.MockTransformer;
 
+import java.lang.reflect.Method;
 import java.security.ProtectionDomain;
 import java.util.Collections;
 import java.util.HashSet;
@@ -260,6 +262,7 @@ private Class<?> loadMockClass(String name) {
         ClassPool.doPruning = false;
         try {
             CtClass type = classPool.get(name);
+
             for (MockTransformer transformer : mockTransformerChain) {
                 type = transformer.transform(type);
             }

File: modules/module-test/easymock/junit4-test/src/test/java/samples/junit4/finalmocking/FinalDemoTest.java
Patch:
@@ -28,7 +28,6 @@
 
 /**
  * Test class to demonstrate non-static final mocking.
- * 
  */
 @RunWith(PowerMockRunner.class)
 @PrepareForTest(FinalDemo.class)

File: modules/module-test/mockito/junit4/src/test/java/samples/powermockito/junit4/bugs/ClassLoaderBugTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package samples.powermockito.junit4;
+package samples.powermockito.junit4.bugs;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: core/src/main/java/org/powermock/core/ClassLocator.java
Patch:
@@ -17,6 +17,6 @@
 
 public class ClassLocator extends SecurityManager {
     public static Class getCallerClass() {
-        return new ClassLocator().getClassContext()[4];
+        return new ClassLocator().getClassContext()[5];
     }
 }
\ No newline at end of file

File: core/src/main/java/org/powermock/core/transformers/MockTransformer.java
Patch:
@@ -35,5 +35,5 @@ public interface MockTransformer {
 	 *            transform into a mock enabled class.
 	 * @return A <code>CtClass</code> representation of the mocked class.
 	 */
-	public CtClass transform(CtClass clazz) throws Exception;
+	CtClass transform(CtClass clazz) throws Exception;
 }

File: api/mockito/src/main/java/org/powermock/api/mockito/internal/stubbing/answers/ChainReturns.java
Patch:
@@ -4,6 +4,7 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
+import java.util.Collections;
 import java.util.LinkedList;
 import java.util.List;
 
@@ -27,9 +28,7 @@ private void addOtherElementToBeReturned(List<Object> elements, Object[] toBeRet
             elements.add(toBeReturnedOthers);
             return;
         }
-        for (Object toBeReturnedOther : toBeReturnedOthers) {
-            elements.add(toBeReturnedOther);
-        }
+        Collections.addAll(elements, toBeReturnedOthers);
     }
 
     @Override

File: api/mockito2/src/main/java/org/powermock/api/mockito/internal/stubbing/answers/ChainReturns.java
Patch:
@@ -21,6 +21,7 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
+import java.util.Collections;
 import java.util.LinkedList;
 import java.util.List;
 
@@ -44,9 +45,7 @@ private void addOtherElementToBeReturned(List<Object> elements, Object[] toBeRet
             elements.add(toBeReturnedOthers);
             return;
         }
-        for (Object toBeReturnedOther : toBeReturnedOthers) {
-            elements.add(toBeReturnedOther);
-        }
+        Collections.addAll(elements, toBeReturnedOthers);
     }
 
     @Override

File: api/mockito2/src/main/java/org/powermock/api/mockito/repackaged/asm/MethodWriter.java
Patch:
@@ -1805,7 +1805,7 @@ private void writeFrameTypes(final int start, final int end) {
                         stackMap.putByte(v);
                 }
             } else {
-                StringBuffer buf = new StringBuffer();
+                StringBuilder buf = new StringBuilder();
                 d >>= 28;
                 while (d-- > 0) {
                     buf.append('[');

File: api/mockito2/src/main/java/org/powermock/api/mockito/repackaged/asm/Type.java
Patch:
@@ -583,7 +583,7 @@ public String getClassName() {
             case DOUBLE:
                 return "double";
             case ARRAY:
-                StringBuffer b = new StringBuffer(getElementType().getClassName());
+                StringBuilder b = new StringBuilder(getElementType().getClassName());
                 for (int i = getDimensions(); i > 0; --i) {
                     b.append("[]");
                 }

File: api/mockito2/src/main/java/org/powermock/api/mockito/repackaged/asm/tree/analysis/Frame.java
Patch:
@@ -654,7 +654,7 @@ public boolean merge(final Frame frame, final boolean[] access) {
      * @return a string representation of this frame.
      */
     public String toString() {
-        StringBuffer b = new StringBuffer();
+        StringBuilder b = new StringBuilder();
         for (int i = 0; i < getLocals(); ++i) {
             b.append(getLocal(i));
         }

File: api/mockito2/src/main/java/org/powermock/api/mockito/repackaged/asm/util/CheckClassAdapter.java
Patch:
@@ -215,7 +215,7 @@ public static void verify(
             for (int j = 0; j < method.instructions.size(); ++j) {
                 method.instructions.get(j).accept(mv);
 
-                StringBuffer s = new StringBuffer();
+                StringBuilder s = new StringBuilder();
                 Frame f = frames[j];
                 if (f == null) {
                     s.append('?');

File: api/mockito2/src/main/java/org/powermock/api/mockito/repackaged/cglib/beans/BeanMap.java
Patch:
@@ -294,7 +294,7 @@ public Collection values() {
      */
     public String toString()
     {
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         sb.append('{');
         for (Iterator it = keySet().iterator(); it.hasNext();) {
             Object key = it.next();

File: api/mockito2/src/main/java/org/powermock/api/mockito/repackaged/cglib/core/ReflectUtils.java
Patch:
@@ -181,7 +181,7 @@ private static Class getClass(String className, ClassLoader loader, String[] pac
         while ((index = className.indexOf("[]", index) + 1) > 0) {
             dimensions++;
         }
-        StringBuffer brackets = new StringBuffer(className.length() - dimensions);
+        StringBuilder brackets = new StringBuilder(className.length() - dimensions);
         for (int i = 0; i < dimensions; i++) {
             brackets.append('[');
         }

File: api/mockito2/src/main/java/org/powermock/api/mockito/repackaged/cglib/reflect/FastClass.java
Patch:
@@ -40,7 +40,7 @@ public static FastClass create(ClassLoader loader, Class type) {
     }
 
     protected static String getSignatureWithoutReturnType(String name, Class[] parameterTypes) {
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         sb.append(name);
         sb.append('(');
         for (int i = 0; i < parameterTypes.length; i++) {

File: api/mockito2/src/main/java/org/powermock/api/mockito/repackaged/cglib/transform/ClassTransformerChain.java
Patch:
@@ -32,7 +32,7 @@ public MethodVisitor visitMethod(int access,
     }
 
     public String toString() {
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         sb.append("ClassTransformerChain{");
         for (int i = 0; i < chain.length; i++) {
             if (i > 0) {

File: classloading/classloading-objenesis/src/test/java/powermock/classloading/ObjenesisDeepClonerTest.java
Patch:
@@ -21,7 +21,6 @@
 import org.powermock.classloading.DeepCloner;
 
 import java.net.URL;
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 
@@ -65,7 +64,7 @@ public void clonesArraysWithNullValues() throws Exception {
 }
 
 class UnmodifiableListExample {
-    private List<NotSerializable> cl = Collections.unmodifiableList(Arrays.asList(new NotSerializable()));
+    private List<NotSerializable> cl = Collections.singletonList(new NotSerializable());
 
     @Override
     public int hashCode() {

File: classloading/classloading-xstream/src/test/java/powermock/classloading/XStreamDeepClonerTest.java
Patch:
@@ -20,7 +20,6 @@
 import org.powermock.classloading.DeepCloner;
 
 import java.net.URL;
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 
@@ -55,7 +54,7 @@ public void clonesArraysWithNullValues() throws Exception {
 }
 
 class UnmodifiableListExample {
-    private List<NotSerializable> cl = Collections.unmodifiableList(Arrays.asList(new NotSerializable()));
+    private List<NotSerializable> cl = Collections.singletonList(new NotSerializable());
 
     @Override
     public int hashCode() {

File: core/src/main/java/org/powermock/core/MockRepository.java
Patch:
@@ -219,9 +219,7 @@ public static synchronized Set<Object> getObjectsToAutomaticallyReplayAndVerify(
 	 * Add classes that should be automatically replayed or verified.
 	 */
 	public static synchronized void addObjectsToAutomaticallyReplayAndVerify(Object... objects) {
-		for (Object mock : objects) {
-			objectsToAutomaticallyReplayAndVerify.add(mock);
-		}
+		Collections.addAll(objectsToAutomaticallyReplayAndVerify, objects);
 	}
 
 	/**

File: api/mockito2/src/main/java/org/powermock/api/mockito/repackaged/cglib/core/AbstractClassGenerator.java
Patch:
@@ -214,8 +214,6 @@ protected Object create(Object key) {
             return firstInstance(gen);
         } catch (RuntimeException e) {
             throw e;
-        } catch (Error e) {
-            throw e;
         } catch (Exception e) {
             throw new CodeGenerationException(e);
         }

File: api/mockito2/src/main/java/org/powermock/api/mockito/repackaged/cglib/core/CodeEmitter.java
Patch:
@@ -604,8 +604,6 @@ public void process_switch(int[] keys, ProcessSwitchCallback callback, boolean u
 
         } catch (RuntimeException e) {
             throw e;
-        } catch (Error e) {
-            throw e;
         } catch (Exception e) {
             throw new CodeGenerationException(e);
         }

File: api/mockito2/src/main/java/org/powermock/api/mockito/repackaged/cglib/transform/AbstractClassLoader.java
Patch:
@@ -83,8 +83,6 @@ public Class loadClass(String name) throws ClassNotFoundException {
             return c;
         } catch (RuntimeException e) {
             throw e;
-        } catch (Error e) {
-            throw e;
         } catch (Exception e) {
             throw new CodeGenerationException(e);
         }

File: api/easymock/src/main/java/org/powermock/api/easymock/PowerMock.java
Patch:
@@ -1937,7 +1937,7 @@ public void run() {
                 }
                 MockRepository.putInstanceMethodInvocationControl(newInstance,
                         new EasyMockMethodInvocationControl<Object>(h, methodsToMock, replica));
-                if (newInstance instanceof InvocationSubstitute<?> == false) {
+                if (!(newInstance instanceof InvocationSubstitute<?>)) {
                     MockRepository.addObjectsToAutomaticallyReplayAndVerify(newInstance);
                 }
                 return newInstance;
@@ -1954,7 +1954,7 @@ public void run() {
         } else {
             MockRepository.putInstanceMethodInvocationControl(mock, new EasyMockMethodInvocationControl<T>(h,
                     methodsToMock));
-            if (mock instanceof InvocationSubstitute<?> == false) {
+            if (!(mock instanceof InvocationSubstitute<?>)) {
                 MockRepository.addObjectsToAutomaticallyReplayAndVerify(mock);
             }
         }
@@ -2070,7 +2070,7 @@ private static synchronized void verifyClass(Class<?>... types) {
     }
 
     private static boolean isNiceReplayAndVerifyMode() {
-        final Boolean mode = (Boolean) MockRepository.getAdditionalState(NICE_REPLAY_AND_VERIFY_KEY);
+        final Boolean mode = MockRepository.getAdditionalState(NICE_REPLAY_AND_VERIFY_KEY);
         return mode != null && mode;
     }
 

File: api/mockito-common/src/main/java/org/powermock/api/mockito/internal/expectation/AbstractConstructorExpectationSetup.java
Patch:
@@ -113,7 +113,7 @@ public OngoingStubbing<T> withAnyArguments() throws Exception {
 
     @Override
     public OngoingStubbing<T> withNoArguments() throws Exception {
-        return createNewSubstituteMock(mockType, parameterTypes, new Object[0]);
+        return createNewSubstituteMock(mockType, parameterTypes);
     }
 
     @Override

File: api/mockito-common/src/main/java/org/powermock/api/mockito/internal/invocation/MockitoNewInvocationControl.java
Patch:
@@ -110,7 +110,7 @@ public synchronized Object verify(Object... mocks) {
 	@SuppressWarnings("unchecked")
 	@Override
 	public synchronized Object reset(Object... mocks) {
-		Mockito.<InvocationSubstitute<T>> reset(substitute);
+		Mockito.reset(substitute);
 		return null;
 	}
 

File: api/mockito/src/main/java/org/powermock/api/mockito/internal/invocation/MockitoMethodInvocationControl.java
Patch:
@@ -142,7 +142,7 @@ private boolean isInVerificationMode() {
 
     private VerificationMode getVerificationMode() {
         try {
-            MockingProgress progress = (MockingProgress) Whitebox.invokeMethod(ThreadSafeMockingProgress.class,
+            MockingProgress progress = Whitebox.invokeMethod(ThreadSafeMockingProgress.class,
                     "threadSafely");
             return getVerificationModeFromMockProgress(progress);
         } catch (Exception e) {
@@ -308,7 +308,7 @@ public void verifyNoMoreInteractions() {
         try {
             final MockHandler mockHandler = methodInterceptorFilter.getHandler();
             if (mockHandler instanceof MockHandler) {
-                InvocationContainer invocationContainer = Whitebox.<InvocationContainer>invokeMethod(mockHandler, "getInvocationContainer");
+                InvocationContainer invocationContainer = Whitebox.invokeMethod(mockHandler, "getInvocationContainer");
                 VerificationDataImpl data = new VerificationDataImpl(invocationContainer, null);
                 VerificationModeFactory.noMoreInteractions().verify(data);
             } else {

File: api/mockito/src/main/java/org/powermock/api/mockito/internal/verification/DefaultConstructorArgumentsVerfication.java
Patch:
@@ -55,7 +55,7 @@ private void invokeSubstitute(Object... arguments) throws Exception {
 
     @Override
     public void withNoArguments() throws Exception {
-        invokeSubstitute(new Object[0]);
+        invokeSubstitute();
     }
 
 }

File: api/mockito2/src/main/java/org/powermock/api/mockito/internal/invocation/MockitoMethodInvocationControl.java
Patch:
@@ -143,7 +143,7 @@ private boolean isInVerificationMode() {
 
     private VerificationMode getVerificationMode() {
         try {
-            MockingProgress progress = (MockingProgress) Whitebox.invokeMethod(ThreadSafeMockingProgress.class,
+            MockingProgress progress = Whitebox.invokeMethod(ThreadSafeMockingProgress.class,
                     "threadSafely");
             return getVerificationModeFromMockProgress(progress);
         } catch (Exception e) {
@@ -309,7 +309,7 @@ public void verifyNoMoreInteractions() {
         try {
             final MockHandler mockHandler = methodInterceptorFilter.getHandler();
             if (mockHandler instanceof MockHandler) {
-                InvocationContainer invocationContainer = Whitebox.<InvocationContainer>invokeMethod(mockHandler, "getInvocationContainer");
+                InvocationContainer invocationContainer = Whitebox.invokeMethod(mockHandler, "getInvocationContainer");
                 VerificationDataImpl data = new VerificationDataImpl(invocationContainer, null);
                 VerificationModeFactory.noMoreInteractions().verify(data);
             } else {

File: api/mockito2/src/main/java/org/powermock/api/mockito/internal/verification/DefaultConstructorArgumentsVerfication.java
Patch:
@@ -56,7 +56,7 @@ private void invokeSubstitute(Object... arguments) throws Exception {
 
     @Override
     public void withNoArguments() throws Exception {
-        invokeSubstitute(new Object[0]);
+        invokeSubstitute();
     }
 
 }

File: api/mockito2/src/main/java/org/powermock/api/mockito/repackaged/cglib/beans/BeanMapEmitter.java
Patch:
@@ -79,7 +79,7 @@ public BeanMapEmitter(ClassVisitor v, String className, Class type, int require)
     private Map makePropertyMap(PropertyDescriptor[] props) {
         Map names = new HashMap();
         for (int i = 0; i < props.length; i++) {
-            names.put(((PropertyDescriptor)props[i]).getName(), props[i]);
+            names.put(props[i].getName(), props[i]);
         }
         return names;
     }

File: api/mockito2/src/main/java/org/powermock/api/mockito/repackaged/cglib/beans/BulkBean.java
Patch:
@@ -40,15 +40,15 @@ public Object[] getPropertyValues(Object bean) {
     }
     
     public Class[] getPropertyTypes() {
-        return (Class[])types.clone();
+        return types.clone();
     }
     
     public String[] getGetters() {
-        return (String[])getters.clone();
+        return getters.clone();
     }
     
     public String[] getSetters() {
-        return (String[])setters.clone();
+        return setters.clone();
     }
 
     interface BulkBeanKey {

File: api/mockito2/src/main/java/org/powermock/api/mockito/repackaged/cglib/core/CollectionUtils.java
Patch:
@@ -22,7 +22,7 @@ private CollectionUtils() { }
     public static Map bucket(Collection c, Transformer t) {
         Map buckets = new HashMap();
         for (Iterator it = c.iterator(); it.hasNext();) {
-            Object value = (Object)it.next();
+            Object value = it.next();
             Object key = t.transform(value);
             List bucket = (List)buckets.get(key);
             if (bucket == null) {

File: api/mockito2/src/main/java/org/powermock/api/mockito/repackaged/cglib/core/EmitUtils.java
Patch:
@@ -266,7 +266,7 @@ public void processCase(int key, Label ignore_end) throws Exception {
                 if (skipEquals && bucket.size() == 1) {
                     if (skipEquals)
                         e.pop();
-                    callback.processCase((String)bucket.get(0), end);
+                    callback.processCase(bucket.get(0), end);
                 } else {
                     for (Iterator it = bucket.iterator(); it.hasNext();) {
                         String string = (String)it.next();

File: api/mockito2/src/main/java/org/powermock/api/mockito/repackaged/cglib/core/KeyFactory.java
Patch:
@@ -186,8 +186,8 @@ public void generateClass(ClassVisitor v) {
             
             // hash code
             e = ce.begin_method(Constants.ACC_PUBLIC, HASH_CODE, null);
-            int hc = (constant != 0) ? constant : PRIMES[(int)(Math.abs(seed) % PRIMES.length)];
-            int hm = (multiplier != 0) ? multiplier : PRIMES[(int)(Math.abs(seed * 13) % PRIMES.length)];
+            int hc = (constant != 0) ? constant : PRIMES[Math.abs(seed) % PRIMES.length];
+            int hm = (multiplier != 0) ? multiplier : PRIMES[Math.abs(seed * 13) % PRIMES.length];
             e.push(hc);
             for (int i = 0; i < parameterTypes.length; i++) {
                 e.load_this();

File: api/mockito2/src/main/java/org/powermock/api/mockito/repackaged/cglib/proxy/Enhancer.java
Patch:
@@ -269,7 +269,7 @@ private static void setCallbacksHelper(Class type, Callback[] callbacks, String
     }
 
     private static Method getCallbacksSetter(Class type, String methodName) throws NoSuchMethodException {
-        return type.getDeclaredMethod(methodName, new Class[]{ Callback[].class });
+        return type.getDeclaredMethod(methodName, Callback[].class);
     }
 
     /**

File: api/mockito2/src/main/java/org/powermock/api/mockito/repackaged/cglib/proxy/MethodProxy.java
Patch:
@@ -66,7 +66,7 @@ public static MethodProxy find(Class type, Signature sig) {
         try {
             Method m = type.getDeclaredMethod(MethodInterceptorGenerator.FIND_PROXY_NAME,
                                               MethodInterceptorGenerator.FIND_PROXY_TYPES);
-            return (MethodProxy)m.invoke(null, new Object[]{ sig });
+            return (MethodProxy)m.invoke(null, sig);
         } catch (NoSuchMethodException e) {
             throw new IllegalArgumentException("Class " + type + " does not use a MethodInterceptor");
         } catch (IllegalAccessException e) {

File: api/mockito2/src/main/java/org/powermock/api/mockito/repackaged/cglib/proxy/Mixin.java
Patch:
@@ -79,7 +79,7 @@ public static Mixin createBean(ClassLoader loader,Object[] beans) {
     }
 
     public static Class[] getClasses(Object[] delegates) {
-        return (Class[])route(delegates).classes.clone();
+        return route(delegates).classes.clone();
     }
 
     private static Route route(Object[] delegates) {

File: api/mockito2/src/main/java/org/powermock/api/mockito/repackaged/cglib/proxy/Proxy.java
Patch:
@@ -74,7 +74,7 @@ public static boolean isProxyClass(Class cl) {
     public static Object newProxyInstance(ClassLoader loader, Class[] interfaces, InvocationHandler h) {
         try {
             Class clazz = getProxyClass(loader, interfaces);
-            return clazz.getConstructor(new Class[]{ InvocationHandler.class }).newInstance(new Object[]{ h });
+            return clazz.getConstructor(new Class[]{ InvocationHandler.class }).newInstance(h);
         } catch (RuntimeException e) {
             throw e;
         } catch (Exception e) {

File: api/mockito2/src/main/java/org/powermock/api/mockito/repackaged/cglib/transform/ClassTransformerChain.java
Patch:
@@ -11,7 +11,7 @@ public class ClassTransformerChain extends AbstractClassTransformer {
     private ClassTransformer[] chain;
     
     public ClassTransformerChain(ClassTransformer[] chain) {
-        this.chain = (ClassTransformer[])chain.clone();
+        this.chain = chain.clone();
     }
 
     public void setTarget(ClassVisitor v) {

File: api/mockito2/src/main/java/org/powermock/api/mockito/repackaged/cglib/transform/TransformingClassLoader.java
Patch:
@@ -16,7 +16,7 @@ public TransformingClassLoader(ClassLoader parent, ClassFilter filter, ClassTran
     }
 
     protected ClassGenerator getGenerator(ClassReader r) {
-        ClassTransformer t2 = (ClassTransformer)t.newInstance();
+        ClassTransformer t2 = t.newInstance();
         return new TransformingClassGenerator(super.getGenerator(r), t2);
     }
 }

File: api/mockito2/src/main/java/org/powermock/api/mockito/repackaged/cglib/transform/impl/AddDelegateTransformer.java
Patch:
@@ -31,7 +31,7 @@ public class AddDelegateTransformer extends ClassEmitterTransformer {
     /** Creates a new instance of AddDelegateTransformer */
     public AddDelegateTransformer(Class delegateIf[], Class delegateImpl) {
         try {
-            delegateImpl.getConstructor(new Class[]{ Object.class });
+            delegateImpl.getConstructor(Object.class);
             this.delegateIf = delegateIf;
             this.delegateImpl = delegateImpl;
             delegateType = Type.getType(delegateImpl);

File: api/mockito2/src/main/java/org/powermock/api/mockito/repackaged/cglib/util/StringSwitcher.java
Patch:
@@ -144,7 +144,7 @@ public void processDefault() {
         }
 
         protected Object firstInstance(Class type) {
-            return (StringSwitcher) ReflectUtils.newInstance(type);
+            return ReflectUtils.newInstance(type);
         }
 
         protected Object nextInstance(Object instance) {

File: classloading/classloading-objenesis/src/main/java/org/powermock/classloading/DeepCloner.java
Patch:
@@ -288,7 +288,7 @@ private static boolean isIterable(final Class<?> cls) {
 	@SuppressWarnings({ "unchecked", "rawtypes" })
 	private static Enum getEnumValue(final Object enumValueOfSourceClassloader,
 			final Class<Object> enumTypeLoadedByTargetCL) {
-		return Enum.valueOf((Class) enumTypeLoadedByTargetCL, ((Enum) enumValueOfSourceClassloader).toString());
+		return Enum.valueOf((Class) enumTypeLoadedByTargetCL, enumValueOfSourceClassloader.toString());
 	}
 
 	private Object instantiateArray(ClassLoader targetCL, Class<?> arrayClass, Object objectToClone,

File: core/src/main/java/org/powermock/tests/utils/impl/PowerMockTestNotifierImpl.java
Patch:
@@ -117,8 +117,8 @@ public void notifyBeforeTestSuiteStarted(Class<?> testClass, Method[] testMethod
 	@Override
 	public void notifyAfterTestMethod(boolean successful) {
 		final Object test = MockRepository.getAdditionalState(Keys.CURRENT_TEST_INSTANCE);
-		final Method testMethod = (Method) MockRepository.getAdditionalState(Keys.CURRENT_TEST_METHOD);
-		final Object[] testArguments = (Object[]) MockRepository.getAdditionalState(Keys.CURRENT_TEST_METHOD_ARGUMENTS);
+		final Method testMethod = MockRepository.getAdditionalState(Keys.CURRENT_TEST_METHOD);
+		final Object[] testArguments = MockRepository.getAdditionalState(Keys.CURRENT_TEST_METHOD_ARGUMENTS);
 		final TestMethodResult testResult = new TestMethodResultImpl((successful ? Result.SUCCESSFUL : Result.FAILED));
 		notifyAfterTestMethod(test, testMethod, testArguments, testResult);
 	}

File: core/src/test/java/org/powermock/core/classloader/MockClassLoaderTest.java
Patch:
@@ -100,7 +100,7 @@ public void prepareForTestPackagesArePrepared() throws Exception {
     public void shouldAddIgnorePackagesToDefer() throws Exception {
         MockClassLoader mockClassLoader = new MockClassLoader(new String[0]);
         mockClassLoader.addIgnorePackage("test*");
-        String[] deferPackages = Whitebox.<String[]>getInternalState(mockClassLoader, "deferPackages");
+        String[] deferPackages = Whitebox.getInternalState(mockClassLoader, "deferPackages");
         assertTrue(deferPackages.length > 1);
         assertEquals("test*", deferPackages[deferPackages.length - 1]);
     }

File: modules/module-impl/junit4/src/main/java/org/powermock/modules/junit4/internal/impl/NotificationBuilder.java
Patch:
@@ -63,7 +63,7 @@ enum DetectedTestRunBehaviour {
             new IdentityHashMap<Object, List<Method>>() {
         @Override
         public List<Method> get(Object key) {
-            if (false == containsKey(key)) {
+            if (!containsKey(key)) {
                 put(key, new LinkedList<Method>());
             }
             return super.get(key);
@@ -188,7 +188,7 @@ private Class<?> reloadParamType(
     private Method reloadMethod(Class<?> testClass, Method m) {
         if (testClass.getClassLoader() == m.getDeclaringClass().getClassLoader()) {
             return m;
-        } else if (false == m.getDeclaringClass().getName()
+        } else if (!m.getDeclaringClass().getName()
                 .equals(testClass.getName())) {
             return reloadMethod(testClass.getSuperclass(), m);
         }
@@ -273,7 +273,7 @@ void testInstanceCreated(Object newTestInstance) {
     }
 
     void testIgnored(Description d) {
-        if (false == notify(d, Result.IGNORED)
+        if (!notify(d, Result.IGNORED)
                 && DetectedTestRunBehaviour.TEST_INSTANCE_CREATED_FIRST == behaviour
                 && currentTestInstance != latestTestInstance) {
             /*

File: modules/module-impl/junit4/src/main/java/org/powermock/modules/junit4/internal/impl/PowerMockJUnit44RunnerDelegateImpl.java
Patch:
@@ -202,7 +202,7 @@ protected void invokeTestMethod(final Method method, RunNotifier notifier) {
 
         // Check if we extend from TestClass, in that case we must run the setUp
         // and tearDown methods.
-        final boolean extendsFromTestCase = TestCase.class.isAssignableFrom(testClass.getJavaClass()) ? true : false;
+        final boolean extendsFromTestCase = TestCase.class.isAssignableFrom(testClass.getJavaClass());
 
         final TestMethod testMethod = wrapMethod(method);
         createPowerMockRunner(testInstance, testMethod, notifier, description, extendsFromTestCase).run();
@@ -314,7 +314,7 @@ protected void runTestMethod() {
                         }
                     }
                     testMethod.invoke(testInstance);
-                    if ((Boolean) Whitebox.invokeMethod(testMethod, "expectsException")) {
+                    if (Whitebox.invokeMethod(testMethod, "expectsException")) {
                         addFailure(new AssertionError("Expected exception: " + getExpectedExceptionName(testMethod)));
                     }
                 } catch (InvocationTargetException e) {
@@ -364,7 +364,7 @@ protected void handleException(final TestMethod testMethod, Throwable actualFail
                                 Throwable.class);
                     }
                     addFailure(actualFailure);
-                } else if ((Boolean) Whitebox.invokeMethod(testMethod, "isUnexpected", actualFailure)) {
+                } else if (Whitebox.invokeMethod(testMethod, "isUnexpected", actualFailure)) {
                     String message = "Unexpected exception, expected<" + getExpectedExceptionName(testMethod) + "> but was<"
                             + actualFailure.getClass().getName() + ">";
                     addFailure(new Exception(message, actualFailure));

File: modules/module-impl/junit4/src/main/java/org/powermock/modules/junit4/internal/impl/PowerMockRunNotifier.java
Patch:
@@ -51,7 +51,7 @@ class PowerMockRunNotifier extends RunNotifier
         @Override
         protected NotificationBuilder initialValue() {
             return new NotificationBuilder(
-                    (Method[]) testMethods.clone(),
+                    testMethods.clone(),
                     powerMockTestNotifier,
                     pendingTestInstancesOnMotherThread);
         }

File: modules/module-test/easymock/junit3-test/src/test/java/samples/junit3/singleton/MockStaticTest.java
Patch:
@@ -147,7 +147,7 @@ public void testSayPrivateStatic() throws Exception {
 
 		replay(StaticService.class);
 
-		String actual = (String) Whitebox.invokeMethod(StaticService.class, "sayPrivateStatic", "name");
+		String actual = Whitebox.invokeMethod(StaticService.class, "sayPrivateStatic", "name");
 
 		verify(StaticService.class);
 		assertEquals(expected, actual);
@@ -161,7 +161,7 @@ public void testSayPrivateFinalStatic() throws Exception {
 
 		replay(StaticService.class);
 
-		String actual = (String) Whitebox.invokeMethod(StaticService.class, "sayPrivateFinalStatic", "name");
+		String actual = Whitebox.invokeMethod(StaticService.class, "sayPrivateFinalStatic", "name");
 
 		verify(StaticService.class);
 		assertEquals(expected, actual);

File: modules/module-test/easymock/junit4-legacy-test/src/test/java/samples/junit4/legacy/singleton/MockStaticTest.java
Patch:
@@ -154,7 +154,7 @@ public void testSayPrivateStatic() throws Exception {
 
 		replay(StaticService.class);
 
-		String actual = (String) Whitebox.invokeMethod(StaticService.class, "sayPrivateStatic", "name");
+		String actual = Whitebox.invokeMethod(StaticService.class, "sayPrivateStatic", "name");
 
 		verify(StaticService.class);
 		assertEquals(expected, actual);
@@ -169,7 +169,7 @@ public void testSayPrivateFinalStatic() throws Exception {
 
 		replay(StaticService.class);
 
-		String actual = (String) Whitebox.invokeMethod(StaticService.class, "sayPrivateFinalStatic", "name");
+		String actual = Whitebox.invokeMethod(StaticService.class, "sayPrivateFinalStatic", "name");
 
 		verify(StaticService.class);
 		assertEquals(expected, actual);

File: modules/module-test/easymock/junit4-test/src/test/java/samples/junit4/privatemocking/PrivateMethodDemoTest.java
Patch:
@@ -56,7 +56,7 @@ public void testMockPrivateMethod_withArgument() throws Exception {
 		PrivateMethodDemo tested = new PrivateMethodDemo();
 		String expected = "Hello altered World";
 
-		String actual = (String) Whitebox.invokeMethod(tested, "sayIt",
+		String actual = Whitebox.invokeMethod(tested, "sayIt",
 				"altered World");
 
 		assertEquals("Expected and actual did not match", expected, actual);
@@ -68,7 +68,7 @@ public void testInvokePrivateMethod() throws Exception {
 		PrivateMethodDemo tested = new PrivateMethodDemo();
 		String expected = "Hello world";
 
-		String actual = (String) Whitebox.invokeMethod(tested, "sayIt");
+		String actual = Whitebox.invokeMethod(tested, "sayIt");
 
 		assertEquals("Expected and actual did not match", expected, actual);
 	}

File: modules/module-test/easymock/junit4-test/src/test/java/samples/junit4/singleton/MockStaticTest.java
Patch:
@@ -153,7 +153,7 @@ public void testMockPrivateStatic() throws Exception {
 
 		replay(StaticService.class);
 
-		String actual = (String) Whitebox.invokeMethod(StaticService.class, "sayPrivateStatic", "name");
+		String actual = Whitebox.invokeMethod(StaticService.class, "sayPrivateStatic", "name");
 
 		verify(StaticService.class);
 		assertEquals(expected, actual);
@@ -168,7 +168,7 @@ public void testMockPrivateFinalStatic() throws Exception {
 
 		replay(StaticService.class);
 
-		String actual = (String) Whitebox.invokeMethod(StaticService.class, "sayPrivateFinalStatic", "name");
+		String actual = Whitebox.invokeMethod(StaticService.class, "sayPrivateFinalStatic", "name");
 
 		verify(StaticService.class);
 		assertEquals(expected, actual);
@@ -183,7 +183,7 @@ public void testMockPrivateNativeFinalStatic() throws Exception {
 
 		replay(StaticService.class);
 
-		String actual = (String) Whitebox.invokeMethod(StaticService.class, "sayPrivateNativeFinalStatic", "name");
+		String actual = Whitebox.invokeMethod(StaticService.class, "sayPrivateNativeFinalStatic", "name");
 
 		verify(StaticService.class);
 		assertEquals(expected, actual);

File: reflect/src/main/java/org/powermock/reflect/internal/matcherstrategies/AssignableToFieldTypeMatcherStrategy.java
Patch:
@@ -25,6 +25,6 @@ public AssignableToFieldTypeMatcherStrategy(Class<?> fieldType) {
 
 	@Override
 	public boolean matches(Field field) {
-		return expectedFieldType.isAssignableFrom((Class<?>) field.getType());
+		return expectedFieldType.isAssignableFrom(field.getType());
 	}
 }
\ No newline at end of file

File: reflect/src/test/java/org/powermock/reflect/WhiteBoxTest.java
Patch:
@@ -787,7 +787,7 @@ public void assertThatErrorMessageIsCorrectWhenNoStaticFieldFound() throws Excep
     @Test
     public void assertThatWhiteboxWorksWithGenericsWhenSpecifyingFieldName() throws Exception {
         ClassWithInternalState object = new ClassWithInternalState();
-        Set<String> state = Whitebox.<Set<String>>getInternalState(object, "genericState");
+        Set<String> state = Whitebox.getInternalState(object, "genericState");
         assertSame(object.getGenericState(), state);
     }
 

File: reflect/src/test/java/org/powermock/reflect/internal/proxy/ProxyFrameworksTest.java
Patch:
@@ -24,7 +24,7 @@ public void setUp() throws Exception {
 
     @Test
     public void should_throw_illegal_argument_exception_if_class_is_null() throws Exception {
-        assertThat(proxyFrameworks.getUnproxiedType((Class<?>) null)).isNull();
+        assertThat(proxyFrameworks.getUnproxiedType(null)).isNull();
     }
 
     @Test(expected = IllegalArgumentException.class)

File: api/mockito/src/main/java/org/powermock/api/mockito/internal/invocation/ToStringGenerator.java
Patch:
@@ -31,7 +31,7 @@ public String generate(Object mock, Method method, Object[] arguments) {
         final PrintSettings printSettings = new PrintSettings();
         MatchersPrinter matchersPrinter = new MatchersPrinter();
 
-        String methodName = Whitebox.getType(mock).getName() + "." + method.getName();
+        String methodName = Whitebox.getUnproxyType(mock).getName() + "." + method.getName();
         String invocation = methodName + matchersPrinter.getArgumentsLine(matcherList, printSettings);
         if (printSettings.isMultiline()
                 || (!matcherList.isEmpty() && invocation.length() > Whitebox.<Integer> getInternalState(

File: api/mockito2/src/main/java/org/powermock/api/mockito/internal/invocation/ToStringGenerator.java
Patch:
@@ -48,7 +48,7 @@ public String generate(Object mock, Method method, Object[] arguments) {
         final PrintSettings printSettings = new PrintSettings();
         MatchersPrinter matchersPrinter = new MatchersPrinter();
 
-        String methodName = Whitebox.getType(mock).getName() + "." + method.getName();
+        String methodName = Whitebox.getUnproxyType(mock).getName() + "." + method.getName();
         String invocation = methodName + matchersPrinter.getArgumentsLine(matcherList, printSettings);
         if (printSettings.isMultiline()
                 || (!matcherList.isEmpty() && invocation.length() > Whitebox.<Integer> getInternalState(

File: core/src/main/java/org/powermock/core/reporter/PowerMockReporter.java
Patch:
@@ -17,10 +17,13 @@
 
 package org.powermock.core.reporter;
 
+import java.lang.reflect.Constructor;
+
 /**
  *  The interface is used to provide a user well-defined exception description.
  */
 public interface PowerMockReporter {
 
     <T> void classNotPrepared(Class<T> type);
+
 }

File: core/src/main/java/org/powermock/tests/utils/impl/AbstractTestSuiteChunkerImpl.java
Patch:
@@ -73,8 +73,6 @@ protected Object getPowerMockTestListenersLoadedByASpecificClassLoader(Class<?>
                 defaultListenerSize = 0;
             }
 
-            registerProxyframework(classLoader);
-
             final Class<?> powerMockTestListenerType = Class.forName(PowerMockTestListener.class.getName(), false, classLoader);
             Object testListeners = null;
             if (clazz.isAnnotationPresent(PowerMockListener.class)) {

File: modules/module-impl/junit4-rule/src/main/java/org/powermock/modules/junit4/rule/PowerMockClassloaderExecutor.java
Patch:
@@ -21,7 +21,6 @@
 import org.powermock.core.transformers.MockTransformer;
 import org.powermock.core.transformers.impl.ClassMockTransformer;
 import org.powermock.core.transformers.impl.InterfaceMockTransformer;
-import org.powermock.reflect.proxyframework.ClassLoaderRegisterProxyFramework;
 import org.powermock.tests.utils.MockPolicyInitializer;
 import org.powermock.tests.utils.impl.PowerMockIgnorePackagesExtractorImpl;
 import org.powermock.tests.utils.impl.PrepareForTestExtractorImpl;
@@ -44,8 +43,6 @@ public static SingleClassloaderExecutor forClass(Class<?> testClass, MockPolicyI
         mockLoader.addClassesToModify(new PrepareForTestExtractorImpl().getTestClasses(testClass));
         mockLoader.addClassesToModify(new StaticConstructorSuppressExtractorImpl().getTestClasses(testClass));
 
-        ClassLoaderRegisterProxyFramework.registerProxyframework(mockLoader);
-
         mockPolicyInitializer.initialize(mockLoader);
 
         return new SingleClassloaderExecutor(mockLoader);

File: modules/module-test/mockito/junit4-delegate/src/test/java/powermock/modules/test/mockito/junit4/delegate/WhenNewCaseMethod.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import org.junit.Test;
+import samples.powermockito.junit4.whennew.WhenNewCases;
 
 public class WhenNewCaseMethod {
 

File: modules/module-test/mockito/junit4-delegate/src/test/java/powermock/modules/test/mockito/junit4/delegate/parameterized/WhenNewTest.java
Patch:
@@ -31,8 +31,9 @@
 import org.powermock.modules.junit4.PowerMockRunner;
 import org.powermock.modules.junit4.PowerMockRunnerDelegate;
 import powermock.modules.test.mockito.junit4.delegate.WhenNewCaseMethod;
+import samples.powermockito.junit4.whennew.WhenNewCases;
 
-@PrepareForTest({MyClass.class, ExpectNewDemo.class, DataInputStream.class})
+@PrepareForTest({MyClass.class, ExpectNewDemo.class, DataInputStream.class, WhenNewCases.class})
 @RunWith(PowerMockRunner.class)
 @PowerMockRunnerDelegate(Parameterized.class)
 public class WhenNewTest {

File: reflect/src/main/java/org/powermock/reflect/internal/ParameterTypesMatcher.java
Patch:
@@ -65,7 +65,7 @@ private void assertParametersTypesNotNull() {
 
     private Boolean isParametersMatch() {
         for (int index = 0; index < expectedParameterTypes.length; index++) {
-            final Class<?> actualParameterType = WhiteboxImpl.getType(actualParameterTypes[index]);
+            final Class<?> actualParameterType = actualParameterTypes[index];
             if (isRemainParamsVarArgs(index, actualParameterType)) {
                 return true;
             } else {

File: api/mockito2/src/main/java/org/powermock/api/mockito/internal/invocation/ToStringGenerator.java
Patch:
@@ -48,7 +48,7 @@ public String generate(Object mock, Method method, Object[] arguments) {
         final PrintSettings printSettings = new PrintSettings();
         MatchersPrinter matchersPrinter = new MatchersPrinter();
 
-        String methodName = Whitebox.getType(mock).getName() + "." + method.getName();
+        String methodName = Whitebox.getUnproxyType(mock).getName() + "." + method.getName();
         String invocation = methodName + matchersPrinter.getArgumentsLine(matcherList, printSettings);
         if (printSettings.isMultiline()
                 || (!matcherList.isEmpty() && invocation.length() > Whitebox.<Integer> getInternalState(

File: reflect/src/main/java/org/powermock/reflect/internal/Constructor.java
Patch:
@@ -16,7 +16,6 @@ boolean canBeInvokeWith(Object[] arguments) {
         return new ParametersMatcher(isVarArgs, parameterTypes, arguments).match();
     }
 
-
     public java.lang.reflect.Constructor<?> getJavaConstructor() {
         return constructor;
     }

File: reflect/src/main/java/org/powermock/reflect/internal/ConstructorFinder.java
Patch:
@@ -7,9 +7,6 @@
 import java.util.HashSet;
 import java.util.Set;
 
-/**
- *
- */
 class ConstructorFinder {
     private Class<?> type;
     private Object[] arguments;

File: core/src/main/java/org/powermock/utils/StringJoiner.java
Patch:
@@ -22,7 +22,7 @@
  */
 public class StringJoiner {
 
-    private static final String LINE_SEPARATOR = System.lineSeparator();
+    private static final String LINE_SEPARATOR = System.getProperty("line.separator");
     private static final String EMPTY_STRING = "";
 
 

File: api/easymock/src/main/java/org/powermock/api/easymock/PowerMock.java
Patch:
@@ -392,7 +392,7 @@ public static synchronized <T> T createPartialMockForAllMethodsExcept(Class<T> t
            */
         final Class<?>[] argumentTypes = mergeArgumentTypes(firstArgumentType, moreTypes);
 
-        return createMock(type, WhiteboxImpl.getAllMetodsExcept(type, methodNameToExclude, argumentTypes));
+        return createMock(type, WhiteboxImpl.getAllMethodsExcept(type, methodNameToExclude, argumentTypes));
     }
 
     /**
@@ -416,7 +416,7 @@ public static synchronized <T> T createNicePartialMockForAllMethodsExcept(Class<
            */
         final Class<?>[] argumentTypes = mergeArgumentTypes(firstArgumentType, moreTypes);
 
-        return createNiceMock(type, WhiteboxImpl.getAllMetodsExcept(type, methodNameToExclude, argumentTypes));
+        return createNiceMock(type, WhiteboxImpl.getAllMethodsExcept(type, methodNameToExclude, argumentTypes));
     }
 
     /**
@@ -440,7 +440,7 @@ public static synchronized <T> T createStrictPartialMockForAllMethodsExcept(Clas
            */
         final Class<?>[] argumentTypes = mergeArgumentTypes(firstArgumentType, moreTypes);
 
-        return createStrictMock(type, WhiteboxImpl.getAllMetodsExcept(type, methodNameToExclude, argumentTypes));
+        return createStrictMock(type, WhiteboxImpl.getAllMethodsExcept(type, methodNameToExclude, argumentTypes));
     }
 
     /**

File: api/easymock/src/main/java/org/powermock/api/extension/listener/AnnotationMockScanner.java
Patch:
@@ -32,8 +32,8 @@ public AnnotationMockScanner(Class<? extends Annotation> annotation) {
         this.annotation = annotation;
     }
 
-    public List<AnnotationMockMetadata> scan(Object instance) throws Exception {
-        final List<AnnotationMockMetadata> mocksMetadata = new ArrayList<AnnotationMockMetadata>();
+    public List<MockMetadata> scan(Object instance) throws Exception {
+        final List<MockMetadata> mocksMetadata = new ArrayList<MockMetadata>();
         final Set<Field> fields = getFields(instance);
         for (Field field : fields) {
             if (field.get(instance) != null) {

File: core/src/main/java/org/powermock/core/transformers/impl/ClassMockTransformer.java
Patch:
@@ -65,6 +65,8 @@ protected CtClass transformMockClass(CtClass clazz) throws CannotCompileExceptio
             clazz.instrument(new PowerMockExpressionEditor(clazz));
         }
 
+        ensureJvmMethodSizeLimit(clazz);
+
         return clazz;
     }
 

File: classloading/classloading-xstream/src/main/java/org/powermock/classloading/DeepCloner.java
Patch:
@@ -31,7 +31,7 @@ public class DeepCloner implements DeepClonerSPI {
 	 */
 	public DeepCloner(ClassLoader classLoader) {
         xStream = new XStream();
-        xStream.omitField(ClassloaderExecutor.class, "classloader");
+        xStream.omitField(SingleClassloaderExecutor.class, "classloader");
         xStream.setClassLoader(classLoader);
 	}
 
@@ -49,6 +49,7 @@ public DeepCloner() {
 	 *
 	 * @return A deep clone of the object to clone.
 	 */
+	@SuppressWarnings("unchecked")
 	public <T> T clone(T objectToClone) {
         final String serialized = xStream.toXML(objectToClone);
         return (T) xStream.fromXML(serialized);

File: core/src/main/java/org/powermock/tests/utils/TestChunk.java
Patch:
@@ -28,4 +28,5 @@ public interface TestChunk {
 
 	List<Method> getTestMethodsToBeExecutedByThisClassloader();
 
+	boolean isMethodToBeExecutedByThisClassloader(Method method);
 }
\ No newline at end of file

File: modules/module-impl/agent/src/main/java/org/powermock/modules/agent/support/PowerMockAgentTestInitializer.java
Patch:
@@ -56,7 +56,7 @@ private static void redefineClassesToSuppress(Class<?> testClass, String[] packa
 
     private static void redefineClassesToPrepare(Class<?> testClass, String[] packagesToIgnore,
                                                  JavaAgentClassRegister agentClassRegister) {
-        final String[] classesToPrepare = new PrepareForTestExtractorImpl().getTestClasses(testClass);
+        final String[] classesToPrepare = new PrepareForTestExtractorImpl(true).getTestClasses(testClass);
         redefine(classesToPrepare, packagesToIgnore, agentClassRegister);
     }
 

File: modules/module-test/easymock/junit4-agent/src/test/java/samples/powermockito/junit4/agent/AnnotationUsageTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package powermock.modules.test.mockito.junit4.agent;
+package samples.powermockito.junit4.agent;
 
 import org.easymock.Mock;
 import org.easymock.TestSubject;

File: modules/module-test/mockito/junit4-agent/src/test/java/samples/powermockito/junit4/agent/AnnotationUsageTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package powermock.modules.test.mockito.junit4.agent;
+package samples.powermockito.junit4.agent;
 
 import org.junit.Before;
 import org.junit.Rule;
@@ -46,7 +46,7 @@ public class AnnotationUsageTest {
     Service server;
 
 
-    String fooId;
+    final String fooId;
 
 
     public AnnotationUsageTest(String fooId) {

File: modules/module-test/mockito/junit4-agent/src/test/java/samples/powermockito/junit4/agent/MockStaticWithPrivateCtorTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package powermock.modules.test.mockito.junit4.agent;
+package samples.powermockito.junit4.agent;
 
 import org.junit.Rule;
 import org.junit.Test;

File: modules/module-test/mockito/junit4-agent/src/test/java/samples/powermockito/junit4/agent/StubMethodTest.java
Patch:
@@ -13,11 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package powermock.modules.test.mockito.junit4.agent;
+package samples.powermockito.junit4.agent;
 
 import org.junit.Rule;
 import org.junit.Test;
-import org.junit.runner.RunWith;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.rule.PowerMockRule;
 import org.powermock.reflect.exceptions.MethodNotFoundException;

File: modules/module-test/mockito/junit4-agent/src/test/java/samples/powermockito/junit4/agent/SuppressConstructorDemoTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package powermock.modules.test.mockito.junit4.agent;
+package samples.powermockito.junit4.agent;
 
 import org.junit.Ignore;
 import org.junit.Rule;

File: modules/module-test/mockito/junit4-rule-objenesis/src/test/java/samples/powermockito/junit4/rule/objenesis/Foo.java
Patch:
@@ -1,11 +1,12 @@
-package org.powermock.example;
+package samples.powermockito.junit4.rule.objenesis;
 
 public class Foo {
 
 	public Bar m() {
 		return new Bar(1);
 	}
 
+	@SuppressWarnings("SameParameterValue")
 	public static class Bar {
 
 		private final int i;

File: modules/module-test/mockito/junit4-rule-objenesis/src/test/java/samples/powermockito/junit4/rule/objenesis/PowerMockRuleTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.powermock.modules.test.junit4.rule.xstream;
+package samples.powermockito.junit4.rule.objenesis;
 
 
 import org.junit.Rule;
@@ -7,12 +7,11 @@
 import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.core.spi.PowerMockPolicy;
-import org.powermock.example.Foo;
-import org.powermock.example.Foo.Bar;
 import org.powermock.mockpolicies.MockPolicyClassLoadingSettings;
 import org.powermock.mockpolicies.MockPolicyInterceptionSettings;
 import org.powermock.modules.junit4.rule.PowerMockRule;
 import org.powermock.reflect.Whitebox;
+import samples.powermockito.junit4.rule.objenesis.Foo.Bar;
 
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;

File: modules/module-test/mockito/junit4-rule-objenesis/src/test/java/samples/powermockito/junit4/rule/objenesis/StaticInitializerExampleTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.powermock.modules.test.junit4.rule.xstream;
+package samples.powermockito.junit4.rule.objenesis;
 
 import org.junit.Rule;
 import org.junit.Test;

File: modules/module-test/mockito/junit4-rule-xstream/src/test/java/samples/powermockito/junit4/rule/xstream/Foo.java
Patch:
@@ -1,11 +1,12 @@
-package org.powermock.example;
+package samples.powermockito.junit4.rule.xstream;
 
 public class Foo {
 
 	public Bar m() {
 		return new Bar(1);
 	}
 
+	@SuppressWarnings("SameParameterValue")
 	public static class Bar {
 
 		private final int i;

File: modules/module-test/mockito/junit4-rule-xstream/src/test/java/samples/powermockito/junit4/rule/xstream/PowerMockRuleTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.powermock.modules.test.junit4.rule.objenesis;
+package samples.powermockito.junit4.rule.xstream;
 
 
 import org.junit.Rule;
@@ -7,12 +7,11 @@
 import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.core.spi.PowerMockPolicy;
-import org.powermock.example.Foo;
-import org.powermock.example.Foo.Bar;
 import org.powermock.mockpolicies.MockPolicyClassLoadingSettings;
 import org.powermock.mockpolicies.MockPolicyInterceptionSettings;
 import org.powermock.modules.junit4.rule.PowerMockRule;
 import org.powermock.reflect.Whitebox;
+import samples.powermockito.junit4.rule.xstream.Foo.Bar;
 
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;

File: modules/module-test/mockito/junit4-rule-xstream/src/test/java/samples/powermockito/junit4/rule/xstream/StaticInitializerExampleTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.powermock.modules.test.junit4.rule.objenesis;
+package samples.powermockito.junit4.rule.xstream;
 
 import org.junit.Rule;
 import org.junit.Test;

File: modules/module-test/testng/src/test/java/samples/testng/bugs/github647/GitHub647.java
Patch:
@@ -1,4 +1,4 @@
-package samples.testng.bugs.powermock647;
+package samples.testng.bugs.github647;
 
 import org.testng.IResultMap;
 import org.testng.TestListenerAdapter;
@@ -12,11 +12,11 @@
 
 import static org.testng.Assert.assertEquals;
 
-public class PowerMock647 extends SimpleBaseTest {
+public class GitHub647 extends SimpleBaseTest {
 
   private final TestListenerAdapter tla;
 
-  public PowerMock647() {
+  public GitHub647() {
     tla = new TestListenerAdapter();
   }
 

File: modules/module-test/testng/src/test/java/samples/testng/bugs/github647/SkipExceptionTest.java
Patch:
@@ -1,4 +1,4 @@
-package samples.testng.bugs.powermock647;
+package samples.testng.bugs.github647;
 
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.testng.PowerMockTestCase;

File: modules/module-test/testng/src/test/java/samples/testng/bugs/github647/SomeClass.java
Patch:
@@ -1,4 +1,4 @@
-package samples.testng.bugs.powermock647;
+package samples.testng.bugs.github647;
 
 import org.testng.SkipException;
 

File: core/src/test/java/org/powermock/core/transformers/impl/TestClassTransformerTest.java
Patch:
@@ -122,7 +122,7 @@ MockClassLoader createMockClassLoaderThatPrepare(Class<?> prepare4test) {
             MockClassLoader mockClassLoader =
                     new MockClassLoader(preparations(prepare4test));
             mockClassLoader.setMockTransformerChain(Arrays.asList(
-                    new MainMockTransformer(),
+                    new ClassMockTransformer(),
                     testClassTransformer));
             return mockClassLoader;
         }

File: core/src/test/java/powermock/test/support/MainMockTransformerTestSupport.java
Patch:
@@ -17,9 +17,10 @@
 package powermock.test.support;
 
 import org.powermock.core.classloader.MockClassLoader;
+import org.powermock.core.transformers.impl.ClassMockTransformerTest;
 
 /**
- * This class is used when running tests in {@link org.powermock.core.transformers.impl.MainMockTransformerTest}. It is
+ * This class is used when running tests in {@link ClassMockTransformerTest}. It is
  * placed in this package because classes in org.powermock.core.* are deferred by:
  * {@link MockClassLoader#packagesToBeDeferred}. Additionally, the class must be modified when it is loaded, and as such
  * not in {@link MockClassLoader#packagesToLoadButNotModify}.

File: core/src/main/java/org/powermock/core/classloader/MockClassLoader.java
Patch:
@@ -64,7 +64,8 @@ public class MockClassLoader extends DeferSupportingClassLoader {
      * Classes not deferred but loaded by the mock class loader but they're not
      * modified.
      */
-    private final String[] packagesToLoadButNotModify = new String[]{"org.junit.", "junit.", "org.easymock.",
+    private final String[] packagesToLoadButNotModify = new String[]{"org.junit.", "junit.", "org.testng.",
+            "org.easymock.",
             "net.sf.cglib.", "javassist.",
             "org.powermock.modules.junit4.internal.", "org.powermock.modules.junit4.legacy.internal.",
             "org.powermock.modules.junit3.internal.",
@@ -79,7 +80,7 @@ public class MockClassLoader extends DeferSupportingClassLoader {
      * specifies in annotations etc.
      */
     private static final String[] packagesToBeDeferred = new String[]{"org.hamcrest.*", "java.*",
-            "javax.accessibility.*", "sun.*", "org.junit.*",
+            "javax.accessibility.*", "sun.*", "org.junit.*", "org.testng.*",
             "junit.*", "org.pitest.*", "org.powermock.modules.junit4.common.internal.*",
             "org.powermock.modules.junit3.internal.PowerMockJUnit3RunnerDelegate*",
             "org.powermock.core*", "org.jacoco.agent.rt.*"};

File: modules/module-impl/agent/src/main/java/org/powermock/modules/agent/AbstractClassTransformer.java
Patch:
@@ -30,6 +30,7 @@ public abstract class AbstractClassTransformer {
     static {
         ALWAYS_IGNORED.add("org.powermock.*");
         ALWAYS_IGNORED.add("org.junit.*");
+        ALWAYS_IGNORED.add("org.testng.*");
         ALWAYS_IGNORED.add("org.mockito.*");
         ALWAYS_IGNORED.add("javassist.*");
         ALWAYS_IGNORED.add("org.objenesis.*");

File: modules/module-impl/agent/src/main/java/org/powermock/modules/agent/AbstractClassTransformer.java
Patch:
@@ -30,6 +30,7 @@ public abstract class AbstractClassTransformer {
     static {
         ALWAYS_IGNORED.add("org.powermock.*");
         ALWAYS_IGNORED.add("org.junit.*");
+        ALWAYS_IGNORED.add("org.testng.*");
         ALWAYS_IGNORED.add("org.mockito.*");
         ALWAYS_IGNORED.add("javassist.*");
         ALWAYS_IGNORED.add("org.objenesis.*");

File: modules/module-test/easymock/junit4-test/src/test/java/samples/junit4/suppressfield/SuppressFieldTest.java
Patch:
@@ -26,14 +26,14 @@ public void assertThatSpecificStaticFinalFieldSuppressionWorks() throws Exceptio
 		assertNull(SuppressField.getMyObject());
 	}
 
-	@Ignore("Final primitive types doesn't work, see issue at http://code.google.com/p/powermock/issues/detail?id=85")
+	@Ignore("Final primitive types doesn't work, see issue at https://github.com/jayway/powermock/issues/105")
 	@Test
 	public void assertThatSpecificStaticFinalPrimitiveFieldSuppressionWorks() throws Exception {
 		suppress(field(SuppressField.class, "MY_VALUE"));
 		assertEquals(0, SuppressField.getMyValue());
 	}
 
-	@Ignore("Final primitive types doesn't work, see issue at http://code.google.com/p/powermock/issues/detail?id=85")
+	@Ignore("Final primitive types doesn't work, see issue at https://github.com/jayway/powermock/issues/105")
 	@Test
 	public void assertThatSpecificInstanceFinalPrimitiveFieldSuppressionWorks() throws Exception {
 		suppress(field(SuppressField.class, "myBoolean"));

File: modules/module-impl/junit4/src/main/java/org/powermock/modules/junit4/internal/impl/PowerMockJUnit49RunnerDelegateImpl.java
Patch:
@@ -57,7 +57,7 @@ protected PowerMockJUnit49MethodRunner( Object testInstance,
 
         @Override
         protected Statement applyRuleToLastStatement(final Method method, final Object testInstance, Field field,
-                final LastRuleTestExecutorStatement lastStatement) throws IllegalAccessException {
+                final Statement lastStatement) throws IllegalAccessException {
             final Object fieldValue = field.get(testInstance);
             final Statement statement;
             if (fieldValue instanceof MethodRule) {

File: modules/module-impl/junit4/src/main/java/org/powermock/modules/junit4/internal/impl/PowerMockJUnit49RunnerDelegateImpl.java
Patch:
@@ -57,7 +57,7 @@ protected PowerMockJUnit49MethodRunner( Object testInstance,
 
         @Override
         protected Statement applyRuleToLastStatement(final Method method, final Object testInstance, Field field,
-                final LastRuleTestExecutorStatement lastStatement) throws IllegalAccessException {
+                final Statement lastStatement) throws IllegalAccessException {
             final Object fieldValue = field.get(testInstance);
             final Statement statement;
             if (fieldValue instanceof MethodRule) {

File: api/easymock/src/main/java/org/powermock/api/easymock/PowerMock.java
Patch:
@@ -1901,6 +1901,7 @@ private static <T> T doMock(Class<T> type, boolean isStatic, MockStrategy mockSt
          * Clear the EasyMock state after the test method is executed.
          */
         MockRepository.addAfterMethodRunner(new Runnable() {
+            @Override
             public void run() {
                 LastControl.reportLastControl(null);
             }
@@ -2078,6 +2079,7 @@ private static boolean isNiceReplayAndVerifyMode() {
      */
     private static class EasyMockStateCleaner implements Runnable {
 
+        @Override
         public void run() {
             LastControl.reportLastControl(null);
             clearStateFromOtherClassLoaders();

File: api/easymock/src/main/java/org/powermock/api/easymock/internal/mockstrategy/impl/AbstractMockStrategyBase.java
Patch:
@@ -20,6 +20,7 @@ public AbstractMockStrategyBase(MockType mockType) {
 		this.mockType = mockType;
 	}
 
+	@Override
 	public IMocksControl createMockControl(Class<?> type) {
 		return new MocksControl(mockType);
 	}

File: api/easymock/src/main/java/org/powermock/api/easymock/mockpolicies/AbstractEasyMockLogPolicyBase.java
Patch:
@@ -33,13 +33,15 @@ abstract class AbstractEasyMockLogPolicyBase implements PowerMockPolicy {
 	/**
 	 * {@inheritDoc}
 	 */
+	@Override
 	public void applyClassLoadingPolicy(MockPolicyClassLoadingSettings settings) {
 		settings.addFullyQualifiedNamesOfClassesToLoadByMockClassloader(getFullyQualifiedNamesOfClassesToLoadByMockClassloader());
 	}
 
 	/**
 	 * {@inheritDoc}
 	 */
+	@Override
 	public void applyInterceptionPolicy(MockPolicyInterceptionSettings settings) {
 		LogPolicySupport support = new LogPolicySupport();
 

File: api/easymock/src/main/java/org/powermock/api/easymock/mockpolicies/Log4jMockPolicy.java
Patch:
@@ -35,6 +35,7 @@ public class Log4jMockPolicy extends AbstractEasyMockLogPolicyBase {
 	/**
 	 * Loads all log4j classes with the mock classloader.
 	 */
+	@Override
 	protected String[] getFullyQualifiedNamesOfClassesToLoadByMockClassloader() {
 		return new String[] { "org.apache.log4j.*" };
 	}

File: api/easymock/src/main/java/org/powermock/api/easymock/mockpolicies/Slf4jMockPolicy.java
Patch:
@@ -31,6 +31,7 @@
  */
 public class Slf4jMockPolicy extends AbstractEasyMockLogPolicyBase {
 
+	@Override
 	protected String[] getFullyQualifiedNamesOfClassesToLoadByMockClassloader() {
 		return new String[] { "org.apache.log4j.Appender", "org.slf4j.LoggerFactory", "org.apache.log4j.xml.DOMConfigurator" };
 	}

File: api/easymock/src/main/java/org/powermock/api/extension/proxyframework/ProxyFrameworkImpl.java
Patch:
@@ -11,6 +11,7 @@ public class ProxyFrameworkImpl implements ProxyFramework {
     /**
      * {@inheritDoc}
      */
+    @Override
     public Class<?> getUnproxiedType(Class<?> type) {
         Class<?> currentType = type;
         while (isProxy(currentType)) {
@@ -22,6 +23,7 @@ public Class<?> getUnproxiedType(Class<?> type) {
     /**
      * {@inheritDoc}
      */
+    @Override
     public boolean isProxy(Class<?> type) {
         if (type == null) {
             return false;

File: api/mockito/src/main/java/org/powermock/api/extension/listener/AnnotationEnabler.java
Patch:
@@ -111,6 +111,7 @@ private void standardInject(Object testInstance) throws IllegalAccessException {
     }
 
     @SuppressWarnings("unchecked")
+    @Override
     public Class<? extends Annotation>[] getMockAnnotations() {
         return new Class[]{org.mockito.Mock.class, Mock.class, org.powermock.core.classloader.annotations.Mock.class};
     }

File: api/mockito/src/main/java/org/powermock/api/extension/proxyframework/ProxyFrameworkImpl.java
Patch:
@@ -27,6 +27,7 @@ public class ProxyFrameworkImpl implements ProxyFramework {
     /**
      * {@inheritDoc}
      */
+    @Override
     public Class<?> getUnproxiedType(Class<?> type) {
         Class<?> currentType = type;
         while (isProxy(currentType)) {
@@ -43,6 +44,7 @@ public Class<?> getUnproxiedType(Class<?> type) {
     /**
      * {@inheritDoc}
      */
+    @Override
     public boolean isProxy(Class<?> type) {
         if (type == null) {
             return false;

File: api/mockito/src/main/java/org/powermock/api/mockito/internal/expectation/ConstructorAwareExpectationSetup.java
Patch:
@@ -31,10 +31,12 @@ public ConstructorAwareExpectationSetup(Constructor<T> ctor) {
 		this.ctor = ctor;
 	}
 
+	@Override
 	public OngoingStubbing<T> withArguments(Object firstArgument, Object... additionalArguments) throws Exception {
 		return setupExpectation().withArguments(firstArgument, additionalArguments);
 	}
 
+	@Override
 	public OngoingStubbing<T> withNoArguments() throws Exception {
 		return setupExpectation().withNoArguments();
 	}

File: api/mockito/src/main/java/org/powermock/api/mockito/internal/expectation/DefaultMethodExpectationSetup.java
Patch:
@@ -39,6 +39,7 @@ public DefaultMethodExpectationSetup(Object object, Method method) {
     }
 
     @SuppressWarnings("unchecked")
+    @Override
     public OngoingStubbing<T> withArguments(Object firstArgument, Object... additionalArguments) throws Exception {
         if (additionalArguments == null || additionalArguments.length == 0) {
             return (OngoingStubbing<T>) Mockito.when(method.invoke(object, firstArgument));
@@ -48,6 +49,7 @@ public OngoingStubbing<T> withArguments(Object firstArgument, Object... addition
     }
 
     @SuppressWarnings("unchecked")
+    @Override
     public OngoingStubbing<T> withNoArguments() throws Exception {
         return (OngoingStubbing<T>) Mockito.when(method.invoke(object));
     }

File: api/mockito/src/main/java/org/powermock/api/mockito/internal/expectation/DefaultPrivatelyExpectedArguments.java
Patch:
@@ -30,6 +30,7 @@ public DefaultPrivatelyExpectedArguments(Object mock, Method method) {
         method.setAccessible(true);
     }
 
+    @Override
     public <T> void withArguments(Object firstArgument, Object... additionalArguments) throws Exception {
         if (additionalArguments == null || additionalArguments.length == 0) {
             method.invoke(mock, firstArgument);
@@ -43,6 +44,7 @@ public <T> void withArguments(Object firstArgument, Object... additionalArgument
         }
     }
 
+    @Override
     public <T> void withNoArguments() throws Exception {
         method.invoke(mock);
     }

File: api/mockito/src/main/java/org/powermock/api/mockito/internal/verification/DefaultConstructorArgumentsVerfication.java
Patch:
@@ -32,6 +32,7 @@ public DefaultConstructorArgumentsVerfication(NewInvocationControl<T> invocation
         this.invocationControl = (MockitoNewInvocationControl<T>) invocationControl;
     }
 
+    @Override
     public void withArguments(Object argument, Object... arguments) throws Exception {
         final Object[] realArguments;
         if (arguments == null) {
@@ -52,6 +53,7 @@ private void invokeSubstitute(Object... arguments) throws Exception {
         }
     }
 
+    @Override
     public void withNoArguments() throws Exception {
         invokeSubstitute(new Object[0]);
     }

File: api/mockito/src/main/java/org/powermock/api/mockito/mockpolicies/Slf4jMockPolicy.java
Patch:
@@ -44,13 +44,15 @@ public class Slf4jMockPolicy implements PowerMockPolicy {
 
     private static ThreadLocal<Object> threadLogger = new ThreadLocal<Object>();
 
+    @Override
     public void applyClassLoadingPolicy(MockPolicyClassLoadingSettings mockPolicyClassLoadingSettings) {
         mockPolicyClassLoadingSettings.addFullyQualifiedNamesOfClassesToLoadByMockClassloader(
                 LOGGER_FACTORY_CLASS_NAME,
                 "org.apache.log4j.Appender",
                 "org.apache.log4j.xml.DOMConfigurator");
     }
 
+    @Override
     public void applyInterceptionPolicy(MockPolicyInterceptionSettings mockPolicyInterceptionSettings) {
         LogPolicySupport logPolicySupport = new LogPolicySupport();
 

File: api/mockito/src/main/java/org/powermock/api/mockito/repackaged/CglibMockMaker.java
Patch:
@@ -18,6 +18,7 @@
  */
 public class CglibMockMaker implements MockMaker {
 
+    @Override
     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
         InternalMockHandler mockitoHandler = cast(handler);
         new AcrossJVMSerializationFeature().enableSerializationAcrossJVM(settings);
@@ -33,10 +34,12 @@ private InternalMockHandler cast(MockHandler handler) {
         return (InternalMockHandler) handler;
     }
 
+    @Override
     public void resetMock(Object mock, MockHandler newHandler, MockCreationSettings settings) {
         ((Factory) mock).setCallback(0, new MethodInterceptorFilter(cast(newHandler), settings));
     }
 
+    @Override
     public MockHandler getHandler(Object mock) {
         if (!(mock instanceof Factory)) {
             return null;

File: api/mockito/src/main/java/org/powermock/api/mockito/repackaged/ClassImposterizer.java
Patch:
@@ -40,6 +40,7 @@ public String getClassName(String prefix, String source, Object key, Predicate n
     };
 
     private static final CallbackFilter IGNORE_BRIDGE_METHODS = new CallbackFilter() {
+        @Override
         public int accept(Method method) {
             return method.isBridge() ? 1 : 0;
         }

File: api/mockito/src/main/java/org/powermock/api/mockito/repackaged/DelegatingMockitoMethodProxy.java
Patch:
@@ -15,6 +15,7 @@ public DelegatingMockitoMethodProxy(MethodProxy methodProxy) {
         this.methodProxy = methodProxy;
     }
 
+    @Override
     public Object invokeSuper(Object target, Object[] arguments) throws Throwable {
         return methodProxy.invokeSuper(target, arguments);
     }

File: api/mockito/src/main/java/org/powermock/api/mockito/repackaged/MethodInterceptorFilter.java
Patch:
@@ -39,6 +39,7 @@ public MethodInterceptorFilter(InternalMockHandler handler, MockCreationSettings
         this.mockSettings = mockSettings;
     }
 
+    @Override
     public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy)
             throws Throwable {
         if (objectMethodsGuru.isEqualsMethod(method)) {

File: api/mockito/src/main/java/org/powermock/api/mockito/repackaged/SerializableMockitoMethodProxy.java
Patch:
@@ -38,6 +38,7 @@ private MethodProxy getMethodProxy() {
         return methodProxy;
     }
 
+    @Override
     public Object invokeSuper(Object target, Object[] arguments) throws Throwable {
         return getMethodProxy().invokeSuper(target, arguments);
     }

File: api/support/src/main/java/org/powermock/api/support/membermodification/strategy/impl/MethodReplaceStrategyImpl.java
Patch:
@@ -34,6 +34,7 @@ public MethodReplaceStrategyImpl(Method method) {
         this.method = method;
     }
 
+    @Override
     public void with(Method method) {
         if (method == null) {
             throw new IllegalArgumentException("A metod cannot be replaced with null.");
@@ -51,6 +52,7 @@ public void with(Method method) {
         }
     }
 
+    @Override
     public void with(InvocationHandler invocationHandler) {
         if (invocationHandler == null) {
             throw new IllegalArgumentException("Invocation handler cannot be null");
@@ -65,6 +67,7 @@ public MethodInvocationHandler(Method methodDelegator) {
             this.methodDelegator = methodDelegator;
         }
 
+        @Override
         public Object invoke(Object object, Method invokingMethod, Object[] arguments) throws Throwable {
             return methodDelegator.invoke(object, arguments);
         }

File: classloading/classloading-objenesis/src/main/java/org/powermock/classloading/DeepCloner.java
Patch:
@@ -65,6 +65,7 @@ private Class<DoNotClone> getDoNotClone(ClassLoader targetCL) {
 	 * 
 	 * @return A deep clone of the object to clone.
 	 */
+	@Override
 	public <T> T clone(T objectToClone) {
 		return clone(objectToClone, true);
 	}

File: core/src/main/java/org/powermock/core/classloader/MockClassLoader.java
Patch:
@@ -172,6 +172,7 @@ public final void addClassesToModify(String... classes) {
         }
     }
 
+    @Override
     protected Class<?> loadModifiedClass(String s) throws ClassFormatError, ClassNotFoundException {
         Class<?> loadedClass;
 

File: core/src/main/java/org/powermock/core/spi/testresult/impl/TestMethodResultImpl.java
Patch:
@@ -27,6 +27,7 @@ public TestMethodResultImpl(Result result) {
 		this.result = result;
 	}
 
+	@Override
 	public Result getResult() {
 		return result;
 	}

File: core/src/main/java/org/powermock/tests/utils/impl/AbstractTestClassExtractor.java
Patch:
@@ -31,6 +31,7 @@ public abstract class AbstractTestClassExtractor implements TestClassesExtractor
 	 * and extracts classes that should be prepared for test in all super
 	 * classes.
 	 */
+	@Override
 	public final String[] getTestClasses(AnnotatedElement element) {
 		final Set<String> classesToPrepareForTest = new HashSet<String>();
 		if (element instanceof Class<?>) {
@@ -70,6 +71,7 @@ private void extractClassesAndAddThemToList(AnnotatedElement elementToExtractCla
 	 */
 	protected abstract String[] getClassesToModify(AnnotatedElement element);
 
+	@Override
 	public boolean isPrepared(AnnotatedElement element, String fullyQualifiedClassName) {
 		if (fullyQualifiedClassName == null) {
 			throw new IllegalArgumentException("fullyQualifiedClassName cannot be null.");

File: core/src/main/java/org/powermock/tests/utils/impl/ArrayMergerImpl.java
Patch:
@@ -25,6 +25,7 @@
 public class ArrayMergerImpl implements ArrayMerger {
 
 	@SuppressWarnings("unchecked")
+	@Override
 	public <T> T[] mergeArrays(Class<T> type, T[]... arraysToMerge) {
 		if (arraysToMerge == null || arraysToMerge.length == 0) {
 			return (T[]) Array.newInstance(type, 0);

File: core/src/main/java/org/powermock/tests/utils/impl/PowerMockIgnorePackagesExtractorImpl.java
Patch:
@@ -25,6 +25,7 @@
 
 public class PowerMockIgnorePackagesExtractorImpl implements IgnorePackagesExtractor {
 
+    @Override
     public String[] getPackagesToIgnore(AnnotatedElement element) {
         List<String> ignoredPackages = new LinkedList<String>();
         PowerMockIgnore annotation = element.getAnnotation(PowerMockIgnore.class);

File: core/src/main/java/org/powermock/tests/utils/impl/TestChunkImpl.java
Patch:
@@ -37,13 +37,15 @@ public TestChunkImpl(ClassLoader classLoader, List<Method> testMethodsToBeExecut
 	/**
 	 * {@inheritDoc}
 	 */
+	@Override
 	public ClassLoader getClassLoader() {
 		return classLoader;
 	}
 
 	/**
 	 * {@inheritDoc}
 	 */
+	@Override
 	public List<Method> getTestMethodsToBeExecutedByThisClassloader() {
 		return testMethodsToBeExecutedByThisClassloader;
 	}

File: examples/AbstractFactory/src/main/java/powermock/examples/service/impl/MyServiceImpl.java
Patch:
@@ -26,6 +26,7 @@ public class MyServiceImpl implements MyService {
 	/**
 	 * {@inheritDoc}
 	 */
+	@Override
 	public Set<Person> getAllPersons() {
 		return new HashSet<Person>();
 	}

File: examples/DocumentationExamples/src/main/java/powermock/examples/mockpolicy/policy/MyCustomMockPolicy.java
Patch:
@@ -34,6 +34,7 @@ public class MyCustomMockPolicy implements PowerMockPolicy {
 	 * Add the {@link Dependency} to the list of classes that should be loaded
 	 * by the mock class-loader.
 	 */
+	@Override
 	public void applyClassLoadingPolicy(MockPolicyClassLoadingSettings settings) {
 		settings.addFullyQualifiedNamesOfClassesToLoadByMockClassloader(Dependency.class.getName());
 	}
@@ -42,6 +43,7 @@ public void applyClassLoadingPolicy(MockPolicyClassLoadingSettings settings) {
 	 * Every time the {@link Dependency#getData()} method is invoked we return a
 	 * custom instance of a {@link DataObject}.
 	 */
+	@Override
 	public void applyInterceptionPolicy(MockPolicyInterceptionSettings settings) {
 		final Method getDataMethod = Whitebox.getMethod(Dependency.class);
 		final DataObject dataObject = new DataObject("Policy generated data object");

File: examples/tutorial/src/main/java/demo/org/powermock/examples/tutorial/domainmocking/impl/SampleServiceImpl.java
Patch:
@@ -50,6 +50,7 @@ public SampleServiceImpl(PersonService personService, EventService eventService)
 	/**
 	 * {@inheritDoc}
 	 */
+	@Override
 	public boolean createPerson(String firstName, String lastName) {
 		BusinessMessages messages = new BusinessMessages();
 		Person person = null;

File: examples/tutorial/src/main/java/demo/org/powermock/examples/tutorial/partialmocking/dao/domain/impl/ConnectionImpl.java
Patch:
@@ -19,10 +19,12 @@
 
 public class ConnectionImpl implements Connection {
 
+	@Override
 	public void disconnect() {
 		System.out.println("Disconnecting...");
 	}
 
+	@Override
 	public void send(byte[] data) {
 		System.out.println("Sending data of " + data.length + " bytes.");
 	}

File: examples/tutorial/src/main/java/demo/org/powermock/examples/tutorial/partialmocking/service/impl/ProviderServiceImpl.java
Patch:
@@ -40,6 +40,7 @@ public class ProviderServiceImpl implements ProviderService {
 	/**
 	 * {@inheritDoc}
 	 */
+	@Override
 	public Set<ServiceProducer> getAllServiceProviders() {
 		final Set<ServiceProducer> serviceProducers = getAllServiceProducers();
 		if (serviceProducers == null) {
@@ -51,6 +52,7 @@ public Set<ServiceProducer> getAllServiceProviders() {
 	/**
 	 * {@inheritDoc}
 	 */
+	@Override
 	public ServiceProducer getServiceProvider(int id) {
 		Set<ServiceProducer> allServiceProducers = getAllServiceProducers();
 		for (ServiceProducer serviceProducer : allServiceProducers) {

File: examples/tutorial/src/main/java/demo/org/powermock/examples/tutorial/partialmocking/service/impl/withoutpowermock/ProviderServiceWithoutPowerMockImpl.java
Patch:
@@ -54,6 +54,7 @@ public ProviderServiceWithoutPowerMockImpl(ProviderDao providerDao) {
 	/**
 	 * {@inheritDoc}
 	 */
+	@Override
 	public Set<ServiceProducer> getAllServiceProviders() {
 		final Set<ServiceProducer> serviceProducers = getAllServiceProducers();
 		if (serviceProducers == null) {
@@ -65,6 +66,7 @@ public Set<ServiceProducer> getAllServiceProviders() {
 	/**
 	 * {@inheritDoc}
 	 */
+	@Override
 	public ServiceProducer getServiceProvider(int id) {
 		Set<ServiceProducer> allServiceProducers = getAllServiceProducers();
 		for (ServiceProducer serviceProducer : allServiceProducers) {

File: examples/tutorial/src/main/java/demo/org/powermock/examples/tutorial/staticmocking/impl/ServiceRegistrator.java
Patch:
@@ -50,6 +50,7 @@ public ServiceRegistrator() {
 	/**
 	 * {@inheritDoc}
 	 */
+	@Override
 	public long registerService(String name, Object serviceImplementation) {
 		ServiceRegistration registerService = bundleContext.registerService(name, serviceImplementation, null);
 		final long id = IdGenerator.generateNewId();
@@ -60,6 +61,7 @@ public long registerService(String name, Object serviceImplementation) {
 	/**
 	 * {@inheritDoc}
 	 */
+	@Override
 	public void unregisterService(long id) {
 		final ServiceRegistration registration = serviceRegistrations.remove(id);
 		if (registration == null) {

File: examples/tutorial/src/main/java/demo/org/powermock/examples/tutorial/staticmocking/impl/withoutpowermock/ServiceRegistratorWithoutPowerMock.java
Patch:
@@ -50,6 +50,7 @@ public ServiceRegistratorWithoutPowerMock() {
 	/**
 	 * {@inheritDoc}
 	 */
+	@Override
 	public long registerService(String name, Object serviceImplementation) {
 		ServiceRegistration registerService = bundleContext.registerService(name, serviceImplementation, null);
 		final long id = generateId();
@@ -67,6 +68,7 @@ protected long generateId() {
 	/**
 	 * {@inheritDoc}
 	 */
+	@Override
 	public void unregisterService(long id) {
 		final ServiceRegistration registration = serviceRegistrations.remove(id);
 		if (registration == null) {

File: modules/module-impl/agent/src/main/java/com/sun/tools/attach/VirtualMachine.java
Patch:
@@ -476,6 +476,7 @@ public void loadAgent(String agent)
     *
     * @return A hash-code value for this virtual machine
     */
+   @Override
    public int hashCode()
    {
       if (hash != 0) {
@@ -502,6 +503,7 @@ public int hashCode()
     *         a VirtualMachine that is equal to this
     *         VirtualMachine.
     */
+   @Override
    public boolean equals(Object ob)
    {
       if (ob == this) {
@@ -520,6 +522,7 @@ public boolean equals(Object ob)
    /**
     * Returns the string representation of the <code>VirtualMachine</code>.
     */
+   @Override
    public String toString()
    {
       return provider.toString() + ": " + id;

File: modules/module-impl/agent/src/main/java/com/sun/tools/attach/VirtualMachineDescriptor.java
Patch:
@@ -150,6 +150,7 @@ public String displayName()
     *
     * @return A hash-code value for this descriptor.
     */
+   @Override
    public int hashCode()
    {
       if (hash != 0) {
@@ -176,6 +177,7 @@ public int hashCode()
     *         a VirtualMachineDescriptor that is equal to this
     *         VirtualMachineDescriptor.
     */
+   @Override
    public boolean equals(Object ob)
    {
       if (ob == this)
@@ -195,6 +197,7 @@ public boolean equals(Object ob)
    /**
     * Returns the string representation of the <code>VirtualMachineDescriptor</code>.
     */
+   @Override
    public String toString()
    {
       String s = provider.toString() + ": " + id;

File: modules/module-impl/agent/src/main/java/org/powermock/objectweb/asm/FieldWriter.java
Patch:
@@ -134,6 +134,7 @@ final class FieldWriter implements FieldVisitor {
     // Implementation of the FieldVisitor interface
     // ------------------------------------------------------------------------
 
+    @Override
     public AnnotationVisitor visitAnnotation(
         final String desc,
         final boolean visible)
@@ -155,11 +156,13 @@ public AnnotationVisitor visitAnnotation(
         return aw;
     }
 
+    @Override
     public void visitAttribute(final Attribute attr) {
         attr.next = attrs;
         attrs = attr;
     }
 
+    @Override
     public void visitEnd() {
     }
 

File: modules/module-impl/agent/src/main/java/org/powermock/objectweb/asm/Label.java
Patch:
@@ -548,6 +548,7 @@ void visitSubroutine(final Label JSR, final long id, final int nbSubroutines)
      * 
      * @return a string representation of this label.
      */
+    @Override
     public String toString() {
         return "L" + System.identityHashCode(this);
     }

File: modules/module-impl/agent/src/main/java/org/powermock/objectweb/asm/Type.java
Patch:
@@ -722,6 +722,7 @@ public int getOpcode(final int opcode) {
      * @param o the object to be compared to this type.
      * @return <tt>true</tt> if the given object is equal to this type.
      */
+    @Override
     public boolean equals(final Object o) {
         if (this == o) {
             return true;
@@ -751,6 +752,7 @@ public boolean equals(final Object o) {
      * 
      * @return a hash code value for this type.
      */
+    @Override
     public int hashCode() {
         int hc = 13 * sort;
         if (sort == OBJECT || sort == ARRAY) {
@@ -766,6 +768,7 @@ public int hashCode() {
      * 
      * @return the descriptor of this type.
      */
+    @Override
     public String toString() {
         return getDescriptor();
     }

File: modules/module-impl/junit3/src/main/java/org/powermock/modules/junit3/internal/impl/PowerMockJUnit3RunnerDelegateImpl.java
Patch:
@@ -99,6 +99,7 @@ public PowerMockJUnit3RunnerDelegateImpl(final Class<?> theClass, Method[] metho
         }
     }
 
+    @Override
     public Class<?> getTestClass() {
         return testClass;
     }
@@ -121,6 +122,7 @@ public void run(TestResult result) {
      */
     private static Test warning(final String message) {
         return new TestCase("warning") {
+            @Override
             protected void runTest() {
                 fail(message);
             }

File: modules/module-impl/junit4-common/src/main/java/org/powermock/modules/junit4/common/internal/impl/AbstractCommonPowerMockRunner.java
Patch:
@@ -62,10 +62,12 @@ public synchronized int testCount() {
         return suiteChunker.getTestCount();
     }
 
+    @Override
     public void filter(Filter filter) throws NoTestsRemainException {
         suiteChunker.filter(filter);
     }
 
+    @Override
     public void sort(Sorter sorter) {
         suiteChunker.sort(sorter);
     }

File: modules/module-impl/junit4-common/src/main/java/org/powermock/modules/junit4/common/internal/impl/VersionComparator.java
Patch:
@@ -26,6 +26,7 @@ public boolean equals(Object o1, Object o2) {
         return compare(o1, o2) == 0;
     }
 
+    @Override
     public int compare(Object o1, Object o2) {
         String version1 = (String) o1;
         String version2 = (String) o2;

File: modules/module-impl/junit4-rule-agent/src/main/java/org/powermock/modules/junit4/rule/PowerMockRule.java
Patch:
@@ -37,6 +37,7 @@ public class PowerMockRule implements MethodRule {
         PowerMockAgent.initializeIfPossible();
     }
 
+    @Override
     public Statement apply(Statement base, FrameworkMethod method, Object target) {
         PowerMockAgentTestInitializer.initialize(target.getClass());
 

File: modules/module-impl/junit4/src/main/java/org/powermock/modules/junit4/internal/impl/DelegatingPowerMockRunner.java
Patch:
@@ -94,6 +94,7 @@ private static Runner createDelegate(final Class<?> testClass)
          */
         return withContextClassLoader(testClass.getClassLoader(),
                 new Callable<Runner>() {
+            @Override
             public Runner call() throws Exception {
                 try {
                     return Whitebox.invokeConstructor(
@@ -137,6 +138,7 @@ private static <T> T withContextClassLoader(
     public void run(final RunNotifier notifier) {
         try {
             withContextClassLoader(testClassLoader, new Callable<Void>() {
+                @Override
                 public Void call() {
                     PowerMockRunNotifier powerNotifier = new PowerMockRunNotifier(
                             notifier, powerMockTestNotifier, testMethods);

File: modules/module-impl/junit4/src/main/java/org/powermock/modules/junit4/internal/impl/NotificationBuilder.java
Patch:
@@ -121,6 +121,7 @@ void report(Result result) {
                     testInstance, testMethod, unsupportedMethodArgs, this);
         }
 
+        @Override
         public Result getResult() {
             return this.result;
         }

File: modules/module-impl/junit4/src/main/java/org/powermock/modules/junit4/internal/impl/PowerMockRunNotifier.java
Patch:
@@ -70,11 +70,13 @@ Class<?> getSuiteClass() {
         return this.suiteClass;
     }
 
+    @Override
     public void suiteClassInitiated(Class<?> testClass) {
         this.suiteClass = testClass;
         notificationBuilder.get().testSuiteStarted(testClass);
     }
 
+    @Override
     public void testInstanceCreated(Object testInstance) {
         if (Thread.currentThread() == motherThread) {
             pendingTestInstancesOnMotherThread.add(testInstance);

File: modules/module-impl/testng-agent/src/main/java/org/powermock/modules/testng/PowerMockObjectFactory.java
Patch:
@@ -36,6 +36,7 @@ public class PowerMockObjectFactory implements IObjectFactory {
 
     private ObjectFactoryImpl defaultObjectFactory = new ObjectFactoryImpl();
 
+    @Override
     public Object newInstance(Constructor constructor, Object... params) {
         final Class<?> testClass = constructor.getDeclaringClass();
         PowerMockAgentTestInitializer.initialize(testClass);

File: modules/module-impl/testng/src/main/java/org/powermock/modules/testng/PowerMockObjectFactory.java
Patch:
@@ -35,6 +35,7 @@ public class PowerMockObjectFactory implements IObjectFactory {
 
     private ObjectFactoryImpl defaultObjectFactory = new ObjectFactoryImpl();
 
+    @Override
     public Object newInstance(Constructor constructor, Object... params) {
         final Object testInstance;
         Class<?> testClass = constructor.getDeclaringClass();

File: modules/module-impl/testng/src/main/java/org/powermock/modules/testng/internal/PowerMockClassloaderObjectFactory.java
Patch:
@@ -63,6 +63,7 @@ public PowerMockClassloaderObjectFactory() {
                 staticConstructorSuppressExtractor = new StaticConstructorSuppressExtractorImpl();
 	}
 
+	@Override
 	public Object newInstance(@SuppressWarnings("rawtypes") Constructor constructor, Object... params) {
 		/*
 		 * For extra safety clear the MockitoRepository on each new

File: modules/module-impl/testng/src/main/java/org/powermock/modules/testng/internal/PowerMockTestNGMethodHandler.java
Patch:
@@ -43,6 +43,7 @@ public PowerMockTestNGMethodHandler(Class<?> testClass) {
         }
     }
 
+    @Override
     public Object invoke(Object self, Method thisMethod, Method proceed, Object[] args) throws Throwable {
         injectMocksUsingAnnotationEnabler(self);
         try {

File: modules/module-impl/testng/src/main/java/org/powermock/modules/testng/internal/TestNGMethodFilter.java
Patch:
@@ -25,6 +25,7 @@
  * replayAll/verifyAll doesn't work as expected.
  */
 public class TestNGMethodFilter implements MethodFilter {
+    @Override
     public boolean isHandled(Method method) {
         return !isToString(method) && !isHashCode(method) && !isFinalize(method) && !isEquals(method);
     }

File: modules/module-test/easymock/junit4-test/src/test/java/samples/junit4/mockpolicy/MockPolicyUsageExampleTest.java
Patch:
@@ -45,10 +45,12 @@ public void exampleOfStubbingOutCallsInParentClass() throws Exception {
 }
 
 class MockPolicyExample implements PowerMockPolicy {
+	@Override
 	public void applyClassLoadingPolicy(MockPolicyClassLoadingSettings settings) {
 		settings.addFullyQualifiedNamesOfClassesToLoadByMockClassloader(ResultCalculator.class.getName());
 	}
 
+	@Override
 	public void applyInterceptionPolicy(MockPolicyInterceptionSettings settings) {
 		Method calculateMethod = Whitebox.getMethod(ResultCalculator.class);
 		settings.stubMethod(calculateMethod, 4);

File: modules/module-test/easymock/junit4-test/src/test/java/samples/junit4/mockpolicy/MockPolicyWithExpectationsTest.java
Patch:
@@ -49,10 +49,12 @@ public void mockPolicyWithExpectationsWorks() throws Exception {
 }
 
 class MockPolicyExpectationsExample implements PowerMockPolicy {
+	@Override
 	public void applyClassLoadingPolicy(MockPolicyClassLoadingSettings settings) {
 		settings.addFullyQualifiedNamesOfClassesToLoadByMockClassloader(ResultCalculator.class.getName());
 	}
 
+	@Override
 	public void applyInterceptionPolicy(MockPolicyInterceptionSettings settings) {
 		final ResultCalculator calculatorMock = createMock(ResultCalculator.class);
 		expect(calculatorMock.calculate()).andReturn(2.0);

File: modules/module-test/easymock/junit4-test/src/test/java/samples/junit4/mockpolicy/MockPolicyWithInvocationHandlerTest.java
Patch:
@@ -50,13 +50,16 @@ public void mockPolicyWithInvocationHandlerWorks() throws Exception {
 }
 
 class MockPolicyInvocationHandlerExample implements PowerMockPolicy {
+	@Override
 	public void applyClassLoadingPolicy(MockPolicyClassLoadingSettings settings) {
 		settings.addFullyQualifiedNamesOfClassesToLoadByMockClassloader(ResultCalculator.class.getName());
 	}
 
+	@Override
 	public void applyInterceptionPolicy(MockPolicyInterceptionSettings settings) {
 		settings.proxyMethod(method(ResultCalculator.class), new InvocationHandler() {
 
+			@Override
 			public Object invoke(Object object, Method method, Object[] args) throws Throwable {
 				final double result = (Double) method.invoke(object, args);
 				return result + 1.0;

File: modules/module-test/easymock/junit4-test/src/test/java/samples/junit4/mockpolicy/frameworkexample/SimpleFrameworkMockPolicy.java
Patch:
@@ -28,10 +28,12 @@ public class SimpleFrameworkMockPolicy implements PowerMockPolicy {
 
 	public static final String NATIVE_RESULT_VALUE = "result";
 
+	@Override
 	public void applyClassLoadingPolicy(MockPolicyClassLoadingSettings settings) {
 		settings.addStaticInitializersToSuppress("samples.mockpolicy.frameworkexample.SimpleFramework");
 	}
 
+	@Override
 	public void applyInterceptionPolicy(MockPolicyInterceptionSettings settings) {
 		final Method doNativeStuffMethod = Whitebox.getMethod(SimpleFramework.class, String.class);
 		NativeResult nativeResult = new NativeResult(NATIVE_RESULT_VALUE);

File: modules/module-test/easymock/junit4-test/src/test/java/samples/junit4/prepareeverything/ExpectNewDemoUsingThePrepareEverythingAnnotationTest.java
Patch:
@@ -478,6 +478,7 @@ public void testNewWithVarArgsConstructorWhenOneArgumentIsOfASubType() throws Ex
 
         final Service serviceSubTypeInstance = new Service() {
 
+            @Override
             public String getServiceMessage() {
                 return "message";
             }

File: modules/module-test/easymock/junit410-test/src/test/java/samples/junit410/expectnew/ExpectNewDemoTest.java
Patch:
@@ -479,6 +479,7 @@ public void testNewWithVarArgsConstructorWhenOneArgumentIsOfASubType() throws Ex
 
         final Service serviceSubTypeInstance = new Service() {
 
+            @Override
             public String getServiceMessage() {
                 return "message";
             }

File: modules/module-test/easymock/junit410-test/src/test/java/samples/junit410/rules/impl/SimpleEasyMockJUnitRule.java
Patch:
@@ -51,6 +51,7 @@ public void verify() {
         control.verify();
     }
 
+    @Override
     public Statement apply(final Statement base, final FrameworkMethod method, final Object target) {
         return new Statement() {
 

File: modules/module-test/easymock/junit47-test/src/test/java/samples/junit4/rules/AssertThatJUnit47RulesWorks.java
Patch:
@@ -53,6 +53,7 @@ public void assertThatJUnit47RulesWorks() throws Exception {
 	}
 
 	private class MyRule implements MethodRule {
+		@Override
 		public Statement apply(final Statement base, FrameworkMethod method, Object target) {
 			return new Statement() {
 				@Override

File: modules/module-test/easymock/junit48-test/src/test/java/samples/junit48/rules/AssertThatJUnit48RulesWorks.java
Patch:
@@ -53,6 +53,7 @@ public void assertThatJUnit47RulesWorks() throws Exception {
 	}
 
 	private class MyRule implements MethodRule {
+		@Override
 		public Statement apply(final Statement base, FrameworkMethod method, Object target) {
 			return new Statement() {
 				@Override

File: modules/module-test/easymock/junit48-test/src/test/java/samples/junit48/rules/impl/SimpleEasyMockJUnitRule.java
Patch:
@@ -51,6 +51,7 @@ public void verify() {
         control.verify();
     }
 
+    @Override
     public Statement apply(final Statement base, final FrameworkMethod method, final Object target) {
         return new Statement() {
 

File: modules/module-test/mockito/junit4-agent/src/test/java/powermock/modules/test/mockito/junit4/agent/AssertPowerMockRuleDelagatesToOtherRulesTest.java
Patch:
@@ -57,6 +57,7 @@ public void assertPowerMockRuleDelegatesToOtherRules() throws Exception {
 	}
 
 	private class MyRule implements MethodRule {
+		@Override
 		public Statement apply(final Statement base, FrameworkMethod method, Object target) {
 			return new Statement() {
 				@Override

File: modules/module-test/mockito/junit4-agent/src/test/java/powermock/modules/test/mockito/junit4/agent/MemberModificationExampleTest.java
Patch:
@@ -176,6 +176,7 @@ public void suppressEverythingExample() throws Exception {
     }
 
     private final class ReturnValueChangingInvocationHandler implements InvocationHandler {
+        @Override
         public Object invoke(Object object, Method method, Object[] arguments) throws Throwable {
             if (arguments[0].equals("make it a string")) {
                 return "hello world";

File: modules/module-test/mockito/junit4-delegate/src/test/java/powermock/modules/test/mockito/junit4/delegate/SuppressedMethodStubbing.java
Patch:
@@ -34,6 +34,7 @@ public <T> void enforceOn(MethodStubStrategy<T> stub) {
                 @Override
                 public void verify(final Callable<?> invocation) throws Exception {
                     super.verify(new Callable<Exception>() {
+                        @Override
                         public Exception call() {
                             try {
                                 invocation.call();
@@ -66,6 +67,7 @@ public void verify(Callable<?> invocation) throws Exception {
         assertEquals(value, invocation.call());
     }
 
+    @Override
     public String toString() {
         return "returns " + value;
     }

File: modules/module-test/mockito/junit4-delegate/src/test/java/powermock/modules/test/mockito/junit4/delegate/parameterized/StubMethodTest.java
Patch:
@@ -50,6 +50,7 @@ public void test() throws Exception {
 
         final SuppressMethod tested = new SuppressMethod();
         Callable<?> methodInvocation = new Callable<Object>() {
+            @Override
             public Object call() {
                 return method.invokeOn(tested);
             }

File: modules/module-test/mockito/junit4-rule-objenesis/src/test/java/org/powermock/modules/test/junit4/rule/objenesis/PrivateInstanceMockingTest.java
Patch:
@@ -89,6 +89,7 @@ public void answersWorkWhenSpyingOnPrivateVoidMethods() throws Exception {
         when(tested, "doObjectInternal", isA(String.class)).thenAnswer(new Answer<Void>() {
             private static final long serialVersionUID = 20645008237481667L;
 
+            @Override
             public Void answer(InvocationOnMock invocation) throws Throwable {
                 assertEquals("Testing", invocation.getArguments()[0]);
                 return null;

File: modules/module-test/mockito/junit4-rule-xstream/src/test/java/org/powermock/modules/test/junit4/rule/xstream/WhenNewTest.java
Patch:
@@ -417,6 +417,7 @@ public void testNewWithVarArgsConstructorWhenOneArgumentIsOfASubType() throws Ex
 
 		final Service serviceSubTypeInstance = new Service() {
 
+			@Override
 			public String getServiceMessage() {
 				return "message";
 			}

File: modules/module-test/mockito/junit4/src/test/java/samples/powermockito/junit4/membermodification/MemberModificationExampleTest.java
Patch:
@@ -175,6 +175,7 @@ public void suppressEverythingExample() throws Exception {
     }
 
     private final class ReturnValueChangingInvocationHandler implements InvocationHandler {
+        @Override
         public Object invoke(Object object, Method method, Object[] arguments) throws Throwable {
             if (arguments[0].equals("make it a string")) {
                 return "hello world";

File: modules/module-test/mockito/junit4/src/test/java/samples/powermockito/junit4/partialmocking/StaticPartialMockingTest.java
Patch:
@@ -70,6 +70,7 @@ public void partialPrivateMockingWithAnswerOfStaticMethodReturningObjectWorks()
 
         assertTrue(Object.class.equals(StaticExample.objectMethod().getClass()));
         doAnswer(new Answer<String>() {
+            @Override
             public String answer(InvocationOnMock invocation) throws Throwable {
                 return "Hello static";
             }
@@ -190,6 +191,7 @@ public void partialMockingWithAnswerOfNonVoidPublicStaticMethodsWorks() throws E
         spy(StaticExample.class);
 
         doAnswer(new Answer<String>() {
+            @Override
             public String answer(InvocationOnMock invocation) throws Throwable {
                 return "something";
             }

File: modules/module-test/mockito/junit4/src/test/java/samples/powermockito/junit4/privatemocking/PrivateInstanceMockingTest.java
Patch:
@@ -126,6 +126,7 @@ public void answersWorkWhenSpyingOnPrivateVoidMethods() throws Exception {
         when(tested, "doObjectInternal", isA(String.class)).thenAnswer(new Answer<Void>() {
             private static final long serialVersionUID = 20645008237481667L;
 
+            @Override
             public Void answer(InvocationOnMock invocation) throws Throwable {
                 assertEquals("Testing", invocation.getArguments()[0]);
                 return null;

File: modules/module-test/mockito/junit4/src/test/java/samples/powermockito/junit4/proxymethod/ProxyMethodTest.java
Patch:
@@ -106,18 +106,21 @@ public void replaceStaticMethodsWork() throws Exception {
 	}
 
 	private final class ThrowingInvocationHandler implements InvocationHandler {
+		@Override
 		public Object invoke(Object object, Method method, Object[] arguments) throws Throwable {
 			throw new ArrayStoreException();
 		}
 	}
 
 	private final class ReturnValueChangingInvocationHandler implements InvocationHandler {
+		@Override
 		public Object invoke(Object object, Method method, Object[] arguments) throws Throwable {
 			return "hello world";
 		}
 	}
 
 	private final class DelegatingInvocationHandler implements InvocationHandler {
+		@Override
 		public Object invoke(Object object, Method method, Object[] arguments) throws Throwable {
 			return method.invoke(object, arguments);
 		}

File: modules/module-test/mockito/junit4/src/test/java/samples/powermockito/junit4/whennew/WhenNewTest.java
Patch:
@@ -414,6 +414,7 @@ public void testNewWithVarArgsConstructorWhenOneArgumentIsOfASubType() throws Ex
 
         final Service serviceSubTypeInstance = new Service() {
 
+            @Override
             public String getServiceMessage() {
                 return "message";
             }

File: modules/module-test/mockito/junit49/src/test/java/samples/powermockito/junit4/rules/JUnit49RuleTest.java
Patch:
@@ -64,6 +64,7 @@ public void assertThatJUnit47RulesWorks() throws Exception {
 
     private class MyRule implements TestRule {
 
+        @Override
         public Statement apply(final Statement statement, Description description) {
             return new Statement() {
                 @Override

File: reflect/src/main/java/org/powermock/reflect/internal/WhiteboxImpl.java
Patch:
@@ -208,6 +208,7 @@ public static <T> T newInstance(Class<T> classToInstantiate) {
         if (Modifier.isInterface(modifiers)) {
             object = Proxy.newProxyInstance(WhiteboxImpl.class.getClassLoader(), new Class<?>[]{classToInstantiate},
                     new InvocationHandler() {
+                        @Override
                         public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                             return TypeUtils.getDefaultValue(method.getReturnType());
                         }
@@ -961,6 +962,7 @@ public static Method getBestMethodCandidate(Class<?> cls, String methodName, Cla
                 * invoke.
                 */
             Arrays.sort(methods, new Comparator<Method>() {
+                @Override
                 public int compare(Method m1, Method m2) {
                     final Class<?>[] typesMethod1 = m1.getParameterTypes();
                     final Class<?>[] typesMethod2 = m2.getParameterTypes();
@@ -1491,6 +1493,7 @@ public static Method[] getAllMethods(Class<?> clazz) {
             final Class<?> type = thisType;
             final Method[] declaredMethods = AccessController.doPrivileged(new PrivilegedAction<Method[]>() {
 
+                @Override
                 public Method[] run() {
                     return type.getDeclaredMethods();
                 }

File: reflect/src/main/java/org/powermock/reflect/internal/matcherstrategies/FieldNameMatcherStrategy.java
Patch:
@@ -41,6 +41,7 @@ public void notFound(Class<?> type, boolean isInstanceField) throws FieldNotFoun
                 isInstanceField ? "instance" : "static", fieldName, type.getName()));
     }
 
+    @Override
     public String toString() {
         return "fieldName " + fieldName;
     }

File: tests/utils/src/main/java/samples/hashcode/HashCodeInitializedInCtor.java
Patch:
@@ -29,6 +29,7 @@ public static HashCodeInitializedInCtor newFaults() {
         return fault;
     }
 
+    @Override
     public final int hashCode() {
         return hash.hashCode();
     }

File: tests/utils/src/main/java/samples/rule/SimpleThingImpl.java
Patch:
@@ -18,6 +18,7 @@
 
 public class SimpleThingImpl implements SimpleThing {
 
+    @Override
     public String getThingName() {
         return null;
     }

File: tests/utils/src/main/java/samples/singleton/StaticService.java
Patch:
@@ -31,6 +31,7 @@ public class StaticService {
 
 	public static int getNumberFromInner() {
 		return new Callable<Integer>() {
+			@Override
 			public Integer call() {
 				return number;
 			}
@@ -43,6 +44,7 @@ public static int getNumberFromInnerInstance() {
 
 	public int internalGetNumberFromInnerInstance() {
 		return new Callable<Integer>() {
+			@Override
 			public Integer call() {
 				return secret;
 			}

File: core/src/main/java/org/powermock/core/classloader/MockClassLoader.java
Patch:
@@ -162,7 +162,7 @@ public MockClassLoader(String[] classesToMock) {
      *                to the list of classes that will be byte-code modified to
      *                enable testability.
      */
-    public void addClassesToModify(String... classes) {
+    public final void addClassesToModify(String... classes) {
         if (classes != null) {
             for (String clazz : classes) {
                 if (!shouldDefer(packagesToBeDeferred, clazz)) {

File: core/src/main/java/org/powermock/tests/utils/impl/AbstractTestSuiteChunkerImpl.java
Patch:
@@ -237,7 +237,7 @@ public MockClassLoader run() {
     /**
      * {@inheritDoc}
      */
-    public void createTestDelegators(Class<?> testClass, List<TestChunk> chunks) throws Exception {
+    public final void createTestDelegators(Class<?> testClass, List<TestChunk> chunks) throws Exception {
         for (TestChunk chunk : chunks) {
             ClassLoader classLoader = chunk.getClassLoader();
             List<Method> methodsToTest = chunk.getTestMethodsToBeExecutedByThisClassloader();

File: modules/module-impl/agent/src/main/java/org/powermock/objectweb/asm/ClassReader.java
Patch:
@@ -1884,7 +1884,7 @@ public int readByte(final int index) {
      * @param index the start index of the value to be read in {@link #b b}.
      * @return the read value.
      */
-    public int readUnsignedShort(final int index) {
+    public final int readUnsignedShort(final int index) {
         byte[] b = this.b;
         return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF);
     }

File: modules/module-impl/agent/src/main/java/org/powermock/objectweb/asm/MethodWriter.java
Patch:
@@ -956,7 +956,7 @@ public void visitJumpInsn(final int opcode, final Label label) {
         }
     }
 
-    public void visitLabel(final Label label) {
+    public final void visitLabel(final Label label) {
         // resolves previous forward references to label, if any
         resize |= label.resolve(this, code.length, code.data);
         // updates currentBlock

File: modules/module-impl/agent/src/main/java/sun/tools/attach/HotSpotVirtualMachine.java
Patch:
@@ -267,7 +267,7 @@ int readInt(InputStream in) throws IOException {
      * property, or the default timeout if the property is not set to a positive
      * value.
      */
-    long attachTimeout() {
+    final long attachTimeout() {
         if (attachTimeout == 0) {
             synchronized(this) {
                 if (attachTimeout == 0) {

File: modules/module-impl/junit4/src/main/java/org/powermock/modules/junit4/internal/impl/NotificationBuilder.java
Patch:
@@ -91,7 +91,7 @@ private class OngoingTestRun implements TestMethodResult {
             ongoingTestRuns.put(testDescription, this);            
         }
 
-        Class<?> testClass() {
+        final Class<?> testClass() {
             if (null == testClassName) {
                 return testInstance.getClass();
             } else {

File: modules/module-impl/junit4/src/main/java/org/powermock/modules/junit4/internal/impl/PowerMockJUnit44RunnerDelegateImpl.java
Patch:
@@ -79,7 +79,7 @@ public PowerMockJUnit44RunnerDelegateImpl(Class<?> klass) throws InitializationE
     }
 
     @SuppressWarnings("unchecked")
-    protected List<Method> getTestMethods(Class<?> klass, String[] methodsToRun) {
+    protected final List<Method> getTestMethods(Class<?> klass, String[] methodsToRun) {
         if (methodsToRun == null || methodsToRun.length == 0) {
             // The getTestMethods of TestClass is not visible so we need to look
             // it invoke it using reflection.
@@ -102,7 +102,7 @@ protected List<Method> getTestMethods(Class<?> klass, String[] methodsToRun) {
         }
     }
 
-    protected void validate() throws InitializationError {
+    protected final void validate() throws InitializationError {
         if (!TestCase.class.isAssignableFrom(testClass.getJavaClass())) {
             MethodValidator methodValidator = new PowerMockJUnit4MethodValidator(testClass);
             methodValidator.validateMethodsForDefaultRunner();

File: core/src/main/java/org/powermock/core/classloader/MockClassLoader.java
Patch:
@@ -112,7 +112,7 @@ private static String[] getPackagesToDefer(final String[] additionalDeferPackage
         final String[] allPackagesToBeIgnored = new String[allIgnoreLength];
         if (allIgnoreLength > defaultDeferPackagesLength) {
             System.arraycopy(packagesToBeDeferred, 0, allPackagesToBeIgnored, 0, defaultDeferPackagesLength);
-            System.arraycopy(additionalDeferPackages, 0, allPackagesToBeIgnored, defaultDeferPackagesLength,
+            System.arraycopy(additionalDeferPackages != null ? additionalDeferPackages : new String[0], 0, allPackagesToBeIgnored, defaultDeferPackagesLength,
                     additionalIgnorePackagesLength);
             return allPackagesToBeIgnored;
         }

File: api/mockito/src/main/java/org/powermock/api/mockito/internal/verification/DefaultConstructorArgumentsVerfication.java
Patch:
@@ -34,8 +34,8 @@ public DefaultConstructorArgumentsVerfication(NewInvocationControl<T> invocation
 
     public void withArguments(Object argument, Object... arguments) throws Exception {
         final Object[] realArguments;
-        if (argument == null && arguments.length == 0) {
-            realArguments = null;
+        if (arguments == null) {
+            realArguments = new Object[]{argument, null};
         } else {
             realArguments = new Object[arguments.length + 1];
             realArguments[0] = argument;

File: api/mockito/src/main/java/org/powermock/api/mockito/internal/verification/DefaultConstructorArgumentsVerfication.java
Patch:
@@ -34,8 +34,8 @@ public DefaultConstructorArgumentsVerfication(NewInvocationControl<T> invocation
 
     public void withArguments(Object argument, Object... arguments) throws Exception {
         final Object[] realArguments;
-        if (argument == null && arguments.length == 0) {
-            realArguments = null;
+        if (arguments == null) {
+            realArguments = new Object[]{argument, null};
         } else {
             realArguments = new Object[arguments.length + 1];
             realArguments[0] = argument;

File: modules/module-test/mockito/junit4-delegate/src/test/java/powermock/modules/test/mockito/junit4/delegate/EnclosedTest.java
Patch:
@@ -75,4 +75,6 @@ public void whenStubbingIsOver() {
                     not(equalTo(stubbedReturnValue)));
         }
     }
+
+    public static class SubClass extends StubbedStaticReturnValue {}
 }

File: modules/module-test/mockito/junit4-delegate/src/test/java/powermock/modules/test/mockito/junit4/delegate/EnclosedTest.java
Patch:
@@ -75,4 +75,6 @@ public void whenStubbingIsOver() {
                     not(equalTo(stubbedReturnValue)));
         }
     }
+
+    public static class SubClass extends StubbedStaticReturnValue {}
 }

File: core/src/test/java/powermock/test/support/MainMockTransformerTestSupport.java
Patch:
@@ -44,6 +44,7 @@ class SuperClass {
         }
 
         public class SubClass extends SuperClass {
+            public void dummyMethod() {}
         }
     }
 }

File: modules/module-impl/junit4/src/main/java/org/powermock/modules/junit4/PowerMockRunnerDelegate.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -36,6 +37,7 @@
 @Target(ElementType.TYPE)
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
+@Inherited
 public @interface PowerMockRunnerDelegate {
 
     Class<? extends Runner> value() default DefaultJUnitRunner.class;

File: modules/module-impl/junit4/src/main/java/org/powermock/modules/junit4/PowerMockRunnerDelegate.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -36,6 +37,7 @@
 @Target(ElementType.TYPE)
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
+@Inherited
 public @interface PowerMockRunnerDelegate {
 
     Class<? extends Runner> value() default DefaultJUnitRunner.class;

File: core/src/test/java/org/powermock/core/testlisteners/GlobalNotificationBuildSupportTest.java
Patch:
@@ -28,7 +28,7 @@
  * The design of this test-class does only allow it to be run once per JVM
  * (or more accurately "per classloader", in case the test-class is redefined
  * by different classloaders in some sort of test suite),
- * because it will test some class instanciation, which can only occur one per
+ * because it will test some class instantiation, which can only occur one per
  * class.
  */
 public class GlobalNotificationBuildSupportTest {

File: modules/module-impl/junit4/src/main/java/org/powermock/modules/junit4/PowerMockRunner.java
Patch:
@@ -37,7 +37,7 @@ public PowerMockRunner(Class<?> klass) throws Exception {
     private static Class<? extends PowerMockJUnitRunnerDelegate> getRunnerDelegateImplClass(Class<?> klass) {
         if (klass.isAnnotationPresent(PowerMockRunnerDelegate.class)
                 || Boolean.getBoolean("powermock.implicitDelegateAnnotation")) {
-            System.out.println("\nUSING DELEGATE ANNOTATION\n");
+//            System.out.println("\nUSING DELEGATE ANNOTATION\n");
             return DelegatingPowerMockRunner.class;
         }
 

File: modules/module-impl/junit4/src/main/java/org/powermock/modules/junit4/internal/impl/NotificationBuilder.java
Patch:
@@ -233,7 +233,7 @@ void testStartHasBeenFired(Description d) {
                 return;
             case ALL_TESTINSTANCES_ARE_CREATED_FIRST:
                 System.err.println(
-                        "Notifications are not supported when all test-instances are reated first!");
+                        "Notifications are not supported when all test-instances are created first!");
                 return;
             default:
                 throw new AssertionError();

File: core/src/main/java/org/powermock/core/classloader/MockClassLoader.java
Patch:
@@ -289,6 +289,9 @@ protected boolean shouldLoadUnmodifiedClass(String className) {
     }
 
     private boolean shouldLoadModified(String className) {
+        if (className.startsWith("org.powermock.example")) {
+            return false;
+        }
         for (String packageToLoadButNotModify : packagesToLoadButNotModify) {
             if (className.startsWith(packageToLoadButNotModify)) {
                 return true;

File: modules/module-test/easymock/junit4-test/src/test/java/samples/junit4/testhierarchy/TestParent.java
Patch:
@@ -19,6 +19,6 @@
 import org.powermock.modules.junit4.PowerMockRunner;
 
 @RunWith(PowerMockRunner.class)
-public class TestParent {
+public abstract class TestParent {
 
 }

File: reflect/src/test/java/org/powermock/reflect/WhiteBoxTest.java
Patch:
@@ -805,7 +805,7 @@ public void getInternalStateThrowsTooManyFieldsFoundWhenTooManyFieldsMatchTheSup
 
 	@Test
 	public void invokeMethodInvokesOverridenMethods() throws Exception {
-		assertTrue(Whitebox.<Boolean> invokeMethod(new ClassWithOverriddenMethod(), 2.0d));
+        assertTrue(Whitebox.<Boolean> invokeMethod(new ClassWithOverriddenMethod(), 2.0d));
 	}
 
 	@Test(expected = IllegalArgumentException.class)

File: modules/module-impl/agent/src/main/java/org/powermock/modules/agent/DefinalizingClassTransformer.java
Patch:
@@ -20,8 +20,8 @@
 import java.lang.instrument.IllegalClassFormatException;
 import java.security.ProtectionDomain;
 
-import org.objectweb.asm.ClassReader;
-import org.objectweb.asm.ClassWriter;
+import org.powermock.objectweb.asm.ClassReader;
+import org.powermock.objectweb.asm.ClassWriter;
 
 public class DefinalizingClassTransformer extends AbstractClassTransformer implements ClassFileTransformer {
 

File: modules/module-impl/agent/src/main/java/org/powermock/objectweb/asm/AnnotationVisitor.java
Patch:
@@ -27,7 +27,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
-package org.objectweb.asm;
+package org.powermock.objectweb.asm;
 
 /**
  * A visitor to visit a Java annotation. The methods of this interface must be

File: modules/module-impl/agent/src/main/java/org/powermock/objectweb/asm/AnnotationWriter.java
Patch:
@@ -27,7 +27,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
-package org.objectweb.asm;
+package org.powermock.objectweb.asm;
 
 /**
  * An {@link AnnotationVisitor} that generates annotations in bytecode form.

File: modules/module-impl/agent/src/main/java/org/powermock/objectweb/asm/Attribute.java
Patch:
@@ -27,7 +27,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
-package org.objectweb.asm;
+package org.powermock.objectweb.asm;
 
 /**
  * A non standard class, field, method or code attribute.

File: modules/module-impl/agent/src/main/java/org/powermock/objectweb/asm/ByteVector.java
Patch:
@@ -27,7 +27,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
-package org.objectweb.asm;
+package org.powermock.objectweb.asm;
 
 /**
  * A dynamically extensible vector of bytes. This class is roughly equivalent to

File: modules/module-impl/agent/src/main/java/org/powermock/objectweb/asm/ClassAdapter.java
Patch:
@@ -27,7 +27,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
-package org.objectweb.asm;
+package org.powermock.objectweb.asm;
 
 /**
  * An empty {@link ClassVisitor} that delegates to another {@link ClassVisitor}.

File: modules/module-impl/agent/src/main/java/org/powermock/objectweb/asm/ClassReader.java
Patch:
@@ -27,7 +27,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
-package org.objectweb.asm;
+package org.powermock.objectweb.asm;
 
 import java.io.InputStream;
 import java.io.IOException;

File: modules/module-impl/agent/src/main/java/org/powermock/objectweb/asm/ClassVisitor.java
Patch:
@@ -27,7 +27,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
-package org.objectweb.asm;
+package org.powermock.objectweb.asm;
 
 /**
  * A visitor to visit a Java class. The methods of this interface must be called

File: modules/module-impl/agent/src/main/java/org/powermock/objectweb/asm/ClassWriter.java
Patch:
@@ -27,7 +27,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
-package org.objectweb.asm;
+package org.powermock.objectweb.asm;
 
 /**
  * A {@link ClassVisitor} that generates classes in bytecode form. More

File: modules/module-impl/agent/src/main/java/org/powermock/objectweb/asm/Edge.java
Patch:
@@ -27,7 +27,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
-package org.objectweb.asm;
+package org.powermock.objectweb.asm;
 
 /**
  * An edge in the control flow graph of a method body. See {@link Label Label}.

File: modules/module-impl/agent/src/main/java/org/powermock/objectweb/asm/FieldVisitor.java
Patch:
@@ -27,7 +27,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
-package org.objectweb.asm;
+package org.powermock.objectweb.asm;
 
 /**
  * A visitor to visit a Java field. The methods of this interface must be called

File: modules/module-impl/agent/src/main/java/org/powermock/objectweb/asm/FieldWriter.java
Patch:
@@ -27,7 +27,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
-package org.objectweb.asm;
+package org.powermock.objectweb.asm;
 
 /**
  * An {@link FieldVisitor} that generates Java fields in bytecode form.

File: modules/module-impl/agent/src/main/java/org/powermock/objectweb/asm/Frame.java
Patch:
@@ -27,7 +27,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
-package org.objectweb.asm;
+package org.powermock.objectweb.asm;
 
 /**
  * Information about the input and output stack map frames of a basic block.

File: modules/module-impl/agent/src/main/java/org/powermock/objectweb/asm/Handler.java
Patch:
@@ -27,7 +27,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
-package org.objectweb.asm;
+package org.powermock.objectweb.asm;
 
 /**
  * Information about an exception handler block.

File: modules/module-impl/agent/src/main/java/org/powermock/objectweb/asm/Item.java
Patch:
@@ -27,7 +27,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
-package org.objectweb.asm;
+package org.powermock.objectweb.asm;
 
 /**
  * A constant pool item. Constant pool items can be created with the 'newXXX'

File: modules/module-impl/agent/src/main/java/org/powermock/objectweb/asm/Label.java
Patch:
@@ -27,7 +27,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
-package org.objectweb.asm;
+package org.powermock.objectweb.asm;
 
 /**
  * A label represents a position in the bytecode of a method. Labels are used
@@ -111,7 +111,7 @@ public class Label {
      * Field used to associate user information to a label. Warning: this field
      * is used by the ASM tree package. In order to use it with the ASM tree
      * package you must override the {@link 
-     * org.objectweb.asm.tree.MethodNode#getLabelNode} method.
+     * org.powermock.objectweb.asm.tree.MethodNode#getLabelNode} method.
      */
     public Object info;
 

File: modules/module-impl/agent/src/main/java/org/powermock/objectweb/asm/MethodAdapter.java
Patch:
@@ -27,7 +27,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
-package org.objectweb.asm;
+package org.powermock.objectweb.asm;
 
 /**
  * An empty {@link MethodVisitor} that delegates to another

File: modules/module-impl/agent/src/main/java/org/powermock/objectweb/asm/MethodVisitor.java
Patch:
@@ -27,7 +27,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
-package org.objectweb.asm;
+package org.powermock.objectweb.asm;
 
 /**
  * A visitor to visit a Java method. The methods of this interface must be
@@ -245,7 +245,7 @@ void visitFrame(
      *        INVOKEINTERFACE or INVOKEDYNAMIC.
      * @param owner the internal name of the method's owner class (see {@link
      *        Type#getInternalName() getInternalName})
-     *        or {@link org.objectweb.asm.Opcodes#INVOKEDYNAMIC_OWNER}.
+     *        or {@link org.powermock.objectweb.asm.Opcodes#INVOKEDYNAMIC_OWNER}.
      * @param name the method's name.
      * @param desc the method's descriptor (see {@link Type Type}).
      */

File: modules/module-impl/agent/src/main/java/org/powermock/objectweb/asm/MethodWriter.java
Patch:
@@ -27,7 +27,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
-package org.objectweb.asm;
+package org.powermock.objectweb.asm;
 
 /**
  * A {@link MethodVisitor} that generates methods in bytecode form. Each visit

File: modules/module-impl/agent/src/main/java/org/powermock/objectweb/asm/Opcodes.java
Patch:
@@ -27,7 +27,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
-package org.objectweb.asm;
+package org.powermock.objectweb.asm;
 
 /**
  * Defines the JVM opcodes, access flags and array type codes. This interface

File: modules/module-impl/agent/src/main/java/org/powermock/objectweb/asm/Type.java
Patch:
@@ -27,7 +27,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
-package org.objectweb.asm;
+package org.powermock.objectweb.asm;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;

File: modules/module-test/easymock/junit4-test/src/test/java/samples/junit4/servletmocking/SampleServletTest.java
Patch:
@@ -29,7 +29,7 @@
 import static org.powermock.api.easymock.PowerMock.*;
 
 @RunWith(PowerMockRunner.class)
-@PrepareForTest
+@PrepareForTest(SampleServlet.class)
 public class SampleServletTest {
 
     @Test

File: modules/module-test/easymock/testng-agent-test/src/test/java/samples/testng/agent/SampleServletTest.java
Patch:
@@ -29,7 +29,7 @@
 import static org.easymock.EasyMock.expect;
 import static org.powermock.api.easymock.PowerMock.*;
 
-@PrepareForTest
+@PrepareForTest(SampleServlet.class)
 public class SampleServletTest {
 
     @Test

File: modules/module-test/easymock/testng-test/src/test/java/samples/testng/SampleServletTest.java
Patch:
@@ -29,7 +29,7 @@
 import static org.easymock.EasyMock.expect;
 import static org.powermock.api.easymock.PowerMock.*;
 
-@PrepareForTest
+@PrepareForTest(SampleServlet.class)
 public class SampleServletTest {
 
     @Test

File: api/mockito/src/main/java/org/powermock/api/mockito/expectation/ConstructorExpectationSetup.java
Patch:
@@ -15,6 +15,6 @@
  */
 package org.powermock.api.mockito.expectation;
 
-public interface ConstructorExpectationSetup<T> extends WithOrWithoutExpectedArguments<T>, WithExpectedParameterTypes<T> {
+public interface ConstructorExpectationSetup<T> extends WithOrWithoutExpectedArguments<T>, WithExpectedParameterTypes<T>, WithAnyArguments<T> {
 
 }

File: api/mockito/src/main/java/org/powermock/api/mockito/internal/expectation/DefaultPrivatelyExpectedArguments.java
Patch:
@@ -12,7 +12,8 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */package org.powermock.api.mockito.internal.expectation;
+ */
+package org.powermock.api.mockito.internal.expectation;
 
 import org.powermock.api.mockito.expectation.PrivatelyExpectedArguments;
 

File: api/easymock/src/main/java/org/powermock/api/easymock/internal/invocationcontrol/NewInvocationControlAssertionError.java
Patch:
@@ -14,7 +14,8 @@ public static void throwAssertionErrorForNewSubstitutionFailure(AssertionError o
          */
         String message = oldError.getMessage();
         final String newSubsitutionMethodName = InvocationSubstitute.class.getDeclaredMethods()[0].getName();
-        message = message.replaceAll(newSubsitutionMethodName, Matcher.quoteReplacement(type.getName()));
+        final String className = InvocationSubstitute.class.getSimpleName();
+        message = message.replaceAll(className+"."+newSubsitutionMethodName, Matcher.quoteReplacement(type.getName()));
         message = message.replaceAll("method", "constructor");
 
         throw new AssertionError(message);

File: modules/module-test/easymock/junit3-test/src/test/java/samples/junit3/singleton/MockStaticTest.java
Patch:
@@ -58,7 +58,7 @@ public void testSay() throws Exception {
 			StaticService.say("world");
 			fail("Should throw AssertionError!");
 		} catch (AssertionError e) {
-			assertEquals("\n  Unexpected method call say(\"world\"):", e.getMessage());
+			assertEquals("\n  Unexpected method call StaticService.say(\"world\"):", e.getMessage());
 		}
 	}
 
@@ -78,7 +78,7 @@ public void testSayFinal() throws Exception {
 			StaticService.sayFinal("world");
 			fail("Should throw AssertionError!");
 		} catch (AssertionError e) {
-			assertEquals("\n  Unexpected method call sayFinal(\"world\"):", e.getMessage());
+			assertEquals("\n  Unexpected method call StaticService.sayFinal(\"world\"):", e.getMessage());
 		}
 	}
 

File: modules/module-test/easymock/junit4-legacy-test/src/test/java/samples/junit4/legacy/annotationbased/FinalDemoWithAnnotationInjectionTest.java
Patch:
@@ -55,7 +55,7 @@ public void testSay() throws Exception {
             tested.say("world");
             fail("Should throw AssertionError!");
         } catch (AssertionError e) {
-            assertEquals("\n  Unexpected method call say(\"world\"):", e.getMessage());
+            assertEquals("\n  Unexpected method call FinalDemo.say(\"world\"):", e.getMessage());
         }
     }
 
@@ -75,7 +75,7 @@ public void testSayFinalNative() throws Exception {
             tested.sayFinalNative("world");
             fail("Should throw AssertionError!");
         } catch (AssertionError e) {
-            assertEquals("\n  Unexpected method call sayFinalNative(\"world\"):", e.getMessage());
+            assertEquals("\n  Unexpected method call FinalDemo.sayFinalNative(\"world\"):", e.getMessage());
         }
     }
 }

File: modules/module-test/easymock/junit4-legacy-test/src/test/java/samples/junit4/legacy/singleton/MockStaticTest.java
Patch:
@@ -57,7 +57,7 @@ public void testSay() throws Exception {
 			StaticService.say("world");
 			fail("Should throw AssertionError!");
 		} catch (AssertionError e) {
-			assertEquals("\n  Unexpected method call say(\"world\"):", e.getMessage());
+			assertEquals("\n  Unexpected method call StaticService.say(\"world\"):", e.getMessage());
 		}
 	}
 
@@ -78,7 +78,7 @@ public void testSayFinal() throws Exception {
 			StaticService.sayFinal("world");
 			fail("Should throw AssertionError!");
 		} catch (AssertionError e) {
-			assertEquals("\n  Unexpected method call sayFinal(\"world\"):", e.getMessage());
+			assertEquals("\n  Unexpected method call StaticService.sayFinal(\"world\"):", e.getMessage());
 		}
 	}
 

File: modules/module-test/easymock/junit4-test/src/test/java/samples/junit4/annotationbased/FinalDemoWithAnnotationInjectionAndFieldDefaulterTest.java
Patch:
@@ -63,7 +63,7 @@ public void testSay() throws Exception {
             tested.say("world");
             fail("Should throw AssertionError!");
         } catch (AssertionError e) {
-            assertEquals("\n  Unexpected method call say(\"world\"):", e.getMessage());
+            assertEquals("\n  Unexpected method call FinalDemo.say(\"world\"):", e.getMessage());
         }
 
     }
@@ -84,7 +84,7 @@ public void testSayFinalNative() throws Exception {
             tested.sayFinalNative("world");
             fail("Should throw AssertionError!");
         } catch (AssertionError e) {
-            assertEquals("\n  Unexpected method call sayFinalNative(\"world\"):", e.getMessage());
+            assertEquals("\n  Unexpected method call FinalDemo.sayFinalNative(\"world\"):", e.getMessage());
         }
     }
 }

File: modules/module-test/easymock/junit4-test/src/test/java/samples/junit4/annotationbased/FinalDemoWithAnnotationInjectionTest.java
Patch:
@@ -55,7 +55,7 @@ public void testSay() throws Exception {
 			tested.say("world");
 			fail("Should throw AssertionError!");
 		} catch (AssertionError e) {
-			assertEquals("\n  Unexpected method call say(\"world\"):", e.getMessage());
+			assertEquals("\n  Unexpected method call FinalDemo.say(\"world\"):", e.getMessage());
 		}
 	}
 
@@ -75,7 +75,7 @@ public void testSayFinalNative() throws Exception {
 			tested.sayFinalNative("world");
 			fail("Should throw AssertionError!");
 		} catch (AssertionError e) {
-			assertEquals("\n  Unexpected method call sayFinalNative(\"world\"):", e.getMessage());
+			assertEquals("\n  Unexpected method call FinalDemo.sayFinalNative(\"world\"):", e.getMessage());
 		}
 	}
 }

File: modules/module-test/easymock/junit4-test/src/test/java/samples/junit4/finalmocking/FinalDemoTest.java
Patch:
@@ -51,7 +51,7 @@ public void testSay() throws Exception {
 			tested.say("world");
 			fail("Should throw AssertionError!");
 		} catch (AssertionError e) {
-			assertEquals("\n  Unexpected method call say(\"world\"):", e.getMessage());
+			assertEquals("\n  Unexpected method call FinalDemo.say(\"world\"):", e.getMessage());
 		}
 
 	}
@@ -73,7 +73,7 @@ public void testSayFinalNative() throws Exception {
 			tested.sayFinalNative("world");
 			fail("Should throw AssertionError!");
 		} catch (AssertionError e) {
-			assertEquals("\n  Unexpected method call sayFinalNative(\"world\"):", e.getMessage());
+			assertEquals("\n  Unexpected method call FinalDemo.sayFinalNative(\"world\"):", e.getMessage());
 		}
 	}
 }

File: modules/module-test/easymock/junit4-test/src/test/java/samples/junit4/finalmocking/NoDuplicateTest.java
Patch:
@@ -57,7 +57,7 @@ public void assertThatPrepareForTestAnnotationAtMethodLevelButNotClassLevelWorks
 			tested.say("world");
 			fail("Should throw AssertionError!");
 		} catch (AssertionError e) {
-			assertEquals("\n  Unexpected method call say(\"world\"):", e.getMessage());
+			assertEquals("\n  Unexpected method call FinalDemo.say(\"world\"):", e.getMessage());
 		}
 	}
 }

File: modules/module-test/easymock/junit4-test/src/test/java/samples/junit4/noannotation/StringConstructorWorksWhenExtendingTestCase.java
Patch:
@@ -56,7 +56,7 @@ public void testMockingStaticMethodWorksWhenStringArgConstructor() throws Except
             StaticService.say("world");
             fail("Should throw AssertionError!");
         } catch (AssertionError e) {
-            assertEquals("\n  Unexpected method call say(\"world\"):", e.getMessage());
+            assertEquals("\n  Unexpected method call StaticService.say(\"world\"):", e.getMessage());
         }
     }
 }

File: modules/module-test/easymock/junit4-test/src/test/java/samples/junit4/singleton/MockStaticTest.java
Patch:
@@ -57,7 +57,7 @@ public void testMockStatic() throws Exception {
 			StaticService.say("world");
 			fail("Should throw AssertionError!");
 		} catch (AssertionError e) {
-			assertEquals("\n  Unexpected method call say(\"world\"):", e.getMessage());
+			assertEquals("\n  Unexpected method call StaticService.say(\"world\"):", e.getMessage());
 		}
 	}
 
@@ -78,7 +78,7 @@ public void testMockStaticFinal() throws Exception {
 			StaticService.sayFinal("world");
 			fail("Should throw AssertionError!");
 		} catch (AssertionError e) {
-			assertEquals("\n  Unexpected method call sayFinal(\"world\"):", e.getMessage());
+			assertEquals("\n  Unexpected method call StaticService.sayFinal(\"world\"):", e.getMessage());
 		}
 	}
 

File: modules/module-test/easymock/junit4-test/src/test/java/samples/junit4/singleton/SimpleStaticServiceTest.java
Patch:
@@ -35,7 +35,7 @@ public void testMockStatic() throws Exception {
             SimpleStaticService.say("world");
             fail("Should throw AssertionError!");
         } catch (final AssertionError e) {
-            assertEquals("\n  Unexpected method call say(\"world\"):", e.getMessage());
+            assertEquals("\n  Unexpected method call SimpleStaticService.say(\"world\"):", e.getMessage());
         }
     }
 }

File: modules/module-test/easymock/junit47-test/src/test/java/samples/junit4/annotationbased/FinalDemoWithAnnotationInjectionAndFieldDefaulterTest.java
Patch:
@@ -63,7 +63,7 @@ public void testSay() throws Exception {
 			tested.say("world");
 			fail("Should throw AssertionError!");
 		} catch (AssertionError e) {
-			assertEquals("\n  Unexpected method call say(\"world\"):", e.getMessage());
+			assertEquals("\n  Unexpected method call FinalDemo.say(\"world\"):", e.getMessage());
 		}
 	}
 
@@ -83,7 +83,7 @@ public void testSayFinalNative() throws Exception {
 			tested.sayFinalNative("world");
 			fail("Should throw AssertionError!");
 		} catch (AssertionError e) {
-			assertEquals("\n  Unexpected method call sayFinalNative(\"world\"):", e.getMessage());
+			assertEquals("\n  Unexpected method call FinalDemo.sayFinalNative(\"world\"):", e.getMessage());
 		}
 	}
 }

File: modules/module-test/easymock/testng-agent-test/src/test/java/samples/testng/agent/FinalDemoTest.java
Patch:
@@ -50,7 +50,7 @@ public void testSay() throws Exception {
 			tested.say("world");
 			fail("Should throw AssertionError!");
 		} catch (AssertionError e) {
-			assertEquals("\n  Unexpected method call say(\"world\"):", e.getMessage());
+			assertEquals("\n  Unexpected method call FinalDemo.say(\"world\"):", e.getMessage());
 		}
 
 	}
@@ -72,7 +72,7 @@ public void testSayFinalNative() throws Exception {
 			tested.sayFinalNative("world");
 			fail("Should throw AssertionError!");
 		} catch (AssertionError e) {
-			assertEquals("\n  Unexpected method call sayFinalNative(\"world\"):", e.getMessage());
+			assertEquals("\n  Unexpected method call FinalDemo.sayFinalNative(\"world\"):", e.getMessage());
 		}
 	}
 }

File: modules/module-test/easymock/testng-agent-test/src/test/java/samples/testng/agent/MockStaticExtendsPowerMockTestCaseTest.java
Patch:
@@ -52,7 +52,7 @@ public void testMockStatic() throws Exception {
             StaticService.say("world");
             Assert.fail("Should throw AssertionError!");
         } catch (AssertionError e) {
-            Assert.assertEquals("\n  Unexpected method call say(\"world\"):", e.getMessage());
+            Assert.assertEquals("\n  Unexpected method call StaticService.say(\"world\"):", e.getMessage());
         }
     }
 
@@ -73,7 +73,7 @@ public void testMockStaticFinal() throws Exception {
             StaticService.sayFinal("world");
             Assert.fail("Should throw AssertionError!");
         } catch (AssertionError e) {
-            Assert.assertEquals("\n  Unexpected method call sayFinal(\"world\"):", e.getMessage());
+            Assert.assertEquals("\n  Unexpected method call StaticService.sayFinal(\"world\"):", e.getMessage());
         }
     }
 }

File: modules/module-test/easymock/testng-test/src/test/java/samples/testng/MockStaticExtendsPowerMockTestCaseTest.java
Patch:
@@ -52,7 +52,7 @@ public void testMockStatic() throws Exception {
             StaticService.say("world");
             Assert.fail("Should throw AssertionError!");
         } catch (AssertionError e) {
-            Assert.assertEquals("\n  Unexpected method call say(\"world\"):", e.getMessage());
+            Assert.assertEquals("\n  Unexpected method call StaticService.say(\"world\"):", e.getMessage());
         }
     }
 
@@ -73,7 +73,7 @@ public void testMockStaticFinal() throws Exception {
             StaticService.sayFinal("world");
             Assert.fail("Should throw AssertionError!");
         } catch (AssertionError e) {
-            Assert.assertEquals("\n  Unexpected method call sayFinal(\"world\"):", e.getMessage());
+            Assert.assertEquals("\n  Unexpected method call StaticService.sayFinal(\"world\"):", e.getMessage());
         }
     }
 }

File: api/mockito/src/main/java/org/powermock/api/mockito/internal/configuration/PowerMockitoSpyAnnotationEngine.java
Patch:
@@ -38,7 +38,7 @@ public void process(Class<?> context, Object testClass) {
 		for (Field field : fields) {
 			if (field.isAnnotationPresent(Spy.class)) {
 				try {
-					Whitebox.invokeMethod(this, "assertNoAnnotations", Spy.class, field, new Class<?>[] { Mock.class,
+					Whitebox.invokeMethod(this, Spy.class, field, new Class<?>[] { Mock.class,
 							org.mockito.MockitoAnnotations.Mock.class, Captor.class });
 				} catch (RuntimeException e) {
 					throw e;

File: modules/module-test/easymock/junit4-test/src/test/java/samples/junit4/suppressmethod/SuppressMethodTest.java
Patch:
@@ -166,7 +166,7 @@ public void suppressPublicStaticMethod() throws Exception {
     }
 
     @Test
-    public void suppressMethodOverridingMethod() throws Exception {
+    public void suppressOverridingMethod() throws Exception {
         suppress(method(SuppressMethod.class, "myMethod"));
 
         SuppressMethod tested = new SuppressMethod();

File: core/src/main/java/org/powermock/core/transformers/impl/MainMockTransformer.java
Patch:
@@ -62,7 +62,9 @@ public CtClass transform(final CtClass clazz) throws Exception {
         allowMockingOfStaticAndFinalAndNativeMethods(clazz);
 
         // Convert all constructors to public
-        setAllConstructorsToPublic(clazz);
+        if(!agentSupport) {
+            setAllConstructorsToPublic(clazz);
+        }
 
 
         if(!agentSupport) {

File: modules/module-impl/junit4-rule-agent/src/main/java/org/powermock/modules/junit4/rule/PowerMockRule.java
Patch:
@@ -25,7 +25,7 @@ public class PowerMockRule implements MethodRule {
 
     static {
         if(PowerMockRule.class.getClassLoader() != ClassLoader.getSystemClassLoader()) {
-            throw new IllegalStateException("PowerMockRule can only be used with the system classloader but was loaded by"+PowerMockRule.class.getClassLoader());
+            throw new IllegalStateException("PowerMockRule can only be used with the system classloader but was loaded by "+PowerMockRule.class.getClassLoader());
         }
         PowerMockAgent.initializeIfPossible();
     }

File: core/src/main/java/org/powermock/core/spi/PowerMockTestListener.java
Patch:
@@ -76,7 +76,7 @@ public interface PowerMockTestListener {
 	 * 
 	 * @param testClass
 	 *            The type of the test to be executed.
-	 * @param testMethods
+	 * @param methods
 	 *            The test methods that were executed during the test.
 	 * @param testResult
 	 *            The outcome of the test suite.

File: modules/module-impl/junit4/src/main/java/org/powermock/modules/junit4/internal/impl/PowerMockJUnit47RunnerDelegateImpl.java
Patch:
@@ -86,7 +86,7 @@ public void executeTest(final Method method, final Object testInstance, final Ru
                          * No rule could handle the exception thus we need to
                          * add it as a failure.
                          */
-                        super.handleException(testMethod, potentialTestFailure);
+                        super.handleException(testMethod, potentialTestFailure == null ? e : potentialTestFailure);
                     }
                 }
             }

File: api/mockito/src/main/java/org/powermock/api/mockito/internal/mockcreation/MockCreator.java
Patch:
@@ -98,8 +98,8 @@ private static <T> MockData<T> createMethodInvocationControl(final String mockNa
 		MockHandler<T> mockHandler = new MockHandler<T>(settings);
 		MethodInterceptorFilter filter = new MethodInterceptorFilter(mockHandler, settings);
 		final T mock = (T) ClassImposterizer.INSTANCE.imposterise(filter, type);
-		final MockitoMethodInvocationControl invocationControl = new MockitoMethodInvocationControl(filter, isSpy
-				&& delegator == null ? new Object() : delegator, methods);
+		final MockitoMethodInvocationControl invocationControl = new MockitoMethodInvocationControl(filter,
+                isSpy && delegator == null ? new Object() : delegator, mock, methods);
 
 		return new MockData<T>(invocationControl, mock);
 	}

File: reflect/src/main/java/org/powermock/reflect/internal/WhiteboxImpl.java
Patch:
@@ -1004,6 +1004,8 @@ public static Method findMethodOrThrowException(Object tested, Class<?> declarin
                     break;
                 } else if (arguments != null && (paramTypes.length != arguments.length)) {
                     continue;
+                } else if(arguments == null && paramTypes.length == 1 && !paramTypes[0].isPrimitive()) {
+                    potentialMethodToInvoke = method;
                 }
             }
         }
@@ -2201,7 +2203,7 @@ private static boolean checkArgumentTypesMatchParameterTypes(boolean isVarArgs,
                     index = i;
                 }
                 final Class<?> type = parameterTypes[index];
-                if((type.isArray() ? type.getComponentType() : type).isPrimitive()) {
+                if(type.isPrimitive()) {
                     // Primitives cannot be null
                     return false;
                 } else {

File: classloading/classloading-base/src/main/java/org/powermock/classloading/ClassloaderExecutor.java
Patch:
@@ -55,7 +55,7 @@
  * <code>cle.execute(..)</code>) and is ready for use.
  * </p>
  * <p>
- * Note that the ClassloaderExecutor requries a deep cloner implementing the {@link DeepClonerSPI} present in the class-path.
+ * Note that the ClassloaderExecutor requires a deep cloner implementing the {@link DeepClonerSPI} present in the class-path.
  * </p>
  */
 public class ClassloaderExecutor {

File: modules/module-test/easymock/junit4-test/src/test/java/samples/junit4/expectnew/PrimitiveAndWrapperDemoTest.java
Patch:
@@ -24,7 +24,7 @@ public void testWhenConstructorCannotBeDetermined() throws Exception {
 			fail("Should throw TooManyConstructorsFoundException");
 		} catch (TooManyConstructorsFoundException e) {
 			assertEquals(
-					"Several matching constructors found, please specify the argument parameter types so that PowerMock can determine which method you're refering to."
+					"Several matching constructors found, please specify the argument parameter types so that PowerMock can determine which method you're referring to."
 							+ "\nMatching constructors in class samples.expectnew.PrimitiveAndWrapperDemo were:\n"
 							+ "samples.expectnew.PrimitiveAndWrapperDemo( java.lang.Integer.class )\n"
 							+ "samples.expectnew.PrimitiveAndWrapperDemo( int.class )\n", e.getMessage());

File: reflect/src/main/java/org/powermock/reflect/internal/WhiteboxImpl.java
Patch:
@@ -1832,7 +1832,7 @@ static void throwExceptionWhenMultipleMethodMatchesFound(String helpInfo, Method
         StringBuilder sb = new StringBuilder();
         sb.append("Several matching methods found, please specify the ");
         sb.append(helpInfo);
-        sb.append(" so that PowerMock can determine which method you're refering to.\n");
+        sb.append(" so that PowerMock can determine which method you're referring to.\n");
         sb.append("Matching methods in class ").append(methods[0].getDeclaringClass().getName()).append(" were:\n");
 
         for (Method method : methods) {
@@ -1859,7 +1859,7 @@ static void throwExceptionWhenMultipleConstructorMatchesFound(Constructor<?>[] c
                     "Internal error: throwExceptionWhenMultipleConstructorMatchesFound needs at least two constructors.");
         }
         StringBuilder sb = new StringBuilder();
-        sb.append("Several matching constructors found, please specify the argument parameter types so that PowerMock can determine which method you're refering to.\n");
+        sb.append("Several matching constructors found, please specify the argument parameter types so that PowerMock can determine which method you're referring to.\n");
         sb.append("Matching constructors in class ").append(constructors[0].getDeclaringClass().getName())
                 .append(" were:\n");
 

File: reflect/src/test/java/org/powermock/reflect/WhiteBoxTest.java
Patch:
@@ -531,7 +531,7 @@ public void testMethodWithNoMethodName_tooManyMethodsFound() throws Exception {
 			assertTrue(e
 					.getMessage()
 					.contains(
-							"Several matching methods found, please specify the method name so that PowerMock can determine which method you're refering to"));
+							"Several matching methods found, please specify the method name so that PowerMock can determine which method you're referring to"));
 		}
 	}
 

File: modules/module-impl/testng/src/main/java/org/powermock/modules/testng/internal/PowerMockTestNGMethodHandler.java
Patch:
@@ -45,7 +45,6 @@ public PowerMockTestNGMethodHandler(Class<?> testClass) {
     }
 
     public Object invoke(Object self, Method thisMethod, Method proceed, Object[] args) throws Throwable {
-        System.err.println("METHOD = "+thisMethod);
         injectMocksUsingAnnotationEnabler(self);
         try {
             final Object result = proceed.invoke(self, args);

File: reflect/src/main/java/org/powermock/reflect/internal/WhiteboxImpl.java
Patch:
@@ -2410,7 +2410,7 @@ public static boolean isClass(Object argument) {
      * @return if all actual parameter types are assignable from the expected
      *         parameter types, otherwise.
      */
-    private static boolean checkIfParameterTypesAreSame(boolean isVarArgs, Class<?>[] expectedParameterTypes,
+    public static boolean checkIfParameterTypesAreSame(boolean isVarArgs, Class<?>[] expectedParameterTypes,
                                                         Class<?>[] actualParameterTypes) {
         if (expectedParameterTypes == null || actualParameterTypes == null) {
             throw new IllegalArgumentException("parameter types cannot be null");

File: core/src/main/java/org/powermock/core/ClassReplicaCreator.java
Patch:
@@ -95,7 +95,8 @@ public <T> Class<T> createInstanceReplica(T delegator) {
 
             CtMethod[] declaredMethods = originalClassAsCtClass.getDeclaredMethods();
             for (CtMethod ctMethod : declaredMethods) {
-                final String code = getReplicaMethodDelegationCode(delegator.getClass(), ctMethod, POWERMOCK_INSTANCE_DELEGATOR_FIELD_NAME);
+                @SuppressWarnings("unused")
+				final String code = getReplicaMethodDelegationCode(delegator.getClass(), ctMethod, POWERMOCK_INSTANCE_DELEGATOR_FIELD_NAME);
                 // CtMethod make = CtNewMethod.make(ctMethod.getReturnType(),
                 // ctMethod.getName(), ctMethod.getParameterTypes(), ctMethod
                 // .getExceptionTypes(), code, newClass);

File: core/src/main/java/org/powermock/core/ConcreteClassGenerator.java
Patch:
@@ -17,6 +17,8 @@
 
 import java.util.concurrent.atomic.AtomicInteger;
 
+import org.powermock.reflect.internal.TypeUtils;
+
 import javassist.ClassPool;
 import javassist.CtClass;
 import javassist.CtConstructor;

File: core/src/main/java/org/powermock/core/MockGateway.java
Patch:
@@ -23,6 +23,7 @@
 import org.powermock.core.spi.MethodInvocationControl;
 import org.powermock.core.spi.NewInvocationControl;
 import org.powermock.reflect.exceptions.MethodNotFoundException;
+import org.powermock.reflect.internal.TypeUtils;
 import org.powermock.reflect.internal.WhiteboxImpl;
 
 /**

File: core/src/main/java/org/powermock/core/testlisteners/FieldDefaulter.java
Patch:
@@ -19,10 +19,10 @@
 import java.lang.reflect.Method;
 import java.util.Set;
 
-import org.powermock.core.TypeUtils;
 import org.powermock.core.spi.support.AbstractPowerMockTestListenerBase;
 import org.powermock.core.spi.testresult.TestMethodResult;
 import org.powermock.reflect.Whitebox;
+import org.powermock.reflect.internal.TypeUtils;
 
 /**
  * A test listener that automatically set all instance fields to their default

File: modules/module-test/powermockito/junit4/src/test/java/samples/powermockito/junit4/partialmocking/StaticPartialMockingTest.java
Patch:
@@ -27,7 +27,6 @@
 import static org.powermock.api.mockito.PowerMockito.when;
 import static org.powermock.api.support.membermodification.MemberMatcher.method;
 
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.core.classloader.annotations.PrepareForTest;

File: reflect/src/main/java/org/powermock/reflect/internal/TypeUtils.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.core;
+package org.powermock.reflect.internal;
 
 /**
  * Utilities for types.

File: api/mockito/src/main/java/org/powermock/api/mockito/internal/configuration/PowerMockitoSpyAnnotationEngine.java
Patch:
@@ -50,8 +50,9 @@ public void process(Class<?> context, Object testClass) {
 				try {
 					Object instance = field.get(testClass);
 					if (instance == null) {
-						throw new MockitoException("Cannot create a @Spy for '" + field.getName() + "' field because the *instance* is missing\n"
-								+ "Example of correct usage of @Spy:\n" + "   @Spy List mock = new LinkedList();\n");
+						throw new MockitoException("Cannot create a @Spy for '" + field.getName()
+								+ "' field because the *instance* is missing\n" + "Example of correct usage of @Spy:\n"
+								+ "   @Spy List mock = new LinkedList();\n");
 					}
 					field.set(testClass, PowerMockito.spy(instance));
 				} catch (IllegalAccessException e) {

File: reflect/src/main/java/org/powermock/reflect/internal/WhiteboxImpl.java
Patch:
@@ -2174,7 +2174,8 @@ private static boolean checkArgumentTypesMatchParameterTypes(boolean isVarArgs,
 				final boolean assignableFrom;
 				final Class<?> argumentType = getType(argument);
 				if (isVarArgs && i == parameterTypes.length - 1) {
-					assignableFrom = parameterTypes[i].getComponentType().isAssignableFrom(argumentType);
+					assignableFrom = parameterTypes[i].getComponentType().isAssignableFrom(
+							argumentType.isArray() ? argumentType.getComponentType() : argumentType);
 				} else {
 					assignableFrom = parameterTypes[i].isAssignableFrom(argumentType);
 				}

File: reflect/src/test/java/org/powermock/reflect/internal/WhiteboxImplTest.java
Patch:
@@ -56,7 +56,7 @@ public void assertThatClassAndClassIsSameWhenInvokingCheckIfTypesAreSame() throw
 	public void getBestCandidateMethodReturnsMatchingMethodWhenNoOverloading() throws Exception {
 		final Method expectedMethod = ClassWithStandardMethod.class.getDeclaredMethod("myMethod", double.class);
 		final Method actualMethod = WhiteboxImpl.getBestMethodCandidate(ClassWithStandardMethod.class, "myMethod",
-				new Class<?>[] { double.class });
+				new Class<?>[] { double.class }, false);
 		assertEquals(expectedMethod, actualMethod);
 	}
 
@@ -65,7 +65,7 @@ public void getBestCandidateMethodReturnsMatchingMethodWhenOverloading() throws
 		final Method expectedMethod = ClassWithOverloadedMethods.class.getDeclaredMethod("overloaded", double.class,
 				Child.class);
 		final Method actualMethod = WhiteboxImpl.getBestMethodCandidate(ClassWithOverloadedMethods.class, "overloaded",
-				new Class<?>[] { double.class, Child.class });
+				new Class<?>[] { double.class, Child.class }, false);
 		assertEquals(expectedMethod, actualMethod);
 	}
 }

File: modules/module-impl/junit4-rule/src/test/java/org/powermock/modules/SystemClassUserTest.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.powermock.core.classloader.annotations.PrepareForTest;
@@ -49,6 +50,7 @@
  * </pre>
  */
 @PrepareForTest( { SystemClassUser.class })
+@Ignore
 public class SystemClassUserTest {
     @Rule
     public PowerMockRule powerMockRule = new PowerMockRule();

File: modules/module-impl/junit4-rule/src/test/java/org/powermock/modules/WhenNewTest.java
Patch:
@@ -35,6 +35,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.powermock.core.classloader.annotations.PrepareForTest;
@@ -53,6 +54,7 @@
  * 
  */
 @PrepareForTest( { MyClass.class, ExpectNewDemo.class, DataInputStream.class })
+@Ignore
 public class WhenNewTest {
     @Rule
     public PowerMockRule powerMockRule = new PowerMockRule();

File: api/mockito/src/main/java/org/powermock/api/mockito/PowerMockito.java
Patch:
@@ -212,7 +212,7 @@ public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {
      */
     @SuppressWarnings("unchecked")
     public static synchronized <T> T spy(T object) {
-        return MockCreator.mock((Class<T>) Whitebox.getType(object), false, true, null, null, (Method[]) null);
+        return MockCreator.mock((Class<T>) Whitebox.getType(object), false, true, object, null, (Method[]) null);
     }
 
     /**

File: api/support/src/test/java/org/powermock/api/support/DeepClonerTest.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.List;
 
 import org.junit.Test;
-
 public class DeepClonerTest {
 
 	@Test

File: classloading/src/test/java/powermock/classloading/ClassloaderExecutorTest.java
Patch:
@@ -177,7 +177,7 @@ public int[] call() throws Exception {
 		assertArrayEquals(expected, actual);
 	}
 
-	@Ignore("Causes circular cloning, must be fixed")
+//	@Ignore("Causes circular cloning, must be fixed")
 	@Test
 	public void loadsObjectGraphThatIncludesCollectionInSpecifiedClassloaderAndReturnsResultInOriginalClassloader() throws Exception {
 		final MockClassLoader classloader = createClassloader();

File: api/mockito/src/main/java/org/powermock/api/mockito/internal/mockcreation/MockCreator.java
Patch:
@@ -72,7 +72,7 @@ private static <T> MockData<T> createMethodInvocationControl(final String mockNa
 		}
 
 		if (isSpy) {
-			mockSettings.defaultAnswer(Mockito.CALLS_REAL_METHODS);
+			settings.defaultAnswer(Mockito.CALLS_REAL_METHODS);
 		}
 
 		MockHandler<T> mockHandler = new MockHandler<T>(settings);

File: core/src/main/java/org/powermock/core/ClassReplicaCreator.java
Patch:
@@ -155,7 +155,7 @@ private void copyFields(CtClass originalClassAsCtClass, final CtClass newClass)
     private String getReplicaMethodDelegationCode(Class<?> clazz, CtMethod ctMethod, String classOrInstanceToDelegateTo)
             throws NotFoundException {
         StringBuilder builder = new StringBuilder();
-        builder.append("java.lang.reflect.Method originalMethod = ");
+        builder.append("{java.lang.reflect.Method originalMethod = ");
         builder.append(clazz.getName());
         builder.append(".class.getDeclaredMethod(\"");
         builder.append(ctMethod.getName());

File: classloading/src/test/java/powermock/classloading/ClassloaderExecutorTest.java
Patch:
@@ -28,6 +28,7 @@
 
 import javassist.CtClass;
 
+import org.junit.Ignore;
 import org.junit.Test;
 import org.powermock.classloading.ClassloaderExecutor;
 import org.powermock.core.classloader.MockClassLoader;
@@ -233,6 +234,7 @@ public void run() {
 	}
 
 	@Test
+	@Ignore("Must fix this test before next release")
 	public void worksWithObjectHierarchyAndOverloadedFields() throws Exception {
 		final MockClassLoader classloader = createClassloader();
 		final MyHierarchicalOverloadedFieldHolder tested = new MyHierarchicalOverloadedFieldHolder();

File: reflect/src/test/java/org/powermock/reflect/internal/WhiteboxImplTest.java
Patch:
@@ -43,4 +43,6 @@ public void assertThatClassAndClassIsSameWhenInvokingCheckIfTypesAreSame() throw
 		boolean invokeMethod = (Boolean) method.invoke(WhiteboxImpl.class, new Class<?>[] { Class.class }, new Class<?>[] { Class.class });
 		assertTrue(invokeMethod);
 	}
+	
+	// TODO: Add test for getBestCandidateMethod
 }

File: reflect/src/test/java/org/powermock/reflect/testclasses/ClassWithOverriddenMethod.java
Patch:
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.powermock.reflect.testclasses;
 
 public class ClassWithOverriddenMethod extends ClassWithStandardMethod {

File: api/support/src/main/java/org/powermock/api/support/DeepCloner.java
Patch:
@@ -247,7 +247,7 @@ private static Object cloneCollection(ClassLoader targetCL, Object source, ListM
     }
 
     private static boolean isCollection(final Object object) {
-        return isCollection(object.getClass());
+        return object == null ? false : isCollection(object.getClass());
     }
 
     private static boolean isCollection(final Class<?> cls) {

File: modules/module-impl/junit4-rule/src/main/java/org/powermock/modules/junit4/rule/PowerMockRule.java
Patch:
@@ -17,6 +17,8 @@
 import org.powermock.tests.utils.impl.PrepareForTestExtractorImpl;
 
 public class PowerMockRule implements MethodRule {
+    
+    private ClassloaderExecutor classloaderExecutor = null;
 
     public Statement apply(Statement base, FrameworkMethod method, Object target) {
         return new PowerMockStatement(base, method, target);

File: modules/module-impl/junit4-rule/src/test/java/org/powermock/modules/MockStaticTest.java
Patch:
@@ -26,7 +26,6 @@
 import static org.powermock.api.mockito.PowerMockito.spy;
 import static org.powermock.api.mockito.PowerMockito.verifyStatic;
 
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.mockito.exceptions.base.MockitoAssertionError;
@@ -41,7 +40,6 @@
 /**
  * Test class to demonstrate static mocking with PowerMockito.
  */
-@Ignore
 @PrepareForTest( { StaticService.class, StaticHelper.class })
 public class MockStaticTest {
     @Rule

File: core/src/main/java/org/powermock/core/WildcardMatcher.java
Patch:
@@ -47,7 +47,7 @@ public static boolean matches(String text, String pattern) {
             return text.equals(pattern);
         }
 
-        pattern = pattern.replaceAll("\\*", ".*");
+        pattern = pattern.replaceAll("\\.", "\\\\.").replaceAll("\\*", ".*");
         Scanner s = new Scanner(text);
         s.useDelimiter(pattern);
         boolean matchesWildcard = !s.hasNext();

File: core/src/main/java/org/powermock/core/ListMap.java
Patch:
@@ -114,7 +114,7 @@ public void putAll(Map<? extends K, ? extends V> t) {
 
 
 	public int size() {
-		throw new UnsupportedOperationException();
+		return entries.size();
 	}
 
 	public Collection<V> values() {

File: reflect/src/main/java/org/powermock/reflect/internal/WhiteboxImpl.java
Patch:
@@ -47,6 +47,7 @@
 import org.powermock.reflect.exceptions.TooManyMethodsFoundException;
 import org.powermock.reflect.internal.matcherstrategies.AllFieldsMatcherStrategy;
 import org.powermock.reflect.internal.matcherstrategies.AssignableFromFieldTypeMatcherStrategy;
+import org.powermock.reflect.internal.matcherstrategies.AssignableToFieldTypeMatcherStrategy;
 import org.powermock.reflect.internal.matcherstrategies.FieldAnnotationMatcherStrategy;
 import org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy;
 import org.powermock.reflect.internal.matcherstrategies.FieldNameMatcherStrategy;
@@ -510,7 +511,7 @@ private static boolean hasFieldProperModifier(Object object, Field field) {
 	 */
 	@SuppressWarnings("unchecked")
 	public static <T> T getInternalState(Object object, Class<T> fieldType) {
-		Field foundField = findFieldInHierarchy(object, new AssignableFromFieldTypeMatcherStrategy(fieldType));
+		Field foundField = findFieldInHierarchy(object, new AssignableToFieldTypeMatcherStrategy(fieldType));
 		try {
 			return (T) foundField.get(object);
 		} catch (IllegalAccessException e) {

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/expectnew/PrimitiveAndWrapperDemoTest.java
Patch:
@@ -26,8 +26,8 @@ public void testWhenConstructorCannotBeDetermined() throws Exception {
 			assertEquals(
 					"Several matching constructors found, please specify the argument parameter types so that PowerMock can determine which method you're refering to."
 							+ "\nMatching constructors in class samples.expectnew.PrimitiveAndWrapperDemo were:\n"
-							+ "samples.expectnew.PrimitiveAndWrapperDemo( int.class )\n"
-							+ "samples.expectnew.PrimitiveAndWrapperDemo( java.lang.Integer.class )\n", e.getMessage());
+							+ "samples.expectnew.PrimitiveAndWrapperDemo( java.lang.Integer.class )\n"
+							+ "samples.expectnew.PrimitiveAndWrapperDemo( int.class )\n", e.getMessage());
 		}
 	}
 

File: api/support/src/main/java/org/powermock/api/support/DeepCloner.java
Patch:
@@ -65,7 +65,7 @@ private static <T> T performClone(Class<T> targetClass, Object source) {
         Object target = null;
         if (targetClass.isArray()) {
             target = instantiateArray(targetClass, source);
-        } else if(targetClass.isPrimitive()) {
+        } else if (targetClass.isPrimitive() || targetClass.getName().startsWith(IGNORED_PACKAGES)) {
             target = source;
         } else {
             target = Whitebox.newInstance(targetClass);

File: examples/DocumentationExamples/src/main/java/powermock/examples/suppress/constructorhierarchy/EvilGrandParent.java
Patch:
@@ -19,9 +19,9 @@
  * Example that demonstrates PowerMock's ability to suppress constructor
  * hierarchies.
  */
-public class EvilParentChild {
+public class EvilGrandParent {
 
-	public EvilParentChild() {
+	public EvilGrandParent() {
 		System.loadLibrary("evil grand parent.dll");
 	}
 }

File: examples/DocumentationExamples/src/main/java/powermock/examples/suppress/constructorhierarchy/EvilParent.java
Patch:
@@ -19,7 +19,7 @@
  * Example that demonstrates PowerMock's ability to suppress constructor
  * hierarchies.
  */
-public class EvilParent extends EvilParentChild {
+public class EvilParent extends EvilGrandParent {
 
 	public EvilParent() {
 		System.loadLibrary("evil parent.dll");

File: examples/DocumentationExamples/src/test/java/powermock/examples/suppress/constructor/ExampleWithEvilParentTest.java
Patch:
@@ -30,7 +30,7 @@
  */
 @RunWith(PowerMockRunner.class)
 @PrepareForTest(ExampleWithEvilParent.class)
-public class ExampleWithParentChildTest {
+public class ExampleWithEvilParentTest {
 
     @Test
     public void testSuppressConstructorOfEvilParent() throws Exception {

File: examples/DocumentationExamples/src/test/java/powermock/examples/suppress/constructorhierarchy/ExampleWithEvilParentAndEvilGrandParentTest.java
Patch:
@@ -30,7 +30,7 @@
  */
 @RunWith(PowerMockRunner.class)
 @PrepareForTest(ExampleWithEvilParentAndEvilGrandParent.class)
-public class ExampleWithEvilChildAndEvilGrandParentTest {
+public class ExampleWithEvilParentAndEvilGrandParentTest {
 
     @Test
     public void testSuppressConstructorHierarchy() throws Exception {

File: modules/module-test/powermock/junit47-test/src/test/java/samples/junit4/rules/AssertThatJUnit47RulesWorks.java
Patch:
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package samples.junit4.rules;
 
 import static org.junit.Assert.assertEquals;

File: tests/utils/src/main/java/samples/expectnew/ExpectNewOfFinalSystemClassDemo.java
Patch:
@@ -17,8 +17,8 @@
 
 public class ExpectNewOfFinalSystemClassDemo {
 
-    public boolean isNewStringEmpty() {
+    public char getFirstChar() {
         String myString = new String("My String");
-        return myString.isEmpty();
+        return myString.charAt(0);
     }
 }

File: modules/module-test/powermock/junit47-test/src/test/java/samples/junit4/annotationbased/FinalDemoWithAnnotationInjectionAndFieldDefaulterTest.java
Patch:
@@ -16,7 +16,6 @@
 package samples.junit4.annotationbased;
 
 import static org.easymock.EasyMock.expect;
-
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 import static org.powermock.api.easymock.PowerMock.replay;
@@ -67,7 +66,6 @@ public void testSay() throws Exception {
 		} catch (AssertionError e) {
 			assertEquals("\n  Unexpected method call say(\"world\"):", e.getMessage());
 		}
-
 	}
 
 	@Test

File: reflect/src/main/java/org/powermock/reflect/internal/WhiteboxImpl.java
Patch:
@@ -1723,7 +1723,7 @@ public static Set<Field> getAllStaticFields(Class<?> type) {
         return fields;
     }
 
-    private static boolean isClass(Object argument) {
+    public static boolean isClass(Object argument) {
         return argument instanceof Class<?>;
     }
 

File: modules/module-test/powermockito/junit4/src/test/java/samples/powermockito/junit4/privatemocking/PrivateInstanceMockingTest.java
Patch:
@@ -39,7 +39,6 @@ public void expectationsWorkWhenSpyingOnPrivateMethods() throws Exception {
     }
 
     @Test
-    @Ignore
     public void expectationsWorkWithArgumentMatchersWhenSpyingOnPrivateMethods() throws Exception {
         PrivateMethodDemo tested = spy(new PrivateMethodDemo());
         assertEquals("Hello Temp, you are 50 old.", tested.sayYear("Temp", 50));
@@ -49,7 +48,8 @@ public void expectationsWorkWithArgumentMatchersWhenSpyingOnPrivateMethods() thr
         assertEquals("another", tested.sayYear("Johan", 29));
         assertEquals("another", tested.sayYear("test", 12));
 
-        verifyPrivate(tested).invocation("doSayYear", 50, "Temp");
+        verifyPrivate(tested).invocation("doSayYear", 29, "Johan");
+        verifyPrivate(tested).invocation("doSayYear", 12, "test");
     }
 
     @Test

File: api/mockito/src/main/java/org/powermock/api/mockito/internal/expectation/PowerMockitoStubberImpl.java
Patch:
@@ -20,6 +20,7 @@
 import org.mockito.internal.stubbing.StubberImpl;
 import org.mockito.stubbing.Stubber;
 import org.powermock.api.mockito.expectation.PowerMockitoStubber;
+import org.powermock.api.mockito.internal.PowerMockitoWhenRepository;
 import org.powermock.api.mockito.internal.invocationcontrol.MockitoMethodInvocationControl;
 import org.powermock.core.MockRepository;
 import org.powermock.reflect.Whitebox;
@@ -34,6 +35,7 @@ public class PowerMockitoStubberImpl extends StubberImpl implements PowerMockito
      * {@inheritDoc}
      */
     public void when(Class<?> classMock) {
+        PowerMockitoWhenRepository.add(classMock, null);
         MockitoMethodInvocationControl invocationControl = (MockitoMethodInvocationControl) MockRepository
                 .getStaticMethodInvocationControl(classMock);
         addAnswersForStubbing(invocationControl);
@@ -47,6 +49,7 @@ public void when(Class<?> classMock) {
      */
     @Override
     public <T> T when(T instanceMock) {
+        PowerMockitoWhenRepository.add(instanceMock, null);
         MockitoMethodInvocationControl invocationControl = (MockitoMethodInvocationControl) MockRepository
                 .getInstanceMethodInvocationControl(instanceMock);
         final T returnValue;

File: modules/module-test/powermockito/junit4/src/test/java/samples/powermockito/junit4/finalmocking/FinalDemoTest.java
Patch:
@@ -97,7 +97,6 @@ public void assertSpyingOnFinalInstanceMethodWorks() throws Exception {
     }
 
     @Test(expected = ArrayStoreException.class)
-    @Ignore
     public void assertSpyingOnFinalVoidInstanceMethodWorks() throws Exception {
         FinalDemo tested = new FinalDemo();
         FinalDemo spy = spy(tested);

File: reflect/src/main/java/org/powermock/reflect/internal/WhiteboxImpl.java
Patch:
@@ -303,7 +303,7 @@ public static void setInternalState(Object object, String fieldName, Object valu
      *            the new value of the field
      */
     public static void setInternalState(Object object, Class<?> fieldType, Object value) {
-        setField(object, value, findFieldInHierarchy(object, new FieldTypeMatcherStrategy(fieldType)));
+        setField(object, value, findFieldInHierarchy(object, new AssignableFromFieldTypeMatcherStrategy(fieldType)));
     }
 
     /**
@@ -498,7 +498,7 @@ private static boolean hasFieldProperModifier(Object object, Field field) {
      */
     @SuppressWarnings("unchecked")
     public static <T> T getInternalState(Object object, Class<T> fieldType) {
-        Field foundField = findFieldInHierarchy(object, new FieldTypeMatcherStrategy(fieldType));
+        Field foundField = findFieldInHierarchy(object, new AssignableFromFieldTypeMatcherStrategy(fieldType));
         try {
             return (T) foundField.get(object);
         } catch (IllegalAccessException e) {

File: modules/module-test/powermock/testng-test/src/test/java/samples/testng/AnnotationDemoTest.java
Patch:
@@ -12,8 +12,7 @@
 import samples.annotationbased.AnnotationDemo;
 
 /**
- * Verifies that PowerMock test listeners works correctly with setup methods in
- * TestNG.
+ * Verifies that PowerMock test listeners works correctly in TestNG.
  */
 public class AnnotationDemoTest {
 

File: api/easymock/src/main/java/org/powermock/api/easymock/internal/invocationcontrol/NewInvocationControlImpl.java
Patch:
@@ -63,14 +63,14 @@ public Object invoke(Class<?> type, Object[] args, Class<?>[] sig) throws Except
 			}
 			return result;
 		} catch (AssertionError e) {
-			PowerMockUtils.throwAssertionErrorForNewSubstitutionFailure(e, type);
+			NewInvocationControlAssertionError.throwAssertionErrorForNewSubstitutionFailure(e, type);
 		}
 
 		// Won't happen
 		return null;
 	}
 
-	public IExpectationSetters<T> performSubstitutionLogic(Object... arguments) throws Exception {
+	public IExpectationSetters<T> expectSubstitutionLogic(Object... arguments) throws Exception {
 		return EasyMock.expect(substitute.performSubstitutionLogic(arguments));
 	}
 

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/partialmocking/MockSelfDemoTest.java
Patch:
@@ -192,7 +192,7 @@ public void testCreatePartialMockAndInvokeDefaultConstructor_noDefaultConstructo
 			createPartialMockAndInvokeDefaultConstructor(MockSelfWithNoDefaultConstructorDemo.class, "aMethod2");
 			fail("Should throw ConstructorNotFoundException!");
 		} catch (ConstructorNotFoundException e) {
-			assertEquals("Failed to lookup constructor.", e.getMessage());
+			assertEquals("Failed to lookup constructor with parameter types [ <none> ] in class samples.partialmocking.MockSelfWithNoDefaultConstructorDemo.", e.getMessage());
 		}
 	}
 }

File: examples/DocumentationExamples/src/test/java/powermock/examples/annotationbased/UsingMockAnnotationTest.java
Patch:
@@ -23,8 +23,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.powermock.api.easymock.annotation.Mock;
 import org.powermock.api.easymock.powermocklistener.AnnotationEnabler;
-import org.powermock.core.classloader.annotations.Mock;
 import org.powermock.core.classloader.annotations.PowerMockListener;
 import org.powermock.modules.junit4.PowerMockRunner;
 

File: examples/DocumentationExamples/src/test/java/powermock/examples/annotationbased/UsingMockNiceAnnotationTest.java
Patch:
@@ -24,14 +24,13 @@
 import org.junit.runner.RunWith;
 import org.powermock.api.easymock.annotation.MockNice;
 import org.powermock.api.easymock.powermocklistener.AnnotationEnabler;
-import org.powermock.core.classloader.annotations.Mock;
 import org.powermock.core.classloader.annotations.PowerMockListener;
 import org.powermock.modules.junit4.PowerMockRunner;
 
 import powermock.examples.annotationbased.dao.SomeDao;
 
 /**
- * Test of the {@link SomeService} when using the {@link Mock} annotation to
+ * Test of the {@link SomeService} when using the {@link MockNice} annotation to
  * create and inject mocks.
  */
 @RunWith(PowerMockRunner.class)

File: examples/DocumentationExamples/src/test/java/powermock/examples/annotationbased/UsingMockStrictAnnotationTest.java
Patch:
@@ -25,15 +25,14 @@
 import org.junit.runner.RunWith;
 import org.powermock.api.easymock.annotation.MockStrict;
 import org.powermock.api.easymock.powermocklistener.AnnotationEnabler;
-import org.powermock.core.classloader.annotations.Mock;
 import org.powermock.core.classloader.annotations.PowerMockListener;
 import org.powermock.modules.junit4.PowerMockRunner;
 
 import powermock.examples.annotationbased.dao.SomeDao;
 
 /**
- * Test of the {@link SomeService} when using the {@link Mock} annotation to
- * create and inject mocks.
+ * Test of the {@link SomeService} when using the {@link MockStrict} annotation
+ * to create and inject mocks.
  */
 @RunWith(PowerMockRunner.class)
 @PowerMockListener(AnnotationEnabler.class)

File: modules/module-test/powermock/junit3-test/src/test/java/samples/junit3/annotationbased/PrivateFinalWithAnnotationTest.java
Patch:
@@ -16,12 +16,13 @@
 package samples.junit3.annotationbased;
 
 import static org.easymock.EasyMock.expect;
+
 import static org.easymock.classextension.EasyMock.replay;
 import static org.easymock.classextension.EasyMock.verify;
 import junit.framework.TestCase;
 
+import org.powermock.api.easymock.annotation.Mock;
 import org.powermock.api.easymock.powermocklistener.AnnotationEnabler;
-import org.powermock.core.classloader.annotations.Mock;
 import org.powermock.core.classloader.annotations.PowerMockListener;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 

File: modules/module-test/powermock/junit4-legacy-test/src/test/java/samples/junit4/legacy/annotationbased/FinalDemoWithAnnotationInjectionTest.java
Patch:
@@ -16,15 +16,16 @@
 package samples.junit4.legacy.annotationbased;
 
 import static org.easymock.EasyMock.expect;
+
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 import static org.powermock.api.easymock.PowerMock.replay;
 import static org.powermock.api.easymock.PowerMock.verify;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.powermock.api.easymock.annotation.Mock;
 import org.powermock.api.easymock.powermocklistener.AnnotationEnabler;
-import org.powermock.core.classloader.annotations.Mock;
 import org.powermock.core.classloader.annotations.PowerMockListener;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.legacy.PowerMockRunner;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/annotationbased/FinalDemoWithAnnotationInjectionAndFieldDefaulterTest.java
Patch:
@@ -23,8 +23,8 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.powermock.api.easymock.annotation.Mock;
 import org.powermock.api.easymock.powermocklistener.AnnotationEnabler;
-import org.powermock.core.classloader.annotations.Mock;
 import org.powermock.core.classloader.annotations.PowerMockListener;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.core.testlisteners.FieldDefaulter;
@@ -46,7 +46,7 @@ public class FinalDemoWithAnnotationInjectionAndFieldDefaulterTest {
 	// Asserts that the FieldDefaulter handles primitive types.
 	private int intType = 6;
 
-	@org.powermock.api.easymock.annotation.Mock
+	@Mock
 	private FinalDemo tested;
 
 	@Test

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/annotationbased/FinalDemoWithAnnotationInjectionTest.java
Patch:
@@ -23,8 +23,8 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.powermock.api.easymock.annotation.Mock;
 import org.powermock.api.easymock.powermocklistener.AnnotationEnabler;
-import org.powermock.core.classloader.annotations.Mock;
 import org.powermock.core.classloader.annotations.PowerMockListener;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;

File: modules/module-test/powermockito/junit4/src/test/java/samples/powermockito/junit4/annotationbased/MockFinalUsingAnnotationsTest.java
Patch:
@@ -44,6 +44,7 @@ public class MockFinalUsingAnnotationsTest {
 	@org.mockito.MockitoAnnotations.Mock
 	private FinalDemo usingDeprecatedMockitoMockAnnotation;
 
+	@SuppressWarnings("deprecation")
 	@org.powermock.core.classloader.annotations.Mock
 	private FinalDemo usingPowerMockMockAnnotation;
 

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/suppressfield/ItemRepositoryTest.java
Patch:
@@ -6,6 +6,7 @@
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.core.classloader.annotations.SuppressStaticInitializationFor;
 import org.powermock.modules.junit4.PowerMockRunner;
+import org.powermock.reflect.Whitebox;
 
 import samples.suppressfield.ItemRepository;
 
@@ -18,7 +19,7 @@ public void testaddItem() throws Exception {
         PowerMock.suppressField(ItemRepository.class, "itemMap");
         PowerMock.suppressField(ItemRepository.class, "totalItems");
 
-        ItemRepository objRep = new ItemRepository();
+        ItemRepository objRep = Whitebox.newInstance(ItemRepository.class);
         objRep.addItem("key", "value");
     }
 }
\ No newline at end of file

File: tests/utils/src/main/java/samples/suppressfield/ItemRepository.java
Patch:
@@ -6,7 +6,7 @@ public class ItemRepository {
     private static HashMap<String, String> itemMap = new HashMap<String, String>();
 
     @SuppressWarnings("unused")
-    private static MyClass myClass = new MyClass();
+    private MyClass myClass = new MyClass();
 
     private int totalItems = 0;
 

File: tests/utils/src/main/java/samples/suppressfield/ItemRepository.java
Patch:
@@ -24,7 +24,7 @@ public void delItem(String key) {
 
     private static class MyClass {
         public MyClass() {
-            throw new IllegalArgumentException("Not possible!");
+            throw new IllegalArgumentException("Constructor should never be called during this test");
         }
     }
 }
\ No newline at end of file

File: modules/module-test/powermock/junit47-test/src/test/java/samples/junit4/rules/AssertThatJUnit47RulesWorks.java
Patch:
@@ -54,7 +54,6 @@ public void assertThatJUnit47RulesWorks() throws Exception {
 	}
 
 	private class MyRule implements MethodRule {
-		@Override
 		public Statement apply(final Statement base, FrameworkMethod method, Object target) {
 			return new Statement() {
 				@Override

File: reflect/src/test/java/org/powermock/reflect/WhiteBoxTest.java
Patch:
@@ -158,7 +158,7 @@ public void testGetInternalState_superClass_parameterized() throws Exception {
 
 	@Test
 	public void testInvokePrivateMethod_primtiveType() throws Exception {
-		assertTrue((Boolean) Whitebox.invokeMethod(new ClassWithPrivateMethods(), "primitiveMethod", 8.2));
+		assertTrue(Whitebox.<Boolean> invokeMethod(new ClassWithPrivateMethods(), "primitiveMethod", 8.2));
 	}
 
 	@Test

File: modules/module-impl/junit4/src/main/java/org/powermock/modules/junit4/internal/impl/PowerMockJUnit44RunnerDelegateImpl.java
Patch:
@@ -70,7 +70,6 @@
  * @see JUnit4ClassRunner
  * 
  */
-@SuppressWarnings("deprecation")
 public class PowerMockJUnit44RunnerDelegateImpl extends Runner implements Filterable, Sortable,
 		PowerMockJUnitRunnerDelegate {
 	private final List<Method> testMethods;

File: modules/module-impl/junit4/src/main/java/org/powermock/modules/junit4/internal/impl/testcaseworkaround/PowerMockJUnit4MethodValidator.java
Patch:
@@ -37,7 +37,6 @@
  * actually a workaround for JUnit 4.4 when the test case extends from the
  * <code>TestCase</code> class.
  */
-@SuppressWarnings("deprecation")
 public class PowerMockJUnit4MethodValidator extends MethodValidator {
 
     public PowerMockJUnit4MethodValidator(TestClass testClass) {

File: reflect/src/main/java/org/powermock/Whitebox.java
Patch:
@@ -216,8 +216,8 @@ public static Object getInternalState(Object object, String fieldName) {
 	 * @param where
 	 *            which class the field is defined
 	 */
-	public static Object getInternalState(Object object, String fieldName, Class<?> where) {
-		return WhiteboxImpl.getInternalState(object, fieldName, where, Object.class);
+	public static <T> T getInternalState(Object object, String fieldName, Class<?> where) {
+		return WhiteboxImpl.getInternalState(object, fieldName, where);
 	}
 
 	/**
@@ -238,7 +238,7 @@ public static Object getInternalState(Object object, String fieldName, Class<?>
 	 *            the expected type of the field
 	 */
 	public static <T> T getInternalState(Object object, String fieldName, Class<?> where, Class<T> type) {
-		return WhiteboxImpl.getInternalState(object, fieldName, where, type);
+		return WhiteboxImpl.getInternalState(object, fieldName, where);
 	}
 
 	/**

File: api/easymock/src/main/java/org/powermock/api/easymock/PowerMock.java
Patch:
@@ -2161,7 +2161,7 @@ private static <T> T doMock(Class<T> type, boolean isStatic, MockStrategy mockSt
                 T newInstance = Whitebox.newInstance(type);
                 MockRepository.putInstanceMethodInvocationControl(newInstance, new EasyMockMethodInvocationControl<Object>(h,
                         methodsToMock, replica));
-                if (mock instanceof InvocationSubstitute<?> == false) {
+                if (newInstance instanceof InvocationSubstitute<?> == false) {
                     MockRepository.addObjectsToAutomaticallyReplayAndVerify(newInstance);
                 }
                 return newInstance;

File: core/src/main/java/org/powermock/core/ClassReplicaCreator.java
Patch:
@@ -201,7 +201,7 @@ private String[] getParameterTypes(CtMethod ctMethod) throws NotFoundException {
 
     private static String getParametersAsString(String[] types) {
         StringBuilder parametersAsString = new StringBuilder();
-        if (types.length == 0) {
+        if (types != null && types.length == 0) {
             parametersAsString.append("new Class[0]");
         } else {
             parametersAsString.append("new Class[] {");

File: core/src/main/java/org/powermock/core/classloader/DeferSupportingClassLoader.java
Patch:
@@ -31,8 +31,6 @@ public abstract class DeferSupportingClassLoader extends ClassLoader {
 
 	ClassLoader deferTo;
 
-	static int count;
-
 	public String[] getIgnoredPackages() {
 		return deferPackages;
 	}

File: tests/utils/src/main/java/samples/staticinitializer/StaticInitializerExample.java
Patch:
@@ -23,7 +23,6 @@ public class StaticInitializerExample {
     private static final Set<String> mySet;
 
     static {
-        System.out.println("CL = " + StaticInitializerExample.class.getClassLoader());
         mySet = new HashSet<String>();
         if (true) {
             throw new RuntimeException("This code must be suppressed!");

File: reflect/src/main/java/org/powermock/reflect/internal/matcherstrategies/FieldAnnotationMatcherStrategy.java
Patch:
@@ -42,7 +42,7 @@ public boolean matches(Field field) {
 	}
 
 	@Override
-	public void notFound(Class<?> type) throws FieldNotFoundException {
+	public void notFound(Class<?> type, boolean isInstanceField) throws FieldNotFoundException {
 		throw new FieldNotFoundException("No field that has any of the annotation types \"" + getAnnotationNames()
 				+ "\" could be found in the class hierarchy of " + type.getName() + ".");
 	}

File: examples/simple/src/test/java/demo/org/powermock/examples/simple/GreeterTest.java
Patch:
@@ -25,6 +25,7 @@
 import static org.powermock.api.easymock.PowerMock.verify;
 import static org.powermock.reflect.Whitebox.invokeMethod;
 
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.core.classloader.annotations.PrepareForTest;
@@ -82,6 +83,7 @@ public void testRunWhenLoggerThrowsUnexpectedRuntimeExeception() throws Exceptio
 	@Test
 	@SuppressStaticInitializationFor
 	@PrepareForTest(fullyQualifiedNames="demo.org.powermock.examples.simple.SimpleConfig")
+	@Ignore("Temporary ignored, we need to investigate why this doesn't work")
 	public void assertItsOkToInvokeReflectionMethodsOnClasses() throws Exception {
 		new SimpleConfig();
 	}

File: modules/module-test/powermock/testng-test/src/test/java/samples/testng/PrivateFinalTest.java
Patch:
@@ -20,7 +20,6 @@
 import static org.powermock.api.easymock.PowerMock.createPartialMock;
 import static org.powermock.api.easymock.PowerMock.expectPrivate;
 
-import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.testng.Assert;
 import org.testng.annotations.Test;
 

File: reflect/src/main/java/org/powermock/reflect/internal/WhiteboxImpl.java
Patch:
@@ -1312,7 +1312,7 @@ static void throwExceptionWhenMultipleMethodMatchesFound(String helpInfo, Method
 	static void throwExceptionWhenMultipleConstructorMatchesFound(Constructor<?>[] constructors) {
 		if (constructors == null || constructors.length < 2) {
 			throw new IllegalArgumentException(
-					"Internal error: throwExceptionWhenMultipleMethodMatchesFound needs at least two methods.");
+					"Internal error: throwExceptionWhenMultipleConstructorMatchesFound needs at least two methods.");
 		}
 		StringBuilder sb = new StringBuilder();
 		sb

File: core/src/main/java/org/powermock/tests/utils/impl/PrepareForTestExtractorImpl.java
Patch:
@@ -35,7 +35,8 @@ public class PrepareForTestExtractorImpl extends AbstractTestClassExtractor {
 	/**
 	 * {@inheritDoc}
 	 */
-	public String[] getTestClasses(AnnotatedElement element) {
+	@Override
+	protected String[] getClassesToModify(AnnotatedElement element) {
 		Set<String> all = new LinkedHashSet<String>();
 
 		PrepareForTest prepareForTestAnnotation = element.getAnnotation(PrepareForTest.class);

File: core/src/main/java/org/powermock/tests/utils/impl/StaticConstructorSuppressExtractorImpl.java
Patch:
@@ -33,7 +33,8 @@ public class StaticConstructorSuppressExtractorImpl extends AbstractTestClassExt
 	/**
 	 * {@inheritDoc}
 	 */
-	public String[] getTestClasses(AnnotatedElement element) {
+	@Override
+	public String[] getClassesToModify(AnnotatedElement element) {
 		List<String> all = new LinkedList<String>();
 
 		final SuppressStaticInitializationFor suppressAnnotation = element.getAnnotation(SuppressStaticInitializationFor.class);

File: tests/utils/src/main/java/samples/staticinitializer/EvilStaticInitializerExample.java
Patch:
@@ -32,7 +32,7 @@ public class EvilStaticInitializerExample {
 
 	/*
 	 * We imagine that this method require the library to execute, but we want
-	 * to test it anyway in seperation.
+	 * to test it anyway in separation.
 	 */
 	public String doSomeNativeStuffUsingTheLoadedSystemLibrary() {
 		return "native stuff";

File: core/src/main/java/org/powermock/core/classloader/annotations/Mock.java
Patch:
@@ -15,6 +15,7 @@
  * For example:
  * 
  * <pre>
+ * ...
  * &#064;PowerMockListener(AnnotationEnabler.class)
  * public class PersonServiceTest {
  * 
@@ -39,6 +40,7 @@
  * following test:
  * 
  * <pre>
+ * ...
  * &#064;PowerMockListener(EasyMockAnnotationEnabler.class)
  * public class PersonServiceTest {
  * 

File: reflect/src/test/java/org/powermock/reflect/WhiteBoxTest.java
Patch:
@@ -514,7 +514,7 @@ public void testGetTwoMethodsWhenNoneOfThemAreFound() throws Exception {
 			Whitebox.getMethods(ClassWithSeveralMethodsWithSameName.class, "notFound1", "notFound2");
 		} catch (MethodNotFoundException e) {
 			assertEquals(
-					"No methods matching the name(s) notFound1 or notFound2 were found in the class hierachry of class org.powermock.reflect.testclasses.ClassWithSeveralMethodsWithSameName.",
+					"No methods matching the name(s) notFound1 or notFound2 were found in the class hierarchy of class org.powermock.reflect.testclasses.ClassWithSeveralMethodsWithSameName.",
 					e.getMessage());
 		}
 	}
@@ -525,7 +525,7 @@ public void testGetThreeMethodsWhenNoneOfThemAreFound() throws Exception {
 			Whitebox.getMethods(ClassWithSeveralMethodsWithSameName.class, "notFound1", "notFound2", "notFound3");
 		} catch (MethodNotFoundException e) {
 			assertEquals(
-					"No methods matching the name(s) notFound1, notFound2 or notFound3 were found in the class hierachry of class org.powermock.reflect.testclasses.ClassWithSeveralMethodsWithSameName.",
+					"No methods matching the name(s) notFound1, notFound2 or notFound3 were found in the class hierarchy of class org.powermock.reflect.testclasses.ClassWithSeveralMethodsWithSameName.",
 					e.getMessage());
 		}
 	}

File: modules/module-impl/junit3/src/main/java/org/powermock/modules/junit3/internal/PowerMockJUnit3RunnerDelegate.java
Patch:
@@ -22,6 +22,8 @@
 
 public interface PowerMockJUnit3RunnerDelegate {
 
+	public Class<?> getTestClass();
+	
 	public int testCount();
 
 	public int countTestCases();

File: modules/module-impl/junit4/src/main/java/org/powermock/modules/junit4/internal/impl/PowerMockJUnit44RunnerDelegateImpl.java
Patch:
@@ -206,16 +206,15 @@ protected void invokeTestMethod(final Method method, RunNotifier notifier) {
 
 			@Override
 			public void runBeforesThenTestThenAfters(Runnable test) {
+				// Initialize mock policies for each test
+				new MockPolicyInitializerImpl(testClass.getJavaClass()).initialize(this.getClass().getClassLoader());
 				powerMockTestNotifier.notifyBeforeTestMethod(testInstance, method, new Object[0]);
 				super.runBeforesThenTestThenAfters(test);
 			}
 
 			@Override
 			protected void runTestMethod() {
 				try {
-					// Initialize mock policies for each test
-					new MockPolicyInitializerImpl(testClass.getJavaClass())
-							.initialize(this.getClass().getClassLoader());
 					try {
 						if (extendsFromTestCase) {
 							Whitebox.invokeMethod(testInstance, "setUp");

File: examples/slf4j/src/test/java/demo/org/powermock/examples/Slf4jUserTest.java
Patch:
@@ -32,6 +32,5 @@ public void assertSlf4jMockPolicyWorks() throws Exception {
 		tested.getMessage();
 
 		verifyAll();
-
 	}
 }

File: reflect/src/main/java/org/powermock/reflect/exceptions/TooManyConstructorsFoundException.java
Patch:
@@ -16,8 +16,8 @@
 package org.powermock.reflect.exceptions;
 
 /**
- * A run-time exception that may be thrown to indicate that too many methods
- * were found.
+ * A run-time exception that may be thrown to indicate that too many
+ * constructors were found.
  */
 public class TooManyConstructorsFoundException extends RuntimeException {
 

File: reflect/src/main/java/org/powermock/reflect/exceptions/TooManyMethodsFoundException.java
Patch:
@@ -16,8 +16,8 @@
 package org.powermock.reflect.exceptions;
 
 /**
- * A run-time exception that may be thrown to indicate that too many
- * constructors were found.
+ * A run-time exception that may be thrown to indicate that too many methods
+ * were found.
  */
 public class TooManyMethodsFoundException extends RuntimeException {
 	private static final long serialVersionUID = -3267907243933066607L;

File: reflect/src/main/java/org/powermock/reflect/internal/WhiteboxImpl.java
Patch:
@@ -406,6 +406,7 @@ private static Field findSingleFieldUsingStrategy(FieldMatcherStrategy strategy,
 			throw new IllegalArgumentException("The object containing the field cannot be null");
 		}
 		Field foundField = null;
+		final Class<?> originalStartClass = startClass;
 		while (startClass != null) {
 			final Field[] declaredFields = startClass.getDeclaredFields();
 			for (Field field : declaredFields) {
@@ -424,7 +425,7 @@ private static Field findSingleFieldUsingStrategy(FieldMatcherStrategy strategy,
 			startClass = startClass.getSuperclass();
 		}
 		if (foundField == null) {
-			strategy.notFound(startClass);
+			strategy.notFound(originalStartClass);
 		}
 		foundField.setAccessible(true);
 		return foundField;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/stackoverflow/StackOverFlowTest.java
Patch:
@@ -21,7 +21,8 @@
 import org.powermock.modules.junit4.PowerMockRunner;
 
 /**
- * Make sure we don't get a stackOverFlowError here. Thans to ride.sputnik for reporting this!
+ * Make sure we don't get a stackOverFlowError here. Thanks to ride.sputnik for
+ * reporting this!
  */
 @RunWith(PowerMockRunner.class)
 @PrepareForTest(EvilHashCode.class)

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/staticinitializer/InterfaceStaticInitializerExampleTest.java
Patch:
@@ -25,8 +25,9 @@
 import samples.staticinitializer.InterfaceComputation;
 
 @RunWith(PowerMockRunner.class)
-@SuppressStaticInitializationFor({"samples.staticinitializer.InterfaceA", "samples.staticinitializer.InterfaceB", "samples.staticinitializer.InterfaceC" })
-public class IntefaceStaticInitializerExampleTest {
+@SuppressStaticInitializationFor( { "samples.staticinitializer.InterfaceA", "samples.staticinitializer.InterfaceB",
+		"samples.staticinitializer.InterfaceC" })
+public class InterfaceStaticInitializerExampleTest {
 
 	@Test
 	public void testSupressStaticInitializer() throws Exception {

File: core/src/main/java/org/powermock/core/MockRepository.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
+import java.util.TreeMap;
 
 import org.powermock.core.spi.MethodInvocationControl;
 import org.powermock.core.spi.NewInvocationControl;
@@ -46,7 +47,7 @@ public class MockRepository {
 	/**
 	 * Holds info about general method invocation mocks for instances.
 	 */
-	private static Map<Object, MethodInvocationControl> instanceMocks = new HashMap<Object, MethodInvocationControl>();
+	private static Map<Object, MethodInvocationControl> instanceMocks = new ListMap<Object, MethodInvocationControl>();
 
 	/**
 	 * Holds info about which methods that should return a substitute/another

File: reflect/src/main/java/org/powermock/reflect/internal/WhiteboxImpl.java
Patch:
@@ -194,7 +194,7 @@ public static Field getField(Class<?> type, String fieldName) {
 			}
 			Set<Class<?>> potential = new HashSet<Class<?>>();
 			potential.add(thisType.getSuperclass());
-			potential.addAll((Collection<? extends Class<?>>) Arrays.asList(thisType.getInterfaces()));
+			potential.addAll((Collection) Arrays.asList(thisType.getInterfaces()));
 			potential.removeAll(done);
 			examine.addAll(potential);
 		}

File: tests/utils/src/main/java/samples/classwithinnermembers/ClassWithInnerMembers.java
Patch:
@@ -1,8 +1,7 @@
 package samples.classwithinnermembers;
 
-
 /**
- * Class that is used to test that local and memeber class works with PowerMock.
+ * Class that is used to test that local and member class works with PowerMock.
  */
 public class ClassWithInnerMembers {
 

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/annotationbased/FinalDemoWithNiceAnnotationInjectionTest.java
Patch:
@@ -51,8 +51,8 @@ public void testSay() throws Exception {
 		verify(tested);
 		assertEquals("Expected and actual did not match", expected, actual);
 
-		// Should no longer be mocked by now.
+		// Should still be mocked by now.
 		String actual2 = tested.say("world");
-		assertEquals("Hello world", actual2);
+		assertEquals(expected, actual2);
 	}
 }

File: tests/utils/src/main/java/samples/suppressfield/DomainObject.java
Patch:
@@ -3,6 +3,5 @@
 public class DomainObject {
 
 	public DomainObject() {
-		System.out.println("lOADING!");
 	}
 }

File: tests/utils/src/main/java/samples/partialmocking/PartialMockingWithConstructor.java
Patch:
@@ -5,10 +5,10 @@
  */
 public class PartialMockingWithConstructor {
 	public PartialMockingWithConstructor() {
-		initialise();
+		initialize();
 	}
 
-	public void initialise() {
+	public void initialize() {
 	}
 
 	public void touch() {

File: reflect/src/main/java/org/powermock/reflect/exceptions/ConstructorNotFoundException.java
Patch:
@@ -20,7 +20,7 @@
  * not found.
  */
 public class ConstructorNotFoundException extends RuntimeException {
-	private static final long serialVersionUID = 5420195402982130931L;
+	private static final long serialVersionUID = -7329106318739007850L;
 
 	/**
 	 * Constructs a new exception with the specified detail message. The cause

File: reflect/src/main/java/org/powermock/reflect/exceptions/MethodInvocationException.java
Patch:
@@ -20,7 +20,7 @@
  * failed.
  */
 public class MethodInvocationException extends RuntimeException {
-	private static final long serialVersionUID = 5420195402982130931L;
+	private static final long serialVersionUID = 4051932931902248488L;
 
 	/**
 	 * Constructs a new exception with the specified detail message. The cause

File: reflect/src/main/java/org/powermock/reflect/exceptions/MethodNotFoundException.java
Patch:
@@ -20,7 +20,7 @@
  * found.
  */
 public class MethodNotFoundException extends RuntimeException {
-	private static final long serialVersionUID = 5420195402982130931L;
+	private static final long serialVersionUID = -1617211962548265914L;
 
 	/**
 	 * Constructs a new exception with the specified detail message. The cause

File: reflect/src/main/java/org/powermock/reflect/exceptions/TooManyConstructorsFoundException.java
Patch:
@@ -20,7 +20,8 @@
  * were found.
  */
 public class TooManyConstructorsFoundException extends RuntimeException {
-	private static final long serialVersionUID = -3267907243933066607L;
+
+	private static final long serialVersionUID = 1365925879589152290L;
 
 	/**
 	 * Constructs a new exception with the specified detail message. The cause

File: reflect/src/main/java/org/powermock/reflect/exceptions/TooManyFieldsFoundException.java
Patch:
@@ -20,7 +20,7 @@
  * found.
  */
 public class TooManyFieldsFoundException extends RuntimeException {
-	private static final long serialVersionUID = -3267907243933066607L;
+	private static final long serialVersionUID = 1564231184610341053L;
 
 	/**
 	 * Constructs a new exception with the specified detail message. The cause

File: api/easymock/src/main/java/org/powermock/api/easymock/mockpolicies/AbstractEasyMockLogPolicyBase.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.api.easymock.internal.mockpolicies;
+package org.powermock.api.easymock.mockpolicies;
 
 import static org.easymock.classextension.EasyMock.makeThreadSafe;
 import static org.powermock.api.easymock.PowerMock.createNiceMock;
@@ -28,7 +28,7 @@
 /**
  * A base class for EasyMock log policies.
  */
-public abstract class AbstractEasyMockLogPolicyBase implements PowerMockPolicy {
+abstract class AbstractEasyMockLogPolicyBase implements PowerMockPolicy {
 
 	/**
 	 * {@inheritDoc}

File: api/easymock/src/main/java/org/powermock/api/easymock/mockpolicies/JclMockPolicy.java
Patch:
@@ -15,7 +15,6 @@
  */
 package org.powermock.api.easymock.mockpolicies;
 
-import org.powermock.api.easymock.internal.mockpolicies.AbstractEasyMockLogPolicyBase;
 
 /**
  * A Jakarta Commons-Logging (JCL) mock policy. This mock policy deals with

File: api/easymock/src/main/java/org/powermock/api/easymock/mockpolicies/Log4jMockPolicy.java
Patch:
@@ -15,7 +15,6 @@
  */
 package org.powermock.api.easymock.mockpolicies;
 
-import org.powermock.api.easymock.internal.mockpolicies.AbstractEasyMockLogPolicyBase;
 
 /**
  * A log4j mock policy. This mock policy deals with solving log4j related

File: api/easymock/src/main/java/org/powermock/api/easymock/mockpolicies/Slf4jMockPolicy.java
Patch:
@@ -15,7 +15,6 @@
  */
 package org.powermock.api.easymock.mockpolicies;
 
-import org.powermock.api.easymock.internal.mockpolicies.AbstractEasyMockLogPolicyBase;
 
 /**
  * An slf4j mock policy. This mock policy deals with solving slf4j related

File: reflect/src/main/java/org/powermock/reflect/internal/WhiteboxImpl.java
Patch:
@@ -411,7 +411,7 @@ private static Field findSingleFieldUsingStrategy(FieldMatcherStrategy strategy,
 			startClass = startClass.getSuperclass();
 		}
 		if (foundField == null) {
-			strategy.notFound(object);
+			strategy.notFound(startClass);
 		}
 		foundField.setAccessible(true);
 		return foundField;

File: reflect/src/main/java/org/powermock/reflect/internal/matcherstrategies/AssignableToFieldTypeMatcherStrategy.java
Patch:
@@ -18,7 +18,6 @@
 import java.lang.reflect.Field;
 
 import org.powermock.reflect.internal.PrimitiveWrapper;
-import org.powermock.reflect.internal.WhiteboxImpl;
 
 public class AssignableToFieldTypeMatcherStrategy extends FieldTypeMatcherStrategy {
 
@@ -37,9 +36,9 @@ public boolean matches(Field field) {
 	}
 
 	@Override
-	public void notFound(Object object) throws IllegalArgumentException {
+	public void notFound(Class<?> type) throws IllegalArgumentException {
 		throw new IllegalArgumentException("No field assignable to \"" + expectedFieldType.getName() + "\" could be found in the class hierarchy of "
-				+ WhiteboxImpl.getType(object).getName() + ".");
+				+ type.getName() + ".");
 	}
 
 	@Override

File: reflect/src/main/java/org/powermock/reflect/internal/matcherstrategies/FieldMatcherStrategy.java
Patch:
@@ -37,8 +37,8 @@ public abstract class FieldMatcherStrategy {
 	 * Throws an {@link IllegalArgumentException} if the strategy criteria could
 	 * not be found.
 	 * 
-	 * @param object
-	 *            The object where the strategy criteria could not be found.
+	 * @param type
+	 *            The type of the object that was not found.
 	 */
-	public abstract void notFound(Object object) throws IllegalArgumentException;
+	public abstract void notFound(Class<?> type) throws IllegalArgumentException;
 }
\ No newline at end of file

File: core/src/main/java/org/powermock/core/MockRepository.java
Patch:
@@ -276,7 +276,7 @@ public static synchronized boolean shouldSuppressMethod(Method method) {
 	}
 
 	/**
-	 * @return <code>true</code> if the <tt>method</tt> should be suppressed.
+	 * @return <code>true</code> if the <tt>field</tt> should be suppressed.
 	 */
 	public static synchronized boolean shouldSuppressField(Field field) {
 		return suppressField.contains(field) || suppressFieldTypes.contains(field.getType().getName());

File: core/src/main/java/org/powermock/mockpolicies/MockPolicyClassLoadingSettings.java
Patch:
@@ -20,7 +20,7 @@
  * stored in this object to configure it's mock classloader to allow for
  * testability.
  * <p>
- * Since mock policies can be chained subsequent policies can override behavior
+ * Since mock policies can be chained previous policies can override behavior
  * of a previous policy. To avoid accidental overrides it's recommended
  * <i>add</i> behavior instead of <i>setting</i> behavior since the latter
  * overrides all previous configurations.
@@ -29,7 +29,7 @@ public interface MockPolicyClassLoadingSettings {
 
 	/**
 	 * Set which static initializers to suppress. Note that this overrides all
-	 * subsequent configurations.
+	 * previous configurations.
 	 */
 	void setStaticInitializersToSuppress(String[] staticInitializersToSuppress);
 
@@ -45,7 +45,7 @@ public interface MockPolicyClassLoadingSettings {
 
 	/**
 	 * Set which types that should be loaded (and possibly modified) by the mock
-	 * classloader. Note that this overrides all subsequent configurations.
+	 * classloader. Note that this overrides all previous configurations.
 	 */
 	void setFullyQualifiedNamesOfClassesToLoadByMockClassloader(String[] classes);
 

File: core/src/main/java/org/powermock/core/classloader/annotations/Mock.java
Patch:
@@ -12,10 +12,10 @@
  * which minimizes repetitive test code and makes the test more readable. In
  * order for PowerMock to control the life-cycle of the mocks you must supply
  * the {@link PowerMockListener} annotation to the class-level of the test case.
- * For example when using the EasyMock API:
+ * For example:
  * 
  * <pre>
- * &#064;PowerMockListener(EasyMockAnnotationEnabler.class)
+ * &#064;PowerMockListener(AnnotationEnabler.class)
  * public class PersonServiceTest {
  * 
  * 	&#064;Mock

File: examples/DocumentationExamples/src/test/java/powermock/examples/suppress/constructorhierarchy/ExampleWithEvilChildAndEvilGrandChildTest.java
Patch:
@@ -18,7 +18,6 @@
 import static org.junit.Assert.assertEquals;
 import static org.powermock.api.easymock.PowerMock.suppressConstructor;
 
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.core.classloader.annotations.PrepareForTest;
@@ -40,8 +39,7 @@ public void testSuppressConstructorHierarchy() throws Exception {
 		assertEquals(message, tested.getMessage());
 	}
 
-	@Ignore("Should suppress constructor code really suppress the full hierarchy?")
-	@Test(expected = UnsatisfiedLinkError.class)
+	@Test
 	public void testSuppressConstructorOfEvilChild() throws Exception {
 		suppressConstructor(EvilChild.class);
 		final String message = "myMessage";

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/finalmocking/NoDuplicateTest.java
Patch:
@@ -21,7 +21,6 @@
 import static org.powermock.api.easymock.PowerMock.replay;
 import static org.powermock.api.easymock.PowerMock.verify;
 
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.core.classloader.annotations.PrepareForTest;
@@ -44,8 +43,7 @@ public class NoDuplicateTest {
 
 	@Test
 	@PrepareForTest(FinalDemo.class)
-	@Ignore("The current solution doesn't work because other tests fail because of it. We need to look into it more.")
-	public void testSay() throws Exception {
+	public void assertThatPrepareForTestAnnotationAtMethodLevelButNotClassLevelWorks() throws Exception {
 		FinalDemo tested = createMock(FinalDemo.class);
 		String expected = "Hello altered World";
 		expect(tested.say("hello")).andReturn("Hello altered World");

File: modules/module-test/powermockito/junit4/src/test/java/samples/powermockito/junit4/staticmocking/MockStaticTest.java
Patch:
@@ -144,6 +144,6 @@ public void testMockStaticVoidWhenThrowingException() throws Exception {
 
 	@Test
 	public void testSpyOnStaticMethods() throws Exception {
-
+		
 	}
 }

File: reflect/src/main/java/org/powermock/reflect/internal/WhiteboxImpl.java
Patch:
@@ -73,6 +73,7 @@ public static Method getMethod(Class<?> type, String methodName, Class<?>... par
 			final Method[] declaredMethods = thisType.getDeclaredMethods();
 			for (Method method : declaredMethods) {
 				if (methodName.equals(method.getName()) && checkIfTypesAreSame(parameterTypes, method.getParameterTypes())) {
+					method.setAccessible(true);
 					return method;
 				}
 			}
@@ -1328,7 +1329,7 @@ private static boolean checkIfTypesAreSame(Class<?>[] expectedParameterTypes, Cl
 			return false;
 		} else {
 			for (int i = 0; i < expectedParameterTypes.length; i++) {
-				if (!expectedParameterTypes[i].isAssignableFrom(getType(actualParameterTypes[i])) && !expectedParameterTypes[i].equals(Class.class)) {
+				if (!expectedParameterTypes[i].isAssignableFrom(getType(actualParameterTypes[i]))) {
 					return false;
 				}
 			}

File: api/easymock/src/main/java/org/powermock/api/easymock/mockpolicies/Log4jMockPolicy.java
Patch:
@@ -43,7 +43,7 @@
 public class Log4jMockPolicy implements PowerMockPolicy {
 
 	public String[] getFullyQualifiedNamesOfClassesToLoadByMockClassloader() {
-		return new String[] { "org.apache.log4j.Appender", "org.apache.log4j.Logger" };
+		return new String[] { "org.apache.log4j." };
 	}
 
 	public String[] getFieldTypesToSuppress() {
@@ -84,6 +84,8 @@ public Map<Method, Object> getSubtituteReturnValues() {
 	private Method[] getLoggerMethods() {
 		try {
 			return Whitebox.getMethods(getLog4jType("org.apache.log4j.Logger"), "getLogger");
+		} catch (RuntimeException e) {
+			throw e;
 		} catch (Exception e) {
 			throw new RuntimeException(e);
 		}

File: api/easymock/src/main/java/org/powermock/api/easymock/mockpolicies/Slf4jMockPolicy.java
Patch:
@@ -42,7 +42,7 @@
 public class Slf4jMockPolicy implements PowerMockPolicy {
 
 	public String[] getFullyQualifiedNamesOfClassesToLoadByMockClassloader() {
-		return new String[] { "org.apache.log4j.Appender", "org.slf4j.LoggerFactory" };
+		return new String[] { "org.apache.log4j.Appender", "org.slf4j.LoggerFactory", "org.apache.log4j.xml.DOMConfigurator" };
 	}
 
 	public String[] getFieldTypesToSuppress() {
@@ -83,6 +83,8 @@ public Map<Method, Object> getSubtituteReturnValues() {
 	private Method[] getLoggerFactoryMethods() {
 		try {
 			return Whitebox.getMethods(getSlf4jType("org.slf4j.LoggerFactory"), "getLogger");
+		} catch (RuntimeException e) {
+			throw e;
 		} catch (Exception e) {
 			throw new RuntimeException(e);
 		}

File: core/src/main/java/org/powermock/tests/utils/impl/AbstractTestSuiteChunkerImpl.java
Patch:
@@ -402,6 +402,8 @@ protected void executeClassLoaderDependentMockPolicyMethods(final Class<?> testC
 					Object mockPolicyHandler = constructor.newInstance(mockPolicies);
 					Whitebox.invokeMethod(mockPolicyHandler, "initSubstituteReturnValues");
 				}
+			} catch (RuntimeException e) {
+				throw e;
 			} catch (Exception e) {
 				throw new IllegalStateException("PowerMock internal error: Failed to load class.", e);
 			}

File: core/src/main/java/org/powermock/core/TypeUtils.java
Patch:
@@ -26,8 +26,6 @@ public static Object getDefaultValue(Class<?> type) {
 	public static Object getDefaultValue(String fullyQualifiedTypeName) {
 		if (fullyQualifiedTypeName == null) { // Void
 			return "";
-		} else if (fullyQualifiedTypeName.equals(String.class.getName())) {
-			return "";
 		} else if (fullyQualifiedTypeName.equals(byte.class.getName())) {
 			return (byte) 0;
 		} else if (fullyQualifiedTypeName.equals(int.class.getName())) {

File: examples/DocumentationExamples/src/test/java/powermock/examples/suppress/method/ExampleWithEvilMethodTest.java
Patch:
@@ -36,6 +36,6 @@ public void testSuppressMethod() throws Exception {
 		suppressMethod(ExampleWithEvilMethod.class, "getEvilMessage");
 		final String message = "myMessage";
 		ExampleWithEvilMethod tested = new ExampleWithEvilMethod(message);
-		assertEquals(message, tested.getMessage());
+		assertEquals(message + "null", tested.getMessage());
 	}
 }

File: modules/module-test/powermockito/junit4/src/test/java/samples/powermockito/junit4/annotationbased/ChunkingAndStaticInitializerRemovalTest.java
Patch:
@@ -48,7 +48,7 @@ public void testPartialMockingWithNoChunking() throws Exception {
 		final String argument = "hello";
 		final String string = tested.getString();
 		assertEquals(Whitebox.getInternalState(SimpleStaticInitializerExample.class, String.class), string);
-		assertEquals("", tested.getConcatenatedString(argument));
+		assertNull(tested.getConcatenatedString(argument));
 
 		verify(tested).getConcatenatedString(argument);
 	}
@@ -58,7 +58,7 @@ public void testPartialMockingWithNoChunking() throws Exception {
 	public void testPartialMockingWithChunking() throws Exception {
 		final String argument = "hello";
 		assertNull(tested.getString());
-		assertEquals("", tested.getConcatenatedString(argument));
+		assertNull(tested.getConcatenatedString(argument));
 
 		verify(tested).getConcatenatedString(argument);
 	}

File: modules/module-test/powermockito/junit4/src/test/java/samples/powermockito/junit4/finalmocking/FinalDemoTest.java
Patch:
@@ -16,6 +16,7 @@
 package samples.powermockito.junit4.finalmocking;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 import static org.powermock.api.mockito.PowerMockito.mock;
@@ -40,7 +41,7 @@ public void assertMockFinalWithNoExpectationsWorks() throws Exception {
 
 		FinalDemo tested = mock(FinalDemo.class);
 
-		assertEquals("", tested.say(argument));
+		assertNull(tested.say(argument));
 
 		verify(tested).say(argument);
 	}

File: core/src/main/java/org/powermock/tests/utils/impl/PrepareForTestExtractorImpl.java
Patch:
@@ -92,7 +92,7 @@ private void addFullyQualifiedNames(Set<String> all, String[] fullyQualifiedName
 	}
 
 	private void addClassHierarchy(Set<String> all, Class<?> classToMock) {
-		while (!classToMock.equals(Object.class)) {
+		while (classToMock != null && !classToMock.equals(Object.class)) {
 			all.add(classToMock.getName());
 			classToMock = classToMock.getSuperclass();
 		}

File: api/easymock/src/main/java/org/powermock/api/easymock/powermocklistener/AnnotationEnabler.java
Patch:
@@ -30,7 +30,6 @@ public class AnnotationEnabler extends AbstractPowerMockTestListenerBase {
 	public void beforeTestMethod(Object testInstance, Method method, Object[] arguments) throws Exception {
 		Set<Field> fields = Whitebox.getFieldsAnnotatedWith(testInstance, org.powermock.core.classloader.annotations.Mock.class);
 		for (Field field : fields) {
-			field.setAccessible(true);
 			final Class<?> type = field.getType();
 			org.powermock.core.classloader.annotations.Mock annotation = field.getAnnotation(org.powermock.core.classloader.annotations.Mock.class);
 			Method[] methods = Whitebox.getMethods(type, annotation.value());

File: api/mockito/src/main/java/org/powermock/api/mockito/powermocklistener/AnnotationEnabler.java
Patch:
@@ -34,7 +34,6 @@ public void beforeTestMethod(Object testInstance, Method method, Object[] argume
 		Set<Field> fields = Whitebox.getFieldsAnnotatedWith(testInstance, org.mockito.Mock.class, Mock.class,
 				org.powermock.core.classloader.annotations.Mock.class);
 		for (Field field : fields) {
-			field.setAccessible(true);
 			final Class<?> type = field.getType();
 			Method[] methods = null;
 			if (field.isAnnotationPresent(org.powermock.core.classloader.annotations.Mock.class)) {
@@ -44,6 +43,5 @@ public void beforeTestMethod(Object testInstance, Method method, Object[] argume
 			}
 			field.set(testInstance, mock(type, methods));
 		}
-
 	}
 }

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/annotationbased/FinalDemoWithAnnotationInjectionTest.java
Patch:
@@ -31,7 +31,7 @@
 import samples.finalmocking.FinalDemo;
 
 /**
- * Test class to demonstrate non-static final mocking.
+ * Test class to demonstrate non-static final mocking with one listeners.
  * 
  */
 @RunWith(PowerMockRunner.class)

File: api/easymock/src/main/java/org/powermock/api/easymock/internal/signedsupport/SignedSupportingClassProxyFactory.java
Patch:
@@ -143,7 +143,7 @@ protected void filterConstructors(Class sc, List constructors) {
 		}
 		enhancer.setSuperclass(toMock);
 		enhancer.setCallbackType(interceptor.getClass());
-
+		
 		Class mockClass = enhancer.createClass();
 		Enhancer.registerCallbacks(mockClass, new Callback[] { interceptor });
 

File: core/src/main/java/org/powermock/core/MockRepository.java
Patch:
@@ -240,5 +240,4 @@ public static synchronized boolean shouldSuppressMethod(Method method) {
 	public static synchronized boolean shouldSuppressConstructor(Constructor<?> constructor) {
 		return suppressConstructor.contains(constructor);
 	}
-
 }

File: modules/module-impl/junit4-common/src/main/java/org/powermock/modules/junit4/common/internal/impl/AbstractCommonPowerMockRunner.java
Patch:
@@ -26,7 +26,7 @@
 import org.powermock.modules.junit4.common.internal.JUnit4TestSuiteChunker;
 import org.powermock.modules.junit4.common.internal.PowerMockJUnitRunnerDelegate;
 
-public class AbstractCommonPowerMockRunner extends Runner implements Filterable, Sortable {
+public abstract class AbstractCommonPowerMockRunner extends Runner implements Filterable, Sortable {
 
 	private JUnit4TestSuiteChunker suiteChunker;
 

File: modules/module-test/powermock/junit3-test/src/test/java/samples/junit3/privateandfinal/PrivateFinalTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit3.privateandfinal;
+package samples.junit3.privateandfinal;
 
 import static org.easymock.classextension.EasyMock.replay;
 import static org.easymock.classextension.EasyMock.verify;
@@ -24,8 +24,8 @@
 
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit3.PowerMockSuite;
-import org.powermock.modules.junit3.singleton.MockStaticTest;
 
+import samples.junit3.singleton.MockStaticTest;
 import samples.privateandfinal.PrivateFinal;
 
 /**

File: modules/module-test/powermock/junit3-test/src/test/java/samples/junit3/privateandfinal/StupidPrivateFinalTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit3.privateandfinal;
+package samples.junit3.privateandfinal;
 
 import static org.easymock.classextension.EasyMock.replay;
 import static org.easymock.classextension.EasyMock.verify;

File: modules/module-test/powermock/junit3-test/src/test/java/samples/junit3/singleton/MockStaticTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit3.singleton;
+package samples.junit3.singleton;
 
 import static org.easymock.EasyMock.expect;
 import static org.easymock.EasyMock.expectLastCall;

File: modules/module-test/powermock/junit3-test/src/test/java/samples/junit3/suppressconstructor/SuppressConstructorHierarchyDemoTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit3.suppressconstructor;
+package samples.junit3.suppressconstructor;
 
 import static org.powermock.api.easymock.PowerMock.suppressConstructor;
 import junit.framework.TestCase;

File: modules/module-test/powermock/junit4-legacy-test/src/test/java/samples/junit4/legacy/noannotation/NoAnnotationUsageTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.legacy.noannotation;
+package samples.junit4.legacy.noannotation;
 
 import static org.easymock.EasyMock.expect;
 import static org.powermock.api.easymock.PowerMock.createPartialMock;

File: modules/module-test/powermock/junit4-legacy-test/src/test/java/samples/junit4/legacy/noannotation/SetUpAndTearDownWhenExtendingTestCaseTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.powermock.modules.junit4.legacy.noannotation;
+package samples.junit4.legacy.noannotation;
 
 import junit.framework.TestCase;
 

File: modules/module-test/powermock/junit4-legacy-test/src/test/java/samples/junit4/legacy/noannotation/SetUpAndTearDownWhenNotExtendingTestCaseTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.powermock.modules.junit4.legacy.noannotation;
+package samples.junit4.legacy.noannotation;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;

File: modules/module-test/powermock/junit4-legacy-test/src/test/java/samples/junit4/legacy/singleton/MockStaticTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.legacy.singleton;
+package samples.junit4.legacy.singleton;
 
 import static org.easymock.EasyMock.expect;
 import static org.easymock.EasyMock.expectLastCall;

File: modules/module-test/powermock/junit4-legacy-test/src/test/java/samples/junit4/legacy/suppressconstructor/SuppressConstructorHierarchyDemoTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.legacy.suppressconstructor;
+package samples.junit4.legacy.suppressconstructor;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/abstractmocking/AbstractMethodMockingTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.powermock.modules.junit4.abstractmocking;
+package samples.junit4.abstractmocking;
 
 import static org.junit.Assert.assertEquals;
 import static org.powermock.api.easymock.PowerMock.createPartialMock;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/classhierarchy/CommonParentTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.classhierarchy;
+package samples.junit4.classhierarchy;
 
 import static org.junit.Assert.assertEquals;
 

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/constructor/PrivateConstructorInstantiationDemoTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.constructor;
+package samples.junit4.constructor;
 
 import static org.junit.Assert.assertEquals;
 import static org.powermock.reflect.Whitebox.invokeConstructor;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/constructor/PublicConstructorWithDependencyDemoTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.constructor;
+package samples.junit4.constructor;
 
 import static org.easymock.EasyMock.createMock;
 import static org.junit.Assert.assertEquals;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/constructorargs/ConstructorArgsDemoTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.constructorargs;
+package samples.junit4.constructorargs;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/expectnew/ExpectNewDemoTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.expectnew;
+package samples.junit4.expectnew;
 
 import static org.easymock.EasyMock.aryEq;
 import static org.easymock.EasyMock.expect;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/expectnew/MockDateTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.expectnew;
+package samples.junit4.expectnew;
 
 import java.lang.reflect.Method;
 import java.util.Date;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/expectnew/PrimitiveAndWrapperDemoTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.powermock.modules.junit4.expectnew;
+package samples.junit4.expectnew;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/expectnew/PrimitiveAndWrapperUserTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.powermock.modules.junit4.expectnew;
+package samples.junit4.expectnew;
 
 import static org.easymock.EasyMock.expect;
 import static org.junit.Assert.assertEquals;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/expectvoid/ExpectVoidDemoTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.expectvoid;
+package samples.junit4.expectvoid;
 
 import static org.powermock.api.easymock.PowerMock.createPartialMock;
 import static org.powermock.api.easymock.PowerMock.expectLastCall;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/finalmocking/FinalDemoTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.finalmocking;
+package samples.junit4.finalmocking;
 
 import static org.easymock.EasyMock.expect;
 import static org.junit.Assert.assertEquals;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/finalmocking/NoDuplicateTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.finalmocking;
+package samples.junit4.finalmocking;
 
 import static org.easymock.EasyMock.expect;
 import static org.junit.Assert.assertEquals;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/nativemocking/NativeMockingSampleTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.nativemocking;
+package samples.junit4.nativemocking;
 
 import static org.easymock.EasyMock.expect;
 import static org.easymock.classextension.EasyMock.createMock;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/newmocking/StupidNewTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.newmocking;
+package samples.junit4.newmocking;
 
 import static org.easymock.EasyMock.expect;
 import static org.easymock.EasyMock.expectLastCall;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/nice/NiceDemoTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.powermock.modules.junit4.nice;
+package samples.junit4.nice;
 
 import static org.powermock.api.easymock.PowerMock.createNicePartialMock;
 import static org.powermock.api.easymock.PowerMock.replay;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/noannotation/NoAnnotationUsageTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.noannotation;
+package samples.junit4.noannotation;
 
 import static org.easymock.EasyMock.expect;
 import static org.powermock.api.easymock.PowerMock.createPartialMock;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/noannotation/SetUpAndTearDownWhenExtendingTestCaseTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.powermock.modules.junit4.noannotation;
+package samples.junit4.noannotation;
 
 import junit.framework.TestCase;
 

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/noannotation/SetUpAndTearDownWhenNotExtendingTestCaseTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.powermock.modules.junit4.noannotation;
+package samples.junit4.noannotation;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/partialmocking/MockSelfDemoTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.partialmocking;
+package samples.junit4.partialmocking;
 
 import static org.easymock.EasyMock.expect;
 import static org.easymock.EasyMock.expectLastCall;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/partialmocking/MockSelfDemoWithSubClassTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.partialmocking;
+package samples.junit4.partialmocking;
 
 import static org.easymock.EasyMock.expect;
 import static org.junit.Assert.assertEquals;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/prepareeverything/ExpectNewDemoUsingThePrepareEverythingAnnotationTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.prepareeverything;
+package samples.junit4.prepareeverything;
 
 import static org.easymock.EasyMock.aryEq;
 import static org.easymock.EasyMock.expect;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/privateandfinal/PrivateFinalTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.privateandfinal;
+package samples.junit4.privateandfinal;
 
 import static org.easymock.classextension.EasyMock.replay;
 import static org.easymock.classextension.EasyMock.verify;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/privatefield/MockSelfPrivateFieldServiceClassTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.privatefield;
+package samples.junit4.privatefield;
 
 import static org.easymock.EasyMock.expect;
 import static org.easymock.classextension.EasyMock.createMock;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/privatefield/SimplePrivateFieldServiceClassTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.privatefield;
+package samples.junit4.privatefield;
 
 import static org.easymock.EasyMock.expect;
 import static org.easymock.classextension.EasyMock.createMock;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/privatemocking/PrivateMethodDemoTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.privatemocking;
+package samples.junit4.privatemocking;
 
 import static org.junit.Assert.assertEquals;
 import static org.powermock.api.easymock.PowerMock.createPartialMock;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/replayall/ReplayAllForExpectNewTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.replayall;
+package samples.junit4.replayall;
 
 import static org.easymock.EasyMock.expect;
 import static org.junit.Assert.assertEquals;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/replayall/ReplayAllForStaticMethodsTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.replayall;
+package samples.junit4.replayall;
 
 import static org.easymock.EasyMock.expect;
 import static org.junit.Assert.assertEquals;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/simplereturn/SimpleReturnExampleUserTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.powermock.modules.junit4.simplereturn;
+package samples.junit4.simplereturn;
 
 import static org.easymock.EasyMock.expect;
 import static org.junit.Assert.assertEquals;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/singleton/MockStaticTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.singleton;
+package samples.junit4.singleton;
 
 import static org.easymock.EasyMock.expect;
 import static org.easymock.EasyMock.expectLastCall;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/staticandinstance/StaticAndInstanceDemoTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.staticandinstance;
+package samples.junit4.staticandinstance;
 
 import static org.easymock.EasyMock.expect;
 import static org.junit.Assert.assertEquals;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/staticandinstance/StaticAndInstanceWithConstructorCodeDemoTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.staticandinstance;
+package samples.junit4.staticandinstance;
 
 import static org.easymock.EasyMock.expect;
 import static org.junit.Assert.assertEquals;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/staticinitializer/StaticInitializerExampleTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.staticinitializer;
+package samples.junit4.staticinitializer;
 
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertSame;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/strict/StrictDemoTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.powermock.modules.junit4.strict;
+package samples.junit4.strict;
 
 import static org.powermock.api.easymock.PowerMock.createPartialMock;
 import static org.powermock.api.easymock.PowerMock.createStrictPartialMock;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/suppressconstructor/CreateUnmockedTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.suppressconstructor;
+package samples.junit4.suppressconstructor;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/suppressconstructor/SuppressConstructorDemoTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.suppressconstructor;
+package samples.junit4.suppressconstructor;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/suppressconstructor/SuppressConstructorHierarchyDemoTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.suppressconstructor;
+package samples.junit4.suppressconstructor;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/suppressconstructor/SuppressNonParentConstructorDemoTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.suppressconstructor;
+package samples.junit4.suppressconstructor;
 
 import static org.junit.Assert.assertEquals;
 

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/suppressmethod/SuppressMethodTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.junit4.suppressmethod;
+package samples.junit4.suppressmethod;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/swing/ReallySimpleSwingDemoTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.powermock.modules.junit4.swing;
+package samples.junit4.swing;
 
 import static org.powermock.api.easymock.PowerMock.expectLastCall;
 import static org.powermock.api.easymock.PowerMock.mockStatic;

File: modules/module-test/powermock/junit4-test/src/test/java/samples/junit4/verify/AssertVerifyWorksTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.powermock.modules.junit4.verify;
+package samples.junit4.verify;
 
 import static org.easymock.EasyMock.expectLastCall;
 import static org.powermock.api.easymock.PowerMock.mockStatic;

File: modules/module-test/powermockito/junit4/src/test/java/samples/powermockito/junit4/finalmocking/FinalDemoTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.powermock.modules.powermockito.test.junit4.finalmocking;
+package samples.powermockito.junit4.finalmocking;
 
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.verify;
@@ -29,7 +29,6 @@
 
 /**
  * Test class to demonstrate non-static final mocking with Mockito.
- * 
  */
 @RunWith(PowerMockRunner.class)
 @PrepareForTest(FinalDemo.class)

File: modules/junit4/src/test/java/org/powermock/modules/junit4/SomeJUnit4Tests.java
Patch:
@@ -25,6 +25,7 @@
 import org.powermock.modules.junit4.noannotation.NoAnnotationUsageTest;
 import org.powermock.modules.junit4.partialmocking.MockSelfDemoTest;
 import org.powermock.modules.junit4.partialmocking.MockSelfDemoWithSubClassTest;
+import org.powermock.modules.junit4.prepareeverything.ExpectNewDemoUsingThePrepareEverythingAnnotationTest;
 import org.powermock.modules.junit4.privateandfinal.PrivateFinalTest;
 import org.powermock.modules.junit4.privatefield.MockSelfPrivateFieldServiceClassTest;
 import org.powermock.modules.junit4.privatefield.SimplePrivateFieldServiceClassTest;
@@ -46,6 +47,7 @@
 		PrivateFinalTest.class, MockSelfPrivateFieldServiceClassTest.class, SimplePrivateFieldServiceClassTest.class, PrivateMethodDemoTest.class,
 		MockStaticTest.class, StaticAndInstanceDemoTest.class, SuppressMethodTest.class, SuppressConstructorDemoTest.class,
 		SuppressConstructorHierarchyDemoTest.class, SuppressSpecificConstructorDemoTest.class, ConstructorArgsDemoTest.class,
-		NoAnnotationUsageTest.class, SimpleReturnExampleUserTest.class, StaticInitializerExampleTest.class })
+		NoAnnotationUsageTest.class, SimpleReturnExampleUserTest.class, StaticInitializerExampleTest.class,
+		ExpectNewDemoUsingThePrepareEverythingAnnotationTest.class })
 public class SomeJUnit4Tests {
 }

File: modules/junit4/src/test/java/org/powermock/modules/junit4/prepareeverything/ExpectNewDemoUsingThePrepareEverythingAnnotationTest.java
Patch:
@@ -33,6 +33,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.Whitebox;
@@ -52,6 +53,7 @@
  */
 @RunWith(PowerMockRunner.class)
 @PrepareEverythingForTest
+@Ignore
 public class ExpectNewDemoUsingThePrepareEverythingAnnotationTest {
 
 	@Test

File: core/src/main/java/org/powermock/core/MockGateway.java
Patch:
@@ -66,7 +66,7 @@ private static Object doMethodCall(Object object, String methodName, Object[] ar
 			methodInvocationControl = MockRepository.getClassMethodInvocationControl(objectType);
 		} else {
 			final Class<? extends Object> type = object.getClass();
-			objectType = Enhancer.isEnhanced(type) ? type.getSuperclass() : type;
+			objectType = WhiteboxImpl.getUnmockedType(type);
 			methodInvocationControl = MockRepository.getInstanceMethodInvocationControl(object);
 		}
 

File: modules/junit4-common/src/main/java/org/powermock/modules/junit4/common/internal/impl/JUnit4TestSuiteChunkerImpl.java
Patch:
@@ -36,7 +36,6 @@
 import org.junit.runner.manipulation.Sortable;
 import org.junit.runner.manipulation.Sorter;
 import org.junit.runner.notification.RunNotifier;
-import org.powermock.core.classloader.MockClassLoader;
 import org.powermock.modules.junit4.common.internal.JUnit4TestSuiteChunker;
 import org.powermock.modules.junit4.common.internal.PowerMockJUnitRunnerDelegate;
 import org.powermock.tests.utils.impl.AbstractTestSuiteChunkerImpl;
@@ -84,7 +83,8 @@ public void run(RunNotifier notifier) {
 
 		for (PowerMockJUnitRunnerDelegate delegate : delegates) {
 			Entry<ClassLoader, List<Method>> next = iterator.next();
-			PowerMockRunListener powerMockListener = new PowerMockRunListener(next.getKey());
+			final ClassLoader key = next.getKey();
+			PowerMockRunListener powerMockListener = new PowerMockRunListener(key);
 			notifier.addListener(powerMockListener);
 			delegate.run(notifier);
 		}

File: modules/junit4/src/main/java/org/powermock/modules/junit4/internal/impl/PowerMockJUnit44RunnerDelegateImpl.java
Patch:
@@ -44,6 +44,7 @@
 import org.junit.runner.notification.Failure;
 import org.junit.runner.notification.RunNotifier;
 import org.powermock.Whitebox;
+import org.powermock.core.classloader.annotations.PrepareEverythingForTest;
 import org.powermock.modules.junit4.common.internal.PowerMockJUnitRunnerDelegate;
 import org.powermock.modules.junit4.internal.impl.testcaseworkaround.PowerMockJUnit4MethodValidator;
 import org.powermock.tests.utils.impl.PrepareForTestExtractorImpl;
@@ -216,7 +217,8 @@ protected void runTestMethod() {
 							final String className = actual.getStackTrace()[0].getClassName();
 							if (actual instanceof NullPointerException && !className.startsWith("java.lang")
 									&& !className.startsWith("org.powermock") && !className.startsWith("org.junit")
-									&& !new PrepareForTestExtractorImpl().isPrepared(testClass.getJavaClass(), className)) {
+									&& !new PrepareForTestExtractorImpl().isPrepared(testClass.getJavaClass(), className)
+									&& !testClass.getJavaClass().isAnnotationPresent(PrepareEverythingForTest.class)) {
 								Whitebox.setInternalState(actual, "detailMessage", "Perhaps the class " + className + " must be prepared for test?",
 										Throwable.class);
 							}

File: core/src/main/java/org/powermock/PowerMock.java
Patch:
@@ -1377,7 +1377,7 @@ public static synchronized <T> T createNiceMockAndExpectNew(Class<T> type, Objec
 		expectNew(type, arguments).andReturn(mock);
 		return mock;
 	}
-	
+
 	/**
 	 * Convenience method for createStrictMock followed by expectNew.
 	 * 

File: examples/ApacheMina/src/test/java/org/apache/mina/transport/socket/nio/PrepareOnlyThisForTestAnnotationTest.java
Patch:
@@ -14,13 +14,12 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.Whitebox;
-import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.core.classloader.annotations.PrepareOnlyThisForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
 /**
- * This test validates that the {@link PrepareForTest} annotation modifies the
- * class hierarchy and not only the specified classes.
+ * This test validates that the {@link PrepareOnlyThisForTest} annotation
+ * modifies the only the specified classes and not the full hierarchy.
  */
 @RunWith(PowerMockRunner.class)
 @PrepareOnlyThisForTest( { NioDatagramSession.class, NioProcessor.class })

File: core/src/main/java/org/powermock/core/MockGateway.java
Patch:
@@ -139,6 +139,8 @@ public static synchronized Object staticConstructorCall(String className) {
 	private static Object suppressMethodCode(String returnTypeAsString) {
 		if (returnTypeAsString == null) { // Void
 			return "";
+		} else if (returnTypeAsString.equals(String.class.getName())) {
+			return "";
 		} else if (returnTypeAsString.equals(byte.class.getName())) {
 			return (byte) 0;
 		} else if (returnTypeAsString.equals(int.class.getName())) {

File: examples/DocumentationExamples/src/test/java/powermock/examples/newmocking/PersistenceManagerTest.java
Patch:
@@ -81,7 +81,7 @@ public void testCreateDirectoryStructure_fails() throws Exception {
 
 		PersistenceManager tested = new PersistenceManager();
 
-		expectNew(File.class).andReturn(mFileMock);
+		expectNew(File.class, path).andReturn(mFileMock);
 
 		expect(mFileMock.exists()).andReturn(true);
 

File: examples/DocumentationExamples/src/test/java/powermock/examples/newmocking/PersistenceManagerTest.java
Patch:
@@ -35,7 +35,7 @@
  * PowerMock's ability to mock new instance calls.
  */
 @RunWith(PowerMockRunner.class)
-@PrepareForTest( { PersistenceManager.class, File.class })
+@PrepareForTest(PersistenceManager.class)
 public class PersistenceManagerTest {
 
 	@Test

File: modules/junit4/src/test/java/org/powermock/modules/junit4/nice/NiceDemoTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.powermock.modules.junit4.nice;
 
+import static org.powermock.PowerMock.createNicePartialMock;
 import static org.powermock.PowerMock.replay;
-import static org.powermock.PowerMock.createPartialMockNice;
 import static org.powermock.PowerMock.verify;
 
 import org.junit.Test;
@@ -20,7 +20,7 @@ public class NiceDemoTest {
 
 	@Test
 	public void testCallAThenB_noExpectations() throws Exception {
-		NiceDemo tested = createPartialMockNice(NiceDemo.class, "A", "B");
+		NiceDemo tested = createNicePartialMock(NiceDemo.class, "A", "B");
 
 		replay(tested);
 

File: core/src/main/java/org/powermock/core/MockGateway.java
Patch:
@@ -130,6 +130,8 @@ public static void clear() {
 	}
 
 	public static synchronized Object staticConstructorCall(String className) {
+		@SuppressWarnings("unused")
+		Class<?> ikk = MockRepository.class;
 		if (MockRepository.shouldSuppressStaticInitializerFor(className)) {
 			return "suppress";
 		}

File: core/src/main/java/org/powermock/core/WhiteboxImpl.java
Patch:
@@ -454,7 +454,7 @@ public static Method findMethodOrThrowException(Object tested, Class<?> declarin
 			}
 		}
 
-		WhiteboxImpl.throwExceptionIfMethodWasNotFound(tested.getClass(), methodToExecute, potentialMethodToInvoke, arguments);
+		WhiteboxImpl.throwExceptionIfMethodWasNotFound(getArgumentType(tested), methodToExecute, potentialMethodToInvoke, arguments);
 		return potentialMethodToInvoke;
 	}
 

File: modules/junit3/src/main/java/org/powermock/modules/junit3/internal/JUnit3TestSuiteChunker.java
Patch:
@@ -27,11 +27,11 @@ public interface JUnit3TestSuiteChunker extends TestSuiteChunker {
 
 	public void run(TestResult result);
 
-	public void addTest(Test test);
+	public void addTest(Test test) throws Exception;
 
 	public void runTest(Test test, TestResult result);
 
-	public void addTestSuite(Class<? extends TestCase> testClass);
+	public void addTestSuite(Class<? extends TestCase> testClass) throws Exception;
 
 	public Test testAt(int index);
 

File: modules/junit4-legacy/src/main/java/org/powermock/modules/junit4/legacy/internal/impl/testcaseworkaround/PowerMockJUnit4LegacyTestMethodRunner.java
Patch:
@@ -11,6 +11,7 @@
 import org.junit.runner.Description;
 import org.junit.runner.notification.RunNotifier;
 import org.powermock.Whitebox;
+import org.powermock.tests.utils.impl.StaticConstructorSuppressExtractorImpl;
 
 /**
  * This class is needed because the test method runner creates a new instance of

File: core/src/main/java/org/powermock/core/MockGateway.java
Patch:
@@ -119,7 +119,7 @@ public static synchronized Object newInstanceCall(Class<?> type, Object[] args,
 		}
 		// Check if we should suppress the constructor code
 		if (suppressConstructor.contains(WhiteboxImpl.getConstructor(type, sig))) {
-			return WhiteboxImpl.getFirstParentConstructor(type.getSuperclass());
+			return WhiteboxImpl.getFirstParentConstructor(type);
 		}
 		return PROCEED;
 	}

File: modules/junit4/src/test/java/org/powermock/modules/junit4/AllJUnit4Tests.java
Patch:
@@ -37,9 +37,10 @@
 import org.powermock.modules.junit4.staticinitializer.StaticInitializerExampleTest;
 import org.powermock.modules.junit4.suppressconstructor.SuppressConstructorDemoTest;
 import org.powermock.modules.junit4.suppressconstructor.SuppressConstructorHierarchyDemoTest;
-import org.powermock.modules.junit4.suppressconstructor.SuppressSpecificConstructorDemoTest;
 import org.powermock.modules.junit4.suppressmethod.SuppressMethodTest;
 
+import samples.suppressconstructor.SuppressSpecificConstructorDemoTest;
+
 @RunWith(Suite.class)
 @SuiteClasses( { PrivateConstructorInstantiationDemoTest.class, ExpectNewDemoTest.class,
 		ExpectVoidDemoTest.class, FinalDemoTest.class, MockSelfDemoTest.class, MockSelfDemoWithSubClassTest.class, StupidNewTest.class,

File: modules/junit4/src/test/java/org/powermock/modules/junit4/SomeJUnit4Tests.java
Patch:
@@ -35,9 +35,10 @@
 import org.powermock.modules.junit4.staticinitializer.StaticInitializerExampleTest;
 import org.powermock.modules.junit4.suppressconstructor.SuppressConstructorDemoTest;
 import org.powermock.modules.junit4.suppressconstructor.SuppressConstructorHierarchyDemoTest;
-import org.powermock.modules.junit4.suppressconstructor.SuppressSpecificConstructorDemoTest;
 import org.powermock.modules.junit4.suppressmethod.SuppressMethodTest;
 
+import samples.suppressconstructor.SuppressSpecificConstructorDemoTest;
+
 // This test verifies that the SuppressConstructorHierachyDemo works, issue http://code.google.com/p/powermock/issues/detail?id=43.
 
 @RunWith(Suite.class)

File: modules/junit4/src/test/java/org/powermock/modules/junit4/AllJUnit4Tests.java
Patch:
@@ -41,11 +41,11 @@
 import org.powermock.modules.junit4.suppressmethod.SuppressMethodTest;
 
 @RunWith(Suite.class)
-@SuiteClasses( { StaticInitializerExampleTest.class, PrivateConstructorInstantiationDemoTest.class, ExpectNewDemoTest.class,
+@SuiteClasses( { PrivateConstructorInstantiationDemoTest.class, ExpectNewDemoTest.class,
 		ExpectVoidDemoTest.class, FinalDemoTest.class, MockSelfDemoTest.class, MockSelfDemoWithSubClassTest.class, StupidNewTest.class,
 		PrivateFinalTest.class, MockSelfPrivateFieldServiceClassTest.class, SimplePrivateFieldServiceClassTest.class,
 		PrivateMethodDemoTest.class, MockStaticTest.class, StaticAndInstanceDemoTest.class, SuppressMethodTest.class,
 		SuppressConstructorDemoTest.class, SuppressConstructorHierarchyDemoTest.class, SuppressSpecificConstructorDemoTest.class,
-		ConstructorArgsDemoTest.class, NoAnnotationUsageTest.class, SimpleReturnExampleUserTest.class })
+		ConstructorArgsDemoTest.class, NoAnnotationUsageTest.class, SimpleReturnExampleUserTest.class, StaticInitializerExampleTest.class })
 public class AllJUnit4Tests {
 }

File: modules/junit4/src/test/java/org/powermock/modules/junit4/suppressconstructor/SuppressConstructorHierarchyDemoTest.java
Patch:
@@ -20,7 +20,6 @@
 import static org.junit.Assert.fail;
 import static org.powermock.PowerMock.suppressConstructorCodeHierarchy;
 
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.core.classloader.annotations.PrepareForTest;
@@ -51,9 +50,8 @@ public void testNotSuppressConstructorWithoutByteCodeManipulation() throws Excep
 			assertEquals("This should be suppressed!!", e.getMessage());
 		}
 	}
-
+	
 	@Test
-	@Ignore("Disabled for now")
 	public void testNotSuppressConstructorWithByteCodeManipulation() throws Exception {
 		try {
 			new SuppressConstructorHierarchyChild("message");

File: core/src/main/java/org/powermock/core/MockGateway.java
Patch:
@@ -137,7 +137,7 @@ public static synchronized Object staticConstructorCall(String className) {
 	}
 
 	private static Object suppressMethodCode(String returnTypeAsString) {
-		if (returnTypeAsString.equals(null)) { // Void
+		if (returnTypeAsString == null) { // Void
 			return "";
 		} else if (returnTypeAsString.equals(byte.class.getName())) {
 			return (byte) 0;

File: core/src/test/java/org/powermock/WhiteBoxTest.java
Patch:
@@ -136,13 +136,13 @@ public void testMethodWithPrimitiveIntAndString_primitive() throws Exception {
 	@Test
 	public void testMethodWithPrimitiveIntAndString_Wrapped() throws Exception {
 		assertEquals("My int value is: " + 8, (String) Whitebox.invokeMethod(new ClassWithPrivateMethods(), "methodWithPrimitiveIntAndString",
-				new Integer(8), "My int value is: "));
+				Integer.valueOf(8), "My int value is: "));
 	}
 
 	@Test
 	public void testMethodWithPrimitiveAndWrappedInt_primtive_wrapped() throws Exception {
 		assertEquals(17, Whitebox.invokeMethod(new ClassWithPrivateMethods(), "methodWithPrimitiveAndWrappedInt", new Class[] { int.class,
-				Integer.class }, 9, new Integer(8)));
+				Integer.class }, 9, Integer.valueOf(8)));
 	}
 
 	@Test

File: core/src/main/java/org/powermock/PowerMock.java
Patch:
@@ -1259,7 +1259,7 @@ public static synchronized <T> IExpectationSetters<T> expectNew(Class<T> type, O
 		WhiteboxImpl.findConstructorOrThrowException(type, arguments);
 
 		/*
-		 * Check if this object has been mocked before
+		 * Check if this type has been mocked before
 		 */
 		NewInvocationControl<T> newInvocationControl = (NewInvocationControl<T>) MockRepository.getNewInstanceSubstitute(unmockedType);
 		if (newInvocationControl == null) {

File: core/src/main/java/org/powermock/core/WhiteboxImpl.java
Patch:
@@ -947,6 +947,8 @@ public static Object performMethodInvocation(Object tested, Method methodToInvok
 			Throwable cause = e.getCause();
 			if (cause instanceof Exception) {
 				throw (Exception) cause;
+			} else if (cause instanceof Error) {
+				throw (Error) cause;
 			} else {
 				throw new RuntimeException(cause);
 			}

File: core/src/test/java/org/powermock/ClassWithChildThatHasInternalState.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.powermock;
 
-public class ClassWithSubclassThatHasInternalState extends
+public class ClassWithChildThatHasInternalState extends
 		ClassWithInternalState {
 
 }

File: examples/tutorial/src/test/java/demo/org/powermock/examples/tutorial/partialmocking/service/impl/withoutpowermock/ProviderServiceWithoutPowerMockImplTest.java
Patch:
@@ -120,7 +120,6 @@ public void testServiceProvider_notFound() throws Exception {
 	}
 
 	@Test
-	@SuppressWarnings("unchecked")
 	public void getAllServiceProducers() throws Exception {
 		final String expectedName = "mock name";
 		final int expectedId = 1;
@@ -141,7 +140,6 @@ public void getAllServiceProducers() throws Exception {
 	}
 
 	@Test
-	@SuppressWarnings("unchecked")
 	public void getAllServiceProducers_empty() throws Exception {
 		expect(providerDaoMock.getAllServiceProducers()).andReturn(new HashSet<ServiceArtifact>());
 

File: examples/tutorial/src/test/java/demo/org/powermock/examples/tutorial/staticmocking/impl/withoutpowermock/ServiceRegistratorTest.java
Patch:
@@ -79,7 +79,6 @@ protected void verifyAll() {
 	 *             If an error occurs.
 	 */
 	@Test
-	@SuppressWarnings("unchecked")
 	public void testRegisterService() throws Exception {
 		final String name = "a name";
 		final Object object = new Object();

File: modules/junit3/src/main/java/org/powermock/modules/junit3/PowerMockSuite.java
Patch:
@@ -58,7 +58,6 @@ public void run(TestResult result) {
 	/**
 	 * {@inheritDoc}
 	 */
-	@SuppressWarnings("unchecked")
 	@Override
 	public void addTest(Test test) {
 		testChunker.addTest(test);

File: modules/junit3/src/test/java/org/powermock/modules/junit3/singleton/MockStaticTest.java
Patch:
@@ -35,7 +35,6 @@
 @PrepareForTest({StaticService.class, StaticHelper.class})
 public class MockStaticTest extends TestCase {
 
-	@SuppressWarnings("unchecked")
 	public static TestSuite suite() throws Exception {
 		// This is not the best way to add a test suite, but we do this here
 		// for testing purposes.

File: tests/utils/src/main/java/samples/singleton/StaticService.java
Patch:
@@ -27,7 +27,6 @@
 public class StaticService {
 
 	private static int number = 17;
-	@SuppressWarnings("unused")
 	private int secret = 23;
 
 	public static int getNumberFromInner() {

File: core/src/main/java/org/powermock/core/PrimitiveWrapper.java
Patch:
@@ -73,7 +73,7 @@ public static Class<?>[] toPrimitiveType(Class<?>[] types) {
 	 * 
 	 * @param wrapperType
 	 *            The wrapper type to convert to its primitive counter part.
-	 * @return The primitive counter part of <code>null</code> if the class
+	 * @return The primitive counter part or <code>null</code> if the class
 	 *         did not have a primitive counter part.
 	 * 
 	 */

File: core/src/main/java/org/powermock/PowerMock.java
Patch:
@@ -1241,7 +1241,7 @@ public static synchronized <T> T mockConstruction(Class<T> type) {
 	 */
 	@SuppressWarnings("unchecked")
 	public static synchronized <T> IExpectationSetters<T> expectNew(
-			Class<T> type) {
+			Class<T> type) throws Exception {
 		if (type == null) {
 			throw new IllegalArgumentException("type cannot be null");
 		}
@@ -1468,7 +1468,8 @@ private static Class<?>[] mergeArgumentTypes(Class<?> firstArgumentType,
 	private static <T> IExpectationSetters<T> doExpectPrivate(Object instance,
 			Method methodToExpect, Object... arguments) {
 		doInvokeMethod(instance, methodToExpect, arguments);
-		return (IExpectationSetters<T>) org.easymock.classextension.EasyMock.expectLastCall();
+		return (IExpectationSetters<T>) org.easymock.classextension.EasyMock
+				.expectLastCall();
 	}
 
 	private static void doInvokeMethod(Object instance, Method methodToExpect,

File: core/src/main/java/org/powermock/core/invocationcontrol/newinstance/NewInvocationControl.java
Patch:
@@ -22,9 +22,8 @@
  * is associated with an entire object) and the Methods for this object that
  * should be mocked.
  * 
- * @author Johan Haleby
  */
 public interface NewInvocationControl<T> {
 
-	public T createInstance();
+	public T createInstance() throws Exception;
 }

File: core/src/main/java/org/powermock/Whitebox.java
Patch:
@@ -345,8 +345,6 @@ private static Object doInvokeMethod(Object tested,
 		Method methodToInvoke = findMethodOrThrowException(tested,
 				declaringClass, methodToExecute, arguments);
 
-		methodToInvoke.setAccessible(true);
-
 		// Invoke test
 		return performMethodInvocation(tested, methodToInvoke, arguments);
 	}

File: core/src/main/java/org/powermock/core/MockGateway.java
Patch:
@@ -86,8 +86,8 @@ private static Object doMethodCall(Object object, String methodName,
 
 			final InvocationHandler handler = methodInvocationControl
 					.getInvocationHandler();
-			returnValue = handler.invoke(objectType, objectType
-					.getDeclaredMethod(methodName, sig), args);
+			returnValue = handler.invoke(objectType, Whitebox.getMethod(objectType,
+					methodName, sig), args);
 		} else {
 			final boolean shouldSuppressMethodCode = suppressMethod
 					.contains(Whitebox.getMethod(objectType, methodName, sig));

File: core/src/main/java/org/powermock/core/transformers/impl/MainMockTransformer.java
Patch:
@@ -114,6 +114,7 @@ private void addDefaultConstructorInSuperClass(final CtClass clazz) throws Canno
 					try {
 						CtConstructor declaredConstructor = superClass.getDeclaredConstructor(new CtClass[] {});
 						if (!superClass.getName().equals(Object.class.getName())) {
+							superClass.defrost();
 							declaredConstructor.setBody("{super();}");
 						}
 						tempClass = superClass;

File: modules/junit4-common/src/main/java/org/powermock/modules/junit4/common/internal/impl/JUnit4TestSuiteChunkerImpl.java
Patch:
@@ -77,8 +77,7 @@ public void run(RunNotifier notifier) {
 
 	public boolean shouldExecuteTestForMethod(Method potentialTestMethod) {
 		return (potentialTestMethod.getName().startsWith("test") && Modifier.isPublic(potentialTestMethod.getModifiers())
-				&& potentialTestMethod.getReturnType().equals(Void.TYPE) || potentialTestMethod.isAnnotationPresent(Test.class))
-				&& !potentialTestMethod.isAnnotationPresent(Ignore.class);
+				&& potentialTestMethod.getReturnType().equals(Void.TYPE) || potentialTestMethod.isAnnotationPresent(Test.class));
 	}
 
 	@Override

File: modules/junit4/src/main/java/org/powermock/modules/junit4/internal/impl/PowerMockJUnit44RunnerDelegateImpl.java
Patch:
@@ -72,7 +72,7 @@ public PowerMockJUnit44RunnerDelegateImpl(Class<?> klass) throws InitializationE
 
 	@SuppressWarnings("unchecked")
 	protected List<Method> getTestMethods(Class<?> klass, String[] methodsToRun) {
-		if (methodsToRun == null) {
+		if (methodsToRun == null || methodsToRun.length == 0) {
 			// The getTestMethods of TestClass is not visible so we need to look
 			// it invoke it using reflection.
 			try {

File: core/src/main/java/org/powermock/core/classloader/MockClassLoader.java
Patch:
@@ -54,7 +54,7 @@ public final class MockClassLoader extends DeferSupportingClassLoader {
 
 	public MockClassLoader(String... classesToMock) {
 		super(MockClassLoader.class.getClassLoader(), new String[] { "java.",
-				"sun.", "org.junit.", "junit.",
+				"javax.swing.", "sun.", "org.junit.", "junit.",
 				"org.powermock.modules.junit4.internal.",
 				"org.powermock.modules.junit4.legacy.internal.",
 				"org.powermock.modules.junit4.common.internal",

File: core/src/test/java/org/powermock/WhiteBoxTest.java
Patch:
@@ -22,6 +22,7 @@
 import java.lang.reflect.Method;
 
 import org.powermock.Whitebox;
+import org.junit.Ignore;
 import org.junit.Test;
 
 
@@ -58,6 +59,7 @@ public void testFindMethod_classContainingOnlyMethodsWithParameters()
 	}
 
 	@Test
+	@Ignore
 	public void testFindMethod_noMethodFound() throws Exception {
 		try {
 			Whitebox.findMethodOrThrowException(

File: modules/junit4/src/test/java/org/powermock/modules/junit4/expectnew/ExpectNewDemoTest.java
Patch:
@@ -144,7 +144,6 @@ public void testEasyMock() throws Exception {
 	}
 
 	@Test
-	@Ignore("This is buggy and thus should be ignored, but why??")
 	public void testMultipleNew() throws Exception {
 		ExpectNewDemo tested = new ExpectNewDemo();
 

File: modules/junit4/src/test/java/org/powermock/modules/junit4/staticinitializer/StaticInitializerExampleTest.java
Patch:
@@ -29,7 +29,7 @@
 public class StaticInitializerExampleTest {
 
 	@Test
-	@Ignore
+	@Ignore("Because problems with maven???")
 	public void testname() throws Exception {
 		Assert
 				.assertNull(

