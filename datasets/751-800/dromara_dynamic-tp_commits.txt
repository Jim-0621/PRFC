File: common/src/main/java/org/dromara/dynamictp/common/util/ExecutorUtil.java
Patch:
@@ -51,7 +51,7 @@ private static void tryPrintError(Runnable r, Throwable t) {
         if (r instanceof FutureTask) {
             try {
                 FutureTask<?> future = (FutureTask<?>) r;
-                if (future.isDone()) {
+                if (future.isDone() && !future.isCancelled()) {
                     future.get();
                 }
             } catch (InterruptedException e) {

File: common/src/main/java/org/dromara/dynamictp/common/util/ExecutorUtil.java
Patch:
@@ -51,7 +51,7 @@ private static void tryPrintError(Runnable r, Throwable t) {
         if (r instanceof FutureTask) {
             try {
                 FutureTask<?> future = (FutureTask<?>) r;
-                if (future.isDone()) {
+                if (future.isDone() && !future.isCancelled()) {
                     future.get();
                 }
             } catch (InterruptedException e) {

File: test/test-common/src/test/java/org/dromara/dynamictp/test/common/em/JreEnumTest.java
Patch:
@@ -45,13 +45,13 @@ void testJRE11() {
     @Test
     @EnabledOnJre(value = JRE.JAVA_11)
     void testJRE11GreaterThan() {
-        Assertions.assertTrue(JreEnum.JAVA_11.greaterThan(JreEnum.JAVA_8));
+        Assertions.assertTrue(JreEnum.greaterThan(JreEnum.JAVA_8));
     }
 
     @Test
     @EnabledOnJre(value = JRE.JAVA_8)
     void testJRE8LessThan() {
-        Assertions.assertTrue(JreEnum.JAVA_8.lessThan(JreEnum.JAVA_11));
+        Assertions.assertTrue(JreEnum.lessThan(JreEnum.JAVA_11));
     }
 
 }

File: common/src/main/java/org/dromara/dynamictp/common/util/DtpPropertiesBinderUtil.java
Patch:
@@ -123,7 +123,7 @@ private static Object getProperty(String key, Object environment) {
             Map<?, Object> properties = (Map<?, Object>) environment;
             return properties.get(key);
         } else {
-            return ContextManagerHelper.getEnvironmentProperty(key);
+            return ContextManagerHelper.getEnvironmentProperty(key, environment);
         }
     }
 
@@ -132,7 +132,7 @@ private static boolean contains(String key, Object environment) {
             Map<?, Object> properties = (Map<?, Object>) environment;
             return properties.containsKey(key);
         } else {
-            return StringUtils.isNotBlank(ContextManagerHelper.getEnvironmentProperty(key));
+            return StringUtils.isNotBlank(ContextManagerHelper.getEnvironmentProperty(key, environment));
         }
     }
 

File: adapter/adapter-common/src/main/java/org/dromara/dynamictp/adapter/common/AbstractDtpAdapter.java
Patch:
@@ -74,7 +74,7 @@ public abstract class AbstractDtpAdapter implements DtpAdapter {
 
     protected final Map<String, ExecutorWrapper> executors = Maps.newHashMap();
 
-    public AbstractDtpAdapter() {
+    protected AbstractDtpAdapter() {
         EventBusManager.register(this);
     }
 

File: common/src/main/java/org/dromara/dynamictp/common/constant/DynamicTpConst.java
Patch:
@@ -32,7 +32,7 @@ public final class DynamicTpConst {
 
     private DynamicTpConst() { }
 
-    public static final String MAIN_PROPERTIES_PREFIX = "spring.dynamic.tp";
+    public static final String MAIN_PROPERTIES_PREFIX = "dynamictp";
 
     public static final String DTP_ENABLED_PROP = MAIN_PROPERTIES_PREFIX + ".enabled";
 

File: common/src/main/java/org/dromara/dynamictp/common/event/DtpEvent.java
Patch:
@@ -33,7 +33,7 @@ public abstract class DtpEvent extends EventObject {
 
     private final transient DtpProperties dtpProperties;
 
-    public DtpEvent(Object source, DtpProperties dtpProperties) {
+    protected DtpEvent(Object source, DtpProperties dtpProperties) {
         super(source);
         this.dtpProperties = dtpProperties;
     }

File: test/test-configcenter/src/test/java/org/dromara/dynamictp/test/configcenter/apollo/ApolloInitListener.java
Patch:
@@ -55,9 +55,8 @@ public void environmentPrepared(ConfigurableBootstrapContext bootstrapContext, C
 
         YmlConfigFile configFile = (YmlConfigFile) ConfigService.getConfigFile("dynamic-tp-demo-dtp-dev", ConfigFileFormat.YML);
         Properties newProperties = new Properties();
-        String content = "spring:\n" +
-                "  dynamic:\n" +
-                "    tp:\n" +
+        String content =
+                "dynamictp:\n" +
                 "      enabled: true                               # 是否启用 dynamictp，默认true\n" +
                 "      executors:                                   # 动态线程池配置，都有默认值，采用默认值的可以不配置该项，减少配置量\n" +
                 "        - threadPoolName: dtpExecutor1\n" +

File: test/test-configcenter/src/test/java/org/dromara/dynamictp/test/configcenter/apollo/ApolloRefresherTest.java
Patch:
@@ -52,9 +52,8 @@ void testRefresh() throws InterruptedException {
     private void mockConfigChange() {
         YamlConfigFile configFile = (YamlConfigFile) ConfigService.getConfigFile("dynamic-tp-demo-dtp-dev", ConfigFileFormat.YML);
         Properties newProperties = new Properties();
-        String content = "spring:\n" +
-                "  dynamic:\n" +
-                "    tp:\n" +
+        String content =
+                "dynamictp:\n" +
                 "      enabled: true                               # 是否启用 dynamictp，默认true\n" +
                 "      executors:                                   # 动态线程池配置，都有默认值，采用默认值的可以不配置该项，减少配置量\n" +
                 "        - threadPoolName: dtpExecutor1\n" +

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/parse/JsonConfigParserTest.java
Patch:
@@ -43,7 +43,7 @@ void testDoParse() throws IOException {
 
         JsonConfigParser parser = new JsonConfigParser();
         Map<Object, Object> result = parser.doParse(content);
-        Assertions.assertEquals("dtpExecutor1", result.get("spring.dynamic.tp.executors[0].threadPoolName").toString());
+        Assertions.assertEquals("dtpExecutor1", result.get("dynamictp.executors[0].threadPoolName").toString());
     }
 
 }

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/parse/PropertiesConfigParserTest.java
Patch:
@@ -43,7 +43,7 @@ void testDoParse() throws IOException {
 
         PropertiesConfigParser parser = new PropertiesConfigParser();
         Map<Object, Object> result = parser.doParse(content);
-        Assertions.assertEquals("dtpExecutor1", result.get("spring.dynamic.tp.executors[0].threadPoolName").toString());
+        Assertions.assertEquals("dtpExecutor1", result.get("dynamictp.executors[0].threadPoolName").toString());
     }
 
 }

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/parse/YamlConfigParserTest.java
Patch:
@@ -44,6 +44,6 @@ void testDoParse() throws FileNotFoundException {
         YamlConfigParser parser = new YamlConfigParser();
         Map<Object, Object> result = parser.doParse(content);
 
-        Assertions.assertEquals("dtpExecutor1", result.get("spring.dynamic.tp.executors[0].threadPoolName").toString());
+        Assertions.assertEquals("dtpExecutor1", result.get("dynamictp.executors[0].threadPoolName").toString());
     }
 }

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/spring/DtpLifecycleSpringAdapterTest.java
Patch:
@@ -26,9 +26,9 @@
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.ApplicationContext;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.ComponentScan;
-import org.springframework.context.ApplicationContext;
 
 /**
  * DtpLifecycleSpringAdapterTest related
@@ -37,7 +37,7 @@
  * @since 1.1.8
  */
 @SpringBootTest(classes = DtpLifecycleSpringAdapterTest.TestConfig.class)
-public class DtpLifecycleSpringAdapterTest {
+class DtpLifecycleSpringAdapterTest {
 
     @Autowired
     private ApplicationContext applicationContext;

File: adapter/adapter-common/src/main/java/org/dromara/dynamictp/adapter/common/AbstractDtpAdapter.java
Patch:
@@ -74,7 +74,7 @@ public abstract class AbstractDtpAdapter implements DtpAdapter {
 
     protected final Map<String, ExecutorWrapper> executors = Maps.newHashMap();
 
-    public AbstractDtpAdapter() {
+    protected AbstractDtpAdapter() {
         EventBusManager.register(this);
     }
 

File: common/src/main/java/org/dromara/dynamictp/common/constant/DynamicTpConst.java
Patch:
@@ -32,7 +32,7 @@ public final class DynamicTpConst {
 
     private DynamicTpConst() { }
 
-    public static final String MAIN_PROPERTIES_PREFIX = "spring.dynamic.tp";
+    public static final String MAIN_PROPERTIES_PREFIX = "dynamictp";
 
     public static final String DTP_ENABLED_PROP = MAIN_PROPERTIES_PREFIX + ".enabled";
 

File: common/src/main/java/org/dromara/dynamictp/common/event/DtpEvent.java
Patch:
@@ -33,7 +33,7 @@ public abstract class DtpEvent extends EventObject {
 
     private final transient DtpProperties dtpProperties;
 
-    public DtpEvent(Object source, DtpProperties dtpProperties) {
+    protected DtpEvent(Object source, DtpProperties dtpProperties) {
         super(source);
         this.dtpProperties = dtpProperties;
     }

File: test/test-configcenter/src/test/java/org/dromara/dynamictp/test/configcenter/apollo/ApolloInitListener.java
Patch:
@@ -55,9 +55,8 @@ public void environmentPrepared(ConfigurableBootstrapContext bootstrapContext, C
 
         YmlConfigFile configFile = (YmlConfigFile) ConfigService.getConfigFile("dynamic-tp-demo-dtp-dev", ConfigFileFormat.YML);
         Properties newProperties = new Properties();
-        String content = "spring:\n" +
-                "  dynamic:\n" +
-                "    tp:\n" +
+        String content =
+                "dynamictp:\n" +
                 "      enabled: true                               # 是否启用 dynamictp，默认true\n" +
                 "      executors:                                   # 动态线程池配置，都有默认值，采用默认值的可以不配置该项，减少配置量\n" +
                 "        - threadPoolName: dtpExecutor1\n" +

File: test/test-configcenter/src/test/java/org/dromara/dynamictp/test/configcenter/apollo/ApolloRefresherTest.java
Patch:
@@ -52,9 +52,8 @@ void testRefresh() throws InterruptedException {
     private void mockConfigChange() {
         YamlConfigFile configFile = (YamlConfigFile) ConfigService.getConfigFile("dynamic-tp-demo-dtp-dev", ConfigFileFormat.YML);
         Properties newProperties = new Properties();
-        String content = "spring:\n" +
-                "  dynamic:\n" +
-                "    tp:\n" +
+        String content =
+                "dynamictp:\n" +
                 "      enabled: true                               # 是否启用 dynamictp，默认true\n" +
                 "      executors:                                   # 动态线程池配置，都有默认值，采用默认值的可以不配置该项，减少配置量\n" +
                 "        - threadPoolName: dtpExecutor1\n" +

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/parse/JsonConfigParserTest.java
Patch:
@@ -43,7 +43,7 @@ void testDoParse() throws IOException {
 
         JsonConfigParser parser = new JsonConfigParser();
         Map<Object, Object> result = parser.doParse(content);
-        Assertions.assertEquals("dtpExecutor1", result.get("spring.dynamic.tp.executors[0].threadPoolName").toString());
+        Assertions.assertEquals("dtpExecutor1", result.get("dynamictp.executors[0].threadPoolName").toString());
     }
 
 }

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/parse/PropertiesConfigParserTest.java
Patch:
@@ -43,7 +43,7 @@ void testDoParse() throws IOException {
 
         PropertiesConfigParser parser = new PropertiesConfigParser();
         Map<Object, Object> result = parser.doParse(content);
-        Assertions.assertEquals("dtpExecutor1", result.get("spring.dynamic.tp.executors[0].threadPoolName").toString());
+        Assertions.assertEquals("dtpExecutor1", result.get("dynamictp.executors[0].threadPoolName").toString());
     }
 
 }

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/parse/YamlConfigParserTest.java
Patch:
@@ -44,6 +44,6 @@ void testDoParse() throws FileNotFoundException {
         YamlConfigParser parser = new YamlConfigParser();
         Map<Object, Object> result = parser.doParse(content);
 
-        Assertions.assertEquals("dtpExecutor1", result.get("spring.dynamic.tp.executors[0].threadPoolName").toString());
+        Assertions.assertEquals("dtpExecutor1", result.get("dynamictp.executors[0].threadPoolName").toString());
     }
 }

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/spring/DtpLifecycleSpringAdapterTest.java
Patch:
@@ -26,9 +26,9 @@
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.ApplicationContext;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.ComponentScan;
-import org.springframework.context.ApplicationContext;
 
 /**
  * DtpLifecycleSpringAdapterTest related
@@ -37,7 +37,7 @@
  * @since 1.1.8
  */
 @SpringBootTest(classes = DtpLifecycleSpringAdapterTest.TestConfig.class)
-public class DtpLifecycleSpringAdapterTest {
+class DtpLifecycleSpringAdapterTest {
 
     @Autowired
     private ApplicationContext applicationContext;

File: example/example-adapter/example-adapter-liteflow/src/main/java/org/dromara/dynamictp/example/LiteflowExampleApplication.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.dromara.dynamictp.example;
 
-import org.dromara.dynamictp.core.spring.EnableDynamicTp;
+import org.dromara.dynamictp.spring.EnableDynamicTp;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 

File: example/example-adapter/example-adapter-liteflow/src/main/java/org/dromara/dynamictp/example/LiteflowExampleApplication.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.dromara.dynamictp.example;
 
-import org.dromara.dynamictp.core.spring.EnableDynamicTp;
+import org.dromara.dynamictp.spring.EnableDynamicTp;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 

File: example/example-apollo/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -145,6 +145,7 @@ public ScheduledExecutorService scheduledDtpExecutor() {
         return ThreadPoolBuilder.newBuilder()
                 .threadPoolName("scheduledDtpExecutor")
                 .corePoolSize(2)
+                .dynamic(true)
                 .threadFactory("test-scheduled")
                 .rejectedExecutionHandler(CALLER_RUNS_POLICY.getName())
                 .buildScheduled();

File: extension/extension-agent/src/main/java/org/dromara/dynamictp/extension/agent/AgentAware.java
Patch:
@@ -67,7 +67,7 @@ private DtpRunnable determineDtpRunnable(List<Field> conditionalFields, Runnable
             if (o instanceof DtpRunnable) {
                 return (DtpRunnable) o;
             }
-            if (CollUtil.contains(visitedClass, o.getClass())) {
+            if (Objects.isNull(o) || CollUtil.contains(visitedClass, o.getClass())) {
                 return null;
             } else {
                 visitedClass.add(o.getClass());
@@ -115,8 +115,8 @@ private Runnable getDtpRunnableInstance(Runnable r) {
             log.error("getDtpRunnable Error", e);
         }
         if (dtpRunnable == null) {
-            if (log.isWarnEnabled()) {
-                log.warn("DynamicTp aware [{}], can not find DtpRunnable.", getName());
+            if (log.isDebugEnabled()) {
+                log.debug("DynamicTp aware [{}], can not find DtpRunnable.", getName());
             }
             return r;
         }

File: extension/extension-agent/src/main/java/org/dromara/dynamictp/extension/agent/AgentAware.java
Patch:
@@ -57,7 +57,7 @@ public String getName() {
         return "agent";
     }
 
-    private DtpRunnable determineDtpRunnable(List<Field> conditionalFields, Runnable r, List<Class> visitedClass) throws IllegalAccessException {
+    private DtpRunnable determineDtpRunnable(List<Field> conditionalFields, Runnable r, Set<Class> visitedClass) throws IllegalAccessException {
         for (Field field : conditionalFields) {
             if (Objects.isNull(field)) {
                 continue;
@@ -81,7 +81,7 @@ private DtpRunnable determineDtpRunnable(List<Field> conditionalFields, Runnable
         return null;
     }
 
-    private DtpRunnable getDtpRunnable(Class<? extends Runnable> rClass, Runnable r, List<Class> visitedClass) throws IllegalAccessException {
+    private DtpRunnable getDtpRunnable(Class<? extends Runnable> rClass, Runnable r, Set<Class> visitedClass) throws IllegalAccessException {
         while (Runnable.class.isAssignableFrom(rClass)) {
             Field[] declaredFields = rClass.getDeclaredFields();
             if (ArrayUtil.isNotEmpty(declaredFields)) {
@@ -110,7 +110,7 @@ private Runnable getDtpRunnableInstance(Runnable r) {
         DtpRunnable dtpRunnable = null;
         Class<? extends Runnable> rClass = r.getClass();
         try {
-            dtpRunnable = getDtpRunnable(rClass, r, new ArrayList<>());
+            dtpRunnable = getDtpRunnable(rClass, r, new HashSet<>());
         } catch (IllegalAccessException e) {
             log.error("getDtpRunnable Error", e);
         }

File: adapter/adapter-dubbo/src/main/java/org/dromara/dynamictp/adapter/dubbo/apache/EagerThreadPoolExecutorProxy.java
Patch:
@@ -52,6 +52,7 @@ public EagerThreadPoolExecutorProxy(EagerThreadPoolExecutor executor) {
                 executor.getKeepAliveTime(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS,
                 (TaskQueue<Runnable>) executor.getQueue(), executor.getThreadFactory(),
                 executor.getRejectedExecutionHandler());
+        allowCoreThreadTimeOut(executor.allowsCoreThreadTimeOut());
         this.rejectHandlerType = getRejectedExecutionHandler().getClass().getSimpleName();
         setRejectedExecutionHandler(RejectHandlerGetter.getProxy(getRejectedExecutionHandler()));
         ((TaskQueue<Runnable>) getQueue()).setExecutor(this);

File: adapter/adapter-motan/src/main/java/org/dromara/dynamictp/adapter/motan/StandardThreadExecutorProxy.java
Patch:
@@ -50,6 +50,7 @@ public StandardThreadExecutorProxy(StandardThreadExecutor executor) {
                 executor.getKeepAliveTime(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS,
                 executor.getMaxSubmittedTaskCount() - executor.getMaximumPoolSize(),
                 executor.getThreadFactory(), executor.getRejectedExecutionHandler());
+        allowCoreThreadTimeOut(executor.allowsCoreThreadTimeOut());
         RejectedExecutionHandler handler = getRejectedExecutionHandler();
         this.rejectHandlerType = handler.getClass().getSimpleName();
         setRejectedExecutionHandler(RejectHandlerGetter.getProxy(handler));

File: core/src/main/java/org/dromara/dynamictp/core/support/ThreadPoolExecutorProxy.java
Patch:
@@ -51,6 +51,7 @@ public ThreadPoolExecutorProxy(ThreadPoolExecutor executor) {
                 executor.getKeepAliveTime(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS,
                 executor.getQueue(), executor.getThreadFactory(),
                 executor.getRejectedExecutionHandler());
+        allowCoreThreadTimeOut(executor.allowsCoreThreadTimeOut());
         this.rejectHandlerType = getRejectedExecutionHandler().getClass().getSimpleName();
         setRejectedExecutionHandler(RejectHandlerGetter.getProxy(getRejectedExecutionHandler()));
     }

File: starter/starter-adapter/starter-adapter-webserver/src/main/java/org/dromara/dynamictp/starter/adapter/webserver/tomcat/TomcatExecutorProxy.java
Patch:
@@ -54,6 +54,7 @@ public TomcatExecutorProxy(ThreadPoolExecutor executor) {
                 executor.getKeepAliveTime(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS,
                 executor.getQueue(), executor.getThreadFactory());
         setThreadRenewalDelay(executor.getThreadRenewalDelay());
+        allowCoreThreadTimeOut(executor.allowsCoreThreadTimeOut());
         Object handler = getRejectedExecutionHandler(executor);
         this.rejectHandlerType = handler.getClass().getSimpleName();
 

File: starter/starter-adapter/starter-adapter-webserver/src/main/java/org/dromara/dynamictp/starter/adapter/webserver/undertow/EnhancedQueueExecutorProxy.java
Patch:
@@ -50,6 +50,7 @@ public EnhancedQueueExecutorProxy(final EnhancedQueueExecutor executor) {
                 .setTerminationTask(executor.getTerminationTask())
                 .setRegisterMBean(true)
                 .setMBeanName(executor.getMBeanName()));
+        allowCoreThreadTimeOut(executor.allowsCoreThreadTimeOut());
     }
 
     @Override

File: core/src/main/java/org/dromara/dynamictp/core/spring/DtpBeanDefinitionRegistrar.java
Patch:
@@ -84,12 +84,12 @@ public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, B
         BinderHelper.bindDtpProperties(environment, dtpProperties);
         val executors = dtpProperties.getExecutors();
         if (CollectionUtils.isEmpty(executors)) {
-            log.warn("DynamicTp registrar, no executors are configured.");
+            log.info("DynamicTp registrar, no executors are configured.");
             return;
         }
 
         executors.forEach(e -> {
-            if (!e.isAutoCreateDtp()) {
+            if (!e.isAutoCreate()) {
                 return;
             }
             Class<?> executorTypeClass = ExecutorType.getClass(e.getExecutorType());

File: core/src/main/java/org/dromara/dynamictp/core/support/task/runnable/EnhancedRunnable.java
Patch:
@@ -18,6 +18,7 @@
 package org.dromara.dynamictp.core.support.task.runnable;
 
 import lombok.extern.slf4j.Slf4j;
+import org.dromara.dynamictp.common.util.ExecutorUtil;
 import org.dromara.dynamictp.core.aware.AwareManager;
 import java.util.Objects;
 import java.util.concurrent.Executor;
@@ -58,6 +59,7 @@ public void run() {
             throw e;
         } finally {
             AwareManager.afterExecute(executor, runnable, t);
+            ExecutorUtil.tryExecAfterExecute(runnable, t);
         }
     }
 }

File: starter/starter-adapter/starter-adapter-webserver/src/main/java/org/dromara/dynamictp/starter/adapter/webserver/tomcat/TomcatExecutorProxy.java
Patch:
@@ -20,6 +20,7 @@
 import lombok.extern.slf4j.Slf4j;
 import org.apache.tomcat.util.threads.TaskQueue;
 import org.apache.tomcat.util.threads.ThreadPoolExecutor;
+import org.dromara.dynamictp.common.util.ExecutorUtil;
 import org.dromara.dynamictp.common.util.ReflectionUtil;
 import org.dromara.dynamictp.core.aware.AwareManager;
 import org.dromara.dynamictp.core.aware.RejectHandlerAware;
@@ -86,14 +87,15 @@ public void execute(Runnable command) {
 
     @Override
     protected void beforeExecute(Thread t, Runnable r) {
-        super.beforeExecute(t, r);
         AwareManager.beforeExecute(this, t, r);
+        super.beforeExecute(t, r);
     }
 
     @Override
     protected void afterExecute(Runnable r, Throwable t) {
         super.afterExecute(r, t);
         AwareManager.afterExecute(this, r, t);
+        ExecutorUtil.tryExecAfterExecute(r, t);
     }
 
     @Override

File: starter/starter-adapter/starter-adapter-webserver/src/main/java/org/dromara/dynamictp/starter/adapter/webserver/undertow/UndertowDtpAdapter.java
Patch:
@@ -79,7 +79,7 @@ public void doEnhance(WebServer webServer) {
                 putAndFinalize(tpName, (ExecutorService) executor, new EnhancedQueueExecutorAdapter(proxy));
             } catch (Throwable t) {
                 log.error("DynamicTp adapter, enhance {} failed, please adjust the order of the two dependencies" +
-                        "(starter-undertow and starter-adapter-webserver) and try again.", tpName, t);
+                        "(spring-boot-starter-undertow and starter-adapter-webserver) and try again.", tpName, t);
                 executors.put(tpName, new ExecutorWrapper(tpName, handler.adapt(executor)));
             }
         } else {

File: core/src/main/java/org/dromara/dynamictp/core/spring/DtpBeanDefinitionRegistrar.java
Patch:
@@ -89,6 +89,9 @@ public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, B
         }
 
         executors.forEach(e -> {
+            if (!e.isDtp()) {
+                return;
+            }
             Class<?> executorTypeClass = ExecutorType.getClass(e.getExecutorType());
             Map<String, Object> propertyValues = buildPropertyValues(e);
             Object[] args = buildConstructorArgs(executorTypeClass, e);

File: adapter/adapter-dubbo/src/main/java/org/dromara/dynamictp/adapter/dubbo/alibaba/AlibabaDubboDtpAdapter.java
Patch:
@@ -60,8 +60,9 @@ public void afterPropertiesSet() throws Exception {
                 try {
                     Thread.sleep(1000);
                     DtpProperties dtpProperties = ApplicationContextHolder.getBean(DtpProperties.class);
-                    this.initialize();
-                    this.refresh(dtpProperties);
+                    initialize();
+                    afterInitialize();
+                    refresh(dtpProperties);
                 } catch (Throwable e) { }
             }
         });

File: adapter/adapter-dubbo/src/main/java/org/dromara/dynamictp/adapter/dubbo/apache/ApacheDubboDtpAdapter.java
Patch:
@@ -71,6 +71,7 @@ public void onApplicationEvent(ApplicationEvent event) {
             try {
                 DtpProperties dtpProperties = ApplicationContextHolder.getBean(DtpProperties.class);
                 initialize();
+                afterInitialize();
                 refresh(dtpProperties);
             } catch (Exception e) {
                 log.error("DynamicTp adapter, {} init failed.", getTpPrefix(), e);

File: core/src/main/java/org/dromara/dynamictp/core/executor/ScheduledDtpExecutor.java
Patch:
@@ -15,8 +15,9 @@
  * limitations under the License.
  */
 
+package org.dromara.dynamictp.core.executor;
+
 import org.dromara.dynamictp.common.em.JreEnum;
-import org.dromara.dynamictp.core.executor.DtpExecutor;
 import org.dromara.dynamictp.core.support.ScheduledThreadPoolExecutorProxy;
 
 import java.util.Collection;

File: common/src/main/java/org/dromara/dynamictp/common/parser/config/YamlConfigParser.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.dromara.dynamictp.common.parser.config;
 
+import org.dromara.dynamictp.common.em.ConfigFileTypeEnum;
 import com.google.common.collect.Lists;
 import org.apache.commons.lang3.StringUtils;
-import org.dromara.dynamictp.common.em.ConfigFileTypeEnum;
 import org.springframework.beans.factory.config.YamlPropertiesFactoryBean;
 import org.springframework.core.io.ByteArrayResource;
 

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/parse/YamlConfigParserTest.java
Patch:
@@ -38,13 +38,11 @@ class YamlConfigParserTest {
 
     @Test
     void testDoParse() throws FileNotFoundException {
-        File file = ResourceUtils.getFile("classpath:demo-dtp-dev-demo.yml");
+        File file = ResourceUtils.getFile("classpath:demo-dtp-dev.yml");
         String content = FileUtil.readString(file, StandardCharsets.UTF_8);
 
         YamlConfigParser parser = new YamlConfigParser();
         Map<Object, Object> result = parser.doParse(content);
         Assertions.assertEquals("dtpExecutor1", result.get("spring.dynamic.tp.executors[0].threadPoolName").toString());
-        Assertions.assertEquals("common", result.get("spring.dynamic.tp.executors[0].executorType").toString());
-        Assertions.assertEquals("eager", result.get("spring.dynamic.tp.executors[1].executorType").toString());
     }
 }

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/spring/PropertiesBinderTest.java
Patch:
@@ -54,7 +54,6 @@ void testBindDtpPropertiesWithMap() {
         properties.put("spring.dynamic.tp.enabled", false);
         properties.put("spring.dynamic.tp.collectorTypes", Lists.newArrayList("LOGGING"));
         properties.put("spring.dynamic.tp.executors[0].threadPoolName", "test_dtp");
-        properties.put("spring.dynamic.tp.executorsGlobal.executorType","eager");
 
         DtpProperties dtpProperties = DtpProperties.getInstance();
         BinderHelper.bindDtpProperties(properties, dtpProperties);

File: common/src/main/java/org/dromara/dynamictp/common/parser/config/YamlConfigParser.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.dromara.dynamictp.common.parser.config;
 
+import org.dromara.dynamictp.common.em.ConfigFileTypeEnum;
 import com.google.common.collect.Lists;
 import org.apache.commons.lang3.StringUtils;
-import org.dromara.dynamictp.common.em.ConfigFileTypeEnum;
 import org.springframework.beans.factory.config.YamlPropertiesFactoryBean;
 import org.springframework.core.io.ByteArrayResource;
 

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/parse/YamlConfigParserTest.java
Patch:
@@ -38,13 +38,11 @@ class YamlConfigParserTest {
 
     @Test
     void testDoParse() throws FileNotFoundException {
-        File file = ResourceUtils.getFile("classpath:demo-dtp-dev-demo.yml");
+        File file = ResourceUtils.getFile("classpath:demo-dtp-dev.yml");
         String content = FileUtil.readString(file, StandardCharsets.UTF_8);
 
         YamlConfigParser parser = new YamlConfigParser();
         Map<Object, Object> result = parser.doParse(content);
         Assertions.assertEquals("dtpExecutor1", result.get("spring.dynamic.tp.executors[0].threadPoolName").toString());
-        Assertions.assertEquals("common", result.get("spring.dynamic.tp.executors[0].executorType").toString());
-        Assertions.assertEquals("eager", result.get("spring.dynamic.tp.executors[1].executorType").toString());
     }
 }

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/spring/PropertiesBinderTest.java
Patch:
@@ -54,7 +54,6 @@ void testBindDtpPropertiesWithMap() {
         properties.put("spring.dynamic.tp.enabled", false);
         properties.put("spring.dynamic.tp.collectorTypes", Lists.newArrayList("LOGGING"));
         properties.put("spring.dynamic.tp.executors[0].threadPoolName", "test_dtp");
-        properties.put("spring.dynamic.tp.executorsGlobal.executorType","eager");
 
         DtpProperties dtpProperties = DtpProperties.getInstance();
         BinderHelper.bindDtpProperties(properties, dtpProperties);

File: common/src/main/java/org/dromara/dynamictp/common/parser/config/YamlConfigParser.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.dromara.dynamictp.common.parser.config;
 
-import org.dromara.dynamictp.common.em.ConfigFileTypeEnum;
 import com.google.common.collect.Lists;
 import org.apache.commons.lang3.StringUtils;
+import org.dromara.dynamictp.common.em.ConfigFileTypeEnum;
 import org.springframework.beans.factory.config.YamlPropertiesFactoryBean;
 import org.springframework.core.io.ByteArrayResource;
 

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/parse/YamlConfigParserTest.java
Patch:
@@ -38,11 +38,13 @@ class YamlConfigParserTest {
 
     @Test
     void testDoParse() throws FileNotFoundException {
-        File file = ResourceUtils.getFile("classpath:demo-dtp-dev.yml");
+        File file = ResourceUtils.getFile("classpath:demo-dtp-dev-demo.yml");
         String content = FileUtil.readString(file, StandardCharsets.UTF_8);
 
         YamlConfigParser parser = new YamlConfigParser();
         Map<Object, Object> result = parser.doParse(content);
         Assertions.assertEquals("dtpExecutor1", result.get("spring.dynamic.tp.executors[0].threadPoolName").toString());
+        Assertions.assertEquals("common", result.get("spring.dynamic.tp.executors[0].executorType").toString());
+        Assertions.assertEquals("eager", result.get("spring.dynamic.tp.executors[1].executorType").toString());
     }
 }

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/spring/PropertiesBinderTest.java
Patch:
@@ -54,6 +54,7 @@ void testBindDtpPropertiesWithMap() {
         properties.put("spring.dynamic.tp.enabled", false);
         properties.put("spring.dynamic.tp.collectorTypes", Lists.newArrayList("LOGGING"));
         properties.put("spring.dynamic.tp.executors[0].threadPoolName", "test_dtp");
+        properties.put("spring.dynamic.tp.executorsGlobal.executorType","eager");
 
         DtpProperties dtpProperties = DtpProperties.getInstance();
         BinderHelper.bindDtpProperties(properties, dtpProperties);

File: common/src/main/java/org/dromara/dynamictp/common/notifier/DingNotifier.java
Patch:
@@ -62,7 +62,7 @@ protected String buildMsgBody(NotifyPlatform platform, String content) {
         List<String> mobiles = Lists.newArrayList(platform.getReceivers().split(","));
         at.setAtMobiles(mobiles);
         if (mobiles.contains(ALL) || CollectionUtils.isEmpty(mobiles)) {
-            at.setAtAll(true);
+            at.setIsAtAll(true);
         }
 
         MarkdownReq markdownReq = new MarkdownReq();

File: common/src/main/java/org/dromara/dynamictp/common/entity/MarkdownReq.java
Patch:
@@ -65,7 +65,7 @@ public static class At {
 
         private List<String> atMobiles;
 
-        private boolean isAtAll;
+        private Boolean isAtAll;
     }
 }
 

File: common/src/main/java/org/dromara/dynamictp/common/entity/MarkdownReq.java
Patch:
@@ -65,7 +65,7 @@ public static class At {
 
         private List<String> atMobiles;
 
-        private boolean isAtAll;
+        private Boolean isAtAll;
     }
 }
 

File: common/src/main/java/org/dromara/dynamictp/common/entity/MarkdownReq.java
Patch:
@@ -65,7 +65,7 @@ public static class At {
 
         private List<String> atMobiles;
 
-        private boolean isAtAll;
+        private Boolean isAtAll;
     }
 }
 

File: common/src/main/java/org/dromara/dynamictp/common/constant/LarkNotifyConst.java
Patch:
@@ -43,7 +43,7 @@ private LarkNotifyConst() { }
      * lark at format. username
      * 当配置username时,只能蓝色字体展示@username,被@人无@提醒
      */
-    public static final String LARK_AT_FORMAT_USERNAME = "<at id=''>%s</at>";
+    public static final String LARK_AT_FORMAT_USERNAME = "<at id='%s'>%s</at>";
 
     /**
      * lark openid prefix

File: core/src/main/java/org/dromara/dynamictp/core/monitor/collector/jmx/JMXCollector.java
Patch:
@@ -41,7 +41,6 @@ public class JMXCollector extends AbstractCollector {
     public static final String DTP_METRIC_NAME_PREFIX = "dtp.thread.pool";
 
     /**
-     * thread pool stats map
      * 缓存的作用是将注册到JMX的数据，每次都是同一个对象
      */
     private static final Map<String, ThreadPoolStats> GAUGE_CACHE = new ConcurrentHashMap<>();

File: core/src/main/java/org/dromara/dynamictp/core/notifier/DtpLarkNotifier.java
Patch:
@@ -70,7 +70,7 @@ protected Pair<String, String> getColors() {
     protected String formatReceivers(String receives) {
         return Arrays.stream(receives.split(","))
                 .map(r -> StringUtils.startsWith(r, LARK_OPENID_PREFIX) ?
-                        String.format(LARK_AT_FORMAT_OPENID, r) : String.format(LARK_AT_FORMAT_USERNAME, r))
+                        String.format(LARK_AT_FORMAT_OPENID, r) : String.format(LARK_AT_FORMAT_USERNAME, r, r))
                 .collect(Collectors.joining(" "));
     }
 }

File: common/src/main/java/org/dromara/dynamictp/common/constant/LarkNotifyConst.java
Patch:
@@ -43,7 +43,7 @@ private LarkNotifyConst() { }
      * lark at format. username
      * 当配置username时,只能蓝色字体展示@username,被@人无@提醒
      */
-    public static final String LARK_AT_FORMAT_USERNAME = "<at id=''>%s</at>";
+    public static final String LARK_AT_FORMAT_USERNAME = "<at id='%s'>%s</at>";
 
     /**
      * lark openid prefix

File: core/src/main/java/org/dromara/dynamictp/core/notifier/DtpLarkNotifier.java
Patch:
@@ -70,7 +70,7 @@ protected Pair<String, String> getColors() {
     protected String formatReceivers(String receives) {
         return Arrays.stream(receives.split(","))
                 .map(r -> StringUtils.startsWith(r, LARK_OPENID_PREFIX) ?
-                        String.format(LARK_AT_FORMAT_OPENID, r) : String.format(LARK_AT_FORMAT_USERNAME, r))
+                        String.format(LARK_AT_FORMAT_OPENID, r) : String.format(LARK_AT_FORMAT_USERNAME, r, r))
                 .collect(Collectors.joining(" "));
     }
 }

File: common/src/main/java/org/dromara/dynamictp/common/constant/LarkNotifyConst.java
Patch:
@@ -43,7 +43,7 @@ private LarkNotifyConst() { }
      * lark at format. username
      * 当配置username时,只能蓝色字体展示@username,被@人无@提醒
      */
-    public static final String LARK_AT_FORMAT_USERNAME = "<at id=''>%s</at>";
+    public static final String LARK_AT_FORMAT_USERNAME = "<at id='%s'>%s</at>";
 
     /**
      * lark openid prefix

File: core/src/main/java/org/dromara/dynamictp/core/notifier/DtpLarkNotifier.java
Patch:
@@ -70,7 +70,7 @@ protected Pair<String, String> getColors() {
     protected String formatReceivers(String receives) {
         return Arrays.stream(receives.split(","))
                 .map(r -> StringUtils.startsWith(r, LARK_OPENID_PREFIX) ?
-                        String.format(LARK_AT_FORMAT_OPENID, r) : String.format(LARK_AT_FORMAT_USERNAME, r))
+                        String.format(LARK_AT_FORMAT_OPENID, r) : String.format(LARK_AT_FORMAT_USERNAME, r, r))
                 .collect(Collectors.joining(" "));
     }
 }

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/spring/Config.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.dromara.dynamictp.core.spring.EnableDynamicTp;
 import org.dromara.dynamictp.core.support.DynamicTp;
+import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
@@ -48,7 +49,7 @@ public class Config {
      * @see org.springframework.core.PriorityOrdered
      */
     @Bean
-    public DemoService demoService(Executor asyncExecutor) {
+    public DemoService demoService(@Qualifier("commonExecutor") Executor asyncExecutor) {
         return new DemoService(asyncExecutor);
     }
 

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/spring/Config.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.dromara.dynamictp.core.spring.EnableDynamicTp;
 import org.dromara.dynamictp.core.support.DynamicTp;
+import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
@@ -48,7 +49,7 @@ public class Config {
      * @see org.springframework.core.PriorityOrdered
      */
     @Bean
-    public DemoService demoService(Executor asyncExecutor) {
+    public DemoService demoService(@Qualifier("commonExecutor") Executor asyncExecutor) {
         return new DemoService(asyncExecutor);
     }
 

File: core/src/main/java/org/dromara/dynamictp/core/aware/TaskEnhanceAware.java
Patch:
@@ -41,12 +41,12 @@ public interface TaskEnhanceAware extends DtpAware {
      */
     default Runnable getEnhancedTask(Runnable command, List<TaskWrapper> taskWrappers) {
         Runnable wrapRunnable = command;
+        String taskName = (wrapRunnable instanceof NamedRunnable) ? ((NamedRunnable) wrapRunnable).getName() : null;
         if (CollectionUtils.isNotEmpty(taskWrappers)) {
             for (TaskWrapper t : taskWrappers) {
                 wrapRunnable = t.wrap(wrapRunnable);
             }
         }
-        String taskName = (wrapRunnable instanceof NamedRunnable) ? ((NamedRunnable) wrapRunnable).getName() : null;
         return new DtpRunnable(command, wrapRunnable, taskName);
     }
 

File: core/src/main/java/org/dromara/dynamictp/core/aware/TaskEnhanceAware.java
Patch:
@@ -41,12 +41,12 @@ public interface TaskEnhanceAware extends DtpAware {
      */
     default Runnable getEnhancedTask(Runnable command, List<TaskWrapper> taskWrappers) {
         Runnable wrapRunnable = command;
+        String taskName = (wrapRunnable instanceof NamedRunnable) ? ((NamedRunnable) wrapRunnable).getName() : null;
         if (CollectionUtils.isNotEmpty(taskWrappers)) {
             for (TaskWrapper t : taskWrappers) {
                 wrapRunnable = t.wrap(wrapRunnable);
             }
         }
-        String taskName = (wrapRunnable instanceof NamedRunnable) ? ((NamedRunnable) wrapRunnable).getName() : null;
         return new DtpRunnable(command, wrapRunnable, taskName);
     }
 

File: common/src/main/java/org/dromara/dynamictp/common/constant/LarkNotifyConst.java
Patch:
@@ -31,7 +31,7 @@ private LarkNotifyConst() { }
     /**
      * lark bot url
      */
-    public static final String LARK_WEBHOOK = "https://open.feishu.cn/open-apis/bot/v2/hook/";
+    public static final String LARK_WEBHOOK = "https://open.feishu.cn/open-apis/bot/v2/hook";
 
     /**
      * lark at format. openid
@@ -56,9 +56,9 @@ private LarkNotifyConst() { }
 
     public static final String COMMENT_COLOR = "";
 
-    public static final String SIGN_REPLACE = "{";
+    public static final String SIGN_REPLACE = "\\{";
 
-    public static final String SIGN_PARAM = SIGN_REPLACE + "\"timestamp\": \"%s\",\"sign\": \"%s\",";
+    public static final String SIGN_PARAM_PREFIX = "{\"timestamp\": \"%s\",\"sign\": \"%s\",";
 
     /**
      * lark alarm json str

File: common/src/main/java/org/dromara/dynamictp/common/constant/WechatNotifyConst.java
Patch:
@@ -27,7 +27,9 @@ public final class WechatNotifyConst {
 
     private WechatNotifyConst() { }
 
-    public static final String WECHAT_WEB_HOOK = "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=";
+    public static final String WECHAT_WEB_HOOK = "https://qyapi.weixin.qq.com/cgi-bin/webhook/send";
+
+    public static final String KEY_PARAM = "key";
 
     public static final String WARNING_COLOR = "warning";
 

File: common/src/main/java/org/dromara/dynamictp/common/entity/NotifyPlatform.java
Patch:
@@ -51,9 +51,9 @@ public class NotifyPlatform {
     private String secret;
 
     /**
-     * webHook, may be null.
+     * webhook, may be null.
      */
-    private String webHook;
+    private String webhook;
 
     /**
      * Receivers, split by ,

File: common/src/main/java/org/dromara/dynamictp/common/constant/LarkNotifyConst.java
Patch:
@@ -31,7 +31,7 @@ private LarkNotifyConst() { }
     /**
      * lark bot url
      */
-    public static final String LARK_WEBHOOK = "https://open.feishu.cn/open-apis/bot/v2/hook/";
+    public static final String LARK_WEBHOOK = "https://open.feishu.cn/open-apis/bot/v2/hook";
 
     /**
      * lark at format. openid

File: common/src/main/java/org/dromara/dynamictp/common/constant/WechatNotifyConst.java
Patch:
@@ -27,7 +27,9 @@ public final class WechatNotifyConst {
 
     private WechatNotifyConst() { }
 
-    public static final String WECHAT_WEB_HOOK = "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=";
+    public static final String WECHAT_WEB_HOOK = "https://qyapi.weixin.qq.com/cgi-bin/webhook/send";
+
+    public static final String KEY_PARAM = "key";
 
     public static final String WARNING_COLOR = "warning";
 

File: common/src/main/java/org/dromara/dynamictp/common/entity/NotifyPlatform.java
Patch:
@@ -51,9 +51,9 @@ public class NotifyPlatform {
     private String secret;
 
     /**
-     * webHook, may be null.
+     * webhook, may be null.
      */
-    private String webHook;
+    private String webhook;
 
     /**
      * Receivers, split by ,

File: common/src/main/java/org/dromara/dynamictp/common/entity/NotifyPlatform.java
Patch:
@@ -51,7 +51,7 @@ public class NotifyPlatform {
     private String secret;
 
     /**
-     * webHook, may be null.
+     * webhook, may be null.
      */
     private String webhook;
 

File: common/src/main/java/org/dromara/dynamictp/common/constant/LarkNotifyConst.java
Patch:
@@ -31,7 +31,7 @@ private LarkNotifyConst() { }
     /**
      * lark bot url
      */
-    public static final String LARK_WEBHOOK = "https://open.feishu.cn/open-apis/bot/v2/hook/";
+    public static final String LARK_WEBHOOK = "https://open.feishu.cn/open-apis/bot/v2/hook";
 
     /**
      * lark at format. openid

File: common/src/main/java/org/dromara/dynamictp/common/constant/WechatNotifyConst.java
Patch:
@@ -27,7 +27,9 @@ public final class WechatNotifyConst {
 
     private WechatNotifyConst() { }
 
-    public static final String WECHAT_WEB_HOOK = "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=";
+    public static final String WECHAT_WEB_HOOK = "https://qyapi.weixin.qq.com/cgi-bin/webhook/send";
+
+    public static final String KEY_PARAM = "key";
 
     public static final String WARNING_COLOR = "warning";
 

File: common/src/main/java/org/dromara/dynamictp/common/entity/NotifyPlatform.java
Patch:
@@ -53,7 +53,7 @@ public class NotifyPlatform {
     /**
      * webHook, may be null.
      */
-    private String webHook;
+    private String webhook;
 
     /**
      * Receivers, split by ,

File: extension/extension-notify-yunzhijia/src/main/java/org/dromara/dynamictp/extension/notify/yunzhijia/YunZhiJiaNotifier.java
Patch:
@@ -50,7 +50,8 @@ protected String buildMsgBody(NotifyPlatform platform, String content) {
 
     @Override
     protected String buildUrl(NotifyPlatform platform) {
-        String webHook = Optional.ofNullable(platform.getWebHook()).orElse(YunZhiJiaNotifyConst.WEB_HOOK);
+        // TODO
+        String webHook = Optional.ofNullable(platform.getWebhook()).orElse(YunZhiJiaNotifyConst.WEB_HOOK);
         return webHook + platform.getUrlKey();
     }
 }

File: common/src/main/java/org/dromara/dynamictp/common/constant/LarkNotifyConst.java
Patch:
@@ -56,9 +56,9 @@ private LarkNotifyConst() { }
 
     public static final String COMMENT_COLOR = "";
 
-    public static final String SIGN_REPLACE = "{";
+    public static final String SIGN_REPLACE = "\\{";
 
-    public static final String SIGN_PARAM = SIGN_REPLACE + "\"timestamp\": \"%s\",\"sign\": \"%s\",";
+    public static final String SIGN_PARAM_PREFIX = "{\"timestamp\": \"%s\",\"sign\": \"%s\",";
 
     /**
      * lark alarm json str

File: common/src/main/java/org/dromara/dynamictp/common/notifier/LarkNotifier.java
Patch:
@@ -32,7 +32,7 @@
 import java.security.NoSuchAlgorithmException;
 import java.util.Optional;
 
-import static org.dromara.dynamictp.common.constant.LarkNotifyConst.SIGN_PARAM;
+import static org.dromara.dynamictp.common.constant.LarkNotifyConst.SIGN_PARAM_PREFIX;
 import static org.dromara.dynamictp.common.constant.LarkNotifyConst.SIGN_REPLACE;
 
 /**
@@ -85,7 +85,7 @@ protected String buildMsgBody(NotifyPlatform platform, String content) {
         try {
             val secondsTimestamp = System.currentTimeMillis() / 1000;
             val sign = genSign(platform.getSecret(), secondsTimestamp);
-            content = content.replace(SIGN_REPLACE, String.format(SIGN_PARAM, secondsTimestamp, sign));
+            content = content.replaceFirst(SIGN_REPLACE, String.format(SIGN_PARAM_PREFIX, secondsTimestamp, sign));
         } catch (NoSuchAlgorithmException | InvalidKeyException e) {
             log.error("DynamicTp notify, lark generate signature failed...", e);
         }

File: common/src/main/java/org/dromara/dynamictp/common/constant/LarkNotifyConst.java
Patch:
@@ -56,9 +56,9 @@ private LarkNotifyConst() { }
 
     public static final String COMMENT_COLOR = "";
 
-    public static final String SIGN_REPLACE = "{";
+    public static final String SIGN_REPLACE = "\\{";
 
-    public static final String SIGN_PARAM = SIGN_REPLACE + "\"timestamp\": \"%s\",\"sign\": \"%s\",";
+    public static final String SIGN_PARAM_PREFIX = "{\"timestamp\": \"%s\",\"sign\": \"%s\",";
 
     /**
      * lark alarm json str

File: common/src/main/java/org/dromara/dynamictp/common/notifier/LarkNotifier.java
Patch:
@@ -32,7 +32,7 @@
 import java.security.NoSuchAlgorithmException;
 import java.util.Optional;
 
-import static org.dromara.dynamictp.common.constant.LarkNotifyConst.SIGN_PARAM;
+import static org.dromara.dynamictp.common.constant.LarkNotifyConst.SIGN_PARAM_PREFIX;
 import static org.dromara.dynamictp.common.constant.LarkNotifyConst.SIGN_REPLACE;
 
 /**
@@ -85,7 +85,7 @@ protected String buildMsgBody(NotifyPlatform platform, String content) {
         try {
             val secondsTimestamp = System.currentTimeMillis() / 1000;
             val sign = genSign(platform.getSecret(), secondsTimestamp);
-            content = content.replace(SIGN_REPLACE, String.format(SIGN_PARAM, secondsTimestamp, sign));
+            content = content.replaceFirst(SIGN_REPLACE, String.format(SIGN_PARAM_PREFIX, secondsTimestamp, sign));
         } catch (NoSuchAlgorithmException | InvalidKeyException e) {
             log.error("DynamicTp notify, lark generate signature failed...", e);
         }

File: adapter/adapter-dubbo/src/main/java/org/dromara/dynamictp/adapter/dubbo/apache/ApacheDubboDtpAdapter.java
Patch:
@@ -115,10 +115,10 @@ protected void initialize() {
                         try {
                             //修改为动态线程池proxy
                             ReflectionUtil.setFieldValue(EXECUTOR_FILED_NAME, wrappedChannelHandler, proxy);
+                            putAndFinalize(genTpName(k), (ExecutorService) v, proxy);
                         } catch (IllegalAccessException e) {
                             log.error("Dynamic tp update dubbo tp failed, port={}", k, e);
                         }
-                        putAndFinalize(genTpName(k), (ExecutorService) v, proxy);
                     });
                 }
             }

File: common/src/main/java/org/dromara/dynamictp/common/properties/DtpProperties.java
Patch:
@@ -41,6 +41,9 @@ private DtpProperties() { }
      * If enabled DynamicTp.
      */
     private boolean enabled = true;
+    /**
+     * 用来自定义环境信息。如果没有配置，将使用“spring.profiles.active”
+     */
     private String env="";
 
     /**

File: common/src/main/java/org/dromara/dynamictp/common/properties/DtpProperties.java
Patch:
@@ -41,6 +41,7 @@ private DtpProperties() { }
      * If enabled DynamicTp.
      */
     private boolean enabled = true;
+    private String env="";
 
     /**
      * If print banner.

File: common/src/main/java/org/dromara/dynamictp/common/entity/AlarmInfo.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.dromara.dynamictp.common.entity;
 
+import lombok.Data;
+import lombok.experimental.Accessors;
 import org.dromara.dynamictp.common.em.NotifyItemEnum;
 import org.dromara.dynamictp.common.util.DateUtil;
-import lombok.Builder;
-import lombok.Data;
 
 import java.util.concurrent.atomic.AtomicInteger;
 
@@ -31,7 +31,7 @@
  * @since 1.0.4
  **/
 @Data
-@Builder
+@Accessors(chain = true)
 public class AlarmInfo {
 
     private NotifyItemEnum notifyItem;

File: core/src/main/java/org/dromara/dynamictp/core/notifier/alarm/AlarmCounter.java
Patch:
@@ -44,9 +44,7 @@ private AlarmCounter() { }
 
     public static void init(String threadPoolName, String notifyItemType) {
         String key = buildKey(threadPoolName, notifyItemType);
-        val alarmInfo = AlarmInfo.builder()
-                .notifyItem(NotifyItemEnum.of(notifyItemType))
-                .build();
+        val alarmInfo = new AlarmInfo().setNotifyItem(NotifyItemEnum.of(notifyItemType));
         ALARM_INFO_CACHE.putIfAbsent(key, alarmInfo);
     }
 

File: core/src/main/java/org/dromara/dynamictp/core/monitor/collector/jmx/ThreadPoolStatsJMX.java
Patch:
@@ -18,16 +18,13 @@
 
 import org.dromara.dynamictp.common.entity.ThreadPoolStats;
 
-import java.beans.ConstructorProperties;
-
 /**
  * @author <a href = "mailto:kamtohung@gmail.com">KamTo Hung</a>
  */
 public class ThreadPoolStatsJMX implements ThreadPoolStatsMXBean {
 
     private ThreadPoolStats threadPoolStats;
 
-    @ConstructorProperties({"threadPoolStats"})
     public ThreadPoolStatsJMX(ThreadPoolStats threadPoolStats) {
         this.threadPoolStats = threadPoolStats;
     }

File: common/src/main/java/org/dromara/dynamictp/common/em/CollectorTypeEnum.java
Patch:
@@ -44,7 +44,7 @@ public enum CollectorTypeEnum {
     INTERNAL_LOGGING,
 
     /**
-     * Jmx collect type.
+     * JMX collect type.
      */
     JMX
 

File: core/src/main/java/org/dromara/dynamictp/core/monitor/collector/MicroMeterCollector.java
Patch:
@@ -17,19 +17,19 @@
 
 package org.dromara.dynamictp.core.monitor.collector;
 
-import cn.hutool.core.bean.BeanUtil;
 import io.micrometer.core.instrument.Metrics;
 import io.micrometer.core.instrument.Tag;
-import java.util.Optional;
 import lombok.extern.slf4j.Slf4j;
 import org.dromara.dynamictp.common.em.CollectorTypeEnum;
 import org.dromara.dynamictp.common.entity.ThreadPoolStats;
 import org.dromara.dynamictp.common.util.CommonUtil;
+import org.springframework.beans.BeanUtils;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
+import java.util.Optional;
 import java.util.concurrent.ConcurrentHashMap;
 
 /**
@@ -61,7 +61,7 @@ public void collect(ThreadPoolStats threadPoolStats) {
         if (Objects.isNull(oldStats)) {
             GAUGE_CACHE.put(threadPoolStats.getPoolName(), threadPoolStats);
         } else {
-            BeanUtil.copyProperties(threadPoolStats, oldStats);
+            BeanUtils.copyProperties(threadPoolStats, oldStats);
         }
         gauge(GAUGE_CACHE.get(threadPoolStats.getPoolName()));
     }

File: core/src/main/java/org/dromara/dynamictp/core/monitor/collector/jmx/JMXCollector.java
Patch:
@@ -53,8 +53,7 @@ public void collect(ThreadPoolStats threadPoolStats) {
             try {
                 MBeanServer server = ManagementFactory.getPlatformMBeanServer();
                 ObjectName name = new ObjectName(DTP_METRIC_NAME_PREFIX + ":name=" + threadPoolStats.getPoolName());
-                ThreadPoolStatsJMX stats = new ThreadPoolStatsJMX();
-                stats.setThreadPoolStats(threadPoolStats);
+                ThreadPoolStatsJMX stats = new ThreadPoolStatsJMX(threadPoolStats);
                 server.registerMBean(stats, name);
             } catch (JMException e) {
                 log.error("collect thread pool stats error", e);

File: core/src/main/java/org/dromara/dynamictp/core/handler/CollectorHandler.java
Patch:
@@ -25,6 +25,7 @@
 import org.dromara.dynamictp.core.monitor.collector.LogCollector;
 import org.dromara.dynamictp.core.monitor.collector.MetricsCollector;
 import org.dromara.dynamictp.core.monitor.collector.MicroMeterCollector;
+import org.dromara.dynamictp.core.monitor.collector.jmx.JMXCollector;
 import org.springframework.util.CollectionUtils;
 
 import java.util.List;
@@ -48,9 +49,11 @@ private CollectorHandler() {
         MetricsCollector microMeterCollector = new MicroMeterCollector();
         LogCollector logCollector = new LogCollector();
         InternalLogCollector internalLogCollector = new InternalLogCollector();
+        JMXCollector jmxCollector = new JMXCollector();
         COLLECTORS.put(microMeterCollector.type(), microMeterCollector);
         COLLECTORS.put(logCollector.type(), logCollector);
         COLLECTORS.put(internalLogCollector.type(), internalLogCollector);
+        COLLECTORS.put(jmxCollector.type(), jmxCollector);
     }
 
     public void collect(ThreadPoolStats poolStats, List<String> types) {

File: example/example-apollo/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -105,7 +105,7 @@ public DtpExecutor eagerDtpExecutor() {
                 .corePoolSize(2)
                 .maximumPoolSize(4)
                 .queueCapacity(2000)
-                .eager(true)
+                .eager()
                 .buildDynamic();
     }
 

File: example/example-consul-cloud/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -105,7 +105,7 @@ public DtpExecutor eagerDtpExecutor() {
                 .corePoolSize(2)
                 .maximumPoolSize(4)
                 .queueCapacity(2000)
-                .eager(true)
+                .eager()
                 .buildDynamic();
     }
 

File: example/example-etcd/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -105,7 +105,7 @@ public DtpExecutor eagerDtpExecutor() {
                 .corePoolSize(2)
                 .maximumPoolSize(4)
                 .queueCapacity(2000)
-                .eager(true)
+                .eager()
                 .buildDynamic();
     }
 

File: example/example-huawei-cloud/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -105,7 +105,7 @@ public DtpExecutor eagerDtpExecutor() {
                 .corePoolSize(2)
                 .maximumPoolSize(4)
                 .queueCapacity(2000)
-                .eager(true)
+                .eager()
                 .buildDynamic();
     }
 

File: example/example-nacos-cloud/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -105,7 +105,7 @@ public DtpExecutor eagerDtpExecutor() {
                 .corePoolSize(2)
                 .maximumPoolSize(4)
                 .queueCapacity(2000)
-                .eager(true)
+                .eager()
                 .buildDynamic();
     }
 

File: example/example-nacos/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -105,7 +105,7 @@ public DtpExecutor eagerDtpExecutor() {
                 .corePoolSize(2)
                 .maximumPoolSize(4)
                 .queueCapacity(2000)
-                .eager(true)
+                .eager()
                 .buildDynamic();
     }
 

File: example/example-polaris-cloud/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -105,7 +105,7 @@ public DtpExecutor eagerDtpExecutor() {
                 .corePoolSize(2)
                 .maximumPoolSize(4)
                 .queueCapacity(2000)
-                .eager(true)
+                .eager()
                 .buildDynamic();
     }
 

File: example/example-zookeeper-cloud/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -105,7 +105,7 @@ public DtpExecutor eagerDtpExecutor() {
                 .corePoolSize(2)
                 .maximumPoolSize(4)
                 .queueCapacity(2000)
-                .eager(true)
+                .eager()
                 .buildDynamic();
     }
 

File: example/example-zookeeper/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -105,7 +105,7 @@ public DtpExecutor eagerDtpExecutor() {
                 .corePoolSize(2)
                 .maximumPoolSize(4)
                 .queueCapacity(2000)
-                .eager(true)
+                .eager()
                 .buildDynamic();
     }
 

File: example/example-apollo/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -105,7 +105,7 @@ public DtpExecutor eagerDtpExecutor() {
                 .corePoolSize(2)
                 .maximumPoolSize(4)
                 .queueCapacity(2000)
-                .eager(true)
+                .eager()
                 .buildDynamic();
     }
 

File: example/example-consul-cloud/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -105,7 +105,7 @@ public DtpExecutor eagerDtpExecutor() {
                 .corePoolSize(2)
                 .maximumPoolSize(4)
                 .queueCapacity(2000)
-                .eager(true)
+                .eager()
                 .buildDynamic();
     }
 

File: example/example-etcd/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -105,7 +105,7 @@ public DtpExecutor eagerDtpExecutor() {
                 .corePoolSize(2)
                 .maximumPoolSize(4)
                 .queueCapacity(2000)
-                .eager(true)
+                .eager()
                 .buildDynamic();
     }
 

File: example/example-huawei-cloud/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -105,7 +105,7 @@ public DtpExecutor eagerDtpExecutor() {
                 .corePoolSize(2)
                 .maximumPoolSize(4)
                 .queueCapacity(2000)
-                .eager(true)
+                .eager()
                 .buildDynamic();
     }
 

File: example/example-nacos-cloud/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -105,7 +105,7 @@ public DtpExecutor eagerDtpExecutor() {
                 .corePoolSize(2)
                 .maximumPoolSize(4)
                 .queueCapacity(2000)
-                .eager(true)
+                .eager()
                 .buildDynamic();
     }
 

File: example/example-nacos/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -105,7 +105,7 @@ public DtpExecutor eagerDtpExecutor() {
                 .corePoolSize(2)
                 .maximumPoolSize(4)
                 .queueCapacity(2000)
-                .eager(true)
+                .eager()
                 .buildDynamic();
     }
 

File: example/example-polaris-cloud/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -105,7 +105,7 @@ public DtpExecutor eagerDtpExecutor() {
                 .corePoolSize(2)
                 .maximumPoolSize(4)
                 .queueCapacity(2000)
-                .eager(true)
+                .eager()
                 .buildDynamic();
     }
 

File: example/example-zookeeper-cloud/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -105,7 +105,7 @@ public DtpExecutor eagerDtpExecutor() {
                 .corePoolSize(2)
                 .maximumPoolSize(4)
                 .queueCapacity(2000)
-                .eager(true)
+                .eager()
                 .buildDynamic();
     }
 

File: example/example-zookeeper/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -105,7 +105,7 @@ public DtpExecutor eagerDtpExecutor() {
                 .corePoolSize(2)
                 .maximumPoolSize(4)
                 .queueCapacity(2000)
-                .eager(true)
+                .eager()
                 .buildDynamic();
     }
 

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/thread/OrderedDtpExecutorTest.java
Patch:
@@ -67,7 +67,6 @@ void orderedExecute() throws InterruptedException {
             MDC.put("traceId", String.valueOf(i));
             orderedDtpExecutor.execute(new TestOrderedRunnable("TEST"));
         }
-//        new CountDownLatch(1).await();
     }
 
     @Test

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/thread/OrderedDtpExecutorTest.java
Patch:
@@ -67,7 +67,6 @@ void orderedExecute() throws InterruptedException {
             MDC.put("traceId", String.valueOf(i));
             orderedDtpExecutor.execute(new TestOrderedRunnable("TEST"));
         }
-//        new CountDownLatch(1).await();
     }
 
     @Test

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/thread/PriorityDtpExecutorTest.java
Patch:
@@ -107,7 +107,7 @@ void prioritySubmitWithResult() throws InterruptedException, ExecutionException
     }
 
     @Test
-    void prioritySubmit3() throws InterruptedException, ExecutionException {
+    void submitCallable() throws InterruptedException, ExecutionException {
         int count = 5;
         CountDownLatch countDownLatch = new CountDownLatch(count);
         List<Future<String>> list = new ArrayList<>();
@@ -122,7 +122,7 @@ void prioritySubmit3() throws InterruptedException, ExecutionException {
     }
 
     @Test
-    void prioritySubmit4() throws InterruptedException, ExecutionException {
+    void prioritySubmitCallable() throws InterruptedException, ExecutionException {
         int count = 5;
         CountDownLatch countDownLatch = new CountDownLatch(count);
         List<Future<String>> list = new ArrayList<>();

File: core/src/main/java/org/dromara/dynamictp/core/executor/priority/PriorityCallable.java
Patch:
@@ -27,7 +27,7 @@ public V call() throws Exception {
 
     @Override
     public int compareTo(Object o) {
-        return Integer.compare(((PriorityCallable<?>) o).priority, this.priority);
+        return Integer.compare(this.priority, ((PriorityCallable<?>) o).priority);
     }
 
 }

File: core/src/main/java/org/dromara/dynamictp/core/executor/priority/PriorityRunnable.java
Patch:
@@ -22,7 +22,7 @@ public void run() {
 
     @Override
     public int compareTo(Object o) {
-        return Integer.compare(((PriorityRunnable) o).priority, this.priority);
+        return Integer.compare(this.priority, ((PriorityRunnable) o).priority);
     }
 
     public static PriorityRunnable of(Runnable runnable, int priority) {

File: core/src/main/java/org/dromara/dynamictp/core/support/task/runnable/DtpRunnable.java
Patch:
@@ -28,14 +28,13 @@
  * @author yanhom
  * @since 1.0.4
  */
+@Getter
 public class DtpRunnable implements Runnable {
 
     private final Runnable runnable;
 
-    @Getter
     private final String taskName;
 
-    @Getter
     private final String traceId;
 
     public DtpRunnable(Runnable runnable, String taskName) {

File: test/test-configcenter/src/test/java/org/dromara/dynamictp/test/configcenter/cloud/CloudRefresherTest.java
Patch:
@@ -22,7 +22,6 @@
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.springframework.cloud.context.environment.EnvironmentChangeEvent;
-import org.springframework.core.env.ConfigurableEnvironment;
 import org.springframework.core.env.MapPropertySource;
 import org.springframework.core.env.MutablePropertySources;
 
@@ -55,7 +54,7 @@ private void mockEnvironmentChange() {
         Map<String, Object> tmpMap = Maps.newHashMap();
         tmpMap.put("spring.dynamic.tp.executors[0].threadPoolName", "dtpExecutor1");
         tmpMap.put("spring.dynamic.tp.executors[0].corePoolSize", 10);
-        tmpMap.put("spring.dynamic.tp.executors[0].maxPoolSize", 20);
+        tmpMap.put("spring.dynamic.tp.executors[0].maximumPoolSize", 20);
 
         propertySources.addFirst(new MapPropertySource("DtpCloudRefreshTestPropertySource", tmpMap));
         Set<String> keys = Collections.singleton("spring.dynamic.tp.executors[0].corePoolSize");

File: adapter/adapter-dubbo/src/main/java/org/dromara/dynamictp/adapter/dubbo/apache/ApacheDubboDtpAdapter.java
Patch:
@@ -109,13 +109,13 @@ protected void initialize() {
             executorRepository = ExtensionLoader.getExtensionLoader(ExecutorRepository.class).getDefaultExtension();
         }
 
-        val data = (ConcurrentMap<String, ConcurrentMap<Integer, ExecutorService>>) ReflectionUtil.getFieldValue(
+        val data = (ConcurrentMap<String, ConcurrentMap<Object, ExecutorService>>) ReflectionUtil.getFieldValue(
                 DefaultExecutorRepository.class, "data", executorRepository);
         if (Objects.isNull(data)) {
             return;
         }
 
-        Map<Integer, ExecutorService> executorMap = data.get(EXECUTOR_SERVICE_COMPONENT_KEY);
+        Map<Object, ExecutorService> executorMap = data.get(EXECUTOR_SERVICE_COMPONENT_KEY);
         if (MapUtils.isNotEmpty(executorMap)) {
             executorMap.forEach((k, v) -> {
                 ThreadPoolExecutor proxy = getProxy(v);
@@ -124,7 +124,6 @@ protected void initialize() {
             });
         }
     }
-
     private ThreadPoolExecutor getProxy(Executor executor) {
         ThreadPoolExecutor proxy;
         if (executor instanceof EagerThreadPoolExecutor) {

File: common/src/main/java/org/dromara/dynamictp/common/constant/DynamicTpConst.java
Patch:
@@ -75,6 +75,8 @@ private DynamicTpConst() { }
 
     public static final String RUN_TIMEOUT = "runTimeout";
 
+    public static final String TRY_INTERRUPT_WHEN_TIMEOUT = "tryInterrupt";
+
     public static final String QUEUE_TIMEOUT = "queueTimeout";
 
     public static final String TASK_WRAPPERS = "taskWrappers";

File: core/src/main/java/org/dromara/dynamictp/core/aware/TaskTimeoutAware.java
Patch:
@@ -53,6 +53,7 @@ protected void refresh(TpExecutorProps props, ThreadPoolStatProvider statProvide
         if (Objects.nonNull(props)) {
             statProvider.setRunTimeout(props.getRunTimeout());
             statProvider.setQueueTimeout(props.getQueueTimeout());
+            statProvider.setTryInterrupt(props.isTryInterrupt());
         }
     }
 

File: core/src/main/java/org/dromara/dynamictp/core/timer/RunTimeoutTimerTask.java
Patch:
@@ -58,6 +58,9 @@ protected void doRun() {
                 statProvider.getExecutorWrapper().getExecutor().getQueueCapacity(), executor.getQueue().size(),
                 executor.getQueue().remainingCapacity(), traceToString(thread.getStackTrace()));
         log.warn(logMsg);
+        if (statProvider.isTryInterrupt()) {
+            thread.interrupt();
+        }
     }
 
     public String traceToString(StackTraceElement[] trace) {

File: common/src/main/java/org/dromara/dynamictp/common/constant/DynamicTpConst.java
Patch:
@@ -75,6 +75,8 @@ private DynamicTpConst() { }
 
     public static final String RUN_TIMEOUT = "runTimeout";
 
+    public static final String TRY_INTERRUPT_WHEN_TIMEOUT = "tryInterrupt";
+
     public static final String QUEUE_TIMEOUT = "queueTimeout";
 
     public static final String TASK_WRAPPERS = "taskWrappers";

File: core/src/main/java/org/dromara/dynamictp/core/aware/TaskTimeoutAware.java
Patch:
@@ -53,6 +53,7 @@ protected void refresh(TpExecutorProps props, ThreadPoolStatProvider statProvide
         if (Objects.nonNull(props)) {
             statProvider.setRunTimeout(props.getRunTimeout());
             statProvider.setQueueTimeout(props.getQueueTimeout());
+            statProvider.setTryInterrupt(props.isTryInterrupt());
         }
     }
 

File: core/src/main/java/org/dromara/dynamictp/core/timer/RunTimeoutTimerTask.java
Patch:
@@ -58,6 +58,9 @@ protected void doRun() {
                 statProvider.getExecutorWrapper().getExecutor().getQueueCapacity(), executor.getQueue().size(),
                 executor.getQueue().remainingCapacity(), traceToString(thread.getStackTrace()));
         log.warn(logMsg);
+        if (statProvider.isTryInterrupt()) {
+            thread.interrupt();
+        }
     }
 
     public String traceToString(StackTraceElement[] trace) {

File: common/src/main/java/org/dromara/dynamictp/common/entity/DtpExecutorProps.java
Patch:
@@ -37,7 +37,7 @@
 public class DtpExecutorProps extends TpExecutorProps {
 
     /**
-     * Executor type, used in create phase, see {@link org.dromara.dynamictp.core.support.ExecutorType}
+     * Executor type, used in create phase, see {@link org.dromara.dynamictp.core.executor.ExecutorType}
      */
     private String executorType;
 
@@ -80,14 +80,14 @@ public class DtpExecutorProps extends TpExecutorProps {
      * Whether to wait for scheduled tasks to complete on shutdown,
      * not interrupting running tasks and executing all tasks in the queue.
      */
-    private boolean waitForTasksToCompleteOnShutdown = false;
+    private boolean waitForTasksToCompleteOnShutdown = true;
 
     /**
      * The maximum number of seconds that this executor is supposed to block
      * on shutdown in order to wait for remaining tasks to complete their execution
      * before the rest of the container continues to shut down.
      */
-    private int awaitTerminationSeconds = 0;
+    private int awaitTerminationSeconds = 3;
 
     /**
      * If pre start all core threads.

File: adapter/adapter-brpc/src/main/java/org/dromara/dynamictp/apapter/brpc/client/StarlightClientDtpAdapter.java
Patch:
@@ -20,7 +20,6 @@
 import com.baidu.cloud.starlight.api.rpc.StarlightClient;
 import com.baidu.cloud.starlight.api.rpc.threadpool.ThreadPoolFactory;
 import com.baidu.cloud.starlight.core.rpc.SingleStarlightClient;
-import com.google.common.collect.Lists;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
 import org.apache.commons.collections4.CollectionUtils;
@@ -61,8 +60,7 @@ protected String getTpPrefix() {
     protected void initialize() {
         super.initialize();
 
-        List<StarlightClient> starlightClients = Lists.newArrayList();
-        starlightClients.addAll(JVMTI.getInstances(StarlightClient.class));
+        List<StarlightClient> starlightClients = JVMTI.getInstances(StarlightClient.class);
         if (CollectionUtils.isEmpty(starlightClients)) {
             log.warn("Cannot find beans of type StarlightClient.");
             return;

File: adapter/adapter-dubbo/src/main/java/org/dromara/dynamictp/adapter/dubbo/apache/ApacheDubboDtpAdapter.java
Patch:
@@ -93,7 +93,7 @@ protected void initialize() {
             if (MapUtils.isNotEmpty(executorMap)) {
                 executorMap.forEach((k, v) -> {
                     ThreadPoolExecutor proxy = getProxy((ThreadPoolExecutor) v);
-                    executorMap.replace(k, proxy);
+                    dataStore.put(EXECUTOR_SERVICE_COMPONENT_KEY, k, proxy);
                     putAndFinalize(genTpName(k), (ExecutorService) v, proxy);
                 });
             }

File: common/src/main/java/org/dromara/dynamictp/common/properties/DtpProperties.java
Patch:
@@ -19,7 +19,6 @@
 
 import com.google.common.collect.Lists;
 import lombok.Data;
-import lombok.extern.slf4j.Slf4j;
 import org.dromara.dynamictp.common.em.CollectorTypeEnum;
 import org.dromara.dynamictp.common.entity.DtpExecutorProps;
 import org.dromara.dynamictp.common.entity.NotifyPlatform;
@@ -33,7 +32,6 @@
  * @author yanhom
  * @since 1.0.0
  **/
-@Slf4j
 @Data
 public class DtpProperties {
 

File: adapter/adapter-brpc/src/main/java/org/dromara/dynamictp/apapter/brpc/client/StarlightClientDtpAdapter.java
Patch:
@@ -20,7 +20,6 @@
 import com.baidu.cloud.starlight.api.rpc.StarlightClient;
 import com.baidu.cloud.starlight.api.rpc.threadpool.ThreadPoolFactory;
 import com.baidu.cloud.starlight.core.rpc.SingleStarlightClient;
-import com.google.common.collect.Lists;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
 import org.apache.commons.collections4.CollectionUtils;
@@ -61,8 +60,7 @@ protected String getTpPrefix() {
     protected void initialize() {
         super.initialize();
 
-        List<StarlightClient> starlightClients = Lists.newArrayList();
-        starlightClients.addAll(JVMTI.getInstances(StarlightClient.class));
+        List<StarlightClient> starlightClients = JVMTI.getInstances(StarlightClient.class);
         if (CollectionUtils.isEmpty(starlightClients)) {
             log.warn("Cannot find beans of type StarlightClient.");
             return;

File: adapter/adapter-dubbo/src/main/java/org/dromara/dynamictp/adapter/dubbo/apache/ApacheDubboDtpAdapter.java
Patch:
@@ -93,7 +93,7 @@ protected void initialize() {
             if (MapUtils.isNotEmpty(executorMap)) {
                 executorMap.forEach((k, v) -> {
                     ThreadPoolExecutor proxy = getProxy((ThreadPoolExecutor) v);
-                    executorMap.replace(k, proxy);
+                    dataStore.put(EXECUTOR_SERVICE_COMPONENT_KEY, k, proxy);
                     putAndFinalize(genTpName(k), (ExecutorService) v, proxy);
                 });
             }

File: common/src/main/java/org/dromara/dynamictp/common/properties/DtpProperties.java
Patch:
@@ -19,7 +19,6 @@
 
 import com.google.common.collect.Lists;
 import lombok.Data;
-import lombok.extern.slf4j.Slf4j;
 import org.dromara.dynamictp.common.em.CollectorTypeEnum;
 import org.dromara.dynamictp.common.entity.DtpExecutorProps;
 import org.dromara.dynamictp.common.entity.NotifyPlatform;
@@ -33,7 +32,6 @@
  * @author yanhom
  * @since 1.0.0
  **/
-@Slf4j
 @Data
 public class DtpProperties {
 

File: example/example-apollo/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -72,7 +72,7 @@ public DtpExecutor ioIntensiveExecutor() {
                 .corePoolSize(20)
                 .maximumPoolSize(50)
                 .queueCapacity(2048)
-                .ioIntensive(true)
+                .eager(true)
                 .buildDynamic();
     }
 

File: example/example-consul-cloud/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -72,7 +72,7 @@ public DtpExecutor ioIntensiveExecutor() {
                 .corePoolSize(20)
                 .maximumPoolSize(50)
                 .queueCapacity(2048)
-                .ioIntensive(true)
+                .eager(true)
                 .buildDynamic();
     }
 

File: example/example-nacos-cloud/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -72,7 +72,7 @@ public DtpExecutor ioIntensiveExecutor() {
                 .corePoolSize(20)
                 .maximumPoolSize(50)
                 .queueCapacity(2048)
-                .ioIntensive(true)
+                .eager(true)
                 .buildDynamic();
     }
 

File: example/example-nacos/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -73,7 +73,7 @@ public DtpExecutor ioIntensiveExecutor() {
                 .corePoolSize(20)
                 .maximumPoolSize(50)
                 .queueCapacity(2048)
-                .ioIntensive(true)
+                .eager(true)
                 .buildDynamic();
     }
 

File: example/example-polaris-cloud/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -72,7 +72,7 @@ public DtpExecutor ioIntensiveExecutor() {
                 .corePoolSize(20)
                 .maximumPoolSize(50)
                 .queueCapacity(2048)
-                .ioIntensive(true)
+                .eager(true)
                 .buildDynamic();
     }
 

File: example/example-zookeeper-cloud/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -72,7 +72,7 @@ public DtpExecutor ioIntensiveExecutor() {
                 .corePoolSize(20)
                 .maximumPoolSize(50)
                 .queueCapacity(2048)
-                .ioIntensive(true)
+                .eager(true)
                 .buildDynamic();
     }
 

File: example/example-zookeeper/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -72,7 +72,7 @@ public DtpExecutor ioIntensiveExecutor() {
                 .corePoolSize(20)
                 .maximumPoolSize(50)
                 .queueCapacity(2048)
-                .ioIntensive(true)
+                .eager(true)
                 .buildDynamic();
     }
 

File: core/src/main/java/org/dromara/dynamictp/core/notifier/capture/CapturedExecutor.java
Patch:
@@ -24,14 +24,15 @@
 import org.dromara.dynamictp.core.executor.DtpExecutor;
 import org.dromara.dynamictp.common.em.NotifyItemEnum;
 import org.dromara.dynamictp.common.entity.NotifyPlatform;
+import org.dromara.dynamictp.core.support.ExecutorWrapper;
 
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.RejectedExecutionHandler;
 import java.util.concurrent.TimeUnit;
 
 /**
  * CapturedExecutor implements ExecutorAdapter, the goal of this class
- * is to capture DtpExecutor's status when construct {@link BaseNotifyCtx} during {@link AlarmManager#doAlarm}.
+ * is to capture DtpExecutor's status when construct {@link BaseNotifyCtx} during {@link AlarmManager#doTryAlarm}.
  * <p>
  * In other words, this can ensure that the thread pool status when the alarm threshold is triggered is
  * consistent with the content in the {@link AbstractDtpNotifier#buildAlarmContent(NotifyPlatform, NotifyItemEnum)}

File: core/src/main/java/org/dromara/dynamictp/core/spring/DtpPostProcessor.java
Patch:
@@ -75,7 +75,7 @@ public class DtpPostProcessor implements BeanPostProcessor, BeanFactoryAware, Pr
      * @param bean the new bean instance
      * @param beanName the name of the bean
      * @return the bean instance to use
-     * @throws BeansException
+     * @throws BeansException in case of errors
      */
     @Override
     public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {

File: core/src/main/java/org/dromara/dynamictp/core/support/ThreadPoolCreator.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ThreadPoolExecutor;
 
-import static org.dromara.dynamictp.common.em.QueueTypeEnum.SYNCHRONOUS_QUEUE;
 import static org.dromara.dynamictp.common.em.QueueTypeEnum.VARIABLE_LINKED_BLOCKING_QUEUE;
 
 /**

File: core/src/main/java/org/dromara/dynamictp/core/support/ThreadPoolCreator.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ThreadPoolExecutor;
 
-import static org.dromara.dynamictp.common.em.QueueTypeEnum.SYNCHRONOUS_QUEUE;
 import static org.dromara.dynamictp.common.em.QueueTypeEnum.VARIABLE_LINKED_BLOCKING_QUEUE;
 
 /**

File: adapter/adapter-rocketmq/src/main/java/org/dromara/dynamictp/adapter/rocketmq/RocketMqDtpAdapter.java
Patch:
@@ -20,7 +20,6 @@
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
 import org.apache.commons.collections4.CollectionUtils;
-import org.apache.commons.lang3.ArrayUtils;
 import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
 import org.apache.rocketmq.client.impl.consumer.ConsumeMessageConcurrentlyService;
 import org.apache.rocketmq.client.impl.consumer.ConsumeMessageOrderlyService;

File: core/src/main/java/org/dromara/dynamictp/core/monitor/collector/MicroMeterCollector.java
Patch:
@@ -113,9 +113,8 @@ private Iterable<Tag> getTags(ThreadPoolStats poolStats) {
         List<Tag> tags = new ArrayList<>(3);
         tags.add(Tag.of(POOL_NAME_TAG, poolStats.getPoolName()));
         tags.add(Tag.of(APP_NAME_TAG, CommonUtil.getInstance().getServiceName()));
-        if (StringUtils.isNotBlank(poolStats.getPoolAliasName())) {
-            tags.add(Tag.of(POOL_ALIAS_TAG, poolStats.getPoolAliasName()));
-        }
+        // https://github.com/dromara/dynamic-tp/issues/359
+        tags.add(Tag.of(POOL_ALIAS_TAG, Optional.ofNullable(poolStats.getPoolAliasName()).orElse(poolStats.getPoolName())));
         return tags;
     }
 }

File: core/src/main/java/org/dromara/dynamictp/core/monitor/collector/MicroMeterCollector.java
Patch:
@@ -113,9 +113,8 @@ private Iterable<Tag> getTags(ThreadPoolStats poolStats) {
         List<Tag> tags = new ArrayList<>(3);
         tags.add(Tag.of(POOL_NAME_TAG, poolStats.getPoolName()));
         tags.add(Tag.of(APP_NAME_TAG, CommonUtil.getInstance().getServiceName()));
-        if (StringUtils.isNotBlank(poolStats.getPoolAliasName())) {
-            tags.add(Tag.of(POOL_ALIAS_TAG, poolStats.getPoolAliasName()));
-        }
+        // https://github.com/dromara/dynamic-tp/issues/359
+        tags.add(Tag.of(POOL_ALIAS_TAG, Optional.ofNullable(poolStats.getPoolAliasName()).orElse(poolStats.getPoolName())));
         return tags;
     }
 }

File: core/src/main/java/org/dromara/dynamictp/core/monitor/collector/MicroMeterCollector.java
Patch:
@@ -113,9 +113,8 @@ private Iterable<Tag> getTags(ThreadPoolStats poolStats) {
         List<Tag> tags = new ArrayList<>(3);
         tags.add(Tag.of(POOL_NAME_TAG, poolStats.getPoolName()));
         tags.add(Tag.of(APP_NAME_TAG, CommonUtil.getInstance().getServiceName()));
-        if (StringUtils.isNotBlank(poolStats.getPoolAliasName())) {
-            tags.add(Tag.of(POOL_ALIAS_TAG, poolStats.getPoolAliasName()));
-        }
+        // https://github.com/dromara/dynamic-tp/issues/359
+        tags.add(Tag.of(POOL_ALIAS_TAG, Optional.ofNullable(poolStats.getPoolAliasName()).orElse(poolStats.getPoolName())));
         return tags;
     }
 }

File: core/src/main/java/org/dromara/dynamictp/core/aware/AwareManager.java
Patch:
@@ -46,7 +46,6 @@ private AwareManager() { }
         EXECUTOR_AWARE_LIST.add(new PerformanceMonitorAware());
         EXECUTOR_AWARE_LIST.add(new TaskTimeoutAware());
         EXECUTOR_AWARE_LIST.add(new TaskRejectAware());
-        EXECUTOR_AWARE_LIST.add(new TaskExecAware());
 
         List<ExecutorAware> serviceLoader = ExtensionServiceLoader.get(ExecutorAware.class);
         EXECUTOR_AWARE_LIST.addAll(serviceLoader);

File: adapter/adapter-motan/src/main/java/org/dromara/dynamictp/adapter/motan/MotanDtpAdapter.java
Patch:
@@ -31,7 +31,6 @@
 import org.dromara.dynamictp.common.properties.DtpProperties;
 import org.dromara.dynamictp.common.spring.ApplicationContextHolder;
 import org.dromara.dynamictp.common.util.ReflectionUtil;
-import org.dromara.dynamictp.core.support.ExecutorWrapper;
 
 import java.util.List;
 import java.util.Objects;
@@ -92,7 +91,7 @@ protected void initialize() {
                     String tpName = TP_PREFIX + "#" + nettyServer.getUrl().getPort();
                     try {
                         ReflectionUtil.setFieldValue(EXECUTOR_FIELD, nettyServer, proxy);
-                        executors.put(tpName, new ExecutorWrapper(tpName, proxy));
+                        putAndFinalize(tpName, executor, proxy);
                     } catch (IllegalAccessException ex) {
                         log.error("DynamicTp adapter, enhance {} failed.", tpName, ex);
                     }

File: adapter/adapter-motan/src/main/java/org/dromara/dynamictp/adapter/motan/StandardThreadExecutorProxy.java
Patch:
@@ -29,8 +29,6 @@
 import java.util.concurrent.RejectedExecutionHandler;
 import java.util.concurrent.TimeUnit;
 
-import static org.dromara.dynamictp.core.support.DtpLifecycleSupport.shutdownGracefulAsync;
-
 /**
  * @author hanli
  * @since 1.1.4
@@ -61,7 +59,6 @@ public StandardThreadExecutorProxy(StandardThreadExecutor executor) {
                 throw new RuntimeException(e);
             }
         }
-        shutdownGracefulAsync(executor, "motan", 5);
     }
 
     @Override

File: adapter/adapter-rocketmq/src/main/java/org/dromara/dynamictp/adapter/rocketmq/RocketMqDtpAdapter.java
Patch:
@@ -29,7 +29,6 @@
 import org.dromara.dynamictp.adapter.common.AbstractDtpAdapter;
 import org.dromara.dynamictp.common.properties.DtpProperties;
 import org.dromara.dynamictp.common.util.ReflectionUtil;
-import org.dromara.dynamictp.core.support.ExecutorWrapper;
 import org.dromara.dynamictp.core.support.ThreadPoolExecutorProxy;
 import org.dromara.dynamictp.jvmti.JVMTI;
 
@@ -113,7 +112,7 @@ public void adaptProducerExecutors() {
                 ThreadPoolExecutorProxy proxy = new ThreadPoolExecutorProxy(executor);
                 producer.setAsyncSenderExecutor(proxy);
                 String proKey = TP_PREFIX + "#producer#" + defaultMQProducer.getProducerGroup();
-                executors.put(proKey, new ExecutorWrapper(proKey, proxy));
+                putAndFinalize(proKey, executor, proxy);
             }
         }
     }

File: common/src/main/java/org/dromara/dynamictp/common/constant/DingNotifyConst.java
Patch:
@@ -63,7 +63,8 @@ private DingNotifyConst() { }
             "<font color=#664B4B size=2>报警时间：%s</font> \n\n" +
             "<font color=#664B4B size=2>接收人：@%s</font> \n\n" +
             "<font color=#664B4B size=2>trace 信息：%s</font> \n\n" +
-            "<font color=#22B838 size=2>报警间隔：%ss</font> \n\n";
+            "<font color=#22B838 size=2>报警间隔：%ss</font> \n\n" +
+            "<font color=#664B4B size=2>扩展信息：%s</font> \n\n";
 
     public static final String DING_CHANGE_NOTICE_TEMPLATE =
             "<font color=#5AB030>【通知】</font> 动态线程池参数变更 \n\n " +

File: common/src/main/java/org/dromara/dynamictp/common/constant/LarkNotifyConst.java
Patch:
@@ -64,7 +64,7 @@ private LarkNotifyConst() { }
      * lark alarm json str
      */
     public static final String LARK_ALARM_JSON_STR =
-            "{\"msg_type\":\"interactive\",\"card\":{\"config\":{\"wide_screen_mode\":true},\"header\":{\"template\":\"red\",\"title\":{\"tag\":\"plain_text\",\"content\":\"【报警】 动态线程池告警\"}},\"elements\":[{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**服务名称：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**实例信息：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**环境：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**线程池名称：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"alarmType **报警项：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"alarmValue **报警阈值 / 当前值：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"corePoolSize **核心线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"maximumPoolSize **最大线程数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"poolSize **当前线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"activeCount **活跃线程数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**历史最大线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**任务总数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**执行完成任务数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**等待执行任务数：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueType **队列类型：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueCapacity **队列容量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueSize **队列任务数量：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueRemaining **队列剩余容量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"rejectType **拒绝策略：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"rejectCount **总拒绝任务数量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"runTimeoutCount **总执行超时任务数量：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueTimeoutCount **总等待超时任务数量：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**上次报警时间：**\\n %s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**报警时间：**\\n %s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**接收人：**\\n %s\"}},{\"is_short\": true,\"text\": {\"tag\": \"lark_md\",\"content\": \"**trace 信息：**\\n %s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**报警间隔：**\\n %s\"}}]}]}}";
+            "{\"msg_type\":\"interactive\",\"card\":{\"config\":{\"wide_screen_mode\":true},\"header\":{\"template\":\"red\",\"title\":{\"tag\":\"plain_text\",\"content\":\"【报警】 动态线程池告警\"}},\"elements\":[{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**服务名称：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**实例信息：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**环境：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**线程池名称：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"alarmType **报警项：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"alarmValue **报警阈值 / 当前值：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"corePoolSize **核心线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"maximumPoolSize **最大线程数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"poolSize **当前线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"activeCount **活跃线程数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**历史最大线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**任务总数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**执行完成任务数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**等待执行任务数：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueType **队列类型：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueCapacity **队列容量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueSize **队列任务数量：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueRemaining **队列剩余容量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"rejectType **拒绝策略：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"rejectCount **总拒绝任务数量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"runTimeoutCount **总执行超时任务数量：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueTimeoutCount **总等待超时任务数量：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**上次报警时间：**\\n %s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**报警时间：**\\n %s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**接收人：**\\n %s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**trace 信息：**\\n %s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**报警间隔：**\\n %ss\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**扩展信息：**\\n %s\"}}]}]}}";
 
     /**
      * lark notice json str

File: common/src/main/java/org/dromara/dynamictp/common/constant/WechatNotifyConst.java
Patch:
@@ -66,7 +66,8 @@ private WechatNotifyConst() { }
             "> <font color='comment'>报警时间：%s</font> \n" +
             "> <font color='comment'>接收人：%s</font> \n" +
             "> <font color='comment'>trace 信息：%s</font> \n" +
-            "> <font color='info'>报警间隔：%ss</font> \n";
+            "> <font color='info'>报警间隔：%ss</font> \n" +
+            "> <font color='comment'>扩展信息：%s</font> \n";
 
     public static final String WECHAT_CHANGE_NOTICE_TEMPLATE =
             "<font color='info'>【通知】</font> 动态线程池参数变更 \n" +

File: common/src/main/java/org/dromara/dynamictp/common/entity/NotifyItem.java
Patch:
@@ -90,15 +90,15 @@ public static List<NotifyItem> mergeAllNotifyItems(List<NotifyItem> source) {
     public static List<NotifyItem> getAllNotifyItems() {
         NotifyItem rejectNotify = new NotifyItem();
         rejectNotify.setType(NotifyItemEnum.REJECT.getValue());
-        rejectNotify.setThreshold(1);
+        rejectNotify.setThreshold(10);
 
         NotifyItem runTimeoutNotify = new NotifyItem();
         runTimeoutNotify.setType(NotifyItemEnum.RUN_TIMEOUT.getValue());
-        runTimeoutNotify.setThreshold(1);
+        runTimeoutNotify.setThreshold(10);
 
         NotifyItem queueTimeoutNotify = new NotifyItem();
         queueTimeoutNotify.setType(NotifyItemEnum.QUEUE_TIMEOUT.getValue());
-        queueTimeoutNotify.setThreshold(1);
+        queueTimeoutNotify.setThreshold(10);
 
         List<NotifyItem> notifyItems = new ArrayList<>(6);
         notifyItems.addAll(getSimpleNotifyItems());

File: common/src/main/java/org/dromara/dynamictp/common/properties/DtpProperties.java
Patch:
@@ -52,7 +52,7 @@ private DtpProperties() { }
     /**
      * Config file type.
      */
-    private String configType = "yml";
+    private String configType;
 
     /**
      * If enabled metrics collect.

File: common/src/main/java/org/dromara/dynamictp/common/util/DateUtil.java
Patch:
@@ -29,8 +29,7 @@
  */
 public class DateUtil {
 
-    private DateUtil() {
-    }
+    private DateUtil() { }
 
     public static String now() {
         return LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSS"));

File: common/src/main/java/org/dromara/dynamictp/common/util/ExtensionServiceLoader.java
Patch:
@@ -35,8 +35,7 @@ public class ExtensionServiceLoader {
 
     private static final Map<Class<?>, List<?>> EXTENSION_MAP = new ConcurrentHashMap<>();
 
-    private ExtensionServiceLoader() {
-    }
+    private ExtensionServiceLoader() { }
 
     /**
      * load service

File: common/src/main/java/org/dromara/dynamictp/common/util/StreamUtil.java
Patch:
@@ -35,8 +35,7 @@
  **/
 public final class StreamUtil {
 
-    private StreamUtil() {
-    }
+    private StreamUtil() { }
 
     /**
      * Fetches id to list.

File: core/src/main/java/org/dromara/dynamictp/core/converter/ExecutorConverter.java
Patch:
@@ -21,10 +21,10 @@
 import org.dromara.dynamictp.common.entity.ThreadPoolStats;
 import org.dromara.dynamictp.common.entity.TpMainFields;
 import org.dromara.dynamictp.core.executor.DtpExecutor;
+import org.dromara.dynamictp.core.monitor.PerformanceProvider;
 import org.dromara.dynamictp.core.support.ExecutorAdapter;
 import org.dromara.dynamictp.core.support.ExecutorWrapper;
 import org.dromara.dynamictp.core.support.ThreadPoolStatProvider;
-import org.dromara.dynamictp.core.monitor.TpPerformanceProvider;
 
 import java.util.concurrent.TimeUnit;
 
@@ -58,8 +58,8 @@ public static ThreadPoolStats toMetrics(ExecutorWrapper wrapper) {
             return null;
         }
         ThreadPoolStatProvider provider = wrapper.getThreadPoolStatProvider();
-        TpPerformanceProvider performanceProvider = provider.getPerformanceProvider();
-        TpPerformanceProvider.PerformanceSnapshot performanceSnapshot = performanceProvider.getSnapshotAndReset();
+        PerformanceProvider performanceProvider = provider.getPerformanceProvider();
+        val performanceSnapshot = performanceProvider.getSnapshotAndReset();
         ThreadPoolStats poolStats = convertCommon(executor);
         poolStats.setPoolName(wrapper.getThreadPoolName());
         poolStats.setPoolAliasName(wrapper.getThreadPoolAliasName());

File: core/src/main/java/org/dromara/dynamictp/core/notifier/base/DingNotifier.java
Patch:
@@ -27,7 +27,6 @@
 import org.dromara.dynamictp.common.entity.NotifyPlatform;
 import org.dromara.dynamictp.common.util.DingSignUtil;
 import org.dromara.dynamictp.common.util.JsonUtil;
-import org.dromara.dynamictp.common.util.TimeUtil;
 
 import java.util.List;
 
@@ -87,7 +86,7 @@ private String getTargetUrl(String secret, String accessToken) {
         if (StringUtils.isBlank(secret)) {
             return DingNotifyConst.DING_WEBHOOK + accessToken;
         }
-        long timestamp = TimeUtil.currentTimeMillis();
+        long timestamp = System.currentTimeMillis();
         String sign = DingSignUtil.dingSign(secret, timestamp);
         return DingNotifyConst.DING_WEBHOOK + accessToken + "&timestamp=" + timestamp + "&sign=" + sign;
     }

File: core/src/main/java/org/dromara/dynamictp/core/notifier/base/LarkNotifier.java
Patch:
@@ -24,7 +24,6 @@
 import org.dromara.dynamictp.common.constant.LarkNotifyConst;
 import org.dromara.dynamictp.common.em.NotifyPlatformEnum;
 import org.dromara.dynamictp.common.entity.NotifyPlatform;
-import org.dromara.dynamictp.common.util.TimeUtil;
 
 import javax.crypto.Mac;
 import javax.crypto.spec.SecretKeySpec;
@@ -83,7 +82,7 @@ protected String buildMsgBody(NotifyPlatform platform, String content) {
             return content;
         }
         try {
-            val secondsTimestamp = TimeUtil.currentTimeSeconds();
+            val secondsTimestamp = System.currentTimeMillis() / 1000;
             val sign = genSign(platform.getSecret(), secondsTimestamp);
             content = content.replace(SIGN_REPLACE, String.format(SIGN_PARAM, secondsTimestamp, sign));
         } catch (NoSuchAlgorithmException | InvalidKeyException e) {

File: core/src/main/java/org/dromara/dynamictp/core/spring/DtpLifecycle.java
Patch:
@@ -23,6 +23,7 @@
 import org.dromara.dynamictp.core.notifier.manager.NoticeManager;
 import org.dromara.dynamictp.core.support.DtpLifecycleSupport;
 import lombok.extern.slf4j.Slf4j;
+import org.dromara.dynamictp.core.system.SystemMetricManager;
 import org.springframework.context.SmartLifecycle;
 
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -62,5 +63,6 @@ public void shutdownInternal() {
         DtpMonitor.destroy();
         AlarmManager.destroy();
         NoticeManager.destroy();
+        SystemMetricManager.stop();
     }
 }

File: core/src/main/java/org/dromara/dynamictp/core/support/ExecutorWrapper.java
Patch:
@@ -19,8 +19,6 @@
 
 import com.google.common.collect.Sets;
 import lombok.Data;
-import lombok.Getter;
-import lombok.extern.slf4j.Slf4j;
 import org.dromara.dynamictp.common.em.NotifyItemEnum;
 import org.dromara.dynamictp.common.entity.NotifyItem;
 import org.dromara.dynamictp.core.aware.AwareManager;
@@ -43,7 +41,6 @@
  * @since 1.0.3
  **/
 @Data
-@Slf4j
 public class ExecutorWrapper {
 
     /**

File: extension/extension-notify-email/src/main/java/org/dromara/dynamictp/extension/notify/email/DtpEmailNotifier.java
Patch:
@@ -112,6 +112,7 @@ protected String buildAlarmContent(NotifyPlatform platform, NotifyItemEnum notif
         context.setVariable("trace", getTraceInfo());
         context.setVariable("alarmInterval", notifyItem.getInterval());
         context.setVariable("highlightVariables", getAlarmKeys(notifyItemEnum));
+        context.setVariable("ext", getExtInfo());
         return ((EmailNotifier) notifier).processTemplateContent("alarm", context);
     }
 

File: starter/starter-adapter/starter-adapter-webserver/src/main/java/org/dromara/dynamictp/starter/adapter/webserver/tomcat/TomcatDtpAdapter.java
Patch:
@@ -22,13 +22,13 @@
 import org.dromara.dynamictp.common.properties.DtpProperties;
 import org.dromara.dynamictp.core.aware.RejectHandlerAware;
 import org.dromara.dynamictp.core.support.ExecutorAdapter;
-import org.dromara.dynamictp.core.support.ExecutorWrapper;
 import org.dromara.dynamictp.starter.adapter.webserver.AbstractWebServerDtpAdapter;
 import org.springframework.boot.web.embedded.tomcat.TomcatWebServer;
 import org.springframework.boot.web.server.WebServer;
 
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.Executor;
+import java.util.concurrent.ExecutorService;
 import java.util.concurrent.TimeUnit;
 
 /**
@@ -44,12 +44,12 @@ public class TomcatDtpAdapter extends AbstractWebServerDtpAdapter<Executor> {
     private static final String TP_PREFIX = "tomcatTp";
 
     @Override
-    public ExecutorWrapper enhanceAndGetExecutorWrapper(WebServer webServer) {
+    public void doEnhance(WebServer webServer) {
         TomcatWebServer tomcatWebServer = (TomcatWebServer) webServer;
         Executor originExecutor = tomcatWebServer.getTomcat().getConnector().getProtocolHandler().getExecutor();
         TomcatExecutorProxy proxy = new TomcatExecutorProxy((ThreadPoolExecutor) originExecutor);
         tomcatWebServer.getTomcat().getConnector().getProtocolHandler().setExecutor(proxy);
-        return new ExecutorWrapper(getTpName(), new TomcatExecutorAdapter(proxy));
+        putAndFinalize(getTpName(), (ExecutorService) originExecutor, new TomcatExecutorAdapter(proxy));
     }
 
     @Override

File: test/test-adapter/src/test/java/org/dromara/dynamictp/test/adapter/webserver/tomcat/TomcatExecutorProxyTest.java
Patch:
@@ -46,6 +46,7 @@ public void testParamAndStatus() throws InterruptedException {
         Assert.assertEquals(executor.getQueue(), proxy.getQueue());
         Assert.assertEquals(executor.allowsCoreThreadTimeOut(), proxy.allowsCoreThreadTimeOut());
 
+        executor.shutdown();
         Thread.sleep(3000);
         Assert.assertTrue(executor.isShutdown());
         Assert.assertTrue(executor.isTerminated());

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/thread/proxy/ThreadPoolExecutorProxyTest.java
Patch:
@@ -61,6 +61,7 @@ public void testParamAndStatus() throws InterruptedException {
         Assertions.assertEquals(executor.getQueue(), proxy.getQueue());
         Assertions.assertEquals(executor.allowsCoreThreadTimeOut(), proxy.allowsCoreThreadTimeOut());
 
+        executor.shutdown();
         Thread.sleep(3000);
         Assertions.assertTrue(executor.isShutdown());
         Assertions.assertTrue(executor.isTerminated());

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/thread/proxy/ThreadPoolExecutorTest.java
Patch:
@@ -50,11 +50,10 @@ public void testParamAndStatus() throws InterruptedException {
         Assert.assertEquals(executor.getQueue(), proxy.getQueue());
         Assert.assertEquals(executor.allowsCoreThreadTimeOut(), proxy.allowsCoreThreadTimeOut());
 
+        executor.shutdown();
         Thread.sleep(3000);
         Assert.assertTrue(executor.isShutdown());
         Assert.assertTrue(executor.isTerminated());
         Assert.assertFalse(executor.isTerminating());
     }
-
-
 }

File: core/src/main/java/org/dromara/dynamictp/core/executor/ScheduledDtpExecutor.java
Patch:
@@ -174,7 +174,7 @@ public int getCorePoolSize() {
 
     @Override
     public void setMaximumPoolSize(int maximumPoolSize) {
-        delegate.setMaximumPoolSize(maximumPoolSize);
+        // cancel the assignment to maximumPoolSize
     }
 
     @Override
@@ -210,7 +210,7 @@ public boolean prestartCoreThread() {
 
     @Override
     public void setKeepAliveTime(long time, TimeUnit unit) {
-        delegate.setKeepAliveTime(time, unit);
+        // cancel the assignment to keepAliveTime
     }
 
     @Override
@@ -235,7 +235,7 @@ public boolean allowsCoreThreadTimeOut() {
 
     @Override
     public void allowCoreThreadTimeOut(boolean value) {
-        delegate.allowCoreThreadTimeOut(value);
+        // cancel the assignment to allowCoreThreadTimeOut
     }
 
     @Override

File: core/src/main/java/org/dromara/dynamictp/core/support/ExecutorWrapper.java
Patch:
@@ -179,7 +179,8 @@ public boolean isDtpExecutor() {
     }
 
     /**
-     *  whether is ThreadPoolExecutor
+     * whether is ThreadPoolExecutor
+     *
      * @return boolean
      */
     public boolean isThreadPoolExecutor() {
@@ -188,6 +189,7 @@ public boolean isThreadPoolExecutor() {
 
     /**
      * set taskWrappers
+     *
      * @param taskWrappers taskWrappers
      */
     public void setTaskWrappers(List<TaskWrapper> taskWrappers) {

File: core/src/main/java/org/dromara/dynamictp/core/executor/ScheduledDtpExecutor.java
Patch:
@@ -58,8 +58,6 @@ public ScheduledDtpExecutor(int corePoolSize,
             corePoolSize = corePoolSize == 0 ? 1 : corePoolSize;
         }
         delegate = new ScheduledThreadPoolExecutor(corePoolSize, threadFactory, handler);
-        delegate.setKeepAliveTime(keepAliveTime, unit);
-        delegate.setMaximumPoolSize(maximumPoolSize);
     }
 
     @Override
@@ -192,7 +190,7 @@ public int getQueueCapacity() {
 
     @Override
     public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {
-        delegate.allowCoreThreadTimeOut(allowCoreThreadTimeOut);
+        // cancel the assignment to allowCoreThreadTimeOut
     }
 
     @Override

File: core/src/main/java/org/dromara/dynamictp/core/executor/ScheduledDtpExecutor.java
Patch:
@@ -58,6 +58,8 @@ public ScheduledDtpExecutor(int corePoolSize,
             corePoolSize = corePoolSize == 0 ? 1 : corePoolSize;
         }
         delegate = new ScheduledThreadPoolExecutor(corePoolSize, threadFactory, handler);
+        delegate.setKeepAliveTime(keepAliveTime, unit);
+        delegate.setMaximumPoolSize(maximumPoolSize);
     }
 
     @Override

File: common/src/main/java/org/dromara/dynamictp/common/properties/DtpProperties.java
Patch:
@@ -52,7 +52,7 @@ private DtpProperties() { }
     /**
      * Config file type.
      */
-    private String configType = "yml";
+    private String configType;
 
     /**
      * If enabled metrics collect.

File: common/src/main/java/org/dromara/dynamictp/common/util/MethodUtil.java
Patch:
@@ -38,9 +38,9 @@ private MethodUtil() { }
      */
     public static double invokeAndReturnDouble(Method method, Object targetObj) {
         try {
-            return method != null ? (double) method.invoke(targetObj) : Double.NaN;
+            return method != null ? (double) method.invoke(targetObj) : 0;
         } catch (Exception e) {
-            return Double.NaN;
+            return 0;
         }
     }
 

File: common/src/main/java/org/dromara/dynamictp/common/util/DateUtil.java
Patch:
@@ -29,8 +29,7 @@
  */
 public class DateUtil {
 
-    private DateUtil() {
-    }
+    private DateUtil() { }
 
     public static String now() {
         return LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSS"));

File: common/src/main/java/org/dromara/dynamictp/common/util/ExtensionServiceLoader.java
Patch:
@@ -35,8 +35,7 @@ public class ExtensionServiceLoader {
 
     private static final Map<Class<?>, List<?>> EXTENSION_MAP = new ConcurrentHashMap<>();
 
-    private ExtensionServiceLoader() {
-    }
+    private ExtensionServiceLoader() { }
 
     /**
      * load service

File: common/src/main/java/org/dromara/dynamictp/common/util/StreamUtil.java
Patch:
@@ -35,8 +35,7 @@
  **/
 public final class StreamUtil {
 
-    private StreamUtil() {
-    }
+    private StreamUtil() { }
 
     /**
      * Fetches id to list.

File: core/src/main/java/org/dromara/dynamictp/core/system/OperatingSystemBeanManager.java
Patch:
@@ -16,6 +16,7 @@
  */
 
 package org.dromara.dynamictp.core.system;
+
 import lombok.extern.slf4j.Slf4j;
 import org.dromara.dynamictp.common.util.MethodUtil;
 

File: common/src/main/java/org/dromara/dynamictp/common/constant/DingNotifyConst.java
Patch:
@@ -63,7 +63,8 @@ private DingNotifyConst() { }
             "<font color=#664B4B size=2>报警时间：%s</font> \n\n" +
             "<font color=#664B4B size=2>接收人：@%s</font> \n\n" +
             "<font color=#664B4B size=2>trace 信息：%s</font> \n\n" +
-            "<font color=#22B838 size=2>报警间隔：%ss</font> \n\n";
+            "<font color=#22B838 size=2>报警间隔：%ss</font> \n\n" +
+            "<font color=#664B4B size=2>扩展信息：%s</font> \n\n";
 
     public static final String DING_CHANGE_NOTICE_TEMPLATE =
             "<font color=#5AB030>【通知】</font> 动态线程池参数变更 \n\n " +

File: common/src/main/java/org/dromara/dynamictp/common/constant/LarkNotifyConst.java
Patch:
@@ -64,7 +64,7 @@ private LarkNotifyConst() { }
      * lark alarm json str
      */
     public static final String LARK_ALARM_JSON_STR =
-            "{\"msg_type\":\"interactive\",\"card\":{\"config\":{\"wide_screen_mode\":true},\"header\":{\"template\":\"red\",\"title\":{\"tag\":\"plain_text\",\"content\":\"【报警】 动态线程池告警\"}},\"elements\":[{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**服务名称：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**实例信息：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**环境：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**线程池名称：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"alarmType **报警项：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"alarmValue **报警阈值 / 当前值：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"corePoolSize **核心线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"maximumPoolSize **最大线程数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"poolSize **当前线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"activeCount **活跃线程数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**历史最大线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**任务总数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**执行完成任务数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**等待执行任务数：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueType **队列类型：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueCapacity **队列容量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueSize **队列任务数量：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueRemaining **队列剩余容量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"rejectType **拒绝策略：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"rejectCount **总拒绝任务数量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"runTimeoutCount **总执行超时任务数量：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueTimeoutCount **总等待超时任务数量：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**上次报警时间：**\\n %s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**报警时间：**\\n %s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**接收人：**\\n %s\"}},{\"is_short\": true,\"text\": {\"tag\": \"lark_md\",\"content\": \"**trace 信息：**\\n %s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**报警间隔：**\\n %s\"}}]}]}}";
+            "{\"msg_type\":\"interactive\",\"card\":{\"config\":{\"wide_screen_mode\":true},\"header\":{\"template\":\"red\",\"title\":{\"tag\":\"plain_text\",\"content\":\"【报警】 动态线程池告警\"}},\"elements\":[{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**服务名称：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**实例信息：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**环境：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**线程池名称：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"alarmType **报警项：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"alarmValue **报警阈值 / 当前值：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"corePoolSize **核心线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"maximumPoolSize **最大线程数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"poolSize **当前线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"activeCount **活跃线程数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**历史最大线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**任务总数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**执行完成任务数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**等待执行任务数：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueType **队列类型：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueCapacity **队列容量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueSize **队列任务数量：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueRemaining **队列剩余容量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"rejectType **拒绝策略：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"rejectCount **总拒绝任务数量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"runTimeoutCount **总执行超时任务数量：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueTimeoutCount **总等待超时任务数量：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**上次报警时间：**\\n %s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**报警时间：**\\n %s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**接收人：**\\n %s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**trace 信息：**\\n %s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**报警间隔：**\\n %ss\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**扩展信息：**\\n %s\"}}]}]}}";
 
     /**
      * lark notice json str

File: common/src/main/java/org/dromara/dynamictp/common/constant/WechatNotifyConst.java
Patch:
@@ -66,7 +66,8 @@ private WechatNotifyConst() { }
             "> <font color='comment'>报警时间：%s</font> \n" +
             "> <font color='comment'>接收人：%s</font> \n" +
             "> <font color='comment'>trace 信息：%s</font> \n" +
-            "> <font color='info'>报警间隔：%ss</font> \n";
+            "> <font color='info'>报警间隔：%ss</font> \n" +
+            "> <font color='comment'>扩展信息：%s</font> \n";
 
     public static final String WECHAT_CHANGE_NOTICE_TEMPLATE =
             "<font color='info'>【通知】</font> 动态线程池参数变更 \n" +

File: core/src/main/java/org/dromara/dynamictp/core/spring/DtpLifecycle.java
Patch:
@@ -23,6 +23,7 @@
 import org.dromara.dynamictp.core.notifier.manager.NoticeManager;
 import org.dromara.dynamictp.core.support.DtpLifecycleSupport;
 import lombok.extern.slf4j.Slf4j;
+import org.dromara.dynamictp.core.system.SystemMetricManager;
 import org.springframework.context.SmartLifecycle;
 
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -62,5 +63,6 @@ public void shutdownInternal() {
         DtpMonitor.destroy();
         AlarmManager.destroy();
         NoticeManager.destroy();
+        SystemMetricManager.stop();
     }
 }

File: extension/extension-notify-email/src/main/java/org/dromara/dynamictp/extension/notify/email/DtpEmailNotifier.java
Patch:
@@ -112,6 +112,7 @@ protected String buildAlarmContent(NotifyPlatform platform, NotifyItemEnum notif
         context.setVariable("trace", getTraceInfo());
         context.setVariable("alarmInterval", notifyItem.getInterval());
         context.setVariable("highlightVariables", getAlarmKeys(notifyItemEnum));
+        context.setVariable("ext", getExtInfo());
         return ((EmailNotifier) notifier).processTemplateContent("alarm", context);
     }
 

File: common/src/main/java/org/dromara/dynamictp/common/constant/DingNotifyConst.java
Patch:
@@ -63,7 +63,8 @@ private DingNotifyConst() { }
             "<font color=#664B4B size=2>报警时间：%s</font> \n\n" +
             "<font color=#664B4B size=2>接收人：@%s</font> \n\n" +
             "<font color=#664B4B size=2>trace 信息：%s</font> \n\n" +
-            "<font color=#22B838 size=2>报警间隔：%ss</font> \n\n";
+            "<font color=#22B838 size=2>报警间隔：%ss</font> \n\n" +
+            "<font color=#664B4B size=2>扩展信息：%s</font> \n\n";
 
     public static final String DING_CHANGE_NOTICE_TEMPLATE =
             "<font color=#5AB030>【通知】</font> 动态线程池参数变更 \n\n " +

File: common/src/main/java/org/dromara/dynamictp/common/constant/LarkNotifyConst.java
Patch:
@@ -64,7 +64,7 @@ private LarkNotifyConst() { }
      * lark alarm json str
      */
     public static final String LARK_ALARM_JSON_STR =
-            "{\"msg_type\":\"interactive\",\"card\":{\"config\":{\"wide_screen_mode\":true},\"header\":{\"template\":\"red\",\"title\":{\"tag\":\"plain_text\",\"content\":\"【报警】 动态线程池告警\"}},\"elements\":[{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**服务名称：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**实例信息：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**环境：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**线程池名称：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"alarmType **报警项：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"alarmValue **报警阈值 / 当前值：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"corePoolSize **核心线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"maximumPoolSize **最大线程数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"poolSize **当前线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"activeCount **活跃线程数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**历史最大线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**任务总数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**执行完成任务数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**等待执行任务数：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueType **队列类型：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueCapacity **队列容量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueSize **队列任务数量：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueRemaining **队列剩余容量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"rejectType **拒绝策略：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"rejectCount **总拒绝任务数量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"runTimeoutCount **总执行超时任务数量：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueTimeoutCount **总等待超时任务数量：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**上次报警时间：**\\n %s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**报警时间：**\\n %s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**接收人：**\\n %s\"}},{\"is_short\": true,\"text\": {\"tag\": \"lark_md\",\"content\": \"**trace 信息：**\\n %s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**报警间隔：**\\n %s\"}}]}]}}";
+            "{\"msg_type\":\"interactive\",\"card\":{\"config\":{\"wide_screen_mode\":true},\"header\":{\"template\":\"red\",\"title\":{\"tag\":\"plain_text\",\"content\":\"【报警】 动态线程池告警\"}},\"elements\":[{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**服务名称：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**实例信息：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**环境：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**线程池名称：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"alarmType **报警项：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"alarmValue **报警阈值 / 当前值：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"corePoolSize **核心线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"maximumPoolSize **最大线程数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"poolSize **当前线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"activeCount **活跃线程数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**历史最大线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**任务总数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**执行完成任务数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**等待执行任务数：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueType **队列类型：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueCapacity **队列容量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueSize **队列任务数量：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueRemaining **队列剩余容量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"rejectType **拒绝策略：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"rejectCount **总拒绝任务数量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"runTimeoutCount **总执行超时任务数量：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueTimeoutCount **总等待超时任务数量：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**上次报警时间：**\\n %s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**报警时间：**\\n %s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**接收人：**\\n %s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**trace 信息：**\\n %s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**报警间隔：**\\n %ss\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**扩展信息：**\\n %s\"}}]}]}}";
 
     /**
      * lark notice json str

File: common/src/main/java/org/dromara/dynamictp/common/constant/WechatNotifyConst.java
Patch:
@@ -66,7 +66,8 @@ private WechatNotifyConst() { }
             "> <font color='comment'>报警时间：%s</font> \n" +
             "> <font color='comment'>接收人：%s</font> \n" +
             "> <font color='comment'>trace 信息：%s</font> \n" +
-            "> <font color='info'>报警间隔：%ss</font> \n";
+            "> <font color='info'>报警间隔：%ss</font> \n" +
+            "> <font color='comment'>扩展信息：%s</font> \n";
 
     public static final String WECHAT_CHANGE_NOTICE_TEMPLATE =
             "<font color='info'>【通知】</font> 动态线程池参数变更 \n" +

File: core/src/main/java/org/dromara/dynamictp/core/spring/DtpLifecycle.java
Patch:
@@ -23,6 +23,7 @@
 import org.dromara.dynamictp.core.notifier.manager.NoticeManager;
 import org.dromara.dynamictp.core.support.DtpLifecycleSupport;
 import lombok.extern.slf4j.Slf4j;
+import org.dromara.dynamictp.core.system.SystemMetricManager;
 import org.springframework.context.SmartLifecycle;
 
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -62,5 +63,6 @@ public void shutdownInternal() {
         DtpMonitor.destroy();
         AlarmManager.destroy();
         NoticeManager.destroy();
+        SystemMetricManager.stop();
     }
 }

File: extension/extension-notify-email/src/main/java/org/dromara/dynamictp/extension/notify/email/DtpEmailNotifier.java
Patch:
@@ -112,6 +112,7 @@ protected String buildAlarmContent(NotifyPlatform platform, NotifyItemEnum notif
         context.setVariable("trace", getTraceInfo());
         context.setVariable("alarmInterval", notifyItem.getInterval());
         context.setVariable("highlightVariables", getAlarmKeys(notifyItemEnum));
+        context.setVariable("ext", getExtInfo());
         return ((EmailNotifier) notifier).processTemplateContent("alarm", context);
     }
 

File: adapter/adapter-rocketmq/src/main/java/org/dromara/dynamictp/adapter/rocketmq/RocketMqDtpAdapter.java
Patch:
@@ -29,7 +29,6 @@
 import org.dromara.dynamictp.adapter.common.AbstractDtpAdapter;
 import org.dromara.dynamictp.common.properties.DtpProperties;
 import org.dromara.dynamictp.common.util.ReflectionUtil;
-import org.dromara.dynamictp.core.support.ExecutorWrapper;
 import org.dromara.dynamictp.core.support.ThreadPoolExecutorProxy;
 import org.dromara.dynamictp.jvmti.JVMTI;
 

File: common/src/main/java/org/dromara/dynamictp/common/entity/NotifyItem.java
Patch:
@@ -90,15 +90,15 @@ public static List<NotifyItem> mergeAllNotifyItems(List<NotifyItem> source) {
     public static List<NotifyItem> getAllNotifyItems() {
         NotifyItem rejectNotify = new NotifyItem();
         rejectNotify.setType(NotifyItemEnum.REJECT.getValue());
-        rejectNotify.setThreshold(1);
+        rejectNotify.setThreshold(10);
 
         NotifyItem runTimeoutNotify = new NotifyItem();
         runTimeoutNotify.setType(NotifyItemEnum.RUN_TIMEOUT.getValue());
-        runTimeoutNotify.setThreshold(1);
+        runTimeoutNotify.setThreshold(10);
 
         NotifyItem queueTimeoutNotify = new NotifyItem();
         queueTimeoutNotify.setType(NotifyItemEnum.QUEUE_TIMEOUT.getValue());
-        queueTimeoutNotify.setThreshold(1);
+        queueTimeoutNotify.setThreshold(10);
 
         List<NotifyItem> notifyItems = new ArrayList<>(6);
         notifyItems.addAll(getSimpleNotifyItems());

File: test/test-adapter/src/test/java/org/dromara/dynamictp/test/adapter/webserver/tomcat/TomcatExecutorProxyTest.java
Patch:
@@ -46,6 +46,7 @@ public void testParamAndStatus() throws InterruptedException {
         Assert.assertEquals(executor.getQueue(), proxy.getQueue());
         Assert.assertEquals(executor.allowsCoreThreadTimeOut(), proxy.allowsCoreThreadTimeOut());
 
+        executor.shutdown();
         Thread.sleep(3000);
         Assert.assertTrue(executor.isShutdown());
         Assert.assertTrue(executor.isTerminated());

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/thread/proxy/ThreadPoolExecutorProxyTest.java
Patch:
@@ -61,6 +61,7 @@ public void testParamAndStatus() throws InterruptedException {
         Assertions.assertEquals(executor.getQueue(), proxy.getQueue());
         Assertions.assertEquals(executor.allowsCoreThreadTimeOut(), proxy.allowsCoreThreadTimeOut());
 
+        executor.shutdown();
         Thread.sleep(3000);
         Assertions.assertTrue(executor.isShutdown());
         Assertions.assertTrue(executor.isTerminated());

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/thread/proxy/ThreadPoolExecutorTest.java
Patch:
@@ -50,11 +50,10 @@ public void testParamAndStatus() throws InterruptedException {
         Assert.assertEquals(executor.getQueue(), proxy.getQueue());
         Assert.assertEquals(executor.allowsCoreThreadTimeOut(), proxy.allowsCoreThreadTimeOut());
 
+        executor.shutdown();
         Thread.sleep(3000);
         Assert.assertTrue(executor.isShutdown());
         Assert.assertTrue(executor.isTerminated());
         Assert.assertFalse(executor.isTerminating());
     }
-
-
 }

File: adapter/adapter-dubbo/src/main/java/org/dromara/dynamictp/adapter/dubbo/apache/EagerThreadPoolExecutorProxy.java
Patch:
@@ -28,6 +28,8 @@
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 
+import static org.dromara.dynamictp.core.support.DtpLifecycleSupport.shutdownGracefulAsync;
+
 /**
  * EagerThreadPoolExecutorProxy related
  *
@@ -54,7 +56,7 @@ public EagerThreadPoolExecutorProxy(EagerThreadPoolExecutor executor) {
         this.rejectHandlerType = getRejectedExecutionHandler().getClass().getSimpleName();
         setRejectedExecutionHandler(RejectHandlerGetter.getProxy(getRejectedExecutionHandler()));
         ((TaskQueue<Runnable>) getQueue()).setExecutor(this);
-        executor.shutdownNow();
+        shutdownGracefulAsync(executor, "dubbo", 5);
     }
 
     @Override

File: core/src/main/java/org/dromara/dynamictp/core/support/ThreadPoolExecutorProxy.java
Patch:
@@ -28,6 +28,8 @@
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
+import static org.dromara.dynamictp.core.support.DtpLifecycleSupport.shutdownGracefulAsync;
+
 /**
  * ThreadPoolExecutor Proxy
  *
@@ -54,7 +56,7 @@ public ThreadPoolExecutorProxy(ThreadPoolExecutor executor) {
                 executor.getThreadFactory(), executor.getRejectedExecutionHandler());
         this.rejectHandlerType = getRejectedExecutionHandler().getClass().getSimpleName();
         setRejectedExecutionHandler(RejectHandlerGetter.getProxy(getRejectedExecutionHandler()));
-        executor.shutdownNow();
+        shutdownGracefulAsync(executor, "", 5);
     }
 
     @Override

File: starter/starter-adapter/starter-adapter-webserver/src/main/java/org/dromara/dynamictp/starter/adapter/webserver/AbstractWebServerDtpAdapter.java
Patch:
@@ -49,6 +49,7 @@ public void onApplicationEvent(ApplicationEvent event) {
             try {
                 DtpProperties dtpProperties = ApplicationContextHolder.getBean(DtpProperties.class);
                 initialize();
+                afterInitialize();
                 refresh(dtpProperties);
             } catch (Exception e) {
                 log.error("Init web server thread pool failed.", e);

File: adapter/adapter-dubbo/src/main/java/org/dromara/dynamictp/adapter/dubbo/apache/EagerThreadPoolExecutorProxy.java
Patch:
@@ -28,6 +28,8 @@
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 
+import static org.dromara.dynamictp.core.support.DtpLifecycleSupport.shutdownGracefulAsync;
+
 /**
  * EagerThreadPoolExecutorProxy related
  *
@@ -54,7 +56,7 @@ public EagerThreadPoolExecutorProxy(EagerThreadPoolExecutor executor) {
         this.rejectHandlerType = getRejectedExecutionHandler().getClass().getSimpleName();
         setRejectedExecutionHandler(RejectHandlerGetter.getProxy(getRejectedExecutionHandler()));
         ((TaskQueue<Runnable>) getQueue()).setExecutor(this);
-        executor.shutdownNow();
+        shutdownGracefulAsync(executor, "dubbo", 5);
     }
 
     @Override

File: core/src/main/java/org/dromara/dynamictp/core/support/ThreadPoolExecutorProxy.java
Patch:
@@ -28,6 +28,8 @@
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
+import static org.dromara.dynamictp.core.support.DtpLifecycleSupport.shutdownGracefulAsync;
+
 /**
  * ThreadPoolExecutor Proxy
  *
@@ -54,7 +56,7 @@ public ThreadPoolExecutorProxy(ThreadPoolExecutor executor) {
                 executor.getThreadFactory(), executor.getRejectedExecutionHandler());
         this.rejectHandlerType = getRejectedExecutionHandler().getClass().getSimpleName();
         setRejectedExecutionHandler(RejectHandlerGetter.getProxy(getRejectedExecutionHandler()));
-        executor.shutdownNow();
+        shutdownGracefulAsync(executor, "", 5);
     }
 
     @Override

File: starter/starter-adapter/starter-adapter-webserver/src/main/java/org/dromara/dynamictp/starter/adapter/webserver/AbstractWebServerDtpAdapter.java
Patch:
@@ -49,6 +49,7 @@ public void onApplicationEvent(ApplicationEvent event) {
             try {
                 DtpProperties dtpProperties = ApplicationContextHolder.getBean(DtpProperties.class);
                 initialize();
+                afterInitialize();
                 refresh(dtpProperties);
             } catch (Exception e) {
                 log.error("Init web server thread pool failed.", e);

File: core/src/main/java/org/dromara/dynamictp/core/aware/AwareManager.java
Patch:
@@ -43,6 +43,7 @@ public class AwareManager {
     private AwareManager() { }
 
     static {
+        EXECUTOR_AWARE_LIST.add(new PerformanceMonitorAware());
         EXECUTOR_AWARE_LIST.add(new TaskTimeoutAware());
         EXECUTOR_AWARE_LIST.add(new TaskRejectAware());
         EXECUTOR_AWARE_LIST.add(new TaskExecAware());

File: core/src/main/java/org/dromara/dynamictp/core/aware/TaskStatAware.java
Patch:
@@ -39,9 +39,6 @@ public abstract class TaskStatAware implements ExecutorAware {
     @Override
     public void register(ExecutorWrapper wrapper) {
         ThreadPoolStatProvider statProvider = wrapper.getThreadPoolStatProvider();
-        if (Objects.isNull(statProvider)) {
-            statProvider = ThreadPoolStatProvider.of(wrapper);
-        }
         statProviders.put(wrapper.getExecutor(), statProvider);
         statProviders.put(wrapper.getExecutor().getOriginal(), statProvider);
     }

File: core/src/main/java/org/dromara/dynamictp/core/support/ExecutorWrapper.java
Patch:
@@ -78,7 +78,7 @@ public class ExecutorWrapper {
     /**
      * Thread pool stat provider
      */
-    private ThreadPoolStatProvider threadPoolStatProvider;
+    private ThreadPoolStatProvider threadPoolStatProvider = ThreadPoolStatProvider.of(this);
 
     /**
      * Aware names
@@ -95,7 +95,6 @@ public ExecutorWrapper(DtpExecutor executor) {
         this.notifyEnabled = executor.isNotifyEnabled();
         this.platformIds = executor.getPlatformIds();
         this.awareNames = executor.getAwareNames();
-        this.threadPoolStatProvider = ThreadPoolStatProvider.of(this);
     }
 
     public ExecutorWrapper(String threadPoolName, Executor executor) {
@@ -108,7 +107,6 @@ public ExecutorWrapper(String threadPoolName, Executor executor) {
             throw new IllegalArgumentException("unsupported Executor type !");
         }
         this.notifyItems = NotifyItem.getAllNotifyItems();
-        this.threadPoolStatProvider = ThreadPoolStatProvider.of(this);
         AlarmManager.initAlarm(threadPoolName, notifyItems);
     }
 

File: example/example-polaris-cloud/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.dromara.dynamictp.example.config;
 
+import org.dromara.dynamictp.core.executor.DtpExecutor;
 import org.dromara.dynamictp.core.support.DynamicTp;
 import org.dromara.dynamictp.core.support.ThreadPoolBuilder;
 import org.dromara.dynamictp.core.support.ThreadPoolCreator;
-import org.dromara.dynamictp.core.executor.DtpExecutor;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 

File: example/example-polaris-cloud/src/main/java/org/dromara/dynamictp/example/controller/TestController.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.dromara.dynamictp.example.controller;
 
+import lombok.extern.slf4j.Slf4j;
 import org.dromara.dynamictp.common.properties.DtpProperties;
 import org.dromara.dynamictp.core.DtpRegistry;
 import org.dromara.dynamictp.core.support.task.runnable.NamedRunnable;
-import lombok.extern.slf4j.Slf4j;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RestController;
 
@@ -53,15 +53,15 @@ public void task() throws InterruptedException {
         for (int i = 0; i < 100; i++) {
             Thread.sleep(100);
             dtpExecutor1.execute(() -> {
-                log.info("i am dynamic-tp-test-1 task");
+                log.info("i am a dtp1 task");
             });
             dtpExecutor2.execute(NamedRunnable.of(() -> {
                 try {
                     Thread.sleep(1000);
                 } catch (InterruptedException e) {
                     e.printStackTrace();
                 }
-                log.info("i am dynamic-tp-test-2 task");
+                log.info("i am a dtp2 task");
             }, "task-" + i));
         }
     }

File: test/test-common/src/test/java/org/dromara/dynamictp/test/common/util/JsonUtilTest.java
Patch:
@@ -37,7 +37,7 @@
  *
  * @author topsuder
  * @author KamToHung
- * @see com.dtp.test.common.util dynamic-tp
+ * @see org.dromara.dynamictp.test.common.util dynamic-tp
  */
 class JsonUtilTest {
 
@@ -85,6 +85,4 @@ void testFromJson() {
         assertEquals(expected, testObject.getDate());
         assertEquals(updateDate, testObject.getUpdateDate());
     }
-
-
 }

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/notify/AbstractDtpNotifierTest.java
Patch:
@@ -63,7 +63,7 @@
  */
 @RunWith(PowerMockRunner.class)
 @PrepareForTest({ApplicationContextHolder.class, CommonUtil.class})
-@SuppressStaticInitializationFor("com.dtp.common.util.CommonUtil")
+@SuppressStaticInitializationFor("org.dromara.dynamictp.common.util.CommonUtil")
 public class AbstractDtpNotifierTest {
 
     private final Notifier notifier = Mockito.mock(Notifier.class);

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/spring/AopConfig.java
Patch:
@@ -46,7 +46,7 @@ public class AopConfig {
     public Advisor advisor(DemoService demoService) {
         //just demo.Just discard.
         AspectJExpressionPointcut aspectJExpressionPointcut = new AspectJExpressionPointcut();
-        aspectJExpressionPointcut.setExpression("execution(public * com.dtp.test.core.spring.Nothing.test(..))");
+        aspectJExpressionPointcut.setExpression("execution(public * org.dromara.dynamictp.test.core.spring.Nothing.test(..))");
         return new DefaultPointcutAdvisor(aspectJExpressionPointcut,
                 new CustomizableTraceInterceptor());
     }

File: core/src/main/java/org/dromara/dynamictp/core/spring/DtpPostProcessor.java
Patch:
@@ -118,8 +118,7 @@ private Object registerAndReturnCommon(Object bean, String beanName) {
         Executor proxy;
         Object result;
         if (bean instanceof ThreadPoolTaskExecutor) {
-            val executor = ((ThreadPoolTaskExecutor) bean).getThreadPoolExecutor();
-            proxy = new ThreadPoolExecutorProxy(executor);
+            proxy = new ThreadPoolExecutorProxy(((ThreadPoolTaskExecutor) bean).getThreadPoolExecutor());
             try {
                 ReflectionUtil.setFieldValue("threadPoolExecutor", bean, proxy);
             } catch (IllegalAccessException ignored) { }

File: example/example-polaris-cloud/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.dromara.dynamictp.example.config;
 
+import org.dromara.dynamictp.core.executor.DtpExecutor;
 import org.dromara.dynamictp.core.support.DynamicTp;
 import org.dromara.dynamictp.core.support.ThreadPoolBuilder;
 import org.dromara.dynamictp.core.support.ThreadPoolCreator;
-import org.dromara.dynamictp.core.executor.DtpExecutor;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 

File: example/example-polaris-cloud/src/main/java/org/dromara/dynamictp/example/controller/TestController.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.dromara.dynamictp.example.controller;
 
+import lombok.extern.slf4j.Slf4j;
 import org.dromara.dynamictp.common.properties.DtpProperties;
 import org.dromara.dynamictp.core.DtpRegistry;
 import org.dromara.dynamictp.core.support.task.runnable.NamedRunnable;
-import lombok.extern.slf4j.Slf4j;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RestController;
 
@@ -53,15 +53,15 @@ public void task() throws InterruptedException {
         for (int i = 0; i < 100; i++) {
             Thread.sleep(100);
             dtpExecutor1.execute(() -> {
-                log.info("i am dynamic-tp-test-1 task");
+                log.info("i am a dtp1 task");
             });
             dtpExecutor2.execute(NamedRunnable.of(() -> {
                 try {
                     Thread.sleep(1000);
                 } catch (InterruptedException e) {
                     e.printStackTrace();
                 }
-                log.info("i am dynamic-tp-test-2 task");
+                log.info("i am a dtp2 task");
             }, "task-" + i));
         }
     }

File: test/test-common/src/test/java/org/dromara/dynamictp/test/common/util/JsonUtilTest.java
Patch:
@@ -37,7 +37,7 @@
  *
  * @author topsuder
  * @author KamToHung
- * @see com.dtp.test.common.util dynamic-tp
+ * @see org.dromara.dynamictp.test.common.util dynamic-tp
  */
 class JsonUtilTest {
 
@@ -85,6 +85,4 @@ void testFromJson() {
         assertEquals(expected, testObject.getDate());
         assertEquals(updateDate, testObject.getUpdateDate());
     }
-
-
 }

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/notify/AbstractDtpNotifierTest.java
Patch:
@@ -63,7 +63,7 @@
  */
 @RunWith(PowerMockRunner.class)
 @PrepareForTest({ApplicationContextHolder.class, CommonUtil.class})
-@SuppressStaticInitializationFor("com.dtp.common.util.CommonUtil")
+@SuppressStaticInitializationFor("org.dromara.dynamictp.common.util.CommonUtil")
 public class AbstractDtpNotifierTest {
 
     private final Notifier notifier = Mockito.mock(Notifier.class);

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/spring/AopConfig.java
Patch:
@@ -46,7 +46,7 @@ public class AopConfig {
     public Advisor advisor(DemoService demoService) {
         //just demo.Just discard.
         AspectJExpressionPointcut aspectJExpressionPointcut = new AspectJExpressionPointcut();
-        aspectJExpressionPointcut.setExpression("execution(public * com.dtp.test.core.spring.Nothing.test(..))");
+        aspectJExpressionPointcut.setExpression("execution(public * org.dromara.dynamictp.test.core.spring.Nothing.test(..))");
         return new DefaultPointcutAdvisor(aspectJExpressionPointcut,
                 new CustomizableTraceInterceptor());
     }

File: core/src/main/java/org/dromara/dynamictp/core/aware/AwareManager.java
Patch:
@@ -43,6 +43,7 @@ public class AwareManager {
     private AwareManager() { }
 
     static {
+        EXECUTOR_AWARE_LIST.add(new PerformanceMonitorAware());
         EXECUTOR_AWARE_LIST.add(new TaskTimeoutAware());
         EXECUTOR_AWARE_LIST.add(new TaskRejectAware());
         EXECUTOR_AWARE_LIST.add(new TaskExecAware());

File: core/src/main/java/org/dromara/dynamictp/core/aware/TaskStatAware.java
Patch:
@@ -39,9 +39,6 @@ public abstract class TaskStatAware implements ExecutorAware {
     @Override
     public void register(ExecutorWrapper wrapper) {
         ThreadPoolStatProvider statProvider = wrapper.getThreadPoolStatProvider();
-        if (Objects.isNull(statProvider)) {
-            statProvider = ThreadPoolStatProvider.of(wrapper);
-        }
         statProviders.put(wrapper.getExecutor(), statProvider);
         statProviders.put(wrapper.getExecutor().getOriginal(), statProvider);
     }

File: core/src/main/java/org/dromara/dynamictp/core/monitor/collector/MicroMeterCollector.java
Patch:
@@ -92,6 +92,9 @@ public void gauge(ThreadPoolStats poolStats) {
         Metrics.gauge(metricName("reject.count"), tags, poolStats, ThreadPoolStats::getRejectCount);
         Metrics.gauge(metricName("run.timeout.count"), tags, poolStats, ThreadPoolStats::getRunTimeoutCount);
         Metrics.gauge(metricName("queue.timeout.count"), tags, poolStats, ThreadPoolStats::getQueueTimeoutCount);
+
+        Metrics.gauge(metricName("tps"), tags, poolStats, ThreadPoolStats::getTps);
+        Metrics.gauge(metricName("completed.task.time.avg"), tags, poolStats, ThreadPoolStats::getCompletedTaskTimeAvg);
     }
 
     private static String metricName(String name) {

File: core/src/main/java/org/dromara/dynamictp/core/support/ExecutorWrapper.java
Patch:
@@ -78,7 +78,7 @@ public class ExecutorWrapper {
     /**
      * Thread pool stat provider
      */
-    private ThreadPoolStatProvider threadPoolStatProvider;
+    private ThreadPoolStatProvider threadPoolStatProvider = ThreadPoolStatProvider.of(this);
 
     /**
      * Aware names
@@ -95,7 +95,6 @@ public ExecutorWrapper(DtpExecutor executor) {
         this.notifyEnabled = executor.isNotifyEnabled();
         this.platformIds = executor.getPlatformIds();
         this.awareNames = executor.getAwareNames();
-        this.threadPoolStatProvider = ThreadPoolStatProvider.of(this);
     }
 
     public ExecutorWrapper(String threadPoolName, Executor executor) {
@@ -108,7 +107,6 @@ public ExecutorWrapper(String threadPoolName, Executor executor) {
             throw new IllegalArgumentException("unsupported Executor type !");
         }
         this.notifyItems = NotifyItem.getAllNotifyItems();
-        this.threadPoolStatProvider = ThreadPoolStatProvider.of(this);
         AlarmManager.initAlarm(threadPoolName, notifyItems);
     }
 

File: example/example-adapter/example-adapter-webserver/src/main/java/org/dromara/dynamictp/example/controller/TestController.java
Patch:
@@ -31,7 +31,7 @@ public class TestController {
 
     @GetMapping("/dtp-example-adapter/testWebserver")
     public String testWebserver() throws InterruptedException {
-        Thread.sleep(1000);
+
         return "success";
     }
 }

File: test/test-adapter/src/test/java/org/dromara/dynamictp/test/adapter/webserver/tomcat/TomcatExecutorProxyTest.java
Patch:
@@ -39,7 +39,6 @@ public void testParamAndStatus() throws InterruptedException {
 
         Assert.assertEquals(executor.getCorePoolSize(), proxy.getCorePoolSize());
         Assert.assertEquals(executor.getMaximumPoolSize(), proxy.getMaximumPoolSize());
-        Assert.assertEquals(executor.getActiveCount(), proxy.getActiveCount());
         Assert.assertEquals(executor.getPoolSize(), proxy.getPoolSize());
         Assert.assertEquals(executor.getCompletedTaskCount(), proxy.getCompletedTaskCount());
         Assert.assertEquals(executor.getLargestPoolSize(), proxy.getLargestPoolSize());

File: test/test-adapter/src/test/java/org/dromara/dynamictp/test/adapter/webserver/jetty/InstrumentedQueuedThreadPoolProxyTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.dynamictp.test.adapter.webserver.proxy;
+package org.dromara.dynamictp.test.adapter.webserver.jetty;
 
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.binder.jetty.InstrumentedQueuedThreadPool;

File: test/test-adapter/src/test/java/org/dromara/dynamictp/test/adapter/webserver/jetty/MonitoredQueuedThreadPoolProxyTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.dynamictp.test.adapter.webserver.proxy;
+package org.dromara.dynamictp.test.adapter.webserver.jetty;
 
 import org.dromara.dynamictp.common.util.ReflectionUtil;
 import org.dromara.dynamictp.starter.adapter.webserver.jetty.MonitoredQueuedThreadPoolProxy;

File: test/test-adapter/src/test/java/org/dromara/dynamictp/test/adapter/webserver/jetty/QueuedThreadPoolProxyTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.dynamictp.test.adapter.webserver.proxy;
+package org.dromara.dynamictp.test.adapter.webserver.jetty;
 
 import lombok.val;
 import org.dromara.dynamictp.common.util.ReflectionUtil;

File: test/test-adapter/src/test/java/org/dromara/dynamictp/test/adapter/webserver/tomcat/TomcatExecutorProxyTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.dynamictp.test.adapter.webserver.proxy;
+package org.dromara.dynamictp.test.adapter.webserver.tomcat;
 
 import org.apache.tomcat.util.threads.TaskQueue;
 import org.apache.tomcat.util.threads.ThreadPoolExecutor;

File: test/test-adapter/src/test/java/org/dromara/dynamictp/test/adapter/webserver/proxy/TomcatExecutorProxyTest.java
Patch:
@@ -33,7 +33,7 @@
 public class TomcatExecutorProxyTest {
 
     @Test
-    public void testParamAndStatus() {
+    public void testParamAndStatus() throws InterruptedException {
         ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 10, 5, TimeUnit.SECONDS, new TaskQueue(1), new NamedThreadFactory("测试线程池"));
         TomcatExecutorProxy proxy = new TomcatExecutorProxy(executor);
 
@@ -50,6 +50,7 @@ public void testParamAndStatus() {
         Assert.assertEquals(executor.allowsCoreThreadTimeOut(), proxy.allowsCoreThreadTimeOut());
 
         Assert.assertTrue(executor.isShutdown());
+        Thread.sleep(100);
         Assert.assertTrue(executor.isTerminated());
         Assert.assertFalse(executor.isTerminating());
     }

File: starter/starter-adapter/starter-adapter-webserver/src/main/java/org/jboss/threads/EnhancedQueueExecutor.java
Patch:
@@ -143,7 +143,7 @@ public class EnhancedQueueExecutor extends EnhancedQueueExecutorBase6 implements
      * This hint defaults to {@code false} but can be changed to {@code true} by setting the {@code jboss.threads.eqe.disable}
      * property to {@code true} before this class is initialized.
      */
-    public static boolean DISABLE_HINT = readBooleanPropertyPrefixed("disable", false);
+    public static final boolean DISABLE_HINT = readBooleanPropertyPrefixed("disable", false);
 
     /**
      * Update the tail pointer opportunistically.

File: starter/starter-adapter/starter-adapter-webserver/src/main/java/org/dromara/dynamictp/starter/adapter/webserver/AbstractWebServerDtpAdapter.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.dynamictp.starter.adapter.webserver.adapter;
+package org.dromara.dynamictp.starter.adapter.webserver;
 
 import lombok.extern.slf4j.Slf4j;
 import org.dromara.dynamictp.adapter.common.AbstractDtpAdapter;

File: starter/starter-adapter/starter-adapter-webserver/src/main/java/org/dromara/dynamictp/starter/adapter/webserver/autocconfigure/WebServerTpAutoConfiguration.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.dromara.dynamictp.starter.adapter.webserver.autocconfigure;
 
-import org.dromara.dynamictp.starter.adapter.webserver.adapter.jetty.JettyDtpAdapter;
-import org.dromara.dynamictp.starter.adapter.webserver.adapter.tomcat.TomcatDtpAdapter;
-import org.dromara.dynamictp.starter.adapter.webserver.adapter.undertow.UndertowDtpAdapter;
+import org.dromara.dynamictp.starter.adapter.webserver.jetty.JettyDtpAdapter;
+import org.dromara.dynamictp.starter.adapter.webserver.tomcat.TomcatDtpAdapter;
+import org.dromara.dynamictp.starter.adapter.webserver.undertow.UndertowDtpAdapter;
 import org.dromara.dynamictp.core.spring.DtpBaseBeanConfiguration;
 import org.dromara.dynamictp.starter.adapter.webserver.autocconfigure.condition.ConditionalOnJettyWebServer;
 import org.dromara.dynamictp.starter.adapter.webserver.autocconfigure.condition.ConditionalOnTomcatWebServer;

File: starter/starter-adapter/starter-adapter-webserver/src/main/java/org/dromara/dynamictp/starter/adapter/webserver/jetty/InstrumentedQueuedThreadPoolProxy.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.dynamictp.starter.adapter.webserver.adapter.jetty;
+package org.dromara.dynamictp.starter.adapter.webserver.jetty;
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;

File: starter/starter-adapter/starter-adapter-webserver/src/main/java/org/dromara/dynamictp/starter/adapter/webserver/jetty/JettyDtpAdapter.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.dynamictp.starter.adapter.webserver.adapter.jetty;
+package org.dromara.dynamictp.starter.adapter.webserver.jetty;
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
@@ -27,7 +27,7 @@
 import org.dromara.dynamictp.core.support.ExecutorAdapter;
 import org.dromara.dynamictp.core.support.ExecutorWrapper;
 import org.dromara.dynamictp.core.support.ThreadPoolExecutorProxy;
-import org.dromara.dynamictp.starter.adapter.webserver.adapter.AbstractWebServerDtpAdapter;
+import org.dromara.dynamictp.starter.adapter.webserver.AbstractWebServerDtpAdapter;
 import org.eclipse.jetty.util.thread.ExecutorThreadPool;
 import org.eclipse.jetty.util.thread.MonitoredQueuedThreadPool;
 import org.eclipse.jetty.util.thread.QueuedThreadPool;

File: starter/starter-adapter/starter-adapter-webserver/src/main/java/org/dromara/dynamictp/starter/adapter/webserver/jetty/MonitoredQueuedThreadPoolProxy.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.dynamictp.starter.adapter.webserver.adapter.jetty;
+package org.dromara.dynamictp.starter.adapter.webserver.jetty;
 
 import lombok.extern.slf4j.Slf4j;
 import org.dromara.dynamictp.core.aware.AwareManager;

File: starter/starter-adapter/starter-adapter-webserver/src/main/java/org/dromara/dynamictp/starter/adapter/webserver/jetty/QueuedThreadPoolProxy.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.dynamictp.starter.adapter.webserver.adapter.jetty;
+package org.dromara.dynamictp.starter.adapter.webserver.jetty;
 
 import lombok.extern.slf4j.Slf4j;
 import org.dromara.dynamictp.common.util.ReflectionUtil;

File: starter/starter-adapter/starter-adapter-webserver/src/main/java/org/dromara/dynamictp/starter/adapter/webserver/tomcat/TomcatDtpAdapter.java
Patch:
@@ -15,15 +15,15 @@
  * limitations under the License.
  */
 
-package org.dromara.dynamictp.starter.adapter.webserver.adapter.tomcat;
+package org.dromara.dynamictp.starter.adapter.webserver.tomcat;
 
 import lombok.extern.slf4j.Slf4j;
 import org.apache.tomcat.util.threads.ThreadPoolExecutor;
 import org.dromara.dynamictp.common.properties.DtpProperties;
 import org.dromara.dynamictp.core.aware.RejectHandlerAware;
 import org.dromara.dynamictp.core.support.ExecutorAdapter;
 import org.dromara.dynamictp.core.support.ExecutorWrapper;
-import org.dromara.dynamictp.starter.adapter.webserver.adapter.AbstractWebServerDtpAdapter;
+import org.dromara.dynamictp.starter.adapter.webserver.AbstractWebServerDtpAdapter;
 import org.springframework.boot.web.embedded.tomcat.TomcatWebServer;
 import org.springframework.boot.web.server.WebServer;
 

File: starter/starter-adapter/starter-adapter-webserver/src/main/java/org/dromara/dynamictp/starter/adapter/webserver/tomcat/TomcatExecutorProxy.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.dynamictp.starter.adapter.webserver.adapter.tomcat;
+package org.dromara.dynamictp.starter.adapter.webserver.tomcat;
 
 import lombok.extern.slf4j.Slf4j;
 import org.apache.tomcat.util.threads.ThreadPoolExecutor;

File: starter/starter-adapter/starter-adapter-webserver/src/main/java/org/dromara/dynamictp/starter/adapter/webserver/undertow/UndertowTaskPoolEnum.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.dynamictp.starter.adapter.webserver.adapter.undertow;
+package org.dromara.dynamictp.starter.adapter.webserver.undertow;
 
 import lombok.Getter;
 

File: starter/starter-adapter/starter-adapter-webserver/src/main/java/org/dromara/dynamictp/starter/adapter/webserver/undertow/taskpool/ExecutorServiceTaskPoolAdapter.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.dromara.dynamictp.starter.adapter.webserver.adapter.undertow.taskpool;
+package org.dromara.dynamictp.starter.adapter.webserver.undertow.taskpool;
 
-import org.dromara.dynamictp.starter.adapter.webserver.adapter.undertow.UndertowTaskPoolEnum;
+import org.dromara.dynamictp.starter.adapter.webserver.undertow.UndertowTaskPoolEnum;
 import org.dromara.dynamictp.core.support.ExecutorAdapter;
 import org.dromara.dynamictp.core.support.ThreadPoolExecutorAdapter;
 

File: starter/starter-adapter/starter-adapter-webserver/src/main/java/org/dromara/dynamictp/starter/adapter/webserver/undertow/taskpool/ExternalTaskPoolAdapter.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.dromara.dynamictp.starter.adapter.webserver.adapter.undertow.taskpool;
+package org.dromara.dynamictp.starter.adapter.webserver.undertow.taskpool;
 
-import org.dromara.dynamictp.starter.adapter.webserver.adapter.undertow.TaskPoolHandlerFactory;
-import org.dromara.dynamictp.starter.adapter.webserver.adapter.undertow.UndertowTaskPoolEnum;
+import org.dromara.dynamictp.starter.adapter.webserver.undertow.TaskPoolHandlerFactory;
+import org.dromara.dynamictp.starter.adapter.webserver.undertow.UndertowTaskPoolEnum;
 import org.dromara.dynamictp.common.util.ReflectionUtil;
 import org.dromara.dynamictp.core.support.ExecutorAdapter;
 import lombok.val;

File: starter/starter-adapter/starter-adapter-webserver/src/main/java/org/dromara/dynamictp/starter/adapter/webserver/undertow/taskpool/TaskPoolAdapter.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.dromara.dynamictp.starter.adapter.webserver.adapter.undertow.taskpool;
+package org.dromara.dynamictp.starter.adapter.webserver.undertow.taskpool;
 
-import org.dromara.dynamictp.starter.adapter.webserver.adapter.undertow.UndertowTaskPoolEnum;
+import org.dromara.dynamictp.starter.adapter.webserver.undertow.UndertowTaskPoolEnum;
 import org.dromara.dynamictp.core.support.ExecutorAdapter;
 
 import java.util.concurrent.Executor;

File: starter/starter-adapter/starter-adapter-webserver/src/main/java/org/dromara/dynamictp/starter/adapter/webserver/undertow/taskpool/ThreadPoolExecutorTaskPoolAdapter.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.dromara.dynamictp.starter.adapter.webserver.adapter.undertow.taskpool;
+package org.dromara.dynamictp.starter.adapter.webserver.undertow.taskpool;
 
-import org.dromara.dynamictp.starter.adapter.webserver.adapter.undertow.UndertowTaskPoolEnum;
+import org.dromara.dynamictp.starter.adapter.webserver.undertow.UndertowTaskPoolEnum;
 import org.dromara.dynamictp.core.support.ExecutorAdapter;
 import org.dromara.dynamictp.core.support.ThreadPoolExecutorAdapter;
 

File: test/test-adapter/src/test/java/org/dromara/dynamictp/test/adapter/webserver/proxy/InstrumentedQueuedThreadPoolProxyTest.java
Patch:
@@ -21,7 +21,7 @@
 import io.micrometer.core.instrument.binder.jetty.InstrumentedQueuedThreadPool;
 import io.micrometer.core.instrument.composite.CompositeMeterRegistry;
 import org.dromara.dynamictp.common.util.ReflectionUtil;
-import org.dromara.dynamictp.starter.adapter.webserver.adapter.jetty.InstrumentedQueuedThreadPoolProxy;
+import org.dromara.dynamictp.starter.adapter.webserver.jetty.InstrumentedQueuedThreadPoolProxy;
 import org.junit.Assert;
 import org.junit.Test;
 

File: test/test-adapter/src/test/java/org/dromara/dynamictp/test/adapter/webserver/proxy/MonitoredQueuedThreadPoolProxyTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.dromara.dynamictp.test.adapter.webserver.proxy;
 
 import org.dromara.dynamictp.common.util.ReflectionUtil;
-import org.dromara.dynamictp.starter.adapter.webserver.adapter.jetty.MonitoredQueuedThreadPoolProxy;
+import org.dromara.dynamictp.starter.adapter.webserver.jetty.MonitoredQueuedThreadPoolProxy;
 import org.eclipse.jetty.util.thread.MonitoredQueuedThreadPool;
 import org.junit.Assert;
 import org.junit.Test;

File: test/test-adapter/src/test/java/org/dromara/dynamictp/test/adapter/webserver/proxy/QueuedThreadPoolProxyTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import lombok.val;
 import org.dromara.dynamictp.common.util.ReflectionUtil;
-import org.dromara.dynamictp.starter.adapter.webserver.adapter.jetty.QueuedThreadPoolProxy;
+import org.dromara.dynamictp.starter.adapter.webserver.jetty.QueuedThreadPoolProxy;
 import org.eclipse.jetty.util.thread.QueuedThreadPool;
 import org.junit.Assert;
 import org.junit.Test;

File: test/test-adapter/src/test/java/org/dromara/dynamictp/test/adapter/webserver/proxy/TomcatExecutorProxyTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.tomcat.util.threads.TaskQueue;
 import org.apache.tomcat.util.threads.ThreadPoolExecutor;
 import org.dromara.dynamictp.core.executor.NamedThreadFactory;
-import org.dromara.dynamictp.starter.adapter.webserver.adapter.tomcat.TomcatExecutorProxy;
+import org.dromara.dynamictp.starter.adapter.webserver.tomcat.TomcatExecutorProxy;
 import org.junit.Assert;
 import org.junit.Test;
 

File: core/src/main/java/org/dromara/dynamictp/core/support/task/runnable/MdcRunnable.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.commons.collections4.MapUtils;
 import org.slf4j.MDC;
 import java.util.Map;
+import java.util.Objects;
 
 import static org.dromara.dynamictp.common.constant.DynamicTpConst.TRACE_ID;
 
@@ -53,7 +54,7 @@ public static MdcRunnable get(Runnable runnable) {
     @Override
     public void run() {
 
-        if (MapUtils.isEmpty(parentMdc) || Thread.currentThread() == parentThread) {
+        if (MapUtils.isEmpty(parentMdc) || Objects.equals(Thread.currentThread(), parentThread)) {
             runnable.run();
             return;
         }

File: example/example-adapter/example-adapter-webserver/src/main/java/org/dromara/dynamictp/example/controller/TestController.java
Patch:
@@ -30,7 +30,7 @@
 public class TestController {
 
     @GetMapping("/dtp-example-adapter/testWebserver")
-    public String testRocketMq() throws InterruptedException {
+    public String testWebserver() throws InterruptedException {
         Thread.sleep(1000);
         return "success";
     }

File: adapter/adapter-common/src/main/java/org/dromara/dynamictp/adapter/common/AbstractDtpAdapter.java
Patch:
@@ -163,10 +163,10 @@ protected TpMainFields getTpMainFields(ExecutorWrapper executorWrapper, TpExecut
     protected abstract String getAdapterPrefix();
 
     protected void enhanceOriginExecutor(String tpName, ThreadPoolExecutor executor, String fieldName, Object targetObj) {
-        ThreadPoolExecutorProxy threadPoolExecutorProxy = new ThreadPoolExecutorProxy(executor);
+        ThreadPoolExecutorProxy proxy = new ThreadPoolExecutorProxy(executor);
         try {
-            ReflectionUtil.setFieldValue(fieldName, targetObj, threadPoolExecutorProxy);
-            val executorWrapper = new ExecutorWrapper(tpName, threadPoolExecutorProxy);
+            ReflectionUtil.setFieldValue(fieldName, targetObj, proxy);
+            val executorWrapper = new ExecutorWrapper(tpName, proxy);
             initNotifyItems(tpName, executorWrapper);
             executors.put(tpName, executorWrapper);
         } catch (IllegalAccessException e) {

File: core/src/main/java/org/dromara/dynamictp/core/executor/DtpExecutor.java
Patch:
@@ -323,7 +323,6 @@ public void setRejectHandlerType(String rejectHandlerType) {
         this.rejectHandlerType = rejectHandlerType;
     }
 
-
     public void setRunTimeout(long runTimeout) {
         this.runTimeout = runTimeout;
     }

File: core/src/main/java/org/dromara/dynamictp/core/notifier/AbstractDtpNotifier.java
Patch:
@@ -100,7 +100,7 @@ protected String buildAlarmContent(NotifyPlatform platform, NotifyItemEnum notif
                 CommonUtil.getInstance().getEnv(),
                 populatePoolName(executorWrapper),
                 notifyItemEnum.getValue(),
-                notifyItem.getThreshold(),
+                notifyItem.getThreshold() + notifyItemEnum.getUnit(),
                 executor.getCorePoolSize(),
                 executor.getMaximumPoolSize(),
                 executor.getPoolSize(),

File: common/src/main/java/org/dromara/dynamictp/common/constant/WechatNotifyConst.java
Patch:
@@ -64,7 +64,7 @@ private WechatNotifyConst() { }
             "> <font color='queueTimeoutCount'>等待超时任务数量：%s</font> \n" +
             "> <font color='comment'>上次报警时间：%s</font> \n" +
             "> <font color='comment'>报警时间：%s</font> \n" +
-            "> <font color='comment'>接收人：<@%s></font> \n" +
+            "> <font color='comment'>接收人：%s</font> \n" +
             "> <font color='comment'>tid：%s</font> \n" +
             "> <font color='info'>报警间隔：%ss</font> \n";
 

File: common/src/main/java/org/dromara/dynamictp/common/constant/WechatNotifyConst.java
Patch:
@@ -36,8 +36,7 @@ private WechatNotifyConst() { }
     public static final String COMMENT_COLOR = "comment";
 
     /**
-     * receivers only supports userid, view more,
-     * see <a href="https://developers.weixin.qq.com/community/develop/doc/000a00b208c05076e49c0e5d451000">more</a>.
+     * receivers only supports userid, view more, see <a href="https://developer.work.weixin.qq.com/document/path/91770">more</a>.
      */
     public static final String WECHAT_ALARM_TEMPLATE =
             "<font color='warning'>【报警】</font> 动态线程池告警 \n" +
@@ -82,6 +81,6 @@ private WechatNotifyConst() { }
             "> <font color='comment'>队列类型：%s</font> \n" +
             "> <font color='queueCapacity'>队列容量：%s => %s</font> \n" +
             "> <font color='rejectType'>拒绝策略：%s => %s</font> \n" +
-            "> <font color='comment'>接收人：<@%s></font> \n" +
+            "> <font color='comment'>接收人：%s</font> \n" +
             "> <font color='comment'>通知时间：%s</font> \n";
 }

File: common/src/main/java/org/dromara/dynamictp/common/constant/WechatNotifyConst.java
Patch:
@@ -81,6 +81,6 @@ private WechatNotifyConst() { }
             "> <font color='comment'>队列类型：%s</font> \n" +
             "> <font color='queueCapacity'>队列容量：%s => %s</font> \n" +
             "> <font color='rejectType'>拒绝策略：%s => %s</font> \n" +
-            "> <font color='comment'>接收人：<@%s></font> \n" +
+            "> <font color='comment'>接收人：%s</font> \n" +
             "> <font color='comment'>通知时间：%s</font> \n";
 }

File: adapter/adapter-brpc/src/main/java/org/dromara/dynamictp/apapter/brpc/server/StarlightServerDtpAdapter.java
Patch:
@@ -72,8 +72,7 @@ protected void initialize() {
             return;
         }
         val starlightServer = (DefaultStarlightServer) bean;
-        val uri = (URI) ReflectionUtil.getFieldValue(DefaultStarlightServer.class,
-                URI_FIELD, starlightServer);
+        val uri = (URI) ReflectionUtil.getFieldValue(DefaultStarlightServer.class, URI_FIELD, starlightServer);
         val serverPeer = (ServerPeer) ReflectionUtil.getFieldValue(DefaultStarlightServer.class,
                 SERVER_PEER_FIELD, starlightServer);
 

File: common/src/main/java/org/dromara/dynamictp/common/entity/ThreadPoolStats.java
Patch:
@@ -34,6 +34,8 @@ public class ThreadPoolStats extends Metrics {
 
     private String poolName;
 
+    private String poolAliasName;
+
     private int corePoolSize;
 
     private int maximumPoolSize;

File: common/src/main/java/org/dromara/dynamictp/common/util/JsonUtil.java
Patch:
@@ -70,10 +70,9 @@ public static String toJson(Object obj) {
      * 方法注释: <br>
      * 〈此方法将指定的 Json 反序列化为指定类的对象。〉
      *
-     * @param <T> the target type
+     * @param <T>     the target type
      * @param json    要反序列化的json字符串
      * @param typeOfT 要反序列化的对象类型
-     * @param <T>     要反序列化的对象类型
      * @return T
      * @author topsuder 🌼🐇
      */

File: core/src/main/java/org/dromara/dynamictp/core/aware/AwareTypeEnum.java
Patch:
@@ -29,6 +29,7 @@ public enum AwareTypeEnum {
      * TaskTimeoutAware
      */
     TASK_TIMEOUT_AWARE(1, "timeout"),
+
     /**
      * TaskRejectAware
      */

File: core/src/main/java/org/dromara/dynamictp/core/aware/TaskRejectAware.java
Patch:
@@ -24,7 +24,6 @@
 import org.slf4j.Logger;
 import org.slf4j.MDC;
 
-import java.util.Collections;
 import java.util.Objects;
 import java.util.concurrent.Executor;
 
@@ -57,7 +56,7 @@ public void beforeReject(Runnable runnable, Executor executor, Logger log) {
         }
 
         statProvider.incRejectCount(1);
-        AlarmManager.doAlarmAsync(statProvider.getExecutorWrapper(), Collections.singletonList(REJECT));
+        AlarmManager.doAlarmAsync(statProvider.getExecutorWrapper(), REJECT);
         ExecutorAdapter<?> executorAdapter = statProvider.getExecutorWrapper().getExecutor();
         String logMsg = CharSequenceUtil.format("DynamicTp execute, thread pool is exhausted, tpName: {},  traceId: {}, " +
                         "poolSize: {} (active: {}, core: {}, max: {}, largest: {}), " +

File: core/src/main/java/org/dromara/dynamictp/core/converter/ExecutorConverter.java
Patch:
@@ -57,6 +57,7 @@ public static ThreadPoolStats toMetrics(ExecutorWrapper wrapper) {
         }
         ThreadPoolStats poolStats = convertCommon(executor);
         poolStats.setPoolName(wrapper.getThreadPoolName());
+        poolStats.setPoolAliasName(wrapper.getThreadPoolAliasName());
         Optional.ofNullable(wrapper.getThreadPoolStatProvider()).ifPresent(p -> {
             poolStats.setRunTimeoutCount(p.getRunTimeoutCount());
             poolStats.setQueueTimeoutCount(p.getQueueTimeoutCount());

File: starter/starter-adapter/starter-adapter-webserver/src/main/java/org/dromara/dynamictp/starter/adapter/webserver/adapter/jetty/JettyDtpAdapter.java
Patch:
@@ -63,11 +63,11 @@ public ExecutorWrapper doInitExecutorWrapper(WebServer webServer) {
         final JettyExecutorAdapter adapter = new JettyExecutorAdapter(
                 (ThreadPool.SizedThreadPool) threadPool);
         ExecutorWrapper executorWrapper = new ExecutorWrapper(POOL_NAME, adapter);
-        replaceOriginExecutor(jettyWebServer, threadPool);
+        enhanceOriginExecutor(jettyWebServer, threadPool);
         return executorWrapper;
     }
 
-    private void replaceOriginExecutor(JettyWebServer webServer, ThreadPool threadPool) {
+    private void enhanceOriginExecutor(JettyWebServer webServer, ThreadPool threadPool) {
         try {
             if (threadPool instanceof ExecutorThreadPool) {
                 val executor = (ThreadPoolExecutor) ReflectionUtil.getFieldValue(EXECUTOR_NAME, threadPool);

File: starter/starter-configcenter/starter-etcd/src/main/java/org/dromara/dynamictp/starter/etcd/refresher/EtcdRefresher.java
Patch:
@@ -38,7 +38,7 @@ public class EtcdRefresher extends AbstractRefresher implements InitializingBean
     public void afterPropertiesSet() {
         DtpProperties.Etcd etcd = dtpProperties.getEtcd();
         Map<Object, Object> map = loadConfig(etcd);
-        if (map.size() > 0) {
+        if (!map.isEmpty()) {
             EtcdUtil.initWatcher(this, dtpProperties, map);
         }
     }

File: starter/starter-configcenter/starter-zookeeper/src/main/java/org/dromara/dynamictp/starter/zookeeper/util/CuratorUtil.java
Patch:
@@ -71,7 +71,7 @@ public static CuratorFramework getCuratorFramework(DtpProperties dtpProperties)
             try {
                 COUNT_DOWN_LATCH.await();
             } catch (InterruptedException e) {
-                e.printStackTrace();
+                log.error("get zk client error", e);
                 Thread.currentThread().interrupt();
             }
         }

File: test/test-common/src/test/java/org/dromara/dynamictp/test/common/timer/HashedWheelTimerTest.java
Patch:
@@ -51,8 +51,8 @@
 import static org.awaitility.Awaitility.await;
 
 class HashedWheelTimerTest {
-    private CountDownLatch tryStopTaskCountDownLatch = new CountDownLatch(1);
-    private CountDownLatch errorTaskCountDownLatch = new CountDownLatch(1);
+    private final CountDownLatch tryStopTaskCountDownLatch = new CountDownLatch(1);
+    private final CountDownLatch errorTaskCountDownLatch = new CountDownLatch(1);
 
     private static class EmptyTask implements TimerTask {
         @Override
@@ -76,7 +76,7 @@ public void run(Timeout timeout) {
     }
 
     private class TryStopTask implements TimerTask {
-        private Timer timer;
+        private final Timer timer;
 
         public TryStopTask(Timer timer) {
             this.timer = timer;

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/notify/capture/CapturedBlockingQueueTest.java
Patch:
@@ -59,7 +59,6 @@ public static void setUp() {
 
     @Test
     public void testBlockingQueueDefaultCapacity() {
-        ;
         CapturedBlockingQueue capturedBlockingQueue = new CapturedBlockingQueue(dtpExecutor);
         Assertions.assertEquals(0, capturedBlockingQueue.size());
         Assertions.assertEquals(Integer.MAX_VALUE, capturedBlockingQueue.remainingCapacity());

File: test/test-core/src/test/java/org/dromara/dynamictp/test/core/thread/TestAInterceptor.java
Patch:
@@ -1,14 +1,11 @@
 package org.dromara.dynamictp.test.core.thread;
 
-import cn.hutool.core.date.StopWatch;
 import lombok.extern.slf4j.Slf4j;
 import org.dromara.dynamictp.core.plugin.DtpInterceptor;
 import org.dromara.dynamictp.core.plugin.DtpIntercepts;
 import org.dromara.dynamictp.core.plugin.DtpInvocation;
 import org.dromara.dynamictp.core.plugin.DtpSignature;
 
-import java.util.concurrent.Executor;
-
 /**
  * @author hanli
  * @date 2023年07月19日 9:19 AM

File: common/src/main/java/org/dromara/dynamictp/common/constant/WechatNotifyConst.java
Patch:
@@ -36,8 +36,7 @@ private WechatNotifyConst() { }
     public static final String COMMENT_COLOR = "comment";
 
     /**
-     * receivers only supports userid, view more,
-     * see <a href="https://developers.weixin.qq.com/community/develop/doc/000a00b208c05076e49c0e5d451000">more</a>.
+     * receivers only supports userid, view more, see <a href="https://developer.work.weixin.qq.com/document/path/91770">more</a>.
      */
     public static final String WECHAT_ALARM_TEMPLATE =
             "<font color='warning'>【报警】</font> 动态线程池告警 \n" +

File: core/src/main/java/org/dromara/dynamictp/core/executor/DtpExecutor.java
Patch:
@@ -188,7 +188,7 @@ public void execute(Runnable task, long startTimeout) {
     @Override
     public void execute(Runnable command) {
         DtpRunnable dtpRunnable = (DtpRunnable) wrapTasks(command);
-        AwareManager.execute(this, command);
+        AwareManager.execute(this, dtpRunnable);
         super.execute(dtpRunnable);
     }
 

File: core/src/main/java/org/dromara/dynamictp/core/executor/OrderedDtpExecutor.java
Patch:
@@ -210,11 +210,12 @@ private final class ChildExecutor implements Executor, Runnable {
         @Override
         public void execute(Runnable command) {
             boolean start = false;
+            command = getEnhancedTask(command);
             synchronized (this) {
                 try {
-                    if (!taskQueue.add(getEnhancedTask(command))) {
+                    if (!taskQueue.add(command)) {
                         rejectedTaskIncrement(command);
-                        throw new RejectedExecutionException("Task " + command.toString() + " rejected from " + this);
+                        throw new RejectedExecutionException("Task " + command + " rejected from " + this);
                     }
                 } catch (IllegalStateException ex) {
                     rejectedTaskIncrement(command);

File: core/src/main/java/org/dromara/dynamictp/core/notifier/manager/NotifyHelper.java
Patch:
@@ -25,8 +25,6 @@
 import org.dromara.dynamictp.common.entity.TpExecutorProps;
 import org.dromara.dynamictp.common.properties.DtpProperties;
 import org.dromara.dynamictp.common.util.StreamUtil;
-import org.dromara.dynamictp.core.aware.AwareManager;
-import org.dromara.dynamictp.core.aware.TaskTimeoutAware;
 import org.dromara.dynamictp.core.support.ExecutorWrapper;
 import org.dromara.dynamictp.core.thread.DtpExecutor;
 import com.google.common.collect.Lists;

File: core/src/main/java/org/dromara/dynamictp/core/spring/DtpBaseBeanDefinitionRegistrar.java
Patch:
@@ -52,7 +52,7 @@ public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, B
                 null, Lists.newArrayList(APPLICATION_CONTEXT_HOLDER, HASHED_WHEEL_TIMER));
     }
 
-    private void registerHashedWheelTimer( BeanDefinitionRegistry registry) {
+    private void registerHashedWheelTimer(BeanDefinitionRegistry registry) {
         Object[] constructorArgs = new Object[] {
                 new NamedThreadFactory("dtp-runnable-timeout", true),
                 10,

File: example/example-nacos-cloud/src/main/java/org/dromara/dynamictp/example/controller/TestController.java
Patch:
@@ -47,7 +47,6 @@ public String test() throws InterruptedException {
     }
     @GetMapping("/dtp12")
     public String test1() {
-        System.out.println("333");
         return "success";
     }
 

File: starter/starter-configcenter/cloud-starter-polaris/src/main/java/org/dromara/dynamictp/starter/cloud/polaris/refresher/CloudPolarisRefresher.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.dromara.dynamictp.starter.cloud.polaris.refresher;
 
+import com.tencent.cloud.polaris.config.spring.event.ConfigChangeSpringEvent;
 import lombok.extern.slf4j.Slf4j;
 import org.dromara.dynamictp.core.refresher.AbstractRefresher;
-import org.springframework.cloud.context.scope.refresh.RefreshScopeRefreshedEvent;
 import org.springframework.context.ApplicationEvent;
 import org.springframework.context.event.SmartApplicationListener;
 import org.springframework.lang.NonNull;
@@ -35,12 +35,12 @@ public class CloudPolarisRefresher extends AbstractRefresher implements SmartApp
 
     @Override
     public boolean supportsEventType(@NonNull Class<? extends ApplicationEvent> eventType) {
-        return RefreshScopeRefreshedEvent.class.isAssignableFrom(eventType);
+        return ConfigChangeSpringEvent.class.isAssignableFrom(eventType);
     }
 
     @Override
     public void onApplicationEvent(@NonNull ApplicationEvent event) {
-        if (event instanceof RefreshScopeRefreshedEvent) {
+        if (event instanceof ConfigChangeSpringEvent) {
             refresh(environment);
         }
     }

File: starter/starter-configcenter/cloud-starter-polaris/src/main/java/org/dromara/dynamictp/starter/cloud/polaris/refresher/CloudPolarisRefresher.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.dromara.dynamictp.starter.cloud.polaris.refresher;
 
+import com.tencent.cloud.polaris.config.spring.event.ConfigChangeSpringEvent;
 import lombok.extern.slf4j.Slf4j;
 import org.dromara.dynamictp.core.refresher.AbstractRefresher;
-import org.springframework.cloud.context.scope.refresh.RefreshScopeRefreshedEvent;
 import org.springframework.context.ApplicationEvent;
 import org.springframework.context.event.SmartApplicationListener;
 import org.springframework.lang.NonNull;
@@ -35,12 +35,12 @@ public class CloudPolarisRefresher extends AbstractRefresher implements SmartApp
 
     @Override
     public boolean supportsEventType(@NonNull Class<? extends ApplicationEvent> eventType) {
-        return RefreshScopeRefreshedEvent.class.isAssignableFrom(eventType);
+        return ConfigChangeSpringEvent.class.isAssignableFrom(eventType);
     }
 
     @Override
     public void onApplicationEvent(@NonNull ApplicationEvent event) {
-        if (event instanceof RefreshScopeRefreshedEvent) {
+        if (event instanceof ConfigChangeSpringEvent) {
             refresh(environment);
         }
     }

File: core/src/main/java/org/dromara/dynamictp/core/spring/DtpBeanDefinitionRegistrar.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.commons.collections4.CollectionUtils;
 import org.dromara.dynamictp.common.entity.DtpExecutorProps;
 import org.dromara.dynamictp.common.properties.DtpProperties;
-import org.dromara.dynamictp.common.util.BeanUtil;
+import org.dromara.dynamictp.common.spring.SpringBeanHelper;
 import org.dromara.dynamictp.core.reject.RejectHandlerGetter;
 import org.dromara.dynamictp.core.support.BinderHelper;
 import org.dromara.dynamictp.core.support.ExecutorType;
@@ -88,7 +88,7 @@ public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, B
             Class<?> executorTypeClass = ExecutorType.getClass(e.getExecutorType());
             Map<String, Object> propertyValues = buildPropertyValues(e);
             Object[] args = buildConstructorArgs(executorTypeClass, e);
-            BeanUtil.registerIfAbsent(registry, e.getThreadPoolName(), executorTypeClass, propertyValues, args);
+            SpringBeanHelper.register(registry, e.getThreadPoolName(), executorTypeClass, propertyValues, args);
         });
     }
 

File: core/src/main/java/org/dromara/dynamictp/core/spring/DtpBeanDefinitionRegistrar.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.commons.collections4.CollectionUtils;
 import org.dromara.dynamictp.common.entity.DtpExecutorProps;
 import org.dromara.dynamictp.common.properties.DtpProperties;
-import org.dromara.dynamictp.common.util.BeanUtil;
+import org.dromara.dynamictp.common.spring.SpringBeanHelper;
 import org.dromara.dynamictp.core.reject.RejectHandlerGetter;
 import org.dromara.dynamictp.core.support.BinderHelper;
 import org.dromara.dynamictp.core.support.ExecutorType;
@@ -88,7 +88,7 @@ public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, B
             Class<?> executorTypeClass = ExecutorType.getClass(e.getExecutorType());
             Map<String, Object> propertyValues = buildPropertyValues(e);
             Object[] args = buildConstructorArgs(executorTypeClass, e);
-            BeanUtil.registerIfAbsent(registry, e.getThreadPoolName(), executorTypeClass, propertyValues, args);
+            SpringBeanHelper.register(registry, e.getThreadPoolName(), executorTypeClass, propertyValues, args);
         });
     }
 

File: core/src/main/java/org/dromara/dynamictp/core/refresher/AbstractRefresher.java
Patch:
@@ -31,7 +31,6 @@
 import org.springframework.context.EnvironmentAware;
 import org.springframework.core.env.Environment;
 
-import javax.annotation.Resource;
 import java.io.IOException;
 import java.util.Map;
 import java.util.Objects;
@@ -45,8 +44,7 @@
 @Slf4j
 public abstract class AbstractRefresher implements Refresher, EnvironmentAware {
 
-    @Resource
-    protected DtpProperties dtpProperties;
+    protected DtpProperties dtpProperties = DtpProperties.getInstance();
 
     protected Environment environment;
 

File: core/src/main/java/org/dromara/dynamictp/core/refresher/AbstractRefresher.java
Patch:
@@ -31,7 +31,6 @@
 import org.springframework.context.EnvironmentAware;
 import org.springframework.core.env.Environment;
 
-import javax.annotation.Resource;
 import java.io.IOException;
 import java.util.Map;
 import java.util.Objects;
@@ -45,8 +44,7 @@
 @Slf4j
 public abstract class AbstractRefresher implements Refresher, EnvironmentAware {
 
-    @Resource
-    protected DtpProperties dtpProperties;
+    protected DtpProperties dtpProperties = DtpProperties.getInstance();
 
     protected Environment environment;
 

File: starter/starter-adapter/starter-adapter-rabbitmq/src/main/java/org/dromara/dynamictp/starter/adapter/rabbitmq/autoconfigure/RabbitMqTpAutoConfiguration.java
Patch:
@@ -21,8 +21,8 @@
 import org.dromara.dynamictp.core.spring.DtpBaseBeanConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
@@ -33,7 +33,7 @@
  * @since 1.0.6
  */
 @Configuration
-@ConditionalOnProperty(prefix = "spring.rabbitmq", value = {"host"})
+@ConditionalOnClass(name = "com.rabbitmq.client.ConnectionFactory")
 @ConditionalOnBean({DtpBaseBeanConfiguration.class})
 @AutoConfigureAfter({DtpBaseBeanConfiguration.class})
 @SuppressWarnings("all")

File: starter/starter-adapter/starter-adapter-rabbitmq/src/main/java/org/dromara/dynamictp/starter/adapter/rabbitmq/autoconfigure/RabbitMqTpAutoConfiguration.java
Patch:
@@ -21,8 +21,8 @@
 import org.dromara.dynamictp.core.spring.DtpBaseBeanConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
@@ -33,7 +33,7 @@
  * @since 1.0.6
  */
 @Configuration
-@ConditionalOnProperty(prefix = "spring.rabbitmq", value = {"host"})
+@ConditionalOnClass(name = "com.rabbitmq.client.ConnectionFactory")
 @ConditionalOnBean({DtpBaseBeanConfiguration.class})
 @AutoConfigureAfter({DtpBaseBeanConfiguration.class})
 @SuppressWarnings("all")

File: starter/starter-adapter/starter-adapter-rabbitmq/src/main/java/org/dromara/dynamictp/starter/adapter/rabbitmq/autoconfigure/RabbitMqTpAutoConfiguration.java
Patch:
@@ -21,8 +21,8 @@
 import org.dromara.dynamictp.core.spring.DtpBaseBeanConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
@@ -33,7 +33,7 @@
  * @since 1.0.6
  */
 @Configuration
-@ConditionalOnProperty(prefix = "spring.rabbitmq", value = {"host"})
+@ConditionalOnClass(name = "com.rabbitmq.client.ConnectionFactory")
 @ConditionalOnBean({DtpBaseBeanConfiguration.class})
 @AutoConfigureAfter({DtpBaseBeanConfiguration.class})
 @SuppressWarnings("all")

File: core/src/main/java/org/dromara/dynamictp/core/plugin/DtpInterceptorProxyFactory.java
Patch:
@@ -32,6 +32,8 @@
  */
 public class DtpInterceptorProxyFactory {
 
+    private DtpInterceptorProxyFactory() { }
+
     public static Object enhance(Object target, DtpInterceptor interceptor) {
         return enhance(target, null, null, interceptor);
     }
@@ -56,7 +58,7 @@ private static Map<Class<?>, Set<Method>> getSignatureMap(DtpInterceptor interce
             throw new PluginException("No @DtpIntercepts annotation was found in interceptor " + interceptor.getClass().getName());
         }
 
-        DtpSignature[] signatures = interceptsAnno.value();
+        DtpSignature[] signatures = interceptsAnno.signatures();
         Map<Class<?>, Set<Method>> signatureMap = Maps.newHashMap();
         for (DtpSignature signature : signatures) {
             Set<Method> methods = signatureMap.computeIfAbsent(signature.clazz(), k -> new HashSet<>());

File: core/src/main/java/org/dromara/dynamictp/core/spring/DtpBeanDefinitionRegistrar.java
Patch:
@@ -45,6 +45,7 @@
 import static org.dromara.dynamictp.common.constant.DynamicTpConst.NOTIFY_ENABLED;
 import static org.dromara.dynamictp.common.constant.DynamicTpConst.NOTIFY_ITEMS;
 import static org.dromara.dynamictp.common.constant.DynamicTpConst.PLATFORM_IDS;
+import static org.dromara.dynamictp.common.constant.DynamicTpConst.PLUGIN_NAMES;
 import static org.dromara.dynamictp.common.constant.DynamicTpConst.PRE_START_ALL_CORE_THREADS;
 import static org.dromara.dynamictp.common.constant.DynamicTpConst.QUEUE_TIMEOUT;
 import static org.dromara.dynamictp.common.constant.DynamicTpConst.REJECT_ENHANCED;
@@ -110,6 +111,7 @@ private Map<String, Object> buildPropertyValues(DtpExecutorProps props) {
 
         val taskWrappers = TaskWrappers.getInstance().getByNames(props.getTaskWrapperNames());
         propertyValues.put(TASK_WRAPPERS, taskWrappers);
+        propertyValues.put(PLUGIN_NAMES, props.getPluginNames());
 
         return propertyValues;
     }

File: core/src/main/java/org/dromara/dynamictp/core/plugin/DtpInterceptorProxyFactory.java
Patch:
@@ -32,6 +32,8 @@
  */
 public class DtpInterceptorProxyFactory {
 
+    private DtpInterceptorProxyFactory() { }
+
     public static Object enhance(Object target, DtpInterceptor interceptor) {
         return enhance(target, null, null, interceptor);
     }
@@ -56,7 +58,7 @@ private static Map<Class<?>, Set<Method>> getSignatureMap(DtpInterceptor interce
             throw new PluginException("No @DtpIntercepts annotation was found in interceptor " + interceptor.getClass().getName());
         }
 
-        DtpSignature[] signatures = interceptsAnno.value();
+        DtpSignature[] signatures = interceptsAnno.signatures();
         Map<Class<?>, Set<Method>> signatureMap = Maps.newHashMap();
         for (DtpSignature signature : signatures) {
             Set<Method> methods = signatureMap.computeIfAbsent(signature.clazz(), k -> new HashSet<>());

File: core/src/main/java/org/dromara/dynamictp/core/spring/DtpBeanDefinitionRegistrar.java
Patch:
@@ -45,6 +45,7 @@
 import static org.dromara.dynamictp.common.constant.DynamicTpConst.NOTIFY_ENABLED;
 import static org.dromara.dynamictp.common.constant.DynamicTpConst.NOTIFY_ITEMS;
 import static org.dromara.dynamictp.common.constant.DynamicTpConst.PLATFORM_IDS;
+import static org.dromara.dynamictp.common.constant.DynamicTpConst.PLUGIN_NAMES;
 import static org.dromara.dynamictp.common.constant.DynamicTpConst.PRE_START_ALL_CORE_THREADS;
 import static org.dromara.dynamictp.common.constant.DynamicTpConst.QUEUE_TIMEOUT;
 import static org.dromara.dynamictp.common.constant.DynamicTpConst.REJECT_ENHANCED;
@@ -110,6 +111,7 @@ private Map<String, Object> buildPropertyValues(DtpExecutorProps props) {
 
         val taskWrappers = TaskWrappers.getInstance().getByNames(props.getTaskWrapperNames());
         propertyValues.put(TASK_WRAPPERS, taskWrappers);
+        propertyValues.put(PLUGIN_NAMES, props.getPluginNames());
 
         return propertyValues;
     }

File: core/src/main/java/org/dromara/dynamictp/core/handler/ConfigHandler.java
Patch:
@@ -17,18 +17,18 @@
 
 package org.dromara.dynamictp.core.handler;
 
+import com.google.common.collect.Lists;
 import org.dromara.dynamictp.common.em.ConfigFileTypeEnum;
 import org.dromara.dynamictp.common.parser.config.ConfigParser;
 import org.dromara.dynamictp.common.parser.config.JsonConfigParser;
 import org.dromara.dynamictp.common.parser.config.PropertiesConfigParser;
 import org.dromara.dynamictp.common.parser.config.YamlConfigParser;
-import com.google.common.collect.Lists;
+import org.dromara.dynamictp.common.util.ExtensionServiceLoader;
 
 import java.io.IOException;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
-import java.util.ServiceLoader;
 
 /**
  * ConfigHandler related
@@ -41,7 +41,7 @@ public final class ConfigHandler {
     private static final List<ConfigParser> PARSERS = Lists.newArrayList();
 
     private ConfigHandler() {
-        ServiceLoader<ConfigParser> loader = ServiceLoader.load(ConfigParser.class);
+        List<ConfigParser> loader= ExtensionServiceLoader.loader(ConfigParser.class);
         for (ConfigParser configParser : loader) {
             PARSERS.add(configParser);
         }

File: core/src/main/java/org/dromara/dynamictp/core/plugin/DtpInterceptorRegistry.java
Patch:
@@ -18,11 +18,11 @@
 package org.dromara.dynamictp.core.plugin;
 
 import lombok.extern.slf4j.Slf4j;
+import org.dromara.dynamictp.common.util.ExtensionServiceLoader;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import java.util.ServiceLoader;
 
 /**
  * DtpInterceptorRegistry related
@@ -39,7 +39,7 @@ public class DtpInterceptorRegistry {
     private static final List<DtpInterceptor> INTERCEPTORS = new ArrayList<>();
 
     static  {
-        ServiceLoader<DtpInterceptor> loader = ServiceLoader.load(DtpInterceptor.class);
+        List<DtpInterceptor> loader = ExtensionServiceLoader.loader(DtpInterceptor.class);
         for (DtpInterceptor interceptor : loader) {
             INTERCEPTORS.add(interceptor);
         }

File: core/src/main/java/org/dromara/dynamictp/core/support/task/wrapper/TaskWrappers.java
Patch:
@@ -17,13 +17,13 @@
 
 package org.dromara.dynamictp.core.support.task.wrapper;
 
-import org.dromara.dynamictp.common.util.StringUtil;
 import com.google.common.collect.Lists;
 import org.apache.commons.collections4.CollectionUtils;
+import org.dromara.dynamictp.common.util.ExtensionServiceLoader;
+import org.dromara.dynamictp.common.util.StringUtil;
 
 import java.util.Collections;
 import java.util.List;
-import java.util.ServiceLoader;
 import java.util.Set;
 
 import static java.util.stream.Collectors.toList;
@@ -39,7 +39,7 @@ public class TaskWrappers {
     private static final List<TaskWrapper> TASK_WRAPPERS = Lists.newArrayList();
 
     private TaskWrappers() {
-        ServiceLoader<TaskWrapper> loader = ServiceLoader.load(TaskWrapper.class);
+        List<TaskWrapper> loader= ExtensionServiceLoader.loader(TaskWrapper.class);
         for (TaskWrapper taskWrapper : loader) {
             TASK_WRAPPERS.add(taskWrapper);
         }

File: example/example-nacos/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -20,6 +20,7 @@
 import org.dromara.dynamictp.core.support.DynamicTp;
 import org.dromara.dynamictp.core.support.ThreadPoolBuilder;
 import org.dromara.dynamictp.core.support.ThreadPoolCreator;
+import org.dromara.dynamictp.core.support.task.wrapper.TtlTaskWrapper;
 import org.dromara.dynamictp.core.thread.DtpExecutor;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -91,6 +92,7 @@ public ThreadPoolExecutor dtpExecutor2() {
                 .workQueue(SYNCHRONOUS_QUEUE.getName(), null, false, null)
                 .waitForTasksToCompleteOnShutdown(true)
                 .awaitTerminationSeconds(5)
+                .taskWrapper(new TtlTaskWrapper())
                 .buildDynamic();
     }
 }

File: core/src/main/java/org/dromara/dynamictp/core/handler/CollectorHandler.java
Patch:
@@ -17,19 +17,18 @@
 
 package org.dromara.dynamictp.core.handler;
 
+import com.google.common.collect.Maps;
+import lombok.extern.slf4j.Slf4j;
 import org.dromara.dynamictp.common.entity.ThreadPoolStats;
 import org.dromara.dynamictp.common.util.ExtensionServiceLoader;
 import org.dromara.dynamictp.core.monitor.collector.InternalLogCollector;
 import org.dromara.dynamictp.core.monitor.collector.LogCollector;
 import org.dromara.dynamictp.core.monitor.collector.MetricsCollector;
 import org.dromara.dynamictp.core.monitor.collector.MicroMeterCollector;
-import com.google.common.collect.Maps;
-import lombok.extern.slf4j.Slf4j;
 import org.springframework.util.CollectionUtils;
 
 import java.util.List;
 import java.util.Map;
-import java.util.ServiceLoader;
 
 /**
  * CollectorHandler related

File: core/src/main/java/org/dromara/dynamictp/core/handler/ConfigHandler.java
Patch:
@@ -17,20 +17,18 @@
 
 package org.dromara.dynamictp.core.handler;
 
+import com.google.common.collect.Lists;
 import org.dromara.dynamictp.common.em.ConfigFileTypeEnum;
 import org.dromara.dynamictp.common.parser.config.ConfigParser;
 import org.dromara.dynamictp.common.parser.config.JsonConfigParser;
 import org.dromara.dynamictp.common.parser.config.PropertiesConfigParser;
 import org.dromara.dynamictp.common.parser.config.YamlConfigParser;
-import com.google.common.collect.Lists;
 import org.dromara.dynamictp.common.util.ExtensionServiceLoader;
-import org.dromara.dynamictp.core.support.task.wrapper.TaskWrapper;
 
 import java.io.IOException;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
-import java.util.ServiceLoader;
 
 /**
  * ConfigHandler related

File: core/src/main/java/org/dromara/dynamictp/core/plugin/DtpInterceptorRegistry.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import java.util.ServiceLoader;
 
 /**
  * DtpInterceptorRegistry related

File: core/src/main/java/org/dromara/dynamictp/core/support/BinderHelper.java
Patch:
@@ -24,10 +24,8 @@
 import org.dromara.dynamictp.core.spring.PropertiesBinder;
 import org.springframework.core.env.Environment;
 
-import java.util.Iterator;
 import java.util.Map;
 import java.util.Objects;
-import java.util.ServiceLoader;
 
 /**
  * BinderHelper related

File: core/src/main/java/org/dromara/dynamictp/core/handler/CollectorHandler.java
Patch:
@@ -18,6 +18,7 @@
 package org.dromara.dynamictp.core.handler;
 
 import org.dromara.dynamictp.common.entity.ThreadPoolStats;
+import org.dromara.dynamictp.common.util.ExtensionServiceLoader;
 import org.dromara.dynamictp.core.monitor.collector.InternalLogCollector;
 import org.dromara.dynamictp.core.monitor.collector.LogCollector;
 import org.dromara.dynamictp.core.monitor.collector.MetricsCollector;
@@ -42,7 +43,7 @@ public final class CollectorHandler {
     private static final Map<String, MetricsCollector> COLLECTORS = Maps.newHashMap();
 
     private CollectorHandler() {
-        ServiceLoader<MetricsCollector> loader = ServiceLoader.load(MetricsCollector.class);
+        List<MetricsCollector> loader= ExtensionServiceLoader.loader(MetricsCollector.class);
         for (MetricsCollector collector : loader) {
             COLLECTORS.put(collector.type(), collector);
         }

File: core/src/main/java/org/dromara/dynamictp/core/handler/ConfigHandler.java
Patch:
@@ -23,6 +23,8 @@
 import org.dromara.dynamictp.common.parser.config.PropertiesConfigParser;
 import org.dromara.dynamictp.common.parser.config.YamlConfigParser;
 import com.google.common.collect.Lists;
+import org.dromara.dynamictp.common.util.ExtensionServiceLoader;
+import org.dromara.dynamictp.core.support.task.wrapper.TaskWrapper;
 
 import java.io.IOException;
 import java.util.Collections;
@@ -41,7 +43,7 @@ public final class ConfigHandler {
     private static final List<ConfigParser> PARSERS = Lists.newArrayList();
 
     private ConfigHandler() {
-        ServiceLoader<ConfigParser> loader = ServiceLoader.load(ConfigParser.class);
+        List<ConfigParser> loader= ExtensionServiceLoader.loader(ConfigParser.class);
         for (ConfigParser configParser : loader) {
             PARSERS.add(configParser);
         }

File: core/src/main/java/org/dromara/dynamictp/core/handler/NotifierHandler.java
Patch:
@@ -20,6 +20,8 @@
 import org.dromara.dynamictp.common.em.NotifyItemEnum;
 import org.dromara.dynamictp.common.entity.NotifyItem;
 import org.dromara.dynamictp.common.entity.TpMainFields;
+import org.dromara.dynamictp.common.util.ExtensionServiceLoader;
+import org.dromara.dynamictp.core.monitor.collector.MetricsCollector;
 import org.dromara.dynamictp.core.notifier.DtpDingNotifier;
 import org.dromara.dynamictp.core.notifier.DtpLarkNotifier;
 import org.dromara.dynamictp.core.notifier.DtpNotifier;
@@ -48,7 +50,7 @@ public final class NotifierHandler {
     private static final Map<String, DtpNotifier> NOTIFIERS = new HashMap<>();
 
     private NotifierHandler() {
-        ServiceLoader<DtpNotifier> loader = ServiceLoader.load(DtpNotifier.class);
+        List<DtpNotifier> loader= ExtensionServiceLoader.loader(DtpNotifier.class);
         for (DtpNotifier notifier : loader) {
             NOTIFIERS.put(notifier.platform(), notifier);
         }

File: core/src/main/java/org/dromara/dynamictp/core/plugin/DtpInterceptorRegistry.java
Patch:
@@ -18,6 +18,7 @@
 package org.dromara.dynamictp.core.plugin;
 
 import lombok.extern.slf4j.Slf4j;
+import org.dromara.dynamictp.common.util.ExtensionServiceLoader;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -39,7 +40,7 @@ public class DtpInterceptorRegistry {
     private static final List<DtpInterceptor> INTERCEPTORS = new ArrayList<>();
 
     static  {
-        ServiceLoader<DtpInterceptor> loader = ServiceLoader.load(DtpInterceptor.class);
+        List<DtpInterceptor> loader = ExtensionServiceLoader.loader(DtpInterceptor.class);
         for (DtpInterceptor interceptor : loader) {
             INTERCEPTORS.add(interceptor);
         }

File: core/src/main/java/org/dromara/dynamictp/core/support/task/wrapper/TaskWrappers.java
Patch:
@@ -17,9 +17,11 @@
 
 package org.dromara.dynamictp.core.support.task.wrapper;
 
+import org.dromara.dynamictp.common.util.ExtensionServiceLoader;
 import org.dromara.dynamictp.common.util.StringUtil;
 import com.google.common.collect.Lists;
 import org.apache.commons.collections4.CollectionUtils;
+import org.dromara.dynamictp.core.monitor.collector.MetricsCollector;
 
 import java.util.Collections;
 import java.util.List;
@@ -39,7 +41,7 @@ public class TaskWrappers {
     private static final List<TaskWrapper> TASK_WRAPPERS = Lists.newArrayList();
 
     private TaskWrappers() {
-        ServiceLoader<TaskWrapper> loader = ServiceLoader.load(TaskWrapper.class);
+        List<TaskWrapper> loader= ExtensionServiceLoader.loader(TaskWrapper.class);
         for (TaskWrapper taskWrapper : loader) {
             TASK_WRAPPERS.add(taskWrapper);
         }

File: example/example-nacos/src/main/java/org/dromara/dynamictp/example/config/ThreadPoolConfiguration.java
Patch:
@@ -20,6 +20,7 @@
 import org.dromara.dynamictp.core.support.DynamicTp;
 import org.dromara.dynamictp.core.support.ThreadPoolBuilder;
 import org.dromara.dynamictp.core.support.ThreadPoolCreator;
+import org.dromara.dynamictp.core.support.task.wrapper.TtlTaskWrapper;
 import org.dromara.dynamictp.core.thread.DtpExecutor;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -91,6 +92,7 @@ public ThreadPoolExecutor dtpExecutor2() {
                 .workQueue(SYNCHRONOUS_QUEUE.getName(), null, false, null)
                 .waitForTasksToCompleteOnShutdown(true)
                 .awaitTerminationSeconds(5)
+                .taskWrapper(new TtlTaskWrapper())
                 .buildDynamic();
     }
 }

File: core/src/main/java/org/dromara/dynamictp/core/notifier/base/AbstractNotifier.java
Patch:
@@ -52,11 +52,11 @@ public final void send(NotifyPlatform platform, String content) {
     protected abstract void sendMode(NotifyPlatform platform, String content);
 
     /**
-     * Get the notifyItem.receivers
+     * Get the notify receivers
      * @param platform platform
      * @return Receivers
      */
-    protected String[] getNotifyItemReceivers(NotifyPlatform platform) {
+    protected String[] getNotifyReceivers(NotifyPlatform platform) {
         BaseNotifyCtx context = DtpNotifyCtxHolder.get();
         String receivers = Optional.ofNullable(context)
                 .map(BaseNotifyCtx::getNotifyItem)

File: core/src/main/java/org/dromara/dynamictp/core/notifier/base/DingNotifier.java
Patch:
@@ -56,7 +56,7 @@ protected String buildMsgBody(NotifyPlatform platform, String content) {
 
         MarkdownReq.At at = new MarkdownReq.At();
 
-        List<String> mobiles = Lists.newArrayList(getNotifyItemReceivers(platform));
+        List<String> mobiles = Lists.newArrayList(getNotifyReceivers(platform));
         at.setAtMobiles(mobiles);
         if (CollectionUtils.isEmpty(mobiles)) {
             at.setAtAll(true);

File: extension/extension-notify-email/src/main/java/org/dromara/dynamictp/extension/notify/email/EmailNotifier.java
Patch:
@@ -18,10 +18,10 @@
 package org.dromara.dynamictp.extension.notify.email;
 
 import lombok.SneakyThrows;
-import org.dromara.dynamictp.common.entity.NotifyPlatform;
+import lombok.extern.slf4j.Slf4j;
 import org.dromara.dynamictp.common.em.NotifyPlatformEnum;
+import org.dromara.dynamictp.common.entity.NotifyPlatform;
 import org.dromara.dynamictp.core.notifier.base.AbstractNotifier;
-import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.mail.javamail.JavaMailSender;
 import org.springframework.mail.javamail.MimeMessageHelper;
@@ -65,7 +65,7 @@ protected void sendMode(NotifyPlatform platform, String content) {
         MimeMessageHelper messageHelper = new MimeMessageHelper(mimeMessage, true, "UTF-8");
         messageHelper.setSubject(title);
         messageHelper.setFrom(sendFrom);
-        messageHelper.setTo(getNotifyItemReceivers(platform));
+        messageHelper.setTo(getNotifyReceivers(platform));
         messageHelper.setSentDate(new Date());
         messageHelper.setText(content, true);
         javaMailSender.send(mimeMessage);

File: core/src/main/java/org/dromara/dynamictp/core/notifier/base/AbstractNotifier.java
Patch:
@@ -52,11 +52,11 @@ public final void send(NotifyPlatform platform, String content) {
     protected abstract void sendMode(NotifyPlatform platform, String content);
 
     /**
-     * Get the notifyItem.receivers
+     * Get the notify receivers
      * @param platform platform
      * @return Receivers
      */
-    protected String[] getNotifyItemReceivers(NotifyPlatform platform) {
+    protected String[] getNotifyReceivers(NotifyPlatform platform) {
         BaseNotifyCtx context = DtpNotifyCtxHolder.get();
         String receivers = Optional.ofNullable(context)
                 .map(BaseNotifyCtx::getNotifyItem)

File: core/src/main/java/org/dromara/dynamictp/core/notifier/base/DingNotifier.java
Patch:
@@ -56,7 +56,7 @@ protected String buildMsgBody(NotifyPlatform platform, String content) {
 
         MarkdownReq.At at = new MarkdownReq.At();
 
-        List<String> mobiles = Lists.newArrayList(getNotifyItemReceivers(platform));
+        List<String> mobiles = Lists.newArrayList(getNotifyReceivers(platform));
         at.setAtMobiles(mobiles);
         if (CollectionUtils.isEmpty(mobiles)) {
             at.setAtAll(true);

File: extension/extension-notify-email/src/main/java/org/dromara/dynamictp/extension/notify/email/EmailNotifier.java
Patch:
@@ -18,10 +18,10 @@
 package org.dromara.dynamictp.extension.notify.email;
 
 import lombok.SneakyThrows;
-import org.dromara.dynamictp.common.entity.NotifyPlatform;
+import lombok.extern.slf4j.Slf4j;
 import org.dromara.dynamictp.common.em.NotifyPlatformEnum;
+import org.dromara.dynamictp.common.entity.NotifyPlatform;
 import org.dromara.dynamictp.core.notifier.base.AbstractNotifier;
-import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.mail.javamail.JavaMailSender;
 import org.springframework.mail.javamail.MimeMessageHelper;
@@ -65,7 +65,7 @@ protected void sendMode(NotifyPlatform platform, String content) {
         MimeMessageHelper messageHelper = new MimeMessageHelper(mimeMessage, true, "UTF-8");
         messageHelper.setSubject(title);
         messageHelper.setFrom(sendFrom);
-        messageHelper.setTo(getNotifyItemReceivers(platform));
+        messageHelper.setTo(getNotifyReceivers(platform));
         messageHelper.setSentDate(new Date());
         messageHelper.setText(content, true);
         javaMailSender.send(mimeMessage);

File: common/src/main/java/org/dromara/dynamictp/common/constant/WechatNotifyConst.java
Patch:
@@ -27,7 +27,7 @@ public final class WechatNotifyConst {
 
     private WechatNotifyConst() { }
 
-    public static final String WECHAT_WEH_HOOK = "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=";
+    public static final String WECHAT_WEB_HOOK = "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=";
 
     public static final String WARNING_COLOR = "warning";
 

File: core/src/main/java/org/dromara/dynamictp/core/notifier/base/WechatNotifier.java
Patch:
@@ -50,7 +50,7 @@ public String platform() {
      */
     @Override
     public void send(NotifyPlatform platform, String text) {
-        String serverUrl = WechatNotifyConst.WECHAT_WEH_HOOK + platform.getUrlKey();
+        String serverUrl = WechatNotifyConst.WECHAT_WEB_HOOK + platform.getUrlKey();
         MarkdownReq markdownReq = new MarkdownReq();
         markdownReq.setMsgtype("markdown");
         MarkdownReq.Markdown markdown = new MarkdownReq.Markdown();

File: common/src/main/java/org/dromara/dynamictp/common/constant/WechatNotifyConst.java
Patch:
@@ -27,7 +27,7 @@ public final class WechatNotifyConst {
 
     private WechatNotifyConst() { }
 
-    public static final String WECHAT_WEH_HOOK = "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=";
+    public static final String WECHAT_WEB_HOOK = "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=";
 
     public static final String WARNING_COLOR = "warning";
 

File: core/src/main/java/org/dromara/dynamictp/core/notifier/base/WechatNotifier.java
Patch:
@@ -50,7 +50,7 @@ public String platform() {
      */
     @Override
     public void send(NotifyPlatform platform, String text) {
-        String serverUrl = WechatNotifyConst.WECHAT_WEH_HOOK + platform.getUrlKey();
+        String serverUrl = WechatNotifyConst.WECHAT_WEB_HOOK + platform.getUrlKey();
         MarkdownReq markdownReq = new MarkdownReq();
         markdownReq.setMsgtype("markdown");
         MarkdownReq.Markdown markdown = new MarkdownReq.Markdown();

File: adapter/adapter-grpc/src/main/java/org/dromara/dynamictp/adapter/grpc/GrpcDtpAdapter.java
Patch:
@@ -76,7 +76,7 @@ protected void initialize() {
                         return null;
                     }).orElse(null);
             if (Objects.isNull(key)) {
-                return;
+                continue;
             }
             val executor = (Executor) ReflectionUtil.getFieldValue(ServerImpl.class, EXECUTOR_FIELD, serverImpl);
             String tpName = genTpName(key);

File: adapter/adapter-rocketmq/src/main/java/org/dromara/dynamictp/adapter/rocketmq/AliyunOnsRocketMqAdapter.java
Patch:
@@ -82,17 +82,19 @@ private void accept(String k, Consumer v) {
             return;
         }
         // consumer bean name replace topic name
-        String cusKey = defaultMqPushConsumer.getConsumerGroup() + "#" + k;
+        String cusKey = defaultMqPushConsumer.getConsumerGroup();
         ThreadPoolExecutor executor = null;
         val consumeMessageService = impl.getConsumeMessageService();
         if (consumeMessageService instanceof ConsumeMessageConcurrentlyService) {
             executor = (ThreadPoolExecutor) ReflectionUtil.getFieldValue(
                     ConsumeMessageConcurrentlyService.class,
                     CONSUME_EXECUTOR_FIELD_NAME, consumeMessageService);
+            cusKey = NAME + "#consumer#concurrently#" + cusKey;
         } else if (consumeMessageService instanceof ConsumeMessageOrderlyService) {
             executor = (ThreadPoolExecutor) ReflectionUtil.getFieldValue(
                     ConsumeMessageOrderlyService.class,
                     CONSUME_EXECUTOR_FIELD_NAME, consumeMessageService);
+            cusKey = NAME + "#consumer#orderly#" + cusKey;
         }
         if (Objects.nonNull(executor)) {
             val executorWrapper = new ExecutorWrapper(cusKey, executor);

File: adapter/adapter-rocketmq/src/main/java/org/dromara/dynamictp/adapter/rocketmq/RocketMqDtpAdapter.java
Patch:
@@ -76,7 +76,7 @@ public void adaptConsumerExecutors() {
             val pushConsumer = (DefaultMQPushConsumerImpl) ReflectionUtil.getFieldValue(DefaultMQPushConsumer.class,
                     "defaultMQPushConsumerImpl", consumer);
             if (Objects.isNull(pushConsumer)) {
-                return;
+                continue;
             }
 
             String cusKey = consumer.getConsumerGroup();
@@ -110,7 +110,7 @@ public void adaptProducerExecutors() {
             val producer = (DefaultMQProducerImpl) ReflectionUtil.getFieldValue(DefaultMQProducer.class,
                     "defaultMQProducerImpl", defaultMQProducer);
             if (Objects.isNull(producer)) {
-                return;
+                continue;
             }
 
             String proKey = NAME + "#producer#" + defaultMQProducer.getProducerGroup();

File: adapter/adapter-grpc/src/main/java/org/dromara/dynamictp/adapter/grpc/GrpcDtpAdapter.java
Patch:
@@ -76,7 +76,7 @@ protected void initialize() {
                         return null;
                     }).orElse(null);
             if (Objects.isNull(key)) {
-                return;
+                continue;
             }
             val executor = (Executor) ReflectionUtil.getFieldValue(ServerImpl.class, EXECUTOR_FIELD, serverImpl);
             String tpName = genTpName(key);

File: adapter/adapter-rocketmq/src/main/java/org/dromara/dynamictp/adapter/rocketmq/AliyunOnsRocketMqAdapter.java
Patch:
@@ -82,17 +82,19 @@ private void accept(String k, Consumer v) {
             return;
         }
         // consumer bean name replace topic name
-        String cusKey = defaultMqPushConsumer.getConsumerGroup() + "#" + k;
+        String cusKey = defaultMqPushConsumer.getConsumerGroup();
         ThreadPoolExecutor executor = null;
         val consumeMessageService = impl.getConsumeMessageService();
         if (consumeMessageService instanceof ConsumeMessageConcurrentlyService) {
             executor = (ThreadPoolExecutor) ReflectionUtil.getFieldValue(
                     ConsumeMessageConcurrentlyService.class,
                     CONSUME_EXECUTOR_FIELD_NAME, consumeMessageService);
+            cusKey = NAME + "#consumer#concurrently#" + cusKey;
         } else if (consumeMessageService instanceof ConsumeMessageOrderlyService) {
             executor = (ThreadPoolExecutor) ReflectionUtil.getFieldValue(
                     ConsumeMessageOrderlyService.class,
                     CONSUME_EXECUTOR_FIELD_NAME, consumeMessageService);
+            cusKey = NAME + "#consumer#orderly#" + cusKey;
         }
         if (Objects.nonNull(executor)) {
             val executorWrapper = new ExecutorWrapper(cusKey, executor);

File: adapter/adapter-rocketmq/src/main/java/org/dromara/dynamictp/adapter/rocketmq/RocketMqDtpAdapter.java
Patch:
@@ -76,7 +76,7 @@ public void adaptConsumerExecutors() {
             val pushConsumer = (DefaultMQPushConsumerImpl) ReflectionUtil.getFieldValue(DefaultMQPushConsumer.class,
                     "defaultMQPushConsumerImpl", consumer);
             if (Objects.isNull(pushConsumer)) {
-                return;
+                continue;
             }
 
             String cusKey = consumer.getConsumerGroup();
@@ -110,7 +110,7 @@ public void adaptProducerExecutors() {
             val producer = (DefaultMQProducerImpl) ReflectionUtil.getFieldValue(DefaultMQProducer.class,
                     "defaultMQProducerImpl", defaultMQProducer);
             if (Objects.isNull(producer)) {
-                return;
+                continue;
             }
 
             String proKey = NAME + "#producer#" + defaultMQProducer.getProducerGroup();

File: core/src/main/java/org/dromara/dynamictp/core/spring/DtpPostProcessor.java
Patch:
@@ -17,14 +17,14 @@
 
 package org.dromara.dynamictp.core.spring;
 
+import lombok.extern.slf4j.Slf4j;
+import org.apache.commons.lang3.StringUtils;
 import org.dromara.dynamictp.core.DtpRegistry;
 import org.dromara.dynamictp.core.support.DynamicTp;
 import org.dromara.dynamictp.core.support.ExecutorWrapper;
 import org.dromara.dynamictp.core.support.TaskQueue;
 import org.dromara.dynamictp.core.thread.DtpExecutor;
 import org.dromara.dynamictp.core.thread.EagerDtpExecutor;
-import lombok.extern.slf4j.Slf4j;
-import org.apache.commons.lang3.StringUtils;
 import org.springframework.beans.BeansException;
 import org.springframework.beans.factory.BeanFactory;
 import org.springframework.beans.factory.BeanFactoryAware;

File: core/src/main/java/org/dromara/dynamictp/core/spring/YamlPropertySourceFactory.java
Patch:
@@ -23,6 +23,7 @@
 import org.springframework.core.env.PropertySource;
 import org.springframework.core.io.support.EncodedResource;
 import org.springframework.core.io.support.PropertySourceFactory;
+import org.springframework.lang.Nullable;
 
 import java.util.Objects;
 import java.util.Properties;
@@ -36,7 +37,7 @@
 public class YamlPropertySourceFactory implements PropertySourceFactory {
 
     @Override
-    public PropertySource<?> createPropertySource(String name, EncodedResource encodedResource) {
+    public PropertySource<?> createPropertySource(@Nullable String name, EncodedResource encodedResource) {
         YamlPropertiesFactoryBean factory = new YamlPropertiesFactoryBean();
         factory.setResources(encodedResource.getResource());
         Properties properties = factory.getObject();

File: core/src/main/java/org/dromara/dynamictp/core/support/BinderHelper.java
Patch:
@@ -53,15 +53,15 @@ private static PropertiesBinder getBinder() {
     }
     
     public static void bindDtpProperties(Map<?, Object> properties, DtpProperties dtpProperties) {
-        final PropertiesBinder binder = BinderHelper.getBinder();
+        final PropertiesBinder binder = getBinder();
         if (Objects.isNull(binder)) {
             return;
         }
         binder.bindDtpProperties(properties, dtpProperties);
     }
     
     public static void bindDtpProperties(Environment environment, DtpProperties dtpProperties) {
-        final PropertiesBinder binder = BinderHelper.getBinder();
+        final PropertiesBinder binder = getBinder();
         if (Objects.isNull(binder)) {
             return;
         }

File: starter/starter-common/src/main/java/org/dromara/dynamictp/starter/common/DtpBootBeanConfiguration.java
Patch:
@@ -22,6 +22,7 @@
 import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnAvailableEndpoint;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
@@ -38,6 +39,7 @@ public class DtpBootBeanConfiguration {
     
     @Bean
     @ConditionalOnAvailableEndpoint
+    @ConditionalOnMissingBean
     public DtpEndpoint dtpEndpoint() {
         return new DtpEndpoint();
     }

File: starter/starter-configcenter/cloud-starter-consul/src/main/java/org/dromara/dynamictp/starter/cloud/consul/refresher/CloudConsulRefresher.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.dromara.dynamictp.starter.cloud.consul.refresher;
 
-import org.dromara.dynamictp.core.refresher.AbstractRefresher;
 import lombok.extern.slf4j.Slf4j;
+import org.dromara.dynamictp.core.refresher.AbstractRefresher;
 import org.springframework.cloud.context.scope.refresh.RefreshScopeRefreshedEvent;
 import org.springframework.context.ApplicationEvent;
 import org.springframework.context.event.SmartApplicationListener;
@@ -38,7 +38,7 @@ public boolean supportsEventType(@NonNull Class<? extends ApplicationEvent> even
     @Override
     public void onApplicationEvent(@NonNull ApplicationEvent event) {
         if (event instanceof RefreshScopeRefreshedEvent) {
-            doRefresh(dtpProperties);
+            refresh(environment);
         }
     }
 }

File: starter/starter-configcenter/cloud-starter-huawei/src/main/java/org/dromara/dynamictp/starter/cloud/huawei/refresher/CloudHuaweiRefresher.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.dromara.dynamictp.starter.cloud.huawei.refresher;
 
-import org.dromara.dynamictp.core.refresher.AbstractRefresher;
 import com.huaweicloud.common.event.ConfigRefreshEvent;
 import lombok.extern.slf4j.Slf4j;
+import org.dromara.dynamictp.core.refresher.AbstractRefresher;
 import org.springframework.context.ApplicationEvent;
 import org.springframework.context.event.SmartApplicationListener;
 import org.springframework.lang.NonNull;
@@ -39,7 +39,7 @@ public boolean supportsEventType(@NonNull Class<? extends ApplicationEvent> even
     public void onApplicationEvent(@NonNull ApplicationEvent event) {
         // huawei config define RefreshEvent
         if (event instanceof ConfigRefreshEvent) {
-            doRefresh(dtpProperties);
+            refresh(environment);
         }
     }
 }

File: starter/starter-configcenter/cloud-starter-nacos/src/main/java/org/dromara/dynamictp/starter/cloud/nacos/refresher/CloudNacosRefresher.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.dromara.dynamictp.starter.cloud.nacos.refresher;
 
-import org.dromara.dynamictp.core.refresher.AbstractRefresher;
 import lombok.extern.slf4j.Slf4j;
+import org.dromara.dynamictp.core.refresher.AbstractRefresher;
 import org.springframework.cloud.context.scope.refresh.RefreshScopeRefreshedEvent;
 import org.springframework.context.ApplicationEvent;
 import org.springframework.context.event.SmartApplicationListener;
@@ -41,7 +41,7 @@ public boolean supportsEventType(@NonNull Class<? extends ApplicationEvent> even
     @Override
     public void onApplicationEvent(@NonNull ApplicationEvent event) {
         if (event instanceof RefreshScopeRefreshedEvent) {
-            doRefresh(dtpProperties);
+            refresh(environment);
         }
     }
 }

File: starter/starter-configcenter/cloud-starter-polaris/src/main/java/org/dromara/dynamictp/starter/cloud/polaris/refresher/CloudPolarisRefresher.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.dromara.dynamictp.starter.cloud.polaris.refresher;
 
-import org.dromara.dynamictp.core.refresher.AbstractRefresher;
 import lombok.extern.slf4j.Slf4j;
+import org.dromara.dynamictp.core.refresher.AbstractRefresher;
 import org.springframework.cloud.context.scope.refresh.RefreshScopeRefreshedEvent;
 import org.springframework.context.ApplicationEvent;
 import org.springframework.context.event.SmartApplicationListener;
@@ -41,7 +41,7 @@ public boolean supportsEventType(@NonNull Class<? extends ApplicationEvent> even
     @Override
     public void onApplicationEvent(@NonNull ApplicationEvent event) {
         if (event instanceof RefreshScopeRefreshedEvent) {
-            doRefresh(dtpProperties);
+            refresh(environment);
         }
     }
 }

File: starter/starter-configcenter/cloud-starter-zookeeper/src/main/java/org/dromara/dynamictp/starter/cloud/zookeeper/refresher/CloudZookeeperRefresher.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.dromara.dynamictp.starter.cloud.zookeeper.refresher;
 
-import org.dromara.dynamictp.core.refresher.AbstractRefresher;
 import lombok.extern.slf4j.Slf4j;
+import org.dromara.dynamictp.core.refresher.AbstractRefresher;
 import org.springframework.cloud.context.scope.refresh.RefreshScopeRefreshedEvent;
 import org.springframework.context.ApplicationEvent;
 import org.springframework.context.event.SmartApplicationListener;
@@ -38,7 +38,7 @@ public boolean supportsEventType(@NonNull Class<? extends ApplicationEvent> even
     @Override
     public void onApplicationEvent(@NonNull ApplicationEvent event) {
         if (event instanceof RefreshScopeRefreshedEvent) {
-            doRefresh(dtpProperties);
+            refresh(environment);
         }
     }
 }

File: starter/starter-configcenter/starter-zookeeper/src/main/java/org/dromara/dynamictp/starter/zookeeper/refresher/ZookeeperRefresher.java
Patch:
@@ -17,15 +17,15 @@
 
 package org.dromara.dynamictp.starter.zookeeper.refresher;
 
-import org.dromara.dynamictp.core.refresher.AbstractRefresher;
-import org.dromara.dynamictp.starter.zookeeper.util.CuratorUtil;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.api.CuratorListener;
 import org.apache.curator.framework.state.ConnectionState;
 import org.apache.curator.framework.state.ConnectionStateListener;
 import org.apache.zookeeper.WatchedEvent;
+import org.dromara.dynamictp.core.refresher.AbstractRefresher;
 import org.dromara.dynamictp.starter.zookeeper.autoconfigure.ZkConfigEnvironmentProcessor;
+import org.dromara.dynamictp.starter.zookeeper.util.CuratorUtil;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.context.EnvironmentAware;
 import org.springframework.core.env.ConfigurableEnvironment;
@@ -73,7 +73,7 @@ public void afterPropertiesSet() {
      * load config and refresh
      */
     private void loadAndRefresh() {
-        doRefresh(CuratorUtil.genPropertiesMap(dtpProperties));
+        refresh(CuratorUtil.genPropertiesMap(dtpProperties));
     }
 
     @Override

File: starter/starter-adapter/starter-adapter-rocketmq/src/main/java/org/dromara/dynamictp/starter/adapter/rocketmq/autoconfigure/RocketMqTpAutoConfiguration.java
Patch:
@@ -22,7 +22,6 @@
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
@@ -33,7 +32,6 @@
  * @since 1.0.6
  */
 @Configuration
-@ConditionalOnProperty(prefix = "rocketmq", value = {"name-server"})
 @ConditionalOnBean({DtpBaseBeanConfiguration.class})
 @AutoConfigureAfter({DtpBaseBeanConfiguration.class})
 @SuppressWarnings("all")

File: common/src/main/java/org/dromara/dynamictp/common/parser/json/JsonParser.java
Patch:
@@ -36,6 +36,7 @@ public interface JsonParser {
     /**
      * Json string to object.
      *
+     * @param <T> the target type
      * @param json json string
      * @param typeOfT type of target object
      * @return target object

File: common/src/main/java/org/dromara/dynamictp/common/queue/VariableLinkedBlockingQueue.java
Patch:
@@ -1073,7 +1073,6 @@ public int characteristics() {
      * <p>The {@code Spliterator} reports {@link Spliterator#CONCURRENT},
      * {@link Spliterator#ORDERED}, and {@link Spliterator#NONNULL}.
      *
-     * @implNote
      * The {@code Spliterator} implements {@code trySplit} to permit limited
      * parallelism.
      *

File: common/src/main/java/org/dromara/dynamictp/common/util/JsonUtil.java
Patch:
@@ -70,6 +70,7 @@ public static String toJson(Object obj) {
      * 方法注释: <br>
      * 〈此方法将指定的 Json 反序列化为指定类的对象。〉
      *
+     * @param <T> the target type
      * @param json    要反序列化的json字符串
      * @param typeOfT 要反序列化的对象类型
      * @return T

File: common/src/main/java/org/dromara/dynamictp/common/parser/json/JsonParser.java
Patch:
@@ -36,6 +36,7 @@ public interface JsonParser {
     /**
      * Json string to object.
      *
+     * @param <T> the target type
      * @param json json string
      * @param typeOfT type of target object
      * @return target object

File: common/src/main/java/org/dromara/dynamictp/common/queue/VariableLinkedBlockingQueue.java
Patch:
@@ -1073,7 +1073,6 @@ public int characteristics() {
      * <p>The {@code Spliterator} reports {@link Spliterator#CONCURRENT},
      * {@link Spliterator#ORDERED}, and {@link Spliterator#NONNULL}.
      *
-     * @implNote
      * The {@code Spliterator} implements {@code trySplit} to permit limited
      * parallelism.
      *

File: common/src/main/java/org/dromara/dynamictp/common/util/JsonUtil.java
Patch:
@@ -70,6 +70,7 @@ public static String toJson(Object obj) {
      * 方法注释: <br>
      * 〈此方法将指定的 Json 反序列化为指定类的对象。〉
      *
+     * @param <T> the target type
      * @param json    要反序列化的json字符串
      * @param typeOfT 要反序列化的对象类型
      * @return T

File: common/src/main/java/org/dromara/dynamictp/common/em/NotifyItemEnum.java
Patch:
@@ -17,8 +17,8 @@ public enum NotifyItemEnum {
     CHANGE("change"),
 
     /**
-     * ThreadPool livenes notify.
-     * livenes = activeCount / maximumPoolSize
+     * ThreadPool liveness notify.
+     * liveness = activeCount / maximumPoolSize
      */
     LIVENESS("liveness"),
 

File: common/src/main/java/org/dromara/dynamictp/common/em/NotifyItemEnum.java
Patch:
@@ -17,8 +17,8 @@ public enum NotifyItemEnum {
     CHANGE("change"),
 
     /**
-     * ThreadPool livenes notify.
-     * livenes = activeCount / maximumPoolSize
+     * ThreadPool liveness notify.
+     * liveness = activeCount / maximumPoolSize
      */
     LIVENESS("liveness"),
 

File: adapter/adapter-webserver/src/main/java/org/dromara/dynamictp/adapter/webserver/undertow/UndertowDtpAdapter.java
Patch:
@@ -41,8 +41,7 @@ public ExecutorWrapper doInitExecutorWrapper(WebServer webServer) {
         }
         XnioWorker xnioWorker = undertow.getWorker();
 
-        Object taskPool = ReflectionUtil.getFieldValue(XnioWorker.class,
-                "taskPool", xnioWorker);
+        Object taskPool = ReflectionUtil.getFieldValue(XnioWorker.class, "taskPool", xnioWorker);
         if (Objects.isNull(taskPool)) {
             return null;
         }

File: core/src/main/java/org/dromara/dynamictp/core/timer/RunTimeoutTimerTask.java
Patch:
@@ -31,7 +31,7 @@ public RunTimeoutTimerTask(DtpExecutor dtpExecutor, DtpRunnable runnable, Thread
     @Override
     public void run(Timeout timeout) {
         dtpExecutor.incRunTimeoutCount(1);
-        AlarmManager.doAlarmAsync(dtpExecutor, NotifyItemEnum.RUN_TIMEOUT);
+        AlarmManager.doAlarmAsync(dtpExecutor, NotifyItemEnum.RUN_TIMEOUT, runnable);
         log.warn("DynamicTp execute, run timeout, tpName: {}, taskName: {}, traceId: {}, stackTrace: {}",
                 dtpExecutor.getThreadPoolName(), runnable.getTaskName(),
                 runnable.getTraceId(), traceToString(thread.getStackTrace()));

File: starter/starter-adapter/starter-adapter-common/src/main/java/com/dtp/starter/adapter/common/autoconfigure/AdapterCommonAutoConfiguration.java
Patch:
@@ -9,7 +9,6 @@
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.context.annotation.DependsOn;
 
 /**
  * AdapterCommonAutoConfiguration related
@@ -24,7 +23,6 @@
 public class AdapterCommonAutoConfiguration {
 
     @Bean
-    @DependsOn({"dtpApplicationContextHolder"})
     @ConditionalOnMissingBean
     public DtpAdapterListener dtpAdapterListener() {
         return new DtpAdapterListener();

File: common/src/main/java/com/dtp/common/ApplicationContextHolder.java
Patch:
@@ -50,4 +50,5 @@ public static Environment getEnvironment() {
     public static void publishEvent(ApplicationEvent event) {
         context.publishEvent(event);
     }
+
 }

File: core/src/main/java/com/dtp/core/converter/ExecutorConverter.java
Patch:
@@ -42,8 +42,6 @@ public static ThreadPoolStats toMetrics(ExecutorWrapper wrapper) {
         poolStats.setPoolName(wrapper.getThreadPoolName());
         if (executor instanceof DtpExecutor) {
             DtpExecutor dtpExecutor = (DtpExecutor) executor;
-            poolStats.setRejectHandlerName(dtpExecutor.getRejectHandlerType());
-            poolStats.setRejectCount(dtpExecutor.getRejectCount());
             poolStats.setRunTimeoutCount(dtpExecutor.getRunTimeoutCount());
             poolStats.setQueueTimeoutCount(dtpExecutor.getQueueTimeoutCount());
             poolStats.setDynamic(true);
@@ -67,6 +65,8 @@ private static ThreadPoolStats convertCommon(ExecutorAdapter<?> executor) {
                 .taskCount(executor.getTaskCount())
                 .completedTaskCount(executor.getCompletedTaskCount())
                 .waitTaskCount(executor.getQueueSize())
+                .rejectCount(executor.getRejectedTaskCount())
+                .rejectHandlerName(executor.getRejectHandlerType())
                 .build();
     }
 }

File: core/src/main/java/com/dtp/core/notifier/alarm/AlarmCounter.java
Patch:
@@ -75,7 +75,7 @@ public static Triple<String, String, String> countStrRrq(String threadPoolName,
         }
 
         DtpExecutor dtpExecutor = (DtpExecutor) executor.getOriginal();
-        String rejectCount = getCount(threadPoolName, REJECT.getValue()) + " / " + dtpExecutor.getRejectCount();
+        String rejectCount = getCount(threadPoolName, REJECT.getValue()) + " / " + dtpExecutor.getRejectedTaskCount();
         String runTimeoutCount = getCount(threadPoolName, RUN_TIMEOUT.getValue()) + " / "
                 + dtpExecutor.getRunTimeoutCount();
         String queueTimeoutCount = getCount(threadPoolName, QUEUE_TIMEOUT.getValue()) + " / "

File: core/src/main/java/com/dtp/core/spring/DtpConfigurationSelector.java
Patch:
@@ -29,7 +29,7 @@ public String[] selectImports(AnnotationMetadata metadata) {
         if (!BooleanUtils.toBoolean(environment.getProperty(DTP_ENABLED_PROP, BooleanUtils.TRUE))) {
             return new String[]{};
         }
-        return new String[]{DtpBaseBeanConfiguration.class.getName(),
+        return new String[] {DtpBaseBeanConfiguration.class.getName(),
                 DtpPostProcessorRegistrar.class.getName(),
                 DtpBeanDefinitionRegistrar.class.getName()};
     }

File: core/src/main/java/com/dtp/core/spring/DtpLifecycle.java
Patch:
@@ -14,7 +14,7 @@
  * DtpLifecycle related
  *
  * @author yanhom
- * @since 1.0.0
+ * @since 1.1.3
  **/
 @Slf4j
 public class DtpLifecycle implements SmartLifecycle {

File: starter/starter-adapter/starter-adapter-webserver/src/main/java/com/dtp/starter/adapter/webserver/autocconfigure/WebServerTpAutoConfiguration.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.dtp.adapter.webserver.JettyDtpAdapter;
 import com.dtp.adapter.webserver.TomcatDtpAdapter;
-import com.dtp.adapter.webserver.UndertowDtpAdapter;
+import com.dtp.adapter.webserver.undertow.UndertowDtpAdapter;
 import com.dtp.core.spring.DtpBaseBeanConfiguration;
 import com.dtp.starter.adapter.webserver.autocconfigure.condition.ConditionalOnJettyWebServer;
 import com.dtp.starter.adapter.webserver.autocconfigure.condition.ConditionalOnTomcatWebServer;

File: core/src/main/java/com/dtp/core/thread/OrderedDtpExecutor.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.concurrent.TimeUnit;
 
 /**
- * {@link OrderedDtpExecutor1} can ensure that the delivered tasks are executed
+ * {@link OrderedDtpExecutor} can ensure that the delivered tasks are executed
  * according to the key and task submission order. It is applicable to scenarios
  * where the throughput is improved through parallel processing and the tasks
  * are run in a certain order.

File: adapter/adapter-brpc/src/main/java/com/dtp/apapter/brpc/client/StarlightClientDtpAdapter.java
Patch:
@@ -14,8 +14,8 @@
 import com.google.common.collect.Maps;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.collections4.MapUtils;
 
 import java.util.List;
 import java.util.Map;

File: adapter/adapter-common/src/main/java/com/dtp/adapter/common/AbstractDtpAdapter.java
Patch:
@@ -20,8 +20,8 @@
 import com.google.common.collect.Maps;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.collections4.MapUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.boot.context.event.ApplicationReadyEvent;
 import org.springframework.context.ApplicationEvent;

File: adapter/adapter-dubbo/src/main/java/com/dtp/adapter/dubbo/alibaba/AlibabaDubboDtpAdapter.java
Patch:
@@ -7,7 +7,7 @@
 import com.dtp.core.support.ExecutorWrapper;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 
 import java.util.Map;
 import java.util.concurrent.ThreadPoolExecutor;

File: adapter/adapter-dubbo/src/main/java/com/dtp/adapter/dubbo/apache/ApacheDubboDtpAdapter.java
Patch:
@@ -6,7 +6,7 @@
 import com.dtp.common.util.ReflectionUtil;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 import org.apache.dubbo.common.Version;
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.store.DataStore;

File: adapter/adapter-grpc/src/main/java/com/dtp/adapter/grpc/GrpcDtpAdapter.java
Patch:
@@ -9,7 +9,7 @@
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
 import net.devh.boot.grpc.server.serverfactory.GrpcServerLifecycle;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 
 import java.util.Objects;
 import java.util.concurrent.Executor;

File: adapter/adapter-motan/src/main/java/com/dtp/adapter/motan/MotanDtpAdapter.java
Patch:
@@ -12,8 +12,8 @@
 import com.weibo.api.motan.transport.netty.NettyServer;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.collections4.MapUtils;
 
 import java.util.List;
 import java.util.Objects;

File: adapter/adapter-okhttp3/src/main/java/com/dtp/adapter/okhttp3/Okhttp3DtpAdapter.java
Patch:
@@ -7,7 +7,7 @@
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
 import okhttp3.OkHttpClient;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 
 /**
  * Okhttp3DtpAdapter related

File: adapter/adapter-rabbitmq/src/main/java/com/dtp/adapter/rabbitmq/RabbitMqDtpAdapter.java
Patch:
@@ -7,7 +7,7 @@
 import com.dtp.core.support.ExecutorWrapper;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 import org.springframework.amqp.rabbit.connection.AbstractConnectionFactory;
 
 import java.util.Objects;

File: adapter/adapter-rocketmq/src/main/java/com/dtp/adapter/rocketmq/AliyunOnsRocketMqAdapter.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.concurrent.ThreadPoolExecutor;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 
 /**
  * Aliyun business version rocketmq adapter.

File: adapter/adapter-rocketmq/src/main/java/com/dtp/adapter/rocketmq/RocketMqDtpAdapter.java
Patch:
@@ -7,7 +7,7 @@
 import com.dtp.core.support.ExecutorWrapper;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
 import org.apache.rocketmq.client.impl.consumer.ConsumeMessageConcurrentlyService;
 import org.apache.rocketmq.client.impl.consumer.ConsumeMessageOrderlyService;

File: adapter/adapter-rocketmq/src/main/java/com/dtp/adapter/rocketmq/StreamRocketMqDtpAdapter.java
Patch:
@@ -9,7 +9,7 @@
 import com.dtp.core.support.ExecutorWrapper;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
 import org.apache.rocketmq.client.impl.consumer.ConsumeMessageConcurrentlyService;
 import org.apache.rocketmq.client.impl.consumer.ConsumeMessageOrderlyService;

File: adapter/adapter-sofa/src/main/java/com/dtp/adapter/sofa/SofaDtpAdapter.java
Patch:
@@ -13,8 +13,8 @@
 import com.dtp.common.util.ReflectionUtil;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.collections4.MapUtils;
 
 import java.lang.reflect.Field;
 import java.util.List;

File: adapter/adapter-tars/src/main/java/com/dtp/adapter/tars/TarsDtpAdapter.java
Patch:
@@ -8,7 +8,7 @@
 import com.qq.tars.client.CommunicatorFactory;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 
 import java.util.Objects;
 import java.util.concurrent.ConcurrentHashMap;

File: common/src/main/java/com/dtp/common/entity/AlarmInfo.java
Patch:
@@ -1,7 +1,7 @@
 package com.dtp.common.entity;
 
-import cn.hutool.core.date.DateUtil;
 import com.dtp.common.em.NotifyItemEnum;
+import com.dtp.common.util.DateUtil;
 import lombok.Builder;
 import lombok.Data;
 

File: common/src/main/java/com/dtp/common/entity/NotifyItem.java
Patch:
@@ -4,7 +4,7 @@
 import com.dtp.common.util.StringUtil;
 import lombok.Data;
 import lombok.val;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 
 import java.util.ArrayList;
 import java.util.List;

File: common/src/main/java/com/dtp/common/entity/NotifyPlatform.java
Patch:
@@ -1,8 +1,9 @@
 package com.dtp.common.entity;
 
-import cn.hutool.core.util.IdUtil;
 import lombok.Data;
 
+import java.util.UUID;
+
 /**
  * NotifyPlatform related
  *
@@ -15,7 +16,7 @@ public class NotifyPlatform {
     /**
      * Notify platform id.
      */
-    private String platformId = IdUtil.fastSimpleUUID();
+    private String platformId = UUID.randomUUID().toString();
 
     /**
      * Notify platform name.

File: common/src/main/java/com/dtp/common/json/parser/JsonParser.java
Patch:
@@ -33,4 +33,5 @@ public interface JsonParser {
      * @return json string
      */
     String toJson(Object obj);
+
 }

File: common/src/main/java/com/dtp/common/util/BeanUtil.java
Patch:
@@ -1,7 +1,7 @@
 package com.dtp.common.util;
 
 import lombok.extern.slf4j.Slf4j;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 import org.apache.commons.lang3.ArrayUtils;
 import org.springframework.beans.factory.ListableBeanFactory;
 import org.springframework.beans.factory.support.BeanDefinitionBuilder;

File: common/src/main/java/com/dtp/common/util/StreamUtil.java
Patch:
@@ -1,6 +1,6 @@
 package com.dtp.common.util;
 
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.springframework.util.Assert;
 
 import java.util.Collection;

File: common/src/main/java/com/dtp/common/util/StringUtil.java
Patch:
@@ -1,6 +1,6 @@
 package com.dtp.common.util;
 
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 
 import java.util.Collection;
 

File: core/src/main/java/com/dtp/core/monitor/collector/InternalLogCollector.java
Patch:
@@ -1,8 +1,8 @@
 package com.dtp.core.monitor.collector;
 
-import cn.hutool.json.JSONUtil;
 import com.dtp.common.entity.ThreadPoolStats;
 import com.dtp.common.em.CollectorTypeEnum;
+import com.dtp.common.util.JsonUtil;
 import lombok.extern.slf4j.Slf4j;
 
 /**
@@ -13,7 +13,7 @@ public class InternalLogCollector extends AbstractCollector {
 
     @Override
     public void collect(ThreadPoolStats poolStats) {
-        log.info("dynamic.tp metrics: {}", JSONUtil.toJsonStr(poolStats));
+        log.info("dynamic.tp metrics: {}", JsonUtil.toJson(poolStats));
     }
 
     @Override

File: core/src/main/java/com/dtp/core/monitor/collector/LogCollector.java
Patch:
@@ -1,8 +1,8 @@
 package com.dtp.core.monitor.collector;
 
-import cn.hutool.json.JSONUtil;
-import com.dtp.common.entity.ThreadPoolStats;
 import com.dtp.common.em.CollectorTypeEnum;
+import com.dtp.common.entity.ThreadPoolStats;
+import com.dtp.common.util.JsonUtil;
 import com.dtp.logging.LogHelper;
 import lombok.extern.slf4j.Slf4j;
 
@@ -17,7 +17,7 @@ public class LogCollector extends AbstractCollector {
 
     @Override
     public void collect(ThreadPoolStats threadPoolStats) {
-        String metrics = JSONUtil.toJsonStr(threadPoolStats);
+        String metrics = JsonUtil.toJson(threadPoolStats);
         if (LogHelper.getMonitorLogger() == null) {
             log.error("Cannot find monitor logger...");
             return;

File: core/src/main/java/com/dtp/core/monitor/collector/MicroMeterCollector.java
Patch:
@@ -1,8 +1,8 @@
 package com.dtp.core.monitor.collector;
 
 import cn.hutool.core.bean.BeanUtil;
-import com.dtp.common.entity.ThreadPoolStats;
 import com.dtp.common.em.CollectorTypeEnum;
+import com.dtp.common.entity.ThreadPoolStats;
 import com.dtp.common.util.CommonUtil;
 import com.google.common.collect.Lists;
 import io.micrometer.core.instrument.Metrics;

File: core/src/main/java/com/dtp/core/notifier/AbstractDtpNotifier.java
Patch:
@@ -1,14 +1,13 @@
 package com.dtp.core.notifier;
 
-import cn.hutool.core.date.DateTime;
-import cn.hutool.core.date.DateUtil;
 import com.dtp.common.em.NotifyItemEnum;
 import com.dtp.common.em.NotifyPlatformEnum;
 import com.dtp.common.entity.AlarmInfo;
 import com.dtp.common.entity.NotifyItem;
 import com.dtp.common.entity.NotifyPlatform;
 import com.dtp.common.entity.TpMainFields;
 import com.dtp.common.util.CommonUtil;
+import com.dtp.common.util.DateUtil;
 import com.dtp.core.context.AlarmCtx;
 import com.dtp.core.context.BaseNotifyCtx;
 import com.dtp.core.context.DtpNotifyCtxHolder;
@@ -158,7 +157,7 @@ protected String buildNoticeContent(NotifyPlatform platform, TpMainFields oldFie
                 oldFields.getQueueCapacity(), executor.getQueueCapacity(),
                 oldFields.getRejectType(), executor.getRejectHandlerType(),
                 getReceives(platform.getPlatform(), platform.getReceivers()),
-                DateTime.now()
+                DateUtil.now()
         );
         return highlightNotifyContent(content, diffs);
     }

File: core/src/main/java/com/dtp/core/notifier/base/WechatNotifier.java
Patch:
@@ -2,11 +2,11 @@
 
 import cn.hutool.http.HttpRequest;
 import cn.hutool.http.HttpResponse;
-import cn.hutool.json.JSONUtil;
 import com.dtp.common.constant.WechatNotifyConst;
 import com.dtp.common.entity.MarkdownReq;
 import com.dtp.common.entity.NotifyPlatform;
 import com.dtp.common.em.NotifyPlatformEnum;
+import com.dtp.common.util.JsonUtil;
 import lombok.extern.slf4j.Slf4j;
 
 import java.util.Objects;
@@ -41,10 +41,10 @@ public void send(NotifyPlatform platform, String text) {
         markdownReq.setMarkdown(markdown);
 
         try {
-            HttpResponse response = HttpRequest.post(serverUrl).body(JSONUtil.toJsonStr(markdownReq)).execute();
+            HttpResponse response = HttpRequest.post(serverUrl).body(JsonUtil.toJson(markdownReq)).execute();
             if (Objects.nonNull(response)) {
                 log.info("DynamicTp notify, wechat send success, response: {}, request:{}",
-                        response.body(), JSONUtil.toJsonStr(markdownReq));
+                        response.body(), JsonUtil.toJson(markdownReq));
             }
         } catch (Exception e) {
             log.error("DynamicTp notify, wechat send failed...", e);

File: core/src/main/java/com/dtp/core/notifier/filter/AlarmBaseFilter.java
Patch:
@@ -8,7 +8,7 @@
 import com.dtp.core.notifier.manager.AlarmManager;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 
 import java.util.Objects;
 

File: core/src/main/java/com/dtp/core/notifier/filter/NoticeBaseFilter.java
Patch:
@@ -6,7 +6,7 @@
 import com.dtp.core.context.BaseNotifyCtx;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 
 import java.util.Objects;
 

File: core/src/main/java/com/dtp/core/notifier/manager/NotifyHelper.java
Patch:
@@ -15,7 +15,7 @@
 import com.google.common.collect.Sets;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 
 import java.util.Collection;
 import java.util.Collections;

File: core/src/main/java/com/dtp/core/parser/JsonConfigParser.java
Patch:
@@ -5,7 +5,7 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 import org.apache.commons.lang3.StringUtils;
 
 import java.io.IOException;

File: core/src/main/java/com/dtp/core/refresher/AbstractRefresher.java
Patch:
@@ -9,7 +9,7 @@
 import com.dtp.core.spring.PropertiesBinder;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 import org.apache.commons.lang3.StringUtils;
 
 import javax.annotation.Resource;

File: core/src/main/java/com/dtp/core/spring/DtpBeanDefinitionRegistrar.java
Patch:
@@ -12,7 +12,7 @@
 import com.google.common.collect.Maps;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.springframework.beans.factory.support.BeanDefinitionRegistry;
 import org.springframework.context.EnvironmentAware;
 import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;

File: core/src/main/java/com/dtp/core/support/ThreadPoolBuilder.java
Patch:
@@ -16,7 +16,7 @@
 import com.dtp.core.thread.OrderedDtpExecutor;
 import com.dtp.core.thread.ScheduledDtpExecutor;
 import com.google.common.collect.Lists;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.util.Assert;
 

File: core/src/main/java/com/dtp/core/support/runnable/MdcRunnable.java
Patch:
@@ -1,6 +1,6 @@
 package com.dtp.core.support.runnable;
 
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 import org.slf4j.MDC;
 
 import java.util.Map;

File: core/src/main/java/com/dtp/core/support/wrapper/TaskWrappers.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.dtp.common.util.StringUtil;
 import com.google.common.collect.Lists;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 
 import java.util.Collections;
 import java.util.List;

File: core/src/main/java/com/dtp/core/thread/DtpExecutor.java
Patch:
@@ -12,7 +12,7 @@
 import com.dtp.core.support.wrapper.TaskWrapper;
 import com.google.common.collect.Lists;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.slf4j.MDC;
 
 import java.util.List;

File: extension/extension-limiter-redis/src/main/java/com/dtp/extension/limiter/redis/ratelimiter/NotifyRedisRateLimiterFilter.java
Patch:
@@ -5,7 +5,7 @@
 import com.dtp.core.notifier.filter.NotifyFilter;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 
 import javax.annotation.Resource;
 import java.util.List;

File: extension/extension-notify-email/src/main/java/com/dtp/extension/notify/email/base/DtpEmailNotifier.java
Patch:
@@ -1,6 +1,5 @@
 package com.dtp.extension.notify.email.base;
 
-import cn.hutool.core.date.DateTime;
 import com.dtp.common.ApplicationContextHolder;
 import com.dtp.common.em.NotifyItemEnum;
 import com.dtp.common.em.NotifyPlatformEnum;
@@ -9,6 +8,7 @@
 import com.dtp.common.entity.NotifyPlatform;
 import com.dtp.common.entity.TpMainFields;
 import com.dtp.common.util.CommonUtil;
+import com.dtp.common.util.DateUtil;
 import com.dtp.core.context.AlarmCtx;
 import com.dtp.core.context.BaseNotifyCtx;
 import com.dtp.core.context.DtpNotifyCtxHolder;
@@ -94,7 +94,7 @@ protected String buildAlarmContent(NotifyPlatform platform, NotifyItemEnum notif
         context.setVariable("runTimeoutCount", alarmCounter.getMiddle());
         context.setVariable("queueTimeoutCount", alarmCounter.getRight());
         context.setVariable("lastAlarmTime", alarmInfo.getLastAlarmTime() == null ? UNKNOWN : alarmInfo.getLastAlarmTime());
-        context.setVariable("alarmTime", DateTime.now());
+        context.setVariable("alarmTime", DateUtil.now());
         context.setVariable("tid", Optional.ofNullable(MDC.get(TRACE_ID)).orElse(UNKNOWN));
         context.setVariable("alarmInterval", notifyItem.getInterval());
         context.setVariable("highlightVariables", getAlarmKeys(notifyItemEnum));
@@ -121,7 +121,7 @@ protected String buildNoticeContent(NotifyPlatform platform, TpMainFields oldFie
         context.setVariable("newQueueCapacity", executor.getQueueCapacity());
         context.setVariable("oldRejectType", oldFields.getRejectType());
         context.setVariable("newRejectType", executor.getRejectHandlerType());
-        context.setVariable("notifyTime", DateTime.now());
+        context.setVariable("notifyTime", DateUtil.now());
         context.setVariable("diffs", diffs != null ? diffs : Collections.emptySet());
         return ((EmailNotifier) notifier).processTemplateContent("notice", context);
     }

File: starter/starter-configcenter/starter-etcd/src/main/java/com/dtp/starter/etcd/util/EtcdUtil.java
Patch:
@@ -1,6 +1,5 @@
 package com.dtp.starter.etcd.util;
 
-import cn.hutool.core.util.StrUtil;
 import com.dtp.common.em.ConfigFileTypeEnum;
 import com.dtp.common.properties.DtpProperties;
 import com.dtp.common.properties.DtpProperties.Etcd;
@@ -168,7 +167,7 @@ private static String getRealKey(final String key, KeyValue keyValue) {
         if (!configKey.endsWith("/")) {
             configKey += "/";
         }
-        return StrUtil.removePrefix(keyValue.getKey().toString(StandardCharsets.UTF_8), configKey);
+        return StringUtils.removeStart(keyValue.getKey().toString(StandardCharsets.UTF_8), configKey);
     }
 
     /**

File: common/src/main/java/com/dtp/common/entity/AlarmInfo.java
Patch:
@@ -1,7 +1,7 @@
 package com.dtp.common.entity;
 
-import cn.hutool.core.date.DateUtil;
 import com.dtp.common.em.NotifyItemEnum;
+import com.dtp.common.util.DateUtil;
 import lombok.Builder;
 import lombok.Data;
 

File: common/src/main/java/com/dtp/common/entity/NotifyPlatform.java
Patch:
@@ -1,8 +1,9 @@
 package com.dtp.common.entity;
 
-import cn.hutool.core.util.IdUtil;
 import lombok.Data;
 
+import java.util.UUID;
+
 /**
  * NotifyPlatform related
  *
@@ -15,7 +16,7 @@ public class NotifyPlatform {
     /**
      * Notify platform id.
      */
-    private String platformId = IdUtil.fastSimpleUUID();
+    private String platformId = UUID.randomUUID().toString();
 
     /**
      * Notify platform name.

File: common/src/main/java/com/dtp/common/json/parser/AbstractJsonParser.java
Patch:
@@ -4,7 +4,7 @@
  * @version v1.0.0
  * @see com.dtp.common.json.parser dynamic-tp
  */
-public abstract class AbstractJsonParser<T> implements JsonParser {
+public abstract class AbstractJsonParser implements JsonParser {
 
     public boolean isSupport() {
         try {

File: common/src/main/java/com/dtp/common/json/parser/JsonParser.java
Patch:
@@ -7,9 +7,11 @@
  * @see com.dtp.common.json.parser dynamic-tp
  */
 public interface JsonParser {
+
     boolean isSupport();
 
     <T> T fromJson(String json, Type typeOfT);
 
     String toJson(Object obj);
+
 }

File: core/src/main/java/com/dtp/core/monitor/collector/InternalLogCollector.java
Patch:
@@ -1,8 +1,8 @@
 package com.dtp.core.monitor.collector;
 
-import cn.hutool.json.JSONUtil;
 import com.dtp.common.entity.ThreadPoolStats;
 import com.dtp.common.em.CollectorTypeEnum;
+import com.dtp.common.util.JsonUtil;
 import lombok.extern.slf4j.Slf4j;
 
 /**
@@ -13,7 +13,7 @@ public class InternalLogCollector extends AbstractCollector {
 
     @Override
     public void collect(ThreadPoolStats poolStats) {
-        log.info("dynamic.tp metrics: {}", JSONUtil.toJsonStr(poolStats));
+        log.info("dynamic.tp metrics: {}", JsonUtil.toJson(poolStats));
     }
 
     @Override

File: core/src/main/java/com/dtp/core/monitor/collector/LogCollector.java
Patch:
@@ -1,8 +1,8 @@
 package com.dtp.core.monitor.collector;
 
-import cn.hutool.json.JSONUtil;
-import com.dtp.common.entity.ThreadPoolStats;
 import com.dtp.common.em.CollectorTypeEnum;
+import com.dtp.common.entity.ThreadPoolStats;
+import com.dtp.common.util.JsonUtil;
 import com.dtp.logging.LogHelper;
 import lombok.extern.slf4j.Slf4j;
 
@@ -17,7 +17,7 @@ public class LogCollector extends AbstractCollector {
 
     @Override
     public void collect(ThreadPoolStats threadPoolStats) {
-        String metrics = JSONUtil.toJsonStr(threadPoolStats);
+        String metrics = JsonUtil.toJson(threadPoolStats);
         if (LogHelper.getMonitorLogger() == null) {
             log.error("Cannot find monitor logger...");
             return;

File: core/src/main/java/com/dtp/core/monitor/collector/MicroMeterCollector.java
Patch:
@@ -1,8 +1,8 @@
 package com.dtp.core.monitor.collector;
 
 import cn.hutool.core.bean.BeanUtil;
-import com.dtp.common.entity.ThreadPoolStats;
 import com.dtp.common.em.CollectorTypeEnum;
+import com.dtp.common.entity.ThreadPoolStats;
 import com.dtp.common.util.CommonUtil;
 import com.google.common.collect.Lists;
 import io.micrometer.core.instrument.Metrics;

File: core/src/main/java/com/dtp/core/notifier/AbstractDtpNotifier.java
Patch:
@@ -1,14 +1,13 @@
 package com.dtp.core.notifier;
 
-import cn.hutool.core.date.DateTime;
-import cn.hutool.core.date.DateUtil;
 import com.dtp.common.em.NotifyItemEnum;
 import com.dtp.common.em.NotifyPlatformEnum;
 import com.dtp.common.entity.AlarmInfo;
 import com.dtp.common.entity.NotifyItem;
 import com.dtp.common.entity.NotifyPlatform;
 import com.dtp.common.entity.TpMainFields;
 import com.dtp.common.util.CommonUtil;
+import com.dtp.common.util.DateUtil;
 import com.dtp.core.context.AlarmCtx;
 import com.dtp.core.context.BaseNotifyCtx;
 import com.dtp.core.context.DtpNotifyCtxHolder;
@@ -158,7 +157,7 @@ protected String buildNoticeContent(NotifyPlatform platform, TpMainFields oldFie
                 oldFields.getQueueCapacity(), getQueueCapacity(executor),
                 oldFields.getRejectType(), getRejectHandlerName(executor),
                 getReceives(platform.getPlatform(), platform.getReceivers()),
-                DateTime.now()
+                DateUtil.now()
         );
         return highlightNotifyContent(content, diffs);
     }

File: core/src/main/java/com/dtp/core/notifier/base/DingNotifier.java
Patch:
@@ -2,12 +2,12 @@
 
 import cn.hutool.http.HttpRequest;
 import cn.hutool.http.HttpResponse;
-import cn.hutool.json.JSONUtil;
 import com.dtp.common.constant.DingNotifyConst;
 import com.dtp.common.entity.MarkdownReq;
 import com.dtp.common.entity.NotifyPlatform;
 import com.dtp.common.em.NotifyPlatformEnum;
 import com.dtp.common.util.DingSignUtil;
+import com.dtp.common.util.JsonUtil;
 import com.dtp.common.util.TimeUtil;
 import com.google.common.collect.Lists;
 import lombok.extern.slf4j.Slf4j;
@@ -61,10 +61,10 @@ public void send(NotifyPlatform platform, String text) {
 
         String hookUrl = getTargetUrl(platform.getSecret(), platform.getUrlKey());
         try {
-            HttpResponse response = HttpRequest.post(hookUrl).body(JSONUtil.toJsonStr(markdownReq)).execute();
+            HttpResponse response = HttpRequest.post(hookUrl).body(JsonUtil.toJson(markdownReq)).execute();
             if (Objects.nonNull(response)) {
                 log.info("DynamicTp notify, ding send success, response: {}, request: {}",
-                        response.body(), JSONUtil.toJsonStr(markdownReq));
+                        response.body(), JsonUtil.toJson(markdownReq));
             }
         } catch (Exception e) {
             log.error("DynamicTp notify, ding send failed...", e);

File: core/src/main/java/com/dtp/core/notifier/base/WechatNotifier.java
Patch:
@@ -2,11 +2,11 @@
 
 import cn.hutool.http.HttpRequest;
 import cn.hutool.http.HttpResponse;
-import cn.hutool.json.JSONUtil;
 import com.dtp.common.constant.WechatNotifyConst;
 import com.dtp.common.entity.MarkdownReq;
 import com.dtp.common.entity.NotifyPlatform;
 import com.dtp.common.em.NotifyPlatformEnum;
+import com.dtp.common.util.JsonUtil;
 import lombok.extern.slf4j.Slf4j;
 
 import java.util.Objects;
@@ -41,10 +41,10 @@ public void send(NotifyPlatform platform, String text) {
         markdownReq.setMarkdown(markdown);
 
         try {
-            HttpResponse response = HttpRequest.post(serverUrl).body(JSONUtil.toJsonStr(markdownReq)).execute();
+            HttpResponse response = HttpRequest.post(serverUrl).body(JsonUtil.toJson(markdownReq)).execute();
             if (Objects.nonNull(response)) {
                 log.info("DynamicTp notify, wechat send success, response: {}, request:{}",
-                        response.body(), JSONUtil.toJsonStr(markdownReq));
+                        response.body(), JsonUtil.toJson(markdownReq));
             }
         } catch (Exception e) {
             log.error("DynamicTp notify, wechat send failed...", e);

File: starter/starter-configcenter/starter-etcd/src/main/java/com/dtp/starter/etcd/util/EtcdUtil.java
Patch:
@@ -1,6 +1,5 @@
 package com.dtp.starter.etcd.util;
 
-import cn.hutool.core.util.StrUtil;
 import com.dtp.common.em.ConfigFileTypeEnum;
 import com.dtp.common.properties.DtpProperties;
 import com.dtp.common.properties.DtpProperties.Etcd;
@@ -168,7 +167,7 @@ private static String getRealKey(final String key, KeyValue keyValue) {
         if (!configKey.endsWith("/")) {
             configKey += "/";
         }
-        return StrUtil.removePrefix(keyValue.getKey().toString(StandardCharsets.UTF_8), configKey);
+        return StringUtils.removeStart(keyValue.getKey().toString(StandardCharsets.UTF_8), configKey);
     }
 
     /**

File: adapter/adapter-brpc/src/main/java/com/dtp/apapter/brpc/client/StarlightClientDtpAdapter.java
Patch:
@@ -14,8 +14,8 @@
 import com.google.common.collect.Maps;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.collections4.MapUtils;
 
 import java.util.List;
 import java.util.Map;

File: adapter/adapter-common/src/main/java/com/dtp/adapter/common/AbstractDtpAdapter.java
Patch:
@@ -20,8 +20,8 @@
 import com.google.common.collect.Maps;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.collections4.MapUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.boot.context.event.ApplicationReadyEvent;
 import org.springframework.context.ApplicationEvent;

File: adapter/adapter-dubbo/src/main/java/com/dtp/adapter/dubbo/alibaba/AlibabaDubboDtpAdapter.java
Patch:
@@ -7,7 +7,7 @@
 import com.dtp.core.support.ExecutorWrapper;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 
 import java.util.Map;
 import java.util.concurrent.ThreadPoolExecutor;

File: adapter/adapter-dubbo/src/main/java/com/dtp/adapter/dubbo/apache/ApacheDubboDtpAdapter.java
Patch:
@@ -6,7 +6,7 @@
 import com.dtp.common.util.ReflectionUtil;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 import org.apache.dubbo.common.Version;
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.common.store.DataStore;

File: adapter/adapter-grpc/src/main/java/com/dtp/adapter/grpc/GrpcDtpAdapter.java
Patch:
@@ -9,7 +9,7 @@
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
 import net.devh.boot.grpc.server.serverfactory.GrpcServerLifecycle;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 
 import java.util.Objects;
 import java.util.concurrent.Executor;

File: adapter/adapter-motan/src/main/java/com/dtp/adapter/motan/MotanDtpAdapter.java
Patch:
@@ -12,8 +12,8 @@
 import com.weibo.api.motan.transport.netty.NettyServer;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.collections4.MapUtils;
 
 import java.util.List;
 import java.util.Objects;

File: adapter/adapter-okhttp3/src/main/java/com/dtp/adapter/okhttp3/Okhttp3DtpAdapter.java
Patch:
@@ -7,7 +7,7 @@
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
 import okhttp3.OkHttpClient;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 
 /**
  * Okhttp3DtpAdapter related

File: adapter/adapter-rabbitmq/src/main/java/com/dtp/adapter/rabbitmq/RabbitMqDtpAdapter.java
Patch:
@@ -7,7 +7,7 @@
 import com.dtp.core.support.ExecutorWrapper;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 import org.springframework.amqp.rabbit.connection.AbstractConnectionFactory;
 
 import java.util.Objects;

File: adapter/adapter-rocketmq/src/main/java/com/dtp/adapter/rocketmq/AliyunOnsRocketMqAdapter.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.concurrent.ThreadPoolExecutor;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 
 /**
  * Aliyun business version rocketmq adapter.

File: adapter/adapter-rocketmq/src/main/java/com/dtp/adapter/rocketmq/RocketMqDtpAdapter.java
Patch:
@@ -7,7 +7,7 @@
 import com.dtp.core.support.ExecutorWrapper;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
 import org.apache.rocketmq.client.impl.consumer.ConsumeMessageConcurrentlyService;
 import org.apache.rocketmq.client.impl.consumer.ConsumeMessageOrderlyService;

File: adapter/adapter-rocketmq/src/main/java/com/dtp/adapter/rocketmq/StreamRocketMqDtpAdapter.java
Patch:
@@ -9,7 +9,7 @@
 import com.dtp.core.support.ExecutorWrapper;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
 import org.apache.rocketmq.client.impl.consumer.ConsumeMessageConcurrentlyService;
 import org.apache.rocketmq.client.impl.consumer.ConsumeMessageOrderlyService;

File: adapter/adapter-sofa/src/main/java/com/dtp/adapter/sofa/SofaDtpAdapter.java
Patch:
@@ -13,8 +13,8 @@
 import com.dtp.common.util.ReflectionUtil;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.collections4.MapUtils;
 
 import java.lang.reflect.Field;
 import java.util.List;

File: adapter/adapter-tars/src/main/java/com/dtp/adapter/tars/TarsDtpAdapter.java
Patch:
@@ -8,7 +8,7 @@
 import com.qq.tars.client.CommunicatorFactory;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 
 import java.util.Objects;
 import java.util.concurrent.ConcurrentHashMap;

File: common/src/main/java/com/dtp/common/entity/NotifyItem.java
Patch:
@@ -4,7 +4,7 @@
 import com.dtp.common.util.StringUtil;
 import lombok.Data;
 import lombok.val;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 
 import java.util.ArrayList;
 import java.util.List;

File: common/src/main/java/com/dtp/common/util/BeanUtil.java
Patch:
@@ -1,7 +1,7 @@
 package com.dtp.common.util;
 
 import lombok.extern.slf4j.Slf4j;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 import org.apache.commons.lang3.ArrayUtils;
 import org.springframework.beans.factory.ListableBeanFactory;
 import org.springframework.beans.factory.support.BeanDefinitionBuilder;

File: common/src/main/java/com/dtp/common/util/StreamUtil.java
Patch:
@@ -1,6 +1,6 @@
 package com.dtp.common.util;
 
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.springframework.util.Assert;
 
 import java.util.Collection;

File: common/src/main/java/com/dtp/common/util/StringUtil.java
Patch:
@@ -1,6 +1,6 @@
 package com.dtp.common.util;
 
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 
 import java.util.Collection;
 

File: core/src/main/java/com/dtp/core/DtpRegistry.java
Patch:
@@ -21,7 +21,7 @@
 import com.google.common.collect.Sets;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.boot.ApplicationArguments;
 import org.springframework.boot.ApplicationRunner;

File: core/src/main/java/com/dtp/core/monitor/DtpEndpoint.java
Patch:
@@ -10,7 +10,7 @@
 import com.dtp.core.support.MetricsAware;
 import com.google.common.collect.Lists;
 import lombok.val;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 import org.springframework.boot.actuate.endpoint.annotation.Endpoint;
 import org.springframework.boot.actuate.endpoint.annotation.ReadOperation;
 

File: core/src/main/java/com/dtp/core/notifier/base/DingNotifier.java
Patch:
@@ -11,7 +11,7 @@
 import com.dtp.common.util.TimeUtil;
 import com.google.common.collect.Lists;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.apache.commons.lang3.StringUtils;
 
 import java.util.List;

File: core/src/main/java/com/dtp/core/notifier/filter/AlarmBaseFilter.java
Patch:
@@ -8,7 +8,7 @@
 import com.dtp.core.notifier.manager.AlarmManager;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 
 import java.util.Objects;
 

File: core/src/main/java/com/dtp/core/notifier/filter/NoticeBaseFilter.java
Patch:
@@ -6,7 +6,7 @@
 import com.dtp.core.context.BaseNotifyCtx;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 
 import java.util.Objects;
 

File: core/src/main/java/com/dtp/core/notifier/manager/NotifyHelper.java
Patch:
@@ -15,7 +15,7 @@
 import com.google.common.collect.Sets;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 
 import java.util.Collection;
 import java.util.Collections;

File: core/src/main/java/com/dtp/core/parser/JsonConfigParser.java
Patch:
@@ -5,7 +5,7 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 import org.apache.commons.lang3.StringUtils;
 
 import java.io.IOException;

File: core/src/main/java/com/dtp/core/refresher/AbstractRefresher.java
Patch:
@@ -9,7 +9,7 @@
 import com.dtp.core.spring.PropertiesBinder;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 import org.apache.commons.lang3.StringUtils;
 
 import javax.annotation.Resource;

File: core/src/main/java/com/dtp/core/spring/DtpBeanDefinitionRegistrar.java
Patch:
@@ -12,7 +12,7 @@
 import com.google.common.collect.Maps;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.springframework.beans.factory.support.BeanDefinitionRegistry;
 import org.springframework.context.EnvironmentAware;
 import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;

File: core/src/main/java/com/dtp/core/support/ThreadPoolBuilder.java
Patch:
@@ -16,7 +16,7 @@
 import com.dtp.core.thread.NamedThreadFactory;
 import com.dtp.core.thread.OrderedDtpExecutor;
 import com.google.common.collect.Lists;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.util.Assert;
 

File: core/src/main/java/com/dtp/core/support/runnable/MdcRunnable.java
Patch:
@@ -1,6 +1,6 @@
 package com.dtp.core.support.runnable;
 
-import org.apache.commons.collections.MapUtils;
+import org.apache.commons.collections4.MapUtils;
 import org.slf4j.MDC;
 
 import java.util.Map;

File: core/src/main/java/com/dtp/core/support/wrapper/TaskWrappers.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.dtp.common.util.StringUtil;
 import com.google.common.collect.Lists;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 
 import java.util.Collections;
 import java.util.List;

File: core/src/main/java/com/dtp/core/thread/DtpExecutor.java
Patch:
@@ -12,7 +12,7 @@
 import com.dtp.core.support.wrapper.TaskWrapper;
 import com.google.common.collect.Lists;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.slf4j.MDC;
 
 import java.util.List;

File: extension/extension-limiter-redis/src/main/java/com/dtp/extension/limiter/redis/ratelimiter/NotifyRedisRateLimiterFilter.java
Patch:
@@ -5,7 +5,7 @@
 import com.dtp.core.notifier.filter.NotifyFilter;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 
 import javax.annotation.Resource;
 import java.util.List;

File: core/src/main/java/com/dtp/core/notifier/AbstractDtpNotifier.java
Patch:
@@ -4,6 +4,7 @@
 import cn.hutool.core.date.DateUtil;
 import com.dtp.common.em.NotifyItemEnum;
 import com.dtp.common.em.NotifyPlatformEnum;
+import com.dtp.common.entity.AlarmInfo;
 import com.dtp.common.entity.NotifyItem;
 import com.dtp.common.entity.NotifyPlatform;
 import com.dtp.common.entity.TpMainFields;
@@ -129,7 +130,7 @@ protected String buildAlarmContent(NotifyPlatform platform, NotifyItemEnum notif
                 alarmCounter.getLeft(),
                 alarmCounter.getMiddle(),
                 alarmCounter.getRight(),
-                Optional.ofNullable(context.getAlarmInfo().getLastAlarmTime()).orElse(UNKNOWN),
+                Optional.ofNullable(context.getAlarmInfo()).map(AlarmInfo::getLastAlarmTime).orElse(UNKNOWN),
                 DateUtil.now(),
                 getReceives(platform.getPlatform(), platform.getReceivers()),
                 Optional.ofNullable(MDC.get(TRACE_ID)).orElse(UNKNOWN),

File: extension/extension-notify-email/src/main/java/com/dtp/extension/notify/email/base/DtpEmailNotifier.java
Patch:
@@ -85,7 +85,7 @@ protected String buildAlarmContent(NotifyPlatform platform, NotifyItemEnum notif
         context.setVariable("taskCount", executor.getTaskCount());
         context.setVariable("completedTaskCount", executor.getCompletedTaskCount());
         context.setVariable("waitingTaskCount", executor.getQueue().size());
-        context.setVariable("queueType", executor.getQueue().getClass().getSimpleName());
+        context.setVariable("queueType", getQueueName(executor));
         context.setVariable("queueCapacity", getQueueCapacity(executor));
         context.setVariable("queueSize", executor.getQueue().size());
         context.setVariable("queueRemaining", executor.getQueue().remainingCapacity());
@@ -116,7 +116,7 @@ protected String buildNoticeContent(NotifyPlatform platform, TpMainFields oldFie
         context.setVariable("newIsAllowCoreThreadTimeOut", executor.allowsCoreThreadTimeOut());
         context.setVariable("oldKeepAliveTime", oldFields.getKeepAliveTime());
         context.setVariable("newKeepAliveTime", executor.getKeepAliveTime(TimeUnit.SECONDS));
-        context.setVariable("queueType", executor.getQueue().getClass().getSimpleName());
+        context.setVariable("queueType", getQueueName(executor));
         context.setVariable("oldQueueCapacity", oldFields.getQueueCapacity());
         context.setVariable("newQueueCapacity", getQueueCapacity(executor));
         context.setVariable("oldRejectType", oldFields.getRejectType());

File: test/test-core/src/test/java/com/dtp/test/core/notify/capture/CapturedBlockingQueueTest.java
Patch:
@@ -3,6 +3,7 @@
 import com.dtp.common.queue.VariableLinkedBlockingQueue;
 import com.dtp.core.notifier.capture.CapturedBlockingQueue;
 import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.RepeatedTest;
 import org.junit.jupiter.api.Test;
 
 import java.util.concurrent.BlockingQueue;
@@ -46,7 +47,7 @@ public void testTake() {
         Assertions.assertThrows(UnsupportedOperationException.class, capturedBlockingQueue::take);
     }
 
-    @Test
+    @RepeatedTest(100)
     public void testBlockingQueuePut() throws InterruptedException {
         final int capacity = 100;
         final int firstPutSize = 30;

File: test/test-core/src/test/java/com/dtp/test/core/notify/capture/CapturedExecutorTest.java
Patch:
@@ -8,6 +8,7 @@
 import com.dtp.core.thread.DtpExecutor;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.RepeatedTest;
 import org.junit.jupiter.api.Test;
 
 import java.util.concurrent.ThreadPoolExecutor;
@@ -96,7 +97,7 @@ public void testGetCompletedTaskCount() throws InterruptedException {
         threadPoolExecutor.shutdownNow();
     }
 
-    @Test
+    @RepeatedTest(50)
     public void testGetTaskCount() throws InterruptedException {
         ThreadPoolExecutor threadPoolExecutor = ThreadPoolCreator.createCommonFast("test");
 

File: test/test-core/src/test/java/com/dtp/test/core/notify/AbstractDtpNotifierTest.java
Patch:
@@ -109,4 +109,4 @@ public void testGetQueueName2() throws Exception {
 
         Assert.assertEquals(res, VARIABLE_LINKED_BLOCKING_QUEUE.getName());
     }
-}
\ No newline at end of file
+}

File: core/src/main/java/com/dtp/core/notifier/AbstractDtpNotifier.java
Patch:
@@ -4,6 +4,7 @@
 import cn.hutool.core.date.DateUtil;
 import com.dtp.common.em.NotifyItemEnum;
 import com.dtp.common.em.NotifyPlatformEnum;
+import com.dtp.common.entity.AlarmInfo;
 import com.dtp.common.entity.NotifyItem;
 import com.dtp.common.entity.NotifyPlatform;
 import com.dtp.common.entity.TpMainFields;
@@ -129,7 +130,7 @@ protected String buildAlarmContent(NotifyPlatform platform, NotifyItemEnum notif
                 alarmCounter.getLeft(),
                 alarmCounter.getMiddle(),
                 alarmCounter.getRight(),
-                Optional.ofNullable(context.getAlarmInfo().getLastAlarmTime()).orElse(UNKNOWN),
+                Optional.ofNullable(context.getAlarmInfo()).map(AlarmInfo::getLastAlarmTime).orElse(UNKNOWN),
                 DateUtil.now(),
                 getReceives(platform.getPlatform(), platform.getReceivers()),
                 Optional.ofNullable(MDC.get(TRACE_ID)).orElse(UNKNOWN),

File: extension/extension-notify-email/src/main/java/com/dtp/extension/notify/email/base/DtpEmailNotifier.java
Patch:
@@ -85,7 +85,7 @@ protected String buildAlarmContent(NotifyPlatform platform, NotifyItemEnum notif
         context.setVariable("taskCount", executor.getTaskCount());
         context.setVariable("completedTaskCount", executor.getCompletedTaskCount());
         context.setVariable("waitingTaskCount", executor.getQueue().size());
-        context.setVariable("queueType", executor.getQueue().getClass().getSimpleName());
+        context.setVariable("queueType", getQueueName(executor));
         context.setVariable("queueCapacity", getQueueCapacity(executor));
         context.setVariable("queueSize", executor.getQueue().size());
         context.setVariable("queueRemaining", executor.getQueue().remainingCapacity());
@@ -116,7 +116,7 @@ protected String buildNoticeContent(NotifyPlatform platform, TpMainFields oldFie
         context.setVariable("newIsAllowCoreThreadTimeOut", executor.allowsCoreThreadTimeOut());
         context.setVariable("oldKeepAliveTime", oldFields.getKeepAliveTime());
         context.setVariable("newKeepAliveTime", executor.getKeepAliveTime(TimeUnit.SECONDS));
-        context.setVariable("queueType", executor.getQueue().getClass().getSimpleName());
+        context.setVariable("queueType", getQueueName(executor));
         context.setVariable("oldQueueCapacity", oldFields.getQueueCapacity());
         context.setVariable("newQueueCapacity", getQueueCapacity(executor));
         context.setVariable("oldRejectType", oldFields.getRejectType());

File: test/test-core/src/test/java/com/dtp/test/core/notify/capture/CapturedBlockingQueueTest.java
Patch:
@@ -3,6 +3,7 @@
 import com.dtp.common.queue.VariableLinkedBlockingQueue;
 import com.dtp.core.notifier.capture.CapturedBlockingQueue;
 import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.RepeatedTest;
 import org.junit.jupiter.api.Test;
 
 import java.util.concurrent.BlockingQueue;
@@ -46,7 +47,7 @@ public void testTake() {
         Assertions.assertThrows(UnsupportedOperationException.class, capturedBlockingQueue::take);
     }
 
-    @Test
+    @RepeatedTest(100)
     public void testBlockingQueuePut() throws InterruptedException {
         final int capacity = 100;
         final int firstPutSize = 30;

File: test/test-core/src/test/java/com/dtp/test/core/notify/capture/CapturedExecutorTest.java
Patch:
@@ -8,6 +8,7 @@
 import com.dtp.core.thread.DtpExecutor;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.RepeatedTest;
 import org.junit.jupiter.api.Test;
 
 import java.util.concurrent.ThreadPoolExecutor;
@@ -96,7 +97,7 @@ public void testGetCompletedTaskCount() throws InterruptedException {
         threadPoolExecutor.shutdownNow();
     }
 
-    @Test
+    @RepeatedTest(50)
     public void testGetTaskCount() throws InterruptedException {
         ThreadPoolExecutor threadPoolExecutor = ThreadPoolCreator.createCommonFast("test");
 

File: core/src/main/java/com/dtp/core/support/ExecutorWrapper.java
Patch:
@@ -45,9 +45,11 @@ public ExecutorWrapper() {
 
     public ExecutorWrapper(DtpExecutor executor) {
         this.threadPoolName = executor.getThreadPoolName();
+        this.threadPoolAliasName = executor.getThreadPoolAliasName();
         this.executor = executor;
         this.notifyItems = executor.getNotifyItems();
         this.notifyEnabled = executor.isNotifyEnabled();
+        this.platformIds = executor.getPlatformIds();
     }
 
     public ExecutorWrapper(String threadPoolName, Executor executor) {

File: core/src/main/java/com/dtp/core/support/ExecutorWrapper.java
Patch:
@@ -45,9 +45,11 @@ public ExecutorWrapper() {
 
     public ExecutorWrapper(DtpExecutor executor) {
         this.threadPoolName = executor.getThreadPoolName();
+        this.threadPoolAliasName = executor.getThreadPoolAliasName();
         this.executor = executor;
         this.notifyItems = executor.getNotifyItems();
         this.notifyEnabled = executor.isNotifyEnabled();
+        this.platformIds = executor.getPlatformIds();
     }
 
     public ExecutorWrapper(String threadPoolName, Executor executor) {

File: common/src/main/java/com/dtp/common/entity/DtpExecutorProps.java
Patch:
@@ -20,7 +20,7 @@
 public class DtpExecutorProps extends TpExecutorProps {
 
     /**
-     * Executor type, used in create phase.
+     * Executor type, used in create phase, see {@link com.dtp.core.support.ExecutorType}
      */
     private String executorType;
 

File: core/src/main/java/com/dtp/core/context/BaseNotifyCtx.java
Patch:
@@ -21,7 +21,7 @@ public class BaseNotifyCtx {
     public BaseNotifyCtx() { }
 
     public BaseNotifyCtx(ExecutorWrapper wrapper, NotifyItem notifyItem) {
-        this.executorWrapper = wrapper;
+        this.executorWrapper = wrapper.clone();
         this.notifyItem = notifyItem;
     }
 

File: core/src/main/java/com/dtp/core/notify/alarm/AlarmCounter.java
Patch:
@@ -68,11 +68,11 @@ public static void incAlarmCounter(String threadPoolName, String notifyItemType)
 
     public static Triple<String, String, String> countStrRrq(String threadPoolName, ExecutorAdapter<?> executor) {
 
-        if (!(executor instanceof DtpExecutor)) {
+        if (!(executor.getOriginal() instanceof DtpExecutor)) {
             return new ImmutableTriple<>(DEFAULT_COUNT_STR, DEFAULT_COUNT_STR, DEFAULT_COUNT_STR);
         }
 
-        DtpExecutor dtpExecutor = (DtpExecutor) executor;
+        DtpExecutor dtpExecutor = (DtpExecutor) executor.getOriginal();
         String rejectCount = getCount(threadPoolName, REJECT.getValue()) + " / " + dtpExecutor.getRejectCount();
         String runTimeoutCount = getCount(threadPoolName, RUN_TIMEOUT.getValue()) + " / "
                 + dtpExecutor.getRunTimeoutCount().sum();

File: core/src/main/java/com/dtp/core/notify/manager/NotifyHelper.java
Patch:
@@ -86,6 +86,9 @@ public static Set<String> getAlarmKeys(NotifyItemEnum notifyItemEnum) {
     }
 
     public static Optional<NotifyItem> getNotifyItem(ExecutorWrapper executor, NotifyItemEnum notifyType) {
+        if (CollectionUtils.isEmpty(executor.getNotifyItems())) {
+            return Optional.empty();
+        }
         return executor.getNotifyItems().stream()
                 .filter(x -> notifyType.getValue().equalsIgnoreCase(x.getType()))
                 .findFirst();

File: core/src/main/java/com/dtp/core/thread/OrderedDtpExecutor.java
Patch:
@@ -78,7 +78,7 @@ public OrderedDtpExecutor(int corePoolSize,
                     RejectHandlerGetter.getProxy(handler)));
         }
     }
-    
+
     @Override
     public void execute(Runnable command) {
         execute(null, command);
@@ -115,7 +115,7 @@ public <T> Future<T> submit(Object arg, Callable<T> task) {
         return choose(arg).submit(task);
     }
     
-    protected DtpExecutor choose(Object arg) {
+    public DtpExecutor choose(Object arg) {
         int size = this.executors.size();
         if (size == 1) {
             return this.executors.get(0);

File: core/src/main/java/com/dtp/core/notify/alarm/AlarmCounter.java
Patch:
@@ -68,11 +68,11 @@ public static void incAlarmCounter(String threadPoolName, String notifyItemType)
 
     public static Triple<String, String, String> countStrRrq(String threadPoolName, ExecutorAdapter<?> executor) {
 
-        if (!(executor instanceof DtpExecutor)) {
+        if (!(executor.getOriginal() instanceof DtpExecutor)) {
             return new ImmutableTriple<>(DEFAULT_COUNT_STR, DEFAULT_COUNT_STR, DEFAULT_COUNT_STR);
         }
 
-        DtpExecutor dtpExecutor = (DtpExecutor) executor;
+        DtpExecutor dtpExecutor = (DtpExecutor) executor.getOriginal();
         String rejectCount = getCount(threadPoolName, REJECT.getValue()) + " / " + dtpExecutor.getRejectCount();
         String runTimeoutCount = getCount(threadPoolName, RUN_TIMEOUT.getValue()) + " / "
                 + dtpExecutor.getRunTimeoutCount().sum();

File: core/src/main/java/com/dtp/core/notify/capture/CapturedBlockingQueue.java
Patch:
@@ -80,5 +80,4 @@ public Runnable poll() {
     public Runnable peek() {
         throw new UnsupportedOperationException();
     }
-
-}
\ No newline at end of file
+}

File: core/src/main/java/com/dtp/core/notify/filter/AlarmBaseFilter.java
Patch:
@@ -39,7 +39,7 @@ public void doFilter(BaseNotifyCtx context, Invoker<BaseNotifyCtx> nextInvoker)
             return;
         }
 
-        if (!AlarmManager.checkThreshold(context)) {
+        if (!AlarmManager.checkThreshold(executorWrapper, context.getNotifyItemEnum(), notifyItem)) {
             return;
         }
         synchronized (SEND_LOCK) {

File: common/src/main/java/com/dtp/common/entity/DtpExecutorProps.java
Patch:
@@ -20,7 +20,7 @@
 public class DtpExecutorProps extends TpExecutorProps {
 
     /**
-     * Executor type, used in create phase.
+     * Executor type, used in create phase, see {@link com.dtp.core.support.ExecutorType}
      */
     private String executorType;
 

File: core/src/main/java/com/dtp/core/notify/filter/AlarmBaseFilter.java
Patch:
@@ -39,7 +39,7 @@ public void doFilter(BaseNotifyCtx context, Invoker<BaseNotifyCtx> nextInvoker)
             return;
         }
 
-        if (!AlarmManager.checkThreshold(executorWrapper, context.getNotifyItemEnum(), notifyItem)) {
+        if (!AlarmManager.checkThreshold(context)) {
             return;
         }
         synchronized (SEND_LOCK) {

File: common/src/main/java/com/dtp/common/constant/LarkNotifyConst.java
Patch:
@@ -47,7 +47,7 @@ private LarkNotifyConst() { }
      * lark alarm json str
      */
     public static final String LARK_ALARM_JSON_STR =
-            "{\"msg_type\":\"interactive\",\"card\":{\"config\":{\"wide_screen_mode\":true},\"header\":{\"template\":\"red\",\"title\":{\"tag\":\"plain_text\",\"content\":\"【报警】 动态线程池告警\"}},\"elements\":[{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**服务名称：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**实例信息：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**环境：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**线程池名称：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"alarmType **报警类型：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"threshold **报警阈值：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"corePoolSize **核心线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"maximumPoolSize **最大线程数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"poolSize **当前线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"activeCount **活跃线程数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**历史最大线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**任务总数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**执行完成任务数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**等待执行任务数：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueType **队列类型：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueCapacity **队列容量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueSize **队列任务数量：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueRemaining **队列剩余容量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"rejectType **拒绝策略：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"rejectCount **拒绝任务数量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"runTimeoutCount **执行超时任务数量：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueTimeoutCount **等待超时任务数量：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**上次报警时间：**\\n %s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**报警时间：**\\n %s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**接收人：**\\n %s\"}},{\"is_short\": true,\"text\": {\"tag\": \"lark_md\",\"content\": \"**tid：**\\n %s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**报警间隔：**\\n %ss\"}]}]}}";
+            "{\"msg_type\":\"interactive\",\"card\":{\"config\":{\"wide_screen_mode\":true},\"header\":{\"template\":\"red\",\"title\":{\"tag\":\"plain_text\",\"content\":\"【报警】 动态线程池告警\"}},\"elements\":[{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**服务名称：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**实例信息：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**环境：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**线程池名称：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"alarmType **报警类型：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"threshold **报警阈值：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"corePoolSize **核心线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"maximumPoolSize **最大线程数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"poolSize **当前线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"activeCount **活跃线程数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**历史最大线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**任务总数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**执行完成任务数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**等待执行任务数：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueType **队列类型：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueCapacity **队列容量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueSize **队列任务数量：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueRemaining **队列剩余容量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"rejectType **拒绝策略：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"rejectCount **拒绝任务数量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"runTimeoutCount **执行超时任务数量：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueTimeoutCount **等待超时任务数量：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**上次报警时间：**\\n %s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**报警时间：**\\n %s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**接收人：**\\n %s\"}},{\"is_short\": true,\"text\": {\"tag\": \"lark_md\",\"content\": \"**tid：**\\n %s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**报警间隔：**\\n %s\"}}]}]}}";
 
     /**
      * lark notice json str

File: common/src/main/java/com/dtp/common/constant/LarkNotifyConst.java
Patch:
@@ -47,7 +47,7 @@ private LarkNotifyConst() { }
      * lark alarm json str
      */
     public static final String LARK_ALARM_JSON_STR =
-            "{\"msg_type\":\"interactive\",\"card\":{\"config\":{\"wide_screen_mode\":true},\"header\":{\"template\":\"red\",\"title\":{\"tag\":\"plain_text\",\"content\":\"【报警】 动态线程池告警\"}},\"elements\":[{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**服务名称：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**实例信息：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**环境：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**线程池名称：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"alarmType **报警类型：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"threshold **报警阈值：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"corePoolSize **核心线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"maximumPoolSize **最大线程数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"poolSize **当前线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"activeCount **活跃线程数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**历史最大线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**任务总数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**执行完成任务数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**等待执行任务数：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueType **队列类型：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueCapacity **队列容量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueSize **队列任务数量：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueRemaining **队列剩余容量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"rejectType **拒绝策略：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"rejectCount **拒绝任务数量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"runTimeoutCount **执行超时任务数量：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueTimeoutCount **等待超时任务数量：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**上次报警时间：**\\n %s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**报警时间：**\\n %s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**接收人：**\\n %s\"}},{\"is_short\": true,\"text\": {\"tag\": \"lark_md\",\"content\": \"**tid：**\\n %s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**报警间隔：**\\n %ss\"}]}]}}";
+            "{\"msg_type\":\"interactive\",\"card\":{\"config\":{\"wide_screen_mode\":true},\"header\":{\"template\":\"red\",\"title\":{\"tag\":\"plain_text\",\"content\":\"【报警】 动态线程池告警\"}},\"elements\":[{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**服务名称：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**实例信息：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**环境：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**线程池名称：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"alarmType **报警类型：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"threshold **报警阈值：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"corePoolSize **核心线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"maximumPoolSize **最大线程数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"poolSize **当前线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"activeCount **活跃线程数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**历史最大线程数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**任务总数：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**执行完成任务数：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**等待执行任务数：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueType **队列类型：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueCapacity **队列容量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueSize **队列任务数量：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueRemaining **队列剩余容量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"rejectType **拒绝策略：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"rejectCount **拒绝任务数量：**\\n%s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"runTimeoutCount **执行超时任务数量：**\\n%s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"queueTimeoutCount **等待超时任务数量：**\\n%s\"}}]},{\"tag\":\"hr\"},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**上次报警时间：**\\n %s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**报警时间：**\\n %s\"}}]},{\"tag\":\"div\",\"fields\":[{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**接收人：**\\n %s\"}},{\"is_short\": true,\"text\": {\"tag\": \"lark_md\",\"content\": \"**tid：**\\n %s\"}},{\"is_short\":true,\"text\":{\"tag\":\"lark_md\",\"content\":\"**报警间隔：**\\n %s\"}}]}]}}";
 
     /**
      * lark notice json str

File: common/src/main/java/com/dtp/common/Version.java
Patch:
@@ -16,7 +16,7 @@ public final class Version {
 
     static {
         try {
-            version = getVersion();
+            version = version();
         } catch (Throwable e) {
             log.warn("no version number found");
         }

File: core/src/main/java/com/dtp/core/notify/manager/NoticeManager.java
Patch:
@@ -29,6 +29,7 @@ private NoticeManager() { }
 
     static {
         NOTICE_INVOKER_CHAIN = NotifyFilterBuilder.getCommonInvokerChain();
+        Runtime.getRuntime().addShutdownHook(new Thread(NOTICE_EXECUTOR::shutdown));
     }
 
     public static void doNoticeAsync(ExecutorWrapper executor, TpMainFields oldFields, List<String> diffKeys) {

File: core/src/main/java/com/dtp/core/handler/NotifierHandler.java
Patch:
@@ -31,7 +31,6 @@ public final class NotifierHandler {
     private static final Map<String, DtpNotifier> NOTIFIERS = new HashMap<>();
 
     private NotifierHandler() {
-        // 适配SPI
         ServiceLoader<DtpNotifier> loader = ServiceLoader.load(DtpNotifier.class);
         for (DtpNotifier notifier : loader) {
             NOTIFIERS.put(notifier.platform(), notifier);

File: core/src/main/java/com/dtp/core/reject/RejectedAware.java
Patch:
@@ -30,7 +30,7 @@ default void beforeReject(Runnable runnable, ThreadPoolExecutor executor, Logger
         if (executor instanceof DtpExecutor) {
             DtpExecutor dtpExecutor = (DtpExecutor) executor;
             dtpExecutor.incRejectCount(1);
-            AlarmManager.doAlarmAsync(dtpExecutor, REJECT);
+            AlarmManager.doAlarmAsync(dtpExecutor, REJECT, runnable);
 
             String taskName = (runnable instanceof NamedRunnable) ? ((NamedRunnable) runnable).getName() : null;
             log.warn("DynamicTp execute, thread pool is exhausted, tpName: {}, taskName: {}, traceId: {}, " +

File: core/src/main/java/com/dtp/core/thread/DtpExecutor.java
Patch:
@@ -184,7 +184,7 @@ protected void afterExecute(Runnable r, Throwable t) {
         long runTime = TimeUtil.currentTimeMillis() - runnable.getStartTime();
         if (runTime > runTimeout) {
             runTimeoutCount.increment();
-            AlarmManager.doAlarmAsync(this, RUN_TIMEOUT);
+            AlarmManager.doAlarmAsync(this, RUN_TIMEOUT, runnable);
             if (StringUtils.isNotBlank(runnable.getTaskName()) || StringUtils.isNotBlank(runnable.getTraceId())) {
                 log.warn("DynamicTp execute, run timeout, tpName: {}, taskName: {}, traceId: {}, runTime: {}ms",
                         this.getThreadPoolName(), runnable.getTaskName(), runnable.getTraceId(), runTime);

File: test/test-core/src/test/java/com/dtp/test/core/spring/PropertiesBinderTest.java
Patch:
@@ -40,7 +40,6 @@ void testBindDtpPropertiesWithMap() {
 
         DtpProperties dtpProperties = new DtpProperties();
         PropertiesBinder.bindDtpProperties(properties, dtpProperties);
-        Assertions.assertEquals(properties.get("spring.dynamic.tp.enabled"), dtpProperties.isEnabled());
         Assertions.assertEquals(properties.get("spring.dynamic.tp.executors[0].threadPoolName"),
                 dtpProperties.getExecutors().get(0).getThreadPoolName());
         Assertions.assertIterableEquals((List<String>) properties.get("spring.dynamic.tp.collectorTypes"),

File: starter/starter-adapter/starter-adapter-brpc/src/main/java/com/dtp/starter/adapter/brpc/autoconfigure/BrpcTpAutoConfiguration.java
Patch:
@@ -4,6 +4,7 @@
 import com.dtp.apapter.brpc.server.StarlightServerDtpAdapter;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
@@ -18,6 +19,7 @@
  */
 @Configuration
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 public class BrpcTpAutoConfiguration {
 
     @Bean

File: starter/starter-adapter/starter-adapter-common/src/main/java/com/dtp/starter/adapter/common/autoconfigure/AdapterCommonAutoConfiguration.java
Patch:
@@ -3,6 +3,8 @@
 import com.dtp.adapter.common.DtpAdapterListener;
 import com.dtp.common.properties.DtpProperties;
 import com.dtp.common.constant.DynamicTpConst;
+import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
@@ -19,6 +21,7 @@
 @Configuration
 @EnableConfigurationProperties(DtpProperties.class)
 @ConditionalOnProperty(name = DynamicTpConst.DTP_ENABLED_PROP, matchIfMissing = true, havingValue = "true")
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 public class AdapterCommonAutoConfiguration {
 
     @Bean

File: starter/starter-adapter/starter-adapter-dubbo/src/main/java/com/dtp/starter/adapter/dubbo/autoconfigure/AlibabaDubboTpAutoConfiguration.java
Patch:
@@ -4,6 +4,7 @@
 import com.dtp.starter.adapter.dubbo.autoconfigure.condition.ConditionOnAlibabaDubboApp;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -17,6 +18,7 @@
 @Configuration
 @ConditionOnAlibabaDubboApp
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 @SuppressWarnings("all")
 public class AlibabaDubboTpAutoConfiguration {
 

File: starter/starter-adapter/starter-adapter-dubbo/src/main/java/com/dtp/starter/adapter/dubbo/autoconfigure/ApacheDubboTpAutoConfiguration.java
Patch:
@@ -4,6 +4,7 @@
 import com.dtp.starter.adapter.dubbo.autoconfigure.condition.ConditionOnApacheDubboApp;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -17,6 +18,7 @@
 @Configuration
 @ConditionOnApacheDubboApp
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 @SuppressWarnings("all")
 public class ApacheDubboTpAutoConfiguration {
 

File: starter/starter-adapter/starter-adapter-grpc/src/main/java/com/dtp/starter/adapter/grpc/autoconfigure/GrpcTpAutoConfiguration.java
Patch:
@@ -3,6 +3,7 @@
 import com.dtp.adapter.grpc.GrpcDtpAdapter;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
@@ -16,6 +17,7 @@
  */
 @Configuration
 @ConditionalOnProperty(prefix = "grpc.server", value = {"port"})
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
 @SuppressWarnings("all")
 public class GrpcTpAutoConfiguration {

File: starter/starter-adapter/starter-adapter-hystrix/src/main/java/com/dtp/starter/adapter/hystrix/autoconfigure/HystrixTpAutoConfiguration.java
Patch:
@@ -3,6 +3,7 @@
 import com.dtp.adapter.hystrix.HystrixDtpAdapter;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
@@ -16,6 +17,7 @@
  */
 @Configuration
 @ConditionalOnClass(name = "com.netflix.hystrix.Hystrix")
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
 public class HystrixTpAutoConfiguration {
 

File: starter/starter-adapter/starter-adapter-motan/src/main/java/com/dtp/starter/adapter/motan/autoconfigure/MotanTpAutoConfiguration.java
Patch:
@@ -3,6 +3,7 @@
 import com.dtp.adapter.motan.MotanDtpAdapter;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
@@ -16,6 +17,7 @@
  */
 @Configuration
 @ConditionalOnClass(name = "com.weibo.api.motan.config.springsupport.ServiceConfigBean")
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
 public class MotanTpAutoConfiguration {
 

File: starter/starter-adapter/starter-adapter-okhttp3/src/main/java/com/dtp/starter/adapter/okhttp3/autoconfigure/Okhttp3TpAutoConfiguration.java
Patch:
@@ -3,6 +3,7 @@
 import com.dtp.adapter.okhttp3.Okhttp3DtpAdapter;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
@@ -16,6 +17,7 @@
  */
 @Configuration
 @ConditionalOnClass(name = "okhttp3.OkHttpClient")
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
 public class Okhttp3TpAutoConfiguration {
 

File: starter/starter-adapter/starter-adapter-rabbitmq/src/main/java/com/dtp/starter/adapter/rabbitmq/autoconfigure/RabbitMqTpAutoConfiguration.java
Patch:
@@ -3,6 +3,7 @@
 import com.dtp.adapter.rabbitmq.RabbitMqDtpAdapter;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
@@ -16,6 +17,7 @@
  */
 @Configuration
 @ConditionalOnProperty(prefix = "spring.rabbitmq", value = {"host"})
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
 @SuppressWarnings("all")
 public class RabbitMqTpAutoConfiguration {

File: starter/starter-adapter/starter-adapter-rocketmq/src/main/java/com/dtp/starter/adapter/rocketmq/autoconfigure/RocketMqTpAutoConfiguration.java
Patch:
@@ -3,6 +3,7 @@
 import com.dtp.adapter.rocketmq.RocketMqDtpAdapter;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
@@ -16,6 +17,7 @@
  */
 @Configuration
 @ConditionalOnProperty(prefix = "rocketmq", value = {"name-server"})
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
 @SuppressWarnings("all")
 public class RocketMqTpAutoConfiguration {

File: starter/starter-adapter/starter-adapter-rocketmq/src/main/java/com/dtp/starter/adapter/rocketmq/autoconfigure/StreamRocketMqTpAutoConfiguration.java
Patch:
@@ -3,6 +3,7 @@
 import com.dtp.adapter.rocketmq.StreamRocketMqDtpAdapter;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
@@ -16,6 +17,7 @@
  */
 @Configuration
 @ConditionalOnProperty(prefix = "spring.cloud.stream.rocketmq.binder", value = {"name-server"})
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
 @SuppressWarnings("all")
 public class StreamRocketMqTpAutoConfiguration {

File: starter/starter-adapter/starter-adapter-sofa/src/main/java/com/dtp/starter/adapter/sofa/autoconfigure/SofaTpAutoConfiguration.java
Patch:
@@ -3,6 +3,7 @@
 import com.dtp.adapter.sofa.SofaDtpAdapter;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
@@ -16,6 +17,7 @@
  */
 @Configuration
 @ConditionalOnClass(name = "com.alipay.sofa.rpc.config.UserThreadPoolManager")
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
 public class SofaTpAutoConfiguration {
 

File: starter/starter-adapter/starter-adapter-tars/src/main/java/com/dtp/starter/adapter/tars/autoconfigure/TarsTpAutoConfiguration.java
Patch:
@@ -3,6 +3,7 @@
 import com.dtp.adapter.tars.TarsDtpAdapter;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
@@ -17,6 +18,7 @@
 @Configuration
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
 @ConditionalOnClass(name = "com.qq.tars.client.Communicator")
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 public class TarsTpAutoConfiguration {
 
     @Bean

File: starter/starter-adapter/starter-adapter-webserver/src/main/java/com/dtp/starter/adapter/webserver/autocconfigure/WebServerTpAutoConfiguration.java
Patch:
@@ -8,6 +8,7 @@
 import com.dtp.starter.adapter.webserver.autocconfigure.condition.ConditionalOnUndertowWebServer;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -20,6 +21,7 @@
  */
 @Configuration
 @ConditionalOnWebApplication
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
 public class WebServerTpAutoConfiguration {
 

File: starter/starter-adapter/starter-adapter-brpc/src/main/java/com/dtp/starter/adapter/brpc/autoconfigure/BrpcTpAutoConfiguration.java
Patch:
@@ -4,6 +4,7 @@
 import com.dtp.apapter.brpc.server.StarlightServerDtpAdapter;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
@@ -18,6 +19,7 @@
  */
 @Configuration
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 public class BrpcTpAutoConfiguration {
 
     @Bean

File: starter/starter-adapter/starter-adapter-common/src/main/java/com/dtp/starter/adapter/common/autoconfigure/AdapterCommonAutoConfiguration.java
Patch:
@@ -3,6 +3,8 @@
 import com.dtp.adapter.common.DtpAdapterListener;
 import com.dtp.common.properties.DtpProperties;
 import com.dtp.common.constant.DynamicTpConst;
+import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
@@ -19,6 +21,7 @@
 @Configuration
 @EnableConfigurationProperties(DtpProperties.class)
 @ConditionalOnProperty(name = DynamicTpConst.DTP_ENABLED_PROP, matchIfMissing = true, havingValue = "true")
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 public class AdapterCommonAutoConfiguration {
 
     @Bean

File: starter/starter-adapter/starter-adapter-dubbo/src/main/java/com/dtp/starter/adapter/dubbo/autoconfigure/AlibabaDubboTpAutoConfiguration.java
Patch:
@@ -4,6 +4,7 @@
 import com.dtp.starter.adapter.dubbo.autoconfigure.condition.ConditionOnAlibabaDubboApp;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -17,6 +18,7 @@
 @Configuration
 @ConditionOnAlibabaDubboApp
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 @SuppressWarnings("all")
 public class AlibabaDubboTpAutoConfiguration {
 

File: starter/starter-adapter/starter-adapter-dubbo/src/main/java/com/dtp/starter/adapter/dubbo/autoconfigure/ApacheDubboTpAutoConfiguration.java
Patch:
@@ -4,6 +4,7 @@
 import com.dtp.starter.adapter.dubbo.autoconfigure.condition.ConditionOnApacheDubboApp;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -17,6 +18,7 @@
 @Configuration
 @ConditionOnApacheDubboApp
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 @SuppressWarnings("all")
 public class ApacheDubboTpAutoConfiguration {
 

File: starter/starter-adapter/starter-adapter-grpc/src/main/java/com/dtp/starter/adapter/grpc/autoconfigure/GrpcTpAutoConfiguration.java
Patch:
@@ -3,6 +3,7 @@
 import com.dtp.adapter.grpc.GrpcDtpAdapter;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
@@ -16,6 +17,7 @@
  */
 @Configuration
 @ConditionalOnProperty(prefix = "grpc.server", value = {"port"})
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
 @SuppressWarnings("all")
 public class GrpcTpAutoConfiguration {

File: starter/starter-adapter/starter-adapter-hystrix/src/main/java/com/dtp/starter/adapter/hystrix/autoconfigure/HystrixTpAutoConfiguration.java
Patch:
@@ -3,6 +3,7 @@
 import com.dtp.adapter.hystrix.HystrixDtpAdapter;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
@@ -16,6 +17,7 @@
  */
 @Configuration
 @ConditionalOnClass(name = "com.netflix.hystrix.Hystrix")
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
 public class HystrixTpAutoConfiguration {
 

File: starter/starter-adapter/starter-adapter-motan/src/main/java/com/dtp/starter/adapter/motan/autoconfigure/MotanTpAutoConfiguration.java
Patch:
@@ -3,6 +3,7 @@
 import com.dtp.adapter.motan.MotanDtpAdapter;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
@@ -16,6 +17,7 @@
  */
 @Configuration
 @ConditionalOnClass(name = "com.weibo.api.motan.config.springsupport.ServiceConfigBean")
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
 public class MotanTpAutoConfiguration {
 

File: starter/starter-adapter/starter-adapter-okhttp3/src/main/java/com/dtp/starter/adapter/okhttp3/autoconfigure/Okhttp3TpAutoConfiguration.java
Patch:
@@ -3,6 +3,7 @@
 import com.dtp.adapter.okhttp3.Okhttp3DtpAdapter;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
@@ -16,6 +17,7 @@
  */
 @Configuration
 @ConditionalOnClass(name = "okhttp3.OkHttpClient")
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
 public class Okhttp3TpAutoConfiguration {
 

File: starter/starter-adapter/starter-adapter-rabbitmq/src/main/java/com/dtp/starter/adapter/rabbitmq/autoconfigure/RabbitMqTpAutoConfiguration.java
Patch:
@@ -3,6 +3,7 @@
 import com.dtp.adapter.rabbitmq.RabbitMqDtpAdapter;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
@@ -16,6 +17,7 @@
  */
 @Configuration
 @ConditionalOnProperty(prefix = "spring.rabbitmq", value = {"host"})
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
 @SuppressWarnings("all")
 public class RabbitMqTpAutoConfiguration {

File: starter/starter-adapter/starter-adapter-rocketmq/src/main/java/com/dtp/starter/adapter/rocketmq/autoconfigure/RocketMqTpAutoConfiguration.java
Patch:
@@ -3,6 +3,7 @@
 import com.dtp.adapter.rocketmq.RocketMqDtpAdapter;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
@@ -16,6 +17,7 @@
  */
 @Configuration
 @ConditionalOnProperty(prefix = "rocketmq", value = {"name-server"})
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
 @SuppressWarnings("all")
 public class RocketMqTpAutoConfiguration {

File: starter/starter-adapter/starter-adapter-rocketmq/src/main/java/com/dtp/starter/adapter/rocketmq/autoconfigure/StreamRocketMqTpAutoConfiguration.java
Patch:
@@ -3,6 +3,7 @@
 import com.dtp.adapter.rocketmq.StreamRocketMqDtpAdapter;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
@@ -16,6 +17,7 @@
  */
 @Configuration
 @ConditionalOnProperty(prefix = "spring.cloud.stream.rocketmq.binder", value = {"name-server"})
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
 @SuppressWarnings("all")
 public class StreamRocketMqTpAutoConfiguration {

File: starter/starter-adapter/starter-adapter-sofa/src/main/java/com/dtp/starter/adapter/sofa/autoconfigure/SofaTpAutoConfiguration.java
Patch:
@@ -3,6 +3,7 @@
 import com.dtp.adapter.sofa.SofaDtpAdapter;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
@@ -16,6 +17,7 @@
  */
 @Configuration
 @ConditionalOnClass(name = "com.alipay.sofa.rpc.config.UserThreadPoolManager")
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
 public class SofaTpAutoConfiguration {
 

File: starter/starter-adapter/starter-adapter-tars/src/main/java/com/dtp/starter/adapter/tars/autoconfigure/TarsTpAutoConfiguration.java
Patch:
@@ -3,6 +3,7 @@
 import com.dtp.adapter.tars.TarsDtpAdapter;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
@@ -17,6 +18,7 @@
 @Configuration
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
 @ConditionalOnClass(name = "com.qq.tars.client.Communicator")
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 public class TarsTpAutoConfiguration {
 
     @Bean

File: starter/starter-adapter/starter-adapter-webserver/src/main/java/com/dtp/starter/adapter/webserver/autocconfigure/WebServerTpAutoConfiguration.java
Patch:
@@ -8,6 +8,7 @@
 import com.dtp.starter.adapter.webserver.autocconfigure.condition.ConditionalOnUndertowWebServer;
 import com.dtp.starter.common.autoconfigure.BaseBeanAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -20,6 +21,7 @@
  */
 @Configuration
 @ConditionalOnWebApplication
+@ConditionalOnBean({BaseBeanAutoConfiguration.class})
 @AutoConfigureAfter({BaseBeanAutoConfiguration.class})
 public class WebServerTpAutoConfiguration {
 

File: adapter/adapter-webserver/src/main/java/com/dtp/adapter/webserver/UndertowDtpAdapter.java
Patch:
@@ -10,6 +10,7 @@
 import io.undertow.Undertow;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServer;
 import org.springframework.boot.web.embedded.undertow.UndertowWebServer;
 import org.springframework.boot.web.server.WebServer;
 import org.xnio.Options;
@@ -41,8 +42,8 @@ public UndertowDtpAdapter() {
     @Override
     public ExecutorWrapper doGetExecutorWrapper(WebServer webServer) {
 
-        UndertowWebServer undertowWebServer = (UndertowWebServer) webServer;
-        val undertow = (Undertow) ReflectionUtil.getFieldValue(UndertowWebServer.class, "undertow", undertowWebServer);
+        UndertowServletWebServer undertowServletWebServer = (UndertowServletWebServer) webServer;
+        val undertow = (Undertow) ReflectionUtil.getFieldValue(UndertowWebServer.class, "undertow", undertowServletWebServer);
         if (Objects.isNull(undertow)) {
             return null;
         }

File: adapter/adapter-webserver/src/main/java/com/dtp/adapter/webserver/UndertowDtpAdapter.java
Patch:
@@ -10,6 +10,7 @@
 import io.undertow.Undertow;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServer;
 import org.springframework.boot.web.embedded.undertow.UndertowWebServer;
 import org.springframework.boot.web.server.WebServer;
 import org.xnio.Options;
@@ -41,8 +42,8 @@ public UndertowDtpAdapter() {
     @Override
     public ExecutorWrapper doGetExecutorWrapper(WebServer webServer) {
 
-        UndertowWebServer undertowWebServer = (UndertowWebServer) webServer;
-        val undertow = (Undertow) ReflectionUtil.getFieldValue(UndertowWebServer.class, "undertow", undertowWebServer);
+        UndertowServletWebServer undertowServletWebServer = (UndertowServletWebServer) webServer;
+        val undertow = (Undertow) ReflectionUtil.getFieldValue(UndertowWebServer.class, "undertow", undertowServletWebServer);
         if (Objects.isNull(undertow)) {
             return null;
         }

File: adapter/adapter-dubbo/src/main/java/com/dtp/adapter/dubbo/alibaba/AlibabaDubboDtpAdapter.java
Patch:
@@ -37,9 +37,9 @@ public void refresh(DtpProperties dtpProperties) {
     protected void initialize() {
         super.initialize();
         DataStore dataStore = ExtensionLoader.getExtensionLoader(DataStore.class).getDefaultExtension();
-        Map<String, Object> executors = new ConcurrentHashMap<>(dataStore.get(EXECUTOR_SERVICE_COMPONENT_KEY));
-        if (MapUtils.isNotEmpty(executors)) {
-            executors.forEach((k, v) -> {
+        Map<String, Object> executorMap = new ConcurrentHashMap<>(dataStore.get(EXECUTOR_SERVICE_COMPONENT_KEY));
+        if (MapUtils.isNotEmpty(executorMap)) {
+            executorMap.forEach((k, v) -> {
                 val name = genTpName(k);
                 val executorWrapper = new ExecutorWrapper(name, (ThreadPoolExecutor) v);
                 initNotifyItems(name, executorWrapper);

File: adapter/adapter-dubbo/src/main/java/com/dtp/adapter/dubbo/alibaba/AlibabaDubboDtpAdapter.java
Patch:
@@ -37,9 +37,9 @@ public void refresh(DtpProperties dtpProperties) {
     protected void initialize() {
         super.initialize();
         DataStore dataStore = ExtensionLoader.getExtensionLoader(DataStore.class).getDefaultExtension();
-        Map<String, Object> dubboExecutors = new ConcurrentHashMap<>(dataStore.get(EXECUTOR_SERVICE_COMPONENT_KEY));
-        if (MapUtils.isNotEmpty(dubboExecutors)) {
-            dubboExecutors.forEach((k, v) -> {
+        Map<String, Object> executorMap = new ConcurrentHashMap<>(dataStore.get(EXECUTOR_SERVICE_COMPONENT_KEY));
+        if (MapUtils.isNotEmpty(executorMap)) {
+            executorMap.forEach((k, v) -> {
                 val name = genTpName(k);
                 val executorWrapper = new ExecutorWrapper(name, (ThreadPoolExecutor) v);
                 initNotifyItems(name, executorWrapper);

File: adapter/adapter-dubbo/src/main/java/com/dtp/adapter/dubbo/alibaba/AlibabaDubboDtpAdapter.java
Patch:
@@ -37,9 +37,9 @@ public void refresh(DtpProperties dtpProperties) {
     protected void initialize() {
         super.initialize();
         DataStore dataStore = ExtensionLoader.getExtensionLoader(DataStore.class).getDefaultExtension();
-        Map<String, Object> executors = new ConcurrentHashMap<>(dataStore.get(EXECUTOR_SERVICE_COMPONENT_KEY));
-        if (MapUtils.isNotEmpty(executors)) {
-            executors.forEach((k, v) -> {
+        Map<String, Object> dubboExecutors = new ConcurrentHashMap<>(dataStore.get(EXECUTOR_SERVICE_COMPONENT_KEY));
+        if (MapUtils.isNotEmpty(dubboExecutors)) {
+            dubboExecutors.forEach((k, v) -> {
                 val name = genTpName(k);
                 val executorWrapper = new ExecutorWrapper(name, (ThreadPoolExecutor) v);
                 initNotifyItems(name, executorWrapper);

File: adapter/adapter-dubbo/src/main/java/com/dtp/adapter/dubbo/alibaba/AlibabaDubboDtpAdapter.java
Patch:
@@ -10,6 +10,7 @@
 import org.apache.commons.collections.MapUtils;
 
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ThreadPoolExecutor;
 
 import static com.alibaba.dubbo.common.Constants.EXECUTOR_SERVICE_COMPONENT_KEY;
@@ -36,7 +37,7 @@ public void refresh(DtpProperties dtpProperties) {
     protected void initialize() {
         super.initialize();
         DataStore dataStore = ExtensionLoader.getExtensionLoader(DataStore.class).getDefaultExtension();
-        Map<String, Object> executors = dataStore.get(EXECUTOR_SERVICE_COMPONENT_KEY);
+        Map<String, Object> executors = new ConcurrentHashMap<>(dataStore.get(EXECUTOR_SERVICE_COMPONENT_KEY));
         if (MapUtils.isNotEmpty(executors)) {
             executors.forEach((k, v) -> {
                 val name = genTpName(k);

File: adapter/adapter-dubbo/src/main/java/com/dtp/adapter/dubbo/alibaba/AlibabaDubboDtpAdapter.java
Patch:
@@ -10,6 +10,7 @@
 import org.apache.commons.collections.MapUtils;
 
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ThreadPoolExecutor;
 
 import static com.alibaba.dubbo.common.Constants.EXECUTOR_SERVICE_COMPONENT_KEY;
@@ -36,7 +37,7 @@ public void refresh(DtpProperties dtpProperties) {
     protected void initialize() {
         super.initialize();
         DataStore dataStore = ExtensionLoader.getExtensionLoader(DataStore.class).getDefaultExtension();
-        Map<String, Object> executors = dataStore.get(EXECUTOR_SERVICE_COMPONENT_KEY);
+        Map<String, Object> executors = new ConcurrentHashMap<>(dataStore.get(EXECUTOR_SERVICE_COMPONENT_KEY));
         if (MapUtils.isNotEmpty(executors)) {
             executors.forEach((k, v) -> {
                 val name = genTpName(k);

File: adapter/adapter-webserver/src/main/java/com/dtp/adapter/webserver/UndertowDtpAdapter.java
Patch:
@@ -126,7 +126,7 @@ private void doRefresh(XnioWorker xnioWorker, SimpleTpProperties properties) {
                     xnioWorker.setOption(Options.WORKER_TASK_CORE_THREADS, properties.getCorePoolSize());
                 }
             }
-            int keepAlive = properties.getKeepAliveTime() * 1000;
+            int keepAlive = (int)properties.getKeepAliveTime() * 1000;
             if (!Objects.equals(xnioWorker.getOption(Options.WORKER_TASK_KEEPALIVE), keepAlive)) {
                 xnioWorker.setOption(Options.WORKER_TASK_KEEPALIVE, keepAlive);
             }

File: common/src/main/java/com/dtp/common/properties/SimpleTpProperties.java
Patch:
@@ -41,7 +41,7 @@ public class SimpleTpProperties {
      * this is the maximum time that excess idle threads
      * will wait for new tasks before terminating.
      */
-    private int keepAliveTime = 60;
+    private long keepAliveTime = 60;
 
     /**
      * Timeout unit.

File: adapter/adapter-webserver/src/main/java/com/dtp/adapter/webserver/UndertowDtpAdapter.java
Patch:
@@ -126,7 +126,7 @@ private void doRefresh(XnioWorker xnioWorker, SimpleTpProperties properties) {
                     xnioWorker.setOption(Options.WORKER_TASK_CORE_THREADS, properties.getCorePoolSize());
                 }
             }
-            int keepAlive = properties.getKeepAliveTime() * 1000;
+            int keepAlive = (int)properties.getKeepAliveTime() * 1000;
             if (!Objects.equals(xnioWorker.getOption(Options.WORKER_TASK_KEEPALIVE), keepAlive)) {
                 xnioWorker.setOption(Options.WORKER_TASK_KEEPALIVE, keepAlive);
             }

File: common/src/main/java/com/dtp/common/properties/SimpleTpProperties.java
Patch:
@@ -41,7 +41,7 @@ public class SimpleTpProperties {
      * this is the maximum time that excess idle threads
      * will wait for new tasks before terminating.
      */
-    private int keepAliveTime = 60;
+    private long keepAliveTime = 60;
 
     /**
      * Timeout unit.

File: adapter/adapter-dubbo/src/main/java/com/dtp/adapter/dubbo/apache/ApacheDubboDtpAdapter.java
Patch:
@@ -49,7 +49,7 @@ protected void initialize() {
                 return;
             }
             Map<String, Object> executorMap = dataStore.get(EXECUTOR_SERVICE_COMPONENT_KEY);
-            if (MapUtil.isNotEmpty(executors)) {
+            if (MapUtil.isNotEmpty(executorMap)) {
                 executorMap.forEach((k, v) -> doInit(k, (ThreadPoolExecutor) v));
             }
             log.info("DynamicTp adapter, apache dubbo provider executors init end, executors: {}", executors);

File: adapter/adapter-webserver/src/main/java/com/dtp/adapter/webserver/TomcatDtpAdapter.java
Patch:
@@ -105,7 +105,7 @@ private void doRefresh(ThreadPoolExecutor executor, SimpleTpProperties propertie
             }
         }
 
-        if (!Objects.equals(executor.getKeepAliveTime(properties.getUnit()), properties.getKeepAliveTime())) {
+        if (executor.getKeepAliveTime(properties.getUnit()) != properties.getKeepAliveTime()) {
             executor.setKeepAliveTime(properties.getKeepAliveTime(), properties.getUnit());
         }
     }

File: adapter/adapter-dubbo/src/main/java/com/dtp/adapter/dubbo/apache/ApacheDubboDtpAdapter.java
Patch:
@@ -49,7 +49,7 @@ protected void initialize() {
                 return;
             }
             Map<String, Object> executorMap = dataStore.get(EXECUTOR_SERVICE_COMPONENT_KEY);
-            if (MapUtil.isNotEmpty(executors)) {
+            if (MapUtil.isNotEmpty(executorMap)) {
                 executorMap.forEach((k, v) -> doInit(k, (ThreadPoolExecutor) v));
             }
             log.info("DynamicTp adapter, apache dubbo provider executors init end, executors: {}", executors);

File: adapter/adapter-webserver/src/main/java/com/dtp/adapter/webserver/TomcatDtpAdapter.java
Patch:
@@ -105,7 +105,7 @@ private void doRefresh(ThreadPoolExecutor executor, SimpleTpProperties propertie
             }
         }
 
-        if (!Objects.equals(executor.getKeepAliveTime(properties.getUnit()), properties.getKeepAliveTime())) {
+        if (executor.getKeepAliveTime(properties.getUnit()) != properties.getKeepAliveTime()) {
             executor.setKeepAliveTime(properties.getKeepAliveTime(), properties.getUnit());
         }
     }

File: common/src/main/java/com/dtp/common/config/SimpleTpProperties.java
Patch:
@@ -1,7 +1,7 @@
 package com.dtp.common.config;
 
 import com.dtp.common.dto.NotifyItem;
-import com.dtp.common.em.NotifyTypeEnum;
+import com.dtp.common.em.NotifyItemEnum;
 import lombok.Data;
 
 import java.util.List;
@@ -49,7 +49,7 @@ public class SimpleTpProperties {
     private TimeUnit unit = TimeUnit.SECONDS;
 
     /**
-     * Notify items, see {@link NotifyTypeEnum}
+     * Notify items, see {@link NotifyItemEnum}
      */
     private List<NotifyItem> notifyItems;
 }

File: common/src/main/java/com/dtp/common/config/ThreadPoolProperties.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.dtp.common.constant.DynamicTpConst;
 import com.dtp.common.dto.NotifyItem;
-import com.dtp.common.em.NotifyTypeEnum;
+import com.dtp.common.em.NotifyItemEnum;
 import com.dtp.common.em.QueueTypeEnum;
 import com.dtp.common.em.RejectedTypeEnum;
 import lombok.Data;
@@ -93,7 +93,7 @@ public class ThreadPoolProperties {
     private String threadNamePrefix = "dynamic-tp";
 
     /**
-     * Notify items, see {@link NotifyTypeEnum}
+     * Notify items, see {@link NotifyItemEnum}
      */
     private List<NotifyItem> notifyItems;
 

File: common/src/main/java/com/dtp/common/dto/AlarmInfo.java
Patch:
@@ -1,7 +1,7 @@
 package com.dtp.common.dto;
 
 import cn.hutool.core.date.DateUtil;
-import com.dtp.common.em.NotifyTypeEnum;
+import com.dtp.common.em.NotifyItemEnum;
 import lombok.Builder;
 import lombok.Data;
 
@@ -17,7 +17,7 @@
 @Builder
 public class AlarmInfo {
 
-    private NotifyTypeEnum type;
+    private NotifyItemEnum notifyItem;
 
     private String lastAlarmTime;
 

File: common/src/main/java/com/dtp/common/dto/ExecutorWrapper.java
Patch:
@@ -1,6 +1,6 @@
 package com.dtp.common.dto;
 
-import com.dtp.common.em.NotifyTypeEnum;
+import com.dtp.common.em.NotifyItemEnum;
 import lombok.Data;
 
 import java.util.List;
@@ -22,7 +22,7 @@ public class ExecutorWrapper {
     private String threadPoolAliasName;
 
     /**
-     * Notify items, see {@link NotifyTypeEnum}.
+     * Notify items, see {@link NotifyItemEnum}.
      */
     private List<NotifyItem> notifyItems;
 

File: core/src/main/java/com/dtp/core/adapter/DtpAdapterListener.java
Patch:
@@ -15,7 +15,7 @@
 import org.springframework.lang.NonNull;
 import org.springframework.util.CollectionUtils;
 
-import static com.dtp.common.constant.DynamicTpConst.SCHEDULE_ALARM_TYPES;
+import static com.dtp.common.constant.DynamicTpConst.SCHEDULE_NOTIFY_ITEMS;
 import static com.dtp.core.notify.manager.AlarmManager.doAlarm;
 
 /**
@@ -89,7 +89,7 @@ protected void doAlarmCheck(DtpProperties dtpProperties) {
         }
         handlerMap.forEach((k, v) -> {
             val executorWrapper = v.getExecutorWrappers();
-            executorWrapper.forEach((kk, vv) -> AlarmManager.triggerAlarm(() -> doAlarm(vv, SCHEDULE_ALARM_TYPES)));
+            executorWrapper.forEach((kk, vv) -> AlarmManager.triggerAlarm(() -> doAlarm(vv, SCHEDULE_NOTIFY_ITEMS)));
         });
     }
 }
\ No newline at end of file

File: core/src/main/java/com/dtp/core/context/AlarmCtx.java
Patch:
@@ -3,7 +3,6 @@
 import com.dtp.common.dto.AlarmInfo;
 import com.dtp.common.dto.ExecutorWrapper;
 import com.dtp.common.dto.NotifyItem;
-import com.dtp.common.em.NotifyTypeEnum;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 
@@ -19,7 +18,7 @@ public class AlarmCtx extends BaseNotifyCtx {
 
     private AlarmInfo alarmInfo;
 
-    public AlarmCtx(ExecutorWrapper wrapper, NotifyItem notifyItem, NotifyTypeEnum notifyType) {
-        super(wrapper, notifyItem, notifyType);
+    public AlarmCtx(ExecutorWrapper wrapper, NotifyItem notifyItem) {
+        super(wrapper, notifyItem);
     }
 }

File: core/src/main/java/com/dtp/core/handler/NotifierHandler.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.dtp.common.dto.DtpMainProp;
 import com.dtp.common.dto.NotifyItem;
-import com.dtp.common.em.NotifyTypeEnum;
+import com.dtp.common.em.NotifyItemEnum;
 import com.dtp.core.context.DtpNotifyCtxHolder;
 import com.dtp.core.notify.DtpDingNotifier;
 import com.dtp.core.notify.DtpLarkNotifier;
@@ -58,14 +58,14 @@ public void sendNotice(DtpMainProp prop, List<String> diffs) {
         }
     }
 
-    public void sendAlarm(NotifyTypeEnum notifyType) {
+    public void sendAlarm(NotifyItemEnum notifyItemEnum) {
 
         try {
             NotifyItem notifyItem = DtpNotifyCtxHolder.get().getNotifyItem();
             for (String platform : notifyItem.getPlatforms()) {
                 DtpNotifier notifier = NOTIFIERS.get(platform.toLowerCase());
                 if (notifier != null) {
-                    notifier.sendAlarmMsg(notifyType);
+                    notifier.sendAlarmMsg(notifyItemEnum);
                 }
             }
         } finally {

File: core/src/main/java/com/dtp/core/monitor/DtpMonitor.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
-import static com.dtp.common.constant.DynamicTpConst.SCHEDULE_ALARM_TYPES;
+import static com.dtp.common.constant.DynamicTpConst.SCHEDULE_NOTIFY_ITEMS;
 import static com.dtp.core.notify.manager.AlarmManager.doAlarm;
 
 /**
@@ -75,7 +75,7 @@ private void collect(List<String> dtpNames, List<String> commonNames) {
     private void checkAlarm(List<String> dtpNames) {
         dtpNames.forEach(x -> {
             DtpExecutor executor = DtpRegistry.getDtpExecutor(x);
-            AlarmManager.triggerAlarm(() -> doAlarm(executor, SCHEDULE_ALARM_TYPES));
+            AlarmManager.triggerAlarm(() -> doAlarm(executor, SCHEDULE_NOTIFY_ITEMS));
         });
         publishAlarmCheckEvent();
     }

File: core/src/main/java/com/dtp/core/notify/alarm/AlarmLimiter.java
Patch:
@@ -1,7 +1,7 @@
 package com.dtp.core.notify.alarm;
 
 import com.dtp.common.dto.NotifyItem;
-import com.dtp.common.em.NotifyTypeEnum;
+import com.dtp.common.em.NotifyItemEnum;
 import com.google.common.cache.Cache;
 import com.google.common.cache.CacheBuilder;
 import org.apache.commons.lang3.StringUtils;
@@ -23,7 +23,7 @@ public class AlarmLimiter {
     private AlarmLimiter() {}
 
     public static void initAlarmLimiter(String threadPoolName, NotifyItem notifyItem) {
-        if (NotifyTypeEnum.CHANGE.getValue().equalsIgnoreCase(notifyItem.getType())) {
+        if (NotifyItemEnum.CHANGE.getValue().equalsIgnoreCase(notifyItem.getType())) {
             return;
         }
 

File: core/src/main/java/com/dtp/core/notify/invoker/AlarmInvoker.java
Patch:
@@ -3,6 +3,7 @@
 import com.dtp.common.ApplicationContextHolder;
 import com.dtp.common.config.DtpProperties;
 import com.dtp.common.dto.AlarmInfo;
+import com.dtp.common.em.NotifyItemEnum;
 import com.dtp.common.pattern.filter.Invoker;
 import com.dtp.core.context.AlarmCtx;
 import com.dtp.core.context.BaseNotifyCtx;
@@ -24,16 +25,16 @@ public void invoke(BaseNotifyCtx context) {
 
         AlarmCtx alarmCtx = (AlarmCtx) context;
         val executorWrapper = alarmCtx.getExecutorWrapper();
-        val notifyType = alarmCtx.getNotifyType();
         val notifyItem = alarmCtx.getNotifyItem();
+        val notifyItemEnum = NotifyItemEnum.of(notifyItem.getType());
 
         DtpProperties dtpProperties = ApplicationContextHolder.getBean(DtpProperties.class);
         AlarmInfo alarmInfo = AlarmCounter.getAlarmInfo(executorWrapper.getThreadPoolName(), notifyItem.getType());
         context.setPlatforms(dtpProperties.getPlatforms());
         alarmCtx.setAlarmInfo(alarmInfo);
 
         DtpNotifyCtxHolder.set(context);
-        NotifierHandler.getInstance().sendAlarm(notifyType);
+        NotifierHandler.getInstance().sendAlarm(notifyItemEnum);
         AlarmCounter.reset(executorWrapper.getThreadPoolName(), notifyItem.getType());
     }
 }

File: core/src/main/java/com/dtp/core/notify/manager/NotifyFilterBuilder.java
Patch:
@@ -1,6 +1,7 @@
 package com.dtp.core.notify.manager;
 
 import com.dtp.common.ApplicationContextHolder;
+import com.dtp.common.em.NotifyTypeEnum;
 import com.dtp.common.pattern.filter.Filter;
 import com.dtp.common.pattern.filter.FilterChain;
 import com.dtp.common.pattern.filter.FilterChainFactory;
@@ -33,6 +34,7 @@ public static FilterChain<BaseNotifyCtx> getAlarmNoticeFilter() {
         Collection<NotifyFilter> alarmNoticeFilters = Lists.newArrayList(filters.values());
         alarmNoticeFilters.add(new AlarmBaseFilter());
         alarmNoticeFilters = alarmNoticeFilters.stream()
+                .filter(x -> x.supports(NotifyTypeEnum.ALARM))
                 .sorted(Comparator.comparing(Filter::getOrder))
                 .collect(Collectors.toList());
         return FilterChainFactory.buildFilterChain(new AlarmInvoker(),
@@ -43,6 +45,7 @@ public static FilterChain<BaseNotifyCtx> getCommonNoticeFilter() {
         val filters = ApplicationContextHolder.getBeansOfType(NotifyFilter.class);
         Collection<NotifyFilter> commonNoticeFilters = Lists.newArrayList(filters.values());
         commonNoticeFilters = commonNoticeFilters.stream()
+                .filter(x -> x.supports(NotifyTypeEnum.COMMON))
                 .sorted(Comparator.comparing(Filter::getOrder))
                 .collect(Collectors.toList());
         return FilterChainFactory.buildFilterChain(new NoticeInvoker(),

File: core/src/main/java/com/dtp/core/reject/RejectedAware.java
Patch:
@@ -5,7 +5,7 @@
 
 import java.util.concurrent.ThreadPoolExecutor;
 
-import static com.dtp.common.em.NotifyTypeEnum.REJECT;
+import static com.dtp.common.em.NotifyItemEnum.REJECT;
 
 /**
  * RejectedAware related

File: core/src/main/java/com/dtp/core/support/ThreadPoolBuilder.java
Patch:
@@ -5,7 +5,7 @@
 import com.alibaba.ttl.threadpool.TtlExecutors;
 import com.dtp.common.constant.DynamicTpConst;
 import com.dtp.common.dto.NotifyItem;
-import com.dtp.common.em.NotifyTypeEnum;
+import com.dtp.common.em.NotifyItemEnum;
 import com.dtp.common.em.QueueTypeEnum;
 import com.dtp.common.em.RejectedTypeEnum;
 import com.dtp.common.queue.VariableLinkedBlockingQueue;
@@ -133,7 +133,7 @@ public class ThreadPoolBuilder {
     private final List<TaskWrapper> taskWrappers = Lists.newArrayList();
 
     /**
-     * Notify items, see {@link NotifyTypeEnum}
+     * Notify items, see {@link NotifyItemEnum}
      */
     private List<NotifyItem> notifyItems = NotifyItem.getAllNotifyItems();
 

File: extension/extension-limiter-redis/src/main/java/com/dtp/extension/limiter/redis/ratelimiter/NotifyRedisRateLimiterFilter.java
Patch:
@@ -31,7 +31,7 @@ public int getOrder() {
 
     @Override
     public void doFilter(BaseNotifyCtx context, Invoker<BaseNotifyCtx> nextFilter) {
-        String notifyName = context.getExecutorWrapper().getThreadPoolName() + ":" + context.getNotifyType().getValue();
+        String notifyName = context.getExecutorWrapper().getThreadPoolName() + ":" + context.getNotifyItemEnum().getValue();
         boolean checkResult = check(notifyName, context.getNotifyItem().getClusterLimit(),
                 context.getNotifyItem().getInterval());
         if (checkResult) {

File: core/src/main/java/com/dtp/core/adapter/AbstractDtpAdapter.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.concurrent.ThreadPoolExecutor;
 
 import static com.dtp.common.constant.DynamicTpConst.PROPERTIES_CHANGE_SHOW_STYLE;
-import static com.dtp.common.dto.NotifyItem.mergeAllNotifyItems;
+import static com.dtp.common.dto.NotifyItem.mergeSimpleNotifyItems;
 import static java.util.stream.Collectors.toList;
 
 /**
@@ -162,7 +162,7 @@ private void doRefresh(ExecutorWrapper executorWrapper,
         }
 
         // update notify items
-        val allNotifyItems = mergeAllNotifyItems(properties.getNotifyItems());
+        val allNotifyItems = mergeSimpleNotifyItems(properties.getNotifyItems());
         NotifyHelper.fillPlatforms(platforms, allNotifyItems);
         NotifyHelper.initAlarm(executorWrapper.getThreadPoolName(), executorWrapper.getNotifyItems(), allNotifyItems);
         executorWrapper.setNotifyItems(allNotifyItems);

File: core/src/main/java/com/dtp/core/adapter/DtpAdapterListener.java
Patch:
@@ -63,7 +63,7 @@ protected void doCollect(DtpProperties dtpProperties) {
             return;
         }
         handlerMap.forEach((k, v) -> v.getMultiPoolStats().forEach(ps ->
-                CollectorHandler.getInstance().collect(ps, dtpProperties.getCollectorType())));
+                CollectorHandler.getInstance().collect(ps, dtpProperties.getCollectorTypes())));
     }
 
     /**

File: core/src/main/java/com/dtp/core/monitor/DtpMonitor.java
Patch:
@@ -82,7 +82,7 @@ private void checkAlarm(List<String> dtpNames) {
 
     private void doCollect(ThreadPoolStats threadPoolStats) {
         try {
-            CollectorHandler.getInstance().collect(threadPoolStats, dtpProperties.getCollectorType());
+            CollectorHandler.getInstance().collect(threadPoolStats, dtpProperties.getCollectorTypes());
         } catch (Exception e) {
             log.error("DynamicTp monitor, metrics collect error.", e);
         }

File: core/src/main/java/com/dtp/core/monitor/collector/InternalLogCollector.java
Patch:
@@ -1,5 +1,6 @@
 package com.dtp.core.monitor.collector;
 
+import cn.hutool.json.JSONUtil;
 import com.dtp.common.dto.ThreadPoolStats;
 import com.dtp.common.em.CollectorTypeEnum;
 import lombok.extern.slf4j.Slf4j;
@@ -12,11 +13,11 @@ public class InternalLogCollector extends AbstractCollector {
 
     @Override
     public void collect(ThreadPoolStats poolStats) {
-        log.info("dynamic.tp metrics: {}", poolStats);
+        log.info("dynamic.tp metrics: {}", JSONUtil.toJsonStr(poolStats));
     }
 
     @Override
     public String type() {
-        return CollectorTypeEnum.INTERNAL_LOGGING.name();
+        return CollectorTypeEnum.INTERNAL_LOGGING.name().toLowerCase();
     }
 }

File: core/src/main/java/com/dtp/core/monitor/collector/LogCollector.java
Patch:
@@ -27,6 +27,6 @@ public void collect(ThreadPoolStats threadPoolStats) {
 
     @Override
     public String type() {
-        return CollectorTypeEnum.LOGGING.name();
+        return CollectorTypeEnum.LOGGING.name().toLowerCase();
     }
 }

File: core/src/main/java/com/dtp/core/monitor/collector/MicroMeterCollector.java
Patch:
@@ -47,7 +47,7 @@ public void collect(ThreadPoolStats threadPoolStats) {
 
     @Override
     public String type() {
-        return CollectorTypeEnum.MICROMETER.name();
+        return CollectorTypeEnum.MICROMETER.name().toLowerCase();
     }
 
     public void gauge(ThreadPoolStats poolStats) {

File: adapter/adapter-webserver/src/main/java/com/dtp/adapter/webserver/AbstractWebServerDtpAdapter.java
Patch:
@@ -8,8 +8,8 @@
 import com.google.common.collect.Lists;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.boot.web.context.WebServerApplicationContext;
+import org.springframework.boot.web.context.WebServerInitializedEvent;
 import org.springframework.boot.web.server.WebServer;
-import org.springframework.boot.web.servlet.context.ServletWebServerInitializedEvent;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.ApplicationListener;
 
@@ -23,12 +23,12 @@
  */
 @Slf4j
 public abstract class AbstractWebServerDtpAdapter implements
-        DtpAdapter, ApplicationListener<ServletWebServerInitializedEvent> {
+        DtpAdapter, ApplicationListener<WebServerInitializedEvent> {
 
     protected ExecutorWrapper executorWrapper;
 
     @Override
-    public void onApplicationEvent(ServletWebServerInitializedEvent event) {
+    public void onApplicationEvent(WebServerInitializedEvent event) {
         try {
             DtpProperties dtpProperties = ApplicationContextHolder.getBean(DtpProperties.class);
             initialize();

File: adapter/adapter-webserver/src/main/java/com/dtp/adapter/webserver/AbstractWebServerDtpAdapter.java
Patch:
@@ -8,8 +8,8 @@
 import com.google.common.collect.Lists;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.boot.web.context.WebServerApplicationContext;
+import org.springframework.boot.web.context.WebServerInitializedEvent;
 import org.springframework.boot.web.server.WebServer;
-import org.springframework.boot.web.servlet.context.ServletWebServerInitializedEvent;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.ApplicationListener;
 
@@ -23,12 +23,12 @@
  */
 @Slf4j
 public abstract class AbstractWebServerDtpAdapter implements
-        DtpAdapter, ApplicationListener<ServletWebServerInitializedEvent> {
+        DtpAdapter, ApplicationListener<WebServerInitializedEvent> {
 
     protected ExecutorWrapper executorWrapper;
 
     @Override
-    public void onApplicationEvent(ServletWebServerInitializedEvent event) {
+    public void onApplicationEvent(WebServerInitializedEvent event) {
         try {
             DtpProperties dtpProperties = ApplicationContextHolder.getBean(DtpProperties.class);
             initialize();

File: adapter/adapter-common/src/main/java/com/dtp/adapter/common/AbstractDtpHandler.java
Patch:
@@ -1,4 +1,4 @@
-package com.dtp.adapter.dubbo.common;
+package com.dtp.adapter.common;
 
 import cn.hutool.core.collection.CollUtil;
 import com.dtp.common.ApplicationContextHolder;

File: adapter/adapter-common/src/main/java/com/dtp/adapter/common/DtpHandleListener.java
Patch:
@@ -1,4 +1,4 @@
-package com.dtp.adapter.dubbo.common;
+package com.dtp.adapter.common;
 
 import com.dtp.common.config.DtpProperties;
 import com.dtp.common.event.CollectEvent;

File: adapter/adapter-common/src/main/java/com/dtp/adapter/common/DtpHandler.java
Patch:
@@ -1,4 +1,4 @@
-package com.dtp.adapter.dubbo.common;
+package com.dtp.adapter.common;
 
 import cn.hutool.core.map.MapUtil;
 import com.dtp.common.config.DtpProperties;

File: adapter/adapter-dubbo/src/main/java/com/dtp/adapter/dubbo/alibaba/AlibabaDubboEventService.java
Patch:
@@ -2,8 +2,8 @@
 
 
 import com.dtp.adapter.dubbo.alibaba.handler.AlibabaDubboDtpHandler;
-import com.dtp.adapter.dubbo.common.DtpHandleListener;
-import com.dtp.adapter.dubbo.common.DtpHandler;
+import com.dtp.adapter.common.DtpHandleListener;
+import com.dtp.adapter.common.DtpHandler;
 import com.dtp.common.ApplicationContextHolder;
 import com.dtp.common.config.DtpProperties;
 import com.dtp.core.handler.CollectorHandler;

File: adapter/adapter-dubbo/src/main/java/com/dtp/adapter/dubbo/alibaba/handler/AlibabaDubboDtpHandler.java
Patch:
@@ -4,7 +4,7 @@
 import cn.hutool.core.map.MapUtil;
 import com.alibaba.dubbo.common.extension.ExtensionLoader;
 import com.alibaba.dubbo.common.store.DataStore;
-import com.dtp.adapter.dubbo.common.AbstractDtpHandler;
+import com.dtp.adapter.common.AbstractDtpHandler;
 import com.dtp.common.config.DtpProperties;
 import com.dtp.common.config.SimpleTpProperties;
 import com.dtp.common.util.StreamUtil;

File: adapter/adapter-dubbo/src/main/java/com/dtp/adapter/dubbo/apache/ApacheDubboEventService.java
Patch:
@@ -1,8 +1,8 @@
 package com.dtp.adapter.dubbo.apache;
 
 import com.dtp.adapter.dubbo.apache.handler.ApacheDubboDtpHandler;
-import com.dtp.adapter.dubbo.common.DtpHandleListener;
-import com.dtp.adapter.dubbo.common.DtpHandler;
+import com.dtp.adapter.common.DtpHandleListener;
+import com.dtp.adapter.common.DtpHandler;
 import com.dtp.common.ApplicationContextHolder;
 import com.dtp.common.config.DtpProperties;
 import com.dtp.core.handler.CollectorHandler;

File: adapter/adapter-dubbo/src/main/java/com/dtp/adapter/dubbo/apache/handler/ApacheDubboDtpHandler.java
Patch:
@@ -3,7 +3,7 @@
 import cn.hutool.core.collection.CollUtil;
 import cn.hutool.core.map.MapUtil;
 import com.dtp.adapter.dubbo.apache.DubboVersion;
-import com.dtp.adapter.dubbo.common.AbstractDtpHandler;
+import com.dtp.adapter.common.AbstractDtpHandler;
 import com.dtp.common.config.DtpProperties;
 import com.dtp.common.config.SimpleTpProperties;
 import com.dtp.common.util.StreamUtil;

File: adapter/adapter-hystrix/src/main/java/com/dtp/adapter/hystrix/HystrixEventService.java
Patch:
@@ -1,7 +1,7 @@
 package com.dtp.adapter.hystrix;
 
-import com.dtp.adapter.dubbo.common.DtpHandleListener;
-import com.dtp.adapter.dubbo.common.DtpHandler;
+import com.dtp.adapter.common.DtpHandleListener;
+import com.dtp.adapter.common.DtpHandler;
 import com.dtp.adapter.hystrix.handler.HystrixDtpHandler;
 import com.dtp.common.ApplicationContextHolder;
 import com.dtp.common.config.DtpProperties;

File: adapter/adapter-hystrix/src/main/java/com/dtp/adapter/hystrix/handler/HystrixDtpHandler.java
Patch:
@@ -1,7 +1,7 @@
 package com.dtp.adapter.hystrix.handler;
 
 import cn.hutool.core.collection.CollUtil;
-import com.dtp.adapter.dubbo.common.AbstractDtpHandler;
+import com.dtp.adapter.common.AbstractDtpHandler;
 import com.dtp.common.config.DtpProperties;
 import com.dtp.common.config.SimpleTpProperties;
 import com.dtp.common.util.StreamUtil;

File: adapter/adapter-webserver/src/main/java/com/dtp/adapter/webserver/WebServerEventService.java
Patch:
@@ -1,7 +1,7 @@
 package com.dtp.adapter.webserver;
 
-import com.dtp.adapter.dubbo.common.DtpHandleListener;
-import com.dtp.adapter.dubbo.common.DtpHandler;
+import com.dtp.adapter.common.DtpHandleListener;
+import com.dtp.adapter.common.DtpHandler;
 import com.dtp.adapter.webserver.handler.AbstractWebServerDtpHandler;
 import com.dtp.common.ApplicationContextHolder;
 import com.dtp.common.config.DtpProperties;

File: adapter/adapter-webserver/src/main/java/com/dtp/adapter/webserver/handler/AbstractWebServerDtpHandler.java
Patch:
@@ -1,6 +1,6 @@
 package com.dtp.adapter.webserver.handler;
 
-import com.dtp.adapter.dubbo.common.DtpHandler;
+import com.dtp.adapter.common.DtpHandler;
 import com.dtp.common.ApplicationContextHolder;
 import com.dtp.common.config.DtpProperties;
 import lombok.extern.slf4j.Slf4j;

File: adapter/adapter-hystrix/src/main/java/com/dtp/adapter/hystrix/HystrixEventService.java
Patch:
@@ -1,8 +1,8 @@
-package com.dtp.adapter.dubbo.hystrix;
+package com.dtp.adapter.hystrix;
 
 import com.dtp.adapter.dubbo.common.DtpHandleListener;
 import com.dtp.adapter.dubbo.common.DtpHandler;
-import com.dtp.adapter.dubbo.hystrix.handler.HystrixDtpHandler;
+import com.dtp.adapter.hystrix.handler.HystrixDtpHandler;
 import com.dtp.common.ApplicationContextHolder;
 import com.dtp.common.config.DtpProperties;
 import com.dtp.core.handler.CollectorHandler;

File: adapter/adapter-hystrix/src/main/java/com/dtp/adapter/hystrix/handler/HystrixDtpHandler.java
Patch:
@@ -1,4 +1,4 @@
-package com.dtp.adapter.dubbo.hystrix.handler;
+package com.dtp.adapter.hystrix.handler;
 
 import cn.hutool.core.collection.CollUtil;
 import com.dtp.adapter.dubbo.common.AbstractDtpHandler;

File: adapter/adapter-webserver/src/main/java/com/dtp/adapter/webserver/WebServerEventService.java
Patch:
@@ -1,8 +1,8 @@
-package com.dtp.adapter.dubbo.webserver;
+package com.dtp.adapter.webserver;
 
 import com.dtp.adapter.dubbo.common.DtpHandleListener;
 import com.dtp.adapter.dubbo.common.DtpHandler;
-import com.dtp.adapter.dubbo.webserver.handler.AbstractWebServerDtpHandler;
+import com.dtp.adapter.webserver.handler.AbstractWebServerDtpHandler;
 import com.dtp.common.ApplicationContextHolder;
 import com.dtp.common.config.DtpProperties;
 import com.dtp.core.handler.CollectorHandler;

File: adapter/adapter-webserver/src/main/java/com/dtp/adapter/webserver/handler/AbstractWebServerDtpHandler.java
Patch:
@@ -1,4 +1,4 @@
-package com.dtp.adapter.dubbo.webserver.handler;
+package com.dtp.adapter.webserver.handler;
 
 import com.dtp.adapter.dubbo.common.DtpHandler;
 import com.dtp.common.ApplicationContextHolder;

File: adapter/adapter-webserver/src/main/java/com/dtp/adapter/webserver/handler/JettyDtpHandler.java
Patch:
@@ -1,4 +1,4 @@
-package com.dtp.adapter.dubbo.webserver.handler;
+package com.dtp.adapter.webserver.handler;
 
 import com.dtp.common.config.DtpProperties;
 import com.dtp.common.config.SimpleTpProperties;

File: adapter/adapter-webserver/src/main/java/com/dtp/adapter/webserver/handler/TomcatDtpHandler.java
Patch:
@@ -1,4 +1,4 @@
-package com.dtp.adapter.dubbo.webserver.handler;
+package com.dtp.adapter.webserver.handler;
 
 import com.dtp.common.config.DtpProperties;
 import com.dtp.common.config.SimpleTpProperties;

File: adapter/adapter-webserver/src/main/java/com/dtp/adapter/webserver/handler/UndertowDtpHandler.java
Patch:
@@ -1,4 +1,4 @@
-package com.dtp.adapter.dubbo.webserver.handler;
+package com.dtp.adapter.webserver.handler;
 
 import com.dtp.common.config.DtpProperties;
 import com.dtp.common.config.SimpleTpProperties;

File: starter/starter-common/src/main/java/com/dtp/starter/common/autoconfigure/HystrixTpAutoConfiguration.java
Patch:
@@ -1,7 +1,7 @@
 package com.dtp.starter.common.autoconfigure;
 
-import com.dtp.adapter.dubbo.hystrix.handler.HystrixDtpHandler;
-import com.dtp.adapter.dubbo.hystrix.HystrixEventService;
+import com.dtp.adapter.hystrix.handler.HystrixDtpHandler;
+import com.dtp.adapter.hystrix.HystrixEventService;
 import com.dtp.common.config.DtpProperties;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;

File: core/src/main/java/com/dtp/core/notify/AlarmCounter.java
Patch:
@@ -60,10 +60,10 @@ public static Triple<String, String, String> countNotifyItems(String dtpName) {
         String rejectCount = rejectAlarm == null ? UNKNOWN : String.valueOf(rejectAlarm.getCount());
 
         val runTimeoutAlarm = getAlarmInfo(dtpName, RUN_TIMEOUT.getValue());
-        String runTimeoutCount = rejectAlarm == null ? UNKNOWN : String.valueOf(runTimeoutAlarm.getCount());
+        String runTimeoutCount = runTimeoutAlarm == null ? UNKNOWN : String.valueOf(runTimeoutAlarm.getCount());
 
         val queueTimeoutAlarm = getAlarmInfo(dtpName, QUEUE_TIMEOUT.getValue());
-        String queueTimeoutCount = rejectAlarm == null ? UNKNOWN : String.valueOf(queueTimeoutAlarm.getCount());
+        String queueTimeoutCount = queueTimeoutAlarm == null ? UNKNOWN : String.valueOf(queueTimeoutAlarm.getCount());
 
         return new ImmutableTriple<>(rejectCount, runTimeoutCount, queueTimeoutCount);
     }

File: adapter/src/main/java/com/dtp/adapter/web/handler/TomcatTpHandler.java
Patch:
@@ -51,7 +51,6 @@ public ThreadPoolStats getPoolStats() {
                 .largestPoolSize(executor.getLargestPoolSize())
                 .poolSize(executor.getPoolSize())
                 .waitTaskCount(executor.getQueue().size())
-                .rejectHandlerName(executor.getRejectedExecutionHandler().getClass().getSimpleName())
                 .dtpName("tomcatWebServerTp")
                 .build();
     }

File: adapter/src/main/java/com/dtp/adapter/web/listener/DtpWebCollectListener.java
Patch:
@@ -32,7 +32,7 @@ public void onApplicationEvent(CollectEvent event) {
             }
             CollectorHandler.getInstance().collect(poolStats, dtpProperties.getCollectorType());
         } catch (Exception e) {
-            log.error("DynamicTp monitor, collect web server thread pool metrics error...", e);
+            log.error("DynamicTp monitor, collect web server thread pool metrics failed.", e);
         }
     }
 }
\ No newline at end of file

File: example/src/main/java/com/dtp/example/IndexController.java
Patch:
@@ -12,7 +12,6 @@
  * IndexController related
  *
  * @author yanhom
- * @date 2021-08-13 下午11:49
  */
 @RestController
 @RequestMapping("/dtp")

File: starter/starter-common/src/main/java/com/dtp/starter/common/autoconfigure/WebServerTpAutoConfiguration.java
Patch:
@@ -33,7 +33,7 @@ public TomcatTpHandler tomcatTpHandler() {
     }
 
     @Bean
-    @ConditionalOnBean(name = {"jettyServletWebServerFactory"})
+    @ConditionalOnBean(name = {"JettyServletWebServerFactory"})
     public JettyTpHandler jettyTpHandler() {
         return new JettyTpHandler();
     }

File: starter/cloud-starter-nacos/src/main/java/com/dtp/starter/cloud/nacos/autoconfigure/DtpAutoConfiguration.java
Patch:
@@ -26,7 +26,7 @@ public class DtpAutoConfiguration {
 
     @Bean
     @ConditionalOnMissingBean()
-    @ConditionalOnBean(NacosConfigManager.class)
+    @ConditionalOnClass(NacosConfigManager.class)
     public CloudNacosRefresher cloudNacosRefresher() {
         return new CloudNacosRefresher();
     }

File: starter/cloud-starter-nacos/src/main/java/com/dtp/starter/cloud/nacos/autoconfigure/DtpAutoConfiguration.java
Patch:
@@ -1,5 +1,6 @@
 package com.dtp.starter.cloud.nacos.autoconfigure;
 
+import com.alibaba.cloud.nacos.NacosConfigManager;
 import com.alibaba.cloud.nacos.NacosConfigProperties;
 import com.dtp.common.constant.DynamicTpConst;
 import com.dtp.starter.cloud.nacos.refresh.CloudNacosRefresher;
@@ -25,6 +26,7 @@ public class DtpAutoConfiguration {
 
     @Bean
     @ConditionalOnMissingBean()
+    @ConditionalOnBean(NacosConfigManager.class)
     public CloudNacosRefresher cloudNacosRefresher() {
         return new CloudNacosRefresher();
     }

File: starter/cloud-starter-nacos/src/main/java/com/dtp/starter/cloud/nacos/autoconfigure/DtpAutoConfiguration.java
Patch:
@@ -1,5 +1,6 @@
 package com.dtp.starter.cloud.nacos.autoconfigure;
 
+import com.alibaba.cloud.nacos.NacosConfigManager;
 import com.alibaba.cloud.nacos.NacosConfigProperties;
 import com.dtp.common.constant.DynamicTpConst;
 import com.dtp.starter.cloud.nacos.refresh.CloudNacosRefresher;
@@ -25,6 +26,7 @@ public class DtpAutoConfiguration {
 
     @Bean
     @ConditionalOnMissingBean()
+    @ConditionalOnBean(NacosConfigManager.class)
     public CloudNacosRefresher cloudNacosRefresher() {
         return new CloudNacosRefresher();
     }

File: common/src/main/java/com/dtp/common/config/ThreadPoolProperties.java
Patch:
@@ -27,7 +27,7 @@ public class ThreadPoolProperties {
     /**
      * CoreSize of ThreadPool.
      */
-    private int corePoolSize = 2;
+    private int corePoolSize = 1;
 
     /**
      * MaxSize of ThreadPool.

File: core/src/main/java/com/dtp/core/support/DtpCreator.java
Patch:
@@ -7,7 +7,8 @@
 import java.util.concurrent.ThreadPoolExecutor;
 
 /**
- * DtpCreator related
+ * Offer a fast dtp creator, use only in simple scenario.
+ * It is best to use ThreadPoolBuilder and assign relevant values.
  *
  * @author: yanhom
  * @since 1.0.0

File: core/src/main/java/com/dtp/core/thread/ThreadPoolBuilder.java
Patch:
@@ -32,7 +32,7 @@ public class ThreadPoolBuilder {
     /**
      * CoreSize of ThreadPool.
      */
-    private int corePoolSize = 2;
+    private int corePoolSize = 1;
 
     /**
      * MaxSize of ThreadPool.

