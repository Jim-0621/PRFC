File: bolts-applinks/src/main/java/bolts/MeasurementEvent.java
Patch:
@@ -117,7 +117,7 @@ private void sendBroadcast() {
       Log.d(getClass().getName(), "Event name is required");
     }
     try {
-      Class<?> clazz = Class.forName("android.support.v4.content.LocalBroadcastManager");
+      Class<?> clazz = Class.forName("androidx.localbroadcastmanager.content.LocalBroadcastManager");
       Method methodGetInstance = clazz.getMethod("getInstance", Context.class);
       Method methodSendBroadcast = clazz.getMethod("sendBroadcast", Intent.class);
       Object localBroadcastManager = methodGetInstance.invoke(null, appContext);

File: bolts-tasks/src/main/java/bolts/CancellationTokenSource.java
Patch:
@@ -129,10 +129,11 @@ public void close() {
 
       cancelScheduledCancellation();
 
+      List<CancellationTokenRegistration> registrations = new ArrayList<>(this.registrations);
       for (CancellationTokenRegistration registration : registrations) {
         registration.close();
       }
-      registrations.clear();
+      this.registrations.clear();
       closed = true;
     }
   }

File: bolts-tasks/src/main/java/bolts/CancellationTokenSource.java
Patch:
@@ -129,10 +129,11 @@ public void close() {
 
       cancelScheduledCancellation();
 
+      List<CancellationTokenRegistration> registrations = new ArrayList<>(this.registrations);
       for (CancellationTokenRegistration registration : registrations) {
         registration.close();
       }
-      registrations.clear();
+      this.registrations.clear();
       closed = true;
     }
   }

File: bolts-tasks/src/main/java/bolts/Task.java
Patch:
@@ -406,7 +406,7 @@ public Void then(Task<Object> task) {
    * <p/>
    * If the supplied collection contains no tasks, the returned task will immediately transition to
    * a completed state before it's returned to the caller.
-   * The returned {@code List&lt;TResult&gt;} will contain of 0 elements.
+   * The returned {@code List&lt;TResult&gt;} will contain 0 elements.
    *
    * @param tasks The tasks that the return value will wait for before completing.
    * @return A Task that will resolve to {@code List&lt;TResult&gt;} when all the tasks are resolved.

File: bolts-tasks/src/main/java/bolts/Task.java
Patch:
@@ -406,7 +406,7 @@ public Void then(Task<Object> task) {
    * <p/>
    * If the supplied collection contains no tasks, the returned task will immediately transition to
    * a completed state before it's returned to the caller.
-   * The returned {@code List&lt;TResult&gt;} will contain of 0 elements.
+   * The returned {@code List&lt;TResult&gt;} will contain 0 elements.
    *
    * @param tasks The tasks that the return value will wait for before completing.
    * @return A Task that will resolve to {@code List&lt;TResult&gt;} when all the tasks are resolved.

File: Bolts/src/bolts/Task.java
Patch:
@@ -10,6 +10,7 @@
 package bolts;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
 import java.util.concurrent.Callable;
@@ -248,10 +249,9 @@ public Void then(Task<Object> task) {
               if (causes.size() == 1) {
                 allFinished.setError(causes.get(0));
               } else {
-                Throwable[] throwables = causes.toArray(new Throwable[causes.size()]);
                 Exception error = new AggregateException(
                     String.format("There were %d exceptions.", causes.size()),
-                    throwables);
+                    causes);
                 allFinished.setError(error);
               }
             } else if (isCancelled.get()) {

File: Bolts/src/bolts/AggregateException.java
Patch:
@@ -13,7 +13,7 @@
 import java.util.List;
 
 /**
- * Aggregates multiple errors that may be thrown in the process of a task's execution.
+ * Aggregates multiple {@code Throwable}s that may be thrown in the process of a task's execution.
  *
  * @see Task#whenAll(java.util.Collection)
  */

File: Bolts/src/bolts/Bolts.java
Patch:
@@ -16,5 +16,5 @@ public final class Bolts {
   /**
    * The version of the Bolts library.
    */
-  public static final String VERSION = "1.1.0";
+  public static final String VERSION = "1.1.1-SNAPSHOT";
 }

File: Bolts/src/bolts/AppLinkNavigation.java
Patch:
@@ -33,7 +33,7 @@
 public class AppLinkNavigation {
   private static final String KEY_NAME_USER_AGENT = "user_agent";
   private static final String KEY_NAME_VERSION = "version";
-  private static final int VERSION = 1;
+  private static final String VERSION = "1.0";
 
   private static AppLinkResolver defaultResolver;
 
@@ -118,7 +118,7 @@ private Bundle buildAppLinkDataForNavigation() {
     Bundle data = new Bundle();
     data.putAll(getAppLinkData());
     data.putString(AppLinks.KEY_NAME_TARGET, getAppLink().getSourceUrl().toString());
-    data.putInt(KEY_NAME_VERSION, VERSION);
+    data.putString(KEY_NAME_VERSION, VERSION);
     data.putString(KEY_NAME_USER_AGENT, "Bolts Android " + Bolts.VERSION);
     data.putBundle(AppLinks.KEY_NAME_EXTRAS, getExtras());
     return data;

File: Bolts/src/bolts/Task.java
Patch:
@@ -181,7 +181,7 @@ public static <TResult> Task<TResult> forError(Exception error) {
   }
 
   /**
-   * Creates a cancelled task with the given error.
+   * Creates a cancelled task.
    */
   public static <TResult> Task<TResult> cancelled() {
     Task<TResult>.TaskCompletionSource tcs = Task.<TResult> create();

File: Bolts/src/bolts/Task.java
Patch:
@@ -181,7 +181,7 @@ public static <TResult> Task<TResult> forError(Exception error) {
   }
 
   /**
-   * Creates a cancelled task with the given error.
+   * Creates a cancelled task.
    */
   public static <TResult> Task<TResult> cancelled() {
     Task<TResult>.TaskCompletionSource tcs = Task.<TResult> create();

