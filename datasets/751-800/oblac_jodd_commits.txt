File: jodd-lagarto/src/main/java/jodd/lagarto/Scanner.java
Patch:
@@ -224,4 +224,4 @@ public String toString() {
 		}
 	}
 
-}
\ No newline at end of file
+}

File: jodd-lagarto/src/main/java/jodd/lagarto/LagartoParser.java
Patch:
@@ -406,7 +406,8 @@ private void _consumeNumber(final int unconsumeNdx) {
 			return;
 		}
 
-		if (((value >= 0xD800) && (value <= 0xDFF)) || (value > 0x10FFFF)) {
+		// Otherwise, if the number is in the range 0xD800 to 0xDFFF or is greater than 0x10FFFF, then this is a parse error.
+		if (((value >= 0xD800) && (value <= 0xDFFF)) || (value > 0x10FFFF)) {
 			errorCharReference();
 			textEmitChar(REPLACEMENT_CHAR);
 			return;

File: jodd-json/src/main/java/jodd/json/JsonArray.java
Patch:
@@ -134,7 +134,7 @@ public Boolean getBoolean(final int pos) {
 	}
 
 	/**
-	 * Retruns the JsonObject at position {@code pos} in the array.
+	 * Returns the JsonObject at position {@code pos} in the array.
 	 */
 	public JsonObject getJsonObject(final int pos) {
 		Object val = list.get(pos);
@@ -471,4 +471,4 @@ public void remove() {
 			listIter.remove();
 		}
 	}
-}
\ No newline at end of file
+}

File: jodd-petite/src/test/java/jodd/petite/OutsideObjectsTest.java
Patch:
@@ -44,10 +44,10 @@ public static class BeBean {
 
 	@Test
 	void testWire() {
-		PetiteContainer pc = new PetiteContainer();
+		final PetiteContainer pc = new PetiteContainer();
 		pc.registerPetiteBean(InBean.class);
 
-		BeBean beBean = new BeBean();
+		final BeBean beBean = new BeBean();
 
 		assertNull(beBean.inBean);
 
@@ -62,7 +62,7 @@ void testWire() {
 
 	@Test
 	void testWire_withCache() {
-		PetiteContainer pc = new PetiteContainer();
+		final PetiteContainer pc = new PetiteContainer();
 		pc.setExternalsCache(TypeCache.createDefault());
 		pc.registerPetiteBean(InBean.class);
 

File: jodd-proxetta/src/main/java/jodd/methref/Methref.java
Patch:
@@ -38,7 +38,7 @@
 @SuppressWarnings({"UnusedDeclaration"})
 public class Methref<C> {
 
-	public static TypeCache<Class> cache = TypeCache.createDefault();
+	public static TypeCache<Class> cache = TypeCache.<Class>create().threadsafe(true).get();
 
 	private static final MethrefProxetta proxetta = new MethrefProxetta();
 

File: jodd-bean/src/main/java/jodd/introspector/CachingIntrospector.java
Patch:
@@ -66,9 +66,9 @@ public CachingIntrospector(final boolean scanAccessible, final boolean enhancedP
 	 */
 	@Override
 	public ClassDescriptor lookup(final Class type) {
-		return cache.get(type, () ->
+		return cache.get(type, (t) ->
 			new ClassDescriptor(
-				type,
+				t,
 				scanAccessible,
 				enhancedProperties,
 				includeFieldsAsProperties,
@@ -83,4 +83,4 @@ public void reset() {
 		cache.clear();
 	}
 
-}
\ No newline at end of file
+}

File: jodd-bean/src/main/java/jodd/introspector/MapperFunctionInstances.java
Patch:
@@ -45,11 +45,11 @@ public static MapperFunctionInstances get() {
 	protected TypeCache<MapperFunction> typeCache = TypeCache.createDefault();
 
 	public MapperFunction lookup(final Class<? extends MapperFunction> mapperFunctionClass) {
-		return typeCache.get(mapperFunctionClass, () -> {
+		return typeCache.get(mapperFunctionClass, (c) -> {
 			try {
 				return ClassUtil.newInstance(mapperFunctionClass);
-			} catch (Exception ex) {
-				throw new IllegalArgumentException("Invalid mapper class " + mapperFunctionClass, ex);
+			} catch (final Exception ex) {
+				throw new IllegalArgumentException("Invalid mapper class " + c, ex);
 			}
 		});
 	}

File: jodd-core/src/main/java/jodd/cache/TypeCache.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.WeakHashMap;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.function.Consumer;
+import java.util.function.Function;
 import java.util.function.Supplier;
 
 /**
@@ -169,8 +170,8 @@ public T get(final Class<?> key) {
 	 * Use this method instead of {@code get-nullcheck-put} block when
 	 * thread-safety is of importance.
 	 */
-	public T get(final Class<?> key, final Supplier<T> valueSupplier) {
-		return map.computeIfAbsent(key, aClass -> valueSupplier.get());
+	public T get(final Class<?> key, final Function<Class<?>, T> mappingFunction) {
+		return map.computeIfAbsent(key, mappingFunction);
 	}
 
 	/**

File: jodd-madvoc/src/main/java/jodd/madvoc/component/ScopeDataInspector.java
Patch:
@@ -189,7 +189,7 @@ protected InjectionPoint buildInjectionPoint(
 	 * configuration is not known yet.
 	 */
 	public ScopeData inspectClassScopesWithCache(final Class actionClass) {
-		return scopeDataTypeCache.get(actionClass, () -> inspectClassScopes(actionClass));
+		return scopeDataTypeCache.get(actionClass, this::inspectClassScopes);
 	}
 
 	/**

File: jodd-proxetta/src/test/java/jodd/methref/MethrefTest.java
Patch:
@@ -48,6 +48,9 @@ void testNonString() {
 		final Methref<Str> mref = Methref.of(Str.class);
 		assertEquals("redirect:boo", "redirect:" + mref.ref(mref.get().boo()));
 		assertEquals("foo", mref.ref(mref.get().foo()));
+
+
+		assertEquals("foo", Methref.of(Str.class).on(Str::foo));
 	}
 
 	@Test

File: jodd-db/src/test/java/jodd/db/oom/DbOom2Test.java
Patch:
@@ -138,7 +138,7 @@ void testOrm2() {
 		q.close();
 
 		q = DbOomQuery.query("insert into GIRL (NAME) values('Sasha')");
-		q.setGeneratedColumns("ID, TIME");
+		q.setGeneratedColumns("ID", "TIME");
 		q.executeUpdate();
 		ResultSet rs = q.getGeneratedColumns();
 		assertEquals(1, q.getOpenResultSetCount());

File: jodd-mail/src/main/java/jodd/mail/ReceiveMailSession.java
Patch:
@@ -391,7 +391,7 @@ public void updateEmailFlags(final ReceivedEmail receivedEmail) {
 	 * Closes folder if opened and expunge deleted messages.
 	 */
 	protected void closeFolderIfOpened(final Folder folder) {
-		if (folder != null) {
+		if (folder != null && folder.isOpen()) {
 			try {
 				folder.close(true);
 			} catch (final MessagingException ignore) {

File: jodd-madvoc/src/main/java/jodd/madvoc/meta/In.java
Patch:
@@ -44,4 +44,6 @@
 	 */
 	String value() default "";
 
-}
\ No newline at end of file
+	String defaultValue() default "";
+
+}

File: jodd-core/src/main/java/jodd/buffer/package-info.java
Patch:
@@ -24,6 +24,6 @@
 // POSSIBILITY OF SUCH DAMAGE.
 
 /**
- * Faster primitive and object buffers.
+ * Faster primitive buffers.
  */
 package jodd.buffer;
\ No newline at end of file

File: jodd-db/src/test/java/jodd/db/fixtures/DbHsqldbTestCase.java
Patch:
@@ -44,8 +44,9 @@ protected void setupPool(final CoreConnectionPool cp) {
 
 	@Override
 	protected void initDb(final DbSession session) {
-
+		executeUpdate(session, "drop table BOY if exists");
 		executeUpdate(session, "drop table GIRL if exists");
+
 		String sql = "create table GIRL (" +
 				"ID			integer		not null," +
 				"NAME		varchar(20)	not null," +
@@ -54,7 +55,6 @@ protected void initDb(final DbSession session) {
 				')';
 		executeUpdate(session, sql);
 
-		executeUpdate(session, "drop table BOY if exists");
 		sql = "create table BOY (" +
 				"ID			integer	not null," +
 				"GIRL_ID		integer	null," +

File: jodd-json/src/main/java/jodd/json/LazyMap.java
Patch:
@@ -18,7 +18,6 @@
 import java.lang.reflect.Array;
 import java.util.AbstractMap;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.LinkedHashMap;
@@ -160,8 +159,8 @@ public Set keySet() {
 
 	@Override
 	public Collection values() {
-		return map == null ? Arrays.asList(values) : map.values();
-
+		buildIfNeeded();
+		return map.values();
 	}
 
 	@Override

File: jodd-htmlstapler/src/main/java/jodd/htmlstapler/HtmlStaplerBundlesManager.java
Patch:
@@ -597,7 +597,7 @@ protected String fixCssRelativeUrls(final String content, final String src) {
 			final String matchedUrl = StringUtil.removeChars(matcher.group(1), "'\"");
 
 			final String url;
-			if (matchedUrl.startsWith("https://") || matchedUrl.startsWith("http://") || matchedUrl.startsWith("data://")) {
+			if (matchedUrl.startsWith("https://") || matchedUrl.startsWith("http://") || matchedUrl.startsWith("data:")) {
 				url = "url('" + matchedUrl + "')";
 			}
 			else {

File: jodd-madvoc/src/testInt/java/jodd/madvoc/ArgsTestBase.java
Patch:
@@ -81,7 +81,7 @@ public void testArgs3() {
 				.query("user.username", "Frank")
 				.send();
 
-		assertEquals("Hello Frank, you are number  or .", response.bodyText().trim());
+		assertEquals("Hello Frank, you are number 3 or 1.", response.bodyText().trim());
 	}
 
 	@Test

File: jodd-madvoc/src/main/java/jodd/madvoc/scope/RequestScopeCfg.java
Patch:
@@ -36,7 +36,7 @@ abstract class RequestScopeCfg {
 	/**
 	 * Specifies if empty parameters will be injected as <code>null</code> value.
 	 */
-	protected boolean treatEmptyParamsAsNull;
+	protected boolean treatEmptyParamsAsNull = true;
 	/**
 	 * Specifies if attributes will be injected.
 	 */

File: jodd-vtor/src/main/java/jodd/vtor/constraint/ValidURL.java
Patch:
@@ -34,7 +34,7 @@
 
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
-@Constraint(TimeBeforeConstraint.class)
+@Constraint(ValidURLConstraint.class)
 public @interface ValidURL {
 
 	// ---------------------------------------------------------------- common

File: jodd-core/src/main/java/jodd/io/upload/FileUploadHeader.java
Patch:
@@ -108,7 +108,7 @@ private String getContentType(final String dataHeader) {
 			return StringPool.EMPTY;
 		}
 		start += token.length();
-		return dataHeader.substring(start);
+		return dataHeader.substring(start).trim();
 	}
 
 	private String getContentDisposition(final String dataHeader) {

File: jodd-http/src/main/java/jodd/http/HttpBase.java
Patch:
@@ -33,11 +33,11 @@
 import jodd.io.StreamUtil;
 import jodd.io.upload.FileUpload;
 import jodd.io.upload.MultipartStreamParser;
+import jodd.net.MimeTypes;
+import jodd.time.TimeUtil;
 import jodd.util.RandomString;
 import jodd.util.StringPool;
 import jodd.util.StringUtil;
-import jodd.time.TimeUtil;
-import jodd.net.MimeTypes;
 
 import java.io.BufferedReader;
 import java.io.ByteArrayInputStream;
@@ -919,7 +919,7 @@ public void sendTo(final OutputStream out) throws IOException {
 	 */
 	protected void readHeaders(final BufferedReader reader) {
 		while (true) {
-			String line;
+			final String line;
 			try {
 				line = reader.readLine();
 			} catch (IOException ioex) {

File: jodd-http/src/main/java/jodd/http/HttpRequest.java
Patch:
@@ -962,9 +962,10 @@ public static HttpRequest readFrom(final InputStream in, final String encoding)
 			return null;
 		}
 
-		HttpRequest httpRequest = new HttpRequest();
+		final HttpRequest httpRequest = new HttpRequest();
+		httpRequest.headers.clear();
 
-		String line;
+		final String line;
 		try {
 			line = reader.readLine();
 		} catch (IOException ioex) {

File: jodd-db/src/testInt/java/jodd/db/oom/DbBaseTest.java
Patch:
@@ -117,7 +117,7 @@ public abstract class MySqlDbAccess extends DbAccess {
 
 		@Override
 		public final void initConnectionPool(final CoreConnectionPool connectionPool) {
-			connectionPool.setDriver("com.mysql.jdbc.Driver");
+			connectionPool.setDriver("com.mysql.cj.jdbc.Driver");
 			connectionPool.setUrl("jdbc:mysql://" + dbhost() + ":3306/" + DB_NAME);
 			connectionPool.setUser("root");
 			connectionPool.setPassword("root!");

File: jodd-core/src/main/java/jodd/system/JavaInfo.java
Patch:
@@ -156,7 +156,7 @@ private int detectJavaVersionNumber() {
 			return Integer.parseInt(JAVA_VERSION.substring(2, index));
 		} else {
 			final int index = JAVA_VERSION.indexOf('.');
-			return Integer.parseInt(JAVA_VERSION.substring(0, index));
+			return Integer.parseInt(index == -1 ? JAVA_VERSION : JAVA_VERSION.substring(0, index));
 		}
 	}
 

File: jodd-core/src/test/java/jodd/io/FileNameUtilTest.java
Patch:
@@ -194,7 +194,7 @@ void testEqualsOnSystem(final boolean expected, final String filename1, final St
 
 	private static Stream<Arguments> createTestData_testEqualsOnSystem() {
 		return Stream.of(
-				Arguments.of(true, "jodd_makes_fun.git", "jodd_MAKES_fUn.GiT"),
+				Arguments.of(SystemUtil.info().isWindows(), "jodd_makes_fun.git", "jodd_MAKES_fUn.GiT"),
 				Arguments.of(false, "jodd.tmp", "j0dd.tmp"),
 				Arguments.of(true, null, null),
 				Arguments.of(false, "jodd.tmp", null)

File: jodd-json/src/main/java/jodd/json/JsonParser.java
Patch:
@@ -607,7 +607,7 @@ private void skipObject() {
 			final char c = input[ndx];
 
 			if (insideString) {
-				if (c == '\"') {
+				if (c == '\"' && (ndx == 0 || input[ndx - 1] != '\\')) {
 					insideString = false;
 				}
 			}
@@ -867,7 +867,7 @@ else if (c == 'e' || c == 'E') {
 				// if string is 19 chars and longer, it can be over the limit
 				BigInteger bigInteger = new BigInteger(value);
 
-				if (isGreaterThenLong(bigInteger)) {
+				if (isGreaterThanLong(bigInteger)) {
 					return bigInteger;
 				}
 				longNumber = bigInteger.longValue();
@@ -883,7 +883,7 @@ else if (c == 'e' || c == 'E') {
 		return Long.valueOf(longNumber);
 	}
 
-	private static boolean isGreaterThenLong(final BigInteger bigInteger) {
+	private static boolean isGreaterThanLong(final BigInteger bigInteger) {
 		if (bigInteger.compareTo(MAX_LONG) > 0) {
 			return true;
 		}

File: jodd-core/src/main/java/jodd/io/findfile/FileNameComparator.java
Patch:
@@ -33,7 +33,7 @@
 
 public class FileNameComparator implements Comparator<File>, Serializable {
 	protected final int order;
-	protected NaturalOrderComparator<String> naturalOrderComparator = new NaturalOrderComparator<>(true, true);
+	protected NaturalOrderComparator<String> naturalOrderComparator = new NaturalOrderComparator<>(true, true, true);
 
 	public FileNameComparator(final boolean ascending) {
 		if (ascending) {

File: jodd-core/src/test/java/jodd/cli/CliOptionsTest.java
Patch:
@@ -55,7 +55,8 @@ private Cli buildCli(final List<String> out) {
 			.hasArg()
 			.with(out::add);
 
-		cli.param();
+		cli.param()
+			.with(arr -> out.add(arr[0]));
 
 		return cli;
 	}

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/InvokeClassBuilder.java
Patch:
@@ -67,7 +67,8 @@ public void visit(final int version, final int access, final String name, final
 		wd.init(name, superName, suffix, reqProxyClassName);
 
 		// write destination class
-		super.visit(version, access, wd.thisReference, signature, wd.superName, interfaces);
+		final int v = ProxettaAsmUtil.resolveJavaVersion(version);
+		super.visit(v, access, wd.thisReference, signature, wd.superName, interfaces);
 	}
 
 	@Override

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaClassBuilder.java
Patch:
@@ -100,7 +100,8 @@ public void visit(final int version, int access, final String name, final String
 		access &= ~AsmUtil.ACC_ABSTRACT;
 
 		// write destination class
-		wd.dest.visit(version, access, wd.thisReference, signature, wd.superName, null);
+		final int v = ProxettaAsmUtil.resolveJavaVersion(version);
+		wd.dest.visit(v, access, wd.thisReference, signature, wd.superName, null);
 
 		wd.proxyAspects = new ProxyAspectData[aspects.length];
 		for (int i = 0; i < aspects.length; i++) {

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaWrapperClassBuilder.java
Patch:
@@ -107,7 +107,8 @@ public void visit(final int version, int access, final String name, final String
 				//interfaces = null;
 			}
 		}
-		wd.dest.visit(version, access, wd.thisReference, signature, wd.superName, interfaces);
+		final int v = ProxettaAsmUtil.resolveJavaVersion(version);
+		wd.dest.visit(v, access, wd.thisReference, signature, wd.superName, interfaces);
 
 		wd.proxyAspects = new ProxyAspectData[aspects.length];
 		for (int i = 0; i < aspects.length; i++) {

File: jodd-madvoc/src/main/java/jodd/madvoc/WebApp.java
Patch:
@@ -34,6 +34,7 @@
 import jodd.madvoc.component.ActionsManager;
 import jodd.madvoc.component.AsyncActionExecutor;
 import jodd.madvoc.component.ContextInjectorComponent;
+import jodd.madvoc.component.FileUploader;
 import jodd.madvoc.component.FiltersManager;
 import jodd.madvoc.component.InterceptorsManager;
 import jodd.madvoc.component.MadvocComponentLifecycle;
@@ -314,6 +315,7 @@ protected void registerMadvocComponents() {
 		madvocContainer.registerComponent(ScopeResolver.class);
 		madvocContainer.registerComponent(ScopeDataInspector.class);
 		madvocContainer.registerComponent(AsyncActionExecutor.class);
+		madvocContainer.registerComponent(FileUploader.class);
 	}
 
 	/**

File: jodd-madvoc/src/main/java/jodd/madvoc/action/DefaultActionConfig.java
Patch:
@@ -35,7 +35,8 @@
 import jodd.madvoc.result.ServletDispatcherActionResult;
 
 /**
- * Default action configuration.
+ * Default action configuration used for the {@link jodd.madvoc.meta.Action}
+ * annotation.
  */
 public class DefaultActionConfig implements ActionConfig {
 

File: jodd-madvoc/src/main/java/jodd/madvoc/action/RestActionConfig.java
Patch:
@@ -33,7 +33,7 @@
 public class RestActionConfig extends DefaultActionConfig {
 
 	public RestActionConfig() {
-		setActionMethodNames("get", "post", "put", "delete", "options");
+		setActionMethodNames("get", "post", "put", "delete", "options", "head", "patch", "trace");
 		setNamingStrategy(RestActionNamingStrategy.class);
 		setActionResult(JsonActionResult.class);
 		setFilters();

File: jodd-madvoc/src/main/java/jodd/madvoc/path/RestActionNamingStrategy.java
Patch:
@@ -115,9 +115,9 @@ protected String resolveHttpMethodFromMethodName(final String methodName) {
 			i++;
 		}
 
-		String name = methodName.substring(0, i).toUpperCase();
+		final String name = methodName.substring(0, i).toUpperCase();
 
-		for (HttpMethod httpMethod : HttpMethod.values()) {
+		for (final HttpMethod httpMethod : HttpMethod.values()) {
 			if (httpMethod.equalsName(name)) {
 				return httpMethod.name();
 			}

File: jodd-madvoc/src/main/java/jodd/madvoc/proxetta/ProxettaAwareActionsManager.java
Patch:
@@ -30,7 +30,7 @@
 import jodd.madvoc.config.ActionDefinition;
 import jodd.madvoc.config.ActionRuntime;
 import jodd.petite.meta.PetiteInject;
-import jodd.proxetta.impl.ProxyProxetta;
+import jodd.proxetta.Proxetta;
 
 import java.lang.reflect.Method;
 
@@ -68,7 +68,7 @@ public synchronized ActionRuntime registerAction(Class actionClass, final Method
 		Class existing = proxyActionClasses.get(actionClass);
 
 		if (existing == null) {
-			final ProxyProxetta proxetta = proxettaSupplier.get();
+			final Proxetta proxetta = proxettaSupplier.get();
 
 			existing = proxetta.proxy().setTarget(actionClass).define();
 

File: jodd-joy/src/main/java/jodd/joy/JoyMadvoc.java
Patch:
@@ -44,7 +44,6 @@
 import javax.servlet.ServletContext;
 import java.util.Comparator;
 import java.util.List;
-import java.util.Objects;
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 
@@ -100,7 +99,7 @@ public void add(final Consumer<WebApp> webAppConsumer) {
 	// ---------------------------------------------------------------- runtime
 
 	public WebApp getWebApp() {
-		return Objects.requireNonNull(webApp);
+		return webApp;
 	}
 
 	// ---------------------------------------------------------------- lifecycle

File: jodd-joy/src/main/java/jodd/joy/JoyPaths.java
Patch:
@@ -31,7 +31,6 @@
 
 import java.net.MalformedURLException;
 import java.net.URL;
-import java.util.Objects;
 
 import static jodd.joy.JoddJoy.APP_DIR;
 
@@ -45,7 +44,7 @@ public class JoyPaths extends JoyBase {
 	 * Returns resolved app dir.
 	 */
 	public String getAppDir() {
-		return Objects.requireNonNull(appDir);
+		return requireStarted(appDir);
 	}
 
 	// ---------------------------------------------------------------- lifecycle

File: jodd-joy/src/main/java/jodd/joy/JoyProps.java
Patch:
@@ -31,7 +31,6 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import java.util.Objects;
 import java.util.function.Supplier;
 
 /**
@@ -52,7 +51,7 @@ public JoyProps(final Supplier<String> nameSupplier) {
 	 * Returns application Props.
 	 */
 	public Props getProps() {
-		return Objects.requireNonNull(props);
+		return requireStarted(props);
 	}
 
 	// ---------------------------------------------------------------- config
@@ -65,12 +64,14 @@ public Props getProps() {
 	 */
 	@Override
 	public JoyProps addPropsFile(final String namePattern) {
+		requireNotStarted(props);
 		this.propsNamePatterns.add(namePattern);
 		return this;
 	}
 
 	@Override
 	public JoyProps addPropsProfiles(final String... profiles) {
+		requireNotStarted(props);
 		Collections.addAll(propsProfiles, profiles);
 		return this;
 	}

File: jodd-joy/src/main/java/jodd/joy/JoyProxetta.java
Patch:
@@ -31,7 +31,6 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Objects;
 
 /**
  * Tiny JoyProxetta kickstarter.
@@ -46,7 +45,7 @@ public class JoyProxetta extends JoyBase implements JoyProxettaConfig {
 	 * Returns proxetta once it is created.
 	 */
 	public ProxyProxetta getProxetta() {
-		return Objects.requireNonNull(proxyProxetta);
+		return requireStarted(proxyProxetta);
 	}
 
 	// ---------------------------------------------------------------- config
@@ -58,6 +57,7 @@ public ProxyProxetta getProxetta() {
 	 */
 	@Override
 	public JoyProxetta addProxyAspect(final ProxyAspect proxyAspect) {
+		requireNotStarted(proxyProxetta);
 		this.proxyAspects.add(proxyAspect);
 		return this;
 	}

File: jodd-joy/src/testInt/java/jodd/joy/action/HelloAction.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.joy.action;
 
+import jodd.jtx.meta.ReadOnlyTransaction;
 import jodd.madvoc.meta.Action;
 import jodd.madvoc.meta.Auth;
 import jodd.madvoc.meta.In;
@@ -43,9 +44,10 @@ public class HelloAction {
 	HelloBean helloBean;
 
 	@In
-	private String username = "";
+	String username = "";
 
 	@Action
+	@ReadOnlyTransaction
 	public JsonResult execute() {
 		Map<String, Object> map = new HashMap<>();
 		map.put("username", username);

File: jodd-petite/src/main/java/jodd/petite/BeanDefinition.java
Patch:
@@ -256,7 +256,7 @@ public String toString() {
 		return "BeanDefinition{" +
 				"name=" + name +
 				", type=" + type +
-				", scope=" + scope.getClass().getSimpleName() +
+				", scope=" + (scope != null ? scope.getClass().getSimpleName() : "N/A") +
 				", wiring=" + wiringMode +
 				'}';
 	}

File: jodd-madvoc/src/test/java/jodd/madvoc/component/InterceptorsManagerTest.java
Patch:
@@ -135,7 +135,6 @@ private InterceptorsManager createInterceptorManager() {
 		im.contextInjectorComponent.scopeDataInspector = new ScopeDataInspector();
 		im.contextInjectorComponent.scopeResolver = new ScopeResolver();
 		im.contextInjectorComponent.scopeResolver.madpc = madpc;
-		im.contextInjectorComponent.madpc = madpc;
 		return im;
 	}
 

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaClassBuilder.java
Patch:
@@ -40,6 +40,7 @@
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Map;
 
 import static jodd.asm6.Opcodes.ACC_ABSTRACT;
 import static jodd.asm6.Opcodes.ALOAD;
@@ -220,10 +221,12 @@ protected void makeProxyConstructor() {
 	 * Checks for all public super methods that are not overridden.
 	 */
 	protected void processSuperMethods() {
+
 		for (ClassReader cr : targetClassInfo.superClassReaders) {
 			cr.accept(new EmptyClassVisitor() {
 
 				String declaredClassName;
+				Map<String, String> generics;
 
 				@Override
 				public void visit(final int version, final int access, final String name, final String signature, final String superName, final String[] interfaces) {

File: jodd-madvoc/src/main/java/jodd/madvoc/meta/scope/Cookie.java
Patch:
@@ -41,5 +41,5 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER})
 @Scope(CookieScope.class)
-public @interface Cookies {
+public @interface Cookie {
 }

File: jodd-mail/src/main/java/jodd/mail/EMLParser.java
Patch:
@@ -124,7 +124,7 @@ protected ReceivedEmail parse(final InputStream emlContentInputStream) throws Me
 
 		try {
 			final MimeMessage message = new MimeMessage(getSession(), emlContentInputStream);
-			return new ReceivedEmail(message);
+			return new ReceivedEmail(message, false);
 		} finally {
 			StreamUtil.close(emlContentInputStream);
 		}

File: jodd-joy/src/main/java/jodd/joy/JoyPetite.java
Patch:
@@ -167,6 +167,7 @@ void stop() {
 		if (petiteContainer != null) {
 			petiteContainer.shutdown();
 		}
+		petiteContainer = null;
 	}
 
 	public void printBeans(final int width) {

File: jodd-joy/src/main/java/jodd/joy/JoyProxetta.java
Patch:
@@ -81,6 +81,7 @@ void start() {
 
 	@Override
 	void stop() {
+		proxyProxetta = null;
 	}
 
 }

File: jodd-madvoc/src/main/java/jodd/madvoc/result/AbstractTemplateViewActionResult.java
Patch:
@@ -201,7 +201,9 @@ protected String resolveTarget(final ActionRequest actionRequest, final String r
 	protected void targetNotFound(final ActionRequest actionRequest, final String actionAndResultPath) throws IOException {
 		final HttpServletResponse response = actionRequest.getHttpServletResponse();
 
-		response.sendError(SC_NOT_FOUND, "Result not found: " + actionAndResultPath);
+		if (!response.isCommitted()) {
+			response.sendError(SC_NOT_FOUND, "Result not found: " + actionAndResultPath);
+		}
 	}
 
 }
\ No newline at end of file

File: jodd-madvoc/src/main/java/jodd/madvoc/filter/ActionFilterStack.java
Patch:
@@ -33,9 +33,6 @@
  */
 public class ActionFilterStack extends BaseActionWrapperStack<ActionFilter> implements ActionFilter {
 
-	public ActionFilterStack() {
-	}
-
 	public ActionFilterStack(final Class<? extends ActionFilter>... filterClasses) {
 		super(filterClasses);
 	}

File: jodd-core/src/main/java/jodd/util/StringUtil.java
Patch:
@@ -322,7 +322,7 @@ public static boolean isBlank(final CharSequence string) {
 	/**
 	 * Determines if string is not blank.
 	 */
-	public static boolean isNotBlank(final String string) {
+	public static boolean isNotBlank(final CharSequence string) {
 		return ((string != null) && !containsOnlyWhitespaces(string));
 	}
 

File: jodd-props/src/test/java/jodd/props/PropsBeanTest.java
Patch:
@@ -89,6 +89,5 @@ void testToBean() {
 		assertEquals(10101, httpConfig.port);
 		assertEquals(30, httpConfig.pool);
 		assertEquals("localhost", httpConfig.address);
-
 	}
 }

File: jodd-bean/src/main/java/jodd/introspector/CachingIntrospector.java
Patch:
@@ -54,7 +54,7 @@ public CachingIntrospector() {
 	 * constructors.
 	 */
 	public CachingIntrospector(final boolean scanAccessible, final boolean enhancedProperties, final boolean includeFieldsAsProperties, final String[] propertyFieldPrefix) {
-		this.cache = new TypeCache<>(TypeCache.Implementation.MAP);
+		this.cache = TypeCache.createDefault();
 		this.scanAccessible = scanAccessible;
 		this.enhancedProperties = enhancedProperties;
 		this.includeFieldsAsProperties = includeFieldsAsProperties;

File: jodd-bean/src/main/java/jodd/introspector/MapperFunctionInstances.java
Patch:
@@ -42,7 +42,7 @@ public static MapperFunctionInstances get() {
 		return MAPPER_FUNCTION_INSTANCES;
 	}
 
-	protected TypeCache<MapperFunction> typeCache = new TypeCache<>(TypeCache.Implementation.MAP);
+	protected TypeCache<MapperFunction> typeCache = TypeCache.createDefault();
 
 	public MapperFunction lookup(final Class<? extends MapperFunction> mapperFunctionClass) {
 		return typeCache.get(mapperFunctionClass, () -> {

File: jodd-bean/src/main/java/jodd/typeconverter/TypeConverterManager.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.typeconverter;
 
+import jodd.cache.TypeCache;
 import jodd.io.upload.FileUpload;
 import jodd.mutable.MutableByte;
 import jodd.mutable.MutableDouble;
@@ -91,7 +92,6 @@
 import java.time.LocalTime;
 import java.util.Calendar;
 import java.util.Collection;
-import java.util.HashMap;
 import java.util.Locale;
 import java.util.TimeZone;
 import java.util.UUID;
@@ -111,7 +111,7 @@ public static TypeConverterManager get() {
 		return TYPE_CONVERTER_MANAGER;
 	}
 
-	private final HashMap<Class, TypeConverter> converters = new HashMap<>();
+	private final TypeCache<TypeConverter> converters = TypeCache.createDefault();
 
 	// ---------------------------------------------------------------- methods
 

File: jodd-db/src/main/java/jodd/db/DbQuery.java
Patch:
@@ -1110,9 +1110,9 @@ public Q setObject(final int index, final Object value, final Class<? extends Sq
 		}
 		SqlType sqlType;
 		if (sqlTypeClass != null) {
-			sqlType = SqlTypeManager.lookupSqlType(sqlTypeClass);
+			sqlType = SqlTypeManager.get().lookupSqlType(sqlTypeClass);
 		} else {
-			sqlType = SqlTypeManager.lookup(value.getClass());
+			sqlType = SqlTypeManager.get().lookup(value.getClass());
 		}
 		try {
 			if ((sqlType != null) && (dbSqlType != SqlType.DB_SQLTYPE_NOT_AVAILABLE)) {

File: jodd-db/src/main/java/jodd/db/oom/mapper/DefaultResultSetMapper.java
Patch:
@@ -331,9 +331,9 @@ protected Object readColumnValue(final int colNdx, final Class destinationType,
 			try {
 				SqlType sqlType;
 				if (sqlTypeClass != null) {
-					sqlType = SqlTypeManager.lookupSqlType(sqlTypeClass);
+					sqlType = SqlTypeManager.get().lookupSqlType(sqlTypeClass);
 				} else {
-					sqlType = SqlTypeManager.lookup(destinationType);
+					sqlType = SqlTypeManager.get().lookup(destinationType);
 				}
 				if (sqlType != null) {
 					cachedColumnValue = sqlType.readValue(resultSet, colNdx + 1, destinationType, columnDbSqlType);

File: jodd-db/src/test/java/jodd/db/oom/MappingTest.java
Patch:
@@ -86,8 +86,8 @@ void testMapping() throws SQLException {
 		final DbEntityManager dbEntityManager = DbOom.get().entityManager();
 
 		dbEntityManager.registerEntity(Foo.class);
-		SqlTypeManager.register(Boo.class, BooSqlType.class);
-		SqlTypeManager.register(FooWeight.class, FooWeigthSqlType.class);
+		SqlTypeManager.get().register(Boo.class, BooSqlType.class);
+		SqlTypeManager.get().register(FooWeight.class, FooWeigthSqlType.class);
 
 		List<Foo> foos = dbOom.query("select * from FOO").list(Foo.class);
 		assertEquals(1, foos.size());

File: jodd-db/src/testInt/java/jodd/db/oom/Kotlin399Test.java
Patch:
@@ -61,7 +61,7 @@ void test399() {
 		init(db);
 
 		db.createTables();
-		SqlTypeManager.register(Tester3.Status.class, StatusSqlType.class);
+		SqlTypeManager.get().register(Tester3.Status.class, StatusSqlType.class);
 
 		try {
 			workoutJavaEntity();
@@ -86,7 +86,7 @@ private void workoutJavaEntity() {
 	}
 
 	private void workoutKotlinEntity() {
-		SqlTypeManager.register(Status33.class, Status33SqlType.class);
+		SqlTypeManager.get().register(Status33.class, Status33SqlType.class);
 		DbSession session = new DbSession(connectionPool);
 
 		Tester33 tester = new Tester33(9, Status33.SELECTED, 3);

File: jodd-joy/src/main/java/jodd/joy/JoyPetite.java
Patch:
@@ -111,7 +111,7 @@ void start() {
 		petiteContainer = createPetiteContainer();
 
 		if (externalsCache) {
-			petiteContainer.setExternalsCache(TypeCache.Implementation.MAP);
+			petiteContainer.setExternalsCache(TypeCache.createDefault());
 		}
 
 		log.info("Is web application: " + isWebApplication);

File: jodd-json/src/main/java/jodd/json/TypeJsonSerializerMap.java
Patch:
@@ -101,8 +101,8 @@ public TypeJsonSerializerMap(final TypeJsonSerializerMap defaultSerializerMap) {
 		this.defaultSerializerMap = defaultSerializerMap;
 	}
 
-	protected final TypeCache<TypeJsonSerializer> map = new TypeCache<>(TypeCache.Implementation.MAP);
-	protected final TypeCache<TypeJsonSerializer> cache = new TypeCache<>(TypeCache.Implementation.MAP);
+	protected final TypeCache<TypeJsonSerializer> map = TypeCache.createDefault();
+	protected final TypeCache<TypeJsonSerializer> cache = TypeCache.createDefault();
 
 	/**
 	 * Registers default set of {@link jodd.json.TypeJsonSerializer serializers}.

File: jodd-json/src/main/java/jodd/json/meta/JsonAnnotationManager.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.json.meta;
 
+import jodd.cache.TypeCache;
 import jodd.introspector.ClassDescriptor;
 import jodd.introspector.ClassIntrospector;
 import jodd.introspector.FieldDescriptor;
@@ -36,8 +37,6 @@
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Map;
 
 /**
  * Cached includes and excludes annotation data per type.
@@ -53,7 +52,7 @@ public static JsonAnnotationManager get() {
 		return JSON_ANNOTATION_MANAGER;
 	}
 
-	private final Map<Class, TypeData> typeDataMap = new HashMap<>();
+	private final TypeCache<TypeData> typeDataMap = TypeCache.createDefault();
 	private boolean serializationSubclassAware;
 	private Class<? extends Annotation> jsonAnnotation;
 

File: jodd-madvoc/src/main/java/jodd/madvoc/component/ScopeDataInspector.java
Patch:
@@ -181,7 +181,7 @@ protected InjectionPoint buildInjectionPoint(
 		return new InjectionPoint(propertyType, name, targetName, scopeResolver.defaultOrScopeType(scope));
 	}
 
-	private TypeCache<ScopeData> scopeDataTypeCache = TypeCache.create(TypeCache.Implementation.MAP);
+	private TypeCache<ScopeData> scopeDataTypeCache = TypeCache.createDefault();
 
 	/**
 	 * Cached version of {@link #inspectClassScopes(Class)}. Use it in runtime when

File: jodd-madvoc/src/main/java/jodd/madvoc/interceptor/AnnotatedPropertyInterceptor.java
Patch:
@@ -25,16 +25,15 @@
 
 package jodd.madvoc.interceptor;
 
+import jodd.cache.TypeCache;
 import jodd.introspector.ClassDescriptor;
 import jodd.introspector.ClassIntrospector;
 import jodd.introspector.PropertyDescriptor;
 import jodd.madvoc.ActionRequest;
 
 import java.lang.annotation.Annotation;
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
 
 /**
  * Performs some operation on all annotated properties. Helpful with injection of
@@ -69,7 +68,7 @@ public Object intercept(final ActionRequest actionRequest) throws Exception {
 
 	// ---------------------------------------------------------------- cache and lookup
 
-	protected Map<Class<?>, PropertyDescriptor[]> annotatedProperties = new HashMap<>();
+	protected TypeCache<PropertyDescriptor[]> annotatedProperties = TypeCache.createDefault();
 	protected static final PropertyDescriptor[] EMPTY = new PropertyDescriptor[0];
 
 	/**

File: jodd-petite/src/main/java/jodd/petite/PetiteContainer.java
Patch:
@@ -434,9 +434,7 @@ public PetiteRegistry createContainerRegistry() {
 	 * Shutdowns container. After container is down, it can't be used anymore.
 	 */
 	public void shutdown() {
-		for (final Scope scope : scopes.values()) {
-			scope.shutdown();
-		}
+		scopes.forEachValue(Scope::shutdown);
 
 		externalsCache.clear();
 		beans.clear();

File: jodd-petite/src/main/java/jodd/petite/ScopedProxyManager.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.petite;
 
+import jodd.cache.TypeCache;
 import jodd.log.Logger;
 import jodd.log.LoggerFactory;
 import jodd.petite.proxetta.ProxettaBeanDefinition;
@@ -62,7 +63,7 @@ public class ScopedProxyManager {
 
 	protected ProxyAspect aspect = new ProxyAspect(ScopedProxyAdvice.class, new AllMethodsPointcut());
 
-	protected Map<Class, Class> proxyClasses = new HashMap<>();
+	protected TypeCache<Class> proxyClasses = TypeCache.createDefault();
 	protected Map<String, Object> proxies = new HashMap<>();
 
 	public ScopedProxyManager() {

File: jodd-petite/src/test/java/jodd/petite/OutsideObjectsTest.java
Patch:
@@ -63,7 +63,7 @@ void testWire() {
 	@Test
 	void testWire_withCache() {
 		PetiteContainer pc = new PetiteContainer();
-		pc.setExternalsCache(TypeCache.Implementation.MAP);
+		pc.setExternalsCache(TypeCache.createDefault());
 		pc.registerPetiteBean(InBean.class);
 
 		BeBean beBean = new BeBean();

File: jodd-proxetta/src/main/java/jodd/methref/Methref.java
Patch:
@@ -25,12 +25,11 @@
 
 package jodd.methref;
 
+import jodd.cache.TypeCache;
 import jodd.proxetta.ProxettaUtil;
 import jodd.util.ClassUtil;
 
 import java.lang.reflect.Field;
-import java.util.Map;
-import java.util.WeakHashMap;
 
 /**
  * Super tool for getting method references (names) in compile-time.
@@ -39,7 +38,7 @@
 public class Methref<C> {
 
 	private static final MethrefProxetta proxetta = new MethrefProxetta();
-	private static final Map<Class, Class> cache = new WeakHashMap<>();
+	private static final TypeCache<Class> cache = TypeCache.createDefault();
 
 	private final C instance;
 

File: jodd-proxetta/src/main/java/jodd/pathref/Pathref.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.pathref;
 
+import jodd.cache.TypeCache;
 import jodd.proxetta.ProxettaUtil;
 import jodd.util.ClassUtil;
 import jodd.util.StringPool;
@@ -34,8 +35,6 @@
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Map;
-import java.util.WeakHashMap;
 
 /**
  * Super tool for getting calling path reference in compile-time.
@@ -46,7 +45,7 @@ public class Pathref<C> {
 	public static final int ALL = -1;
 
 	private static final PathrefProxetta proxetta = new PathrefProxetta();
-	private static final Map<Class, Class> cache = new WeakHashMap<>();
+	private static final TypeCache<Class> cache = TypeCache.createDefault();
 
 	private final C instance;
 

File: jodd-proxetta/src/main/java/jodd/proxetta/advice/DelegateAdviceUtil.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.proxetta.advice;
 
+import jodd.cache.TypeCache;
 import jodd.proxetta.MethodInfo;
 import jodd.proxetta.Proxetta;
 import jodd.proxetta.ProxettaException;
@@ -33,14 +34,13 @@
 import jodd.util.ClassUtil;
 
 import java.lang.reflect.Field;
-import java.util.HashMap;
 
 /**
  * Utilities for applying {@link DelegateAdvice} to target.
  */
 public class DelegateAdviceUtil {
 
-	private static HashMap<Class, Class> advicesMap = new HashMap<>();
+	private static TypeCache<Class> advicesMap = TypeCache.createDefault();
 
 	/**
 	 * Proxy Proxetta, applied on all public methods of the target class.

File: jodd-vtor/src/main/java/jodd/vtor/ValidationContext.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.vtor;
 
+import jodd.cache.TypeCache;
 import jodd.introspector.ClassDescriptor;
 import jodd.introspector.ClassIntrospector;
 import jodd.introspector.FieldDescriptor;
@@ -75,7 +76,7 @@ public void addAll(final List<Check> checkList) {
 
 	// ---------------------------------------------------------------- annotation resolver
 
-	private static Map<Class, List<Check>> cache = new HashMap<>();
+	private static TypeCache<List<Check>> cache = TypeCache.createDefault();
 
 	/**
 	 * Resolve validation context for provided target class.

File: jodd-db/src/main/java/jodd/db/type/SqlType.java
Patch:
@@ -25,7 +25,7 @@
 
 package jodd.db.type;
 
-import jodd.bean.JoddBean;
+import jodd.typeconverter.TypeConverterManager;
 import jodd.util.ClassUtil;
 
 import java.sql.PreparedStatement;
@@ -75,7 +75,7 @@ protected SqlType() {
 	 * Stores value in database. Value is casted to sql type.
 	 */
 	public void storeValue(final PreparedStatement st, final int index, final Object value, final int dbSqlType) throws SQLException {
-		T t = JoddBean.defaults().getTypeConverterManager().convertType(value, sqlType);
+		T t = TypeConverterManager.get().convertType(value, sqlType);
 		set(st, index, t, dbSqlType);
 	}
 
@@ -104,7 +104,7 @@ protected <E> E prepareGetValue(final T t, final Class<E> destinationType) {
 		if (destinationType == null) {
 			return (E) t;
 		}
-		return JoddBean.defaults().getTypeConverterManager().convertType(t, destinationType);
+		return TypeConverterManager.get().convertType(t, destinationType);
 	}
 
 }
\ No newline at end of file

File: jodd-json/src/main/java/jodd/json/BeanSerializer.java
Patch:
@@ -54,7 +54,7 @@ public void serialize() {
 	 */
 	@Override
 	protected final void onSerializableProperty(String propertyName, final PropertyDescriptor propertyDescriptor) {
-		Object value;
+		final Object value;
 
 		if (propertyDescriptor == null) {
 			// metadata - classname

File: jodd-mail/src/main/java/jodd/mail/EMLParser.java
Patch:
@@ -71,11 +71,10 @@ public ReceivedEmail parse(final String emlContent, final String charset) throws
 	 * @return {@link ReceivedEmail}.
 	 * @throws MessagingException if {@link MimeMessage} cannot be created.
 	 * @see #parse(String, String)
-	 * @see JoddCore#getEncoding()
 	 */
 	public ReceivedEmail parse(final String emlContent) throws MessagingException {
 		try {
-			return parse(emlContent, JoddCore.defaults().getEncoding());
+			return parse(emlContent, JoddCore.encoding);
 		} catch (final UnsupportedEncodingException ignore) {
 			return null;
 		}

File: jodd-mail/src/main/java/jodd/mail/EmailAddress.java
Patch:
@@ -157,7 +157,7 @@ public String toString() {
 	 */
 	public InternetAddress toInternetAddress() throws AddressException {
 		try {
-			return new InternetAddress(email, personalName, JoddCore.defaults().getEncoding());
+			return new InternetAddress(email, personalName, JoddCore.encoding);
 		} catch (final UnsupportedEncodingException ueex) {
 			throw new AddressException(ueex.toString());
 		}

File: jodd-mail/src/main/java/jodd/mail/EmailMessage.java
Patch:
@@ -61,13 +61,13 @@ public EmailMessage(final String content, final String mimeType, final String en
 	}
 
 	/**
-	 * Uses UTF-8 email content by default (as per {@link JoddCore#getEncoding()}.
+	 * Uses UTF-8 email content by default (as per {@link JoddCore#encoding}.
 	 *
 	 * @param content  The content as a {@link String}.
 	 * @param mimeType The MIME type as a as a {@link String}.
 	 */
 	public EmailMessage(final String content, final String mimeType) {
-		this(content, mimeType, JoddCore.defaults().getEncoding());
+		this(content, mimeType, JoddCore.encoding);
 	}
 
 	// ---------------------------------------------------------------- getters

File: jodd-mail/src/main/java/jodd/mail/ReceiveMailSession.java
Patch:
@@ -49,7 +49,7 @@ public class ReceiveMailSession extends MailSession<Store> {
 	private Folder folder;
 
 	static {
-		EmailUtil.setupSystemMailProperties();
+		setupSystemMailProperties();
 	}
 
 	/**

File: jodd-mail/src/main/java/jodd/mail/SendMailSession.java
Patch:
@@ -55,7 +55,7 @@ public class SendMailSession extends MailSession<Transport> {
 	private static final String INLINE = "inline";
 
 	static {
-		EmailUtil.setupSystemMailProperties();
+		setupSystemMailProperties();
 	}
 
 	/**

File: jodd-servlet/src/main/java/jodd/servlet/filter/CharacterEncodingFilter.java
Patch:
@@ -132,7 +132,7 @@ public void init(final FilterConfig filterConfig) {
 		this.filterConfig = filterConfig;
 		this.encoding = filterConfig.getInitParameter("encoding");
 		if (this.encoding == null) {
-			this.encoding = JoddCore.defaults().getEncoding();
+			this.encoding = JoddCore.encoding;
 		}
 		this.ignore = Converter.get().toBooleanValue(filterConfig.getInitParameter("ignore"), true);
 	}

File: jodd-servlet/src/main/java/jodd/servlet/upload/MultipartRequest.java
Patch:
@@ -113,7 +113,7 @@ public MultipartRequest(final HttpServletRequest request, final FileUploadFactor
 			this.characterEncoding = request.getCharacterEncoding();
 		}
 		if (this.characterEncoding == null) {
-			this.characterEncoding = JoddCore.defaults().getEncoding();
+			this.characterEncoding = JoddCore.encoding;
 		}
 	}
 

File: jodd-madvoc/src/main/java/jodd/madvoc/result/ActionResult.java
Patch:
@@ -39,7 +39,7 @@ public interface ActionResult<T> {
 	/**
 	 * Renders result on given action result value.
 	 * @param actionRequest action request
-	 * @param resultValue action method result, may be <code>null</code>.
+	 * @param resultValue action method result, may be <code>null</code> or any type.
 	 */
 	void render(ActionRequest actionRequest, T resultValue) throws Exception;
 

File: jodd-madvoc/src/main/java/jodd/madvoc/result/JsonResult.java
Patch:
@@ -75,7 +75,6 @@ public JsonResult(final String body) {
 
 	public JsonResult status(final int status) {
 		this.status = status;
-		this.message = message;
 		return this;
 	}
 

File: jodd-madvoc/src/main/java/jodd/madvoc/result/Redirect.java
Patch:
@@ -31,6 +31,7 @@
 
 /**
  * Redirect result.
+ * @see PermRedirect
  */
 @RenderWith(ServletRedirectActionResult.class)
 public class Redirect extends PathResult {

File: jodd-petite/src/main/java/jodd/petite/ParamManager.java
Patch:
@@ -102,8 +102,8 @@ public String[] filterParametersForBeanName(String beanName, final boolean resol
 		}
 	}
 
-	public ValueInjectionPoint[] resolveParamInjectionPoints(final Object bean) {
-		final ClassDescriptor cd = JoddBean.defaults().getClassIntrospector().lookup(bean.getClass());
+	public ValueInjectionPoint[] resolveParamInjectionPoints(final Class type) {
+		final ClassDescriptor cd = JoddBean.defaults().getClassIntrospector().lookup(type);
 
 		final List<ValueInjectionPoint> valueInjectionPointList = new ArrayList<>();
 

File: jodd-petite/src/main/java/jodd/petite/resolver/DestroyMethodResolver.java
Patch:
@@ -40,9 +40,7 @@
  */
 public class DestroyMethodResolver {
 
-	public DestroyMethodPoint[] resolve(final Object bean) {
-		Class<?> type = bean.getClass();
-
+	public DestroyMethodPoint[] resolve(final Class<?> type) {
 		// lookup methods
 		List<DestroyMethodPoint> list = new ArrayList<>();
 		ClassDescriptor cd = new ClassDescriptor(type, false, false, false, null);

File: jodd-petite/src/main/java/jodd/petite/resolver/InitMethodResolver.java
Patch:
@@ -41,9 +41,7 @@
  */
 public class InitMethodResolver {
 
-	public InitMethodPoint[] resolve(final Object bean) {
-		Class<?> type = bean.getClass();
-
+	public InitMethodPoint[] resolve(final Class<?> type) {
 		// lookup methods
 		List<InitMethodPoint> list = new ArrayList<>();
 		ClassDescriptor cd = new ClassDescriptor(type, false, false, false, null);

File: jodd-mail/src/main/java/jodd/mail/ImapSslServer.java
Patch:
@@ -54,7 +54,7 @@ public ImapSslServer(final String host, final int port, final Authenticator auth
 
 	@Override
 	protected Properties createSessionProperties() {
-		final Properties props = super.getSessionProperties();
+		final Properties props = super.createSessionProperties();
 		props.setProperty(MAIL_IMAP_SOCKET_FACTORY_PORT, String.valueOf(getPort()));
 		props.setProperty(MAIL_IMAP_SOCKET_FACTORY_CLASS, "javax.net.ssl.SSLSocketFactory");
 		props.setProperty(MAIL_IMAP_SOCKET_FACTORY_FALLBACK, StringPool.FALSE);

File: jodd-mail/src/main/java/jodd/mail/Pop3SslServer.java
Patch:
@@ -50,7 +50,7 @@ public Pop3SslServer(final String host, final int port, final Authenticator auth
 
 	@Override
 	protected Properties createSessionProperties() {
-		final Properties props = super.getSessionProperties();
+		final Properties props = super.createSessionProperties();
 		props.setProperty(MAIL_POP3_SOCKET_FACTORY_PORT, String.valueOf(getPort()));
 		props.setProperty(MAIL_POP3_SOCKET_FACTORY_CLASS, "javax.net.ssl.SSLSocketFactory");
 		props.setProperty(MAIL_POP3_SOCKET_FACTORY_FALLBACK, StringPool.FALSE);

File: jodd-bean/src/main/java/jodd/bean/BeanUtilUtil.java
Patch:
@@ -92,6 +92,7 @@ protected Object convertType(final Object value, final Class type) {
 	/**
 	 * Converter to collection.
 	 */
+	@SuppressWarnings("unchecked")
 	protected Object convertToCollection(final Object value, final Class destinationType, final Class componentType) {
 		return typeConverterManager.convertToCollection(value, destinationType, componentType);
 	}
@@ -139,6 +140,7 @@ protected Object arrayForcedGet(final BeanProperty bp, Object array, final int i
 		Object value = Array.get(array, index);
 		if (value == null) {
 			try {
+				//noinspection unchecked
 				value = ClassUtil.newInstance(componentType);
 			} catch (Exception ex) {
 				if (isSilent) {

File: jodd-bean/src/main/java/jodd/typeconverter/impl/CollectionConverter.java
Patch:
@@ -133,6 +133,7 @@ protected Collection<T> createCollection(final int length) {
 	protected Collection<T> convertToSingleElementCollection(final Object value) {
 		Collection<T> collection = createCollection(0);
 
+		//noinspection unchecked
 		collection.add((T) value);
 
 		return collection;

File: jodd-joy/src/main/java/jodd/joy/JoyProxetta.java
Patch:
@@ -48,7 +48,6 @@ public JoyProxetta() {
 
 	/**
 	 * Returns proxetta once it is created.
-	 * @return
 	 */
 	public ProxyProxetta getProxetta() {
 		return proxyProxetta;

File: jodd-mail/src/main/java/jodd/mail/EMLParser.java
Patch:
@@ -71,7 +71,7 @@ public ReceivedEmail parse(final String emlContent, final String charset) throws
 	 * @return {@link ReceivedEmail}.
 	 * @throws MessagingException if {@link MimeMessage} cannot be created.
 	 * @see #parse(String, String)
-	 * @see JoddCoreDefaults#getEncoding()
+	 * @see JoddCore#getEncoding()
 	 */
 	public ReceivedEmail parse(final String emlContent) throws MessagingException {
 		try {

File: jodd-mail/src/main/java/jodd/mail/EmailMessage.java
Patch:
@@ -61,11 +61,10 @@ public EmailMessage(final String content, final String mimeType, final String en
 	}
 
 	/**
-	 * Uses UTF-8 email content by default (as per {@link JoddCoreDefaults#getEncoding()}.
+	 * Uses UTF-8 email content by default (as per {@link JoddCore#getEncoding()}.
 	 *
 	 * @param content  The content as a {@link String}.
 	 * @param mimeType The MIME type as a as a {@link String}.
-	 * @see JoddCoreDefaults#getEncoding()
 	 */
 	public EmailMessage(final String content, final String mimeType) {
 		this(content, mimeType, JoddCore.defaults().getEncoding());

File: jodd-mail/src/main/java/jodd/mail/ImapServer.java
Patch:
@@ -49,9 +49,6 @@ public class ImapServer extends MailServer<ReceiveMailSession> {
 	 */
 	protected static final int DEFAULT_IMAP_PORT = 143;
 
-	/**
-	 * {@inheritDoc}
-	 */
 	public ImapServer(final String host, final int port, final Authenticator authenticator) {
 		super(host, port == -1 ? DEFAULT_IMAP_PORT : port, authenticator);
 	}

File: jodd-mail/src/main/java/jodd/mail/ImapSslServer.java
Patch:
@@ -48,9 +48,6 @@ public class ImapSslServer extends ImapServer {
 	 */
 	protected static final int DEFAULT_SSL_PORT = 993;
 
-	/**
-	 * {@inheritDoc}
-	 */
 	public ImapSslServer(final String host, final int port, final Authenticator authenticator) {
 		super(host, port == -1 ? DEFAULT_SSL_PORT : port, authenticator);
 	}

File: jodd-mail/src/main/java/jodd/mail/Pop3SslServer.java
Patch:
@@ -44,9 +44,6 @@ public class Pop3SslServer extends Pop3Server {
 	protected static final String MAIL_POP3_SOCKET_FACTORY_FALLBACK = "mail.pop3.socketFactory.fallback";
 	protected static final int DEFAULT_SSL_PORT = 995;
 
-	/**
-	 * {@inheritDoc}
-	 */
 	public Pop3SslServer(final String host, final int port, final Authenticator authenticator) {
 		super(host, port == -1 ? DEFAULT_SSL_PORT : port, authenticator);
 	}

File: jodd-mail/src/main/java/jodd/mail/SmtpServer.java
Patch:
@@ -80,9 +80,6 @@ protected T _this() {
 		return (T) this;
 	}
 
-	/**
-	 * {@inheritDoc}
-	 */
 	public SmtpServer(final String host, final int port, final Authenticator authenticator) {
 		super(host, port == -1 ? DEFAULT_SMTP_PORT : port, authenticator);
 	}

File: jodd-mail/src/main/java/jodd/mail/SmtpSslServer.java
Patch:
@@ -46,9 +46,6 @@ public class SmtpSslServer extends SmtpServer<SmtpSslServer> {
 	 */
 	protected static final int DEFAULT_SSL_PORT = 465;
 
-	/**
-	 * {@inheritDoc}
-	 */
 	public SmtpSslServer(final String host, final int port, final Authenticator authenticator) {
 		super(host, port == -1 ? DEFAULT_SSL_PORT : port, authenticator);
 	}

File: jodd-madvoc/src/testInt/java/jodd/madvoc/DefaultViewActionTestBase.java
Patch:
@@ -31,7 +31,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
-class DefaultViewActionTestBase {
+abstract class DefaultViewActionTestBase {
 
 	@Test
 	void testDefaultPage() {

File: jodd-madvoc/src/test/java/jodd/madvoc/result/ServletDispatcherResultTest.java
Patch:
@@ -65,6 +65,8 @@ protected boolean targetExists(ActionRequest actionRequest, String target) {
 			}
 		};
 
+		sdr.madvocConfig = webapp.madvocContainer().lookupComponent(MadvocConfig.class);
+
 		ResultMapper resultMapper = webapp.madvocContainer().lookupComponent(ResultMapper.class);
 		BeanUtil.declared.setProperty(sdr, "resultMapper", resultMapper);
 

File: jodd-madvoc/src/testInt/java/jodd/madvoc/MadvocSuiteTest.java
Patch:
@@ -142,4 +142,6 @@ class MissingActionTest extends MissingActionTestBase {}
 	class ComponentTest extends ComponentTestBase {}
 	@Nested
 	class CookieTest extends CookieTestBase {}
-}
+	@Nested
+	class DefaultViewActionTest extends DefaultViewActionTestBase {}
+}
\ No newline at end of file

File: jodd-madvoc/src/main/java/jodd/madvoc/MadvocServletFilter.java
Patch:
@@ -80,7 +80,7 @@ public void init(final FilterConfig filterConfig) throws ServletException {
 			return;
 		}
 
-		throw new ServletException("Madvoc nor WebApp not found! Use MadvocContextListener to create Madvoc or " +
+		throw new ServletException("Neither Madvoc or WebApp found! Use MadvocContextListener to create Madvoc or " +
 			"WebApp#withServletContext() to make it available.");
 	}
 

File: jodd-madvoc/src/main/java/jodd/madvoc/injector/RequestBodyScopeInject.java
Patch:
@@ -28,10 +28,10 @@
 import jodd.json.JsonParser;
 import jodd.madvoc.ActionRequest;
 import jodd.madvoc.ScopeType;
+import jodd.servlet.ServletUtil;
 import jodd.util.StringUtil;
 
 import java.io.IOException;
-import java.util.stream.Collectors;
 
 public class RequestBodyScopeInject implements Injector {
 
@@ -46,7 +46,7 @@ public void inject(final ActionRequest actionRequest) {
 
 		String body;
 		try {
-			body = actionRequest.getHttpServletRequest().getReader().lines().collect(Collectors.joining());
+			body = ServletUtil.readRequestBodyFromStream(actionRequest.getHttpServletRequest());
 		} catch (IOException ignore) {
 			return;
 		}

File: jodd-madvoc/src/main/java/jodd/madvoc/injector/ServletContextScopeInjector.java
Patch:
@@ -109,7 +109,7 @@ public void inject(final ActionRequest actionRequest) {
 				value = new HttpServletRequestParamMap(servletRequest);
 			} else if (in.name.equals(REQUEST_BODY)) {
 				try {
-					value = ServletUtil.readRequestBody(servletRequest);
+					value = ServletUtil.readRequestBodyFromStream(servletRequest);
 				} catch (IOException e) {
 					value = e.toString();
 				}

File: jodd-joy/src/testInt/java/jodd/joy/MyWebApplication.java
Patch:
@@ -27,9 +27,8 @@
 
 import jodd.log.LoggerFactory;
 import jodd.log.impl.SimpleLogger;
-import jodd.madvoc.petite.PetiteWebApp;
 
-public class MyWebApplication extends PetiteWebApp {
+public class MyWebApplication extends JoyContextListener {
 
 	public MyWebApplication() {
 		LoggerFactory.setLoggerProvider(SimpleLogger.PROVIDER);

File: jodd-http/src/main/java/jodd/http/HttpRequest.java
Patch:
@@ -480,7 +480,7 @@ public String queryString() {
 
 	/**
 	 * Defines encoding for query parameters. Default value is
-	 * copied from {@link JoddHttpDefaults#queryEncoding}.
+	 * copied from {@link JoddHttp#queryEncoding}.
 	 */
 	public HttpRequest queryEncoding(final String encoding) {
 		this.queryEncoding = encoding;

File: jodd-http/src/main/java/jodd/http/HttpUtil.java
Patch:
@@ -219,7 +219,7 @@ public static String extractHeaderParameter(final String header, final String pa
 			index++;
 
 			// skip whitespaces
-			while (header.charAt(index) == ' ') {
+			while (index < header.length() && header.charAt(index) == ' ') {
 				index++;
 			}
 

File: jodd-bean/src/test/java/jodd/typeconverter/LocaleConverterTest.java
Patch:
@@ -42,8 +42,9 @@ void testConversion() {
 		assertNull(localeConverter.convert(null));
 
 		assertEquals(new Locale("en"), localeConverter.convert("en"));
-		assertEquals(new Locale("en", "US"), localeConverter.convert("en_US"));
-		assertEquals(new Locale("en", "US", "win"), localeConverter.convert("en_US_win"));
+		assertEquals(new Locale("en", "US"), localeConverter.convert("en-US"));
+		assertEquals(new Locale("en", "US"), localeConverter.convert("en-US-win"));
+		assertEquals(Locale.forLanguageTag("ja-JP-x-lvariant-JP"), localeConverter.convert("ja-JP-x-lvariant-JP"));
 
 		assertEquals(new Locale("en"), localeConverter.convert(new Locale("en")));
 

File: jodd-bean/src/main/java/jodd/bean/BeanUtilUtil.java
Patch:
@@ -48,8 +48,8 @@ abstract class BeanUtilUtil implements BeanUtil {
 
 	// ---------------------------------------------------------------- introspector
 
-	protected ClassIntrospector introspector = ClassIntrospector.get();
-	protected TypeConverterManager typeConverterManager = TypeConverterManager.get();
+	protected ClassIntrospector introspector = JoddBean.defaults().getClassIntrospector();
+	protected TypeConverterManager typeConverterManager = JoddBean.defaults().getTypeConverterManager();
 
 	/**
 	 * Sets {@link ClassIntrospector introspector} implementation.

File: jodd-bean/src/main/java/jodd/bean/BeanVisitor.java
Patch:
@@ -26,7 +26,6 @@
 package jodd.bean;
 
 import jodd.introspector.ClassDescriptor;
-import jodd.introspector.ClassIntrospector;
 import jodd.introspector.FieldDescriptor;
 import jodd.introspector.MethodDescriptor;
 import jodd.introspector.PropertyDescriptor;
@@ -83,7 +82,7 @@ public abstract class BeanVisitor implements InExRuleMatcher<String, String> {
 	 * Returns all bean property names.
 	 */
 	protected String[] getAllBeanPropertyNames(final Class type, final boolean declared) {
-		ClassDescriptor classDescriptor = ClassIntrospector.get().lookup(type);
+		ClassDescriptor classDescriptor = JoddBean.defaults().getClassIntrospector().lookup(type);
 
 		PropertyDescriptor[] propertyDescriptors = classDescriptor.getAllPropertyDescriptors();
 

File: jodd-bean/src/main/java/jodd/introspector/PropertyDescriptor.java
Patch:
@@ -25,6 +25,8 @@
 
 package jodd.introspector;
 
+import jodd.bean.JoddBean;
+
 /**
  * Property descriptor. It consist of read, write and field descriptor.
  * Only one of those three descriptors may exist.
@@ -100,7 +102,7 @@ protected FieldDescriptor findField(final String fieldName) {
 
 		for (Class superclass : superclasses) {
 
-			ClassDescriptor classDescriptor = ClassIntrospector.get().lookup(superclass);
+			ClassDescriptor classDescriptor = JoddBean.defaults().getClassIntrospector().lookup(superclass);
 
 			fieldDescriptor = classDescriptor.getFieldDescriptor(fieldName, true);
 

File: jodd-bean/src/main/java/jodd/typeconverter/impl/CollectionConverter.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.typeconverter.impl;
 
+import jodd.bean.JoddBean;
 import jodd.typeconverter.TypeConversionException;
 import jodd.typeconverter.TypeConverter;
 import jodd.typeconverter.TypeConverterManager;
@@ -49,7 +50,7 @@ public class CollectionConverter<T> implements TypeConverter<Collection<T>> {
 	public CollectionConverter(
 		final Class<? extends Collection> collectionType,
 		final Class<T> targetComponentType) {
-		this(TypeConverterManager.get(), collectionType, targetComponentType);
+		this(JoddBean.defaults().getTypeConverterManager(), collectionType, targetComponentType);
 	}
 
 	public CollectionConverter(

File: jodd-bean/src/main/java/jodd/typeconverter/impl/FileUploadConverter.java
Patch:
@@ -23,11 +23,11 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.upload.typeconverter;
+package jodd.typeconverter.impl;
 
+import jodd.io.upload.FileUpload;
 import jodd.typeconverter.TypeConversionException;
 import jodd.typeconverter.TypeConverter;
-import jodd.upload.FileUpload;
 
 /**
  * Converts given object to {@link FileUpload}.
@@ -39,6 +39,7 @@
  */
 public class FileUploadConverter implements TypeConverter<FileUpload> {
 
+	@Override
 	public FileUpload convert(final Object value) {
 		if (value == null) {
 			return null;

File: jodd-bean/src/test/java/jodd/bean/BeanUtilGenericsTest.java
Patch:
@@ -27,7 +27,6 @@
 
 import jodd.bean.fixtures.Woof;
 import jodd.introspector.ClassDescriptor;
-import jodd.introspector.ClassIntrospector;
 import jodd.introspector.PropertyDescriptor;
 import org.junit.jupiter.api.Test;
 
@@ -40,7 +39,7 @@ class BeanUtilGenericsTest {
 	void testAllBeanSetters() {
 		Woof woof = new Woof();
 		Class type = woof.getClass();
-		ClassDescriptor cd = ClassIntrospector.get().lookup(type);
+		ClassDescriptor cd = JoddBean.defaults().getClassIntrospector().lookup(type);
 		PropertyDescriptor[] properties = cd.getAllPropertyDescriptors();
 		assertNotNull(properties);
 		assertEquals(7, properties.length);

File: jodd-bean/src/test/java/jodd/bean/BeanUtilTest.java
Patch:
@@ -46,7 +46,6 @@
 import jodd.bean.fixtures.XBean;
 import jodd.bean.fixtures.ZBean;
 import jodd.introspector.ClassDescriptor;
-import jodd.introspector.ClassIntrospector;
 import jodd.introspector.MethodDescriptor;
 import jodd.introspector.PropertyDescriptor;
 import jodd.mutable.MutableInteger;
@@ -1307,7 +1306,7 @@ void testIsGetBoolean() {
 		assertNotNull(value);
 		assertTrue((Boolean) value);
 
-		ClassDescriptor cd = ClassIntrospector.get().lookup(IsGetBool.class);
+		ClassDescriptor cd = JoddBean.defaults().getClassIntrospector().lookup(IsGetBool.class);
 
 		PropertyDescriptor[] propertyDescriptors = cd.getAllPropertyDescriptors();
 
@@ -1326,7 +1325,7 @@ void testIsGetBoolean() {
 		assertNotNull(value);
 		assertTrue((Boolean) value);
 
-		cd = ClassIntrospector.get().lookup(GetIsBool.class);
+		cd = JoddBean.defaults().getClassIntrospector().lookup(GetIsBool.class);
 		assertEquals("flag", propertyDescriptors[0].getName());
 		assertEquals("isFlag", propertyDescriptors[0].getReadMethodDescriptor().getMethod().getName());
 		mds = cd.getAllMethodDescriptors();

File: jodd-bean/src/test/java/jodd/introspector/IntrospectorPropertyGenericsTest.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.introspector;
 
+import jodd.bean.JoddBean;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -50,7 +51,7 @@ static class Normal {
 
 	@Test
 	void testGenAction() {
-		ClassDescriptor cd = ClassIntrospector.get().lookup(GenAction.class);
+		ClassDescriptor cd = JoddBean.defaults().getClassIntrospector().lookup(GenAction.class);
 
 		FieldDescriptor fd = cd.getFieldDescriptor("input", true);
 
@@ -74,7 +75,7 @@ void testGenAction() {
 
 	@Test
 	void testNormal() {
-		ClassDescriptor cd = ClassIntrospector.get().lookup(Normal.class);
+		ClassDescriptor cd = JoddBean.defaults().getClassIntrospector().lookup(Normal.class);
 
 		FieldDescriptor fd = cd.getFieldDescriptor("input", true);
 

File: jodd-bean/src/test/java/jodd/typeconverter/ArraysTest.java
Patch:
@@ -37,7 +37,7 @@
 
 class ArraysTest {
 
-	private TypeConverterManager typeConverterManager = JoddBean.defaults().typeConverterManager();
+	private TypeConverterManager typeConverterManager = JoddBean.defaults().getTypeConverterManager();
 
 	public static final Integer[] INTEGERS = new Integer[] {1, 2, 3};
 	public static final int[] INTS = new int[] {1, 2, 3};

File: jodd-bean/src/test/java/jodd/typeconverter/BooleanArrayConverterTest.java
Patch:
@@ -38,7 +38,7 @@
 
 class BooleanArrayConverterTest {
 
-	private TypeConverterManager typeConverterManager = JoddBean.defaults().typeConverterManager();
+	private TypeConverterManager typeConverterManager = JoddBean.defaults().getTypeConverterManager();
 
 	@Test
 	void testConversion() {

File: jodd-bean/src/test/java/jodd/typeconverter/ByteArrayConverterTest.java
Patch:
@@ -40,7 +40,7 @@
 
 class ByteArrayConverterTest {
 
-	ByteArrayConverter byteArrayConverter = (ByteArrayConverter) JoddBean.defaults().typeConverterManager().lookup(byte[].class);
+	ByteArrayConverter byteArrayConverter = (ByteArrayConverter) JoddBean.defaults().getTypeConverterManager().lookup(byte[].class);
 
 	@Test
 	void testArrayConversion() {

File: jodd-bean/src/test/java/jodd/typeconverter/ClassArrayConverterTest.java
Patch:
@@ -35,7 +35,7 @@
 
 class ClassArrayConverterTest {
 	
-	private TypeConverterManager typeConverterManager = JoddBean.defaults().typeConverterManager();
+	private TypeConverterManager typeConverterManager = JoddBean.defaults().getTypeConverterManager();
 
 	@Test
 	@SuppressWarnings({"unchecked"})

File: jodd-bean/src/test/java/jodd/typeconverter/ConverterTest.java
Patch:
@@ -179,7 +179,7 @@ public Boolean convert(Object value) {
 
 		// change boolean converter! boolean[] depends on it!
 
-		TypeConverterManager typeConverterManager = JoddBean.defaults().typeConverterManager();
+		TypeConverterManager typeConverterManager = JoddBean.defaults().getTypeConverterManager();
 
 		typeConverterManager.register(boolean.class, booleanTypeConverter);
 

File: jodd-bean/src/test/java/jodd/typeconverter/DoubleArrayConverterTest.java
Patch:
@@ -41,7 +41,7 @@
 
 class DoubleArrayConverterTest {
 
-	private TypeConverterManager typeConverterManager = JoddBean.defaults().typeConverterManager();
+	private TypeConverterManager typeConverterManager = JoddBean.defaults().getTypeConverterManager();
 
 	@Test
 	void testConversion() {

File: jodd-bean/src/test/java/jodd/typeconverter/EnumTest.java
Patch:
@@ -38,9 +38,9 @@ public enum En {
 
 	@Test
 	void testCastEnums() {
-		En en = JoddBean.defaults().typeConverterManager().convertType("ONE", En.class);
+		En en = JoddBean.defaults().getTypeConverterManager().convertType("ONE", En.class);
 		assertEquals(En.ONE, en);
-		en = JoddBean.defaults().typeConverterManager().convertType("TWO", En.class);
+		en = JoddBean.defaults().getTypeConverterManager().convertType("TWO", En.class);
 		assertEquals(En.TWO, en);
 	}
 

File: jodd-bean/src/test/java/jodd/typeconverter/FloatArrayConverterTest.java
Patch:
@@ -41,7 +41,7 @@
 
 class FloatArrayConverterTest {
 
-	private TypeConverterManager typeConverterManager = JoddBean.defaults().typeConverterManager();
+	private TypeConverterManager typeConverterManager = JoddBean.defaults().getTypeConverterManager();
 
 	@Test
 	void testConversion() {

File: jodd-bean/src/test/java/jodd/typeconverter/IntegerArrayConverterTest.java
Patch:
@@ -42,7 +42,7 @@ class IntegerArrayConverterTest {
 
 	@Test
 	void testConversion() {
-		IntegerArrayConverter integerArrayConverter = (IntegerArrayConverter) JoddBean.defaults().typeConverterManager().lookup(int[].class);
+		IntegerArrayConverter integerArrayConverter = (IntegerArrayConverter) JoddBean.defaults().getTypeConverterManager().lookup(int[].class);
 
 		assertNull(integerArrayConverter.convert(null));
 

File: jodd-bean/src/test/java/jodd/typeconverter/LongArrayConverterTest.java
Patch:
@@ -42,7 +42,7 @@ class LongArrayConverterTest {
 
 	@Test
 	void testConversion() {
-		LongArrayConverter longArrayConverter = (LongArrayConverter) JoddBean.defaults().typeConverterManager().lookup(long[].class);
+		LongArrayConverter longArrayConverter = (LongArrayConverter) JoddBean.defaults().getTypeConverterManager().lookup(long[].class);
 
 		assertNull(longArrayConverter.convert(null));
 

File: jodd-bean/src/test/java/jodd/typeconverter/MatrixTest.java
Patch:
@@ -52,7 +52,7 @@ void testIntMatrix2() {
 		matrix.add(intsList(1, 2, 3));
 		matrix.add(intsList(9, 8, 7));
 
-		int[][] arr = JoddBean.defaults().typeConverterManager().convertType(matrix, int[][].class);
+		int[][] arr = JoddBean.defaults().getTypeConverterManager().convertType(matrix, int[][].class);
 
 		assertEquals(2, arr.length);
 
@@ -67,7 +67,7 @@ void testStringToIntMatrix() {
 				{"432", "345", "9832"}
 		};
 
-		int[][] arr = JoddBean.defaults().typeConverterManager().convertType(strings, int[][].class);
+		int[][] arr = JoddBean.defaults().getTypeConverterManager().convertType(strings, int[][].class);
 
 		assertEquals(2, arr.length);
 
@@ -82,7 +82,7 @@ void testIntToStringMatrix() {
 				{432, 345, 9832}
 		};
 
-		String[][] arr = JoddBean.defaults().typeConverterManager().convertType(values, String[][].class);
+		String[][] arr = JoddBean.defaults().getTypeConverterManager().convertType(values, String[][].class);
 
 		assertEquals(2, arr.length);
 

File: jodd-bean/src/test/java/jodd/typeconverter/MutableByteConverterTest.java
Patch:
@@ -38,7 +38,7 @@ class MutableByteConverterTest {
 
 	@Test
 	void testConversion() {
-		MutableByteConverter mutableByteConverter = (MutableByteConverter) JoddBean.defaults().typeConverterManager().lookup(MutableByte.class);
+		MutableByteConverter mutableByteConverter = (MutableByteConverter) JoddBean.defaults().getTypeConverterManager().lookup(MutableByte.class);
 
 		assertNull(mutableByteConverter.convert(null));
 

File: jodd-bean/src/test/java/jodd/typeconverter/MutableDoubleConverterTest.java
Patch:
@@ -40,7 +40,7 @@ class MutableDoubleConverterTest {
 
 	@Test
 	void testConversion() {
-		MutableDoubleConverter mutableDoubleConverter = (MutableDoubleConverter) JoddBean.defaults().typeConverterManager().lookup(MutableDouble.class);
+		MutableDoubleConverter mutableDoubleConverter = (MutableDoubleConverter) JoddBean.defaults().getTypeConverterManager().lookup(MutableDouble.class);
 
 		assertNull(mutableDoubleConverter.convert(null));
 

File: jodd-bean/src/test/java/jodd/typeconverter/MutableFloatConverterTest.java
Patch:
@@ -40,7 +40,7 @@ class MutableFloatConverterTest {
 
 	@Test
 	void testConversion() {
-		MutableFloatConverter mutableFloatConverter = (MutableFloatConverter) JoddBean.defaults().typeConverterManager().lookup(MutableFloat.class);
+		MutableFloatConverter mutableFloatConverter = (MutableFloatConverter) JoddBean.defaults().getTypeConverterManager().lookup(MutableFloat.class);
 
 		assertNull(mutableFloatConverter.convert(null));
 

File: jodd-bean/src/test/java/jodd/typeconverter/MutableIntegerConverterTest.java
Patch:
@@ -38,7 +38,7 @@ class MutableIntegerConverterTest {
 
 	@Test
 	void testConversion() {
-		MutableIntegerConverter mutableIntegerConverter = (MutableIntegerConverter) JoddBean.defaults().typeConverterManager().lookup(MutableInteger.class);
+		MutableIntegerConverter mutableIntegerConverter = (MutableIntegerConverter) JoddBean.defaults().getTypeConverterManager().lookup(MutableInteger.class);
 
 		assertNull(mutableIntegerConverter.convert(null));
 

File: jodd-bean/src/test/java/jodd/typeconverter/MutableLongConverterTest.java
Patch:
@@ -39,7 +39,7 @@ class MutableLongConverterTest {
 	@Test
 	void testConversion() {
 		MutableLongConverter mutableLongConverter =
-			(MutableLongConverter) JoddBean.defaults().typeConverterManager().lookup(MutableLong.class);
+			(MutableLongConverter) JoddBean.defaults().getTypeConverterManager().lookup(MutableLong.class);
 
 		assertNull(mutableLongConverter.convert(null));
 

File: jodd-bean/src/test/java/jodd/typeconverter/MutableShortConverterTest.java
Patch:
@@ -38,7 +38,7 @@ class MutableShortConverterTest {
 
 	@Test
 	void testConversion() {
-		MutableShortConverter mutableShortConverter = (MutableShortConverter) JoddBean.defaults().typeConverterManager().lookup(MutableShort.class);
+		MutableShortConverter mutableShortConverter = (MutableShortConverter) JoddBean.defaults().getTypeConverterManager().lookup(MutableShort.class);
 
 		assertNull(mutableShortConverter.convert(null));
 

File: jodd-bean/src/test/java/jodd/typeconverter/ShortArrayConverterTest.java
Patch:
@@ -40,7 +40,7 @@ class ShortArrayConverterTest {
 
 	@Test
 	void testConversion() {
-		ShortArrayConverter shortArrayConverter = (ShortArrayConverter) JoddBean.defaults().typeConverterManager().lookup(short[].class);
+		ShortArrayConverter shortArrayConverter = (ShortArrayConverter) JoddBean.defaults().getTypeConverterManager().lookup(short[].class);
 
 		assertNull(shortArrayConverter.convert(null));
 

File: jodd-bean/src/test/java/jodd/typeconverter/StringArrayConverterTest.java
Patch:
@@ -40,7 +40,7 @@
 
 class StringArrayConverterTest {
 	
-	private TypeConverterManager typeConverterManager = JoddBean.defaults().typeConverterManager();
+	private TypeConverterManager typeConverterManager = JoddBean.defaults().getTypeConverterManager();
 
 	@Test
 	void testConversion() {

File: jodd-bean/src/test/java/jodd/typeconverter/ToCollectionTest.java
Patch:
@@ -45,7 +45,7 @@ void testConvertToList() {
 		set.add("456");
 
 		List<Integer> list =
-			JoddBean.defaults().typeConverterManager().convertToCollection(set, List.class, Integer.class);
+			JoddBean.defaults().getTypeConverterManager().convertToCollection(set, List.class, Integer.class);
 
 		assertNotNull(list);
 		assertEquals(2, list.size());

File: jodd-core/src/main/java/jodd/io/upload/FileUpload.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.upload;
+package jodd.io.upload;
 
 import java.io.IOException;
 import java.io.InputStream;

File: jodd-core/src/main/java/jodd/io/upload/FileUploadFactory.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.upload;
+package jodd.io.upload;
 
 /**
  * {@link FileUpload} factory for handling uploaded files. Implementations may

File: jodd-core/src/main/java/jodd/io/upload/FileUploadHeader.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.upload;
+package jodd.io.upload;
 
 import jodd.io.FileNameUtil;
 import jodd.util.StringPool;

File: jodd-core/src/main/java/jodd/io/upload/MultipartRequestInputStream.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.upload;
+package jodd.io.upload;
 
 import jodd.io.FastByteArrayOutputStream;
 

File: jodd-core/src/main/java/jodd/io/upload/MultipartStreamParser.java
Patch:
@@ -23,10 +23,10 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.upload;
+package jodd.io.upload;
 
 import jodd.io.FastByteArrayOutputStream;
-import jodd.upload.impl.MemoryFileUploadFactory;
+import jodd.io.upload.impl.MemoryFileUploadFactory;
 import jodd.util.ArraysUtil;
 
 import java.io.IOException;

File: jodd-core/src/main/java/jodd/io/upload/impl/package-info.java
Patch:
@@ -26,4 +26,4 @@
 /**
  * Various implementations of uploaded files and their factories.
  */
-package jodd.upload.impl;
\ No newline at end of file
+package jodd.io.upload.impl;
\ No newline at end of file

File: jodd-core/src/main/java/jodd/io/upload/package-info.java
Patch:
@@ -26,4 +26,4 @@
 /**
  * Multipart streams and file uploads.
  */
-package jodd.upload;
\ No newline at end of file
+package jodd.io.upload;
\ No newline at end of file

File: jodd-core/src/main/java/jodd/util/ClassLoaderUtil.java
Patch:
@@ -26,9 +26,9 @@
 package jodd.util;
 
 import jodd.core.JavaBridge;
+import jodd.core.JoddCore;
 import jodd.io.FileUtil;
 import jodd.io.StreamUtil;
-import jodd.util.cl.ClassLoaderStrategy;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -423,15 +423,15 @@ public static InputStream getClassAsStream(final String className, final ClassLo
 	 * @see jodd.util.cl.DefaultClassLoaderStrategy
 	 */
 	public static Class loadClass(final String className) throws ClassNotFoundException {
-		return ClassLoaderStrategy.get().loadClass(className, null);
+		return JoddCore.defaults().getClassLoaderStrategy().loadClass(className, null);
 	}
 	
 	/**
 	 * Loads a class using default class loader strategy.
 	 * @see jodd.util.cl.DefaultClassLoaderStrategy
 	 */
 	public static Class loadClass(final String className, final ClassLoader classLoader) throws ClassNotFoundException {
-		return ClassLoaderStrategy.get().loadClass(className, classLoader);
+		return JoddCore.defaults().getClassLoaderStrategy().loadClass(className, classLoader);
 	}
 
 }

File: jodd-core/src/main/java/jodd/util/StringUtil.java
Patch:
@@ -3077,7 +3077,7 @@ public static String ifNotNull(final String input, final Function<String, String
 	 */
 	public static byte[] getBytes(final String string) {
 		try {
-			return string.getBytes(JoddCore.defaults().defaults().getEncoding());
+			return string.getBytes(JoddCore.defaults().getEncoding());
 		} catch (UnsupportedEncodingException e) {
 			throw new RuntimeException(e);
 		}
@@ -3092,7 +3092,7 @@ public static byte[] getBytes(final String string, final String charsetName) {
 
 	public static String newString(final byte[] bytes) {
 		try {
-			return new String(bytes, JoddCore.defaults().defaults().getEncoding());
+			return new String(bytes, JoddCore.defaults().getEncoding());
 		} catch (UnsupportedEncodingException e) {
 			throw new RuntimeException(e);
 		}

File: jodd-core/src/main/java/jodd/util/UnsafeUtil.java
Patch:
@@ -40,7 +40,6 @@ public class UnsafeUtil {
 
 	private static final boolean IS_ANDROID = SystemUtil.isHostAndroid();
 	private static final boolean HAS_UNSAFE = !IS_ANDROID && UnsafeInternal.hasUnsafe();
-	private static final JoddCoreDefaults JODD_CORE_DEFAULTS = JoddCore.defaults().defaults();
 
 	/**
 	 * Returns <code>true</code> if system has the <code>Unsafe</code>.
@@ -60,7 +59,7 @@ public static char[] getChars(final String string) {
 			return null;
 		}
 
-		if (!HAS_UNSAFE || !JODD_CORE_DEFAULTS.isUnsafeUsageEnabled()) {
+		if (!HAS_UNSAFE || !JoddCore.defaults().isUnsafeUsageEnabled()) {
 			return string.toCharArray();
 		}
 

File: jodd-core/src/main/java/jodd/util/net/URLDecoder.java
Patch:
@@ -39,7 +39,7 @@ public class URLDecoder {
 	 * Decodes URL elements.
 	 */
 	public static String decode(final String url) {
-		return decode(url, JoddCore.defaults().defaults().getEncoding(), false);
+		return decode(url, JoddCore.defaults().getEncoding(), false);
 	}
 
 	/**
@@ -56,7 +56,7 @@ public static String decode(final String source, final String encoding) {
 	 * Decodes query name or value.
 	 */
 	public static String decodeQuery(final String source) {
-		return decode(source, JoddCore.defaults().defaults().getEncoding(), true);
+		return decode(source, JoddCore.defaults().getEncoding(), true);
 	}
 
 	/**

File: jodd-core/src/test/java/jodd/io/StreamUtilTest.java
Patch:
@@ -602,7 +602,7 @@ void testCopy_Inputstream_Outputstream_ByteCount(String expected, String text, i
 
         Stream<Arguments> testdata_testCopy_Inputstream_Outputstream_ByteCount() throws Exception {
             return Stream.of(
-                    Arguments.of("The Unbearable Lightness of Java", "The Unbearable Lightness of Java", JoddCore.defaults().defaults().getIoBufferSize() + 250),
+                    Arguments.of("The Unbearable Lightness of Java", "The Unbearable Lightness of Java", JoddCore.defaults().getIoBufferSize() + 250),
                     Arguments.of("j", "jodd" , 1),
                     Arguments.of("jodd makes fun!", "jodd makes fun!",  15),
                     Arguments.of("", "text does not matter",  0)

File: jodd-core/src/test/java/jodd/io/upload/FileUploadTest.java
Patch:
@@ -23,13 +23,12 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.upload;
+package jodd.io.upload;
 
 import org.junit.jupiter.api.Test;
 
 import java.io.File;
 import java.io.FileInputStream;
-
 import java.io.IOException;
 import java.net.URL;
 

File: jodd-core/src/test/java/jodd/util/ClassLoaderUtilTest.java
Patch:
@@ -25,11 +25,11 @@
 
 package jodd.util;
 
+import jodd.core.JoddCore;
 import jodd.io.FileUtil;
 import jodd.io.findfile.ClassScanner;
 import jodd.mutable.Value;
 import jodd.test.DisabledOnJava;
-import jodd.util.cl.ClassLoaderStrategy;
 import jodd.util.cl.DefaultClassLoaderStrategy;
 import jodd.util.cl.ExtendedURLClassLoader;
 import org.junit.jupiter.api.Test;
@@ -129,7 +129,7 @@ void testLoadClass() throws Exception {
 
 		// special case
 
-		DefaultClassLoaderStrategy defaultClassLoaderStrategy = (DefaultClassLoaderStrategy) ClassLoaderStrategy.get();
+		DefaultClassLoaderStrategy defaultClassLoaderStrategy = (DefaultClassLoaderStrategy) JoddCore.defaults().getClassLoaderStrategy();
 
 		defaultClassLoaderStrategy.setLoadArrayClassByComponentTypes(true);
 

File: jodd-db/src/main/java/jodd/db/DbDetector.java
Patch:
@@ -25,7 +25,6 @@
 package jodd.db;
 
 import jodd.db.connection.ConnectionProvider;
-import jodd.db.oom.DbEntityManager;
 import jodd.db.servers.Db2DbServer;
 import jodd.db.servers.DbServer;
 import jodd.db.servers.DerbyDbServer;
@@ -64,7 +63,7 @@ public static DbServer detectDatabaseAndConfigureDbOom(final ConnectionProvider
 
 		cp.closeConnection(connection);
 
-		dbServer.accept(DbEntityManager.get());
+		dbServer.accept(JoddDb.defaults().getDbEntityManager());
 
 		return dbServer;
 	}

File: jodd-db/src/main/java/jodd/db/DbQueryBase.java
Patch:
@@ -211,7 +211,7 @@ protected void initSession(final DbSession session) {
 			return;
 		}
 
-		DbSessionProvider dbSessionProvider = DbSessionProvider.get();
+		DbSessionProvider dbSessionProvider = JoddDb.defaults().getSessionProvider();
 
 		if (dbSessionProvider == null) {
 			throw new DbSqlException("Session provider not available.");

File: jodd-db/src/main/java/jodd/db/DbSession.java
Patch:
@@ -67,15 +67,15 @@ public DbSession(ConnectionProvider connectionProvider) {
 		log.debug("Creating new db session");
 
 		if (connectionProvider == null) {
-			connectionProvider = ConnectionProvider.get();
+			connectionProvider = JoddDb.defaults().getConnectionProvider();
 			if (connectionProvider == null) {
 				throw new DbSqlException("Connection provider is not available");
 			}
 		}
 
 		this.connectionProvider = connectionProvider;
 		this.txActive = false;
-		this.txMode = JoddDb.defaults().defaults().getTransactionMode();
+		this.txMode = JoddDb.defaults().getTransactionMode();
 		this.queries = new HashSet<>();
 	}
 
@@ -256,7 +256,7 @@ public void beginTransaction(final DbTransactionMode mode) {
 	 * Starts transaction with default transaction mode.
 	 */
 	public void beginTransaction() {
-		beginTransaction(JoddDb.defaults().defaults().getTransactionMode());
+		beginTransaction(JoddDb.defaults().getTransactionMode());
 	}
 
 	/**

File: jodd-db/src/main/java/jodd/db/oom/DbEntityDescriptor.java
Patch:
@@ -26,9 +26,9 @@
 package jodd.db.oom;
 
 import jodd.bean.BeanUtil;
+import jodd.bean.JoddBean;
 import jodd.db.oom.naming.ColumnNamingStrategy;
 import jodd.db.oom.naming.TableNamingStrategy;
-import jodd.introspector.ClassIntrospector;
 import jodd.introspector.PropertyDescriptor;
 import jodd.util.StringPool;
 
@@ -132,7 +132,7 @@ protected void init() {
 	 * Resolves list of all columns and properties.
 	 */
 	private void resolveColumnsAndProperties(final Class type) {
-		PropertyDescriptor[] allProperties = ClassIntrospector.get().lookup(type).getAllPropertyDescriptors();
+		PropertyDescriptor[] allProperties = JoddBean.defaults().getClassIntrospector().lookup(type).getAllPropertyDescriptors();
 		List<DbEntityColumnDescriptor> decList = new ArrayList<>(allProperties.length);
 		int idcount = 0;
 

File: jodd-db/src/main/java/jodd/db/oom/DbOomQuery.java
Patch:
@@ -188,7 +188,7 @@ protected void resolveColumnDbSqlType(final Connection connection, final DbEntit
 
 	// ---------------------------------------------------------------- join hints
 
-	protected final JoinHintResolver hintResolver = JoinHintResolver.get();
+	protected final JoinHintResolver hintResolver = JoddDb.defaults().getHintResolver();
 
 	protected String[] hints;
 
@@ -220,7 +220,7 @@ protected Object resolveRowResults(Object[] row) {
 
 	// ---------------------------------------------------------------- result set
 
-	protected boolean cacheEntities = JoddDb.defaults().defaults().getDbOomConfig().isCacheEntitiesInResultSet();
+	protected boolean cacheEntities = JoddDb.defaults().getDbOomConfig().isCacheEntitiesInResultSet();
 
 	/**
 	 * Defines if entities should be cached in {@link ResultSetMapper}.
@@ -251,7 +251,7 @@ protected ResultSetMapper createResultSetMapper(final ResultSet resultSet) {
 
 	// ---------------------------------------------------------------- db list
 
-	protected boolean entityAwareMode = JoddDb.defaults().defaults().getDbOomConfig().isEntityAwareMode();
+	protected boolean entityAwareMode = JoddDb.defaults().getDbOomConfig().isEntityAwareMode();
 
 	/**
 	 * Defines entity-aware mode for entities tracking in result collection.

File: jodd-db/src/main/java/jodd/db/oom/DbOomUtil.java
Patch:
@@ -26,6 +26,7 @@
 package jodd.db.oom;
 
 import jodd.bean.BeanUtil;
+import jodd.db.JoddDb;
 import jodd.util.StringUtil;
 
 /**
@@ -41,7 +42,7 @@ public static void populateGeneratedKeys(final Object entity, final DbOomQuery q
 		if (generatedColumns == null) {
 			return;
 		}
-		DbEntityDescriptor ded = DbEntityManager.get().lookupType(entity.getClass());
+		DbEntityDescriptor ded = JoddDb.defaults().getDbEntityManager().lookupType(entity.getClass());
 
 		// prepare key types
 		Class[] keyTypes = new Class[generatedColumns.length];

File: jodd-db/src/main/java/jodd/db/oom/dao/GenericDao.java
Patch:
@@ -27,6 +27,7 @@
 
 import jodd.bean.BeanUtil;
 import jodd.db.DbQuery;
+import jodd.db.JoddDb;
 import jodd.db.oom.DbEntityDescriptor;
 import jodd.db.oom.DbEntityManager;
 import jodd.db.oom.DbOomException;
@@ -103,7 +104,7 @@ protected long generateNextId(final DbEntityDescriptor ded) {
 	 * Otherwise, entity will be inserted into the database.
 	 */
 	public <E> E store(final E entity) {
-		DbEntityManager dboom = DbEntityManager.get();
+		DbEntityManager dboom = JoddDb.defaults().getDbEntityManager();
 		Class type = entity.getClass();
 		DbEntityDescriptor ded = dboom.lookupType(type);
 
@@ -243,7 +244,7 @@ public void deleteById(final Object entity) {
 
 			if (result != 0) {
 				// now reset the ID value
-				DbEntityManager dboom = DbEntityManager.get();
+				DbEntityManager dboom = JoddDb.defaults().getDbEntityManager();
 				Class type = entity.getClass();
 				DbEntityDescriptor ded = dboom.lookupType(type);
 

File: jodd-db/src/main/java/jodd/db/oom/sqlgen/chunks/ColumnsSelectChunk.java
Patch:
@@ -250,7 +250,7 @@ protected void appendAlias(final StringBuilder query, final DbEntityDescriptor d
 		String tableName = ded.getTableName();
 
 		ColumnAliasType columnAliasType = templateData.getColumnAliasType();
-		String columnAliasSeparator = JoddDb.defaults().defaults().getDbOomConfig().getColumnAliasSeparator();
+		String columnAliasSeparator = JoddDb.defaults().getDbOomConfig().getColumnAliasSeparator();
 
 		if (columnAliasType == null || columnAliasType == ColumnAliasType.TABLE_REFERENCE) {
 			templateData.registerColumnDataForTableRef(tableRef, tableName);
@@ -275,7 +275,7 @@ protected void appendColumnName(final StringBuilder query, final DbEntityDescrip
 			String tableName = ded.getTableName();
 			query.append(AS);
 
-			final String columnAliasSeparator = JoddDb.defaults().defaults().getDbOomConfig().getColumnAliasSeparator();
+			final String columnAliasSeparator = JoddDb.defaults().getDbOomConfig().getColumnAliasSeparator();
 
 			switch (templateData.getColumnAliasType()) {
 				case TABLE_NAME:

File: jodd-db/src/main/java/jodd/db/oom/sqlgen/chunks/InsertChunk.java
Patch:
@@ -67,7 +67,7 @@ public void process(final StringBuilder out) {
 
 		int size = 0;
 		for (DbEntityColumnDescriptor dec : decList) {
-			final boolean defaultIsUpdateablePrimaryKey = JoddDb.defaults().defaults().getSqlGenConfig().isUpdateablePrimaryKey();
+			final boolean defaultIsUpdateablePrimaryKey = JoddDb.defaults().getSqlGenConfig().isUpdateablePrimaryKey();
 
 			 if (dec.isId() && !defaultIsUpdateablePrimaryKey) {
 			 	continue;

File: jodd-db/src/main/java/jodd/db/oom/sqlgen/chunks/SqlChunk.java
Patch:
@@ -25,9 +25,9 @@
 
 package jodd.db.oom.sqlgen.chunks;
 
+import jodd.db.JoddDb;
 import jodd.db.oom.DbEntityColumnDescriptor;
 import jodd.db.oom.DbEntityDescriptor;
-import jodd.db.oom.DbEntityManager;
 import jodd.db.oom.sqlgen.DbSqlBuilderException;
 import jodd.db.oom.sqlgen.TemplateData;
 import jodd.util.CharUtil;
@@ -155,7 +155,7 @@ public void init(final TemplateData templateData) {
 	 * Lookups for entity name and throws exception if entity name not found.
 	 */
 	protected DbEntityDescriptor lookupName(final String entityName) {
-		DbEntityDescriptor ded = DbEntityManager.get().lookupName(entityName);
+		DbEntityDescriptor ded = JoddDb.defaults().getDbEntityManager().lookupName(entityName);
 		if (ded == null) {
 			throw new DbSqlBuilderException("Entity name not registered: " + entityName);
 		}
@@ -166,7 +166,7 @@ protected DbEntityDescriptor lookupName(final String entityName) {
 	 * Lookups for entity name and throws an exception if entity type is invalid.
 	 */
 	protected DbEntityDescriptor lookupType(final Class entity) {
-		DbEntityDescriptor ded = DbEntityManager.get().lookupType(entity);
+		DbEntityDescriptor ded = JoddDb.defaults().getDbEntityManager().lookupType(entity);
 		if (ded == null) {
 			throw new DbSqlBuilderException("Invalid or not-persistent entity: " + entity.getName());
 		}

File: jodd-db/src/main/java/jodd/db/oom/sqlgen/chunks/UpdateSetChunk.java
Patch:
@@ -69,7 +69,7 @@ public void process(final StringBuilder out) {
 
 		int size = 0;
 		for (DbEntityColumnDescriptor dec : decList) {
-			final boolean isUpdateablePrimaryKey = JoddDb.defaults().defaults().getSqlGenConfig().isUpdateablePrimaryKey();
+			final boolean isUpdateablePrimaryKey = JoddDb.defaults().getSqlGenConfig().isUpdateablePrimaryKey();
 
 			if (dec.isId() && !isUpdateablePrimaryKey) {
 				continue;

File: jodd-db/src/main/java/jodd/db/querymap/DbPropsQueryMap.java
Patch:
@@ -68,7 +68,7 @@ public void loadQueriesFromClasspath() {
 	 */
 	@Override
 	public String getQuery(final String key) {
-		if (JoddDb.defaults().defaults().isDebug()) {
+		if (JoddDb.defaults().isDebug()) {
 			loadQueriesFromClasspath();
 		}
 		return props.getValue(key);

File: jodd-db/src/main/java/jodd/db/servers/HsqlDbServer.java
Patch:
@@ -41,8 +41,8 @@ public HsqlDbServer(final String version) {
 
 	@Override
 	public void accept(final DbEntityManager dbEntityManager) {
-		JoddDb.defaults().defaults().getDbOomConfig().getTableNames().setLowercase(true);
-		JoddDb.defaults().defaults().getDbOomConfig().getColumnNames().setLowercase(true);
+		JoddDb.defaults().getDbOomConfig().getTableNames().setLowercase(true);
+		JoddDb.defaults().getDbOomConfig().getColumnNames().setLowercase(true);
 	}
 
 	@Override

File: jodd-db/src/main/java/jodd/db/servers/MySqlDbServer.java
Patch:
@@ -41,8 +41,8 @@ public MySqlDbServer(final String version) {
 
 	@Override
 	public void accept(final DbEntityManager dbEntityManager) {
-		JoddDb.defaults().defaults().getDbOomConfig().getTableNames().setLowercase(true);
-		JoddDb.defaults().defaults().getDbOomConfig().getColumnNames().setLowercase(true);
+		JoddDb.defaults().getDbOomConfig().getTableNames().setLowercase(true);
+		JoddDb.defaults().getDbOomConfig().getColumnNames().setLowercase(true);
 	}
 
 	@Override

File: jodd-db/src/main/java/jodd/db/servers/PostgreSqlDbServer.java
Patch:
@@ -41,8 +41,8 @@ public PostgreSqlDbServer(final String version) {
 
 	@Override
 	public void accept(final DbEntityManager dbEntityManager) {
-		JoddDb.defaults().defaults().getDbOomConfig().getTableNames().setLowercase(true);
-		JoddDb.defaults().defaults().getDbOomConfig().getColumnNames().setLowercase(true);
+		JoddDb.defaults().getDbOomConfig().getTableNames().setLowercase(true);
+		JoddDb.defaults().getDbOomConfig().getColumnNames().setLowercase(true);
 	}
 
 	@Override

File: jodd-db/src/main/java/jodd/db/servers/SQLiteDbServer.java
Patch:
@@ -41,7 +41,7 @@ public SQLiteDbServer(final String version) {
 
 	@Override
 	public void accept(final DbEntityManager dbEntityManager) {
-		JoddDb.defaults().defaults().getSqlGenConfig().setUpdateAcceptsTableAlias(false);
+		JoddDb.defaults().getSqlGenConfig().setUpdateAcceptsTableAlias(false);
 	}
 
 	@Override

File: jodd-db/src/main/java/jodd/db/servers/SqlServerDbServer.java
Patch:
@@ -41,8 +41,8 @@ public SqlServerDbServer(final String version) {
 
 	@Override
 	public void accept(final DbEntityManager dbEntityManager) {
-		JoddDb.defaults().defaults().getSqlGenConfig().setUpdateAcceptsTableAlias(false);
-		JoddDb.defaults().defaults().getSqlGenConfig().setUpdateablePrimaryKey(false);
+		JoddDb.defaults().getSqlGenConfig().setUpdateAcceptsTableAlias(false);
+		JoddDb.defaults().getSqlGenConfig().setUpdateablePrimaryKey(false);
 	}
 
 	@Override

File: jodd-db/src/main/java/jodd/db/type/SqlType.java
Patch:
@@ -25,7 +25,7 @@
 
 package jodd.db.type;
 
-import jodd.typeconverter.TypeConverterManager;
+import jodd.bean.JoddBean;
 import jodd.util.ClassUtil;
 
 import java.sql.PreparedStatement;
@@ -75,7 +75,7 @@ protected SqlType() {
 	 * Stores value in database. Value is casted to sql type.
 	 */
 	public void storeValue(final PreparedStatement st, final int index, final Object value, final int dbSqlType) throws SQLException {
-		T t = TypeConverterManager.get().convertType(value, sqlType);
+		T t = JoddBean.defaults().getTypeConverterManager().convertType(value, sqlType);
 		set(st, index, t, dbSqlType);
 	}
 
@@ -104,7 +104,7 @@ protected <E> E prepareGetValue(final T t, final Class<E> destinationType) {
 		if (destinationType == null) {
 			return (E) t;
 		}
-		return TypeConverterManager.get().convertType(t, destinationType);
+		return JoddBean.defaults().getTypeConverterManager().convertType(t, destinationType);
 	}
 
 }
\ No newline at end of file

File: jodd-db/src/test/java/jodd/db/DbJtxTransactionManagerTest.java
Patch:
@@ -45,13 +45,13 @@ class DbJtxTransactionManagerTest extends DbHsqldbTestCase {
 
 	@BeforeEach
 	void setup() {
-		sessionProvider = DbSessionProvider.get();
+		sessionProvider = JoddDb.defaults().getSessionProvider();
 	}
 
 	@Override
 	@AfterEach
 	protected void tearDown() {
-		JoddDb.defaults().getSessionProvider(sessionProvider);
+		JoddDb.defaults().setSessionProvider(sessionProvider);
 	}
 
 	@Test
@@ -60,7 +60,7 @@ void testSessionProvider() {
 		JtxTransactionManager jtxManager = new DbJtxTransactionManager(cp);
 		DbJtxSessionProvider sessionProvider = new DbJtxSessionProvider(jtxManager);
 
-		JoddDb.defaults().getSessionProvider(sessionProvider);
+		JoddDb.defaults().setSessionProvider(sessionProvider);
 
 		for (int i = 0; i < 2; i++) {
 

File: jodd-db/src/test/java/jodd/db/fixtures/DbTestBase.java
Patch:
@@ -53,7 +53,7 @@ protected void setUp() throws Exception {
 			queryMap.props().load(this.getClass().getClassLoader().getResourceAsStream("queries.sql.props"));
 		}
 
-		JoddDb.defaults().queryMap(queryMap);
+		JoddDb.defaults().setQueryMap(queryMap);
 
 		LoggerFactory.setLoggerProvider(new TestLoggerProvider());
 		if (dbtxm != null) {

File: jodd-db/src/test/java/jodd/db/oom/CompositeTest.java
Patch:
@@ -52,7 +52,7 @@ protected void setUp() throws Exception {
 		super.setUp();
 
 		DbTestUtil.resetAll();
-		DbEntityManager dbEntityManager = JoddDb.defaults().dbEntityManager();
+		DbEntityManager dbEntityManager = JoddDb.defaults().getDbEntityManager();
 		dbEntityManager.registerEntity(User.class);
 		dbEntityManager.registerEntity(Wizard.class);
 

File: jodd-db/src/test/java/jodd/db/oom/DbEnumTest.java
Patch:
@@ -45,7 +45,7 @@ protected void setUp() throws Exception {
 		super.setUp();
 
 		DbTestUtil.resetAll();
-		DbEntityManager dbEntityManager = JoddDb.defaults().dbEntityManager();
+		DbEntityManager dbEntityManager = JoddDb.defaults().getDbEntityManager();
 		dbEntityManager.registerEntity(Enumerator.class);
 	}
 

File: jodd-db/src/test/java/jodd/db/oom/DbHint2Test.java
Patch:
@@ -102,7 +102,7 @@ protected void initDb(DbSession session) {
 	protected void setUp() throws Exception {
 		super.setUp();
 
-		DbEntityManager dbOom = JoddDb.defaults().dbEntityManager();
+		DbEntityManager dbOom = JoddDb.defaults().getDbEntityManager();
 
 		dbOom.registerEntity(Boy4.class);
 		dbOom.registerEntity(Girl4.class);

File: jodd-db/src/test/java/jodd/db/oom/DbHintTest.java
Patch:
@@ -50,7 +50,7 @@ public void setUp() throws Exception {
 		super.setUp();
 
 		DbTestUtil.resetAll();
-		DbEntityManager dbEntityManager = JoddDb.defaults().dbEntityManager();
+		DbEntityManager dbEntityManager = JoddDb.defaults().getDbEntityManager();
 		dbEntityManager.registerEntity(Boy2.class);
 		dbEntityManager.registerEntity(Girl.class);
 

File: jodd-db/src/test/java/jodd/db/oom/DbNoTableTest.java
Patch:
@@ -49,7 +49,7 @@ protected void setUp() throws Exception {
 		super.setUp();
 
 		DbTestUtil.resetAll();
-		DbEntityManager dbEntityManager = JoddDb.defaults().dbEntityManager();
+		DbEntityManager dbEntityManager = JoddDb.defaults().getDbEntityManager();
 		dbEntityManager.registerEntity(Bean1.class);
 	}
 

File: jodd-db/src/test/java/jodd/db/oom/DbOom2Test.java
Patch:
@@ -103,7 +103,7 @@ void testOrm2() {
 			// ignore
 		}
 
-		DbEntityManager dbOom = JoddDb.defaults().dbEntityManager();
+		DbEntityManager dbOom = JoddDb.defaults().getDbEntityManager();
 
 		assertEquals(2, dbOom.getTotalTypes());
 		assertEquals(0, dbOom.getTotalTableNames());

File: jodd-db/src/test/java/jodd/db/oom/DbOomTest.java
Patch:
@@ -66,7 +66,7 @@ protected void setUp() throws Exception {
 		super.setUp();
 
 		DbTestUtil.resetAll();
-		DbEntityManager dbOom = JoddDb.defaults().dbEntityManager();
+		DbEntityManager dbOom = JoddDb.defaults().getDbEntityManager();
 
 		dbOom.registerEntity(Girl.class);
 		dbOom.registerEntity(BadBoy.class);

File: jodd-db/src/test/java/jodd/db/oom/DbSqlBuilderTest.java
Patch:
@@ -53,7 +53,7 @@ class DbSqlBuilderTest {
 	void setUp() throws Exception {
 
 		DbTestUtil.resetAll();
-		DbEntityManager dbOom = JoddDb.defaults().dbEntityManager();
+		DbEntityManager dbOom = JoddDb.defaults().getDbEntityManager();
 		dbOom.registerType(Girl.class);
 		dbOom.registerType(BadGirl.class);
 		dbOom.registerType(Boy.class);

File: jodd-db/src/test/java/jodd/db/oom/DbSqlTemplateTest.java
Patch:
@@ -52,7 +52,7 @@ class DbSqlTemplateTest {
 	void setUp() throws Exception {
 
 		DbTestUtil.resetAll();
-		DbEntityManager dbEntityManager = JoddDb.defaults().dbEntityManager();
+		DbEntityManager dbEntityManager = JoddDb.defaults().getDbEntityManager();
 		dbEntityManager.registerType(Boy.class);
 		dbEntityManager.registerType(BadBoy.class);
 		dbEntityManager.registerType(BadGirl.class);

File: jodd-db/src/test/java/jodd/db/oom/EntityCacheTest.java
Patch:
@@ -71,7 +71,7 @@ protected void setUp() throws Exception {
 		super.setUp();
 
 		DbTestUtil.resetAll();
-		DbEntityManager dbOom = JoddDb.defaults().dbEntityManager();
+		DbEntityManager dbOom = JoddDb.defaults().getDbEntityManager();
 		dbOom.registerEntity(Girl2.class);
 		dbOom.registerEntity(Boy.class);
 

File: jodd-db/src/test/java/jodd/db/oom/KeyTest.java
Patch:
@@ -41,7 +41,7 @@ class KeyTest {
 	@Test
 	void testEqualEntities() {
 		DbTestUtil.resetAll();
-		DbEntityManager dbEntityManager = JoddDb.defaults().dbEntityManager();
+		DbEntityManager dbEntityManager = JoddDb.defaults().getDbEntityManager();
 
 		DbEntityDescriptor<Foo> fooded = dbEntityManager.registerEntity(Foo.class);
 		DbEntityDescriptor<Bar> barded = dbEntityManager.registerEntity(Bar.class);

File: jodd-db/src/test/java/jodd/db/oom/MappingTest.java
Patch:
@@ -88,7 +88,7 @@ void testMapping() throws SQLException {
 		sql = "insert into FOO values (1, 555, 173, 7, 999, 'red', 1, '2009-08-07 06:05:04.3333', '2010-01-20 01:02:03.4444', 'W173', 'ABCDEF', 1.01, '-7.17', 0, '0')";
 		executeUpdate(session, sql);
 
-		DbEntityManager dbOom = JoddDb.defaults().dbEntityManager();
+		DbEntityManager dbOom = JoddDb.defaults().getDbEntityManager();
 
 		dbOom.registerEntity(Foo.class);
 		SqlTypeManager.register(Boo.class, BooSqlType.class);

File: jodd-db/src/test/java/jodd/db/oom/dao/GenericDaoTest.java
Patch:
@@ -49,7 +49,7 @@ protected void setUp() throws Exception {
 		super.setUp();
 
 		DbTestUtil.resetAll();
-		DbEntityManager dbOom = JoddDb.defaults().dbEntityManager();
+		DbEntityManager dbOom = JoddDb.defaults().getDbEntityManager();
 
 		dbOom.registerEntity(Girl.class);
 		dbOom.registerEntity(Boy.class);

File: jodd-db/src/test/java/jodd/db/oom/sqlgen/DbEntitySqlTest.java
Patch:
@@ -46,7 +46,7 @@ class DbEntitySqlTest {
 	void setUp() throws Exception {
 
 		DbTestUtil.resetAll();
-		DbEntityManager dbOom = JoddDb.defaults().dbEntityManager();
+		DbEntityManager dbOom = JoddDb.defaults().getDbEntityManager();
 
 		dbOom.registerType(Boy.class);
 		dbOom.registerType(BadBoy.class);

File: jodd-db/src/testInt/java/jodd/db/oom/LiveMapperDbTest.java
Patch:
@@ -77,8 +77,8 @@ class PostgreSql extends PostgreSqlDbAccess {
 		@Override
 		public void initDb() {
 			super.initDb();
-			JoddDb.defaults().defaults().getDbOomConfig().getTableNames().setLowercase(true);
-			JoddDb.defaults().defaults().getDbOomConfig().getColumnNames().setLowercase(true);
+			JoddDb.defaults().getDbOomConfig().getTableNames().setLowercase(true);
+			JoddDb.defaults().getDbOomConfig().getColumnNames().setLowercase(true);
 		}
 
 		@Override

File: jodd-http/src/main/java/jodd/http/HttpBrowser.java
Patch:
@@ -46,7 +46,7 @@ public class HttpBrowser {
 	protected boolean catchTransportExceptions = true;
 
 	public HttpBrowser() {
-		httpConnectionProvider = HttpConnectionProvider.get();
+		httpConnectionProvider = JoddHttp.defaults().getHttpConnectionProvider();
 	}
 
 	/**

File: jodd-http/src/main/java/jodd/http/HttpRequest.java
Patch:
@@ -476,7 +476,7 @@ public String queryString() {
 
 	// ---------------------------------------------------------------- query encoding
 
-	protected String queryEncoding = JoddHttp.defaults().defaults().getQueryEncoding();
+	protected String queryEncoding = JoddHttp.defaults().getQueryEncoding();
 
 	/**
 	 * Defines encoding for query parameters. Default value is
@@ -723,7 +723,7 @@ public HttpConnection connection() {
 	 */
 	public HttpRequest open() {
 		if (httpConnectionProvider == null) {
-			return open(HttpConnectionProvider.get());
+			return open(JoddHttp.defaults().getHttpConnectionProvider());
 		}
 
 		return open(httpConnectionProvider);
@@ -901,7 +901,7 @@ protected Buffer buffer(final boolean fullRequest) {
 		// user-agent
 
 		if (header("User-Agent") == null) {
-			header("User-Agent", JoddHttp.defaults().defaults().getUserAgent());
+			header("User-Agent", JoddHttp.defaults().getUserAgent());
 		}
 
 		// POST method requires Content-Type to be set

File: jodd-http/src/main/java/jodd/http/net/SocketHttpConnectionProvider.java
Patch:
@@ -180,7 +180,7 @@ protected SSLSocket createSSLSocket(
 
 		// sslSocket is now ready
 
-		String enabledProtocols = JoddHttp.defaults().defaults().getSecureEnabledProtocols();
+		String enabledProtocols = JoddHttp.defaults().getSecureEnabledProtocols();
 
 		if (enabledProtocols != null) {
 			String[] values = StringUtil.splitc(enabledProtocols, ',');

File: jodd-joy/src/main/java/jodd/joy/JoyProxetta.java
Patch:
@@ -90,7 +90,7 @@ protected ProxyAspect createTxProxyAspects() {
 			AnnotationTxAdvice.class,
 			((ProxyPointcut)
 				methodInfo -> methodInfo.isPublicMethod() && methodInfo.isTopLevelMethod())
-				.and(MethodWithAnnotationPointcut.of(JoddJtx.defaults().defaults().getTxAnnotations()))
+				.and(MethodWithAnnotationPointcut.of(JoddJtx.defaults().getTxAnnotations()))
 		);
 	}
 

File: jodd-joy/src/main/java/jodd/joy/db/DbIdGenerator.java
Patch:
@@ -66,7 +66,7 @@ public synchronized void reset() {
 	public synchronized long nextId(final Class entityType) {
 		MutableLong lastId = entityIdsMap.get(entityType);
 		if (lastId == null) {
-			DbEntityManager dbEntityManager = JoddDb.defaults().dbEntityManager();
+			DbEntityManager dbEntityManager = JoddDb.defaults().getDbEntityManager();
 
 			DbEntityDescriptor ded = dbEntityManager.lookupType(entityType);
 			String tableName = ded.getTableName();

File: jodd-joy/src/main/java/jodd/joy/db/DbQueryBuilder.java
Patch:
@@ -54,7 +54,7 @@ public class DbQueryBuilder {
 	protected final Map<String, String[]> methodParamNames;
 
 	public DbQueryBuilder() {
-		queryMap = JoddDb.defaults().queryMap();
+		queryMap = JoddDb.defaults().getQueryMap();
 		parsedSqlMap = new HashMap<>();
 		methodParamNames = new HashMap<>();
 	}

File: jodd-json/src/main/java/jodd/json/TypeJsonSerializerMap.java
Patch:
@@ -25,9 +25,9 @@
 
 package jodd.json;
 
+import jodd.bean.JoddBean;
 import jodd.datetime.JDateTime;
 import jodd.introspector.ClassDescriptor;
-import jodd.introspector.ClassIntrospector;
 import jodd.json.impl.ArraysJsonSerializer;
 import jodd.json.impl.BooleanArrayJsonSerializer;
 import jodd.json.impl.BooleanJsonSerializer;
@@ -73,7 +73,7 @@ public class TypeJsonSerializerMap {
 	 * Returns default instance.
 	 */
 	public static TypeJsonSerializerMap get() {
-		return JoddJson.defaults().typeSerializers();
+		return JoddJson.defaults().getTypeSerializers();
 	}
 
 	private final TypeJsonSerializerMap defaultSerializerMap;
@@ -249,7 +249,7 @@ protected TypeJsonSerializer _lookup(final Class type) {
 				return tjs;
 			}
 
-			ClassDescriptor cd = ClassIntrospector.get().lookup(type);
+			ClassDescriptor cd = JoddBean.defaults().getClassIntrospector().lookup(type);
 
 			// check array
 

File: jodd-json/src/main/java/jodd/json/TypeJsonVisitor.java
Patch:
@@ -25,8 +25,8 @@
 
 package jodd.json;
 
+import jodd.bean.JoddBean;
 import jodd.introspector.ClassDescriptor;
-import jodd.introspector.ClassIntrospector;
 import jodd.introspector.FieldDescriptor;
 import jodd.introspector.Getter;
 import jodd.introspector.PropertyDescriptor;
@@ -62,7 +62,7 @@ public TypeJsonVisitor(final JsonContext jsonContext, final Class type) {
 	 * Visits a type.
 	 */
 	public void visit() {
-		ClassDescriptor classDescriptor = ClassIntrospector.get().lookup(type);
+		ClassDescriptor classDescriptor = JoddBean.defaults().getClassIntrospector().lookup(type);
 
 		if (classMetadataName != null) {
 			// process first 'meta' fields 'class'

File: jodd-json/src/test/java/jodd/json/CustomAnnotationTest.java
Patch:
@@ -38,12 +38,12 @@ class CustomAnnotationTest {
 
 	@BeforeEach
 	void setUp() {
-		JoddJson.defaults().defaults().setJsonAnnotation(JSON2.class);
+		JoddJson.defaults().setJsonAnnotation(JSON2.class);
 	}
 
 	@AfterEach
 	void tearDown() {
-		JoddJson.defaults().defaults().setJsonAnnotation(JSON.class);
+		JoddJson.defaults().setJsonAnnotation(JSON.class);
 	}
 
 	@Test

File: jodd-jtx/src/main/java/jodd/jtx/proxy/AnnotationTxAdviceManager.java
Patch:
@@ -85,7 +85,7 @@ public AnnotationTxAdviceManager(final LeanJtxWorker jtxWorker, final String sco
 		this.jtxWorker = jtxWorker;
 		this.defaultTransactionMode = defaultTxMode == null ? new JtxTransactionMode().propagationSupports() : defaultTxMode;
 		this.scopePattern = scopePattern;
-		registerAnnotations(JoddJtx.defaults().defaults().getTxAnnotations());
+		registerAnnotations(JoddJtx.defaults().getTxAnnotations());
 	}
 
 	// ---------------------------------------------------------------- methods

File: jodd-madvoc/src/main/java/jodd/madvoc/AutomagicMadvocConfigurator.java
Patch:
@@ -25,8 +25,8 @@
 
 package jodd.madvoc;
 
+import jodd.bean.JoddBean;
 import jodd.introspector.ClassDescriptor;
-import jodd.introspector.ClassIntrospector;
 import jodd.introspector.MethodDescriptor;
 import jodd.io.findfile.ClassScanner;
 import jodd.log.Logger;
@@ -201,7 +201,7 @@ protected void onActionClass(final String className) throws ClassNotFoundExcepti
 			return;
 		}
 
-		ClassDescriptor cd = ClassIntrospector.get().lookup(actionClass);
+		ClassDescriptor cd = JoddBean.defaults().getClassIntrospector().lookup(actionClass);
 
 		MethodDescriptor[] allMethodDescriptors = cd.getAllMethodDescriptors();
 		for (MethodDescriptor methodDescriptor : allMethodDescriptors) {

File: jodd-madvoc/src/main/java/jodd/madvoc/MadvocConfig.java
Patch:
@@ -25,6 +25,8 @@
 
 package jodd.madvoc;
 
+import jodd.io.upload.FileUploadFactory;
+import jodd.io.upload.impl.AdaptiveFileUploadFactory;
 import jodd.madvoc.config.RootPackages;
 import jodd.madvoc.interceptor.ServletConfigInterceptor;
 import jodd.madvoc.macro.PathMacros;
@@ -35,8 +37,6 @@
 import jodd.madvoc.meta.ActionConfiguredBy;
 import jodd.madvoc.meta.RestAction;
 import jodd.madvoc.path.DefaultActionPathNamingStrategy;
-import jodd.upload.FileUploadFactory;
-import jodd.upload.impl.AdaptiveFileUploadFactory;
 import jodd.util.ArraysUtil;
 import jodd.util.ClassUtil;
 import jodd.util.StringPool;

File: jodd-madvoc/src/main/java/jodd/madvoc/component/ActionsManager.java
Patch:
@@ -25,7 +25,7 @@
 
 package jodd.madvoc.component;
 
-import jodd.introspector.ClassIntrospector;
+import jodd.bean.JoddBean;
 import jodd.introspector.MethodDescriptor;
 import jodd.log.Logger;
 import jodd.log.LoggerFactory;
@@ -107,7 +107,7 @@ public boolean isAsyncModeOn() {
 	 * Resolves action method for given action class ane method name.
 	 */
 	public Method resolveActionMethod(final Class<?> actionClass, final String methodName) {
-		MethodDescriptor methodDescriptor = ClassIntrospector.get().lookup(actionClass).getMethodDescriptor(methodName, false);
+		MethodDescriptor methodDescriptor = JoddBean.defaults().getClassIntrospector().lookup(actionClass).getMethodDescriptor(methodName, false);
 		if (methodDescriptor == null) {
 			throw new MadvocException("Public method not found: " + actionClass.getSimpleName() + "#" + methodName);
 		}

File: jodd-madvoc/src/main/java/jodd/madvoc/component/ScopeDataResolver.java
Patch:
@@ -25,8 +25,8 @@
 
 package jodd.madvoc.component;
 
+import jodd.bean.JoddBean;
 import jodd.introspector.ClassDescriptor;
-import jodd.introspector.ClassIntrospector;
 import jodd.introspector.PropertyDescriptor;
 import jodd.madvoc.ScopeType;
 import jodd.madvoc.config.ActionRuntime;
@@ -237,7 +237,7 @@ protected ScopeData.Out inspectOut(final Out out, final Scope scope, final Scope
 	 * Returns <code>null</code> if there are no In and Out data.
 	 */
 	protected ScopeData inspectClassScopeData(final Class actionClass, final ScopeType scopeType) {
-		ClassDescriptor cd = ClassIntrospector.get().lookup(actionClass);
+		ClassDescriptor cd = JoddBean.defaults().getClassIntrospector().lookup(actionClass);
 
 		PropertyDescriptor[] allProperties = cd.getAllPropertyDescriptors();
 

File: jodd-madvoc/src/main/java/jodd/madvoc/injector/RequestScopeInjector.java
Patch:
@@ -25,12 +25,12 @@
 
 package jodd.madvoc.injector;
 
+import jodd.io.upload.FileUpload;
 import jodd.madvoc.ActionRequest;
 import jodd.madvoc.MadvocConfig;
 import jodd.madvoc.ScopeType;
 import jodd.servlet.ServletUtil;
 import jodd.servlet.upload.MultipartRequestWrapper;
-import jodd.upload.FileUpload;
 import jodd.util.StringPool;
 import jodd.util.StringUtil;
 

File: jodd-madvoc/src/main/java/jodd/madvoc/injector/Target.java
Patch:
@@ -26,9 +26,9 @@
 package jodd.madvoc.injector;
 
 import jodd.bean.BeanUtil;
+import jodd.bean.JoddBean;
 import jodd.madvoc.MadvocException;
 import jodd.madvoc.config.ScopeData;
-import jodd.typeconverter.TypeConverterManager;
 
 import java.lang.reflect.Constructor;
 
@@ -142,7 +142,7 @@ public void writeValue(String propertyName, final Object propertyValue, final bo
 			int dotNdx = propertyName.indexOf('.');
 
 			if (dotNdx == -1) {
-				value = TypeConverterManager.get().convertType(propertyValue, type);
+				value = JoddBean.defaults().getTypeConverterManager().convertType(propertyValue, type);
 				return;
 			}
 

File: jodd-madvoc/src/main/java/jodd/madvoc/interceptor/AnnotatedPropertyInterceptor.java
Patch:
@@ -25,8 +25,8 @@
 
 package jodd.madvoc.interceptor;
 
+import jodd.bean.JoddBean;
 import jodd.introspector.ClassDescriptor;
-import jodd.introspector.ClassIntrospector;
 import jodd.introspector.PropertyDescriptor;
 import jodd.madvoc.ActionRequest;
 
@@ -83,7 +83,7 @@ protected PropertyDescriptor[] lookupAnnotatedProperties(final Class type) {
 			return properties;
 		}
 
-		ClassDescriptor cd = ClassIntrospector.get().lookup(type);
+		ClassDescriptor cd = JoddBean.defaults().getClassIntrospector().lookup(type);
 		PropertyDescriptor[] allProperties = cd.getAllPropertyDescriptors();
 
 		List<PropertyDescriptor> list = new ArrayList<>();

File: jodd-madvoc/src/testInt/java/jodd/madvoc/action/mv/UploadAction.java
Patch:
@@ -25,11 +25,11 @@
 
 package jodd.madvoc.action.mv;
 
+import jodd.io.upload.FileUpload;
 import jodd.madvoc.meta.Action;
 import jodd.madvoc.meta.In;
 import jodd.madvoc.meta.MadvocAction;
 import jodd.madvoc.meta.Out;
-import jodd.upload.FileUpload;
 
 @MadvocAction
 public class UploadAction {

File: jodd-madvoc/src/testInt/java/jodd/madvoc/action/mv/UserAction.java
Patch:
@@ -25,11 +25,11 @@
 
 package jodd.madvoc.action.mv;
 
+import jodd.io.upload.FileUpload;
 import jodd.madvoc.meta.Action;
 import jodd.madvoc.meta.In;
 import jodd.madvoc.meta.MadvocAction;
 import jodd.madvoc.meta.Out;
-import jodd.upload.FileUpload;
 
 import java.io.IOException;
 

File: jodd-mail/src/main/java/jodd/mail/EMLParser.java
Patch:
@@ -75,7 +75,7 @@ public ReceivedEmail parse(final String emlContent, final String charset) throws
 	 */
 	public ReceivedEmail parse(final String emlContent) throws MessagingException {
 		try {
-			return parse(emlContent, JoddCore.defaults().defaults().getEncoding());
+			return parse(emlContent, JoddCore.defaults().getEncoding());
 		} catch (final UnsupportedEncodingException ignore) {
 			return null;
 		}

File: jodd-mail/src/main/java/jodd/mail/EmailAddress.java
Patch:
@@ -157,7 +157,7 @@ public String toString() {
 	 */
 	public InternetAddress toInternetAddress() throws AddressException {
 		try {
-			return new InternetAddress(email, personalName, JoddCore.defaults().defaults().getEncoding());
+			return new InternetAddress(email, personalName, JoddCore.defaults().getEncoding());
 		} catch (final UnsupportedEncodingException ueex) {
 			throw new AddressException(ueex.toString());
 		}

File: jodd-mail/src/main/java/jodd/mail/EmailMessage.java
Patch:
@@ -68,7 +68,7 @@ public EmailMessage(final String content, final String mimeType, final String en
 	 * @see JoddCoreDefaults#getEncoding()
 	 */
 	public EmailMessage(final String content, final String mimeType) {
-		this(content, mimeType, JoddCore.defaults().defaults().getEncoding());
+		this(content, mimeType, JoddCore.defaults().getEncoding());
 	}
 
 	// ---------------------------------------------------------------- getters

File: jodd-petite/src/main/java/jodd/petite/ParamManager.java
Patch:
@@ -25,8 +25,8 @@
 
 package jodd.petite;
 
+import jodd.bean.JoddBean;
 import jodd.introspector.ClassDescriptor;
-import jodd.introspector.ClassIntrospector;
 import jodd.introspector.FieldDescriptor;
 import jodd.introspector.MethodDescriptor;
 import jodd.introspector.PropertyDescriptor;
@@ -103,7 +103,7 @@ public String[] filterParametersForBeanName(String beanName, final boolean resol
 	}
 
 	public ValueInjectionPoint[] resolveParamInjectionPoints(final Object bean) {
-		final ClassDescriptor cd = ClassIntrospector.get().lookup(bean.getClass());
+		final ClassDescriptor cd = JoddBean.defaults().getClassIntrospector().lookup(bean.getClass());
 
 		final List<ValueInjectionPoint> valueInjectionPointList = new ArrayList<>();
 

File: jodd-petite/src/main/java/jodd/petite/resolver/CtorResolver.java
Patch:
@@ -25,8 +25,8 @@
 
 package jodd.petite.resolver;
 
+import jodd.bean.JoddBean;
 import jodd.introspector.ClassDescriptor;
-import jodd.introspector.ClassIntrospector;
 import jodd.introspector.CtorDescriptor;
 import jodd.petite.PetiteException;
 import jodd.petite.def.BeanReferences;
@@ -54,7 +54,7 @@ public CtorResolver(final ReferencesResolver referencesResolver) {
 	 */
 	public CtorInjectionPoint resolve(final Class type, final boolean useAnnotation) {
 		// lookup methods
-		ClassDescriptor cd = ClassIntrospector.get().lookup(type);
+		ClassDescriptor cd = JoddBean.defaults().getClassIntrospector().lookup(type);
 		CtorDescriptor[] allCtors = cd.getAllCtorDescriptors();
 		Constructor foundedCtor = null;
 		Constructor defaultCtor = null;

File: jodd-petite/src/main/java/jodd/petite/resolver/MethodResolver.java
Patch:
@@ -25,8 +25,8 @@
 
 package jodd.petite.resolver;
 
+import jodd.bean.JoddBean;
 import jodd.introspector.ClassDescriptor;
-import jodd.introspector.ClassIntrospector;
 import jodd.introspector.MethodDescriptor;
 import jodd.petite.def.BeanReferences;
 import jodd.petite.def.MethodInjectionPoint;
@@ -52,7 +52,7 @@ public MethodResolver(final ReferencesResolver referencesResolver) {
 	 */
 	public MethodInjectionPoint[] resolve(final Class type) {
 		// lookup methods
-		ClassDescriptor cd = ClassIntrospector.get().lookup(type);
+		ClassDescriptor cd = JoddBean.defaults().getClassIntrospector().lookup(type);
 		List<MethodInjectionPoint> list = new ArrayList<>();
 		MethodDescriptor[] allMethods = cd.getAllMethodDescriptors();
 

File: jodd-petite/src/main/java/jodd/petite/resolver/PropertyResolver.java
Patch:
@@ -25,8 +25,8 @@
 
 package jodd.petite.resolver;
 
+import jodd.bean.JoddBean;
 import jodd.introspector.ClassDescriptor;
-import jodd.introspector.ClassIntrospector;
 import jodd.introspector.PropertyDescriptor;
 import jodd.petite.def.BeanReferences;
 import jodd.petite.def.PropertyInjectionPoint;
@@ -52,7 +52,7 @@ public PropertyResolver(final ReferencesResolver referencesResolver) {
 	 */
 	public PropertyInjectionPoint[] resolve(final Class type, final boolean autowire) {
 		// lookup fields
-		ClassDescriptor cd = ClassIntrospector.get().lookup(type);
+		ClassDescriptor cd = JoddBean.defaults().getClassIntrospector().lookup(type);
 		List<PropertyInjectionPoint> list = new ArrayList<>();
 		PropertyDescriptor[] allPropertyDescriptors = cd.getAllPropertyDescriptors();
 

File: jodd-petite/src/main/java/jodd/petite/resolver/ProviderResolver.java
Patch:
@@ -25,8 +25,8 @@
 
 package jodd.petite.resolver;
 
+import jodd.bean.JoddBean;
 import jodd.introspector.ClassDescriptor;
-import jodd.introspector.ClassIntrospector;
 import jodd.introspector.MethodDescriptor;
 import jodd.petite.BeanDefinition;
 import jodd.petite.def.ProviderDefinition;
@@ -49,7 +49,7 @@ public class ProviderResolver {
 	public ProviderDefinition[] resolve(final BeanDefinition beanDefinition) {
 		Class type = beanDefinition.type();
 
-		ClassDescriptor cd = ClassIntrospector.get().lookup(type);
+		ClassDescriptor cd = JoddBean.defaults().getClassIntrospector().lookup(type);
 		MethodDescriptor[] methods = cd.getAllMethodDescriptors();
 
 		List<ProviderDefinition> list = new ArrayList<>();

File: jodd-petite/src/main/java/jodd/petite/resolver/SetResolver.java
Patch:
@@ -25,8 +25,8 @@
 
 package jodd.petite.resolver;
 
+import jodd.bean.JoddBean;
 import jodd.introspector.ClassDescriptor;
-import jodd.introspector.ClassIntrospector;
 import jodd.introspector.FieldDescriptor;
 import jodd.introspector.MethodDescriptor;
 import jodd.introspector.PropertyDescriptor;
@@ -47,7 +47,7 @@ public class SetResolver {
 	 * Resolves all collections for given type.
 	 */
 	public SetInjectionPoint[] resolve(final Class type, final boolean autowire) {
-		ClassDescriptor cd = ClassIntrospector.get().lookup(type);
+		ClassDescriptor cd = JoddBean.defaults().getClassIntrospector().lookup(type);
 		List<SetInjectionPoint> list = new ArrayList<>();
 
 		PropertyDescriptor[] allProperties = cd.getAllPropertyDescriptors();

File: jodd-petite/src/test/java/jodd/petite/resolver/ResolverTest.java
Patch:
@@ -25,7 +25,7 @@
 
 package jodd.petite.resolver;
 
-import jodd.introspector.ClassIntrospector;
+import jodd.bean.JoddBean;
 import jodd.introspector.PropertyDescriptor;
 import jodd.petite.PetiteConfig;
 import jodd.petite.PetiteException;
@@ -264,7 +264,7 @@ void testResolveReferenceFromValues_invalidNumberOfRefs() {
 
 	private PropertyDescriptor field(Class type, String name) {
 		PropertyDescriptor[] propertyDescriptors
-			= ClassIntrospector.get().lookup(type).getAllPropertyDescriptors();
+			= JoddBean.defaults().getClassIntrospector().lookup(type).getAllPropertyDescriptors();
 
 		for (PropertyDescriptor propertyDescriptor : propertyDescriptors) {
 			if (propertyDescriptor.getName().equals(name)) {

File: jodd-props/src/main/java/jodd/props/PropsUtil.java
Patch:
@@ -48,7 +48,7 @@ public class PropsUtil {
 	public static void loadFromClasspath(final Props p, final String... patterns) {
 		ClassScanner.get()
 			.onEntry(entryData -> {
-				String usedEncoding = JoddCore.defaults().defaults().getEncoding();
+				String usedEncoding = JoddCore.defaults().getEncoding();
 				if (StringUtil.endsWithIgnoreCase(entryData.name(), ".properties")) {
 					usedEncoding = StringPool.ISO_8859_1;
 				}

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java
Patch:
@@ -132,14 +132,14 @@ public static void checkArgumentIndex(final MethodInfo methodInfo, final int arg
 	 * Builds advice field name.
 	 */
 	public static String adviceFieldName(final String name, final int index) {
-		return JoddProxetta.defaults().defaults().getFieldPrefix() + name + JoddProxetta.defaults().defaults().getFieldDivider() + index;
+		return JoddProxetta.defaults().getFieldPrefix() + name + JoddProxetta.defaults().getFieldDivider() + index;
 	}
 
 	/**
 	 * Builds advice method name.
 	 */
 	public static String adviceMethodName(final String name, final int index) {
-		return JoddProxetta.defaults().defaults().getMethodPrefix() + name + JoddProxetta.defaults().defaults().getMethodDivider() + index;
+		return JoddProxetta.defaults().getMethodPrefix() + name + JoddProxetta.defaults().getMethodDivider() + index;
 	}
 
 	// ---------------------------------------------------------------- load

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaClassBuilder.java
Patch:
@@ -199,7 +199,7 @@ protected void makeStaticInitBlock() {
 	 * This created init method is called from each destination's constructor.
 	 */
 	protected void makeProxyConstructor() {
-		MethodVisitor mv = wd.dest.visitMethod(AsmUtil.ACC_PRIVATE | AsmUtil.ACC_FINAL, JoddProxetta.defaults().defaults().getInitMethodName(), DESC_VOID, null, null);
+		MethodVisitor mv = wd.dest.visitMethod(AsmUtil.ACC_PRIVATE | AsmUtil.ACC_FINAL, JoddProxetta.defaults().getInitMethodName(), DESC_VOID, null, null);
 		mv.visitCode();
 		if (wd.adviceInits != null) {
 			for (String name : wd.adviceInits) {

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaCtorBuilder.java
Patch:
@@ -88,7 +88,7 @@ public void visitEnd() {
 		methodVisitor.visitMethodInsn(
 			INVOKESPECIAL,
 			wd.thisReference,
-			JoddProxetta.defaults().defaults().getInitMethodName(), DESC_VOID,
+			JoddProxetta.defaults().getInitMethodName(), DESC_VOID,
 			false);
 
 		methodVisitor.visitInsn(RETURN);

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaMethodBuilder.java
Patch:
@@ -213,7 +213,7 @@ public void createProxyMethod(final TargetMethodData td) {
 			@Override
 			public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) {
 
-				if (!name.equals(JoddProxetta.defaults().defaults().getExecuteMethodName())) {
+				if (!name.equals(JoddProxetta.defaults().getExecuteMethodName())) {
 					return null;
 				}
 

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxyAspectData.java
Patch:
@@ -187,7 +187,7 @@ public MethodVisitor visitMethod(int access, String name, final String desc, fin
 					if (!desc.equals(DESC_VOID)) {
 						throw new ProxettaException("Invalid static initialization block description for advice: " + advice.getName());
 					}
-					name = JoddProxetta.defaults().defaults().getClinitMethodName() + JoddProxetta.defaults().defaults().getMethodDivider() + aspectIndex;
+					name = JoddProxetta.defaults().getClinitMethodName() + JoddProxetta.defaults().getMethodDivider() + aspectIndex;
 					access |= AsmUtil.ACC_PRIVATE | AsmUtil.ACC_FINAL;
 					wd.addAdviceClinitMethod(name);
 					return new MethodAdapter(wd.dest.visitMethod(access, name, desc, signature, exceptions)) {
@@ -227,7 +227,7 @@ public void visitFieldInsn(final int opcode, String owner, String name, final St
 						throw new ProxettaException("Advices can have only default constructors. Invalid advice: " + advice.getName());
 					}
 
-					name = JoddProxetta.defaults().defaults().getInitMethodName() + JoddProxetta.defaults().defaults().getMethodDivider() + aspectIndex;
+					name = JoddProxetta.defaults().getInitMethodName() + JoddProxetta.defaults().getMethodDivider() + aspectIndex;
 					access = ProxettaAsmUtil.makePrivateFinalAccess(access);
 					wd.addAdviceInitMethod(name);
 					return new MethodAdapter(wd.dest.visitMethod(access, name, desc, signature, exceptions)) {
@@ -285,7 +285,7 @@ public void visitFieldInsn(final int opcode, String owner, String name, final St
 				} else
 
 				// other methods
-				if (!name.equals(JoddProxetta.defaults().defaults().getExecuteMethodName())) {
+				if (!name.equals(JoddProxetta.defaults().getExecuteMethodName())) {
 					name = adviceMethodName(name, aspectIndex);
 					return new MethodAdapter(wd.dest.visitMethod(access, name, desc, signature, exceptions)) {
 

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/TargetMethodData.java
Patch:
@@ -62,7 +62,7 @@ ProxyAspectData getProxyData() {
 	// ---------------------------------------------------------------- method names
 
 	private String methodName(final int index) {
-		return methodName + JoddProxetta.defaults().defaults().getMethodDivider() + proxyData[index].aspectIndex;
+		return methodName + JoddProxetta.defaults().getMethodDivider() + proxyData[index].aspectIndex;
 	}
 
 	/**

File: jodd-proxetta/src/main/java/jodd/proxetta/impl/InvokeProxetta.java
Patch:
@@ -35,7 +35,7 @@
 public class InvokeProxetta extends Proxetta<InvokeProxetta, InvokeAspect> {
 
 	public InvokeProxetta() {
-		classNameSuffix = JoddProxetta.defaults().defaults().getInvokeProxyClassNameSuffix();
+		classNameSuffix = JoddProxetta.defaults().getInvokeProxyClassNameSuffix();
 	}
 
 	@Override

File: jodd-proxetta/src/main/java/jodd/proxetta/impl/ProxyProxetta.java
Patch:
@@ -35,7 +35,7 @@
 public class ProxyProxetta extends Proxetta<ProxyProxetta, ProxyAspect> {
 
 	public ProxyProxetta() {
-		classNameSuffix = JoddProxetta.defaults().defaults().getProxyClassNameSuffix();
+		classNameSuffix = JoddProxetta.defaults().getProxyClassNameSuffix();
 	}
 
 	@Override

File: jodd-proxetta/src/main/java/jodd/proxetta/impl/WrapperProxetta.java
Patch:
@@ -35,7 +35,7 @@
 public class WrapperProxetta extends Proxetta<WrapperProxetta, ProxyAspect> {
 
 	public WrapperProxetta() {
-		classNameSuffix = JoddProxetta.defaults().defaults().getWrapperClassNameSuffix();
+		classNameSuffix = JoddProxetta.defaults().getWrapperClassNameSuffix();
 	}
 
 	@Override

File: jodd-proxetta/src/main/java/jodd/proxetta/impl/WrapperProxettaFactory.java
Patch:
@@ -46,7 +46,7 @@ public WrapperProxettaFactory(final WrapperProxetta wrapperProxetta) {
 
 	protected Class targetClassOrInterface;
 	protected Class targetInterface;
-	protected String targetFieldName = JoddProxetta.defaults().defaults().getWrapperTargetFieldName();
+	protected String targetFieldName = JoddProxetta.defaults().getWrapperTargetFieldName();
 
 	/**
 	 * Defines class or interface to wrap.

File: jodd-proxetta/src/test/java/jodd/proxetta/BigClassTest.java
Patch:
@@ -26,8 +26,8 @@
 package jodd.proxetta;
 
 import jodd.asm6.Type;
+import jodd.bean.JoddBean;
 import jodd.introspector.ClassDescriptor;
-import jodd.introspector.ClassIntrospector;
 import jodd.mutable.MutableBoolean;
 import jodd.proxetta.fixtures.data.Action;
 import jodd.proxetta.fixtures.data.BigFatJoe;
@@ -167,7 +167,7 @@ void testAllFeatures() throws IOException, IllegalAccessException, Instantiation
 
 
 		// test method annotation
-		ClassDescriptor cd = ClassIntrospector.get().lookup(clazz);
+		ClassDescriptor cd = JoddBean.defaults().getClassIntrospector().lookup(clazz);
 		Method m = cd.getMethodDescriptor("publicMethod", false).getMethod();
 		assertNotNull(m);
 		Annotation[] aa = m.getAnnotations();

File: jodd-proxetta/src/test/java/jodd/proxetta/InvReplTest.java
Patch:
@@ -62,7 +62,7 @@ void testReplacement() throws IllegalAccessException, InstantiationException, No
 //		PrintStream out = System.out;
 		System.setOut(new PrintStream(fbaos));
 
-		One one = (One) ClassLoaderUtil.defineClass((new StringBuilder()).append(className).append(JoddProxetta.defaults().defaults().getInvokeProxyClassNameSuffix()).toString(), klazz).newInstance();
+		One one = (One) ClassLoaderUtil.defineClass((new StringBuilder()).append(className).append(JoddProxetta.defaults().getInvokeProxyClassNameSuffix()).toString(), klazz).newInstance();
 		assertEquals("one ctor!one ctor!", fbaos.toString());    // clone ctor calls super ctor,
 		fbaos.reset();
 

File: jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java
Patch:
@@ -27,9 +27,9 @@
 
 import jodd.io.FileNameUtil;
 import jodd.io.StreamUtil;
+import jodd.io.upload.FileUpload;
 import jodd.servlet.upload.MultipartRequest;
 import jodd.servlet.upload.MultipartRequestWrapper;
-import jodd.upload.FileUpload;
 import jodd.util.Base64;
 import jodd.util.StringPool;
 import jodd.util.StringUtil;

File: jodd-servlet/src/main/java/jodd/servlet/filter/CharacterEncodingFilter.java
Patch:
@@ -132,7 +132,7 @@ public void init(final FilterConfig filterConfig) throws ServletException {
 		this.filterConfig = filterConfig;
 		this.encoding = filterConfig.getInitParameter("encoding");
 		if (this.encoding == null) {
-			this.encoding = JoddCore.defaults().defaults().getEncoding();
+			this.encoding = JoddCore.defaults().getEncoding();
 		}
 		this.ignore = Converter.get().toBooleanValue(filterConfig.getInitParameter("ignore"), true);
 	}

File: jodd-servlet/src/main/java/jodd/servlet/upload/MultipartRequest.java
Patch:
@@ -26,9 +26,9 @@
 package jodd.servlet.upload;
 
 import jodd.core.JoddCore;
+import jodd.io.upload.FileUploadFactory;
+import jodd.io.upload.MultipartStreamParser;
 import jodd.servlet.ServletUtil;
-import jodd.upload.FileUploadFactory;
-import jodd.upload.MultipartStreamParser;
 
 import javax.servlet.http.HttpServletRequest;
 import java.io.IOException;
@@ -113,7 +113,7 @@ public MultipartRequest(final HttpServletRequest request, final FileUploadFactor
 			this.characterEncoding = request.getCharacterEncoding();
 		}
 		if (this.characterEncoding == null) {
-			this.characterEncoding = JoddCore.defaults().defaults().getEncoding();
+			this.characterEncoding = JoddCore.defaults().getEncoding();
 		}
 	}
 

File: jodd-servlet/src/main/java/jodd/servlet/upload/MultipartRequestWrapper.java
Patch:
@@ -25,9 +25,9 @@
 
 package jodd.servlet.upload;
 
+import jodd.io.upload.FileUpload;
+import jodd.io.upload.FileUploadFactory;
 import jodd.servlet.ServletUtil;
-import jodd.upload.FileUpload;
-import jodd.upload.FileUploadFactory;
 
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletRequestWrapper;

File: jodd-vtor/src/main/java/jodd/vtor/ValidationContext.java
Patch:
@@ -25,8 +25,8 @@
 
 package jodd.vtor;
 
+import jodd.bean.JoddBean;
 import jodd.introspector.ClassDescriptor;
-import jodd.introspector.ClassIntrospector;
 import jodd.introspector.FieldDescriptor;
 import jodd.introspector.MethodDescriptor;
 import jodd.introspector.PropertyDescriptor;
@@ -99,7 +99,7 @@ public void addClassChecks(final Class target) {
 		List<Check> list = cache.get(target);
 		if (list == null) {
 			list = new ArrayList<>();
-			ClassDescriptor cd = ClassIntrospector.get().lookup(target);
+			ClassDescriptor cd = JoddBean.defaults().getClassIntrospector().lookup(target);
 
 			PropertyDescriptor[] allProperties = cd.getAllPropertyDescriptors();
 			for (PropertyDescriptor propertyDescriptor : allProperties) {

File: jodd-bean/src/main/java/jodd/introspector/ClassIntrospector.java
Patch:
@@ -35,7 +35,7 @@
 public interface ClassIntrospector {
 
 	public static ClassIntrospector get() {
-		return JoddBean.get().classIntrospector();
+		return JoddBean.defaults().classIntrospector();
 	}
 
 	/**

File: jodd-bean/src/main/java/jodd/typeconverter/Converter.java
Patch:
@@ -36,13 +36,14 @@
 /**
  * Simple and fast and direct conversion.
  */
+// REMOVE?
 public class Converter {
 
 	/**
 	 * Returns default instance.
 	 */
 	public static Converter get() {
-		return JoddBean.get().converter();
+		return JoddBean.defaults().getConverter();
 	}
 
 	/**

File: jodd-bean/src/main/java/jodd/typeconverter/TypeConverterManager.java
Patch:
@@ -102,7 +102,7 @@ public class TypeConverterManager {
 	 * Returns default instance.
 	 */
 	public static TypeConverterManager get() {
-		return JoddBean.get().typeConverterManager();
+		return JoddBean.defaults().typeConverterManager();
 	}
 
 	private final HashMap<Class, TypeConverter> converters = new HashMap<>(70);

File: jodd-bean/src/test/java/jodd/typeconverter/ArraysTest.java
Patch:
@@ -37,7 +37,7 @@
 
 class ArraysTest {
 
-	private TypeConverterManager typeConverterManager = JoddBean.get().typeConverterManager();
+	private TypeConverterManager typeConverterManager = JoddBean.defaults().typeConverterManager();
 
 	public static final Integer[] INTEGERS = new Integer[] {1, 2, 3};
 	public static final int[] INTS = new int[] {1, 2, 3};

File: jodd-bean/src/test/java/jodd/typeconverter/BooleanArrayConverterTest.java
Patch:
@@ -38,7 +38,7 @@
 
 class BooleanArrayConverterTest {
 
-	private TypeConverterManager typeConverterManager = JoddBean.get().typeConverterManager();
+	private TypeConverterManager typeConverterManager = JoddBean.defaults().typeConverterManager();
 
 	@Test
 	void testConversion() {

File: jodd-bean/src/test/java/jodd/typeconverter/ByteArrayConverterTest.java
Patch:
@@ -40,7 +40,7 @@
 
 class ByteArrayConverterTest {
 
-	ByteArrayConverter byteArrayConverter = (ByteArrayConverter) JoddBean.get().typeConverterManager().lookup(byte[].class);
+	ByteArrayConverter byteArrayConverter = (ByteArrayConverter) JoddBean.defaults().typeConverterManager().lookup(byte[].class);
 
 	@Test
 	void testArrayConversion() {

File: jodd-bean/src/test/java/jodd/typeconverter/ClassArrayConverterTest.java
Patch:
@@ -35,7 +35,7 @@
 
 class ClassArrayConverterTest {
 	
-	private TypeConverterManager typeConverterManager = JoddBean.get().typeConverterManager();
+	private TypeConverterManager typeConverterManager = JoddBean.defaults().typeConverterManager();
 
 	@Test
 	@SuppressWarnings({"unchecked"})

File: jodd-bean/src/test/java/jodd/typeconverter/ConverterTest.java
Patch:
@@ -179,7 +179,7 @@ public Boolean convert(Object value) {
 
 		// change boolean converter! boolean[] depends on it!
 
-		TypeConverterManager typeConverterManager = JoddBean.get().typeConverterManager();
+		TypeConverterManager typeConverterManager = JoddBean.defaults().typeConverterManager();
 
 		typeConverterManager.register(boolean.class, booleanTypeConverter);
 

File: jodd-bean/src/test/java/jodd/typeconverter/DoubleArrayConverterTest.java
Patch:
@@ -41,7 +41,7 @@
 
 class DoubleArrayConverterTest {
 
-	private TypeConverterManager typeConverterManager = JoddBean.get().typeConverterManager();
+	private TypeConverterManager typeConverterManager = JoddBean.defaults().typeConverterManager();
 
 	@Test
 	void testConversion() {

File: jodd-bean/src/test/java/jodd/typeconverter/EnumTest.java
Patch:
@@ -38,9 +38,9 @@ public enum En {
 
 	@Test
 	void testCastEnums() {
-		En en = JoddBean.get().typeConverterManager().convertType("ONE", En.class);
+		En en = JoddBean.defaults().typeConverterManager().convertType("ONE", En.class);
 		assertEquals(En.ONE, en);
-		en = JoddBean.get().typeConverterManager().convertType("TWO", En.class);
+		en = JoddBean.defaults().typeConverterManager().convertType("TWO", En.class);
 		assertEquals(En.TWO, en);
 	}
 

File: jodd-bean/src/test/java/jodd/typeconverter/FloatArrayConverterTest.java
Patch:
@@ -41,7 +41,7 @@
 
 class FloatArrayConverterTest {
 
-	private TypeConverterManager typeConverterManager = JoddBean.get().typeConverterManager();
+	private TypeConverterManager typeConverterManager = JoddBean.defaults().typeConverterManager();
 
 	@Test
 	void testConversion() {

File: jodd-bean/src/test/java/jodd/typeconverter/IntegerArrayConverterTest.java
Patch:
@@ -42,7 +42,7 @@ class IntegerArrayConverterTest {
 
 	@Test
 	void testConversion() {
-		IntegerArrayConverter integerArrayConverter = (IntegerArrayConverter) JoddBean.get().typeConverterManager().lookup(int[].class);
+		IntegerArrayConverter integerArrayConverter = (IntegerArrayConverter) JoddBean.defaults().typeConverterManager().lookup(int[].class);
 
 		assertNull(integerArrayConverter.convert(null));
 

File: jodd-bean/src/test/java/jodd/typeconverter/LongArrayConverterTest.java
Patch:
@@ -42,7 +42,7 @@ class LongArrayConverterTest {
 
 	@Test
 	void testConversion() {
-		LongArrayConverter longArrayConverter = (LongArrayConverter) JoddBean.get().typeConverterManager().lookup(long[].class);
+		LongArrayConverter longArrayConverter = (LongArrayConverter) JoddBean.defaults().typeConverterManager().lookup(long[].class);
 
 		assertNull(longArrayConverter.convert(null));
 

File: jodd-bean/src/test/java/jodd/typeconverter/MatrixTest.java
Patch:
@@ -52,7 +52,7 @@ void testIntMatrix2() {
 		matrix.add(intsList(1, 2, 3));
 		matrix.add(intsList(9, 8, 7));
 
-		int[][] arr = JoddBean.get().typeConverterManager().convertType(matrix, int[][].class);
+		int[][] arr = JoddBean.defaults().typeConverterManager().convertType(matrix, int[][].class);
 
 		assertEquals(2, arr.length);
 
@@ -67,7 +67,7 @@ void testStringToIntMatrix() {
 				{"432", "345", "9832"}
 		};
 
-		int[][] arr = JoddBean.get().typeConverterManager().convertType(strings, int[][].class);
+		int[][] arr = JoddBean.defaults().typeConverterManager().convertType(strings, int[][].class);
 
 		assertEquals(2, arr.length);
 
@@ -82,7 +82,7 @@ void testIntToStringMatrix() {
 				{432, 345, 9832}
 		};
 
-		String[][] arr = JoddBean.get().typeConverterManager().convertType(values, String[][].class);
+		String[][] arr = JoddBean.defaults().typeConverterManager().convertType(values, String[][].class);
 
 		assertEquals(2, arr.length);
 

File: jodd-bean/src/test/java/jodd/typeconverter/MutableByteConverterTest.java
Patch:
@@ -38,7 +38,7 @@ class MutableByteConverterTest {
 
 	@Test
 	void testConversion() {
-		MutableByteConverter mutableByteConverter = (MutableByteConverter) JoddBean.get().typeConverterManager().lookup(MutableByte.class);
+		MutableByteConverter mutableByteConverter = (MutableByteConverter) JoddBean.defaults().typeConverterManager().lookup(MutableByte.class);
 
 		assertNull(mutableByteConverter.convert(null));
 

File: jodd-bean/src/test/java/jodd/typeconverter/MutableDoubleConverterTest.java
Patch:
@@ -40,7 +40,7 @@ class MutableDoubleConverterTest {
 
 	@Test
 	void testConversion() {
-		MutableDoubleConverter mutableDoubleConverter = (MutableDoubleConverter) JoddBean.get().typeConverterManager().lookup(MutableDouble.class);
+		MutableDoubleConverter mutableDoubleConverter = (MutableDoubleConverter) JoddBean.defaults().typeConverterManager().lookup(MutableDouble.class);
 
 		assertNull(mutableDoubleConverter.convert(null));
 

File: jodd-bean/src/test/java/jodd/typeconverter/MutableFloatConverterTest.java
Patch:
@@ -40,7 +40,7 @@ class MutableFloatConverterTest {
 
 	@Test
 	void testConversion() {
-		MutableFloatConverter mutableFloatConverter = (MutableFloatConverter) JoddBean.get().typeConverterManager().lookup(MutableFloat.class);
+		MutableFloatConverter mutableFloatConverter = (MutableFloatConverter) JoddBean.defaults().typeConverterManager().lookup(MutableFloat.class);
 
 		assertNull(mutableFloatConverter.convert(null));
 

File: jodd-bean/src/test/java/jodd/typeconverter/MutableIntegerConverterTest.java
Patch:
@@ -38,7 +38,7 @@ class MutableIntegerConverterTest {
 
 	@Test
 	void testConversion() {
-		MutableIntegerConverter mutableIntegerConverter = (MutableIntegerConverter) JoddBean.get().typeConverterManager().lookup(MutableInteger.class);
+		MutableIntegerConverter mutableIntegerConverter = (MutableIntegerConverter) JoddBean.defaults().typeConverterManager().lookup(MutableInteger.class);
 
 		assertNull(mutableIntegerConverter.convert(null));
 

File: jodd-bean/src/test/java/jodd/typeconverter/MutableLongConverterTest.java
Patch:
@@ -39,7 +39,7 @@ class MutableLongConverterTest {
 	@Test
 	void testConversion() {
 		MutableLongConverter mutableLongConverter =
-			(MutableLongConverter) JoddBean.get().typeConverterManager().lookup(MutableLong.class);
+			(MutableLongConverter) JoddBean.defaults().typeConverterManager().lookup(MutableLong.class);
 
 		assertNull(mutableLongConverter.convert(null));
 

File: jodd-bean/src/test/java/jodd/typeconverter/MutableShortConverterTest.java
Patch:
@@ -38,7 +38,7 @@ class MutableShortConverterTest {
 
 	@Test
 	void testConversion() {
-		MutableShortConverter mutableShortConverter = (MutableShortConverter) JoddBean.get().typeConverterManager().lookup(MutableShort.class);
+		MutableShortConverter mutableShortConverter = (MutableShortConverter) JoddBean.defaults().typeConverterManager().lookup(MutableShort.class);
 
 		assertNull(mutableShortConverter.convert(null));
 

File: jodd-bean/src/test/java/jodd/typeconverter/ShortArrayConverterTest.java
Patch:
@@ -40,7 +40,7 @@ class ShortArrayConverterTest {
 
 	@Test
 	void testConversion() {
-		ShortArrayConverter shortArrayConverter = (ShortArrayConverter) JoddBean.get().typeConverterManager().lookup(short[].class);
+		ShortArrayConverter shortArrayConverter = (ShortArrayConverter) JoddBean.defaults().typeConverterManager().lookup(short[].class);
 
 		assertNull(shortArrayConverter.convert(null));
 

File: jodd-bean/src/test/java/jodd/typeconverter/StringArrayConverterTest.java
Patch:
@@ -40,7 +40,7 @@
 
 class StringArrayConverterTest {
 	
-	private TypeConverterManager typeConverterManager = JoddBean.get().typeConverterManager();
+	private TypeConverterManager typeConverterManager = JoddBean.defaults().typeConverterManager();
 
 	@Test
 	void testConversion() {

File: jodd-bean/src/test/java/jodd/typeconverter/ToCollectionTest.java
Patch:
@@ -45,7 +45,7 @@ void testConvertToList() {
 		set.add("456");
 
 		List<Integer> list =
-			JoddBean.get().typeConverterManager().convertToCollection(set, List.class, Integer.class);
+			JoddBean.defaults().typeConverterManager().convertToCollection(set, List.class, Integer.class);
 
 		assertNotNull(list);
 		assertEquals(2, list.size());

File: jodd-bean/src/test/java/jodd/typeconverter/impl/TypeConverterManagerTest.java
Patch:
@@ -37,7 +37,7 @@ class TypeConverterManagerTest {
 
 	@Test
 	void testRegistration() {
-		FileConverter fileTypeConverter = (FileConverter) JoddBean.get().typeConverterManager().lookup(File.class);
+		FileConverter fileTypeConverter = (FileConverter) JoddBean.defaults().typeConverterManager().lookup(File.class);
 
 		assertNotNull(fileTypeConverter);
 		assertNull(fileTypeConverter.addonFileConverters);

File: jodd-core/src/main/java/jodd/cache/TypeCache.java
Patch:
@@ -43,7 +43,7 @@ public class TypeCache<T> {
 	 * Creates default type cache implementation, as defined in {@link jodd.core.JoddCoreDefaults}.
 	 */
 	public static <A> TypeCache<A> createDefault() {
-		return new TypeCache<>(JoddCore.get().typeCacheImplementation());
+		return new TypeCache<>(JoddCore.defaults().typeCacheImplementation());
 	}
 
 	public static <A> TypeCache<A> create(final Implementation implementation) {

File: jodd-core/src/main/java/jodd/util/StringUtil.java
Patch:
@@ -3077,7 +3077,7 @@ public static String ifNotNull(final String input, final Function<String, String
 	 */
 	public static byte[] getBytes(final String string) {
 		try {
-			return string.getBytes(JoddCore.get().defaults().getEncoding());
+			return string.getBytes(JoddCore.defaults().defaults().getEncoding());
 		} catch (UnsupportedEncodingException e) {
 			throw new RuntimeException(e);
 		}
@@ -3092,7 +3092,7 @@ public static byte[] getBytes(final String string, final String charsetName) {
 
 	public static String newString(final byte[] bytes) {
 		try {
-			return new String(bytes, JoddCore.get().defaults().getEncoding());
+			return new String(bytes, JoddCore.defaults().defaults().getEncoding());
 		} catch (UnsupportedEncodingException e) {
 			throw new RuntimeException(e);
 		}

File: jodd-core/src/main/java/jodd/util/UnsafeUtil.java
Patch:
@@ -26,7 +26,6 @@
 package jodd.util;
 
 import jodd.core.JoddCore;
-import jodd.core.JoddCoreDefaults;
 
 /**
  * Few methods using infamous <code>java.misc.Unsafe</code>, mostly for private use.
@@ -41,7 +40,7 @@ public class UnsafeUtil {
 
 	private static final boolean IS_ANDROID = SystemUtil.isHostAndroid();
 	private static final boolean HAS_UNSAFE = !IS_ANDROID && UnsafeInternal.hasUnsafe();
-	private static final JoddCoreDefaults JODD_CORE_DEFAULTS = JoddCore.get().defaults();
+	private static final JoddCoreDefaults JODD_CORE_DEFAULTS = JoddCore.defaults().defaults();
 
 	/**
 	 * Returns <code>true</code> if system has the <code>Unsafe</code>.

File: jodd-core/src/main/java/jodd/util/cl/ClassLoaderStrategy.java
Patch:
@@ -36,7 +36,7 @@ public interface ClassLoaderStrategy {
 	 * Returns default implementation.
 	 */
 	static ClassLoaderStrategy get() {
-		return JoddCore.get().classLoaderStrategy();
+		return JoddCore.defaults().classLoaderStrategy();
 	}
 
 	/**

File: jodd-core/src/main/java/jodd/util/net/URLDecoder.java
Patch:
@@ -39,7 +39,7 @@ public class URLDecoder {
 	 * Decodes URL elements.
 	 */
 	public static String decode(final String url) {
-		return decode(url, JoddCore.get().defaults().getEncoding(), false);
+		return decode(url, JoddCore.defaults().defaults().getEncoding(), false);
 	}
 
 	/**
@@ -56,7 +56,7 @@ public static String decode(final String source, final String encoding) {
 	 * Decodes query name or value.
 	 */
 	public static String decodeQuery(final String source) {
-		return decode(source, JoddCore.get().defaults().getEncoding(), true);
+		return decode(source, JoddCore.defaults().defaults().getEncoding(), true);
 	}
 
 	/**

File: jodd-core/src/test/java/jodd/io/StreamUtilTest.java
Patch:
@@ -48,7 +48,6 @@
 import java.io.Flushable;
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.OutputStream;
 import java.io.StringReader;
 import java.io.StringWriter;
 import java.nio.charset.Charset;
@@ -603,7 +602,7 @@ void testCopy_Inputstream_Outputstream_ByteCount(String expected, String text, i
 
         Stream<Arguments> testdata_testCopy_Inputstream_Outputstream_ByteCount() throws Exception {
             return Stream.of(
-                    Arguments.of("The Unbearable Lightness of Java", "The Unbearable Lightness of Java", JoddCore.get().defaults().getIoBufferSize() + 250),
+                    Arguments.of("The Unbearable Lightness of Java", "The Unbearable Lightness of Java", JoddCore.defaults().defaults().getIoBufferSize() + 250),
                     Arguments.of("j", "jodd" , 1),
                     Arguments.of("jodd makes fun!", "jodd makes fun!",  15),
                     Arguments.of("", "text does not matter",  0)

File: jodd-db/src/main/java/jodd/db/DbQuery.java
Patch:
@@ -75,7 +75,7 @@ public class DbQuery<Q extends DbQuery> extends DbQueryBase<Q> {
 	 * Creates new query.
 	 */
 	public DbQuery(final Connection conn, final String sqlString) {
-		super(JoddDb.get().defaults().getQueryConfig(), JoddDb.get().defaults().isDebug());
+		super(JoddDb.defaults().defaults().getQueryConfig(), JoddDb.defaults().defaults().isDebug());
 		this.connection = conn;
 		this.sqlString = preprocessSql(sqlString);
 	}
@@ -84,7 +84,7 @@ public DbQuery(final Connection conn, final String sqlString) {
 	 * Creates a new query from {@link DbSession}.
 	 */
 	public DbQuery(final DbSession session, final String sqlString) {
-		super(JoddDb.get().defaults().getQueryConfig(), JoddDb.get().defaults().isDebug());
+		super(JoddDb.defaults().defaults().getQueryConfig(), JoddDb.defaults().defaults().isDebug());
 
 		initSession(session);
 

File: jodd-db/src/main/java/jodd/db/DbSession.java
Patch:
@@ -75,7 +75,7 @@ public DbSession(ConnectionProvider connectionProvider) {
 
 		this.connectionProvider = connectionProvider;
 		this.txActive = false;
-		this.txMode = JoddDb.get().defaults().getTransactionMode();
+		this.txMode = JoddDb.defaults().defaults().getTransactionMode();
 		this.queries = new HashSet<>();
 	}
 
@@ -256,7 +256,7 @@ public void beginTransaction(final DbTransactionMode mode) {
 	 * Starts transaction with default transaction mode.
 	 */
 	public void beginTransaction() {
-		beginTransaction(JoddDb.get().defaults().getTransactionMode());
+		beginTransaction(JoddDb.defaults().defaults().getTransactionMode());
 	}
 
 	/**

File: jodd-db/src/main/java/jodd/db/DbSessionProvider.java
Patch:
@@ -41,7 +41,7 @@ public interface DbSessionProvider {
 	 * Returns default instance.
 	 */
 	public static DbSessionProvider get() {
-		return JoddDb.get().sessionProvider();
+		return JoddDb.defaults().sessionProvider();
 	}
 
 	/**

File: jodd-db/src/main/java/jodd/db/connection/ConnectionProvider.java
Patch:
@@ -42,7 +42,7 @@ public interface ConnectionProvider extends AutoCloseable {
 	 * Returns default instance.
 	 */
 	public static ConnectionProvider get() {
-		return JoddDb.get().connectionProvider();
+		return JoddDb.defaults().connectionProvider();
 	}
 
 	/**

File: jodd-db/src/main/java/jodd/db/oom/DbOomQuery.java
Patch:
@@ -220,7 +220,7 @@ protected Object resolveRowResults(Object[] row) {
 
 	// ---------------------------------------------------------------- result set
 
-	protected boolean cacheEntities = JoddDb.get().defaults().getDbOomConfig().isCacheEntitiesInResultSet();
+	protected boolean cacheEntities = JoddDb.defaults().defaults().getDbOomConfig().isCacheEntitiesInResultSet();
 
 	/**
 	 * Defines if entities should be cached in {@link ResultSetMapper}.
@@ -251,7 +251,7 @@ protected ResultSetMapper createResultSetMapper(final ResultSet resultSet) {
 
 	// ---------------------------------------------------------------- db list
 
-	protected boolean entityAwareMode = JoddDb.get().defaults().getDbOomConfig().isEntityAwareMode();
+	protected boolean entityAwareMode = JoddDb.defaults().defaults().getDbOomConfig().isEntityAwareMode();
 
 	/**
 	 * Defines entity-aware mode for entities tracking in result collection.

File: jodd-db/src/main/java/jodd/db/oom/JoinHintResolver.java
Patch:
@@ -46,7 +46,7 @@
 public class JoinHintResolver {
 
 	public static JoinHintResolver get() {
-		return JoddDb.get().hintResolver();
+		return JoddDb.defaults().hintResolver();
 	}
 
 	public Object[] join(final Object[] data, final String hints) {

File: jodd-db/src/main/java/jodd/db/oom/mapper/DefaultResultSetMapper.java
Patch:
@@ -135,7 +135,7 @@ public DefaultResultSetMapper(final ResultSet resultSet, final Map<String, Colum
 				String tableName = null;
 
 				// resolve column and table name
-				final String columnAliasSeparator = JoddDb.get().defaults().getDbOomConfig().getColumnAliasSeparator();
+				final String columnAliasSeparator = JoddDb.defaults().defaults().getDbOomConfig().getColumnAliasSeparator();
 
 				int sepNdx = columnName.indexOf(columnAliasSeparator);
 				if (sepNdx != -1) {

File: jodd-db/src/main/java/jodd/db/oom/sqlgen/TemplateData.java
Patch:
@@ -47,7 +47,7 @@ public abstract class TemplateData {
 	private static final String COL_CODE_PREFIX = "col_";
 	
 	protected TemplateData() {
-		columnAliasType = JoddDb.get().defaults().getDbOomConfig().getDefaultColumnAliasType();
+		columnAliasType = JoddDb.defaults().defaults().getDbOomConfig().getDefaultColumnAliasType();
 	}
 
 	/**
@@ -78,7 +78,7 @@ protected void resetSoft() {
 	protected void resetHard() {
 		resetSoft();
 		objectRefs = null;
-		columnAliasType = JoddDb.get().defaults().getDbOomConfig().getDefaultColumnAliasType();
+		columnAliasType = JoddDb.defaults().defaults().getDbOomConfig().getDefaultColumnAliasType();
 	}
 
 

File: jodd-db/src/main/java/jodd/db/oom/sqlgen/chunks/ColumnsSelectChunk.java
Patch:
@@ -250,7 +250,7 @@ protected void appendAlias(final StringBuilder query, final DbEntityDescriptor d
 		String tableName = ded.getTableName();
 
 		ColumnAliasType columnAliasType = templateData.getColumnAliasType();
-		String columnAliasSeparator = JoddDb.get().defaults().getDbOomConfig().getColumnAliasSeparator();
+		String columnAliasSeparator = JoddDb.defaults().defaults().getDbOomConfig().getColumnAliasSeparator();
 
 		if (columnAliasType == null || columnAliasType == ColumnAliasType.TABLE_REFERENCE) {
 			templateData.registerColumnDataForTableRef(tableRef, tableName);
@@ -275,7 +275,7 @@ protected void appendColumnName(final StringBuilder query, final DbEntityDescrip
 			String tableName = ded.getTableName();
 			query.append(AS);
 
-			final String columnAliasSeparator = JoddDb.get().defaults().getDbOomConfig().getColumnAliasSeparator();
+			final String columnAliasSeparator = JoddDb.defaults().defaults().getDbOomConfig().getColumnAliasSeparator();
 
 			switch (templateData.getColumnAliasType()) {
 				case TABLE_NAME:

File: jodd-db/src/main/java/jodd/db/oom/sqlgen/chunks/InsertChunk.java
Patch:
@@ -67,7 +67,7 @@ public void process(final StringBuilder out) {
 
 		int size = 0;
 		for (DbEntityColumnDescriptor dec : decList) {
-			final boolean defaultIsUpdateablePrimaryKey = JoddDb.get().defaults().getSqlGenConfig().isUpdateablePrimaryKey();
+			final boolean defaultIsUpdateablePrimaryKey = JoddDb.defaults().defaults().getSqlGenConfig().isUpdateablePrimaryKey();
 
 			 if (dec.isId() && !defaultIsUpdateablePrimaryKey) {
 			 	continue;

File: jodd-db/src/main/java/jodd/db/oom/sqlgen/chunks/UpdateSetChunk.java
Patch:
@@ -69,7 +69,7 @@ public void process(final StringBuilder out) {
 
 		int size = 0;
 		for (DbEntityColumnDescriptor dec : decList) {
-			final boolean isUpdateablePrimaryKey = JoddDb.get().defaults().getSqlGenConfig().isUpdateablePrimaryKey();
+			final boolean isUpdateablePrimaryKey = JoddDb.defaults().defaults().getSqlGenConfig().isUpdateablePrimaryKey();
 
 			if (dec.isId() && !isUpdateablePrimaryKey) {
 				continue;

File: jodd-db/src/main/java/jodd/db/querymap/DbPropsQueryMap.java
Patch:
@@ -68,7 +68,7 @@ public void loadQueriesFromClasspath() {
 	 */
 	@Override
 	public String getQuery(final String key) {
-		if (JoddDb.get().defaults().isDebug()) {
+		if (JoddDb.defaults().defaults().isDebug()) {
 			loadQueriesFromClasspath();
 		}
 		return props.getValue(key);

File: jodd-db/src/main/java/jodd/db/querymap/QueryMap.java
Patch:
@@ -34,7 +34,7 @@
 public interface QueryMap {
 
 	public static QueryMap get() {
-		return JoddDb.get().queryMap();
+		return JoddDb.defaults().queryMap();
 	}
 
 	/**

File: jodd-db/src/main/java/jodd/db/servers/HsqlDbServer.java
Patch:
@@ -41,8 +41,8 @@ public HsqlDbServer(final String version) {
 
 	@Override
 	public void accept(final DbEntityManager dbEntityManager) {
-		JoddDb.get().defaults().getDbOomConfig().getTableNames().setLowercase(true);
-		JoddDb.get().defaults().getDbOomConfig().getColumnNames().setLowercase(true);
+		JoddDb.defaults().defaults().getDbOomConfig().getTableNames().setLowercase(true);
+		JoddDb.defaults().defaults().getDbOomConfig().getColumnNames().setLowercase(true);
 	}
 
 	@Override

File: jodd-db/src/main/java/jodd/db/servers/MySqlDbServer.java
Patch:
@@ -41,8 +41,8 @@ public MySqlDbServer(final String version) {
 
 	@Override
 	public void accept(final DbEntityManager dbEntityManager) {
-		JoddDb.get().defaults().getDbOomConfig().getTableNames().setLowercase(true);
-		JoddDb.get().defaults().getDbOomConfig().getColumnNames().setLowercase(true);
+		JoddDb.defaults().defaults().getDbOomConfig().getTableNames().setLowercase(true);
+		JoddDb.defaults().defaults().getDbOomConfig().getColumnNames().setLowercase(true);
 	}
 
 	@Override

File: jodd-db/src/main/java/jodd/db/servers/PostgreSqlDbServer.java
Patch:
@@ -41,8 +41,8 @@ public PostgreSqlDbServer(final String version) {
 
 	@Override
 	public void accept(final DbEntityManager dbEntityManager) {
-		JoddDb.get().defaults().getDbOomConfig().getTableNames().setLowercase(true);
-		JoddDb.get().defaults().getDbOomConfig().getColumnNames().setLowercase(true);
+		JoddDb.defaults().defaults().getDbOomConfig().getTableNames().setLowercase(true);
+		JoddDb.defaults().defaults().getDbOomConfig().getColumnNames().setLowercase(true);
 	}
 
 	@Override

File: jodd-db/src/main/java/jodd/db/servers/SQLiteDbServer.java
Patch:
@@ -41,7 +41,7 @@ public SQLiteDbServer(final String version) {
 
 	@Override
 	public void accept(final DbEntityManager dbEntityManager) {
-		JoddDb.get().defaults().getSqlGenConfig().setUpdateAcceptsTableAlias(false);
+		JoddDb.defaults().defaults().getSqlGenConfig().setUpdateAcceptsTableAlias(false);
 	}
 
 	@Override

File: jodd-db/src/main/java/jodd/db/servers/SqlServerDbServer.java
Patch:
@@ -41,8 +41,8 @@ public SqlServerDbServer(final String version) {
 
 	@Override
 	public void accept(final DbEntityManager dbEntityManager) {
-		JoddDb.get().defaults().getSqlGenConfig().setUpdateAcceptsTableAlias(false);
-		JoddDb.get().defaults().getSqlGenConfig().setUpdateablePrimaryKey(false);
+		JoddDb.defaults().defaults().getSqlGenConfig().setUpdateAcceptsTableAlias(false);
+		JoddDb.defaults().defaults().getSqlGenConfig().setUpdateablePrimaryKey(false);
 	}
 
 	@Override

File: jodd-db/src/test/java/jodd/db/DbJtxTransactionManagerTest.java
Patch:
@@ -51,7 +51,7 @@ void setup() {
 	@Override
 	@AfterEach
 	protected void tearDown() {
-		JoddDb.get().sessionProvider(sessionProvider);
+		JoddDb.defaults().getSessionProvider(sessionProvider);
 	}
 
 	@Test
@@ -60,7 +60,7 @@ void testSessionProvider() {
 		JtxTransactionManager jtxManager = new DbJtxTransactionManager(cp);
 		DbJtxSessionProvider sessionProvider = new DbJtxSessionProvider(jtxManager);
 
-		JoddDb.get().sessionProvider(sessionProvider);
+		JoddDb.defaults().getSessionProvider(sessionProvider);
 
 		for (int i = 0; i < 2; i++) {
 

File: jodd-db/src/test/java/jodd/db/fixtures/DbTestBase.java
Patch:
@@ -53,7 +53,7 @@ protected void setUp() throws Exception {
 			queryMap.props().load(this.getClass().getClassLoader().getResourceAsStream("queries.sql.props"));
 		}
 
-		JoddDb.get().queryMap(queryMap);
+		JoddDb.defaults().queryMap(queryMap);
 
 		LoggerFactory.setLoggerProvider(new TestLoggerProvider());
 		if (dbtxm != null) {

File: jodd-db/src/test/java/jodd/db/oom/CompositeTest.java
Patch:
@@ -52,7 +52,7 @@ protected void setUp() throws Exception {
 		super.setUp();
 
 		DbTestUtil.resetAll();
-		DbEntityManager dbEntityManager = JoddDb.get().dbEntityManager();
+		DbEntityManager dbEntityManager = JoddDb.defaults().dbEntityManager();
 		dbEntityManager.registerEntity(User.class);
 		dbEntityManager.registerEntity(Wizard.class);
 

File: jodd-db/src/test/java/jodd/db/oom/DbEnumTest.java
Patch:
@@ -45,7 +45,7 @@ protected void setUp() throws Exception {
 		super.setUp();
 
 		DbTestUtil.resetAll();
-		DbEntityManager dbEntityManager = JoddDb.get().dbEntityManager();
+		DbEntityManager dbEntityManager = JoddDb.defaults().dbEntityManager();
 		dbEntityManager.registerEntity(Enumerator.class);
 	}
 

File: jodd-db/src/test/java/jodd/db/oom/DbHint2Test.java
Patch:
@@ -102,7 +102,7 @@ protected void initDb(DbSession session) {
 	protected void setUp() throws Exception {
 		super.setUp();
 
-		DbEntityManager dbOom = JoddDb.get().dbEntityManager();
+		DbEntityManager dbOom = JoddDb.defaults().dbEntityManager();
 
 		dbOom.registerEntity(Boy4.class);
 		dbOom.registerEntity(Girl4.class);

File: jodd-db/src/test/java/jodd/db/oom/DbHintTest.java
Patch:
@@ -50,7 +50,7 @@ public void setUp() throws Exception {
 		super.setUp();
 
 		DbTestUtil.resetAll();
-		DbEntityManager dbEntityManager = JoddDb.get().dbEntityManager();
+		DbEntityManager dbEntityManager = JoddDb.defaults().dbEntityManager();
 		dbEntityManager.registerEntity(Boy2.class);
 		dbEntityManager.registerEntity(Girl.class);
 

File: jodd-db/src/test/java/jodd/db/oom/DbNoTableTest.java
Patch:
@@ -49,7 +49,7 @@ protected void setUp() throws Exception {
 		super.setUp();
 
 		DbTestUtil.resetAll();
-		DbEntityManager dbEntityManager = JoddDb.get().dbEntityManager();
+		DbEntityManager dbEntityManager = JoddDb.defaults().dbEntityManager();
 		dbEntityManager.registerEntity(Bean1.class);
 	}
 

File: jodd-db/src/test/java/jodd/db/oom/DbOom2Test.java
Patch:
@@ -103,7 +103,7 @@ void testOrm2() {
 			// ignore
 		}
 
-		DbEntityManager dbOom = JoddDb.get().dbEntityManager();
+		DbEntityManager dbOom = JoddDb.defaults().dbEntityManager();
 
 		assertEquals(2, dbOom.getTotalTypes());
 		assertEquals(0, dbOom.getTotalTableNames());

File: jodd-db/src/test/java/jodd/db/oom/DbOomTest.java
Patch:
@@ -66,7 +66,7 @@ protected void setUp() throws Exception {
 		super.setUp();
 
 		DbTestUtil.resetAll();
-		DbEntityManager dbOom = JoddDb.get().dbEntityManager();
+		DbEntityManager dbOom = JoddDb.defaults().dbEntityManager();
 
 		dbOom.registerEntity(Girl.class);
 		dbOom.registerEntity(BadBoy.class);

File: jodd-db/src/test/java/jodd/db/oom/DbSqlBuilderTest.java
Patch:
@@ -53,7 +53,7 @@ class DbSqlBuilderTest {
 	void setUp() throws Exception {
 
 		DbTestUtil.resetAll();
-		DbEntityManager dbOom = JoddDb.get().dbEntityManager();
+		DbEntityManager dbOom = JoddDb.defaults().dbEntityManager();
 		dbOom.registerType(Girl.class);
 		dbOom.registerType(BadGirl.class);
 		dbOom.registerType(Boy.class);

File: jodd-db/src/test/java/jodd/db/oom/DbSqlTemplateTest.java
Patch:
@@ -52,7 +52,7 @@ class DbSqlTemplateTest {
 	void setUp() throws Exception {
 
 		DbTestUtil.resetAll();
-		DbEntityManager dbEntityManager = JoddDb.get().dbEntityManager();
+		DbEntityManager dbEntityManager = JoddDb.defaults().dbEntityManager();
 		dbEntityManager.registerType(Boy.class);
 		dbEntityManager.registerType(BadBoy.class);
 		dbEntityManager.registerType(BadGirl.class);

File: jodd-db/src/test/java/jodd/db/oom/DbSqlTemplateWithPrefixTest.java
Patch:
@@ -44,10 +44,10 @@ class DbSqlTemplateWithPrefixTest {
 	void setUp() throws Exception {
 
 		DbTestUtil.resetAll();
-		DbEntityManager dbOom = JoddDb.get().dbEntityManager();
+		DbEntityManager dbOom = JoddDb.defaults().dbEntityManager();
 
-		JoddDb.get().defaults().getDbOomConfig().getTableNames().setPrefix("PRE_");
-		JoddDb.get().defaults().getDbOomConfig().getTableNames().setSuffix("_SUF");
+		JoddDb.defaults().defaults().getDbOomConfig().getTableNames().setPrefix("PRE_");
+		JoddDb.defaults().defaults().getDbOomConfig().getTableNames().setSuffix("_SUF");
 
 		dbOom.registerType(Boy.class);
 		dbOom.registerType(BadBoy.class);

File: jodd-db/src/test/java/jodd/db/oom/EntityCacheTest.java
Patch:
@@ -71,7 +71,7 @@ protected void setUp() throws Exception {
 		super.setUp();
 
 		DbTestUtil.resetAll();
-		DbEntityManager dbOom = JoddDb.get().dbEntityManager();
+		DbEntityManager dbOom = JoddDb.defaults().dbEntityManager();
 		dbOom.registerEntity(Girl2.class);
 		dbOom.registerEntity(Boy.class);
 

File: jodd-db/src/test/java/jodd/db/oom/KeyTest.java
Patch:
@@ -41,7 +41,7 @@ class KeyTest {
 	@Test
 	void testEqualEntities() {
 		DbTestUtil.resetAll();
-		DbEntityManager dbEntityManager = JoddDb.get().dbEntityManager();
+		DbEntityManager dbEntityManager = JoddDb.defaults().dbEntityManager();
 
 		DbEntityDescriptor<Foo> fooded = dbEntityManager.registerEntity(Foo.class);
 		DbEntityDescriptor<Bar> barded = dbEntityManager.registerEntity(Bar.class);

File: jodd-db/src/test/java/jodd/db/oom/MappingTest.java
Patch:
@@ -88,7 +88,7 @@ void testMapping() throws SQLException {
 		sql = "insert into FOO values (1, 555, 173, 7, 999, 'red', 1, '2009-08-07 06:05:04.3333', '2010-01-20 01:02:03.4444', 'W173', 'ABCDEF', 1.01, '-7.17', 0, '0')";
 		executeUpdate(session, sql);
 
-		DbEntityManager dbOom = JoddDb.get().dbEntityManager();
+		DbEntityManager dbOom = JoddDb.defaults().dbEntityManager();
 
 		dbOom.registerEntity(Foo.class);
 		SqlTypeManager.register(Boo.class, BooSqlType.class);

File: jodd-db/src/test/java/jodd/db/oom/dao/GenericDaoTest.java
Patch:
@@ -49,7 +49,7 @@ protected void setUp() throws Exception {
 		super.setUp();
 
 		DbTestUtil.resetAll();
-		DbEntityManager dbOom = JoddDb.get().dbEntityManager();
+		DbEntityManager dbOom = JoddDb.defaults().dbEntityManager();
 
 		dbOom.registerEntity(Girl.class);
 		dbOom.registerEntity(Boy.class);

File: jodd-db/src/test/java/jodd/db/oom/sqlgen/DbEntitySqlTest.java
Patch:
@@ -46,7 +46,7 @@ class DbEntitySqlTest {
 	void setUp() throws Exception {
 
 		DbTestUtil.resetAll();
-		DbEntityManager dbOom = JoddDb.get().dbEntityManager();
+		DbEntityManager dbOom = JoddDb.defaults().dbEntityManager();
 
 		dbOom.registerType(Boy.class);
 		dbOom.registerType(BadBoy.class);

File: jodd-db/src/testInt/java/jodd/db/oom/LiveMapperDbTest.java
Patch:
@@ -77,8 +77,8 @@ class PostgreSql extends PostgreSqlDbAccess {
 		@Override
 		public void initDb() {
 			super.initDb();
-			JoddDb.get().defaults().getDbOomConfig().getTableNames().setLowercase(true);
-			JoddDb.get().defaults().getDbOomConfig().getColumnNames().setLowercase(true);
+			JoddDb.defaults().defaults().getDbOomConfig().getTableNames().setLowercase(true);
+			JoddDb.defaults().defaults().getDbOomConfig().getColumnNames().setLowercase(true);
 		}
 
 		@Override

File: jodd-http/src/main/java/jodd/http/HttpConnectionProvider.java
Patch:
@@ -36,7 +36,7 @@ public interface HttpConnectionProvider {
 	 * Returns default http connection provider.
 	 */
 	public static HttpConnectionProvider get() {
-		return JoddHttp.get().httpConnectionProvider();
+		return JoddHttp.defaults().httpConnectionProvider();
 	}
 
 	/**

File: jodd-http/src/main/java/jodd/http/HttpRequest.java
Patch:
@@ -476,7 +476,7 @@ public String queryString() {
 
 	// ---------------------------------------------------------------- query encoding
 
-	protected String queryEncoding = JoddHttp.get().defaults().getQueryEncoding();
+	protected String queryEncoding = JoddHttp.defaults().defaults().getQueryEncoding();
 
 	/**
 	 * Defines encoding for query parameters. Default value is
@@ -901,7 +901,7 @@ protected Buffer buffer(final boolean fullRequest) {
 		// user-agent
 
 		if (header("User-Agent") == null) {
-			header("User-Agent", JoddHttp.get().defaults().getUserAgent());
+			header("User-Agent", JoddHttp.defaults().defaults().getUserAgent());
 		}
 
 		// POST method requires Content-Type to be set

File: jodd-http/src/main/java/jodd/http/net/SocketHttpConnectionProvider.java
Patch:
@@ -180,7 +180,7 @@ protected SSLSocket createSSLSocket(
 
 		// sslSocket is now ready
 
-		String enabledProtocols = JoddHttp.get().defaults().getSecureEnabledProtocols();
+		String enabledProtocols = JoddHttp.defaults().defaults().getSecureEnabledProtocols();
 
 		if (enabledProtocols != null) {
 			String[] values = StringUtil.splitc(enabledProtocols, ',');

File: jodd-joy/src/main/java/jodd/joy/JoyProxetta.java
Patch:
@@ -90,7 +90,7 @@ protected ProxyAspect createTxProxyAspects() {
 			AnnotationTxAdvice.class,
 			((ProxyPointcut)
 				methodInfo -> methodInfo.isPublicMethod() && methodInfo.isTopLevelMethod())
-				.and(MethodWithAnnotationPointcut.of(JoddJtx.get().defaults().getTxAnnotations()))
+				.and(MethodWithAnnotationPointcut.of(JoddJtx.defaults().defaults().getTxAnnotations()))
 		);
 	}
 

File: jodd-joy/src/main/java/jodd/joy/db/DbIdGenerator.java
Patch:
@@ -66,7 +66,7 @@ public synchronized void reset() {
 	public synchronized long nextId(final Class entityType) {
 		MutableLong lastId = entityIdsMap.get(entityType);
 		if (lastId == null) {
-			DbEntityManager dbEntityManager = JoddDb.get().dbEntityManager();
+			DbEntityManager dbEntityManager = JoddDb.defaults().dbEntityManager();
 
 			DbEntityDescriptor ded = dbEntityManager.lookupType(entityType);
 			String tableName = ded.getTableName();

File: jodd-joy/src/main/java/jodd/joy/db/DbQueryBuilder.java
Patch:
@@ -54,7 +54,7 @@ public class DbQueryBuilder {
 	protected final Map<String, String[]> methodParamNames;
 
 	public DbQueryBuilder() {
-		queryMap = JoddDb.get().queryMap();
+		queryMap = JoddDb.defaults().queryMap();
 		parsedSqlMap = new HashMap<>();
 		methodParamNames = new HashMap<>();
 	}

File: jodd-json/src/main/java/jodd/json/JsonParser.java
Patch:
@@ -93,7 +93,7 @@ public static JsonParser createLazyOne() {
 	protected char[] input;
 	protected int total;
 	protected Path path;
-	protected boolean useAltPaths = JoddJson.get().defaults().isUseAltPathsByParser();
+	protected boolean useAltPaths = JoddJson.defaults().defaults().isUseAltPathsByParser();
 	protected Class rootType;
 	protected MapToBean mapToBean;
 	protected boolean looseMode;
@@ -245,7 +245,7 @@ protected ValueConverter lookupValueConverter() {
 
 	// ---------------------------------------------------------------- class meta data name
 
-	protected String classMetadataName = JoddJson.get().defaults().getClassMetadataName();
+	protected String classMetadataName = JoddJson.defaults().defaults().getClassMetadataName();
 
 	/**
 	 * Sets local class meta-data name.

File: jodd-json/src/main/java/jodd/json/TypeJsonSerializerMap.java
Patch:
@@ -73,7 +73,7 @@ public class TypeJsonSerializerMap {
 	 * Returns default instance.
 	 */
 	public static TypeJsonSerializerMap get() {
-		return JoddJson.get().typeSerializers();
+		return JoddJson.defaults().typeSerializers();
 	}
 
 	private final TypeJsonSerializerMap defaultSerializerMap;

File: jodd-json/src/test/java/jodd/json/CustomAnnotationTest.java
Patch:
@@ -38,12 +38,12 @@ class CustomAnnotationTest {
 
 	@BeforeEach
 	void setUp() {
-		JoddJson.get().defaults().setJsonAnnotation(JSON2.class);
+		JoddJson.defaults().defaults().setJsonAnnotation(JSON2.class);
 	}
 
 	@AfterEach
 	void tearDown() {
-		JoddJson.get().defaults().setJsonAnnotation(JSON.class);
+		JoddJson.defaults().defaults().setJsonAnnotation(JSON.class);
 	}
 
 	@Test

File: jodd-json/src/test/java/jodd/json/JsonParserTest.java
Patch:
@@ -44,7 +44,6 @@
 import java.io.IOException;
 import java.math.BigInteger;
 import java.net.URL;
-import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.stream.Collectors;
@@ -75,7 +74,7 @@ void setUp() {
 
 	@AfterEach
 	void tearDown() {
-		JoddJson.get().defaults().setClassMetadataName(null);
+		JoddJson.defaults().defaults().setClassMetadataName(null);
 	}
 
 	@Test
@@ -562,7 +561,7 @@ public void setBongos(Bar[] bongos) {
 
 	@Test
 	void testComplexObject() {
-		JoddJson.get().defaults().setClassMetadataName("class");
+		JoddJson.defaults().defaults().setClassMetadataName("class");
 
 		JsonParsers.forEachParser(jsonParser -> {
 			String json = null;

File: jodd-jtx/src/main/java/jodd/jtx/proxy/AnnotationTxAdviceManager.java
Patch:
@@ -85,7 +85,7 @@ public AnnotationTxAdviceManager(final LeanJtxWorker jtxWorker, final String sco
 		this.jtxWorker = jtxWorker;
 		this.defaultTransactionMode = defaultTxMode == null ? new JtxTransactionMode().propagationSupports() : defaultTxMode;
 		this.scopePattern = scopePattern;
-		registerAnnotations(JoddJtx.get().defaults().getTxAnnotations());
+		registerAnnotations(JoddJtx.defaults().defaults().getTxAnnotations());
 	}
 
 	// ---------------------------------------------------------------- methods

File: jodd-mail/src/main/java/jodd/mail/EMLParser.java
Patch:
@@ -26,7 +26,6 @@
 package jodd.mail;
 
 import jodd.core.JoddCore;
-import jodd.core.JoddCoreDefaults;
 import jodd.io.StreamUtil;
 
 import javax.mail.MessagingException;
@@ -76,7 +75,7 @@ public ReceivedEmail parse(final String emlContent, final String charset) throws
 	 */
 	public ReceivedEmail parse(final String emlContent) throws MessagingException {
 		try {
-			return parse(emlContent, JoddCore.get().defaults().getEncoding());
+			return parse(emlContent, JoddCore.defaults().defaults().getEncoding());
 		} catch (final UnsupportedEncodingException ignore) {
 			return null;
 		}

File: jodd-mail/src/main/java/jodd/mail/EmailAddress.java
Patch:
@@ -157,7 +157,7 @@ public String toString() {
 	 */
 	public InternetAddress toInternetAddress() throws AddressException {
 		try {
-			return new InternetAddress(email, personalName, JoddCore.get().defaults().getEncoding());
+			return new InternetAddress(email, personalName, JoddCore.defaults().defaults().getEncoding());
 		} catch (final UnsupportedEncodingException ueex) {
 			throw new AddressException(ueex.toString());
 		}

File: jodd-mail/src/main/java/jodd/mail/EmailMessage.java
Patch:
@@ -26,7 +26,6 @@
 package jodd.mail;
 
 import jodd.core.JoddCore;
-import jodd.core.JoddCoreDefaults;
 
 /**
  * Represents email message including the mime type and encoding.
@@ -69,7 +68,7 @@ public EmailMessage(final String content, final String mimeType, final String en
 	 * @see JoddCoreDefaults#getEncoding()
 	 */
 	public EmailMessage(final String content, final String mimeType) {
-		this(content, mimeType, JoddCore.get().defaults().getEncoding());
+		this(content, mimeType, JoddCore.defaults().defaults().getEncoding());
 	}
 
 	// ---------------------------------------------------------------- getters

File: jodd-mail/src/main/java/jodd/mail/EmailUtil.java
Patch:
@@ -26,7 +26,6 @@
 package jodd.mail;
 
 import jodd.core.JoddCore;
-import jodd.core.JoddCoreDefaults;
 import jodd.io.FastByteArrayOutputStream;
 import jodd.io.StreamUtil;
 import jodd.util.CharUtil;
@@ -123,7 +122,7 @@ public static String extractEncoding(final String contentType, String defaultEnc
 
 		if (encoding == null) {
 			if (defaultEncoding == null) {
-				defaultEncoding = JoddCore.get().defaults().getEncoding();
+				defaultEncoding = JoddCore.defaults().defaults().getEncoding();
 			}
 			encoding = defaultEncoding;
 		}
@@ -173,7 +172,7 @@ private static String defaultFileName(final String contentType) {
 	 * Setups the system email properties.
 	 */
 	public static void setupSystemMailProperties() {
-		final JoddMailDefaults defaults = JoddMail.get().defaults();
+		final JoddMailDefaults defaults = JoddMail.defaults().defaults();
 		System.setProperty("mail.mime.encodefilename", Boolean.valueOf(defaults.isMailMimeEncodefilename()).toString());
 		System.setProperty("mail.mime.decodefilename", Boolean.valueOf(defaults.isMailMimeDecodefilename()).toString());
 	}

File: jodd-props/src/main/java/jodd/props/PropsUtil.java
Patch:
@@ -48,7 +48,7 @@ public class PropsUtil {
 	public static void loadFromClasspath(final Props p, final String... patterns) {
 		ClassScanner.get()
 			.onEntry(entryData -> {
-				String usedEncoding = JoddCore.get().defaults().getEncoding();
+				String usedEncoding = JoddCore.defaults().defaults().getEncoding();
 				if (StringUtil.endsWithIgnoreCase(entryData.name(), ".properties")) {
 					usedEncoding = StringPool.ISO_8859_1;
 				}

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java
Patch:
@@ -132,14 +132,14 @@ public static void checkArgumentIndex(final MethodInfo methodInfo, final int arg
 	 * Builds advice field name.
 	 */
 	public static String adviceFieldName(final String name, final int index) {
-		return JoddProxetta.get().defaults().getFieldPrefix() + name + JoddProxetta.get().defaults().getFieldDivider() + index;
+		return JoddProxetta.defaults().defaults().getFieldPrefix() + name + JoddProxetta.defaults().defaults().getFieldDivider() + index;
 	}
 
 	/**
 	 * Builds advice method name.
 	 */
 	public static String adviceMethodName(final String name, final int index) {
-		return JoddProxetta.get().defaults().getMethodPrefix() + name + JoddProxetta.get().defaults().getMethodDivider() + index;
+		return JoddProxetta.defaults().defaults().getMethodPrefix() + name + JoddProxetta.defaults().defaults().getMethodDivider() + index;
 	}
 
 	// ---------------------------------------------------------------- load

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaClassBuilder.java
Patch:
@@ -199,7 +199,7 @@ protected void makeStaticInitBlock() {
 	 * This created init method is called from each destination's constructor.
 	 */
 	protected void makeProxyConstructor() {
-		MethodVisitor mv = wd.dest.visitMethod(AsmUtil.ACC_PRIVATE | AsmUtil.ACC_FINAL, JoddProxetta.get().defaults().getInitMethodName(), DESC_VOID, null, null);
+		MethodVisitor mv = wd.dest.visitMethod(AsmUtil.ACC_PRIVATE | AsmUtil.ACC_FINAL, JoddProxetta.defaults().defaults().getInitMethodName(), DESC_VOID, null, null);
 		mv.visitCode();
 		if (wd.adviceInits != null) {
 			for (String name : wd.adviceInits) {

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaCtorBuilder.java
Patch:
@@ -88,7 +88,7 @@ public void visitEnd() {
 		methodVisitor.visitMethodInsn(
 			INVOKESPECIAL,
 			wd.thisReference,
-			JoddProxetta.get().defaults().getInitMethodName(), DESC_VOID,
+			JoddProxetta.defaults().defaults().getInitMethodName(), DESC_VOID,
 			false);
 
 		methodVisitor.visitInsn(RETURN);

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaMethodBuilder.java
Patch:
@@ -213,7 +213,7 @@ public void createProxyMethod(final TargetMethodData td) {
 			@Override
 			public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) {
 
-				if (!name.equals(JoddProxetta.get().defaults().getExecuteMethodName())) {
+				if (!name.equals(JoddProxetta.defaults().defaults().getExecuteMethodName())) {
 					return null;
 				}
 

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxyAspectData.java
Patch:
@@ -187,7 +187,7 @@ public MethodVisitor visitMethod(int access, String name, final String desc, fin
 					if (!desc.equals(DESC_VOID)) {
 						throw new ProxettaException("Invalid static initialization block description for advice: " + advice.getName());
 					}
-					name = JoddProxetta.get().defaults().getClinitMethodName() + JoddProxetta.get().defaults().getMethodDivider() + aspectIndex;
+					name = JoddProxetta.defaults().defaults().getClinitMethodName() + JoddProxetta.defaults().defaults().getMethodDivider() + aspectIndex;
 					access |= AsmUtil.ACC_PRIVATE | AsmUtil.ACC_FINAL;
 					wd.addAdviceClinitMethod(name);
 					return new MethodAdapter(wd.dest.visitMethod(access, name, desc, signature, exceptions)) {
@@ -227,7 +227,7 @@ public void visitFieldInsn(final int opcode, String owner, String name, final St
 						throw new ProxettaException("Advices can have only default constructors. Invalid advice: " + advice.getName());
 					}
 
-					name = JoddProxetta.get().defaults().getInitMethodName() + JoddProxetta.get().defaults().getMethodDivider() + aspectIndex;
+					name = JoddProxetta.defaults().defaults().getInitMethodName() + JoddProxetta.defaults().defaults().getMethodDivider() + aspectIndex;
 					access = ProxettaAsmUtil.makePrivateFinalAccess(access);
 					wd.addAdviceInitMethod(name);
 					return new MethodAdapter(wd.dest.visitMethod(access, name, desc, signature, exceptions)) {
@@ -285,7 +285,7 @@ public void visitFieldInsn(final int opcode, String owner, String name, final St
 				} else
 
 				// other methods
-				if (!name.equals(JoddProxetta.get().defaults().getExecuteMethodName())) {
+				if (!name.equals(JoddProxetta.defaults().defaults().getExecuteMethodName())) {
 					name = adviceMethodName(name, aspectIndex);
 					return new MethodAdapter(wd.dest.visitMethod(access, name, desc, signature, exceptions)) {
 

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/TargetMethodData.java
Patch:
@@ -62,7 +62,7 @@ ProxyAspectData getProxyData() {
 	// ---------------------------------------------------------------- method names
 
 	private String methodName(final int index) {
-		return methodName + JoddProxetta.get().defaults().getMethodDivider() + proxyData[index].aspectIndex;
+		return methodName + JoddProxetta.defaults().defaults().getMethodDivider() + proxyData[index].aspectIndex;
 	}
 
 	/**

File: jodd-proxetta/src/main/java/jodd/proxetta/impl/InvokeProxetta.java
Patch:
@@ -35,7 +35,7 @@
 public class InvokeProxetta extends Proxetta<InvokeProxetta, InvokeAspect> {
 
 	public InvokeProxetta() {
-		classNameSuffix = JoddProxetta.get().defaults().getInvokeProxyClassNameSuffix();
+		classNameSuffix = JoddProxetta.defaults().defaults().getInvokeProxyClassNameSuffix();
 	}
 
 	@Override

File: jodd-proxetta/src/main/java/jodd/proxetta/impl/ProxyProxetta.java
Patch:
@@ -35,7 +35,7 @@
 public class ProxyProxetta extends Proxetta<ProxyProxetta, ProxyAspect> {
 
 	public ProxyProxetta() {
-		classNameSuffix = JoddProxetta.get().defaults().getProxyClassNameSuffix();
+		classNameSuffix = JoddProxetta.defaults().defaults().getProxyClassNameSuffix();
 	}
 
 	@Override

File: jodd-proxetta/src/main/java/jodd/proxetta/impl/WrapperProxetta.java
Patch:
@@ -35,7 +35,7 @@
 public class WrapperProxetta extends Proxetta<WrapperProxetta, ProxyAspect> {
 
 	public WrapperProxetta() {
-		classNameSuffix = JoddProxetta.get().defaults().getWrapperClassNameSuffix();
+		classNameSuffix = JoddProxetta.defaults().defaults().getWrapperClassNameSuffix();
 	}
 
 	@Override

File: jodd-proxetta/src/main/java/jodd/proxetta/impl/WrapperProxettaFactory.java
Patch:
@@ -46,7 +46,7 @@ public WrapperProxettaFactory(final WrapperProxetta wrapperProxetta) {
 
 	protected Class targetClassOrInterface;
 	protected Class targetInterface;
-	protected String targetFieldName = JoddProxetta.get().defaults().getWrapperTargetFieldName();
+	protected String targetFieldName = JoddProxetta.defaults().defaults().getWrapperTargetFieldName();
 
 	/**
 	 * Defines class or interface to wrap.

File: jodd-proxetta/src/test/java/jodd/proxetta/InvReplTest.java
Patch:
@@ -62,7 +62,7 @@ void testReplacement() throws IllegalAccessException, InstantiationException, No
 //		PrintStream out = System.out;
 		System.setOut(new PrintStream(fbaos));
 
-		One one = (One) ClassLoaderUtil.defineClass((new StringBuilder()).append(className).append(JoddProxetta.get().defaults().getInvokeProxyClassNameSuffix()).toString(), klazz).newInstance();
+		One one = (One) ClassLoaderUtil.defineClass((new StringBuilder()).append(className).append(JoddProxetta.defaults().defaults().getInvokeProxyClassNameSuffix()).toString(), klazz).newInstance();
 		assertEquals("one ctor!one ctor!", fbaos.toString());    // clone ctor calls super ctor,
 		fbaos.reset();
 

File: jodd-servlet/src/main/java/jodd/servlet/filter/CharacterEncodingFilter.java
Patch:
@@ -132,7 +132,7 @@ public void init(final FilterConfig filterConfig) throws ServletException {
 		this.filterConfig = filterConfig;
 		this.encoding = filterConfig.getInitParameter("encoding");
 		if (this.encoding == null) {
-			this.encoding = JoddCore.get().defaults().getEncoding();
+			this.encoding = JoddCore.defaults().defaults().getEncoding();
 		}
 		this.ignore = Converter.get().toBooleanValue(filterConfig.getInitParameter("ignore"), true);
 	}

File: jodd-servlet/src/main/java/jodd/servlet/upload/MultipartRequest.java
Patch:
@@ -113,7 +113,7 @@ public MultipartRequest(final HttpServletRequest request, final FileUploadFactor
 			this.characterEncoding = request.getCharacterEncoding();
 		}
 		if (this.characterEncoding == null) {
-			this.characterEncoding = JoddCore.get().defaults().getEncoding();
+			this.characterEncoding = JoddCore.defaults().defaults().getEncoding();
 		}
 	}
 

File: jodd-upload/src/main/java/jodd/upload/impl/AdaptiveFileUpload.java
Patch:
@@ -157,7 +157,7 @@ protected void processStream() throws IOException {
 			}
 		}
 
-		tempFile = FileUtil.createTempFile(JoddCore.get().defaults().getTempFilePrefix(), TMP_FILE_SUFFIX, uploadPath);
+		tempFile = FileUtil.createTempFile(JoddCore.defaults().defaults().getTempFilePrefix(), TMP_FILE_SUFFIX, uploadPath);
 		BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(tempFile));
 		if (data != null) {
 			size = data.length;

File: jodd-json/src/main/java/jodd/json/JsonParserBase.java
Patch:
@@ -34,8 +34,8 @@
 
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.HashMap;
 import java.util.HashSet;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -47,7 +47,7 @@
  */
 public abstract class JsonParserBase {
 
-	protected static final Supplier<Map> HASMAP_SUPPLIER = HashMap::new;
+	protected static final Supplier<Map> HASMAP_SUPPLIER = LinkedHashMap::new;
 	protected static final Supplier<Map> LAZYMAP_SUPPLIER = LazyMap::new;
 
 	protected static final Supplier<List> ARRAYLIST_SUPPLIER = ArrayList::new;

File: jodd-bean/src/main/java/jodd/typeconverter/TypeConverterManager.java
Patch:
@@ -26,6 +26,7 @@
 package jodd.typeconverter;
 
 import jodd.bean.JoddBean;
+import jodd.cache.TypeCache;
 import jodd.datetime.JDateTime;
 import jodd.mutable.MutableByte;
 import jodd.mutable.MutableDouble;
@@ -87,7 +88,6 @@
 import java.util.Calendar;
 import java.util.Collection;
 import java.util.GregorianCalendar;
-import java.util.HashMap;
 import java.util.Locale;
 import java.util.TimeZone;
 import java.util.UUID;
@@ -105,7 +105,7 @@ public static TypeConverterManager get() {
 		return JoddBean.get().typeConverterManager();
 	}
 
-	private final HashMap<Class, TypeConverter> converters = new HashMap<>(70);
+	private final TypeCache<TypeConverter> converters = TypeCache.createDefault();
 	private final Converter converter;
 
 	// ---------------------------------------------------------------- methods

File: jodd-db/src/main/java/jodd/db/oom/DbEntityManager.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.db.oom;
 
+import jodd.cache.TypeCache;
 import jodd.db.JoddDb;
 import jodd.db.oom.naming.ColumnNamingStrategy;
 import jodd.db.oom.naming.TableNamingStrategy;
@@ -81,7 +82,7 @@ public void setPrimitiveEntitiesPrefixes(final String... primitiveEntitiesPrefix
 		this.primitiveEntitiesPrefixes = primitiveEntitiesPrefixes;
 	}
 
-	protected Map<Class, DbEntityDescriptor> descriptorsMap = new HashMap<>();
+	protected TypeCache<DbEntityDescriptor> descriptorsMap = TypeCache.createDefault();
 	protected Map<String, DbEntityDescriptor> entityNamesMap = new HashMap<>();
 	protected Map<String, DbEntityDescriptor> tableNamesMap = new NamedValuesHashMap<>();
 

File: jodd-db/src/main/java/jodd/db/type/SqlTypeManager.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.db.type;
 
+import jodd.cache.TypeCache;
 import jodd.datetime.JDateTime;
 import jodd.db.DbSqlException;
 import jodd.mutable.MutableBoolean;
@@ -46,16 +47,15 @@
 import java.sql.Ref;
 import java.sql.Time;
 import java.sql.Timestamp;
-import java.util.HashMap;
 
 /**
  * Provides dynamic object conversion to a type.
  * Contains a map of registered converters. User may add new converter.
  */
 public class SqlTypeManager {
 
-	private static HashMap<Class, SqlType> types = new HashMap<>();
-	private static HashMap<Class<? extends SqlType>, SqlType> sqlTypes = new HashMap<>();
+	private static TypeCache<SqlType> types = TypeCache.createDefault();
+	private static TypeCache<SqlType> sqlTypes = TypeCache.createDefault();
 
 	static {
 		registerDefaults();

File: jodd-madvoc/src/main/java/jodd/madvoc/MadvocConfig.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.madvoc;
 
+import jodd.cache.TypeCache;
 import jodd.madvoc.config.RootPackages;
 import jodd.madvoc.interceptor.ServletConfigInterceptor;
 import jodd.madvoc.macro.PathMacros;
@@ -43,8 +44,6 @@
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Constructor;
-import java.util.HashMap;
-import java.util.Map;
 import java.util.Objects;
 
 import static jodd.util.StringPool.COLON;
@@ -101,7 +100,7 @@ public void setActionConfig(final ActionConfig actionConfig) {
 
 	// ---------------------------------------------------------------- action method annotations
 
-	private Map<Class<? extends Annotation>, ActionConfig> annotations = new HashMap<>();
+	private TypeCache<ActionConfig> annotations = TypeCache.createDefault();
 	private Class<? extends Annotation>[] actionAnnotations = ClassUtil.emptyClassArray();
 	private ActionAnnotation<?>[] actionAnnotationInstances = new ActionAnnotation[0];
 

File: jodd-madvoc/src/main/java/jodd/madvoc/component/ResultsManager.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.madvoc.component;
 
+import jodd.cache.TypeCache;
 import jodd.log.Logger;
 import jodd.log.LoggerFactory;
 import jodd.madvoc.ActionConfig;
@@ -65,7 +66,7 @@ public class ResultsManager {
 
 	public ResultsManager() {
 		this.stringResultsFactories = new HashMap<>();
-		this.allResults = new HashMap<>();
+		this.allResults = TypeCache.createDefault();
 
 		// defaults
 		registerResultName("chain", Chain::to);
@@ -79,7 +80,7 @@ public ResultsManager() {
 	// ---------------------------------------------------------------- container
 
 	protected final Map<String, Function<String, Object>> stringResultsFactories;
-	protected final Map<Class<? extends ActionResult>, ActionResult> allResults;
+	protected final TypeCache<ActionResult> allResults;
 
 	/**
 	 * Returns all action results.

File: jodd-madvoc/src/main/java/jodd/madvoc/interceptor/AnnotatedPropertyInterceptor.java
Patch:
@@ -25,16 +25,15 @@
 
 package jodd.madvoc.interceptor;
 
+import jodd.cache.TypeCache;
 import jodd.introspector.ClassDescriptor;
 import jodd.introspector.ClassIntrospector;
 import jodd.introspector.PropertyDescriptor;
 import jodd.madvoc.ActionRequest;
 
 import java.lang.annotation.Annotation;
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
 
 /**
  * Performs some operation on all annotated properties. Helpful with injection of
@@ -69,7 +68,7 @@ public Object intercept(final ActionRequest actionRequest) throws Exception {
 
 	// ---------------------------------------------------------------- cache and lookup
 
-	protected Map<Class<?>, PropertyDescriptor[]> annotatedProperties = new HashMap<>();
+	protected TypeCache<PropertyDescriptor[]> annotatedProperties = TypeCache.createDefault();
 	protected static final PropertyDescriptor[] EMPTY = new PropertyDescriptor[0];
 
 	/**

File: jodd-petite/src/main/java/jodd/petite/PetiteBeans.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.petite;
 
+import jodd.cache.TypeCache;
 import jodd.introspector.ClassDescriptor;
 import jodd.introspector.ClassIntrospector;
 import jodd.introspector.CtorDescriptor;
@@ -78,7 +79,7 @@ public abstract class PetiteBeans {
 	/**
 	 * Map of all bean scopes.
 	 */
-	protected final Map<Class<? extends Scope>, Scope> scopes = new HashMap<>();
+	protected final TypeCache<Scope> scopes = TypeCache.createDefault();
 
 	/**
 	 * Map of all providers.
@@ -88,7 +89,7 @@ public abstract class PetiteBeans {
 	/**
 	 * Map of all bean collections.
 	 */
-	protected final Map<Class, String[]> beanCollections = new HashMap<>();
+	protected final TypeCache<String[]> beanCollections = TypeCache.createDefault();
 
 	/**
 	 * {@link PetiteConfig Petite configuration}.

File: jodd-petite/src/main/java/jodd/petite/ScopedProxyManager.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.petite;
 
+import jodd.cache.TypeCache;
 import jodd.log.Logger;
 import jodd.log.LoggerFactory;
 import jodd.petite.proxetta.ProxettaBeanDefinition;
@@ -39,7 +40,6 @@
 
 import java.lang.reflect.Field;
 import java.util.HashMap;
-import java.util.Map;
 
 /**
  * Manager for mixing scopes.
@@ -62,8 +62,8 @@ public class ScopedProxyManager {
 
 	protected ProxyAspect aspect = new ProxyAspect(ScopedProxyAdvice.class, new AllMethodsPointcut());
 
-	protected Map<Class, Class> proxyClasses = new HashMap<>();
-	protected Map<String, Object> proxies = new HashMap<>();
+	protected TypeCache<Class> proxyClasses = TypeCache.createDefault();
+	protected HashMap<String, Object> proxies = new HashMap<>();
 
 	public ScopedProxyManager() {
 		log.debug("ScopedProxyManager created");

File: jodd-proxetta/src/main/java/jodd/methref/Methref.java
Patch:
@@ -25,12 +25,12 @@
 
 package jodd.methref;
 
+import jodd.cache.TypeCache;
+import jodd.cache.TypeCache.Implementation;
 import jodd.proxetta.ProxettaUtil;
 import jodd.util.ClassUtil;
 
 import java.lang.reflect.Field;
-import java.util.Map;
-import java.util.WeakHashMap;
 
 /**
  * Super tool for getting method references (names) in compile-time.
@@ -39,7 +39,7 @@
 public class Methref<C> {
 
 	private static final MethrefProxetta proxetta = new MethrefProxetta();
-	private static final Map<Class, Class> cache = new WeakHashMap<>();
+	private static final TypeCache<Class> cache = TypeCache.create(Implementation.WEAK);
 
 	private final C instance;
 

File: jodd-proxetta/src/main/java/jodd/pathref/Pathref.java
Patch:
@@ -25,6 +25,8 @@
 
 package jodd.pathref;
 
+import jodd.cache.TypeCache;
+import jodd.cache.TypeCache.Implementation;
 import jodd.proxetta.ProxettaUtil;
 import jodd.util.ClassUtil;
 import jodd.util.StringPool;
@@ -34,8 +36,6 @@
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Map;
-import java.util.WeakHashMap;
 
 /**
  * Super tool for getting calling path reference in compile-time.
@@ -46,7 +46,7 @@ public class Pathref<C> {
 	public static final int ALL = -1;
 
 	private static final PathrefProxetta proxetta = new PathrefProxetta();
-	private static final Map<Class, Class> cache = new WeakHashMap<>();
+	private static final TypeCache<Class> cache = TypeCache.create(Implementation.WEAK);
 
 	private final C instance;
 

File: jodd-proxetta/src/main/java/jodd/proxetta/advice/DelegateAdviceUtil.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.proxetta.advice;
 
+import jodd.cache.TypeCache;
 import jodd.proxetta.MethodInfo;
 import jodd.proxetta.Proxetta;
 import jodd.proxetta.ProxettaException;
@@ -33,14 +34,13 @@
 import jodd.util.ClassUtil;
 
 import java.lang.reflect.Field;
-import java.util.HashMap;
 
 /**
  * Utilities for applying {@link DelegateAdvice} to target.
  */
 public class DelegateAdviceUtil {
 
-	private static HashMap<Class, Class> advicesMap = new HashMap<>();
+	private static TypeCache<Class> advicesMap = TypeCache.createDefault();
 
 	/**
 	 * Proxy Proxetta, applied on all public methods of the target class.

File: jodd-vtor/src/main/java/jodd/vtor/ValidationContext.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.vtor;
 
+import jodd.cache.TypeCache;
 import jodd.introspector.ClassDescriptor;
 import jodd.introspector.ClassIntrospector;
 import jodd.introspector.FieldDescriptor;
@@ -79,7 +80,7 @@ public void addAll(final List<Check> checkList) {
 
 	// ---------------------------------------------------------------- annotation resolver
 
-	private static Map<Class, List<Check>> cache = new HashMap<>();
+	private static TypeCache<List<Check>> cache = TypeCache.createDefault();
 
 	/**
 	 * Resolve validation context for provided target class.

File: jodd-core/src/main/java/jodd/core/JoddCore.java
Patch:
@@ -60,7 +60,7 @@ public static JoddCore get() {
 
 	private JoddCoreDefaults defaults = new JoddCoreDefaults();
 	private ClassLoaderStrategy classLoaderStrategy = new DefaultClassLoaderStrategy();
-	private TypeCache.Implementation typeCacheImplementation = TypeCache.Implementation.WEAK;
+	private TypeCache.Implementation typeCacheImplementation = TypeCache.Implementation.SYNC_MAP;
 
 	/**
 	 * Returns defaults module configuration.

File: jodd-core/src/test/java/jodd/util/StringUtilTest.java
Patch:
@@ -966,7 +966,7 @@ void testCharset() {
 		try {
 			assertEquals("123", StringUtil.convertCharset("123", "yyy", "xxx"));
 			fail("error");
-		} catch (IllegalArgumentException e) {
+		} catch (RuntimeException e) {
 			// ignore
 		}
 	}

File: jodd-props/src/main/java/jodd/props/PropsData.java
Patch:
@@ -187,6 +187,7 @@ public PropsEntry getProfileProperty(final String profile, final String key) {
 
 	/**
 	 * Lookup props value through profiles and base properties.
+	 * Returns {@code null} if value not found.
 	 */
 	protected String lookupValue(final String key, final String... profiles) {
 		if (profiles != null) {

File: jodd-core/src/main/java/jodd/io/findfile/FindFile.java
Patch:
@@ -250,7 +250,7 @@ public FindFile searchPaths(final URI... searchPath) {
 	 * Specifies the search path. Throws an exception if URL is invalid.
 	 */
 	public FindFile searchPath(final URL searchPath) {
-		File file = FileUtil.toFile(searchPath);
+		File file = FileUtil.toContainerFile(searchPath);
 		if (file == null) {
 			throw new FindFileException("URL error: " + searchPath);
 		}

File: jodd-core/src/main/java/jodd/util/ClassLoaderUtil.java
Patch:
@@ -206,7 +206,7 @@ public static File[] getDefaultClasspath(ClassLoader classLoader) {
 			URL[] urls = JavaBridge.getURLs(classLoader);
 			if (urls != null) {
 				for (URL u : urls) {
-					File f = FileUtil.toFile(u);
+					File f = FileUtil.toContainerFile(u);
 					if ((f != null) && f.exists()) {
 						try {
 							f = f.getCanonicalFile();

File: jodd-mail/src/main/java/jodd/mail/MailServer.java
Patch:
@@ -142,7 +142,7 @@ public static Builder create() {
 	 * @see SmtpServer
 	 * @see SmtpSslServer
 	 */
-	static class Builder {
+	public static class Builder {
 		private String host = null;
 		private int port = -1;
 		private boolean ssl = false;

File: jodd-core/src/main/java/jodd/io/StreamUtil.java
Patch:
@@ -143,7 +143,7 @@ public static int copy(final Reader input, final Writer output, final int count)
 			return copy(input, output);
 		}
 
-		int numToRead = bufferSize(count);
+		int numToRead = count;
 		char[] buffer = new char[numToRead];
 
 		int totalRead = ZERO;
@@ -179,7 +179,7 @@ public static int copy(final InputStream input, final OutputStream output, final
 			return copy(input, output);
 		}
 
-		int numToRead = bufferSize(count);
+		int numToRead = count;
 		byte[] buffer = new byte[numToRead];
 
 		int totalRead = ZERO;

File: jodd-core/src/main/java/jodd/util/ClassUtil.java
Patch:
@@ -26,6 +26,7 @@
 package jodd.util;
 
 import jodd.util.cl.ClassLoaderStrategy;
+import jodd.util.net.URLDecoder;
 
 import java.io.File;
 import java.io.IOException;
@@ -1293,6 +1294,8 @@ public static JarFile jarFileOf(Class<?> klass) {
 
 		endIndex += ".jar".length();
 		String f = s.substring(beginIndex, endIndex);
+		// decode URL string - it may contain encoded chars (e.g. whitespaces) which are not supported for file-instances
+		f = URLDecoder.decode(f, "UTF-8");
 		File file = new File(f);
 
 		try {

File: jodd-core/src/test/java/jodd/util/ClassUtilTest.java
Patch:
@@ -862,7 +862,7 @@ void onlyNullValuesIncluded() {
 
 	@Nested
 	@DisplayName("tests for ClassUtil#isObjectMethod")
-	class IsUserDefinedMethod {
+	class IsObjectMethod {
 
 		@Test
 		void methodFromObject() throws Exception {

File: jodd-core/src/perf/java/jodd/util/MathUtilRandomBenchmark.java
Patch:
@@ -68,7 +68,7 @@ public long randomLong_with_Random() {
 	}
 
 	@Benchmark
-	public long randomInt_with_Random() {
+	public int randomInt_with_Random() {
 		return int_inclusive + (int) (Math.random() * (int_exclusive - int_inclusive));
 	}
 
@@ -80,7 +80,7 @@ public long randomLong_with_ThreadLocalRandom() {
 	}
 
 	@Benchmark
-	public long randomInt_with_ThreadLocalRandom() {
+	public int randomInt_with_ThreadLocalRandom() {
 		return MathUtil.randomInt(int_inclusive, int_exclusive);
 	}
 

File: jodd-core/src/perf/java/jodd/util/MathUtilRandomBenchmark.java
Patch:
@@ -68,7 +68,7 @@ public long randomLong_with_Random() {
 	}
 
 	@Benchmark
-	public long randomInt_with_Random() {
+	public int randomInt_with_Random() {
 		return int_inclusive + (int) (Math.random() * (int_exclusive - int_inclusive));
 	}
 
@@ -80,7 +80,7 @@ public long randomLong_with_ThreadLocalRandom() {
 	}
 
 	@Benchmark
-	public long randomInt_with_ThreadLocalRandom() {
+	public int randomInt_with_ThreadLocalRandom() {
 		return MathUtil.randomInt(int_inclusive, int_exclusive);
 	}
 

File: jodd-core/src/main/java/jodd/io/FileUtil.java
Patch:
@@ -668,7 +668,7 @@ protected static void outChars(File dest, char[] data, String encoding, boolean
 		if (dest.exists()) {
 			checkIsFile(dest);
 		}
-		Writer out = new BufferedWriter(StreamUtil.getOutputStreamWriter(getFileOutputStream(dest, append), encoding));
+		Writer out = new BufferedWriter(StreamUtil.outputStreamWriterOf(getFileOutputStream(dest, append), encoding));
 		try {
 			out.write(data);
 		} finally {
@@ -920,7 +920,7 @@ public static String[] readLines(File file, String encoding) throws IOException
 
 		InputStream in = getStream(file, encoding);
 		try {
-			BufferedReader br = new BufferedReader(StreamUtil.getInputStreamReader(in, encoding));
+			BufferedReader br = new BufferedReader(StreamUtil.inputStreamReadeOf(in, encoding));
 			String strLine;
 			while ((strLine = br.readLine()) != null) {
 				list.add(strLine);

File: jodd-madvoc/src/main/java/jodd/madvoc/MadvocConfig.java
Patch:
@@ -28,7 +28,7 @@
 import jodd.madvoc.config.RootPackages;
 import jodd.madvoc.interceptor.ServletConfigInterceptor;
 import jodd.madvoc.macro.PathMacros;
-import jodd.madvoc.macro.WildcardPathMacros;
+import jodd.madvoc.macro.RegExpPathMacros;
 import jodd.madvoc.meta.Action;
 import jodd.madvoc.meta.ActionAnnotation;
 import jodd.madvoc.meta.ActionAnnotationData;
@@ -75,7 +75,7 @@ public MadvocConfig() {
 		rootPackages = new RootPackages();
 		detectDuplicatePathsEnabled = true;
 		preventCaching = true;
-		pathMacroClass = WildcardPathMacros.class;
+		pathMacroClass = RegExpPathMacros.class; //WildcardPathMacros.class;
 		pathMacroSeparators = new String[] {LEFT_BRACE, COLON, RIGHT_BRACE};
 		resultPathPrefix = null;
 		asyncConfig = new AsyncConfig();

File: jodd-madvoc/src/testInt/java/jodd/madvoc/TomcatTestServer.java
Patch:
@@ -55,7 +55,7 @@ public void start() throws Exception {
 		tomcat = new Tomcat();
 		tomcat.setPort(8173);
 		tomcat.setBaseDir(workingDir);
-		tomcat.addWebapp("/", webRoot.getAbsolutePath());
+		tomcat.addWebapp("", webRoot.getAbsolutePath());
 
 		tomcat.start();
 	}

File: jodd-core/src/perf/java/jodd/util/MathUtilRandomBenchmark.java
Patch:
@@ -64,12 +64,12 @@ public void prepare() {
 
 	@Benchmark
 	public long randomLong_with_Random() {
-		return long_inclusive + (long)(Math.random() * (long_exclusive - long_inclusive));
+		return long_inclusive + (long) (Math.random() * (long_exclusive - long_inclusive));
 	}
 
 	@Benchmark
 	public long randomInt_with_Random() {
-		return int_inclusive + (int)(Math.random() * (int_exclusive - int_inclusive));
+		return int_inclusive + (int) (Math.random() * (int_exclusive - int_inclusive));
 	}
 
 	// ----------------------------------------------------------------------- Jodd MathUtil with ThreadLocalRandom

File: jodd-core/src/test/java/jodd/util/ThreadUtilTest.java
Patch:
@@ -42,7 +42,7 @@ void testDaemonThreadFactory() {
 		ThreadFactory threadFactory = ThreadUtil.daemonThreadFactory("jodd-thread");
 
 		final StringBuilder sb = new StringBuilder();
-		final Runnable runnable = () -> {sb.append("a runnable instace for an jodd junit test");};
+		final Runnable runnable = () -> {sb.append("runnable instance for jodd junit test");};
 
 		Thread t1 = threadFactory.newThread(runnable);
 		Thread t2 = threadFactory.newThread(runnable);

File: jodd-joy/src/main/java/jodd/joy/JoyMadvoc.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.joy;
 
+import jodd.joy.madvoc.interceptor.DefaultInterceptorStack;
 import jodd.madvoc.AutomagicMadvocConfigurator;
 import jodd.madvoc.WebApp;
 import jodd.madvoc.petite.PetiteWebApp;
@@ -72,7 +73,7 @@ public void start() {
 		log.info("MADVOC start  ----------");
 
 		webApp = new PetiteWebApp();
-
+		webApp.configure(madvocConfig -> madvocConfig.getActionConfig().setInterceptors(DefaultInterceptorStack.class));
 		webApp.withPetiteContainer(petiteSupplier);
 
 		webApp.bindServletContext(servletContext);
@@ -91,7 +92,7 @@ public void start() {
 	@Override
 	public void stop() {
 		if (log != null) {
-			log.info("MADVOC stop");
+			log.info("MADVOC stop  ----------");
 		}
 		if (webApp != null) {
 			webApp.shutdown();

File: jodd-db/src/main/java/jodd/db/DbQuery.java
Patch:
@@ -349,7 +349,7 @@ public Q setLong(String param, long value) {
 
 	public Q setLong(int index, Number value) {
 		if (value == null) {
-			setNull(index, Types.INTEGER);
+			setNull(index, Types.BIGINT);
 		}
 		else {
 			setLong(index, value.longValue());
@@ -359,7 +359,7 @@ public Q setLong(int index, Number value) {
 
 	public Q setLong(String param, Number value) {
 		if (value == null) {
-			setNull(param, Types.INTEGER);
+			setNull(param, Types.BIGINT);
 		}
 		else {
 			setLong(param, value.longValue());

File: jodd-madvoc/src/main/java/jodd/madvoc/ActionRequest.java
Patch:
@@ -328,9 +328,7 @@ protected Object createActionMethodArgument(Class type) {
 		try {
 			if (type.getEnclosingClass() == null || Modifier.isStatic(type.getModifiers())) {
 				// regular or static class
-				Constructor ctor = type.getDeclaredConstructor(null);
-				ctor.setAccessible(true);
-				return ctor.newInstance();
+				return ClassUtil.newInstance(type);
 			} else {
 				// member class
 				Constructor ctor = type.getDeclaredConstructor(type.getDeclaringClass());

File: jodd-madvoc/src/main/java/jodd/madvoc/meta/MadvocComponent.java
Patch:
@@ -36,6 +36,6 @@
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@Target({ElementType.TYPE, ElementType.PACKAGE})
+@Target(ElementType.TYPE)
 public @interface MadvocComponent {
 }

File: jodd-joy/src/main/java/jodd/joy/JoyMadvoc.java
Patch:
@@ -81,7 +81,7 @@ public void start() {
 		webApp.registerComponent(new ProxettaProvider(proxettaSupplier.get()));
 		webApp.registerComponent(ProxettaAwareActionsManager.class);
 
-		webApp.registerComponent(AutomagicMadvocConfigurator.class, amc -> scannerSupplier.get());
+		webApp.registerComponent(AutomagicMadvocConfigurator.class, amc -> amc.withScanner(scannerSupplier.get()));
 
 		webAppConsumers.accept(webApp);
 

File: jodd-joy/src/main/java/jodd/joy/JoyPetite.java
Patch:
@@ -135,7 +135,7 @@ protected ProxettaAwarePetiteContainer createPetiteContainer() {
 	protected void registerPetiteContainerBeans(PetiteContainer petiteContainer) {
 		AutomagicPetiteConfigurator pcfg = new AutomagicPetiteConfigurator();
 
-		pcfg.withScanner(classScanner -> joyScannerSupplier.get());
+		pcfg.withScanner(classScanner -> joyScannerSupplier.get().accept(classScanner));
 
 		pcfg.configure(petiteContainer);
 	}

File: jodd-madvoc/src/main/java/jodd/madvoc/interceptor/DefaultWebAppInterceptors.java
Patch:
@@ -26,13 +26,10 @@
 package jodd.madvoc.interceptor;
 
 import jodd.madvoc.ActionRequest;
-import jodd.madvoc.MadvocConfig;
 import jodd.madvoc.MadvocException;
 
 /**
  * Marker for default interceptors for easy configuration purposes.
- * It will be replaced with the result of {@link MadvocConfig#getDefaultInterceptors()}
- * during action registration.
  */
 public final class DefaultWebAppInterceptors extends BaseActionInterceptor {
 

File: jodd-jtx/src/main/java/jodd/jtx/meta/TransactionAnnotation.java
Patch:
@@ -31,7 +31,7 @@
 import jodd.util.AnnotationDataReader;
 
 import java.lang.annotation.Annotation;
-import java.lang.reflect.AccessibleObject;
+import java.lang.reflect.AnnotatedElement;
 
 /**
  * Transaction annotation.
@@ -46,8 +46,8 @@ public TransactionAnnotation(Class<A> annotationClass) {
 	 * Need to override to make java compiler happy.
 	 */
 	@Override
-	public TransactionAnnotationData<A> readAnnotationData(AccessibleObject accessibleObject) {
-		return super.readAnnotationData(accessibleObject);
+	public TransactionAnnotationData<A> readAnnotatedElement(AnnotatedElement annotatedElement) {
+		return super.readAnnotatedElement(annotatedElement);
 	}
 
 	/**

File: jodd-jtx/src/main/java/jodd/jtx/proxy/AnnotationTxAdviceManager.java
Patch:
@@ -175,7 +175,7 @@ public void registerAnnotations(Class<? extends Annotation>... txAnnotations) {
 	 */
 	protected TransactionAnnotationData getTransactionAnnotation(Method method) {
 		for (TransactionAnnotation annotationInstance : annotationInstances) {
-			TransactionAnnotationData tad = annotationInstance.readAnnotationData(method);
+			TransactionAnnotationData tad = annotationInstance.readAnnotatedElement(method);
 			if (tad != null) {
 				return tad;
 			}

File: jodd-madvoc/src/main/java/jodd/madvoc/ActionConfig.java
Patch:
@@ -112,9 +112,9 @@ public ActionConfig(
 	{
 		this.actionClass = actionClass;
 		this.actionClassMethod = actionClassMethod;
-		this.actionPath = actionDef.getActionPath();
-		this.actionMethod = actionDef.getActionMethod() == null ? null : actionDef.getActionMethod().toUpperCase();
-		this.resultBasePath = actionDef.getResultBasePath();
+		this.actionPath = actionDef.actionPath();
+		this.actionMethod = actionDef.actionMethod() == null ? null : actionDef.actionMethod().toUpperCase();
+		this.resultBasePath = actionDef.resultBasePath();
 		this.hasArguments = actionClassMethod.getParameterTypes().length != 0;
 		this.actionResult = actionResult;
 		this.async = async;

File: jodd-madvoc/src/main/java/jodd/madvoc/ActionDef.java
Patch:
@@ -53,21 +53,21 @@ public ActionDef(String actionPath) {
 	/**
 	 * Returns action's path.
 	 */
-	public String getActionPath() {
+	public String actionPath() {
 		return actionPath;
 	}
 
 	/**
 	 * Returns action's HTTP method.
 	 */
-	public String getActionMethod() {
+	public String actionMethod() {
 		return actionMethod;
 	}
 
 	/**
 	 * Returns result base path.
 	 */
-	public String getResultBasePath() {
+	public String resultBasePath() {
 		return resultBasePath;
 	}
 }
\ No newline at end of file

File: jodd-madvoc/src/main/java/jodd/madvoc/component/ActionMethodParser.java
Patch:
@@ -160,7 +160,7 @@ public ActionConfig parse(final Class<?> actionClass, final Method actionMethod,
 	protected ActionAnnotationData detectActionAnnotationData(Method actionMethod) {
 		ActionAnnotationData annotationData = null;
 		for (ActionAnnotation actionAnnotation : madvocConfig.getActionAnnotationInstances()) {
-			annotationData = actionAnnotation.readAnnotationData(actionMethod);
+			annotationData = actionAnnotation.readAnnotatedElement(actionMethod);
 			if (annotationData != null) {
 				break;
 			}
@@ -175,7 +175,7 @@ protected void detectAndRegisterAlias(ActionAnnotationData annotationData, Actio
 		final String alias = parseMethodAlias(annotationData);
 
 		if (alias != null) {
-			String aliasPath = StringUtil.cutToIndexOf(actionDef.getActionPath(), StringPool.HASH);
+			String aliasPath = StringUtil.cutToIndexOf(actionDef.actionPath(), StringPool.HASH);
 			actionsManager.registerPathAlias(alias, aliasPath);
 		}
 	}

File: jodd-madvoc/src/main/java/jodd/madvoc/meta/ActionAnnotation.java
Patch:
@@ -29,7 +29,7 @@
 import jodd.util.AnnotationDataReader;
 
 import java.lang.annotation.Annotation;
-import java.lang.reflect.AccessibleObject;
+import java.lang.reflect.AnnotatedElement;
 
 /**
  * Action method annotation reader.
@@ -44,8 +44,8 @@ public ActionAnnotation(Class<A> annotationClass) {
 s	 * Need to override to make java compiler happy.
 	 */
 	@Override
-	public ActionAnnotationData<A> readAnnotationData(AccessibleObject accessibleObject) {
-		return super.readAnnotationData(accessibleObject);
+	public ActionAnnotationData<A> readAnnotatedElement(AnnotatedElement annotatedElement) {
+		return super.readAnnotatedElement(annotatedElement);
 	}
 
 	/**

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java
Patch:
@@ -700,12 +700,13 @@ public static void visitElementValue(MethodVisitor mv, Object elementValue, bool
 		if (enumClass != null) {
 			try {
 				String typeRef = AsmUtil.typeToTyperef(enumClass);
+				String typeSignature = AsmUtil.typeToSignature(enumClass);
 
 				// invoke
 				Method nameMethod = elementValue.getClass().getMethod("name");
 				String name = (String) nameMethod.invoke(elementValue);
 
-				mv.visitFieldInsn(GETSTATIC, typeRef, name, typeRef);
+				mv.visitFieldInsn(GETSTATIC, typeSignature, name, typeRef);
 
 				return;
 			} catch (Exception ignore) {

File: jodd-proxetta/src/test/java/jodd/proxetta/AnnTest.java
Patch:
@@ -49,7 +49,7 @@ void testMethodAnnotationsProxy() {
 					ProxyAspect.of(HeroProxyAdvice.class,
 						((ProxyPointcut) MethodInfo::isTopLevelMethod).and(AllRealMethodsPointcut.get())
 					))
-				//.setDebugFolder("/Users/igor/")
+				//.setDebugFolder(FileUtil.file("~"))
 				;
 
 		ProxettaFactory proxettaFactory = proxetta.proxy();

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/data/HeroProxyAdvice.java
Patch:
@@ -32,6 +32,7 @@
 
 public class HeroProxyAdvice implements ProxyAdvice {
 
+	@Override
 	public Object execute() throws Exception {
 		String name = "";
 

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/data/HeroProxyAdvice2.java
Patch:
@@ -32,6 +32,7 @@
 
 public class HeroProxyAdvice2 implements ProxyAdvice {
 
+	@Override
 	public Object execute() throws Exception {
 		String name = "";
 

File: jodd-db/src/test/java/jodd/db/DbTestQueryStatement.java
Patch:
@@ -37,7 +37,7 @@
 public class DbTestQueryStatement extends DbHsqldbTestCase {
 
 	@Test
-	public void testParams() throws Exception {
+	public void testParams() {
 		DbSession session = new DbSession(cp);
 
 		DbQuery query = new DbQuery(session, "!girlCount");

File: jodd-proxetta/src/main/java/jodd/proxetta/ProxyAdvice.java
Patch:
@@ -28,6 +28,7 @@
 /**
  * ProxyAdvice is the code portion of an aspect, i.e. the logic that replaces crosscutting concern.
  */
+@FunctionalInterface
 public interface ProxyAdvice {
 
 	/**

File: jodd-json/src/main/java/jodd/json/meta/JsonAnnotationManager.java
Patch:
@@ -90,7 +90,7 @@ public TypeData(List<String> includes, List<String> excludes, boolean strict, St
 		/**
 		 * Resolves real name from JSON name.
 		 */
-		public CharSequence resolveRealName(CharSequence jsonName) {
+		public String resolveRealName(String jsonName) {
 			if (jsonNames == null) {
 				return jsonName;
 			}
@@ -206,7 +206,7 @@ public String resolveJsonName(Class type, String name) {
 	/**
 	 * Returns real property name for given JSON property.
 	 */
-	public CharSequence resolveRealName(Class type, CharSequence jsonName) {
+	public String resolveRealName(Class type, String jsonName) {
 		TypeData typeData = lookupTypeData(type);
 
 		return typeData.resolveRealName(jsonName);

File: jodd-json/src/test/java/jodd/json/JsonSerializerTest.java
Patch:
@@ -546,7 +546,7 @@ void testExcludingNulls() {
 
 	@Test
 	void testFiles_on_linux() {
-		assumeTrue(SystemUtil.isHostLinux(), "no linux host");
+		assumeTrue(SystemUtil.isHostLinux() || SystemUtil.isHostMac(), "no linux host");
 
 		FileMan fileMan = new FileMan();
 		File userHome = new File(SystemUtil.userHome());

File: jodd-json/src/main/java/jodd/json/JsonParser.java
Patch:
@@ -632,10 +632,12 @@ protected CharSequence parseUnquotedStringContent() {
 			char c = input.charAt(ndx);
 
 			if (c <= ' ' || CharUtil.equalsOne(c, UNQOUTED_DELIMETERS)) {
+				int currentNdx = ndx;
+
 				// done
 				skipWhiteSpaces();
 
-				return input.subSequence(startNdx, ndx);
+				return input.subSequence(startNdx, currentNdx);
 			}
 
 			ndx++;

File: jodd-json/src/test/java/jodd/json/CatalogTest.java
Patch:
@@ -54,7 +54,7 @@ class CatalogTest {
 	protected String dataRoot;
 
 	@BeforeEach
-	void setUp() throws Exception {
+	void setUp() {
 		if (dataRoot != null) {
 			return;
 		}

File: jodd-props/src/test/java/jodd/props/PropsTest.java
Patch:
@@ -435,7 +435,7 @@ void testMultilineValue() throws IOException {
 		p.setValueTrimLeft(true);
 		p.load(readDataFile("test3.props"));
 
-		assertEquals("\n\tHello from\n\tthe multiline\n\tvalue\n", p.getValue("email.footer"));
+		assertEquals(System.lineSeparator() + "\tHello from" + System.lineSeparator() + "\tthe multiline" + System.lineSeparator() + "\tvalue" + System.lineSeparator() , p.getValue("email.footer"));
 		assertEquals("aaa", p.getValue("email.header"));
 	}
 

File: jodd-joy/src/main/java/jodd/joy/JoyDb.java
Patch:
@@ -144,7 +144,6 @@ public void start() {
 			registerDbEntities(dbEntityManager);
 		}
 
-		log.debug("Detecting database");
 		DbDetector.detectDatabaseAndConfigureDbOom(connectionProvider);
 
 		config.dbEntityManagerConsumers.accept(dbEntityManager);
@@ -159,6 +158,8 @@ protected void registerDbEntities(DbEntityManager dbEntityManager) {
 
 		scannerSupplier.get().applyTo(dbcfg);
 
+		log.info("*DB Automagic scanning");
+
 		dbcfg.configure(dbEntityManager);
 	}
 

File: jodd-joy/src/main/java/jodd/joy/JoyPetite.java
Patch:
@@ -113,7 +113,7 @@ public void start() {
 
 		// automagic configuration
 		if (config.autoConfiguration) {
-			log.debug("Petite auto-configuration started...");
+			log.info("*PETITE Automagic scanning");
 
 			registerPetiteContainerBeans(petiteContainer);
 		}

File: jodd-joy/src/main/java/jodd/joy/JoyDb.java
Patch:
@@ -48,7 +48,6 @@
 import java.util.function.Supplier;
 
 import static jodd.joy.JoddJoy.PETITE_DB;
-import static jodd.joy.JoddJoy.PETITE_DBOOM;
 import static jodd.joy.JoddJoy.PETITE_DBPOOL;
 
 public class JoyDb extends JoyBase {
@@ -139,7 +138,6 @@ public void start() {
 
 		DbEntityManager dbEntityManager = JoddDb.get().dbEntityManager();
 		dbEntityManager.reset();
-		petiteContainerSupplier.get().addBean(PETITE_DBOOM, dbEntityManager);
 
 		// automatic configuration
 		if (config.autoConfiguration) {
@@ -195,7 +193,6 @@ protected void checkConnectionProvider() {
 			if (log.isInfoEnabled()) {
 				log.info("Connected to database: " + name + " v" + version);
 			}
-
 		} catch (SQLException sex) {
 			log.error("DB connection failed: ", sex);
 		} finally {

File: jodd-joy/src/main/java/jodd/joy/JoyDb.java
Patch:
@@ -113,7 +113,7 @@ public void start() {
 			return;
 		}
 
-		log.info("DB start");
+		log.info("DB start ----------");
 
 		// connection pool
 		connectionProvider = createConnectionProviderIfNotSupplied();

File: jodd-joy/src/main/java/jodd/joy/JoyMadvoc.java
Patch:
@@ -51,7 +51,7 @@ public void setServletContext(ServletContext servletContext) {
 	public void start() {
 		initLogger();
 
-		log.info("MADVOC start");
+		log.info("MADVOC start  ----------");
 
 		webApp = new PetiteWebApp();
 

File: jodd-joy/src/main/java/jodd/joy/JoyProxetta.java
Patch:
@@ -74,7 +74,7 @@ public void addProxyAspect(ProxyAspect proxyAspect) {
 	public void start() {
 		initLogger();
 
-		log.info("PROXETTA start");
+		log.info("PROXETTA start ----------");
 
 		proxyProxetta = ProxyProxetta.withAspects(config.proxyAspects.toArray(new ProxyAspect[0]));
 	}

File: jodd-madvoc/src/testInt/java/jodd/madvoc/MoveTestBase.java
Patch:
@@ -59,7 +59,7 @@ void testMoveWithFiles() {
 
 		assertEquals(302, response.statusCode());
 
-		String location = response.header("location");
+		String location = response.location();
 
 		response = HttpRequest.get(location).send();
 

File: jodd-madvoc/src/testInt/java/jodd/madvoc/OneTwoActionTestBase.java
Patch:
@@ -39,7 +39,7 @@ public void testOneRedirectAction() {
 		assertEquals("", response.bodyText());
 		assertEquals(302, response.statusCode());
 
-		String redirectLocation = response.header("location");
+		String redirectLocation = response.location();
 
 		response = HttpRequest.get(redirectLocation).send();
 		assertEquals("value = [333]", response.bodyText());
@@ -51,7 +51,7 @@ public void testOneMoveAction() {
 		assertEquals("", response.bodyText());
 		assertEquals(302, response.statusCode());
 
-		String redirectLocation = response.header("location");
+		String redirectLocation = response.location();
 
 		response = HttpRequest.get(redirectLocation).send();
 		assertEquals("value = [777]", response.bodyText());
@@ -63,7 +63,7 @@ public void testOneMoveGoAction() {
 		assertEquals("", response.bodyText());
 		assertEquals(302, response.statusCode());
 
-		String redirectLocation = response.header("location");
+		String redirectLocation = response.location();
 
 		response = HttpRequest.get(redirectLocation).send();
 		assertEquals("value = [888]", response.bodyText());

File: jodd-madvoc/src/testInt/java/jodd/madvoc/RestActionTestBase.java
Patch:
@@ -44,7 +44,7 @@ public void testRestAction2() {
 		HttpResponse response = HttpRequest.get("localhost:8173/re/view2/g-321.html").send();
 		assertEquals(302, response.statusCode());
 
-		response = HttpRequest.get(response.header("location")).send();
+		response = HttpRequest.get(response.location()).send();
 		assertEquals("321", response.bodyText().trim());
 	}
 

File: jodd-http/src/test/java/jodd/http/TomcatServer.java
Patch:
@@ -34,6 +34,7 @@ public class TomcatServer extends TestServer {
 
 	protected Tomcat tomcat;
 
+	@Override
 	public void start() throws Exception {
 		super.start();
 
@@ -42,11 +43,12 @@ public void start() throws Exception {
 		tomcat = new Tomcat();
 		tomcat.setPort(8173);
 		tomcat.setBaseDir(workingDir);
-		tomcat.addWebapp("/", webRoot.getAbsolutePath());
+		tomcat.addWebapp("", webRoot.getAbsolutePath());
 
 		tomcat.start();
 	}
 
+	@Override
 	public void stop() throws Exception {
 		tomcat.stop();
 		tomcat.destroy();

File: jodd-http/src/test/java/jodd/http/fixture/RedirectServlet.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.http;
+package jodd.http.fixture;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;

File: jodd-http/src/test/java/jodd/http/fixture/TargetServlet.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.http;
+package jodd.http.fixture;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;

File: jodd-proxetta/src/main/java/jodd/asm/AsmUtil.java
Patch:
@@ -267,7 +267,7 @@ public static String typeToSignature(String className) {
 	 * Converts java-class name ("foo.Bar") to bytecode-name ("foo/bar").
 	 */
 	public static String typeToSignature(Class type) {
-		return type.getName().replace('.', '/');
+		return typeToSignature(type.getName());
 	}
 
 	/**

File: jodd-db/src/test/java/jodd/db/type/TypesUtilTest.java
Patch:
@@ -61,7 +61,7 @@ static void beforeAll() throws Exception {
 
 	@ParameterizedTest
 	@MethodSource(value = "testData_isIntegerType")
-	void isIntegerType(final boolean expected, final int input) {
+	void testIsIntegerType(final boolean expected, final int input) {
 		assertEquals(expected, TypesUtil.isIntegerType(input));
 	}
 
@@ -76,7 +76,7 @@ private static Arguments[] testData_isIntegerType() {
 
 	@ParameterizedTest
 	@MethodSource(value = "testData_isStringType")
-	void isStringType(final boolean expected, final int input) {
+	void testIsStringType(final boolean expected, final int input) {
 		assertEquals(expected, TypesUtil.isStringType(input));
 	}
 

File: jodd-log/src/main/java/jodd/log/impl/SimpleLogger.java
Patch:
@@ -167,6 +167,9 @@ protected String getCallerClass() {
 			if (className.equals(SimpleLogger.class.getName())) {
 				continue;
 			}
+			if (className.equals(Logger.class.getName())) {
+				continue;
+			}
 			return shortenClassName(className)
 				+ '.' + stackTraceElement.getMethodName()
 				+ ':' + stackTraceElement.getLineNumber();

File: jodd-madvoc/src/main/java/jodd/madvoc/component/MadvocController.java
Patch:
@@ -70,7 +70,7 @@ public class MadvocController implements MadvocListener.Ready {
 	protected Executor executor;
 
 	@Override
-	public void onEvent() {
+	public void ready() {
 		if (actionsManager.isAsyncModeOn()) {
 			executor = createAsyncExecutor();
 		}

File: jodd-lagarto/src/test/java/jodd/jerry/JerryTest.java
Patch:
@@ -57,8 +57,8 @@ void setUp() throws Exception {
 	void testText1() {
 		String html = readFile("text1.html");
 		String text = jerry(html).$("div.demo-container").text();
-
-		text = StringUtil.remove(text, "\n").trim();
+		String sub = (SystemUtil.isHostWindows()) ? "\r\n" : "\n";
+		text = StringUtil.remove(text, sub).trim();
 		text = StringUtil.compressChars(text, ' ');
 		assertEquals("Demonstration Box list item 1 list item 2", text);
 	}

File: jodd-proxetta/src/main/java/jodd/proxetta/MethodInfo.java
Patch:
@@ -76,7 +76,7 @@ default String getExceptionsAsString() {
 	String[] getExceptions();
 
 	/**
-	 * Returns java-like method signature of @{link #getDescription description}.
+	 * Returns java-like method signature of {@link #getDescription description}.
 	 * Does not contain any generic information.
 	 */
 	String getSignature();

File: jodd-servlet/src/main/java/jodd/servlet/RequestContextListener.java
Patch:
@@ -25,8 +25,8 @@
 
 package jodd.servlet;
 
-import javax.servlet.ServletRequestListener;
 import javax.servlet.ServletRequestEvent;
+import javax.servlet.ServletRequestListener;
 import javax.servlet.http.HttpServletRequest;
 
 /**
@@ -36,11 +36,13 @@ public class RequestContextListener implements ServletRequestListener {
 
 	private static final ThreadLocal<HttpServletRequest> requestHolder = new InheritableThreadLocal<>();
 
+	@Override
 	public void requestInitialized(ServletRequestEvent requestEvent) {
 		HttpServletRequest request = (HttpServletRequest) requestEvent.getServletRequest();
 		requestHolder.set(request);
 	}
 
+	@Override
 	public void requestDestroyed(ServletRequestEvent servletRequestEvent) {
 		requestHolder.remove();
 	}

File: jodd-petite/src/test/java/jodd/petite/WireTest.java
Patch:
@@ -64,7 +64,7 @@ void testContainer() {
 		configurator.setIncludedEntries("jodd.petite.fixtures.*");
 		configurator.setExcludedEntries("jodd.petite.fixtures.data.*", "jodd.petite.fixtures.tst3.*", "jodd.petite.fixtures.tst.Ses");
 		configurator.setExcludedEntries(
-				"jodd.petite.fixtures.data.*", "jodd.petite.fixtures.tst3.*", "jodd.petite.fixtures.tst.Ses", "*Public*", "*Secret*", "*$*",
+				"jodd.petite.fixtures.data.*", "jodd.petite.fixtures.tst6.*", "jodd.petite.fixtures.tst.Ses", "*Public*", "*Secret*", "*$*",
 			"jodd.petite.proxy.*");
 		pc.configureWith(configurator);
 

File: jodd-core/src/main/java/jodd/util/CharUtil.java
Patch:
@@ -154,7 +154,7 @@ public static char[] toRawCharArray(byte[] barr) {
 	 * Converts char array to byte array using default Jodd encoding.
 	 */
 	public static byte[] toByteArray(char[] carr) throws UnsupportedEncodingException {
-		return new String(carr).getBytes(JoddCore.defaults().getEncoding());
+		return new String(carr).getBytes(JoddCore.get().defaults().getEncoding());
 	}
 
 	/**
@@ -168,7 +168,7 @@ public static byte[] toByteArray(char[] carr, String charset) throws Unsupported
 	 * Converts byte array of default Jodd encoding to char array.
 	 */
 	public static char[] toCharArray(byte[] barr) throws UnsupportedEncodingException {
-		return new String(barr, JoddCore.defaults().getEncoding()).toCharArray();
+		return new String(barr, JoddCore.get().defaults().getEncoding()).toCharArray();
 	}
 
 	/**

File: jodd-core/src/main/java/jodd/util/URLDecoder.java
Patch:
@@ -39,7 +39,7 @@ public class URLDecoder {
 	 * Decodes URL elements.
 	 */
 	public static String decode(String url) {
-		return decode(url, JoddCore.defaults().getEncoding(), false);
+		return decode(url, JoddCore.get().defaults().getEncoding(), false);
 	}
 
 	/**
@@ -56,7 +56,7 @@ public static String decode(String source, String encoding) {
 	 * Decodes query name or value.
 	 */
 	public static String decodeQuery(String source) {
-		return decode(source, JoddCore.defaults().getEncoding(), true);
+		return decode(source, JoddCore.get().defaults().getEncoding(), true);
 	}
 
 	/**

File: jodd-core/src/test/java/jodd/io/StreamUtilTest.java
Patch:
@@ -601,7 +601,7 @@ void testCopy_Inputstream_Outputstream_ByteCount(String expected, String text, i
 
         Stream<Arguments> testdata_testCopy_Inputstream_Outputstream_ByteCount() throws Exception {
             return Stream.of(
-                    Arguments.of("The Unbearable Lightness of Java", "The Unbearable Lightness of Java", JoddCore.defaults().getIoBufferSize() + 250),
+                    Arguments.of("The Unbearable Lightness of Java", "The Unbearable Lightness of Java", JoddCore.get().defaults().getIoBufferSize() + 250),
                     Arguments.of("j", "jodd" , 1),
                     Arguments.of("jodd makes fun!", "jodd makes fun!",  15),
                     Arguments.of("", "text does not matter",  0)

File: jodd-core/src/test/java/jodd/util/ClassLoaderUtilTest.java
Patch:
@@ -25,10 +25,10 @@
 
 package jodd.util;
 
-import jodd.core.JoddCore;
 import jodd.io.FileUtil;
 import jodd.io.findfile.ClassScanner;
 import jodd.mutable.Value;
+import jodd.util.cl.ClassLoaderStrategy;
 import jodd.util.cl.DefaultClassLoaderStrategy;
 import jodd.util.cl.ExtendedURLClassLoader;
 import org.junit.jupiter.api.Test;
@@ -127,7 +127,7 @@ void testLoadClass() throws Exception {
 
 		// special case
 
-		DefaultClassLoaderStrategy defaultClassLoaderStrategy = (DefaultClassLoaderStrategy) JoddCore.defaults().getClassLoaderStrategy();
+		DefaultClassLoaderStrategy defaultClassLoaderStrategy = (DefaultClassLoaderStrategy) ClassLoaderStrategy.get();
 
 		defaultClassLoaderStrategy.setLoadArrayClassByComponentTypes(true);
 

File: jodd-mail/src/main/java/jodd/mail/EmailAddress.java
Patch:
@@ -119,7 +119,7 @@ public String getPersonalName() {
 	 */
 	public InternetAddress toInternetAddress() throws AddressException {
 		try {
-			return new InternetAddress(email, personalName, JoddCore.defaults().getEncoding());
+			return new InternetAddress(email, personalName, JoddCore.get().defaults().getEncoding());
 		} catch (UnsupportedEncodingException ueex) {
 			throw new AddressException(ueex.toString());
 		}

File: jodd-mail/src/main/java/jodd/mail/EmailMessage.java
Patch:
@@ -51,7 +51,7 @@ public EmailMessage(String content, String mimeType, String encoding) {
 	public EmailMessage(String content, String mimeType) {
 		this.content = content;
 		this.mimeType = mimeType;
-		this.encoding = JoddCore.defaults().getEncoding();
+		this.encoding = JoddCore.get().defaults().getEncoding();
 	}
 
 	// ---------------------------------------------------------------- getters

File: jodd-props/src/main/java/jodd/props/PropsUtil.java
Patch:
@@ -48,7 +48,7 @@ public static void loadFromClasspath(final Props p, final String... patterns) {
 		final ClassScanner scanner = new ClassScanner() {
 			@Override
 			protected void onEntry(EntryData entryData) throws IOException {
-				String encoding = JoddCore.defaults().getEncoding();
+				String encoding = JoddCore.get().defaults().getEncoding();
 				if (StringUtil.endsWithIgnoreCase(entryData.getName(), ".properties")) {
 					encoding = StringPool.ISO_8859_1;
 				}

File: jodd-servlet/src/main/java/jodd/servlet/filter/CharacterEncodingFilter.java
Patch:
@@ -132,7 +132,7 @@ public void init(FilterConfig filterConfig) throws ServletException {
 		this.filterConfig = filterConfig;
 		this.encoding = filterConfig.getInitParameter("encoding");
 		if (this.encoding == null) {
-			this.encoding = JoddCore.defaults().getEncoding();
+			this.encoding = JoddCore.get().defaults().getEncoding();
 		}
 		this.ignore = Converter.get().toBooleanValue(filterConfig.getInitParameter("ignore"), true);
 	}

File: jodd-servlet/src/main/java/jodd/servlet/upload/MultipartRequest.java
Patch:
@@ -113,7 +113,7 @@ public MultipartRequest(HttpServletRequest request, FileUploadFactory fileUpload
 			this.characterEncoding = request.getCharacterEncoding();
 		}
 		if (this.characterEncoding == null) {
-			this.characterEncoding = JoddCore.defaults().getEncoding();
+			this.characterEncoding = JoddCore.get().defaults().getEncoding();
 		}
 	}
 

File: jodd-upload/src/main/java/jodd/upload/impl/AdaptiveFileUpload.java
Patch:
@@ -157,7 +157,7 @@ protected void processStream() throws IOException {
 			}
 		}
 
-		tempFile = FileUtil.createTempFile(JoddCore.defaults().getTempFilePrefix(), TMP_FILE_SUFFIX, uploadPath);
+		tempFile = FileUtil.createTempFile(JoddCore.get().defaults().getTempFilePrefix(), TMP_FILE_SUFFIX, uploadPath);
 		BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(tempFile));
 		if (data != null) {
 			size = data.length;

File: jodd-json/src/test/java/jodd/json/JSONDeserializerTest.java
Patch:
@@ -57,6 +57,7 @@
 import java.util.Map;
 import java.util.TimeZone;
 
+import static org.junit.jupiter.api.Assertions.assertArrayEquals;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertNull;

File: jodd-bean/src/main/java/jodd/bean/JoddBeanRuntime.java
Patch:
@@ -29,7 +29,6 @@
 import jodd.introspector.Introspector;
 import jodd.typeconverter.ConvertBean;
 import jodd.typeconverter.TypeConverterManager;
-import jodd.typeconverter.TypeConverterManagerBean;
 
 /**
  * Jodd Bean runtime components.
@@ -38,7 +37,7 @@ public class JoddBeanRuntime {
 
 	private Introspector introspector = new CachingIntrospector();
 	private ConvertBean convertBean = new ConvertBean();
-	private TypeConverterManager typeConverterManager = new TypeConverterManagerBean(convertBean);
+	private TypeConverterManager typeConverterManager = new TypeConverterManager(convertBean);
 
 	/**
 	 * Returns the {@link Introspector} implementation. Default is {@link CachingIntrospector}.

File: jodd-bean/src/main/java/jodd/typeconverter/Convert.java
Patch:
@@ -34,13 +34,13 @@
 import java.util.Date;
 
 /**
- * Static version of {@link ConvertBean} of default {@link TypeConverterManagerBean}.
+ * Static version of {@link ConvertBean} of default {@link TypeConverterManager}.
  */
 public class Convert {
 
 	/**
 	 * Returns default {@link ConvertBean}. We should not store this instance
-	 * in a static variable as default {@link TypeConverterManagerBean} may be changed.
+	 * in a static variable as default {@link TypeConverterManager} may be changed.
 	 */
 	protected static ConvertBean convertBean() {
 		return JoddBean.runtime().convertBean();

File: jodd-bean/src/main/java/jodd/typeconverter/ConvertBean.java
Patch:
@@ -34,6 +34,8 @@
 
 public class ConvertBean {
 
+
+
 	/**
 	 * List of common types. Used for faster lookup and when needed to be used
 	 * by other converters.

File: jodd-bean/src/main/java/jodd/typeconverter/TypeConverter.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * Object converter interface.
  *
- * @see jodd.typeconverter.TypeConverterManagerBean
+ * @see TypeConverterManager
  */
 public interface TypeConverter<T> {
 

File: jodd-bean/src/main/java/jodd/typeconverter/impl/ClassArrayConverter.java
Patch:
@@ -25,7 +25,7 @@
 
 package jodd.typeconverter.impl;
 
-import jodd.typeconverter.TypeConverterManagerBean;
+import jodd.typeconverter.TypeConverterManager;
 import jodd.util.ArraysUtil;
 import jodd.util.StringPool;
 import jodd.util.StringUtil;
@@ -50,8 +50,8 @@
  */
 public class ClassArrayConverter extends ArrayConverter<Class> {
 
-	public ClassArrayConverter(TypeConverterManagerBean typeConverterManagerBean) {
-		super(typeConverterManagerBean, Class.class);
+	public ClassArrayConverter(TypeConverterManager typeConverterManager) {
+		super(typeConverterManager, Class.class);
 	}
 
 	@Override

File: jodd-bean/src/main/java/jodd/typeconverter/impl/CollectionConverter.java
Patch:
@@ -25,7 +25,6 @@
 
 package jodd.typeconverter.impl;
 
-import jodd.bean.JoddBean;
 import jodd.typeconverter.TypeConversionException;
 import jodd.typeconverter.TypeConverter;
 import jodd.typeconverter.TypeConverterManager;
@@ -50,7 +49,7 @@ public class CollectionConverter<T> implements TypeConverter<Collection<T>> {
 	public CollectionConverter(
 			Class<? extends Collection> collectionType,
 			Class<T> targetComponentType) {
-		this(JoddBean.runtime().typeConverterManager(), collectionType, targetComponentType);
+		this(TypeConverterManager.get(), collectionType, targetComponentType);
 	}
 
 	public CollectionConverter(

File: jodd-bean/src/main/java/jodd/typeconverter/impl/StringArrayConverter.java
Patch:
@@ -25,16 +25,16 @@
 
 package jodd.typeconverter.impl;
 
-import jodd.typeconverter.TypeConverterManagerBean;
+import jodd.typeconverter.TypeConverterManager;
 
 /**
  * Converts given object to <code>String[]</code>.
  * Based on {@link ArrayConverter}, but optimized for String arrays.
  */
 public class StringArrayConverter extends ArrayConverter<String> {
 
-	public StringArrayConverter(TypeConverterManagerBean typeConverterManagerBean) {
-		super(typeConverterManagerBean, String.class);
+	public StringArrayConverter(TypeConverterManager typeConverterManager) {
+		super(typeConverterManager, String.class);
 	}
 
 	@Override

File: jodd-bean/src/test/java/jodd/bean/BeanPrefixTest.java
Patch:
@@ -28,6 +28,7 @@
 import jodd.bean.fixtures.LifeBean;
 import jodd.introspector.CachingIntrospector;
 import jodd.introspector.ClassDescriptor;
+import jodd.introspector.Introspector;
 import jodd.introspector.PropertyDescriptor;
 import org.junit.jupiter.api.Test;
 
@@ -49,7 +50,7 @@ void testFieldPrefix1() {
 
 		assertEquals("foo", foo);
 
-		ClassDescriptor cd = JoddBean.runtime().introspector().lookup(LifeBean.class);
+		ClassDescriptor cd = Introspector.get().lookup(LifeBean.class);
 
 		PropertyDescriptor[] pds = cd.getAllPropertyDescriptors();
 		assertEquals(3, pds.length);
@@ -78,7 +79,7 @@ void testFieldPrefix1withEmpty() {
 		assertEquals("foo", foo);
 
 
-		ClassDescriptor cd = JoddBean.runtime().introspector().lookup(LifeBean.class);
+		ClassDescriptor cd = Introspector.get().lookup(LifeBean.class);
 
 		PropertyDescriptor[] pds = cd.getAllPropertyDescriptors();
 		assertEquals(3, pds.length);

File: jodd-db/src/main/java/jodd/db/oom/mapper/DefaultResultSetMapper.java
Patch:
@@ -26,7 +26,6 @@
 package jodd.db.oom.mapper;
 
 import jodd.bean.BeanUtil;
-import jodd.bean.JoddBean;
 import jodd.db.JoddDb;
 import jodd.db.oom.ColumnData;
 import jodd.db.oom.DbEntityColumnDescriptor;
@@ -36,6 +35,7 @@
 import jodd.db.oom.DbOomQuery;
 import jodd.db.type.SqlType;
 import jodd.db.type.SqlTypeManager;
+import jodd.typeconverter.TypeConverterManager;
 
 import java.sql.ResultSet;
 import java.sql.ResultSetMetaData;
@@ -333,7 +333,7 @@ protected Object readColumnValue(int colNdx, Class destinationType, Class<? exte
 					cachedColumnValue = sqlType.readValue(resultSet, colNdx + 1, destinationType, columnDbSqlType);
 				} else {
 					cachedColumnValue = resultSet.getObject(colNdx + 1);
-					cachedColumnValue = JoddBean.runtime().typeConverterManager().convertType(cachedColumnValue, destinationType);
+					cachedColumnValue = TypeConverterManager.get().convertType(cachedColumnValue, destinationType);
 				}
 			} catch (SQLException sex) {
 				throw new DbOomException(dbOomQuery, "Invalid value for column #" + (colNdx + 1), sex);

File: jodd-db/src/main/java/jodd/db/type/SqlType.java
Patch:
@@ -25,7 +25,7 @@
 
 package jodd.db.type;
 
-import jodd.bean.JoddBean;
+import jodd.typeconverter.TypeConverterManager;
 import jodd.util.ClassUtil;
 
 import java.sql.PreparedStatement;
@@ -75,7 +75,7 @@ protected SqlType() {
 	 * Stores value in database. Value is casted to sql type.
 	 */
 	public void storeValue(PreparedStatement st, int index, Object value, int dbSqlType) throws SQLException {
-		T t = JoddBean.runtime().typeConverterManager().convertType(value, sqlType);
+		T t = TypeConverterManager.get().convertType(value, sqlType);
 		set(st, index, t, dbSqlType);
 	}
 
@@ -104,7 +104,7 @@ protected <E> E prepareGetValue(T t, Class<E> destinationType) {
 		if (destinationType == null) {
 			return (E) t;
 		}
-		return JoddBean.runtime().typeConverterManager().convertType(t, destinationType);
+		return TypeConverterManager.get().convertType(t, destinationType);
 	}
 
 }
\ No newline at end of file

File: jodd-json/src/main/java/jodd/json/JsonParserBase.java
Patch:
@@ -25,12 +25,12 @@
 
 package jodd.json;
 
-import jodd.bean.JoddBean;
 import jodd.introspector.ClassDescriptor;
 import jodd.introspector.ClassIntrospector;
 import jodd.introspector.CtorDescriptor;
 import jodd.introspector.PropertyDescriptor;
 import jodd.introspector.Setter;
+import jodd.typeconverter.TypeConverterManager;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -137,7 +137,7 @@ protected Object convertType(Object value, Class targetType) {
 		}
 
 		try {
-			return JoddBean.runtime().typeConverterManager().convertType(value, targetType);
+			return TypeConverterManager.get().convertType(value, targetType);
 		}
 		catch (Exception ex) {
 			throw new JsonException("Type conversion failed", ex);

File: jodd-json/src/main/java/jodd/json/MapToBean.java
Patch:
@@ -25,11 +25,11 @@
 
 package jodd.json;
 
-import jodd.bean.JoddBean;
 import jodd.introspector.ClassDescriptor;
 import jodd.introspector.ClassIntrospector;
 import jodd.introspector.PropertyDescriptor;
 import jodd.introspector.Setter;
+import jodd.typeconverter.TypeConverterManager;
 import jodd.util.ClassLoaderUtil;
 import jodd.util.ClassUtil;
 
@@ -232,7 +232,7 @@ protected Object convert(Object value, Class targetType) {
 		}
 
 		try {
-			return JoddBean.runtime().typeConverterManager().convertType(value, targetType);
+			return TypeConverterManager.get().convertType(value, targetType);
 		}
 		catch (Exception ex) {
 			throw new JsonException("Type conversion failed", ex);

File: jodd-madvoc/src/main/java/jodd/madvoc/component/ResultsManager.java
Patch:
@@ -25,7 +25,6 @@
 
 package jodd.madvoc.component;
 
-import jodd.bean.JoddBean;
 import jodd.log.Logger;
 import jodd.log.LoggerFactory;
 import jodd.madvoc.ActionConfig;
@@ -36,6 +35,7 @@
 import jodd.madvoc.result.ActionResult;
 import jodd.madvoc.result.Result;
 import jodd.petite.meta.PetiteInject;
+import jodd.typeconverter.TypeConverterManager;
 
 import java.util.HashMap;
 import java.util.HashSet;
@@ -299,7 +299,7 @@ public ActionResult lookup(ActionRequest actionRequest, Object resultObject) {
 							resultObject = resultValue;
 						}
 						else {
-							resultObject = JoddBean.runtime().typeConverterManager().convertType(resultValue, targetClass);
+							resultObject = TypeConverterManager.get().convertType(resultValue, targetClass);
 						}
 					} catch (Exception ex) {
 						resultObject = resultValue;

File: jodd-madvoc/src/main/java/jodd/madvoc/injector/Target.java
Patch:
@@ -26,8 +26,8 @@
 package jodd.madvoc.injector;
 
 import jodd.bean.BeanUtil;
-import jodd.bean.JoddBean;
 import jodd.madvoc.MadvocException;
+import jodd.typeconverter.TypeConverterManager;
 
 import java.lang.reflect.Constructor;
 
@@ -130,7 +130,7 @@ public void writeValue(String propertyName, Object propertyValue, boolean silent
 			int dotNdx = propertyName.indexOf('.');
 
 			if (dotNdx == -1) {
-				value = JoddBean.runtime().typeConverterManager().convertType(propertyValue, type);
+				value = TypeConverterManager.get().convertType(propertyValue, type);
 				return;
 			}
 

File: jodd-upload/src/main/java/jodd/upload/typeconverter/FileUploadBinder.java
Patch:
@@ -25,7 +25,6 @@
 
 package jodd.upload.typeconverter;
 
-import jodd.bean.JoddBean;
 import jodd.typeconverter.TypeConverterManager;
 import jodd.typeconverter.impl.FileConverter;
 import jodd.upload.FileUpload;
@@ -41,7 +40,7 @@ public class FileUploadBinder {
 	 * Registers type converters.
 	 */
 	public static void registerTypeConverter() {
-		TypeConverterManager typeConverterManager = JoddBean.runtime().typeConverterManager();
+		final TypeConverterManager typeConverterManager = TypeConverterManager.get();
 
 		typeConverterManager.register(FileUpload.class, new FileUploadConverter());
 

File: jodd-upload/src/test/java/jodd/typeconverter/impl/UploadTypeConverterManagerAddonTest.java
Patch:
@@ -25,7 +25,7 @@
 
 package jodd.typeconverter.impl;
 
-import jodd.bean.JoddBean;
+import jodd.typeconverter.TypeConverterManager;
 import jodd.upload.FileUpload;
 import jodd.upload.JoddUpload;
 import jodd.upload.typeconverter.FileUploadConverter;
@@ -41,11 +41,11 @@ class UploadTypeConverterManagerAddonTest {
 	void testRegistration() {
 		JoddUpload.init();
 
-		FileUploadConverter fileUploadConverter = (FileUploadConverter) JoddBean.runtime().typeConverterManager().lookup(FileUpload.class);
+		FileUploadConverter fileUploadConverter = (FileUploadConverter) TypeConverterManager.get().lookup(FileUpload.class);
 
 		assertNotNull(fileUploadConverter);
 
-		FileConverter fileTypeConverter = (FileConverter) JoddBean.runtime().typeConverterManager().lookup(File.class);
+		FileConverter fileTypeConverter = (FileConverter) TypeConverterManager.get().lookup(File.class);
 
 		assertNotNull(fileTypeConverter);
 		assertNotNull(fileTypeConverter.addonFileConverters);

File: jodd-bean/src/main/java/jodd/bean/BeanUtilUtil.java
Patch:
@@ -50,7 +50,7 @@ abstract class BeanUtilUtil implements BeanUtil {
 	// ---------------------------------------------------------------- introspector
 
 	protected Introspector introspector = JoddBean.runtime().introspector();
-	protected TypeConverterManagerBean typeConverterManager = TypeConverterManager.getDefaultTypeConverterManager();
+	protected TypeConverterManager typeConverterManager = JoddBean.runtime().typeConverterManager();
 
 	/**
 	 * Sets {@link Introspector introspector} implementation.
@@ -62,7 +62,6 @@ public void setIntrospector(Introspector introspector) {
 	/**
 	 * Returns {@link Introspector introspector} implementation.
 	 */
-	@Override
 	public Introspector getIntrospector() {
 		return introspector;
 	}
@@ -77,7 +76,7 @@ public void setTypeConverterManager(TypeConverterManagerBean typeConverterManage
 	/**
 	 * Returns {@link TypeConverterManagerBean type converter manager} implementation.
 	 */
-	public TypeConverterManagerBean getTypeConverterManager() {
+	public TypeConverterManager getTypeConverterManager() {
 		return typeConverterManager;
 	}
 

File: jodd-bean/src/main/java/jodd/bean/JoddBean.java
Patch:
@@ -34,6 +34,9 @@ public class JoddBean {
 
 	private static JoddBeanRuntime runtime = new JoddBeanRuntime();
 
+	/**
+	 * Returns Jodd Bean runtime components.
+	 */
 	public static JoddBeanRuntime runtime() {
 		return runtime;
 	}

File: jodd-bean/src/main/java/jodd/typeconverter/ConvertBean.java
Patch:
@@ -82,7 +82,6 @@ public class ConvertBean {
 	 */
 	protected TypeConverter[] typeConverters = new TypeConverter[commonTypes.length];
 
-
 	public void register(Class type, TypeConverter typeConverter) {
 		for (int i = 0; i < commonTypes.length; i++) {
 			Class commonType = commonTypes[i];

File: jodd-bean/src/test/java/jodd/typeconverter/EnumTest.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.typeconverter;
 
+import jodd.bean.JoddBean;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -37,9 +38,9 @@ public enum En {
 
 	@Test
 	void testCastEnums() {
-		En en = TypeConverterManager.convertType("ONE", En.class);
+		En en = JoddBean.runtime().typeConverterManager().convertType("ONE", En.class);
 		assertEquals(En.ONE, en);
-		en = TypeConverterManager.convertType("TWO", En.class);
+		en = JoddBean.runtime().typeConverterManager().convertType("TWO", En.class);
 		assertEquals(En.TWO, en);
 	}
 

File: jodd-bean/src/test/java/jodd/typeconverter/ToCollectionTest.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.typeconverter;
 
+import jodd.bean.JoddBean;
 import org.junit.jupiter.api.Test;
 
 import java.util.HashSet;
@@ -44,7 +45,7 @@ void testConvertToList() {
 		set.add("456");
 
 		List<Integer> list =
-			TypeConverterManager.convertToCollection(set, List.class, Integer.class);
+			JoddBean.runtime().typeConverterManager().convertToCollection(set, List.class, Integer.class);
 
 		assertNotNull(list);
 		assertEquals(2, list.size());

File: jodd-bean/src/test/java/jodd/typeconverter/impl/TypeConverterManagerTest.java
Patch:
@@ -25,7 +25,7 @@
 
 package jodd.typeconverter.impl;
 
-import jodd.typeconverter.TypeConverterManager;
+import jodd.bean.JoddBean;
 import org.junit.jupiter.api.Test;
 
 import java.io.File;
@@ -37,7 +37,7 @@ class TypeConverterManagerTest {
 
 	@Test
 	void testRegistration() {
-		FileConverter fileTypeConverter = (FileConverter) TypeConverterManager.lookup(File.class);
+		FileConverter fileTypeConverter = (FileConverter) JoddBean.runtime().typeConverterManager().lookup(File.class);
 
 		assertNotNull(fileTypeConverter);
 		assertNull(fileTypeConverter.addonFileConverters);

File: jodd-db/src/main/java/jodd/db/oom/mapper/DefaultResultSetMapper.java
Patch:
@@ -26,6 +26,7 @@
 package jodd.db.oom.mapper;
 
 import jodd.bean.BeanUtil;
+import jodd.bean.JoddBean;
 import jodd.db.JoddDb;
 import jodd.db.oom.ColumnData;
 import jodd.db.oom.DbEntityColumnDescriptor;
@@ -35,7 +36,6 @@
 import jodd.db.oom.DbOomQuery;
 import jodd.db.type.SqlType;
 import jodd.db.type.SqlTypeManager;
-import jodd.typeconverter.TypeConverterManager;
 
 import java.sql.ResultSet;
 import java.sql.ResultSetMetaData;
@@ -333,7 +333,7 @@ protected Object readColumnValue(int colNdx, Class destinationType, Class<? exte
 					cachedColumnValue = sqlType.readValue(resultSet, colNdx + 1, destinationType, columnDbSqlType);
 				} else {
 					cachedColumnValue = resultSet.getObject(colNdx + 1);
-					cachedColumnValue = TypeConverterManager.convertType(cachedColumnValue, destinationType);
+					cachedColumnValue = JoddBean.runtime().typeConverterManager().convertType(cachedColumnValue, destinationType);
 				}
 			} catch (SQLException sex) {
 				throw new DbOomException(dbOomQuery, "Invalid value for column #" + (colNdx + 1), sex);

File: jodd-json/src/main/java/jodd/json/JsonParserBase.java
Patch:
@@ -25,12 +25,12 @@
 
 package jodd.json;
 
+import jodd.bean.JoddBean;
 import jodd.introspector.ClassDescriptor;
 import jodd.introspector.ClassIntrospector;
 import jodd.introspector.CtorDescriptor;
 import jodd.introspector.PropertyDescriptor;
 import jodd.introspector.Setter;
-import jodd.typeconverter.TypeConverterManager;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -137,7 +137,7 @@ protected Object convertType(Object value, Class targetType) {
 		}
 
 		try {
-			return TypeConverterManager.convertType(value, targetType);
+			return JoddBean.runtime().typeConverterManager().convertType(value, targetType);
 		}
 		catch (Exception ex) {
 			throw new JsonException("Type conversion failed", ex);

File: jodd-json/src/main/java/jodd/json/MapToBean.java
Patch:
@@ -25,11 +25,11 @@
 
 package jodd.json;
 
+import jodd.bean.JoddBean;
 import jodd.introspector.ClassDescriptor;
 import jodd.introspector.ClassIntrospector;
 import jodd.introspector.PropertyDescriptor;
 import jodd.introspector.Setter;
-import jodd.typeconverter.TypeConverterManager;
 import jodd.util.ClassLoaderUtil;
 import jodd.util.ClassUtil;
 
@@ -232,7 +232,7 @@ protected Object convert(Object value, Class targetType) {
 		}
 
 		try {
-			return TypeConverterManager.convertType(value, targetType);
+			return JoddBean.runtime().typeConverterManager().convertType(value, targetType);
 		}
 		catch (Exception ex) {
 			throw new JsonException("Type conversion failed", ex);

File: jodd-madvoc/src/main/java/jodd/madvoc/component/ResultsManager.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.madvoc.component;
 
+import jodd.bean.JoddBean;
 import jodd.log.Logger;
 import jodd.log.LoggerFactory;
 import jodd.madvoc.ActionConfig;
@@ -35,11 +36,10 @@
 import jodd.madvoc.result.ActionResult;
 import jodd.madvoc.result.Result;
 import jodd.petite.meta.PetiteInject;
-import jodd.typeconverter.TypeConverterManager;
 
+import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
-import java.util.HashMap;
 import java.util.Set;
 
 /**
@@ -299,7 +299,7 @@ public ActionResult lookup(ActionRequest actionRequest, Object resultObject) {
 							resultObject = resultValue;
 						}
 						else {
-							resultObject = TypeConverterManager.convertType(resultValue, targetClass);
+							resultObject = JoddBean.runtime().typeConverterManager().convertType(resultValue, targetClass);
 						}
 					} catch (Exception ex) {
 						resultObject = resultValue;

File: jodd-madvoc/src/main/java/jodd/madvoc/injector/Target.java
Patch:
@@ -26,8 +26,8 @@
 package jodd.madvoc.injector;
 
 import jodd.bean.BeanUtil;
+import jodd.bean.JoddBean;
 import jodd.madvoc.MadvocException;
-import jodd.typeconverter.TypeConverterManager;
 
 import java.lang.reflect.Constructor;
 
@@ -130,7 +130,7 @@ public void writeValue(String propertyName, Object propertyValue, boolean silent
 			int dotNdx = propertyName.indexOf('.');
 
 			if (dotNdx == -1) {
-				value = TypeConverterManager.convertType(propertyValue, type);
+				value = JoddBean.runtime().typeConverterManager().convertType(propertyValue, type);
 				return;
 			}
 

File: jodd-upload/src/test/java/jodd/typeconverter/impl/UploadTypeConverterManagerAddonTest.java
Patch:
@@ -25,7 +25,7 @@
 
 package jodd.typeconverter.impl;
 
-import jodd.typeconverter.TypeConverterManager;
+import jodd.bean.JoddBean;
 import jodd.upload.FileUpload;
 import jodd.upload.JoddUpload;
 import jodd.upload.typeconverter.FileUploadConverter;
@@ -41,11 +41,11 @@ class UploadTypeConverterManagerAddonTest {
 	void testRegistration() {
 		JoddUpload.init();
 
-		FileUploadConverter fileUploadConverter = (FileUploadConverter) TypeConverterManager.lookup(FileUpload.class);
+		FileUploadConverter fileUploadConverter = (FileUploadConverter) JoddBean.runtime().typeConverterManager().lookup(FileUpload.class);
 
 		assertNotNull(fileUploadConverter);
 
-		FileConverter fileTypeConverter = (FileConverter) TypeConverterManager.lookup(File.class);
+		FileConverter fileTypeConverter = (FileConverter) JoddBean.runtime().typeConverterManager().lookup(File.class);
 
 		assertNotNull(fileTypeConverter);
 		assertNotNull(fileTypeConverter.addonFileConverters);

File: jodd-db/src/main/java/jodd/db/oom/DbOomUtil.java
Patch:
@@ -26,6 +26,7 @@
 package jodd.db.oom;
 
 import jodd.bean.BeanUtil;
+import jodd.db.JoddDb;
 import jodd.util.StringUtil;
 
 /**
@@ -41,7 +42,7 @@ public static void populateGeneratedKeys(Object entity, DbOomQuery query) {
 		if (generatedColumns == null) {
 			return;
 		}
-		DbEntityDescriptor ded = query.getManager().lookupType(entity.getClass());
+		DbEntityDescriptor ded = JoddDb.runtime().dbOomManager().lookupType(entity.getClass());
 
 		// prepare key types
 		Class[] keyTypes = new Class[generatedColumns.length];

File: jodd-db/src/main/java/jodd/db/oom/dao/GenericDao.java
Patch:
@@ -27,6 +27,7 @@
 
 import jodd.bean.BeanUtil;
 import jodd.db.DbQuery;
+import jodd.db.JoddDb;
 import jodd.db.oom.DbEntityDescriptor;
 import jodd.db.oom.DbOomException;
 import jodd.db.oom.DbOomManager;
@@ -103,7 +104,7 @@ protected long generateNextId(DbEntityDescriptor ded) {
 	 * Otherwise, entity will be inserted into the database.
 	 */
 	public <E> E store(E entity) {
-		DbOomManager dboom = DbOomManager.getInstance();
+		DbOomManager dboom = JoddDb.runtime().dbOomManager();
 		Class type = entity.getClass();
 		DbEntityDescriptor ded = dboom.lookupType(type);
 
@@ -243,7 +244,7 @@ public void deleteById(Object entity) {
 
 			if (result != 0) {
 				// now reset the ID value
-				DbOomManager dboom = DbOomManager.getInstance();
+				DbOomManager dboom = JoddDb.runtime().dbOomManager();
 				Class type = entity.getClass();
 				DbEntityDescriptor ded = dboom.lookupType(type);
 

File: jodd-db/src/main/java/jodd/db/oom/sqlgen/chunks/SqlChunk.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.db.oom.sqlgen.chunks;
 
+import jodd.db.JoddDb;
 import jodd.db.oom.DbEntityColumnDescriptor;
 import jodd.db.oom.DbEntityDescriptor;
 import jodd.db.oom.sqlgen.DbSqlBuilderException;
@@ -154,7 +155,7 @@ public void init(TemplateData templateData) {
 	 * Lookups for entity name and throws exception if entity name not found.
 	 */
 	protected DbEntityDescriptor lookupName(String entityName) {
-		DbEntityDescriptor ded = templateData.getDbOomManager().lookupName(entityName);
+		DbEntityDescriptor ded = JoddDb.runtime().dbOomManager().lookupName(entityName);
 		if (ded == null) {
 			throw new DbSqlBuilderException("Entity name not registered: " + entityName);
 		}
@@ -165,7 +166,7 @@ protected DbEntityDescriptor lookupName(String entityName) {
 	 * Lookups for entity name and throws an exception if entity type is invalid.
 	 */
 	protected DbEntityDescriptor lookupType(Class entity) {
-		DbEntityDescriptor ded = templateData.getDbOomManager().lookupType(entity);
+		DbEntityDescriptor ded = JoddDb.runtime().dbOomManager().lookupType(entity);
 		if (ded == null) {
 			throw new DbSqlBuilderException("Invalid or not-persistent entity: " + entity.getName());
 		}

File: jodd-db/src/main/java/jodd/db/oom/sqlgen/chunks/UpdateSetChunk.java
Patch:
@@ -26,9 +26,9 @@
 package jodd.db.oom.sqlgen.chunks;
 
 import jodd.bean.BeanUtil;
+import jodd.db.JoddDb;
 import jodd.db.oom.DbEntityColumnDescriptor;
 import jodd.db.oom.DbEntityDescriptor;
-import jodd.db.oom.DbOomManager;
 import jodd.db.oom.DbOomUtil;
 import jodd.util.StringUtil;
 
@@ -69,8 +69,9 @@ public void process(StringBuilder out) {
 
 		int size = 0;
 		for (DbEntityColumnDescriptor dec : decList) {
+			final boolean isUpdateablePrimaryKey = JoddDb.defaults().getSqlGenConfig().isUpdateablePrimaryKey();
 
-			if (dec.isId() && !DbOomManager.getInstance().getSqlGenConfig().isUpdateablePrimaryKey()) {
+			if (dec.isId() && !isUpdateablePrimaryKey) {
 				continue;
 			}
 

File: jodd-db/src/main/java/jodd/db/querymap/DbPropsQueryMap.java
Patch:
@@ -25,7 +25,7 @@
 
 package jodd.db.querymap;
 
-import jodd.db.DbManager;
+import jodd.db.JoddDb;
 import jodd.props.Props;
 import jodd.props.PropsUtil;
 
@@ -72,7 +72,7 @@ public void load() {
 	 */
 	@Override
 	public String getQuery(String key) {
-		if (DbManager.getInstance().isDebug()) {
+		if (JoddDb.defaults().isDebug()) {
 			load();
 		}
 		return props.getValue(key);

File: jodd-db/src/main/java/jodd/db/servers/HsqlDbServer.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.db.servers;
 
+import jodd.db.JoddDb;
 import jodd.db.oom.DbOomManager;
 
 /**
@@ -40,8 +41,8 @@ public HsqlDbServer(String version) {
 
 	@Override
 	public void accept(DbOomManager dbOomManager) {
-		dbOomManager.getTableNames().setLowercase(true);
-		dbOomManager.getColumnNames().setLowercase(true);
+		JoddDb.defaults().getDbOomConfig().getTableNames().setLowercase(true);
+		JoddDb.defaults().getDbOomConfig().getColumnNames().setLowercase(true);
 	}
 
 	@Override

File: jodd-db/src/main/java/jodd/db/servers/PostgreSqlDbServer.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.db.servers;
 
+import jodd.db.JoddDb;
 import jodd.db.oom.DbOomManager;
 
 /**
@@ -40,8 +41,8 @@ public PostgreSqlDbServer(String version) {
 
 	@Override
 	public void accept(DbOomManager dbOomManager) {
-		dbOomManager.getTableNames().setLowercase(true);
-		dbOomManager.getColumnNames().setLowercase(true);
+		JoddDb.defaults().getDbOomConfig().getTableNames().setLowercase(true);
+		JoddDb.defaults().getDbOomConfig().getColumnNames().setLowercase(true);
 	}
 
 	@Override

File: jodd-db/src/main/java/jodd/db/servers/SQLiteDbServer.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.db.servers;
 
+import jodd.db.JoddDb;
 import jodd.db.oom.DbOomManager;
 
 /**
@@ -40,7 +41,7 @@ public SQLiteDbServer(String version) {
 
 	@Override
 	public void accept(DbOomManager dbOomManager) {
-		dbOomManager.getSqlGenConfig().setUpdateAcceptsTableAlias(false);
+		JoddDb.defaults().getSqlGenConfig().setUpdateAcceptsTableAlias(false);
 	}
 
 	@Override

File: jodd-db/src/main/java/jodd/db/servers/SqlServerDbServer.java
Patch:
@@ -25,6 +25,7 @@
 
 package jodd.db.servers;
 
+import jodd.db.JoddDb;
 import jodd.db.oom.DbOomManager;
 
 /**
@@ -40,8 +41,8 @@ public SqlServerDbServer(String version) {
 
 	@Override
 	public void accept(DbOomManager dbOomManager) {
-		dbOomManager.getSqlGenConfig().setUpdateAcceptsTableAlias(false);
-		dbOomManager.getSqlGenConfig().setUpdateablePrimaryKey(false);
+		JoddDb.defaults().getSqlGenConfig().setUpdateAcceptsTableAlias(false);
+		JoddDb.defaults().getSqlGenConfig().setUpdateablePrimaryKey(false);
 	}
 
 	@Override

File: jodd-db/src/test/java/jodd/db/fixtures/DbTestBase.java
Patch:
@@ -24,10 +24,10 @@
 // POSSIBILITY OF SUCH DAMAGE.
 package jodd.db.fixtures;
 
-import jodd.db.DbManager;
 import jodd.db.DbQuery;
 import jodd.db.DbSession;
 import jodd.db.DbThreadSession;
+import jodd.db.JoddDb;
 import jodd.db.jtx.DbJtxTransactionManager;
 import jodd.db.pool.CoreConnectionPool;
 import jodd.db.querymap.DbPropsQueryMap;
@@ -46,7 +46,7 @@ public abstract class DbTestBase {
 
 	@BeforeEach
 	protected void setUp() throws Exception {
-		DbManager.getInstance().setQueryMap(new DbPropsQueryMap());
+		JoddDb.runtime().queryMap(new DbPropsQueryMap());
 
 		LoggerFactory.setLoggerProvider(new TestLoggerProvider());
 		if (dbtxm != null) {

File: jodd-db/src/test/java/jodd/db/oom/DbHint2Test.java
Patch:
@@ -27,6 +27,7 @@
 
 import jodd.db.DbSession;
 import jodd.db.DbThreadSession;
+import jodd.db.JoddDb;
 import jodd.db.fixtures.DbHsqldbTestCase;
 import jodd.db.oom.fixtures.Boy4;
 import jodd.db.oom.fixtures.Girl4;
@@ -101,9 +102,8 @@ protected void initDb(DbSession session) {
 	protected void setUp() throws Exception {
 		super.setUp();
 
-		DbOomManager.resetAll();
+		DbOomManager dbOom = JoddDb.runtime().dbOomManager();
 
-		DbOomManager dbOom = DbOomManager.getInstance();
 		dbOom.registerEntity(Boy4.class);
 		dbOom.registerEntity(Girl4.class);
 		dbOom.registerEntity(Room.class);

File: jodd-db/src/testInt/java/jodd/db/oom/LiveMapperDbTest.java
Patch:
@@ -27,6 +27,7 @@
 
 import jodd.datetime.JDateTime;
 import jodd.db.DbSession;
+import jodd.db.JoddDb;
 import jodd.db.oom.fixtures.Tester2;
 import jodd.db.oom.sqlgen.DbEntitySql;
 import org.junit.jupiter.api.Test;
@@ -76,8 +77,8 @@ class PostgreSql extends PostgreSqlDbAccess {
 		@Override
 		public void initDb() {
 			super.initDb();
-			dboom.getTableNames().setLowercase(true);
-			dboom.getColumnNames().setLowercase(true);
+			JoddDb.defaults().getDbOomConfig().getTableNames().setLowercase(true);
+			JoddDb.defaults().getDbOomConfig().getColumnNames().setLowercase(true);
 		}
 
 		@Override

File: jodd-joy/src/main/java/jodd/joy/db/DbQueryBuilder.java
Patch:
@@ -25,7 +25,7 @@
 
 package jodd.joy.db;
 
-import jodd.db.DbManager;
+import jodd.db.JoddDb;
 import jodd.db.oom.DbOomException;
 import jodd.db.oom.DbOomQuery;
 import jodd.db.oom.DbSqlGenerator;
@@ -54,7 +54,7 @@ public class DbQueryBuilder {
 	protected final Map<String, String[]> methodParamNames;
 
 	public DbQueryBuilder() {
-		queryMap = DbManager.getInstance().getQueryMap();
+		queryMap = JoddDb.runtime().queryMap();
 		parsedSqlMap = new HashMap<>();
 		methodParamNames = new HashMap<>();
 	}

File: jodd-mail/src/main/java/jodd/mail/ReceiveMailSession.java
Patch:
@@ -44,7 +44,7 @@ public class ReceiveMailSession {
 	protected final Store store;
 
 	static {
-		JoddMail.mailSystem.defineJavaMailSystemProperties();
+		EmailUtil.setupSystemMail();
 	}
 
 	/**

File: jodd-core/src/main/java/jodd/io/FileUtil.java
Patch:
@@ -66,9 +66,10 @@ public class FileUtil {
 	private static final String MSG_UNABLE_TO_DELETE = "Unable to delete: ";
 
 	/**
-	 * Simple factory for <code>File</code> objects.
+	 * Simple factory for <code>File</code> objects but with home resolving.
 	 */
-	private static File file(String fileName) {
+	public static File file(String fileName) {
+		fileName = StringUtil.replace(fileName, "~", SystemUtil.userHome());
 		return new File(fileName);
 	}
 

File: jodd-core/src/test/java/jodd/datetime/FormatterTest.java
Patch:
@@ -43,13 +43,13 @@ class FormatterTest {
 	Locale originalLocale;
 
 	@BeforeEach
-	public void setUp() throws Exception {
+	void setUp() throws Exception {
 		originalLocale = Locale.getDefault();
 		Locale.setDefault(Locale.ENGLISH);
 	}
 
 	@AfterEach
-	public void tearDown() throws Exception {
+	void tearDown() throws Exception {
 		Locale.setDefault(originalLocale);
 	}
 

File: jodd-core/src/test/java/jodd/io/FindFileTest.java
Patch:
@@ -45,7 +45,7 @@ class FindFileTest {
 	protected String dataRoot;
 
 	@BeforeEach
-	public void setUp() throws Exception {
+	void setUp() throws Exception {
 		if (dataRoot != null) {
 			return;
 		}

File: jodd-core/src/test/java/jodd/io/ZipUtilTest.java
Patch:
@@ -46,7 +46,7 @@ class ZipUtilTest {
 	protected String dataRoot;
 
 	@BeforeEach
-	public void setUp() throws Exception {
+	void setUp() throws Exception {
 		if (dataRoot != null) {
 			return;
 		}

File: jodd-core/src/test/java/jodd/io/watch/DirWatcherTest.java
Patch:
@@ -43,7 +43,7 @@ class DirWatcherTest {
 	protected String dataRoot;
 
 	@BeforeEach
-	public void setUp() throws Exception {
+	void setUp() throws Exception {
 		if (dataRoot != null) {
 			return;
 		}

File: jodd-core/src/test/java/jodd/util/BinarySearchTest.java
Patch:
@@ -40,7 +40,7 @@ class BinarySearchTest {
 	protected BinarySearch<String> listBinarySearch;
 
 	@BeforeEach
-	public void setUp() throws Exception {
+	void setUp() throws Exception {
 		list = new ArrayList<>();
 		list.add("aaa");    // 0
 		list.add("bbb");

File: jodd-db/src/test/java/jodd/db/DbJtxTransactionManagerTest.java
Patch:
@@ -40,8 +40,9 @@
 
 class DbJtxTransactionManagerTest extends DbHsqldbTestCase {
 
+	@Override
 	@AfterEach
-	public void tearDown() {
+	protected void tearDown() {
 		DbManager.resetAll();
 	}
 

File: jodd-db/src/test/java/jodd/db/oom/DbEnumTest.java
Patch:
@@ -25,10 +25,10 @@
 
 package jodd.db.oom;
 
-import jodd.db.fixtures.DbHsqldbTestCase;
 import jodd.db.DbQuery;
 import jodd.db.DbSession;
 import jodd.db.DbThreadSession;
+import jodd.db.fixtures.DbHsqldbTestCase;
 import jodd.db.oom.fixtures.Enumerator;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -37,8 +37,9 @@
 
 class DbEnumTest extends DbHsqldbTestCase {
 
+	@Override
 	@BeforeEach
-	public void setUp() throws Exception {
+	protected void setUp() throws Exception {
 		super.setUp();
 
 		DbOomManager.resetAll();

File: jodd-db/src/test/java/jodd/db/oom/DbHint2Test.java
Patch:
@@ -45,7 +45,7 @@ class DbHint2Test extends DbHsqldbTestCase {
 
 	@AfterEach
 	@Override
-	public void tearDown() throws Exception {
+	protected void tearDown() throws Exception {
 		DbSession session = new DbSession(cp);
 
 		executeUpdate(session, "drop table GIRL if exists");
@@ -98,7 +98,7 @@ protected void initDb(DbSession session) {
 
 	@Override
 	@BeforeEach
-	public void setUp() throws Exception {
+	protected void setUp() throws Exception {
 		super.setUp();
 
 		DbOomManager.resetAll();

File: jodd-db/src/test/java/jodd/db/oom/DbSqlTemplateWithPrefixTest.java
Patch:
@@ -25,11 +25,11 @@
 
 package jodd.db.oom;
 
-import jodd.db.oom.sqlgen.DbSqlBuilder;
 import jodd.db.oom.fixtures.BadBoy;
 import jodd.db.oom.fixtures.BadGirl;
 import jodd.db.oom.fixtures.Boy;
 import jodd.db.oom.fixtures.Girl;
+import jodd.db.oom.sqlgen.DbSqlBuilder;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
@@ -39,7 +39,7 @@
 class DbSqlTemplateWithPrefixTest {
 
 	@BeforeEach
-	public void setUp() throws Exception {
+	void setUp() throws Exception {
 
 		DbOomManager.resetAll();
 		DbOomManager dbOom = DbOomManager.getInstance();

File: jodd-db/src/test/java/jodd/db/oom/dao/GenericDaoTest.java
Patch:
@@ -25,9 +25,9 @@
 
 package jodd.db.oom.dao;
 
-import jodd.db.fixtures.DbHsqldbTestCase;
 import jodd.db.DbSession;
 import jodd.db.ThreadDbSessionHolder;
+import jodd.db.fixtures.DbHsqldbTestCase;
 import jodd.db.oom.DbOomManager;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -41,8 +41,9 @@
 
 class GenericDaoTest extends DbHsqldbTestCase {
 
+	@Override
 	@BeforeEach
-	public void setUp() throws Exception {
+	protected void setUp() throws Exception {
 		super.setUp();
 
 		DbOomManager.resetAll();

File: jodd-db/src/test/java/jodd/db/oom/sqlgen/DbEntitySqlTest.java
Patch:
@@ -41,7 +41,7 @@
 class DbEntitySqlTest {
 
 	@BeforeEach
-	public void setUp() throws Exception {
+	void setUp() throws Exception {
 
 		DbOomManager.resetAll();
 		DbOomManager dbOom = DbOomManager.getInstance();

File: jodd-decora/src/test/java/jodd/decora/parser/DecoraParserTest.java
Patch:
@@ -46,7 +46,7 @@ class DecoraParserTest {
 	protected String testDataRoot;
 
 	@BeforeEach
-	public void setUp() throws Exception {
+	void setUp() throws Exception {
 		if (testDataRoot != null) {
 			return;
 		}

File: jodd-decora/src/test/java/jodd/decora/parser/DecoratorTagVisitorTest.java
Patch:
@@ -36,12 +36,12 @@ class DecoratorTagVisitorTest {
 	private DecoratorTagVisitor decoraTagVisitor;
 
 	@BeforeEach
-	public void setUp() {
+	void setUp() {
 		decoraTagVisitor = new DecoratorTagVisitor();
 	}
 
 	@Test
-	public final void testCheckNestedDecoraTagsDecoraTagNameNotNull() throws Exception {
+	void testCheckNestedDecoraTagsDecoraTagNameNotNull() throws Exception {
 		// setup
 		decoraTagVisitor.decoraTagName = "TEST";
 
@@ -53,7 +53,7 @@ public final void testCheckNestedDecoraTagsDecoraTagNameNotNull() throws Excepti
 	}
 
 	@Test
-	public final void testCheckNestedDecoraTagsDecoraTagNameNull() throws Exception {
+	void testCheckNestedDecoraTagsDecoraTagNameNull() throws Exception {
 		// setup
 		decoraTagVisitor.decoraTagName = null;
 

File: jodd-joy/src/test/java/jodd/joy/db/DbHsqldbTestCase.java
Patch:
@@ -38,7 +38,7 @@ public abstract class DbHsqldbTestCase {
 	protected CoreConnectionPool cp;
 
 	@BeforeEach
-	public void setUp() throws Exception {
+	void setUp() throws Exception {
 		cp = new CoreConnectionPool();
 		cp.setDriver("org.hsqldb.jdbcDriver");
 		cp.setUrl("jdbc:hsqldb:mem:test");
@@ -76,7 +76,7 @@ public void setUp() throws Exception {
 	}
 
 	@AfterEach
-	public void tearDown() throws Exception {
+	void tearDown() throws Exception {
 		dbtxm.close();
 //		cp.close();
 		dbtxm = null;

File: jodd-joy/src/testInt/java/jodd/joy/JoySuiteTest.java
Patch:
@@ -37,7 +37,7 @@ class JoySuiteTest {
 	 * Starts Tomcat after the suite.
 	 */
 	@BeforeAll
-	public static void beforeClass() {
+	static void beforeClass() {
 		isSuite = true;
 		startTomcat();
 	}
@@ -46,7 +46,7 @@ public static void beforeClass() {
 	 * Stop Tomcat after the suite.
 	 */
 	@AfterAll
-	public static void afterSuite() {
+	static void afterSuite() {
 		isSuite = false;
 		stopTomcat();
 	}

File: jodd-json/src/test/java/jodd/json/CustomAnnotationTest.java
Patch:
@@ -36,12 +36,12 @@
 class CustomAnnotationTest {
 
 	@BeforeEach
-	public void setUp() {
+	void setUp() {
 		JoddJson.defaults().setJsonAnnotation(JSON2.class);
 	}
 
 	@AfterEach
-	public void tearDown() {
+	void tearDown() {
 		JoddJson.defaults().setJsonAnnotation(JSON.class);
 	}
 

File: jodd-json/src/test/java/jodd/json/JSONDeserializerTest.java
Patch:
@@ -69,12 +69,12 @@ class JSONDeserializerTest {
 	private DataCreator creator;
 
 	@BeforeEach
-	public void setUp() {
+	void setUp() {
 		creator = new DataCreator();
 	}
 
 	@AfterEach
-	public void tearDown() {
+	void tearDown() {
 		JoddJson.defaults().setClassMetadataName(null);
 	}
 

File: jodd-json/src/test/java/jodd/json/JSONSerializationTest.java
Patch:
@@ -68,7 +68,7 @@ class JSONSerializationTest {
 
 	@BeforeEach
 	@SuppressWarnings({"unchecked"})
-	public void setUp() {
+	void setUp() {
 		DataCreator dataCreator = new DataCreator();
 		pedroZip = new Zipcode("848485");
 		Person pedro = dataCreator.createPedro();
@@ -87,7 +87,7 @@ public void setUp() {
 	}
 
 	@AfterEach
-	public void tearDown() {
+	void tearDown() {
 		JoddJson.defaults().setClassMetadataName(null);
 	}
 

File: jodd-json/src/test/java/jodd/json/JsonArrayTest.java
Patch:
@@ -54,7 +54,7 @@ class JsonArrayTest {
 	private JsonArray jsonArray;
 
 	@BeforeEach
-	public void setUp() {
+	void setUp() {
 		jsonArray = new JsonArray();
 	}
 

File: jodd-json/src/test/java/jodd/json/JsonParserTest.java
Patch:
@@ -60,7 +60,7 @@ class JsonParserTest {
 	protected String dataRoot;
 
 	@BeforeEach
-	public void setUp() throws Exception {
+	void setUp() throws Exception {
 		if (dataRoot != null) {
 			return;
 		}
@@ -71,7 +71,7 @@ public void setUp() throws Exception {
 	}
 
 	@AfterEach
-	public void tearDown() {
+	void tearDown() {
 		JoddJson.defaults().setClassMetadataName(null);
 	}
 

File: jodd-lagarto/src/test/java/jodd/jerry/JavascriptTest.java
Patch:
@@ -39,7 +39,7 @@ class JavascriptTest {
 	private ScriptEngine scriptEngine;
 
 	@BeforeEach
-	public void setUp() throws ScriptException {
+	void setUp() throws ScriptException {
 		ScriptEngineManager factory = new ScriptEngineManager();
 
 		scriptEngine = factory.getEngineByName("javascript");

File: jodd-lagarto/src/test/java/jodd/jerry/JerryTest.java
Patch:
@@ -45,7 +45,7 @@ class JerryTest {
 	protected String testDataRoot;
 
 	@BeforeEach
-	public void setUp() throws Exception {
+	void setUp() throws Exception {
 		if (testDataRoot != null) {
 			return;
 		}

File: jodd-lagarto/src/test/java/jodd/lagarto/SpringApiTest.java
Patch:
@@ -34,14 +34,14 @@
 import java.io.IOException;
 import java.net.URL;
 
-import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 class SpringApiTest {
 
 	protected String testDataRoot;
 
 	@BeforeEach
-	public void setUp() throws Exception {
+	void setUp() throws Exception {
 		if (testDataRoot != null) {
 			return;
 		}

File: jodd-lagarto/src/test/java/jodd/lagarto/StuckTest.java
Patch:
@@ -46,7 +46,7 @@ class StuckTest {
 	protected String testDataRoot;
 
 	@BeforeEach
-	public void setUp() throws Exception {
+	void setUp() throws Exception {
 		if (testDataRoot != null) {
 			return;
 		}

File: jodd-lagarto/src/test/java/jodd/lagarto/TagAdapterTest.java
Patch:
@@ -41,7 +41,7 @@ class TagAdapterTest {
 	protected String testAdapterRoot;
 
 	@BeforeEach
-	public void setUp() throws Exception {
+	void setUp() throws Exception {
 		if (testAdapterRoot != null) {
 			return;
 		}

File: jodd-lagarto/src/test/java/jodd/lagarto/dom/DomXmlTest.java
Patch:
@@ -42,7 +42,7 @@ class DomXmlTest {
 	protected String testDataRoot;
 
 	@BeforeEach
-	public void setUp() throws Exception {
+	void setUp() throws Exception {
 		if (testDataRoot != null) {
 			return;
 		}

File: jodd-lagarto/src/test/java/jodd/lagarto/dom/MalformedTest.java
Patch:
@@ -44,7 +44,7 @@ class MalformedTest {
 	protected String testDataRoot;
 
 	@BeforeEach
-	public void setUp() throws Exception {
+	void setUp() throws Exception {
 		if (testDataRoot != null) {
 			return;
 		}

File: jodd-lagarto/src/testInt/java/jodd/lagarto/form/LagartoFormSuiteTest.java
Patch:
@@ -36,7 +36,7 @@ class LagartoFormSuiteTest {
 	 * Starts Tomcat after the suite.
 	 */
 	@BeforeAll
-	public static void beforeClass() {
+	static void beforeClass() {
 		isSuite = true;
 		startTomcat();
 	}
@@ -45,7 +45,7 @@ public static void beforeClass() {
 	 * Stop Tomcat after the suite.
 	 */
 	@AfterAll
-	public static void afterSuite() {
+	static void afterSuite() {
 		isSuite = false;
 		stopTomcat();
 	}

File: jodd-log/src/test/java/jodd/log/impl/JCLLoggerTest.java
Patch:
@@ -40,7 +40,7 @@ class JCLLoggerTest extends LoggerTestBase {
 	private Log log;
 
 	@BeforeEach
-	public void setUp() throws Exception {
+	void setUp() throws Exception {
 		log = mock(Log.class);
 		logger = new JCLLogger(log);
 	}

File: jodd-log/src/test/java/jodd/log/impl/JDKLoggerTest.java
Patch:
@@ -39,7 +39,7 @@ class JDKLoggerTest extends LoggerTestBase {
 	private java.util.logging.Logger log;
 
 	@BeforeEach
-	public void setUp() throws Exception {
+	void setUp() throws Exception {
 		log = mock(java.util.logging.Logger.class);
 		logger = new JDKLogger(log);
 	}

File: jodd-log/src/test/java/jodd/log/impl/NOPLoggerTest.java
Patch:
@@ -39,7 +39,7 @@ class NOPLoggerTest extends LoggerTestBase {
 	private String name = "NOPLogger";
 
 	@BeforeEach
-	public void setUp() throws Exception {
+	void setUp() throws Exception {
 		logger = new NOPLogger(name);
 	}
 

File: jodd-log/src/test/java/jodd/log/impl/SimpleLoggerTest.java
Patch:
@@ -48,7 +48,7 @@ class SimpleLoggerTest extends LoggerTestBase {
 	private String output;
 
 	@BeforeEach
-	public void setUp() throws Exception {
+	void setUp() throws Exception {
 		initializeLogFactoryAndLogger(Logger.Level.DEBUG);
 	}
 

File: jodd-log/src/test/java/jodd/log/impl/Slf4jLoggerTest.java
Patch:
@@ -40,7 +40,7 @@ class Slf4jLoggerTest extends LoggerTestBase {
 	private org.slf4j.Logger log;
 
 	@BeforeEach
-	public void setUp() throws Exception {
+	void setUp() throws Exception {
 		log = mock(org.slf4j.Logger.class);
 		logger = new Slf4jLogger(log);
 	}

File: jodd-madvoc/src/testInt/java/jodd/madvoc/MadvocSuiteTest.java
Patch:
@@ -36,7 +36,7 @@ class MadvocSuiteTest {
 	 * Starts Tomcat after the suite.
 	 */
 	@BeforeAll
-	public static void beforeClass() {
+	static void beforeClass() {
 		isSuite = true;
 		startTomcat();
 	}
@@ -45,7 +45,7 @@ public static void beforeClass() {
 	 * Stop Tomcat after the suite.
 	 */
 	@AfterAll
-	public static void afterSuite() {
+	static void afterSuite() {
 		isSuite = false;
 		stopTomcat();
 	}

File: jodd-madvoc/src/testInt/java/jodd/madvoc/MoveTestBase.java
Patch:
@@ -37,17 +37,17 @@
 public abstract class MoveTestBase {
 
 	@BeforeAll
-	public static void beforeClass() {
+	static void beforeClass() {
 		MadvocSuiteTest.startTomcat();
 	}
 
 	@AfterAll
-	public static void afterClass() {
+	static void afterClass() {
 		MadvocSuiteTest.stopTomcat();
 	}
 
 	@Test
-	public void testMoveWithFiles() {
+	void testMoveWithFiles() {
 		HttpResponse response;
 		response = HttpRequest
 				.post("localhost:8173/mv/upload.html")

File: jodd-mail/src/test/java/jodd/mail/EMLParserTest.java
Patch:
@@ -48,7 +48,7 @@ class EMLParserTest {
 	protected String testDataRoot;
 
 	@BeforeEach
-	public void setUp() throws Exception {
+	void setUp() throws Exception {
 		if (testDataRoot != null) {
 			return;
 		}

File: jodd-mail/src/test/java/jodd/mail/EmailUtilTest.java
Patch:
@@ -38,7 +38,7 @@ class EmailUtilTest {
 	protected String testDataRoot;
 
 	@BeforeEach
-	public void setUp() throws Exception {
+	void setUp() throws Exception {
 		if (testDataRoot != null) {
 			return;
 		}

File: jodd-petite/src/test/java/jodd/petite/InjectionPointFactoryTest.java
Patch:
@@ -34,7 +34,7 @@
 class InjectionPointFactoryTest {
 
 	@BeforeEach
-	public void setUp() throws Exception {
+	void setUp() throws Exception {
 		ipf = new InjectionPointFactory(new PetiteConfig());
 	}
 

File: jodd-proxetta/src/test/java/jodd/proxetta/petite/WireBeansWithProxettaTest.java
Patch:
@@ -43,7 +43,7 @@ class WireBeansWithProxettaTest {
     private PetiteContainer petiteContainer;
 
     @BeforeEach
-    public void setupPetiteContainer() {
+    void setupPetiteContainer() {
         PetiteConfig petiteConfig = PetiteHelper.createPetiteConfig();
 
         ProxyProxetta proxyProxetta = PetiteHelper.createProxyProxetta();

File: jodd-servlet/src/test/java/jodd/servlet/JspResolverTest.java
Patch:
@@ -50,7 +50,7 @@ static class Foo {
 
 
 	@BeforeEach
-	public void setUp() throws Exception {
+	void setUp() throws Exception {
 
 		servletRequest = mock(HttpServletRequest.class);
 		httpSession = mock(HttpSession.class);

File: jodd-vtor/src/test/java/jodd/vtor/VtorMatchProfilesTest.java
Patch:
@@ -35,7 +35,7 @@ class VtorMatchProfilesTest {
     private Vtor vtor;
 
     @BeforeEach
-    public void setup() {
+    void setup() {
         vtor = new Vtor();
     }
 

File: jodd-vtor/src/test/java/jodd/vtor/VtorMatchProfilesWithResetedProfilesTest.java
Patch:
@@ -35,7 +35,7 @@ class VtorMatchProfilesWithResetedProfilesTest {
     private Vtor vtor;
 
     @BeforeEach
-    public void setup() {
+    void setup() {
         //given
         vtor = new Vtor();
         vtor.resetProfiles();

File: jodd-core/src/main/java/jodd/util/CharUtil.java
Patch:
@@ -154,7 +154,7 @@ public static char[] toRawCharArray(byte[] barr) {
 	 * Converts char array to byte array using default Jodd encoding.
 	 */
 	public static byte[] toByteArray(char[] carr) throws UnsupportedEncodingException {
-		return new String(carr).getBytes(JoddCore.encoding);
+		return new String(carr).getBytes(JoddCore.defaults().getEncoding());
 	}
 
 	/**
@@ -168,7 +168,7 @@ public static byte[] toByteArray(char[] carr, String charset) throws Unsupported
 	 * Converts byte array of default Jodd encoding to char array.
 	 */
 	public static char[] toCharArray(byte[] barr) throws UnsupportedEncodingException {
-		return new String(barr, JoddCore.encoding).toCharArray();
+		return new String(barr, JoddCore.defaults().getEncoding()).toCharArray();
 	}
 
 	/**

File: jodd-core/src/main/java/jodd/util/ClassLoaderUtil.java
Patch:
@@ -584,15 +584,15 @@ public static InputStream getClassAsStream(String className, ClassLoader classLo
 	 * @see jodd.util.cl.DefaultClassLoaderStrategy
 	 */
 	public static Class loadClass(String className) throws ClassNotFoundException {
-		return JoddCore.classLoaderStrategy.loadClass(className, null);
+		return JoddCore.defaults().getClassLoaderStrategy().loadClass(className, null);
 	}
 	
 	/**
 	 * Loads a class using default class loader strategy.
 	 * @see jodd.util.cl.DefaultClassLoaderStrategy
 	 */
 	public static Class loadClass(String className, ClassLoader classLoader) throws ClassNotFoundException {
-		return JoddCore.classLoaderStrategy.loadClass(className, classLoader);
+		return JoddCore.defaults().getClassLoaderStrategy().loadClass(className, classLoader);
 	}
 
 	// ---------------------------------------------------------------- misc

File: jodd-core/src/main/java/jodd/util/URLDecoder.java
Patch:
@@ -39,7 +39,7 @@ public class URLDecoder {
 	 * Decodes URL elements.
 	 */
 	public static String decode(String url) {
-		return decode(url, JoddCore.encoding, false);
+		return decode(url, JoddCore.defaults().getEncoding(), false);
 	}
 
 	/**
@@ -56,7 +56,7 @@ public static String decode(String source, String encoding) {
 	 * Decodes query name or value.
 	 */
 	public static String decodeQuery(String source) {
-		return decode(source, JoddCore.encoding, true);
+		return decode(source, JoddCore.defaults().getEncoding(), true);
 	}
 
 	/**

File: jodd-core/src/test/java/jodd/io/StreamUtilTest.java
Patch:
@@ -601,7 +601,7 @@ void testCopy_Inputstream_Outputstream_ByteCount(String expected, String text, i
 
         Stream<Arguments> testdata_testCopy_Inputstream_Outputstream_ByteCount() throws Exception {
             return Stream.of(
-                    Arguments.of("The Unbearable Lightness of Java", "The Unbearable Lightness of Java", JoddCore.ioBufferSize + 250),
+                    Arguments.of("The Unbearable Lightness of Java", "The Unbearable Lightness of Java", JoddCore.defaults().getIoBufferSize() + 250),
                     Arguments.of("j", "jodd" , 1),
                     Arguments.of("jodd makes fun!", "jodd makes fun!",  15),
                     Arguments.of("", "text does not matter",  0)

File: jodd-core/src/test/java/jodd/util/ClassLoaderUtilTest.java
Patch:
@@ -127,7 +127,7 @@ void testLoadClass() throws Exception {
 
 		// special case
 
-		DefaultClassLoaderStrategy defaultClassLoaderStrategy = (DefaultClassLoaderStrategy) JoddCore.classLoaderStrategy;
+		DefaultClassLoaderStrategy defaultClassLoaderStrategy = (DefaultClassLoaderStrategy) JoddCore.defaults().getClassLoaderStrategy();
 
 		defaultClassLoaderStrategy.setLoadArrayClassByComponentTypes(true);
 

File: jodd-mail/src/main/java/jodd/mail/EmailAddress.java
Patch:
@@ -119,7 +119,7 @@ public String getPersonalName() {
 	 */
 	public InternetAddress toInternetAddress() throws AddressException {
 		try {
-			return new InternetAddress(email, personalName, JoddCore.encoding);
+			return new InternetAddress(email, personalName, JoddCore.defaults().getEncoding());
 		} catch (UnsupportedEncodingException ueex) {
 			throw new AddressException(ueex.toString());
 		}

File: jodd-mail/src/main/java/jodd/mail/EmailMessage.java
Patch:
@@ -51,7 +51,7 @@ public EmailMessage(String content, String mimeType, String encoding) {
 	public EmailMessage(String content, String mimeType) {
 		this.content = content;
 		this.mimeType = mimeType;
-		this.encoding = JoddCore.encoding;
+		this.encoding = JoddCore.defaults().getEncoding();
 	}
 
 	// ---------------------------------------------------------------- getters

File: jodd-props/src/main/java/jodd/props/PropsUtil.java
Patch:
@@ -48,7 +48,7 @@ public static void loadFromClasspath(final Props p, final String... patterns) {
 		final ClassScanner scanner = new ClassScanner() {
 			@Override
 			protected void onEntry(EntryData entryData) throws IOException {
-				String encoding = JoddCore.encoding;
+				String encoding = JoddCore.defaults().getEncoding();
 				if (StringUtil.endsWithIgnoreCase(entryData.getName(), ".properties")) {
 					encoding = StringPool.ISO_8859_1;
 				}

File: jodd-servlet/src/main/java/jodd/servlet/upload/MultipartRequest.java
Patch:
@@ -113,7 +113,7 @@ public MultipartRequest(HttpServletRequest request, FileUploadFactory fileUpload
 			this.characterEncoding = request.getCharacterEncoding();
 		}
 		if (this.characterEncoding == null) {
-			this.characterEncoding = JoddCore.encoding;
+			this.characterEncoding = JoddCore.defaults().getEncoding();
 		}
 	}
 

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/TargetMethodData.java
Patch:
@@ -25,7 +25,7 @@
 
 package jodd.proxetta.asm;
 
-import static jodd.proxetta.JoddProxetta.methodDivider;
+import jodd.proxetta.JoddProxetta;
 
 import java.util.List;
 
@@ -62,7 +62,7 @@ ProxyAspectData getProxyData() {
 	// ---------------------------------------------------------------- method names
 
 	private String methodName(int index) {
-		return methodName + methodDivider + proxyData[index].aspectIndex;
+		return methodName + JoddProxetta.defaults().getMethodDivider() + proxyData[index].aspectIndex;
 	}
 
 	/**

File: jodd-proxetta/src/main/java/jodd/proxetta/impl/InvokeProxetta.java
Patch:
@@ -25,8 +25,8 @@
 
 package jodd.proxetta.impl;
 
-import jodd.proxetta.JoddProxetta;
 import jodd.proxetta.InvokeAspect;
+import jodd.proxetta.JoddProxetta;
 import jodd.proxetta.Proxetta;
 
 /**
@@ -38,7 +38,7 @@ public class InvokeProxetta extends Proxetta<InvokeProxetta> {
 
 	public InvokeProxetta(InvokeAspect... aspects) {
 		this.invokeAspects = aspects;
-		classNameSuffix = JoddProxetta.invokeProxyClassNameSuffix;
+		classNameSuffix = JoddProxetta.defaults().getInvokeProxyClassNameSuffix();
 	}
 
 	/**

File: jodd-proxetta/src/main/java/jodd/proxetta/impl/ProxyProxetta.java
Patch:
@@ -38,7 +38,7 @@ public class ProxyProxetta extends Proxetta<ProxyProxetta> {
 
 	public ProxyProxetta(ProxyAspect... aspects) {
 		this.aspects = aspects;
-		classNameSuffix = JoddProxetta.proxyClassNameSuffix;
+		classNameSuffix = JoddProxetta.defaults().getProxyClassNameSuffix();
 	}
 
 	/**

File: jodd-proxetta/src/main/java/jodd/proxetta/impl/WrapperProxetta.java
Patch:
@@ -38,7 +38,7 @@ public class WrapperProxetta extends Proxetta<WrapperProxetta> {
 
 	public WrapperProxetta(ProxyAspect... aspects) {
 		this.aspects = aspects;
-		classNameSuffix = JoddProxetta.wrapperClassNameSuffix;
+		classNameSuffix = JoddProxetta.defaults().getWrapperClassNameSuffix();
 	}
 
 	public static WrapperProxetta withAspects(ProxyAspect... aspects) {

File: jodd-proxetta/src/main/java/jodd/proxetta/impl/WrapperProxettaBuilder.java
Patch:
@@ -25,14 +25,14 @@
 
 package jodd.proxetta.impl;
 
+import jodd.asm5.ClassReader;
 import jodd.proxetta.JoddProxetta;
 import jodd.proxetta.ProxettaBuilder;
 import jodd.proxetta.ProxettaException;
 import jodd.proxetta.ProxettaUtil;
 import jodd.proxetta.asm.ProxettaWrapperClassBuilder;
 import jodd.proxetta.asm.TargetClassInfoReader;
 import jodd.proxetta.asm.WorkData;
-import jodd.asm5.ClassReader;
 
 /**
  * Creates wrapper using ASM library.
@@ -48,7 +48,7 @@ public WrapperProxettaBuilder(WrapperProxetta wrapperProxetta) {
 
 	protected Class targetClassOrInterface;
 	protected Class targetInterface;
-	protected String targetFieldName = JoddProxetta.wrapperTargetFieldName;
+	protected String targetFieldName = JoddProxetta.defaults().getWrapperTargetFieldName();
 
 	/**
 	 * Defines class or interface to wrap.

File: jodd-json/src/main/java/jodd/json/TypeJsonVisitor.java
Patch:
@@ -55,7 +55,7 @@ public TypeJsonVisitor(JsonContext jsonContext, Class type) {
 
 		this.type = type;
 
-		typeData = JoddJson.annotationManager.lookupTypeData(type);
+		typeData = JoddJson.defaults().getAnnotationManager().lookupTypeData(type);
 	}
 
 	/**

File: jodd-json/src/test/java/jodd/json/CustomAnnotationTest.java
Patch:
@@ -37,12 +37,12 @@ class CustomAnnotationTest {
 
 	@BeforeEach
 	public void setUp() {
-		JoddJson.jsonAnnotation = JSON2.class;
+		JoddJson.defaults().setJsonAnnotation(JSON2.class);
 	}
 
 	@AfterEach
 	public void tearDown() {
-		JoddJson.jsonAnnotation = JSON.class;
+		JoddJson.defaults().setJsonAnnotation(JSON.class);
 	}
 
 	@Test

File: jodd-json/src/test/java/jodd/json/JsonParserTest.java
Patch:
@@ -72,7 +72,7 @@ public void setUp() throws Exception {
 
 	@AfterEach
 	public void tearDown() {
-		JoddJson.classMetadataName = null;
+		JoddJson.defaults().setClassMetadataName(null);
 	}
 
 	@Test
@@ -552,7 +552,7 @@ public void setBongos(Bar[] bongos) {
 
 	@Test
 	void testComplexObject() throws IOException {
-		JoddJson.classMetadataName = "class";
+		JoddJson.defaults().setClassMetadataName("class");
 
 		JsonParser jsonParser = new JsonParser();
 		String json = FileUtil.readString(new File(dataRoot, "complex.json"));

File: jodd-core/src/main/java/jodd/Jodd.java
Patch:
@@ -31,7 +31,7 @@
  * In some environments such OSGI, however, classloader lookup does not work.
  * Then you need to manually initialize all Jodd components that are in use.
  * <p>
- * Each module must have the following code blocK at the bottom of the class:
+ * Each module must have the following code blocK at the <b>bottom</b> of the class:
  * <pre>{@code
  * static {
  *     Jodd.initModule();

File: jodd-http/src/main/java/jodd/http/HttpBrowser.java
Patch:
@@ -47,7 +47,7 @@ public class HttpBrowser {
 	protected boolean catchTransportExceptions = true;
 
 	public HttpBrowser() {
-		httpConnectionProvider = JoddHttp.httpConnectionProvider;
+		httpConnectionProvider = JoddHttp.defaults().getHttpConnectionProvider();
 	}
 
 	/**

File: jodd-core/src/main/java/jodd/io/FileUtil.java
Patch:
@@ -1382,7 +1382,7 @@ public static boolean isSymlink(final File file) {
 			return false;
 		}
 
-		return Files.isSymbolicLink(file.toPath());
+		return java.nio.file.Files.isSymbolicLink(file.toPath());
 	}
 
 	// ---------------------------------------------------------------- digests

File: jodd-core/src/main/java/jodd/io/NetUtil.java
Patch:
@@ -99,7 +99,7 @@ public static boolean isSocketAccessAllowed(int localIp, int socketIp, int mask)
 	}
 
 	/**
-	 * checks given string against ip address v4 format
+	 * Checks given string against IP address v4 format.
 	 *
 	 * @param input an ip address - may be null
 	 * @return <tt>true</tt> if param has a valid ip v4 format <tt>false</tt> otherwise

File: jodd-core/src/test/java/jodd/io/NetUtilTest.java
Patch:
@@ -43,7 +43,7 @@
 import static org.junit.jupiter.api.Assumptions.assumeTrue;
 
 /**
- * test class for {@link NetUtil}
+ * Test class for {@link NetUtil}.
  */
 class NetUtilTest {
 

File: jodd-core/src/test/java/jodd/util/MultiComparatorTest.java
Patch:
@@ -32,10 +32,11 @@
 import java.util.List;
 import java.util.stream.Stream;
 
-import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 
 /**
- * tests for {@link MultiComparator}
+ * Tests for {@link MultiComparator}.
  */
 class MultiComparatorTest {
 

File: jodd-core/src/main/java/jodd/io/NetUtil.java
Patch:
@@ -102,8 +102,7 @@ public static boolean isSocketAccessAllowed(int localIp, int socketIp, int mask)
 	 * checks given string against ip address v4 format
 	 *
 	 * @param input an ip address - may be null
-	 * @return <tt>true</tt> if param has a valid ip v4 format <br/><tt>false</tt> otherwise
-	 *
+	 * @return <tt>true</tt> if param has a valid ip v4 format <tt>false</tt> otherwise
 	 * @see <a href="https://en.wikipedia.org/wiki/IP_address#IPv4_addresses">ip address v4</a>
 	 */
 	public static boolean validateAgaintIPAdressV4Format(String input) {

File: jodd-core/src/main/java/jodd/util/ObjectUtil.java
Patch:
@@ -58,7 +58,7 @@ public static <T> T clone(T source) throws CloneNotSupportedException {
 		try {
 			Method cloneMethod = source.getClass().getDeclaredMethod("clone");
 			cloneMethod.setAccessible(true);
-			return (T) cloneMethod.invoke(null);
+			return (T) cloneMethod.invoke(source);
 		} catch (Exception ex) {
 			throw new CloneNotSupportedException("Can't clone() the object: " + ex.getMessage());
 		}

File: jodd-core/src/main/java/jodd/util/ObjectUtil.java
Patch:
@@ -58,7 +58,7 @@ public static <T> T clone(T source) throws CloneNotSupportedException {
 		try {
 			Method cloneMethod = source.getClass().getDeclaredMethod("clone");
 			cloneMethod.setAccessible(true);
-			return (T) cloneMethod.invoke(null);
+			return (T) cloneMethod.invoke(source);
 		} catch (Exception ex) {
 			throw new CloneNotSupportedException("Can't clone() the object: " + ex.getMessage());
 		}

File: jodd-log/src/main/java/jodd/log/impl/SimpleLogger.java
Patch:
@@ -52,7 +52,7 @@ public String getName() {
 
 	@Override
 	public boolean isEnabled(Level level) {
-		return level.isEnabledFor(level);
+		return level.isEnabledFor(this.level);
 	}
 
 	@Override

File: jodd-log/src/main/java/jodd/log/impl/SimpleLogger.java
Patch:
@@ -52,7 +52,7 @@ public String getName() {
 
 	@Override
 	public boolean isEnabled(Level level) {
-		return level.isEnabledFor(level);
+		return level.isEnabledFor(this.level);
 	}
 
 	@Override

File: jodd-props/src/main/java/jodd/props/PropsParser.java
Patch:
@@ -152,6 +152,9 @@ public void parse(final String in) {
 					case '\r':
 					case '\n':
 						// if the EOL is \n or \r\n, escapes both chars
+						if (c == '\n') {
+							ndx--;
+						}
 						state = ParseState.ESCAPE_NEWLINE;
 						break;
 					// encode UTF character

File: jodd-lagarto/src/test/java/jodd/jerry/JerryTest.java
Patch:
@@ -58,7 +58,7 @@ public void testText1() {
 		String html = readFile("text1.html");
 		String text = jerry(html).$("div.demo-container").text();
 
-		text = StringUtil.remove(text, "\r\n").trim();
+		text = StringUtil.remove(text, "\n").trim();
 		text = StringUtil.compressChars(text, ' ');
 		assertEquals("Demonstration Box list item 1 list item 2", text);
 	}

File: jodd-core/src/test/java/jodd/util/StringUtilTest.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.List;
 import java.util.Locale;
 
-import static jodd.util.ArraysUtil.*;
+import static jodd.util.ArraysUtil.array;
 import static jodd.util.StringPool.ISO_8859_1;
 import static jodd.util.StringPool.UTF_8;
 import static org.junit.Assert.*;
@@ -189,6 +189,8 @@ public void testReplace() {
 		assertEquals("11221144", src);
 		src = StringUtil.replaceLast(src, "55", "11");
 		assertEquals("11221144", src);
+
+		assertEquals("qwerty", StringUtil.replace("qwerty", "", "xxxxxxxxxxxxx"));
 	}
 
 

File: jodd-vtor/src/test/java/jodd/vtor/constraint/HasSubstringConstraintTest.java
Patch:
@@ -29,7 +29,7 @@
 
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.when;
 
 public class HasSubstringConstraintTest extends ConstraintTestBase {
 
@@ -54,8 +54,8 @@ public void testConfigure() {
         HasSubstring annotation = mock(HasSubstring.class);
         String substring = "testString";
         boolean ignoreCase = true;
-        stub(annotation.value()).toReturn(substring);
-        stub(annotation.ignoreCase()).toReturn(ignoreCase);
+        when(annotation.value()).thenReturn(substring);
+        when(annotation.ignoreCase()).thenReturn(ignoreCase);
 
         hasSubstringConstraint.configure(annotation);
         assertEquals("substring must be the same as was set to annotation when configure",

File: jodd-vtor/src/test/java/jodd/vtor/constraint/LengthConstraintTest.java
Patch:
@@ -30,7 +30,7 @@
 
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.when;
 
 public class LengthConstraintTest extends ConstraintTestBase {
     @Test
@@ -65,8 +65,8 @@ public void testSetMinMax() {
     public void testConfigure() {
         LengthConstraint lengthConstraint = new LengthConstraint();
         Length annotation = mock(Length.class);
-        stub(annotation.min()).toReturn(5);
-        stub(annotation.max()).toReturn(10);
+        when(annotation.min()).thenReturn(5);
+        when(annotation.max()).thenReturn(10);
 
         lengthConstraint.configure(annotation);
         assertEquals("min value must be the same as was set to annotation when configure", lengthConstraint.getMin(), 5);

File: jodd-vtor/src/test/java/jodd/vtor/constraint/MaxConstraintTest.java
Patch:
@@ -29,7 +29,7 @@
 
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.when;
 
 public class MaxConstraintTest extends ConstraintTestBase {
 
@@ -56,7 +56,7 @@ public void testSetMax() {
     public void testConfigure() {
         MaxConstraint maxConstraint = new MaxConstraint();
         Max annotation = mock(Max.class);
-        stub(annotation.value()).toReturn(0.1);
+        when(annotation.value()).thenReturn(0.1);
 
         maxConstraint.configure(annotation);
         assertEquals("max value must be the same as was set to annotation when configure", maxConstraint.getMax(), 0.1, 0.01);    }

File: jodd-vtor/src/test/java/jodd/vtor/constraint/MaxLengthConstraintTest.java
Patch:
@@ -30,7 +30,7 @@
 
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.when;
 
 public class MaxLengthConstraintTest extends ConstraintTestBase {
 
@@ -59,7 +59,7 @@ public void testConfigure() {
         MaxLengthConstraint maxLengthConstraint = new MaxLengthConstraint();
         MaxLength annotation = mock(MaxLength.class);
         int maxValue = 100;
-        stub(annotation.value()).toReturn(maxValue);
+        when(annotation.value()).thenReturn(maxValue);
 
         maxLengthConstraint.configure(annotation);
         assertEquals("method must return the same value as was set to annotation when configure", maxLengthConstraint.getMax(), maxValue);

File: jodd-vtor/src/test/java/jodd/vtor/constraint/MinConstraintTest.java
Patch:
@@ -29,7 +29,7 @@
 
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.when;
 
 public class MinConstraintTest extends ConstraintTestBase {
     @Test
@@ -55,7 +55,7 @@ public void testSetMin() {
     public void testConfigure() {
         MinConstraint minConstraint = new MinConstraint();
         Min annotation = mock(Min.class);
-        stub(annotation.value()).toReturn(10.0);
+        when(annotation.value()).thenReturn(10.0);
 
         minConstraint.configure(annotation);
         assertEquals("method must return the same value as was set to annotation when configure", minConstraint.getMin(), 10.0, 0.01);

File: jodd-vtor/src/test/java/jodd/vtor/constraint/MinLengthConstraintTest.java
Patch:
@@ -30,7 +30,7 @@
 
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.when;
 
 public class MinLengthConstraintTest extends ConstraintTestBase {
     @Test
@@ -56,7 +56,7 @@ public void testSetMin() {
     public void testConfigure() {
         MinLengthConstraint minLengthConstraint = new MinLengthConstraint();
         MinLength annotation = mock(MinLength.class);
-        stub(annotation.value()).toReturn(10);
+        when(annotation.value()).thenReturn(10);
 
         minLengthConstraint.configure(annotation);
         assertEquals("min value must be the same as was set to annotation when configure", minLengthConstraint.getMin(), 10);

File: jodd-vtor/src/test/java/jodd/vtor/constraint/RangeConstraintTest.java
Patch:
@@ -29,7 +29,7 @@
 
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.when;
 
 public class RangeConstraintTest extends ConstraintTestBase {
 
@@ -61,8 +61,8 @@ public void testSetMinMax() {
     public void testConfigure() {
         RangeConstraint rangeConstraint = new RangeConstraint();
         Range annotation = mock(Range.class);
-        stub(annotation.min()).toReturn(1.1);
-        stub(annotation.max()).toReturn(10.1);
+        when(annotation.min()).thenReturn(1.1);
+        when(annotation.max()).thenReturn(10.1);
 
         rangeConstraint.configure(annotation);
         assertEquals("method must return the same value as was set to annotation when configure", rangeConstraint.getMin(), 1.1, 0.01);

File: jodd-vtor/src/test/java/jodd/vtor/constraint/SizeConstraintTest.java
Patch:
@@ -34,7 +34,7 @@
 
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.when;
 
 public class SizeConstraintTest extends ConstraintTestBase {
 
@@ -65,8 +65,8 @@ public void testSetMinMax() {
     public void testConfigure() {
         SizeConstraint sizeConstraint = new SizeConstraint();
         Size annotation = mock(Size.class);
-        stub(annotation.min()).toReturn(10);
-        stub(annotation.max()).toReturn(20);
+        when(annotation.min()).thenReturn(10);
+        when(annotation.max()).thenReturn(20);
 
         sizeConstraint.configure(annotation);
         assertEquals("method must return the same value as was set to annotation when configure", sizeConstraint.getMin(), 10);

File: jodd-vtor/src/test/java/jodd/vtor/constraint/TimeAfterConstraintTest.java
Patch:
@@ -31,7 +31,7 @@
 
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.when;
 
 public class TimeAfterConstraintTest extends ConstraintTestBase {
 
@@ -61,7 +61,7 @@ public void testConfigure() {
         TimeAfterConstraint timeAfterConstraint = new TimeAfterConstraint();
         JDateTime time = new JDateTime();
         TimeAfter annotation = mock(TimeAfter.class);
-        stub(annotation.value()).toReturn(JDateTimeDefault.formatter.convert(time, JDateTimeDefault.format));
+        when(annotation.value()).thenReturn(JDateTimeDefault.formatter.convert(time, JDateTimeDefault.format));
 
         timeAfterConstraint.configure(annotation);
         assertEquals("method must return the same time as was set to annotation when configure", timeAfterConstraint.getTime(), time);

File: jodd-vtor/src/test/java/jodd/vtor/constraint/TimeBeforeConstraintTest.java
Patch:
@@ -31,7 +31,7 @@
 
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.when;
 
 public class TimeBeforeConstraintTest extends ConstraintTestBase {
 
@@ -62,7 +62,7 @@ public void testConfigure() {
         JDateTime time = new JDateTime();
         timeBeforeConstraint.setTime(time);
         TimeBefore annotation = mock(TimeBefore.class);
-        stub(annotation.value()).toReturn(JDateTimeDefault.formatter.convert(time, JDateTimeDefault.format));
+        when(annotation.value()).thenReturn(JDateTimeDefault.formatter.convert(time, JDateTimeDefault.format));
 
         timeBeforeConstraint.configure(annotation);
         assertEquals("method must return the same time as was set to annotation when configure", timeBeforeConstraint.getTime(), time);

File: jodd-vtor/src/test/java/jodd/vtor/constraint/WildcardMatchConstraintTest.java
Patch:
@@ -29,7 +29,7 @@
 
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.when;
 
 public class WildcardMatchConstraintTest extends ConstraintTestBase {
 
@@ -59,7 +59,7 @@ public void testConfigure() {
         WildcardMatchConstraint wildcardMatchConstraint = new WildcardMatchConstraint();
         WildcardMatch annotation = mock(WildcardMatch.class);
         String pattern = "foo";
-        stub(annotation.value()).toReturn(pattern);
+        when(annotation.value()).thenReturn(pattern);
         wildcardMatchConstraint.configure(annotation);
         assertEquals("method must return the same pattern as was set to annotation when configure", wildcardMatchConstraint.getPattern(), pattern);
     }

File: jodd-vtor/src/test/java/jodd/vtor/constraint/WildcardPathMatchConstraintTest.java
Patch:
@@ -29,7 +29,7 @@
 
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.when;
 
 public class WildcardPathMatchConstraintTest extends ConstraintTestBase {
 
@@ -59,7 +59,7 @@ public void testConfigure() {
         WildcardPathMatchConstraint wildcardPathMatchConstraint = new WildcardPathMatchConstraint();
         WildcardPathMatch annotation = mock(WildcardPathMatch.class);
         String pattern = "foo";
-        stub(annotation.value()).toReturn(pattern);
+        when(annotation.value()).thenReturn(pattern);
 
         wildcardPathMatchConstraint.configure(annotation);
         assertEquals("method must return the same pattern as was set to annotation when configure", wildcardPathMatchConstraint.getPattern(), pattern);

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/AnnotationReader.java
Patch:
@@ -44,6 +44,8 @@
 @SuppressWarnings({"AnonymousClassVariableHidesContainingMethodVariable"})
 public class AnnotationReader extends EmptyAnnotationVisitor implements AnnotationInfo {
 
+	public static final AnnotationInfo[] NO_ANNOTATIONS = new AnnotationInfo[0];
+
 	protected final String desc;
 	protected final String className;
 	protected final boolean visible;

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/TargetClassInfoReader.java
Patch:
@@ -320,16 +320,17 @@ public AnnotationVisitor visitParameterAnnotation(int parameter, String desc, bo
 		@Override
 		public void visitEnd() {
 			if (!methodAnns.isEmpty()) {
+				// method annotations
 				msign.annotations = methodAnns.toArray(new AnnotationInfo[methodAnns.size()]);
 			}
 
-			msign.argumentsAnnotation = new AnnotationInfo[methodParamsAnns.length][];
+			// arguments annotations
 
 			for (int i = 0; i < methodParamsAnns.length; i++) {
 				List<AnnotationInfo> methodParamsAnn = methodParamsAnns[i];
 
 				if (methodParamsAnn != null) {
-					msign.argumentsAnnotation[i] = methodParamsAnn.toArray(new AnnotationInfo[methodParamsAnn.size()]);
+					msign.getArgument(i + 1).annotations = methodParamsAnn.toArray(new AnnotationInfo[methodParamsAnn.size()]);
 				}
 			}
 		}

File: jodd-proxetta/src/test/java/jodd/proxetta/MethodInfoTest.java
Patch:
@@ -81,7 +81,7 @@ public boolean apply(MethodInfo methodInfo) {
 
 		assertTrue(mi.isTopLevelMethod());
 
-		AnnotationInfo[] anns = mi.getArgumentAnnotations(0);
+		AnnotationInfo[] anns = mi.getArgument(1).getAnnotations();
 
 		assertNotNull(anns);
 		assertEquals(1, anns.length);

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaClassBuilder.java
Patch:
@@ -126,7 +126,7 @@ public MethodVisitor visitMethod(int access, String name, String desc, String si
 
 		// destination constructors [A1]
 		if (name.equals(INIT)) {
-			MethodVisitor mv = wd.dest.visitMethod(access, name, desc, msign.getRawSignature(), null);
+			MethodVisitor mv = wd.dest.visitMethod(access, name, desc, msign.getAsmMethodSignature(), null);
 			return new ProxettaCtorBuilder(mv, msign, wd);
 		}
 		// ignore destination static block

File: jodd-http/src/main/java/jodd/http/HttpBrowser.java
Patch:
@@ -221,10 +221,9 @@ protected HttpResponse _sendRequest(HttpRequest httpRequest, HttpResponse previo
 	 * default header will be ignored.
 	 */
 	protected void addDefaultHeaders(HttpRequest httpRequest) {
-		List<Map.Entry<String, HeaderTuple>> entries = defaultHeaders.entries();
-
-		for (Map.Entry<String, HeaderTuple> entry : entries) {
+		for (Map.Entry<String, String> entry : defaultHeaders.entries()) {
 			String name = entry.getKey();
+
 			if (!httpRequest.headers.contains(name)) {
 				httpRequest.headers.add(name, entry.getValue());
 			}

File: jodd-http/src/main/java/jodd/http/HttpBase.java
Patch:
@@ -73,7 +73,7 @@ public abstract class HttpBase<T> {
 
 	protected String httpVersion = HTTP_1_1;
 	protected boolean capitaliseHeaderKeys = JoddHttp.defaultCapitaliseHeaderKeys;
-	protected HttpMultiMap<String> headers = HttpMultiMap.newCaseInsensitveMap();
+	protected HttpMultiMap<String> headers = HttpMultiMap.newCaseInsensitiveMap();
 
 	protected HttpMultiMap<?> form;			// holds form data (when used)
 	protected String body;					// holds raw body string (always)
@@ -399,7 +399,7 @@ public T acceptEncoding(String encodings) {
 	 */
 	protected void initForm() {
 		if (form == null) {
-			form = HttpMultiMap.newCaseInsensitveMap();
+			form = HttpMultiMap.newCaseInsensitiveMap();
 		}
 	}
 
@@ -956,7 +956,7 @@ protected void readBody(BufferedReader reader) {
 		}
 
 		if (mediaType.equals("multipart/form-data")) {
-			form = HttpMultiMap.newCaseInsensitveMap();
+			form = HttpMultiMap.newCaseInsensitiveMap();
 
 			MultipartStreamParser multipartParser = new MultipartStreamParser();
 

File: jodd-http/src/main/java/jodd/http/HttpBrowser.java
Patch:
@@ -40,8 +40,8 @@ public class HttpBrowser {
 	protected HttpConnectionProvider httpConnectionProvider;
 	protected HttpRequest httpRequest;
 	protected HttpResponse httpResponse;
-	protected HttpMultiMap<Cookie> cookies = HttpMultiMap.newCaseInsensitveMap();
-	protected HttpMultiMap<String> defaultHeaders = HttpMultiMap.newCaseInsensitveMap();
+	protected HttpMultiMap<Cookie> cookies = HttpMultiMap.newCaseInsensitiveMap();
+	protected HttpMultiMap<String> defaultHeaders = HttpMultiMap.newCaseInsensitiveMap();
 	protected boolean keepAlive;
 	protected long elapsedTime;
 	protected boolean catchTransportExceptions = true;

File: jodd-http/src/main/java/jodd/http/HttpMultiMap.java
Patch:
@@ -51,13 +51,13 @@ public class HttpMultiMap<V> implements Iterable<Map.Entry<String, V>>  {
 	/**
 	 * Creates new case-insensitive multimap.
 	 */
-	public static <T> HttpMultiMap<T> newCaseInsensitveMap() {
+	public static <T> HttpMultiMap<T> newCaseInsensitiveMap() {
 		return new HttpMultiMap<>(false);
 	}
 	/**
 	 * Creates new case-insensitive map.
 	 */
-	public static <T> HttpMultiMap<T> newCaseSensitveMap() {
+	public static <T> HttpMultiMap<T> newCaseSensitiveMap() {
 		return new HttpMultiMap<>(true);
 	}
 

File: jodd-http/src/main/java/jodd/http/HttpRequest.java
Patch:
@@ -342,7 +342,7 @@ public HttpRequest path(String path) {
 
 			query = HttpUtil.parseQuery(queryString, true);
 		} else {
-			query = HttpMultiMap.newCaseInsensitveMap();
+			query = HttpMultiMap.newCaseInsensitiveMap();
 		}
 
 		this.path = path;

File: jodd-http/src/main/java/jodd/http/HttpUtil.java
Patch:
@@ -87,7 +87,7 @@ public static String buildQuery(HttpMultiMap<?> queryMap, String encoding) {
 	 */
 	public static HttpMultiMap<String> parseQuery(String query, boolean decode) {
 
-		HttpMultiMap<String> queryMap = HttpMultiMap.newCaseInsensitveMap();
+		HttpMultiMap<String> queryMap = HttpMultiMap.newCaseInsensitiveMap();
 
 		int ndx, ndx2 = 0;
 		while (true) {

File: jodd-http/src/test/java/jodd/http/HttpUtilTest.java
Patch:
@@ -103,7 +103,7 @@ public void testDefaultPort() {
 
 	@Test
 	public void testBuildQuery() {
-		HttpMultiMap<String> map = HttpMultiMap.newCaseInsensitveMap();
+		HttpMultiMap<String> map = HttpMultiMap.newCaseInsensitiveMap();
 
 		assertEquals("", HttpUtil.buildQuery(map, StringPool.UTF_8));
 

File: jodd-db/src/main/java/jodd/db/debug/BaseLoggableFactory.java
Patch:
@@ -67,7 +67,7 @@ public boolean apply(MethodInfo methodInfo) {
 						methodInfo.getMethodName().startsWith("set") &&			// set*
 						(argumentsCount == 2 || argumentsCount == 3);			// number of arguments
 			}
-		})).setDebugFolder("/Users/igor");
+		}));
 	}
 
 	/**

File: jodd-http/src/main/java/jodd/http/HttpRequest.java
Patch:
@@ -872,7 +872,7 @@ protected Buffer buffer(boolean fullRequest) {
 		// user-agent
 
 		if (header("User-Agent") == null) {
-			header("User-Agent", "Jodd HTTP");
+			header("User-Agent", JoddHttp.defaultUserAgent);
 		}
 
 		// POST method requires Content-Type to be set
@@ -945,4 +945,4 @@ public static HttpRequest readFrom(InputStream in, String encoding) {
 		return httpRequest;
 	}
 
-}
\ No newline at end of file
+}

File: jodd-db/src/test/java/jodd/db/fixtures/TestLoggerProvider.java
Patch:
@@ -50,7 +50,7 @@ public void warn(String message, Throwable throwable) {
 	};
 
 	@Override
-	public Logger apply(String name) {
+	public Logger createLogger(String name) {
 		return NOP_LOGGER;
 	}
 }
\ No newline at end of file

File: jodd-mail/src/test/java/jodd/mail/InlineVsContentTest.java
Patch:
@@ -32,7 +32,7 @@ public void testSendEmailWithVariousAttachaments() {
 					"<body><h1>Hey!</h1><img src='cid:jodd.png'>" +
 					"<h2>Hay!</h2><img src='cid:jodd2.png'>" +
 					"<h3></h3></body></html>")
-			.embed(attachment().bytes(new File(PNG)))
+			.embed(attachment().bytes(new File(PNG)).setInline(false))
 			.embed(attachment().bytes(new File(PNG)).setContentId("jodd2.png").setInline(true))
 			.attach(attachment().file(PNG))
 			;

File: jodd-mail/src/test/java/jodd/mail/SendMailTest.java
Patch:
@@ -176,11 +176,11 @@ public void testTextHtmlEmbedAttach2() throws MessagingException, IOException {
 				"<html><body><h1>Hey!</h1><img src='cid:c.png'></body></html>", MimeTypes.MIME_TEXT_HTML);
 		email.addMessage(htmlMessage);
 
-		EmailAttachment embeddedAttachment = new ByteArrayAttachment(new byte[]{1,2,3,4,5,6,7}, "image/png", "c.png", "c.png");
+		EmailAttachment embeddedAttachment = new ByteArrayAttachment(new byte[]{1,2,3,4,5,6,7}, "image/png", "c.png", "c.png", true);
 		embeddedAttachment.setEmbeddedMessage(htmlMessage);
 		email.attach(embeddedAttachment);
 
-		EmailAttachment attachment = new ByteArrayAttachment(new byte[]{11,12,13,14,15}, "application/zip", "file.zip", "file.zip");
+		EmailAttachment attachment = new ByteArrayAttachment(new byte[]{11,12,13,14,15}, "application/zip", "file.zip", "file.zip", false);
 		email.attach(attachment);
 
 		assertEmail(email);

File: jodd-db/src/main/java/jodd/db/DbQueryBase.java
Patch:
@@ -293,7 +293,10 @@ protected void initializeJdbc() {
 			catch (SQLException sex) {
 				throw new DbSqlException(this, "Error creating prepared statement", sex);
 			}
+
 			statement = preparedStatement;
+
+			return;
 		}
 
 		// statement

File: jodd-proxetta/src/test/java/jodd/proxetta/AnnTest.java
Patch:
@@ -116,7 +116,7 @@ public boolean apply(MethodInfo methodInfo) {
 		Object hero = proxettaBuilder.newInstance();
 
 		Method nameMethod = hero.getClass().getMethod("name");
-		assertEquals("BatmanHero37W88.3CatWoman99speeeeedXRAYnull", nameMethod.invoke(nameMethod));
+		assertEquals("BatmanHero37W88.3CatWoman99speeeeedXRAYnull", nameMethod.invoke(hero));
 	}
 
 	@Test

File: jodd-core/src/main/java/jodd/util/ClassLoaderUtil.java
Patch:
@@ -168,7 +168,7 @@ public static Class defineClass(String className, byte[] classData) {
 	 */
 	public static Class defineClass(String className, byte[] classData, ClassLoader classLoader) {
 		try {
-			Method defineClassMethod = ClassLoader.class.getMethod("defineClass", String.class, byte[].class, int.class, int.class);
+			Method defineClassMethod = ClassLoader.class.getDeclaredMethod("defineClass", String.class, byte[].class, int.class, int.class);
 			defineClassMethod.setAccessible(true);
 			return (Class) defineClassMethod.invoke(classLoader, className, classData, 0, classData.length);
 		} catch (Throwable th) {
@@ -202,7 +202,7 @@ public static Class findClass(String className, File[] classPath, ClassLoader pa
 	public static Class findClass(String className, URL[] classPath, ClassLoader parent) {
 		URLClassLoader tempClassLoader = parent != null ? new URLClassLoader(classPath, parent) : new URLClassLoader(classPath);
 		try {
-			Method findClassMethod  = URLClassLoader.class.getMethod("findClass", String.class);
+			Method findClassMethod  = URLClassLoader.class.getDeclaredMethod("findClass", String.class);
 			findClassMethod.setAccessible(true);
 			return (Class) findClassMethod.invoke(tempClassLoader, className);
 		} catch (Throwable th) {

File: jodd-core/src/main/java/jodd/util/ObjectUtil.java
Patch:
@@ -45,7 +45,6 @@
  */
 public class ObjectUtil {
 
-
 	// ---------------------------------------------------------------- clone
 
 	/**
@@ -57,7 +56,7 @@ public static <T> T clone(T source) throws CloneNotSupportedException {
 			return null;
 		}
 		try {
-			Method cloneMethod = source.getClass().getMethod("clone");
+			Method cloneMethod = source.getClass().getDeclaredMethod("clone");
 			cloneMethod.setAccessible(true);
 			return (T) cloneMethod.invoke(null);
 		} catch (Exception ex) {

File: jodd-joy/src/main/java/jodd/joy/WebRunner.java
Patch:
@@ -98,7 +98,7 @@ public void runWebApp(Class<? extends WebApplication> webAppClass) {
 		}
 
 		try {
-			Method destroyMethod = MadvocConfig.class.getMethod("destroy");
+			Method destroyMethod = MadvocConfig.class.getDeclaredMethod("destroy");
 			destroyMethod.setAccessible(true);
 			destroyMethod.invoke(app);
 		} catch (Exception ex) {

File: jodd-vtor/src/test/java/jodd/vtor/AnnotationTest.java
Patch:
@@ -26,8 +26,8 @@
 package jodd.vtor;
 
 import jodd.vtor.constraint.TimeAfterConstraint;
-import jodd.vtor.data.Tad;
-import jodd.vtor.data.Woo;
+import jodd.vtor.fixtures.Tad;
+import jodd.vtor.fixtures.Woo;
 import org.junit.Test;
 
 import java.util.List;

File: jodd-vtor/src/test/java/jodd/vtor/ManualTest.java
Patch:
@@ -27,8 +27,8 @@
 
 import jodd.vtor.constraint.AssertValidConstraint;
 import jodd.vtor.constraint.MinLengthConstraint;
-import jodd.vtor.data.Boo;
-import jodd.vtor.data.Foo;
+import jodd.vtor.fixtures.Boo;
+import jodd.vtor.fixtures.Foo;
 import org.junit.Test;
 
 import java.util.List;

File: jodd-vtor/src/test/java/jodd/vtor/ProfileTest.java
Patch:
@@ -26,8 +26,8 @@
 package jodd.vtor;
 
 import jodd.vtor.constraint.MinLengthConstraint;
-import jodd.vtor.data.Too;
-import jodd.vtor.data.Zoo;
+import jodd.vtor.fixtures.Too;
+import jodd.vtor.fixtures.Zoo;
 import org.junit.Test;
 
 import java.util.List;

File: jodd-proxetta/src/test/java/jodd/methref/MethrefTest.java
Patch:
@@ -26,7 +26,7 @@
 package jodd.methref;
 
 import jodd.proxetta.ProxyAspect;
-import jodd.proxetta.data.Str;
+import jodd.proxetta.fixtures.data.Str;
 import jodd.proxetta.impl.ProxyProxetta;
 import jodd.proxetta.pointcuts.AllTopMethodsPointcut;
 import org.junit.Test;

File: jodd-proxetta/src/test/java/jodd/proxetta/AdviceWithMethodTest.java
Patch:
@@ -25,8 +25,8 @@
 
 package jodd.proxetta;
 
-import jodd.proxetta.data.CollectorAdvice;
-import jodd.proxetta.data.Foo;
+import jodd.proxetta.fixtures.data.CollectorAdvice;
+import jodd.proxetta.fixtures.data.Foo;
 import jodd.proxetta.impl.ProxyProxetta;
 import jodd.proxetta.pointcuts.AllTopMethodsPointcut;
 import org.junit.Test;

File: jodd-proxetta/src/test/java/jodd/proxetta/AnnTest.java
Patch:
@@ -25,9 +25,9 @@
 
 package jodd.proxetta;
 
-import jodd.proxetta.data.Hero;
-import jodd.proxetta.data.HeroProxyAdvice;
-import jodd.proxetta.data.HeroProxyAdvice2;
+import jodd.proxetta.fixtures.data.Hero;
+import jodd.proxetta.fixtures.data.HeroProxyAdvice;
+import jodd.proxetta.fixtures.data.HeroProxyAdvice2;
 import jodd.proxetta.impl.ProxyProxetta;
 
 import jodd.proxetta.impl.WrapperProxetta;

File: jodd-proxetta/src/test/java/jodd/proxetta/MethodInfoTest.java
Patch:
@@ -27,9 +27,9 @@
 
 import jodd.mutable.ValueHolder;
 import jodd.mutable.ValueHolderWrapper;
-import jodd.proxetta.data.Foo;
-import jodd.proxetta.data.FooAnn;
-import jodd.proxetta.data.FooProxyAdvice;
+import jodd.proxetta.fixtures.data.Foo;
+import jodd.proxetta.fixtures.data.FooAnn;
+import jodd.proxetta.fixtures.data.FooProxyAdvice;
 import jodd.proxetta.impl.ProxyProxetta;
 import jodd.proxetta.impl.ProxyProxettaBuilder;
 import org.junit.Test;

File: jodd-proxetta/src/test/java/jodd/proxetta/ProxyInfoTest.java
Patch:
@@ -26,8 +26,8 @@
 package jodd.proxetta;
 
 import jodd.datetime.JDateTime;
-import jodd.proxetta.data.DateDao;
-import jodd.proxetta.data.PerformanceMeasureProxyAdvice;
+import jodd.proxetta.fixtures.data.DateDao;
+import jodd.proxetta.fixtures.data.PerformanceMeasureProxyAdvice;
 import jodd.proxetta.impl.ProxyProxetta;
 import jodd.proxetta.pointcuts.AllTopMethodsPointcut;
 import org.junit.Test;

File: jodd-proxetta/src/test/java/jodd/proxetta/ReturnTest.java
Patch:
@@ -25,9 +25,9 @@
 
 package jodd.proxetta;
 
-import jodd.proxetta.data.ReflectionReplacementAdvice;
-import jodd.proxetta.data.Retro;
-import jodd.proxetta.data.ReturnNullAdvice;
+import jodd.proxetta.fixtures.data.ReflectionReplacementAdvice;
+import jodd.proxetta.fixtures.data.Retro;
+import jodd.proxetta.fixtures.data.ReturnNullAdvice;
 import jodd.proxetta.impl.ProxyProxetta;
 import jodd.proxetta.impl.ProxyProxettaBuilder;
 import jodd.proxetta.pointcuts.AllMethodsPointcut;

File: jodd-proxetta/src/test/java/jodd/proxetta/SubclassTest.java
Patch:
@@ -25,7 +25,7 @@
 
 package jodd.proxetta;
 
-import jodd.proxetta.data.*;
+import jodd.proxetta.fixtures.data.*;
 import jodd.proxetta.impl.ProxyProxetta;
 import jodd.proxetta.impl.ProxyProxettaBuilder;
 import jodd.proxetta.pointcuts.AllMethodsPointcut;

File: jodd-proxetta/src/test/java/jodd/proxetta/WrapperTest.java
Patch:
@@ -25,7 +25,7 @@
 
 package jodd.proxetta;
 
-import jodd.proxetta.data.*;
+import jodd.proxetta.fixtures.data.*;
 import jodd.proxetta.impl.WrapperProxetta;
 import jodd.proxetta.impl.WrapperProxettaBuilder;
 import jodd.proxetta.pointcuts.ProxyPointcutSupport;

File: jodd-proxetta/src/test/java/jodd/proxetta/advice/DelegateAdviceTest.java
Patch:
@@ -25,8 +25,8 @@
 
 package jodd.proxetta.advice;
 
-import jodd.proxetta.data.Calc;
-import jodd.proxetta.data.CalcImpl;
+import jodd.proxetta.fixtures.data.Calc;
+import jodd.proxetta.fixtures.data.CalcImpl;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/data/Action.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.proxetta.data;
+package jodd.proxetta.fixtures.data;
 
 import jodd.util.StringPool;
 

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/data/CalcImplBase.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.proxetta.data;
+package jodd.proxetta.fixtures.data;
 
 public class CalcImplBase {
 

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/data/DateDao.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.proxetta.data;
+package jodd.proxetta.fixtures.data;
 
 import jodd.datetime.JDateTime;
 import jodd.util.MathUtil;

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/data/DateDao2.java
Patch:
@@ -23,10 +23,9 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.proxetta.data;
+package jodd.proxetta.fixtures.data;
 
 import jodd.datetime.JDateTime;
-import jodd.proxetta.ProxyTarget;
 import jodd.proxetta.ProxyTargetInfo;
 import jodd.util.MathUtil;
 import jodd.util.ThreadUtil;

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/data/Foo.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.proxetta.data;
+package jodd.proxetta.fixtures.data;
 
 public class Foo {
 

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/data/FooAnn.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.proxetta.data;
+package jodd.proxetta.fixtures.data;
 
 public @interface FooAnn {
 }
\ No newline at end of file

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/data/FooProxyAdvice.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.proxetta.data;
+package jodd.proxetta.fixtures.data;
 
 import jodd.proxetta.ProxyAdvice;
 import jodd.proxetta.ProxyTarget;

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/data/Hero.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.proxetta.data;
+package jodd.proxetta.fixtures.data;
 
 @HeroName(
 		value = "Silver",

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/data/HeroName.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.proxetta.data;
+package jodd.proxetta.fixtures.data;
 
 public @interface HeroName {
 

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/data/HeroProxyAdvice.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.proxetta.data;
+package jodd.proxetta.fixtures.data;
 
 import jodd.proxetta.ProxyAdvice;
 import jodd.proxetta.ProxyTarget;

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/data/HeroProxyAdvice2.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.proxetta.data;
+package jodd.proxetta.fixtures.data;
 
 import jodd.proxetta.ProxyAdvice;
 import jodd.proxetta.ProxyTarget;

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/data/InterceptedBy.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.proxetta.data;
+package jodd.proxetta.fixtures.data;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/data/InvalidAdvice.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.proxetta.data;
+package jodd.proxetta.fixtures.data;
 
 import jodd.proxetta.ProxyAdvice;
 import jodd.proxetta.ProxyTarget;

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/data/MadvocAction.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.proxetta.data;
+package jodd.proxetta.fixtures.data;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/data/PerformanceMeasureProxyAdvice.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.proxetta.data;
+package jodd.proxetta.fixtures.data;
 
 import jodd.proxetta.ProxyAdvice;
 import jodd.proxetta.ProxyTarget;

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/data/PetiteBean.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.proxetta.data;
+package jodd.proxetta.fixtures.data;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/data/PetiteInject.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.proxetta.data;
+package jodd.proxetta.fixtures.data;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/data/ReflectionReplacementAdvice.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.proxetta.data;
+package jodd.proxetta.fixtures.data;
 
 import jodd.proxetta.ProxyAdvice;
 import jodd.proxetta.ProxyTarget;

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/data/Retro.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.proxetta.data;
+package jodd.proxetta.fixtures.data;
 
 public class Retro {
 

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/data/ReturnNullAdvice.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.proxetta.data;
+package jodd.proxetta.fixtures.data;
 
 import jodd.proxetta.ProxyAdvice;
 import jodd.proxetta.ProxyTarget;

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/data/Transaction.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.proxetta.data;
+package jodd.proxetta.fixtures.data;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/inv/MySystem.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.proxetta.inv;
+package jodd.proxetta.fixtures.inv;
 
 public class MySystem {
 

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/inv/TimeClass.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.proxetta.inv;
+package jodd.proxetta.fixtures.inv;
 
 public class TimeClass {
 

File: jodd-proxetta/src/test/java/jodd/proxetta/fixtures/inv/Wimp.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.proxetta.inv;
+package jodd.proxetta.fixtures.inv;
 
 import jodd.paramo.MethodParameter;
 import jodd.paramo.Paramo;

File: jodd-proxetta/src/test/java/jodd/proxetta/petite/fixtures/Bean1.java
Patch:
@@ -1,4 +1,4 @@
-package jodd.proxetta.petite.data;
+package jodd.proxetta.petite.fixtures;
 
 import jodd.petite.meta.PetiteBean;
 import jodd.petite.meta.PetiteInject;

File: jodd-proxetta/src/test/java/jodd/proxetta/petite/fixtures/Bean2.java
Patch:
@@ -1,4 +1,4 @@
-package jodd.proxetta.petite.data;
+package jodd.proxetta.petite.fixtures;
 
 import jodd.petite.meta.PetiteBean;
 

File: jodd-proxetta/src/test/java/jodd/proxetta/petite/fixtures/ExternalBean.java
Patch:
@@ -1,4 +1,4 @@
-package jodd.proxetta.petite.data;
+package jodd.proxetta.petite.fixtures;
 
 import jodd.petite.meta.PetiteInject;
 

File: jodd-proxetta/src/test/java/jodd/proxetta/petite/fixtures/IBean1.java
Patch:
@@ -1,4 +1,4 @@
-package jodd.proxetta.petite.data;
+package jodd.proxetta.petite.fixtures;
 
 /**
  * @author Sascha Fischer

File: jodd-proxetta/src/test/java/jodd/proxetta/petite/fixtures/IBean2.java
Patch:
@@ -1,4 +1,4 @@
-package jodd.proxetta.petite.data;
+package jodd.proxetta.petite.fixtures;
 
 /**
  * @author Sascha Fischer

File: jodd-proxetta/src/test/java/jodd/proxetta/petite/fixtures/LogProxyAdvice.java
Patch:
@@ -1,4 +1,4 @@
-package jodd.proxetta.petite.data;
+package jodd.proxetta.petite.fixtures;
 
 import jodd.proxetta.ProxyAdvice;
 import jodd.proxetta.ProxyTarget;

File: jodd-proxetta/src/test/java/jodd/proxetta/petite/fixtures/Logged.java
Patch:
@@ -1,4 +1,4 @@
-package jodd.proxetta.petite.data;
+package jodd.proxetta.petite.fixtures;
 
 import static java.lang.annotation.ElementType.*;
 

File: jodd-proxetta/src/test/java/jodd/proxetta/petite/fixtures/PetiteHelper.java
Patch:
@@ -1,11 +1,10 @@
-package jodd.proxetta.petite.data;
+package jodd.proxetta.petite.fixtures;
 
 import jodd.petite.PetiteConfig;
 import jodd.proxetta.ProxyAspect;
 import jodd.proxetta.ProxyPointcut;
 import jodd.proxetta.impl.ProxyProxetta;
 import jodd.proxetta.pointcuts.MethodAnnotationPointcut;
-import jodd.util.SystemUtil;
 
 public class PetiteHelper {
 

File: jodd-proxetta/src/test/java/jodd/proxetta/petite/fixtures/PetiteProxettaContainer.java
Patch:
@@ -1,4 +1,4 @@
-package jodd.proxetta.petite.data;
+package jodd.proxetta.petite.fixtures;
 
 import jodd.petite.*;
 import jodd.petite.scope.Scope;

File: jodd-json/src/test/java/jodd/json/CustomAnnotationTest.java
Patch:
@@ -26,7 +26,7 @@
 package jodd.json;
 
 import jodd.json.meta.JSON;
-import jodd.json.mock.LocationAlt;
+import jodd.json.fixtures.mock.LocationAlt;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: jodd-json/src/test/java/jodd/json/FieldsBooleanTest.java
Patch:
@@ -25,7 +25,7 @@
 
 package jodd.json;
 
-import jodd.json.model.Active;
+import jodd.json.fixtures.model.Active;
 import org.junit.Test;
 
 import static org.junit.Assert.assertTrue;

File: jodd-json/src/test/java/jodd/json/JsonParserTest.java
Patch:
@@ -29,8 +29,8 @@
 import jodd.io.FileUtil;
 import jodd.io.StreamUtil;
 import jodd.json.meta.JSON;
-import jodd.json.model.FooBar;
-import jodd.json.model.HitList;
+import jodd.json.fixtures.model.FooBar;
+import jodd.json.fixtures.model.HitList;
 import jodd.util.RandomString;
 import jodd.util.StringUtil;
 import org.junit.After;

File: jodd-json/src/test/java/jodd/json/JsonSerializerTest.java
Patch:
@@ -27,9 +27,9 @@
 
 import jodd.json.meta.JSON;
 import jodd.json.meta.JsonAnnotationManager;
-import jodd.json.model.FileMan;
-import jodd.json.model.HitList;
-import jodd.json.model.State;
+import jodd.json.fixtures.model.FileMan;
+import jodd.json.fixtures.model.HitList;
+import jodd.json.fixtures.model.State;
 import jodd.util.StringUtil;
 import jodd.util.SystemUtil;
 import org.junit.Assert;

File: jodd-json/src/test/java/jodd/json/JsonValueContextTest.java
Patch:
@@ -25,7 +25,7 @@
 
 package jodd.json;
 
-import jodd.json.mock.Surfer;
+import jodd.json.fixtures.mock.Surfer;
 import org.junit.Test;
 
 import java.util.ArrayList;

File: jodd-json/src/test/java/jodd/json/ObjectToMapTest.java
Patch:
@@ -25,9 +25,9 @@
 
 package jodd.json;
 
-import jodd.json.mock.Address;
-import jodd.json.mock.Hill;
-import jodd.json.mock.Person;
+import jodd.json.fixtures.mock.Address;
+import jodd.json.fixtures.mock.Hill;
+import jodd.json.fixtures.mock.Person;
 import org.junit.Test;
 
 import java.util.HashMap;

File: jodd-json/src/test/java/jodd/json/fixtures/mock/Address.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock;
+package jodd.json.fixtures.mock;
 
 public class Address {
 	private Person person;

File: jodd-json/src/test/java/jodd/json/fixtures/mock/Book.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock;
+package jodd.json.fixtures.mock;
 
 public class Book extends Periodical {
 

File: jodd-json/src/test/java/jodd/json/fixtures/mock/Friend.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock;
+package jodd.json.fixtures.mock;
 
 import java.util.ArrayList;
 import java.util.List;

File: jodd-json/src/test/java/jodd/json/fixtures/mock/Group.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock;
+package jodd.json.fixtures.mock;
 
 public class Group {
 

File: jodd-json/src/test/java/jodd/json/fixtures/mock/Hill.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock;
+package jodd.json.fixtures.mock;
 
 import jodd.json.meta.JSON;
 

File: jodd-json/src/test/java/jodd/json/fixtures/mock/Location.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock;
+package jodd.json.fixtures.mock;
 
 import jodd.json.meta.JSON;
 

File: jodd-json/src/test/java/jodd/json/fixtures/mock/LocationAlt.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock;
+package jodd.json.fixtures.mock;
 
 import jodd.json.JSON2;
 

File: jodd-json/src/test/java/jodd/json/fixtures/mock/Mountain.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock;
+package jodd.json.fixtures.mock;
 
 public class Mountain extends Hill {
 	private boolean wild;

File: jodd-json/src/test/java/jodd/json/fixtures/mock/Network.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock;
+package jodd.json.fixtures.mock;
 
 import java.util.ArrayList;
 import java.util.Arrays;

File: jodd-json/src/test/java/jodd/json/fixtures/mock/Pair.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock;
+package jodd.json.fixtures.mock;
 
 public class Pair<T, U> {
 	private T first;

File: jodd-json/src/test/java/jodd/json/fixtures/mock/Periodical.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock;
+package jodd.json.fixtures.mock;
 
 public abstract class Periodical {
 

File: jodd-json/src/test/java/jodd/json/fixtures/mock/Person.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock;
+package jodd.json.fixtures.mock;
 
 import jodd.json.meta.JSON;
 

File: jodd-json/src/test/java/jodd/json/fixtures/mock/Phone.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock;
+package jodd.json.fixtures.mock;
 
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;

File: jodd-json/src/test/java/jodd/json/fixtures/mock/PhoneNumberType.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock;
+package jodd.json.fixtures.mock;
 
 public enum PhoneNumberType {
 	MOBILE, FAX, WORK, PAGER, HOME

File: jodd-json/src/test/java/jodd/json/fixtures/mock/Spiderman.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock;
+package jodd.json.fixtures.mock;
 
 public class Spiderman extends Superhero {
 

File: jodd-json/src/test/java/jodd/json/fixtures/mock/SubTask.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock;
+package jodd.json.fixtures.mock;
 
 public class SubTask {
 

File: jodd-json/src/test/java/jodd/json/fixtures/mock/Superhero.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock;
+package jodd.json.fixtures.mock;
 
 public class Superhero {
 	public String superpower;

File: jodd-json/src/test/java/jodd/json/fixtures/mock/Surfer.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock;
+package jodd.json.fixtures.mock;
 
 import java.io.ByteArrayInputStream;
 import java.io.FileNotFoundException;

File: jodd-json/src/test/java/jodd/json/fixtures/mock/Task.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock;
+package jodd.json.fixtures.mock;
 
 import java.util.List;
 

File: jodd-json/src/test/java/jodd/json/fixtures/mock/TestClass3.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock;
+package jodd.json.fixtures.mock;
 
 import org.junit.Ignore;
 

File: jodd-json/src/test/java/jodd/json/fixtures/mock/Zipcode.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock;
+package jodd.json.fixtures.mock;
 
 public class Zipcode {
 	private String zipcode;

File: jodd-json/src/test/java/jodd/json/fixtures/mock/superhero/Flight.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock.superhero;
+package jodd.json.fixtures.mock.superhero;
 
 public class Flight implements SuperPower {
 

File: jodd-json/src/test/java/jodd/json/fixtures/mock/superhero/HeatVision.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock.superhero;
+package jodd.json.fixtures.mock.superhero;
 
 public class HeatVision implements SuperPower {
 	private float power;

File: jodd-json/src/test/java/jodd/json/fixtures/mock/superhero/Hero.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock.superhero;
+package jodd.json.fixtures.mock.superhero;
 
 import java.util.Arrays;
 import java.util.List;

File: jodd-json/src/test/java/jodd/json/fixtures/mock/superhero/Invincible.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock.superhero;
+package jodd.json.fixtures.mock.superhero;
 
 public class Invincible implements SuperPower {
 }

File: jodd-json/src/test/java/jodd/json/fixtures/mock/superhero/SecretIdentity.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock.superhero;
+package jodd.json.fixtures.mock.superhero;
 
 public class SecretIdentity {
 

File: jodd-json/src/test/java/jodd/json/fixtures/mock/superhero/SecretLair.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock.superhero;
+package jodd.json.fixtures.mock.superhero;
 
 public class SecretLair {
 

File: jodd-json/src/test/java/jodd/json/fixtures/mock/superhero/SuperPower.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock.superhero;
+package jodd.json.fixtures.mock.superhero;
 
 public interface SuperPower {
 }

File: jodd-json/src/test/java/jodd/json/fixtures/mock/superhero/Villian.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock.superhero;
+package jodd.json.fixtures.mock.superhero;
 
 import java.util.Arrays;
 import java.util.List;

File: jodd-json/src/test/java/jodd/json/fixtures/mock/superhero/XRayVision.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.mock.superhero;
+package jodd.json.fixtures.mock.superhero;
 
 public class XRayVision implements SuperPower {
 

File: jodd-json/src/test/java/jodd/json/fixtures/model/Account.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model;
+package jodd.json.fixtures.model;
 
 import java.math.BigDecimal;
 

File: jodd-json/src/test/java/jodd/json/fixtures/model/AccountType.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model;
+package jodd.json.fixtures.model;
 
 public enum AccountType {
 	CHECKING, SAVINGS

File: jodd-json/src/test/java/jodd/json/fixtures/model/Active.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model;
+package jodd.json.fixtures.model;
 
 import jodd.json.meta.JSON;
 

File: jodd-json/src/test/java/jodd/json/fixtures/model/Address.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model;
+package jodd.json.fixtures.model;
 
 public class Address {
 

File: jodd-json/src/test/java/jodd/json/fixtures/model/App.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model;
+package jodd.json.fixtures.model;
 
 import jodd.json.meta.JSON;
 

File: jodd-json/src/test/java/jodd/json/fixtures/model/Experience.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model;
+package jodd.json.fixtures.model;
 
 import java.util.Date;
 

File: jodd-json/src/test/java/jodd/json/fixtures/model/FileMan.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model;
+package jodd.json.fixtures.model;
 
 import java.io.File;
 

File: jodd-json/src/test/java/jodd/json/fixtures/model/FooBar.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model;
+package jodd.json.fixtures.model;
 
 import jodd.json.meta.JSON;
 

File: jodd-json/src/test/java/jodd/json/fixtures/model/HitList.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model;
+package jodd.json.fixtures.model;
 
 import java.util.Set;
 

File: jodd-json/src/test/java/jodd/json/fixtures/model/ListContainer.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model;
+package jodd.json.fixtures.model;
 
 import java.util.List;
 

File: jodd-json/src/test/java/jodd/json/fixtures/model/LoopClassOne.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model;
+package jodd.json.fixtures.model;
 
 public class LoopClassOne {
 

File: jodd-json/src/test/java/jodd/json/fixtures/model/LoopClassTwo.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model;
+package jodd.json.fixtures.model;
 
 public class LoopClassTwo {
 

File: jodd-json/src/test/java/jodd/json/fixtures/model/MyFolder1.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model;
+package jodd.json.fixtures.model;
 
 import jodd.json.meta.JSON;
 

File: jodd-json/src/test/java/jodd/json/fixtures/model/MyFolder2.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model;
+package jodd.json.fixtures.model;
 
 import jodd.json.meta.JSON;
 

File: jodd-json/src/test/java/jodd/json/fixtures/model/MyFolder3.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model;
+package jodd.json.fixtures.model;
 
 import jodd.json.meta.JSON;
 

File: jodd-json/src/test/java/jodd/json/fixtures/model/MyFolder4.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model;
+package jodd.json.fixtures.model;
 
 import jodd.json.meta.JSON;
 

File: jodd-json/src/test/java/jodd/json/fixtures/model/Person.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model;
+package jodd.json.fixtures.model;
 
 import java.util.Date;
 import java.util.List;

File: jodd-json/src/test/java/jodd/json/fixtures/model/State.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model;
+package jodd.json.fixtures.model;
 
 public class State {
 

File: jodd-json/src/test/java/jodd/json/fixtures/model/User.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model;
+package jodd.json.fixtures.model;
 
 import jodd.json.meta.JSON;
 

File: jodd-json/src/test/java/jodd/json/fixtures/model/UserHolder.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model;
+package jodd.json.fixtures.model;
 
 public class UserHolder {
 

File: jodd-json/src/test/java/jodd/json/fixtures/model/cat/Area.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model.cat;
+package jodd.json.fixtures.model.cat;
 
 public class Area {
 

File: jodd-json/src/test/java/jodd/json/fixtures/model/cat/Catalog.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model.cat;
+package jodd.json.fixtures.model.cat;
 
 import java.util.List;
 import java.util.Map;

File: jodd-json/src/test/java/jodd/json/fixtures/model/cat/Event.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model.cat;
+package jodd.json.fixtures.model.cat;
 
 public class Event {
 

File: jodd-json/src/test/java/jodd/json/fixtures/model/cat/Performance.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model.cat;
+package jodd.json.fixtures.model.cat;
 
 import jodd.datetime.JDateTime;
 

File: jodd-json/src/test/java/jodd/json/fixtures/model/cat/Price.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model.cat;
+package jodd.json.fixtures.model.cat;
 
 public class Price {
 

File: jodd-json/src/test/java/jodd/json/fixtures/model/cat/SeatCategory.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.json.model.cat;
+package jodd.json.fixtures.model.cat;
 
 import java.util.List;
 

File: jodd-bean/src/test/java/jodd/typeconverter/ClassConverterTest.java
Patch:
@@ -27,8 +27,8 @@
 
 import jodd.mutable.MutableInteger;
 import jodd.typeconverter.impl.ClassConverter;
-import jodd.util.testdata.A;
-import jodd.util.testdata.B;
+import jodd.util.fixtures.testdata.A;
+import jodd.util.fixtures.testdata.B;
 import org.junit.Test;
 
 import static org.junit.Assert.*;

File: jodd-bean/src/test/java/jodd/typeconverter/ConvertTest.java
Patch:
@@ -25,7 +25,6 @@
 
 package jodd.typeconverter;
 
-import jodd.AssertArraysTestHelper;
 import jodd.datetime.JDateTime;
 import org.junit.Test;
 
@@ -95,7 +94,7 @@ public void testAllConversions() {
 	public void testArrayConversion() {
 		assertEquals(new String[]{"555", "12"}, Convert.toStringArray("555,12"));
 		assertEquals(new String[]{"555", " 12"}, Convert.toStringArray("555, 12"));
-		AssertArraysTestHelper.assertArrayEquals(new boolean[] {true, false, true}, Convert.toBooleanArray("1, 0, true"));
+		assertArrayEquals(new boolean[] {true, false, true}, Convert.toBooleanArray("1, 0, true"));
 		assertArrayEquals(new int[] {1, 2, -3}, Convert.toIntegerArray("1, 2, -3"));
 		assertArrayEquals(new long[] {-12, 2}, Convert.toLongArray("-12, 2"));
 		assertArrayEquals(new float[] {1.1f, 2.2f}, Convert.toFloatArray("1.1, 2.2"), 0.5f);

File: jodd-core/src/test/java/jodd/util/ExtendedURLClassLoaderTest.java
Patch:
@@ -27,7 +27,7 @@
 
 import jodd.io.FileUtil;
 import jodd.util.cl.ExtendedURLClassLoader;
-import jodd.util.testdata.A;
+import jodd.util.fixtures.testdata.A;
 import org.junit.Assert;
 import org.junit.Test;
 

File: jodd-core/src/test/java/jodd/util/fixtures/testdata/A.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.util.testdata;
+package jodd.util.fixtures.testdata;
 
 public class A {
 

File: jodd-core/src/test/java/jodd/util/fixtures/testdata/B.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.util.testdata;
+package jodd.util.fixtures.testdata;
 
 public class B extends A {
 	public B () {

File: jodd-core/src/test/java/jodd/util/fixtures/testdata/C.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.util.testdata;
+package jodd.util.fixtures.testdata;
 
 public class C extends B {
 

File: jodd-core/src/test/java/jodd/util/fixtures/testdata2/D.java
Patch:
@@ -23,9 +23,9 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.util.testdata2;
+package jodd.util.fixtures.testdata2;
 
-import jodd.util.testdata.C;
+import jodd.util.fixtures.testdata.C;
 
 public class D extends C {
 

File: jodd-core/src/test/java/jodd/util/fixtures/testdata2/E.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.util.testdata2;
+package jodd.util.fixtures.testdata2;
 
 public class E extends D {
 	public E() {

File: jodd-bean/src/test/java/jodd/bean/BeanCopyTest.java
Patch:
@@ -25,8 +25,8 @@
 
 package jodd.bean;
 
-import jodd.bean.data.FooBean;
-import jodd.bean.data.FooBeanString;
+import jodd.bean.fixtures.FooBean;
+import jodd.bean.fixtures.FooBeanString;
 import jodd.util.Wildcard;
 import org.junit.Test;
 

File: jodd-bean/src/test/java/jodd/bean/BeanPrefixTest.java
Patch:
@@ -25,7 +25,7 @@
 
 package jodd.bean;
 
-import jodd.bean.data.LifeBean;
+import jodd.bean.fixtures.LifeBean;
 import jodd.introspector.CachingIntrospector;
 import jodd.introspector.ClassDescriptor;
 import jodd.introspector.JoddIntrospector;

File: jodd-bean/src/test/java/jodd/bean/BeanTemplateParserTest.java
Patch:
@@ -25,7 +25,7 @@
 
 package jodd.bean;
 
-import jodd.bean.data.Abean;
+import jodd.bean.fixtures.Abean;
 import jodd.util.StringTemplateParser;
 import org.junit.Test;
 

File: jodd-bean/src/test/java/jodd/bean/BeanUtilGenericsTest.java
Patch:
@@ -25,7 +25,7 @@
 
 package jodd.bean;
 
-import jodd.bean.data.Woof;
+import jodd.bean.fixtures.Woof;
 import jodd.introspector.ClassDescriptor;
 import jodd.introspector.ClassIntrospector;
 import jodd.introspector.PropertyDescriptor;

File: jodd-bean/src/test/java/jodd/bean/BeanWalkerTest.java
Patch:
@@ -25,7 +25,7 @@
 
 package jodd.bean;
 
-import jodd.bean.data.FooBean;
+import jodd.bean.fixtures.FooBean;
 import org.junit.Test;
 
 import java.util.ArrayList;

File: jodd-bean/src/test/java/jodd/bean/fixtures/Abean.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.bean.data;
+package jodd.bean.fixtures;
 
 import java.util.HashMap;
 

File: jodd-bean/src/test/java/jodd/bean/fixtures/AbeanEx.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.bean.data;
+package jodd.bean.fixtures;
 
 public class AbeanEx extends Abean {
 

File: jodd-bean/src/test/java/jodd/bean/fixtures/Bbean.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.bean.data;
+package jodd.bean.fixtures;
 
 public class Bbean {
 

File: jodd-bean/src/test/java/jodd/bean/fixtures/Cbean.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.bean.data;
+package jodd.bean.fixtures;
 
 public class Cbean {
 

File: jodd-bean/src/test/java/jodd/bean/fixtures/Color.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.bean.data;
+package jodd.bean.fixtures;
 
 public enum Color {
 	RED,

File: jodd-bean/src/test/java/jodd/bean/fixtures/EnumBean.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.bean.data;
+package jodd.bean.fixtures;
 
 public class EnumBean {
 

File: jodd-bean/src/test/java/jodd/bean/fixtures/FooBean.java
Patch:
@@ -25,7 +25,7 @@
 
 /* created by makebean v0.25 (coded by Weird) */
 
-package jodd.bean.data;
+package jodd.bean.fixtures;
 
 import java.util.Map;
 import java.util.List;

File: jodd-bean/src/test/java/jodd/bean/fixtures/FooBean2.java
Patch:
@@ -25,7 +25,7 @@
 
 /* created by makebean v0.25 (coded by Weird) */
 
-package jodd.bean.data;
+package jodd.bean.fixtures;
 
 import java.math.BigDecimal;
 import java.sql.Date;

File: jodd-bean/src/test/java/jodd/bean/fixtures/FooBean3.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.bean.data;
+package jodd.bean.fixtures;
 
 
 public class FooBean3 {

File: jodd-bean/src/test/java/jodd/bean/fixtures/FooBean4.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.bean.data;
+package jodd.bean.fixtures;
 
 import java.util.ArrayList;
 import java.util.HashMap;

File: jodd-bean/src/test/java/jodd/bean/fixtures/FooBeanSlim.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.bean.data;
+package jodd.bean.fixtures;
 
 import java.util.Map;
 import java.util.List;

File: jodd-bean/src/test/java/jodd/bean/fixtures/Gig.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.bean.data;
+package jodd.bean.fixtures;
 
 import jodd.mutable.MutableInteger;
 

File: jodd-bean/src/test/java/jodd/bean/fixtures/LifeBean.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.bean.data;
+package jodd.bean.fixtures;
 
 public class LifeBean {
 

File: jodd-bean/src/test/java/jodd/bean/fixtures/MixBean.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.bean.data;
+package jodd.bean.fixtures;
 
 import java.util.List;
 

File: jodd-bean/src/test/java/jodd/bean/fixtures/Status.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.bean.data;
+package jodd.bean.fixtures;
 
 public enum Status {
 

File: jodd-bean/src/test/java/jodd/bean/fixtures/SubBean.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.bean.data;
+package jodd.bean.fixtures;
 
 public class SubBean extends SupBean {
 

File: jodd-bean/src/test/java/jodd/bean/fixtures/SupBean.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.bean.data;
+package jodd.bean.fixtures;
 
 public class SupBean {
 

File: jodd-bean/src/test/java/jodd/bean/fixtures/WAbstract.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.bean.data;
+package jodd.bean.fixtures;
 
 import java.io.Serializable;
 

File: jodd-bean/src/test/java/jodd/bean/fixtures/WInterface.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.bean.data;
+package jodd.bean.fixtures;
 
 import java.io.Serializable;
 

File: jodd-bean/src/test/java/jodd/bean/fixtures/Woof.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.bean.data;
+package jodd.bean.fixtures;
 
 public class Woof extends WAbstract<Integer, Long> implements WInterface<Double, Float> {
 

File: jodd-bean/src/test/java/jodd/bean/fixtures/XBean.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.bean.data;
+package jodd.bean.fixtures;
 
 public class XBean {
 	private YBean y;

File: jodd-bean/src/test/java/jodd/bean/fixtures/YBean.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.bean.data;
+package jodd.bean.fixtures;
 
 public class YBean {
 

File: jodd-bean/src/test/java/jodd/bean/fixtures/ZBean.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.bean.data;
+package jodd.bean.fixtures;
 
 public class ZBean extends YBean {
 

File: jodd-bean/src/test/java/jodd/introspector/fixtures/Abean.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.introspector.tst;
+package jodd.introspector.fixtures;
 
 public class Abean {
 

File: jodd-bean/src/test/java/jodd/introspector/fixtures/Ac.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.introspector.tst;
+package jodd.introspector.fixtures;
 
 public class Ac {
 

File: jodd-bean/src/test/java/jodd/introspector/fixtures/Bbean.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.introspector.tst;
+package jodd.introspector.fixtures;
 
 public class Bbean extends Abean {
 

File: jodd-bean/src/test/java/jodd/introspector/fixtures/Bc.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.introspector.tst;
+package jodd.introspector.fixtures;
 
 public class Bc extends Ac {
 

File: jodd-bean/src/test/java/jodd/introspector/fixtures/Cbean.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.introspector.tst;
+package jodd.introspector.fixtures;
 
 public class Cbean {
 

File: jodd-bean/src/test/java/jodd/introspector/fixtures/Mojo.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.introspector.tst;
+package jodd.introspector.fixtures;
 
 public class Mojo {
 

File: jodd-bean/src/test/java/jodd/introspector/fixtures/One.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.introspector.tst;
+package jodd.introspector.fixtures;
 
 public class One {
 

File: jodd-bean/src/test/java/jodd/introspector/fixtures/OneSub.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.introspector.tst;
+package jodd.introspector.fixtures;
 
 public class OneSub extends One {
 }
\ No newline at end of file

File: jodd-bean/src/test/java/jodd/introspector/fixtures/Overload.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.introspector.tst;
+package jodd.introspector.fixtures;
 
 public class Overload {
 

File: jodd-bean/src/test/java/jodd/introspector/fixtures/TwoSub.java
Patch:
@@ -23,7 +23,7 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
-package jodd.introspector.tst;
+package jodd.introspector.fixtures;
 
 public class TwoSub extends One {
 

File: jodd-petite/src/main/java/jodd/petite/PetiteBeans.java
Patch:
@@ -569,7 +569,7 @@ public void registerPetiteInitMethods(String beanName, InitMethodInvocationStrat
 
 		int i;
 		for (i = 0; i < initMethodNames.length; i++) {
-			MethodDescriptor md = cd.getMethodDescriptor(initMethodNames[i], ClassUtil.NO_PARAMETERS, true);
+			MethodDescriptor md = cd.getMethodDescriptor(initMethodNames[i], ClassUtil.EMPTY_CLASS_ARRAY, true);
 			if (md == null) {
 				throw new PetiteException("Init method not found: " + beanDefinition.type.getName() + '#' + initMethodNames[i]);
 			}
@@ -598,7 +598,7 @@ public void registerPetiteDestroyMethods(String beanName, String... destroyMetho
 
 		int i;
 		for (i = 0; i < destroyMethodNames.length; i++) {
-			MethodDescriptor md = cd.getMethodDescriptor(destroyMethodNames[i], ClassUtil.NO_PARAMETERS, true);
+			MethodDescriptor md = cd.getMethodDescriptor(destroyMethodNames[i], ClassUtil.EMPTY_CLASS_ARRAY, true);
 			if (md == null) {
 				throw new PetiteException("Destroy method not found: " + beanDefinition.type.getName() + '#' + destroyMethodNames[i]);
 			}

File: jodd-petite/src/main/java/jodd/petite/PetiteRegistry.java
Patch:
@@ -447,7 +447,7 @@ public BeanProvider method(String methodName) {
 		 */
 		public BeanProvider args(Class... methodArgsTypes) {
 			if (methodArgsTypes.length == 0) {
-				methodArgsTypes = ClassUtil.NO_PARAMETERS;
+				methodArgsTypes = ClassUtil.EMPTY_CLASS_ARRAY;
 			}
 			this.methodArgsTypes = methodArgsTypes;
 			return this;

File: jodd-petite/src/test/java/jodd/petite/ProviderTest.java
Patch:
@@ -58,7 +58,7 @@ public void testInstanceMethodProviderManualRegistration() {
 		pc.registerPetiteBean(Solar2.class, null, null, null, false);
 		pc.registerPetiteBean(Sun2.class, null, null, null, false);
 
-		pc.registerPetiteProvider("planet", "solar2", "planetProvider", ClassUtil.NO_PARAMETERS);
+		pc.registerPetiteProvider("planet", "solar2", "planetProvider", ClassUtil.EMPTY_CLASS_ARRAY);
 		pc.registerPetitePropertyInjectionPoint("sun2", "planet", null);
 
 		Sun2 sun = pc.getBean(Sun2.class);

File: jodd-madvoc/src/testInt/java/jodd/madvoc/RawActionTest.java
Patch:
@@ -60,7 +60,7 @@ public void testRawTextAction() {
 	@Test
 	public void testRawDownloadAction() {
 		HttpResponse response = HttpRequest.get("localhost:8173/raw.download").send();
-		assertEquals("attachment;filename=\"jodd-download.txt\"", response.header("content-disposition"));
+		assertEquals("attachment;filename=\"jodd-download.txt\";filename*=utf8''jodd-download.txt", response.header("content-disposition"));
 		assertEquals("file from jodd.org!", response.bodyText().trim());
 	}
 

File: jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java
Patch:
@@ -176,7 +176,7 @@ public static void prepareResponse(HttpServletResponse response, String fileName
 			String encodedFileName = URLCoder.encode(name);
 
 			response.setHeader(CONTENT_DISPOSITION,
-				"attachment;filename=\"+ name + \";filename*=utf8''" + encodedFileName);
+				"attachment;filename=\"" + name + "\";filename*=utf8''" + encodedFileName);
 		}
 	}
 

File: jodd-http/src/test/java/jodd/http/ProxyTest.java
Patch:
@@ -109,6 +109,7 @@ public void testSocks5ProxyWithHttps() {
 
 		HttpResponse response = HttpRequest.get("https://localhost:1080/get_books")
 			.withConnectionProvider(s)
+			.trustAllCerts(true)
 			.send();
 		Assert.assertEquals(200, response.statusCode());
 		Assert.assertTrue(response.body().contains("Tatum"));

File: jodd-lagarto/src/test/java/jodd/jerry/JerryTest.java
Patch:
@@ -490,7 +490,6 @@ public void testReplaceWith() {
 		Jerry doc = jerry(html);
 		doc.$("div.second").replaceWith("<h2>New heading</h2>");
 
-		String h = actualHtml(doc);
 		assertEquals(htmlOK, actualHtml(doc));
 	}
 
@@ -502,7 +501,6 @@ public void testUnwrap() {
 		Jerry doc = jerry(html);
 		doc.$("p").unwrap();
 
-		String h = actualHtml(doc);
 		assertEquals(htmlOK, actualHtml(doc));
 	}
 

File: jodd-core/src/test/java/jodd/util/ArraysUtilTest.java
Patch:
@@ -595,9 +595,12 @@ public void testConvert() {
 	@Test
 	public void testToString() {
 		Assert.assertEquals("null", ArraysUtil.toString((int[]) null));
+		Assert.assertEquals("", ArraysUtil.toString((new int[0])));
+		Assert.assertEquals("1", ArraysUtil.toString(new int[] { 1 }));
 		Assert.assertEquals("1,2,3", ArraysUtil.toString(new int[] { 1, 2, 3 }));
 
 		Assert.assertEquals("null", ArraysUtil.toString((Object[]) null));
+		Assert.assertEquals("", ArraysUtil.toString((new Object[0])));
 		Assert.assertEquals("1,null,3.1",
 				ArraysUtil.toString(new Object[] { Integer.valueOf(1), null, Double.valueOf(3.1) }));
 

File: jodd-bean/src/main/java/jodd/bean/BeanCopy.java
Patch:
@@ -67,14 +67,14 @@ public static BeanCopy beans(Object source, Object destination) {
 	}
 
 	/**
-	 * Creates <copy>BeanCopy</copy> with given POJO bean as a source.
+	 * Creates <code>BeanCopy</code> with given POJO bean as a source.
 	 */
 	public static BeanCopy fromBean(Object source) {
 		return new BeanCopy(source);
 	}
 
 	/**
-	 * Creates <copy>BeanCopy</copy> with given <code>Map</code> as a source.
+	 * Creates <code>BeanCopy</code> with given <code>Map</code> as a source.
 	 */
 	public static BeanCopy fromMap(Map source) {
 		BeanCopy beanCopy = new BeanCopy(source);

File: jodd-lagarto/src/main/java/jodd/lagarto/dom/Node.java
Patch:
@@ -384,6 +384,9 @@ public boolean hasAttribute(String name) {
 		if (attributes == null) {
 			return false;
 		}
+		if (!ownerDocument.config.isCaseSensitive()) {
+			name = name.toLowerCase();
+		}
 		for (int i = 0, attributesSize = attributes.size(); i < attributesSize; i++) {
 			Attribute attr = attributes.get(i);
 			if (attr.getName().equals(name)) {

File: jodd-core/src/test/java/jodd/util/StringUtilTest.java
Patch:
@@ -898,7 +898,7 @@ public void testCrop() {
 
 	@Test
 	public void testJoin() {
-		assertNull(StringUtil.join((Object[]) null));
+		assertNull(StringUtil.join(null));
 		assertEquals(StringPool.EMPTY, StringUtil.join(new Object[] {}));
 
 		assertEquals("123", StringUtil.join(arr("123")));
@@ -919,11 +919,11 @@ public void testJoin() {
 		s = StringUtil.join(new String[0], ".");
 		assertEquals("", s);
 
-		assertNull(StringUtil.join(arr(null, ".")));
+		assertNull(StringUtil.join(arr(null), "."));
 		assertEquals(StringPool.EMPTY, StringUtil.join(new Object[] {}, "."));
 		assertEquals("123", StringUtil.join(new String[] { "123" }, "."));
 
-		assertNull(StringUtil.join(arr(null, '.')));
+		assertNull(StringUtil.join(arr(null), '.'));
 		assertEquals(StringPool.EMPTY, StringUtil.join(new Object[] {}, '.'));
 		assertEquals("123", StringUtil.join(new String[] { "123" }, '.'));
 	}

File: jodd-mail/src/main/java/jodd/mail/SmtpSslServer.java
Patch:
@@ -61,7 +61,7 @@ public SmtpSslServer(String host, int port) {
 	// ---------------------------------------------------------------- properties
 
 	protected boolean startTlsRequired = false;
-	protected boolean plaintextOverTLS = false;
+	protected boolean plaintextOverTLS = true;
 
 	/**
 	 * Sets <code>mail.smtp.starttls.required</code> which according to

File: jodd-lagarto/src/main/java/jodd/csselly/selector/Match.java
Patch:
@@ -70,7 +70,7 @@ public boolean compare(String attr, String val) {
 	        int start = 0;
 	        for (int i = 0; i < attrLength; i ++) {
 	            char c = attr.charAt(i);
-				if (c == ' ' || c == '\t') {
+				if ((c == ' ') || (c == '\t')) {
 	                if (inClass) {
 	                    // the white space ends a class name
 	                    // compare it with the requested one

File: jodd-lagarto/src/main/java/jodd/csselly/selector/Match.java
Patch:
@@ -69,7 +69,8 @@ public boolean compare(String attr, String val) {
 	        boolean inClass = false;
 	        int start = 0;
 	        for (int i = 0; i < attrLength; i ++) {
-	            if (attr.charAt(i) == ' ') {
+	            char c = attr.charAt(i);
+				if (c == ' ' || c == '\t') {
 	                if (inClass) {
 	                    // the white space ends a class name
 	                    // compare it with the requested one

File: jodd-joy/src/main/java/jodd/joy/core/DefaultAppCore.java
Patch:
@@ -30,6 +30,7 @@
 import jodd.db.connection.ConnectionProvider;
 import jodd.db.oom.DbOomManager;
 import jodd.db.oom.config.AutomagicDbOomConfigurator;
+import jodd.db.pool.CoreConnectionPool;
 import jodd.joy.exception.AppException;
 import jodd.joy.jtx.meta.ReadWriteTransaction;
 import jodd.jtx.JtxTransactionManager;
@@ -607,9 +608,10 @@ protected JtxTransactionManager createJtxTransactionManager(ConnectionProvider c
 
 	/**
 	 * Returns <code>ConnectionProvider</code> instance.
+	 * Instance will be registered into the Petite context.
 	 */
 	protected ConnectionProvider createConnectionProvider() {
-		throw new UnsupportedOperationException("Please provide ConnectionProvider implementation.");
+		return new CoreConnectionPool();
 	}
 
 	/**

File: jodd-lagarto/src/main/java/jodd/lagarto/dom/LagartoHtmlRendererNodeVisitor.java
Patch:
@@ -76,7 +76,7 @@ public void documentType(DocumentType documentType) {
 	}
 
 	public void text(Text text) {
-		String nodeValue = text.getTextContent();
+		String nodeValue = text.getTextValue();
 
 		try {
 			appendable.append(nodeValue);

File: jodd-lagarto/src/test/java/jodd/lagarto/dom/DomBuilderTest.java
Patch:
@@ -259,7 +259,8 @@ public void testEncode() {
 		Text text = (Text) document.getFirstChild().getFirstChild();
 
 		assertEquals("a<b", text.getNodeValue());
-		assertEquals("a&lt;b", text.getTextContent());
+		assertEquals("a<b", text.getTextContent());
+		assertEquals("a&lt;b", text.getTextValue());
 		assertTrue(document.check());
 	}
 

File: jodd-core/src/main/java/jodd/util/ClassLoaderUtil.java
Patch:
@@ -329,7 +329,7 @@ public static File[] getDefaultClasspath(ClassLoader classLoader) {
 			classLoader = classLoader.getParent();
 		}
 
-		String bootstrap = SystemUtil.getSunBoothClassPath();
+		String bootstrap = SystemUtil.getSunBootClassPath();
 		if (bootstrap != null) {
 			String[] bootstrapFiles = StringUtil.splitc(bootstrap, File.pathSeparatorChar);
 			for (String bootstrapFile: bootstrapFiles) {

File: jodd-core/src/main/java/jodd/util/SystemUtil.java
Patch:
@@ -445,7 +445,7 @@ public static boolean isHostAix() {
 	/**
 	 * Returns bootstrap class path.
 	 */
-	public static String getSunBoothClassPath() {
+	public static String getSunBootClassPath() {
 		return System.getProperty(SUN_BOOT_CLASS_PATH);
 	}
 

File: jodd-mail/src/main/java/jodd/mail/SmtpServer.java
Patch:
@@ -112,7 +112,7 @@ public T timeout(int timeout) {
 	 * Enables debug mode. By default it is turned off.
 	 */
 	public T debug(boolean debug) {
-		this.debug = true;
+		this.debug = debug;
 		return (T) this;
 	}
 

File: jodd-mail/src/main/java/jodd/mail/SmtpServer.java
Patch:
@@ -112,7 +112,7 @@ public T timeout(int timeout) {
 	 * Enables debug mode. By default it is turned off.
 	 */
 	public T debug(boolean debug) {
-		this.debug = true;
+		this.debug = debug;
 		return (T) this;
 	}
 

File: jodd-lagarto/src/main/java/jodd/lagarto/LagartoParser.java
Patch:
@@ -1141,6 +1141,7 @@ public void parse() {
 
 				if (c == '&') {
 					consumeCharacterReference();
+					continue;
 				}
 
 				textEmitChar(c);

File: jodd-core/src/main/java/jodd/io/findfile/ClassFinder.java
Patch:
@@ -57,7 +57,7 @@
  * User can set explicit excludes. Of course, mode can be changed.
  * <p>
  * All paths are matched using {@link Wildcard#matchPath(String, String) path-style}
- * wildcard matcher. All entries are matched using {@link Wildcard#match(String, String) common-style}
+ * wildcard matcher. All entries are matched using {@link Wildcard#match(CharSequence, CharSequence)} common-style}
  * wildcard matcher.
  *
  * @see ClassScanner

File: jodd-bean/src/main/java/jodd/bean/BeanWalker.java
Patch:
@@ -32,7 +32,7 @@
  */
 public class BeanWalker extends BeanVisitorImplBase<BeanWalker> {
 
-	private BeanWalkerCallback callback;
+	private final BeanWalkerCallback callback;
 
 	/**
 	 * Functional callback for walking.

File: jodd-core/src/main/java/jodd/cache/CacheValuesIterator.java
Patch:
@@ -33,7 +33,7 @@
  */
 public class CacheValuesIterator<V> implements Iterator<V> {
 
-	private Iterator<? extends AbstractCacheMap<?, V>.CacheObject<?, V>> iterator;
+	private final Iterator<? extends AbstractCacheMap<?, V>.CacheObject<?, V>> iterator;
 
 	private AbstractCacheMap<?,V>.CacheObject<?,V> nextValue;
 

File: jodd-core/src/main/java/jodd/io/UnicodeInputStream.java
Patch:
@@ -44,11 +44,11 @@ public class UnicodeInputStream extends InputStream {
 
 	public static final int MAX_BOM_SIZE = 4;
 
-	private PushbackInputStream internalInputStream;
+	private final PushbackInputStream internalInputStream;
 	private boolean initialized;
 	private int BOMSize = -1;
 	private String encoding;
-	private String targetEncoding;
+	private final String targetEncoding;
 
 	/**
 	 * Creates new unicode stream. It works in two modes: detect mode and read mode.

File: jodd-core/src/main/java/jodd/util/collection/ArrayIterator.java
Patch:
@@ -34,9 +34,9 @@
  */
 public class ArrayIterator<E> implements Iterator<E>, Serializable {
 
-	private E[] array;
+	private final E[] array;
 	private int ndx;
-	private int endNdx;
+	private final int endNdx;
 
 	public ArrayIterator(E[] array) {
 		this.array = array;

File: jodd-db/src/main/java/jodd/db/connection/XADataSourceConnectionProvider.java
Patch:
@@ -37,9 +37,9 @@
  */
 public class XADataSourceConnectionProvider implements ConnectionProvider {
 
-	private XADataSource xaDataSource;
-	private String username;
-	private String password;
+	private final XADataSource xaDataSource;
+	private final String username;
+	private final String password;
 
 	public XADataSourceConnectionProvider(XADataSource dataSource) {
 		this.xaDataSource = dataSource;

File: jodd-http/src/main/java/jodd/http/net/Socks5ProxySocketFactory.java
Patch:
@@ -42,7 +42,7 @@
  */
 public class Socks5ProxySocketFactory extends SocketFactory {
 
-	private ProxyInfo proxy;
+	private final ProxyInfo proxy;
 
 	public Socks5ProxySocketFactory(ProxyInfo proxy) {
 		this.proxy = proxy;

File: jodd-joy/src/main/java/jodd/joy/i18n/TextTag.java
Patch:
@@ -65,7 +65,7 @@ public void setDefaultOnly(String defaultOnly) {
 		this.defaultOnly = Boolean.parseBoolean(defaultOnly);
 	}
 
-	private List<String[]> params = new ArrayList<>();
+	private final List<String[]> params = new ArrayList<>();
 
 	public void setDynamicAttribute(String uri, String localName, Object value) {
 		params.add(new String[] {localName, StringUtil.toSafeString(value)});

File: jodd-log/src/main/java/jodd/log/impl/NOPLoggerFactory.java
Patch:
@@ -34,7 +34,7 @@
  */
 public class NOPLoggerFactory implements LoggerFactoryInterface {
 
-	private NOPLogger logger = new NOPLogger("*");
+	private final NOPLogger logger = new NOPLogger("*");
 
 	/**
 	 * {@inheritDoc}

File: jodd-proxetta/src/main/java/jodd/asm5/TypeReference.java
Patch:
@@ -176,7 +176,7 @@ public class TypeReference {
     /**
      * The type reference value in Java class file format.
      */
-    private int value;
+    private final int value;
 
     /**
      * Creates a new TypeReference.

File: jodd-servlet/src/main/java/jodd/servlet/tag/UrlTag.java
Patch:
@@ -58,7 +58,7 @@ public void set_var(String value) {
 		this.var = value;
 	}
 
-	private List<String> attrs = new ArrayList<>();
+	private final List<String> attrs = new ArrayList<>();
 	public void setDynamicAttribute(String uri, String localName, Object value) {
 		attrs.add(localName);
 		attrs.add(value == null ? StringPool.EMPTY : value.toString());

File: jodd-swingspy/src/main/java/jodd/swingspy/CaddyDialog.java
Patch:
@@ -47,8 +47,8 @@
  */
 public class CaddyDialog extends JDialog {
 
-	private JPanel jpanel = new JPanel();
-	private BorderLayout borderLayout = new BorderLayout();
+	private final JPanel jpanel = new JPanel();
+	private final BorderLayout borderLayout = new BorderLayout();
 	private boolean modal;
 	private WindowAdapter parentWindowListener;
 	private Window owner;

File: jodd-mail/src/main/java/jodd/mail/EmailUtil.java
Patch:
@@ -109,10 +109,10 @@ public static String resolveFileName(Part part) throws MessagingException, Unsup
 			if (contentId == null) {
 				ret = "no-name";
 			}
-			ret += "."  + contentType.substring(contentType.lastIndexOf("/") + 1, contentType.length());
+			ret += StringPool.DOT  + contentType.substring(contentType.lastIndexOf("/") + 1, contentType.length());
 		}
 
-		return ret == null ? "" : ret;
+		return ret == null ? StringPool.EMPTY : ret;
 	}
 
 }
\ No newline at end of file

File: jodd-mail/src/test/java/jodd/mail/EMLParserTest.java
Patch:
@@ -210,9 +210,9 @@ public void testSimpleNullEML() throws FileNotFoundException, MessagingException
 		assertEquals(2, attachments.size());
 
 		EmailAttachment att = attachments.get(0);
-		assertNull(att.getName());
+		assertEquals("no-name.pdf", att.getName());
 
 		att = attachments.get(1);
-		assertNull(att.getName());
+		assertEquals("no-name.excel", att.getName());
 	}
 }
\ No newline at end of file

File: jodd-mail/src/main/java/jodd/mail/ReceivedEmail.java
Patch:
@@ -149,7 +149,7 @@ else if (content instanceof Multipart) {
 			}
 		}
 		else if (content instanceof InputStream) {
-			String fileName = part.getFileName();
+			String fileName = EmailUtil.resolveFileName(part);
 			String contentId = (part instanceof MimePart) ? ((MimePart)part).getContentID() : null;
 			String mimeType = EmailUtil.extractMimeType(part.getContentType());
 

File: jodd-mail/src/main/java/jodd/mail/ReceivedEmail.java
Patch:
@@ -82,6 +82,9 @@ protected void parseMessage(Message msg) throws MessagingException, IOException
 		setCc(MailAddress.createFrom(msg.getRecipients(Message.RecipientType.CC)));
 		setBcc(MailAddress.createFrom(msg.getRecipients(Message.RecipientType.BCC)));
 
+		// reply to
+		setReplyTo(MailAddress.createFrom(msg.getReplyTo()));
+
 		setSubject(msg.getSubject());
 
 		Date recvDate = msg.getReceivedDate();

File: jodd-core/src/main/java/jodd/util/BCrypt.java
Patch:
@@ -687,7 +687,7 @@ public static String hashpw(String password, String salt) {
 		String real_salt;
 		byte[] passwordb, saltb, hashed;
 		char minor = (char) 0;
-		int rounds, off = 0;
+		int rounds, off;
 		StringBuffer rs = new StringBuffer();
 
 		if (salt.charAt(0) != '$' || salt.charAt(1) != '2') {

File: jodd-core/src/main/java/jodd/util/buffer/FastCharBuffer.java
Patch:
@@ -326,8 +326,7 @@ public FastCharBuffer append(String string) {
 		if (len == 0) {
 			return this;
 		}
-
-		int end = offset + len;
+		
 		int newSize = size + len;
 		int remaining = len;
 		int start = 0;

File: jodd-mail/src/main/java/jodd/mail/EmailAddress.java
Patch:
@@ -467,9 +467,9 @@ private InternetAddress pullFromGroups(Matcher m) {
 	private String[] _calcMatcherParts(Matcher m) {
 		String currentLocalpart = null;
 		String currentDomainpart = null;
-		String localPartDa = null;
+		String localPartDa;
 		String localPartQs = null;
-		String domainPartDa = null;
+		String domainPartDa;
 		String domainPartDl = null;
 		String personal_string = null;
 

File: jodd-proxetta/src/test/java/jodd/proxetta/InvReplTest.java
Patch:
@@ -154,7 +154,7 @@ public InvokeReplacer pointcut(InvokeInfo invokeInfo) {
 
 
 	protected InvokeProxetta initProxetta() {
-		InvokeProxetta fp = InvokeProxetta.withAspects(
+		return InvokeProxetta.withAspects(
 				new InvokeAspect() {
 					@Override
 					public InvokeReplacer pointcut(InvokeInfo invokeInfo) {
@@ -202,6 +202,5 @@ public InvokeReplacer pointcut(InvokeInfo invokeInfo) {
 					}
 				}
 		);
-		return fp;
 	}
 }

File: jodd-proxetta/src/test/java/jodd/proxetta/data/DateDao2.java
Patch:
@@ -53,8 +53,7 @@ public Object currentTime() {
 		long end = start;
 
 		try {
-			Object result = currentTime0();
-			return result;
+			return currentTime0();
 		}
 		catch (Exception e) {
 			throw e;

File: jodd-proxetta/src/test/java/jodd/proxetta/data/PerformanceMeasureProxyAdvice.java
Patch:
@@ -40,8 +40,7 @@ public Object execute() throws Exception {
 		long end = start;
 
 		try {
-			Object result = ProxyTarget.invoke();
-			return result;
+			return ProxyTarget.invoke();
 		}
 		catch (Exception e) {
 			throw e;

File: jodd-proxetta/src/test/java/jodd/proxetta/petite/data/PetiteHelper.java
Patch:
@@ -24,11 +24,10 @@ public static ProxyProxetta createProxyProxetta() {
 
         ProxyPointcut pointcut_logged = new MethodAnnotationPointcut(Logged.class);
         ProxyAspect aspect_logged = new ProxyAspect(LogProxyAdvice.class, pointcut_logged);
-
-        ProxyProxetta proxetta = ProxyProxetta.withAspects(aspect_logged);
+        
         //proxetta.setDebugFolder(SystemUtil.userHome() + "\\inka\\proxetta");
 
-        return proxetta;
+        return ProxyProxetta.withAspects(aspect_logged);
     }
 
 }

File: jodd-servlet/src/main/java/jodd/servlet/tag/CaseTag.java
Patch:
@@ -39,7 +39,7 @@ public void setValue(String value) {
 	@Override
 	public void doTag() throws JspException {
 		JspTag parent = getParent();
-		if (parent == null || !(parent instanceof SwitchTag)) {
+		if (!(parent instanceof SwitchTag)) {
 			throw new JspException(SwitchTag.MSG_PARENT_SWITCH_REQUIRED, null);
 		}
 

File: jodd-servlet/src/main/java/jodd/servlet/tag/DefaultTag.java
Patch:
@@ -34,7 +34,7 @@ public class DefaultTag extends SimpleTagSupport {
 	@Override
 	public void doTag() throws JspException {
 		JspTag parent = getParent();
-		if (parent == null || !(parent instanceof SwitchTag)) {
+		if (!(parent instanceof SwitchTag)) {
 			throw new JspException(SwitchTag.MSG_PARENT_SWITCH_REQUIRED, null);
 		}
 

File: jodd-servlet/src/main/java/jodd/servlet/tag/ElseTag.java
Patch:
@@ -37,7 +37,7 @@ public class ElseTag extends SimpleTagSupport {
 	@Override
 	public void doTag() throws JspException {
 		JspTag parent = getParent();
-		if (parent == null || !(parent instanceof IfElseTag)) {
+		if (!(parent instanceof IfElseTag)) {
 			throw new JspException("Parent IfElse tag is required", null);
 		}
 

File: jodd-servlet/src/main/java/jodd/servlet/tag/ThenTag.java
Patch:
@@ -37,7 +37,7 @@ public class ThenTag extends SimpleTagSupport {
 	@Override
 	public void doTag() throws JspException {
 		JspTag parent = getParent();
-		if (parent == null || !(parent instanceof IfElseTag)) {
+		if (!(parent instanceof IfElseTag)) {
 			throw new JspException("Parent IfElse tag is required", null);
 		}
 

File: jodd-proxetta/src/test/java/jodd/proxetta/InvReplTest.java
Patch:
@@ -154,7 +154,7 @@ public InvokeReplacer pointcut(InvokeInfo invokeInfo) {
 
 
 	protected InvokeProxetta initProxetta() {
-		InvokeProxetta fp = InvokeProxetta.withAspects(
+		return InvokeProxetta.withAspects(
 				new InvokeAspect() {
 					@Override
 					public InvokeReplacer pointcut(InvokeInfo invokeInfo) {
@@ -202,6 +202,5 @@ public InvokeReplacer pointcut(InvokeInfo invokeInfo) {
 					}
 				}
 		);
-		return fp;
 	}
 }

File: jodd-proxetta/src/test/java/jodd/proxetta/data/DateDao2.java
Patch:
@@ -53,8 +53,7 @@ public Object currentTime() {
 		long end = start;
 
 		try {
-			Object result = currentTime0();
-			return result;
+			return currentTime0();
 		}
 		catch (Exception e) {
 			throw e;

File: jodd-proxetta/src/test/java/jodd/proxetta/data/PerformanceMeasureProxyAdvice.java
Patch:
@@ -40,8 +40,7 @@ public Object execute() throws Exception {
 		long end = start;
 
 		try {
-			Object result = ProxyTarget.invoke();
-			return result;
+			return ProxyTarget.invoke();
 		}
 		catch (Exception e) {
 			throw e;

File: jodd-proxetta/src/test/java/jodd/proxetta/petite/data/PetiteHelper.java
Patch:
@@ -24,11 +24,10 @@ public static ProxyProxetta createProxyProxetta() {
 
         ProxyPointcut pointcut_logged = new MethodAnnotationPointcut(Logged.class);
         ProxyAspect aspect_logged = new ProxyAspect(LogProxyAdvice.class, pointcut_logged);
-
-        ProxyProxetta proxetta = ProxyProxetta.withAspects(aspect_logged);
+        
         //proxetta.setDebugFolder(SystemUtil.userHome() + "\\inka\\proxetta");
 
-        return proxetta;
+        return ProxyProxetta.withAspects(aspect_logged);
     }
 
 }

File: jodd-core/src/main/java/jodd/util/InExRules.java
Patch:
@@ -104,7 +104,7 @@ public boolean hasRules() {
 		if (rules == null) {
 			return false;
 		}
-		return rules.size() > 0;
+		return !rules.isEmpty();
 	}
 
 	/**

File: jodd-db/src/test/java/jodd/db/oom/tst/Enumerator.java
Patch:
@@ -32,7 +32,7 @@
 @DbTable
 public class Enumerator {
 
-	public static enum STATUS {
+	public enum STATUS {
 		ONE(1),
 		TWO(123),
 		THREE(222);

File: jodd-http/src/main/java/jodd/http/Buffer.java
Patch:
@@ -96,7 +96,7 @@ public Buffer append(Uploadable uploadable) {
 	 * Appends other buffer to this one.
 	 */
 	public Buffer append(Buffer buffer) {
-		if (buffer.list.size() == 0) {
+		if (buffer.list.isEmpty()) {
 			// nothing to append
 			return buffer;
 		}

File: jodd-http/src/main/java/jodd/http/ProxyInfo.java
Patch:
@@ -33,7 +33,7 @@ public class ProxyInfo {
 	/**
 	 * Proxy types.
 	 */
-	public static enum ProxyType {
+	public enum ProxyType {
 		NONE, HTTP, SOCKS4, SOCKS5
 	}
 

File: jodd-json/src/main/java/jodd/json/meta/JsonAnnotationManager.java
Patch:
@@ -269,13 +269,13 @@ private TypeData scanClassForAnnotations(Class type) {
 
 		String[] reals = null;
 
-		if (realNames.size() > 0) {
+		if (!realNames.isEmpty()) {
 			reals = realNames.toArray(new String[realNames.size()]);
 		}
 
 		String[] jsons = null;
-
-		if (jsonNames.size() > 0) {
+	
+		if (!jsonNames.isEmpty()) {
 			jsons = jsonNames.toArray(new String[jsonNames.size()]);
 		}
 

File: jodd-proxetta/src/test/java/jodd/proxetta/data/Hero.java
Patch:
@@ -33,7 +33,7 @@
 		enemies = {2,1000})
 public class Hero {
 
-	public static enum POWER {
+	public enum POWER {
 		STRENGTH,
 		XRAY,
 		SPEED {

File: jodd-lagarto/src/test/java/jodd/lagarto/LagartoParserTest.java
Patch:
@@ -193,7 +193,7 @@ public void tag(Tag tag) {
 			}
 
 			public void xml(CharSequence version, CharSequence encoding, CharSequence standalone) {
-				result.append("xml:").append(version).append(":").append(encoding).append(":").append(standalone);
+				result.append("xml:").append(version).append(':').append(encoding).append(':').append(standalone);
 				result.append(NEWLINE);
 			}
 

File: jodd-json/src/main/java/jodd/json/JsonParser.java
Patch:
@@ -885,10 +885,13 @@ protected Object parseObjectContent(Class targetType, Class valueKeyType, Class
 				// *** add to map
 				if (isTargetRealTypeMap) {
 					path.push(VALUES, key);
+
+					valueType = replaceWithMappedTypeForPath(valueType);
 				} else {
 					path.push(key);
 				}
 
+
 				value = parseValue(valueType, null, null);
 
 				path.pop();

File: jodd-json/src/test/java/jodd/json/JSONDeserializerTest.java
Patch:
@@ -218,6 +218,7 @@ public void testNoClassHintsForCollections() {
 				.map("secretIdentity", SecretIdentity.class)
 				.parse(json, Hero.class);
 
+		assertEquals("Fortress of Solitude", jsonSuperMan.getLair().getName());
 		assertHeroHasSuperPowers(jsonSuperMan);
 	}
 

File: jodd-bean/src/test/java/jodd/typeconverter/ConvertTest.java
Patch:
@@ -149,7 +149,7 @@ public void testDefaultConversion() {
 	public void testChangeConverter() {
 		String[] array = new String[]{"true", "false", "yeah"};
 
-		boolean barr[];
+		boolean[] barr;
 
 		try {
 			barr = Convert.toBooleanArray(array);

File: jodd-core/src/main/java/jodd/datetime/JDateTime.java
Patch:
@@ -367,8 +367,8 @@ private int calcDayOfWeek() {
 		//return (jd + 1) % 7;		// return 0 (Sunday), 1 (Monday),...
 	}
 
-	private static final int NUM_DAYS[] = {-1, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};		// 1-based
-	private static final int LEAP_NUM_DAYS[] = {-1, 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335};	// 1-based
+	private static final int[] NUM_DAYS = {-1, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};        // 1-based
+	private static final int[] LEAP_NUM_DAYS = {-1, 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335};    // 1-based
 
 	/**
 	 * Calculates day of year.

File: jodd-core/src/main/java/jodd/io/DebugOutputStream.java
Patch:
@@ -82,12 +82,12 @@ public void write(int b) throws IOException {
 	}
 
 	@Override
-	public void write(byte b[]) throws IOException {
+	public void write(byte[] b) throws IOException {
 		super.write(b);
 	}
 
 	@Override
-	public void write(byte b[], int off, int len) throws IOException {
+	public void write(byte[] b, int off, int len) throws IOException {
 		if (passThrough) {
 			super.write(b, off, len);
 		}

File: jodd-core/src/main/java/jodd/io/NetUtil.java
Patch:
@@ -72,7 +72,7 @@ public static String resolveIpAddress(String hostname) {
 	 */
 	public static int getIpAsInt(String ipAddress) {
 		int ipIntValue = 0;
-		String tokens[] = StringUtil.splitc(ipAddress, '.');
+		String[] tokens = StringUtil.splitc(ipAddress, '.');
 		for (String token : tokens) {
 			if (ipIntValue > 0) {
 				ipIntValue <<= 8;
@@ -108,7 +108,7 @@ public static boolean validateHostIp(String host) {
 		}
 
 		int hitDots = 0;
-		char data[] = host.toCharArray();
+		char[] data = host.toCharArray();
 		for (int i = 0; i < data.length; i++) {
 			char c = data[i];
 			int b = 0;

File: jodd-core/src/main/java/jodd/io/StreamUtil.java
Patch:
@@ -94,7 +94,7 @@ public static int copy(InputStream input, OutputStream output) throws IOExceptio
 	public static int copy(InputStream input, OutputStream output, int byteCount) throws IOException {
 		int bufferSize = (byteCount > ioBufferSize) ? ioBufferSize : byteCount;
 
-		byte buffer[] = new byte[bufferSize];
+		byte[] buffer = new byte[bufferSize];
 		int count = 0;
 		int read;
 		while (byteCount > 0) {
@@ -162,7 +162,7 @@ public static int copy(Reader input, Writer output) throws IOException {
 	public static int copy(Reader input, Writer output, int charCount) throws IOException {
 		int bufferSize = (charCount > ioBufferSize) ? ioBufferSize : charCount;
 
-		char buffer[] = new char[bufferSize];
+		char[] buffer = new char[bufferSize];
 		int count = 0;
 		int read;
 		while (charCount > 0) {
@@ -224,7 +224,7 @@ public static void copy(Reader input, OutputStream output, String encoding, int
 	 */
 	public static byte[] readAvailableBytes(InputStream in) throws IOException {
 		int l = in.available();
-		byte byteArray[] = new byte[l];
+		byte[] byteArray = new byte[l];
 		int i = 0, j;
 		while ((i < l) && (j = in.read(byteArray, i, l - i)) >= 0) {
 			i +=j;

File: jodd-core/src/main/java/jodd/io/UnicodeInputStream.java
Patch:
@@ -101,7 +101,7 @@ protected void init() throws IOException {
 
 			// DETECT MODE
 
-			byte bom[] = new byte[MAX_BOM_SIZE];
+			byte[] bom = new byte[MAX_BOM_SIZE];
 			int n = internalInputStream.read(bom, 0, bom.length);
 			int unread;
 
@@ -151,7 +151,7 @@ protected void init() throws IOException {
 			}
 
 			if (bom != null) {
-				byte fileBom[] = new byte[bom.length];
+				byte[] fileBom = new byte[bom.length];
 				int n = internalInputStream.read(fileBom, 0, bom.length);
 
 				boolean bomDetected = true;

File: jodd-core/src/main/java/jodd/util/LocaleUtil.java
Patch:
@@ -123,7 +123,7 @@ public static String resolveLocaleCode(Locale locale) {
 	 * Decodes locale code in string array that can be used for <code>Locale</code> constructor.
 	 */
 	public static String[] decodeLocaleCode(String localeCode) {
-		String result[] = new String[3];
+		String[] result = new String[3];
 		String[] data = StringUtil.splitc(localeCode, '_');
 		result[0] = data[0];
 		result[1] = result[2] = StringPool.EMPTY;

File: jodd-core/src/main/java/jodd/util/PlatformInternal.java
Patch:
@@ -137,7 +137,7 @@ static char[] unsafeGetChars(String string) {
 				return value;
 
 			} else {
-				char result[] = new char[count];
+				char[] result = new char[count];
 				System.arraycopy(value, offset, result, 0, count);
 				return result;
 			}

File: jodd-core/src/main/java/jodd/util/RandomString.java
Patch:
@@ -138,7 +138,7 @@ public String randomRanges(int count, char... ranges) {
 		}
 		int i = 0;
 		int len = 0;
-		int lens[] = new int[ranges.length];
+		int[] lens = new int[ranges.length];
 		while (i < ranges.length) {
 			int gap = ranges[i + 1] - ranges[i] + 1;
 			len += gap;

File: jodd-core/src/main/java/jodd/util/collection/ArrayEnumeration.java
Patch:
@@ -34,15 +34,15 @@
  */
 public class ArrayEnumeration<E> implements Enumeration<E>, Serializable {
 
-	private E array[];
+	private E[] array;
 	private int ndx;
 	private int endNdx;
 
-	public ArrayEnumeration(E arr[]) {
+	public ArrayEnumeration(E[] arr) {
 		this(arr, 0, arr.length);
 	}
 
-	public ArrayEnumeration(E arr[], int offset, int length) {
+	public ArrayEnumeration(E[] arr, int offset, int length) {
 		array = arr;
 		ndx = offset;
 		this.endNdx = offset + length;

File: jodd-core/src/test/java/jodd/io/FileUtilTest.java
Patch:
@@ -78,7 +78,7 @@ public void testString() {
 		assertEquals(s, s2);
 
 		// test unicode chars (i.e. greater then 255)
-		char buf[] = s.toCharArray();
+		char[] buf = s.toCharArray();
 		buf[0] = 256;
 		s = new String(buf);
 
@@ -108,7 +108,7 @@ public void testString() {
 	public void testUnicodeString() {
 		String s = "This is a test file\nIt only has\nthree lines!!";
 
-		char buf[] = s.toCharArray();
+		char[] buf = s.toCharArray();
 		buf[0] = 256;
 		s = new String(buf);
 

File: jodd-http/src/test/java/jodd/http/NanoHTTPD.java
Patch:
@@ -401,7 +401,7 @@ else if (splitbyte==0 || size == 0x7FFFFFFFFFFFFFFFl)
 					{
 						// Handle application/x-www-form-urlencoded
 						String postLine = "";
-						char pbuf[] = new char[512];
+						char[] pbuf = new char[512];
 						int read = in.read(pbuf);
 						while ( read >= 0 && !postLine.endsWith("\r\n") )
 						{

File: jodd-lagarto/src/main/java/jodd/lagarto/form/FormProcessorVisitor.java
Patch:
@@ -152,7 +152,7 @@ else if (tagTypeName.equals(CHECKBOX)) {
 
 			if (valueObject.getClass().isArray()) {
 				// checkbox group
-				String vs[] = StringUtil.toStringArray(valueObject);
+				String[] vs = StringUtil.toStringArray(valueObject);
 				for (String vsk : vs) {
 					if ((vsk != null) && (vsk.equals(tagValue))) {
 						tag.setAttribute(CHECKED, null);
@@ -243,7 +243,7 @@ private void processOptionOpenTag(Tag tag) {
 		tagValue = tagValue.toString();
 
 		if (vals.getClass().isArray()) {
-			String vs[] = StringUtil.toStringArray(vals);
+			String[] vs = StringUtil.toStringArray(vals);
 			for (String vsk : vs) {
 				if ((vsk != null) && (vsk.equals(tagValue))) {
 					tag.setAttribute(SELECTED, null);

File: jodd-lagarto/src/test/java/jodd/lagarto/dom/DomTreeTest.java
Patch:
@@ -124,7 +124,7 @@ public void testInsertRemoveDeepLevel() {
 		assertEquals(3, html.getChildElementsCount());
 		assertEquals(3, html.getChildElementsCount("div"));
 
-		Node node[] = html.getChildNodes();
+		Node[] node = html.getChildNodes();
 		assertEquals(div1, node[0]);
 		assertEquals(div2, node[1]);
 		assertEquals(div3, node[2]);

File: jodd-proxetta/src/test/java/jodd/proxetta/InvReplTest.java
Patch:
@@ -47,7 +47,7 @@ public void testReplacement() throws IllegalAccessException, InstantiationExcept
 		InvokeProxetta proxetta = initProxetta();
 
 		String className = One.class.getCanonicalName();
-		byte klazz[] = proxetta.builder(One.class).create();
+		byte[] klazz = proxetta.builder(One.class).create();
 		//FileUtil.writeBytes("/Users/igor/OneClone.class", klazz);
 
 		FastByteArrayOutputStream fbaos = new FastByteArrayOutputStream();

File: jodd-servlet/src/main/java/jodd/servlet/filter/GzipResponseStream.java
Patch:
@@ -164,7 +164,7 @@ public void write(int b) throws IOException {
 	 * output stream.
 	 */
 	@Override
-	public void write(byte b[]) throws IOException {
+	public void write(byte[] b) throws IOException {
 		write(b, 0, b.length);
 	}
 
@@ -178,7 +178,7 @@ public void write(byte b[]) throws IOException {
 	 * @param len    number of bytes to be written
 	 */
 	@Override
-	public void write(byte b[], int off, int len) throws IOException {
+	public void write(byte[] b, int off, int len) throws IOException {
 
 		if (closed) {
 			throw new IOException("Cannot write to a closed output stream");
@@ -213,7 +213,7 @@ public void write(byte b[], int off, int len) throws IOException {
 	 * Writes byte array to gzip output stream. Creates new <code>GZIPOutputStream</code>
 	 * if not created yet. Also sets the "Content-Encoding" header.
 	 */
-	public void writeToGZip(byte b[], int off, int len) throws IOException {
+	public void writeToGZip(byte[] b, int off, int len) throws IOException {
 		if (gzipstream == null) {
 			gzipstream = new GZIPOutputStream(output);
 			response.setHeader("Content-Encoding", "gzip");

File: jodd-proxetta/src/test/java/jodd/JoddProxettaTest.java
Patch:
@@ -40,10 +40,10 @@ public void testLoadedModules() {
 		assertFalse(Jodd.isModuleLoaded(MADVOC));
 		assertFalse(Jodd.isModuleLoaded(MAIL));
 		assertTrue(Jodd.isModuleLoaded(PETITE));
-		assertFalse(Jodd.isModuleLoaded(PROPS));
+		assertTrue(Jodd.isModuleLoaded(PROPS));
 		assertTrue(Jodd.isModuleLoaded(PROXETTA));
-		assertFalse(Jodd.isModuleLoaded(SERVLET));
-		assertFalse(Jodd.isModuleLoaded(UPLOAD));
+		assertTrue(Jodd.isModuleLoaded(SERVLET));
+		assertTrue(Jodd.isModuleLoaded(UPLOAD));
 		assertFalse(Jodd.isModuleLoaded(VTOR));
 	}
 }
\ No newline at end of file

File: jodd-proxetta/src/test/java/jodd/JoddProxettaTest.java
Patch:
@@ -39,7 +39,7 @@ public void testLoadedModules() {
 		assertFalse(Jodd.isModuleLoaded(HTTP));
 		assertFalse(Jodd.isModuleLoaded(MADVOC));
 		assertFalse(Jodd.isModuleLoaded(MAIL));
-		assertFalse(Jodd.isModuleLoaded(PETITE));
+		assertTrue(Jodd.isModuleLoaded(PETITE));
 		assertFalse(Jodd.isModuleLoaded(PROPS));
 		assertTrue(Jodd.isModuleLoaded(PROXETTA));
 		assertFalse(Jodd.isModuleLoaded(SERVLET));

File: jodd-json/src/test/java/jodd/json/model/AccountType.java
Patch:
@@ -26,5 +26,5 @@
 package jodd.json.model;
 
 public enum AccountType {
-	Checking, Savings
+	CHECKING, SAVINGS
 }

File: jodd-core/src/main/java/jodd/util/SystemUtil.java
Patch:
@@ -436,7 +436,7 @@ public static boolean isHostSolaris() {
 	 * Returns <code>true</code> if host is AIX.
 	 */
 	public static boolean isHostAix() {
-		return osName().toUpperCase().equals("AIX");
+		return osName().equalsIgnoreCase("AIX");
 	}
 
 	/**

File: jodd-madvoc/src/main/java/jodd/madvoc/MadvocResponseWrapper.java
Patch:
@@ -68,7 +68,7 @@ public MadvocResponseWrapper(HttpServletResponse response) {
 
 	@Override
 	public void setHeader(String name, String value) {
-		if (name.toLowerCase().equals(CONTENT_TYPE)) {
+		if (name.equalsIgnoreCase(CONTENT_TYPE)) {
 			setContentType(value);
 		} else {
 			super.setHeader(name, value);
@@ -77,7 +77,7 @@ public void setHeader(String name, String value) {
 
 	@Override
 	public void addHeader(String name, String value) {
-		if (name.toLowerCase().equals(CONTENT_TYPE)) {
+		if (name.equalsIgnoreCase(CONTENT_TYPE)) {
 			setContentType(value);
 		} else {
 			super.addHeader(name, value);

File: jodd-vtor/src/test/java/jodd/vtor/VtorTest.java
Patch:
@@ -128,7 +128,7 @@ public void testUseProfile_withTwoDifferentValues() throws Exception {
     @Test
     public void testUseProfiles_withNullValue() throws Exception {
         Vtor vtor = new Vtor();
-        vtor.useProfiles((String) null);
+        vtor.useProfiles(null);
         assertNull("list of enabled profiles must be null when add only null profile", vtor.enabledProfiles);
     }
 

File: jodd-http/src/main/java/jodd/http/HttpRequest.java
Patch:
@@ -332,7 +332,7 @@ public HttpRequest path(String path) {
 	 * we are forcing usage of multipart request.
 	 */
 	public HttpRequest multipart(boolean multipart) {
-		this.multipart = true;
+		this.multipart = multipart;
 		return this;
 	}
 

File: jodd-json/src/main/java/jodd/json/TypeJsonSerializer.java
Patch:
@@ -32,7 +32,9 @@ public interface TypeJsonSerializer<T> {
 
 	/**
 	 * Serializes a value and writes a JSON content.
+	 * Returns <code>true</code> if content was written.
+	 * Returns <code>false</code> if content for some reason was not written.
 	 */
-	public void serialize(JsonContext jsonContext, T value);
+	public boolean serialize(JsonContext jsonContext, T value);
 
 }
\ No newline at end of file

File: jodd-json/src/main/java/jodd/json/impl/BooleanJsonSerializer.java
Patch:
@@ -33,7 +33,9 @@
  */
 public class BooleanJsonSerializer implements TypeJsonSerializer<Boolean> {
 
-	public void serialize(JsonContext jsonContext, Boolean value) {
+	@Override
+	public boolean serialize(JsonContext jsonContext, Boolean value) {
 		jsonContext.write(value.toString());
+		return true;
 	}
 }
\ No newline at end of file

File: jodd-json/src/main/java/jodd/json/impl/CharSequenceJsonSerializer.java
Patch:
@@ -33,7 +33,9 @@
  */
 public class CharSequenceJsonSerializer implements TypeJsonSerializer<CharSequence> {
 
-	public void serialize(JsonContext jsonContext, CharSequence value) {
+	@Override
+	public boolean serialize(JsonContext jsonContext, CharSequence value) {
 		jsonContext.writeString(value.toString());
+		return true;
 	}
 }
\ No newline at end of file

File: jodd-json/src/main/java/jodd/json/impl/CharacterJsonSerializer.java
Patch:
@@ -33,7 +33,9 @@
  */
 public class CharacterJsonSerializer implements TypeJsonSerializer<Character> {
 
-	public void serialize(JsonContext jsonContext, Character value) {
+	@Override
+	public boolean serialize(JsonContext jsonContext, Character value) {
 		jsonContext.writeString(value.toString());
+		return true;
 	}
 }
\ No newline at end of file

File: jodd-json/src/main/java/jodd/json/impl/ClassJsonSerializer.java
Patch:
@@ -33,7 +33,9 @@
  */
 public class ClassJsonSerializer implements TypeJsonSerializer<Class> {
 
-	public void serialize(JsonContext jsonContext, Class type) {
+	@Override
+	public boolean serialize(JsonContext jsonContext, Class type) {
 		jsonContext.writeString(type.getName());
+		return true;
 	}
 }
\ No newline at end of file

File: jodd-json/src/main/java/jodd/json/impl/DateJsonSerializer.java
Patch:
@@ -35,7 +35,9 @@
  */
 public class DateJsonSerializer implements TypeJsonSerializer<Date> {
 
-	public void serialize(JsonContext jsonContext, Date date) {
+	@Override
+	public boolean serialize(JsonContext jsonContext, Date date) {
 		jsonContext.write(Long.toString(date.getTime()));
+		return true;
 	}
 }
\ No newline at end of file

File: jodd-json/src/main/java/jodd/json/impl/EnumJsonSerializer.java
Patch:
@@ -33,7 +33,9 @@
  */
 public class EnumJsonSerializer implements TypeJsonSerializer<Enum> {
 
-	public void serialize(JsonContext jsonContext, Enum value) {
+	@Override
+	public boolean serialize(JsonContext jsonContext, Enum value) {
 		jsonContext.writeString(value.name());
+		return true;
 	}
 }
\ No newline at end of file

File: jodd-json/src/main/java/jodd/json/impl/FileJsonSerializer.java
Patch:
@@ -62,7 +62,7 @@ public FileJsonSerializer(Type serializationType) {
 
 
 	@Override
-	public void serialize(JsonContext jsonContext, File file) {
+	public boolean serialize(JsonContext jsonContext, File file) {
 		switch (serializationType) {
 			case PATH:
 				jsonContext.writeString(file.getAbsolutePath());
@@ -88,5 +88,6 @@ public void serialize(JsonContext jsonContext, File file) {
 			default:
 				throw new JsonException("Invalid type");
 		}
+		return true;
 	}
 }
\ No newline at end of file

File: jodd-json/src/main/java/jodd/json/impl/JDateTimeSerializer.java
Patch:
@@ -34,7 +34,9 @@
  */
 public class JDateTimeSerializer implements TypeJsonSerializer<JDateTime> {
 
-	public void serialize(JsonContext jsonContext, JDateTime value) {
+	@Override
+	public boolean serialize(JsonContext jsonContext, JDateTime value) {
 		jsonContext.write(String.valueOf(value.getTimeInMillis()));
+		return true;
 	}
 }
\ No newline at end of file

File: jodd-json/src/main/java/jodd/json/impl/MapJsonSerializer.java
Patch:
@@ -35,6 +35,7 @@
  */
 public class MapJsonSerializer extends KeyValueJsonSerializer<Map<?, ?>> {
 
+	@Override
 	public void serializeValue(JsonContext jsonContext, Map<?, ?> map) {
 		jsonContext.writeOpenObject();
 

File: jodd-json/src/main/java/jodd/json/impl/NumberJsonSerializer.java
Patch:
@@ -30,8 +30,10 @@
 
 public class NumberJsonSerializer implements TypeJsonSerializer<Number> {
 
-	public void serialize(JsonContext jsonContext, Number value) {
+	@Override
+	public boolean serialize(JsonContext jsonContext, Number value) {
 		jsonContext.write(value.toString());
+		return true;
 	}
 
 }
\ No newline at end of file

File: jodd-json/src/main/java/jodd/json/impl/ObjectJsonSerializer.java
Patch:
@@ -34,6 +34,7 @@
  */
 public class ObjectJsonSerializer extends ValueJsonSerializer<Object> {
 
+	@Override
 	public void serializeValue(final JsonContext jsonContext, Object value) {
 		jsonContext.writeOpenObject();
 

File: jodd-petite/src/main/java/jodd/petite/PetiteBeans.java
Patch:
@@ -550,7 +550,7 @@ public void registerPetiteDestroyMethods(String beanName, String... destroyMetho
 	 * @param providerName provider name
 	 * @param beanName bean name
 	 * @param methodName instance method name
-	 * @param arguments method argument types, may be <code>null</code>
+	 * @param arguments method argument types
 	 */
 	public void registerPetiteProvider(String providerName, String beanName, String methodName, Class[] arguments) {
 		BeanDefinition beanDefinition = lookupBeanDefinition(beanName);
@@ -579,7 +579,7 @@ public void registerPetiteProvider(String providerName, String beanName, String
 	 * @param providerName provider name
 	 * @param type class type
 	 * @param staticMethodName static method name
-	 * @param arguments method argument types, may be <code>null</code>
+	 * @param arguments method argument types
 	 */
 	public void registerPetiteProvider(String providerName, Class type, String staticMethodName, Class[] arguments) {
 		ClassDescriptor cd = ClassIntrospector.lookup(type);

File: jodd-petite/src/main/java/jodd/petite/PetiteRegistry.java
Patch:
@@ -27,6 +27,7 @@
 
 import jodd.petite.meta.InitMethodInvocationStrategy;
 import jodd.petite.scope.Scope;
+import jodd.util.ReflectUtil;
 
 /**
  * Petite registry helps with manual registration
@@ -446,7 +447,7 @@ public BeanProvider method(String methodName) {
 		 */
 		public BeanProvider args(Class... methodArgsTypes) {
 			if (methodArgsTypes.length == 0) {
-				methodArgsTypes = null;
+				methodArgsTypes = ReflectUtil.NO_PARAMETERS;
 			}
 			this.methodArgsTypes = methodArgsTypes;
 			return this;

File: jodd-bean/src/main/java/jodd/typeconverter/TypeConverterManager.java
Patch:
@@ -86,8 +86,8 @@ public static <T> T convertType(Object value, Class<T> destinationType) {
 	/**
 	 * Special conversion to collections, when component type is known.
 	 */
-	public static <T> Collection<T> convertToCollection(Object value, Class<? extends Collection<T>> destinationType, Class componentType) {
-		return TYPE_CONVERTER_MANAGER_BEAN.convertToCollection(value, destinationType, componentType);
+	public static <T> T convertToCollection(Object value, Class<? extends Collection> destinationType, Class<?> componentType) {
+		return (T) TYPE_CONVERTER_MANAGER_BEAN.convertToCollection(value, destinationType, componentType);
 	}
 
 }
\ No newline at end of file

File: jodd-bean/src/main/java/jodd/typeconverter/TypeConverterManagerBean.java
Patch:
@@ -353,7 +353,7 @@ public <T> T convertType(Object value, Class<T> destinationType) {
 	 * when component type is known.
 	 */
 	@SuppressWarnings("unchecked")
-	public <T> Collection<T> convertToCollection(Object value, Class<? extends Collection<T>> destinationType, Class componentType) {
+	public <T> Collection<T> convertToCollection(Object value, Class<? extends Collection> destinationType, Class componentType) {
 		if (value == null) {
 			return null;
 		}

File: jodd-json/src/main/java/jodd/json/TypeJsonSerializerMap.java
Patch:
@@ -39,6 +39,7 @@
 import jodd.json.impl.DateJsonSerializer;
 import jodd.json.impl.DoubleArrayJsonSerializer;
 import jodd.json.impl.EnumJsonSerializer;
+import jodd.json.impl.FileJsonSerializer;
 import jodd.json.impl.FloatArrayJsonSerializer;
 import jodd.json.impl.IntArrayJsonSerializer;
 import jodd.json.impl.IterableJsonSerializer;
@@ -49,6 +50,7 @@
 import jodd.json.impl.ObjectJsonSerializer;
 import jodd.util.collection.ClassMap;
 
+import java.io.File;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.util.Arrays;
@@ -160,6 +162,7 @@ protected Long get(Long[] array, int index) {
 		map.put(Calendar.class, new CalendarJsonSerializer());
 		map.put(JDateTime.class, new JDateTimeSerializer());
 		map.put(Enum.class, new EnumJsonSerializer());
+		map.put(File.class, new FileJsonSerializer(FileJsonSerializer.Type.PATH));
 
 		jsonSerializer = new CharacterJsonSerializer();
 

File: jodd-json/src/main/java/jodd/json/impl/EnumJsonSerializer.java
Patch:
@@ -31,7 +31,7 @@
 /**
  * Enum serializer.
  */
-public class EnumJsonSerializer implements TypeJsonSerializer<Enum>{
+public class EnumJsonSerializer implements TypeJsonSerializer<Enum> {
 
 	public void serialize(JsonContext jsonContext, Enum value) {
 		jsonContext.writeString(value.name());

File: jodd-petite/src/test/java/jodd/petite/ParamTest.java
Patch:
@@ -56,6 +56,7 @@ public void testRefParams() {
 		pc.defineParameter("name", "${name${num}}");
 		pc.defineParameter("num", "2");
 		pc.defineParameter("name2", "FOONAME");
+		pc.defineParameter("FOONAME", "aaa");
 
 		Foo foo = (Foo) pc.getBean("foo");
 		assertNotNull(foo);

File: jodd-http/src/main/java/jodd/http/HttpMultiMap.java
Patch:
@@ -42,7 +42,7 @@ public final class HttpMultiMap<V> implements Iterable<Map.Entry<String, V>>  {
 	private static final int BUCKET_SIZE = 31;
 
 	@SuppressWarnings("unchecked")
-	private final MapEntry<V>[] entries = new MapEntry[BUCKET_SIZE];
+	private final MapEntry<V>[] entries = new MapEntry[BUCKET_SIZE + 1];
 	private final MapEntry<V> head = new MapEntry<>(-1, null, null);
 
 	public HttpMultiMap() {

File: jodd-http/src/test/java/jodd/http/Echo2Servlet.java
Patch:
@@ -25,15 +25,18 @@
 
 package jodd.http;
 
+import javax.servlet.annotation.MultipartConfig;
 import javax.servlet.http.HttpServletRequest;
 import java.io.IOException;
 
+@MultipartConfig
 public class Echo2Servlet extends EchoServlet {
 
 	protected void readAll(HttpServletRequest req) throws IOException {
 		ref.queryString = req.getQueryString();
 		ref.header = copyHeaders(req);
 		ref.params = copyParams(req);
+		ref.parts = copyParts(req);
 	}
 
 }
\ No newline at end of file

File: jodd-mail/src/main/java/jodd/mail/MailAddress.java
Patch:
@@ -54,7 +54,7 @@ public MailAddress(String address) {
 		}
 
 		this.email = address.substring(ndx + 1, address.length() - 1);
-		this.personalName = address.substring(0, ndx - 1).trim();
+		this.personalName = address.substring(0, ndx).trim();
 	}
 
 	/**

File: jodd-props/src/main/java/jodd/props/Props.java
Patch:
@@ -332,8 +332,6 @@ public void setValue(final String key, final String value) {
 		setValue(key, value, null);
 	}
 
-	// ---------------------------------------------------------------- extract
-
 	/**
 	 * Sets value on some profile.
 	 */
@@ -346,6 +344,8 @@ public void setValue(final String key, final String value, final String profile)
 		initialized = false;
 	}
 
+	// ---------------------------------------------------------------- extract
+
 	/**
 	 * Extract base props (no profiles).
 	 */

File: jodd-json/src/main/java/jodd/json/JsonParserBase.java
Patch:
@@ -62,7 +62,7 @@ protected Object newObjectInstance(Class targetType) {
 
 		CtorDescriptor ctorDescriptor = cd.getDefaultCtorDescriptor(true);
 		if (ctorDescriptor == null) {
-			throw new JsonException("Default ctor not found for: " + targetType.getClass().getName());
+			throw new JsonException("Default ctor not found for: " + targetType.getName());
 		}
 
 		try {

File: jodd-madvoc/src/testInt/java/jodd/madvoc/TomcatTestServer.java
Patch:
@@ -50,6 +50,9 @@ protected void prepareWebApplication() throws Exception {
 
 		URL webXmlUrl = TomcatTestServer.class.getResource(webXml);
 		File webXmlFile = FileUtil.toFile(webXmlUrl);
+		if (webXmlFile == null) {
+			throw new Exception("Test resource files can not be found.");
+		}
 		FileUtil.copyFile(webXmlFile, new File(webInfFolder, "web.xml"));
 
 		// jsp

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/InvokeReplacerMethodAdapter.java
Patch:
@@ -250,7 +250,7 @@ public void visitMethodInsn(int opcode, String owner, String name, String desc,
 			super.mv.visitVarInsn(ALOAD, 0);
 		}
 
-		super.visitMethodInsn(INVOKESTATIC, owner, name, desc, isInterface);
+		super.visitMethodInsn(INVOKESTATIC, owner, name, desc, false);
 	}
 
 	@Override

File: jodd-proxetta/src/test/java/jodd/proxetta/WrapperTest.java
Patch:
@@ -111,7 +111,7 @@ public boolean apply(MethodInfo methodInfo) {
 			}
 		}));
 
-//		proxetta.setDebugFolder("d:\\");
+		//proxetta.setDebugFolder("/Users/igor");
 
 		// wrapper over INTERFACE
 		// resulting object has ONE interface

File: jodd-bean/src/main/java/jodd/introspector/MethodDescriptor.java
Patch:
@@ -49,7 +49,7 @@ public MethodDescriptor(ClassDescriptor classDescriptor, Method method) {
 			Type type = params[i];
 			rawParameterTypes[i] = ReflectUtil.getRawType(type, classDescriptor.getType());
 			if (rawParameterComponentTypes != null) {
-				rawParameterComponentTypes[i] = ReflectUtil.getComponentType(genericParams[i], classDescriptor.getType());
+				rawParameterComponentTypes[i] = ReflectUtil.getComponentType(genericParams[i], classDescriptor.getType(), -1);
 			}
 		}
 	}

File: jodd-core/src/main/java/jodd/mutable/ValueHolder.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * Generic mutable value holder for holding objects.
  */
-public class ValueHolder<T> {
+public class ValueHolder<T> implements IsValue<T>{
 
 	protected T value;
 

File: jodd-http/src/main/java/jodd/http/HttpConnection.java
Patch:
@@ -29,7 +29,7 @@ public interface HttpConnection {
 	/**
 	 * Sets the timeout for connections, in milliseconds. With this option set to a non-zero timeout,
 	 * connection will block for only this amount of time. If the timeout expires, an Exception is raised.
-	 * The timeout must be > 0. A timeout of zero is interpreted as an infinite timeout.
+	 * The timeout must be &gt; 0. A timeout of zero is interpreted as an infinite timeout.
 	 */
 	void setTimeout(int milliseconds);
 

File: jodd-core/src/main/java/jodd/util/SystemUtil.java
Patch:
@@ -310,7 +310,9 @@ public static boolean isHostLinux() {
 	 * Returns <code>true</code> if host is a general unix.
 	 */
 	public static boolean isHostUnix() {
-		return File.pathSeparator.equals(StringPool.COLON);
+		boolean unixVariant = isHostAix() | isHostLinux() | isHostMac() | isHostSolaris();
+
+		return (!unixVariant && File.pathSeparator.equals(StringPool.COLON));
 	}
 
 	/**

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/TargetClassInfoReader.java
Patch:
@@ -27,6 +27,7 @@
 import jodd.io.StreamUtil;
 import jodd.asm.EmptyClassVisitor;
 import jodd.asm.EmptyMethodVisitor;
+import jodd.util.StringPool;
 
 /**
  * Reads info from target class.
@@ -116,7 +117,7 @@ public void visit(int version, int access, String name, String signature, String
 		this.thisReference = name;
 		this.superName = superName;
 		this.nextSupername = superName;
-		this.targetPackage = name.substring(0, lastSlash).replace('/', '.');
+		this.targetPackage = lastSlash == -1 ? StringPool.EMPTY : name.substring(0, lastSlash).replace('/', '.');
 		this.targetClassname = name.substring(lastSlash + 1);
 		this.hierarchyLevel = 1;
 

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/WorkData.java
Patch:
@@ -3,6 +3,7 @@
 package jodd.proxetta.asm;
 
 import jodd.asm5.ClassVisitor;
+import jodd.util.StringPool;
 
 import java.util.List;
 import java.util.ArrayList;
@@ -46,7 +47,7 @@ public boolean isWrapper() {
 	 */
 	public void init(String name, String superName, String suffix, String reqProxyClassName) {
 		int lastSlash = name.lastIndexOf('/');
-		this.targetPackage = name.substring(0, lastSlash).replace('/', '.');
+		this.targetPackage = lastSlash == -1 ? StringPool.EMPTY : name.substring(0, lastSlash).replace('/', '.');
 		this.targetClassname = name.substring(lastSlash + 1);
 		this.nextSupername = superName;
 		this.superName = name;

File: jodd-proxetta/src/test/java/jodd/proxetta/GenericsTest.java
Patch:
@@ -49,7 +49,7 @@ public void testClassesWithGenericsAsReturnValueWrapper() {
 	public void testClassesWithGenericsAsReturnValueProxy() {
 		try {
 			ProxyAspect aspect = new ProxyAspect(DelegateAdvice.class);
-			ProxyProxetta proxetta = ProxyProxetta.withAspects(aspect).setDebugFolder("/Users/igor");
+			ProxyProxetta proxetta = ProxyProxetta.withAspects(aspect);
 			ProxyProxettaBuilder builder = proxetta.builder(Foo.class);
 			builder.newInstance();
 		}

File: jodd-proxetta/src/main/java/jodd/asm/AsmUtil.java
Patch:
@@ -100,7 +100,7 @@ public static String typedesc2ClassName(String desc) {
 					throw new IllegalArgumentException(INVALID_BASE_TYPE + desc);
 				}
 				break;
-			case 'L': className = className.substring(1, className.length() - 1);
+			case 'L': className = className.substring(1, className.length() - 1); break;
 			case '[':
 				// uses less-known feature of class loaders for loading array types
 				// using bytecode-like signatures.

File: jodd-json/src/test/java/jodd/json/CustomAnnotationTest.java
Patch:
@@ -48,7 +48,7 @@ public void testAnnNameWithClass() {
 
 		String json = new JsonSerializer().setClassMetadataName("class").serialize(location);
 
-		assertEquals("{\"class\":\"jodd.json.mock.LocationAlt\",\"lat\":65,\"lng\":12}", json);
+		assertEquals("{\"lat\":65,\"lng\":12}", json);
 
 		LocationAlt jsonLocation = new JsonParser().setClassMetadataName("class").parse(json, LocationAlt.class);
 

File: jodd-json/src/test/java/jodd/json/JSON2.java
Patch:
@@ -15,6 +15,8 @@
 @Target({ElementType.FIELD, ElementType.METHOD, ElementType.TYPE})
 public @interface JSON2 {
 
+	public boolean strict() default false;
+
 	public String name() default StringPool.EMPTY;
 
 }
\ No newline at end of file

File: jodd-json/src/test/java/jodd/json/mock/LocationAlt.java
Patch:
@@ -4,6 +4,7 @@
 
 import jodd.json.JSON2;
 
+@JSON2(strict = true)
 public class LocationAlt {
 
 	@JSON2(name="lng")

File: jodd-json/src/main/java/jodd/json/JoddJson.java
Patch:
@@ -21,7 +21,7 @@ public class JoddJson {
 	/**
 	 * Default JSON type serializers.
 	 */
-	public static TypeJsonSerializerMap defaultSerializers = new TypeJsonSerializerMap(true);
+	public static TypeJsonSerializerMap defaultSerializers = new TypeJsonSerializerMap();
 
 	/**
 	 * Specifies if 'class' metadata is used. When set, class metadata

File: jodd-json/src/main/java/jodd/json/JsonSerializer.java
Patch:
@@ -50,7 +50,7 @@ public JsonSerializer use(String pathString, TypeJsonSerializer typeJsonSerializ
 	 */
 	public JsonSerializer use(Class type, TypeJsonSerializer typeJsonSerializer) {
 		if (typeSerializersMap == null) {
-			typeSerializersMap = new TypeJsonSerializerMap(false);
+			typeSerializersMap = new TypeJsonSerializerMap(JoddJson.defaultSerializers);
 		}
 
 		typeSerializersMap.register(type, typeJsonSerializer);

File: jodd-http/src/test/java/jodd/http/RawTest.java
Patch:
@@ -59,6 +59,7 @@ public void testRawResponse4() throws IOException {
 		String fileContent = FileUtil.readString(data.getFile());
 
 		fileContent = StringUtil.replace(fileContent, "\n", "\r\n");
+		fileContent = StringUtil.replace(fileContent, "\r\r\n", "\r\n");
 
 		HttpResponse response = HttpResponse.readFrom(new ByteArrayInputStream(fileContent.getBytes("UTF-8")));
 
@@ -78,6 +79,7 @@ public void testRawResponse5() throws IOException {
 		String fileContent = FileUtil.readString(data.getFile());
 
 		fileContent = StringUtil.replace(fileContent, "\n", "\r\n");
+		fileContent = StringUtil.replace(fileContent, "\r\r\n", "\r\n");
 
 		HttpResponse response = HttpResponse.readFrom(new ByteArrayInputStream(fileContent.getBytes("UTF-8")));
 

File: jodd-http/src/main/java/jodd/http/Buffer.java
Patch:
@@ -204,7 +204,7 @@ else if (o instanceof Uploadable) {
 						}
 
 						// writes remaining chunk
-						StreamUtil.copy(inputStream, out, remaining);
+						StreamUtil.copy(inputStream, out, chunk);
 
 						remaining -= chunk;
 						step += chunk;

File: jodd-madvoc/src/main/java/jodd/madvoc/injector/ActionPathMacroInjector.java
Patch:
@@ -7,7 +7,6 @@
 import jodd.madvoc.ActionRequest;
 import jodd.madvoc.ScopeData;
 import jodd.madvoc.ScopeType;
-import jodd.madvoc.component.MadvocConfig;
 import jodd.madvoc.component.ScopeDataResolver;
 import jodd.util.StringUtil;
 
@@ -17,8 +16,9 @@
  */
 public class ActionPathMacroInjector extends BaseScopeInjector implements Injector {
 
-	public ActionPathMacroInjector(MadvocConfig madvocConfig, ScopeDataResolver scopeDataResolver) {
-		super(ScopeType.REQUEST, madvocConfig, scopeDataResolver);
+	public ActionPathMacroInjector(ScopeDataResolver scopeDataResolver) {
+		super(ScopeType.REQUEST, scopeDataResolver);
+		silent = true;
 	}
 
 	public void inject(ActionRequest actionRequest) {

File: jodd-madvoc/src/main/java/jodd/madvoc/injector/ApplicationScopeInjector.java
Patch:
@@ -5,7 +5,6 @@
 import jodd.madvoc.ActionRequest;
 import jodd.madvoc.ScopeData;
 import jodd.madvoc.ScopeType;
-import jodd.madvoc.component.MadvocConfig;
 import jodd.madvoc.component.ScopeDataResolver;
 
 import javax.servlet.ServletContext;
@@ -17,8 +16,9 @@
 public class ApplicationScopeInjector extends BaseScopeInjector
 		implements Injector, Outjector, ContextInjector<ServletContext> {
 
-	public ApplicationScopeInjector(MadvocConfig madvocConfig, ScopeDataResolver scopeDataResolver) {
-		super(ScopeType.APPLICATION, madvocConfig, scopeDataResolver);
+	public ApplicationScopeInjector(ScopeDataResolver scopeDataResolver) {
+		super(ScopeType.APPLICATION, scopeDataResolver);
+		silent = true;
 	}
 
 	public void inject(ActionRequest actionRequest) {

File: jodd-madvoc/src/main/java/jodd/madvoc/injector/MadvocContextScopeInjector.java
Patch:
@@ -5,7 +5,6 @@
 import jodd.madvoc.ActionRequest;
 import jodd.madvoc.ScopeData;
 import jodd.madvoc.ScopeType;
-import jodd.madvoc.component.MadvocConfig;
 import jodd.madvoc.component.ScopeDataResolver;
 import jodd.petite.PetiteContainer;
 
@@ -18,8 +17,8 @@ public class MadvocContextScopeInjector extends BaseScopeInjector
 
 	protected final PetiteContainer madpc;
 
-	public MadvocContextScopeInjector(MadvocConfig madvocConfig, ScopeDataResolver scopeDataResolver, PetiteContainer madpc) {
-		super(ScopeType.CONTEXT, madvocConfig, scopeDataResolver);
+	public MadvocContextScopeInjector(ScopeDataResolver scopeDataResolver, PetiteContainer madpc) {
+		super(ScopeType.CONTEXT, scopeDataResolver);
 		this.madpc = madpc;
 	}
 

File: jodd-madvoc/src/main/java/jodd/madvoc/injector/MadvocParamsInjector.java
Patch:
@@ -38,7 +38,7 @@ public void injectContext(Target target, ScopeData[] scopeData, PetiteContainer
 
 			String propertyName = param.substring(baseName.length() + 1);
 
-			target.writeValue(propertyName, value, madvocConfig.isInjectionErrorThrowsException());
+			target.writeValue(propertyName, value, false);
 		}
 	}
 

File: jodd-madvoc/src/main/java/jodd/madvoc/injector/RequestScopeInjector.java
Patch:
@@ -29,9 +29,10 @@ public class RequestScopeInjector extends BaseScopeInjector
 		implements Injector, Outjector {
 
 	public RequestScopeInjector(MadvocConfig madvocConfig, ScopeDataResolver scopeDataResolver) {
-		super(ScopeType.REQUEST, madvocConfig, scopeDataResolver);
+		super(ScopeType.REQUEST, scopeDataResolver);
 		this.encoding = madvocConfig.getEncoding();
 		this.attributeMoveId = madvocConfig.getAttributeMoveId();
+		silent = true;
 	}
 
 	// ---------------------------------------------------------------- configuration

File: jodd-madvoc/src/main/java/jodd/madvoc/injector/ServletContextScopeInjector.java
Patch:
@@ -6,7 +6,6 @@
 import jodd.madvoc.ActionRequest;
 import jodd.madvoc.ScopeData;
 import jodd.madvoc.ScopeType;
-import jodd.madvoc.component.MadvocConfig;
 import jodd.madvoc.component.ScopeDataResolver;
 import jodd.servlet.CsrfShield;
 import jodd.servlet.map.HttpServletContextMap;
@@ -49,8 +48,9 @@ public class ServletContextScopeInjector extends BaseScopeInjector
 
 	public static final String CSRF_NAME = "csrfTokenValid";
 
-	public ServletContextScopeInjector(MadvocConfig madvocConfig, ScopeDataResolver scopeDataResolver) {
-		super(ScopeType.SERVLET, madvocConfig, scopeDataResolver);
+	public ServletContextScopeInjector(ScopeDataResolver scopeDataResolver) {
+		super(ScopeType.SERVLET, scopeDataResolver);
+		silent = true;
 	}
 
 	/**

File: jodd-madvoc/src/main/java/jodd/madvoc/injector/SessionScopeInjector.java
Patch:
@@ -5,7 +5,6 @@
 import jodd.madvoc.ActionRequest;
 import jodd.madvoc.ScopeData;
 import jodd.madvoc.ScopeType;
-import jodd.madvoc.component.MadvocConfig;
 import jodd.madvoc.component.ScopeDataResolver;
 
 import javax.servlet.http.HttpSession;
@@ -17,8 +16,9 @@
  */
 public class SessionScopeInjector extends BaseScopeInjector implements Injector, Outjector {
 
-	public SessionScopeInjector(MadvocConfig madvocConfig, ScopeDataResolver scopeDataResolver) {
-		super(ScopeType.SESSION, madvocConfig, scopeDataResolver);
+	public SessionScopeInjector(ScopeDataResolver scopeDataResolver) {
+		super(ScopeType.SESSION, scopeDataResolver);
+		silent = true;
 	}
 
 	public void inject(ActionRequest actionRequest) {

File: jodd-madvoc/src/testInt/java/jodd/madvoc/MadvocSuite.java
Patch:
@@ -27,7 +27,8 @@
 		MoveTest.class,
 		BookActionTest.class,
 		ResultsTest.class,
-		TagActionTest.class
+		TagActionTest.class,
+		MissingActionTest.class
 })
 public class MadvocSuite extends MadvocSuiteBase {
 

File: jodd-http/src/main/java/jodd/http/HttpProgressListener.java
Patch:
@@ -21,7 +21,7 @@ public abstract class HttpProgressListener {
 	public int callbackSize(int size) {
 		this.size = size;
 
-		int callbackSize = size / 100;
+		int callbackSize = (size + 50) / 100;
 
 		if (callbackSize < 512) {
 			callbackSize = 512;

File: jodd-lagarto/src/main/java/jodd/lagarto/LagartoParser.java
Patch:
@@ -1978,7 +1978,7 @@ public void parse() {
 				ndx++;
 
 				if (isEOF()) {
-					emitScript(scriptStartNdx, ndx);
+					emitScript(scriptStartNdx, total);
 					state = DATA_STATE;
 					return;
 				}

File: jodd-lagarto/src/main/java/jodd/lagarto/Scanner.java
Patch:
@@ -125,7 +125,7 @@ protected final CharSequence charSequence(int from, int to) {
 		if (len == 0) {
 			return emitStrings ? StringPool.EMPTY : EMPTY_CHAR_BUFFER;
 		}
-		return emitStrings ? new String(input, from, to - from) : CharBuffer.wrap(input, from, len);
+		return emitStrings ? new String(input, from, len) : CharBuffer.wrap(input, from, len);
 	}
 
 	protected static CharBuffer EMPTY_CHAR_BUFFER = CharBuffer.wrap(new char[0]);

File: jodd-http/src/test/java/jodd/http/HttpBrowserTest.java
Patch:
@@ -35,7 +35,7 @@ public void testBrowser() {
 		HttpBrowser httpBrowser = new HttpBrowser();
 
 		httpBrowser.sendRequest(
-				HttpRequest.get("localhost:8080/echo?id=17").bodyText("hello"));
+				HttpRequest.get("localhost:8173/echo?id=17").bodyText("hello"));
 		HttpResponse httpResponse = httpBrowser.getHttpResponse();
 
 		assertNotNull(httpResponse);

File: jodd-http/src/test/java/jodd/http/TomcatServer.java
Patch:
@@ -17,7 +17,7 @@ public void start() throws Exception {
 		String workingDir = System.getProperty("java.io.tmpdir");
 
 		tomcat = new Tomcat();
-		tomcat.setPort(8080);
+		tomcat.setPort(8173);
 		tomcat.setBaseDir(workingDir);
 		tomcat.addWebapp("/", webRoot.getAbsolutePath());
 

File: jodd-joy/src/testInt/java/jodd/joy/JoyTomcatTestServer.java
Patch:
@@ -24,7 +24,7 @@ public void start() throws Exception {
 		String workingDir = System.getProperty("java.io.tmpdir");
 
 		tomcat = new Tomcat();
-		tomcat.setPort(8080);
+		tomcat.setPort(8173);
 		tomcat.setBaseDir(workingDir);
 		tomcat.addWebapp("/", webRoot.getAbsolutePath());
 

File: jodd-joy/src/testInt/java/jodd/joy/JsppLiveTest.java
Patch:
@@ -24,13 +24,13 @@ public static void afterClass() {
 
 	@Test
 	public void testSimpleJspp() {
-		HttpResponse response = HttpRequest.get("http://localhost:8080/hello.html").send();
+		HttpResponse response = HttpRequest.get("http://localhost:8173/hello.html").send();
 
 		assertEquals("Hello world Jupiter! zap!", response.bodyText());
 
 		// send it again
 
-		response = HttpRequest.get("http://localhost:8080/hello.html").send();
+		response = HttpRequest.get("http://localhost:8173/hello.html").send();
 
 		assertEquals("Hello world Jupiter! zap!", response.bodyText());
 	}

File: jodd-madvoc/src/testInt/java/jodd/madvoc/ArgsTest.java
Patch:
@@ -26,7 +26,7 @@ public static void afterClass() {
 	@Test
 	public void testArgs() {
 		HttpResponse response;
-		response = HttpRequest.get("localhost:8080/args.hello.html?id=1").send();
+		response = HttpRequest.get("localhost:8173/args.hello.html?id=1").send();
 
 		assertEquals("+ mad 1voc + jodd 1", response.bodyText().trim());
 	}
@@ -35,7 +35,7 @@ public void testArgs() {
 	public void testArgs2() {
 		ArgsAction.User.counter = 0;
 		HttpResponse response;
-		response = HttpRequest.get("localhost:8080/args.world.html")
+		response = HttpRequest.get("localhost:8173/args.world.html")
 				.query("who", "me")
 				.query("name", "Jupiter")
 				.query("hello.id", "1")
@@ -50,7 +50,7 @@ public void testArgs2() {
 	public void testArgs3() {
 		ArgsAction.User.counter = 0;
 		HttpResponse response;
-		response = HttpRequest.get("localhost:8080/args.user.html")
+		response = HttpRequest.get("localhost:8173/args.user.html")
 				.query("user.id", "3")
 				.query("user.username", "Frank")
 				.send();

File: jodd-madvoc/src/testInt/java/jodd/madvoc/AsyncTest.java
Patch:
@@ -25,7 +25,7 @@ public static void afterClass() {
 	@Test
 	public void testAsync() {
 		HttpResponse response;
-		response = HttpRequest.get("localhost:8080/async.html").send();
+		response = HttpRequest.get("localhost:8173/async.html").send();
 
 		assertEquals("async TASK!", response.bodyText().trim());
 	}

File: jodd-madvoc/src/testInt/java/jodd/madvoc/BookActionTest.java
Patch:
@@ -25,23 +25,23 @@ public static void afterClass() {
 	@Test
 	public void testBookGet() {
 		HttpResponse response;
-		response = HttpRequest.get("localhost:8080/book/123").send();
+		response = HttpRequest.get("localhost:8173/book/123").send();
 
 		assertEquals("MyBook: 123:Songs of Distant Earth.", response.bodyText().trim());
 	}
 
 	@Test
 	public void testBookPost() {
 		HttpResponse response;
-		response = HttpRequest.post("localhost:8080/book/123").send();
+		response = HttpRequest.post("localhost:8173/book/123").send();
 
 		assertEquals("NewBook: 123:Songs of Distant Earth.", response.bodyText().trim());
 	}
 
 	@Test
 	public void testBookPut() {
 		HttpResponse response;
-		response = HttpRequest.put("localhost:8080/book/123").send();
+		response = HttpRequest.put("localhost:8173/book/123").send();
 
 		assertEquals("OldBook: 123:Songs of Distant Earth.", response.bodyText().trim());
 	}

File: jodd-madvoc/src/testInt/java/jodd/madvoc/ExcTest.java
Patch:
@@ -26,15 +26,15 @@ public static void afterClass() {
 	@Test
 	public void testException() {
 		HttpBrowser httpBrowser = new HttpBrowser();
-		HttpResponse response = httpBrowser.sendRequest(HttpRequest.get("localhost:8080/exc.html"));
+		HttpResponse response = httpBrowser.sendRequest(HttpRequest.get("localhost:8173/exc.html"));
 
 		assertEquals("500!", response.bodyText().trim());
 	}
 
 	@Test
 	public void testRedirect500() {
 		HttpBrowser httpBrowser = new HttpBrowser();
-		HttpResponse response = httpBrowser.sendRequest(HttpRequest.get("localhost:8080/exc.red.html"));
+		HttpResponse response = httpBrowser.sendRequest(HttpRequest.get("localhost:8173/exc.red.html"));
 
 		assertEquals("500!", response.bodyText().trim());
 	}

File: jodd-madvoc/src/testInt/java/jodd/madvoc/FilterTest.java
Patch:
@@ -24,7 +24,7 @@ public static void afterClass() {
 
 	@Test
 	public void testFilterAction() {
-		HttpResponse response = HttpRequest.get("localhost:8080/filter.html").send();
+		HttpResponse response = HttpRequest.get("localhost:8173/filter.html").send();
 		assertEquals("Hello.peep!peep!", response.bodyText().trim());
 	}
 

File: jodd-madvoc/src/testInt/java/jodd/madvoc/MoveTest.java
Patch:
@@ -27,7 +27,7 @@ public static void afterClass() {
 	public void testMoveWithFiles() {
 		HttpResponse response;
 		response = HttpRequest
-				.post("localhost:8080/mv/upload.html")
+				.post("localhost:8173/mv/upload.html")
 				.form("uploadFiles[0]", new ByteArrayUploadable(new byte[] {65, 66, 67}, "hello.txt"))
 				.form("uploadFiles[1]", new byte[] {75, 77, 78})
 				.form("uploadFileNames[0]", "a1")

File: jodd-madvoc/src/testInt/java/jodd/madvoc/RawActionTest.java
Patch:
@@ -24,19 +24,19 @@ public static void afterClass() {
 
 	@Test
 	public void testRawAction() {
-		HttpResponse response = HttpRequest.get("localhost:8080/raw.html").send();
+		HttpResponse response = HttpRequest.get("localhost:8173/raw.html").send();
 		assertEquals("this is some raw direct result", response.bodyText().trim());
 	}
 
 	@Test
 	public void testRawTextAction() {
-		HttpResponse response = HttpRequest.get("localhost:8080/raw.text.html").send();
+		HttpResponse response = HttpRequest.get("localhost:8173/raw.text.html").send();
 		assertEquals("some raw txt", response.bodyText().trim());
 	}
 
 	@Test
 	public void testRawDownloadAction() {
-		HttpResponse response = HttpRequest.get("localhost:8080/raw.download").send();
+		HttpResponse response = HttpRequest.get("localhost:8173/raw.download").send();
 		assertEquals("attachment;filename=\"jodd-download.txt\"", response.header("content-disposition"));
 		assertEquals("file from jodd.org!", response.bodyText().trim());
 	}

File: jodd-madvoc/src/testInt/java/jodd/madvoc/ResultsTest.java
Patch:
@@ -30,7 +30,7 @@ public static void afterClass() {
 
 	@Test
 	public void testRawResult() {
-		HttpResponse httpResponse = HttpRequest.get("localhost:8080/madvocRawImage").send();
+		HttpResponse httpResponse = HttpRequest.get("localhost:8173/madvocRawImage").send();
 		assertEquals(200, httpResponse.statusCode());
 		assertEquals("image/gif", httpResponse.contentType());
 		byte[] bytes = httpResponse.bodyBytes();
@@ -41,7 +41,7 @@ public void testRawResult() {
 
 	@Test
 	public void testEncoding() {
-		HttpResponse httpResponse = HttpRequest.get("localhost:8080/madvocEncoding").send();
+		HttpResponse httpResponse = HttpRequest.get("localhost:8173/madvocEncoding").send();
 		assertEquals(200, httpResponse.statusCode());
 		assertEquals("text/plain;charset=UTF-8", httpResponse.contentType());
 		assertEquals("this text contents chinese chars 中文", httpResponse.bodyText());

File: jodd-madvoc/src/testInt/java/jodd/madvoc/SimpleTest.java
Patch:
@@ -24,7 +24,7 @@ public static void afterClass() {
 
 	@Test
 	public void testHelloAction() {
-		HttpResponse response = HttpRequest.get("localhost:8080/hello.html").send();
+		HttpResponse response = HttpRequest.get("localhost:8173/hello.html").send();
 		assertEquals("hello", response.bodyText().trim());
 	}
 

File: jodd-madvoc/src/testInt/java/jodd/madvoc/TomcatTestServer.java
Patch:
@@ -30,7 +30,7 @@ public void start() throws Exception {
 		String workingDir = System.getProperty("java.io.tmpdir");
 
 		tomcat = new Tomcat();
-		tomcat.setPort(8080);
+		tomcat.setPort(8173);
 		tomcat.setBaseDir(workingDir);
 		tomcat.addWebapp("/", webRoot.getAbsolutePath());
 

File: jodd-madvoc/src/testInt/java/jodd/madvoc/TypesTest.java
Patch:
@@ -24,7 +24,7 @@ public static void afterClass() {
 
 	@Test
 	public void testTypesOne() {
-		HttpResponse response = HttpRequest.get("localhost:8080/types.one.html").query("listA","1,2,3").send();
+		HttpResponse response = HttpRequest.get("localhost:8173/types.one.html").query("listA","1,2,3").send();
 		assertEquals("+ [1, 2, 3]2", response.bodyText().trim());
 	}
 

File: jodd-madvoc/src/testInt/java/jodd/madvoc/UrlActionTest.java
Patch:
@@ -24,19 +24,19 @@ public static void afterClass() {
 
 	@Test
 	public void testOneAction() {
-		HttpResponse response = HttpRequest.get("localhost:8080/foo/hello").send();
+		HttpResponse response = HttpRequest.get("localhost:8173/foo/hello").send();
 		assertEquals("/foo/hello.ok.jsp", response.bodyText().trim());
 	}
 
 	@Test
 	public void testTwoAction() {
-		HttpResponse response = HttpRequest.get("localhost:8080/foo/boo.zoo/two.exec.html").send();
+		HttpResponse response = HttpRequest.get("localhost:8173/foo/boo.zoo/two.exec.html").send();
 		assertEquals("/foo/boo.zoo/two.exec.jsp", response.bodyText().trim());
 	}
 
 	@Test
 	public void testUrlRewrite() {
-		HttpResponse response = HttpRequest.get("localhost:8080/f__o_o/h_e_l_l_o").send();
+		HttpResponse response = HttpRequest.get("localhost:8173/f__o_o/h_e_l_l_o").send();
 		assertEquals("/foo/hello.ok.jsp", response.bodyText().trim());
 	}
 }
\ No newline at end of file

File: jodd-madvoc/src/testInt/java/jodd/madvoc/UserActionTest.java
Patch:
@@ -27,7 +27,7 @@ public static void afterClass() {
 	public void testUserActionGet() {
 		HttpBrowser httpBrowser = new HttpBrowser();
 		HttpResponse response = httpBrowser.sendRequest(
-				HttpRequest.get("localhost:8080/sys/user/123"));
+				HttpRequest.get("localhost:8173/sys/user/123"));
 
 		assertEquals("Huh 123.", response.bodyText().trim());
 	}
@@ -36,7 +36,7 @@ public void testUserActionGet() {
 	public void testUserActionPost() {
 		HttpBrowser httpBrowser = new HttpBrowser();
 		HttpResponse response = httpBrowser.sendRequest(
-				HttpRequest.post("localhost:8080/sys/user/123"));
+				HttpRequest.post("localhost:8173/sys/user/123"));
 
 		assertEquals("Post 123.", response.bodyText().trim());
 	}

File: jodd-bean/src/main/java/jodd/introspector/CachingIntrospector.java
Patch:
@@ -17,7 +17,7 @@ public class CachingIntrospector implements Introspector {
 	protected final boolean scanAccessible;
 	protected final boolean enhancedProperties;
 	protected final boolean includeFieldsAsProperties;
-	protected final String propertyFieldPrefix;
+	protected final String[] propertyFieldPrefix;
 
 	/**
 	 * Default constructor.
@@ -31,7 +31,7 @@ public CachingIntrospector() {
 	 * <b>accessible</b> or <b>supported</b> fields, methods or
 	 * constructors.
 	 */
-	public CachingIntrospector(boolean scanAccessible, boolean enhancedProperties, boolean includeFieldsAsProperties, String propertyFieldPrefix) {
+	public CachingIntrospector(boolean scanAccessible, boolean enhancedProperties, boolean includeFieldsAsProperties, String[] propertyFieldPrefix) {
 		this.cache = new HashMap<Class, ClassDescriptor>();
 		this.scanAccessible = scanAccessible;
 		this.enhancedProperties = enhancedProperties;

File: jodd-core/src/main/java/jodd/Jodd.java
Patch:
@@ -170,7 +170,7 @@ public static boolean isModuleLoaded(int moduleNdx) {
 	/**
 	 * Returns module instance if module is loaded. It may return:
 	 * <ul>
-	 *     <li>null - when module is not registered/li>
+	 *     <li>null - when module is not registered</li>
 	 *     <li>class - when module is registered, but not yet loaded</li>
 	 *     <li>object - when module is registered and loaded</li>
 	 * </ul>

File: jodd-core/src/main/java/jodd/util/StringUtil.java
Patch:
@@ -270,7 +270,7 @@ public static boolean isEmpty(CharSequence string) {
 
 	/**
 	 * Determines if string array contains empty strings.
-	 * @see #isEmpty(String) 
+	 * @see #isEmpty(CharSequence)
 	 */
 	public static boolean isAllEmpty(String... strings) {
 		for (String string : strings) {

File: jodd-json/src/main/java/jodd/json/JsonContext.java
Patch:
@@ -98,7 +98,7 @@ public Path getPath() {
 	// ---------------------------------------------------------------- overwrite
 
 	/**
-	 * @{@inheritDoc}
+	 * {@inheritDoc}
 	 */
 	@Override
 	public void pushName(String name, boolean withComma) {
@@ -112,7 +112,7 @@ public void pushName(String name, boolean withComma) {
 	}
 
 	/**
-	 * @{@inheritDoc}
+	 * {@inheritDoc}
 	 */
 	@Override
 	public void writeComma() {

File: jodd-mail/src/main/java/jodd/mail/EmailAddress.java
Patch:
@@ -189,7 +189,7 @@ public boolean isValidReturnPath() {
 	 * WARNING: You may want to use getReturnPathAddress() instead if you're
 	 * looking for a clean version of the return path without CFWS, etc. See that
 	 * documentation first!
-	 * <p/>
+	 * <p>
 	 * Pull whatever's inside the angle brackets out, without alteration or cleaning.
 	 * This is more secure than a simple substring() since paths like:
 	 * <P><code>&lt;(my &gt; path) &gt;</code>

File: jodd-madvoc/src/main/java/jodd/madvoc/ActionRequest.java
Patch:
@@ -260,7 +260,7 @@ protected Object createActionMethodArgument(Class type) {
 				return ctor.newInstance();
 			} else {
 				// member class
-				Constructor ctor = type.getDeclaredConstructor(actionConfig.getActionClass());
+				Constructor ctor = type.getDeclaredConstructor(type.getDeclaringClass());
 				ctor.setAccessible(true);
 				return ctor.newInstance(action);
 			}

File: jodd-db/src/test/java/jodd/db/oom/dao/GenericDaoTest.java
Patch:
@@ -127,7 +127,7 @@ public void testAppDao1() {
 		boyMatch = new Boy();
 		boyMatch.setName("Oleg");
 		dbBoys = dao.find(Boy.class, boyMatch);
-		assertEquals(0, dbBoys.size());		// this doesn't work since boy has girldId set to 0
+		assertEquals(1, dbBoys.size());
 
 		// correct way
 

File: jodd-db/src/main/java/jodd/db/oom/sqlgen/DbSqlBuilder.java
Patch:
@@ -350,11 +350,11 @@ public DbSqlBuilder insert(Object values) {
 	// ---------------------------------------------------------------- update set
 
 	public DbSqlBuilder set(String tableRef, Object values) {
-		return addChunk(new UpdateSetChunk(tableRef, values, false));
+		return addChunk(new UpdateSetChunk(tableRef, values, SqlChunk.COLS_ONLY_EXISTING));
 	}
 
 	public DbSqlBuilder setAll(String tableRef, Object values) {
-		return addChunk(new UpdateSetChunk(tableRef, values, true));
+		return addChunk(new UpdateSetChunk(tableRef, values, SqlChunk.COLS_ALL));
 	}
 
 	// ---------------------------------------------------------------- query factories

File: jodd-bean/src/main/java/jodd/introspector/CachingIntrospector.java
Patch:
@@ -10,8 +10,6 @@
  * It can examine either <b>accessible</b> or <b>supported</b> fields/methods/constructors.
  * <p>
  * It simply caches <b>all</b> class descriptors.
- *
- * todo: add optional max value for total number of class descriptors stored in cache
  */
 public class CachingIntrospector implements Introspector {
 

File: jodd-json/src/main/java/jodd/json/meta/JsonAnnotationManager.java
Patch:
@@ -23,13 +23,11 @@
  */
 public class JsonAnnotationManager {
 
-	private final JSONAnnotation jsonAnnotation;
 	private final Map<Class, TypeData> typeDataMap;
 
 	@SuppressWarnings("unchecked")
 	public JsonAnnotationManager() {
 		typeDataMap = new HashMap<Class, TypeData>();
-		jsonAnnotation = new JSONAnnotation(JoddJson.jsonAnnotation);
 	}
 
 	/**
@@ -194,6 +192,8 @@ private TypeData scanClassForAnnotations(Class type) {
 		ArrayList<String> jsonNames = new ArrayList<String>();
 		ArrayList<String> realNames = new ArrayList<String>();
 
+		JSONAnnotation jsonAnnotation = new JSONAnnotation(JoddJson.jsonAnnotation);
+
 		for (PropertyDescriptor pd : pds) {
 			MethodDescriptor md = pd.getReadMethodDescriptor();
 

File: jodd-bean/src/main/java/jodd/introspector/MethodDescriptor.java
Patch:
@@ -9,7 +9,7 @@
 import java.lang.reflect.Type;
 
 /**
- * Method descriptor.  Holds additional method data,
+ * Method descriptor. Holds additional method data,
  * that might be specific to implementation class.
  */
 public class MethodDescriptor extends Descriptor implements Getter, Setter {

File: jodd-madvoc/src/main/java/jodd/madvoc/config/RouteMadvocConfigurator.java
Patch:
@@ -37,8 +37,8 @@
  *     <li>if line starts with <code>@</code> and it contains a <code>=</code> sign,
  *     		it's a variable definition.
  *     		Variables are processed as they appear in the file.</li>
- *     <li>default area is defined by <code>[]</code></li>. Default area defines section
- *     		with the same wrappers.
+ *     <li>default area is defined by <code>[]</code>. Default area defines section
+ *     		with the same wrappers.</li>
  *     <li>paths start with <code>/</code>. Action path is first such path
  *     		and result path is last such path.
  *     </li>

File: jodd-json/src/test/java/jodd/json/ObjectToMapTest.java
Patch:
@@ -27,7 +27,7 @@ public void testConvertObjectToMapSimple() {
 
 		BeanSerializer beanSerializer = new BeanSerializer(jsonContext, hill) {
 			@Override
-			protected void onSerializableProperty(String propertyName, Object value) {
+			protected void onSerializableProperty(String propertyName, Class propertyType, Object value) {
 				target.put(propertyName, value);
 			}
 		};
@@ -46,7 +46,7 @@ public void testConvertPersonToMap() {
 		JsonContext jsonContext = new JsonSerializer().createJsonContext(null);
 		BeanSerializer beanSerializer = new BeanSerializer(jsonContext, jodder) {
 			@Override
-			protected void onSerializableProperty(String propertyName, Object value) {
+			protected void onSerializableProperty(String propertyName, Class propertyType, Object value) {
 				target.put(propertyName, value);
 			}
 		};
@@ -74,7 +74,7 @@ public void testConvertPersonToMap2() {
 				.createJsonContext(null);
 		BeanSerializer beanSerializer = new BeanSerializer(jsonContext, jodder) {
 			@Override
-			protected void onSerializableProperty(String propertyName, Object value) {
+			protected void onSerializableProperty(String propertyName, Class propertyType, Object value) {
 				target.put(propertyName, value);
 			}
 		};

File: jodd-bean/src/main/java/jodd/typeconverter/impl/FileConverter.java
Patch:
@@ -34,7 +34,7 @@ public void registerAddonConverter(TypeConverter<File> fileTypeConverter) {
 			addonFileConverters = new TypeConverter[0];
 		}
 
-		ArraysUtil.append(addonFileConverters, fileTypeConverter);
+		addonFileConverters = ArraysUtil.append(addonFileConverters, fileTypeConverter);
 	}
 
 	public File convert(Object value) {

File: jodd-json/src/main/java/jodd/json/JsonContext.java
Patch:
@@ -101,7 +101,7 @@ public void serialize(Object object) {
 		// + globals
 
 		if (typeJsonSerializer == null) {
-			typeJsonSerializer = JsonSerializer.getDefaultSerializers().lookup(type);
+			typeJsonSerializer = JoddJson.defaultSerializers.lookup(type);
 		}
 
 		typeJsonSerializer.serialize(this, object);

File: jodd-core/src/main/java/jodd/util/PropertiesUtil.java
Patch:
@@ -195,6 +195,7 @@ protected void onEntry(EntryData entryData) throws IOException {
 		};
 		scanner.setIncludeResources(true);
 		scanner.setIgnoreException(true);
+		scanner.setExcludeAllEntriesMode();
 		scanner.setIncludedEntries(rootTemplate);
 		scanner.scanDefaultClasspath();
 		return p;

File: jodd-props/src/main/java/jodd/props/PropsUtil.java
Patch:
@@ -34,6 +34,7 @@ protected void onEntry(EntryData entryData) throws IOException {
 		};
 		scanner.setIncludeResources(true);
 		scanner.setIgnoreException(true);
+		scanner.setExcludeAllEntriesMode();
 		scanner.setIncludedEntries(patterns);
 		scanner.scanDefaultClasspath();
 	}

File: jodd-core/src/main/java/jodd/io/findfile/FindFile.java
Patch:
@@ -592,7 +592,7 @@ public void scan() {
 	 */
 	@SuppressWarnings("unchecked")
 	protected void init() {
-		if (rules.hasRules()) {
+		if (!rules.hasRules()) {
 			// if there are no rules applied, include all files in the output
 			includeAllMode();
 		}

File: jodd-core/src/test/java/jodd/io/findfile/FindFile2Test.java
Patch:
@@ -194,12 +194,12 @@ public void testNotFound() {
 
 		wff.setMatchType(WildcardFindFile.Match.FULL_PATH);
 		wff.include("**/xxxxxxx/*");
+
 		int count = 0;
 		while (wff.nextFile() != null) {
 			count++;
 		}
 		assertEquals(0, count);
-
 	}
 
 

File: jodd-petite/src/test/java/jodd/petite/WireTest.java
Patch:
@@ -24,9 +24,9 @@ public void setUp() throws Exception {
 	public void testContainer() {
 		PetiteContainer pc = new PetiteContainer();
 		AutomagicPetiteConfigurator configurator = new AutomagicPetiteConfigurator();
-		configurator.setExcludedEntries("*");
+		configurator.setExcludeAllEntriesMode();
 		configurator.setIncludedEntries("jodd.petite.*");
-		configurator.setExcludedImportantEntries("jodd.petite.data.*", "jodd.petite.tst3.*", "jodd.petite.tst.Ses");
+		configurator.setExcludedEntries("jodd.petite.data.*", "jodd.petite.tst3.*", "jodd.petite.tst.Ses");
 		configurator.configure(pc);
 
 		assertEquals(1, pc.getTotalBeans());

File: jodd-core/src/main/java/jodd/io/findfile/RegExpFindFile.java
Patch:
@@ -17,9 +17,9 @@ protected InExRules createRulesEngine() {
 		return new InExRules<String, Object>() {
 
 			@Override
-			protected void addRule(Object rule, boolean include, boolean important) {
+			protected void addRule(Object rule, boolean include) {
 				Pattern pattern = Pattern.compile((String) rule);
-				super.addRule(pattern, include, important);
+				super.addRule(pattern, include);
 			}
 
 			@Override

File: jodd-petite/src/test/java/jodd/petite/WireTest.java
Patch:
@@ -24,8 +24,9 @@ public void setUp() throws Exception {
 	public void testContainer() {
 		PetiteContainer pc = new PetiteContainer();
 		AutomagicPetiteConfigurator configurator = new AutomagicPetiteConfigurator();
+		configurator.setExcludedEntries("*");
 		configurator.setIncludedEntries("jodd.petite.*");
-		configurator.setExcludedEntries("jodd.petite.data.*", "jodd.petite.tst3.*", "jodd.petite.tst.Ses");
+		configurator.setExcludedImportantEntries("jodd.petite.data.*", "jodd.petite.tst3.*", "jodd.petite.tst.Ses");
 		configurator.configure(pc);
 
 		assertEquals(1, pc.getTotalBeans());

File: jodd-json/src/main/java/jodd/json/PathQuery.java
Patch:
@@ -24,9 +24,9 @@ public class PathQuery {
 	protected final boolean wildcard;
 	protected final boolean included;
 
-	public PathQuery(String expresion, boolean included) {
-		expression = StringUtil.splitc(expresion, '.');
-		wildcard = expresion.indexOf('*') >= 0;
+	public PathQuery(String expression, boolean included) {
+		this.expression = StringUtil.splitc(expression, '.');
+		wildcard = expression.indexOf('*') >= 0;
 		this.included = included;
 	}
 

File: jodd-props/src/test/java/jodd/props/Props141Test.java
Patch:
@@ -9,7 +9,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 
-public class Props141Test extends PropsTest {
+public class Props141Test extends BasePropsTest {
 
 	@Test
 	public void test141Simple() throws IOException {

File: jodd-props/src/test/java/jodd/props/PropsTest.java
Patch:
@@ -265,8 +265,8 @@ public void testClone() throws IOException {
 		Props p2 = p.clone();
 		p2.load(readDataFile("test.props"));
 
-		assertEquals(2, p.countTotalProperties());
-		assertEquals(19, p2.countTotalProperties());
+		assertEquals(3, p.countTotalProperties());
+		assertEquals(20, p2.countTotalProperties());
 
 		assertEquals("/app/data", p.getValue("data.path"));
 		assertEquals("/app/data2", p.getValue("data.path", "@prof1"));

File: jodd-props/src/main/java/jodd/props/PropsData.java
Patch:
@@ -178,6 +178,9 @@ public PropsEntry getProfileProperty(final String profile, final String key) {
 	protected String lookupValue(final String key, final String... profiles) {
 		if (profiles != null) {
 			for (String profile : profiles) {
+				if (profile == null) {
+					continue;
+				}
 				while (true) {
 					final Map<String, PropsEntry> profileMap = this.profileProperties.get(profile);
 					if (profileMap != null) {

File: jodd-props/src/test/java/jodd/props/Props141Test.java
Patch:
@@ -21,6 +21,7 @@ public void test141Simple() throws IOException {
 
 		assertNull(props.getValue(".key1", "ONE"));
 		assertEquals("value1#ONE", props.getValue("key1", "ONE"));
+		assertEquals("value1", props.getValue("key1", "qwe", null));
 	}
 
 	@Test

File: jodd-bean/src/main/java/jodd/bean/BeanUtilUtil.java
Patch:
@@ -77,7 +77,7 @@ protected Object invokeSetter(Setter setter, Object bean, Object value) {
 		try {
 			Class type = setter.getSetterRawType();
 
-			if (ReflectUtil.isClassOf(type, Collection.class)) {
+			if (ReflectUtil.isTypeOf(type, Collection.class)) {
 				Class componentType = setter.getSetterRawComponentType();
 
 				value = convertToCollection(value, type, componentType);

File: jodd-bean/src/main/java/jodd/typeconverter/TypeConverterManagerBean.java
Patch:
@@ -316,7 +316,7 @@ public <T> T convertType(Object value, Class<T> destinationType) {
 		}
 
 		// collection
-		if (ReflectUtil.isClassOf(destinationType, Collection.class)) {
+		if (ReflectUtil.isTypeOf(destinationType, Collection.class)) {
 			// component type is unknown because of Java's type-erasure
 			CollectionConverter<T> collectionConverter =
 					new CollectionConverter(this, destinationType, Object.class);

File: jodd-core/src/main/java/jodd/util/ReflectUtil.java
Patch:
@@ -253,7 +253,7 @@ public static Object invokeDeclared(Class c, String method, Object... params) th
 	 * Safe version of <code>isAssignableFrom</code> method that
 	 * returns <code>false</code> if one of the arguments is <code>null</code>.
 	 */
-	public static boolean isClassOf(Class<?> lookupClass, Class<?> targetClass) {
+	public static boolean isTypeOf(Class<?> lookupClass, Class<?> targetClass) {
 		if (targetClass == null || lookupClass == null) {
 			return false;
 		}

File: jodd-json/src/main/java/jodd/json/MapToBean.java
Patch:
@@ -88,7 +88,7 @@ public Object map2bean(Map map, Class targetType) {
 				}
 				else if (value instanceof Map) {
 					// if the value we want to inject is a Map...
-					if (ReflectUtil.isClassOf(propertyType, Map.class) == false) {
+					if (ReflectUtil.isTypeOf(propertyType, Map.class) == false) {
 						// ... and if target is NOT a map
 						value = map2bean((Map) value, propertyType);
 					}

File: jodd-jtx/src/main/java/jodd/jtx/JtxResource.java
Patch:
@@ -23,7 +23,7 @@ final class JtxResource<E> {
 	 * Returns <code>true</code> if resource is of provided resource type.
 	 */
 	public boolean isSameTypeAsResource(Class type) {
-		return ReflectUtil.isClassOf(type, resource.getClass());
+		return ReflectUtil.isTypeOf(type, resource.getClass());
 	}
 
 	// ---------------------------------------------------------------- delegates

File: jodd-madvoc/src/main/java/jodd/madvoc/ActionConfig.java
Patch:
@@ -109,7 +109,7 @@ protected Field findResultField(Class actionClass) {
 		FieldDescriptor[] fields = ClassIntrospector.lookup(actionClass).getAllFieldDescriptors();
 		for (FieldDescriptor fd : fields) {
 			Field field = fd.getField();
-			if (ReflectUtil.isClassOf(field.getType(), Result.class)) {
+			if (ReflectUtil.isTypeOf(field.getType(), Result.class)) {
 				field.setAccessible(true);
 				return field;
 			}

File: jodd-madvoc/src/main/java/jodd/madvoc/component/WrapperManager.java
Patch:
@@ -151,7 +151,7 @@ protected Class<? extends T>[] expand(Class<? extends T>[] actionWrappers) {
 				}
 				continue;
 			}
-			if (ReflectUtil.isClassOf(wrapperClass, BaseActionWrapperStack.class)) {
+			if (ReflectUtil.isTypeOf(wrapperClass, BaseActionWrapperStack.class)) {
 				BaseActionWrapperStack stack = (BaseActionWrapperStack) resolve(wrapperClass);
 				list.remove(i);
 				Class<? extends T>[] stackWrappers = stack.getWrappers();

File: jodd-madvoc/src/main/java/jodd/madvoc/config/AutomagicMadvocConfigurator.java
Patch:
@@ -197,7 +197,7 @@ protected void onResultClass(String className) throws ClassNotFoundException {
 		if (checkClass(resultClass) == false) {
 			return;
 		}
-		if (ReflectUtil.isClassOf(resultClass, ActionResult.class) == true) {
+		if (ReflectUtil.isTypeOf(resultClass, ActionResult.class) == true) {
 			resultsManager.register(resultClass);
 		}
 	}

File: jodd-petite/src/main/java/jodd/petite/PetiteBeans.java
Patch:
@@ -325,7 +325,7 @@ protected String[] resolveBeanNamesForType(Class type) {
 		for (Map.Entry<String, BeanDefinition> entry : beans.entrySet()) {
 			BeanDefinition beanDefinition = entry.getValue();
 
-			if (ReflectUtil.isClassOf(beanDefinition.type, type)) {
+			if (ReflectUtil.isTypeOf(beanDefinition.type, type)) {
 				String beanName = entry.getKey();
 				list.add(beanName);
 			}

File: jodd-petite/src/main/java/jodd/petite/resolver/PropertyResolver.java
Patch:
@@ -44,7 +44,7 @@ public PropertyInjectionPoint[] resolve(Class type, boolean autowire) {
 			}
 
 			Class fieldType = field.getType();
-			if (ReflectUtil.isClassOf(fieldType, Collection.class)) {
+			if (ReflectUtil.isTypeOf(fieldType, Collection.class)) {
 				continue;
 			}
 

File: jodd-petite/src/main/java/jodd/petite/resolver/SetResolver.java
Patch:
@@ -44,7 +44,7 @@ public SetInjectionPoint[] resolve(Class type, boolean autowire) {
 			}
 
 			Class fieldType = field.getType();
-			if (!ReflectUtil.isClassOf(fieldType, Collection.class)) {
+			if (!ReflectUtil.isTypeOf(fieldType, Collection.class)) {
 				continue;
 			}
 

File: jodd-json/src/main/java/jodd/json/BeanSerializer.java
Patch:
@@ -25,7 +25,8 @@ public class BeanSerializer {
 	private final Class type;
 
 	private int count;
-	private JsonAnnotationManager.TypeData typeData;
+
+	private final JsonAnnotationManager.TypeData typeData;
 
 	public BeanSerializer(JsonContext jsonContext, Object bean) {
 		this.jsonContext = jsonContext;
@@ -132,7 +133,7 @@ protected boolean onProperty(String propertyName, Class propertyType, PropertyDe
 
 			// change name for properties
 
-			propertyName = JsonAnnotationManager.getInstance().resolveJsonName(type, propertyName);
+			propertyName = typeData.resolveJsonName(propertyName);
 		}
 
 		jsonContext.pushName(propertyName, count > 0);

File: jodd-json/src/main/java/jodd/json/impl/ObjectJsonSerializer.java
Patch:
@@ -24,6 +24,8 @@ public void serialize(final JsonContext jsonContext, Object value) {
 		beanVisitor.serialize();
 
 		jsonContext.writeCloseObject();
+
+		jsonContext.unuseValue();
 	}
 
 }
\ No newline at end of file

File: jodd-json/src/test/java/jodd/json/JSONSerializationTest.java
Patch:
@@ -30,7 +30,8 @@
 
 public class JSONSerializationTest {
 
-	private Person jodder, modesty, pedro;
+	private Person jodder;
+	private Person modesty;
 	private Map colors;
 	private List people;
 	private Network network;
@@ -42,7 +43,7 @@ public class JSONSerializationTest {
 	public void setUp() {
 		DataCreator dataCreator = new DataCreator();
 		pedroZip = new Zipcode("848485");
-		pedro = dataCreator.createPedro();
+		Person pedro = dataCreator.createPedro();
 		jodder = dataCreator.createJodder();
 		modesty = dataCreator.createModesty();
 		colors = dataCreator.createColorMap();

File: jodd-json/src/test/java/jodd/json/JsonParserTest.java
Patch:
@@ -598,7 +598,7 @@ public void testCitmCatalog() throws Exception {
 		Map<String, Object> map;
 		try {
 			jsonParser.parse(json);
-			map = (Map<String, Object>) jsonParser.parse(json);
+			map = jsonParser.parse(json);
 		}
 		catch (Exception ex) {
 			fail(ex.toString());

File: jodd-json/src/main/java/jodd/json/Path.java
Patch:
@@ -126,7 +126,7 @@ public int hashCode() {
 		int result = 1;
 
 		for (int i = 0; i < index; i++) {
-			Object element = paths[i];
+			String element = paths[i];
 			result = 31 * result + (element == null ? 0 : element.hashCode());
 		}
 

File: jodd-lagarto/src/main/java/jodd/lagarto/dom/Node.java
Patch:
@@ -447,7 +447,7 @@ public void setAttribute(String name, String value) {
 				return;
 			}
 		}
-		attributes.add(new Attribute(rawAttributeName, name, value, false));
+		attributes.add(new Attribute(rawAttributeName, name, value));
 	}
 
 	/**

File: jodd-core/src/main/java/jodd/util/ReflectUtil.java
Patch:
@@ -254,7 +254,7 @@ public static Object invokeDeclared(Class c, String method, Object... params) th
 	 * are examined against second class. Method is not symmetric.
 	 */
 	public static boolean isSubclass(Class thisClass, Class target) {
-		if (target.isInterface() != false) {
+		if (target.isInterface() == true) {
 			return isInterfaceImpl(thisClass, target);
 		}
 		for (Class x = thisClass; x != null; x = x.getSuperclass()) {

File: jodd-core/src/test/java/jodd/util/MimeTypesTest.java
Patch:
@@ -27,7 +27,7 @@ public void testSimpleMime() {
 	public void testFind() {
 		String[] extensionArray = MimeTypes.findExtensionsByMimeTypes("image/jpeg", false);
 
-		String extensions = StringUtil.toString(extensionArray) + ',';
+		String extensions = ArraysUtil.toString(extensionArray) + ',';
 
 		assertEquals(3, extensionArray.length);
 
@@ -45,7 +45,7 @@ public void testFind() {
 	public void testFindWithWildcards() {
 		String[] extensionArray = MimeTypes.findExtensionsByMimeTypes("image/*", true);
 
-		String extensions = StringUtil.toString(extensionArray) + ',';
+		String extensions = ArraysUtil.toString(extensionArray) + ',';
 
 		assertTrue(extensions.length() > 3);
 

File: jodd-http/src/test/java/jodd/JoddHttpTest.java
Patch:
@@ -12,7 +12,7 @@ public class JoddHttpTest {
 
 	@Test
 	public void testLoadedModules() {
-		assertFalse(Jodd.isModuleLoaded(BEAN));
+		assertTrue(Jodd.isModuleLoaded(BEAN));
 		assertTrue(Jodd.isModuleLoaded(HTTP));
 		assertFalse(Jodd.isModuleLoaded(MADVOC));
 		assertFalse(Jodd.isModuleLoaded(MAIL));

File: jodd-upload/src/main/java/jodd/typeconverter/impl/FileUploadConverter.java
Patch:
@@ -2,9 +2,9 @@
 
 package jodd.typeconverter.impl;
 
-import jodd.upload.FileUpload;
 import jodd.typeconverter.TypeConversionException;
 import jodd.typeconverter.TypeConverter;
+import jodd.upload.FileUpload;
 
 /**
  * Converts given object to {@link FileUpload}.

File: jodd-upload/src/test/java/jodd/JoddUploadTest.java
Patch:
@@ -11,7 +11,7 @@ public class JoddUploadTest {
 
 	@Test
 	public void testLoadedModules() {
-		assertFalse(Jodd.isModuleLoaded(BEAN));
+		assertTrue(Jodd.isModuleLoaded(BEAN));
 		assertFalse(Jodd.isModuleLoaded(HTTP));
 		assertFalse(Jodd.isModuleLoaded(MADVOC));
 		assertFalse(Jodd.isModuleLoaded(MAIL));

File: jodd-core/src/main/java/jodd/util/AnnotationDataReader.java
Patch:
@@ -2,8 +2,6 @@
 
 package jodd.util;
 
-import jodd.typeconverter.Convert;
-
 import java.lang.annotation.Annotation;
 import java.lang.reflect.AccessibleObject;
 
@@ -126,7 +124,7 @@ protected String readStringElement(A annotation, String name) {
 				return null;
 			}
 		}
-		String value = Convert.toString(annotationValue);
+		String value = StringUtil.toSafeString(annotationValue);
 		return value.trim();
 	}
 

File: jodd-core/src/test/java/jodd/util/MimeTypesTest.java
Patch:
@@ -2,7 +2,6 @@
 
 package jodd.util;
 
-import jodd.typeconverter.Convert;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
@@ -28,7 +27,7 @@ public void testSimpleMime() {
 	public void testFind() {
 		String[] extensionArray = MimeTypes.findExtensionsByMimeTypes("image/jpeg", false);
 
-		String extensions = Convert.toString(extensionArray) + ',';
+		String extensions = StringUtil.toString(extensionArray) + ',';
 
 		assertEquals(3, extensionArray.length);
 
@@ -46,7 +45,7 @@ public void testFind() {
 	public void testFindWithWildcards() {
 		String[] extensionArray = MimeTypes.findExtensionsByMimeTypes("image/*", true);
 
-		String extensions = Convert.toString(extensionArray) + ',';
+		String extensions = StringUtil.toString(extensionArray) + ',';
 
 		assertTrue(extensions.length() > 3);
 

File: jodd-core/src/main/java/jodd/format/RomanNumber.java
Patch:
@@ -14,6 +14,9 @@ public class RomanNumber {
 	 * Converts to Roman number.
 	 */
 	public static String convertToRoman(int value) {
+		if (value <= 0) {
+			throw new IllegalArgumentException();
+		}
 		StringBuilder roman = new StringBuilder();
 		int n = value;
 		for (int i = 0; i < LETTERS.length; i++) {

File: jodd-madvoc/src/main/java/jodd/madvoc/meta/Action.java
Patch:
@@ -3,7 +3,6 @@
 package jodd.madvoc.meta;
 
 import jodd.madvoc.path.ActionNamingStrategy;
-import jodd.madvoc.path.DefaultActionPath;
 import jodd.util.StringPool;
 
 import java.lang.annotation.Documented;
@@ -73,7 +72,9 @@
 
 	/**
 	 * Defines action naming strategy for building action path.
+	 * When set to {@link jodd.madvoc.path.ActionNamingStrategy},
+	 * it will be defined from the {@link jodd.madvoc.component.MadvocConfig#getDefaultNamingStrategy()}.
 	 */
-	Class<? extends ActionNamingStrategy> path() default DefaultActionPath.class;
+	Class<? extends ActionNamingStrategy> path() default ActionNamingStrategy.class;
 
 }
\ No newline at end of file

File: jodd-madvoc/src/main/java/jodd/madvoc/config/ManualMadvocConfigurator.java
Patch:
@@ -239,7 +239,7 @@ public void bind() {
 			actionsManager.registerAction(actionConfig);
 
 			if (alias != null) {
-				actionsManager.registerPathAlias(actionPath, alias);
+				actionsManager.registerPathAlias(alias, actionPath);
 			}
 		}
 

File: jodd-madvoc/src/testInt/java/jodd/madvoc/RouterTest.java
Patch:
@@ -33,5 +33,7 @@ public void testRouterFile() {
 		response = HttpRequest.get("localhost:8080/re/view/234").send();
 		assertEquals("234", response.bodyText().trim());
 
+		response = HttpRequest.get("localhost:8080/alpha.ciao.html").send();
+		assertEquals("alpha.hello.jsp", response.bodyText().trim());
 	}
 }
\ No newline at end of file

File: jodd-core/src/main/java/jodd/util/HtmlDecoder.java
Patch:
@@ -31,7 +31,7 @@ public class HtmlDecoder {
 			entityReferences.load(is);
 		}
 		catch (Exception ex) {
-			throw new IllegalStateException(ex.getMessage());
+			throw new IllegalStateException(ex);
 		} finally {
 			StreamUtil.close(is);
 		}

File: jodd-lagarto/src/main/java/jodd/lagarto/LagartoParser.java
Patch:
@@ -1978,6 +1978,7 @@ public void parse() {
 				ndx++;
 
 				if (isEOF()) {
+					emitScript(scriptStartNdx, ndx);
 					state = DATA_STATE;
 					return;
 				}

File: jodd-bean/src/main/java/jodd/introspector/FieldDescriptor.java
Patch:
@@ -44,7 +44,6 @@ public FieldDescriptor(ClassDescriptor classDescriptor, Field field) {
 
 	/**
 	 * Returns field name.
-	 * @return
 	 */
 	@Override
 	public String getName() {

File: jodd-http/src/main/java/jodd/http/HttpResponse.java
Patch:
@@ -171,6 +171,9 @@ public static HttpResponse readFrom(InputStream in) {
 			httpResponse.httpVersion(line.substring(0, ndx));
 
 			int ndx2 = line.indexOf(' ', ndx + 1);
+			if (ndx2 == -1) {
+				ndx2 = line.length();
+			}
 			httpResponse.statusCode(Integer.parseInt(line.substring(ndx, ndx2).trim()));
 
 			httpResponse.statusPhrase(line.substring(ndx2).trim());

File: jodd-core/src/main/java/jodd/typeconverter/impl/ClassArrayConverter.java
Patch:
@@ -45,11 +45,11 @@ protected String[] convertStringToArray(String value) {
 		for (int i = 0; i < strings.length; i++) {
 			strings[count] = strings[i].trim();
 
-			if (strings[i].length() == 0) {
+			if (strings[count].length() == 0) {
 				continue;
 			}
 
-			if (!strings[i].startsWith(StringPool.HASH)) {
+			if (!strings[count].startsWith(StringPool.HASH)) {
 				count++;
 			}
 		}

File: jodd-core/src/main/java/jodd/util/cl/DefaultClassLoaderStrategy.java
Patch:
@@ -164,7 +164,7 @@ public Class loadClass(String className, ClassLoader classLoader) throws ClassNo
 	/**
 	 * Loads a class using provided class loader.
 	 * If class is an array, it will be first loaded using the <code>Class.forName</code>!
-	 * We must use this since for JDK >= 6 arrays will be not loaded using classloader,
+	 * We must use this since for JDK {@literal >=} 6 arrays will be not loaded using classloader,
 	 * but only with <code>forName</code> method. However, array loading strategy can be
 	 * {@link #setLoadArrayClassByComponentTypes(boolean) changed}.
 	 */

File: jodd-http/src/main/java/jodd/http/net/SocketHttpConnectionProvider.java
Patch:
@@ -32,7 +32,7 @@ public void useProxy(ProxyInfo proxyInfo) {
 	/**
 	 * Creates new connection from current {@link jodd.http.HttpRequest request}.
 	 *
-	 * @see #createSocket(javax.net.SocketFactory, String, int)
+	 * @see #createSocket(String, int)
 	 */
 	public HttpConnection createHttpConnection(HttpRequest httpRequest) throws IOException {
 		Socket socket;
@@ -51,7 +51,7 @@ public HttpConnection createHttpConnection(HttpRequest httpRequest) throws IOExc
 	}
 
 	/**
-	 * Creates a socket using socket factory.
+	 * Creates a socket using {@link #getSocketFactory(jodd.http.ProxyInfo) socket factory}.
 	 */
 	protected Socket createSocket(String host, int port) throws IOException {
 		SocketFactory socketFactory = getSocketFactory(proxy);

File: jodd-lagarto/src/main/java/jodd/lagarto/LagartoParserConfig.java
Patch:
@@ -60,7 +60,7 @@ public boolean isCalculatePosition() {
 	}
 
 	/**
-	 * Resolves current position on {@link #error(String)} parsing errors}
+	 * Resolves current position on parsing errors
 	 * and for DOM elements. Note: this makes processing SLOW!
 	 * JFlex may be used to track current line and row, but that brings
 	 * overhead, and can't be easily disabled. By enabling this property,

File: jodd-madvoc/src/main/java/jodd/madvoc/component/ActionsManager.java
Patch:
@@ -168,7 +168,7 @@ public ActionConfig register(Class actionClass, String actionMethodName, ActionD
 	 * Registration main point. Does two things:
 	 * <ul>
 	 *     <li>{@link jodd.madvoc.component.ActionMethodParser#parse(Class, java.lang.reflect.Method, jodd.madvoc.ActionDef) parse action}
-	 *     and creates {@link jodd.madvoc.ActionConfig}</li>.
+	 *     and creates {@link jodd.madvoc.ActionConfig}</li>
 	 *     <li>{@link #registerAction(jodd.madvoc.ActionConfig) registers} created {@link jodd.madvoc.ActionConfig}</li>
 	 * </ul>
 	 * Returns created {@link ActionConfig}.

File: jodd-madvoc/src/main/java/jodd/madvoc/meta/RestAction.java
Patch:
@@ -22,7 +22,7 @@
 public @interface RestAction {
 
 	/**
-	 * Action path value. If equals to {@link #NONE} action method name
+	 * Action path value. If equals to {@link Action#NONE} action method name
 	 * will not be part of the created action path.
 	 */
 	String value() default "";
@@ -36,7 +36,7 @@
 
 	/**
 	 * Defines action method (such as HTTP request method: GET, POST....).
-	 * Ignore it or use {@link #ANY} to ignore the method.
+	 * Ignore it or use {@link Action#ANY} to ignore the method.
 	 */
 	String method() default "";
 

File: jodd-proxetta/src/main/java/jodd/asm/TraceSignatureVisitor.java
Patch:
@@ -15,7 +15,7 @@
  *    <li>removed <code>final</code> for the class</li>
  *    <li>some <code>private</code> scopes made <code>protected</code></li>
  *    <li>added method <code>getExceptionsArray()</code></li>
- *    <li>public constructor change to accept <code>boolean</code></code></li>
+ *    <li>public constructor change to accept <code>boolean</code></li>
  *    <li>use <code>AsmUtil</code> constants</li>
  *    <li>use <code>StringBuilder</code> instead of <code>StringBuffer</code></li>
  * </ul>

File: jodd-madvoc/src/main/java/jodd/madvoc/injector/Target.java
Patch:
@@ -115,7 +115,9 @@ public void writeValue(String propertyName, Object propertyValue, boolean throwE
 				return;
 			}
 
-			createValueInstance();
+			if (value == null) {
+				createValueInstance();
+			}
 
 			propertyName = propertyName.substring(dotNdx + 1);
 		}

File: jodd-madvoc/src/testInt/java/jodd/madvoc/ArgsTest.java
Patch:
@@ -4,6 +4,7 @@
 
 import jodd.http.HttpRequest;
 import jodd.http.HttpResponse;
+import jodd.madvoc.action.ArgsAction;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -32,6 +33,7 @@ public void testArgs() {
 
 	@Test
 	public void testArgs2() {
+		ArgsAction.User.counter = 0;
 		HttpResponse response;
 		response = HttpRequest.get("localhost:8080/args.world.html")
 				.query("who", "me")
@@ -46,6 +48,7 @@ public void testArgs2() {
 
 	@Test
 	public void testArgs3() {
+		ArgsAction.User.counter = 0;
 		HttpResponse response;
 		response = HttpRequest.get("localhost:8080/args.user.html")
 				.query("user.id", "3")

File: jodd-madvoc/src/testInt/java/jodd/madvoc/action/ArgsAction.java
Patch:
@@ -28,7 +28,7 @@ static class Data2 {
 	public static class User {
 		long id;
 		String username;
-		static int counter;
+		public static int counter;
 
 		public User() {
 			counter++;

File: jodd-lagarto/src/main/java/jodd/lagarto/LagartoParser.java
Patch:
@@ -2702,7 +2702,7 @@ public void parse() {
 	protected char[] text;
 	protected int textLen;
 
-  private void ensureCapacity() {
+	private void ensureCapacity() {
 		if (textLen == text.length) {
 			text = ArraysUtil.resize(text, textLen << 1);
 		}

File: jodd-lagarto/src/main/java/jodd/jerry/Jerry.java
Patch:
@@ -795,7 +795,7 @@ public Jerry append(String html) {
 
 		for (Node node : nodes) {
 			Document workingDoc = doc.clone();
-			node.addChild(workingDoc);
+			node.addChild(workingDoc.getChildNodes());
 		}
 		return this;
 	}
@@ -809,7 +809,7 @@ public Jerry before(String html) {
 
 		for (Node node : nodes) {
 			Document workingDoc = doc.clone();
-			node.insertBefore(workingDoc, node);
+			node.insertBefore(workingDoc.getChildNodes(), node);
 		}
 		return this;
 	}

File: jodd-lagarto/src/test/java/jodd/lagarto/dom/DomBuilderTest.java
Patch:
@@ -289,8 +289,6 @@ public void testAppendable() {
 		FastCharArrayWriter charBuffer = new FastCharArrayWriter();
 		div.appendTextContent(charBuffer);
 
-		System.out.println(charBuffer.toString());
-
 		assertEquals(textContent, charBuffer.toString());
 	}
 

File: jodd-lagarto/src/main/java/jodd/jerry/Jerry.java
Patch:
@@ -734,8 +734,7 @@ public String text() {
 	public Jerry text(String text) {
 		for (Node node : nodes) {
 			node.removeAllChilds();
-			Text textNode = new Text(node.getOwnerDocument(), null);
-			textNode.setTextContent(text);
+			Text textNode = new Text(node.getOwnerDocument(), text);
 			node.addChild(textNode);
 		}
 		return this;

File: jodd-lagarto/src/main/java/jodd/lagarto/ParsedTag.java
Patch:
@@ -4,6 +4,7 @@
 
 import jodd.util.ArraysUtil;
 import jodd.util.CharUtil;
+import jodd.util.HtmlEncoder;
 
 import java.io.IOException;
 
@@ -321,7 +322,7 @@ private void appendTo(Appendable out) {
 					CharSequence value = attrValues[i];
 					if (value != null) {
 						out.append('=').append('"');
-						out.append(value);
+						out.append(HtmlEncoder.attribute(value));
 						out.append('"');
 					}
 				}

File: jodd-lagarto-web/src/main/java/jodd/decora/parser/DecoraParser.java
Patch:
@@ -29,7 +29,7 @@ public void decorate(Writer writer, char[] pageContent, char[] decoraContent) th
 	 * Parses decorator.
 	 */
 	protected DecoraTag[] parseDecorator(char[] decoraContent) {
-		LagartoParser lagartoParser = new LagartoParser(decoraContent, false); 		// todo USE TRUE, but dont change until its tested
+		LagartoParser lagartoParser = new LagartoParser(decoraContent, true);
 		DecoratorTagVisitor visitor = new DecoratorTagVisitor();
 		lagartoParser.parse(visitor);
 		return visitor.getDecoraTags();
@@ -39,7 +39,7 @@ protected DecoraTag[] parseDecorator(char[] decoraContent) {
 	 * Parses page and extracts decora regions for replacements.
 	 */
 	protected void parsePage(char[] pageContent, DecoraTag[] decoraTags) {
-		LagartoParser lagartoParser = new LagartoParser(pageContent, false);		// todo USE TRUE, but dont change until its tested
+		LagartoParser lagartoParser = new LagartoParser(pageContent, true);
 		PageRegionExtractor writer = new PageRegionExtractor(decoraTags);
 		lagartoParser.parse(writer);
 	}

File: jodd-lagarto-web/src/main/java/jodd/decora/parser/DecoraTag.java
Patch:
@@ -43,7 +43,6 @@ public DecoraTag duplicate() {
 		return new DecoraTag(name, id, start, end, defaultValueStart, defaultValueLength);
 	}
 
-
 	/**
 	 * Returns decora tag name.
 	 */
@@ -92,14 +91,13 @@ public boolean hasDefaultValue() {
 	/**
 	 * Returns <code>true</code> if provided tag
 	 * matches decorator tag.
-	 * todo check!
 	 */
 	public boolean isMatchedTag(Tag tag) {
 		if (tag.nameEquals(name) == false) {
 			return false;
 		}
 		if (id != null) {
-			if (TagUtil.equalsIgnoreCase(id, tag.getId()) == false) {
+			if (TagUtil.equals(id, tag.getId()) == false) {
 				return false;
 			}
 		}

File: jodd-lagarto-web/src/main/java/jodd/decora/parser/DecoratorTagVisitor.java
Patch:
@@ -16,7 +16,6 @@
  * If decorator content is static, array of decora tags can be cached
  * adn {@link jodd.decora.parser.DecoraTag#duplicate() duplicated} to
  * skip parsing decorator again.
- * // todo check toString() and CharSequence
  */
 public class DecoratorTagVisitor extends EmptyTagVisitor {
 
@@ -48,9 +47,9 @@ public void tag(Tag tag) {
 			return;
 		}
 		if (tag.getType().isStartingTag()) {
-			CharSequence id = tag.getId();
+			String id = tag.getId().toString();
 
-			if (id != null && id.toString().startsWith("decora-")) {
+			if (id != null && id.startsWith("decora-")) {
 				onIdAttrStart(tag);
 			}
 		} else {

File: jodd-lagarto/src/main/java/jodd/lagarto/dom/LagartoDOMBuilder.java
Patch:
@@ -356,7 +356,7 @@ public Document parse(String content) {
 	 */
 	protected Document doParse(LagartoParser lagartoParser) {
 		// parser flags
-		//lagartoParser.setParseSpecialTagsAsCdata(parseSpecialTagsAsCdata);		// todo?
+		//lagartoParser.setParseSpecialTagsAsCdata(parseSpecialTagsAsCdata);		// todo add flag for NOT HAVING THE RAW
 		lagartoParser.setEnableConditionalComments(enableConditionalComments);
 		lagartoParser.setCalculatePosition(calculatePosition);
 		lagartoParser.setXmlMode(xmlMode);

File: jodd-lagarto/src/test/java/jodd/jerry/JerryCustomTest.java
Patch:
@@ -27,7 +27,7 @@ public void testConditionalTags() {
 		String html = doc.html();
 		html = StringUtil.removeChars(html, " \n\r");
 
-		assertEquals("<html><body></body></html>", html);
+		assertEquals("<html>xxx--&gt;<body></body></html>", html);
 	}
 
 	@Test
@@ -45,7 +45,7 @@ public void testConditionalTags2() {
 		String html = doc.html();
 		html = StringUtil.removeChars(html, " \n\r");
 
-		assertEquals("<html><body></body></html>", html);
+		assertEquals("<html><!----><body></body></html>", html);
 	}
 
 	@Test

File: jodd-lagarto/src/main/java/jodd/lagarto/LagartoParser.java
Patch:
@@ -831,7 +831,7 @@ public void parse() {
 
 	protected State BOGUS_COMMENT = new State() {
 		public void parse() {
-			int commentEndNdx = find('>', ndx, total); 		// todo remove find
+			int commentEndNdx = find('>', ndx, total);
 
 			if (commentEndNdx == -1) {
 				commentEndNdx = total;

File: jodd-lagarto/src/main/java/jodd/lagarto/CharScanner.java
Patch:
@@ -71,7 +71,7 @@ public final int find(char[] target, int from, int end) {
 	// ---------------------------------------------------------------- match
 
 	public final boolean match(char[] target, int ndx) {
-		if (ndx + target.length > total) {
+		if (ndx + target.length >= total) {
 			return false;
 		}
 

File: jodd-lagarto/src/main/java/jodd/lagarto/TagVisitor.java
Patch:
@@ -78,4 +78,4 @@ public interface TagVisitor {
 	 */
 	void error(String message);
 
-}
+}
\ No newline at end of file

File: jodd-lagarto/src/main/java/jodd/lagarto/EmptyTagVisitor.java
Patch:
@@ -37,7 +37,7 @@ public void cdata(CharSequence cdata) {
 	public void xml(Tag tag) {
 	}
 
-	public void doctype(String name, String publicId, String baseUri) {
+	public void doctype(Doctype doctype) {
 	}
 
 	public void condComment(CharSequence expression, boolean isStartingTag, boolean isHidden, CharSequence comment) {

File: jodd-lagarto/src/main/java/jodd/lagarto/LagartoParserEngine.java
Patch:
@@ -321,7 +321,7 @@ protected void parseDoctype() throws IOException {
 		}
 
 		ctx.offset = start;
-		visitor.doctype(name, publicId, uri);
+		//visitor.doctype(name, publicId, uri);
 	}
 
 	/**

File: jodd-lagarto/src/main/java/jodd/lagarto/TagAdapter.java
Patch:
@@ -61,8 +61,8 @@ public void xml(Tag tag) {
 		target.xml(tag);
 	}
 
-	public void doctype(String name, String publicId, String baseUri) {
-		target.doctype(name, publicId, baseUri);
+	public void doctype(Doctype doctype) {
+		target.doctype(doctype);
 	}
 
 	public void condComment(CharSequence expression, boolean isStartingTag, boolean isHidden, CharSequence comment) {

File: jodd-lagarto/src/main/java/jodd/lagarto/TagAdapterWrapper.java
Patch:
@@ -65,9 +65,9 @@ public void xml(Tag tag) {
 		target.xml(tag);
 	}
 
-	public void doctype(String name, String publicId, String baseUri) {
-		visitor.doctype(name, publicId, baseUri);
-		target.doctype(name, publicId, baseUri);
+	public void doctype(Doctype doctype) {
+		visitor.doctype(doctype);
+		target.doctype(doctype);
 	}
 
 	public void condComment(CharSequence expression, boolean isStartingTag, boolean isHidden, CharSequence comment) {

File: jodd-lagarto/src/main/java/jodd/lagarto/TagVisitor.java
Patch:
@@ -70,10 +70,9 @@ public interface TagVisitor {
 	void xml(Tag tag);
 
 	/**
-	 * Invoked on DOCTYPE directive. If <code>publicId</code> is <code>null</code>, it is a SYSTEM
-	 * directive, otherwise it is PUBLIC.
+	 * Invoked on DOCTYPE directive.
 	 */
-	void doctype(String name, String publicId, String baseUri);
+	void doctype(Doctype doctype);
 
 	/**
 	 * Invoked on IE conditional comment. The <code>expression</code> if unmodified expression.

File: jodd-lagarto/src/main/java/jodd/lagarto/dom/LagartoNodeHtmlRenderer.java
Patch:
@@ -51,7 +51,9 @@ public void renderComment(Comment comment, Appendable appendable) throws IOExcep
 	 */
 	public void renderDocumentType(DocumentType documentType, Appendable appendable) throws IOException {
 		TagWriterUtil.writeDoctype(appendable,
-				documentType.nodeValue, documentType.publicId, documentType.baseUri);
+				documentType.nodeValue,
+				documentType.publicId,
+				documentType.systemId);
 	}
 
 	/**

File: jodd-core/src/test/java/jodd/util/HtmlDecoderTest.java
Patch:
@@ -101,5 +101,8 @@ public void testDetectName() {
 
 		str = "&acE".toCharArray();
 		assertEquals("acE", HtmlDecoder.detectName(str, 1));
+
+		str = "&notit".toCharArray();
+		assertEquals("not", HtmlDecoder.detectName(str, 1));
 	}
 }
\ No newline at end of file

File: jodd-bean/src/main/java/jodd/bean/BeanProperty.java
Patch:
@@ -103,7 +103,7 @@ public Setter getSetter(boolean declared) {
 	 * Returns <code>true</code> if class is a map.
 	 */
 	public boolean isMap() {
-		return cd.isMap();
+		return cd != null && cd.isMap();
 	}
 
 	String index;

File: jodd-http/src/main/java/jodd/http/Cookie.java
Patch:
@@ -58,7 +58,7 @@ public Cookie(String cookie) {
 
 			String name;
 			String value;
-			if (ndx2 != -1) {
+			if (ndx2 != -1 && ndx2 < ndx) {
 				name = cookie.substring(from, ndx2).trim();
 				value = cookie.substring(ndx2 + 1, ndx).trim();
 			} else {
@@ -313,4 +313,4 @@ public String toString() {
 		return cookie.toString();
 	}
 
-}
\ No newline at end of file
+}

File: jodd-bean/src/test/java/jodd/introspector/IntrospectorGenericsTest.java
Patch:
@@ -78,7 +78,7 @@ public void testFields() throws NoSuchFieldException {
 
 		assertEquals(Map.class, fd3.getRawType());
 		assertEquals(Integer.class, fd3.getRawComponentType());
-		assertEquals(String.class, ReflectUtil.getComponentType(fd3.getField().getGenericType(), cd.getType(), 0));
+		assertEquals(String.class, ReflectUtil.getComponentTypes(fd3.getField().getGenericType(), cd.getType())[0]);
 	}
 
 	@Test

File: jodd-core/src/test/java/jodd/util/ReflectUtilTest.java
Patch:
@@ -505,8 +505,9 @@ public void testGetFieldConcreteType() throws NoSuchFieldException {
 		Field f5 = ConcreteClass.class.getField("f5");
 		Field array1 = BaseClass.class.getField("array1");
 
-		assertEquals(String.class, ReflectUtil.getGenericSupertype(ConcreteClass.class, 0));
-		assertEquals(Integer.class, ReflectUtil.getGenericSupertype(ConcreteClass.class, 1));
+		Class[] genericSupertypes = ReflectUtil.getGenericSupertypes(ConcreteClass.class);
+		assertEquals(String.class, genericSupertypes[0]);
+		assertEquals(Integer.class, genericSupertypes[1]);
 
 		assertEquals(String.class, ReflectUtil.getRawType(f1.getGenericType(), ConcreteClass.class));
 		assertEquals(Integer.class, ReflectUtil.getRawType(f2.getGenericType(), ConcreteClass.class));

File: jodd-db/src/main/java/jodd/db/type/SqlType.java
Patch:
@@ -31,7 +31,7 @@ public abstract class SqlType<T> {
 
 	@SuppressWarnings({"unchecked"})
 	protected SqlType() {
-		this.sqlType = ReflectUtil.getGenericSupertype(this.getClass(), 0);
+		this.sqlType = ReflectUtil.getGenericSupertype(this.getClass());
 	}
 
 	/**

File: jodd-props/src/main/java/jodd/props/PropsUtil.java
Patch:
@@ -48,7 +48,7 @@ public static Props createFromClasspath(final String... patterns) {
 	}
 
 	/**
-	 * Convert Java Properties to Jodd Props format
+	 * Convert Java Properties to Jodd Props format.
 	 *
 	 * @param writer     Writer to write Props formatted file content to
 	 * @param properties Properties to convert to Props format
@@ -60,7 +60,7 @@ public static void convert(final Writer writer, final Properties properties) thr
 	}
 
 	/**
-	 * Convert Java Properties to Jodd Props format
+	 * Convert Java Properties to Jodd Props format.
 	 *
 	 * @param writer     Writer to write Props formatted file content to
 	 * @param properties Properties to convert to Props format

File: jodd-madvoc/src/testInt/java/jodd/madvoc/MadvocSuite.java
Patch:
@@ -3,7 +3,6 @@
 package jodd.madvoc;
 
 import jodd.exception.UncheckedException;
-import jodd.petite.scope.SessionScope;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.runner.RunWith;
@@ -23,6 +22,7 @@
 		AlphaTest.class,
 		ArgsTest.class,
 		TypesTest.class,
+		ExcTest.class,
 })
 public class MadvocSuite {
 

File: jodd-db/src/main/java/jodd/db/oom/sqlgen/chunks/ColumnsSelectChunk.java
Patch:
@@ -21,7 +21,7 @@
  * There are some special values for propertyName
  * <ul>
  * <li>wildcard (*), all table columns will be listed</li>
- * <li>id sign (+), all table id columns will be listed</li?
+ * <li>id sign (+), all table id columns will be listed</li>
  * </ul>
  * <p>
  * If previous chunk is also a column chunk, comma separator will be added in between.

File: jodd-lagarto-web/src/main/java/jodd/decora/DecoraManager.java
Patch:
@@ -44,7 +44,7 @@ public boolean decorateContentType(String contentType, String mimeType, String e
 	/**
 	 * Determines if buffering should be used for some HTTP status code.
 	 * By default returns <code>true</code> for status code 200 and, optionally,
-	 * for error pages (status code >= 400).
+	 * for error pages (status code {@literal >=} 400).
 	 */
 	public boolean decorateStatusCode(int statusCode) {
 		return (statusCode == 200) || (decorateErrorPages && statusCode >= 400);

File: jodd-madvoc/src/main/java/jodd/madvoc/MadvocResponseWrapper.java
Patch:
@@ -20,8 +20,8 @@
  * may be called more times, and its on servlet container how to deal with character encodings.
  * For example, if user set content type with following values:
  * <ul>
- *     <ol><code>text/html;charset="UTF-8"</code></ol>
- *     <ol><code>image/png"</code></ol>
+ *     <li>text/html;charset="UTF-8"</li>
+ *     <li>image/png</li>
  * </ul>
  * the question is would the second call reset the character or not. Tomcat 6-7, for example,
  * does not reset the charset on content type change. In our opinion this is an error

File: jodd-mail/src/main/java/jodd/mail/EmailUtil.java
Patch:
@@ -96,7 +96,7 @@ public static String[] address2String(Address[] addresses) {
 	 * The email can be given in following form:
 	 * <ul>
 	 *     <li>"email" - the whole string is an email</li>
-	 *     <li>"personal <email>" - first part of the string is personal, and
+	 *     <li>"personal {@literal <email>}" - first part of the string is personal, and
 	 *     		the other part is email, surrounded with &lt; and &gt;</li>
 	 * </ul>
 	 */

File: jodd-mail/src/main/java/jodd/mail/MailSystem.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * Defines mail system behavior. Override this class if you have special needs or
  * simply set parameters manually, but <b>before</b> first Mail use.
- * Be sure to use java mail >= v1.4.4.
+ * Be sure to use java mail {@literal >=} v1.4.4.
  */
 public class MailSystem {
 

File: jodd-props/src/main/java/jodd/props/Props.java
Patch:
@@ -106,7 +106,7 @@ public String[] getActiveProfiles() {
 	/**
 	 * Sets new active profiles and overrides existing ones.
 	 * By setting <code>null</code>, no active profile will be set.
-	 * <pr>
+	 * <p>
 	 * Note that if some props are loaded <b>after</b>
 	 * this method call, they might override active profiles
 	 * by using special property for active profiles (<code>@profiles</code>).

File: jodd-proxetta/src/main/java/jodd/asm/AsmUtil.java
Patch:
@@ -163,7 +163,7 @@ public static String typedescToSignature(String desc) {
 	 * the value of a variable. It is a series of bytes generated by the
 	 * following grammar:
 	 *
-	 * <PRE>
+	 * <PRE>{@code
 	 * <field_signature> ::= <field_type>
 	 * <field_type>      ::= <base_type>|<object_type>|<array_type>
 	 * <base_type>       ::= B|C|D|F|I|J|S|Z
@@ -181,7 +181,7 @@ public static String typedescToSignature(String desc) {
 	 * S short signed short
 	 * Z boolean true or false
 	 * [<field sig> ... array
-	 * </PRE>
+	 * }</PRE>
 	 *
 	 * This method converts this string into a Java type declaration such as
 	 * <code>String[]</code>.

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaMethodBuilder.java
Patch:
@@ -50,7 +50,7 @@ public ProxettaMethodBuilder(MethodSignatureVisitor msign, WorkData wd, List<Pro
 	// ---------------------------------------------------------------- visits
 
 	/**
-	 * Copies target method annotations
+	 * Copies target method annotations.
 	 */
 	@Override
 	public AnnotationVisitor visitAnnotation(String desc, boolean visible) {
@@ -136,7 +136,7 @@ protected void createFirstChainDelegate_Continue(TargetMethodData tmd) {
 	 * Creates proxy methods over target method, For each matched proxy, new proxy method is created
 	 * by taking advice bytecode and replaces usages of {@link jodd.proxetta.ProxyTarget}.
 	 * <p>
-	 * Invocation chain example: name -> name$p0 -> name$p1 -> name$p4 -> super
+	 * Invocation chain example: {@code name -> name$p0 -> name$p1 -> name$p4 -> super}.
 	 */
 	public void createProxyMethod(final TargetMethodData td) {
 		final ProxyAspectData aspectData = td.getProxyData();

File: jodd-servlet/src/main/java/jodd/servlet/HtmlTag.java
Patch:
@@ -106,7 +106,7 @@ public int getStartIndex() {
 	}
 
 	/**
-	 * Returns <code>true</code> if tag is closed (ends with '/&gt;').
+	 * Returns <code>true</code> if tag is closed (ends with '{@literal />}').
 	 */
 	public boolean isClosedTag() {
 		return isClosedTag;
@@ -205,7 +205,7 @@ public void removeAttribute(String attrName) {
 
 	/**
 	 * Adds attribute and its value to a tag. Attribute is added to the end of
-	 * the tag, just before closing '>'. If name is not specified, nothing will
+	 * the tag, just before closing '{@literal >}'. If name is not specified, nothing will
 	 * be added. If value is not specified, it will be set to an empty string.
 	 */
 	public void setAttribute(String name, String value) {
@@ -216,7 +216,7 @@ public void setAttribute(String name, String value) {
 
 	/**
 	 * Adds single attribute without value to a tag. Attribute is added to the
-	 * end of the tag, just before closing '>'. If name is not specified, nothing
+	 * end of the tag, just before closing '{@literal >}'. If name is not specified, nothing
 	 * will be added.
 	 */
 	public void setAttribute(String name) {

File: jodd-core/src/main/java/jodd/package-info.java
Patch:
@@ -1,6 +1,6 @@
 // Copyright (c) 2003-2014, Jodd Team (jodd.org). All Rights Reserved.
 
 /**
- * Jodd = tools + ioc + mvc + db + aop + tx + html < 1.1M
+ * Jodd = tools + ioc + mvc + db + aop + tx + html {@literal <} 1.1M
  */
 package jodd;
\ No newline at end of file

File: jodd-core/src/main/java/jodd/typeconverter/impl/URIConverter.java
Patch:
@@ -13,7 +13,7 @@
 /**
  * Convert given object to <code>URI</code>.
  * Conversion rules:
- * <ul></ul>
+ * <ul>
  * <li><code>null</code> value is returned as <code>null</code></li>
  * <li>object of destination type is simply casted</li>
  * <li><code>File</code> is converted</li>

File: jodd-core/src/main/java/jodd/util/CharUtil.java
Patch:
@@ -237,7 +237,7 @@ public static int findFirstDiff(char[] source, int index, char match) {
 	// ---------------------------------------------------------------- is
 
 	/**
-	 * Returns <code>true</code> if character is a white space (<= ' ').
+	 * Returns <code>true</code> if character is a white space ({@code <= ' '}).
 	 * White space definition is taken from String class (see: <code>trim()</code>).
 	 */
 	public static boolean isWhitespace(char c) {

File: jodd-core/src/main/java/jodd/util/URLCoder.java
Patch:
@@ -310,7 +310,7 @@ public static String encodeUri(String uri) {
 	/**
 	 * Encodes the given source URI into an encoded String. All various URI components are
 	 * encoded according to their respective valid character sets.
-	 * <p>This method does <b>not</b> attempt to encode "=" and "&"
+	 * <p>This method does <b>not</b> attempt to encode "=" and "{@literal &}"
 	 * characters in query parameter names and query parameter values because they cannot
 	 * be parsed in a reliable way.
 	 */
@@ -342,7 +342,7 @@ public static String encodeHttpUrl(String httpUrl) {
 	 * encoded according to their respective valid character sets.
 	 * <p>This method does <b>not</b> support fragments ({@code #}),
 	 * as these are not supposed to be sent to the server, but retained by the client.
-	 * <p>This method does <b>not</b> attempt to encode "=" and "&"
+	 * <p>This method does <b>not</b> attempt to encode "=" and "{@literal &}"
 	 * characters in query parameter names and query parameter values because they cannot
 	 * be parsed in a reliable way.
 	 */

File: jodd-core/src/main/java/jodd/util/sort/FastSort.java
Patch:
@@ -7,7 +7,7 @@
 /**
  * Fast sort.
  * <p>
- * In JDK < v7, implementation of merge sort (implemented in <code>Arrays.sort</code>) is
+ * In JDK {@literal <} v7, implementation of merge sort (implemented in <code>Arrays.sort</code>) is
  * not the best one: there is redundant object array cloning, many small methods that
  * can be inlined etc.
  * <p>

File: jodd-http/src/test/java/jodd/http/NanoHTTPD.java
Patch:
@@ -691,8 +691,8 @@ private int stripMultipartHeaders(byte[] b, int offset)
 		}
 
 		/**
-		 * Decodes the percent encoding scheme. <br/>
-		 * For example: "an+example%20string" -> "an example string"
+		 * Decodes the percent encoding scheme.
+		 * For example: {@code "an+example%20string" -> "an example string"}
 		 */
 		private String decodePercent( String str ) throws InterruptedException
 		{

File: jodd-lagarto/src/main/java/jodd/lagarto/Tag.java
Patch:
@@ -165,7 +165,7 @@ public interface Tag {
 
 	/**
 	 * Get the complete tag.
-	 * <p/>
+	 * <p>
 	 * This is a bit slower method in that it needs to construct a String and generates tag always.
 	 * Use it for debugging purposes.
 	 */

File: jodd-mail/src/main/java/jodd/mail/EmailAddress.java
Patch:
@@ -90,8 +90,8 @@ public class EmailAddress {
 	/**
 	 * This constant states that domain literals are allowed in the email address, e.g.:
 	 * <p>
-	 * <p><tt>someone@[192.168.1.100]</tt> or <br/>
-	 * <tt>john.doe@[23:33:A2:22:16:1F]</tt> or <br/>
+	 * <p><tt>someone@[192.168.1.100]</tt> or <br>
+	 * <tt>john.doe@[23:33:A2:22:16:1F]</tt> or <br>
 	 * <tt>me@[my computer]</tt></p>
 	 * <p>
 	 * <p>The RFC says these are valid email addresses, but most people don't like allowing them.

File: jodd-core/src/test/java/jodd/format/FormatTest.java
Patch:
@@ -267,8 +267,8 @@ public void testFloats() {
 		assertEquals(" 1.7", Printf.str("%4.1f", 1.7));
 		assertEquals("1.70", Printf.str("%4.2f", 1.7));
 		assertEquals("1.80", Printf.str("%4.2f", 1.79999999999));
-
-		assertEquals("0", Printf.str("%1.0f", 0.50));
+		assertEquals("0", Printf.str("%1.0f", 0.4999));
+		assertEquals("1", Printf.str("%1.0f", 0.50));
 		assertEquals("1", Printf.str("%1.0f", 0.51)); 
 		assertEquals("1.01", Printf.str("%3.2f", 1.0051));
 		assertEquals("1.01", Printf.str("%3.2f", 1.0099));

File: jodd-core/src/main/java/jodd/format/PrintfFormat.java
Patch:
@@ -422,7 +422,7 @@ protected String groupDigits(String value, int size, char separator) {
 	public String form(char value) {
 		switch(fmt) {
 			case 'c':
-				return alternate ? "\\u" + form((short) value) : pad(String.valueOf(value));
+				return alternate ? "\\u" + pad(Printf.str("%x", (short) value)) : pad(String.valueOf(value));
 			case 'd':
 			case 'i':
 			case 'u':

File: jodd-bean/src/main/java/jodd/introspector/FieldDescriptor.java
Patch:
@@ -98,6 +98,9 @@ public Class getSetterRawType() {
 		return getRawType();
 	}
 
+	public Class getSetterRawComponentType() {
+		return getRawComponentType();
+	}
 
 	// ---------------------------------------------------------------- toString
 

File: jodd-bean/src/main/java/jodd/introspector/Setter.java
Patch:
@@ -13,4 +13,6 @@ public interface Setter {
 
 	Class getSetterRawType();
 
+	Class getSetterRawComponentType();
+
 }
\ No newline at end of file

File: jodd-madvoc/src/main/java/jodd/madvoc/injector/ApplicationScopeInjector.java
Patch:
@@ -5,6 +5,7 @@
 import jodd.madvoc.ActionRequest;
 import jodd.madvoc.ScopeData;
 import jodd.madvoc.ScopeType;
+import jodd.madvoc.component.MadvocConfig;
 import jodd.madvoc.component.ScopeDataResolver;
 
 import javax.servlet.ServletContext;
@@ -16,8 +17,8 @@
 public class ApplicationScopeInjector extends BaseScopeInjector
 		implements Injector, Outjector, ContextInjector<ServletContext> {
 
-	public ApplicationScopeInjector(ScopeDataResolver scopeDataResolver) {
-		super(ScopeType.APPLICATION, scopeDataResolver);
+	public ApplicationScopeInjector(MadvocConfig madvocConfig, ScopeDataResolver scopeDataResolver) {
+		super(ScopeType.APPLICATION, madvocConfig, scopeDataResolver);
 	}
 
 	public void inject(ActionRequest actionRequest) {

File: jodd-madvoc/src/main/java/jodd/madvoc/injector/MadvocContextScopeInjector.java
Patch:
@@ -6,6 +6,7 @@
 import jodd.madvoc.ActionRequest;
 import jodd.madvoc.ScopeData;
 import jodd.madvoc.ScopeType;
+import jodd.madvoc.component.MadvocConfig;
 import jodd.madvoc.component.ScopeDataResolver;
 import jodd.petite.PetiteContainer;
 
@@ -18,8 +19,8 @@ public class MadvocContextScopeInjector extends BaseScopeInjector
 
 	protected final PetiteContainer madpc;
 
-	public MadvocContextScopeInjector(ScopeDataResolver scopeDataResolver, PetiteContainer madpc) {
-		super(ScopeType.CONTEXT, scopeDataResolver);
+	public MadvocContextScopeInjector(MadvocConfig madvocConfig, ScopeDataResolver scopeDataResolver, PetiteContainer madpc) {
+		super(ScopeType.CONTEXT, madvocConfig, scopeDataResolver);
 		this.madpc = madpc;
 	}
 

File: jodd-madvoc/src/main/java/jodd/madvoc/injector/ServletContextScopeInjector.java
Patch:
@@ -6,6 +6,7 @@
 import jodd.madvoc.ActionRequest;
 import jodd.madvoc.ScopeData;
 import jodd.madvoc.ScopeType;
+import jodd.madvoc.component.MadvocConfig;
 import jodd.madvoc.component.ScopeDataResolver;
 import jodd.servlet.CsrfShield;
 import jodd.servlet.map.HttpServletContextMap;
@@ -44,8 +45,8 @@ public class ServletContextScopeInjector extends BaseScopeInjector
 
 	public static final String CSRF_NAME = "csrfTokenValid";
 
-	public ServletContextScopeInjector(ScopeDataResolver scopeDataResolver) {
-		super(ScopeType.SERVLET, scopeDataResolver);
+	public ServletContextScopeInjector(MadvocConfig madvocConfig, ScopeDataResolver scopeDataResolver) {
+		super(ScopeType.SERVLET, madvocConfig, scopeDataResolver);
 	}
 
 	/**

File: jodd-madvoc/src/main/java/jodd/madvoc/injector/SessionScopeInjector.java
Patch:
@@ -5,6 +5,7 @@
 import jodd.madvoc.ActionRequest;
 import jodd.madvoc.ScopeData;
 import jodd.madvoc.ScopeType;
+import jodd.madvoc.component.MadvocConfig;
 import jodd.madvoc.component.ScopeDataResolver;
 
 import javax.servlet.http.HttpSession;
@@ -16,8 +17,8 @@
  */
 public class SessionScopeInjector extends BaseScopeInjector implements Injector, Outjector {
 
-	public SessionScopeInjector(ScopeDataResolver scopeDataResolver) {
-		super(ScopeType.SESSION, scopeDataResolver);
+	public SessionScopeInjector(MadvocConfig madvocConfig, ScopeDataResolver scopeDataResolver) {
+		super(ScopeType.SESSION, madvocConfig, scopeDataResolver);
 	}
 
 	public void inject(ActionRequest actionRequest) {

File: jodd-madvoc/src/main/java/jodd/madvoc/interceptor/IdRequestInjectorInterceptor.java
Patch:
@@ -13,6 +13,7 @@
 /**
  * Injects only ID request attributes and parameters that ends with '.id'.
  * @see PrepareAndIdInjectorInterceptor
+ * todo remove? ".id" is not uniqe, i.e. property may be named "userId" or add both types
  */
 public class IdRequestInjectorInterceptor extends BaseActionInterceptor {
 

File: jodd-madvoc/src/testInt/java/jodd/madvoc/MadvocSuite.java
Patch:
@@ -22,6 +22,7 @@
 		SessionScopeTest.class,
 		AlphaTest.class,
 		ArgsTest.class,
+		//TypesTest.class,
 })
 public class MadvocSuite {
 

File: jodd-madvoc/src/main/java/jodd/madvoc/component/ActionsManager.java
Patch:
@@ -235,6 +235,7 @@ protected ActionConfigSet createActionConfigSet(String actionPath) {
 	 * If action path is not registered, it is split into chunks
 	 * and match against macros.
 	 * Returns <code>null</code> if action path is not registered.
+	 * <code>method</code> must be in uppercase.
 	 */
 	public ActionConfig lookup(String actionPath, String method) {
 

File: jodd-madvoc/src/main/java/jodd/madvoc/component/MadvocController.java
Patch:
@@ -80,6 +80,7 @@ public String invoke(String actionPath, HttpServletRequest servletRequest, HttpS
 
 			// build action path
 			String httpMethod = servletRequest.getMethod().toUpperCase();
+
 			actionPath = actionPathRewriter.rewrite(servletRequest, actionPath, httpMethod);
 
 			// resolve action configuration

File: jodd-madvoc/src/test/java/jodd/madvoc/tst/BooAction.java
Patch:
@@ -25,7 +25,7 @@ public void foo4() {}
 	@Action(value = "/xxx", extension = "not used!", method = "DELETE")
 	public void foo41() {}
 
-	@Action(value = "/xxx.[ext]", alias = "dude", method = "POST")
+	@Action(value = "/xxx.[ext]", alias = "dude", method = "post")
 	public void foo5() {}
 
 	@Action(value = "q[method]2")

File: jodd-madvoc/src/main/java/jodd/madvoc/ActionRequest.java
Patch:
@@ -13,6 +13,7 @@
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Modifier;
 
 
 /**
@@ -215,8 +216,8 @@ protected Object[] createActionMethodArguments() {
 			Class type = types[i];
 
 			try {
-				if (type.getEnclosingClass() == null) {
-					// static class
+				if (type.getEnclosingClass() == null || Modifier.isStatic(type.getModifiers())) {
+					// regular or static class
 					params[i] = type.newInstance();
 				} else {
 					// member class

File: jodd-madvoc/src/testInt/java/jodd/madvoc/ArgsTest.java
Patch:
@@ -27,7 +27,7 @@ public void testArgs() {
 		HttpResponse response;
 		response = HttpRequest.get("localhost:8080/args.hello.html?id=1").send();
 
-		assertEquals("+ mad 1", response.bodyText().trim());
+		assertEquals("+ mad 1voc + jodd 1", response.bodyText().trim());
 	}
 
 }
\ No newline at end of file

File: jodd-madvoc/src/main/java/jodd/madvoc/injector/ApplicationScopeInjector.java
Patch:
@@ -52,8 +52,8 @@ public void inject(ActionRequest actionRequest) {
 		}
 	}
 
-	public void injectContext(Object target, ServletContext servletContext) {
-		ScopeData.In[] injectData = resolveInData(target.getClass());
+	public void injectContext(Object target, ScopeData[] scopeData, ServletContext servletContext) {
+		ScopeData.In[] injectData = lookupInData(scopeData);
 		if (injectData == null) {
 			return;
 		}

File: jodd-madvoc/src/main/java/jodd/madvoc/injector/MadvocContextScopeInjector.java
Patch:
@@ -23,8 +23,8 @@ public MadvocContextScopeInjector(ScopeDataResolver scopeDataResolver, PetiteCon
 		this.madpc = madpc;
 	}
 
-	public void injectContext(Object target, PetiteContainer madpc) {
-		ScopeData.In[] injectData = resolveInData(target.getClass());
+	public void injectContext(Object target, ScopeData[] scopeData, PetiteContainer madpc) {
+		ScopeData.In[] injectData = lookupInData(scopeData);
 		if (injectData == null) {
 			return;
 		}

File: jodd-madvoc/src/main/java/jodd/madvoc/injector/MadvocParamsInjector.java
Patch:
@@ -3,6 +3,7 @@
 package jodd.madvoc.injector;
 
 import jodd.bean.BeanUtil;
+import jodd.madvoc.ScopeData;
 import jodd.petite.ParamManager;
 import jodd.petite.PetiteContainer;
 
@@ -22,8 +23,9 @@ public MadvocParamsInjector(PetiteContainer madpc) {
 	/**
 	 * Injects all matching parameters to target instance.
 	 * Matching parameters are named as given base name.
+	 * @param scopeData scope data is not used!
 	 */
-	public void injectContext(Object target, String baseName) {
+	public void injectContext(Object target, ScopeData[] scopeData, String baseName) {
 		String[] params = madvocPetiteParamManager.resolve(baseName, true);
 
 		for (String param : params) {

File: jodd-madvoc/src/main/java/jodd/madvoc/injector/ServletContextScopeInjector.java
Patch:
@@ -135,8 +135,8 @@ public void inject(ActionRequest actionRequest) {
 	/**
 	 * Injects just context.
 	 */
-	public void injectContext(Object target, ServletContext servletContext) {
-		ScopeData.In[] injectData = resolveInData(target.getClass());
+	public void injectContext(Object target, ScopeData[] scopeData, ServletContext servletContext) {
+		ScopeData.In[] injectData = lookupInData(scopeData);
 		if (injectData == null) {
 			return;
 		}

File: jodd-madvoc/src/test/java/jodd/madvoc/component/InterceptorsManagerTest.java
Patch:
@@ -65,6 +65,7 @@ public void testExpandStack() {
 		im.contextInjectorComponent = new ContextInjectorComponent();
 		im.contextInjectorComponent.injectorsManager = injectorsManager;
 		im.contextInjectorComponent.madvocController = new MadvocController();
+		im.contextInjectorComponent.scopeDataResolver = injectorsManager.scopeDataResolver;
 		im.madvocConfig = injectorsManager.madvocConfig;
 		im.madvocConfig.defaultInterceptors = new Class[]{EchoInterceptor.class, ServletConfigInterceptor.class};
 
@@ -100,6 +101,7 @@ public void testExpandConfigurableStack() {
 		im.contextInjectorComponent = new ContextInjectorComponent();
 		im.contextInjectorComponent.injectorsManager = injectorsManager;
 		im.contextInjectorComponent.madvocController = new MadvocController();
+		im.contextInjectorComponent.scopeDataResolver = injectorsManager.scopeDataResolver;
 		im.madvocConfig = injectorsManager.madvocConfig;
 		im.madvocConfig.defaultInterceptors = new Class[]{EchoInterceptor.class, ServletConfigInterceptor.class};
 
@@ -173,6 +175,7 @@ public void testExpandStack2() {
 		im.contextInjectorComponent = new ContextInjectorComponent();
 		im.contextInjectorComponent.injectorsManager = injectorsManager;
 		im.contextInjectorComponent.madvocController = new MadvocController();
+		im.contextInjectorComponent.scopeDataResolver = injectorsManager.scopeDataResolver;
 		im.madvocConfig = injectorsManager.madvocConfig;
 		im.madvocConfig.defaultInterceptors = new Class[]{EchoInterceptor.class, ServletConfigInterceptor.class, Test2Stack.class};
 

File: jodd-madvoc/src/test/java/jodd/madvoc/injector/MadvocParamsInjectorTest.java
Patch:
@@ -2,6 +2,7 @@
 
 package jodd.madvoc.injector;
 
+import jodd.madvoc.ScopeData;
 import jodd.petite.PetiteContainer;
 import org.junit.Test;
 
@@ -24,7 +25,7 @@ public void testInjection() {
 
 		FooBean fooBean = new FooBean();
 
-		madvocParamsInjector.injectContext(fooBean, baseName);
+		madvocParamsInjector.injectContext(fooBean, null, baseName);
 
 		assertEquals(173, fooBean.getInteger().intValue());
 		assertEquals("jodd", fooBean.getString());

File: jodd-db/src/main/java/jodd/db/oom/sqlgen/DbEntitySql.java
Patch:
@@ -243,7 +243,7 @@ public static DbSqlBuilder countAll(Object entity) {
 	protected static String createTableRefName(Object entity) {
 		Class type = entity.getClass();
 		type = (type == Class.class ? (Class) entity : type);
-		return type.getSimpleName();
+		return (type.getSimpleName() + '_');
 	}
 
 }

File: jodd-db/src/test/java/jodd/db/oom/KeyTest.java
Patch:
@@ -14,6 +14,7 @@ public class KeyTest {
 	@Test
 	public void testEqualEntities() {
 		DbOomManager dbOomManager = DbOomManager.getInstance();
+		dbOomManager.reset();
 
 		DbEntityDescriptor<Foo> fooded = dbOomManager.registerEntity(Foo.class);
 		DbEntityDescriptor<Bar> barded = dbOomManager.registerEntity(Bar.class);

File: jodd-lagarto/src/test/java/jodd/jerry/JerryMiscTest.java
Patch:
@@ -9,6 +9,7 @@
 import jodd.lagarto.dom.Element;
 import jodd.lagarto.dom.LagartoDOMBuilder;
 import jodd.lagarto.dom.Node;
+import jodd.util.StringUtil;
 import org.junit.Test;
 
 import java.util.Iterator;
@@ -242,7 +243,7 @@ public void testCustomerDetails() {
 		doc.$("p").each(new JerryFunction() {
 			public boolean onNode(Jerry $this, int index) {
 				String innerHtml = $this.html();
-				innerHtml = innerHtml.replace("{customerDetails}", "Jodd <b>rocks</b>");
+				innerHtml = StringUtil.replace(innerHtml, "{customerDetails}", "Jodd <b>rocks</b>");
 				$this.html(innerHtml);
 				return true;
 			}

File: jodd-swingspy/src/main/java/jodd/swingspy/SwingSpyPanel.java
Patch:
@@ -218,8 +218,8 @@ public String toDetailedString() {
 	}
 
 	private static String htmlSafe(String str) {
-		str = str.replace("<", "&gt;");
-		str = str.replace(">", "&lt;");
+		str = str.replace(">", "&gt;");
+		str = str.replace("<", "&lt;");
 		str = str.replace(" ", "&nbsp;");
 		str = str.replace("\n", "<br>");
 		return str;

File: jodd-swingspy/src/main/java/jodd/swingspy/SwingSpyPanel.java
Patch:
@@ -291,7 +291,7 @@ static class SwingComponentRenderer extends DefaultTreeCellRenderer {
 					createImageIcon(packageName + "label.png"),
 					createImageIcon(packageName + "list.png"),
 					createImageIcon(packageName + "panel.png"),
-					createImageIcon(packageName + "progressBar.png"),
+					createImageIcon(packageName + "progressbar.png"),
 					createImageIcon(packageName + "radioButton.png"),
 					createImageIcon(packageName + "scrollbar.png"),
 					createImageIcon(packageName + "scrollPane.png"),

File: jodd-joy/src/test/java/jodd/joy/db/DbTestEntity.java
Patch:
@@ -4,7 +4,7 @@
 
 import jodd.db.oom.meta.DbId;
 
-public abstract class DbEntity extends Entity {
+public abstract class DbTestEntity extends Entity {
 
 	@DbId
 	protected Long id;

File: jodd-joy/src/test/java/jodd/joy/db/Girl.java
Patch:
@@ -6,7 +6,7 @@
 import jodd.db.oom.meta.DbTable;
 
 @DbTable
-public class Girl extends DbEntity {
+public class Girl extends DbTestEntity {
 
 	@DbColumn
 	protected String name;

File: jodd-joy/src/test/java/jodd/joy/page/PageDataTest.java
Patch:
@@ -166,7 +166,6 @@ public void testFlow() {
 
 		PageData pageData = new PageData(1, 100, 0);
 		assertEquals(1, pageData.getCurrentPage());
-
 	}
 
-}
+}
\ No newline at end of file

File: jodd-joy/src/test/java/jodd/joy/jspp/JsppTest.java
Patch:
@@ -15,12 +15,12 @@ public void testJspp() {
 		Jspp jspp = new Jspp() {
 			@Override
 			protected String loadMacro(String macroName) {
-				return "Hello $name";
+				return "Hello ${name}";
 			}
 		};
 
 		String result = jspp.process(content);
 
-		assertEquals("<h1>hello</h1>Hello $nameHello jpp", result);
+		assertEquals("<h1>hello</h1>Hello ${name}Hello jpp", result);
 	}
 }
\ No newline at end of file

File: jodd-madvoc/src/main/java/jodd/madvoc/result/RawResultData.java
Patch:
@@ -2,14 +2,11 @@
 
 package jodd.madvoc.result;
 
-import jodd.madvoc.meta.RenderWith;
-
 import java.io.InputStream;
 
 /**
  * Holder for Raw results.
  */
-@RenderWith(RawResult.class)
 public abstract class RawResultData {
 
 	protected final InputStream inputStream;

File: jodd-madvoc/src/test/java/jodd/madvoc/ActionResultTest.java
Patch:
@@ -132,10 +132,10 @@ public void testMethodWithPrefix() {
 		assertEquals("/WEB-INF/boo.foo", resultPath.getPathValue());
 
 		resultPath = resultMapper.resolveResultPath(path, "/xxx");
-		assertEquals("/WEB-INF/xxx", resultPath.getPathValue());
+		assertEquals("/xxx", resultPath.getPathValue());
 
 		resultPath = resultMapper.resolveResultPath(path, "/xxx.ext");
-		assertEquals("/WEB-INF/xxx.ext", resultPath.getPathValue());
+		assertEquals("/xxx.ext", resultPath.getPathValue());
 	}
 
 	@Test

File: jodd-madvoc/src/testInt/java/jodd/madvoc/MyWebApplication.java
Patch:
@@ -25,6 +25,5 @@ protected void initInterceptors(InterceptorsManager interceptorsManager) {
 	@Override
 	protected void init(MadvocConfig madvocConfig, ServletContext servletContext) {
 		super.init(madvocConfig, servletContext);
-		madvocConfig.setCreateDefaultAliases(true);
 	}
 }
\ No newline at end of file

File: jodd-http/src/main/java/jodd/http/HttpBrowser.java
Patch:
@@ -101,7 +101,7 @@ public HttpResponse sendRequest(HttpRequest httpRequest) {
 				if (previouseResponse == null) {
 					this.httpResponse = httpRequest.open(httpConnectionProvider).connectionKeepAlive(true).send();
 				} else {
-					this.httpResponse = httpRequest.keepAliveContinue(previouseResponse).send();
+					this.httpResponse = httpRequest.keepAlive(previouseResponse, true).send();
 				}
 			}
 

File: jodd-joy/src/main/java/jodd/joy/madvoc/result/VtorJsonResult.java
Patch:
@@ -9,7 +9,7 @@
 import jodd.madvoc.ScopeType;
 import jodd.madvoc.component.MadvocConfig;
 import jodd.madvoc.meta.In;
-import jodd.madvoc.result.ActionResult;
+import jodd.madvoc.result.BaseActionResult;
 import jodd.util.CharUtil;
 import jodd.util.MimeTypes;
 import jodd.vtor.Violation;
@@ -22,7 +22,7 @@
 /**
  * vtor json result.
  */
-public class VtorJsonResult extends ActionResult {
+public class VtorJsonResult extends BaseActionResult {
 
 	public static final String NAME = "vtor-json";
 
@@ -47,7 +47,6 @@ public VtorJsonResult() {
 	protected MadvocConfig madvocConfig;
 
 
-	@Override
 	public void render(ActionRequest actionRequest, Object resultObject, String resultValue, String resultPath) throws Exception {
 		HttpServletRequest request = actionRequest.getHttpServletRequest();
 		HttpServletResponse response = actionRequest.getHttpServletResponse();

File: jodd-madvoc/src/main/java/jodd/madvoc/action/ListMadvocConfig.java
Patch:
@@ -92,7 +92,7 @@ protected void collectActionResults() {
 		results.addAll(resultsValues);
 		Collections.sort(results, new Comparator<ActionResult>() {
 			public int compare(ActionResult a1, ActionResult a2) {
-				return a1.getType().compareTo(a2.getType());
+				return a1.getClass().getSimpleName().compareTo(a2.getClass().getSimpleName());
 			}
 		});
 	}

File: jodd-madvoc/src/main/java/jodd/madvoc/config/ManualMadvocConfigurator.java
Patch:
@@ -167,7 +167,7 @@ public ActionBuilder result(Class<? extends ActionResult> resultClass) {
 			if (actionResult == null) {
 				actionResult = resultsManager.register(resultClass);
 			}
-			resultType = actionResult.getType();
+			resultType = actionResult.getResultType();
 			return this;
 		}
 

File: jodd-madvoc/src/main/java/jodd/madvoc/result/ChainResult.java
Patch:
@@ -10,7 +10,7 @@
  * happens after the complete execution of current one: after all interceptors and this result has been
  * finished.
  */
-public class ChainResult extends ActionResult {
+public class ChainResult extends BaseActionResult {
 
 	public static final String NAME = "chain";
 
@@ -21,7 +21,6 @@ public ChainResult() {
 	/**
 	 * Simply sets the next action request for the chain.
 	 */
-	@Override
 	public void render(ActionRequest actionRequest, Object resultObject, String resultValue, String resultPath) throws Exception {
 		actionRequest.setNextActionPath(resultPath);
 	}

File: jodd-madvoc/src/main/java/jodd/madvoc/result/HttpStatusResult.java
Patch:
@@ -10,15 +10,14 @@
 /**
  * Sets HTTP status or error code.
  */
-public class HttpStatusResult extends ActionResult {
+public class HttpStatusResult extends BaseActionResult {
 
 	public static final String NAME = "http";
 
 	public HttpStatusResult() {
 		super(NAME);
 	}
 
-	@Override
 	public void render(ActionRequest actionRequest, Object resultObject, String resultValue, String resultPath) throws Exception {
 		HttpServletResponse response = actionRequest.getHttpServletResponse();
 		boolean isError = false;
@@ -33,4 +32,4 @@ public void render(ActionRequest actionRequest, Object resultObject, String resu
 		}
 
 	}
-}
+}
\ No newline at end of file

File: jodd-madvoc/src/main/java/jodd/madvoc/result/MoveResult.java
Patch:
@@ -16,7 +16,7 @@
 /**
  * Process move results.
  */
-public class MoveResult extends ActionResult {
+public class MoveResult extends BaseActionResult {
 
 	public static final String NAME = "move";
 
@@ -37,7 +37,6 @@ protected String generateUniqueId() {
 	/**
 	 * Saves action in the session under some id that is added as request parameter.
 	 */
-	@Override
 	public void render(ActionRequest actionRequest, Object resultObject, String resultValue, String resultPath) throws Exception {
 		HttpServletRequest httpServletRequest = actionRequest.getHttpServletRequest();
 		HttpSession session = httpServletRequest.getSession();

File: jodd-madvoc/src/main/java/jodd/madvoc/result/NoneResult.java
Patch:
@@ -7,7 +7,7 @@
 /**
  * None result processing, for direct outputs.
  */
-public class NoneResult extends ActionResult {
+public class NoneResult extends BaseActionResult {
 	
 	public static final String NAME = "none";
 	
@@ -18,7 +18,6 @@ public NoneResult() {
 	/**
 	 * Executes result on given action result value.
 	 */
-	@Override
 	public void render(ActionRequest actionRequest, Object resultObject, String resultValue, String resultPath) throws Exception {
 		// none, direct output
 	}

File: jodd-madvoc/src/main/java/jodd/madvoc/result/RawResult.java
Patch:
@@ -19,7 +19,7 @@
  * Content type and charset encoding (e.g. set by Madvoc) is ignored
  * and new values should be set here. Output is closed after writing.
  */
-public class RawResult extends ActionResult {
+public class RawResult extends BaseActionResult {
 
 	public static final String NAME = "raw";
 
@@ -30,7 +30,6 @@ public RawResult() {
 	@In(scope = ScopeType.CONTEXT)
 	protected MadvocConfig madvocConfig;
 
-	@Override
 	public void render(ActionRequest actionRequest, Object resultObject, String resultValue, String resultPath) throws IOException {
 		if (resultObject == null) {
 			return;

File: jodd-madvoc/src/main/java/jodd/madvoc/result/ServletRedirectResult.java
Patch:
@@ -15,11 +15,11 @@
  * 
  * @see ServletDispatcherResult
  */
-public class ServletRedirectResult extends ActionResult {
+public class ServletRedirectResult extends BaseActionResult {
 
 	public static final String NAME = "redirect";
 
-	private static BeanTemplateParser beanTemplateParser = new BeanTemplateParser();
+	protected BeanTemplateParser beanTemplateParser = new BeanTemplateParser();
 
 	public ServletRedirectResult() {
 		super(NAME);
@@ -28,7 +28,6 @@ public ServletRedirectResult() {
 	/**
 	 * Redirects to the given location. Provided path is parsed, action is used as a value context.
 	 */
-	@Override
 	public void render(ActionRequest actionRequest, Object resultObject, String resultValue, String resultPath) throws Exception {
 		HttpServletRequest request = actionRequest.getHttpServletRequest();
 		HttpServletResponse response = actionRequest.getHttpServletResponse();

File: jodd-madvoc/src/main/java/jodd/madvoc/result/ServletUrlRedirectResult.java
Patch:
@@ -9,11 +9,11 @@
 /**
  * Simply sends redirect to an external location.
  */
-public class ServletUrlRedirectResult extends ActionResult  {
+public class ServletUrlRedirectResult extends BaseActionResult  {
 
 	public static final String NAME = "url";
 
-	private static BeanTemplateParser beanTemplateParser = new BeanTemplateParser();
+	protected BeanTemplateParser beanTemplateParser = new BeanTemplateParser();
 
 	public ServletUrlRedirectResult() {
 		super(NAME);
@@ -22,7 +22,6 @@ public ServletUrlRedirectResult() {
 	/**
 	 * Redirects to the external location.
 	 */
-	@Override
 	public void render(ActionRequest actionRequest, Object resultObject, String resultValue, String resultPath) throws Exception {
 		resultValue = beanTemplateParser.parse(resultValue, actionRequest.getAction());
 		HttpServletResponse response = actionRequest.getHttpServletResponse();

File: jodd-madvoc/src/main/java/jodd/madvoc/result/TextResult.java
Patch:
@@ -14,15 +14,14 @@
  * Useful for JSON responses, when resulting string is built
  * in the action.
  */
-public class TextResult extends ActionResult {
+public class TextResult extends BaseActionResult {
 
 	public static final String NAME = "text";
 
 	public TextResult() {
 		super(NAME);
 	}
 
-	@Override
 	public void render(ActionRequest actionRequest, Object resultObject, String resultValue, String resultPath) throws Exception {
 		HttpServletResponse response = actionRequest.getHttpServletResponse();
 
@@ -41,4 +40,4 @@ public void render(ActionRequest actionRequest, Object resultObject, String resu
 			StreamUtil.close(out);
 		}
 	}
-}
+}
\ No newline at end of file

File: jodd-http/src/test/java/jodd/http/KeepAliveTest.java
Patch:
@@ -72,7 +72,9 @@ public void testKeepAlive() {
 
 		// ->
 		HttpRequest request = HttpRequest.get("http://jodd.org");
+		assertEquals("Close", request.header("Connection"));
 		request.connectionKeepAlive(true);
+		assertTrue(request.connectionKeepAlive());
 
 		// <-
 		HttpResponse response = request.open(httpConnectionProvider).send();

File: jodd-http/src/main/java/jodd/http/net/SocketHttpConnectionProvider.java
Patch:
@@ -35,9 +35,9 @@ public void useProxy(ProxyInfo proxyInfo) {
 	public HttpConnection createHttpConnection(HttpRequest httpRequest) throws IOException {
 		Socket socket;
 
-		if (httpRequest.protocol().equals("https")) {
+		if (httpRequest.protocol().equalsIgnoreCase("https")) {
 			SSLSocket sslSocket = (SSLSocket) createSocket(
-					SSLSocketFactory.getDefault(), httpRequest.host(), 443);
+					SSLSocketFactory.getDefault(), httpRequest.host(), httpRequest.port());
 
 			sslSocket.startHandshake();
 

File: jodd-joy/src/main/java/jodd/joy/page/DbPager.java
Patch:
@@ -61,7 +61,9 @@ protected <T> PageData<T> page(String sql, int page, int pageSize, Map params, i
 
 		String countSql = buildCountSql(sql);
 		dbsql = sql(countSql);
-		long count = query(dbsql).executeCountAndClose();
+		query = query(dbsql);
+		query.setMap(params);
+		long count = query.executeCountAndClose();
 
 		return new PageData<T>(page, (int) count, pageSize, list);
 	}

File: jodd-petite/src/main/java/jodd/petite/PetiteUtil.java
Patch:
@@ -4,7 +4,6 @@
 
 import jodd.petite.meta.PetiteBean;
 import jodd.petite.scope.Scope;
-import jodd.petite.scope.DefaultScope;
 import jodd.typeconverter.Convert;
 import jodd.util.StringUtil;
 
@@ -99,11 +98,12 @@ public static WiringMode resolveBeanWiringMode(Class type) {
 	}
 
 	/**
-	 * Resolves bean's scope type from the annotation. Returns default scope if annotation doesn't exist.
+	 * Resolves bean's scope type from the annotation. Returns <code>null</code>
+	 * if annotation doesn't exist.
 	 */
 	public static Class<? extends Scope> resolveBeanScopeType(Class type) {
 		PetiteBean petiteBean = ((Class<?>) type).getAnnotation(PetiteBean.class);
-		return petiteBean != null ? petiteBean.scope() : DefaultScope.class;
+		return petiteBean != null ? petiteBean.scope() : null;
 	}
 
 	/**

File: jodd-petite/src/main/java/jodd/petite/meta/PetiteBean.java
Patch:
@@ -3,8 +3,8 @@
 package jodd.petite.meta;
 
 import jodd.petite.scope.Scope;
-import jodd.petite.scope.DefaultScope;
 import jodd.petite.WiringMode;
+import jodd.petite.scope.SingletonScope;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -26,9 +26,9 @@
 	String value() default "";
 
 	/**
-	 * Bean scope,
+	 * Bean scope, {@link jodd.petite.scope.SingletonScope singleton} by default.
 	 */
-	Class<? extends Scope> scope() default DefaultScope.class;
+	Class<? extends Scope> scope() default SingletonScope.class;
 
 	/**
 	 * Wiring mode.

File: jodd-http/src/main/java/jodd/http/HttpResponse.java
Patch:
@@ -70,7 +70,7 @@ public HttpResponse unzip() {
 				try {
 					StringInputStream in = new StringInputStream(body, StringInputStream.Mode.STRIP);
 					GZIPInputStream gzipInputStream = new GZIPInputStream(in);
-					StringOutputStream out = new StringOutputStream();
+					StringOutputStream out = new StringOutputStream(StringPool.ISO_8859_1);
 
 					StreamUtil.copy(gzipInputStream, out);
 

File: jodd-servlet/src/main/java/jodd/servlet/filter/GzipFilter.java
Patch:
@@ -147,7 +147,7 @@ public void init(FilterConfig config) throws ServletException {
 		if (urlExtensions != null) {
 			extensions = StringUtil.splitc(urlExtensions, ", ");
 		} else {
-			extensions = new String[] {"html", "html", "js", "css"};
+			extensions = new String[] {"html", "htm", "js", "css"};
 		}
 
 	}

File: jodd-db/src/main/java/jodd/db/DbQuery.java
Patch:
@@ -947,7 +947,7 @@ public void setObject(int index, Object value, Class<? extends SqlType> sqlTypeC
 			sqlType = SqlTypeManager.lookup(value.getClass());
 		}
 		try {
-			if (sqlType != null) {
+			if ((sqlType != null) && (dbSqlType != SqlType.DB_SQLTYPE_NOT_AVAILABLE)) {
 				sqlType.storeValue(preparedStatement, index, value, dbSqlType);
 			} else {
 				DbUtil.setPreparedStatementObject(preparedStatement, index, value, dbSqlType);

File: jodd-core/src/test/java/jodd/datetime/PeriodTest.java
Patch:
@@ -60,7 +60,7 @@ public void testSame() {
 	@Test
 	public void testOneDay() {
 		JDateTime jdt1 = new JDateTime();
-		JDateTime jdt2 = new JDateTime();
+		JDateTime jdt2 = jdt1.clone();
 		jdt2.addDay(1);
 
 		Period period = new Period(jdt2, jdt1);

File: jodd-core/src/main/java/jodd/util/HashCode.java
Patch:
@@ -9,7 +9,8 @@
  * Usage scenario:<br>
  * <pre>
  * int result = HashCodeUtil.SEED;
- * result = HashCodeUtil.hash(result, fIsDecrepit);
+ * result = HashCodeUtil.hash(result, value1);
+ * result = HashCodeUtil.hash(result, value2);
  * ...
  * return result;
  * </pre>

File: jodd-upload/src/main/java/jodd/upload/FileUploadHeader.java
Patch:
@@ -43,7 +43,7 @@ public class FileUploadHeader {
 				fileName = formFileName;
 			} else {
 				path = formFileName.substring(0, ls);
-				fileName = formFileName.substring(ls);
+				fileName = formFileName.substring(ls + 1);
 			}
 			if (fileName.length() > 0) {
 				this.contentType = getContentType(dataHeader);

File: jodd-core/src/test/java/jodd/util/URLCoderTest.java
Patch:
@@ -5,8 +5,6 @@
 import org.junit.Test;
 
 import java.io.UnsupportedEncodingException;
-import java.net.URI;
-import java.net.URISyntaxException;
 
 import static jodd.util.URLCoder.encodeFragment;
 import static jodd.util.URLCoder.encodeHost;
@@ -20,6 +18,7 @@
 import static jodd.util.URLCoder.encodeUri;
 import static jodd.util.URLCoder.encodeUserInfo;
 import static jodd.util.URLDecoder.decode;
+import static jodd.util.URLDecoder.decodeQuery;
 import static org.junit.Assert.assertEquals;
 
 public class URLCoderTest {
@@ -97,6 +96,8 @@ public void testDecode() {
 		assertEquals("T\u014dky\u014d", decode("T%C5%8Dky%C5%8D"));
 		assertEquals("/Z\u00fcrich", decode("/Z%C3%BCrich"));
 		assertEquals("T\u014dky\u014d", decode("T\u014dky\u014d"));
+		assertEquals("foo+bar", decode("foo+bar"));
+		assertEquals("foo bar", decodeQuery("foo+bar"));
 	}
 
 	@Test

File: jodd-http/src/main/java/jodd/http/HttpUtil.java
Patch:
@@ -79,7 +79,7 @@ public static HttpValuesMap parseQuery(String query, boolean decode) {
 			}
 			String name = query.substring(ndx2, ndx);
 			if (decode) {
-				name = URLDecoder.decode(name);
+				name = URLDecoder.decodeQuery(name);
 			}
 
 			ndx2 = ndx + 1;
@@ -93,7 +93,7 @@ public static HttpValuesMap parseQuery(String query, boolean decode) {
 			String value = query.substring(ndx2, ndx);
 
 			if (decode) {
-				value = URLDecoder.decode(value);
+				value = URLDecoder.decodeQuery(value);
 			}
 
 			queryMap.add(name, value);

File: jodd-core/src/test/java/jodd/io/findfile/FindFile2Test.java
Patch:
@@ -40,6 +40,7 @@ protected boolean acceptFile(File file) {
 		ff.setIncludeDirs(true);
 		ff.setIncludeFiles(true);
 		ff.setRecursive(true);
+		ff.sortByName();
 		ff.setWalking(true);
 		ff.searchPath(dataRoot);
 

File: jodd-core/src/test/java/jodd/util/ReflectUtilTest.java
Patch:
@@ -13,7 +13,6 @@
 import jodd.util.testdata2.E;
 import jodd.util.testdata2.En;
 import org.junit.Test;
-import sun.reflect.Reflection;
 
 import java.io.Serializable;
 import java.lang.reflect.Field;
@@ -448,7 +447,7 @@ public void testIsSubClassForCommonTypes() {
 		assertFalse(ReflectUtil.isSubclass(Long.class, long.class));
 	}
 
-	@Test
+/*	@Test
 	public void testGetCallerClass() {
 		assertFalse(Reflection.getCallerClass(0).equals(ReflectUtil.getCallerClass(0)));
 
@@ -476,7 +475,7 @@ public void testGetCallerClass2() throws NoSuchFieldException, IllegalAccessExce
 
 		field.set(null, value);
 	}
-
+*/
 	// ---------------------------------------------------------------- field concrete type
 
 	public static class BaseClass<A, B> {

File: jodd-core/src/test/java/jodd/typeconverter/DoubleArrayConverterTest.java
Patch:
@@ -23,8 +23,8 @@ public void testConversion() {
 		assertEq(arrd(1.0, 7.0, 3.0), doubleArrayConverter.convert(arrl(1, 7, 3)));
 		assertEq(arrd(1.0, 7.0, 3.0), doubleArrayConverter.convert(arrf(1, 7, 3)));
 		assertEq(arrd(1.0, 0.0, 1.0), doubleArrayConverter.convert(arrl(true, false, true)));
-		assertEq(arrd(1.0, 7.0, 3.0), doubleArrayConverter.convert(arrb((byte) 1, (byte) 7, (byte) 3)));
-		assertEq(arrd(1.0, 7.0, 3.0), doubleArrayConverter.convert(arrs((short) 1, (short) 7, (short) 3)));
+		assertEq(arrd(1.0, 7.0, 3.0), doubleArrayConverter.convert(arrb(1, 7, 3)));
+		assertEq(arrd(1.0, 7.0, 3.0), doubleArrayConverter.convert(arrs(1, 7, 3)));
 		assertEq(arrd(1.73, 10.22), doubleArrayConverter.convert(arrs("1.73", "10.22")));
 		assertEq(arrd(1.73, 10.22), doubleArrayConverter.convert(arrs(" 1.73 ", " 10.22 ")));
 		assertEq(arrd(1.73, 10), doubleArrayConverter.convert(arro("1.73", Integer.valueOf(10))));

File: jodd-core/src/test/java/jodd/typeconverter/FloatArrayConverterTest.java
Patch:
@@ -23,8 +23,8 @@ public void testConversion() {
 		assertEq(arrf((float) 1.73, (float) 10.22), floatArrayConverter.convert(arrf(1.73f, 10.22f)));
 		assertEq(arrf((float) 1.0, (float) 7.0, (float) 3.0), floatArrayConverter.convert(arri(1, 7, 3)));
 		assertEq(arrf((float) 1.0, (float) 7.0, (float) 3.0), floatArrayConverter.convert(arrl(1, 7, 3)));
-		assertEq(arrf((float) 1.0, (float) 7.0, (float) 3.0), floatArrayConverter.convert(arrb((byte) 1, (byte) 7, (byte) 3)));
-		assertEq(arrf((float) 1.0, (float) 7.0, (float) 3.0), floatArrayConverter.convert(arrs((short) 1, (short) 7, (short) 3)));
+		assertEq(arrf((float) 1.0, (float) 7.0, (float) 3.0), floatArrayConverter.convert(arrb(1, 7, 3)));
+		assertEq(arrf((float) 1.0, (float) 7.0, (float) 3.0), floatArrayConverter.convert(arrs(1, 7, 3)));
 		assertEq(arrf((float) 1.73, (float) 10.22), floatArrayConverter.convert(arrs("1.73", "10.22")));
 		assertEq(arrf((float) 1.73, (float) 10.22), floatArrayConverter.convert(arrs(" 1.73 ", " 10.22 ")));
 		assertEq(arrf((float) 1.73, 10), floatArrayConverter.convert(arro("1.73", 10)));

File: jodd-core/src/test/java/jodd/typeconverter/StringConverterTest.java
Patch:
@@ -18,7 +18,7 @@ public void testManager() {
 		assertNull(stringConverter.convert(null));
 
 		assertEquals("123", stringConverter.convert("123"));
-		assertEquals("AB", stringConverter.convert(arrb((byte) 65, (byte) 66)));
+		assertEquals("AB", stringConverter.convert(arrb(65, 66)));
 		assertEquals("Ab", stringConverter.convert(arrc('A', 'b')));
 		assertEquals("One,two", stringConverter.convert(arrs("One", "two")));
 		assertEquals("123", stringConverter.convert(Integer.valueOf(123)));

File: jodd-bean/src/main/java/jodd/bean/BeanUtilUtil.java
Patch:
@@ -302,7 +302,7 @@ protected Object convertIndexToMapKey(Object index, BeanProperty bp) {
 
 		try {
 			return convertType(index, indexType);
-		} catch (ClassCastException ignore) {
+		} catch (Exception ignore) {
 			return index;
 		}
 	}

File: jodd-core/src/main/java/jodd/typeconverter/impl/ArrayConverter.java
Patch:
@@ -58,7 +58,8 @@ protected T convertType(Object value) {
 
 	/**
 	 * Creates new array of target component type.
-	 * Default implementation uses reflection.
+	 * Default implementation uses reflection to create
+	 * an array of target type. Override it for better performances.
 	 */
 	protected T[] createArray(int length) {
 		return (T[]) Array.newInstance(targetComponentType, length);

File: jodd-mail/src/main/java/jodd/mail/SendMailSession.java
Patch:
@@ -222,10 +222,9 @@ protected MimeBodyPart createAttachmentBodyPart(EmailAttachment attachment) thro
 		MimeBodyPart attBodyPart = new MimeBodyPart();
 
 		String attachmentName = attachment.getEncodedName();
-		if (attachmentName == null) {
-			throw new MessagingException("No attachment name");
+		if (attachmentName != null) {
+			attBodyPart.setFileName(attachmentName);
 		}
-		attBodyPart.setFileName(attachmentName);
 
 		attBodyPart.setDataHandler(new DataHandler(attachment.getDataSource()));
 		if (attachment.isInline()) {

File: jodd-core/src/main/java/jodd/util/StringPool.java
Patch:
@@ -69,6 +69,7 @@ public interface StringPool {
 	String TRUE             = "true";
 	String UNDERSCORE       = "_";
 	String UTF_8            = "UTF-8";
+	String US_ASCII			= "US-ASCII";
 	String ISO_8859_1       = "ISO-8859-1";
 	String Y                = "y";
 	String YES              = "yes";

File: jodd-mail/src/main/java/jodd/mail/EmailUtil.java
Patch:
@@ -38,7 +38,8 @@ public static String extractMimeType(String contentType) {
 	}
 
 	/**
-	 * Parses content type for encoding.
+	 * Parses content type for encoding. May return <code>null</code>
+	 * if encoding is not specified in content type.
 	 */
 	public static String extractEncoding(String contentType) {
 		int ndx = contentType.indexOf(';');

File: jodd-madvoc/src/test/java/jodd/madvoc/ManualRegistrationTest.java
Patch:
@@ -17,7 +17,7 @@ public class ManualRegistrationTest {
 	public static class ManualRegistration extends ManualMadvocConfigurator {
 		public void configure() {
 			action().path("/hello").mapTo(BooAction.class, "foo1").result(TextResult.class).bind();
-			action().path("/world").mapTo(BooAction.class, "foo2").interceptedBy(EchoInterceptor.class).result(TextResult.class).bind();
+			action().path("/world").mapTo(BooAction.class, "foo2").interceptedBy(EchoInterceptor.class).extension(NONE).result(TextResult.class).bind();
 		}
 	}
 

File: jodd-db/src/main/java/jodd/db/oom/sqlgen/TemplateParser.java
Patch:
@@ -87,7 +87,7 @@ protected static boolean isReferenceChar(String template, int index) {
 		if ((c == '+') && (template.charAt(index - 1) == '.')) {
 			return true;
 		}
-		return isDigit(c) || isLetter(c) || (c == '_') || (c == '.');
+		return isDigit(c) || isAlpha(c) || (c == '_') || (c == '.');
 	}
 
 

File: jodd-http/src/main/java/jodd/http/HttpUtil.java
Patch:
@@ -37,13 +37,13 @@ public static String buildQuery(HttpParamsMap queryMap, String encoding) {
 				query.append('&');
 			}
 
-			key = URLCoder.encodeQuery(key, encoding);
+			key = URLCoder.encodeQueryParam(key, encoding);
 			query.append(key);
 
 			if (value != null) {
 				query.append('=');
 				if (value instanceof String) {
-					String valueString = URLCoder.encodeQuery((String) value, encoding);
+					String valueString = URLCoder.encodeQueryParam((String) value, encoding);
 					query.append(valueString);
 				} else {
 					String[] values = (String[]) value;

File: jodd-joy/src/main/java/jodd/joy/auth/AuthorizationInterceptor.java
Patch:
@@ -76,7 +76,9 @@ protected Object resultLogin(String targetUrl) {
 		if (targetUrl == null) {
 			targetUrl = StringPool.EMPTY;
 		} else {
-			targetUrl = URLCoder.build().param(AuthAction.LOGIN_SUCCESS_PATH, targetUrl).toString();
+			targetUrl =
+					'?' + URLCoder.encodeQueryParam(AuthAction.LOGIN_SUCCESS_PATH) +
+					'=' + URLCoder.encodeQueryParam(targetUrl);
 		}
 		return REDIRECT + AppAction.ALIAS_LOGIN + targetUrl;
 	}

File: jodd-madvoc/src/main/java/jodd/madvoc/MadvocUtil.java
Patch:
@@ -58,7 +58,7 @@ public static String stripLastCamelWord(String name) {
 
 		int ndx = name.length() - 1;
 		while (ndx >= 0) {
-			if (CharUtil.isUppercaseLetter(name.charAt(ndx)) == true) {
+			if (CharUtil.isUppercaseAlpha(name.charAt(ndx)) == true) {
 				break;
 			}
 			ndx--;

File: jodd-madvoc/src/main/java/jodd/madvoc/result/MoveResult.java
Patch:
@@ -45,7 +45,7 @@ public void render(ActionRequest actionRequest, Object resultObject, String resu
 		String id = generateUniqueId();
 		session.setAttribute(id, actionRequest);
 
-		resultPath = URLCoder.build().path(resultPath).param(madvocConfig.getAttributeMoveId(), id).toString();
+		resultPath = URLCoder.build(resultPath).queryParam(madvocConfig.getAttributeMoveId(), id).toString();
 		DispatcherUtil.redirect(httpServletRequest, actionRequest.getHttpServletResponse(), resultPath);
 	}
 

File: jodd-servlet/src/main/java/jodd/servlet/HtmlFormUtil.java
Patch:
@@ -302,7 +302,7 @@ public static String multiSelectedValue(List data, String value) {
 	public static String name2id(String name) {
 		char[] str = name.toCharArray();
 		for (int i = 0; i < str.length; i++) {
-			if (CharUtil.isLetterOrDigit(str[i]) == false) {
+			if (CharUtil.isAlphaOrDigit(str[i]) == false) {
 				str[i] = '_';
 			}
 		}

File: jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java
Patch:
@@ -507,7 +507,7 @@ public static Object getRequestParameter(ServletRequest request, String name) {
 	 * Checks if some parameter is in GET parameters.
 	 */
 	public boolean isGetParameter(HttpServletRequest request, String name) {
-		name = URLCoder.encodeQuery(name) + '=';
+		name = URLCoder.encodeQueryParam(name) + '=';
 		String query = request.getQueryString();
 		String[] nameValuePairs = StringUtil.splitc(query, '&');
 		for (String nameValuePair : nameValuePairs) {

File: jodd-servlet/src/main/java/jodd/servlet/jspfn/JoddJspFunctions.java
Patch:
@@ -145,7 +145,7 @@ public static String url(String value, HttpServletRequest request, HttpServletRe
 	}
 
 	public static String url(String value, String encoding, HttpServletRequest request, HttpServletResponse response) {
-		String result = ServletUtil.resolveUrl(URLCoder.encodeUrl(value, encoding), request);
+		String result = ServletUtil.resolveUrl(URLCoder.encodeUri(value, encoding), request);
 		if (ServletUtil.isAbsoluteUrl(result) == false) {
 			result = response.encodeURL(result);        // rewrite relative URLs
 		}

File: jodd-servlet/src/main/java/jodd/servlet/tag/UrlTag.java
Patch:
@@ -44,10 +44,10 @@ public void setDynamicAttribute(String uri, String localName, Object value) {
 	@Override
 	public void doTag() throws JspException {
 		PageContext pageContext = (PageContext) getJspContext();
-		URLCoder.Builder builder = URLCoder.build().path(baseUrl);
+		URLCoder.Builder builder = URLCoder.build(baseUrl);
 
 		for (int i = 0; i < attrs.size(); i += 2) {
-			builder.param(attrs.get(i), attrs.get(i + 1));
+			builder.queryParam(attrs.get(i), attrs.get(i + 1));
 		}
 
 		if (var == null) {

File: jodd-lagarto/src/test/java/jodd/lagarto/dom/HtmlImplicitClosingRuleTest.java
Patch:
@@ -20,13 +20,13 @@ public void testTagP() {
 	}
 
 	@Test
-	public void testTagPNoImpl() {
+	public void testTagPNoImplRules() {
 		String content = "<body><p>para #1<p> para <b>#2</b></body>";
 		LagartoDOMBuilder lagartoDOMBuilder = new LagartoDOMBuilder();
 		lagartoDOMBuilder.setCollectErrors(true);
 		lagartoDOMBuilder.setImpliedEndTags(false);
 		Document doc = lagartoDOMBuilder.parse(content);
-		assertEquals("<body><p>para #1</p><p> para <b>#2</b></p></body>", doc.getHtml());
+		assertEquals("<body><p>para #1<p> para <b>#2</b></p></p></body>", doc.getHtml());
 		assertEquals(2, doc.getErrors().size());
 	}
 

File: jodd-lagarto/src/main/java/jodd/lagarto/dom/Node.java
Patch:
@@ -1038,8 +1038,8 @@ public LagartoLexer.Position getPosition() {
 	 * calculated, returns an empty string.
 	 */
 	public String getPositionString() {
-		if (parentNode.position != null) {
-			return parentNode.position.toString();
+		if (position != null) {
+			return position.toString();
 		}
 		return StringPool.EMPTY;
 	}

File: jodd-lagarto/src/main/java/jodd/lagarto/dom/LagartoDOMBuilder.java
Patch:
@@ -23,7 +23,9 @@ public LagartoDOMBuilder() {
 	 * http://dev.w3.org/html5/spec/Overview.html#void-elements
 	 */
 	public static final String[] HTML5_VOID_TAGS = {
-			"area", "base", "br", "col", "command", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr"};
+			"area", "base", "br", "col", "embed", "hr", "img", "input",
+			"keygen", "link", "menuitem", "meta", "param", "source",
+			"track", "wbr"};
 
 	// ---------------------------------------------------------------- IN flags
 

File: jodd-bean/src/main/java/jodd/bean/BeanException.java
Patch:
@@ -18,15 +18,15 @@ public BeanException(String message) {
 	}
 
 	public BeanException(String message, BeanProperty bp) {
-		super(message + " Invalid property: " + bp);
+		super(message + ". Invalid property: " + bp);
 	}
 
 	public BeanException(String message, Throwable t) {
 		super(message, t);
 	}
 
 	public BeanException(String message, BeanProperty bp, Throwable t) {
-		super(message + " Invalid property: " + bp, t);
+		super(message + ". Invalid property: " + bp, t);
 	}
 
 }

File: jodd-bean/src/main/java/jodd/bean/BeanProperty.java
Patch:
@@ -5,8 +5,7 @@
 import jodd.introspector.ClassIntrospector;
 import jodd.introspector.ClassDescriptor;
 import jodd.introspector.FieldDescriptor;
-
-import java.lang.reflect.Method;
+import jodd.introspector.MethodDescriptor;
 
 /**
  * Represents a bean named property. Contains two information:
@@ -51,7 +50,7 @@ public void setBean(Object bean) {
 
 	// ---------------------------------------------------------------- simple properties
 
-	Method method;
+	MethodDescriptor method;
 	FieldDescriptor field;
 	String index;
 	

File: jodd-bean/src/test/java/jodd/bean/BeanUtilGenericsTest.java
Patch:
@@ -30,6 +30,7 @@ public static class BaseClass<A, B> {
 		public A f1;		// String
 		public B f2;		// Integer
 
+
 		public void setFoo1(A a) {
 			f1 = a;
 		}

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaClassBuilder.java
Patch:
@@ -103,7 +103,7 @@ public MethodVisitor visitMethod(int access, String name, String desc, String si
 
 		// destination constructors [A1]
 		if (name.equals(INIT) == true) {
-			MethodVisitor mv = wd.dest.visitMethod(access, name, desc, msign.getSignature(), null);
+			MethodVisitor mv = wd.dest.visitMethod(access, name, desc, msign.getRawSignature(), null);
 			return new ProxettaCtorBuilder(mv, msign, wd);
 		}
 		// ignore destination static block

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaMethodBuilder.java
Patch:
@@ -105,7 +105,8 @@ protected void createFirstChainDelegate_Start() {
 		access &= ~ACC_NATIVE;
 		access &= ~ACC_ABSTRACT;
 
-		methodVisitor = wd.dest.visitMethod(access, tmd.msign.getMethodName(), tmd.msign.getDescription(), tmd.msign.getSignature(), null);
+		methodVisitor = wd.dest.visitMethod(
+				access, tmd.msign.getMethodName(), tmd.msign.getDescription(), tmd.msign.getRawSignature(), null);
 	}
 
 	/**

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaWrapperClassBuilder.java
Patch:
@@ -154,7 +154,8 @@ protected void createSimpleMethodWrapper(MethodSignatureVisitor msign) {
 		access &= ~ACC_ABSTRACT;
 		access &= ~ACC_NATIVE;
 
-		MethodVisitor mv = wd.dest.visitMethod(access, msign.getMethodName(), msign.getDescription(), msign.getSignature(), msign.getExceptionsArray());
+		MethodVisitor mv = wd.dest.visitMethod(
+				access, msign.getMethodName(), msign.getDescription(), msign.getRawSignature(), msign.getExceptionsArray());
 		mv.visitCode();
 		mv.visitVarInsn(ALOAD, 0);
 		mv.visitFieldInsn(GETFIELD, wd.thisReference, wd.wrapperRef, wd.wrapperType);

File: jodd-bean/src/main/java/jodd/bean/BeanProperty.java
Patch:
@@ -4,9 +4,9 @@
 
 import jodd.introspector.ClassIntrospector;
 import jodd.introspector.ClassDescriptor;
+import jodd.introspector.FieldDescriptor;
 
 import java.lang.reflect.Method;
-import java.lang.reflect.Field;
 
 /**
  * Represents a bean named property. Contains two information:
@@ -52,7 +52,7 @@ public void setBean(Object bean) {
 	// ---------------------------------------------------------------- simple properties
 
 	Method method;
-	Field field;
+	FieldDescriptor field;
 	String index;
 	
 	// ---------------------------------------------------------------- toString

File: jodd-lagarto/src/main/java/jodd/jerry/Jerry.java
Patch:
@@ -149,7 +149,7 @@ protected Jerry(Jerry parent, Node... nodes) {
 
 	protected Jerry(Jerry parent, Node[] nodes1, Node[] nodes2) {
 		this.parent = parent;
-		this.nodes = ArraysUtil.merge(nodes1, nodes2);
+		this.nodes = ArraysUtil.join(nodes1, nodes2);
 		this.builder = parent.builder;
 	}
 

File: jodd-madvoc/src/main/java/jodd/madvoc/injector/ScopeDataResolver.java
Patch:
@@ -315,7 +315,7 @@ protected ScopeData inspectScopeData(Class actionClass, ScopeType scopeType) {
 
 		// fields
 		for (Field field : fields) {
-			Class fieldType = ReflectUtil.getFieldConcreteType(field, actionClass);
+			Class fieldType = ReflectUtil.getRawType(field.getGenericType(), actionClass);
 
 			In in = field.getAnnotation(In.class);
 			ScopeData.In ii = inspectIn(in, scopeType, field.getName(), fieldType);

File: jodd-joy/src/main/java/jodd/joy/core/DefaultAppCore.java
Patch:
@@ -378,7 +378,6 @@ public ProxyProxetta getProxetta() {
 	protected void startProxetta() {
 		log.info("proxetta initialization");
 		proxetta = ProxyProxetta.withAspects(createAppAspects());
-		proxetta.setClassLoader(this.getClass().getClassLoader());
 	}
 
 	/**

File: jodd-madvoc/src/main/java/jodd/madvoc/component/MadvocController.java
Patch:
@@ -102,8 +102,8 @@ public String invoke(String actionPath, HttpServletRequest servletRequest, HttpS
 				String encoding = madvocConfig.getEncoding();
 
 				if (encoding != null) {
-					servletRequest.setCharacterEncoding(madvocConfig.getEncoding());
-					servletResponse.setCharacterEncoding(madvocConfig.getEncoding());
+					servletRequest.setCharacterEncoding(encoding);
+					servletResponse.setCharacterEncoding(encoding);
 				}
 
 				characterEncodingSet = true;

File: jodd-petite/src/main/java/jodd/petite/PetiteRegistry.java
Patch:
@@ -37,7 +37,7 @@ public PetiteRegistry(PetiteContainer petiteContainer) {
 	 * Starts with bean registration. Example:
 	 * <code>bean(Foo.class).name("").scope(...).wiringMode(...).define().register();</code>
 	 *
-	 * @see PetiteBeans#registerPetiteBean(Class, String, Class
+	 * @see PetiteBeans#registerPetiteBean(Class, String, Class, WiringMode, boolean)
 	 */
 	public BeanRegister bean(Class beanType) {
 		return new BeanRegister(beanType);

File: jodd-petite/src/main/java/jodd/petite/scope/ProtoScope.java
Patch:
@@ -19,7 +19,7 @@ public void remove(String name) {
 	}
 
 	/**
-	 * Allow all scopes to be injected into prototype scoped beans.
+	 * Allows all scopes to be injected into prototype scoped beans.
 	 */
 	public boolean accept(Scope referenceScope) {
 		return true;

File: jodd-http/src/test/java/jodd/http/EchoTestServer.java
Patch:
@@ -9,7 +9,7 @@
 public class EchoTestServer extends NanoHTTPD {
 
 	public EchoTestServer() throws IOException {
-		super(80, new File("."));
+		super(8081, new File("."));
 	}
 
 	public String uri;

File: jodd-http/src/test/java/jodd/http/HttpConnectionTest.java
Patch:
@@ -17,7 +17,7 @@ public class HttpConnectionTest {
 	public void testEcho() throws IOException {
 		EchoTestServer echoTestServer = new EchoTestServer();
 
-		HttpResponse response = HttpRequest.get("http://localhost:80/hello?id=12").send();
+		HttpResponse response = HttpRequest.get("http://localhost:8081/hello?id=12").send();
 
 		assertEquals(200, response.statusCode());
 		assertEquals("OK", response.statusPhrase());
@@ -42,7 +42,7 @@ public void testUpload() throws IOException {
 		FileUtil.writeString(file, "upload test");
 
 		HttpResponse response = HttpRequest
-				.post("http://localhost:80/hello")
+				.post("http://localhost:8081/hello")
 				.form("id", "12")
 				.form("file", file)
 				.send();

File: jodd-servlet/src/main/java/jodd/servlet/JspResolver.java
Patch:
@@ -2,6 +2,7 @@
 
 package jodd.servlet;
 
+import jodd.JoddBean;
 import jodd.bean.BeanUtil;
 import jodd.bean.BeanUtilBean;
 
@@ -120,7 +121,7 @@ private static Object result(String name, String thisRef, Object value) {
 		if (thisRef.equals(name)) {
 			return value;
 		}
-		name = BeanUtilBean.THIS_REF + name.substring(thisRef.length());
+		name = JoddBean.thisRef + name.substring(thisRef.length());
 		return BeanUtil.getDeclaredPropertySilently(value, name);
 	}
 

File: jodd-servlet/src/main/java/jodd/servlet/CsrfShield.java
Patch:
@@ -65,7 +65,7 @@ public static String prepareCsrfToken(HttpSession session) {
 	 * Generates new CSRF token and puts it in the session. Returns generated token value.
 	 */
 	@SuppressWarnings({"unchecked"})
-	public static synchronized String prepareCsrfToken(HttpSession session, int timeToLive) {
+	public static String prepareCsrfToken(HttpSession session, int timeToLive) {
 		Set<Token> tokenSet = (Set<Token>) session.getAttribute(CSRF_TOKEN_SET);
 		if (tokenSet == null) {
 			tokenSet = new HashSet<Token>();
@@ -134,7 +134,7 @@ public static boolean checkCsrfToken(HttpServletRequest request, String tokenNam
 	 * Checks token value.
 C	 */
 	@SuppressWarnings({"unchecked"})
-	public static synchronized boolean checkCsrfToken(HttpSession session, String tokenValue) {
+	public static boolean checkCsrfToken(HttpSession session, String tokenValue) {
 		Set<Token> tokenSet = (Set<Token>) session.getAttribute(CSRF_TOKEN_SET);
 		if ((tokenSet == null) && (tokenValue == null)) {
 			return true;

File: jodd-joy/src/main/java/jodd/joy/core/DefaultAppCore.java
Patch:
@@ -484,7 +484,7 @@ protected void startDb() {
 		log.info("database initialization");
 
 		// connection pool
-		petite.registerPetiteBean(PETITE_DBPOOL, CoreConnectionPool.class, null, null, false);
+		petite.registerPetiteBean(CoreConnectionPool.class, PETITE_DBPOOL, null, null, false);
 		connectionProvider = (ConnectionProvider) petite.getBean(PETITE_DBPOOL);
 		connectionProvider.init();
 

File: jodd-madvoc/src/main/java/jodd/madvoc/WebApplication.java
Patch:
@@ -105,7 +105,7 @@ public final void registerComponent(String name, Class component) {
 			log.debug("Registering component '" + name + "' of type " + component.getName());
 		}
 		madpc.removeBean(name);
-		madpc.registerPetiteBean(name, component, null, null, false);
+		madpc.registerPetiteBean(component, name, null, null, false);
 	}
 
 	/**

File: jodd-petite/src/main/java/jodd/petite/PetiteBeans.java
Patch:
@@ -178,15 +178,14 @@ public String resolveBeanName(Class type) {
 	/**
 	 * Registers or defines a bean.
 	 *
-	 * @param name bean name, if <code>null</code> it will be resolved from the class (name or annotation)
 	 * @param type bean type, must be specified
+	 * @param name bean name, if <code>null</code> it will be resolved from the class (name or annotation)
 	 * @param scopeType bean scope, if <code>null</code> it will be resolved from the class (annotation or default one)
 	 * @param wiringMode wiring mode, if <code>null</code> it will be resolved from the class (annotation or default one)
 	 * @param define when set to <code>true</code> bean will be defined - all injection points will be set to none
 	 */
 	public BeanDefinition registerPetiteBean(
-			String name,
-			Class type,
+			Class type, String name,
 			Class<? extends Scope> scopeType,
 			WiringMode wiringMode,
 			boolean define) {

File: jodd-petite/src/main/java/jodd/petite/PetiteContainer.java
Patch:
@@ -4,7 +4,6 @@
 
 import jodd.Jodd;
 import jodd.bean.BeanUtil;
-import jodd.petite.config.PetiteConfigurator;
 import jodd.petite.meta.InitMethodInvocationStrategy;
 import jodd.petite.scope.SingletonScope;
 
@@ -450,7 +449,7 @@ public void addBean(String name, Object bean) {
 	 */
 	public void addBean(String name, Object bean, WiringMode wiringMode) {
 		wiringMode = petiteConfig.resolveWiringMode(wiringMode);
-		registerPetiteBean(name, bean.getClass(), SingletonScope.class, wiringMode, false);
+		registerPetiteBean(bean.getClass(), name, SingletonScope.class, wiringMode, false);
 		BeanDefinition def = lookupExistingBeanDefinition(name);
 		Map<String, Object> acquiredBeans = new HashMap<String, Object>();
 		acquiredBeans.put(name, bean);

File: jodd-petite/src/main/java/jodd/petite/PetiteRegistry.java
Patch:
@@ -37,7 +37,7 @@ public PetiteRegistry(PetiteContainer petiteContainer) {
 	 * Starts with bean registration. Example:
 	 * <code>bean(Foo.class).name("").scope(...).wiringMode(...).define().register();</code>
 	 *
-	 * @see PetiteBeans#registerPetiteBean(String, Class, Class, WiringMode, boolean)
+	 * @see PetiteBeans#registerPetiteBean(Class, String, Class
 	 */
 	public BeanRegister bean(Class beanType) {
 		return new BeanRegister(beanType);
@@ -92,7 +92,7 @@ public BeanRegister define() {
 		 * Registers a bean.
 		 */
 		public void register() {
-			petiteContainer.registerPetiteBean(beanName, beanType, scopeType, wiringMode, define);
+			petiteContainer.registerPetiteBean(beanType, beanName, scopeType, wiringMode, define);
 		}
 	}
 

File: jodd-petite/src/main/java/jodd/petite/config/AutomagicPetiteConfigurator.java
Patch:
@@ -87,7 +87,7 @@ protected void onEntry(EntryData entryData) {
 		if (petiteBean == null) {
 			return;
 		}
-		container.registerPetiteBean(null, beanClass, null, null, false);
+		container.registerPetiteBean(beanClass, null, null, null, false);
 	}
 
 	/**

File: jodd-petite/src/main/java/jodd/petite/proxetta/ProxettaAwarePetiteContainer.java
Patch:
@@ -27,7 +27,7 @@ public ProxettaAwarePetiteContainer(ProxyProxetta proxetta) {
 	 * Applies proxetta on bean class before bean registration.
 	 */
 	@Override
-	public BeanDefinition registerPetiteBean(String name, Class type, Class<? extends Scope> scopeType, WiringMode wiringMode, boolean define) {
+	public BeanDefinition registerPetiteBean(Class type, String name, Class<? extends Scope> scopeType, WiringMode wiringMode, boolean define) {
 		if (proxetta != null) {
 			if (name == null) {
 				name = resolveBeanName(type);
@@ -38,6 +38,6 @@ public BeanDefinition registerPetiteBean(String name, Class type, Class<? extend
 
 			type = builder.define();
 		}
-		return super.registerPetiteBean(name, type, scopeType, wiringMode, define);
+		return super.registerPetiteBean(type, name, scopeType, wiringMode, define);
 	}
 }

File: jodd-petite/src/test/java/jodd/petite/FullTypeTest.java
Patch:
@@ -11,7 +11,7 @@
 public class FullTypeTest {
 
 	private void registerBean(PetiteContainer petiteContainer, Class beanType) {
-		petiteContainer.registerPetiteBean(null, beanType, null, null, false);
+		petiteContainer.registerPetiteBean(beanType, null, null, null, false);
 	}
 
 	@Test

File: jodd-petite/src/test/java/jodd/petite/InitMethodTest.java
Patch:
@@ -15,7 +15,7 @@
 public class InitMethodTest {
 
 	private void defineBean(PetiteContainer petiteContainer, String beanName, Class type) {
-		petiteContainer.registerPetiteBean(beanName, type, null, null, true);
+		petiteContainer.registerPetiteBean(type, beanName, null, null, true);
 	}
 
 	@Test

File: jodd-petite/src/test/java/jodd/petite/ScopeTest.java
Patch:
@@ -19,9 +19,9 @@ public class ScopeTest {
 	public void testThreadLocalScope() {
 		final PetiteContainer pc = new PetiteContainer();
 
-		pc.registerPetiteBean("foo", Foo.class, null, null, false);
-		pc.registerPetiteBean(null, Zoo.class, null, null, false);
-		pc.registerPetiteBean(null, Boo.class, ThreadLocalScope.class, null, false);
+		pc.registerPetiteBean(Foo.class, "foo", null, null, false);
+		pc.registerPetiteBean(Zoo.class, null, null, null, false);
+		pc.registerPetiteBean(Boo.class, null, ThreadLocalScope.class, null, false);
 
 		assertEquals(3, pc.getTotalBeans());
 		assertEquals(2, pc.getTotalScopes());

File: jodd-madvoc/src/main/java/jodd/madvoc/component/ActionPathMapper.java
Patch:
@@ -9,7 +9,7 @@
 import jodd.util.StringUtil;
 import jodd.util.StringPool;
 
-import static jodd.petite.meta.InitMethodInvocationStrategy.AFTER_WIRING;
+import static jodd.petite.meta.InitMethodInvocationStrategy.POST_DEFINE;
 
 /**
  * Resolves action configuration from action path on each request.
@@ -29,7 +29,7 @@ public class ActionPathMapper {
 	@PetiteInject
 	protected MadvocConfig madvocConfig;
 
-	@PetiteInitMethod(order = 1, invoke = AFTER_WIRING)
+	@PetiteInitMethod(order = 1, invoke = POST_DEFINE)
 	void actionPathMapperInit() {
 		String[] d = madvocConfig.getDefaultActionMethodNames();
 		String method1 = null;

File: jodd-madvoc/src/main/java/jodd/madvoc/component/MadvocContextInjector.java
Patch:
@@ -8,7 +8,7 @@
 import jodd.petite.meta.PetiteInitMethod;
 import jodd.petite.meta.PetiteInject;
 
-import static jodd.petite.meta.InitMethodInvocationStrategy.AFTER_WIRING;
+import static jodd.petite.meta.InitMethodInvocationStrategy.POST_DEFINE;
 
 /**
  * Set of injectors that can inject/outject values using various Madvoc 'global' scopes.
@@ -25,7 +25,7 @@ public class MadvocContextInjector {
 	protected MadvocContextScopeInjector madvocContextScopeInjector;
 	protected MadvocParamsInjector madvocParamsInjector;
 
-	@PetiteInitMethod(order = 1, invoke = AFTER_WIRING)
+	@PetiteInitMethod(order = 1, invoke = POST_DEFINE)
 	void createInjectors() {
 		// need to have init method, so it can be called after the madpc is injected
 		madvocContextScopeInjector = new MadvocContextScopeInjector(madpc);

File: jodd-madvoc/src/main/java/jodd/madvoc/component/ServletContextInjector.java
Patch:
@@ -10,7 +10,7 @@
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.ServletContext;
 
-import static jodd.petite.meta.InitMethodInvocationStrategy.AFTER_WIRING;
+import static jodd.petite.meta.InitMethodInvocationStrategy.POST_DEFINE;
 
 /**
  * Set of injectors that can inject/outject values using various servlets 'global' scopes.
@@ -24,7 +24,7 @@ public class ServletContextInjector {
 	protected ApplicationScopeInjector applicationScopeInjector;
 	protected ServletContextScopeInjector servletContextScopeInjector;
 
-	@PetiteInitMethod(order = 1, invoke = AFTER_WIRING)
+	@PetiteInitMethod(order = 1, invoke = POST_DEFINE)
 	void createInjectors() {
 		applicationScopeInjector = new ApplicationScopeInjector();
 		servletContextScopeInjector = new ServletContextScopeInjector();

File: jodd-upload/src/main/java/jodd/upload/FileUploadFactory.java
Patch:
@@ -6,7 +6,6 @@
  * {@link FileUpload} factory for handling uploaded files. Implementations may
  * handle uploaded files differently: to store them to memory, directly to disk
  * or something else.
- * @see jodd.upload.impl
  */
 public interface FileUploadFactory {
 

File: jodd-core/src/test/java/jodd/datetime/JDateTimeMoreTest.java
Patch:
@@ -2,7 +2,7 @@
 
 package jodd.datetime;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.junit.Test;
 
 import java.util.Calendar;

File: jodd-core/src/test/java/jodd/datetime/PeriodTest.java
Patch:
@@ -4,7 +4,7 @@
 
 import org.junit.Test;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 public class PeriodTest {
 

File: jodd-core/src/test/java/jodd/datetime/format/ParserTest.java
Patch:
@@ -6,7 +6,7 @@
 import jodd.datetime.JDateTime;
 import org.junit.Test;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 public class ParserTest {
 

File: jodd-db/src/test/java/jodd/db/DbSessionProviderTest.java
Patch:
@@ -3,10 +3,9 @@
 package jodd.db;
 
 import org.junit.After;
-import org.junit.Before;
 import org.junit.Test;
 
-import static junit.framework.Assert.*;
+import static org.junit.Assert.*;
 
 public class DbSessionProviderTest extends DbHsqldbTestCase {
 

File: jodd-madvoc/src/test/java/jodd/madvoc/component/ActionsManagerTest.java
Patch:
@@ -6,10 +6,10 @@
 import jodd.madvoc.WebApplication;
 import jodd.madvoc.macro.RegExpPathMacro;
 import jodd.madvoc.macro.WildcardPathMacro;
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.junit.Test;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 

File: jodd-mail/src/test/java/jodd/mail/SendMailTest.java
Patch:
@@ -16,8 +16,8 @@
 import java.io.IOException;
 
 import static jodd.mail.EmailAttachment.attachment;
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.assertArrayEquals;
 
 public class SendMailTest {

File: jodd-core/src/main/java/jodd/typeconverter/TypeConverterManagerBean.java
Patch:
@@ -48,6 +48,7 @@
 import jodd.typeconverter.impl.SqlTimestampConverter;
 import jodd.typeconverter.impl.StringArrayConverter;
 import jodd.typeconverter.impl.StringConverter;
+import jodd.typeconverter.impl.TimeZoneConverter;
 import jodd.typeconverter.impl.URIConverter;
 import jodd.typeconverter.impl.URLConverter;
 import jodd.util.ClassLoaderUtil;
@@ -64,6 +65,7 @@
 import java.util.GregorianCalendar;
 import java.util.HashMap;
 import java.util.Locale;
+import java.util.TimeZone;
 
 /**
  * Provides dynamic object conversion to a type.
@@ -184,6 +186,7 @@ public void registerDefaults() {
 		register(URL.class, new URLConverter());
 
 		register(Locale.class, new LocaleConverter());
+		register(TimeZone.class, new TimeZoneConverter());
 
 		if (Jodd.isUploadLoaded()) {
 			try {

File: jodd-madvoc/src/test/java/jodd/madvoc/component/ActionsManagerTest.java
Patch:
@@ -5,6 +5,7 @@
 import jodd.madvoc.ActionConfig;
 import jodd.madvoc.WebApplication;
 import jodd.madvoc.macro.RegExpPathMacro;
+import jodd.madvoc.macro.WildcardPathMacro;
 import junit.framework.Assert;
 import org.junit.Test;
 
@@ -140,7 +141,7 @@ public void testActionPathMacrosWildcard() {
 		ActionsManager actionsManager = webapp.getComponent(ActionsManager.class);
 
 		MadvocConfig madvocConfig = webapp.getComponent(MadvocConfig.class);
-		madvocConfig.setPathMacroClass(RegExpPathMacro.class);
+		madvocConfig.setPathMacroClass(WildcardPathMacro.class);
 
 		actionsManager.register(FooAction.class, "one", "/${one:a?a}");
 

File: jodd-madvoc/src/test/java/jodd/madvoc/ActionMethodParserTest.java
Patch:
@@ -97,7 +97,7 @@ public void testMethodWithPackage() {
 		cfg = parse(actionMethodParser, "tst.BooAction#foo41");
 		assertEquals("/xxx", cfg.actionPath);
 		assertEquals("DELETE", cfg.actionMethod);
-		assertNull("rt", cfg.resultType);
+		assertEquals("rt", cfg.resultType);
 
 		cfg = parse(actionMethodParser, "tst.BooAction#foo5");
 		assertEquals("/xxx.html", cfg.actionPath);

File: jodd-joy/src/main/java/jodd/joy/madvoc/meta/PostAction.java
Patch:
@@ -28,4 +28,6 @@
 
 	String method() default AppAction.METHOD_POST;
 
+	String result() default "";
+
 }
\ No newline at end of file

File: jodd-madvoc/src/test/java/jodd/madvoc/tst/BooAction.java
Patch:
@@ -22,7 +22,7 @@ public void foo3() {}
 	@Action("/xxx")
 	public void foo4() {}
 
-	@Action(value = "/xxx", extension = "not used!", method = "DELETE")
+	@Action(value = "/xxx", extension = "not used!", method = "DELETE", result = "rt")
 	public void foo41() {}
 
 	@Action(value = "/xxx.[ext]", alias = "dude", method = "POST")

File: jodd-petite/src/main/java/jodd/petite/BeanDefinition.java
Patch:
@@ -20,7 +20,7 @@ public BeanDefinition(String name, Class type, Scope scope, WiringMode wiringMod
 	// finals
 	public final String name;			// bean name
 	public final Class type;			// bean type
-	protected final Scope scope;  		// bean scope
+	protected final Scope scope;  		// bean scope, may be null for beans that are not stored in scope but just wired
 	public final WiringMode wiringMode;	// wiring mode
 
 	// cache

File: jodd-petite/src/main/java/jodd/petite/PetiteContainer.java
Patch:
@@ -132,7 +132,7 @@ protected void wireFields(Object bean, BeanDefinition def, Map<String, Object> a
 				BeanDefinition refBeanDefinition = lookupBeanDefinition(refName);
 
 				if (refBeanDefinition != null) {
-					value = scopedProxyManager.getScopedProxyBean(this, def, refBeanDefinition);
+					value = scopedProxyManager.lookupValue(this, def, refBeanDefinition);
 				}
 			}
 
@@ -191,7 +191,7 @@ protected void wireMethods(Object bean, BeanDefinition def, Map<String, Object>
 					BeanDefinition refBeanDefinition = lookupBeanDefinition(refName);
 
 					if (refBeanDefinition != null) {
-						value = scopedProxyManager.getScopedProxyBean(this, def, refBeanDefinition);
+						value = scopedProxyManager.lookupValue(this, def, refBeanDefinition);
 					}
 				}
 

File: jodd-lagarto/src/main/java/jodd/lagarto/LagartoParserEngine.java
Patch:
@@ -76,7 +76,7 @@ public void setEnableConditionalComments(boolean enableConditionalComments) {
 
 	/**
 	 * Resolves current position on {@link #error(String) parsing errors}
-	 * and other occasions. Note: this makes processing SLOW!
+	 * and for DOM elements. Note: this makes processing SLOW!
 	 * JFlex may be used to track current line and row, but that brings
 	 * overhead, and can't be easily disabled. By enabling this property,
 	 * position will be calculated manually only on errors.

File: jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaWrapperClassBuilder.java
Patch:
@@ -165,7 +165,7 @@ protected void createSimpleMethodWrapper(MethodSignatureVisitor msign) {
 			mv.visitMethodInsn(INVOKEVIRTUAL, wd.wrapperType.substring(1, wd.wrapperType.length() - 1), msign.getMethodName(), msign.getDescription());
 		}
 		ProxettaAsmUtil.prepareReturnValue(mv, msign, 0);
-		visitReturn(mv, msign, true, false);
+		visitReturn(mv, msign, true);
 		mv.visitMaxs(0, 0);
 		mv.visitEnd();
 	}

File: jodd-proxetta/src/main/java/jodd/methref/MethrefAdvice.java
Patch:
@@ -16,7 +16,6 @@ public class MethrefAdvice implements ProxyAdvice {
 	public Object execute() {
 		methodName = ProxyTarget.targetMethodName();
 
-		ProxyTarget.pushDefaultResultValue();
-		return null;
+		return ProxyTarget.returnValue(null);
 	}
 }
\ No newline at end of file

File: jodd-proxetta/src/test/java/jodd/proxetta/ReturnTest.java
Patch:
@@ -45,6 +45,7 @@ public void testWrapperWithProxyReturns() throws Exception {
 		assertEquals(7.7, retro.method7(), 0.005);
 		assertEquals(8.8, retro.method8(), 0.005);
 		assertEquals(9, retro.method9().length);
+		assertEquals('r', retro.method11());
 
 		retro.method10();
 	}
@@ -74,6 +75,7 @@ public void testNullReturns() throws Exception {
 		assertEquals(0, retro.method7(), 0.005);
 		assertEquals(0, retro.method8(), 0.005);
 		assertNull(retro.method9());
+		assertEquals(0, retro.method11());
 
 		retro.method10();
 	}

File: jodd-proxetta/src/main/java/jodd/asm/AsmUtil.java
Patch:
@@ -164,6 +164,9 @@ public static String typedescToSignature(String desc, MutableInteger from) {
 
 	// ---------------------------------------------------------------- type
 
+	/**
+	 * Converts type to type ref.
+	 */
 	public static String typeToTyperef(Class type) {
 		if (type.isArray() == false) {
 			if (type.isPrimitive() == false) {

File: jodd-proxetta/src/main/java/jodd/proxetta/MethodInfo.java
Patch:
@@ -18,6 +18,8 @@ public interface MethodInfo {
 	 */
 	String getReturnType();
 
+	String getReturnTypeName();
+
 	String getExceptions();
 
 	/**

File: jodd-core/src/main/java/jodd/io/FileUtil.java
Patch:
@@ -1029,7 +1029,7 @@ public static boolean compare(File file1, File file2) throws IOException {
 			return false;
 		}
 
-		if (equals(file1, file1)) {
+		if (equals(file1, file2)) {
 			return true;
 		}
 

File: jodd-core/src/main/java/jodd/io/FileUtilParams.java
Patch:
@@ -2,7 +2,7 @@
 
 package jodd.io;
 
-import jodd.JoddDefault;
+import jodd.JoddCore;
 
 /**
  * {@link FileUtil File utilities} parameters.
@@ -14,7 +14,7 @@ public class FileUtilParams implements Cloneable {
 	protected boolean createDirs = true;				// create missing subdirectories of destination
 	protected boolean recursive = true;					// use recursive directory copying and deleting
 	protected boolean continueOnError = true;			// don't stop on error and continue job as much as possible
-	protected String encoding = JoddDefault.encoding;	// default encoding for reading/writing strings
+	protected String encoding = JoddCore.encoding;		// default encoding for reading/writing strings
 
 
 	public boolean isPreserveDate() {

File: jodd-core/src/main/java/jodd/io/StringOutputStream.java
Patch:
@@ -2,8 +2,8 @@
 
 package jodd.io;
 
+import jodd.JoddCore;
 import jodd.util.CharUtil;
-import jodd.JoddDefault;
 
 import java.io.OutputStream;
 import java.io.Serializable;
@@ -25,8 +25,9 @@ public class StringOutputStream extends OutputStream implements Serializable {
 	 * Creates new StringOutputStream, makes a new internal StringBuffer.
 	 */
 	public StringOutputStream() {
-		this(JoddDefault.encoding);
+		this(JoddCore.encoding);
 	}
+
 	public StringOutputStream(String encoding) {
 		super();
 		sb = new StringBuilder();

File: jodd-core/src/main/java/jodd/typeconverter/impl/StringConverter.java
Patch:
@@ -2,7 +2,7 @@
 
 package jodd.typeconverter.impl;
 
-import jodd.JoddDefault;
+import jodd.JoddCore;
 import jodd.typeconverter.TypeConversionException;
 import jodd.typeconverter.TypeConverter;
 import jodd.util.CsvUtil;
@@ -40,7 +40,7 @@ public String convert(Object value) {
 			if (type == byte[].class) {
 				byte[] valueArray = (byte[]) value;
 				try {
-					return new String(valueArray, 0, valueArray.length, JoddDefault.encoding);
+					return new String(valueArray, 0, valueArray.length, JoddCore.encoding);
 				} catch (UnsupportedEncodingException ueex) {
 					throw new TypeConversionException(ueex);
 				}

File: jodd-core/src/main/java/jodd/util/CharUtil.java
Patch:
@@ -2,7 +2,7 @@
 
 package jodd.util;
 
-import jodd.JoddDefault;
+import jodd.JoddCore;
 
 import java.io.UnsupportedEncodingException;
 
@@ -131,7 +131,7 @@ public static char[] toRawCharArray(byte[] barr) {
 	 * Converts char array to byte array using default Jodd encoding.
 	 */
 	public static byte[] toByteArray(char[] carr) throws UnsupportedEncodingException {
-		return new String(carr).getBytes(JoddDefault.encoding);
+		return new String(carr).getBytes(JoddCore.encoding);
 	}
 
 	/**
@@ -145,7 +145,7 @@ public static byte[] toByteArray(char[] carr, String charset) throws Unsupported
 	 * Converts byte array of default Jodd encoding to char array.
 	 */
 	public static char[] toCharArray(byte[] barr) throws UnsupportedEncodingException {
-		return new String(barr, JoddDefault.encoding).toCharArray();
+		return new String(barr, JoddCore.encoding).toCharArray();
 	}
 
 	/**

File: jodd-core/src/main/java/jodd/util/URLDecoder.java
Patch:
@@ -2,7 +2,7 @@
 
 package jodd.util;
 
-import jodd.JoddDefault;
+import jodd.JoddCore;
 
 import java.io.UnsupportedEncodingException;
 
@@ -15,7 +15,7 @@ public class URLDecoder {
 	 * Decodes URL elements.
 	 */
 	public static String decode(String url) {
-		return decode(url, JoddDefault.encoding);
+		return decode(url, JoddCore.encoding);
 	}
 
 	/**

File: jodd-mail/src/main/java/jodd/mail/EmailMessage.java
Patch:
@@ -2,7 +2,7 @@
 
 package jodd.mail;
 
-import jodd.JoddDefault;
+import jodd.JoddCore;
 import jodd.util.MimeTypes;
 
 /**
@@ -29,7 +29,7 @@ public EmailMessage(String content, String mimeType, String encoding) {
 	public EmailMessage(String content, String mimeType) {
 		this.content = content;
 		this.mimeType = mimeType;
-		this.encoding = JoddDefault.encoding;
+		this.encoding = JoddCore.encoding;
 	}
 
 	/**
@@ -38,7 +38,7 @@ public EmailMessage(String content, String mimeType) {
 	public EmailMessage(String content) {
 		this.content = content;
 		this.mimeType = MimeTypes.MIME_TEXT_PLAIN;
-		this.encoding = JoddDefault.encoding;
+		this.encoding = JoddCore.encoding;
 	}
 
 	// ---------------------------------------------------------------- getters

File: jodd-mail/src/main/java/jodd/mail/ReceiveMailSession.java
Patch:
@@ -2,7 +2,7 @@
 
 package jodd.mail;
 
-import jodd.JoddDefault;
+import jodd.JoddCore;
 import jodd.io.FastByteArrayOutputStream;
 import jodd.io.StreamUtil;
 import jodd.util.CharUtil;
@@ -221,7 +221,7 @@ protected void processPart(ReceivedEmail email, Part part) throws IOException, M
 				String fileName = part.getFileName();
 				String contentId = (part instanceof MimePart) ? ((MimePart)part).getContentID() : null;
 
-				email.addAttachment(fileName, mimeType, contentId, stringContent.getBytes(JoddDefault.encoding));
+				email.addAttachment(fileName, mimeType, contentId, stringContent.getBytes(JoddCore.encoding));
 			} else {
 				String contentType = part.getContentType();
 				email.addMessage(stringContent, extractMimeType(contentType), extractEncoding(contentType));

File: jodd-props/src/main/java/jodd/props/PropsUtil.java
Patch:
@@ -2,7 +2,7 @@
 
 package jodd.props;
 
-import jodd.JoddDefault;
+import jodd.JoddCore;
 import jodd.io.findfile.ClassScanner;
 import jodd.util.StringPool;
 import jodd.util.StringUtil;
@@ -25,7 +25,7 @@ public static void loadFromClasspath(final Props p, final String... patterns) {
 		final ClassScanner scanner = new ClassScanner() {
 			@Override
 			protected void onEntry(EntryData entryData) throws IOException {
-				String encoding = JoddDefault.encoding;
+				String encoding = JoddCore.encoding;
 				if (StringUtil.endsWithIgnoreCase(entryData.getName(), ".properties")) {
 					encoding = StringPool.ISO_8859_1;
 				}

File: jodd-servlet/src/main/java/jodd/servlet/filter/CharacterEncodingFilter.java
Patch:
@@ -2,7 +2,7 @@
 
 package jodd.servlet.filter;
 
-import jodd.JoddDefault;
+import jodd.JoddCore;
 import jodd.typeconverter.Convert;
 
 import java.io.IOException;
@@ -107,7 +107,7 @@ public void init(FilterConfig filterConfig) throws ServletException {
 		this.filterConfig = filterConfig;
 		this.encoding = filterConfig.getInitParameter("encoding");
 		if (this.encoding == null) {
-			this.encoding = JoddDefault.encoding;
+			this.encoding = JoddCore.encoding;
 		}
 		this.ignore = Convert.toBooleanValue(filterConfig.getInitParameter("ignore"), true);
 	}

File: jodd-servlet/src/main/java/jodd/servlet/jspfn/JoddJspFunctions.java
Patch:
@@ -2,7 +2,7 @@
 
 package jodd.servlet.jspfn;
 
-import jodd.JoddDefault;
+import jodd.JoddCore;
 import jodd.datetime.JDateTime;
 import jodd.servlet.ServletUtil;
 import jodd.util.URLCoder;
@@ -133,15 +133,15 @@ public static String url1(String value) {
 	}
 
 	public static String url(String value, PageContext pageContext) {
-		return url(value, JoddDefault.encoding, (HttpServletRequest) pageContext.getRequest(), (HttpServletResponse) pageContext.getResponse());
+		return url(value, JoddCore.encoding, (HttpServletRequest) pageContext.getRequest(), (HttpServletResponse) pageContext.getResponse());
 	}
 
 	public static String url(String value, String encoding, PageContext pageContext) {
 		return url(value, encoding, (HttpServletRequest) pageContext.getRequest(), (HttpServletResponse) pageContext.getResponse());
 	}
 
 	public static String url(String value, HttpServletRequest request, HttpServletResponse response) {
-		return url(value, JoddDefault.encoding, request, response);
+		return url(value, JoddCore.encoding, request, response);
 	}
 
 	public static String url(String value, String encoding, HttpServletRequest request, HttpServletResponse response) {

File: jodd-servlet/src/main/java/jodd/servlet/upload/MultipartRequest.java
Patch:
@@ -2,7 +2,7 @@
 
 package jodd.servlet.upload;
 
-import jodd.JoddDefault;
+import jodd.JoddCore;
 import jodd.servlet.ServletUtil;
 import jodd.upload.FileUploadFactory;
 import jodd.upload.MultipartStreamParser;
@@ -112,7 +112,7 @@ public MultipartRequest(HttpServletRequest request, FileUploadFactory fileUpload
 			this.characterEncoding = request.getCharacterEncoding();
 		}
 		if (this.characterEncoding == null) {
-			this.characterEncoding = JoddDefault.encoding;
+			this.characterEncoding = JoddCore.encoding;
 		}
 	}
 

File: jodd-upload/src/main/java/jodd/upload/impl/AdaptiveFileUpload.java
Patch:
@@ -2,7 +2,7 @@
 
 package jodd.upload.impl;
 
-import jodd.JoddDefault;
+import jodd.JoddCore;
 import jodd.io.FastByteArrayOutputStream;
 import jodd.io.FileUtil;
 import jodd.io.FileNameUtil;
@@ -134,7 +134,7 @@ protected void processStream() throws IOException {
 			}
 		}
 
-		tempFile = FileUtil.createTempFile(JoddDefault.tempFilePrefix, TMP_FILE_SUFFIX, uploadPath);
+		tempFile = FileUtil.createTempFile(JoddCore.tempFilePrefix, TMP_FILE_SUFFIX, uploadPath);
 		BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(tempFile));
 		if (data != null) {
 			size = data.length;

File: jodd-props/src/test/java/jodd/props/PropertiesToPropsTestHelper.java
Patch:
@@ -91,7 +91,9 @@ public static void assertEqualsToPropsFile(final String actual, final File expec
 			fail(e.getMessage());
 			throw new IllegalStateException(e);
 		}
-		assertEquals(expected, actual);
+
+		String actualUnixStyle = actual.replace("\r\n", "\n");
+		assertEquals(expected, actualUnixStyle);
 	}
 
 	private static String readContent(final BufferedReader reader) throws IOException {

File: jodd-lagarto-web/src/test/java/jodd/htmlstapler/HtmlStaplerCssTest.java
Patch:
@@ -1,6 +1,6 @@
 // Copyright (c) 2003-2012, Jodd Team (jodd.org). All Rights Reserved.
 
-package jodd.lagarto.htmlstapler;
+package jodd.htmlstapler;
 
 import junit.framework.TestCase;
 

File: jodd-jtx/src/main/java/jodd/jtx/JtxTransaction.java
Patch:
@@ -2,7 +2,8 @@
 
 package jodd.jtx;
 
-import jodd.log.Log;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import static jodd.jtx.JtxStatus.*;
 import static jodd.jtx.JtxTransactionMode.DEFAULT_TIMEOUT;
@@ -31,7 +32,7 @@
  */
 public class JtxTransaction {
 
-	private static final Log log = Log.getLogger(JtxTransaction.class);
+	private static final Logger log = LoggerFactory.getLogger(JtxTransaction.class);
 
 	// ---------------------------------------------------------------- init
 

File: jodd-jtx/src/main/java/jodd/jtx/db/DbJtxResourceManager.java
Patch:
@@ -7,7 +7,8 @@
 import jodd.jtx.JtxException;
 import jodd.db.connection.ConnectionProvider;
 import jodd.db.DbSession;
-import jodd.log.Log;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Database {@link jodd.jtx.JtxResourceManager} manages life-cycle of {@link jodd.db.DbSession} resources.
@@ -18,7 +19,7 @@
  */
 public class DbJtxResourceManager implements JtxResourceManager<DbSession> {
 
-	private static final Log log = Log.getLogger(DbJtxResourceManager.class);
+	private static final Logger log = LoggerFactory.getLogger(DbJtxResourceManager.class);
 
 	protected final ConnectionProvider connectionProvider;
 

File: jodd-jtx/src/main/java/jodd/jtx/db/DbJtxSessionProvider.java
Patch:
@@ -7,15 +7,16 @@
 import jodd.db.DbSqlException;
 import jodd.jtx.JtxTransactionManager;
 import jodd.jtx.JtxTransactionMode;
-import jodd.log.Log;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Returns session from the db transaction manager.
  * This session provider is made for {@link DbJtxTransactionManager}.
  */
 public class DbJtxSessionProvider implements DbSessionProvider {
 
-	private static final Log log = Log.getLogger(DbJtxSessionProvider.class);
+	private static final Logger log = LoggerFactory.getLogger(DbJtxSessionProvider.class);
 
 	protected final JtxTransactionManager jtxTxManager;
 	protected final JtxTransactionMode defaultTxMode;

File: jodd-jtx/src/main/java/jodd/jtx/worker/LeanJtxWorker.java
Patch:
@@ -5,7 +5,8 @@
 import jodd.jtx.JtxTransactionManager;
 import jodd.jtx.JtxTransaction;
 import jodd.jtx.JtxTransactionMode;
-import jodd.log.Log;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Lean transaction worker helps dealing transactions when they were requested
@@ -14,7 +15,7 @@
  */
 public class LeanJtxWorker {
 
-	private static final Log log = Log.getLogger(LeanJtxWorker.class);
+	private static final Logger log = LoggerFactory.getLogger(LeanJtxWorker.class);
 
 	protected final JtxTransactionManager txManager;
 

File: jodd-petite/src/main/java/jodd/petite/PetiteBeans.java
Patch:
@@ -4,11 +4,12 @@
 
 import jodd.introspector.ClassDescriptor;
 import jodd.introspector.ClassIntrospector;
-import jodd.log.Log;
 import jodd.petite.scope.DefaultScope;
 import jodd.petite.scope.Scope;
 import jodd.util.ReflectUtil;
 import jodd.util.StringPool;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
@@ -24,7 +25,7 @@
  */
 public abstract class PetiteBeans {
 
-	private static final Log log = Log.getLogger(PetiteBeans.class);
+	private static final Logger log = LoggerFactory.getLogger(PetiteBeans.class);
 
 	/**
 	 * Map of all beans definitions.

File: jodd-petite/src/main/java/jodd/petite/PetiteContainer.java
Patch:
@@ -3,7 +3,6 @@
 package jodd.petite;
 
 import jodd.bean.BeanUtil;
-import jodd.log.Log;
 import jodd.petite.config.PetiteConfigurator;
 import jodd.petite.scope.SingletonScope;
 
@@ -12,6 +11,8 @@
 import java.util.Map;
 
 import jodd.typeconverter.Convert;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Petite IOC container. Consist of following layers:
@@ -21,7 +22,7 @@
  */
 public class PetiteContainer extends PetiteRegistry {
 
-	private static final Log log = Log.getLogger(PetiteContainer.class);
+	private static final Logger log = LoggerFactory.getLogger(PetiteContainer.class);
 
 	public static final String PETITE_CONTAINER_REF_NAME = "petiteContainer";
 

File: jodd-petite/src/main/java/jodd/petite/config/AutomagicPetiteConfigurator.java
Patch:
@@ -2,12 +2,13 @@
 
 package jodd.petite.config;
 
-import jodd.log.Log;
 import jodd.petite.PetiteContainer;
 import jodd.petite.PetiteException;
 import jodd.petite.meta.PetiteBean;
 import jodd.io.findfile.ClassFinder;
 import jodd.util.ClassLoaderUtil;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.io.File;
 import java.io.InputStream;
@@ -21,7 +22,7 @@
  */
 public class AutomagicPetiteConfigurator extends ClassFinder implements PetiteConfigurator {
 
-	private static final Log log = Log.getLogger(AutomagicPetiteConfigurator.class);
+	private static final Logger log = LoggerFactory.getLogger(AutomagicPetiteConfigurator.class);
 
 	protected final byte[] petiteBeanAnnotationBytes;
 

File: jodd-proxetta/src/main/java/jodd/proxetta/ProxettaBuilder.java
Patch:
@@ -3,14 +3,15 @@
 package jodd.proxetta;
 
 import jodd.io.FileUtil;
-import jodd.log.Log;
 import jodd.proxetta.asm.TargetClassInfoReader;
 import jodd.proxetta.asm.WorkData;
 import jodd.util.StringUtil;
 import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.ClassWriter;
 import jodd.util.ClassLoaderUtil;
 import jodd.io.StreamUtil;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.io.File;
 import java.io.InputStream;
@@ -23,7 +24,7 @@
  */
 public abstract class ProxettaBuilder {
 
-	private static final Log log = Log.getLogger(ProxettaBuilder.class);
+	Logger log = LoggerFactory.getLogger(ProxettaBuilder.class);
 
 	protected final Proxetta proxetta;
 

File: jodd-core/src/test/java/jodd/util/ClassLoaderUtilTest.java
Patch:
@@ -52,7 +52,7 @@ public void testLoadClass() throws ClassNotFoundException {
 		}
 
 		try {
-			Class joddClass = ClassLoaderUtil.loadClass("jodd.Jodd");
+			Class joddClass = ClassLoaderUtil.loadClass("jodd.util.ClassLoaderUtilTest");
 			assertNotNull(joddClass);
 		} catch (ClassNotFoundException ignore) {
 			fail();

File: mod/jodd/src/jodd/io/findfile/FindFile.java
Patch:
@@ -274,8 +274,10 @@ public FilesIterator(String[] fileNames) {
 		public File next() {
 			if (files != null) {
 				return nextFile();
-			} else {
+			} else if (fileNames != null) {
 				return nextFileName();
+			} else {
+				return null;
 			}
 		}
 

File: mod/jodd-wot/test/jodd/lagarto/StuckTest.java
Patch:
@@ -41,8 +41,7 @@ public void testStuck() throws IOException {
 		try {
 			doc.$("a").each(new JerryFunction() {
 				public boolean onNode(Jerry $this, int index) {
-					System.out.println("-----");
-					System.out.println($this.html());
+					assertEquals("Go to Database Directory", $this.html().trim());
 					return false;
 				}
 			});

File: mod/jodd-wot/test/jodd/db/DbMiscTest.java
Patch:
@@ -35,7 +35,7 @@ public void testBig() throws Exception {
 		assertEquals(1, query.getOpenResultSetCount());
 	//	assertEquals(1, DbQuery.totalOpenResultSetCount);
 
-		assertEquals("select * from GIRL where ID = 2\nExecution time: ", query.getQueryString().substring(0, 48));
+		assertEquals("select * from GIRL where ID = 2", query.getQueryString());
 		while (rs.next()) {
 			assertEquals(2, rs.getInt(1));
 			assertEquals("Sandra", rs.getString(2));

File: mod/jodd-wot/src/jodd/proxetta/asm/ProxettaWrapperClassBuilder.java
Patch:
@@ -3,8 +3,6 @@
 package jodd.proxetta.asm;
 
 import jodd.asm.AsmConst;
-import jodd.asm.AsmUtil;
-import jodd.proxetta.ProxettaException;
 import jodd.proxetta.ProxyAspect;
 import org.objectweb.asm.ClassVisitor;
 import org.objectweb.asm.FieldVisitor;

File: mod/jodd-wot/test/jodd/proxetta/SubclassTest.java
Patch:
@@ -161,7 +161,7 @@ public void testJdk() throws Exception {
 
 		assertEquals(1, StatCounter.counter);
 		list.add(new Integer(1));
-		assertEquals(3, StatCounter.counter);
+		assertTrue(StatCounter.counter == 3 || StatCounter.counter == 2);
 
 		System.out.println("----------set");
 
@@ -171,9 +171,9 @@ public void testJdk() throws Exception {
 		assertNotNull(set);
 		assertEquals("foo.HashSet$Proxetta", set.getClass().getName());
 
-		assertEquals(4, StatCounter.counter);
+		assertTrue(StatCounter.counter == 4 || StatCounter.counter == 3);
 		set.add(new Integer(1));
-		assertEquals(5, StatCounter.counter);
+		assertTrue(StatCounter.counter == 5 || StatCounter.counter == 4);
 
 	}
 }

File: mod/jodd/test/jodd/io/FindFileTest.java
Patch:
@@ -22,7 +22,7 @@ protected void setUp() throws Exception {
 			return;
 		}
 		URL data = FileUtilTest.class.getResource("data");
-		dataRoot = data.getFile().substring(1);
+		dataRoot = data.getFile();
 	}
 
 	public void testWildcardFile() {

File: mod/jodd/test/jodd/io/findfile/FindFile2Test.java
Patch:
@@ -19,7 +19,7 @@ protected void setUp() throws Exception {
 			return;
 		}
 		URL data = FindFile2Test.class.getResource("data");
-		dataRoot = data.getFile().substring(1);
+		dataRoot = data.getFile();
 	}
 
 	public void testAcceptAndWalk() {

File: mod/jodd-wot/src/jodd/proxetta/asm/ProxettaWrapperClassBuilder.java
Patch:
@@ -64,11 +64,11 @@ public void visit(int version, int access, String name, String signature, String
 		// write destination class
 		if (targetClassOrInterface.isInterface()) {
 			wd.wrapInterface = true;
-			interfaces = new String[] {AsmUtil.typeToTyperef(targetClassOrInterface)};
+			interfaces = new String[] {targetClassOrInterface.getName().replace('.', '/')};
 		} else {
 			wd.wrapInterface = false;
 			if (targetInterface != null) {
-				interfaces = new String[] {AsmUtil.typeToTyperef(targetInterface)};
+				interfaces = new String[] {targetInterface.getName().replace('.', '/')};
 			} else {
 				interfaces = null;
 			}

File: mod/jodd-wot/test/jodd/proxetta/WrapperTest.java
Patch:
@@ -108,7 +108,7 @@ public boolean apply(MethodInfo methodInfo) {
 			}
 		}));
 
-		proxetta.setDebugFolder("d:\\");
+//		proxetta.setDebugFolder("d:\\");
 
 		// wrapper over INTERFACE
 		// resulting object has one interface

File: mod/samples/src/examples/proxetta/dci/RunMe.java
Patch:
@@ -2,8 +2,8 @@
 
 package examples.proxetta.dci;
 
-import jodd.proxetta.Proxetta;
 import jodd.proxetta.ProxyAspect;
+import jodd.proxetta.impl.ProxyProxetta;
 
 /**
  * Example.
@@ -28,8 +28,7 @@ public static void main(String[] args) throws Exception {
 	 * (such Petite from Jodd :)
 	 */
 	private static <T> T createRole(Class<T> target) throws Exception {
-		Class<T> proxified = Proxetta.withAspects(aspect).defineProxy(target);
-		return proxified.newInstance();
+		return (T) ProxyProxetta.withAspects(aspect).builder(target).newInstance();
 	}
 
 	/**

File: mod/samples/src/examples/proxetta/petite/Petite.java
Patch:
@@ -8,12 +8,12 @@
 import jodd.petite.scope.Scope;
 import jodd.proxetta.ProxyPointcut;
 import jodd.proxetta.MethodInfo;
-import jodd.proxetta.Proxetta;
 import jodd.proxetta.ProxyAspect;
 import examples.petite.Foo;
 import examples.petite.FooImpl;
 import examples.petite.Boo;
 import examples.proxetta.LogProxyAdvice;
+import jodd.proxetta.impl.ProxyProxetta;
 
 public class Petite {
 
@@ -33,7 +33,7 @@ public static void one() {
 		PetiteContainer petite = new PetiteContainer() {
 			@Override
 			protected BeanDefinition registerPetiteBean(String name, Class type, Class<? extends Scope> scopeType, WiringMode wiringMode) {
-				type = Proxetta.withAspects(pd4log).defineProxy(type);
+				type = ProxyProxetta.withAspects(pd4log).builder(type).define();
 				return super.registerPetiteBean(name, type, scopeType, wiringMode);
 			}
 		};

File: mod/jodd-wot/src/jodd/proxetta/impl/InvokeProxettaBuilder.java
Patch:
@@ -46,7 +46,7 @@ protected WorkData process(ClassReader cr, TargetClassInfoReader targetClassInfo
 		InvokeClassBuilder icb = new InvokeClassBuilder(
 				destClassWriter,
 				invokeProxetta.getAspects(),
-				classNameSuffix(),
+				resolveClassNameSuffix(),
 				requestedProxyClassName,
 				targetClassInfoReader);
 

File: mod/jodd-wot/src/jodd/proxetta/impl/ProxyProxettaBuilder.java
Patch:
@@ -46,7 +46,7 @@ protected WorkData process(ClassReader cr, TargetClassInfoReader targetClassInfo
 		ProxettaClassBuilder pcb = new ProxettaClassBuilder(
 				destClassWriter,
 				proxyProxetta.getAspects(),
-				classNameSuffix(),
+				resolveClassNameSuffix(),
 				requestedProxyClassName,
 				targetClassInfoReader);
 

File: mod/jodd-wot/src/jodd/proxetta/impl/WrapperProxettaBuilder.java
Patch:
@@ -44,7 +44,7 @@ protected WorkData process(ClassReader cr, TargetClassInfoReader targetClassInfo
 						targetInterface,
 						destClassWriter,
 						wrapperProxetta.getAspects(),
-						classNameSuffix(),
+						resolveClassNameSuffix(),
 						requestedProxyClassName,
 						targetClassInfoReader);
 

File: mod/jodd/src/jodd/bean/BeanUtilUtil.java
Patch:
@@ -197,6 +197,9 @@ protected String extractIndex(BeanProperty bp) {
 		bp.index = null;
 		String name = bp.name;
 		int lastNdx = name.length() - 1;
+		if (lastNdx < 0) {
+			return null;
+		}
 		if (name.charAt(lastNdx) == ']') {
 			int leftBracketNdx = name.lastIndexOf('[');
 			if (leftBracketNdx != -1) {

File: mod/serverside/src/madvoc/HelloAction.java
Patch:
@@ -85,7 +85,7 @@ public void all() {
 	@Action
 	public String again() throws IOException {
 		System.out.println(">HelloAction.again");
-		servletResponse.getWriter().print("Direct stream output...");
+		servletResponse.getWriter().print("<body>Direct stream output...</body>");
 		return "none:";
 	}
 

File: mod/serverside/src/madvoc/RawAction.java
Patch:
@@ -13,13 +13,13 @@ public class RawAction {
 
 	@Action
 	public RawData view() {
-		String result = "this is some raw direct result";
+		String result = "<body>this is some raw direct result</body>";
 		byte[] bytes = CharUtil.toAsciiByteArray(result.toCharArray());
 		return new RawData(bytes, MimeTypes.MIME_TEXT_HTML);
 	}
 
 	@Action
 	public String text() {
-		return "raw:some raw txt";
+		return "raw:<body>some raw txt</body>";
 	}
 }

File: mod/serverside/src/madvoc/item/Item.java
Patch:
@@ -1,8 +1,8 @@
 // Copyright (c) 2003-2012, Jodd Team (jodd.org). All Rights Reserved.
 
-package madvoc.girl;
+package madvoc.item;
 
-public class Girl {
+public class Item {
 
 	private int id;
 
@@ -28,7 +28,7 @@ public void setName(String name) {
 
 	@Override
 	public String toString() {
-		return "Girl{" +
+		return "Item{" +
 				"id=" + id +
 				", name='" + name + '\'' +
 				'}';

File: mod/serverside/src/madvoc/item/package-info.java
Patch:
@@ -1,5 +1,5 @@
 
 @MadvocAction("/")
-package madvoc.girl;
+package madvoc.item;
 
 import jodd.madvoc.meta.MadvocAction;
\ No newline at end of file

File: mod/jodd-wot/src/jodd/paramo/MethodParameter.java
Patch:
@@ -4,7 +4,8 @@
 
 /**
  * Resolved method parameter from bytecode.
- * It consist of a name and a signature.
+ * It consist of parameter name and parameter bytecode signature
+ * (including generics info).
  */
 public class MethodParameter {
 
@@ -28,7 +29,7 @@ public String getName() {
 
 	/**
 	 * Returns method parameter signature.
-	 * It works for both generic and non-generic types.
+	 * Generics information is available, too.
 	 */
 	public String getSignature() {
 		return signature;

File: mod/jodd-wot/src/jodd/paramo/MethodParameter.java
Patch:
@@ -4,7 +4,7 @@
 
 /**
  * Resolved method parameter from bytecode.
- * It consist of a name and a generic signature.
+ * It consist of a name and a signature.
  */
 public class MethodParameter {
 
@@ -27,8 +27,8 @@ public String getName() {
 	}
 
 	/**
-	 * Returns method parameter signature when parameter type uses generics.
-	 * May be <code>null</code> if the type does not use generic types.
+	 * Returns method parameter signature.
+	 * It works for both generic and non-generic types.
 	 */
 	public String getSignature() {
 		return signature;

File: mod/jodd-wot/src/jodd/paramo/ParamExtractor.java
Patch:
@@ -31,6 +31,9 @@ public void visitLocalVariable(String name, String desc, String signature, Label
 			if (name.equals("arg" + currentParam) == false) {
 				debugInfoPresent = true;
 			}
+			if (signature == null) {
+				signature = desc;
+			}
 			methodParameters[currentParam] = new MethodParameter(name, signature);
 			currentParam++;
 		}

File: mod/jodd-wot/test/jodd/paramo/ParamoTest.java
Patch:
@@ -119,9 +119,9 @@ public void testNonGeneric() {
 		MethodParameter[] mps = Paramo.resolveParameters(m);
 		assertEquals(2, mps.length);
 		assertEquals("foo", mps[0].getName());
-		assertNull(mps[0].getSignature());
+		assertEquals("Ljava/util/Map;", mps[0].getSignature());
 		assertEquals("aLong", mps[1].getName());
-		assertNull(mps[1].getSignature());
+		assertEquals("Ljava/lang/Long;", mps[1].getSignature());
 	}
 
 	public void testGeneric() {
@@ -131,7 +131,7 @@ public void testGeneric() {
 		assertEquals("foo", mps[0].getName());
 		assertEquals("Ljava/util/Map<Ljava/lang/String;Ljava/lang/Long;>;", mps[0].getSignature());
 		assertEquals("aLong", mps[1].getName());
-		assertNull(mps[1].getSignature());
+		assertEquals("Ljava/lang/Long;", mps[1].getSignature());
 
 		m = ReflectUtil.findDeclaredMethod(Generic.class, "two");
 		mps = Paramo.resolveParameters(m);

File: mod/jodd-wot/src/jodd/lagarto/dom/DOMBuilderTagVisitor.java
Patch:
@@ -97,7 +97,7 @@ protected Element createElementNode(Tag tag) {
 		
 		Element element = new Element(tag, isVoid, selfClosed, domBuilder.isCaseSensitive());
 
-		if (domBuilder.isCalculateErrorPosition()) {
+		if (domBuilder.isCalculatePosition()) {
 			element.position = calculatePosition(tag);
 		}
 
@@ -144,7 +144,7 @@ public void tag(Tag tag) {
 				if (matchingParent == null) {			// matching open tag not found, remove it
 					if (log.isWarnEnabled()) {
 						String positionString = StringPool.EMPTY;
-						if (domBuilder.isCalculateErrorPosition()) {
+						if (domBuilder.isCalculatePosition()) {
 							positionString = calculatePosition(tag).toString();
 						}
 
@@ -270,7 +270,7 @@ protected void fixUpToMatchingPoint(Node matchingParent) {
 
 			if (log.isWarnEnabled()) {
 				String positionString = StringPool.EMPTY;
-				if (domBuilder.isCalculateErrorPosition()) {
+				if (domBuilder.isCalculatePosition()) {
 					positionString = parentNode.position.toString();
 				}
 				log.warn("Unclosed tag: <" + nodeName + "> " + positionString + " closed.");

File: mod/jodd-wot/test/jodd/lagarto/dom/DomXmlTest.java
Patch:
@@ -117,7 +117,7 @@ public void testConditionalComments2() throws IOException {
 		lagartoDOMBuilder.enableXmlMode();
 		lagartoDOMBuilder.setIgnoreComments(true);
 		lagartoDOMBuilder.setCollectErrors(true);
-		lagartoDOMBuilder.setCalculateErrorPosition(true);
+		lagartoDOMBuilder.setCalculatePosition(true);
 
 		Document doc = lagartoDOMBuilder.parse(xmlContent);
 		List<String> errors = doc.getErrors();

File: mod/jodd-wot/src/jodd/lagarto/LagartoParserUtil.java
Patch:
@@ -83,7 +83,7 @@ public static int[] calculateLineAndColumn(CharSequence charSequence, int positi
 
 			if (c == '\n') {
 				line++;
-				lastNewLineOffset++;
+				lastNewLineOffset = offset + 1;
 			}
 
 			offset++;

File: mod/jodd-wot/src/jodd/lagarto/htmlstapler/HtmlStaplerBundlesManager.java
Patch:
@@ -7,7 +7,6 @@
 import jodd.io.NetUtil;
 import jodd.io.ZipUtil;
 import jodd.io.findfile.FindFile;
-import jodd.io.findfile.WildcardFindFile;
 import jodd.log.Log;
 import jodd.util.Base32;
 import jodd.util.CharUtil;
@@ -497,7 +496,7 @@ public synchronized void reset() {
 			mirrors.clear();
 		}
 
-		FindFile ff = new WildcardFindFile("*");
+		FindFile ff = new FindFile();
 		ff.setIncludeDirs(false);
 		ff.searchPath(new File(bundleFolder, staplerPath));
 

File: mod/jodd/src/jodd/io/findfile/FindFile.java
Patch:
@@ -347,7 +347,7 @@ public File nextFile() {
 				folder = todoFolders.removeFirst();
 			}
 
-			if (recursive == true) {
+			if ((initialDir) || (recursive == true)) {
 				todoFiles.add(new FilesIterator(folder));
 			}
 

File: mod/jodd/test/jodd/io/FindFileTest.java
Patch:
@@ -28,7 +28,7 @@ protected void setUp() throws Exception {
 	}
 
 	public void testWildcardFile() {
-		FindFile ff = new WildcardFindFile("*file/a*")
+		FindFile ff = new WildcardFindFile("**/*file/a*")
 				.setRecursive(true)
 				.setIncludeDirs(true)
 				.searchPath(dataRoot);

File: mod/jodd-wot/test/jodd/db/oom/MappingTest.java
Patch:
@@ -112,6 +112,7 @@ public void testMapping() throws SQLException {
 
 
 		doq = new DbOomQuery(DbEntitySql.updateColumn(foo, "timestamp2", new JDateTime("2010-02-02 20:20:20.222")));
+
 		doq.executeUpdateAndClose();
 
 		foos = new DbOomQuery("select * from FOO").listAndClose(Foo.class);

File: mod/jodd-wot/test/jodd/db/oom/sqlgen/DbEntitySqlTest.java
Patch:
@@ -100,7 +100,7 @@ public void testUpdateColumn() {
 		BadGirl bg = new BadGirl(Integer.valueOf(1), "sanja", "c++");
 		DbSqlBuilder b = DbEntitySql.updateColumn(bg, "fooname", "Anja");
 		assertEquals(
-				"update GIRL BadGirl set BadGirl.NAME=:p0 where (BadGirl.ID=:badGirl.fooid)",
+				"update GIRL BadGirl set NAME=:p0 where (BadGirl.ID=:badGirl.fooid)",
 				b.generateQuery());
 		Map<String, ParameterValue> params = b.getQueryParameters();
 		assertEquals(2, params.entrySet().size());

File: mod/jodd-wot/src/jodd/db/oom/sqlgen/chunks/ColumnValueChunk.java
Patch:
@@ -5,7 +5,7 @@
 import jodd.db.oom.DbEntityColumnDescriptor;
 
 /**
- * {@link jodd.db.oom.sqlgen.chunks.ValueChunk Value} for the last column.
+ * {@link ValueChunk Value} for the <b>last</b> column.
  */
 public class ColumnValueChunk extends ValueChunk {
 

File: mod/jodd-wot/src/jodd/db/oom/sqlgen/chunks/ValueChunk.java
Patch:
@@ -8,6 +8,8 @@
  * Defines SQL parameter and its value. Name may be <code>null</code> and will be
  * automatically generated. Collections are recognized and will be rendered into
  * the list of values.
+ * <p>
+ * For the <b>last</b> value use {@link ColumnValueChunk}!
  */
 public class ValueChunk extends SqlChunk {
 

File: mod/jodd-wot/src/jodd/db/DbThreadSession.java
Patch:
@@ -34,7 +34,7 @@ public DbThreadSession(ConnectionProvider connectionProvider) {
 	 * default connection provider.
 	 */
 	public DbThreadSession() {
-		this(DbDefault.connectionProvider);
+		this(null);
 	}
 
 	

File: mod/jodd-wot/src/jodd/db/oom/sqlgen/chunks/SqlChunk.java
Patch:
@@ -54,7 +54,7 @@ public SqlChunk getNextChunk() {
 	}
 
 	/**
-	 * Appends chunk to previous one and maintaince the double-linked list of the previous chunk.
+	 * Appends chunk to previous one and maintains the double-linked list of the previous chunk.
 	 * Current surrounding connections of this chunk will be cut-off.
 	 */
 	public void insertChunkAfter(SqlChunk previous) {

File: mod/jodd-wot/test/jodd/db/oom/sqlgen/DbEntitySqlTest.java
Patch:
@@ -78,20 +78,20 @@ public void testTruncate() {
 	public void testUpdate() {
 		Girl g = new Girl(1, "sanja", "c++");
 		DbSqlBuilder b = DbEntitySql.update(g);
-		assertEquals("update GIRL Girl set Girl.ID=:girl.id, Girl.NAME=:girl.name, Girl.SPECIALITY=:girl.speciality  where (1=1)",
+		assertEquals("update GIRL Girl set ID=:girl.id, NAME=:girl.name, SPECIALITY=:girl.speciality  where (1=1)",
 				b.generateQuery());
 		checkGirl(b);
 
 		BadGirl bg = new BadGirl(Integer.valueOf(2), null, ".net");
 		b = DbEntitySql.update(bg);
 		assertEquals(
-				"update GIRL BadGirl set BadGirl.ID=:badGirl.fooid, BadGirl.SPECIALITY=:badGirl.foospeciality  where (BadGirl.ID=:badGirl.fooid)",
+				"update GIRL BadGirl set ID=:badGirl.fooid, SPECIALITY=:badGirl.foospeciality  where (BadGirl.ID=:badGirl.fooid)",
 				b.generateQuery());
 		checkBadGirl1(b);
 
 		b = DbEntitySql.updateAll(bg);
 		assertEquals(
-				"update GIRL BadGirl set BadGirl.ID=:badGirl.fooid, BadGirl.NAME=:badGirl.fooname, BadGirl.SPECIALITY=:badGirl.foospeciality  where (BadGirl.ID=:badGirl.fooid)",
+				"update GIRL BadGirl set ID=:badGirl.fooid, NAME=:badGirl.fooname, SPECIALITY=:badGirl.foospeciality  where (BadGirl.ID=:badGirl.fooid)",
 				b.generateQuery());
 		checkBadGirl2(b);
 	}

File: mod/jodd-joy/src/jodd/joy/auth/AuthUtil.java
Patch:
@@ -90,8 +90,10 @@ public static void startUserSession(HttpServletRequest servletRequest, Object us
 
 	/**
 	 * Reads auth cookie and returns stored string array from cookie data.
+	 * Returns <code>null</code> if cookie does not exist.
+	 * Throws an exception if cookie data is invalid or corrupted.
 	 */
-	public static String[] readAuthCookie(HttpServletRequest request) {
+	public static String[] readAuthCookie(HttpServletRequest request) throws Exception {
 		Cookie cookie = ServletUtil.getCookie(request, AUTH_COOKIE_NAME);
 		if (cookie == null) {
 			return null;

File: mod/jodd/src/jodd/servlet/upload/MultipartStreamParser.java
Patch:
@@ -215,7 +215,7 @@ public FileUpload[] getFiles(String paramName) {
 	 * Returns parameter names of all uploaded files.
 	 */
 	public Set<String> getFileParameterNames() {
-		if (requestParameters == null) {
+		if (requestFiles == null) {
 			return Collections.emptySet();
 		}
 		return requestFiles.keySet();

File: mod/jodd-wot/src/jodd/lagarto/LagartoException.java
Patch:
@@ -10,11 +10,11 @@
 public class LagartoException extends UncheckedException {
 
 	public LagartoException(Throwable t) {
-		super(t);
+		super("Parsing error.", t);
 	}
 
 	public LagartoException() {
-		super();
+		super("Parsing error.");
 	}
 
 	public LagartoException(String message) {

File: mod/jodd/src/jodd/mail/Email.java
Patch:
@@ -40,7 +40,7 @@ public Email replyTo(String replyTo) {
 		return this;
 	}
 	public Email replyTo(String... replyTos) {
-		setTo(replyTos);
+		setReplyTo(replyTos);
 		return this;
 	}
 

File: mod/jodd-wot/src/jodd/lagarto/htmlstapler/HtmlStaplerFilter.java
Patch:
@@ -34,7 +34,7 @@
  * <li>resetOnStart - if bundles should be reset on server start (<code>true</code> by default)
  * <li>useGzip - if gzip should be used (<code>false</code> by default)
  * <li>cacheMaxAge - cache header max-age value (30 days by default), if set to 0 it will not be set.
- * <li>staplerStragy - strategy (<code>RESOURCE_ONLY</code> by default)</li>
+ * <li>staplerStrategy - strategy (<code>RESOURCE_ONLY</code> by default)</li>
  *
  * Some additional settings can be applied on created
  * {@link #createBundleManager(javax.servlet.ServletContext, jodd.lagarto.htmlstapler.HtmlStaplerBundlesManager.Strategy) bundle manager}.

File: mod/jodd/test/jodd/datetime/FormatterTest.java
Patch:
@@ -13,6 +13,7 @@
 import java.util.Locale;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
+import java.util.TimeZone;
 
 public class FormatterTest extends TestCase {
 
@@ -33,6 +34,8 @@ public void tearDown() throws Exception {
 
 	public void testStringConversion() {
 		JDateTime jdt = new JDateTime(1975, 1, 1);
+		jdt.setTimeZone(TimeZone.getTimeZone("CET"));
+
 		assertEquals("2442413.5", jdt.getJulianDate().toString());
 		assertEquals("1975-01-01 00:00:00.000", jdt.toString());
 

File: mod/jodd-wot/test/jodd/petite/WireTest.java
Patch:
@@ -76,7 +76,7 @@ public void testContainer() {
 		assertNotNull(boo.zoo);
 		assertSame(boo.zoo.boo, boo);
 		assertEquals(3, boo.getFoo().hello());
-		assertEquals(1, boo.getFoo().getCounter());
+		assertEquals(2, boo.getFoo().getCounter());		// '2' because the first time we getBean('boo') the wiring occurred before exception was throwed!
 	}
 
 	public void testCreate() {

File: mod/jodd-wot/src/jodd/lagarto/adapter/htmlstapler/BundleAction.java
Patch:
@@ -106,7 +106,7 @@ public String processLink(String src) {
 	 */
 	public void end() {
 		if (newAction) {
-			bundleId = bundlesManager.registerBundle(actionPath, bundleId, sources);
+			bundleId = bundlesManager.registerBundle(contextPath, actionPath, bundleId, sources);
 		}
 	}
 

File: mod/jodd-joy/src/jodd/joy/WebRunner.java
Patch:
@@ -97,10 +97,10 @@ public static void setJtxManager(JtxTransactionManager jm) {
 	}
 
 	/**
-	 * Starts new transaction.
+	 * Starts new read/write transaction in PROPAGATION_REQUIRED mode.
 	 */
 	public static JtxTransaction startRwTx() {
-		return jtxManager.requestTransaction(new JtxTransactionMode().readOnly(false));
+		return jtxManager.requestTransaction(new JtxTransactionMode().propagationRequired().readOnly(false));
 	}
 
 }
\ No newline at end of file

File: mod/jodd-wot/src/jodd/lagarto/adapter/htmlstapler/HtmlStaplerBundlesManager.java
Patch:
@@ -374,7 +374,7 @@ protected void createBundle(String actionPath, String bundleId, List<String>sour
 					if (src.startsWith(StringPool.SLASH)) {
 						localFile += src;
 					} else {
-						localFile += FileNameUtil.getPath(actionPath) + '/' + src;
+						localFile += '/' + FileNameUtil.getPathNoEndSeparator(actionPath) + '/' + src;
 					}
 
 					// trim link parameters, if any

File: mod/jodd-joy/src/jodd/joy/core/DefaultAppCore.java
Patch:
@@ -166,7 +166,7 @@ protected void resolveAppDir(String classPathFileName) {
 		appDir = url.getFile();
 
 		int ndx = appDir.indexOf("WEB-INF");
-		boolean isWebApplication = (ndx != -1);
+		isWebApplication = (ndx != -1);
 
 		appDir = isWebApplication ? appDir.substring(0, ndx) : SystemUtil.getWorkingFolder();
 	}

File: mod/jodd-wot/src/jodd/db/DbQuery.java
Patch:
@@ -905,7 +905,7 @@ void setObject(String param, Object object, int targetSqlType, int scale) {
 	 * @see #setObject(String, Object, Class, int)
 	 */
 	public void setObject(int index, Object value) {
-		setObject(index, value, null, Integer.MAX_VALUE);
+		setObject(index, value, null, Types.OTHER);
 	}
 
 	/**
@@ -944,7 +944,7 @@ public void setObject(int index, Object value, Class<? extends SqlType> sqlTypeC
 	 * @see #setObject(String, Object, Class, int)
 	 */
 	public void setObject(String param, Object value) {
-		setObject(param, value, null, Integer.MAX_VALUE);
+		setObject(param, value, null, Types.OTHER);
 	}
 
 	/**

File: mod/jodd/test/jodd/typeconverter/MutableByteConverterTest.java
Patch:
@@ -9,7 +9,7 @@
 public class MutableByteConverterTest extends TestCase {
 
     public void testConversion() {
-		MutableByteConverter mutableByteConverter = new MutableByteConverter();
+		MutableByteConverter mutableByteConverter = (MutableByteConverter) TypeConverterManager.lookup(MutableByte.class);
 		
         assertNull(mutableByteConverter.convert(null));
 

File: mod/jodd/test/jodd/typeconverter/MutableDoubleConverterTest.java
Patch:
@@ -11,7 +11,7 @@
 public class MutableDoubleConverterTest extends TestCase {
 
     public void testConversion() {
-		MutableDoubleConverter mutableDoubleConverter = new MutableDoubleConverter();
+		MutableDoubleConverter mutableDoubleConverter = (MutableDoubleConverter) TypeConverterManager.lookup(MutableDouble.class);
 		
         assertNull(mutableDoubleConverter.convert(null));
 

File: mod/jodd/test/jodd/typeconverter/MutableFloatConverterTest.java
Patch:
@@ -11,7 +11,7 @@
 public class MutableFloatConverterTest extends TestCase {
 
     public void testConversion() {
-		MutableFloatConverter mutableFloatConverter = new MutableFloatConverter();
+		MutableFloatConverter mutableFloatConverter = (MutableFloatConverter) TypeConverterManager.lookup(MutableFloat.class);
 		
         assertNull(mutableFloatConverter.convert(null));
 

File: mod/jodd/test/jodd/typeconverter/MutableIntegerConverterTest.java
Patch:
@@ -9,7 +9,7 @@
 public class MutableIntegerConverterTest extends TestCase {
 
 	public void testConversion() {
-		MutableIntegerConverter mutableIntegerConverter = new MutableIntegerConverter();
+		MutableIntegerConverter mutableIntegerConverter = (MutableIntegerConverter) TypeConverterManager.lookup(MutableInteger.class);
 		
 		assertNull(mutableIntegerConverter.convert(null));
 		

File: mod/jodd/test/jodd/typeconverter/MutableLongConverterTest.java
Patch:
@@ -9,7 +9,7 @@
 public class MutableLongConverterTest extends TestCase {
 
     public void testConversion() {
-		MutableLongConverter mutableLongConverter = new MutableLongConverter();
+		MutableLongConverter mutableLongConverter = (MutableLongConverter) TypeConverterManager.lookup(MutableLong.class);
 		
         assertNull(mutableLongConverter.convert(null));
 

File: mod/jodd/test/jodd/typeconverter/MutableShortConverterTest.java
Patch:
@@ -9,7 +9,7 @@
 public class MutableShortConverterTest extends TestCase {
 
 	public void testConversion() {
-		MutableShortConverter mutableShortConverter = new MutableShortConverter();
+		MutableShortConverter mutableShortConverter = (MutableShortConverter) TypeConverterManager.lookup(MutableShort.class);
 		
 		assertNull(mutableShortConverter.convert(null));
 

File: mod/jodd-wot/src/jodd/db/oom/mapper/DefaultResultSetMapper.java
Patch:
@@ -256,7 +256,7 @@ protected Object readColumnValue(int colNdx, Class destinationType, Class<? exte
 					cachedColumnValue = sqlType.readValue(rs, colNdx + 1, destinationType, columnDbSqlType);
 				} else {
 					cachedColumnValue = rs.getObject(colNdx + 1);
-					cachedColumnValue = TypeConverterManager.castType(cachedColumnValue, destinationType);
+					cachedColumnValue = TypeConverterManager.convertType(cachedColumnValue, destinationType);
 				}
 			} catch (SQLException sex) {
 				throw new DbOomException("Unable to read value for column #" + (colNdx + 1) + '.', sex);

File: mod/jodd-wot/src/jodd/db/type/SqlType.java
Patch:
@@ -39,7 +39,7 @@ protected SqlType() {
 	 * Stores value in database. Value is casted to sql type.
 	 */
 	public void storeValue(PreparedStatement st, int index, Object value, int dbSqlType) throws SQLException {
-		T t = TypeConverterManager.castType(value, sqlType);
+		T t = TypeConverterManager.convertType(value, sqlType);
 		set(st, index, t, dbSqlType);
 	}
 
@@ -68,7 +68,7 @@ protected <E> E prepareGetValue(T t, Class<E> destinationType) {
 		if (destinationType == null) {
 			return (E) t;
 		}
-		return TypeConverterManager.castType(t, destinationType);
+		return TypeConverterManager.convertType(t, destinationType);
 	}
 
 }
\ No newline at end of file

File: mod/jodd/src/jodd/typeconverter/TypeConverterManager.java
Patch:
@@ -61,8 +61,8 @@ public static TypeConverter lookup(Class type) {
 	 * Casts an object to destination type using {@link TypeConverterManager type conversion}.
 	 * If destination type is one of common types, consider using {@link jodd.typeconverter.Convert} instead.
 	 */
-	public static <T> T castType(Object value, Class<T> destinationType) {
-		return TYPE_CONVERTER_MANAGER_BEAN.castType(value, destinationType);
+	public static <T> T convertType(Object value, Class<T> destinationType) {
+		return TYPE_CONVERTER_MANAGER_BEAN.convertType(value, destinationType);
 	}
 
 }
\ No newline at end of file

File: mod/jodd/src/jodd/typeconverter/TypeConverterManagerBean.java
Patch:
@@ -194,7 +194,7 @@ public TypeConverter lookup(Class type) {
 	 * If destination type is one of common types, consider using {@link jodd.typeconverter.Convert} instead.
 	 */
 	@SuppressWarnings({"unchecked"})
-	public <T> T castType(Object value, Class<T> destinationType) {
+	public <T> T convertType(Object value, Class<T> destinationType) {
 		if (value == null) {
 			return null;
 		}

File: mod/jodd/src/jodd/bean/BeanUtilBean.java
Patch:
@@ -359,7 +359,7 @@ protected void setIndexProperty(BeanProperty bp, Object value, boolean suppressS
 			int index = parseInt(indexString, bp);
 			Class listType = extracticGenericType(bp, 0);
 			if (listType != null) {
-				value = typeConverterManager.castType(value, listType);
+				value = convertType(value, listType);
 			}
 			List list = (List) nextBean;
 			if (bp.forced == true) {
@@ -372,7 +372,7 @@ protected void setIndexProperty(BeanProperty bp, Object value, boolean suppressS
 			Map map = ((Map) nextBean);
 			Class mapType = extracticGenericType(bp, 1);
 			if (mapType != null) {
-				value = typeConverterManager.castType(value, mapType);
+				value = convertType(value, mapType);
 			}
 			map.put(indexString, value);
 			return;

File: mod/jodd-joy/src/jodd/joy/core/DefaultAppCore.java
Patch:
@@ -91,7 +91,6 @@ public void start() {
 		initLogger();							// logger becomes available after this point
 		log.info("app dir: " + AppUtil.getAppDir());
 		log.info("log dir: " + AppUtil.getLogDir());
-		log.info("classpath: " + AppUtil.getClasspathDir());
 		try {
 			initTypes();
 			initProxetta();

File: mod/jodd-wot/src/jodd/db/oom/DbEntityColumnDescriptor.java
Patch:
@@ -80,7 +80,7 @@ public int getDbSqlType() {
 	 * Updates db sql type if not already set.
 	 */
 	public void updateDbSqlType(int dbSqlType) {
-		if (dbSqlType == Integer.MAX_VALUE) {
+		if (this.dbSqlType == Integer.MAX_VALUE) {
 			this.dbSqlType = dbSqlType;
 		}
 	}

File: mod/jodd/src/jodd/bean/BeanUtilUtil.java
Patch:
@@ -2,7 +2,7 @@
 
 package jodd.bean;
 
-import jodd.JoddDefault;
+import jodd.typeconverter.TypeConverterManager;
 import jodd.typeconverter.TypeConverterManagerBean;
 import jodd.util.ReflectUtil;
 
@@ -17,7 +17,7 @@
  */
 public class BeanUtilUtil {
 
-	protected TypeConverterManagerBean typeConverterManager = JoddDefault.typeConverterManager;
+	protected TypeConverterManagerBean typeConverterManager = TypeConverterManager.getDefaultTypeConverterManager();
 
 	/**
 	 * Sets custom {@link TypeConverterManagerBean type converter manager}.

File: mod/jodd-wot/src/jodd/db/oom/mapper/DefaultResultSetMapper.java
Patch:
@@ -10,7 +10,7 @@
 import jodd.db.oom.DbEntityColumnDescriptor;
 import jodd.db.type.SqlTypeManager;
 import jodd.db.type.SqlType;
-import jodd.util.ReflectUtil;
+import jodd.typeconverter.TypeConverterManager;
 
 import java.sql.ResultSet;
 import java.sql.ResultSetMetaData;
@@ -256,7 +256,7 @@ protected Object readColumnValue(int colNdx, Class destinationType, Class<? exte
 					cachedColumnValue = sqlType.readValue(rs, colNdx + 1, destinationType, columnDbSqlType);
 				} else {
 					cachedColumnValue = rs.getObject(colNdx + 1);
-					cachedColumnValue = ReflectUtil.castType(cachedColumnValue, destinationType);
+					cachedColumnValue = TypeConverterManager.castType(cachedColumnValue, destinationType);
 				}
 			} catch (SQLException sex) {
 				throw new DbOomException("Unable to read value for column #" + (colNdx + 1) + '.', sex);

File: mod/jodd-wot/src/jodd/db/type/SqlType.java
Patch:
@@ -2,6 +2,7 @@
 
 package jodd.db.type;
 
+import jodd.typeconverter.TypeConverterManager;
 import jodd.util.ReflectUtil;
 
 import java.sql.PreparedStatement;
@@ -38,7 +39,7 @@ protected SqlType() {
 	 * Stores value in database. Value is casted to sql type.
 	 */
 	public void storeValue(PreparedStatement st, int index, Object value, int dbSqlType) throws SQLException {
-		T t = ReflectUtil.castType(value, sqlType);
+		T t = TypeConverterManager.castType(value, sqlType);
 		set(st, index, t, dbSqlType);
 	}
 
@@ -67,8 +68,7 @@ protected <E> E prepareGetValue(T t, Class<E> destinationType) {
 		if (destinationType == null) {
 			return (E) t;
 		}
-		return ReflectUtil.castType(t, destinationType);
+		return TypeConverterManager.castType(t, destinationType);
 	}
 
-
 }
\ No newline at end of file

File: mod/jodd-wot/src/jodd/decora/parser/PageRegionExtractor.java
Patch:
@@ -30,7 +30,7 @@ public PageRegionExtractor(DecoraTag[] decoraTags) {
 	public void tag(Tag tag) {
 
 		// detect region end and extract content
-		if (tag.getType() == TagType.CLOSE) {
+		if (tag.getType() == TagType.END) {
 			if (currentRegions > 0) {
 				for (DecoraTag decoraTag : decoraTags) {
 					if (decoraTag.isRegionStarted() && decoraTag.getName().equals(tag.getName())) {
@@ -44,7 +44,7 @@ public void tag(Tag tag) {
 			return;
 		}
 
-		if (tag.getType() == TagType.EMPTY) {
+		if (tag.getType() == TagType.SELF_CLOSING) {
 			return;
 		}
 

File: mod/jodd-wot/src/jodd/lagarto/dom/DOMBuilderTagVisitor.java
Patch:
@@ -69,7 +69,7 @@ public void tag(Tag tag) {
 		Element node;
 
 		switch (tagType) {
-			case OPEN:
+			case START:
 				if (builder.isIgnoreWhitespacesBetweenTags()) {
 					removeLastChildNodeIfEmptyText(parentNode, false);
 				}
@@ -80,7 +80,7 @@ public void tag(Tag tag) {
 				parentNode = node;
 				break;
 
-			case CLOSE:
+			case END:
 				if (builder.isIgnoreWhitespacesBetweenTags()) {
 					removeLastChildNodeIfEmptyText(parentNode, true);
 				}
@@ -107,7 +107,7 @@ public void tag(Tag tag) {
 
 				break;
 
-			case EMPTY:
+			case SELF_CLOSING:
 				if (builder.isIgnoreWhitespacesBetweenTags()) {
 					removeLastChildNodeIfEmptyText(parentNode, false);
 				}

File: mod/jodd-wot/test/jodd/lagarto/LagartoParserTest.java
Patch:
@@ -139,13 +139,13 @@ public void tag(Tag tag) {
 				result.append("tag:").append(tag.getName());
 				result.append(':').append(tag.getDeepLevel());
 				switch (tag.getType()) {
-					case OPEN:
+					case START:
 						result.append('<');
 						break;
-					case CLOSE:
+					case END:
 						result.append('>');
 						break;
-					case EMPTY:
+					case SELF_CLOSING:
 						result.append("<>");
 						break;
 				}

File: mod/jodd-wot/test/jodd/lagarto/TagAdapterTest.java
Patch:
@@ -50,7 +50,7 @@ public void testTwoAdapters() throws IOException {
 		TagAdapter tagAdapter1 = new TagAdapter(tagWriter) {
 			@Override
 			public void tag(Tag tag) {
-				if (tag.getType().isOpeningTag()) {
+				if (tag.getType().isStartingTag()) {
 					String tagname = tag.getName();
 					if (tagname.equals("title")) {
 						String id = tag.getAttributeValue("id", false);
@@ -65,7 +65,7 @@ public void tag(Tag tag) {
 		TagAdapter tagAdapter2 = new TagAdapter(tagAdapter1) {
 			@Override
 			public void tag(Tag tag) {
-				if (tag.getType().isOpeningTag()) {
+				if (tag.getType().isStartingTag()) {
 					String tagname = tag.getName();
 					if (tagname.equals("title")) {
 						tag.addAttribute("id", "172");

File: mod/jodd-wot/test/jodd/lagarto/dom/DomXmlTest.java
Patch:
@@ -63,7 +63,7 @@ public void testUpheaWebXml() throws IOException {
 	}
 	
 	public void testWhitespaces() throws IOException {
-		String xmlContent = "<foo>   <!--c-->  <bar>   </bar>   </foo>";
+		String xmlContent = "<foo>   <!--c-->  <bar>   </bar> <x/> </foo>";
 
 		LagartoDOMBuilder lagartoDOMBuilder = new LagartoDOMBuilder();
 		lagartoDOMBuilder.enableXmlMode();
@@ -75,12 +75,12 @@ public void testWhitespaces() throws IOException {
 		Element foo = (Element) doc.getChild(0);
 		assertEquals("foo", foo.getNodeName());
 
-		assertEquals(2, foo.getChildNodesCount());
+		assertEquals(3, foo.getChildNodesCount());
 		Element bar = (Element) foo.getChild(1);
 		assertEquals("bar", bar.getNodeName());
 
 		assertEquals(1, bar.getChildNodesCount());	// must be 1 as whitespaces are between open/closed tag
 
-		assertEquals("<foo><!--c--><bar>   </bar></foo>", doc.getHtml());
+		assertEquals("<foo><!--c--><bar>   </bar><x/></foo>", doc.getHtml());
 	}
 }
\ No newline at end of file

File: mod/jodd/test/jodd/util/ClassLoaderUtilTest.java
Patch:
@@ -21,7 +21,7 @@ public void testStream() throws IOException {
 		is.close();
 
 		URL url;
-		final String resourceName = "jodd/swing/spy/icons/button.png";
+		final String resourceName = "jodd/util/Bits.class";
 
 		url = ClassLoaderUtil.getResourceUrl(resourceName, ClassLoaderUtilTest.class);
 		assertNotNull(url);

File: mod/jodd-wot/src/jodd/lagarto/dom/jerry/Jerry.java
Patch:
@@ -565,6 +565,7 @@ public Jerry toggleClass(String... classNames) {
 	/**
 	 * Gets the combined text contents of each element in the set of
 	 * matched elements, including their descendants.
+	 * Text is HTML decoded for text nodes.
 	 */
 	public String text() {
 		StringBuilder sb = new StringBuilder();
@@ -581,14 +582,15 @@ public Jerry text(String text) {
 		for (Node node : nodes) {
 			node.removeAllChilds();
 			Text textNode = new Text();
-			textNode.setText(text);
+			textNode.setTextContent(text);
 			node.appendChild(textNode);
 		}
 		return this;
 	}
 
 	/**
 	 * Gets the HTML contents of the first element in the set of matched elements.
+	 * Content is raw, not HTML decoded.
 	 */
 	public String html() {
 		return nodes[0].getInnerHtml();

File: mod/jodd-wot/test/jodd/lagarto/dom/DomBuilderTest.java
Patch:
@@ -190,7 +190,7 @@ public void testEncode() {
 		Text text = (Text) document.getFirstChild().getFirstChild();
 
 		assertEquals("a&lt;b", text.getNodeValue());
-		assertEquals("a<b", text.getText());
+		assertEquals("a<b", text.getTextContent());
 	}
 
 	public void testXmlDec() {

File: mod/jodd-wot/src/jodd/package-info.java
Patch:
@@ -1,6 +1,6 @@
 // Copyright (c) 2003-2012, Jodd Team (jodd.org). All Rights Reserved.
 
 /**
- * Jodd = tools + ioc + mvc + db + aop + tx < 800KB
+ * Jodd = tools + ioc + mvc + db + aop + tx + html < 1.1M
  */
 package jodd;
\ No newline at end of file

File: mod/jodd/src/jodd/package-info.java
Patch:
@@ -1,6 +1,6 @@
 // Copyright (c) 2003-2012, Jodd Team (jodd.org). All Rights Reserved.
 
 /**
- * Jodd = tools + ioc + mvc + db + aop + tx < 800KB
+ * Jodd = tools + ioc + mvc + db + aop + tx + html < 1.1M
  */
 package jodd;
\ No newline at end of file

File: mod/jodd-wot/src/jodd/lagarto/Token.java
Patch:
@@ -12,9 +12,10 @@ public enum Token {
 	WORD,
 	TEXT,
 	COMMENT,
-	DIRECTIVE,
+	DOCTYPE,
 	CDATA,
-	XML_DECLARATION,
+	XML_LT,
+	XML_GT,
 	LT,
 	GT,
 	CONDITIONAL_COMMENT_START,

File: mod/jodd-wot/src/jodd/lagarto/EmptyTagVisitor.java
Patch:
@@ -37,7 +37,7 @@ public void cdata(CharSequence cdata) {
 	public void xml(Tag tag) {
 	}
 
-	public void directive(CharSequence directive) {
+	public void doctype(String name, String publicId, String baseUri) {
 	}
 
 	public void condComment(CharSequence conditionalComment, boolean isStartingTag, boolean isDownlevelHidden) {

File: mod/jodd-wot/src/jodd/lagarto/TagAdapter.java
Patch:
@@ -61,8 +61,8 @@ public void xml(Tag tag) {
 		target.xml(tag);
 	}
 
-	public void directive(CharSequence directive) {
-		target.directive(directive);
+	public void doctype(String name, String publicId, String baseUri) {
+		target.doctype(name, publicId, baseUri);
 	}
 
 	public void condComment(CharSequence conditionalComment, boolean isStartingTag, boolean isDownlevelHidden) {

File: mod/jodd-wot/src/jodd/lagarto/TagAdapterWrapper.java
Patch:
@@ -65,9 +65,9 @@ public void xml(Tag tag) {
 		target.xml(tag);
 	}
 
-	public void directive(CharSequence directive) {
-		visitor.directive(directive);
-		target.directive(directive);
+	public void doctype(String name, String publicId, String baseUri) {
+		visitor.doctype(name, publicId, baseUri);
+		target.doctype(name, publicId, baseUri);
 	}
 
 	public void condComment(CharSequence conditionalComment, boolean isStartingTag, boolean isDownlevelHidden) {

File: mod/jodd-wot/src/jodd/lagarto/TagWriter.java
Patch:
@@ -116,9 +116,9 @@ public void xml(Tag tag) {
 		}
 	}
 
-	public void directive(CharSequence directive) {
+	public void doctype(String name, String publicId, String baseUri) {
 		try {
-			TagWriterUtil.writeDirective(appendable, directive);
+			TagWriterUtil.writeDoctype(appendable, name, publicId, baseUri);
 		} catch (IOException ioex) {
 			throw new LagartoException(ioex);
 		}

File: mod/jodd-wot/src/jodd/lagarto/adapter/htmlstapler/HtmlStaplerTagAdapter.java
Patch:
@@ -58,7 +58,7 @@ public void tag(Tag tag) {
 			if (tag.getName().equalsIgnoreCase("link")) {
 				String type = tag.getAttributeValue("type", false);
 
-				if (type == null || type.equalsIgnoreCase("text/css") == true) {
+				if (type != null && type.equalsIgnoreCase("text/css") == true) {
 					String media = tag.getAttributeValue("media", false);
 
 					if (media == null || media.contains("screen")) {

File: mod/jodd-wot/src/jodd/lagarto/adapter/htmlstapler/HtmlStaplerTagAdapter.java
Patch:
@@ -58,7 +58,7 @@ public void tag(Tag tag) {
 			if (tag.getName().equalsIgnoreCase("link")) {
 				String type = tag.getAttributeValue("type", false);
 
-				if (type.equalsIgnoreCase("text/css") == true) {
+				if (type == null || type.equalsIgnoreCase("text/css") == true) {
 					String media = tag.getAttributeValue("media", false);
 
 					if (media == null || media.contains("screen")) {

File: mod/jodd-joy/src/jodd/joy/AppUtil.java
Patch:
@@ -10,7 +10,7 @@
 import java.net.URL;
 
 /**
- * Commong application configuration utilities.
+ * Common application configuration utilities.
  */
 public class AppUtil {
 

File: mod/jodd-wot/src/jodd/asm/EmptyClassVisitor.java
Patch:
@@ -36,7 +36,7 @@ public void visit(int version, int access, String name, String signature, String
      * 
      * @param source the name of the source file from which the class was
      *        compiled. May be <code>null</code>.
-     * @param debug additional debug information to compute the correspondance
+     * @param debug additional debug information to compute the correspondence
      *        between source and compiled elements of the class. May be
      *        <code>null</code>.
      */

File: mod/jodd-wot/src/jodd/asm/EmptyMethodVisitor.java
Patch:
@@ -23,7 +23,7 @@ public class EmptyMethodVisitor implements MethodVisitor {
 	 *         annotation interface method, or <code>null</code> if this visitor
 	 *         is not interested in visiting this default value. The 'name'
 	 *         parameters passed to the methods of this annotation visitor are
-	 *         ignored. Moreover, exacly one visit method must be called on this
+	 *         ignored. Moreover, exactly one visit method must be called on this
 	 *         annotation visitor, followed by visitEnd.
 	 */
 	public AnnotationVisitor visitAnnotationDefault() {return null;}
@@ -64,7 +64,7 @@ public void visitCode() {}
 	/**
 	 * Visits the current state of the local variables and operand stack
 	 * elements. This method must(*) be called <i>just before</i> any
-	 * instruction <b>i</b> that follows an unconditionnal branch instruction
+	 * instruction <b>i</b> that follows an unconditional branch instruction
 	 * such as GOTO or THROW, that is the target of a jump instruction, or that
 	 * starts an exception handler block. The visited types must describe the
 	 * values of the local variables and of the operand stack elements <i>just

File: mod/jodd-wot/src/jodd/db/DbQueryBase.java
Patch:
@@ -668,7 +668,7 @@ public ResultSet getGeneratedColumns() {
 	}
 
 	/**
-	 * Returns generated key i.e. first genereted column as <code>long</code>.
+	 * Returns generated key i.e. first generated column as <code>long</code>.
 	 */
 	public long getGeneratedKey() {
 		checkInitialized();

File: mod/jodd-wot/src/jodd/db/DbSession.java
Patch:
@@ -47,7 +47,7 @@ public DbSession(ConnectionProvider connectionProvider) {
 			log.debug("Creating new db session");
 		}
 		if (connectionProvider == null) {
-			throw new DbSqlException("Connection provider is not availiable.");
+			throw new DbSqlException("Connection provider is not available.");
 		}
 		this.connectionProvider = connectionProvider;
 		txActive = false;

File: mod/jodd-wot/src/jodd/db/type/SqlTypeManager.java
Patch:
@@ -138,7 +138,7 @@ public static SqlType lookup(Class clazz) {
 	}
 
 	/**
-	 * Returns sql type instance. Instances are stored for better perfromances.
+	 * Returns sql type instance. Instances are stored for better performances.
 	 */
 	public static SqlType lookupSqlType(Class<? extends SqlType> sqlTypeClass) {
 		SqlType sqlType = sqlTypes.get(sqlTypeClass);

File: mod/jodd-wot/src/jodd/decora/DecoraRequestWrapper.java
Patch:
@@ -39,7 +39,7 @@ public long getDateHeader(String header) {
 	}
 
 	/**
-	 * Checks if header name is exclused.
+	 * Checks if header name is excluded.
 	 */
 	protected boolean isExcluded(String header) {
 		return "If-Modified-Since".equalsIgnoreCase(header);

File: mod/jodd-wot/src/jodd/jtx/JtxTransactionMode.java
Patch:
@@ -127,7 +127,7 @@ public JtxTransactionMode isolationReadUncommitted() {
 		this.isolationLevel = ISOLATION_READ_UNCOMMITTED;
 		return this;
 	}
-	public JtxTransactionMode isolationReadCommited() {
+	public JtxTransactionMode isolationReadCommitted() {
 		this.isolationLevel = ISOLATION_READ_COMMITTED;
 		return this;
 	}

File: mod/jodd-wot/src/jodd/lagarto/LagartoParser.java
Patch:
@@ -151,7 +151,7 @@ protected void parseText(int start, int end) {
 	}
 
 	/**
-	 * Parses HTML coments.
+	 * Parses HTML comments.
 	 */
 	protected void parseComment() throws IOException {
 		flushText();

File: mod/jodd-wot/src/jodd/lagarto/TagVisitor.java
Patch:
@@ -23,7 +23,7 @@ public interface TagVisitor {
 	/**
 	 * Invoked on {@link Tag tag} (open, close or empty).
 	 * <p>
-	 * Warnning: the passed tag instance <b>should not</b> be kept beyond
+	 * Warning: the passed tag instance <b>should not</b> be kept beyond
 	 * this method as the parser reuse it!</p>
 	 */
 	void tag(Tag tag);

File: mod/jodd-wot/src/jodd/madvoc/ActionConfigSet.java
Patch:
@@ -141,7 +141,7 @@ public static class PathMacro {
 		// left prefix to the macro
 		public String left;
 
-		// right sufix to the end or #method
+		// right suffix to the end or #method
 		public String right;
 
 		// regex pattern

File: mod/jodd-wot/src/jodd/madvoc/component/MadvocController.java
Patch:
@@ -205,7 +205,7 @@ protected void initializeActionConfig(ActionConfig cfg) {
 	// ---------------------------------------------------------------- create
 
 	/**
-	 * Creates new action object from {@link ActionConfig} using default contructor.
+	 * Creates new action object from {@link ActionConfig} using default constructor.
 	 */
 	protected Object createAction(Class actionClass) {
 		try {

File: mod/jodd-wot/src/jodd/madvoc/injector/ScopeDataResolver.java
Patch:
@@ -86,7 +86,7 @@ public ScopeData.Out[] lookupOutData(Class actionClass, ScopeType scopeType) {
 	}
 
 	/**
-	 * Inspects and returns scope data for all availiable scopes.
+	 * Inspects and returns scope data for all available scopes.
 	 */
 	protected ScopeData[] inspectAllScopeData(Object key) {
 		ScopeData[] scopeData;

File: mod/jodd-wot/src/jodd/petite/scope/SessionScope.java
Patch:
@@ -29,7 +29,7 @@ public class SessionScope implements Scope {
 	public SessionScope() {
 		sessionListeners = HttpSessionListenerBroadcaster.getInstance();
 		if (sessionListeners == null) {
-			throw new PetiteException(HttpSessionListenerBroadcaster.class.getSimpleName() + " not availiable.");
+			throw new PetiteException(HttpSessionListenerBroadcaster.class.getSimpleName() + " not available.");
 		}
 		sessionListeners.registerListener(new HttpSessionListener() {
 			public void sessionCreated(HttpSessionEvent httpSessionEvent) {
@@ -74,7 +74,7 @@ public void remove(String name) {
 	protected String getHttpSessionId() {
 		HttpServletRequest request = RequestContextListener.getRequest();
 		if (request == null) {
-			throw new PetiteException("No HTTP request binded to the current thread. Maybe RequestContextListener is not available?");
+			throw new PetiteException("No HTTP request bound to the current thread. Maybe RequestContextListener is not available?");
 		}
 		return request.getSession().getId();
 	}

File: mod/jodd-wot/src/jodd/proxetta/asm/ProxettaClassBuilder.java
Patch:
@@ -159,7 +159,7 @@ public void visitEnd() {
 		mv.visitMaxs(0, 0);
 		mv.visitEnd();
 
-		// check all public super methods that are not overriden
+		// check all public super methods that are not overridden
 		for (ClassReader cr : targetClassInfo.superClassReaders) {
 			cr.accept(new EmptyClassVisitor() {
 

File: mod/jodd-wot/src/jodd/proxetta/asm/ProxyAspectData.java
Patch:
@@ -271,7 +271,7 @@ public void visitFieldInsn(int opcode, String owner, String name, String desc) {
 				}
 
 				// Parse EXECUTE method, just to gather some info, real parsing will come later
-				//return new MethodAdapter(new EmptyMethodVisitor()) {		// moze li se zameniti ovim dole?
+				//return new MethodAdapter(new EmptyMethodVisitor()) {		// toask may we replace this with the following code?
 				return new EmptyMethodVisitor() {
 					@Override
 					public void visitVarInsn(int opcode, int var) {

File: mod/jodd-wot/src/jodd/proxetta/asm/TargetClassInfoReader.java
Patch:
@@ -142,7 +142,7 @@ public MethodVisitor visitMethod(int access, String name, String desc, String si
 	}
 
 	/**
-	 * Stores signatures for all super public methods not already overriden by target class.
+	 * Stores signatures for all super public methods not already overridden by target class.
 	 * All this methods will be accepted for proxyfication.
 	 */
 	@Override
@@ -156,7 +156,7 @@ public void visitEnd() {
 
 
 		List<String> superList = new ArrayList<String>();
-		// check all public super methods that are not overriden in superclass
+		// check all public super methods that are not overridden in superclass
 		while (nextSupername != null) {
 			InputStream inputStream = null;
 			ClassReader cr = null;

File: mod/jodd-wot/src/jodd/vtor/Vtor.java
Patch:
@@ -66,7 +66,7 @@ public void validate(ValidationContext ctx, Object target, String targetName) {
 		for (Map.Entry<String, List<Check>> entry : ctx.map.entrySet()) {
 			String name = entry.getKey();
 			Object value = BeanUtil.getDeclaredPropertySilently(target, name);
-			String valueName = targetName != null ? (targetName + '.' + name) : name;		// pomeri gore
+			String valueName = targetName != null ? (targetName + '.' + name) : name;		// move up
 			ValidationConstraintContext vcc = new ValidationConstraintContext(this, target, valueName);
 			
 			for (Check check : entry.getValue()) {

File: mod/jodd-wot/test/jodd/petite/ScopeTest.java
Patch:
@@ -6,7 +6,7 @@
 import jodd.petite.test.Boo;
 import jodd.petite.test.Foo;
 import jodd.petite.test.Zoo;
-import jodd.util.ConcurentUtil;
+import jodd.util.ConcurrentUtil;
 import junit.framework.TestCase;
 
 import java.util.concurrent.Semaphore;
@@ -29,7 +29,7 @@ public void testThreadLocalScope() {
 
 
 		final Semaphore sem = new Semaphore(1);
-		ConcurentUtil.acquire(sem);
+		ConcurrentUtil.acquire(sem);
 
 		Thread thread = new Thread() {
 			@Override
@@ -43,7 +43,7 @@ public void run() {
 			}
 		};
 		thread.start();
-		ConcurentUtil.waitForRelease(sem);
+		ConcurrentUtil.waitForRelease(sem);
 	}
 
 }

File: mod/jodd/src/jodd/bean/BeanLoaderManager.java
Patch:
@@ -93,7 +93,7 @@ public static BeanLoader lookup(Class type) {
 	}
 
 	/**
-	 * Performs more throughly search for bean loader. It examines all available
+	 * Performs more thoroughly search for bean loader. It examines all available
 	 * loaders and returns the first that matches the object type.
 	 */
 	public static BeanLoader lookup(Object source) {

File: mod/jodd/src/jodd/bean/BeanProperty.java
Patch:
@@ -9,7 +9,7 @@
 import java.lang.reflect.Field;
 
 /**
- * Represents a bean named property. Contains two informations:
+ * Represents a bean named property. Contains two information:
  * <ol>
  * <li>Bean instance (and cached class descriptor)</li>
  * <li>Property name</li>

File: mod/jodd/src/jodd/datetime/JStopWatch.java
Patch:
@@ -195,7 +195,7 @@ public long[] getLapTimes(int index) {
 	// ---------------------------------------------------------------- output
 
 	/**
-	 * Returns total elapsed time as formated string from the last start.
+	 * Returns total elapsed time as formatted string from the last start.
 	 */
 	@Override
 	public String toString() {

File: mod/jodd/src/jodd/datetime/JdtConverterManager.java
Patch:
@@ -79,7 +79,7 @@ public static <T> JdtConverter<T> lookup(Class<T> type) {
 	}
 
 	/**
-	 * Performs more throughly search for converter loader. It examines all available
+	 * Performs more thoroughly search for converter loader. It examines all available
 	 * converters and returns the first that matches the object type.
 	 */
 	public static JdtConverter lookup(Object source) {

File: mod/jodd/src/jodd/datetime/JulianDateStamp.java
Patch:
@@ -219,7 +219,7 @@ public int daysBetween(JulianDateStamp otherDate) {
 
 	/**
 	 * Returns span between two days. Returned value may be positive (when this date
-	 * is after the provided one) or negative (wehn comapring to future date).
+	 * is after the provided one) or negative (when comparing to future date).
 	 */
 	public int daysSpan(JulianDateStamp otherDate) {
 		int now = getJulianDayNumber();

File: mod/jodd/src/jodd/exception/ExceptionUtil.java
Patch:
@@ -208,9 +208,9 @@ public static SQLException rollupSqlExceptions(List<SQLException> exceptions) {
 	 * Throws target of <code>InvocationTargetException</code> if it is exception.
 	 */
 	public static void throwTargetException(InvocationTargetException itex) throws Exception {
-		throw exctractTargetException(itex);
+		throw extractTargetException(itex);
 	}
-	public static Exception exctractTargetException(InvocationTargetException itex) {
+	public static Exception extractTargetException(InvocationTargetException itex) {
 		Throwable target = itex.getTargetException();
 		return target instanceof Exception ? (Exception) target : itex;
 	}

File: mod/jodd/src/jodd/introspector/Introspector.java
Patch:
@@ -18,7 +18,7 @@ public interface Introspector {
 
 	/**
 	 * Registers new class type. If type already registered, it will be
-	 * reseted and registered again with new class descriptor.
+	 * reset and registered again with new class descriptor.
 	 */
 	ClassDescriptor register(Class type);
 

File: mod/jodd/src/jodd/introspector/Methods.java
Patch:
@@ -72,7 +72,7 @@ Method getMethod(String name, Class[] paramTypes) {
 			return null;
 		}
 		for (int i = 0; i < entry.size; i++) {
-			if (ReflectUtil.compareParameteres(entry.paramterTypes[i], paramTypes) == true) {
+			if (ReflectUtil.compareParameters(entry.paramterTypes[i], paramTypes) == true) {
 				return entry.methodsList[i];
 			}
 		}
@@ -111,7 +111,7 @@ Method lookupMethod(String name, Class[] paramTypes) {
 			return null;
 		}
 		for (MethodDescriptor md : list) {
-			if (ReflectUtil.compareParameteres(md.parameterTypes, paramTypes) == true) {
+			if (ReflectUtil.compareParameters(md.parameterTypes, paramTypes) == true) {
 				return md.method;
 			}
 		}

File: mod/jodd/src/jodd/io/NetUtil.java
Patch:
@@ -148,7 +148,7 @@ public static String downloadString(String url) throws IOException {
 	}
 
 	/**
-	 * Downoads resource to a file, potentially very efficiently.
+	 * Downloads resource to a file, potentially very efficiently.
 	 */
 	public static void downloadFile(String url, File file) throws IOException {
 		InputStream inputStream = new URL(url).openStream();

File: mod/jodd/src/jodd/mail/EmailAddress.java
Patch:
@@ -105,7 +105,7 @@ public class EmailAddress {
 	private static final boolean ALLOW_DOMAIN_LITERALS = true;
 
 	/**
-	 * This contstant states that quoted identifiers are allowed
+	 * This constant states that quoted identifiers are allowed
 	 * (using quotes and angle brackets around the raw address) are allowed, e.g.:
 	 * <p>
 	 * <p><tt>"John Smith" &lt;john.smith@somewhere.com&gt;</tt>

File: mod/jodd/src/jodd/servlet/HtmlEncoder.java
Patch:
@@ -72,7 +72,7 @@ public static String text(String text) {
 		return buffer.toString();
 	}
 
-	// ---------------------------------------------------------------- enocode text
+	// ---------------------------------------------------------------- encode text
 
 	public static String block(Object object) {
 		if (object == null) {

File: mod/jodd/src/jodd/servlet/HttpSessionListenerBroadcaster.java
Patch:
@@ -30,7 +30,7 @@ public void sessionCreated(HttpSessionEvent event) {
 	}
 
 	public void sessionDestroyed(HttpSessionEvent event) {
-		broadcastSessionDestoryed(event);
+		broadcastSessionDestroyed(event);
 	}
 
 
@@ -70,7 +70,7 @@ public void broadcastSessionCreated(HttpSessionEvent event) {
 	 * Broadcast all {@link #sessionDestroyed(javax.servlet.http.HttpSessionEvent)} messages to all
 	 * registered session listeners.
 	 */
-	public void broadcastSessionDestoryed(HttpSessionEvent event) {
+	public void broadcastSessionDestroyed(HttpSessionEvent event) {
 		for (HttpSessionListener listener : listeners) {
 			listener.sessionDestroyed(event);
 		}

File: mod/jodd/src/jodd/servlet/tag/LoopingTagSupport.java
Patch:
@@ -75,7 +75,7 @@ protected void prepareStepDirection() {
 	 * If autoDirection flag is <code>true</code> then it is assumed that step is positive,
 	 * and that direction (step sign) should be detected from start and end value.
 	 * <p>
-	 * If checkDirection flas is <code>true</code> than it checks loop direction (step sign) based on
+	 * If checkDirection flag is <code>true</code> than it checks loop direction (step sign) based on
 	 * start and end value. Throws an exception if direction is invalid.
 	 * If autoDirection is set, direction checking is skipped.
 	 */

File: mod/jodd/src/jodd/servlet/upload/FileUploadHeader.java
Patch:
@@ -74,7 +74,7 @@ private String getDataFieldValue(String dataHeader, String fieldName) {
 	}
 
 	/**
-	 * Strips content type information from request's data header.
+	 * Strips content type information from requests data header.
 	 * @param dataHeader data header string
 	 * @return content type or an empty string if no content type defined
 	 */

File: mod/jodd/src/jodd/swing/DelayedInvoker.java
Patch:
@@ -30,7 +30,7 @@ public DelayedInvoker(int delay, ActionListener anActionListener) {
 	}
 
 	/**
-	 * Creates invoker that will fire event to provided listerner after default delay.
+	 * Creates invoker that will fire event to provided listener after default delay.
 	 */
 	public DelayedInvoker(ActionListener actionListener) {
 		this(DEFAULT_DELAY, actionListener);

File: mod/jodd/src/jodd/swing/SwingUtil.java
Patch:
@@ -91,7 +91,7 @@ public static void center(JDialog dialog) {
 	}
 
 	/**
-	 * Enforeces JEditorPane font.
+	 * Enforces JEditorPane font.
 	 * Once the content type of a JEditorPane is set to text/html the font on the Pane starts to be managed by Swing.
 	 * This method forces using provided font.
 	 */

File: mod/jodd/src/jodd/typeconverter/impl/StringConverter.java
Patch:
@@ -40,11 +40,11 @@ public static String valueOf(Object value) {
 		if (value instanceof Clob) {
 			Clob clob = (Clob) value;
 			try {
-				long lenght = clob.length();
-				if (lenght > Integer.MAX_VALUE) {
+				long length = clob.length();
+				if (length > Integer.MAX_VALUE) {
 					throw new TypeConversionException("Clob is too big.");
 				}
-				return clob.getSubString(1, (int) lenght);
+				return clob.getSubString(1, (int) length);
 			} catch (SQLException sex) {
 				throw new TypeConversionException(value, sex);
 			}

File: mod/jodd/src/jodd/util/ConcurrentUtil.java
Patch:
@@ -5,9 +5,9 @@
 import java.util.concurrent.Semaphore;
 
 /**
- * Misc concurent utilities.
+ * Misc concurrent utilities.
  */
-public class ConcurentUtil {
+public class ConcurrentUtil {
 
 	public static void acquire(Semaphore semaphore) {
 		try {
@@ -16,6 +16,7 @@ public static void acquire(Semaphore semaphore) {
 			// ignore
 		}
 	}
+
 	public static void acquire(Semaphore semaphore, int permits) {
 		try {
 			semaphore.acquire(permits);

File: mod/jodd/src/jodd/util/collection/BooleanArrayList.java
Patch:
@@ -203,7 +203,7 @@ public boolean contains(boolean data) {
 
 
 	/**
-	 * Searches for the first occurence of the given argument.
+	 * Searches for the first occurrence of the given argument.
 	 */
 	public int indexOf(boolean data) {
 		for (int i = 0; i < size; i++) {

File: mod/jodd/src/jodd/util/collection/ByteArrayList.java
Patch:
@@ -203,7 +203,7 @@ public boolean contains(byte data) {
 
 
 	/**
-	 * Searches for the first occurence of the given argument.
+	 * Searches for the first occurrence of the given argument.
 	 */
 	public int indexOf(byte data) {
 		for (int i = 0; i < size; i++) {

File: mod/jodd/src/jodd/util/collection/CharArrayList.java
Patch:
@@ -203,7 +203,7 @@ public boolean contains(char data) {
 
 
 	/**
-	 * Searches for the first occurence of the given argument.
+	 * Searches for the first occurrence of the given argument.
 	 */
 	public int indexOf(char data) {
 		for (int i = 0; i < size; i++) {

File: mod/jodd/src/jodd/util/collection/DoubleArrayList.java
Patch:
@@ -203,7 +203,7 @@ public boolean contains(double data, double delta) {
 
 
 	/**
-	 * Searches for the first occurence of the given argument.
+	 * Searches for the first occurrence of the given argument.
 	 */
 	public int indexOf(double data, double delta) {
 		for (int i = 0; i < size; i++) {

File: mod/jodd/src/jodd/util/collection/FloatArrayList.java
Patch:
@@ -203,7 +203,7 @@ public boolean contains(float data, float delta) {
 
 
 	/**
-	 * Searches for the first occurence of the given argument.
+	 * Searches for the first occurrence of the given argument.
 	 */
 	public int indexOf(float data, float delta) {
 		for (int i = 0; i < size; i++) {

File: mod/jodd/src/jodd/util/collection/IntArrayList.java
Patch:
@@ -203,7 +203,7 @@ public boolean contains(int data) {
 
 
 	/**
-	 * Searches for the first occurence of the given argument.
+	 * Searches for the first occurrence of the given argument.
 	 */
 	public int indexOf(int data) {
 		for (int i = 0; i < size; i++) {

File: mod/jodd/src/jodd/util/collection/LongArrayList.java
Patch:
@@ -203,7 +203,7 @@ public boolean contains(long data) {
 
 
 	/**
-	 * Searches for the first occurence of the given argument.
+	 * Searches for the first occurrence of the given argument.
 	 */
 	public int indexOf(long data) {
 		for (int i = 0; i < size; i++) {

File: mod/jodd/src/jodd/util/idgen/Uuid24Generator.java
Patch:
@@ -33,12 +33,12 @@ public String generate() {
 		id1 += (id2 & 0xFFFF0000L) >> 16;
 		id3 += (id2 & 0x0000FFFFL) << 32;
 
-		return unisgnedValueOf(id1) + unisgnedValueOf(id3);
+		return unsignedValueOf(id1) + unsignedValueOf(id3);
 	}
 
 	private static final char[] CHARS64 = Base64.getBase64Chars();
 	
-	private static String unisgnedValueOf(long l) {
+	private static String unsignedValueOf(long l) {
 		char[] buf = new char[64];
 		int charNdx = 64;
 		int radix = 1 << 6;

File: mod/jodd/src/jodd/util/idgen/Uuid32Generator.java
Patch:
@@ -8,7 +8,7 @@
 import java.security.SecureRandom;
 
 /**
- * UUID generator of 32 bytes long values. It is builded from:
+ * UUID generator of 32 bytes long values. It is build from:
  * <ol>
  * <li> (0-7) IPAddress as HEX - 8 bytes
  * <li> (8-19) CurrentTimeMillis() as HEX - Display all 12 bytes
@@ -59,7 +59,7 @@ public String generate() {
 		} catch (UnknownHostException uhex) {
 			throw new RuntimeException("Unknown host.", uhex);
 		} catch (NoSuchAlgorithmException nsaex) {
-			throw new RuntimeException("Algorithm 'SHA1PRNG' is unavailiable.", nsaex);
+			throw new RuntimeException("Algorithm 'SHA1PRNG' is unavailable.", nsaex);
 		}
 		return strRetVal.toString().toUpperCase();
 	}

File: mod/jodd/test/jodd/typeconverter/TypeConverterTests.java
Patch:
@@ -43,6 +43,7 @@ public TypeConverterTests() {
 		addTestSuite(StringArrayConverterTest.class);
 		addTestSuite(URLConverterTest.class);
 		addTestSuite(URIConverterTest.class);
+		addTestSuite(LocaleConverterTest.class);
 	}
 
 	public static Test suite() {

File: mod/jodd/src/jodd/cache/FileLRUCache.java
Patch:
@@ -51,7 +51,7 @@ public long getCacheTimeout() {
 	 * Returns maximum occupied space in bytes.
 	 */
 	public long getMaxOccupiedSpace() {
-		return maxFileSize * cache.getCacheSize();
+		return (long) maxFileSize * cache.getCacheSize();
 	}
 
 	/**

File: mod/jodd/src/jodd/cache/FileLRUCache.java
Patch:
@@ -10,7 +10,7 @@
 
 /**
  * Files LRU cache stores files content in memory to dramatically
- * speed up performances for frequently readed files.
+ * speed up performances for frequently read files.
  */
 public class FileLRUCache {
 
@@ -48,9 +48,9 @@ public long getCacheTimeout() {
 	}
 
 	/**
-	 * Returns maximum occupated space in bytes.
+	 * Returns maximum occupied space in bytes.
 	 */
-	public long getMaxOccupatedSpace() {
+	public long getMaxOccupiedSpace() {
 		return maxFileSize * cache.getCacheSize();
 	}
 

File: mod/jodd-wot/test/jodd/jtx/JtxTests.java
Patch:
@@ -14,6 +14,6 @@ public JtxTests() {
 	}
 
 	public static Test suite() {
-		return new DbTests();
+		return new JtxTests();
 	}
 }
\ No newline at end of file

File: mod/jodd/test/jodd/util/ClassLoaderUtilTest.java
Patch:
@@ -48,7 +48,7 @@ public void testClassLoaderUtil() {
 		try {
 			ClassLoaderUtil.loadClass("not.existing.class");
 		} catch (ClassNotFoundException cnfex) {
-			assertEquals("Class not found: 'not.existing.class'", cnfex.getMessage());
+			assertEquals("Class not found: not.existing.class", cnfex.getMessage());
 		}
 
 		try {

File: mod/jodd-wot/test/jodd/petite/WireTest.java
Patch:
@@ -28,8 +28,8 @@ protected void setUp() throws Exception {
 	public void testContainer() {
 		PetiteContainer pc = new PetiteContainer();
 		AutomagicPetiteConfigurator configurator = new AutomagicPetiteConfigurator();
-		configurator.setIncludedEntries(new String[] {"jodd.petite.*"});
-		configurator.setExcludedEntries(new String[] {"jodd.petite.data.*"});
+		configurator.setIncludedEntries("jodd.petite.*");
+		configurator.setExcludedEntries("jodd.petite.data.*", "jodd.petite.test3.*");
 		configurator.configure(pc);
 
 		assertEquals(1, pc.getTotalBeans());

File: mod/jodd-joy/src/jodd/joy/madvoc/result/VtorJsonResult.java
Patch:
@@ -11,6 +11,7 @@
 import jodd.madvoc.meta.In;
 import jodd.madvoc.result.ActionResult;
 import jodd.util.CharUtil;
+import jodd.util.MimeTypes;
 import jodd.vtor.Violation;
 
 import javax.servlet.http.HttpServletResponse;
@@ -48,6 +49,8 @@ public void render(ActionRequest actionRequest, Object resultObject, String resu
 		char[] chars = result.toCharArray();
 		byte[] data = CharUtil.toByteArray(chars, madvocConfig.getEncoding());
 
+		response.setContentType(MimeTypes.MIME_APPLICATION_JSON);
+
 		OutputStream os = response.getOutputStream();
 		os.write(data);
 		os.flush();

File: mod/jodd-wot/test/jodd/db/oom/DbOomTests.java
Patch:
@@ -14,6 +14,7 @@ public DbOomTests() {
 		addTestSuite(DbOomTest.class);
 		addTestSuite(DbOom2Test.class);
 		addTestSuite(DbSqlTemplateTest.class);
+		addTestSuite(DbSqlTemplateWithPrefixTest.class);
 		addTestSuite(DbSlqBuilderTest.class);
 		addTestSuite(JointHintResolverTest.class);
 		addTestSuite(DbEntitySqlTest.class);

File: mod/jodd/test/jodd/typeconverter/TypeConverterTests.java
Patch:
@@ -18,6 +18,7 @@ public TypeConverterTests() {
 		addTestSuite(CharacterConverterTest.class);
 		addTestSuite(ClassArrayConverterTest.class);
 		addTestSuite(ClassConverterTest.class);
+		addTestSuite(DateConverterTest.class);
 		addTestSuite(DoubleArrayConverterTest.class);
 		addTestSuite(DoubleConverterTest.class);
 		addTestSuite(FloatArrayConverterTest.class);

File: mod/jodd/src/jodd/mail/SendMailSession.java
Patch:
@@ -58,7 +58,7 @@ public void sendMail(Email mail) {
 			throw new MailException("Unable to prepare email message: " + mail, mex);
 		}
 		try {
-			mailTransport.sendMessage(msg, msg.getRecipients(Message.RecipientType.TO));
+			mailTransport.sendMessage(msg, msg.getAllRecipients());
 		} catch (MessagingException mex) {
 			throw new MailException("Unable to send email message: " + mail, mex);
 		}

File: mod/jodd-wot/src/jodd/jtx/JtxStatus.java
Patch:
@@ -39,8 +39,7 @@ public enum JtxStatus {
 	STATUS_UNKNOWN(5),
 
 	/**
-	 * No transaction is currently associated with the target object. The auto-commit mode or the transaction
-	 * has been completed.
+	 * No transaction is currently associated with the target object. Indicates the auto-commit mode.
 	 */
 	STATUS_NO_TRANSACTION(6),
 

File: mod/jodd/test/jodd/props/PropsTest.java
Patch:
@@ -36,7 +36,7 @@ public void testBasic() throws IOException {
 
 
 		Properties prop = p.extractBaseProperties();
-		assertEquals("1937", prop.getProperty("year"));
+		assertEquals("1937{c}", prop.getProperty("year"));
 		assertEquals("49.5", prop.getProperty("doc.weight"));
 		assertEquals("Čađavi Žar utf8", prop.getProperty("comment"));
 	}

File: mod/jodd-joy/src/jodd/joy/auth/AuthInterceptor.java
Patch:
@@ -165,7 +165,7 @@ public Object intercept(ActionRequest actionRequest) throws Exception {
 			if (authorize(actionRequest, null) == false) {
 				// session is not active, chain to login
 				log.debug("authentication required");
-				servletRequest.setAttribute(loginSuccessPath, DispatcherUtil.getActionPath(servletRequest));
+				servletRequest.setAttribute(loginSuccessPath, DispatcherUtil.getUrl(servletRequest));
 				actionRequest.getHttpServletResponse().setStatus(HttpServletResponse.SC_FORBIDDEN);
 				return resultLogin();
 			}

File: mod/jodd/src/jodd/cache/FIFOCache.java
Patch:
@@ -38,7 +38,7 @@ public FIFOCache(int cacheSize, long timeout) {
 	 * Prune expired objects and, if cache is still full, the first one.
 	 */
 	@Override
-	public int prune() {
+	protected int pruneCache() {
         int count = 0;
 		CacheObject<K,V> first = null;
 		Iterator<CacheObject<K,V>> values = cacheMap.values().iterator();

File: mod/jodd/src/jodd/cache/LFUCache.java
Patch:
@@ -37,7 +37,7 @@ public LFUCache(int maxSize, long timeout) {
 	 * Returns the number of removed objects.
 	 */
 	@Override
-	public int prune() {
+	protected int pruneCache() {
         int count = 0;
 		CacheObject<K,V> comin = null;
 		Iterator<CacheObject<K,V>> values = cacheMap.values().iterator();

File: mod/jodd/src/jodd/cache/LRUCache.java
Patch:
@@ -48,7 +48,7 @@ protected boolean removeEldestEntry(Map.Entry eldest) {
 	 * Prune only expired objects, <code>LinkedHashMap</code> will take care of LRU if needed.
 	 */
 	@Override
-	public int prune() {
+	protected int pruneCache() {
 		if (isPruneExpiredActive() == false) {
 			return 0;
 		}

File: mod/jodd/src/jodd/cache/TimedCache.java
Patch:
@@ -26,7 +26,7 @@ public TimedCache(long timeout) {
 	 * Prunes expired elements from the cache. Returns the number of removed objects.
 	 */
 	@Override
-	public int prune() {
+	protected int pruneCache() {
         int count = 0;
 		Iterator<CacheObject<K,V>> values = cacheMap.values().iterator();
 		while (values.hasNext()) {

File: mod/jodd/test/jodd/cache/CacheTests.java
Patch:
@@ -12,6 +12,7 @@ public CacheTests() {
 		addTestSuite(LFUCacheTest.class);
 		addTestSuite(LRUCacheTest.class);
 		addTestSuite(FIFOCacheTest.class);
+		addTestSuite(ConcurrencyTest.class);
 	}
 
 	public static Test suite() {

File: mod/jodd/src/jodd/io/FileUtil.java
Patch:
@@ -1081,7 +1081,7 @@ public static File createTempFile() throws IOException {
 		return createTempFile(true);
 	}
 	public static File createTempFile(boolean create) throws IOException {
-		return createTempFile(JoddDefault.JODD_TMP_FILE_PREFIX, ".tmp", (File) null, create);
+		return createTempFile(JoddDefault.tempFilePrefix, ".tmp", (File) null, create);
 	}
 	public static File createTempFile(String prefix, String suffix) throws IOException {
 		return createTempFile(prefix, suffix, (File) null, true);

File: mod/jodd/src/jodd/io/findfile/ClasspathScanner.java
Patch:
@@ -64,10 +64,10 @@ public void scan(URL... urls) {
 	}
 
 	/**
-	 * Scans full class path.
+	 * Scans default class path.
 	 */
-	public void scanFullClasspath() {
-		scanUrls(ClassLoaderUtil.getFullClassPath(ClasspathScanner.class));
+	public void scanDefaultClasspath() {
+		scan(ClassLoaderUtil.getDefaultClasspath());
 	}
 
 	/**

File: mod/jodd/src/jodd/props/PropsUtil.java
Patch:
@@ -31,7 +31,7 @@ protected void onEntry(EntryData entryData) throws IOException {
 		scanner.includeResources(true).
 				ignoreException(true).
 				include(patterns).
-				scanFullClasspath();
+				scanDefaultClasspath();
 	}
 
 	/**

File: mod/jodd/src/jodd/servlet/upload/impl/AdaptiveFileUpload.java
Patch:
@@ -133,7 +133,7 @@ protected void processStream() throws IOException {
 			}
 		}
 
-		tempFile = FileUtil.createTempFile(JoddDefault.JODD_TMP_FILE_PREFIX, TMP_FILE_SUFFIX, uploadPath);
+		tempFile = FileUtil.createTempFile(JoddDefault.tempFilePrefix, TMP_FILE_SUFFIX, uploadPath);
 		BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(tempFile));
 		if (data != null) {
 			size = data.length;

File: mod/jodd/src/jodd/util/PropertiesUtil.java
Patch:
@@ -218,7 +218,7 @@ protected void onEntry(EntryData entryData) throws IOException {
 		scanner.includeResources(true).
 				ignoreException(true).
 				include(rootTemplate).
-				scanFullClasspath();
+				scanDefaultClasspath();
 		return p;
 	}
 

File: mod/samples/src/examples/petite/PetiteExample.java
Patch:
@@ -122,7 +122,7 @@ protected BeanDefinition registerPetiteBean(String name, Class type, Class<? ext
 		System.out.println("\n\n============ CHANGE FOOIMPL or ZOO and COMPILE IN 10 SEC FROM NOW!\n\n");
 		ThreadUtil.sleep(1000);
 
-		Class a = ClassLoaderUtil.findClass("examples.petite.Zoo", ClassLoaderUtil.getFullClassPath(PetiteExample.class));
+		Class a = ClassLoaderUtil.findClass("examples.petite.Zoo", ClassLoaderUtil.getDefaultClasspath());
 		System.out.println(a);
 		System.out.println(a.getClassLoader());
 

File: mod/jodd/src/jodd/datetime/converter/CalendarConverter.java
Patch:
@@ -9,8 +9,8 @@
 public class CalendarConverter implements JdtConverter<Calendar> {
 
 	public void loadFrom(JDateTime jdt, Calendar source) {
-		jdt.setTimeZone(source.getTimeZone());
 		jdt.setTimeInMillis(source.getTimeInMillis());
+		jdt.setTimeZone(source.getTimeZone());
 	}
 
 	public Calendar convertTo(JDateTime jdt) {

File: mod/jodd/src/jodd/datetime/converter/GregorianCalendarConverter.java
Patch:
@@ -9,8 +9,8 @@
 public class GregorianCalendarConverter implements JdtConverter<GregorianCalendar> {
 
 	public void loadFrom(JDateTime jdt, GregorianCalendar source) {
-		jdt.setTimeZone(source.getTimeZone());
 		jdt.setTimeInMillis(source.getTimeInMillis());
+		jdt.setTimeZone(source.getTimeZone());
 	}
 
 	public GregorianCalendar convertTo(JDateTime jdt) {

File: mod/jodd-joy/src/jodd/joy/core/DefaultAppCore.java
Patch:
@@ -206,7 +206,7 @@ protected void initPetite() {
 		if (isWebApplication == false) {
 			// make session scope to act as singleton scope
 			// if this is not a web application (and http session is not available).
-			petite.getManager().registerScope(SessionScope.class, new SingletonScope());
+			petite.registerScope(SessionScope.class, new SingletonScope());
 		}
 
 		// automagic configuration

File: mod/jodd-joy/src/jodd/joy/petite/ProxettaAwarePetiteContainer.java
Patch:
@@ -5,7 +5,6 @@
 import jodd.petite.PetiteContainer;
 import jodd.petite.BeanDefinition;
 import jodd.petite.WiringMode;
-import jodd.petite.PetiteUtil;
 import jodd.petite.scope.Scope;
 import jodd.proxetta.Proxetta;
 
@@ -30,7 +29,7 @@ public ProxettaAwarePetiteContainer(Proxetta proxetta) {
 	protected BeanDefinition registerPetiteBean(String name, Class type, Class<? extends Scope> scopeType, WiringMode wiringMode) {
 		if (proxetta != null) {
 			if (name == null) {
-				name = PetiteUtil.resolveBeanName(type);
+				name = resolveBeanName(type);
 			}
 			type = proxetta.defineProxy(type);
 		}

File: mod/jodd-wot/src/jodd/madvoc/WebApplication.java
Patch:
@@ -14,7 +14,6 @@
 import jodd.madvoc.component.ContextInjector;
 import jodd.madvoc.config.MadvocConfigurator;
 import jodd.petite.PetiteContainer;
-import jodd.petite.PetiteUtil;
 
 import javax.servlet.ServletContext;
 import java.lang.reflect.Modifier;
@@ -84,7 +83,7 @@ private String resolveBaseComponentName(Class component) {
 				lastComponent = component;
 			}
 		}
-		return PetiteUtil.resolveBeanName(lastComponent);
+		return madpc.resolveBeanName(lastComponent);
 	}
 
 	/**

File: mod/jodd-wot/src/jodd/petite/PropertyInjectionPoint.java
Patch:
@@ -12,10 +12,10 @@ public class PropertyInjectionPoint {
 	public static final PropertyInjectionPoint[] EMPTY = new PropertyInjectionPoint[0]; 
 
 	public final Field field;
-	public final String reference;
+	public final String[] reference;
 	public final boolean hasAnnotation;
 
-	public PropertyInjectionPoint(Field field, String reference, boolean hasAnnotation) {
+	public PropertyInjectionPoint(Field field, String[] reference, boolean hasAnnotation) {
 		this.field = field;
 		this.reference = reference;
 		this.hasAnnotation = hasAnnotation;

File: mod/jodd-wot/src/jodd/petite/WiringMode.java
Patch:
@@ -13,7 +13,7 @@ public enum WiringMode {
 	OPTIONAL(2),	// ignores unsuccessful injections
 	AUTOWIRE(3);	// auto-wire
 
-	private int value;
+	private final int value;
 
 	WiringMode(int value) {
 		this.value = value;

File: mod/jodd-wot/src/jodd/petite/config/AutomagicPetiteConfigurator.java
Patch:
@@ -55,7 +55,7 @@ public void configure(PetiteContainer petiteContainer, URL[] classpath) {
 			throw new PetiteException("Unable to scan classpath.", ex);
 		}
 		elapsed = System.currentTimeMillis() - elapsed;
-		log.info("Petite configured in " + elapsed + " ms. Total beans: " + petiteContainer.getManager().getTotalBeans());
+		log.info("Petite configured in " + elapsed + " ms. Total beans: " + petiteContainer.getTotalBeans());
 	}
 
 	/**

File: mod/jodd-wot/test/jodd/petite/PetiteTests.java
Patch:
@@ -15,6 +15,7 @@ public PetiteTests() {
 		addTestSuite(ManualTest.class);
 		addTestSuite(PropertyTest.class);
 		addTestSuite(ParamTest.class);
+		addTestSuite(FullTypeTest.class);
 	}
 
 	public static Test suite() {

File: mod/jodd/src/jodd/servlet/upload/impl/AdaptiveFileUpload.java
Patch:
@@ -25,8 +25,8 @@
  */
 public class AdaptiveFileUpload extends FileUpload {
 
-	protected static final String TMP_FILE_PREFIX = "upload";
-	protected static final String TMP_FILE_SUFFIX = ".jodd";
+	protected static final String TMP_FILE_PREFIX = "jodd";
+	protected static final String TMP_FILE_SUFFIX = ".upload.tmp";
 
 	protected final int memoryThreshold;
 	protected final File uploadPath;

File: mod/jodd-wot/src/jodd/paramo/Paramo.java
Patch:
@@ -47,11 +47,11 @@ public static String[] resolveParameterNames(AccessibleObject methodOrCtor) {
 		try {
 			stream = ClassLoaderUtil.getClassAsStream(declaringClass);
 		} catch (IOException ioex) {
-			throw new ParamoException("Unable to read class bytes.", ioex);
+			throw new ParamoException("Unable to read bytes of class '" + declaringClass.getName() + "'.", ioex);
 		}
 		try {
 			ClassReader reader = new ClassReader(stream);
-			MethodFinder visitor = new MethodFinder(name, paramTypes);
+			MethodFinder visitor = new MethodFinder(declaringClass, name, paramTypes);
 			reader.accept(visitor, 0);
 			return visitor.getParameterNames();
 		} catch (IOException ioex) {

File: mod/jodd/src/jodd/typeconverter/impl/DoubleArrayConverter.java
Patch:
@@ -21,7 +21,7 @@ public static double[] valueOf(Object value) {
 				return new double[] {((Number) value).doubleValue()};
 			}
 			try {
-				return new double[] {Double.parseDouble(value.toString())};
+				return new double[] {Double.parseDouble(value.toString().trim())};
 			} catch (NumberFormatException nfex) {
 				throw new TypeConversionException(value, nfex);
 			}
@@ -88,7 +88,7 @@ public static double[] valueOf(Object value) {
 					if (values[i] instanceof Number) {
 						results[i] = ((Number) values[i]).doubleValue();
 					} else {
-						results[i] = Double.parseDouble(values[i].toString());
+						results[i] = Double.parseDouble(values[i].toString().trim());
 					}
 				}
 			}

File: mod/jodd/src/jodd/typeconverter/impl/DoubleConverter.java
Patch:
@@ -23,7 +23,7 @@ public static Double valueOf(Object value) {
 		}
 
 		try {
-			return Double.valueOf(value.toString());
+			return Double.valueOf(value.toString().trim());
 		} catch (NumberFormatException nfex) {
 			throw new TypeConversionException(value, nfex);
 		}

File: mod/jodd/src/jodd/typeconverter/impl/FloatArrayConverter.java
Patch:
@@ -21,7 +21,7 @@ public static float[] valueOf(Object value) {
 				return new float[] {((Number) value).floatValue()};
 			}
 			try {
-				return new float[] {Float.parseFloat(value.toString())};
+				return new float[] {Float.parseFloat(value.toString().trim())};
 			} catch (NumberFormatException nfex) {
 				throw new TypeConversionException(value, nfex);
 			}
@@ -88,7 +88,7 @@ public static float[] valueOf(Object value) {
 					if (values[i] instanceof Number) {
 						results[i] = ((Number) values[i]).floatValue();
 					} else {
-						results[i] = Float.parseFloat(values[i].toString());
+						results[i] = Float.parseFloat(values[i].toString().trim());
 					}
 				}
 			}

File: mod/jodd/src/jodd/typeconverter/impl/FloatConverter.java
Patch:
@@ -23,7 +23,7 @@ public static Float valueOf(Object value) {
 		}
 
 		try {
-			return Float.valueOf(value.toString());
+			return Float.valueOf(value.toString().trim());
 		} catch (NumberFormatException nfex) {
 			throw new TypeConversionException(value, nfex);
 		}

File: mod/jodd/test/jodd/typeconverter/DoubleArrayConverterTest.java
Patch:
@@ -18,6 +18,7 @@ public void testConversion() {
 		assertEq(arrd(1.0, 7.0, 3.0), DoubleArrayConverter.valueOf(arrb((byte)1, (byte)7, (byte)3)));
 		assertEq(arrd(1.0, 7.0, 3.0), DoubleArrayConverter.valueOf(arrs((short)1, (short)7, (short)3)));
 		assertEq(arrd(1.73, 10.22), DoubleArrayConverter.valueOf(arrs("1.73", "10.22")));
+		assertEq(arrd(1.73, 10.22), DoubleArrayConverter.valueOf(arrs(" 1.73 ", " 10.22 ")));
 		assertEq(arrd(1.73, 10), DoubleArrayConverter.valueOf(arro("1.73", Integer.valueOf(10))));
 	}
 

File: mod/jodd/test/jodd/typeconverter/DoubleConverterTest.java
Patch:
@@ -14,6 +14,7 @@ public void testConversion() {
 		assertEquals(Double.valueOf(1), DoubleConverter.valueOf(Integer.valueOf(1)));
 		assertEquals(Double.valueOf(1.73), DoubleConverter.valueOf(Double.valueOf(1.73D)));
 		assertEquals(Double.valueOf(1.73), DoubleConverter.valueOf("1.73"));
+		assertEquals(Double.valueOf(1.73), DoubleConverter.valueOf(" 1.73 "));
 		assertEquals(Double.valueOf(1.73), DoubleConverter.valueOf(new BigDecimal("1.73")));
 
 		try {

File: mod/jodd/test/jodd/typeconverter/FloatArrayConverterTest.java
Patch:
@@ -18,6 +18,7 @@ public void testConversion() {
 		assertEq(arrf((float)1.0, (float)7.0, (float)3.0), FloatArrayConverter.valueOf(arrb((byte)1, (byte)7, (byte)3)));
 		assertEq(arrf((float)1.0, (float)7.0, (float)3.0), FloatArrayConverter.valueOf(arrs((short)1, (short)7, (short)3)));
 		assertEq(arrf((float)1.73, (float)10.22), FloatArrayConverter.valueOf(arrs("1.73", "10.22")));
+		assertEq(arrf((float)1.73, (float)10.22), FloatArrayConverter.valueOf(arrs(" 1.73 ", " 10.22 ")));
 		assertEq(arrf((float)1.73, 10), FloatArrayConverter.valueOf(arro("1.73", Integer.valueOf(10))));
 	}
 

File: mod/jodd/test/jodd/typeconverter/FloatConverterTest.java
Patch:
@@ -14,6 +14,7 @@ public void testConversion() {
 		assertEquals(Float.valueOf(1), FloatConverter.valueOf(Integer.valueOf(1)));
 		assertEquals(Float.valueOf((float) 1.73), FloatConverter.valueOf(Double.valueOf(1.73D)));
 		assertEquals(Float.valueOf((float) 1.73), FloatConverter.valueOf("1.73"));
+		assertEquals(Float.valueOf((float) 1.73), FloatConverter.valueOf(" 1.73 "));
 		assertEquals(Float.valueOf((float) 1.73), FloatConverter.valueOf(new BigDecimal("1.73")));
 
 		try {

File: mod/jodd/src/jodd/typeconverter/impl/ByteConverter.java
Patch:
@@ -22,7 +22,7 @@ public static Byte valueOf(Object value) {
 			return Byte.valueOf(((Number)value).byteValue());
 		}
 		try {
-			return Byte.valueOf(value.toString());
+			return Byte.valueOf(value.toString().trim());
 		} catch (NumberFormatException nfex) {
 			throw new TypeConversionException(value, nfex);
 		}

File: mod/jodd/test/jodd/typeconverter/BooleanArrayConverterTest.java
Patch:
@@ -15,6 +15,7 @@ public void testConversion() {
 		assertEq(arrl(true, false, true), BooleanArrayConverter.valueOf(arri(-7, 0, 3)));
 		assertEq(arrl(true, false, true), BooleanArrayConverter.valueOf(arrf(-7.0f, 0.0f, 3.0f)));
 		assertEq(arrl(true, false, true), BooleanArrayConverter.valueOf(arrs("true", "0", "yes")));
+		assertEq(arrl(true, false, true), BooleanArrayConverter.valueOf(arrs(" true ", "0", " yes ")));
 	}
 
 

File: mod/jodd/test/jodd/typeconverter/ByteArrayConverterTest.java
Patch:
@@ -17,6 +17,8 @@ public void testArrayConversion() {
 		assertEq(arrb((byte)1, (byte)7, (byte)3), ByteArrayConverter.valueOf(arrf(1.99f, 7.99f, 3.22f)));
 		assertEq(arrb((byte)1, (byte)7, (byte)3), ByteArrayConverter.valueOf(arrd(1.99, 7.99, 3.22)));
 		assertEq(arrb((byte)1, (byte)7, (byte)3), ByteArrayConverter.valueOf(arrs("1", "7", "3")));
+		assertEq(arrb((byte)1, (byte)7, (byte)3), ByteArrayConverter.valueOf(arrs(" 1 ", " 7 ", " 3 ")));
+		assertEq(arrb((byte)1, (byte)7, (byte)3), ByteArrayConverter.valueOf(" 1 ,  7 ,  3 "));
 	}
 
 	public void testNonArrayConversion() {

File: mod/jodd/test/jodd/typeconverter/ByteConverterTest.java
Patch:
@@ -14,6 +14,7 @@ public void testConversion() {
 		assertEquals(Byte.valueOf((byte) 1), ByteConverter.valueOf(Short.valueOf((short) 1)));
 		assertEquals(Byte.valueOf((byte) 1), ByteConverter.valueOf(Double.valueOf(1.5D)));
 		assertEquals(Byte.valueOf((byte) 1), ByteConverter.valueOf("1"));
+		assertEquals(Byte.valueOf((byte) 1), ByteConverter.valueOf("  1  "));
 		assertEquals(Byte.valueOf((byte) (300-256)), ByteConverter.valueOf(Integer.valueOf(300)));
 
 		try {

File: mod/jodd/test/jodd/io/IoTests.java
Patch:
@@ -11,6 +11,8 @@ public IoTests() {
 		super("jodd.io test suite");
 		addTestSuite(StreamUtilTest.class);
 		addTestSuite(FileUtilTest.class);
+		addTestSuite(FilepathScannerTest.class);
+		addTestSuite(FindFileTest.class);
 	}
 
 	public static Test suite() {

File: mod/idea-props/src/jodd/idea/props/psi/PropsElementTypes.java
Patch:
@@ -8,7 +8,7 @@
 import jodd.idea.props.Props;
 
 /**
- * PSI elements
+ * PSI elements.
  */
 public interface PropsElementTypes {
 

File: mod/jodd-wot/src/jodd/madvoc/component/MadvocController.java
Patch:
@@ -72,7 +72,7 @@ public ServletContext getApplicationContext() {
 	 * the action path string is returned (it might be different than original one, provided in arguments).
 	 * On first invoke, initializes the action configuration before further proceeding.
 	 *
-	 * @see jodd.madvoc.component.ActionMethodParser#buildActionPath(String, String, String, String, String)
+	 * @see jodd.madvoc.component.ActionMethodParser#buildActionPath(String, String, String, String)
 	 */
 	public String invoke(String actionPath, HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws Exception {
 		ActionRequest request = null;

File: mod/jodd/src/jodd/servlet/ServletUtil.java
Patch:
@@ -193,10 +193,8 @@ public static Cookie[] getAllCookies(HttpServletRequest request, String cookieNa
 	 */
 	public static String getContextPath(HttpServletRequest request) {
 		String contextPath = request.getContextPath();
-		if (contextPath == null) {
+		if (contextPath == null || contextPath.equals(StringPool.SLASH)) {
 			contextPath = StringPool.EMPTY;
-		} else if (contextPath.startsWith(StringPool.SLASH)) {
-			contextPath = contextPath.substring(1);
 		}
 		return contextPath;
 	}

File: mod/jodd-wot/src/jodd/jtx/db/DbJtxResourceManager.java
Patch:
@@ -42,9 +42,9 @@ public Class<DbSession> getResourceType() {
 	/**
 	 * {@inheritDoc}
 	 */
-	public DbSession beginTransaction(JtxTransactionMode jtxMode) {
+	public DbSession beginTransaction(JtxTransactionMode jtxMode, boolean active) {
 		DbSession session = new DbSession(connectionProvider);
-		if (jtxMode.isTransactional()) {
+		if (active) {
 			log.debug("begin jtx");
 			session.beginTransaction(JtxDbUtil.convertToDbMode(jtxMode));
 		}

File: mod/jodd-wot/src/jodd/jtx/db/DbJtxTransaction.java
Patch:
@@ -13,8 +13,8 @@
  */
 public class DbJtxTransaction extends JtxTransaction {
 
-	protected DbJtxTransaction(JtxTransactionManager txManager, JtxTransactionMode mode, Object context) {
-		super(txManager, mode, context);
+	protected DbJtxTransaction(JtxTransactionManager txManager, JtxTransactionMode mode, Object context, boolean active) {
+		super(txManager, mode, context, active);
 	}
 
 	public DbSession requestResource() {

File: mod/jodd-wot/src/jodd/jtx/db/DbJtxTransactionManager.java
Patch:
@@ -52,8 +52,8 @@ public DbJtxTransaction requestTransaction(JtxTransactionMode mode, Object conte
 	 * Builds new transaction instance.
 	 */
 	@Override
-	protected JtxTransaction createNewTransaction(JtxTransactionMode tm, Object context) {
-		return new DbJtxTransaction(this, tm, context);
+	protected JtxTransaction createNewTransaction(JtxTransactionMode tm, Object context, boolean active) {
+		return new DbJtxTransaction(this, tm, context, active);
 	}
 
 }
\ No newline at end of file

File: mod/jodd-wot/test/jodd/db/AllTests.java
Patch:
@@ -13,6 +13,7 @@ public AllTests() {
 		addTestSuite(DbMiscTest.class);
 		addTestSuite(DbTransactionTest.class);
 		addTestSuite(DbJtxTransactionManagerTest.class);
+		addTestSuite(DbPropagationTest.class);
 	}
 
 	public static Test suite() {

File: mod/jodd-wot/test/jodd/db/DbJtxTransactionManagerTest.java
Patch:
@@ -18,7 +18,6 @@ public void testSessionProvider() {
 		DbSession dbSession = sessionProvider.getDbSession();
 		assertNotNull(dbSession);
 		assertEquals(1, jtxManager.totalTransactions());
-		assertEquals(1, cp.getConnectionsCount().getBusyCount());
 
 		// transaction is committed and closed
 		jtxManager.getTransaction().commit();

File: mod/jodd-wot/test/jodd/db/DbTransactionTest.java
Patch:
@@ -78,7 +78,7 @@ public void testAction() {
 
 	void service0() {
 		assertTotals(0, 0);
-		DbJtxTransaction tx = dbtxm.requestTransaction(new JtxTransactionMode());
+		DbJtxTransaction tx = dbtxm.requestTransaction(new JtxTransactionMode().propagationRequired());
 		assertTotals(1, 1);
 		s0 = tx.requestResource();
 		service0_1(tx);

File: mod/jodd-wot/src/jodd/jtx/db/DbJtxTransactionManager.java
Patch:
@@ -26,7 +26,7 @@ public DbJtxTransactionManager(DbJtxResourceManager resourceManager) {
 	}
 
 	/**
-	 * Creates db jtx manager and registeres new {@link DbJtxResourceManager}.
+	 * Creates db jtx manager and registers new {@link DbJtxResourceManager}.
 	 */
 	public DbJtxTransactionManager(ConnectionProvider connectionProvider) {
 		this(new DbJtxResourceManager(connectionProvider));

File: mod/jodd-wot/test/jodd/db/DbHsqldbTestCase.java
Patch:
@@ -70,8 +70,8 @@ protected void executeUpdate(String sql) {
 		new DbQuery(sql).executeUpdateAndClose();
 	}
 
-	protected void executeCount(DbSession session, String s) {
-		new DbQuery(session, s).executeCountAndClose();
+	protected long executeCount(DbSession session, String s) {
+		return new DbQuery(session, s).executeCountAndClose();
 	}
 
 

File: mod/jodd-wot/test/jodd/db/DbTransactionTest.java
Patch:
@@ -174,7 +174,7 @@ public void testTime() {
 			assertSame(session1, session2);
 			executeCount(session1, "select count(*) from GIRL");
 			fail();
-		} catch (JtxException jtxex) {
+		} catch (JtxException ignore) {
 			
 		}
 		tx1.rollback();

File: mod/jodd-joy/src/jodd/joy/core/DefaultAppCore.java
Patch:
@@ -285,7 +285,9 @@ protected void initDb() {
 		// transactions manager
 		jtxManager = createJtxTransactionManager(connectionProvider);
 		jtxManager.setValidateExistingTransaction(true);
-		AnnotationTxAdviceSupport.manager = new AnnotationTxAdviceManager(jtxManager, "$class");
+		AnnotationTxAdviceManager annTxAdviceManager = new AnnotationTxAdviceManager(jtxManager, "$class");
+		annTxAdviceManager.registerAnnotations(Transaction.class, ReadWriteTransaction.class);
+		AnnotationTxAdviceSupport.manager = annTxAdviceManager;
 		DbSessionProvider sessionProvider = new DbJtxSessionProvider(jtxManager);
 
 		// global settings

File: mod/jodd-wot/src/jodd/madvoc/component/MadvocConfig.java
Patch:
@@ -25,7 +25,7 @@ public class MadvocConfig {
 
 	@SuppressWarnings({"unchecked"})
 	public MadvocConfig() {
-		actionAnnotations = new Class[] {Action.class};
+		setActionAnnotations(Action.class);
 		encoding = StringPool.UTF_8;
 		fileUploadFactory = new AdaptiveFileUploadFactory();
 		defaultResultType = ServletDispatcherResult.NAME;

File: mod/jodd-wot/src/jodd/madvoc/component/ActionMethodParser.java
Patch:
@@ -98,6 +98,9 @@ public ActionConfig parse(Class<?> actionClass, Method actionMethod, String acti
 		if (alias != null) {
 			String aliasPath = StringUtil.cutFromIndexOf(actionPath, StringPool.HASH);
 			madvocConfig.registerPathAlias(alias, aliasPath);
+		} else if (madvocConfig.isCreateDefaultAliases()) {
+			alias = actionClass.getName() + '#' + actionMethod.getName();
+			madvocConfig.registerPathAlias(alias, actionPath);
 		}
 		return createActionConfig(actionClass, actionMethod, interceptorClasses, actionPath);
 	}

File: mod/jodd-wot/test/jodd/madvoc/test/BooAction.java
Patch:
@@ -25,7 +25,7 @@ public void foo4() {}
 	@Action(value = "/xxx", extension = "not used!", method = "DELETE")
 	public void foo41() {}
 
-	@Action(value = "/xxx.${ext}", alias = "dude")
+	@Action(value = "/xxx.${ext}", alias = "dude", method = "POST")
 	public void foo5() {}
 
 	@Action(value = "q${method}2")

File: mod/jodd-wot/src/jodd/madvoc/MadvocServletFilter.java
Patch:
@@ -35,7 +35,7 @@ public class MadvocServletFilter implements Filter {
 	 */
 	public static final String PARAM_MADVOC_CONFIGURATOR = "madvoc.configurator";
 	/**
-	 * List of Madvoc properties files.
+	 * List of Madvoc properties files to be found on classpath.
 	 */
 	public static final String PARAM_MADVOC_PARAMS = "madvoc.params";
 

File: mod/jodd/src/jodd/props/Props.java
Patch:
@@ -72,7 +72,7 @@ public Props() {
 		parser = new PropsParser(properties, profiles);
 	}
 
-	protected Props(Map<String, String> properties, Map<String, Map<String, String>> profiles, PropsParser parser, String activeProflesProp) {
+	protected Props(Map<String, String> properties, Map<String, Map<String, String>> profiles, PropsParser parser, String activeProfilesProp) {
 		this();
 		this.properties.putAll(properties);
 		for (Map.Entry<String, Map<String, String>> entry : profiles.entrySet()) {
@@ -81,7 +81,7 @@ protected Props(Map<String, String> properties, Map<String, Map<String, String>>
 			this.profiles.put(entry.getKey(), map);
 		}
 
-		this.activeProfilesProp = this.activeProfilesProp;
+		this.activeProfilesProp = activeProfilesProp;
 
 		this.parser.escapeNewLineValue = parser.escapeNewLineValue;
 		this.parser.valueTrimLeft = parser.valueTrimLeft;

File: mod/jodd/src/jodd/servlet/HtmlFormUtil.java
Patch:
@@ -2,7 +2,7 @@
 
 package jodd.servlet;
 
-import jodd.typeconverter.BooleanConverter;
+import jodd.typeconverter.Convert;
 import jodd.util.CharUtil;
 import jodd.util.StringUtil;
 
@@ -37,7 +37,7 @@ public static String checked(Object data) {
 		if (data == null) {
 			return EMPTY;
 		}
-		if (BooleanConverter.valueOf(data).booleanValue()) {
+		if (Convert.toBoolean(data)) {
 			return CHECKED;
 		}
 		return EMPTY;

File: mod/jodd/src/jodd/servlet/tag/IfElseTag.java
Patch:
@@ -2,7 +2,7 @@
 
 package jodd.servlet.tag;
 
-import jodd.typeconverter.BooleanConverter;
+import jodd.typeconverter.Convert;
 import jodd.typeconverter.TypeConversionException;
 
 import javax.servlet.jsp.JspException;
@@ -18,8 +18,8 @@ public class IfElseTag extends SimpleTagSupport {
 
 	public void setTest(String test) {
 		try {
-			this.testValue = BooleanConverter.valueOf(test).booleanValue();
-		} catch (TypeConversionException tcex) {
+			this.testValue = Convert.toBoolean(test);
+		} catch (TypeConversionException ignore) {
 			this.testValue = false;
 		}
 	}

File: mod/jodd/src/jodd/servlet/tag/IteratorTag.java
Patch:
@@ -2,7 +2,7 @@
 
 package jodd.servlet.tag;
 
-import jodd.typeconverter.StringArrayConverter;
+import jodd.typeconverter.Convert;
 
 import javax.servlet.jsp.JspException;
 import javax.servlet.jsp.PageContext;
@@ -99,7 +99,7 @@ public void doTag() throws JspException {
 		} else if (items.getClass().isArray()) {
 			iterateArray((Object[]) items, from, count, pageContext);
 		} else if (items instanceof String) {
-			iterateArray(StringArrayConverter.valueOf(items), from, count, pageContext);
+			iterateArray(Convert.toStringArray(items), from, count, pageContext);
 		} else {
 			throw new JspException("Provided items are not iterable (neither Collection, Objects array...).");
 		}

File: mod/jodd/src/jodd/typeconverter/impl/BooleanArrayConverter.java
Patch:
@@ -1,6 +1,8 @@
 // Copyright (c) 2003-2010, Jodd Team (jodd.org). All Rights Reserved.
 
-package jodd.typeconverter;
+package jodd.typeconverter.impl;
+
+import jodd.typeconverter.TypeConverter;
 
 /**
  *  Converts given object to boolean[].

File: mod/jodd/src/jodd/typeconverter/impl/ClassConverter.java
Patch:
@@ -1,7 +1,9 @@
 // Copyright (c) 2003-2010, Jodd Team (jodd.org). All Rights Reserved.
 
-package jodd.typeconverter;
+package jodd.typeconverter.impl;
 
+import jodd.typeconverter.TypeConversionException;
+import jodd.typeconverter.TypeConverter;
 import jodd.util.ClassLoaderUtil;
 
 /**

File: mod/jodd/src/jodd/typeconverter/impl/FileUploadConverter.java
Patch:
@@ -1,8 +1,10 @@
 // Copyright (c) 2003-2010, Jodd Team (jodd.org). All Rights Reserved.
 
-package jodd.typeconverter;
+package jodd.typeconverter.impl;
 
 import jodd.servlet.upload.FileUpload;
+import jodd.typeconverter.TypeConversionException;
+import jodd.typeconverter.TypeConverter;
 
 /**
  * Converts given object to jodd.servlet.upload.FileUpload.

File: mod/jodd/src/jodd/typeconverter/impl/IntegerArrayConverter.java
Patch:
@@ -1,7 +1,9 @@
 // Copyright (c) 2003-2010, Jodd Team (jodd.org). All Rights Reserved.
 
-package jodd.typeconverter;
+package jodd.typeconverter.impl;
 
+import jodd.typeconverter.TypeConversionException;
+import jodd.typeconverter.TypeConverter;
 import jodd.util.CsvUtil;
 
 /**

File: mod/jodd/src/jodd/typeconverter/impl/JDateTimeConverter.java
Patch:
@@ -1,10 +1,11 @@
 // Copyright (c) 2003-2010, Jodd Team (jodd.org). All Rights Reserved.
 
-package jodd.typeconverter;
+package jodd.typeconverter.impl;
 
 import jodd.datetime.JDateTime;
-import jodd.datetime.DateTimeStamp;
 import jodd.datetime.JulianDateStamp;
+import jodd.typeconverter.TypeConversionException;
+import jodd.typeconverter.TypeConverter;
 
 /**
  * Converts object to {@link JDateTime}.

File: mod/jodd/src/jodd/typeconverter/impl/MutableByteConverter.java
Patch:
@@ -1,8 +1,10 @@
 // Copyright (c) 2003-2010, Jodd Team (jodd.org). All Rights Reserved.
 
-package jodd.typeconverter;
+package jodd.typeconverter.impl;
 
 import jodd.mutable.MutableByte;
+import jodd.typeconverter.TypeConversionException;
+import jodd.typeconverter.TypeConverter;
 
 /**
  * Converts given object to {@link MutableByte}. Given object (if not already instance of

File: mod/jodd/src/jodd/typeconverter/impl/MutableDoubleConverter.java
Patch:
@@ -1,8 +1,10 @@
 // Copyright (c) 2003-2010, Jodd Team (jodd.org). All Rights Reserved.
 
-package jodd.typeconverter;
+package jodd.typeconverter.impl;
 
 import jodd.mutable.MutableDouble;
+import jodd.typeconverter.TypeConversionException;
+import jodd.typeconverter.TypeConverter;
 
 /**
  * Converts given object to {@link MutableDouble}.

File: mod/jodd/src/jodd/typeconverter/impl/MutableFloatConverter.java
Patch:
@@ -1,8 +1,10 @@
 // Copyright (c) 2003-2010, Jodd Team (jodd.org). All Rights Reserved.
 
-package jodd.typeconverter;
+package jodd.typeconverter.impl;
 
 import jodd.mutable.MutableFloat;
+import jodd.typeconverter.TypeConversionException;
+import jodd.typeconverter.TypeConverter;
 
 /**
  * Converts given object to {@link MutableFloat}.

File: mod/jodd/src/jodd/typeconverter/impl/MutableIntegerConverter.java
Patch:
@@ -1,8 +1,10 @@
 // Copyright (c) 2003-2010, Jodd Team (jodd.org). All Rights Reserved.
 
-package jodd.typeconverter;
+package jodd.typeconverter.impl;
 
 import jodd.mutable.MutableInteger;
+import jodd.typeconverter.TypeConversionException;
+import jodd.typeconverter.TypeConverter;
 
 /**
  * Converts given object to an {@link MutableInteger}.

File: mod/jodd/src/jodd/typeconverter/impl/MutableLongConverter.java
Patch:
@@ -1,8 +1,10 @@
 // Copyright (c) 2003-2010, Jodd Team (jodd.org). All Rights Reserved.
 
-package jodd.typeconverter;
+package jodd.typeconverter.impl;
 
 import jodd.mutable.MutableLong;
+import jodd.typeconverter.TypeConversionException;
+import jodd.typeconverter.TypeConverter;
 
 /**
  * Converts given object to a {@link MutableLong}.

File: mod/jodd/src/jodd/typeconverter/impl/MutableShortConverter.java
Patch:
@@ -1,8 +1,10 @@
 // Copyright (c) 2003-2010, Jodd Team (jodd.org). All Rights Reserved.
 
-package jodd.typeconverter;
+package jodd.typeconverter.impl;
 
 import jodd.mutable.MutableShort;
+import jodd.typeconverter.TypeConversionException;
+import jodd.typeconverter.TypeConverter;
 
 
 /**

File: mod/jodd/src/jodd/typeconverter/impl/StringArrayConverter.java
Patch:
@@ -1,7 +1,8 @@
 // Copyright (c) 2003-2010, Jodd Team (jodd.org). All Rights Reserved.
 
-package jodd.typeconverter;
+package jodd.typeconverter.impl;
 
+import jodd.typeconverter.TypeConverter;
 import jodd.util.CsvUtil;
 
 /**

File: mod/jodd/src/jodd/typeconverter/impl/StringConverter.java
Patch:
@@ -1,7 +1,9 @@
 // Copyright (c) 2003-2010, Jodd Team (jodd.org). All Rights Reserved.
 
-package jodd.typeconverter;
+package jodd.typeconverter.impl;
 
+import jodd.typeconverter.TypeConversionException;
+import jodd.typeconverter.TypeConverter;
 import jodd.util.CsvUtil;
 
 import java.sql.Clob;

File: mod/jodd/test/jodd/TestJoddFast.java
Patch:
@@ -16,6 +16,7 @@ public static TestSuite suite() {
 		suite.addTest(jodd.introspector.AllTests.suite());
 		suite.addTest(jodd.io.AllTests.suite());
 		suite.addTest(jodd.format.AllTests.suite());
+		suite.addTest(jodd.props.AllTests.suite());
 		suite.addTest(jodd.servlet.AllTests.suite());
 		suite.addTest(jodd.util.AllTestsFast.suite());
 		suite.addTest(jodd.typeconverter.AllTests.suite());

File: mod/jodd/test/jodd/typeconverter/BigDecimalConverterTest.java
Patch:
@@ -2,6 +2,7 @@
 
 package jodd.typeconverter;
 
+import jodd.typeconverter.impl.BigDecimalConverter;
 import junit.framework.TestCase;
 
 import java.math.BigDecimal;

File: mod/jodd/test/jodd/typeconverter/BigIntegerConverterTest.java
Patch:
@@ -2,6 +2,7 @@
 
 package jodd.typeconverter;
 
+import jodd.typeconverter.impl.BigIntegerConverter;
 import junit.framework.TestCase;
 
 import java.math.BigInteger;

File: mod/jodd/test/jodd/typeconverter/BooleanArrayConverterTest.java
Patch:
@@ -2,6 +2,8 @@
 
 package jodd.typeconverter;
 
+import jodd.typeconverter.impl.BooleanArrayConverter;
+
 public class BooleanArrayConverterTest extends BaseTestCase {
 
 	public void testConversion() {

File: mod/jodd/test/jodd/typeconverter/BooleanConverterTest.java
Patch:
@@ -2,6 +2,7 @@
 
 package jodd.typeconverter;
 
+import jodd.typeconverter.impl.BooleanConverter;
 import junit.framework.TestCase;
 
 public class BooleanConverterTest extends TestCase {

File: mod/jodd/test/jodd/typeconverter/ByteArrayConverterTest.java
Patch:
@@ -1,5 +1,7 @@
 package jodd.typeconverter;
 
+import jodd.typeconverter.impl.ByteArrayConverter;
+
 public class ByteArrayConverterTest extends BaseTestCase {
 
 	public void testArrayConversion() {

File: mod/jodd/test/jodd/typeconverter/ByteConverterTest.java
Patch:
@@ -2,6 +2,7 @@
 
 package jodd.typeconverter;
 
+import jodd.typeconverter.impl.ByteConverter;
 import junit.framework.TestCase;
 
 public class ByteConverterTest extends TestCase {

File: mod/jodd/test/jodd/typeconverter/CharacterConverterTest.java
Patch:
@@ -2,6 +2,8 @@
 
 package jodd.typeconverter;
 
+import jodd.typeconverter.impl.CharacterConverter;
+
 public class CharacterConverterTest extends BaseTestCase {
 
 	public void testConversion() {

File: mod/jodd/test/jodd/typeconverter/ClassArrayConverterTest.java
Patch:
@@ -2,6 +2,8 @@
 
 package jodd.typeconverter;
 
+import jodd.typeconverter.impl.ClassArrayConverter;
+
 public class ClassArrayConverterTest extends BaseTestCase {
 
 	@SuppressWarnings({"unchecked"})

File: mod/jodd/test/jodd/typeconverter/ClassConverterTest.java
Patch:
@@ -2,6 +2,8 @@
 
 package jodd.typeconverter;
 
+import jodd.typeconverter.impl.ClassConverter;
+
 public class ClassConverterTest extends BaseTestCase {
 
 	public void testConversion() {

File: mod/jodd/test/jodd/typeconverter/DoubleArrayConverterTest.java
Patch:
@@ -2,6 +2,8 @@
 
 package jodd.typeconverter;
 
+import jodd.typeconverter.impl.DoubleArrayConverter;
+
 public class DoubleArrayConverterTest extends BaseTestCase {
 
 	public void testConversion() {

File: mod/jodd/test/jodd/typeconverter/DoubleConverterTest.java
Patch:
@@ -2,6 +2,8 @@
 
 package jodd.typeconverter;
 
+import jodd.typeconverter.impl.DoubleConverter;
+
 import java.math.BigDecimal;
 
 public class DoubleConverterTest extends BaseTestCase {

File: mod/jodd/test/jodd/typeconverter/FloatArrayConverterTest.java
Patch:
@@ -2,6 +2,8 @@
 
 package jodd.typeconverter;
 
+import jodd.typeconverter.impl.FloatArrayConverter;
+
 public class FloatArrayConverterTest extends BaseTestCase {
 
 	public void testConversion() {

File: mod/jodd/test/jodd/typeconverter/FloatConverterTest.java
Patch:
@@ -2,6 +2,8 @@
 
 package jodd.typeconverter;
 
+import jodd.typeconverter.impl.FloatConverter;
+
 import java.math.BigDecimal;
 
 public class FloatConverterTest extends BaseTestCase {

File: mod/jodd/test/jodd/typeconverter/IntegerArrayConverterTest.java
Patch:
@@ -2,6 +2,8 @@
 
 package jodd.typeconverter;
 
+import jodd.typeconverter.impl.IntegerArrayConverter;
+
 public class IntegerArrayConverterTest extends BaseTestCase {
 
 	public void testConversion() {

File: mod/jodd/test/jodd/typeconverter/IntegerConverterTest.java
Patch:
@@ -2,6 +2,7 @@
 
 package jodd.typeconverter;
 
+import jodd.typeconverter.impl.IntegerConverter;
 import junit.framework.TestCase;
 
 public class IntegerConverterTest extends TestCase {

File: mod/jodd/test/jodd/typeconverter/JDateTimeConverterTest.java
Patch:
@@ -3,6 +3,7 @@
 package jodd.typeconverter;
 
 import jodd.datetime.JDateTime;
+import jodd.typeconverter.impl.JDateTimeConverter;
 
 public class JDateTimeConverterTest extends BaseTestCase {
 

File: mod/jodd/test/jodd/typeconverter/LongArrayConverterTest.java
Patch:
@@ -2,6 +2,8 @@
 
 package jodd.typeconverter;
 
+import jodd.typeconverter.impl.LongArrayConverter;
+
 public class LongArrayConverterTest extends BaseTestCase {
 
     public void testConversion() {

File: mod/jodd/test/jodd/typeconverter/LongConverterTest.java
Patch:
@@ -2,6 +2,7 @@
 
 package jodd.typeconverter;
 
+import jodd.typeconverter.impl.LongConverter;
 import junit.framework.TestCase;
 
 public class LongConverterTest extends TestCase {

File: mod/jodd/test/jodd/typeconverter/MutableByteConverterTest.java
Patch:
@@ -3,6 +3,7 @@
 package jodd.typeconverter;
 
 import jodd.mutable.MutableByte;
+import jodd.typeconverter.impl.MutableByteConverter;
 import junit.framework.TestCase;
 
 public class MutableByteConverterTest extends TestCase {

File: mod/jodd/test/jodd/typeconverter/MutableDoubleConverterTest.java
Patch:
@@ -3,6 +3,7 @@
 package jodd.typeconverter;
 
 import jodd.mutable.MutableDouble;
+import jodd.typeconverter.impl.MutableDoubleConverter;
 import junit.framework.TestCase;
 
 import java.math.BigDecimal;

File: mod/jodd/test/jodd/typeconverter/MutableFloatConverterTest.java
Patch:
@@ -3,6 +3,7 @@
 package jodd.typeconverter;
 
 import jodd.mutable.MutableFloat;
+import jodd.typeconverter.impl.MutableFloatConverter;
 import junit.framework.TestCase;
 
 import java.math.BigDecimal;

File: mod/jodd/test/jodd/typeconverter/MutableIntegerConverterTest.java
Patch:
@@ -2,6 +2,7 @@
 
 package jodd.typeconverter;
 
+import jodd.typeconverter.impl.MutableIntegerConverter;
 import junit.framework.TestCase;
 import jodd.mutable.MutableInteger;
 

File: mod/jodd/test/jodd/typeconverter/MutableLongConverterTest.java
Patch:
@@ -3,6 +3,7 @@
 package jodd.typeconverter;
 
 import jodd.mutable.MutableLong;
+import jodd.typeconverter.impl.MutableLongConverter;
 import junit.framework.TestCase;
 
 public class MutableLongConverterTest extends TestCase {

File: mod/jodd/test/jodd/typeconverter/MutableShortConverterTest.java
Patch:
@@ -3,8 +3,8 @@
 package jodd.typeconverter;
 
 import jodd.mutable.MutableShort;
+import jodd.typeconverter.impl.MutableShortConverter;
 import junit.framework.TestCase;
-import jodd.mutable.MutableInteger;
 
 public class MutableShortConverterTest extends TestCase {
 

File: mod/jodd/test/jodd/typeconverter/ShortArrayConverterTest.java
Patch:
@@ -2,6 +2,8 @@
 
 package jodd.typeconverter;
 
+import jodd.typeconverter.impl.ShortArrayConverter;
+
 public class ShortArrayConverterTest extends BaseTestCase {
 
     public void testConversion() {

File: mod/jodd/test/jodd/typeconverter/ShortConverterTest.java
Patch:
@@ -2,6 +2,7 @@
 
 package jodd.typeconverter;
 
+import jodd.typeconverter.impl.ShortConverter;
 import junit.framework.TestCase;
 
 public class ShortConverterTest extends TestCase {
@@ -10,7 +11,7 @@ public void testConversion() {
         assertNull(ShortConverter.valueOf(null));
 
         assertEquals(Short.valueOf((short) 1), ShortConverter.valueOf(Short.valueOf((short) 1)));
-        assertEquals(Short.valueOf((short) 1), ShortConverter.valueOf(Integer.valueOf(1)));        
+        assertEquals(Short.valueOf((short) 1), ShortConverter.valueOf(Integer.valueOf(1)));
         assertEquals(Short.valueOf((short) 1), ShortConverter.valueOf(Double.valueOf(1.0D)));
         assertEquals(Short.valueOf((short) 1), ShortConverter.valueOf("1"));
 

File: mod/jodd/test/jodd/typeconverter/SqlDateConverterTest.java
Patch:
@@ -2,6 +2,7 @@
 
 package jodd.typeconverter;
 
+import jodd.typeconverter.impl.SqlDateConverter;
 import junit.framework.TestCase;
 
 import java.sql.Date;

File: mod/jodd/test/jodd/typeconverter/SqlTimeConverterTest.java
Patch:
@@ -2,6 +2,7 @@
 
 package jodd.typeconverter;
 
+import jodd.typeconverter.impl.SqlTimeConverter;
 import junit.framework.TestCase;
 
 import java.sql.Time;

File: mod/jodd/test/jodd/typeconverter/SqlTimestampConverterTest.java
Patch:
@@ -2,6 +2,7 @@
 
 package jodd.typeconverter;
 
+import jodd.typeconverter.impl.SqlTimestampConverter;
 import junit.framework.TestCase;
 
 import java.sql.Timestamp;

File: mod/jodd/test/jodd/typeconverter/StringArrayConverterTest.java
Patch:
@@ -2,6 +2,8 @@
 
 package jodd.typeconverter;
 
+import jodd.typeconverter.impl.StringArrayConverter;
+
 public class StringArrayConverterTest extends BaseTestCase {
 
     public void testConversion() {

File: mod/jodd/test/jodd/typeconverter/StringConverterTest.java
Patch:
@@ -2,6 +2,8 @@
 
 package jodd.typeconverter;
 
+import jodd.typeconverter.impl.StringConverter;
+
 public class StringConverterTest extends BaseTestCase {
 
 	public void testManager() {

File: mod/samples/src/examples/typeconvert/Tc.java
Patch:
@@ -2,7 +2,7 @@
 
 package examples.typeconvert;
 
-import jodd.typeconverter.ByteArrayConverter;
+import jodd.typeconverter.impl.ByteArrayConverter;
 
 public class Tc {
 

File: mod/jodd-wot/src/jodd/proxetta/asm/ProxettaClassBuilder.java
Patch:
@@ -40,7 +40,7 @@ public class ProxettaClassBuilder extends EmptyClassVisitor {
 	/**
 	 * Constructs new Proxetta class builder.
 	 * @param dest			destination visitor
-	 * @param aspects		set of asspects to apply
+	 * @param aspects		set of aspects to apply
 	 * @param suffix		proxy class name suffix, may be <code>null</code>
 	 * @param reqProxyClassName		requested proxy class name, may be <code>null</code>s
 	 * @param targetClassInfoReader	target info reader, already invoked.
@@ -59,7 +59,7 @@ public ProxettaClassBuilder(ClassVisitor dest, ProxyAspect[] aspects, String suf
 
 	/**
 	 * Creates destination subclass header from current target class. Destination name is created from targets by
-	 * adding a suffix and, optionaly, a number. Destination extends the target.
+	 * adding a suffix and, optionally, a number. Destination extends the target.
 	 */
 	@Override
 	public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {

File: mod/jodd-wot/src/jodd/madvoc/result/RawResult.java
Patch:
@@ -6,7 +6,6 @@
 import jodd.madvoc.ScopeType;
 import jodd.madvoc.meta.In;
 import jodd.madvoc.component.MadvocConfig;
-import jodd.util.CharUtil;
 
 import javax.servlet.http.HttpServletResponse;
 import java.io.OutputStream;
@@ -33,8 +32,7 @@ public void render(ActionRequest actionRequest, Object resultObject, String resu
 			return;
 		}
 		if (resultObject instanceof RawResultData != true) {
-			char[] chars = resultValue.toCharArray();
-			resultObject = new RawResultData(CharUtil.toByteArray(chars), madvocConfig.getEncoding());
+			resultObject = new RawResultData(resultValue.getBytes(madvocConfig.getEncoding()));
 		}
 
 		RawResultData result = (RawResultData) resultObject;

File: mod/jodd/src/jodd/typeconverter/BigDecimalConverter.java
Patch:
@@ -13,17 +13,17 @@ public static BigDecimal valueOf(Object value) {
 		if (value == null) {
 			return null;
 		}
+		
 		if (value instanceof BigDecimal) {
 			return (BigDecimal) value;
 		}
 		try {
-			return (new BigDecimal(value.toString()));
+			return new BigDecimal(value.toString());
 		} catch (NumberFormatException nfex) {
 			throw new TypeConversionException(value, nfex); 
 		}
 	}
 
-
 	public BigDecimal convert(Object value) {
 		return valueOf(value);
 	}

File: mod/jodd/src/jodd/typeconverter/BigIntegerConverter.java
Patch:
@@ -13,14 +13,15 @@ public static BigInteger valueOf(Object value) {
 		if (value == null) {
 			return null;
 		}
+
 		if (value instanceof BigInteger) {
 			return (BigInteger) value;
 		}
 		if (value instanceof Number) {
 			return new BigInteger(String.valueOf(((Number)value).longValue()));
 		}
 		try {
-			return (new BigInteger(value.toString()));
+			return new BigInteger(value.toString());
 		} catch (NumberFormatException nfex) {
 			throw new TypeConversionException(value, nfex);
 		}

File: mod/jodd/src/jodd/typeconverter/BooleanArrayConverter.java
Patch:
@@ -13,7 +13,7 @@ public static boolean[] valueOf(Object value) {
 		}
 		Class type = value.getClass();
 		if (type.isArray() == false) {
-			if (value instanceof Boolean) {
+			if (type == Boolean.class) {
 				return new boolean[] {((Boolean) value).booleanValue()};
 			}
 			return new boolean[] {BooleanConverter.valueOf(value.toString()).booleanValue()};

File: mod/jodd/src/jodd/typeconverter/BooleanConverter.java
Patch:
@@ -14,7 +14,7 @@ public static Boolean valueOf(Object value) {
 		if (value == null) {
 			return null;
 		}
-		if (value instanceof Boolean) {
+		if (value.getClass() == Boolean.class) {
 			return (Boolean) value;
 		}
 		String stringValue = value.toString();

File: mod/jodd/src/jodd/typeconverter/ByteConverter.java
Patch:
@@ -12,14 +12,14 @@ public static Byte valueOf(Object value) {
 		if (value == null) {
 			return null;
 		}
-		if (value instanceof Byte) {
+		if (value.getClass() == Byte.class) {
 			return (Byte) value;
 		}
 		if (value instanceof Number) {
-			return new Byte(((Number)value).byteValue());
+			return Byte.valueOf(((Number)value).byteValue());
 		}
 		try {
-			return (new Byte(value.toString()));
+			return Byte.valueOf(value.toString());
 		} catch (NumberFormatException nfex) {
 			throw new TypeConversionException(value, nfex);
 		}

File: mod/jodd/src/jodd/typeconverter/CharacterConverter.java
Patch:
@@ -8,11 +8,10 @@
 public class CharacterConverter implements TypeConverter<Character> {
 
 	public static Character valueOf(Object value) {
-
 		if (value == null) {
 			return null;
 		}
-		if (value instanceof Character) {
+		if (value.getClass() == Character.class) {
 			return (Character) value;
 		}
 		if (value instanceof Number) {
@@ -24,7 +23,7 @@ public static Character valueOf(Object value) {
 			if (s.length() != 1) {
 				throw new TypeConversionException(value);
 			}
-			return new Character(s.charAt(0));
+			return Character.valueOf(s.charAt(0));
 		} catch (IndexOutOfBoundsException ioobex) {
 			throw new TypeConversionException(value, ioobex);
 		}

File: mod/jodd/src/jodd/typeconverter/ClassConverter.java
Patch:
@@ -10,11 +10,11 @@
 public class ClassConverter implements TypeConverter<Class> {
 
 	public static Class valueOf(Object value) {
-
 		if (value == null) {
 			return null;
 		}
-		if (value instanceof Class) {
+
+		if (value.getClass() == Class.class) {
 			return (Class) value;
 		}
 		try {

File: mod/jodd/src/jodd/typeconverter/DoubleArrayConverter.java
Patch:
@@ -8,7 +8,6 @@
 public class DoubleArrayConverter implements TypeConverter<double[]> {
 
 	public static double[] valueOf(Object value) {
-
 		if (value == null) {
 			return null;
 		}
@@ -23,7 +22,6 @@ public static double[] valueOf(Object value) {
 			} catch (NumberFormatException nfex) {
 				throw new TypeConversionException(value, nfex);
 			}
-
 		}
 
 		if (type == double[].class) {

File: mod/jodd/src/jodd/typeconverter/FloatArrayConverter.java
Patch:
@@ -8,7 +8,6 @@
 public class FloatArrayConverter implements TypeConverter<float[]> {
 
 	public static float[] valueOf(Object value) {
-
 		if (value == null) {
 			return null;
 		}

File: mod/jodd/src/jodd/typeconverter/JDateTimeConverter.java
Patch:
@@ -12,7 +12,6 @@
 public class JDateTimeConverter implements TypeConverter<JDateTime> {
 
 	public static JDateTime valueOf(Object value) {
-
 		if (value == null) {
 			return null;
 		}
@@ -23,8 +22,8 @@ public static JDateTime valueOf(Object value) {
 		if (value instanceof Number) {
 			return new JDateTime(((Number) value).longValue());
 		}
-		if (value instanceof DateTimeStamp) {
-			return new JDateTime((DateTimeStamp) value);
+		if (value instanceof String) {
+			return new JDateTime((String) value);
 		}
 		if (value instanceof JulianDateStamp) {
 			return new JDateTime((JulianDateStamp) value);

File: mod/jodd/src/jodd/typeconverter/LongArrayConverter.java
Patch:
@@ -8,7 +8,6 @@
 public class LongArrayConverter implements TypeConverter<long[]> {
 
 	public static long[] valueOf(Object value) {
-
 		if (value == null) {
 			return null;
 		}
@@ -77,7 +76,6 @@ public static long[] valueOf(Object value) {
 			return results;
 		}
 
-
 		Object[] values = (Object[]) value;
 		long[] results = new long[values.length];
 		try {

File: mod/jodd/src/jodd/typeconverter/MutableByteConverter.java
Patch:
@@ -10,13 +10,12 @@
  */
 public class MutableByteConverter implements TypeConverter<MutableByte> {
 
-
 	public static MutableByte valueOf(Object value) {
-
 		if (value == null) {
 			return null;
 		}
-		if (value instanceof MutableByte) {
+
+		if (value.getClass() == MutableByte.class) {
 			return (MutableByte) value;
 		}
 		if (value instanceof Number) {

File: mod/jodd/src/jodd/typeconverter/MutableDoubleConverter.java
Patch:
@@ -10,11 +10,11 @@
 public class MutableDoubleConverter implements TypeConverter<MutableDouble> {
 
 	public static MutableDouble valueOf(Object value) {
-
 		if (value == null) {
 			return null;
 		}
-		if (value instanceof MutableDouble) {
+
+		if (value.getClass() == MutableDouble.class) {
 			return (MutableDouble) value;
 		}
 		if (value instanceof Number) {

File: mod/jodd/src/jodd/typeconverter/MutableFloatConverter.java
Patch:
@@ -10,11 +10,11 @@
 public class MutableFloatConverter implements TypeConverter<MutableFloat> {
 
 	public static MutableFloat valueOf(Object value) {
-
 		if (value == null) {
 			return null;
 		}
-		if (value instanceof MutableFloat) {
+		
+		if (value.getClass() == MutableFloat.class) {
 			return (MutableFloat) value;
 		}
 		if (value instanceof Number) {

File: mod/jodd/src/jodd/typeconverter/MutableIntegerConverter.java
Patch:
@@ -10,11 +10,11 @@
 public class MutableIntegerConverter implements TypeConverter<MutableInteger> {
 
 	public static MutableInteger valueOf(Object value) {
-
 		if (value == null) {
 			return null;
 		}
-		if (value instanceof MutableInteger) {
+
+		if (value.getClass() == MutableInteger.class) {
 			return (MutableInteger) value;
 		}
 		if (value instanceof Number) {

File: mod/jodd/src/jodd/typeconverter/MutableLongConverter.java
Patch:
@@ -10,11 +10,11 @@
 public class MutableLongConverter implements TypeConverter<MutableLong> {
 
 	public static MutableLong valueOf(Object value) {
-
 		if (value == null) {
 			return null;
 		}
-		if (value instanceof MutableLong) {
+
+		if (value.getClass() == MutableLong.class) {
 			return (MutableLong) value;
 		}
 		if (value instanceof Number) {

File: mod/jodd/src/jodd/typeconverter/MutableShortConverter.java
Patch:
@@ -11,13 +11,12 @@
  */
 public class MutableShortConverter implements TypeConverter<MutableShort> {
 
-
 	public static MutableShort valueOf(Object value) {
-
 		if (value == null) {
 			return null;
 		}
-		if (value instanceof MutableShort) {
+
+		if (value.getClass() == MutableShort.class) {
 			return (MutableShort) value;
 		}
 		if (value instanceof Number) {

File: mod/jodd/src/jodd/typeconverter/ShortArrayConverter.java
Patch:
@@ -8,7 +8,6 @@
 public class ShortArrayConverter implements TypeConverter<short[]> {
 
 	public static short[] valueOf(Object value) {
-
 		if (value == null) {
 			return null;
 		}

File: mod/jodd/src/jodd/typeconverter/SqlDateConverter.java
Patch:
@@ -11,7 +11,6 @@
 public class SqlDateConverter implements TypeConverter<Date> {
 
 	public static Date valueOf(Object value) {
-	
 		if (value == null) {
 			return null;
 		}

File: mod/jodd/src/jodd/typeconverter/SqlTimeConverter.java
Patch:
@@ -10,10 +10,10 @@
 public class SqlTimeConverter implements TypeConverter<Time> {
 
 	public static Time valueOf(Object value) {
-
 		if (value == null) {
 			return null;
 		}
+		
 		if (value instanceof Time) {
 			return (Time) value;
 		}

File: mod/jodd/src/jodd/typeconverter/SqlTimestampConverter.java
Patch:
@@ -9,7 +9,6 @@
  */
 public class SqlTimestampConverter implements TypeConverter<Timestamp> {
 
-
 	public static Timestamp valueOf(Object value) {
 		if (value == null) {
 			return null;

File: mod/jodd/src/jodd/typeconverter/TypeConverterManager.java
Patch:
@@ -11,6 +11,7 @@
 import jodd.servlet.upload.FileUpload;
 import jodd.datetime.JDateTime;
 
+import java.net.URI;
 import java.util.HashMap;
 import java.math.BigDecimal;
 import java.math.BigInteger;
@@ -102,6 +103,8 @@ public static void registerDefaults() {
 		register(JDateTime.class, new JDateTimeConverter());
 		register(Class.class, new ClassConverter());
 		register(Class[].class, new ClassArrayConverter());
+
+		register(URI.class, new URIConverter());
 		register(URL.class, new URLConverter());
 	}
 

File: mod/jodd/src/jodd/typeconverter/URLConverter.java
Patch:
@@ -14,6 +14,7 @@ public static URL valueOf(Object value) {
 		if (value == null) {
 			return null;
 		}
+		
 		if (value instanceof URL) {
 			return (URL) value;
 		}
@@ -27,4 +28,5 @@ public static URL valueOf(Object value) {
 	public URL convert(Object value) {
 		return valueOf(value);
 	}
+
 }
\ No newline at end of file

File: mod/jodd/test/jodd/bean/BeanUtilTest.java
Patch:
@@ -638,7 +638,7 @@ public void testSetPropertyMath() {
 		FooBean2 fb = new FooBean2();
 		String propName = "fooBigDecimal";
 		assertEquals(BigDecimal.class, BeanUtil.getPropertyType(fb, propName));
-		BeanUtil.setProperty(fb, propName, new BigDecimal(1.2));
+		BeanUtil.setProperty(fb, propName, new BigDecimal("1.2"));
 		assertEquals(1.2, fb.getFooBigDecimal().doubleValue(), 0.0005);
 	}
 

File: mod/jodd/test/jodd/typeconverter/MutableIntegerConverterTest.java
Patch:
@@ -9,6 +9,7 @@ public class MutableIntegerConverterTest extends TestCase {
 
 	public void testConversion() {
 		assertNull(MutableIntegerConverter.valueOf(null));
+		
 		assertEquals(new MutableInteger(1), MutableIntegerConverter.valueOf(new MutableInteger(1)));
 		assertEquals(new MutableInteger(1), MutableIntegerConverter.valueOf(Integer.valueOf(1)));
 		assertEquals(new MutableInteger(1), MutableIntegerConverter.valueOf(Short.valueOf((short) 1)));
@@ -18,7 +19,7 @@ public void testConversion() {
 		try {
 			MutableIntegerConverter.valueOf("a");
 			fail();
-		} catch (TypeConversionException tcex) {
+		} catch (TypeConversionException ignore) {
 		}
 	}
 }

File: mod/jodd/src/jodd/typeconverter/ClassArrayConverter.java
Patch:
@@ -17,6 +17,9 @@ public static Class[] valueOf(Object value) {
 		if (value instanceof Class[]) {
 			return (Class[]) value;
 		}
+		if (value instanceof Class) {
+			return new Class[] {(Class) value};
+		}
 		String[] allClassNames = StringArrayConverter.valueOf(value);
 		int total = allClassNames.length;
 		Class[] result = new Class[total];

File: mod/jodd/test/jodd/typeconverter/BooleanArrayConverterTest.java
Patch:
@@ -5,13 +5,13 @@
 public class BooleanArrayConverterTest extends BaseTestCase {
 
 	public void testConversion() {
-		assertNull(BigIntegerConverter.valueOf(null));
+		assertNull(BooleanArrayConverter.valueOf(null));
 
 		assertEq(arr(true), BooleanArrayConverter.valueOf(Boolean.TRUE));
 		assertEq(arr(true), BooleanArrayConverter.valueOf("true"));
 		assertEq(arr(true, false, true), BooleanArrayConverter.valueOf(arr(true, false, true)));
 		assertEq(arr(true, false, true), BooleanArrayConverter.valueOf(arri(7, 0, 3)));
-		assertEq(arr(true, false, true), BooleanArrayConverter.valueOf(arr("true", "0", "yes")));
+		assertEq(arr(true, false, true), BooleanArrayConverter.valueOf(arrs("true", "0", "yes")));
 	}
 
 

File: mod/jodd/src/jodd/typeconverter/BigIntegerConverter.java
Patch:
@@ -16,6 +16,9 @@ public static BigInteger valueOf(Object value) {
 		if (value instanceof BigInteger) {
 			return (BigInteger) value;
 		}
+		if (value instanceof Number) {
+			return new BigInteger(String.valueOf(((Number)value).longValue()));
+		}
 		try {
 			return (new BigInteger(value.toString()));
 		} catch (NumberFormatException nfex) {

File: mod/jodd/test/jodd/typeconverter/IntegerConverterTest.java
Patch:
@@ -6,8 +6,9 @@
 
 public class IntegerConverterTest extends TestCase {
 
-	public void testConvert() {
+	public void testConversion() {
 		assertNull(IntegerConverter.valueOf(null));
+
 		assertEquals(Integer.valueOf(1), IntegerConverter.valueOf(Integer.valueOf(1)));
 		assertEquals(Integer.valueOf(1), IntegerConverter.valueOf(Short.valueOf((short) 1)));
 		assertEquals(Integer.valueOf(1), IntegerConverter.valueOf(Double.valueOf(1.0D)));
@@ -16,7 +17,7 @@ public void testConvert() {
 		try {
 			IntegerConverter.valueOf("a");
 			fail();
-		} catch (TypeConversionException tcex) {
+		} catch (TypeConversionException ignore) {
 		}
 	}
 }

File: mod/jodd/test/jodd/typeconverter/MutableIntegerConverterTest.java
Patch:
@@ -5,9 +5,9 @@
 import junit.framework.TestCase;
 import jodd.mutable.MutableInteger;
 
-public class MutableIntegerTest extends TestCase {
+public class MutableIntegerConverterTest extends TestCase {
 
-	public void testConvert() {
+	public void testConversion() {
 		assertNull(MutableIntegerConverter.valueOf(null));
 		assertEquals(new MutableInteger(1), MutableIntegerConverter.valueOf(new MutableInteger(1)));
 		assertEquals(new MutableInteger(1), MutableIntegerConverter.valueOf(Integer.valueOf(1)));

File: mod/jodd-joy/src/jodd/joy/i18n/TextTag.java
Patch:
@@ -43,7 +43,7 @@ public void setDefaultOnly(String defaultOnly) {
 	private List<String[]> params = new ArrayList<String[]>();
 
 	public void setDynamicAttribute(String uri, String localName, Object value) {
-		params.add(new String[] {localName, StringUtil.toNotNullString(value)});
+		params.add(new String[] {localName, StringUtil.toSafeString(value)});
 	}
 
 	@Override

File: mod/jodd-wot/src/jodd/madvoc/interceptor/EchoInterceptor.java
Patch:
@@ -50,9 +50,9 @@ protected void printBefore(ActionRequest request) {
 	 */
 	protected void printAfter(ActionRequest request, long executionTime, Object result) {
 		StringBuilder message = new StringBuilder("<----- ");
-		String resultString = StringUtil.toString(result);
-		if (resultString.length() > 50) {
-			resultString = resultString.substring(0, 50);
+		String resultString = StringUtil.toSafeString(result);
+		if (resultString.length() > 70) {
+			resultString = resultString.substring(0, 70);
 			resultString += "...";
 		}
 		message.append(request.getActionPath()).append("  (").append(resultString);

File: mod/jodd/src/jodd/util/StringUtil.java
Patch:
@@ -338,7 +338,7 @@ public static String toString(Object obj) {
 	 * string is returned.
 	 * @see jodd.typeconverter.StringConverter 
 	 */
-	public static String toNotNullString(Object obj) {
+	public static String toSafeString(Object obj) {
 		if (obj == null) {
 			return EMPTY;
 		}

File: mod/jodd/test/jodd/util/StringUtilTest.java
Patch:
@@ -709,8 +709,8 @@ public void testToString() {
 		assertEquals("aaa", StringUtil.toString("aaa"));
 		assertEquals("173", StringUtil.toString(Integer.valueOf(173)));
 		assertNull(StringUtil.toString(null));
-		assertEquals("", StringUtil.toNotNullString(null));
-		assertEquals("3", StringUtil.toNotNullString(Long.valueOf(3)));
+		assertEquals("", StringUtil.toSafeString(null));
+		assertEquals("3", StringUtil.toSafeString(Long.valueOf(3)));
 
 		String[] arr = StringUtil.toStringArray("123, 234");
 		assertEquals("123", arr[0]);

File: mod/jodd/src/jodd/mail/SendMailSession.java
Patch:
@@ -97,7 +97,7 @@ protected Message adapt(Email email, Session session) throws MessagingException
 		if (email.getReplyTo() != null) {
 			int totalReplyTo = email.getReplyTo().length;
 			address = new InternetAddress[totalReplyTo];
-			for (int i = 0; i < totalTo; i++) {
+			for (int i = 0; i < totalReplyTo; i++) {
 				address[i] = new InternetAddress(email.getReplyTo()[i]);
 			}
 			msg.setReplyTo(address);

File: mod/jodd/src/jodd/bean/loader/MapBeanLoader.java
Patch:
@@ -21,7 +21,7 @@ public static void loadBean(Object bean, Object map) {
 				String propertyName = (String) o;
 				Object propertyValue = ((Map) map).get(propertyName);
 				if (propertyValue == null) {
-					return;
+					continue;
 				}
 				BeanUtil.setPropertyForcedSilent(bean, propertyName, propertyValue);
 			}

File: mod/jodd-wot/test/jodd/madvoc/AllTests.java
Patch:
@@ -2,6 +2,7 @@
 
 package jodd.madvoc;
 
+import jodd.madvoc.component.InterceptorManagerTest;
 import junit.framework.TestSuite;
 import junit.framework.Test;
 import jodd.madvoc.component.ActionPathMapperTest;
@@ -16,6 +17,7 @@ public AllTests() {
 		addTestSuite(ActionResultTest.class);
 		addTestSuite(ActionPathMapperTest.class);
 		addTestSuite(MadvocUtilTest.class);
+		addTestSuite(InterceptorManagerTest.class);
 	}
 
 	public static Test suite() {

File: mod/jodd-wot/src/jodd/db/type/CharacterSqlType.java
Patch:
@@ -28,7 +28,7 @@ public Character get(ResultSet rs, int index, int dbSqlType) throws SQLException
 		if (s.length() > 1) {
 			throw new DbSqlException("Char column size too long, should be 1.");
 		}
-		return Character.valueOf(s.charAt(1));
+		return Character.valueOf(s.charAt(0));
 	}
 
 	/**

File: mod/jodd/src/jodd/util/StringUtil.java
Patch:
@@ -1490,6 +1490,9 @@ public static int endsWithOneIgnoreCase(String src, String[] dest) {
 	// ---------------------------------------------------------------- char based
 
 
+	/**
+	 * @see #indexOfChars(String, String, int)
+	 */
 	public static int indexOfChars(String string, String chars) {
 		return indexOfChars(string, chars, 0);
 	}

File: mod/jodd/test/jodd/util/CsvUtilTest.java
Patch:
@@ -16,6 +16,7 @@ public void testToCsv() {
 		assertEquals("1997,Ford,E350,\"Super, luxurious truck\"", CsvUtil.toCsvString("1997", "Ford", "E350", "Super, luxurious truck"));
 		assertEquals("1997,Ford,E350,\"Super \"\"luxurious\"\" truck\"", CsvUtil.toCsvString("1997", "Ford", "E350", "Super \"luxurious\" truck"));
 		assertEquals("1,,2", CsvUtil.toCsvString(Integer.valueOf(1), null, Integer.valueOf(2)));
+		assertEquals("\"a\nb\"", CsvUtil.toCsvString("a\nb"));
 	}
 
 	public void testFromCsv() {
@@ -28,6 +29,7 @@ public void testFromCsv() {
 		assertStringArray(CsvUtil.toStringArray("a,b,\"\"\"some\"\"r\""), "a","b", "\"some\"r");
 		assertStringArray(CsvUtil.toStringArray("1997,Ford,E350,\"Super, luxurious truck\""), "1997", "Ford", "E350", "Super, luxurious truck");
 		assertStringArray(CsvUtil.toStringArray("1997,Ford,E350,\"Super \"\"luxurious\"\" truck\""), "1997", "Ford", "E350", "Super \"luxurious\" truck");
+		assertStringArray(CsvUtil.toStringArray("\"a\nb\""), "a\nb");
 	}
 
 

File: mod/jodd-wot/src/jodd/db/orm/mapper/DefaultResultSetMapper.java
Patch:
@@ -335,6 +335,7 @@ public Object[] parseObjects(Class... types) {
 						Class type = BeanUtil.getDeclaredPropertyType(result[currentResult], propertyName);
 						if (type != null) {
 							// match: entity
+							dec.updateDbSqlType(columnDbSqlType);	// updates column db sql type information for the entity!!!
 							Class<? extends SqlType> sqlTypeClass = dec.getSqlTypeClass();
 							Object value = readColumnValue(colNdx, type, sqlTypeClass, columnDbSqlType);
 							if (value != null) {

File: mod/jodd-wot/src/jodd/db/type/BooleanSqlType.java
Patch:
@@ -6,7 +6,7 @@
 import java.sql.SQLException;
 import java.sql.PreparedStatement;
 
-public class BooleanSqlType extends SqlType<Boolean> {
+public class BooleanSqlType extends NullAwareSqlType<Boolean> {
 
 	/**
 	 * {@inheritDoc}

File: mod/jodd-wot/src/jodd/db/type/ByteSqlType.java
Patch:
@@ -6,7 +6,7 @@
 import java.sql.SQLException;
 import java.sql.PreparedStatement;
 
-public class ByteSqlType extends SqlType<Byte> {
+public class ByteSqlType extends NullAwareSqlType<Byte> {
 
 	/**
 	 * {@inheritDoc}

File: mod/jodd-wot/src/jodd/db/type/DoubleSqlType.java
Patch:
@@ -6,7 +6,7 @@
 import java.sql.SQLException;
 import java.sql.PreparedStatement;
 
-public class DoubleSqlType extends SqlType<Double> {
+public class DoubleSqlType extends NullAwareSqlType<Double> {
 
 	/**
 	 * {@inheritDoc}

File: mod/jodd-wot/src/jodd/db/type/FloatSqlType.java
Patch:
@@ -6,7 +6,7 @@
 import java.sql.SQLException;
 import java.sql.PreparedStatement;
 
-public class FloatSqlType extends SqlType<Float> {
+public class FloatSqlType extends NullAwareSqlType<Float> {
 
 	/**
 	 * {@inheritDoc}

File: mod/jodd-wot/src/jodd/db/type/IntegerSqlType.java
Patch:
@@ -6,7 +6,7 @@
 import java.sql.SQLException;
 import java.sql.PreparedStatement;
 
-public class IntegerSqlType extends SqlType<Integer> {
+public class IntegerSqlType extends NullAwareSqlType<Integer> {
 
 	/**
 	 * {@inheritDoc}

File: mod/jodd-wot/src/jodd/db/type/LongSqlType.java
Patch:
@@ -6,7 +6,7 @@
 import java.sql.SQLException;
 import java.sql.PreparedStatement;
 
-public class LongSqlType extends SqlType<Long> {
+public class LongSqlType extends NullAwareSqlType<Long> {
 
 	/**
 	 * {@inheritDoc}

File: mod/jodd-wot/src/jodd/db/type/ShortSqlType.java
Patch:
@@ -6,7 +6,7 @@
 import java.sql.SQLException;
 import java.sql.PreparedStatement;
 
-public class ShortSqlType extends SqlType<Short> {
+public class ShortSqlType extends NullAwareSqlType<Short> {
 
 	/**
 	 * {@inheritDoc}

File: mod/jodd-wot/test/jodd/proxetta/SubclassTest.java
Patch:
@@ -15,6 +15,7 @@
 import java.util.List;
 import java.util.Set;
 import java.util.HashSet;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 public class SubclassTest extends TestCase {
 
@@ -106,7 +107,6 @@ public void testInnerOverride() {
 
 	}
 
-
 	public void testJdk() {
 		try {
 			Proxetta.withAspects(new ProxyAspect(FooProxyAdvice.class, new AllMethodsPointcut()))

File: mod/samples/src/examples/email/SendGmailMail.java
Patch:
@@ -19,7 +19,7 @@ public static void main(String[] args) {
 				.from("igor.spasic@gmail.com")
 				.to("info@jodd.org")
 				.subject("send from gmail")
-				.text("a plain text message");
+				.addText("a plain text message");
 		session.sendMail(email);
 
 		session.close();

File: mod/jodd/src/jodd/mail/Pop3Server.java
Patch:
@@ -77,7 +77,7 @@ protected Properties createSessionProperties() {
 	 * {@inheritDoc}
 	 */
 	public ReceiveMailSession createSession() {
-		Session session = Session.getDefaultInstance(sessionProperties, authenticator);
+		Session session = Session.getInstance(sessionProperties, authenticator);
 		Store store;
 		try {
 			store = getStore(session);

File: mod/jodd/src/jodd/mail/SmtpServer.java
Patch:
@@ -81,7 +81,7 @@ protected Properties createSessionProperties() {
 	 * {@inheritDoc}
 	 */
 	public SendMailSession createSession() {
-		Session mailSession = Session.getDefaultInstance(sessionProperties, authenticator);
+		Session mailSession = Session.getInstance(sessionProperties, authenticator);
 		Transport mailTransport;
 		try {
 			mailTransport = getTransport(mailSession);

File: mod/jodd-wot/src/jodd/db/orm/sqlgen/chunks/ReferenceChunk.java
Patch:
@@ -9,7 +9,7 @@
 
 /**
  * Resolves column and table references. Reference is given in format: <code>tableRef.propertyName</code>.
- * Property name may be '+', indicating the identity columns. If property name is omitted, only table bame
+ * Property name may be '+', indicating the identity columns. If property name is omitted, only table name
  * will be rendered.
  */
 public class ReferenceChunk extends SqlChunk {

File: mod/jodd-wot/src/jodd/db/orm/sqlgen/DbEntitySql.java
Patch:
@@ -159,7 +159,7 @@ public static DbSqlBuilder findForeign(Class entity, Object value) {
 		DbEntityDescriptor dedFk = dbOrmManager.lookupType(value.getClass());
 
 		String fkColum =
-				uncapitalize(convertTableNameToClassName(dedFk.getTableName())) +
+				uncapitalize(convertTableNameToClassName(dedFk.getTableName(), dbOrmManager.getTableNamePrefix(), dbOrmManager.getTableNameSuffix())) +
 				capitalize(convertColumnNameToPropertyName(dedFk.getIdColumnName()));
 		Object idValue = BeanUtil.getDeclaredPropertySilently(value, dedFk.getIdPropertyName());
 		return sql()._(SELECT).column(tableRef)._(FROM).table(entity, tableRef)._(WHERE).ref(tableRef, fkColum)._(EQUALS).colvalue(idValue);

File: mod/samples/src/examples/email/ReceiveMail.java
Patch:
@@ -21,7 +21,7 @@ public static void main(String[] args) throws IOException {
 		Pop3Server popServer = new Pop3Server("pop3.beotel.yu", new SimpleAuthenticator("weird", "..."));
 		ReceiveMailSession session = popServer.createSession();
 		session.open();
-		System.out.println(session.getNewMessageCount() + " / " + session.getMessageCount());
+		System.out.println(session.getMessageCount());
 		ReceivedEmail[] emails = session.receiveEmail(false);
 		if (emails != null) {
 			for (ReceivedEmail email : emails) {

File: mod/jodd-wot/src/jodd/jtx/JtxTransactionManager.java
Patch:
@@ -195,7 +195,9 @@ public JtxTransaction requestTransaction(JtxTransactionMode mode) {
 	 * The exception may be thrown indicating propagation mismatch.
 	 */
 	public JtxTransaction requestTransaction(JtxTransactionMode mode, Object context) {
-		log.debug("Requesting TX");
+		if (log.isDebugEnabled()) {
+			log.debug("Requesting TX " + mode.toString());
+		}
 		JtxTransaction currentTx = getTransaction();
 		if (checkValidTxContext(currentTx, context) == false) {
 			return currentTx;

File: mod/jodd-wot/src/jodd/proxetta/Proxetta.java
Patch:
@@ -203,7 +203,7 @@ public Class defineProxy(Class target, String proxyClassName) {
 		}
 		try {
 			if (classLoader == null) {
-				return ClassLoaderUtil.defineClass(pc.getProxyClassName(), pc.toByteArray());
+				return ClassLoaderUtil.defineClass(pc.getProxyClassName(), pc.toByteArray(), target.getClassLoader());
 			}
 			return ClassLoaderUtil.defineClass(pc.getProxyClassName(), pc.toByteArray(), classLoader);
 		} catch (Exception ex) {

File: mod/jodd-wot/src/jodd/proxetta/methref/MethrefProxetta.java
Patch:
@@ -14,6 +14,8 @@ public class MethrefProxetta {
 
 	protected final Proxetta proxetta;
 
+	public static final String METHREF_CLASSNAME_SUFFIX = "$Methref";
+
 	public MethrefProxetta() {
 		ProxyAspect aspectAll = new ProxyAspect(MethrefAdvice.class, new AllMethodsPointcut() {
 			@Override
@@ -33,7 +35,7 @@ public boolean apply(MethodInfo methodInfo) {
 				return super.apply(methodInfo);
 			}
 		});
-		proxetta = Proxetta.withAspects(aspectAll, aspectStr);
+		proxetta = Proxetta.withAspects(aspectAll, aspectStr).useClassNameSuffix(METHREF_CLASSNAME_SUFFIX);
 	}
 
 	/**

File: mod/jodd-wot/src/jodd/db/type/BigDecimalSqlType.java
Patch:
@@ -20,7 +20,7 @@ public BigDecimal get(ResultSet rs, int index, int dbSqlType) throws SQLExceptio
 	 * {@inheritDoc}
 	 */
 	@Override
-	public void set(PreparedStatement st, int index, BigDecimal value) throws SQLException {
+	public void set(PreparedStatement st, int index, BigDecimal value, int dbSqlType) throws SQLException {
 		st.setBigDecimal(index, value);
 	}
 

File: mod/jodd-wot/src/jodd/db/type/BigIntegerSqlType.java
Patch:
@@ -20,7 +20,7 @@ public BigInteger get(ResultSet rs, int index, int dbSqlType) throws SQLExceptio
 	 * {@inheritDoc}
 	 */
 	@Override
-	public void set(PreparedStatement st, int index, BigInteger value) throws SQLException {
+	public void set(PreparedStatement st, int index, BigInteger value, int dbSqlType) throws SQLException {
 		st.setLong(index, value.longValue());
 	}
 

File: mod/jodd-wot/src/jodd/db/type/BlobSqlType.java
Patch:
@@ -21,7 +21,7 @@ public Blob get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public void set(PreparedStatement st, int index, Blob value) throws SQLException {
+	public void set(PreparedStatement st, int index, Blob value, int dbSqlType) throws SQLException {
 		st.setBlob(index, value);
 	}
 

File: mod/jodd-wot/src/jodd/db/type/BooleanSqlType.java
Patch:
@@ -20,7 +20,7 @@ public Boolean get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public void set(PreparedStatement st, int index, Boolean value) throws SQLException {
+	public void set(PreparedStatement st, int index, Boolean value, int dbSqlType) throws SQLException {
 		st.setBoolean(index, value.booleanValue());
 	}
 

File: mod/jodd-wot/src/jodd/db/type/ByteArraySqlType.java
Patch:
@@ -19,7 +19,7 @@ public byte[] get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public void set(PreparedStatement st, int index, byte[] value) throws SQLException {
+	public void set(PreparedStatement st, int index, byte[] value, int dbSqlType) throws SQLException {
 		st.setBytes(index, value);
 	}
 

File: mod/jodd-wot/src/jodd/db/type/ByteSqlType.java
Patch:
@@ -20,7 +20,7 @@ public Byte get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public void set(PreparedStatement st, int index, Byte value) throws SQLException {
+	public void set(PreparedStatement st, int index, Byte value, int dbSqlType) throws SQLException {
 		st.setByte(index, value.byteValue());
 	}
 }

File: mod/jodd-wot/src/jodd/db/type/ClobSqlType.java
Patch:
@@ -21,7 +21,7 @@ public Clob get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public void set(PreparedStatement st, int index, Clob value) throws SQLException {
+	public void set(PreparedStatement st, int index, Clob value, int dbSqlType) throws SQLException {
 		st.setClob(index, value);
 	}
 

File: mod/jodd-wot/src/jodd/db/type/DateSqlType.java
Patch:
@@ -22,7 +22,7 @@ public Date get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public void set(PreparedStatement st, int index, Date value) throws SQLException {
+	public void set(PreparedStatement st, int index, Date value, int dbSqlType) throws SQLException {
 		st.setTimestamp(index, new Timestamp(value.getTime()));
 	}
 

File: mod/jodd-wot/src/jodd/db/type/DoubleSqlType.java
Patch:
@@ -20,7 +20,7 @@ public Double get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public void set(PreparedStatement st, int index, Double value) throws SQLException {
+	public void set(PreparedStatement st, int index, Double value, int dbSqlType) throws SQLException {
 		st.setDouble(index, value.doubleValue());
 	}
 }

File: mod/jodd-wot/src/jodd/db/type/FloatSqlType.java
Patch:
@@ -20,7 +20,7 @@ public Float get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public void set(PreparedStatement st, int index, Float value) throws SQLException {
+	public void set(PreparedStatement st, int index, Float value, int dbSqlType) throws SQLException {
 		st.setFloat(index, value.floatValue());
 	}
 

File: mod/jodd-wot/src/jodd/db/type/IntegerSqlType.java
Patch:
@@ -20,7 +20,7 @@ public Integer get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public void set(PreparedStatement st, int index, Integer value) throws SQLException {
+	public void set(PreparedStatement st, int index, Integer value, int dbSqlType) throws SQLException {
 		st.setInt(index, value.intValue());
 	}
 }

File: mod/jodd-wot/src/jodd/db/type/LongSqlType.java
Patch:
@@ -20,7 +20,7 @@ public Long get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public void set(PreparedStatement st, int index, Long value) throws SQLException {
+	public void set(PreparedStatement st, int index, Long value, int dbSqlType) throws SQLException {
 		st.setLong(index, value.longValue());
 	}
 

File: mod/jodd-wot/src/jodd/db/type/ShortSqlType.java
Patch:
@@ -20,7 +20,7 @@ public Short get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public void set(PreparedStatement st, int index, Short value) throws SQLException {
+	public void set(PreparedStatement st, int index, Short value, int dbSqlType) throws SQLException {
 		st.setShort(index, value.shortValue());
 	}
 

File: mod/jodd-wot/src/jodd/db/type/SqlArraySqlType.java
Patch:
@@ -21,7 +21,7 @@ public Array get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public void set(PreparedStatement st, int index, Array value) throws SQLException {
+	public void set(PreparedStatement st, int index, Array value, int dbSqlType) throws SQLException {
 		st.setArray(index, value);
 	}
 

File: mod/jodd-wot/src/jodd/db/type/SqlDateSqlType.java
Patch:
@@ -21,7 +21,7 @@ public Date get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public void set(PreparedStatement st, int index, Date value) throws SQLException {
+	public void set(PreparedStatement st, int index, Date value, int dbSqlType) throws SQLException {
 		st.setDate(index, value);
 	}
 

File: mod/jodd-wot/src/jodd/db/type/SqlRefSqlType.java
Patch:
@@ -21,7 +21,7 @@ public Ref get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public void set(PreparedStatement st, int index, Ref value) throws SQLException {
+	public void set(PreparedStatement st, int index, Ref value, int dbSqlType) throws SQLException {
 		st.setRef(index, value);
 	}
 }

File: mod/jodd-wot/src/jodd/db/type/SqlType.java
Patch:
@@ -23,7 +23,7 @@ protected SqlType() {
 	/**
 	 * Sets prepared statement value.
 	 */
-	public abstract void set(PreparedStatement st, int index, T value) throws SQLException;
+	public abstract void set(PreparedStatement st, int index, T value, int dbSqlType) throws SQLException;
 
 	/**
 	 * Returns value from result set.
@@ -37,9 +37,9 @@ protected SqlType() {
 	/**
 	 * Stores value in database. Value is casted to sql type.
 	 */
-	public void storeValue(PreparedStatement st, int index, Object value) throws SQLException {
+	public void storeValue(PreparedStatement st, int index, Object value, int dbSqlType) throws SQLException {
 		T t = ReflectUtil.castType(value, sqlType);
-		set(st, index, t);
+		set(st, index, t, dbSqlType);
 	}
 
 	/**

File: mod/jodd-wot/src/jodd/db/type/StringSqlType.java
Patch:
@@ -20,7 +20,7 @@ public String get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public void set(PreparedStatement st, int index, String value) throws SQLException {
+	public void set(PreparedStatement st, int index, String value, int dbSqlType) throws SQLException {
 		st.setString(index, value);
 	}
 

File: mod/jodd-wot/src/jodd/db/type/TimeSqlType.java
Patch:
@@ -21,7 +21,7 @@ public Time get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public void set(PreparedStatement st, int index, Time value) throws SQLException {
+	public void set(PreparedStatement st, int index, Time value, int dbSqlType) throws SQLException {
 		st.setTime(index, value);
 	}
 

File: mod/jodd-wot/src/jodd/db/type/TimestampSqlType.java
Patch:
@@ -21,7 +21,7 @@ public Timestamp get(ResultSet rs, int index, int dbSqlType) throws SQLException
 	 * {@inheritDoc}
 	 */
 	@Override
-	public void set(PreparedStatement st, int index, Timestamp value) throws SQLException {
+	public void set(PreparedStatement st, int index, Timestamp value, int dbSqlType) throws SQLException {
 		st.setTimestamp(index, value);
 	}
 

File: mod/jodd-wot/src/jodd/db/type/URLSqlType.java
Patch:
@@ -21,7 +21,7 @@ public URL get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public void set(PreparedStatement st, int index, URL value) throws SQLException {
+	public void set(PreparedStatement st, int index, URL value, int dbSqlType) throws SQLException {
 		st.setURL(index, value);
 	}
 

File: mod/jodd-wot/test/jodd/db/orm/test/BooSqlType.java
Patch:
@@ -11,7 +11,7 @@
 public class BooSqlType extends SqlType<Boo> {
 
 	@Override
-	public void set(PreparedStatement st, int index, Boo value) throws SQLException {
+	public void set(PreparedStatement st, int index, Boo value, int dbSqlType) throws SQLException {
 		st.setInt(index, value.value);
 	}
 

File: mod/jodd-wot/test/jodd/db/orm/test/FooWeigthSqlType.java
Patch:
@@ -11,7 +11,7 @@
 public class FooWeigthSqlType extends SqlType<FooWeight> {
 
 	@Override
-	public void set(PreparedStatement st, int index, FooWeight value) throws SQLException {
+	public void set(PreparedStatement st, int index, FooWeight value, int dbSqlType) throws SQLException {
 		st.setInt(index, value.getValue());
 	}
 

File: mod/jodd-wot/src/jodd/db/type/BigDecimalSqlType.java
Patch:
@@ -12,7 +12,7 @@ public class BigDecimalSqlType extends SqlType<BigDecimal> {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public BigDecimal get(ResultSet rs, int index) throws SQLException {
+	public BigDecimal get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 		return rs.getBigDecimal(index);
 	}
 

File: mod/jodd-wot/src/jodd/db/type/BigIntegerSqlType.java
Patch:
@@ -12,7 +12,7 @@ public class BigIntegerSqlType extends SqlType<BigInteger> {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public BigInteger get(ResultSet rs, int index) throws SQLException {
+	public BigInteger get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 		return BigInteger.valueOf(rs.getLong(index));
 	}
 

File: mod/jodd-wot/src/jodd/db/type/BlobSqlType.java
Patch:
@@ -13,7 +13,7 @@ public class BlobSqlType extends SqlType<Blob> {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public Blob get(ResultSet rs, int index) throws SQLException {
+	public Blob get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 		return rs.getBlob(index);
 	}
 

File: mod/jodd-wot/src/jodd/db/type/BooleanSqlType.java
Patch:
@@ -12,7 +12,7 @@ public class BooleanSqlType extends SqlType<Boolean> {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public Boolean get(ResultSet rs, int index) throws SQLException {
+	public Boolean get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 		return Boolean.valueOf(rs.getBoolean(index));
 	}
 

File: mod/jodd-wot/src/jodd/db/type/ByteArraySqlType.java
Patch:
@@ -11,7 +11,7 @@ public class ByteArraySqlType extends SqlType<byte[]> {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public byte[] get(ResultSet rs, int index) throws SQLException {
+	public byte[] get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 		return rs.getBytes(index);
 	}
 

File: mod/jodd-wot/src/jodd/db/type/ByteSqlType.java
Patch:
@@ -12,7 +12,7 @@ public class ByteSqlType extends SqlType<Byte> {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public Byte get(ResultSet rs, int index) throws SQLException {
+	public Byte get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 		return Byte.valueOf(rs.getByte(index));
 	}
 

File: mod/jodd-wot/src/jodd/db/type/ClobSqlType.java
Patch:
@@ -13,7 +13,7 @@ public class ClobSqlType extends SqlType<Clob> {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public Clob get(ResultSet rs, int index) throws SQLException {
+	public Clob get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 		return rs.getClob(index);
 	}
 

File: mod/jodd-wot/src/jodd/db/type/DateSqlType.java
Patch:
@@ -14,7 +14,7 @@ public class DateSqlType extends SqlType<Date> {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public Date get(ResultSet rs, int index) throws SQLException {
+	public Date get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 		return rs.getDate(index);
 	}
 

File: mod/jodd-wot/src/jodd/db/type/DoubleSqlType.java
Patch:
@@ -12,7 +12,7 @@ public class DoubleSqlType extends SqlType<Double> {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public Double get(ResultSet rs, int index) throws SQLException {
+	public Double get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 		return Double.valueOf(rs.getDouble(index));
 	}
 

File: mod/jodd-wot/src/jodd/db/type/FloatSqlType.java
Patch:
@@ -12,7 +12,7 @@ public class FloatSqlType extends SqlType<Float> {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public Float get(ResultSet rs, int index) throws SQLException {
+	public Float get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 		return Float.valueOf(rs.getFloat(index));
 	}
 

File: mod/jodd-wot/src/jodd/db/type/IntegerSqlType.java
Patch:
@@ -12,7 +12,7 @@ public class IntegerSqlType extends SqlType<Integer> {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public Integer get(ResultSet rs, int index) throws SQLException {
+	public Integer get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 		return Integer.valueOf(rs.getInt(index));
 	}
 

File: mod/jodd-wot/src/jodd/db/type/LongSqlType.java
Patch:
@@ -12,7 +12,7 @@ public class LongSqlType extends SqlType<Long> {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public Long get(ResultSet rs, int index) throws SQLException {
+	public Long get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 		return Long.valueOf(rs.getLong(index));
 	}
 

File: mod/jodd-wot/src/jodd/db/type/ShortSqlType.java
Patch:
@@ -12,7 +12,7 @@ public class ShortSqlType extends SqlType<Short> {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public Short get(ResultSet rs, int index) throws SQLException {
+	public Short get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 		return Short.valueOf(rs.getShort(index));
 	}
 

File: mod/jodd-wot/src/jodd/db/type/SqlArraySqlType.java
Patch:
@@ -13,7 +13,7 @@ public class SqlArraySqlType extends SqlType<Array> {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public Array get(ResultSet rs, int index) throws SQLException {
+	public Array get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 		return rs.getArray(index);
 	}
 

File: mod/jodd-wot/src/jodd/db/type/SqlDateSqlType.java
Patch:
@@ -13,7 +13,7 @@ public class SqlDateSqlType extends SqlType<Date>{
 	 * {@inheritDoc}
 	 */
 	@Override
-	public Date get(ResultSet rs, int index) throws SQLException {
+	public Date get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 		return rs.getDate(index);
 	}
 

File: mod/jodd-wot/src/jodd/db/type/SqlRefSqlType.java
Patch:
@@ -13,7 +13,7 @@ public class SqlRefSqlType extends SqlType<Ref> {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public Ref get(ResultSet rs, int index) throws SQLException {
+	public Ref get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 		return rs.getRef(index);
 	}
 

File: mod/jodd-wot/src/jodd/db/type/StringSqlType.java
Patch:
@@ -12,7 +12,7 @@ public class StringSqlType extends SqlType<String> {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public String get(ResultSet rs, int index) throws SQLException {
+	public String get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 		return rs.getString(index);
 	}
 

File: mod/jodd-wot/src/jodd/db/type/TimeSqlType.java
Patch:
@@ -13,7 +13,7 @@ public class TimeSqlType extends SqlType<Time> {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public Time get(ResultSet rs, int index) throws SQLException {
+	public Time get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 		return rs.getTime(index);
 	}
 

File: mod/jodd-wot/src/jodd/db/type/TimestampSqlType.java
Patch:
@@ -13,7 +13,7 @@ public class TimestampSqlType extends SqlType<Timestamp> {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public Timestamp get(ResultSet rs, int index) throws SQLException {
+	public Timestamp get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 		return rs.getTimestamp(index);
 	}
 

File: mod/jodd-wot/src/jodd/db/type/URLSqlType.java
Patch:
@@ -13,7 +13,7 @@ public class URLSqlType extends SqlType<URL> {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public URL get(ResultSet rs, int index) throws SQLException {
+	public URL get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 		return rs.getURL(index);
 	}
 

File: mod/jodd-wot/test/jodd/db/orm/test/BooSqlType.java
Patch:
@@ -16,7 +16,7 @@ public void set(PreparedStatement st, int index, Boo value) throws SQLException
 	}
 
 	@Override
-	public Boo get(ResultSet rs, int index) throws SQLException {
+	public Boo get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 		Boo boo = new Boo();
 		boo.value = rs.getInt(index);
 		return boo;

File: mod/jodd-wot/test/jodd/db/orm/test/Foo.java
Patch:
@@ -42,7 +42,7 @@ public class Foo {
 	@DbColumn
 	public Timestamp timestamp;
 
-	@DbColumn(sqlType = TimestampSqlType.class)
+	@DbColumn
 	public JDateTime timestamp2;
 
 	@DbColumn

File: mod/jodd-wot/test/jodd/db/orm/test/FooWeigthSqlType.java
Patch:
@@ -16,7 +16,7 @@ public void set(PreparedStatement st, int index, FooWeight value) throws SQLExce
 	}
 
 	@Override
-	public FooWeight get(ResultSet rs, int index) throws SQLException {
+	public FooWeight get(ResultSet rs, int index, int dbSqlType) throws SQLException {
 		return FooWeight.valueOf(rs.getInt(index));
 	}
 }

File: mod/jodd/src/jodd/servlet/HtmlFormUtil.java
Patch:
@@ -23,7 +23,7 @@ public class HtmlFormUtil {
 	private static final String ENDQUOTE	= "\" ";
 	private static final String SELECTED	= "selected";
 	private static final String NAME_QUOTE = "name=\"";
-	private static final String ID_QUOTE 	= "id=\"";
+	private static final String ENDQUOTE_ID_QUOTE 	= "\" id=\"";
 
 	// ---------------------------------------------------------------- checked
 
@@ -227,6 +227,6 @@ public static String name2id(String name) {
 	 * Build name and id at once. Usually used for forms.
 	 */
 	public static String nameAndId(String name) {
-		return NAME_QUOTE + name + ENDQUOTE + ID_QUOTE + QUOTE + name2id(name) + ENDQUOTE;
+		return NAME_QUOTE + name + ENDQUOTE_ID_QUOTE + name2id(name) + ENDQUOTE;
 	}
 }

File: mod/jodd/src/jodd/servlet/tag/FormTag.java
Patch:
@@ -2,6 +2,7 @@
 package jodd.servlet.tag;
 
 import jodd.servlet.HtmlEncoder;
+import jodd.servlet.HtmlFormUtil;
 import jodd.servlet.HtmlTag;
 import jodd.servlet.JspValueResolver;
 import jodd.util.StringUtil;
@@ -113,7 +114,7 @@ private void makeId(HtmlTag tag, String formId, String name) {
 		if (id != null) {
 			return;
 		}
-		tag.setAttribute(ID, formId + name);
+		tag.setAttribute(ID, formId + HtmlFormUtil.name2id(name));
 	}
 
 

File: mod/jodd-wot/test/jodd/madvoc/ActionMethodParserTest.java
Patch:
@@ -10,9 +10,6 @@
 import jodd.madvoc.test.BooAction;
 import jodd.madvoc.test2.Boo4Action;
 import jodd.madvoc.test2.Boo5Action;
-import jodd.madvoc.MadvocTestCase;
-import jodd.madvoc.WebApplication;
-import jodd.madvoc.ActionConfig;
 
 public class ActionMethodParserTest extends MadvocTestCase {
 

File: mod/jodd-wot/src/jodd/madvoc/component/ActionMethodParser.java
Patch:
@@ -18,7 +18,6 @@
  * Reads all annotations and builds action path (i.e. configuration).
  * <p>
  * Invoked only during registration, therefore performance is not most important.
- *
  * 
  * @see ActionPathMapper
  */

File: mod/jodd-wot/src/jodd/madvoc/component/MadvocController.java
Patch:
@@ -39,7 +39,7 @@ public class MadvocController {
 	protected InterceptorsManager interceptorsManager;
 
 	@PetiteInject
-	protected InjectorsManager injectorsManager;
+	protected ContextInjector contextInjector;
 
 	@PetiteInject
 	protected ResultsManager resultsManager;
@@ -156,7 +156,7 @@ public void render(ActionRequest req, Object resultObject) throws Exception {
 			throw new MadvocException("Unable to find action result type '" + resultType + "'.");
 		}
 		if (result.isInitialized() == false) {
-			injectorsManager.getContextInjector().inject(result, req.getHttpServletRequest(), req.getHttpServletResponse());
+			contextInjector.injectContext(result, req.getHttpServletRequest(), req.getHttpServletResponse());
 			result.initialized();
 			result.init();
 		}
@@ -195,7 +195,7 @@ protected void initializeActionConfig(ActionConfig cfg) {
 		cfg.interceptors = interceptorsManager.resolveAll(interceptorClasses);
 		for (ActionInterceptor interceptor : cfg.interceptors) {
 			if (interceptor.isInitialized() == false) {
-				injectorsManager.getContextInjector().inject(interceptor, applicationContext);
+				contextInjector.injectContext(interceptor, applicationContext);
 				interceptor.initialized();
 				interceptor.init();
 			}

File: mod/serverside/src/madvoc/CustomAction.java
Patch:
@@ -23,6 +23,7 @@ public String execute() {
 	}
 
 	/**
+	 * 
 	 * Action mapped to '/foo/boo.zoo/again.exec.html'
 	 * Result mapped to '/foo/boo.zoo/again.exec'.jsp
 	 */

File: mod/serverside/src/madvoc/Mapped.java
Patch:
@@ -12,7 +12,6 @@ public void fooTxt() {
 		System.out.println("Mapped.fooTxt");
 	}
 
-
 	public void view() {
 		System.out.println("Mapped.view");
 	}

File: mod/serverside/src/madvoc/MyInterceptorStack.java
Patch:
@@ -4,11 +4,10 @@
 
 import jodd.madvoc.interceptor.ActionInterceptorStack;
 import jodd.madvoc.interceptor.EchoInterceptor;
-import jodd.madvoc.interceptor.DefaultWebAppInterceptors;
 
 public class MyInterceptorStack extends ActionInterceptorStack {
 
 	public MyInterceptorStack() {
-		super(EchoInterceptor.class, DefaultWebAppInterceptors.class);
+		super(EchoInterceptor.class, MyServletConfigInterceptor.class);
 	}
 }

File: mod/serverside/src/madvoc/MyWebApplication.java
Patch:
@@ -27,7 +27,6 @@ public void registerMadvocComponents() {
 		super.registerMadvocComponents();
 		registerComponent(MyMadvocConfig.class);
 		registerComponent(MyRewriter.class);
-		registerComponent(MyInjectorsManager.class);
 	}
 
 	@Override

File: mod/serverside/src/madvoc/RawAction.java
Patch:
@@ -12,13 +12,13 @@ public class RawAction {
 
 	@Action
 	public RawResultData view() {
-		String result = "this is some direct result";
+		String result = "this is some raw direct result";
 		byte[] bytes = CharUtil.toAsciiArray(result.toCharArray());
 		return new RawResultData(bytes);
 	}
 
 	@Action
 	public String text() {
-		return "raw:some txt";
+		return "raw:some raw txt";
 	}
 }

File: mod/serverside/src/madvoc/SearchAction.java
Patch:
@@ -5,8 +5,10 @@
 import jodd.madvoc.meta.MadvocAction;
 import jodd.madvoc.meta.Action;
 import jodd.madvoc.meta.InOut;
+import jodd.madvoc.meta.InterceptedBy;
 
 @MadvocAction
+@InterceptedBy(MyInterceptorStack.class)
 public class SearchAction {
 
 	@InOut

File: mod/jodd/test/jodd/servlet/ServletUtilTest.java
Patch:
@@ -8,15 +8,15 @@ public class ServletUtilTest extends TestCase {
 
 	public void testPrepareParameters() {
 		String[] p = new String[] {"one", "", " three ", null, "five"};
-		p = ServletUtil.prepareParameters(p, true, false, false, false);
+		p = ServletUtil.prepareParameters(p, true, false, false);
 		assertEquals("three", p[2]);
 		assertNotNull(p[1]);
 		assertNull(p[3]);
-		p = ServletUtil.prepareParameters(p, true, true, false, false);
+		p = ServletUtil.prepareParameters(p, true, true, false);
 		assertNull(p[1]);
 		assertNull(p[3]);
 
-		p = ServletUtil.prepareParameters(new String[] {"", null, "   "}, true, true, true, false);
+		p = ServletUtil.prepareParameters(new String[] {"", null, "   "}, true, true, true);
 		assertNull(p);
 	}
 }

File: mod/jodd-wot/src/jodd/db/DbQuery.java
Patch:
@@ -965,9 +965,9 @@ public void setObject(String param, Object value, Class<? extends SqlType> sqlTy
 	 * Sets an array of objects parameters in given order.
 	 */
 	public void setObjects(Object... objects) {
-		int index = 0;
-		while (index < objects.length) {
-			setObject(index, objects[index++]);
+		int index = 1;
+		for (Object object : objects) {
+			setObject(index++, object);
 		}
 	}
 

File: mod/jodd/src/jodd/JoddDefault.java
Patch:
@@ -5,7 +5,7 @@
 import jodd.util.StringPool;
 
 /**
- * List of Jodd library defaults. They are used in more then one place (class, package).
+ * Jodd library global defaults. They are used in more then one place (class, package).
  */
 public class JoddDefault {
 

File: mod/jodd/test/jodd/util/AllTestsFast.java
Patch:
@@ -7,6 +7,7 @@
 import jodd.util.collection.IntHashMapTest;
 import jodd.util.collection.PrimitivearraysTest;
 import jodd.util.collection.CompositeIteratorTest;
+import jodd.util.collection.ArrayEnumerationTest;
 import jodd.util.ref.ReferenceCollectionsTest;
 
 /**
@@ -34,6 +35,7 @@ public AllTestsFast() {
 		addTestSuite(TextUtilTest.class);
 		addTestSuite(PropertiesUtilTest.class);
 		addTestSuite(Base64Test.class);
+		addTestSuite(ArrayEnumerationTest.class);
 	}
 
 	public static Test suite() {

File: mod/jodd/src/jodd/bean/BeanUtilUtil.java
Patch:
@@ -21,6 +21,7 @@ public class BeanUtilUtil {
 	 * Invokes <code>setXxx()</code> method with appropriate conversion if available.
 	 * It is assumed that all provided arguments are valid.
 	 */
+	@SuppressWarnings({"unchecked"})
 	protected static void invokeSetter(Object bean, Method m, Object value) {
 		try {
 			Class[] paramTypes = m.getParameterTypes();
@@ -46,6 +47,7 @@ protected static Object invokeGetter(Object bean, Method m) {
 	/**
 	 * Sets field value.
 	 */
+	@SuppressWarnings({"unchecked"})
 	protected static void setField(Object bean, Field f, Object value) {
 		try {
 			Class type = f.getType();
@@ -94,6 +96,7 @@ protected static Object arrayForcedGet(BeanProperty bp, Object array, int index)
 	 * Sets the array element forced. If index is greater then arrays length, array will be expanded to the index.
 	 * If speed is critical, it is better to allocate an array with proper size before using this method. 
 	 */
+	@SuppressWarnings({"unchecked"})
 	protected static void arrayForcedSet(BeanProperty bp, Object array, int index, Object value) {
 		Class componentType = array.getClass().getComponentType();
 		array = ensureArraySize(bp, array, componentType, index);

File: mod/jodd-wot/test/jodd/madvoc/ActionResultTest.java
Patch:
@@ -12,7 +12,7 @@ public class ActionResultTest extends MadvocTestCase {
 
 
 	public void testMethod() {
-		WebApplication webapp = new WebApplication();
+		WebApplication webapp = new WebApplication(true);
 		webapp.registerMadvocComponents();
 		ResultMapper resultMapper = webapp.getComponent(ResultMapper.class);
 		ActionMethodParser actionMethodParser = webapp.getComponent(ActionMethodParser.class);
@@ -108,7 +108,7 @@ public void testMethod() {
 
 
 	public void testAlias() {
-		WebApplication webapp = new WebApplication();
+		WebApplication webapp = new WebApplication(true);
 		webapp.registerMadvocComponents();
 
 		MadvocConfig config = webapp.getComponent(MadvocConfig.class);

File: mod/jodd-wot/test/jodd/madvoc/component/ActionPathMapperTest.java
Patch:
@@ -8,7 +8,7 @@
 public class ActionPathMapperTest extends MadvocTestCase {
 
 	public void testMapping() {
-		WebApplication webapp = new WebApplication();
+		WebApplication webapp = new WebApplication(true);
 		webapp.registerMadvocComponents();
 		ActionPathMapper mapper = webapp.getComponent(ActionPathMapper.class);
 

File: mod/jodd-wot/test/jodd/petite/ParamTest.java
Patch:
@@ -50,13 +50,13 @@ public void testRefParamsNoResolve() {
 		pc.getConfig().setResolveReferenceParameters(false);
 		pc.registerBean(Foo.class);
 
-		pc.defineParameter("foo.name", "$name");
-		pc.defineParameter("name", "$name2");
+		pc.defineParameter("foo.name", "${name}");
+		pc.defineParameter("name", "${name2}");
 		pc.defineParameter("name2", "FOONAME");
 
 		Foo foo = (Foo) pc.getBean("foo");
 		assertNotNull(foo);
-		assertEquals("$name", foo.getName());
+		assertEquals("${name}", foo.getName());
 	}
 
 	public void testProperties() {

File: mod/serverside/src/madvoc/MyWebApplication.java
Patch:
@@ -5,7 +5,6 @@
 import jodd.madvoc.component.ActionsManager;
 import jodd.madvoc.component.ResultsManager;
 import jodd.madvoc.config.MadvocConfigurator;
-import jodd.petite.PetiteContainer;
 import jodd.servlet.upload.impl.AdaptiveFileUploadFactory;
 
 import javax.servlet.ServletContext;
@@ -31,9 +30,9 @@ public void registerMadvocComponents() {
 	}
 
 	@Override
-	protected void init(MadvocConfig madvocConfig, ServletContext servletContext) {
+	protected void init(MadvocConfig madvocConfig, ServletContext context) {
 		System.out.println("MyWebApplication.init (" + madvocConfig.getClass().getSimpleName() + ')');
-		super.init(madvocConfig, servletContext);
+		super.init(madvocConfig, context);
 		((AdaptiveFileUploadFactory) madvocConfig.getFileUploadFactory()).setBreakOnError(true);
 	}
 

File: mod/jodd-wot/src/jodd/proxetta/pointcuts/AllGettersPointcut.java
Patch:
@@ -12,7 +12,7 @@ public class AllGettersPointcut extends ProxyPointcutSupport {
 	public boolean apply(MethodInfo methodInfo) {
 		return
 				isPublic(methodInfo)
-				&& isNonFinal(methodInfo)
+				&& isAcceptable(methodInfo)
 				&& hasReturnValue(methodInfo)
 				&& (matchMethodName(methodInfo, "get*") || (matchMethodName(methodInfo, "is*")))
 				&& hasNoArguments(methodInfo)

File: mod/jodd-wot/src/jodd/proxetta/pointcuts/AllMethodsPointcut.java
Patch:
@@ -10,6 +10,6 @@
 public class AllMethodsPointcut extends ProxyPointcutSupport {
 
 	public boolean apply(MethodInfo methodInfo) {
-		return isPublic(methodInfo) && isNonFinal(methodInfo);
+		return isPublic(methodInfo) && isAcceptable(methodInfo);
 	}
 }

File: mod/jodd-wot/src/jodd/proxetta/pointcuts/AllSettersPointcut.java
Patch:
@@ -12,7 +12,7 @@ public class AllSettersPointcut extends ProxyPointcutSupport {
 	public boolean apply(MethodInfo methodInfo) {
 		return
 				isPublic(methodInfo)
-				&& isNonFinal(methodInfo)
+				&& isAcceptable(methodInfo)
 				&& matchMethodName(methodInfo, "set*")
 				&& hasOneArgument(methodInfo)
 				;

File: mod/jodd-wot/test/jodd/proxetta/SubclassTest.java
Patch:
@@ -14,7 +14,7 @@ public class SubclassTest extends TestCase {
 	public void test1() {
 
 		ProxyAspect a1 = new ProxyAspect(FooProxyAdvice.class, new ProxyPointcut() {
-			public boolean apply(MethodInfo msign) {
+			public boolean apply(MethodInfo methodInfo) {
 				return true;
 			}
 		});
@@ -52,7 +52,7 @@ public boolean apply(MethodInfo msign) {
 
 	}
 
-	public void test2() {
+	public void testVariableClassNames() {
 		Foo foo = Proxetta.withAspects(new ProxyAspect(FooProxyAdvice.class, new AllMethodsPointcut()))
 				.variableClassName()
 				.createProxyInstance(Foo.class);

File: mod/jodd/test/jodd/TestJoddFast.java
Patch:
@@ -18,6 +18,7 @@ public static TestSuite suite() {
 		suite.addTest(jodd.format.AllTests.suite());
 		suite.addTest(jodd.servlet.AllTests.suite());
 		suite.addTest(jodd.util.AllTestsFast.suite());
+		suite.addTest(jodd.typeconverter.AllTests.suite());
 		return suite;
 	}
 }

File: mod/jodd-wot/src/jodd/proxetta/MethodInfo.java
Patch:
@@ -5,10 +5,10 @@
 import java.util.List;
 
 /**
- * Method signature provides various information about the method.
+ * Method info provides various information about the method.
  * Used in {@link jodd.proxetta.ProxyPointcut pointcut} definitions.
  */
-public interface MethodSignature {
+public interface MethodInfo {
 
 	// types
 	int TYPE_BYTE           = 'B';

File: mod/jodd-wot/src/jodd/proxetta/Proxetta.java
Patch:
@@ -88,7 +88,7 @@ public Proxetta constantClassName() {
 	 */
 	protected ProxettaCreator createProxettaCreator() {
 		ProxettaCreator pc = new ProxettaCreator(this.aspects);
-		pc.setVariableClassName(variableClassName);
+		pc.setUseVariableClassName(variableClassName);
 		return pc;
 	}
 

File: mod/jodd-wot/src/jodd/proxetta/ProxyPointcut.java
Patch:
@@ -12,6 +12,6 @@ public interface ProxyPointcut {
 	/**
 	 * Returns <code>true</code> if method signature should be wrapped with the proxy.
 	 */
-	boolean apply(MethodSignature msign);
+	boolean apply(MethodInfo msign);
 
 }
\ No newline at end of file

File: mod/jodd-wot/src/jodd/proxetta/asm/MethodSignatureVisitor.java
Patch:
@@ -6,7 +6,7 @@
 import org.objectweb.asm.Opcodes;
 import jodd.util.collection.IntArrayList;
 import jodd.mutable.MutableInteger;
-import jodd.proxetta.MethodSignature;
+import jodd.proxetta.MethodInfo;
 import jodd.proxetta.AnnotationData;
 import jodd.proxetta.ProxettaException;
 
@@ -19,7 +19,7 @@
  * MethodSignature = ( visitFormalTypeParameter visitClassBound? visitInterfaceBound* )* ( visitParameterType* visitReturnType visitExceptionType* )
  * </pre>
  */
-public class MethodSignatureVisitor extends TraceSignatureVisitor implements MethodSignature {
+public class MethodSignatureVisitor extends TraceSignatureVisitor implements MethodInfo {
 
 	protected int access;
 	protected String methodName;

File: mod/jodd-wot/src/jodd/proxetta/asm/TargetMethodData.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * Holds data for target method that should be wrapped.
  */
-class TargetMethodData {
+final class TargetMethodData {
 
 	final MethodSignatureVisitor msign;
 	final String methodName;

File: mod/jodd-wot/src/jodd/proxetta/pointcuts/AllGettersPointcut.java
Patch:
@@ -2,14 +2,14 @@
 
 package jodd.proxetta.pointcuts;
 
-import jodd.proxetta.MethodSignature;
+import jodd.proxetta.MethodInfo;
 
 /**
  * Pointcut on all public getters methods.
  */
 public class AllGettersPointcut extends ProxyPointcutSupport {
 
-	public boolean apply(MethodSignature msign) {
+	public boolean apply(MethodInfo msign) {
 		return
 				isPublic(msign)
 				&& hasReturnValue(msign)

File: mod/jodd-wot/src/jodd/proxetta/pointcuts/AllMethodsPointcut.java
Patch:
@@ -2,14 +2,14 @@
 
 package jodd.proxetta.pointcuts;
 
-import jodd.proxetta.MethodSignature;
+import jodd.proxetta.MethodInfo;
 
 /**
  * Pointcut on all <b>public</b> methods.
  */
 public class AllMethodsPointcut extends ProxyPointcutSupport {
 
-	public boolean apply(MethodSignature msign) {
+	public boolean apply(MethodInfo msign) {
 		return isPublic(msign);
 	}
 }

File: mod/jodd-wot/src/jodd/proxetta/pointcuts/AllSettersPointcut.java
Patch:
@@ -2,14 +2,14 @@
 
 package jodd.proxetta.pointcuts;
 
-import jodd.proxetta.MethodSignature;
+import jodd.proxetta.MethodInfo;
 
 /**
  * Pointcut on all public setters methods.
  */
 public class AllSettersPointcut extends ProxyPointcutSupport {
 
-	public boolean apply(MethodSignature msign) {
+	public boolean apply(MethodInfo msign) {
 		return
 				isPublic(msign)
 				&& matchMethodName(msign, "set*")

File: mod/jodd-wot/src/jodd/proxetta/pointcuts/MethodAnnotationPointcut.java
Patch:
@@ -2,7 +2,7 @@
 
 package jodd.proxetta.pointcuts;
 
-import jodd.proxetta.MethodSignature;
+import jodd.proxetta.MethodInfo;
 import jodd.proxetta.ProxettaException;
 
 /**
@@ -19,7 +19,7 @@ public MethodAnnotationPointcut(Class annotationClass) {
 		this.annotationName = annotationClass.getName();
 	}
 
-	public boolean apply(MethodSignature msign) {
+	public boolean apply(MethodInfo msign) {
 		return hasAnnotation(msign, annotationName);
 	}
 }

File: mod/jodd-wot/test/jodd/proxetta/SubclassTest.java
Patch:
@@ -14,7 +14,7 @@ public class SubclassTest extends TestCase {
 	public void test1() {
 
 		ProxyAspect a1 = new ProxyAspect(FooProxyAdvice.class, new ProxyPointcut() {
-			public boolean apply(MethodSignature msign) {
+			public boolean apply(MethodInfo msign) {
 				return true;
 			}
 		});

File: mod/samples/src/examples/proxetta/ProxettaExample.java
Patch:
@@ -3,7 +3,7 @@
 package examples.proxetta;
 
 import jodd.proxetta.ProxyPointcut;
-import jodd.proxetta.MethodSignature;
+import jodd.proxetta.MethodInfo;
 import jodd.proxetta.Proxetta;
 import jodd.proxetta.AnnotationData;
 import jodd.proxetta.ProxyAspect;
@@ -22,7 +22,7 @@
 public class ProxettaExample {
 
 	static ProxyAspect pd1 = new ProxyAspect(LogProxyAdvice.class, new ProxyPointcut() {
-		public boolean apply(MethodSignature msign) {
+		public boolean apply(MethodInfo msign) {
 			System.out.println("#test " + msign);
 			List<AnnotationData> anns = msign.getAnnotations();
 			for (AnnotationData a : anns) {
@@ -35,7 +35,7 @@ public boolean apply(MethodSignature msign) {
 	});
 
 	static ProxyAspect pd2 = new ProxyAspect(CustomProxyAdvice.class, new ProxyPointcut() { 
-		public boolean apply(MethodSignature msign) {
+		public boolean apply(MethodInfo msign) {
 			List<AnnotationData> anns = msign.getAnnotations();
 			for (AnnotationData a : anns) {
 				if (a.declaration.equals(Custom.class.getName())) {

File: mod/samples/src/examples/proxetta/n/proxy/TxPointcut.java
Patch:
@@ -2,7 +2,7 @@
 
 package examples.proxetta.n.proxy;
 
-import jodd.proxetta.MethodSignature;
+import jodd.proxetta.MethodInfo;
 import jodd.proxetta.AnnotationData;
 import jodd.proxetta.ProxyPointcut;
 
@@ -12,7 +12,7 @@
 
 public class TxPointcut implements ProxyPointcut {
 
-	public boolean apply(MethodSignature msign) {
+	public boolean apply(MethodInfo msign) {
 		List<AnnotationData> anns = msign.getAnnotations();
 		String txProxyName = TxAdvice.class.getName();
 		for (AnnotationData a : anns) {

File: mod/samples/src/examples/proxetta/petite/Petite.java
Patch:
@@ -7,7 +7,7 @@
 import jodd.petite.WiringMode;
 import jodd.petite.scope.Scope;
 import jodd.proxetta.ProxyPointcut;
-import jodd.proxetta.MethodSignature;
+import jodd.proxetta.MethodInfo;
 import jodd.proxetta.Proxetta;
 import jodd.proxetta.ProxyAspect;
 import examples.petite.Foo;
@@ -22,7 +22,7 @@ public static void main(String[] args) {
 	}
 
 	static ProxyAspect pd4log = new ProxyAspect(LogProxyAdvice.class, new ProxyPointcut() {
-		public boolean apply(MethodSignature msign) {
+		public boolean apply(MethodInfo msign) {
 			return true;
 		}
 	});

File: mod/jodd-wot/src/jodd/db/DbQuery.java
Patch:
@@ -828,6 +828,7 @@ public void setMap(Map parameters) {
 		if (parameters == null) {
 			return;
 		}
+		init();
 		Iterator it = query.iterateNamedParameters();
 		while (it.hasNext()) {
 			String paramName = (String) it.next();

File: mod/jodd-wot/src/jodd/db/DbDefault.java
Patch:
@@ -10,8 +10,6 @@
 @SuppressWarnings({"RedundantFieldInitialization"})
 public final class DbDefault {
 
-	public static int queryState = DbQuery.QUERY_CREATED;
-
 	public static boolean forcePreparedStatement = false;
 
 	public static DbSessionProvider sessionProvider = new ThreadDbSessionProvider();

File: mod/jodd-wot/src/jodd/db/DbQueryBase.java
Patch:
@@ -23,7 +23,7 @@ abstract class DbQueryBase {
 	public static final int QUERY_INITIALIZED = 2;
 	public static final int QUERY_CLOSED = 3;
 
-	protected int queryState = DbDefault.queryState;
+	protected int queryState = QUERY_CREATED;
 
 	/**
 	 * Returns query state.

File: mod/jodd-wot/src/jodd/madvoc/component/MadvocConfig.java
Patch:
@@ -7,6 +7,8 @@
 import jodd.madvoc.interceptor.ActionInterceptor;
 import jodd.madvoc.interceptor.ServletConfigInterceptor;
 import jodd.madvoc.result.ServletDispatcherResult;
+import jodd.util.StringPool;
+
 import java.util.Map;
 import java.util.HashMap;
 
@@ -19,7 +21,7 @@ public class MadvocConfig {
 
 	@SuppressWarnings({"unchecked"})
 	public MadvocConfig() {
-		encoding = "UTF-8";
+		encoding = StringPool.UTF_8;
 		fileUploadFactory = new AdaptiveFileUploadFactory();
 		defaultResultType = ServletDispatcherResult.NAME;
 		defaultInterceptors = new Class[] {ServletConfigInterceptor.class};

File: mod/jodd/src/jodd/util/SystemUtil.java
Patch:
@@ -154,6 +154,4 @@ public static void setHttpProxy(String host, String port) {
 		System.getProperties().put(HTTP_PROXY_PORT, port);
 	}
 
-
-
 }

File: mod/jodd/src/jodd/io/StringOutputStream.java
Patch:
@@ -3,7 +3,7 @@
 package jodd.io;
 
 import jodd.util.CharUtil;
-import jodd.util.StringPool;
+import jodd.JoddDefault;
 
 import java.io.OutputStream;
 import java.io.Serializable;
@@ -25,7 +25,7 @@ public class StringOutputStream extends OutputStream implements Serializable {
 	 * Creates new StringOutputStream, makes a new internal StringBuffer.
 	 */
 	public StringOutputStream() {
-		this(StringPool.UTF_8);
+		this(JoddDefault.encoding);
 	}
 	public StringOutputStream(String encoding) {
 		super();

File: mod/jodd/src/jodd/mail/Email.java
Patch:
@@ -2,7 +2,7 @@
 
 package jodd.mail;
 
-import jodd.util.StringPool;
+import jodd.JoddDefault;
 
 import java.util.ArrayList;
 import java.util.Date;
@@ -197,7 +197,7 @@ public Email subject(String subject) {
 
 	protected String text;
 	protected String message;
-	protected String encoding = StringPool.UTF_8;
+	protected String encoding = JoddDefault.encoding;
 
 	public String getEncoding() {
 		return encoding;

File: mod/jodd/src/jodd/servlet/filter/CharArrayResponseWrapper.java
Patch:
@@ -12,6 +12,7 @@
 import jodd.util.CharUtil;
 import jodd.util.StringPool;
 import jodd.io.FastCharArrayWriter;
+import jodd.JoddDefault;
 
 /**
  * A response wrapper that takes everything the client would normally output
@@ -33,7 +34,7 @@ public class CharArrayResponseWrapper extends HttpServletResponseWrapper {
 	 * accumulate the response.
 	 */
 	public CharArrayResponseWrapper(HttpServletResponse response) {
-		this(response, StringPool.UTF_8);
+		this(response, JoddDefault.encoding);
 	}
 
 	public CharArrayResponseWrapper(HttpServletResponse response, String encoding) {

File: mod/jodd/test/jodd/io/FileUtilTest.java
Patch:
@@ -137,7 +137,7 @@ public void testFileManipulations() {
 
 		// don't overwrite
 		try {
-			FileUtil.copyFileToDir(root + "a.txt", tmp, FileUtil.newSettings().overwrite(false));
+			FileUtil.copyFileToDir(root + "a.txt", tmp, FileUtil.params().overwrite(false));
 			fail("copy file don't overwrite");
 		} catch (IOException e) {
 			// ignore
@@ -152,7 +152,7 @@ public void testFileManipulations() {
 		}
 
 		try {
-			FileUtil.moveFileToDir(root + "w.png", tmp, FileUtil.cloneSettings().overwrite(false));
+			FileUtil.moveFileToDir(root + "w.png", tmp, FileUtil.cloneParams().overwrite(false));
 			fail("move file don't overwrite");
 		} catch (IOException e) {
 			// ignore

File: mod/jodd/src/jodd/typeconverter/TypeConverterManager.java
Patch:
@@ -17,6 +17,7 @@
 import java.sql.Date;
 import java.sql.Time;
 import java.sql.Timestamp;
+import java.net.URL;
 
 /**
  * Provides dynamic object conversion to a type.
@@ -91,6 +92,8 @@ public static void registerDefaults() {
 
 		register(FileUpload.class, new FileUploadConverter());
 		register(JDateTime.class, new JDateTimeConverter());
+		register(Class.class, new ClassConverter());
+		register(URL.class, new URLConverter());
 	}
 
 	/**

