File: unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/JniFunction.java
Patch:
@@ -116,7 +116,7 @@ public int callStaticIntMethodV(BaseVM vm, DvmClass dvmClass, String signature,
         if (fallbackJni == null) {
             throw new UnsupportedOperationException(signature);
         } else {
-            return callStaticIntMethodV(vm, dvmClass, signature, vaList);
+            return fallbackJni.callStaticIntMethodV(vm, dvmClass, signature, vaList);
         }
     }
 

File: unidbg-ios/src/main/java/com/github/unidbg/ios/FixupChains.java
Patch:
@@ -144,7 +144,7 @@ static void handleChain(Emulator<?> emulator, MachOModule mm, List<HookListener>
                     if (pointer_format == DYLD_CHAINED_PTR_64) {
                         chain.setLong(0, unpackedTarget + mm.slide);
                     } else {
-                        chain.setLong(0, UnidbgPointer.nativeValue(chain) + unpackedTarget);
+                        chain.setLong(0, unpackedTarget + mm.machHeader);
                     }
                 }
                 break;

File: unidbg-ios/src/main/java/com/github/unidbg/ios/MachOLoader.java
Patch:
@@ -1150,7 +1150,7 @@ private void walkChain(MachOModule mm, Pointer chain, final int pointer_format,
         boolean chainEnd = false;
         while (!chainEnd) {
             long raw64 = chain.getLong(0);
-            log.trace("handleChain: {}, raw64=0x{}", chain, Long.toHexString(raw64));
+            log.trace("handleChain: {}, pointer_format={}, raw64=0x{}", chain, pointer_format, Long.toHexString(raw64));
             FixupChains.handleChain(emulator, mm, hookListeners, pointer_format, chain, raw64, bindTargets, symbolsPool);
             switch (pointer_format) {
                 case FixupChains.DYLD_CHAINED_PTR_ARM64E: {

File: unidbg-ios/src/main/java/com/github/unidbg/ios/DarwinSyscallHandler.java
Patch:
@@ -859,11 +859,11 @@ protected String getKernelOsType() {
     }
 
     protected String getKernelOsRelease() {
-        return "7.1.2";
+        return "14.0.0";
     }
 
     protected String getKernelVersion() {
-        return "Darwin Kernel Version 14.0.0: Sun Mar 29 19:47:37 PDT 2015; root:xnu-2784.20.34~2/RELEASE_ARM64_S5L8960X";
+        return String.format("%s Kernel Version %s: Sun Mar 29 19:47:37 PDT 2015; root:xnu-2784.20.34~2/RELEASE_ARM64_S5L8960X", getKernelOsType(), getKernelOsRelease());
     }
 
     protected String getBuildVersion() {

File: unidbg-android/src/main/java/com/github/unidbg/linux/ARM32SyscallHandler.java
Patch:
@@ -947,7 +947,7 @@ private int bionic_clone(Emulator<?> emulator) {
         }
         if (threadDispatcherEnabled) {
             if (verbose) {
-                System.out.printf("bionic_clone fn=%s, L$=%s%n", fn, context.getLRPointer());
+                System.out.printf("bionic_clone fn=%s, LR=%s%n", fn, context.getLRPointer());
             }
             emulator.getThreadDispatcher().addThread(new MarshmallowThread(emulator, fn, arg, ctid, threadId));
         }

File: unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/BaseVM.java
Patch:
@@ -118,8 +118,8 @@ public final DvmClass resolveClass(String className, DvmClass... interfaceClasse
                 dvmClass = this.createClass(this, className, superClass, interfaceClasses);
             }
             classMap.put(hash, dvmClass);
-            addGlobalObject(dvmClass);
         }
+        addGlobalObject(dvmClass);
         return dvmClass;
     }
 

File: unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/DalvikVM.java
Patch:
@@ -2934,7 +2934,7 @@ public long handle(Emulator<?> emulator) {
                     log.debug("GetStringChars string=" + string + ", isCopy=" + isCopy + ", value=" + value + ", lr=" + context.getLRPointer());
                 }
                 if (verbose) {
-                    System.out.printf("JNIEnv->GetStringUTFChars(\"%s\") was called from %s%n", string, context.getLRPointer());
+                    System.out.printf("JNIEnv->GetStringUTFChars(\"%s\") was called from %s%n", value, context.getLRPointer());
                 }
                 byte[] data = Arrays.copyOf(bytes, bytes.length + 1);
                 UnidbgPointer pointer = string.allocateMemoryBlock(emulator, data.length);

File: unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/jni/ProxyUtils.java
Patch:
@@ -80,6 +80,9 @@ private static Object unpack(DvmObject<?> dvmObject) {
             return null;
         }
         Object obj = dvmObject.getValue();
+        if (obj == null) {
+            throw new UnsupportedOperationException("dvmObject=" + dvmObject);
+        }
         if (obj instanceof DvmObject) {
             return unpack((DvmObject<?>) obj);
         } else {

File: unidbg-android/src/main/java/com/github/unidbg/linux/ARM32SyscallHandler.java
Patch:
@@ -947,7 +947,7 @@ private int bionic_clone(Emulator<?> emulator) {
         }
         if (threadDispatcherEnabled) {
             if (verbose) {
-                System.out.printf("bionic_clone fn=%s%n", fn);
+                System.out.printf("bionic_clone fn=%s, L$=%s%n", fn, context.getLRPointer());
             }
             emulator.getThreadDispatcher().addThread(new MarshmallowThread(emulator, fn, arg, ctid, threadId));
         }

File: unidbg-android/src/main/java/com/github/unidbg/linux/ARM64SyscallHandler.java
Patch:
@@ -636,7 +636,7 @@ private int bionic_clone(Emulator<?> emulator) {
         int threadId = incrementThreadId(emulator);
         if (threadDispatcherEnabled) {
             if (verbose) {
-                System.out.printf("bionic_clone fn=%s%n", fn);
+                System.out.printf("bionic_clone fn=%s, LR=%s%n", fn, context.getLRPointer());
             }
             emulator.getThreadDispatcher().addThread(new MarshmallowThread(emulator, fn, arg, ctid, threadId));
         }

File: unidbg-android/src/main/java/com/github/unidbg/linux/android/AndroidARM64Unwinder.java
Patch:
@@ -4,7 +4,6 @@
 import com.github.unidbg.linux.LinuxModule;
 import com.github.unidbg.unwind.Frame;
 import com.github.unidbg.unwind.SimpleARM64Unwinder;
-import net.fornwall.jelf.ArmExIdx;
 import net.fornwall.jelf.DwarfCursor;
 import net.fornwall.jelf.DwarfCursor64;
 import net.fornwall.jelf.GnuEhFrameHeader;

File: unidbg-android/src/main/java/com/github/unidbg/linux/thread/MarshmallowThread.java
Patch:
@@ -44,7 +44,7 @@ public boolean setErrno(Emulator<?> emulator, int errno) {
 
     @Override
     public String toThreadString() {
-        return "MarshmallowThread fn=" + fn + ", arg=" + thread;
+        return String.format("MarshmallowThread tid=%d, fn=%s, arg=%s", id, fn, thread);
     }
 
     @Override

File: unidbg-api/src/main/java/com/github/unidbg/thread/AbstractTask.java
Patch:
@@ -10,7 +10,7 @@
 
 abstract class AbstractTask extends BaseTask implements Task {
 
-    private final int id;
+    protected final int id;
 
     public AbstractTask(int id) {
         this.id = id;

File: unidbg-api/src/main/java/com/github/unidbg/arm/AbstractARMDebugger.java
Patch:
@@ -452,7 +452,7 @@ private Collection<Pointer> searchMemory(Backend backend, long start, long end,
     private PrintStream traceWriteRedirectStream;
 
     final boolean handleCommon(Backend backend, String line, long address, int size, long nextAddress, DebugRunnable<?> runnable) throws Exception {
-        if ("exit".equals(line) || "quit".equals(line)) { // continue
+        if ("exit".equals(line) || "quit".equals(line) || "q".equals(line)) { // continue
             return true;
         }
         if ("gc".equals(line)) {

File: unidbg-api/src/main/java/com/github/unidbg/unix/UnixSyscallHandler.java
Patch:
@@ -115,8 +115,6 @@ protected final FileResult<T> resolve(Emulator<T> emulator, String pathname, int
         if (result != null && result.isSuccess()) {
             emulator.getMemory().setErrno(0);
             return result;
-        } else {
-            failResult = result;
         }
 
         Family family = emulator.getFamily();

File: unidbg-ios/src/main/java/com/github/unidbg/ios/MachO.java
Patch:
@@ -55,7 +55,7 @@ public interface MachO {
     int REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB = 0x80;
 
     int BIND_IMMEDIATE_MASK = 0x0f;
-    int BIND_OPCODE_MASK = 0xf0;
+    byte BIND_OPCODE_MASK = (byte) 0xf0;
     int BIND_OPCODE_DONE = 0x00;
     int BIND_OPCODE_SET_DYLIB_ORDINAL_IMM = 0x10;
     int BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB = 0x20;

File: unidbg-ios/src/main/java/com/github/unidbg/ios/MachOModule.java
Patch:
@@ -930,7 +930,7 @@ private long doBindFastLazySymbol(Emulator<?> emulator, ByteBuffer buffer, int l
     }
 
     private long bindAt(Emulator<?> emulator, int libraryOrdinal, int type, long address, String symbolName) {
-        libraryOrdinal = (byte) libraryOrdinal;
+//        libraryOrdinal = (byte) libraryOrdinal;
         Pointer pointer = UnidbgPointer.pointer(emulator, address);
         if (pointer == null) {
             throw new IllegalStateException();

File: unidbg-android/src/main/java/com/github/unidbg/linux/ARM32SyscallHandler.java
Patch:
@@ -1818,6 +1818,9 @@ private int mmap2(Backend backend, Emulator<?> emulator) {
             String msg = "mmap2 start=0x" + Long.toHexString(start) + ", length=" + length + ", prot=0x" + Integer.toHexString(prot) + ", flags=0x" + Integer.toHexString(flags) + ", fd=" + fd + ", offset=" + offset + ", from=" + UnidbgPointer.register(emulator, ArmConst.UC_ARM_REG_LR);
             if (warning) {
                 log.warn(msg);
+                if (log.isDebugEnabled()) {
+                    emulator.attach().debug();
+                }
             } else {
                 log.debug(msg);
             }

File: unidbg-android/src/main/java/com/github/unidbg/linux/file/DriverFileIO.java
Patch:
@@ -131,7 +131,8 @@ private int androidAlarm(long dir, long c, AndroidAlarmType type, long size, lon
 
     @Override
     public int fstat(Emulator<?> emulator, com.github.unidbg.file.linux.StatStructure stat) {
-//        throw new UnsupportedOperationException(path);
+        stat.st_blksize = emulator.getPageAlign();
+        stat.pack();
         return 0;
     }
 

File: unidbg-android/src/main/java/com/github/unidbg/linux/android/AndroidARM64Unwinder.java
Patch:
@@ -32,7 +32,8 @@ protected Frame unw_step(Emulator<?> emulator, Frame frame) {
             MemoizedObject<GnuEhFrameHeader> ehFrameHeader = module == null ? null : module.ehFrameHeader;
             if (ehFrameHeader != null) {
                 long fun = this.context.ip - module.base;
-                Frame ret = ehFrameHeader.getValue().dwarf_step(emulator, this, module, fun, context);
+                GnuEhFrameHeader frameHeader = ehFrameHeader.getValue();
+                Frame ret = frameHeader == null ? null : frameHeader.dwarf_step(emulator, this, module, fun, context);
                 if (ret != null) {
                     return ret;
                 }

File: unidbg-android/src/main/java/com/github/unidbg/linux/android/AndroidARMUnwinder.java
Patch:
@@ -32,7 +32,8 @@ protected Frame unw_step(Emulator<?> emulator, Frame frame) {
             MemoizedObject<GnuEhFrameHeader> ehFrameHeader = module == null ? null : module.ehFrameHeader;
             if (ehFrameHeader != null) {
                 long fun = this.context.ip - module.base;
-                Frame ret = ehFrameHeader.getValue().dwarf_step(emulator, this, module, fun, context);
+                GnuEhFrameHeader frameHeader = ehFrameHeader.getValue();
+                Frame ret = frameHeader == null ? null : frameHeader.dwarf_step(emulator, this, module, fun, context);
                 if (ret != null) {
                     return ret;
                 }

File: unidbg-android/src/main/java/net/fornwall/jelf/ElfSegment.java
Patch:
@@ -158,6 +158,9 @@ protected ElfDynamicStructure computeValue() throws ElfException, IOException {
 			ehFrameHeader = new MemoizedObject<GnuEhFrameHeader>() {
 				@Override
 				protected GnuEhFrameHeader computeValue() throws ElfException, IOException {
+					if (mem_size <= 0 || virtual_address <= 0) {
+						return null;
+					}
 					return new GnuEhFrameHeader(parser, elfFile.virtualMemoryAddrToFileOffset(virtual_address), (int) mem_size, virtual_address);
 				}
 			};

File: unidbg-api/src/main/java/com/github/unidbg/arm/AbstractARMEmulator.java
Patch:
@@ -214,7 +214,7 @@ public Instruction[] printAssemble(PrintStream out, long address, int size, int
             needUpdateCache = true;
         }
         if (needUpdateCache) {
-            insns = disassemble(address, currentCode, false, 0);
+            insns = disassemble(address, size,  0);
             disassembleCache.put(address, insns);
         }
         printAssemble(out, insns, address, ARM.isThumb(backend), maxLengthLibraryName, visitor);

File: unidbg-android/src/main/java/com/github/unidbg/linux/android/ArmLD.java
Patch:
@@ -123,7 +123,7 @@ public long handle(Emulator<?> emulator) {
 
                                 for (LinuxModule module : list) {
                                     dl_phdr_info32 info = new dl_phdr_info32(ptr);
-                                    UnidbgPointer dlpi_addr = UnidbgPointer.pointer(emulator, module.base);
+                                    UnidbgPointer dlpi_addr = UnidbgPointer.pointer(emulator, module.virtualBase);
                                     assert dlpi_addr != null;
                                     info.dlpi_addr = (int) dlpi_addr.toUIntPeer();
                                     ElfDynamicStructure dynamicStructure = module.dynamicStructure;

File: unidbg-android/src/main/java/com/github/unidbg/linux/android/ArmLD64.java
Patch:
@@ -136,7 +136,7 @@ public long handle(Emulator<?> emulator) {
 
                                 for (LinuxModule module : list) {
                                     dl_phdr_info64 info = new dl_phdr_info64(ptr);
-                                    UnidbgPointer dlpi_addr = UnidbgPointer.pointer(emulator, module.base);
+                                    UnidbgPointer dlpi_addr = UnidbgPointer.pointer(emulator, module.virtualBase);
                                     assert dlpi_addr != null;
                                     info.dlpi_addr = dlpi_addr.peer;
                                     ElfDynamicStructure dynamicStructure = module.dynamicStructure;

File: unidbg-api/src/main/java/com/github/unidbg/Module.java
Patch:
@@ -11,6 +11,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 
@@ -42,7 +43,7 @@ public long getBaseHeader() {
     }
 
     public final List<MemRegion> getRegions() {
-        return regions;
+        return Collections.unmodifiableList(regions);
     }
 
     public abstract Number callFunction(Emulator<?> emulator, long offset, Object... args);

File: unidbg-api/src/main/java/com/github/unidbg/arm/ARMSvcMemory.java
Patch:
@@ -80,7 +80,7 @@ public UnidbgPointer allocate(int size, final String label) {
         if (log.isDebugEnabled()) {
             log.debug("allocate size=" + size + ", label=" + label + ", base=" + base);
         }
-        memRegions.add(new MemRegion(pointer.peer, pointer.peer + size, UnicornConst.UC_PROT_READ | UnicornConst.UC_PROT_EXEC, null, 0) {
+        memRegions.add(new MemRegion(pointer.peer, pointer.peer, pointer.peer + size, UnicornConst.UC_PROT_READ | UnicornConst.UC_PROT_EXEC, null, 0) {
             @Override
             public String getName() {
                 return label;

File: unidbg-android/src/main/java/com/github/unidbg/linux/file/LocalAndroidUdpSocket.java
Patch:
@@ -52,7 +52,9 @@ public void handle(byte[] request) {
                         int tid = buffer.getShort() & 0xffff;
                         int tv_sec = buffer.getInt();
                         int tv_nsec = buffer.getInt();
-                        log.debug("handle id=" + id + ", tid=" + tid + ", tv_sec=" + tv_sec + ", tv_nsec=" + tv_nsec);
+                        if (log.isDebugEnabled()) {
+                            log.debug("handle id=" + id + ", tid=" + tid + ", tv_sec=" + tv_sec + ", tv_nsec=" + tv_nsec);
+                        }
 
                         String type;
                         switch (id) {

File: unidbg-android/src/main/java/net/fornwall/jelf/ElfSegment.java
Patch:
@@ -158,7 +158,7 @@ protected ElfDynamicStructure computeValue() throws ElfException, IOException {
 			ehFrameHeader = new MemoizedObject<GnuEhFrameHeader>() {
 				@Override
 				protected GnuEhFrameHeader computeValue() throws ElfException, IOException {
-					return new GnuEhFrameHeader(parser, elfFile.virtualMemoryAddrToFileOffset(virtual_address), (int) mem_size);
+					return new GnuEhFrameHeader(parser, elfFile.virtualMemoryAddrToFileOffset(virtual_address), (int) mem_size, virtual_address);
 				}
 			};
 			break;

File: unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/AbstractJni.java
Patch:
@@ -615,9 +615,9 @@ public boolean callBooleanMethodV(BaseVM vm, DvmObject<?> dvmObject, String sign
                     return ((Iterator<?>) iterator).hasNext();
                 }
             case "java/lang/String->startsWith(Ljava/lang/String;)Z":{
-                StringObject stringObject = (StringObject) dvmObject.getValue();
+                String str = (String) dvmObject.getValue();
                 StringObject prefix = vaList.getObjectArg(0);
-                return stringObject.value.startsWith(prefix.value);
+                return str.startsWith(prefix.value);
             }
         }
 

File: unidbg-api/src/main/java/com/github/unidbg/hook/HookListener.java
Patch:
@@ -6,6 +6,7 @@ public interface HookListener {
 
     int EACH_BIND = -1;
     int WEAK_BIND = -2;
+    int FIXUP_BIND = -3;
 
     /**
      * 返回0表示没有hook，否则返回hook以后的调用地址

File: unidbg-api/src/main/java/com/github/unidbg/spi/AbstractLoader.java
Patch:
@@ -24,10 +24,10 @@
 
 import java.io.DataOutput;
 import java.io.File;
-import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -336,7 +336,7 @@ protected final void notifyModuleLoaded(Module module) {
     }
 
     protected final void dump(Pointer pointer, long size, File outFile) throws IOException {
-        try (OutputStream outputStream = new FileOutputStream(outFile)) {
+        try (OutputStream outputStream = Files.newOutputStream(outFile.toPath())) {
             int dump = 0;
             while (dump < size) {
                 long read = size - dump;

File: unidbg-ios/src/main/java/com/github/unidbg/ios/MachO.java
Patch:
@@ -98,5 +98,8 @@ public interface MachO {
     byte BIND_SPECIAL_DYLIB_SELF = 0;
     byte BIND_SPECIAL_DYLIB_MAIN_EXECUTABLE = -1;
     byte BIND_SPECIAL_DYLIB_FLAT_LOOKUP = -2;
+    byte BIND_SPECIAL_DYLIB_WEAK_LOOKUP = -3;
+
+    int MH_WEAK_DEFINES = 0x8000; /* the final linked image contains external weak symbols */
 
 }

File: unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/ArmVarArg64.java
Patch:
@@ -35,8 +35,7 @@ class ArmVarArg64 extends ArmVarArg {
                 }
                 case 'J': {
                     UnidbgPointer ptr = getArg(offset++);
-                    assert ptr != null;
-                    args.add(ptr.toUIntPeer());
+                    args.add(ptr == null ? 0L : ptr.peer);
                     break;
                 }
                 default:

File: unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/apk/ApkFile.java
Patch:
@@ -3,6 +3,7 @@
 import net.dongliu.apk.parser.bean.ApkMeta;
 import net.dongliu.apk.parser.bean.ApkSigner;
 import net.dongliu.apk.parser.bean.CertificateMeta;
+import net.dongliu.apk.parser.exception.ParserException;
 
 import java.io.File;
 import java.io.IOException;
@@ -95,6 +96,8 @@ public String getPackageName() {
         try (net.dongliu.apk.parser.ApkFile apkFile = new net.dongliu.apk.parser.ApkFile(this.apkFile)) {
             apkMeta = apkFile.getApkMeta();
             return apkMeta.getPackageName();
+        } catch (ParserException e) { // Manifest file not found
+            return null;
         } catch (IOException e) {
             throw new IllegalStateException(e);
         }

File: unidbg-api/src/main/java/com/github/unidbg/arm/AbstractARMDebugger.java
Patch:
@@ -817,7 +817,7 @@ final boolean handleCommon(Backend backend, String line, long address, int size,
         if (line.startsWith("p")) {
             long originalAddress = address;
             String assembly = line.substring(1).trim();
-            boolean isThumb = (address & 1) != 0;
+            boolean isThumb = ARM.isThumb(backend);
             try (Keystone keystone = createKeystone(isThumb)) {
                 KeystoneEncoded encoded = keystone.assemble(assembly);
                 byte[] code = encoded.getMachineCode();

File: unidbg-android/src/test/java/com/github/unidbg/android/Signal64Test.java
Patch:
@@ -72,7 +72,7 @@ private void test() {
         long start = System.currentTimeMillis();
         boolean ret = emulator.emulateSignal(29);
         int code = module.callEntry(emulator);
-        System.err.println("exit code: " + code + ", ret=" + ret + ", backend=" + emulator.getBackend() + ", offset=" + (System.currentTimeMillis() - start) + "ms");
+        System.out.println("exit code: " + code + ", ret=" + ret + ", backend=" + emulator.getBackend() + ", offset=" + (System.currentTimeMillis() - start) + "ms");
     }
 
 }

File: unidbg-android/src/test/java/com/github/unidbg/android/SignalTest.java
Patch:
@@ -72,7 +72,7 @@ private void test() {
         long start = System.currentTimeMillis();
         boolean ret = emulator.emulateSignal(17);
         int code = module.callEntry(emulator);
-        System.err.println("exit code: " + code + ", ret=" + ret + ", backend=" + emulator.getBackend() + ", offset=" + (System.currentTimeMillis() - start) + "ms");
+        System.out.println("exit code: " + code + ", ret=" + ret + ", backend=" + emulator.getBackend() + ", offset=" + (System.currentTimeMillis() - start) + "ms");
     }
 
 }

File: unidbg-api/src/main/java/com/github/unidbg/arm/FunctionCall.java
Patch:
@@ -24,4 +24,5 @@ public String toReadableString(Emulator<?> emulator) {
                 ", returnAddress=" + UnidbgPointer.pointer(emulator, returnAddress) +
                 '}';
     }
+
 }

File: backend/dynarmic/src/main/java/com/github/unidbg/arm/backend/dynarmic/EventMemHookNotifier.java
Patch:
@@ -18,13 +18,13 @@ public EventMemHookNotifier(EventMemHook callback, int type, Object user_data) {
 
     public void handleMemoryReadFailed(Backend backend, long vaddr, int size) {
         if ((type & UnicornConst.UC_HOOK_MEM_READ_UNMAPPED) != 0) {
-            callback.hook(backend, vaddr, size, 0, user_data);
+            callback.hook(backend, vaddr, size, 0, user_data, EventMemHook.UnmappedType.Read);
         }
     }
 
     public void handleMemoryWriteFailed(Backend backend, long vaddr, int size) {
         if ((type & UnicornConst.UC_HOOK_MEM_WRITE_UNMAPPED) != 0) {
-            callback.hook(backend, vaddr, size, 0, user_data);
+            callback.hook(backend, vaddr, size, 0, user_data, EventMemHook.UnmappedType.Write);
         }
     }
 }

File: unidbg-api/src/main/java/com/github/unidbg/arm/AbstractARM64Emulator.java
Patch:
@@ -60,8 +60,8 @@ public AbstractARM64Emulator(String processName, File rootDir, Family family, Co
 
         backend.hook_add_new(new EventMemHook() {
             @Override
-            public boolean hook(Backend backend, long address, int size, long value, Object user) {
-                log.warn("memory failed: address=0x" + Long.toHexString(address) + ", size=" + size + ", value=0x" + Long.toHexString(value));
+            public boolean hook(Backend backend, long address, int size, long value, Object user, UnmappedType unmappedType) {
+                log.warn(unmappedType + " memory failed: address=0x" + Long.toHexString(address) + ", size=" + size + ", value=0x" + Long.toHexString(value));
                 if (LogFactory.getLog(AbstractEmulator.class).isDebugEnabled()) {
                     attach().debug();
                 }

File: unidbg-api/src/main/java/com/github/unidbg/arm/AbstractARMEmulator.java
Patch:
@@ -60,9 +60,9 @@ public AbstractARMEmulator(String processName, File rootDir, Family family, Coll
 
         backend.hook_add_new(new EventMemHook() {
             @Override
-            public boolean hook(Backend backend, long address, int size, long value, Object user) {
+            public boolean hook(Backend backend, long address, int size, long value, Object user, UnmappedType unmappedType) {
                 RegisterContext context = getContext();
-                log.warn("memory failed: address=0x" + Long.toHexString(address) + ", size=" + size + ", value=0x" + Long.toHexString(value) + ", PC=" + context.getPCPointer() + ", LR=" + context.getLRPointer());
+                log.warn(unmappedType + " memory failed: address=0x" + Long.toHexString(address) + ", size=" + size + ", value=0x" + Long.toHexString(value) + ", PC=" + context.getPCPointer() + ", LR=" + context.getLRPointer());
                 if (LogFactory.getLog(AbstractEmulator.class).isDebugEnabled()) {
                     attach().debug();
                 }

File: unidbg-ios/src/main/java/com/github/unidbg/ios/thread/BsdThread.java
Patch:
@@ -59,7 +59,7 @@ protected Number runThread(AbstractEmulator<?> emulator) {
 
             backend.reg_write(Arm64Const.UC_ARM64_REG_SP, stack.peer);
 
-            backend.reg_write(ArmConst.UC_ARM_REG_LR, until);
+            backend.reg_write(Arm64Const.UC_ARM64_REG_LR, until);
         }
 
         return emulator.emulate(_pthread_start.getAddress(), until);

File: unidbg-api/src/main/java/com/github/unidbg/thread/RunnableTask.java
Patch:
@@ -18,4 +18,6 @@ public interface RunnableTask {
 
     Waiter getWaiter();
 
+    void setResult(Emulator<?> emulator, Number ret);
+
 }

File: unidbg-api/src/main/java/com/github/unidbg/thread/UniThreadDispatcher.java
Patch:
@@ -141,6 +141,7 @@ private Number run(long timeout, TimeUnit unit) {
                                         log.debug("End run signalTask=" + signalTask + ", ret=" + ret);
                                     }
                                     if (ret != null) {
+                                        signalTask.setResult(emulator, ret);
                                         signalTask.destroy(emulator);
                                         task.removeSignalTask(signalTask);
                                     } else {
@@ -158,6 +159,7 @@ private Number run(long timeout, TimeUnit unit) {
                             log.debug("End dispatch task=" + task + ", ret=" + ret);
                         }
                         if (ret != null) {
+                            task.setResult(emulator, ret);
                             task.destroy(emulator);
                             iterator.remove();
                             if(task.isMainThread()) {

File: unidbg-api/src/main/java/com/github/unidbg/AbstractEmulator.java
Patch:
@@ -108,7 +108,7 @@ public AbstractEmulator(boolean is64Bit, String processName, long svcBase, int s
 
         String name = ManagementFactory.getRuntimeMXBean().getName();
         String pid = name.split("@")[0];
-        this.pid = Integer.parseInt(pid);
+        this.pid = Integer.parseInt(pid) & 0x7fff;
 
         setContextEmulator(this);
         this.svcMemory = new ARMSvcMemory(svcBase, svcSize, this);

File: unidbg-android/src/main/java/com/github/unidbg/linux/ARM64SyscallHandler.java
Patch:
@@ -88,7 +88,7 @@ public void hook(Backend backend, int intno, int swi, Object user) {
         Throwable exception = null;
         try {
             if (swi == 0 && NR == 0 && backend.reg_read(Arm64Const.UC_ARM64_REG_X16).intValue() == Svc.POST_CALLBACK_SYSCALL_NUMBER) { // postCallback
-                int number = backend.reg_read(Arm64Const.UC_ARM64_REG_X4).intValue();
+                int number = backend.reg_read(Arm64Const.UC_ARM64_REG_X12).intValue();
                 Svc svc = svcMemory.getSvc(number);
                 if (svc != null) {
                     svc.handlePostCallback(emulator);
@@ -98,7 +98,7 @@ public void hook(Backend backend, int intno, int swi, Object user) {
                 throw new IllegalStateException("svc number: " + swi);
             }
             if (swi == 0 && NR == 0 && backend.reg_read(Arm64Const.UC_ARM64_REG_X16).intValue() == Svc.PRE_CALLBACK_SYSCALL_NUMBER) { // preCallback
-                int number = backend.reg_read(Arm64Const.UC_ARM64_REG_X4).intValue();
+                int number = backend.reg_read(Arm64Const.UC_ARM64_REG_X12).intValue();
                 Svc svc = svcMemory.getSvc(number);
                 if (svc != null) {
                     svc.handlePreCallback(emulator);

File: unidbg-api/src/main/java/com/github/unidbg/hook/BaseHook.java
Patch:
@@ -35,6 +35,7 @@ protected HookStatus hook(Emulator<?> emulator) {
             }
             @Override
             public void handlePostCallback(Emulator<?> emulator) {
+                super.handlePostCallback(emulator);
                 EditableArm64RegisterContext registerContext = emulator.getContext();
                 callback.postCall(emulator, new Arm64HookContext(context, registerContext));
             }
@@ -46,6 +47,7 @@ protected HookStatus hook(Emulator<?> emulator) {
             }
             @Override
             public void handlePostCallback(Emulator<?> emulator) {
+                super.handlePostCallback(emulator);
                 EditableArm32RegisterContext registerContext = emulator.getContext();
                 callback.postCall(emulator, new Arm32HookContext(context, registerContext));
             }

File: unidbg-ios/src/main/java/com/github/unidbg/ios/ARM64SyscallHandler.java
Patch:
@@ -152,7 +152,7 @@ public void hook(Backend backend, int intno, int swi, Object user) {
         Throwable exception = null;
         try {
             if (swi == 0 && NR == Svc.POST_CALLBACK_SYSCALL_NUMBER && backend.reg_read(Arm64Const.UC_ARM64_REG_X8).intValue() == 0) { // postCallback
-                int number = backend.reg_read(Arm64Const.UC_ARM64_REG_X4).intValue();
+                int number = backend.reg_read(Arm64Const.UC_ARM64_REG_X12).intValue();
                 Svc svc = svcMemory.getSvc(number);
                 if (svc != null) {
                     svc.handlePostCallback(emulator);
@@ -162,7 +162,7 @@ public void hook(Backend backend, int intno, int swi, Object user) {
                 throw new IllegalStateException("svc number: " + swi);
             }
             if (swi == 0 && NR == Svc.PRE_CALLBACK_SYSCALL_NUMBER && backend.reg_read(Arm64Const.UC_ARM64_REG_X8).intValue() == 0) { // preCallback
-                int number = backend.reg_read(Arm64Const.UC_ARM64_REG_X4).intValue();
+                int number = backend.reg_read(Arm64Const.UC_ARM64_REG_X12).intValue();
                 Svc svc = svcMemory.getSvc(number);
                 if (svc != null) {
                     svc.handlePreCallback(emulator);

File: unidbg-ios/src/main/java/com/github/unidbg/ios/objc/NSData.java
Patch:
@@ -7,7 +7,7 @@
 public class NSData {
 
     public static NSData create(ObjcObject object) {
-        return new NSData(object);
+        return object == null ? null : new NSData(object);
     }
 
     private final ObjcObject object;
@@ -17,7 +17,7 @@ private NSData(ObjcObject object) {
     }
 
     public byte[] getBytes() {
-        UnidbgPointer pointer = (UnidbgPointer) object.call("length");
+        UnidbgPointer pointer = object.call("length");
         int length = (int) (pointer.peer & 0x7fffffff);
         Pointer bytes = getBytesPointer();
         return bytes.getByteArray(0, length);

File: unidbg-ios/src/main/java/com/github/unidbg/ios/struct/objc/ObjcObject.java
Patch:
@@ -79,7 +79,7 @@ public String getDescription() {
         if (str == null) {
             return "<description not available>";
         } else {
-            UnidbgPointer pointer = (UnidbgPointer) str.call("lengthOfBytesUsingEncoding:", NSUTF8StringEncoding);
+            UnidbgPointer pointer = str.call("lengthOfBytesUsingEncoding:", NSUTF8StringEncoding);
             int length = (int) (pointer.peer & 0x7fffffffL);
             byte[] bytes = str.call("UTF8String").getByteArray(0, length);
             return new String(bytes, StandardCharsets.UTF_8);

File: unidbg-api/src/main/java/com/github/unidbg/arm/SimpleARM64Debugger.java
Patch:
@@ -303,6 +303,7 @@ final void showHelp(long address) {
         System.out.println("d(0x): show disassemble at specify address");
         System.out.println("stop: stop emulation");
         System.out.println("run [arg]: run test");
+        System.out.println("gc: Run System.gc()");
 
         if (emulator.getFamily() == Family.iOS && !emulator.isRunning()) {
             System.out.println("dump [class name]: dump objc class");

File: unidbg-api/src/main/java/com/github/unidbg/arm/SimpleARMDebugger.java
Patch:
@@ -304,6 +304,7 @@ final void showHelp(long address) {
         System.out.println("d(0x): show disassemble at specify address");
         System.out.println("stop: stop emulation");
         System.out.println("run [arg]: run test");
+        System.out.println("gc: Run System.gc()");
 
         if (emulator.getFamily() == Family.iOS && !emulator.isRunning()) {
             System.out.println("dump [class name]: dump objc class");

File: unidbg-ios/src/main/java/com/github/unidbg/ios/DarwinSyscall.java
Patch:
@@ -48,6 +48,7 @@ public interface DarwinSyscall {
     int HW_MODEL =	 2;		/* string: specific machine model */
     int HW_NCPU = 3; /* int: number of cpus */
     int HW_PAGESIZE = 7; /* int: software page size */
+    int HW_CPU_FREQ =	15; /* int: CPU Frequency */
     int HW_MEMSIZE =	24;		/* uint64_t: physical ram size */
     int HW_CPU_TYPE = 105;
     int HW_CPU_SUBTYPE = 106;

File: unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/BaseVM.java
Patch:
@@ -162,7 +162,7 @@ public final <T extends DvmObject<?>> T getObject(int hash) {
         } else {
             ref = globalObjectMap.get(hash);
         }
-        return (T) ref.obj;
+        return ref == null ? null : (T) ref.obj;
     }
 
     @Override

File: unidbg-android/src/test/java/com/bytedance/frameworks/core/encrypt/TTEncrypt.java
Patch:
@@ -48,7 +48,7 @@ public class TTEncrypt {
         final Memory memory = emulator.getMemory(); // 模拟器的内存操作接口
         memory.setLibraryResolver(new AndroidResolver(23)); // 设置系统类库解析
 
-        vm = emulator.createDalvikVM(null); // 创建Android虚拟机
+        vm = emulator.createDalvikVM(); // 创建Android虚拟机
         vm.setVerbose(logging); // 设置是否打印Jni调用细节
         DalvikModule dm = vm.loadLibrary(new File("unidbg-android/src/test/resources/example_binaries/libttEncrypt.so"), false); // 加载libttEncrypt.so到unicorn虚拟内存，加载成功以后会默认调用init_array等函数
         dm.callJNI_OnLoad(emulator); // 手动执行JNI_OnLoad函数

File: unidbg-android/src/test/java/com/github/unidbg/android/Android64Test.java
Patch:
@@ -66,7 +66,7 @@ protected UnixSyscallHandler<AndroidFileIO> createSyscallHandler(SvcMemory svcMe
 //        emulator.traceCode();
         module = emulator.loadLibrary(executable);
 
-        VM vm = emulator.createDalvikVM(null);
+        VM vm = emulator.createDalvikVM();
         vm.setVerbose(true);
         vm.setJni(this);
         DalvikModule dm = vm.loadLibrary(new File("unidbg-android/src/test/native/android/libs/arm64-v8a/libnative.so"), false);

File: unidbg-android/src/test/java/com/github/unidbg/android/AndroidTest.java
Patch:
@@ -63,7 +63,7 @@ protected UnixSyscallHandler<AndroidFileIO> createSyscallHandler(SvcMemory svcMe
 
         module = emulator.loadLibrary(executable, true);
 
-        VM vm = emulator.createDalvikVM(null);
+        VM vm = emulator.createDalvikVM();
         vm.setVerbose(true);
         vm.setJni(this);
         DalvikModule dm = vm.loadLibrary(new File("unidbg-android/src/test/native/android/libs/armeabi-v7a/libnative.so"), true);

File: unidbg-android/src/test/java/com/github/unidbg/android/QDReaderJni.java
Patch:
@@ -56,7 +56,7 @@ private QDReaderJni() {
         memory.setLibraryResolver(createLibraryResolver());
         memory.addModuleListener(this);
 
-        vm = emulator.createDalvikVM(null);
+        vm = emulator.createDalvikVM();
         vm.setDvmClassFactory(new ProxyClassFactory());
         vm.setVerbose(true);
         DalvikModule dm = vm.loadLibrary(new File("unidbg-android/src/test/resources/example_binaries/armeabi-v7a/libd-lib.so"), false);

File: unidbg-android/src/test/java/com/kanxue/test2/MainActivity.java
Patch:
@@ -37,7 +37,7 @@ private MainActivity() {
         LibraryResolver resolver = new AndroidResolver(23);
         memory.setLibraryResolver(resolver);
 
-        vm = emulator.createDalvikVM(null);
+        vm = emulator.createDalvikVM();
         vm.setVerbose(false);
         DalvikModule dm = vm.loadLibrary(new File("unidbg-android/src/test/resources/example_binaries/armeabi-v7a/libnative-lib.so"), false);
         dm.callJNI_OnLoad(emulator);

File: unidbg-android/src/test/java/com/sun/jna/JniDispatch32.java
Patch:
@@ -56,7 +56,7 @@ private JniDispatch32() {
         final Memory memory = emulator.getMemory();
         memory.setLibraryResolver(createLibraryResolver());
 
-        VM vm = emulator.createDalvikVM(null);
+        VM vm = emulator.createDalvikVM();
         vm.setDvmClassFactory(new ProxyClassFactory());
         vm.setVerbose(true);
         DalvikModule dm = vm.loadLibrary(new File("unidbg-android/src/test/resources/example_binaries/armeabi-v7a/libjnidispatch.so"), false);

File: unidbg-android/src/test/java/com/sun/jna/JniDispatch64.java
Patch:
@@ -56,7 +56,7 @@ private JniDispatch64() {
         final Memory memory = emulator.getMemory();
         memory.setLibraryResolver(createLibraryResolver());
 
-        VM vm = emulator.createDalvikVM(null);
+        VM vm = emulator.createDalvikVM();
         vm.setDvmClassFactory(new ProxyClassFactory());
         vm.setVerbose(true);
         DalvikModule dm = vm.loadLibrary(new File("unidbg-android/src/test/resources/example_binaries/arm64-v8a/libjnidispatch.so"), false);

File: unidbg-android/src/test/java/org/telegram/messenger/Utilities32.java
Patch:
@@ -46,7 +46,7 @@ public Utilities32() {
         final Memory memory = emulator.getMemory();
         memory.setLibraryResolver(createLibraryResolver());
 
-        vm = emulator.createDalvikVM(null);
+        vm = emulator.createDalvikVM();
         vm.setDvmClassFactory(new ProxyClassFactory());
         Module module = new JniGraphics(emulator, vm).register(memory);
         assert module != null;

File: unidbg-android/src/test/java/org/telegram/messenger/Utilities64.java
Patch:
@@ -48,7 +48,7 @@ public Utilities64() {
         final Memory memory = emulator.getMemory();
         memory.setLibraryResolver(createLibraryResolver());
 
-        vm = emulator.createDalvikVM(null);
+        vm = emulator.createDalvikVM();
         vm.setDvmClassFactory(new ProxyClassFactory());
         Module module = new JniGraphics(emulator, vm).register(memory);
         assert module != null;

File: unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/DalvikVM.java
Patch:
@@ -196,7 +196,7 @@ public long handle(Emulator<?> emulator) {
                 if (log.isDebugEnabled()) {
                     log.debug("DeleteLocalRef object=" + object);
                 }
-                DvmObject<?> obj = localObjectMap.remove(object.toIntPeer());
+                DvmObject<?> obj = object == null ? null : localObjectMap.remove(object.toIntPeer());
                 if (obj != null) {
                     obj.onDeleteRef();
                 }

File: unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/DalvikVM64.java
Patch:
@@ -196,7 +196,7 @@ public long handle(Emulator<?> emulator) {
                 if (log.isDebugEnabled()) {
                     log.debug("DeleteLocalRef object=" + object);
                 }
-                DvmObject<?> obj = localObjectMap.remove(object.toIntPeer());
+                DvmObject<?> obj = object == null ? null : localObjectMap.remove(object.toIntPeer());
                 if (obj != null) {
                     obj.onDeleteRef();
                 }

File: unidbg-android/src/main/java/com/github/unidbg/linux/AndroidSyscallHandler.java
Patch:
@@ -26,6 +26,9 @@ abstract class AndroidSyscallHandler extends UnixSyscallHandler<AndroidFileIO> i
 
     private static final Log log = LogFactory.getLog(AndroidSyscallHandler.class);
 
+    static final int MREMAP_MAYMOVE = 1;
+    static final int MREMAP_FIXED = 2;
+
     private byte[] sched_cpu_mask;
 
     final long sched_setaffinity(Emulator<AndroidFileIO> emulator) {

File: unidbg-api/src/main/java/com/github/unidbg/memory/MemoryMap.java
Patch:
@@ -28,7 +28,7 @@ public void serialize(DataOutput out) throws IOException {
     public String toString() {
         return "MemoryMap{" +
                 "base=0x" + Long.toHexString(base) +
-                ", size=" + size +
+                ", size=0x" + Long.toHexString(size) +
                 ", prot=" + prot +
                 '}';
     }

File: unidbg-ios/src/main/java/com/github/unidbg/ios/ARM32SyscallHandler.java
Patch:
@@ -1262,11 +1262,11 @@ private int munmap(Emulator<?> emulator) {
         long timeInMillis = System.currentTimeMillis();
         long start = backend.reg_read(ArmConst.UC_ARM_REG_R0).intValue() & 0xffffffffL;
         int length = backend.reg_read(ArmConst.UC_ARM_REG_R1).intValue();
-        int ret = emulator.getMemory().munmap(start, length);
+        emulator.getMemory().munmap(start, length);
         if (log.isDebugEnabled()) {
-            log.debug("munmap start=0x" + Long.toHexString(start) + ", length=" + length + ", ret=" + ret + ", offset=" + (System.currentTimeMillis() - timeInMillis));
+            log.debug("munmap start=0x" + Long.toHexString(start) + ", length=" + length + ", offset=" + (System.currentTimeMillis() - timeInMillis));
         }
-        return ret;
+        return 0;
     }
 
     private int sysctl(Emulator<?> emulator) {

File: unidbg-ios/src/main/java/com/github/unidbg/ios/ARM64SyscallHandler.java
Patch:
@@ -1331,11 +1331,11 @@ private int munmap(Emulator<?> emulator) {
         long timeInMillis = System.currentTimeMillis();
         long start = context.getLongArg(0);
         int length = context.getIntArg(1);
-        int ret = emulator.getMemory().munmap(start, length);
+        emulator.getMemory().munmap(start, length);
         if (log.isDebugEnabled()) {
-            log.debug("munmap start=0x" + Long.toHexString(start) + ", length=" + length + ", ret=" + ret + ", offset=" + (System.currentTimeMillis() - timeInMillis));
+            log.debug("munmap start=0x" + Long.toHexString(start) + ", length=" + length + ", offset=" + (System.currentTimeMillis() - timeInMillis));
         }
-        return ret;
+        return 0;
     }
 
     private int sysctl(Emulator<?> emulator, int offset) {

File: unidbg-ios/src/main/java/com/github/unidbg/ios/MachOModule.java
Patch:
@@ -560,8 +560,7 @@ public Symbol findClosestSymbolByAddress(long addr, boolean fast) {
         if (!fast && objectiveCProcessor != null) {
             if (executable) {
                 long entry = machHeader + entryPoint;
-                if (symbol == null ||
-                        (addr >= entry && entry > symbol.getAddress())) {
+                if (addr >= entry && (symbol == null || entry > symbol.getAddress())) {
                     symbol = new ExportSymbol("start", entry, this, 0, com.github.unidbg.ios.MachO.EXPORT_SYMBOL_FLAGS_KIND_ABSOLUTE);
                 }
             }

File: unidbg-android/src/main/java/com/github/unidbg/linux/LinuxModule.java
Patch:
@@ -141,6 +141,9 @@ public ElfSymbol getELFSymbolByName(String name) throws IOException {
     @Override
     public Symbol findNearestSymbolByAddress(long addr) {
         try {
+            if (dynsym == null) {
+                return null;
+            }
             ElfSymbol elfSymbol = dynsym.getELFSymbolByAddr(addr - base);
             if (elfSymbol != null && !elfSymbol.isUndef()) {
                 return new LinuxSymbol(this, elfSymbol);

File: unidbg-api/src/main/java/com/github/unidbg/unwind/Unwinder.java
Patch:
@@ -62,7 +62,9 @@ private void showFrame(String maxLengthSoName, Memory memory, UnidbgPointer ip)
         } else {
             sb.append(String.format(getBaseFormat(), 0));
             sb.append(String.format("[%" + maxLengthSoName.length() + "s]", "0x" + Long.toHexString(ip.peer)));
-            sb.append(String.format("[0x%0" + Long.toHexString(memory.getMaxSizeOfLibrary()).length() + "x]", ip.peer - 0xfffe0000L));
+            if (ip.peer >= 0xfffe0000L) {
+                sb.append(String.format("[0x%0" + Long.toHexString(memory.getMaxSizeOfLibrary()).length() + "x]", ip.peer - 0xfffe0000L));
+            }
         }
         System.out.println(sb);
     }

File: unidbg-api/src/main/java/com/github/unidbg/arm/AbstractARMDebugger.java
Patch:
@@ -771,7 +771,7 @@ final boolean handleCommon(Backend backend, String line, long address, int size,
                     sb.append("    \"").append("pop {r7, pc}").append("\\n").append('"');
                 } else {
                     if (lastRegWrite != null && !"x0".equals(lastRegWrite) && !"w0".equals(lastRegWrite)) {
-                        sb.append("    \"").append("mov x0, ").append(lastRegWrite).append("\\n").append('"').append('\n');
+                        sb.append("    \"").append("mov ").append(lastRegWrite.startsWith("x") ? "x0" : "w0").append(", ").append(lastRegWrite).append("\\n").append('"').append('\n');
                     }
                     sb.append("    \"").append("ldp x29, x30, [sp]").append("\\n").append('"').append('\n');
                     sb.append("    \"").append("add sp, sp, #0x10").append("\\n").append('"').append('\n');
@@ -782,7 +782,7 @@ final boolean handleCommon(Backend backend, String line, long address, int size,
                     System.err.println(template.replace("$(REPLACE_ASM)", sb.toString()));
                 }
             } else {
-                System.err.println("Usage: cc (size)");
+                System.err.println("Usage: cc (size bytes)");
             }
             return false;
         }

File: unidbg-api/src/main/java/com/github/unidbg/arm/AbstractARMDebugger.java
Patch:
@@ -45,6 +45,7 @@
 import java.math.BigInteger;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
+import java.nio.charset.StandardCharsets;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -55,7 +56,6 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.concurrent.Callable;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -324,15 +324,15 @@ final void dumpMemory(Pointer pointer, int _length, String label, StringType str
                 }
 
                 if (foundTerminated) {
-                    Inspector.inspect(baos.toByteArray(), baos.size() >= 1024 ? (label + ", hex=" + Hex.encodeHexString(baos.toByteArray())) : label);
+                    Inspector.inspect(baos.toByteArray(), baos.size() >= 1024 ? (label + ", hex=" + Hex.encodeHexString(baos.toByteArray())) : (label + ", str=" + new String(baos.toByteArray(), StandardCharsets.UTF_8)));
                 } else {
                     Inspector.inspect(pointer.getByteArray(0, _length), label + ", find NULL-terminated failed");
                 }
             } else if (stringType == StringType.std_string) {
                 StdString string = StdString.createStdString(emulator, pointer);
                 long size = string.getDataSize();
                 byte[] data = string.getData();
-                Inspector.inspect(data, size >= 1024 ? (label + ", hex=" + Hex.encodeHexString(data)) : label);
+                Inspector.inspect(data, size >= 1024 ? (label + ", hex=" + Hex.encodeHexString(data) + ", std=" + new String(data, StandardCharsets.UTF_8)) : label);
             } else {
                 throw new UnsupportedOperationException("stringType=" + stringType);
             }

File: unidbg-android/src/main/java/com/github/unidbg/linux/ARM32SyscallHandler.java
Patch:
@@ -456,7 +456,7 @@ public void hook(Backend backend, int intno, int swi, Object user) {
     private int mlock(Emulator<?> emulator) {
         RegisterContext context = emulator.getContext();
         Pointer addr = context.getPointerArg(0);
-        int len = context.getInt(1);
+        int len = context.getIntArg(1);
         if (log.isDebugEnabled()) {
             log.debug("mlock addr=" + addr + ", len=" + len);
         }

File: unidbg-api/src/main/java/com/github/unidbg/debugger/AbstractDebugServer.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Scanner;
-import java.util.concurrent.Callable;
 import java.util.concurrent.Semaphore;
 
 public abstract class AbstractDebugServer extends AbstractARMDebugger implements DebugServer {
@@ -233,7 +232,7 @@ protected final void sendData(byte[] data) {
     private Semaphore semaphore;
 
     @Override
-    protected final void loop(Emulator<?> emulator, long address, int size, Callable<?> callable) throws Exception {
+    protected final void loop(Emulator<?> emulator, long address, int size, DebugRunnable<?> runnable) throws Exception {
         if (address <= 0) {
             return;
         }
@@ -245,7 +244,7 @@ protected final void loop(Emulator<?> emulator, long address, int size, Callable
     }
 
     @Override
-    public <T> T run(Callable<T> callable) {
+    public <T> T run(DebugRunnable<T> runnable) {
         throw new UnsupportedOperationException();
     }
 

File: unidbg-api/src/main/java/com/github/unidbg/debugger/Debugger.java
Patch:
@@ -24,7 +24,7 @@ public interface Debugger extends Breaker, DebugHook, BlockHook, Closeable {
     @SuppressWarnings("unused")
     void setDebugListener(DebugListener listener);
 
-    <T> T run(Callable<T> callable) throws Exception;
+    <T> T run(DebugRunnable<T> runnable) throws Exception;
 
     boolean isDebugging();
 

File: unidbg-ios/src/test/java/com/github/unidbg/ios/IpaLoaderTest.java
Patch:
@@ -5,6 +5,7 @@
 import com.github.unidbg.Symbol;
 import com.github.unidbg.arm.backend.DynarmicFactory;
 import com.github.unidbg.arm.backend.HypervisorFactory;
+import com.github.unidbg.debugger.DebugRunnable;
 import com.github.unidbg.file.ios.DarwinFileIO;
 import com.github.unidbg.ios.classdump.ClassDumper;
 import com.github.unidbg.ios.classdump.IClassDumper;
@@ -16,7 +17,6 @@
 import com.sun.jna.Pointer;
 
 import java.io.File;
-import java.util.concurrent.Callable;
 
 public class IpaLoaderTest implements EmulatorConfigurator {
 
@@ -34,9 +34,9 @@ public void testLoader() throws Exception {
         System.err.println("load offset=" + (System.currentTimeMillis() - start) + "ms");
         loader.callEntry();
         final Module module = loader.getExecutable();
-        emulator.attach().run(new Callable<Void>() {
+        emulator.attach().run(new DebugRunnable<Void>() {
             @Override
-            public Void call() throws Exception {
+            public Void runWithArgs(String[] args) throws Exception {
                 long start = System.currentTimeMillis();
                 final IClassDumper classDumper = ClassDumper.getInstance(emulator);
                 String objcClass = classDumper.dumpClass("AppDelegate");

File: unidbg-api/src/main/java/com/github/unidbg/arm/AbstractARMDebugger.java
Patch:
@@ -611,6 +611,7 @@ final boolean handleCommon(Backend backend, String line, long address, int size,
                                 throw new IllegalStateException("createNewFile: " + outFile);
                             }
                             traceHookRedirectStream = new PrintStream(new FileOutputStream(outFile), true);
+                            traceHookRedirectStream.printf("[%s]Start trace %s", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()), module == null ? "all" : module);
                             traceHook.setRedirect(traceHookRedirectStream);
                             traceFile = outFile;
                         } catch (IOException e) {
@@ -621,7 +622,6 @@ final boolean handleCommon(Backend backend, String line, long address, int size,
                 }
                 begin = module == null ? 1 : module.base;
                 end = module == null ? 0 : (module.base + module.size);
-                traceHookRedirectStream.printf("[%s]Start trace %s", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()), module == null ? "all" : module);
                 System.out.println("Set trace " + (module == null ? "all" : module) + " instructions success" + (traceFile == null ? "." : (" with trace file: " + traceFile)));
             }
             traceHook.initialize(begin, end, null);

File: unidbg-api/src/main/java/com/github/unidbg/AbstractEmulator.java
Patch:
@@ -6,6 +6,7 @@
 import com.github.unidbg.arm.backend.BackendException;
 import com.github.unidbg.arm.backend.BackendFactory;
 import com.github.unidbg.arm.backend.ReadHook;
+import com.github.unidbg.arm.backend.WriteHook;
 import com.github.unidbg.arm.context.RegisterContext;
 import com.github.unidbg.debugger.DebugServer;
 import com.github.unidbg.debugger.Debugger;
@@ -286,7 +287,7 @@ public TraceHook traceWrite(long begin, long end, TraceWriteListener listener) {
         if (listener != null) {
             hook.traceWriteListener = listener;
         }
-        backend.hook_add_new((ReadHook) hook, begin, end, this);
+        backend.hook_add_new((WriteHook) hook, begin, end, this);
         return hook;
     }
 

File: backend/dynarmic/src/main/java/com/github/unidbg/arm/backend/DynarmicBackend.java
Patch:
@@ -9,7 +9,6 @@
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import unicorn.Unicorn;
 
 public abstract class DynarmicBackend extends FastBackend implements Backend, DynarmicCallback {
 
@@ -181,7 +180,7 @@ public void hook_add_new(WriteHook callback, long begin, long end, Object user_d
     }
 
     @Override
-    public Unicorn.UnHook hook_add_new(BlockHook callback, long begin, long end, Object user_data) {
+    public void hook_add_new(BlockHook callback, long begin, long end, Object user_data) {
         throw new UnsupportedOperationException();
     }
 

File: backend/hypervisor/src/main/java/com/github/unidbg/arm/backend/HypervisorBackend.java
Patch:
@@ -10,7 +10,6 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import unicorn.Arm64Const;
-import unicorn.Unicorn;
 import unicorn.UnicornConst;
 
 import java.nio.ByteBuffer;
@@ -177,7 +176,7 @@ protected final void callSVC(long pc, int swi) {
     }
 
     @Override
-    public Unicorn.UnHook hook_add_new(BlockHook callback, long begin, long end, Object user_data) throws BackendException {
+    public void hook_add_new(BlockHook callback, long begin, long end, Object user_data) throws BackendException {
         throw new UnsupportedOperationException();
     }
 

File: unidbg-api/src/main/java/com/github/unidbg/AssemblyCodeDumper.java
Patch:
@@ -41,6 +41,9 @@ public void initialize(long begin, long end, TraceCodeListener listener) {
 
     @Override
     public void onAttach(Unicorn.UnHook unHook) {
+        if (this.unHook != null) {
+            throw new IllegalStateException();
+        }
         this.unHook = unHook;
     }
 

File: unidbg-api/src/main/java/com/github/unidbg/TraceMemoryHook.java
Patch:
@@ -37,6 +37,9 @@ public TraceMemoryHook(boolean read) {
 
     @Override
     public void onAttach(Unicorn.UnHook unHook) {
+        if (this.unHook != null) {
+            throw new IllegalStateException();
+        }
         this.unHook = unHook;
     }
 

File: unidbg-api/src/main/java/com/github/unidbg/arm/SimpleARM64Debugger.java
Patch:
@@ -266,6 +266,7 @@ final void showHelp() {
         System.out.println("shr hex: search readable heap");
         System.out.println("shx hex: search executable heap");
         System.out.println();
+        System.out.println("nb: break at next block");
         System.out.println("s|si: step into");
         System.out.println("s[decimal]: execute specified amount instruction");
         System.out.println("s(bl): execute util BL mnemonic, low performance");

File: unidbg-api/src/main/java/com/github/unidbg/arm/SimpleARMDebugger.java
Patch:
@@ -268,6 +268,7 @@ final void showHelp() {
         System.out.println("shr hex: search readable heap");
         System.out.println("shx hex: search executable heap");
         System.out.println();
+        System.out.println("nb: break at next block");
         System.out.println("s|si: step into");
         System.out.println("s[decimal]: execute specified amount instruction");
         System.out.println("s(blx): execute util BLX mnemonic, low performance");

File: unidbg-api/src/main/java/com/github/unidbg/arm/backend/Backend.java
Patch:
@@ -45,8 +45,7 @@ public interface Backend {
 
     void hook_add_new(InterruptHook callback, Object user_data) throws BackendException;
 
-    @SuppressWarnings("unused")
-    Unicorn.UnHook hook_add_new(BlockHook callback, long begin, long end, Object user_data) throws BackendException;
+    void hook_add_new(BlockHook callback, long begin, long end, Object user_data) throws BackendException;
 
     void emu_start(long begin, long until, long timeout, long count) throws BackendException;
 

File: unidbg-api/src/main/java/com/github/unidbg/arm/backend/BlockHook.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.unidbg.arm.backend;
 
-public interface BlockHook {
+public interface BlockHook extends Detachable {
 
-    void hook(Backend backend, long address, int size, Object user);
+    void hookBlock(Backend backend, long address, int size, Object user);
 
 }

File: unidbg-api/src/main/java/com/github/unidbg/debugger/Debugger.java
Patch:
@@ -2,12 +2,13 @@
 
 import com.github.unidbg.Emulator;
 import com.github.unidbg.Module;
+import com.github.unidbg.arm.backend.BlockHook;
 import com.github.unidbg.arm.backend.DebugHook;
 
 import java.io.Closeable;
 import java.util.concurrent.Callable;
 
-public interface Debugger extends Breaker, DebugHook, Closeable {
+public interface Debugger extends Breaker, DebugHook, BlockHook, Closeable {
 
     BreakPoint addBreakPoint(Module module, String symbol);
     BreakPoint addBreakPoint(Module module, String symbol, BreakPointCallback callback);

File: unidbg-ios/src/main/java/com/github/unidbg/ios/ARM64SyscallHandler.java
Patch:
@@ -160,6 +160,7 @@ public void hook(Backend backend, int intno, int swi, Object user) {
             }
 
             if (log.isDebugEnabled()) {
+                log.debug("handle syscall NR=" + NR);
                 ARM.showRegs64(emulator, null);
             }
             Cpsr.getArm64(backend).setCarry(false);

File: unidbg-ios/src/main/java/com/github/unidbg/ios/MachOLoader.java
Patch:
@@ -410,7 +410,7 @@ private MachOModule loadInternalPhase(LibraryFile libraryFile, ByteBuffer buffer
                     String dylibName = dylibCommand.name();
                     if (dylibPath.startsWith(IpaLoader.APP_DIR)) {
                         dylibPath = dylibPath.replace("@executable_path/", "");
-                    } else if (dylibName.contains("/")) {
+                    } else if (dylibName.startsWith("/")) {
                         dylibPath = dylibName;
                     }
                     int index = dylibPath.indexOf('/'); // unidbg build frameworks

File: backend/hypervisor/src/main/java/com/github/unidbg/arm/backend/HypervisorBackend.java
Patch:
@@ -130,7 +130,7 @@ public void mem_unmap(long address, long size) throws BackendException {
     }
 
     @Override
-    public Unicorn.UnHook hook_add_new(CodeHook callback, long begin, long end, Object user_data) throws BackendException {
+    public void hook_add_new(CodeHook callback, long begin, long end, Object user_data) throws BackendException {
         throw new UnsupportedOperationException();
     }
 
@@ -139,12 +139,12 @@ public void debugger_add(DebugHook callback, long begin, long end, Object user_d
     }
 
     @Override
-    public Unicorn.UnHook hook_add_new(ReadHook callback, long begin, long end, Object user_data) throws BackendException {
+    public void hook_add_new(ReadHook callback, long begin, long end, Object user_data) throws BackendException {
         throw new UnsupportedOperationException();
     }
 
     @Override
-    public Unicorn.UnHook hook_add_new(WriteHook callback, long begin, long end, Object user_data) throws BackendException {
+    public void hook_add_new(WriteHook callback, long begin, long end, Object user_data) throws BackendException {
         throw new UnsupportedOperationException();
     }
 

File: unidbg-api/src/main/java/com/github/unidbg/arm/AbstractARM64Emulator.java
Patch:
@@ -252,7 +252,7 @@ public void eBlock(long begin, long until) {
         long spBackup = memory.getStackPoint();
         try {
             backend.reg_write(Arm64Const.UC_ARM64_REG_LR, LR);
-            emulate(begin, until, traceInstruction ? 0 : timeout, true);
+            emulate(begin, until, timeout, true);
         } finally {
             memory.setStackPoint(spBackup);
         }

File: unidbg-api/src/main/java/com/github/unidbg/arm/AbstractARMEmulator.java
Patch:
@@ -249,7 +249,7 @@ public void eBlock(long begin, long until) {
         long spBackup = memory.getStackPoint();
         try {
             backend.reg_write(ArmConst.UC_ARM_REG_LR, LR);
-            emulate(begin, until, traceInstruction ? 0 : timeout, true);
+            emulate(begin, until, timeout, true);
         } finally {
             memory.setStackPoint(spBackup);
         }

File: unidbg-api/src/main/java/com/github/unidbg/arm/backend/Backend.java
Patch:
@@ -33,13 +33,13 @@ public interface Backend {
     void setSingleStep(int singleStep);
     void setFastDebug(boolean fastDebug);
 
-    Unicorn.UnHook hook_add_new(CodeHook callback, long begin, long end, Object user_data) throws BackendException;
+    void hook_add_new(CodeHook callback, long begin, long end, Object user_data) throws BackendException;
 
     void debugger_add(DebugHook callback, long begin, long end, Object user_data) throws BackendException;
 
-    Unicorn.UnHook hook_add_new(ReadHook callback, long begin, long end, Object user_data) throws BackendException;
+    void hook_add_new(ReadHook callback, long begin, long end, Object user_data) throws BackendException;
 
-    Unicorn.UnHook hook_add_new(WriteHook callback, long begin, long end, Object user_data) throws BackendException;
+    void hook_add_new(WriteHook callback, long begin, long end, Object user_data) throws BackendException;
 
     void hook_add_new(EventMemHook callback, int type, Object user_data) throws BackendException;
 

File: unidbg-api/src/main/java/com/github/unidbg/arm/backend/CodeHook.java
Patch:
@@ -1,6 +1,6 @@
 package com.github.unidbg.arm.backend;
 
-public interface CodeHook {
+public interface CodeHook extends Detachable {
 
     void hook(Backend backend, long address, int size, Object user);
 

File: unidbg-api/src/main/java/com/github/unidbg/arm/backend/ReadHook.java
Patch:
@@ -1,6 +1,6 @@
 package com.github.unidbg.arm.backend;
 
-public interface ReadHook {
+public interface ReadHook extends Detachable {
 
     void hook(Backend backend, long address, int size, Object user);
 

File: unidbg-api/src/main/java/com/github/unidbg/arm/backend/WriteHook.java
Patch:
@@ -1,6 +1,6 @@
 package com.github.unidbg.arm.backend;
 
-public interface WriteHook {
+public interface WriteHook extends Detachable {
 
     void hook(Backend backend, long address, int size, long value, Object user);
 

File: unidbg-api/src/main/java/com/github/unidbg/debugger/Debugger.java
Patch:
@@ -29,6 +29,4 @@ public interface Debugger extends Breaker, DebugHook, Closeable {
 
     void disassembleBlock(Emulator<?> emulator, long address, boolean thumb);
 
-    void detach();
-
 }

File: unidbg-ios/src/main/java/com/github/unidbg/ios/ipa/IpaResolver.java
Patch:
@@ -29,9 +29,9 @@ class IpaResolver implements IOResolver<DarwinFileIO> {
     private final String randomDir;
 
     IpaResolver(String appDir, File ipa) {
-        this.appDir = appDir;
+        this.appDir = FilenameUtils.normalize(appDir, true);
         this.ipa = ipa;
-        this.randomDir = new File(appDir).getParentFile().getPath();
+        this.randomDir = FilenameUtils.normalize(new File(appDir).getParentFile().getPath(), true);
     }
 
     @Override

File: unidbg-api/src/main/java/com/github/unidbg/file/UnidbgFileFilter.java
Patch:
@@ -5,7 +5,7 @@
 
 public class UnidbgFileFilter implements FileFilter {
 
-    public static final String UNIDBG_PREFIX = ".unidbg";
+    public static final String UNIDBG_PREFIX = "__ignore.unidbg";
 
     @Override
     public boolean accept(File pathname) {

File: unidbg-ios/src/main/java/com/github/unidbg/ios/MachOLoader.java
Patch:
@@ -328,7 +328,7 @@ private MachOModule loadInternalPhase(LibraryFile libraryFile, ByteBuffer buffer
         boolean finalSegment = false;
         Set<String> rpathSet = new LinkedHashSet<>(2);
         byte[] uuid = null;
-        String dylibPath = libraryFile.getPath();
+        String dylibPath = FilenameUtils.normalize(libraryFile.getPath(), true);
 
         for (MachO.LoadCommand command : machO.loadCommands()) {
             if (command == null) {

File: unidbg-ios/src/main/java/com/github/unidbg/ios/ipa/IpaLoader.java
Patch:
@@ -11,7 +11,6 @@
 import com.github.unidbg.ios.*;
 import com.github.unidbg.memory.Memory;
 import com.github.unidbg.spi.SyscallHandler;
-import org.apache.commons.codec.digest.DigestUtils;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.logging.Log;
@@ -22,6 +21,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
+import java.nio.charset.StandardCharsets;
 import java.text.ParseException;
 import java.util.ArrayList;
 import java.util.Enumeration;
@@ -72,7 +72,7 @@ public final LoadedIpa load(String... loads) {
     public static final String PAYLOAD_PREFIX = "Payload";
 
     private String generateExecutableBundlePath() {
-        UUID uuid = UUID.nameUUIDFromBytes(DigestUtils.md5(appDir + "_Application"));
+        UUID uuid = UUID.nameUUIDFromBytes((appDir + "_Application").getBytes(StandardCharsets.UTF_8));
         return appDir.replace(PAYLOAD_PREFIX, APP_DIR + uuid.toString().toUpperCase()) + executable;
     }
 
@@ -175,7 +175,7 @@ protected String[] getEnvs(File rootDir) throws IOException {
             list.add("OBJC_PRINT_IVAR_SETUP=YES"); // log processing of non-fragile ivars
             list.add("OBJC_PRINT_VTABLE_SETUP=YES"); // log processing of class vtables
         }
-        UUID uuid = UUID.nameUUIDFromBytes(DigestUtils.md5(appDir + "_Documents"));
+        UUID uuid = UUID.nameUUIDFromBytes((appDir + "_Documents").getBytes(StandardCharsets.UTF_8));
         String homeDir = "/var/mobile/Containers/Data/Application/" + uuid.toString().toUpperCase();
         list.add("CFFIXED_USER_HOME=" + homeDir);
         FileUtils.forceMkdir(new File(rootDir, homeDir));

File: unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/DvmClass.java
Patch:
@@ -34,10 +34,12 @@ protected DvmClass(BaseVM vm, String className, DvmClass superClass, DvmClass[]
         this.className = className;
     }
 
+    @SuppressWarnings("unused")
     public DvmClass getSuperclass() {
         return superClass;
     }
 
+    @SuppressWarnings("unused")
     public DvmClass[] getInterfaces() {
         return interfaceClasses;
     }
@@ -234,7 +236,7 @@ UnidbgPointer findNativeFunction(Emulator<?> emulator, String method) {
         UnidbgPointer fnPtr = nativesMap.get(method);
         int index = method.indexOf('(');
         if (fnPtr == null && index != -1) {
-            String symbolName = "Java_" + getClassName().replace('/', '_') + "_" + method.substring(0, index);
+            String symbolName = "Java_" + getClassName().replace("_", "_1").replace('/', '_') + "_" + method.substring(0, index);
             for (Module module : emulator.getMemory().getLoadedModules()) {
                 Symbol symbol = module.findSymbolByName(symbolName, false);
                 if (symbol != null) {

File: unidbg-api/src/main/java/com/github/unidbg/arm/AbstractARM64Emulator.java
Patch:
@@ -77,7 +77,7 @@ public boolean hook(Backend backend, long address, int size, long value, Object
     }
 
     protected void setupTraps() {
-        int size = 0x1000;
+        int size = 0x10000;
         backend.mem_map(LR, size, UnicornConst.UC_PROT_READ | UnicornConst.UC_PROT_EXEC);
         ByteBuffer buffer = ByteBuffer.allocate(size);
         buffer.order(ByteOrder.LITTLE_ENDIAN);

File: unidbg-api/src/main/java/com/github/unidbg/arm/AbstractARMEmulator.java
Patch:
@@ -88,7 +88,7 @@ public Dlfcn getDlfcn() {
 
     protected void setupTraps() {
         try (Keystone keystone = new Keystone(KeystoneArchitecture.Arm, KeystoneMode.Arm)) {
-            int size = 0x1000;
+            int size = 0x10000;
             backend.mem_map(LR, size, UnicornConst.UC_PROT_READ | UnicornConst.UC_PROT_EXEC);
             KeystoneEncoded encoded = keystone.assemble("svc #0");
             byte[] b0 = encoded.getMachineCode();

File: unidbg-api/src/main/java/com/github/unidbg/AbstractEmulator.java
Patch:
@@ -39,7 +39,6 @@
 import java.io.*;
 import java.lang.management.ManagementFactory;
 import java.util.*;
-import java.util.concurrent.TimeUnit;
 
 /**
  * abstract emulator
@@ -50,7 +49,7 @@ public abstract class AbstractEmulator<T extends NewFileIO> implements Emulator<
 
     private static final Log log = LogFactory.getLog(AbstractEmulator.class);
 
-    public static final long DEFAULT_TIMEOUT = TimeUnit.HOURS.toMicros(1);
+    public static final long DEFAULT_TIMEOUT = 0;
 
     protected final Backend backend;
 

File: unidbg-api/src/main/java/com/github/unidbg/arm/AbstractARM64Emulator.java
Patch:
@@ -5,6 +5,7 @@
 import com.github.unidbg.Family;
 import com.github.unidbg.Module;
 import com.github.unidbg.arm.backend.Backend;
+import com.github.unidbg.arm.backend.EventMemHook;
 import com.github.unidbg.arm.context.BackendArm64RegisterContext;
 import com.github.unidbg.arm.context.RegisterContext;
 import com.github.unidbg.debugger.Debugger;
@@ -25,8 +26,6 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import unicorn.Arm64Const;
-import unicorn.EventMemHook;
-import unicorn.Unicorn;
 import unicorn.UnicornConst;
 
 import java.io.File;
@@ -52,7 +51,7 @@ public AbstractARM64Emulator(String processName, File rootDir, Family family, St
 
         backend.hook_add_new(new EventMemHook() {
             @Override
-            public boolean hook(Unicorn u, long address, int size, long value, Object user) {
+            public boolean hook(Backend backend, long address, int size, long value, Object user) {
                 log.warn("memory failed: address=0x" + Long.toHexString(address) + ", size=" + size + ", value=0x" + Long.toHexString(value));
                 if (LogFactory.getLog(AbstractEmulator.class).isDebugEnabled()) {
                     attach().debug();

File: unidbg-api/src/main/java/com/github/unidbg/arm/AbstractARMEmulator.java
Patch:
@@ -5,6 +5,7 @@
 import com.github.unidbg.Family;
 import com.github.unidbg.Module;
 import com.github.unidbg.arm.backend.Backend;
+import com.github.unidbg.arm.backend.EventMemHook;
 import com.github.unidbg.arm.context.BackendArm32RegisterContext;
 import com.github.unidbg.arm.context.RegisterContext;
 import com.github.unidbg.debugger.Debugger;
@@ -25,8 +26,6 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import unicorn.ArmConst;
-import unicorn.EventMemHook;
-import unicorn.Unicorn;
 import unicorn.UnicornConst;
 
 import java.io.File;
@@ -53,7 +52,7 @@ public AbstractARMEmulator(String processName, File rootDir, Family family, Stri
 
         backend.hook_add_new(new EventMemHook() {
             @Override
-            public boolean hook(Unicorn u, long address, int size, long value, Object user) {
+            public boolean hook(Backend backend, long address, int size, long value, Object user) {
                 RegisterContext context = getContext();
                 log.warn("memory failed: address=0x" + Long.toHexString(address) + ", size=" + size + ", value=0x" + Long.toHexString(value) + ", PC=" + context.getPCPointer() + ", LR=" + context.getLRPointer());
                 return false;

File: unidbg-api/src/main/java/com/github/unidbg/arm/backend/Backend.java
Patch:
@@ -1,6 +1,5 @@
 package com.github.unidbg.arm.backend;
 
-import unicorn.EventMemHook;
 import unicorn.Unicorn;
 
 public interface Backend {
@@ -38,6 +37,8 @@ public interface Backend {
 
     void hook_add_new(InterruptHook callback, Object user_data);
 
+    Unicorn.UnHook hook_add_new(BlockHook callback, long begin, long end, Object user_data);
+
     void emu_start(long begin, long until, long timeout, long count);
 
     void emu_stop();

File: unidbg-android/src/main/java/com/github/unidbg/linux/file/SimpleFileIO.java
Patch:
@@ -108,7 +108,7 @@ public int read(Unicorn unicorn, Pointer buffer, final int _count) {
                  *        the gap.
                  */
                 if (count < 0) {
-                    log.warn("read path=" + file + ", fp=" + randomAccessFile.getFilePointer() + ", _count=" + _count + ", length=" + randomAccessFile.length());
+                    log.warn("read path=" + file + ", fp=" + randomAccessFile.getFilePointer() + ", _count=" + _count + ", length=" + randomAccessFile.length() + ", buffer=" + buffer);
                     return 0;
                 }
             }
@@ -117,7 +117,7 @@ public int read(Unicorn unicorn, Pointer buffer, final int _count) {
             int read = randomAccessFile.read(data);
             if (read <= 0) {
                 if (log.isDebugEnabled()) {
-                    log.debug("read path=" + file + ", fp=" + randomAccessFile.getFilePointer() + ", _count=" + _count + ", length=" + randomAccessFile.length());
+                    log.debug("read path=" + file + ", fp=" + randomAccessFile.getFilePointer() + ", _count=" + _count + ", length=" + randomAccessFile.length() + ", buffer=" + buffer);
                 }
                 return read;
             }
@@ -135,7 +135,7 @@ public int read(Unicorn unicorn, Pointer buffer, final int _count) {
                 throw new IllegalStateException("count=" + count + ", read=" + read);
             }
             if (log.isDebugEnabled() && buf.length < 0x3000) {
-                Inspector.inspect(buf, "read path=" + file + ", fp=" + randomAccessFile.getFilePointer() + ", _count=" + _count + ", length=" + randomAccessFile.length());
+                Inspector.inspect(buf, "read path=" + file + ", fp=" + randomAccessFile.getFilePointer() + ", _count=" + _count + ", length=" + randomAccessFile.length() + ", buffer=" + buffer);
             }
             buffer.write(0, buf, 0, buf.length);
             return buf.length;

File: unidbg-ios/src/main/java/com/github/unidbg/ios/struct/kernel/Stat.java
Patch:
@@ -25,7 +25,7 @@ public Stat(Pointer p) {
     public void setLastModification(long lastModified) {
         for (TimeSpec spec : Arrays.asList(st_atimespec, st_mtimespec, st_ctimespec, st_birthtimespec)) {
             spec.tv_sec = (int) (lastModified / 1000L);
-            spec.tv_nsec = (int) ((lastModified % 1000) * 1000);
+            spec.tv_nsec = (int) ((lastModified % 1000) * 1000000L);
         }
     }
 

File: unidbg-ios/src/main/java/com/github/unidbg/ios/struct/kernel/Stat64.java
Patch:
@@ -23,7 +23,7 @@ public Stat64(Pointer p) {
     public void setLastModification(long lastModified) {
         for (TimeSpec64 spec : Arrays.asList(st_atimespec, st_mtimespec, st_ctimespec, st_birthtimespec)) {
             spec.tv_sec = lastModified / 1000L;
-            spec.tv_nsec = (lastModified % 1000) * 1000;
+            spec.tv_nsec = (lastModified % 1000) * 1000000L;
         }
     }
 

File: unidbg-api/src/main/java/com/github/unidbg/arm/SimpleARMDebugger.java
Patch:
@@ -210,7 +210,7 @@ protected final void loop(Emulator<?> emulator, long address, int size, Callable
                 }
                 if (line.startsWith("b0x")) {
                     try {
-                        long addr = Long.parseLong(line.substring(3), 16) & 0xfffffffffffffffeL;
+                        long addr = Long.parseLong(line.substring(3), 16) & 0xffffffffL;
                         Module module = null;
                         if (addr < Memory.MMAP_BASE && (module = findModuleByAddress(emulator, address)) != null) {
                             addr += module.base;

File: unidbg-ios/src/test/java/com/github/unidbg/ios/SubstrateTest.java
Patch:
@@ -84,6 +84,7 @@ public HookStatus onCall(Emulator<?> emulator, long originFunction) {
 
         IHookZz hookZz = HookZz.getInstance(emulator);
         Symbol _free = module.findSymbolByName("_free");
+//        emulator.attach().addBreakPoint(null, _free.getAddress());
         hookZz.instrument(_free, new InstrumentCallback<RegisterContext>() {
             @Override
             public void dbiCall(Emulator<?> emulator, RegisterContext ctx, HookEntryInfo info) {

File: unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/DalvikVM.java
Patch:
@@ -208,7 +208,7 @@ public long handle(Emulator<?> emulator) {
                     log.debug("NewLocalRef object=" + object + ", dvmObject=" + dvmObject + ", class=" + dvmObject.getClass());
                 }
                 if (verbose) {
-                    System.out.println(String.format("JNIEnv->NewLocalRef(0x%x) was called from %s", object.toIntPeer(), UnicornPointer.register(emulator, ArmConst.UC_ARM_REG_LR)));
+                    System.out.println(String.format("JNIEnv->NewLocalRef(%s) was called from %s", dvmObject, UnicornPointer.register(emulator, ArmConst.UC_ARM_REG_LR)));
                 }
                 return object.toIntPeer();
             }

File: unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/DalvikVM64.java
Patch:
@@ -211,7 +211,7 @@ public long handle(Emulator<?> emulator) {
                     log.debug("NewLocalRef object=" + object + ", dvmObject=" + dvmObject + ", class=" + dvmObject.getClass());
                 }
                 if (verbose) {
-                    System.out.println(String.format("JNIEnv->NewLocalRef(0x%x) was called from %s", object.toIntPeer(), UnicornPointer.register(emulator, Arm64Const.UC_ARM64_REG_LR)));
+                    System.out.println(String.format("JNIEnv->NewLocalRef(%s) was called from %s", dvmObject, UnicornPointer.register(emulator, Arm64Const.UC_ARM64_REG_LR)));
                 }
                 return object.toIntPeer();
             }

File: unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/VM.java
Patch:
@@ -48,6 +48,8 @@ public interface VM {
      * 设置apkFile以后，可调用该值获取apk对应的packageName
      */
     String getPackageName();
+    String getVersionName();
+    long getVersionCode();
 
     /**
      * 设置apkFile以后，可调用该方法获取资源文件

File: unidbg-android/src/main/java/com/github/unidbg/linux/file/DriverFileIO.java
Patch:
@@ -24,6 +24,9 @@ public static DriverFileIO create(Emulator<?> emulator, int oflags, String pathn
         if ("/dev/ashmem".equals(pathname)) {
             return new Ashmem(emulator, oflags, pathname);
         }
+        if ("/dev/zero".equals(pathname)) {
+            return new ZeroFileIO(emulator, oflags, pathname);
+        }
         return null;
     }
 

File: unidbg-ios/src/main/java/com/github/unidbg/ios/ARM32SyscallHandler.java
Patch:
@@ -909,7 +909,7 @@ private int ftruncate(Emulator<?> emulator) {
 
     private int unlink(Emulator<?> emulator) {
         Pointer pathname = UnicornPointer.register(emulator, ArmConst.UC_ARM_REG_R0);
-        String path = FilenameUtils.normalize(pathname.getString(0));
+        String path = FilenameUtils.normalize(pathname.getString(0), true);
         emulator.getFileSystem().unlink(path);
         return 0;
     }
@@ -982,7 +982,7 @@ private int stat64(Emulator<DarwinFileIO> emulator) {
         if (log.isDebugEnabled()) {
             log.debug("stat64 pathname=" + path + ", statbuf=" + statbuf + ", LR=" + context.getLRPointer());
         }
-        return stat64(emulator, FilenameUtils.normalize(path), statbuf);
+        return stat64(emulator, FilenameUtils.normalize(path, true), statbuf);
     }
 
     protected int fstat(Emulator<DarwinFileIO> emulator, int fd, Pointer stat) {
@@ -1033,7 +1033,7 @@ private int lstat(Emulator<DarwinFileIO> emulator) {
         Pointer pathname = context.getR0Pointer();
         Pointer stat = UnicornPointer.register(emulator, ArmConst.UC_ARM_REG_R1);
         String pathStr = pathname.getString(0);
-        String path = FilenameUtils.normalize(pathStr);
+        String path = FilenameUtils.normalize(pathStr, true);
         if (log.isDebugEnabled()) {
             log.debug("lstat path=" + path + ", pathStr=" + pathStr + ", stat=" + stat);
         }

File: unidbg-ios/src/main/java/com/github/unidbg/ios/ARM64SyscallHandler.java
Patch:
@@ -839,7 +839,7 @@ private long ftruncate(Emulator<?> emulator) {
     private int unlink(Emulator<?> emulator) {
         RegisterContext context = emulator.getContext();
         Pointer pathname = context.getPointerArg(0);
-        String path = FilenameUtils.normalize(pathname.getString(0));
+        String path = FilenameUtils.normalize(pathname.getString(0), true);
         emulator.getFileSystem().unlink(path);
         return 0;
     }
@@ -925,7 +925,7 @@ private int stat64(Emulator<DarwinFileIO> emulator, int offset) {
         RegisterContext context = emulator.getContext();
         Pointer pathname = context.getPointerArg(offset);
         Pointer statbuf = context.getPointerArg(offset + 1);
-        String path = FilenameUtils.normalize(pathname.getString(0));
+        String path = FilenameUtils.normalize(pathname.getString(0), true);
         if (log.isDebugEnabled()) {
             log.debug("stat64 pathname=" + path + ", statbuf=" + statbuf);
         }
@@ -964,7 +964,7 @@ private int lstat(Emulator<DarwinFileIO> emulator, int offset) {
         Pointer pathname = context.getPointerArg(offset);
         Pointer stat = context.getPointerArg(offset + 1);
         String pathStr = pathname.getString(0);
-        String path = FilenameUtils.normalize(pathStr);
+        String path = FilenameUtils.normalize(pathStr, true);
         int ret = stat64(emulator, path, stat);
         if (log.isDebugEnabled()) {
             log.debug("lstat path=" + path + ", pathStr=" + pathStr + ", stat=" + stat + ", ret=" + ret + ", LR=" + context.getLRPointer());

File: unidbg-ios/src/main/java/com/github/unidbg/ios/file/DirectoryFileIO.java
Patch:
@@ -104,7 +104,7 @@ public int fcntl(Emulator<?> emulator, int cmd, long arg) {
     @Override
     public String getPath() {
         if (".".equals(path)) {
-            return FilenameUtils.normalize(dir.getAbsolutePath());
+            return FilenameUtils.normalize(dir.getAbsolutePath(), true);
         }
         return path;
     }

File: unidbg-ios/src/main/java/com/github/unidbg/ios/ipa/IpaResolver.java
Patch:
@@ -40,7 +40,7 @@ public FileResult<DarwinFileIO> resolve(Emulator<DarwinFileIO> emulator, String
             return FileResult.<DarwinFileIO>success(new ByteArrayFileIO(oflags, pathname, new byte[0]));
         }
 
-        pathname = FilenameUtils.normalize(pathname);
+        pathname = FilenameUtils.normalize(pathname, true);
         if (pathname.startsWith(appDir)) {
             String path = IpaLoader.PAYLOAD_PREFIX + pathname.substring(randomDir.length());
             try (JarFile jarFile = new JarFile(ipa)) {

File: unidbg-api/src/main/java/com/github/unidbg/Emulator.java
Patch:
@@ -119,8 +119,7 @@ public interface Emulator<T extends NewFileIO> extends Closeable, Disassembler,
 
     SyscallHandler<T> getSyscallHandler();
 
-    String getLibraryExtension();
-    String getLibraryPath();
+    Family getFamily();
     @SuppressWarnings("unused")
     LibraryFile createURLibraryFile(URL url, String libName);
 

File: unidbg-api/src/main/java/com/github/unidbg/unix/UnixSyscallHandler.java
Patch:
@@ -1,6 +1,7 @@
 package com.github.unidbg.unix;
 
 import com.github.unidbg.Emulator;
+import com.github.unidbg.Family;
 import com.github.unidbg.Module;
 import com.github.unidbg.debugger.Breaker;
 import com.github.unidbg.file.FileIO;
@@ -96,7 +97,8 @@ protected final FileResult<T> resolve(Emulator<T> emulator, String pathname, int
             return result;
         }
 
-        if (pathname.endsWith(emulator.getLibraryExtension())) {
+        Family family = emulator.getFamily();
+        if (pathname.endsWith(family.getLibraryExtension())) {
             for (Module module : emulator.getMemory().getLoadedModules()) {
                 for (MemRegion memRegion : module.getRegions()) {
                     if (pathname.equals(memRegion.getName())) {

File: unidbg-android/src/main/java/com/github/unidbg/linux/ARM32SyscallHandler.java
Patch:
@@ -582,7 +582,7 @@ private int mremap(Emulator<?> emulator) {
                 byte[] data = new byte[old_size];
                 old_address.read(0, data, 0, data.length);
                 memory.munmap(map.base, (int) map.size);
-                long address = emulator.getMemory().mmap2(0, new_size, map.prot, AbstractLoader.MAP_ANONYMOUS, 0, 0);
+                long address = emulator.getMemory().mmap2(0, new_size, map.prot, AndroidElfLoader.MAP_ANONYMOUS, 0, 0);
                 UnicornPointer pointer = UnicornPointer.pointer(emulator, address);
                 assert pointer != null;
                 pointer.write(0, data, 0, data.length);

File: unidbg-api/src/main/java/com/github/unidbg/arm/AbstractARMDebugger.java
Patch:
@@ -469,7 +469,7 @@ final boolean handleCommon(Unicorn u, String line, long address, int size, long
                 filterAddress = Long.parseLong(filter.substring(2));
             }
             for (Module module : memory.getLoadedModules()) {
-                if (filter == null || module.name.toLowerCase().contains(filter) || (filterAddress >= module.base && filterAddress < module.base + module.size)) {
+                if (filter == null || module.getPath().toLowerCase().contains(filter.toLowerCase()) || (filterAddress >= module.base && filterAddress < module.base + module.size)) {
                     sb.append(String.format("[%3s][%" + maxLengthSoName.length() + "s] ", index++, FilenameUtils.getName(module.name)));
                     sb.append(String.format("[0x%0" + Long.toHexString(memory.getMaxSizeOfLibrary()).length() + "x-0x%x]", module.base, module.base + module.size));
                     sb.append(module.getPath());

File: unidbg-ios/src/test/java/com/github/unidbg/ios/Substrate64Test.java
Patch:
@@ -23,7 +23,7 @@ protected LibraryResolver createLibraryResolver() {
 
     @Override
     protected DarwinARM64Emulator createARMEmulator() {
-        return new DarwinARM64Emulator(new File("target/rootfs/substrate"));
+        return new DarwinARM64Emulator(null, new File("target/rootfs/substrate"), "CFFIXED_USER_HOME=/var/mobile");
     }
 
     public void testMS() throws Exception {

File: unidbg-api/src/main/java/com/github/unidbg/unix/UnixSyscallHandler.java
Patch:
@@ -233,7 +233,7 @@ protected final int close(Emulator<?> emulator, int fd) {
         if (file != null) {
             file.close();
             if (verbose) {
-                System.out.println(String.format("File closed '%s'", file));
+                System.out.println(String.format("File closed '%s' from %s", file, emulator.getContext().getLRPointer()));
             }
             return 0;
         } else {
@@ -251,7 +251,7 @@ public final int open(Emulator<T> emulator, String pathname, int oflags) {
             emulator.getMemory().setErrno(0);
             this.fdMap.put(minFd, resolveResult.io);
             if (verbose) {
-                System.out.println(String.format("File opened '%s'", resolveResult.io));
+                System.out.println(String.format("File opened '%s' from %s", resolveResult.io, emulator.getContext().getLRPointer()));
             }
             return minFd;
         }
@@ -261,7 +261,7 @@ public final int open(Emulator<T> emulator, String pathname, int oflags) {
             emulator.getMemory().setErrno(0);
             this.fdMap.put(minFd, driverIO);
             if (verbose) {
-                System.out.println(String.format("File opened '%s'", driverIO));
+                System.out.println(String.format("File opened '%s' from %s", driverIO, emulator.getContext().getLRPointer()));
             }
             return minFd;
         }

File: unidbg-ios/src/main/java/com/github/unidbg/ios/ARM64SyscallHandler.java
Patch:
@@ -765,7 +765,7 @@ private int closeWithOffset(Emulator<?> emulator, int offset) {
         RegisterContext context = emulator.getContext();
         int fd = context.getIntArg(offset);
         if (log.isDebugEnabled()) {
-            log.debug("close fd=" + fd);
+            log.debug("close fd=" + fd + ", LR=" + context.getLRPointer());
         }
 
         return close(emulator, fd);
@@ -2734,7 +2734,7 @@ private int close_NOCANCEL(Emulator<?> emulator) {
             log.debug("close_NOCANCEL fd=" + fd);
         }
 
-        return closeWithOffset(emulator, fd);
+        return close(emulator, fd);
     }
 
     private int read_NOCANCEL(Emulator<?> emulator, int offset) {

File: unidbg-ios/src/main/java/com/github/unidbg/ios/ipa/IpaLoader.java
Patch:
@@ -122,7 +122,6 @@ private static String parseCFBundleIdentifier(File ipa, String appDir) throws IO
     protected void config(final Emulator<DarwinFileIO> emulator, File ipa, String executableBundlePath, File rootDir) throws IOException {
         File executable = new File(executableBundlePath);
         SyscallHandler<DarwinFileIO> syscallHandler = emulator.getSyscallHandler();
-        syscallHandler.setVerbose(log.isDebugEnabled());
         File appDir = executable.getParentFile();
         syscallHandler.addIOResolver(new IpaResolver(appDir.getPath(), ipa));
         FileUtils.forceMkdir(new File(rootDir, appDir.getParentFile().getPath()));
@@ -135,6 +134,7 @@ LoadedIpa load32(EmulatorConfigurator configurator, String... loads) throws IOEx
         String bundleAppDir = new File(executableBundlePath).getParentFile().getParentFile().getPath();
         File rootDir = new File(this.rootDir, bundleVersion);
         Emulator<DarwinFileIO> emulator = new DarwinARMEmulator(executableBundlePath, rootDir, getEnvs());
+        emulator.getSyscallHandler().setVerbose(log.isDebugEnabled());
         if (configurator != null) {
             configurator.configure(emulator, executableBundlePath, rootDir, bundleIdentifier);
         }
@@ -148,6 +148,7 @@ LoadedIpa load64(EmulatorConfigurator configurator, String... loads) throws IOEx
         String bundleAppDir = new File(executableBundlePath).getParentFile().getParentFile().getPath();
         File rootDir = new File(this.rootDir, bundleVersion);
         Emulator<DarwinFileIO> emulator = new DarwinARM64Emulator(executableBundlePath, rootDir, getEnvs());
+        emulator.getSyscallHandler().setVerbose(log.isDebugEnabled());
         if (configurator != null) {
             configurator.configure(emulator, executableBundlePath, rootDir, bundleIdentifier);
         }

File: unidbg-ios/src/main/java/com/github/unidbg/ios/ipa/IpaLoader.java
Patch:
@@ -7,6 +7,7 @@
 import com.github.unidbg.Emulator;
 import com.github.unidbg.Module;
 import com.github.unidbg.file.ios.DarwinFileIO;
+import com.github.unidbg.file.ios.DarwinFileSystem;
 import com.github.unidbg.ios.DarwinARM64Emulator;
 import com.github.unidbg.ios.DarwinARMEmulator;
 import com.github.unidbg.ios.DarwinResolver;
@@ -126,6 +127,8 @@ protected void config(final Emulator<DarwinFileIO> emulator, File ipa, String ex
         syscallHandler.addIOResolver(new IpaResolver(appDir.getPath(), ipa));
         FileUtils.forceMkdir(new File(rootDir, appDir.getParentFile().getPath()));
         emulator.getMemory().addHookListener(new SymbolResolver(emulator));
+        DarwinFileSystem fileSystem = (DarwinFileSystem) emulator.getFileSystem();
+        fileSystem.config(bundleIdentifier);
     }
 
     LoadedIpa load32(EmulatorConfigurator configurator, String... loads) throws IOException {

File: unidbg-ios/src/main/java/com/github/unidbg/ios/ipa/NSUserDefaultsResolver.java
Patch:
@@ -18,6 +18,7 @@ public class NSUserDefaultsResolver implements IOResolver<DarwinFileIO> {
     private final String bundleIdentifier;
     private final Map<String, Object> map;
 
+    @SuppressWarnings("unused")
     public NSUserDefaultsResolver(String bundleIdentifier) {
         this(bundleIdentifier, Collections.<String, Object>emptyMap());
     }
@@ -37,7 +38,7 @@ public FileResult<DarwinFileIO> resolve(Emulator<DarwinFileIO> emulator, String
             } catch (IOException e) {
                 throw new IllegalStateException("save plist failed", e);
             }
-            return FileResult.<DarwinFileIO>success(new ByteArrayFileIO(oflags, pathname, outputStream.toByteArray()));
+            return FileResult.<DarwinFileIO>fallback(new ByteArrayFileIO(oflags, pathname, outputStream.toByteArray()));
         }
         return null;
     }

File: unidbg-ios/src/test/java/com/github/unidbg/ios/Substrate64Test.java
Patch:
@@ -3,7 +3,7 @@
 import com.github.unidbg.LibraryResolver;
 import com.github.unidbg.Module;
 import com.github.unidbg.Symbol;
-import com.github.unidbg.ios.ipa.NSUserDefaultsResolver;
+import com.github.unidbg.file.ios.DarwinFileSystem;
 import com.github.unidbg.pointer.UnicornPointer;
 import org.apache.log4j.Level;
 import org.apache.log4j.Logger;
@@ -157,7 +157,8 @@ public HookStatus onCall(Emulator<?> emulator, long originFunction) {
     protected void setUp() throws Exception {
         super.setUp();
 
-        emulator.getSyscallHandler().addIOResolver(new NSUserDefaultsResolver("unidbg"));
+        DarwinFileSystem fileSystem = (DarwinFileSystem) emulator.getFileSystem();
+        fileSystem.config("unidbg");
     }
 
     public static void main(String[] args) throws Exception {

File: unidbg-ios/src/main/java/com/github/unidbg/ios/MachOLoader.java
Patch:
@@ -1349,9 +1349,9 @@ private boolean doBindAt(Log log, int libraryOrdinal, int type, long address, St
             throw new IllegalStateException();
         }
 
-        Module targetImage;
+        MachOModule targetImage;
         if (libraryOrdinal == BIND_SPECIAL_DYLIB_MAIN_EXECUTABLE) {
-            targetImage = this.getExecutableModule();
+            targetImage = executableModule;
         } else if (libraryOrdinal == BIND_SPECIAL_DYLIB_SELF) {
             targetImage = module;
         } else if (libraryOrdinal <= 0) {
@@ -1371,7 +1371,7 @@ private boolean doBindAt(Log log, int libraryOrdinal, int type, long address, St
 
         Symbol symbol = targetImage.findSymbolByName(symbolName, true);
         if (symbol == null) {
-            symbol = targetImage.findSymbolByName(symbolName, false);
+            symbol = targetImage.getExportByName(symbolName);
             if (log.isDebugEnabled()) {
                 log.debug("doBindAt use export symbol: " + symbol);
             }

File: src/main/java/com/github/unidbg/ios/ARM32SyscallHandler.java
Patch:
@@ -2244,7 +2244,8 @@ private int sigaction(Unicorn u, Emulator<?> emulator) {
         Pointer act = UnicornPointer.register(emulator, ArmConst.UC_ARM_REG_R1);
         Pointer oldact = UnicornPointer.register(emulator, ArmConst.UC_ARM_REG_R2);
 
-        return sigaction(signum, act, oldact);
+        final int sizeOfSigAction = 12;
+        return sigaction(signum, act, oldact, sizeOfSigAction);
     }
 
     private int fcntl(Unicorn u, Emulator<?> emulator) {

File: src/main/java/com/github/unidbg/linux/android/dvm/DvmObject.java
Patch:
@@ -10,7 +10,7 @@
 
 public class DvmObject<T> implements Hashable {
 
-    final DvmClass objectType;
+    private final DvmClass objectType;
     protected T value;
 
     protected DvmObject(DvmClass objectType, T value) {

File: src/main/java/com/github/unidbg/arm/ARM.java
Patch:
@@ -449,11 +449,11 @@ private static int[] getRegArgs(Emulator<?> emulator) {
         return emulator.is32Bit() ? ARM_ARG_REGS : ARM64_ARG_REGS;
     }
 
-    private static int[] getAllRegisters(boolean thumb) {
+    public static int[] getAllRegisters(boolean thumb) {
         return thumb ? THUMB_REGS : ARM_REGS;
     }
 
-    private static int[] getAll64Registers() {
+    public static int[] getAll64Registers() {
         return ARM64_REGS;
     }
 

File: src/main/java/com/github/unidbg/AssemblyCodeDumper.java
Patch:
@@ -45,7 +45,7 @@ private boolean canTrace(long address) {
     public void hook(Unicorn u, long address, int size, Object user) {
         if (canTrace(address)) {
             try {
-                PrintStream out = System.err;
+                PrintStream out = System.out;
                 if (redirect != null) {
                     out = redirect;
                 }

File: src/main/java/com/github/unidbg/arm/AbstractARMDebugger.java
Patch:
@@ -175,7 +175,7 @@ public void debug() {
             address = ((Number) unicorn.reg_read(Arm64Const.UC_ARM64_REG_PC)).longValue();
         }
         try {
-            loop(emulator, address, 0);
+            loop(emulator, address, 4);
         } catch (Exception e) {
             log.warn("debug failed", e);
         }

File: src/main/java/com/github/unidbg/arm/AbstractARMDebugger.java
Patch:
@@ -517,7 +517,7 @@ final long disassemble(Emulator<?> emulator, long address, int size, boolean thu
             nextAddr += ins.size;
         }
         System.out.println(sb);
-        return next;
+        return on ? nextAddr : next;
     }
 
     final void disassembleBlock(Emulator<?> emulator, long address, boolean thumb) {

File: src/main/java/com/github/unidbg/hook/InvocationContext.java
Patch:
@@ -2,7 +2,7 @@
 
 public interface InvocationContext {
 
-    void push(Object obj);
+    void push(Object... objs);
 
     <T> T pop();
 

File: src/main/java/com/github/unidbg/ios/Substrate.java
Patch:
@@ -111,7 +111,7 @@ public void hookFunction(long address, ReplaceCallback callback) {
 
     @Override
     public void hookFunction(Symbol symbol, ReplaceCallback callback, boolean enablePostCall) {
-        hookFunction(symbol.getAddress(), callback, false);
+        hookFunction(symbol.getAddress(), callback, enablePostCall);
     }
 
     @Override

File: src/main/java/com/github/unidbg/linux/android/dvm/DalvikVM.java
Patch:
@@ -1428,7 +1428,7 @@ public long handle(Emulator<?> emulator) {
                 DvmObject<?> obj = size == 0 ? null : getObject(initialElement.toUIntPeer());
                 DvmObject<?>[] array = new DvmObject[size];
                 for (int i = 0; i < size; i++) {
-                    array[i] = new DvmObject<>(dvmClass, obj);
+                    array[i] = obj;
                 }
 
                 return addObject(new ArrayObject(array), false);

File: src/test/java/com/github/unidbg/android/ida/MyARM64SyscallHandler.java
Patch:
@@ -44,7 +44,7 @@ protected int readlink(Emulator<?> emulator, String path, Pointer buf, int bufSi
     }
 
     @Override
-    protected int fork(Emulator<?> emulator) {
+    protected long fork(Emulator<?> emulator) {
         return emulator.getPid();
     }
 

File: src/main/java/com/github/unidbg/debugger/ida/AndroidServer.java
Patch:
@@ -553,7 +553,7 @@ private void requestRunningProcesses() {
         buffer.put((byte) 0x1);
         buffer.put((byte) 0x1); // process count
         buffer.put(Utils.pack_dd(emulator.getPid()));
-        buffer.put(("[" + (emulator.is32Bit() ? "32" : "64") + "] " + DEBUG_EXEC_NAME).getBytes());
+        buffer.put(("[" + emulator.getPointerSize() * 8 + "] " + DEBUG_EXEC_NAME).getBytes());
         buffer.put((byte) 0);
         buffer.flip();
         byte[] packet = new byte[buffer.remaining()];

File: src/main/java/com/github/unidbg/linux/AndroidElfLoader.java
Patch:
@@ -533,7 +533,7 @@ private LinuxModule loadInternal(LibraryFile libraryFile) throws IOException {
         if (dynsym == null) {
             throw new IllegalStateException("dynsym is null");
         }
-        LinuxModule module = new LinuxModule(load_base, bound_high, soName, dynsym, list, initFunctionList, neededLibraries, regions);
+        LinuxModule module = new LinuxModule(load_base, size, soName, dynsym, list, initFunctionList, neededLibraries, regions);
         if ("libc.so".equals(soName)) { // libc
             ElfSymbol __thread_entry = module.getELFSymbolByName("__thread_entry");
             if (__thread_entry != null) {

File: src/main/java/com/github/unidbg/AbstractEmulator.java
Patch:
@@ -168,8 +168,8 @@ public Debugger attach(long begin, long end, DebuggerType type) {
             case GDB_SERVER:
                 debugger = new GdbStub(this);
                 break;
-            case ANDROID_SERVER_V73:
-                debugger = new AndroidServer(this, DebugServer.IDA_PROTOCOL_VERSION_73);
+            case ANDROID_SERVER_V7:
+                debugger = new AndroidServer(this, DebugServer.IDA_PROTOCOL_VERSION_V7);
                 break;
             case SIMPLE:
             default:

File: src/main/java/com/github/unidbg/debugger/DebugServer.java
Patch:
@@ -6,7 +6,7 @@ public interface DebugServer extends Debugger, Runnable {
 
     int PACKET_SIZE = 1024;
 
-    byte IDA_PROTOCOL_VERSION_73 = 0x19; // IDA Pro v7.3
+    byte IDA_PROTOCOL_VERSION_V7 = 0x19; // IDA Pro v7.x
     byte IDA_DEBUGGER_ID = 0xb; // armlinux
 
     String DEBUG_EXEC_NAME = "unidbg";

File: src/main/java/com/github/unidbg/debugger/DebuggerType.java
Patch:
@@ -13,9 +13,8 @@ public enum  DebuggerType {
     GDB_SERVER,
 
     /**
-     * ida android server v7.3
+     * ida android server v7.x
      */
-    @Deprecated
-    ANDROID_SERVER_V73
+    ANDROID_SERVER_V7
 
 }

File: src/test/java/com/bytedance/frameworks/core/encrypt/TTEncrypt.java
Patch:
@@ -147,7 +147,7 @@ public HookStatus onCall(Emulator<?> emulator, long originFunction) {
 
         long start = System.currentTimeMillis();
         byte[] data = new byte[16];
-        emulator.attach(DebuggerType.ANDROID_SERVER_V73);
+        emulator.attach(DebuggerType.ANDROID_SERVER_V7);
         Number ret = TTEncryptUtils.callStaticJniMethod(emulator, "ttEncrypt([BI)[B", vm.addLocalObject(new ByteArray(data)), data.length);
         long hash = ret.intValue() & 0xffffffffL;
         ByteArray array = vm.getObject(hash);

File: src/main/java/com/github/unidbg/arm/AbstractARMDebugger.java
Patch:
@@ -175,7 +175,7 @@ public final void hook(Unicorn u, long address, int size, Object user) {
         try {
             if (breakMap.containsKey(address)) {
                 BreakPointCallback callback = breakMap.get(address);
-                if (callback == null || !callback.onHit(emulator, address)) {
+                if (callback == null || callback.onHit(emulator, address)) {
                     loop(emulator, address, size);
                 }
             } else if (singleStep == 0) {

File: src/main/java/com/github/unidbg/arm/SimpleARMDebugger.java
Patch:
@@ -132,7 +132,7 @@ protected final void loop(Emulator<?> emulator, long address, int size) {
                             str = str.substring(2);
                             radix = 16;
                         }
-                        value = Integer.parseInt(str, radix);
+                        value = (int) Long.parseLong(str, radix);
                     } catch(NumberFormatException e) {
                         e.printStackTrace();
                         continue;

File: src/main/java/com/github/unidbg/debugger/BreakPointCallback.java
Patch:
@@ -6,7 +6,7 @@ public interface BreakPointCallback {
 
     /**
      * 当断点被触发时回调
-     * @return 返回<code>false</code>表示断点成功，返回<code>true</code>表示不触发断点，继续进行
+     * @return 返回<code>true</code>表示断点成功，返回<code>false</code>表示不触发断点，继续进行
      */
     boolean onHit(Emulator<?> emulator, long address);
 

File: src/main/java/com/github/unidbg/hook/ReplaceCallback.java
Patch:
@@ -6,7 +6,7 @@
 public abstract class ReplaceCallback {
 
     public  HookStatus onCall(Emulator emulator, long originFunction) {
-        throw new AbstractMethodError();
+        return HookStatus.LR(emulator, originFunction);
     }
 
     public  HookStatus onCall(Emulator emulator, HookContext context, long originFunction) {

File: src/main/java/com/github/unidbg/Emulator.java
Patch:
@@ -27,6 +27,7 @@ public interface Emulator extends Closeable, Disassembler, ValuePair {
     int getPointerSize();
 
     boolean is64Bit();
+    boolean is32Bit();
 
     int getPageAlign();
 

File: src/test/java/com/github/unidbg/ios/SubstrateTest.java
Patch:
@@ -196,6 +196,7 @@ public HookStatus onCall(Emulator emulator, long originFunction) {
 //        Logger.getLogger("com.github.unidbg.ios.ARM32SyscallHandler").setLevel(Level.DEBUG);
 //        Logger.getLogger("com.github.unidbg.ios.MachOLoader").setLevel(Level.DEBUG);
 //        Logger.getLogger("com.github.unidbg.spi.AbstractLoader").setLevel(Level.DEBUG);
+//        emulator.attach(0x4128F000, 0x41339000).addBreakPoint(null, 0x4128F000 + 0x0001E9B8);
         new CTTelephonyNetworkInfo(emulator).tryHook();
         loader.getExecutableModule().callEntry(emulator);
         System.err.println("callExecutableEntry offset=" + (System.currentTimeMillis() - start) + "ms");

File: src/test/java/com/github/unidbg/ios/Substrate64Test.java
Patch:
@@ -152,11 +152,11 @@ public HookStatus onCall(Emulator emulator, long originFunction) {
         System.err.println("_MSFindSymbol ret=0x" + Long.toHexString(ret) + ", offset=" + (System.currentTimeMillis() - start) + "ms");
 
         start = System.currentTimeMillis();
-        Logger.getLogger("com.github.unidbg.AbstractEmulator").setLevel(Level.DEBUG);
-        Logger.getLogger("com.github.unidbg.ios.ARM64SyscallHandler").setLevel(Level.DEBUG);
+        Logger.getLogger("com.github.unidbg.AbstractEmulator").setLevel(Level.INFO);
+//        Logger.getLogger("com.github.unidbg.ios.ARM64SyscallHandler").setLevel(Level.DEBUG);
 //        Logger.getLogger("com.github.unidbg.ios.MachOLoader").setLevel(Level.DEBUG);
 //        Logger.getLogger("com.github.unidbg.spi.AbstractLoader").setLevel(Level.DEBUG);
-//        emulator.attach(0x1005a0000L, 0x1005e4000L).addBreakPoint(null, 0x1005a0000L + 0x00000000000082B8);
+//        emulator.attach(0x102984000L, 0x102998000L).addBreakPoint(null, 0x102984000L + 0x000000000000A0A4);
         new CTTelephonyNetworkInfo(emulator).tryHook();
         loader.getExecutableModule().callEntry(emulator);
         System.err.println("callExecutableEntry offset=" + (System.currentTimeMillis() - start) + "ms");

File: src/main/java/com/github/unidbg/AbstractEmulator.java
Patch:
@@ -397,8 +397,9 @@ public File getWorkDir() {
 
     protected final Number[] eFunc(long begin, Arguments args, long lr, boolean entry) {
         long sp = getMemory().getStackPoint();
-        if (sp % 8 != 0) {
-            log.info("SP NOT 8 byte aligned", new Exception(getStackPointer().toString()));
+        int alignment = is64Bit() ? 16 : 8;
+        if (sp % alignment != 0) {
+            log.info("SP NOT " + alignment + " byte aligned", new Exception(getStackPointer().toString()));
         }
         final List<Number> numbers = new ArrayList<>(10);
         numbers.add(emulate(begin, lr, timeout, entry));

File: src/main/java/com/github/unidbg/arm/SimpleARM64Debugger.java
Patch:
@@ -273,7 +273,7 @@ final void showHelp() {
         System.out.println();
         System.out.println("s|si: step into");
         System.out.println("s[decimal]: execute specified amount instruction");
-        System.out.println("sblx: execute util BLX mnemonic");
+        System.out.println("s(bl): execute util BL mnemonic");
         System.out.println();
         System.out.println("m(op) [size]: show memory, default size is 0x70, size may hex or decimal");
         System.out.println("mx0-mx28, mfp, mip, msp [size]: show memory of specified register");
@@ -287,6 +287,7 @@ final void showHelp() {
         System.out.println("r: remove breakpoint of register PC");
         System.out.println("blr: add temporarily breakpoint of register LR");
         System.out.println();
+        System.out.println("vm: view loaded modules");
         System.out.println("d|dis: show disassemble");
         System.out.println("stop: stop emulation");
     }

File: src/main/java/com/github/unidbg/arm/SimpleARMDebugger.java
Patch:
@@ -277,7 +277,7 @@ final void showHelp() {
         System.out.println();
         System.out.println("s|si: step into");
         System.out.println("s[decimal]: execute specified amount instruction");
-        System.out.println("sblx: execute util BLX mnemonic");
+        System.out.println("s(blx): execute util BLX mnemonic");
         System.out.println();
         System.out.println("m(op) [size]: show memory, default size is 0x70, size may hex or decimal");
         System.out.println("mr0-mr7, mfp, mip, msp [size]: show memory of specified register");
@@ -291,6 +291,7 @@ final void showHelp() {
         System.out.println("r: remove breakpoint of register PC");
         System.out.println("blr: add temporarily breakpoint of register LR");
         System.out.println();
+        System.out.println("vm: view loaded modules");
         System.out.println("d|dis: show disassemble");
         System.out.println("stop: stop emulation");
     }

File: src/main/java/com/github/unidbg/ios/Dyld.java
Patch:
@@ -23,6 +23,7 @@ abstract class Dyld extends Dlfcn {
 
     static final int dyld_image_state_bound = 40;
     static final int dyld_image_state_dependents_initialized = 45; // Only single notification for this
+    static final int dyld_image_state_initialized = 50;
     static final int dyld_image_state_terminated = 60; // Only single notification for this
 
     static final int RTLD_FIRST = 0x100; /* Mac OS X 10.5 and later */

File: src/main/java/com/github/unidbg/ios/Dyld64.java
Patch:
@@ -338,10 +338,10 @@ public long handle(Emulator emulator) {
                  * for each image that is currently part of the program.
                  */
                 if (__dyld_register_func_for_add_image == null) {
-                    __dyld_register_func_for_add_image = svcMemory.registerSvc(new ArmSvc() {
+                    __dyld_register_func_for_add_image = svcMemory.registerSvc(new Arm64Svc() {
                         @Override
                         public UnicornPointer onRegister(SvcMemory svcMemory, int svcNumber) {
-                            try (Keystone keystone = new Keystone(KeystoneArchitecture.Arm, KeystoneMode.Arm)) {
+                            try (Keystone keystone = new Keystone(KeystoneArchitecture.Arm64, KeystoneMode.LittleEndian)) {
                                 KeystoneEncoded encoded = keystone.assemble(Arrays.asList(
                                         "sub sp, sp, #0x10",
                                         "stp x29, x30, [sp]",

File: src/main/java/com/github/unidbg/ios/MachO.java
Patch:
@@ -29,6 +29,9 @@ public interface MachO {
 
     int ARM_RELOC_VANILLA = 0; /* generic relocation as discribed above */
 
+    int EXPORT_SYMBOL_FLAGS_KIND_MASK = 0x03;
+    int EXPORT_SYMBOL_FLAGS_KIND_ABSOLUTE = 0x02;
+
     int EXPORT_SYMBOL_FLAGS_REEXPORT = 0x08;
     int EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER = 0x10;
 

File: src/main/java/com/github/unidbg/ios/MachOModule.java
Patch:
@@ -212,9 +212,9 @@ private void processExportNode(Log log, ByteBuffer buffer, byte[] cummulativeStr
                 importName = null;
             }
             String symbolName = new String(cummulativeString, 0, curStrOffset);
-            map.put(symbolName, new ExportSymbol(symbolName, address, this, base + other));
+            map.put(symbolName, new ExportSymbol(symbolName, address, this, base + other, (flags & EXPORT_SYMBOL_FLAGS_KIND_MASK) == EXPORT_SYMBOL_FLAGS_KIND_ABSOLUTE));
             if (log.isDebugEnabled()) {
-                log.debug("exportNode symbolName=" + symbolName + ", address=0x" + Long.toHexString(address) + ", other=0x" + Long.toHexString(other) + ", importName=" + importName);
+                log.debug("exportNode symbolName=" + symbolName + ", address=0x" + Long.toHexString(address) + ", other=0x" + Long.toHexString(other) + ", importName=" + importName + ", flags=0x" + Integer.toHexString(flags));
             }
             buffer.reset();
             buffer.position(buffer.position() + terminalSize);

File: src/main/java/com/github/unidbg/linux/ARM64SyscallHandler.java
Patch:
@@ -1145,7 +1145,7 @@ private int munmap(Unicorn u, Emulator emulator) {
         return ret;
     }
 
-    private int statfs(Emulator emulator) {
+    protected int statfs(Emulator emulator) {
         Pointer pathPointer = UnicornPointer.register(emulator, ArmConst.UC_ARM_REG_R0);
         Pointer buf = UnicornPointer.register(emulator, ArmConst.UC_ARM_REG_R1);
         String path = pathPointer.getString(0);

File: src/main/java/com/github/unidbg/linux/ARMSyscallHandler.java
Patch:
@@ -208,7 +208,7 @@ public void hook(Unicorn u, int intno, Object user) {
                     Pointer child_stack = UnicornPointer.register(emulator, ArmConst.UC_ARM_REG_R1);
                     int fn = ((Number) u.reg_read(ArmConst.UC_ARM_REG_R5)).intValue();
                     int arg = ((Number) u.reg_read(ArmConst.UC_ARM_REG_R6)).intValue();
-                    if (child_stack.getInt(-4) == fn && child_stack.getInt(-8) == arg) {
+                    if (child_stack != null && child_stack.getInt(-4) == fn && child_stack.getInt(-8) == arg) {
                         u.reg_write(ArmConst.UC_ARM_REG_R0, bionic_clone(u, emulator));
                     } else {
                         u.reg_write(ArmConst.UC_ARM_REG_R0, pthread_clone(u, emulator));
@@ -1336,7 +1336,7 @@ private int munmap(Unicorn u, Emulator emulator) {
         return ret;
     }
 
-    private int statfs64(Emulator emulator) {
+    protected int statfs64(Emulator emulator) {
         RegisterContext context = emulator.getContext();
         Pointer pathPointer = context.getPointerArg(0);
         int size = context.getIntArg(1);

File: src/main/java/com/github/unidbg/linux/AndroidElfLoader.java
Patch:
@@ -118,7 +118,7 @@ private void initializeTLS() {
         }
         auxv.setPointer(emulator.getPointerSize(), __stack_chk_guard);
 
-        final Pointer environ = allocateStack(8);
+        final Pointer environ = allocateStack(0x10);
         assert environ != null;
         environ.setInt(0, 0);
 

File: src/main/java/com/github/unidbg/linux/android/dvm/DvmClass.java
Patch:
@@ -116,7 +116,7 @@ int getFieldID(String fieldName, String fieldType) {
         if (log.isDebugEnabled()) {
             log.debug("getFieldID signature=" + signature + ", hash=0x" + Long.toHexString(hash));
         }
-        if (vm.jni.acceptField(signature, false)) {
+        if (vm.jni != null && vm.jni.acceptField(signature, false)) {
             fieldMap.put(hash, new DvmField(this, fieldName, fieldType));
             return (int) hash;
         } else {

File: src/main/java/com/github/unidbg/memory/Memory.java
Patch:
@@ -22,6 +22,7 @@ public interface Memory extends IO, Loader {
     UnicornPointer pointer(long address);
     void setStackPoint(long sp);
     long getStackPoint();
+    long getStackBase();
 
     void setCallInitFunction();
 

File: src/main/java/cn/banny/unidbg/AbstractEmulator.java
Patch:
@@ -397,9 +397,8 @@ public File getWorkDir() {
 
     protected final Number[] eFunc(long begin, Arguments args, long lr, boolean entry) {
         long sp = getMemory().getStackPoint();
-        int align = is64Bit() ? 16 : 8;
-        if (sp % align != 0) {
-            log.info("SP NOT " + align + " byte aligned", new Exception(getStackPointer().toString()));
+        if (sp % 8 != 0) {
+            log.info("SP NOT 8 byte aligned", new Exception(getStackPointer().toString()));
         }
         final List<Number> numbers = new ArrayList<>(10);
         numbers.add(emulate(begin, lr, timeout, entry));

File: src/main/java/cn/banny/unidbg/linux/android/dvm/VaList64.java
Patch:
@@ -97,7 +97,7 @@ public class VaList64 extends VaList {
                             base_p = (base_p + 15) & 0xfffffffffffffff8L;
                         }
                         assert pointer != null;
-                        buffer.putFloat(pointer.getFloat(0));
+                        buffer.putDouble(pointer.getDouble(0));
                         break;
                     }
                     case 'F': {
@@ -116,7 +116,7 @@ public class VaList64 extends VaList {
                             base_p = (base_p + 15) & 0xfffffffffffffff8L;
                         }
                         assert pointer != null;
-                        buffer.putDouble(pointer.getDouble(0));
+                        buffer.putFloat((float) pointer.getDouble(0));
                         break;
                     }
                     case 'J': {

File: src/main/java/cn/banny/unidbg/linux/android/dvm/DalvikVM.java
Patch:
@@ -1227,7 +1227,7 @@ public long handle(Emulator emulator) {
                     log.debug("GetArrayLength array=" + array + ", lr=" + UnicornPointer.register(emulator, ArmConst.UC_ARM_REG_LR));
                 }
                 if (verbose) {
-                    System.out.println(String.format("JNIEnv->GetArrayLength(%s) was called", array.length()));
+                    System.out.println(String.format("JNIEnv->GetArrayLength(%s => %s) was called", array, array.length()));
                 }
                 return array.length();
             }
@@ -1248,7 +1248,7 @@ public long handle(Emulator emulator) {
                     throw new UnicornException("elementClass=" + elementClass);
                 }
 
-                DvmObject<?> obj = getObject(initialElement.toUIntPeer());
+                DvmObject<?> obj = size == 0 ? null : getObject(initialElement.toUIntPeer());
                 DvmObject<?>[] array = new DvmObject[size];
                 for (int i = 0; i < size; i++) {
                     array[i] = new DvmObject<>(dvmClass, obj);

File: src/main/java/cn/banny/unidbg/linux/android/dvm/DalvikVM64.java
Patch:
@@ -1208,7 +1208,7 @@ public long handle(Emulator emulator) {
                     log.debug("GetArrayLength array=" + array);
                 }
                 if (verbose) {
-                    System.out.println(String.format("JNIEnv->GetArrayLength(%s) was called", array.length()));
+                    System.out.println(String.format("JNIEnv->GetArrayLength(%s => %s) was called", array, array.length()));
                 }
                 return array.length();
             }

File: src/main/java/cn/banny/unidbg/arm/ARM.java
Patch:
@@ -566,6 +566,9 @@ static Arguments initArgs(Emulator emulator, Number... arguments) {
             i++;
         }
         Collections.reverse(list);
+        if (list.size() % 2 != 0) { // alignment sp
+            memory.allocateStack(emulator.getPointerSize());
+        }
         while (!list.isEmpty()) {
             Number number = list.remove(0);
             Pointer pointer = memory.allocateStack(emulator.getPointerSize());

File: src/main/java/cn/banny/unidbg/linux/AndroidElfLoader.java
Patch:
@@ -139,7 +139,9 @@ private void initializeTLS() {
         } else {
             unicorn.reg_write(Arm64Const.UC_ARM64_REG_TPIDR_EL0, tls.peer);
         }
-        log.debug("initializeTLS tls=" + tls + ", argv=" + argv + ", auxv=" + auxv + ", thread=" + thread + ", environ=" + environ);
+        if (log.isDebugEnabled()) {
+            log.debug("initializeTLS tls=" + tls + ", argv=" + argv + ", auxv=" + auxv + ", thread=" + thread + ", environ=" + environ + ", sp=0x" + Long.toHexString(getStackPoint()));
+        }
     }
 
     private final Map<String, LinuxModule> modules = new LinkedHashMap<>();

File: src/main/java/cn/banny/unidbg/linux/android/dvm/DalvikVM.java
Patch:
@@ -1204,7 +1204,7 @@ public long handle(Emulator emulator) {
                     log.debug("GetArrayLength array=" + array + ", lr=" + UnicornPointer.register(emulator, ArmConst.UC_ARM_REG_LR));
                 }
                 if (verbose) {
-                    System.out.println(String.format("JNIEnv->GetArrayLength(%s) was called", array));
+                    System.out.println(String.format("JNIEnv->GetArrayLength(%s) was called", array.length()));
                 }
                 return array.length();
             }

File: src/main/java/cn/banny/unidbg/linux/android/dvm/DalvikVM64.java
Patch:
@@ -1183,7 +1183,7 @@ public long handle(Emulator emulator) {
                     log.debug("GetArrayLength array=" + array);
                 }
                 if (verbose) {
-                    System.out.println(String.format("JNIEnv->GetArrayLength(%s) was called", array));
+                    System.out.println(String.format("JNIEnv->GetArrayLength(%s) was called", array.length()));
                 }
                 return array.length();
             }

File: src/main/java/cn/banny/unidbg/linux/android/dvm/DalvikVM.java
Patch:
@@ -147,7 +147,7 @@ public long handle(Emulator emulator) {
             public long handle(Emulator emulator) {
                 UnicornPointer object = UnicornPointer.register(emulator, ArmConst.UC_ARM_REG_R1);
                 if (object == null) {
-                    throw new UnicornException("object is null");
+                    return 0;
                 }
                 DvmObject<?> dvmObject = getObject(object.toUIntPeer());
                 if (log.isDebugEnabled()) {

File: src/main/java/cn/banny/unidbg/linux/android/dvm/DalvikVM64.java
Patch:
@@ -151,7 +151,7 @@ public long handle(Emulator emulator) {
             public long handle(Emulator emulator) {
                 UnicornPointer object = UnicornPointer.register(emulator, Arm64Const.UC_ARM64_REG_X1);
                 if (object == null) {
-                    throw new UnicornException("object is null");
+                    return 0;
                 }
                 DvmObject<?> dvmObject = getObject(object.toUIntPeer());
                 if (log.isDebugEnabled()) {

File: src/main/java/cn/banny/unidbg/unix/IO.java
Patch:
@@ -14,6 +14,7 @@ public interface IO {
     int S_IFREG    = 0x8000;   // regular file
     int S_IFDIR    = 0x4000;   // directory
     int S_IFCHR    = 0x2000;   // character device
+    int S_IFSOCK   = 0xc000;   // socket
 
     int AT_FDCWD = -100;
 

File: src/main/java/cn/banny/unidbg/unix/UnixSyscallHandler.java
Patch:
@@ -45,7 +45,7 @@ protected final int getMinFd() {
     }
 
     @Override
-    public final void addIOResolver(IOResolver resolver) {
+    public void addIOResolver(IOResolver resolver) {
         if (!resolvers.contains(resolver)) {
             resolvers.add(0, resolver);
         }

File: src/test/java/com/bytedance/frameworks/core/encrypt/TTEncrypt.java
Patch:
@@ -42,6 +42,7 @@ private TTEncrypt() throws IOException {
         memory.setCallInitFunction();
 
         vm = emulator.createDalvikVM(null);
+        vm.setVerbose(true);
         DalvikModule dm = vm.loadLibrary(new File("src/test/resources/example_binaries/libttEncrypt.so"), false);
         dm.callJNI_OnLoad(emulator);
         module = dm.getModule();

File: src/main/java/cn/banny/unidbg/linux/android/AndroidResolver.java
Patch:
@@ -146,8 +146,6 @@ public FileIO resolve(File workDir, String path, int oflags) {
                 IOUtils.closeQuietly(outputStream);
                 IOUtils.closeQuietly(inputStream);
             }
-        } else if ("/dev/__properties__".equals(path)) {
-            return new DirectoryFileIO(oflags, path);
         }
 
         return null;

File: src/main/java/cn/banny/unidbg/linux/android/dvm/DvmClass.java
Patch:
@@ -54,7 +54,7 @@ int getStaticMethodID(String methodName, String args) {
         if (log.isDebugEnabled()) {
             log.debug("getStaticMethodID name=" + name + ", hash=0x" + Long.toHexString(hash));
         }
-        staticMethodMap.put(hash, new DvmMethod(this, methodName, args));
+        staticMethodMap.put(hash, new DvmMethod(this, methodName, args, true));
         return (int) hash;
     }
 
@@ -79,7 +79,7 @@ int getMethodID(String methodName, String args) {
         if (log.isDebugEnabled()) {
             log.debug("getMethodID name=" + name + ", hash=0x" + Long.toHexString(hash));
         }
-        methodMap.put(hash, new DvmMethod(this, methodName, args));
+        methodMap.put(hash, new DvmMethod(this, methodName, args, false));
         return (int) hash;
     }
 

File: src/main/java/cn/banny/unidbg/linux/android/dvm/VM.java
Patch:
@@ -71,4 +71,6 @@ public interface VM {
      * VM throw exception
      */
     void throwException(DvmObject<?> throwable);
+
+    void setVerbose(boolean verbose);
 }

File: src/main/java/cn/banny/unidbg/linux/file/SimpleFileIO.java
Patch:
@@ -157,6 +157,8 @@ public int fstat(Emulator emulator, Unicorn unicorn, Pointer stat) {
          */
         stat.setLong(0x0, 0); // st_dev
         stat.setInt(0x10, st_mode); // st_mode
+        stat.setInt(0x18, 0); // st_uid
+        stat.setInt(0x1c, 0); // st_gid
         stat.setLong(0x30, file.length()); // st_size
         stat.setInt(0x38, emulator.getPageAlign()); // st_blksize
         stat.setLong(0x60, 0); // st_ino

File: src/main/java/cn/banny/unidbg/linux/ARM64SyscallHandler.java
Patch:
@@ -1319,7 +1319,7 @@ private long mmap(Unicorn u, Emulator emulator) {
     private int gettimeofday(Emulator emulator) {
         Pointer tv = UnicornPointer.register(emulator, Arm64Const.UC_ARM64_REG_X0);
         Pointer tz = UnicornPointer.register(emulator, Arm64Const.UC_ARM64_REG_X1);
-        return gettimeofday(tv, tz);
+        return gettimeofday64(tv, tz);
     }
 
     private int faccessat(Emulator emulator) {

File: src/main/java/cn/banny/unidbg/unix/struct/TimeVal32.java
Patch:
@@ -6,9 +6,9 @@
 import java.util.Arrays;
 import java.util.List;
 
-public class TimeVal extends UnicornStructure {
+public class TimeVal32 extends UnicornStructure {
 
-    public TimeVal(Pointer p) {
+    public TimeVal32(Pointer p) {
         super(p);
     }
 

File: src/test/java/com/sun/jna/JniDispatch32.java
Patch:
@@ -130,7 +130,7 @@ public void preCall(Emulator emulator, RegisterContext ctx, HookEntryInfo info)
     }
 
     @Override
-    public DvmObject callStaticObjectMethod(BaseVM vm, DvmClass dvmClass, String signature, VarArg varArg) {
+    public DvmObject<?> callStaticObjectMethod(BaseVM vm, DvmClass dvmClass, String signature, VarArg varArg) {
         if ("java/lang/System->getProperty(Ljava/lang/String;)Ljava/lang/String;".equals(signature)) {
             StringObject string = varArg.getObject(0);
             return new StringObject(vm, System.getProperty(string.getValue()));

File: src/test/java/com/sun/jna/JniDispatch64.java
Patch:
@@ -8,7 +8,6 @@
 import cn.banny.unidbg.arm.ARMEmulator;
 import cn.banny.unidbg.arm.HookStatus;
 import cn.banny.unidbg.arm.context.RegisterContext;
-import cn.banny.unidbg.debugger.DebuggerType;
 import cn.banny.unidbg.hook.ReplaceCallback;
 import cn.banny.unidbg.hook.hookzz.HookEntryInfo;
 import cn.banny.unidbg.hook.hookzz.HookZz;
@@ -125,14 +124,14 @@ public void preCall(Emulator emulator, RegisterContext ctx, HookEntryInfo info)
         vm.deleteLocalRefs();
         System.out.println("getAPIChecksum checksum=" + checksum.getValue() + ", offset=" + (System.currentTimeMillis() - start) + "ms");
 
-        emulator.attach(DebuggerType.GDB_SERVER);
+//        emulator.attach(DebuggerType.GDB_SERVER);
         ret = Native.callStaticJniMethod(emulator, "sizeof(I)I", 0);
         vm.deleteLocalRefs();
         System.out.println("sizeof POINTER_SIZE=" + ret.intValue() + ", offset=" + (System.currentTimeMillis() - start) + "ms");
     }
 
     @Override
-    public DvmObject callStaticObjectMethod(BaseVM vm, DvmClass dvmClass, String signature, VarArg varArg) {
+    public DvmObject<?> callStaticObjectMethod(BaseVM vm, DvmClass dvmClass, String signature, VarArg varArg) {
         if ("java/lang/System->getProperty(Ljava/lang/String;)Ljava/lang/String;".equals(signature)) {
             StringObject string = varArg.getObject(0);
             return new StringObject(vm, System.getProperty(string.getValue()));

File: src/main/java/cn/banny/unidbg/TraceMemoryHook.java
Patch:
@@ -43,10 +43,10 @@ public void hook(Unicorn u, long address, int size, Object user) {
             value = Hex.encodeHexString(data);
         }
         Emulator emulator = (Emulator) user;
+        printMsg("### Memory READ at 0x", emulator, address, size, value);
         if (traceReadListener != null) {
             traceReadListener.onRead(emulator, address, data, value);
         }
-        printMsg("### Memory READ at 0x", emulator, address, size, value);
     }
 
     private void printMsg(String type, Emulator emulator, long address, int size, String value) {
@@ -70,10 +70,10 @@ public void hook(Unicorn u, long address, int size, long value, Object user) {
         }
 
         Emulator emulator = (Emulator) user;
+        printMsg("### Memory WRITE at 0x", emulator, address, size, "0x" + Long.toHexString(value));
         if (traceWriteListener != null) {
             traceWriteListener.onWrite(emulator, address, size, value);
         }
-        printMsg("### Memory WRITE at 0x", emulator, address, size, "0x" + Long.toHexString(value));
     }
 
 }

File: src/main/java/cn/banny/unidbg/linux/android/dvm/BaseVM.java
Patch:
@@ -49,13 +49,13 @@ public final void setJni(Jni jni) {
     final Map<Long, DvmObject> localObjectMap = new HashMap<>();
 
     @Override
-    public final DvmClass resolveClass(String className) {
+    public final DvmClass resolveClass(String className, DvmClass... interfaceClasses) {
         long hash = Objects.hash(className) & 0xffffffffL;
         DvmClass dvmClass = classMap.get(hash);
         if (dvmClass != null) {
             return dvmClass;
         } else {
-            dvmClass = new DvmClass(this, className);
+            dvmClass = new DvmClass(this, className, interfaceClasses);
             classMap.put(hash, dvmClass);
             addObject(dvmClass, true);
             return dvmClass;

File: src/main/java/cn/banny/unidbg/linux/android/dvm/VM.java
Patch:
@@ -25,7 +25,7 @@ public interface VM {
 
     Pointer getJNIEnv();
 
-    DvmClass resolveClass(String className);
+    DvmClass resolveClass(String className, DvmClass... interfaceClasses);
     DvmClass findClass(String className);
 
     <T extends DvmObject> T getObject(long hash);

File: src/main/java/cn/banny/unidbg/linux/AndroidElfLoader.java
Patch:
@@ -118,7 +118,7 @@ private void initializeTLS() {
         }
         auxv.setPointer(emulator.getPointerSize(), __stack_chk_guard);
 
-        final Pointer environ = allocateStack(emulator.getPointerSize());
+        final Pointer environ = allocateStack(8);
         assert environ != null;
         environ.setInt(0, 0);
 

File: src/main/java/cn/banny/unidbg/file/FileIO.java
Patch:
@@ -23,6 +23,8 @@ public interface FileIO {
     int SEEK_CUR = 1;
     int SEEK_END = 2;
 
+    int SIOCGIFCONF = 0x8912;
+
     void close();
 
     int write(byte[] data);

File: src/test/java/com/bytedance/frameworks/core/encrypt/TTEncrypt.java
Patch:
@@ -144,7 +144,7 @@ public HookStatus onCall(Emulator emulator, long originFunction) {
 
         long start = System.currentTimeMillis();
         byte[] data = new byte[16];
-        emulator.attach(DebuggerType.ANDROID_SERVER_V73);
+        emulator.attach(DebuggerType.GDB_SERVER);
         Number ret = TTEncryptUtils.callStaticJniMethod(emulator, "ttEncrypt([BI)[B", vm.addLocalObject(new ByteArray(data)), data.length);
         long hash = ret.intValue() & 0xffffffffL;
         ByteArray array = vm.getObject(hash);

File: src/main/java/cn/banny/unidbg/Emulator.java
Patch:
@@ -2,6 +2,7 @@
 
 import cn.banny.unidbg.arm.context.RegisterContext;
 import cn.banny.unidbg.debugger.Debugger;
+import cn.banny.unidbg.debugger.DebuggerType;
 import cn.banny.unidbg.linux.android.dvm.VM;
 import cn.banny.unidbg.memory.Memory;
 import cn.banny.unidbg.memory.SvcMemory;
@@ -91,14 +92,14 @@ public interface Emulator extends Closeable, Disassembler, ValuePair {
      */
     Debugger attach();
 
-    Debugger attach(boolean gdbServer);
+    Debugger attach(DebuggerType type);
 
     /**
      * note: low performance
      */
     Debugger attach(long begin, long end);
 
-    Debugger attach(long begin, long end, boolean gdbServer);
+    Debugger attach(long begin, long end, DebuggerType type);
 
     void setWorkDir(File dir);
     File getWorkDir();

File: src/test/java/com/bytedance/frameworks/core/encrypt/TTEncrypt.java
Patch:
@@ -9,6 +9,7 @@
 import cn.banny.unidbg.arm.HookStatus;
 import cn.banny.unidbg.arm.context.Arm32RegisterContext;
 import cn.banny.unidbg.arm.context.RegisterContext;
+import cn.banny.unidbg.debugger.DebuggerType;
 import cn.banny.unidbg.hook.ReplaceCallback;
 import cn.banny.unidbg.hook.hookzz.HookEntryInfo;
 import cn.banny.unidbg.hook.hookzz.HookZz;
@@ -143,7 +144,7 @@ public HookStatus onCall(Emulator emulator, long originFunction) {
 
         long start = System.currentTimeMillis();
         byte[] data = new byte[16];
-        emulator.attach(true);
+        emulator.attach(DebuggerType.ANDROID_SERVER);
         Number ret = TTEncryptUtils.callStaticJniMethod(emulator, "ttEncrypt([BI)[B", vm.addLocalObject(new ByteArray(data)), data.length);
         long hash = ret.intValue() & 0xffffffffL;
         ByteArray array = vm.getObject(hash);

File: src/test/java/com/sun/jna/JniDispatch64.java
Patch:
@@ -8,6 +8,7 @@
 import cn.banny.unidbg.arm.ARMEmulator;
 import cn.banny.unidbg.arm.HookStatus;
 import cn.banny.unidbg.arm.context.RegisterContext;
+import cn.banny.unidbg.debugger.DebuggerType;
 import cn.banny.unidbg.hook.ReplaceCallback;
 import cn.banny.unidbg.hook.hookzz.HookEntryInfo;
 import cn.banny.unidbg.hook.hookzz.HookZz;
@@ -124,7 +125,7 @@ public void preCall(Emulator emulator, RegisterContext ctx, HookEntryInfo info)
         vm.deleteLocalRefs();
         System.out.println("getAPIChecksum checksum=" + checksum.getValue() + ", offset=" + (System.currentTimeMillis() - start) + "ms");
 
-        emulator.attach(true);
+        emulator.attach(DebuggerType.GDB_SERVER);
         ret = Native.callStaticJniMethod(emulator, "sizeof(I)I", 0);
         vm.deleteLocalRefs();
         System.out.println("sizeof POINTER_SIZE=" + ret.intValue() + ", offset=" + (System.currentTimeMillis() - start) + "ms");

File: src/main/java/cn/banny/unidbg/linux/file/SimpleFileIO.java
Patch:
@@ -141,7 +141,7 @@ public int fstat(Emulator emulator, Unicorn unicorn, Pointer stat) {
         stat.setLong(0x0, 0); // st_dev
         stat.setInt(0x10, st_mode); // st_mode
         stat.setLong(0x30, file.length()); // st_size
-        stat.setInt(0x38, (int) ARM.alignSize(file.length(), emulator.getPageAlign())); // st_blksize
+        stat.setInt(0x38, emulator.getPageAlign()); // st_blksize
         stat.setLong(0x60, 0); // st_ino
         return 0;
     }

File: src/main/java/cn/banny/unidbg/ios/MachOLoader.java
Patch:
@@ -1456,7 +1456,7 @@ public Module getExecutableModule() {
     public long mmap2(long start, int length, int prot, int flags, int fd, int offset) {
         int aligned = (int) ARM.alignSize(length, emulator.getPageAlign());
 
-        if (((flags & MAP_ANONYMOUS) != 0) || (start == 0 && fd <= 0 && offset == 0)) {
+        if (((flags & cn.banny.unidbg.ios.MachO.MAP_ANONYMOUS) != 0) || (start == 0 && fd <= 0 && offset == 0)) {
             long addr = allocateMapAddress(0, aligned);
             log.debug("mmap2 addr=0x" + Long.toHexString(addr) + ", mmapBaseAddress=0x" + Long.toHexString(mmapBaseAddress) + ", start=" + start + ", fd=" + fd + ", offset=" + offset + ", aligned=" + aligned);
             unicorn.mem_map(addr, aligned, prot);

File: src/main/java/cn/banny/unidbg/linux/android/dvm/AbstractJni.java
Patch:
@@ -335,6 +335,8 @@ public DvmObject callObjectMethod(BaseVM vm, DvmObject dvmObject, String signatu
             }
             case "android/content/Context->getPackageManager()Landroid/content/pm/PackageManager;":
                 return new DvmObject<Object>(vm.resolveClass("android/content/pm/PackageManager"), null);
+            case "android/content/Context->getApplicationInfo()Landroid/content/pm/ApplicationInfo;":
+                return new ApplicationInfo(vm);
             case "android/content/Context->getPackageName()Ljava/lang/String;": {
                 String packageName = vm.getPackageName();
                 if (packageName != null) {

File: src/main/java/cn/banny/unidbg/spi/AbstractLoader.java
Patch:
@@ -98,7 +98,7 @@ protected final long allocateMapAddress(long mask, long length) {
         return addr;
     }
 
-    private static final int MAP_ANONYMOUS = 0x20;
+    public static final int MAP_ANONYMOUS = 0x20;
 
     @Override
     public long mmap2(long start, int length, int prot, int flags, int fd, int offset) {

File: src/main/java/cn/banny/unidbg/spi/Dlfcn.java
Patch:
@@ -13,9 +13,9 @@ public abstract class Dlfcn implements HookListener {
     protected final UnicornPointer error;
 
     protected Dlfcn(SvcMemory svcMemory) {
-        error = svcMemory.allocate(0x40, "Dlfcn.error");
+        error = svcMemory.allocate(0x80, "Dlfcn.error");
         assert error != null;
-        error.setMemory(0, 0x40, (byte) 0);
+        error.setMemory(0, 0x80, (byte) 0);
     }
 
     protected final long dlsym(Memory memory, long handle, String symbolName) {

File: src/main/java/cn/banny/unidbg/linux/android/AndroidARMEmulator.java
Patch:
@@ -85,11 +85,11 @@ protected final void setupTraps() {
             if (log.isDebugEnabled()) {
                 log.debug("__kuser_memory_barrier");
                 for (int i = 0; i < __kuser_memory_barrier.length; i += 4) {
-                    printAssemble(0xffff0fa0L + i, 4);
+                    printAssemble(System.err, 0xffff0fa0L + i, 4);
                 }
                 log.debug("__kuser_cmpxchg");
                 for (int i = 0; i < __kuser_cmpxchg.length; i += 4) {
-                    printAssemble(0xffff0fc0L + i, 4);
+                    printAssemble(System.err, 0xffff0fc0L + i, 4);
                 }
             }
         }

File: src/main/java/cn/banny/unidbg/spi/Disassembler.java
Patch:
@@ -2,14 +2,16 @@
 
 import capstone.Capstone;
 
+import java.io.PrintStream;
+
 /**
  * disassembler
  * Created by zhkl0228 on 2017/5/9.
  */
 
 public interface Disassembler {
 
-    boolean printAssemble(long address, int size);
+    boolean printAssemble(PrintStream out, long address, int size);
     Capstone.CsInsn[] disassemble(long address, int size, long count);
     Capstone.CsInsn[] disassemble(long address, byte[] code, boolean thumb);
 

File: src/main/java/cn/banny/unidbg/arm/AbstractARM64Emulator.java
Patch:
@@ -93,7 +93,7 @@ private void enableVFP() {
 
     @Override
     protected Debugger createDebugger() {
-        return new SimpleARMDebugger(this);
+        return new SimpleARM64Debugger(this);
     }
 
     @Override

File: src/main/java/cn/banny/unidbg/ios/Dyld64.java
Patch:
@@ -185,7 +185,7 @@ public UnicornPointer onRegister(SvcMemory svcMemory, int svcNumber) {
                                         "ldr x0, [sp]", // with return address
                                         "add sp, sp, #0x8",
 
-                                        "ldp x20, x30, [sp]",
+                                        "ldp x29, x30, [sp]",
                                         "add sp, sp, #0x10",
                                         "ret"));
                                 byte[] code = encoded.getMachineCode();
@@ -437,7 +437,7 @@ public UnicornPointer onRegister(SvcMemory svcMemory, int svcNumber) {
                                         "ldr x0, [sp]", // with return address
                                         "add sp, sp, #0x8",
 
-                                        "ldp x20, x30, [sp]",
+                                        "ldp x29, x30, [sp]",
                                         "add sp, sp, #0x10",
                                         "ret"));
                                 byte[] code = encoded.getMachineCode();

File: src/main/java/cn/banny/unidbg/linux/android/ArmLD64.java
Patch:
@@ -87,7 +87,7 @@ public UnicornPointer onRegister(SvcMemory svcMemory, int svcNumber) {
                                         "ldr x0, [sp]", // with return address
                                         "add sp, sp, #0x8",
 
-                                        "ldp x20, x30, [sp]",
+                                        "ldp x29, x30, [sp]",
                                         "add sp, sp, #0x10",
                                         "ret"));
                                 byte[] code = encoded.getMachineCode();

File: src/test/java/cn/banny/unidbg/ios/Substrate64Test.java
Patch:
@@ -39,6 +39,7 @@ public void testMS() throws Exception {
 //        emulator.attach().addBreakPoint(null, 0x404c3398);
 //        emulator.traceCode();
 //        loader.setObjcRuntime(true);
+        Logger.getLogger("cn.banny.unidbg.AbstractEmulator").setLevel(Level.DEBUG);
         Module module = emulator.loadLibrary(new File("src/test/resources/example_binaries/libsubstrate.dylib"));
 
 //        Logger.getLogger("cn.banny.emulator.ios.ARM32SyscallHandler").setLevel(Level.DEBUG);
@@ -155,7 +156,6 @@ public HookStatus onCall(Emulator emulator, long originFunction) {
             }
         });*/
 
-        Logger.getLogger("cn.banny.unidbg.AbstractEmulator").setLevel(Level.DEBUG);
 //        emulator.traceCode();
         whale.WImportHookFunction("_strcmp", new ReplaceCallback() {
             @Override

File: src/main/java/cn/banny/unidbg/file/FileIO.java
Patch:
@@ -30,7 +30,7 @@ public interface FileIO {
     int read(Unicorn unicorn, Pointer buffer, int count);
 
     int fstat(Emulator emulator, Unicorn unicorn, Pointer stat);
-    int fstat(StatStructure stat);
+    int fstat(Emulator emulator, StatStructure stat);
 
     int fcntl(int cmd, int arg);
 
@@ -65,4 +65,6 @@ public interface FileIO {
     int recvfrom(Unicorn unicorn, Pointer buf, int len, int flags, Pointer src_addr, Pointer addrlen);
 
     int fstatfs(StatFS statFS);
+
+    String getPath();
 }

File: src/main/java/cn/banny/unidbg/file/StatStructure.java
Patch:
@@ -13,7 +13,7 @@ public StatStructure(Pointer p) {
     public int st_dev; /* [XSI] ID of device containing file */
     public short st_mode; /* [XSI] Mode of file (see below) */
     public short st_nlink; /* [XSI] Number of hard links */
-    public long st_ino; /* [XSI] File serial number */
+    public Pointer st_ino; /* [XSI] File serial number */
 
     public int st_uid; /* [XSI] User ID of the file */
     public int st_gid; /* [XSI] Group ID of the file */
@@ -24,8 +24,8 @@ public StatStructure(Pointer p) {
     public TimeSpec st_ctimespec; /* time of last status change */
     public TimeSpec st_birthtimespec; /* time of file creation(birth) */
 
-    public long st_size; /* [XSI] file size, in bytes */
-    public long st_blocks; /* [XSI] blocks allocated for file */
+    public Pointer st_size; /* [XSI] file size, in bytes */
+    public Pointer st_blocks; /* [XSI] blocks allocated for file */
     public int st_blksize; /* [XSI] optimal blocksize for I/O */
 
     public int st_flags; /* user defined flags for file */

File: src/main/java/cn/banny/unidbg/ios/ARM64SyscallHandler.java
Patch:
@@ -381,7 +381,7 @@ private int stat64(Emulator emulator) {
     protected int stat64(Emulator emulator, String pathname, Pointer statbuf) {
         FileIO io = resolve(emulator, pathname, FileIO.O_RDONLY);
         if (io != null) {
-            return io.fstat(new Stat(statbuf));
+            return io.fstat(emulator, new Stat(statbuf));
         }
 
         emulator.getMemory().setErrno(UnixEmulator.EACCES);

File: src/main/java/cn/banny/unidbg/ios/MachO.java
Patch:
@@ -85,4 +85,6 @@ public interface MachO {
 
     int VM_FLAGS_OVERWRITE = 0x4000; /* delete any existing mappings first */
 
+    int F_GETPATH = 50; /* return the full path of the fd */
+
 }

File: src/main/java/cn/banny/unidbg/ios/struct/kernel/Stat.java
Patch:
@@ -6,10 +6,11 @@
 import java.util.Arrays;
 import java.util.List;
 
-public class Stat extends StatStructure {
+public final class Stat extends StatStructure {
 
     public Stat(Pointer p) {
         super(p);
+        unpack();
     }
 
     @Override

File: src/main/java/cn/banny/unidbg/unix/UnixSyscallHandler.java
Patch:
@@ -183,7 +183,7 @@ public final int open(Emulator emulator, String pathname, int oflags) {
         return -1;
     }
 
-    protected final int fcntl(Emulator emulator, int fd, int cmd, int arg) {
+    protected int fcntl(Emulator emulator, int fd, int cmd, int arg) {
         if (log.isDebugEnabled()) {
             log.debug("fcntl fd=" + fd + ", cmd=" + cmd + ", arg=" + arg);
         }
@@ -281,7 +281,7 @@ protected final int sendto(Emulator emulator, int sockfd, Pointer buf, int len,
         return file.sendto(data, flags, dest_addr, addrlen);
     }
 
-    protected final int fstat(Emulator emulator, int fd, Pointer stat) {
+    protected int fstat(Emulator emulator, int fd, Pointer stat) {
         if (log.isDebugEnabled()) {
             log.debug("fstat fd=" + fd + ", stat=" + stat);
         }

File: src/main/java/cn/banny/unidbg/arm/SimpleARMDebugger.java
Patch:
@@ -199,7 +199,7 @@ private void loop(Emulator emulator, Unicorn u, long address, int size) {
                         reg = isARM32 ? ArmConst.UC_ARM_REG_SP : Arm64Const.UC_ARM64_REG_SP;
                         name = "sp";
                     } else if (command.startsWith("m0x")) {
-                        long addr = Long.parseLong(command.substring(3), 16);
+                        long addr = Long.parseLong(command.substring(3).trim(), 16);
                         Pointer pointer = UnicornPointer.pointer(emulator, addr);
                         if (pointer != null) {
                             dumpMemory(pointer, length, pointer.toString(), nullTerminated);

File: src/main/java/cn/banny/unidbg/unix/UnixSyscallHandler.java
Patch:
@@ -83,7 +83,7 @@ protected final int gettimeofday(Pointer tv, Pointer tz) {
 
         if (log.isDebugEnabled()) {
             byte[] before = tv.getByteArray(0, 8);
-            Inspector.inspect(before, "gettimeofday tv");
+            Inspector.inspect(before, "gettimeofday tv=" + tv);
         }
         if (tz != null && log.isDebugEnabled()) {
             byte[] before = tz.getByteArray(0, 8);
@@ -109,7 +109,7 @@ protected final int gettimeofday(Pointer tv, Pointer tz) {
 
         if (log.isDebugEnabled()) {
             byte[] after = tv.getByteArray(0, 8);
-            Inspector.inspect(after, "gettimeofday tv after tv_sec=" + tv_sec + ", tv_usec=" + tv_usec);
+            Inspector.inspect(after, "gettimeofday tv after tv_sec=" + tv_sec + ", tv_usec=" + tv_usec + ", tv=" + tv);
         }
         if (tz != null && log.isDebugEnabled()) {
             byte[] after = tz.getByteArray(0, 8);

File: src/main/java/cn/banny/unidbg/ios/Dyld32.java
Patch:
@@ -531,7 +531,7 @@ private int dlopen(Emulator emulator, String path, int mode) {
                     mm.initFunctionList.clear();
                 }
 
-                return (int) module.base;
+                return (int) ((MachOModule) module).machHeader;
             }
         } catch (IOException e) {
             throw new IllegalStateException(e);

File: src/main/java/cn/banny/unidbg/linux/LinuxThread.java
Patch:
@@ -1,18 +1,19 @@
 package cn.banny.unidbg.linux;
 
+import cn.banny.unidbg.pointer.UnicornPointer;
 import com.sun.jna.Pointer;
 
 public class LinuxThread {
 
     // Our 'tls' and __pthread_clone's 'child_stack' are one and the same, just growing in
     // opposite directions.
     final Pointer child_stack;
-    final Pointer fn;
+    final UnicornPointer fn;
     final Pointer arg;
 
     LinuxThread(Pointer child_stack, Pointer fn, Pointer arg) {
         this.child_stack = child_stack;
-        this.fn = fn;
+        this.fn = (UnicornPointer) fn;
         this.arg = arg;
     }
 

File: src/test/java/com/didi/security/wireless/SecurityLib.java
Patch:
@@ -45,7 +45,7 @@ private SecurityLib() throws IOException {
         System.out.println("== init ===");
 
         final Memory memory = emulator.getMemory();
-        memory.setLibraryResolver(new AndroidResolver(19));
+        memory.setLibraryResolver(new AndroidResolver(23));
         memory.setCallInitFunction();
 
         vm = emulator.createDalvikVM(new File(APK_PATH));
@@ -105,7 +105,7 @@ private void sign() {
 
 //        emulator.traceCode();
         DvmObject context = vm.resolveClass("android/content/Context").newObject(null);
-        long timestamp = 1558509659026L;
+        long timestamp = System.currentTimeMillis();
         Number ret = SecurityLib.callStaticJniMethod(emulator, "nativeSig(Landroid/content/Context;JLjava/lang/String;[B)Ljava/lang/String;",
                 context,
                 0, (int) timestamp, (int) (timestamp >> 32), // 一个long占两个int，所以要放两个寄存器，R0, R1, R2被占用，只剩R3的时候则组成long的两个int都放堆栈

File: src/main/java/cn/banny/unidbg/linux/android/dvm/ArmVarArg.java
Patch:
@@ -40,7 +40,8 @@ public <T extends DvmObject> T getObject(int index) {
 
     @Override
     public int getInt(int index) {
-        return (int) getArg(index).peer;
+        UnicornPointer pointer = getArg(index);
+        return pointer == null ? 0 : (int) pointer.peer;
     }
 
     private UnicornPointer getArg(int index) {

File: src/main/java/cn/banny/unidbg/linux/android/dvm/Jni.java
Patch:
@@ -26,6 +26,8 @@ public interface Jni {
 
     void callVoidMethodV(BaseVM vm, DvmObject dvmObject, String signature, VaList vaList);
 
+    boolean callBooleanMethod(BaseVM vm, DvmObject dvmObject, String signature, VarArg varArg);
+
     boolean callBooleanMethodV(BaseVM vm, DvmObject dvmObject, String signature, VaList vaList);
 
     int callIntMethod(BaseVM vm, DvmObject dvmObject, String signature, VarArg varArg);

File: src/main/java/net/fornwall/jelf/AndroidRelocationIterator.java
Patch:
@@ -19,9 +19,10 @@ public class AndroidRelocationIterator implements Iterator<MemoizedObject<ElfRel
     private static final int RELOCATION_GROUP_HAS_ADDEND_FLAG = 8;
 
     private long readSleb128() {
-        return Utils.readSignedLeb128(buffer);
+        return Utils.readSignedLeb128(buffer, objectSize == ElfFile.CLASS_32 ? 32 : 64);
     }
 
+    private final int objectSize;
     private final ByteBuffer buffer;
 
     private long relocation_count_;
@@ -34,6 +35,7 @@ public AndroidRelocationIterator(int objectSize, SymbolLocator symtab, byte[] an
             Inspector.inspect(androidRelData, "androidRelData hex=" + Hex.encodeHexString(androidRelData));
         }
 
+        this.objectSize = objectSize;
         this.buffer = ByteBuffer.wrap(androidRelData);
         this.rela = rela;
         reloc_ = new ElfRelocation(objectSize, symtab);

File: src/main/java/net/fornwall/jelf/AndroidRelocationIterator.java
Patch:
@@ -127,10 +127,9 @@ private boolean read_group_fields() {
             }
             reloc_.addend += readSleb128();
         } else if (!is_relocation_group_has_addend()) {
-            if (!rela) {
-                throw new IllegalStateException();
+            if (rela) {
+                reloc_.addend = 0;
             }
-            reloc_.addend = 0;
         }
 
         relocation_group_index_ = 0;

File: src/main/java/cn/banny/emulator/pointer/UnicornPointer.java
Patch:
@@ -213,7 +213,7 @@ public double getDouble(long offset) {
 
     @Override
     public UnicornPointer getPointer(long offset) {
-        return pointer(emulator, pointerSize == 4 ? (Number) getInt(offset) : (Number) getLong(0));
+        return pointer(emulator, pointerSize == 4 ? (Number) getInt(offset) : (Number) getLong(offset));
     }
 
     @Override

File: src/test/java/cn/banny/emulator/SubstrateTest.java
Patch:
@@ -37,9 +37,9 @@ protected Emulator createARMEmulator() {
     public void testMS() throws Exception {
         MachOLoader loader = (MachOLoader) emulator.getMemory();
         loader.setCallInitFunction();
-        emulator.attach().addBreakPoint(null, 0x4097855c);
+//        emulator.attach().addBreakPoint(null, 0x4097855c);
 //        emulator.traceCode();
-        loader.setObjcRuntime(true);
+//        loader.setObjcRuntime(true);
         Module module = emulator.loadLibrary(new File("src/test/resources/example_binaries/libsubstrate.dylib"));
 
 //        Logger.getLogger("cn.banny.emulator.ios.ARM32SyscallHandler").setLevel(Level.DEBUG);

File: src/main/java/cn/banny/emulator/ios/Dyld.java
Patch:
@@ -199,7 +199,7 @@ public int handle(Emulator emulator) {
 
                             DlInfo dlInfo = new DlInfo(info);
                             dlInfo.dli_fname = module.createPathMemory(svcMemory);
-                            dlInfo.dli_fbase = UnicornPointer.pointer(emulator, module.base);
+                            dlInfo.dli_fbase = UnicornPointer.pointer(emulator, module.machHeader);
                             if (symbol != null) {
                                 dlInfo.dli_sname = symbol.createNameMemory(svcMemory);
                                 dlInfo.dli_saddr = UnicornPointer.pointer(emulator, symbol.getAddress());
@@ -359,9 +359,9 @@ public int handle(Emulator emulator) {
                                         pointer.setInt(0, computeSlide(emulator, mm.machHeader));
 
                                         if (log.isDebugEnabled()) {
-                                            log.debug("[" + md.name + "]PushAddImageFunction: 0x" + Long.toHexString(md.base));
+                                            log.debug("[" + md.name + "]PushAddImageFunction: 0x" + Long.toHexString(mm.machHeader));
                                         } else if (Dyld.log.isDebugEnabled()) {
-                                            Dyld.log.debug("[" + md.name + "]PushAddImageFunction: 0x" + Long.toHexString(md.base));
+                                            Dyld.log.debug("[" + md.name + "]PushAddImageFunction: 0x" + Long.toHexString(mm.machHeader));
                                         }
                                         pointer = pointer.share(-4); // callback
                                         pointer.setPointer(0, callback);

File: src/main/java/cn/banny/emulator/ios/MachOLoader.java
Patch:
@@ -1228,7 +1228,7 @@ private void setExecuteModule(MachOModule module) {
         if (executableModule == null) {
             executableModule = module;
 
-            vars.setPointer(0, UnicornPointer.pointer(emulator, module.base)); // _NSGetMachExecuteHeader
+            vars.setPointer(0, UnicornPointer.pointer(emulator, module.machHeader)); // _NSGetMachExecuteHeader
         }
     }
 

File: src/main/java/cn/banny/emulator/Module.java
Patch:
@@ -49,6 +49,8 @@ public final Symbol findSymbolByName(String name) throws IOException {
 
     public abstract Symbol findSymbolByName(String name, boolean withDependencies) throws IOException;
 
+    public abstract Symbol findNearestSymbolByAddress(long addr);
+
     protected final Symbol findDependencySymbolByName(String name) throws IOException {
         for (Module module : neededLibraries.values()) {
             Symbol symbol = module.findSymbolByName(name, true);

File: src/main/java/cn/banny/emulator/ios/MachO.java
Patch:
@@ -66,5 +66,6 @@ interface MachO {
     int BIND_TYPE_TEXT_PCREL32 = 3;
 
     int RTLD_DEFAULT = -2;
+    int RTLD_MAIN_ONLY = -5;
 
 }

File: src/main/java/cn/banny/emulator/ios/MachOLoader.java
Patch:
@@ -1038,7 +1038,7 @@ private void doBindAt(Log log, long libraryOrdinal, int type, long address, Stri
         }
 
         if (log.isDebugEnabled()) {
-            log.debug("doBindAt 0x=" + Long.toHexString(bindAt) + ", type=" + type + ", symbolName=" + symbolName + ", symbolFlags=" + symbolFlags + ", addend=" + addend + ", address=0x" + Long.toHexString(address - module.base) + ", lazy=" + lazy + ", symbol=" + symbol);
+            log.debug("doBindAt 0x=" + Long.toHexString(symbol.getValue()) + ", type=" + type + ", symbolName=" + symbolName + ", symbolFlags=" + symbolFlags + ", addend=" + addend + ", address=0x" + Long.toHexString(address - module.base) + ", lazy=" + lazy + ", symbol=" + symbol);
         }
 
         Pointer newPointer = UnicornPointer.pointer(emulator, bindAt);

File: src/main/java/cn/banny/emulator/ios/MachOModuleInit.java
Patch:
@@ -28,10 +28,11 @@ class MachOModuleInit extends InitFunction {
      * initializer(int argc, const char* argv[], const char* envp[], const char* apple[], const struct ProgramVars* vars)
      */
     public void call(Emulator emulator) {
+//        emulator.traceCode();
         for (long addr : addresses) {
             log.debug("[" + libName + "]CallInitFunction: 0x" + Long.toHexString(addr));
-//            emulator.attach().addBreakPoint(null, 0x400d60e0);
-//            emulator.attach().addBreakPoint(null, 0x4030117e);
+//            emulator.attach().addBreakPoint(null, 0x4012be50);
+//            emulator.attach().addBreakPoint(null, 0x4012bdd0);
             if ("libSystem.B.dylib".equals(libName)) {
 //                emulator.traceCode();
             }

File: src/main/java/cn/banny/emulator/spi/AbstractLoader.java
Patch:
@@ -101,7 +101,7 @@ private long allocateMapAddress(int length) {
     public final int mmap2(long start, int length, int prot, int flags, int fd, int offset) {
         int aligned = (int) ARM.alignSize(length, emulator.getPageAlign());
 
-        if (((flags & MAP_ANONYMOUS) != 0) || (start == 0 && fd == -1 && offset == 0)) {
+        if (((flags & MAP_ANONYMOUS) != 0) || (start == 0 && fd <= 0 && offset == 0)) {
             long addr = allocateMapAddress(aligned);
             log.debug("mmap2 addr=0x" + Long.toHexString(addr) + ", mmapBaseAddress=0x" + Long.toHexString(mmapBaseAddress) + ", start=" + start + ", fd=" + fd + ", offset=" + offset + ", aligned=" + aligned);
             unicorn.mem_map(addr, aligned, prot);
@@ -110,7 +110,7 @@ public final int mmap2(long start, int length, int prot, int flags, int fd, int
         }
         try {
             FileIO file;
-            if (start == 0 && fd >= 0 && (file = syscallHandler.fdMap.get(fd)) != null) {
+            if (start == 0 && fd > 0 && (file = syscallHandler.fdMap.get(fd)) != null) {
                 long addr = allocateMapAddress(aligned);
                 log.debug("mmap2 addr=0x" + Long.toHexString(addr) + ", mmapBaseAddress=0x" + Long.toHexString(mmapBaseAddress));
                 return file.mmap2(unicorn, addr, aligned, prot, offset, length, memoryMap);

File: src/main/java/cn/banny/emulator/hook/whale/Whale.java
Patch:
@@ -60,10 +60,10 @@ public void WInlineHookFunction(Symbol symbol, ReplaceCallback callback) {
     }
 
     @Override
-    public void WImportHookFunction(String symbol, String soName, final ReplaceCallback callback) {
+    public void WImportHookFunction(String symbol, String libName, final ReplaceCallback callback) {
         final Pointer backup = emulator.getMemory().malloc(emulator.getPointerSize(), false).getPointer();
         Pointer replace = createReplacePointer(callback, backup);
-        WImportHookFunction.call(emulator, symbol, soName, replace, backup);
+        WImportHookFunction.call(emulator, symbol, libName, replace, backup);
     }
 
 }

File: src/main/java/cn/banny/emulator/ios/DarwinARMEmulator.java
Patch:
@@ -28,7 +28,7 @@ protected Memory createMemory(UnixSyscallHandler syscallHandler) {
 
     @Override
     protected Dlfcn createDyld(SvcMemory svcMemory) {
-        return new Dyld((MachOLoader) memory);
+        return new Dyld((MachOLoader) memory, svcMemory);
     }
 
     @Override

File: src/main/java/cn/banny/emulator/ios/MachO.java
Patch:
@@ -65,4 +65,6 @@ interface MachO {
     int BIND_TYPE_TEXT_ABSOLUTE32 = 2;
     int BIND_TYPE_TEXT_PCREL32 = 3;
 
+    int RTLD_DEFAULT = -2;
+
 }

File: src/main/java/cn/banny/emulator/AbstractEmulator.java
Patch:
@@ -193,7 +193,7 @@ protected final Number emulate(long begin, long until, long timeout, boolean ent
                 IOUtils.closeQuietly(this);
                 throw e;
             } else {
-                log.info("emulate exception: " + e.getMessage());
+                log.warn("emulate exception: " + e.getMessage());
                 return -1;
             }
         } finally {

File: src/main/java/cn/banny/emulator/ios/MachOSymbol.java
Patch:
@@ -28,7 +28,7 @@ public long getAddress() {
 
     @Override
     public long getValue() {
-        boolean isThumb = nlist.desc() == N_ARM_THUMB_DEF;
+        boolean isThumb = (nlist.desc() & N_ARM_THUMB_DEF) != 0;
         return nlist.value() + (isThumb ? 1 : 0);
     }
 

File: src/main/java/cn/banny/emulator/ios/MachOModule.java
Patch:
@@ -70,7 +70,7 @@ public class MachOModule extends Module implements cn.banny.emulator.ios.MachO {
                 boolean isThumb = (nlist.desc() & N_ARM_THUMB_DEF) != 0;
                 strBuffer.position((int) nlist.un());
                 String symbolName = new String(io.readBytesTerm(0, false, true, true), Charset.forName("ascii"));
-                if (type == N_SECT && (nlist.type() & N_STAB) == 0) {
+                if ((type == N_SECT || type == N_ABS) && (nlist.type() & N_STAB) == 0) {
                     if (log.isDebugEnabled()) {
                         log.debug("nlist un=0x" + Long.toHexString(nlist.un()) + ", symbolName=" + symbolName + ", type=0x" + Long.toHexString(nlist.type()) + ", isWeakDef=" + isWeakDef + ", isThumb=" + isThumb + ", value=0x" + Long.toHexString(nlist.value()));
                     }

File: src/test/java/cn/banny/emulator/SubstrateTest.java
Patch:
@@ -27,12 +27,13 @@ protected Emulator createARMEmulator() {
 
     public void testMS() throws Exception {
         long start = System.currentTimeMillis();
-        // emulator.getMemory().setCallInitFunction();
+        emulator.getMemory().setCallInitFunction();
+        // emulator.attach().addBreakPoint(null, 0x40237a30);
         Module module = emulator.loadLibrary(new File("src/test/resources/example_binaries/libsubstrate.dylib"));
         System.err.println("load offset=" + (System.currentTimeMillis() - start) + "ms");
 
         IWhale whale = Whale.getInstance(emulator);
-        emulator.traceCode();
+        // emulator.traceCode();
         whale.WImportHookFunction("_strcmp", "/Library/Frameworks/CydiaSubstrate.framework/CydiaSubstrate", new ReplaceCallback() {
             @Override
             public HookStatus onCall(Emulator emulator, long originFunction) {

File: src/main/java/cn/banny/emulator/linux/AndroidElfLoader.java
Patch:
@@ -308,6 +308,7 @@ public Module dlopen(String filename, boolean calInit) throws IOException {
         for (Module module : getLoadedModules()) {
             for (MemRegion memRegion : module.getRegions()) {
                 if (filename.equals(memRegion.getName())) {
+                    module.addReferenceCount();
                     return module;
                 }
             }

File: src/test/java/cn/banny/emulator/QDReaderJni.java
Patch:
@@ -5,7 +5,7 @@
 import cn.banny.emulator.arm.HookStatus;
 import cn.banny.emulator.hook.ReplaceCallback;
 import cn.banny.emulator.hook.xhook.IxHook;
-import cn.banny.emulator.hook.xhook.xHookImpl;
+import cn.banny.emulator.hook.xhook.XHookImpl;
 import cn.banny.emulator.linux.android.AndroidARMEmulator;
 import cn.banny.emulator.linux.android.AndroidResolver;
 import cn.banny.emulator.linux.android.dvm.*;
@@ -63,7 +63,7 @@ public static void main(String[] args) throws Exception {
     }
 
     private void c() throws Exception {
-        IxHook xHook = xHookImpl.getInstance(emulator);
+        IxHook xHook = XHookImpl.getInstance(emulator);
         xHook.register("libd-lib.so", "free", new ReplaceCallback() {
             @Override
             public HookStatus onCall(Unicorn unicorn, long originFunction) {

File: src/test/java/com/bytedance/frameworks/core/encrypt/TTEncrypt.java
Patch:
@@ -7,7 +7,7 @@
 import cn.banny.emulator.hook.ReplaceCallback;
 import cn.banny.emulator.hook.hookzz.*;
 import cn.banny.emulator.hook.xhook.IxHook;
-import cn.banny.emulator.hook.xhook.xHookImpl;
+import cn.banny.emulator.hook.xhook.XHookImpl;
 import cn.banny.emulator.linux.Module;
 import cn.banny.emulator.linux.Symbol;
 import cn.banny.emulator.linux.android.AndroidARMEmulator;
@@ -103,7 +103,7 @@ public HookStatus onCall(Unicorn unicorn, long originFunction) {
         });
         hookZz.disable_arm_arm64_b_branch();
 
-        IxHook xHook = xHookImpl.getInstance(emulator);
+        IxHook xHook = XHookImpl.getInstance(emulator);
         xHook.register("libttEncrypt.so", "strlen", new ReplaceCallback() {
             @Override
             public HookStatus onCall(Unicorn unicorn, long originFunction) {

File: src/test/java/com/sun/jna/JniDispatch32.java
Patch:
@@ -10,7 +10,7 @@
 import cn.banny.emulator.hook.whale.IWhale;
 import cn.banny.emulator.hook.xhook.IxHook;
 import cn.banny.emulator.hook.whale.Whale;
-import cn.banny.emulator.hook.xhook.xHookImpl;
+import cn.banny.emulator.hook.xhook.XHookImpl;
 import cn.banny.emulator.linux.Module;
 import cn.banny.emulator.linux.Symbol;
 import cn.banny.emulator.linux.android.AndroidARMEmulator;
@@ -70,7 +70,7 @@ public static void main(String[] args) throws Exception {
     }
 
     private void test() throws IOException {
-        IxHook xHook = xHookImpl.getInstance(emulator);
+        IxHook xHook = XHookImpl.getInstance(emulator);
         xHook.register("libjnidispatch.so", "malloc", new ReplaceCallback() {
             @Override
             public HookStatus onCall(Unicorn unicorn, long originFunction) {

File: src/test/java/com/sun/jna/JniDispatch64.java
Patch:
@@ -10,7 +10,7 @@
 import cn.banny.emulator.hook.whale.IWhale;
 import cn.banny.emulator.hook.xhook.IxHook;
 import cn.banny.emulator.hook.whale.Whale;
-import cn.banny.emulator.hook.xhook.xHookImpl;
+import cn.banny.emulator.hook.xhook.XHookImpl;
 import cn.banny.emulator.linux.Module;
 import cn.banny.emulator.linux.Symbol;
 import cn.banny.emulator.linux.android.AndroidARM64Emulator;
@@ -70,7 +70,7 @@ public static void main(String[] args) throws Exception {
     }
 
     private void test() throws IOException {
-        IxHook xHook = xHookImpl.getInstance(emulator);
+        IxHook xHook = XHookImpl.getInstance(emulator);
         xHook.register("libjnidispatch.so", "malloc", new ReplaceCallback() {
             @Override
             public HookStatus onCall(Unicorn unicorn, long originFunction) {

File: src/main/java/cn/banny/emulator/linux/android/dvm/DvmMethod.java
Patch:
@@ -78,7 +78,7 @@ DvmObject callObjectMethodV(DvmObject dvmObject, VaList vaList) {
             case "java/lang/String->toString()Ljava/lang/String;":
                 return dvmObject;
             case "java/lang/Class->getName()Ljava/lang/String;":
-                return new StringObject(vm, ((DvmClass) dvmObject).getClassName());
+                return new StringObject(vm, ((DvmClass) dvmObject).getClassName().replace('/', '.'));
             case "android/view/accessibility/AccessibilityManager->getEnabledAccessibilityServiceList(I)Ljava/util/List;":
                 return new ArrayListObject(vm, Collections.<DvmObject>emptyList());
             case "java/util/Enumeration->nextElement()Ljava/lang/Object;":

