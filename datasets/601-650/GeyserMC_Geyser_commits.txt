File: core/src/main/java/org/geysermc/geyser/inventory/GeyserItemStack.java
Patch:
@@ -50,6 +50,7 @@
 import org.geysermc.mcprotocollib.protocol.data.game.recipe.display.slot.SlotDisplay;
 
 import java.util.HashMap;
+import java.util.function.Supplier;
 
 @Data
 public class GeyserItemStack {
@@ -169,9 +170,9 @@ public <T> T getComponent(@NonNull DataComponentType<T> type) {
         return value;
     }
 
-    public <T> T getComponentOrFallback(@NonNull DataComponentType<T> type, T def) {
+    public <T> T getComponentElseGet(@NonNull DataComponentType<T> type, Supplier<T> supplier) {
         T value = getComponent(type);
-        return value == null ? def : value;
+        return value == null ? supplier.get() : value;
     }
 
     public int getNetId() {

File: core/src/main/java/org/geysermc/geyser/inventory/updater/AnvilInventoryUpdater.java
Patch:
@@ -47,7 +47,6 @@
 import org.geysermc.mcprotocollib.protocol.data.game.item.component.DataComponentType;
 import org.geysermc.mcprotocollib.protocol.data.game.item.component.HolderSet;
 import org.geysermc.mcprotocollib.protocol.data.game.item.component.ItemEnchantments;
-import org.geysermc.mcprotocollib.protocol.data.game.item.component.Unbreakable;
 import org.geysermc.mcprotocollib.protocol.packet.ingame.serverbound.inventory.ServerboundRenameItemPacket;
 
 import java.util.List;
@@ -420,7 +419,7 @@ private boolean isRenaming(GeyserSession session, AnvilContainer anvilContainer,
     }
 
     private int getRepairCost(GeyserItemStack itemStack) {
-        return itemStack.getComponentOrFallback(DataComponentType.REPAIR_COST, 0);
+        return itemStack.getComponentElseGet(DataComponentType.REPAIR_COST, () -> 0);
     }
 
     private boolean hasDurability(GeyserItemStack itemStack) {
@@ -431,6 +430,6 @@ private boolean hasDurability(GeyserItemStack itemStack) {
     }
 
     private int getDamage(GeyserItemStack itemStack) {
-        return itemStack.getComponentOrFallback(DataComponentType.DAMAGE, 0);
+        return itemStack.getComponentElseGet(DataComponentType.DAMAGE, () -> 0);
     }
 }

File: core/src/main/java/org/geysermc/geyser/translator/inventory/BundleInventoryTranslator.java
Patch:
@@ -314,7 +314,7 @@ private static Fraction calculateWeight(GeyserItemStack itemStack) {
                 return Fraction.ONE;
             }
         }
-        return Fraction.getFraction(1, itemStack.getComponentOrFallback(DataComponentType.MAX_STACK_SIZE, itemStack.asItem().defaultMaxStackSize()));
+        return Fraction.getFraction(1, itemStack.getComponentElseGet(DataComponentType.MAX_STACK_SIZE, () -> itemStack.asItem().defaultMaxStackSize()));
     }
 
     public static int capacityForItemStack(Fraction bundleWeight, GeyserItemStack itemStack) {

File: api/src/main/java/org/geysermc/geyser/api/block/custom/nonvanilla/JavaBlockState.java
Patch:
@@ -70,7 +70,7 @@ public interface JavaBlockState {
     @Nullable String pistonBehavior();
 
     /**
-     * Gets whether the block state has block entity
+     * Gets whether the block state has a block entity
      * 
      * @return whether the block state has block entity
      * @deprecated Does not have an effect. If you were using this to

File: core/src/main/java/org/geysermc/geyser/registry/BlockRegistries.java
Patch:
@@ -135,9 +135,9 @@ public static void populate() {
         CustomSkullRegistryPopulator.populate();
         BlockRegistryPopulator.populate(BlockRegistryPopulator.Stage.PRE_INIT);
         CustomBlockRegistryPopulator.populate(CustomBlockRegistryPopulator.Stage.DEFINITION);
-        CustomBlockRegistryPopulator.populate(CustomBlockRegistryPopulator.Stage.NON_VANILLA_REGISTRATION);
         BlockRegistryPopulator.populate(BlockRegistryPopulator.Stage.INIT_JAVA);
         COLLISIONS.load();
+        CustomBlockRegistryPopulator.populate(CustomBlockRegistryPopulator.Stage.NON_VANILLA_REGISTRATION);
         CustomBlockRegistryPopulator.populate(CustomBlockRegistryPopulator.Stage.VANILLA_REGISTRATION);
         CustomBlockRegistryPopulator.populate(CustomBlockRegistryPopulator.Stage.CUSTOM_REGISTRATION);
         BlockRegistryPopulator.populate(BlockRegistryPopulator.Stage.INIT_BEDROCK);

File: core/src/main/java/org/geysermc/geyser/inventory/StonecutterContainer.java
Patch:
@@ -25,11 +25,11 @@
 
 package org.geysermc.geyser.inventory;
 
-import org.geysermc.mcprotocollib.protocol.data.game.inventory.ContainerType;
 import lombok.Getter;
 import lombok.Setter;
 import org.checkerframework.checker.nullness.qual.NonNull;
 import org.geysermc.geyser.session.GeyserSession;
+import org.geysermc.mcprotocollib.protocol.data.game.inventory.ContainerType;
 
 public class StonecutterContainer extends Container {
     /**

File: core/src/main/java/org/geysermc/geyser/level/WorldManager.java
Patch:
@@ -39,7 +39,6 @@
 import org.geysermc.mcprotocollib.protocol.data.game.item.component.DataComponent;
 import org.geysermc.mcprotocollib.protocol.data.game.item.component.DataComponentType;
 import org.geysermc.mcprotocollib.protocol.data.game.item.component.DataComponents;
-import org.geysermc.mcprotocollib.protocol.data.game.item.component.ItemCodecHelper;
 import org.geysermc.mcprotocollib.protocol.data.game.setting.Difficulty;
 
 import java.util.HashMap;
@@ -203,9 +202,9 @@ public void getDecoratedPotData(GeyserSession session, Vector3i pos, Consumer<Li
         try {
             Map<DataComponentType<?>, DataComponent<?, ?>> components = new HashMap<>();
             Int2ObjectMaps.fastForEach(map, entry -> {
-                DataComponentType type = DataComponentType.from(entry.getIntKey());
+                DataComponentType<?> type = DataComponentType.from(entry.getIntKey());
                 ByteBuf buf = Unpooled.wrappedBuffer(entry.getValue());
-                DataComponent value = type.readDataComponent(ItemCodecHelper.INSTANCE, buf);
+                DataComponent<?, ?> value = type.readDataComponent(buf);
                 components.put(type, value);
             });
             return new DataComponents(components);

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaLevelChunkWithLightTranslator.java
Patch:
@@ -61,6 +61,7 @@
 import org.geysermc.geyser.translator.protocol.Translator;
 import org.geysermc.geyser.util.BlockEntityUtils;
 import org.geysermc.geyser.util.ChunkUtils;
+import org.geysermc.mcprotocollib.protocol.codec.MinecraftTypes;
 import org.geysermc.mcprotocollib.protocol.data.game.chunk.BitStorage;
 import org.geysermc.mcprotocollib.protocol.data.game.chunk.ChunkSection;
 import org.geysermc.mcprotocollib.protocol.data.game.chunk.DataPalette;
@@ -115,7 +116,7 @@ public void translate(GeyserSession session, ClientboundLevelChunkWithLightPacke
             ByteBuf in = Unpooled.wrappedBuffer(packet.getChunkData());
             boolean extendedCollisionNextSection = false;
             for (int sectionY = 0; sectionY < chunkSize; sectionY++) {
-                ChunkSection javaSection = session.getDownstream().getCodecHelper().readChunkSection(in);
+                ChunkSection javaSection = MinecraftTypes.readChunkSection(in);
                 javaChunks[sectionY] = javaSection.getChunkData();
                 javaBiomes[sectionY] = javaSection.getBiomeData();
                 boolean extendedCollision = extendedCollisionNextSection;

File: core/src/test/java/org/geysermc/geyser/scoreboard/network/ScoreboardIssueTests.java
Patch:
@@ -212,7 +212,7 @@ void nameNotUpdating() {
             });
 
             // metadata set: invisible, custom name, custom name visible
-            context.translate(setEntityDataTranslator, new ClientboundSetEntityDataPacket(1298, new EntityMetadata[]{
+            context.translate(setEntityDataTranslator, new ClientboundSetEntityDataPacket(1298, new EntityMetadata<?, ?>[]{
                 new ByteEntityMetadata(0, MetadataType.BYTE, (byte) 0x20),
                 new ObjectEntityMetadata<>(2, MetadataType.OPTIONAL_CHAT, Optional.of(Component.text("tesss"))),
                 new BooleanEntityMetadata(3, MetadataType.BOOLEAN, true)

File: core/src/main/java/org/geysermc/geyser/entity/type/TextDisplayEntity.java
Patch:
@@ -67,7 +67,7 @@ protected void initializeMetadata() {
     }
 
     public void setText(EntityMetadata<Component, ?> entityMetadata) {
-        this.dirtyMetadata.put(EntityDataTypes.NAME, MessageTranslator.convertMessage(entityMetadata.getValue()));
+        this.dirtyMetadata.put(EntityDataTypes.NAME, MessageTranslator.convertMessage(entityMetadata.getValue(), session.locale()));
         calculateLineCount(entityMetadata.getValue());
     }
 

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -173,6 +173,7 @@
 import org.geysermc.geyser.session.cache.WorldCache;
 import org.geysermc.geyser.text.GeyserLocale;
 import org.geysermc.geyser.translator.inventory.InventoryTranslator;
+import org.geysermc.geyser.translator.text.MessageTranslator;
 import org.geysermc.geyser.util.ChunkUtils;
 import org.geysermc.geyser.util.EntityUtils;
 import org.geysermc.geyser.util.InventoryUtils;
@@ -1025,7 +1026,7 @@ public void disconnect(Component reason) {
                 // Downstream's disconnect will fire an event that prints a log message
                 // Otherwise, we print a message here
                 String address = geyser.getConfig().isLogPlayerIpAddresses() ? upstream.getAddress().getAddress().toString() : "<IP address withheld>";
-                geyser.getLogger().info(GeyserLocale.getLocaleStringLog("geyser.network.disconnect", address, reason));
+                geyser.getLogger().info(GeyserLocale.getLocaleStringLog("geyser.network.disconnect", address, MessageTranslator.convertMessage(reason)));
             }
 
             // Disconnect upstream if necessary
@@ -1646,7 +1647,7 @@ public void sendDownstreamPacket(Packet packet, ProtocolState intendedState) {
         }
 
         if (protocol.getOutboundState() != intendedState) {
-            geyser.getLogger().warning("Tried to send " + packet.getClass().getSimpleName() + " packet while not in " + intendedState.name() + " outbound state. Current state: " + protocol.getOutboundState().name());
+            geyser.getLogger().debug("Tried to send " + packet.getClass().getSimpleName() + " packet while not in " + intendedState.name() + " outbound state. Current state: " + protocol.getOutboundState().name());
             return;
         }
 

File: core/src/main/java/org/geysermc/geyser/event/type/SessionDisconnectEventImpl.java
Patch:
@@ -42,7 +42,7 @@ public class SessionDisconnectEventImpl extends SessionDisconnectEvent {
     private final Component reasonComponent;
 
     public SessionDisconnectEventImpl(@NonNull GeyserSession session, Component reason) {
-        super(session, MessageTranslator.convertToPlainText(reason, session.locale()));
+        super(session, MessageTranslator.convertMessageRaw(reason, session.locale()));
         this.reasonComponent = reason;
     }
 }

File: core/src/main/java/org/geysermc/geyser/inventory/updater/AnvilInventoryUpdater.java
Patch:
@@ -47,6 +47,7 @@
 import org.geysermc.mcprotocollib.protocol.data.game.item.component.DataComponentType;
 import org.geysermc.mcprotocollib.protocol.data.game.item.component.HolderSet;
 import org.geysermc.mcprotocollib.protocol.data.game.item.component.ItemEnchantments;
+import org.geysermc.mcprotocollib.protocol.data.game.item.component.Unbreakable;
 import org.geysermc.mcprotocollib.protocol.packet.ingame.serverbound.inventory.ServerboundRenameItemPacket;
 
 import java.util.List;
@@ -424,7 +425,7 @@ private int getRepairCost(GeyserItemStack itemStack) {
 
     private boolean hasDurability(GeyserItemStack itemStack) {
         if (itemStack.asItem().defaultMaxDamage() > 0) {
-            return itemStack.getComponentOrFallback(DataComponentType.UNBREAKABLE, false);
+            return itemStack.getComponent(DataComponentType.UNBREAKABLE) != null;
         }
         return false;
     }

File: core/src/main/java/org/geysermc/geyser/session/DownstreamSession.java
Patch:
@@ -29,14 +29,14 @@
 import lombok.RequiredArgsConstructor;
 import net.kyori.adventure.text.Component;
 import org.checkerframework.checker.nullness.qual.NonNull;
+import org.geysermc.mcprotocollib.network.ClientSession;
 import org.geysermc.mcprotocollib.network.packet.Packet;
-import org.geysermc.mcprotocollib.network.tcp.TcpSession;
 import org.geysermc.mcprotocollib.protocol.codec.MinecraftCodecHelper;
 
 @Getter
 @RequiredArgsConstructor
 public class DownstreamSession {
-    private final TcpSession session;
+    private final ClientSession session;
 
     public void sendPacket(@NonNull Packet packet) {
         this.session.send(packet);

File: core/src/main/java/org/geysermc/geyser/translator/item/CustomItemTranslator.java
Patch:
@@ -119,9 +119,7 @@ private static boolean isDamaged(DataComponents components, int damage) {
 
     private static boolean isDamagableItem(DataComponents components) {
         // mapping.getMaxDamage > 0 should also be checked (return false if not true) but we already check prior to this function
-        Boolean unbreakable = components.get(DataComponentType.UNBREAKABLE);
-        // Tag must either not be present or be set to false
-        return unbreakable == null || !unbreakable;
+        return components.get(DataComponentType.UNBREAKABLE) == null;
     }
 
     private CustomItemTranslator() {

File: core/src/main/java/org/geysermc/geyser/entity/type/Entity.java
Patch:
@@ -176,6 +176,7 @@ protected void initializeMetadata() {
         setFlag(EntityFlag.HAS_COLLISION, true);
         setFlag(EntityFlag.CAN_SHOW_NAME, true);
         setFlag(EntityFlag.CAN_CLIMB, true);
+        setFlag(EntityFlag.HIDDEN_WHEN_INVISIBLE, true);
         // Let the Java server (or us) supply all sounds for an entity
         setClientSideSilent();
     }

File: core/src/main/java/org/geysermc/geyser/entity/type/living/monster/CreakingEntity.java
Patch:
@@ -53,7 +53,6 @@ public CreakingEntity(GeyserSession session, int entityId, long geyserId, UUID u
     @Override
     protected void initializeMetadata() {
         super.initializeMetadata();
-        setFlag(EntityFlag.HIDDEN_WHEN_INVISIBLE, true);
         setFlag(EntityFlag.FIRE_IMMUNE, true);
     }
 

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -1180,7 +1180,7 @@ protected void tick() {
 
             this.bundleCache.tick();
 
-            if (spawned) {
+            if (spawned && protocol.getOutboundState() == ProtocolState.GAME) {
                 // Could move this to the PlayerAuthInput translator, in the event the player lags
                 // but this will work once we implement matching Java custom tick cycles
                 sendDownstreamGamePacket(ServerboundClientTickEndPacket.INSTANCE);
@@ -1400,7 +1400,7 @@ public GeyserSession connection() {
 
     @Override
     public String locale() {
-        return clientData.getLanguageCode();
+        return clientData != null ? clientData.getLanguageCode() : GeyserLocale.getDefaultLocale();
     }
 
     @Override

File: api/src/main/java/org/geysermc/geyser/api/event/bedrock/SessionDisconnectEvent.java
Patch:
@@ -50,7 +50,7 @@ public SessionDisconnectEvent(@NonNull GeyserConnection connection, @NonNull Str
     }
 
     /**
-     * Sets the disconnect reason, thereby overriding th original reason.
+     * Sets the disconnect message shown to the Bedrock client.
      *
      * @param disconnectReason the reason for the disconnect
      */

File: api/src/main/java/org/geysermc/geyser/api/event/connection/GeyserBedrockPingEvent.java
Patch:
@@ -33,10 +33,10 @@
 import java.net.InetSocketAddress;
 
 /**
- * Called whenever Geyser gets pinged
+ * Called whenever Geyser gets pinged by a Bedrock client.
  * <p>
- * This event allows you to modify/obtain the MOTD, maximum player count, and current number of players online,
- * Geyser will reply to the client with what was given.
+ * This event allows you to modify/obtain the MOTD, maximum player count, and current number of players online.
+ * Geyser will reply to the client with the information provided in this event.
  */
 public interface GeyserBedrockPingEvent extends Event {
 

File: api/src/main/java/org/geysermc/geyser/api/event/java/ServerDefineCommandsEvent.java
Patch:
@@ -37,7 +37,7 @@
  * <br>
  * This event is mapped to the existence of Brigadier on the server.
  */
-public class ServerDefineCommandsEvent extends ConnectionEvent implements Cancellable {
+public final class ServerDefineCommandsEvent extends ConnectionEvent implements Cancellable {
     private final Set<? extends CommandInfo> commands;
     private boolean cancelled;
 

File: api/src/main/java/org/geysermc/geyser/api/event/java/ServerTransferEvent.java
Patch:
@@ -37,7 +37,7 @@
  * Fired when the Java server sends a transfer request to a different Java server.
  * Geyser Extensions can listen to this event and set a target server ip/port for Bedrock players to be transferred to.
  */
-public class ServerTransferEvent extends ConnectionEvent {
+public final class ServerTransferEvent extends ConnectionEvent {
 
     private final String host;
     private final int port;

File: core/src/main/java/org/geysermc/geyser/session/DownstreamSession.java
Patch:
@@ -27,6 +27,7 @@
 
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
+import net.kyori.adventure.text.Component;
 import org.checkerframework.checker.nullness.qual.NonNull;
 import org.geysermc.mcprotocollib.network.packet.Packet;
 import org.geysermc.mcprotocollib.network.tcp.TcpSession;
@@ -41,11 +42,11 @@ public void sendPacket(@NonNull Packet packet) {
         this.session.send(packet);
     }
 
-    public void disconnect(String reason) {
+    public void disconnect(Component reason) {
         this.session.disconnect(reason);
     }
 
-    public void disconnect(String reason, Throwable throwable) {
+    public void disconnect(Component reason, Throwable throwable) {
         this.session.disconnect(reason, throwable);
     }
 

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaLoginFinishedTranslator.java
Patch:
@@ -34,6 +34,7 @@
 import org.geysermc.geyser.translator.protocol.Translator;
 import org.geysermc.geyser.util.PluginMessageUtils;
 import org.geysermc.mcprotocollib.auth.GameProfile;
+import org.geysermc.mcprotocollib.protocol.data.ProtocolState;
 import org.geysermc.mcprotocollib.protocol.packet.common.serverbound.ServerboundCustomPayloadPacket;
 import org.geysermc.mcprotocollib.protocol.packet.login.clientbound.ClientboundLoginFinishedPacket;
 
@@ -73,7 +74,7 @@ public void translate(GeyserSession session, ClientboundLoginFinishedPacket pack
         session.getClientData().setOriginalString(null);
 
         // configuration phase stuff that the vanilla client replies with after receiving the GameProfilePacket
-        session.sendDownstreamPacket(new ServerboundCustomPayloadPacket(Key.key("brand"), PluginMessageUtils.getGeyserBrandData()));
+        session.sendDownstreamPacket(new ServerboundCustomPayloadPacket(Key.key("brand"), PluginMessageUtils.getGeyserBrandData()), ProtocolState.CONFIGURATION);
         session.sendJavaClientSettings();
     }
 }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/player/JavaTransferPacketTranslator.java
Patch:
@@ -25,10 +25,10 @@
 
 package org.geysermc.geyser.translator.protocol.java.entity.player;
 
+import net.kyori.adventure.text.Component;
 import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.api.event.java.ServerTransferEvent;
 import org.geysermc.geyser.session.GeyserSession;
-import org.geysermc.geyser.text.MinecraftLocale;
 import org.geysermc.geyser.translator.protocol.PacketTranslator;
 import org.geysermc.geyser.translator.protocol.Translator;
 import org.geysermc.mcprotocollib.protocol.packet.common.clientbound.ClientboundTransferPacket;
@@ -49,7 +49,7 @@ public void translate(GeyserSession session, ClientboundTransferPacket packet) {
         if (event.bedrockHost() != null && !event.bedrockHost().isBlank() && event.bedrockPort() != -1) {
             session.transfer(event.bedrockHost(), event.bedrockPort());
         } else {
-            session.disconnect(MinecraftLocale.getLocaleString("disconnect.transfer", session.locale()));
+            session.disconnect(Component.translatable("disconnect.transfer"));
         }
     }
 }

File: core/src/main/java/org/geysermc/geyser/util/InventoryUtils.java
Patch:
@@ -138,9 +138,9 @@ public static void closeInventory(GeyserSession session, int javaId, boolean con
             ) {
                 session.setClosingInventory(true);
             }
+            session.getBundleCache().onInventoryClose(inventory);
         }
         session.setInventoryTranslator(InventoryTranslator.PLAYER_INVENTORY_TRANSLATOR);
-        session.getBundleCache().onInventoryClose(inventory);
         session.setOpenInventory(null);
     }
 

File: core/src/main/java/org/geysermc/geyser/registry/populator/CustomItemRegistryPopulator.java
Patch:
@@ -143,6 +143,7 @@ public static NonVanillaItemRegistration registerCustomItem(NonVanillaCustomItem
         Items.register(item, customItemData.javaId());
 
         ItemMapping customItemMapping = ItemMapping.builder()
+                .bedrockIdentifier(customIdentifier)
                 .bedrockDefinition(new SimpleItemDefinition(customIdentifier, customItemId, true))
                 .bedrockData(0)
                 .bedrockBlockDefinition(null)

File: core/src/main/java/org/geysermc/geyser/inventory/click/Click.java
Patch:
@@ -31,7 +31,10 @@
 @AllArgsConstructor
 public enum Click {
     LEFT(ContainerActionType.CLICK_ITEM, ClickItemAction.LEFT_CLICK),
+    LEFT_BUNDLE(ContainerActionType.CLICK_ITEM, ClickItemAction.LEFT_CLICK),
+    LEFT_BUNDLE_FROM_CURSOR(ContainerActionType.CLICK_ITEM, ClickItemAction.LEFT_CLICK),
     RIGHT(ContainerActionType.CLICK_ITEM, ClickItemAction.RIGHT_CLICK),
+    RIGHT_BUNDLE(ContainerActionType.CLICK_ITEM, ClickItemAction.RIGHT_CLICK),
     LEFT_SHIFT(ContainerActionType.SHIFT_CLICK_ITEM, ShiftClickItemAction.LEFT_CLICK),
     DROP_ONE(ContainerActionType.DROP_ITEM, DropItemAction.DROP_FROM_SELECTED),
     DROP_ALL(ContainerActionType.DROP_ITEM, DropItemAction.DROP_SELECTED_STACK),

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/inventory/JavaContainerSetSlotTranslator.java
Patch:
@@ -93,6 +93,7 @@ public void translate(GeyserSession session, ClientboundContainerSetSlotPacket p
             }
 
             GeyserItemStack newItem = GeyserItemStack.from(packet.getItem());
+            session.getBundleCache().initialize(newItem);
             if (packet.getContainerId() == 0 && !(translator instanceof PlayerInventoryTranslator)) {
                 // In rare cases, the window ID can still be 0 but Java treats it as valid
                 // This behavior still exists as of Java Edition 1.21.2, despite the new packet

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/inventory/JavaSetCursorItemTranslator.java
Patch:
@@ -38,6 +38,7 @@ public class JavaSetCursorItemTranslator extends PacketTranslator<ClientboundSet
     @Override
     public void translate(GeyserSession session, ClientboundSetCursorItemPacket packet) {
         GeyserItemStack newItem = GeyserItemStack.from(packet.getContents());
+        session.getBundleCache().initialize(newItem);
         session.getPlayerInventory().setCursor(newItem, session);
         InventoryUtils.updateCursor(session);
     }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/inventory/JavaSetPlayerInventoryTranslator.java
Patch:
@@ -55,7 +55,9 @@ public void translate(GeyserSession session, ClientboundSetPlayerInventoryPacket
             return;
         }
 
-        session.getPlayerInventory().setItem(slot, GeyserItemStack.from(packet.getContents()), session);
+        GeyserItemStack newItem = GeyserItemStack.from(packet.getContents());
+        session.getBundleCache().initialize(newItem);
+        session.getPlayerInventory().setItem(slot, newItem, session);
         InventoryTranslator.PLAYER_INVENTORY_TRANSLATOR.updateSlot(session, session.getPlayerInventory(), slot);
     }
 }

File: core/src/main/java/org/geysermc/geyser/util/InventoryUtils.java
Patch:
@@ -140,6 +140,7 @@ public static void closeInventory(GeyserSession session, int javaId, boolean con
             }
         }
         session.setInventoryTranslator(InventoryTranslator.PLAYER_INVENTORY_TRANSLATOR);
+        session.getBundleCache().onInventoryClose(inventory);
         session.setOpenInventory(null);
     }
 

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaMapItemDataTranslator.java
Patch:
@@ -65,7 +65,7 @@ public void translate(GeyserSession session, ClientboundMapItemDataPacket packet
 
             int idx = 0;
             for (byte colorId : data.getData()) {
-                colors[idx++] = MapColor.fromId(colorId & 0xFF).getARGB();
+                colors[idx++] = MapColor.fromId(colorId & 0xFF).getABGR();
             }
 
             mapItemDataPacket.setColors(colors);

File: core/src/main/java/org/geysermc/geyser/translator/inventory/InventoryTranslator.java
Patch:
@@ -246,7 +246,7 @@ public ItemStackResponse translateRequest(GeyserSession session, Inventory inven
                     boolean isSourceCursor = isCursor(transferAction.getSource());
                     boolean isDestCursor = isCursor(transferAction.getDestination());
 
-                    if ((this) instanceof PlayerInventoryTranslator) {
+                    if (this instanceof PlayerInventoryTranslator) {
                         if (destSlot == 5) {
                             //only set the head if the destination is the head slot
                             GeyserItemStack javaItem = inventory.getItem(sourceSlot);

File: core/src/main/java/org/geysermc/geyser/translator/item/BedrockItemBuilder.java
Patch:
@@ -122,12 +122,13 @@ public NbtMapBuilder putCompound(String name, NbtMap value) {
      */
     @Nullable
     public NbtMap build() {
-        if (customName != null || lore != null) {
+        boolean validLore = lore != null && !lore.isEmpty();
+        if (customName != null || validLore) {
             NbtMapBuilder display = NbtMap.builder();
             if (customName != null) {
                 display.putString("Name", customName);
             }
-            if (lore != null) {
+            if (validLore) {
                 display.putList("Lore", NbtType.STRING, lore);
             }
             getOrCreateNbt().put("display", display.build());

File: core/src/main/java/org/geysermc/geyser/translator/item/ItemTranslator.java
Patch:
@@ -173,7 +173,7 @@ public static ItemData translateToBedrock(GeyserSession session, ItemStack stack
         javaItem.translateComponentsToBedrock(session, components, nbtBuilder);
 
         Rarity rarity = Rarity.fromId(components.getOrDefault(DataComponentType.RARITY, 0));
-        String customName = getCustomName(session, components, bedrockItem, rarity.getColor(), true);
+        String customName = getCustomName(session, components, bedrockItem, rarity.getColor(), false);
         if (customName != null) {
             nbtBuilder.setCustomName(customName);
         }

File: core/src/main/java/org/geysermc/geyser/item/type/ShulkerBoxItem.java
Patch:
@@ -98,7 +98,7 @@ public void translateComponentsToBedrock(@NonNull GeyserSession session, @NonNul
 
             // Only the display name is what we have interest in, so just translate that if relevant
             if (boxComponents != null) {
-                String customName = ItemTranslator.getCustomName(session, boxComponents, boxMapping, '7');
+                String customName = ItemTranslator.getCustomName(session, boxComponents, boxMapping, '7', true);
                 if (customName != null) {
                     boxItemNbt.putCompound("tag", NbtMap.builder()
                             .putCompound("display", NbtMap.builder()

File: core/src/main/java/org/geysermc/geyser/translator/item/ItemTranslator.java
Patch:
@@ -173,7 +173,7 @@ public static ItemData translateToBedrock(GeyserSession session, ItemStack stack
         javaItem.translateComponentsToBedrock(session, components, nbtBuilder);
 
         Rarity rarity = Rarity.fromId(components.getOrDefault(DataComponentType.RARITY, 0));
-        String customName = getCustomName(session, components, bedrockItem, rarity.getColor());
+        String customName = getCustomName(session, components, bedrockItem, rarity.getColor(), true);
         if (customName != null) {
             nbtBuilder.setCustomName(customName);
         }
@@ -493,7 +493,7 @@ public static ItemDefinition getBedrockItemDefinition(GeyserSession session, @No
      * @param translationColor if this item is not available on Java, the color that the new name should be.
      *                         Normally, this should just be white, but for shulker boxes this should be gray.
      */
-    public static String getCustomName(GeyserSession session, DataComponents components, ItemMapping mapping, char translationColor) {
+    public static String getCustomName(GeyserSession session, DataComponents components, ItemMapping mapping, char translationColor, boolean includeDefault) {
         if (components != null) {
             // ItemStack#getHoverName as of 1.20.5
             Component customName = components.get(DataComponentType.CUSTOM_NAME);
@@ -514,7 +514,7 @@ public static String getCustomName(GeyserSession session, DataComponents compone
                 }
             }
             customName = components.get(DataComponentType.ITEM_NAME);
-            if (customName != null) {
+            if (customName != null && includeDefault) {
                 // Get the translated name and prefix it with a reset char to prevent italics - matches Java Edition
                 // behavior as of 1.21
                 return ChatColor.RESET + ChatColor.ESCAPE + translationColor + MessageTranslator.convertMessage(customName, session.locale());

File: core/src/main/java/org/geysermc/geyser/registry/populator/DataComponentRegistryPopulator.java
Patch:
@@ -55,7 +55,8 @@ public static void populate() {
         GeyserBootstrap bootstrap = GeyserImpl.getInstance().getBootstrap();
         List<DataComponents> defaultComponents;
         try (InputStream stream = bootstrap.getResourceOrThrow("java/item_data_components.json")) {
-            JsonElement rootElement = JsonParser.parseReader(new InputStreamReader(stream));
+            //noinspection deprecation - 1.16.5 breaks otherwise
+            JsonElement rootElement = new JsonParser().parse(new InputStreamReader(stream));
             JsonArray jsonArray = rootElement.getAsJsonArray();
 
             defaultComponents = new ObjectArrayList<>(jsonArray.size());

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/JavaEntityEventTranslator.java
Patch:
@@ -295,6 +295,9 @@ public void translate(GeyserSession session, ClientboundEntityEventPacket packet
                     creakingEntity.createParticleBeam();
                 }
                 break;
+            case SQUID_RESET_ROTATION:
+                // unused, but spams a bit
+                break;
             default:
                 GeyserImpl.getInstance().getLogger().debug("unhandled entity event: " + packet);
         }

File: core/src/main/java/org/geysermc/geyser/entity/EntityDefinitions.java
Patch:
@@ -38,6 +38,7 @@
 import org.geysermc.geyser.entity.type.CommandBlockMinecartEntity;
 import org.geysermc.geyser.entity.type.DisplayBaseEntity;
 import org.geysermc.geyser.entity.type.EnderCrystalEntity;
+import org.geysermc.geyser.entity.type.EnderEyeEntity;
 import org.geysermc.geyser.entity.type.Entity;
 import org.geysermc.geyser.entity.type.EvokerFangsEntity;
 import org.geysermc.geyser.entity.type.ExpOrbEntity;
@@ -197,7 +198,7 @@ public final class EntityDefinitions {
     public static final EntityDefinition<EvokerFangsEntity> EVOKER_FANGS;
     public static final EntityDefinition<ThrowableItemEntity> EXPERIENCE_BOTTLE;
     public static final EntityDefinition<ExpOrbEntity> EXPERIENCE_ORB;
-    public static final EntityDefinition<Entity> EYE_OF_ENDER;
+    public static final EntityDefinition<EnderEyeEntity> EYE_OF_ENDER;
     public static final EntityDefinition<FallingBlockEntity> FALLING_BLOCK;
     public static final EntityDefinition<FireballEntity> FIREBALL;
     public static final EntityDefinition<FireworkEntity> FIREWORK_ROCKET;
@@ -345,7 +346,7 @@ public final class EntityDefinitions {
                     .height(0.8f).width(0.5f)
                     .identifier("minecraft:evocation_fang")
                     .build();
-            EYE_OF_ENDER = EntityDefinition.inherited(Entity::new, entityBase)
+            EYE_OF_ENDER = EntityDefinition.inherited(EnderEyeEntity::new, entityBase)
                     .type(EntityType.EYE_OF_ENDER)
                     .heightAndWidth(0.25f)
                     .identifier("minecraft:eye_of_ender_signal")

File: core/src/main/java/org/geysermc/geyser/entity/type/BoatEntity.java
Patch:
@@ -189,7 +189,7 @@ public void tick() {
             session.sendDownstreamGamePacket(steerPacket);
             return;
         }
-        doTick = !doTick; // Run every 100 ms
+        doTick = !doTick; // Run every other tick
         if (!doTick || passengers.isEmpty()) {
             return;
         }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/BedrockMobEquipmentTranslator.java
Patch:
@@ -66,7 +66,7 @@ public void translate(GeyserSession session, MobEquipmentPacket packet) {
             // (No need to send a release item packet - Java doesn't do this when swapping items)
             // Required to do it a tick later or else it doesn't register
             session.scheduleInEventLoop(() -> session.useItem(Hand.MAIN_HAND),
-                    50, TimeUnit.MILLISECONDS);
+                    session.getNanosecondsPerTick(), TimeUnit.NANOSECONDS);
         }
 
         if (oldItem.getJavaId() != newItem.getJavaId()) {

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaCooldownTranslator.java
Patch:
@@ -59,7 +59,7 @@ public void translate(GeyserSession session, ClientboundCooldownPacket packet) {
         if (cooldownCategory != null) {
             PlayerStartItemCooldownPacket bedrockPacket = new PlayerStartItemCooldownPacket();
             bedrockPacket.setItemCategory(cooldownCategory);
-            bedrockPacket.setCooldownDuration(packet.getCooldownTicks());
+            bedrockPacket.setCooldownDuration(Math.round(packet.getCooldownTicks() * (session.getMillisecondsPerTick() / 50)));
             session.sendUpstreamPacket(bedrockPacket);
         }
 

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -150,7 +150,6 @@
 import org.geysermc.geyser.level.BedrockDimension;
 import org.geysermc.geyser.level.JavaDimension;
 import org.geysermc.geyser.level.physics.CollisionManager;
-import org.geysermc.geyser.network.GameProtocol;
 import org.geysermc.geyser.network.netty.LocalSession;
 import org.geysermc.geyser.registry.Registries;
 import org.geysermc.geyser.registry.type.BlockMappings;
@@ -1671,8 +1670,6 @@ private void startGame() {
         startGamePacket.getExperiments().add(new ExperimentData("upcoming_creator_features", true));
         // Needed for certain molang queries used in blocks and items
         startGamePacket.getExperiments().add(new ExperimentData("experimental_molang_features", true));
-        // Required for experimental 1.21 features
-        startGamePacket.getExperiments().add(new ExperimentData("updateAnnouncedLive2023", true));
 
         startGamePacket.setVanillaVersion("*");
         startGamePacket.setInventoriesServerAuthoritative(true);

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/BedrockSetLocalPlayerAsInitializedTranslator.java
Patch:
@@ -40,7 +40,6 @@
 public class BedrockSetLocalPlayerAsInitializedTranslator extends PacketTranslator<SetLocalPlayerAsInitializedPacket> {
     @Override
     public void translate(GeyserSession session, SetLocalPlayerAsInitializedPacket packet) {
-        GeyserImpl.getInstance().getLogger().info(packet.toString());
         if (session.getPlayerEntity().getGeyserId() == packet.getRuntimeEntityId()) {
             if (!session.getUpstream().isInitialized()) {
                 session.getUpstream().setInitialized(true);

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/input/BedrockBlockActions.java
Patch:
@@ -170,7 +170,6 @@ private static void handle(GeyserSession session, PlayerBlockActionData blockAct
                 if (session.getGameMode() != GameMode.CREATIVE) {
                     // As of 1.16.210: item frame items are taken out here.
                     // Survival also sends START_BREAK, but by attaching our process here adventure mode also works
-                    GeyserImpl.getInstance().getLogger().warning("abort break, not creative - item frame???");
                     Entity itemFrameEntity = ItemFrameEntity.getItemFrameEntity(session, vector);
                     if (itemFrameEntity != null) {
                         ServerboundInteractPacket interactPacket = new ServerboundInteractPacket(itemFrameEntity.getEntityId(),

File: core/src/main/java/org/geysermc/geyser/entity/EntityDefinitions.java
Patch:
@@ -685,13 +685,13 @@ public final class EntityDefinitions {
                     .addTranslator(MetadataType.BOOLEAN, CreakingEntity::setIsTearingDown)
                     .addTranslator(MetadataType.OPTIONAL_POSITION, CreakingEntity::setHomePos)
                     .properties(new GeyserEntityProperties.Builder()
-                        .addEnum("minecraft:creaking_state",
+                        .addEnum(CreakingEntity.CREAKING_STATE,
                             "neutral",
                             "hostile_observed",
                             "hostile_unobserved",
                             "twitching",
                             "crumbling")
-                        .addInt("minecraft:creaking_swaying_ticks", 0, 6)
+                        .addInt(CreakingEntity.CREAKING_SWAYING_TICKS, 0, 6)
                         .build())
                     .build();
             CREEPER = EntityDefinition.inherited(CreeperEntity::new, mobEntityBase)

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/input/BedrockBlockActions.java
Patch:
@@ -89,7 +89,7 @@ private static void handle(GeyserSession session, PlayerBlockActionData blockAct
                 LevelEventPacket startBreak = new LevelEventPacket();
                 startBreak.setType(LevelEvent.BLOCK_START_BREAK);
                 startBreak.setPosition(vector.toFloat());
-                double breakTime = BlockUtils.getSessionBreakTime(session, BlockState.of(blockState).block()) * 20; // TODO afdaöwelfunöwoaenf
+                double breakTime = BlockUtils.getSessionBreakTimeTicks(session, BlockState.of(blockState).block());
 
                 // If the block is custom or the breaking item is custom, we must keep track of break time ourselves
                 GeyserItemStack item = session.getPlayerInventory().getItemInHand();
@@ -137,7 +137,7 @@ private static void handle(GeyserSession session, PlayerBlockActionData blockAct
                 Direction direction = Direction.VALUES[blockFace];
                 spawnBlockBreakParticles(session, direction, vector, breakingBlockState);
 
-                double breakTime = BlockUtils.getSessionBreakTime(session, breakingBlockState.block()) * 20;
+                double breakTime = BlockUtils.getSessionBreakTimeTicks(session, breakingBlockState.block());
                 // If the block is custom, we must keep track of when it should break ourselves
                 long blockBreakStartTime = session.getBlockBreakStartTime();
                 if (blockBreakStartTime != 0) {

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaSelectKnownPacksTranslator.java
Patch:
@@ -40,7 +40,7 @@
 @Translator(packet = ClientboundSelectKnownPacks.class)
 public class JavaSelectKnownPacksTranslator extends PacketTranslator<ClientboundSelectKnownPacks> {
     // todo: dump from client?
-    private static final Set<String> KNOWN_PACK_IDS = Set.of("core", "winter_drop", "trade_rebalance", "redstone_experiments", "minecart_improvements");
+    private static final Set<String> KNOWN_PACK_IDS = Set.of("core", "trade_rebalance", "redstone_experiments", "minecart_improvements");
 
     @Override
     public void translate(GeyserSession session, ClientboundSelectKnownPacks packet) {

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/JavaEntityEventTranslator.java
Patch:
@@ -37,6 +37,7 @@
 import org.cloudburstmc.protocol.bedrock.packet.PlaySoundPacket;
 import org.cloudburstmc.protocol.bedrock.packet.SetEntityDataPacket;
 import org.cloudburstmc.protocol.bedrock.packet.SetEntityMotionPacket;
+import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.entity.EntityDefinitions;
 import org.geysermc.geyser.entity.type.Entity;
 import org.geysermc.geyser.entity.type.EvokerFangsEntity;
@@ -294,6 +295,8 @@ public void translate(GeyserSession session, ClientboundEntityEventPacket packet
                     creakingEntity.createParticleBeam();
                 }
                 break;
+            default:
+                GeyserImpl.getInstance().getLogger().debug("unhandled entity event: " + packet);
         }
 
         if (entityEventPacket.getType() != null) {

File: bootstrap/spigot/src/main/java/org/geysermc/geyser/platform/spigot/GeyserSpigotInjector.java
Patch:
@@ -178,7 +178,7 @@ private void workAroundWeirdBug(GeyserBootstrap bootstrap) {
         MinecraftProtocol protocol = new MinecraftProtocol();
         LocalSession session = new LocalSession(bootstrap.getGeyserConfig().getRemote().address(),
                 bootstrap.getGeyserConfig().getRemote().port(), this.serverSocketAddress,
-                InetAddress.getLoopbackAddress().getHostAddress(), protocol, protocol.createHelper());
+                InetAddress.getLoopbackAddress().getHostAddress(), protocol, Runnable::run);
         session.connect();
     }
 

File: core/src/main/java/org/geysermc/geyser/GeyserImpl.java
Patch:
@@ -414,9 +414,6 @@ private void startInstance() {
             }
         }
 
-        // Ensure that PacketLib does not create an event loop for handling packets; we'll do that ourselves
-        TcpSession.USE_EVENT_LOOP_FOR_PACKETS = false;
-
         pendingMicrosoftAuthentication = new PendingMicrosoftAuthentication(config.getPendingAuthenticationTimeout());
 
         this.newsHandler = new NewsHandler(BRANCH, this.buildNumber());

File: core/src/main/java/org/geysermc/geyser/network/UpstreamPacketHandler.java
Patch:
@@ -96,7 +96,7 @@ public UpstreamPacketHandler(GeyserImpl geyser, GeyserSession session) {
     }
 
     private PacketSignal translateAndDefault(BedrockPacket packet) {
-        Registries.BEDROCK_PACKET_TRANSLATORS.translate(packet.getClass(), packet, session);
+        Registries.BEDROCK_PACKET_TRANSLATORS.translate(packet.getClass(), packet, session, false);
         return PacketSignal.HANDLED; // PacketSignal.UNHANDLED will log a WARN publicly
     }
 

File: core/src/main/java/org/geysermc/geyser/registry/PacketTranslatorRegistry.java
Patch:
@@ -56,15 +56,15 @@ protected PacketTranslatorRegistry() {
     }
 
     @SuppressWarnings("unchecked")
-    public <P extends T> boolean translate(Class<? extends P> clazz, P packet, GeyserSession session) {
+    public <P extends T> boolean translate(Class<? extends P> clazz, P packet, GeyserSession session, boolean canRunImmediately) {
         if (session.getUpstream().isClosed() || session.isClosed()) {
             return false;
         }
 
         PacketTranslator<P> translator = (PacketTranslator<P>) this.mappings.get(clazz);
         if (translator != null) {
-            EventLoop eventLoop = session.getEventLoop();
-            if (!translator.shouldExecuteInEventLoop() || eventLoop.inEventLoop()) {
+            EventLoop eventLoop = session.getTickEventLoop();
+            if (canRunImmediately || !translator.shouldExecuteInEventLoop() || eventLoop.inEventLoop()) {
                 translate0(session, translator, packet);
             } else {
                 eventLoop.execute(() -> translate0(session, translator, packet));

File: core/src/main/java/org/geysermc/geyser/translator/protocol/PacketTranslator.java
Patch:
@@ -34,6 +34,7 @@ public abstract class PacketTranslator<T> {
     /**
      * Determines if this packet should be handled in the session's event loop. This should generally be true -
      * only when the packet has to be executed immediately should it be false.
+     * This method is only used for bedrock packets, java packets have a more sophisticated system through MCProtocolLib.
      */
     public boolean shouldExecuteInEventLoop() {
         return true;

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/player/JavaCookieRequestTranslator.java
Patch:
@@ -28,8 +28,8 @@
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.translator.protocol.PacketTranslator;
 import org.geysermc.geyser.translator.protocol.Translator;
-import org.geysermc.mcprotocollib.protocol.packet.common.clientbound.ClientboundCookieRequestPacket;
-import org.geysermc.mcprotocollib.protocol.packet.common.clientbound.ServerboundCookieResponsePacket;
+import org.geysermc.mcprotocollib.protocol.packet.cookie.clientbound.ClientboundCookieRequestPacket;
+import org.geysermc.mcprotocollib.protocol.packet.cookie.serverbound.ServerboundCookieResponsePacket;
 
 @Translator(packet = ClientboundCookieRequestPacket.class)
 public class JavaCookieRequestTranslator extends PacketTranslator<ClientboundCookieRequestPacket> {

File: bootstrap/spigot/src/main/java/org/geysermc/geyser/platform/spigot/GeyserSpigotInjector.java
Patch:
@@ -180,7 +180,6 @@ private void workAroundWeirdBug(GeyserBootstrap bootstrap) {
                 bootstrap.getGeyserConfig().getRemote().port(), this.serverSocketAddress,
                 InetAddress.getLoopbackAddress().getHostAddress(), protocol, protocol.createHelper());
         session.connect();
-        session.disconnect("");
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/network/GameProtocol.java
Patch:
@@ -28,7 +28,7 @@
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.cloudburstmc.protocol.bedrock.codec.BedrockCodec;
 import org.cloudburstmc.protocol.bedrock.codec.v748.Bedrock_v748;
-import org.cloudburstmc.protocol.bedrock.codec.v765.Bedrock_v765;
+import org.cloudburstmc.protocol.bedrock.codec.v766.Bedrock_v766;
 import org.cloudburstmc.protocol.bedrock.netty.codec.packet.BedrockPacketCodec;
 import org.geysermc.mcprotocollib.protocol.codec.MinecraftCodec;
 import org.geysermc.mcprotocollib.protocol.codec.PacketCodec;
@@ -46,9 +46,8 @@ public final class GameProtocol {
      * Default Bedrock codec that should act as a fallback. Should represent the latest available
      * release of the game that Geyser supports.
      */
-    public static final BedrockCodec DEFAULT_BEDROCK_CODEC = CodecProcessor.processCodec(Bedrock_v765.CODEC.toBuilder()
+    public static final BedrockCodec DEFAULT_BEDROCK_CODEC = CodecProcessor.processCodec(Bedrock_v766.CODEC.toBuilder()
         .minecraftVersion("1.21.50")
-        .protocolVersion(766)
         .build());
 
     /**

File: core/src/main/java/org/geysermc/geyser/registry/populator/BlockRegistryPopulator.java
Patch:
@@ -45,7 +45,7 @@
 import org.cloudburstmc.nbt.NbtType;
 import org.cloudburstmc.nbt.NbtUtils;
 import org.cloudburstmc.protocol.bedrock.codec.v748.Bedrock_v748;
-import org.cloudburstmc.protocol.bedrock.codec.v765.Bedrock_v765;
+import org.cloudburstmc.protocol.bedrock.codec.v766.Bedrock_v766;
 import org.cloudburstmc.protocol.bedrock.data.BlockPropertyData;
 import org.cloudburstmc.protocol.bedrock.data.definitions.BlockDefinition;
 import org.geysermc.geyser.GeyserImpl;
@@ -126,7 +126,7 @@ private static void nullifyBlocksNbt() {
     private static void registerBedrockBlocks() {
         var blockMappers = ImmutableMap.<ObjectIntPair<String>, Remapper>builder()
                 .put(ObjectIntPair.of("1_21_40", Bedrock_v748.CODEC.getProtocolVersion()), faultyStrippedWoodRemapper())
-                .put(ObjectIntPair.of("1_21_50", Bedrock_v765.CODEC.getProtocolVersion()), faultyStrippedWoodRemapper())
+                .put(ObjectIntPair.of("1_21_50", Bedrock_v766.CODEC.getProtocolVersion()), faultyStrippedWoodRemapper())
                 .build();
 
         // We can keep this strong as nothing should be garbage collected

File: core/src/main/java/org/geysermc/geyser/registry/populator/ItemRegistryPopulator.java
Patch:
@@ -46,7 +46,7 @@
 import org.cloudburstmc.nbt.NbtType;
 import org.cloudburstmc.nbt.NbtUtils;
 import org.cloudburstmc.protocol.bedrock.codec.v748.Bedrock_v748;
-import org.cloudburstmc.protocol.bedrock.codec.v765.Bedrock_v765;
+import org.cloudburstmc.protocol.bedrock.codec.v766.Bedrock_v766;
 import org.cloudburstmc.protocol.bedrock.data.definitions.BlockDefinition;
 import org.cloudburstmc.protocol.bedrock.data.definitions.ItemDefinition;
 import org.cloudburstmc.protocol.bedrock.data.definitions.SimpleItemDefinition;
@@ -109,7 +109,7 @@ interface Remapper {
     public static void populate() {
         List<PaletteVersion> paletteVersions = new ArrayList<>(2);
         paletteVersions.add(new PaletteVersion("1_21_40", Bedrock_v748.CODEC.getProtocolVersion()));
-        paletteVersions.add(new PaletteVersion("1_21_50", Bedrock_v765.CODEC.getProtocolVersion()));
+        paletteVersions.add(new PaletteVersion("1_21_50", Bedrock_v766.CODEC.getProtocolVersion()));
 
         GeyserBootstrap bootstrap = GeyserImpl.getInstance().getBootstrap();
 

File: core/src/main/java/org/geysermc/geyser/registry/populator/TagRegistryPopulator.java
Patch:
@@ -34,7 +34,7 @@
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenCustomHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectIntPair;
 import org.cloudburstmc.protocol.bedrock.codec.v748.Bedrock_v748;
-import org.cloudburstmc.protocol.bedrock.codec.v765.Bedrock_v765;
+import org.cloudburstmc.protocol.bedrock.codec.v766.Bedrock_v766;
 import org.geysermc.geyser.GeyserBootstrap;
 import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.item.type.Item;
@@ -68,7 +68,7 @@ public boolean equals(int[] a, int[] b) {
 
         List<ObjectIntPair<String>> paletteVersions = List.of(
             ObjectIntPair.of("1_21_40", Bedrock_v748.CODEC.getProtocolVersion()),
-            ObjectIntPair.of("1_21_50", Bedrock_v765.CODEC.getProtocolVersion())
+            ObjectIntPair.of("1_21_50", Bedrock_v766.CODEC.getProtocolVersion())
         );
         Type type = new TypeToken<Map<String, List<String>>>() {}.getType();
 

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/JavaTeleportEntityTranslator.java
Patch:
@@ -35,6 +35,6 @@ public class JavaTeleportEntityTranslator extends PacketTranslator<ClientboundTe
 
     @Override
     public void translate(GeyserSession session, ClientboundTeleportEntityPacket packet) {
-        session.getGeyser().getLogger().info(packet.toString());
+        session.getGeyser().getLogger().debug(packet.toString());
     }
 }

File: core/src/main/java/org/geysermc/geyser/registry/Registries.java
Patch:
@@ -70,6 +70,7 @@
 import java.util.IdentityHashMap;
 import java.util.Map;
 import java.util.Set;
+import java.util.UUID;
 
 /**
  * Holds all the common registries in Geyser.
@@ -163,7 +164,7 @@ public final class Registries {
     /**
      * A mapped registry holding {@link ResourcePack}'s with the pack uuid as keys.
      */
-    public static final SimpleMappedDeferredRegistry<String, ResourcePack> RESOURCE_PACKS = SimpleMappedDeferredRegistry.create(GeyserImpl.getInstance().packDirectory(), RegistryLoaders.RESOURCE_PACKS);
+    public static final SimpleMappedDeferredRegistry<UUID, ResourcePack> RESOURCE_PACKS = SimpleMappedDeferredRegistry.create(GeyserImpl.getInstance().packDirectory(), RegistryLoaders.RESOURCE_PACKS);
 
     /**
      * A versioned registry holding most Bedrock tags, with the Java item list (sorted) being the key, and the tag name as the value.

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -2241,9 +2241,7 @@ public int protocolVersion() {
 
     @Override
     public void closeForm() {
-        if (!GameProtocol.isPre1_21_2(this)) {
-            sendUpstreamPacket(new ClientboundCloseFormPacket());
-        }
+        sendUpstreamPacket(new ClientboundCloseFormPacket());
     }
 
     public void addCommandEnum(String name, String enums) {

File: core/src/main/java/org/geysermc/geyser/inventory/holder/BlockInventoryHolder.java
Patch:
@@ -157,7 +157,7 @@ public void openInventory(InventoryTranslator translator, GeyserSession session,
     @Override
     public void closeInventory(InventoryTranslator translator, GeyserSession session, Inventory inventory) {
         if (inventory instanceof Container container) {
-            if (container.isUsingRealBlock() && !(inventory instanceof LecternContainer)) {
+            if (container.isUsingRealBlock() && !(container instanceof LecternContainer)) {
                 // No need to reset a block since we didn't change any blocks
                 // But send a container close packet because we aren't destroying the original.
                 ContainerClosePacket packet = new ContainerClosePacket();

File: api/src/main/java/org/geysermc/geyser/api/entity/type/player/GeyserPlayerEntity.java
Patch:
@@ -31,9 +31,9 @@
 public interface GeyserPlayerEntity extends GeyserEntity {
 
     /**
-     * Gets the position of the player.
+     * Gets the position of the player, as it is known to the Java server.
      *
-     * @return the position of the player.
+     * @return the player's position
      */
     Vector3f position();
 }

File: core/src/main/java/org/geysermc/geyser/entity/type/player/PlayerEntity.java
Patch:
@@ -97,11 +97,11 @@ public class PlayerEntity extends LivingEntity implements GeyserPlayerEntity {
     /**
      * Saves the parrot currently on the player's left shoulder; otherwise null
      */
-    private ParrotEntity leftParrot;
+    private @Nullable ParrotEntity leftParrot;
     /**
      * Saves the parrot currently on the player's right shoulder; otherwise null
      */
-    private ParrotEntity rightParrot;
+    private @Nullable ParrotEntity rightParrot;
 
     public PlayerEntity(GeyserSession session, int entityId, long geyserId, UUID uuid, Vector3f position,
                         Vector3f motion, float yaw, float pitch, float headYaw, String username, @Nullable String texturesProperty) {
@@ -450,6 +450,6 @@ public UUID getTabListUuid() {
 
     @Override
     public Vector3f position() {
-        return this.position.clone();
+        return this.position.down(definition.offset());
     }
 }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/input/BedrockPlayerAuthInputTranslator.java
Patch:
@@ -250,7 +250,7 @@ private static void processVehicleInput(GeyserSession session, PlayerAuthInputPa
             }
         }
 
-        if (vehicle instanceof AbstractHorseEntity) {
+        if (vehicle instanceof AbstractHorseEntity && !vehicle.getFlag(EntityFlag.HAS_DASH_COOLDOWN)) {
             // Behavior verified as of Java Edition 1.21.3
             int currentJumpingTicks = session.getInputCache().getJumpingTicks();
             if (currentJumpingTicks < 0) {

File: core/src/main/java/org/geysermc/geyser/item/Items.java
Patch:
@@ -48,6 +48,7 @@
 import org.geysermc.geyser.item.type.LightItem;
 import org.geysermc.geyser.item.type.MaceItem;
 import org.geysermc.geyser.item.type.MapItem;
+import org.geysermc.geyser.item.type.OminousBottleItem;
 import org.geysermc.geyser.item.type.PlayerHeadItem;
 import org.geysermc.geyser.item.type.PotionItem;
 import org.geysermc.geyser.item.type.ShieldItem;
@@ -1443,7 +1444,7 @@ public final class Items {
     public static final Item TRIAL_KEY = register(new Item("trial_key", builder()));
     public static final Item OMINOUS_TRIAL_KEY = register(new Item("ominous_trial_key", builder()));
     public static final Item VAULT = register(new BlockItem(builder(), Blocks.VAULT));
-    public static final Item OMINOUS_BOTTLE = register(new Item("ominous_bottle", builder()));
+    public static final Item OMINOUS_BOTTLE = register(new OminousBottleItem("ominous_bottle", builder()));
 
     public static final int AIR_ID = AIR.javaId();
 

File: core/src/main/java/org/geysermc/geyser/entity/EntityDefinitions.java
Patch:
@@ -492,6 +492,7 @@ public final class EntityDefinitions {
             EntityDefinition<AbstractArrowEntity> abstractArrowBase = EntityDefinition.inherited(AbstractArrowEntity::new, entityBase)
                     .addTranslator(MetadataType.BYTE, AbstractArrowEntity::setArrowFlags)
                     .addTranslator(null) // "Piercing level"
+                    .addTranslator(null) // If the arrow is in the ground
                     .build();
             ARROW = EntityDefinition.inherited(ArrowEntity::new, abstractArrowBase)
                     .type(EntityType.ARROW)

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/inventory/JavaContainerSetSlotTranslator.java
Patch:
@@ -224,7 +224,7 @@ private static void updateCraftingGrid(GeyserSession session, int slot, ItemStac
         }, 150, TimeUnit.MILLISECONDS));
     }
 
-    private static void updateSmithingTableOutput(GeyserSession session, int slot, ItemStack output, Inventory inventory) {
+    static void updateSmithingTableOutput(GeyserSession session, int slot, ItemStack output, Inventory inventory) {
         if (slot != SmithingInventoryTranslator.OUTPUT) {
             return;
         }

File: core/src/main/java/org/geysermc/geyser/item/Items.java
Patch:
@@ -45,6 +45,7 @@
 import org.geysermc.geyser.item.type.FishingRodItem;
 import org.geysermc.geyser.item.type.GoatHornItem;
 import org.geysermc.geyser.item.type.Item;
+import org.geysermc.geyser.item.type.LightItem;
 import org.geysermc.geyser.item.type.MaceItem;
 import org.geysermc.geyser.item.type.MapItem;
 import org.geysermc.geyser.item.type.PlayerHeadItem;
@@ -526,7 +527,7 @@ public final class Items {
     public static final Item RED_TERRACOTTA = register(new BlockItem(builder(), Blocks.RED_TERRACOTTA));
     public static final Item BLACK_TERRACOTTA = register(new BlockItem(builder(), Blocks.BLACK_TERRACOTTA));
     public static final Item BARRIER = register(new BlockItem(builder(), Blocks.BARRIER));
-    public static final Item LIGHT = register(new BlockItem(builder(), Blocks.LIGHT));
+    public static final Item LIGHT = register(new LightItem(builder(), Blocks.LIGHT));
     public static final Item HAY_BLOCK = register(new BlockItem(builder(), Blocks.HAY_BLOCK));
     public static final Item WHITE_CARPET = register(new BlockItem(builder(), Blocks.WHITE_CARPET));
     public static final Item ORANGE_CARPET = register(new BlockItem(builder(), Blocks.ORANGE_CARPET));

File: core/src/main/java/org/geysermc/geyser/registry/populator/TagRegistryPopulator.java
Patch:
@@ -47,6 +47,7 @@
 
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.lang.reflect.Type;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
@@ -75,7 +76,7 @@ public boolean equals(int[] a, int[] b) {
             ObjectIntPair.of("1_21_30", Bedrock_v729.CODEC.getProtocolVersion()),
             ObjectIntPair.of("1_21_40", Bedrock_v748.CODEC.getProtocolVersion())
         );
-        TypeToken<Map<String, List<String>>> type = new TypeToken<>() {};
+        Type type = new TypeToken<Map<String, List<String>>>() {}.getType();
 
         GeyserBootstrap bootstrap = GeyserImpl.getInstance().getBootstrap();
 

File: core/src/main/java/org/geysermc/geyser/inventory/recipe/GeyserRecipe.java
Patch:
@@ -25,7 +25,6 @@
 
 package org.geysermc.geyser.inventory.recipe;
 
-import org.checkerframework.checker.nullness.qual.Nullable;
 import org.geysermc.mcprotocollib.protocol.data.game.recipe.display.slot.SlotDisplay;
 
 /**
@@ -37,6 +36,5 @@ public interface GeyserRecipe {
      */
     boolean isShaped();
 
-    @Nullable
     SlotDisplay result();
 }

File: core/src/main/java/org/geysermc/geyser/inventory/recipe/GeyserShapedRecipe.java
Patch:
@@ -25,13 +25,12 @@
 
 package org.geysermc.geyser.inventory.recipe;
 
-import org.checkerframework.checker.nullness.qual.Nullable;
 import org.geysermc.mcprotocollib.protocol.data.game.recipe.display.ShapedCraftingRecipeDisplay;
 import org.geysermc.mcprotocollib.protocol.data.game.recipe.display.slot.SlotDisplay;
 
 import java.util.List;
 
-public record GeyserShapedRecipe(int width, int height, List<SlotDisplay> ingredients, @Nullable SlotDisplay result) implements GeyserRecipe {
+public record GeyserShapedRecipe(int width, int height, List<SlotDisplay> ingredients, SlotDisplay result) implements GeyserRecipe {
 
     public GeyserShapedRecipe(ShapedCraftingRecipeDisplay data) {
         this(data.width(), data.height(), data.ingredients(), data.result());

File: core/src/main/java/org/geysermc/geyser/inventory/recipe/GeyserShapelessRecipe.java
Patch:
@@ -25,13 +25,12 @@
 
 package org.geysermc.geyser.inventory.recipe;
 
-import org.checkerframework.checker.nullness.qual.Nullable;
 import org.geysermc.mcprotocollib.protocol.data.game.recipe.display.ShapelessCraftingRecipeDisplay;
 import org.geysermc.mcprotocollib.protocol.data.game.recipe.display.slot.SlotDisplay;
 
 import java.util.List;
 
-public record GeyserShapelessRecipe(List<SlotDisplay> ingredients, @Nullable SlotDisplay result) implements GeyserRecipe {
+public record GeyserShapelessRecipe(List<SlotDisplay> ingredients, SlotDisplay result) implements GeyserRecipe {
 
     public GeyserShapelessRecipe(ShapelessCraftingRecipeDisplay data) {
         this(data.ingredients(), data.result());

File: core/src/main/java/org/geysermc/geyser/registry/populator/BlockRegistryPopulator.java
Patch:
@@ -196,11 +196,10 @@ private static void registerBedrockBlocks() {
             GeyserBedrockBlock[] bedrockRuntimeMap = new GeyserBedrockBlock[blockStates.size()];
             for (int i = 0; i < blockStates.size(); i++) {
                 NbtMap tag = blockStates.get(i);
-                if (blockStateOrderedMap.containsKey(tag)) {
+                GeyserBedrockBlock block = new GeyserBedrockBlock(i, tag);
+                if (blockStateOrderedMap.put(tag, block) != null) {
                     throw new AssertionError("Duplicate block states in Bedrock palette: " + tag);
                 }
-                GeyserBedrockBlock block = new GeyserBedrockBlock(i, tag);
-                blockStateOrderedMap.put(tag, block);
                 bedrockRuntimeMap[i] = block;
             }
 

File: core/src/main/java/org/geysermc/geyser/item/Items.java
Patch:
@@ -1237,7 +1237,7 @@ public final class Items {
     public static final Item IRON_HORSE_ARMOR = register(new Item("iron_horse_armor", builder().stackSize(1)));
     public static final Item GOLDEN_HORSE_ARMOR = register(new Item("golden_horse_armor", builder().stackSize(1)));
     public static final Item DIAMOND_HORSE_ARMOR = register(new Item("diamond_horse_armor", builder().stackSize(1)));
-    public static final Item LEATHER_HORSE_ARMOR = register(new Item("leather_horse_armor", builder().stackSize(1)));
+    public static final Item LEATHER_HORSE_ARMOR = register(new DyeableArmorItem("leather_horse_armor", ArmorMaterial.LEATHER, builder().stackSize(1)));
     public static final Item LEAD = register(new Item("lead", builder()));
     public static final Item NAME_TAG = register(new Item("name_tag", builder()));
     public static final Item COMMAND_BLOCK_MINECART = register(new Item("command_block_minecart", builder().stackSize(1)));

File: core/src/main/java/org/geysermc/geyser/entity/type/Entity.java
Patch:
@@ -45,7 +45,6 @@
 import org.geysermc.geyser.entity.EntityDefinition;
 import org.geysermc.geyser.entity.GeyserDirtyMetadata;
 import org.geysermc.geyser.entity.properties.GeyserEntityPropertyManager;
-import org.geysermc.geyser.entity.type.player.SessionPlayerEntity;
 import org.geysermc.geyser.item.Items;
 import org.geysermc.geyser.scoreboard.Team;
 import org.geysermc.geyser.session.GeyserSession;

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/player/JavaPlayerLookAtTranslator.java
Patch:
@@ -49,7 +49,7 @@ public void translate(GeyserSession session, ClientboundPlayerLookAtPacket packe
 
         var self = session.getPlayerEntity();
         // headYaw is also set to yaw in this packet
-        self.updateRotation(yaw, pitch, yaw, self.isOnGround());
+        self.updateOwnRotation(yaw, pitch, yaw);
     }
 
     public Vector3f targetPosition(GeyserSession session, ClientboundPlayerLookAtPacket packet) {

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/player/JavaPlayerPositionTranslator.java
Patch:
@@ -80,7 +80,7 @@ public void translate(GeyserSession session, ClientboundPlayerPositionPacket pac
             // Fixes incorrect rotation upon login
             // Yes, even that's not respected by Bedrock. Try it out in singleplayer!
             // Log out and back in - and you're looking elsewhere :)
-            entity.forceRotationUpdate();
+            entity.updateOwnRotation(entity.getYaw(), entity.getPitch(), entity.getHeadYaw());
 
             session.setSpawned(true);
             // Make sure the player moves away from (0, 32767, 0) before accepting movement packets

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/player/JavaPlayerRotationTranslator.java
Patch:
@@ -25,7 +25,6 @@
 
 package org.geysermc.geyser.translator.protocol.java.entity.player;
 
-import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.translator.protocol.PacketTranslator;
 import org.geysermc.geyser.translator.protocol.Translator;
@@ -36,7 +35,6 @@ public class JavaPlayerRotationTranslator extends PacketTranslator<ClientboundPl
 
     @Override
     public void translate(GeyserSession session, ClientboundPlayerRotationPacket packet) {
-        GeyserImpl.getInstance().getLogger().info(packet.toString());
-        // TODO
+        session.getPlayerEntity().updateOwnRotation(packet.getYRot(), packet.getXRot(), packet.getYRot());
     }
 }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaFinishConfigurationTranslator.java
Patch:
@@ -70,7 +70,9 @@ public void translate(GeyserSession session, ClientboundFinishConfigurationPacke
         craftingDataPacket.setCleanRecipes(true);
         craftingDataPacket.getCraftingData().addAll(CARTOGRAPHY_RECIPES);
         craftingDataPacket.getPotionMixData().addAll(Registries.POTION_MIXES.forVersion(session.getUpstream().getProtocolVersion()));
-        if (session.isSentSpawnPacket()) {
+        // TODO proper fix to check if we've been online - in online mode (with auth screen),
+        //  recipes are not yet known
+        if (session.isSentSpawnPacket() && session.getStonecutterRecipes() != null) {
             session.getUpstream().sendPacket(craftingDataPacket);
             session.getCraftingRecipes().clear();
             session.getJavaToBedrockRecipeIds().clear();

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/player/JavaCookieRequestTranslator.java
Patch:
@@ -38,7 +38,7 @@ public class JavaCookieRequestTranslator extends PacketTranslator<ClientboundCoo
     public void translate(GeyserSession session, ClientboundCookieRequestPacket packet) {
         ServerboundCookieResponsePacket responsePacket = new ServerboundCookieResponsePacket(
                 packet.getKey(),
-                session.getCookies().get(packet.getKey())
+                session.getCookies().get(packet.getKey().asString())
         );
         session.sendDownstreamPacket(responsePacket);
     }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaClientboundResourcePackPushPacket.java
Patch:
@@ -40,6 +40,8 @@ public void translate(GeyserSession session, ClientboundResourcePackPushPacket p
         // We need to "answer" this to avoid timeout issues related to resource packs
         // If packs are required, we need to lie to the server that we accepted them, as we get kicked otherwise.
         if (packet.isRequired()) {
+            session.sendDownstreamPacket(new ServerboundResourcePackPacket(packet.getId(), ResourcePackStatus.ACCEPTED));
+            session.sendDownstreamPacket(new ServerboundResourcePackPacket(packet.getId(), ResourcePackStatus.DOWNLOADED));
             session.sendDownstreamPacket(new ServerboundResourcePackPacket(packet.getId(), ResourcePackStatus.SUCCESSFULLY_LOADED));
         } else {
             session.sendDownstreamPacket(new ServerboundResourcePackPacket(packet.getId(), ResourcePackStatus.DECLINED));

File: core/src/main/java/org/geysermc/geyser/scoreboard/Scoreboard.java
Patch:
@@ -178,7 +178,7 @@ public void registerNewTeam(
         Team team = teams.get(teamName);
         if (team != null) {
             if (SHOW_SCOREBOARD_LOGS) {
-                logger.info(GeyserLocale.getLocaleStringLog("geyser.network.translator.team.failed_overrides", teamName));
+                logger.info("Ignoring team %s for %s. It overrides without removing old team.".formatted(teamName, session.javaUsername()));
             }
             return;
         }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/player/JavaPlayerPositionTranslator.java
Patch:
@@ -47,7 +47,6 @@ public class JavaPlayerPositionTranslator extends PacketTranslator<ClientboundPl
 
     @Override
     public void translate(GeyserSession session, ClientboundPlayerPositionPacket packet) {
-        System.out.println(packet);
         if (!session.isLoggedIn())
             return;
 

File: core/src/main/java/org/geysermc/geyser/util/InventoryUtils.java
Patch:
@@ -519,7 +519,7 @@ public static GeyserRecipe getValidRecipe(final GeyserSession session, final @Nu
                         }
                     }
 
-                    if (!ingredients.equals(mirroredIngredients) ||
+                    if (ingredients.equals(mirroredIngredients) ||
                             !testShapedRecipe(session, mirroredIngredients, inventoryGetter, gridDimensions, firstRow, height, firstCol, width)) {
                         continue;
                     }
@@ -551,7 +551,6 @@ public static GeyserRecipe getValidRecipe(final GeyserSession session, final @Nu
                     }
                 }
             }
-            System.out.println("Found existing match for item: " + recipe);
             return recipe;
         }
         return null;

File: core/src/main/java/org/geysermc/geyser/registry/populator/Conversion729_712.java
Patch:
@@ -16,6 +16,7 @@ public class Conversion729_712 {
     private static final List<String> NEW_BLOCKS = Stream.of(NEW_PURPUR_BLOCKS, NEW_WALL_BLOCKS, NEW_SPONGE_BLOCKS, NEW_TNT_BLOCKS, STRUCTURE_VOID).flatMap(List::stream).toList();
 
     static GeyserMappingItem remapItem(Item item, GeyserMappingItem mapping) {
+        mapping = Conversion748_729.remapItem(item, mapping);
         String identifier = mapping.getBedrockIdentifier();
 
         if (!NEW_BLOCKS.contains(identifier)) {

File: core/src/main/java/org/geysermc/geyser/registry/BlockRegistries.java
Patch:
@@ -145,8 +145,6 @@ public static void load() {
         CUSTOM_BLOCK_ITEM_OVERRIDES.load();
         EXTENDED_COLLISION_BOXES.load();
         CUSTOM_SKULLS.load();
-
-        COLLISIONS.load();
     }
 
     public static void populate() {
@@ -156,6 +154,7 @@ public static void populate() {
         CustomBlockRegistryPopulator.populate(CustomBlockRegistryPopulator.Stage.DEFINITION);
         CustomBlockRegistryPopulator.populate(CustomBlockRegistryPopulator.Stage.NON_VANILLA_REGISTRATION);
         BlockRegistryPopulator.populate(BlockRegistryPopulator.Stage.INIT_JAVA);
+        COLLISIONS.load();
         CustomBlockRegistryPopulator.populate(CustomBlockRegistryPopulator.Stage.VANILLA_REGISTRATION);
         CustomBlockRegistryPopulator.populate(CustomBlockRegistryPopulator.Stage.CUSTOM_REGISTRATION);
         BlockRegistryPopulator.populate(BlockRegistryPopulator.Stage.INIT_BEDROCK);

File: core/src/main/java/org/geysermc/geyser/registry/loader/PotionMixRegistryLoader.java
Patch:
@@ -125,4 +125,4 @@ private static ItemMapping getNonNull(ItemMappings mappings, Item javaItem) {
 
         return itemMapping;
     }
-}
\ No newline at end of file
+}

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/player/JavaPlayerInfoUpdateTranslator.java
Patch:
@@ -25,7 +25,6 @@
 
 package org.geysermc.geyser.translator.protocol.java.entity.player;
 
-import org.geysermc.mcprotocollib.auth.GameProfile;
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.cloudburstmc.math.vector.Vector3f;
 import org.cloudburstmc.protocol.bedrock.packet.PlayerListPacket;
@@ -35,6 +34,7 @@
 import org.geysermc.geyser.skin.SkinManager;
 import org.geysermc.geyser.translator.protocol.PacketTranslator;
 import org.geysermc.geyser.translator.protocol.Translator;
+import org.geysermc.mcprotocollib.auth.GameProfile;
 import org.geysermc.mcprotocollib.protocol.data.game.PlayerListEntry;
 import org.geysermc.mcprotocollib.protocol.data.game.PlayerListEntryAction;
 import org.geysermc.mcprotocollib.protocol.packet.ingame.clientbound.ClientboundPlayerInfoUpdatePacket;
@@ -95,8 +95,6 @@ public void translate(GeyserSession session, ClientboundPlayerInfoUpdatePacket p
                 if (self) {
                     SkinManager.requestAndHandleSkinAndCape(playerEntity, session, skinAndCape ->
                             GeyserImpl.getInstance().getLogger().debug("Loaded Local Bedrock Java Skin Data for " + session.getClientData().getUsername()));
-                } else {
-                    playerEntity.setValid(true);
                 }
             }
         }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/scoreboard/JavaSetDisplayObjectiveTranslator.java
Patch:
@@ -25,13 +25,13 @@
 
 package org.geysermc.geyser.translator.protocol.java.scoreboard;
 
-import org.geysermc.mcprotocollib.protocol.packet.ingame.clientbound.scoreboard.ClientboundSetDisplayObjectivePacket;
 import org.geysermc.geyser.scoreboard.Scoreboard;
 import org.geysermc.geyser.scoreboard.ScoreboardUpdater;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.session.cache.WorldCache;
 import org.geysermc.geyser.translator.protocol.PacketTranslator;
 import org.geysermc.geyser.translator.protocol.Translator;
+import org.geysermc.mcprotocollib.protocol.packet.ingame.clientbound.scoreboard.ClientboundSetDisplayObjectivePacket;
 
 @Translator(packet = ClientboundSetDisplayObjectivePacket.class)
 public class JavaSetDisplayObjectiveTranslator extends PacketTranslator<ClientboundSetDisplayObjectivePacket> {

File: core/src/main/java/org/geysermc/geyser/util/EntityUtils.java
Patch:
@@ -297,7 +297,7 @@ public static GameType toBedrockGamemode(GameMode gamemode) {
     private static String translatedEntityName(@NonNull String namespace, @NonNull String name, @NonNull GeyserSession session) {
         // MinecraftLocale would otherwise invoke getBootstrap (which doesn't exist) and create some folders,
         // so use the default fallback value as used in Minecraft Java
-        if (EnvironmentUtils.isUnitTesting) {
+        if (EnvironmentUtils.IS_UNIT_TESTING) {
             return "entity." + namespace + "." + name;
         }
         return MinecraftLocale.getLocaleString("entity." + namespace + "." + name, session.locale());

File: core/src/main/java/org/geysermc/geyser/util/EnvironmentUtils.java
Patch:
@@ -26,7 +26,7 @@
 package org.geysermc.geyser.util;
 
 public final class EnvironmentUtils {
-    public static final boolean isUnitTesting = isUnitTesting();
+    public static final boolean IS_UNIT_TESTING = isUnitTesting();
 
     private EnvironmentUtils() {}
 

File: core/src/main/java/org/geysermc/geyser/entity/type/Entity.java
Patch:
@@ -45,6 +45,7 @@
 import org.geysermc.geyser.entity.EntityDefinition;
 import org.geysermc.geyser.entity.GeyserDirtyMetadata;
 import org.geysermc.geyser.entity.properties.GeyserEntityPropertyManager;
+import org.geysermc.geyser.entity.type.player.SessionPlayerEntity;
 import org.geysermc.geyser.item.Items;
 import org.geysermc.geyser.scoreboard.Team;
 import org.geysermc.geyser.session.GeyserSession;

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/BedrockAnimateTranslator.java
Patch:
@@ -44,7 +44,6 @@ public void translate(GeyserSession session, AnimatePacket packet) {
             return;
         }
 
-        System.out.println("wewewewewewewewewewewe");
         if (packet.getAction() == AnimatePacket.Action.SWING_ARM) {
             session.armSwingPending();
             // Delay so entity damage can be processed first

File: core/src/main/java/org/geysermc/geyser/inventory/GeyserItemStack.java
Patch:
@@ -164,6 +164,9 @@ public ItemMapping getMapping(GeyserSession session) {
     }
 
     public Item asItem() {
+        if (isEmpty()) {
+            return Items.AIR;
+        }
         if (item == null) {
             return (item = Registries.JAVA_ITEMS.get().get(javaId));
         }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/BedrockBlockActions.java
Patch:
@@ -209,7 +209,6 @@ private static void handle(GeyserSession session, SessionPlayerEntity entity, Pl
                 attributesPacket.getAttributes().addAll(entity.getAttributes().values());
                 session.sendUpstreamPacket(attributesPacket);
             }
-            case JUMP -> entity.setOnGround(false); // Increase block break time while jumping
             case MISSED_SWING -> {
                 // Java edition sends a cooldown when hitting air.
                 // Normally handled by BedrockLevelSoundEventTranslator, but there is no sound on Java for this.

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/JavaEntityPositionSyncTranslator.java
Patch:
@@ -47,6 +47,6 @@ public void translate(GeyserSession session, ClientboundEntityPositionSyncPacket
             clientVehicle.getVehicleComponent().moveAbsolute(pos.getX(), pos.getY(), pos.getZ());
         }
 
-        entity.teleport(pos.toFloat(), packet.getXRot(), packet.getYRot(), packet.isOnGround());
+        entity.teleport(pos.toFloat(), packet.getYRot(), packet.getXRot(), packet.isOnGround());
     }
 }

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/ArmadilloEntity.java
Patch:
@@ -28,8 +28,10 @@
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.cloudburstmc.math.vector.Vector3f;
 import org.geysermc.geyser.entity.EntityDefinition;
+import org.geysermc.geyser.item.type.Item;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.session.cache.tags.ItemTag;
+import org.geysermc.geyser.session.cache.tags.Tag;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.ArmadilloState;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.type.ObjectEntityMetadata;
 
@@ -75,7 +77,7 @@ public void onPeeking() {
 
     @Override
     @Nullable
-    protected ItemTag getFoodTag() {
+    protected Tag<Item> getFoodTag() {
         return ItemTag.ARMADILLO_FOOD;
     }
 }

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/AxolotlEntity.java
Patch:
@@ -32,8 +32,10 @@
 import org.cloudburstmc.protocol.bedrock.data.entity.EntityFlag;
 import org.geysermc.geyser.entity.EntityDefinition;
 import org.geysermc.geyser.inventory.GeyserItemStack;
+import org.geysermc.geyser.item.type.Item;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.session.cache.tags.ItemTag;
+import org.geysermc.geyser.session.cache.tags.Tag;
 import org.geysermc.geyser.util.EntityUtils;
 import org.geysermc.geyser.util.InteractionResult;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.type.BooleanEntityMetadata;
@@ -62,7 +64,7 @@ public void setPlayingDead(BooleanEntityMetadata entityMetadata) {
 
     @Override
     @Nullable
-    protected ItemTag getFoodTag() {
+    protected Tag<Item> getFoodTag() {
         return ItemTag.AXOLOTL_FOOD;
     }
 

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/BeeEntity.java
Patch:
@@ -32,8 +32,10 @@
 import org.cloudburstmc.protocol.bedrock.data.entity.EntityFlag;
 import org.cloudburstmc.protocol.bedrock.packet.EntityEventPacket;
 import org.geysermc.geyser.entity.EntityDefinition;
+import org.geysermc.geyser.item.type.Item;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.session.cache.tags.ItemTag;
+import org.geysermc.geyser.session.cache.tags.Tag;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.type.ByteEntityMetadata;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.type.IntEntityMetadata;
 
@@ -69,7 +71,7 @@ public void setAngerTime(IntEntityMetadata entityMetadata) {
 
     @Override
     @Nullable
-    protected ItemTag getFoodTag() {
+    protected Tag<Item> getFoodTag() {
         return ItemTag.BEE_FOOD;
     }
 }

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/ChickenEntity.java
Patch:
@@ -28,8 +28,10 @@
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.cloudburstmc.math.vector.Vector3f;
 import org.geysermc.geyser.entity.EntityDefinition;
+import org.geysermc.geyser.item.type.Item;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.session.cache.tags.ItemTag;
+import org.geysermc.geyser.session.cache.tags.Tag;
 
 import java.util.UUID;
 
@@ -41,7 +43,7 @@ public ChickenEntity(GeyserSession session, int entityId, long geyserId, UUID uu
 
     @Override
     @Nullable
-    protected ItemTag getFoodTag() {
+    protected Tag<Item> getFoodTag() {
         return ItemTag.CHICKEN_FOOD;
     }
 }

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/CowEntity.java
Patch:
@@ -33,8 +33,10 @@
 import org.geysermc.geyser.entity.EntityDefinition;
 import org.geysermc.geyser.inventory.GeyserItemStack;
 import org.geysermc.geyser.item.Items;
+import org.geysermc.geyser.item.type.Item;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.session.cache.tags.ItemTag;
+import org.geysermc.geyser.session.cache.tags.Tag;
 import org.geysermc.geyser.util.InteractionResult;
 import org.geysermc.geyser.util.InteractiveTag;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.player.Hand;
@@ -69,7 +71,7 @@ protected InteractionResult mobInteract(@NonNull Hand hand, @NonNull GeyserItemS
 
     @Override
     @Nullable
-    protected ItemTag getFoodTag() {
+    protected Tag<Item> getFoodTag() {
         return ItemTag.COW_FOOD;
     }
 }

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/FoxEntity.java
Patch:
@@ -30,8 +30,10 @@
 import org.cloudburstmc.protocol.bedrock.data.entity.EntityDataTypes;
 import org.cloudburstmc.protocol.bedrock.data.entity.EntityFlag;
 import org.geysermc.geyser.entity.EntityDefinition;
+import org.geysermc.geyser.item.type.Item;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.session.cache.tags.ItemTag;
+import org.geysermc.geyser.session.cache.tags.Tag;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.type.ByteEntityMetadata;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.type.IntEntityMetadata;
 
@@ -57,7 +59,7 @@ public void setFoxFlags(ByteEntityMetadata entityMetadata) {
 
     @Override
     @Nullable
-    protected ItemTag getFoodTag() {
+    protected Tag<Item> getFoodTag() {
         return ItemTag.FOX_FOOD;
     }
 }

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/FrogEntity.java
Patch:
@@ -31,8 +31,10 @@
 import org.cloudburstmc.protocol.bedrock.data.entity.EntityFlag;
 import org.geysermc.geyser.entity.EntityDefinition;
 import org.geysermc.geyser.entity.type.Entity;
+import org.geysermc.geyser.item.type.Item;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.session.cache.tags.ItemTag;
+import org.geysermc.geyser.session.cache.tags.Tag;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.Pose;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.type.IntEntityMetadata;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.type.ObjectEntityMetadata;
@@ -77,7 +79,7 @@ public void setTongueTarget(ObjectEntityMetadata<OptionalInt> entityMetadata) {
 
     @Override
     @Nullable
-    protected ItemTag getFoodTag() {
+    protected Tag<Item> getFoodTag() {
         return ItemTag.FROG_FOOD;
     }
 }

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/GoatEntity.java
Patch:
@@ -34,8 +34,10 @@
 import org.geysermc.geyser.entity.EntityDefinition;
 import org.geysermc.geyser.inventory.GeyserItemStack;
 import org.geysermc.geyser.item.Items;
+import org.geysermc.geyser.item.type.Item;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.session.cache.tags.ItemTag;
+import org.geysermc.geyser.session.cache.tags.Tag;
 import org.geysermc.geyser.util.InteractionResult;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.Pose;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.type.BooleanEntityMetadata;
@@ -99,7 +101,7 @@ private void setHornCount() {
 
     @Override
     @Nullable
-    protected ItemTag getFoodTag() {
+    protected Tag<Item> getFoodTag() {
         return ItemTag.GOAT_FOOD;
     }
 }

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/HoglinEntity.java
Patch:
@@ -30,8 +30,10 @@
 import org.cloudburstmc.protocol.bedrock.data.entity.EntityDataTypes;
 import org.cloudburstmc.protocol.bedrock.data.entity.EntityFlag;
 import org.geysermc.geyser.entity.EntityDefinition;
+import org.geysermc.geyser.item.type.Item;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.session.cache.tags.ItemTag;
+import org.geysermc.geyser.session.cache.tags.Tag;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.type.BooleanEntityMetadata;
 
 import java.util.UUID;
@@ -58,7 +60,7 @@ protected boolean isShaking() {
 
     @Override
     @Nullable
-    protected ItemTag getFoodTag() {
+    protected Tag<Item> getFoodTag() {
         return ItemTag.HOGLIN_FOOD;
     }
 

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/OcelotEntity.java
Patch:
@@ -31,8 +31,10 @@
 import org.cloudburstmc.protocol.bedrock.data.entity.EntityFlag;
 import org.geysermc.geyser.entity.EntityDefinition;
 import org.geysermc.geyser.inventory.GeyserItemStack;
+import org.geysermc.geyser.item.type.Item;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.session.cache.tags.ItemTag;
+import org.geysermc.geyser.session.cache.tags.Tag;
 import org.geysermc.geyser.util.InteractionResult;
 import org.geysermc.geyser.util.InteractiveTag;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.player.Hand;
@@ -47,7 +49,7 @@ public OcelotEntity(GeyserSession session, int entityId, long geyserId, UUID uui
 
     @Override
     @Nullable
-    protected ItemTag getFoodTag() {
+    protected Tag<Item> getFoodTag() {
         return ItemTag.OCELOT_FOOD;
     }
 

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/PandaEntity.java
Patch:
@@ -34,8 +34,10 @@
 import org.cloudburstmc.protocol.bedrock.packet.EntityEventPacket;
 import org.geysermc.geyser.entity.EntityDefinition;
 import org.geysermc.geyser.inventory.GeyserItemStack;
+import org.geysermc.geyser.item.type.Item;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.session.cache.tags.ItemTag;
+import org.geysermc.geyser.session.cache.tags.Tag;
 import org.geysermc.geyser.util.InteractionResult;
 import org.geysermc.geyser.util.InteractiveTag;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.type.ByteEntityMetadata;
@@ -90,7 +92,7 @@ public void setPandaFlags(ByteEntityMetadata entityMetadata) {
 
     @Override
     @Nullable
-    protected ItemTag getFoodTag() {
+    protected Tag<Item> getFoodTag() {
         return ItemTag.PANDA_FOOD;
     }
 

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/PigEntity.java
Patch:
@@ -38,9 +38,11 @@
 import org.geysermc.geyser.entity.vehicle.ClientVehicle;
 import org.geysermc.geyser.entity.vehicle.VehicleComponent;
 import org.geysermc.geyser.inventory.GeyserItemStack;
+import org.geysermc.geyser.item.type.Item;
 import org.geysermc.geyser.item.Items;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.session.cache.tags.ItemTag;
+import org.geysermc.geyser.session.cache.tags.Tag;
 import org.geysermc.geyser.util.EntityUtils;
 import org.geysermc.geyser.util.InteractionResult;
 import org.geysermc.geyser.util.InteractiveTag;
@@ -58,7 +60,7 @@ public PigEntity(GeyserSession session, int entityId, long geyserId, UUID uuid,
 
     @Override
     @Nullable
-    protected ItemTag getFoodTag() {
+    protected Tag<Item> getFoodTag() {
         return ItemTag.PIG_FOOD;
     }
 

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/PolarBearEntity.java
Patch:
@@ -28,8 +28,9 @@
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.cloudburstmc.math.vector.Vector3f;
 import org.geysermc.geyser.entity.EntityDefinition;
+import org.geysermc.geyser.item.type.Item;
 import org.geysermc.geyser.session.GeyserSession;
-import org.geysermc.geyser.session.cache.tags.ItemTag;
+import org.geysermc.geyser.session.cache.tags.Tag;
 
 import java.util.UUID;
 
@@ -41,7 +42,7 @@ public PolarBearEntity(GeyserSession session, int entityId, long geyserId, UUID
 
     @Override
     @Nullable
-    protected ItemTag getFoodTag() {
+    protected Tag<Item> getFoodTag() {
         return null;
     }
 }

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/RabbitEntity.java
Patch:
@@ -31,8 +31,10 @@
 import org.cloudburstmc.protocol.bedrock.data.entity.EntityDataTypes;
 import org.cloudburstmc.protocol.bedrock.data.entity.EntityFlag;
 import org.geysermc.geyser.entity.EntityDefinition;
+import org.geysermc.geyser.item.type.Item;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.session.cache.tags.ItemTag;
+import org.geysermc.geyser.session.cache.tags.Tag;
 import org.geysermc.geyser.util.EntityUtils;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.type.IntEntityMetadata;
 
@@ -79,7 +81,7 @@ protected float getBabySize() {
 
     @Override
     @Nullable
-    protected ItemTag getFoodTag() {
+    protected Tag<Item> getFoodTag() {
         return ItemTag.RABBIT_FOOD;
     }
 }

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/SnifferEntity.java
Patch:
@@ -35,8 +35,10 @@
 import org.geysermc.geyser.entity.EntityDefinition;
 import org.geysermc.geyser.entity.EntityDefinitions;
 import org.geysermc.geyser.entity.type.Tickable;
+import org.geysermc.geyser.item.type.Item;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.session.cache.tags.ItemTag;
+import org.geysermc.geyser.session.cache.tags.Tag;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.Pose;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.SnifferState;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.type.ObjectEntityMetadata;
@@ -73,7 +75,7 @@ protected void setDimensions(Pose pose) {
 
     @Override
     @Nullable
-    protected ItemTag getFoodTag() {
+    protected Tag<Item> getFoodTag() {
         return ItemTag.SNIFFER_FOOD;
     }
 

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/StriderEntity.java
Patch:
@@ -39,9 +39,11 @@
 import org.geysermc.geyser.entity.vehicle.ClientVehicle;
 import org.geysermc.geyser.entity.vehicle.VehicleComponent;
 import org.geysermc.geyser.inventory.GeyserItemStack;
+import org.geysermc.geyser.item.type.Item;
 import org.geysermc.geyser.item.Items;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.session.cache.tags.ItemTag;
+import org.geysermc.geyser.session.cache.tags.Tag;
 import org.geysermc.geyser.util.EntityUtils;
 import org.geysermc.geyser.util.InteractionResult;
 import org.geysermc.geyser.util.InteractiveTag;
@@ -105,7 +107,7 @@ protected boolean isShaking() {
 
     @Override
     @Nullable
-    protected ItemTag getFoodTag() {
+    protected Tag<Item> getFoodTag() {
         return ItemTag.STRIDER_FOOD;
     }
 

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/TurtleEntity.java
Patch:
@@ -29,8 +29,10 @@
 import org.cloudburstmc.math.vector.Vector3f;
 import org.cloudburstmc.protocol.bedrock.data.entity.EntityFlag;
 import org.geysermc.geyser.entity.EntityDefinition;
+import org.geysermc.geyser.item.type.Item;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.session.cache.tags.ItemTag;
+import org.geysermc.geyser.session.cache.tags.Tag;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.type.BooleanEntityMetadata;
 
 import java.util.UUID;
@@ -51,7 +53,7 @@ public void setLayingEgg(BooleanEntityMetadata entityMetadata) {
 
     @Override
     @Nullable
-    protected ItemTag getFoodTag() {
+    protected Tag<Item> getFoodTag() {
         return ItemTag.TURTLE_FOOD;
     }
 

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/horse/AbstractHorseEntity.java
Patch:
@@ -39,8 +39,10 @@
 import org.geysermc.geyser.entity.type.living.animal.AnimalEntity;
 import org.geysermc.geyser.inventory.GeyserItemStack;
 import org.geysermc.geyser.item.Items;
+import org.geysermc.geyser.item.type.Item;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.session.cache.tags.ItemTag;
+import org.geysermc.geyser.session.cache.tags.Tag;
 import org.geysermc.geyser.util.InteractionResult;
 import org.geysermc.geyser.util.InteractiveTag;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.type.ByteEntityMetadata;
@@ -119,7 +121,7 @@ public void setHorseFlags(ByteEntityMetadata entityMetadata) {
 
     @Override
     @Nullable
-    protected ItemTag getFoodTag() {
+    protected Tag<Item> getFoodTag() {
         return ItemTag.HORSE_FOOD;
     }
 

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/horse/CamelEntity.java
Patch:
@@ -35,12 +35,14 @@
 import org.cloudburstmc.protocol.bedrock.data.inventory.ContainerType;
 import org.cloudburstmc.protocol.bedrock.packet.EntityEventPacket;
 import org.geysermc.geyser.entity.EntityDefinition;
+import org.geysermc.geyser.item.type.Item;
 import org.geysermc.geyser.entity.attribute.GeyserAttributeType;
 import org.geysermc.geyser.entity.vehicle.CamelVehicleComponent;
 import org.geysermc.geyser.entity.vehicle.ClientVehicle;
 import org.geysermc.geyser.entity.vehicle.VehicleComponent;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.session.cache.tags.ItemTag;
+import org.geysermc.geyser.session.cache.tags.Tag;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.attribute.Attribute;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.attribute.AttributeType;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.Pose;
@@ -100,7 +102,7 @@ public void setHorseFlags(ByteEntityMetadata entityMetadata) {
     }
 
     @Override
-    protected @Nullable ItemTag getFoodTag() {
+    protected @Nullable Tag<Item> getFoodTag() {
         return ItemTag.CAMEL_FOOD;
     }
 

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/horse/LlamaEntity.java
Patch:
@@ -30,8 +30,10 @@
 import org.cloudburstmc.math.vector.Vector3f;
 import org.cloudburstmc.protocol.bedrock.data.entity.EntityDataTypes;
 import org.geysermc.geyser.entity.EntityDefinition;
+import org.geysermc.geyser.item.type.Item;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.session.cache.tags.ItemTag;
+import org.geysermc.geyser.session.cache.tags.Tag;
 import org.geysermc.geyser.util.MathUtils;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.type.IntEntityMetadata;
 
@@ -56,7 +58,7 @@ public void setStrength(IntEntityMetadata entityMetadata) {
     }
 
     @Override
-    protected @Nullable ItemTag getFoodTag() {
+    protected @Nullable Tag<Item> getFoodTag() {
         return ItemTag.LLAMA_FOOD;
     }
 }

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/tameable/CatEntity.java
Patch:
@@ -32,8 +32,10 @@
 import org.cloudburstmc.protocol.bedrock.data.entity.EntityFlag;
 import org.geysermc.geyser.entity.EntityDefinition;
 import org.geysermc.geyser.inventory.GeyserItemStack;
+import org.geysermc.geyser.item.type.Item;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.session.cache.tags.ItemTag;
+import org.geysermc.geyser.session.cache.tags.Tag;
 import org.geysermc.geyser.util.InteractionResult;
 import org.geysermc.geyser.util.InteractiveTag;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.type.BooleanEntityMetadata;
@@ -109,7 +111,7 @@ private void updateCollarColor() {
     }
 
     @Override
-    protected @Nullable ItemTag getFoodTag() {
+    protected @Nullable Tag<Item> getFoodTag() {
         return ItemTag.CAT_FOOD;
     }
 

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/tameable/ParrotEntity.java
Patch:
@@ -34,6 +34,7 @@
 import org.geysermc.geyser.item.type.Item;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.session.cache.tags.ItemTag;
+import org.geysermc.geyser.session.cache.tags.Tag;
 import org.geysermc.geyser.util.InteractionResult;
 import org.geysermc.geyser.util.InteractiveTag;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.player.Hand;
@@ -47,7 +48,7 @@ public ParrotEntity(GeyserSession session, int entityId, long geyserId, UUID uui
 
     @Override
     @Nullable
-    protected ItemTag getFoodTag() {
+    protected Tag<Item> getFoodTag() {
         return null;
     }
 

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/tameable/WolfEntity.java
Patch:
@@ -36,8 +36,10 @@
 import org.geysermc.geyser.item.Items;
 import org.geysermc.geyser.item.enchantment.EnchantmentComponent;
 import org.geysermc.geyser.item.type.DyeItem;
+import org.geysermc.geyser.item.type.Item;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.session.cache.tags.ItemTag;
+import org.geysermc.geyser.session.cache.tags.Tag;
 import org.geysermc.geyser.util.InteractionResult;
 import org.geysermc.geyser.util.InteractiveTag;
 import org.geysermc.geyser.util.ItemUtils;
@@ -116,7 +118,7 @@ public void setWolfVariant(ObjectEntityMetadata<Holder<WolfVariant>> entityMetad
 
     @Override
     @Nullable
-    protected ItemTag getFoodTag() {
+    protected Tag<Item> getFoodTag() {
         return ItemTag.WOLF_FOOD;
     }
 

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -679,7 +679,7 @@ public GeyserSession(GeyserImpl geyser, BedrockServerSession bedrockServerSessio
         this.registryCache = new RegistryCache(this);
         this.skullCache = new SkullCache(this);
         this.structureBlockCache = new StructureBlockCache();
-        this.tagCache = new TagCache();
+        this.tagCache = new TagCache(this);
         this.worldCache = new WorldCache(this);
         this.cameraData = new GeyserCameraData(this);
         this.entityData = new GeyserEntityData(this);

File: core/src/main/java/org/geysermc/geyser/GeyserImpl.java
Patch:
@@ -76,6 +76,7 @@
 import org.geysermc.geyser.event.GeyserEventBus;
 import org.geysermc.geyser.extension.GeyserExtensionManager;
 import org.geysermc.geyser.impl.MinecraftVersionImpl;
+import org.geysermc.geyser.level.BedrockDimension;
 import org.geysermc.geyser.level.WorldManager;
 import org.geysermc.geyser.network.GameProtocol;
 import org.geysermc.geyser.network.netty.GeyserServer;
@@ -95,7 +96,6 @@
 import org.geysermc.geyser.translator.text.MessageTranslator;
 import org.geysermc.geyser.util.AssetUtils;
 import org.geysermc.geyser.util.CooldownUtils;
-import org.geysermc.geyser.util.DimensionUtils;
 import org.geysermc.geyser.util.Metrics;
 import org.geysermc.geyser.util.MinecraftAuthLogger;
 import org.geysermc.geyser.util.NewsHandler;
@@ -425,7 +425,7 @@ private void startInstance() {
         }
 
         CooldownUtils.setDefaultShowCooldown(config.getShowCooldown());
-        DimensionUtils.changeBedrockNetherId(config.isAboveBedrockNetherBuilding()); // Apply End dimension ID workaround to Nether
+        BedrockDimension.changeBedrockNetherId(config.isAboveBedrockNetherBuilding()); // Apply End dimension ID workaround to Nether
 
         Integer bedrockThreadCount = Integer.getInteger("Geyser.BedrockNetworkThreads");
         if (bedrockThreadCount == null) {

File: core/src/main/java/org/geysermc/geyser/scoreboard/ScoreboardUpdater.java
Patch:
@@ -173,7 +173,6 @@ private void sleepFor(long millis) {
     @Getter
     public static final class ScoreboardSession {
         private final GeyserSession session;
-        @SuppressWarnings("WriteOnlyObject")
         private final AtomicInteger pendingPacketsPerSecond = new AtomicInteger(0);
         private int packetsPerSecond;
         private long lastUpdate;

File: core/src/main/java/org/geysermc/geyser/scoreboard/ScoreboardUpdater.java
Patch:
@@ -173,7 +173,6 @@ private void sleepFor(long millis) {
     @Getter
     public static final class ScoreboardSession {
         private final GeyserSession session;
-        @SuppressWarnings("WriteOnlyObject")
         private final AtomicInteger pendingPacketsPerSecond = new AtomicInteger(0);
         private int packetsPerSecond;
         private long lastUpdate;

File: core/src/main/java/org/geysermc/geyser/entity/attribute/GeyserAttributeType.java
Patch:
@@ -54,7 +54,7 @@ public enum GeyserAttributeType {
 
     // Bedrock Attributes
     ABSORPTION(null, "minecraft:absorption", 0f, 1024f, 0f),
-    EXHAUSTION(null, "minecraft:player.exhaustion", 0f, 5f, 0f),
+    EXHAUSTION(null, "minecraft:player.exhaustion", 0f, 20f, 0f),
     EXPERIENCE(null, "minecraft:player.experience", 0f, 1f, 0f),
     EXPERIENCE_LEVEL(null, "minecraft:player.level", 0f, 24791.00f, 0f),
     HEALTH(null, "minecraft:health", 0f, 1024f, 20f),

File: core/src/main/java/org/geysermc/geyser/registry/populator/ItemRegistryPopulator.java
Patch:
@@ -42,6 +42,7 @@
 import org.cloudburstmc.protocol.bedrock.codec.v671.Bedrock_v671;
 import org.cloudburstmc.protocol.bedrock.codec.v685.Bedrock_v685;
 import org.cloudburstmc.protocol.bedrock.codec.v712.Bedrock_v712;
+import org.cloudburstmc.protocol.bedrock.codec.v729.Bedrock_v729;
 import org.cloudburstmc.protocol.bedrock.data.definitions.BlockDefinition;
 import org.cloudburstmc.protocol.bedrock.data.definitions.ItemDefinition;
 import org.cloudburstmc.protocol.bedrock.data.definitions.SimpleItemDefinition;
@@ -92,7 +93,8 @@ public static void populate() {
         List<PaletteVersion> paletteVersions = new ArrayList<>(3);
         paletteVersions.add(new PaletteVersion("1_20_80", Bedrock_v671.CODEC.getProtocolVersion(), Collections.emptyMap(), Conversion685_671::remapItem));
         paletteVersions.add(new PaletteVersion("1_21_0", Bedrock_v685.CODEC.getProtocolVersion(), Collections.emptyMap(), Conversion712_685::remapItem));
-        paletteVersions.add(new PaletteVersion("1_21_20", Bedrock_v712.CODEC.getProtocolVersion()));
+        paletteVersions.add(new PaletteVersion("1_21_20", Bedrock_v712.CODEC.getProtocolVersion(), Collections.emptyMap(), Conversion729_712::remapItem));
+        paletteVersions.add(new PaletteVersion("1_21_30", Bedrock_v729.CODEC.getProtocolVersion()));
 
         GeyserBootstrap bootstrap = GeyserImpl.getInstance().getBootstrap();
 

File: core/src/main/java/org/geysermc/geyser/translator/inventory/InventoryTranslator.java
Patch:
@@ -981,11 +981,11 @@ protected final List<ItemStackResponseContainer> makeContainerEntries(GeyserSess
 
         List<ItemStackResponseContainer> containerEntries = new ArrayList<>();
         for (Map.Entry<ContainerSlotType, List<ItemStackResponseSlot>> entry : containerMap.entrySet()) {
-            containerEntries.add(new ItemStackResponseContainer(entry.getKey(), entry.getValue(), new FullContainerName(entry.getKey(), 0)));
+            containerEntries.add(new ItemStackResponseContainer(entry.getKey(), entry.getValue(), new FullContainerName(entry.getKey(), null)));
         }
 
         ItemStackResponseSlot cursorEntry = makeItemEntry(0, session.getPlayerInventory().getCursor());
-        containerEntries.add(new ItemStackResponseContainer(ContainerSlotType.CURSOR, Collections.singletonList(cursorEntry), new FullContainerName(ContainerSlotType.CURSOR, 0)));
+        containerEntries.add(new ItemStackResponseContainer(ContainerSlotType.CURSOR, Collections.singletonList(cursorEntry), new FullContainerName(ContainerSlotType.CURSOR, null)));
 
         return containerEntries;
     }

File: core/src/main/java/org/geysermc/geyser/translator/inventory/OldSmithingTableTranslator.java
Patch:
@@ -28,6 +28,7 @@
 import org.cloudburstmc.protocol.bedrock.data.inventory.ContainerId;
 import org.cloudburstmc.protocol.bedrock.data.inventory.ContainerSlotType;
 import org.cloudburstmc.protocol.bedrock.data.inventory.ContainerType;
+import org.cloudburstmc.protocol.bedrock.data.inventory.FullContainerName;
 import org.cloudburstmc.protocol.bedrock.data.inventory.ItemData;
 import org.cloudburstmc.protocol.bedrock.data.inventory.itemstack.request.ItemStackRequest;
 import org.cloudburstmc.protocol.bedrock.data.inventory.itemstack.request.ItemStackRequestSlotData;
@@ -139,6 +140,7 @@ public void openInventory(GeyserSession session, Inventory inventory) {
         slotPacket.setContainerId(ContainerId.UI);
         slotPacket.setSlot(53);
         slotPacket.setItem(UPGRADE_TEMPLATE.apply(session.getUpstream().getProtocolVersion()));
+        slotPacket.setContainerNameData(new FullContainerName(ContainerSlotType.ANVIL_INPUT, null));
         session.sendUpstreamPacket(slotPacket);
     }
 }

File: core/src/main/java/org/geysermc/geyser/translator/inventory/horse/ChestedHorseInventoryTranslator.java
Patch:
@@ -27,6 +27,7 @@
 
 import org.cloudburstmc.protocol.bedrock.data.inventory.ContainerId;
 import org.cloudburstmc.protocol.bedrock.data.inventory.ContainerSlotType;
+import org.cloudburstmc.protocol.bedrock.data.inventory.FullContainerName;
 import org.cloudburstmc.protocol.bedrock.data.inventory.ItemData;
 import org.cloudburstmc.protocol.bedrock.data.inventory.itemstack.request.ItemStackRequestSlotData;
 import org.cloudburstmc.protocol.bedrock.packet.InventoryContentPacket;
@@ -94,6 +95,7 @@ public void updateInventory(GeyserSession session, Inventory inventory) {
         InventoryContentPacket contentPacket = new InventoryContentPacket();
         contentPacket.setContainerId(ContainerId.INVENTORY);
         contentPacket.setContents(Arrays.asList(bedrockItems));
+        contentPacket.setContainerNameData(new FullContainerName(ContainerSlotType.ANVIL_INPUT, null));
         session.sendUpstreamPacket(contentPacket);
 
         ItemData[] horseItems = new ItemData[chestSize + 1];
@@ -107,6 +109,7 @@ public void updateInventory(GeyserSession session, Inventory inventory) {
         InventoryContentPacket horseContentsPacket = new InventoryContentPacket();
         horseContentsPacket.setContainerId(inventory.getBedrockId());
         horseContentsPacket.setContents(Arrays.asList(horseItems));
+        horseContentsPacket.setContainerNameData(new FullContainerName(ContainerSlotType.ANVIL_INPUT, null));
         session.sendUpstreamPacket(horseContentsPacket);
     }
 }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/JavaEntityEventTranslator.java
Patch:
@@ -30,6 +30,8 @@
 import org.cloudburstmc.protocol.bedrock.data.entity.EntityDataTypes;
 import org.cloudburstmc.protocol.bedrock.data.entity.EntityEventType;
 import org.cloudburstmc.protocol.bedrock.data.inventory.ContainerId;
+import org.cloudburstmc.protocol.bedrock.data.inventory.ContainerSlotType;
+import org.cloudburstmc.protocol.bedrock.data.inventory.FullContainerName;
 import org.cloudburstmc.protocol.bedrock.packet.EntityEventPacket;
 import org.cloudburstmc.protocol.bedrock.packet.InventoryContentPacket;
 import org.cloudburstmc.protocol.bedrock.packet.LevelEventPacket;
@@ -167,6 +169,7 @@ public void translate(GeyserSession session, ClientboundEntityEventPacket packet
                     InventoryContentPacket offhandPacket = new InventoryContentPacket();
                     offhandPacket.setContainerId(ContainerId.OFFHAND);
                     offhandPacket.setContents(Collections.singletonList(InventoryUtils.getTotemOfUndying().apply(session.getUpstream().getProtocolVersion())));
+                    offhandPacket.setContainerNameData(new FullContainerName(ContainerSlotType.ANVIL_INPUT, null));
                     session.sendUpstreamPacket(offhandPacket);
                 }
 

File: core/src/main/java/org/geysermc/geyser/util/InventoryUtils.java
Patch:
@@ -32,6 +32,8 @@
 import org.cloudburstmc.nbt.NbtType;
 import org.cloudburstmc.protocol.bedrock.data.definitions.ItemDefinition;
 import org.cloudburstmc.protocol.bedrock.data.inventory.ContainerId;
+import org.cloudburstmc.protocol.bedrock.data.inventory.ContainerSlotType;
+import org.cloudburstmc.protocol.bedrock.data.inventory.FullContainerName;
 import org.cloudburstmc.protocol.bedrock.data.inventory.ItemData;
 import org.cloudburstmc.protocol.bedrock.packet.InventorySlotPacket;
 import org.cloudburstmc.protocol.bedrock.packet.PlayerHotbarPacket;
@@ -180,6 +182,7 @@ public static void updateCursor(GeyserSession session) {
         cursorPacket.setContainerId(ContainerId.UI);
         cursorPacket.setSlot(0);
         cursorPacket.setItem(session.getPlayerInventory().getCursor().getItemData(session));
+        cursorPacket.setContainerNameData(new FullContainerName(ContainerSlotType.ANVIL_INPUT, null));
         session.sendUpstreamPacket(cursorPacket);
     }
 

File: bootstrap/mod/neoforge/src/main/java/org/geysermc/geyser/platform/neoforge/GeyserNeoForgeBootstrap.java
Patch:
@@ -82,6 +82,7 @@ public GeyserNeoForgeBootstrap(ModContainer container) {
         );
         GeyserNeoForgeCommandRegistry registry = new GeyserNeoForgeCommandRegistry(getGeyser(), cloud);
         this.setCommandRegistry(registry);
+        // An auxiliary listener for registering undefined permissions belonging to commands. See javadocs for more info.
         NeoForge.EVENT_BUS.addListener(EventPriority.LOWEST, registry::onPermissionGatherForUndefined);
     }
 

File: bootstrap/spigot/src/main/java/org/geysermc/geyser/platform/spigot/GeyserSpigotPlugin.java
Patch:
@@ -181,7 +181,7 @@ public void onEnable() {
             return;
         }
 
-        // Create command manager early so we can add Geyser extension commands
+        // Register commands after Geyser initialization, but before the server starts.
         var sourceConverter = new CommandSourceConverter<>(
                 CommandSender.class,
                 Bukkit::getPlayer,

File: core/src/main/java/org/geysermc/geyser/entity/type/player/SessionPlayerEntity.java
Patch:
@@ -140,7 +140,7 @@ public void setPosition(Vector3f position) {
         if (valid) { // Don't update during session init
             session.getCollisionManager().updatePlayerBoundingBox(position);
         }
-        super.setPosition(position);
+        this.position = position.add(0, definition.offset(), 0);
     }
 
     /**

File: core/src/main/java/org/geysermc/geyser/erosion/GeyserboundHandshakePacketHandler.java
Patch:
@@ -42,7 +42,6 @@ public GeyserboundHandshakePacketHandler(GeyserSession session) {
     public void handleHandshake(GeyserboundHandshakePacket packet) {
         boolean useTcp = packet.getTransportType().getSocketAddress() == null;
         GeyserboundPacketHandlerImpl handler = new GeyserboundPacketHandlerImpl(session, useTcp ? new GeyserErosionPacketSender(session) : new NettyPacketSender<>());
-        session.setErosionHandler(handler);
         if (!useTcp) {
             if (session.getGeyser().getErosionUnixListener() == null) {
                 session.disconnect("Erosion configurations using Unix socket handling are not supported on this hardware!");
@@ -52,6 +51,7 @@ public void handleHandshake(GeyserboundHandshakePacket packet) {
         } else {
             handler.onConnect();
         }
+        session.setErosionHandler(handler);
         session.ensureInEventLoop(() -> session.getChunkCache().clear());
     }
 

File: core/src/main/java/org/geysermc/geyser/level/JukeboxSong.java
Patch:
@@ -44,7 +44,7 @@ public static JukeboxSong read(RegistryEntryContext context) {
             soundEvent = "";
             GeyserImpl.getInstance().getLogger().debug("Sound event for " + context.id() + " was of an unexpected type! Expected string or NBT map, got " + soundEventObject);
         }
-        String description = MessageTranslator.deserializeDescription(data);
+        String description = MessageTranslator.deserializeDescription(context.session(), data);
         return new JukeboxSong(soundEvent, description);
     }
 }

File: core/src/main/java/org/geysermc/geyser/registry/PacketTranslatorRegistry.java
Patch:
@@ -31,6 +31,7 @@
 import org.geysermc.mcprotocollib.protocol.packet.ingame.clientbound.level.ClientboundLightUpdatePacket;
 import io.netty.channel.EventLoop;
 import org.geysermc.geyser.GeyserImpl;
+import org.geysermc.geyser.erosion.ErosionCancellationException;
 import org.geysermc.geyser.registry.loader.RegistryLoaders;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.text.GeyserLocale;
@@ -87,6 +88,8 @@ private <P extends T> void translate0(GeyserSession session, PacketTranslator<P>
 
         try {
             translator.translate(session, packet);
+        } catch (ErosionCancellationException ex) {
+            GeyserImpl.getInstance().getLogger().debug("Caught ErosionCancellationException");
         } catch (Throwable ex) {
             GeyserImpl.getInstance().getLogger().error(GeyserLocale.getLocaleStringLog("geyser.network.translator.packet.failed", packet.getClass().getSimpleName()), ex);
             ex.printStackTrace();

File: core/src/main/java/org/geysermc/geyser/session/cache/RegistryCache.java
Patch:
@@ -49,7 +49,7 @@
 import org.geysermc.geyser.session.cache.registry.JavaRegistry;
 import org.geysermc.geyser.session.cache.registry.RegistryEntryContext;
 import org.geysermc.geyser.session.cache.registry.SimpleJavaRegistry;
-import org.geysermc.geyser.text.TextDecoration;
+import org.geysermc.geyser.text.ChatDecoration;
 import org.geysermc.geyser.translator.level.BiomeTranslator;
 import org.geysermc.geyser.util.MinecraftKey;
 import org.geysermc.mcprotocollib.protocol.MinecraftProtocol;
@@ -78,7 +78,7 @@ public final class RegistryCache {
     private static final Map<Key, BiConsumer<RegistryCache, List<RegistryEntry>>> REGISTRIES = new HashMap<>();
 
     static {
-        register("chat_type", cache -> cache.chatTypes, TextDecoration::readChatType);
+        register("chat_type", cache -> cache.chatTypes, ChatDecoration::readChatType);
         register("dimension_type", cache -> cache.dimensions, JavaDimension::read);
         register("enchantment", cache -> cache.enchantments, Enchantment::read);
         register("jukebox_song", cache -> cache.jukeboxSongs, JukeboxSong::read);

File: core/src/main/java/org/geysermc/geyser/translator/inventory/PlayerInventoryTranslator.java
Patch:
@@ -123,7 +123,7 @@ public static void updateCraftingGrid(GeyserSession session, Inventory inventory
             if (session.getGameMode() == GameMode.CREATIVE) {
                 slotPacket.setItem(UNUSUABLE_CRAFTING_SPACE_BLOCK.apply(session.getUpstream().getProtocolVersion()));
             } else {
-                slotPacket.setItem(ItemTranslator.translateToBedrock(session, inventory.getItem(i).getItemStack()));
+                slotPacket.setItem(inventory.getItem(i).getItemData(session));
             }
 
             session.sendUpstreamPacket(slotPacket);

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaCooldownTranslator.java
Patch:
@@ -57,5 +57,7 @@ public void translate(GeyserSession session, ClientboundCooldownPacket packet) {
             bedrockPacket.setCooldownDuration(packet.getCooldownTicks());
             session.sendUpstreamPacket(bedrockPacket);
         }
+
+        session.getWorldCache().setCooldown(item, packet.getCooldownTicks());
     }
 }

File: core/src/main/java/org/geysermc/geyser/item/enchantment/Enchantment.java
Patch:
@@ -25,8 +25,6 @@
 
 package org.geysermc.geyser.item.enchantment;
 
-import java.util.List;
-import java.util.function.Function;
 import net.kyori.adventure.key.Key;
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.cloudburstmc.nbt.NbtMap;
@@ -35,11 +33,13 @@
 import org.geysermc.geyser.registry.Registries;
 import org.geysermc.geyser.session.cache.registry.RegistryEntryContext;
 import org.geysermc.geyser.translator.text.MessageTranslator;
+import org.geysermc.mcprotocollib.protocol.data.game.item.component.HolderSet;
 
 import java.util.HashSet;
+import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import org.geysermc.mcprotocollib.protocol.data.game.item.component.HolderSet;
+import java.util.function.Function;
 
 /**
  * @param description only populated if {@link #bedrockEnchantment()} is not null.

File: core/src/main/java/org/geysermc/geyser/item/enchantment/Enchantment.java
Patch:
@@ -69,7 +69,7 @@ public static Enchantment read(RegistryEntryContext context) {
 
         // TODO - description is a component. So if a hardcoded literal string is given, this will display normally on Java,
         //  but Geyser will attempt to lookup the literal string as translation - and will fail, displaying an empty string as enchantment name.
-        String description = bedrockEnchantment == null ? MessageTranslator.deserializeDescription(data) : null;
+        String description = bedrockEnchantment == null ? MessageTranslator.deserializeDescription(context.session(), data) : null;
 
         return new Enchantment(context.id().asString(), effects, supportedItems, maxLevel,
                 description, anvilCost, exclusiveSet, bedrockEnchantment);

File: core/src/main/java/org/geysermc/geyser/level/JukeboxSong.java
Patch:
@@ -44,7 +44,7 @@ public static JukeboxSong read(RegistryEntryContext context) {
             soundEvent = "";
             GeyserImpl.getInstance().getLogger().debug("Sound event for " + context.id() + " was of an unexpected type! Expected string or NBT map, got " + soundEventObject);
         }
-        String description = MessageTranslator.deserializeDescription(data);
+        String description = MessageTranslator.deserializeDescription(context.session(), data);
         return new JukeboxSong(soundEvent, description);
     }
 }

File: core/src/main/java/org/geysermc/geyser/session/cache/RegistryCache.java
Patch:
@@ -49,7 +49,7 @@
 import org.geysermc.geyser.session.cache.registry.JavaRegistry;
 import org.geysermc.geyser.session.cache.registry.RegistryEntryContext;
 import org.geysermc.geyser.session.cache.registry.SimpleJavaRegistry;
-import org.geysermc.geyser.text.TextDecoration;
+import org.geysermc.geyser.text.ChatDecoration;
 import org.geysermc.geyser.translator.level.BiomeTranslator;
 import org.geysermc.geyser.util.MinecraftKey;
 import org.geysermc.mcprotocollib.protocol.MinecraftProtocol;
@@ -78,7 +78,7 @@ public final class RegistryCache {
     private static final Map<Key, BiConsumer<RegistryCache, List<RegistryEntry>>> REGISTRIES = new HashMap<>();
 
     static {
-        register("chat_type", cache -> cache.chatTypes, TextDecoration::readChatType);
+        register("chat_type", cache -> cache.chatTypes, ChatDecoration::readChatType);
         register("dimension_type", cache -> cache.dimensions, JavaDimension::read);
         register("enchantment", cache -> cache.enchantments, Enchantment::read);
         register("jukebox_song", cache -> cache.jukeboxSongs, JukeboxSong::read);

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaLevelEventTranslator.java
Patch:
@@ -293,7 +293,7 @@ public void translate(GeyserSession session, ClientboundLevelEventPacket packet)
             }
             case PARTICLES_DRAGON_BLOCK_BREAK -> {
                 effectPacket.setType(org.cloudburstmc.protocol.bedrock.data.LevelEvent.PARTICLE_GENERIC_SPAWN);
-                effectPacket.setData(61);
+                effectPacket.setData(65);
             }
             case PARTICLES_WATER_EVAPORATING -> {
                 effectPacket.setType(org.cloudburstmc.protocol.bedrock.data.LevelEvent.PARTICLE_EVAPORATE_WATER);

File: core/src/main/java/org/geysermc/geyser/translator/inventory/PlayerInventoryTranslator.java
Patch:
@@ -123,7 +123,7 @@ public static void updateCraftingGrid(GeyserSession session, Inventory inventory
             if (session.getGameMode() == GameMode.CREATIVE) {
                 slotPacket.setItem(UNUSUABLE_CRAFTING_SPACE_BLOCK.apply(session.getUpstream().getProtocolVersion()));
             } else {
-                slotPacket.setItem(ItemTranslator.translateToBedrock(session, inventory.getItem(i).getItemStack()));
+                slotPacket.setItem(inventory.getItem(i).getItemData(session));
             }
 
             session.sendUpstreamPacket(slotPacket);

File: core/src/main/java/org/geysermc/geyser/network/GameProtocol.java
Patch:
@@ -50,7 +50,7 @@ public final class GameProtocol {
      * release of the game that Geyser supports.
      */
     public static final BedrockCodec DEFAULT_BEDROCK_CODEC = CodecProcessor.processCodec(Bedrock_v712.CODEC.toBuilder()
-        .minecraftVersion("1.21.20")
+        .minecraftVersion("1.21.20/1.21.21")
         .build());
 
     /**

File: core/src/main/java/org/geysermc/geyser/network/GameProtocol.java
Patch:
@@ -50,7 +50,7 @@ public final class GameProtocol {
      * release of the game that Geyser supports.
      */
     public static final BedrockCodec DEFAULT_BEDROCK_CODEC = CodecProcessor.processCodec(Bedrock_v712.CODEC.toBuilder()
-        .minecraftVersion("1.21.20")
+        .minecraftVersion("1.21.20/1.21.21")
         .build());
 
     /**

File: core/src/main/java/org/geysermc/geyser/entity/EntityDefinitions.java
Patch:
@@ -888,7 +888,7 @@ public final class EntityDefinitions {
                     .type(EntityType.PIG)
                     .heightAndWidth(0.9f)
                     .addTranslator(MetadataType.BOOLEAN, (pigEntity, entityMetadata) -> pigEntity.setFlag(EntityFlag.SADDLED, ((BooleanEntityMetadata) entityMetadata).getPrimitiveValue()))
-                    .addTranslator(null) // Boost time
+                    .addTranslator(MetadataType.INT, PigEntity::setBoost)
                     .build();
             POLAR_BEAR = EntityDefinition.inherited(PolarBearEntity::new, ageableEntityBase)
                     .type(EntityType.POLAR_BEAR)
@@ -914,7 +914,7 @@ public final class EntityDefinitions {
             STRIDER = EntityDefinition.inherited(StriderEntity::new, ageableEntityBase)
                     .type(EntityType.STRIDER)
                     .height(1.7f).width(0.9f)
-                    .addTranslator(null) // Boost time
+                    .addTranslator(MetadataType.INT, StriderEntity::setBoost)
                     .addTranslator(MetadataType.BOOLEAN, StriderEntity::setCold)
                     .addTranslator(MetadataType.BOOLEAN, StriderEntity::setSaddled)
                     .build();
@@ -955,7 +955,7 @@ public final class EntityDefinitions {
                     .type(EntityType.CAMEL)
                     .height(2.375f).width(1.7f)
                     .addTranslator(MetadataType.BOOLEAN, CamelEntity::setDashing)
-                    .addTranslator(null) // Last pose change tick
+                    .addTranslator(MetadataType.LONG, CamelEntity::setLastPoseTick)
                     .build();
             HORSE = EntityDefinition.inherited(HorseEntity::new, abstractHorseEntityBase)
                     .type(EntityType.HORSE)

File: core/src/main/java/org/geysermc/geyser/level/physics/Direction.java
Patch:
@@ -38,6 +38,7 @@ public enum Direction {
     EAST(4, Vector3i.UNIT_X, Axis.X, org.geysermc.mcprotocollib.protocol.data.game.entity.object.Direction.EAST);
 
     public static final Direction[] VALUES = values();
+    public static final Direction[] HORIZONTAL = new Direction[]{Direction.NORTH, Direction.EAST, Direction.SOUTH, Direction.WEST};
 
     private final int reversedId;
     @Getter

File: core/src/main/java/org/geysermc/geyser/network/UpstreamPacketHandler.java
Patch:
@@ -209,7 +209,7 @@ public PacketSignal handle(LoginPacket loginPacket) {
             ResourcePackManifest.Header header = pack.manifest().header();
             resourcePacksInfo.getResourcePackInfos().add(new ResourcePacksInfoPacket.Entry(
                     header.uuid().toString(), header.version().toString(), codec.size(), pack.contentKey(),
-                    "", header.uuid().toString(), false, false));
+                    "", header.uuid().toString(), false, false, false));
         }
         resourcePacksInfo.setForcedToAccept(GeyserImpl.getInstance().getConfig().isForceResourcePacks());
         session.sendUpstreamPacket(resourcePacksInfo);

File: core/src/main/java/org/geysermc/geyser/registry/populator/BlockRegistryPopulator.java
Patch:
@@ -38,6 +38,7 @@
 import org.cloudburstmc.nbt.*;
 import org.cloudburstmc.protocol.bedrock.codec.v671.Bedrock_v671;
 import org.cloudburstmc.protocol.bedrock.codec.v685.Bedrock_v685;
+import org.cloudburstmc.protocol.bedrock.codec.v712.Bedrock_v712;
 import org.cloudburstmc.protocol.bedrock.data.BlockPropertyData;
 import org.cloudburstmc.protocol.bedrock.data.definitions.BlockDefinition;
 import org.geysermc.geyser.GeyserImpl;
@@ -108,7 +109,8 @@ private static void nullifyBlocksNbt() {
     private static void registerBedrockBlocks() {
         var blockMappers = ImmutableMap.<ObjectIntPair<String>, Remapper>builder()
                 .put(ObjectIntPair.of("1_20_80", Bedrock_v671.CODEC.getProtocolVersion()), Conversion685_671::remapBlock)
-                .put(ObjectIntPair.of("1_21_0", Bedrock_v685.CODEC.getProtocolVersion()), tag -> tag)
+                .put(ObjectIntPair.of("1_21_0", Bedrock_v685.CODEC.getProtocolVersion()), Conversion712_685::remapBlock)
+                .put(ObjectIntPair.of("1_21_20", Bedrock_v712.CODEC.getProtocolVersion()), tag -> tag)
                 .build();
 
         // We can keep this strong as nothing should be garbage collected

File: core/src/main/java/org/geysermc/geyser/registry/populator/ItemRegistryPopulator.java
Patch:
@@ -41,6 +41,7 @@
 import org.cloudburstmc.nbt.NbtUtils;
 import org.cloudburstmc.protocol.bedrock.codec.v671.Bedrock_v671;
 import org.cloudburstmc.protocol.bedrock.codec.v685.Bedrock_v685;
+import org.cloudburstmc.protocol.bedrock.codec.v712.Bedrock_v712;
 import org.cloudburstmc.protocol.bedrock.data.definitions.BlockDefinition;
 import org.cloudburstmc.protocol.bedrock.data.definitions.ItemDefinition;
 import org.cloudburstmc.protocol.bedrock.data.definitions.SimpleItemDefinition;
@@ -90,7 +91,8 @@ interface Remapper {
     public static void populate() {
         List<PaletteVersion> paletteVersions = new ArrayList<>(3);
         paletteVersions.add(new PaletteVersion("1_20_80", Bedrock_v671.CODEC.getProtocolVersion(), Collections.emptyMap(), Conversion685_671::remapItem));
-        paletteVersions.add(new PaletteVersion("1_21_0", Bedrock_v685.CODEC.getProtocolVersion()));
+        paletteVersions.add(new PaletteVersion("1_21_0", Bedrock_v685.CODEC.getProtocolVersion(), Collections.emptyMap(), Conversion712_685::remapItem));
+        paletteVersions.add(new PaletteVersion("1_21_20", Bedrock_v712.CODEC.getProtocolVersion()));
 
         GeyserBootstrap bootstrap = GeyserImpl.getInstance().getBootstrap();
 

File: core/src/main/java/org/geysermc/geyser/text/GeyserLocale.java
Patch:
@@ -150,7 +150,7 @@ public static void loadGeyserLocale(String locale) {
         } else {
             if (!validLocalLanguage) {
                 // Don't warn on missing locales if a local file has been found
-                bootstrap.getGeyserLogger().warning("Missing locale: " + locale);
+                bootstrap.getGeyserLogger().debug("Missing locale: " + locale);
             }
         }
 

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/BedrockPlayerInputTranslator.java
Patch:
@@ -52,6 +52,8 @@ public void translate(GeyserSession session, PlayerInputPacket packet) {
 
         session.sendDownstreamGamePacket(playerInputPacket);
 
+        session.getPlayerEntity().setVehicleInput(packet.getInputMotion());
+
         // Bedrock only sends movement vehicle packets while moving
         // This allows horses to take damage while standing on magma
         Entity vehicle = session.getPlayerEntity().getVehicle();

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/BedrockRiderJumpTranslator.java
Patch:
@@ -38,6 +38,8 @@
 public class BedrockRiderJumpTranslator extends PacketTranslator<RiderJumpPacket> {
     @Override
     public void translate(GeyserSession session, RiderJumpPacket packet) {
+        session.getPlayerEntity().setVehicleJumpStrength(packet.getJumpStrength());
+
         Entity vehicle = session.getPlayerEntity().getVehicle();
         if (vehicle instanceof AbstractHorseEntity) {
             ServerboundPlayerCommandPacket playerCommandPacket = new ServerboundPlayerCommandPacket(vehicle.getEntityId(), PlayerState.START_HORSE_JUMP, packet.getJumpStrength());

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaRespawnTranslator.java
Patch:
@@ -101,6 +101,7 @@ public void translate(GeyserSession session, ClientboundRespawnPacket packet) {
                 DimensionUtils.fastSwitchDimension(session, fakeDim);
             }
             session.setWorldName(spawnInfo.getWorldName());
+            session.setWorldTicks(0);
             DimensionUtils.switchDimension(session, newDimension);
 
             ChunkUtils.loadDimension(session);

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaSetTimeTranslator.java
Patch:
@@ -36,6 +36,8 @@ public class JavaSetTimeTranslator extends PacketTranslator<ClientboundSetTimePa
 
     @Override
     public void translate(GeyserSession session, ClientboundSetTimePacket packet) {
+        session.setWorldTicks(packet.getWorldAge());
+
         // Bedrock sends a GameRulesChangedPacket if there is no daylight cycle
         // Java just sends a negative long if there is no daylight cycle
         long time = packet.getTime();

File: core/src/main/java/org/geysermc/geyser/entity/EntityDefinitions.java
Patch:
@@ -888,7 +888,7 @@ public final class EntityDefinitions {
                     .type(EntityType.PIG)
                     .heightAndWidth(0.9f)
                     .addTranslator(MetadataType.BOOLEAN, (pigEntity, entityMetadata) -> pigEntity.setFlag(EntityFlag.SADDLED, ((BooleanEntityMetadata) entityMetadata).getPrimitiveValue()))
-                    .addTranslator(null) // Boost time
+                    .addTranslator(MetadataType.INT, PigEntity::setBoost)
                     .build();
             POLAR_BEAR = EntityDefinition.inherited(PolarBearEntity::new, ageableEntityBase)
                     .type(EntityType.POLAR_BEAR)
@@ -914,7 +914,7 @@ public final class EntityDefinitions {
             STRIDER = EntityDefinition.inherited(StriderEntity::new, ageableEntityBase)
                     .type(EntityType.STRIDER)
                     .height(1.7f).width(0.9f)
-                    .addTranslator(null) // Boost time
+                    .addTranslator(MetadataType.INT, StriderEntity::setBoost)
                     .addTranslator(MetadataType.BOOLEAN, StriderEntity::setCold)
                     .addTranslator(MetadataType.BOOLEAN, StriderEntity::setSaddled)
                     .build();
@@ -955,7 +955,7 @@ public final class EntityDefinitions {
                     .type(EntityType.CAMEL)
                     .height(2.375f).width(1.7f)
                     .addTranslator(MetadataType.BOOLEAN, CamelEntity::setDashing)
-                    .addTranslator(null) // Last pose change tick
+                    .addTranslator(MetadataType.LONG, CamelEntity::setLastPoseTick)
                     .build();
             HORSE = EntityDefinition.inherited(HorseEntity::new, abstractHorseEntityBase)
                     .type(EntityType.HORSE)

File: core/src/main/java/org/geysermc/geyser/level/physics/Direction.java
Patch:
@@ -38,6 +38,7 @@ public enum Direction {
     EAST(4, Vector3i.UNIT_X, Axis.X, org.geysermc.mcprotocollib.protocol.data.game.entity.object.Direction.EAST);
 
     public static final Direction[] VALUES = values();
+    public static final Direction[] HORIZONTAL = new Direction[]{Direction.NORTH, Direction.EAST, Direction.SOUTH, Direction.WEST};
 
     private final int reversedId;
     @Getter

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/BedrockPlayerInputTranslator.java
Patch:
@@ -52,6 +52,8 @@ public void translate(GeyserSession session, PlayerInputPacket packet) {
 
         session.sendDownstreamGamePacket(playerInputPacket);
 
+        session.getPlayerEntity().setVehicleInput(packet.getInputMotion());
+
         // Bedrock only sends movement vehicle packets while moving
         // This allows horses to take damage while standing on magma
         Entity vehicle = session.getPlayerEntity().getVehicle();

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/BedrockRiderJumpTranslator.java
Patch:
@@ -38,6 +38,8 @@
 public class BedrockRiderJumpTranslator extends PacketTranslator<RiderJumpPacket> {
     @Override
     public void translate(GeyserSession session, RiderJumpPacket packet) {
+        session.getPlayerEntity().setVehicleJumpStrength(packet.getJumpStrength());
+
         Entity vehicle = session.getPlayerEntity().getVehicle();
         if (vehicle instanceof AbstractHorseEntity) {
             ServerboundPlayerCommandPacket playerCommandPacket = new ServerboundPlayerCommandPacket(vehicle.getEntityId(), PlayerState.START_HORSE_JUMP, packet.getJumpStrength());

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaRespawnTranslator.java
Patch:
@@ -101,6 +101,7 @@ public void translate(GeyserSession session, ClientboundRespawnPacket packet) {
                 DimensionUtils.fastSwitchDimension(session, fakeDim);
             }
             session.setWorldName(spawnInfo.getWorldName());
+            session.setWorldTicks(0);
             DimensionUtils.switchDimension(session, newDimension);
 
             ChunkUtils.loadDimension(session);

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaSetTimeTranslator.java
Patch:
@@ -36,6 +36,8 @@ public class JavaSetTimeTranslator extends PacketTranslator<ClientboundSetTimePa
 
     @Override
     public void translate(GeyserSession session, ClientboundSetTimePacket packet) {
+        session.setWorldTicks(packet.getWorldAge());
+
         // Bedrock sends a GameRulesChangedPacket if there is no daylight cycle
         // Java just sends a negative long if there is no daylight cycle
         long time = packet.getTime();

File: bootstrap/viaproxy/src/main/java/org/geysermc/geyser/platform/viaproxy/GeyserViaProxyPlugin.java
Patch:
@@ -155,6 +155,9 @@ public void onGeyserEnable() {
             // Only initialize the ping passthrough if the protocol version is above beta 1.7.3, as that's when the status protocol was added
             this.pingPassthrough = GeyserLegacyPingPassthrough.init(this.geyser);
         }
+        if (this.config.getRemote().authType() == AuthType.FLOODGATE) {
+            ViaProxy.getConfig().setPassthroughBungeecordPlayerInfo(true);
+        }
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/text/GeyserLocale.java
Patch:
@@ -150,7 +150,7 @@ public static void loadGeyserLocale(String locale) {
         } else {
             if (!validLocalLanguage) {
                 // Don't warn on missing locales if a local file has been found
-                bootstrap.getGeyserLogger().warning("Missing locale: " + locale);
+                bootstrap.getGeyserLogger().debug("Missing locale: " + locale);
             }
         }
 

File: api/src/main/java/org/geysermc/geyser/api/event/lifecycle/GeyserDefineCommandsEvent.java
Patch:
@@ -50,7 +50,7 @@ public interface GeyserDefineCommandsEvent extends Event {
     /**
      * Gets all the registered built-in {@link Command}s.
      *
-     * @return all the registered built-in commands
+     * @return all the registered built-in commands as an unmodifiable map
      */
     @NonNull
     Map<String, Command> commands();

File: bootstrap/bungeecord/src/main/java/org/geysermc/geyser/platform/bungeecord/GeyserBungeeUpdateListener.java
Patch:
@@ -29,8 +29,8 @@
 import net.md_5.bungee.api.event.PostLoginEvent;
 import net.md_5.bungee.api.plugin.Listener;
 import net.md_5.bungee.event.EventHandler;
-import org.geysermc.geyser.Constants;
 import org.geysermc.geyser.GeyserImpl;
+import org.geysermc.geyser.Permissions;
 import org.geysermc.geyser.platform.bungeecord.command.BungeeCommandSource;
 import org.geysermc.geyser.util.VersionCheckUtils;
 
@@ -40,7 +40,7 @@ public final class GeyserBungeeUpdateListener implements Listener {
     public void onPlayerJoin(final PostLoginEvent event) {
         if (GeyserImpl.getInstance().getConfig().isNotifyOnNewBedrockUpdate()) {
             final ProxiedPlayer player = event.getPlayer();
-            if (player.hasPermission(Constants.UPDATE_PERMISSION)) {
+            if (player.hasPermission(Permissions.CHECK_UPDATE)) {
                 VersionCheckUtils.checkForGeyserUpdate(() -> new BungeeCommandSource(player));
             }
         }

File: bootstrap/spigot/src/main/java/org/geysermc/geyser/platform/spigot/GeyserSpigotUpdateListener.java
Patch:
@@ -29,8 +29,8 @@
 import org.bukkit.event.EventHandler;
 import org.bukkit.event.Listener;
 import org.bukkit.event.player.PlayerJoinEvent;
-import org.geysermc.geyser.Constants;
 import org.geysermc.geyser.GeyserImpl;
+import org.geysermc.geyser.Permissions;
 import org.geysermc.geyser.platform.spigot.command.SpigotCommandSource;
 import org.geysermc.geyser.util.VersionCheckUtils;
 
@@ -40,7 +40,7 @@ public final class GeyserSpigotUpdateListener implements Listener {
     public void onPlayerJoin(final PlayerJoinEvent event) {
         if (GeyserImpl.getInstance().getConfig().isNotifyOnNewBedrockUpdate()) {
             final Player player = event.getPlayer();
-            if (player.hasPermission(Constants.UPDATE_PERMISSION)) {
+            if (player.hasPermission(Permissions.CHECK_UPDATE)) {
                 VersionCheckUtils.checkForGeyserUpdate(() -> new SpigotCommandSource(player));
             }
         }

File: bootstrap/standalone/src/main/java/org/geysermc/geyser/platform/standalone/GeyserStandaloneLogger.java
Patch:
@@ -44,7 +44,9 @@ protected boolean isRunning() {
 
     @Override
     protected void runCommand(String line) {
-        GeyserImpl.getInstance().commandManager().runCommand(this, line);
+        // don't block the terminal!
+        GeyserImpl geyser = GeyserImpl.getInstance();
+        geyser.getScheduledThread().execute(() -> geyser.commandRegistry().runCommand(this, line));
     }
 
     @Override

File: bootstrap/velocity/src/main/java/org/geysermc/geyser/platform/velocity/GeyserVelocityUpdateListener.java
Patch:
@@ -28,8 +28,8 @@
 import com.velocitypowered.api.event.Subscribe;
 import com.velocitypowered.api.event.connection.PostLoginEvent;
 import com.velocitypowered.api.proxy.Player;
-import org.geysermc.geyser.Constants;
 import org.geysermc.geyser.GeyserImpl;
+import org.geysermc.geyser.Permissions;
 import org.geysermc.geyser.platform.velocity.command.VelocityCommandSource;
 import org.geysermc.geyser.util.VersionCheckUtils;
 
@@ -39,7 +39,7 @@ public final class GeyserVelocityUpdateListener {
     public void onPlayerJoin(PostLoginEvent event) {
         if (GeyserImpl.getInstance().getConfig().isNotifyOnNewBedrockUpdate()) {
             final Player player = event.getPlayer();
-            if (player.hasPermission(Constants.UPDATE_PERMISSION)) {
+            if (player.hasPermission(Permissions.CHECK_UPDATE)) {
                 VersionCheckUtils.checkForGeyserUpdate(() -> new VelocityCommandSource(player));
             }
         }

File: core/src/main/java/org/geysermc/geyser/Constants.java
Patch:
@@ -35,9 +35,7 @@ public final class Constants {
     public static final String NEWS_PROJECT_NAME = "geyser";
 
     public static final String FLOODGATE_DOWNLOAD_LOCATION = "https://geysermc.org/download#floodgate";
-
     public static final String GEYSER_DOWNLOAD_LOCATION = "https://geysermc.org/download";
-    public static final String UPDATE_PERMISSION = "geyser.update";
 
     @Deprecated
     static final String SAVED_REFRESH_TOKEN_FILE = "saved-refresh-tokens.json";

File: core/src/main/java/org/geysermc/geyser/entity/type/player/SessionPlayerEntity.java
Patch:
@@ -321,7 +321,7 @@ private boolean isBelowVoidFloor() {
 
     public int voidFloorPosition() {
         // The void floor is offset about 40 blocks below the bottom of the world
-        BedrockDimension bedrockDimension = session.getChunkCache().getBedrockDimension();
+        BedrockDimension bedrockDimension = session.getBedrockDimension();
         return bedrockDimension.minY() - 40;
     }
 

File: core/src/main/java/org/geysermc/geyser/event/type/GeyserDefineCommandsEventImpl.java
Patch:
@@ -35,12 +35,12 @@
 public abstract class GeyserDefineCommandsEventImpl implements GeyserDefineCommandsEvent {
     private final Map<String, Command> commands;
 
-    public GeyserDefineCommandsEventImpl(Map<String, Command> commands) {
-        this.commands = commands;
+    public GeyserDefineCommandsEventImpl(Map<String, ? extends Command> commands) {
+        this.commands = Collections.unmodifiableMap(commands);
     }
 
     @Override
     public @NonNull Map<String, Command> commands() {
-        return Collections.unmodifiableMap(this.commands);
+        return this.commands;
     }
 }

File: core/src/main/java/org/geysermc/geyser/registry/loader/ProviderRegistryLoader.java
Patch:
@@ -42,8 +42,8 @@
 import org.geysermc.geyser.api.pack.PathPackCodec;
 import org.geysermc.geyser.impl.camera.GeyserCameraFade;
 import org.geysermc.geyser.impl.camera.GeyserCameraPosition;
-import org.geysermc.geyser.command.GeyserCommandManager;
 import org.geysermc.geyser.event.GeyserEventRegistrar;
+import org.geysermc.geyser.extension.command.GeyserExtensionCommand;
 import org.geysermc.geyser.item.GeyserCustomItemData;
 import org.geysermc.geyser.item.GeyserCustomItemOptions;
 import org.geysermc.geyser.item.GeyserNonVanillaCustomItemData;
@@ -67,7 +67,7 @@ public class ProviderRegistryLoader implements RegistryLoader<Map<Class<?>, Prov
     @Override
     public Map<Class<?>, ProviderSupplier> load(Map<Class<?>, ProviderSupplier> providers) {
         // misc
-        providers.put(Command.Builder.class, args -> new GeyserCommandManager.CommandBuilder<>((Extension) args[0]));
+        providers.put(Command.Builder.class, args -> new GeyserExtensionCommand.Builder<>((Extension) args[0]));
 
         providers.put(CustomBlockComponents.Builder.class, args -> new GeyserCustomBlockComponents.Builder());
         providers.put(CustomBlockData.Builder.class, args -> new GeyserCustomBlockData.Builder());

File: core/src/main/java/org/geysermc/geyser/registry/populator/BlockRegistryPopulator.java
Patch:
@@ -129,7 +129,7 @@ private static void registerBedrockBlocks() {
                     NbtMapBuilder builder = vanillaBlockStates.get(i).toBuilder();
                     builder.remove("version"); // Remove all nbt tags which are not needed for differentiating states
                     builder.remove("name_hash"); // Quick workaround - was added in 1.19.20
-                    builder.remove("network_id"); // Added in 1.19.80 - ????
+                    builder.remove("network_id"); // Added in 1.19.80
                     builder.remove("block_id"); // Added in 1.20.60
                     //noinspection UnstableApiUsage
                     builder.putCompound("states", statesInterner.intern((NbtMap) builder.remove("states")));

File: core/src/main/java/org/geysermc/geyser/translator/level/block/entity/PistonBlockEntity.java
Patch:
@@ -37,7 +37,6 @@
 import org.cloudburstmc.nbt.NbtMap;
 import org.cloudburstmc.nbt.NbtMapBuilder;
 import org.cloudburstmc.protocol.bedrock.packet.UpdateBlockPacket;
-import org.geysermc.geyser.api.util.PlatformType;
 import org.geysermc.geyser.level.block.BlockStateValues;
 import org.geysermc.geyser.level.block.Blocks;
 import org.geysermc.geyser.level.block.property.Properties;
@@ -230,8 +229,8 @@ private void removePistonHead() {
         BlockState state = session.getGeyser().getWorldManager().blockAt(session, blockInFront);
         if (state.is(Blocks.PISTON_HEAD)) {
             ChunkUtils.updateBlock(session, Block.JAVA_AIR_ID, blockInFront);
-        } else if ((session.getGeyser().getPlatformType() == PlatformType.SPIGOT || session.getErosionHandler().isActive()) && state.is(Blocks.AIR)) {
-            // Spigot removes the piston head from the cache, but we need to send the block update ourselves
+        } else if ((session.getGeyser().getWorldManager().hasOwnChunkCache() || session.getErosionHandler().isActive()) && state.is(Blocks.AIR)) {
+            // The platform removes the piston head from the cache, but we need to send the block update ourselves
             ChunkUtils.updateBlock(session, Block.JAVA_AIR_ID, blockInFront);
         }
     }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/BedrockSetDefaultGameTypeTranslator.java
Patch:
@@ -27,6 +27,7 @@
 
 import org.cloudburstmc.protocol.bedrock.packet.SetDefaultGameTypePacket;
 import org.cloudburstmc.protocol.bedrock.packet.SetPlayerGameTypePacket;
+import org.geysermc.geyser.Permissions;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.translator.protocol.PacketTranslator;
 import org.geysermc.geyser.translator.protocol.Translator;
@@ -41,7 +42,7 @@ public class BedrockSetDefaultGameTypeTranslator extends PacketTranslator<SetDef
      */
     @Override
     public void translate(GeyserSession session, SetDefaultGameTypePacket packet) {
-        if (session.getOpPermissionLevel() >= 2 && session.hasPermission("geyser.settings.server")) {
+        if (session.getOpPermissionLevel() >= 2 && session.hasPermission(Permissions.SERVER_SETTINGS)) {
             session.getGeyser().getWorldManager().setDefaultGameMode(session, GameMode.byId(packet.getGamemode()));
         }
         // Stop the client from updating their own Gamemode without telling the server

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/BedrockSetDifficultyTranslator.java
Patch:
@@ -25,6 +25,7 @@
 
 package org.geysermc.geyser.translator.protocol.bedrock.entity.player;
 
+import org.geysermc.geyser.Permissions;
 import org.geysermc.mcprotocollib.protocol.data.game.setting.Difficulty;
 import org.cloudburstmc.protocol.bedrock.packet.SetDifficultyPacket;
 import org.geysermc.geyser.session.GeyserSession;
@@ -39,7 +40,7 @@ public class BedrockSetDifficultyTranslator extends PacketTranslator<SetDifficul
      */
     @Override
     public void translate(GeyserSession session, SetDifficultyPacket packet) {
-        if (session.getOpPermissionLevel() >= 2 && session.hasPermission("geyser.settings.server")) {
+        if (session.getOpPermissionLevel() >= 2 && session.hasPermission(Permissions.SERVER_SETTINGS)) {
             if (packet.getDifficulty() != session.getWorldCache().getDifficulty().ordinal()) {
                 session.getGeyser().getWorldManager().setDifficulty(session, Difficulty.from(packet.getDifficulty()));
             }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/BedrockSetPlayerGameTypeTranslator.java
Patch:
@@ -26,6 +26,7 @@
 package org.geysermc.geyser.translator.protocol.bedrock.entity.player;
 
 import org.cloudburstmc.protocol.bedrock.packet.SetPlayerGameTypePacket;
+import org.geysermc.geyser.Permissions;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.translator.protocol.PacketTranslator;
 import org.geysermc.geyser.translator.protocol.Translator;
@@ -45,7 +46,7 @@ public class BedrockSetPlayerGameTypeTranslator extends PacketTranslator<SetPlay
     @Override
     public void translate(GeyserSession session, SetPlayerGameTypePacket packet) {
         // yes, if you are OP
-        if (session.getOpPermissionLevel() >= 2 && session.hasPermission("geyser.settings.server")) {
+        if (session.getOpPermissionLevel() >= 2 && session.hasPermission(Permissions.SERVER_SETTINGS)) {
             if (packet.getGamemode() != session.getGameMode().ordinal()) {
                 // Bedrock has more Gamemodes than Java, leading to cases 5 (for "default") and 6 (for "spectator") being sent
                 // https://github.com/CloudburstMC/Protocol/blob/3.0/bedrock-codec/src/main/java/org/cloudburstmc/protocol/bedrock/data/GameType.java

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaLevelChunkWithLightTranslator.java
Patch:
@@ -99,7 +99,7 @@ public void translate(GeyserSession session, ClientboundLevelChunkWithLightPacke
         BitSet waterloggedPaletteIds = new BitSet();
         BitSet bedrockOnlyBlockEntityIds = new BitSet();
 
-        BedrockDimension bedrockDimension = session.getChunkCache().getBedrockDimension();
+        BedrockDimension bedrockDimension = session.getBedrockDimension();
         int maxBedrockSectionY = (bedrockDimension.height() >> 4) - 1;
 
         int sectionCount;
@@ -509,7 +509,7 @@ public void translate(GeyserSession session, ClientboundLevelChunkWithLightPacke
         levelChunkPacket.setChunkX(packet.getX());
         levelChunkPacket.setChunkZ(packet.getZ());
         levelChunkPacket.setData(Unpooled.wrappedBuffer(payload));
-        levelChunkPacket.setDimension(DimensionUtils.javaToBedrock(session.getChunkCache().getBedrockDimension()));
+        levelChunkPacket.setDimension(DimensionUtils.javaToBedrock(session.getBedrockDimension()));
         session.sendUpstreamPacket(levelChunkPacket);
 
         for (Map.Entry<Vector3i, ItemFrameEntity> entry : session.getItemFrameCache().entrySet()) {

File: core/src/main/java/org/geysermc/geyser/util/ChunkUtils.java
Patch:
@@ -149,7 +149,7 @@ public static void updateBlockClientSide(GeyserSession session, BlockState block
     }
 
     public static void sendEmptyChunk(GeyserSession session, int chunkX, int chunkZ, boolean forceUpdate) {
-        BedrockDimension bedrockDimension = session.getChunkCache().getBedrockDimension();
+        BedrockDimension bedrockDimension = session.getBedrockDimension();
         int bedrockSubChunkCount = bedrockDimension.height() >> 4;
 
         byte[] payload;
@@ -167,7 +167,7 @@ public static void sendEmptyChunk(GeyserSession session, int chunkX, int chunkZ,
             byteBuf.readBytes(payload);
 
             LevelChunkPacket data = new LevelChunkPacket();
-            data.setDimension(DimensionUtils.javaToBedrock(session.getChunkCache().getBedrockDimension()));
+            data.setDimension(DimensionUtils.javaToBedrock(session.getBedrockDimension()));
             data.setChunkX(chunkX);
             data.setChunkZ(chunkZ);
             data.setSubChunksLength(0);
@@ -214,7 +214,7 @@ public static void loadDimension(GeyserSession session) {
             throw new RuntimeException("Maximum Y must be a multiple of 16!");
         }
 
-        BedrockDimension bedrockDimension = session.getChunkCache().getBedrockDimension();
+        BedrockDimension bedrockDimension = session.getBedrockDimension();
         // Yell in the console if the world height is too height in the current scenario
         // The constraints change depending on if the player is in the overworld or not, and if experimental height is enabled
         // (Ignore this for the Nether. We can't change that at the moment without the workaround. :/ )

File: core/src/main/java/org/geysermc/geyser/util/DimensionUtils.java
Patch:
@@ -179,7 +179,7 @@ private static void finalizeDimensionSwitch(GeyserSession session, Entity player
     }
 
     public static void setBedrockDimension(GeyserSession session, int bedrockDimension) {
-        session.getChunkCache().setBedrockDimension(switch (bedrockDimension) {
+        session.setBedrockDimension(switch (bedrockDimension) {
             case BEDROCK_END_ID -> BedrockDimension.THE_END;
             case BEDROCK_DEFAULT_NETHER_ID -> BedrockDimension.THE_NETHER; // JavaDimension *should* be set to BEDROCK_END_ID if the Nether workaround is enabled.
             default -> BedrockDimension.OVERWORLD;

File: core/src/main/java/org/geysermc/geyser/util/InventoryUtils.java
Patch:
@@ -159,7 +159,7 @@ public static void closeInventory(GeyserSession session, int javaId, boolean con
     @Nullable
     public static Vector3i findAvailableWorldSpace(GeyserSession session) {
         // Check if a fake block can be placed, either above the player or beneath.
-        BedrockDimension dimension = session.getChunkCache().getBedrockDimension();
+        BedrockDimension dimension = session.getBedrockDimension();
         int minY = dimension.minY(), maxY = minY + dimension.height();
         Vector3i flatPlayerPosition = session.getPlayerEntity().getPosition().toInt();
         Vector3i position = flatPlayerPosition.add(Vector3i.UP);

File: core/src/main/java/org/geysermc/geyser/util/SettingsUtils.java
Patch:
@@ -29,6 +29,7 @@
 import org.geysermc.cumulus.component.DropdownComponent;
 import org.geysermc.cumulus.form.CustomForm;
 import org.geysermc.geyser.GeyserImpl;
+import org.geysermc.geyser.Permissions;
 import org.geysermc.geyser.level.GameRule;
 import org.geysermc.geyser.level.WorldManager;
 import org.geysermc.geyser.session.GeyserSession;
@@ -81,7 +82,7 @@ public static CustomForm buildForm(GeyserSession session) {
             }
         }
 
-        boolean showGamerules = session.getOpPermissionLevel() >= 2 || session.hasPermission("geyser.settings.gamerules");
+        boolean showGamerules = session.getOpPermissionLevel() >= 2 || session.hasPermission(Permissions.SETTINGS_GAMERULES);
         if (showGamerules) {
             builder.label("geyser.settings.title.game_rules")
                     .translator(MinecraftLocale::getLocaleString); // we need translate gamerules next

File: core/src/main/java/org/geysermc/geyser/entity/type/player/SessionPlayerEntity.java
Patch:
@@ -321,7 +321,7 @@ private boolean isBelowVoidFloor() {
 
     public int voidFloorPosition() {
         // The void floor is offset about 40 blocks below the bottom of the world
-        BedrockDimension bedrockDimension = session.getChunkCache().getBedrockDimension();
+        BedrockDimension bedrockDimension = session.getBedrockDimension();
         return bedrockDimension.minY() - 40;
     }
 

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaLevelChunkWithLightTranslator.java
Patch:
@@ -99,7 +99,7 @@ public void translate(GeyserSession session, ClientboundLevelChunkWithLightPacke
         BitSet waterloggedPaletteIds = new BitSet();
         BitSet bedrockOnlyBlockEntityIds = new BitSet();
 
-        BedrockDimension bedrockDimension = session.getChunkCache().getBedrockDimension();
+        BedrockDimension bedrockDimension = session.getBedrockDimension();
         int maxBedrockSectionY = (bedrockDimension.height() >> 4) - 1;
 
         int sectionCount;
@@ -509,7 +509,7 @@ public void translate(GeyserSession session, ClientboundLevelChunkWithLightPacke
         levelChunkPacket.setChunkX(packet.getX());
         levelChunkPacket.setChunkZ(packet.getZ());
         levelChunkPacket.setData(Unpooled.wrappedBuffer(payload));
-        levelChunkPacket.setDimension(DimensionUtils.javaToBedrock(session.getChunkCache().getBedrockDimension()));
+        levelChunkPacket.setDimension(DimensionUtils.javaToBedrock(session.getBedrockDimension()));
         session.sendUpstreamPacket(levelChunkPacket);
 
         for (Map.Entry<Vector3i, ItemFrameEntity> entry : session.getItemFrameCache().entrySet()) {

File: core/src/main/java/org/geysermc/geyser/util/ChunkUtils.java
Patch:
@@ -149,7 +149,7 @@ public static void updateBlockClientSide(GeyserSession session, BlockState block
     }
 
     public static void sendEmptyChunk(GeyserSession session, int chunkX, int chunkZ, boolean forceUpdate) {
-        BedrockDimension bedrockDimension = session.getChunkCache().getBedrockDimension();
+        BedrockDimension bedrockDimension = session.getBedrockDimension();
         int bedrockSubChunkCount = bedrockDimension.height() >> 4;
 
         byte[] payload;
@@ -167,7 +167,7 @@ public static void sendEmptyChunk(GeyserSession session, int chunkX, int chunkZ,
             byteBuf.readBytes(payload);
 
             LevelChunkPacket data = new LevelChunkPacket();
-            data.setDimension(DimensionUtils.javaToBedrock(session.getChunkCache().getBedrockDimension()));
+            data.setDimension(DimensionUtils.javaToBedrock(session.getBedrockDimension()));
             data.setChunkX(chunkX);
             data.setChunkZ(chunkZ);
             data.setSubChunksLength(0);
@@ -214,7 +214,7 @@ public static void loadDimension(GeyserSession session) {
             throw new RuntimeException("Maximum Y must be a multiple of 16!");
         }
 
-        BedrockDimension bedrockDimension = session.getChunkCache().getBedrockDimension();
+        BedrockDimension bedrockDimension = session.getBedrockDimension();
         // Yell in the console if the world height is too height in the current scenario
         // The constraints change depending on if the player is in the overworld or not, and if experimental height is enabled
         // (Ignore this for the Nether. We can't change that at the moment without the workaround. :/ )

File: core/src/main/java/org/geysermc/geyser/util/DimensionUtils.java
Patch:
@@ -179,7 +179,7 @@ private static void finalizeDimensionSwitch(GeyserSession session, Entity player
     }
 
     public static void setBedrockDimension(GeyserSession session, int bedrockDimension) {
-        session.getChunkCache().setBedrockDimension(switch (bedrockDimension) {
+        session.setBedrockDimension(switch (bedrockDimension) {
             case BEDROCK_END_ID -> BedrockDimension.THE_END;
             case BEDROCK_DEFAULT_NETHER_ID -> BedrockDimension.THE_NETHER; // JavaDimension *should* be set to BEDROCK_END_ID if the Nether workaround is enabled.
             default -> BedrockDimension.OVERWORLD;

File: core/src/main/java/org/geysermc/geyser/util/InventoryUtils.java
Patch:
@@ -159,7 +159,7 @@ public static void closeInventory(GeyserSession session, int javaId, boolean con
     @Nullable
     public static Vector3i findAvailableWorldSpace(GeyserSession session) {
         // Check if a fake block can be placed, either above the player or beneath.
-        BedrockDimension dimension = session.getChunkCache().getBedrockDimension();
+        BedrockDimension dimension = session.getBedrockDimension();
         int minY = dimension.minY(), maxY = minY + dimension.height();
         Vector3i flatPlayerPosition = session.getPlayerEntity().getPosition().toInt();
         Vector3i position = flatPlayerPosition.add(Vector3i.UP);

File: core/src/main/java/org/geysermc/geyser/GeyserImpl.java
Patch:
@@ -62,6 +62,7 @@
 import org.geysermc.geyser.api.event.lifecycle.GeyserPostReloadEvent;
 import org.geysermc.geyser.api.event.lifecycle.GeyserPreInitializeEvent;
 import org.geysermc.geyser.api.event.lifecycle.GeyserPreReloadEvent;
+import org.geysermc.geyser.api.event.lifecycle.GeyserRegisterPermissionsEvent;
 import org.geysermc.geyser.api.event.lifecycle.GeyserShutdownEvent;
 import org.geysermc.geyser.api.network.AuthType;
 import org.geysermc.geyser.api.network.BedrockListener;

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaCommandsTranslator.java
Patch:
@@ -169,8 +169,8 @@ public void translate(GeyserSession session, ClientboundCommandsPacket packet) {
             return;
         }
 
-        // The command flags, not sure what these do apart from break things
-        Set<CommandData.Flag> flags = Set.of();
+        // The command flags, set to NOT_CHEAT so known commands can be used while achievements are enabled.
+        Set<CommandData.Flag> flags = Set.of(CommandData.Flag.NOT_CHEAT);
 
         // Loop through all the found commands
         for (Map.Entry<BedrockCommandInfo, Set<String>> entry : commands.entrySet()) {
@@ -449,7 +449,7 @@ public void buildChildren(CommandBuilderContext context, CommandNode[] allNodes)
                         type = (CommandParam) mappedType;
                         // Bedrock throws a fit if an optional message comes after a string or target
                         // Example vanilla commands: ban-ip, ban, and kick
-                        if (optional && type == CommandParam.MESSAGE && (paramData.getType() == CommandParam.STRING || paramData.getType() == CommandParam.TARGET)) {
+                        if (optional && type == CommandParam.MESSAGE && paramData != null && (paramData.getType() == CommandParam.STRING || paramData.getType() == CommandParam.TARGET)) {
                             optional = false;
                         }
                     }

File: core/src/main/java/org/geysermc/geyser/registry/populator/BlockRegistryPopulator.java
Patch:
@@ -129,7 +129,7 @@ private static void registerBedrockBlocks() {
                     NbtMapBuilder builder = vanillaBlockStates.get(i).toBuilder();
                     builder.remove("version"); // Remove all nbt tags which are not needed for differentiating states
                     builder.remove("name_hash"); // Quick workaround - was added in 1.19.20
-                    builder.remove("network_id"); // Added in 1.19.80 - ????
+                    builder.remove("network_id"); // Added in 1.19.80
                     builder.remove("block_id"); // Added in 1.20.60
                     //noinspection UnstableApiUsage
                     builder.putCompound("states", statesInterner.intern((NbtMap) builder.remove("states")));

File: core/src/main/java/org/geysermc/geyser/translator/level/block/entity/PistonBlockEntity.java
Patch:
@@ -37,7 +37,6 @@
 import org.cloudburstmc.nbt.NbtMap;
 import org.cloudburstmc.nbt.NbtMapBuilder;
 import org.cloudburstmc.protocol.bedrock.packet.UpdateBlockPacket;
-import org.geysermc.geyser.api.util.PlatformType;
 import org.geysermc.geyser.level.block.BlockStateValues;
 import org.geysermc.geyser.level.block.Blocks;
 import org.geysermc.geyser.level.block.property.Properties;
@@ -230,8 +229,8 @@ private void removePistonHead() {
         BlockState state = session.getGeyser().getWorldManager().blockAt(session, blockInFront);
         if (state.is(Blocks.PISTON_HEAD)) {
             ChunkUtils.updateBlock(session, Block.JAVA_AIR_ID, blockInFront);
-        } else if ((session.getGeyser().getPlatformType() == PlatformType.SPIGOT || session.getErosionHandler().isActive()) && state.is(Blocks.AIR)) {
-            // Spigot removes the piston head from the cache, but we need to send the block update ourselves
+        } else if ((session.getGeyser().getWorldManager().hasOwnChunkCache() || session.getErosionHandler().isActive()) && state.is(Blocks.AIR)) {
+            // The platform removes the piston head from the cache, but we need to send the block update ourselves
             ChunkUtils.updateBlock(session, Block.JAVA_AIR_ID, blockInFront);
         }
     }

File: core/src/main/java/org/geysermc/geyser/util/DimensionUtils.java
Patch:
@@ -25,6 +25,7 @@
 
 package org.geysermc.geyser.util;
 
+import org.checkerframework.checker.nullness.qual.Nullable;
 import org.cloudburstmc.math.vector.Vector3f;
 import org.cloudburstmc.math.vector.Vector3i;
 import org.cloudburstmc.protocol.bedrock.data.LevelEvent;
@@ -61,7 +62,7 @@ public static void switchDimension(GeyserSession session, JavaDimension javaDime
     }
 
     public static void switchDimension(GeyserSession session, JavaDimension javaDimension, int bedrockDimension) {
-        JavaDimension previousDimension = session.getDimensionType(); // previous java dimension
+        @Nullable JavaDimension previousDimension = session.getDimensionType(); // previous java dimension; can be null if an online player with no saved auth token logs in.
 
         Entity player = session.getPlayerEntity();
 
@@ -109,7 +110,7 @@ public static void switchDimension(GeyserSession session, JavaDimension javaDime
         if (isCustomBedrockNetherId()) {
             if (javaDimension.isNetherLike()) {
                 session.camera().sendFog(BEDROCK_FOG_HELL);
-            } else if (previousDimension.isNetherLike()) {
+            } else if (previousDimension != null && previousDimension.isNetherLike()) {
                 session.camera().removeFog(BEDROCK_FOG_HELL);
             }
         }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaUpdateRecipesTranslator.java
Patch:
@@ -253,7 +253,8 @@ public void translate(GeyserSession session, ClientboundUpdateRecipesPacket pack
             // We can get the correct order for button pressing
             data.getValue().sort(Comparator.comparing((stoneCuttingRecipeData ->
                     Registries.JAVA_ITEMS.get().get(stoneCuttingRecipeData.getResult().getId())
-                            .javaIdentifier())));
+                        // See RecipeManager#getRecipesFor as of 1.21
+                            .translationKey())));
 
             // Now that it's sorted, let's translate these recipes
             int buttonId = 0;

File: core/src/main/java/org/geysermc/geyser/Constants.java
Patch:
@@ -39,7 +39,9 @@ public final class Constants {
     public static final String GEYSER_DOWNLOAD_LOCATION = "https://geysermc.org/download";
     public static final String UPDATE_PERMISSION = "geyser.update";
 
+    @Deprecated
     static final String SAVED_REFRESH_TOKEN_FILE = "saved-refresh-tokens.json";
+    static final String SAVED_AUTH_CHAINS_FILE = "saved-auth-chains.json";
 
     public static final String GEYSER_CUSTOM_NAMESPACE = "geyser_custom";
 
@@ -54,4 +56,4 @@ public final class Constants {
         }
         GLOBAL_API_WS_URI = wsUri;
     }
-}
\ No newline at end of file
+}

File: core/src/main/java/org/geysermc/geyser/entity/EntityDefinitions.java
Patch:
@@ -327,6 +327,7 @@ public final class EntityDefinitions {
             TEXT_DISPLAY = EntityDefinition.inherited(TextDisplayEntity::new, displayBase)
                     .type(EntityType.TEXT_DISPLAY)
                     .identifier("minecraft:armor_stand")
+                    .offset(-0.5f)
                     .addTranslator(MetadataType.CHAT, TextDisplayEntity::setText)
                     .addTranslator(null) // Line width
                     .addTranslator(null) // Background color

File: core/src/main/java/org/geysermc/geyser/entity/attribute/GeyserAttributeType.java
Patch:
@@ -49,7 +49,8 @@ public enum GeyserAttributeType {
     ATTACK_KNOCKBACK("minecraft:generic.attack_knockback", null, 1.5f, Float.MAX_VALUE, 0f),
     ATTACK_SPEED("minecraft:generic.attack_speed", null, 0f, 1024f, 4f),
     MAX_HEALTH("minecraft:generic.max_health", null, 0f, 1024f, 20f),
-    SCALE("minecraft:generic.scale", null, 0.0625f, 16f, 1f), // Unused. Do we need this?
+    SCALE("minecraft:generic.scale", null, 0.0625f, 16f, 1f),
+    BLOCK_INTERACTION_RANGE("minecraft:player.block_interaction_range", null, 0.0f, 64f, 4.5f),
 
     // Bedrock Attributes
     ABSORPTION(null, "minecraft:absorption", 0f, 1024f, 0f),

File: core/src/main/java/org/geysermc/geyser/entity/type/LivingEntity.java
Patch:
@@ -48,6 +48,7 @@
 import org.geysermc.geyser.translator.item.ItemTranslator;
 import org.geysermc.geyser.util.AttributeUtils;
 import org.geysermc.geyser.util.InteractionResult;
+import org.geysermc.geyser.util.MathUtils;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.attribute.Attribute;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.attribute.AttributeType;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.EntityMetadata;
@@ -252,7 +253,7 @@ protected void setScale(float scale) {
     }
 
     private void setAttributeScale(float scale) {
-        this.attributeScale = scale;
+        this.attributeScale = MathUtils.clamp(scale, GeyserAttributeType.SCALE.getMinimum(), GeyserAttributeType.SCALE.getMaximum());
         applyScale();
     }
 

File: core/src/main/java/org/geysermc/geyser/inventory/item/StoredItemMappings.java
Patch:
@@ -50,6 +50,7 @@ public class StoredItemMappings {
     private final ItemMapping milkBucket;
     private final ItemMapping powderSnowBucket;
     private final ItemMapping shield;
+    private final ItemMapping totem;
     private final ItemMapping upgradeTemplate;
     private final ItemMapping wheat;
     private final ItemMapping writableBook;
@@ -66,6 +67,7 @@ public StoredItemMappings(Map<Item, ItemMapping> itemMappings) {
         this.milkBucket = load(itemMappings, Items.MILK_BUCKET);
         this.powderSnowBucket = load(itemMappings, Items.POWDER_SNOW_BUCKET);
         this.shield = load(itemMappings, Items.SHIELD);
+        this.totem = load(itemMappings, Items.TOTEM_OF_UNDYING);
         this.upgradeTemplate = load(itemMappings, Items.NETHERITE_UPGRADE_SMITHING_TEMPLATE);
         this.wheat = load(itemMappings, Items.WHEAT);
         this.writableBook = load(itemMappings, Items.WRITABLE_BOOK);

File: core/src/main/java/org/geysermc/geyser/item/type/PlayerHeadItem.java
Patch:
@@ -25,7 +25,7 @@
 
 package org.geysermc.geyser.item.type;
 
-import com.github.steveice10.mc.auth.data.GameProfile;
+import org.geysermc.mcprotocollib.auth.GameProfile;
 import org.checkerframework.checker.nullness.qual.NonNull;
 import org.geysermc.geyser.level.block.type.Block;
 import org.geysermc.geyser.session.GeyserSession;

File: core/src/main/java/org/geysermc/geyser/level/block/type/SkullBlock.java
Patch:
@@ -25,7 +25,7 @@
 
 package org.geysermc.geyser.level.block.type;
 
-import com.github.steveice10.mc.auth.data.GameProfile;
+import org.geysermc.mcprotocollib.auth.GameProfile;
 import org.cloudburstmc.math.vector.Vector3i;
 import org.cloudburstmc.nbt.NbtMap;
 import org.cloudburstmc.nbt.NbtMapBuilder;

File: core/src/main/java/org/geysermc/geyser/network/GameProtocol.java
Patch:
@@ -73,7 +73,9 @@ public final class GameProtocol {
         SUPPORTED_BEDROCK_CODECS.add(CodecProcessor.processCodec(Bedrock_v685.CODEC.toBuilder()
             .minecraftVersion("1.21.0/1.21.1")
             .build()));
-        SUPPORTED_BEDROCK_CODECS.add(DEFAULT_BEDROCK_CODEC);
+        SUPPORTED_BEDROCK_CODECS.add(DEFAULT_BEDROCK_CODEC.toBuilder()
+            .minecraftVersion("1.21.2/1.21.3")
+            .build());
     }
 
     /**

File: core/src/main/java/org/geysermc/geyser/network/UpstreamPacketHandler.java
Patch:
@@ -274,10 +274,10 @@ public PacketSignal handle(ModalFormResponsePacket packet) {
 
     private boolean couldLoginUserByName(String bedrockUsername) {
         if (geyser.getConfig().getSavedUserLogins().contains(bedrockUsername)) {
-            String refreshToken = geyser.refreshTokenFor(bedrockUsername);
-            if (refreshToken != null) {
+            String authChain = geyser.authChainFor(bedrockUsername);
+            if (authChain != null) {
                 geyser.getLogger().info(GeyserLocale.getLocaleStringLog("geyser.auth.stored_credentials", session.getAuthData().name()));
-                session.authenticateWithRefreshToken(refreshToken);
+                session.authenticateWithAuthChain(authChain);
                 return true;
             }
         }

File: core/src/main/java/org/geysermc/geyser/ping/IGeyserPingPassthrough.java
Patch:
@@ -35,10 +35,10 @@
 public interface IGeyserPingPassthrough {
 
     /**
-     * Get the MOTD of the server displayed on the multiplayer screen
+     * Gets the ping information, including the MOTD and player count, from the server
      *
      * @param inetSocketAddress the ip address of the client pinging the server
-     * @return string of the MOTD
+     * @return the ping information
      */
     @Nullable
     GeyserPingInfo getPingInformation(InetSocketAddress inetSocketAddress);

File: core/src/main/java/org/geysermc/geyser/registry/populator/CreativeItemRegistryPopulator.java
Patch:
@@ -80,7 +80,6 @@ static void populate(ItemRegistryPopulator.PaletteVersion palette, Map<String, I
     private static ItemData.@Nullable Builder createItemData(JsonNode itemNode, BlockMappings blockMappings, Map<String, ItemDefinition> definitions) {
         int count = 1;
         int damage = 0;
-        int bedrockBlockRuntimeId;
         NbtMap tag = null;
 
         String identifier = itemNode.get("id").textValue();

File: core/src/main/java/org/geysermc/geyser/registry/type/ItemMapping.java
Patch:
@@ -28,6 +28,7 @@
 import it.unimi.dsi.fastutil.Pair;
 import lombok.Builder;
 import lombok.EqualsAndHashCode;
+import lombok.ToString;
 import lombok.Value;
 import org.checkerframework.checker.nullness.qual.NonNull;
 import org.cloudburstmc.protocol.bedrock.data.definitions.BlockDefinition;
@@ -42,6 +43,7 @@
 @Value
 @Builder
 @EqualsAndHashCode
+@ToString
 public class ItemMapping {
     public static final ItemMapping AIR = new ItemMapping(
             "minecraft:air",

File: core/src/main/java/org/geysermc/geyser/session/cache/WorldCache.java
Patch:
@@ -201,4 +201,4 @@ public void addActiveRecord(Vector3i pos, String bedrockPlaySound) {
     public String removeActiveRecord(Vector3i pos) {
         return this.activeRecords.remove(pos);
     }
-}
\ No newline at end of file
+}

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/BedrockSetLocalPlayerAsInitializedTranslator.java
Patch:
@@ -46,10 +46,10 @@ public void translate(GeyserSession session, SetLocalPlayerAsInitializedPacket p
                 if (session.remoteServer().authType() == AuthType.ONLINE) {
                     if (!session.isLoggedIn()) {
                         if (session.getGeyser().getConfig().getSavedUserLogins().contains(session.bedrockUsername())) {
-                            if (session.getGeyser().refreshTokenFor(session.bedrockUsername()) == null) {
+                            if (session.getGeyser().authChainFor(session.bedrockUsername()) == null) {
                                 LoginEncryptionUtils.buildAndShowConsentWindow(session);
                             } else {
-                                // If the refresh token is not null and we're here, then the refresh token expired
+                                // If the auth chain is not null and we're here, then it expired
                                 // and the expiration form has been cached
                                 session.getFormCache().resendAllForms();
                             }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaGameProfileTranslator.java
Patch:
@@ -25,7 +25,7 @@
 
 package org.geysermc.geyser.translator.protocol.java;
 
-import com.github.steveice10.mc.auth.data.GameProfile;
+import org.geysermc.mcprotocollib.auth.GameProfile;
 import net.kyori.adventure.key.Key;
 import org.geysermc.geyser.api.network.AuthType;
 import org.geysermc.geyser.entity.type.player.PlayerEntity;

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/player/JavaPlayerInfoUpdateTranslator.java
Patch:
@@ -25,7 +25,7 @@
 
 package org.geysermc.geyser.translator.protocol.java.entity.player;
 
-import com.github.steveice10.mc.auth.data.GameProfile;
+import org.geysermc.mcprotocollib.auth.GameProfile;
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.cloudburstmc.math.vector.Vector3f;
 import org.cloudburstmc.protocol.bedrock.packet.PlayerListPacket;

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/inventory/JavaOpenBookTranslator.java
Patch:
@@ -70,6 +70,7 @@ public void translate(GeyserSession session, ClientboundOpenBookPacket packet) {
             }
 
             InventoryTranslator translator = InventoryTranslator.inventoryTranslator(ContainerType.LECTERN);
+            Objects.requireNonNull(translator, "could not find lectern inventory translator!");
             session.setInventoryTranslator(translator);
 
             // Should never be null

File: core/src/main/java/org/geysermc/geyser/util/LoginEncryptionUtils.java
Patch:
@@ -28,7 +28,7 @@
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.github.steveice10.mc.auth.service.MsaAuthenticationService;
+import net.raphimc.minecraftauth.step.msa.StepMsaDeviceCode;
 import org.cloudburstmc.protocol.bedrock.packet.LoginPacket;
 import org.cloudburstmc.protocol.bedrock.packet.ServerToClientHandshakePacket;
 import org.cloudburstmc.protocol.bedrock.util.ChainValidationResult;
@@ -203,7 +203,7 @@ private static BiConsumer<SimpleForm, FormResponseResult<SimpleFormResponse>> au
     /**
      * Shows the code that a user must input into their browser
      */
-    public static void buildAndShowMicrosoftCodeWindow(GeyserSession session, MsaAuthenticationService.MsCodeResponse msCode) {
+    public static void buildAndShowMicrosoftCodeWindow(GeyserSession session, StepMsaDeviceCode.MsaDeviceCode msCode) {
         String locale = session.locale();
 
         StringBuilder message = new StringBuilder("%xbox.signin.website\n")
@@ -212,7 +212,7 @@ public static void buildAndShowMicrosoftCodeWindow(GeyserSession session, MsaAut
                 .append(ChatColor.RESET)
                 .append("\n%xbox.signin.enterCode\n")
                 .append(ChatColor.GREEN)
-                .append(msCode.user_code);
+                .append(msCode.getUserCode());
         int timeout = session.getGeyser().getConfig().getPendingAuthenticationTimeout();
         if (timeout != 0) {
             message.append("\n\n")

File: core/src/main/java/org/geysermc/geyser/session/cache/WorldCache.java
Patch:
@@ -201,4 +201,4 @@ public void addActiveRecord(Vector3i pos, String bedrockPlaySound) {
     public String removeActiveRecord(Vector3i pos) {
         return this.activeRecords.remove(pos);
     }
-}
\ No newline at end of file
+}

File: core/src/main/java/org/geysermc/geyser/entity/EntityDefinitions.java
Patch:
@@ -327,6 +327,7 @@ public final class EntityDefinitions {
             TEXT_DISPLAY = EntityDefinition.inherited(TextDisplayEntity::new, displayBase)
                     .type(EntityType.TEXT_DISPLAY)
                     .identifier("minecraft:armor_stand")
+                    .offset(-0.5f)
                     .addTranslator(MetadataType.CHAT, TextDisplayEntity::setText)
                     .addTranslator(null) // Line width
                     .addTranslator(null) // Background color

File: core/src/main/java/org/geysermc/geyser/registry/populator/CreativeItemRegistryPopulator.java
Patch:
@@ -80,7 +80,6 @@ static void populate(ItemRegistryPopulator.PaletteVersion palette, Map<String, I
     private static ItemData.@Nullable Builder createItemData(JsonNode itemNode, BlockMappings blockMappings, Map<String, ItemDefinition> definitions) {
         int count = 1;
         int damage = 0;
-        int bedrockBlockRuntimeId;
         NbtMap tag = null;
 
         String identifier = itemNode.get("id").textValue();

File: core/src/main/java/org/geysermc/geyser/registry/type/ItemMapping.java
Patch:
@@ -28,6 +28,7 @@
 import it.unimi.dsi.fastutil.Pair;
 import lombok.Builder;
 import lombok.EqualsAndHashCode;
+import lombok.ToString;
 import lombok.Value;
 import org.checkerframework.checker.nullness.qual.NonNull;
 import org.cloudburstmc.protocol.bedrock.data.definitions.BlockDefinition;
@@ -42,6 +43,7 @@
 @Value
 @Builder
 @EqualsAndHashCode
+@ToString
 public class ItemMapping {
     public static final ItemMapping AIR = new ItemMapping(
             "minecraft:air",

File: core/src/main/java/org/geysermc/geyser/ping/IGeyserPingPassthrough.java
Patch:
@@ -35,10 +35,10 @@
 public interface IGeyserPingPassthrough {
 
     /**
-     * Get the MOTD of the server displayed on the multiplayer screen
+     * Gets the ping information, including the MOTD and player count, from the server
      *
      * @param inetSocketAddress the ip address of the client pinging the server
-     * @return string of the MOTD
+     * @return the ping information
      */
     @Nullable
     GeyserPingInfo getPingInformation(InetSocketAddress inetSocketAddress);

File: core/src/main/java/org/geysermc/geyser/inventory/item/StoredItemMappings.java
Patch:
@@ -50,6 +50,7 @@ public class StoredItemMappings {
     private final ItemMapping milkBucket;
     private final ItemMapping powderSnowBucket;
     private final ItemMapping shield;
+    private final ItemMapping totem;
     private final ItemMapping upgradeTemplate;
     private final ItemMapping wheat;
     private final ItemMapping writableBook;
@@ -66,6 +67,7 @@ public StoredItemMappings(Map<Item, ItemMapping> itemMappings) {
         this.milkBucket = load(itemMappings, Items.MILK_BUCKET);
         this.powderSnowBucket = load(itemMappings, Items.POWDER_SNOW_BUCKET);
         this.shield = load(itemMappings, Items.SHIELD);
+        this.totem = load(itemMappings, Items.TOTEM_OF_UNDYING);
         this.upgradeTemplate = load(itemMappings, Items.NETHERITE_UPGRADE_SMITHING_TEMPLATE);
         this.wheat = load(itemMappings, Items.WHEAT);
         this.writableBook = load(itemMappings, Items.WRITABLE_BOOK);

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -222,7 +222,7 @@ public class GeyserSession implements GeyserConnection, GeyserCommandSource {
     private boolean closingInventory;
 
     @Setter
-    private InventoryTranslator inventoryTranslator = InventoryTranslator.PLAYER_INVENTORY_TRANSLATOR;
+    private @NonNull InventoryTranslator inventoryTranslator = InventoryTranslator.PLAYER_INVENTORY_TRANSLATOR;
 
     /**
      * Use {@link #getNextItemNetId()} instead for consistency

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/inventory/JavaOpenBookTranslator.java
Patch:
@@ -70,6 +70,7 @@ public void translate(GeyserSession session, ClientboundOpenBookPacket packet) {
             }
 
             InventoryTranslator translator = InventoryTranslator.inventoryTranslator(ContainerType.LECTERN);
+            Objects.requireNonNull(translator, "could not find lectern inventory translator!");
             session.setInventoryTranslator(translator);
 
             // Should never be null

File: core/src/main/java/org/geysermc/geyser/entity/attribute/GeyserAttributeType.java
Patch:
@@ -49,7 +49,7 @@ public enum GeyserAttributeType {
     ATTACK_KNOCKBACK("minecraft:generic.attack_knockback", null, 1.5f, Float.MAX_VALUE, 0f),
     ATTACK_SPEED("minecraft:generic.attack_speed", null, 0f, 1024f, 4f),
     MAX_HEALTH("minecraft:generic.max_health", null, 0f, 1024f, 20f),
-    SCALE("minecraft:generic.scale", null, 0.0625f, 16f, 1f), // Unused. Do we need this?
+    SCALE("minecraft:generic.scale", null, 0.0625f, 16f, 1f),
 
     // Bedrock Attributes
     ABSORPTION(null, "minecraft:absorption", 0f, 1024f, 0f),

File: core/src/main/java/org/geysermc/geyser/entity/type/LivingEntity.java
Patch:
@@ -48,6 +48,7 @@
 import org.geysermc.geyser.translator.item.ItemTranslator;
 import org.geysermc.geyser.util.AttributeUtils;
 import org.geysermc.geyser.util.InteractionResult;
+import org.geysermc.geyser.util.MathUtils;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.attribute.Attribute;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.attribute.AttributeType;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.EntityMetadata;
@@ -252,7 +253,7 @@ protected void setScale(float scale) {
     }
 
     private void setAttributeScale(float scale) {
-        this.attributeScale = scale;
+        this.attributeScale = MathUtils.clamp(scale, GeyserAttributeType.SCALE.getMinimum(), GeyserAttributeType.SCALE.getMaximum());
         applyScale();
     }
 

File: core/src/main/java/org/geysermc/geyser/registry/populator/ItemRegistryPopulator.java
Patch:
@@ -59,6 +59,7 @@
 import org.geysermc.geyser.item.GeyserCustomMappingData;
 import org.geysermc.geyser.item.Items;
 import org.geysermc.geyser.item.components.Rarity;
+import org.geysermc.geyser.item.type.BlockItem;
 import org.geysermc.geyser.item.type.Item;
 import org.geysermc.geyser.registry.BlockRegistries;
 import org.geysermc.geyser.registry.Registries;
@@ -403,7 +404,7 @@ public static void populate() {
                 if (javaOnlyItems.contains(javaItem) || javaItem.rarity() != Rarity.COMMON) {
                     // These items don't exist on Bedrock, so set up a variable that indicates they should have custom names
                     // Or, ensure that we are translating these at all times to account for rarity colouring
-                    mappingBuilder = mappingBuilder.translationString((bedrockBlock != null ? "block." : "item.") + entry.getKey().replace(":", "."));
+                    mappingBuilder = mappingBuilder.translationString((javaItem instanceof BlockItem ? "block." : "item.") + entry.getKey().replace(":", "."));
                     GeyserImpl.getInstance().getLogger().debug("Adding " + entry.getKey() + " as an item that needs to be translated.");
                 }
 

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -312,8 +312,6 @@ public class GeyserSession implements GeyserConnection, GeyserCommandSource {
      * The dimension of the player.
      * As all entities are in the same world, this can be safely applied to all other entities.
      */
-    @Setter
-    private int dimension = DimensionUtils.OVERWORLD;
     @MonotonicNonNull
     @Setter
     private JavaDimension dimensionType = null;

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/JavaAnimateTranslator.java
Patch:
@@ -92,7 +92,7 @@ public void translate(GeyserSession session, ClientboundAnimatePacket packet) {
                 // Spawn custom particle
                 SpawnParticleEffectPacket stringPacket = new SpawnParticleEffectPacket();
                 stringPacket.setIdentifier("geyseropt:enchanted_hit_multiple");
-                stringPacket.setDimensionId(DimensionUtils.javaToBedrock(session.getDimension()));
+                stringPacket.setDimensionId(DimensionUtils.javaToBedrock(session));
                 stringPacket.setPosition(Vector3f.ZERO);
                 stringPacket.setUniqueEntityId(entity.getGeyserId());
                 stringPacket.setMolangVariablesJson(Optional.empty());

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaLevelEventTranslator.java
Patch:
@@ -28,7 +28,6 @@
 import org.cloudburstmc.math.vector.Vector3f;
 import org.cloudburstmc.math.vector.Vector3i;
 import org.cloudburstmc.nbt.NbtMap;
-import org.cloudburstmc.protocol.bedrock.data.LevelEvent;
 import org.cloudburstmc.protocol.bedrock.data.ParticleType;
 import org.cloudburstmc.protocol.bedrock.data.SoundEvent;
 import org.cloudburstmc.protocol.bedrock.packet.LevelEventGenericPacket;
@@ -481,7 +480,7 @@ private short encodeFacing(Set<Direction> blockFaces) {
     }
 
     private static void spawnOminousTrialSpawnerParticles(GeyserSession session, Vector3f pos) {
-        int dimensionId = DimensionUtils.javaToBedrock(session.getDimension());
+        int dimensionId = DimensionUtils.javaToBedrock(session);
         SpawnParticleEffectPacket stringPacket = new SpawnParticleEffectPacket();
         stringPacket.setIdentifier("minecraft:trial_spawner_detection_ominous");
         stringPacket.setDimensionId(dimensionId);

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaLevelParticlesTranslator.java
Patch:
@@ -191,7 +191,7 @@ public void translate(GeyserSession session, ClientboundLevelParticlesPacket pac
                         return packet;
                     };
                 } else if (particleMapping.identifier() != null) {
-                    int dimensionId = DimensionUtils.javaToBedrock(session.getDimension());
+                    int dimensionId = DimensionUtils.javaToBedrock(session);
                     return (position) -> {
                         SpawnParticleEffectPacket stringPacket = new SpawnParticleEffectPacket();
                         stringPacket.setIdentifier(particleMapping.identifier());

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaMapItemDataTranslator.java
Patch:
@@ -46,7 +46,7 @@ public void translate(GeyserSession session, ClientboundMapItemDataPacket packet
         org.cloudburstmc.protocol.bedrock.packet.ClientboundMapItemDataPacket mapItemDataPacket = new org.cloudburstmc.protocol.bedrock.packet.ClientboundMapItemDataPacket();
 
         mapItemDataPacket.setUniqueMapId(packet.getMapId());
-        mapItemDataPacket.setDimensionId(DimensionUtils.javaToBedrock(session.getDimension()));
+        mapItemDataPacket.setDimensionId(DimensionUtils.javaToBedrock(session));
         mapItemDataPacket.setLocked(packet.isLocked());
         mapItemDataPacket.setOrigin(Vector3i.ZERO); // Required since 1.19.20
         mapItemDataPacket.setScale(packet.getScale());

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaSetDefaultSpawnPositionTranslator.java
Patch:
@@ -39,7 +39,7 @@ public class JavaSetDefaultSpawnPositionTranslator extends PacketTranslator<Clie
     public void translate(GeyserSession session, ClientboundSetDefaultSpawnPositionPacket packet) {
         SetSpawnPositionPacket spawnPositionPacket = new SetSpawnPositionPacket();
         spawnPositionPacket.setBlockPosition(packet.getPosition());
-        spawnPositionPacket.setDimensionId(DimensionUtils.javaToBedrock(session.getDimension()));
+        spawnPositionPacket.setDimensionId(DimensionUtils.javaToBedrock(session));
         spawnPositionPacket.setSpawnType(SetSpawnPositionPacket.Type.WORLD_SPAWN);
         session.sendUpstreamPacket(spawnPositionPacket);
     }

File: core/src/main/java/org/geysermc/geyser/util/ChunkUtils.java
Patch:
@@ -203,8 +203,7 @@ public static void sendEmptyChunks(GeyserSession session, Vector3i position, int
      * This must be done after the player has switched dimensions so we know what their dimension is
      */
     public static void loadDimension(GeyserSession session) {
-        JavaDimension dimension = session.getRegistryCache().dimensions().byId(session.getDimension());
-        session.setDimensionType(dimension);
+        JavaDimension dimension = session.getDimensionType();
         int minY = dimension.minY();
         int maxY = dimension.maxY();
 
@@ -223,7 +222,7 @@ public static void loadDimension(GeyserSession session) {
             session.getGeyser().getLogger().warning(GeyserLocale.getLocaleStringLog("geyser.network.translator.chunk.out_of_bounds",
                     String.valueOf(bedrockDimension.minY()),
                     String.valueOf(bedrockDimension.height()),
-                    session.getDimension()));
+                    session.getRegistryCache().dimensions().byValue(session.getDimensionType())));
         }
 
         session.getChunkCache().setMinY(minY);

File: core/src/main/java/org/geysermc/geyser/registry/populator/ItemRegistryPopulator.java
Patch:
@@ -58,6 +58,7 @@
 import org.geysermc.geyser.inventory.item.StoredItemMappings;
 import org.geysermc.geyser.item.GeyserCustomMappingData;
 import org.geysermc.geyser.item.Items;
+import org.geysermc.geyser.item.components.Rarity;
 import org.geysermc.geyser.item.type.Item;
 import org.geysermc.geyser.registry.BlockRegistries;
 import org.geysermc.geyser.registry.Registries;
@@ -399,8 +400,9 @@ public static void populate() {
                     }
                 }
 
-                if (javaOnlyItems.contains(javaItem)) {
+                if (javaOnlyItems.contains(javaItem) || javaItem.rarity() != Rarity.COMMON) {
                     // These items don't exist on Bedrock, so set up a variable that indicates they should have custom names
+                    // Or, ensure that we are translating these at all times to account for rarity colouring
                     mappingBuilder = mappingBuilder.translationString((bedrockBlock != null ? "block." : "item.") + entry.getKey().replace(":", "."));
                     GeyserImpl.getInstance().getLogger().debug("Adding " + entry.getKey() + " as an item that needs to be translated.");
                 }

File: core/src/main/java/org/geysermc/geyser/level/JavaDimension.java
Patch:
@@ -26,7 +26,7 @@
 package org.geysermc.geyser.level;
 
 import org.cloudburstmc.nbt.NbtMap;
-import org.geysermc.mcprotocollib.protocol.data.game.RegistryEntry;
+import org.geysermc.geyser.session.cache.registry.RegistryEntryContext;
 
 /**
  * Represents the information we store from the current Java dimension
@@ -35,8 +35,8 @@
  */
 public record JavaDimension(int minY, int maxY, boolean piglinSafe, double worldCoordinateScale) {
 
-    public static JavaDimension read(RegistryEntry entry) {
-        NbtMap dimension = entry.getData();
+    public static JavaDimension read(RegistryEntryContext entry) {
+        NbtMap dimension = entry.data();
         int minY = dimension.getInt("min_y");
         int maxY = dimension.getInt("height");
         // Logical height can be ignored probably - seems to be for artificial limits like the Nether.

File: core/src/main/java/org/geysermc/geyser/text/TextDecoration.java
Patch:
@@ -29,7 +29,7 @@
 import net.kyori.adventure.text.format.Style;
 import org.cloudburstmc.nbt.NbtMap;
 import org.cloudburstmc.nbt.NbtType;
-import org.geysermc.mcprotocollib.protocol.data.game.RegistryEntry;
+import org.geysermc.geyser.session.cache.registry.RegistryEntryContext;
 import org.geysermc.mcprotocollib.protocol.data.game.chat.ChatType;
 import org.geysermc.mcprotocollib.protocol.data.game.chat.ChatTypeDecoration;
 
@@ -43,11 +43,11 @@ public NbtMap style() {
         throw new UnsupportedOperationException();
     }
 
-    public static ChatType readChatType(RegistryEntry entry) {
+    public static ChatType readChatType(RegistryEntryContext context) {
         // Note: The ID is NOT ALWAYS THE SAME! ViaVersion as of 1.19 adds two registry entries that do NOT match vanilla.
         // (This note has been passed around through several classes and iterations. It stays as a warning
         // to anyone that dares to try and hardcode registry IDs.)
-        NbtMap tag = entry.getData();
+        NbtMap tag = context.data();
         NbtMap chat = tag.getCompound("chat", null);
         if (chat != null) {
             String translationKey = chat.getString("translation_key");

File: core/src/main/java/org/geysermc/geyser/entity/EntityDefinitions.java
Patch:
@@ -307,11 +307,11 @@ public final class EntityDefinitions {
                     .addTranslator(MetadataType.INT, TNTEntity::setFuseLength)
                     .build();
 
-            EntityDefinition<Entity> displayBase = EntityDefinition.inherited(entityBase.factory(), entityBase)
+            EntityDefinition<DisplayBaseEntity> displayBase = EntityDefinition.inherited(DisplayBaseEntity::new, entityBase)
                     .addTranslator(null) // Interpolation delay
                     .addTranslator(null) // Transformation interpolation duration
                     .addTranslator(null) // Position/Rotation interpolation duration
-                    .addTranslator(null) // Translation
+                    .addTranslator(MetadataType.VECTOR3, DisplayBaseEntity::setTranslation) // Translation
                     .addTranslator(null) // Scale
                     .addTranslator(null) // Left rotation
                     .addTranslator(null) // Right rotation

File: core/src/main/java/org/geysermc/geyser/network/GameProtocol.java
Patch:
@@ -67,7 +67,7 @@ public final class GameProtocol {
             .minecraftVersion("1.20.80/1.20.81")
             .build()));
         SUPPORTED_BEDROCK_CODECS.add(CodecProcessor.processCodec(DEFAULT_BEDROCK_CODEC.toBuilder()
-            .minecraftVersion("1.21.0/1.20.1")
+            .minecraftVersion("1.21.0/1.21.1")
             .build()));
     }
 

File: core/src/main/java/org/geysermc/geyser/level/block/type/DoorBlock.java
Patch:
@@ -40,7 +40,7 @@ public void updateBlock(GeyserSession session, BlockState state, Vector3i positi
         // Needed to check whether we must force the client to update the door state.
         String doubleBlockHalf = state.getValue(Properties.DOUBLE_BLOCK_HALF);
 
-        if (doubleBlockHalf.equals("lower")) {
+        if (!session.getGeyser().getWorldManager().hasOwnChunkCache() && doubleBlockHalf.equals("lower")) {
             BlockState oldBlockState = session.getGeyser().getWorldManager().blockAt(session, position);
             // If these are the same, it means that we already updated the lower door block (manually in the workaround below),
             // and we do not need to update the block in the cache/on the client side using the super.updateBlock() method again.

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaBlockUpdateTranslator.java
Patch:
@@ -100,8 +100,8 @@ private void checkInteract(GeyserSession session, ClientboundBlockUpdatePacket p
                 || lastInteractPos.getZ() != packet.getEntry().getPosition().getZ())) {
             return;
         }
-        String identifier = BlockState.of(packet.getEntry().getBlock()).toString(); // This will be yeeted soon. Thanks Chris.
+        BlockState state = BlockState.of(packet.getEntry().getBlock());
         session.setInteracting(false);
-        BlockSoundInteractionTranslator.handleBlockInteraction(session, lastInteractPos.toFloat(), identifier);
+        BlockSoundInteractionTranslator.handleBlockInteraction(session, lastInteractPos.toFloat(), state);
     }
 }

File: core/src/main/java/org/geysermc/geyser/translator/sound/block/BucketSoundInteractionTranslator.java
Patch:
@@ -29,6 +29,7 @@
 import org.cloudburstmc.protocol.bedrock.data.SoundEvent;
 import org.cloudburstmc.protocol.bedrock.packet.LevelSoundEventPacket;
 import org.geysermc.geyser.inventory.GeyserItemStack;
+import org.geysermc.geyser.level.block.type.BlockState;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.translator.sound.BlockSoundInteractionTranslator;
 import org.geysermc.geyser.translator.sound.SoundTranslator;
@@ -37,7 +38,8 @@
 public class BucketSoundInteractionTranslator implements BlockSoundInteractionTranslator {
 
     @Override
-    public void translate(GeyserSession session, Vector3f position, String identifier) {
+    public void translate(GeyserSession session, Vector3f position, BlockState state) {
+        String identifier = state.toString();
         if (!session.isPlacedBucket()) {
             return; // No bucket was really interacted with
         }

File: core/src/main/java/org/geysermc/geyser/translator/sound/block/ComparatorSoundInteractionTranslator.java
Patch:
@@ -28,6 +28,7 @@
 import org.cloudburstmc.math.vector.Vector3f;
 import org.cloudburstmc.protocol.bedrock.data.LevelEvent;
 import org.cloudburstmc.protocol.bedrock.packet.LevelEventPacket;
+import org.geysermc.geyser.level.block.type.BlockState;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.translator.sound.BlockSoundInteractionTranslator;
 import org.geysermc.geyser.translator.sound.SoundTranslator;
@@ -36,7 +37,8 @@
 public class ComparatorSoundInteractionTranslator implements BlockSoundInteractionTranslator {
 
     @Override
-    public void translate(GeyserSession session, Vector3f position, String identifier) {
+    public void translate(GeyserSession session, Vector3f position, BlockState state) {
+        String identifier = state.toString();
         boolean powered = identifier.contains("mode=compare");
         LevelEventPacket levelEventPacket = new LevelEventPacket();
         levelEventPacket.setPosition(position);

File: core/src/main/java/org/geysermc/geyser/translator/sound/block/FlintAndSteelInteractionTranslator.java
Patch:
@@ -28,6 +28,7 @@
 import org.cloudburstmc.math.vector.Vector3f;
 import org.cloudburstmc.protocol.bedrock.data.SoundEvent;
 import org.cloudburstmc.protocol.bedrock.packet.LevelSoundEventPacket;
+import org.geysermc.geyser.level.block.type.BlockState;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.translator.sound.BlockSoundInteractionTranslator;
 import org.geysermc.geyser.translator.sound.SoundTranslator;
@@ -36,7 +37,7 @@
 public class FlintAndSteelInteractionTranslator implements BlockSoundInteractionTranslator {
 
     @Override
-    public void translate(GeyserSession session, Vector3f position, String identifier) {
+    public void translate(GeyserSession session, Vector3f position, BlockState state) {
         LevelSoundEventPacket levelSoundEventPacket = new LevelSoundEventPacket();
         levelSoundEventPacket.setPosition(position);
         levelSoundEventPacket.setBabySound(false);

File: core/src/main/java/org/geysermc/geyser/translator/sound/block/GrassPathInteractionTranslator.java
Patch:
@@ -28,6 +28,7 @@
 import org.cloudburstmc.math.vector.Vector3f;
 import org.cloudburstmc.protocol.bedrock.data.SoundEvent;
 import org.cloudburstmc.protocol.bedrock.packet.LevelSoundEventPacket;
+import org.geysermc.geyser.level.block.type.BlockState;
 import org.geysermc.geyser.registry.BlockRegistries;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.translator.sound.BlockSoundInteractionTranslator;
@@ -37,7 +38,8 @@
 public class GrassPathInteractionTranslator implements BlockSoundInteractionTranslator {
 
     @Override
-    public void translate(GeyserSession session, Vector3f position, String identifier) {
+    public void translate(GeyserSession session, Vector3f position, BlockState state) {
+        String identifier = state.toString();
         LevelSoundEventPacket levelSoundEventPacket = new LevelSoundEventPacket();
         levelSoundEventPacket.setPosition(position);
         levelSoundEventPacket.setBabySound(false);

File: core/src/main/java/org/geysermc/geyser/translator/sound/block/HoeInteractionTranslator.java
Patch:
@@ -28,6 +28,7 @@
 import org.cloudburstmc.math.vector.Vector3f;
 import org.cloudburstmc.protocol.bedrock.data.SoundEvent;
 import org.cloudburstmc.protocol.bedrock.packet.LevelSoundEventPacket;
+import org.geysermc.geyser.level.block.type.BlockState;
 import org.geysermc.geyser.registry.BlockRegistries;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.translator.sound.BlockSoundInteractionTranslator;
@@ -37,7 +38,8 @@
 public class HoeInteractionTranslator implements BlockSoundInteractionTranslator {
 
     @Override
-    public void translate(GeyserSession session, Vector3f position, String identifier) {
+    public void translate(GeyserSession session, Vector3f position, BlockState state) {
+        String identifier = state.toString();
         LevelSoundEventPacket levelSoundEventPacket = new LevelSoundEventPacket();
         levelSoundEventPacket.setPosition(position);
         levelSoundEventPacket.setBabySound(false);

File: core/src/main/java/org/geysermc/geyser/translator/sound/block/LeverSoundInteractionTranslator.java
Patch:
@@ -28,6 +28,7 @@
 import org.cloudburstmc.math.vector.Vector3f;
 import org.cloudburstmc.protocol.bedrock.data.LevelEvent;
 import org.cloudburstmc.protocol.bedrock.packet.LevelEventPacket;
+import org.geysermc.geyser.level.block.type.BlockState;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.translator.sound.BlockSoundInteractionTranslator;
 import org.geysermc.geyser.translator.sound.SoundTranslator;
@@ -36,7 +37,8 @@
 public class LeverSoundInteractionTranslator implements BlockSoundInteractionTranslator {
 
     @Override
-    public void translate(GeyserSession session, Vector3f position, String identifier) {
+    public void translate(GeyserSession session, Vector3f position, BlockState state) {
+        String identifier = state.toString();
         boolean powered = identifier.contains("powered=true");
         LevelEventPacket levelEventPacket = new LevelEventPacket();
         levelEventPacket.setPosition(position);

File: core/src/main/java/org/geysermc/geyser/util/SoundUtils.java
Patch:
@@ -133,7 +133,7 @@ public static void playSound(GeyserSession session, Sound javaSound, Vector3f po
         }
         if (sound == null) {
             session.getGeyser().getLogger().debug("[Builtin] Sound for original '" + soundIdentifier + "' to mappings '" + soundMapping.getBedrock()
-                    + "' was not a playable level sound, or has yet to be mapped to an enum in SoundEvent.");
+                + "' was not a playable level sound, or has yet to be mapped to an enum in SoundEvent.");
             return;
         }
 
@@ -144,7 +144,7 @@ public static void playSound(GeyserSession session, Sound javaSound, Vector3f po
             // Minecraft Wiki: 2^(x/12) = Java pitch where x is -12 to 12
             // Java sends the note value as above starting with -12 and ending at 12
             // Bedrock has a number for each type of note, then proceeds up the scale by adding to that number
-            soundPacket.setExtraData(soundMapping.getExtraData() + (int)(Math.round((Math.log10(pitch) / Math.log10(2)) * 12)) + 12);
+            soundPacket.setExtraData(soundMapping.getExtraData() + (int) (Math.round((Math.log10(pitch) / Math.log10(2)) * 12)) + 12);
         } else if (sound == SoundEvent.PLACE && soundMapping.getExtraData() == -1) {
             if (!soundMapping.getIdentifier().equals(":")) {
                 int javaId = BlockRegistries.JAVA_IDENTIFIER_TO_ID.get().getOrDefault(soundMapping.getIdentifier(), Block.JAVA_AIR_ID);

File: core/src/main/java/org/geysermc/geyser/entity/type/player/SkullPlayerEntity.java
Patch:
@@ -152,7 +152,7 @@ public void updateSkull(SkullCache.Skull skull) {
                 case EAST -> x -= 0.24f;
             }
         } else {
-            rotation = (180f + (blockState.getValue(Properties.ROTATION_16) * 22.5f)) % 360;
+            rotation = (180f + blockState.getValue(Properties.ROTATION_16, 0) * 22.5f) % 360;
         }
 
         moveAbsolute(Vector3f.from(x, y, z), rotation, 0, rotation, true, true);

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/BedrockActionTranslator.java
Patch:
@@ -160,7 +160,7 @@ public void translate(GeyserSession session, PlayerActionPacket packet) {
                 LevelEventPacket startBreak = new LevelEventPacket();
                 startBreak.setType(LevelEvent.BLOCK_START_BREAK);
                 startBreak.setPosition(vector.toFloat());
-                double breakTime = BlockUtils.getSessionBreakTime(session, BlockRegistries.BLOCK_STATES.getOrDefault(blockState, BlockState.of(Block.JAVA_AIR_ID)).block()) * 20;
+                double breakTime = BlockUtils.getSessionBreakTime(session, BlockState.of(blockState).block()) * 20;
 
                 // If the block is custom or the breaking item is custom, we must keep track of break time ourselves
                 GeyserItemStack item = session.getPlayerInventory().getItemInHand();
@@ -211,7 +211,7 @@ public void translate(GeyserSession session, PlayerActionPacket packet) {
                 LevelEventPacket updateBreak = new LevelEventPacket();
                 updateBreak.setType(LevelEvent.BLOCK_UPDATE_BREAK);
                 updateBreak.setPosition(vectorFloat);
-                double breakTime = BlockUtils.getSessionBreakTime(session, BlockRegistries.BLOCK_STATES.getOrDefault(breakingBlock, BlockState.of(Block.JAVA_AIR_ID)).block()) * 20;
+                double breakTime = BlockUtils.getSessionBreakTime(session, BlockState.of(breakingBlock).block()) * 20;
 
 
                 // If the block is custom, we must keep track of when it should break ourselves

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaBlockDestructionTranslator.java
Patch:
@@ -27,9 +27,7 @@
 
 import org.cloudburstmc.protocol.bedrock.data.LevelEvent;
 import org.cloudburstmc.protocol.bedrock.packet.LevelEventPacket;
-import org.geysermc.geyser.level.block.type.Block;
 import org.geysermc.geyser.level.block.type.BlockState;
-import org.geysermc.geyser.registry.BlockRegistries;
 import org.geysermc.geyser.registry.type.ItemMapping;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.translator.protocol.PacketTranslator;
@@ -43,7 +41,7 @@ public class JavaBlockDestructionTranslator extends PacketTranslator<Clientbound
     @Override
     public void translate(GeyserSession session, ClientboundBlockDestructionPacket packet) {
         int state = session.getGeyser().getWorldManager().getBlockAt(session, packet.getPosition().getX(), packet.getPosition().getY(), packet.getPosition().getZ());
-        int breakTime = (int) (65535 / Math.ceil(BlockUtils.getBreakTime(session, BlockRegistries.BLOCK_STATES.getOrDefault(state, BlockState.of(Block.JAVA_AIR_ID)).block(), ItemMapping.AIR, null, false) * 20));
+        int breakTime = (int) (65535 / Math.ceil(BlockUtils.getBreakTime(session, BlockState.of(state).block(), ItemMapping.AIR, null, false) * 20));
         LevelEventPacket levelEventPacket = new LevelEventPacket();
         levelEventPacket.setPosition(packet.getPosition().toFloat());
         levelEventPacket.setType(LevelEvent.BLOCK_START_BREAK);

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaLevelChunkWithLightTranslator.java
Patch:
@@ -39,7 +39,6 @@
 import org.cloudburstmc.protocol.bedrock.packet.LevelChunkPacket;
 import org.geysermc.geyser.entity.type.ItemFrameEntity;
 import org.geysermc.geyser.level.BedrockDimension;
-import org.geysermc.geyser.level.block.Blocks;
 import org.geysermc.geyser.level.block.type.Block;
 import org.geysermc.geyser.level.block.type.BlockState;
 import org.geysermc.geyser.level.chunk.BlockStorage;
@@ -399,7 +398,7 @@ public void translate(GeyserSession session, ClientboundLevelChunkWithLightPacke
 
                 // Get the Java block state ID from block entity position
                 DataPalette section = javaChunks[(y >> 4) - yOffset];
-                BlockState blockState = BlockRegistries.BLOCK_STATES.getOrDefault(section.get(x, y & 0xF, z), Blocks.AIR.defaultBlockState());
+                BlockState blockState = BlockState.of(section.get(x, y & 0xF, z));
 
                 // Note that, since 1.20.5, tags can be null, but Bedrock still needs a default tag to render the item
                 // Also, some properties - like banner base colors - are part of the tag and is processed here.

File: core/src/main/java/org/geysermc/geyser/registry/populator/BlockRegistryPopulator.java
Patch:
@@ -435,9 +435,6 @@ private static void registerJavaBlocks() {
                 if (!javaBlockState.canBreakWithHand()) {
                     builder.requiresCorrectToolForDrops();
                 }
-                if (javaBlockState.hasBlockEntity()) {
-                    builder.setBlockEntity();
-                }
                 String cleanJavaIdentifier = BlockUtils.getCleanIdentifier(javaBlockState.identifier());
                 String pickItem = javaBlockState.pickItem();
                 Block block = new Block(cleanJavaIdentifier, builder) {

File: core/src/main/java/org/geysermc/geyser/translator/level/block/entity/BrushableBlockEntityTranslator.java
Patch:
@@ -37,7 +37,6 @@
 
 @BlockEntity(type = BlockEntityType.BRUSHABLE_BLOCK)
 public class BrushableBlockEntityTranslator extends BlockEntityTranslator implements RequiresBlockState {
-
     @Override
     public void translateTag(GeyserSession session, NbtMapBuilder bedrockNbt, @Nullable NbtMap javaNbt, BlockState blockState) {
         if (javaNbt == null) {

File: core/src/main/java/org/geysermc/geyser/translator/level/block/entity/DecoratedPotBlockEntityTranslator.java
Patch:
@@ -34,7 +34,6 @@
 
 @BlockEntity(type = BlockEntityType.DECORATED_POT)
 public class DecoratedPotBlockEntityTranslator extends BlockEntityTranslator {
-
     @Override
     public void translateTag(GeyserSession session, NbtMapBuilder bedrockNbt, NbtMap javaNbt, BlockState blockState) {
         if (javaNbt == null) {

File: core/src/main/java/org/geysermc/geyser/translator/level/block/entity/ShulkerBoxBlockEntityTranslator.java
Patch:
@@ -30,7 +30,6 @@
 import org.cloudburstmc.nbt.NbtMapBuilder;
 import org.geysermc.geyser.level.block.property.Properties;
 import org.geysermc.geyser.level.block.type.BlockState;
-import org.geysermc.geyser.level.physics.Direction;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.translator.inventory.ShulkerInventoryTranslator;
 import org.geysermc.mcprotocollib.protocol.data.game.level.block.BlockEntityType;
@@ -43,6 +42,6 @@ public class ShulkerBoxBlockEntityTranslator extends BlockEntityTranslator imple
      */
     @Override
     public void translateTag(GeyserSession session, NbtMapBuilder bedrockNbt, @Nullable NbtMap javaNbt, BlockState blockState) {
-        bedrockNbt.putByte("facing", (byte) blockState.getValue(Properties.FACING, Direction.UP).ordinal());
+        bedrockNbt.putByte("facing", (byte) blockState.getValue(Properties.FACING).ordinal());
     }
 }

File: core/src/main/java/org/geysermc/geyser/translator/level/block/entity/SkullBlockEntityTranslator.java
Patch:
@@ -50,7 +50,6 @@
 
 @BlockEntity(type = BlockEntityType.SKULL)
 public class SkullBlockEntityTranslator extends BlockEntityTranslator implements RequiresBlockState {
-
     @Override
     public void translateTag(GeyserSession session, NbtMapBuilder bedrockNbt, NbtMap javaNbt, BlockState blockState) {
         Integer rotation = blockState.getValue(Properties.ROTATION_16);

File: core/src/main/java/org/geysermc/geyser/translator/level/block/entity/SpawnerBlockEntityTranslator.java
Patch:
@@ -39,7 +39,6 @@
 
 @BlockEntity(type = BlockEntityType.MOB_SPAWNER)
 public class SpawnerBlockEntityTranslator extends BlockEntityTranslator {
-
     @Override
     public NbtMap getBlockEntityTag(GeyserSession session, BlockEntityType type, int x, int y, int z, @Nullable NbtMap javaNbt, BlockState blockState) {
         if (javaNbt == null) {

File: core/src/main/java/org/geysermc/geyser/translator/level/block/entity/StructureBlockBlockEntityTranslator.java
Patch:
@@ -39,7 +39,6 @@
 
 @BlockEntity(type = BlockEntityType.STRUCTURE_BLOCK)
 public class StructureBlockBlockEntityTranslator extends BlockEntityTranslator {
-
     @Override
     public NbtMap getBlockEntityTag(GeyserSession session, BlockEntityType type, int x, int y, int z, @Nullable NbtMap javaNbt, BlockState blockState) {
         if (javaNbt == null) {

File: core/src/main/java/org/geysermc/geyser/translator/level/block/entity/TrialSpawnerBlockEntityTranslator.java
Patch:
@@ -33,7 +33,6 @@
 
 @BlockEntity(type = BlockEntityType.TRIAL_SPAWNER)
 public class TrialSpawnerBlockEntityTranslator extends BlockEntityTranslator {
-
     @Override
     public void translateTag(GeyserSession session, NbtMapBuilder bedrockNbt, NbtMap javaNbt, BlockState blockState) {
         if (javaNbt == null) {

File: core/src/main/java/org/geysermc/geyser/translator/item/ItemTranslator.java
Patch:
@@ -135,7 +135,7 @@ public static ItemData translateToBedrock(GeyserSession session, ItemStack stack
                 .build();
     }
 
-    private static ItemData.@NonNull Builder translateToBedrock(GeyserSession session, Item javaItem, ItemMapping bedrockItem, int count, @Nullable DataComponents components) {
+    public static ItemData.@NonNull Builder translateToBedrock(GeyserSession session, Item javaItem, ItemMapping bedrockItem, int count, @Nullable DataComponents components) {
         BedrockItemBuilder nbtBuilder = new BedrockItemBuilder();
 
         boolean hideTooltips = false;

File: core/src/main/java/org/geysermc/geyser/item/type/Item.java
Patch:
@@ -125,7 +125,7 @@ public ItemMapping toBedrockDefinition(DataComponents components, ItemMappings m
      */
     public void translateComponentsToBedrock(@NonNull GeyserSession session, @NonNull DataComponents components, @NonNull BedrockItemBuilder builder) {
         List<Component> loreComponents = components.get(DataComponentType.LORE);
-        if (loreComponents != null) {
+        if (loreComponents != null && components.get(DataComponentType.HIDE_TOOLTIP) == null) {
             List<String> lore = builder.getOrCreateLore();
             for (Component loreComponent : loreComponents) {
                 lore.add(MessageTranslator.convertMessage(loreComponent, session.locale()));

File: core/src/main/java/org/geysermc/geyser/translator/item/ItemTranslator.java
Patch:
@@ -247,7 +247,7 @@ private static String attributeToLore(ItemAttributeModifiers.AttributeModifier m
             return null;
         }
 
-        String name = modifier.getName().replace("minecraft:", "");
+        String name = modifier.getId().asMinimalString();
         // the namespace does not need to be present, but if it is, the java client ignores it as of pre-1.20.5
 
         ModifierOperation operation = modifier.getOperation();

File: core/src/main/java/org/geysermc/geyser/text/TextDecoration.java
Patch:
@@ -50,13 +50,13 @@ public static ChatType readChatType(RegistryEntry entry) {
         NbtMap tag = entry.getData();
         NbtMap chat = tag.getCompound("chat", null);
         if (chat != null) {
-            String translationKey = tag.getString("translation_key");
+            String translationKey = chat.getString("translation_key");
 
-            NbtMap styleTag = tag.getCompound("style");
+            NbtMap styleTag = chat.getCompound("style");
             Style style = deserializeStyle(styleTag);
 
             List<ChatTypeDecoration.Parameter> parameters = new ArrayList<>();
-            List<String> parametersNbt = tag.getList("parameters", NbtType.STRING);
+            List<String> parametersNbt = chat.getList("parameters", NbtType.STRING);
             for (String parameter : parametersNbt) {
                 parameters.add(ChatTypeDecoration.Parameter.valueOf(parameter.toUpperCase(Locale.ROOT)));
             }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaClientboundRecipesTranslator.java
Patch:
@@ -39,7 +39,6 @@ public class JavaClientboundRecipesTranslator extends PacketTranslator<Clientbou
 
     @Override
     public void translate(GeyserSession session, ClientboundRecipePacket packet) {
-        System.out.println(packet);
         UnlockedRecipesPacket recipesPacket = new UnlockedRecipesPacket();
         switch (packet.getAction()) {
             case INIT -> {

File: core/src/main/java/org/geysermc/geyser/translator/inventory/chest/DoubleChestInventoryTranslator.java
Patch:
@@ -64,7 +64,7 @@ public boolean prepareInventory(GeyserSession session, Inventory inventory) {
         if (session.getLastInteractionPlayerPosition().equals(session.getPlayerEntity().getPosition())) {
             BlockState state = session.getGeyser().getWorldManager().blockAt(session, session.getLastInteractionBlockPosition());
             if (!BlockRegistries.CUSTOM_BLOCK_STATE_OVERRIDES.get().containsKey(state.javaId())) {
-                if (state.block() == Blocks.CHEST || state.block() == Blocks.TRAPPED_CHEST
+                if ((state.block() == Blocks.CHEST || state.block() == Blocks.TRAPPED_CHEST)
                         && state.getValue(Properties.CHEST_TYPE) != ChestType.SINGLE) {
                     inventory.setHolderPosition(session.getLastInteractionBlockPosition());
                     ((Container) inventory).setUsingRealBlock(true, state.block());

File: bootstrap/mod/src/main/java/org/geysermc/geyser/platform/mod/world/GeyserModWorldManager.java
Patch:
@@ -47,6 +47,7 @@
 import org.geysermc.geyser.network.GameProtocol;
 import org.geysermc.geyser.platform.mod.GeyserModBootstrap;
 import org.geysermc.geyser.session.GeyserSession;
+import org.geysermc.geyser.util.MinecraftKey;
 import org.geysermc.mcprotocollib.protocol.data.game.Holder;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.player.GameMode;
 import org.geysermc.mcprotocollib.protocol.data.game.item.component.BannerPatternLayer;
@@ -173,7 +174,7 @@ private static List<BannerPatternLayer> toPatternList(BannerPatternLayers patter
         return patternLayers.layers().stream()
                 .map(layer -> {
                     BannerPatternLayer.BannerPattern pattern = new BannerPatternLayer.BannerPattern(
-                            layer.pattern().value().assetId().toString(), layer.pattern().value().translationKey()
+                            MinecraftKey.key(layer.pattern().value().assetId().toString()), layer.pattern().value().translationKey()
                     );
                     return new BannerPatternLayer(Holder.ofCustom(pattern), layer.color().getId());
                 })

File: core/src/main/java/org/geysermc/geyser/registry/loader/RecipeRegistryLoader.java
Patch:
@@ -136,7 +136,7 @@ private static List<GeyserRecipe> getShapedRecipes(List<NbtMap> recipes, Minecra
      */
     private static ItemStack toItemStack(NbtMap nbt, MinecraftCodecHelper helper) {
         int id = nbt.getInt("id");
-        int count = nbt.getInt("count");
+        int count = nbt.getInt("count", 1);
         String componentsRaw = nbt.getString("components", null);
         if (componentsRaw != null) {
             byte[] bytes = Base64.getDecoder().decode(componentsRaw);

File: core/src/main/java/org/geysermc/geyser/registry/populator/BlockRegistryPopulator.java
Patch:
@@ -290,7 +290,8 @@ private static void registerBedrockBlocks() {
                 }
 
                 boolean waterlogged = blockState.getValue(Properties.WATERLOGGED, false)
-                        || block == Blocks.BUBBLE_COLUMN || block == Blocks.KELP || block == Blocks.SEAGRASS;
+                        || block == Blocks.BUBBLE_COLUMN || block == Blocks.KELP || block == Blocks.KELP_PLANT
+                        || block == Blocks.SEAGRASS || block == Blocks.TALL_SEAGRASS;
 
                 if (waterlogged) {
                     BlockRegistries.WATERLOGGED.get().set(javaRuntimeId);

File: core/src/main/java/org/geysermc/geyser/registry/Registries.java
Patch:
@@ -169,7 +169,6 @@ public static void init() {
     static {
         PacketRegistryPopulator.populate();
         ItemRegistryPopulator.populate();
-        System.out.println(RECIPES.get());
 
         // Create registries that require other registries to load first
         POTION_MIXES = VersionedRegistry.create(PotionMixRegistryLoader::new);

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaUpdateRecipesTranslator.java
Patch:
@@ -282,7 +282,6 @@ public void translate(GeyserSession session, ClientboundUpdateRecipesPacket pack
         session.sendUpstreamPacket(craftingDataPacket);
         session.setCraftingRecipes(recipeMap);
         session.setStonecutterRecipes(stonecutterRecipeMap);
-        System.out.println(craftingDataPacket);
     }
 
     //TODO: rewrite

File: core/src/main/java/org/geysermc/geyser/translator/level/block/entity/DoubleChestBlockEntityTranslator.java
Patch:
@@ -38,7 +38,7 @@
  * Chests have more block entity properties in Bedrock, which is solved by implementing the BedrockChunkWantsBlockEntityTag
  */
 @BlockEntity(type = { BlockEntityType.CHEST, BlockEntityType.TRAPPED_CHEST })
-public class DoubleChestBlockEntityTranslator extends BlockEntityTranslator {
+public class DoubleChestBlockEntityTranslator extends BlockEntityTranslator implements RequiresBlockState {
 
     @Override
     public void translateTag(GeyserSession session, NbtMapBuilder bedrockNbt, NbtMap javaNbt, BlockState blockState) {

File: api/src/main/java/org/geysermc/geyser/api/event/bedrock/SessionLoginEvent.java
Patch:
@@ -36,7 +36,7 @@
 import java.util.Objects;
 
 /**
- * Called when a session has logged in, and is about to connect to a remote java server.
+ * Called when a session has logged in, and is about to connect to a remote Java server.
  * This event is cancellable, and can be used to prevent the player from connecting to the remote server.
  */
 public final class SessionLoginEvent extends ConnectionEvent implements Cancellable {
@@ -99,9 +99,9 @@ public void setCancelled(boolean cancelled, @NonNull String disconnectReason) {
     }
 
     /**
-     * Gets the {@link RemoteServer} the section will attempt to connect to.
+     * Gets the {@link RemoteServer} the session will attempt to connect to.
      *
-     * @return the {@link RemoteServer} the section will attempt to connect to.
+     * @return the {@link RemoteServer} the session will attempt to connect to.
      */
     public @NonNull RemoteServer remoteServer() {
         return this.remoteServer;

File: core/src/main/java/org/geysermc/geyser/network/UpstreamPacketHandler.java
Patch:
@@ -132,6 +132,8 @@ private boolean setCorrectCodec(int protocolVersion) {
         }
 
         session.getUpstream().getSession().setCodec(packetCodec);
+        // FIXME temporary until 1.20.80 is dropped
+        session.getPlayerEntity().resetAir();
         return true;
     }
 

File: core/src/main/java/org/geysermc/geyser/configuration/GeyserJacksonConfiguration.java
Patch:
@@ -94,7 +94,7 @@ public abstract class GeyserJacksonConfiguration implements GeyserConfiguration
     private boolean debugMode = false;
 
     @JsonProperty("allow-third-party-capes")
-    private boolean allowThirdPartyCapes = true;
+    private boolean allowThirdPartyCapes = false;
 
     @JsonProperty("show-cooldown")
     private String showCooldown = "title";

File: core/src/main/java/org/geysermc/geyser/entity/type/SpawnerMinecartEntity.java
Patch:
@@ -28,7 +28,7 @@
 import org.cloudburstmc.math.vector.Vector3f;
 import org.cloudburstmc.protocol.bedrock.data.entity.EntityDataTypes;
 import org.geysermc.geyser.entity.EntityDefinition;
-import org.geysermc.geyser.level.block.type.SpawnerBlock;
+import org.geysermc.geyser.level.block.Blocks;
 import org.geysermc.geyser.session.GeyserSession;
 
 import java.util.UUID;
@@ -41,7 +41,7 @@ public SpawnerMinecartEntity(GeyserSession session, int entityId, long geyserId,
 
     @Override
     public void updateDefaultBlockMetadata() {
-        dirtyMetadata.put(EntityDataTypes.DISPLAY_BLOCK_STATE, session.getBlockMappings().getBedrockBlock(SpawnerBlock.state()));
+        dirtyMetadata.put(EntityDataTypes.DISPLAY_BLOCK_STATE, session.getBlockMappings().getBedrockBlock(Blocks.SPAWNER.defaultBlockState()));
         dirtyMetadata.put(EntityDataTypes.DISPLAY_OFFSET, 6);
     }
 }

File: core/src/main/java/org/geysermc/geyser/translator/inventory/AnvilInventoryTranslator.java
Patch:
@@ -45,7 +45,7 @@
 
 public class AnvilInventoryTranslator extends AbstractBlockInventoryTranslator {
     public AnvilInventoryTranslator() {
-        super(3, "minecraft:anvil[facing=north]", org.cloudburstmc.protocol.bedrock.data.inventory.ContainerType.ANVIL, AnvilInventoryUpdater.INSTANCE,
+        super(3, Blocks.ANVIL, org.cloudburstmc.protocol.bedrock.data.inventory.ContainerType.ANVIL, AnvilInventoryUpdater.INSTANCE,
                 Blocks.CHIPPED_ANVIL, Blocks.DAMAGED_ANVIL);
     }
 

File: core/src/main/java/org/geysermc/geyser/translator/inventory/CartographyInventoryTranslator.java
Patch:
@@ -30,12 +30,13 @@
 import org.geysermc.geyser.inventory.*;
 import org.geysermc.geyser.inventory.updater.UIInventoryUpdater;
 import org.geysermc.geyser.item.Items;
+import org.geysermc.geyser.level.block.Blocks;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.mcprotocollib.protocol.data.game.inventory.ContainerType;
 
 public class CartographyInventoryTranslator extends AbstractBlockInventoryTranslator {
     public CartographyInventoryTranslator() {
-        super(3, "minecraft:cartography_table", org.cloudburstmc.protocol.bedrock.data.inventory.ContainerType.CARTOGRAPHY, UIInventoryUpdater.INSTANCE);
+        super(3, Blocks.CARTOGRAPHY_TABLE, org.cloudburstmc.protocol.bedrock.data.inventory.ContainerType.CARTOGRAPHY, UIInventoryUpdater.INSTANCE);
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/translator/inventory/CrafterInventoryTranslator.java
Patch:
@@ -31,6 +31,7 @@
 import org.cloudburstmc.protocol.bedrock.data.inventory.itemstack.request.ItemStackRequestSlotData;
 import org.geysermc.geyser.inventory.*;
 import org.geysermc.geyser.inventory.updater.CrafterInventoryUpdater;
+import org.geysermc.geyser.level.block.Blocks;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.util.BlockEntityUtils;
 import org.geysermc.mcprotocollib.protocol.data.game.inventory.ContainerType;
@@ -53,7 +54,7 @@ public class CrafterInventoryTranslator extends AbstractBlockInventoryTranslator
     private static final int TRIGGERED = 1; // triggered value
 
     public CrafterInventoryTranslator() {
-        super(10, "minecraft:crafter", org.cloudburstmc.protocol.bedrock.data.inventory.ContainerType.CRAFTER, CrafterInventoryUpdater.INSTANCE);
+        super(10, Blocks.CRAFTER, org.cloudburstmc.protocol.bedrock.data.inventory.ContainerType.CRAFTER, CrafterInventoryUpdater.INSTANCE);
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/translator/inventory/CraftingInventoryTranslator.java
Patch:
@@ -31,10 +31,11 @@
 import org.geysermc.geyser.inventory.BedrockContainerSlot;
 import org.geysermc.geyser.inventory.SlotType;
 import org.geysermc.geyser.inventory.updater.UIInventoryUpdater;
+import org.geysermc.geyser.level.block.Blocks;
 
 public class CraftingInventoryTranslator extends AbstractBlockInventoryTranslator {
     public CraftingInventoryTranslator() {
-        super(10, "minecraft:crafting_table", ContainerType.WORKBENCH, UIInventoryUpdater.INSTANCE);
+        super(10, Blocks.CRAFTING_TABLE, ContainerType.WORKBENCH, UIInventoryUpdater.INSTANCE);
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/translator/inventory/EnchantingInventoryTranslator.java
Patch:
@@ -38,6 +38,7 @@
 import org.geysermc.geyser.inventory.*;
 import org.geysermc.geyser.inventory.item.Enchantment;
 import org.geysermc.geyser.inventory.updater.UIInventoryUpdater;
+import org.geysermc.geyser.level.block.Blocks;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.mcprotocollib.protocol.data.game.inventory.ContainerType;
 import org.geysermc.mcprotocollib.protocol.packet.ingame.serverbound.inventory.ServerboundContainerButtonClickPacket;
@@ -47,7 +48,7 @@
 
 public class EnchantingInventoryTranslator extends AbstractBlockInventoryTranslator {
     public EnchantingInventoryTranslator() {
-        super(2, "minecraft:enchanting_table", org.cloudburstmc.protocol.bedrock.data.inventory.ContainerType.ENCHANTMENT, UIInventoryUpdater.INSTANCE);
+        super(2, Blocks.ENCHANTING_TABLE, org.cloudburstmc.protocol.bedrock.data.inventory.ContainerType.ENCHANTMENT, UIInventoryUpdater.INSTANCE);
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/translator/inventory/Generic3X3InventoryTranslator.java
Patch:
@@ -41,7 +41,7 @@
  */
 public class Generic3X3InventoryTranslator extends AbstractBlockInventoryTranslator {
     public Generic3X3InventoryTranslator() {
-        super(9, "minecraft:dispenser[facing=north,triggered=false]", org.cloudburstmc.protocol.bedrock.data.inventory.ContainerType.DISPENSER, ContainerInventoryUpdater.INSTANCE,
+        super(9, Blocks.DISPENSER, org.cloudburstmc.protocol.bedrock.data.inventory.ContainerType.DISPENSER, ContainerInventoryUpdater.INSTANCE,
                 Blocks.DROPPER);
     }
 

File: core/src/main/java/org/geysermc/geyser/translator/inventory/GrindstoneInventoryTranslator.java
Patch:
@@ -30,10 +30,11 @@
 import org.cloudburstmc.protocol.bedrock.data.inventory.itemstack.request.ItemStackRequestSlotData;
 import org.geysermc.geyser.inventory.BedrockContainerSlot;
 import org.geysermc.geyser.inventory.updater.UIInventoryUpdater;
+import org.geysermc.geyser.level.block.Blocks;
 
 public class GrindstoneInventoryTranslator extends AbstractBlockInventoryTranslator {
     public GrindstoneInventoryTranslator() {
-        super(3, "minecraft:grindstone[face=floor,facing=north]", ContainerType.GRINDSTONE, UIInventoryUpdater.INSTANCE);
+        super(3, Blocks.GRINDSTONE, ContainerType.GRINDSTONE, UIInventoryUpdater.INSTANCE);
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/translator/inventory/HopperInventoryTranslator.java
Patch:
@@ -29,13 +29,14 @@
 import org.cloudburstmc.protocol.bedrock.data.inventory.ContainerType;
 import org.geysermc.geyser.inventory.BedrockContainerSlot;
 import org.geysermc.geyser.inventory.updater.ContainerInventoryUpdater;
+import org.geysermc.geyser.level.block.Blocks;
 
 /**
  * Implemented on top of any block that does not have special properties implemented
  */
 public class HopperInventoryTranslator extends AbstractBlockInventoryTranslator {
     public HopperInventoryTranslator() {
-        super(5, "minecraft:hopper[enabled=false,facing=down]", ContainerType.HOPPER, ContainerInventoryUpdater.INSTANCE);
+        super(5, Blocks.HOPPER, ContainerType.HOPPER, ContainerInventoryUpdater.INSTANCE);
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/translator/inventory/LecternInventoryTranslator.java
Patch:
@@ -34,6 +34,7 @@
 import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.inventory.*;
 import org.geysermc.geyser.inventory.updater.ContainerInventoryUpdater;
+import org.geysermc.geyser.level.block.Blocks;
 import org.geysermc.geyser.network.GameProtocol;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.util.BlockEntityUtils;
@@ -56,7 +57,7 @@ public class LecternInventoryTranslator extends AbstractBlockInventoryTranslator
     private boolean initialized = false;
 
     public LecternInventoryTranslator() {
-        super(1, "minecraft:lectern[facing=north,has_book=true,powered=true]", org.cloudburstmc.protocol.bedrock.data.inventory.ContainerType.LECTERN , ContainerInventoryUpdater.INSTANCE);
+        super(1, Blocks.LECTERN, org.cloudburstmc.protocol.bedrock.data.inventory.ContainerType.LECTERN , ContainerInventoryUpdater.INSTANCE);
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/translator/inventory/LoomInventoryTranslator.java
Patch:
@@ -45,6 +45,7 @@
 import org.geysermc.geyser.inventory.updater.UIInventoryUpdater;
 import org.geysermc.geyser.item.type.BannerItem;
 import org.geysermc.geyser.item.type.DyeItem;
+import org.geysermc.geyser.level.block.Blocks;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.mcprotocollib.protocol.data.game.item.component.BannerPatternLayer;
 import org.geysermc.mcprotocollib.protocol.data.game.item.component.DataComponentType;
@@ -101,7 +102,7 @@ public class LoomInventoryTranslator extends AbstractBlockInventoryTranslator {
     }
 
     public LoomInventoryTranslator() {
-        super(4, "minecraft:loom[facing=north]", ContainerType.LOOM, UIInventoryUpdater.INSTANCE);
+        super(4, Blocks.LOOM, ContainerType.LOOM, UIInventoryUpdater.INSTANCE);
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/translator/inventory/OldSmithingTableTranslator.java
Patch:
@@ -37,6 +37,7 @@
 import org.geysermc.geyser.inventory.BedrockContainerSlot;
 import org.geysermc.geyser.inventory.Inventory;
 import org.geysermc.geyser.inventory.updater.UIInventoryUpdater;
+import org.geysermc.geyser.level.block.Blocks;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.util.InventoryUtils;
 
@@ -53,7 +54,7 @@ public class OldSmithingTableTranslator extends AbstractBlockInventoryTranslator
     private static final IntFunction<ItemData> UPGRADE_TEMPLATE = InventoryUtils.getUpgradeTemplate();
 
     private OldSmithingTableTranslator() {
-        super(3, "minecraft:smithing_table", ContainerType.SMITHING_TABLE, UIInventoryUpdater.INSTANCE);
+        super(3, Blocks.SMITHING_TABLE, ContainerType.SMITHING_TABLE, UIInventoryUpdater.INSTANCE);
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/translator/inventory/SmithingInventoryTranslator.java
Patch:
@@ -30,10 +30,11 @@
 import org.cloudburstmc.protocol.bedrock.data.inventory.itemstack.request.ItemStackRequestSlotData;
 import org.geysermc.geyser.inventory.BedrockContainerSlot;
 import org.geysermc.geyser.inventory.updater.UIInventoryUpdater;
+import org.geysermc.geyser.level.block.Blocks;
 
 public class SmithingInventoryTranslator extends AbstractBlockInventoryTranslator {
     public SmithingInventoryTranslator() {
-        super(4, "minecraft:smithing_table", ContainerType.SMITHING_TABLE, UIInventoryUpdater.INSTANCE);
+        super(4, Blocks.SMITHING_TABLE, ContainerType.SMITHING_TABLE, UIInventoryUpdater.INSTANCE);
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/translator/inventory/StonecutterInventoryTranslator.java
Patch:
@@ -35,14 +35,15 @@
 import org.geysermc.geyser.inventory.*;
 import org.geysermc.geyser.inventory.recipe.GeyserStonecutterData;
 import org.geysermc.geyser.inventory.updater.UIInventoryUpdater;
+import org.geysermc.geyser.level.block.Blocks;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.mcprotocollib.protocol.data.game.inventory.ContainerType;
 import org.geysermc.mcprotocollib.protocol.data.game.item.ItemStack;
 import org.geysermc.mcprotocollib.protocol.packet.ingame.serverbound.inventory.ServerboundContainerButtonClickPacket;
 
 public class StonecutterInventoryTranslator extends AbstractBlockInventoryTranslator {
     public StonecutterInventoryTranslator() {
-        super(2, "minecraft:stonecutter[facing=north]", org.cloudburstmc.protocol.bedrock.data.inventory.ContainerType.STONECUTTER, UIInventoryUpdater.INSTANCE);
+        super(2, Blocks.STONECUTTER, org.cloudburstmc.protocol.bedrock.data.inventory.ContainerType.STONECUTTER, UIInventoryUpdater.INSTANCE);
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/translator/inventory/furnace/BlastFurnaceInventoryTranslator.java
Patch:
@@ -28,10 +28,11 @@
 import org.cloudburstmc.protocol.bedrock.data.inventory.ContainerSlotType;
 import org.cloudburstmc.protocol.bedrock.data.inventory.ContainerType;
 import org.geysermc.geyser.inventory.BedrockContainerSlot;
+import org.geysermc.geyser.level.block.Blocks;
 
 public class BlastFurnaceInventoryTranslator extends AbstractFurnaceInventoryTranslator {
     public BlastFurnaceInventoryTranslator() {
-        super("minecraft:blast_furnace[facing=north,lit=false]", ContainerType.BLAST_FURNACE);
+        super(Blocks.BLAST_FURNACE, ContainerType.BLAST_FURNACE);
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/translator/inventory/furnace/FurnaceInventoryTranslator.java
Patch:
@@ -28,10 +28,11 @@
 import org.cloudburstmc.protocol.bedrock.data.inventory.ContainerSlotType;
 import org.cloudburstmc.protocol.bedrock.data.inventory.ContainerType;
 import org.geysermc.geyser.inventory.BedrockContainerSlot;
+import org.geysermc.geyser.level.block.Blocks;
 
 public class FurnaceInventoryTranslator extends AbstractFurnaceInventoryTranslator {
     public FurnaceInventoryTranslator() {
-        super("minecraft:furnace[facing=north,lit=false]", ContainerType.FURNACE);
+        super(Blocks.FURNACE, ContainerType.FURNACE);
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/translator/inventory/furnace/SmokerInventoryTranslator.java
Patch:
@@ -28,10 +28,11 @@
 import org.cloudburstmc.protocol.bedrock.data.inventory.ContainerSlotType;
 import org.cloudburstmc.protocol.bedrock.data.inventory.ContainerType;
 import org.geysermc.geyser.inventory.BedrockContainerSlot;
+import org.geysermc.geyser.level.block.Blocks;
 
 public class SmokerInventoryTranslator extends AbstractFurnaceInventoryTranslator {
     public SmokerInventoryTranslator() {
-        super("minecraft:smoker[facing=north,lit=false]", ContainerType.SMOKER);
+        super(Blocks.SMOKER, ContainerType.SMOKER);
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -896,6 +896,9 @@ private void connectDownstream() {
             this.downstream.getSession().setFlag(BuiltinFlags.ATTEMPT_SRV_RESOLVE, resolveSrv);
         }
 
+        // Disable automatic creation of a new TcpClientSession when transferring - we don't use that functionality.
+        this.downstream.getSession().setFlag(MinecraftConstants.FOLLOW_TRANSFERS, false);
+
         if (geyser.getConfig().getRemote().isUseProxyProtocol()) {
             downstream.setFlag(BuiltinFlags.ENABLE_CLIENT_PROXY_PROTOCOL, true);
             downstream.setFlag(BuiltinFlags.CLIENT_PROXIED_ADDRESS, upstream.getAddress());

File: core/src/main/java/org/geysermc/geyser/erosion/GeyserboundPacketHandlerImpl.java
Patch:
@@ -30,8 +30,8 @@
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
+import it.unimi.dsi.fastutil.objects.Object2ObjectArrayMap;
 import it.unimi.dsi.fastutil.objects.Object2ObjectMap;
-import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
 import lombok.Getter;
 import lombok.Setter;
 import org.cloudburstmc.math.vector.Vector3i;
@@ -157,7 +157,7 @@ public void handlePistonEvent(GeyserboundPistonEventPacket packet) {
                 .stream()
                 .map(entry -> Pair.of(entry.getKey(), BlockState.of(entry.getIntValue())))
                 .filter(pair -> BlockStateValues.canPistonMoveBlock(pair.value(), isExtend));
-        Object2ObjectMap<Vector3i, BlockState> attachedBlocks = new Object2ObjectOpenHashMap<>();
+        Object2ObjectMap<Vector3i, BlockState> attachedBlocks = new Object2ObjectArrayMap<>();
         stream.forEach(pair -> attachedBlocks.put(pair.key(), pair.value()));
 
         session.executeInEventLoop(() -> {

File: core/src/main/java/org/geysermc/geyser/entity/EntityDefinitions.java
Patch:
@@ -235,7 +235,7 @@ public final class EntityDefinitions {
                     .addTranslator(MetadataType.BOOLEAN,
                             (enderCrystalEntity, entityMetadata) -> enderCrystalEntity.setFlag(EntityFlag.SHOW_BOTTOM, ((BooleanEntityMetadata) entityMetadata).getPrimitiveValue())) // There is a base located on the ender crystal
                     .build();
-            EXPERIENCE_ORB = EntityDefinition.<ExpOrbEntity>inherited(null, entityBase)
+            EXPERIENCE_ORB = EntityDefinition.inherited(ExpOrbEntity::new, entityBase)
                     .type(EntityType.EXPERIENCE_ORB)
                     .identifier("minecraft:xp_orb")
                     .build();
@@ -297,6 +297,7 @@ public final class EntityDefinitions {
             TNT = EntityDefinition.inherited(TNTEntity::new, entityBase)
                     .type(EntityType.TNT)
                     .heightAndWidth(0.98f)
+                    .offset(0.49f)
                     .addTranslator(MetadataType.INT, TNTEntity::setFuseLength)
                     .build();
 

File: core/src/main/java/org/geysermc/geyser/skin/SkinProvider.java
Patch:
@@ -271,17 +271,17 @@ public SkinData skinData() {
 
                             @Override
                             public void skin(@NonNull Skin newSkin) {
-                                eventSkinData.skinData(new SkinData(Objects.requireNonNull(newSkin), skinData.cape(), skinData.geometry()));
+                                eventSkinData.skinData(new SkinData(Objects.requireNonNull(newSkin), eventSkinData.skinData().cape(), eventSkinData.skinData().geometry()));
                             }
 
                             @Override
                             public void cape(@NonNull Cape newCape) {
-                                eventSkinData.skinData(new SkinData(skinData.skin(), Objects.requireNonNull(newCape), skinData.geometry()));
+                                eventSkinData.skinData(new SkinData(eventSkinData.skinData().skin(), Objects.requireNonNull(newCape), eventSkinData.skinData().geometry()));
                             }
 
                             @Override
                             public void geometry(@NonNull SkinGeometry newGeometry) {
-                                eventSkinData.skinData(new SkinData(skinData.skin(), skinData.cape(), Objects.requireNonNull(newGeometry)));
+                                eventSkinData.skinData(new SkinData(eventSkinData.skinData().skin(), eventSkinData.skinData().cape(), Objects.requireNonNull(newGeometry)));
                             }
                         });
 

File: core/src/main/java/org/geysermc/geyser/configuration/GeyserConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019-2022 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2024 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -72,8 +72,10 @@ public interface GeyserConfiguration {
 
     boolean isDebugMode();
 
+    @Deprecated
     boolean isAllowThirdPartyCapes();
 
+    @Deprecated
     boolean isAllowThirdPartyEars();
 
     String getShowCooldown();

File: core/src/main/java/org/geysermc/geyser/pack/SkullResourcePackManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019-2022 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2024 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -118,7 +118,7 @@ public static void cacheSkullSkin(String skinHash) throws IOException {
             return;
         }
 
-        BufferedImage image = SkinProvider.requestImage(skinUrl, null);
+        BufferedImage image = SkinProvider.requestImage(skinUrl, false);
         // Resize skins to 48x16 to save on space and memory
         BufferedImage skullTexture = new BufferedImage(48, 16, image.getType());
         // Reorder skin parts to fit into the space

File: core/src/main/java/org/geysermc/geyser/inventory/item/StoredItemMappings.java
Patch:
@@ -42,6 +42,7 @@
 public class StoredItemMappings {
     private final ItemMapping banner;
     private final ItemMapping barrier;
+    private final ItemMapping bow;
     private final ItemMapping compass;
     private final ItemMapping crossbow;
     private final ItemMapping egg;
@@ -57,6 +58,7 @@ public class StoredItemMappings {
     public StoredItemMappings(Map<Item, ItemMapping> itemMappings) {
         this.banner = load(itemMappings, Items.WHITE_BANNER); // As of 1.17.10, all banners have the same Bedrock ID
         this.barrier = load(itemMappings, Items.BARRIER);
+        this.bow = load(itemMappings, Items.BOW);
         this.compass = load(itemMappings, Items.COMPASS);
         this.crossbow = load(itemMappings, Items.CROSSBOW);
         this.egg = load(itemMappings, Items.EGG);

File: core/src/main/java/org/geysermc/geyser/entity/type/AreaEffectCloudEntity.java
Patch:
@@ -32,6 +32,7 @@
 import org.geysermc.geyser.entity.EntityDefinition;
 import org.geysermc.geyser.registry.Registries;
 import org.geysermc.geyser.session.GeyserSession;
+import org.geysermc.geyser.util.MathUtils;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.EntityMetadata;
 import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.type.FloatEntityMetadata;
 import org.geysermc.mcprotocollib.protocol.data.game.level.particle.EntityEffectParticleData;
@@ -52,7 +53,7 @@ protected void initializeMetadata() {
         dirtyMetadata.put(EntityDataTypes.AREA_EFFECT_CLOUD_DURATION, Integer.MAX_VALUE);
 
         // This disabled client side shrink of the cloud
-        dirtyMetadata.put(EntityDataTypes.AREA_EFFECT_CLOUD_RADIUS, 0.5f);
+        dirtyMetadata.put(EntityDataTypes.AREA_EFFECT_CLOUD_RADIUS, 3.0f);
         dirtyMetadata.put(EntityDataTypes.AREA_EFFECT_CLOUD_CHANGE_RATE, Float.MIN_VALUE);
         dirtyMetadata.put(EntityDataTypes.AREA_EFFECT_CLOUD_CHANGE_ON_PICKUP, Float.MIN_VALUE);
 
@@ -61,7 +62,7 @@ protected void initializeMetadata() {
 
     public void setRadius(FloatEntityMetadata entityMetadata) {
         // Anything less than 0.5 will cause the cloud to despawn
-        float value = Math.max(entityMetadata.getPrimitiveValue(), 0.5f);
+        float value = MathUtils.clamp(entityMetadata.getPrimitiveValue(), 0.5f, 32.0f);
         dirtyMetadata.put(EntityDataTypes.AREA_EFFECT_CLOUD_RADIUS, value);
         dirtyMetadata.put(EntityDataTypes.WIDTH, 2.0f * value);
     }

File: core/src/main/java/org/geysermc/geyser/entity/EntityDefinitions.java
Patch:
@@ -202,7 +202,6 @@ public final class EntityDefinitions {
                     .type(EntityType.AREA_EFFECT_CLOUD)
                     .height(0.5f).width(1.0f)
                     .addTranslator(MetadataType.FLOAT, AreaEffectCloudEntity::setRadius)
-                    .addTranslator(MetadataType.INT, (entity, entityMetadata) -> entity.getDirtyMetadata().put(EntityDataTypes.EFFECT_COLOR, entityMetadata.getValue()))
                     .addTranslator(null) // Waiting
                     .addTranslator(MetadataType.PARTICLE, AreaEffectCloudEntity::setParticle)
                     .build();

File: core/src/main/java/org/geysermc/geyser/item/type/PotionItem.java
Patch:
@@ -50,7 +50,7 @@ public ItemData.Builder translateToBedrock(int count, DataComponents components,
         if (potionContents != null) {
             ItemDefinition customItemDefinition = CustomItemTranslator.getCustomItem(components, mapping);
             if (customItemDefinition == null) {
-                Potion potion = Potion.VALUES[potionContents.getPotionId()];
+                Potion potion = Potion.getByJavaId(potionContents.getPotionId());
                 if (potion != null) {
                     return ItemData.builder()
                             .definition(mapping.getBedrockDefinition())

File: core/src/main/java/org/geysermc/geyser/session/cache/registry/SimpleJavaRegistry.java
Patch:
@@ -48,6 +48,7 @@ public int byValue(T value) {
 
     @Override
     public void reset(List<T> values) {
+        this.values.clear();
         this.values.addAll(values);
         this.values.trim();
     }

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/tameable/WolfEntity.java
Patch:
@@ -113,7 +113,7 @@ public void setWolfAngerTime(IntEntityMetadata entityMetadata) {
 
     // 1.20.5+
     public void setWolfVariant(IntEntityMetadata entityMetadata) {
-        WolfVariant wolfVariant = session.getRegistryCache().wolfVariants().get(entityMetadata.getPrimitiveValue());
+        WolfVariant wolfVariant = session.getRegistryCache().wolfVariants().byId(entityMetadata.getPrimitiveValue());
         if (wolfVariant == null) {
             wolfVariant = WolfVariant.PALE;
         }

File: core/src/main/java/org/geysermc/geyser/item/type/ArmorItem.java
Patch:
@@ -56,8 +56,8 @@ public void translateComponentsToBedrock(@NonNull GeyserSession session, @NonNul
                 return;
             }
 
-            TrimMaterial material = session.getRegistryCache().trimMaterials().get(trim.material().id());
-            TrimPattern pattern = session.getRegistryCache().trimPatterns().get(trim.pattern().id());
+            TrimMaterial material = session.getRegistryCache().trimMaterials().byId(trim.material().id());
+            TrimPattern pattern = session.getRegistryCache().trimPatterns().byId(trim.pattern().id());
 
             NbtMapBuilder trimBuilder = NbtMap.builder();
             // bedrock has an uppercase first letter key, and the value is not namespaced

File: core/src/main/java/org/geysermc/geyser/translator/text/MessageTranslator.java
Patch:
@@ -330,7 +330,7 @@ public static void handleChatPacket(GeyserSession session, Component message, in
 
         textPacket.setNeedsTranslation(false);
 
-        TextDecoration decoration = session.getRegistryCache().chatTypes().get(chatType);
+        TextDecoration decoration = session.getRegistryCache().chatTypes().byId(chatType);
         if (decoration != null) {
             // As of 1.19 - do this to apply all the styling for signed messages
             // Though, Bedrock cannot care about the signed stuff.

File: core/src/main/java/org/geysermc/geyser/util/ChunkUtils.java
Patch:
@@ -280,7 +280,7 @@ public static void sendEmptyChunks(GeyserSession session, Vector3i position, int
      * This must be done after the player has switched dimensions so we know what their dimension is
      */
     public static void loadDimension(GeyserSession session) {
-        JavaDimension dimension = session.getRegistryCache().dimensions().get(session.getDimension());
+        JavaDimension dimension = session.getRegistryCache().dimensions().byId(session.getDimension());
         session.setDimensionType(dimension);
         int minY = dimension.minY();
         int maxY = dimension.maxY();

File: core/src/main/java/org/geysermc/geyser/inventory/AnvilContainer.java
Patch:
@@ -85,7 +85,7 @@ public String checkForRename(GeyserSession session, String rename) {
             session.sendDownstreamGamePacket(renameItemPacket);
         } else {
             // Restore formatting for item since we're not renaming
-            correctRename = MessageTranslator.convertMessage(originalName, session.locale());
+            correctRename = originalName != null ? MessageTranslator.convertMessage(originalName, session.locale()) : "";
             // Java Edition sends the original custom name when not renaming,
             // if there isn't a custom name an empty string is sent
             ServerboundRenameItemPacket renameItemPacket = new ServerboundRenameItemPacket(plainOriginalName);

File: core/src/main/java/org/geysermc/geyser/inventory/updater/AnvilInventoryUpdater.java
Patch:
@@ -387,7 +387,7 @@ private Object2IntMap<JavaEnchantment> getEnchantments(GeyserItemStack itemStack
             }
             return enchantments;
         }
-        return Object2IntMaps.emptyMap();
+        return new Object2IntOpenHashMap<>();
     }
 
     private boolean isEnchantedBook(GeyserItemStack itemStack) {

File: core/src/main/java/org/geysermc/geyser/translator/level/block/entity/BannerBlockEntityTranslator.java
Patch:
@@ -25,6 +25,7 @@
 
 package org.geysermc.geyser.translator.level.block.entity;
 
+import org.checkerframework.checker.nullness.qual.Nullable;
 import org.cloudburstmc.nbt.NbtMap;
 import org.cloudburstmc.nbt.NbtMapBuilder;
 import org.cloudburstmc.nbt.NbtType;
@@ -38,7 +39,7 @@
 @BlockEntity(type = BlockEntityType.BANNER)
 public class BannerBlockEntityTranslator extends BlockEntityTranslator implements RequiresBlockState {
     @Override
-    public void translateTag(GeyserSession session, NbtMapBuilder bedrockNbt, NbtMap javaNbt, int blockState) {
+    public void translateTag(GeyserSession session, NbtMapBuilder bedrockNbt, @Nullable NbtMap javaNbt, int blockState) {
         int bannerColor = BlockStateValues.getBannerColor(blockState);
         if (bannerColor != -1) {
             bedrockNbt.putInt("Base", 15 - bannerColor);

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/player/JavaCookieRequestTranslator.java
Patch:
@@ -33,6 +33,7 @@
 
 @Translator(packet = ClientboundCookieRequestPacket.class)
 public class JavaCookieRequestTranslator extends PacketTranslator<ClientboundCookieRequestPacket> {
+
     @Override
     public void translate(GeyserSession session, ClientboundCookieRequestPacket packet) {
         ServerboundCookieResponsePacket responsePacket = new ServerboundCookieResponsePacket(

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/player/JavaStoreCookieTranslator.java
Patch:
@@ -32,6 +32,7 @@
 
 @Translator(packet = ClientboundStoreCookiePacket.class)
 public class JavaStoreCookieTranslator extends PacketTranslator<ClientboundStoreCookiePacket> {
+
     @Override
     public void translate(GeyserSession session, ClientboundStoreCookiePacket packet) {
         session.getCookies().put(packet.getKey(), packet.getPayload());

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/player/JavaTransferPacketTranslator.java
Patch:
@@ -35,6 +35,7 @@
 
 @Translator(packet = ClientboundTransferPacket.class)
 public class JavaTransferPacketTranslator extends PacketTranslator<ClientboundTransferPacket> {
+
     @Override
     public void translate(GeyserSession session, ClientboundTransferPacket packet) {
         ServerTransferEvent event = new ServerTransferEvent(

File: core/src/main/java/org/geysermc/geyser/registry/type/ItemMappings.java
Patch:
@@ -148,9 +148,10 @@ public ItemMapping getMapping(ItemData data) {
                     }
                 } else {
                     if (!(mapping.getBedrockData() == data.getDamage() ||
-                            // Make exceptions for potions, tipped arrows, firework stars, and goat horns, whose damage values can vary
+                            // Make exceptions for potions, tipped arrows, firework stars, goat horns, and suspicious stews, whose damage values can vary
                             (mapping.getJavaItem() instanceof PotionItem || mapping.getJavaItem() == Items.ARROW
-                                    || mapping.getJavaItem() == Items.FIREWORK_STAR || mapping.getJavaItem() == Items.GOAT_HORN))) {
+                                    || mapping.getJavaItem() == Items.FIREWORK_STAR || mapping.getJavaItem() == Items.GOAT_HORN
+                                    || mapping.getJavaItem() == Items.SUSPICIOUS_STEW))) {
                         continue;
                     }
                 }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaBlockEntityDataTranslator.java
Patch:
@@ -71,7 +71,7 @@ public void translate(GeyserSession session, ClientboundBlockEntityDataPacket pa
                 packet.getNbt(), blockState), packet.getPosition());
         // Check for custom skulls.
         boolean hasCustomHeadBlock = false;
-        if (session.getPreferencesCache().showCustomSkulls() && packet.getNbt() != null && packet.getNbt().contains("SkullOwner")) {
+        if (session.getPreferencesCache().showCustomSkulls() && packet.getNbt() != null && packet.getNbt().contains("profile")) {
             BlockDefinition blockDefinition = SkullBlockEntityTranslator.translateSkull(session, packet.getNbt(), position, blockState);
             if (blockDefinition != null) {
                 hasCustomHeadBlock = true;

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaLevelChunkWithLightTranslator.java
Patch:
@@ -422,8 +422,7 @@ public void translate(GeyserSession session, ClientboundLevelChunkWithLightPacke
                 }
 
                 // Check for custom skulls
-                // TODO: The tag layout follows new format (profille, etc...)
-                if (session.getPreferencesCache().showCustomSkulls() && type == BlockEntityType.SKULL && tag != null && tag.contains("SkullOwner")) {
+                if (session.getPreferencesCache().showCustomSkulls() && type == BlockEntityType.SKULL && tag != null && tag.contains("profile")) {
                     BlockDefinition blockDefinition = SkullBlockEntityTranslator.translateSkull(session, tag, Vector3i.from(x + chunkBlockX, y, z + chunkBlockZ), blockState);
                     if (blockDefinition != null) {
                         int bedrockSectionY = (y >> 4) - (bedrockDimension.minY() >> 4);

File: core/src/main/java/org/geysermc/geyser/item/type/ShulkerBoxItem.java
Patch:
@@ -59,7 +59,7 @@ public void translateComponentsToBedrock(@NonNull GeyserSession session, @NonNul
         List<NbtMap> itemsList = new ArrayList<>();
         for (int slot = 0; slot < contents.size(); slot++) {
             ItemStack item = contents.get(slot);
-            if (item.getId() == Items.AIR_ID) {
+            if (item == null || item.getId() == Items.AIR_ID) {
                 continue;
             }
             ItemMapping boxMapping = session.getItemMappings().getMapping(item.getId());

File: core/src/main/java/org/geysermc/geyser/entity/EntityDefinitions.java
Patch:
@@ -938,7 +938,6 @@ public final class EntityDefinitions {
                     .type(EntityType.LLAMA)
                     .height(1.87f).width(0.9f)
                     .addTranslator(MetadataType.INT, (entity, entityMetadata) -> entity.getDirtyMetadata().put(EntityDataTypes.STRENGTH, entityMetadata.getValue()))
-                    .addTranslator(MetadataType.INT, LlamaEntity::setCarpetedColor)
                     .addTranslator(MetadataType.INT, (entity, entityMetadata) -> entity.getDirtyMetadata().put(EntityDataTypes.VARIANT, entityMetadata.getValue()))
                     .build();
             TRADER_LLAMA = EntityDefinition.inherited(TraderLlamaEntity::new, LLAMA)

File: core/src/main/java/org/geysermc/geyser/registry/type/ItemMappings.java
Patch:
@@ -69,7 +69,6 @@ public class ItemMappings implements DefinitionRegistry<ItemDefinition> {
 
     List<ItemDefinition> buckets;
     List<ItemDefinition> boats;
-    List<ItemData> carpets;
 
     List<ComponentItemData> componentItemData;
     Int2ObjectMap<String> customIdMappings;

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/JavaSetEquipmentTranslator.java
Patch:
@@ -74,7 +74,8 @@ public void translate(GeyserSession session, ClientboundSetEquipmentPacket packe
                     livingEntity.setHelmet(item);
                     armorUpdated = true;
                 }
-                case CHESTPLATE -> {
+                case CHESTPLATE, BODY -> {
+                    // BODY is sent for llamas with a carpet equipped, as of 1.20.5
                     livingEntity.setChestplate(item);
                     armorUpdated = true;
                 }

File: bootstrap/mod/src/main/java/org/geysermc/geyser/platform/mod/ModPingPassthrough.java
Patch:
@@ -29,6 +29,7 @@
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+import net.minecraft.core.RegistryAccess;
 import net.minecraft.network.Connection;
 import net.minecraft.network.PacketSendListener;
 import net.minecraft.network.protocol.Packet;
@@ -69,7 +70,7 @@ public GeyserPingInfo getPingInformation(InetSocketAddress inetSocketAddress) {
             StatusInterceptor connection = new StatusInterceptor();
             ServerStatusPacketListener statusPacketListener = new ServerStatusPacketListenerImpl(status, connection);
 
-            statusPacketListener.handleStatusRequest(new ServerboundStatusRequestPacket());
+            statusPacketListener.handleStatusRequest(ServerboundStatusRequestPacket.INSTANCE);
             // mods like MiniMOTD (that inject into the above method) have now processed the response
             status = Objects.requireNonNull(connection.status, "status response");
         } catch (Exception e) {
@@ -79,7 +80,7 @@ public GeyserPingInfo getPingInformation(InetSocketAddress inetSocketAddress) {
             }
         }
 
-        String jsonDescription = net.minecraft.network.chat.Component.Serializer.toJson(status.description());
+        String jsonDescription = net.minecraft.network.chat.Component.Serializer.toJson(status.description(), RegistryAccess.EMPTY);
         String legacyDescription = LEGACY_SERIALIZER.serialize(GSON_SERIALIZER.deserializeOr(jsonDescription, Component.empty()));
 
         return new GeyserPingInfo(

File: bootstrap/mod/src/main/java/org/geysermc/geyser/platform/mod/command/ModCommandSender.java
Patch:
@@ -27,6 +27,7 @@
 
 import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
 import net.minecraft.commands.CommandSourceStack;
+import net.minecraft.core.RegistryAccess;
 import net.minecraft.network.chat.Component;
 import net.minecraft.server.level.ServerPlayer;
 import org.checkerframework.checker.nullness.qual.NonNull;
@@ -63,7 +64,7 @@ public void sendMessage(@NonNull String message) {
     public void sendMessage(net.kyori.adventure.text.Component message) {
         if (source.getEntity() instanceof ServerPlayer player) {
             String decoded = GsonComponentSerializer.gson().serialize(message);
-            player.displayClientMessage(Objects.requireNonNull(Component.Serializer.fromJson(decoded)), false);
+            player.displayClientMessage(Objects.requireNonNull(Component.Serializer.fromJson(decoded, RegistryAccess.EMPTY)), false);
             return;
         }
         GeyserCommandSource.super.sendMessage(message);

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaBlockDestructionTranslator.java
Patch:
@@ -26,7 +26,6 @@
 package org.geysermc.geyser.translator.protocol.java.level;
 
 import com.github.steveice10.mc.protocol.packet.ingame.clientbound.level.ClientboundBlockDestructionPacket;
-import com.github.steveice10.opennbt.tag.builtin.CompoundTag;
 import org.cloudburstmc.protocol.bedrock.data.LevelEvent;
 import org.cloudburstmc.protocol.bedrock.packet.LevelEventPacket;
 import org.geysermc.geyser.registry.BlockRegistries;
@@ -43,7 +42,7 @@ public class JavaBlockDestructionTranslator extends PacketTranslator<Clientbound
     @Override
     public void translate(GeyserSession session, ClientboundBlockDestructionPacket packet) {
         int state = session.getGeyser().getWorldManager().getBlockAt(session, packet.getPosition().getX(), packet.getPosition().getY(), packet.getPosition().getZ());
-        int breakTime = (int) (65535 / Math.ceil(BlockUtils.getBreakTime(session, BlockRegistries.JAVA_BLOCKS.getOrDefault(state, BlockMapping.DEFAULT), ItemMapping.AIR, new CompoundTag(""), false) * 20));
+        int breakTime = (int) (65535 / Math.ceil(BlockUtils.getBreakTime(session, BlockRegistries.JAVA_BLOCKS.getOrDefault(state, BlockMapping.DEFAULT), ItemMapping.AIR, null, false) * 20));
         LevelEventPacket levelEventPacket = new LevelEventPacket();
         levelEventPacket.setPosition(packet.getPosition().toFloat());
         levelEventPacket.setType(LevelEvent.BLOCK_START_BREAK);

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/BedrockBookEditTranslator.java
Patch:
@@ -104,6 +104,9 @@ public void translate(GeyserSession session, BookEditPacket packet) {
                     }
                     break;
                 }
+                case SIGN_BOOK: {
+                    break;
+                }
                 default:
                     return;
             }

File: core/src/main/java/org/geysermc/geyser/entity/type/LivingEntity.java
Patch:
@@ -299,7 +299,7 @@ protected void updateAttribute(Attribute javaAttribute, List<AttributeData> newA
                 case GENERIC_MOVEMENT_SPEED -> newAttributes.add(calculateAttribute(javaAttribute, GeyserAttributeType.MOVEMENT_SPEED));
                 case GENERIC_FOLLOW_RANGE -> newAttributes.add(calculateAttribute(javaAttribute, GeyserAttributeType.FOLLOW_RANGE));
                 case GENERIC_KNOCKBACK_RESISTANCE -> newAttributes.add(calculateAttribute(javaAttribute, GeyserAttributeType.KNOCKBACK_RESISTANCE));
-                case HORSE_JUMP_STRENGTH -> newAttributes.add(calculateAttribute(javaAttribute, GeyserAttributeType.HORSE_JUMP_STRENGTH));
+                case GENERIC_JUMP_STRENGTH -> newAttributes.add(calculateAttribute(javaAttribute, GeyserAttributeType.HORSE_JUMP_STRENGTH));
             }
         }
     }

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/AxolotlEntity.java
Patch:
@@ -61,7 +61,7 @@ public void setPlayingDead(BooleanEntityMetadata entityMetadata) {
 
     @Override
     public boolean canEat(Item item) {
-        return session.getTagCache().isAxolotlTemptItem(item);
+        return session.getTagCache().isAxolotlFood(item);
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -368,7 +368,7 @@ public class GeyserSession implements GeyserConnection, GeyserCommandSource {
     /**
      * All dimensions that the client could possibly connect to.
      */
-    private final Map<String, JavaDimension> dimensions = new Object2ObjectOpenHashMap<>(3);
+    private final Int2ObjectMap<JavaDimension> dimensions = new Int2ObjectOpenHashMap<>(4);
 
     private final Int2ObjectMap<TextDecoration> chatTypes = new Int2ObjectOpenHashMap<>(7);
 

File: core/src/main/java/org/geysermc/geyser/inventory/updater/AnvilInventoryUpdater.java
Patch:
@@ -350,7 +350,7 @@ private int calcMergeEnchantmentCost(GeyserSession session, GeyserItemStack inpu
                     if (enchantment == JavaEnchantment.IMPALING) {
                         // Multiplier is halved on Bedrock for some reason
                         rarityMultiplier /= 2;
-                    } else if (enchantment == JavaEnchantment.SWEEPING) {
+                    } else if (enchantment == JavaEnchantment.SWEEPING_EDGE) {
                         // Doesn't exist on Bedrock
                         rarityMultiplier = 0;
                     }

File: core/src/main/java/org/geysermc/geyser/network/netty/LocalSession.java
Patch:
@@ -79,7 +79,7 @@ public void connect(boolean wait) {
                 public void initChannel(@NonNull LocalChannelWithRemoteAddress channel) {
                     channel.spoofedRemoteAddress(new InetSocketAddress(clientIp, 0));
                     PacketProtocol protocol = getPacketProtocol();
-                    protocol.newClientSession(LocalSession.this);
+                    protocol.newClientSession(LocalSession.this, false);
 
                     refreshReadTimeoutHandler(channel);
                     refreshWriteTimeoutHandler(channel);

File: core/src/main/java/org/geysermc/geyser/registry/populator/Conversion649_630.java
Patch:
@@ -37,9 +37,11 @@ static GeyserMappingItem remapItem(@SuppressWarnings("unused") Item item, Geyser
             String identifer = mapping.getBedrockIdentifier();
 
             switch (identifer) {
-                case "minecraft:turtle_scute" -> { return mapping.withBedrockIdentifier("minecraft:scute"); }
+                case "minecraft:armadillo_scute", "minecraft:turtle_scute" -> { return mapping.withBedrockIdentifier("minecraft:scute"); }
+                case "minecraft:armadillo_spawn_egg" -> { return mapping.withBedrockIdentifier("minecraft:rabbit_spawn_egg"); }
                 case "minecraft:trial_spawner" -> { return mapping.withBedrockIdentifier("minecraft:mob_spawner"); }
                 case "minecraft:trial_key" -> { return mapping.withBedrockIdentifier("minecraft:echo_shard"); }
+                case "minecraft:wolf_armor" -> { return mapping.withBedrockIdentifier("minecraft:leather_horse_armor"); }
                 default -> { return mapping; }
             }
         }

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -45,6 +45,7 @@
 import com.github.steveice10.mc.protocol.packet.common.serverbound.ServerboundClientInformationPacket;
 import com.github.steveice10.mc.protocol.packet.handshake.serverbound.ClientIntentionPacket;
 import com.github.steveice10.mc.protocol.packet.ingame.serverbound.ServerboundChatCommandPacket;
+import com.github.steveice10.mc.protocol.packet.ingame.serverbound.ServerboundChatCommandSignedPacket;
 import com.github.steveice10.mc.protocol.packet.ingame.serverbound.ServerboundChatPacket;
 import com.github.steveice10.mc.protocol.packet.ingame.serverbound.player.ServerboundMovePlayerPosPacket;
 import com.github.steveice10.mc.protocol.packet.ingame.serverbound.player.ServerboundPlayerAbilitiesPacket;
@@ -360,7 +361,7 @@ public class GeyserSession implements GeyserConnection, GeyserCommandSource {
      * As all entities are in the same world, this can be safely applied to all other entities.
      */
     @Setter
-    private String dimension = DimensionUtils.OVERWORLD;
+    private int dimension = DimensionUtils.OVERWORLD;
     @MonotonicNonNull
     @Setter
     private JavaDimension dimensionType = null;
@@ -1464,7 +1465,7 @@ public void sendChat(String message) {
      * Sends a command to the Java server.
      */
     public void sendCommand(String command) {
-        sendDownstreamGamePacket(new ServerboundChatCommandPacket(command, Instant.now().toEpochMilli(), 0L, Collections.emptyList(), 0, new BitSet()));
+        sendDownstreamGamePacket(new ServerboundChatCommandSignedPacket(command, Instant.now().toEpochMilli(), 0L, Collections.emptyList(), 0, new BitSet()));
     }
 
     public void setServerRenderDistance(int renderDistance) {

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaCommandsTranslator.java
Patch:
@@ -60,7 +60,7 @@
 public class JavaCommandsTranslator extends PacketTranslator<ClientboundCommandsPacket> {
 
     private static final String[] ALL_EFFECT_IDENTIFIERS = EntityUtils.getAllEffectIdentifiers();
-    private static final String[] ATTRIBUTES = AttributeType.Builtin.BUILTIN.keySet().toArray(new String[0]);
+    private static final String[] ATTRIBUTES = AttributeType.Builtin.BUILTIN.values().stream().map(AttributeType::getIdentifier).toList().toArray(new String[0]);
     private static final String[] ENUM_BOOLEAN = {"true", "false"};
     private static final String[] VALID_COLORS;
     private static final String[] VALID_SCOREBOARD_SLOTS;

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaRespawnTranslator.java
Patch:
@@ -92,11 +92,11 @@ public void translate(GeyserSession session, ClientboundRespawnPacket packet) {
             session.setThunder(false);
         }
 
-        String newDimension = spawnInfo.getDimension();
-        if (!session.getDimension().equals(newDimension) || !spawnInfo.getWorldName().equals(session.getWorldName())) {
+        int newDimension = spawnInfo.getDimension();
+        if (session.getDimension() != newDimension || !spawnInfo.getWorldName().equals(session.getWorldName())) {
             // Switching to a new world (based off the world name change or new dimension); send a fake dimension change
             if (DimensionUtils.javaToBedrock(session.getDimension()) == DimensionUtils.javaToBedrock(newDimension)) {
-                String fakeDim = DimensionUtils.getTemporaryDimension(session.getDimension(), newDimension);
+                int fakeDim = DimensionUtils.getTemporaryDimension(session.getDimension(), newDimension);
                 DimensionUtils.switchDimension(session, fakeDim);
             }
             session.setWorldName(spawnInfo.getWorldName());

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaLevelParticlesTranslator.java
Patch:
@@ -28,7 +28,6 @@
 import com.github.steveice10.mc.protocol.data.game.item.ItemStack;
 import com.github.steveice10.mc.protocol.data.game.level.particle.BlockParticleData;
 import com.github.steveice10.mc.protocol.data.game.level.particle.DustParticleData;
-import com.github.steveice10.mc.protocol.data.game.level.particle.FallingDustParticleData;
 import com.github.steveice10.mc.protocol.data.game.level.particle.ItemParticleData;
 import com.github.steveice10.mc.protocol.data.game.level.particle.Particle;
 import com.github.steveice10.mc.protocol.data.game.level.particle.VibrationParticleData;
@@ -106,7 +105,7 @@ public void translate(GeyserSession session, ClientboundLevelParticlesPacket pac
                 };
             }
             case FALLING_DUST -> {
-                int blockState = session.getBlockMappings().getBedrockBlockId(((FallingDustParticleData) particle.getData()).getBlockState());
+                int blockState = session.getBlockMappings().getBedrockBlockId(((BlockParticleData) particle.getData()).getBlockState());
                 return (position) -> {
                     LevelEventPacket packet = new LevelEventPacket();
                     // In fact, FallingDustParticle should have data like DustParticle,

File: core/src/main/java/org/geysermc/geyser/util/AttributeUtils.java
Patch:
@@ -45,12 +45,12 @@ public static double calculateValue(Attribute attribute) {
         }
         double value = base;
         for (AttributeModifier modifier : attribute.getModifiers()) {
-            if (modifier.getOperation() == ModifierOperation.ADD_MULTIPLIED) {
+            if (modifier.getOperation() == ModifierOperation.ADD_MULTIPLIED_BASE) {
                 value += base * modifier.getAmount();
             }
         }
         for (AttributeModifier modifier : attribute.getModifiers()) {
-            if (modifier.getOperation() == ModifierOperation.MULTIPLY) {
+            if (modifier.getOperation() == ModifierOperation.ADD_MULTIPLIED_TOTAL) {
                 value *= 1.0D + modifier.getAmount();
             }
         }

File: core/src/main/java/org/geysermc/geyser/registry/populator/BlockRegistryPopulator.java
Patch:
@@ -43,6 +43,7 @@
 import org.cloudburstmc.protocol.bedrock.codec.v630.Bedrock_v630;
 import org.cloudburstmc.protocol.bedrock.codec.v649.Bedrock_v649;
 import org.cloudburstmc.protocol.bedrock.codec.v662.Bedrock_v662;
+import org.cloudburstmc.protocol.bedrock.codec.v671.Bedrock_v671;
 import org.cloudburstmc.protocol.bedrock.data.BlockPropertyData;
 import org.cloudburstmc.protocol.bedrock.data.definitions.BlockDefinition;
 import org.geysermc.geyser.GeyserImpl;
@@ -122,7 +123,8 @@ private static void registerBedrockBlocks() {
                 .put(ObjectIntPair.of("1_20_50", Bedrock_v630.CODEC.getProtocolVersion()), Conversion649_630::remapBlock)
                 // Only changes in 1.20.60 are hard_stained_glass (an EDU only block)
                 .put(ObjectIntPair.of("1_20_60", Bedrock_v649.CODEC.getProtocolVersion()), Conversion662_649::remapBlock)
-                .put(ObjectIntPair.of("1_20_70", Bedrock_v662.CODEC.getProtocolVersion()), tag -> tag)
+                .put(ObjectIntPair.of("1_20_70", Bedrock_v662.CODEC.getProtocolVersion()), Conversion671_662::remapBlock)
+                .put(ObjectIntPair.of("1_20_80", Bedrock_v671.CODEC.getProtocolVersion()), tag -> tag)
                 .build();
 
         // We can keep this strong as nothing should be garbage collected

File: core/src/main/java/org/geysermc/geyser/registry/populator/ItemRegistryPopulator.java
Patch:
@@ -42,6 +42,7 @@
 import org.cloudburstmc.protocol.bedrock.codec.v630.Bedrock_v630;
 import org.cloudburstmc.protocol.bedrock.codec.v649.Bedrock_v649;
 import org.cloudburstmc.protocol.bedrock.codec.v662.Bedrock_v662;
+import org.cloudburstmc.protocol.bedrock.codec.v671.Bedrock_v671;
 import org.cloudburstmc.protocol.bedrock.data.SoundEvent;
 import org.cloudburstmc.protocol.bedrock.data.definitions.BlockDefinition;
 import org.cloudburstmc.protocol.bedrock.data.definitions.ItemDefinition;
@@ -93,7 +94,8 @@ public static void populate() {
         paletteVersions.add(new PaletteVersion("1_20_40", Bedrock_v622.CODEC.getProtocolVersion(), Collections.emptyMap(), Conversion630_622::remapItem));
         paletteVersions.add(new PaletteVersion("1_20_50", Bedrock_v630.CODEC.getProtocolVersion(), Collections.emptyMap(), Conversion649_630::remapItem));
         paletteVersions.add(new PaletteVersion("1_20_60", Bedrock_v649.CODEC.getProtocolVersion(), Collections.emptyMap(), Conversion662_649::remapItem));
-        paletteVersions.add(new PaletteVersion("1_20_70", Bedrock_v662.CODEC.getProtocolVersion()));
+        paletteVersions.add(new PaletteVersion("1_20_70", Bedrock_v662.CODEC.getProtocolVersion(), Collections.emptyMap(), Conversion671_662::remapItem));
+        paletteVersions.add(new PaletteVersion("1_20_80", Bedrock_v671.CODEC.getProtocolVersion()));
 
         GeyserBootstrap bootstrap = GeyserImpl.getInstance().getBootstrap();
 

File: core/src/main/java/org/geysermc/geyser/registry/populator/RecipeRegistryPopulator.java
Patch:
@@ -173,7 +173,7 @@ private static RecipeData getCraftingDataFromJsonNode(JsonNode node, Int2ObjectM
             /* Convert end */
 
             return ShapedRecipeData.shaped(uuid.toString(), shape.get(0).length(), shape.size(),
-                    inputs.stream().map(ItemDescriptorWithCount::fromItem).toList(), Collections.singletonList(output), uuid, "crafting_table", 0, netId);
+                    inputs.stream().map(ItemDescriptorWithCount::fromItem).toList(), Collections.singletonList(output), uuid, "crafting_table", 0, netId, false);
         }
         List<ItemData> inputs = new ObjectArrayList<>();
         for (JsonNode entry : node.get("inputs")) {

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaUpdateRecipesTranslator.java
Patch:
@@ -162,7 +162,7 @@ public void translate(GeyserSession session, ClientboundUpdateRecipesPacket pack
                         bedrockRecipeIDs.add(uuid.toString());
                         craftingDataPacket.getCraftingData().add(org.cloudburstmc.protocol.bedrock.data.inventory.crafting.recipe.ShapedRecipeData.shaped(uuid.toString(),
                                 shapedRecipeData.getWidth(), shapedRecipeData.getHeight(), Arrays.asList(inputs),
-                                Collections.singletonList(output), uuid, "crafting_table", 0, netId));
+                                Collections.singletonList(output), uuid, "crafting_table", 0, netId, false));
                         recipeMap.put(netId++, new GeyserShapedRecipe(shapedRecipeData));
                     }
                     addRecipeIdentifier(session, recipe.getIdentifier(), bedrockRecipeIDs);

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/inventory/JavaContainerSetSlotTranslator.java
Patch:
@@ -193,7 +193,8 @@ private static void updateCraftingGrid(GeyserSession session, int slot, ItemStac
                     uuid,
                     "crafting_table",
                     0,
-                    newRecipeId
+                    newRecipeId,
+                    false
             ));
             craftPacket.setCleanRecipes(false);
             session.sendUpstreamPacket(craftPacket);

File: core/src/main/java/org/geysermc/geyser/level/block/BlockStateValues.java
Patch:
@@ -260,15 +260,15 @@ public static int getBrushProgress(int state) {
     }
 
     /**
-     * Non-water cauldrons (since Bedrock 1.18.30) must have a block entity packet sent on chunk load to fix rendering issues.
-     *
      * @return if this Java block state is a non-empty non-water cauldron
      */
     public static boolean isNonWaterCauldron(int state) {
         return NON_WATER_CAULDRONS.contains(state);
     }
 
     /**
+     * Cauldrons (since Bedrock 1.18.30) must have a block entity packet sent on chunk load to fix rendering issues.
+     * <p>
      * When using a bucket on a cauldron sending a ServerboundUseItemPacket can result in the liquid being placed.
      *
      * @return if this Java block state is a cauldron

File: core/src/main/java/org/geysermc/geyser/translator/level/block/entity/BedrockOnlyBlockEntity.java
Patch:
@@ -63,7 +63,7 @@ public interface BedrockOnlyBlockEntity extends RequiresBlockState {
             return FlowerPotBlockEntityTranslator.getTag(session, blockState, position);
         } else if (PistonBlockEntityTranslator.isBlock(blockState)) {
             return PistonBlockEntityTranslator.getTag(blockState, position);
-        } else if (BlockStateValues.isNonWaterCauldron(blockState)) {
+        } else if (BlockStateValues.isCauldron(blockState)) {
             // As of 1.18.30: this is required to make rendering not look weird on chunk load (lava and snow cauldrons look dim)
             return NbtMap.builder()
                     .putString("id", "Cauldron")

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaLevelChunkWithLightTranslator.java
Patch:
@@ -200,7 +200,7 @@ public void translate(GeyserSession session, ClientboundLevelChunkWithLightPacke
                         }
 
                         // Check if block is piston or flower to see if we'll need to create additional block entities, as they're only block entities in Bedrock
-                        if (BlockStateValues.getFlowerPotValues().containsKey(javaId) || BlockStateValues.getPistonValues().containsKey(javaId) || BlockStateValues.isNonWaterCauldron(javaId)) {
+                        if (BlockStateValues.getFlowerPotValues().containsKey(javaId) || BlockStateValues.getPistonValues().containsKey(javaId) || BlockStateValues.isCauldron(javaId)) {
                             bedrockBlockEntities.add(BedrockOnlyBlockEntity.getTag(session,
                                     Vector3i.from((packet.getX() << 4) + (yzx & 0xF), ((sectionY + yOffset) << 4) + ((yzx >> 8) & 0xF), (packet.getZ() << 4) + ((yzx >> 4) & 0xF)),
                                     javaId
@@ -259,7 +259,7 @@ public void translate(GeyserSession session, ClientboundLevelChunkWithLightPacke
                     }
 
                     // Check if block is piston, flower or cauldron to see if we'll need to create additional block entities, as they're only block entities in Bedrock
-                    if (BlockStateValues.getFlowerPotValues().containsKey(javaId) || BlockStateValues.getPistonValues().containsKey(javaId) || BlockStateValues.isNonWaterCauldron(javaId)) {
+                    if (BlockStateValues.getFlowerPotValues().containsKey(javaId) || BlockStateValues.getPistonValues().containsKey(javaId) || BlockStateValues.isCauldron(javaId)) {
                         bedrockOnlyBlockEntityIds.set(i);
                     }
                 }

File: core/src/main/java/org/geysermc/geyser/scoreboard/Scoreboard.java
Patch:
@@ -240,7 +240,7 @@ private void handleObjective(Objective objective, List<ScoreInfo> addScores, Lis
                 boolean update = score.shouldUpdate();
 
                 if (update) {
-                    score.update(objective.getObjectiveName());
+                    score.update(objective);
                 }
 
                 if (score.getUpdateType() != REMOVE && update) {
@@ -281,7 +281,7 @@ private void handleObjective(Objective objective, List<ScoreInfo> addScores, Lis
             }
 
             if (score.shouldUpdate()) {
-                score.update(objective.getObjectiveName());
+                score.update(objective);
                 add = true;
             }
 

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/scoreboard/JavaResetScorePacket.java
Patch:
@@ -54,7 +54,7 @@ public void translate(GeyserSession session, ClientboundResetScorePacket packet)
 
             // as described below
             if (belowName != null) {
-                JavaSetScoreTranslator.setBelowName(session, belowName, packet.getOwner(), 0);
+                JavaSetScoreTranslator.setBelowName(session, belowName, packet.getOwner());
             }
         } else {
             Objective objective = scoreboard.getObjective(packet.getObjective());
@@ -64,7 +64,7 @@ public void translate(GeyserSession session, ClientboundResetScorePacket packet)
             // attached to this score.
             if (objective == belowName) {
                 // Update the score on this player to now reflect 0
-                JavaSetScoreTranslator.setBelowName(session, objective, packet.getOwner(), 0);
+                JavaSetScoreTranslator.setBelowName(session, objective, packet.getOwner());
             }
         }
 

File: core/src/main/java/org/geysermc/geyser/entity/type/player/PlayerEntity.java
Patch:
@@ -55,6 +55,7 @@
 import org.cloudburstmc.protocol.bedrock.packet.UpdateAttributesPacket;
 import org.geysermc.geyser.api.entity.type.player.GeyserPlayerEntity;
 import org.geysermc.geyser.entity.EntityDefinitions;
+import org.geysermc.geyser.entity.attribute.GeyserAttributeType;
 import org.geysermc.geyser.entity.type.Entity;
 import org.geysermc.geyser.entity.type.LivingEntity;
 import org.geysermc.geyser.entity.type.living.animal.tameable.ParrotEntity;
@@ -283,7 +284,7 @@ public void setAbsorptionHearts(FloatEntityMetadata entityMetadata) {
         attributesPacket.setRuntimeEntityId(geyserId);
         // Setting to a higher maximum since plugins/datapacks can probably extend the Bedrock soft limit
         attributesPacket.setAttributes(Collections.singletonList(
-                new AttributeData("minecraft:absorption", 0.0f, 1024f, entityMetadata.getPrimitiveValue(), 0.0f)));
+                GeyserAttributeType.ABSORPTION.getAttribute(entityMetadata.getPrimitiveValue())));
         session.sendUpstreamPacket(attributesPacket);
     }
 
@@ -307,7 +308,7 @@ public void setRightParrot(EntityMetadata<CompoundTag, ?> entityMetadata) {
      * Sets the parrot occupying the shoulder. Bedrock Edition requires a full entity whereas Java Edition just
      * spawns it from the NBT data provided
      */
-    private void setParrot(CompoundTag tag, boolean isLeft) {
+    protected void setParrot(CompoundTag tag, boolean isLeft) {
         if (tag != null && !tag.isEmpty()) {
             if ((isLeft && leftParrot != null) || (!isLeft && rightParrot != null)) {
                 // No need to update a parrot's data when it already exists

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -712,7 +712,7 @@ public void connect() {
         // Default move speed
         // Bedrock clients move very fast by default until they get an attribute packet correcting the speed
         attributesPacket.setAttributes(Collections.singletonList(
-                new AttributeData("minecraft:movement", 0.0f, 1024f, 0.1f, 0.1f)));
+                GeyserAttributeType.MOVEMENT_SPEED.getAttribute()));
         upstream.sendPacket(attributesPacket);
 
         GameRulesChangedPacket gamerulePacket = new GameRulesChangedPacket();

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaLoginTranslator.java
Patch:
@@ -71,7 +71,7 @@ public void translate(GeyserSession session, ClientboundLoginPacket packet) {
             // Remove all bossbars
             session.getEntityCache().removeAllBossBars();
             // Remove extra hearts, hunger, etc.
-            entity.getAttributes().clear();
+            entity.resetAttributes();
             entity.resetMetadata();
 
             // Reset weather

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -214,6 +214,7 @@ public class GeyserSession implements GeyserConnection, GeyserCommandSource {
     private final PistonCache pistonCache;
     private final PreferencesCache preferencesCache;
     private final SkullCache skullCache;
+    private final StructureBlockCache structureBlockCache;
     private final TagCache tagCache;
     private final WorldCache worldCache;
 
@@ -625,6 +626,7 @@ public GeyserSession(GeyserImpl geyser, BedrockServerSession bedrockServerSessio
         this.pistonCache = new PistonCache(this);
         this.preferencesCache = new PreferencesCache(this);
         this.skullCache = new SkullCache(this);
+        this.structureBlockCache = new StructureBlockCache();
         this.tagCache = new TagCache();
         this.worldCache = new WorldCache(this);
         this.cameraData = new GeyserCameraData(this);

File: core/src/main/java/org/geysermc/geyser/util/InventoryUtils.java
Patch:
@@ -125,7 +125,7 @@ public static void closeInventory(GeyserSession session, int javaId, boolean con
             InventoryTranslator translator = session.getInventoryTranslator();
             translator.closeInventory(session, inventory);
             if (confirm && inventory.isDisplayed() && !inventory.isPending()
-                    && !(translator instanceof LecternInventoryTranslator) // TODO: double-check
+                    && !(translator instanceof LecternInventoryTranslator) // Closing lecterns is not followed with a close confirmation
             ) {
                 session.setClosingInventory(true);
             }

File: core/src/main/java/org/geysermc/geyser/skin/SkinProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019-2022 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2024 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -674,7 +674,7 @@ private static BufferedImage downloadImage(String imageUrl, CapeProvider provide
             image = readFiveZigCape(imageUrl);
         } else {
             HttpURLConnection con = (HttpURLConnection) new URL(imageUrl).openConnection();
-            con.setRequestProperty("User-Agent", "Geyser-" + GeyserImpl.getInstance().getPlatformType().toString() + "/" + GeyserImpl.VERSION);
+            con.setRequestProperty("User-Agent", WebUtils.getUserAgent());
             con.setConnectTimeout(10000);
             con.setReadTimeout(10000);
 

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/BedrockActionTranslator.java
Patch:
@@ -163,7 +163,7 @@ public void translate(GeyserSession session, PlayerActionPacket packet) {
                 LevelEventPacket startBreak = new LevelEventPacket();
                 startBreak.setType(LevelEvent.BLOCK_START_BREAK);
                 startBreak.setPosition(vector.toFloat());
-                double breakTime = BlockUtils.getSessionBreakTime(session, BlockRegistries.JAVA_BLOCKS.get(blockState)) * 20;
+                double breakTime = BlockUtils.getSessionBreakTime(session, BlockRegistries.JAVA_BLOCKS.getOrDefault(blockState, BlockMapping.DEFAULT)) * 20;
 
                 // If the block is custom or the breaking item is custom, we must keep track of break time ourselves
                 GeyserItemStack item = session.getPlayerInventory().getItemInHand();
@@ -215,7 +215,7 @@ public void translate(GeyserSession session, PlayerActionPacket packet) {
                 LevelEventPacket updateBreak = new LevelEventPacket();
                 updateBreak.setType(LevelEvent.BLOCK_UPDATE_BREAK);
                 updateBreak.setPosition(vectorFloat);
-                double breakTime = BlockUtils.getSessionBreakTime(session, BlockRegistries.JAVA_BLOCKS.get(breakingBlock)) * 20;
+                double breakTime = BlockUtils.getSessionBreakTime(session, BlockRegistries.JAVA_BLOCKS.getOrDefault(breakingBlock, BlockMapping.DEFAULT)) * 20;
 
 
                 // If the block is custom, we must keep track of when it should break ourselves

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaBlockDestructionTranslator.java
Patch:
@@ -30,6 +30,7 @@
 import org.cloudburstmc.protocol.bedrock.data.LevelEvent;
 import org.cloudburstmc.protocol.bedrock.packet.LevelEventPacket;
 import org.geysermc.geyser.registry.BlockRegistries;
+import org.geysermc.geyser.registry.type.BlockMapping;
 import org.geysermc.geyser.registry.type.ItemMapping;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.translator.protocol.PacketTranslator;
@@ -42,7 +43,7 @@ public class JavaBlockDestructionTranslator extends PacketTranslator<Clientbound
     @Override
     public void translate(GeyserSession session, ClientboundBlockDestructionPacket packet) {
         int state = session.getGeyser().getWorldManager().getBlockAt(session, packet.getPosition().getX(), packet.getPosition().getY(), packet.getPosition().getZ());
-        int breakTime = (int) (65535 / Math.ceil(BlockUtils.getBreakTime(session, BlockRegistries.JAVA_BLOCKS.get(state), ItemMapping.AIR, new CompoundTag(""), false) * 20));
+        int breakTime = (int) (65535 / Math.ceil(BlockUtils.getBreakTime(session, BlockRegistries.JAVA_BLOCKS.getOrDefault(state, BlockMapping.DEFAULT), ItemMapping.AIR, new CompoundTag(""), false) * 20));
         LevelEventPacket levelEventPacket = new LevelEventPacket();
         levelEventPacket.setPosition(packet.getPosition().toFloat());
         levelEventPacket.setType(LevelEvent.BLOCK_START_BREAK);

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/BedrockInteractTranslator.java
Patch:
@@ -127,9 +127,9 @@ public void translate(GeyserSession session, InteractPacket packet) {
                         InventoryUtils.openInventory(session, session.getPlayerInventory());
                     }
                 } else {
-                    // Case: Player opens a player inventory, while we think it shouldn't have!
-                    // Close all inventories, reset to player inventory.
-                    InventoryUtils.closeInventory(session, session.getOpenInventory().getJavaId(), false);
+                    // Case: Player tries to open a player inventory, while we think it should be in a different inventory
+                    // Now: Open the inventory that we're supposed to be in.
+                    InventoryUtils.openInventory(session, session.getOpenInventory());
                 }
                 break;
         }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/inventory/JavaOpenBookTranslator.java
Patch:
@@ -30,6 +30,7 @@
 import com.github.steveice10.mc.protocol.packet.ingame.serverbound.inventory.ServerboundContainerClosePacket;
 import org.geysermc.geyser.inventory.GeyserItemStack;
 import org.geysermc.geyser.inventory.Inventory;
+import org.geysermc.geyser.inventory.LecternContainer;
 import org.geysermc.geyser.item.Items;
 import org.geysermc.geyser.network.GameProtocol;
 import org.geysermc.geyser.session.GeyserSession;
@@ -79,8 +80,8 @@ public void translate(GeyserSession session, ClientboundOpenBookPacket packet) {
 
             // Should never be null
             Objects.requireNonNull(translator, "lectern translator must exist");
-            Inventory inventory = translator.createInventory("", FAKE_LECTERN_WINDOW_ID, ContainerType.LECTERN , session.getPlayerInventory());
-            inventory.setItem(0, stack, session);
+            Inventory inventory = translator.createInventory("", FAKE_LECTERN_WINDOW_ID, ContainerType.LECTERN, session.getPlayerInventory());
+            ((LecternContainer) inventory).setFakeLecternBook(stack, session);
             InventoryUtils.openInventory(session, inventory);
         }
     }

File: core/src/main/java/org/geysermc/geyser/network/GameProtocol.java
Patch:
@@ -72,7 +72,7 @@ public final class GameProtocol {
             .minecraftVersion("1.20.60/1.20.62")
             .build());
         SUPPORTED_BEDROCK_CODECS.add(DEFAULT_BEDROCK_CODEC.toBuilder()
-            .minecraftVersion("1.20.70")
+            .minecraftVersion("1.20.70/1.20.71")
             .build());
     }
 

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/BedrockItemFrameDropItemTranslator.java
Patch:
@@ -39,10 +39,12 @@
  * Pre-1.16.210: used for both survival and creative item frame item removal
  * <p>
  * 1.16.210: only used in creative.
+ * 1.20.70: no longer used.
  */
 @Translator(packet = ItemFrameDropItemPacket.class)
 public class BedrockItemFrameDropItemTranslator extends PacketTranslator<ItemFrameDropItemPacket> {
 
+    // TODO: Remove when 1.20.60 is no longer supported
     @Override
     public void translate(GeyserSession session, ItemFrameDropItemPacket packet) {
         Entity entity = ItemFrameEntity.getItemFrameEntity(session, packet.getBlockPosition());

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/BedrockLecternUpdateTranslator.java
Patch:
@@ -47,6 +47,7 @@ public class BedrockLecternUpdateTranslator extends PacketTranslator<LecternUpda
 
     @Override
     public void translate(GeyserSession session, LecternUpdatePacket packet) {
+        // TODO: Remove dropping book check here when 1.20.60 is no longer supported
         if (packet.isDroppingBook()) {
             // Bedrock drops the book outside of the GUI. Java drops it in the GUI
             // So, we enter the GUI and then drop it! :)

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -285,7 +285,7 @@ public class GeyserSession implements GeyserConnection, GeyserCommandSource {
      * See {@link WorldManager#sendLecternData(GeyserSession, int, int, int)}
      * for more information.
      */
-    private final Set<Vector3i> lecternCache;
+    private final @Nullable Set<Vector3i> lecternCache;
 
     /**
      * A list of all players that have a player head on with a custom texture.

File: core/src/main/java/org/geysermc/geyser/translator/inventory/LecternInventoryTranslator.java
Patch:
@@ -193,9 +193,11 @@ private void updateBook(GeyserSession session, Inventory inventory, GeyserItemSt
             lecternContainer.setPosition(position);
 
             BlockEntityUtils.updateBlockEntity(session, blockEntityTag, position);
-            session.getLecternCache().add(position);
 
             if (shouldRefresh) {
+                // the lectern cache doesn't always exist; only when we must refresh
+                session.getLecternCache().add(position);
+
                 // Close the window - we will reopen it once the client has this data synced
                 ServerboundContainerClosePacket closeWindowPacket = new ServerboundContainerClosePacket(lecternContainer.getJavaId());
                 session.sendDownstreamGamePacket(closeWindowPacket);

File: core/src/main/java/org/geysermc/geyser/inventory/item/StoredItemMappings.java
Patch:
@@ -53,6 +53,7 @@ public class StoredItemMappings {
     private final ItemMapping upgradeTemplate;
     private final ItemMapping wheat;
     private final ItemMapping writableBook;
+    private final ItemMapping writtenBook;
 
     public StoredItemMappings(Map<Item, ItemMapping> itemMappings) {
         this.bamboo = load(itemMappings, Items.BAMBOO);
@@ -68,6 +69,7 @@ public StoredItemMappings(Map<Item, ItemMapping> itemMappings) {
         this.upgradeTemplate = load(itemMappings, Items.NETHERITE_UPGRADE_SMITHING_TEMPLATE);
         this.wheat = load(itemMappings, Items.WHEAT);
         this.writableBook = load(itemMappings, Items.WRITABLE_BOOK);
+        this.writtenBook = load(itemMappings, Items.WRITTEN_BOOK);
     }
 
     @NonNull

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/BedrockInventoryTransactionTranslator.java
Patch:
@@ -380,14 +380,16 @@ public void translate(GeyserSession session, InventoryTransactionPacket packet)
                             } else if (packet.getItemInHand().getDefinition() == session.getItemMappings().getStoredItems().glassBottle().getBedrockDefinition()) {
                                 // Handled in case 0
                                 break;
+                            } else if (packet.getItemInHand().getDefinition() == session.getItemMappings().getStoredItems().writtenBook().getBedrockDefinition()) {
+                                session.setCurrentBook(packet.getItemInHand());
                             }
                         }
 
                         ServerboundUseItemPacket useItemPacket = new ServerboundUseItemPacket(Hand.MAIN_HAND, session.getWorldCache().nextPredictionSequence());
                         session.sendDownstreamGamePacket(useItemPacket);
 
                         List<LegacySetItemSlotData> legacySlots = packet.getLegacySlots();
-                        if (packet.getActions().size() == 1 && legacySlots.size() > 0) {
+                        if (packet.getActions().size() == 1 && !legacySlots.isEmpty()) {
                             InventoryActionData actionData = packet.getActions().get(0);
                             LegacySetItemSlotData slotData = legacySlots.get(0);
                             if (slotData.getContainerId() == 6 && !actionData.getFromItem().isNull()) {

File: api/src/main/java/org/geysermc/geyser/api/pack/PathPackCodec.java
Patch:
@@ -42,4 +42,4 @@ public abstract class PathPackCodec extends PackCodec {
      */
     @NonNull
     public abstract Path path();
-}
+}
\ No newline at end of file

File: api/src/main/java/org/geysermc/geyser/api/util/PlatformType.java
Patch:
@@ -34,6 +34,7 @@ public record PlatformType(String platformName) {
     public static final PlatformType ANDROID = new PlatformType("Android");
     public static final PlatformType BUNGEECORD = new PlatformType("BungeeCord");
     public static final PlatformType FABRIC = new PlatformType("Fabric");
+    public static final PlatformType NEOFORGE = new PlatformType("NeoForge");
     public static final PlatformType SPIGOT = new PlatformType("Spigot");
 
     @Deprecated

File: bootstrap/mod/src/main/java/org/geysermc/geyser/platform/mod/GeyserServerPortGetter.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.geyser.platform.fabric;
+package org.geysermc.geyser.platform.mod;
 
 import net.minecraft.server.MinecraftServer;
 

File: bootstrap/standalone/src/main/java/org/geysermc/geyser/platform/standalone/gui/GeyserStandaloneGUI.java
Patch:
@@ -100,7 +100,7 @@ public void windowClosing(WindowEvent we) {
         Container cp = frame.getContentPane();
 
         // Fetch and set the icon for the frame
-        URL image = getClass().getClassLoader().getResource("icon.png");
+        URL image = getClass().getClassLoader().getResource("assets/geyser/icon.png");
         if (image != null) {
             ImageIcon icon = new ImageIcon(image);
             frame.setIconImage(icon.getImage());

File: core/src/main/java/org/geysermc/geyser/GeyserImpl.java
Patch:
@@ -221,6 +221,7 @@ public void initialize() {
             if (ex != null) {
                 return;
             }
+
             MinecraftLocale.ensureEN_US();
             String locale = GeyserLocale.getDefaultLocale();
             if (!"en_us".equals(locale)) {

File: core/src/main/java/org/geysermc/geyser/pack/SkullResourcePackManager.java
Patch:
@@ -187,7 +187,7 @@ private static void addBaseResources(ZipOutputStream zipOS) throws IOException {
 
             ZipEntry entry = new ZipEntry("skull_resource_pack/pack_icon.png");
             zipOS.putNextEntry(entry);
-            zipOS.write(FileUtils.readAllBytes("icon.png"));
+            zipOS.write(FileUtils.readAllBytes("assets/geyser/icon.png"));
             zipOS.closeEntry();
         }
     }

File: core/src/main/java/org/geysermc/geyser/session/PendingMicrosoftAuthentication.java
Patch:
@@ -123,7 +123,8 @@ public void cleanup() {
 
         public CompletableFuture<MsaAuthenticationService.MsCodeResponse> getCode(boolean offlineAccess) {
             // Request the code
-            CompletableFuture<MsaAuthenticationService.MsCodeResponse> code = CompletableFuture.supplyAsync(() -> tryGetCode(offlineAccess));
+            CompletableFuture<MsaAuthenticationService.MsCodeResponse> code = CompletableFuture.supplyAsync(
+                    () -> tryGetCode(offlineAccess));
             // Once the code is received, continuously try to request the access token, profile, etc
             code.thenRun(() -> performLoginAttempt(System.currentTimeMillis()));
             return code;

File: core/src/main/java/org/geysermc/geyser/entity/type/player/PlayerEntity.java
Patch:
@@ -377,6 +377,7 @@ public void updateDisplayName(@Nullable Team team) {
 
         if (needsUpdate) {
             dirtyMetadata.put(EntityDataTypes.NAME, this.nametag);
+            dirtyMetadata.put(EntityDataTypes.NAMETAG_ALWAYS_SHOW, (byte) 1);
         }
     }
 

File: bootstrap/fabric/src/main/java/org/geysermc/geyser/platform/fabric/mixin/client/IntegratedServerMixin.java
Patch:
@@ -57,7 +57,8 @@ public class IntegratedServerMixin implements GeyserServerPortGetter {
     private void onOpenToLan(GameType gameType, boolean cheatsAllowed, int port, CallbackInfoReturnable<Boolean> cir) {
         if (cir.getReturnValueZ()) {
             // If the LAN is opened, starts Geyser.
-            GeyserFabricMod.getInstance().startGeyser((MinecraftServer) (Object) this);
+            GeyserFabricMod.getInstance().setServer((MinecraftServer) (Object) this);
+            GeyserFabricMod.getInstance().onGeyserEnable();
             // Ensure player locale has been loaded, in case it's different from Java system language
             GeyserLocale.loadGeyserLocale(this.minecraft.options.languageCode);
             // Give indication that Geyser is loaded

File: bootstrap/standalone/src/main/java/org/geysermc/geyser/platform/standalone/GeyserStandaloneLogger.java
Patch:
@@ -49,7 +49,7 @@ protected void runCommand(String line) {
 
     @Override
     protected void shutdown() {
-        GeyserImpl.getInstance().getBootstrap().onDisable();
+        GeyserImpl.getInstance().getBootstrap().onGeyserShutdown();
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/command/GeyserCommandManager.java
Patch:
@@ -86,7 +86,7 @@ public void init() {
             registerBuiltInCommand(new StopCommand(geyser, "stop", "geyser.commands.stop.desc", "geyser.command.stop"));
         }
 
-        if (this.geyser.extensionManager().extensions().size() > 0) {
+        if (!this.geyser.extensionManager().extensions().isEmpty()) {
             registerBuiltInCommand(new ExtensionsCommand(this.geyser, "extensions", "geyser.commands.extensions.desc", "geyser.command.extensions"));
         }
 

File: core/src/main/java/org/geysermc/geyser/command/defaults/ReloadCommand.java
Patch:
@@ -55,7 +55,7 @@ public void execute(GeyserSession session, GeyserCommandSource sender, String[]
 
         geyser.getSessionManager().disconnectAll("geyser.commands.reload.kick");
         //FIXME Without the tiny wait, players do not get kicked - same happens when Geyser tries to disconnect all sessions on shutdown
-        geyser.getScheduledThread().schedule(geyser::reload, 10, TimeUnit.MILLISECONDS);
+        geyser.getScheduledThread().schedule(geyser::reloadGeyser, 10, TimeUnit.MILLISECONDS);
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/command/defaults/StopCommand.java
Patch:
@@ -52,7 +52,7 @@ public void execute(GeyserSession session, GeyserCommandSource sender, String[]
             return;
         }
 
-        geyser.getBootstrap().onDisable();
+        geyser.getBootstrap().onGeyserShutdown();
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/network/UpstreamPacketHandler.java
Patch:
@@ -166,7 +166,7 @@ public PacketSignal handle(RequestNetworkSettingsPacket packet) {
 
     @Override
     public PacketSignal handle(LoginPacket loginPacket) {
-        if (geyser.isShuttingDown()) {
+        if (geyser.isShuttingDown() || geyser.isReloading()) {
             // Don't allow new players in if we're no longer operating
             session.disconnect(GeyserLocale.getLocaleStringLog("geyser.core.shutdown.kick.message"));
             return PacketSignal.HANDLED;

File: core/src/main/java/org/geysermc/geyser/scoreboard/ScoreboardUpdater.java
Patch:
@@ -62,7 +62,7 @@ public static void init() {
 
     @Override
     public void run() {
-        while (!geyser.isShuttingDown()) {
+        while (!geyser.isShuttingDown() && !geyser.isReloading()) {
             try {
                 long timeTillAction = getTimeTillNextAction();
                 if (timeTillAction > 0) {

File: core/src/main/java/org/geysermc/geyser/util/EntityUtils.java
Patch:
@@ -266,6 +266,7 @@ public static InteractionResult attemptToSaddle(Entity entityToSaddle, GeyserIte
      * Convert Java GameMode to Bedrock GameType
      * Needed to account for ordinal differences (spectator is 3 in Java, 6 in Bedrock)
      */
+    @SuppressWarnings("deprecation") // Must use survival_viewer due to limitations on Bedrock's spectator gamemode
     public static GameType toBedrockGamemode(GameMode gamemode) {
         return switch (gamemode) {
             case CREATIVE -> GameType.CREATIVE;

File: core/src/main/java/org/geysermc/geyser/entity/type/player/PlayerEntity.java
Patch:
@@ -120,6 +120,9 @@ protected void initializeMetadata() {
         super.initializeMetadata();
         // For the OptionalPack, set all bits as invisible by default as this matches Java Edition behavior
         dirtyMetadata.put(EntityDataTypes.MARK_VARIANT, 0xff);
+        // Since 1.20.60, the nametag does not show properly if this is not set :/
+        // The nametag does disappear properly when the player is invisible though.
+        dirtyMetadata.put(EntityDataTypes.NAMETAG_ALWAYS_SHOW, (byte) 1);
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/registry/populator/CreativeItemRegistryPopulator.java
Patch:
@@ -124,6 +124,7 @@ static void populate(ItemRegistryPopulator.PaletteVersion palette, Map<String, I
                 builder.remove("name_hash");
                 builder.remove("network_id");
                 builder.remove("version");
+                builder.remove("block_id");
 
                 blockDefinition = blockMappings.getDefinition(builder.build());
             } catch (IOException e) {

File: core/src/main/java/org/geysermc/geyser/registry/populator/CustomSkullRegistryPopulator.java
Patch:
@@ -130,7 +130,7 @@ public void register(@NonNull String texture, @NonNull SkullTextureType type) {
             }
         });
 
-        if (BlockRegistries.CUSTOM_SKULLS.get().size() != 0) {
+        if (!BlockRegistries.CUSTOM_SKULLS.get().isEmpty()) {
             GeyserImpl.getInstance().getLogger().info("Registered " + BlockRegistries.CUSTOM_SKULLS.get().size() + " custom skulls as custom blocks.");
         }
     }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaLevelChunkWithLightTranslator.java
Patch:
@@ -72,6 +72,7 @@
 import org.geysermc.geyser.translator.protocol.Translator;
 import org.geysermc.geyser.util.BlockEntityUtils;
 import org.geysermc.geyser.util.ChunkUtils;
+import org.geysermc.geyser.util.DimensionUtils;
 
 import java.io.IOException;
 import java.util.BitSet;
@@ -522,6 +523,7 @@ public void translate(GeyserSession session, ClientboundLevelChunkWithLightPacke
         levelChunkPacket.setChunkX(packet.getX());
         levelChunkPacket.setChunkZ(packet.getZ());
         levelChunkPacket.setData(Unpooled.wrappedBuffer(payload));
+        levelChunkPacket.setDimension(DimensionUtils.javaToBedrock(session.getChunkCache().getBedrockDimension()));
         session.sendUpstreamPacket(levelChunkPacket);
 
         if (!lecterns.isEmpty()) {

File: core/src/main/java/org/geysermc/geyser/util/ChunkUtils.java
Patch:
@@ -244,6 +244,7 @@ public static void sendEmptyChunk(GeyserSession session, int chunkX, int chunkZ,
             byteBuf.readBytes(payload);
 
             LevelChunkPacket data = new LevelChunkPacket();
+            data.setDimension(DimensionUtils.javaToBedrock(session.getChunkCache().getBedrockDimension()));
             data.setChunkX(chunkX);
             data.setChunkZ(chunkZ);
             data.setSubChunksLength(0);

File: core/src/main/java/org/geysermc/geyser/network/netty/handler/RakPingHandler.java
Patch:
@@ -45,7 +45,7 @@ public class RakPingHandler extends SimpleChannelInboundHandler<RakPing> {
     protected void channelRead0(ChannelHandlerContext ctx, RakPing msg) {
         long guid = ctx.channel().config().getOption(RakChannelOption.RAK_GUID);
 
-        RakPong pong = msg.reply(guid, this.server.onQuery(msg.getSender()).toByteBuf());
+        RakPong pong = msg.reply(guid, this.server.onQuery(ctx.channel(), msg.getSender()).toByteBuf());
         ctx.writeAndFlush(pong);
     }
 }

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -935,7 +935,7 @@ public void packetSending(PacketSendingEvent event) {
                             ).toString());
                         } catch (Exception e) {
                             geyser.getLogger().error(GeyserLocale.getLocaleStringLog("geyser.auth.floodgate.encrypt_fail"), e);
-                            disconnect(GeyserLocale.getPlayerLocaleString("geyser.auth.floodgate.encryption_fail", getClientData().getLanguageCode()));
+                            disconnect(GeyserLocale.getPlayerLocaleString("geyser.auth.floodgate.encrypt_fail", getClientData().getLanguageCode()));
                             return;
                         }
 

File: core/src/main/java/org/geysermc/geyser/util/EntityUtils.java
Patch:
@@ -270,7 +270,7 @@ public static GameType toBedrockGamemode(GameMode gamemode) {
         return switch (gamemode) {
             case CREATIVE -> GameType.CREATIVE;
             case ADVENTURE -> GameType.ADVENTURE;
-            case SPECTATOR -> GameType.SPECTATOR;
+            case SPECTATOR -> GameType.SURVIVAL_VIEWER;
             default -> GameType.SURVIVAL;
         };
     }

File: ap/src/main/java/org/geysermc/geyser/processor/BlockEntityProcessor.java
Patch:
@@ -30,7 +30,7 @@
 import javax.lang.model.SourceVersion;
 
 @SupportedAnnotationTypes("*")
-@SupportedSourceVersion(SourceVersion.RELEASE_16)
+@SupportedSourceVersion(SourceVersion.RELEASE_17)
 public class BlockEntityProcessor extends ClassProcessor {
     public BlockEntityProcessor() {
         super("org.geysermc.geyser.translator.level.block.entity.BlockEntity");

File: ap/src/main/java/org/geysermc/geyser/processor/CollisionRemapperProcessor.java
Patch:
@@ -30,7 +30,7 @@
 import javax.lang.model.SourceVersion;
 
 @SupportedAnnotationTypes("*")
-@SupportedSourceVersion(SourceVersion.RELEASE_16)
+@SupportedSourceVersion(SourceVersion.RELEASE_17)
 public class CollisionRemapperProcessor extends ClassProcessor {
     public CollisionRemapperProcessor() {
         super("org.geysermc.geyser.translator.collision.CollisionRemapper");

File: ap/src/main/java/org/geysermc/geyser/processor/PacketTranslatorProcessor.java
Patch:
@@ -30,7 +30,7 @@
 import javax.lang.model.SourceVersion;
 
 @SupportedAnnotationTypes("*")
-@SupportedSourceVersion(SourceVersion.RELEASE_16)
+@SupportedSourceVersion(SourceVersion.RELEASE_17)
 public class PacketTranslatorProcessor extends ClassProcessor {
     public PacketTranslatorProcessor() {
         super("org.geysermc.geyser.translator.protocol.Translator");

File: ap/src/main/java/org/geysermc/geyser/processor/SoundHandlerProcessor.java
Patch:
@@ -30,7 +30,7 @@
 import javax.lang.model.SourceVersion;
 
 @SupportedAnnotationTypes("*")
-@SupportedSourceVersion(SourceVersion.RELEASE_16)
+@SupportedSourceVersion(SourceVersion.RELEASE_17)
 public class SoundHandlerProcessor extends ClassProcessor {
     public SoundHandlerProcessor() {
         super("org.geysermc.geyser.translator.sound.SoundTranslator");

File: core/src/main/java/org/geysermc/geyser/text/MinecraftLocale.java
Patch:
@@ -196,7 +196,6 @@ public static Map<String, String> parseLangFile(Path localeFile, String locale)
                 Map.Entry<String, JsonNode> entry = localeIterator.next();
                 langMap.put(entry.getKey(), entry.getValue().asText());
             }
-            localeStream.close();
             return langMap;
         } catch (FileNotFoundException e){
             throw new AssertionError(GeyserLocale.getLocaleStringLog("geyser.locale.fail.file", locale, e.getMessage()));

File: bootstrap/spigot/src/main/java/org/geysermc/geyser/platform/spigot/GeyserSpigotPlugin.java
Patch:
@@ -136,7 +136,7 @@ public void onLoad() {
         }
 
         try {
-            Class.forName("io.netty.util.internal.ObjectPool.ObjectCreator");
+            Class.forName("io.netty.util.internal.ObjectPool$ObjectCreator");
         } catch (ClassNotFoundException e) {
             getLogger().severe("*********************************************");
             getLogger().severe("");

File: bootstrap/fabric/src/main/java/org/geysermc/geyser/platform/fabric/mixin/client/IntegratedServerMixin.java
Patch:
@@ -32,6 +32,7 @@
 import net.minecraft.network.chat.Component;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.level.GameType;
+import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.platform.fabric.GeyserFabricMod;
 import org.geysermc.geyser.platform.fabric.GeyserServerPortGetter;
 import org.geysermc.geyser.text.GeyserLocale;
@@ -62,7 +63,7 @@ private void onOpenToLan(GameType gameType, boolean cheatsAllowed, int port, Cal
             // Give indication that Geyser is loaded
             Objects.requireNonNull(this.minecraft.player);
             this.minecraft.player.displayClientMessage(Component.literal(GeyserLocale.getPlayerLocaleString("geyser.core.start",
-                    this.minecraft.options.languageCode, "localhost", String.valueOf(this.publishedPort))), false);
+                    this.minecraft.options.languageCode, "localhost", String.valueOf(GeyserImpl.getInstance().bedrockListener().port()))), false);
         }
     }
 

File: core/src/main/java/org/geysermc/geyser/ping/GeyserLegacyPingPassthrough.java
Patch:
@@ -139,6 +139,9 @@ public void run() {
             this.geyser.getLogger().debug("Connection timeout for ping passthrough.");
         } catch (JsonParseException | JsonMappingException ex) {
             this.geyser.getLogger().error("Failed to parse json when pinging server!", ex);
+        } catch (UnknownHostException ex) {
+            // Don't reset pingInfo, as we want to keep the last known value
+            this.geyser.getLogger().warning("Unable to resolve remote host! Is the remote server down or invalid?");
         } catch (IOException e) {
             this.geyser.getLogger().error("IO error while trying to use legacy ping passthrough", e);
         }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaUpdateRecipesTranslator.java
Patch:
@@ -337,7 +337,7 @@ private ItemDescriptorWithCount[][] combinations(GeyserSession session, Ingredie
                     GroupedItem groupedItem = entry.getKey();
 
                     String recipeTag = RECIPE_TAGS.get(groupedItem.id.getIdentifier());
-                    if (recipeTag != null) {
+                    if (recipeTag != null && ingredients.length > 1) {
                         optionSet.add(new ItemDescriptorWithCount(new ItemTagDescriptor(recipeTag), groupedItem.count));
                         continue;
                     }

File: core/src/main/java/org/geysermc/geyser/network/netty/GeyserServer.java
Patch:
@@ -249,8 +249,8 @@ public BedrockPong onQuery(InetSocketAddress inetSocketAddress) {
 
         if (config.isPassthroughMotd() && pingInfo != null && pingInfo.getDescription() != null) {
             String[] motd = MessageTranslator.convertMessageLenient(pingInfo.getDescription()).split("\n");
-            String mainMotd = motd[0]; // First line of the motd.
-            String subMotd = (motd.length != 1) ? motd[1] : GeyserImpl.NAME; // Second line of the motd if present, otherwise default.
+            String mainMotd = (motd.length > 0) ? motd[0] : config.getBedrock().primaryMotd(); // First line of the motd.
+            String subMotd = (motd.length > 1) ? motd[1] : config.getBedrock().secondaryMotd(); // Second line of the motd if present, otherwise default.
 
             pong.motd(mainMotd.trim());
             pong.subMotd(subMotd.trim()); // Trimmed to shift it to the left, prevents the universe from collapsing on us just because we went 2 characters over the text box's limit.

File: core/src/main/java/org/geysermc/geyser/session/UpstreamSession.java
Patch:
@@ -58,7 +58,7 @@ public void sendPacketImmediately(@NonNull BedrockPacket packet) {
     }
 
     public void disconnect(String reason) {
-        session.disconnect(reason);
+        this.session.disconnect(reason);
     }
 
     /**

File: api/src/main/java/org/geysermc/geyser/api/block/custom/component/CustomBlockComponents.java
Patch:
@@ -185,7 +185,7 @@ interface Builder {
 
         Builder placeAir(boolean placeAir);
 
-        Builder tags(Set<String> tags);
+        Builder tags(@Nullable Set<String> tags);
 
         CustomBlockComponents build();
     }

File: api/src/main/java/org/geysermc/geyser/api/item/custom/NonVanillaCustomItemData.java
Patch:
@@ -239,6 +239,9 @@ default Builder tool(boolean isTool) {
         @Override
         Builder renderOffsets(@Nullable CustomRenderOffsets renderOffsets);
 
+        @Override
+        Builder tags(@Nullable Set<String> tags);
+
         NonVanillaCustomItemData build();
     }
 }

File: bootstrap/velocity/src/main/java/org/geysermc/geyser/platform/velocity/GeyserVelocityPlugin.java
Patch:
@@ -206,9 +206,9 @@ public void onProxyBound(ListenerBoundEvent event) {
                 // After this bound, we know that the channel initializer cannot change without it being ineffective for Velocity, too
                 geyserInjector.initializeLocalChannel(this);
             }
-        }
 
-        INITIALIZED = true;
+            INITIALIZED = true;
+        }
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/spawn/JavaAddEntityTranslator.java
Patch:
@@ -49,7 +49,7 @@ public class JavaAddEntityTranslator extends PacketTranslator<ClientboundAddEnti
     public void translate(GeyserSession session, ClientboundAddEntityPacket packet) {
         EntityDefinition<?> definition = Registries.ENTITY_DEFINITIONS.get(packet.getType());
         if (definition == null) {
-            session.getGeyser().getLogger().warning("Could not find an entity definition with type " + packet.getType());
+            session.getGeyser().getLogger().debug("Could not find an entity definition with type " + packet.getType());
             return;
         }
 

File: core/src/main/java/org/geysermc/geyser/level/block/BlockStateValues.java
Patch:
@@ -173,8 +173,8 @@ public static void storeBlockStateValues(String javaId, int javaBlockState, Json
         }
 
         if (javaId.contains("wall_skull") || javaId.contains("wall_head")) {
-            String direction = javaId.substring(javaId.lastIndexOf("facing=") + 7);
-            int rotation = switch (direction.substring(0, direction.length() - 1)) {
+            String direction = javaId.substring(javaId.lastIndexOf("facing=") + 7, javaId.lastIndexOf("powered=") - 1);
+            int rotation = switch (direction) {
                 case "north" -> 180;
                 case "west" -> 90;
                 case "east" -> 270;

File: core/src/main/java/org/geysermc/geyser/translator/inventory/BeaconInventoryTranslator.java
Patch:
@@ -119,7 +119,7 @@ public ItemStackResponse translateSpecialRequest(GeyserSession session, Inventor
     }
 
     private OptionalInt toJava(int effectChoice) {
-        return effectChoice == 0 ? OptionalInt.empty() : OptionalInt.of(effectChoice);
+        return effectChoice == 0 ? OptionalInt.empty() : OptionalInt.of(effectChoice - 1);
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/BedrockRequestAbilityTranslator.java
Patch:
@@ -42,6 +42,7 @@ public class BedrockRequestAbilityTranslator extends PacketTranslator<RequestAbi
 
     @Override
     public void translate(GeyserSession session, RequestAbilityPacket packet) {
+        // TODO: Since 1.20.30, this was replaced by a START_FLYING and STOP_FLYING case in BedrockActionTranslator
         if (packet.getAbility() == Ability.FLYING) {
             boolean isFlying = packet.isBoolValue();
             if (!isFlying && session.getGameMode() == GameMode.SPECTATOR) {

File: core/src/main/java/org/geysermc/geyser/GeyserMain.java
Patch:
@@ -28,6 +28,7 @@
 import javax.swing.*;
 import java.io.InputStream;
 import java.lang.reflect.Method;
+import java.nio.charset.StandardCharsets;
 import java.util.Locale;
 import java.util.Scanner;
 
@@ -60,7 +61,7 @@ private String createMessage() {
             helpStream = GeyserMain.class.getClassLoader().getResourceAsStream("languages/run-help/en_US.txt");
         }
 
-        Scanner help = new Scanner(helpStream).useDelimiter("\\Z");
+        Scanner help = new Scanner(helpStream, StandardCharsets.UTF_8).useDelimiter("\\Z");
         String line = "";
         while (help.hasNext()) {
             line = help.next();

File: core/src/main/java/org/geysermc/geyser/registry/PacketTranslatorRegistry.java
Patch:
@@ -29,7 +29,6 @@
 import com.github.steveice10.mc.protocol.packet.ingame.clientbound.ClientboundTabListPacket;
 import com.github.steveice10.mc.protocol.packet.ingame.clientbound.level.ClientboundLightUpdatePacket;
 import io.netty.channel.EventLoop;
-import org.cloudburstmc.protocol.bedrock.packet.RequestPermissionsPacket;
 import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.registry.loader.RegistryLoaders;
 import org.geysermc.geyser.session.GeyserSession;
@@ -47,7 +46,6 @@ public class PacketTranslatorRegistry<T> extends AbstractMappedRegistry<Class<?
         IGNORED_PACKETS.add(ClientboundLightUpdatePacket.class); // Light is handled on Bedrock for us
         IGNORED_PACKETS.add(ClientboundTabListPacket.class); // Cant be implemented in Bedrock
         IGNORED_PACKETS.add(ClientboundDelimiterPacket.class); // Not implemented, spams logs
-        IGNORED_PACKETS.add(RequestPermissionsPacket.class); // Bedrock client asks permission to switch default game mode, but we handle this ourselves
     }
 
     protected PacketTranslatorRegistry() {

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/BedrockSetDefaultGameTypeTranslator.java
Patch:
@@ -41,7 +41,7 @@ public class BedrockSetDefaultGameTypeTranslator extends PacketTranslator<SetDef
      */
     @Override
     public void translate(GeyserSession session, SetDefaultGameTypePacket packet) {
-        if (session.getOpPermissionLevel() >= 2 || session.hasPermission("geyser.settings.server")) {
+        if (session.getOpPermissionLevel() >= 2 && session.hasPermission("geyser.settings.server")) {
             session.getGeyser().getWorldManager().setDefaultGameMode(session, GameMode.byId(packet.getGamemode()));
         }
         // Stop the client from updating their own Gamemode without telling the server

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/BedrockSetDifficultyTranslator.java
Patch:
@@ -39,7 +39,7 @@ public class BedrockSetDifficultyTranslator extends PacketTranslator<SetDifficul
      */
     @Override
     public void translate(GeyserSession session, SetDifficultyPacket packet) {
-        if (session.getOpPermissionLevel() >= 2 || session.hasPermission("geyser.settings.server")) {
+        if (session.getOpPermissionLevel() >= 2 && session.hasPermission("geyser.settings.server")) {
             if (packet.getDifficulty() != session.getWorldCache().getDifficulty().ordinal()) {
                 session.getGeyser().getWorldManager().setDifficulty(session, Difficulty.from(packet.getDifficulty()));
             }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/BedrockSetPlayerGameTypeTranslator.java
Patch:
@@ -45,7 +45,7 @@ public class BedrockSetPlayerGameTypeTranslator extends PacketTranslator<SetPlay
     @Override
     public void translate(GeyserSession session, SetPlayerGameTypePacket packet) {
         // yes, if you are OP
-        if (session.getOpPermissionLevel() >= 2 || session.hasPermission("geyser.settings.server")) {
+        if (session.getOpPermissionLevel() >= 2 && session.hasPermission("geyser.settings.server")) {
             if (packet.getGamemode() != session.getGameMode().ordinal()) {
                 // Bedrock has more Gamemodes than Java, leading to cases 5 (for "default") and 6 (for "spectator") being sent
                 // https://github.com/CloudburstMC/Protocol/blob/3.0/bedrock-codec/src/main/java/org/cloudburstmc/protocol/bedrock/data/GameType.java

File: core/src/main/java/org/geysermc/geyser/entity/type/living/merchant/VillagerEntity.java
Patch:
@@ -118,7 +118,7 @@ public void moveRelative(double relX, double relY, double relZ, float yaw, float
         
         // The bed block
         int blockId = session.getGeyser().getWorldManager().getBlockAt(session, bedPosition);
-        String fullIdentifier = BlockRegistries.JAVA_BLOCKS.getOrDefault(blockId, BlockMapping.AIR).getJavaIdentifier();
+        String fullIdentifier = BlockRegistries.JAVA_BLOCKS.getOrDefault(blockId, BlockMapping.DEFAULT).getJavaIdentifier();
 
         // Set the correct position offset and rotation when sleeping
         int bedRotation = 0;

File: core/src/main/java/org/geysermc/geyser/inventory/holder/BlockInventoryHolder.java
Patch:
@@ -80,7 +80,7 @@ public boolean prepareInventory(InventoryTranslator translator, GeyserSession se
             // and the bedrock block is vanilla
             int javaBlockId = session.getGeyser().getWorldManager().getBlockAt(session, session.getLastInteractionBlockPosition());
             if (!BlockRegistries.CUSTOM_BLOCK_STATE_OVERRIDES.get().containsKey(javaBlockId)) {
-                String[] javaBlockString = BlockRegistries.JAVA_BLOCKS.getOrDefault(javaBlockId, BlockMapping.AIR).getJavaIdentifier().split("\\[");
+                String[] javaBlockString = BlockRegistries.JAVA_BLOCKS.getOrDefault(javaBlockId, BlockMapping.DEFAULT).getJavaIdentifier().split("\\[");
                 if (isValidBlock(javaBlockString)) {
                     // We can safely use this block
                     inventory.setHolderPosition(session.getLastInteractionBlockPosition());

File: core/src/main/java/org/geysermc/geyser/level/block/BlockStateValues.java
Patch:
@@ -403,7 +403,7 @@ public static boolean isBlockAttached(int stateA, int stateB) {
      * @return true if a piston can break the block
      */
     public static boolean canPistonDestroyBlock(int state)  {
-        return BlockRegistries.JAVA_BLOCKS.getOrDefault(state, BlockMapping.AIR).getPistonBehavior() == PistonBehavior.DESTROY;
+        return BlockRegistries.JAVA_BLOCKS.getOrDefault(state, BlockMapping.DEFAULT).getPistonBehavior() == PistonBehavior.DESTROY;
     }
 
     public static boolean canPistonMoveBlock(int javaId, boolean isPushing) {
@@ -414,7 +414,7 @@ public static boolean canPistonMoveBlock(int javaId, boolean isPushing) {
         if (PistonBlockEntityTranslator.isBlock(javaId)) {
             return !PISTON_VALUES.get(javaId);
         }
-        BlockMapping block = BlockRegistries.JAVA_BLOCKS.getOrDefault(javaId, BlockMapping.AIR);
+        BlockMapping block = BlockRegistries.JAVA_BLOCKS.getOrDefault(javaId, BlockMapping.DEFAULT);
         // Bedrock, End portal frames, etc. can't be moved
         if (block.getHardness() == -1.0d) {
             return false;
@@ -511,7 +511,7 @@ public static double getWaterHeight(int state) {
      * @return The block's slipperiness
      */
     public static float getSlipperiness(int state) {
-        String blockIdentifier = BlockRegistries.JAVA_BLOCKS.getOrDefault(state, BlockMapping.AIR).getJavaIdentifier();
+        String blockIdentifier = BlockRegistries.JAVA_BLOCKS.getOrDefault(state, BlockMapping.DEFAULT).getJavaIdentifier();
         return switch (blockIdentifier) {
             case "minecraft:slime_block" -> 0.8f;
             case "minecraft:ice", "minecraft:packed_ice" -> 0.98f;

File: core/src/main/java/org/geysermc/geyser/registry/type/BlockMapping.java
Patch:
@@ -36,7 +36,7 @@
 @Builder
 @Value
 public class BlockMapping {
-    public static BlockMapping AIR;
+    public static BlockMapping DEFAULT = BlockMapping.builder().javaIdentifier("minecraft:air").pistonBehavior(PistonBehavior.NORMAL).build();;
 
     String javaIdentifier;
     /**

File: core/src/main/java/org/geysermc/geyser/translator/inventory/chest/DoubleChestInventoryTranslator.java
Patch:
@@ -58,7 +58,7 @@ public boolean prepareInventory(GeyserSession session, Inventory inventory) {
         if (session.getLastInteractionPlayerPosition().equals(session.getPlayerEntity().getPosition())) {
             int javaBlockId = session.getGeyser().getWorldManager().getBlockAt(session, session.getLastInteractionBlockPosition());
             if (!BlockRegistries.CUSTOM_BLOCK_STATE_OVERRIDES.get().containsKey(javaBlockId)) {
-                String[] javaBlockString = BlockRegistries.JAVA_BLOCKS.getOrDefault(javaBlockId, BlockMapping.AIR).getJavaIdentifier().split("\\[");
+                String[] javaBlockString = BlockRegistries.JAVA_BLOCKS.getOrDefault(javaBlockId, BlockMapping.DEFAULT).getJavaIdentifier().split("\\[");
                 if (javaBlockString.length > 1 && (javaBlockString[0].equals("minecraft:chest") || javaBlockString[0].equals("minecraft:trapped_chest"))
                         && !javaBlockString[1].contains("type=single")) {
                     inventory.setHolderPosition(session.getLastInteractionBlockPosition());

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/BedrockBlockPickRequestTranslator.java
Patch:
@@ -67,7 +67,7 @@ public void translate(GeyserSession session, BlockPickRequestPacket packet) {
             return;
         }
 
-        BlockMapping blockMapping = BlockRegistries.JAVA_BLOCKS.getOrDefault(blockToPick, BlockMapping.AIR);
+        BlockMapping blockMapping = BlockRegistries.JAVA_BLOCKS.getOrDefault(blockToPick, BlockMapping.DEFAULT);
         boolean addNbtData = packet.isAddUserData() && blockMapping.isBlockEntity(); // Holding down CTRL
         if (BlockStateValues.getBannerColor(blockToPick) != -1 || addNbtData) {
             session.getGeyser().getWorldManager().getPickItemNbt(session, vector.getX(), vector.getY(), vector.getZ(), addNbtData)

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/BedrockActionTranslator.java
Patch:
@@ -185,7 +185,7 @@ public void translate(GeyserSession session, PlayerActionPacket packet) {
                 // Account for fire - the client likes to hit the block behind.
                 Vector3i fireBlockPos = BlockUtils.getBlockPosition(vector, packet.getFace());
                 int blockUp = session.getGeyser().getWorldManager().getBlockAt(session, fireBlockPos);
-                String identifier = BlockRegistries.JAVA_BLOCKS.getOrDefault(blockUp, BlockMapping.AIR).getJavaIdentifier();
+                String identifier = BlockRegistries.JAVA_BLOCKS.getOrDefault(blockUp, BlockMapping.DEFAULT).getJavaIdentifier();
                 if (identifier.startsWith("minecraft:fire") || identifier.startsWith("minecraft:soul_fire")) {
                     ServerboundPlayerActionPacket startBreakingPacket = new ServerboundPlayerActionPacket(PlayerAction.START_DIGGING, fireBlockPos,
                             Direction.VALUES[packet.getFace()], session.getWorldCache().nextPredictionSequence());

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaBlockUpdateTranslator.java
Patch:
@@ -100,7 +100,7 @@ private void checkInteract(GeyserSession session, ClientboundBlockUpdatePacket p
                 || lastInteractPos.getZ() != packet.getEntry().getPosition().getZ())) {
             return;
         }
-        String identifier = BlockRegistries.JAVA_BLOCKS.getOrDefault(packet.getEntry().getBlock(), BlockMapping.AIR).getJavaIdentifier();
+        String identifier = BlockRegistries.JAVA_BLOCKS.getOrDefault(packet.getEntry().getBlock(), BlockMapping.DEFAULT).getJavaIdentifier();
         session.setInteracting(false);
         BlockSoundInteractionTranslator.handleBlockInteraction(session, lastInteractPos.toFloat(), identifier);
     }

File: core/src/main/java/org/geysermc/geyser/registry/populator/CreativeItemRegistryPopulator.java
Patch:
@@ -26,8 +26,6 @@
 package org.geysermc.geyser.registry.populator;
 
 import com.fasterxml.jackson.databind.JsonNode;
-import it.unimi.dsi.fastutil.objects.Object2ObjectMap;
-import it.unimi.dsi.fastutil.objects.Object2ObjectMaps;
 import org.cloudburstmc.nbt.NbtMap;
 import org.cloudburstmc.nbt.NbtMapBuilder;
 import org.cloudburstmc.nbt.NbtUtils;
@@ -124,6 +122,7 @@ private static ItemData.Builder createItemData(JsonNode itemNode, BlockMappings
                 NbtMapBuilder builder = stateTag.toBuilder();
                 builder.remove("name_hash");
                 builder.remove("network_id");
+                builder.remove("version");
 
                 blockDefinition = blockMappings.getDefinition(builder.build());
             } catch (IOException e) {

File: core/src/main/java/org/geysermc/geyser/registry/populator/CustomSkullRegistryPopulator.java
Patch:
@@ -129,7 +129,9 @@ public void register(@NonNull String texture, @NonNull SkullTextureType type) {
             }
         });
 
-        GeyserImpl.getInstance().getLogger().info("Registered " + BlockRegistries.CUSTOM_SKULLS.get().size() + " custom skulls as custom blocks.");
+        if (BlockRegistries.CUSTOM_SKULLS.get().size() != 0) {
+            GeyserImpl.getInstance().getLogger().info("Registered " + BlockRegistries.CUSTOM_SKULLS.get().size() + " custom skulls as custom blocks.");
+        }
     }
 
     /**

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/inventory/JavaOpenScreenTranslator.java
Patch:
@@ -73,7 +73,8 @@ public void translate(GeyserSession session, ClientboundOpenScreenPacket packet)
         if (openInventory != null) {
             // If the window type is the same, don't close.
             // In rare cases, inventories can do funny things where it keeps the same window type up but change the contents.
-            if (openInventory.getContainerType() != packet.getType()) {
+            // Or, inventory names can change (useful for JsonUI). In these cases, we need to close the old inventory.
+            if (openInventory.getContainerType() != packet.getType() || !openInventory.getTitle().equals(name)) {
                 // Sometimes the server can double-open an inventory with the same ID - don't confirm in that instance.
                 InventoryUtils.closeInventory(session, openInventory.getJavaId(), openInventory.getJavaId() != packet.getContainerId());
             }

File: core/src/main/java/org/geysermc/geyser/entity/type/living/ArmorStandEntity.java
Patch:
@@ -249,7 +249,7 @@ protected void setInvisible(boolean value) {
     @Override
     public InteractionResult interactAt(Hand hand) {
         if (!isMarker && session.getPlayerInventory().getItemInHand(hand).asItem() != Items.NAME_TAG) {
-            // Java Edition returns SUCCESS if in spectator mode, but this is overrided with an earlier check on the client
+            // Java Edition returns SUCCESS if in spectator mode, but this is overridden with an earlier check on the client
             return InteractionResult.CONSUME;
         } else {
             return InteractionResult.PASS;

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaLoginTranslator.java
Patch:
@@ -45,6 +45,7 @@
 import org.geysermc.geyser.translator.protocol.Translator;
 import org.geysermc.geyser.util.ChunkUtils;
 import org.geysermc.geyser.util.DimensionUtils;
+import org.geysermc.geyser.util.EntityUtils;
 import org.geysermc.geyser.util.JavaCodecUtil;
 import org.geysermc.geyser.util.PluginMessageUtils;
 
@@ -113,7 +114,7 @@ public void translate(GeyserSession session, ClientboundLoginPacket packet) {
 
         if (!needsSpawnPacket) {
             SetPlayerGameTypePacket playerGameTypePacket = new SetPlayerGameTypePacket();
-            playerGameTypePacket.setGamemode(packet.getGameMode().ordinal());
+            playerGameTypePacket.setGamemode(EntityUtils.toBedrockGamemode(packet.getGameMode()).ordinal());
             session.sendUpstreamPacket(playerGameTypePacket);
         }
 

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaRespawnTranslator.java
Patch:
@@ -38,6 +38,7 @@
 import org.geysermc.geyser.translator.protocol.Translator;
 import org.geysermc.geyser.util.ChunkUtils;
 import org.geysermc.geyser.util.DimensionUtils;
+import org.geysermc.geyser.util.EntityUtils;
 
 @Translator(packet = ClientboundRespawnPacket.class)
 public class JavaRespawnTranslator extends PacketTranslator<ClientboundRespawnPacket> {
@@ -59,7 +60,7 @@ public void translate(GeyserSession session, ClientboundRespawnPacket packet) {
         entity.updateBedrockMetadata();
 
         SetPlayerGameTypePacket playerGameTypePacket = new SetPlayerGameTypePacket();
-        playerGameTypePacket.setGamemode(packet.getGamemode().ordinal());
+        playerGameTypePacket.setGamemode(EntityUtils.toBedrockGamemode(packet.getGamemode()).ordinal());
         session.sendUpstreamPacket(playerGameTypePacket);
         session.setGameMode(packet.getGamemode());
 

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaGameEventTranslator.java
Patch:
@@ -44,6 +44,7 @@
 import org.geysermc.geyser.translator.inventory.PlayerInventoryTranslator;
 import org.geysermc.geyser.translator.protocol.PacketTranslator;
 import org.geysermc.geyser.translator.protocol.Translator;
+import org.geysermc.geyser.util.EntityUtils;
 
 @Translator(packet = ClientboundGameEventPacket.class)
 public class JavaGameEventTranslator extends PacketTranslator<ClientboundGameEventPacket> {
@@ -105,7 +106,7 @@ public void translate(GeyserSession session, ClientboundGameEventPacket packet)
                 GameMode gameMode = (GameMode) packet.getValue();
 
                 SetPlayerGameTypePacket playerGameTypePacket = new SetPlayerGameTypePacket();
-                playerGameTypePacket.setGamemode(gameMode.ordinal());
+                playerGameTypePacket.setGamemode(EntityUtils.toBedrockGamemode(gameMode).ordinal());
                 session.sendUpstreamPacket(playerGameTypePacket);
                 session.setGameMode(gameMode);
 

File: core/src/main/java/org/geysermc/geyser/command/GeyserCommandManager.java
Patch:
@@ -107,7 +107,8 @@ public void register(@NonNull Command command) {
 
         // Register help commands for all extensions with commands
         for (Map.Entry<Extension, Map<String, Command>> entry : this.extensionCommands.entrySet()) {
-            registerExtensionCommand(entry.getKey(), new HelpCommand(this.geyser, "help", "geyser.commands.exthelp.desc", "geyser.command.exthelp", entry.getKey().description().id(), entry.getValue()));
+            String id = entry.getKey().description().id();
+            registerExtensionCommand(entry.getKey(), new HelpCommand(this.geyser, "help", "geyser.commands.exthelp.desc", "geyser.command.exthelp." + id, id, entry.getValue()));
         }
     }
 

File: core/src/main/java/org/geysermc/geyser/command/defaults/HelpCommand.java
Patch:
@@ -63,7 +63,8 @@ public HelpCommand(GeyserImpl geyser, String name, String description, String pe
     public void execute(GeyserSession session, GeyserCommandSource sender, String[] args) {
         int page = 1;
         int maxPage = 1;
-        String header = GeyserLocale.getPlayerLocaleString("geyser.commands.help.header", sender.locale(), page, maxPage);
+        String translationKey = this.baseCommand.equals("geyser") ? "geyser.commands.help.header" : "geyser.commands.extensions.header";
+        String header = GeyserLocale.getPlayerLocaleString(translationKey, sender.locale(), page, maxPage);
         sender.sendMessage(header);
 
         this.commands.entrySet().stream().sorted(Map.Entry.comparingByKey()).forEach(entry -> {

File: core/src/main/java/org/geysermc/geyser/registry/type/BlockMapping.java
Patch:
@@ -56,6 +56,7 @@ public class BlockMapping {
     @Nonnull
     PistonBehavior pistonBehavior;
     boolean isBlockEntity;
+    boolean isNonVanilla;
 
     /**
      * @return the identifier without the additional block states

File: core/src/main/java/org/geysermc/geyser/registry/type/GeyserMappingItem.java
Patch:
@@ -30,6 +30,7 @@
 import lombok.EqualsAndHashCode;
 import lombok.Getter;
 import lombok.NoArgsConstructor;
+import lombok.Setter;
 import lombok.ToString;
 import lombok.With;
 
@@ -39,6 +40,7 @@
 @ToString
 @EqualsAndHashCode
 @Getter
+@Setter
 @With
 @NoArgsConstructor
 @AllArgsConstructor

File: core/src/main/java/org/geysermc/geyser/skin/SkinManager.java
Patch:
@@ -277,7 +277,7 @@ public record GameProfileData(String skinUrl, String capeUrl, boolean isAlex) {
             return null;
         }
 
-        static GameProfileData loadFromJson(String encodedJson) throws IOException, IllegalArgumentException {
+        public static GameProfileData loadFromJson(String encodedJson) throws IOException, IllegalArgumentException {
             JsonNode skinObject = GeyserImpl.JSON_MAPPER.readTree(new String(Base64.getDecoder().decode(encodedJson), StandardCharsets.UTF_8));
             JsonNode textures = skinObject.get("textures");
 

File: core/src/main/java/org/geysermc/geyser/translator/level/block/entity/PistonBlockEntity.java
Patch:
@@ -42,7 +42,7 @@
 import org.geysermc.geyser.level.physics.BoundingBox;
 import org.geysermc.geyser.level.physics.CollisionManager;
 import org.geysermc.geyser.level.physics.Direction;
-import org.geysermc.geyser.registry.Registries;
+import org.geysermc.geyser.registry.BlockRegistries;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.session.cache.PistonCache;
 import org.geysermc.geyser.translator.collision.BlockCollision;
@@ -95,7 +95,7 @@ public class PistonBlockEntity {
 
     static {
         // Create a ~1 x ~0.5 x ~1 bounding box above the honey block
-        BlockCollision blockCollision = Registries.COLLISIONS.get(BlockStateValues.JAVA_HONEY_BLOCK_ID);
+        BlockCollision blockCollision = BlockRegistries.COLLISIONS.get(BlockStateValues.JAVA_HONEY_BLOCK_ID);
         if (blockCollision == null) {
             throw new RuntimeException("Failed to find honey block collision");
         }
@@ -485,7 +485,7 @@ private void pushPlayerBlock(int javaId, Vector3d startingPos, double blockMovem
             pistonCache.displacePlayer(movement.mul(delta));
         } else {
             // Move the player out of collision
-            BlockCollision blockCollision = Registries.COLLISIONS.get(javaId);
+            BlockCollision blockCollision = BlockRegistries.COLLISIONS.get(javaId);
             if (blockCollision != null) {
                 Vector3d extend = movement.mul(Math.min(1 - blockMovement, 0.5));
                 Direction movementDirection = orientation;

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaUpdateRecipesTranslator.java
Patch:
@@ -110,7 +110,7 @@ public void translate(GeyserSession session, ClientboundUpdateRecipesPacket pack
                 case CRAFTING_SHAPELESS -> {
                     ShapelessRecipeData shapelessRecipeData = (ShapelessRecipeData) recipe.getData();
                     ItemData output = ItemTranslator.translateToBedrock(session, shapelessRecipeData.getResult());
-                    if (output.equals(ItemData.AIR)) {
+                    if (!output.isValid()) {
                         // Likely modded item that Bedrock will complain about if it persists
                         continue;
                     }
@@ -131,7 +131,7 @@ public void translate(GeyserSession session, ClientboundUpdateRecipesPacket pack
                 case CRAFTING_SHAPED -> {
                     ShapedRecipeData shapedRecipeData = (ShapedRecipeData) recipe.getData();
                     ItemData output = ItemTranslator.translateToBedrock(session, shapedRecipeData.getResult());
-                    if (output.equals(ItemData.AIR)) {
+                    if (!output.isValid()) {
                         // Likely modded item that Bedrock will complain about if it persists
                         continue;
                     }
@@ -213,7 +213,7 @@ public void translate(GeyserSession session, ClientboundUpdateRecipesPacket pack
                 ItemDescriptorWithCount descriptor = ItemDescriptorWithCount.fromItem(input);
                 ItemStack javaOutput = stoneCuttingData.getResult();
                 ItemData output = ItemTranslator.translateToBedrock(session, javaOutput);
-                if (input.equals(ItemData.AIR) || output.equals(ItemData.AIR)) {
+                if (!input.isValid() || !output.isValid()) {
                     // Probably modded items
                     continue;
                 }

File: core/src/main/java/org/geysermc/geyser/util/BlockUtils.java
Patch:
@@ -30,7 +30,7 @@
 import org.geysermc.geyser.inventory.GeyserItemStack;
 import org.geysermc.geyser.inventory.PlayerInventory;
 import org.geysermc.geyser.level.block.BlockStateValues;
-import org.geysermc.geyser.registry.Registries;
+import org.geysermc.geyser.registry.BlockRegistries;
 import org.geysermc.geyser.registry.type.BlockMapping;
 import org.geysermc.geyser.registry.type.ItemMapping;
 import org.geysermc.geyser.session.GeyserSession;
@@ -219,7 +219,7 @@ public static String getCleanIdentifier(String fullJavaIdentifier) {
     }
 
     public static BlockCollision getCollision(int blockId) {
-        return Registries.COLLISIONS.get(blockId);
+        return BlockRegistries.COLLISIONS.get(blockId);
     }
 
     public static BlockCollision getCollisionAt(GeyserSession session, Vector3i blockPos) {

File: core/src/main/java/org/geysermc/geyser/inventory/AnvilContainer.java
Patch:
@@ -75,7 +75,7 @@ public String checkForRename(GeyserSession session, String rename) {
 
         String originalName = ItemUtils.getCustomName(getInput().getNbt());
 
-        String plainOriginalName = MessageTranslator.convertToPlainText(originalName, session.locale());
+        String plainOriginalName = MessageTranslator.convertToPlainTextLenient(originalName, session.locale());
         String plainNewName = MessageTranslator.convertToPlainText(rename);
         if (!plainOriginalName.equals(plainNewName)) {
             // Strip out formatting since Java Edition does not allow it

File: core/src/main/java/org/geysermc/geyser/inventory/updater/AnvilInventoryUpdater.java
Patch:
@@ -118,7 +118,7 @@ private void updateInventoryState(GeyserSession session, AnvilContainer anvilCon
 
             // Changing the item in the input slot resets the name field on Bedrock, but
             // does not result in a FilterTextPacket
-            String originalName = MessageTranslator.convertToPlainText(ItemUtils.getCustomName(input.getNbt()), session.locale());
+            String originalName = MessageTranslator.convertToPlainTextLenient(ItemUtils.getCustomName(input.getNbt()), session.locale());
             ServerboundRenameItemPacket renameItemPacket = new ServerboundRenameItemPacket(originalName);
             session.sendDownstreamPacket(renameItemPacket);
 

File: core/src/main/java/org/geysermc/geyser/text/DummyLegacyHoverEventSerializer.java
Patch:
@@ -28,7 +28,7 @@
 import net.kyori.adventure.key.Key;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.event.HoverEvent;
-import net.kyori.adventure.text.serializer.gson.LegacyHoverEventSerializer;
+import net.kyori.adventure.text.serializer.json.LegacyHoverEventSerializer;
 import net.kyori.adventure.util.Codec;
 import org.jetbrains.annotations.NotNull;
 
@@ -40,9 +40,9 @@ public final class DummyLegacyHoverEventSerializer implements LegacyHoverEventSe
     private final HoverEvent.ShowItem dummyShowItem;
 
     public DummyLegacyHoverEventSerializer() {
-        dummyShowEntity = HoverEvent.ShowEntity.of(Key.key("geysermc", "dummyshowitem"),
+        dummyShowEntity = HoverEvent.ShowEntity.showEntity(Key.key("geysermc", "dummyshowitem"),
                 UUID.nameUUIDFromBytes("entitiesareprettyneat".getBytes(StandardCharsets.UTF_8)));
-        dummyShowItem = HoverEvent.ShowItem.of(Key.key("geysermc", "dummyshowentity"), 0);
+        dummyShowItem = HoverEvent.ShowItem.showItem(Key.key("geysermc", "dummyshowentity"), 0);
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/translator/level/block/entity/CommandBlockBlockEntityTranslator.java
Patch:
@@ -43,7 +43,7 @@ public void translateTag(NbtMapBuilder builder, CompoundTag tag, int blockState)
         // Java and Bedrock values
         builder.put("conditionMet", ((ByteTag) tag.get("conditionMet")).getValue());
         builder.put("auto", ((ByteTag) tag.get("auto")).getValue());
-        builder.put("CustomName", MessageTranslator.convertMessage(((StringTag) tag.get("CustomName")).getValue()));
+        builder.put("CustomName", MessageTranslator.convertJsonMessage(((StringTag) tag.get("CustomName")).getValue()));
         builder.put("powered", ((ByteTag) tag.get("powered")).getValue());
         builder.put("Command", ((StringTag) tag.get("Command")).getValue());
         builder.put("SuccessCount", ((IntTag) tag.get("SuccessCount")).getValue());

File: core/src/main/java/org/geysermc/geyser/entity/EntityDefinitions.java
Patch:
@@ -788,7 +788,7 @@ public final class EntityDefinitions {
                     .build();
             FOX = EntityDefinition.inherited(FoxEntity::new, ageableEntityBase)
                     .type(EntityType.FOX)
-                    .height(0.5f).width(1.25f)
+                    .height(0.7f).width(0.6f)
                     .addTranslator(MetadataType.INT, FoxEntity::setFoxVariant)
                     .addTranslator(MetadataType.BYTE, FoxEntity::setFoxFlags)
                     .addTranslator(null) // Trusted player 1

File: core/src/main/java/org/geysermc/geyser/entity/type/LivingEntity.java
Patch:
@@ -41,7 +41,6 @@
 import org.cloudburstmc.math.vector.Vector3f;
 import org.cloudburstmc.math.vector.Vector3i;
 import org.cloudburstmc.protocol.bedrock.data.AttributeData;
-import org.cloudburstmc.protocol.bedrock.data.definitions.ItemDefinition;
 import org.cloudburstmc.protocol.bedrock.data.entity.EntityDataTypes;
 import org.cloudburstmc.protocol.bedrock.data.entity.EntityFlag;
 import org.cloudburstmc.protocol.bedrock.data.inventory.ContainerId;
@@ -211,10 +210,10 @@ public void updateArmor(GeyserSession session) {
         // If an entity has a banner on them, it will be in the helmet slot in Java but the chestplate spot in Bedrock
         // But don't overwrite the chestplate if it isn't empty
         ItemMapping banner = session.getItemMappings().getStoredItems().banner();
-        if (ItemDefinition.AIR.equals(chestplate.getDefinition()) && helmet.getDefinition().equals(banner)) {
+        if (ItemData.AIR.equals(chestplate) && helmet.getDefinition().equals(banner.getBedrockDefinition())) {
             chestplate = this.helmet;
             helmet = ItemData.AIR;
-        } else if (chestplate.getDefinition().equals(banner)) {
+        } else if (chestplate.getDefinition().equals(banner.getBedrockDefinition())) {
             // Prevent chestplate banners from showing erroneously
             chestplate = ItemData.AIR;
         }

File: core/src/main/java/org/geysermc/geyser/registry/loader/ResourcePackLoader.java
Patch:
@@ -146,7 +146,7 @@ public static GeyserResourcePack readPack(Path path) throws IllegalArgumentExcep
             // Check if a file exists with the same name as the resource pack suffixed by .key,
             // and set this as content key. (e.g. test.zip, key file would be test.zip.key)
             Path keyFile = path.resolveSibling(path.getFileName().toString() + ".key");
-            String contentKey = Files.exists(keyFile) ? Files.readString(path, StandardCharsets.UTF_8) : "";
+            String contentKey = Files.exists(keyFile) ? Files.readString(keyFile, StandardCharsets.UTF_8) : "";
 
             return new GeyserResourcePack(new GeyserPathPackCodec(path), manifest, contentKey);
         } catch (Exception e) {

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/BedrockBlockEntityDataTranslator.java
Patch:
@@ -43,9 +43,9 @@ public class BedrockBlockEntityDataTranslator extends PacketTranslator<BlockEnti
     public void translate(GeyserSession session, BlockEntityDataPacket packet) {
         NbtMap tag = packet.getData();
         String id = tag.getString("id");
-        if (id.equals("Sign")) {
+        if (id.endsWith("Sign")) {
             // Hanging signs are narrower
-            int widthMax = SignUtils.getSignWidthMax(session.getGeyser().getWorldManager().getBlockAt(session, packet.getBlockPosition()));
+            int widthMax = SignUtils.getSignWidthMax(id.startsWith("Hanging"));
 
             String text = MessageTranslator.convertToPlainText(
                 tag.getCompound(session.getWorldCache().isEditingSignOnFront() ? "FrontText" : "BackText").getString("Text"));

File: core/src/main/java/org/geysermc/geyser/util/SignUtils.java
Patch:
@@ -61,8 +61,8 @@ public static int getCharacterWidth(char c) {
         };
     }
 
-    public static int getSignWidthMax(int javaBlockState) {
-        if (BlockStateValues.isHangingSign(javaBlockState)) {
+    public static int getSignWidthMax(boolean hanging) {
+        if (hanging) {
             return HANGING_SIGN_WIDTH_MAX;
         }
         return SIGN_WIDTH_MAX;

File: core/src/main/java/org/geysermc/geyser/network/netty/proxy/ProxyServerHandler.java
Patch:
@@ -73,10 +73,10 @@ protected void channelRead0(ChannelHandlerContext ctx, DatagramPacket packet) {
             presentAddress = new InetSocketAddress(decoded.sourceAddress(), decoded.sourcePort());
             log.debug("Got PROXY header: (from {}) {}", packet.sender(), presentAddress);
             GeyserImpl.getInstance().getGeyserServer().getProxiedAddresses().put(packet.sender(), presentAddress);
-            return;
+        } else {
+            log.trace("Reusing PROXY header: (from {}) {}", packet.sender(), presentAddress);
         }
 
-        log.trace("Reusing PROXY header: (from {}) {}", packet.sender(), presentAddress);
         ctx.fireChannelRead(packet.retain());
     }
 }
\ No newline at end of file

File: core/src/main/java/org/geysermc/geyser/inventory/item/StoredItemMappings.java
Patch:
@@ -51,6 +51,7 @@ public class StoredItemMappings {
     private final ItemMapping egg;
     private final ItemMapping shield;
     private final ItemMapping wheat;
+    private final ItemMapping writableBook;
 
     public StoredItemMappings(Map<Item, ItemMapping> itemMappings) {
         this.bamboo = load(itemMappings, Items.BAMBOO);
@@ -64,6 +65,7 @@ public StoredItemMappings(Map<Item, ItemMapping> itemMappings) {
         this.egg = load(itemMappings, Items.EGG);
         this.shield = load(itemMappings, Items.SHIELD);
         this.wheat = load(itemMappings, Items.WHEAT);
+        this.writableBook = load(itemMappings, Items.WRITABLE_BOOK);
     }
 
     @Nonnull

File: core/src/main/java/org/geysermc/geyser/item/Items.java
Patch:
@@ -1084,8 +1084,8 @@ public final class Items {
     public static final Item ZOMBIFIED_PIGLIN_SPAWN_EGG = register(new SpawnEggItem("zombified_piglin_spawn_egg", builder()));
     public static final Item EXPERIENCE_BOTTLE = register(new Item("experience_bottle", builder()));
     public static final Item FIRE_CHARGE = register(new Item("fire_charge", builder()));
-    public static final Item WRITABLE_BOOK = register(new ReadableBookItem("writable_book", builder().stackSize(1)));
-    public static final Item WRITTEN_BOOK = register(new ReadableBookItem("written_book", builder().stackSize(16)));
+    public static final Item WRITABLE_BOOK = register(new WritableBookItem("writable_book", builder().stackSize(1)));
+    public static final Item WRITTEN_BOOK = register(new WrittenBookItem("written_book", builder().stackSize(16)));
     public static final Item ITEM_FRAME = register(new Item("item_frame", builder()));
     public static final Item GLOW_ITEM_FRAME = register(new Item("glow_item_frame", builder()));
     public static final Item FLOWER_POT = register(new BlockItem("flower_pot", builder()));

File: core/src/main/java/org/geysermc/geyser/session/cache/BookEditCache.java
Patch:
@@ -62,7 +62,7 @@ public void checkForSend() {
         if ((System.currentTimeMillis() - lastBookUpdate) < 1000) {
             return;
         }
-        // Don't send the update if the player isn't not holding a book, shouldn't happen if we catch all interactions
+        // Don't send the update if the player is not holding a book, shouldn't happen if we catch all interactions
         GeyserItemStack itemStack = session.getPlayerInventory().getItemInHand();
         if (itemStack == null || itemStack.asItem() != Items.WRITABLE_BOOK) {
             packet = null;

File: bootstrap/bungeecord/src/main/java/org/geysermc/geyser/platform/bungeecord/GeyserBungeePlugin.java
Patch:
@@ -31,7 +31,7 @@
 import net.md_5.bungee.api.plugin.Plugin;
 import net.md_5.bungee.protocol.ProtocolConstants;
 import org.checkerframework.checker.nullness.qual.Nullable;
-import org.geysermc.common.PlatformType;
+import org.geysermc.geyser.api.util.PlatformType;
 import org.geysermc.geyser.GeyserBootstrap;
 import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.api.command.Command;

File: bootstrap/fabric/src/main/java/org/geysermc/geyser/platform/fabric/GeyserFabricMod.java
Patch:
@@ -36,7 +36,7 @@
 import net.minecraft.commands.Commands;
 import net.minecraft.server.MinecraftServer;
 import org.apache.logging.log4j.LogManager;
-import org.geysermc.common.PlatformType;
+import org.geysermc.geyser.api.util.PlatformType;
 import org.geysermc.geyser.GeyserBootstrap;
 import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.GeyserLogger;

File: bootstrap/spigot/src/main/java/org/geysermc/geyser/platform/spigot/GeyserSpigotPlugin.java
Patch:
@@ -42,7 +42,7 @@
 import org.bukkit.permissions.PermissionDefault;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.java.JavaPlugin;
-import org.geysermc.common.PlatformType;
+import org.geysermc.geyser.api.util.PlatformType;
 import org.geysermc.geyser.Constants;
 import org.geysermc.geyser.GeyserBootstrap;
 import org.geysermc.geyser.GeyserImpl;

File: bootstrap/sponge/src/main/java/org/geysermc/geyser/platform/sponge/GeyserSpongePlugin.java
Patch:
@@ -27,7 +27,7 @@
 
 import com.google.inject.Inject;
 import org.apache.logging.log4j.Logger;
-import org.geysermc.common.PlatformType;
+import org.geysermc.geyser.api.util.PlatformType;
 import org.geysermc.geyser.GeyserBootstrap;
 import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.api.command.Command;

File: bootstrap/standalone/src/main/java/org/geysermc/geyser/platform/standalone/GeyserStandaloneBootstrap.java
Patch:
@@ -38,7 +38,7 @@
 import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Logger;
 import org.apache.logging.log4j.core.appender.ConsoleAppender;
-import org.geysermc.common.PlatformType;
+import org.geysermc.geyser.api.util.PlatformType;
 import org.geysermc.geyser.GeyserBootstrap;
 import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.command.GeyserCommandManager;

File: bootstrap/velocity/src/main/java/org/geysermc/geyser/platform/velocity/GeyserVelocityPlugin.java
Patch:
@@ -36,7 +36,7 @@
 import com.velocitypowered.api.proxy.ProxyServer;
 import lombok.Getter;
 import net.kyori.adventure.util.Codec;
-import org.geysermc.common.PlatformType;
+import org.geysermc.geyser.api.util.PlatformType;
 import org.geysermc.geyser.GeyserBootstrap;
 import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.api.command.Command;

File: core/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -26,7 +26,7 @@
 package org.geysermc.connector;
 
 import org.geysermc.api.Geyser;
-import org.geysermc.common.PlatformType;
+import org.geysermc.geyser.api.util.PlatformType;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.geyser.GeyserImpl;
 

File: core/src/main/java/org/geysermc/geyser/command/GeyserCommandManager.java
Patch:
@@ -29,7 +29,7 @@
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
 import org.checkerframework.checker.nullness.qual.NonNull;
-import org.geysermc.common.PlatformType;
+import org.geysermc.geyser.api.util.PlatformType;
 import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.api.command.Command;
 import org.geysermc.geyser.api.command.CommandExecutor;

File: core/src/main/java/org/geysermc/geyser/command/defaults/ConnectionTestCommand.java
Patch:
@@ -26,7 +26,7 @@
 package org.geysermc.geyser.command.defaults;
 
 import com.fasterxml.jackson.databind.JsonNode;
-import org.geysermc.common.PlatformType;
+import org.geysermc.geyser.api.util.PlatformType;
 import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.command.GeyserCommand;
 import org.geysermc.geyser.command.GeyserCommandSource;

File: core/src/main/java/org/geysermc/geyser/command/defaults/DumpCommand.java
Patch:
@@ -30,7 +30,7 @@
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.checkerframework.checker.nullness.qual.NonNull;
-import org.geysermc.common.PlatformType;
+import org.geysermc.geyser.api.util.PlatformType;
 import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.command.GeyserCommand;
 import org.geysermc.geyser.command.GeyserCommandSource;

File: core/src/main/java/org/geysermc/geyser/command/defaults/HelpCommand.java
Patch:
@@ -25,7 +25,7 @@
 
 package org.geysermc.geyser.command.defaults;
 
-import org.geysermc.common.PlatformType;
+import org.geysermc.geyser.api.util.PlatformType;
 import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.api.command.Command;
 import org.geysermc.geyser.command.GeyserCommand;

File: core/src/main/java/org/geysermc/geyser/command/defaults/ReloadCommand.java
Patch:
@@ -25,7 +25,7 @@
 
 package org.geysermc.geyser.command.defaults;
 
-import org.geysermc.common.PlatformType;
+import org.geysermc.geyser.api.util.PlatformType;
 import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.command.GeyserCommand;
 import org.geysermc.geyser.command.GeyserCommandSource;

File: core/src/main/java/org/geysermc/geyser/command/defaults/StopCommand.java
Patch:
@@ -25,7 +25,7 @@
 
 package org.geysermc.geyser.command.defaults;
 
-import org.geysermc.common.PlatformType;
+import org.geysermc.geyser.api.util.PlatformType;
 import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.command.GeyserCommand;
 import org.geysermc.geyser.command.GeyserCommandSource;

File: core/src/main/java/org/geysermc/geyser/command/defaults/VersionCommand.java
Patch:
@@ -26,7 +26,7 @@
 package org.geysermc.geyser.command.defaults;
 
 import org.cloudburstmc.protocol.bedrock.codec.BedrockCodec;
-import org.geysermc.common.PlatformType;
+import org.geysermc.geyser.api.util.PlatformType;
 import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.command.GeyserCommand;
 import org.geysermc.geyser.command.GeyserCommandSource;

File: core/src/main/java/org/geysermc/geyser/dump/BootstrapDumpInfo.java
Patch:
@@ -27,7 +27,7 @@
 
 import lombok.AllArgsConstructor;
 import lombok.Getter;
-import org.geysermc.common.PlatformType;
+import org.geysermc.geyser.api.util.PlatformType;
 import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.text.AsteriskSerializer;
 

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -99,7 +99,7 @@
 import org.geysermc.api.util.BedrockPlatform;
 import org.geysermc.api.util.InputMode;
 import org.geysermc.api.util.UiProfile;
-import org.geysermc.common.PlatformType;
+import org.geysermc.geyser.api.util.PlatformType;
 import org.geysermc.cumulus.form.Form;
 import org.geysermc.cumulus.form.util.FormBuilder;
 import org.geysermc.floodgate.crypto.FloodgateCipher;

File: core/src/main/java/org/geysermc/geyser/translator/level/block/entity/PistonBlockEntity.java
Patch:
@@ -36,7 +36,7 @@
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import lombok.Getter;
-import org.geysermc.common.PlatformType;
+import org.geysermc.geyser.api.util.PlatformType;
 import org.geysermc.geyser.level.block.BlockStateValues;
 import org.geysermc.geyser.level.physics.Axis;
 import org.geysermc.geyser.level.physics.BoundingBox;

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/BedrockCommandRequestTranslator.java
Patch:
@@ -26,7 +26,7 @@
 package org.geysermc.geyser.translator.protocol.bedrock;
 
 import org.cloudburstmc.protocol.bedrock.packet.CommandRequestPacket;
-import org.geysermc.common.PlatformType;
+import org.geysermc.geyser.api.util.PlatformType;
 import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.translator.protocol.PacketTranslator;

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaLoginDisconnectTranslator.java
Patch:
@@ -29,7 +29,7 @@
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.TextComponent;
 import net.kyori.adventure.text.TranslatableComponent;
-import org.geysermc.common.PlatformType;
+import org.geysermc.geyser.api.util.PlatformType;
 import org.geysermc.geyser.network.GameProtocol;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.text.GeyserLocale;

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaBlockEventTranslator.java
Patch:
@@ -33,7 +33,7 @@
 import org.cloudburstmc.protocol.bedrock.packet.BlockEntityDataPacket;
 import org.cloudburstmc.protocol.bedrock.packet.BlockEventPacket;
 import it.unimi.dsi.fastutil.objects.Object2IntMaps;
-import org.geysermc.common.PlatformType;
+import org.geysermc.geyser.api.util.PlatformType;
 import org.geysermc.geyser.level.block.BlockStateValues;
 import org.geysermc.geyser.level.physics.Direction;
 import org.geysermc.geyser.session.GeyserSession;

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaBlockUpdateTranslator.java
Patch:
@@ -29,7 +29,7 @@
 import org.cloudburstmc.math.vector.Vector3i;
 import org.cloudburstmc.protocol.bedrock.data.SoundEvent;
 import org.cloudburstmc.protocol.bedrock.packet.LevelSoundEventPacket;
-import org.geysermc.common.PlatformType;
+import org.geysermc.geyser.api.util.PlatformType;
 import org.geysermc.geyser.registry.BlockRegistries;
 import org.geysermc.geyser.registry.type.BlockMapping;
 import org.geysermc.geyser.session.GeyserSession;

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/BedrockCommandRequestTranslator.java
Patch:
@@ -29,7 +29,6 @@
 import org.geysermc.common.PlatformType;
 import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.session.GeyserSession;
-import org.geysermc.geyser.text.ChatColor;
 import org.geysermc.geyser.translator.protocol.PacketTranslator;
 import org.geysermc.geyser.translator.protocol.Translator;
 import org.geysermc.geyser.translator.text.MessageTranslator;
@@ -46,7 +45,9 @@ public void translate(GeyserSession session, CommandRequestPacket packet) {
                 return;
             }
 
-            session.sendCommand(command.substring(1));
+            // running commands via Bedrock's command select menu adds a trailing whitespace which Java doesn't like
+            // https://github.com/GeyserMC/Geyser/issues/3877
+            session.sendCommand(command.substring(1).stripTrailing());
         }
     }
 }

File: core/src/main/java/org/geysermc/geyser/entity/type/Entity.java
Patch:
@@ -493,9 +493,10 @@ public Vector3f getBedrockRotation() {
      * Update the mount offsets of each passenger on this vehicle
      */
     protected void updatePassengerOffsets() {
-        for (Entity passenger : passengers) {
+        for (int i = 0; i < passengers.size(); i++) {
+            Entity passenger = passengers.get(i);
             if (passenger != null) {
-                boolean rider = passengers.get(0) == this;
+                boolean rider = i == 0;
                 EntityUtils.updateMountOffset(passenger, this, rider, true, passengers.size() > 1);
                 passenger.updateBedrockMetadata();
             }

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/horse/CamelEntity.java
Patch:
@@ -43,7 +43,7 @@
 
 public class CamelEntity extends AbstractHorseEntity {
 
-    private static final float SITTING_HEIGHT_DIFFERENCE = 1.43F;
+    public static final float SITTING_HEIGHT_DIFFERENCE = 1.43F;
 
     public CamelEntity(GeyserSession session, int entityId, long geyserId, UUID uuid, EntityDefinition<?> definition, Vector3f position, Vector3f motion, float yaw, float pitch, float headYaw) {
         super(session, entityId, geyserId, uuid, definition, position, motion, yaw, pitch, headYaw);
@@ -103,7 +103,7 @@ public void setPose(Pose pose) {
     @Override
     protected void setDimensions(Pose pose) {
         if (pose == Pose.SITTING) {
-            setBoundingBoxWidth(definition.height() - SITTING_HEIGHT_DIFFERENCE);
+            setBoundingBoxHeight(definition.height() - SITTING_HEIGHT_DIFFERENCE);
             setBoundingBoxWidth(definition.width());
         } else {
             super.setDimensions(pose);

File: core/src/main/java/org/geysermc/geyser/entity/type/BoatEntity.java
Patch:
@@ -125,8 +125,8 @@ public void updateRotation(float yaw, float pitch, boolean isOnGround) {
     public void setVariant(IntEntityMetadata entityMetadata) {
         variant = entityMetadata.getPrimitiveValue();
         dirtyMetadata.put(EntityDataTypes.VARIANT, switch (variant) {
-            case 6, 7 -> variant - 1; // Dark oak and mangrove
-            case 5, 8 -> 0; // TODO temp until 1.20. Cherry and bamboo
+            case 6, 7, 8 -> variant - 1; // dark_oak, mangrove, bamboo
+            case 5 -> 8; // cherry
             default -> variant;
         });
     }

File: core/src/main/java/org/geysermc/geyser/util/SoundUtils.java
Patch:
@@ -78,9 +78,9 @@ public static String translatePlaySound(String javaIdentifier) {
     }
 
     private static String trim(String identifier) {
-        // Drop the Minecraft namespace if applicable
-        if (identifier.startsWith("minecraft:")) {
-            return identifier.substring("minecraft:".length());
+        // Drop any namespace if applicable
+        if (identifier.contains(":") {
+            return identifier.split(":")[1];
         }
         return identifier;
     }

File: core/src/main/java/org/geysermc/geyser/translator/inventory/InventoryTranslator.java
Patch:
@@ -92,7 +92,7 @@ public abstract class InventoryTranslator {
             put(ContainerType.LOOM, new LoomInventoryTranslator());
             put(ContainerType.MERCHANT, new MerchantInventoryTranslator());
             put(ContainerType.SHULKER_BOX, new ShulkerInventoryTranslator());
-            put(ContainerType.SMITHING, new SmithingInventoryTranslator()); // todo: 1.20 smithing
+            put(ContainerType.SMITHING, new SmithingInventoryTranslator());
             put(ContainerType.STONECUTTER, new StonecutterInventoryTranslator());
 
             /* Lectern */

File: core/src/main/java/org/geysermc/geyser/registry/populator/ItemRegistryPopulator.java
Patch:
@@ -468,7 +468,7 @@ public static void populate() {
                         .build());
 
                 creativeItems.add(ItemData.builder()
-                        .netId(creativeNetId.getAndIncrement())
+                        .netId(creativeNetId.incrementAndGet())
                         .definition(definition)
                         .count(1)
                         .build());
@@ -501,7 +501,7 @@ public static void populate() {
                     if (customItem.creativeGroup() != null || customItem.creativeCategory().isPresent()) {
                         creativeItems.add(ItemData.builder()
                                 .definition(registration.mapping().getBedrockDefinition())
-                                .netId(creativeNetId.getAndIncrement())
+                                .netId(creativeNetId.incrementAndGet())
                                 .count(1)
                                 .build());
                     }

File: core/src/main/java/org/geysermc/geyser/Constants.java
Patch:
@@ -46,9 +46,8 @@ public final class Constants {
         try {
             wsUri = new URI("wss://api.geysermc.org/ws");
         } catch (URISyntaxException e) {
-            GeyserImpl.getInstance().getLogger().error("Unable to resolve api.geysermc.org! Check your internet connection.");
             e.printStackTrace();
         }
         GLOBAL_API_WS_URI = wsUri;
     }
-}
+}
\ No newline at end of file

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/BedrockActionTranslator.java
Patch:
@@ -238,7 +238,7 @@ public void translate(GeyserSession session, PlayerActionPacket packet) {
                 attributesPacket.getAttributes().addAll(entity.getAttributes().values());
                 session.sendUpstreamPacket(attributesPacket);
 
-                session.getEntityCache().updateBossBars();
+                session.getEntityCache().addBossBars();
                 break;
             case JUMP:
                 entity.setOnGround(false); // Increase block break time while jumping

File: core/src/main/java/org/geysermc/geyser/registry/populator/ItemRegistryPopulator.java
Patch:
@@ -398,7 +398,7 @@ public static void populate() {
                         }
 
                         GeyserCustomMappingData customMapping = CustomItemRegistryPopulator.registerCustomItem(
-                                customItemName, mappingItem, customItem, customProtocolId
+                                customItemName, javaItem, mappingItem, customItem, customProtocolId
                         );
                         // ComponentItemData - used to register some custom properties
                         componentItemData.add(customMapping.componentItemData());

File: core/src/main/java/org/geysermc/geyser/registry/type/GeyserMappingItem.java
Patch:
@@ -37,12 +37,10 @@ public class GeyserMappingItem {
     @JsonProperty("bedrock_data") int bedrockData;
     Integer firstBlockRuntimeId;
     Integer lastBlockRuntimeId;
-    @JsonProperty("stack_size") int stackSize = 64;
     @JsonProperty("tool_type") String toolType;
     @JsonProperty("tool_tier") String toolTier;
     @JsonProperty("armor_type") String armorType;
     @JsonProperty("protection_value") int protectionValue;
-    @JsonProperty("max_damage") int maxDamage = 0;
     @JsonProperty("is_edible") boolean edible = false;
     @JsonProperty("is_entity_placer") boolean entityPlacer = false;
 }

File: core/src/main/java/org/geysermc/geyser/registry/loader/SoundEventsRegistryLoader.java
Patch:
@@ -58,20 +58,20 @@ public Map<LevelEvent, LevelEventTranslator> load(String input) {
                 LevelEventTranslator transformer = null;
                 switch (type) {
                     case "soundLevel" -> {
-                        javaEffect = LevelEvent.valueOf(entry.getKey());
+                        javaEffect = com.github.steveice10.mc.protocol.data.game.level.event.LevelEventType.valueOf(entry.getKey());
                         LevelEventType levelEventType = org.cloudburstmc.protocol.bedrock.data.LevelEvent.valueOf(node.get("name").asText());
                         int data = node.has("data") ? node.get("data").intValue() : 0;
                         transformer = new SoundLevelEventTranslator(levelEventType, data);
                     }
                     case "soundEvent" -> {
-                        javaEffect = LevelEvent.valueOf(entry.getKey());
+                        javaEffect = com.github.steveice10.mc.protocol.data.game.level.event.LevelEventType.valueOf(entry.getKey());
                         org.cloudburstmc.protocol.bedrock.data.SoundEvent soundEvent = org.cloudburstmc.protocol.bedrock.data.SoundEvent.valueOf(node.get("name").asText());
                         String identifier = node.has("identifier") ? node.get("identifier").asText() : "";
                         int extraData = node.has("extraData") ? node.get("extraData").intValue() : -1;
                         transformer = new SoundEventEventTranslator(soundEvent, identifier, extraData);
                     }
                     case "playSound" -> {
-                        javaEffect = LevelEvent.valueOf(entry.getKey());
+                        javaEffect = com.github.steveice10.mc.protocol.data.game.level.event.LevelEventType.valueOf(entry.getKey());
                         String name = node.get("name").asText();
                         float volume = node.has("volume") ? node.get("volume").floatValue() : 1.0f;
                         boolean pitchSub = node.has("pitch_sub") && node.get("pitch_sub").booleanValue();

File: core/src/main/java/org/geysermc/geyser/network/netty/proxy/ProxyProtocolDecoder.java
Patch:
@@ -478,7 +478,6 @@ protected HeaderExtractor(int maxHeaderSize) {
          * @param buffer  the {@link ByteBuf} from which to read data
          * @return frame  the {@link ByteBuf} which represent the frame or {@code null} if no frame could
          *                be created
-         * @throws Exception if exceed maxLength
          */
         public ByteBuf extract(ByteBuf buffer) {
             final int eoh = findEndOfHeader(buffer);

File: core/src/main/java/org/geysermc/geyser/network/netty/GeyserServer.java
Patch:
@@ -208,7 +208,9 @@ public BedrockPong onQuery(InetSocketAddress inetSocketAddress) {
                 .nintendoLimited(false)
                 .protocolVersion(GameProtocol.DEFAULT_BEDROCK_CODEC.getProtocolVersion())
                 .version(GameProtocol.DEFAULT_BEDROCK_CODEC.getMinecraftVersion()) // Required to not be empty as of 1.16.210.59. Can only contain . and numbers.
-                .ipv4Port(this.geyser.getConfig().getBedrock().port());
+                .ipv4Port(this.geyser.getConfig().getBedrock().port())
+                .ipv6Port(this.geyser.getConfig().getBedrock().port())
+                .serverId(future.channel().config().getOption(RakChannelOption.RAK_GUID));
 
         if (config.isPassthroughMotd() && pingInfo != null && pingInfo.getDescription() != null) {
             String[] motd = MessageTranslator.convertMessageLenient(pingInfo.getDescription()).split("\n");

File: bootstrap/sponge/src/main/java/org/geysermc/geyser/platform/sponge/GeyserSpongePlugin.java
Patch:
@@ -241,7 +241,7 @@ public int getServerPort() {
     }
 
     @Override
-    public boolean isFloodgatePluginPresent() {
+    public boolean testFloodgatePluginPresent() {
         return false;
     }
 }

File: bootstrap/standalone/src/main/java/org/geysermc/geyser/platform/standalone/GeyserStandaloneBootstrap.java
Patch:
@@ -304,7 +304,7 @@ public int getServerPort() {
     }
 
     @Override
-    public boolean isFloodgatePluginPresent() {
+    public boolean testFloodgatePluginPresent() {
         return false;
     }
 

File: core/src/main/java/org/geysermc/geyser/GeyserImpl.java
Patch:
@@ -324,11 +324,12 @@ private void startInstance() {
                 }
             }
 
-            if (config.getRemote().authType() == AuthType.FLOODGATE && !bootstrap.isFloodgatePluginPresent()) {
+            boolean floodgatePresent = bootstrap.testFloodgatePluginPresent();
+            if (config.getRemote().authType() == AuthType.FLOODGATE && !floodgatePresent) {
                 logger.severe(GeyserLocale.getLocaleStringLog("geyser.bootstrap.floodgate.not_installed") + " "
                         + GeyserLocale.getLocaleStringLog("geyser.bootstrap.floodgate.disabling"));
                 return;
-            } else if (config.isAutoconfiguredRemote() && bootstrap.isFloodgatePluginPresent()) {
+            } else if (config.isAutoconfiguredRemote() && floodgatePresent) {
                 // Floodgate installed means that the user wants Floodgate authentication
                 logger.debug("Auto-setting to Floodgate authentication.");
                 config.getRemote().setAuthType(AuthType.FLOODGATE);

File: core/src/main/java/org/geysermc/geyser/network/netty/GeyserServer.java
Patch:
@@ -148,8 +148,6 @@ public void shutdown() {
     }
 
     private ServerBootstrap createBootstrap(EventLoopGroup group) {
-        // TODO
-        boolean enableProxyProtocol = this.geyser.getConfig().getBedrock().isEnableProxyProtocol();
         if (this.geyser.getConfig().isDebugMode()) {
             this.geyser.getLogger().debug("EventLoop type: " + TRANSPORT.datagramChannel());
             if (TRANSPORT.datagramChannel() == NioDatagramChannel.class) {

File: core/src/main/java/org/geysermc/geyser/GeyserBootstrap.java
Patch:
@@ -169,4 +169,6 @@ default Path getLogsPath() {
      * @return the listening port being used by the Java server. -1 if can't be found
      */
     int getServerPort();
+
+    boolean isFloodgatePluginPresent();
 }

File: core/src/test/java/org/geysermc/geyser/network/translators/chat/MessageTranslatorTest.java
Patch:
@@ -48,9 +48,9 @@ public void setUp() throws Exception {
         messages.put("{\"text\":\"\",\"extra\":[\"Plugins (3): \",{\"text\":\"WorldEdit\",\"color\":\"green\"},{\"text\":\", \",\"color\":\"white\"},{\"text\":\"ViaVersion\",\"color\":\"green\"},{\"text\":\", \",\"color\":\"white\"},{\"text\":\"Geyser-Spigot\",\"color\":\"green\"}]}",
                 "Plugins (3): §r§aWorldEdit§r§f, §r§aViaVersion§r§f, §r§aGeyser-Spigot");
 
-        // RGB downgrade test - FIXME
-        //messages.put("{\"extra\":[{\"text\":\"          \"},{\"color\":\"gold\",\"text\":\"The \"},{\"color\":\"#E14248\",\"obfuscated\":true,\"text\":\"||\"},{\"color\":\"#3AA9FF\",\"bold\":true,\"text\":\"CubeCraft\"},{\"color\":\"#E14248\",\"obfuscated\":true,\"text\":\"||\"},{\"color\":\"gold\",\"text\":\" Network \"},{\"color\":\"green\",\"text\":\"[1.8/1.9+]\\n         \"},{\"color\":\"#f5e342\",\"text\":\"✦ \"},{\"color\":\"#b042f5\",\"bold\":true,\"text\":\"N\"},{\"color\":\"#c142f5\",\"bold\":true,\"text\":\"E\"},{\"color\":\"#d342f5\",\"bold\":true,\"text\":\"W\"},{\"color\":\"#e442f5\",\"bold\":true,\"text\":\":\"},{\"color\":\"#f542f5\",\"bold\":true,\"text\":\" \"},{\"color\":\"#bcf542\",\"bold\":true,\"text\":\"A\"},{\"color\":\"#acee3f\",\"bold\":true,\"text\":\"M\"},{\"color\":\"#9ce73c\",\"bold\":true,\"text\":\"O\"},{\"color\":\"#8ce039\",\"bold\":true,\"text\":\"N\"},{\"color\":\"#7cd936\",\"bold\":true,\"text\":\"G\"},{\"color\":\"#6cd233\",\"bold\":true,\"text\":\" \"},{\"color\":\"#5ccb30\",\"bold\":true,\"text\":\"S\"},{\"color\":\"#4cc42d\",\"bold\":true,\"text\":\"L\"},{\"color\":\"#3cbd2a\",\"bold\":true,\"text\":\"I\"},{\"color\":\"#2cb627\",\"bold\":true,\"text\":\"M\"},{\"color\":\"#1caf24\",\"bold\":true,\"text\":\"E\"},{\"color\":\"#0ca821\",\"bold\":true,\"text\":\"S\"},{\"color\":\"#f5e342\",\"text\":\" \"},{\"color\":\"#6d7c87\",\"text\":\"(kinda sus) \"},{\"color\":\"#f5e342\",\"text\":\"✦\"}],\"text\":\"\"}","          §r§6The §r§c§k||§r§b§lCubeCraft§r§c§k||§r§6 Network §r§a[1.8/1.9+]\n" +
-        //                "         §r§e✦ §r§d§lN§r§d§lE§r§d§lW§r§d§l:§r§d§l §r§e§lA§r§e§lM§r§e§lO§r§a§lN§r§a§lG§r§a§l §r§a§lS§r§2§lL§r§2§lI§r§2§lM§r§2§lE§r§2§lS§r§e §r§b(kinda sus) §r§e✦");
+        // RGB downgrade test
+        messages.put("{\"extra\":[{\"text\":\"          \"},{\"color\":\"gold\",\"text\":\"The \"},{\"color\":\"#E14248\",\"obfuscated\":true,\"text\":\"||\"},{\"color\":\"#3AA9FF\",\"bold\":true,\"text\":\"CubeCraft\"},{\"color\":\"#E14248\",\"obfuscated\":true,\"text\":\"||\"},{\"color\":\"gold\",\"text\":\" Network \"},{\"color\":\"green\",\"text\":\"[1.8/1.9+]\\n         \"},{\"color\":\"#f5e342\",\"text\":\"✦ \"},{\"color\":\"#b042f5\",\"bold\":true,\"text\":\"N\"},{\"color\":\"#c142f5\",\"bold\":true,\"text\":\"E\"},{\"color\":\"#d342f5\",\"bold\":true,\"text\":\"W\"},{\"color\":\"#e442f5\",\"bold\":true,\"text\":\":\"},{\"color\":\"#f542f5\",\"bold\":true,\"text\":\" \"},{\"color\":\"#bcf542\",\"bold\":true,\"text\":\"A\"},{\"color\":\"#acee3f\",\"bold\":true,\"text\":\"M\"},{\"color\":\"#9ce73c\",\"bold\":true,\"text\":\"O\"},{\"color\":\"#8ce039\",\"bold\":true,\"text\":\"N\"},{\"color\":\"#7cd936\",\"bold\":true,\"text\":\"G\"},{\"color\":\"#6cd233\",\"bold\":true,\"text\":\" \"},{\"color\":\"#5ccb30\",\"bold\":true,\"text\":\"S\"},{\"color\":\"#4cc42d\",\"bold\":true,\"text\":\"L\"},{\"color\":\"#3cbd2a\",\"bold\":true,\"text\":\"I\"},{\"color\":\"#2cb627\",\"bold\":true,\"text\":\"M\"},{\"color\":\"#1caf24\",\"bold\":true,\"text\":\"E\"},{\"color\":\"#0ca821\",\"bold\":true,\"text\":\"S\"},{\"color\":\"#f5e342\",\"text\":\" \"},{\"color\":\"#6d7c87\",\"text\":\"(kinda sus) \"},{\"color\":\"#f5e342\",\"text\":\"✦\"}],\"text\":\"\"}","          §r§6The §r§c§k||§r§b§lCubeCraft§r§c§k||§r§6 Network §r§a[1.8/1.9+]\n" +
+                        "         §r§e✦ §r§d§lN§r§d§lE§r§d§lW§r§d§l:§r§d§l §r§e§lA§r§e§lM§r§e§lO§r§a§lN§r§a§lG§r§a§l §r§a§lS§r§2§lL§r§2§lI§r§q§lM§r§q§lE§r§q§lS§r§e §r§t(kinda sus) §r§e✦");
 
         // Color code format resetting
         messages.put("{\"text\":\"\",\"extra\":[{\"text\":\"\",\"extra\":[{\"text\":\"[\",\"color\":\"gray\"},{\"text\":\"H\",\"color\":\"yellow\"},{\"text\":\"]\",\"color\":\"gray\"},{\"text\":\" \",\"color\":\"white\"},{\"text\":\"GUEST\",\"color\":\"#b7b7b7\",\"bold\":true}]},{\"text\":\"\",\"extra\":[{\"text\":\" \",\"bold\":true},{\"text\":\"»\",\"color\":\"blue\"},{\"text\":\" \",\"color\":\"gray\"}]},{\"text\":\"\",\"extra\":[{\"text\":\"rtm516\",\"color\":\"white\"},{\"text\":\": \",\"color\":\"gray\"},{\"text\":\"\",\"color\":\"white\"}]},{\"text\":\"\",\"extra\":[{\"text\":\"This is an amazing bedrock test message\",\"color\":\"white\"}]}]}\n",

File: core/src/main/java/org/geysermc/geyser/registry/populator/BlockRegistryPopulator.java
Patch:
@@ -137,7 +137,7 @@ private static void registerBedrockBlocks() {
                 }
                 GeyserBedrockBlock block = new GeyserBedrockBlock(i, tag);
                 blockStateOrderedMap.put(tag, block);
-                //bedrockRuntimeMap[i] = block; //TODO UNCOMMENT IF SOMETHING IS WRONG IN THE CREATIVE PALETTE
+                bedrockRuntimeMap[i] = block;
                 if (stateVersion == -1) {
                     stateVersion = tag.getInt("version");
                 }
@@ -200,8 +200,6 @@ private static void registerBedrockBlocks() {
                 javaToBedrockBlocks[javaRuntimeId] = bedrockDefinition;
             }
 
-            Arrays.stream(javaToBedrockBlocks).distinct().forEach(block -> bedrockRuntimeMap[block.getRuntimeId()] = block);
-
             if (commandBlockDefinition == null) {
                 throw new AssertionError("Unable to find command block in palette");
             }

File: core/src/main/java/org/geysermc/geyser/translator/text/MessageTranslator.java
Patch:
@@ -112,7 +112,7 @@ public class MessageTranslator {
             formats.add(CharacterAndFormat.characterAndFormat('g', TextColor.color(221, 214, 5))); // Minecoin Gold
             // Add the new characters implemented in 1.19.80
             formats.add(CharacterAndFormat.characterAndFormat('h', TextColor.color(227, 212, 209))); // Quartz
-            formats.add(CharacterAndFormat.characterAndFormat('i', TextColor.color(206, 212, 202))); // Iron
+            formats.add(CharacterAndFormat.characterAndFormat('i', TextColor.color(206, 202, 202))); // Iron
             formats.add(CharacterAndFormat.characterAndFormat('j', TextColor.color(68, 58, 59))); // Netherite
             formats.add(CharacterAndFormat.characterAndFormat('m', TextColor.color(151, 22, 7))); // Redstone
             formats.add(CharacterAndFormat.characterAndFormat('n', TextColor.color(180, 104, 77))); // Copper

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaUpdateRecipesTranslator.java
Patch:
@@ -158,7 +158,7 @@ public void translate(GeyserSession session, ClientboundUpdateRecipesPacket pack
                             if (GameProtocol.supports1_19_60(session)) {
                                 // Note: vanilla inputs use aux value of Short.MAX_VALUE
                                 craftingDataPacket.getCraftingData().add(SmithingTransformRecipeData.of(recipe.getIdentifier(),
-                                        bedrockBase, bedrockAddition, output, "smithing_table", netId++));
+                                        ItemDescriptorWithCount.EMPTY, bedrockBase, bedrockAddition, output, "smithing_table", netId++));
                             } else {
                                 UUID uuid = UUID.randomUUID();
                                 craftingDataPacket.getCraftingData().add(org.cloudburstmc.protocol.bedrock.data.inventory.crafting.recipe.ShapelessRecipeData.shapeless(uuid.toString(),

File: core/src/main/java/org/geysermc/geyser/configuration/GeyserJacksonConfiguration.java
Patch:
@@ -53,9 +53,6 @@
 @SuppressWarnings("FieldMayBeFinal") // Jackson requires that the fields are not final
 public abstract class GeyserJacksonConfiguration implements GeyserConfiguration {
 
-    /**
-     * If the config was originally 'auto' before the values changed
-     */
     @Setter
     private boolean autoconfiguredRemote = false;
 
@@ -163,6 +160,7 @@ public abstract class GeyserJacksonConfiguration implements GeyserConfiguration
     public static class BedrockConfiguration implements IBedrockConfiguration {
         @AsteriskSerializer.Asterisk(isIp = true)
         @JsonProperty("address")
+        @Setter
         private String address = "0.0.0.0";
 
         @Override

File: core/src/main/java/org/geysermc/geyser/entity/type/player/PlayerEntity.java
Patch:
@@ -44,6 +44,7 @@
 import org.cloudburstmc.protocol.bedrock.data.entity.EntityFlag;
 import org.cloudburstmc.protocol.bedrock.data.entity.EntityLinkData;
 import org.cloudburstmc.protocol.bedrock.packet.*;
+import org.geysermc.geyser.api.entity.type.player.GeyserPlayerEntity;
 import org.geysermc.geyser.entity.EntityDefinitions;
 import org.geysermc.geyser.entity.type.Entity;
 import org.geysermc.geyser.entity.type.LivingEntity;
@@ -64,7 +65,7 @@
 import java.util.concurrent.TimeUnit;
 
 @Getter @Setter
-public class PlayerEntity extends LivingEntity {
+public class PlayerEntity extends LivingEntity implements GeyserPlayerEntity {
     public static final float SNEAKING_POSE_HEIGHT = 1.5f;
     protected static final List<AbilityLayer> BASE_ABILITY_LAYER;
 

File: core/src/main/java/org/geysermc/geyser/registry/populator/ItemRegistryPopulator.java
Patch:
@@ -379,6 +379,7 @@ public static void populate() {
                         // ComponentItemData - used to register some custom properties
                         componentItemData.add(customMapping.componentItemData());
                         customItemOptions.add(Pair.of(customItem.customItemOptions(), customMapping.itemDefinition()));
+                        registry.put(customMapping.integerId(), customMapping.itemDefinition());
 
                         customIdMappings.put(customMapping.integerId(), customMapping.stringId());
                     }

File: core/src/main/java/org/geysermc/geyser/registry/populator/CustomItemRegistryPopulator.java
Patch:
@@ -134,7 +134,6 @@ public static NonVanillaItemRegistration registerCustomItem(NonVanillaCustomItem
                 .stackSize(customItemData.stackSize())
                 .maxDamage(customItemData.maxDamage());
         Item item = new Item(customIdentifier, itemBuilder) {
-            // TODO ?
             @Override
             public boolean isValidRepairItem(Item other) {
                 return repairMaterials != null && repairMaterials.contains(other.javaIdentifier());

File: core/src/main/java/org/geysermc/geyser/scoreboard/Scoreboard.java
Patch:
@@ -368,7 +368,7 @@ public void removeTeam(String teamName) {
     }
 
     @Contract("-> new")
-    public LinkedHashMap<String, Set<CommandEnumConstraint>> getTeamNames() {
+    public Map<String, Set<CommandEnumConstraint>> getTeamNames() {
         return teams.keySet().stream()
                 .collect(Collectors.toMap(Function.identity(), o -> EnumSet.noneOf(CommandEnumConstraint.class),
                         (o1, o2) -> o1, LinkedHashMap::new));

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -84,7 +84,6 @@
 import org.cloudburstmc.nbt.NbtMap;
 import org.cloudburstmc.protocol.bedrock.BedrockServerSession;
 import org.cloudburstmc.protocol.bedrock.data.*;
-import org.cloudburstmc.protocol.bedrock.data.command.CommandEnumConstraint;
 import org.cloudburstmc.protocol.bedrock.data.command.CommandEnumData;
 import org.cloudburstmc.protocol.bedrock.data.command.CommandPermission;
 import org.cloudburstmc.protocol.bedrock.data.command.SoftEnumUpdateType;
@@ -1932,8 +1931,7 @@ public void removeCommandEnum(String name, String enums) {
     private void softEnumPacket(String name, SoftEnumUpdateType type, String enums) {
         UpdateSoftEnumPacket packet = new UpdateSoftEnumPacket();
         packet.setType(type);
-        // TODO
-        packet.setSoftEnum(new CommandEnumData(name, new LinkedHashMap<>(Collections.singletonMap(enums, EnumSet.noneOf(CommandEnumConstraint.class))), true));
+        packet.setSoftEnum(new CommandEnumData(name, Collections.singletonMap(enums, Collections.emptySet()), true));
         sendUpstreamPacket(packet);
     }
 }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaCommandsTranslator.java
Patch:
@@ -390,7 +390,7 @@ public void buildChildren(CommandBuilderContext context, CommandNode[] allNodes)
                             // String[] enumOptions = Arrays.copyOf(enumParamInfo.getParamData().getEnumData().getValues(), enumParamInfo.getParamData().getEnumData().getValues().size() + 1);
                             // enumOptions[enumOptions.length - 1] = paramNode.getName();
 
-                            LinkedHashMap<String, Set<CommandEnumConstraint>> values = (LinkedHashMap<String, Set<CommandEnumConstraint>>) enumParamInfo.getParamData().getEnumData().getValues().clone();
+                            Map<String, Set<CommandEnumConstraint>> values = new LinkedHashMap<>(enumParamInfo.getParamData().getEnumData().getValues());
                             values.put(paramNode.getName(), Set.of());
 
                             // Re-create the command using the updated values

File: bootstrap/spigot/src/main/java/org/geysermc/geyser/platform/spigot/world/GeyserSpigotBlockPlaceListener.java
Patch:
@@ -59,7 +59,7 @@ public void place(final BlockPlaceEvent event) {
                     event.getBlockPlaced().getX(), event.getBlockPlaced().getY(), event.getBlockPlaced().getZ())));
         } else {
             String javaBlockId = event.getBlockPlaced().getBlockData().getAsString();
-            placeBlockSoundPacket.setExtraData(session.getBlockMappings().getBedrockBlockId(BlockRegistries.JAVA_IDENTIFIERS.get().getOrDefault(javaBlockId, BlockStateValues.JAVA_AIR_ID)));
+            placeBlockSoundPacket.setExtraData(session.getBlockMappings().getBedrockBlockId(BlockRegistries.JAVA_IDENTIFIER_TO_ID.get().getOrDefault(javaBlockId, BlockStateValues.JAVA_AIR_ID)));
         }
         placeBlockSoundPacket.setIdentifier(":");
         session.sendUpstreamPacket(placeBlockSoundPacket);

File: bootstrap/spigot/src/main/java/org/geysermc/geyser/platform/spigot/world/manager/GeyserSpigotWorldManager.java
Patch:
@@ -82,9 +82,9 @@ public int getBlockNetworkId(Block block) {
             // Terrible behavior, but this is basically what's always been happening behind the scenes anyway.
             CompletableFuture<String> blockData = new CompletableFuture<>();
             Bukkit.getRegionScheduler().execute(this.plugin, block.getLocation(), () -> blockData.complete(block.getBlockData().getAsString()));
-            return BlockRegistries.JAVA_IDENTIFIERS.getOrDefault(blockData.join(), BlockStateValues.JAVA_AIR_ID);
+            return BlockRegistries.JAVA_IDENTIFIER_TO_ID.getOrDefault(blockData.join(), BlockStateValues.JAVA_AIR_ID);
         }
-        return BlockRegistries.JAVA_IDENTIFIERS.getOrDefault(block.getBlockData().getAsString(), BlockStateValues.JAVA_AIR_ID);
+        return BlockRegistries.JAVA_IDENTIFIER_TO_ID.getOrDefault(block.getBlockData().getAsString(), BlockStateValues.JAVA_AIR_ID);
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/entity/type/living/merchant/VillagerEntity.java
Patch:
@@ -27,14 +27,15 @@
 
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.EntityMetadata;
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.VillagerData;
+import lombok.Getter;
 import org.cloudburstmc.math.vector.Vector3f;
 import org.cloudburstmc.math.vector.Vector3i;
 import org.cloudburstmc.protocol.bedrock.data.entity.EntityDataTypes;
 import org.cloudburstmc.protocol.bedrock.data.entity.EntityFlag;
 import org.cloudburstmc.protocol.bedrock.packet.MoveEntityAbsolutePacket;
-import lombok.Getter;
 import org.geysermc.geyser.entity.EntityDefinition;
 import org.geysermc.geyser.registry.BlockRegistries;
+import org.geysermc.geyser.registry.type.BlockMapping;
 import org.geysermc.geyser.session.GeyserSession;
 
 import java.util.Optional;
@@ -117,7 +118,7 @@ public void moveRelative(double relX, double relY, double relZ, float yaw, float
         
         // The bed block
         int blockId = session.getGeyser().getWorldManager().getBlockAt(session, bedPosition);
-        String fullIdentifier = BlockRegistries.JAVA_IDENTIFIERS.get().get(blockId);
+        String fullIdentifier = BlockRegistries.JAVA_BLOCKS.getOrDefault(blockId, BlockMapping.AIR).getJavaIdentifier();
 
         // Set the correct position offset and rotation when sleeping
         int bedRotation = 0;

File: core/src/main/java/org/geysermc/geyser/inventory/holder/BlockInventoryHolder.java
Patch:
@@ -35,6 +35,7 @@
 import org.geysermc.geyser.inventory.Container;
 import org.geysermc.geyser.inventory.Inventory;
 import org.geysermc.geyser.registry.BlockRegistries;
+import org.geysermc.geyser.registry.type.BlockMapping;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.translator.inventory.InventoryTranslator;
 import org.geysermc.geyser.util.BlockUtils;
@@ -57,7 +58,7 @@ public class BlockInventoryHolder extends InventoryHolder {
     private final Set<String> validBlocks;
 
     public BlockInventoryHolder(String javaBlockIdentifier, ContainerType containerType, String... validBlocks) {
-        this.defaultJavaBlockState = BlockRegistries.JAVA_IDENTIFIERS.get(javaBlockIdentifier);
+        this.defaultJavaBlockState = BlockRegistries.JAVA_IDENTIFIER_TO_ID.get().getInt(javaBlockIdentifier);
         this.containerType = containerType;
         if (validBlocks != null) {
             Set<String> validBlocksTemp = new HashSet<>(validBlocks.length + 1);
@@ -77,7 +78,7 @@ public boolean prepareInventory(InventoryTranslator translator, GeyserSession se
         if (checkInteractionPosition(session)) {
             // Then, check to see if the interacted block is valid for this inventory by ensuring the block state identifier is valid
             int javaBlockId = session.getGeyser().getWorldManager().getBlockAt(session, session.getLastInteractionBlockPosition());
-            String[] javaBlockString = BlockRegistries.JAVA_IDENTIFIERS.get().getOrDefault(javaBlockId, "minecraft:air").split("\\[");
+            String[] javaBlockString = BlockRegistries.JAVA_BLOCKS.getOrDefault(javaBlockId, BlockMapping.AIR).getJavaIdentifier().split("\\[");
             if (isValidBlock(javaBlockString)) {
                 // We can safely use this block
                 inventory.setHolderPosition(session.getLastInteractionBlockPosition());

File: core/src/main/java/org/geysermc/geyser/level/block/BlockStateValues.java
Patch:
@@ -468,7 +468,7 @@ public static int getWaterLevel(int state) {
      */
     public static double getWaterHeight(int state) {
         int waterLevel = BlockStateValues.getWaterLevel(state);
-        if (BlockRegistries.WATERLOGGED.get().contains(state)) {
+        if (BlockRegistries.WATERLOGGED.get().get(state)) {
             waterLevel = 0;
         }
         if (waterLevel >= 0) {

File: core/src/main/java/org/geysermc/geyser/translator/inventory/chest/DoubleChestInventoryTranslator.java
Patch:
@@ -39,6 +39,7 @@
 import org.geysermc.geyser.level.block.BlockStateValues;
 import org.geysermc.geyser.level.block.DoubleChestValue;
 import org.geysermc.geyser.registry.BlockRegistries;
+import org.geysermc.geyser.registry.type.BlockMapping;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.translator.level.block.entity.DoubleChestBlockEntityTranslator;
 import org.geysermc.geyser.util.InventoryUtils;
@@ -48,15 +49,15 @@ public class DoubleChestInventoryTranslator extends ChestInventoryTranslator {
 
     public DoubleChestInventoryTranslator(int size) {
         super(size, 54);
-        this.defaultJavaBlockState = BlockRegistries.JAVA_IDENTIFIERS.get("minecraft:chest[facing=north,type=single,waterlogged=false]");
+        this.defaultJavaBlockState = BlockRegistries.JAVA_IDENTIFIER_TO_ID.get().getInt("minecraft:chest[facing=north,type=single,waterlogged=false]");
     }
 
     @Override
     public boolean prepareInventory(GeyserSession session, Inventory inventory) {
         // See BlockInventoryHolder - same concept there except we're also dealing with a specific block state
         if (session.getLastInteractionPlayerPosition().equals(session.getPlayerEntity().getPosition())) {
             int javaBlockId = session.getGeyser().getWorldManager().getBlockAt(session, session.getLastInteractionBlockPosition());
-            String[] javaBlockString = BlockRegistries.JAVA_IDENTIFIERS.get().getOrDefault(javaBlockId, "minecraft:air").split("\\[");
+            String[] javaBlockString = BlockRegistries.JAVA_BLOCKS.getOrDefault(javaBlockId, BlockMapping.AIR).getJavaIdentifier().split("\\[");
             if (javaBlockString.length > 1 && (javaBlockString[0].equals("minecraft:chest") || javaBlockString[0].equals("minecraft:trapped_chest"))
                     && !javaBlockString[1].contains("type=single")) {
                 inventory.setHolderPosition(session.getLastInteractionBlockPosition());

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/BedrockActionTranslator.java
Patch:
@@ -51,6 +51,7 @@
 import org.geysermc.geyser.entity.type.player.SessionPlayerEntity;
 import org.geysermc.geyser.level.block.BlockStateValues;
 import org.geysermc.geyser.registry.BlockRegistries;
+import org.geysermc.geyser.registry.type.BlockMapping;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.translator.protocol.PacketTranslator;
 import org.geysermc.geyser.translator.protocol.Translator;
@@ -163,7 +164,7 @@ public void translate(GeyserSession session, PlayerActionPacket packet) {
                 // Account for fire - the client likes to hit the block behind.
                 Vector3i fireBlockPos = BlockUtils.getBlockPosition(vector, packet.getFace());
                 int blockUp = session.getGeyser().getWorldManager().getBlockAt(session, fireBlockPos);
-                String identifier = BlockRegistries.JAVA_IDENTIFIERS.get().get(blockUp);
+                String identifier = BlockRegistries.JAVA_BLOCKS.getOrDefault(blockUp, BlockMapping.AIR).getJavaIdentifier();
                 if (identifier.startsWith("minecraft:fire") || identifier.startsWith("minecraft:soul_fire")) {
                     ServerboundPlayerActionPacket startBreakingPacket = new ServerboundPlayerActionPacket(PlayerAction.START_DIGGING, fireBlockPos,
                             Direction.VALUES[packet.getFace()], session.getWorldCache().nextPredictionSequence());

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaBlockUpdateTranslator.java
Patch:
@@ -31,6 +31,7 @@
 import org.cloudburstmc.protocol.bedrock.packet.LevelSoundEventPacket;
 import org.geysermc.common.PlatformType;
 import org.geysermc.geyser.registry.BlockRegistries;
+import org.geysermc.geyser.registry.type.BlockMapping;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.translator.protocol.PacketTranslator;
 import org.geysermc.geyser.translator.protocol.Translator;
@@ -99,7 +100,7 @@ private void checkInteract(GeyserSession session, ClientboundBlockUpdatePacket p
                 || lastInteractPos.getZ() != packet.getEntry().getPosition().getZ())) {
             return;
         }
-        String identifier = BlockRegistries.JAVA_IDENTIFIERS.get().get(packet.getEntry().getBlock());
+        String identifier = BlockRegistries.JAVA_BLOCKS.getOrDefault(packet.getEntry().getBlock(), BlockMapping.AIR).getJavaIdentifier();
         session.setInteracting(false);
         BlockSoundInteractionTranslator.handleBlockInteraction(session, lastInteractPos.toFloat(), identifier);
     }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaLevelChunkWithLightTranslator.java
Patch:
@@ -138,7 +138,7 @@ public void translate(GeyserSession session, ClientboundLevelChunkWithLightPacke
                         int xzy = indexYZXtoXZY(yzx);
                         section.getBlockStorageArray()[0].setFullBlock(xzy, bedrockId);
 
-                        if (BlockRegistries.WATERLOGGED.get().contains(javaId)) {
+                        if (BlockRegistries.WATERLOGGED.get().get(javaId)) {
                             section.getBlockStorageArray()[1].setFullBlock(xzy, session.getBlockMappings().getBedrockWater().getRuntimeId());
                         }
 
@@ -160,7 +160,7 @@ public void translate(GeyserSession session, ClientboundLevelChunkWithLightPacke
                     int bedrockId = session.getBlockMappings().getBedrockBlockId(javaId);
                     BlockStorage blockStorage = new BlockStorage(SingletonBitArray.INSTANCE, IntLists.singleton(bedrockId));
 
-                    if (BlockRegistries.WATERLOGGED.get().contains(javaId)) {
+                    if (BlockRegistries.WATERLOGGED.get().get(javaId)) {
                         BlockStorage waterlogged = new BlockStorage(SingletonBitArray.INSTANCE, IntLists.singleton(session.getBlockMappings().getBedrockWater()));
                         sections[bedrockSectionY] = new GeyserChunkSection(new BlockStorage[] {blockStorage, waterlogged});
                     } else {
@@ -179,7 +179,7 @@ public void translate(GeyserSession session, ClientboundLevelChunkWithLightPacke
                     int javaId = javaPalette.idToState(i);
                     bedrockPalette.add(session.getBlockMappings().getBedrockBlockId(javaId));
 
-                    if (BlockRegistries.WATERLOGGED.get().contains(javaId)) {
+                    if (BlockRegistries.WATERLOGGED.get().get(javaId)) {
                         waterloggedPaletteIds.set(i);
                     }
 

File: core/src/main/java/org/geysermc/geyser/translator/sound/block/GrassPathInteractionTranslator.java
Patch:
@@ -44,7 +44,7 @@ public void translate(GeyserSession session, Vector3f position, String identifie
         levelSoundEventPacket.setRelativeVolumeDisabled(false);
         levelSoundEventPacket.setIdentifier(":");
         levelSoundEventPacket.setSound(SoundEvent.ITEM_USE_ON);
-        levelSoundEventPacket.setExtraData(session.getBlockMappings().getBedrockBlockId(BlockRegistries.JAVA_IDENTIFIERS.get(identifier)));
+        levelSoundEventPacket.setExtraData(session.getBlockMappings().getBedrockBlockId(BlockRegistries.JAVA_IDENTIFIER_TO_ID.get().getInt(identifier)));
         session.sendUpstreamPacket(levelSoundEventPacket);
     }
 }

File: core/src/main/java/org/geysermc/geyser/translator/sound/block/HoeInteractionTranslator.java
Patch:
@@ -44,7 +44,7 @@ public void translate(GeyserSession session, Vector3f position, String identifie
         levelSoundEventPacket.setRelativeVolumeDisabled(false);
         levelSoundEventPacket.setIdentifier(":");
         levelSoundEventPacket.setSound(SoundEvent.ITEM_USE_ON);
-        levelSoundEventPacket.setExtraData(session.getBlockMappings().getBedrockBlockId(BlockRegistries.JAVA_IDENTIFIERS.get(identifier)));
+        levelSoundEventPacket.setExtraData(session.getBlockMappings().getBedrockBlockId(BlockRegistries.JAVA_IDENTIFIER_TO_ID.get().getInt(identifier)));
         session.sendUpstreamPacket(levelSoundEventPacket);
     }
 }

File: core/src/main/java/org/geysermc/geyser/util/ChunkUtils.java
Patch:
@@ -150,7 +150,7 @@ public static void updateBlockClientSide(GeyserSession session, int blockState,
             UpdateBlockPacket waterPacket = new UpdateBlockPacket();
             waterPacket.setDataLayer(1);
             waterPacket.setBlockPosition(position);
-            if (BlockRegistries.WATERLOGGED.get().contains(blockState)) {
+            if (BlockRegistries.WATERLOGGED.get().get(blockState)) {
                 waterPacket.setDefinition(session.getBlockMappings().getBedrockWater());
             } else {
                 waterPacket.setDefinition(session.getBlockMappings().getBedrockAir());

File: core/src/main/java/org/geysermc/geyser/util/SoundUtils.java
Patch:
@@ -154,7 +154,7 @@ public static void playSound(GeyserSession session, Sound javaSound, Vector3f po
             soundPacket.setExtraData(soundMapping.getExtraData() + (int)(Math.round((Math.log10(pitch) / Math.log10(2)) * 12)) + 12);
         } else if (sound == SoundEvent.PLACE && soundMapping.getExtraData() == -1) {
             if (!soundMapping.getIdentifier().equals(":")) {
-                int javaId = BlockRegistries.JAVA_IDENTIFIERS.getOrDefault(soundMapping.getIdentifier(), BlockStateValues.JAVA_AIR_ID);
+                int javaId = BlockRegistries.JAVA_IDENTIFIER_TO_ID.get().getOrDefault(soundMapping.getIdentifier(), BlockStateValues.JAVA_AIR_ID);
                 soundPacket.setExtraData(session.getBlockMappings().getBedrockBlockId(javaId));
             } else {
                 session.getGeyser().getLogger().debug("PLACE sound mapping identifier was invalid! Please report: " + soundMapping);

File: core/src/main/java/org/geysermc/geyser/registry/populator/ItemRegistryPopulator.java
Patch:
@@ -286,6 +286,7 @@ public boolean register(@NonNull NonVanillaCustomItemData customItemData) {
             Set<String> javaOnlyItems = new ObjectOpenHashSet<>();
             Collections.addAll(javaOnlyItems, "minecraft:spectral_arrow", "minecraft:debug_stick",
                     "minecraft:knowledge_book", "minecraft:tipped_arrow", "minecraft:bundle");
+            javaOnlyItems.add("minecraft:decorated_pot"); // TODO 1.19.80 resolve probs?
             if (!customItemsAllowed) {
                 javaOnlyItems.add("minecraft:furnace_minecart");
             }

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -1688,6 +1688,8 @@ public void sendAdventureSettings() {
         abilities.add(Ability.MINE);
         // Needed so you can drop items
         abilities.add(Ability.DOORS_AND_SWITCHES);
+        // Required for lecterns to work (likely started around 1.19.10; confirmed on 1.19.70)
+        abilities.add(Ability.OPEN_CONTAINERS);
         if (gameMode == GameMode.CREATIVE) {
             // Needed so the client doesn't attempt to take away items
             abilities.add(Ability.INSTABUILD);

File: core/src/main/java/org/geysermc/geyser/registry/Registries.java
Patch:
@@ -135,7 +135,7 @@ public final class Registries {
     /**
      * A registry holding all the potion mixes.
      */
-    public static final SimpleRegistry<Set<PotionMixData>> POTION_MIXES;
+    public static final VersionedRegistry<Set<PotionMixData>> POTION_MIXES;
 
     /**
      * A registry holding all the
@@ -178,7 +178,7 @@ public static void init() {
         RecipeRegistryPopulator.populate();
 
         // Create registries that require other registries to load first
-        POTION_MIXES = SimpleRegistry.create(PotionMixRegistryLoader::new);
+        POTION_MIXES = VersionedRegistry.create(PotionMixRegistryLoader::new);
         ENCHANTMENTS = SimpleMappedRegistry.create("mappings/enchantments.json", EnchantmentRegistryLoader::new);
 
         // Remove unneeded client generation data from NbtMapBuilder

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -640,7 +640,7 @@ public void connect() {
         // Potion mixes are registered by default, as they are needed to be able to put ingredients into the brewing stand.
         CraftingDataPacket craftingDataPacket = new CraftingDataPacket();
         craftingDataPacket.setCleanRecipes(true);
-        craftingDataPacket.getPotionMixData().addAll(Registries.POTION_MIXES.get());
+        craftingDataPacket.getPotionMixData().addAll(Registries.POTION_MIXES.forVersion(this.upstream.getProtocolVersion()));
         upstream.sendPacket(craftingDataPacket);
 
         PlayStatusPacket playStatusPacket = new PlayStatusPacket();

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaUpdateRecipesTranslator.java
Patch:
@@ -167,7 +167,7 @@ public void translate(GeyserSession session, ClientboundUpdateRecipesPacket pack
             }
         }
         craftingDataPacket.getCraftingData().addAll(CARTOGRAPHY_RECIPES);
-        craftingDataPacket.getPotionMixData().addAll(Registries.POTION_MIXES.get());
+        craftingDataPacket.getPotionMixData().addAll(Registries.POTION_MIXES.forVersion(session.getUpstream().getProtocolVersion()));
 
         Int2ObjectMap<GeyserStonecutterData> stonecutterRecipeMap = new Int2ObjectOpenHashMap<>();
         for (Int2ObjectMap.Entry<List<StoneCuttingRecipeData>> data : unsortedStonecutterData.int2ObjectEntrySet()) {

File: core/src/main/java/org/geysermc/geyser/translator/inventory/InventoryTranslator.java
Patch:
@@ -88,7 +88,7 @@ public abstract class InventoryTranslator {
             put(ContainerType.LOOM, new LoomInventoryTranslator());
             put(ContainerType.MERCHANT, new MerchantInventoryTranslator());
             put(ContainerType.SHULKER_BOX, new ShulkerInventoryTranslator());
-            put(ContainerType.SMITHING, new SmithingInventoryTranslator());
+            put(ContainerType.LEGACY_SMITHING, new SmithingInventoryTranslator());
             put(ContainerType.STONECUTTER, new StonecutterInventoryTranslator());
 
             /* Lectern */

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/BedrockInventoryTransactionTranslator.java
Patch:
@@ -485,7 +485,6 @@ private void processEntityInteraction(GeyserSession session, InventoryTransactio
      * @param blockPos the block position to restore
      */
     private void restoreCorrectBlock(GeyserSession session, Vector3i blockPos, InventoryTransactionPacket packet) {
-        Thread.dumpStack();
         int javaBlockState = session.getGeyser().getWorldManager().getBlockAt(session, blockPos);
         UpdateBlockPacket updateBlockPacket = new UpdateBlockPacket();
         updateBlockPacket.setDataLayer(0);

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/BedrockInventoryTransactionTranslator.java
Patch:
@@ -509,7 +509,6 @@ private boolean isIncorrectHeldItem(GeyserSession session, InventoryTransactionP
         int javaSlot = session.getPlayerInventory().getOffsetForHotbar(packet.getHotbarSlot());
         int expectedItemId = ItemTranslator.getBedrockItemId(session, session.getPlayerInventory().getItem(javaSlot));
         int heldItemId = packet.getItemInHand() == null ? ItemData.AIR.getId() : packet.getItemInHand().getId();
-        System.out.println(expectedItemId + " " + heldItemId);
 
         if (expectedItemId != heldItemId) {
             session.getGeyser().getLogger().debug(session.bedrockUsername() + "'s held item has desynced! Expected: " + expectedItemId + " Received: " + heldItemId);

File: core/src/main/java/org/geysermc/geyser/entity/EntityDefinitions.java
Patch:
@@ -858,7 +858,6 @@ public final class EntityDefinitions {
         {
             EntityDefinition<AbstractHorseEntity> abstractHorseEntityBase = EntityDefinition.inherited(AbstractHorseEntity::new, ageableEntityBase)
                     .addTranslator(MetadataType.BYTE, AbstractHorseEntity::setHorseFlags)
-                    .addTranslator(null) // UUID of owner
                     .build();
             CAMEL = EntityDefinition.inherited(CamelEntity::new, abstractHorseEntityBase)
                     .type(EntityType.CAMEL)

File: core/src/main/java/org/geysermc/geyser/util/InventoryUtils.java
Patch:
@@ -95,6 +95,7 @@ public static void displayInventory(GeyserSession session, Inventory inventory)
                     if (openInv != null && openInv.getJavaId() == inventory.getJavaId()) {
                         translator.openInventory(session, inventory);
                         translator.updateInventory(session, inventory);
+                        openInv.setDisplayed(true);
                     } else if (openInv != null && openInv.isPending()) {
                         // Presumably, this inventory is no longer relevant, and the client doesn't care about it
                         displayInventory(session, openInv);
@@ -103,6 +104,7 @@ public static void displayInventory(GeyserSession session, Inventory inventory)
             } else {
                 translator.openInventory(session, inventory);
                 translator.updateInventory(session, inventory);
+                inventory.setDisplayed(true);
             }
         } else {
             session.setOpenInventory(null);
@@ -117,7 +119,7 @@ public static void closeInventory(GeyserSession session, int javaId, boolean con
         if (inventory != null) {
             InventoryTranslator translator = session.getInventoryTranslator();
             translator.closeInventory(session, inventory);
-            if (confirm && !inventory.isPending() && !(translator instanceof LecternInventoryTranslator)) {
+            if (confirm && inventory.isDisplayed() && !inventory.isPending() && !(translator instanceof LecternInventoryTranslator)) {
                 session.setClosingInventory(true);
             }
         }

File: core/src/main/java/org/geysermc/geyser/util/WebUtils.java
Patch:
@@ -91,7 +91,7 @@ public static void downloadFile(String reqURL, String fileLocation) {
             InputStream in = con.getInputStream();
             Files.copy(in, Paths.get(fileLocation), StandardCopyOption.REPLACE_EXISTING);
         } catch (Exception e) {
-            throw new AssertionError("Unable to download and save file: " + fileLocation + " (" + reqURL + ")", e);
+            throw new RuntimeException("Unable to download and save file: " + fileLocation + " (" + reqURL + ")", e);
         }
     }
 

File: core/src/main/java/org/geysermc/geyser/Constants.java
Patch:
@@ -46,6 +46,7 @@ public final class Constants {
         try {
             wsUri = new URI("wss://api.geysermc.org/ws");
         } catch (URISyntaxException e) {
+            GeyserImpl.getInstance().getLogger().error("Unable to resolve api.geysermc.org! Check your internet connection.");
             e.printStackTrace();
         }
         GLOBAL_API_WS_URI = wsUri;

File: core/src/main/java/org/geysermc/geyser/entity/type/player/PlayerEntity.java
Patch:
@@ -119,6 +119,8 @@ public void spawnEntity() {
             setBelowNameText(objective);
         }
 
+        // Update in case this entity has been despawned, then respawned
+        this.nametag = this.username;
         // The name can't be updated later (the entity metadata for it is ignored), so we need to check for this now
         updateDisplayName(session.getWorldCache().getScoreboard().getTeamFor(username));
 

File: core/src/main/java/org/geysermc/geyser/registry/populator/BlockRegistryPopulator.java
Patch:
@@ -29,9 +29,9 @@
 import com.fasterxml.jackson.databind.node.ArrayNode;
 import com.google.common.collect.ImmutableMap;
 import com.nukkitx.nbt.*;
-import com.nukkitx.protocol.bedrock.v527.Bedrock_v527;
 import com.nukkitx.protocol.bedrock.v544.Bedrock_v544;
 import com.nukkitx.protocol.bedrock.v560.Bedrock_v560;
+import com.nukkitx.protocol.bedrock.v567.Bedrock_v567;
 import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
 import it.unimi.dsi.fastutil.ints.IntSet;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
@@ -76,6 +76,7 @@ private static void registerBedrockBlocks() {
         ImmutableMap<ObjectIntPair<String>, BiFunction<String, NbtMapBuilder, String>> blockMappers = ImmutableMap.<ObjectIntPair<String>, BiFunction<String, NbtMapBuilder, String>>builder()
                 .put(ObjectIntPair.of("1_19_20", Bedrock_v544.V544_CODEC.getProtocolVersion()), emptyMapper)
                 .put(ObjectIntPair.of("1_19_50", Bedrock_v560.V560_CODEC.getProtocolVersion()), emptyMapper)
+                .put(ObjectIntPair.of("1_19_60", Bedrock_v567.V567_CODEC.getProtocolVersion()), emptyMapper)
                 .build();
 
         for (Map.Entry<ObjectIntPair<String>, BiFunction<String, NbtMapBuilder, String>> palette : blockMappers.entrySet()) {

File: core/src/main/java/org/geysermc/geyser/scoreboard/Scoreboard.java
Patch:
@@ -352,7 +352,8 @@ public void removeTeam(String teamName) {
             // With the player's lack of a team in visibility checks
             updateEntityNames(remove, remove.getEntities(), true);
             for (String name : remove.getEntities()) {
-                playerToTeam.remove(name, remove);
+                // 1.19.3 Mojmap Scoreboard#removePlayerTeam(PlayerTeam)
+                playerToTeam.remove(name);
             }
 
             session.removeCommandEnum("Geyser_Teams", remove.getId());

File: core/src/main/java/org/geysermc/geyser/scoreboard/Team.java
Patch:
@@ -65,6 +65,7 @@ public Set<String> addEntities(String... names) {
             if (entities.add(name)) {
                 added.add(name);
             }
+            scoreboard.getPlayerToTeam().put(name, this);
         }
 
         if (added.isEmpty()) {
@@ -93,6 +94,7 @@ public Set<String> removeEntities(String... names) {
             if (entities.remove(name)) {
                 removed.add(name);
             }
+            scoreboard.getPlayerToTeam().remove(name, this);
         }
         return removed;
     }

File: bootstrap/spigot/src/main/java/org/geysermc/geyser/platform/spigot/GeyserSpigotPlugin.java
Patch:
@@ -195,6 +195,9 @@ public void onEnable() {
 
         geyserConfig.loadFloodgate(this);
 
+        this.geyserCommandManager = new GeyserSpigotCommandManager(geyser);
+        this.geyserCommandManager.init();
+
         if (!INITIALIZED) {
             // Needs to be an anonymous inner class otherwise Bukkit complains about missing classes
             Bukkit.getPluginManager().registerEvents(new Listener() {
@@ -206,9 +209,6 @@ public void onServerLoaded(ServerLoadEvent event) {
                 }
             }, this);
 
-            this.geyserCommandManager = new GeyserSpigotCommandManager(geyser);
-            this.geyserCommandManager.init();
-
             // Because Bukkit locks its command map upon startup, we need to
             // add our plugin commands in onEnable, but populating the executor
             // can happen at any time

File: core/src/main/java/org/geysermc/geyser/translator/inventory/AnvilInventoryTranslator.java
Patch:
@@ -75,7 +75,7 @@ public int bedrockSlotToJava(ItemStackRequestSlotData slotInfoData) {
         return switch (slotInfoData.getContainer()) {
             case ANVIL_INPUT -> 0;
             case ANVIL_MATERIAL -> 1;
-            case ANVIL_RESULT, CREATIVE_OUTPUT -> 2;
+            case ANVIL_RESULT, CREATED_OUTPUT -> 2;
             default -> super.bedrockSlotToJava(slotInfoData);
         };
     }

File: core/src/main/java/org/geysermc/geyser/translator/inventory/CartographyInventoryTranslator.java
Patch:
@@ -57,7 +57,7 @@ public int bedrockSlotToJava(ItemStackRequestSlotData slotInfoData) {
         return switch (slotInfoData.getContainer()) {
             case CARTOGRAPHY_INPUT -> 0;
             case CARTOGRAPHY_ADDITIONAL -> 1;
-            case CARTOGRAPHY_RESULT, CREATIVE_OUTPUT -> 2;
+            case CARTOGRAPHY_RESULT, CREATED_OUTPUT -> 2;
             default -> super.bedrockSlotToJava(slotInfoData);
         };
     }

File: core/src/main/java/org/geysermc/geyser/translator/inventory/CraftingInventoryTranslator.java
Patch:
@@ -68,7 +68,7 @@ public int bedrockSlotToJava(ItemStackRequestSlotData slotInfoData) {
             // Bedrock is the same, but it starts from 32.
             return slotInfoData.getSlot() - 31;
         }
-        if (slotInfoData.getContainer() == ContainerSlotType.CRAFTING_OUTPUT || slotInfoData.getContainer() == ContainerSlotType.CREATIVE_OUTPUT) {
+        if (slotInfoData.getContainer() == ContainerSlotType.CRAFTING_OUTPUT || slotInfoData.getContainer() == ContainerSlotType.CREATED_OUTPUT) {
             return 0;
         }
         return super.bedrockSlotToJava(slotInfoData);

File: core/src/main/java/org/geysermc/geyser/translator/inventory/EnchantingInventoryTranslator.java
Patch:
@@ -137,7 +137,7 @@ public int bedrockSlotToJava(ItemStackRequestSlotData slotInfoData) {
         if (slotInfoData.getContainer() == ContainerSlotType.ENCHANTING_INPUT) {
             return 0;
         }
-        if (slotInfoData.getContainer() == ContainerSlotType.ENCHANTING_LAPIS) {
+        if (slotInfoData.getContainer() == ContainerSlotType.ENCHANTING_MATERIAL) {
             return 1;
         }
         return super.bedrockSlotToJava(slotInfoData);
@@ -149,7 +149,7 @@ public BedrockContainerSlot javaSlotToBedrockContainer(int slot) {
             return new BedrockContainerSlot(ContainerSlotType.ENCHANTING_INPUT, 14);
         }
         if (slot == 1) {
-            return new BedrockContainerSlot(ContainerSlotType.ENCHANTING_LAPIS, 15);
+            return new BedrockContainerSlot(ContainerSlotType.ENCHANTING_MATERIAL, 15);
         }
         return super.javaSlotToBedrockContainer(slot);
     }

File: core/src/main/java/org/geysermc/geyser/translator/inventory/Generic3X3InventoryTranslator.java
Patch:
@@ -63,7 +63,7 @@ public void openInventory(GeyserSession session, Inventory inventory) {
     @Override
     public BedrockContainerSlot javaSlotToBedrockContainer(int javaSlot) {
         if (javaSlot < this.size) {
-            return new BedrockContainerSlot(ContainerSlotType.CONTAINER, javaSlot);
+            return new BedrockContainerSlot(ContainerSlotType.LEVEL_ENTITY, javaSlot);
         }
         return super.javaSlotToBedrockContainer(javaSlot);
     }

File: core/src/main/java/org/geysermc/geyser/translator/inventory/GrindstoneInventoryTranslator.java
Patch:
@@ -41,7 +41,7 @@ public int bedrockSlotToJava(ItemStackRequestSlotData slotInfoData) {
         return switch (slotInfoData.getContainer()) {
             case GRINDSTONE_INPUT -> 0;
             case GRINDSTONE_ADDITIONAL -> 1;
-            case GRINDSTONE_RESULT, CREATIVE_OUTPUT -> 2;
+            case GRINDSTONE_RESULT, CREATED_OUTPUT -> 2;
             default -> super.bedrockSlotToJava(slotInfoData);
         };
     }

File: core/src/main/java/org/geysermc/geyser/translator/inventory/HopperInventoryTranslator.java
Patch:
@@ -41,7 +41,7 @@ public HopperInventoryTranslator() {
     @Override
     public BedrockContainerSlot javaSlotToBedrockContainer(int javaSlot) {
         if (javaSlot < this.size) {
-            return new BedrockContainerSlot(ContainerSlotType.CONTAINER, javaSlot);
+            return new BedrockContainerSlot(ContainerSlotType.LEVEL_ENTITY, javaSlot);
         }
         return super.javaSlotToBedrockContainer(javaSlot);
     }

File: core/src/main/java/org/geysermc/geyser/translator/inventory/InventoryTranslator.java
Patch:
@@ -478,7 +478,7 @@ public ItemStackResponse translateCraftingRequest(GeyserSession session, Invento
                     }
                     craftState = CraftState.TRANSFER;
 
-                    if (transferAction.getSource().getContainer() != ContainerSlotType.CREATIVE_OUTPUT) {
+                    if (transferAction.getSource().getContainer() != ContainerSlotType.CREATED_OUTPUT) {
                         return rejectRequest(request);
                     }
                     if (transferAction.getCount() <= 0) {
@@ -653,7 +653,7 @@ public ItemStackResponse translateAutoCraftingRequest(GeyserSession session, Inv
                     }
                     craftState = CraftState.TRANSFER;
 
-                    if (transferAction.getSource().getContainer() != ContainerSlotType.CREATIVE_OUTPUT) {
+                    if (transferAction.getSource().getContainer() != ContainerSlotType.CREATED_OUTPUT) {
                         return rejectRequest(request);
                     }
                     if (transferAction.getCount() <= 0) {

File: core/src/main/java/org/geysermc/geyser/translator/inventory/LoomInventoryTranslator.java
Patch:
@@ -186,7 +186,7 @@ public int bedrockSlotToJava(ItemStackRequestSlotData slotInfoData) {
             case LOOM_INPUT -> 0;
             case LOOM_DYE -> 1;
             case LOOM_MATERIAL -> 2;
-            case LOOM_RESULT, CREATIVE_OUTPUT -> 3;
+            case LOOM_RESULT, CREATED_OUTPUT -> 3;
             default -> super.bedrockSlotToJava(slotInfoData);
         };
     }

File: core/src/main/java/org/geysermc/geyser/translator/inventory/PlayerInventoryTranslator.java
Patch:
@@ -197,7 +197,7 @@ public int bedrockSlotToJava(ItemStackRequestSlotData slotInfoData) {
                     return slotnum - 27;
                 }
                 break;
-            case CREATIVE_OUTPUT:
+            case CREATED_OUTPUT:
                 return 0;
         }
         return slotnum;
@@ -444,7 +444,7 @@ protected ItemStackResponse translateCreativeRequest(GeyserSession session, Inve
                     }
                     craftState = CraftState.TRANSFER;
 
-                    if (transferAction.getSource().getContainer() != ContainerSlotType.CREATIVE_OUTPUT) {
+                    if (transferAction.getSource().getContainer() != ContainerSlotType.CREATED_OUTPUT) {
                         return rejectRequest(request);
                     }
 
@@ -477,7 +477,7 @@ protected ItemStackResponse translateCreativeRequest(GeyserSession session, Inve
                     }
 
                     DropAction dropAction = (DropAction) action;
-                    if (dropAction.getSource().getContainer() != ContainerSlotType.CREATIVE_OUTPUT || dropAction.getSource().getSlot() != 50) {
+                    if (dropAction.getSource().getContainer() != ContainerSlotType.CREATED_OUTPUT || dropAction.getSource().getSlot() != 50) {
                         return rejectRequest(request);
                     }
 

File: core/src/main/java/org/geysermc/geyser/translator/inventory/ShulkerInventoryTranslator.java
Patch:
@@ -71,7 +71,7 @@ protected void setCustomName(GeyserSession session, Vector3i position, Inventory
     @Override
     public BedrockContainerSlot javaSlotToBedrockContainer(int javaSlot) {
         if (javaSlot < this.size) {
-            return new BedrockContainerSlot(ContainerSlotType.SHULKER, javaSlot);
+            return new BedrockContainerSlot(ContainerSlotType.SHULKER_BOX, javaSlot);
         }
         return super.javaSlotToBedrockContainer(javaSlot);
     }

File: core/src/main/java/org/geysermc/geyser/translator/inventory/SmithingInventoryTranslator.java
Patch:
@@ -41,7 +41,7 @@ public int bedrockSlotToJava(ItemStackRequestSlotData slotInfoData) {
         return switch (slotInfoData.getContainer()) {
             case SMITHING_TABLE_INPUT -> 0;
             case SMITHING_TABLE_MATERIAL -> 1;
-            case SMITHING_TABLE_RESULT, CREATIVE_OUTPUT -> 2;
+            case SMITHING_TABLE_RESULT, CREATED_OUTPUT -> 2;
             default -> super.bedrockSlotToJava(slotInfoData);
         };
     }

File: core/src/main/java/org/geysermc/geyser/translator/inventory/StonecutterInventoryTranslator.java
Patch:
@@ -84,7 +84,7 @@ protected ItemStackResponse translateSpecialRequest(GeyserSession session, Inven
     public int bedrockSlotToJava(ItemStackRequestSlotData slotInfoData) {
         return switch (slotInfoData.getContainer()) {
             case STONECUTTER_INPUT -> 0;
-            case STONECUTTER_RESULT, CREATIVE_OUTPUT -> 1;
+            case STONECUTTER_RESULT, CREATED_OUTPUT -> 1;
             default -> super.bedrockSlotToJava(slotInfoData);
         };
     }

File: core/src/main/java/org/geysermc/geyser/translator/inventory/chest/ChestInventoryTranslator.java
Patch:
@@ -45,10 +45,10 @@ public ChestInventoryTranslator(int size, int paddedSize) {
     protected boolean shouldRejectItemPlace(GeyserSession session, Inventory inventory, ContainerSlotType bedrockSourceContainer,
                                          int javaSourceSlot, ContainerSlotType bedrockDestinationContainer, int javaDestinationSlot) {
         // Reject any item placements that occur in the unusable inventory space
-        if (bedrockSourceContainer == ContainerSlotType.CONTAINER && javaSourceSlot >= this.size) {
+        if (bedrockSourceContainer == ContainerSlotType.LEVEL_ENTITY && javaSourceSlot >= this.size) {
             return true;
         }
-        return bedrockDestinationContainer == ContainerSlotType.CONTAINER && javaDestinationSlot >= this.size;
+        return bedrockDestinationContainer == ContainerSlotType.LEVEL_ENTITY && javaDestinationSlot >= this.size;
     }
 
     @Override
@@ -64,7 +64,7 @@ public void updateSlot(GeyserSession session, Inventory inventory, int slot) {
     @Override
     public BedrockContainerSlot javaSlotToBedrockContainer(int javaSlot) {
         if (javaSlot < this.size) {
-            return new BedrockContainerSlot(ContainerSlotType.CONTAINER, javaSlot);
+            return new BedrockContainerSlot(ContainerSlotType.LEVEL_ENTITY, javaSlot);
         }
         return super.javaSlotToBedrockContainer(javaSlot);
     }

File: core/src/main/java/org/geysermc/geyser/translator/inventory/furnace/AbstractFurnaceInventoryTranslator.java
Patch:
@@ -74,7 +74,7 @@ public BedrockContainerSlot javaSlotToBedrockContainer(int slot) {
             return new BedrockContainerSlot(ContainerSlotType.FURNACE_FUEL, javaSlotToBedrock(slot));
         }
         if (slot == 2) {
-            return new BedrockContainerSlot(ContainerSlotType.FURNACE_OUTPUT, javaSlotToBedrock(slot));
+            return new BedrockContainerSlot(ContainerSlotType.FURNACE_RESULT, javaSlotToBedrock(slot));
         }
         return super.javaSlotToBedrockContainer(slot);
     }

File: core/src/main/java/org/geysermc/geyser/translator/inventory/horse/ChestedHorseInventoryTranslator.java
Patch:
@@ -56,7 +56,7 @@ public int bedrockSlotToJava(ItemStackRequestSlotData slotInfoData) {
         if (slotInfoData.getContainer() == ContainerSlotType.HORSE_EQUIP) {
             return this.equipSlot;
         }
-        if (slotInfoData.getContainer() == ContainerSlotType.CONTAINER) {
+        if (slotInfoData.getContainer() == ContainerSlotType.LEVEL_ENTITY) {
             return slotInfoData.getSlot() + 1;
         }
         return super.bedrockSlotToJava(slotInfoData);
@@ -68,7 +68,7 @@ public BedrockContainerSlot javaSlotToBedrockContainer(int slot) {
             return new BedrockContainerSlot(ContainerSlotType.HORSE_EQUIP, 0);
         }
         if (slot <= this.size - 1) { // Accommodate for the lack of one slot (saddle or armor)
-            return new BedrockContainerSlot(ContainerSlotType.CONTAINER, slot - 1);
+            return new BedrockContainerSlot(ContainerSlotType.LEVEL_ENTITY, slot - 1);
         }
         return super.javaSlotToBedrockContainer(slot);
     }

File: core/src/main/java/org/geysermc/geyser/Constants.java
Patch:
@@ -30,7 +30,6 @@
 
 public final class Constants {
     public static final URI GLOBAL_API_WS_URI;
-    public static final String NTP_SERVER = "time.cloudflare.com";
 
     public static final String NEWS_OVERVIEW_URL = "https://api.geysermc.org/v2/news/";
     public static final String NEWS_PROJECT_NAME = "geyser";

File: core/src/main/java/org/geysermc/geyser/skin/FakeHeadProvider.java
Patch:
@@ -63,7 +63,7 @@ public SkinProvider.SkinData load(@Nonnull FakeHeadEntry fakeHeadEntry) throws E
 
                     SkinProvider.Skin skin = skinData.skin();
                     SkinProvider.Cape cape = skinData.cape();
-                    SkinProvider.SkinGeometry geometry = skinData.geometry().getGeometryName().equals("{\"geometry\" :{\"default\" :\"geometry.humanoid.customSlim\"}}")
+                    SkinProvider.SkinGeometry geometry = skinData.geometry().geometryName().equals("{\"geometry\" :{\"default\" :\"geometry.humanoid.customSlim\"}}")
                             ? SkinProvider.WEARING_CUSTOM_SKULL_SLIM : SkinProvider.WEARING_CUSTOM_SKULL;
 
                     SkinProvider.Skin headSkin = SkinProvider.getOrDefault(

File: core/src/main/java/org/geysermc/geyser/skin/SkullSkinManager.java
Patch:
@@ -42,9 +42,9 @@ public static SerializedSkin buildSkullEntryManually(String skinId, byte[] skinD
         // Prevents https://cdn.discordapp.com/attachments/613194828359925800/779458146191147008/unknown.png
         skinId = skinId + "_skull";
         return SerializedSkin.of(
-                skinId, "", SkinProvider.SKULL_GEOMETRY.getGeometryName(), ImageData.of(skinData), Collections.emptyList(),
-                ImageData.of(SkinProvider.EMPTY_CAPE.getCapeData()), SkinProvider.SKULL_GEOMETRY.getGeometryData(),
-                "", true, false, false, SkinProvider.EMPTY_CAPE.getCapeId(), skinId
+                skinId, "", SkinProvider.SKULL_GEOMETRY.geometryName(), ImageData.of(skinData), Collections.emptyList(),
+                ImageData.of(SkinProvider.EMPTY_CAPE.capeData()), SkinProvider.SKULL_GEOMETRY.geometryData(),
+                "", true, false, false, SkinProvider.EMPTY_CAPE.capeId(), skinId
         );
     }
 

File: core/src/main/java/org/geysermc/geyser/util/LoginEncryptionUtils.java
Patch:
@@ -122,7 +122,7 @@ private static boolean validateChainData(List<SignedJWT> chain) throws Exception
     }
 
     public static void encryptPlayerConnection(GeyserSession session, LoginPacket loginPacket) {
-        encryptConnectionWithCert(session, loginPacket.getExtra().toString(), loginPacket.getChain());
+        encryptConnectionWithCert(session, loginPacket.getExtra().getParsedString(), loginPacket.getChain());
     }
 
     private static void encryptConnectionWithCert(GeyserSession session, String clientData, List<SignedJWT> certChainData) {

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -1378,7 +1378,6 @@ public void sendCommand(String command) {
     }
 
     public void setServerRenderDistance(int renderDistance) {
-        renderDistance = GenericMath.ceil(++renderDistance * MathUtils.SQRT_OF_TWO); //square to circle
         this.serverRenderDistance = renderDistance;
 
         ChunkRadiusUpdatedPacket chunkRadiusUpdatedPacket = new ChunkRadiusUpdatedPacket();

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/player/JavaPlayerPositionTranslator.java
Patch:
@@ -85,7 +85,7 @@ public void translate(GeyserSession session, ClientboundPlayerPositionPacket pac
 
             acceptTeleport(session, packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), packet.getTeleportId());
 
-            if (session.getServerRenderDistance() > 47 && !session.isEmulatePost1_13Logic()) {
+            if (session.getServerRenderDistance() > 32 && !session.isEmulatePost1_13Logic()) {
                 // See DimensionUtils for an explanation
                 ChunkRadiusUpdatedPacket chunkRadiusUpdatedPacket = new ChunkRadiusUpdatedPacket();
                 chunkRadiusUpdatedPacket.setRadius(session.getServerRenderDistance());

File: core/src/main/java/org/geysermc/geyser/util/DimensionUtils.java
Patch:
@@ -75,18 +75,17 @@ public static void switchDimension(GeyserSession session, String javaDimension)
         session.getPistonCache().clear();
         session.getSkullCache().clear();
 
-        if (session.getServerRenderDistance() > 47 && !session.isEmulatePost1_13Logic()) {
+        if (session.getServerRenderDistance() > 32 && !session.isEmulatePost1_13Logic()) {
             // The server-sided view distance wasn't a thing until Minecraft Java 1.14
             // So ViaVersion compensates by sending a "view distance" of 64
             // That's fine, except when the actual view distance sent from the server is five chunks
             // The client locks up when switching dimensions, expecting more chunks than it's getting
             // To solve this, we cap at 32 unless we know that the render distance actually exceeds 32
-            // 47 is the Bedrock equivalent of 32
             // Also, as of 1.19: PS4 crashes with a ChunkRadiusUpdatedPacket too large
             session.getGeyser().getLogger().debug("Applying dimension switching workaround for Bedrock render distance of "
                     + session.getServerRenderDistance());
             ChunkRadiusUpdatedPacket chunkRadiusUpdatedPacket = new ChunkRadiusUpdatedPacket();
-            chunkRadiusUpdatedPacket.setRadius(47);
+            chunkRadiusUpdatedPacket.setRadius(32);
             session.sendUpstreamPacket(chunkRadiusUpdatedPacket);
             // Will be re-adjusted on spawn
         }

File: bootstrap/fabric/src/main/java/org/geysermc/geyser/platform/fabric/world/GeyserFabricWorldManager.java
Patch:
@@ -38,6 +38,7 @@
 import net.minecraft.world.level.block.entity.LecternBlockEntity;
 import org.cloudburstmc.nbt.NbtMap;
 import org.cloudburstmc.nbt.NbtMapBuilder;
+import org.cloudburstmc.nbt.NbtType;
 import org.geysermc.geyser.level.GeyserWorldManager;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.translator.inventory.LecternInventoryTranslator;

File: core/src/main/java/org/geysermc/geyser/network/netty/LocalSession.java
Patch:
@@ -53,7 +53,7 @@ public final class LocalSession extends TcpSession {
     private final String clientIp;
     private final PacketCodecHelper codecHelper;
 
-    public LocalSession(String host, int port, SocketAddress targetAddress, String clientIp, PacketProtocol protocol, PacketCodecHelper codecHelper) {
+    public LocalSession(String host, int port, SocketAddress targetAddress, String clientIp, PacketProtocol protocol, MinecraftCodecHelper codecHelper) {
         super(host, port, protocol);
         this.targetAddress = targetAddress;
         this.clientIp = clientIp;

File: core/src/main/java/org/geysermc/geyser/registry/populator/BlockRegistryPopulator.java
Patch:
@@ -40,8 +40,8 @@
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectIntPair;
 import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
-import org.cloudburstmc.protocol.bedrock.codec.v527.Bedrock_v527;
 import org.cloudburstmc.protocol.bedrock.codec.v544.Bedrock_v544;
+import org.cloudburstmc.protocol.bedrock.codec.v560.Bedrock_v560;
 import org.cloudburstmc.protocol.bedrock.data.defintions.BlockDefinition;
 import org.cloudburstmc.protocol.bedrock.data.defintions.SimpleBlockDefinition;
 import org.cloudburstmc.protocol.bedrock.data.defintions.SimpleDefinitionRegistry;

File: core/src/main/java/org/geysermc/geyser/registry/populator/ItemRegistryPopulator.java
Patch:
@@ -46,6 +46,7 @@
 import org.cloudburstmc.protocol.bedrock.codec.v527.Bedrock_v527;
 import org.cloudburstmc.protocol.bedrock.codec.v534.Bedrock_v534;
 import org.cloudburstmc.protocol.bedrock.codec.v544.Bedrock_v544;
+import org.cloudburstmc.protocol.bedrock.codec.v560.Bedrock_v560;
 import org.cloudburstmc.protocol.bedrock.data.SoundEvent;
 import org.cloudburstmc.protocol.bedrock.data.defintions.ItemDefinition;
 import org.cloudburstmc.protocol.bedrock.data.defintions.SimpleDefinitionRegistry;

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaLevelParticlesTranslator.java
Patch:
@@ -163,7 +163,7 @@ private Function<Vector3f, BedrockPacket> createParticle(GeyserSession session,
 
                 return (position) -> {
                     LevelEventGenericPacket packet = new LevelEventGenericPacket();
-                    packet.setEventId(2027/*LevelEvent.PARTICLE_VIBRATION_SIGNAL*/);
+                    packet.setType(LevelEvent.PARTICLE_VIBRATION_SIGNAL);
                     packet.setTag(
                             NbtMap.builder()
                                     .putCompound("origin", buildVec3PositionTag(position))

File: bootstrap/bungeecord/src/main/java/org/geysermc/geyser/platform/bungeecord/GeyserBungeePlugin.java
Patch:
@@ -76,7 +76,7 @@ public void onLoad() {
         // Copied from ViaVersion.
         // https://github.com/ViaVersion/ViaVersion/blob/b8072aad86695cc8ec6f5e4103e43baf3abf6cc5/bungee/src/main/java/us/myles/ViaVersion/BungeePlugin.java#L43
         try {
-            ProtocolConstants.class.getField("MINECRAFT_1_19_1");
+            ProtocolConstants.class.getField("MINECRAFT_1_19_3");
         } catch (NoSuchFieldException e) {
             getLogger().warning("      / \\");
             getLogger().warning("     /   \\");

File: core/src/main/java/org/geysermc/geyser/configuration/GeyserConfiguration.java
Patch:
@@ -111,6 +111,8 @@ public interface GeyserConfiguration {
 
     boolean isNotifyOnNewBedrockUpdate();
 
+    String getUnusableSpaceBlock();
+
     IMetricsInfo getMetrics();
 
     int getPendingAuthenticationTimeout();

File: core/src/main/java/org/geysermc/geyser/configuration/GeyserJacksonConfiguration.java
Patch:
@@ -154,6 +154,9 @@ public abstract class GeyserJacksonConfiguration implements GeyserConfiguration
     @JsonProperty("notify-on-new-bedrock-update")
     private boolean notifyOnNewBedrockUpdate = true;
 
+    @JsonProperty("unusable-space-block")
+    private String unusableSpaceBlock = "minecraft:barrier";
+
     private MetricsInfo metrics = new MetricsInfo();
 
     @JsonProperty("pending-authentication-timeout")

File: core/src/main/java/org/geysermc/geyser/dump/BootstrapDumpInfo.java
Patch:
@@ -29,6 +29,7 @@
 import lombok.Getter;
 import org.geysermc.common.PlatformType;
 import org.geysermc.geyser.GeyserImpl;
+import org.geysermc.geyser.text.AsteriskSerializer;
 
 import java.util.List;
 
@@ -53,6 +54,8 @@ public static class PluginInfo {
     @Getter
     @AllArgsConstructor
     public static class ListenerInfo {
+
+        @AsteriskSerializer.Asterisk(isIp = true)
         public String ip;
         public int port;
     }

File: core/src/main/java/org/geysermc/geyser/entity/type/Entity.java
Patch:
@@ -48,6 +48,8 @@
 import org.cloudburstmc.protocol.bedrock.packet.SetEntityDataPacket;
 import org.geysermc.geyser.entity.EntityDefinition;
 import org.geysermc.geyser.entity.GeyserDirtyMetadata;
+import org.geysermc.geyser.entity.type.player.SessionPlayerEntity;
+import org.geysermc.geyser.network.GameProtocol;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.translator.text.MessageTranslator;
 import org.geysermc.geyser.util.EntityUtils;
@@ -360,6 +362,7 @@ public void setFlags(ByteEntityMetadata entityMetadata) {
         setFlag(EntityFlag.ON_FIRE, ((xd & 0x01) == 0x01) && !getFlag(EntityFlag.FIRE_IMMUNE)); // Otherwise immune entities sometimes flicker onfire
         setFlag(EntityFlag.SNEAKING, (xd & 0x02) == 0x02);
         setFlag(EntityFlag.SPRINTING, (xd & 0x08) == 0x08);
+
         // Swimming is ignored here and instead we rely on the pose
         setFlag(EntityFlag.GLIDING, (xd & 0x80) == 0x80);
 

File: core/src/main/java/org/geysermc/geyser/inventory/AnvilContainer.java
Patch:
@@ -76,7 +76,7 @@ public String checkForRename(GeyserSession session, String rename) {
         String originalName = ItemUtils.getCustomName(getInput().getNbt());
 
         String plainOriginalName = MessageTranslator.convertToPlainText(originalName, session.locale());
-        String plainNewName = MessageTranslator.convertToPlainText(rename, session.locale());
+        String plainNewName = MessageTranslator.convertToPlainText(rename);
         if (!plainOriginalName.equals(plainNewName)) {
             // Strip out formatting since Java Edition does not allow it
             correctRename = plainNewName;

File: core/src/main/java/org/geysermc/geyser/inventory/holder/InventoryHolder.java
Patch:
@@ -30,7 +30,7 @@
 import org.geysermc.geyser.translator.inventory.InventoryTranslator;
 
 public abstract class InventoryHolder {
-    public abstract void prepareInventory(InventoryTranslator translator, GeyserSession session, Inventory inventory);
+    public abstract boolean prepareInventory(InventoryTranslator translator, GeyserSession session, Inventory inventory);
     public abstract void openInventory(InventoryTranslator translator, GeyserSession session, Inventory inventory);
     public abstract void closeInventory(InventoryTranslator translator, GeyserSession session, Inventory inventory);
 }

File: core/src/main/java/org/geysermc/geyser/registry/populator/ItemRegistryPopulator.java
Patch:
@@ -90,10 +90,8 @@ record PaletteVersion(int protocolVersion, Map<String, String> additionalTransla
 
     public static void populate() {
         Map<String, PaletteVersion> paletteVersions = new Object2ObjectOpenHashMap<>();
-        paletteVersions.put("1_19_0", new PaletteVersion(Bedrock_v527.CODEC.getProtocolVersion(),
-                Collections.singletonMap("minecraft:trader_llama_spawn_egg", "minecraft:llama_spawn_egg")));
-        paletteVersions.put("1_19_10", new PaletteVersion(Bedrock_v534.CODEC.getProtocolVersion(), Collections.emptyMap()));
         paletteVersions.put("1_19_20", new PaletteVersion(Bedrock_v544.CODEC.getProtocolVersion(), Collections.emptyMap()));
+        paletteVersions.put("1_19_50", new PaletteVersion(Bedrock_v560.CODEC.getProtocolVersion(), Collections.emptyMap()));
 
         GeyserBootstrap bootstrap = GeyserImpl.getInstance().getBootstrap();
 

File: core/src/main/java/org/geysermc/geyser/registry/populator/RecipeRegistryPopulator.java
Patch:
@@ -90,8 +90,6 @@ public static void populate() {
                     Collections.singletonList(CraftingData.fromMulti(UUID.fromString("d392b075-4ba1-40ae-8789-af868d56f6ce"), ++LAST_RECIPE_NET_ID)));
             craftingData.put(RecipeType.CRAFTING_SPECIAL_MAPCLONING,
                     Collections.singletonList(CraftingData.fromMulti(UUID.fromString("85939755-ba10-4d9d-a4cc-efb7a8e943c4"), ++LAST_RECIPE_NET_ID)));
-            craftingData.put(RecipeType.CRAFTING_SPECIAL_BANNERADDPATTERN,
-                    Collections.singletonList(CraftingData.fromMulti(UUID.fromString("b5c5d105-75a2-4076-af2b-923ea2bf4bf0"), ++LAST_RECIPE_NET_ID)));
 
             // https://github.com/pmmp/PocketMine-MP/blob/stable/src/pocketmine/inventory/MultiRecipe.php
 

File: core/src/main/java/org/geysermc/geyser/registry/type/GeyserMappingItem.java
Patch:
@@ -48,4 +48,6 @@ public class GeyserMappingItem {
     @JsonProperty("repair_materials") List<String> repairMaterials;
     @JsonProperty("has_suspicious_stew_effect") boolean hasSuspiciousStewEffect = false;
     @JsonProperty("dye_color") int dyeColor = -1;
+    @JsonProperty("is_edible") boolean edible = false;
+    @JsonProperty("is_entity_placer") boolean entityPlacer = false;
 }

File: core/src/main/java/org/geysermc/geyser/translator/inventory/AbstractBlockInventoryTranslator.java
Patch:
@@ -65,8 +65,8 @@ public AbstractBlockInventoryTranslator(int size, InventoryHolder holder, Invent
     }
 
     @Override
-    public void prepareInventory(GeyserSession session, Inventory inventory) {
-        holder.prepareInventory(this, session, inventory);
+    public boolean prepareInventory(GeyserSession session, Inventory inventory) {
+        return holder.prepareInventory(this, session, inventory);
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/translator/inventory/InventoryTranslator.java
Patch:
@@ -105,7 +105,7 @@ public abstract class InventoryTranslator {
 
     public final int size;
 
-    public abstract void prepareInventory(GeyserSession session, Inventory inventory);
+    public abstract boolean prepareInventory(GeyserSession session, Inventory inventory);
     public abstract void openInventory(GeyserSession session, Inventory inventory);
     public abstract void closeInventory(GeyserSession session, Inventory inventory);
     public abstract void updateProperty(GeyserSession session, Inventory inventory, int key, int value);

File: core/src/main/java/org/geysermc/geyser/translator/inventory/LecternInventoryTranslator.java
Patch:
@@ -55,7 +55,8 @@ public LecternInventoryTranslator() {
     }
 
     @Override
-    public void prepareInventory(GeyserSession session, Inventory inventory) {
+    public boolean prepareInventory(GeyserSession session, Inventory inventory) {
+        return true;
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/translator/inventory/MerchantInventoryTranslator.java
Patch:
@@ -98,7 +98,7 @@ public SlotType getSlotType(int javaSlot) {
     }
 
     @Override
-    public void prepareInventory(GeyserSession session, Inventory inventory) {
+    public boolean prepareInventory(GeyserSession session, Inventory inventory) {
         MerchantContainer merchantInventory = (MerchantContainer) inventory;
         if (merchantInventory.getVillager() == null) {
             long geyserId = session.getEntityCache().getNextEntityId().incrementAndGet();
@@ -121,6 +121,8 @@ protected void initializeMetadata() {
 
             merchantInventory.setVillager(villager);
         }
+
+        return true;
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/translator/inventory/PlayerInventoryTranslator.java
Patch:
@@ -527,7 +527,8 @@ public Inventory createInventory(String name, int windowId, ContainerType contai
     }
 
     @Override
-    public void prepareInventory(GeyserSession session, Inventory inventory) {
+    public boolean prepareInventory(GeyserSession session, Inventory inventory) {
+        return true;
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/translator/inventory/chest/SingleChestInventoryTranslator.java
Patch:
@@ -52,8 +52,8 @@ protected boolean isValidBlock(String[] javaBlockString) {
     }
 
     @Override
-    public void prepareInventory(GeyserSession session, Inventory inventory) {
-        holder.prepareInventory(this, session, inventory);
+    public boolean prepareInventory(GeyserSession session, Inventory inventory) {
+        return holder.prepareInventory(this, session, inventory);
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/translator/inventory/horse/AbstractHorseInventoryTranslator.java
Patch:
@@ -40,7 +40,8 @@ public AbstractHorseInventoryTranslator(int size) {
     }
 
     @Override
-    public void prepareInventory(GeyserSession session, Inventory inventory) {
+    public boolean prepareInventory(GeyserSession session, Inventory inventory) {
+        return true;
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/translator/level/block/entity/SignBlockEntityTranslator.java
Patch:
@@ -32,7 +32,7 @@
 import org.geysermc.geyser.translator.text.MessageTranslator;
 import org.geysermc.geyser.util.SignUtils;
 
-@BlockEntity(type = BlockEntityType.SIGN)
+@BlockEntity(type = {BlockEntityType.SIGN, BlockEntityType.HANGING_SIGN})
 public class SignBlockEntityTranslator extends BlockEntityTranslator {
     /**
      * Maps a color stored in a sign's Color tag to its ARGB value.
@@ -88,6 +88,7 @@ public void translateTag(NbtMapBuilder builder, CompoundTag tag, int blockState)
                     signWidth += SignUtils.getCharacterWidth(c);
                 }
 
+                // todo 1.20: update for hanging signs (smaller width). Currently OK because bedrock sees hanging signs as normal signs
                 if (signWidth <= SignUtils.BEDROCK_CHARACTER_WIDTH_MAX) {
                     finalSignLine.append(c);
                 } else {

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/BedrockActionTranslator.java
Patch:
@@ -83,6 +83,9 @@ public void translate(GeyserSession session, PlayerActionPacket packet) {
                 attributesPacket.setRuntimeEntityId(entity.getGeyserId());
                 attributesPacket.getAttributes().addAll(entity.getAttributes().values());
                 session.sendUpstreamPacket(attributesPacket);
+
+                // Bounding box must be sent after a player dies and respawns since 1.19.40
+                entity.updateBoundingBox();
                 break;
             case START_SWIMMING:
                 if (!entity.getFlag(EntityFlag.SWIMMING)) {

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/JavaSoundEntityTranslator.java
Patch:
@@ -40,6 +40,6 @@ public void translate(GeyserSession session, ClientboundSoundEntityPacket packet
         if (entity == null) {
             return;
         }
-        SoundUtils.playBuiltinSound(session, packet.getSound(), entity.getPosition(), packet.getVolume(), packet.getPitch());
+        SoundUtils.playSound(session, packet.getSound(), entity.getPosition(), packet.getVolume(), packet.getPitch());
     }
 }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/player/JavaPlayerCombatKillTranslator.java
Patch:
@@ -39,7 +39,7 @@ public class JavaPlayerCombatKillTranslator extends PacketTranslator<Clientbound
 
     @Override
     public void translate(GeyserSession session, ClientboundPlayerCombatKillPacket packet) {
-        if (packet.getPlayerId() == session.getPlayerEntity().getEntityId() && GameProtocol.supports1_19_10(session)) {
+        if (packet.getPlayerId() == session.getPlayerEntity().getEntityId()) {
             Component deathMessage = packet.getMessage();
             // TODO - could inject score in, but as of 1.19.10 newlines don't center and start at the left of the first text
             DeathInfoPacket deathInfoPacket = new DeathInfoPacket();

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaExplodeTranslator.java
Patch:
@@ -49,9 +49,9 @@ public void translate(GeyserSession session, ClientboundExplodePacket packet) {
         LevelEventGenericPacket levelEventPacket = new LevelEventGenericPacket();
         levelEventPacket.setEventId(2026/*LevelEvent.PARTICLE_BLOCK_EXPLOSION*/);
         NbtMapBuilder builder = NbtMap.builder();
-        builder.putFloat("originX", packet.getX());
-        builder.putFloat("originY", packet.getY());
-        builder.putFloat("originZ", packet.getZ());
+        builder.putFloat("originX", (float) packet.getX());
+        builder.putFloat("originY", (float) packet.getY());
+        builder.putFloat("originZ", (float) packet.getZ());
         builder.putFloat("radius", packet.getRadius());
         builder.putInt("size", packet.getExploded().size());
         int i = 0;

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaMapItemDataTranslator.java
Patch:
@@ -51,6 +51,8 @@ public void translate(GeyserSession session, ClientboundMapItemDataPacket packet
         mapItemDataPacket.setLocked(packet.isLocked());
         mapItemDataPacket.setOrigin(Vector3i.ZERO); // Required since 1.19.20
         mapItemDataPacket.setScale(packet.getScale());
+        // Required as of 1.19.50
+        mapItemDataPacket.getTrackedEntityIds().add(packet.getMapId());
 
         MapData data = packet.getData();
         if (data != null) {

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaSoundTranslator.java
Patch:
@@ -38,6 +38,6 @@ public class JavaSoundTranslator extends PacketTranslator<ClientboundSoundPacket
     @Override
     public void translate(GeyserSession session, ClientboundSoundPacket packet) {
         Vector3f position = Vector3f.from(packet.getX(), packet.getY(), packet.getZ());
-        SoundUtils.playBuiltinSound(session, packet.getSound(), position, packet.getVolume(), packet.getPitch());
+        SoundUtils.playSound(session, packet.getSound(), position, packet.getVolume(), packet.getPitch());
     }
 }

File: core/src/test/java/org/geysermc/geyser/network/translators/chat/MessageTranslatorTest.java
Patch:
@@ -85,6 +85,7 @@ public void convertMessageLenient() {
     @Test
     public void convertToPlainText() {
         Assert.assertEquals("JSON message is not handled properly", "Many colors here", MessageTranslator.convertToPlainText("{\"extra\":[{\"color\":\"red\",\"text\":\"M\"},{\"color\":\"gold\",\"text\":\"a\"},{\"color\":\"yellow\",\"text\":\"n\"},{\"color\":\"green\",\"text\":\"y \"},{\"color\":\"aqua\",\"text\":\"c\"},{\"color\":\"dark_purple\",\"text\":\"o\"},{\"color\":\"red\",\"text\":\"l\"},{\"color\":\"gold\",\"text\":\"o\"},{\"color\":\"yellow\",\"text\":\"r\"},{\"color\":\"green\",\"text\":\"s \"},{\"color\":\"aqua\",\"text\":\"h\"},{\"color\":\"dark_purple\",\"text\":\"e\"},{\"color\":\"red\",\"text\":\"r\"},{\"color\":\"gold\",\"text\":\"e\"}],\"text\":\"\"}", "en_US"));
+        Assert.assertEquals("Legacy formatted message is not handled properly (Colors)", "Many colors here", MessageTranslator.convertToPlainText("§cM§6a§en§ay §bc§5o§cl§6o§er§as §bh§5e§cr§6e"));
         Assert.assertEquals("Legacy formatted message is not handled properly (Colors)", "Many colors here", MessageTranslator.convertToPlainText("§cM§6a§en§ay §bc§5o§cl§6o§er§as §bh§5e§cr§6e", "en_US"));
         Assert.assertEquals("Legacy formatted message is not handled properly (Style)", "Obf Bold Strikethrough Underline Italic Reset", MessageTranslator.convertToPlainText("§kObf §lBold §mStrikethrough §nUnderline §oItalic §rReset", "en_US"));
         Assert.assertEquals("Valid lenient JSON is not handled properly", "Strange", MessageTranslator.convertToPlainText("§rStrange", "en_US"));

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -155,7 +155,6 @@
 import org.geysermc.geyser.level.JavaDimension;
 import org.geysermc.geyser.level.WorldManager;
 import org.geysermc.geyser.level.physics.CollisionManager;
-import org.geysermc.geyser.network.GameProtocol;
 import org.geysermc.geyser.network.netty.LocalSession;
 import org.geysermc.geyser.registry.Registries;
 import org.geysermc.geyser.registry.type.BlockMappings;

File: core/src/main/java/org/geysermc/geyser/util/DimensionUtils.java
Patch:
@@ -208,7 +208,9 @@ public static String getTemporaryDimension(String currentDimension, String newDi
             // Prevents rare instances of Bedrock locking up
             return javaToBedrock(newDimension) == 2 ? OVERWORLD : NETHER;
         }
-        return currentDimension.equals(OVERWORLD) ? NETHER : OVERWORLD;
+        // Check current Bedrock dimension and not just the Java dimension.
+        // Fixes rare instances like https://github.com/GeyserMC/Geyser/issues/3161
+        return javaToBedrock(currentDimension) == 0 ? NETHER : OVERWORLD;
     }
 
     public static boolean isCustomBedrockNetherId() {

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/JavaSoundEntityTranslator.java
Patch:
@@ -40,6 +40,6 @@ public void translate(GeyserSession session, ClientboundSoundEntityPacket packet
         if (entity == null) {
             return;
         }
-        SoundUtils.playBuiltinSound(session, packet.getSound(), entity.getPosition(), packet.getVolume(), packet.getPitch());
+        SoundUtils.playSound(session, packet.getSound(), entity.getPosition(), packet.getVolume(), packet.getPitch());
     }
 }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/player/JavaPlayerInfoRemoveTranslator.java
Patch:
@@ -58,8 +58,6 @@ public void translate(GeyserSession session, ClientboundPlayerInfoRemovePacket p
             }
         }
 
-        if (!translate.getEntries().isEmpty()) {
-            session.sendUpstreamPacket(translate);
-        }
+        session.sendUpstreamPacket(translate);
     }
 }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaSoundTranslator.java
Patch:
@@ -38,6 +38,6 @@ public class JavaSoundTranslator extends PacketTranslator<ClientboundSoundPacket
     @Override
     public void translate(GeyserSession session, ClientboundSoundPacket packet) {
         Vector3f position = Vector3f.from(packet.getX(), packet.getY(), packet.getZ());
-        SoundUtils.playBuiltinSound(session, packet.getSound(), position, packet.getVolume(), packet.getPitch());
+        SoundUtils.playSound(session, packet.getSound(), position, packet.getVolume(), packet.getPitch());
     }
 }

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -194,6 +194,7 @@
 import java.time.Instant;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.BitSet;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaMapItemDataTranslator.java
Patch:
@@ -51,6 +51,8 @@ public void translate(GeyserSession session, ClientboundMapItemDataPacket packet
         mapItemDataPacket.setLocked(packet.isLocked());
         mapItemDataPacket.setOrigin(Vector3i.ZERO); // Required since 1.19.20
         mapItemDataPacket.setScale(packet.getScale());
+        // Required as of 1.19.50
+        mapItemDataPacket.getTrackedEntityIds().add(packet.getMapId());
 
         MapData data = packet.getData();
         if (data != null) {

File: core/src/main/java/org/geysermc/geyser/network/GameProtocol.java
Patch:
@@ -28,8 +28,6 @@
 import com.github.steveice10.mc.protocol.codec.MinecraftCodec;
 import com.github.steveice10.mc.protocol.codec.PacketCodec;
 import com.nukkitx.protocol.bedrock.BedrockPacketCodec;
-import com.nukkitx.protocol.bedrock.v527.Bedrock_v527;
-import com.nukkitx.protocol.bedrock.v534.Bedrock_v534;
 import com.nukkitx.protocol.bedrock.v544.Bedrock_v544;
 import com.nukkitx.protocol.bedrock.v545.Bedrock_v545;
 import com.nukkitx.protocol.bedrock.v554.Bedrock_v554;

File: core/src/main/java/org/geysermc/geyser/configuration/GeyserConfiguration.java
Patch:
@@ -111,6 +111,8 @@ public interface GeyserConfiguration {
 
     boolean isNotifyOnNewBedrockUpdate();
 
+    String getUnusableSpaceBlock();
+
     IMetricsInfo getMetrics();
 
     int getPendingAuthenticationTimeout();

File: core/src/main/java/org/geysermc/geyser/configuration/GeyserJacksonConfiguration.java
Patch:
@@ -154,6 +154,9 @@ public abstract class GeyserJacksonConfiguration implements GeyserConfiguration
     @JsonProperty("notify-on-new-bedrock-update")
     private boolean notifyOnNewBedrockUpdate = true;
 
+    @JsonProperty("unusable-space-block")
+    private String unusableSpaceBlock = "minecraft:barrier";
+
     private MetricsInfo metrics = new MetricsInfo();
 
     @JsonProperty("pending-authentication-timeout")

File: core/src/main/java/org/geysermc/geyser/entity/type/living/monster/EndermanEntity.java
Patch:
@@ -48,7 +48,7 @@ public EndermanEntity(GeyserSession session, int entityId, long geyserId, UUID u
     public void setCarriedBlock(EntityMetadata<OptionalInt, OptionalIntMetadataType> entityMetadata) {
         int bedrockBlockId;
         if (entityMetadata.getValue().isPresent()) {
-            bedrockBlockId = entityMetadata.getValue().getAsInt();
+            bedrockBlockId = session.getBlockMappings().getBedrockBlockId(entityMetadata.getValue().getAsInt());
         } else {
             bedrockBlockId = session.getBlockMappings().getBedrockAirId();
         }

File: core/src/main/java/org/geysermc/geyser/registry/populator/RecipeRegistryPopulator.java
Patch:
@@ -82,8 +82,6 @@ public static void populate() {
                     Collections.singletonList(CraftingData.fromMulti(UUID.fromString("d392b075-4ba1-40ae-8789-af868d56f6ce"), ++LAST_RECIPE_NET_ID)));
             craftingData.put(RecipeType.CRAFTING_SPECIAL_MAPCLONING,
                     Collections.singletonList(CraftingData.fromMulti(UUID.fromString("85939755-ba10-4d9d-a4cc-efb7a8e943c4"), ++LAST_RECIPE_NET_ID)));
-            craftingData.put(RecipeType.CRAFTING_SPECIAL_BANNERADDPATTERN,
-                    Collections.singletonList(CraftingData.fromMulti(UUID.fromString("b5c5d105-75a2-4076-af2b-923ea2bf4bf0"), ++LAST_RECIPE_NET_ID)));
 
             // https://github.com/pmmp/PocketMine-MP/blob/stable/src/pocketmine/inventory/MultiRecipe.php
 

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -1420,7 +1420,7 @@ private void startGame() {
         startGamePacket.setRotation(Vector2f.from(1, 1));
 
         startGamePacket.setSeed(-1L);
-        startGamePacket.setDimensionId(DimensionUtils.javaToBedrock(dimension));
+        startGamePacket.setDimensionId(DimensionUtils.javaToBedrock(chunkCache.getBedrockDimension()));
         startGamePacket.setGeneratorId(1);
         startGamePacket.setLevelGameType(GameType.SURVIVAL);
         startGamePacket.setDifficulty(1);

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaLoginTranslator.java
Patch:
@@ -99,6 +99,7 @@ public void translate(GeyserSession session, ClientboundLoginPacket packet) {
         if (needsSpawnPacket) {
             // The player has yet to spawn so let's do that using some of the information in this Java packet
             session.setDimension(newDimension);
+            DimensionUtils.setBedrockDimension(session, newDimension);
             session.connect();
 
             // It is now safe to send these packets

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaRespawnTranslator.java
Patch:
@@ -36,6 +36,7 @@
 import org.geysermc.geyser.translator.inventory.InventoryTranslator;
 import org.geysermc.geyser.translator.protocol.PacketTranslator;
 import org.geysermc.geyser.translator.protocol.Translator;
+import org.geysermc.geyser.util.ChunkUtils;
 import org.geysermc.geyser.util.DimensionUtils;
 
 @Translator(packet = ClientboundRespawnPacket.class)
@@ -92,6 +93,8 @@ public void translate(GeyserSession session, ClientboundRespawnPacket packet) {
             }
             session.setWorldName(packet.getWorldName());
             DimensionUtils.switchDimension(session, newDimension);
+
+            ChunkUtils.loadDimension(session);
         }
     }
 }

File: core/src/main/java/org/geysermc/geyser/network/netty/GeyserServer.java
Patch:
@@ -64,7 +64,7 @@ public void shutdown() {
 
     private ServerBootstrap createBootstrap(EventLoopGroup group) {
         return new ServerBootstrap()
-                .channelFactory(RakChannelFactory.server(NioDatagramChannel.class))
+                .channelFactory(RakChannelFactory.server(EventLoops.getChannelType().getDatagramChannel()))
                 .option(RakChannelOption.RAK_ADVERTISEMENT, bedrockPong().toByteBuf())
                 .group(group)
                 .childHandler(new GeyserServerInitializer(this.geyser));

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/BedrockActionTranslator.java
Patch:
@@ -75,6 +75,9 @@ public void translate(GeyserSession session, PlayerActionPacket packet) {
                 attributesPacket.setRuntimeEntityId(entity.getGeyserId());
                 attributesPacket.getAttributes().addAll(entity.getAttributes().values());
                 session.sendUpstreamPacket(attributesPacket);
+
+                // Bounding box must be sent after a player dies and respawns since 1.19.40
+                entity.updateBoundingBox();
                 break;
             case START_SWIMMING:
                 if (!entity.getFlag(EntityFlag.SWIMMING)) {

File: api/base/src/main/java/org/geysermc/api/util/BedrockPlatform.java
Patch:
@@ -35,7 +35,7 @@ public enum BedrockPlatform {
     AMAZON("Amazon"),
     GEARVR("Gear VR"),
     HOLOLENS("Hololens"),
-    UWP("Windows 10"),
+    UWP("Windows"),
     WIN32("Windows x86"),
     DEDICATED("Dedicated"),
     TVOS("Apple TV"),

File: common/src/main/java/org/geysermc/floodgate/util/DeviceOs.java
Patch:
@@ -40,7 +40,7 @@ public enum DeviceOs {
     AMAZON("Amazon"),
     GEARVR("Gear VR"),
     HOLOLENS("Hololens"),
-    UWP("Windows 10"),
+    UWP("Windows"),
     WIN32("Windows x86"),
     DEDICATED("Dedicated"),
     TVOS("Apple TV"),

File: core/src/main/java/org/geysermc/geyser/registry/populator/CustomItemRegistryPopulator.java
Patch:
@@ -30,7 +30,6 @@
 import com.nukkitx.nbt.NbtType;
 import com.nukkitx.protocol.bedrock.data.inventory.ComponentItemData;
 import com.nukkitx.protocol.bedrock.packet.StartGamePacket;
-import it.unimi.dsi.fastutil.objects.Object2IntMaps;
 import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.api.item.custom.CustomItemData;
 import org.geysermc.geyser.api.item.custom.CustomRenderOffsets;
@@ -43,6 +42,7 @@
 import org.geysermc.geyser.registry.type.NonVanillaItemRegistration;
 
 import javax.annotation.Nullable;
+import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.OptionalInt;
@@ -85,7 +85,7 @@ public static NonVanillaItemRegistration registerCustomItem(NonVanillaCustomItem
                 .maxDamage(customItemData.maxDamage())
                 .repairMaterials(customItemData.repairMaterials())
                 .hasSuspiciousStewEffect(false)
-                .customItemOptions(Object2IntMaps.emptyMap())
+                .customItemOptions(Collections.emptyList())
                 .build();
 
         NbtMapBuilder builder = createComponentNbt(customItemData, customItemData.identifier(), customItemId,

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaLoginTranslator.java
Patch:
@@ -99,6 +99,8 @@ public void translate(GeyserSession session, ClientboundLoginPacket packet) {
         if (needsSpawnPacket) {
             // The player has yet to spawn so let's do that using some of the information in this Java packet
             session.setDimension(newDimension);
+            session.setDimensionType(dimensions.get(newDimension));
+            ChunkUtils.loadDimension(session);
             session.connect();
 
             // It is now safe to send these packets
@@ -145,8 +147,5 @@ public void translate(GeyserSession session, ClientboundLoginPacket packet) {
             // If the player is spawning into the "fake" nether, send them some fog
             session.sendFog("minecraft:fog_hell");
         }
-
-        session.setDimensionType(dimensions.get(newDimension));
-        ChunkUtils.loadDimension(session);
     }
 }

File: core/src/main/java/org/geysermc/geyser/util/DimensionUtils.java
Patch:
@@ -94,6 +94,8 @@ public static void switchDimension(GeyserSession session, String javaDimension)
         changeDimensionPacket.setPosition(pos);
         session.sendUpstreamPacket(changeDimensionPacket);
         session.setDimension(javaDimension);
+        session.setDimensionType(session.getDimensions().get(javaDimension));
+        ChunkUtils.loadDimension(session);
         player.setPosition(pos);
         session.setSpawned(false);
         session.setLastChunkPosition(null);

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaLoginTranslator.java
Patch:
@@ -99,6 +99,8 @@ public void translate(GeyserSession session, ClientboundLoginPacket packet) {
         if (needsSpawnPacket) {
             // The player has yet to spawn so let's do that using some of the information in this Java packet
             session.setDimension(newDimension);
+            session.setDimensionType(dimensions.get(newDimension));
+            ChunkUtils.loadDimension(session);
             session.connect();
 
             // It is now safe to send these packets
@@ -145,8 +147,5 @@ public void translate(GeyserSession session, ClientboundLoginPacket packet) {
             // If the player is spawning into the "fake" nether, send them some fog
             session.sendFog("minecraft:fog_hell");
         }
-
-        session.setDimensionType(dimensions.get(newDimension));
-        ChunkUtils.loadDimension(session);
     }
 }

File: core/src/main/java/org/geysermc/geyser/util/DimensionUtils.java
Patch:
@@ -94,6 +94,8 @@ public static void switchDimension(GeyserSession session, String javaDimension)
         changeDimensionPacket.setPosition(pos);
         session.sendUpstreamPacket(changeDimensionPacket);
         session.setDimension(javaDimension);
+        session.setDimensionType(session.getDimensions().get(javaDimension));
+        ChunkUtils.loadDimension(session);
         player.setPosition(pos);
         session.setSpawned(false);
         session.setLastChunkPosition(null);

File: core/src/main/java/org/geysermc/geyser/registry/populator/CustomItemRegistryPopulator.java
Patch:
@@ -30,7 +30,6 @@
 import com.nukkitx.nbt.NbtType;
 import com.nukkitx.protocol.bedrock.data.inventory.ComponentItemData;
 import com.nukkitx.protocol.bedrock.packet.StartGamePacket;
-import it.unimi.dsi.fastutil.objects.Object2IntMaps;
 import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.api.item.custom.CustomItemData;
 import org.geysermc.geyser.api.item.custom.CustomRenderOffsets;
@@ -43,6 +42,7 @@
 import org.geysermc.geyser.registry.type.NonVanillaItemRegistration;
 
 import javax.annotation.Nullable;
+import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.OptionalInt;
@@ -85,7 +85,7 @@ public static NonVanillaItemRegistration registerCustomItem(NonVanillaCustomItem
                 .maxDamage(customItemData.maxDamage())
                 .repairMaterials(customItemData.repairMaterials())
                 .hasSuspiciousStewEffect(false)
-                .customItemOptions(Object2IntMaps.emptyMap())
+                .customItemOptions(Collections.emptyList())
                 .build();
 
         NbtMapBuilder builder = createComponentNbt(customItemData, customItemData.identifier(), customItemId,

File: core/src/main/java/org/geysermc/geyser/registry/populator/ItemRegistryPopulator.java
Patch:
@@ -567,6 +567,7 @@ public boolean register(@NonNull NonVanillaCustomItemData customItemData) {
                         .bedrockData(0)
                         .bedrockBlockId(-1)
                         .stackSize(1)
+                        .customItemOptions(Object2IntMaps.emptyMap()) // TODO check for custom items with furnace minecart
                         .build());
 
                 creativeItems.add(ItemData.builder()

File: core/src/main/java/org/geysermc/geyser/command/defaults/OffhandCommand.java
Patch:
@@ -47,7 +47,7 @@ public void execute(GeyserSession session, GeyserCommandSource sender, String[]
         }
 
         ServerboundPlayerActionPacket releaseItemPacket = new ServerboundPlayerActionPacket(PlayerAction.SWAP_HANDS, Vector3i.ZERO,
-                Direction.DOWN, session.getWorldCache().nextPredictionSequence());
+                Direction.DOWN, 0);
         session.sendDownstreamPacket(releaseItemPacket);
     }
 

File: core/src/main/java/org/geysermc/geyser/registry/populator/BlockRegistryPopulator.java
Patch:
@@ -234,7 +234,7 @@ private static void registerJavaBlocks() {
             BlockMapping.BlockMappingBuilder builder = BlockMapping.builder();
             JsonNode hardnessNode = entry.getValue().get("block_hardness");
             if (hardnessNode != null) {
-                builder.hardness(hardnessNode.doubleValue());
+                builder.hardness(hardnessNode.floatValue());
             }
 
             JsonNode canBreakWithHandNode = entry.getValue().get("can_break_with_hand");

File: core/src/main/java/org/geysermc/geyser/registry/type/BlockMapping.java
Patch:
@@ -45,7 +45,7 @@ public class BlockMapping {
      */
     int javaBlockId;
 
-    double hardness;
+    float hardness;
     boolean canBreakWithHand;
     /**
      * The index of this collision in collision.json

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -1311,7 +1311,7 @@ public void activateArmAnimationTicking() {
     private boolean disableBlocking() {
         if (playerEntity.getFlag(EntityFlag.BLOCKING)) {
             ServerboundPlayerActionPacket releaseItemPacket = new ServerboundPlayerActionPacket(PlayerAction.RELEASE_USE_ITEM,
-                    Vector3i.ZERO, Direction.DOWN, worldCache.nextPredictionSequence());
+                    Vector3i.ZERO, Direction.DOWN, 0);
             sendDownstreamPacket(releaseItemPacket);
             playerEntity.setFlag(EntityFlag.BLOCKING, false);
             return true;

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/BedrockEmoteTranslator.java
Patch:
@@ -44,7 +44,7 @@ public void translate(GeyserSession session, EmotePacket packet) {
         if (session.getGeyser().getConfig().getEmoteOffhandWorkaround() != EmoteOffhandWorkaroundOption.DISABLED) {
             // Activate the workaround - we should trigger the offhand now
             ServerboundPlayerActionPacket swapHandsPacket = new ServerboundPlayerActionPacket(PlayerAction.SWAP_HANDS, Vector3i.ZERO,
-                    Direction.DOWN, session.getWorldCache().nextPredictionSequence());
+                    Direction.DOWN, 0);
             session.sendDownstreamPacket(swapHandsPacket);
 
             if (session.getGeyser().getConfig().getEmoteOffhandWorkaround() == EmoteOffhandWorkaroundOption.NO_EMOTES) {

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaBlockUpdateTranslator.java
Patch:
@@ -35,7 +35,6 @@
 import org.geysermc.geyser.translator.protocol.PacketTranslator;
 import org.geysermc.geyser.translator.protocol.Translator;
 import org.geysermc.geyser.translator.sound.BlockSoundInteractionTranslator;
-import org.geysermc.geyser.util.ChunkUtils;
 
 @Translator(packet = ClientboundBlockUpdatePacket.class)
 public class JavaBlockUpdateTranslator extends PacketTranslator<ClientboundBlockUpdatePacket> {
@@ -45,7 +44,7 @@ public void translate(GeyserSession session, ClientboundBlockUpdatePacket packet
         Vector3i pos = packet.getEntry().getPosition();
         boolean updatePlacement = session.getGeyser().getPlatformType() != PlatformType.SPIGOT && // Spigot simply listens for the block place event
                 session.getGeyser().getWorldManager().getBlockAt(session, pos) != packet.getEntry().getBlock();
-        ChunkUtils.updateBlock(session, packet.getEntry().getBlock(), pos);
+        session.getWorldCache().updateServerCorrectBlockState(pos, packet.getEntry().getBlock());
         if (updatePlacement) {
             this.checkPlace(session, packet);
         }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaSectionBlocksUpdateTranslator.java
Patch:
@@ -30,15 +30,14 @@
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.translator.protocol.PacketTranslator;
 import org.geysermc.geyser.translator.protocol.Translator;
-import org.geysermc.geyser.util.ChunkUtils;
 
 @Translator(packet = ClientboundSectionBlocksUpdatePacket.class)
 public class JavaSectionBlocksUpdateTranslator extends PacketTranslator<ClientboundSectionBlocksUpdatePacket> {
 
     @Override
     public void translate(GeyserSession session, ClientboundSectionBlocksUpdatePacket packet) {
         for (BlockChangeEntry entry : packet.getEntries()) {
-            ChunkUtils.updateBlock(session, entry.getBlock(), entry.getPosition());
+            session.getWorldCache().updateServerCorrectBlockState(entry.getPosition(), entry.getBlock());
         }
     }
 }

File: core/src/main/java/org/geysermc/geyser/util/ChunkUtils.java
Patch:
@@ -125,7 +125,6 @@ public static void updateChunkPosition(GeyserSession session, Vector3i position)
     public static void updateBlock(GeyserSession session, int blockState, Vector3i position) {
         updateBlockClientSide(session, blockState, position);
         session.getChunkCache().updateBlock(position.getX(), position.getY(), position.getZ(), blockState);
-        session.getWorldCache().updateServerCorrectBlockState(position);
     }
 
     /**

File: bootstrap/fabric/src/main/java/org/geysermc/platform/fabric/GeyserFabricMod.java
Patch:
@@ -176,6 +176,7 @@ public void startGeyser(MinecraftServer server) {
         this.geyserPingPassthrough = GeyserLegacyPingPassthrough.init(connector);
 
         this.geyserCommandManager = new GeyserFabricCommandManager(connector);
+        this.geyserCommandManager.init();
 
         this.geyserWorldManager = new GeyserFabricWorldManager(server);
 

File: api/geyser/src/main/java/org/geysermc/geyser/api/command/CommandExecutor.java
Patch:
@@ -25,13 +25,14 @@
 
 package org.geysermc.geyser.api.command;
 
+import org.checkerframework.checker.nullness.qual.NonNull;
+
 /**
  * Handles executing a command.
  *
  * @param <T> the command source
  */
 public interface CommandExecutor<T extends CommandSource> {
-
     /**
      * Executes the given {@link Command} with the given
      * {@link CommandSource}.
@@ -40,5 +41,5 @@ public interface CommandExecutor<T extends CommandSource> {
      * @param command the command
      * @param args the arguments
      */
-    void execute(T source, Command command, String[] args);
+    void execute(@NonNull T source, @NonNull Command command, @NonNull String[] args);
 }

File: api/geyser/src/main/java/org/geysermc/geyser/api/event/EventRegistrar.java
Patch:
@@ -25,6 +25,7 @@
 
 package org.geysermc.geyser.api.event;
 
+import org.checkerframework.checker.nullness.qual.NonNull;
 import org.geysermc.geyser.api.GeyserApi;
 
 /**
@@ -39,7 +40,8 @@ public interface EventRegistrar {
      * @param object the object to wrap around
      * @return an event registrar instance
      */
-    static EventRegistrar of(Object object) {
+    @NonNull
+    static EventRegistrar of(@NonNull Object object) {
         return GeyserApi.api().provider(EventRegistrar.class, object);
     }
 }

File: api/geyser/src/main/java/org/geysermc/geyser/api/network/BedrockListener.java
Patch:
@@ -25,6 +25,8 @@
 
 package org.geysermc.geyser.api.network;
 
+import org.checkerframework.checker.nullness.qual.NonNull;
+
 /**
  * The listener that handles connections from Minecraft:
  * Bedrock Edition.
@@ -37,6 +39,7 @@ public interface BedrockListener {
      *
      * @return the listening address
      */
+    @NonNull
     String address();
 
     /**

File: api/geyser/src/main/java/org/geysermc/geyser/api/network/RemoteServer.java
Patch:
@@ -25,6 +25,8 @@
 
 package org.geysermc.geyser.api.network;
 
+import org.jetbrains.annotations.NotNull;
+
 /**
  * Represents the Java server that Geyser is connecting to.
  */
@@ -63,5 +65,6 @@ public interface RemoteServer {
      *
      * @return the auth type required by the remote server
      */
+    @NotNull
     AuthType authType();
 }

File: core/src/main/java/org/geysermc/geyser/inventory/Inventory.java
Patch:
@@ -106,6 +106,7 @@ protected Inventory(String title, int javaId, int size, ContainerType containerT
     // This is to prevent conflicts with special bedrock inventory IDs.
     // The vanilla java server only sends an ID between 1 and 100 when opening an inventory,
     // so this is rarely needed. (certain plugins)
+    // Example: https://github.com/GeyserMC/Geyser/issues/3254
     public int getBedrockId() {
         return javaId <= 100 ? javaId : (javaId % 100) + 1;
     }

File: core/src/main/java/org/geysermc/geyser/session/cache/WorldCache.java
Patch:
@@ -173,7 +173,6 @@ public void endPredictionsUpTo(int sequence) {
             if (serverVerifiedState.sequence <= sequence) {
                 // This block may be out of sync with the server
                 // In 1.19.0 Java, you can verify this by trying to mine in spawn protection
-                System.out.println("Resetting " + entry.getKey() + " to " + BlockRegistries.JAVA_BLOCKS.get(serverVerifiedState.blockState).getJavaIdentifier());
                 ChunkUtils.updateBlockClientSide(session, serverVerifiedState.blockState, entry.getKey());
                 it.remove();
             }

File: bootstrap/bungeecord/src/main/java/org/geysermc/geyser/platform/bungeecord/GeyserBungeePlugin.java
Patch:
@@ -149,6 +149,8 @@ public void onEnable() {
         }
 
         this.getProxy().getPluginManager().registerCommand(this, new GeyserBungeeCommandExecutor(geyser));
+
+        this.getProxy().getPluginManager().registerListener(this, new GeyserBungeeUpdateListener());
     }
 
     @Override

File: bootstrap/velocity/src/main/java/org/geysermc/geyser/platform/velocity/GeyserVelocityPlugin.java
Patch:
@@ -161,6 +161,8 @@ public void onEnable() {
         } else {
             this.geyserPingPassthrough = new GeyserVelocityPingPassthrough(proxyServer);
         }
+
+        proxyServer.getEventManager().register(this, new GeyserVelocityUpdateListener());
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/Constants.java
Patch:
@@ -37,6 +37,9 @@ public final class Constants {
 
     public static final String FLOODGATE_DOWNLOAD_LOCATION = "https://ci.opencollab.dev/job/GeyserMC/job/Floodgate/job/master/";
 
+    public static final String GEYSER_DOWNLOAD_LOCATION = "https://ci.geysermc.org";
+    public static final String UPDATE_PERMISSION = "geyser.update";
+
     static final String SAVED_REFRESH_TOKEN_FILE = "saved-refresh-tokens.json";
 
     static {

File: core/src/main/java/org/geysermc/geyser/configuration/GeyserConfiguration.java
Patch:
@@ -105,6 +105,8 @@ public interface GeyserConfiguration {
 
     int getCustomSkullRenderDistance();
 
+    boolean isNotifyOnNewBedrockUpdate();
+
     IMetricsInfo getMetrics();
 
     int getPendingAuthenticationTimeout();

File: core/src/main/java/org/geysermc/geyser/configuration/GeyserJacksonConfiguration.java
Patch:
@@ -148,6 +148,9 @@ public abstract class GeyserJacksonConfiguration implements GeyserConfiguration
     @JsonProperty("xbox-achievements-enabled")
     private boolean xboxAchievementsEnabled = false;
 
+    @JsonProperty("notify-on-new-bedrock-update")
+    private boolean notifyOnNewBedrockUpdate = true;
+
     private MetricsInfo metrics = new MetricsInfo();
 
     @JsonProperty("pending-authentication-timeout")

File: core/src/main/java/org/geysermc/geyser/session/cache/WorldCache.java
Patch:
@@ -31,6 +31,7 @@
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
 import lombok.Getter;
 import lombok.Setter;
+import org.geysermc.geyser.registry.BlockRegistries;
 import org.geysermc.geyser.scoreboard.Scoreboard;
 import org.geysermc.geyser.scoreboard.ScoreboardUpdater.ScoreboardSession;
 import org.geysermc.geyser.session.GeyserSession;
@@ -172,6 +173,7 @@ public void endPredictionsUpTo(int sequence) {
             if (serverVerifiedState.sequence <= sequence) {
                 // This block may be out of sync with the server
                 // In 1.19.0 Java, you can verify this by trying to mine in spawn protection
+                System.out.println("Resetting " + entry.getKey() + " to " + BlockRegistries.JAVA_BLOCKS.get(serverVerifiedState.blockState).getJavaIdentifier());
                 ChunkUtils.updateBlockClientSide(session, serverVerifiedState.blockState, entry.getKey());
                 it.remove();
             }

File: core/src/main/java/org/geysermc/geyser/util/WebUtils.java
Patch:
@@ -73,6 +73,8 @@ public static String getBody(String reqURL) {
     public static JsonNode getJson(String reqURL) throws IOException {
         HttpURLConnection con = (HttpURLConnection) new URL(reqURL).openConnection();
         con.setRequestProperty("User-Agent", "Geyser-" + GeyserImpl.getInstance().getPlatformType().toString() + "/" + GeyserImpl.VERSION);
+        con.setConnectTimeout(10000);
+        con.setReadTimeout(10000);
         return GeyserImpl.JSON_MAPPER.readTree(con.getInputStream());
     }
 

File: api/geyser/src/main/java/org/geysermc/geyser/api/event/connection/ConnectionEvent.java
Patch:
@@ -26,8 +26,8 @@
 package org.geysermc.geyser.api.event.connection;
 
 import org.checkerframework.checker.nullness.qual.NonNull;
+import org.geysermc.event.Event;
 import org.geysermc.geyser.api.connection.GeyserConnection;
-import org.geysermc.geyser.api.event.Event;
 
 /**
  * An event that contains a {@link GeyserConnection}.

File: api/geyser/src/main/java/org/geysermc/geyser/api/event/downstream/ServerDefineCommandsEvent.java
Patch:
@@ -26,8 +26,8 @@
 package org.geysermc.geyser.api.event.downstream;
 
 import org.checkerframework.checker.nullness.qual.NonNull;
+import org.geysermc.event.Cancellable;
 import org.geysermc.geyser.api.connection.GeyserConnection;
-import org.geysermc.geyser.api.event.Cancellable;
 import org.geysermc.geyser.api.event.connection.ConnectionEvent;
 
 import java.util.Set;

File: api/geyser/src/main/java/org/geysermc/geyser/api/event/lifecycle/GeyserLoadResourcePacksEvent.java
Patch:
@@ -26,7 +26,7 @@
 package org.geysermc.geyser.api.event.lifecycle;
 
 import org.checkerframework.checker.nullness.qual.NonNull;
-import org.geysermc.geyser.api.event.Event;
+import org.geysermc.event.Event;
 
 import java.nio.file.Path;
 import java.util.List;

File: api/geyser/src/main/java/org/geysermc/geyser/api/event/lifecycle/GeyserPostInitializeEvent.java
Patch:
@@ -26,7 +26,7 @@
 package org.geysermc.geyser.api.event.lifecycle;
 
 import org.checkerframework.checker.nullness.qual.NonNull;
-import org.geysermc.geyser.api.event.Event;
+import org.geysermc.event.Event;
 import org.geysermc.geyser.api.event.EventBus;
 import org.geysermc.geyser.api.extension.ExtensionManager;
 

File: api/geyser/src/main/java/org/geysermc/geyser/api/event/lifecycle/GeyserPreInitializeEvent.java
Patch:
@@ -26,7 +26,7 @@
 package org.geysermc.geyser.api.event.lifecycle;
 
 import org.checkerframework.checker.nullness.qual.NonNull;
-import org.geysermc.geyser.api.event.Event;
+import org.geysermc.event.Event;
 import org.geysermc.geyser.api.event.EventBus;
 import org.geysermc.geyser.api.extension.ExtensionManager;
 

File: api/geyser/src/main/java/org/geysermc/geyser/api/event/lifecycle/GeyserShutdownEvent.java
Patch:
@@ -26,8 +26,8 @@
 package org.geysermc.geyser.api.event.lifecycle;
 
 import org.checkerframework.checker.nullness.qual.NonNull;
+import org.geysermc.event.Event;
 import org.geysermc.geyser.api.command.CommandManager;
-import org.geysermc.geyser.api.event.Event;
 import org.geysermc.geyser.api.event.EventBus;
 import org.geysermc.geyser.api.extension.ExtensionManager;
 

File: core/src/main/java/org/geysermc/geyser/registry/populator/ItemRegistryPopulator.java
Patch:
@@ -52,6 +52,7 @@
 import org.geysermc.geyser.api.item.custom.CustomItemData;
 import org.geysermc.geyser.api.item.custom.CustomItemOptions;
 import org.geysermc.geyser.api.item.custom.NonVanillaCustomItemData;
+import org.geysermc.geyser.event.type.DefineCustomItemsEvent;
 import org.geysermc.geyser.inventory.item.StoredItemMappings;
 import org.geysermc.geyser.item.GeyserCustomMappingData;
 import org.geysermc.geyser.item.mappings.MappingsConfigReader;
@@ -108,7 +109,7 @@ public static void populate() {
             });
 
             nonVanillaCustomItems = new ObjectArrayList<>();
-            GeyserImpl.getInstance().eventBus().fire(new GeyserDefineCustomItemsEvent(customItems, nonVanillaCustomItems) {
+            GeyserImpl.getInstance().eventBus().fire(new DefineCustomItemsEvent(customItems, nonVanillaCustomItems) {
                 @Override
                 public boolean register(@NonNull String identifier, @NonNull CustomItemData customItemData) {
                     if (CustomItemRegistryPopulator.initialCheck(identifier, customItemData, items)) {

File: common/src/main/java/org/geysermc/floodgate/pluginmessage/PluginMessageChannels.java
Patch:
@@ -25,7 +25,7 @@
 
 package org.geysermc.floodgate.pluginmessage;
 
-import com.google.common.base.Charsets;
+import java.nio.charset.StandardCharsets;
 
 public final class PluginMessageChannels {
     public static final String SKIN = "floodgate:skin";
@@ -35,7 +35,7 @@ public final class PluginMessageChannels {
 
     private static final byte[] FLOODGATE_REGISTER_DATA =
             String.join("\0", SKIN, FORM, TRANSFER, PACKET)
-                    .getBytes(Charsets.UTF_8);
+                    .getBytes(StandardCharsets.UTF_8);
 
     /**
      * Get the prebuilt register data as a byte array

File: core/src/main/java/org/geysermc/geyser/level/BedrockMapIcon.java
Patch:
@@ -33,7 +33,7 @@ public enum BedrockMapIcon {
     ICON_ITEM_FRAME(MapIconType.GREEN_ARROW, 7),
     ICON_RED_ARROW(MapIconType.RED_ARROW, 2),
     ICON_BLUE_ARROW(MapIconType.BLUE_ARROW, 3),
-    ICON_TREASURE_MARKER(MapIconType.TREASURE_MARKER, 4),
+    ICON_WHITE_CROSS(MapIconType.WHITE_CROSS, 4, 0, 0, 0), // Doesn't exist on Bedrock, replaced with a black cross
     ICON_RED_POINTER(MapIconType.RED_POINTER, 5),
     ICON_WHITE_CIRCLE(MapIconType.WHITE_CIRCLE, 6),
     ICON_SMALL_WHITE_CIRCLE(MapIconType.SMALL_WHITE_CIRCLE, 13),
@@ -54,7 +54,8 @@ public enum BedrockMapIcon {
     ICON_BROWN_BANNER(MapIconType.BROWN_BANNER, 13, 131, 84, 50),
     ICON_GREEN_BANNER(MapIconType.GREEN_BANNER, 13, 94, 124, 22),
     ICON_RED_BANNER(MapIconType.RED_BANNER, 13, 176, 46, 38),
-    ICON_BLACK_BANNER(MapIconType.BLACK_BANNER, 13, 29, 29, 33);
+    ICON_BLACK_BANNER(MapIconType.BLACK_BANNER, 13, 29, 29, 33),
+    ICON_TREASURE_MARKER(MapIconType.TREASURE_MARKER, 4);
 
     private static final BedrockMapIcon[] VALUES = values();
 

File: core/src/main/java/org/geysermc/geyser/network/GameProtocol.java
Patch:
@@ -45,7 +45,7 @@ public final class GameProtocol {
      * Default Bedrock codec that should act as a fallback. Should represent the latest available
      * release of the game that Geyser supports.
      */
-    public static final BedrockPacketCodec DEFAULT_BEDROCK_CODEC = Bedrock_v534.V534_CODEC;
+    public static final BedrockPacketCodec DEFAULT_BEDROCK_CODEC = Bedrock_v544.V544_CODEC;
     /**
      * A list of all supported Bedrock versions that can join Geyser
      */
@@ -61,10 +61,10 @@ public final class GameProtocol {
         SUPPORTED_BEDROCK_CODECS.add(Bedrock_v527.V527_CODEC.toBuilder()
                 .minecraftVersion("1.19.0/1.19.2")
                 .build());
-        SUPPORTED_BEDROCK_CODECS.add(DEFAULT_BEDROCK_CODEC.toBuilder()
+        SUPPORTED_BEDROCK_CODECS.add(Bedrock_v534.V534_CODEC.toBuilder()
                 .minecraftVersion("1.19.10/1.19.11")
                 .build());
-        SUPPORTED_BEDROCK_CODECS.add(Bedrock_v544.V544_CODEC);
+        SUPPORTED_BEDROCK_CODECS.add(DEFAULT_BEDROCK_CODEC);
     }
 
     /**

File: core/src/main/java/org/geysermc/geyser/registry/populator/ItemRegistryPopulator.java
Patch:
@@ -40,6 +40,7 @@
 import it.unimi.dsi.fastutil.ints.*;
 import com.nukkitx.protocol.bedrock.v527.Bedrock_v527;
 import com.nukkitx.protocol.bedrock.v534.Bedrock_v534;
+import com.nukkitx.protocol.bedrock.v544.Bedrock_v544;
 import it.unimi.dsi.fastutil.ints.Int2IntMap;
 import it.unimi.dsi.fastutil.ints.IntArrayList;
 import it.unimi.dsi.fastutil.ints.IntList;
@@ -78,6 +79,7 @@ public static void populate() {
         paletteVersions.put("1_19_0", new PaletteVersion(Bedrock_v527.V527_CODEC.getProtocolVersion(),
                 Collections.singletonMap("minecraft:trader_llama_spawn_egg", "minecraft:llama_spawn_egg")));
         paletteVersions.put("1_19_10", new PaletteVersion(Bedrock_v534.V534_CODEC.getProtocolVersion(), Collections.emptyMap()));
+        paletteVersions.put("1_19_20", new PaletteVersion(Bedrock_v544.V544_CODEC.getProtocolVersion(), Collections.emptyMap()));
 
         GeyserBootstrap bootstrap = GeyserImpl.getInstance().getBootstrap();
 

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaMapItemDataTranslator.java
Patch:
@@ -28,6 +28,7 @@
 import com.github.steveice10.mc.protocol.data.game.level.map.MapData;
 import com.github.steveice10.mc.protocol.data.game.level.map.MapIcon;
 import com.github.steveice10.mc.protocol.packet.ingame.clientbound.level.ClientboundMapItemDataPacket;
+import com.nukkitx.math.vector.Vector3i;
 import com.nukkitx.protocol.bedrock.data.MapDecoration;
 import com.nukkitx.protocol.bedrock.data.MapTrackedObject;
 import org.geysermc.geyser.level.BedrockMapIcon;
@@ -48,6 +49,7 @@ public void translate(GeyserSession session, ClientboundMapItemDataPacket packet
         mapItemDataPacket.setUniqueMapId(packet.getMapId());
         mapItemDataPacket.setDimensionId(DimensionUtils.javaToBedrock(session.getDimension()));
         mapItemDataPacket.setLocked(packet.isLocked());
+        mapItemDataPacket.setOrigin(Vector3i.ZERO); // Required since 1.19.20
         mapItemDataPacket.setScale(packet.getScale());
 
         MapData data = packet.getData();

File: common/src/main/java/org/geysermc/floodgate/pluginmessage/PluginMessageChannels.java
Patch:
@@ -25,7 +25,7 @@
 
 package org.geysermc.floodgate.pluginmessage;
 
-import com.google.common.base.Charsets;
+import java.nio.charset.StandardCharsets;
 
 public final class PluginMessageChannels {
     public static final String SKIN = "floodgate:skin";
@@ -35,7 +35,7 @@ public final class PluginMessageChannels {
 
     private static final byte[] FLOODGATE_REGISTER_DATA =
             String.join("\0", SKIN, FORM, TRANSFER, PACKET)
-                    .getBytes(Charsets.UTF_8);
+                    .getBytes(StandardCharsets.UTF_8);
 
     /**
      * Get the prebuilt register data as a byte array

File: core/src/main/java/org/geysermc/geyser/level/BedrockMapIcon.java
Patch:
@@ -33,7 +33,7 @@ public enum BedrockMapIcon {
     ICON_ITEM_FRAME(MapIconType.GREEN_ARROW, 7),
     ICON_RED_ARROW(MapIconType.RED_ARROW, 2),
     ICON_BLUE_ARROW(MapIconType.BLUE_ARROW, 3),
-    ICON_TREASURE_MARKER(MapIconType.TREASURE_MARKER, 4),
+    ICON_WHITE_CROSS(MapIconType.WHITE_CROSS, 4, 0, 0, 0), // Doesn't exist on Bedrock, replaced with a black cross
     ICON_RED_POINTER(MapIconType.RED_POINTER, 5),
     ICON_WHITE_CIRCLE(MapIconType.WHITE_CIRCLE, 6),
     ICON_SMALL_WHITE_CIRCLE(MapIconType.SMALL_WHITE_CIRCLE, 13),
@@ -54,7 +54,8 @@ public enum BedrockMapIcon {
     ICON_BROWN_BANNER(MapIconType.BROWN_BANNER, 13, 131, 84, 50),
     ICON_GREEN_BANNER(MapIconType.GREEN_BANNER, 13, 94, 124, 22),
     ICON_RED_BANNER(MapIconType.RED_BANNER, 13, 176, 46, 38),
-    ICON_BLACK_BANNER(MapIconType.BLACK_BANNER, 13, 29, 29, 33);
+    ICON_BLACK_BANNER(MapIconType.BLACK_BANNER, 13, 29, 29, 33),
+    ICON_TREASURE_MARKER(MapIconType.TREASURE_MARKER, 4);
 
     private static final BedrockMapIcon[] VALUES = values();
 

File: core/src/main/java/org/geysermc/geyser/network/GameProtocol.java
Patch:
@@ -45,7 +45,7 @@ public final class GameProtocol {
      * Default Bedrock codec that should act as a fallback. Should represent the latest available
      * release of the game that Geyser supports.
      */
-    public static final BedrockPacketCodec DEFAULT_BEDROCK_CODEC = Bedrock_v534.V534_CODEC;
+    public static final BedrockPacketCodec DEFAULT_BEDROCK_CODEC = Bedrock_v544.V544_CODEC;
     /**
      * A list of all supported Bedrock versions that can join Geyser
      */
@@ -61,10 +61,10 @@ public final class GameProtocol {
         SUPPORTED_BEDROCK_CODECS.add(Bedrock_v527.V527_CODEC.toBuilder()
                 .minecraftVersion("1.19.0/1.19.2")
                 .build());
-        SUPPORTED_BEDROCK_CODECS.add(DEFAULT_BEDROCK_CODEC.toBuilder()
+        SUPPORTED_BEDROCK_CODECS.add(Bedrock_v534.V534_CODEC.toBuilder()
                 .minecraftVersion("1.19.10/1.19.11")
                 .build());
-        SUPPORTED_BEDROCK_CODECS.add(Bedrock_v544.V544_CODEC);
+        SUPPORTED_BEDROCK_CODECS.add(DEFAULT_BEDROCK_CODEC);
     }
 
     /**

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaMapItemDataTranslator.java
Patch:
@@ -28,6 +28,7 @@
 import com.github.steveice10.mc.protocol.data.game.level.map.MapData;
 import com.github.steveice10.mc.protocol.data.game.level.map.MapIcon;
 import com.github.steveice10.mc.protocol.packet.ingame.clientbound.level.ClientboundMapItemDataPacket;
+import com.nukkitx.math.vector.Vector3i;
 import com.nukkitx.protocol.bedrock.data.MapDecoration;
 import com.nukkitx.protocol.bedrock.data.MapTrackedObject;
 import org.geysermc.geyser.level.BedrockMapIcon;
@@ -48,6 +49,7 @@ public void translate(GeyserSession session, ClientboundMapItemDataPacket packet
         mapItemDataPacket.setUniqueMapId(packet.getMapId());
         mapItemDataPacket.setDimensionId(DimensionUtils.javaToBedrock(session.getDimension()));
         mapItemDataPacket.setLocked(packet.isLocked());
+        mapItemDataPacket.setOrigin(Vector3i.ZERO); // Required since 1.19.20
         mapItemDataPacket.setScale(packet.getScale());
 
         MapData data = packet.getData();

File: core/src/main/java/org/geysermc/geyser/level/BedrockMapIcon.java
Patch:
@@ -33,7 +33,7 @@ public enum BedrockMapIcon {
     ICON_ITEM_FRAME(MapIconType.GREEN_ARROW, 7),
     ICON_RED_ARROW(MapIconType.RED_ARROW, 2),
     ICON_BLUE_ARROW(MapIconType.BLUE_ARROW, 3),
-    ICON_TREASURE_MARKER(MapIconType.TREASURE_MARKER, 4),
+    ICON_WHITE_CROSS(MapIconType.WHITE_CROSS, 4, 0, 0, 0), // Doesn't exist on Bedrock, replaced with a black cross
     ICON_RED_POINTER(MapIconType.RED_POINTER, 5),
     ICON_WHITE_CIRCLE(MapIconType.WHITE_CIRCLE, 6),
     ICON_SMALL_WHITE_CIRCLE(MapIconType.SMALL_WHITE_CIRCLE, 13),
@@ -54,7 +54,8 @@ public enum BedrockMapIcon {
     ICON_BROWN_BANNER(MapIconType.BROWN_BANNER, 13, 131, 84, 50),
     ICON_GREEN_BANNER(MapIconType.GREEN_BANNER, 13, 94, 124, 22),
     ICON_RED_BANNER(MapIconType.RED_BANNER, 13, 176, 46, 38),
-    ICON_BLACK_BANNER(MapIconType.BLACK_BANNER, 13, 29, 29, 33);
+    ICON_BLACK_BANNER(MapIconType.BLACK_BANNER, 13, 29, 29, 33),
+    ICON_TREASURE_MARKER(MapIconType.TREASURE_MARKER, 4);
 
     private static final BedrockMapIcon[] VALUES = values();
 

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaMapItemDataTranslator.java
Patch:
@@ -28,6 +28,7 @@
 import com.github.steveice10.mc.protocol.data.game.level.map.MapData;
 import com.github.steveice10.mc.protocol.data.game.level.map.MapIcon;
 import com.github.steveice10.mc.protocol.packet.ingame.clientbound.level.ClientboundMapItemDataPacket;
+import com.nukkitx.math.vector.Vector3i;
 import com.nukkitx.protocol.bedrock.data.MapDecoration;
 import com.nukkitx.protocol.bedrock.data.MapTrackedObject;
 import org.geysermc.geyser.session.GeyserSession;
@@ -48,6 +49,7 @@ public void translate(GeyserSession session, ClientboundMapItemDataPacket packet
         mapItemDataPacket.setUniqueMapId(packet.getMapId());
         mapItemDataPacket.setDimensionId(DimensionUtils.javaToBedrock(session.getDimension()));
         mapItemDataPacket.setLocked(packet.isLocked());
+        mapItemDataPacket.setOrigin(Vector3i.ZERO); // Required since 1.19.20
         mapItemDataPacket.setScale(packet.getScale());
 
         MapData data = packet.getData();

File: core/src/main/java/org/geysermc/geyser/network/MinecraftProtocol.java
Patch:
@@ -45,7 +45,7 @@ public final class MinecraftProtocol {
      * Default Bedrock codec that should act as a fallback. Should represent the latest available
      * release of the game that Geyser supports.
      */
-    public static final BedrockPacketCodec DEFAULT_BEDROCK_CODEC = Bedrock_v534.V534_CODEC;
+    public static final BedrockPacketCodec DEFAULT_BEDROCK_CODEC = Bedrock_v544.V544_CODEC;
     /**
      * A list of all supported Bedrock versions that can join Geyser
      */
@@ -61,10 +61,10 @@ public final class MinecraftProtocol {
         SUPPORTED_BEDROCK_CODECS.add(Bedrock_v527.V527_CODEC.toBuilder()
                 .minecraftVersion("1.19.0/1.19.2")
                 .build());
-        SUPPORTED_BEDROCK_CODECS.add(DEFAULT_BEDROCK_CODEC.toBuilder()
+        SUPPORTED_BEDROCK_CODECS.add(Bedrock_v534.V534_CODEC.toBuilder()
                 .minecraftVersion("1.19.10/1.19.11")
                 .build());
-        SUPPORTED_BEDROCK_CODECS.add(Bedrock_v544.V544_CODEC);
+        SUPPORTED_BEDROCK_CODECS.add(DEFAULT_BEDROCK_CODEC);
     }
 
     /**

File: core/src/main/java/org/geysermc/geyser/registry/populator/ItemRegistryPopulator.java
Patch:
@@ -40,6 +40,7 @@
 import it.unimi.dsi.fastutil.ints.*;
 import com.nukkitx.protocol.bedrock.v527.Bedrock_v527;
 import com.nukkitx.protocol.bedrock.v534.Bedrock_v534;
+import com.nukkitx.protocol.bedrock.v544.Bedrock_v544;
 import it.unimi.dsi.fastutil.ints.Int2IntMap;
 import it.unimi.dsi.fastutil.ints.IntArrayList;
 import it.unimi.dsi.fastutil.ints.IntList;
@@ -78,6 +79,7 @@ public static void populate() {
         paletteVersions.put("1_19_0", new PaletteVersion(Bedrock_v527.V527_CODEC.getProtocolVersion(),
                 Collections.singletonMap("minecraft:trader_llama_spawn_egg", "minecraft:llama_spawn_egg")));
         paletteVersions.put("1_19_10", new PaletteVersion(Bedrock_v534.V534_CODEC.getProtocolVersion(), Collections.emptyMap()));
+        paletteVersions.put("1_19_20", new PaletteVersion(Bedrock_v544.V544_CODEC.getProtocolVersion(), Collections.emptyMap()));
 
         GeyserBootstrap bootstrap = GeyserImpl.getInstance().getBootstrap();
 

File: bootstrap/standalone/src/main/java/org/geysermc/geyser/platform/standalone/GeyserStandaloneBootstrap.java
Patch:
@@ -52,8 +52,6 @@
 import org.geysermc.geyser.text.GeyserLocale;
 import org.geysermc.geyser.util.FileUtils;
 import org.geysermc.geyser.util.LoopbackUtil;
-import org.geysermc.geyser.platform.standalone.command.GeyserCommandManager;
-import org.geysermc.geyser.platform.standalone.gui.GeyserStandaloneGUI;
 
 import java.io.File;
 import java.io.IOException;

File: core/src/main/java/org/geysermc/geyser/command/GeyserCommandManager.java
Patch:
@@ -66,6 +66,7 @@ public void init() {
         registerBuiltInCommand(new StatisticsCommand(geyser, "statistics", "geyser.commands.statistics.desc", "geyser.command.statistics"));
         registerBuiltInCommand(new AdvancementsCommand("advancements", "geyser.commands.advancements.desc", "geyser.command.advancements"));
         registerBuiltInCommand(new AdvancedTooltipsCommand("tooltips", "geyser.commands.advancedtooltips.desc", "geyser.command.tooltips"));
+        registerBuiltInCommand(new ConnectionTestCommand(geyser, "connectiontest", "geyser.commands.connectiontest.desc", "geyser.command.connectiontest"));
         if (GeyserImpl.getInstance().getPlatformType() == PlatformType.STANDALONE) {
             registerBuiltInCommand(new StopCommand(geyser, "stop", "geyser.commands.stop.desc", "geyser.command.stop"));
         }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaLoginTranslator.java
Patch:
@@ -40,8 +40,6 @@
 import org.geysermc.geyser.entity.type.player.SessionPlayerEntity;
 import org.geysermc.geyser.level.JavaDimension;
 import org.geysermc.geyser.session.GeyserSession;
-import org.geysermc.geyser.text.ChatTypeEntry;
-import org.geysermc.geyser.session.auth.AuthType;
 import org.geysermc.geyser.text.TextDecoration;
 import org.geysermc.geyser.translator.level.BiomeTranslator;
 import org.geysermc.geyser.translator.protocol.PacketTranslator;

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/inventory/JavaMerchantOffersTranslator.java
Patch:
@@ -104,7 +104,9 @@ public static void openMerchant(GeyserSession session, ClientboundMerchantOffers
             recipe.put("sell", getItemTag(session, trade.getOutput()));
 
             // The buy count before demand and special price adjustments
-            recipe.putInt("buyCountA", Math.max(trade.getFirstInput().getAmount(), 0));
+            // The first input CAN be null as of Java 1.19.0/Bedrock 1.19.10
+            // Replicable item: https://gist.github.com/Camotoy/3f3f23d1f80981d1b4472bdb23bba698 from https://github.com/GeyserMC/Geyser/issues/3171
+            recipe.putInt("buyCountA", trade.getFirstInput() != null ? Math.max(trade.getFirstInput().getAmount(), 0) : 0);
             recipe.putInt("buyCountB", trade.getSecondInput() != null ? Math.max(trade.getSecondInput().getAmount(), 0) : 0);
 
             recipe.putInt("demand", trade.getDemand()); // Seems to have no effect

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -1692,7 +1692,8 @@ public void sendAdventureSettings() {
 
             abilityLayer.setLayerType(AbilityLayer.Type.BASE);
             abilityLayer.setFlySpeed(flySpeed);
-            abilityLayer.setWalkSpeed(walkSpeed);
+            // https://github.com/GeyserMC/Geyser/issues/3139 as of 1.19.10
+            abilityLayer.setWalkSpeed(walkSpeed == 0f ? 0.01f : walkSpeed);
             Collections.addAll(abilityLayer.getAbilitiesSet(), USED_ABILITIES);
 
             updateAbilitiesPacket.getAbilityLayers().add(abilityLayer);

File: bootstrap/standalone/src/main/java/org/geysermc/geyser/platform/standalone/GeyserStandaloneBootstrap.java
Patch:
@@ -51,6 +51,7 @@
 import org.geysermc.geyser.text.GeyserLocale;
 import org.geysermc.geyser.platform.standalone.command.GeyserCommandManager;
 import org.geysermc.geyser.platform.standalone.gui.GeyserStandaloneGUI;
+import org.geysermc.geyser.util.LoopbackUtil;
 
 import java.io.File;
 import java.io.IOException;
@@ -187,7 +188,7 @@ public void onEnable() {
 
         geyserLogger = new GeyserStandaloneLogger();
 
-        LoopbackUtil.checkLoopback(geyserLogger);
+        LoopbackUtil.checkAndApplyLoopback(geyserLogger);
         
         try {
             File configFile = FileUtils.fileOrCopiedFromResource(new File(configFilename), "config.yml",

File: core/src/main/java/org/geysermc/geyser/command/CommandManager.java
Patch:
@@ -55,6 +55,7 @@ public CommandManager(GeyserImpl geyser) {
         registerCommand(new StatisticsCommand(geyser, "statistics", "geyser.commands.statistics.desc", "geyser.command.statistics"));
         registerCommand(new AdvancementsCommand("advancements", "geyser.commands.advancements.desc", "geyser.command.advancements"));
         registerCommand(new AdvancedTooltipsCommand("tooltips", "geyser.commands.advancedtooltips.desc", "geyser.command.tooltips"));
+        registerCommand(new ConnectionTestCommand(geyser, "connectiontest", "geyser.commands.connectiontest.desc", "geyser.command.connectiontest"));
         if (GeyserImpl.getInstance().getPlatformType() == PlatformType.STANDALONE) {
             registerCommand(new StopCommand(geyser, "stop", "geyser.commands.stop.desc", "geyser.command.stop"));
         }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/BedrockInventoryTransactionTranslator.java
Patch:
@@ -542,7 +542,7 @@ private void restoreCorrectBlock(GeyserSession session, Vector3i blockPos, Inven
 
     private boolean isIncorrectHeldItem(GeyserSession session, InventoryTransactionPacket packet) {
         int javaSlot = session.getPlayerInventory().getOffsetForHotbar(packet.getHotbarSlot());
-        int expectedItemId = ItemTranslator.getBedrockItemMapping(session, session.getPlayerInventory().getItem(javaSlot)).getBedrockId();
+        int expectedItemId = ItemTranslator.getBedrockItemId(session, session.getPlayerInventory().getItem(javaSlot));
         int heldItemId = packet.getItemInHand() == null ? ItemData.AIR.getId() : packet.getItemInHand().getId();
 
         if (expectedItemId != heldItemId) {

File: bootstrap/spigot/src/main/java/org/geysermc/geyser/platform/spigot/GeyserSpigotPlugin.java
Patch:
@@ -176,7 +176,7 @@ public void onEnable() {
                 this.geyserSpigotPingPassthrough = GeyserLegacyPingPassthrough.init(geyser);
             }
         }
-        geyserLogger.info("Spigot ping passthrough type: " + (this.geyserSpigotPingPassthrough == null ? null : this.geyserSpigotPingPassthrough.getClass()));
+        geyserLogger.debug("Spigot ping passthrough type: " + (this.geyserSpigotPingPassthrough == null ? null : this.geyserSpigotPingPassthrough.getClass()));
 
         this.geyserCommandManager = new GeyserSpigotCommandManager(geyser);
 

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -392,7 +392,7 @@ public class GeyserSession implements GeyserConnection, CommandSender {
      * Whether to work around 1.13's different behavior in villager trading menus.
      */
     @Setter
-    private boolean emulatePost1_14Logic = true;
+    private boolean emulatePost1_13Logic = true;
     /**
      * Starting in 1.17, Java servers expect the <code>carriedItem</code> parameter of the serverbound click container
      * packet to be the current contents of the mouse after the transaction has been done. 1.16 expects the clicked slot

File: core/src/main/java/org/geysermc/geyser/session/cache/TagCache.java
Patch:
@@ -101,10 +101,10 @@ public void loadPacket(GeyserSession session, ClientboundUpdateTagsPacket packet
         this.smallFlowers = IntList.of(itemTags.get("minecraft:small_flowers"));
 
         // Hack btw
-        boolean emulatePost1_14Logic = itemTags.get("minecraft:signs").length > 1;
-        session.setEmulatePost1_14Logic(emulatePost1_14Logic);
+        boolean emulatePost1_13Logic = itemTags.get("minecraft:signs").length > 1;
+        session.setEmulatePost1_13Logic(emulatePost1_13Logic);
         if (logger.isDebug()) {
-            logger.debug("Emulating post 1.14 villager logic for " + session.name() + "? " + emulatePost1_14Logic);
+            logger.debug("Emulating post 1.13 villager logic for " + session.name() + "? " + emulatePost1_13Logic);
         }
     }
 

File: core/src/main/java/org/geysermc/geyser/translator/inventory/MerchantInventoryTranslator.java
Patch:
@@ -159,7 +159,7 @@ private ItemStackResponsePacket.Response handleTrade(GeyserSession session, Inve
         ServerboundSelectTradePacket packet = new ServerboundSelectTradePacket(tradeChoice);
         session.sendDownstreamPacket(packet);
 
-        if (session.isEmulatePost1_14Logic()) {
+        if (session.isEmulatePost1_13Logic()) {
             // 1.18 Java cooperates nicer than older versions
             if (inventory instanceof MerchantContainer merchantInventory) {
                 merchantInventory.onTradeSelected(session, tradeChoice);

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -1669,6 +1669,8 @@ public void sendAdventureSettings() {
             // Default stuff we have to fill in
             abilities.add(Ability.BUILD);
             abilities.add(Ability.MINE);
+            // Needed so you can drop items
+            abilities.add(Ability.DOORS_AND_SWITCHES);
             if (gameMode == GameMode.CREATIVE) {
                 // Needed so the client doesn't attempt to take away items
                 abilities.add(Ability.INSTABUILD);

File: api/base/src/main/java/org/geysermc/api/GeyserApiBase.java
Patch:
@@ -78,7 +78,7 @@ public interface GeyserApiBase {
      * @return the major API version. Bumped whenever a significant breaking change or feature addition is added.
      */
     default int majorApiVersion() {
-        return 0;
+        return 1;
     }
 
     /**

File: core/src/main/java/org/geysermc/geyser/command/defaults/VersionCommand.java
Patch:
@@ -79,7 +79,7 @@ public void execute(GeyserSession session, GeyserCommandSource sender, String[]
                         URLEncoder.encode(GeyserImpl.BRANCH, StandardCharsets.UTF_8.toString()) + "/lastSuccessfulBuild/api/xml?xpath=//buildNumber");
                 if (buildXML.startsWith("<buildNumber>")) {
                     int latestBuildNum = Integer.parseInt(buildXML.replaceAll("<(\\\\)?(/)?buildNumber>", "").trim());
-                    int buildNum = GeyserImpl.BUILD_NUMBER;
+                    int buildNum = this.geyser.buildNumber();
                     if (latestBuildNum == buildNum) {
                         sender.sendMessage(GeyserLocale.getPlayerLocaleString("geyser.commands.version.no_updates", sender.locale()));
                     } else {

File: core/src/main/java/org/geysermc/geyser/entity/type/living/IronGolemEntity.java
Patch:
@@ -45,6 +45,9 @@ public IronGolemEntity(GeyserSession session, int entityId, long geyserId, UUID
         setFlag(EntityFlag.BRIBED, true);
         // Required, or else the overlay is black
         dirtyMetadata.put(EntityData.COLOR_2, (byte) 0);
+        // Default max health. Ensures correct cracked texture is used
+        // Bug reproducible in 1.19.0 JE vanilla/fabric when spawning a new iron golem
+        maxHealth = 100f;
     }
 
     @Nonnull

File: core/src/main/java/org/geysermc/geyser/translator/inventory/BeaconInventoryTranslator.java
Patch:
@@ -119,7 +119,7 @@ public ItemStackResponsePacket.Response translateSpecialRequest(GeyserSession se
     }
 
     private OptionalInt toJava(int effectChoice) {
-        return effectChoice == -1 ? OptionalInt.empty() : OptionalInt.of(effectChoice);
+        return effectChoice == 0 ? OptionalInt.empty() : OptionalInt.of(effectChoice);
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/registry/populator/ItemRegistryPopulator.java
Patch:
@@ -164,6 +164,9 @@ public static void populate() {
                 } else if (identifier.equals("minecraft:empty_map") && damage == 2) {
                     // Bedrock-only as its own item
                     continue;
+                } else if (identifier.equals("minecraft:bordure_indented_banner_pattern") || identifier.equals("minecraft:field_masoned_banner_pattern")) {
+                    // Bedrock-only banner patterns
+                    continue;
                 }
                 StartGamePacket.ItemEntry entry = entries.get(identifier);
                 int id = -1;

File: core/src/main/java/org/geysermc/geyser/translator/level/block/entity/BedrockOnlyBlockEntity.java
Patch:
@@ -62,7 +62,7 @@ static NbtMap getTag(GeyserSession session, Vector3i position, int blockState) {
             return FlowerPotBlockEntityTranslator.getTag(session, blockState, position);
         } else if (PistonBlockEntityTranslator.isBlock(blockState)) {
             return PistonBlockEntityTranslator.getTag(blockState, position);
-        } else if (BlockStateValues.isCauldron(blockState)) {
+        } else if (BlockStateValues.isNonWaterCauldron(blockState)) {
             // As of 1.18.30: this is required to make rendering not look weird on chunk load (lava and snow cauldrons look dim)
             return NbtMap.builder()
                     .putString("id", "Cauldron")

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaLevelChunkWithLightTranslator.java
Patch:
@@ -142,7 +142,7 @@ public void translate(GeyserSession session, ClientboundLevelChunkWithLightPacke
                         }
 
                         // Check if block is piston or flower to see if we'll need to create additional block entities, as they're only block entities in Bedrock
-                        if (BlockStateValues.getFlowerPotValues().containsKey(javaId) || BlockStateValues.getPistonValues().containsKey(javaId) || BlockStateValues.isCauldron(javaId)) {
+                        if (BlockStateValues.getFlowerPotValues().containsKey(javaId) || BlockStateValues.getPistonValues().containsKey(javaId) || BlockStateValues.isNonWaterCauldron(javaId)) {
                             bedrockBlockEntities.add(BedrockOnlyBlockEntity.getTag(session,
                                     Vector3i.from((packet.getX() << 4) + (yzx & 0xF), ((sectionY + yOffset) << 4) + ((yzx >> 8) & 0xF), (packet.getZ() << 4) + ((yzx >> 4) & 0xF)),
                                     javaId
@@ -183,7 +183,7 @@ public void translate(GeyserSession session, ClientboundLevelChunkWithLightPacke
                     }
 
                     // Check if block is piston, flower or cauldron to see if we'll need to create additional block entities, as they're only block entities in Bedrock
-                    if (BlockStateValues.getFlowerPotValues().containsKey(javaId) || BlockStateValues.getPistonValues().containsKey(javaId) || BlockStateValues.isCauldron(javaId)) {
+                    if (BlockStateValues.getFlowerPotValues().containsKey(javaId) || BlockStateValues.getPistonValues().containsKey(javaId) || BlockStateValues.isNonWaterCauldron(javaId)) {
                         bedrockOnlyBlockEntityIds.set(i);
                     }
                 }

File: core/src/main/java/org/geysermc/geyser/translator/sound/block/BucketSoundInteractionTranslator.java
Patch:
@@ -38,7 +38,7 @@ public class BucketSoundInteractionTranslator implements BlockSoundInteractionTr
 
     @Override
     public void translate(GeyserSession session, Vector3f position, String identifier) {
-        if (session.getBucketScheduledFuture() == null) {
+        if (!session.isPlacedBucket()) {
             return; // No bucket was really interacted with
         }
         GeyserItemStack itemStack = session.getPlayerInventory().getItemInHand();
@@ -71,6 +71,7 @@ public void translate(GeyserSession session, Vector3f position, String identifie
             case "minecraft:salmon_bucket":
             case "minecraft:pufferfish_bucket":
             case "minecraft:tropical_fish_bucket":
+            case "minecraft:tadpole_bucket":
                 soundEvent = SoundEvent.BUCKET_EMPTY_FISH;
                 break;
             case "minecraft:water_bucket":
@@ -83,7 +84,7 @@ public void translate(GeyserSession session, Vector3f position, String identifie
         if (soundEvent != null) {
             soundEventPacket.setSound(soundEvent);
             session.sendUpstreamPacket(soundEventPacket);
-            session.setBucketScheduledFuture(null);
+            session.setPlacedBucket(false);
         }
     }
 }

File: bootstrap/spigot/src/main/java/org/geysermc/geyser/platform/spigot/GeyserPaperPingPassthrough.java
Patch:
@@ -55,8 +55,8 @@ public GeyserPingInfo getPingInformation(InetSocketAddress inetSocketAddress) {
             // We'd rather *not* use deprecations here, but unfortunately any Adventure class would be relocated at
             // runtime because we still have to shade in our own Adventure class. For now.
             PaperServerListPingEvent event = new PaperServerListPingEvent(new GeyserStatusClient(inetSocketAddress),
-                    Bukkit.getMotd(), Bukkit.getOnlinePlayers().size(), Bukkit.getMaxPlayers(), Bukkit.getVersion(),
-                    MinecraftProtocol.getJavaProtocolVersion(), null);
+                    Bukkit.getMotd(), Bukkit.shouldSendChatPreviews(), Bukkit.getOnlinePlayers().size(),
+                    Bukkit.getMaxPlayers(), Bukkit.getVersion(), MinecraftProtocol.getJavaProtocolVersion(), null);
             Bukkit.getPluginManager().callEvent(event);
             if (event.isCancelled()) {
                 // We have to send a ping, so not really sure what else to do here.

File: bootstrap/spigot/src/main/java/org/geysermc/geyser/platform/spigot/GeyserSpigotPingPassthrough.java
Patch:
@@ -66,7 +66,7 @@ public GeyserPingInfo getPingInformation(InetSocketAddress inetSocketAddress) {
     private static class GeyserPingEvent extends ServerListPingEvent {
 
         public GeyserPingEvent(InetAddress address, String motd, int numPlayers, int maxPlayers) {
-            super(address, motd, numPlayers, maxPlayers);
+            super(address, motd, Bukkit.shouldSendChatPreviews(), numPlayers, maxPlayers);
         }
 
         @Override

File: bootstrap/spigot/src/main/java/org/geysermc/geyser/platform/spigot/GeyserPaperPingPassthrough.java
Patch:
@@ -80,7 +80,7 @@ public GeyserPingInfo getPingInformation(InetSocketAddress inetSocketAddress) {
             }
 
             return geyserPingInfo;
-        } catch (Exception e) {
+        } catch (Exception | LinkageError e) { // LinkageError in the event that method/constructor signatures change
             logger.debug("Error while getting Paper ping passthrough: " + e);
             return null;
         }

File: bootstrap/spigot/src/main/java/org/geysermc/geyser/platform/spigot/GeyserSpigotPingPassthrough.java
Patch:
@@ -56,7 +56,7 @@ public GeyserPingInfo getPingInformation(InetSocketAddress inetSocketAddress) {
             );
             Bukkit.getOnlinePlayers().stream().map(Player::getName).forEach(geyserPingInfo.getPlayerList()::add);
             return geyserPingInfo;
-        } catch (Exception e) {
+        } catch (Exception | LinkageError e) { // LinkageError in the event that method/constructor signatures change
             logger.debug("Error while getting Bukkit ping passthrough: " + e);
             return null;
         }

File: core/src/main/java/org/geysermc/geyser/network/QueryPacketHandler.java
Patch:
@@ -91,8 +91,10 @@ private void handle() {
         switch (type) {
             case HANDSHAKE:
                 sendToken();
+                break;
             case STATISTICS:
                 sendQueryData();
+                break;
         }
     }
 

File: bootstrap/spigot/src/main/java/org/geysermc/geyser/platform/spigot/GeyserSpigotPingPassthrough.java
Patch:
@@ -30,8 +30,8 @@
 import org.bukkit.entity.Player;
 import org.bukkit.event.server.ServerListPingEvent;
 import org.bukkit.util.CachedServerIcon;
-import org.geysermc.geyser.ping.GeyserPingInfo;
 import org.geysermc.geyser.network.MinecraftProtocol;
+import org.geysermc.geyser.ping.GeyserPingInfo;
 import org.geysermc.geyser.ping.IGeyserPingPassthrough;
 
 import javax.annotation.Nonnull;

File: core/src/main/java/org/geysermc/geyser/network/netty/LocalSession.java
Patch:
@@ -58,7 +58,7 @@ public LocalSession(String host, int port, SocketAddress targetAddress, String c
     }
 
     @Override
-    public void connect() {
+    public void connect(boolean wait) {
         if (this.disconnected) {
             throw new IllegalStateException("Connection has already been disconnected.");
         }

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -845,7 +845,7 @@ private void connectDownstream() {
             // We're going to connect through the JVM and not through TCP
             downstream = new LocalSession(this.remoteAddress, this.remotePort,
                     geyser.getBootstrap().getSocketAddress(), upstream.getAddress().getAddress().getHostAddress(),
-                    this.protocol, this.downstream.getCodecHelper());
+                    this.protocol, this.protocol.createHelper());
         } else {
             downstream = new TcpClientSession(this.remoteAddress, this.remotePort, this.protocol);
             disableSrvResolving();
@@ -1017,7 +1017,7 @@ public void packetError(PacketErrorEvent event) {
             setDaylightCycle(true);
         }
 
-        downstream.connect();
+        downstream.connect(false);
     }
 
     public void disconnect(String reason) {

File: core/src/main/java/org/geysermc/geyser/util/MathUtils.java
Patch:
@@ -110,7 +110,7 @@ public static int constrain(int num, int min, int max) {
      * @param high The high bound of the clamp
      * @return the clamped value
      */
-    public static double clamp(float value, float low, float high) {
+    public static float clamp(float value, float low, float high) {
         if (value < low) {
             return low;
         }

File: core/src/main/java/org/geysermc/geyser/entity/EntityDefinitions.java
Patch:
@@ -184,7 +184,7 @@ public final class EntityDefinitions {
                 .addTranslator(MetadataType.INT, Entity::setAir) // Air/bubbles
                 .addTranslator(MetadataType.OPTIONAL_CHAT, Entity::setDisplayName)
                 .addTranslator(MetadataType.BOOLEAN, Entity::setDisplayNameVisible)
-                .addTranslator(MetadataType.BOOLEAN, (entity, entityMetadata) -> entity.setFlag(EntityFlag.SILENT, ((BooleanEntityMetadata) entityMetadata).getPrimitiveValue()))
+                .addTranslator(MetadataType.BOOLEAN, Entity::setSilent)
                 .addTranslator(MetadataType.BOOLEAN, Entity::setGravity)
                 .addTranslator(MetadataType.POSE, (entity, entityMetadata) -> entity.setPose(entityMetadata.getValue()))
                 .addTranslator(MetadataType.INT, Entity::setFreezing)

File: core/src/main/java/org/geysermc/geyser/entity/type/ChestBoatEntity.java
Patch:
@@ -23,11 +23,11 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.geyser.entity;
+package org.geysermc.geyser.entity.type;
 
 import com.github.steveice10.mc.protocol.data.game.entity.player.Hand;
 import com.nukkitx.math.vector.Vector3f;
-import org.geysermc.geyser.entity.type.BoatEntity;
+import org.geysermc.geyser.entity.EntityDefinition;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.util.InteractionResult;
 import org.geysermc.geyser.util.InteractiveTag;

File: core/src/main/java/org/geysermc/geyser/entity/type/EvokerFangsEntity.java
Patch:
@@ -27,7 +27,6 @@
 
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.data.entity.EntityData;
-import com.nukkitx.protocol.bedrock.data.entity.EntityFlag;
 import com.nukkitx.protocol.bedrock.packet.PlaySoundPacket;
 import org.geysermc.geyser.entity.EntityDefinition;
 import org.geysermc.geyser.session.GeyserSession;
@@ -58,7 +57,7 @@ public void tick() {
 
     public void setAttackStarted() {
         this.attackStarted = true;
-        if (!getFlag(EntityFlag.SILENT)) {
+        if (!silent) {
             // Play the chomp sound
             PlaySoundPacket packet = new PlaySoundPacket();
             packet.setPosition(this.position);

File: core/src/main/java/org/geysermc/geyser/entity/type/living/monster/EnderDragonEntity.java
Patch:
@@ -213,7 +213,7 @@ private void updateBoundingBoxes() {
      */
     private void effectTick() {
         Random random = ThreadLocalRandom.current();
-        if (!getFlag(EntityFlag.SILENT)) {
+        if (!silent) {
             if (Math.cos(wingPosition * 2f * Math.PI) <= -0.3f && Math.cos(lastWingPosition * 2f * Math.PI) >= -0.3f) {
                 PlaySoundPacket playSoundPacket = new PlaySoundPacket();
                 playSoundPacket.setSound("mob.enderdragon.flap");

File: core/src/main/java/org/geysermc/geyser/registry/type/SoundMapping.java
Patch:
@@ -38,10 +38,10 @@ public class SoundMapping {
 
     public SoundMapping(String java, String bedrock, String playsound, int extraData, String identifier, boolean levelEvent) {
         this.java = java;
-        this.bedrock = bedrock == null || bedrock.equalsIgnoreCase("") ? null : bedrock;
-        this.playsound = playsound == null || playsound.equalsIgnoreCase("") ? null : playsound;
+        this.bedrock = bedrock == null || bedrock.isEmpty() ? null : bedrock;
+        this.playsound = playsound == null || playsound.isEmpty() ? null : playsound;
         this.extraData = extraData;
-        this.identifier = identifier == null || identifier.equalsIgnoreCase("") ? ":" : identifier;
+        this.identifier = identifier == null || identifier.isEmpty() ? ":" : identifier;
         this.levelEvent = levelEvent;
     }
 }
\ No newline at end of file

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/JavaSoundEntityTranslator.java
Patch:
@@ -40,6 +40,6 @@ public void translate(GeyserSession session, ClientboundSoundEntityPacket packet
         if (entity == null) {
             return;
         }
-        SoundUtils.playBuiltinSound(session, packet.getSound(), entity.getPosition(), packet.getPitch());
+        SoundUtils.playBuiltinSound(session, packet.getSound(), entity.getPosition(), packet.getVolume(), packet.getPitch());
     }
 }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaSoundTranslator.java
Patch:
@@ -38,6 +38,6 @@ public class JavaSoundTranslator extends PacketTranslator<ClientboundSoundPacket
     @Override
     public void translate(GeyserSession session, ClientboundSoundPacket packet) {
         Vector3f position = Vector3f.from(packet.getX(), packet.getY(), packet.getZ());
-        SoundUtils.playBuiltinSound(session, packet.getSound(), position, packet.getPitch());
+        SoundUtils.playBuiltinSound(session, packet.getSound(), position, packet.getVolume(), packet.getPitch());
     }
 }

File: core/src/main/java/org/geysermc/geyser/entity/type/Entity.java
Patch:
@@ -141,7 +141,7 @@ public Entity(GeyserSession session, int entityId, long geyserId, UUID uuid, Ent
      */
     protected void initializeMetadata() {
         dirtyMetadata.put(EntityData.SCALE, 1f);
-        dirtyMetadata.put(EntityData.COLOR, 0);
+        dirtyMetadata.put(EntityData.COLOR, (byte) 0);
         dirtyMetadata.put(EntityData.MAX_AIR_SUPPLY, getMaxAir());
         setDimensions(Pose.STANDING);
         setFlag(EntityFlag.HAS_GRAVITY, true);
@@ -351,7 +351,7 @@ protected void setAirSupply(int amount) {
         dirtyMetadata.put(EntityData.AIR_SUPPLY, (short) MathUtils.constrain(amount, 0, getMaxAir()));
     }
 
-    protected int getMaxAir() {
+    protected short getMaxAir() {
         return 300;
     }
 

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/AxolotlEntity.java
Patch:
@@ -65,7 +65,7 @@ public boolean canEat(String javaIdentifierStripped, ItemMapping mapping) {
     }
 
     @Override
-    protected int getMaxAir() {
+    protected short getMaxAir() {
         return 6000;
     }
 

File: bootstrap/standalone/src/main/java/org/geysermc/geyser/platform/standalone/GeyserStandaloneBootstrap.java
Patch:
@@ -209,6 +209,7 @@ public void onEnable() {
                 return;
             }
         }
+        geyserLogger.setDebug(geyserConfig.isDebugMode());
         GeyserConfiguration.checkGeyserConfiguration(geyserConfig, geyserLogger);
 
         // Allow libraries like Protocol to have their debug information passthrough

File: core/src/main/java/org/geysermc/geyser/GeyserImpl.java
Patch:
@@ -204,7 +204,6 @@ private void start() {
 
         GeyserLogger logger = bootstrap.getGeyserLogger();
         GeyserConfiguration config = bootstrap.getGeyserConfig();
-        logger.setDebug(config.isDebugMode());
 
         ScoreboardUpdater.init();
 

File: core/src/main/java/org/geysermc/geyser/entity/type/living/monster/EnderDragonEntity.java
Patch:
@@ -39,6 +39,7 @@
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.util.DimensionUtils;
 
+import java.util.Optional;
 import java.util.Random;
 import java.util.UUID;
 import java.util.concurrent.ThreadLocalRandom;
@@ -262,6 +263,7 @@ private void effectTick() {
                         spawnParticleEffectPacket.setDimensionId(DimensionUtils.javaToBedrock(session.getDimension()));
                         spawnParticleEffectPacket.setPosition(head.getPosition().add(random.nextGaussian() / 2f, random.nextGaussian() / 2f, random.nextGaussian() / 2f));
                         spawnParticleEffectPacket.setIdentifier("minecraft:dragon_breath_fire");
+                        spawnParticleEffectPacket.setMolangVariablesJson(Optional.empty());
                         session.sendUpstreamPacket(spawnParticleEffectPacket);
                     }
                 }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/JavaAnimateTranslator.java
Patch:
@@ -36,6 +36,8 @@
 import org.geysermc.geyser.translator.protocol.Translator;
 import org.geysermc.geyser.util.DimensionUtils;
 
+import java.util.Optional;
+
 @Translator(packet = ClientboundAnimatePacket.class)
 public class JavaAnimateTranslator extends PacketTranslator<ClientboundAnimatePacket> {
 
@@ -77,6 +79,7 @@ public void translate(GeyserSession session, ClientboundAnimatePacket packet) {
                 stringPacket.setDimensionId(DimensionUtils.javaToBedrock(session.getDimension()));
                 stringPacket.setPosition(Vector3f.ZERO);
                 stringPacket.setUniqueEntityId(entity.getGeyserId());
+                stringPacket.setMolangVariablesJson(Optional.empty());
                 session.sendUpstreamPacket(stringPacket);
                 break;
             case LEAVE_BED:

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaLevelParticlesTranslator.java
Patch:
@@ -42,6 +42,7 @@
 import org.geysermc.geyser.registry.type.ParticleMapping;
 import org.geysermc.geyser.util.DimensionUtils;
 
+import java.util.Optional;
 import java.util.Random;
 import java.util.concurrent.ThreadLocalRandom;
 import java.util.function.Function;
@@ -150,6 +151,7 @@ private Function<Vector3f, BedrockPacket> createParticle(GeyserSession session,
                         stringPacket.setIdentifier(particleMapping.identifier());
                         stringPacket.setDimensionId(dimensionId);
                         stringPacket.setPosition(position);
+                        stringPacket.setMolangVariablesJson(Optional.empty());
                         return stringPacket;
                     };
                 } else {

File: core/src/main/java/org/geysermc/geyser/entity/type/living/AbstractFishEntity.java
Patch:
@@ -25,6 +25,7 @@
 
 package org.geysermc.geyser.entity.type.living;
 
+import com.github.steveice10.mc.protocol.data.game.entity.player.Hand;
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.data.entity.EntityFlag;
 import org.geysermc.geyser.entity.EntityDefinition;
@@ -49,11 +50,11 @@ public AbstractFishEntity(GeyserSession session, int entityId, long geyserId, UU
 
     @Nonnull
     @Override
-    protected InteractionResult mobInteract(@Nonnull GeyserItemStack itemInHand) {
+    protected InteractionResult mobInteract(Hand hand, @Nonnull GeyserItemStack itemInHand) {
         if (EntityUtils.attemptToBucket(session, itemInHand)) {
             return InteractionResult.SUCCESS;
         } else {
-            return super.mobInteract(itemInHand);
+            return super.mobInteract(hand, itemInHand);
         }
     }
 }

File: core/src/main/java/org/geysermc/geyser/entity/type/living/IronGolemEntity.java
Patch:
@@ -25,6 +25,7 @@
 
 package org.geysermc.geyser.entity.type.living;
 
+import com.github.steveice10.mc.protocol.data.game.entity.player.Hand;
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.data.entity.EntityData;
 import com.nukkitx.protocol.bedrock.data.entity.EntityFlag;
@@ -48,7 +49,7 @@ public IronGolemEntity(GeyserSession session, int entityId, long geyserId, UUID
 
     @Nonnull
     @Override
-    protected InteractionResult mobInteract(@Nonnull GeyserItemStack itemInHand) {
+    protected InteractionResult mobInteract(Hand hand, @Nonnull GeyserItemStack itemInHand) {
         if (itemInHand.getJavaId() == session.getItemMappings().getStoredItems().ironIngot()) {
             if (health < maxHealth) {
                 // Healing the iron golem
@@ -57,6 +58,6 @@ protected InteractionResult mobInteract(@Nonnull GeyserItemStack itemInHand) {
                 return InteractionResult.PASS;
             }
         }
-        return super.mobInteract(itemInHand);
+        return super.mobInteract(hand, itemInHand);
     }
 }

File: core/src/main/java/org/geysermc/geyser/entity/type/living/SnowGolemEntity.java
Patch:
@@ -26,6 +26,7 @@
 package org.geysermc.geyser.entity.type.living;
 
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.type.ByteEntityMetadata;
+import com.github.steveice10.mc.protocol.data.game.entity.player.Hand;
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.data.entity.EntityFlag;
 import org.geysermc.geyser.entity.EntityDefinition;
@@ -51,7 +52,7 @@ public void setSnowGolemFlags(ByteEntityMetadata entityMetadata) {
 
     @Nonnull
     @Override
-    protected InteractiveTag testMobInteraction(@Nonnull GeyserItemStack itemInHand) {
+    protected InteractiveTag testMobInteraction(Hand hand, @Nonnull GeyserItemStack itemInHand) {
         if (session.getItemMappings().getStoredItems().shears() == itemInHand.getJavaId() && isAlive() && !getFlag(EntityFlag.SHEARED)) {
             // Shearing the snow golem
             return InteractiveTag.SHEAR;
@@ -61,7 +62,7 @@ protected InteractiveTag testMobInteraction(@Nonnull GeyserItemStack itemInHand)
 
     @Nonnull
     @Override
-    protected InteractionResult mobInteract(@Nonnull GeyserItemStack itemInHand) {
+    protected InteractionResult mobInteract(Hand hand, @Nonnull GeyserItemStack itemInHand) {
         if (session.getItemMappings().getStoredItems().shears() == itemInHand.getJavaId() && isAlive() && !getFlag(EntityFlag.SHEARED)) {
             // Shearing the snow golem
             return InteractionResult.SUCCESS;

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/AxolotlEntity.java
Patch:
@@ -27,6 +27,7 @@
 
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.type.BooleanEntityMetadata;
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.type.IntEntityMetadata;
+import com.github.steveice10.mc.protocol.data.game.entity.player.Hand;
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.data.entity.EntityData;
 import com.nukkitx.protocol.bedrock.data.entity.EntityFlag;
@@ -75,11 +76,11 @@ protected boolean canBeLeashed() {
 
     @Nonnull
     @Override
-    protected InteractionResult mobInteract(@Nonnull GeyserItemStack itemInHand) {
+    protected InteractionResult mobInteract(Hand hand, @Nonnull GeyserItemStack itemInHand) {
         if (EntityUtils.attemptToBucket(session, itemInHand)) {
             return InteractionResult.SUCCESS;
         } else {
-            return super.mobInteract(itemInHand);
+            return super.mobInteract(hand, itemInHand);
         }
     }
 }

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/GoatEntity.java
Patch:
@@ -27,6 +27,7 @@
 
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.Pose;
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.type.BooleanEntityMetadata;
+import com.github.steveice10.mc.protocol.data.game.entity.player.Hand;
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.data.SoundEvent;
 import com.nukkitx.protocol.bedrock.data.entity.EntityFlag;
@@ -65,12 +66,12 @@ protected void setDimensions(Pose pose) {
 
     @Nonnull
     @Override
-    protected InteractionResult mobInteract(@Nonnull GeyserItemStack itemInHand) {
+    protected InteractionResult mobInteract(Hand hand, @Nonnull GeyserItemStack itemInHand) {
         if (!getFlag(EntityFlag.BABY) && itemInHand.getMapping(session).getJavaIdentifier().equals("minecraft:bucket")) {
             session.playSoundEvent(isScreamer ? SoundEvent.MILK_SCREAMER : SoundEvent.MILK, position);
             return InteractionResult.SUCCESS;
         } else {
-            return super.mobInteract(itemInHand);
+            return super.mobInteract(hand, itemInHand);
         }
     }
 }

File: core/src/main/java/org/geysermc/geyser/entity/type/living/animal/tameable/CatEntity.java
Patch:
@@ -28,6 +28,7 @@
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.type.BooleanEntityMetadata;
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.type.ByteEntityMetadata;
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.type.IntEntityMetadata;
+import com.github.steveice10.mc.protocol.data.game.entity.player.Hand;
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.data.entity.EntityData;
 import com.nukkitx.protocol.bedrock.data.entity.EntityFlag;
@@ -105,7 +106,7 @@ public boolean canEat(String javaIdentifierStripped, ItemMapping mapping) {
 
     @Nonnull
     @Override
-    protected InteractiveTag testMobInteraction(@Nonnull GeyserItemStack itemInHand) {
+    protected InteractiveTag testMobInteraction(Hand hand, @Nonnull GeyserItemStack itemInHand) {
         boolean tamed = getFlag(EntityFlag.TAMED);
         if (tamed && ownerBedrockId == session.getPlayerEntity().getGeyserId()) {
             // Toggle sitting
@@ -117,7 +118,7 @@ protected InteractiveTag testMobInteraction(@Nonnull GeyserItemStack itemInHand)
 
     @Nonnull
     @Override
-    protected InteractionResult mobInteract(@Nonnull GeyserItemStack itemInHand) {
+    protected InteractionResult mobInteract(Hand hand, @Nonnull GeyserItemStack itemInHand) {
         boolean tamed = getFlag(EntityFlag.TAMED);
         if (tamed && ownerBedrockId == session.getPlayerEntity().getGeyserId()) {
             return InteractionResult.SUCCESS;

File: core/src/main/java/org/geysermc/geyser/util/InteractiveTag.java
Patch:
@@ -69,7 +69,8 @@ public enum InteractiveTag {
     EQUIP_ARMOR_STAND("armorstand.equip"),
     READ,
     WAKE_VILLAGER("wakevillager"),
-    BARTER;
+    BARTER,
+    GIVE_ITEM_TO_ALLAY("allay");
 
     /**
      * The full string that should be passed on to the client.

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -173,6 +173,7 @@ public class GeyserSession implements GeyserConnection, CommandSender {
     private final LodestoneCache lodestoneCache;
     private final PistonCache pistonCache;
     private final PreferencesCache preferencesCache;
+    private final SkullCache skullCache;
     private final TagCache tagCache;
     private final WorldCache worldCache;
 
@@ -220,7 +221,6 @@ public class GeyserSession implements GeyserConnection, CommandSender {
     @Setter
     private ItemMappings itemMappings;
 
-    private final Map<Vector3i, SkullPlayerEntity> skullCache = new Object2ObjectOpenHashMap<>();
     private final Long2ObjectMap<ClientboundMapItemDataPacket> storedMaps = new Long2ObjectOpenHashMap<>();
 
     /**
@@ -530,6 +530,7 @@ public GeyserSession(GeyserImpl geyser, BedrockServerSession bedrockServerSessio
         this.lodestoneCache = new LodestoneCache();
         this.pistonCache = new PistonCache(this);
         this.preferencesCache = new PreferencesCache(this);
+        this.skullCache = new SkullCache(this);
         this.tagCache = new TagCache();
         this.worldCache = new WorldCache(this);
 

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/BedrockMovePlayerTranslator.java
Patch:
@@ -140,6 +140,8 @@ public void translate(GeyserSession session, MovePlayerPacket packet) {
                             session.sendUpstreamPacket(movePlayerPacket);
                         }
                     }
+
+                    session.getSkullCache().updateVisibleSkulls();
                 }
             } else {
                 // Not a valid move

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaBlockEntityDataTranslator.java
Patch:
@@ -65,7 +65,7 @@ public void translate(GeyserSession session, ClientboundBlockEntityDataPacket pa
                 packet.getNbt(), blockState), packet.getPosition());
         // Check for custom skulls.
         if (session.getPreferencesCache().showCustomSkulls() && packet.getNbt() != null && packet.getNbt().contains("SkullOwner")) {
-            SkullBlockEntityTranslator.spawnPlayer(session, packet.getNbt(), position.getX(), position.getY(), position.getZ(), blockState);
+            SkullBlockEntityTranslator.translateSkull(session, packet.getNbt(), position.getX(), position.getY(), position.getZ(), blockState);
         }
 
         // If block entity is command block, OP permission level is appropriate, player is in creative mode and the NBT is not empty

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaLevelChunkWithLightTranslator.java
Patch:
@@ -275,7 +275,7 @@ public void translate(GeyserSession session, ClientboundLevelChunkWithLightPacke
 
                 // Check for custom skulls
                 if (session.getPreferencesCache().showCustomSkulls() && type == BlockEntityType.SKULL && tag != null && tag.contains("SkullOwner")) {
-                    SkullBlockEntityTranslator.spawnPlayer(session, tag, x + chunkBlockX, y, z + chunkBlockZ, blockState);
+                    SkullBlockEntityTranslator.translateSkull(session, tag, x + chunkBlockX, y, z + chunkBlockZ, blockState);
                 }
             }
 

File: core/src/main/java/org/geysermc/geyser/util/ChunkUtils.java
Patch:
@@ -45,6 +45,7 @@
 import org.geysermc.geyser.level.chunk.bitarray.SingletonBitArray;
 import org.geysermc.geyser.registry.BlockRegistries;
 import org.geysermc.geyser.session.GeyserSession;
+import org.geysermc.geyser.session.cache.SkullCache;
 import org.geysermc.geyser.text.GeyserLocale;
 import org.geysermc.geyser.level.BedrockDimension;
 import org.geysermc.geyser.translator.level.block.entity.BedrockOnlyBlockEntity;
@@ -150,10 +151,9 @@ public static void updateBlock(GeyserSession session, int blockState, Vector3i p
             // Otherwise, let's still store our reference to the item frame, but let the new block take precedence for now
         }
 
-        SkullPlayerEntity skull = session.getSkullCache().get(position);
-        if (skull != null && blockState != skull.getBlockState()) {
+        if (BlockStateValues.getSkullVariant(blockState) == -1) {
             // Skull is gone
-            skull.despawnEntity(position);
+            session.getSkullCache().removeSkull(position);
         }
 
         // Prevent moving_piston from being placed

File: api/geyser/src/main/java/org/geysermc/geyser/api/network/AuthType.java
Patch:
@@ -28,7 +28,7 @@
 public enum AuthType {
     OFFLINE,
     ONLINE,
-    HYBRID;
+    FLOODGATE;
 
     public static final AuthType[] VALUES = values();
 

File: bootstrap/bungeecord/src/main/java/org/geysermc/geyser/platform/bungeecord/GeyserBungeePlugin.java
Patch:
@@ -109,13 +109,13 @@ public void onEnable() {
             return;
         }
 
-        if (geyserConfig.getRemote().getAuthType() == AuthType.HYBRID && getProxy().getPluginManager().getPlugin("floodgate") == null) {
+        if (geyserConfig.getRemote().getAuthType() == AuthType.FLOODGATE && getProxy().getPluginManager().getPlugin("floodgate") == null) {
             geyserLogger.severe(GeyserLocale.getLocaleStringLog("geyser.bootstrap.floodgate.not_installed") + " " + GeyserLocale.getLocaleStringLog("geyser.bootstrap.floodgate.disabling"));
             return;
         } else if (geyserConfig.isAutoconfiguredRemote() && getProxy().getPluginManager().getPlugin("floodgate") != null) {
             // Floodgate installed means that the user wants Floodgate authentication
             geyserLogger.debug("Auto-setting to Floodgate authentication.");
-            geyserConfig.getRemote().setAuthType(AuthType.HYBRID);
+            geyserConfig.getRemote().setAuthType(AuthType.FLOODGATE);
         }
 
         geyserConfig.loadFloodgate(this);

File: bootstrap/spigot/src/main/java/org/geysermc/geyser/platform/spigot/GeyserSpigotPlugin.java
Patch:
@@ -139,14 +139,14 @@ public void onEnable() {
             return;
         }
 
-        if (geyserConfig.getRemote().getAuthType() == AuthType.HYBRID && Bukkit.getPluginManager().getPlugin("floodgate") == null) {
+        if (geyserConfig.getRemote().getAuthType() == AuthType.FLOODGATE && Bukkit.getPluginManager().getPlugin("floodgate") == null) {
             geyserLogger.severe(GeyserLocale.getLocaleStringLog("geyser.bootstrap.floodgate.not_installed") + " " + GeyserLocale.getLocaleStringLog("geyser.bootstrap.floodgate.disabling"));
             this.getPluginLoader().disablePlugin(this);
             return;
         } else if (geyserConfig.isAutoconfiguredRemote() && Bukkit.getPluginManager().getPlugin("floodgate") != null) {
             // Floodgate installed means that the user wants Floodgate authentication
             geyserLogger.debug("Auto-setting to Floodgate authentication.");
-            geyserConfig.getRemote().setAuthType(AuthType.HYBRID);
+            geyserConfig.getRemote().setAuthType(AuthType.FLOODGATE);
         }
 
         geyserConfig.loadFloodgate(this);

File: bootstrap/velocity/src/main/java/org/geysermc/geyser/platform/velocity/GeyserVelocityPlugin.java
Patch:
@@ -128,14 +128,14 @@ public void onEnable() {
         } catch (ClassNotFoundException ignored) {
         }
 
-        if (geyserConfig.getRemote().getAuthType() == AuthType.HYBRID && proxyServer.getPluginManager().getPlugin("floodgate").isEmpty()) {
+        if (geyserConfig.getRemote().getAuthType() == AuthType.FLOODGATE && proxyServer.getPluginManager().getPlugin("floodgate").isEmpty()) {
             geyserLogger.severe(GeyserLocale.getLocaleStringLog("geyser.bootstrap.floodgate.not_installed") + " "
                     + GeyserLocale.getLocaleStringLog("geyser.bootstrap.floodgate.disabling"));
             return;
         } else if (geyserConfig.isAutoconfiguredRemote() && proxyServer.getPluginManager().getPlugin("floodgate").isPresent()) {
             // Floodgate installed means that the user wants Floodgate authentication
             geyserLogger.debug("Auto-setting to Floodgate authentication.");
-            geyserConfig.getRemote().setAuthType(AuthType.HYBRID);
+            geyserConfig.getRemote().setAuthType(AuthType.FLOODGATE);
         }
 
         geyserConfig.loadFloodgate(this, proxyServer, configFolder.toFile());

File: core/src/main/java/org/geysermc/geyser/FloodgateKeyLoader.java
Patch:
@@ -34,7 +34,7 @@
 
 public class FloodgateKeyLoader {
     public static Path getKeyPath(GeyserJacksonConfiguration config, Path floodgateDataFolder, Path geyserDataFolder, GeyserLogger logger) {
-        if (config.getRemote().getAuthType() != AuthType.HYBRID) {
+        if (config.getRemote().getAuthType() != AuthType.FLOODGATE) {
             return geyserDataFolder.resolve(config.getFloodgateKeyFile());
         }
 

File: core/src/main/java/org/geysermc/geyser/GeyserImpl.java
Patch:
@@ -235,7 +235,7 @@ private GeyserImpl(PlatformType platformType, GeyserBootstrap bootstrap) {
 
         if (platformType == PlatformType.STANDALONE) {
             logger.warning(GeyserLocale.getLocaleStringLog("geyser.core.movement_warn"));
-        } else if (config.getRemote().getAuthType() == AuthType.HYBRID) {
+        } else if (config.getRemote().getAuthType() == AuthType.FLOODGATE) {
             VersionCheckUtils.checkForOutdatedFloodgate(logger);
         }
     }
@@ -293,7 +293,7 @@ private void start() {
         // Ensure that PacketLib does not create an event loop for handling packets; we'll do that ourselves
         TcpSession.USE_EVENT_LOOP_FOR_PACKETS = false;
 
-        if (config.getRemote().getAuthType() == AuthType.HYBRID) {
+        if (config.getRemote().getAuthType() == AuthType.FLOODGATE) {
             try {
                 Key key = new AesKeyProducer().produceFrom(config.getFloodgateKeyPath());
                 cipher = new AesCipher(new Base64Topping());

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaCustomPayloadTranslator.java
Patch:
@@ -49,7 +49,7 @@ public class JavaCustomPayloadTranslator extends PacketTranslator<ClientboundCus
     @Override
     public void translate(GeyserSession session, ClientboundCustomPayloadPacket packet) {
         // The only plugin messages it has to listen for are Floodgate plugin messages
-        if (session.remoteServer().authType() != AuthType.HYBRID) {
+        if (session.remoteServer().authType() != AuthType.FLOODGATE) {
             return;
         }
 

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaGameProfileTranslator.java
Patch:
@@ -54,7 +54,7 @@ public void translate(GeyserSession session, ClientboundGameProfilePacket packet
             SkinManager.handleBedrockSkin(playerEntity, session.getClientData());
         }
 
-        if (remoteAuthType == AuthType.HYBRID) {
+        if (remoteAuthType == AuthType.FLOODGATE) {
             // We'll send the skin upload a bit after the handshake packet (aka this packet),
             // because otherwise the global server returns the data too fast.
             // We upload it after we know for sure that the target server

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaLoginTranslator.java
Patch:
@@ -102,7 +102,7 @@ public void translate(GeyserSession session, ClientboundLoginPacket packet) {
         session.sendDownstreamPacket(new ServerboundCustomPayloadPacket("minecraft:brand", PluginMessageUtils.getGeyserBrandData()));
 
         // register the plugin messaging channels used in Floodgate
-        if (session.remoteServer().authType() == AuthType.HYBRID) {
+        if (session.remoteServer().authType() == AuthType.FLOODGATE) {
             session.sendDownstreamPacket(new ServerboundCustomPayloadPacket("minecraft:register", PluginMessageChannels.getFloodgateRegisterData()));
         }
 

File: core/src/main/java/org/geysermc/geyser/entity/type/AbstractArrowEntity.java
Patch:
@@ -70,8 +70,8 @@ public void setMotion(Vector3f motion) {
         super.setMotion(motion);
 
         double horizontalSpeed = Math.sqrt(motion.getX() * motion.getX() + motion.getZ() * motion.getZ());
-        this.yaw = (float) Math.toDegrees(Math.atan2(motion.getX(), motion.getZ()));
-        this.pitch = (float) Math.toDegrees(Math.atan2(motion.getY(), horizontalSpeed));
-        this.headYaw = yaw;
+        setYaw((float) Math.toDegrees(Math.atan2(motion.getX(), motion.getZ())));
+        setPitch((float) Math.toDegrees(Math.atan2(motion.getY(), horizontalSpeed)));
+        setHeadYaw(getYaw());
     }
 }

File: core/src/main/java/org/geysermc/geyser/entity/type/BoatEntity.java
Patch:
@@ -81,8 +81,8 @@ public BoatEntity(GeyserSession session, int entityId, long geyserId, UUID uuid,
     public void moveAbsolute(Vector3f position, float yaw, float pitch, float headYaw, boolean isOnGround, boolean teleported) {
         // We don't include the rotation (y) as it causes the boat to appear sideways
         setPosition(position.add(0d, this.definition.offset(), 0d));
-        this.yaw = yaw + 90;
-        this.headYaw = yaw + 90;
+        setYaw(yaw + 90);
+        setHeadYaw(yaw + 90);
         setOnGround(isOnGround);
 
         MoveEntityAbsolutePacket moveEntityPacket = new MoveEntityAbsolutePacket();

File: core/src/main/java/org/geysermc/geyser/entity/type/FireballEntity.java
Patch:
@@ -72,6 +72,6 @@ protected void moveAbsoluteImmediate(Vector3f position, float yaw, float pitch,
 
     @Override
     public void tick() {
-        moveAbsoluteImmediate(tickMovement(position), yaw, pitch, headYaw, false, false);
+        moveAbsoluteImmediate(tickMovement(position), getYaw(), getPitch(), getHeadYaw(), false, false);
     }
 }

File: core/src/main/java/org/geysermc/geyser/entity/type/FishingHookEntity.java
Patch:
@@ -152,15 +152,15 @@ public void tick() {
         float gravity = getGravity();
         motion = motion.down(gravity);
 
-        moveAbsoluteImmediate(position.add(motion), yaw, pitch, headYaw, onGround, false);
+        moveAbsoluteImmediate(position.add(motion), getYaw(), getPitch(), getHeadYaw(), isOnGround(), false);
 
         float drag = getDrag();
         motion = motion.mul(drag);
     }
 
     @Override
     protected float getGravity() {
-        if (!isInWater() && !onGround) {
+        if (!isInWater() && !isOnGround()) {
             return 0.03f;
         }
         return 0;

File: core/src/main/java/org/geysermc/geyser/entity/type/MinecartEntity.java
Patch:
@@ -66,7 +66,7 @@ public void moveAbsolute(Vector3f position, float yaw, float pitch, float headYa
     @Override
     public Vector3f getBedrockRotation() {
         // Note: minecart rotation on rails does not care about the actual rotation value
-        return Vector3f.from(0, yaw, 0);
+        return Vector3f.from(0, getYaw(), 0);
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/entity/type/living/SquidEntity.java
Patch:
@@ -117,7 +117,7 @@ public void setMotion(Vector3f motion) {
 
     @Override
     public Vector3f getBedrockRotation() {
-        return Vector3f.from(pitch, yaw, yaw);
+        return Vector3f.from(getPitch(), getYaw(), getYaw());
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/configuration/GeyserJacksonConfiguration.java
Patch:
@@ -36,8 +36,8 @@
 import lombok.Setter;
 import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.api.network.AuthType;
-import org.geysermc.geyser.text.AsteriskSerializer;
 import org.geysermc.geyser.network.CIDRMatcher;
+import org.geysermc.geyser.text.AsteriskSerializer;
 import org.geysermc.geyser.text.GeyserLocale;
 
 import java.io.IOException;

File: core/src/main/java/org/geysermc/geyser/entity/type/player/PlayerEntity.java
Patch:
@@ -37,6 +37,7 @@
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.math.vector.Vector3i;
 import com.nukkitx.protocol.bedrock.data.AttributeData;
+import com.nukkitx.protocol.bedrock.data.GameType;
 import com.nukkitx.protocol.bedrock.data.PlayerPermission;
 import com.nukkitx.protocol.bedrock.data.command.CommandPermission;
 import com.nukkitx.protocol.bedrock.data.entity.EntityData;
@@ -126,6 +127,7 @@ public void spawnEntity() {
         addPlayerPacket.getAdventureSettings().setPlayerPermission(PlayerPermission.MEMBER);
         addPlayerPacket.setDeviceId("");
         addPlayerPacket.setPlatformChatId("");
+        addPlayerPacket.setGameType(GameType.SURVIVAL); //TODO
         addPlayerPacket.getMetadata().putFlags(flags);
         dirtyMetadata.apply(addPlayerPacket.getMetadata());
 

File: core/src/main/java/org/geysermc/geyser/entity/type/player/SkullPlayerEntity.java
Patch:
@@ -27,6 +27,7 @@
 
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.math.vector.Vector3i;
+import com.nukkitx.protocol.bedrock.data.GameType;
 import com.nukkitx.protocol.bedrock.data.PlayerPermission;
 import com.nukkitx.protocol.bedrock.data.command.CommandPermission;
 import com.nukkitx.protocol.bedrock.data.entity.EntityData;
@@ -84,6 +85,7 @@ public void spawnEntity() {
         addPlayerPacket.getAdventureSettings().setPlayerPermission(PlayerPermission.MEMBER);
         addPlayerPacket.setDeviceId("");
         addPlayerPacket.setPlatformChatId("");
+        addPlayerPacket.setGameType(GameType.SURVIVAL);
         addPlayerPacket.getMetadata().putFlags(flags);
         dirtyMetadata.apply(addPlayerPacket.getMetadata());
 

File: core/src/main/java/org/geysermc/geyser/level/block/BlockPositionIterator.java
Patch:
@@ -26,8 +26,6 @@
 package org.geysermc.geyser.level.block;
 
 import com.nukkitx.network.util.Preconditions;
-import lombok.Getter;
-
 
 public class BlockPositionIterator {
     private final int minX;

File: core/src/main/java/org/geysermc/geyser/session/cache/ChunkCache.java
Patch:
@@ -33,6 +33,7 @@
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.level.block.BlockStateValues;
 import org.geysermc.geyser.level.chunk.GeyserChunk;
+import org.geysermc.geyser.level.BedrockDimension;
 import org.geysermc.geyser.util.MathUtils;
 
 public class ChunkCache {
@@ -45,11 +46,11 @@ public class ChunkCache {
     private int heightY;
 
     /**
-     * Whether the Bedrock client believes they are in a world with a minimum of -64 and maximum of 320
+     * Which dimension Bedrock understands themselves to be in.
      */
     @Getter
     @Setter
-    private boolean isExtendedHeight = false;
+    private BedrockDimension bedrockDimension = BedrockDimension.OVERWORLD;
 
     public ChunkCache(GeyserSession session) {
         this.cache = !session.getGeyser().getWorldManager().hasOwnChunkCache(); // To prevent Spigot from initializing

File: core/src/main/java/org/geysermc/geyser/util/DimensionUtils.java
Patch:
@@ -109,7 +109,7 @@ public static void switchDimension(GeyserSession session, String javaDimension)
         // we check if the player is entering the nether and apply the nether fog to fake the fact that the client
         // thinks they are in the end dimension.
         if (BEDROCK_NETHER_ID == 2) {
-            if (bedrockDimension == BEDROCK_NETHER_ID) {
+            if (NETHER.equals(javaDimension)) {
                 session.sendFog("minecraft:fog_hell");
             } else if (previousDimension == BEDROCK_NETHER_ID) {
                 session.removeFog("minecraft:fog_hell");

File: core/src/main/java/org/geysermc/geyser/network/ConnectorServerEventHandler.java
Patch:
@@ -47,6 +47,8 @@
 import java.util.List;
 
 public class ConnectorServerEventHandler implements BedrockServerEventHandler {
+    private static final boolean PRINT_DEBUG_PINGS = Boolean.parseBoolean(System.getProperty("Geyser.PrintPingsInDebugMode", "true"));
+
     /*
     The following constants are all used to ensure the ping does not reach a length where it is unparsable by the Bedrock client
      */
@@ -88,7 +90,7 @@ public boolean onConnectionRequest(InetSocketAddress inetSocketAddress) {
 
     @Override
     public BedrockPong onQuery(InetSocketAddress inetSocketAddress) {
-        if (geyser.getConfig().isDebugMode()) {
+        if (geyser.getConfig().isDebugMode() && PRINT_DEBUG_PINGS) {
             geyser.getLogger().debug(GeyserLocale.getLocaleStringLog("geyser.network.pinged", inetSocketAddress));
         }
 

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -98,6 +98,7 @@
 import org.geysermc.geyser.inventory.Inventory;
 import org.geysermc.geyser.inventory.PlayerInventory;
 import org.geysermc.geyser.inventory.recipe.GeyserRecipe;
+import org.geysermc.geyser.inventory.recipe.GeyserStonecutterData;
 import org.geysermc.geyser.level.WorldManager;
 import org.geysermc.geyser.level.physics.CollisionManager;
 import org.geysermc.geyser.network.netty.LocalSession;
@@ -365,7 +366,7 @@ public class GeyserSession implements GeyserConnection, CommandSender {
      * The key is the Java ID of the item; the values are all the possible outputs' Java IDs sorted by their string identifier
      */
     @Setter
-    private Int2ObjectMap<IntList> stonecutterRecipes;
+    private Int2ObjectMap<GeyserStonecutterData> stonecutterRecipes;
 
     /**
      * Whether to work around 1.13's different behavior in villager trading menus.

File: core/src/main/java/org/geysermc/geyser/translator/inventory/InventoryTranslator.java
Patch:
@@ -144,7 +144,7 @@ protected boolean shouldHandleRequestFirst(StackRequestActionData action, Invent
     /**
      * If {@link #shouldHandleRequestFirst(StackRequestActionData, Inventory)} returns true, this will be called
      */
-    public ItemStackResponsePacket.Response translateSpecialRequest(GeyserSession session, Inventory inventory, ItemStackRequest request) {
+    protected ItemStackResponsePacket.Response translateSpecialRequest(GeyserSession session, Inventory inventory, ItemStackRequest request) {
         return rejectRequest(request);
     }
 

File: core/src/main/java/org/geysermc/geyser/translator/inventory/item/nbt/EnchantmentTranslator.java
Patch:
@@ -127,7 +127,7 @@ private CompoundTag remapEnchantment(CompoundTag tag) {
 
         Enchantment enchantment = Enchantment.getByJavaIdentifier(((StringTag) javaEnchId).getValue());
         if (enchantment == null) {
-            GeyserImpl.getInstance().getLogger().debug("Unknown java enchantment: " + javaEnchId.getValue());
+            GeyserImpl.getInstance().getLogger().debug("Unknown Java enchantment while NBT item translating: " + javaEnchId.getValue());
             return null;
         }
 

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaSetTimeTranslator.java
Patch:
@@ -45,7 +45,7 @@ public void translate(GeyserSession session, ClientboundSetTimePacket packet) {
         // We use modulus to prevent an integer overflow
         // 24000 is the range of ticks that a Minecraft day can be; we times by 8 so all moon phases are visible
         // (Last verified behavior: Bedrock 1.18.12 / Java 1.18.2)
-        setTimePacket.setTime((int) Math.abs(time) % (24000 * 8));
+        setTimePacket.setTime((int) (Math.abs(time) % (24000 * 8)));
         session.sendUpstreamPacket(setTimePacket);
         if (!session.isDaylightCycle() && time >= 0) {
             // Client thinks there is no daylight cycle but there is

File: core/src/main/java/org/geysermc/geyser/inventory/click/ClickPlan.java
Patch:
@@ -152,6 +152,7 @@ public void execute(boolean refresh) {
                     clickedItemStack,
                     changedItems
             );
+            System.out.println(clickPacket);
 
             session.sendDownstreamPacket(clickPacket);
         }
@@ -391,7 +392,7 @@ private void reduceCraftingGrid(boolean makeAll) {
     public IntSet getAffectedSlots() {
         IntSet affectedSlots = new IntOpenHashSet();
         for (ClickAction action : plan) {
-            if (translator.getSlotType(action.slot) == SlotType.NORMAL && action.slot != Click.OUTSIDE_SLOT) {
+            if (translator.getSlotType(action.slot) != SlotType.OUTPUT && action.slot != Click.OUTSIDE_SLOT) {
                 affectedSlots.add(action.slot);
                 if (action.click.actionType == ContainerActionType.MOVE_TO_HOTBAR_SLOT) {
                     //TODO won't work if offhand is added

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/title/JavaSetTitleTextTranslator.java
Patch:
@@ -38,6 +38,8 @@ public class JavaSetTitleTextTranslator extends PacketTranslator<ClientboundSetT
 
     @Override
     public void translate(GeyserSession session, ClientboundSetTitleTextPacket packet) {
+        session.getWorldCache().synchronizeCorrectTitleTimes();
+
         String text;
         if (packet.getText() == null || Component.empty().equals(packet.getText())) { // This can happen, see https://github.com/KyoriPowered/adventure/issues/447
             text = " ";

File: core/src/main/java/org/geysermc/geyser/registry/populator/ItemRegistryPopulator.java
Patch:
@@ -166,6 +166,9 @@ public static void populate() {
                 if (identifier.equals("minecraft:debug_stick")) {
                     // Just shows an empty texture; either way it doesn't exist in the creative menu on Java
                     continue;
+                } else if (identifier.equals("minecraft:empty_map") && damage == 2) {
+                    // Bedrock-only as its own item
+                    continue;
                 }
                 StartGamePacket.ItemEntry entry = entries.get(identifier);
                 int id = -1;

File: core/src/main/java/org/geysermc/geyser/skin/SkinProvider.java
Patch:
@@ -601,6 +601,8 @@ private static BufferedImage downloadImage(String imageUrl, CapeProvider provide
 
         HttpURLConnection con = (HttpURLConnection) new URL(imageUrl).openConnection();
         con.setRequestProperty("User-Agent", "Geyser-" + GeyserImpl.getInstance().getPlatformType().toString() + "/" + GeyserImpl.VERSION);
+        con.setConnectTimeout(10000);
+        con.setReadTimeout(10000);
 
         BufferedImage image = ImageIO.read(con.getInputStream());
         if (image == null) throw new NullPointerException();

File: core/src/main/java/org/geysermc/geyser/util/WebUtils.java
Patch:
@@ -52,6 +52,8 @@ public static String getBody(String reqURL) {
             HttpURLConnection con = (HttpURLConnection) url.openConnection();
             con.setRequestMethod("GET");
             con.setRequestProperty("User-Agent", "Geyser-" + GeyserImpl.getInstance().getPlatformType().toString() + "/" + GeyserImpl.VERSION); // Otherwise Java 8 fails on checking updates
+            con.setConnectTimeout(10000);
+            con.setReadTimeout(10000);
 
             return connectionToString(con);
         } catch (Exception e) {

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/JavaAnimateTranslator.java
Patch:
@@ -50,6 +50,9 @@ public void translate(GeyserSession session, ClientboundAnimatePacket packet) {
         switch (packet.getAnimation()) {
             case SWING_ARM:
                 animatePacket.setAction(AnimatePacket.Action.SWING_ARM);
+                if (entity.getEntityId() == session.getPlayerEntity().getEntityId()) {
+                    session.activateArmAnimationTicking();
+                }
                 break;
             case SWING_OFFHAND:
                 // Use the OptionalPack to trigger the animation

File: ap/src/main/java/org/geysermc/geyser/processor/BlockEntityProcessor.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.processor;
+package org.geysermc.geyser.processor;
 
 import javax.annotation.processing.SupportedAnnotationTypes;
 import javax.annotation.processing.SupportedSourceVersion;

File: ap/src/main/java/org/geysermc/geyser/processor/ClassProcessor.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.processor;
+package org.geysermc.geyser.processor;
 
 import javax.annotation.processing.AbstractProcessor;
 import javax.annotation.processing.ProcessingEnvironment;

File: ap/src/main/java/org/geysermc/geyser/processor/CollisionRemapperProcessor.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.processor;
+package org.geysermc.geyser.processor;
 
 import javax.annotation.processing.SupportedAnnotationTypes;
 import javax.annotation.processing.SupportedSourceVersion;

File: ap/src/main/java/org/geysermc/geyser/processor/ItemRemapperProcessor.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.processor;
+package org.geysermc.geyser.processor;
 
 import javax.annotation.processing.SupportedAnnotationTypes;
 import javax.annotation.processing.SupportedSourceVersion;

File: ap/src/main/java/org/geysermc/geyser/processor/PacketTranslatorProcessor.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.processor;
+package org.geysermc.geyser.processor;
 
 import javax.annotation.processing.SupportedAnnotationTypes;
 import javax.annotation.processing.SupportedSourceVersion;

File: ap/src/main/java/org/geysermc/geyser/processor/SoundHandlerProcessor.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.processor;
+package org.geysermc.geyser.processor;
 
 import javax.annotation.processing.SupportedAnnotationTypes;
 import javax.annotation.processing.SupportedSourceVersion;

File: core/src/main/java/org/geysermc/geyser/configuration/GeyserConfiguration.java
Patch:
@@ -100,6 +100,8 @@ public interface GeyserConfiguration {
 
     IMetricsInfo getMetrics();
 
+    int getPendingAuthenticationTimeout();
+
     interface IBedrockConfiguration {
 
         String getAddress();

File: core/src/main/java/org/geysermc/geyser/configuration/GeyserJacksonConfiguration.java
Patch:
@@ -141,6 +141,9 @@ public abstract class GeyserJacksonConfiguration implements GeyserConfiguration
 
     private MetricsInfo metrics = new MetricsInfo();
 
+    @JsonProperty("pending-authentication-timeout")
+    private int pendingAuthenticationTimeout = 120;
+
     @Getter
     @JsonIgnoreProperties(ignoreUnknown = true)
     public static class BedrockConfiguration implements IBedrockConfiguration {

File: core/src/main/java/org/geysermc/geyser/registry/Registries.java
Patch:
@@ -29,7 +29,6 @@
 import com.github.steveice10.mc.protocol.data.game.level.block.BlockEntityType;
 import com.github.steveice10.mc.protocol.data.game.level.event.SoundEvent;
 import com.github.steveice10.mc.protocol.data.game.level.particle.ParticleType;
-import com.github.steveice10.mc.protocol.data.game.recipe.Recipe;
 import com.github.steveice10.mc.protocol.data.game.recipe.RecipeType;
 import com.github.steveice10.packetlib.packet.Packet;
 import com.nukkitx.nbt.NbtMap;
@@ -140,7 +139,7 @@ public final class Registries {
     public static final SimpleRegistry<Set<PotionMixData>> POTION_MIXES;
 
     /**
-     * A versioned registry holding all the recipes, with the net ID being the key, and {@link Recipe} as the value.
+     * A versioned registry holding all the recipes, with the net ID being the key, and {@link GeyserRecipe} as the value.
      */
     public static final VersionedRegistry<Int2ObjectMap<GeyserRecipe>> RECIPES = VersionedRegistry.create(RegistryLoaders.empty(Int2ObjectOpenHashMap::new));
 

File: core/src/main/java/org/geysermc/geyser/registry/Registries.java
Patch:
@@ -43,6 +43,7 @@
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
 import org.geysermc.geyser.entity.EntityDefinition;
 import org.geysermc.geyser.inventory.item.Enchantment.JavaEnchantment;
+import org.geysermc.geyser.inventory.recipe.GeyserRecipe;
 import org.geysermc.geyser.registry.loader.*;
 import org.geysermc.geyser.registry.populator.ItemRegistryPopulator;
 import org.geysermc.geyser.registry.populator.PacketRegistryPopulator;
@@ -141,7 +142,7 @@ public final class Registries {
     /**
      * A versioned registry holding all the recipes, with the net ID being the key, and {@link Recipe} as the value.
      */
-    public static final VersionedRegistry<Int2ObjectMap<Recipe>> RECIPES = VersionedRegistry.create(RegistryLoaders.empty(Int2ObjectOpenHashMap::new));
+    public static final VersionedRegistry<Int2ObjectMap<GeyserRecipe>> RECIPES = VersionedRegistry.create(RegistryLoaders.empty(Int2ObjectOpenHashMap::new));
 
     /**
      * A mapped registry holding the available records, with the ID of the record being the key, and the {@link com.nukkitx.protocol.bedrock.data.SoundEvent}

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -39,7 +39,6 @@
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.Pose;
 import com.github.steveice10.mc.protocol.data.game.entity.player.GameMode;
 import com.github.steveice10.mc.protocol.data.game.entity.player.HandPreference;
-import com.github.steveice10.mc.protocol.data.game.recipe.Recipe;
 import com.github.steveice10.mc.protocol.data.game.setting.ChatVisibility;
 import com.github.steveice10.mc.protocol.data.game.setting.SkinPart;
 import com.github.steveice10.mc.protocol.data.game.statistic.CustomStatistic;
@@ -94,6 +93,7 @@
 import org.geysermc.geyser.entity.type.player.SkullPlayerEntity;
 import org.geysermc.geyser.inventory.Inventory;
 import org.geysermc.geyser.inventory.PlayerInventory;
+import org.geysermc.geyser.inventory.recipe.GeyserRecipe;
 import org.geysermc.geyser.level.WorldManager;
 import org.geysermc.geyser.level.physics.CollisionManager;
 import org.geysermc.geyser.network.netty.LocalSession;
@@ -350,7 +350,7 @@ public class GeyserSession implements GeyserConnection, CommandSender {
     private Entity mouseoverEntity;
 
     @Setter
-    private Int2ObjectMap<Recipe> craftingRecipes;
+    private Int2ObjectMap<GeyserRecipe> craftingRecipes;
     private final Set<String> unlockedRecipes;
     private final AtomicInteger lastRecipeNetId;
 

File: core/src/main/java/org/geysermc/geyser/GeyserImpl.java
Patch:
@@ -154,7 +154,6 @@ private GeyserImpl(PlatformType platformType, GeyserBootstrap bootstrap) {
         ItemTranslator.init();
         MessageTranslator.init();
         MinecraftLocale.init();
-        SkinProvider.init();
 
         start();
 
@@ -197,6 +196,8 @@ private void start() {
 
         ScoreboardUpdater.init();
 
+        SkinProvider.registerCacheImageTask(this);
+
         ResourcePack.loadPacks();
 
         if (platformType != PlatformType.STANDALONE && config.getRemote().getAddress().equals("auto")) {

File: core/src/main/java/org/geysermc/geyser/inventory/Container.java
Patch:
@@ -27,11 +27,12 @@
 
 import com.github.steveice10.mc.protocol.data.game.inventory.ContainerType;
 import lombok.Getter;
-import lombok.NonNull;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.translator.inventory.InventoryTranslator;
 import org.jetbrains.annotations.Range;
 
+import javax.annotation.Nonnull;
+
 /**
  * Combination of {@link Inventory} and {@link PlayerInventory}
  */
@@ -66,7 +67,7 @@ public int getOffsetForHotbar(@Range(from = 0, to = 8) int slot) {
     }
 
     @Override
-    public void setItem(int slot, @NonNull GeyserItemStack newItem, GeyserSession session) {
+    public void setItem(int slot, @Nonnull GeyserItemStack newItem, GeyserSession session) {
         if (slot < this.size) {
             super.setItem(slot, newItem, session);
         } else {

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/JavaRespawnTranslator.java
Patch:
@@ -46,6 +46,8 @@ public class JavaRespawnTranslator extends PacketTranslator<ClientboundRespawnPa
     public void translate(GeyserSession session, ClientboundRespawnPacket packet) {
         SessionPlayerEntity entity = session.getPlayerEntity();
 
+        session.setSpawned(false);
+
         entity.setHealth(entity.getMaxHealth());
         entity.getAttributes().put(GeyserAttributeType.HEALTH, entity.createHealthAttribute());
 

File: core/src/main/java/org/geysermc/geyser/entity/GeyserDirtyMetadata.java
Patch:
@@ -34,7 +34,7 @@
 /**
  * A write-only wrapper for temporarily storing entity metadata that will be sent to Bedrock.
  */
-public class GeyserDirtyMetadata {
+public final class GeyserDirtyMetadata {
     private final Map<EntityData, Object> metadata = new Object2ObjectLinkedOpenHashMap<>();
 
     public void put(EntityData entityData, Object value) {

File: core/src/main/java/org/geysermc/geyser/entity/type/living/ArmorStandEntity.java
Patch:
@@ -136,7 +136,7 @@ public void setArmorStandFlags(ByteEntityMetadata entityMetadata) {
             }
 
             isSmall = newIsSmall;
-            if (!isMarker) {
+            if (!isMarker && !isInvisible) { // Addition for isInvisible check caused by https://github.com/GeyserMC/Geyser/issues/2780
                 toggleSmallStatus();
             }
         }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/JavaSetEntityDataTranslator.java
Patch:
@@ -27,12 +27,12 @@
 
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.EntityMetadata;
 import com.github.steveice10.mc.protocol.packet.ingame.clientbound.entity.ClientboundSetEntityDataPacket;
-import org.geysermc.geyser.entity.type.Entity;
 import org.geysermc.geyser.entity.EntityDefinition;
+import org.geysermc.geyser.entity.InteractiveTagManager;
+import org.geysermc.geyser.entity.type.Entity;
 import org.geysermc.geyser.session.GeyserSession;
 import org.geysermc.geyser.translator.protocol.PacketTranslator;
 import org.geysermc.geyser.translator.protocol.Translator;
-import org.geysermc.geyser.entity.InteractiveTagManager;
 
 @Translator(packet = ClientboundSetEntityDataPacket.class)
 public class JavaSetEntityDataTranslator extends PacketTranslator<ClientboundSetEntityDataPacket> {

File: core/src/main/java/org/geysermc/geyser/configuration/GeyserConfiguration.java
Patch:
@@ -78,6 +78,8 @@ public interface GeyserConfiguration {
 
     boolean isDisableBedrockScaffolding();
 
+    boolean isAlwaysQuickChangeArmor();
+
     EmoteOffhandWorkaroundOption getEmoteOffhandWorkaround();
 
     String getDefaultLocale();

File: core/src/main/java/org/geysermc/geyser/configuration/GeyserJacksonConfiguration.java
Patch:
@@ -108,6 +108,9 @@ public abstract class GeyserJacksonConfiguration implements GeyserConfiguration
     @JsonProperty("disable-bedrock-scaffolding")
     private boolean disableBedrockScaffolding = false;
 
+    @JsonProperty("always-quick-change-armor")
+    private boolean alwaysQuickChangeArmor = false;
+
     @JsonDeserialize(using = EmoteOffhandWorkaroundOption.Deserializer.class)
     @JsonProperty("emote-offhand-workaround")
     private EmoteOffhandWorkaroundOption emoteOffhandWorkaround = EmoteOffhandWorkaroundOption.DISABLED;

File: api/base/src/main/java/org/geysermc/api/GeyserApiBase.java
Patch:
@@ -27,7 +27,7 @@
 
 import org.checkerframework.checker.nullness.qual.NonNull;
 import org.checkerframework.checker.nullness.qual.Nullable;
-import org.geysermc.api.session.Connection;
+import org.geysermc.api.connection.Connection;
 
 import java.util.List;
 import java.util.UUID;

File: api/base/src/main/java/org/geysermc/api/connection/Connection.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.api.session;
+package org.geysermc.api.connection;
 
 import org.checkerframework.checker.nullness.qual.NonNull;
 

File: api/geyser/src/main/java/org/geysermc/geyser/api/connection/GeyserConnection.java
Patch:
@@ -25,7 +25,7 @@
 
 package org.geysermc.geyser.api.connection;
 
-import org.geysermc.api.session.Connection;
+import org.geysermc.api.connection.Connection;
 
 /**
  * Represents a player session used in Geyser.

File: api/geyser/src/main/java/org/geysermc/geyser/api/extension/GeyserExtension.java
Patch:
@@ -75,9 +75,7 @@ public boolean isEnabled() {
     }
 
     /**
-     * Gets if the extension is enabled
-     *
-     * @return true if the extension is enabled
+     * Enables or disables the extension
      */
     public void setEnabled(boolean value) {
         if (this.enabled != value) {

File: core/src/main/java/org/geysermc/geyser/dump/DumpInfo.java
Patch:
@@ -127,8 +127,8 @@ public DumpInfo(boolean addLog) {
         this.flagsInfo = new FlagsInfo();
 
         this.extensionInfo = new ArrayList<>();
-        for (GeyserExtension extension : GeyserExtensionManager.getInstance().getExtensions().values()) {
-            this.extensionInfo.add(new ExtensionInfo(extension.isEnabled(), extension.name(), extension.description().version(), extension.description().main(), extension.description().authors(), extension.description().apiVersion()));
+        for (GeyserExtension extension : GeyserImpl.getInstance().getExtensionManager().getExtensions().values()) {
+            this.extensionInfo.add(new ExtensionInfo(extension.isEnabled(), extension.name(), extension.description().version(), extension.description().apiVersion(), extension.description().main(), extension.description().authors()));
         }
     }
 
@@ -289,8 +289,8 @@ public static class ExtensionInfo {
         public boolean enabled;
         public String name;
         public String version;
+        public String apiVersion;
         public String main;
         public List<String> authors;
-        public String apiVersion;
     }
 }

File: core/src/main/java/org/geysermc/geyser/extension/GeyserExtensionClassLoader.java
Patch:
@@ -78,11 +78,11 @@ protected Class<?> findClass(String name, boolean checkGlobal) throws ClassNotFo
             throw new ClassNotFoundException(name);
         }
         Class<?> result = classes.get(name);
-        if(result == null) {
-            if(checkGlobal) {
+        if (result == null) {
+            if (checkGlobal) {
                 result = loader.classByName(name);
             }
-            if(result == null) {
+            if (result == null) {
                 result = super.findClass(name);
                 if (result != null) {
                     loader.setClass(name, result);

File: api/geyser/src/main/java/org/geysermc/geyser/api/extension/ExtensionLogger.java
Patch:
@@ -28,6 +28,7 @@
 public interface ExtensionLogger {
     /**
      * Get the logger prefix
+     *
      * @return the logger prefix
      */
     String prefix();

File: api/geyser/src/main/java/org/geysermc/geyser/api/extension/exception/InvalidDescriptionException.java
Patch:
@@ -25,6 +25,9 @@
 
 package org.geysermc.geyser.api.extension.exception;
 
+/**
+ * Thrown when an extension's description is invalid.
+ */
 public class InvalidDescriptionException extends Exception {
     public InvalidDescriptionException(Throwable cause) {
         super(cause);

File: api/geyser/src/main/java/org/geysermc/geyser/api/extension/exception/InvalidExtensionException.java
Patch:
@@ -25,6 +25,9 @@
 
 package org.geysermc.geyser.api.extension.exception;
 
+/**
+ * Thrown when an extension is invalid.
+ */
 public class InvalidExtensionException extends Exception {
     public InvalidExtensionException(Throwable cause) {
         super(cause);

File: core/src/main/java/org/geysermc/geyser/inventory/PlayerInventory.java
Patch:
@@ -32,7 +32,6 @@
 import org.geysermc.geyser.session.GeyserSession;
 
 public class PlayerInventory extends Inventory {
-
     /**
      * Stores the held item slot, starting at index 0.
      * Add 36 in order to get the network item slot.

File: core/src/main/java/org/geysermc/geyser/translator/inventory/InventoryTranslator.java
Patch:
@@ -184,6 +184,9 @@ public void translateRequests(GeyserSession session, Inventory inventory, List<I
             InventoryUtils.updateCursor(session);
             updateInventory(session, inventory);
         }
+
+        // We're done with our batch of inventory requests so this hack should be reset
+        inventory.resetNextStateId();
     }
 
     public ItemStackResponsePacket.Response translateRequest(GeyserSession session, Inventory inventory, ItemStackRequest request) {

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/inventory/JavaContainerSetSlotTranslator.java
Patch:
@@ -71,6 +71,7 @@ public void translate(GeyserSession session, ClientboundContainerSetSlotPacket p
         if (inventory == null)
             return;
 
+        // Intentional behavior here below the cursor; Minecraft 1.18.1 also does this.
         inventory.setStateId(packet.getStateId());
 
         InventoryTranslator translator = session.getInventoryTranslator();

File: core/src/main/java/org/geysermc/geyser/entity/type/player/PlayerEntity.java
Patch:
@@ -65,6 +65,8 @@
 
 @Getter @Setter
 public class PlayerEntity extends LivingEntity {
+    public static final float SNEAKING_POSE_HEIGHT = 1.5f;
+
     private GameProfile profile;
     private String username;
     private boolean playerList = true;  // Player is in the player list
@@ -381,7 +383,7 @@ public void setDisplayNameVisible(BooleanEntityMetadata entityMetadata) {
     protected void setDimensions(Pose pose) {
         float height;
         switch (pose) {
-            case SNEAKING -> height = 1.5f;
+            case SNEAKING -> height = SNEAKING_POSE_HEIGHT;
             case FALL_FLYING, SPIN_ATTACK, SWIMMING -> height = 0.6f;
             default -> {
                 super.setDimensions(pose);

File: core/src/main/java/org/geysermc/geyser/entity/EntityDefinitions.java
Patch:
@@ -181,7 +181,7 @@ public final class EntityDefinitions {
                 .addTranslator(MetadataType.BOOLEAN, Entity::setDisplayNameVisible)
                 .addTranslator(MetadataType.BOOLEAN, (entity, entityMetadata) -> entity.setFlag(EntityFlag.SILENT, ((BooleanEntityMetadata) entityMetadata).getPrimitiveValue()))
                 .addTranslator(MetadataType.BOOLEAN, Entity::setGravity)
-                .addTranslator(MetadataType.POSE, Entity::setPose)
+                .addTranslator(MetadataType.POSE, (entity, entityMetadata) -> entity.setPose(entityMetadata.getValue()))
                 .addTranslator(MetadataType.INT, Entity::setFreezing)
                 .build();
 

File: core/src/main/java/org/geysermc/geyser/entity/EntityDefinitions.java
Patch:
@@ -79,7 +79,7 @@ public final class EntityDefinitions {
     public static final EntityDefinition<ThrowableItemEntity> ENDER_PEARL;
     public static final EntityDefinition<EnderCrystalEntity> END_CRYSTAL;
     public static final EntityDefinition<SpellcasterIllagerEntity> EVOKER;
-    public static final EntityDefinition<Entity> EVOKER_FANGS;
+    public static final EntityDefinition<EvokerFangsEntity> EVOKER_FANGS;
     public static final EntityDefinition<ThrowableItemEntity> EXPERIENCE_BOTTLE;
     public static final EntityDefinition<ExpOrbEntity> EXPERIENCE_ORB;
     public static final EntityDefinition<Entity> EYE_OF_ENDER;
@@ -225,7 +225,7 @@ public final class EntityDefinitions {
                     .type(EntityType.EXPERIENCE_ORB)
                     .identifier("minecraft:xp_orb")
                     .build();
-            EVOKER_FANGS = EntityDefinition.builder(entityBase.factory()) // No entity metadata to listen to as of 1.18.1
+            EVOKER_FANGS = EntityDefinition.builder(EvokerFangsEntity::new) // No entity metadata to listen to as of 1.18.1
                     .type(EntityType.EVOKER_FANGS)
                     .height(0.8f).width(0.5f)
                     .identifier("minecraft:evocation_fang")

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/JavaEntityEventTranslator.java
Patch:
@@ -119,8 +119,8 @@ public void translate(GeyserSession session, ClientboundEntityEventPacket packet
                 // Player is pulled from a fishing rod
                 // The physics of this are clientside on Java
                 FishingHookEntity fishingHook = (FishingHookEntity) entity;
-                if (fishingHook.isOwnerSessionPlayer()) {
-                    Entity hookOwner = session.getEntityCache().getEntityByGeyserId(fishingHook.getBedrockTargetId());
+                if (fishingHook.getBedrockTargetId() == session.getPlayerEntity().getGeyserId()) {
+                    Entity hookOwner = session.getEntityCache().getEntityByGeyserId(fishingHook.getBedrockOwnerId());
                     if (hookOwner != null) {
                         // https://minecraft.gamepedia.com/Fishing_Rod#Hooking_mobs_and_other_entities
                         SetEntityMotionPacket motionPacket = new SetEntityMotionPacket();

File: core/src/main/java/org/geysermc/geyser/entity/type/living/monster/PiglinEntity.java
Patch:
@@ -44,6 +44,8 @@ public void setBaby(BooleanEntityMetadata entityMetadata) {
         boolean isBaby = entityMetadata.getPrimitiveValue();
         dirtyMetadata.put(EntityData.SCALE, isBaby? .55f : 1f);
         setFlag(EntityFlag.BABY, isBaby);
+
+        updateMountOffset();
     }
 
     public void setChargingCrossbow(BooleanEntityMetadata entityMetadata) {

File: core/src/main/java/org/geysermc/geyser/entity/type/living/monster/ZombieEntity.java
Patch:
@@ -45,6 +45,8 @@ public void setZombieBaby(BooleanEntityMetadata entityMetadata) {
         boolean isBaby = entityMetadata.getPrimitiveValue();
         dirtyMetadata.put(EntityData.SCALE, isBaby ? .55f : 1.0f);
         setFlag(EntityFlag.BABY, isBaby);
+
+        updateMountOffset();
     }
 
     public void setConvertingToDrowned(BooleanEntityMetadata entityMetadata) {

File: core/src/main/java/org/geysermc/geyser/session/cache/WorldBorder.java
Patch:
@@ -151,7 +151,7 @@ public boolean isPassingIntoBorderBoundaries(Vector3f newPosition, boolean adjus
             // Move the player back, but allow gravity to take place
             // Teleported = true makes going back better, but disconnects the player from their mounted entity
             playerEntity.moveAbsolute(Vector3f.from(playerEntity.getPosition().getX(), (newPosition.getY() - EntityDefinitions.PLAYER.offset()), playerEntity.getPosition().getZ()),
-                    playerEntity.getYaw(), playerEntity.getPitch(), playerEntity.getHeadYaw(), playerEntity.isOnGround(), session.getRidingVehicleEntity() == null);
+                    playerEntity.getYaw(), playerEntity.getPitch(), playerEntity.getHeadYaw(), playerEntity.isOnGround(), playerEntity.getVehicle() == null);
         }
         return isInWorldBorder;
     }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/BedrockMoveEntityAbsoluteTranslator.java
Patch:
@@ -45,7 +45,7 @@ public class BedrockMoveEntityAbsoluteTranslator extends PacketTranslator<MoveEn
     public void translate(GeyserSession session, MoveEntityAbsolutePacket packet) {
         session.setLastVehicleMoveTimestamp(System.currentTimeMillis());
 
-        Entity ridingEntity = session.getRidingVehicleEntity();
+        Entity ridingEntity = session.getPlayerEntity().getVehicle();
         if (ridingEntity != null && session.getWorldBorder().isPassingIntoBorderBoundaries(packet.getPosition(), false)) {
             Vector3f position = Vector3f.from(ridingEntity.getPosition().getX(), packet.getPosition().getY(),
                     ridingEntity.getPosition().getZ());

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/BedrockPlayerInputTranslator.java
Patch:
@@ -54,7 +54,7 @@ public void translate(GeyserSession session, PlayerInputPacket packet) {
 
         // Bedrock only sends movement vehicle packets while moving
         // This allows horses to take damage while standing on magma
-        Entity vehicle = session.getRidingVehicleEntity();
+        Entity vehicle = session.getPlayerEntity().getVehicle();
         boolean sendMovement = false;
         if (vehicle instanceof AbstractHorseEntity && !(vehicle instanceof LlamaEntity)) {
             sendMovement = vehicle.isOnGround();

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/BedrockInteractTranslator.java
Patch:
@@ -74,7 +74,6 @@ public void translate(GeyserSession session, InteractPacket packet) {
             case LEAVE_VEHICLE:
                 ServerboundPlayerCommandPacket sneakPacket = new ServerboundPlayerCommandPacket((int) entity.getEntityId(), PlayerState.START_SNEAKING);
                 session.sendDownstreamPacket(sneakPacket);
-                session.setRidingVehicleEntity(null);
                 break;
             case MOUSEOVER:
                 // Handle the buttons for mobile - "Mount", etc; and the suggestions for console - "ZL: Mount", etc
@@ -97,7 +96,7 @@ public void translate(GeyserSession session, InteractPacket packet) {
                 break;
             case OPEN_INVENTORY:
                 if (session.getOpenInventory() == null) {
-                    Entity ridingEntity = session.getRidingVehicleEntity();
+                    Entity ridingEntity = session.getPlayerEntity().getVehicle();
                     if (ridingEntity instanceof AbstractHorseEntity) {
                         if (ridingEntity.getFlag(EntityFlag.TAMED)) {
                             // We should request to open the horse inventory instead

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/BedrockMovePlayerTranslator.java
Patch:
@@ -67,7 +67,8 @@ public void translate(GeyserSession session, MovePlayerPacket packet) {
         // Send book update before the player moves
         session.getBookEditCache().checkForSend();
 
-        if (!session.getTeleportMap().isEmpty()) {
+        // Ignore movement packets until Bedrock's position matches the teleported position
+        if (session.getUnconfirmedTeleport() != null) {
             session.confirmTeleport(packet.getPosition().toDouble().sub(0, EntityDefinitions.PLAYER.offset(), 0));
             return;
         }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/BedrockRiderJumpTranslator.java
Patch:
@@ -38,7 +38,7 @@
 public class BedrockRiderJumpTranslator extends PacketTranslator<RiderJumpPacket> {
     @Override
     public void translate(GeyserSession session, RiderJumpPacket packet) {
-        Entity vehicle = session.getRidingVehicleEntity();
+        Entity vehicle = session.getPlayerEntity().getVehicle();
         if (vehicle instanceof AbstractHorseEntity) {
             ServerboundPlayerCommandPacket playerCommandPacket = new ServerboundPlayerCommandPacket((int) vehicle.getEntityId(),  PlayerState.START_HORSE_JUMP, packet.getJumpStrength());
             session.sendDownstreamPacket(playerCommandPacket);

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/JavaMoveEntityPosRotTranslator.java
Patch:
@@ -37,9 +37,6 @@ public class JavaMoveEntityPosRotTranslator extends PacketTranslator<Clientbound
     @Override
     public void translate(GeyserSession session, ClientboundMoveEntityPosRotPacket packet) {
         Entity entity = session.getEntityCache().getEntityByJavaId(packet.getEntityId());
-        if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {
-            entity = session.getPlayerEntity();
-        }
         if (entity == null) return;
 
         entity.updatePositionAndRotation(packet.getMoveX(), packet.getMoveY(), packet.getMoveZ(), packet.getYaw(), packet.getPitch(), packet.isOnGround());

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/JavaMoveEntityRotTranslator.java
Patch:
@@ -37,9 +37,6 @@ public class JavaMoveEntityRotTranslator extends PacketTranslator<ClientboundMov
     @Override
     public void translate(GeyserSession session, ClientboundMoveEntityRotPacket packet) {
         Entity entity = session.getEntityCache().getEntityByJavaId(packet.getEntityId());
-        if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {
-            entity = session.getPlayerEntity();
-        }
         if (entity == null) return;
 
         entity.updateRotation(packet.getYaw(), packet.getPitch(), packet.isOnGround());

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/JavaMoveVehicleTranslator.java
Patch:
@@ -37,7 +37,7 @@ public class JavaMoveVehicleTranslator extends PacketTranslator<ClientboundMoveV
 
     @Override
     public void translate(GeyserSession session, ClientboundMoveVehiclePacket packet) {
-        Entity entity = session.getRidingVehicleEntity();
+        Entity entity = session.getPlayerEntity().getVehicle();
         if (entity == null) return;
 
         entity.moveAbsolute(Vector3f.from(packet.getX(), packet.getY(), packet.getZ()), packet.getYaw(), packet.getPitch(), false, true);

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/JavaTeleportEntityTranslator.java
Patch:
@@ -38,9 +38,6 @@ public class JavaTeleportEntityTranslator extends PacketTranslator<ClientboundTe
     @Override
     public void translate(GeyserSession session, ClientboundTeleportEntityPacket packet) {
         Entity entity = session.getEntityCache().getEntityByJavaId(packet.getEntityId());
-        if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {
-            entity = session.getPlayerEntity();
-        }
         if (entity == null) return;
 
         entity.teleport(Vector3f.from(packet.getX(), packet.getY(), packet.getZ()), packet.getYaw(), packet.getPitch(), packet.isOnGround());

File: core/src/main/java/org/geysermc/geyser/entity/type/player/PlayerEntity.java
Patch:
@@ -356,7 +356,6 @@ public void updateDisplayName(@Nullable Team team, boolean useGivenTeam) {
                 String prefix = team.getCurrentData().getPrefix();
                 String suffix = team.getCurrentData().getSuffix();
                 newDisplayName = chatColor + prefix + chatColor + this.username + chatColor + suffix;
-                System.out.println(newDisplayName);
             } else {
                 // The name is not visible to the session player; clear name
                 newDisplayName = "";

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/scoreboard/JavaSetPlayerTeamTranslator.java
Patch:
@@ -72,7 +72,7 @@ public void translate(GeyserSession session, ClientboundSetPlayerTeamPacket pack
 
                 if (packet.getPlayers().length != 0) {
                     if ((team.getNameTagVisibility() != NameTagVisibility.ALWAYS && !team.isVisibleFor(session.getPlayerEntity().getUsername()))
-                            || team.getColor() != TeamColor.NONE
+                            || team.getColor() != TeamColor.RESET
                             || !team.getCurrentData().getPrefix().isEmpty()
                             || !team.getCurrentData().getSuffix().isEmpty()) {
                         // Something is here that would modify entity names

File: core/src/main/java/org/geysermc/geyser/translator/text/MessageTranslator.java
Patch:
@@ -60,7 +60,7 @@ public class MessageTranslator {
     private static final String RESET = BASE + "r";
 
     static {
-        TEAM_COLORS.put(TeamColor.NONE, "");
+        TEAM_COLORS.put(TeamColor.RESET, RESET);
 
         TEAM_COLORS.put(TeamColor.BLACK, BASE + "0");
         TEAM_COLORS.put(TeamColor.DARK_BLUE, BASE + "1");

File: core/src/main/java/org/geysermc/geyser/translator/inventory/InventoryTranslator.java
Patch:
@@ -391,6 +391,7 @@ public ItemStackResponsePacket.Response translateRequest(GeyserSession session,
                     }
                     break;
                 }
+                case CRAFT_RECIPE: // Called by stonecutters 1.18+
                 case CRAFT_RECIPE_AUTO: // Called by villagers
                 case CRAFT_NON_IMPLEMENTED_DEPRECATED: // Tends to be called for UI inventories
                 case CRAFT_RESULTS_DEPRECATED: // Tends to be called for UI inventories

File: core/src/main/java/org/geysermc/geyser/translator/inventory/StonecutterInventoryTranslator.java
Patch:
@@ -53,7 +53,8 @@ public StonecutterInventoryTranslator() {
 
     @Override
     public boolean shouldHandleRequestFirst(StackRequestActionData action, Inventory inventory) {
-        return action.getType() == StackRequestActionType.CRAFT_NON_IMPLEMENTED_DEPRECATED;
+        // First is pre-1.18. TODO remove after 1.17.40 support is dropped and refactor stonecutter support to use CraftRecipeStackRequestActionData's recipe ID
+        return action.getType() == StackRequestActionType.CRAFT_NON_IMPLEMENTED_DEPRECATED || action.getType() == StackRequestActionType.CRAFT_RECIPE;
     }
 
     @Override

File: core/src/main/java/org/geysermc/geyser/registry/Registries.java
Patch:
@@ -31,6 +31,7 @@
 import com.github.steveice10.mc.protocol.data.game.level.particle.ParticleType;
 import com.github.steveice10.mc.protocol.data.game.recipe.Recipe;
 import com.github.steveice10.mc.protocol.data.game.recipe.RecipeType;
+import com.github.steveice10.mc.protocol.data.game.statistic.CustomStatistic;
 import com.github.steveice10.packetlib.packet.Packet;
 import com.nukkitx.nbt.NbtMap;
 import com.nukkitx.protocol.bedrock.BedrockPacket;
@@ -61,6 +62,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.function.IntFunction;
 
 /**
  * Holds all the common registries in Geyser.

File: core/src/main/java/org/geysermc/geyser/registry/populator/ItemRegistryPopulator.java
Patch:
@@ -442,7 +442,7 @@ public static void populate() {
                 entries.put("geysermc:furnace_minecart", new StartGamePacket.ItemEntry("geysermc:furnace_minecart", (short) furnaceMinecartId, true));
 
                 mappings.put(javaFurnaceMinecartId, ItemMapping.builder()
-                        .javaIdentifier("geysermc:furnace_minecart")
+                        .javaIdentifier("minecraft:furnace_minecart")
                         .bedrockIdentifier("geysermc:furnace_minecart")
                         .javaId(javaFurnaceMinecartId)
                         .bedrockId(furnaceMinecartId)

File: core/src/main/java/org/geysermc/geyser/inventory/MerchantContainer.java
Patch:
@@ -27,6 +27,7 @@
 
 import com.github.steveice10.mc.protocol.data.game.inventory.VillagerTrade;
 import com.github.steveice10.mc.protocol.data.game.inventory.ContainerType;
+import com.github.steveice10.mc.protocol.packet.ingame.clientbound.inventory.ClientboundMerchantOffersPacket;
 import lombok.Getter;
 import lombok.Setter;
 import org.geysermc.geyser.entity.type.Entity;
@@ -36,6 +37,7 @@
 public class MerchantContainer extends Container {
     private Entity villager;
     private VillagerTrade[] villagerTrades;
+    private ClientboundMerchantOffersPacket pendingOffersPacket;
 
     public MerchantContainer(String title, int id, int size, ContainerType containerType, PlayerInventory playerInventory) {
         super(title, id, size, containerType, playerInventory);

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/inventory/JavaOpenScreenTranslator.java
Patch:
@@ -45,7 +45,7 @@ public void translate(GeyserSession session, ClientboundOpenScreenPacket packet)
             return;
         }
 
-        InventoryTranslator newTranslator = InventoryTranslator.INVENTORY_TRANSLATORS.get(packet.getType());
+        InventoryTranslator newTranslator = InventoryTranslator.inventoryTranslator(packet.getType());
         Inventory openInventory = session.getOpenInventory();
         // No translator exists for this window type. Close all windows and return.
         if (newTranslator == null) {

File: bootstrap/velocity/src/main/java/org/geysermc/geyser/platform/velocity/GeyserVelocityPlugin.java
Patch:
@@ -36,17 +36,17 @@
 import com.velocitypowered.api.proxy.ProxyServer;
 import lombok.Getter;
 import org.geysermc.common.PlatformType;
-import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.GeyserBootstrap;
-import org.geysermc.geyser.session.auth.AuthType;
+import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.configuration.GeyserConfiguration;
 import org.geysermc.geyser.dump.BootstrapDumpInfo;
 import org.geysermc.geyser.ping.GeyserLegacyPingPassthrough;
 import org.geysermc.geyser.ping.IGeyserPingPassthrough;
 import org.geysermc.geyser.platform.velocity.command.GeyserVelocityCommandExecutor;
 import org.geysermc.geyser.platform.velocity.command.GeyserVelocityCommandManager;
-import org.geysermc.geyser.util.FileUtils;
+import org.geysermc.geyser.session.auth.AuthType;
 import org.geysermc.geyser.text.GeyserLocale;
+import org.geysermc.geyser.util.FileUtils;
 import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 

File: core/src/main/java/org/geysermc/geyser/dump/DumpInfo.java
Patch:
@@ -66,6 +66,7 @@ public class DumpInfo {
     private static final long MEGABYTE = 1024L * 1024L;
 
     private final DumpInfo.VersionInfo versionInfo;
+    private final int cpuCount;
     private Properties gitInfo;
     private final GeyserConfiguration config;
     private final Floodgate floodgate;
@@ -79,6 +80,8 @@ public class DumpInfo {
     public DumpInfo(boolean addLog) {
         this.versionInfo = new VersionInfo();
 
+        this.cpuCount = Runtime.getRuntime().availableProcessors();
+
         try (InputStream stream = GeyserImpl.getInstance().getBootstrap().getResource("git.properties")) {
             this.gitInfo = new Properties();
             this.gitInfo.load(stream);

File: core/src/main/java/org/geysermc/geyser/dump/DumpInfo.java
Patch:
@@ -47,6 +47,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.io.InputStream;
 import java.lang.management.ManagementFactory;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
@@ -78,9 +79,9 @@ public class DumpInfo {
     public DumpInfo(boolean addLog) {
         this.versionInfo = new VersionInfo();
 
-        try {
+        try (InputStream stream = GeyserImpl.getInstance().getBootstrap().getResource("git.properties")) {
             this.gitInfo = new Properties();
-            this.gitInfo.load(FileUtils.getResource("git.properties"));
+            this.gitInfo.load(stream);
         } catch (IOException ignored) {
         }
 

File: core/src/main/java/org/geysermc/geyser/registry/loader/BiomeIdentifierRegistryLoader.java
Patch:
@@ -30,7 +30,6 @@
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import org.geysermc.geyser.GeyserImpl;
-import org.geysermc.geyser.util.FileUtils;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -45,10 +44,10 @@ public Object2IntMap<String> load(String input) {
         // The server sends the corresponding Java network IDs, so we don't need to worry about that now.
 
         // Reference variable for Jackson to read off of
-        TypeReference<Map<String, BiomeEntry>> biomeEntriesType = new TypeReference<Map<String, BiomeEntry>>() { };
+        TypeReference<Map<String, BiomeEntry>> biomeEntriesType = new TypeReference<>() { };
         Map<String, BiomeEntry> biomeEntries;
 
-        try (InputStream stream = FileUtils.getResource("mappings/biomes.json")) {
+        try (InputStream stream = GeyserImpl.getInstance().getBootstrap().getResource("mappings/biomes.json")) {
             biomeEntries = GeyserImpl.JSON_MAPPER.readValue(stream, biomeEntriesType);
         } catch (IOException e) {
             throw new AssertionError("Unable to load Bedrock runtime biomes", e);

File: core/src/main/java/org/geysermc/geyser/registry/loader/CollisionRegistryLoader.java
Patch:
@@ -65,10 +65,8 @@ public Map<Integer, BlockCollision> load(Pair<String, String> input) {
         }
 
         // Load collision mappings file
-        InputStream stream = FileUtils.getResource(input.value());
-
         List<BoundingBox[]> collisionList;
-        try {
+        try (InputStream stream = GeyserImpl.getInstance().getBootstrap().getResource(input.value())) {
             ArrayNode collisionNode = (ArrayNode) GeyserImpl.JSON_MAPPER.readTree(stream);
             collisionList = loadBoundingBoxes(collisionNode);
         } catch (Exception e) {

File: core/src/main/java/org/geysermc/geyser/registry/loader/SoundRegistryLoader.java
Patch:
@@ -28,7 +28,6 @@
 import com.fasterxml.jackson.databind.JsonNode;
 import org.geysermc.geyser.GeyserImpl;
 import org.geysermc.geyser.registry.type.SoundMapping;
-import org.geysermc.geyser.util.FileUtils;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -43,9 +42,8 @@ public class SoundRegistryLoader implements RegistryLoader<String, Map<String, S
 
     @Override
     public Map<String, SoundMapping> load(String input) {
-        InputStream stream  = FileUtils.getResource(input);
         JsonNode soundsTree;
-        try {
+        try (InputStream stream = GeyserImpl.getInstance().getBootstrap().getResource(input)) {
             soundsTree = GeyserImpl.JSON_MAPPER.readTree(stream);
         } catch (IOException e) {
             throw new AssertionError("Unable to load sound mappings", e);

File: core/src/main/java/org/geysermc/geyser/entity/type/Entity.java
Patch:
@@ -83,9 +83,9 @@ public class Entity {
 
     /* Metadata about this specific entity */
     @Setter(AccessLevel.NONE)
-    protected float boundingBoxHeight;
+    private float boundingBoxHeight;
     @Setter(AccessLevel.NONE)
-    protected float boundingBoxWidth;
+    private float boundingBoxWidth;
     @Setter(AccessLevel.NONE)
     protected String nametag = "";
     /* Metadata end */

File: core/src/main/java/org/geysermc/geyser/entity/type/living/AgeableEntity.java
Patch:
@@ -45,9 +45,8 @@ public void setBaby(BooleanEntityMetadata entityMetadata) {
         dirtyMetadata.put(EntityData.SCALE, isBaby ? getBabySize() : getAdultSize());
         setFlag(EntityFlag.BABY, isBaby);
 
-        // TODO save this?
-        dirtyMetadata.put(EntityData.BOUNDING_BOX_HEIGHT, definition.height() * (isBaby ? getBabySize() : getAdultSize()));
-        dirtyMetadata.put(EntityData.BOUNDING_BOX_WIDTH, definition.width() * (isBaby ? getBabySize() : getAdultSize()));
+        setBoundingBoxHeight(definition.height() * (isBaby ? getBabySize() : getAdultSize()));
+        setBoundingBoxWidth(definition.width() * (isBaby ? getBabySize() : getAdultSize()));
     }
 
     /**

File: core/src/main/java/org/geysermc/geyser/entity/type/living/monster/PhantomEntity.java
Patch:
@@ -44,8 +44,8 @@ public void setPhantomScale(IntEntityMetadata entityMetadata) {
         float modelScale = 1f + 0.15f * size;
         float boundsScale = (1f + (0.2f * size) / definition.width()) / modelScale;
 
-        dirtyMetadata.put(EntityData.BOUNDING_BOX_WIDTH, boundsScale * definition.width());
-        dirtyMetadata.put(EntityData.BOUNDING_BOX_HEIGHT, boundsScale * definition.height());
+        setBoundingBoxWidth(boundsScale * definition.width());
+        setBoundingBoxHeight(boundsScale * definition.height());
         dirtyMetadata.put(EntityData.SCALE, modelScale);
     }
 }

File: core/src/main/java/org/geysermc/geyser/session/GeyserSession.java
Patch:
@@ -58,7 +58,6 @@
 import com.nukkitx.protocol.bedrock.BedrockServerSession;
 import com.nukkitx.protocol.bedrock.data.*;
 import com.nukkitx.protocol.bedrock.data.command.CommandPermission;
-import com.nukkitx.protocol.bedrock.data.entity.EntityData;
 import com.nukkitx.protocol.bedrock.data.entity.EntityFlag;
 import com.nukkitx.protocol.bedrock.packet.*;
 import com.nukkitx.protocol.bedrock.v471.Bedrock_v471;
@@ -1057,15 +1056,15 @@ public void setSneaking(boolean sneaking) {
 
     private void setSneakingPose(boolean sneaking) {
         this.pose = sneaking ? Pose.SNEAKING : Pose.STANDING;
-        playerEntity.getDirtyMetadata().put(EntityData.BOUNDING_BOX_HEIGHT, sneaking ? 1.5f : playerEntity.getDefinition().height());
+        playerEntity.setBoundingBoxHeight(sneaking ? 1.5f : playerEntity.getDefinition().height());
         playerEntity.setFlag(EntityFlag.SNEAKING, sneaking);
 
         collisionManager.updatePlayerBoundingBox();
     }
 
     public void setSwimming(boolean swimming) {
         this.pose = swimming ? Pose.SWIMMING : Pose.STANDING;
-        playerEntity.getDirtyMetadata().put(EntityData.BOUNDING_BOX_HEIGHT, swimming ? 0.6f : playerEntity.getDefinition().height());
+        playerEntity.setBoundingBoxHeight(swimming ? 0.6f : playerEntity.getDefinition().height());
         playerEntity.setFlag(EntityFlag.SWIMMING, swimming);
         playerEntity.updateBedrockMetadata();
     }

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/entity/player/BedrockMovePlayerTranslator.java
Patch:
@@ -33,10 +33,10 @@
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.packet.MoveEntityAbsolutePacket;
 import com.nukkitx.protocol.bedrock.packet.MovePlayerPacket;
-import org.geysermc.geyser.text.ChatColor;
 import org.geysermc.geyser.entity.EntityDefinitions;
 import org.geysermc.geyser.entity.type.player.SessionPlayerEntity;
 import org.geysermc.geyser.session.GeyserSession;
+import org.geysermc.geyser.text.ChatColor;
 import org.geysermc.geyser.translator.protocol.PacketTranslator;
 import org.geysermc.geyser.translator.protocol.Translator;
 
@@ -71,8 +71,6 @@ public void translate(GeyserSession session, MovePlayerPacket packet) {
             session.confirmTeleport(packet.getPosition().toDouble().sub(0, EntityDefinitions.PLAYER.offset(), 0));
             return;
         }
-        // head yaw, pitch, head yaw
-        Vector3f rotation = Vector3f.from(packet.getRotation().getY(), packet.getRotation().getX(), packet.getRotation().getY());
         float yaw = packet.getRotation().getY();
         float pitch = packet.getRotation().getX();
         float headYaw = packet.getRotation().getY();

File: core/src/main/java/org/geysermc/geyser/FloodgateKeyLoader.java
Patch:
@@ -25,9 +25,8 @@
 
 package org.geysermc.geyser;
 
-import org.geysermc.geyser.GeyserLogger;
-import org.geysermc.geyser.session.auth.AuthType;
 import org.geysermc.geyser.configuration.GeyserJacksonConfiguration;
+import org.geysermc.geyser.session.auth.AuthType;
 import org.geysermc.geyser.text.GeyserLocale;
 
 import java.nio.file.Files;

File: core/src/main/java/org/geysermc/geyser/session/cache/BossBar.java
Patch:
@@ -59,7 +59,7 @@ public void updateBossBar() {
         bossEventPacket.setAction(BossEventPacket.Action.CREATE);
         bossEventPacket.setTitle(MessageTranslator.convertMessage(title, session.getLocale()));
         bossEventPacket.setHealthPercentage(health);
-        bossEventPacket.setColor(color); //ignored by client
+        bossEventPacket.setColor(color);
         bossEventPacket.setOverlay(overlay);
         bossEventPacket.setDarkenSky(darkenSky);
 

File: core/src/main/java/org/geysermc/geyser/translator/level/block/entity/CommandBlockBlockEntityTranslator.java
Patch:
@@ -35,7 +35,7 @@
 public class CommandBlockBlockEntityTranslator extends BlockEntityTranslator implements RequiresBlockState {
     @Override
     public void translateTag(NbtMapBuilder builder, CompoundTag tag, int blockState) {
-        if (tag.size() < 5) {
+        if (tag == null || tag.size() < 5) {
             return; // These values aren't here
         }
         // Java infers from the block state, but Bedrock needs it in the tag

File: core/src/main/java/org/geysermc/geyser/entity/InteractiveTagManager.java
Patch:
@@ -162,9 +162,9 @@ else if (javaIdentifierStripped.equals("bowl")) {
                         interactiveTag = InteractiveTag.RIDE_MINECART;
                     }
                     break;
-                case MINECART_CHEST:
-                case MINECART_COMMAND_BLOCK:
-                case MINECART_HOPPER:
+                case CHEST_MINECART:
+                case COMMAND_BLOCK_MINECART:
+                case HOPPER_MINECART:
                     interactiveTag = InteractiveTag.OPEN_CONTAINER;
                     break;
                 case PIG:

File: core/src/main/java/org/geysermc/geyser/entity/type/FireballEntity.java
Patch:
@@ -31,15 +31,15 @@
 
 import java.util.UUID;
 
-public class ItemedFireballEntity extends ThrowableEntity {
+public class FireballEntity extends ThrowableEntity {
     private final Vector3f acceleration;
 
     /**
      * The number of ticks to advance movement before sending to Bedrock
      */
     protected int futureTicks = 3;
 
-    public ItemedFireballEntity(GeyserSession session, long entityId, long geyserId, UUID uuid, EntityDefinition<?> definition, Vector3f position, Vector3f motion, float yaw, float pitch, float headYaw) {
+    public FireballEntity(GeyserSession session, long entityId, long geyserId, UUID uuid, EntityDefinition<?> definition, Vector3f position, Vector3f motion, float yaw, float pitch, float headYaw) {
         super(session, entityId, geyserId, uuid, definition, position, Vector3f.ZERO, yaw, pitch, headYaw);
 
         float magnitude = motion.length();

File: core/src/main/java/org/geysermc/geyser/entity/type/WitherSkullEntity.java
Patch:
@@ -33,7 +33,7 @@
 
 import java.util.UUID;
 
-public class WitherSkullEntity extends ItemedFireballEntity {
+public class WitherSkullEntity extends FireballEntity {
     private boolean isCharged;
 
     public WitherSkullEntity(GeyserSession session, long entityId, long geyserId, UUID uuid, EntityDefinition<?> definition, Vector3f position, Vector3f motion, float yaw, float pitch, float headYaw) {

File: core/src/main/java/org/geysermc/geyser/translator/protocol/bedrock/BedrockEntityPickRequestTranslator.java
Patch:
@@ -66,11 +66,11 @@ public void translate(GeyserSession session, EntityPickRequestPacket packet) {
                 itemName = typeOfBoat + "_boat";
             }
             case LEASH_KNOT -> itemName = "lead";
-            case MINECART_CHEST, MINECART_COMMAND_BLOCK, MINECART_FURNACE, MINECART_HOPPER, MINECART_TNT ->
+            case CHEST_MINECART, COMMAND_BLOCK_MINECART, FURNACE_MINECART, HOPPER_MINECART, TNT_MINECART ->
                     // The Bedrock identifier matches the item name which moves MINECART to the end of the name
                     // TODO test
                     itemName = entity.getDefinition().identifier();
-            case MINECART_SPAWNER -> itemName = "minecart"; // Turns into a normal minecart
+            case SPAWNER_MINECART -> itemName = "minecart"; // Turns into a normal minecart
             //case ITEM_FRAME -> Not an entity in Bedrock Edition
             //case GLOW_ITEM_FRAME ->
             case ARMOR_STAND, END_CRYSTAL, MINECART, PAINTING ->

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/entity/JavaEntityEventTranslator.java
Patch:
@@ -97,7 +97,7 @@ public void translate(GeyserSession session, ClientboundEntityEventPacket packet
                 break;
             case LIVING_DEATH:
                 entityEventPacket.setType(EntityEventType.DEATH);
-                if (entity.getDefinition() == EntityDefinitions.THROWN_EGG) {
+                if (entity.getDefinition() == EntityDefinitions.EGG) {
                     LevelEventPacket particlePacket = new LevelEventPacket();
                     particlePacket.setType(LevelEventType.PARTICLE_ITEM_BREAK);
                     particlePacket.setData(session.getItemMappings().getStoredItems().egg().getBedrockId() << 16);

File: core/src/main/java/org/geysermc/geyser/translator/protocol/java/level/JavaLevelChunkWithLightTranslator.java
Patch:
@@ -315,7 +315,7 @@ public void translate(GeyserSession session, ClientboundLevelChunkWithLightPacke
 
             // At this point we're dealing with Bedrock chunk sections
             int dimensionOffset = (overworld ? MINIMUM_ACCEPTED_HEIGHT_OVERWORLD : MINIMUM_ACCEPTED_HEIGHT) >> 4;
-            for (int i = 0; i < sectionCount; i++) {
+            for (int i = 0; i < chunkSize; i++) {
                 int biomeYOffset = dimensionOffset + i;
                 if (biomeYOffset < yOffset) {
                     // Ignore this biome section since it goes above or below the height of the Java world
@@ -328,14 +328,14 @@ public void translate(GeyserSession session, ClientboundLevelChunkWithLightPacke
             // As of 1.17.10, Bedrock hardcodes to always read 32 biome sections
             // As of 1.18, this hardcode was lowered to 25
             if (session.getUpstream().getProtocolVersion() >= Bedrock_v475.V475_CODEC.getProtocolVersion()) {
-                int remainingEmptyBiomes = 25 - sectionCount;
+                int remainingEmptyBiomes = 25 - chunkSize;
                 for (int i = 0; i < remainingEmptyBiomes; i++) {
                     // A header that says to carry on the biome data from the previous chunk
                     // This notably fixes biomes in the End
                     byteBuf.writeByte((127 << 1) | 1);
                 }
             } else {
-                int remainingEmptyBiomes = 32 - sectionCount;
+                int remainingEmptyBiomes = 32 - chunkSize;
                 for (int i = 0; i < remainingEmptyBiomes; i++) {
                     byteBuf.writeBytes(ChunkUtils.EMPTY_BIOME_DATA);
                 }

File: connector/src/main/java/org/geysermc/connector/entity/AbstractArrowEntity.java
Patch:
@@ -40,7 +40,7 @@ public AbstractArrowEntity(GeyserSession session, long entityId, long geyserId,
         super(session, entityId, geyserId, uuid, definition, position, motion, yaw, pitch, headYaw);
 
         // Set the correct texture if using the resource pack
-        dirtyMetadata.getFlags().setFlag(EntityFlag.BRIBED, definition.entityType() == EntityType.SPECTRAL_ARROW);
+        setFlag(EntityFlag.BRIBED, definition.entityType() == EntityType.SPECTRAL_ARROW);
 
         setMotion(motion);
     }

File: connector/src/main/java/org/geysermc/connector/entity/EnderCrystalEntity.java
Patch:
@@ -45,7 +45,7 @@ public EnderCrystalEntity(GeyserSession session, long entityId, long geyserId, U
     protected void initializeMetadata() {
         super.initializeMetadata();
         // Bedrock 1.16.100+ - prevents the entity from appearing on fire itself when fire is underneath it
-        dirtyMetadata.getFlags().setFlag(EntityFlag.FIRE_IMMUNE, true);
+        setFlag(EntityFlag.FIRE_IMMUNE, true);
     }
 
     public void setBlockTarget(EntityMetadata<Position> entityMetadata) {

File: connector/src/main/java/org/geysermc/connector/entity/living/ArmorStandEntity.java
Patch:
@@ -294,8 +294,7 @@ private void updateSecondEntityStatus(boolean sendMetadata) {
             }
             return;
         }
-        //boolean isNametagEmpty = metadata.getString(EntityData.NAMETAG).isEmpty() || metadata.getByte(EntityData.NAMETAG_ALWAYS_SHOW, (byte) -1) == (byte) 0; - may not be necessary?
-        boolean isNametagEmpty = dirtyMetadata.getString(EntityData.NAMETAG).isEmpty(); // TODO
+        boolean isNametagEmpty = nametag.isEmpty();
         if (!isNametagEmpty && (!helmet.equals(ItemData.AIR) || !chestplate.equals(ItemData.AIR) || !leggings.equals(ItemData.AIR)
                 || !boots.equals(ItemData.AIR) || !hand.equals(ItemData.AIR) || !offHand.equals(ItemData.AIR))) {
             // If the second entity exists, no need to recreate it.
@@ -313,7 +312,7 @@ private void updateSecondEntityStatus(boolean sendMetadata) {
             }
             // Copy metadata
             secondEntity.isSmall = isSmall;
-            secondEntity.getDirtyMetadata().putAll(dirtyMetadata); //TODO check
+            //secondEntity.getDirtyMetadata().putAll(dirtyMetadata); //TODO check
             secondEntity.flags.merge(this.flags);
             // Guarantee this copy is NOT invisible
             secondEntity.setFlag(EntityFlag.INVISIBLE, false);

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/AnimalEntity.java
Patch:
@@ -44,7 +44,7 @@ public AnimalEntity(GeyserSession session, long entityId, long geyserId, UUID uu
      *                               <code>wheat</code>.
      * @return true if this is a valid item to breed with for this animal.
      */
-    public boolean canEat(GeyserSession session, String javaIdentifierStripped, ItemMapping mapping) {
+    public boolean canEat(String javaIdentifierStripped, ItemMapping mapping) {
         // This is what it defaults to. OK.
         return javaIdentifierStripped.equals("wheat");
     }

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/AxolotlEntity.java
Patch:
@@ -56,7 +56,7 @@ public void setPlayingDead(EntityMetadata<Boolean> entityMetadata) {
     }
 
     @Override
-    public boolean canEat(GeyserSession session, String javaIdentifierStripped, ItemMapping mapping) {
+    public boolean canEat(String javaIdentifierStripped, ItemMapping mapping) {
         return javaIdentifierStripped.equals("tropical_fish_bucket");
     }
 

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/BeeEntity.java
Patch:
@@ -67,7 +67,7 @@ public void setAngerTime(EntityMetadata<Integer> entityMetadata) {
     }
 
     @Override
-    public boolean canEat(GeyserSession session, String javaIdentifierStripped, ItemMapping mapping) {
+    public boolean canEat(String javaIdentifierStripped, ItemMapping mapping) {
         return session.getTagCache().isFlower(mapping);
     }
 }

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/ChickenEntity.java
Patch:
@@ -39,7 +39,7 @@ public ChickenEntity(GeyserSession session, long entityId, long geyserId, UUID u
     }
 
     @Override
-    public boolean canEat(GeyserSession session, String javaIdentifierStripped, ItemMapping mapping) {
+    public boolean canEat(String javaIdentifierStripped, ItemMapping mapping) {
         return javaIdentifierStripped.contains("seeds");
     }
 }

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/FoxEntity.java
Patch:
@@ -55,7 +55,7 @@ public void setFoxFlags(EntityMetadata<Byte> entityMetadata) {
     }
 
     @Override
-    public boolean canEat(GeyserSession session, String javaIdentifierStripped, ItemMapping mapping) {
+    public boolean canEat(String javaIdentifierStripped, ItemMapping mapping) {
         return session.getTagCache().isFoxFood(mapping);
     }
 }

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/GoatEntity.java
Patch:
@@ -29,7 +29,6 @@
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.Pose;
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.type.BooleanEntityMetadata;
 import com.nukkitx.math.vector.Vector3f;
-import com.nukkitx.protocol.bedrock.data.entity.EntityData;
 import lombok.Getter;
 import org.geysermc.connector.entity.EntityDefinition;
 import org.geysermc.connector.network.session.GeyserSession;
@@ -55,8 +54,8 @@ public void setScreamer(EntityMetadata<Boolean> entityMetadata) {
     @Override
     protected void setDimensions(Pose pose) {
         if (pose == Pose.LONG_JUMPING) {
-            dirtyMetadata.put(EntityData.BOUNDING_BOX_WIDTH, LONG_JUMPING_WIDTH);
-            dirtyMetadata.put(EntityData.BOUNDING_BOX_HEIGHT, LONG_JUMPING_HEIGHT);
+            setBoundingBoxWidth(LONG_JUMPING_WIDTH);
+            setBoundingBoxHeight(LONG_JUMPING_HEIGHT);
         } else {
             super.setDimensions(pose);
         }

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/HoglinEntity.java
Patch:
@@ -55,7 +55,7 @@ protected boolean isShaking() {
     }
 
     @Override
-    public boolean canEat(GeyserSession session, String javaIdentifierStripped, ItemMapping mapping) {
+    public boolean canEat(String javaIdentifierStripped, ItemMapping mapping) {
         return javaIdentifierStripped.equals("crimson_fungus");
     }
 }

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/OcelotEntity.java
Patch:
@@ -39,7 +39,7 @@ public OcelotEntity(GeyserSession session, long entityId, long geyserId, UUID uu
     }
 
     @Override
-    public boolean canEat(GeyserSession session, String javaIdentifierStripped, ItemMapping mapping) {
+    public boolean canEat(String javaIdentifierStripped, ItemMapping mapping) {
         return javaIdentifierStripped.equals("cod") || javaIdentifierStripped.equals("salmon");
     }
 }

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/PandaEntity.java
Patch:
@@ -83,7 +83,7 @@ public void setPandaFlags(EntityMetadata<Byte> entityMetadata) {
     }
 
     @Override
-    public boolean canEat(GeyserSession session, String javaIdentifierStripped, ItemMapping mapping) {
+    public boolean canEat(String javaIdentifierStripped, ItemMapping mapping) {
         return javaIdentifierStripped.equals("bamboo");
     }
 

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/PigEntity.java
Patch:
@@ -39,7 +39,7 @@ public PigEntity(GeyserSession session, long entityId, long geyserId, UUID uuid,
     }
 
     @Override
-    public boolean canEat(GeyserSession session, String javaIdentifierStripped, ItemMapping mapping) {
+    public boolean canEat(String javaIdentifierStripped, ItemMapping mapping) {
         return javaIdentifierStripped.equals("carrot") || javaIdentifierStripped.equals("potato") || javaIdentifierStripped.equals("beetroot");
     }
 }

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/PolarBearEntity.java
Patch:
@@ -39,7 +39,7 @@ public PolarBearEntity(GeyserSession session, long entityId, long geyserId, UUID
     }
 
     @Override
-    public boolean canEat(GeyserSession session, String javaIdentifierStripped, ItemMapping mapping) {
+    public boolean canEat(String javaIdentifierStripped, ItemMapping mapping) {
         return false;
     }
 }

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/RabbitEntity.java
Patch:
@@ -72,7 +72,7 @@ protected float getBabySize() {
     }
 
     @Override
-    public boolean canEat(GeyserSession session, String javaIdentifierStripped, ItemMapping mapping) {
+    public boolean canEat(String javaIdentifierStripped, ItemMapping mapping) {
         return javaIdentifierStripped.equals("dandelion") || javaIdentifierStripped.equals("carrot") || javaIdentifierStripped.equals("golden_carrot");
     }
 }
\ No newline at end of file

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/StriderEntity.java
Patch:
@@ -93,7 +93,7 @@ protected boolean isShaking() {
     }
 
     @Override
-    public boolean canEat(GeyserSession session, String javaIdentifierStripped, ItemMapping mapping) {
+    public boolean canEat(String javaIdentifierStripped, ItemMapping mapping) {
         return javaIdentifierStripped.equals("warped_fungus");
     }
 }

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/TurtleEntity.java
Patch:
@@ -50,7 +50,7 @@ public void setLayingEgg(EntityMetadata<Boolean> entityMetadata) {
     }
 
     @Override
-    public boolean canEat(GeyserSession session, String javaIdentifierStripped, ItemMapping mapping) {
+    public boolean canEat(String javaIdentifierStripped, ItemMapping mapping) {
         return javaIdentifierStripped.equals("seagrass");
     }
 }

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/horse/AbstractHorseEntity.java
Patch:
@@ -120,7 +120,7 @@ public void setHorseFlags(EntityMetadata<Byte> entityMetadata) {
     }
 
     @Override
-    public boolean canEat(GeyserSession session, String javaIdentifierStripped, ItemMapping mapping) {
+    public boolean canEat(String javaIdentifierStripped, ItemMapping mapping) {
         return DONKEY_AND_HORSE_FOODS.contains(javaIdentifierStripped);
     }
 }

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/horse/LlamaEntity.java
Patch:
@@ -70,7 +70,7 @@ public void setCarpetedColor(EntityMetadata<Integer> entityMetadata) {
     }
 
     @Override
-    public boolean canEat(GeyserSession session, String javaIdentifierStripped, ItemMapping mapping) {
+    public boolean canEat(String javaIdentifierStripped, ItemMapping mapping) {
         return javaIdentifierStripped.equals("wheat") || javaIdentifierStripped.equals("hay_block");
     }
 }

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/tameable/CatEntity.java
Patch:
@@ -95,7 +95,7 @@ public void setCollarColor(EntityMetadata<Integer> entityMetadata) {
     }
 
     @Override
-    public boolean canEat(GeyserSession session, String javaIdentifierStripped, ItemMapping mapping) {
+    public boolean canEat(String javaIdentifierStripped, ItemMapping mapping) {
         return javaIdentifierStripped.equals("cod") || javaIdentifierStripped.equals("salmon");
     }
 }

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/tameable/ParrotEntity.java
Patch:
@@ -39,7 +39,7 @@ public ParrotEntity(GeyserSession session, long entityId, long geyserId, UUID uu
     }
 
     @Override
-    public boolean canEat(GeyserSession session, String javaIdentifierStripped, ItemMapping mapping) {
+    public boolean canEat(String javaIdentifierStripped, ItemMapping mapping) {
         return javaIdentifierStripped.contains("seeds") || javaIdentifierStripped.equals("cookie");
     }
 }

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/tameable/WolfEntity.java
Patch:
@@ -56,7 +56,7 @@ public WolfEntity(GeyserSession session, long entityId, long geyserId, UUID uuid
 
     @Override
     public void setTameableFlags(EntityMetadata<Byte> entityMetadata) {
-        super.setFlags(entityMetadata);
+        super.setTameableFlags(entityMetadata);
         // Reset wolf color
         byte xd = ((ByteEntityMetadata) entityMetadata).getPrimitiveValue();
         boolean angry = (xd & 0x02) == 0x02;
@@ -87,8 +87,8 @@ public void setWolfAngerTime(EntityMetadata<Integer> entityMetadata) {
     }
 
     @Override
-    public boolean canEat(GeyserSession session, String javaIdentifierStripped, ItemMapping mapping) {
+    public boolean canEat(String javaIdentifierStripped, ItemMapping mapping) {
         // Cannot be a baby to eat these foods
-        return WOLF_FOODS.contains(javaIdentifierStripped) && !getFlag(EntityFlag.BABY);
+        return WOLF_FOODS.contains(javaIdentifierStripped) && !isBaby();
     }
 }

File: connector/src/main/java/org/geysermc/connector/entity/living/monster/EnderDragonEntity.java
Patch:
@@ -29,7 +29,6 @@
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.type.IntEntityMetadata;
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.data.LevelEventType;
-import com.nukkitx.protocol.bedrock.data.entity.EntityData;
 import com.nukkitx.protocol.bedrock.data.entity.EntityEventType;
 import com.nukkitx.protocol.bedrock.data.entity.EntityFlag;
 import com.nukkitx.protocol.bedrock.packet.*;
@@ -237,7 +236,7 @@ private void effectTick() {
 
             phaseTicks++;
             if (phase == 3) { // Landing Phase
-                float headHeight = head.getDirtyMetadata().getFloat(EntityData.BOUNDING_BOX_HEIGHT); //TODO
+                float headHeight = head.getBoundingBoxHeight();
                 Vector3f headCenter = head.getPosition().up(headHeight * 0.5f);
 
                 for (int i = 0; i < 8; i++) {

File: connector/src/main/java/org/geysermc/connector/entity/living/monster/raid/SpellcasterIllagerEntity.java
Patch:
@@ -44,7 +44,7 @@ public class SpellcasterIllagerEntity extends AbstractIllagerEntity {
     public SpellcasterIllagerEntity(GeyserSession session, long entityId, long geyserId, UUID uuid, EntityDefinition<?> definition, Vector3f position, Vector3f motion, float yaw, float pitch, float headYaw) {
         super(session, entityId, geyserId, uuid, definition, position, motion, yaw, pitch, headYaw);
         // OptionalPack usage
-        dirtyMetadata.getFlags().setFlag(EntityFlag.BRIBED, this.definition == EntityDefinitions.ILLUSIONER);
+        setFlag(EntityFlag.BRIBED, this.definition == EntityDefinitions.ILLUSIONER);
     }
 
     public void setSpellType(EntityMetadata<Byte> entityMetadata) {

File: connector/src/main/java/org/geysermc/connector/entity/player/SkullPlayerEntity.java
Patch:
@@ -83,10 +83,9 @@ public void spawnEntity() {
         addPlayerPacket.getAdventureSettings().setPlayerPermission(PlayerPermission.MEMBER);
         addPlayerPacket.setDeviceId("");
         addPlayerPacket.setPlatformChatId("");
-        addPlayerPacket.getMetadata().putAll(dirtyMetadata);
         addPlayerPacket.getMetadata().putFlags(flags);
+        dirtyMetadata.apply(addPlayerPacket.getMetadata());
 
-        dirtyMetadata.clear();
         setFlagsDirty(false);
 
         valid = true;

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -1072,7 +1072,7 @@ public AttributeData adjustSpeed() {
         AttributeData currentPlayerSpeed = playerEntity.getAttributes().get(GeyserAttributeType.MOVEMENT_SPEED);
         if (currentPlayerSpeed != null) {
             if ((pose.equals(Pose.SNEAKING) && !sneaking && collisionManager.isUnderSlab()) ||
-                    (!swimmingInWater && playerEntity.getDirtyMetadata().getFlags().getFlag(EntityFlag.SWIMMING) && !collisionManager.isPlayerInWater())) {
+                    (!swimmingInWater && playerEntity.getFlag(EntityFlag.SWIMMING) && !collisionManager.isPlayerInWater())) {
                 // Either of those conditions means that Bedrock goes zoom when they shouldn't be
                 AttributeData speedAttribute = GeyserAttributeType.MOVEMENT_SPEED.getAttribute(originalSpeedAttribute / 3.32f);
                 playerEntity.getAttributes().put(GeyserAttributeType.MOVEMENT_SPEED, speedAttribute);

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockAdventureSettingsTranslator.java
Patch:
@@ -50,7 +50,7 @@ public void translate(GeyserSession session, AdventureSettingsPacket packet) {
         ServerboundPlayerAbilitiesPacket abilitiesPacket = new ServerboundPlayerAbilitiesPacket(isFlying);
         session.sendDownstreamPacket(abilitiesPacket);
 
-        if (isFlying && session.getPlayerEntity().getDirtyMetadata().getFlags().getFlag(EntityFlag.SWIMMING)) {
+        if (isFlying && session.getPlayerEntity().getFlag(EntityFlag.SWIMMING)) {
             // Bedrock can fly and swim at the same time? Make sure that can't happen
             session.setSwimming(false);
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockPlayerInputTranslator.java
Patch:
@@ -28,7 +28,6 @@
 import com.github.steveice10.mc.protocol.packet.ingame.serverbound.level.ServerboundMoveVehiclePacket;
 import com.github.steveice10.mc.protocol.packet.ingame.serverbound.level.ServerboundPlayerInputPacket;
 import com.nukkitx.math.vector.Vector3f;
-import com.nukkitx.protocol.bedrock.data.entity.EntityData;
 import com.nukkitx.protocol.bedrock.packet.PlayerInputPacket;
 import org.geysermc.connector.entity.BoatEntity;
 import org.geysermc.connector.entity.Entity;
@@ -65,8 +64,7 @@ public void translate(GeyserSession session, PlayerInputPacket packet) {
                 sendMovement = true;
             } else {
                 // Check if the player is the front rider
-                Vector3f seatPos = session.getPlayerEntity().getDirtyMetadata().getVector3f(EntityData.RIDER_SEAT_POSITION, null);
-                if (seatPos != null && seatPos.getX() > 0) {
+                if (session.getPlayerEntity().isRidingInFront()) {
                     sendMovement = true;
                 }
             }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/entity/player/BedrockActionTranslator.java
Patch:
@@ -116,7 +116,7 @@ public void translate(GeyserSession session, PlayerActionPacket packet) {
                         useItemPacket = new ServerboundUseItemPacket(Hand.OFF_HAND);
                     }
                     session.sendDownstreamPacket(useItemPacket);
-                    session.getPlayerEntity().getDirtyMetadata().getFlags().setFlag(EntityFlag.BLOCKING, true);
+                    session.getPlayerEntity().setFlag(EntityFlag.BLOCKING, true);
                     // metadata will be updated when sneaking
                 }
 
@@ -127,10 +127,10 @@ public void translate(GeyserSession session, PlayerActionPacket packet) {
                 session.sendDownstreamPacket(stopSneakPacket);
 
                 // Stop shield, if necessary
-                if (session.getPlayerEntity().getDirtyMetadata().getFlags().getFlag(EntityFlag.BLOCKING)) {
+                if (session.getPlayerEntity().getFlag(EntityFlag.BLOCKING)) {
                     ServerboundPlayerActionPacket releaseItemPacket = new ServerboundPlayerActionPacket(PlayerAction.RELEASE_USE_ITEM, BlockUtils.POSITION_ZERO, Direction.DOWN);
                     session.sendDownstreamPacket(releaseItemPacket);
-                    session.getPlayerEntity().getDirtyMetadata().getFlags().setFlag(EntityFlag.BLOCKING, false);
+                    session.getPlayerEntity().setFlag(EntityFlag.BLOCKING, false);
                     // metadata will be updated when sneaking
                 }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/entity/player/BedrockInteractTranslator.java
Patch:
@@ -99,7 +99,7 @@ public void translate(GeyserSession session, InteractPacket packet) {
                 if (session.getOpenInventory() == null) {
                     Entity ridingEntity = session.getRidingVehicleEntity();
                     if (ridingEntity instanceof AbstractHorseEntity) {
-                        if (ridingEntity.getDirtyMetadata().getFlags().getFlag(EntityFlag.TAMED)) {
+                        if (ridingEntity.getFlag(EntityFlag.TAMED)) {
                             // We should request to open the horse inventory instead
                             ServerboundPlayerCommandPacket openHorseWindowPacket = new ServerboundPlayerCommandPacket((int) session.getPlayerEntity().getEntityId(), PlayerState.OPEN_HORSE_INVENTORY);
                             session.sendDownstreamPacket(openHorseWindowPacket);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaCommandsTranslator.java
Patch:
@@ -220,7 +220,7 @@ private static Object mapCommandType(GeyserSession session, CommandParser parser
             case BLOCK_STATE -> BlockRegistries.JAVA_TO_BEDROCK_IDENTIFIERS.get().keySet().toArray(new String[0]);
             case ITEM_STACK -> session.getItemMappings().getItemNames();
             case ITEM_ENCHANTMENT -> Enchantment.JavaEnchantment.ALL_JAVA_IDENTIFIERS;
-            case ENTITY_SUMMON -> Registries.JAVA_ENTITY_IDENTIFIERS.get().keySet().toArray(new String[0]); //TODO add Marker
+            case ENTITY_SUMMON -> Registries.JAVA_ENTITY_IDENTIFIERS.get().keySet().toArray(new String[0]);
             case COLOR -> VALID_COLORS;
             case SCOREBOARD_SLOT -> VALID_SCOREBOARD_SLOTS;
             case MOB_EFFECT -> ALL_EFFECT_IDENTIFIERS;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/inventory/JavaHorseScreenOpenTranslator.java
Patch:
@@ -29,7 +29,6 @@
 import com.nukkitx.nbt.NbtMap;
 import com.nukkitx.nbt.NbtMapBuilder;
 import com.nukkitx.nbt.NbtType;
-import com.nukkitx.protocol.bedrock.data.entity.EntityData;
 import com.nukkitx.protocol.bedrock.data.inventory.ContainerType;
 import com.nukkitx.protocol.bedrock.packet.UpdateEquipPacket;
 import org.geysermc.connector.entity.Entity;
@@ -132,6 +131,6 @@ public void translate(GeyserSession session, ClientboundHorseScreenOpenPacket pa
         session.sendUpstreamPacket(updateEquipPacket);
 
         session.setInventoryTranslator(inventoryTranslator);
-        InventoryUtils.openInventory(session, new Container(entity.getDirtyMetadata().getString(EntityData.NAMETAG), packet.getContainerId(), packet.getNumberOfSlots(), null, session.getPlayerInventory()));
+        InventoryUtils.openInventory(session, new Container(entity.getNametag(), packet.getContainerId(), packet.getNumberOfSlots(), null, session.getPlayerInventory()));
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/sound/entity/MilkEntitySoundInteractionHandler.java
Patch:
@@ -43,7 +43,7 @@ public void handleInteraction(GeyserSession session, Vector3f position, Entity v
         if (!session.getPlayerInventory().getItemInHand().getMapping(session).getJavaIdentifier().equals("minecraft:bucket")) {
             return;
         }
-        if (value.getDirtyMetadata().getFlags().getFlag(EntityFlag.BABY)) {
+        if (value.getFlag(EntityFlag.BABY)) {
             return;
         }
 

File: connector/src/main/java/org/geysermc/connector/registry/populator/ItemRegistryPopulator.java
Patch:
@@ -226,6 +226,8 @@ public static void populate() {
                 if (javaIdentifier.equals("minecraft:sculk_sensor")) {
                     // TODO fix in mappings
                     mappingItem.setBedrockIdentifier("minecraft:sculk_sensor");
+                } else if (javaIdentifier.equals("minecraft:music_disc_otherside") && palette.getValue().protocolVersion() <= Bedrock_v471.V471_CODEC.getProtocolVersion()) {
+                    mappingItem.setBedrockIdentifier("minecraft:music_disc_pigstep");
                 }
 
                 if (usingFurnaceMinecart && javaIdentifier.equals("minecraft:furnace_minecart")) {
@@ -398,7 +400,7 @@ public static void populate() {
                             .count(1)
                             .blockRuntimeId(mapping.getBedrockBlockId())
                             .build());
-                } else if (javaIdentifier.startsWith("minecraft:music_disc_")) {
+                } else if (javaIdentifier.startsWith("minecraft:music_disc_") && !javaIdentifier.equals("minecraft:music_disc_otherside")) { // TODO TEMPORARY
                     // The Java record level event uses the item ID as the "key" to play the record
                     Registries.RECORDS.register(itemIndex, SoundEvent.valueOf("RECORD_" +
                             javaIdentifier.replace("minecraft:music_disc_", "").toUpperCase(Locale.ENGLISH)));

File: connector/src/main/java/org/geysermc/connector/utils/ChunkUtils.java
Patch:
@@ -152,7 +152,7 @@ public static void updateBlock(GeyserSession session, int blockState, Vector3i p
         ItemFrameEntity itemFrameEntity = ItemFrameEntity.getItemFrameEntity(session, position);
         if (itemFrameEntity != null) {
             if (blockState == JAVA_AIR_ID) { // Item frame is still present and no block overrides that; refresh it
-                itemFrameEntity.updateBlock();
+                itemFrameEntity.updateBlock(true);
                 // Still update the chunk cache with the new block
                 session.getChunkCache().updateBlock(position.getX(), position.getY(), position.getZ(), blockState);
                 return;

File: connector/src/main/java/org/geysermc/connector/utils/EffectUtils.java
Patch:
@@ -50,7 +50,7 @@ public static int getParticleId(GeyserSession session, @Nonnull ParticleType typ
             return -1;
         }
 
-        LevelEventType levelEventType = mapping.getLevelEventType();
+        LevelEventType levelEventType = mapping.levelEventType();
         if (levelEventType == null) {
             return -1;
         }

File: connector/src/main/java/org/geysermc/connector/utils/InteractiveTagManager.java
Patch:
@@ -86,7 +86,7 @@ public static void updateTag(GeyserSession session, Entity interactEntity) {
             // Holding a leash and the mob is leashable for sure
             // (Plugins can change this behavior so that's something to look into in the far far future)
             interactiveTag = InteractiveTag.LEASH;
-        } else if (interactEntity instanceof AnimalEntity && ((AnimalEntity) interactEntity).canEat(session, javaIdentifierStripped, mapping)) {
+        } else if (interactEntity instanceof AnimalEntity && ((AnimalEntity) interactEntity).canEat(javaIdentifierStripped, mapping)) {
             // This animal can be fed
             interactiveTag = InteractiveTag.FEED;
         } else {

File: connector/src/main/java/org/geysermc/connector/network/translators/item/StoredItemMappings.java
Patch:
@@ -43,6 +43,7 @@ public class StoredItemMappings {
     private final ItemMapping barrier;
     private final ItemMapping compass;
     private final ItemMapping crossbow;
+    private final ItemMapping enchantedBook;
     private final ItemMapping fishingRod;
     private final ItemMapping lodestoneCompass;
     private final ItemMapping milkBucket;
@@ -58,6 +59,7 @@ public StoredItemMappings(Map<String, ItemMapping> itemMappings) {
         this.barrier = load(itemMappings, "barrier");
         this.compass = load(itemMappings, "compass");
         this.crossbow = load(itemMappings, "crossbow");
+        this.enchantedBook = load(itemMappings, "enchanted_book");
         this.fishingRod = load(itemMappings, "fishing_rod");
         this.lodestoneCompass = load(itemMappings, "lodestone_compass");
         this.milkBucket = load(itemMappings, "milk_bucket");

File: connector/src/main/java/org/geysermc/connector/network/translators/java/level/JavaBlockEntityDataTranslator.java
Patch:
@@ -61,7 +61,7 @@ public void translate(GeyserSession session, ClientboundBlockEntityDataPacket pa
                 packet.getNbt(), blockState), packet.getPosition());
         // Check for custom skulls.
         if (session.getPreferencesCache().showCustomSkulls() && packet.getNbt() != null && packet.getNbt().contains("SkullOwner")) {
-            SkullBlockEntityTranslator.spawnPlayer(session, packet.getNbt(), blockState);
+            SkullBlockEntityTranslator.spawnPlayer(session, packet.getNbt(), position.getX(), position.getY(), position.getZ(), blockState);
         }
 
         // If block entity is command block, OP permission level is appropriate, player is in creative mode and the NBT is not empty

File: connector/src/main/java/org/geysermc/connector/registry/populator/ItemRegistryPopulator.java
Patch:
@@ -172,6 +172,9 @@ public static void populate() {
                 if (identifier.equals("minecraft:sculk_sensor") && !GeyserConnector.getInstance().getConfig().isExtendedWorldHeight()) {
                     // https://github.com/GeyserMC/Geyser/issues/2564
                     continue;
+                } else if (identifier.equals("minecraft:debug_stick")) {
+                    // Just shows an empty texture; either way it doesn't exist in the creative menu on Java
+                    continue;
                 }
                 StartGamePacket.ItemEntry entry = entries.get(identifier);
                 int id = -1;

File: connector/src/main/java/org/geysermc/connector/command/CommandExecutor.java
Patch:
@@ -29,6 +29,7 @@
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.network.session.GeyserSession;
 
+import javax.annotation.Nullable;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -46,6 +47,7 @@ public GeyserCommand getCommand(String label) {
         return connector.getCommandManager().getCommands().get(label);
     }
 
+    @Nullable
     public GeyserSession getGeyserSession(CommandSender sender) {
         if (sender.isConsole()) {
             return null;

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/command/GeyserSpigotCommandExecutor.java
Patch:
@@ -35,8 +35,8 @@
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.utils.LanguageUtils;
 
-import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 
 public class GeyserSpigotCommandExecutor extends CommandExecutor implements TabExecutor {
@@ -78,8 +78,8 @@ public boolean onCommand(CommandSender sender, Command command, String label, St
     @Override
     public List<String> onTabComplete(CommandSender sender, Command command, String label, String[] args) {
         if (args.length == 1) {
-            return connector.getCommandManager().getCommandNames();
+            return tabComplete(new SpigotCommandSender(sender));
         }
-        return new ArrayList<>();
+        return Collections.emptyList();
     }
 }

File: bootstrap/sponge/src/main/java/org/geysermc/platform/sponge/command/GeyserSpongeCommandExecutor.java
Patch:
@@ -40,8 +40,8 @@
 import org.spongepowered.api.world.World;
 
 import javax.annotation.Nullable;
-import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 import java.util.Optional;
 
@@ -82,9 +82,9 @@ public CommandResult process(CommandSource source, String arguments) {
     @Override
     public List<String> getSuggestions(CommandSource source, String arguments, @Nullable Location<World> targetPosition) {
         if (arguments.split(" ").length == 1) {
-            return connector.getCommandManager().getCommandNames();
+            return tabComplete(new SpongeCommandSender(source));
         }
-        return new ArrayList<>();
+        return Collections.emptyList();
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -1381,7 +1381,8 @@ public void sendGameRule(String gameRule, Object value) {
      * @param permission The permission node to check
      * @return true if the player has the requested permission, false if not
      */
-    public Boolean hasPermission(String permission) {
+    @Override
+    public boolean hasPermission(String permission) {
         return connector.getWorldManager().hasPermission(this, permission);
     }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/item/translators/nbt/BasicItemTranslator.java
Patch:
@@ -56,10 +56,10 @@ public void translateToBedrock(GeyserSession session, CompoundTag itemTag, ItemM
             return;
         }
 
-        ListTag loreTag = displayTag.get("Lore");
-        if (loreTag != null) {
+        Tag loreTag = displayTag.get("Lore");
+        if (loreTag instanceof ListTag listTag) {
             List<Tag> lore = new ArrayList<>();
-            for (Tag tag : loreTag.getValue()) {
+            for (Tag tag : listTag.getValue()) {
                 if (!(tag instanceof StringTag)) continue;
                 lore.add(new StringTag("", MessageTranslator.convertMessageLenient(((StringTag) tag).getValue(), session.getLocale())));
             }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/title/JavaSetTitleTextTranslator.java
Patch:
@@ -38,7 +38,7 @@ public class JavaSetTitleTextTranslator extends PacketTranslator<ServerSetTitleT
     @Override
     public void translate(GeyserSession session, ServerSetTitleTextPacket packet) {
         String text;
-        if (packet.getText() == null) { //TODO 1.17 can this happen?
+        if (packet.getText() == null) { // This can happen, see https://github.com/KyoriPowered/adventure/issues/447
             text = " ";
         } else {
             text = MessageTranslator.convertMessage(packet.getText(), session.getLocale());

File: connector/src/main/java/org/geysermc/connector/network/translators/item/translators/BannerTranslator.java
Patch:
@@ -145,7 +145,7 @@ public static ListTag convertBannerPattern(List<NbtMap> patterns) {
     /**
      * Convert the Bedrock edition banner pattern nbt to Java edition
      *
-     * @param pattern Bedorck edition pattern nbt
+     * @param pattern Bedrock edition pattern nbt
      * @return The Java edition format pattern nbt
      */
     public static CompoundTag getJavaBannerPattern(NbtMap pattern) {

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -133,7 +133,7 @@ public enum EntityType {
     WITHER_SKULL(WitherSkullEntity.class, 89, 0.3125f),
     BOAT(BoatEntity.class, 90, 0.6f, 1.6f, 1.6f, 0.35f),
     WITHER_SKULL_DANGEROUS(WitherSkullEntity.class, 91, 0f),
-    LIGHTNING_BOLT(Entity.class, 93, 0f),
+    LIGHTNING_BOLT(LightningEntity.class, 93, 0f),
     SMALL_FIREBALL(ItemedFireballEntity.class, 94, 0.3125f),
     AREA_EFFECT_CLOUD(AreaEffectCloudEntity.class, 95, 0.5f, 1.0f),
     MINECART_HOPPER(MinecartEntity.class, 96, 0.7f, 0.98f, 0.98f, 0.35f, "minecraft:hopper_minecart"),

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -41,6 +41,7 @@
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Locale;
 
 @Getter
 public enum EntityType {
@@ -194,7 +195,7 @@ public enum EntityType {
             if (type == AGENT || type == BALLOON || type == CHALKBOARD || type == NPC || type == TRIPOD_CAMERA || type == ENDER_DRAGON_PART) {
                 continue;
             }
-            allJavaIdentifiers.add("minecraft:" + type.name().toLowerCase());
+            allJavaIdentifiers.add("minecraft:" + type.name().toLowerCase(Locale.ROOT));
         }
         ALL_JAVA_IDENTIFIERS = allJavaIdentifiers.toArray(new String[0]);
     }

File: connector/src/main/java/org/geysermc/connector/registry/populator/BlockRegistryPopulator.java
Patch:
@@ -299,9 +299,8 @@ private static void registerJavaBlocks() {
             BlockRegistries.JAVA_BLOCKS.register(javaRuntimeId, builder.build());
 
             // Keeping this here since this is currently unchanged between versions
-            if (!cleanJavaIdentifier.equals(bedrockIdentifier)) {
-                BlockRegistries.JAVA_TO_BEDROCK_IDENTIFIERS.register(cleanJavaIdentifier.intern(), bedrockIdentifier.intern());
-            }
+            // It's possible to only have this store differences in names, but the key set of all Java names is used in sending command suggestions
+            BlockRegistries.JAVA_TO_BEDROCK_IDENTIFIERS.register(cleanJavaIdentifier.intern(), bedrockIdentifier.intern());
 
             if (javaId.startsWith("minecraft:bell[")) {
                 bellBlockId = uniqueJavaId;

File: connector/src/main/java/org/geysermc/connector/registry/populator/ItemRegistryPopulator.java
Patch:
@@ -406,7 +406,7 @@ public static void populate() {
                 } else if (javaIdentifier.startsWith("minecraft:music_disc_")) {
                     // The Java record level event uses the item ID as the "key" to play the record
                     Registries.RECORDS.register(itemIndex, SoundEvent.valueOf("RECORD_" +
-                            javaIdentifier.replace("minecraft:music_disc_", "").toUpperCase(Locale.ENGLISH).intern()));
+                            javaIdentifier.replace("minecraft:music_disc_", "").toUpperCase(Locale.ENGLISH)));
                 } else if (javaIdentifier.endsWith("_spawn_egg")) {
                     spawnEggs.add(mapping.getBedrockId());
                 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityMetadataTranslator.java
Patch:
@@ -25,13 +25,12 @@
 
 package org.geysermc.connector.network.translators.java.entity;
 
+import com.github.steveice10.mc.protocol.data.game.entity.metadata.EntityMetadata;
+import com.github.steveice10.mc.protocol.packet.ingame.server.entity.ServerEntityMetadataPacket;
 import org.geysermc.connector.entity.Entity;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;
-
-import com.github.steveice10.mc.protocol.data.game.entity.metadata.EntityMetadata;
-import com.github.steveice10.mc.protocol.packet.ingame.server.entity.ServerEntityMetadataPacket;
 import org.geysermc.connector.utils.InteractiveTagManager;
 import org.geysermc.connector.utils.LanguageUtils;
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaJoinGameTranslator.java
Patch:
@@ -114,6 +114,6 @@ public void translate(GeyserSession session, ServerJoinGamePacket packet) {
             DimensionUtils.switchDimension(session, newDimension);
         }
 
-        ChunkUtils.applyDimensionHeight(session, packet.getDimension());
+        ChunkUtils.loadDimensionTag(session, packet.getDimension());
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaRespawnTranslator.java
Patch:
@@ -90,6 +90,6 @@ public void translate(GeyserSession session, ServerRespawnPacket packet) {
             DimensionUtils.switchDimension(session, newDimension);
         }
 
-        ChunkUtils.applyDimensionHeight(session, packet.getDimension());
+        ChunkUtils.loadDimensionTag(session, packet.getDimension());
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/border/JavaInitializeBorderTranslator.java
Patch:
@@ -26,7 +26,7 @@
 package org.geysermc.connector.network.translators.java.world.border;
 
 import com.github.steveice10.mc.protocol.packet.ingame.server.world.border.ServerInitializeBorderPacket;
-import com.nukkitx.math.vector.Vector2f;
+import com.nukkitx.math.vector.Vector2d;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.session.cache.WorldBorder;
 import org.geysermc.connector.network.translators.PacketTranslator;
@@ -38,13 +38,14 @@ public class JavaInitializeBorderTranslator extends PacketTranslator<ServerIniti
     @Override
     public void translate(GeyserSession session, ServerInitializeBorderPacket packet) {
         WorldBorder worldBorder = session.getWorldBorder();
-        worldBorder.setCenter(Vector2f.from(packet.getNewCenterX(), packet.getNewCenterZ()));
+        worldBorder.setCenter(Vector2d.from(packet.getNewCenterX(), packet.getNewCenterZ()));
         worldBorder.setOldDiameter(packet.getOldSize());
         worldBorder.setNewDiameter(packet.getNewSize());
         worldBorder.setSpeed(packet.getLerpTime());
         worldBorder.setWarningDelay(packet.getWarningTime());
         worldBorder.setWarningBlocks(packet.getWarningBlocks());
         worldBorder.setResizing(packet.getLerpTime() > 0);
+        worldBorder.setAbsoluteMaxSize(packet.getNewAbsoluteMaxSize());
 
         worldBorder.update();
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/border/JavaSetBorderCenterTranslator.java
Patch:
@@ -26,19 +26,19 @@
 package org.geysermc.connector.network.translators.java.world.border;
 
 import com.github.steveice10.mc.protocol.packet.ingame.server.world.border.ServerSetBorderCenterPacket;
-import com.nukkitx.math.vector.Vector2f;
+import com.nukkitx.math.vector.Vector2d;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.session.cache.WorldBorder;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;
 
 @Translator(packet = ServerSetBorderCenterPacket.class)
-public class JavaSetBorderCenterPacket extends PacketTranslator<ServerSetBorderCenterPacket> {
+public class JavaSetBorderCenterTranslator extends PacketTranslator<ServerSetBorderCenterPacket> {
 
     @Override
     public void translate(GeyserSession session, ServerSetBorderCenterPacket packet) {
         WorldBorder worldBorder = session.getWorldBorder();
-        worldBorder.setCenter(Vector2f.from(packet.getNewCenterX(), packet.getNewCenterZ()));
+        worldBorder.setCenter(Vector2d.from(packet.getNewCenterX(), packet.getNewCenterZ()));
 
         worldBorder.update();
     }

File: bootstrap/fabric/src/main/java/org/geysermc/platform/fabric/GeyserFabricConfiguration.java
Patch:
@@ -32,17 +32,16 @@
 import org.geysermc.connector.configuration.GeyserJacksonConfiguration;
 
 import java.nio.file.Path;
-import java.util.Optional;
 
 public class GeyserFabricConfiguration extends GeyserJacksonConfiguration {
     @JsonIgnore
     private Path floodgateKeyPath;
 
     public void loadFloodgate(GeyserFabricMod geyser, ModContainer floodgate) {
         Path geyserDataFolder = geyser.getConfigFolder();
-        Path floodgateDataFolder = FabricLoader.getInstance().getConfigDir().resolve("floodgate");
+        Path floodgateDataFolder = floodgate != null ? FabricLoader.getInstance().getConfigDir().resolve("floodgate") : null;
 
-        floodgateKeyPath = FloodgateKeyLoader.getKeyPath(this, floodgate, floodgateDataFolder, geyserDataFolder, geyser.getGeyserLogger());
+        floodgateKeyPath = FloodgateKeyLoader.getKeyPath(this, floodgateDataFolder, geyserDataFolder, geyser.getGeyserLogger());
     }
 
     @Override

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/GeyserSpigotPlugin.java
Patch:
@@ -42,6 +42,7 @@
 import org.geysermc.connector.network.translators.world.WorldManager;
 import org.geysermc.connector.ping.GeyserLegacyPingPassthrough;
 import org.geysermc.connector.ping.IGeyserPingPassthrough;
+import org.geysermc.connector.utils.Constants;
 import org.geysermc.connector.utils.FileUtils;
 import org.geysermc.connector.utils.LanguageUtils;
 import org.geysermc.geyser.adapters.spigot.SpigotAdapters;
@@ -126,7 +127,7 @@ public void onEnable() {
 
         // Remove this in like a year
         if (Bukkit.getPluginManager().getPlugin("floodgate-bukkit") != null) {
-            geyserLogger.severe(LanguageUtils.getLocaleStringLog("geyser.bootstrap.floodgate.outdated", "https://ci.opencollab.dev/job/GeyserMC/job/Floodgate/job/master/"));
+            geyserLogger.severe(LanguageUtils.getLocaleStringLog("geyser.bootstrap.floodgate.outdated", Constants.FLOODGATE_DOWNLOAD_LOCATION));
             this.getPluginLoader().disablePlugin(this);
             return;
         }

File: connector/src/main/java/org/geysermc/connector/utils/Constants.java
Patch:
@@ -35,6 +35,8 @@ public final class Constants {
     public static final String NEWS_OVERVIEW_URL = "https://api.geysermc.org/v1/news";
     public static final String NEWS_PROJECT_NAME = "geyser";
 
+    public static final String FLOODGATE_DOWNLOAD_LOCATION = "https://ci.opencollab.dev/job/GeyserMC/job/Floodgate/job/master/";
+
     static {
         URI wsUri = null;
         try {

File: bootstrap/bungeecord/src/main/java/org/geysermc/platform/bungeecord/GeyserBungeeConfiguration.java
Patch:
@@ -45,6 +45,6 @@ public void loadFloodgate(GeyserBungeePlugin plugin) {
         Path geyserDataFolder = plugin.getDataFolder().toPath();
         Path floodgateDataFolder = floodgate != null ? floodgate.getDataFolder().toPath() : null;
 
-        floodgateKeyPath = FloodgateKeyLoader.getKeyPath(this, floodgate, floodgateDataFolder, geyserDataFolder, plugin.getGeyserLogger());
+        floodgateKeyPath = FloodgateKeyLoader.getKeyPath(this, floodgateDataFolder, geyserDataFolder, plugin.getGeyserLogger());
     }
 }

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/GeyserSpigotConfiguration.java
Patch:
@@ -46,6 +46,6 @@ public void loadFloodgate(GeyserSpigotPlugin plugin) {
         Path geyserDataFolder = plugin.getDataFolder().toPath();
         Path floodgateDataFolder = floodgate != null ? floodgate.getDataFolder().toPath() : null;
 
-        floodgateKeyPath = FloodgateKeyLoader.getKeyPath(this, floodgate, floodgateDataFolder, geyserDataFolder, plugin.getGeyserLogger());
+        floodgateKeyPath = FloodgateKeyLoader.getKeyPath(this, floodgateDataFolder, geyserDataFolder, plugin.getGeyserLogger());
     }
 }

File: connector/src/main/java/org/geysermc/connector/entity/player/PlayerEntity.java
Patch:
@@ -355,7 +355,9 @@ public void setBelowNameText(GeyserSession session, Objective objective) {
                 session.sendUpstreamPacket(packet);
             }
         } else {
-            if (valid && metadata.remove(EntityData.SCORE_TAG) != null) {
+            // Always remove the score tag first, then check for valid.
+            // That way the score tag is removed if the player was spawned, then despawned, and is being respawned
+            if (metadata.remove(EntityData.SCORE_TAG) != null && valid) {
                 SetEntityDataPacket packet = new SetEntityDataPacket();
                 packet.setRuntimeEntityId(geyserId);
                 packet.getMetadata().put(EntityData.SCORE_TAG, "");

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -53,6 +53,7 @@
 import org.geysermc.connector.network.translators.item.ItemTranslator;
 import org.geysermc.connector.network.translators.world.WorldManager;
 import org.geysermc.connector.network.translators.world.block.entity.SkullBlockEntityTranslator;
+import org.geysermc.connector.scoreboard.ScoreboardUpdater;
 import org.geysermc.connector.skin.FloodgateSkinUploader;
 import org.geysermc.connector.utils.*;
 import org.geysermc.floodgate.crypto.AesCipher;
@@ -155,6 +156,7 @@ private GeyserConnector(PlatformType platformType, GeyserBootstrap bootstrap) {
         ItemTranslator.init();
         MessageTranslator.init();
         LocaleUtils.init();
+        ScoreboardUpdater.init();
 
         ResourcePack.loadPacks();
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/scoreboard/JavaDisplayScoreboardTranslator.java
Patch:
@@ -25,12 +25,11 @@
 
 package org.geysermc.connector.network.translators.java.scoreboard;
 
+import com.github.steveice10.mc.protocol.packet.ingame.server.scoreboard.ServerDisplayScoreboardPacket;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;
 
-import com.github.steveice10.mc.protocol.packet.ingame.server.scoreboard.ServerDisplayScoreboardPacket;
-
 @Translator(packet = ServerDisplayScoreboardPacket.class)
 public class JavaDisplayScoreboardTranslator extends PacketTranslator<ServerDisplayScoreboardPacket> {
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/scoreboard/JavaUpdateScoreTranslator.java
Patch:
@@ -66,7 +66,7 @@ public void translate(GeyserSession session, ServerUpdateScorePacket packet) {
                 if (objective != null) {
                     objective.removeScore(packet.getEntry());
                 } else {
-                    for (Objective objective1 : scoreboard.getObjectives().values()) {
+                    for (Objective objective1 : scoreboard.getObjectives()) {
                         objective1.removeScore(packet.getEntry());
                     }
                 }

File: connector/src/main/java/org/geysermc/connector/network/translators/collision/translators/DirtPathCollision.java
Patch:
@@ -40,10 +40,10 @@ public DirtPathCollision(String params, BoundingBox[] defaultBoxes) {
     // Needs to run before the main correction code or it can move the player into blocks
     // This is counteracted by the main collision code pushing them out
     @Override
-    public void beforeCorrectPosition(BoundingBox playerCollision) {
+    public void beforeCorrectPosition(int x, int y, int z, BoundingBox playerCollision) {
         // In Bedrock, dirt paths are solid blocks, so the player must be pushed down.
         double playerMinY = playerCollision.getMiddleY() - (playerCollision.getSizeY() / 2);
-        double blockMaxY = position.get().getY() + 1;
+        double blockMaxY = y + 1;
         if (Math.abs(blockMaxY - playerMinY) <= CollisionManager.COLLISION_TOLERANCE) {
             playerCollision.translate(0, -0.0625, 0);
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/collision/translators/ScaffoldingCollision.java
Patch:
@@ -41,12 +41,12 @@ public ScaffoldingCollision(String params, BoundingBox[] defaultBoxes) {
     }
 
     @Override
-    public boolean correctPosition(GeyserSession session, BoundingBox playerCollision) {
+    public boolean correctPosition(GeyserSession session, int x, int y, int z, BoundingBox playerCollision) {
         // Hack to not check below the player
         playerCollision.setSizeY(playerCollision.getSizeY() - 0.001);
         playerCollision.setMiddleY(playerCollision.getMiddleY() + 0.002);
 
-        boolean intersected = this.checkIntersection(playerCollision);
+        boolean intersected = this.checkIntersection(x, y, z, playerCollision);
 
         playerCollision.setSizeY(playerCollision.getSizeY() + 0.001);
         playerCollision.setMiddleY(playerCollision.getMiddleY() - 0.002);
@@ -59,7 +59,7 @@ public boolean correctPosition(GeyserSession session, BoundingBox playerCollisio
             playerCollision.setSizeY(playerCollision.getSizeY() + 0.001);
             playerCollision.setMiddleY(playerCollision.getMiddleY() - 0.002);
 
-            if (this.checkIntersection(playerCollision)) {
+            if (this.checkIntersection(x, y, z, playerCollision)) {
                 session.getCollisionManager().setOnScaffolding(true);
             }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaMapDataTranslator.java
Patch:
@@ -67,7 +67,7 @@ public void translate(GeyserSession session, ServerMapDataPacket packet) {
 
             int idx = 0;
             for (byte colorId : data.getData()) {
-                colors[idx++] = MapColor.fromId(colorId & 0xFF).toABGR();
+                colors[idx++] = MapColor.fromId(colorId & 0xFF).toARGB();
             }
 
             mapItemDataPacket.setColors(colors);

File: connector/src/main/java/org/geysermc/connector/registry/type/ItemMappings.java
Patch:
@@ -121,8 +121,9 @@ public ItemMapping getMapping(ItemData data) {
                     }
                 } else {
                     if (!(mapping.getBedrockData() == data.getDamage() ||
-                            // Make exceptions for potions and tipped arrows, whose damage values can vary
-                            (mapping.getJavaIdentifier().endsWith("potion") || mapping.getJavaIdentifier().equals("minecraft:arrow")))) {
+                            // Make exceptions for potions, tipped arrows, and firework stars, whose damage values can vary
+                            (mapping.getJavaIdentifier().endsWith("potion") || mapping.getJavaIdentifier().equals("minecraft:arrow")
+                                    || mapping.getJavaIdentifier().equals("minecraft:firework_star")))) {
                         continue;
                     }
                 }

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -929,7 +929,7 @@ protected void tick() {
             // Check to see if the player's position needs updating - a position update should be sent once every 3 seconds
             if (spawned && (System.currentTimeMillis() - lastMovementTimestamp) > 3000) {
                 // Recalculate in case something else changed position
-                Vector3d position = collisionManager.adjustBedrockPosition(playerEntity.getPosition(), playerEntity.isOnGround());
+                Vector3d position = collisionManager.adjustBedrockPosition(playerEntity.getPosition(), playerEntity.isOnGround(), false);
                 // A null return value cancels the packet
                 if (position != null) {
                     ClientPlayerPositionPacket packet = new ClientPlayerPositionPacket(playerEntity.isOnGround(),

File: connector/src/main/java/org/geysermc/connector/network/session/cache/PistonCache.java
Patch:
@@ -150,7 +150,7 @@ public void displacePlayer(Vector3d displacement) {
 
         Vector3d delta = totalDisplacement.sub(playerDisplacement);
         // Check if the piston is pushing a player into collision
-        delta = session.getCollisionManager().correctPlayerMovement(delta, true);
+        delta = session.getCollisionManager().correctPlayerMovement(delta, true, false);
 
         session.getCollisionManager().getPlayerBoundingBox().translate(delta.getX(), delta.getY(), delta.getZ());
 

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/entity/player/BedrockMovePlayerTranslator.java
Patch:
@@ -97,7 +97,7 @@ public void translate(GeyserSession session, MovePlayerPacket packet) {
             }
 
             if (isValidMove(session, packet.getMode(), entity.getPosition(), packet.getPosition())) {
-                Vector3d position = session.getCollisionManager().adjustBedrockPosition(packet.getPosition(), packet.isOnGround());
+                Vector3d position = session.getCollisionManager().adjustBedrockPosition(packet.getPosition(), packet.isOnGround(), packet.getMode() == MovePlayerPacket.Mode.TELEPORT);
                 if (position != null) { // A null return value cancels the packet
                     Packet movePacket;
                     if (rotationChanged) {

File: connector/src/main/java/org/geysermc/connector/network/translators/PacketTranslatorRegistry.java
Patch:
@@ -90,7 +90,7 @@ public <P extends T> boolean translate(Class<? extends P> clazz, P packet, Geyse
             PacketTranslator<P> translator = (PacketTranslator<P>) translators.get(clazz);
             if (translator != null) {
                 EventLoop eventLoop = session.getEventLoop();
-                if (eventLoop.inEventLoop()) {
+                if (!translator.shouldExecuteInEventLoop() || eventLoop.inEventLoop()) {
                     translate0(session, translator, packet);
                 } else {
                     eventLoop.execute(() -> translate0(session, translator, packet));

File: connector/src/main/java/org/geysermc/connector/utils/collections/LecternHasBookMap.java
Patch:
@@ -45,7 +45,7 @@ public void handleBlockChange(GeyserSession session, int blockState, Vector3i po
         WorldManager worldManager = session.getConnector().getWorldManager();
 
         int offset = blockState - this.start;
-        if (offset < 0 || offset > this.value.length) {
+        if (offset < 0 || offset >= this.value.length) {
             // Block state is out of bounds of this map - lectern has been destroyed, if it existed
             if (!worldManager.shouldExpectLecternHandled()) {
                 session.getLecternCache().remove(position);

File: connector/src/main/java/org/geysermc/connector/registry/BlockRegistries.java
Patch:
@@ -33,7 +33,7 @@
 import org.geysermc.connector.registry.populator.BlockRegistryPopulator;
 import org.geysermc.connector.registry.type.BlockMapping;
 import org.geysermc.connector.registry.type.BlockMappings;
-import org.geysermc.connector.utils.Object2IntBiMap;
+import org.geysermc.connector.utils.collections.Object2IntBiMap;
 
 /**
  * Holds all the block registries in Geyser.

File: connector/src/main/java/org/geysermc/connector/utils/DimensionUtils.java
Patch:
@@ -63,7 +63,9 @@ public static void switchDimension(GeyserSession session, String javaDimension)
         session.getChunkCache().clear();
         session.getEntityCache().removeAllEntities();
         session.getItemFrameCache().clear();
-        session.getLecternCache().clear();
+        if (session.getLecternCache() != null) {
+            session.getLecternCache().clear();
+        }
         session.getLodestoneCache().clear();
         session.getPistonCache().clear();
         session.getSkullCache().clear();

File: connector/src/main/java/org/geysermc/connector/utils/collections/Object2IntBiMap.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.utils;
+package org.geysermc.connector.utils.collections;
 
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -658,7 +658,8 @@ private void attemptCodeAuthentication(MsaAuthenticationService msaAuthenticatio
             connectDownstream();
         } catch (RequestException e) {
             if (!(e instanceof AuthPendingException)) {
-                throw new RuntimeException("Failed to log in with Microsoft code!", e);
+                connector.getLogger().error("Failed to log in with Microsoft code!", e);
+                disconnect(e.toString());
             } else {
                 // Wait one second before trying again
                 connector.getGeneralThreadPool().schedule(() -> attemptCodeAuthentication(msaAuthenticationService), 1, TimeUnit.SECONDS);

File: connector/src/main/java/org/geysermc/connector/network/UpstreamPacketHandler.java
Patch:
@@ -80,7 +80,7 @@ public boolean handle(LoginPacket loginPacket) {
         session.setBlockMappings(BlockRegistries.BLOCKS.forVersion(loginPacket.getProtocolVersion()));
         session.setItemMappings(Registries.ITEMS.forVersion(loginPacket.getProtocolVersion()));
 
-        LoginEncryptionUtils.encryptPlayerConnection(connector, session, loginPacket);
+        LoginEncryptionUtils.encryptPlayerConnection(session, loginPacket);
 
         PlayStatusPacket playStatus = new PlayStatusPacket();
         playStatus.setStatus(PlayStatusPacket.Status.LOGIN_SUCCESS);

File: connector/src/main/java/org/geysermc/connector/network/translators/PacketTranslator.java
Patch:
@@ -29,6 +29,6 @@
 
 public abstract class PacketTranslator<T> {
 
-    public abstract void translate(T packet, GeyserSession session);
+    public abstract void translate(GeyserSession session, T packet);
 
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/PacketTranslatorRegistry.java
Patch:
@@ -112,7 +112,7 @@ private <P extends T> void translate0(GeyserSession session, PacketTranslator<P>
         }
 
         try {
-            translator.translate(packet, session);
+            translator.translate(session, packet);
         } catch (Throwable ex) {
             GeyserConnector.getInstance().getLogger().error(LanguageUtils.getLocaleStringLog("geyser.network.translator.packet.failed", packet.getClass().getSimpleName()), ex);
             ex.printStackTrace();

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockAdventureSettingsTranslator.java
Patch:
@@ -38,7 +38,7 @@
 public class BedrockAdventureSettingsTranslator extends PacketTranslator<AdventureSettingsPacket> {
 
     @Override
-    public void translate(AdventureSettingsPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, AdventureSettingsPacket packet) {
         boolean isFlying = packet.getSettings().contains(AdventureSetting.FLYING);
         if (!isFlying && session.getGameMode() == GameMode.SPECTATOR) {
             // We should always be flying in spectator mode

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockAnimateTranslator.java
Patch:
@@ -39,7 +39,7 @@
 public class BedrockAnimateTranslator extends PacketTranslator<AnimatePacket> {
 
     @Override
-    public void translate(AnimatePacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, AnimatePacket packet) {
         // Stop the player sending animations before they have fully spawned into the server
         if (!session.isSpawned()) {
             return;

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockBlockEntityDataTranslator.java
Patch:
@@ -39,7 +39,7 @@
 public class BedrockBlockEntityDataTranslator extends PacketTranslator<BlockEntityDataPacket> {
 
     @Override
-    public void translate(BlockEntityDataPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, BlockEntityDataPacket packet) {
         NbtMap tag = packet.getData();
         if (tag.getString("id").equals("Sign")) {
             // This is the reason why this all works - Bedrock sends packets every time you update the sign, Java only wants the final packet

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockBlockPickRequestTranslator.java
Patch:
@@ -40,7 +40,7 @@
 public class BedrockBlockPickRequestTranslator extends PacketTranslator<BlockPickRequestPacket> {
 
     @Override
-    public void translate(BlockPickRequestPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, BlockPickRequestPacket packet) {
         Vector3i vector = packet.getBlockPosition();
         int blockToPick = session.getConnector().getWorldManager().getBlockAt(session, vector.getX(), vector.getY(), vector.getZ());
         

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockBookEditTranslator.java
Patch:
@@ -49,7 +49,7 @@ public class BedrockBookEditTranslator extends PacketTranslator<BookEditPacket>
     private static final int MAXIMUM_TITLE_LENGTH = 128 * 4;
 
     @Override
-    public void translate(BookEditPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, BookEditPacket packet) {
         if (packet.getText() != null && !packet.getText().isEmpty() && packet.getText().getBytes(StandardCharsets.UTF_8).length > MAXIMUM_PAGE_LENGTH) {
             session.getConnector().getLogger().warning("Page length greater than server allowed!");
             return;

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockCommandBlockUpdateTranslator.java
Patch:
@@ -38,7 +38,7 @@
 public class BedrockCommandBlockUpdateTranslator extends PacketTranslator<CommandBlockUpdatePacket> {
 
     @Override
-    public void translate(CommandBlockUpdatePacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, CommandBlockUpdatePacket packet) {
         String command = packet.getCommand();
         boolean outputTracked = packet.isOutputTracked();
         if (packet.isBlock()) {

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockCommandRequestTranslator.java
Patch:
@@ -40,7 +40,7 @@
 public class BedrockCommandRequestTranslator extends PacketTranslator<CommandRequestPacket> {
 
     @Override
-    public void translate(CommandRequestPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, CommandRequestPacket packet) {
         String command = packet.getCommand().replace("/", "");
         CommandManager commandManager = GeyserConnector.getInstance().getCommandManager();
         if (session.getConnector().getPlatformType() == PlatformType.STANDALONE && command.trim().startsWith("geyser ") && commandManager.getCommands().containsKey(command.split(" ")[1])) {

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockContainerCloseTranslator.java
Patch:
@@ -38,7 +38,7 @@
 public class BedrockContainerCloseTranslator extends PacketTranslator<ContainerClosePacket> {
 
     @Override
-    public void translate(ContainerClosePacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ContainerClosePacket packet) {
         byte windowId = packet.getId();
 
         //Client wants close confirmation

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockEmoteListTranslator.java
Patch:
@@ -35,7 +35,7 @@
 public class BedrockEmoteListTranslator extends PacketTranslator<EmoteListPacket> {
 
     @Override
-    public void translate(EmoteListPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, EmoteListPacket packet) {
         if (session.getConnector().getConfig().getEmoteOffhandWorkaround() == EmoteOffhandWorkaroundOption.NO_EMOTES) {
             return;
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockEntityPickRequestTranslator.java
Patch:
@@ -42,7 +42,7 @@
 public class BedrockEntityPickRequestTranslator extends PacketTranslator<EntityPickRequestPacket> {
 
     @Override
-    public void translate(EntityPickRequestPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, EntityPickRequestPacket packet) {
         if (session.getGameMode() != GameMode.CREATIVE) return; // Apparently Java behavior
         Entity entity = session.getEntityCache().getEntityByGeyserId(packet.getRuntimeEntityId());
         if (entity == null) return;

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockFilterTextTranslator.java
Patch:
@@ -41,7 +41,7 @@
 public class BedrockFilterTextTranslator extends PacketTranslator<FilterTextPacket> {
 
     @Override
-    public void translate(FilterTextPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, FilterTextPacket packet) {
         if (session.getOpenInventory() instanceof CartographyContainer) {
             // We don't want to be able to rename in the cartography table
             return;

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockInventoryTransactionTranslator.java
Patch:
@@ -70,7 +70,7 @@ public class BedrockInventoryTransactionTranslator extends PacketTranslator<Inve
     private static final float MAXIMUM_BLOCK_DESTROYING_DISTANCE = 36f;
 
     @Override
-    public void translate(InventoryTransactionPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, InventoryTransactionPacket packet) {
         // Send book updates before opening inventories
         session.getBookEditCache().checkForSend();
 

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockItemFrameDropItemTranslator.java
Patch:
@@ -44,7 +44,7 @@
 public class BedrockItemFrameDropItemTranslator extends PacketTranslator<ItemFrameDropItemPacket> {
 
     @Override
-    public void translate(ItemFrameDropItemPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ItemFrameDropItemPacket packet) {
         Entity entity = ItemFrameEntity.getItemFrameEntity(session, packet.getBlockPosition());
         if (entity != null) {
             ClientPlayerInteractEntityPacket interactPacket = new ClientPlayerInteractEntityPacket((int) entity.getEntityId(),

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockItemStackRequestTranslator.java
Patch:
@@ -39,7 +39,7 @@
 public class BedrockItemStackRequestTranslator extends PacketTranslator<ItemStackRequestPacket> {
 
     @Override
-    public void translate(ItemStackRequestPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ItemStackRequestPacket packet) {
         Inventory inventory = session.getOpenInventory();
         if (inventory == null)
             return;

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockLecternUpdateTranslator.java
Patch:
@@ -45,7 +45,7 @@
 public class BedrockLecternUpdateTranslator extends PacketTranslator<LecternUpdatePacket> {
 
     @Override
-    public void translate(LecternUpdatePacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, LecternUpdatePacket packet) {
         if (packet.isDroppingBook()) {
             // Bedrock drops the book outside of the GUI. Java drops it in the GUI
             // So, we enter the GUI and then drop it! :)

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockMapInfoRequestTranslator.java
Patch:
@@ -38,7 +38,7 @@
 public class BedrockMapInfoRequestTranslator extends PacketTranslator<MapInfoRequestPacket> {
 
     @Override
-    public void translate(MapInfoRequestPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, MapInfoRequestPacket packet) {
         long mapId = packet.getUniqueMapId();
 
         ClientboundMapItemDataPacket mapPacket = session.getStoredMaps().remove(mapId);

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockMobEquipmentTranslator.java
Patch:
@@ -42,7 +42,7 @@
 public class BedrockMobEquipmentTranslator extends PacketTranslator<MobEquipmentPacket> {
 
     @Override
-    public void translate(MobEquipmentPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, MobEquipmentPacket packet) {
         if (!session.isSpawned() || packet.getHotbarSlot() > 8 ||
                 packet.getContainerId() != ContainerId.INVENTORY || session.getPlayerInventory().getHeldItemSlot() == packet.getHotbarSlot()) {
             // For the last condition - Don't update the slot if the slot is the same - not Java Edition behavior and messes with plugins such as Grief Prevention

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockMoveEntityAbsoluteTranslator.java
Patch:
@@ -40,7 +40,7 @@
 public class BedrockMoveEntityAbsoluteTranslator extends PacketTranslator<MoveEntityAbsolutePacket> {
 
     @Override
-    public void translate(MoveEntityAbsolutePacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, MoveEntityAbsolutePacket packet) {
         session.setLastVehicleMoveTimestamp(System.currentTimeMillis());
 
         float y = packet.getPosition().getY();

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockNetworkStackLatencyTranslator.java
Patch:
@@ -45,7 +45,7 @@
 public class BedrockNetworkStackLatencyTranslator extends PacketTranslator<NetworkStackLatencyPacket> {
 
     @Override
-    public void translate(NetworkStackLatencyPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, NetworkStackLatencyPacket packet) {
         long pingId;
         // so apparently, as of 1.16.200
         // PS4 divides the network stack latency timestamp FOR US!!!

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockPacketViolationWarningTranslator.java
Patch:
@@ -34,7 +34,7 @@
 public class BedrockPacketViolationWarningTranslator extends PacketTranslator<PacketViolationWarningPacket> {
 
     @Override
-    public void translate(PacketViolationWarningPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, PacketViolationWarningPacket packet) {
         // Not translated since this is something that the developers need to know
         session.getConnector().getLogger().error("Packet violation warning sent from client! " + packet.toString());
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockPlayerInputTranslator.java
Patch:
@@ -46,7 +46,7 @@
 public class BedrockPlayerInputTranslator extends PacketTranslator<PlayerInputPacket> {
 
     @Override
-    public void translate(PlayerInputPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, PlayerInputPacket packet) {
         ClientSteerVehiclePacket clientSteerVehiclePacket = new ClientSteerVehiclePacket(
                 packet.getInputMotion().getX(), packet.getInputMotion().getY(), packet.isJumping(), packet.isSneaking()
         );

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockPositionTrackingDBClientRequestTranslator.java
Patch:
@@ -42,7 +42,7 @@
 public class BedrockPositionTrackingDBClientRequestTranslator extends PacketTranslator<PositionTrackingDBClientRequestPacket> {
 
     @Override
-    public void translate(PositionTrackingDBClientRequestPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, PositionTrackingDBClientRequestPacket packet) {
         PositionTrackingDBServerBroadcastPacket broadcastPacket = new PositionTrackingDBServerBroadcastPacket();
         broadcastPacket.setTrackingId(packet.getTrackingId());
 

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockRespawnTranslator.java
Patch:
@@ -40,7 +40,7 @@
 public class BedrockRespawnTranslator extends PacketTranslator<RespawnPacket> {
 
     @Override
-    public void translate(RespawnPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, RespawnPacket packet) {
         if (packet.getState() == RespawnPacket.State.CLIENT_READY) {
             // Previously we only sent the respawn packet before the server finished loading
             // The message included was 'Otherwise when immediate respawn is on the client never loads'

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockServerSettingsRequestTranslator.java
Patch:
@@ -38,7 +38,7 @@
 @Translator(packet = ServerSettingsRequestPacket.class)
 public class BedrockServerSettingsRequestTranslator extends PacketTranslator<ServerSettingsRequestPacket> {
     @Override
-    public void translate(ServerSettingsRequestPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerSettingsRequestPacket packet) {
         CustomForm window = SettingsUtils.buildForm(session);
         int windowId = session.getFormCache().addForm(window);
 

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockSetLocalPlayerAsInitializedTranslator.java
Patch:
@@ -37,7 +37,7 @@
 @Translator(packet = SetLocalPlayerAsInitializedPacket.class)
 public class BedrockSetLocalPlayerAsInitializedTranslator extends PacketTranslator<SetLocalPlayerAsInitializedPacket> {
     @Override
-    public void translate(SetLocalPlayerAsInitializedPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, SetLocalPlayerAsInitializedPacket packet) {
         if (session.getPlayerEntity().getGeyserId() == packet.getRuntimeEntityId()) {
             if (!session.getUpstream().isInitialized()) {
                 session.getUpstream().setInitialized(true);

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockShowCreditsTranslator.java
Patch:
@@ -37,7 +37,7 @@
 public class BedrockShowCreditsTranslator extends PacketTranslator<ShowCreditsPacket> {
 
     @Override
-    public void translate(ShowCreditsPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ShowCreditsPacket packet) {
         if (packet.getStatus() == ShowCreditsPacket.Status.END_CREDITS) {
             ClientRequestPacket javaRespawnPacket = new ClientRequestPacket(ClientRequest.RESPAWN);
             session.sendDownstreamPacket(javaRespawnPacket);

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockTextTranslator.java
Patch:
@@ -37,7 +37,7 @@
 public class BedrockTextTranslator extends PacketTranslator<TextPacket> {
 
     @Override
-    public void translate(TextPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, TextPacket packet) {
         String message = packet.getMessage();
 
         if (MessageTranslator.isTooLong(message, session)) {

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/entity/BedrockEntityEventTranslator.java
Patch:
@@ -43,7 +43,7 @@
 public class BedrockEntityEventTranslator extends PacketTranslator<EntityEventPacket> {
 
     @Override
-    public void translate(EntityEventPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, EntityEventPacket packet) {
         switch (packet.getType()) {
             case EATING_ITEM:
                 // Resend the packet so we get the eating sounds

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/entity/player/BedrockActionTranslator.java
Patch:
@@ -54,7 +54,7 @@
 public class BedrockActionTranslator extends PacketTranslator<PlayerActionPacket> {
 
     @Override
-    public void translate(PlayerActionPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, PlayerActionPacket packet) {
         SessionPlayerEntity entity = session.getPlayerEntity();
 
         // Send book update before any player action

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/entity/player/BedrockEmoteTranslator.java
Patch:
@@ -40,7 +40,7 @@
 public class BedrockEmoteTranslator extends PacketTranslator<EmotePacket> {
 
     @Override
-    public void translate(EmotePacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, EmotePacket packet) {
         if (session.getConnector().getConfig().getEmoteOffhandWorkaround() != EmoteOffhandWorkaroundOption.DISABLED) {
             // Activate the workaround - we should trigger the offhand now
             ClientPlayerActionPacket swapHandsPacket = new ClientPlayerActionPacket(PlayerAction.SWAP_HANDS, BlockUtils.POSITION_ZERO,

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/entity/player/BedrockInteractTranslator.java
Patch:
@@ -46,7 +46,7 @@
 public class BedrockInteractTranslator extends PacketTranslator<InteractPacket> {
 
     @Override
-    public void translate(InteractPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, InteractPacket packet) {
         Entity entity;
         if (packet.getRuntimeEntityId() == session.getPlayerEntity().getGeyserId()) {
             //Player is not in entity cache

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/entity/player/BedrockMovePlayerTranslator.java
Patch:
@@ -53,7 +53,7 @@ public class BedrockMovePlayerTranslator extends PacketTranslator<MovePlayerPack
     }
 
     @Override
-    public void translate(MovePlayerPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, MovePlayerPacket packet) {
         SessionPlayerEntity entity = session.getPlayerEntity();
         if (!session.isSpawned()) return;
 

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/entity/player/BedrockRiderJumpTranslator.java
Patch:
@@ -37,7 +37,7 @@
 @Translator(packet = RiderJumpPacket.class)
 public class BedrockRiderJumpTranslator extends PacketTranslator<RiderJumpPacket> {
     @Override
-    public void translate(RiderJumpPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, RiderJumpPacket packet) {
         Entity vehicle = session.getRidingVehicleEntity();
         if (vehicle instanceof AbstractHorseEntity) {
             ClientPlayerStatePacket playerStatePacket = new ClientPlayerStatePacket((int) vehicle.getEntityId(),  PlayerState.START_HORSE_JUMP, packet.getJumpStrength());

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/entity/player/BedrockSetPlayerGameTypeTranslator.java
Patch:
@@ -38,7 +38,7 @@
 public class BedrockSetPlayerGameTypeTranslator extends PacketTranslator<SetPlayerGameTypePacket> {
 
     @Override
-    public void translate(SetPlayerGameTypePacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, SetPlayerGameTypePacket packet) {
         // no
         SetPlayerGameTypePacket playerGameTypePacket = new SetPlayerGameTypePacket();
         playerGameTypePacket.setGamemode(session.getGameMode().ordinal());

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/world/BedrockLevelSoundEventTranslator.java
Patch:
@@ -36,7 +36,7 @@
 public class BedrockLevelSoundEventTranslator extends PacketTranslator<LevelSoundEventPacket> {
 
     @Override
-    public void translate(LevelSoundEventPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, LevelSoundEventPacket packet) {
         // lol what even :thinking:
         session.sendUpstreamPacket(packet);
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaAdvancementsTabTranslator.java
Patch:
@@ -37,7 +37,7 @@
 @Translator(packet = ServerAdvancementTabPacket.class)
 public class JavaAdvancementsTabTranslator extends PacketTranslator<ServerAdvancementTabPacket> {
     @Override
-    public void translate(ServerAdvancementTabPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerAdvancementTabPacket packet) {
         AdvancementsCache advancementsCache = session.getAdvancementsCache();
         advancementsCache.setCurrentAdvancementCategoryId(packet.getTabId());
         advancementsCache.buildAndShowListForm();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaAdvancementsTranslator.java
Patch:
@@ -42,7 +42,7 @@
 public class JavaAdvancementsTranslator extends PacketTranslator<ServerAdvancementsPacket> {
 
     @Override
-    public void translate(ServerAdvancementsPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerAdvancementsPacket packet) {
         AdvancementsCache advancementsCache = session.getAdvancementsCache();
         if (packet.isReset()) {
             advancementsCache.getStoredAdvancements().clear();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaBossBarTranslator.java
Patch:
@@ -35,7 +35,7 @@
 @Translator(packet = ServerBossBarPacket.class)
 public class JavaBossBarTranslator extends PacketTranslator<ServerBossBarPacket> {
     @Override
-    public void translate(ServerBossBarPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerBossBarPacket packet) {
         BossBar bossBar = session.getEntityCache().getBossBar(packet.getUuid());
         switch (packet.getAction()) {
             case ADD:

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaChatTranslator.java
Patch:
@@ -36,7 +36,7 @@
 public class JavaChatTranslator extends PacketTranslator<ServerChatPacket> {
 
     @Override
-    public void translate(ServerChatPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerChatPacket packet) {
         TextPacket textPacket = new TextPacket();
         textPacket.setPlatformChatId("");
         textPacket.setSourceName("");

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaDeclareCommandsTranslator.java
Patch:
@@ -96,7 +96,7 @@ public boolean equals(CommandParamData[][] a, CommandParamData[][] b) {
     }
 
     @Override
-    public void translate(ServerDeclareCommandsPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerDeclareCommandsPacket packet) {
         // Don't send command suggestions if they are disabled
         if (!session.getConnector().getConfig().isCommandSuggestions()) {
             session.getConnector().getLogger().debug("Not sending translated command suggestions as they are disabled.");

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaDeclareRecipesTranslator.java
Patch:
@@ -71,7 +71,7 @@ public class JavaDeclareRecipesTranslator extends PacketTranslator<ServerDeclare
     );
 
     @Override
-    public void translate(ServerDeclareRecipesPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerDeclareRecipesPacket packet) {
         Map<RecipeType, List<CraftingData>> recipeTypes = Registries.CRAFTING_DATA.forVersion(session.getUpstream().getProtocolVersion());
         // Get the last known network ID (first used for the pregenerated recipes) and increment from there.
         int netId = InventoryUtils.LAST_RECIPE_NET_ID + 1;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaDeclareTagsTranslator.java
Patch:
@@ -34,7 +34,7 @@
 public class JavaDeclareTagsTranslator extends PacketTranslator<ServerDeclareTagsPacket> {
 
     @Override
-    public void translate(ServerDeclareTagsPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerDeclareTagsPacket packet) {
         session.getTagCache().loadPacket(packet);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaDifficultyTranslator.java
Patch:
@@ -36,7 +36,7 @@
 public class JavaDifficultyTranslator extends PacketTranslator<ServerDifficultyPacket> {
 
     @Override
-    public void translate(ServerDifficultyPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerDifficultyPacket packet) {
         SetDifficultyPacket setDifficultyPacket = new SetDifficultyPacket();
         setDifficultyPacket.setDifficulty(packet.getDifficulty().ordinal());
         session.sendUpstreamPacket(setDifficultyPacket);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaDisconnectPacket.java
Patch:
@@ -35,7 +35,7 @@
 public class JavaDisconnectPacket extends PacketTranslator<ServerDisconnectPacket> {
 
     @Override
-    public void translate(ServerDisconnectPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerDisconnectPacket packet) {
         session.disconnect(MessageTranslator.convertMessage(packet.getReason(), session.getLocale()));
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaJoinGameTranslator.java
Patch:
@@ -52,7 +52,7 @@ public class JavaJoinGameTranslator extends PacketTranslator<ServerJoinGamePacke
     private static final List<SkinPart> SKIN_PART_VALUES = Arrays.asList(SkinPart.values());
 
     @Override
-    public void translate(ServerJoinGamePacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerJoinGamePacket packet) {
         PlayerEntity entity = session.getPlayerEntity();
         entity.setEntityId(packet.getEntityId());
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaKeepAliveTranslator.java
Patch:
@@ -38,7 +38,7 @@
 public class JavaKeepAliveTranslator extends PacketTranslator<ServerKeepAlivePacket> {
 
     @Override
-    public void translate(ServerKeepAlivePacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerKeepAlivePacket packet) {
         if (!session.getConnector().getConfig().isForwardPlayerPing()) {
             return;
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaLoginDisconnectTranslator.java
Patch:
@@ -35,7 +35,7 @@
 public class JavaLoginDisconnectTranslator extends PacketTranslator<LoginDisconnectPacket> {
 
     @Override
-    public void translate(LoginDisconnectPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, LoginDisconnectPacket packet) {
         // The client doesn't manually get disconnected so we have to do it ourselves
         session.disconnect(MessageTranslator.convertMessage(packet.getReason(), session.getLocale()));
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaLoginPluginRequestTranslator.java
Patch:
@@ -35,7 +35,7 @@
 @Translator(packet = LoginPluginRequestPacket.class)
 public class JavaLoginPluginRequestTranslator extends PacketTranslator<LoginPluginRequestPacket> {
     @Override
-    public void translate(LoginPluginRequestPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, LoginPluginRequestPacket packet) {
         // A vanilla client doesn't know any PluginMessage in the Login state, so we don't know any either.
         // Note: Fabric Networking API v1 will not let the client log in without sending this
         session.sendDownstreamPacket(

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaLoginSuccessTranslator.java
Patch:
@@ -38,7 +38,7 @@
 public class JavaLoginSuccessTranslator extends PacketTranslator<LoginSuccessPacket> {
 
     @Override
-    public void translate(LoginSuccessPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, LoginSuccessPacket packet) {
         PlayerEntity playerEntity = session.getPlayerEntity();
         AuthType remoteAuthType = session.getRemoteAuthType();
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaPingPacket.java
Patch:
@@ -36,7 +36,7 @@
 public class JavaPingPacket extends PacketTranslator<ServerPingPacket> {
 
     @Override
-    public void translate(ServerPingPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerPingPacket packet) {
         session.sendDownstreamPacket(new ClientPongPacket(packet.getId()));
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaPluginMessageTranslator.java
Patch:
@@ -41,7 +41,7 @@
 @Translator(packet = ServerPluginMessagePacket.class)
 public class JavaPluginMessageTranslator extends PacketTranslator<ServerPluginMessagePacket> {
     @Override
-    public void translate(ServerPluginMessagePacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerPluginMessagePacket packet) {
         // The only plugin messages it has to listen for are Floodgate plugin messages
         if (session.getRemoteAuthType() != AuthType.FLOODGATE) {
             return;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaRespawnTranslator.java
Patch:
@@ -43,7 +43,7 @@
 public class JavaRespawnTranslator extends PacketTranslator<ServerRespawnPacket> {
 
     @Override
-    public void translate(ServerRespawnPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerRespawnPacket packet) {
         SessionPlayerEntity entity = session.getPlayerEntity();
 
         entity.setHealth(entity.getMaxHealth());

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaStatisticsTranslator.java
Patch:
@@ -35,7 +35,7 @@
 public class JavaStatisticsTranslator extends PacketTranslator<ServerStatisticsPacket> {
 
     @Override
-    public void translate(ServerStatisticsPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerStatisticsPacket packet) {
         session.updateStatistics(packet.getStatistics());
 
         if (session.isWaitingForStatistics()) {

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaUnlockRecipesTranslator.java
Patch:
@@ -40,7 +40,7 @@
 public class JavaUnlockRecipesTranslator extends PacketTranslator<ServerUnlockRecipesPacket> {
 
     @Override
-    public void translate(ServerUnlockRecipesPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerUnlockRecipesPacket packet) {
         if (packet.getAction() == UnlockRecipesAction.REMOVE) {
             session.getUnlockedRecipes().removeAll(Arrays.asList(packet.getRecipes()));
         } else {

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityAnimationTranslator.java
Patch:
@@ -40,7 +40,7 @@
 public class JavaEntityAnimationTranslator extends PacketTranslator<ServerEntityAnimationPacket> {
 
     @Override
-    public void translate(ServerEntityAnimationPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerEntityAnimationPacket packet) {
         Entity entity;
         if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {
             entity = session.getPlayerEntity();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityAttachTranslator.java
Patch:
@@ -42,7 +42,7 @@
 public class JavaEntityAttachTranslator extends PacketTranslator<ServerEntityAttachPacket> {
 
     @Override
-    public void translate(ServerEntityAttachPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerEntityAttachPacket packet) {
 
         Entity holderId;
         if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityCollectItemTranslator.java
Patch:
@@ -44,7 +44,7 @@
 public class JavaEntityCollectItemTranslator extends PacketTranslator<ServerEntityCollectItemPacket> {
 
     @Override
-    public void translate(ServerEntityCollectItemPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerEntityCollectItemPacket packet) {
         // Collected entity is the other entity
         Entity collectedEntity = session.getEntityCache().getEntityByJavaId(packet.getCollectedEntityId());
         if (collectedEntity == null) return;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityEffectTranslator.java
Patch:
@@ -37,7 +37,7 @@
 public class JavaEntityEffectTranslator extends PacketTranslator<ServerEntityEffectPacket> {
 
     @Override
-    public void translate(ServerEntityEffectPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerEntityEffectPacket packet) {
         Entity entity;
         if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {
             entity = session.getPlayerEntity();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityEquipmentTranslator.java
Patch:
@@ -39,7 +39,7 @@
 public class JavaEntityEquipmentTranslator extends PacketTranslator<ServerEntityEquipmentPacket> {
 
     @Override
-    public void translate(ServerEntityEquipmentPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerEntityEquipmentPacket packet) {
         Entity entity;
         if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {
             entity = session.getPlayerEntity();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityHeadLookTranslator.java
Patch:
@@ -35,7 +35,7 @@
 public class JavaEntityHeadLookTranslator extends PacketTranslator<ServerEntityHeadLookPacket> {
 
     @Override
-    public void translate(ServerEntityHeadLookPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerEntityHeadLookPacket packet) {
         Entity entity = session.getEntityCache().getEntityByJavaId(packet.getEntityId());
         if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {
             entity = session.getPlayerEntity();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityMetadataTranslator.java
Patch:
@@ -39,7 +39,7 @@
 public class JavaEntityMetadataTranslator extends PacketTranslator<ServerEntityMetadataPacket> {
 
     @Override
-    public void translate(ServerEntityMetadataPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerEntityMetadataPacket packet) {
         Entity entity;
         if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {
             entity = session.getPlayerEntity();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityPositionRotationTranslator.java
Patch:
@@ -35,7 +35,7 @@
 public class JavaEntityPositionRotationTranslator extends PacketTranslator<ServerEntityPositionRotationPacket> {
 
     @Override
-    public void translate(ServerEntityPositionRotationPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerEntityPositionRotationPacket packet) {
         Entity entity = session.getEntityCache().getEntityByJavaId(packet.getEntityId());
         if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {
             entity = session.getPlayerEntity();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityPositionTranslator.java
Patch:
@@ -35,7 +35,7 @@
 public class JavaEntityPositionTranslator extends PacketTranslator<ServerEntityPositionPacket> {
 
     @Override
-    public void translate(ServerEntityPositionPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerEntityPositionPacket packet) {
         Entity entity = session.getEntityCache().getEntityByJavaId(packet.getEntityId());
         if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {
             entity = session.getPlayerEntity();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityPropertiesTranslator.java
Patch:
@@ -36,7 +36,7 @@
 public class JavaEntityPropertiesTranslator extends PacketTranslator<ServerEntityPropertiesPacket> {
 
     @Override
-    public void translate(ServerEntityPropertiesPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerEntityPropertiesPacket packet) {
         Entity entity;
         if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {
             entity = session.getPlayerEntity();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityRemoveEffectTranslator.java
Patch:
@@ -37,7 +37,7 @@
 public class JavaEntityRemoveEffectTranslator extends PacketTranslator<ServerEntityRemoveEffectPacket> {
 
     @Override
-    public void translate(ServerEntityRemoveEffectPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerEntityRemoveEffectPacket packet) {
         Entity entity;
         if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {
             entity = session.getPlayerEntity();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityRotationTranslator.java
Patch:
@@ -35,7 +35,7 @@
 public class JavaEntityRotationTranslator extends PacketTranslator<ServerEntityRotationPacket> {
 
     @Override
-    public void translate(ServerEntityRotationPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerEntityRotationPacket packet) {
         Entity entity = session.getEntityCache().getEntityByJavaId(packet.getEntityId());
         if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {
             entity = session.getPlayerEntity();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntitySetPassengersTranslator.java
Patch:
@@ -43,7 +43,7 @@
 public class JavaEntitySetPassengersTranslator extends PacketTranslator<ServerEntitySetPassengersPacket> {
 
     @Override
-    public void translate(ServerEntitySetPassengersPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerEntitySetPassengersPacket packet) {
         Entity entity;
         if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {
             entity = session.getPlayerEntity();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityStatusTranslator.java
Patch:
@@ -43,7 +43,7 @@
 public class JavaEntityStatusTranslator extends PacketTranslator<ServerEntityStatusPacket> {
 
     @Override
-    public void translate(ServerEntityStatusPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerEntityStatusPacket packet) {
         Entity entity;
         if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {
             entity = session.getPlayerEntity();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityTeleportTranslator.java
Patch:
@@ -37,7 +37,7 @@
 public class JavaEntityTeleportTranslator extends PacketTranslator<ServerEntityTeleportPacket> {
 
     @Override
-    public void translate(ServerEntityTeleportPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerEntityTeleportPacket packet) {
         Entity entity = session.getEntityCache().getEntityByJavaId(packet.getEntityId());
         if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {
             entity = session.getPlayerEntity();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityVelocityTranslator.java
Patch:
@@ -40,7 +40,7 @@
 public class JavaEntityVelocityTranslator extends PacketTranslator<ServerEntityVelocityPacket> {
 
     @Override
-    public void translate(ServerEntityVelocityPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerEntityVelocityPacket packet) {
         Entity entity = session.getEntityCache().getEntityByJavaId(packet.getEntityId());
         if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {
             entity = session.getPlayerEntity();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaRemoveEntitiesTranslator.java
Patch:
@@ -35,7 +35,7 @@
 public class JavaRemoveEntitiesTranslator extends PacketTranslator<ServerRemoveEntitiesPacket> {
 
     @Override
-    public void translate(ServerRemoveEntitiesPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerRemoveEntitiesPacket packet) {
         for (int entityId : packet.getEntityIds()) {
             Entity entity = session.getEntityCache().getEntityByJavaId(entityId);
             if (entity != null) {

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerAbilitiesTranslator.java
Patch:
@@ -34,7 +34,7 @@
 public class JavaPlayerAbilitiesTranslator extends PacketTranslator<ServerPlayerAbilitiesPacket> {
 
     @Override
-    public void translate(ServerPlayerAbilitiesPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerPlayerAbilitiesPacket packet) {
         session.setCanFly(packet.isCanFly());
         session.setFlying(packet.isFlying());
         session.sendAdventureSettings();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerActionAckTranslator.java
Patch:
@@ -40,7 +40,7 @@
 public class JavaPlayerActionAckTranslator extends PacketTranslator<ServerPlayerActionAckPacket> {
 
     @Override
-    public void translate(ServerPlayerActionAckPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerPlayerActionAckPacket packet) {
         ChunkUtils.updateBlock(session, packet.getNewState(), packet.getPosition());
         if (packet.getAction() == PlayerAction.START_DIGGING && !packet.isSuccessful()) {
             LevelEventPacket stopBreak = new LevelEventPacket();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerChangeHeldItemTranslator.java
Patch:
@@ -35,7 +35,7 @@
 public class JavaPlayerChangeHeldItemTranslator extends PacketTranslator<ServerPlayerChangeHeldItemPacket> {
 
     @Override
-    public void translate(ServerPlayerChangeHeldItemPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerPlayerChangeHeldItemPacket packet) {
         PlayerHotbarPacket hotbarPacket = new PlayerHotbarPacket();
         hotbarPacket.setContainerId(0);
         hotbarPacket.setSelectedHotbarSlot(packet.getSlot());

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerHealthTranslator.java
Patch:
@@ -41,7 +41,7 @@
 public class JavaPlayerHealthTranslator extends PacketTranslator<ServerPlayerHealthPacket> {
 
     @Override
-    public void translate(ServerPlayerHealthPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerPlayerHealthPacket packet) {
         SessionPlayerEntity entity = session.getPlayerEntity();
 
         int health = (int) Math.ceil(packet.getHealth());

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerListEntryTranslator.java
Patch:
@@ -40,7 +40,7 @@
 @Translator(packet = ServerPlayerListEntryPacket.class)
 public class JavaPlayerListEntryTranslator extends PacketTranslator<ServerPlayerListEntryPacket> {
     @Override
-    public void translate(ServerPlayerListEntryPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerPlayerListEntryPacket packet) {
         if (packet.getAction() != PlayerListEntryAction.ADD_PLAYER && packet.getAction() != PlayerListEntryAction.REMOVE_PLAYER)
             return;
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerPositionRotationTranslator.java
Patch:
@@ -50,7 +50,7 @@
 public class JavaPlayerPositionRotationTranslator extends PacketTranslator<ServerPlayerPositionRotationPacket> {
 
     @Override
-    public void translate(ServerPlayerPositionRotationPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerPlayerPositionRotationPacket packet) {
         if (!session.isLoggedIn())
             return;
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerSetExperienceTranslator.java
Patch:
@@ -40,7 +40,7 @@
 public class JavaPlayerSetExperienceTranslator extends PacketTranslator<ServerPlayerSetExperiencePacket> {
 
     @Override
-    public void translate(ServerPlayerSetExperiencePacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerPlayerSetExperiencePacket packet) {
         SessionPlayerEntity entity = session.getPlayerEntity();
 
         AttributeData experience = GeyserAttributeType.EXPERIENCE.getAttribute(packet.getExperience());

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/spawn/JavaSpawnEntityTranslator.java
Patch:
@@ -46,7 +46,7 @@
 public class JavaSpawnEntityTranslator extends PacketTranslator<ServerSpawnEntityPacket> {
 
     @Override
-    public void translate(ServerSpawnEntityPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerSpawnEntityPacket packet) {
 
         Vector3f position = Vector3f.from(packet.getX(), packet.getY(), packet.getZ());
         Vector3f motion = Vector3f.from(packet.getMotionX(), packet.getMotionY(), packet.getMotionZ());

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/spawn/JavaSpawnExpOrbTranslator.java
Patch:
@@ -39,7 +39,7 @@
 public class JavaSpawnExpOrbTranslator extends PacketTranslator<ServerSpawnExpOrbPacket> {
 
     @Override
-    public void translate(ServerSpawnExpOrbPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerSpawnExpOrbPacket packet) {
         Vector3f position = Vector3f.from(packet.getX(), packet.getY(), packet.getZ());
 
         Entity entity = new ExpOrbEntity(

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/spawn/JavaSpawnLivingEntityTranslator.java
Patch:
@@ -42,7 +42,7 @@
 public class JavaSpawnLivingEntityTranslator extends PacketTranslator<ServerSpawnLivingEntityPacket> {
 
     @Override
-    public void translate(ServerSpawnLivingEntityPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerSpawnLivingEntityPacket packet) {
         Vector3f position = Vector3f.from(packet.getX(), packet.getY(), packet.getZ());
         Vector3f motion = Vector3f.from(packet.getMotionX(), packet.getMotionY(), packet.getMotionZ());
         Vector3f rotation = Vector3f.from(packet.getYaw(), packet.getPitch(), packet.getHeadYaw());

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/spawn/JavaSpawnPaintingTranslator.java
Patch:
@@ -37,7 +37,7 @@
 public class JavaSpawnPaintingTranslator extends PacketTranslator<ServerSpawnPaintingPacket> {
 
     @Override
-    public void translate(ServerSpawnPaintingPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerSpawnPaintingPacket packet) {
         Vector3f position = Vector3f.from(packet.getPosition().getX(), packet.getPosition().getY(), packet.getPosition().getZ());
 
         PaintingEntity entity = new PaintingEntity(packet.getEntityId(),

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/spawn/JavaSpawnPlayerTranslator.java
Patch:
@@ -39,7 +39,7 @@
 public class JavaSpawnPlayerTranslator extends PacketTranslator<ServerSpawnPlayerPacket> {
 
     @Override
-    public void translate(ServerSpawnPlayerPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerSpawnPlayerPacket packet) {
         Vector3f position = Vector3f.from(packet.getX(), packet.getY(), packet.getZ());
         Vector3f rotation = Vector3f.from(packet.getYaw(), packet.getPitch(), packet.getYaw());
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/scoreboard/JavaDisplayScoreboardTranslator.java
Patch:
@@ -35,7 +35,7 @@
 public class JavaDisplayScoreboardTranslator extends PacketTranslator<ServerDisplayScoreboardPacket> {
 
     @Override
-    public void translate(ServerDisplayScoreboardPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerDisplayScoreboardPacket packet) {
         session.getWorldCache().getScoreboard()
                 .displayObjective(packet.getName(), packet.getPosition());
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/scoreboard/JavaScoreboardObjectiveTranslator.java
Patch:
@@ -41,7 +41,7 @@
 public class JavaScoreboardObjectiveTranslator extends PacketTranslator<ServerScoreboardObjectivePacket> {
 
     @Override
-    public void translate(ServerScoreboardObjectivePacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerScoreboardObjectivePacket packet) {
         WorldCache worldCache = session.getWorldCache();
         Scoreboard scoreboard = worldCache.getScoreboard();
         Objective objective = scoreboard.getObjective(packet.getName());

File: connector/src/main/java/org/geysermc/connector/network/translators/java/scoreboard/JavaTeamTranslator.java
Patch:
@@ -47,7 +47,7 @@ public class JavaTeamTranslator extends PacketTranslator<ServerTeamPacket> {
     private static final GeyserLogger LOGGER = GeyserConnector.getInstance().getLogger();
 
     @Override
-    public void translate(ServerTeamPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerTeamPacket packet) {
         if (LOGGER.isDebug()) {
             LOGGER.debug("Team packet " + packet.getTeamName() + " " + packet.getAction() + " " + Arrays.toString(packet.getPlayers()));
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/scoreboard/JavaUpdateScoreTranslator.java
Patch:
@@ -47,7 +47,7 @@ public JavaUpdateScoreTranslator() {
     }
 
     @Override
-    public void translate(ServerUpdateScorePacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerUpdateScorePacket packet) {
         WorldCache worldCache = session.getWorldCache();
         Scoreboard scoreboard = worldCache.getScoreboard();
         int pps = worldCache.increaseAndGetScoreboardPacketsPerSecond();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/title/JavaClearTitlesTranslator.java
Patch:
@@ -35,7 +35,7 @@
 public class JavaClearTitlesTranslator extends PacketTranslator<ServerClearTitlesPacket> {
 
     @Override
-    public void translate(ServerClearTitlesPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerClearTitlesPacket packet) {
         SetTitlePacket titlePacket = new SetTitlePacket();
         // TODO handle packet.isResetTimes()
         titlePacket.setType(SetTitlePacket.Type.CLEAR);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/title/JavaSetActionBarTextTranslator.java
Patch:
@@ -36,7 +36,7 @@
 public class JavaSetActionBarTextTranslator extends PacketTranslator<ServerSetActionBarTextPacket> {
 
     @Override
-    public void translate(ServerSetActionBarTextPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerSetActionBarTextPacket packet) {
         String text;
         if (packet.getText() == null) { //TODO 1.17 can this happen?
             text = " ";

File: connector/src/main/java/org/geysermc/connector/network/translators/java/title/JavaSetSubtitleTextTranslator.java
Patch:
@@ -36,7 +36,7 @@
 public class JavaSetSubtitleTextTranslator extends PacketTranslator<ServerSetSubtitleTextPacket> {
 
     @Override
-    public void translate(ServerSetSubtitleTextPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerSetSubtitleTextPacket packet) {
         String text;
         if (packet.getText() == null) { //TODO 1.17 can this happen?
             text = " ";

File: connector/src/main/java/org/geysermc/connector/network/translators/java/title/JavaSetTitleTextTranslator.java
Patch:
@@ -36,7 +36,7 @@
 public class JavaSetTitleTextTranslator extends PacketTranslator<ServerSetTitleTextPacket> {
 
     @Override
-    public void translate(ServerSetTitleTextPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerSetTitleTextPacket packet) {
         String text;
         if (packet.getText() == null) { //TODO 1.17 can this happen?
             text = " ";

File: connector/src/main/java/org/geysermc/connector/network/translators/java/title/JavaSetTitlesAnimationTranslator.java
Patch:
@@ -35,7 +35,7 @@
 public class JavaSetTitlesAnimationTranslator extends PacketTranslator<ServerSetTitlesAnimationPacket> {
 
     @Override
-    public void translate(ServerSetTitlesAnimationPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerSetTitlesAnimationPacket packet) {
         SetTitlePacket titlePacket = new SetTitlePacket();
         titlePacket.setType(SetTitlePacket.Type.TIMES);
         titlePacket.setText("");

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaCloseWindowTranslator.java
Patch:
@@ -35,7 +35,7 @@
 public class JavaCloseWindowTranslator extends PacketTranslator<ServerCloseWindowPacket> {
 
     @Override
-    public void translate(ServerCloseWindowPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerCloseWindowPacket packet) {
         // Sometimes the server can request a window close of ID 0... when the window isn't even open
         // Don't confirm in this instance
         InventoryUtils.closeInventory(session, packet.getWindowId(), (session.getOpenInventory() != null && session.getOpenInventory().getId() == packet.getWindowId()));

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaOpenHorseWindowTranslator.java
Patch:
@@ -98,7 +98,7 @@ public class JavaOpenHorseWindowTranslator extends PacketTranslator<ServerOpenHo
     }
 
     @Override
-    public void translate(ServerOpenHorseWindowPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerOpenHorseWindowPacket packet) {
         Entity entity = session.getEntityCache().getEntityByJavaId(packet.getEntityId());
         if (entity == null) {
             return;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaOpenWindowTranslator.java
Patch:
@@ -40,7 +40,7 @@
 public class JavaOpenWindowTranslator extends PacketTranslator<ServerOpenWindowPacket> {
 
     @Override
-    public void translate(ServerOpenWindowPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerOpenWindowPacket packet) {
         if (packet.getWindowId() == 0) {
             return;
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaSetSlotTranslator.java
Patch:
@@ -58,7 +58,7 @@
 public class JavaSetSlotTranslator extends PacketTranslator<ServerSetSlotPacket> {
 
     @Override
-    public void translate(ServerSetSlotPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerSetSlotPacket packet) {
         if (packet.getWindowId() == 255) { //cursor
             GeyserItemStack newItem = GeyserItemStack.from(packet.getItem());
             session.getPlayerInventory().setCursor(newItem, session);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaWindowItemsTranslator.java
Patch:
@@ -38,7 +38,7 @@
 public class JavaWindowItemsTranslator extends PacketTranslator<ServerWindowItemsPacket> {
 
     @Override
-    public void translate(ServerWindowItemsPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerWindowItemsPacket packet) {
         Inventory inventory = InventoryUtils.getInventory(session, packet.getWindowId());
         if (inventory == null)
             return;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaWindowPropertyTranslator.java
Patch:
@@ -37,7 +37,7 @@
 public class JavaWindowPropertyTranslator extends PacketTranslator<ServerWindowPropertyPacket> {
 
     @Override
-    public void translate(ServerWindowPropertyPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerWindowPropertyPacket packet) {
         Inventory inventory = InventoryUtils.getInventory(session, packet.getWindowId());
         if (inventory == null)
             return;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaBlockBreakAnimTranslator.java
Patch:
@@ -41,7 +41,7 @@
 public class JavaBlockBreakAnimTranslator extends PacketTranslator<ServerBlockBreakAnimPacket> {
 
     @Override
-    public void translate(ServerBlockBreakAnimPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerBlockBreakAnimPacket packet) {
         int state = session.getConnector().getWorldManager().getBlockAt(session, packet.getPosition().getX(), packet.getPosition().getY(), packet.getPosition().getZ());
         int breakTime = (int) (65535 / Math.ceil(BlockUtils.getBreakTime(session, BlockRegistries.JAVA_BLOCKS.get(state), ItemMapping.AIR, new CompoundTag(""), false) * 20));
         LevelEventPacket levelEventPacket = new LevelEventPacket();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaBlockChangeTranslator.java
Patch:
@@ -42,7 +42,7 @@
 public class JavaBlockChangeTranslator extends PacketTranslator<ServerBlockChangePacket> {
 
     @Override
-    public void translate(ServerBlockChangePacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerBlockChangePacket packet) {
         Position pos = packet.getRecord().getPosition();
         boolean updatePlacement = session.getConnector().getPlatformType() != PlatformType.SPIGOT && // Spigot simply listens for the block place event
                 session.getConnector().getWorldManager().getBlockAt(session, pos) != packet.getRecord().getBlock();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaBlockValueTranslator.java
Patch:
@@ -45,7 +45,7 @@
 public class JavaBlockValueTranslator extends PacketTranslator<ServerBlockValuePacket> {
 
     @Override
-    public void translate(ServerBlockValuePacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerBlockValuePacket packet) {
         BlockEventPacket blockEventPacket = new BlockEventPacket();
         blockEventPacket.setBlockPosition(Vector3i.from(packet.getPosition().getX(),
                 packet.getPosition().getY(), packet.getPosition().getZ()));

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaChunkDataTranslator.java
Patch:
@@ -52,7 +52,7 @@ public class JavaChunkDataTranslator extends PacketTranslator<ServerChunkDataPac
     private static final boolean NEW_BIOME_WRITE = GeyserConnector.getInstance().getConfig().isExtendedWorldHeight();
 
     @Override
-    public void translate(ServerChunkDataPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerChunkDataPacket packet) {
         if (session.isSpawned()) {
             ChunkUtils.updateChunkPosition(session, session.getPlayerEntity().getPosition().toInt());
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaExplosionTranslator.java
Patch:
@@ -43,7 +43,7 @@
 public class JavaExplosionTranslator extends PacketTranslator<ServerExplosionPacket> {
 
     @Override
-    public void translate(ServerExplosionPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerExplosionPacket packet) {
         for (ExplodedBlockRecord record : packet.getExploded()) {
             Vector3f pos = Vector3f.from(packet.getX() + record.getX(), packet.getY() + record.getY(), packet.getZ() + record.getZ());
             ChunkUtils.updateBlock(session, BlockStateValues.JAVA_AIR_ID, pos.toInt());

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaMapDataTranslator.java
Patch:
@@ -41,7 +41,7 @@
 @Translator(packet = ServerMapDataPacket.class)
 public class JavaMapDataTranslator extends PacketTranslator<ServerMapDataPacket> {
     @Override
-    public void translate(ServerMapDataPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerMapDataPacket packet) {
         ClientboundMapItemDataPacket mapItemDataPacket = new ClientboundMapItemDataPacket();
         boolean shouldStore = false;
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaMultiBlockChangeTranslator.java
Patch:
@@ -37,7 +37,7 @@
 public class JavaMultiBlockChangeTranslator extends PacketTranslator<ServerMultiBlockChangePacket> {
 
     @Override
-    public void translate(ServerMultiBlockChangePacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerMultiBlockChangePacket packet) {
         for (BlockChangeRecord record : packet.getRecords()) {
             ChunkUtils.updateBlock(session, record.getBlock(), record.getPosition());
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaNotifyClientTranslator.java
Patch:
@@ -49,7 +49,7 @@
 public class JavaNotifyClientTranslator extends PacketTranslator<ServerNotifyClientPacket> {
 
     @Override
-    public void translate(ServerNotifyClientPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerNotifyClientPacket packet) {
         PlayerEntity entity = session.getPlayerEntity();
 
         switch (packet.getNotification()) {

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaPlayBuiltinSoundTranslator.java
Patch:
@@ -44,7 +44,7 @@
 public class JavaPlayBuiltinSoundTranslator extends PacketTranslator<ServerPlayBuiltinSoundPacket> {
 
     @Override
-    public void translate(ServerPlayBuiltinSoundPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerPlayBuiltinSoundPacket packet) {
         String packetSound = packet.getSound().getName();
 
         SoundMapping soundMapping = Registries.SOUNDS.get(packetSound);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaPlayEffectTranslator.java
Patch:
@@ -48,7 +48,7 @@
 public class JavaPlayEffectTranslator extends PacketTranslator<ServerPlayEffectPacket> {
 
     @Override
-    public void translate(ServerPlayEffectPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerPlayEffectPacket packet) {
         // Separate case since each RecordEffectData in Java is an individual track in Bedrock
         if (packet.getEffect() == SoundEffect.RECORD) {
             RecordEffectData recordEffectData = (RecordEffectData) packet.getData();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaPlaySoundTranslator.java
Patch:
@@ -40,7 +40,7 @@
 public class JavaPlaySoundTranslator extends PacketTranslator<ServerPlaySoundPacket> {
 
     @Override
-    public void translate(ServerPlaySoundPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerPlaySoundPacket packet) {
         String packetSound;
         if (packet.getSound() instanceof BuiltinSound) {
             packetSound = ((BuiltinSound) packet.getSound()).getName();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaSpawnParticleTranslator.java
Patch:
@@ -50,7 +50,7 @@
 public class JavaSpawnParticleTranslator extends PacketTranslator<ServerSpawnParticlePacket> {
 
     @Override
-    public void translate(ServerSpawnParticlePacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerSpawnParticlePacket packet) {
         Function<Vector3f, BedrockPacket> particleCreateFunction = createParticle(session, packet.getParticle());
         if (particleCreateFunction != null) {
             if (packet.getAmount() == 0) {

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaSpawnPositionTranslator.java
Patch:
@@ -38,7 +38,7 @@
 public class JavaSpawnPositionTranslator extends PacketTranslator<ServerSpawnPositionPacket> {
 
     @Override
-    public void translate(ServerSpawnPositionPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerSpawnPositionPacket packet) {
         SetSpawnPositionPacket spawnPositionPacket = new SetSpawnPositionPacket();
         spawnPositionPacket.setBlockPosition(Vector3i.from(packet.getPosition().getX(), packet.getPosition().getY(), packet.getPosition().getZ()));
         spawnPositionPacket.setSpawnForced(true);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaStopSoundTranslator.java
Patch:
@@ -39,7 +39,7 @@
 public class JavaStopSoundTranslator extends PacketTranslator<ServerStopSoundPacket> {
 
     @Override
-    public void translate(ServerStopSoundPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerStopSoundPacket packet) {
         // Runs if all sounds are stopped
         if (packet.getSound() == null) {
             StopSoundPacket stopPacket = new StopSoundPacket();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaTradeListTranslator.java
Patch:
@@ -51,7 +51,7 @@
 public class JavaTradeListTranslator extends PacketTranslator<ServerTradeListPacket> {
 
     @Override
-    public void translate(ServerTradeListPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerTradeListPacket packet) {
         Inventory openInventory = session.getOpenInventory();
         if (!(openInventory instanceof MerchantContainer && openInventory.getId() == packet.getWindowId())) {
             return;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaUnloadChunkTranslator.java
Patch:
@@ -37,7 +37,7 @@
 public class JavaUnloadChunkTranslator extends PacketTranslator<ServerUnloadChunkPacket> {
 
     @Override
-    public void translate(ServerUnloadChunkPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerUnloadChunkPacket packet) {
         session.getChunkCache().removeChunk(packet.getX(), packet.getZ());
 
         //Checks if a skull is in an unloaded chunk then removes it

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaUpdateTileEntityTranslator.java
Patch:
@@ -45,7 +45,7 @@
 public class JavaUpdateTileEntityTranslator extends PacketTranslator<ServerUpdateTileEntityPacket> {
 
     @Override
-    public void translate(ServerUpdateTileEntityPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerUpdateTileEntityPacket packet) {
         String id = BlockEntityUtils.getBedrockBlockEntityId(packet.getType().name());
         if (packet.getNbt().isEmpty()) { // Fixes errors in servers sending empty NBT
             BlockEntityUtils.updateBlockEntity(session, NbtMap.EMPTY, packet.getPosition());

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaUpdateTimeTranslator.java
Patch:
@@ -35,7 +35,7 @@
 public class JavaUpdateTimeTranslator extends PacketTranslator<ServerUpdateTimePacket> {
 
     @Override
-    public void translate(ServerUpdateTimePacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerUpdateTimePacket packet) {
         // Bedrock sends a GameRulesChangedPacket if there is no daylight cycle
         // Java just sends a negative long if there is no daylight cycle
         long time = packet.getTime();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaUpdateViewDistanceTranslator.java
Patch:
@@ -35,7 +35,7 @@
 public class JavaUpdateViewDistanceTranslator extends PacketTranslator<ServerUpdateViewDistancePacket> {
 
     @Override
-    public void translate(ServerUpdateViewDistancePacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerUpdateViewDistancePacket packet) {
         session.setRenderDistance(packet.getViewDistance());
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaUpdateViewPositionTranslator.java
Patch:
@@ -37,7 +37,7 @@
 public class JavaUpdateViewPositionTranslator extends PacketTranslator<ServerUpdateViewPositionPacket> {
 
     @Override
-    public void translate(ServerUpdateViewPositionPacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerUpdateViewPositionPacket packet) {
         if (!session.isSpawned() && session.getLastChunkPosition() == null) {
             ChunkUtils.updateChunkPosition(session, Vector3i.from(packet.getChunkX() << 4, 64, packet.getChunkZ() << 4));
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaVehicleMoveTranslator.java
Patch:
@@ -36,7 +36,7 @@
 public class JavaVehicleMoveTranslator extends PacketTranslator<ServerVehicleMovePacket> {
 
     @Override
-    public void translate(ServerVehicleMovePacket packet, GeyserSession session) {
+    public void translate(GeyserSession session, ServerVehicleMovePacket packet) {
         Entity entity = session.getRidingVehicleEntity();
         if (entity == null) return;
 

File: connector/src/main/java/org/geysermc/connector/entity/FireworkEntity.java
Patch:
@@ -100,7 +100,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
 
                         int i = 0;
                         for (int color : oldColors) {
-                            colors[i++] = FireworkColor.fromJavaID(color).getBedrockID();
+                            colors[i++] = FireworkColor.fromJavaRGB(color);
                         }
 
                         effectBuilder.putByteArray("FireworkColor", colors);
@@ -112,7 +112,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
 
                         int i = 0;
                         for (int color : oldColors) {
-                            colors[i++] = FireworkColor.fromJavaID(color).getBedrockID();
+                            colors[i++] = FireworkColor.fromJavaRGB(color);
                         }
 
                         effectBuilder.putByteArray("FireworkFade", colors);

File: connector/src/main/java/org/geysermc/connector/dump/DumpInfo.java
Patch:
@@ -52,6 +52,7 @@
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Properties;
+import java.util.stream.Collectors;
 
 @Getter
 public class DumpInfo {
@@ -201,7 +202,7 @@ public static class LogsInfo {
         public LogsInfo() {
             try {
                 Map<String, String> fields = new HashMap<>();
-                fields.put("content", String.join("\n", java.nio.file.Files.readAllLines(GeyserConnector.getInstance().getBootstrap().getLogsPath())));
+                fields.put("content", FileUtils.readAllLines(GeyserConnector.getInstance().getBootstrap().getLogsPath()).collect(Collectors.joining("\n")));
 
                 JsonNode logData = GeyserConnector.JSON_MAPPER.readTree(WebUtils.postForm("https://api.mclo.gs/1/log", fields));
 

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/GeyserSpigotInjector.java
Patch:
@@ -30,6 +30,7 @@
 import io.netty.bootstrap.ServerBootstrap;
 import io.netty.channel.*;
 import io.netty.channel.local.LocalAddress;
+import io.netty.util.concurrent.DefaultThreadFactory;
 import org.bukkit.Bukkit;
 import org.geysermc.connector.bootstrap.GeyserBootstrap;
 import org.geysermc.connector.common.GeyserInjector;
@@ -117,7 +118,7 @@ protected void initChannel(Channel ch) throws Exception {
                         initChannel.invoke(childHandler, ch);
                     }
                 })
-                .group(new DefaultEventLoopGroup())
+                .group(new DefaultEventLoopGroup(0, new DefaultThreadFactory("Geyser Spigot connection thread")))
                 .localAddress(LocalAddress.ANY))
                 .bind()
                 .syncUninterruptibly();

File: connector/src/main/java/org/geysermc/connector/network/ConnectorServerEventHandler.java
Patch:
@@ -58,7 +58,8 @@ public class ConnectorServerEventHandler implements BedrockServerEventHandler {
     private static final int MAGIC_RAKNET_LENGTH = 338;
 
     private final GeyserConnector connector;
-    private final DefaultEventLoopGroup eventLoopGroup = new DefaultEventLoopGroup(new DefaultThreadFactory("Geyser player thread"));
+    // There is a constructor that doesn't require inputting threads, but older Netty versions don't have it
+    private final DefaultEventLoopGroup eventLoopGroup = new DefaultEventLoopGroup(0, new DefaultThreadFactory("Geyser player thread"));
 
     public ConnectorServerEventHandler(GeyserConnector connector) {
         this.connector = connector;

File: connector/src/main/java/org/geysermc/connector/network/translators/item/StoredItemMappings.java
Patch:
@@ -46,6 +46,7 @@ public class StoredItemMappings {
     private final ItemMapping fishingRod;
     private final ItemMapping lodestoneCompass;
     private final ItemMapping milkBucket;
+    private final ItemMapping powderSnowBucket;
     private final ItemMapping egg;
     private final ItemMapping shield;
     private final ItemMapping wheat;
@@ -60,6 +61,7 @@ public StoredItemMappings(Map<String, ItemMapping> itemMappings) {
         this.fishingRod = load(itemMappings, "fishing_rod");
         this.lodestoneCompass = load(itemMappings, "lodestone_compass");
         this.milkBucket = load(itemMappings, "milk_bucket");
+        this.powderSnowBucket = load(itemMappings, "powder_snow_bucket");
         this.egg = load(itemMappings, "egg");
         this.shield = load(itemMappings, "shield");
         this.wheat = load(itemMappings, "wheat");

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/horse/HorseEntity.java
Patch:
@@ -40,7 +40,7 @@ public HorseEntity(long entityId, long geyserId, EntityType entityType, Vector3f
     @Override
     public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession session) {
         if (entityMetadata.getId() == 19) {
-            metadata.put(EntityData.VARIANT, entityMetadata.getValue());
+            metadata.put(EntityData.VARIANT, ((int) entityMetadata.getValue()) & 255);
             metadata.put(EntityData.MARK_VARIANT, (((int) entityMetadata.getValue()) >> 8) % 5);
         }
         super.updateBedrockMetadata(entityMetadata, session);

File: connector/src/main/java/org/geysermc/connector/network/translators/collision/translators/ScaffoldingCollision.java
Patch:
@@ -25,18 +25,19 @@
 
 package org.geysermc.connector.network.translators.collision.translators;
 
+import lombok.EqualsAndHashCode;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.collision.BoundingBox;
 import org.geysermc.connector.network.translators.collision.CollisionRemapper;
 
 /**
  * In order for scaffolding to work on Bedrock, entity flags need to be sent to the player
  */
+@EqualsAndHashCode(callSuper = true)
 @CollisionRemapper(regex = "^scaffolding$", usesParams = true, passDefaultBoxes = true)
 public class ScaffoldingCollision extends BlockCollision {
     public ScaffoldingCollision(String params, BoundingBox[] defaultBoxes) {
-        super();
-        boundingBoxes = defaultBoxes;
+        super(defaultBoxes);
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/network/translators/collision/translators/SpawnerCollision.java
Patch:
@@ -25,8 +25,10 @@
 
 package org.geysermc.connector.network.translators.collision.translators;
 
+import lombok.EqualsAndHashCode;
 import org.geysermc.connector.network.translators.collision.CollisionRemapper;
 
+@EqualsAndHashCode(callSuper = true)
 @CollisionRemapper(regex = "^spawner$")
 public class SpawnerCollision extends SolidCollision {
     public SpawnerCollision(String params) {

File: connector/src/main/java/org/geysermc/connector/registry/BlockRegistries.java
Patch:
@@ -25,6 +25,7 @@
 
 package org.geysermc.connector.registry;
 
+import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
 import it.unimi.dsi.fastutil.ints.IntSet;
@@ -54,7 +55,7 @@ public class BlockRegistries {
      * A mapped registry which stores Java IDs to {@link BlockMapping}, containing miscellaneous information about
      * blocks and their behavior in many cases.
      */
-    public static final SimpleMappedRegistry<Integer, BlockMapping> JAVA_BLOCKS = SimpleMappedRegistry.create(RegistryLoaders.empty(Int2ObjectOpenHashMap::new));
+    public static final MappedRegistry<Integer, BlockMapping, Int2ObjectMap<BlockMapping>> JAVA_BLOCKS = MappedRegistry.create(RegistryLoaders.empty(Int2ObjectOpenHashMap::new));
 
     /**
      * A (bi)mapped registry containing the Java IDs to identifiers.

File: connector/src/main/java/org/geysermc/connector/utils/ChunkUtils.java
Patch:
@@ -73,9 +73,9 @@ public class ChunkUtils {
     /**
      * The minimum height Bedrock Edition will accept.
      */
-    private static final int MINIMUM_ACCEPTED_HEIGHT = 0;
+    public static final int MINIMUM_ACCEPTED_HEIGHT = 0;
     private static final int CAVES_AND_CLIFFS_MINIMUM_HEIGHT = -64;
-    private static final int MINIMUM_ACCEPTED_HEIGHT_OVERWORLD = GeyserConnector.getInstance().getConfig().isExtendedWorldHeight() ?
+    public static final int MINIMUM_ACCEPTED_HEIGHT_OVERWORLD = GeyserConnector.getInstance().getConfig().isExtendedWorldHeight() ?
             CAVES_AND_CLIFFS_MINIMUM_HEIGHT  : MINIMUM_ACCEPTED_HEIGHT;
     /**
      * The maximum chunk height Bedrock Edition will accept, from the lowest point to the highest.

File: bootstrap/fabric/src/main/java/org/geysermc/platform/fabric/GeyserFabricMod.java
Patch:
@@ -40,6 +40,7 @@
 import org.geysermc.connector.bootstrap.GeyserBootstrap;
 import org.geysermc.connector.command.CommandManager;
 import org.geysermc.connector.command.GeyserCommand;
+import org.geysermc.connector.common.AuthType;
 import org.geysermc.connector.configuration.GeyserConfiguration;
 import org.geysermc.connector.dump.BootstrapDumpInfo;
 import org.geysermc.connector.network.translators.world.WorldManager;
@@ -145,13 +146,13 @@ public void startGeyser(MinecraftServer server) {
 
         Optional<ModContainer> floodgate = FabricLoader.getInstance().getModContainer("floodgate");
         boolean floodgatePresent = floodgate.isPresent();
-        if (geyserConfig.getRemote().getAuthType().equals("floodgate") && !floodgatePresent) {
+        if (geyserConfig.getRemote().getAuthType() == AuthType.FLOODGATE && !floodgatePresent) {
             geyserLogger.severe(LanguageUtils.getLocaleStringLog("geyser.bootstrap.floodgate.not_installed") + " " + LanguageUtils.getLocaleStringLog("geyser.bootstrap.floodgate.disabling"));
             return;
         } else if (geyserConfig.isAutoconfiguredRemote() && floodgatePresent) {
             // Floodgate installed means that the user wants Floodgate authentication
             geyserLogger.debug("Auto-setting to Floodgate authentication.");
-            geyserConfig.getRemote().setAuthType("floodgate");
+            geyserConfig.getRemote().setAuthType(AuthType.FLOODGATE);
         }
 
         geyserConfig.loadFloodgate(this, floodgate.orElse(null));

File: bootstrap/bungeecord/src/main/java/org/geysermc/platform/bungeecord/GeyserBungeePlugin.java
Patch:
@@ -31,6 +31,7 @@
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.bootstrap.GeyserBootstrap;
 import org.geysermc.connector.command.CommandManager;
+import org.geysermc.connector.common.AuthType;
 import org.geysermc.connector.configuration.GeyserConfiguration;
 import org.geysermc.connector.dump.BootstrapDumpInfo;
 import org.geysermc.connector.ping.GeyserLegacyPingPassthrough;
@@ -100,13 +101,13 @@ public void onEnable() {
             return;
         }
 
-        if (geyserConfig.getRemote().getAuthType().equals("floodgate") && getProxy().getPluginManager().getPlugin("floodgate") == null) {
+        if (geyserConfig.getRemote().getAuthType() == AuthType.FLOODGATE && getProxy().getPluginManager().getPlugin("floodgate") == null) {
             geyserLogger.severe(LanguageUtils.getLocaleStringLog("geyser.bootstrap.floodgate.not_installed") + " " + LanguageUtils.getLocaleStringLog("geyser.bootstrap.floodgate.disabling"));
             return;
         } else if (geyserConfig.isAutoconfiguredRemote() && getProxy().getPluginManager().getPlugin("floodgate") != null) {
             // Floodgate installed means that the user wants Floodgate authentication
             geyserLogger.debug("Auto-setting to Floodgate authentication.");
-            geyserConfig.getRemote().setAuthType("floodgate");
+            geyserConfig.getRemote().setAuthType(AuthType.FLOODGATE);
         }
 
         geyserConfig.loadFloodgate(this);

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/GeyserSpigotPlugin.java
Patch:
@@ -36,6 +36,7 @@
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.bootstrap.GeyserBootstrap;
 import org.geysermc.connector.command.CommandManager;
+import org.geysermc.connector.common.AuthType;
 import org.geysermc.connector.configuration.GeyserConfiguration;
 import org.geysermc.connector.dump.BootstrapDumpInfo;
 import org.geysermc.connector.network.translators.world.WorldManager;
@@ -127,14 +128,14 @@ public void onEnable() {
             return;
         }
 
-        if (geyserConfig.getRemote().getAuthType().equals("floodgate") && Bukkit.getPluginManager().getPlugin("floodgate") == null) {
+        if (geyserConfig.getRemote().getAuthType() == AuthType.FLOODGATE && Bukkit.getPluginManager().getPlugin("floodgate") == null) {
             geyserLogger.severe(LanguageUtils.getLocaleStringLog("geyser.bootstrap.floodgate.not_installed") + " " + LanguageUtils.getLocaleStringLog("geyser.bootstrap.floodgate.disabling"));
             this.getPluginLoader().disablePlugin(this);
             return;
         } else if (geyserConfig.isAutoconfiguredRemote() && Bukkit.getPluginManager().getPlugin("floodgate") != null) {
             // Floodgate installed means that the user wants Floodgate authentication
             geyserLogger.debug("Auto-setting to Floodgate authentication.");
-            geyserConfig.getRemote().setAuthType("floodgate");
+            geyserConfig.getRemote().setAuthType(AuthType.FLOODGATE);
         }
 
         geyserConfig.loadFloodgate(this);

File: bootstrap/velocity/src/main/java/org/geysermc/platform/velocity/GeyserVelocityPlugin.java
Patch:
@@ -36,6 +36,7 @@
 import org.geysermc.common.PlatformType;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.bootstrap.GeyserBootstrap;
+import org.geysermc.connector.common.AuthType;
 import org.geysermc.connector.configuration.GeyserConfiguration;
 import org.geysermc.connector.dump.BootstrapDumpInfo;
 import org.geysermc.connector.ping.GeyserLegacyPingPassthrough;
@@ -116,13 +117,13 @@ public void onEnable() {
         } catch (ClassNotFoundException ignored) {
         }
 
-        if (geyserConfig.getRemote().getAuthType().equals("floodgate") && !proxyServer.getPluginManager().getPlugin("floodgate").isPresent()) {
+        if (geyserConfig.getRemote().getAuthType() == AuthType.FLOODGATE && !proxyServer.getPluginManager().getPlugin("floodgate").isPresent()) {
             geyserLogger.severe(LanguageUtils.getLocaleStringLog("geyser.bootstrap.floodgate.not_installed") + " " + LanguageUtils.getLocaleStringLog("geyser.bootstrap.floodgate.disabling"));
             return;
         } else if (geyserConfig.isAutoconfiguredRemote() && proxyServer.getPluginManager().getPlugin("floodgate").isPresent()) {
             // Floodgate installed means that the user wants Floodgate authentication
             geyserLogger.debug("Auto-setting to Floodgate authentication.");
-            geyserConfig.getRemote().setAuthType("floodgate");
+            geyserConfig.getRemote().setAuthType(AuthType.FLOODGATE);
         }
 
         geyserConfig.loadFloodgate(this, proxyServer, configFolder.toFile());

File: connector/src/main/java/org/geysermc/connector/FloodgateKeyLoader.java
Patch:
@@ -25,6 +25,7 @@
 
 package org.geysermc.connector;
 
+import org.geysermc.connector.common.AuthType;
 import org.geysermc.connector.configuration.GeyserJacksonConfiguration;
 import org.geysermc.connector.utils.LanguageUtils;
 
@@ -33,7 +34,7 @@
 
 public class FloodgateKeyLoader {
     public static Path getKeyPath(GeyserJacksonConfiguration config, Object floodgate, Path floodgateDataFolder, Path geyserDataFolder, GeyserLogger logger) {
-        if (!config.getRemote().getAuthType().equals("floodgate")) {
+        if (config.getRemote().getAuthType() != AuthType.FLOODGATE) {
             return geyserDataFolder.resolve(config.getFloodgateKeyFile());
         }
 

File: connector/src/main/java/org/geysermc/connector/configuration/GeyserConfiguration.java
Patch:
@@ -27,6 +27,7 @@
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import org.geysermc.connector.GeyserLogger;
+import org.geysermc.connector.common.AuthType;
 import org.geysermc.connector.network.CIDRMatcher;
 import org.geysermc.connector.utils.LanguageUtils;
 
@@ -135,7 +136,7 @@ interface IRemoteConfiguration {
 
         void setPort(int port);
 
-        String getAuthType();
+        AuthType getAuthType();
 
         boolean isPasswordAuthentication();
 

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -478,7 +478,7 @@ public void connect() {
         startGame();
         this.remoteAddress = connector.getConfig().getRemote().getAddress();
         this.remotePort = connector.getConfig().getRemote().getPort();
-        this.remoteAuthType = connector.getDefaultAuthType();
+        this.remoteAuthType = connector.getConfig().getRemote().getAuthType();
 
         // Set the hardcoded shield ID to the ID we just defined in StartGamePacket
         upstream.getSession().getHardcodedBlockingId().set(this.itemMappings.getStoredItems().shield().getBedrockId());

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaJoinGameTranslator.java
Patch:
@@ -104,7 +104,7 @@ public void translate(ServerJoinGamePacket packet, GeyserSession session) {
         session.sendDownstreamPacket(new ClientPluginMessagePacket("minecraft:brand", PluginMessageUtils.getGeyserBrandData()));
 
         // register the plugin messaging channels used in Floodgate
-        if (session.getConnector().getDefaultAuthType() == AuthType.FLOODGATE) {
+        if (session.getRemoteAuthType() == AuthType.FLOODGATE) {
             session.sendDownstreamPacket(new ClientPluginMessagePacket("minecraft:register", PluginMessageUtils.getFloodgateRegisterData()));
         }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaPluginMessageTranslator.java
Patch:
@@ -43,7 +43,7 @@ public class JavaPluginMessageTranslator extends PacketTranslator<ServerPluginMe
     @Override
     public void translate(ServerPluginMessagePacket packet, GeyserSession session) {
         // The only plugin messages it has to listen for are Floodgate plugin messages
-        if (session.getConnector().getDefaultAuthType() != AuthType.FLOODGATE) {
+        if (session.getRemoteAuthType() != AuthType.FLOODGATE) {
             return;
         }
 

File: connector/src/main/java/org/geysermc/connector/skin/SkinManager.java
Patch:
@@ -286,7 +286,7 @@ private static GameProfileData loadBedrockOrOfflineSkin(GameProfile profile) {
 
             String skinUrl = isAlex ? SkinProvider.EMPTY_SKIN_ALEX.getTextureUrl() : SkinProvider.EMPTY_SKIN.getTextureUrl();
             String capeUrl = SkinProvider.EMPTY_CAPE.getTextureUrl();
-            if (("steve".equals(skinUrl) || "alex".equals(skinUrl)) && GeyserConnector.getInstance().getDefaultAuthType() != AuthType.ONLINE) {
+            if (("steve".equals(skinUrl) || "alex".equals(skinUrl)) && GeyserConnector.getInstance().getConfig().getRemote().getAuthType() != AuthType.ONLINE) {
                 GeyserSession session = GeyserConnector.getInstance().getPlayerByUuid(profile.getId());
 
                 if (session != null) {

File: connector/src/main/java/org/geysermc/connector/network/translators/world/BiomeTranslator.java
Patch:
@@ -64,6 +64,9 @@ public static void loadServerBiomes(GeyserSession session, CompoundTag codec) {
                     case "icy":
                         replacementBiome = "minecraft:ice_spikes";
                         break;
+                    case "mesa":
+                        replacementBiome = "minecraft:badlands";
+                        break;
                     case "mushroom":
                         replacementBiome = "minecraft:mushroom_fields";
                         break;
@@ -75,7 +78,6 @@ public static void loadServerBiomes(GeyserSession session, CompoundTag codec) {
                         break;
                     case "taiga":
                     case "jungle":
-                    case "mesa":
                     case "plains":
                     case "savanna":
                     case "the_end":

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemTranslator.java
Patch:
@@ -202,7 +202,7 @@ private static String[] getCanModify(ListTag canModifyJava, String[] canModifyBe
                 if (!block.startsWith("minecraft:")) block = "minecraft:" + block;
                 // Get the Bedrock identifier of the item and replace it.
                 // This will unfortunately be limited - for example, beds and banners will be translated weirdly
-                canModifyBedrock[i] = BlockRegistries.JAVA_TO_BEDROCK_IDENTIFIERS.get(block).replace("minecraft:", "");
+                canModifyBedrock[i] = BlockRegistries.JAVA_TO_BEDROCK_IDENTIFIERS.getOrDefault(block, block).replace("minecraft:", "");
             }
         }
         return canModifyBedrock;

File: connector/src/main/java/org/geysermc/connector/entity/living/WaterEntity.java
Patch:
@@ -26,14 +26,11 @@
 package org.geysermc.connector.entity.living;
 
 import com.nukkitx.math.vector.Vector3f;
-import com.nukkitx.protocol.bedrock.data.entity.EntityData;
 import org.geysermc.connector.entity.type.EntityType;
 
 public class WaterEntity extends CreatureEntity {
 
     public WaterEntity(long entityId, long geyserId, EntityType entityType, Vector3f position, Vector3f motion, Vector3f rotation) {
         super(entityId, geyserId, entityType, position, motion, rotation);
-
-        metadata.put(EntityData.AIR_SUPPLY, (short) 400);
     }
 }

File: connector/src/main/java/org/geysermc/connector/registry/populator/ItemRegistryPopulator.java
Patch:
@@ -120,6 +120,7 @@ public static void populate() {
 
             // Used to get the Bedrock namespaced ID (in instances where there are small differences)
             Object2IntMap<String> bedrockIdentifierToId = new Object2IntOpenHashMap<>();
+            bedrockIdentifierToId.defaultReturnValue(Short.MIN_VALUE);
 
             List<String> itemNames = new ArrayList<>();
 
@@ -264,8 +265,8 @@ public static void populate() {
                 }
                 String bedrockIdentifier = mappingItem.getBedrockIdentifier();
                 int bedrockId = bedrockIdentifierToId.getInt(bedrockIdentifier);
-                if (bedrockIdentifier == null) {
-                    throw new RuntimeException("Missing Bedrock ID in mappings!: " + bedrockId);
+                if (bedrockId == Short.MIN_VALUE) {
+                    throw new RuntimeException("Missing Bedrock ID in mappings: " + bedrockIdentifier);
                 }
                 int stackSize = mappingItem.getStackSize();
 

File: connector/src/main/java/org/geysermc/connector/registry/populator/BlockRegistryPopulator.java
Patch:
@@ -42,6 +42,7 @@
 import org.geysermc.connector.registry.BlockRegistries;
 import org.geysermc.connector.registry.type.BlockMapping;
 import org.geysermc.connector.registry.type.BlockMappings;
+import org.geysermc.connector.utils.BlockUtils;
 import org.geysermc.connector.utils.FileUtils;
 
 import java.io.DataInputStream;
@@ -165,7 +166,7 @@ private static void registerBedrockBlocks() {
                     bedrockToJavaBlockMap.putIfAbsent(bedrockRuntimeId, javaRuntimeId);
                 }
 
-                String cleanJavaIdentifier = entry.getKey().split("\\[")[0];
+                String cleanJavaIdentifier = BlockUtils.getCleanIdentifier(entry.getKey());
 
                 // Get the tag needed for non-empty flower pots
                 if (entry.getValue().get("pottable") != null) {

File: connector/src/main/java/org/geysermc/connector/registry/populator/ItemRegistryPopulator.java
Patch:
@@ -49,6 +49,7 @@
 import org.geysermc.connector.registry.BlockRegistries;
 import org.geysermc.connector.registry.Registries;
 import org.geysermc.connector.registry.type.*;
+import org.geysermc.connector.utils.BlockUtils;
 import org.geysermc.connector.utils.FileUtils;
 
 import java.io.ByteArrayInputStream;
@@ -282,7 +283,8 @@ public static void populate() {
                             String correctBedrockIdentifier = blockMappings.getBedrockBlockStates().get(aValidBedrockBlockId).getString("name");
                             boolean firstPass = true;
                             for (Map.Entry<String, Integer> blockEntry : BlockRegistries.JAVA_IDENTIFIERS.get().entrySet()) {
-                                if (blockEntry.getKey().split("\\[")[0].equals(javaBlockIdentifier)) {
+                                String aBlockIdentifier = BlockUtils.getCleanIdentifier(blockEntry.getKey());
+                                if (aBlockIdentifier.equals(javaBlockIdentifier)) {
                                     int bedrockBlockRuntimeId = blockMappings.getBedrockBlockId(blockEntry.getValue());
                                     NbtMap blockTag = blockMappings.getBedrockBlockStates().get(bedrockBlockRuntimeId);
                                     String bedrockName = blockTag.getString("name");

File: connector/src/main/java/org/geysermc/connector/registry/type/BlockMapping.java
Patch:
@@ -27,6 +27,7 @@
 
 import lombok.Builder;
 import lombok.Value;
+import org.geysermc.connector.utils.BlockUtils;
 
 import javax.annotation.Nullable;
 
@@ -54,7 +55,7 @@ public class BlockMapping {
      * @return the identifier without the additional block states
      */
     public String getCleanJavaIdentifier() {
-        return javaIdentifier.split("\\[")[0];
+        return BlockUtils.getCleanIdentifier(javaIdentifier);
     }
 
     /**

File: connector/src/main/java/org/geysermc/connector/network/session/UpstreamSession.java
Patch:
@@ -41,7 +41,6 @@ public class UpstreamSession {
     private boolean initialized = false;
 
     public void sendPacket(@NonNull BedrockPacket packet) {
-        System.out.println(packet);
         if (!isClosed()) {
             session.sendPacket(packet);
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/InventoryTranslator.java
Patch:
@@ -550,6 +550,7 @@ public ItemStackResponsePacket.Response translateAutoCraftingRequest(GeyserSessi
             switch (action.getType()) {
                 case CRAFT_RECIPE_AUTO: {
                     AutoCraftRecipeStackRequestActionData autoCraftAction = (AutoCraftRecipeStackRequestActionData) action;
+                    // TODO autoCraftAction#getTimesCrafted 1.17.10 ???
                     if (craftState != CraftState.START) {
                         return rejectRequest(request);
                     }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaPlayBuiltinSoundTranslator.java
Patch:
@@ -34,6 +34,7 @@
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;
+import org.geysermc.connector.network.translators.world.block.BlockStateValues;
 import org.geysermc.connector.registry.BlockRegistries;
 import org.geysermc.connector.utils.SoundUtils;
 import org.geysermc.connector.registry.Registries;
@@ -85,7 +86,8 @@ public void translate(ServerPlayBuiltinSoundPacket packet, GeyserSession session
             soundPacket.setExtraData(soundMapping.getExtraData() + (int)(Math.round((Math.log10(packet.getPitch()) / Math.log10(2)) * 12)) + 12);
         } else if (sound == SoundEvent.PLACE && soundMapping.getExtraData() == -1) {
             if (!soundMapping.getIdentifier().equals(":")) {
-                soundPacket.setExtraData(session.getBlockMappings().getBedrockBlockId(BlockRegistries.JAVA_IDENTIFIERS.get(soundMapping.getIdentifier())));
+                soundPacket.setExtraData(session.getBlockMappings().getBedrockBlockId(
+                        BlockRegistries.JAVA_IDENTIFIERS.getOrDefault(soundMapping.getIdentifier(), BlockStateValues.JAVA_AIR_ID)));
             } else {
                 session.getConnector().getLogger().debug("PLACE sound mapping identifier was invalid! Please report: " + packet.toString());
             }

File: connector/src/main/java/org/geysermc/connector/entity/LivingEntity.java
Patch:
@@ -160,7 +160,8 @@ protected void setFreezing(GeyserSession session, float amount) {
      */
     protected AttributeData createHealthAttribute() {
         // Default health needs to be specified as the max health in order for maximum hearts to show correctly on mounted entities
-        return new AttributeData(GeyserAttributeType.HEALTH.getBedrockIdentifier(), 0f, this.maxHealth, this.health, this.maxHealth);
+        // Round health value up, so that Bedrock doesn't consider the entity to be dead when health is between 0 and 1
+        return new AttributeData(GeyserAttributeType.HEALTH.getBedrockIdentifier(), 0f, this.maxHealth, (float) Math.ceil(this.health), this.maxHealth);
     }
 
     public void updateArmor(GeyserSession session) {

File: connector/src/main/java/org/geysermc/connector/entity/living/monster/EnderDragonEntity.java
Patch:
@@ -110,7 +110,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
     @Override
     protected AttributeData createHealthAttribute() {
         // Round health up, so that Bedrock doesn't consider the dragon to be dead when health is between 0 and 1
-        return GeyserAttributeType.HEALTH.getAttribute((float) Math.ceil(this.health), this.maxHealth);
+        return new AttributeData(GeyserAttributeType.HEALTH.getBedrockIdentifier(), 0f, this.maxHealth, (float) Math.ceil(this.health), this.maxHealth);
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/entity/player/SkullPlayerEntity.java
Patch:
@@ -87,9 +87,6 @@ public void spawnEntity(GeyserSession session) {
 
         valid = true;
         session.sendUpstreamPacket(addPlayerPacket);
-
-        updateAllEquipment(session);
-        updateBedrockAttributes(session);
     }
 
     public void despawnEntity(GeyserSession session, Vector3i position) {

File: bootstrap/velocity/src/main/java/org/geysermc/platform/velocity/command/VelocityCommandSender.java
Patch:
@@ -28,7 +28,7 @@
 import com.velocitypowered.api.command.CommandSource;
 import com.velocitypowered.api.proxy.ConsoleCommandSource;
 import com.velocitypowered.api.proxy.Player;
-import net.kyori.text.TextComponent;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.geysermc.connector.command.CommandSender;
 import org.geysermc.connector.utils.LanguageUtils;
 
@@ -56,7 +56,7 @@ public String getName() {
 
     @Override
     public void sendMessage(String message) {
-        handle.sendMessage(TextComponent.of(message));
+        handle.sendMessage(LegacyComponentSerializer.legacy('§').deserialize(message));
     }
 
     @Override

File: common/src/main/java/org/geysermc/floodgate/news/data/BuildSpecificData.java
Patch:
@@ -34,6 +34,8 @@ public final class BuildSpecificData implements ItemData {
     private int affectedGreaterThan;
     private int affectedLessThan;
 
+    private BuildSpecificData() {}
+
     public static BuildSpecificData read(JsonObject data) {
         BuildSpecificData updateData = new BuildSpecificData();
         updateData.branch = data.get("branch").getAsString();

File: common/src/main/java/org/geysermc/floodgate/news/data/CheckAfterData.java
Patch:
@@ -27,9 +27,11 @@
 
 import com.google.gson.JsonObject;
 
-public class CheckAfterData implements ItemData {
+public final class CheckAfterData implements ItemData {
     private long checkAfter;
 
+    private CheckAfterData() {}
+
     public static CheckAfterData read(JsonObject data) {
         CheckAfterData checkAfterData = new CheckAfterData();
         checkAfterData.checkAfter = data.get("check_after").getAsLong();

File: connector/src/main/java/org/geysermc/connector/utils/GameRule.java
Patch:
@@ -51,13 +51,15 @@ public enum GameRule {
     DROWNINGDAMAGE("drowningDamage", Boolean.class, true),
     FALLDAMAGE("fallDamage", Boolean.class, true),
     FIREDAMAGE("fireDamage", Boolean.class, true),
+    FREEZEDAMAGE("freezeDamage", Boolean.class, true),
     FORGIVEDEADPLAYERS("forgiveDeadPlayers", Boolean.class, true), // JE only
     KEEPINVENTORY("keepInventory", Boolean.class, false),
     LOGADMINCOMMANDS("logAdminCommands", Boolean.class, true), // JE only
     MAXCOMMANDCHAINLENGTH("maxCommandChainLength", Integer.class, 65536),
     MAXENTITYCRAMMING("maxEntityCramming", Integer.class, 24), // JE only
     MOBGRIEFING("mobGriefing", Boolean.class, true),
     NATURALREGENERATION("naturalRegeneration", Boolean.class, true),
+    PLAYERSSLEEPINGPERCENTAGE("playersSleepingPercentage", Integer.class, 100), // JE only
     RANDOMTICKSPEED("randomTickSpeed", Integer.class, 3),
     REDUCEDDEBUGINFO("reducedDebugInfo", Boolean.class, false), // JE only
     SENDCOMMANDFEEDBACK("sendCommandFeedback", Boolean.class, true),
@@ -68,7 +70,7 @@ public enum GameRule {
 
     UNKNOWN("unknown", Object.class);
 
-    private static final GameRule[] VALUES = values();
+    public static final GameRule[] VALUES = values();
 
     @Getter
     private final String javaID;

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -97,7 +97,7 @@ public enum EntityType {
     VINDICATOR(VindicatorEntity.class, 57, 1.8f, 0.6f, 0.6f, 1.62f),
     PILLAGER(PillagerEntity.class, 114, 1.8f, 0.6f, 0.6f, 1.62f),
     WANDERING_TRADER(AbstractMerchantEntity.class, 118, 1.8f, 0.6f, 0.6f, 1.62f),
-    PHANTOM(FlyingEntity.class, 58, 0.5f, 0.9f, 0.9f, 0.6f),
+    PHANTOM(PhantomEntity.class, 58, 0.5f, 0.9f, 0.9f, 0.6f),
     RAVAGER(RaidParticipantEntity.class, 59, 1.9f, 1.2f),
 
     ARMOR_STAND(ArmorStandEntity.class, 61, 1.975f, 0.5f),

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/InventoryTranslator.java
Patch:
@@ -56,6 +56,7 @@
 import org.geysermc.connector.network.translators.inventory.translators.furnace.FurnaceInventoryTranslator;
 import org.geysermc.connector.network.translators.inventory.translators.furnace.SmokerInventoryTranslator;
 import org.geysermc.connector.utils.InventoryUtils;
+import org.geysermc.connector.utils.ItemUtils;
 
 import java.util.*;
 
@@ -865,7 +866,7 @@ public static ItemStackResponsePacket.ItemEntry makeItemEntry(int bedrockSlot, G
             if (itemStack.getNbt() != null) {
                 Tag damage = itemStack.getNbt().get("Damage");
                 if (damage instanceof IntTag) {
-                    durability = ((IntTag) damage).getValue();
+                    durability = ItemUtils.getCorrectBedrockDurability(itemStack.getJavaId(), ((IntTag) damage).getValue());
                 }
             }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemTranslator.java
Patch:
@@ -226,14 +226,14 @@ public ItemData.Builder translateToBedrock(ItemStack itemStack, ItemEntry itemEn
     public ItemStack translateToJava(ItemData itemData, ItemEntry itemEntry) {
         if (itemData == null) return null;
         if (itemData.getTag() == null) {
-            return new ItemStack(itemEntry.getJavaId(), itemData.getCount(), new com.github.steveice10.opennbt.tag.builtin.CompoundTag(""));
+            return new ItemStack(itemEntry.getJavaId(), itemData.getCount(), new CompoundTag(""));
         }
         return new ItemStack(itemEntry.getJavaId(), itemData.getCount(), this.translateToJavaNBT("", itemData.getTag()));
     }
 
     public abstract List<ItemEntry> getAppliedItems();
 
-    public NbtMap translateNbtToBedrock(com.github.steveice10.opennbt.tag.builtin.CompoundTag tag) {
+    public NbtMap translateNbtToBedrock(CompoundTag tag) {
         NbtMapBuilder builder = NbtMap.builder();
         if (tag.getValue() != null && !tag.getValue().isEmpty()) {
             for (String str : tag.getValue().keySet()) {
@@ -248,7 +248,7 @@ public NbtMap translateNbtToBedrock(com.github.steveice10.opennbt.tag.builtin.Co
         return builder.build();
     }
 
-    private Object translateToBedrockNBT(com.github.steveice10.opennbt.tag.builtin.Tag tag) {
+    private Object translateToBedrockNBT(Tag tag) {
         if (tag instanceof ByteArrayTag) {
             return ((ByteArrayTag) tag).getValue();
         }

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/GeyserSpigotPingPassthrough.java
Patch:
@@ -34,6 +34,7 @@
 import org.geysermc.connector.common.ping.GeyserPingInfo;
 import org.geysermc.connector.ping.IGeyserPingPassthrough;
 
+import javax.annotation.Nonnull;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.util.Collections;
@@ -72,9 +73,10 @@ public GeyserPingEvent(InetAddress address, String motd, int numPlayers, int max
         public void setServerIcon(CachedServerIcon icon) throws IllegalArgumentException, UnsupportedOperationException {
         }
 
+        @Nonnull
         @Override
         public Iterator<Player> iterator() throws UnsupportedOperationException {
-            return Collections.EMPTY_LIST.iterator();
+            return Collections.emptyIterator();
         }
     }
 

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/GeyserSpigotPlugin.java
Patch:
@@ -150,7 +150,7 @@ public void onEnable() {
             this.geyserSpigotPingPassthrough = new GeyserSpigotPingPassthrough(geyserLogger);
         }
 
-        this.geyserCommandManager = new GeyserSpigotCommandManager(this, connector);
+        this.geyserCommandManager = new GeyserSpigotCommandManager(connector);
 
         boolean isViaVersion = Bukkit.getPluginManager().getPlugin("ViaVersion") != null;
         if (isViaVersion) {

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/world/manager/GeyserSpigot1_12WorldManager.java
Patch:
@@ -93,7 +93,6 @@ public int getBlockAt(GeyserSession session, int x, int y, int z) {
      * @param z Z coordinate of block
      * @return the block state updated to the latest Minecraft version
      */
-    @SuppressWarnings("deprecation")
     public int getLegacyBlock(BlockStorage storage, int blockId, int x, int y, int z) {
         // Convert block state from old version (1.12.2) -> 1.13 -> 1.13.1 -> 1.14 -> 1.15 -> 1.16 -> 1.16.2
         blockId = mappingData1_12to1_13.getNewBlockId(blockId);

File: bootstrap/sponge/src/main/java/org/geysermc/platform/sponge/command/GeyserSpongeCommandExecutor.java
Patch:
@@ -33,7 +33,6 @@
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.utils.LanguageUtils;
 import org.spongepowered.api.command.CommandCallable;
-import org.spongepowered.api.command.CommandException;
 import org.spongepowered.api.command.CommandResult;
 import org.spongepowered.api.command.CommandSource;
 import org.spongepowered.api.text.Text;
@@ -81,7 +80,7 @@ public CommandResult process(CommandSource source, String arguments) {
     }
 
     @Override
-    public List<String> getSuggestions(CommandSource source, String arguments, @Nullable Location<World> targetPosition) throws CommandException {
+    public List<String> getSuggestions(CommandSource source, String arguments, @Nullable Location<World> targetPosition) {
         if (arguments.split(" ").length == 1) {
             return connector.getCommandManager().getCommandNames();
         }

File: bootstrap/standalone/src/main/java/org/geysermc/platform/standalone/GeyserStandaloneDumpInfo.java
Patch:
@@ -30,8 +30,7 @@
 
 @Getter
 public class GeyserStandaloneDumpInfo extends BootstrapDumpInfo {
-
-    private boolean isGui;
+    private final boolean isGui;
 
     GeyserStandaloneDumpInfo(GeyserStandaloneBootstrap bootstrap) {
         super();

File: bootstrap/standalone/src/main/java/org/geysermc/platform/standalone/LoopbackUtil.java
Patch:
@@ -30,7 +30,6 @@
 
 import java.io.InputStream;
 import java.nio.file.Files;
-import java.nio.file.OpenOption;
 import java.nio.file.Paths;
 
 public class LoopbackUtil {
@@ -54,7 +53,7 @@ public static void checkLoopback(GeyserStandaloneLogger geyserLogger) {
                 String result = sb.toString();
 
                 if (!result.contains("minecraftuwp")) {
-                    Files.write(Paths.get(System.getenv("temp") + "/loopback_minecraft.bat"), loopbackCommand.getBytes(), new OpenOption[0]);
+                    Files.write(Paths.get(System.getenv("temp") + "/loopback_minecraft.bat"), loopbackCommand.getBytes());
                     Runtime.getRuntime().exec(startScript);
 
                     geyserLogger.info(ChatColor.AQUA + LanguageUtils.getLocaleStringLog("geyser.bootstrap.loopback.added"));

File: bootstrap/standalone/src/main/java/org/geysermc/platform/standalone/gui/ColorPane.java
Patch:
@@ -60,8 +60,8 @@ private void append(Color c, String s) {
      */
     public void appendANSI(String s) { // convert ANSI color codes first
         int aPos = 0;   // current char position in addString
-        int aIndex = 0; // index of next Escape sequence
-        int mIndex = 0; // index of "m" terminating Escape sequence
+        int aIndex; // index of next Escape sequence
+        int mIndex; // index of "m" terminating Escape sequence
         String tmpString = "";
         boolean stillSearching = true; // true until no more Escape sequences
         String addString = remaining + s;
@@ -83,7 +83,6 @@ public void appendANSI(String s) { // convert ANSI color codes first
 
 
             // while there's text in the input buffer
-            stillSearching = true;
             while (stillSearching) {
                 mIndex = addString.indexOf("m", aPos); // find the end of the escape sequence
                 if (mIndex < 0) { // the buffer ends halfway through the ansi string!

File: bootstrap/standalone/src/main/java/org/geysermc/platform/standalone/gui/GraphPanel.java
Patch:
@@ -46,7 +46,7 @@ public final class GraphPanel extends JPanel {
     private final static Color pointColor = new Color(100, 100, 100, 255);
     private final static Color gridColor = new Color(200, 200, 200, 255);
     private static final Stroke graphStroke = new BasicStroke(2f);
-    private List<Integer> values = new ArrayList<>(10);
+    private final List<Integer> values = new ArrayList<>(10);
 
     @Setter
     private String xLabel = "";
@@ -172,6 +172,7 @@ protected void paintComponent(Graphics graphics) {
             for (Point graphPoint : graphPoints) {
                 final int x = graphPoint.x - pointWidth / 2;
                 final int y = graphPoint.y - pointWidth / 2;
+                //noinspection SuspiciousNameCombination
                 g.fillOval(x, y, pointWidth, pointWidth);
             }
         }

File: connector/src/main/java/org/geysermc/connector/command/defaults/HelpCommand.java
Patch:
@@ -38,8 +38,7 @@
 import java.util.stream.Collectors;
 
 public class HelpCommand extends GeyserCommand {
-
-    public GeyserConnector connector;
+    private final GeyserConnector connector;
 
     public HelpCommand(GeyserConnector connector, String name, String description, String permission) {
         super(name, description, permission);

File: connector/src/main/java/org/geysermc/connector/command/defaults/ListCommand.java
Patch:
@@ -45,8 +45,7 @@ public ListCommand(GeyserConnector connector, String name, String description, S
 
     @Override
     public void execute(GeyserSession session, CommandSender sender, String[] args) {
-        String message = "";
-        message = LanguageUtils.getPlayerLocaleString("geyser.commands.list.message", sender.getLocale(),
+        String message = LanguageUtils.getPlayerLocaleString("geyser.commands.list.message", sender.getLocale(),
                 connector.getPlayers().size(),
                 connector.getPlayers().stream().map(GeyserSession::getName).collect(Collectors.joining(" ")));
 

File: connector/src/main/java/org/geysermc/connector/common/main/IGeyserMain.java
Patch:
@@ -84,7 +84,8 @@ private boolean isHeadless() {
             Class<?> graphicsEnvironment = Class.forName("java.awt.GraphicsEnvironment");
             Method isHeadless = graphicsEnvironment.getDeclaredMethod("isHeadless");
             return (Boolean)isHeadless.invoke(null);
-        } catch (Exception ex) { }
+        } catch (Exception ignored) {
+        }
 
         return true;
     }

File: connector/src/main/java/org/geysermc/connector/inventory/Inventory.java
Patch:
@@ -53,7 +53,7 @@ public class Inventory {
     @Setter
     protected String title;
 
-    protected GeyserItemStack[] items;
+    protected final GeyserItemStack[] items;
 
     /**
      * The location of the inventory block. Will either be a fake block above the player's head, or the actual block location

File: connector/src/main/java/org/geysermc/connector/network/QueryPacketHandler.java
Patch:
@@ -83,7 +83,7 @@ public QueryPacketHandler(GeyserConnector connector, InetSocketAddress sender, B
      * @return if the packet is a query packet
      */
     private boolean isQueryPacket(ByteBuf buffer) {
-        return (buffer.readableBytes() >= 2) ? buffer.readUnsignedShort() == 0xFEFD : false;
+        return buffer.readableBytes() >= 2 && buffer.readUnsignedShort() == 0xFEFD;
     }
 
     /**

File: connector/src/main/java/org/geysermc/connector/network/translators/chat/MinecraftTranslationRegistry.java
Patch:
@@ -31,6 +31,7 @@
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.geysermc.connector.utils.LocaleUtils;
 
+import javax.annotation.Nonnull;
 import java.text.MessageFormat;
 import java.util.Locale;
 import java.util.regex.Matcher;
@@ -42,7 +43,7 @@
  */
 public class MinecraftTranslationRegistry implements Translator {
     @Override
-    public @NonNull Key name() {
+    public @Nonnull Key name() {
         return Key.key("geyser", "minecraft_translations");
     }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/collision/CollisionRemapper.java
Patch:
@@ -25,7 +25,6 @@
 
 package org.geysermc.connector.network.translators.collision;
 
-import java.lang.annotation.Repeatable;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemEntry.java
Patch:
@@ -34,8 +34,7 @@
 @AllArgsConstructor
 @ToString
 public class ItemEntry {
-
-    public static ItemEntry AIR = new ItemEntry("minecraft:air", "minecraft:air", 0, 0, 0,
+    public static final ItemEntry AIR = new ItemEntry("minecraft:air", "minecraft:air", 0, 0, 0,
             BlockTranslator1_17_0.INSTANCE.getBedrockAirId(), 64);
 
     private final String javaIdentifier;

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemTranslator.java
Patch:
@@ -296,7 +296,7 @@ private Object translateToBedrockNBT(com.github.steveice10.opennbt.tag.builtin.T
             ListTag listTag = (ListTag) tag;
 
             List<Object> tagList = new ArrayList<>();
-            for (com.github.steveice10.opennbt.tag.builtin.Tag value : listTag) {
+            for (Tag value : listTag) {
                 tagList.add(translateToBedrockNBT(value));
             }
             NbtType<?> type = NbtType.COMPOUND;

File: connector/src/main/java/org/geysermc/connector/network/translators/item/translators/BannerTranslator.java
Patch:
@@ -131,8 +131,8 @@ public static NbtMap getBedrockBannerPattern(CompoundTag pattern) {
      */
     public static ListTag convertBannerPattern(List<NbtMap> patterns) {
         List<Tag> tagsList = new ArrayList<>();
-        for (Object patternTag : patterns) {
-            tagsList.add(getJavaBannerPattern((NbtMap) patternTag));
+        for (NbtMap patternTag : patterns) {
+            tagsList.add(getJavaBannerPattern(patternTag));
         }
 
         return new ListTag("Patterns", tagsList);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaBossBarTranslator.java
Patch:
@@ -55,7 +55,6 @@ public void translate(ServerBossBarPacket packet, GeyserSession session) {
             case UPDATE_STYLE:
             case UPDATE_FLAGS:
                 //todo
-                return;
         }
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaUpdateTileEntityTranslator.java
Patch:
@@ -29,6 +29,7 @@
 import com.github.steveice10.mc.protocol.data.game.world.block.UpdatedTileType;
 import com.github.steveice10.mc.protocol.packet.ingame.server.world.ServerUpdateTileEntityPacket;
 import com.nukkitx.math.vector.Vector3i;
+import com.nukkitx.nbt.NbtMap;
 import com.nukkitx.protocol.bedrock.data.inventory.ContainerType;
 import com.nukkitx.protocol.bedrock.packet.ContainerOpenPacket;
 import org.geysermc.connector.network.session.GeyserSession;
@@ -47,7 +48,7 @@ public class JavaUpdateTileEntityTranslator extends PacketTranslator<ServerUpdat
     public void translate(ServerUpdateTileEntityPacket packet, GeyserSession session) {
         String id = BlockEntityUtils.getBedrockBlockEntityId(packet.getType().name());
         if (packet.getNbt().isEmpty()) { // Fixes errors in servers sending empty NBT
-            BlockEntityUtils.updateBlockEntity(session, null, packet.getPosition());
+            BlockEntityUtils.updateBlockEntity(session, NbtMap.EMPTY, packet.getPosition());
             return;
         }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaUpdateViewPositionTranslator.java
Patch:
@@ -32,7 +32,6 @@
 
 import com.github.steveice10.mc.protocol.packet.ingame.server.world.ServerUpdateViewPositionPacket;
 import com.nukkitx.math.vector.Vector3i;
-import com.nukkitx.protocol.bedrock.packet.NetworkChunkPublisherUpdatePacket;
 
 @Translator(packet = ServerUpdateViewPositionPacket.class)
 public class JavaUpdateViewPositionTranslator extends PacketTranslator<ServerUpdateViewPositionPacket> {

File: connector/src/main/java/org/geysermc/connector/network/translators/sound/SoundRegistry.java
Patch:
@@ -70,7 +70,7 @@ public static void init() {
                             brMap.has("playsound_mapping") && brMap.get("playsound_mapping").isTextual() ? brMap.get("playsound_mapping").asText() : null,
                             brMap.has("extra_data") && brMap.get("extra_data").isInt() ? brMap.get("extra_data").asInt() : -1,
                             brMap.has("identifier") && brMap.get("identifier").isTextual() ? brMap.get("identifier").asText() : null,
-                            brMap.has("level_event") && brMap.get("level_event").isBoolean() ? brMap.get("level_event").asBoolean() : false
+                            brMap.has("level_event") && brMap.get("level_event").isBoolean() && brMap.get("level_event").asBoolean()
                     )
             );
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/sound/block/BucketSoundInteractionHandler.java
Patch:
@@ -29,7 +29,6 @@
 import com.nukkitx.protocol.bedrock.data.SoundEvent;
 import com.nukkitx.protocol.bedrock.packet.LevelSoundEventPacket;
 import org.geysermc.connector.network.session.GeyserSession;
-import org.geysermc.connector.network.translators.item.ItemRegistry;
 import org.geysermc.connector.network.translators.sound.BlockSoundInteractionHandler;
 import org.geysermc.connector.network.translators.sound.SoundHandler;
 

File: connector/src/main/java/org/geysermc/connector/ping/GeyserLegacyPingPassthrough.java
Patch:
@@ -43,8 +43,7 @@
 import java.util.concurrent.TimeUnit;
 
 public class GeyserLegacyPingPassthrough implements IGeyserPingPassthrough, Runnable {
-
-    private GeyserConnector connector;
+    private final GeyserConnector connector;
 
     public GeyserLegacyPingPassthrough(GeyserConnector connector) {
         this.connector = connector;

File: connector/src/main/java/org/geysermc/connector/utils/FileUtils.java
Patch:
@@ -205,7 +205,8 @@ public static Reflections getReflections(String path) {
         URL resource = FileUtils.class.getClassLoader().getResource("META-INF/reflections/" + path + "-reflections.xml");
         try (InputStream inputStream = resource.openConnection().getInputStream()) {
             reflections.merge(serializer.read(inputStream));
-        } catch (IOException e) { }
+        } catch (IOException ignored) {
+        }
 
         return reflections;
     }

File: connector/src/main/java/org/geysermc/connector/utils/GameRule.java
Patch:
@@ -71,13 +71,13 @@ public enum GameRule {
     private static final GameRule[] VALUES = values();
 
     @Getter
-    private String javaID;
+    private final String javaID;
 
     @Getter
-    private Class<?> type;
+    private final Class<?> type;
 
     @Getter
-    private Object defaultValue;
+    private final Object defaultValue;
 
     GameRule(String javaID, Class<?> type) {
         this(javaID, type, null);

File: connector/src/main/java/org/geysermc/connector/utils/LocaleUtils.java
Patch:
@@ -136,7 +136,7 @@ private static void downloadLocale(String locale) {
         // Check if we have already downloaded the locale file
         if (localeFile.exists()) {
             String curHash = "";
-            String targetHash = "";
+            String targetHash;
 
             if (locale.equals("en_us")) {
                 try {

File: connector/src/main/java/org/geysermc/connector/utils/MapColor.java
Patch:
@@ -287,6 +287,6 @@ public int toABGR() {
         return ((alpha & 0xFF) << 24) |
                ((blue & 0xFF) << 16) |
                ((green & 0xFF) << 8) |
-               ((red & 0xFF) << 0);
+               (red & 0xFF);
     }
 }
\ No newline at end of file

File: connector/src/main/java/org/geysermc/connector/utils/SettingsUtils.java
Patch:
@@ -34,8 +34,6 @@
 import org.geysermc.cumulus.component.DropdownComponent;
 import org.geysermc.cumulus.response.CustomFormResponse;
 
-import java.util.ArrayList;
-
 public class SettingsUtils {
     /**
      * Build a settings form for the given session and store it for later

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaPlayEffectTranslator.java
Patch:
@@ -49,7 +49,6 @@ public class JavaPlayEffectTranslator extends PacketTranslator<ServerPlayEffectP
 
     @Override
     public void translate(ServerPlayEffectPacket packet, GeyserSession session) {
-        System.out.println(packet.toString());
         // Separate case since each RecordEffectData in Java is an individual track in Bedrock
         if (packet.getEffect() == SoundEffect.RECORD) {
             RecordEffectData recordEffectData = (RecordEffectData) packet.getData();

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/tameable/CatEntity.java
Patch:
@@ -50,7 +50,7 @@ public void updateRotation(GeyserSession session, float yaw, float pitch, boolea
     public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession session) {
         super.updateBedrockMetadata(entityMetadata, session);
         if (entityMetadata.getId() == 16) {
-            metadata.put(EntityData.SCALE, (boolean) entityMetadata.getValue() ? 0.8f : 0.4f);
+            metadata.put(EntityData.SCALE, (boolean) entityMetadata.getValue() ? 0.4f : 0.8f);
         } else if (entityMetadata.getId() == 17) {
             // Update collar color if tamed
             if (metadata.getFlags().getFlag(EntityFlag.TAMED)) {

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -543,7 +543,7 @@ public boolean isProductionEnvironment() {
 
     /**
      * Whether to use XML reflections in the jar or manually find the reflections.
-     * Will return true  and the platform is not Fabric.
+     * Will return true if in production and the platform is not Fabric.
      * On Fabric - it complains about being unable to create a default XMLReader.
      * On other platforms this should only be true in compiled jars.
      *

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -236,7 +236,7 @@ private GeyserConnector(PlatformType platformType, GeyserBootstrap bootstrap) {
             if (build != null) {
                 buildNumber = Integer.parseInt(build);
             }
-        } catch (Exception e) {
+        } catch (Throwable e) {
             logger.error("Failed to read git.properties", e);
         }
         newsHandler = new NewsHandler(branch, buildNumber);

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/PufferFishEntity.java
Patch:
@@ -41,8 +41,6 @@ public PufferFishEntity(long entityId, long geyserId, EntityType entityType, Vec
     @Override
     public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession session) {
         if (entityMetadata.getId() == 17) {
-            // Transfers correctly but doesn't apply on the client
-            //TODO check - probably because we didn't set PUFFERFISH_SIZE as a byte
             int puffsize = (int) entityMetadata.getValue();
             metadata.put(EntityData.PUFFERFISH_SIZE, (byte) puffsize);
             metadata.put(EntityData.VARIANT, puffsize);

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -391,7 +391,9 @@ public void run() {
 
         generalThreadPool.shutdown();
         bedrockServer.close();
-        timeSyncer.shutdown();
+        if (timeSyncer != null) {
+            timeSyncer.shutdown();
+        }
         newsHandler.shutdown();
         players.clear();
         defaultAuthType = null;

File: connector/src/main/java/org/geysermc/connector/network/translators/PacketTranslatorRegistry.java
Patch:
@@ -68,10 +68,10 @@ public class PacketTranslatorRegistry<T> {
 
                     BEDROCK_TRANSLATOR.translators.put(targetPacket, translator);
                 } else {
-                    GeyserConnector.getInstance().getLogger().error(LanguageUtils.getLocaleStringLog("geyser.network.translator.invalid_target", clazz.getCanonicalName()));
+                    GeyserConnector.getInstance().getLogger().error("Class " + clazz.getCanonicalName() + " is annotated as a translator but has an invalid target packet.");
                 }
             } catch (InstantiationException | IllegalAccessException e) {
-                GeyserConnector.getInstance().getLogger().error(LanguageUtils.getLocaleStringLog("geyser.network.translator.failed", clazz.getCanonicalName()));
+                GeyserConnector.getInstance().getLogger().error("Could not instantiate annotated translator " + clazz.getCanonicalName());
             }
         }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/entity/BlockEntityTranslator.java
Patch:
@@ -35,7 +35,6 @@
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.utils.BlockEntityUtils;
 import org.geysermc.connector.utils.FileUtils;
-import org.geysermc.connector.utils.LanguageUtils;
 import org.reflections.Reflections;
 
 import java.util.HashMap;
@@ -80,7 +79,7 @@ public static void init() {
             try {
                 BLOCK_ENTITY_TRANSLATORS.put(clazz.getAnnotation(BlockEntity.class).name(), (BlockEntityTranslator) clazz.newInstance());
             } catch (InstantiationException | IllegalAccessException e) {
-                GeyserConnector.getInstance().getLogger().error(LanguageUtils.getLocaleStringLog("geyser.network.translator.block_entity.failed", clazz.getCanonicalName()));
+                GeyserConnector.getInstance().getLogger().error("Could not instantiate annotated block entity" + clazz.getCanonicalName());
             }
         }
         for (Class<?> clazz : ref.getSubTypesOf(BedrockOnlyBlockEntity.class)) {
@@ -90,7 +89,7 @@ public static void init() {
                 BedrockOnlyBlockEntity bedrockOnlyBlockEntity = (BedrockOnlyBlockEntity) clazz.newInstance();
                 BEDROCK_ONLY_BLOCK_ENTITIES.add(bedrockOnlyBlockEntity);
             } catch (InstantiationException | IllegalAccessException e) {
-                GeyserConnector.getInstance().getLogger().error(LanguageUtils.getLocaleStringLog("geyser.network.translator.block_state.failed", clazz.getCanonicalName()));
+                GeyserConnector.getInstance().getLogger().error("Could not instantiate annotated block state " + clazz.getCanonicalName());
             }
         }
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemRegistry.java
Patch:
@@ -456,7 +456,7 @@ public static void init() {
                 BOATS.add(entry.getValue().get("bedrock_id").intValue());
             } else if (entry.getKey().contains("bucket") && !entry.getKey().contains("milk")) {
                 BUCKETS.add(entry.getValue().get("bedrock_id").intValue());
-            } else if (entry.getKey().contains("_carpet")) {
+            } else if (entry.getKey().contains("_carpet") && !entry.getKey().contains("moss")) {
                 // This should be the numerical order Java sends as an integer value for llamas
                 CARPETS.add(ItemData.builder()
                         .id(itemEntry.getBedrockId())

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaSpawnParticleTranslator.java
Patch:
@@ -114,7 +114,8 @@ private Function<Vector3f, BedrockPacket> createParticle(GeyserSession session,
                     return packet;
                 };
             }
-            case DUST: {
+            case DUST:
+            case DUST_COLOR_TRANSITION: { //TODO
                 DustParticleData data = (DustParticleData) particle.getData();
                 int r = (int) (data.getRed() * 255);
                 int g = (int) (data.getGreen() * 255);

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -130,7 +130,7 @@ public enum EntityType {
     THROWN_ENDERPEARL(ThrowableEntity.class, 87, 0.25f, 0.25f, 0.25f, 0f, "minecraft:ender_pearl"),
     LEASH_KNOT(LeashKnotEntity.class, 88, 0.5f, 0.375f),
     WITHER_SKULL(WitherSkullEntity.class, 89, 0.3125f),
-    BOAT(BoatEntity.class, 90, 0.7f, 1.6f, 1.6f, 0.35f),
+    BOAT(BoatEntity.class, 90, 0.6f, 1.6f, 1.6f, 0.35f),
     WITHER_SKULL_DANGEROUS(WitherSkullEntity.class, 91, 0f),
     LIGHTNING_BOLT(Entity.class, 93, 0f),
     SMALL_FIREBALL(ItemedFireballEntity.class, 94, 0.3125f),

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockMoveEntityAbsoluteTranslator.java
Patch:
@@ -45,9 +45,8 @@ public void translate(MoveEntityAbsolutePacket packet, GeyserSession session) {
 
         float y = packet.getPosition().getY();
         if (session.getRidingVehicleEntity() instanceof BoatEntity) {
-            // Remove some Y position to prevents boats from looking like they're floating in water
-            // Not by the full boat offset because 1.16.100 complains and that's probably not good for the future
-            y -= (EntityType.BOAT.getOffset() - 0.5f);
+            // Remove the offset to prevents boats from looking like they're floating in water
+            y -= EntityType.BOAT.getOffset();
         }
         ClientVehicleMovePacket clientVehicleMovePacket = new ClientVehicleMovePacket(
                 packet.getPosition().getX(), y, packet.getPosition().getZ(),

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaVehicleMoveTranslator.java
Patch:
@@ -40,7 +40,6 @@ public void translate(ServerVehicleMovePacket packet, GeyserSession session) {
         Entity entity = session.getRidingVehicleEntity();
         if (entity == null) return;
 
-        entity.moveAbsolute(session, Vector3f.from(packet.getX(), packet.getY(), packet.getZ()), packet.getYaw(), packet.getPitch(), false, false);
-
+        entity.moveAbsolute(session, Vector3f.from(packet.getX(), packet.getY(), packet.getZ()), packet.getYaw(), packet.getPitch(), false, true);
     }
 }

File: connector/src/main/java/org/geysermc/connector/entity/AreaEffectCloudEntity.java
Patch:
@@ -59,7 +59,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
             metadata.put(EntityData.EFFECT_COLOR, entityMetadata.getValue());
         } else if (entityMetadata.getId() == 10) {
             Particle particle = (Particle) entityMetadata.getValue();
-            int particleId = EffectRegistry.getParticleId(particle.getType());
+            int particleId = EffectRegistry.getParticleId(session, particle.getType());
             if (particleId != -1) {
                 metadata.put(EntityData.AREA_EFFECT_CLOUD_PARTICLE_ID, particleId);
             }

File: connector/src/main/java/org/geysermc/connector/network/session/cache/BookEditCache.java
Patch:
@@ -68,7 +68,7 @@ public void checkForSend() {
             packet = null;
             return;
         }
-        session.getDownstream().getSession().send(packet);
+        session.sendDownstreamPacket(packet);
         packet = null;
         lastBookUpdate = System.currentTimeMillis();
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/BlockTranslator.java
Patch:
@@ -143,8 +143,6 @@ public abstract class BlockTranslator {
                 builder.canBreakWithHand(false);
             }
 
-            builder.toolType(""); //TODO
-
             JsonNode collisionIndexNode = entry.getValue().get("collision_index");
             if (hardnessNode != null) {
                 builder.collisionIndex(collisionIndexNode.intValue());

File: connector/src/main/java/org/geysermc/connector/registry/type/BlockMapping.java
Patch:
@@ -28,7 +28,6 @@
 import lombok.Builder;
 import lombok.Value;
 
-import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 
 @Builder
@@ -45,7 +44,6 @@ public class BlockMapping {
 
     double hardness;
     boolean canBreakWithHand;
-    @Nonnull String toolType;
     /**
      * The index of this collision in collision.json
      */

File: connector/src/main/java/org/geysermc/connector/utils/CooldownUtils.java
Patch:
@@ -48,7 +48,7 @@ public static CooldownType getDefaultShowCooldown() {
     }
 
     /**
-     * Starts sending the fake cooldown to the Bedrock client. If the cooldown is not disabled, the sent type is {@link PreferencesCache#getCooldownPreference()}
+     * Starts sending the fake cooldown to the Bedrock client. If the cooldown is not disabled, the sent type is the cooldownPreference in {@link PreferencesCache}
      * @param session GeyserSession
      */
     public static void sendCooldown(GeyserSession session) {

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -188,7 +188,7 @@ private GeyserConnector(PlatformType platformType, GeyserBootstrap bootstrap) {
 
         defaultAuthType = AuthType.getByName(config.getRemote().getAuthType());
 
-        CooldownUtils.setShowCooldown(config.getShowCooldown());
+        CooldownUtils.setDefaultShowCooldown(config.getShowCooldown());
         DimensionUtils.changeBedrockNetherId(config.isAboveBedrockNetherBuilding()); // Apply End dimension ID workaround to Nether
         SkullBlockEntityTranslator.ALLOW_CUSTOM_SKULLS = config.isAllowCustomSkulls();
 

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -144,6 +144,7 @@ public class GeyserSession implements CommandSender {
     private ChunkCache chunkCache;
     private EntityCache entityCache;
     private EntityEffectCache effectCache;
+    private final PreferencesCache preferencesCache;
     private final TagCache tagCache;
     private WorldCache worldCache;
     private WindowCache windowCache;
@@ -451,6 +452,7 @@ public GeyserSession(GeyserConnector connector, BedrockServerSession bedrockServ
         this.chunkCache = new ChunkCache(this);
         this.entityCache = new EntityCache(this);
         this.effectCache = new EntityEffectCache();
+        this.preferencesCache = new PreferencesCache(this);
         this.tagCache = new TagCache();
         this.worldCache = new WorldCache(this);
         this.windowCache = new WindowCache(this);
@@ -1224,7 +1226,7 @@ public void sendDownstreamPacket(Packet packet) {
     public void setReducedDebugInfo(boolean value) {
         reducedDebugInfo = value;
         // Set the showCoordinates data. This is done because updateShowCoordinates() uses this gamerule as a variable.
-        getWorldCache().updateShowCoordinates();
+        preferencesCache.updateShowCoordinates();
     }
 
     /**

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaBlockChangeTranslator.java
Patch:
@@ -68,7 +68,7 @@ private boolean checkPlace(GeyserSession session, ServerBlockChangePacket packet
         // We need to check if the identifier is the same, else a packet with the sound of what the
         // player has in their hand is played, despite if the block is being placed or not
         boolean contains = false;
-        String identifier = BlockTranslator.getJavaIdBlockMap().inverse().get(packet.getRecord().getBlock()).split("\\[")[0];
+        String identifier = BlockTranslator.getBlockMapping(packet.getRecord().getBlock()).getItemIdentifier();
         if (identifier.equals(session.getLastBlockPlacedId())) {
             contains = true;
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockInventoryTransactionTranslator.java
Patch:
@@ -321,15 +321,15 @@ else if (packet.getItemInHand() != null && ItemRegistry.BUCKETS.contains(packet.
                             session.sendUpstreamPacket(openPacket);
                             break;
                         }
-                        Vector3f vector = packet.getClickPosition();
+                        Vector3f vector = packet.getClickPosition().sub(entity.getPosition());
                         ClientPlayerInteractEntityPacket interactPacket = new ClientPlayerInteractEntityPacket((int) entity.getEntityId(),
                                 InteractAction.INTERACT, Hand.MAIN_HAND, session.isSneaking());
                         ClientPlayerInteractEntityPacket interactAtPacket = new ClientPlayerInteractEntityPacket((int) entity.getEntityId(),
                                 InteractAction.INTERACT_AT, vector.getX(), vector.getY(), vector.getZ(), Hand.MAIN_HAND, session.isSneaking());
                         session.sendDownstreamPacket(interactPacket);
                         session.sendDownstreamPacket(interactAtPacket);
 
-                        EntitySoundInteractionHandler.handleEntityInteraction(session, vector, entity);
+                        EntitySoundInteractionHandler.handleEntityInteraction(session, packet.getClickPosition(), entity);
                         break;
                     case 1: //Attack
                         if (entity.getEntityType() == EntityType.ENDER_DRAGON) {

File: connector/src/main/java/org/geysermc/connector/entity/living/monster/AbstractSkeletonEntity.java
Patch:
@@ -42,7 +42,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
         if (entityMetadata.getId() == 14) {
             byte xd = (byte) entityMetadata.getValue();
             // A bit of a loophole so the hands get raised - set the target ID to its own ID
-            metadata.put(EntityData.TARGET_EID, (xd == 4) ? geyserId : 0);
+            metadata.put(EntityData.TARGET_EID, ((xd & 4) == 4) ? geyserId : 0);
         }
         super.updateBedrockMetadata(entityMetadata, session);
     }

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -1022,7 +1022,6 @@ private void startGame() {
         startGamePacket.setLightningLevel(0);
         startGamePacket.setMultiplayerGame(true);
         startGamePacket.setBroadcastingToLan(true);
-        startGamePacket.getGamerules().add(new GameRuleData<>("showcoordinates", connector.getConfig().isShowCoordinates()));
         startGamePacket.setPlatformBroadcastMode(GamePublishSetting.PUBLIC);
         startGamePacket.setXblBroadcastMode(GamePublishSetting.PUBLIC);
         startGamePacket.setCommandsEnabled(!connector.getConfig().isXboxAchievementsEnabled());
@@ -1214,13 +1213,14 @@ public void sendDownstreamPacket(Packet packet) {
 
     /**
      * Update the cached value for the reduced debug info gamerule.
-     * This also toggles the coordinates display
+     * If enabled, also hides the player's coordinates.
      *
      * @param value The new value for reducedDebugInfo
      */
     public void setReducedDebugInfo(boolean value) {
-        worldCache.setShowCoordinates(!value);
         reducedDebugInfo = value;
+        // Set the showCoordinates data. This is done because updateShowCoordinates() uses this gamerule as a variable.
+        getWorldCache().updateShowCoordinates();
     }
 
     /**

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaJoinGameTranslator.java
Patch:
@@ -86,6 +86,8 @@ public void translate(ServerJoinGamePacket packet, GeyserSession session) {
         gamerulePacket.getGameRules().add(new GameRuleData<>("doimmediaterespawn", !packet.isEnableRespawnScreen()));
         session.sendUpstreamPacket(gamerulePacket);
 
+        session.setReducedDebugInfo(packet.isReducedDebugInfo());
+
         session.setRenderDistance(packet.getViewDistance());
 
         // We need to send our skin parts to the server otherwise java sees us with no hat, jacket etc

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/BlockTranslator.java
Patch:
@@ -74,9 +74,6 @@ public abstract class BlockTranslator {
     private final Object2IntMap<NbtMap> itemFrames = new Object2IntOpenHashMap<>();
     private final Map<String, NbtMap> flowerPotBlocks = new HashMap<>();
 
-    // Bedrock carpet ID, used in LlamaEntity.java for decoration
-    public static final int CARPET = 171;
-
     public static final Int2DoubleMap JAVA_RUNTIME_ID_TO_HARDNESS = new Int2DoubleOpenHashMap();
     public static final Int2BooleanMap JAVA_RUNTIME_ID_TO_CAN_HARVEST_WITH_HAND = new Int2BooleanOpenHashMap();
     public static final Int2ObjectMap<String> JAVA_RUNTIME_ID_TO_TOOL_TYPE = new Int2ObjectOpenHashMap<>();

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -160,12 +160,13 @@ private GeyserConnector(PlatformType platformType, GeyserBootstrap bootstrap) {
                 if (config.isDebugMode()) {
                     ex.printStackTrace();
                 }
+                config.getRemote().setAddress(InetAddress.getLoopbackAddress().getHostAddress());
             }
         }
         String remoteAddress = config.getRemote().getAddress();
-        int remotePort = config.getRemote().getPort();
         // Filters whether it is not an IP address or localhost, because otherwise it is not possible to find out an SRV entry.
         if (!remoteAddress.matches(IP_REGEX) && !remoteAddress.equalsIgnoreCase("localhost")) {
+            int remotePort;
             try {
                 // Searches for a server address and a port from a SRV record of the specified host name
                 InitialDirContext ctx = new InitialDirContext();

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockMoveEntityAbsoluteTranslator.java
Patch:
@@ -41,6 +41,8 @@ public class BedrockMoveEntityAbsoluteTranslator extends PacketTranslator<MoveEn
 
     @Override
     public void translate(MoveEntityAbsolutePacket packet, GeyserSession session) {
+        session.setLastVehicleMoveTimestamp(System.currentTimeMillis());
+
         float y = packet.getPosition().getY();
         if (session.getRidingVehicleEntity() instanceof BoatEntity) {
             // Remove some Y position to prevents boats from looking like they're floating in water

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockAdventureSettingsTranslator.java
Patch:
@@ -39,6 +39,7 @@ public class BedrockAdventureSettingsTranslator extends PacketTranslator<Adventu
     @Override
     public void translate(AdventureSettingsPacket packet, GeyserSession session) {
         boolean isFlying = packet.getSettings().contains(AdventureSetting.FLYING);
+        session.setFlying(isFlying);
         ClientPlayerAbilitiesPacket abilitiesPacket = new ClientPlayerAbilitiesPacket(isFlying);
         session.sendDownstreamPacket(abilitiesPacket);
 

File: connector/src/main/java/org/geysermc/connector/entity/player/PlayerEntity.java
Patch:
@@ -112,7 +112,7 @@ public void spawnEntity(GeyserSession session) {
         valid = true;
         session.sendUpstreamPacket(addPlayerPacket);
 
-        updateEquipment(session);
+        updateAllEquipment(session);
         updateBedrockAttributes(session);
     }
 

File: connector/src/main/java/org/geysermc/connector/entity/player/SkullPlayerEntity.java
Patch:
@@ -88,7 +88,7 @@ public void spawnEntity(GeyserSession session) {
         valid = true;
         session.sendUpstreamPacket(addPlayerPacket);
 
-        updateEquipment(session);
+        updateAllEquipment(session);
         updateBedrockAttributes(session);
     }
 

File: connector/src/main/java/org/geysermc/connector/network/BedrockProtocol.java
Patch:
@@ -42,7 +42,7 @@ public class BedrockProtocol {
      * Default Bedrock codec that should act as a fallback. Should represent the latest available
      * release of the game that Geyser supports.
      */
-    public static final BedrockPacketCodec DEFAULT_BEDROCK_CODEC = Bedrock_v428.V428_CODEC;
+    public static final BedrockPacketCodec DEFAULT_BEDROCK_CODEC = Bedrock_v431.V431_CODEC;
     /**
      * A list of all supported Bedrock versions that can join Geyser
      */
@@ -55,8 +55,8 @@ public class BedrockProtocol {
         SUPPORTED_BEDROCK_CODECS.add(Bedrock_v422.V422_CODEC.toBuilder()
                 .minecraftVersion("1.16.200/1.16.201")
                 .build());
+        SUPPORTED_BEDROCK_CODECS.add(Bedrock_v428.V428_CODEC);
         SUPPORTED_BEDROCK_CODECS.add(DEFAULT_BEDROCK_CODEC);
-        SUPPORTED_BEDROCK_CODECS.add(Bedrock_v431.V431_CODEC);
     }
 
     /**

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemEntry.java
Patch:
@@ -44,7 +44,7 @@ public class ItemEntry {
     private final int bedrockId;
     private final int bedrockData;
     /**
-     * The Bedrock block runtime ID to render this item with. The specific state *does* matter in how this item is rendered.
+     * The Bedrock block runtime ID to render this item with. The specific state *does* matter in how this item is rendered and used as a crafting ingredient.
      * Required since 1.16.220.
      */
     private final int bedrockBlockId;

File: connector/src/main/java/org/geysermc/connector/network/translators/item/RecipeRegistry.java
Patch:
@@ -276,6 +276,7 @@ private static ItemData getBedrockItemFromIdentifierJson(ItemEntry itemEntry, Js
                 .id(itemEntry.getBedrockId())
                 .damage(damage)
                 .count(count)
+                .blockRuntimeId(itemEntry.isBlock() ? itemEntry.getBedrockBlockId() : 0)
                 .tag(tag).build();
     }
 

File: common/src/main/java/org/geysermc/floodgate/util/BedrockData.java
Patch:
@@ -101,9 +101,8 @@ public String toString() {
         // The format is the same as the order of the fields in this class
         return version + '\0' + username + '\0' + xuid + '\0' + deviceOs + '\0' +
                 languageCode + '\0' + uiProfile + '\0' + inputMode + '\0' + ip + '\0' +
-                (fromProxy ? 1 : 0) + '\0' +
                 (linkedPlayer != null ? linkedPlayer.toString() : "null") + '\0' +
-                subscribeId + '\0' + verifyCode + '\0' + timestamp;
+                (fromProxy ? 1 : 0) + '\0' + subscribeId + '\0' + verifyCode + '\0' + timestamp;
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/configuration/GeyserConfiguration.java
Patch:
@@ -81,6 +81,8 @@ public interface GeyserConfiguration {
 
     Path getFloodgateKeyPath();
 
+    boolean isAddNonBedrockItems();
+
     boolean isAboveBedrockNetherBuilding();
 
     boolean isCacheChunks();

File: connector/src/main/java/org/geysermc/connector/configuration/GeyserJacksonConfiguration.java
Patch:
@@ -115,6 +115,9 @@ public abstract class GeyserJacksonConfiguration implements GeyserConfiguration
     @JsonProperty("allow-custom-skulls")
     private boolean allowCustomSkulls = true;
 
+    @JsonProperty("add-non-bedrock-items")
+    private boolean addNonBedrockItems = true;
+
     @JsonProperty("above-bedrock-nether-building")
     private boolean aboveBedrockNetherBuilding = false;
 

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -195,7 +195,7 @@ private GeyserConnector(PlatformType platformType, GeyserBootstrap bootstrap) {
 
         defaultAuthType = AuthType.getByName(config.getRemote().getAuthType());
 
-        if (authType == AuthType.FLOODGATE) {
+        if (defaultAuthType == AuthType.FLOODGATE) {
             try {
                 Key key = new AesKeyProducer().produceFrom(config.getFloodgateKeyPath());
                 cipher = new AesCipher(new Base64Topping());

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaJoinGameTranslator.java
Patch:
@@ -97,7 +97,7 @@ public void translate(ServerJoinGamePacket packet, GeyserSession session) {
         session.sendDownstreamPacket(new ClientPluginMessagePacket("minecraft:brand", PluginMessageUtils.getGeyserBrandData()));
 
         // register the plugin messaging channels used in Floodgate
-        if (session.getConnector().getAuthType() == AuthType.FLOODGATE) {
+        if (session.getConnector().getDefaultAuthType() == AuthType.FLOODGATE) {
             session.sendDownstreamPacket(new ClientPluginMessagePacket("minecraft:register", PluginMessageUtils.getFloodgateRegisterData()));
         }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaPluginMessageTranslator.java
Patch:
@@ -42,8 +42,8 @@
 public class JavaPluginMessageTranslator extends PacketTranslator<ServerPluginMessagePacket> {
     @Override
     public void translate(ServerPluginMessagePacket packet, GeyserSession session) {
-        // The only plugin messages to listen for are Floodgate plugin messages
-        if (session.getConnector().getAuthType() != AuthType.FLOODGATE) {
+        // The only plugin messages it has to listen for are Floodgate plugin messages
+        if (session.getConnector().getDefaultAuthType() != AuthType.FLOODGATE) {
             return;
         }
 

File: connector/src/main/java/org/geysermc/connector/entity/Entity.java
Patch:
@@ -331,15 +331,12 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
             case 6: // Pose change
                 if (entityMetadata.getValue().equals(Pose.SLEEPING)) {
                     metadata.getFlags().setFlag(EntityFlag.SLEEPING, true);
-                    // Has to be a byte or it does not work
-                    metadata.put(EntityData.PLAYER_FLAGS, (byte) 2);
                     metadata.put(EntityData.BOUNDING_BOX_WIDTH, 0.2f);
                     metadata.put(EntityData.BOUNDING_BOX_HEIGHT, 0.2f);
                 } else if (metadata.getFlags().getFlag(EntityFlag.SLEEPING)) {
                     metadata.getFlags().setFlag(EntityFlag.SLEEPING, false);
                     metadata.put(EntityData.BOUNDING_BOX_WIDTH, getEntityType().getWidth());
                     metadata.put(EntityData.BOUNDING_BOX_HEIGHT, getEntityType().getHeight());
-                    metadata.put(EntityData.PLAYER_FLAGS, (byte) 0);
                 }
                 break;
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityMetadataTranslator.java
Patch:
@@ -39,9 +39,11 @@ public class JavaEntityMetadataTranslator extends PacketTranslator<ServerEntityM
 
     @Override
     public void translate(ServerEntityMetadataPacket packet, GeyserSession session) {
-        Entity entity = session.getEntityCache().getEntityByJavaId(packet.getEntityId());
+        Entity entity;
         if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {
             entity = session.getPlayerEntity();
+        } else {
+            entity = session.getEntityCache().getEntityByJavaId(packet.getEntityId());
         }
         if (entity == null) return;
 

File: connector/src/test/java/org/geysermc/connector/network/translators/chat/MessageTranslatorTest.java
Patch:
@@ -46,8 +46,8 @@ public void setUp() throws Exception {
 
         // RGB downgrade test
         messages.put("{\"extra\":[{\"text\":\"          \"},{\"color\":\"gold\",\"text\":\"The \"},{\"color\":\"#E14248\",\"obfuscated\":true,\"text\":\"||\"},{\"color\":\"#3AA9FF\",\"bold\":true,\"text\":\"CubeCraft\"},{\"color\":\"#E14248\",\"obfuscated\":true,\"text\":\"||\"},{\"color\":\"gold\",\"text\":\" Network \"},{\"color\":\"green\",\"text\":\"[1.8/1.9+]\\n         \"},{\"color\":\"#f5e342\",\"text\":\"✦ \"},{\"color\":\"#b042f5\",\"bold\":true,\"text\":\"N\"},{\"color\":\"#c142f5\",\"bold\":true,\"text\":\"E\"},{\"color\":\"#d342f5\",\"bold\":true,\"text\":\"W\"},{\"color\":\"#e442f5\",\"bold\":true,\"text\":\":\"},{\"color\":\"#f542f5\",\"bold\":true,\"text\":\" \"},{\"color\":\"#bcf542\",\"bold\":true,\"text\":\"A\"},{\"color\":\"#acee3f\",\"bold\":true,\"text\":\"M\"},{\"color\":\"#9ce73c\",\"bold\":true,\"text\":\"O\"},{\"color\":\"#8ce039\",\"bold\":true,\"text\":\"N\"},{\"color\":\"#7cd936\",\"bold\":true,\"text\":\"G\"},{\"color\":\"#6cd233\",\"bold\":true,\"text\":\" \"},{\"color\":\"#5ccb30\",\"bold\":true,\"text\":\"S\"},{\"color\":\"#4cc42d\",\"bold\":true,\"text\":\"L\"},{\"color\":\"#3cbd2a\",\"bold\":true,\"text\":\"I\"},{\"color\":\"#2cb627\",\"bold\":true,\"text\":\"M\"},{\"color\":\"#1caf24\",\"bold\":true,\"text\":\"E\"},{\"color\":\"#0ca821\",\"bold\":true,\"text\":\"S\"},{\"color\":\"#f5e342\",\"text\":\" \"},{\"color\":\"#6d7c87\",\"text\":\"(kinda sus) \"},{\"color\":\"#f5e342\",\"text\":\"✦\"}],\"text\":\"\"}",
-                "          §r§6The §r§c§k||§r§3§lCubeCraft§r§c§k||§r§6 Network §r§a[1.8/1.9+]\n" +
-                        "         §r§e✦ §r§d§lN§r§d§lE§r§d§lW§r§d§l:§r§d§l §r§e§lA§r§e§lM§r§a§lO§r§a§lN§r§a§lG§r§a§l §r§a§lS§r§a§lL§r§2§lI§r§2§lM§r§2§lE§r§2§lS§r§e §r§8(kinda sus) §r§e✦");
+                "          §r§6The §r§d§k||§r§b§lCubeCraft§r§d§k||§r§6 Network §r§a[1.8/1.9+]\n" +
+                        "         §r§e✦ §r§d§lN§r§d§lE§r§d§lW§r§d§l:§r§d§l §r§e§lA§r§e§lM§r§e§lO§r§a§lN§r§a§lG§r§a§l §r§a§lS§r§2§lL§r§2§lI§r§2§lM§r§2§lE§r§2§lS§r§e §r§b(kinda sus) §r§e✦");
 
         // Color code format resetting
         messages.put("{\"text\":\"\",\"extra\":[{\"text\":\"\",\"extra\":[{\"text\":\"[\",\"color\":\"gray\"},{\"text\":\"H\",\"color\":\"yellow\"},{\"text\":\"]\",\"color\":\"gray\"},{\"text\":\" \",\"color\":\"white\"},{\"text\":\"GUEST\",\"color\":\"#b7b7b7\",\"bold\":true}]},{\"text\":\"\",\"extra\":[{\"text\":\" \",\"bold\":true},{\"text\":\"»\",\"color\":\"blue\"},{\"text\":\" \",\"color\":\"gray\"}]},{\"text\":\"\",\"extra\":[{\"text\":\"rtm516\",\"color\":\"white\"},{\"text\":\": \",\"color\":\"gray\"},{\"text\":\"\",\"color\":\"white\"}]},{\"text\":\"\",\"extra\":[{\"text\":\"This is an amazing bedrock test message\",\"color\":\"white\"}]}]}\n",

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/translators/BrewingInventoryTranslator.java
Patch:
@@ -91,6 +91,8 @@ public int javaSlotToBedrock(int slot) {
                 return 3;
             case 3:
                 return 0;
+            case 4:
+                return 4;
         }
         return super.javaSlotToBedrock(slot);
     }
@@ -105,7 +107,7 @@ public BedrockContainerSlot javaSlotToBedrockContainer(int slot) {
             case 3:
                 return new BedrockContainerSlot(ContainerSlotType.BREWING_INPUT, 0);
             case 4:
-                return new BedrockContainerSlot(ContainerSlotType.BREWING_INPUT, 0);
+                return new BedrockContainerSlot(ContainerSlotType.BREWING_FUEL, 4);
         }
         return super.javaSlotToBedrockContainer(slot);
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/translators/BrewingInventoryTranslator.java
Patch:
@@ -91,6 +91,8 @@ public int javaSlotToBedrock(int slot) {
                 return 3;
             case 3:
                 return 0;
+            case 4:
+                return 4;
         }
         return super.javaSlotToBedrock(slot);
     }
@@ -105,7 +107,7 @@ public BedrockContainerSlot javaSlotToBedrockContainer(int slot) {
             case 3:
                 return new BedrockContainerSlot(ContainerSlotType.BREWING_INPUT, 0);
             case 4:
-                return new BedrockContainerSlot(ContainerSlotType.BREWING_INPUT, 0);
+                return new BedrockContainerSlot(ContainerSlotType.BREWING_FUEL, 4);
         }
         return super.javaSlotToBedrockContainer(slot);
     }

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/world/manager/GeyserSpigotWorldManager.java
Patch:
@@ -235,6 +235,7 @@ public NbtMap getLecternDataAt(GeyserSession session, int x, int y, int z, boole
             NbtMap blockEntityTag = lecternTag.build();
             BlockEntityUtils.updateBlockEntity(session, blockEntityTag, Vector3i.from(x, y, z));
         };
+
         if (isChunkLoad) {
             // Delay to ensure the chunk is sent first, and then the lectern data
             Bukkit.getScheduler().runTaskLater(this.plugin, lecternInfoGet, 5);

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockLecternUpdateTranslator.java
Patch:
@@ -65,6 +65,7 @@ public void translate(LecternUpdatePacket packet, GeyserSession session) {
                 session.getConnector().getLogger().debug("Expected lectern but it wasn't open!");
                 return;
             }
+
             LecternContainer lecternContainer = (LecternContainer) session.getOpenInventory();
             if (lecternContainer.getCurrentBedrockPage() == packet.getPage()) {
                 // The same page means Bedrock is closing the window
@@ -76,6 +77,7 @@ public void translate(LecternUpdatePacket packet, GeyserSession session) {
                 // Each "page" on Java is just one page (think a spiral notebook folded back to only show one page)
                 int newJavaPage = (packet.getPage() * 2);
                 int currentJavaPage = (lecternContainer.getCurrentBedrockPage() * 2);
+
                 // Send as many click button packets as we need to
                 // Java has the option to specify exact page numbers by adding 100 to the number, but buttonId variable
                 // is a byte when transmitted over the network and therefore this stops us at 128

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/entity/player/BedrockInteractTranslator.java
Patch:
@@ -367,7 +367,7 @@ else if (javaIdentifierStripped.equals("bowl")) {
                     if (ridingEntity instanceof AbstractHorseEntity) {
                         if (ridingEntity.getMetadata().getFlags().getFlag(EntityFlag.TAMED)) {
                             // We should request to open the horse inventory instead
-                            ClientPlayerStatePacket openHorseWindowPacket = new ClientPlayerStatePacket((int)session.getPlayerEntity().getEntityId(), PlayerState.OPEN_HORSE_INVENTORY);
+                            ClientPlayerStatePacket openHorseWindowPacket = new ClientPlayerStatePacket((int) session.getPlayerEntity().getEntityId(), PlayerState.OPEN_HORSE_INVENTORY);
                             session.sendDownstreamPacket(openHorseWindowPacket);
                         }
                     } else {

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/translators/CraftingInventoryTranslator.java
Patch:
@@ -39,8 +39,9 @@ public CraftingInventoryTranslator() {
 
     @Override
     public SlotType getSlotType(int javaSlot) {
-        if (javaSlot == 0)
+        if (javaSlot == 0) {
             return SlotType.OUTPUT;
+        }
         return SlotType.NORMAL;
     }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/updater/HorseInventoryUpdater.java
Patch:
@@ -64,5 +64,4 @@ public boolean updateSlot(InventoryTranslator translator, GeyserSession session,
         session.sendUpstreamPacket(slotPacket);
         return true;
     }
-
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaTradeListTranslator.java
Patch:
@@ -58,6 +58,7 @@ public void translate(ServerTradeListPacket packet, GeyserSession session) {
             return;
         }
 
+        // Retrieve the fake villager involved in the trade, and update its metadata to match with the window information
         MerchantContainer merchantInventory = (MerchantContainer) openInventory;
         merchantInventory.setVillagerTrades(packet.getTrades());
         Entity villager = merchantInventory.getVillager();
@@ -66,6 +67,7 @@ public void translate(ServerTradeListPacket packet, GeyserSession session) {
         villager.getMetadata().put(EntityData.TRADE_XP, packet.getExperience());
         villager.updateBedrockMetadata(session);
 
+        // Construct the packet that opens the trading window
         UpdateTradePacket updateTradePacket = new UpdateTradePacket();
         updateTradePacket.setTradeTier(packet.getVillagerLevel() - 1);
         updateTradePacket.setContainerId((short) packet.getWindowId());

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockLecternUpdateTranslator.java
Patch:
@@ -56,7 +56,7 @@ public void translate(LecternUpdatePacket packet, GeyserSession session) {
                     new Position(packet.getBlockPosition().getX(), packet.getBlockPosition().getY(), packet.getBlockPosition().getZ()),
                     BlockFace.values()[0],
                     Hand.MAIN_HAND,
-                    packet.getBlockPosition().getX(), packet.getBlockPosition().getY(), packet.getBlockPosition().getZ(), //TODO
+                    0, 0, 0, // Java doesn't care about these when dealing with a lectern
                     false);
             session.sendDownstreamPacket(blockPacket);
         } else {
@@ -78,7 +78,7 @@ public void translate(LecternUpdatePacket packet, GeyserSession session) {
                 int currentJavaPage = (lecternContainer.getCurrentBedrockPage() * 2);
                 // Send as many click button packets as we need to
                 // Java has the option to specify exact page numbers by adding 100 to the number, but buttonId variable
-                // is a byte and therefore this stops us at 128
+                // is a byte when transmitted over the network and therefore this stops us at 128
                 if (newJavaPage > currentJavaPage) {
                     for (int i = currentJavaPage; i < newJavaPage; i++) {
                         ClientClickWindowButtonPacket clickButtonPacket = new ClientClickWindowButtonPacket(session.getOpenInventory().getId(), 2);

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/translators/horse/AbstractHorseInventoryTranslator.java
Patch:
@@ -41,17 +41,14 @@ public AbstractHorseInventoryTranslator(int size) {
 
     @Override
     public void prepareInventory(GeyserSession session, Inventory inventory) {
-
     }
 
     @Override
     public void openInventory(GeyserSession session, Inventory inventory) {
-
     }
 
     @Override
     public void closeInventory(GeyserSession session, Inventory inventory) {
-
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/updater/InventoryUpdater.java
Patch:
@@ -35,7 +35,7 @@
 
 import java.util.Arrays;
 
-public abstract class InventoryUpdater {
+public class InventoryUpdater {
     public void updateInventory(InventoryTranslator translator, GeyserSession session, Inventory inventory) {
         ItemData[] bedrockItems = new ItemData[36];
         for (int i = 0; i < 36; i++) {

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaSetSlotTranslator.java
Patch:
@@ -134,7 +134,6 @@ private static void updateCraftingGrid(GeyserSession session, ServerSetSlotPacke
             height += -firstRow + 1;
             width += -firstCol + 1;
 
-            //TODO
             recipes:
             for (Recipe recipe : session.getCraftingRecipes().values()) {
                 if (recipe.getType() == RecipeType.CRAFTING_SHAPED) {

File: connector/src/main/java/org/geysermc/connector/inventory/BeaconContainer.java
Patch:
@@ -25,6 +25,7 @@
 
 package org.geysermc.connector.inventory;
 
+import com.github.steveice10.mc.protocol.data.game.window.WindowType;
 import lombok.Getter;
 import lombok.Setter;
 
@@ -34,7 +35,7 @@ public class BeaconContainer extends Container {
     private int primaryId;
     private int secondaryId;
 
-    public BeaconContainer(String title, int id, int size, PlayerInventory playerInventory) {
-        super(title, id, size, playerInventory);
+    public BeaconContainer(String title, int id, int size, WindowType windowType, PlayerInventory playerInventory) {
+        super(title, id, size, windowType, playerInventory);
     }
 }

File: connector/src/main/java/org/geysermc/connector/inventory/Container.java
Patch:
@@ -25,6 +25,7 @@
 
 package org.geysermc.connector.inventory;
 
+import com.github.steveice10.mc.protocol.data.game.window.WindowType;
 import lombok.Getter;
 import lombok.NonNull;
 import org.geysermc.connector.network.session.GeyserSession;
@@ -43,8 +44,8 @@ public class Container extends Inventory {
      */
     private boolean isUsingRealBlock = false;
 
-    public Container(String title, int id, int size, PlayerInventory playerInventory) {
-        super(title, id, size);
+    public Container(String title, int id, int size, WindowType windowType, PlayerInventory playerInventory) {
+        super(title, id, size, windowType);
         this.playerInventory = playerInventory;
         this.containerSize = this.size + InventoryTranslator.PLAYER_INVENTORY_SIZE;
     }

File: connector/src/main/java/org/geysermc/connector/inventory/EnchantingContainer.java
Patch:
@@ -25,6 +25,7 @@
 
 package org.geysermc.connector.inventory;
 
+import com.github.steveice10.mc.protocol.data.game.window.WindowType;
 import com.nukkitx.protocol.bedrock.data.inventory.EnchantOptionData;
 import lombok.Getter;
 
@@ -40,8 +41,8 @@ public class EnchantingContainer extends Container {
     @Getter
     private final GeyserEnchantOption[] geyserEnchantOptions;
 
-    public EnchantingContainer(String title, int id, int size, PlayerInventory playerInventory) {
-        super(title, id, size, playerInventory);
+    public EnchantingContainer(String title, int id, int size, WindowType windowType, PlayerInventory playerInventory) {
+        super(title, id, size, windowType, playerInventory);
 
         enchantOptions = new EnchantOptionData[3];
         geyserEnchantOptions = new GeyserEnchantOption[3];

File: connector/src/main/java/org/geysermc/connector/inventory/Generic3X3Container.java
Patch:
@@ -25,6 +25,7 @@
 
 package org.geysermc.connector.inventory;
 
+import com.github.steveice10.mc.protocol.data.game.window.WindowType;
 import lombok.Getter;
 
 public class Generic3X3Container extends Container {
@@ -34,8 +35,8 @@ public class Generic3X3Container extends Container {
     @Getter
     private boolean isDropper = false;
 
-    public Generic3X3Container(String title, int id, int size, PlayerInventory playerInventory) {
-        super(title, id, size, playerInventory);
+    public Generic3X3Container(String title, int id, int size, WindowType windowType, PlayerInventory playerInventory) {
+        super(title, id, size, windowType, playerInventory);
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/inventory/LecternContainer.java
Patch:
@@ -25,6 +25,7 @@
 
 package org.geysermc.connector.inventory;
 
+import com.github.steveice10.mc.protocol.data.game.window.WindowType;
 import com.nukkitx.math.vector.Vector3i;
 import com.nukkitx.nbt.NbtMap;
 import lombok.Getter;
@@ -38,7 +39,7 @@ public class LecternContainer extends Container {
     @Getter @Setter
     private Vector3i position;
 
-    public LecternContainer(String title, int id, int size, PlayerInventory playerInventory) {
-        super(title, id, size, playerInventory);
+    public LecternContainer(String title, int id, int size, WindowType windowType, PlayerInventory playerInventory) {
+        super(title, id, size, windowType, playerInventory);
     }
 }

File: connector/src/main/java/org/geysermc/connector/inventory/MerchantContainer.java
Patch:
@@ -26,6 +26,7 @@
 package org.geysermc.connector.inventory;
 
 import com.github.steveice10.mc.protocol.data.game.window.VillagerTrade;
+import com.github.steveice10.mc.protocol.data.game.window.WindowType;
 import lombok.Getter;
 import lombok.Setter;
 import org.geysermc.connector.entity.Entity;
@@ -36,7 +37,7 @@ public class MerchantContainer extends Container {
     private Entity villager;
     private VillagerTrade[] villagerTrades;
 
-    public MerchantContainer(String title, int id, int size, PlayerInventory playerInventory) {
-        super(title, id, size, playerInventory);
+    public MerchantContainer(String title, int id, int size, WindowType windowType, PlayerInventory playerInventory) {
+        super(title, id, size, windowType, playerInventory);
     }
 }

File: connector/src/main/java/org/geysermc/connector/inventory/PlayerInventory.java
Patch:
@@ -45,7 +45,7 @@ public class PlayerInventory extends Inventory {
     private GeyserItemStack cursor = GeyserItemStack.EMPTY;
 
     public PlayerInventory() {
-        super(0, 46);
+        super(0, 46, null);
         heldItemSlot = 0;
     }
 

File: connector/src/main/java/org/geysermc/connector/inventory/StonecutterContainer.java
Patch:
@@ -25,6 +25,7 @@
 
 package org.geysermc.connector.inventory;
 
+import com.github.steveice10.mc.protocol.data.game.window.WindowType;
 import lombok.Getter;
 import lombok.NonNull;
 import lombok.Setter;
@@ -38,8 +39,8 @@ public class StonecutterContainer extends Container {
     @Setter
     private int stonecutterButton = -1;
 
-    public StonecutterContainer(String title, int id, int size, PlayerInventory playerInventory) {
-        super(title, id, size, playerInventory);
+    public StonecutterContainer(String title, int id, int size, WindowType windowType, PlayerInventory playerInventory) {
+        super(title, id, size, windowType, playerInventory);
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/translators/AnvilInventoryTranslator.java
Patch:
@@ -139,6 +139,6 @@ public int javaSlotToBedrock(int slot) {
 
     @Override
     public Inventory createInventory(String name, int windowId, WindowType windowType, PlayerInventory playerInventory) {
-        return new AnvilContainer(name, windowId, this.size, playerInventory);
+        return new AnvilContainer(name, windowId, this.size, windowType, playerInventory);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/translators/BaseInventoryTranslator.java
Patch:
@@ -96,6 +96,6 @@ public SlotType getSlotType(int javaSlot) {
 
     @Override
     public Inventory createInventory(String name, int windowId, WindowType windowType, PlayerInventory playerInventory) {
-        return new Container(name, windowId, this.size, playerInventory);
+        return new Container(name, windowId, this.size, windowType, playerInventory);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/translators/BeaconInventoryTranslator.java
Patch:
@@ -127,6 +127,6 @@ public int javaSlotToBedrock(int slot) {
 
     @Override
     public Inventory createInventory(String name, int windowId, WindowType windowType, PlayerInventory playerInventory) {
-        return new BeaconContainer(name, windowId, this.size, playerInventory);
+        return new BeaconContainer(name, windowId, this.size, windowType, playerInventory);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/translators/CartographyInventoryTranslator.java
Patch:
@@ -98,6 +98,6 @@ public int javaSlotToBedrock(int slot) {
 
     @Override
     public Inventory createInventory(String name, int windowId, WindowType windowType, PlayerInventory playerInventory) {
-        return new CartographyContainer(name, windowId, this.size, playerInventory);
+        return new CartographyContainer(name, windowId, this.size, windowType, playerInventory);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/translators/EnchantingInventoryTranslator.java
Patch:
@@ -164,7 +164,7 @@ public int javaSlotToBedrock(int slot) {
 
     @Override
     public Inventory createInventory(String name, int windowId, WindowType windowType, PlayerInventory playerInventory) {
-        return new EnchantingContainer(name, windowId, this.size, playerInventory);
+        return new EnchantingContainer(name, windowId, this.size, windowType, playerInventory);
     }
 
     /**

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/translators/Generic3X3InventoryTranslator.java
Patch:
@@ -47,7 +47,7 @@ public Generic3X3InventoryTranslator() {
 
     @Override
     public Inventory createInventory(String name, int windowId, WindowType windowType, PlayerInventory playerInventory) {
-        return new Generic3X3Container(name, windowId, this.size, playerInventory);
+        return new Generic3X3Container(name, windowId, this.size, windowType, playerInventory);
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/translators/LecternInventoryTranslator.java
Patch:
@@ -151,7 +151,7 @@ public void updateSlot(GeyserSession session, Inventory inventory, int slot) {
 
     @Override
     public Inventory createInventory(String name, int windowId, WindowType windowType, PlayerInventory playerInventory) {
-        return new LecternContainer(name, windowId, this.size, playerInventory);
+        return new LecternContainer(name, windowId, this.size, windowType, playerInventory);
     }
 
     public static NbtMapBuilder getBaseLecternTag(int x, int y, int z, int totalPages) {

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/translators/MerchantInventoryTranslator.java
Patch:
@@ -157,6 +157,6 @@ public void updateSlot(GeyserSession session, Inventory inventory, int slot) {
 
     @Override
     public Inventory createInventory(String name, int windowId, WindowType windowType, PlayerInventory playerInventory) {
-        return new MerchantContainer(name, windowId, this.size, playerInventory);
+        return new MerchantContainer(name, windowId, this.size, windowType, playerInventory);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/translators/StonecutterInventoryTranslator.java
Patch:
@@ -133,6 +133,6 @@ public SlotType getSlotType(int javaSlot) {
 
     @Override
     public Inventory createInventory(String name, int windowId, WindowType windowType, PlayerInventory playerInventory) {
-        return new StonecutterContainer(name, windowId, this.size, playerInventory);
+        return new StonecutterContainer(name, windowId, this.size, windowType, playerInventory);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaOpenHorseWindowTranslator.java
Patch:
@@ -132,6 +132,6 @@ public void translate(ServerOpenHorseWindowPacket packet, GeyserSession session)
         session.sendUpstreamPacket(updateEquipPacket);
 
         session.setInventoryTranslator(inventoryTranslator);
-        InventoryUtils.openInventory(session, new Container(entity.getMetadata().getString(EntityData.NAMETAG), packet.getWindowId(), packet.getNumberOfSlots(), session.getPlayerInventory()));
+        InventoryUtils.openInventory(session, new Container(entity.getMetadata().getString(EntityData.NAMETAG), packet.getWindowId(), packet.getNumberOfSlots(), null, session.getPlayerInventory()));
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaOpenWindowTranslator.java
Patch:
@@ -64,7 +64,8 @@ public void translate(ServerOpenWindowPacket packet, GeyserSession session) {
             Inventory newInventory = newTranslator.createInventory(name, packet.getWindowId(), packet.getType(), session.getPlayerInventory());
             if (openInventory != null) {
                 // Sometimes the server can double-open an inventory with the same ID - don't confirm in that instance.
-                InventoryUtils.closeInventory(session, openInventory.getId(), openInventory.getId() != packet.getWindowId());
+                // If the window type is the same, don't confirm; in rare cases, inventories can do funny things where it keeps the same window type up but change the contents.
+                InventoryUtils.closeInventory(session, openInventory.getId(), (openInventory.getId() != packet.getWindowId() && openInventory.getWindowType() != packet.getType()));
             }
 
             session.setInventoryTranslator(newTranslator);

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockContainerCloseTranslator.java
Patch:
@@ -40,7 +40,6 @@ public class BedrockContainerCloseTranslator extends PacketTranslator<ContainerC
     @Override
     public void translate(ContainerClosePacket packet, GeyserSession session) {
         session.addInventoryTask(() -> {
-            session.setLastWindowCloseTime(0);
             byte windowId = packet.getId();
 
             //Client wants close confirmation

File: connector/src/main/java/org/geysermc/connector/utils/InventoryUtils.java
Patch:
@@ -79,6 +79,9 @@ public static void displayInventory(GeyserSession session, Inventory inventory)
                         if (openInv != null && openInv.getId() == inventory.getId()) {
                             translator.openInventory(session, inventory);
                             translator.updateInventory(session, inventory);
+                        } else if (openInv != null && openInv.isPending()) {
+                            // Presumably, this inventory is no longer relevant, and the client doesn't care about it
+                            displayInventory(session, openInv);
                         }
                 }), 200, TimeUnit.MILLISECONDS);
             } else {

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -42,6 +42,7 @@
 import com.github.steveice10.mc.protocol.packet.ingame.client.player.ClientPlayerPositionPacket;
 import com.github.steveice10.mc.protocol.packet.ingame.client.player.ClientPlayerPositionRotationPacket;
 import com.github.steveice10.mc.protocol.packet.ingame.client.world.ClientTeleportConfirmPacket;
+import com.github.steveice10.mc.protocol.packet.login.client.LoginPluginResponsePacket;
 import com.github.steveice10.mc.protocol.packet.login.server.LoginSuccessPacket;
 import com.github.steveice10.packetlib.BuiltinFlags;
 import com.github.steveice10.packetlib.Client;
@@ -69,10 +70,10 @@
 import org.geysermc.common.window.CustomFormWindow;
 import org.geysermc.common.window.FormWindow;
 import org.geysermc.connector.GeyserConnector;
-import org.geysermc.connector.entity.Tickable;
 import org.geysermc.connector.command.CommandSender;
 import org.geysermc.connector.common.AuthType;
 import org.geysermc.connector.entity.Entity;
+import org.geysermc.connector.entity.Tickable;
 import org.geysermc.connector.entity.player.SessionPlayerEntity;
 import org.geysermc.connector.entity.player.SkullPlayerEntity;
 import org.geysermc.connector.inventory.PlayerInventory;
@@ -956,7 +957,7 @@ public void sendUpstreamPacketImmediately(BedrockPacket packet) {
      * @param packet the java edition packet from MCProtocolLib
      */
     public void sendDownstreamPacket(Packet packet) {
-        if (downstream != null && downstream.getSession() != null && protocol.getSubProtocol().equals(SubProtocol.GAME)) {
+        if (downstream != null && downstream.getSession() != null && (protocol.getSubProtocol().equals(SubProtocol.GAME) || packet.getClass() == LoginPluginResponsePacket.class)) {
             downstream.getSession().send(packet);
         } else {
             connector.getLogger().debug("Tried to send downstream packet " + packet.getClass().getSimpleName() + " before connected to the server");

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaLoginPluginRequestTranslator.java
Patch:
@@ -33,10 +33,11 @@
 import com.github.steveice10.mc.protocol.packet.login.server.LoginPluginRequestPacket;
 
 @Translator(packet = LoginPluginRequestPacket.class)
-public class JavaLoginPluginMessageTranslator extends PacketTranslator<LoginPluginRequestPacket> {
+public class JavaLoginPluginRequestTranslator extends PacketTranslator<LoginPluginRequestPacket> {
     @Override
     public void translate(LoginPluginRequestPacket packet, GeyserSession session) {
         // A vanilla client doesn't know any PluginMessage in the Login state, so we don't know any either.
+        // Note: Fabric Networking API v1 will not let the client log in without sending this
         session.sendDownstreamPacket(
                 new LoginPluginResponsePacket(packet.getMessageId(), null)
         );

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaOpenWindowTranslator.java
Patch:
@@ -63,7 +63,8 @@ public void translate(ServerOpenWindowPacket packet, GeyserSession session) {
 
             Inventory newInventory = newTranslator.createInventory(name, packet.getWindowId(), packet.getType(), session.getPlayerInventory());
             if (openInventory != null) {
-                InventoryUtils.closeInventory(session, openInventory.getId(), true);
+                // Sometimes the server can double-open an inventory with the same ID - don't confirm in that instance.
+                InventoryUtils.closeInventory(session, openInventory.getId(), openInventory.getId() != packet.getWindowId());
             }
 
             session.setInventoryTranslator(newTranslator);

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/holder/BlockInventoryHolder.java
Patch:
@@ -82,7 +82,7 @@ public void prepareInventory(InventoryTranslator translator, GeyserSession sessi
                 // We can safely use this block
                 inventory.setHolderPosition(session.getLastInteractionBlockPosition());
                 ((Container) inventory).setUsingRealBlock(true, javaBlockString[0]);
-                setCustomName(session, session.getLastInteractionBlockPosition(), inventory);
+                setCustomName(session, session.getLastInteractionBlockPosition(), inventory, javaBlockId);
                 return;
             }
         }
@@ -98,7 +98,7 @@ public void prepareInventory(InventoryTranslator translator, GeyserSession sessi
         session.sendUpstreamPacket(blockPacket);
         inventory.setHolderPosition(position);
 
-        setCustomName(session, position, inventory);
+        setCustomName(session, position, inventory, defaultJavaBlockState);
     }
 
     /**
@@ -108,7 +108,7 @@ protected boolean isValidBlock(String[] javaBlockString) {
         return this.validBlocks.contains(javaBlockString[0]);
     }
 
-    protected void setCustomName(GeyserSession session, Vector3i position, Inventory inventory) {
+    protected void setCustomName(GeyserSession session, Vector3i position, Inventory inventory, int javaBlockState) {
         NbtMap tag = NbtMap.builder()
                 .putInt("x", position.getX())
                 .putInt("y", position.getY())

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaCloseWindowTranslator.java
Patch:
@@ -36,6 +36,6 @@ public class JavaCloseWindowTranslator extends PacketTranslator<ServerCloseWindo
 
     @Override
     public void translate(ServerCloseWindowPacket packet, GeyserSession session) {
-        session.addInventoryTask(() -> InventoryUtils.closeInventory(session, packet.getWindowId(), true));
+        session.addInventoryTask(() -> InventoryUtils.closeInventory(session, packet.getWindowId(), (session.getOpenInventory() != null && session.getOpenInventory().getId() == packet.getWindowId())));
     }
 }

File: common/src/main/java/org/geysermc/floodgate/util/LinkedPlayer.java
Patch:
@@ -57,7 +57,7 @@ public static LinkedPlayer of(String javaUsername, UUID javaUniqueId, UUID bedro
         return new LinkedPlayer(javaUsername, javaUniqueId, bedrockId);
     }
 
-    static LinkedPlayer fromString(String data) {
+    public static LinkedPlayer fromString(String data) {
         String[] split = data.split(";");
         if (split.length != 3) {
             return null;

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/translators/chest/SingleChestInventoryTranslator.java
Patch:
@@ -37,10 +37,10 @@ public class SingleChestInventoryTranslator extends ChestInventoryTranslator {
     public SingleChestInventoryTranslator(int size) {
         super(size, 27);
         this.holder = new BlockInventoryHolder("minecraft:chest[facing=north,type=single,waterlogged=false]", ContainerType.CONTAINER,
-                "minecraft:ender_chest", "minecraft:trapped_chest", "minecraft:barrel") {
+                "minecraft:ender_chest", "minecraft:trapped_chest") {
             @Override
             protected boolean isValidBlock(String[] javaBlockString) {
-                if (javaBlockString[0].equals("minecraft:ender_chest") || javaBlockString[0].equals("minecraft:barrel")) {
+                if (javaBlockString[0].equals("minecraft:ender_chest")) {
                     // Can't have double ender chests
                     return true;
                 }

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -136,6 +136,8 @@ public class GeyserSession implements CommandSender {
     private final PlayerInventory playerInventory;
     @Setter
     private Inventory openInventory;
+    @Setter
+    private boolean closingInventory;
 
     @Setter
     private InventoryTranslator inventoryTranslator = InventoryTranslator.PLAYER_INVENTORY_TRANSLATOR;

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockLecternUpdateTranslator.java
Patch:
@@ -70,7 +70,7 @@ public void translate(LecternUpdatePacket packet, GeyserSession session) {
                 // The same page means Bedrock is closing the window
                 ClientCloseWindowPacket closeWindowPacket = new ClientCloseWindowPacket(lecternContainer.getId());
                 session.sendDownstreamPacket(closeWindowPacket);
-                InventoryUtils.closeInventory(session, lecternContainer.getId());
+                InventoryUtils.closeInventory(session, lecternContainer.getId(), false);
             } else {
                 // Each "page" Bedrock gives to us actually represents two pages (think opening a book and seeing two pages)
                 // Each "page" on Java is just one page (think a spiral notebook folded back to only show one page)

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/translators/LecternInventoryTranslator.java
Patch:
@@ -91,7 +91,7 @@ public void updateSlot(GeyserSession session, Inventory inventory, int slot) {
                 ClientClickWindowButtonPacket packet = new ClientClickWindowButtonPacket(inventory.getId(), 3);
                 session.sendDownstreamPacket(packet);
                 session.setDroppingLecternBook(false);
-                InventoryUtils.closeInventory(session, inventory.getId());
+                InventoryUtils.closeInventory(session, inventory.getId(), false);
             } else if (lecternContainer.getBlockEntityTag() == null) {
                 // If the method returns true, this is already handled for us
                 GeyserItemStack geyserItemStack = inventory.getItem(0);
@@ -123,7 +123,7 @@ public void updateSlot(GeyserSession session, Inventory inventory, int slot) {
                         // Close the window - we will reopen it once the client has this data synced
                         ClientCloseWindowPacket closeWindowPacket = new ClientCloseWindowPacket(lecternContainer.getId());
                         session.sendDownstreamPacket(closeWindowPacket);
-                        InventoryUtils.closeInventory(session, inventory.getId());
+                        InventoryUtils.closeInventory(session, inventory.getId(), false);
                     }
                 }
             }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaRespawnTranslator.java
Patch:
@@ -52,6 +52,7 @@ public void translate(ServerRespawnPacket packet, GeyserSession session) {
         session.addInventoryTask(() -> {
             session.setInventoryTranslator(InventoryTranslator.PLAYER_INVENTORY_TRANSLATOR);
             session.setOpenInventory(null);
+            session.setClosingInventory(false);
         });
 
         SetPlayerGameTypePacket playerGameTypePacket = new SetPlayerGameTypePacket();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaCloseWindowTranslator.java
Patch:
@@ -36,6 +36,6 @@ public class JavaCloseWindowTranslator extends PacketTranslator<ServerCloseWindo
 
     @Override
     public void translate(ServerCloseWindowPacket packet, GeyserSession session) {
-        session.addInventoryTask(() -> InventoryUtils.closeInventory(session, packet.getWindowId()));
+        session.addInventoryTask(() -> InventoryUtils.closeInventory(session, packet.getWindowId(), true));
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaOpenWindowTranslator.java
Patch:
@@ -51,7 +51,7 @@ public void translate(ServerOpenWindowPacket packet, GeyserSession session) {
             //No translator exists for this window type. Close all windows and return.
             if (newTranslator == null) {
                 if (openInventory != null) {
-                    InventoryUtils.closeInventory(session, openInventory.getId());
+                    InventoryUtils.closeInventory(session, openInventory.getId(), true);
                 }
                 ClientCloseWindowPacket closeWindowPacket = new ClientCloseWindowPacket(packet.getWindowId());
                 session.sendDownstreamPacket(closeWindowPacket);
@@ -63,7 +63,7 @@ public void translate(ServerOpenWindowPacket packet, GeyserSession session) {
 
             Inventory newInventory = newTranslator.createInventory(name, packet.getWindowId(), packet.getType(), session.getPlayerInventory());
             if (openInventory != null) {
-                InventoryUtils.closeInventory(session, openInventory.getId());
+                InventoryUtils.closeInventory(session, openInventory.getId(), true);
             }
 
             session.setInventoryTranslator(newTranslator);

File: connector/src/main/java/org/geysermc/connector/network/UpstreamPacketHandler.java
Patch:
@@ -47,6 +47,7 @@ public UpstreamPacketHandler(GeyserConnector connector, GeyserSession session) {
     }
 
     private boolean translateAndDefault(BedrockPacket packet) {
+        System.out.println(packet.toString());
         return PacketTranslatorRegistry.BEDROCK_TRANSLATOR.translate(packet.getClass(), packet, session);
     }
 

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -144,7 +144,7 @@ public class GeyserSession implements CommandSender {
      * Use {@link #getNextItemNetId()} instead for consistency
      */
     @Getter(AccessLevel.NONE)
-    private final AtomicInteger itemNetId = new AtomicInteger(1);
+    private final AtomicInteger itemNetId = new AtomicInteger(2);
 
     @Getter(AccessLevel.NONE)
     private final Object inventoryLock = new Object();

File: connector/src/main/java/org/geysermc/connector/entity/WitherSkullEntity.java
Patch:
@@ -35,6 +35,8 @@ public class WitherSkullEntity extends ItemedFireballEntity {
 
     public WitherSkullEntity(long entityId, long geyserId, EntityType entityType, Vector3f position, Vector3f motion, Vector3f rotation) {
         super(entityId, geyserId, entityType, position, motion, rotation);
+
+        this.futureTicks = 1;
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -118,7 +118,7 @@ public enum EntityType {
     TRIDENT(TridentEntity.class, 73, 0f, 0f, 0f, 0f, "minecraft:thrown_trident"),
     TURTLE(TurtleEntity.class, 74, 0.4f, 1.2f),
     CAT(CatEntity.class, 75, 0.35f, 0.3f),
-    SHULKER_BULLET(Entity.class, 76, 0.3125f),
+    SHULKER_BULLET(ThrowableEntity.class, 76, 0.3125f),
     FISHING_BOBBER(FishingHookEntity.class, 77, 0f, 0f, 0f, 0f, "minecraft:fishing_hook"),
     CHALKBOARD(Entity.class, 78, 0f),
     DRAGON_FIREBALL(ItemedFireballEntity.class, 79, 1.0f),
@@ -145,7 +145,7 @@ public enum EntityType {
     MINECART_SPAWNER(SpawnerMinecartEntity.class, 98, 0.7f, 0.98f, 0.98f, 0.35f, "minecraft:minecart"),
     MINECART_COMMAND_BLOCK(CommandBlockMinecartEntity.class, 100, 0.7f, 0.98f, 0.98f, 0.35f, "minecraft:command_block_minecart"),
     LINGERING_POTION(ThrowableEntity.class, 101, 0f),
-    LLAMA_SPIT(Entity.class, 102, 0.25f),
+    LLAMA_SPIT(ThrowableEntity.class, 102, 0.25f),
     EVOKER_FANGS(Entity.class, 103, 0.8f, 0.5f, 0.5f, 0f, "minecraft:evocation_fang"),
     EVOKER(SpellcasterIllagerEntity.class, 104, 1.95f, 0.6f, 0.6f, 0f, "minecraft:evocation_illager"),
     VEX(VexEntity.class, 105, 0.8f, 0.4f),

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/BlockTranslator.java
Patch:
@@ -185,7 +185,7 @@ public class BlockTranslator {
 
             JAVA_ID_BLOCK_MAP.put(javaId, javaRuntimeId);
 
-            BlockStateValues.storeBlockStateValues(entry, javaRuntimeId);
+            BlockStateValues.storeBlockStateValues(entry.getKey(), javaRuntimeId, entry.getValue());
 
             String cleanJavaIdentifier = entry.getKey().split("\\[")[0];
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaTitleTranslator.java
Patch:
@@ -71,6 +71,7 @@ public void translate(ServerTitlePacket packet, GeyserSession session) {
                 titlePacket.setFadeInTime(packet.getFadeIn());
                 titlePacket.setFadeOutTime(packet.getFadeOut());
                 titlePacket.setStayTime(packet.getStay());
+                titlePacket.setText("");
                 break;
         }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityAnimationTranslator.java
Patch:
@@ -60,6 +60,9 @@ public void translate(ServerEntityAnimationPacket packet, GeyserSession session)
             case LEAVE_BED:
                 animatePacket.setAction(AnimatePacket.Action.WAKE_UP);
                 break;
+            default:
+                // Unknown Animation
+                return;
         }
 
         session.sendUpstreamPacket(animatePacket);

File: bootstrap/sponge/src/main/java/org/geysermc/platform/sponge/GeyserSpongePlugin.java
Patch:
@@ -101,7 +101,7 @@ public void onEnable() {
             }
         }
 
-        if (geyserConfig.getBedrock().isCloneRemotePort()){
+        if (geyserConfig.getBedrock().isCloneRemotePort()) {
             geyserConfig.getBedrock().setPort(geyserConfig.getRemote().getPort());
         }
 

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/RabbitEntity.java
Patch:
@@ -44,7 +44,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
         if (entityMetadata.getId() == 15) {
             metadata.put(EntityData.SCALE, .55f);
             boolean isBaby = (boolean) entityMetadata.getValue();
-            if(isBaby) {
+            if (isBaby) {
                 metadata.put(EntityData.SCALE, .35f);
                 metadata.getFlags().setFlag(EntityFlag.BABY, true);
             }

File: connector/src/main/java/org/geysermc/connector/entity/living/merchant/VillagerEntity.java
Patch:
@@ -125,7 +125,7 @@ public void moveRelative(GeyserSession session, double relX, double relY, double
             Pattern r = Pattern.compile("facing=([a-z]+)");
             Matcher m = r.matcher(bedRotationZ);
             if (m.find()) {
-                switch (m.group(0)){
+                switch (m.group(0)) {
                     case "facing=south":
                         //bed is facing south
                         z = 180;

File: connector/src/main/java/org/geysermc/connector/network/QueryPacketHandler.java
Patch:
@@ -64,7 +64,7 @@ public class QueryPacketHandler {
      * @param buffer The Query data
      */
     public QueryPacketHandler(GeyserConnector connector, InetSocketAddress sender, ByteBuf buffer) {
-        if(!isQueryPacket(buffer))
+        if (!isQueryPacket(buffer))
             return;
 
         this.connector = connector;
@@ -225,7 +225,7 @@ private byte[] getPlayers() {
             query.write(new byte[] { 0x00, 0x00 });
 
             // Fill player names
-            if(pingInfo != null) {
+            if (pingInfo != null) {
                 for (String username : pingInfo.getPlayerList()) {
                     query.write(username.getBytes());
                     query.write((byte) 0x00);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaPlaySoundTranslator.java
Patch:
@@ -52,7 +52,7 @@ public void translate(ServerPlaySoundPacket packet, GeyserSession session) {
 
         SoundRegistry.SoundMapping soundMapping = SoundRegistry.fromJava(packetSound.replace("minecraft:", ""));
         String playsound;
-        if(soundMapping == null || soundMapping.getPlaysound() == null) {
+        if (soundMapping == null || soundMapping.getPlaysound() == null) {
             // no mapping
             session.getConnector().getLogger()
                     .debug("[PlaySound] Defaulting to sound server gave us for " + packet.toString());

File: bootstrap/standalone/src/main/java/org/geysermc/platform/standalone/LoopbackUtil.java
Patch:
@@ -55,7 +55,7 @@ public static void checkLoopback(GeyserStandaloneLogger geyserLogger) {
 
                 if (!result.contains("minecraftuwp")) {
                     Files.write(Paths.get(System.getenv("temp") + "/loopback_minecraft.bat"), loopbackCommand.getBytes(), new OpenOption[0]);
-                    process = Runtime.getRuntime().exec(startScript);
+                    Runtime.getRuntime().exec(startScript);
 
                     geyserLogger.info(ChatColor.AQUA + LanguageUtils.getLocaleStringLog("geyser.bootstrap.loopback.added"));
                 }

File: connector/src/main/java/org/geysermc/connector/common/main/IGeyserMain.java
Patch:
@@ -52,7 +52,7 @@ public void displayMessage() {
      * @return The formatted message
      */
     private String createMessage() {
-        String message = "";
+        StringBuilder message = new StringBuilder();
 
         InputStream helpStream = IGeyserMain.class.getClassLoader().getResourceAsStream("languages/run-help/" + Locale.getDefault().toString() + ".txt");
 
@@ -68,10 +68,10 @@ private String createMessage() {
             line = line.replace("${plugin_type}", this.getPluginType());
             line = line.replace("${plugin_folder}", this.getPluginFolder());
 
-            message += line + "\n";
+            message.append(line).append("\n");
         }
 
-        return message;
+        return message.toString();
     }
 
     /**

File: connector/src/main/java/org/geysermc/connector/entity/living/monster/WitherEntity.java
Patch:
@@ -46,7 +46,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
 
         if (entityMetadata.getId() >= 15 && entityMetadata.getId() <= 17) {
             Entity entity = session.getEntityCache().getEntityByJavaId((int) entityMetadata.getValue());
-            if (entity == null && session.getPlayerEntity().getEntityId() == (Integer) entityMetadata.getValue()) {
+            if (entity == null && session.getPlayerEntity().getEntityId() == (int) entityMetadata.getValue()) {
                 entity = session.getPlayerEntity();
             }
 
@@ -62,7 +62,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
         } else if (entityMetadata.getId() == 17) {
             metadata.put(EntityData.WITHER_TARGET_3, targetID);
         } else if (entityMetadata.getId() == 18) {
-            metadata.put(EntityData.WITHER_INVULNERABLE_TICKS, (int) entityMetadata.getValue());
+            metadata.put(EntityData.WITHER_INVULNERABLE_TICKS, entityMetadata.getValue());
 
             // Show the shield for the first few seconds of spawning (like Java)
             if ((int) entityMetadata.getValue() >= 165) {

File: connector/src/main/java/org/geysermc/connector/network/translators/EntityIdentifierRegistry.java
Patch:
@@ -38,7 +38,7 @@
  */
 public class EntityIdentifierRegistry {
 
-    public static NbtMap ENTITY_IDENTIFIERS;
+    public static final NbtMap ENTITY_IDENTIFIERS;
 
     private EntityIdentifierRegistry() {
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemTranslator.java
Patch:
@@ -303,9 +303,8 @@ public CompoundTag translateToJavaNBT(String name, NbtMap tag) {
         CompoundTag javaTag = new CompoundTag(name);
         Map<String, Tag> javaValue = javaTag.getValue();
         if (tag != null && !tag.isEmpty()) {
-            for (String str : tag.keySet()) {
-                Object bedrockTag = tag.get(str);
-                Tag translatedTag = translateToJavaNBT(str, bedrockTag);
+            for (Map.Entry<String, Object> entry : tag.entrySet()) {
+                Tag translatedTag = translateToJavaNBT(entry.getKey(), entry.getValue());
                 if (translatedTag == null)
                     continue;
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaUnloadChunkTranslator.java
Patch:
@@ -44,7 +44,7 @@ public void translate(ServerUnloadChunkPacket packet, GeyserSession session) {
         Iterator<Vector3i> iterator = session.getSkullCache().keySet().iterator();
         while (iterator.hasNext()) {
             Vector3i position = iterator.next();
-            if (Math.floor(position.getX() / 16) == packet.getX() && Math.floor(position.getZ() / 16) == packet.getZ()) {
+            if ((position.getX() >> 4) == packet.getX() && (position.getZ() >> 4) == packet.getZ()) {
                 session.getSkullCache().get(position).despawnEntity(session);
                 iterator.remove();
             }

File: connector/src/main/java/org/geysermc/connector/utils/LanguageUtils.java
Patch:
@@ -67,8 +67,8 @@ public static void loadGeyserLocale(String locale) {
         // Load the locale
         if (localeStream != null) {
             Properties localeProp = new Properties();
-            try {
-                localeProp.load(new InputStreamReader(localeStream, StandardCharsets.UTF_8));
+            try (InputStreamReader reader = new InputStreamReader(localeStream, StandardCharsets.UTF_8)) {
+                localeProp.load(reader);
             } catch (Exception e) {
                 throw new AssertionError(getLocaleStringLog("geyser.language.load_failed", locale), e);
             }

File: connector/src/main/java/org/geysermc/connector/utils/SettingsUtils.java
Patch:
@@ -147,7 +147,7 @@ public static boolean handleSettingsForm(GeyserSession session, String response)
                 }
 
                 if (Boolean.class.equals(gamerule.getType())) {
-                    Boolean value = settingsResponse.getToggleResponses().get(offset).booleanValue();
+                    boolean value = settingsResponse.getToggleResponses().get(offset);
                     if (value != session.getConnector().getWorldManager().getGameRuleBool(session, gamerule)) {
                         session.getConnector().getWorldManager().setGameRule(session, gamerule.getJavaID(), value);
                     }

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -77,7 +77,8 @@ public class GeyserConnector {
             .enable(JsonParser.Feature.IGNORE_UNDEFINED)
             .enable(JsonParser.Feature.ALLOW_COMMENTS)
             .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)
-            .enable(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES);
+            .enable(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES)
+            .enable(JsonParser.Feature.ALLOW_SINGLE_QUOTES);
 
     public static final String NAME = "Geyser";
     public static final String GIT_VERSION = "DEV"; // A fallback for running in IDEs

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/translators/Generic3X3InventoryTranslator.java
Patch:
@@ -40,7 +40,6 @@
  * Droppers and dispensers
  */
 public class Generic3X3InventoryTranslator extends AbstractBlockInventoryTranslator {
-
     public Generic3X3InventoryTranslator() {
         super(9, "minecraft:dispenser[facing=north,triggered=false]", ContainerType.DISPENSER, ContainerInventoryUpdater.INSTANCE,
                 "minecraft:dropper");
@@ -55,6 +54,7 @@ public Inventory createInventory(String name, int windowId, WindowType windowTyp
     public void openInventory(GeyserSession session, Inventory inventory) {
         ContainerOpenPacket containerOpenPacket = new ContainerOpenPacket();
         containerOpenPacket.setId((byte) inventory.getId());
+        // Required for opening the real block - otherwise, if the container type is incorrect, it refuses to open
         containerOpenPacket.setType(((Generic3X3Container) inventory).isDropper() ? ContainerType.DROPPER : ContainerType.DISPENSER);
         containerOpenPacket.setBlockPosition(inventory.getHolderPosition());
         containerOpenPacket.setUniqueEntityId(inventory.getHolderId());

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/GeyserSpigotPlugin.java
Patch:
@@ -28,7 +28,6 @@
 import com.github.steveice10.mc.protocol.MinecraftConstants;
 import org.bukkit.Bukkit;
 import org.bukkit.plugin.java.JavaPlugin;
-import org.geysermc.adapters.spigot.SpigotAdapters;
 import org.geysermc.common.PlatformType;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.bootstrap.GeyserBootstrap;
@@ -40,6 +39,7 @@
 import org.geysermc.connector.ping.IGeyserPingPassthrough;
 import org.geysermc.connector.utils.FileUtils;
 import org.geysermc.connector.utils.LanguageUtils;
+import org.geysermc.geyser.adapters.spigot.SpigotAdapters;
 import org.geysermc.platform.spigot.command.GeyserSpigotCommandExecutor;
 import org.geysermc.platform.spigot.command.GeyserSpigotCommandManager;
 import org.geysermc.platform.spigot.command.SpigotCommandSender;

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/world/manager/GeyserSpigot1_12NativeWorldManager.java
Patch:
@@ -27,10 +27,10 @@
 
 import org.bukkit.Bukkit;
 import org.bukkit.entity.Player;
-import org.geysermc.adapters.spigot.SpigotAdapters;
-import org.geysermc.adapters.spigot.SpigotWorldAdapter;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.world.block.BlockTranslator;
+import org.geysermc.geyser.adapters.spigot.SpigotAdapters;
+import org.geysermc.geyser.adapters.spigot.SpigotWorldAdapter;
 import us.myles.ViaVersion.api.Via;
 import us.myles.ViaVersion.protocols.protocol1_13to1_12_2.storage.BlockStorage;
 

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/world/manager/GeyserSpigotNativeWorldManager.java
Patch:
@@ -27,10 +27,10 @@
 
 import org.bukkit.Bukkit;
 import org.bukkit.entity.Player;
-import org.geysermc.adapters.spigot.SpigotAdapters;
-import org.geysermc.adapters.spigot.SpigotWorldAdapter;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.world.block.BlockTranslator;
+import org.geysermc.geyser.adapters.spigot.SpigotAdapters;
+import org.geysermc.geyser.adapters.spigot.SpigotWorldAdapter;
 
 public class GeyserSpigotNativeWorldManager extends GeyserSpigotWorldManager {
     protected final SpigotWorldAdapter adapter;

File: connector/src/main/java/org/geysermc/connector/command/CommandManager.java
Patch:
@@ -53,7 +53,7 @@ public CommandManager(GeyserConnector connector) {
         registerCommand(new VersionCommand(connector, "version", "geyser.commands.version.desc", "geyser.command.version"));
         registerCommand(new SettingsCommand(connector, "settings", "geyser.commands.settings.desc", "geyser.command.settings"));
         registerCommand(new StatisticsCommand(connector, "statistics", "geyser.commands.statistics.desc", "geyser.command.statistics"));
-        registerCommand(new AdvancementsCommand(connector, "advancements", "geyser.commands.advancements.desc", "geyser.command.advancements"));
+        registerCommand(new AdvancementsCommand( "advancements", "geyser.commands.advancements.desc", "geyser.command.advancements"));
     }
 
     public void registerCommand(GeyserCommand command) {

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -489,7 +489,7 @@ public void authenticateWithMicrosoftCode() {
                 MsaAuthenticationService msaAuthenticationService = new MsaAuthenticationService(GeyserConnector.OAUTH_CLIENT_ID);
 
                 MsaAuthenticationService.MsCodeResponse response = msaAuthenticationService.getAuthCode();
-                LoginEncryptionUtils.showMicrosoftCodeWindow(this, response);
+                LoginEncryptionUtils.buildAndShowMicrosoftCodeWindow(this, response);
 
                 // This just looks cool
                 SetTimePacket packet = new SetTimePacket();
@@ -605,7 +605,7 @@ public void connected(ConnectedEvent event) {
 
                 // Let the user know there locale may take some time to download
                 // as it has to be extracted from a JAR
-                if (locale.toLowerCase().equals("en_us") && !LocaleUtils.LOCALE_MAPPINGS.containsKey("en_us")) {
+                if (locale.equalsIgnoreCase("en_us") && !LocaleUtils.LOCALE_MAPPINGS.containsKey("en_us")) {
                     // This should probably be left hardcoded as it will only show for en_us clients
                     sendMessage("Loading your locale (en_us); if this isn't already downloaded, this may take some time");
                 }

File: bootstrap/standalone/src/main/java/org/geysermc/platform/standalone/gui/GeyserStandaloneGUI.java
Patch:
@@ -271,17 +271,17 @@ public void setupInterface(GeyserStandaloneLogger geyserStandaloneLogger, Geyser
             JMenuItem commandButton = hasSubCommands ? new JMenu(command.getValue().getName()) : new JMenuItem(command.getValue().getName());
             commandButton.getAccessibleContext().setAccessibleDescription(command.getValue().getDescription());
             if (!hasSubCommands) {
-                commandButton.addActionListener(e -> command.getValue().execute(geyserStandaloneLogger, new String[]{ }));
+                commandButton.addActionListener(e -> command.getValue().execute(null, geyserStandaloneLogger, new String[]{ }));
             } else {
                 // Add a submenu that's the same name as the menu can't be pressed
                 JMenuItem otherCommandButton = new JMenuItem(command.getValue().getName());
                 otherCommandButton.getAccessibleContext().setAccessibleDescription(command.getValue().getDescription());
-                otherCommandButton.addActionListener(e -> command.getValue().execute(geyserStandaloneLogger, new String[]{ }));
+                otherCommandButton.addActionListener(e -> command.getValue().execute(null, geyserStandaloneLogger, new String[]{ }));
                 commandButton.add(otherCommandButton);
                 // Add a menu option for all possible subcommands
                 for (String subCommandName : command.getValue().getSubCommands()) {
                     JMenuItem item = new JMenuItem(subCommandName);
-                    item.addActionListener(e -> command.getValue().execute(geyserStandaloneLogger, new String[]{subCommandName}));
+                    item.addActionListener(e -> command.getValue().execute(null, geyserStandaloneLogger, new String[]{subCommandName}));
                     commandButton.add(item);
                 }
             }

File: connector/src/main/java/org/geysermc/connector/command/defaults/DumpCommand.java
Patch:
@@ -33,6 +33,7 @@
 import org.geysermc.connector.common.ChatColor;
 import org.geysermc.connector.common.serializer.AsteriskSerializer;
 import org.geysermc.connector.dump.DumpInfo;
+import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.utils.LanguageUtils;
 import org.geysermc.connector.utils.WebUtils;
 
@@ -54,7 +55,7 @@ public DumpCommand(GeyserConnector connector, String name, String description, S
     }
 
     @Override
-    public void execute(CommandSender sender, String[] args) {
+    public void execute(GeyserSession session, CommandSender sender, String[] args) {
         boolean showSensitive = false;
         boolean offlineDump = false;
         if (args.length >= 1) {

File: connector/src/main/java/org/geysermc/connector/command/defaults/HelpCommand.java
Patch:
@@ -29,6 +29,7 @@
 import org.geysermc.connector.command.CommandSender;
 import org.geysermc.connector.command.GeyserCommand;
 import org.geysermc.connector.common.ChatColor;
+import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.utils.LanguageUtils;
 
 import java.util.Collections;
@@ -48,7 +49,7 @@ public HelpCommand(GeyserConnector connector, String name, String description, S
     }
 
     @Override
-    public void execute(CommandSender sender, String[] args) {
+    public void execute(GeyserSession session, CommandSender sender, String[] args) {
         int page = 1;
         int maxPage = 1;
         String header = LanguageUtils.getPlayerLocaleString("geyser.commands.help.header", sender.getLocale(), page, maxPage);

File: connector/src/main/java/org/geysermc/connector/command/defaults/ListCommand.java
Patch:
@@ -44,7 +44,7 @@ public ListCommand(GeyserConnector connector, String name, String description, S
     }
 
     @Override
-    public void execute(CommandSender sender, String[] args) {
+    public void execute(GeyserSession session, CommandSender sender, String[] args) {
         String message = "";
         message = LanguageUtils.getPlayerLocaleString("geyser.commands.list.message", sender.getLocale(),
                 connector.getPlayers().size(),

File: connector/src/main/java/org/geysermc/connector/command/defaults/StopCommand.java
Patch:
@@ -29,12 +29,13 @@
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.command.CommandSender;
 import org.geysermc.connector.command.GeyserCommand;
+import org.geysermc.connector.network.session.GeyserSession;
 
 import java.util.Collections;
 
 public class StopCommand extends GeyserCommand {
 
-    private GeyserConnector connector;
+    private final GeyserConnector connector;
 
     public StopCommand(GeyserConnector connector, String name, String description, String permission) {
         super(name, description, permission);
@@ -44,7 +45,7 @@ public StopCommand(GeyserConnector connector, String name, String description, S
     }
 
     @Override
-    public void execute(CommandSender sender, String[] args) {
+    public void execute(GeyserSession session, CommandSender sender, String[] args) {
         if (!sender.isConsole() && connector.getPlatformType() == PlatformType.STANDALONE) {
             return;
         }

File: connector/src/main/java/org/geysermc/connector/entity/ItemedFireballEntity.java
Patch:
@@ -38,11 +38,11 @@ public ItemedFireballEntity(long entityId, long geyserId, EntityType entityType,
     }
 
     @Override
-    protected void updatePosition(GeyserSession session) {
+    public void tick(GeyserSession session) {
         position = position.add(motion);
         // TODO: While this reduces latency in position updating (needed for better fireball reflecting),
-        // TODO: movement is incredibly stiff. See if the MoveEntityDeltaPacket in 1.16.100 fixes this, and if not,
-        // TODO: only use this laggy movement for fireballs that be reflected
+        // TODO: movement is incredibly stiff.
+        // TODO: Only use this laggy movement for fireballs that be reflected
         moveAbsoluteImmediate(session, position, rotation, false, true);
         float drag = getDrag(session);
         motion = motion.add(acceleration).mul(drag);

File: connector/src/main/java/org/geysermc/connector/entity/living/monster/EnderDragonPartEntity.java
Patch:
@@ -32,11 +32,12 @@
 import org.geysermc.connector.entity.type.EntityType;
 
 public class EnderDragonPartEntity extends Entity {
-    public EnderDragonPartEntity(long entityId, long geyserId, EntityType entityType, Vector3f position, Vector3f motion, Vector3f rotation, float width, float height) {
-        super(entityId, geyserId, entityType, position, motion, rotation);
+    public EnderDragonPartEntity(long entityId, long geyserId, EntityType entityType, float width, float height) {
+        super(entityId, geyserId, entityType, Vector3f.ZERO, Vector3f.ZERO, Vector3f.ZERO);
 
         metadata.put(EntityData.BOUNDING_BOX_WIDTH, width);
         metadata.put(EntityData.BOUNDING_BOX_HEIGHT, height);
         metadata.getFlags().setFlag(EntityFlag.INVISIBLE, true);
+        metadata.getFlags().setFlag(EntityFlag.FIRE_IMMUNE, true);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/UpstreamPacketHandler.java
Patch:
@@ -33,6 +33,7 @@
 import org.geysermc.connector.common.AuthType;
 import org.geysermc.connector.configuration.GeyserConfiguration;
 import org.geysermc.connector.network.session.GeyserSession;
+import org.geysermc.connector.network.session.cache.AdvancementsCache;
 import org.geysermc.connector.network.translators.PacketTranslatorRegistry;
 import org.geysermc.connector.utils.LanguageUtils;
 import org.geysermc.connector.utils.LoginEncryptionUtils;
@@ -152,6 +153,7 @@ private boolean couldLoginUserByName(String bedrockUsername) {
 
             if (info != null) {
                 connector.getLogger().info(LanguageUtils.getLocaleStringLog("geyser.auth.stored_credentials", session.getAuthData().getName()));
+                session.setMicrosoftAccount(info.isMicrosoftAccount());
                 session.authenticate(info.getEmail(), info.getPassword());
 
                 // TODO send a message to bedrock user telling them they are connected (if nothing like a motd

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockCommandRequestTranslator.java
Patch:
@@ -43,7 +43,7 @@ public class BedrockCommandRequestTranslator extends PacketTranslator<CommandReq
     public void translate(CommandRequestPacket packet, GeyserSession session) {
         String command = packet.getCommand().replace("/", "");
         CommandManager commandManager = GeyserConnector.getInstance().getCommandManager();
-        if (session.getConnector().getPlatformType() == PlatformType.STANDALONE && command.startsWith("geyser ") && commandManager.getCommands().containsKey(command.split(" ")[1])) {
+        if (session.getConnector().getPlatformType() == PlatformType.STANDALONE && command.trim().startsWith("geyser ") && commandManager.getCommands().containsKey(command.split(" ")[1])) {
             commandManager.runCommand(session, command);
         } else {
             String message = packet.getCommand().trim();

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockMobEquipmentTranslator.java
Patch:
@@ -45,6 +45,9 @@ public void translate(MobEquipmentPacket packet, GeyserSession session) {
             return;
         }
 
+        // Send book update before switching hotbar slot
+        session.getBookEditCache().checkForSend();
+
         session.getInventory().setHeldItemSlot(packet.getHotbarSlot());
 
         ClientPlayerChangeHeldItemPacket changeHeldItemPacket = new ClientPlayerChangeHeldItemPacket(packet.getHotbarSlot());

File: connector/src/main/java/org/geysermc/connector/network/translators/item/translators/nbt/BookPagesTranslator.java
Patch:
@@ -78,9 +78,8 @@ public void translateToJava(CompoundTag itemTag, ItemEntry itemEntry) {
             CompoundTag pageTag = (CompoundTag) tag;
 
             StringTag textTag = pageTag.get("text");
-            pages.add(new StringTag(MessageTranslator.convertToJavaMessage(textTag.getValue())));
+            pages.add(new StringTag("", textTag.getValue()));
         }
-
         itemTag.remove("pages");
         itemTag.put(new ListTag("pages", pages));
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerPositionRotationTranslator.java
Patch:
@@ -81,7 +81,7 @@ public void translate(ServerPlayerPositionRotationPacket packet, GeyserSession s
 
             ChunkUtils.updateChunkPosition(session, pos.toInt());
 
-            session.getConnector().getLogger().info(LanguageUtils.getLocaleStringLog("geyser.entity.player.spawn", packet.getX(), packet.getY(), packet.getZ()));
+            session.getConnector().getLogger().debug(LanguageUtils.getLocaleStringLog("geyser.entity.player.spawn", packet.getX(), packet.getY(), packet.getZ()));
             return;
         }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/BlockTranslator.java
Patch:
@@ -87,7 +87,9 @@ public class BlockTranslator {
      */
     public static final int BEDROCK_RUNTIME_COMMAND_BLOCK_ID;
 
-    // For block breaking animation math
+    /**
+     * A list of all Java runtime wool IDs, for use with block breaking math and shears
+     */
     public static final IntSet JAVA_RUNTIME_WOOL_IDS = new IntOpenHashSet();
     public static final int JAVA_RUNTIME_COBWEB_ID;
 

File: connector/src/main/java/org/geysermc/connector/utils/BlockUtils.java
Patch:
@@ -50,6 +50,7 @@ private static double toolBreakTimeBonus(String toolType, String toolTier, boole
         if (toolType.equals("shears")) return isWoolBlock ? 5.0 : 15.0;
         if (toolType.equals("")) return 1.0;
         switch (toolTier) {
+            // https://minecraft.gamepedia.com/Breaking#Speed
             case "wooden":
                 return 2.0;
             case "stone":
@@ -58,6 +59,8 @@ private static double toolBreakTimeBonus(String toolType, String toolTier, boole
                 return 6.0;
             case "diamond":
                 return 8.0;
+            case "netherite":
+                return 9.0;
             case "golden":
                 return 12.0;
             default:

File: connector/src/main/java/org/geysermc/connector/utils/FileUtils.java
Patch:
@@ -217,8 +217,8 @@ public static Reflections getReflections(String path) {
      * @return The byte array of the file
      */
     public static byte[] readAllBytes(File file) {
-        try {
-            return readAllBytes(new FileInputStream(file));
+        try (InputStream inputStream = new FileInputStream(file)) {
+            return readAllBytes(inputStream);
         } catch (IOException e) {
             throw new RuntimeException("Cannot read " + file);
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/translators/PlayerInventoryTranslator.java
Patch:
@@ -366,6 +366,7 @@ public ItemStackResponsePacket.Response translateRequest(GeyserSession session,
                     break;
                 }
                 default:
+                    session.getConnector().getLogger().error("Unknown crafting state induced by " + session.getName());
                     return rejectRequest(request);
             }
         }

File: connector/src/main/java/org/geysermc/connector/network/session/cache/EntityCache.java
Patch:
@@ -128,8 +128,8 @@ public PlayerEntity getPlayerEntity(UUID uuid) {
         return playerEntities.get(uuid);
     }
 
-    public void removePlayerEntity(UUID uuid) {
-        playerEntities.remove(uuid);
+    public PlayerEntity removePlayerEntity(UUID uuid) {
+        return playerEntities.remove(uuid);
     }
 
     public void addBossBar(UUID uuid, BossBar bossBar) {

File: connector/src/main/java/org/geysermc/connector/inventory/EnchantingContainer.java
Patch:
@@ -47,6 +47,9 @@ public EnchantingContainer(String title, int id, int size, PlayerInventory playe
         geyserEnchantOptions = new GeyserEnchantOption[3];
         for (int i = 0; i < geyserEnchantOptions.length; i++) {
             geyserEnchantOptions[i] = new GeyserEnchantOption(i);
+            // Options cannot be null, so we build initial options
+            // GeyserSession can be safely null here because it's only needed for net IDs
+            enchantOptions[i] = geyserEnchantOptions[i].build(null);
         }
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockItemStackRequestTranslator.java
Patch:
@@ -32,6 +32,9 @@
 import org.geysermc.connector.network.translators.Translator;
 import org.geysermc.connector.network.translators.inventory.InventoryTranslator;
 
+/**
+ * The packet sent for server-authoritative-style inventory transactions.
+ */
 @Translator(packet = ItemStackRequestPacket.class)
 public class BedrockItemStackRequestTranslator extends PacketTranslator<ItemStackRequestPacket> {
 

File: bootstrap/standalone/src/main/java/org/geysermc/platform/standalone/gui/GeyserStandaloneGUI.java
Patch:
@@ -271,17 +271,17 @@ public void setupInterface(GeyserStandaloneLogger geyserStandaloneLogger, Geyser
             JMenuItem commandButton = hasSubCommands ? new JMenu(command.getValue().getName()) : new JMenuItem(command.getValue().getName());
             commandButton.getAccessibleContext().setAccessibleDescription(command.getValue().getDescription());
             if (!hasSubCommands) {
-                commandButton.addActionListener(e -> command.getValue().execute(geyserStandaloneLogger, new String[]{ }));
+                commandButton.addActionListener(e -> command.getValue().execute(null, geyserStandaloneLogger, new String[]{ }));
             } else {
                 // Add a submenu that's the same name as the menu can't be pressed
                 JMenuItem otherCommandButton = new JMenuItem(command.getValue().getName());
                 otherCommandButton.getAccessibleContext().setAccessibleDescription(command.getValue().getDescription());
-                otherCommandButton.addActionListener(e -> command.getValue().execute(geyserStandaloneLogger, new String[]{ }));
+                otherCommandButton.addActionListener(e -> command.getValue().execute(null, geyserStandaloneLogger, new String[]{ }));
                 commandButton.add(otherCommandButton);
                 // Add a menu option for all possible subcommands
                 for (String subCommandName : command.getValue().getSubCommands()) {
                     JMenuItem item = new JMenuItem(subCommandName);
-                    item.addActionListener(e -> command.getValue().execute(geyserStandaloneLogger, new String[]{subCommandName}));
+                    item.addActionListener(e -> command.getValue().execute(null, geyserStandaloneLogger, new String[]{subCommandName}));
                     commandButton.add(item);
                 }
             }

File: connector/src/main/java/org/geysermc/connector/command/defaults/DumpCommand.java
Patch:
@@ -33,6 +33,7 @@
 import org.geysermc.connector.common.ChatColor;
 import org.geysermc.connector.common.serializer.AsteriskSerializer;
 import org.geysermc.connector.dump.DumpInfo;
+import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.utils.LanguageUtils;
 import org.geysermc.connector.utils.WebUtils;
 
@@ -54,7 +55,7 @@ public DumpCommand(GeyserConnector connector, String name, String description, S
     }
 
     @Override
-    public void execute(CommandSender sender, String[] args) {
+    public void execute(GeyserSession session, CommandSender sender, String[] args) {
         boolean showSensitive = false;
         boolean offlineDump = false;
         if (args.length >= 1) {

File: connector/src/main/java/org/geysermc/connector/command/defaults/HelpCommand.java
Patch:
@@ -29,6 +29,7 @@
 import org.geysermc.connector.command.CommandSender;
 import org.geysermc.connector.command.GeyserCommand;
 import org.geysermc.connector.common.ChatColor;
+import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.utils.LanguageUtils;
 
 import java.util.Collections;
@@ -48,7 +49,7 @@ public HelpCommand(GeyserConnector connector, String name, String description, S
     }
 
     @Override
-    public void execute(CommandSender sender, String[] args) {
+    public void execute(GeyserSession session, CommandSender sender, String[] args) {
         int page = 1;
         int maxPage = 1;
         String header = LanguageUtils.getPlayerLocaleString("geyser.commands.help.header", sender.getLocale(), page, maxPage);

File: connector/src/main/java/org/geysermc/connector/command/defaults/ListCommand.java
Patch:
@@ -44,7 +44,7 @@ public ListCommand(GeyserConnector connector, String name, String description, S
     }
 
     @Override
-    public void execute(CommandSender sender, String[] args) {
+    public void execute(GeyserSession session, CommandSender sender, String[] args) {
         String message = "";
         message = LanguageUtils.getPlayerLocaleString("geyser.commands.list.message", sender.getLocale(),
                 connector.getPlayers().size(),

File: connector/src/main/java/org/geysermc/connector/command/defaults/StopCommand.java
Patch:
@@ -29,12 +29,13 @@
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.command.CommandSender;
 import org.geysermc.connector.command.GeyserCommand;
+import org.geysermc.connector.network.session.GeyserSession;
 
 import java.util.Collections;
 
 public class StopCommand extends GeyserCommand {
 
-    private GeyserConnector connector;
+    private final GeyserConnector connector;
 
     public StopCommand(GeyserConnector connector, String name, String description, String permission) {
         super(name, description, permission);
@@ -44,7 +45,7 @@ public StopCommand(GeyserConnector connector, String name, String description, S
     }
 
     @Override
-    public void execute(CommandSender sender, String[] args) {
+    public void execute(GeyserSession session, CommandSender sender, String[] args) {
         if (!sender.isConsole() && connector.getPlatformType() == PlatformType.STANDALONE) {
             return;
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockCommandRequestTranslator.java
Patch:
@@ -43,7 +43,7 @@ public class BedrockCommandRequestTranslator extends PacketTranslator<CommandReq
     public void translate(CommandRequestPacket packet, GeyserSession session) {
         String command = packet.getCommand().replace("/", "");
         CommandManager commandManager = GeyserConnector.getInstance().getCommandManager();
-        if (session.getConnector().getPlatformType() == PlatformType.STANDALONE && command.startsWith("geyser ") && commandManager.getCommands().containsKey(command.split(" ")[1])) {
+        if (session.getConnector().getPlatformType() == PlatformType.STANDALONE && command.trim().startsWith("geyser ") && commandManager.getCommands().containsKey(command.split(" ")[1])) {
             commandManager.runCommand(session, command);
         } else {
             String message = packet.getCommand().trim();

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -151,6 +151,9 @@ public class GeyserSession implements CommandSender {
     @Getter(AccessLevel.NONE)
     private CompletableFuture<Void> inventoryFuture;
 
+    @Setter
+    private ScheduledFuture<?> craftingGridFuture;
+
     /**
      * Stores session collision
      */

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/world/GeyserSpigot1_11CraftingListener.java
Patch:
@@ -93,7 +93,6 @@ public void onPlayerJoin(PlayerJoinEvent event) {
             return;
         }
 
-        System.out.println("Sending recipes!");
         sendServerRecipes(session);
     }
 

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -887,7 +887,6 @@ private void startGame() {
      */
     public void addInventoryTask(Runnable task) {
         synchronized (inventoryLock) {
-            System.out.println("new task " + task.toString());
             inventoryFuture = inventoryFuture.thenRun(task).exceptionally(throwable -> {
                 GeyserConnector.getInstance().getLogger().error("Error processing inventory task", throwable.getCause());
                 return null;
@@ -905,7 +904,6 @@ public void addInventoryTask(Runnable task) {
      */
     public void addInventoryTask(Runnable task, long delayMillis) {
         synchronized (inventoryLock) {
-            System.out.println("new delayed task " + task.toString());
             Executor delayedExecutor = command -> GeyserConnector.getInstance().getGeneralThreadPool().schedule(command, delayMillis, TimeUnit.MILLISECONDS);
             inventoryFuture = inventoryFuture.thenRunAsync(task, delayedExecutor).exceptionally(throwable -> {
                 GeyserConnector.getInstance().getLogger().error("Error processing inventory task", throwable.getCause());

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockContainerCloseTranslator.java
Patch:
@@ -48,7 +48,6 @@ public void translate(ContainerClosePacket packet, GeyserSession session) {
 
             Inventory openInventory = session.getOpenInventory();
             if (openInventory != null && windowId == openInventory.getId()) {
-                System.out.println(packet);
                 ClientCloseWindowPacket closeWindowPacket = new ClientCloseWindowPacket(windowId);
                 session.sendDownstreamPacket(closeWindowPacket);
                 InventoryUtils.closeInventory(session, windowId);

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockFilterTextTranslator.java
Patch:
@@ -52,7 +52,6 @@ public void translate(FilterTextPacket packet, GeyserSession session) {
         if (session.getOpenInventory() instanceof AnvilContainer) {
             // Java Edition sends a packet every time an item is renamed even slightly in GUI. Fortunately, this works out for us now
             ClientRenameItemPacket renameItemPacket = new ClientRenameItemPacket(packet.getText());
-            System.out.println(renameItemPacket);
             session.sendDownstreamPacket(renameItemPacket);
         }
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockInventoryTransactionTranslator.java
Patch:
@@ -81,7 +81,6 @@ public void translate(InventoryTransactionPacket packet, GeyserSession session)
 
         switch (packet.getTransactionType()) {
             case NORMAL:
-                System.out.println(packet);
                 if (packet.getActions().size() == 2) {
                     InventoryActionData worldAction = packet.getActions().get(0);
                     InventoryActionData containerAction = packet.getActions().get(1);

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockItemStackRequestTranslator.java
Patch:
@@ -37,7 +37,6 @@ public class BedrockItemStackRequestTranslator extends PacketTranslator<ItemStac
 
     @Override
     public void translate(ItemStackRequestPacket packet, GeyserSession session) {
-        session.getConnector().getLogger().info(packet.toString());
         Inventory inventory = session.getOpenInventory();
         if (inventory == null)
             return;

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/click/ClickPlan.java
Patch:
@@ -132,7 +132,6 @@ public void execute(boolean refresh) {
             if (clickedItemStack == InventoryUtils.REFRESH_ITEM || action.force) {
                 session.sendDownstreamPacket(new ClientConfirmTransactionPacket(inventory.getId(), actionId, true));
             }
-            System.out.println(clickPacket);
         }
 
         session.getPlayerInventory().setCursor(simulatedCursor, session);
@@ -268,7 +267,6 @@ private void reduceCraftingGrid(boolean makeAll) {
             if (!item.isEmpty())
                 item.sub(crafted);
         }
-        System.out.println("REDUCED GRID BY " + crafted);
     }
 
     /**

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/translators/BeaconInventoryTranslator.java
Patch:
@@ -84,7 +84,6 @@ public void updateProperty(GeyserSession session, Inventory inventory, int key,
         BlockEntityDataPacket packet = new BlockEntityDataPacket();
         packet.setBlockPosition(position);
         packet.setData(builder.build());
-        System.out.println(packet.toString());
         session.sendUpstreamPacket(packet);
     }
 
@@ -98,7 +97,6 @@ public ItemStackResponsePacket.Response translateSpecialRequest(GeyserSession se
         // Input a beacon payment
         BeaconPaymentStackRequestActionData beaconPayment = (BeaconPaymentStackRequestActionData) request.getActions()[0];
         ClientSetBeaconEffectPacket packet = new ClientSetBeaconEffectPacket(beaconPayment.getPrimaryEffect(), beaconPayment.getSecondaryEffect());
-        System.out.println(packet.toString());
         session.sendDownstreamPacket(packet);
         return acceptRequest(request, makeContainerEntries(session, inventory, Collections.emptySet()));
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/translators/BrewingInventoryTranslator.java
Patch:
@@ -69,7 +69,6 @@ public void updateProperty(GeyserSession session, Inventory inventory, int key,
 
     @Override
     public int bedrockSlotToJava(StackRequestSlotInfoData slotInfoData) {
-        System.out.println("Brewing stand: " + slotInfoData);
         if (slotInfoData.getContainer() == ContainerSlotType.BREWING_INPUT) {
             // Ingredient
             // TODO: This hasn't worked and then suddenly, it did.

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/translators/EnchantingInventoryTranslator.java
Patch:
@@ -99,7 +99,6 @@ public void updateProperty(GeyserSession session, Inventory inventory, int key,
             enchantingInventory.getEnchantOptions()[slotToUpdate] = enchantingInventory.getGeyserEnchantOptions()[slotToUpdate].build(session);
             PlayerEnchantOptionsPacket packet = new PlayerEnchantOptionsPacket();
             packet.getOptions().addAll(Arrays.asList(enchantingInventory.getEnchantOptions()));
-            System.out.println(packet);
             session.sendUpstreamPacket(packet);
         }
     }
@@ -130,7 +129,6 @@ public ItemStackResponsePacket.Response translateSpecialRequest(GeyserSession se
             return rejectRequest(request);
         }
         ClientClickWindowButtonPacket packet = new ClientClickWindowButtonPacket(inventory.getId(), javaSlot);
-        System.out.println(packet);
         session.sendDownstreamPacket(packet);
         return acceptRequest(request, makeContainerEntries(session, inventory, Collections.emptySet()));
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/translators/LoomInventoryTranslator.java
Patch:
@@ -140,7 +140,6 @@ public ItemStackResponsePacket.Response translateSpecialRequest(GeyserSession se
         // And the Java loom window has a fixed row/width of four
         // So... Number / 4 = row (so we don't have to bother there), and number % 4 is our column, which leads us back to our index. :)
         ClientClickWindowButtonPacket packet = new ClientClickWindowButtonPacket(inventory.getId(), index);
-        System.out.println(packet);
         session.sendDownstreamPacket(packet);
 
         GeyserItemStack inputCopy = inventory.getItem(0).copy();

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/translators/StonecutterInventoryTranslator.java
Patch:
@@ -73,15 +73,12 @@ public ItemStackResponsePacket.Response translateSpecialRequest(GeyserSession se
         if (results == null) {
             return rejectRequest(request);
         }
-        System.out.println(id +  " " + results);
         ItemStack javaOutput = ItemTranslator.translateToJava(craftData.getResultItems()[0]);
-        System.out.println(javaOutput);
         int button = results.indexOf(javaOutput.getId());
         // If we've already pressed the button with this item, no need to press it again!
         if (container.getStonecutterButton() != button) {
             // Getting the index of the item in the Java stonecutter list
             ClientClickWindowButtonPacket packet = new ClientClickWindowButtonPacket(inventory.getId(), button);
-            System.out.println(packet.toString());
             session.sendDownstreamPacket(packet);
             container.setStonecutterButton(button);
             if (inventory.getItem(1).getJavaId() != javaOutput.getId()) {

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/translators/horse/ChestedHorseInventoryTranslator.java
Patch:
@@ -107,7 +107,6 @@ public void updateInventory(GeyserSession session, Inventory inventory) {
         InventoryContentPacket horseContentsPacket = new InventoryContentPacket();
         horseContentsPacket.setContainerId(inventory.getId());
         horseContentsPacket.setContents(Arrays.asList(horseItems));
-        System.out.println(horseContentsPacket);
         session.sendUpstreamPacket(horseContentsPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/updater/HorseInventoryUpdater.java
Patch:
@@ -62,7 +62,6 @@ public boolean updateSlot(InventoryTranslator translator, GeyserSession session,
         slotPacket.setSlot(translator.javaSlotToBedrock(javaSlot));
         slotPacket.setItem(inventory.getItem(javaSlot).getItemData(session));
         session.sendUpstreamPacket(slotPacket);
-        System.out.println(slotPacket);
         return true;
     }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaConfirmTransactionTranslator.java
Patch:
@@ -41,7 +41,6 @@ public void translate(ServerConfirmTransactionPacket packet, GeyserSession sessi
             if (!packet.isAccepted()) {
                 ClientConfirmTransactionPacket confirmPacket = new ClientConfirmTransactionPacket(packet.getWindowId(), packet.getActionId(), true);
                 session.sendDownstreamPacket(confirmPacket);
-                System.out.println(packet);
             }
         });
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaOpenHorseWindowTranslator.java
Patch:
@@ -99,7 +99,6 @@ public class JavaOpenHorseWindowTranslator extends PacketTranslator<ServerOpenHo
 
     @Override
     public void translate(ServerOpenHorseWindowPacket packet, GeyserSession session) {
-        System.out.println(packet.toString());
         Entity entity = session.getEntityCache().getEntityByJavaId(packet.getEntityId());
         if (entity == null) {
             return;
@@ -130,7 +129,6 @@ public void translate(ServerOpenHorseWindowPacket packet, GeyserSession session)
         builder.putList("slots", NbtType.COMPOUND, slots);
 
         updateEquipPacket.setTag(builder.build());
-        System.out.println(updateEquipPacket);
         session.sendUpstreamPacket(updateEquipPacket);
 
         session.setInventoryTranslator(inventoryTranslator);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaWindowPropertyTranslator.java
Patch:
@@ -38,7 +38,6 @@ public class JavaWindowPropertyTranslator extends PacketTranslator<ServerWindowP
 
     @Override
     public void translate(ServerWindowPropertyPacket packet, GeyserSession session) {
-        System.out.println(packet.toString());
         session.addInventoryTask(() -> {
             Inventory inventory = InventoryUtils.getInventory(session, packet.getWindowId());
             if (inventory == null)

File: connector/src/main/java/org/geysermc/connector/utils/FileUtils.java
Patch:
@@ -217,8 +217,8 @@ public static Reflections getReflections(String path) {
      * @return The byte array of the file
      */
     public static byte[] readAllBytes(File file) {
-        try {
-            return readAllBytes(new FileInputStream(file));
+        try (InputStream inputStream = new FileInputStream(file)) {
+            return readAllBytes(inputStream);
         } catch (IOException e) {
             throw new RuntimeException("Cannot read " + file);
         }

File: connector/src/main/java/org/geysermc/connector/entity/living/monster/EnderDragonPartEntity.java
Patch:
@@ -32,11 +32,12 @@
 import org.geysermc.connector.entity.type.EntityType;
 
 public class EnderDragonPartEntity extends Entity {
-    public EnderDragonPartEntity(long entityId, long geyserId, EntityType entityType, Vector3f position, Vector3f motion, Vector3f rotation, float width, float height) {
-        super(entityId, geyserId, entityType, position, motion, rotation);
+    public EnderDragonPartEntity(long entityId, long geyserId, EntityType entityType, float width, float height) {
+        super(entityId, geyserId, entityType, Vector3f.ZERO, Vector3f.ZERO, Vector3f.ZERO);
 
         metadata.put(EntityData.BOUNDING_BOX_WIDTH, width);
         metadata.put(EntityData.BOUNDING_BOX_HEIGHT, height);
         metadata.getFlags().setFlag(EntityFlag.INVISIBLE, true);
+        metadata.getFlags().setFlag(EntityFlag.FIRE_IMMUNE, true);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -113,6 +113,7 @@ public class GeyserSession implements CommandSender {
     private final SessionPlayerEntity playerEntity;
     private PlayerInventory inventory;
 
+    private BookEditCache bookEditCache;
     private ChunkCache chunkCache;
     private EntityCache entityCache;
     private EntityEffectCache effectCache;
@@ -342,6 +343,7 @@ public GeyserSession(GeyserConnector connector, BedrockServerSession bedrockServ
         this.connector = connector;
         this.upstream = new UpstreamSession(bedrockServerSession);
 
+        this.bookEditCache = new BookEditCache(this);
         this.chunkCache = new ChunkCache(this);
         this.entityCache = new EntityCache(this);
         this.effectCache = new EntityEffectCache();
@@ -599,6 +601,7 @@ public void disconnect(String reason) {
             tickThread.cancel(true);
         }
 
+        this.bookEditCache = null;
         this.chunkCache = null;
         this.entityCache = null;
         this.effectCache = null;

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockInventoryTransactionTranslator.java
Patch:
@@ -69,6 +69,9 @@ public class BedrockInventoryTransactionTranslator extends PacketTranslator<Inve
 
     @Override
     public void translate(InventoryTransactionPacket packet, GeyserSession session) {
+        // Send book updates before opening inventories
+        session.getBookEditCache().checkForSend();
+
         switch (packet.getTransactionType()) {
             case NORMAL:
                 Inventory inventory = session.getInventoryCache().getOpenInventory();

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockMobEquipmentTranslator.java
Patch:
@@ -45,6 +45,9 @@ public void translate(MobEquipmentPacket packet, GeyserSession session) {
             return;
         }
 
+        // Send book update before switching hotbar slot
+        session.getBookEditCache().checkForSend();
+
         session.getInventory().setHeldItemSlot(packet.getHotbarSlot());
 
         ClientPlayerChangeHeldItemPacket changeHeldItemPacket = new ClientPlayerChangeHeldItemPacket(packet.getHotbarSlot());

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/entity/player/BedrockMovePlayerTranslator.java
Patch:
@@ -61,6 +61,9 @@ public void translate(MovePlayerPacket packet, GeyserSession session) {
 
         session.setLastMovementTimestamp(System.currentTimeMillis());
 
+        // Send book update before the player moves
+        session.getBookEditCache().checkForSend();
+
         if (session.confirmTeleport(packet.getPosition().toDouble().sub(0, EntityType.PLAYER.getOffset(), 0))) {
             // head yaw, pitch, head yaw
             Vector3f rotation = Vector3f.from(packet.getRotation().getY(), packet.getRotation().getX(), packet.getRotation().getY());

File: connector/src/main/java/org/geysermc/connector/network/translators/item/translators/nbt/BookPagesTranslator.java
Patch:
@@ -78,9 +78,8 @@ public void translateToJava(CompoundTag itemTag, ItemEntry itemEntry) {
             CompoundTag pageTag = (CompoundTag) tag;
 
             StringTag textTag = pageTag.get("text");
-            pages.add(new StringTag(MessageTranslator.convertToJavaMessage(textTag.getValue())));
+            pages.add(new StringTag("", textTag.getValue()));
         }
-
         itemTag.remove("pages");
         itemTag.put(new ListTag("pages", pages));
     }

File: connector/src/main/java/org/geysermc/connector/utils/LoginEncryptionUtils.java
Patch:
@@ -198,12 +198,12 @@ public static boolean authenticateFromForm(GeyserSession session, GeyserConnecto
                         String password = response.getInputResponses().get(2);
 
                         session.authenticate(email, password);
+
+                        // Clear windows so authentication data isn't accidentally cached
+                        windowCache.getWindows().clear();
                     } else {
                         showLoginDetailsWindow(session);
                     }
-
-                    // Clear windows so authentication data isn't accidentally cached
-                    windowCache.getWindows().clear();
                 } else if (formId == AUTH_FORM_ID && window instanceof SimpleFormWindow) {
                     SimpleFormResponse response = (SimpleFormResponse) window.getResponse();
                     if (response != null) {

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/entity/player/BedrockMovePlayerTranslator.java
Patch:
@@ -50,7 +50,7 @@ public class BedrockMovePlayerTranslator extends PacketTranslator<MovePlayerPack
     @Override
     public void translate(MovePlayerPacket packet, GeyserSession session) {
         PlayerEntity entity = session.getPlayerEntity();
-        if (!session.isSpawned() || session.getPendingDimSwitches().get() > 0) return;
+        if (!session.isSpawned()) return;
 
         if (!session.getUpstream().isInitialized()) {
             MoveEntityAbsolutePacket moveEntityBack = new MoveEntityAbsolutePacket();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaJoinGameTranslator.java
Patch:
@@ -55,12 +55,12 @@ public void translate(ServerJoinGamePacket packet, GeyserSession session) {
         // are swapping servers
         String newDimension = DimensionUtils.getNewDimension(packet.getDimension());
         if (session.isSpawned()) {
-            String fakeDim = session.getDimension().equals(DimensionUtils.OVERWORLD) ? DimensionUtils.NETHER : DimensionUtils.OVERWORLD;
+            String fakeDim = DimensionUtils.getTemporaryDimension(session.getDimension(), newDimension);
             DimensionUtils.switchDimension(session, fakeDim);
-            DimensionUtils.switchDimension(session, newDimension);
 
             session.getWorldCache().removeScoreboard();
         }
+        session.setWorldName(packet.getWorldName());
 
         AdventureSettingsPacket bedrockPacket = new AdventureSettingsPacket();
         bedrockPacket.setUniqueEntityId(session.getPlayerEntity().getGeyserId());

File: connector/src/main/java/org/geysermc/connector/utils/FileUtils.java
Patch:
@@ -36,6 +36,7 @@
 
 import java.io.*;
 import java.net.URL;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.security.MessageDigest;
 import java.util.function.Function;
@@ -62,7 +63,8 @@ public static <T> T loadYaml(InputStream src, Class<T> valueType) throws IOExcep
     }
 
     public static <T> T loadJson(InputStream src, Class<T> valueType) throws IOException {
-        return GeyserConnector.JSON_MAPPER.readValue(src, valueType);
+        // Read specifically with UTF-8 to allow any non-UTF-encoded JSON to read
+        return GeyserConnector.JSON_MAPPER.readValue(new InputStreamReader(src, StandardCharsets.UTF_8), valueType);
     }
 
     /**

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaPlaySoundTranslator.java
Patch:
@@ -36,14 +36,14 @@
 import org.geysermc.connector.network.translators.sound.SoundRegistry;
 
 @Translator(packet = ServerPlaySoundPacket.class)
-public class JavaPlayerPlaySoundTranslator extends PacketTranslator<ServerPlaySoundPacket> {
+public class JavaPlaySoundTranslator extends PacketTranslator<ServerPlaySoundPacket> {
 
     @Override
     public void translate(ServerPlaySoundPacket packet, GeyserSession session) {
         String packetSound;
-        if(packet.getSound() instanceof BuiltinSound) {
+        if (packet.getSound() instanceof BuiltinSound) {
             packetSound = ((BuiltinSound) packet.getSound()).getName();
-        } else if(packet.getSound() instanceof CustomSound) {
+        } else if (packet.getSound() instanceof CustomSound) {
             packetSound = ((CustomSound) packet.getSound()).getName();
         } else {
             session.getConnector().getLogger().debug("Unknown sound packet, we were unable to map this. " + packet.toString());

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/entity/CampfireBlockEntityTranslator.java
Patch:
@@ -47,7 +47,7 @@ public void translateTag(NbtMapBuilder builder, CompoundTag tag, int blockState)
     protected NbtMap getItem(CompoundTag tag) {
         ItemEntry entry = ItemRegistry.getItemEntry((String) tag.get("id").getValue());
         NbtMapBuilder tagBuilder = NbtMap.builder()
-                .putShort("id", (short) entry.getBedrockId())
+                .putString("Name", entry.getBedrockIdentifier())
                 .putByte("Count", (byte) tag.get("Count").getValue())
                 .putShort("Damage", (short) entry.getBedrockData());
         tagBuilder.put("tag", NbtMap.builder().build());

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/world/manager/GeyserSpigot1_12WorldManager.java
Patch:
@@ -125,7 +125,7 @@ public void getBlocksInSection(GeyserSession session, int x, int y, int z, Chunk
         for (int blockY = 0; blockY < 16; blockY++) { // Cache-friendly iteration order
             for (int blockZ = 0; blockZ < 16; blockZ++) {
                 for (int blockX = 0; blockX < 16; blockX++) {
-                    Block block = world.getBlockAt(x, y, z);
+                    Block block = world.getBlockAt((x << 4) + blockX, (y << 4) + blockY, (z << 4) + blockZ);
                     // Black magic that gets the old block state ID
                     int blockId = (block.getType().getId() << 4) | (block.getData() & 0xF);
                     chunk.set(blockX, blockY, blockZ, getLegacyBlock(storage, blockId, (x << 4) + blockX, (y << 4) + blockY, (z << 4) + blockZ));

File: connector/src/main/java/org/geysermc/connector/entity/AreaEffectCloudEntity.java
Patch:
@@ -29,6 +29,7 @@
 import com.github.steveice10.mc.protocol.data.game.world.particle.Particle;
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.data.entity.EntityData;
+import com.nukkitx.protocol.bedrock.data.entity.EntityFlag;
 import org.geysermc.connector.entity.type.EntityType;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.effect.EffectRegistry;
@@ -45,6 +46,8 @@ public AreaEffectCloudEntity(long entityId, long geyserId, EntityType entityType
         metadata.put(EntityData.AREA_EFFECT_CLOUD_RADIUS, 0.0f);
         metadata.put(EntityData.AREA_EFFECT_CLOUD_CHANGE_RATE, -0.005f);
         metadata.put(EntityData.AREA_EFFECT_CLOUD_CHANGE_ON_PICKUP, -0.5f);
+
+        metadata.getFlags().setFlag(EntityFlag.FIRE_IMMUNE, true);
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -123,7 +123,7 @@ public enum EntityType {
     PAINTING(PaintingEntity.class, 83, 0f),
     MINECART(MinecartEntity.class, 84, 0.7f, 0.98f, 0.98f, 0.35f),
     FIREBALL(ItemedFireballEntity.class, 85, 1.0f),
-    THROWN_POTION(ThrowableEntity.class, 86, 0.25f, 0.25f, 0.25f, 0f, "minecraft:splash_potion"),
+    THROWN_POTION(ThrownPotionEntity.class, 86, 0.25f, 0.25f, 0.25f, 0f, "minecraft:splash_potion"),
     THROWN_ENDERPEARL(ThrowableEntity.class, 87, 0.25f, 0.25f, 0.25f, 0f, "minecraft:ender_pearl"),
     LEASH_KNOT(LeashKnotEntity.class, 88, 0.5f, 0.375f),
     WITHER_SKULL(WitherSkullEntity.class, 89, 0.3125f),

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockBlockPickRequestTranslator.java
Patch:
@@ -46,7 +46,6 @@ public void translate(BlockPickRequestPacket packet, GeyserSession session) {
             return;
         }
 
-        String targetIdentifier = BlockTranslator.getJavaIdBlockMap().inverse().get(blockToPick).split("\\[")[0];
-        InventoryUtils.findOrCreatePickedBlock(session, targetIdentifier);
+        InventoryUtils.findOrCreateItem(session, BlockTranslator.getPickItem(blockToPick));
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockEntityPickRequestTranslator.java
Patch:
@@ -110,6 +110,6 @@ public void translate(EntityPickRequestPacket packet, GeyserSession session) {
         // Verify it is, indeed, an item
         if (entry == null) return;
 
-        InventoryUtils.findOrCreatePickedBlock(session, fullItemName);
+        InventoryUtils.findOrCreateItem(session, fullItemName);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/holder/BlockInventoryHolder.java
Patch:
@@ -96,6 +96,7 @@ public void closeInventory(InventoryTranslator translator, GeyserSession session
         blockPacket.setDataLayer(0);
         blockPacket.setBlockPosition(holderPos);
         blockPacket.setRuntimeId(BlockTranslator.getBedrockBlockId(realBlock));
+        blockPacket.getFlags().addAll(UpdateBlockPacket.FLAG_ALL_PRIORITY);
         session.sendUpstreamPacket(blockPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/translators/horse/ChestedHorseInventoryTranslator.java
Patch:
@@ -66,7 +66,7 @@ public BedrockContainerSlot javaSlotToBedrockContainer(int slot) {
         if (slot == this.equipSlot) {
             return new BedrockContainerSlot(ContainerSlotType.HORSE_EQUIP, 0);
         }
-        if (slot <= this.size) {
+        if (slot <= this.size - 1) { // Accommodate for the lack of one slot (saddle or armor)
             return new BedrockContainerSlot(ContainerSlotType.CONTAINER, slot - 1);
         }
         return super.javaSlotToBedrockContainer(slot);
@@ -77,7 +77,7 @@ public int javaSlotToBedrock(int slot) {
         if (slot == 0 && this.equipSlot == 0) {
             return 0;
         }
-        if (slot <= this.size) {
+        if (slot <= this.size - 1) {
             return slot - 1;
         }
         return super.javaSlotToBedrock(slot);

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -53,7 +53,7 @@
 import com.nukkitx.protocol.bedrock.packet.*;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
-import it.unimi.dsi.fastutil.ints.IntSet;
+import it.unimi.dsi.fastutil.ints.IntList;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMaps;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
@@ -214,10 +214,10 @@ public class GeyserSession implements CommandSender {
 
     /**
      * Saves a list of all stonecutter recipes, for use in a stonecutter inventory.
-     * The key is the Java ID of the item; the values are all the possible outputs' Java IDs
+     * The key is the Java ID of the item; the values are all the possible outputs' Java IDs sorted by their string identifier
      */
     @Setter
-    private Int2ObjectMap<IntSet> stonecutterRecipes;
+    private Int2ObjectMap<IntList> stonecutterRecipes;
 
     /**
      * The current attack speed of the player. Used for sending proper cooldown timings.

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/translators/EnchantingInventoryTranslator.java
Patch:
@@ -127,7 +127,7 @@ public ItemStackResponsePacket.Response translateSpecialRequest(GeyserSession se
         }
         if (javaSlot == -1) {
             // Slot should be determined as 0, 1, or 2
-            throw new RuntimeException("Cannot find enchant slot for item!");
+            return rejectRequest(request);
         }
         ClientClickWindowButtonPacket packet = new ClientClickWindowButtonPacket(inventory.getId(), javaSlot);
         System.out.println(packet);

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -653,7 +653,6 @@ public void sendForm(FormWindow window, int id) {
 
     public void setRenderDistance(int renderDistance) {
         renderDistance = GenericMath.ceil(++renderDistance * MathUtils.SQRT_OF_TWO); //square to circle
-        if (renderDistance > 32) renderDistance = 32; // <3 u ViaVersion but I don't like crashing clients x)
         this.renderDistance = renderDistance;
 
         ChunkRadiusUpdatedPacket chunkRadiusUpdatedPacket = new ChunkRadiusUpdatedPacket();

File: common/src/main/java/org/geysermc/floodgate/util/BedrockData.java
Patch:
@@ -76,7 +76,7 @@ public static BedrockData fromString(String data) {
         return new BedrockData(
                 split[0], split[1], split[2], Integer.parseInt(split[3]), split[4],
                 Integer.parseInt(split[5]), Integer.parseInt(split[6]), split[7],
-                linkedPlayer, Boolean.parseBoolean(split[9]), split.length
+                linkedPlayer, "1".equals(split[8]), split.length
         );
     }
 
@@ -93,6 +93,7 @@ public String toString() {
         // The format is the same as the order of the fields in this class
         return version + '\0' + username + '\0' + xuid + '\0' + deviceOs + '\0' +
                 languageCode + '\0' + uiProfile + '\0' + inputMode + '\0' + ip + '\0' +
-                fromProxy + '\0' + (linkedPlayer != null ? linkedPlayer.toString() : "null");
+                (fromProxy ? 1 : 0) + '\0' +
+                (linkedPlayer != null ? linkedPlayer.toString() : "null");
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockTextTranslator.java
Patch:
@@ -38,7 +38,7 @@ public class BedrockTextTranslator extends PacketTranslator<TextPacket> {
 
     @Override
     public void translate(TextPacket packet, GeyserSession session) {
-        String message = packet.getMessage().replaceAll("^\\.", "/").trim();
+        String message = packet.getMessage();
 
         if (MessageTranslator.isTooLong(message, session)) {
             return;

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -342,7 +342,7 @@ public GeyserSession getPlayerByUuid(UUID uuid) {
     /**
      * Gets a player by their Xbox user identifier
      *
-     * @param xboxUuid the Xbox user identifier
+     * @param xuid the Xbox user identifier
      * @return the player or <code>null</code> if there is no player online with this xuid
      */
     public GeyserSession getPlayerByXuid(String xuid) {

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -385,6 +385,8 @@ public void connect(RemoteServer remoteServer) {
         // Don't let the client modify the inventory on death
         // Setting this to true allows keep inventory to work if enabled but doesn't break functionality being false
         gamerulePacket.getGameRules().add(new GameRuleData<>("keepinventory", true));
+        // Ensure client doesn't try and do anything funky; the server handles this for us
+        gamerulePacket.getGameRules().add(new GameRuleData<>("spawnradius", 0));
         upstream.sendPacket(gamerulePacket);
     }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaSpawnParticleTranslator.java
Patch:
@@ -78,7 +78,7 @@ public void translate(ServerSpawnParticlePacket packet, GeyserSession session) {
                 int r = (int) (data.getRed()*255);
                 int g = (int) (data.getGreen()*255);
                 int b = (int) (data.getBlue()*255);
-                particle.setType(LevelEventType.PARTICLE_REDSTONE);
+                particle.setType(LevelEventType.PARTICLE_FALLING_DUST);
                 particle.setData(((0xff) << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff));
                 particle.setPosition(Vector3f.from(packet.getX(), packet.getY(), packet.getZ()));
                 session.sendUpstreamPacket(particle);

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -86,6 +86,7 @@ public class GeyserConnector {
             .enable(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES);
 
     public static final String NAME = "Geyser";
+    public static final String GIT_VERSION = "DEV"; // A fallback for running in IDEs
     public static final String VERSION = "DEV"; // A fallback for running in IDEs
 
     private static final String IP_REGEX = "\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b";

File: connector/src/main/java/org/geysermc/connector/network/QueryPacketHandler.java
Patch:
@@ -174,7 +174,7 @@ private byte[] getGameData() {
         gameData.put("hostname", motd);
         gameData.put("gametype", "SMP");
         gameData.put("game_id", "MINECRAFT");
-        gameData.put("version", BedrockProtocol.DEFAULT_BEDROCK_CODEC.getMinecraftVersion());
+        gameData.put("version", GeyserConnector.NAME + " (" + GeyserConnector.GIT_VERSION + ") " + BedrockProtocol.DEFAULT_BEDROCK_CODEC.getMinecraftVersion());
         gameData.put("plugins", "");
         gameData.put("map", map);
         gameData.put("numplayers", currentPlayerCount);

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -100,7 +100,7 @@ public enum EntityType {
     ARMOR_STAND(ArmorStandEntity.class, 61, 1.975f, 0.5f),
     TRIPOD_CAMERA(Entity.class, 62, 0f),
     PLAYER(PlayerEntity.class, 63, 1.8f, 0.6f, 0.6f, 1.62f),
-    ITEM(ItemEntity.class, 64, 0.25f, 0.25f),
+    ITEM(ItemEntity.class, 64, 0.25f, 0.25f, 0.25f, 0.125f),
     PRIMED_TNT(TNTEntity.class, 65, 0.98f, 0.98f, 0.98f, 0f, "minecraft:tnt"),
     FALLING_BLOCK(FallingBlockEntity.class, 66, 0.98f, 0.98f),
     MOVING_BLOCK(Entity.class, 67, 0f),

File: connector/src/main/java/org/geysermc/connector/network/UpstreamPacketHandler.java
Patch:
@@ -82,7 +82,9 @@ public boolean handle(LoginPacket loginPacket) {
         ResourcePacksInfoPacket resourcePacksInfo = new ResourcePacksInfoPacket();
         for(ResourcePack resourcePack : ResourcePack.PACKS.values()) {
             ResourcePackManifest.Header header = resourcePack.getManifest().getHeader();
-            resourcePacksInfo.getResourcePackInfos().add(new ResourcePacksInfoPacket.Entry(header.getUuid().toString(), header.getVersionString(), resourcePack.getFile().length(), "", "", "", false));
+            resourcePacksInfo.getResourcePackInfos().add(new ResourcePacksInfoPacket.Entry(
+                    header.getUuid().toString(), header.getVersionString(), resourcePack.getFile().length(),
+                            "", "", "", false, false));
         }
         resourcePacksInfo.setForcedToAccept(GeyserConnector.getInstance().getConfig().isForceResourcePacks());
         session.sendUpstreamPacket(resourcePacksInfo);

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/updater/ContainerInventoryUpdater.java
Patch:
@@ -33,6 +33,8 @@
 import org.geysermc.connector.network.translators.inventory.InventoryTranslator;
 import org.geysermc.connector.network.translators.item.ItemTranslator;
 
+import java.util.Arrays;
+
 public class ContainerInventoryUpdater extends InventoryUpdater {
     @Override
     public void updateInventory(InventoryTranslator translator, GeyserSession session, Inventory inventory) {
@@ -45,7 +47,7 @@ public void updateInventory(InventoryTranslator translator, GeyserSession sessio
 
         InventoryContentPacket contentPacket = new InventoryContentPacket();
         contentPacket.setContainerId(inventory.getId());
-        contentPacket.setContents(bedrockItems);
+        contentPacket.setContents(Arrays.asList(bedrockItems));
         session.sendUpstreamPacket(contentPacket);
     }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/updater/InventoryUpdater.java
Patch:
@@ -34,6 +34,8 @@
 import org.geysermc.connector.network.translators.inventory.InventoryTranslator;
 import org.geysermc.connector.network.translators.item.ItemTranslator;
 
+import java.util.Arrays;
+
 public abstract class InventoryUpdater {
     public void updateInventory(InventoryTranslator translator, GeyserSession session, Inventory inventory) {
         ItemData[] bedrockItems = new ItemData[36];
@@ -43,7 +45,7 @@ public void updateInventory(InventoryTranslator translator, GeyserSession sessio
         }
         InventoryContentPacket contentPacket = new InventoryContentPacket();
         contentPacket.setContainerId(ContainerId.INVENTORY);
-        contentPacket.setContents(bedrockItems);
+        contentPacket.setContents(Arrays.asList(bedrockItems));
         session.sendUpstreamPacket(contentPacket);
     }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaDeclareRecipesTranslator.java
Patch:
@@ -65,7 +65,7 @@ public void translate(ServerDeclareRecipesPacket packet, GeyserSession session)
                     for (ItemData[] inputs : inputCombinations) {
                         UUID uuid = UUID.randomUUID();
                         craftingDataPacket.getCraftingData().add(CraftingData.fromShapeless(uuid.toString(),
-                                inputs, new ItemData[]{output}, uuid, "crafting_table", 0, networkId++));
+                                Arrays.asList(inputs), Collections.singletonList(output), uuid, "crafting_table", 0, networkId++));
                     }
                     break;
                 }
@@ -77,8 +77,8 @@ public void translate(ServerDeclareRecipesPacket packet, GeyserSession session)
                     for (ItemData[] inputs : inputCombinations) {
                         UUID uuid = UUID.randomUUID();
                         craftingDataPacket.getCraftingData().add(CraftingData.fromShaped(uuid.toString(),
-                                shapedRecipeData.getWidth(), shapedRecipeData.getHeight(), inputs,
-                                new ItemData[]{output}, uuid, "crafting_table", 0, networkId++));
+                                shapedRecipeData.getWidth(), shapedRecipeData.getHeight(), Arrays.asList(inputs),
+                                Collections.singletonList(output), uuid, "crafting_table", 0, networkId++));
                     }
                     break;
                 }

File: connector/src/main/java/org/geysermc/connector/network/translators/item/translators/nbt/PlayerHeadTranslator.java
Patch:
@@ -39,7 +39,7 @@ public class PlayerHeadTranslator extends NbtItemStackTranslator {
 
     @Override
     public void translateToBedrock(GeyserSession session, CompoundTag itemTag, ItemEntry itemEntry) {
-        if (!itemTag.contains("display") || !((CompoundTag) itemTag.get("display")).contains("name")) {
+        if (!itemTag.contains("display") || !((CompoundTag) itemTag.get("display")).contains("Name")) {
             if (itemTag.contains("SkullOwner")) {
                 StringTag name;
                 Tag skullOwner = itemTag.get("SkullOwner");

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/entity/BedrockEntityEventTranslator.java
Patch:
@@ -42,13 +42,13 @@ public class BedrockEntityEventTranslator extends PacketTranslator<EntityEventPa
     @Override
     public void translate(EntityEventPacket packet, GeyserSession session) {
         switch (packet.getType()) {
-            // Resend the packet so we get the eating sounds
             case EATING_ITEM:
+                // Resend the packet so we get the eating sounds
                 session.sendUpstreamPacket(packet);
                 return;
             case COMPLETE_TRADE:
                 ClientSelectTradePacket selectTradePacket = new ClientSelectTradePacket(packet.getData());
-                session.getDownstream().getSession().send(selectTradePacket);
+                session.sendDownstreamPacket(selectTradePacket);
 
                 Entity villager = session.getPlayerEntity();
                 Inventory openInventory = session.getInventoryCache().getOpenInventory();

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/MerchantInventoryTranslator.java
Patch:
@@ -27,7 +27,6 @@
 
 import com.nukkitx.protocol.bedrock.data.inventory.ContainerId;
 import com.nukkitx.protocol.bedrock.data.inventory.InventoryActionData;
-import com.nukkitx.protocol.bedrock.data.inventory.InventorySource;
 import org.geysermc.connector.inventory.Inventory;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.inventory.updater.CursorInventoryUpdater;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaSetSlotTranslator.java
Patch:
@@ -29,12 +29,10 @@
 import org.geysermc.connector.inventory.Inventory;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
-import org.geysermc.connector.network.translators.inventory.InventoryTranslator;
 import org.geysermc.connector.network.translators.Translator;
+import org.geysermc.connector.network.translators.inventory.InventoryTranslator;
 import org.geysermc.connector.utils.InventoryUtils;
 
-import java.util.Objects;
-
 @Translator(packet = ServerSetSlotPacket.class)
 public class JavaSetSlotTranslator extends PacketTranslator<ServerSetSlotPacket> {
 

File: connector/src/main/java/org/geysermc/connector/entity/CommandBlockMinecartEntity.java
Patch:
@@ -28,6 +28,7 @@
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.EntityMetadata;
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.data.entity.EntityData;
+import net.kyori.adventure.text.Component;
 import org.geysermc.connector.entity.type.EntityType;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.world.block.BlockTranslator;
@@ -50,7 +51,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
             metadata.put(EntityData.COMMAND_BLOCK_COMMAND, entityMetadata.getValue());
         }
         if (entityMetadata.getId() == 14) {
-            metadata.put(EntityData.COMMAND_BLOCK_LAST_OUTPUT, MessageTranslator.convertMessage(entityMetadata.getValue().toString()));
+            metadata.put(EntityData.COMMAND_BLOCK_LAST_OUTPUT, MessageTranslator.convertMessage((Component) entityMetadata.getValue()));
         }
         super.updateBedrockMetadata(entityMetadata, session);
     }

File: connector/src/main/java/org/geysermc/connector/entity/player/PlayerEntity.java
Patch:
@@ -27,7 +27,6 @@
 
 import com.github.steveice10.mc.auth.data.GameProfile;
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.EntityMetadata;
-import com.github.steveice10.mc.protocol.data.message.TextMessage;
 import com.github.steveice10.opennbt.tag.builtin.CompoundTag;
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.math.vector.Vector3i;
@@ -43,6 +42,7 @@
 import com.nukkitx.protocol.bedrock.packet.UpdateAttributesPacket;
 import lombok.Getter;
 import lombok.Setter;
+import net.kyori.adventure.text.Component;
 import org.geysermc.connector.entity.Entity;
 import org.geysermc.connector.entity.LivingEntity;
 import org.geysermc.connector.entity.attribute.Attribute;
@@ -252,9 +252,9 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
 
         if (entityMetadata.getId() == 2) {
             String username = this.username;
-            TextMessage name = (TextMessage) entityMetadata.getValue();
+            Component name = (Component) entityMetadata.getValue();
             if (name != null) {
-                username = MessageTranslator.convertMessage(name.toString());
+                username = MessageTranslator.convertMessage(name);
             }
             Team team = session.getWorldCache().getScoreboard().getTeamFor(username);
             if (team != null) {

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaChatTranslator.java
Patch:
@@ -57,7 +57,7 @@ public void translate(ServerChatPacket packet, GeyserSession session) {
         }
 
         textPacket.setNeedsTranslation(false);
-        textPacket.setMessage(MessageTranslator.convertMessage(packet.getMessage().toString(), session.getLocale()));
+        textPacket.setMessage(MessageTranslator.convertMessage(packet.getMessage(), session.getLocale()));
 
         session.sendUpstreamPacket(textPacket);
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaDisconnectPacket.java
Patch:
@@ -36,6 +36,6 @@ public class JavaDisconnectPacket extends PacketTranslator<ServerDisconnectPacke
 
     @Override
     public void translate(ServerDisconnectPacket packet, GeyserSession session) {
-        session.disconnect(MessageTranslator.convertMessage(packet.getReason().toString(), session.getLocale()));
+        session.disconnect(MessageTranslator.convertMessage(packet.getReason(), session.getLocale()));
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaLoginDisconnectTranslator.java
Patch:
@@ -37,6 +37,6 @@ public class JavaLoginDisconnectTranslator extends PacketTranslator<LoginDisconn
     @Override
     public void translate(LoginDisconnectPacket packet, GeyserSession session) {
         // The client doesn't manually get disconnected so we have to do it ourselves
-        session.disconnect(MessageTranslator.convertMessage(packet.getReason().toString(), session.getLocale()));
+        session.disconnect(MessageTranslator.convertMessage(packet.getReason(), session.getLocale()));
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaTitleTranslator.java
Patch:
@@ -45,7 +45,7 @@ public void translate(ServerTitlePacket packet, GeyserSession session) {
         if (packet.getTitle() == null) {
             text = " ";
         } else {
-            text = MessageTranslator.convertMessage(packet.getTitle().toString(), locale);
+            text = MessageTranslator.convertMessage(packet.getTitle(), locale);
         }
 
         switch (packet.getAction()) {

File: connector/src/main/java/org/geysermc/connector/network/translators/java/scoreboard/JavaScoreboardObjectiveTranslator.java
Patch:
@@ -54,7 +54,7 @@ public void translate(ServerScoreboardObjectivePacket packet, GeyserSession sess
         switch (packet.getAction()) {
             case ADD:
             case UPDATE:
-                objective.setDisplayName(MessageTranslator.convertMessage(packet.getDisplayName().toString()))
+                objective.setDisplayName(MessageTranslator.convertMessage(packet.getDisplayName()))
                         .setType(packet.getType().ordinal());
                 break;
             case REMOVE:

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockMoveEntityAbsoluteTranslator.java
Patch:
@@ -31,13 +31,14 @@
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;
 
-// Used for horses
+/**
+ * Sent by the client when moving a horse.
+ */
 @Translator(packet = MoveEntityAbsolutePacket.class)
 public class BedrockMoveEntityAbsoluteTranslator extends PacketTranslator<MoveEntityAbsolutePacket> {
 
     @Override
     public void translate(MoveEntityAbsolutePacket packet, GeyserSession session) {
-
         ClientVehicleMovePacket clientVehicleMovePacket = new ClientVehicleMovePacket(
                 packet.getPosition().getX(), packet.getPosition().getY(), packet.getPosition().getZ(),
                 packet.getRotation().getY() - 90, packet.getRotation().getX()

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockPlayerInputTranslator.java
Patch:
@@ -31,7 +31,9 @@
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;
 
-// Makes minecarts respond to player input
+/**
+ * Sent by the client for minecarts and boats.
+ */
 @Translator(packet = PlayerInputPacket.class)
 public class BedrockPlayerInputTranslator extends PacketTranslator<PlayerInputPacket> {
 

File: connector/src/main/java/org/geysermc/connector/utils/LocaleUtils.java
Patch:
@@ -140,7 +140,7 @@ private static void downloadLocale(String locale) {
 
             if (locale.equals("en_us")) {
                 try {
-                    Path hashFile = localeFile.getParentFile().toPath().resolve("en_us.hash");
+                    Path hashFile = GeyserConnector.getInstance().getBootstrap().getConfigFolder().resolve("locales/en_us.hash");
                     if (hashFile.toFile().exists()) {
                         curHash = String.join("", Files.readAllLines(hashFile));
                     }
@@ -247,7 +247,7 @@ private static void downloadEN_US(File localeFile) {
             localeJar.close();
 
             // Store the latest jar hash
-            FileUtils.writeFile(localeFile.getParentFile().toPath().resolve("en_us.hash").toString(), clientJarInfo.getSha1().toCharArray());
+            FileUtils.writeFile(GeyserConnector.getInstance().getBootstrap().getConfigFolder().resolve("locales/en_us.hash").toString(), clientJarInfo.getSha1().toCharArray());
 
             // Delete the nolonger needed client/server jar
             Files.delete(tmpFilePath);

File: common/src/main/java/org/geysermc/floodgate/util/LinkedPlayer.java
Patch:
@@ -58,11 +58,11 @@ public static LinkedPlayer of(String javaUsername, UUID javaUniqueId, UUID bedro
     }
 
     static LinkedPlayer fromString(String data) {
-        if (data.length() == 4) {
+        String[] split = data.split(";");
+        if (split.length != 3) {
             return null;
         }
 
-        String[] split = data.split(";");
         LinkedPlayer player = new LinkedPlayer(
                 split[0], UUID.fromString(split[1]), UUID.fromString(split[2])
         );

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -54,6 +54,7 @@
 import org.geysermc.connector.network.translators.world.WorldManager;
 import org.geysermc.connector.network.translators.world.block.BlockTranslator;
 import org.geysermc.connector.network.translators.world.block.entity.BlockEntityTranslator;
+import org.geysermc.connector.network.translators.collision.CollisionTranslator;
 import org.geysermc.connector.utils.DimensionUtils;
 import org.geysermc.connector.utils.LanguageUtils;
 import org.geysermc.connector.utils.LocaleUtils;
@@ -134,6 +135,7 @@ private GeyserConnector(PlatformType platformType, GeyserBootstrap bootstrap) {
         EntityIdentifierRegistry.init();
         ItemRegistry.init();
         ItemTranslator.init();
+        CollisionTranslator.init();
         LocaleUtils.init();
         PotionMixRegistry.init();
         RecipeRegistry.init();

File: connector/src/main/java/org/geysermc/connector/configuration/GeyserConfiguration.java
Patch:
@@ -135,6 +135,8 @@ interface IMetricsInfo {
 
     int getMtu();
 
+    boolean isUseAdapters();
+
     int getConfigVersion();
 
     static void checkGeyserConfiguration(GeyserConfiguration geyserConfig, GeyserLogger geyserLogger) {

File: connector/src/main/java/org/geysermc/connector/configuration/GeyserJacksonConfiguration.java
Patch:
@@ -170,6 +170,9 @@ public static class MetricsInfo implements IMetricsInfo {
     @JsonProperty("mtu")
     private int mtu = 1400;
 
+    @JsonProperty("use-adapters")
+    private boolean useAdapters = true;
+
     @JsonProperty("config-version")
     private int configVersion = 0;
 }

File: connector/src/main/java/org/geysermc/connector/entity/Entity.java
Patch:
@@ -36,7 +36,6 @@
 import com.github.steveice10.mc.protocol.packet.ingame.client.player.ClientPlayerActionPacket;
 import com.github.steveice10.mc.protocol.packet.ingame.client.player.ClientPlayerUseItemPacket;
 import com.nukkitx.math.vector.Vector3f;
-import com.nukkitx.math.vector.Vector3i;
 import com.nukkitx.protocol.bedrock.data.AttributeData;
 import com.nukkitx.protocol.bedrock.data.entity.EntityData;
 import com.nukkitx.protocol.bedrock.data.entity.EntityDataMap;
@@ -49,11 +48,11 @@
 import org.geysermc.connector.entity.attribute.Attribute;
 import org.geysermc.connector.entity.attribute.AttributeType;
 import org.geysermc.connector.entity.living.ArmorStandEntity;
+import org.geysermc.connector.entity.player.PlayerEntity;
 import org.geysermc.connector.entity.type.EntityType;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.item.ItemRegistry;
 import org.geysermc.connector.utils.AttributeUtils;
-import org.geysermc.connector.utils.ChunkUtils;
 import org.geysermc.connector.network.translators.chat.MessageTranslator;
 
 import java.util.ArrayList;

File: connector/src/main/java/org/geysermc/connector/entity/FireworkEntity.java
Patch:
@@ -36,6 +36,7 @@
 import com.nukkitx.nbt.NbtType;
 import com.nukkitx.protocol.bedrock.data.entity.EntityData;
 import com.nukkitx.protocol.bedrock.packet.SetEntityMotionPacket;
+import org.geysermc.connector.entity.player.PlayerEntity;
 import org.geysermc.connector.entity.type.EntityType;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.utils.FireworkColor;

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -37,6 +37,7 @@
 import org.geysermc.connector.entity.living.monster.raid.PillagerEntity;
 import org.geysermc.connector.entity.living.monster.raid.RaidParticipantEntity;
 import org.geysermc.connector.entity.living.monster.raid.SpellcasterIllagerEntity;
+import org.geysermc.connector.entity.player.PlayerEntity;
 
 @Getter
 public enum EntityType {

File: connector/src/main/java/org/geysermc/connector/network/session/cache/EntityCache.java
Patch:
@@ -29,7 +29,7 @@
 import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import lombok.Getter;
 import org.geysermc.connector.entity.Entity;
-import org.geysermc.connector.entity.PlayerEntity;
+import org.geysermc.connector.entity.player.PlayerEntity;
 import org.geysermc.connector.network.session.GeyserSession;
 
 import java.util.*;

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockRespawnTranslator.java
Patch:
@@ -31,7 +31,7 @@
 import com.nukkitx.protocol.bedrock.packet.MovePlayerPacket;
 import com.nukkitx.protocol.bedrock.packet.RespawnPacket;
 import com.nukkitx.protocol.bedrock.packet.SetEntityDataPacket;
-import org.geysermc.connector.entity.PlayerEntity;
+import org.geysermc.connector.entity.player.PlayerEntity;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockSetLocalPlayerAsInitializedTranslator.java
Patch:
@@ -25,7 +25,7 @@
 
 package org.geysermc.connector.network.translators.bedrock;
 
-import org.geysermc.connector.entity.PlayerEntity;
+import org.geysermc.connector.entity.player.PlayerEntity;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/entity/player/BedrockActionTranslator.java
Patch:
@@ -43,6 +43,7 @@
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;
+import org.geysermc.connector.network.translators.collision.CollisionManager;
 import org.geysermc.connector.network.translators.world.block.BlockTranslator;
 import org.geysermc.connector.utils.BlockUtils;
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaJoinGameTranslator.java
Patch:
@@ -34,7 +34,7 @@
 import com.nukkitx.protocol.bedrock.data.GameRuleData;
 import com.nukkitx.protocol.bedrock.data.PlayerPermission;
 import com.nukkitx.protocol.bedrock.packet.*;
-import org.geysermc.connector.entity.PlayerEntity;
+import org.geysermc.connector.entity.player.PlayerEntity;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerListEntryTranslator.java
Patch:
@@ -26,7 +26,7 @@
 package org.geysermc.connector.network.translators.java.entity.player;
 
 import org.geysermc.connector.GeyserConnector;
-import org.geysermc.connector.entity.PlayerEntity;
+import org.geysermc.connector.entity.player.PlayerEntity;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/spawn/JavaSpawnPlayerTranslator.java
Patch:
@@ -28,7 +28,7 @@
 import com.github.steveice10.mc.protocol.packet.ingame.server.entity.spawn.ServerSpawnPlayerPacket;
 import com.nukkitx.math.vector.Vector3f;
 import org.geysermc.connector.GeyserConnector;
-import org.geysermc.connector.entity.PlayerEntity;
+import org.geysermc.connector.entity.player.PlayerEntity;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaNotifyClientTranslator.java
Patch:
@@ -38,7 +38,7 @@
 import com.nukkitx.protocol.bedrock.data.LevelEventType;
 import com.nukkitx.protocol.bedrock.data.entity.EntityEventType;
 import com.nukkitx.protocol.bedrock.packet.*;
-import org.geysermc.connector.entity.PlayerEntity;
+import org.geysermc.connector.entity.player.PlayerEntity;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;

File: connector/src/main/java/org/geysermc/connector/utils/BlockUtils.java
Patch:
@@ -125,8 +125,8 @@ public static double getBreakTime(double blockHardness, int blockId, ItemEntry i
             return calculateBreakTime(blockHardness, toolTier, canHarvestWithHand, correctTool, toolType, isWoolBlock, isCobweb, toolEfficiencyLevel, hasteLevel, miningFatigueLevel, false, false, false);
         }
 
-        hasteLevel = session.getPlayerEntity().getEffectCache().getEffectLevel(Effect.FASTER_DIG);
-        miningFatigueLevel = session.getPlayerEntity().getEffectCache().getEffectLevel(Effect.SLOWER_DIG);
+        hasteLevel = session.getEffectCache().getEffectLevel(Effect.FASTER_DIG);
+        miningFatigueLevel = session.getEffectCache().getEffectLevel(Effect.SLOWER_DIG);
 
         boolean isInWater = session.getConnector().getConfig().isCacheChunks()
                 && BlockTranslator.getBedrockBlockId(session.getConnector().getWorldManager().getBlockAt(session, session.getPlayerEntity().getPosition().toInt())) == BlockTranslator.BEDROCK_WATER_ID;

File: connector/src/main/java/org/geysermc/connector/utils/DimensionUtils.java
Patch:
@@ -82,15 +82,15 @@ public static void switchDimension(GeyserSession session, String javaDimension)
         session.setSpawned(false);
         session.setLastChunkPosition(null);
 
-        for (Effect effect : session.getPlayerEntity().getEffectCache().getEntityEffects().keySet()) {
+        for (Effect effect : session.getEffectCache().getEntityEffects().keySet()) {
             MobEffectPacket mobEffectPacket = new MobEffectPacket();
             mobEffectPacket.setEvent(MobEffectPacket.Event.REMOVE);
             mobEffectPacket.setRuntimeEntityId(session.getPlayerEntity().getGeyserId());
             mobEffectPacket.setEffectId(EntityUtils.toBedrockEffectId(effect));
             session.sendUpstreamPacket(mobEffectPacket);
         }
         // Effects are re-sent from server
-        session.getPlayerEntity().getEffectCache().getEntityEffects().clear();
+        session.getEffectCache().getEntityEffects().clear();
 
         //let java server handle portal travel sound
         StopSoundPacket stopSoundPacket = new StopSoundPacket();

File: connector/src/main/java/org/geysermc/connector/utils/SkinUtils.java
Patch:
@@ -35,7 +35,7 @@
 import lombok.Getter;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.common.AuthType;
-import org.geysermc.connector.entity.PlayerEntity;
+import org.geysermc.connector.entity.player.PlayerEntity;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.session.auth.BedrockClientData;
 

File: bootstrap/bungeecord/src/main/java/org/geysermc/platform/bungeecord/command/GeyserBungeeCommandExecutor.java
Patch:
@@ -67,7 +67,7 @@ public void execute(CommandSender sender, String[] args) {
     @Override
     public Iterable<String> onTabComplete(CommandSender sender, String[] args) {
         if (args.length == 1) {
-            return Arrays.asList("?", "help", "reload", "shutdown", "stop");
+            return connector.getCommandManager().getCommandNames();
         }
         return new ArrayList<>();
     }

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/command/GeyserSpigotCommandExecutor.java
Patch:
@@ -67,7 +67,7 @@ public boolean onCommand(CommandSender sender, Command command, String label, St
     @Override
     public List<String> onTabComplete(CommandSender sender, Command command, String label, String[] args) {
         if (args.length == 1) {
-            return Arrays.asList("?", "help", "reload", "shutdown", "stop");
+            return connector.getCommandManager().getCommandNames();
         }
         return new ArrayList<>();
     }

File: bootstrap/sponge/src/main/java/org/geysermc/platform/sponge/command/GeyserSpongeCommandExecutor.java
Patch:
@@ -70,7 +70,7 @@ public CommandResult process(CommandSource source, String arguments) throws Comm
     @Override
     public List<String> getSuggestions(CommandSource source, String arguments, @Nullable Location<World> targetPosition) throws CommandException {
         if (arguments.split(" ").length == 1) {
-            return Arrays.asList("?", "help", "reload", "shutdown", "stop");
+            return connector.getCommandManager().getCommandNames();
         }
         return new ArrayList<>();
     }

File: common/src/main/java/org/geysermc/common/form/ModalForm.java
Patch:
@@ -69,9 +69,9 @@ public ModalFormResponse parseResponse(String data) {
     }
 
     public static final class Builder extends Form.Builder<Builder, ModalForm> {
-        private String content;
-        private String button1;
-        private String button2;
+        private String content = "";
+        private String button1 = "";
+        private String button2 = "";
 
         public Builder content(String content) {
             this.content = translate(content);

File: common/src/main/java/org/geysermc/common/form/SimpleForm.java
Patch:
@@ -80,7 +80,7 @@ public SimpleFormResponse parseResponse(String data) {
 
     public static final class Builder extends Form.Builder<Builder, SimpleForm> {
         private final List<ButtonComponent> buttons = new ArrayList<>();
-        private String content;
+        private String content = "";
 
         public Builder content(String content) {
             this.content = translate(content);

File: common/src/main/java/org/geysermc/floodgate/util/DeviceOs.java
Patch:
@@ -25,7 +25,6 @@
 
 package org.geysermc.floodgate.util;
 
-import com.fasterxml.jackson.annotation.JsonEnumDefaultValue;
 import lombok.AccessLevel;
 import lombok.RequiredArgsConstructor;
 
@@ -34,7 +33,6 @@
  */
 @RequiredArgsConstructor(access = AccessLevel.PRIVATE)
 public enum DeviceOs {
-    @JsonEnumDefaultValue
     UNKNOWN("Unknown"),
     ANDROID("Android"),
     IOS("iOS"),
@@ -57,6 +55,7 @@ public enum DeviceOs {
 
     /**
      * Get the DeviceOs instance from the identifier.
+     *
      * @param id the DeviceOs identifier
      * @return The DeviceOs or {@link #UNKNOWN} if the DeviceOs wasn't found
      */

File: common/src/main/java/org/geysermc/floodgate/util/InputMode.java
Patch:
@@ -26,10 +26,7 @@
 
 package org.geysermc.floodgate.util;
 
-import com.fasterxml.jackson.annotation.JsonEnumDefaultValue;
-
 public enum InputMode {
-    @JsonEnumDefaultValue
     UNKNOWN,
     KEYBOARD_MOUSE,
     TOUCH, // I guess Touch?
@@ -40,6 +37,7 @@ public enum InputMode {
 
     /**
      * Get the InputMode instance from the identifier.
+     *
      * @param id the InputMode identifier
      * @return The InputMode or {@link #UNKNOWN} if the DeviceOs wasn't found
      */

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -229,7 +229,7 @@ private GeyserConnector(PlatformType platformType, GeyserBootstrap bootstrap) {
                 for (GeyserSession session : players) {
                     if (session == null) continue;
                     if (session.getClientData() == null) continue;
-                    String os = session.getClientData().getDeviceOS().toString();
+                    String os = session.getClientData().getDeviceOs().toString();
                     if (!valueMap.containsKey(os)) {
                         valueMap.put(os, 1);
                     } else {

File: connector/src/main/java/org/geysermc/connector/dump/DumpInfo.java
Patch:
@@ -73,7 +73,7 @@ public DumpInfo() {
 
         this.userPlatforms = new Object2IntOpenHashMap();
         for (GeyserSession session : GeyserConnector.getInstance().getPlayers()) {
-            DeviceOs device = session.getClientData().getDeviceOS();
+            DeviceOs device = session.getClientData().getDeviceOs();
             userPlatforms.put(device, userPlatforms.getOrDefault(device, 0) + 1);
         }
 

File: connector/src/main/java/org/geysermc/connector/entity/FireworkEntity.java
Patch:
@@ -67,7 +67,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
 
             // TODO: Remove once Mojang fixes bugs with fireworks crashing clients on these specific devices.
             // https://bugs.mojang.com/browse/MCPE-89115
-            if (session.getClientData().getDeviceOS() == DeviceOs.XBOX_ONE || session.getClientData().getDeviceOS() == DeviceOs.ORBIS) {
+            if (session.getClientData().getDeviceOs() == DeviceOs.XBOX_ONE || session.getClientData().getDeviceOs() == DeviceOs.ORBIS) {
                 return;
             }
 

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -402,11 +402,11 @@ public void packetSending(PacketSendingEvent event) {
 
                             try {
                                 FloodgateCipher cipher = connector.getCipher();
-                                encryptedData = cipher.encryptFromString(new BedrockData(
+                                encryptedData = cipher.encryptFromString(BedrockData.of(
                                         clientData.getGameVersion(),
                                         authData.getName(),
                                         authData.getXboxUUID(),
-                                        clientData.getDeviceOS().ordinal(),
+                                        clientData.getDeviceOs().ordinal(),
                                         clientData.getLanguageCode(),
                                         clientData.getUiProfile().ordinal(),
                                         clientData.getCurrentInputMode().ordinal(),

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaStatisticsTranslator.java
Patch:
@@ -33,14 +33,13 @@
 
 @Translator(packet = ServerStatisticsPacket.class)
 public class JavaStatisticsTranslator extends PacketTranslator<ServerStatisticsPacket> {
-
     @Override
     public void translate(ServerStatisticsPacket packet, GeyserSession session) {
         session.updateStatistics(packet.getStatistics());
 
         if (session.isWaitingForStatistics()) {
             session.setWaitingForStatistics(false);
-            session.sendForm(StatisticsUtils.buildMenuForm(session), StatisticsUtils.STATISTICS_MENU_FORM_ID);
+            StatisticsUtils.buildAndSendStatisticsMenu(session);
         }
     }
 }

File: connector/src/main/java/org/geysermc/connector/utils/LoginEncryptionUtils.java
Patch:
@@ -35,10 +35,8 @@
 import com.nukkitx.protocol.bedrock.packet.ServerToClientHandshakePacket;
 import com.nukkitx.protocol.bedrock.util.EncryptionUtils;
 import org.geysermc.common.form.CustomForm;
-import org.geysermc.common.form.ModalForm;
 import org.geysermc.common.form.SimpleForm;
 import org.geysermc.common.form.response.CustomFormResponse;
-import org.geysermc.common.form.response.ModalFormResponse;
 import org.geysermc.common.form.response.SimpleFormResponse;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.network.session.GeyserSession;

File: connector/src/main/java/org/geysermc/connector/utils/SkinProvider.java
Patch:
@@ -77,7 +77,7 @@ public class SkinProvider {
     public static String EARS_GEOMETRY;
     public static String EARS_GEOMETRY_SLIM;
 
-    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();
+    public static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();
 
     static {
         /* Load in the normal ears geometry */
@@ -525,7 +525,6 @@ public static byte[] bufferedImageToImageData(BufferedImage image) {
                 outputStream.write((rgba >> 24) & 0xFF);
             }
         }
-
         return outputStream.toByteArray();
     }
 

File: connector/src/main/java/org/geysermc/connector/entity/ItemFrameEntity.java
Patch:
@@ -98,14 +98,12 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
             ItemEntry itemEntry = ItemRegistry.getItem((ItemStack) entityMetadata.getValue());
             NbtMapBuilder builder = NbtMap.builder();
 
-            String blockName = ItemRegistry.getBedrockIdentifier(itemEntry);
-
             builder.putByte("Count", (byte) itemData.getCount());
             if (itemData.getTag() != null) {
                 builder.put("tag", itemData.getTag().toBuilder().build());
             }
             builder.putShort("Damage", itemData.getDamage());
-            builder.putString("Name", blockName);
+            builder.putString("Name", itemEntry.getBedrockIdentifier());
             NbtMapBuilder tag = getDefaultTag().toBuilder();
             tag.put("Item", builder.build());
             tag.putFloat("ItemDropChance", 1.0f);

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemEntry.java
Patch:
@@ -34,9 +34,10 @@
 @ToString
 public class ItemEntry {
 
-    public static ItemEntry AIR = new ItemEntry("minecraft:air", 0, 0, 0, false);
+    public static ItemEntry AIR = new ItemEntry("minecraft:air", "minecraft:air", 0, 0, 0, false);
 
     private final String javaIdentifier;
+    private final String bedrockIdentifier;
     private final int javaId;
     private final int bedrockId;
     private final int bedrockData;

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ToolItemEntry.java
Patch:
@@ -32,8 +32,8 @@ public class ToolItemEntry extends ItemEntry {
     private final String toolType;
     private final String toolTier;
 
-    public ToolItemEntry(String javaIdentifier, int javaId, int bedrockId, int bedrockData, String toolType, String toolTier, boolean isBlock) {
-        super(javaIdentifier, javaId, bedrockId, bedrockData, isBlock);
+    public ToolItemEntry(String javaIdentifier, String bedrockIdentifier, int javaId, int bedrockId, int bedrockData, String toolType, String toolTier, boolean isBlock) {
+        super(javaIdentifier, bedrockIdentifier, javaId, bedrockId, bedrockData, isBlock);
         this.toolType = toolType;
         this.toolTier = toolTier;
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/item/translators/CompassTranslator.java
Patch:
@@ -53,7 +53,7 @@ public ItemData translateToBedrock(ItemStack itemStack, ItemEntry itemEntry) {
         Tag lodestoneTag = itemStack.getNbt().get("LodestoneTracked");
         if (lodestoneTag instanceof ByteTag) {
             // Get the fake lodestonecompass entry
-            itemEntry = ItemRegistry.getItemEntry("minecraft:lodestonecompass");
+            itemEntry = ItemRegistry.getItemEntry("minecraft:lodestone_compass");
 
             // Get the loadstone pos
             CompoundTag loadstonePos = itemStack.getNbt().get("LodestonePos");
@@ -83,7 +83,7 @@ public ItemData translateToBedrock(ItemStack itemStack, ItemEntry itemEntry) {
     @Override
     public ItemStack translateToJava(ItemData itemData, ItemEntry itemEntry) {
         boolean isLoadstone = false;
-        if (itemEntry.getJavaIdentifier().equals("minecraft:lodestonecompass")) {
+        if (itemEntry.getBedrockIdentifier().equals("minecraft:lodestone_compass")) {
             // Revert the entry back to the compass
             itemEntry = ItemRegistry.getItemEntry("minecraft:compass");
 

File: connector/src/main/java/org/geysermc/connector/network/translators/item/translators/nbt/CrossbowTranslator.java
Patch:
@@ -45,15 +45,15 @@ public void translateToBedrock(GeyserSession session, CompoundTag itemTag, ItemE
             if (!chargedProjectiles.getValue().isEmpty()) {
                 CompoundTag projectile = (CompoundTag) chargedProjectiles.getValue().get(0);
 
-                ItemEntry entry = ItemRegistry.getItemEntry((String) projectile.get("id").getValue());
-                if (entry == null) return;
+                ItemEntry projectileEntry = ItemRegistry.getItemEntry((String) projectile.get("id").getValue());
+                if (projectileEntry == null) return;
                 CompoundTag tag = projectile.get("tag");
                 ItemStack itemStack = new ItemStack(itemEntry.getJavaId(), (byte) projectile.get("Count").getValue(), tag);
                 ItemData itemData = ItemTranslator.translateToBedrock(session, itemStack);
 
                 CompoundTag newProjectile = new CompoundTag("chargedItem");
                 newProjectile.put(new ByteTag("Count", (byte) itemData.getCount()));
-                newProjectile.put(new StringTag("Name", ItemRegistry.getBedrockIdentifier(entry)));
+                newProjectile.put(new StringTag("Name", projectileEntry.getBedrockIdentifier()));
 
                 newProjectile.put(new ShortTag("Damage", itemData.getDamage()));
 

File: connector/src/main/java/org/geysermc/connector/network/translators/item/translators/nbt/ShulkerBoxItemTranslator.java
Patch:
@@ -50,9 +50,8 @@ public void translateToBedrock(GeyserSession session, CompoundTag itemTag, ItemE
             boxItemTag.put(new ByteTag("WasPickedUp", (byte) 0)); // ???
 
             ItemEntry boxItemEntry = ItemRegistry.getItemEntry(((StringTag) itemData.get("id")).getValue());
-            String blockName = ItemRegistry.getBedrockIdentifier(boxItemEntry);
 
-            boxItemTag.put(new StringTag("Name", blockName));
+            boxItemTag.put(new StringTag("Name", boxItemEntry.getBedrockIdentifier()));
             boxItemTag.put(new ShortTag("Damage", (short) boxItemEntry.getBedrockData()));
             boxItemTag.put(new ByteTag("Count", ((ByteTag) itemData.get("Count")).getValue()));
             if (itemData.contains("tag")) {

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaTradeListTranslator.java
Patch:
@@ -139,7 +139,7 @@ private NbtMap getItemTag(GeyserSession session, ItemStack stack, int specialPri
         NbtMapBuilder builder = NbtMap.builder();
         builder.putByte("Count", (byte) (Math.max(itemData.getCount() + specialPrice, 1)));
         builder.putShort("Damage", itemData.getDamage());
-        builder.putShort("id", (short) itemEntry.getBedrockId());
+        builder.putString("Name", itemEntry.getBedrockIdentifier());
         if (itemData.getTag() != null) {
             NbtMap tag = itemData.getTag().toBuilder().build();
             builder.put("tag", tag);

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/world/GeyserSpigotWorldManager.java
Patch:
@@ -119,7 +119,7 @@ public int getBlockAt(GeyserSession session, int x, int y, int z) {
         if ((this.isLegacy && !this.isViaVersion)
             || session.getPlayerEntity() == null
             || (bukkitPlayer = Bukkit.getPlayer(session.getPlayerEntity().getUsername())) == null) {
-            return BlockTranslator.AIR;
+            return BlockTranslator.JAVA_AIR_ID;
         }
         World world = bukkitPlayer.getWorld();
         if (isLegacy) {
@@ -136,7 +136,7 @@ public static int getLegacyBlock(GeyserSession session, int x, int y, int z, boo
             BlockStorage storage = Via.getManager().getConnection(bukkitPlayer.getUniqueId()).get(BlockStorage.class);
             return getLegacyBlock(storage, bukkitPlayer.getWorld(), x, y, z);
         } else {
-            return BlockTranslator.AIR;
+            return BlockTranslator.JAVA_AIR_ID;
         }
     }
 
@@ -190,7 +190,7 @@ public void getBlocksInSection(GeyserSession session, int x, int y, int z, Chunk
                 for (int blockZ = 0; blockZ < 16; blockZ++) {
                     for (int blockX = 0; blockX < 16; blockX++) {
                         Block block = world.getBlockAt((x << 4) + blockX, (y << 4) + blockY, (z << 4) + blockZ);
-                        int id = BlockTranslator.getJavaIdBlockMap().getOrDefault(block.getBlockData().getAsString(), BlockTranslator.AIR);
+                        int id = BlockTranslator.getJavaIdBlockMap().getOrDefault(block.getBlockData().getAsString(), BlockTranslator.JAVA_AIR_ID);
                         chunk.set(blockX, blockY, blockZ, id);
                     }
                 }

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -75,7 +75,6 @@
 import org.geysermc.connector.network.translators.PacketTranslatorRegistry;
 import org.geysermc.connector.network.translators.inventory.EnchantmentInventoryTranslator;
 import org.geysermc.connector.network.translators.item.ItemRegistry;
-import org.geysermc.connector.network.translators.world.block.BlockTranslator;
 import org.geysermc.connector.utils.*;
 import org.geysermc.floodgate.util.BedrockData;
 import org.geysermc.floodgate.util.EncryptionUtil;
@@ -674,7 +673,6 @@ private void startGame() {
         // startGamePacket.setCurrentTick(0);
         startGamePacket.setEnchantmentSeed(0);
         startGamePacket.setMultiplayerCorrelationId("");
-        startGamePacket.setBlockPalette(BlockTranslator.BLOCKS);
         startGamePacket.setItemEntries(ItemRegistry.ITEMS);
         startGamePacket.setVanillaVersion("*");
         startGamePacket.setAuthoritativeMovementMode(AuthoritativeMovementMode.CLIENT);

File: connector/src/main/java/org/geysermc/connector/network/session/cache/ChunkCache.java
Patch:
@@ -94,20 +94,20 @@ public void updateBlock(int x, int y, int z, int block) {
 
     public int getBlockAt(int x, int y, int z) {
         if (!cache) {
-            return BlockTranslator.AIR;
+            return BlockTranslator.JAVA_AIR_ID;
         }
 
         Column column = this.getChunk(x >> 4, z >> 4);
         if (column == null) {
-            return BlockTranslator.AIR;
+            return BlockTranslator.JAVA_AIR_ID;
         }
 
         Chunk chunk = column.getChunks()[y >> 4];
         if (chunk != null) {
             return chunk.get(x & 0xF, y & 0xF, z & 0xF);
         }
 
-        return BlockTranslator.AIR;
+        return BlockTranslator.JAVA_AIR_ID;
     }
 
     public void removeChunk(int chunkX, int chunkZ) {

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockBlockPickRequestTranslator.java
Patch:
@@ -42,7 +42,7 @@ public void translate(BlockPickRequestPacket packet, GeyserSession session) {
         int blockToPick = session.getConnector().getWorldManager().getBlockAt(session, vector.getX(), vector.getY(), vector.getZ());
         
         // Block is air - chunk caching is probably off
-        if (blockToPick == 0) {
+        if (blockToPick == BlockTranslator.JAVA_AIR_ID) {
             return;
         }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/InventoryTranslator.java
Patch:
@@ -53,9 +53,9 @@ public abstract class InventoryTranslator {
             put(WindowType.BREWING_STAND, new BrewingInventoryTranslator());
             put(WindowType.ANVIL, new AnvilInventoryTranslator());
             put(WindowType.CRAFTING, new CraftingInventoryTranslator());
-            put(WindowType.GRINDSTONE, new GrindstoneInventoryTranslator());
+            //put(WindowType.GRINDSTONE, new GrindstoneInventoryTranslator()); //FIXME
             put(WindowType.MERCHANT, new MerchantInventoryTranslator());
-            put(WindowType.SMITHING, new SmithingInventoryTranslator());
+            //put(WindowType.SMITHING, new SmithingInventoryTranslator()); //TODO for server authoritative inventories
 
             InventoryTranslator furnace = new FurnaceInventoryTranslator();
             put(WindowType.FURNACE, furnace);

File: connector/src/main/java/org/geysermc/connector/network/translators/item/translators/nbt/CrossbowTranslator.java
Patch:
@@ -53,7 +53,7 @@ public void translateToBedrock(GeyserSession session, CompoundTag itemTag, ItemE
 
                 CompoundTag newProjectile = new CompoundTag("chargedItem");
                 newProjectile.put(new ByteTag("Count", (byte) itemData.getCount()));
-                newProjectile.put(new StringTag("Name", ItemRegistry.getBedrockIdentifer(entry)));
+                newProjectile.put(new StringTag("Name", ItemRegistry.getBedrockIdentifier(entry)));
 
                 newProjectile.put(new ShortTag("Damage", itemData.getDamage()));
 

File: connector/src/main/java/org/geysermc/connector/network/translators/item/translators/nbt/ShulkerBoxItemTranslator.java
Patch:
@@ -50,7 +50,7 @@ public void translateToBedrock(GeyserSession session, CompoundTag itemTag, ItemE
             boxItemTag.put(new ByteTag("WasPickedUp", (byte) 0)); // ???
 
             ItemEntry boxItemEntry = ItemRegistry.getItemEntry(((StringTag) itemData.get("id")).getValue());
-            String blockName = ItemRegistry.getBedrockIdentifer(boxItemEntry);
+            String blockName = ItemRegistry.getBedrockIdentifier(boxItemEntry);
 
             boxItemTag.put(new StringTag("Name", blockName));
             boxItemTag.put(new ShortTag("Damage", (short) boxItemEntry.getBedrockData()));

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaExplosionTranslator.java
Patch:
@@ -46,7 +46,7 @@ public class JavaExplosionTranslator extends PacketTranslator<ServerExplosionPac
     public void translate(ServerExplosionPacket packet, GeyserSession session) {
         for (ExplodedBlockRecord record : packet.getExploded()) {
             Vector3f pos = Vector3f.from(packet.getX() + record.getX(), packet.getY() + record.getY(), packet.getZ() + record.getZ());
-            ChunkUtils.updateBlock(session, BlockTranslator.AIR, pos.toInt());
+            ChunkUtils.updateBlock(session, BlockTranslator.JAVA_AIR_ID, pos.toInt());
         }
 
         Vector3f pos = Vector3f.from(packet.getX(), packet.getY(), packet.getZ());

File: connector/src/main/java/org/geysermc/connector/network/translators/world/chunk/BlockStorage.java
Patch:
@@ -30,6 +30,7 @@
 import it.unimi.dsi.fastutil.ints.IntArrayList;
 import it.unimi.dsi.fastutil.ints.IntList;
 import lombok.Getter;
+import org.geysermc.connector.network.translators.world.block.BlockTranslator;
 import org.geysermc.connector.network.translators.world.chunk.bitarray.BitArray;
 import org.geysermc.connector.network.translators.world.chunk.bitarray.BitArrayVersion;
 
@@ -50,7 +51,7 @@ public BlockStorage() {
     public BlockStorage(BitArrayVersion version) {
         this.bitArray = version.createArray(SIZE);
         this.palette = new IntArrayList(16);
-        this.palette.add(0); // Air is at the start of every palette.
+        this.palette.add(BlockTranslator.BEDROCK_AIR_ID); // Air is at the start of every palette and controls what the default block is in second-layer non-air block spaces.
     }
 
     public BlockStorage(BitArray bitArray, IntList palette) {

File: connector/src/main/java/org/geysermc/connector/entity/CommandBlockMinecartEntity.java
Patch:
@@ -26,13 +26,12 @@
 package org.geysermc.connector.entity;
 
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.EntityMetadata;
-import com.github.steveice10.mc.protocol.data.message.Message;
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.data.entity.EntityData;
 import org.geysermc.connector.entity.type.EntityType;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.world.block.BlockTranslator;
-import org.geysermc.connector.utils.MessageUtils;
+import org.geysermc.connector.network.translators.chat.MessageTranslator;
 
 public class CommandBlockMinecartEntity extends DefaultBlockMinecartEntity {
 
@@ -51,7 +50,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
             metadata.put(EntityData.COMMAND_BLOCK_COMMAND, entityMetadata.getValue());
         }
         if (entityMetadata.getId() == 14) {
-            metadata.put(EntityData.COMMAND_BLOCK_LAST_OUTPUT, MessageUtils.getBedrockMessage((Message) entityMetadata.getValue()));
+            metadata.put(EntityData.COMMAND_BLOCK_LAST_OUTPUT, MessageTranslator.convertMessage(entityMetadata.getValue().toString()));
         }
         super.updateBedrockMetadata(entityMetadata, session);
     }

File: connector/src/main/java/org/geysermc/connector/entity/Entity.java
Patch:
@@ -54,7 +54,7 @@
 import org.geysermc.connector.network.translators.item.ItemRegistry;
 import org.geysermc.connector.utils.AttributeUtils;
 import org.geysermc.connector.utils.ChunkUtils;
-import org.geysermc.connector.utils.MessageUtils;
+import org.geysermc.connector.network.translators.chat.MessageTranslator;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -318,7 +318,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
                     Message message = (Message) entityMetadata.getValue();
                     if (message != null)
                         // Always translate even if it's a TextMessage since there could be translatable parameters
-                        metadata.put(EntityData.NAMETAG, MessageUtils.getTranslatedBedrockMessage(message, session.getLocale(), true));
+                        metadata.put(EntityData.NAMETAG, MessageTranslator.convertMessage(message.toString(), session.getLocale()));
                 }
                 break;
             case 3: // is custom name visible

File: connector/src/main/java/org/geysermc/connector/entity/PlayerEntity.java
Patch:
@@ -51,7 +51,7 @@
 import org.geysermc.connector.network.session.cache.EntityEffectCache;
 import org.geysermc.connector.scoreboard.Team;
 import org.geysermc.connector.utils.AttributeUtils;
-import org.geysermc.connector.utils.MessageUtils;
+import org.geysermc.connector.network.translators.chat.MessageTranslator;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -243,13 +243,13 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
             String username = this.username;
             TextMessage name = (TextMessage) entityMetadata.getValue();
             if (name != null) {
-                username = MessageUtils.getBedrockMessage(name);
+                username = MessageTranslator.convertMessage(name.toString());
             }
             Team team = session.getWorldCache().getScoreboard().getTeamFor(username);
             if (team != null) {
                 String displayName = "";
                 if (team.isVisibleFor(session.getPlayerEntity().getUsername())) {
-                    displayName = MessageUtils.toChatColor(team.getColor()) + username;
+                    displayName = MessageTranslator.toChatColor(team.getColor()) + username;
                     displayName = team.getCurrentData().getDisplayName(displayName);
                 }
                 metadata.put(EntityData.NAMETAG, displayName);

File: connector/src/main/java/org/geysermc/connector/network/ConnectorServerEventHandler.java
Patch:
@@ -25,7 +25,6 @@
 
 package org.geysermc.connector.network;
 
-import com.github.steveice10.mc.protocol.data.message.MessageSerializer;
 import com.nukkitx.protocol.bedrock.BedrockPong;
 import com.nukkitx.protocol.bedrock.BedrockServerEventHandler;
 import com.nukkitx.protocol.bedrock.BedrockServerSession;
@@ -36,7 +35,7 @@
 import org.geysermc.connector.configuration.GeyserConfiguration;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.ping.IGeyserPingPassthrough;
-import org.geysermc.connector.utils.MessageUtils;
+import org.geysermc.connector.network.translators.chat.MessageTranslator;
 import org.geysermc.connector.utils.LanguageUtils;
 
 import java.net.InetSocketAddress;
@@ -76,7 +75,7 @@ public BedrockPong onQuery(InetSocketAddress inetSocketAddress) {
         pong.setIpv4Port(config.getBedrock().getPort());
 
         if (config.isPassthroughMotd() && pingInfo != null && pingInfo.getDescription() != null) {
-            String[] motd = MessageUtils.getBedrockMessage(MessageSerializer.fromString(pingInfo.getDescription())).split("\n");
+            String[] motd = MessageTranslator.convertMessageLenient(pingInfo.getDescription()).split("\n");
             String mainMotd = motd[0]; // First line of the motd.
             String subMotd = (motd.length != 1) ? motd[1] : ""; // Second line of the motd if present, otherwise blank.
 

File: connector/src/main/java/org/geysermc/connector/network/QueryPacketHandler.java
Patch:
@@ -25,12 +25,11 @@
 
 package org.geysermc.connector.network;
 
-import com.github.steveice10.mc.protocol.data.message.MessageSerializer;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
 import org.geysermc.connector.common.ping.GeyserPingInfo;
 import org.geysermc.connector.GeyserConnector;
-import org.geysermc.connector.utils.MessageUtils;
+import org.geysermc.connector.network.translators.chat.MessageTranslator;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -148,7 +147,7 @@ private byte[] getGameData() {
         }
 
         if (connector.getConfig().isPassthroughMotd() && pingInfo != null) {
-            String[] javaMotd = MessageUtils.getBedrockMessage(MessageSerializer.fromString(pingInfo.getDescription())).split("\n");
+            String[] javaMotd = MessageTranslator.convertMessageLenient(pingInfo.getDescription()).split("\n");
             motd = javaMotd[0].trim(); // First line of the motd.
         } else {
             motd = connector.getConfig().getBedrock().getMotd1();

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -34,7 +34,6 @@
 import com.github.steveice10.mc.protocol.data.game.entity.player.GameMode;
 import com.github.steveice10.mc.protocol.data.game.statistic.Statistic;
 import com.github.steveice10.mc.protocol.data.game.window.VillagerTrade;
-import com.github.steveice10.mc.protocol.data.message.MessageSerializer;
 import com.github.steveice10.mc.protocol.packet.handshake.client.HandshakePacket;
 import com.github.steveice10.mc.protocol.packet.ingame.client.world.ClientTeleportConfirmPacket;
 import com.github.steveice10.mc.protocol.packet.ingame.server.ServerRespawnPacket;
@@ -66,6 +65,7 @@
 import org.geysermc.connector.entity.Entity;
 import org.geysermc.connector.entity.PlayerEntity;
 import org.geysermc.connector.inventory.PlayerInventory;
+import org.geysermc.connector.network.translators.chat.MessageTranslator;
 import org.geysermc.connector.network.remote.RemoteServer;
 import org.geysermc.connector.network.session.auth.AuthData;
 import org.geysermc.connector.network.session.auth.BedrockClientData;
@@ -496,7 +496,7 @@ public void disconnected(DisconnectedEvent event) {
                             event.getCause().printStackTrace();
                         }
 
-                        upstream.disconnect(MessageUtils.getBedrockMessage(MessageSerializer.fromString(event.getReason())));
+                        upstream.disconnect(MessageTranslator.convertMessageLenient(event.getReason()));
                     }
 
                     @Override

File: connector/src/main/java/org/geysermc/connector/network/session/cache/BossBar.java
Patch:
@@ -33,7 +33,7 @@
 import com.nukkitx.protocol.bedrock.packet.RemoveEntityPacket;
 import lombok.AllArgsConstructor;
 import org.geysermc.connector.network.session.GeyserSession;
-import org.geysermc.connector.utils.MessageUtils;
+import org.geysermc.connector.network.translators.chat.MessageTranslator;
 
 @AllArgsConstructor
 public class BossBar {
@@ -58,7 +58,7 @@ public void updateBossBar() {
         BossEventPacket bossEventPacket = new BossEventPacket();
         bossEventPacket.setBossUniqueEntityId(entityId);
         bossEventPacket.setAction(BossEventPacket.Action.CREATE);
-        bossEventPacket.setTitle(MessageUtils.getTranslatedBedrockMessage(title, session.getLocale()));
+        bossEventPacket.setTitle(MessageTranslator.convertMessage(title.toString(), session.getLocale()));
         bossEventPacket.setHealthPercentage(health);
         bossEventPacket.setColor(color); //ignored by client
         bossEventPacket.setOverlay(overlay);
@@ -72,7 +72,7 @@ public void updateTitle(Message title) {
         BossEventPacket bossEventPacket = new BossEventPacket();
         bossEventPacket.setBossUniqueEntityId(entityId);
         bossEventPacket.setAction(BossEventPacket.Action.UPDATE_NAME);
-        bossEventPacket.setTitle(MessageUtils.getTranslatedBedrockMessage(title, session.getLocale()));
+        bossEventPacket.setTitle(MessageTranslator.convertMessage(title.toString(), session.getLocale()));
 
         session.sendUpstreamPacket(bossEventPacket);
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockCommandRequestTranslator.java
Patch:
@@ -34,7 +34,7 @@
 
 import com.github.steveice10.mc.protocol.packet.ingame.client.ClientChatPacket;
 import com.nukkitx.protocol.bedrock.packet.CommandRequestPacket;
-import org.geysermc.connector.utils.MessageUtils;
+import org.geysermc.connector.network.translators.chat.MessageTranslator;
 
 @Translator(packet = CommandRequestPacket.class)
 public class BedrockCommandRequestTranslator extends PacketTranslator<CommandRequestPacket> {
@@ -48,7 +48,7 @@ public void translate(CommandRequestPacket packet, GeyserSession session) {
         } else {
             String message = packet.getCommand().trim();
 
-            if (MessageUtils.isTooLong(message, session)) {
+            if (MessageTranslator.isTooLong(message, session)) {
                 return;
             }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockTextTranslator.java
Patch:
@@ -31,7 +31,7 @@
 
 import com.github.steveice10.mc.protocol.packet.ingame.client.ClientChatPacket;
 import com.nukkitx.protocol.bedrock.packet.TextPacket;
-import org.geysermc.connector.utils.MessageUtils;
+import org.geysermc.connector.network.translators.chat.MessageTranslator;
 
 @Translator(packet = TextPacket.class)
 public class BedrockTextTranslator extends PacketTranslator<TextPacket> {
@@ -40,7 +40,7 @@ public class BedrockTextTranslator extends PacketTranslator<TextPacket> {
     public void translate(TextPacket packet, GeyserSession session) {
         String message = packet.getMessage().replaceAll("^\\.", "/").trim();
 
-        if (MessageUtils.isTooLong(message, session)) {
+        if (MessageTranslator.isTooLong(message, session)) {
             return;
         }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/item/translators/nbt/BasicItemTranslator.java
Patch:
@@ -37,7 +37,6 @@
 import org.geysermc.connector.network.translators.ItemRemapper;
 import org.geysermc.connector.network.translators.item.ItemEntry;
 import org.geysermc.connector.network.translators.item.NbtItemStackTranslator;
-import org.geysermc.connector.utils.MessageUtils;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -108,7 +107,7 @@ private String toJavaMessage(StringTag tag) {
     private String toBedrockMessage(StringTag tag) {
         String message = tag.getValue();
         if (message == null) return null;
-        TextComponent component = (TextComponent) MessageUtils.phraseJavaMessage(message);
+        TextComponent component = (TextComponent) GsonComponentSerializer.gson().deserialize(message);
         String legacy = LegacyComponentSerializer.legacySection().serialize(component);
         if (hasFormatting(LegacyComponentSerializer.legacySection().deserialize(legacy))) {
             return "§r" + legacy;

File: connector/src/main/java/org/geysermc/connector/network/translators/item/translators/nbt/BookPagesTranslator.java
Patch:
@@ -33,7 +33,7 @@
 import org.geysermc.connector.network.translators.ItemRemapper;
 import org.geysermc.connector.network.translators.item.NbtItemStackTranslator;
 import org.geysermc.connector.network.translators.item.ItemEntry;
-import org.geysermc.connector.utils.MessageUtils;
+import org.geysermc.connector.network.translators.chat.MessageTranslator;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -56,7 +56,7 @@ public void translateToBedrock(GeyserSession session, CompoundTag itemTag, ItemE
 
             CompoundTag pageTag = new CompoundTag("");
             pageTag.put(new StringTag("photoname", ""));
-            pageTag.put(new StringTag("text", MessageUtils.getBedrockMessageLenient(textTag.getValue())));
+            pageTag.put(new StringTag("text", MessageTranslator.convertMessageLenient(textTag.getValue())));
             pages.add(pageTag);
         }
 
@@ -78,7 +78,7 @@ public void translateToJava(CompoundTag itemTag, ItemEntry itemEntry) {
             CompoundTag pageTag = (CompoundTag) tag;
 
             StringTag textTag = pageTag.get("text");
-            pages.add(new StringTag(MessageUtils.getJavaMessage(textTag.getValue())));
+            pages.add(new StringTag(MessageTranslator.convertToJavaMessage(textTag.getValue())));
         }
 
         itemTag.remove("pages");

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaDisconnectPacket.java
Patch:
@@ -29,13 +29,13 @@
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;
-import org.geysermc.connector.utils.MessageUtils;
+import org.geysermc.connector.network.translators.chat.MessageTranslator;
 
 @Translator(packet = ServerDisconnectPacket.class)
 public class JavaDisconnectPacket extends PacketTranslator<ServerDisconnectPacket> {
 
     @Override
     public void translate(ServerDisconnectPacket packet, GeyserSession session) {
-        session.disconnect(MessageUtils.getTranslatedBedrockMessage(packet.getReason(), session.getLocale(), true));
+        session.disconnect(MessageTranslator.convertMessage(packet.getReason().toString(), session.getLocale()));
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaLoginDisconnectTranslator.java
Patch:
@@ -29,14 +29,14 @@
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;
-import org.geysermc.connector.utils.MessageUtils;
+import org.geysermc.connector.network.translators.chat.MessageTranslator;
 
 @Translator(packet = LoginDisconnectPacket.class)
 public class JavaLoginDisconnectTranslator extends PacketTranslator<LoginDisconnectPacket> {
 
     @Override
     public void translate(LoginDisconnectPacket packet, GeyserSession session) {
         // The client doesn't manually get disconnected so we have to do it ourselves
-        session.disconnect(MessageUtils.getTranslatedBedrockMessage(packet.getReason(), session.getLocale()));
+        session.disconnect(MessageTranslator.convertMessage(packet.getReason().toString(), session.getLocale()));
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/scoreboard/JavaScoreboardObjectiveTranslator.java
Patch:
@@ -32,7 +32,7 @@
 import org.geysermc.connector.scoreboard.Objective;
 import org.geysermc.connector.scoreboard.Scoreboard;
 import org.geysermc.connector.scoreboard.ScoreboardUpdater;
-import org.geysermc.connector.utils.MessageUtils;
+import org.geysermc.connector.network.translators.chat.MessageTranslator;
 
 import com.github.steveice10.mc.protocol.data.game.scoreboard.ObjectiveAction;
 import com.github.steveice10.mc.protocol.packet.ingame.server.scoreboard.ServerScoreboardObjectivePacket;
@@ -54,7 +54,7 @@ public void translate(ServerScoreboardObjectivePacket packet, GeyserSession sess
         switch (packet.getAction()) {
             case ADD:
             case UPDATE:
-                objective.setDisplayName(MessageUtils.getBedrockMessage(packet.getDisplayName()))
+                objective.setDisplayName(MessageTranslator.convertMessage(packet.getDisplayName().toString()))
                         .setType(packet.getType().ordinal());
                 break;
             case REMOVE:

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/entity/CommandBlockBlockEntityTranslator.java
Patch:
@@ -28,7 +28,7 @@
 import com.github.steveice10.opennbt.tag.builtin.*;
 import com.nukkitx.nbt.NbtMapBuilder;
 import org.geysermc.connector.network.translators.world.block.BlockStateValues;
-import org.geysermc.connector.utils.MessageUtils;
+import org.geysermc.connector.network.translators.chat.MessageTranslator;
 
 @BlockEntity(name = "CommandBlock", regex = "command_block")
 public class CommandBlockBlockEntityTranslator extends BlockEntityTranslator implements RequiresBlockState {
@@ -42,7 +42,7 @@ public void translateTag(NbtMapBuilder builder, CompoundTag tag, int blockState)
         // Java and Bedrock values
         builder.put("conditionMet", ((ByteTag) tag.get("conditionMet")).getValue());
         builder.put("auto", ((ByteTag) tag.get("auto")).getValue());
-        builder.put("CustomName", MessageUtils.getBedrockMessage(((StringTag) tag.get("CustomName")).getValue()));
+        builder.put("CustomName", MessageTranslator.convertMessage(((StringTag) tag.get("CustomName")).getValue()));
         builder.put("powered", ((ByteTag) tag.get("powered")).getValue());
         builder.put("Command", ((StringTag) tag.get("Command")).getValue());
         builder.put("SuccessCount", ((IntTag) tag.get("SuccessCount")).getValue());

File: connector/src/main/java/org/geysermc/connector/network/translators/item/translators/BannerTranslator.java
Patch:
@@ -130,7 +130,7 @@ public ItemData translateToBedrock(ItemStack itemStack, ItemEntry itemEntry) {
         ItemData itemData = super.translateToBedrock(itemStack, itemEntry);
 
         CompoundTag blockEntityTag = itemStack.getNbt().get("BlockEntityTag");
-        if (blockEntityTag.contains("Patterns")) {
+        if (blockEntityTag != null && blockEntityTag.contains("Patterns")) {
             ListTag patterns = blockEntityTag.get("Patterns");
 
             NbtMapBuilder builder = itemData.getTag().toBuilder();

File: bootstrap/fabric/src/main/java/org/geysermc/platform/fabric/GeyserFabricMod.java
Patch:
@@ -34,12 +34,12 @@
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.command.ServerCommandSource;
 import org.apache.logging.log4j.LogManager;
+import org.geysermc.common.PlatformType;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.GeyserLogger;
 import org.geysermc.connector.bootstrap.GeyserBootstrap;
 import org.geysermc.connector.command.CommandManager;
 import org.geysermc.connector.command.GeyserCommand;
-import org.geysermc.connector.common.PlatformType;
 import org.geysermc.connector.configuration.GeyserConfiguration;
 import org.geysermc.connector.dump.BootstrapDumpInfo;
 import org.geysermc.connector.ping.GeyserLegacyPingPassthrough;

File: bootstrap/bungeecord/src/main/java/org/geysermc/platform/bungeecord/GeyserBungeePlugin.java
Patch:
@@ -27,10 +27,10 @@
 
 import net.md_5.bungee.api.config.ListenerInfo;
 import net.md_5.bungee.api.plugin.Plugin;
+import org.geysermc.common.PlatformType;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.bootstrap.GeyserBootstrap;
 import org.geysermc.connector.command.CommandManager;
-import org.geysermc.connector.common.PlatformType;
 import org.geysermc.connector.configuration.GeyserConfiguration;
 import org.geysermc.connector.dump.BootstrapDumpInfo;
 import org.geysermc.connector.ping.GeyserLegacyPingPassthrough;

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/GeyserSpigotPlugin.java
Patch:
@@ -27,10 +27,10 @@
 
 import org.bukkit.Bukkit;
 import org.bukkit.plugin.java.JavaPlugin;
+import org.geysermc.common.PlatformType;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.bootstrap.GeyserBootstrap;
 import org.geysermc.connector.command.CommandManager;
-import org.geysermc.connector.common.PlatformType;
 import org.geysermc.connector.configuration.GeyserConfiguration;
 import org.geysermc.connector.dump.BootstrapDumpInfo;
 import org.geysermc.connector.network.translators.world.WorldManager;

File: bootstrap/sponge/src/main/java/org/geysermc/platform/sponge/GeyserSpongePlugin.java
Patch:
@@ -26,10 +26,10 @@
 package org.geysermc.platform.sponge;
 
 import com.google.inject.Inject;
+import org.geysermc.common.PlatformType;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.bootstrap.GeyserBootstrap;
 import org.geysermc.connector.command.CommandManager;
-import org.geysermc.connector.common.PlatformType;
 import org.geysermc.connector.configuration.GeyserConfiguration;
 import org.geysermc.connector.dump.BootstrapDumpInfo;
 import org.geysermc.connector.ping.GeyserLegacyPingPassthrough;

File: bootstrap/standalone/src/main/java/org/geysermc/platform/standalone/GeyserStandaloneBootstrap.java
Patch:
@@ -36,10 +36,10 @@
 import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Logger;
 import org.apache.logging.log4j.core.appender.ConsoleAppender;
+import org.geysermc.common.PlatformType;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.bootstrap.GeyserBootstrap;
 import org.geysermc.connector.command.CommandManager;
-import org.geysermc.connector.common.PlatformType;
 import org.geysermc.connector.configuration.GeyserConfiguration;
 import org.geysermc.connector.configuration.GeyserJacksonConfiguration;
 import org.geysermc.connector.dump.BootstrapDumpInfo;

File: bootstrap/velocity/src/main/java/org/geysermc/platform/velocity/GeyserVelocityPlugin.java
Patch:
@@ -33,9 +33,9 @@
 import com.velocitypowered.api.plugin.Plugin;
 import com.velocitypowered.api.proxy.ProxyServer;
 import lombok.Getter;
+import org.geysermc.common.PlatformType;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.bootstrap.GeyserBootstrap;
-import org.geysermc.connector.common.PlatformType;
 import org.geysermc.connector.configuration.GeyserConfiguration;
 import org.geysermc.connector.dump.BootstrapDumpInfo;
 import org.geysermc.connector.ping.GeyserLegacyPingPassthrough;

File: common/src/main/java/org/geysermc/common/PlatformType.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.common;
+package org.geysermc.common;
 
 import lombok.AllArgsConstructor;
 import lombok.Getter;

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -32,10 +32,10 @@
 import com.nukkitx.protocol.bedrock.BedrockServer;
 import lombok.Getter;
 import lombok.Setter;
+import org.geysermc.common.PlatformType;
 import org.geysermc.connector.bootstrap.GeyserBootstrap;
 import org.geysermc.connector.command.CommandManager;
 import org.geysermc.connector.common.AuthType;
-import org.geysermc.connector.common.PlatformType;
 import org.geysermc.connector.configuration.GeyserConfiguration;
 import org.geysermc.connector.metrics.Metrics;
 import org.geysermc.connector.network.ConnectorServerEventHandler;

File: connector/src/main/java/org/geysermc/connector/command/defaults/ReloadCommand.java
Patch:
@@ -25,7 +25,7 @@
 
 package org.geysermc.connector.command.defaults;
 
-import org.geysermc.connector.common.PlatformType;
+import org.geysermc.common.PlatformType;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.command.CommandSender;
 import org.geysermc.connector.command.GeyserCommand;

File: connector/src/main/java/org/geysermc/connector/command/defaults/StopCommand.java
Patch:
@@ -25,7 +25,7 @@
 
 package org.geysermc.connector.command.defaults;
 
-import org.geysermc.connector.common.PlatformType;
+import org.geysermc.common.PlatformType;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.command.CommandSender;
 import org.geysermc.connector.command.GeyserCommand;

File: connector/src/main/java/org/geysermc/connector/dump/BootstrapDumpInfo.java
Patch:
@@ -27,7 +27,7 @@
 
 import lombok.AllArgsConstructor;
 import lombok.Getter;
-import org.geysermc.connector.common.PlatformType;
+import org.geysermc.common.PlatformType;
 import org.geysermc.connector.GeyserConnector;
 
 import java.util.List;

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockCommandRequestTranslator.java
Patch:
@@ -25,7 +25,7 @@
 
 package org.geysermc.connector.network.translators.bedrock;
 
-import org.geysermc.connector.common.PlatformType;
+import org.geysermc.common.PlatformType;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.command.CommandManager;
 import org.geysermc.connector.network.session.GeyserSession;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaBlockChangeTranslator.java
Patch:
@@ -29,7 +29,7 @@
 import com.nukkitx.math.vector.Vector3i;
 import com.nukkitx.protocol.bedrock.data.SoundEvent;
 import com.nukkitx.protocol.bedrock.packet.LevelSoundEventPacket;
-import org.geysermc.connector.common.PlatformType;
+import org.geysermc.common.PlatformType;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;

File: bootstrap/standalone/src/main/java/org/geysermc/platform/standalone/GeyserStandaloneBootstrap.java
Patch:
@@ -103,11 +103,11 @@ public static void main(String[] args) {
                 case "--config":
                 case "-c":
                     if (i >= args.length - 1) {
-                        System.err.println(MessageFormat.format(LanguageUtils.getLocaleStringLog("geyser.bootstrap.args.confignotspecified"), "-c"));
+                        System.err.println(MessageFormat.format(LanguageUtils.getLocaleStringLog("geyser.bootstrap.args.config_not_specified"), "-c"));
                         return;
                     }
                     configFilenameOpt = args[i+1]; i++;
-                    System.out.println(MessageFormat.format(LanguageUtils.getLocaleStringLog("geyser.bootstrap.args.configspecified"), configFilenameOpt));
+                    System.out.println(MessageFormat.format(LanguageUtils.getLocaleStringLog("geyser.bootstrap.args.config_specified"), configFilenameOpt));
                     break;
                 case "--help":
                 case "-h":

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -179,8 +179,7 @@ private GeyserConnector(PlatformType platformType, GeyserBootstrap bootstrap) {
         remoteServer = new RemoteServer(config.getRemote().getAddress(), remotePort);
         authType = AuthType.getByName(config.getRemote().getAuthType());
 
-        if (config.isAboveBedrockNetherBuilding())
-            DimensionUtils.changeBedrockNetherId(); // Apply End dimension ID workaround to Nether
+        DimensionUtils.changeBedrockNetherId(config.isAboveBedrockNetherBuilding()); // Apply End dimension ID workaround to Nether
 
         // https://github.com/GeyserMC/Geyser/issues/957
         RakNetConstants.MAXIMUM_MTU_SIZE = (short) config.getMtu();

File: connector/src/main/java/org/geysermc/connector/entity/Entity.java
Patch:
@@ -67,8 +67,6 @@ public class Entity {
     protected long entityId;
     protected long geyserId;
 
-    protected String dimension;
-
     protected Vector3f position;
     protected Vector3f motion;
 
@@ -100,7 +98,6 @@ public Entity(long entityId, long geyserId, EntityType entityType, Vector3f posi
         this.rotation = rotation;
 
         this.valid = false;
-        this.dimension = "minecraft:overworld";
 
         setPosition(position);
 

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/FoxEntity.java
Patch:
@@ -41,7 +41,7 @@ public FoxEntity(long entityId, long geyserId, EntityType entityType, Vector3f p
     @Override
     public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession session) {
         if (entityMetadata.getId() == 16) {
-            metadata.put(EntityData.VARIANT, (int) entityMetadata.getValue());
+            metadata.put(EntityData.VARIANT, entityMetadata.getValue());
         }
         if (entityMetadata.getId() == 17) {
             byte xd = (byte) entityMetadata.getValue();

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/horse/HorseEntity.java
Patch:
@@ -28,7 +28,6 @@
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.EntityMetadata;
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.data.entity.EntityData;
-import com.nukkitx.protocol.bedrock.data.entity.EntityFlag;
 import org.geysermc.connector.entity.type.EntityType;
 import org.geysermc.connector.network.session.GeyserSession;
 
@@ -41,7 +40,7 @@ public HorseEntity(long entityId, long geyserId, EntityType entityType, Vector3f
     @Override
     public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession session) {
         if (entityMetadata.getId() == 18) {
-            metadata.put(EntityData.VARIANT, (int) entityMetadata.getValue());
+            metadata.put(EntityData.VARIANT, entityMetadata.getValue());
             metadata.put(EntityData.MARK_VARIANT, (((int) entityMetadata.getValue()) >> 8) % 5);
         }
         super.updateBedrockMetadata(entityMetadata, session);

File: connector/src/main/java/org/geysermc/connector/entity/living/monster/PiglinEntity.java
Patch:
@@ -41,7 +41,7 @@ public PiglinEntity(long entityId, long geyserId, EntityType entityType, Vector3
 
     @Override
     public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession session) {
-        if (entityMetadata.getId() == 15) {
+        if (entityMetadata.getId() == 16) {
             boolean isBaby = (boolean) entityMetadata.getValue();
             if (isBaby) {
                 metadata.put(EntityData.SCALE, .55f);

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -77,7 +77,7 @@ public enum EntityType {
     GHAST(GhastEntity.class, 41, 4.0f),
     MAGMA_CUBE(MagmaCubeEntity.class, 42, 0.51f),
     BLAZE(BlazeEntity.class, 43, 1.8f, 0.6f),
-    ZOMBIE_VILLAGER(ZombieEntity.class, 44, 1.8f, 0.6f, 0.6f, 1.62f),
+    ZOMBIE_VILLAGER(ZombieVillagerEntity.class, 44, 1.8f, 0.6f, 0.6f, 1.62f, "minecraft:zombie_villager_v2"),
     WITCH(RaidParticipantEntity.class, 45, 1.8f, 0.6f, 0.6f, 1.62f),
     STRAY(AbstractSkeletonEntity.class, 46, 1.8f, 0.6f, 0.6f, 1.62f),
     HUSK(ZombieEntity.class, 47, 1.8f, 0.6f, 0.6f, 1.62f),
@@ -153,7 +153,7 @@ public enum EntityType {
     FOX(FoxEntity.class, 121, 0.5f, 1.25f),
     BEE(BeeEntity.class, 122, 0.6f, 0.6f),
     STRIDER(StriderEntity.class, 125, 1.7f, 0.9f, 0f, 0f, "minecraft:strider"),
-    HOGLIN(AnimalEntity.class, 124, 1.4f, 1.3965f, 1.3965f, 0f, "minecraft:hoglin"),
+    HOGLIN(HoglinEntity.class, 124, 1.4f, 1.3965f, 1.3965f, 0f, "minecraft:hoglin"),
     ZOGLIN(ZoglinEntity.class, 126, 1.4f, 1.3965f, 1.3965f, 0f, "minecraft:zoglin"),
     PIGLIN(PiglinEntity.class, 123, 1.95f, 0.6f, 0.6f, 0f, "minecraft:piglin"),
     PIGLIN_BRUTE(BasePiglinEntity.class, 127, 1.95f, 0.6f, 0.6f, 0f, "minecraft:piglin_brute"),

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaJoinGameTranslator.java
Patch:
@@ -55,7 +55,7 @@ public void translate(ServerJoinGamePacket packet, GeyserSession session) {
         // are swapping servers
         String newDimension = DimensionUtils.getNewDimension(packet.getDimension());
         if (session.isSpawned()) {
-            String fakeDim = entity.getDimension().equals(DimensionUtils.OVERWORLD) ? DimensionUtils.NETHER : DimensionUtils.OVERWORLD;
+            String fakeDim = session.getDimension().equals(DimensionUtils.OVERWORLD) ? DimensionUtils.NETHER : DimensionUtils.OVERWORLD;
             DimensionUtils.switchDimension(session, fakeDim);
             DimensionUtils.switchDimension(session, newDimension);
 
@@ -96,7 +96,7 @@ public void translate(ServerJoinGamePacket packet, GeyserSession session) {
 
         session.sendDownstreamPacket(new ClientPluginMessagePacket("minecraft:brand", PluginMessageUtils.getGeyserBrandData()));
 
-        if (!newDimension.equals(entity.getDimension())) {
+        if (!newDimension.equals(session.getDimension())) {
             DimensionUtils.switchDimension(session, newDimension);
         }
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaRespawnTranslator.java
Patch:
@@ -67,11 +67,11 @@ public void translate(ServerRespawnPacket packet, GeyserSession session) {
         }
 
         String newDimension = DimensionUtils.getNewDimension(packet.getDimension());
-        if (!entity.getDimension().equals(newDimension)) {
+        if (!session.getDimension().equals(newDimension)) {
             DimensionUtils.switchDimension(session, newDimension);
         } else {
             if (session.isManyDimPackets()) { //reloading world
-                String fakeDim = entity.getDimension().equals(DimensionUtils.OVERWORLD) ? DimensionUtils.NETHER : DimensionUtils.OVERWORLD;
+                String fakeDim = session.getDimension().equals(DimensionUtils.OVERWORLD) ? DimensionUtils.NETHER : DimensionUtils.OVERWORLD;
                 DimensionUtils.switchDimension(session, fakeDim);
                 DimensionUtils.switchDimension(session, newDimension);
             } else {

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityAttachTranslator.java
Patch:
@@ -62,7 +62,7 @@ public void translate(ServerEntityAttachPacket packet, GeyserSession session) {
             if ((attachedToId == null || packet.getAttachedToId() == 0)) {
                 // Is not being leashed
                 holderId.getMetadata().getFlags().setFlag(EntityFlag.LEASHED, false);
-                holderId.getMetadata().put(EntityData.LEASH_HOLDER_EID, 0);
+                holderId.getMetadata().put(EntityData.LEASH_HOLDER_EID, -1L);
                 holderId.updateBedrockMetadata(session);
                 EntityEventPacket eventPacket = new EntityEventPacket();
                 eventPacket.setRuntimeEntityId(holderId.getGeyserId());

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaMapDataTranslator.java
Patch:
@@ -46,7 +46,7 @@ public void translate(ServerMapDataPacket packet, GeyserSession session) {
         boolean shouldStore = false;
 
         mapItemDataPacket.setUniqueMapId(packet.getMapId());
-        mapItemDataPacket.setDimensionId(DimensionUtils.javaToBedrock(session.getPlayerEntity().getDimension()));
+        mapItemDataPacket.setDimensionId(DimensionUtils.javaToBedrock(session.getDimension()));
         mapItemDataPacket.setLocked(packet.isLocked());
         mapItemDataPacket.setScale(packet.getScale());
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaSpawnParticleTranslator.java
Patch:
@@ -94,7 +94,7 @@ public void translate(ServerSpawnParticlePacket packet, GeyserSession session) {
                     if (stringParticle != null) {
                         SpawnParticleEffectPacket stringPacket = new SpawnParticleEffectPacket();
                         stringPacket.setIdentifier(stringParticle);
-                        stringPacket.setDimensionId(DimensionUtils.javaToBedrock(session.getPlayerEntity().getDimension()));
+                        stringPacket.setDimensionId(DimensionUtils.javaToBedrock(session.getDimension()));
                         stringPacket.setPosition(Vector3f.from(packet.getX(), packet.getY(), packet.getZ()));
                         session.sendUpstreamPacket(stringPacket);
                     }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaSpawnPositionTranslator.java
Patch:
@@ -42,7 +42,7 @@ public void translate(ServerSpawnPositionPacket packet, GeyserSession session) {
         SetSpawnPositionPacket spawnPositionPacket = new SetSpawnPositionPacket();
         spawnPositionPacket.setBlockPosition(Vector3i.from(packet.getPosition().getX(), packet.getPosition().getY(), packet.getPosition().getZ()));
         spawnPositionPacket.setSpawnForced(true);
-        spawnPositionPacket.setDimensionId(DimensionUtils.javaToBedrock(session.getPlayerEntity().getDimension()));
+        spawnPositionPacket.setDimensionId(DimensionUtils.javaToBedrock(session.getDimension()));
         spawnPositionPacket.setSpawnType(SetSpawnPositionPacket.Type.WORLD_SPAWN);
         session.sendUpstreamPacket(spawnPositionPacket);
     }

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/FoxEntity.java
Patch:
@@ -47,6 +47,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
             byte xd = (byte) entityMetadata.getValue();
             metadata.getFlags().setFlag(EntityFlag.SITTING, (xd & 0x01) == 0x01);
             metadata.getFlags().setFlag(EntityFlag.SNEAKING, (xd & 0x04) == 0x04);
+            metadata.getFlags().setFlag(EntityFlag.INTERESTED, (xd & 0x08) == 0x08);
             metadata.getFlags().setFlag(EntityFlag.SLEEPING, (xd & 0x20) == 0x20);
         }
         super.updateBedrockMetadata(entityMetadata, session);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/scoreboard/JavaDisplayScoreboardTranslator.java
Patch:
@@ -36,8 +36,7 @@ public class JavaDisplayScoreboardTranslator extends PacketTranslator<ServerDisp
 
     @Override
     public void translate(ServerDisplayScoreboardPacket packet, GeyserSession session) {
-        session.getWorldCache().getScoreboard().registerNewObjective(
-                packet.getName(), packet.getPosition()
-        );
+        session.getWorldCache().getScoreboard()
+                .displayObjective(packet.getName(), packet.getPosition());
     }
 }

File: connector/src/main/java/org/geysermc/connector/configuration/GeyserConfiguration.java
Patch:
@@ -81,6 +81,8 @@ public interface GeyserConfiguration {
 
     boolean isForceResourcePacks();
 
+    boolean isXboxAchievementsEnabled();
+
     int getCacheImages();
 
     IMetricsInfo getMetrics();

File: connector/src/main/java/org/geysermc/connector/configuration/GeyserJacksonConfiguration.java
Patch:
@@ -107,6 +107,9 @@ public abstract class GeyserJacksonConfiguration implements GeyserConfiguration
     @JsonProperty("force-resource-packs")
     private boolean forceResourcePacks = true;
 
+    @JsonProperty("xbox-achievements-enabled")
+    private boolean xboxAchievementsEnabled = false;
+
     private MetricsInfo metrics = new MetricsInfo();
 
     @Getter

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -634,7 +634,7 @@ private void startGame() {
         startGamePacket.setLevelGameType(GameType.SURVIVAL);
         startGamePacket.setDifficulty(1);
         startGamePacket.setDefaultSpawn(Vector3i.ZERO);
-        startGamePacket.setAchievementsDisabled(true);
+        startGamePacket.setAchievementsDisabled(!connector.getConfig().isXboxAchievementsEnabled());
         startGamePacket.setCurrentTick(-1);
         startGamePacket.setEduEditionOffers(0);
         startGamePacket.setEduFeaturesEnabled(false);
@@ -645,7 +645,7 @@ private void startGame() {
         startGamePacket.getGamerules().add(new GameRuleData<>("showcoordinates", true));
         startGamePacket.setPlatformBroadcastMode(GamePublishSetting.PUBLIC);
         startGamePacket.setXblBroadcastMode(GamePublishSetting.PUBLIC);
-        startGamePacket.setCommandsEnabled(true);
+        startGamePacket.setCommandsEnabled(!connector.getConfig().isXboxAchievementsEnabled());
         startGamePacket.setTexturePacksRequired(false);
         startGamePacket.setBonusChestEnabled(false);
         startGamePacket.setStartingWithMap(false);

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/entity/BedrockOnlyBlockEntity.java
Patch:
@@ -33,7 +33,6 @@
  * Implemented only if a block is a block entity in Bedrock and not Java Edition.
  */
 public interface BedrockOnlyBlockEntity {
-
     /**
      * Update the block on Bedrock Edition.
      * @param session GeyserSession.
@@ -49,7 +48,7 @@ public interface BedrockOnlyBlockEntity {
      * @return Bedrock tag, or null if not a Bedrock-only Block Entity
      */
     static NbtMap getTag(Vector3i position, int blockState) {
-        if (new FlowerPotBlockEntityTranslator().isBlock(blockState)) {
+        if (FlowerPotBlockEntityTranslator.isFlowerBlock(blockState)) {
             return FlowerPotBlockEntityTranslator.getTag(blockState, position);
         } else if (PistonBlockEntityTranslator.isBlock(blockState)) {
             return PistonBlockEntityTranslator.getTag(blockState, position);

File: connector/src/main/java/org/geysermc/connector/entity/living/ArmorStandEntity.java
Patch:
@@ -29,13 +29,15 @@
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.MetadataType;
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.data.entity.EntityData;
+import lombok.Getter;
 import org.geysermc.connector.entity.LivingEntity;
 import org.geysermc.connector.entity.type.EntityType;
 import org.geysermc.connector.network.session.GeyserSession;
 
 public class ArmorStandEntity extends LivingEntity {
 
     // These are used to store the state of the armour stand for use when handling invisibility
+    @Getter
     private boolean isMarker = false;
     private boolean isInvisible = false;
     private boolean isSmall = false;
@@ -47,7 +49,7 @@ public ArmorStandEntity(long entityId, long geyserId, EntityType entityType, Vec
     @Override
     public void moveAbsolute(GeyserSession session, Vector3f position, Vector3f rotation, boolean isOnGround, boolean teleported) {
         // Fake the height to be above where it is so the nametag appears in the right location for invisible non-marker armour stands
-        if (!isMarker && isInvisible) {
+        if (!isMarker && isInvisible && passengers.isEmpty()) {
             position = position.add(0d, entityType.getHeight() * (isSmall ? 0.55d : 1d), 0d);
         }
 

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -271,7 +271,7 @@ public void shutdown() {
             // Make a copy to prevent ConcurrentModificationException
             final List<GeyserSession> tmpPlayers = new ArrayList<>(players);
             for (GeyserSession playerSession : tmpPlayers) {
-                playerSession.disconnect(LanguageUtils.getPlayerLocaleString("geyser.core.shutdown.kick.message", playerSession.getClientData().getLanguageCode()));
+                playerSession.disconnect(LanguageUtils.getPlayerLocaleString("geyser.core.shutdown.kick.message", playerSession.getLocale()));
             }
 
             CompletableFuture<Void> future = CompletableFuture.runAsync(new Runnable() {

File: connector/src/main/java/org/geysermc/connector/command/GeyserCommand.java
Patch:
@@ -38,6 +38,9 @@
 public abstract class GeyserCommand {
 
     protected final String name;
+    /**
+     * The description of the command - will attempt to be translated.
+     */
     protected final String description;
     protected final String permission;
 

File: connector/src/main/java/org/geysermc/connector/command/defaults/OffhandCommand.java
Patch:
@@ -36,7 +36,7 @@
 
 public class OffhandCommand extends GeyserCommand {
 
-    private GeyserConnector connector;
+    private final GeyserConnector connector;
 
     public OffhandCommand(GeyserConnector connector, String name, String description, String permission) {
         super(name, description, permission);
@@ -58,7 +58,7 @@ public void execute(CommandSender sender, String[] args) {
             session.sendDownstreamPacket(releaseItemPacket);
             return;
         }
-        // Needed for Bukkit - sender is not an instance of GeyserSession
+        // Needed for Spigot - sender is not an instance of GeyserSession
         for (GeyserSession session : connector.getPlayers()) {
             if (sender.getName().equals(session.getPlayerEntity().getUsername())) {
                 ClientPlayerActionPacket releaseItemPacket = new ClientPlayerActionPacket(PlayerAction.SWAP_HANDS, new Position(0,0,0),

File: connector/src/main/java/org/geysermc/connector/entity/Entity.java
Patch:
@@ -321,7 +321,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
                     Message message = (Message) entityMetadata.getValue();
                     if (message != null)
                         // Always translate even if it's a TextMessage since there could be translatable parameters
-                        metadata.put(EntityData.NAMETAG, MessageUtils.getTranslatedBedrockMessage(message, session.getClientData().getLanguageCode(), true));
+                        metadata.put(EntityData.NAMETAG, MessageUtils.getTranslatedBedrockMessage(message, session.getLocale(), true));
                 }
                 break;
             case 3: // is custom name visible

File: connector/src/main/java/org/geysermc/connector/network/UpstreamPacketHandler.java
Patch:
@@ -170,7 +170,7 @@ private boolean couldLoginUserByName(String bedrockUsername) {
 
     @Override
     public boolean handle(SetLocalPlayerAsInitializedPacket packet) {
-        LanguageUtils.loadGeyserLocale(session.getClientData().getLanguageCode());
+        LanguageUtils.loadGeyserLocale(session.getLocale());
 
         if (!session.isLoggedIn() && !session.isLoggingIn() && session.getConnector().getAuthType() == AuthType.ONLINE) {
             // TODO it is safer to key authentication on something that won't change (UUID, not username)
@@ -185,7 +185,7 @@ public boolean handle(SetLocalPlayerAsInitializedPacket packet) {
     @Override
     public boolean handle(MovePlayerPacket packet) {
         if (session.isLoggingIn()) {
-            session.sendMessage(LanguageUtils.getPlayerLocaleString("geyser.auth.login.wait", session.getClientData().getLanguageCode()));
+            session.sendMessage(LanguageUtils.getPlayerLocaleString("geyser.auth.login.wait", session.getLocale()));
         }
 
         return translateAndDefault(packet);

File: connector/src/main/java/org/geysermc/connector/network/session/cache/BossBar.java
Patch:
@@ -58,7 +58,7 @@ public void updateBossBar() {
         BossEventPacket bossEventPacket = new BossEventPacket();
         bossEventPacket.setBossUniqueEntityId(entityId);
         bossEventPacket.setAction(BossEventPacket.Action.CREATE);
-        bossEventPacket.setTitle(MessageUtils.getTranslatedBedrockMessage(title, session.getClientData().getLanguageCode()));
+        bossEventPacket.setTitle(MessageUtils.getTranslatedBedrockMessage(title, session.getLocale()));
         bossEventPacket.setHealthPercentage(health);
         bossEventPacket.setColor(color); //ignored by client
         bossEventPacket.setOverlay(overlay);
@@ -72,7 +72,7 @@ public void updateTitle(Message title) {
         BossEventPacket bossEventPacket = new BossEventPacket();
         bossEventPacket.setBossUniqueEntityId(entityId);
         bossEventPacket.setAction(BossEventPacket.Action.UPDATE_NAME);
-        bossEventPacket.setTitle(MessageUtils.getTranslatedBedrockMessage(title, session.getClientData().getLanguageCode()));
+        bossEventPacket.setTitle(MessageUtils.getTranslatedBedrockMessage(title, session.getLocale()));
 
         session.sendUpstreamPacket(bossEventPacket);
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/EnchantmentInventoryTranslator.java
Patch:
@@ -199,7 +199,7 @@ private void updateEnchantmentBook(GeyserSession session, Inventory inventory, i
 
     private String toRomanNumeral(GeyserSession session, int level) {
         return LocaleUtils.getLocaleString("enchantment.level." + level,
-                session.getClientData().getLanguageCode());
+                session.getLocale());
     }
 
     /**
@@ -261,7 +261,7 @@ public enum EnchantmentTableEnchantments {
 
         public String toString(GeyserSession session) {
             return LocaleUtils.getLocaleString("enchantment.minecraft." + this.toString().toLowerCase(),
-                    session.getClientData().getLanguageCode());
+                    session.getLocale());
         }
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemTranslator.java
Patch:
@@ -400,7 +400,7 @@ public static void translateDisplayProperties(GeyserSession session, CompoundTag
                 // Check if its a message to translate
                 if (MessageUtils.isMessage(name)) {
                     // Get the translated name
-                    name = MessageUtils.getTranslatedBedrockMessage(MessageSerializer.fromString(name), session.getClientData().getLanguageCode());
+                    name = MessageUtils.getTranslatedBedrockMessage(MessageSerializer.fromString(name), session.getLocale());
 
                     // Add the new name tag
                     display.put(new StringTag("Name", name));

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaChatTranslator.java
Patch:
@@ -59,7 +59,7 @@ public void translate(ServerChatPacket packet, GeyserSession session) {
                 break;
         }
 
-        String locale = session.getClientData().getLanguageCode();
+        String locale = session.getLocale();
 
         if (packet.getMessage() instanceof TranslationMessage) {
             textPacket.setType(TextPacket.Type.TRANSLATION);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaDisconnectPacket.java
Patch:
@@ -36,6 +36,6 @@ public class JavaDisconnectPacket extends PacketTranslator<ServerDisconnectPacke
 
     @Override
     public void translate(ServerDisconnectPacket packet, GeyserSession session) {
-        session.disconnect(MessageUtils.getTranslatedBedrockMessage(packet.getReason(), session.getClientData().getLanguageCode(), true));
+        session.disconnect(MessageUtils.getTranslatedBedrockMessage(packet.getReason(), session.getLocale(), true));
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaJoinGameTranslator.java
Patch:
@@ -89,7 +89,7 @@ public void translate(ServerJoinGamePacket packet, GeyserSession session) {
         session.setRenderDistance(packet.getViewDistance());
 
         // We need to send our skin parts to the server otherwise java sees us with no hat, jacket etc
-        String locale = session.getClientData().getLanguageCode();
+        String locale = session.getLocale();
         List<SkinPart> skinParts = Arrays.asList(SkinPart.values());
         ClientSettingsPacket clientSettingsPacket = new ClientSettingsPacket(locale, (byte) session.getRenderDistance(), ChatVisibility.FULL, true, skinParts, HandPreference.RIGHT_HAND);
         session.sendDownstreamPacket(clientSettingsPacket);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaLoginDisconnectTranslator.java
Patch:
@@ -37,6 +37,6 @@ public class JavaLoginDisconnectTranslator extends PacketTranslator<LoginDisconn
     @Override
     public void translate(LoginDisconnectPacket packet, GeyserSession session) {
         // The client doesn't manually get disconnected so we have to do it ourselves
-        session.disconnect(MessageUtils.getTranslatedBedrockMessage(packet.getReason(), session.getClientData().getLanguageCode()));
+        session.disconnect(MessageUtils.getTranslatedBedrockMessage(packet.getReason(), session.getLocale()));
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaTitleTranslator.java
Patch:
@@ -39,7 +39,7 @@ public class JavaTitleTranslator extends PacketTranslator<ServerTitlePacket> {
     @Override
     public void translate(ServerTitlePacket packet, GeyserSession session) {
         SetTitlePacket titlePacket = new SetTitlePacket();
-        String locale = session.getClientData().getLanguageCode();
+        String locale = session.getLocale();
 
         switch (packet.getAction()) {
             case TITLE:

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaOpenWindowTranslator.java
Patch:
@@ -58,9 +58,9 @@ public void translate(ServerOpenWindowPacket packet, GeyserSession session) {
         }
 
         String name = MessageUtils.getTranslatedBedrockMessage(MessageSerializer.fromString(packet.getName()),
-                session.getClientData().getLanguageCode());
+                session.getLocale());
 
-        name = LocaleUtils.getLocaleString(name, session.getClientData().getLanguageCode());
+        name = LocaleUtils.getLocaleString(name, session.getLocale());
 
         Inventory newInventory = new Inventory(name, packet.getWindowId(), packet.getType(), newTranslator.size + 36);
         session.getInventoryCache().cacheInventory(newInventory);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaNotifyClientTranslator.java
Patch:
@@ -143,7 +143,7 @@ public void translate(ServerNotifyClientPacket packet, GeyserSession session) {
             case INVALID_BED:
                 // Not sent as a proper message? Odd.
                 session.sendMessage(LocaleUtils.getLocaleString("block.minecraft.spawn.not_valid",
-                        session.getClientData().getLanguageCode()));
+                        session.getLocale()));
                 break;
             case ARROW_HIT_PLAYER:
                 PlaySoundPacket arrowSoundPacket = new PlaySoundPacket();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaPlayEffectTranslator.java
Patch:
@@ -78,7 +78,7 @@ public void translate(ServerPlayEffectPacket packet, GeyserSession session) {
                 textPacket.setMessage("record.nowPlaying");
                 List<String> params = new ArrayList<>();
                 String recordString = "%item." + soundEvent.name().toLowerCase(Locale.ROOT) + ".desc";
-                params.add(LocaleUtils.getLocaleString(recordString, session.getClientData().getLanguageCode()));
+                params.add(LocaleUtils.getLocaleString(recordString, session.getLocale()));
                 textPacket.setParameters(params);
                 session.sendUpstreamPacket(textPacket);
             }

File: connector/src/main/java/org/geysermc/connector/utils/LanguageUtils.java
Patch:
@@ -59,6 +59,8 @@ public class LanguageUtils {
      */
     public static void loadGeyserLocale(String locale) {
         locale = formatLocale(locale);
+        // Don't load the locale if it's already loaded.
+        if (LOCALE_MAPPINGS.containsKey(locale)) return;
 
         InputStream localeStream = GeyserConnector.class.getClassLoader().getResourceAsStream("languages/texts/" + locale + ".properties");
 
@@ -131,7 +133,7 @@ public static String getPlayerLocaleString(String key, String locale, Object...
      * @param locale The locale to format
      * @return The formatted locale
      */
-    private static String formatLocale(String locale) {
+    public static String formatLocale(String locale) {
         try {
             String[] parts = locale.toLowerCase().split("_");
             return parts[0] + "_" + parts[1].toUpperCase();

File: connector/src/main/java/org/geysermc/connector/utils/LocaleUtils.java
Patch:
@@ -35,7 +35,6 @@
 import java.io.*;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.nio.file.Paths;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;

File: connector/src/main/java/org/geysermc/connector/utils/LoginEncryptionUtils.java
Patch:
@@ -160,7 +160,7 @@ private static void startEncryptionHandshake(GeyserSession session, PublicKey ke
     private static int AUTH_DETAILS_FORM_ID = 1337;
 
     public static void showLoginWindow(GeyserSession session) {
-        String userLanguage = session.getClientData().getLanguageCode();
+        String userLanguage = session.getLocale();
         SimpleFormWindow window = new SimpleFormWindow(LanguageUtils.getPlayerLocaleString("geyser.auth.login.form.notice.title", userLanguage), LanguageUtils.getPlayerLocaleString("geyser.auth.login.form.notice.desc", userLanguage));
         window.getButtons().add(new FormButton(LanguageUtils.getPlayerLocaleString("geyser.auth.login.form.notice.btn_login", userLanguage)));
         window.getButtons().add(new FormButton(LanguageUtils.getPlayerLocaleString("geyser.auth.login.form.notice.btn_disconnect", userLanguage)));
@@ -169,7 +169,7 @@ public static void showLoginWindow(GeyserSession session) {
     }
 
     public static void showLoginDetailsWindow(GeyserSession session) {
-        String userLanguage = session.getClientData().getLanguageCode();
+        String userLanguage = session.getLocale();
         CustomFormWindow window = new CustomFormBuilder(LanguageUtils.getPlayerLocaleString("geyser.auth.login.form.details.title", userLanguage))
                 .addComponent(new LabelComponent(LanguageUtils.getPlayerLocaleString("geyser.auth.login.form.details.desc", userLanguage)))
                 .addComponent(new InputComponent(LanguageUtils.getPlayerLocaleString("geyser.auth.login.form.details.email", userLanguage), "account@geysermc.org", ""))
@@ -210,7 +210,7 @@ public static boolean authenticateFromForm(GeyserSession session, GeyserConnecto
                         if (response.getClickedButtonId() == 0) {
                             showLoginDetailsWindow(session);
                         } else if(response.getClickedButtonId() == 1) {
-                            session.disconnect(LanguageUtils.getPlayerLocaleString("geyser.auth.login.form.disconnect", session.getClientData().getLanguageCode()));
+                            session.disconnect(LanguageUtils.getPlayerLocaleString("geyser.auth.login.form.disconnect", session.getLocale()));
                         }
                     } else {
                         showLoginWindow(session);

File: connector/src/main/java/org/geysermc/connector/utils/MessageUtils.java
Patch:
@@ -485,7 +485,7 @@ public static String toChatColor(TeamColor teamColor) {
      */
     public static boolean isTooLong(String message, GeyserSession session) {
         if (message.length() > 256) {
-            session.sendMessage(LanguageUtils.getPlayerLocaleString("geyser.chat.too_long", session.getClientData().getLanguageCode(), message.length()));
+            session.sendMessage(LanguageUtils.getPlayerLocaleString("geyser.chat.too_long", session.getLocale(), message.length()));
             return true;
         }
 

File: connector/src/main/java/org/geysermc/connector/utils/SettingsUtils.java
Patch:
@@ -52,7 +52,7 @@ public class SettingsUtils {
      */
     public static void buildForm(GeyserSession session) {
         // Cache the language for cleaner access
-        String language = session.getClientData().getLanguageCode();
+        String language = session.getLocale();
 
         CustomFormBuilder builder = new CustomFormBuilder(LanguageUtils.getPlayerLocaleString("geyser.settings.title.main", language));
         builder.setIcon(new FormImage(FormImage.FormImageType.PATH, "textures/ui/settings_glyph_color_2x.png"));

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/entity/player/BedrockActionTranslator.java
Patch:
@@ -68,6 +68,8 @@ public void translate(PlayerActionPacket packet, GeyserSession session) {
                 eventPacket.setType(EntityEventType.RESPAWN);
                 eventPacket.setData(0);
                 session.sendUpstreamPacket(eventPacket);
+                // Resend attributes or else in rare cases the user can think they're not dead when they are, upon joining the server
+                entity.updateBedrockAttributes(session);
                 break;
             case START_SWIMMING:
                 ClientPlayerStatePacket startSwimPacket = new ClientPlayerStatePacket((int) entity.getEntityId(), PlayerState.START_SPRINTING);

File: common/src/main/java/org/geysermc/common/window/CustomFormWindow.java
Patch:
@@ -92,7 +92,7 @@ public String getJSONData() {
     }
 
     public void setResponse(String data) {
-        if (data == null || data.equalsIgnoreCase("null") || data.isEmpty()) {
+        if (data == null || data.trim().equalsIgnoreCase("null") || data.isEmpty()) {
             closed = true;
             return;
         }
@@ -108,7 +108,7 @@ public void setResponse(String data) {
 
         List<String> componentResponses = new ArrayList<>();
         try {
-            componentResponses = new ObjectMapper().readValue(data, new TypeReference<List<String>>(){});
+            componentResponses = new ObjectMapper().readValue(data.trim(), new TypeReference<List<String>>(){});
         } catch (IOException e) { }
 
         for (String response : componentResponses) {

File: common/src/main/java/org/geysermc/common/window/SimpleFormWindow.java
Patch:
@@ -72,14 +72,14 @@ public String getJSONData() {
     }
 
     public void setResponse(String data) {
-        if (data == null || data.equalsIgnoreCase("null")) {
+        if (data == null || data.trim().equalsIgnoreCase("null")) {
             closed = true;
             return;
         }
 
         int buttonID;
         try {
-            buttonID = Integer.parseInt(data);
+            buttonID = Integer.parseInt(data.trim());
         } catch (Exception ex) {
             return;
         }

File: connector/src/main/java/org/geysermc/connector/command/CommandManager.java
Patch:
@@ -52,6 +52,7 @@ public CommandManager(GeyserConnector connector) {
         registerCommand(new OffhandCommand(connector, "offhand", LanguageUtils.getLocaleStringLog("geyser.commands.offhand.desc"), "geyser.command.offhand"));
         registerCommand(new DumpCommand(connector, "dump", LanguageUtils.getLocaleStringLog("geyser.commands.dump.desc"), "geyser.command.dump"));
         registerCommand(new VersionCommand(connector, "version", LanguageUtils.getLocaleStringLog("geyser.commands.version.desc"), "geyser.command.version"));
+        registerCommand(new StatisticsCommand(connector, "statistics", LanguageUtils.getLocaleStringLog("geyser.commands.statistics.desc"), "geyser.command.statistics"));
     }
 
     public void registerCommand(GeyserCommand command) {

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -194,9 +194,10 @@ public class GeyserSession implements CommandSender {
 
     /**
      * The current attack speed of the player. Used for sending proper cooldown timings.
+     * Setting a default fixes cooldowns not showing up on a fresh world.
      */
     @Setter
-    private double attackSpeed;
+    private double attackSpeed = 4.0d;
     /**
      * The time of the last hit. Used to gauge how long the cooldown is taking.
      * This is a session variable in order to prevent more scheduled threads than necessary.

File: connector/src/main/java/org/geysermc/connector/utils/SettingsUtils.java
Patch:
@@ -58,7 +58,7 @@ public static void buildForm(GeyserSession session) {
         builder.setIcon(new FormImage(FormImage.FormImageType.PATH, "textures/ui/settings_glyph_color_2x.png"));
 
         builder.addComponent(new LabelComponent(LanguageUtils.getPlayerLocaleString("geyser.settings.title.client", language)));
-        builder.addComponent(new ToggleComponent(LanguageUtils.getPlayerLocaleString("geyser.settings.option.coordinates", language, session.getWorldCache().isShowCoordinates())));
+        builder.addComponent(new ToggleComponent(LanguageUtils.getPlayerLocaleString("geyser.settings.option.coordinates", language), session.getWorldCache().isShowCoordinates()));
 
 
         if (session.getOpPermissionLevel() >= 2 || session.hasPermission("geyser.settings.server")) {

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockMobEquipmentTranslator.java
Patch:
@@ -40,12 +40,12 @@ public class BedrockMobEquipmentTranslator extends PacketTranslator<MobEquipment
     @Override
     public void translate(MobEquipmentPacket packet, GeyserSession session) {
         if (!session.isSpawned() || packet.getHotbarSlot() > 8 ||
-                packet.getContainerId() != ContainerId.INVENTORY || session.getInventory().getHeldItemSlot() == packet.getHotbarSlot()) {
+                packet.getContainerId() != ContainerId.INVENTORY || session.getPlayerInventory().getHeldItemSlot() == packet.getHotbarSlot()) {
             // For the last condition - Don't update the slot if the slot is the same - not Java Edition behavior and messes with plugins such as Grief Prevention
             return;
         }
 
-        session.getInventory().setHeldItemSlot(packet.getHotbarSlot());
+        session.getPlayerInventory().setHeldItemSlot(packet.getHotbarSlot());
 
         ClientPlayerChangeHeldItemPacket changeHeldItemPacket = new ClientPlayerChangeHeldItemPacket(packet.getHotbarSlot());
         session.sendDownstreamPacket(changeHeldItemPacket);

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/updater/ChestInventoryUpdater.java
Patch:
@@ -49,7 +49,7 @@ public void updateInventory(InventoryTranslator translator, GeyserSession sessio
         ItemData[] bedrockItems = new ItemData[paddedSize];
         for (int i = 0; i < bedrockItems.length; i++) {
             if (i < translator.size) {
-                bedrockItems[i] = ItemTranslator.translateToBedrock(session, inventory.getItem(i));
+                bedrockItems[i] = inventory.getItem(i).getItemData(session);
             } else {
                 bedrockItems[i] = UNUSUABLE_SPACE_BLOCK;
             }
@@ -69,7 +69,7 @@ public boolean updateSlot(InventoryTranslator translator, GeyserSession session,
         InventorySlotPacket slotPacket = new InventorySlotPacket();
         slotPacket.setContainerId(inventory.getId());
         slotPacket.setSlot(translator.javaSlotToBedrock(javaSlot));
-        slotPacket.setItem(ItemTranslator.translateToBedrock(session, inventory.getItem(javaSlot)));
+        slotPacket.setItem(inventory.getItem(javaSlot).getItemData(session));
         session.sendUpstreamPacket(slotPacket);
         return true;
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/updater/ContainerInventoryUpdater.java
Patch:
@@ -40,7 +40,7 @@ public void updateInventory(InventoryTranslator translator, GeyserSession sessio
 
         ItemData[] bedrockItems = new ItemData[translator.size];
         for (int i = 0; i < bedrockItems.length; i++) {
-            bedrockItems[translator.javaSlotToBedrock(i)] = ItemTranslator.translateToBedrock(session, inventory.getItem(i));
+            bedrockItems[translator.javaSlotToBedrock(i)] = inventory.getItem(i).getItemData(session);
         }
 
         InventoryContentPacket contentPacket = new InventoryContentPacket();
@@ -57,7 +57,7 @@ public boolean updateSlot(InventoryTranslator translator, GeyserSession session,
         InventorySlotPacket slotPacket = new InventorySlotPacket();
         slotPacket.setContainerId(inventory.getId());
         slotPacket.setSlot(translator.javaSlotToBedrock(javaSlot));
-        slotPacket.setItem(ItemTranslator.translateToBedrock(session, inventory.getItem(javaSlot)));
+        slotPacket.setItem(inventory.getItem(javaSlot).getItemData(session));
         session.sendUpstreamPacket(slotPacket);
         return true;
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/updater/InventoryUpdater.java
Patch:
@@ -39,7 +39,7 @@ public void updateInventory(InventoryTranslator translator, GeyserSession sessio
         ItemData[] bedrockItems = new ItemData[36];
         for (int i = 0; i < 36; i++) {
             final int offset = i < 9 ? 27 : -9;
-            bedrockItems[i] = ItemTranslator.translateToBedrock(session, inventory.getItem(translator.size + i + offset));
+            bedrockItems[i] = inventory.getItem(translator.size + i + offset).getItemData(session);
         }
         InventoryContentPacket contentPacket = new InventoryContentPacket();
         contentPacket.setContainerId(ContainerId.INVENTORY);
@@ -52,7 +52,7 @@ public boolean updateSlot(InventoryTranslator translator, GeyserSession session,
             InventorySlotPacket slotPacket = new InventorySlotPacket();
             slotPacket.setContainerId(ContainerId.INVENTORY);
             slotPacket.setSlot(translator.javaSlotToBedrock(javaSlot));
-            slotPacket.setItem(ItemTranslator.translateToBedrock(session, inventory.getItem(javaSlot)));
+            slotPacket.setItem(inventory.getItem(javaSlot).getItemData(session));
             session.sendUpstreamPacket(slotPacket);
             return true;
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaRespawnTranslator.java
Patch:
@@ -50,7 +50,7 @@ public void translate(ServerRespawnPacket packet, GeyserSession session) {
         // Max health must be divisible by two in bedrock
         entity.getAttributes().put(AttributeType.HEALTH, AttributeType.HEALTH.getAttribute(maxHealth, (maxHealth % 2 == 1 ? maxHealth + 1 : maxHealth)));
 
-        session.getInventoryCache().setOpenInventory(null);
+        session.setOpenInventory(null);
 
         SetPlayerGameTypePacket playerGameTypePacket = new SetPlayerGameTypePacket();
         playerGameTypePacket.setGamemode(packet.getGamemode().ordinal());

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaNotifyClientTranslator.java
Patch:
@@ -111,7 +111,7 @@ public void translate(ServerNotifyClientPacket packet, GeyserSession session) {
                 session.setGameMode(gameMode);
 
                 // Update the crafting grid to add/remove barriers for creative inventory
-                PlayerInventoryTranslator.updateCraftingGrid(session, session.getInventory());
+                PlayerInventoryTranslator.updateCraftingGrid(session, session.getPlayerInventory());
                 break;
             case ENTER_CREDITS:
                 switch ((EnterCreditsValue) packet.getValue()) {

File: connector/src/main/java/org/geysermc/connector/network/translators/sound/block/BucketSoundInteractionHandler.java
Patch:
@@ -39,7 +39,7 @@ public class BucketSoundInteractionHandler implements BlockSoundInteractionHandl
     @Override
     public void handleInteraction(GeyserSession session, Vector3f position, String identifier) {
         if (session.getBucketScheduledFuture() == null) return; // No bucket was really interacted with
-        String handItemIdentifier = ItemRegistry.getItem(session.getInventory().getItemInHand()).getJavaIdentifier();
+        String handItemIdentifier = session.getPlayerInventory().getItemInHand().getItemEntry().getJavaIdentifier();
         LevelSoundEventPacket soundEventPacket = new LevelSoundEventPacket();
         soundEventPacket.setPosition(position);
         soundEventPacket.setIdentifier(":");

File: connector/src/main/java/org/geysermc/connector/network/translators/sound/entity/MilkCowSoundInteractionHandler.java
Patch:
@@ -39,7 +39,7 @@ public class MilkCowSoundInteractionHandler implements EntitySoundInteractionHan
 
     @Override
     public void handleInteraction(GeyserSession session, Vector3f position, Entity value) {
-        if (!ItemRegistry.getItem(session.getInventory().getItemInHand()).getJavaIdentifier().equals("minecraft:bucket")) {
+        if (!session.getPlayerInventory().getItemInHand().getItemEntry().getJavaIdentifier().equals("minecraft:bucket")) {
             return;
         }
         LevelSoundEventPacket levelSoundEventPacket = new LevelSoundEventPacket();

File: connector/src/main/java/org/geysermc/connector/utils/BlockUtils.java
Patch:
@@ -132,7 +132,7 @@ public static double getBreakTime(double blockHardness, int blockId, ItemEntry i
                 && BlockTranslator.getBedrockBlockId(session.getConnector().getWorldManager().getBlockAt(session, session.getPlayerEntity().getPosition().toInt())) == BlockTranslator.BEDROCK_WATER_ID;
 
         boolean insideOfWaterWithoutAquaAffinity = isInWater &&
-                ItemUtils.getEnchantmentLevel(Optional.ofNullable(session.getInventory().getItem(5)).map(ItemStack::getNbt).orElse(null), "minecraft:aqua_affinity") < 1;
+                ItemUtils.getEnchantmentLevel(session.getPlayerInventory().getItem(5).getNbt(), "minecraft:aqua_affinity") < 1;
 
         boolean outOfWaterButNotOnGround = (!isInWater) && (!session.getPlayerEntity().isOnGround());
         boolean insideWaterNotOnGround = isInWater && !session.getPlayerEntity().isOnGround();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaChunkDataTranslator.java
Patch:
@@ -66,11 +66,11 @@ public void translate(ServerChunkDataPacket packet, GeyserSession session) {
             return;
         }
 
-        // Non-full chunks don't have all the chunk data, and Bedrock won't accept that
-        final boolean isNonFullChunk = (packet.getColumn().getBiomeData() == null);
-
         GeyserConnector.getInstance().getGeneralThreadPool().execute(() -> {
             try {
+                // Non-full chunks don't have all the chunk data, and Bedrock won't accept that
+                final boolean isNonFullChunk = (packet.getColumn().getBiomeData() == null);
+
                 ChunkUtils.ChunkData chunkData = ChunkUtils.translateToBedrock(session, packet.getColumn(), isNonFullChunk);
                 ByteBuf byteBuf = Unpooled.buffer(32);
                 ChunkSection[] sections = chunkData.sections;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaUnloadChunkTranslator.java
Patch:
@@ -28,7 +28,6 @@
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;
-import org.geysermc.connector.network.translators.world.chunk.ChunkPosition;
 
 import com.github.steveice10.mc.protocol.packet.ingame.server.world.ServerUnloadChunkPacket;
 
@@ -37,6 +36,6 @@ public class JavaUnloadChunkTranslator extends PacketTranslator<ServerUnloadChun
 
     @Override
     public void translate(ServerUnloadChunkPacket packet, GeyserSession session) {
-        session.getChunkCache().removeChunk(new ChunkPosition(packet.getX(), packet.getZ()));
+        session.getChunkCache().removeChunk(packet.getX(), packet.getZ());
     }
 }

File: connector/src/main/java/org/geysermc/connector/utils/ChunkUtils.java
Patch:
@@ -112,8 +112,7 @@ public static ChunkData translateToBedrock(GeyserSession session, Column column,
                         int blockState;
                         // If a non-full chunk, then grab the block that should be here to create a 'full' chunk
                         if (chunk == null) {
-                            Position pos = new ChunkPosition(column.getX(), column.getZ()).getBlock(x, (chunkY << 4) + y, z);
-                            blockState = session.getConnector().getWorldManager().getBlockAt(session, pos.getX(), pos.getY(), pos.getZ());
+                            blockState = session.getConnector().getWorldManager().getBlockAt(session, (column.getX() << 4) + x, (chunkY << 4) + y, (column.getZ() << 4) + z);
                         } else {
                             blockState = chunk.get(x, y, z);
                         }
@@ -250,7 +249,7 @@ public static void updateBlock(GeyserSession session, int blockState, Vector3i p
                 break; //No block will be a part of two classes
             }
         }
-        session.getChunkCache().updateBlock(new Position(position.getX(), position.getY(), position.getZ()), blockState);
+        session.getChunkCache().updateBlock(position.getX(), position.getY(), position.getZ(), blockState);
     }
 
     public static void sendEmptyChunks(GeyserSession session, Vector3i position, int radius, boolean forceUpdate) {

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -202,7 +202,7 @@ private GeyserConnector(PlatformType platformType, GeyserBootstrap bootstrap) {
             metrics.addCustomChart(new Metrics.SingleLineChart("servers", () -> 1));
             metrics.addCustomChart(new Metrics.SingleLineChart("players", players::size));
             // Prevent unwanted words best we can
-            metrics.addCustomChart(new Metrics.SimplePie("authMode", () -> AuthType.getByName(config.getRemote().getAuthType()).toString()));
+            metrics.addCustomChart(new Metrics.SimplePie("authMode", () -> AuthType.getByName(config.getRemote().getAuthType()).toString().toLowerCase()));
             metrics.addCustomChart(new Metrics.SimplePie("platform", platformType::getPlatformName));
             metrics.addCustomChart(new Metrics.SimplePie("defaultLocale", LanguageUtils::getDefaultLocale));
             metrics.addCustomChart(new Metrics.SimplePie("version", () -> GeyserConnector.VERSION));

File: connector/src/main/java/org/geysermc/connector/network/translators/sound/block/BucketSoundInteractionHandler.java
Patch:
@@ -38,6 +38,7 @@ public class BucketSoundInteractionHandler implements BlockSoundInteractionHandl
 
     @Override
     public void handleInteraction(GeyserSession session, Vector3f position, String identifier) {
+        if (session.getBucketScheduledFuture() == null) return; // No bucket was really interacted with
         String handItemIdentifier = ItemRegistry.getItem(session.getInventory().getItemInHand()).getJavaIdentifier();
         LevelSoundEventPacket soundEventPacket = new LevelSoundEventPacket();
         soundEventPacket.setPosition(position);
@@ -68,5 +69,6 @@ public void handleInteraction(GeyserSession session, Vector3f position, String i
             soundEventPacket.setSound(soundEvent);
             session.sendUpstreamPacket(soundEventPacket);
         }
+        session.setBucketScheduledFuture(null);
     }
 }

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -34,6 +34,7 @@
 import org.geysermc.connector.entity.living.merchant.*;
 import org.geysermc.connector.entity.living.monster.*;
 import org.geysermc.connector.entity.living.monster.raid.AbstractIllagerEntity;
+import org.geysermc.connector.entity.living.monster.raid.PillagerEntity;
 import org.geysermc.connector.entity.living.monster.raid.RaidParticipantEntity;
 import org.geysermc.connector.entity.living.monster.raid.SpellcasterIllagerEntity;
 
@@ -90,7 +91,7 @@ public enum EntityType {
     ENDERMITE(MonsterEntity.class, 55, 0.3f, 0.4f),
     AGENT(Entity.class, 56, 0f),
     VINDICATOR(AbstractIllagerEntity.class, 57, 1.8f, 0.6f, 0.6f, 1.62f),
-    PILLAGER(AbstractIllagerEntity.class, 114, 1.8f, 0.6f, 0.6f, 1.62f),
+    PILLAGER(PillagerEntity.class, 114, 1.8f, 0.6f, 0.6f, 1.62f),
     WANDERING_TRADER(AbstractMerchantEntity.class, 118, 1.8f, 0.6f, 0.6f, 1.62f),
     PHANTOM(FlyingEntity.class, 58, 0.5f, 0.9f, 0.9f, 0.6f),
     RAVAGER(RaidParticipantEntity.class, 59, 1.9f, 1.2f),

File: connector/src/main/java/org/geysermc/connector/scoreboard/Score.java
Patch:
@@ -49,7 +49,6 @@ public Score(Objective objective, String name) {
         this.id = objective.getScoreboard().getNextId().getAndIncrement();
         this.objective = objective;
         this.name = name;
-        update();
     }
 
     public String getDisplayName() {

File: connector/src/main/java/org/geysermc/connector/network/UpstreamPacketHandler.java
Patch:
@@ -117,7 +117,7 @@ public boolean handle(ResourcePackClientResponsePacket packet) {
 
             case HAVE_ALL_PACKS:
                 ResourcePackStackPacket stackPacket = new ResourcePackStackPacket();
-                stackPacket.setExperimental(false);
+                stackPacket.setExperimentsPreviouslyToggled(false);
                 stackPacket.setForcedToAccept(false); // Leaving this as false allows the player to choose to download or not
                 stackPacket.setGameVersion(session.getClientData().getGameVersion());
 

File: bootstrap/fabric/src/main/java/org/geysermc/platform/fabric/command/FabricCommandSender.java
Patch:
@@ -30,6 +30,7 @@
 import net.minecraft.text.LiteralText;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.command.CommandSender;
+import org.geysermc.connector.common.ChatColor;
 
 public class FabricCommandSender implements CommandSender {
 
@@ -49,7 +50,7 @@ public void sendMessage(String message) {
         try {
             source.getPlayer().sendMessage(new LiteralText(message), false);
         } catch (CommandSyntaxException e) { // why
-            GeyserConnector.getInstance().getLogger().info(message);
+            GeyserConnector.getInstance().getLogger().info(ChatColor.toANSI(message + ChatColor.RESET));
         }
     }
 

File: connector/src/main/java/org/geysermc/connector/common/PlatformType.java
Patch:
@@ -34,10 +34,11 @@ public enum PlatformType {
 
     ANDROID("Android"),
     BUNGEECORD("BungeeCord"),
+    FABRIC("Fabric"),
     SPIGOT("Spigot"),
     SPONGE("Sponge"),
     STANDALONE("Standalone"),
     VELOCITY("Velocity");
 
-    private String platformName;
+    private final String platformName;
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/PacketTranslatorRegistry.java
Patch:
@@ -48,7 +48,7 @@ public class PacketTranslatorRegistry<T> {
     private static final ObjectArrayList<Class<?>> IGNORED_PACKETS = new ObjectArrayList<>();
 
     static {
-        Reflections ref = GeyserConnector.getInstance().isProduction() ? FileUtils.getReflections("org.geysermc.connector.network.translators") : new Reflections("org.geysermc.connector.network.translators");
+        Reflections ref = GeyserConnector.getInstance().useXmlReflections() ? FileUtils.getReflections("org.geysermc.connector.network.translators") : new Reflections("org.geysermc.connector.network.translators");
 
         for (Class<?> clazz : ref.getTypesAnnotatedWith(Translator.class)) {
             Class<?> packet = clazz.getAnnotation(Translator.class).packet();

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemTranslator.java
Patch:
@@ -64,7 +64,7 @@ public static void init() {
 
     static {
         /* Load item translators */
-        Reflections ref = GeyserConnector.getInstance().isProduction() ? FileUtils.getReflections("org.geysermc.connector.network.translators.item") : new Reflections("org.geysermc.connector.network.translators.item");
+        Reflections ref = GeyserConnector.getInstance().useXmlReflections() ? FileUtils.getReflections("org.geysermc.connector.network.translators.item") : new Reflections("org.geysermc.connector.network.translators.item");
 
         Map<NbtItemStackTranslator, Integer> loadedNbtItemTranslators = new HashMap<>();
         for (Class<?> clazz : ref.getTypesAnnotatedWith(ItemRemapper.class)) {

File: connector/src/main/java/org/geysermc/connector/network/translators/sound/SoundHandlerRegistry.java
Patch:
@@ -40,7 +40,7 @@ public class SoundHandlerRegistry {
     static final Map<SoundHandler, SoundInteractionHandler<?>> INTERACTION_HANDLERS = new HashMap<>();
 
     static {
-        Reflections ref = GeyserConnector.getInstance().isProduction() ? FileUtils.getReflections("org.geysermc.connector.network.translators.sound") : new Reflections("org.geysermc.connector.network.translators.sound");
+        Reflections ref = GeyserConnector.getInstance().useXmlReflections() ? FileUtils.getReflections("org.geysermc.connector.network.translators.sound") : new Reflections("org.geysermc.connector.network.translators.sound");
         for (Class<?> clazz : ref.getTypesAnnotatedWith(SoundHandler.class)) {
             try {
                 SoundInteractionHandler<?> interactionHandler = (SoundInteractionHandler<?>) clazz.newInstance();

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/BlockTranslator.java
Patch:
@@ -113,7 +113,7 @@ public class BlockTranslator {
         addedStatesMap.defaultReturnValue(-1);
         List<NbtMap> paletteList = new ArrayList<>();
 
-        Reflections ref = GeyserConnector.getInstance().isProduction() ? FileUtils.getReflections("org.geysermc.connector.network.translators.world.block.entity") : new Reflections("org.geysermc.connector.network.translators.world.block.entity");
+        Reflections ref = GeyserConnector.getInstance().useXmlReflections() ? FileUtils.getReflections("org.geysermc.connector.network.translators.world.block.entity") : new Reflections("org.geysermc.connector.network.translators.world.block.entity");
         ref.getTypesAnnotatedWith(BlockEntity.class);
 
         int waterRuntimeId = -1;

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/entity/BlockEntityTranslator.java
Patch:
@@ -68,7 +68,7 @@ public static void init() {
     }
 
     static {
-        Reflections ref = GeyserConnector.getInstance().isProduction() ? FileUtils.getReflections("org.geysermc.connector.network.translators.world.block.entity") : new Reflections("org.geysermc.connector.network.translators.world.block.entity");
+        Reflections ref = GeyserConnector.getInstance().useXmlReflections() ? FileUtils.getReflections("org.geysermc.connector.network.translators.world.block.entity") : new Reflections("org.geysermc.connector.network.translators.world.block.entity");
         for (Class<?> clazz : ref.getTypesAnnotatedWith(BlockEntity.class)) {
             GeyserConnector.getInstance().getLogger().debug("Found annotated block entity: " + clazz.getCanonicalName());
 

File: bootstrap/bungeecord/src/main/java/org/geysermc/platform/bungeecord/GeyserBungeePlugin.java
Patch:
@@ -97,7 +97,7 @@ public void onEnable() {
         if (geyserConfig.getRemote().getAuthType().equals("floodgate") && getProxy().getPluginManager().getPlugin("floodgate") == null) {
             geyserLogger.severe(LanguageUtils.getLocaleStringLog("geyser.bootstrap.floodgate.not_installed") + " " + LanguageUtils.getLocaleStringLog("geyser.bootstrap.floodgate.disabling"));
             return;
-        } else if (geyserConfig.isAutoconfiguredRemote() && getProxy().getPluginManager().getPlugin("floodgate-bungee") != null) {
+        } else if (geyserConfig.isAutoconfiguredRemote() && getProxy().getPluginManager().getPlugin("floodgate") != null) {
             // Floodgate installed means that the user wants Floodgate authentication
             geyserLogger.debug("Auto-setting to Floodgate authentication.");
             geyserConfig.getRemote().setAuthType("floodgate");

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/GeyserSpigotPlugin.java
Patch:
@@ -101,7 +101,7 @@ public void onEnable() {
             geyserLogger.severe(LanguageUtils.getLocaleStringLog("geyser.bootstrap.floodgate.not_installed") + " " + LanguageUtils.getLocaleStringLog("geyser.bootstrap.floodgate.disabling"));
             this.getPluginLoader().disablePlugin(this);
             return;
-        } else if (geyserConfig.isAutoconfiguredRemote() && Bukkit.getPluginManager().getPlugin("floodgate-bukkit") != null) {
+        } else if (geyserConfig.isAutoconfiguredRemote() && Bukkit.getPluginManager().getPlugin("floodgate") != null) {
             // Floodgate installed means that the user wants Floodgate authentication
             geyserLogger.debug("Auto-setting to Floodgate authentication.");
             geyserConfig.getRemote().setAuthType("floodgate");

File: connector/src/main/java/org/geysermc/connector/FloodgateKeyLoader.java
Patch:
@@ -37,7 +37,7 @@ public static Path getKeyPath(GeyserJacksonConfiguration config, Object floodgat
 
         if (!Files.exists(floodgateKey) && config.getRemote().getAuthType().equals("floodgate")) {
             if (floodgate != null) {
-                Path autoKey = floodgateDataFolder.resolve("public-key.pem");
+                Path autoKey = floodgateDataFolder.resolve("key.pem");
                 if (Files.exists(autoKey)) {
                     logger.info(LanguageUtils.getLocaleStringLog("geyser.bootstrap.floodgate.auto_loaded"));
                     floodgateKey = autoKey;

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockRespawnTranslator.java
Patch:
@@ -43,7 +43,7 @@ public void translate(RespawnPacket packet, GeyserSession session) {
                 RespawnPacket respawnPacket = new RespawnPacket();
                 respawnPacket.setRuntimeEntityId(0);
                 respawnPacket.setPosition(Vector3f.ZERO);
-                respawnPacket.setState(RespawnPacket.State.SERVER_SEARCHING);
+                respawnPacket.setState(RespawnPacket.State.SERVER_READY);
                 session.sendUpstreamPacket(respawnPacket);
             }
 

File: connector/src/main/java/org/geysermc/connector/scoreboard/Objective.java
Patch:
@@ -83,7 +83,7 @@ public void registerScore(String id, int score) {
 
     public void setScore(String id, int score) {
         if (scores.containsKey(id)) {
-            scores.get(id).setScore(score).setUpdateType(UpdateType.ADD);
+            scores.get(id).setScore(score);
             return;
         }
         registerScore(id, score);

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/holder/BlockInventoryHolder.java
Patch:
@@ -35,9 +35,8 @@
 import lombok.AllArgsConstructor;
 import org.geysermc.connector.inventory.Inventory;
 import org.geysermc.connector.network.session.GeyserSession;
-import org.geysermc.connector.network.translators.world.block.BlockTranslator;
 import org.geysermc.connector.network.translators.inventory.InventoryTranslator;
-import org.geysermc.connector.utils.LocaleUtils;
+import org.geysermc.connector.network.translators.world.block.BlockTranslator;
 
 @AllArgsConstructor
 public class BlockInventoryHolder extends InventoryHolder {
@@ -60,7 +59,7 @@ public void prepareInventory(InventoryTranslator translator, GeyserSession sessi
                 .putInt("x", position.getX())
                 .putInt("y", position.getY())
                 .putInt("z", position.getZ())
-                .putString("CustomName", LocaleUtils.getLocaleString(inventory.getTitle(), session.getClientData().getLanguageCode())).build();
+                .putString("CustomName", inventory.getTitle()).build();
         BlockEntityDataPacket dataPacket = new BlockEntityDataPacket();
         dataPacket.setData(tag);
         dataPacket.setBlockPosition(position);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaOpenWindowTranslator.java
Patch:
@@ -29,14 +29,14 @@
 import com.github.steveice10.mc.protocol.packet.ingame.server.window.ServerOpenWindowPacket;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParser;
-import com.nukkitx.protocol.bedrock.packet.ContainerClosePacket;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.inventory.Inventory;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;
 import org.geysermc.connector.network.translators.inventory.InventoryTranslator;
 import org.geysermc.connector.utils.InventoryUtils;
+import org.geysermc.connector.utils.LocaleUtils;
 
 @Translator(packet = ServerOpenWindowPacket.class)
 public class JavaOpenWindowTranslator extends PacketTranslator<ServerOpenWindowPacket> {
@@ -71,6 +71,8 @@ public void translate(ServerOpenWindowPacket packet, GeyserSession session) {
             GeyserConnector.getInstance().getLogger().debug("JavaOpenWindowTranslator: " + e.toString());
         }
 
+        name = LocaleUtils.getLocaleString(name, session.getClientData().getLanguageCode());
+
         Inventory newInventory = new Inventory(name, packet.getWindowId(), packet.getType(), newTranslator.size + 36);
         session.getInventoryCache().cacheInventory(newInventory);
         if (openInventory != null) {

File: bootstrap/bungeecord/src/main/java/org/geysermc/platform/bungeecord/command/GeyserBungeeCommandExecutor.java
Patch:
@@ -64,10 +64,10 @@ public void execute(CommandSender sender, String[] args) {
                     sender.sendMessage(TextComponent.fromLegacyText(ChatColor.RED + message));
                     return;
                 }
-                getCommand(args[0]).execute(new BungeeCommandSender(sender), args);
+                getCommand(args[0]).execute(new BungeeCommandSender(sender), args.length > 1 ? Arrays.copyOfRange(args, 1, args.length) : new String[0]);
             }
         } else {
-            getCommand("help").execute(new BungeeCommandSender(sender), args);
+            getCommand("help").execute(new BungeeCommandSender(sender), new String[0]);
         }
     }
 

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/command/GeyserSpigotCommandExecutor.java
Patch:
@@ -59,11 +59,11 @@ public boolean onCommand(CommandSender sender, Command command, String label, St
                     sender.sendMessage(ChatColor.RED + message);
                     return true;
                 }
-                getCommand(args[0]).execute(new SpigotCommandSender(sender), args);
+                getCommand(args[0]).execute(new SpigotCommandSender(sender), args.length > 1 ? Arrays.copyOfRange(args, 1, args.length) : new String[0]);
                 return true;
             }
         } else {
-            getCommand("help").execute(new SpigotCommandSender(sender), args);
+            getCommand("help").execute(new SpigotCommandSender(sender), new String[0]);
             return true;
         }
         return true;

File: bootstrap/sponge/src/main/java/org/geysermc/platform/sponge/command/GeyserSpongeCommandExecutor.java
Patch:
@@ -59,10 +59,10 @@ public CommandResult process(CommandSource source, String arguments) throws Comm
                     source.sendMessage(Text.of(ChatColor.RED + LanguageUtils.getLocaleStringLog("geyser.bootstrap.command.permission_fail")));
                     return CommandResult.success();
                 }
-                getCommand(args[0]).execute(new SpongeCommandSender(source), args);
+                getCommand(args[0]).execute(new SpongeCommandSender(source), args.length > 1 ? Arrays.copyOfRange(args, 1, args.length) : new String[0]);
             }
         } else {
-            getCommand("help").execute(new SpongeCommandSender(source), args);
+            getCommand("help").execute(new SpongeCommandSender(source), new String[0]);
         }
         return CommandResult.success();
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaNotifyClientTranslator.java
Patch:
@@ -103,8 +103,6 @@ public void translate(ServerNotifyClientPacket packet, GeyserSession session) {
             case CHANGE_GAMEMODE:
                 GameMode gameMode = (GameMode) packet.getValue();
 
-                session.setNoClip(gameMode == GameMode.SPECTATOR);
-                session.setWorldImmutable(gameMode == GameMode.ADVENTURE || gameMode == GameMode.SPECTATOR);
                 session.sendAdventureSettings();
 
                 SetPlayerGameTypePacket playerGameTypePacket = new SetPlayerGameTypePacket();

File: bootstrap/bungeecord/src/main/java/org/geysermc/platform/bungeecord/GeyserBungeePlugin.java
Patch:
@@ -97,7 +97,7 @@ public void onEnable() {
         if (geyserConfig.getRemote().getAuthType().equals("floodgate") && getProxy().getPluginManager().getPlugin("floodgate") == null) {
             geyserLogger.severe(LanguageUtils.getLocaleStringLog("geyser.bootstrap.floodgate.not_installed") + " " + LanguageUtils.getLocaleStringLog("geyser.bootstrap.floodgate.disabling"));
             return;
-        } else if (geyserConfig.isAutoconfiguredRemote() && getProxy().getPluginManager().getPlugin("floodgate-bungee") != null) {
+        } else if (geyserConfig.isAutoconfiguredRemote() && getProxy().getPluginManager().getPlugin("floodgate") != null) {
             // Floodgate installed means that the user wants Floodgate authentication
             geyserLogger.debug("Auto-setting to Floodgate authentication.");
             geyserConfig.getRemote().setAuthType("floodgate");

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/GeyserSpigotPlugin.java
Patch:
@@ -101,7 +101,7 @@ public void onEnable() {
             geyserLogger.severe(LanguageUtils.getLocaleStringLog("geyser.bootstrap.floodgate.not_installed") + " " + LanguageUtils.getLocaleStringLog("geyser.bootstrap.floodgate.disabling"));
             this.getPluginLoader().disablePlugin(this);
             return;
-        } else if (geyserConfig.isAutoconfiguredRemote() && Bukkit.getPluginManager().getPlugin("floodgate-bukkit") != null) {
+        } else if (geyserConfig.isAutoconfiguredRemote() && Bukkit.getPluginManager().getPlugin("floodgate") != null) {
             // Floodgate installed means that the user wants Floodgate authentication
             geyserLogger.debug("Auto-setting to Floodgate authentication.");
             geyserConfig.getRemote().setAuthType("floodgate");

File: connector/src/main/java/org/geysermc/connector/FloodgateKeyLoader.java
Patch:
@@ -37,7 +37,7 @@ public static Path getKeyPath(GeyserJacksonConfiguration config, Object floodgat
 
         if (!Files.exists(floodgateKey) && config.getRemote().getAuthType().equals("floodgate")) {
             if (floodgate != null) {
-                Path autoKey = floodgateDataFolder.resolve("public-key.pem");
+                Path autoKey = floodgateDataFolder.resolve("key.pem");
                 if (Files.exists(autoKey)) {
                     logger.info(LanguageUtils.getLocaleStringLog("geyser.bootstrap.floodgate.auto_loaded"));
                     floodgateKey = autoKey;

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockRespawnTranslator.java
Patch:
@@ -43,7 +43,7 @@ public void translate(RespawnPacket packet, GeyserSession session) {
                 RespawnPacket respawnPacket = new RespawnPacket();
                 respawnPacket.setRuntimeEntityId(0);
                 respawnPacket.setPosition(Vector3f.ZERO);
-                respawnPacket.setState(RespawnPacket.State.SERVER_SEARCHING);
+                respawnPacket.setState(RespawnPacket.State.SERVER_READY);
                 session.sendUpstreamPacket(respawnPacket);
             }
 

File: connector/src/main/java/org/geysermc/connector/scoreboard/Objective.java
Patch:
@@ -83,7 +83,7 @@ public void registerScore(String id, int score) {
 
     public void setScore(String id, int score) {
         if (scores.containsKey(id)) {
-            scores.get(id).setScore(score).setUpdateType(UpdateType.ADD);
+            scores.get(id).setScore(score);
             return;
         }
         registerScore(id, score);

File: connector/src/main/java/org/geysermc/connector/configuration/GeyserConfiguration.java
Patch:
@@ -79,6 +79,8 @@ public interface GeyserConfiguration {
 
     boolean isCacheChunks();
 
+    boolean isForceResourcePacks();
+
     int getCacheImages();
 
     IMetricsInfo getMetrics();

File: connector/src/main/java/org/geysermc/connector/configuration/GeyserJacksonConfiguration.java
Patch:
@@ -103,6 +103,9 @@ public abstract class GeyserJacksonConfiguration implements GeyserConfiguration
     @JsonProperty("above-bedrock-nether-building")
     private boolean aboveBedrockNetherBuilding = false;
 
+    @JsonProperty("force-resource-packs")
+    private boolean forceResourcePacks = true;
+
     private MetricsInfo metrics;
 
     @Getter

File: connector/src/main/java/org/geysermc/connector/utils/LocaleUtils.java
Patch:
@@ -133,7 +133,7 @@ public static void downloadAndLoadLocale(String locale) {
      * @param locale Locale to download
      */
     private static void downloadLocale(String locale) {
-        File localeFile = Paths.get(GeyserConnector.getInstance().getBootstrap().getConfigFolder().toString(),"locales",locale + ".json").toFile();
+        File localeFile = GeyserConnector.getInstance().getBootstrap().getConfigFolder().resolve("locales/" + locale + ".json").toFile();
 
         // Check if we have already downloaded the locale file
         if (localeFile.exists()) {

File: connector/src/main/java/org/geysermc/connector/utils/SkinUtils.java
Patch:
@@ -270,7 +270,7 @@ public static void handleBedrockSkin(PlayerEntity playerEntity, BedrockClientDat
         GeyserConnector.getInstance().getLogger().info(LanguageUtils.getLocaleStringLog("geyser.skin.bedrock.register", playerEntity.getUsername(), playerEntity.getUuid()));
 
         try {
-            byte[] skinBytes = com.github.steveice10.mc.auth.util.Base64.decode(clientData.getSkinData().getBytes("UTF-8"));
+            byte[] skinBytes = Base64.getDecoder().decode(clientData.getSkinData().getBytes("UTF-8"));
             byte[] capeBytes = clientData.getCapeData();
 
             byte[] geometryNameBytes = Base64.getDecoder().decode(clientData.getGeometryName().getBytes("UTF-8"));

File: connector/src/main/java/org/geysermc/connector/entity/PlayerEntity.java
Patch:
@@ -118,7 +118,7 @@ public void spawnEntity(GeyserSession session) {
     }
 
     public void sendPlayer(GeyserSession session) {
-        if(session.getEntityCache().getPlayerEntity(uuid) == null)
+        if (session.getEntityCache().getPlayerEntity(uuid) == null)
             return;
 
         if (session.getUpstream().isInitialized() && session.getEntityCache().getEntityByGeyserId(geyserId) == null) {

File: connector/src/main/java/org/geysermc/connector/network/session/cache/EntityCache.java
Patch:
@@ -76,9 +76,6 @@ public boolean removeEntity(Entity entity, boolean force) {
         if (entity != null && entity.isValid() && (force || entity.despawnEntity(session))) {
             long geyserId = entityIdTranslations.remove(entity.getEntityId());
             entities.remove(geyserId);
-            if (entity.is(PlayerEntity.class)) {
-                playerEntities.remove(entity.as(PlayerEntity.class).getUuid());
-            }
             return true;
         }
         return false;

File: connector/src/main/java/org/geysermc/connector/network/BedrockProtocol.java
Patch:
@@ -28,7 +28,6 @@
 import com.nukkitx.protocol.bedrock.BedrockPacketCodec;
 import com.nukkitx.protocol.bedrock.v407.Bedrock_v407;
 import com.nukkitx.protocol.bedrock.v408.Bedrock_v408;
-import com.nukkitx.protocol.bedrock.v409.Bedrock_v409;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -50,7 +49,6 @@ public class BedrockProtocol {
     static {
         SUPPORTED_BEDROCK_CODECS.add(Bedrock_v407.V407_CODEC);
         SUPPORTED_BEDROCK_CODECS.add(DEFAULT_BEDROCK_CODEC);
-        SUPPORTED_BEDROCK_CODECS.add(Bedrock_v409.V409_CODEC);
     }
 
     /**

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -613,7 +613,7 @@ private void startGame() {
         startGamePacket.setBlockPalette(BlockTranslator.BLOCKS);
         startGamePacket.setItemEntries(ItemRegistry.ITEMS);
         startGamePacket.setVanillaVersion("*");
-        // startGamePacket.setMovementServerAuthoritative(true);
+        startGamePacket.setAuthoritativeMovementMode(AuthoritativeMovementMode.CLIENT);
         upstream.sendPacket(startGamePacket);
     }
 

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -135,7 +135,7 @@ public enum EntityType {
     MINECART_CHEST(MinecartEntity.class, 98, 0.7f, 0.98f, 0.98f, 0.35f, "minecraft:chest_minecart"),
     MINECART_FURNACE(FurnaceMinecartEntity.class, 98, 0.7f, 0.98f, 0.98f, 0.35f, "minecraft:minecart"),
     MINECART_SPAWNER(SpawnerMinecartEntity.class, 98, 0.7f, 0.98f, 0.98f, 0.35f, "minecraft:minecart"),
-    MINECART_COMMAND_BLOCK(MinecartEntity.class, 100, 0.7f, 0.98f, 0.98f, 0.35f, "minecraft:command_block_minecart"),
+    MINECART_COMMAND_BLOCK(CommandBlockMinecartEntity.class, 100, 0.7f, 0.98f, 0.98f, 0.35f, "minecraft:command_block_minecart"),
     LINGERING_POTION(ThrowableEntity.class, 101, 0f),
     LLAMA_SPIT(Entity.class, 102, 0.25f),
     EVOKER_FANGS(Entity.class, 103, 0.8f, 0.5f, 0.5f, 0f, "minecraft:evocation_fang"),

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -714,7 +714,8 @@ public void sendAdventureSettings() {
         // This allows mobile players access to a GUI for doing commands. The commands there do not change above OPERATOR
         // and all commands there are accessible with OP permission level 2
         adventureSettingsPacket.setCommandPermission(opPermissionLevel >= 2 ? CommandPermission.OPERATOR : CommandPermission.NORMAL);
-        adventureSettingsPacket.setPlayerPermission(PlayerPermission.MEMBER);
+        // Required to make command blocks destroyable
+        adventureSettingsPacket.setPlayerPermission(opPermissionLevel >= 2 ? PlayerPermission.OPERATOR : PlayerPermission.MEMBER);
 
         Set<AdventureSetting> flags = new HashSet<>();
         if (canFly) {

File: connector/src/main/java/org/geysermc/connector/network/translators/java/scoreboard/JavaTeamTranslator.java
Patch:
@@ -61,6 +61,7 @@ public void translate(ServerTeamPacket packet, GeyserSession session) {
                 scoreboard.registerNewTeam(packet.getTeamName(), toPlayerSet(packet.getPlayers()))
                         .setName(MessageUtils.getBedrockMessage(packet.getDisplayName()))
                         .setColor(packet.getColor())
+                        .setNameTagVisibility(packet.getNameTagVisibility())
                         .setPrefix(MessageUtils.getTranslatedBedrockMessage(packet.getPrefix(), session.getClientData().getLanguageCode()))
                         .setSuffix(MessageUtils.getTranslatedBedrockMessage(packet.getSuffix(), session.getClientData().getLanguageCode()));
                 break;
@@ -75,6 +76,7 @@ public void translate(ServerTeamPacket packet, GeyserSession session) {
 
                 team.setName(MessageUtils.getBedrockMessage(packet.getDisplayName()))
                         .setColor(packet.getColor())
+                        .setNameTagVisibility(packet.getNameTagVisibility())
                         .setPrefix(MessageUtils.getTranslatedBedrockMessage(packet.getPrefix(), session.getClientData().getLanguageCode()))
                         .setSuffix(MessageUtils.getTranslatedBedrockMessage(packet.getSuffix(), session.getClientData().getLanguageCode()))
                         .setUpdateType(UpdateType.UPDATE);

File: connector/src/main/java/org/geysermc/connector/scoreboard/Team.java
Patch:
@@ -25,6 +25,7 @@
 
 package org.geysermc.connector.scoreboard;
 
+import com.github.steveice10.mc.protocol.data.game.scoreboard.NameTagVisibility;
 import com.github.steveice10.mc.protocol.data.game.scoreboard.TeamColor;
 import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import lombok.Getter;
@@ -44,6 +45,7 @@ public class Team {
     private UpdateType updateType = UpdateType.ADD;
     private String name;
 
+    private NameTagVisibility nameTagVisibility;
     private String prefix;
     private TeamColor color;
     private String suffix;

File: connector/src/main/java/org/geysermc/connector/common/PlatformType.java
Patch:
@@ -32,6 +32,7 @@
 @AllArgsConstructor
 public enum PlatformType {
 
+    ANDROID("Android"),
     BUNGEECORD("BungeeCord"),
     SPIGOT("Spigot"),
     SPONGE("Sponge"),

File: connector/src/main/java/org/geysermc/connector/network/translators/PacketTranslatorRegistry.java
Patch:
@@ -33,6 +33,7 @@
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.network.session.GeyserSession;
+import org.geysermc.connector.utils.FileUtils;
 import org.geysermc.connector.utils.LanguageUtils;
 import org.reflections.Reflections;
 
@@ -48,7 +49,7 @@ public class PacketTranslatorRegistry<T> {
     private static final ObjectArrayList<Class<?>> IGNORED_PACKETS = new ObjectArrayList<>();
 
     static {
-        Reflections ref = new Reflections("org.geysermc.connector.network.translators");
+        Reflections ref = GeyserConnector.getInstance().isProduction() ? FileUtils.getReflections("org.geysermc.connector.network.translators") : new Reflections("org.geysermc.connector.network.translators");
 
         for (Class<?> clazz : ref.getTypesAnnotatedWith(Translator.class)) {
             Class<?> packet = clazz.getAnnotation(Translator.class).packet();

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemTranslator.java
Patch:
@@ -41,6 +41,7 @@
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.ItemRemapper;
+import org.geysermc.connector.utils.FileUtils;
 import org.geysermc.connector.utils.LanguageUtils;
 import org.geysermc.connector.utils.MessageUtils;
 import org.reflections.Reflections;
@@ -62,7 +63,7 @@ public static void init() {
 
     static {
         /* Load item translators */
-        Reflections ref = new Reflections("org.geysermc.connector.network.translators.item");
+        Reflections ref = GeyserConnector.getInstance().isProduction() ? FileUtils.getReflections("org.geysermc.connector.network.translators.item") : new Reflections("org.geysermc.connector.network.translators.item");
 
         Map<NbtItemStackTranslator, Integer> loadedNbtItemTranslators = new HashMap<>();
         for (Class<?> clazz : ref.getTypesAnnotatedWith(ItemRemapper.class)) {

File: connector/src/main/java/org/geysermc/connector/network/translators/sound/SoundHandlerRegistry.java
Patch:
@@ -25,6 +25,8 @@
 
 package org.geysermc.connector.network.translators.sound;
 
+import org.geysermc.connector.GeyserConnector;
+import org.geysermc.connector.utils.FileUtils;
 import org.reflections.Reflections;
 
 import java.util.HashMap;
@@ -38,7 +40,7 @@ public class SoundHandlerRegistry {
     static final Map<SoundHandler, SoundInteractionHandler<?>> INTERACTION_HANDLERS = new HashMap<>();
 
     static {
-        Reflections ref = new Reflections("org.geysermc.connector.network.translators.sound");
+        Reflections ref = GeyserConnector.getInstance().isProduction() ? FileUtils.getReflections("org.geysermc.connector.network.translators.sound") : new Reflections("org.geysermc.connector.network.translators.sound");
         for (Class<?> clazz : ref.getTypesAnnotatedWith(SoundHandler.class)) {
             try {
                 SoundInteractionHandler<?> interactionHandler = (SoundInteractionHandler<?>) clazz.newInstance();

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/BlockTranslator.java
Patch:
@@ -106,7 +106,7 @@ public class BlockTranslator {
         addedStatesMap.defaultReturnValue(-1);
         List<NbtMap> paletteList = new ArrayList<>();
 
-        Reflections ref = new Reflections("org.geysermc.connector.network.translators.world.block.entity");
+        Reflections ref = GeyserConnector.getInstance().isProduction() ? FileUtils.getReflections("org.geysermc.connector.network.translators.world.block.entity") : new Reflections("org.geysermc.connector.network.translators.world.block.entity");
         ref.getTypesAnnotatedWith(BlockEntity.class);
 
         int waterRuntimeId = -1;

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/entity/BlockEntityTranslator.java
Patch:
@@ -34,6 +34,7 @@
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.utils.BlockEntityUtils;
+import org.geysermc.connector.utils.FileUtils;
 import org.geysermc.connector.utils.LanguageUtils;
 import org.reflections.Reflections;
 
@@ -66,7 +67,7 @@ public static void init() {
     }
 
     static {
-        Reflections ref = new Reflections("org.geysermc.connector.network.translators.world.block.entity");
+        Reflections ref = GeyserConnector.getInstance().isProduction() ? FileUtils.getReflections("org.geysermc.connector.network.translators.world.block.entity") : new Reflections("org.geysermc.connector.network.translators.world.block.entity");
         for (Class<?> clazz : ref.getTypesAnnotatedWith(BlockEntity.class)) {
             GeyserConnector.getInstance().getLogger().debug("Found annotated block entity: " + clazz.getCanonicalName());
 

File: connector/src/main/java/org/geysermc/connector/utils/LocaleUtils.java
Patch:
@@ -150,7 +150,7 @@ private static void downloadLocale(String locale) {
 
         // Get the hash and download the locale
         String hash = ASSET_MAP.get("minecraft/lang/" + locale + ".json").getHash();
-        WebUtils.downloadFile("http://resources.download.minecraft.net/" + hash.substring(0, 2) + "/" + hash, localeFile.toString());
+        WebUtils.downloadFile("https://resources.download.minecraft.net/" + hash.substring(0, 2) + "/" + hash, localeFile.toString());
     }
 
     /**

File: connector/src/main/java/org/geysermc/connector/utils/SkinProvider.java
Patch:
@@ -119,7 +119,7 @@ public class SkinProvider {
         // Schedule Daily Image Expiry if we are caching them
         if (GeyserConnector.getInstance().getConfig().getCacheImages() > 0) {
             GeyserConnector.getInstance().getGeneralThreadPool().scheduleAtFixedRate(() -> {
-                File cacheFolder = Paths.get("cache", "images").toFile();
+                File cacheFolder = GeyserConnector.getInstance().getBootstrap().getConfigFolder().resolve("cache").resolve("images").toFile();
                 if (!cacheFolder.exists()) {
                     return;
                 }
@@ -395,7 +395,7 @@ private static byte[] requestImage(String imageUrl, CapeProvider provider) throw
         BufferedImage image = null;
 
         // First see if we have a cached file. We also update the modification stamp so we know when the file was last used
-        File imageFile = Paths.get("cache", "images", UUID.nameUUIDFromBytes(imageUrl.getBytes()).toString() + ".png").toFile();
+        File imageFile = GeyserConnector.getInstance().getBootstrap().getConfigFolder().resolve("cache").resolve("images").resolve(UUID.nameUUIDFromBytes(imageUrl.getBytes()).toString() + ".png").toFile();
         if (imageFile.exists()) {
             try {
                 GeyserConnector.getInstance().getLogger().debug("Reading cached image from file " + imageFile.getPath() + " for " + imageUrl);
@@ -600,7 +600,7 @@ public static SkinGeometry getEars(boolean isSlim) {
     @Getter
     public enum CapeProvider {
         MINECRAFT,
-        OPTIFINE("http://s.optifine.net/capes/%s.png", CapeUrlType.USERNAME),
+        OPTIFINE("https://optifine.net/capes/%s.png", CapeUrlType.USERNAME),
         LABYMOD("https://www.labymod.net/page/php/getCapeTexture.php?uuid=%s", CapeUrlType.UUID_DASHED),
         FIVEZIG("https://textures.5zigreborn.eu/profile/%s", CapeUrlType.UUID_DASHED),
         MINECRAFTCAPES("https://minecraftcapes.net/profile/%s/cape", CapeUrlType.UUID);

File: connector/src/main/java/org/geysermc/connector/utils/SkinUtils.java
Patch:
@@ -150,14 +150,14 @@ public static GameProfileData from(GameProfile profile) {
                 JsonNode textures = skinObject.get("textures");
 
                 JsonNode skinTexture = textures.get("SKIN");
-                String skinUrl = skinTexture.get("url").asText();
+                String skinUrl = skinTexture.get("url").asText().replace("http://", "https://");
 
                 isAlex = skinTexture.has("metadata");
 
                 String capeUrl = null;
                 if (textures.has("CAPE")) {
                     JsonNode capeTexture = textures.get("CAPE");
-                    capeUrl = capeTexture.get("url").asText();
+                    capeUrl = capeTexture.get("url").asText().replace("http://", "https://");
                 }
 
                 return new GameProfileData(skinUrl, capeUrl, isAlex);

File: connector/src/main/java/org/geysermc/connector/configuration/GeyserConfiguration.java
Patch:
@@ -27,7 +27,6 @@
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import org.geysermc.connector.GeyserLogger;
-
 import org.geysermc.connector.utils.LanguageUtils;
 
 import java.nio.file.Path;
@@ -74,7 +73,7 @@ public interface GeyserConfiguration {
 
     String getDefaultLocale();
 
-    Path getFloodgateKeyFile();
+    Path getFloodgateKeyPath();
 
     boolean isAboveBedrockNetherBuilding();
 
@@ -125,6 +124,8 @@ interface IMetricsInfo {
         String getUniqueId();
     }
 
+    int getScoreboardPacketThreshold();
+
     // if u have offline mode enabled pls be safe
     boolean isEnableProxyConnections();
 

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -346,7 +346,7 @@ public void authenticate(String username, String password) {
                     PublicKey key = null;
                     try {
                         key = EncryptionUtil.getKeyFromFile(
-                                connector.getConfig().getFloodgateKeyFile(),
+                                connector.getConfig().getFloodgateKeyPath(),
                                 PublicKey.class
                         );
                     } catch (IOException | InvalidKeySpecException | NoSuchAlgorithmException e) {
@@ -626,7 +626,7 @@ public boolean confirmTeleport(Vector3d position) {
      * @param packet the bedrock packet from the NukkitX protocol lib
      */
     public void sendUpstreamPacket(BedrockPacket packet) {
-        if (upstream != null && !upstream.isClosed()) {
+        if (upstream != null) {
             upstream.sendPacket(packet);
         } else {
             connector.getLogger().debug("Tried to send upstream packet " + packet.getClass().getSimpleName() + " but the session was null");
@@ -639,7 +639,7 @@ public void sendUpstreamPacket(BedrockPacket packet) {
      * @param packet the bedrock packet from the NukkitX protocol lib
      */
     public void sendUpstreamPacketImmediately(BedrockPacket packet) {
-        if (upstream != null && !upstream.isClosed()) {
+        if (upstream != null) {
             upstream.sendPacketImmediately(packet);
         } else {
             connector.getLogger().debug("Tried to send upstream packet " + packet.getClass().getSimpleName() + " immediately but the session was null");

File: connector/src/main/java/org/geysermc/connector/configuration/GeyserConfiguration.java
Patch:
@@ -95,6 +95,8 @@ interface IBedrockConfiguration {
         String getMotd1();
 
         String getMotd2();
+
+        String getServerName();
     }
 
     interface IRemoteConfiguration {

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -47,6 +47,7 @@
 import org.geysermc.connector.network.translators.item.ItemRegistry;
 import org.geysermc.connector.network.translators.item.ItemTranslator;
 import org.geysermc.connector.network.translators.item.PotionMixRegistry;
+import org.geysermc.connector.network.translators.item.RecipeRegistry;
 import org.geysermc.connector.network.translators.sound.SoundHandlerRegistry;
 import org.geysermc.connector.network.translators.sound.SoundRegistry;
 import org.geysermc.connector.network.translators.world.WorldManager;
@@ -131,6 +132,7 @@ private GeyserConnector(PlatformType platformType, GeyserBootstrap bootstrap) {
         ItemTranslator.init();
         LocaleUtils.init();
         PotionMixRegistry.init();
+        RecipeRegistry.init();
         SoundRegistry.init();
         SoundHandlerRegistry.init();
 

File: connector/src/main/java/org/geysermc/connector/network/translators/item/translators/nbt/FireworkTranslator.java
Patch:
@@ -107,6 +107,9 @@ public void translateToJava(CompoundTag itemTag, ItemEntry itemEntry) {
             fireworks.put(new ByteTag("Flight", MathUtils.convertByte(fireworks.get("Flight").getValue())));
         }
 
+        if (!itemTag.contains("Explosions")) {
+            return;
+        }
         ListTag explosions = fireworks.get("Explosions");
         for (Tag effect : explosions.getValue()) {
             CompoundTag effectData = (CompoundTag) effect;

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -159,8 +159,6 @@ public class GeyserSession implements CommandSender {
     @Setter
     private Vector3i lastInteractionPosition;
 
-    @Setter
-    private boolean switchingDimension = false;
     private boolean manyDimPackets = false;
     private ServerRespawnPacket lastDimPacket = null;
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaSpawnPositionTranslator.java
Patch:
@@ -32,6 +32,7 @@
 import com.github.steveice10.mc.protocol.packet.ingame.server.world.ServerSpawnPositionPacket;
 import com.nukkitx.math.vector.Vector3i;
 import com.nukkitx.protocol.bedrock.packet.SetSpawnPositionPacket;
+import org.geysermc.connector.utils.DimensionUtils;
 
 @Translator(packet = ServerSpawnPositionPacket.class)
 public class JavaSpawnPositionTranslator extends PacketTranslator<ServerSpawnPositionPacket> {
@@ -41,6 +42,7 @@ public void translate(ServerSpawnPositionPacket packet, GeyserSession session) {
         SetSpawnPositionPacket spawnPositionPacket = new SetSpawnPositionPacket();
         spawnPositionPacket.setBlockPosition(Vector3i.from(packet.getPosition().getX(), packet.getPosition().getY(), packet.getPosition().getZ()));
         spawnPositionPacket.setSpawnForced(true);
+        spawnPositionPacket.setDimensionId(DimensionUtils.javaToBedrock(session.getPlayerEntity().getDimension()));
         spawnPositionPacket.setSpawnType(SetSpawnPositionPacket.Type.WORLD_SPAWN);
         session.sendUpstreamPacket(spawnPositionPacket);
     }

File: connector/src/main/java/org/geysermc/connector/utils/ChunkUtils.java
Patch:
@@ -271,7 +271,5 @@ public static final class ChunkData {
 
         @Getter
         private NbtMap[] blockEntities = new NbtMap[0];
-        @Getter
-        private Object2IntMap<NbtMap> loadBlockEntitiesLater = new Object2IntOpenHashMap<>();
     }
 }

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/world/GeyserSpigotBlockPlaceListener.java
Patch:
@@ -59,7 +59,7 @@ public void place(final BlockPlaceEvent event) {
                 } else {
                     javaBlockId = event.getBlockPlaced().getBlockData().getAsString();
                 }
-                placeBlockSoundPacket.setExtraData(BlockTranslator.getBedrockBlockId(BlockTranslator.getJavaIdBlockMap().get(javaBlockId)));
+                placeBlockSoundPacket.setExtraData(BlockTranslator.getBedrockBlockId(BlockTranslator.getJavaIdBlockMap().getOrDefault(javaBlockId, 0)));
                 placeBlockSoundPacket.setIdentifier(":");
                 session.sendUpstreamPacket(placeBlockSoundPacket);
                 session.setLastBlockPlacePosition(null);

File: bootstrap/sponge/src/main/java/org/geysermc/platform/sponge/GeyserSpongePlugin.java
Patch:
@@ -29,11 +29,11 @@
 import ninja.leaping.configurate.ConfigurationNode;
 import ninja.leaping.configurate.loader.ConfigurationLoader;
 import ninja.leaping.configurate.yaml.YAMLConfigurationLoader;
-import org.geysermc.connector.common.PlatformType;
-import org.geysermc.connector.configuration.GeyserConfiguration;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.bootstrap.GeyserBootstrap;
 import org.geysermc.connector.command.CommandManager;
+import org.geysermc.connector.common.PlatformType;
+import org.geysermc.connector.configuration.GeyserConfiguration;
 import org.geysermc.connector.dump.BootstrapDumpInfo;
 import org.geysermc.connector.ping.GeyserLegacyPingPassthrough;
 import org.geysermc.connector.ping.IGeyserPingPassthrough;
@@ -105,6 +105,7 @@ public void onEnable() {
             // Don't change the ip if its listening on all interfaces
             // By default this should be 127.0.0.1 but may need to be changed in some circumstances
             if (this.geyserConfig.getRemote().getAddress().equalsIgnoreCase("auto")) {
+                this.geyserConfig.setAutoconfiguredRemote(true);
                 serverPort.setValue(javaAddr.getPort());
             }
         }

File: bootstrap/standalone/src/main/java/org/geysermc/platform/standalone/GeyserStandaloneBootstrap.java
Patch:
@@ -33,8 +33,8 @@
 import org.apache.logging.log4j.core.appender.ConsoleAppender;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.bootstrap.GeyserBootstrap;
-import org.geysermc.connector.common.PlatformType;
 import org.geysermc.connector.command.CommandManager;
+import org.geysermc.connector.common.PlatformType;
 import org.geysermc.connector.configuration.GeyserConfiguration;
 import org.geysermc.connector.dump.BootstrapDumpInfo;
 import org.geysermc.connector.ping.GeyserLegacyPingPassthrough;
@@ -109,6 +109,7 @@ public void onEnable() {
             File configFile = FileUtils.fileOrCopiedFromResource("config.yml", (x) -> x.replaceAll("generateduuid", UUID.randomUUID().toString()));
             geyserConfig = FileUtils.loadConfig(configFile, GeyserStandaloneConfiguration.class);
             if (this.geyserConfig.getRemote().getAddress().equalsIgnoreCase("auto")) {
+                geyserConfig.setAutoconfiguredRemote(true); // Doesn't really need to be set but /shrug
                 geyserConfig.getRemote().setAddress("127.0.0.1");
             }
         } catch (IOException ex) {

File: connector/src/main/java/org/geysermc/connector/configuration/GeyserJacksonConfiguration.java
Patch:
@@ -143,6 +143,9 @@ public static class MetricsInfo implements IMetricsInfo {
         private String uniqueId;
     }
 
+    @JsonProperty("enable-proxy-connections")
+    private boolean enableProxyConnections = false;
+
     @JsonProperty("mtu")
     private int mtu = 1400;
 

File: connector/src/main/java/org/geysermc/connector/utils/LoginEncryptionUtils.java
Patch:
@@ -72,7 +72,7 @@ private static boolean validateChainData(JsonNode data) throws Exception {
             }
 
             if (lastKey != null) {
-                EncryptionUtils.verifyJwt(jwt, lastKey);
+                 if (!EncryptionUtils.verifyJwt(jwt, lastKey)) return false;
             }
 
             JsonNode payloadNode = JSON_MAPPER.readTree(jwt.getPayload().toString());
@@ -105,7 +105,7 @@ private static void encryptConnectionWithCert(GeyserConnector connector, GeyserS
 
             connector.getLogger().debug(String.format("Is player data valid? %s", validChain));
 
-            if (!validChain) {
+            if (!validChain && !session.getConnector().getConfig().isEnableProxyConnections()) {
                 session.disconnect(LanguageUtils.getLocaleStringLog("geyser.network.remote.invalid_xbox_account"));
                 return;
             }

File: bootstrap/standalone/src/main/java/org/geysermc/platform/standalone/GeyserStandaloneBootstrap.java
Patch:
@@ -108,6 +108,9 @@ public void onEnable() {
         try {
             File configFile = FileUtils.fileOrCopiedFromResource("config.yml", (x) -> x.replaceAll("generateduuid", UUID.randomUUID().toString()));
             geyserConfig = FileUtils.loadConfig(configFile, GeyserStandaloneConfiguration.class);
+            if (this.geyserConfig.getRemote().getAddress().equalsIgnoreCase("auto")) {
+                geyserConfig.getRemote().setAddress("127.0.0.1");
+            }
         } catch (IOException ex) {
             geyserLogger.severe(LanguageUtils.getLocaleStringLog("geyser.config.failed"), ex);
             System.exit(0);

File: connector/src/main/java/org/geysermc/connector/network/ConnectorServerEventHandler.java
Patch:
@@ -108,6 +108,8 @@ public BedrockPong onQuery(InetSocketAddress inetSocketAddress) {
     public void onSessionCreation(BedrockServerSession bedrockServerSession) {
         bedrockServerSession.setLogging(true);
         bedrockServerSession.setPacketHandler(new UpstreamPacketHandler(connector, new GeyserSession(connector, bedrockServerSession)));
+        // Set the packet codec to default just in case we need to send disconnect packets.
+        bedrockServerSession.setPacketCodec(BedrockProtocol.DEFAULT_BEDROCK_CODEC);
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/utils/SkinUtils.java
Patch:
@@ -264,8 +264,6 @@ public static void requestAndHandleSkinAndCape(PlayerEntity entity, GeyserSessio
     }
 
     public static void handleBedrockSkin(PlayerEntity playerEntity, BedrockClientData clientData) {
-        GameProfileData data = GameProfileData.from(playerEntity.getProfile());
-
         GeyserConnector.getInstance().getLogger().info(LanguageUtils.getLocaleStringLog("geyser.skin.bedrock.register", playerEntity.getUsername(), playerEntity.getUuid()));
 
         try {
@@ -276,7 +274,7 @@ public static void handleBedrockSkin(PlayerEntity playerEntity, BedrockClientDat
             byte[] geometryBytes = Base64.getDecoder().decode(clientData.getGeometryData().getBytes("UTF-8"));
 
             if (skinBytes.length <= (128 * 128 * 4) && !clientData.isPersonaSkin()) {
-                SkinProvider.storeBedrockSkin(playerEntity.getUuid(), data.getSkinUrl(), skinBytes);
+                SkinProvider.storeBedrockSkin(playerEntity.getUuid(), clientData.getSkinId(), skinBytes);
                 SkinProvider.storeBedrockGeometry(playerEntity.getUuid(), geometryNameBytes, geometryBytes);
             } else {
                 GeyserConnector.getInstance().getLogger().info(LanguageUtils.getLocaleStringLog("geyser.skin.bedrock.fail", playerEntity.getUsername()));

File: connector/src/main/java/org/geysermc/connector/network/BedrockProtocol.java
Patch:
@@ -27,6 +27,7 @@
 
 import com.nukkitx.protocol.bedrock.BedrockPacketCodec;
 import com.nukkitx.protocol.bedrock.v407.Bedrock_v407;
+import com.nukkitx.protocol.bedrock.v408.Bedrock_v408;
 import com.nukkitx.protocol.bedrock.v409.Bedrock_v409;
 
 import java.util.Set;
@@ -39,7 +40,7 @@ public class BedrockProtocol {
     /**
      * Default Bedrock codec that should act as a fallback and as the version shown in /geyser version
      */
-    public static final BedrockPacketCodec DEFAULT_BEDROCK_CODEC = Bedrock_v409.V409_CODEC;
+    public static final BedrockPacketCodec DEFAULT_BEDROCK_CODEC = Bedrock_v408.V408_CODEC;
     /**
      * A list of all supported Bedrock versions that can join Geyser
      */
@@ -48,6 +49,7 @@ public class BedrockProtocol {
     static {
         SUPPORTED_BEDROCK_CODECS.add(DEFAULT_BEDROCK_CODEC);
         SUPPORTED_BEDROCK_CODECS.add(Bedrock_v407.V407_CODEC);
+        SUPPORTED_BEDROCK_CODECS.add(Bedrock_v409.V409_CODEC);
     }
 
     /**

File: connector/src/main/java/org/geysermc/connector/utils/LanguageUtils.java
Patch:
@@ -122,7 +122,7 @@ public static String getPlayerLocaleString(String key, String locale, Object...
             formatString = key;
         }
 
-        return MessageFormat.format(formatString.replace("&", "\u00a7"), values);
+        return MessageFormat.format(formatString.replace("'", "''").replace("&", "\u00a7"), values);
     }
 
     /**

File: connector/src/main/java/org/geysermc/connector/utils/DimensionUtils.java
Patch:
@@ -116,7 +116,6 @@ public static String getNewDimension(CompoundTag dimensionTag) {
             return "minecraft:overworld";
         }
         if (dimensionTag.getValue().get("effects") != null) {
-            System.out.println(((StringTag) dimensionTag.getValue().get("effects")).getValue());
             return ((StringTag) dimensionTag.getValue().get("effects")).getValue();
         }
         GeyserConnector.getInstance().getLogger().debug("Effects portion of the tag was null or empty.");

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaSpawnParticleTranslator.java
Patch:
@@ -78,7 +78,7 @@ public void translate(ServerSpawnParticlePacket packet, GeyserSession session) {
                 int r = (int) (data.getRed()*255);
                 int g = (int) (data.getGreen()*255);
                 int b = (int) (data.getBlue()*255);
-                particle.setType(LevelEventType.PARTICLE_FALLING_DUST);
+                particle.setType(LevelEventType.PARTICLE_REDSTONE);
                 particle.setData(((0xff) << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff));
                 particle.setPosition(Vector3f.from(packet.getX(), packet.getY(), packet.getZ()));
                 session.sendUpstreamPacket(particle);

File: connector/src/main/java/org/geysermc/connector/utils/FileUtils.java
Patch:
@@ -42,6 +42,7 @@ public class FileUtils {
      *
      * @param src File to load
      * @param valueType Class to load file into
+     * @param <T> the type
      * @return The data as the given class
      * @throws IOException if the config could not be loaded
      */

File: connector/src/main/java/org/geysermc/connector/utils/GameRule.java
Patch:
@@ -109,7 +109,7 @@ public Object convertValue(String value) {
      * Fetch a game rule by the given Java ID
      *
      * @param id The ID of the gamerule
-     * @return A {@link GameRule} object representing the requested ID or {@link GameRule.UNKNOWN}
+     * @return A {@link GameRule} object representing the requested ID or {@link GameRule#UNKNOWN}
      */
     public static GameRule fromJavaID(String id) {
         for (GameRule gamerule : VALUES) {

File: connector/src/main/java/org/geysermc/connector/utils/InventoryUtils.java
Patch:
@@ -136,6 +136,9 @@ public static boolean canStack(ItemData item1, ItemData item2) {
     /**
      * Returns a barrier block with custom name and lore to explain why
      * part of the inventory is unusable.
+     *
+     * @param description the description
+     * @return the unusable space block
      */
     public static ItemData createUnusableSpaceBlock(String description) {
         NbtMapBuilder root = NbtMap.builder();

File: connector/src/main/java/org/geysermc/connector/bootstrap/GeyserBootstrap.java
Patch:
@@ -30,14 +30,14 @@
 import org.geysermc.connector.configuration.GeyserConfiguration;
 import org.geysermc.connector.GeyserLogger;
 import org.geysermc.connector.command.CommandManager;
-import org.geysermc.connector.network.translators.world.CachedChunkManager;
+import org.geysermc.connector.network.translators.world.GeyserWorldManager;
 import org.geysermc.connector.network.translators.world.WorldManager;
 
 import java.nio.file.Path;
 
 public interface GeyserBootstrap {
 
-    CachedChunkManager DEFAULT_CHUNK_MANAGER = new CachedChunkManager();
+    GeyserWorldManager DEFAULT_CHUNK_MANAGER = new GeyserWorldManager();
 
     /**
      * Called when the GeyserBootstrap is enabled

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/entity/BedrockEntityEventTranslator.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.network.translators.bedrock;
+package org.geysermc.connector.network.translators.bedrock.entity;
 
 import com.github.steveice10.mc.protocol.data.game.window.VillagerTrade;
 import com.github.steveice10.mc.protocol.data.game.window.WindowType;

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/entity/player/BedrockActionTranslator.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.network.translators.bedrock;
+package org.geysermc.connector.network.translators.bedrock.entity.player;
 
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.Position;
 import com.github.steveice10.mc.protocol.data.game.entity.player.GameMode;

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/entity/player/BedrockEmoteTranslator.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.network.translators.bedrock;
+package org.geysermc.connector.network.translators.bedrock.entity.player;
 
 import com.nukkitx.protocol.bedrock.packet.EmotePacket;
 import org.geysermc.connector.GeyserConnector;

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/entity/player/BedrockInteractTranslator.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.network.translators.bedrock;
+package org.geysermc.connector.network.translators.bedrock.entity.player;
 
 import com.nukkitx.protocol.bedrock.data.entity.EntityData;
 import com.nukkitx.protocol.bedrock.data.entity.EntityDataMap;

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/entity/player/BedrockMovePlayerTranslator.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.network.translators.bedrock;
+package org.geysermc.connector.network.translators.bedrock.entity.player;
 
 import com.nukkitx.math.vector.Vector3d;
 import org.geysermc.connector.common.ChatColor;

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/world/BedrockLevelSoundEventTranslator.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.network.translators.bedrock;
+package org.geysermc.connector.network.translators.bedrock.world;
 
 import com.nukkitx.protocol.bedrock.data.SoundEvent;
 import com.nukkitx.protocol.bedrock.packet.LevelSoundEventPacket;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaDifficultyTranslator.java
Patch:
@@ -40,5 +40,7 @@ public void translate(ServerDifficultyPacket packet, GeyserSession session) {
         SetDifficultyPacket setDifficultyPacket = new SetDifficultyPacket();
         setDifficultyPacket.setDifficulty(packet.getDifficulty().ordinal());
         session.sendUpstreamPacket(setDifficultyPacket);
+
+        session.getWorldCache().setDifficulty(packet.getDifficulty());
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaJoinGameTranslator.java
Patch:
@@ -56,7 +56,7 @@ public void translate(ServerJoinGamePacket packet, GeyserSession session) {
             DimensionUtils.switchDimension(session, fakeDim);
             DimensionUtils.switchDimension(session, packet.getDimension());
 
-            session.getScoreboardCache().removeScoreboard();
+            session.getWorldCache().removeScoreboard();
         }
 
         AdventureSettingsPacket bedrockPacket = new AdventureSettingsPacket();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/scoreboard/JavaDisplayScoreboardTranslator.java
Patch:
@@ -36,7 +36,7 @@ public class JavaDisplayScoreboardTranslator extends PacketTranslator<ServerDisp
 
     @Override
     public void translate(ServerDisplayScoreboardPacket packet, GeyserSession session) {
-        session.getScoreboardCache().getScoreboard().registerNewObjective(
+        session.getWorldCache().getScoreboard().registerNewObjective(
                 packet.getName(), packet.getPosition()
         );
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/scoreboard/JavaScoreboardObjectiveTranslator.java
Patch:
@@ -26,7 +26,7 @@
 package org.geysermc.connector.network.translators.java.scoreboard;
 
 import org.geysermc.connector.network.session.GeyserSession;
-import org.geysermc.connector.network.session.cache.ScoreboardCache;
+import org.geysermc.connector.network.session.cache.WorldCache;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;
 import org.geysermc.connector.scoreboard.Objective;
@@ -41,7 +41,7 @@ public class JavaScoreboardObjectiveTranslator extends PacketTranslator<ServerSc
 
     @Override
     public void translate(ServerScoreboardObjectivePacket packet, GeyserSession session) {
-        ScoreboardCache cache = session.getScoreboardCache();
+        WorldCache cache = session.getWorldCache();
         Scoreboard scoreboard = cache.getScoreboard();
 
         Objective objective = scoreboard.getObjective(packet.getName());

File: connector/src/main/java/org/geysermc/connector/network/translators/java/scoreboard/JavaTeamTranslator.java
Patch:
@@ -47,7 +47,7 @@ public class JavaTeamTranslator extends PacketTranslator<ServerTeamPacket> {
     public void translate(ServerTeamPacket packet, GeyserSession session) {
         GeyserConnector.getInstance().getLogger().debug("Team packet " + packet.getTeamName() + " " + packet.getAction() + " " + Arrays.toString(packet.getPlayers()));
 
-        Scoreboard scoreboard = session.getScoreboardCache().getScoreboard();
+        Scoreboard scoreboard = session.getWorldCache().getScoreboard();
         Team team = scoreboard.getTeam(packet.getTeamName());
         switch (packet.getAction()) {
             case CREATE:

File: connector/src/main/java/org/geysermc/connector/network/translators/java/scoreboard/JavaUpdateScoreTranslator.java
Patch:
@@ -42,7 +42,7 @@ public class JavaUpdateScoreTranslator extends PacketTranslator<ServerUpdateScor
     @Override
     public void translate(ServerUpdateScorePacket packet, GeyserSession session) {
         try {
-            Scoreboard scoreboard = session.getScoreboardCache().getScoreboard();
+            Scoreboard scoreboard = session.getWorldCache().getScoreboard();
 
             Objective objective = scoreboard.getObjective(packet.getObjective());
             if (objective == null && packet.getAction() != ScoreboardAction.REMOVE) {

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaUpdateTimeTranslator.java
Patch:
@@ -67,9 +67,7 @@ public void translate(ServerUpdateTimePacket packet, GeyserSession session) {
     }
 
     private void setDoDaylightCycleGamerule(GeyserSession session, boolean doCycle) {
-        GameRulesChangedPacket gameRulesChangedPacket = new GameRulesChangedPacket();
-        gameRulesChangedPacket.getGameRules().add(new GameRuleData<>("dodaylightcycle", doCycle));
-        session.sendUpstreamPacket(gameRulesChangedPacket);
+        session.sendGameRule("dodaylightcycle", doCycle);
     }
 
 }

File: connector/src/main/java/org/geysermc/connector/configuration/GeyserConfiguration.java
Patch:
@@ -77,6 +77,8 @@ public interface GeyserConfiguration {
 
     boolean isCacheChunks();
 
+    int getCacheImages();
+
     IMetricsInfo getMetrics();
 
     interface IBedrockConfiguration {

File: connector/src/main/java/org/geysermc/connector/configuration/GeyserJacksonConfiguration.java
Patch:
@@ -87,6 +87,9 @@ public abstract class GeyserJacksonConfiguration implements GeyserConfiguration
     @JsonProperty("cache-chunks")
     private boolean cacheChunks;
 
+    @JsonProperty("cache-images")
+    private int cacheImages = 0;
+
     @JsonProperty("above-bedrock-nether-building")
     private boolean aboveBedrockNetherBuilding;
 

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockSetLocalPlayerAsInitializedTranslator.java
Patch:
@@ -44,8 +44,8 @@ public void translate(SetLocalPlayerAsInitializedPacket packet, GeyserSession se
 
                 for (PlayerEntity entity : session.getEntityCache().getEntitiesByType(PlayerEntity.class)) {
                     if (!entity.isValid()) {
-                        // async skin loading
-                        SkinUtils.requestAndHandleSkinAndCape(entity, session, skinAndCape -> entity.sendPlayer(session));
+                        SkinUtils.requestAndHandleSkinAndCape(entity, session, null);
+                        entity.sendPlayer(session);
                     }
                 }
             }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/spawn/JavaSpawnPlayerTranslator.java
Patch:
@@ -54,9 +54,9 @@ public void translate(ServerSpawnPlayerPacket packet, GeyserSession session) {
         entity.setRotation(rotation);
         session.getEntityCache().cacheEntity(entity);
 
-        // async skin loading
         if (session.getUpstream().isInitialized()) {
-            SkinUtils.requestAndHandleSkinAndCape(entity, session, skinAndCape -> entity.sendPlayer(session));
+            entity.sendPlayer(session);
+            SkinUtils.requestAndHandleSkinAndCape(entity, session, null);
         }
     }
 }

File: connector/src/main/java/org/geysermc/connector/configuration/GeyserConfiguration.java
Patch:
@@ -118,6 +118,8 @@ interface IMetricsInfo {
         String getUniqueId();
     }
 
+    int getMtu();
+
     int getConfigVersion();
 
     static void checkGeyserConfiguration(GeyserConfiguration geyserConfig, GeyserLogger geyserLogger) {

File: connector/src/main/java/org/geysermc/connector/configuration/GeyserJacksonConfiguration.java
Patch:
@@ -138,6 +138,9 @@ public static class MetricsInfo implements IMetricsInfo {
         private String uniqueId;
     }
 
+    @JsonProperty("mtu")
+    private int mtu = 1400;
+
     @JsonProperty("config-version")
     private int configVersion;
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityMetadataTranslator.java
Patch:
@@ -47,5 +47,7 @@ public void translate(ServerEntityMetadataPacket packet, GeyserSession session)
         for (EntityMetadata metadata : packet.getMetadata()) {
             entity.updateBedrockMetadata(metadata, session);
         }
+
+        entity.updateBedrockMetadata(session);
     }
 }

File: connector/src/main/java/org/geysermc/connector/configuration/GeyserConfiguration.java
Patch:
@@ -86,6 +86,8 @@ interface IBedrockConfiguration {
 
         int getPort();
 
+        boolean isCloneRemotePort();
+
         String getMotd1();
 
         String getMotd2();

File: connector/src/main/java/org/geysermc/connector/configuration/GeyserJacksonConfiguration.java
Patch:
@@ -97,7 +97,9 @@ public abstract class GeyserJacksonConfiguration implements GeyserConfiguration
     public static class BedrockConfiguration implements IBedrockConfiguration {
 
         private String address;
+        @Setter
         private int port;
+        private boolean isCloneRemotePort;
 
         private String motd1;
         private String motd2;

File: bootstrap/bungeecord/src/main/java/org/geysermc/platform/bungeecord/GeyserBungeeConfiguration.java
Patch:
@@ -25,6 +25,7 @@
 
 package org.geysermc.platform.bungeecord;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import lombok.Getter;
 import net.md_5.bungee.api.plugin.Plugin;
@@ -39,6 +40,7 @@
 @JsonIgnoreProperties(ignoreUnknown = true)
 public class GeyserBungeeConfiguration extends GeyserJacksonConfiguration {
 
+    @JsonIgnore
     private Path floodgateKey;
 
     public void loadFloodgate(GeyserBungeePlugin plugin, Configuration configuration) {

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/GeyserSpigotConfiguration.java
Patch:
@@ -25,6 +25,7 @@
 
 package org.geysermc.platform.spigot;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import lombok.Getter;
@@ -43,6 +44,7 @@ public class GeyserSpigotConfiguration extends GeyserJacksonConfiguration {
     @JsonProperty("floodgate-key-file")
     private String floodgateKeyFile;
 
+    @JsonIgnore
     private Path floodgateKey;
 
     public void loadFloodgate(GeyserSpigotPlugin plugin) {

File: bootstrap/standalone/src/main/java/org/geysermc/platform/standalone/GeyserStandaloneBootstrap.java
Patch:
@@ -177,6 +177,6 @@ public Path getConfigFolder() {
 
     @Override
     public BootstrapDumpInfo getDumpInfo() {
-        return new BootstrapDumpInfo();
+        return new GeyserStandaloneDumpInfo(this);
     }
 }

File: bootstrap/standalone/src/main/java/org/geysermc/platform/standalone/gui/GeyserStandaloneGUI.java
Patch:
@@ -61,7 +61,7 @@ public class GeyserStandaloneGUI {
     private static final JTable playerTable = new JTable(playerTableModel);
     private static final int originalFontSize = consolePane.getFont().getSize();
 
-    private static final long  MEGABYTE = 1024L * 1024L;
+    private static final long MEGABYTE = 1024L * 1024L;
 
     private final JMenu commandsMenu;
     private final JMenu optionsMenu;

File: bootstrap/velocity/src/main/java/org/geysermc/platform/velocity/GeyserVelocityConfiguration.java
Patch:
@@ -25,6 +25,7 @@
 
 package org.geysermc.platform.velocity;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.velocitypowered.api.plugin.PluginContainer;
@@ -45,6 +46,7 @@ public class GeyserVelocityConfiguration extends GeyserJacksonConfiguration {
     @JsonProperty("floodgate-key-file")
     private String floodgateKeyFile;
 
+    @JsonIgnore
     private Path floodgateKey;
 
     @Override

File: connector/src/main/java/org/geysermc/connector/utils/InventoryUtils.java
Patch:
@@ -56,7 +56,7 @@ public static void openInventory(GeyserSession session, Inventory inventory) {
             translator.prepareInventory(session, inventory);
             //Ensure at least half a second passes between closing and opening a new window
             //The client will not open the new window if it is still closing the old one
-            long delay = 500 - (System.currentTimeMillis() - session.getLastWindowCloseTime());
+            long delay = 700 - (System.currentTimeMillis() - session.getLastWindowCloseTime());
             //TODO: find better way to handle double chest delay
             if (translator instanceof DoubleChestInventoryTranslator) {
                 delay = Math.max(delay, 200);
@@ -87,6 +87,7 @@ public static void closeInventory(GeyserSession session, int windowId) {
             }
         } else {
             Inventory inventory = session.getInventory();
+            inventory.setOpen(false);
             InventoryTranslator translator = InventoryTranslator.INVENTORY_TRANSLATORS.get(inventory.getWindowType());
             translator.updateInventory(session, inventory);
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerPositionRotationTranslator.java
Patch:
@@ -62,7 +62,7 @@ public void translate(ServerPlayerPositionRotationPacket packet, GeyserSession s
 
             RespawnPacket respawnPacket = new RespawnPacket();
             respawnPacket.setRuntimeEntityId(entity.getGeyserId());
-            respawnPacket.setPosition(pos);
+            respawnPacket.setPosition(entity.getPosition());
             respawnPacket.setState(RespawnPacket.State.SERVER_READY);
             session.sendUpstreamPacket(respawnPacket);
 
@@ -79,7 +79,7 @@ public void translate(ServerPlayerPositionRotationPacket packet, GeyserSession s
 
             MovePlayerPacket movePlayerPacket = new MovePlayerPacket();
             movePlayerPacket.setRuntimeEntityId(entity.getGeyserId());
-            movePlayerPacket.setPosition(pos);
+            movePlayerPacket.setPosition(entity.getPosition());
             movePlayerPacket.setRotation(Vector3f.from(packet.getPitch(), packet.getYaw(), 0));
             movePlayerPacket.setMode(MovePlayerPacket.Mode.RESPAWN); //TODO: PROBABLY RIGHT BUT STILL CHECK
 

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockInventoryTransactionTranslator.java
Patch:
@@ -141,7 +141,7 @@ public void translate(InventoryTransactionPacket packet, GeyserSession session)
                         }
 
                         // Handled in ITEM_USE
-                        if (packet.getItemInHand() != null && packet.getItemInHand().getId() == ItemRegistry.BUCKET.getJavaId()) {
+                        if (packet.getItemInHand() != null && packet.getItemInHand().getId() == ItemRegistry.BUCKET.getBedrockId()) {
                             break;
                         }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/item/Enchantment.java
Patch:
@@ -66,7 +66,8 @@ public enum Enchantment {
     CHANNELING,
     MULTISHOT,
     PIERCING,
-    QUICK_CHARGE;
+    QUICK_CHARGE,
+    SOUL_SPEED;
 
     private final String javaIdentifier;
 

File: connector/src/main/java/org/geysermc/connector/entity/LivingEntity.java
Patch:
@@ -67,7 +67,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
                 metadata.put(EntityData.HEALTH, entityMetadata.getValue());
                 break;
             case 9:
-                metadata.put(EntityData.POTION_AUX_VALUE, entityMetadata.getValue()); //TODO: CHECK THIS AND THE BOTTOM ONE
+                metadata.put(EntityData.EFFECT_COLOR, entityMetadata.getValue());
                 break;
             case 10:
                 metadata.put(EntityData.EFFECT_AMBIENT, (byte) ((boolean) entityMetadata.getValue() ? 1 : 0));

File: connector/src/main/java/org/geysermc/connector/network/translators/item/Enchantment.java
Patch:
@@ -76,7 +76,7 @@ public enum Enchantment {
 
     public static Enchantment getByJavaIdentifier(String javaIdentifier) {
         for (Enchantment enchantment : Enchantment.values()) {
-            if (enchantment.javaIdentifier.equals(javaIdentifier)) {
+            if (enchantment.javaIdentifier.equals(javaIdentifier) || enchantment.name().toLowerCase(Locale.ENGLISH).equalsIgnoreCase(javaIdentifier)) {
                 return enchantment;
             }
         }

File: connector/src/main/java/org/geysermc/connector/entity/FireworkEntity.java
Patch:
@@ -116,7 +116,9 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
 
             fireworksBuilder.putList("Explosions", NbtType.COMPOUND, explosions);
 
-            metadata.put(EntityData.DISPLAY_ITEM, NbtMap.builder().put("Fireworks", fireworksBuilder.build()));
+            NbtMapBuilder builder = NbtMap.builder();
+            builder.put("Fireworks", fireworksBuilder.build());
+            metadata.put(EntityData.DISPLAY_ITEM, builder.build());
         } else if (entityMetadata.getId() == 8 && !entityMetadata.getValue().equals(OptionalInt.empty()) && ((OptionalInt) entityMetadata.getValue()).getAsInt() == session.getPlayerEntity().getEntityId()) {
             //Checks if the firework has an entity ID (used when a player is gliding) and checks to make sure the player that is gliding is the one getting sent the packet or else every player near the gliding player will boost too.
             PlayerEntity entity = session.getPlayerEntity();

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/AnvilInventoryTranslator.java
Patch:
@@ -136,7 +136,7 @@ public void updateSlot(GeyserSession session, Inventory inventory, int slot) {
                 CompoundTag tag = item.getNbt();
                 if (tag != null) {
                     CompoundTag displayTag = tag.get("display");
-                    if (displayTag != null) {
+                    if (displayTag != null && displayTag.contains("Name")) {
                         String itemName = displayTag.get("Name").getValue().toString();
                         TextMessage message = (TextMessage) MessageSerializer.fromString(itemName);
                         rename = message.getText();

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemTranslator.java
Patch:
@@ -157,7 +157,7 @@ public static ItemData translateToBedrock(GeyserSession session, ItemStack stack
         NbtMap tag = itemData.getTag();
         if (tag != null) {
             NbtMap display = tag.getCompound("display");
-            if (display != null && !display.isEmpty()) {
+            if (display != null && !display.isEmpty() && display.containsKey("Name")) {
                 String name = display.getString("Name");
 
                 // If its not a message convert it

File: connector/src/main/java/org/geysermc/connector/command/defaults/VersionCommand.java
Patch:
@@ -29,6 +29,7 @@
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.command.CommandSender;
 import org.geysermc.connector.command.GeyserCommand;
+import org.geysermc.connector.common.ChatColor;
 import org.geysermc.connector.utils.FileUtils;
 import org.geysermc.connector.utils.LanguageUtils;
 import org.geysermc.connector.utils.WebUtils;
@@ -63,7 +64,7 @@ public void execute(CommandSender sender, String[] args) {
                 if (buildXML.startsWith("<buildNumber>")) {
                     int latestBuildNum = Integer.parseInt(buildXML.replaceAll("<(\\\\)?(/)?buildNumber>", "").trim());
                     int buildNum = Integer.parseInt(gitProp.getProperty("git.build.number"));
-                    if (latestBuildNum != buildNum) {
+                    if (latestBuildNum == buildNum) {
                         sender.sendMessage(LanguageUtils.getLocaleStringLog("geyser.commands.version.no_updates"));
                     } else {
                         sender.sendMessage(LanguageUtils.getLocaleStringLog("geyser.commands.version.outdated", (latestBuildNum - buildNum), "http://ci.geysermc.org/"));
@@ -73,7 +74,7 @@ public void execute(CommandSender sender, String[] args) {
                 }
             } catch (IOException | AssertionError | NumberFormatException e) {
                 GeyserConnector.getInstance().getLogger().error(LanguageUtils.getLocaleStringLog("geyser.commands.version.failed"), e);
-                sender.sendMessage(LanguageUtils.getLocaleStringLog("geyser.commands.version.failed"));
+                sender.sendMessage(ChatColor.RED + LanguageUtils.getLocaleStringLog("geyser.commands.version.failed"));
             }
         }
     }

File: connector/src/main/java/org/geysermc/connector/utils/WebUtils.java
Patch:
@@ -25,6 +25,8 @@
 
 package org.geysermc.connector.utils;
 
+import org.geysermc.connector.GeyserConnector;
+
 import java.io.*;
 import java.net.HttpURLConnection;
 import java.net.URL;
@@ -47,6 +49,7 @@ public static String getBody(String reqURL) {
             url = new URL(reqURL);
             HttpURLConnection con = (HttpURLConnection) url.openConnection();
             con.setRequestMethod("GET");
+            con.setRequestProperty("User-Agent", "Geyser-" + GeyserConnector.getInstance().getPlatformType().toString() + "/" + GeyserConnector.VERSION); // Otherwise Java 8 fails on checking updates
 
             BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
             String inputLine;

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockEmoteTranslator.java
Patch:
@@ -42,7 +42,6 @@ public void translate(EmotePacket packet, GeyserSession session) {
             if (otherSession != session) {
                 packet.setRuntimeEntityId(otherSession.getEntityCache().getEntityByJavaId(javaId).getGeyserId());
                 otherSession.sendUpstreamPacket(packet);
-                System.out.println(packet);
             }
         }
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemRegistry.java
Patch:
@@ -60,6 +60,8 @@ public class ItemRegistry {
     public static final int SHIELD = 829;
     // Boat ID, used in BedrockInventoryTransactionTranslator.java
     public static final int BOAT = 333;
+    // Gold ID, used in PiglinEntity.java
+    public static final int GOLD = 266;
 
     public static int BARRIER_INDEX = 0;
 

File: connector/src/main/java/org/geysermc/connector/utils/MessageUtils.java
Patch:
@@ -391,7 +391,8 @@ private static String getClosestColor(String color) {
 
         for (Map.Entry<String, Integer> testColor : COLORS.entrySet()) {
             if (testColor.getValue() == rgb) {
-                return testColor.getKey();
+                closest = testColor.getKey();
+                break;
             }
 
             int testR = (testColor.getValue() >> 16) & 0xFF;

File: connector/src/main/java/org/geysermc/connector/network/translators/item/translators/nbt/MapItemTranslator.java
Patch:
@@ -28,10 +28,10 @@
 import com.github.steveice10.opennbt.tag.builtin.ByteTag;
 import com.github.steveice10.opennbt.tag.builtin.CompoundTag;
 import com.github.steveice10.opennbt.tag.builtin.IntTag;
-import com.github.steveice10.opennbt.tag.builtin.StringTag;
+import com.github.steveice10.opennbt.tag.builtin.LongTag;
 import org.geysermc.connector.network.translators.ItemRemapper;
-import org.geysermc.connector.network.translators.item.NbtItemStackTranslator;
 import org.geysermc.connector.network.translators.item.ItemEntry;
+import org.geysermc.connector.network.translators.item.NbtItemStackTranslator;
 
 @ItemRemapper
 public class MapItemTranslator extends NbtItemStackTranslator {
@@ -41,7 +41,7 @@ public void translateToBedrock(CompoundTag itemTag, ItemEntry itemEntry) {
         IntTag mapId = itemTag.get("map");
 
         if (mapId != null) {
-            itemTag.put(new StringTag("map_uuid", mapId.getValue().toString()));
+            itemTag.put(new LongTag("map_uuid", mapId.getValue()));
             itemTag.put(new IntTag("map_name_index", mapId.getValue()));
             itemTag.put(new ByteTag("map_display_players", (byte) 1));
             itemTag.remove("map");

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/entity/BannerBlockEntityTranslator.java
Patch:
@@ -55,7 +55,7 @@ public Map<String, Object> translateTag(CompoundTag tag, int blockState) {
 
         if (tag.contains("Patterns")) {
             ListTag patterns = tag.get("Patterns");
-            tags.put("", BannerTranslator.convertBannerPattern(patterns));
+            tags.put("Patterns", BannerTranslator.convertBannerPattern(patterns));
         }
 
         if (tag.contains("CustomName")) {

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -47,6 +47,7 @@
 import org.geysermc.connector.network.translators.effect.EffectRegistry;
 import org.geysermc.connector.network.translators.item.ItemRegistry;
 import org.geysermc.connector.network.translators.item.ItemTranslator;
+import org.geysermc.connector.network.translators.item.PotionMixRegistry;
 import org.geysermc.connector.network.translators.sound.SoundHandlerRegistry;
 import org.geysermc.connector.network.translators.sound.SoundRegistry;
 import org.geysermc.connector.network.translators.world.WorldManager;
@@ -127,6 +128,7 @@ private GeyserConnector(PlatformType platformType, GeyserBootstrap bootstrap) {
         ItemRegistry.init();
         ItemTranslator.init();
         LocaleUtils.init();
+        PotionMixRegistry.init();
         SoundRegistry.init();
         SoundHandlerRegistry.init();
 

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockActionTranslator.java
Patch:
@@ -112,7 +112,7 @@ public void translate(PlayerActionPacket packet, GeyserSession session) {
                 break;
             case CONTINUE_BREAK:
                 LevelEventPacket continueBreakPacket = new LevelEventPacket();
-                continueBreakPacket.setType(LevelEventType.BLOCK_UPDATE_BREAK); //TODO: There are now level event types for all breaks. Important?
+                continueBreakPacket.setType(LevelEventType.PARTICLE_CRACK_BLOCK);
                 continueBreakPacket.setData(BlockTranslator.getBedrockBlockId(session.getBreakingBlock()));
                 continueBreakPacket.setPosition(packet.getBlockPosition().toFloat());
                 session.sendUpstreamPacket(continueBreakPacket);

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockInventoryTransactionTranslator.java
Patch:
@@ -152,7 +152,7 @@ public void translate(InventoryTransactionPacket packet, GeyserSession session)
                             session.setLastBlockPlacePosition(null);
 
                             LevelEventPacket blockBreakPacket = new LevelEventPacket();
-                            blockBreakPacket.setType(LevelEventType.BLOCK_STOP_BREAK); //TODO: Make sure this is the right new enum
+                            blockBreakPacket.setType(LevelEventType.PARTICLE_DESTROY_BLOCK);
                             blockBreakPacket.setPosition(packet.getBlockPosition().toFloat());
                             blockBreakPacket.setData(BlockTranslator.getBedrockBlockId(blockState));
                             session.sendUpstreamPacket(blockBreakPacket);

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -48,6 +48,7 @@
 import com.nukkitx.protocol.bedrock.data.*;
 import com.nukkitx.protocol.bedrock.packet.*;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
+import it.unimi.dsi.fastutil.longs.Long2ObjectMaps;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.objects.Object2LongMap;
 import it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap;
@@ -107,7 +108,7 @@ public class GeyserSession implements CommandSender {
     private TeleportCache teleportCache;
 
     @Getter
-    private final Long2ObjectMap<ClientboundMapItemDataPacket> storedMaps = new Long2ObjectOpenHashMap<>();
+    private final Long2ObjectMap<ClientboundMapItemDataPacket> storedMaps = Long2ObjectMaps.synchronize(new Long2ObjectOpenHashMap<>());
 
     /**
      * A map of Vector3i positions to Java entity IDs.

File: connector/src/main/java/org/geysermc/connector/utils/LanguageUtils.java
Patch:
@@ -173,6 +173,7 @@ public static String getDefaultLocale() {
         locale = formatLocale(Locale.getDefault().getLanguage() + "_" + Locale.getDefault().getCountry());
         if (!isValidLanguage(locale)) { // Bedrock does not support this language
             locale = "en_US";
+            loadGeyserLocale(locale);
         }
         if (GeyserConnector.getInstance() != null &&
                 GeyserConnector.getInstance().getConfig() != null && (GeyserConnector.getInstance().getConfig().getDefaultLocale() == null || !isValid)) { // Means we should use the system locale for sure

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaJoinGameTranslator.java
Patch:
@@ -31,6 +31,7 @@
 import com.github.steveice10.mc.protocol.packet.ingame.client.ClientSettingsPacket;
 import org.geysermc.connector.entity.PlayerEntity;
 import org.geysermc.connector.network.session.GeyserSession;
+import org.geysermc.connector.network.session.cache.ScoreboardCache;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;
 import org.geysermc.connector.utils.DimensionUtils;
@@ -58,6 +59,8 @@ public void translate(ServerJoinGamePacket packet, GeyserSession session) {
             String fakeDim = entity.getDimension().equals(DimensionUtils.OVERWORLD) ? DimensionUtils.NETHER : DimensionUtils.OVERWORLD;
             DimensionUtils.switchDimension(session, fakeDim);
             DimensionUtils.switchDimension(session, packet.getDimension());
+
+            session.getScoreboardCache().removeScoreboard();
         }
 
         AdventureSettingsPacket bedrockPacket = new AdventureSettingsPacket();

File: connector/src/main/java/org/geysermc/connector/common/ping/GeyserPingInfo.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.Collection;
 
 @Data
+@JsonIgnoreProperties(ignoreUnknown = true)
 public class GeyserPingInfo {
 
     private String description;

File: connector/src/main/java/org/geysermc/connector/command/CommandManager.java
Patch:
@@ -51,6 +51,7 @@ public CommandManager(GeyserConnector connector) {
         registerCommand(new StopCommand(connector, "stop", LanguageUtils.getLocaleStringLog("geyser.commands.stop.desc"), "geyser.command.stop"));
         registerCommand(new OffhandCommand(connector, "offhand", LanguageUtils.getLocaleStringLog("geyser.commands.offhand.desc"), "geyser.command.offhand"));
         registerCommand(new DumpCommand(connector, "dump", LanguageUtils.getLocaleStringLog("geyser.commands.dump.desc"), "geyser.command.dump"));
+        registerCommand(new VersionCommand(connector, "version", LanguageUtils.getLocaleStringLog("geyser.commands.version.desc"), "geyser.command.version"));
     }
 
     public void registerCommand(GeyserCommand command) {

File: connector/src/main/java/org/geysermc/connector/utils/LanguageUtils.java
Patch:
@@ -75,8 +75,8 @@ public static void loadGeyserLocale(String locale) {
             // Insert the locale into the mappings
             LOCALE_MAPPINGS.put(locale, localeProp);
         } else {
-            if (!locale.toLowerCase().equals(getDefaultLocale().toLowerCase())) { // The default locale was invalid fallback to en_us
-                GeyserConnector.getInstance().getLogger().warning(getLocaleStringLog("geyser.language.missing_file", locale));
+            if (GeyserConnector.getInstance() != null && GeyserConnector.getInstance().getLogger() != null) {
+                GeyserConnector.getInstance().getLogger().warning("Missing locale: " + locale);
             }
         }
     }

File: bootstrap/standalone/src/main/java/org/geysermc/platform/standalone/gui/GeyserStandaloneGUI.java
Patch:
@@ -254,6 +254,7 @@ public void write(byte[] b) {
      */
     public void setupInterface(GeyserStandaloneLogger geyserStandaloneLogger, GeyserCommandManager geyserCommandManager) {
         commandsMenu.removeAll();
+        optionsMenu.removeAll();
 
         for (Map.Entry<String, GeyserCommand> command : geyserCommandManager.getCommands().entrySet()) {
             // Remove the offhand command and any alias commands to prevent duplicates in the list

File: bootstrap/standalone/src/main/java/org/geysermc/platform/standalone/gui/GraphPanel.java
Patch:
@@ -43,9 +43,9 @@ public final class GraphPanel extends JPanel {
     private final static int labelPadding = 25;
     private final static int pointWidth = 4;
     private final static int numberYDivisions = 10;
-    private final static Color lineColor = new Color(44, 102, 230, 180);
-    private final static Color pointColor = new Color(100, 100, 100, 180);
-    private final static Color gridColor = new Color(200, 200, 200, 200);
+    private final static Color lineColor = new Color(44, 102, 230, 255);
+    private final static Color pointColor = new Color(100, 100, 100, 255);
+    private final static Color gridColor = new Color(200, 200, 200, 255);
     private static final Stroke graphStroke = new BasicStroke(2f);
     private List<Integer> values = new ArrayList<>(10);
 

File: connector/src/main/java/org/geysermc/connector/entity/ItemFrameEntity.java
Patch:
@@ -150,7 +150,7 @@ public boolean despawnEntity(GeyserSession session) {
         updateBlockPacket.setBlockPosition(bedrockPosition);
         updateBlockPacket.setRuntimeId(0);
         updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.PRIORITY);
-        updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.NO_GRAPHIC); //TODO: Used to be NONE
+        updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.NETWORK);
         updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.NEIGHBORS);
         session.sendUpstreamPacket(updateBlockPacket);
         session.getItemFrameCache().remove(position, entityId);
@@ -178,7 +178,7 @@ public void updateBlock(GeyserSession session) {
         updateBlockPacket.setBlockPosition(bedrockPosition);
         updateBlockPacket.setRuntimeId(bedrockRuntimeId);
         updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.PRIORITY);
-        updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.NO_GRAPHIC); //TODO Same
+        updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.NETWORK);
         updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.NEIGHBORS);
         session.sendUpstreamPacket(updateBlockPacket);
 

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/BlockStateValues.java
Patch:
@@ -76,7 +76,7 @@ public static void storeBlockStateValues(Map.Entry<String, JsonNode> entry, int
             return;
         }
 
-        if (entry.getKey().contains("potted_")) {
+        if (entry.getKey().contains("potted_") || entry.getKey().contains("flower_pot")) {
             FLOWER_POT_VALUES.put(javaBlockState, entry.getKey().replace("potted_", ""));
             return;
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/entity/FlowerPotBlockEntityTranslator.java
Patch:
@@ -49,10 +49,11 @@ public void updateBlock(GeyserSession session, int blockState, Vector3i position
         updateBlockPacket.setDataLayer(0);
         updateBlockPacket.setRuntimeId(BlockTranslator.getBedrockBlockId(blockState));
         updateBlockPacket.setBlockPosition(position);
-        updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.PRIORITY);
-        updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.NO_GRAPHIC); //TODO: Check
         updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.NEIGHBORS);
+        updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.NETWORK);
+        updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.PRIORITY);
         session.sendUpstreamPacket(updateBlockPacket);
+        BlockEntityUtils.updateBlockEntity(session, getTag(blockState, position), position);
     }
 
     /**

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntitySetPassengersTranslator.java
Patch:
@@ -101,6 +101,9 @@ public void translate(ServerEntitySetPassengersPacket packet, GeyserSession sess
 
                 this.updateOffset(passenger, entity.getEntityType(), session, false, false, (passengers.size() > 1));
             }
+
+            // Force an update to the passenger metadata
+            passenger.updateBedrockMetadata(session);
         }
 
         if (entity.getEntityType() == EntityType.HORSE) {

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/action/InventoryActionDataTranslator.java
Patch:
@@ -120,9 +120,9 @@ public static void translate(InventoryTranslator translator, GeyserSession sessi
                                 session.sendDownstreamPacket(dropPacket);
                             }
                         }
-                        ItemStack item = session.getInventory().getItem(javaSlot);
+                        ItemStack item = inventory.getItem(javaSlot);
                         if (item != null) {
-                            session.getInventory().setItem(javaSlot, new ItemStack(item.getId(), item.getAmount() - dropAmount, item.getNbt()));
+                            inventory.setItem(javaSlot, new ItemStack(item.getId(), item.getAmount() - dropAmount, item.getNbt()));
                         }
                         return;
                     } else { //clicking outside of inventory

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaRespawnTranslator.java
Patch:
@@ -25,19 +25,18 @@
 
 package org.geysermc.connector.network.translators.java;
 
+import com.github.steveice10.mc.protocol.packet.ingame.server.ServerRespawnPacket;
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.data.LevelEventType;
 import com.nukkitx.protocol.bedrock.packet.LevelEventPacket;
+import com.nukkitx.protocol.bedrock.packet.SetPlayerGameTypePacket;
 import org.geysermc.connector.entity.Entity;
 import org.geysermc.connector.entity.attribute.AttributeType;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;
 import org.geysermc.connector.utils.DimensionUtils;
 
-import com.github.steveice10.mc.protocol.packet.ingame.server.ServerRespawnPacket;
-import com.nukkitx.protocol.bedrock.packet.SetPlayerGameTypePacket;
-
 import java.util.concurrent.ThreadLocalRandom;
 
 @Translator(packet = ServerRespawnPacket.class)

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/StriderEntity.java
Patch:
@@ -38,12 +38,14 @@ public StriderEntity(long entityId, long geyserId, EntityType entityType, Vector
         super(entityId, geyserId, entityType, position, motion, rotation);
 
         metadata.getFlags().setFlag(EntityFlag.FIRE_IMMUNE, true);
+        metadata.getFlags().setFlag(EntityFlag.BREATHING, true);
     }
 
     @Override
     public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession session) {
         if (entityMetadata.getId() == 17) {
-            metadata.getFlags().setFlag(EntityFlag.ALWAYS_SHOW_NAME, (boolean) entityMetadata.getValue());
+            metadata.getFlags().setFlag(EntityFlag.BREATHING, !(boolean) entityMetadata.getValue());
+            metadata.getFlags().setFlag(EntityFlag.SHAKING, (boolean) entityMetadata.getValue());
         }
         if (entityMetadata.getId() == 18) {
             metadata.getFlags().setFlag(EntityFlag.SADDLED, (boolean) entityMetadata.getValue());

File: connector/src/main/java/org/geysermc/connector/entity/Entity.java
Patch:
@@ -260,7 +260,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
             case 0:
                 if (entityMetadata.getType() == MetadataType.BYTE) {
                     byte xd = (byte) entityMetadata.getValue();
-                    metadata.getFlags().setFlag(EntityFlag.ON_FIRE, (xd & 0x01) == 0x01);
+                    metadata.getFlags().setFlag(EntityFlag.ON_FIRE, ((xd & 0x01) == 0x01) && !metadata.getFlags().getFlag(EntityFlag.FIRE_IMMUNE)); // Otherwise immune entities sometimes flicker onfire
                     metadata.getFlags().setFlag(EntityFlag.SNEAKING, (xd & 0x02) == 0x02);
                     metadata.getFlags().setFlag(EntityFlag.SPRINTING, (xd & 0x08) == 0x08);
                     metadata.getFlags().setFlag(EntityFlag.SWIMMING, ((xd & 0x10) == 0x10) && metadata.getFlags().getFlag(EntityFlag.SPRINTING)); // Otherwise swimming is enabled on older servers

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/StriderEntity.java
Patch:
@@ -36,6 +36,8 @@ public class StriderEntity extends AnimalEntity {
 
     public StriderEntity(long entityId, long geyserId, EntityType entityType, Vector3f position, Vector3f motion, Vector3f rotation) {
         super(entityId, geyserId, entityType, position, motion, rotation);
+
+        metadata.getFlags().setFlag(EntityFlag.FIRE_IMMUNE, true);
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -68,7 +68,7 @@ public enum EntityType {
     CREEPER(CreeperEntity.class, 33, 1.7f, 0.6f, 0.6f, 1.62f),
     SKELETON(AbstractSkeletonEntity.class, 34, 1.8f, 0.6f, 0.6f, 1.62f),
     SPIDER(SpiderEntity.class, 35, 0.9f, 1.4f, 1.4f, 1f),
-    ZOMBIFIED_PIGLIN(ZombieEntity.class, 36, 1.95f, 0.6f, 0.6f, 1.62f, "minecraft:zombie_pigman"),
+    ZOMBIFIED_PIGLIN(ZombifiedPiglinEntity.class, 36, 1.95f, 0.6f, 0.6f, 1.62f, "minecraft:zombie_pigman"),
     SLIME(SlimeEntity.class, 37, 0.51f),
     ENDERMAN(EndermanEntity.class, 38, 2.9f, 0.6f),
     SILVERFISH(MonsterEntity.class, 39, 0.3f, 0.4f),

File: connector/src/main/java/org/geysermc/connector/network/translators/item/translators/nbt/EnchantmentTranslator.java
Patch:
@@ -114,7 +114,7 @@ public void translateToJava(CompoundTag itemTag, ItemEntry itemEntry) {
             itemTag.put(new ListTag("Enchantments", enchantments));
         }
         if (!storedEnchantments.isEmpty()) {
-            itemTag.put(new ListTag("StoredEnchantments", enchantments));
+            itemTag.put(new ListTag("StoredEnchantments", storedEnchantments));
         }
         itemTag.remove("ench");
     }

File: connector/src/main/java/org/geysermc/connector/utils/ChunkUtils.java
Patch:
@@ -211,6 +211,7 @@ public static void updateBlock(GeyserSession session, int blockState, Vector3i p
         updateBlockPacket.setBlockPosition(position);
         updateBlockPacket.setRuntimeId(blockId);
         updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.NEIGHBORS);
+        updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.NETWORK);
         session.sendUpstreamPacket(updateBlockPacket);
 
         UpdateBlockPacket waterPacket = new UpdateBlockPacket();

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/StriderEntity.java
Patch:
@@ -40,7 +40,6 @@ public StriderEntity(long entityId, long geyserId, EntityType entityType, Vector
 
     @Override
     public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession session) {
-
         if (entityMetadata.getId() == 18) {
             metadata.getFlags().setFlag(EntityFlag.SADDLED, (boolean) entityMetadata.getValue());
         }

File: connector/src/main/java/org/geysermc/connector/utils/SkinUtils.java
Patch:
@@ -96,6 +96,7 @@ public static PlayerListPacket.Entry buildEntryManually(UUID uuid, String userna
         entry.setXuid("");
         entry.setPlatformChatId("");
         entry.setTeacher(false);
+        entry.setTrustedSkin(true);
         return entry;
     }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaDeclareRecipesTranslator.java
Patch:
@@ -119,7 +119,7 @@ private ItemData[][] combinations(GeyserSession session, Ingredient[] ingredient
                     if (entry.getValue().size() < idCount) {
                         optionSet.addAll(entry.getValue());
                     } else {
-                        optionSet.add(ItemData.of(groupedItem.id, (short) -1, groupedItem.count, groupedItem.tag));
+                        optionSet.add(ItemData.of(groupedItem.id, Short.MAX_VALUE, groupedItem.count, groupedItem.tag));
                     }
                 } else {
                     ItemData item = entry.getValue().get(0);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaChatTranslator.java
Patch:
@@ -65,14 +65,14 @@ public void translate(ServerChatPacket packet, GeyserSession session) {
             textPacket.setType(TextPacket.Type.TRANSLATION);
             textPacket.setNeedsTranslation(true);
 
-            List<String> paramsTranslated = MessageUtils.getTranslationParams(((TranslationMessage) packet.getMessage()).getWith(), locale);
+            List<String> paramsTranslated = MessageUtils.getTranslationParams(((TranslationMessage) packet.getMessage()).getWith(), locale, packet.getMessage());
             textPacket.setParameters(paramsTranslated);
 
-            textPacket.setMessage(MessageUtils.insertParams(MessageUtils.getTranslatedBedrockMessage(packet.getMessage(), locale, true), paramsTranslated));
+            textPacket.setMessage(MessageUtils.insertParams(MessageUtils.getTranslatedBedrockMessage(packet.getMessage(), locale, true, packet.getMessage()), paramsTranslated));
         } else {
             textPacket.setNeedsTranslation(false);
 
-            textPacket.setMessage(MessageUtils.getTranslatedBedrockMessage(packet.getMessage(), locale, false));
+            textPacket.setMessage(MessageUtils.getTranslatedBedrockMessage(packet.getMessage(), locale, false, packet.getMessage()));
         }
 
         session.sendUpstreamPacket(textPacket);

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -226,7 +226,7 @@ public void connect(RemoteServer remoteServer) {
 
         CreativeContentPacket creativePacket = new CreativeContentPacket();
         for (int i = 0; i < ItemRegistry.CREATIVE_ITEMS.length; i++) {
-            creativePacket.getEntries().put(i, ItemRegistry.CREATIVE_ITEMS[i]);
+            creativePacket.getEntries().put(i + 1, ItemRegistry.CREATIVE_ITEMS[i]);
         }
         upstream.sendPacket(creativePacket);
 

File: connector/src/main/java/org/geysermc/connector/command/CommandManager.java
Patch:
@@ -49,6 +49,7 @@ public CommandManager(GeyserConnector connector) {
         registerCommand(new ReloadCommand(connector, "reload", "Reloads the Geyser configurations. Kicks all players when used!", "geyser.command.reload"));
         registerCommand(new StopCommand(connector, "stop", "Shuts down Geyser.", "geyser.command.stop"));
         registerCommand(new OffhandCommand(connector, "offhand", "Puts an items in your offhand.", "geyser.command.offhand"));
+        registerCommand(new DumpCommand(connector, "dump", "Dumps Geyser debug infomation for bug reports.", "geyser.command.dump"));
     }
 
     public void registerCommand(GeyserCommand command) {

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockContainerCloseTranslator.java
Patch:
@@ -54,5 +54,8 @@ public void translate(ContainerClosePacket packet, GeyserSession session) {
             session.getDownstream().getSession().send(closeWindowPacket);
             InventoryUtils.closeInventory(session, windowId);
         }
+
+        //Client wants close confirmation
+        session.sendUpstreamPacket(packet);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/PlayerInventoryTranslator.java
Patch:
@@ -159,10 +159,10 @@ public int bedrockSlotToJava(InventoryActionData action) {
             case ContainerId.UI:
                 if (slotnum >= 28 && 31 >= slotnum) {
                     return slotnum - 27;
-                } else if (slotnum == 50) {
-                    return 0;
                 }
                 break;
+            case ContainerId.CRAFTING_RESULT:
+                return 0;
         }
         return slotnum;
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/action/InventoryActionDataTranslator.java
Patch:
@@ -55,7 +55,7 @@ public static void translate(InventoryTranslator translator, GeyserSession sessi
         InventoryActionData containerAction = null;
         boolean refresh = false;
         for (InventoryActionData action : actions) {
-            if (action.getSource().getContainerId() == ContainerId.CRAFTING_USE_INGREDIENT || action.getSource().getContainerId() == ContainerId.CRAFTING_RESULT) {
+            if (action.getSource().getContainerId() == ContainerId.CRAFTING_USE_INGREDIENT) {
                 return;
             } else if (action.getSource().getType() == InventorySource.Type.WORLD_INTERACTION) {
                 worldAction = action;

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -68,7 +68,7 @@ public enum EntityType {
     CREEPER(CreeperEntity.class, 33, 1.7f, 0.6f, 0.6f, 1.62f),
     SKELETON(AbstractSkeletonEntity.class, 34, 1.8f, 0.6f, 0.6f, 1.62f),
     SPIDER(SpiderEntity.class, 35, 0.9f, 1.4f, 1.4f, 1f),
-    ZOMBIFIED_PIGLIN(MonsterEntity.class, 36, 1.8f, 0.6f, 0.6f, 1.62f),
+    ZOMBIFIED_PIGLIN(MonsterEntity.class, 0, 1.8f, 0.6f, 0.6f, 1.62f, "minecraft:zombie_pigman"),
     SLIME(SlimeEntity.class, 37, 0.51f),
     ENDERMAN(EndermanEntity.class, 38, 2.9f, 0.6f),
     SILVERFISH(MonsterEntity.class, 39, 0.3f, 0.4f),

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaRespawnTranslator.java
Patch:
@@ -70,7 +70,7 @@ public void translate(ServerRespawnPacket packet, GeyserSession session) {
             DimensionUtils.switchDimension(session, packet.getDimension());
         } else {
             if (session.isManyDimPackets()) { //reloading world
-                String fakeDim = entity.getDimension().equals("minecraft:overworld") ? "minecraft:nether" : "minecraft:overworld";
+                String fakeDim = entity.getDimension().equals(DimensionUtils.OVERWORLD) ? DimensionUtils.NETHER : DimensionUtils.OVERWORLD;
                 DimensionUtils.switchDimension(session, fakeDim);
                 DimensionUtils.switchDimension(session, packet.getDimension());
             } else {

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/AnvilInventoryTranslator.java
Patch:
@@ -26,8 +26,8 @@
 package org.geysermc.connector.network.translators.inventory;
 
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.ItemStack;
-import com.github.steveice10.mc.protocol.data.message.Message;
 import com.github.steveice10.mc.protocol.data.message.MessageSerializer;
+import com.github.steveice10.mc.protocol.data.message.TextMessage;
 import com.github.steveice10.mc.protocol.packet.ingame.client.window.ClientRenameItemPacket;
 import com.github.steveice10.opennbt.tag.builtin.CompoundTag;
 import com.nukkitx.protocol.bedrock.data.ContainerId;
@@ -130,8 +130,8 @@ public void updateSlot(GeyserSession session, Inventory inventory, int slot) {
                     CompoundTag displayTag = tag.get("display");
                     if (displayTag != null) {
                         String itemName = displayTag.get("Name").getValue().toString();
-                        Message message = MessageSerializer.fromString(itemName);
-                        rename = message.toString();
+                        TextMessage message = (TextMessage) MessageSerializer.fromString(itemName);
+                        rename = message.getText();
                     } else {
                         rename = "";
                     }

File: connector/src/main/java/org/geysermc/connector/ping/GeyserLegacyPingPassthrough.java
Patch:
@@ -29,6 +29,7 @@
 import com.github.steveice10.mc.protocol.MinecraftConstants;
 import com.github.steveice10.mc.protocol.MinecraftProtocol;
 import com.github.steveice10.mc.protocol.data.SubProtocol;
+import com.github.steveice10.mc.protocol.data.message.TextMessage;
 import com.github.steveice10.mc.protocol.data.status.handler.ServerInfoHandler;
 import com.github.steveice10.packetlib.Client;
 import com.github.steveice10.packetlib.tcp.TcpSessionFactory;
@@ -77,7 +78,7 @@ public void run() {
         try {
             this.client = new Client(connector.getConfig().getRemote().getAddress(), connector.getConfig().getRemote().getPort(), new MinecraftProtocol(SubProtocol.STATUS), new TcpSessionFactory());
             this.client.getSession().setFlag(MinecraftConstants.SERVER_INFO_HANDLER_KEY, (ServerInfoHandler) (session, info) -> {
-                this.pingInfo = new GeyserPingInfo(info.getDescription().toString(), info.getPlayerInfo().getOnlinePlayers(), info.getPlayerInfo().getMaxPlayers());
+                this.pingInfo = new GeyserPingInfo(((TextMessage) info.getDescription()).getText(), info.getPlayerInfo().getOnlinePlayers(), info.getPlayerInfo().getMaxPlayers());
                 this.client.getSession().disconnect(null);
             });
 

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -31,6 +31,7 @@
 import com.nukkitx.protocol.bedrock.BedrockServer;
 import com.nukkitx.protocol.bedrock.v390.Bedrock_v390;
 import lombok.Getter;
+import lombok.Setter;
 import org.geysermc.common.AuthType;
 import org.geysermc.common.PlatformType;
 import org.geysermc.connector.bootstrap.GeyserBootstrap;
@@ -79,6 +80,7 @@ public class GeyserConnector {
     private static GeyserConnector instance;
 
     private RemoteServer remoteServer;
+    @Setter
     private AuthType authType;
 
     private boolean shuttingDown = false;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityTeleportTranslator.java
Patch:
@@ -44,6 +44,6 @@ public void translate(ServerEntityTeleportPacket packet, GeyserSession session)
         }
         if (entity == null) return;
 
-        entity.moveAbsolute(session, Vector3f.from(packet.getX(), packet.getY(), packet.getZ()), packet.getYaw(), packet.getPitch(), packet.isOnGround(), false);
+        entity.teleport(session, Vector3f.from(packet.getX(), packet.getY(), packet.getZ()), packet.getYaw(), packet.getPitch(), packet.isOnGround());
     }
 }

File: connector/src/main/java/org/geysermc/connector/command/CommandManager.java
Patch:
@@ -75,7 +75,7 @@ public void runCommand(CommandSender sender, String command) {
             args = new String[0];
         } else {
             label = command.substring(0, command.indexOf(" ")).toLowerCase();
-            String argLine = command.substring(command.indexOf(" " + 1));
+            String argLine = command.substring(command.indexOf(" ") + 1);
             args = argLine.contains(" ") ? argLine.split(" ") : new String[] { argLine };
         }
 

File: common/src/main/java/org/geysermc/common/window/button/FormImage.java
Patch:
@@ -32,14 +32,14 @@ public class FormImage {
 
     @Getter
     @Setter
-    private FormImageType type;
+    private String type;
 
     @Getter
     @Setter
     private String data;
 
     public FormImage(FormImageType type, String data) {
-        this.type = type;
+        this.type = type.getName();
         this.data = data;
     }
 

File: bootstrap/sponge/src/main/java/org/geysermc/platform/sponge/GeyserSpongeConfiguration.java
Patch:
@@ -29,7 +29,7 @@
 
 import ninja.leaping.configurate.ConfigurationNode;
 
-import org.geysermc.connector.GeyserConfiguration;
+import org.geysermc.connector.configuration.GeyserConfiguration;
 
 import java.io.File;
 import java.nio.file.Path;

File: bootstrap/sponge/src/main/java/org/geysermc/platform/sponge/GeyserSpongePlugin.java
Patch:
@@ -30,7 +30,7 @@
 import ninja.leaping.configurate.loader.ConfigurationLoader;
 import ninja.leaping.configurate.yaml.YAMLConfigurationLoader;
 import org.geysermc.common.PlatformType;
-import org.geysermc.connector.GeyserConfiguration;
+import org.geysermc.connector.configuration.GeyserConfiguration;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.bootstrap.GeyserBootstrap;
 import org.geysermc.connector.command.CommandManager;

File: bootstrap/standalone/src/main/java/org/geysermc/platform/standalone/GeyserStandaloneBootstrap.java
Patch:
@@ -26,12 +26,12 @@
 package org.geysermc.platform.standalone;
 
 import org.geysermc.common.PlatformType;
-import org.geysermc.connector.ping.GeyserLegacyPingPassthrough;
-import org.geysermc.connector.GeyserConfiguration;
-import org.geysermc.connector.bootstrap.GeyserBootstrap;
 import org.geysermc.connector.GeyserConnector;
+import org.geysermc.connector.bootstrap.GeyserBootstrap;
+import org.geysermc.connector.configuration.GeyserConfiguration;
 import org.geysermc.connector.command.CommandManager;
 import org.geysermc.connector.ping.IGeyserPingPassthrough;
+import org.geysermc.connector.ping.GeyserLegacyPingPassthrough;
 import org.geysermc.connector.utils.FileUtils;
 import org.geysermc.platform.standalone.command.GeyserCommandManager;
 

File: connector/src/main/java/org/geysermc/connector/FloodgateKeyLoader.java
Patch:
@@ -26,6 +26,8 @@
 
 package org.geysermc.connector;
 
+import org.geysermc.connector.configuration.GeyserConfiguration;
+
 import java.nio.file.Files;
 import java.nio.file.Path;
 

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -35,6 +35,7 @@
 import org.geysermc.common.PlatformType;
 import org.geysermc.connector.bootstrap.GeyserBootstrap;
 import org.geysermc.connector.command.CommandManager;
+import org.geysermc.connector.configuration.GeyserConfiguration;
 import org.geysermc.connector.metrics.Metrics;
 import org.geysermc.connector.network.ConnectorServerEventHandler;
 import org.geysermc.connector.network.remote.RemoteServer;

File: connector/src/main/java/org/geysermc/connector/bootstrap/GeyserBootstrap.java
Patch:
@@ -27,7 +27,7 @@
 package org.geysermc.connector.bootstrap;
 
 import org.geysermc.connector.ping.IGeyserPingPassthrough;
-import org.geysermc.connector.GeyserConfiguration;
+import org.geysermc.connector.configuration.GeyserConfiguration;
 import org.geysermc.connector.GeyserLogger;
 import org.geysermc.connector.command.CommandManager;
 import org.geysermc.connector.network.translators.world.CachedChunkManager;

File: connector/src/main/java/org/geysermc/connector/configuration/GeyserConfiguration.java
Patch:
@@ -24,7 +24,9 @@
  *
  */
 
-package org.geysermc.connector;
+package org.geysermc.connector.configuration;
+
+import org.geysermc.connector.GeyserLogger;
 
 import java.nio.file.Path;
 import java.util.Map;

File: connector/src/main/java/org/geysermc/connector/network/ConnectorServerEventHandler.java
Patch:
@@ -31,7 +31,7 @@
 import io.netty.channel.socket.DatagramPacket;
 import org.geysermc.common.ping.GeyserPingInfo;
 import org.geysermc.connector.ping.IGeyserPingPassthrough;
-import org.geysermc.connector.GeyserConfiguration;
+import org.geysermc.connector.configuration.GeyserConfiguration;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.utils.MessageUtils;

File: connector/src/main/java/org/geysermc/connector/network/UpstreamPacketHandler.java
Patch:
@@ -28,7 +28,7 @@
 import com.nukkitx.protocol.bedrock.BedrockPacket;
 import com.nukkitx.protocol.bedrock.packet.*;
 import org.geysermc.common.AuthType;
-import org.geysermc.connector.GeyserConfiguration;
+import org.geysermc.connector.configuration.GeyserConfiguration;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslatorRegistry;

File: connector/src/main/java/org/geysermc/connector/ping/GeyserLegacyPingPassthrough.java
Patch:
@@ -33,9 +33,7 @@
 import com.github.steveice10.packetlib.Client;
 import com.github.steveice10.packetlib.tcp.TcpSessionFactory;
 import org.geysermc.common.ping.GeyserPingInfo;
-import org.geysermc.connector.GeyserConfiguration;
 import org.geysermc.connector.GeyserConnector;
-import org.geysermc.connector.GeyserLogger;
 
 import java.util.concurrent.TimeUnit;
 

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockContainerCloseTranslator.java
Patch:
@@ -53,8 +53,6 @@ public void translate(ContainerClosePacket packet, GeyserSession session) {
             ClientCloseWindowPacket closeWindowPacket = new ClientCloseWindowPacket(windowId);
             session.getDownstream().getSession().send(closeWindowPacket);
             InventoryUtils.closeInventory(session, windowId);
-        } else if (openInventory != null && openInventory.getId() != windowId) {
-            InventoryUtils.openInventory(session, openInventory);
         }
     }
 }

File: connector/src/main/java/org/geysermc/connector/entity/Entity.java
Patch:
@@ -214,9 +214,8 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
                     metadata.getFlags().setFlag(EntityFlag.GLIDING, (xd & 0x80) == 0x80);
 
                     if ((xd & 0x20) == 0x20) {
-                        if (this.is(ArmorStandEntity.class)) {
-                            metadata.put(EntityData.SCALE, 0.0f);
-                        } else {
+                        // Armour stands are handled in their own class
+                        if (!this.is(ArmorStandEntity.class)) {
                             metadata.getFlags().setFlag(EntityFlag.INVISIBLE, true);
                         }
                     } else {

File: connector/src/main/java/org/geysermc/connector/entity/MinecartEntity.java
Patch:
@@ -55,7 +55,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
             metadata.put(EntityData.HURT_TIME, Math.min((int) (float) entityMetadata.getValue(), 15));
         }
 
-        if (!(this instanceof FurnaceMinecartEntity)) { // Handled in FurnaceMinecartEntity.java
+        if (!(this instanceof DefaultBlockMinecartEntity)) { // Handled in the DefaultBlockMinecartEntity class
             // Custom block
             if (entityMetadata.getId() == 10) {
                 metadata.put(EntityData.DISPLAY_ITEM, BlockTranslator.getBedrockBlockId((int) entityMetadata.getValue()));

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -134,11 +134,12 @@ public enum EntityType {
     MINECART_TNT(MinecartEntity.class, 97, 0.7f, 0.98f, 0.98f, 0.35f, "minecraft:tnt_minecart"),
     MINECART_CHEST(MinecartEntity.class, 98, 0.7f, 0.98f, 0.98f, 0.35f, "minecraft:chest_minecart"),
     MINECART_FURNACE(FurnaceMinecartEntity.class, 98, 0.7f, 0.98f, 0.98f, 0.35f, "minecraft:minecart"),
+    MINECART_SPAWNER(SpawnerMinecartEntity.class, 98, 0.7f, 0.98f, 0.98f, 0.35f, "minecraft:minecart"),
     MINECART_COMMAND_BLOCK(MinecartEntity.class, 100, 0.7f, 0.98f, 0.98f, 0.35f, "minecraft:command_block_minecart"),
     LINGERING_POTION(ThrowableEntity.class, 101, 0f),
     LLAMA_SPIT(Entity.class, 102, 0.25f),
-    EVOKER_FANGS(Entity.class, 103, 0.8f, 0.5f),
-    EVOKER(SpellcasterIllagerEntity.class, 104, 1.95f, 0.5f),
+    EVOKER_FANGS(Entity.class, 103, 0.8f, 0.5f, 0.5f, 0f, "minecraft:evocation_fang"),
+    EVOKER(SpellcasterIllagerEntity.class, 104, 1.95f, 0.6f, 0.6f, 0f, "minecraft:evocation_illager"),
     VEX(MonsterEntity.class, 105, 0.8f, 0.4f),
     ICE_BOMB(Entity.class, 106, 0f),
     BALLOON(Entity.class, 107, 0f), //TODO

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -166,6 +166,9 @@ public class GeyserSession implements CommandSender {
     @Setter
     private int craftSlot = 0;
 
+    @Setter
+    private long lastWindowCloseTime = 0;
+
     private MinecraftProtocol protocol;
 
     public GeyserSession(GeyserConnector connector, BedrockServerSession bedrockServerSession) {

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaSetSlotTranslator.java
Patch:
@@ -41,8 +41,6 @@ public class JavaSetSlotTranslator extends PacketTranslator<ServerSetSlotPacket>
     @Override
     public void translate(ServerSetSlotPacket packet, GeyserSession session) {
         if (packet.getWindowId() == 255 && packet.getSlot() == -1) { //cursor
-            if (Objects.equals(session.getInventory().getCursor(), packet.getItem()))
-                return;
             if (session.getCraftSlot() != 0)
                 return;
 

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -105,7 +105,7 @@ public enum EntityType {
     THROWN_EXP_BOTTLE(ThrowableEntity.class, 68, 0.25f, 0.25f, 0f, 0f, "minecraft:xp_bottle"),
     EXPERIENCE_ORB(ExpOrbEntity.class, 69, 0f, 0f, 0f, 0f, "minecraft:xp_orb"),
     EYE_OF_ENDER(Entity.class, 70, 0.25f, 0.25f, 0f, 0f, "minecraft:eye_of_ender_signal"),
-    END_CRYSTAL(EnderCrystalEntity.class, 71, 0f, 0f, 0f, 0f, "minecraft:ender_crystal"),
+    END_CRYSTAL(EnderCrystalEntity.class, 71, 2.0f, 2.0f, 2.0f, 0f, "minecraft:ender_crystal"),
     FIREWORK_ROCKET(FireworkEntity.class, 72, 0.25f, 0.25f, 0.25f, 0f, "minecraft:fireworks_rocket"),
     TRIDENT(TridentEntity.class, 73, 0f, 0f, 0f, 0f, "minecraft:thrown_trident"),
     TURTLE(AnimalEntity.class, 74, 0.4f, 1.2f),

File: common/src/main/java/org/geysermc/common/PlatformType.java
Patch:
@@ -7,8 +7,8 @@
 @AllArgsConstructor
 public enum PlatformType {
 
-    BUKKIT("Bukkit"),
     BUNGEECORD("BungeeCord"),
+    SPIGOT("Spigot"),
     SPONGE("Sponge"),
     STANDALONE("Standalone"),
     VELOCITY("Velocity");

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/GeyserSpigotLogger.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.platform.bukkit;
+package org.geysermc.platform.spigot;
 
 import lombok.AllArgsConstructor;
 
@@ -33,7 +33,7 @@
 import java.util.logging.Logger;
 
 @AllArgsConstructor
-public class GeyserBukkitLogger implements GeyserLogger {
+public class GeyserSpigotLogger implements GeyserLogger {
 
     private Logger logger;
     private boolean debugMode;

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/GeyserSpigotMain.java
Patch:
@@ -24,14 +24,14 @@
  *
  */
 
-package org.geysermc.platform.bukkit;
+package org.geysermc.platform.spigot;
 
 import org.geysermc.common.main.IGeyserMain;
 
-public class GeyserBukkitMain extends IGeyserMain {
+public class GeyserSpigotMain extends IGeyserMain {
 
     public static void main(String[] args) {
-        new GeyserBukkitMain().displayMessage();
+        new GeyserSpigotMain().displayMessage();
     }
 
     public String getPluginType() {

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/GeyserSpigotPingPassthrough.java
Patch:
@@ -24,7 +24,7 @@
  *
  */
 
-package org.geysermc.platform.bukkit;
+package org.geysermc.platform.spigot;
 
 import lombok.AllArgsConstructor;
 import org.bukkit.Bukkit;
@@ -39,9 +39,9 @@
 import java.util.Iterator;
 
 @AllArgsConstructor
-public class GeyserBukkitPingPassthrough implements IGeyserPingPassthrough {
+public class GeyserSpigotPingPassthrough implements IGeyserPingPassthrough {
 
-    private final GeyserBukkitLogger logger;
+    private final GeyserSpigotLogger logger;
 
     @Override
     public GeyserPingInfo getPingInformation() {

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/command/SpigotCommandSender.java
Patch:
@@ -23,15 +23,15 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.platform.bukkit.command;
+package org.geysermc.platform.spigot.command;
 
 import lombok.AllArgsConstructor;
 
 import org.bukkit.command.ConsoleCommandSender;
 import org.geysermc.connector.command.CommandSender;
 
 @AllArgsConstructor
-public class BukkitCommandSender implements CommandSender {
+public class SpigotCommandSender implements CommandSender {
 
     private org.bukkit.command.CommandSender handle;
 

File: bootstrap/spigot/src/main/java/org/geysermc/platform/spigot/world/GeyserSpigotBlockPlaceListener.java
Patch:
@@ -24,7 +24,7 @@
  *
  */
 
-package org.geysermc.platform.bukkit.world;
+package org.geysermc.platform.spigot.world;
 
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.data.SoundEvent;
@@ -39,7 +39,7 @@
 import org.geysermc.connector.network.translators.world.block.BlockTranslator;
 
 @AllArgsConstructor
-public class GeyserBukkitBlockPlaceListener implements Listener {
+public class GeyserSpigotBlockPlaceListener implements Listener {
 
     private final GeyserConnector connector;
     private final boolean isLegacy;
@@ -55,7 +55,7 @@ public void place(final BlockPlaceEvent event) {
                 placeBlockSoundPacket.setBabySound(false);
                 String javaBlockId;
                 if (isLegacy) {
-                    javaBlockId = BlockTranslator.getJavaIdBlockMap().inverse().get(GeyserBukkitWorldManager.getLegacyBlock(session,
+                    javaBlockId = BlockTranslator.getJavaIdBlockMap().inverse().get(GeyserSpigotWorldManager.getLegacyBlock(session,
                             event.getBlockPlaced().getX(), event.getBlockPlaced().getY(), event.getBlockPlaced().getZ(), isViaVersion));
                 } else {
                     javaBlockId = event.getBlockPlaced().getBlockData().getAsString();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaBlockChangeTranslator.java
Patch:
@@ -47,7 +47,7 @@ public void translate(ServerBlockChangePacket packet, GeyserSession session) {
         Position pos = packet.getRecord().getPosition();
         boolean updatePlacement = !(session.getConnector().getConfig().isCacheChunks() && session.getConnector().getWorldManager().getBlockAt(session, pos.getX(), pos.getY(), pos.getZ()).getId() == packet.getRecord().getBlock().getId());
         ChunkUtils.updateBlock(session, packet.getRecord().getBlock(), packet.getRecord().getPosition());
-        if (updatePlacement && session.getConnector().getPlatformType() != PlatformType.BUKKIT) {
+        if (updatePlacement && session.getConnector().getPlatformType() != PlatformType.SPIGOT) {
             this.checkPlace(session, packet);
         }
         this.checkInteract(session, packet);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerPositionRotationTranslator.java
Patch:
@@ -54,7 +54,7 @@ public void translate(ServerPlayerPositionRotationPacket packet, GeyserSession s
             return;
 
         if (!session.isSpawned()) {
-            Vector3f pos = Vector3f.from(packet.getX(), packet.getY() + EntityType.PLAYER.getOffset() + 0.1f, packet.getZ());
+            Vector3f pos = Vector3f.from(packet.getX(), packet.getY(), packet.getZ());
             entity.setPosition(pos);
             entity.setRotation(Vector3f.from(packet.getYaw(), packet.getPitch(), packet.getYaw()));
 

File: connector/src/main/java/org/geysermc/connector/network/translators/item/translators/nbt/BookPagesTranslator.java
Patch:
@@ -55,7 +55,7 @@ public void translateToBedrock(CompoundTag itemTag, ItemEntry itemEntry) {
 
             CompoundTag pageTag = new CompoundTag("");
             pageTag.put(new StringTag("photoname", ""));
-            pageTag.put(new StringTag("text", MessageUtils.getBedrockMessage(textTag.getValue())));
+            pageTag.put(new StringTag("text", MessageUtils.getBedrockMessageLenient(textTag.getValue())));
             pages.add(pageTag);
         }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockInventoryTransactionTranslator.java
Patch:
@@ -25,6 +25,7 @@
 
 package org.geysermc.connector.network.translators.bedrock;
 
+import com.github.steveice10.mc.protocol.data.game.entity.metadata.ItemStack;
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.Position;
 import com.github.steveice10.mc.protocol.data.game.entity.player.GameMode;
 import com.github.steveice10.mc.protocol.data.game.entity.player.Hand;
@@ -134,7 +135,8 @@ public void translate(InventoryTransactionPacket packet, GeyserSession session)
                         session.setInteracting(true);
                         break;
                     case 1:
-                        if (session.getInventory().getItem(session.getInventory().getHeldItemSlot() + 36).getId() == ItemTranslator.SHIELD) {
+                        ItemStack shieldSlot = session.getInventory().getItem(session.getInventory().getHeldItemSlot() + 36);
+                        if (shieldSlot != null && shieldSlot.getId() == ItemTranslator.SHIELD) {
                             break;
                         } // Handled in Entity.java
                         ClientPlayerUseItemPacket useItemPacket = new ClientPlayerUseItemPacket(Hand.MAIN_HAND);

File: connector/src/main/java/org/geysermc/connector/entity/PaintingEntity.java
Patch:
@@ -67,7 +67,7 @@ public Vector3f fixOffset(boolean toBedrock) {
             Vector3f position = super.position;
             position = position.add(0.5, 0.5, 0.5);
             double widthOffset = paintingName.getWidth() > 1 ? 0.5 : 0;
-            double heightOffset = paintingName.getHeight() > 1 ? 0.5 : 0;
+            double heightOffset = paintingName.getHeight() > 1 && paintingName.getHeight() != 3 ? 0.5 : 0;
 
             switch (direction) {
                 case 0: return position.add(widthOffset, heightOffset, OFFSET);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntitySetPassengersTranslator.java
Patch:
@@ -137,6 +137,9 @@ private void updateOffset(Entity passenger, EntityType mountType, GeyserSession
             case PIG:
                 yOffset = 1.85001f;
                 break;
+            case ARMOR_STAND:
+                yOffset = 1.3f;
+                break;
         }
         Vector3f offset = Vector3f.from(0f, yOffset, 0f);
         if (rider) {

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockMovePlayerTranslator.java
Patch:
@@ -85,6 +85,7 @@ public void translate(MovePlayerPacket packet, GeyserSession session) {
         Vector3f rotation = Vector3f.from(packet.getRotation().getY(), packet.getRotation().getX(), packet.getRotation().getY());
         entity.setPosition(packet.getPosition().sub(0, EntityType.PLAYER.getOffset(), 0));
         entity.setRotation(rotation);
+        entity.setOnGround(packet.isOnGround());
 
         /*
         boolean colliding = false;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerActionAckTranslator.java
Patch:
@@ -79,7 +79,7 @@ public void translate(ServerPlayerActionAckPacket packet, GeyserSession session)
                     itemEntry = Translators.getItemTranslator().getItem(item);
                     nbtData = item.getNbt();
                 }
-                double breakTime = Math.ceil(BlockUtils.getBreakTime(blockHardness, packet.getNewState().getId(), itemEntry, nbtData, session.getPlayerEntity()) * 20);
+                double breakTime = Math.ceil(BlockUtils.getBreakTime(blockHardness, packet.getNewState().getId(), itemEntry, nbtData, session) * 20);
                 levelEvent.setData((int) (65535 / breakTime));
                 session.setBreakingBlock(packet.getNewState());
                 session.sendUpstreamPacket(levelEvent);

File: connector/src/main/java/org/geysermc/connector/entity/Entity.java
Patch:
@@ -44,7 +44,6 @@
 import com.nukkitx.protocol.bedrock.data.EntityFlags;
 import com.nukkitx.protocol.bedrock.packet.*;
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
-import it.unimi.dsi.fastutil.longs.LongSet;
 import lombok.Getter;
 import lombok.Setter;
 import org.geysermc.connector.entity.attribute.Attribute;
@@ -85,7 +84,7 @@ public class Entity {
 
     protected boolean valid;
 
-    protected LongSet passengers = new LongOpenHashSet();
+    protected LongOpenHashSet passengers = new LongOpenHashSet();
     protected Map<AttributeType, Attribute> attributes = new HashMap<>();
     protected EntityDataMap metadata = new EntityDataMap();
 

File: connector/src/main/java/org/geysermc/connector/entity/attribute/AttributeType.java
Patch:
@@ -38,6 +38,7 @@ public enum AttributeType {
     MOVEMENT_SPEED("generic.movementSpeed", "minecraft:movement", 0f, 1024f, 0.1f),
     FLYING_SPEED("generic.flyingSpeed", "minecraft:movement", 0.0f, 1024.0f, 0.4000000059604645f),
     ATTACK_DAMAGE("generic.attackDamage", "minecraft:attack_damage", 0f, 2048f, 1f),
+    HORSE_JUMP_STRENGTH("horse.jumpStrength", "minecraft:horse.jump_strength", 0.0f, 2.0f, 0.7f),
 
     // Java Attributes
     ARMOR("generic.armor", null, 0f, 30f, 0f),

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/horse/HorseEntity.java
Patch:
@@ -28,6 +28,7 @@
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.EntityMetadata;
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.data.EntityData;
+import com.nukkitx.protocol.bedrock.data.EntityFlag;
 import org.geysermc.connector.entity.type.EntityType;
 import org.geysermc.connector.network.session.GeyserSession;
 
@@ -41,8 +42,9 @@ public HorseEntity(long entityId, long geyserId, EntityType entityType, Vector3f
     public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession session) {
         if (entityMetadata.getId() == 18) {
             metadata.put(EntityData.VARIANT, (int) entityMetadata.getValue());
+            metadata.put(EntityData.MARK_VARIANT, (((int) entityMetadata.getValue()) >> 8) % 5);
         }
-
         super.updateBedrockMetadata(entityMetadata, session);
     }
+
 }
\ No newline at end of file

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemTranslator.java
Patch:
@@ -48,6 +48,8 @@ public class ItemTranslator {
 
     // Shield ID, used in Entity.java
     public static final int SHIELD = 829;
+    // Boat ID, used in BedrockInventoryTransactionTranslator.java
+    public static final int BOAT = 333;
 
     public void init() {
         Reflections ref = new Reflections("org.geysermc.connector.network.translators.item");

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityPropertiesTranslator.java
Patch:
@@ -67,6 +67,9 @@ public void translate(ServerEntityPropertiesPacket packet, GeyserSession session
                 case GENERIC_KNOCKBACK_RESISTANCE:
                     entity.getAttributes().put(AttributeType.KNOCKBACK_RESISTANCE, AttributeType.KNOCKBACK_RESISTANCE.getAttribute((float) AttributeUtils.calculateValue(attribute)));
                     break;
+                case HORSE_JUMP_STRENGTH:
+                    entity.getAttributes().put(AttributeType.HORSE_JUMP_STRENGTH, AttributeType.HORSE_JUMP_STRENGTH.getAttribute((float) AttributeUtils.calculateValue(attribute)));
+                    break;
             }
         }
 

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -106,7 +106,7 @@ public enum EntityType {
     EXPERIENCE_ORB(ExpOrbEntity.class, 69, 0f, 0f, 0f, 0f, "minecraft:xp_orb"),
     EYE_OF_ENDER(Entity.class, 70, 0.25f, 0.25f, 0f, 0f, "minecraft:eye_of_ender_signal"),
     END_CRYSTAL(EnderCrystalEntity.class, 71, 0f, 0f, 0f, 0f, "minecraft:ender_crystal"),
-    FIREWORK_ROCKET(FireworkEntity.class, 72, 0.25f),
+    FIREWORK_ROCKET(FireworkEntity.class, 72, 0.25f, 0.25f, 0.25f, 0f, "minecraft:fireworks_rocket"),
     TRIDENT(TridentEntity.class, 73, 0f, 0f, 0f, 0f, "minecraft:thrown_trident"),
     TURTLE(AnimalEntity.class, 74, 0.4f, 1.2f),
     CAT(CatEntity.class, 75, 0.35f, 0.3f),

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockInventoryTransactionTranslator.java
Patch:
@@ -132,6 +132,8 @@ public void translate(InventoryTransactionPacket packet, GeyserSession session)
                         } // Handled in Entity.java
                         ClientPlayerUseItemPacket useItemPacket = new ClientPlayerUseItemPacket(Hand.MAIN_HAND);
                         session.sendDownstreamPacket(useItemPacket);
+                        // Used for sleeping in beds
+                        session.setLastInteractionPosition(packet.getBlockPosition());
                         break;
                     case 2:
                         BlockState blockState = session.getConnector().getWorldManager().getBlockAt(session, packet.getBlockPosition().getX(), packet.getBlockPosition().getY(), packet.getBlockPosition().getZ());

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaBlockChangeTranslator.java
Patch:
@@ -103,7 +103,6 @@ private void checkInteract(GeyserSession session, ServerBlockChangePacket packet
         }
         String identifier = BlockTranslator.getJavaIdBlockMap().inverse().get(packet.getRecord().getBlock());
         session.setInteracting(false);
-        session.setLastInteractionPosition(null);
         BlockSoundInteractionHandler.handleBlockInteraction(session, lastInteractPos.toFloat(), identifier);
     }
 }

File: bootstrap/standalone/src/main/java/org/geysermc/platform/standalone/GeyserStandaloneConfiguration.java
Patch:
@@ -65,6 +65,9 @@ public class GeyserStandaloneConfiguration implements GeyserConfiguration {
     @JsonProperty("allow-third-party-capes")
     private boolean allowThirdPartyCapes;
 
+    @JsonProperty("allow-third-party-ears")
+    private boolean allowThirdPartyEars;
+
     @JsonProperty("default-locale")
     private String defaultLocale;
 

File: bootstrap/velocity/src/main/java/org/geysermc/platform/velocity/GeyserVelocityConfiguration.java
Patch:
@@ -70,6 +70,9 @@ public class GeyserVelocityConfiguration implements GeyserConfiguration {
     @JsonProperty("allow-third-party-capes")
     private boolean allowThirdPartyCapes;
 
+    @JsonProperty("allow-third-party-ears")
+    private boolean allowThirdPartyEars;
+
     @JsonProperty("default-locale")
     private String defaultLocale;
 

File: connector/src/main/java/org/geysermc/connector/GeyserConfiguration.java
Patch:
@@ -52,6 +52,8 @@ public interface GeyserConfiguration {
 
     boolean isAllowThirdPartyCapes();
 
+    boolean isAllowThirdPartyEars();
+
     String getDefaultLocale();
 
     Path getFloodgateKeyFile();

File: bootstrap/standalone/src/main/java/org/geysermc/platform/standalone/GeyserStandaloneConfiguration.java
Patch:
@@ -71,6 +71,9 @@ public class GeyserStandaloneConfiguration implements GeyserConfiguration {
     @JsonProperty("cache-chunks")
     private boolean cacheChunks;
 
+    @JsonProperty("above-bedrock-nether-building")
+    private boolean isAboveBedrockNetherBuilding;
+
     private MetricsInfo metrics;
 
     @Override

File: bootstrap/velocity/src/main/java/org/geysermc/platform/velocity/GeyserVelocityConfiguration.java
Patch:
@@ -76,6 +76,9 @@ public class GeyserVelocityConfiguration implements GeyserConfiguration {
     @JsonProperty("cache-chunks")
     private boolean cacheChunks;
 
+    @JsonProperty("above-bedrock-nether-building")
+    private boolean aboveBedrockNetherBuilding;
+
     private MetricsInfo metrics;
 
     private Path floodgateKey;

File: connector/src/main/java/org/geysermc/connector/GeyserConfiguration.java
Patch:
@@ -32,7 +32,7 @@
 public interface GeyserConfiguration {
 
     // Modify this when you update the config
-    int CURRENT_CONFIG_VERSION = 1;
+    int CURRENT_CONFIG_VERSION = 2;
 
     IBedrockConfiguration getBedrock();
 
@@ -56,6 +56,8 @@ public interface GeyserConfiguration {
 
     Path getFloodgateKeyFile();
 
+    boolean isAboveBedrockNetherBuilding();
+
     boolean isCacheChunks();
 
     IMetricsInfo getMetrics();

File: connector/src/main/java/org/geysermc/connector/entity/FishingHookEntity.java
Patch:
@@ -26,7 +26,7 @@
 package org.geysermc.connector.entity;
 
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.EntityMetadata;
-import com.github.steveice10.mc.protocol.data.game.entity.type.object.ProjectileData;
+import com.github.steveice10.mc.protocol.data.game.entity.object.ProjectileData;
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.data.EntityData;
 import org.geysermc.connector.GeyserConnector;

File: connector/src/main/java/org/geysermc/connector/entity/ItemFrameEntity.java
Patch:
@@ -27,7 +27,7 @@
 
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.EntityMetadata;
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.ItemStack;
-import com.github.steveice10.mc.protocol.data.game.entity.type.object.HangingDirection;
+import com.github.steveice10.mc.protocol.data.game.entity.object.HangingDirection;
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.math.vector.Vector3i;
 import com.nukkitx.nbt.CompoundTagBuilder;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityHeadLookTranslator.java
Patch:
@@ -50,7 +50,7 @@ public void translate(ServerEntityHeadLookPacket packet, GeyserSession session)
 
         entity.setRotation(Vector3f.from(entity.getRotation().getX(), entity.getRotation().getY(), packet.getHeadYaw()));
 
-        if (entity.getEntityType() != EntityType.PLAYER) {
+        if (entity.getEntityType() != EntityType.PLAYER && entity.getEntityType() != EntityType.PAINTING) {
             MoveEntityAbsolutePacket moveEntityAbsolutePacket = new MoveEntityAbsolutePacket();
             moveEntityAbsolutePacket.setRuntimeEntityId(entity.getGeyserId());
             moveEntityAbsolutePacket.setPosition(entity.getPosition());

File: bootstrap/bukkit/src/main/java/org/geysermc/platform/bukkit/GeyserBukkitPlugin.java
Patch:
@@ -56,7 +56,6 @@ public void onEnable() {
         saveDefaultConfig();
 
         this.geyserConfig = new GeyserBukkitConfiguration(getDataFolder(), getConfig());
-        GeyserConfiguration.checkGeyserConfiguration(geyserConfig, geyserLogger);
         if (geyserConfig.getMetrics().getUniqueId().equals("generateduuid")) {
             getConfig().set("metrics.uuid", UUID.randomUUID().toString());
             saveConfig();
@@ -72,6 +71,7 @@ public void onEnable() {
         saveConfig();
 
         this.geyserLogger = new GeyserBukkitLogger(getLogger(), geyserConfig.isDebugMode());
+        GeyserConfiguration.checkGeyserConfiguration(geyserConfig, geyserLogger);
 
         geyserConfig.loadFloodgate(this);
 

File: connector/src/main/java/org/geysermc/connector/network/UpstreamPacketHandler.java
Patch:
@@ -117,7 +117,6 @@ public boolean handle(SetLocalPlayerAsInitializedPacket packet) {
                 LoginEncryptionUtils.showLoginWindow(session);
             }
             // else we were able to log the user in
-            return true;
         }
         return translateAndDefault(packet);
     }

File: connector/src/main/java/org/geysermc/connector/utils/PaintingType.java
Patch:
@@ -57,7 +57,7 @@ public enum PaintingType {
     DONKEY_KONG("DonkeyKong", 4, 3),
     POINTER("Pointer", 4, 4),
     PIG_SCENE("Pigscene", 4, 4),
-    BURNING_SKULL("Flaming Skull", 4, 4); // burning skull on java edition, flaming skull on bedrock
+    BURNING_SKULL("BurningSkull", 4, 4);
 
     private static final PaintingType[] VALUES = values();
     private String bedrockName;

File: connector/src/main/java/org/geysermc/connector/entity/TippedArrowEntity.java
Patch:
@@ -28,9 +28,9 @@
 import com.nukkitx.math.vector.Vector3f;
 import org.geysermc.connector.entity.type.EntityType;
 
-public class ArrowEntity extends Entity {
+public class TippedArrowEntity extends AbstractArrowEntity {
 
-    public ArrowEntity(long entityId, long geyserId, EntityType entityType, Vector3f position, Vector3f motion, Vector3f rotation) {
+    public TippedArrowEntity(long entityId, long geyserId, EntityType entityType, Vector3f position, Vector3f motion, Vector3f rotation) {
         super(entityId, geyserId, entityType, position, motion, rotation);
     }
 }

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -107,14 +107,15 @@ public enum EntityType {
     EYE_OF_ENDER(Entity.class, 70, 0.25f, 0.25f, 0f, 0f, "minecraft:eye_of_ender_signal"),
     END_CRYSTAL(EnderCrystalEntity.class, 71, 0f, 0f, 0f, 0f, "minecraft:ender_crystal"),
     FIREWORK_ROCKET(FireworkEntity.class, 72, 0.25f),
-    TRIDENT(ArrowEntity.class, 73, 0f),
+    TRIDENT(TridentEntity.class, 73, 0f, 0f, 0f, 0f, "minecraft:thrown_trident"),
     TURTLE(AnimalEntity.class, 74, 0.4f, 1.2f),
     CAT(CatEntity.class, 75, 0.35f, 0.3f),
     SHULKER_BULLET(Entity.class, 76, 0.3125f),
     FISHING_BOBBER(FishingHookEntity.class, 77, 0f, 0f, 0f, 0f, "minecraft:fishing_hook"),
     CHALKBOARD(Entity.class, 78, 0f),
     DRAGON_FIREBALL(ItemedFireballEntity.class, 79, 1.0f),
-    ARROW(ArrowEntity.class, 80, 0.25f, 0.25f),
+    ARROW(TippedArrowEntity.class, 80, 0.25f, 0.25f),
+    SPECTRAL_ARROW(AbstractArrowEntity.class, 80, 0.25f, 0.25f, 0.25f, 0f, "minecraft:arrow"),
     SNOWBALL(ThrowableEntity.class, 81, 0.25f),
     EGG(ThrowableEntity.class, 82, 0.25f),
     PAINTING(PaintingEntity.class, 83, 0f),

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/MerchantInventoryTranslator.java
Patch:
@@ -93,7 +93,7 @@ public void openInventory(GeyserSession session, Inventory inventory) {
 
     @Override
     public void closeInventory(GeyserSession session, Inventory inventory) {
-        session.setLastInteractedVillagerEid(-1);
+        session.setVillagerTrades(null);
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/entity/living/monster/CreeperEntity.java
Patch:
@@ -39,8 +39,8 @@ public CreeperEntity(long entityId, long geyserId, EntityType entityType, Vector
 
     @Override
     public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession session) {
-        if (entityMetadata.getId() == 15 && (int) entityMetadata.getValue() > 0) {
-            metadata.getFlags().setFlag(EntityFlag.IGNITED, true);
+        if (entityMetadata.getId() == 15) {
+            metadata.getFlags().setFlag(EntityFlag.IGNITED, (int) entityMetadata.getValue() == 1);
         }
         if (entityMetadata.getId() == 16) {
             metadata.getFlags().setFlag(EntityFlag.POWERED, (boolean) entityMetadata.getValue());

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -64,6 +64,7 @@ public enum EntityType {
     PARROT(ParrotEntity.class, 30, 0.9f, 0.5f),
     DOLPHIN(WaterEntity.class, 31, 0.6f, 0.9f),
     ZOMBIE(ZombieEntity.class, 32, 1.8f, 0.6f, 0.6f, 1.62f),
+    GIANT(GiantEntity.class, 32, 1.8f, 0.6f, 0.6f, 1.62f, "minecraft:zombie"),
     CREEPER(CreeperEntity.class, 33, 1.7f, 0.6f, 0.6f, 1.62f),
     SKELETON(AbstractSkeletonEntity.class, 34, 1.8f, 0.6f, 0.6f, 1.62f),
     SPIDER(SpiderEntity.class, 35, 0.9f, 1.4f, 1.4f, 1f),
@@ -103,7 +104,7 @@ public enum EntityType {
     MOVING_BLOCK(Entity.class, 67, 0f),
     EXPERIENCE_BOTTLE(ThrowableEntity.class, 68, 0.25f, 0.25f, 0f, 0f, "minecraft:xp_bottle"),
     EXPERIENCE_ORB(ExpOrbEntity.class, 69, 0f, 0f, 0f, 0f, "minecraft:xp_orb"),
-    EYE_OF_ENDER(Entity.class, 70, 0.25f),
+    EYE_OF_ENDER(Entity.class, 70, 0.25f, 0.25f, 0f, 0f, "minecraft:eye_of_ender_signal"),
     END_CRYSTAL(EnderCrystalEntity.class, 71, 0f, 0f, 0f, 0f, "minecraft:ender_crystal"),
     FIREWORK_ROCKET(Entity.class, 72, 0.25f),
     TRIDENT(ArrowEntity.class, 73, 0f),

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaBossBarTranslator.java
Patch:
@@ -32,8 +32,6 @@
 
 import com.github.steveice10.mc.protocol.packet.ingame.server.ServerBossBarPacket;
 
-import java.awt.*;
-
 @Translator(packet = ServerBossBarPacket.class)
 public class JavaBossBarTranslator extends PacketTranslator<ServerBossBarPacket> {
     @Override

File: connector/src/main/java/org/geysermc/connector/network/translators/Translators.java
Patch:
@@ -159,6 +159,7 @@ private static void registerInventoryTranslators() {
         inventoryTranslators.put(WindowType.ANVIL, new AnvilInventoryTranslator());
         inventoryTranslators.put(WindowType.CRAFTING, new CraftingInventoryTranslator());
         inventoryTranslators.put(WindowType.GRINDSTONE, new GrindstoneInventoryTranslator());
+        inventoryTranslators.put(WindowType.MERCHANT, new MerchantInventoryTranslator());
         //inventoryTranslators.put(WindowType.ENCHANTMENT, new EnchantmentInventoryTranslator()); //TODO
 
         InventoryTranslator furnace = new FurnaceInventoryTranslator();

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -121,7 +121,7 @@ public enum EntityType {
     FIREBALL(ItemedFireballEntity.class, 85, 1.0f),
     POTION(ThrowableEntity.class, 86, 0.25f),
     ENDER_PEARL(ThrowableEntity.class, 87, 0.25f),
-    LEASH_KNOT(Entity.class, 88, 0.5f, 0.375f),
+    LEASH_KNOT(LeashKnotEntity.class, 88, 0.5f, 0.375f),
     WITHER_SKULL(Entity.class, 89, 0.3125f),
     BOAT(Entity.class, 90, 0.7f, 1.6f, 1.6f, 0.35f),
     WITHER_SKULL_DANGEROUS(Entity.class, 91, 0f),

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/updater/ChestInventoryUpdater.java
Patch:
@@ -48,7 +48,7 @@ public void updateInventory(InventoryTranslator translator, GeyserSession sessio
 
         ItemData[] bedrockItems = new ItemData[paddedSize];
         for (int i = 0; i < bedrockItems.length; i++) {
-            if (i <= translator.size) {
+            if (i < translator.size) {
                 bedrockItems[i] = Translators.getItemTranslator().translateToBedrock(session, inventory.getItem(i));
             } else {
                 bedrockItems[i] = UNUSUABLE_SPACE_BLOCK;

File: connector/src/main/java/org/geysermc/connector/entity/living/monster/GuardianEntity.java
Patch:
@@ -48,6 +48,8 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
 
             if (entity != null) {
                 metadata.put(EntityData.TARGET_EID, entity.getGeyserId());
+            } else {
+                metadata.put(EntityData.TARGET_EID, (long) 0);
             }
         }
 

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -341,7 +341,7 @@ public void packetReceived(PacketReceivedEvent event) {
                                 playerEntity.setUuid(profile.getId());
 
                                 // Check if they are not using a linked account
-                                if (!playerEntity.getUuid().toString().startsWith("00000000-0000-0000")) {
+                                if (connector.getAuthType() == AuthType.OFFLINE || playerEntity.getUuid().getMostSignificantBits() == 0) {
                                     SkinUtils.handleBedrockSkin(playerEntity, clientData);
                                 }
                             }

File: connector/src/main/java/org/geysermc/connector/utils/SkinProvider.java
Patch:
@@ -223,7 +223,9 @@ private static byte[] requestImage(String imageUrl, CapeProvider provider) throw
 
         // if the requested image is an cape
         if (provider != null) {
-            image = image.getWidth() > 64 ? scale(image) : image;
+            while(image.getWidth() > 64) {
+                image = scale(image);
+            }
             BufferedImage newImage = new BufferedImage(64, 32, BufferedImage.TYPE_INT_RGB);
             Graphics g = newImage.createGraphics();
             g.drawImage(image, 0, 0, image.getWidth(), image.getHeight(), null);

File: connector/src/main/java/org/geysermc/connector/entity/Entity.java
Patch:
@@ -215,6 +215,8 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
                         } else {
                             metadata.getFlags().setFlag(EntityFlag.INVISIBLE, true);
                         }
+                    } else {
+                        metadata.getFlags().setFlag(EntityFlag.INVISIBLE, false);
                     }
 
                     // Shield code

File: connector/src/main/java/org/geysermc/connector/entity/Entity.java
Patch:
@@ -209,8 +209,6 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
                     metadata.getFlags().setFlag(EntityFlag.SWIMMING, (xd & 0x10) == 0x10);
                     metadata.getFlags().setFlag(EntityFlag.GLIDING, (xd & 0x80) == 0x80);
 
-                    metadata.put(EntityData.SCALE, scale);
-
                     if ((xd & 0x20) == 0x20) {
                         if (this.is(ArmorStandEntity.class)) {
                             metadata.put(EntityData.SCALE, 0.0f);

File: connector/src/main/java/org/geysermc/connector/entity/living/AgeableEntity.java
Patch:
@@ -44,6 +44,9 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
             boolean isBaby = (boolean) entityMetadata.getValue();
             metadata.put(EntityData.SCALE, isBaby ? .55f : 1f);
             metadata.getFlags().setFlag(EntityFlag.BABY, isBaby);
+
+            metadata.put(EntityData.BOUNDING_BOX_HEIGHT, entityType.getHeight() * (isBaby ? 0.55f : 1f));
+            metadata.put(EntityData.BOUNDING_BOX_WIDTH, entityType.getWidth() * (isBaby ? 0.55f : 1f));
         }
 
         super.updateBedrockMetadata(entityMetadata, session);

File: connector/src/main/java/org/geysermc/connector/entity/living/WaterEntity.java
Patch:
@@ -26,11 +26,14 @@
 package org.geysermc.connector.entity.living;
 
 import com.nukkitx.math.vector.Vector3f;
+import com.nukkitx.protocol.bedrock.data.EntityData;
 import org.geysermc.connector.entity.type.EntityType;
 
 public class WaterEntity extends CreatureEntity {
 
     public WaterEntity(long entityId, long geyserId, EntityType entityType, Vector3f position, Vector3f motion, Vector3f rotation) {
         super(entityId, geyserId, entityType, position, motion, rotation);
+
+        metadata.put(EntityData.AIR, (short) 400);
     }
 }

File: common/src/main/java/org/geysermc/floodgate/util/DeviceOS.java
Patch:
@@ -43,7 +43,8 @@ public enum DeviceOS {
     ORBIS("PS4"),
     NX("Switch"),
     SWITCH("Switch"),
-    XBOX_ONE("Xbox One");
+    XBOX_ONE("Xbox One"),
+    WIN_PHONE("Windows Phone");
 
     private static final DeviceOS[] VALUES = values();
 

File: bootstrap/bukkit/src/main/java/org/geysermc/platform/bukkit/GeyserBukkitPlugin.java
Patch:
@@ -59,7 +59,7 @@ public void onEnable() {
 
         // Don't change the ip if its listening on all interfaces
         // By default this should be 127.0.0.1 but may need to be changed in some circumstances
-        if (!Bukkit.getIp().equals("0.0.0.0")) {
+        if (!Bukkit.getIp().equals("0.0.0.0") && !Bukkit.getIp().equals("")) {
             getConfig().set("remote.address", Bukkit.getIp());
         }
 

File: bootstrap/bungeecord/src/main/java/org/geysermc/platform/bungeecord/GeyserBungeePlugin.java
Patch:
@@ -91,7 +91,7 @@ public void onEnable() {
 
             // Don't change the ip if its listening on all interfaces
             // By default this should be 127.0.0.1 but may need to be changed in some circumstances
-            if (!javaAddr.getHostString().equals("0.0.0.0")) {
+            if (!javaAddr.getHostString().equals("0.0.0.0") && !javaAddr.getHostString().equals("")) {
                 configuration.set("remote.address", javaAddr.getHostString());
             }
 

File: bootstrap/sponge/src/main/java/org/geysermc/platform/sponge/GeyserSpongePlugin.java
Patch:
@@ -97,7 +97,7 @@ public void onEnable() {
 
             // Don't change the ip if its listening on all interfaces
             // By default this should be 127.0.0.1 but may need to be changed in some circumstances
-            if (!javaAddr.getHostString().equals("0.0.0.0")) {
+            if (!javaAddr.getHostString().equals("0.0.0.0") && !javaAddr.getHostString().equals("")) {
                 serverIP.setValue("127.0.0.1");
             }
 

File: bootstrap/velocity/src/main/java/org/geysermc/platform/velocity/GeyserVelocityPlugin.java
Patch:
@@ -83,7 +83,7 @@ public void onEnable() {
 
         // Don't change the ip if its listening on all interfaces
         // By default this should be 127.0.0.1 but may need to be changed in some circumstances
-        if (!javaAddr.getHostString().equals("0.0.0.0")) {
+        if (!javaAddr.getHostString().equals("0.0.0.0") && !javaAddr.getHostString().equals("")) {
             geyserConfig.getRemote().setAddress(javaAddr.getHostString());
         }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerListEntryTranslator.java
Patch:
@@ -63,8 +63,9 @@ public void translate(ServerPlayerListEntryPacket packet, GeyserSession session)
                     );
                 }
 
-                session.getEntityCache().addPlayerEntity(playerEntity);
                 playerEntity.setPlayerList(true);
+                playerEntity.setValid(true);
+                session.getEntityCache().addPlayerEntity(playerEntity);
 
                 translate.getEntries().add(SkinUtils.buildCachedEntry(entry.getProfile(), playerEntity.getGeyserId()));
             } else {

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/entity/BannerBlockEntityTranslator.java
Patch:
@@ -37,7 +37,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-@BlockEntity(name = "Banner", delay = false, regex = "banner")
+@BlockEntity(name = "Banner", regex = "banner")
 public class BannerBlockEntityTranslator extends BlockEntityTranslator implements RequiresBlockState {
 
     @Override

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/entity/BedBlockEntityTranslator.java
Patch:
@@ -35,7 +35,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-@BlockEntity(name = "Bed", delay = false, regex = "bed")
+@BlockEntity(name = "Bed", regex = "bed")
 public class BedBlockEntityTranslator extends BlockEntityTranslator implements RequiresBlockState {
 
     @Override

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/entity/CampfireBlockEntityTranslator.java
Patch:
@@ -38,7 +38,7 @@
 import java.util.HashMap;
 import java.util.List;
 
-@BlockEntity(name = "Campfire", delay = false, regex = "campfire")
+@BlockEntity(name = "Campfire", regex = "campfire")
 public class CampfireBlockEntityTranslator extends BlockEntityTranslator {
 
     @Override

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/entity/EmptyBlockEntityTranslator.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-@BlockEntity(name = "Empty", delay = false, regex = "")
+@BlockEntity(name = "Empty", regex = "")
 public class EmptyBlockEntityTranslator extends BlockEntityTranslator {
 
     @Override

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/entity/EndGatewayBlockEntityTranslator.java
Patch:
@@ -36,7 +36,7 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 
-@BlockEntity(name = "EndGateway", delay = true, regex = "end_gateway")
+@BlockEntity(name = "EndGateway", regex = "end_gateway")
 public class EndGatewayBlockEntityTranslator extends BlockEntityTranslator {
 
     @Override

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/entity/ShulkerBoxBlockEntityTranslator.java
Patch:
@@ -36,7 +36,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-@BlockEntity(name = "ShulkerBox", delay = false, regex = "shulker_box")
+@BlockEntity(name = "ShulkerBox", regex = "shulker_box")
 public class ShulkerBoxBlockEntityTranslator extends BlockEntityTranslator {
 
     @Override

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/PlayerInventoryTranslator.java
Patch:
@@ -44,6 +44,8 @@
 import java.util.List;
 
 public class PlayerInventoryTranslator extends InventoryTranslator {
+    private static final ItemData UNUSUABLE_CRAFTING_SPACE_BLOCK = InventoryUtils.createUnusableSpaceBlock(
+            "The creative crafting grid is\nunavailable in Java Edition");
 
     public PlayerInventoryTranslator() {
         super(46);
@@ -97,7 +99,7 @@ public static void updateCraftingGrid(GeyserSession session, Inventory inventory
             slotPacket.setSlot(i + 27);
 
             if (session.getGameMode() == GameMode.CREATIVE) {
-                slotPacket.setItem(Translators.getItemTranslator().translateToBedrock(session, new ItemStack(Toolbox.BARRIER_INDEX)));
+                slotPacket.setItem(UNUSUABLE_CRAFTING_SPACE_BLOCK);
             }else{
                 slotPacket.setItem(Translators.getItemTranslator().translateToBedrock(session, inventory.getItem(i)));
             }

File: connector/src/main/java/org/geysermc/connector/command/defaults/OffhandCommand.java
Patch:
@@ -55,7 +55,7 @@ public void execute(CommandSender sender, String[] args) {
             GeyserSession session = (GeyserSession) sender;
             ClientPlayerActionPacket releaseItemPacket = new ClientPlayerActionPacket(PlayerAction.SWAP_HANDS, new Position(0,0,0),
                     BlockFace.DOWN);
-            session.getDownstream().getSession().send(releaseItemPacket);
+            session.sendDownstreamPacket(releaseItemPacket);
         }
     }
 }

File: connector/src/main/java/org/geysermc/connector/entity/ItemEntity.java
Patch:
@@ -50,7 +50,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
             itemPacket.setFromFishing(false);
             itemPacket.getMetadata().putAll(metadata);
             itemPacket.setItemInHand(Translators.getItemTranslator().translateToBedrock(session, (ItemStack) entityMetadata.getValue()));
-            session.getUpstream().sendPacket(itemPacket);
+            session.sendUpstreamPacket(itemPacket);
         }
 
         super.updateBedrockMetadata(entityMetadata, session);

File: connector/src/main/java/org/geysermc/connector/entity/ItemFrameEntity.java
Patch:
@@ -149,7 +149,7 @@ public boolean despawnEntity(GeyserSession session) {
         updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.PRIORITY);
         updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.NONE);
         updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.NEIGHBORS);
-        session.getUpstream().sendPacket(updateBlockPacket);
+        session.sendUpstreamPacket(updateBlockPacket);
         session.getItemFrameCache().remove(position, entityId);
         valid = false;
         return true;
@@ -179,7 +179,7 @@ public void updateBlock(GeyserSession session) {
             updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.PRIORITY);
             updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.NONE);
             updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.NEIGHBORS);
-            session.getUpstream().sendPacket(updateBlockPacket);
+            session.sendUpstreamPacket(updateBlockPacket);
 
             BlockEntityDataPacket blockEntityDataPacket = new BlockEntityDataPacket();
             blockEntityDataPacket.setBlockPosition(bedrockPosition);
@@ -189,7 +189,7 @@ public void updateBlock(GeyserSession session) {
                 blockEntityDataPacket.setData(getDefaultTag());
             }
 
-            session.getUpstream().sendPacket(blockEntityDataPacket);
+            session.sendUpstreamPacket(blockEntityDataPacket);
         }, 500, TimeUnit.MILLISECONDS);
     }
 

File: connector/src/main/java/org/geysermc/connector/entity/LivingEntity.java
Patch:
@@ -96,8 +96,8 @@ public void updateEquipment(GeyserSession session) {
         offHandPacket.setInventorySlot(0);
         offHandPacket.setContainerId(ContainerId.OFFHAND);
 
-        session.getUpstream().sendPacket(armorEquipmentPacket);
-        session.getUpstream().sendPacket(handPacket);
-        session.getUpstream().sendPacket(offHandPacket);
+        session.sendUpstreamPacket(armorEquipmentPacket);
+        session.sendUpstreamPacket(handPacket);
+        session.sendUpstreamPacket(offHandPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/entity/PaintingEntity.java
Patch:
@@ -55,7 +55,7 @@ public void spawnEntity(GeyserSession session) {
         addPaintingPacket.setName(paintingName.getBedrockName());
         addPaintingPacket.setPosition(fixOffset(true));
         addPaintingPacket.setDirection(direction);
-        session.getUpstream().sendPacket(addPaintingPacket);
+        session.sendUpstreamPacket(addPaintingPacket);
 
         valid = true;
 

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/horse/LlamaEntity.java
Patch:
@@ -65,7 +65,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
             equipmentPacket.setHelmet(ItemData.AIR);
             equipmentPacket.setLeggings(ItemData.AIR);
 
-            session.getUpstream().sendPacket(equipmentPacket);
+            session.sendUpstreamPacket(equipmentPacket);
         }
         // Color of the llama
         if (entityMetadata.getId() == 21) {

File: connector/src/main/java/org/geysermc/connector/entity/living/monster/EnderDragonEntity.java
Patch:
@@ -53,7 +53,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
                     entityEventPacket.setType(EntityEventType.DRAGON_FLAMING);
                     entityEventPacket.setRuntimeEntityId(geyserId);
                     entityEventPacket.setData(0);
-                    session.getUpstream().sendPacket(entityEventPacket);
+                    session.sendUpstreamPacket(entityEventPacket);
                 case 6:
                 case 7:
                     metadata.getFlags().setFlag(EntityFlag.SITTING, true);
@@ -79,7 +79,7 @@ public void spawnEntity(GeyserSession session) {
         addEntityPacket.getAttributes().add(new Attribute("minecraft:health", 0.0f, 200f, 200f, 200f));
 
         valid = true;
-        session.getUpstream().sendPacket(addEntityPacket);
+        session.sendUpstreamPacket(addEntityPacket);
 
         session.getConnector().getLogger().debug("Spawned entity " + entityType + " at location " + position + " with id " + geyserId + " (java id " + entityId + ")");
     }

File: connector/src/main/java/org/geysermc/connector/network/UpstreamPacketHandler.java
Patch:
@@ -58,10 +58,10 @@ public boolean handle(LoginPacket loginPacket) {
 
         PlayStatusPacket playStatus = new PlayStatusPacket();
         playStatus.setStatus(PlayStatusPacket.Status.LOGIN_SUCCESS);
-        session.getUpstream().sendPacket(playStatus);
+        session.sendUpstreamPacket(playStatus);
 
         ResourcePacksInfoPacket resourcePacksInfo = new ResourcePacksInfoPacket();
-        session.getUpstream().sendPacket(resourcePacksInfo);
+        session.sendUpstreamPacket(resourcePacksInfo);
         return true;
     }
 
@@ -77,7 +77,7 @@ public boolean handle(ResourcePackClientResponsePacket packet) {
                 stack.setExperimental(false);
                 stack.setForcedToAccept(false);
                 stack.setGameVersion("*");
-                session.getUpstream().sendPacket(stack);
+                session.sendUpstreamPacket(stack);
                 break;
             default:
                 session.disconnect("disconnectionScreen.resourcePack");

File: connector/src/main/java/org/geysermc/connector/network/session/cache/WindowCache.java
Patch:
@@ -66,15 +66,15 @@ public void showWindow(int id) {
         formRequestPacket.setFormId(id);
         formRequestPacket.setFormData(windows.get(id).getJSONData());
 
-        session.getUpstream().sendPacket(formRequestPacket);
+        session.sendUpstreamPacket(formRequestPacket);
     }
 
     public void showWindow(FormWindow window, int id) {
         ModalFormRequestPacket formRequestPacket = new ModalFormRequestPacket();
         formRequestPacket.setFormId(id);
         formRequestPacket.setFormData(window.getJSONData());
 
-        session.getUpstream().sendPacket(formRequestPacket);
+        session.sendUpstreamPacket(formRequestPacket);
 
         addWindow(window, id);
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockAnimateTranslator.java
Patch:
@@ -49,7 +49,7 @@ public void translate(AnimatePacket packet, GeyserSession session) {
             case SWING_ARM:
                 // Delay so entity damage can be processed first
                 session.getConnector().getGeneralThreadPool().schedule(() ->
-                        session.getDownstream().getSession().send(new ClientPlayerSwingArmPacket(Hand.MAIN_HAND)),
+                        session.sendDownstreamPacket(new ClientPlayerSwingArmPacket(Hand.MAIN_HAND)),
                         25,
                         TimeUnit.MILLISECONDS
                 );

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockBlockEntityDataTranslator.java
Patch:
@@ -79,7 +79,7 @@ public void translate(BlockEntityDataPacket packet, GeyserSession session) {
                 // Put the final line on since it isn't done in the for loop
                 if (iterator < lines.length) lines[iterator] = newMessage.toString();
                 ClientUpdateSignPacket clientUpdateSignPacket = new ClientUpdateSignPacket(pos, lines);
-                session.getDownstream().getSession().send(clientUpdateSignPacket);
+                session.sendDownstreamPacket(clientUpdateSignPacket);
                 //TODO (potentially): originally I was going to update the sign blocks so Bedrock and Java users would match visually
                 // However Java can still store a lot per-line and visuals are still messed up so that doesn't work
 

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockCommandRequestTranslator.java
Patch:
@@ -53,7 +53,7 @@ public void translate(CommandRequestPacket packet, GeyserSession session) {
             }
 
             ClientChatPacket chatPacket = new ClientChatPacket(message);
-            session.getDownstream().getSession().send(chatPacket);
+            session.sendDownstreamPacket(chatPacket);
         }
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockContainerCloseTranslator.java
Patch:
@@ -48,7 +48,7 @@ public void translate(ContainerClosePacket packet, GeyserSession session) {
             }
         }
         ClientCloseWindowPacket closeWindowPacket = new ClientCloseWindowPacket(windowId);
-        session.getDownstream().getSession().send(closeWindowPacket);
+        session.sendDownstreamPacket(closeWindowPacket);
         InventoryUtils.closeInventory(session, windowId);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockEntityEventTranslator.java
Patch:
@@ -39,7 +39,7 @@ public void translate(EntityEventPacket packet, GeyserSession session) {
         switch (packet.getType()) {
             // Resend the packet so we get the eating sounds
             case EATING_ITEM:
-                session.getUpstream().sendPacket(packet);
+                session.sendUpstreamPacket(packet);
                 return;
         }
         session.getConnector().getLogger().debug("Did not translate incoming EntityEventPacket: " + packet.toString());

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockInteractTranslator.java
Patch:
@@ -52,12 +52,12 @@ public void translate(InteractPacket packet, GeyserSession session) {
                 }
                 ClientPlayerInteractEntityPacket interactPacket = new ClientPlayerInteractEntityPacket((int) entity.getEntityId(),
                         InteractAction.INTERACT, Hand.MAIN_HAND);
-                session.getDownstream().getSession().send(interactPacket);
+                session.sendDownstreamPacket(interactPacket);
                 break;
             case DAMAGE:
                 ClientPlayerInteractEntityPacket attackPacket = new ClientPlayerInteractEntityPacket((int) entity.getEntityId(),
                         InteractAction.ATTACK, Hand.MAIN_HAND);
-                session.getDownstream().getSession().send(attackPacket);
+                session.sendDownstreamPacket(attackPacket);
                 break;
         }
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockItemFrameDropItemTranslator.java
Patch:
@@ -51,7 +51,7 @@ public void translate(ItemFrameDropItemPacket packet, GeyserSession session) {
         Vector3i position = Vector3i.from(packet.getBlockPosition().getX(), y, packet.getBlockPosition().getZ());
         ClientPlayerInteractEntityPacket interactPacket = new ClientPlayerInteractEntityPacket((int) ItemFrameEntity.getItemFrameEntityId(session, position),
                 InteractAction.ATTACK, Hand.MAIN_HAND);
-        session.getDownstream().getSession().send(interactPacket);
+        session.sendDownstreamPacket(interactPacket);
     }
 
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockLevelSoundEventTranslator.java
Patch:
@@ -36,6 +36,6 @@ public class BedrockLevelSoundEventTranslator extends PacketTranslator<LevelSoun
     @Override
     public void translate(LevelSoundEventPacket packet, GeyserSession session) {
         // lol what even :thinking:
-        session.getUpstream().sendPacket(packet);
+        session.sendUpstreamPacket(packet);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockMobEquipmentTranslator.java
Patch:
@@ -46,6 +46,6 @@ public void translate(MobEquipmentPacket packet, GeyserSession session) {
         session.getInventory().setHeldItemSlot(packet.getHotbarSlot());
 
         ClientPlayerChangeHeldItemPacket changeHeldItemPacket = new ClientPlayerChangeHeldItemPacket(packet.getHotbarSlot());
-        session.getDownstream().getSession().send(changeHeldItemPacket);
+        session.sendDownstreamPacket(changeHeldItemPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockRespawnTranslator.java
Patch:
@@ -44,10 +44,10 @@ public void translate(RespawnPacket packet, GeyserSession session) {
             respawnPacket.setRuntimeEntityId(0);
             respawnPacket.setPosition(Vector3f.ZERO);
             respawnPacket.setState(RespawnPacket.State.SERVER_SEARCHING);
-            session.getUpstream().sendPacket(respawnPacket);
+            session.sendUpstreamPacket(respawnPacket);
 
             ClientRequestPacket javaRespawnPacket = new ClientRequestPacket(ClientRequest.RESPAWN);
-            session.getDownstream().getSession().send(javaRespawnPacket);
+            session.sendDownstreamPacket(javaRespawnPacket);
         }
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockShowCreditsTranslator.java
Patch:
@@ -40,7 +40,7 @@ public class BedrockShowCreditsTranslator extends PacketTranslator<ShowCreditsPa
     public void translate(ShowCreditsPacket packet, GeyserSession session) {
         if (packet.getStatus() == ShowCreditsPacket.Status.END_CREDITS) {
             ClientRequestPacket javaRespawnPacket = new ClientRequestPacket(ClientRequest.RESPAWN);
-            session.getDownstream().getSession().send(javaRespawnPacket);
+            session.sendDownstreamPacket(javaRespawnPacket);
         }
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockTextTranslator.java
Patch:
@@ -45,6 +45,6 @@ public void translate(TextPacket packet, GeyserSession session) {
         }
 
         ClientChatPacket chatPacket = new ClientChatPacket(message);
-        session.getDownstream().getSession().send(chatPacket);
+        session.sendDownstreamPacket(chatPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/AnvilInventoryTranslator.java
Patch:
@@ -108,7 +108,7 @@ public void translateActions(GeyserSession session, Inventory inventory, List<In
                 rename = "";
             }
             ClientRenameItemPacket renameItemPacket = new ClientRenameItemPacket(rename);
-            session.getDownstream().getSession().send(renameItemPacket);
+            session.sendDownstreamPacket(renameItemPacket);
         }
         if (anvilResult != null) {
             //client will send another packet to grab anvil output
@@ -138,7 +138,7 @@ public void updateSlot(GeyserSession session, Inventory inventory, int slot) {
                     rename = "";
                 }
                 ClientRenameItemPacket renameItemPacket = new ClientRenameItemPacket(rename);
-                session.getDownstream().getSession().send(renameItemPacket);
+                session.sendDownstreamPacket(renameItemPacket);
             }
         }
         super.updateSlot(session, inventory, slot);

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/BrewingInventoryTranslator.java
Patch:
@@ -44,7 +44,7 @@ public void openInventory(GeyserSession session, Inventory inventory) {
         dataPacket.setWindowId((byte) inventory.getId());
         dataPacket.setProperty(ContainerSetDataPacket.BREWING_STAND_FUEL_TOTAL);
         dataPacket.setValue(20);
-        session.getUpstream().sendPacket(dataPacket);
+        session.sendUpstreamPacket(dataPacket);
     }
 
     @Override
@@ -62,7 +62,7 @@ public void updateProperty(GeyserSession session, Inventory inventory, int key,
                 return;
         }
         dataPacket.setValue(value);
-        session.getUpstream().sendPacket(dataPacket);
+        session.sendUpstreamPacket(dataPacket);
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/CraftingInventoryTranslator.java
Patch:
@@ -59,7 +59,7 @@ public void openInventory(GeyserSession session, Inventory inventory) {
         containerOpenPacket.setType((byte) ContainerType.WORKBENCH.id());
         containerOpenPacket.setBlockPosition(inventory.getHolderPosition());
         containerOpenPacket.setUniqueEntityId(inventory.getHolderId());
-        session.getUpstream().sendPacket(containerOpenPacket);
+        session.sendUpstreamPacket(containerOpenPacket);
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/FurnaceInventoryTranslator.java
Patch:
@@ -58,7 +58,7 @@ public void updateProperty(GeyserSession session, Inventory inventory, int key,
                 return;
         }
         dataPacket.setValue(value);
-        session.getUpstream().sendPacket(dataPacket);
+        session.sendUpstreamPacket(dataPacket);
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/action/ClickPlan.java
Patch:
@@ -104,8 +104,8 @@ public void execute(GeyserSession session, InventoryTranslator translator, Inven
                         break;
                 }
             }
-            session.getDownstream().getSession().send(clickPacket);
-            session.getDownstream().getSession().send(new ClientConfirmTransactionPacket(inventory.getId(), actionId, true));
+            session.sendDownstreamPacket(clickPacket);
+            session.sendDownstreamPacket(new ClientConfirmTransactionPacket(inventory.getId(), actionId, true));
         }
 
         /*if (refresh) {

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/updater/ChestInventoryUpdater.java
Patch:
@@ -54,7 +54,7 @@ public void updateInventory(InventoryTranslator translator, GeyserSession sessio
         InventoryContentPacket contentPacket = new InventoryContentPacket();
         contentPacket.setContainerId(inventory.getId());
         contentPacket.setContents(bedrockItems);
-        session.getUpstream().sendPacket(contentPacket);
+        session.sendUpstreamPacket(contentPacket);
     }
 
     @Override
@@ -66,7 +66,7 @@ public boolean updateSlot(InventoryTranslator translator, GeyserSession session,
         slotPacket.setContainerId(inventory.getId());
         slotPacket.setSlot(translator.javaSlotToBedrock(javaSlot));
         slotPacket.setItem(Translators.getItemTranslator().translateToBedrock(session, inventory.getItem(javaSlot)));
-        session.getUpstream().sendPacket(slotPacket);
+        session.sendUpstreamPacket(slotPacket);
         return true;
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/updater/ContainerInventoryUpdater.java
Patch:
@@ -46,7 +46,7 @@ public void updateInventory(InventoryTranslator translator, GeyserSession sessio
         InventoryContentPacket contentPacket = new InventoryContentPacket();
         contentPacket.setContainerId(inventory.getId());
         contentPacket.setContents(bedrockItems);
-        session.getUpstream().sendPacket(contentPacket);
+        session.sendUpstreamPacket(contentPacket);
     }
 
     @Override
@@ -58,7 +58,7 @@ public boolean updateSlot(InventoryTranslator translator, GeyserSession session,
         slotPacket.setContainerId(inventory.getId());
         slotPacket.setSlot(translator.javaSlotToBedrock(javaSlot));
         slotPacket.setItem(Translators.getItemTranslator().translateToBedrock(session, inventory.getItem(javaSlot)));
-        session.getUpstream().sendPacket(slotPacket);
+        session.sendUpstreamPacket(slotPacket);
         return true;
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/updater/CursorInventoryUpdater.java
Patch:
@@ -45,7 +45,7 @@ public void updateInventory(InventoryTranslator translator, GeyserSession sessio
             slotPacket.setContainerId(ContainerId.CURSOR);
             slotPacket.setSlot(bedrockSlot);
             slotPacket.setItem(Translators.getItemTranslator().translateToBedrock(session, inventory.getItem(i)));
-            session.getUpstream().sendPacket(slotPacket);
+            session.sendUpstreamPacket(slotPacket);
         }
     }
 
@@ -58,7 +58,7 @@ public boolean updateSlot(InventoryTranslator translator, GeyserSession session,
         slotPacket.setContainerId(ContainerId.CURSOR);
         slotPacket.setSlot(translator.javaSlotToBedrock(javaSlot));
         slotPacket.setItem(Translators.getItemTranslator().translateToBedrock(session, inventory.getItem(javaSlot)));
-        session.getUpstream().sendPacket(slotPacket);
+        session.sendUpstreamPacket(slotPacket);
         return true;
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/updater/InventoryUpdater.java
Patch:
@@ -44,7 +44,7 @@ public void updateInventory(InventoryTranslator translator, GeyserSession sessio
         InventoryContentPacket contentPacket = new InventoryContentPacket();
         contentPacket.setContainerId(ContainerId.INVENTORY);
         contentPacket.setContents(bedrockItems);
-        session.getUpstream().sendPacket(contentPacket);
+        session.sendUpstreamPacket(contentPacket);
     }
 
     public boolean updateSlot(InventoryTranslator translator, GeyserSession session, Inventory inventory, int javaSlot) {
@@ -53,7 +53,7 @@ public boolean updateSlot(InventoryTranslator translator, GeyserSession session,
             slotPacket.setContainerId(ContainerId.INVENTORY);
             slotPacket.setSlot(translator.javaSlotToBedrock(javaSlot));
             slotPacket.setItem(Translators.getItemTranslator().translateToBedrock(session, inventory.getItem(javaSlot)));
-            session.getUpstream().sendPacket(slotPacket);
+            session.sendUpstreamPacket(slotPacket);
             return true;
         }
         return false;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaChatTranslator.java
Patch:
@@ -76,6 +76,6 @@ public void translate(ServerChatPacket packet, GeyserSession session) {
             textPacket.setMessage(MessageUtils.getTranslatedBedrockMessage(packet.getMessage(), locale, false));
         }
 
-        session.getUpstream().sendPacket(textPacket);
+        session.sendUpstreamPacket(textPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaDeclareRecipesTranslator.java
Patch:
@@ -90,7 +90,7 @@ public void translate(ServerDeclareRecipesPacket packet, GeyserSession session)
             }
         }
         craftingDataPacket.getPotionMixData().addAll(POTION_MIXES);
-        session.getUpstream().sendPacket(craftingDataPacket);
+        session.sendUpstreamPacket(craftingDataPacket);
     }
 
     //TODO: rewrite

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaDifficultyTranslator.java
Patch:
@@ -39,6 +39,6 @@ public class JavaDifficultyTranslator extends PacketTranslator<ServerDifficultyP
     public void translate(ServerDifficultyPacket packet, GeyserSession session) {
         SetDifficultyPacket setDifficultyPacket = new SetDifficultyPacket();
         setDifficultyPacket.setDifficulty(packet.getDifficulty().ordinal());
-        session.getUpstream().sendPacket(setDifficultyPacket);
+        session.sendUpstreamPacket(setDifficultyPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaLoginPluginMessageTranslator.java
Patch:
@@ -12,7 +12,7 @@ public class JavaLoginPluginMessageTranslator extends PacketTranslator<LoginPlug
     @Override
     public void translate(LoginPluginRequestPacket packet, GeyserSession session) {
         // A vanilla client doesn't know any PluginMessage in the Login state, so we don't know any either.
-        session.getDownstream().getSession().send(
+        session.sendDownstreamPacket(
                 new LoginPluginResponsePacket(packet.getMessageId(), null)
         );
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaPluginMessageTranslator.java
Patch:
@@ -52,7 +52,7 @@ public class JavaPluginMessageTranslator extends PacketTranslator<ServerPluginMe
     @Override
     public void translate(ServerPluginMessagePacket packet, GeyserSession session) {
         if (packet.getChannel().equals("minecraft:brand")) {
-            session.getDownstream().getSession().send(
+            session.sendDownstreamPacket(
                     new ClientPluginMessagePacket(packet.getChannel(), brandData)
             );
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaRespawnTranslator.java
Patch:
@@ -57,14 +57,14 @@ public void translate(ServerRespawnPacket packet, GeyserSession session) {
 
         SetPlayerGameTypePacket playerGameTypePacket = new SetPlayerGameTypePacket();
         playerGameTypePacket.setGamemode(packet.getGamemode().ordinal());
-        session.getUpstream().sendPacket(playerGameTypePacket);
+        session.sendUpstreamPacket(playerGameTypePacket);
         session.setGameMode(packet.getGamemode());
 
         LevelEventPacket stopRainPacket = new LevelEventPacket();
         stopRainPacket.setType(LevelEventType.STOP_RAIN);
         stopRainPacket.setData(ThreadLocalRandom.current().nextInt(50000) + 10000);
         stopRainPacket.setPosition(Vector3f.ZERO);
-        session.getUpstream().sendPacket(stopRainPacket);
+        session.sendUpstreamPacket(stopRainPacket);
 
         if (entity.getDimension() != DimensionUtils.javaToBedrock(packet.getDimension())) {
             DimensionUtils.switchDimension(session, packet.getDimension());

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaServerDeclareCommandsTranslator.java
Patch:
@@ -100,7 +100,7 @@ public void translate(ServerDeclareCommandsPacket packet, GeyserSession session)
         GeyserConnector.getInstance().getLogger().debug("Sending command packet of " + commandData.size() + " commands");
 
         // Finally, send the commands to the client
-        session.getUpstream().sendPacket(availableCommandsPacket);
+        session.sendUpstreamPacket(availableCommandsPacket);
     }
 
     /**

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaTitleTranslator.java
Patch:
@@ -65,6 +65,6 @@ public void translate(ServerTitlePacket packet, GeyserSession session) {
                 break;
         }
 
-        session.getUpstream().sendPacket(titlePacket);
+        session.sendUpstreamPacket(titlePacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityAnimationTranslator.java
Patch:
@@ -62,6 +62,6 @@ public void translate(ServerEntityAnimationPacket packet, GeyserSession session)
                 break;
         }
 
-        session.getUpstream().sendPacket(animatePacket);
+        session.sendUpstreamPacket(animatePacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityEffectTranslator.java
Patch:
@@ -55,6 +55,6 @@ public void translate(ServerEntityEffectPacket packet, GeyserSession session) {
         mobEffectPacket.setRuntimeEntityId(entity.getGeyserId());
         mobEffectPacket.setParticles(packet.isShowParticles());
         mobEffectPacket.setEffectId(EntityUtils.toBedrockEffectId(packet.getEffect()));
-        session.getUpstream().sendPacket(mobEffectPacket);
+        session.sendUpstreamPacket(mobEffectPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityHeadLookTranslator.java
Patch:
@@ -55,14 +55,14 @@ public void translate(ServerEntityHeadLookPacket packet, GeyserSession session)
             moveEntityAbsolutePacket.setRuntimeEntityId(entity.getGeyserId());
             moveEntityAbsolutePacket.setPosition(entity.getPosition());
             moveEntityAbsolutePacket.setRotation(entity.getBedrockRotation());
-            session.getUpstream().sendPacket(moveEntityAbsolutePacket);
+            session.sendUpstreamPacket(moveEntityAbsolutePacket);
         } else {
             MovePlayerPacket movePlayerPacket = new MovePlayerPacket();
             movePlayerPacket.setRuntimeEntityId(entity.getGeyserId());
             movePlayerPacket.setPosition(entity.getPosition());
             movePlayerPacket.setRotation(entity.getBedrockRotation());
             movePlayerPacket.setMode(MovePlayerPacket.Mode.ROTATION);
-            session.getUpstream().sendPacket(movePlayerPacket);
+            session.sendUpstreamPacket(movePlayerPacket);
         }
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityRemoveEffectTranslator.java
Patch:
@@ -52,6 +52,6 @@ public void translate(ServerEntityRemoveEffectPacket packet, GeyserSession sessi
         mobEffectPacket.setEvent(MobEffectPacket.Event.REMOVE);
         mobEffectPacket.setRuntimeEntityId(entity.getGeyserId());
         mobEffectPacket.setEffectId(EntityUtils.toBedrockEffectId(packet.getEffect()));
-        session.getUpstream().sendPacket(mobEffectPacket);
+        session.sendUpstreamPacket(mobEffectPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityRotationTranslator.java
Patch:
@@ -55,15 +55,15 @@ public void translate(ServerEntityRotationPacket packet, GeyserSession session)
             moveEntityAbsolutePacket.setRuntimeEntityId(entity.getGeyserId());
             moveEntityAbsolutePacket.setPosition(entity.getPosition());
             moveEntityAbsolutePacket.setRotation(entity.getBedrockRotation());
-            session.getUpstream().sendPacket(moveEntityAbsolutePacket);
+            session.sendUpstreamPacket(moveEntityAbsolutePacket);
         } else {
             MovePlayerPacket movePlayerPacket = new MovePlayerPacket();
             movePlayerPacket.setRuntimeEntityId(entity.getGeyserId());
             movePlayerPacket.setPosition(entity.getPosition());
             movePlayerPacket.setRotation(entity.getBedrockRotation());
             movePlayerPacket.setOnGround(packet.isOnGround());
             movePlayerPacket.setMode(MovePlayerPacket.Mode.ROTATION);
-            session.getUpstream().sendPacket(movePlayerPacket);
+            session.sendUpstreamPacket(movePlayerPacket);
         }
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityStatusTranslator.java
Patch:
@@ -96,6 +96,6 @@ public void translate(ServerEntityStatusPacket packet, GeyserSession session) {
                 break;
         }
 
-        session.getUpstream().sendPacket(entityEventPacket);
+        session.sendUpstreamPacket(entityEventPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityVelocityTranslator.java
Patch:
@@ -51,6 +51,6 @@ public void translate(ServerEntityVelocityPacket packet, GeyserSession session)
         entityMotionPacket.setRuntimeEntityId(entity.getGeyserId());
         entityMotionPacket.setMotion(entity.getMotion());
 
-        session.getUpstream().sendPacket(entityMotionPacket);
+        session.sendUpstreamPacket(entityMotionPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerAbilitiesTranslator.java
Patch:
@@ -57,7 +57,7 @@ public void translate(ServerPlayerAbilitiesPacket packet, GeyserSession session)
         SetEntityDataPacket entityDataPacket = new SetEntityDataPacket();
         entityDataPacket.setRuntimeEntityId(entity.getGeyserId());
         entityDataPacket.getMetadata().putAll(metadata);
-        session.getUpstream().sendPacket(entityDataPacket);
+        session.sendUpstreamPacket(entityDataPacket);
 
         Set<AdventureSettingsPacket.Flag> playerFlags = new ObjectOpenHashSet<>();
         playerFlags.add(AdventureSettingsPacket.Flag.AUTO_JUMP);
@@ -73,6 +73,6 @@ public void translate(ServerPlayerAbilitiesPacket packet, GeyserSession session)
         adventureSettingsPacket.setCommandPermission(CommandPermission.NORMAL);
         adventureSettingsPacket.setUniqueEntityId(entity.getGeyserId());
         adventureSettingsPacket.getFlags().addAll(playerFlags);
-        session.getUpstream().sendPacket(adventureSettingsPacket);
+        session.sendUpstreamPacket(adventureSettingsPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerActionAckTranslator.java
Patch:
@@ -55,7 +55,7 @@ public void translate(ServerPlayerActionAckPacket packet, GeyserSession session)
                     levelEvent.setType(LevelEventType.DESTROY);
                     levelEvent.setPosition(Vector3f.from(packet.getPosition().getX(), packet.getPosition().getY(), packet.getPosition().getZ()));
                     levelEvent.setData(BlockTranslator.getBedrockBlockId(session.getBreakingBlock()));
-                    session.getUpstream().sendPacket(levelEvent);
+                    session.sendUpstreamPacket(levelEvent);
                     session.setBreakingBlock(null);
                 }
                 ChunkUtils.updateBlock(session, packet.getNewState(), packet.getPosition());
@@ -82,7 +82,7 @@ public void translate(ServerPlayerActionAckPacket packet, GeyserSession session)
                 double breakTime = Math.ceil(BlockUtils.getBreakTime(blockHardness, packet.getNewState().getId(), itemEntry, nbtData, session.getPlayerEntity()) * 20);
                 levelEvent.setData((int) (65535 / breakTime));
                 session.setBreakingBlock(packet.getNewState());
-                session.getUpstream().sendPacket(levelEvent);
+                session.sendUpstreamPacket(levelEvent);
                 break;
             case CANCEL_DIGGING:
                 levelEvent.setType(LevelEventType.BLOCK_STOP_BREAK);
@@ -93,7 +93,7 @@ public void translate(ServerPlayerActionAckPacket packet, GeyserSession session)
                 ));
                 levelEvent.setData(0);
                 session.setBreakingBlock(null);
-                session.getUpstream().sendPacket(levelEvent);
+                session.sendUpstreamPacket(levelEvent);
                 break;
         }
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerChangeHeldItemTranslator.java
Patch:
@@ -40,7 +40,7 @@ public void translate(ServerPlayerChangeHeldItemPacket packet, GeyserSession ses
         hotbarPacket.setContainerId(0);
         hotbarPacket.setSelectedHotbarSlot(packet.getSlot());
         hotbarPacket.setSelectHotbarSlot(true);
-        session.getUpstream().sendPacket(hotbarPacket);
+        session.sendUpstreamPacket(hotbarPacket);
 
         session.getInventory().setHeldItemSlot(packet.getSlot());
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerHealthTranslator.java
Patch:
@@ -46,7 +46,7 @@ public void translate(ServerPlayerHealthPacket packet, GeyserSession session) {
         int health = (int) Math.ceil(packet.getHealth());
         SetHealthPacket setHealthPacket = new SetHealthPacket();
         setHealthPacket.setHealth(health);
-        session.getUpstream().sendPacket(setHealthPacket);
+        session.sendUpstreamPacket(setHealthPacket);
 
         float maxHealth = entity.getAttributes().containsKey(AttributeType.MAX_HEALTH) ? entity.getAttributes().get(AttributeType.MAX_HEALTH).getValue() : 20f;
         // Max health must be divisible by two in bedrock

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerListEntryTranslator.java
Patch:
@@ -81,7 +81,7 @@ public void translate(ServerPlayerListEntryPacket packet, GeyserSession session)
         }
 
         if (packet.getAction() == PlayerListEntryAction.REMOVE_PLAYER || session.getUpstream().isInitialized()) {
-            session.getUpstream().sendPacket(translate);
+            session.sendUpstreamPacket(translate);
         }
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerStopSoundTranslator.java
Patch:
@@ -68,7 +68,7 @@ public void translate(ServerStopSoundPacket packet, GeyserSession session) {
         // packet not mapped in the library
         stopSoundPacket.setStoppingAllSound(false);
 
-        session.getUpstream().sendPacket(stopSoundPacket);
+        session.sendUpstreamPacket(stopSoundPacket);
         session.getConnector().getLogger().debug("[StopSound] Packet sent - " + packet.toString() + " --> " + stopSoundPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaCloseWindowTranslator.java
Patch:
@@ -39,7 +39,7 @@ public class JavaCloseWindowTranslator extends PacketTranslator<ServerCloseWindo
     public void translate(ServerCloseWindowPacket packet, GeyserSession session) {
         ContainerClosePacket closePacket = new ContainerClosePacket();
         closePacket.setWindowId((byte)packet.getWindowId());
-        session.getUpstream().sendPacket(closePacket);
+        session.sendUpstreamPacket(closePacket);
         InventoryUtils.closeInventory(session, packet.getWindowId());
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaOpenWindowTranslator.java
Patch:
@@ -55,11 +55,11 @@ public void translate(ServerOpenWindowPacket packet, GeyserSession session) {
             if (openInventory != null) {
                 ContainerClosePacket closePacket = new ContainerClosePacket();
                 closePacket.setWindowId((byte)openInventory.getId());
-                session.getUpstream().sendPacket(closePacket);
+                session.sendUpstreamPacket(closePacket);
                 Translators.getInventoryTranslators().get(openInventory.getWindowType()).closeInventory(session, openInventory);
             }
             ClientCloseWindowPacket closeWindowPacket = new ClientCloseWindowPacket(packet.getWindowId());
-            session.getDownstream().getSession().send(closeWindowPacket);
+            session.sendDownstreamPacket(closeWindowPacket);
             return;
         }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaBlockChangeTranslator.java
Patch:
@@ -84,7 +84,7 @@ private boolean checkPlace(GeyserSession session, ServerBlockChangePacket packet
         placeBlockSoundPacket.setBabySound(false);
         placeBlockSoundPacket.setExtraData(BlockTranslator.getBedrockBlockId(packet.getRecord().getBlock()));
         placeBlockSoundPacket.setIdentifier(":");
-        session.getUpstream().sendPacket(placeBlockSoundPacket);
+        session.sendUpstreamPacket(placeBlockSoundPacket);
         session.setLastBlockPlacePosition(null);
         session.setLastBlockPlacedId(null);
         return true;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaChunkDataTranslator.java
Patch:
@@ -98,7 +98,7 @@ public void translate(ServerChunkDataPacket packet, GeyserSession session) {
                 levelChunkPacket.setChunkX(packet.getColumn().getX());
                 levelChunkPacket.setChunkZ(packet.getColumn().getZ());
                 levelChunkPacket.setData(payload);
-                session.getUpstream().sendPacket(levelChunkPacket);
+                session.sendUpstreamPacket(levelChunkPacket);
 
                 // Some block entities need to be loaded in later or else text doesn't show (signs) or they crash the game (end gateway blocks)
                 for (Object2IntMap.Entry<CompoundTag> blockEntityEntry : chunkData.getLoadBlockEntitiesLater().object2IntEntrySet()) {

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaCollectItemTranslator.java
Patch:
@@ -50,6 +50,6 @@ public void translate(ServerEntityCollectItemPacket packet, GeyserSession sessio
         }
         takeItemEntityPacket.setRuntimeEntityId(collectorEntity.getGeyserId());
         takeItemEntityPacket.setItemRuntimeEntityId(collectedEntity.getGeyserId());
-        session.getUpstream().sendPacket(takeItemEntityPacket);
+        session.sendUpstreamPacket(takeItemEntityPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaExplosionTranslator.java
Patch:
@@ -29,7 +29,6 @@
 import com.github.steveice10.mc.protocol.data.game.world.block.ExplodedBlockRecord;
 import com.github.steveice10.mc.protocol.packet.ingame.server.world.ServerExplosionPacket;
 import com.nukkitx.math.vector.Vector3f;
-import com.nukkitx.math.vector.Vector3i;
 import com.nukkitx.protocol.bedrock.data.LevelEventType;
 import com.nukkitx.protocol.bedrock.data.SoundEvent;
 import com.nukkitx.protocol.bedrock.packet.LevelEventPacket;
@@ -52,7 +51,7 @@ public void translate(ServerExplosionPacket packet, GeyserSession session) {
             levelEventPacket.setType(LevelEventType.PARTICLE_LARGE_EXPLOSION);
             levelEventPacket.setData(0);
             levelEventPacket.setPosition(pos.toFloat());
-            session.getUpstream().sendPacket(levelEventPacket);
+            session.sendUpstreamPacket(levelEventPacket);
             ChunkUtils.updateBlock(session, BlockTranslator.AIR, pos.toInt());
         }
         LevelSoundEventPacket levelSoundEventPacket = new LevelSoundEventPacket();
@@ -62,6 +61,6 @@ public void translate(ServerExplosionPacket packet, GeyserSession session) {
         levelSoundEventPacket.setSound(SoundEvent.EXPLODE);
         levelSoundEventPacket.setIdentifier(":");
         levelSoundEventPacket.setPosition(Vector3f.from(packet.getX(), packet.getY(), packet.getZ()));
-        session.getUpstream().sendPacket(levelSoundEventPacket);
+        session.sendUpstreamPacket(levelSoundEventPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaPlayBuiltinSoundTranslator.java
Patch:
@@ -57,7 +57,7 @@ public void translate(ServerPlayBuiltinSoundPacket packet, GeyserSession session
             levelEventPacket.setPosition(Vector3f.from(packet.getX(), packet.getY(), packet.getZ()));
             levelEventPacket.setData(0);
             levelEventPacket.setType(LevelEventType.valueOf(soundMapping.getBedrock()));
-            session.getUpstream().sendPacket(levelEventPacket);
+            session.sendUpstreamPacket(levelEventPacket);
             return;
         }
         LevelSoundEventPacket soundPacket = new LevelSoundEventPacket();
@@ -92,7 +92,7 @@ public void translate(ServerPlayBuiltinSoundPacket packet, GeyserSession session
 
         soundPacket.setBabySound(false); // might need to adjust this in the future
         soundPacket.setRelativeVolumeDisabled(false);
-        session.getUpstream().sendPacket(soundPacket);
+        session.sendUpstreamPacket(soundPacket);
         session.getConnector().getLogger().debug("Packet sent - " + packet.toString() + " --> " + soundPacket.toString());
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaPlayerPlaySoundTranslator.java
Patch:
@@ -72,7 +72,7 @@ public void translate(ServerPlaySoundPacket packet, GeyserSession session) {
         playSoundPacket.setVolume(packet.getVolume());
         playSoundPacket.setPitch(packet.getPitch());
 
-        session.getUpstream().sendPacket(playSoundPacket);
+        session.sendUpstreamPacket(playSoundPacket);
         session.getConnector().getLogger().debug("[PlaySound] Packet sent - " + packet.toString() + " --> " + playSoundPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaSpawnPositionTranslator.java
Patch:
@@ -42,6 +42,6 @@ public void translate(ServerSpawnPositionPacket packet, GeyserSession session) {
         spawnPositionPacket.setBlockPosition(Vector3i.from(packet.getPosition().getX(), packet.getPosition().getY(), packet.getPosition().getZ()));
         spawnPositionPacket.setSpawnForced(true);
         spawnPositionPacket.setSpawnType(SetSpawnPositionPacket.Type.WORLD_SPAWN);
-        session.getUpstream().sendPacket(spawnPositionPacket);
+        session.sendUpstreamPacket(spawnPositionPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaUpdateTimeTranslator.java
Patch:
@@ -55,7 +55,7 @@ public void translate(ServerUpdateTimePacket packet, GeyserSession session) {
             // https://minecraft.gamepedia.com/Day-night_cycle#24-hour_Minecraft_day
             SetTimePacket setTimePacket = new SetTimePacket();
             setTimePacket.setTime((int) Math.abs(time) % 24000);
-            session.getUpstream().sendPacket(setTimePacket);
+            session.sendUpstreamPacket(setTimePacket);
             // TODO: Performance efficient to always do this?
             LAST_RECORDED_TIMES.put(session.getPlayerEntity().getEntityId(), time);
         }
@@ -69,7 +69,7 @@ public void translate(ServerUpdateTimePacket packet, GeyserSession session) {
     private void setDoDaylightCycleGamerule(GeyserSession session, boolean doCycle) {
         GameRulesChangedPacket gameRulesChangedPacket = new GameRulesChangedPacket();
         gameRulesChangedPacket.getGameRules().add(new GameRuleData<>("dodaylightcycle", doCycle));
-        session.getUpstream().sendPacket(gameRulesChangedPacket);
+        session.sendUpstreamPacket(gameRulesChangedPacket);
     }
 
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/sound/block/BucketSoundInteractionHandler.java
Patch:
@@ -67,7 +67,7 @@ public void handleInteraction(GeyserSession session, Vector3f position, String i
         }
         if (soundEvent != null) {
             soundEventPacket.setSound(soundEvent);
-            session.getUpstream().sendPacket(soundEventPacket);
+            session.sendUpstreamPacket(soundEventPacket);
         }
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/sound/block/ComparatorSoundInteractHandler.java
Patch:
@@ -43,6 +43,6 @@ public void handleInteraction(GeyserSession session, Vector3f position, String i
         levelEventPacket.setPosition(position);
         levelEventPacket.setType(LevelEventType.REDSTONE_TRIGGER);
         levelEventPacket.setData(powered ? 500 : 550);
-        session.getUpstream().sendPacket(levelEventPacket);
+        session.sendUpstreamPacket(levelEventPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/sound/block/DoorSoundInteractionHandler.java
Patch:
@@ -42,6 +42,6 @@ public void handleInteraction(GeyserSession session, Vector3f position, String i
         levelEventPacket.setType(LevelEventType.SOUND_DOOR);
         levelEventPacket.setPosition(position);
         levelEventPacket.setData(0);
-        session.getUpstream().sendPacket(levelEventPacket);
+        session.sendUpstreamPacket(levelEventPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/sound/block/FlintAndSteelInteractionHandler.java
Patch:
@@ -45,6 +45,6 @@ public void handleInteraction(GeyserSession session, Vector3f position, String i
         levelSoundEventPacket.setIdentifier(":");
         levelSoundEventPacket.setSound(SoundEvent.IGNITE);
         levelSoundEventPacket.setExtraData(-1);
-        session.getUpstream().sendPacket(levelSoundEventPacket);
+        session.sendUpstreamPacket(levelSoundEventPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/sound/block/GrassPathInteractionHandler.java
Patch:
@@ -46,6 +46,6 @@ public void handleInteraction(GeyserSession session, Vector3f position, String i
         levelSoundEventPacket.setIdentifier(":");
         levelSoundEventPacket.setSound(SoundEvent.ITEM_USE_ON);
         levelSoundEventPacket.setExtraData(BlockTranslator.getBedrockBlockId(BlockTranslator.getJavaBlockState(identifier)));
-        session.getUpstream().sendPacket(levelSoundEventPacket);
+        session.sendUpstreamPacket(levelSoundEventPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/sound/block/HoeInteractionHandler.java
Patch:
@@ -46,6 +46,6 @@ public void handleInteraction(GeyserSession session, Vector3f position, String i
         levelSoundEventPacket.setIdentifier(":");
         levelSoundEventPacket.setSound(SoundEvent.ITEM_USE_ON);
         levelSoundEventPacket.setExtraData(BlockTranslator.getBedrockBlockId(BlockTranslator.getJavaBlockState(identifier)));
-        session.getUpstream().sendPacket(levelSoundEventPacket);
+        session.sendUpstreamPacket(levelSoundEventPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/sound/block/LeverSoundInteractionHandler.java
Patch:
@@ -43,6 +43,6 @@ public void handleInteraction(GeyserSession session, Vector3f position, String i
         levelEventPacket.setPosition(position);
         levelEventPacket.setType(LevelEventType.REDSTONE_TRIGGER);
         levelEventPacket.setData(powered ? 600 : 500);
-        session.getUpstream().sendPacket(levelEventPacket);
+        session.sendUpstreamPacket(levelEventPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/sound/entity/MilkCowSoundInteractionHandler.java
Patch:
@@ -50,6 +50,6 @@ public void handleInteraction(GeyserSession session, Vector3f position, Entity v
         levelSoundEventPacket.setIdentifier(":");
         levelSoundEventPacket.setSound(SoundEvent.MILK);
         levelSoundEventPacket.setExtraData(-1);
-        session.getUpstream().sendPacket(levelSoundEventPacket);
+        session.sendUpstreamPacket(levelSoundEventPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/entity/FlowerPotBlockEntityTranslator.java
Patch:
@@ -53,7 +53,7 @@ public void updateBlock(GeyserSession session, BlockState blockState, Vector3i p
         updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.PRIORITY);
         updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.NONE);
         updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.NEIGHBORS);
-        session.getUpstream().sendPacket(updateBlockPacket);
+        session.sendUpstreamPacket(updateBlockPacket);
     }
 
     /**

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/entity/NoteblockBlockEntityTranslator.java
Patch:
@@ -50,7 +50,7 @@ public static void translate(GeyserSession session, Position position) {
         blockEventPacket.setBlockPosition(Vector3i.from(position.getX(), position.getY(), position.getZ()));
         blockEventPacket.setEventType(0);
         blockEventPacket.setEventData(BlockStateValues.getNoteblockPitch(blockState));
-        session.getUpstream().sendPacket(blockEventPacket);
+        session.sendUpstreamPacket(blockEventPacket);
 
         ChunkUtils.CACHED_BLOCK_ENTITIES.remove(position);
     }

File: connector/src/main/java/org/geysermc/connector/utils/BlockEntityUtils.java
Patch:
@@ -49,6 +49,6 @@ public static void updateBlockEntity(GeyserSession session, com.nukkitx.nbt.tag.
         BlockEntityDataPacket blockEntityPacket = new BlockEntityDataPacket();
         blockEntityPacket.setBlockPosition(position);
         blockEntityPacket.setData(blockEntity);
-        session.getUpstream().sendPacket(blockEntityPacket);
+        session.sendUpstreamPacket(blockEntityPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/utils/DimensionUtils.java
Patch:
@@ -49,7 +49,7 @@ public static void switchDimension(GeyserSession session, int javaDimension) {
         changeDimensionPacket.setDimension(bedrockDimension);
         changeDimensionPacket.setRespawn(true);
         changeDimensionPacket.setPosition(pos.toFloat());
-        session.getUpstream().sendPacket(changeDimensionPacket);
+        session.sendUpstreamPacket(changeDimensionPacket);
         player.setDimension(bedrockDimension);
         player.setPosition(pos.toFloat());
         session.setSpawned(false);
@@ -59,7 +59,7 @@ public static void switchDimension(GeyserSession session, int javaDimension) {
         StopSoundPacket stopSoundPacket = new StopSoundPacket();
         stopSoundPacket.setStoppingAllSound(true);
         stopSoundPacket.setSoundName("");
-        session.getUpstream().sendPacket(stopSoundPacket);
+        session.sendUpstreamPacket(stopSoundPacket);
     }
 
     /**

File: connector/src/main/java/org/geysermc/connector/utils/InventoryUtils.java
Patch:
@@ -84,7 +84,7 @@ public static void updateCursor(GeyserSession session) {
         cursorPacket.setContainerId(ContainerId.CURSOR);
         cursorPacket.setSlot(0);
         cursorPacket.setItem(Translators.getItemTranslator().translateToBedrock(session, session.getInventory().getCursor()));
-        session.getUpstream().sendPacket(cursorPacket);
+        session.sendUpstreamPacket(cursorPacket);
     }
 
     public static boolean canStack(ItemStack item1, ItemStack item2) {

File: connector/src/main/java/org/geysermc/connector/utils/LoginEncryptionUtils.java
Patch:
@@ -35,8 +35,6 @@
 import com.nukkitx.protocol.bedrock.packet.ServerToClientHandshakePacket;
 import com.nukkitx.protocol.bedrock.util.EncryptionUtils;
 
-import net.minidev.json.JSONObject;
-
 import org.geysermc.common.window.CustomFormBuilder;
 import org.geysermc.common.window.CustomFormWindow;
 import org.geysermc.common.window.FormWindow;
@@ -152,7 +150,7 @@ private static void startEncryptionHandshake(GeyserSession session, PublicKey ke
 
         ServerToClientHandshakePacket packet = new ServerToClientHandshakePacket();
         packet.setJwt(EncryptionUtils.createHandshakeJwt(serverKeyPair, token).serialize());
-        session.getUpstream().sendPacketImmediately(packet);
+        session.sendUpstreamPacketImmediately(packet);
     }
 
     private static int AUTH_FORM_ID = 1336;

File: connector/src/main/java/org/geysermc/connector/utils/SkinUtils.java
Patch:
@@ -177,12 +177,12 @@ public static void requestAndHandleSkinAndCape(PlayerEntity entity, GeyserSessio
                                     PlayerListPacket playerRemovePacket = new PlayerListPacket();
                                     playerRemovePacket.setAction(PlayerListPacket.Action.REMOVE);
                                     playerRemovePacket.getEntries().add(updatedEntry);
-                                    session.getUpstream().sendPacket(playerRemovePacket);
+                                    session.sendUpstreamPacket(playerRemovePacket);
 
                                     PlayerListPacket playerAddPacket = new PlayerListPacket();
                                     playerAddPacket.setAction(PlayerListPacket.Action.ADD);
                                     playerAddPacket.getEntries().add(updatedEntry);
-                                    session.getUpstream().sendPacket(playerAddPacket);
+                                    session.sendUpstreamPacket(playerAddPacket);
                                 }
                             }
                         } catch (Exception e) {

File: connector/src/main/java/org/geysermc/connector/entity/EnderCrystalEntity.java
Patch:
@@ -31,7 +31,6 @@
 import com.nukkitx.math.vector.Vector3i;
 import com.nukkitx.protocol.bedrock.data.EntityData;
 import com.nukkitx.protocol.bedrock.data.EntityFlag;
-import com.nukkitx.protocol.bedrock.packet.AddEntityPacket;
 import org.geysermc.connector.entity.type.EntityType;
 import org.geysermc.connector.network.session.GeyserSession;
 

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/TropicalFishEntity.java
Patch:
@@ -28,7 +28,6 @@
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.EntityMetadata;
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.data.EntityData;
-import com.nukkitx.protocol.bedrock.packet.AddEntityPacket;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
 import org.geysermc.connector.entity.living.AbstractFishEntity;

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/BlockStateValues.java
Patch:
@@ -75,7 +75,6 @@ public static void storeBlockStateValues(Map.Entry<String, JsonNode> entry, Bloc
         }
 
         if (entry.getKey().contains("potted_")) {
-            System.out.println(entry.getKey().replace("potted_", ""));
             FLOWER_POT_VALUES.put(javaBlockState.getId(), entry.getKey().replace("potted_", ""));
             return;
         }

File: connector/src/main/java/org/geysermc/connector/entity/Entity.java
Patch:
@@ -109,7 +109,7 @@ public Entity(long entityId, long geyserId, EntityType entityType, Vector3f posi
 
     public void spawnEntity(GeyserSession session) {
         AddEntityPacket addEntityPacket = new AddEntityPacket();
-        addEntityPacket.setIdentifier("minecraft:" + entityType.name().toLowerCase());
+        addEntityPacket.setIdentifier(entityType.getIdentifier());
         addEntityPacket.setRuntimeEntityId(geyserId);
         addEntityPacket.setUniqueEntityId(geyserId);
         addEntityPacket.setPosition(position);

File: connector/src/main/java/org/geysermc/connector/entity/Entity.java
Patch:
@@ -93,6 +93,7 @@ public Entity(long entityId, long geyserId, EntityType entityType, Vector3f posi
         setPosition(position);
 
         metadata.put(EntityData.SCALE, 1f);
+        metadata.put(EntityData.COLOR, 0);
         metadata.put(EntityData.MAX_AIR, (short) 400);
         metadata.put(EntityData.AIR, (short) 0);
         metadata.put(EntityData.LEAD_HOLDER_EID, -1L);

File: connector/src/main/java/org/geysermc/connector/utils/BlockEntityUtils.java
Patch:
@@ -17,6 +17,9 @@ public static String getBedrockBlockEntityId(String id) {
         if (id.contains("piston_head"))
             return "PistonArm";
 
+        if (id.contains("trapped_chest"))
+            return "Chest";
+
         id = id.toLowerCase()
             .replace("minecraft:", "")
             .replace("_", " ");

File: connector/src/main/java/org/geysermc/connector/network/session/cache/TeleportCache.java
Patch:
@@ -25,6 +25,7 @@
 
 package org.geysermc.connector.network.session.cache;
 
+import com.nukkitx.math.vector.Vector3d;
 import com.nukkitx.math.vector.Vector3f;
 import lombok.AllArgsConstructor;
 import lombok.Data;
@@ -39,7 +40,7 @@ public class TeleportCache {
     private double x, y, z;
     private int teleportConfirmId;
 
-    public boolean canConfirm(Vector3f position) {
+    public boolean canConfirm(Vector3d position) {
         return (Math.abs(this.x - position.getX()) < ERROR &&
                 Math.abs(this.y - position.getY()) < ERROR_Y &&
                 Math.abs(this.z - position.getZ()) < ERROR);

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockMovePlayerTranslator.java
Patch:
@@ -25,6 +25,7 @@
 
 package org.geysermc.connector.network.translators.bedrock;
 
+import com.nukkitx.math.vector.Vector3d;
 import org.geysermc.common.ChatColor;
 import org.geysermc.connector.entity.Entity;
 import org.geysermc.connector.entity.PlayerEntity;
@@ -63,7 +64,7 @@ public void translate(MovePlayerPacket packet, GeyserSession session) {
         double javaY = packet.getPosition().getY() - EntityType.PLAYER.getOffset();
         if (packet.isOnGround()) javaY = Math.ceil(javaY * 2) / 2;
 
-        Vector3f position = Vector3f.from(Double.parseDouble(Float.toString(packet.getPosition().getX())), javaY,
+        Vector3d position = Vector3d.from(Double.parseDouble(Float.toString(packet.getPosition().getX())), javaY,
                 Double.parseDouble(Float.toString(packet.getPosition().getZ())));
 
         if(!session.confirmTeleport(position)){
@@ -82,7 +83,7 @@ public void translate(MovePlayerPacket packet, GeyserSession session) {
 
         // head yaw, pitch, head yaw
         Vector3f rotation = Vector3f.from(packet.getRotation().getY(), packet.getRotation().getX(), packet.getRotation().getY());
-        entity.setPosition(position);
+        entity.setPosition(packet.getPosition().sub(0, EntityType.PLAYER.getOffset(), 0));
         entity.setRotation(rotation);
 
         /*

File: bootstrap/bukkit/src/main/java/org/geysermc/platform/bukkit/GeyserBukkitPlugin.java
Patch:
@@ -64,6 +64,9 @@ public void onEnable() {
         saveConfig();
 
         this.geyserLogger = new GeyserBukkitLogger(getLogger(), geyserConfig.isDebugMode());
+
+        geyserConfig.loadFloodgate(this);
+
         this.connector = GeyserConnector.start(PlatformType.BUKKIT, this);
 
         this.geyserCommandManager = new GeyserBukkitCommandManager(this, connector);

File: bootstrap/bungeecord/src/main/java/org/geysermc/platform/bungeecord/GeyserBungeePlugin.java
Patch:
@@ -116,6 +116,9 @@ public void onEnable() {
         }
 
         this.geyserLogger = new GeyserBungeeLogger(getLogger(), geyserConfig.isDebugMode());
+
+        geyserConfig.loadFloodgate(this);
+
         this.connector = GeyserConnector.start(PlatformType.BUNGEECORD, this);
 
         this.geyserCommandManager = new GeyserBungeeCommandManager(connector);

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemEntry.java
Patch:
@@ -36,7 +36,6 @@ public class ItemEntry {
 
     private final String javaIdentifier;
     private final int javaId;
-
     private final int bedrockId;
     private final int bedrockData;
 

File: connector/src/main/java/org/geysermc/connector/utils/DimensionUtils.java
Patch:
@@ -38,6 +38,7 @@ public static void switchDimension(GeyserSession session, int javaDimension) {
             return;
 
         session.getEntityCache().removeAllEntities();
+        session.getItemFrameCache().clear();
         if (session.getPendingDimSwitches().getAndIncrement() > 0) {
             ChunkUtils.sendEmptyChunks(session, player.getPosition().toInt(), 3, true);
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockInventoryTransactionTranslator.java
Patch:
@@ -50,6 +50,7 @@
 import org.geysermc.connector.network.translators.Translators;
 import org.geysermc.connector.network.translators.item.ItemEntry;
 import org.geysermc.connector.network.translators.item.ItemTranslator;
+import org.geysermc.connector.network.translators.sound.EntitySoundInteractionHandler;
 import org.geysermc.connector.network.translators.world.block.BlockTranslator;
 import org.geysermc.connector.utils.InventoryUtils;
 
@@ -160,6 +161,8 @@ public void translate(InventoryTransactionPacket packet, GeyserSession session)
                                 InteractAction.INTERACT_AT, vector.getX(), vector.getY(), vector.getZ(), Hand.MAIN_HAND);
                         session.getDownstream().getSession().send(interactPacket);
                         session.getDownstream().getSession().send(interactAtPacket);
+
+                        EntitySoundInteractionHandler.handleEntityInteraction(session, vector, entity);
                         break;
                     case 1: //Attack
                         ClientPlayerInteractEntityPacket attackPacket = new ClientPlayerInteractEntityPacket((int) entity.getEntityId(),

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaBlockChangeTranslator.java
Patch:
@@ -32,7 +32,7 @@
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;
-import org.geysermc.connector.network.translators.sound.SoundInteractionHandler;
+import org.geysermc.connector.network.translators.sound.BlockSoundInteractionHandler;
 import org.geysermc.connector.network.translators.world.block.BlockTranslator;
 import org.geysermc.connector.utils.ChunkUtils;
 
@@ -103,6 +103,6 @@ private void checkInteract(GeyserSession session, ServerBlockChangePacket packet
         String identifier = BlockTranslator.getJavaIdBlockMap().inverse().get(packet.getRecord().getBlock());
         session.setInteracting(false);
         session.setLastInteractionPosition(null);
-        SoundInteractionHandler.handleBlockInteraction(session, lastInteractPos.toFloat(), identifier);
+        BlockSoundInteractionHandler.handleBlockInteraction(session, lastInteractPos.toFloat(), identifier);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/sound/SoundHandlerRegistry.java
Patch:
@@ -36,13 +36,13 @@
  */
 public class SoundHandlerRegistry {
 
-    static final Map<SoundHandler, SoundInteractionHandler> INTERACTION_HANDLERS = new HashMap<>();
+    static final Map<SoundHandler, SoundInteractionHandler<?>> INTERACTION_HANDLERS = new HashMap<>();
 
     static {
         Reflections ref = new Reflections("org.geysermc.connector.network.translators.sound");
         for (Class<?> clazz : ref.getTypesAnnotatedWith(SoundHandler.class)) {
             try {
-                SoundInteractionHandler interactionHandler = (SoundInteractionHandler) clazz.newInstance();
+                SoundInteractionHandler<?> interactionHandler = (SoundInteractionHandler<?>) clazz.newInstance();
                 SoundHandler annotation = clazz.getAnnotation(SoundHandler.class);
                 INTERACTION_HANDLERS.put(annotation, interactionHandler);
             } catch (InstantiationException | IllegalAccessException ex) {
@@ -63,7 +63,7 @@ public static void init() {
      *
      * @return a map of the interaction handlers
      */
-    public static Map<SoundHandler, SoundInteractionHandler> getInteractionHandlers() {
+    public static Map<SoundHandler, SoundInteractionHandler<?>> getInteractionHandlers() {
         return INTERACTION_HANDLERS;
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaChunkDataTranslator.java
Patch:
@@ -46,8 +46,6 @@
 import org.geysermc.connector.utils.ChunkUtils;
 import org.geysermc.connector.world.chunk.ChunkSection;
 
-import java.util.Map;
-
 @Translator(packet = ServerChunkDataPacket.class)
 public class JavaChunkDataTranslator extends PacketTranslator<ServerChunkDataPacket> {
 

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockInventoryTransactionTranslator.java
Patch:
@@ -116,7 +116,7 @@ public void translate(InventoryTransactionPacket packet, GeyserSession session)
                         session.getDownstream().getSession().send(useItemPacket);
                         break;
                     case 2:
-                        BlockState blockState = session.getChunkCache().getBlockAt(new Position(packet.getBlockPosition().getX(), packet.getBlockPosition().getY(), packet.getBlockPosition().getZ()));
+                        BlockState blockState = session.getConnector().getWorldManager().getBlockAt(session, packet.getBlockPosition().getX(), packet.getBlockPosition().getY(), packet.getBlockPosition().getZ());
                         double blockHardness = BlockTranslator.JAVA_RUNTIME_ID_TO_HARDNESS.get(blockState.getId());
                         if (session.getGameMode() == GameMode.CREATIVE || (session.getConnector().getConfig().isCacheChunks() && blockHardness == 0)) {
                             session.setLastBlockPlacedId(null);

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/DoubleChestInventoryTranslator.java
Patch:
@@ -112,7 +112,7 @@ public void openInventory(GeyserSession session, Inventory inventory) {
     public void closeInventory(GeyserSession session, Inventory inventory) {
         Vector3i holderPos = inventory.getHolderPosition();
         Position pos = new Position(holderPos.getX(), holderPos.getY(), holderPos.getZ());
-        BlockState realBlock = session.getChunkCache().getBlockAt(pos);
+        BlockState realBlock = session.getConnector().getWorldManager().getBlockAt(session, pos.getX(), pos.getY(), pos.getZ());
         UpdateBlockPacket blockPacket = new UpdateBlockPacket();
         blockPacket.setDataLayer(0);
         blockPacket.setBlockPosition(holderPos);
@@ -121,7 +121,7 @@ public void closeInventory(GeyserSession session, Inventory inventory) {
 
         holderPos = holderPos.add(Vector3i.UNIT_X);
         pos = new Position(holderPos.getX(), holderPos.getY(), holderPos.getZ());
-        realBlock = session.getChunkCache().getBlockAt(pos);
+        realBlock = session.getConnector().getWorldManager().getBlockAt(session, pos.getX(), pos.getY(), pos.getZ());
         blockPacket = new UpdateBlockPacket();
         blockPacket.setDataLayer(0);
         blockPacket.setBlockPosition(holderPos);

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/holder/BlockInventoryHolder.java
Patch:
@@ -82,7 +82,7 @@ public void openInventory(InventoryTranslator translator, GeyserSession session,
     public void closeInventory(InventoryTranslator translator, GeyserSession session, Inventory inventory) {
         Vector3i holderPos = inventory.getHolderPosition();
         Position pos = new Position(holderPos.getX(), holderPos.getY(), holderPos.getZ());
-        BlockState realBlock = session.getChunkCache().getBlockAt(pos);
+        BlockState realBlock = session.getConnector().getWorldManager().getBlockAt(session, pos.getX(), pos.getY(), pos.getZ());
         UpdateBlockPacket blockPacket = new UpdateBlockPacket();
         blockPacket.setDataLayer(0);
         blockPacket.setBlockPosition(holderPos);

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockInventoryTransactionTranslator.java
Patch:
@@ -118,7 +118,7 @@ public void translate(InventoryTransactionPacket packet, GeyserSession session)
                     case 2:
                         BlockState blockState = session.getChunkCache().getBlockAt(new Position(packet.getBlockPosition().getX(), packet.getBlockPosition().getY(), packet.getBlockPosition().getZ()));
                         double blockHardness = BlockTranslator.JAVA_RUNTIME_ID_TO_HARDNESS.get(blockState.getId());
-                        if (session.getGameMode() == GameMode.CREATIVE || blockHardness == 0) {
+                        if (session.getGameMode() == GameMode.CREATIVE || (session.getConnector().getConfig().isCacheChunks() && blockHardness == 0)) {
                             session.setLastBlockPlacedId(null);
                             session.setLastBlockPlacePosition(null);
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerActionAckTranslator.java
Patch:
@@ -48,9 +48,9 @@ public class JavaPlayerActionAckTranslator extends PacketTranslator<ServerPlayer
     @Override
     public void translate(ServerPlayerActionAckPacket packet, GeyserSession session) {
         LevelEventPacket levelEvent = new LevelEventPacket();
-        double blockHardness = BlockTranslator.JAVA_RUNTIME_ID_TO_HARDNESS.get(packet.getNewState().getId());
         switch (packet.getAction()) {
             case FINISH_DIGGING:
+                double blockHardness = BlockTranslator.JAVA_RUNTIME_ID_TO_HARDNESS.get(session.getBreakingBlock() == null ? 0 : session.getBreakingBlock().getId());
                 if (session.getGameMode() != GameMode.CREATIVE && blockHardness != 0) {
                     levelEvent.setType(LevelEventType.DESTROY);
                     levelEvent.setPosition(Vector3f.from(packet.getPosition().getX(), packet.getPosition().getY(), packet.getPosition().getZ()));
@@ -61,6 +61,7 @@ public void translate(ServerPlayerActionAckPacket packet, GeyserSession session)
                 ChunkUtils.updateBlock(session, packet.getNewState(), packet.getPosition());
                 break;
             case START_DIGGING:
+                blockHardness = BlockTranslator.JAVA_RUNTIME_ID_TO_HARDNESS.get(packet.getNewState().getId());
                 levelEvent.setType(LevelEventType.BLOCK_START_BREAK);
                 levelEvent.setPosition(Vector3f.from(
                         packet.getPosition().getX(),

File: bootstrap/bukkit/src/main/java/org/geysermc/platform/bukkit/GeyserBukkitLogger.java
Patch:
@@ -27,13 +27,13 @@
 
 import lombok.AllArgsConstructor;
 
-import org.geysermc.common.logger.IGeyserLogger;
+import org.geysermc.connector.GeyserLogger;
 
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
 @AllArgsConstructor
-public class GeyserBukkitLogger implements IGeyserLogger {
+public class GeyserBukkitLogger implements GeyserLogger {
 
     private Logger logger;
     private boolean debugMode;

File: bootstrap/bungeecord/src/main/java/org/geysermc/platform/bungeecord/GeyserBungeeLogger.java
Patch:
@@ -25,12 +25,12 @@
 
 package org.geysermc.platform.bungeecord;
 
-import org.geysermc.common.logger.IGeyserLogger;
+import org.geysermc.connector.GeyserLogger;
 
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-public class GeyserBungeeLogger implements IGeyserLogger {
+public class GeyserBungeeLogger implements GeyserLogger {
 
     private Logger logger;
     private boolean debugMode;

File: bootstrap/bungeecord/src/main/java/org/geysermc/platform/bungeecord/GeyserBungeePlugin.java
Patch:
@@ -32,7 +32,7 @@
 
 import org.geysermc.common.PlatformType;
 import org.geysermc.connector.GeyserConnector;
-import org.geysermc.common.bootstrap.IGeyserBootstrap;
+import org.geysermc.connector.bootstrap.GeyserBootstrap;
 import org.geysermc.connector.command.CommandManager;
 import org.geysermc.platform.bungeecord.command.GeyserBungeeCommandExecutor;
 import org.geysermc.platform.bungeecord.command.GeyserBungeeCommandManager;
@@ -44,7 +44,7 @@
 import java.util.UUID;
 import java.util.logging.Level;
 
-public class GeyserBungeePlugin extends Plugin implements IGeyserBootstrap {
+public class GeyserBungeePlugin extends Plugin implements GeyserBootstrap {
 
     private GeyserBungeeCommandManager geyserCommandManager;
     private GeyserBungeeConfiguration geyserConfig;

File: bootstrap/sponge/src/main/java/org/geysermc/platform/sponge/GeyserSpongeLogger.java
Patch:
@@ -27,11 +27,11 @@
 
 import lombok.AllArgsConstructor;
 
-import org.geysermc.common.logger.IGeyserLogger;
+import org.geysermc.connector.GeyserLogger;
 import org.slf4j.Logger;
 
 @AllArgsConstructor
-public class GeyserSpongeLogger implements IGeyserLogger {
+public class GeyserSpongeLogger implements GeyserLogger {
 
     private Logger logger;
     private boolean debugMode;

File: bootstrap/sponge/src/main/java/org/geysermc/platform/sponge/GeyserSpongePlugin.java
Patch:
@@ -31,8 +31,7 @@
 import ninja.leaping.configurate.yaml.YAMLConfigurationLoader;
 
 import org.geysermc.common.PlatformType;
-import org.geysermc.common.bootstrap.IGeyserBootstrap;
-import org.geysermc.common.command.ICommandManager;
+import org.geysermc.connector.bootstrap.GeyserBootstrap;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.command.CommandManager;
 import org.geysermc.connector.utils.FileUtils;
@@ -51,7 +50,7 @@
 import java.util.UUID;
 
 @Plugin(id = "geyser", name = GeyserConnector.NAME + "-Sponge", version = GeyserConnector.VERSION, url = "https://geysermc.org", authors = "GeyserMC")
-public class GeyserSpongePlugin implements IGeyserBootstrap {
+public class GeyserSpongePlugin implements GeyserBootstrap {
 
     @Inject
     private Logger logger;

File: bootstrap/standalone/src/main/java/org/geysermc/platform/standalone/LoopbackUtil.java
Patch:
@@ -6,14 +6,13 @@
 import java.nio.file.Paths;
 
 import org.geysermc.common.ChatColor;
-import org.geysermc.platform.standalone.console.GeyserLogger;
 
 public class LoopbackUtil {
     private static final String checkExemption = "powershell -Command \"CheckNetIsolation LoopbackExempt -s\""; // Java's Exec feature runs as CMD, NetIsolation is only accessible from PowerShell.
     private static final String loopbackCommand = "powershell -Command \"CheckNetIsolation LoopbackExempt -a -n='Microsoft.MinecraftUWP_8wekyb3d8bbwe'\"";
     private static final String startScript = "powershell -Command \"Start-Process 'cmd' -ArgumentList /c,%temp%/loopback_minecraft.bat -Verb runAs\"";
 
-    public static void checkLoopback(GeyserLogger geyserLogger) {
+    public static void checkLoopback(GeyserStandaloneLogger geyserLogger) {
         if (System.getProperty("os.name").equalsIgnoreCase("Windows 10")) {
             try {
                 Process process = Runtime.getRuntime().exec(checkExemption);

File: bootstrap/velocity/src/main/java/org/geysermc/platform/velocity/GeyserVelocityLogger.java
Patch:
@@ -27,11 +27,11 @@
 
 import lombok.AllArgsConstructor;
 
-import org.geysermc.common.logger.IGeyserLogger;
+import org.geysermc.connector.GeyserLogger;
 import org.slf4j.Logger;
 
 @AllArgsConstructor
-public class GeyserVelocityLogger implements IGeyserLogger {
+public class GeyserVelocityLogger implements GeyserLogger {
 
     private Logger logger;
     private boolean debugMode;

File: bootstrap/velocity/src/main/java/org/geysermc/platform/velocity/GeyserVelocityPlugin.java
Patch:
@@ -34,8 +34,8 @@
 import com.velocitypowered.api.plugin.Plugin;
 
 import org.geysermc.common.PlatformType;
-import org.geysermc.common.bootstrap.IGeyserBootstrap;
 import org.geysermc.connector.GeyserConnector;
+import org.geysermc.connector.bootstrap.GeyserBootstrap;
 import org.geysermc.connector.utils.FileUtils;
 import org.geysermc.platform.velocity.command.GeyserVelocityCommandExecutor;
 import org.geysermc.platform.velocity.command.GeyserVelocityCommandManager;
@@ -46,7 +46,7 @@
 import java.util.UUID;
 
 @Plugin(id = "geyser", name = GeyserConnector.NAME + "-Velocity", version = GeyserConnector.VERSION, url = "https://geysermc.org", authors = "GeyserMC")
-public class GeyserVelocityPlugin implements IGeyserBootstrap {
+public class GeyserVelocityPlugin implements GeyserBootstrap {
 
     @Inject
     private Logger logger;

File: connector/src/main/java/org/geysermc/connector/entity/FallingBlockEntity.java
Patch:
@@ -28,7 +28,7 @@
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.data.EntityData;
 import org.geysermc.connector.entity.type.EntityType;
-import org.geysermc.connector.network.translators.block.BlockTranslator;
+import org.geysermc.connector.network.translators.world.block.BlockTranslator;
 
 public class FallingBlockEntity extends Entity {
 

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/horse/LlamaEntity.java
Patch:
@@ -32,7 +32,7 @@
 import com.nukkitx.protocol.bedrock.packet.MobArmorEquipmentPacket;
 import org.geysermc.connector.entity.type.EntityType;
 import org.geysermc.connector.network.session.GeyserSession;
-import org.geysermc.connector.network.translators.block.BlockTranslator;
+import org.geysermc.connector.network.translators.world.block.BlockTranslator;
 
 public class LlamaEntity extends ChestedHorseEntity {
 

File: connector/src/main/java/org/geysermc/connector/entity/living/monster/EndermanEntity.java
Patch:
@@ -32,7 +32,7 @@
 import com.nukkitx.protocol.bedrock.data.EntityFlag;
 import org.geysermc.connector.entity.type.EntityType;
 import org.geysermc.connector.network.session.GeyserSession;
-import org.geysermc.connector.network.translators.block.BlockTranslator;
+import org.geysermc.connector.network.translators.world.block.BlockTranslator;
 
 public class EndermanEntity extends MonsterEntity {
 

File: connector/src/main/java/org/geysermc/connector/network/UpstreamPacketHandler.java
Patch:
@@ -28,7 +28,7 @@
 import com.nukkitx.protocol.bedrock.BedrockPacket;
 import com.nukkitx.protocol.bedrock.packet.*;
 import org.geysermc.common.AuthType;
-import org.geysermc.common.IGeyserConfiguration;
+import org.geysermc.connector.GeyserConfiguration;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.Registry;
@@ -94,7 +94,7 @@ public boolean handle(ModalFormResponsePacket packet) {
 
     private boolean couldLoginUserByName(String bedrockUsername) {
         if (connector.getConfig().getUserAuths() != null) {
-            IGeyserConfiguration.IUserAuthenticationInfo info = connector.getConfig().getUserAuths().get(bedrockUsername);
+            GeyserConfiguration.IUserAuthenticationInfo info = connector.getConfig().getUserAuths().get(bedrockUsername);
 
             if (info != null) {
                 connector.getLogger().info("using stored credentials for bedrock user " + session.getAuthData().getName());

File: connector/src/main/java/org/geysermc/connector/network/translators/Translators.java
Patch:
@@ -33,8 +33,8 @@
 import com.github.steveice10.mc.protocol.data.game.window.WindowType;
 import com.nukkitx.protocol.bedrock.data.ContainerType;
 import org.geysermc.connector.GeyserConnector;
-import org.geysermc.connector.network.translators.block.BlockTranslator;
-import org.geysermc.connector.network.translators.block.entity.*;
+import org.geysermc.connector.network.translators.world.block.BlockTranslator;
+import org.geysermc.connector.network.translators.world.block.entity.*;
 import org.geysermc.connector.network.translators.inventory.*;
 import org.geysermc.connector.network.translators.inventory.updater.ContainerInventoryUpdater;
 import org.geysermc.connector.network.translators.inventory.updater.InventoryUpdater;
@@ -117,7 +117,7 @@ public static void start() {
     }
 
     private static void registerBlockEntityTranslators() {
-        Reflections ref = new Reflections("org.geysermc.connector.network.translators.block.entity");
+        Reflections ref = new Reflections("org.geysermc.connector.network.translators.world.block.entity");
 
         for (Class<?> clazz : ref.getTypesAnnotatedWith(BlockEntity.class)) {
 

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockActionTranslator.java
Patch:
@@ -28,9 +28,7 @@
 import java.util.concurrent.TimeUnit;
 
 import com.nukkitx.protocol.bedrock.data.LevelEventType;
-import com.nukkitx.protocol.bedrock.data.SoundEvent;
 import com.nukkitx.protocol.bedrock.packet.LevelEventPacket;
-import com.nukkitx.protocol.bedrock.packet.LevelSoundEventPacket;
 import org.geysermc.connector.entity.Entity;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
@@ -45,7 +43,7 @@
 import com.nukkitx.math.vector.Vector3i;
 import com.nukkitx.protocol.bedrock.packet.PlayStatusPacket;
 import com.nukkitx.protocol.bedrock.packet.PlayerActionPacket;
-import org.geysermc.connector.network.translators.block.BlockTranslator;
+import org.geysermc.connector.network.translators.world.block.BlockTranslator;
 
 @Translator(packet = PlayerActionPacket.class)
 public class BedrockActionTranslator extends PacketTranslator<PlayerActionPacket> {

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/BlockInventoryTranslator.java
Patch:
@@ -29,7 +29,7 @@
 import com.nukkitx.protocol.bedrock.data.ContainerType;
 import org.geysermc.connector.inventory.Inventory;
 import org.geysermc.connector.network.session.GeyserSession;
-import org.geysermc.connector.network.translators.block.BlockTranslator;
+import org.geysermc.connector.network.translators.world.block.BlockTranslator;
 import org.geysermc.connector.network.translators.inventory.holder.BlockInventoryHolder;
 import org.geysermc.connector.network.translators.inventory.holder.InventoryHolder;
 import org.geysermc.connector.network.translators.inventory.updater.InventoryUpdater;

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/DoubleChestInventoryTranslator.java
Patch:
@@ -35,7 +35,7 @@
 import com.nukkitx.protocol.bedrock.packet.UpdateBlockPacket;
 import org.geysermc.connector.inventory.Inventory;
 import org.geysermc.connector.network.session.GeyserSession;
-import org.geysermc.connector.network.translators.block.BlockTranslator;
+import org.geysermc.connector.network.translators.world.block.BlockTranslator;
 import org.geysermc.connector.network.translators.inventory.updater.ChestInventoryUpdater;
 import org.geysermc.connector.network.translators.inventory.updater.InventoryUpdater;
 

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/holder/BlockInventoryHolder.java
Patch:
@@ -36,7 +36,7 @@
 import lombok.AllArgsConstructor;
 import org.geysermc.connector.inventory.Inventory;
 import org.geysermc.connector.network.session.GeyserSession;
-import org.geysermc.connector.network.translators.block.BlockTranslator;
+import org.geysermc.connector.network.translators.world.block.BlockTranslator;
 import org.geysermc.connector.network.translators.inventory.InventoryTranslator;
 
 @AllArgsConstructor

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaBlockChangeTranslator.java
Patch:
@@ -31,7 +31,7 @@
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;
-import org.geysermc.connector.network.translators.block.BlockTranslator;
+import org.geysermc.connector.network.translators.world.block.BlockTranslator;
 import org.geysermc.connector.utils.ChunkUtils;
 
 import com.github.steveice10.mc.protocol.packet.ingame.server.world.ServerBlockChangePacket;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaPlayEffectTranslator.java
Patch:
@@ -37,7 +37,7 @@
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;
-import org.geysermc.connector.network.translators.block.BlockTranslator;
+import org.geysermc.connector.network.translators.world.block.BlockTranslator;
 import org.geysermc.connector.network.translators.effect.Effect;
 import org.geysermc.connector.utils.EffectUtils;
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaSpawnParticleTranslator.java
Patch:
@@ -35,7 +35,7 @@
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;
 import org.geysermc.connector.network.translators.Translators;
-import org.geysermc.connector.network.translators.block.BlockTranslator;
+import org.geysermc.connector.network.translators.world.block.BlockTranslator;
 import org.geysermc.connector.utils.EffectUtils;
 
 import com.github.steveice10.mc.protocol.packet.ingame.server.world.ServerSpawnParticlePacket;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaUnloadChunkTranslator.java
Patch:
@@ -28,7 +28,7 @@
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;
-import org.geysermc.connector.world.chunk.ChunkPosition;
+import org.geysermc.connector.network.translators.world.chunk.ChunkPosition;
 
 import com.github.steveice10.mc.protocol.packet.ingame.server.world.ServerUnloadChunkPacket;
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaUpdateTileEntityTranslator.java
Patch:
@@ -30,8 +30,8 @@
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;
-import org.geysermc.connector.network.translators.block.entity.BlockEntity;
-import org.geysermc.connector.network.translators.block.entity.BlockEntityTranslator;
+import org.geysermc.connector.network.translators.world.block.entity.BlockEntity;
+import org.geysermc.connector.network.translators.world.block.entity.BlockEntityTranslator;
 import org.geysermc.connector.utils.BlockEntityUtils;
 import org.geysermc.connector.utils.ChunkUtils;
 

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/BlockStateValues.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.network.translators.block;
+package org.geysermc.connector.network.translators.world.block;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.github.steveice10.mc.protocol.data.game.world.block.BlockState;

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/BlockTranslator.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.network.translators.block;
+package org.geysermc.connector.network.translators.world.block;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.github.steveice10.mc.protocol.data.game.world.block.BlockState;
@@ -47,7 +47,7 @@
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import org.geysermc.connector.GeyserConnector;
-import org.geysermc.connector.network.translators.block.entity.BlockEntity;
+import org.geysermc.connector.network.translators.world.block.entity.BlockEntity;
 import org.geysermc.connector.utils.Toolbox;
 import org.reflections.Reflections;
 
@@ -109,7 +109,7 @@ public class BlockTranslator {
         addedStatesMap.defaultReturnValue(-1);
         List<CompoundTag> paletteList = new ArrayList<>();
 
-        Reflections ref = new Reflections("org.geysermc.connector.network.translators.block.entity");
+        Reflections ref = new Reflections("org.geysermc.connector.network.translators.world.block.entity");
         ref.getTypesAnnotatedWith(BlockEntity.class);
 
         int waterRuntimeId = -1;

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/entity/BannerBlockEntityTranslator.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.network.translators.block.entity;
+package org.geysermc.connector.network.translators.world.block.entity;
 
 import com.github.steveice10.mc.protocol.data.game.world.block.BlockState;
 import com.github.steveice10.opennbt.tag.builtin.CompoundTag;
@@ -32,7 +32,7 @@
 import com.nukkitx.nbt.tag.IntTag;
 import com.nukkitx.nbt.tag.StringTag;
 import com.nukkitx.nbt.tag.Tag;
-import org.geysermc.connector.network.translators.block.BlockStateValues;
+import org.geysermc.connector.network.translators.world.block.BlockStateValues;
 
 import java.util.ArrayList;
 import java.util.List;

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/entity/BedBlockEntityTranslator.java
Patch:
@@ -23,14 +23,14 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.network.translators.block.entity;
+package org.geysermc.connector.network.translators.world.block.entity;
 
 import com.github.steveice10.mc.protocol.data.game.world.block.BlockState;
 import com.github.steveice10.opennbt.tag.builtin.CompoundTag;
 import com.nukkitx.nbt.CompoundTagBuilder;
 import com.nukkitx.nbt.tag.ByteTag;
 import com.nukkitx.nbt.tag.Tag;
-import org.geysermc.connector.network.translators.block.BlockStateValues;
+import org.geysermc.connector.network.translators.world.block.BlockStateValues;
 
 import java.util.ArrayList;
 import java.util.List;

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/entity/BlockEntity.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.network.translators.block.entity;
+package org.geysermc.connector.network.translators.world.block.entity;
 
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/entity/BlockEntityTranslator.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.network.translators.block.entity;
+package org.geysermc.connector.network.translators.world.block.entity;
 
 import com.github.steveice10.mc.protocol.data.game.world.block.BlockState;
 import com.github.steveice10.opennbt.tag.builtin.CompoundTag;

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/entity/CampfireBlockEntityTranslator.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.network.translators.block.entity;
+package org.geysermc.connector.network.translators.world.block.entity;
 
 import com.github.steveice10.mc.protocol.data.game.world.block.BlockState;
 import com.github.steveice10.opennbt.tag.builtin.CompoundTag;

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/entity/EmptyBlockEntityTranslator.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.network.translators.block.entity;
+package org.geysermc.connector.network.translators.world.block.entity;
 
 import com.github.steveice10.mc.protocol.data.game.world.block.BlockState;
 import com.github.steveice10.opennbt.tag.builtin.CompoundTag;

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/entity/EndGatewayBlockEntityTranslator.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.network.translators.block.entity;
+package org.geysermc.connector.network.translators.world.block.entity;
 
 import com.github.steveice10.mc.protocol.data.game.world.block.BlockState;
 import com.github.steveice10.opennbt.tag.builtin.CompoundTag;

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/entity/RequiresBlockState.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.network.translators.block.entity;
+package org.geysermc.connector.network.translators.world.block.entity;
 
 import com.github.steveice10.mc.protocol.data.game.world.block.BlockState;
 

File: connector/src/main/java/org/geysermc/connector/network/translators/world/block/entity/SignBlockEntityTranslator.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.network.translators.block.entity;
+package org.geysermc.connector.network.translators.world.block.entity;
 
 import com.github.steveice10.mc.protocol.data.game.world.block.BlockState;
 import com.github.steveice10.mc.protocol.data.message.Message;

File: connector/src/main/java/org/geysermc/connector/utils/BlockEntityUtils.java
Patch:
@@ -6,7 +6,7 @@
 
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.Translators;
-import org.geysermc.connector.network.translators.block.entity.BlockEntityTranslator;
+import org.geysermc.connector.network.translators.world.block.entity.BlockEntityTranslator;
 
 public class BlockEntityUtils {
 

File: connector/src/main/java/org/geysermc/connector/utils/BlockUtils.java
Patch:
@@ -28,7 +28,7 @@
 import com.github.steveice10.mc.protocol.data.game.entity.Effect;
 import com.github.steveice10.opennbt.tag.builtin.CompoundTag;
 import org.geysermc.connector.entity.PlayerEntity;
-import org.geysermc.connector.network.translators.block.BlockTranslator;
+import org.geysermc.connector.network.translators.world.block.BlockTranslator;
 import org.geysermc.connector.network.translators.item.ItemEntry;
 import org.geysermc.connector.network.translators.item.ToolItemEntry;
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityTeleportTranslator.java
Patch:
@@ -44,6 +44,6 @@ public void translate(ServerEntityTeleportPacket packet, GeyserSession session)
         }
         if (entity == null) return;
 
-        entity.moveAbsolute(session, Vector3f.from(packet.getX(), packet.getY(), packet.getZ()), packet.getYaw(), packet.getPitch(), packet.isOnGround());
+        entity.moveAbsolute(session, Vector3f.from(packet.getX(), packet.getY(), packet.getZ()), packet.getYaw(), packet.getPitch(), packet.isOnGround(), false);
     }
 }

File: connector/src/main/java/org/geysermc/connector/entity/PlayerEntity.java
Patch:
@@ -101,6 +101,8 @@ public void spawnEntity(GeyserSession session) {
     }
 
     public void sendPlayer(GeyserSession session) {
+        if(session.getEntityCache().getPlayerEntity(uuid) == null)
+            return;
         if (getLastSkinUpdate() == -1) {
             if (playerList) {
                 PlayerListPacket playerList = new PlayerListPacket();

File: connector/src/main/java/org/geysermc/connector/utils/SkinUtils.java
Patch:
@@ -155,7 +155,7 @@ public static void requestAndHandleSkinAndCape(PlayerEntity entity, GeyserSessio
                                 cape = SkinProvider.getOrDefault(SkinProvider.requestUnofficialCape(
                                         cape, entity.getUuid(),
                                         entity.getUsername(), false
-                                ), SkinProvider.EMPTY_CAPE, SkinProvider.UnofficalCape.VALUES.length * 3);
+                                ), SkinProvider.EMPTY_CAPE, SkinProvider.CapeProvider.VALUES.length * 3);
                             }
 
                             if (entity.getLastSkinUpdate() < skin.getRequestedOn()) {

File: connector/src/main/java/org/geysermc/connector/network/translators/ItemStackTranslator.java
Patch:
@@ -126,7 +126,7 @@ private com.nukkitx.nbt.tag.Tag translateToBedrockNBT(com.github.steveice10.open
 
         if (tag instanceof StringTag) {
             StringTag stringTag = (StringTag) tag;
-            return new com.nukkitx.nbt.tag.StringTag(stringTag.getName(), MessageUtils.getBedrockMessage(Message.fromString(stringTag.getValue())));
+            return new com.nukkitx.nbt.tag.StringTag(stringTag.getName(), stringTag.getValue());
         }
 
         if (tag instanceof ListTag) {

File: connector/src/main/java/org/geysermc/connector/network/translators/ItemStackTranslator.java
Patch:
@@ -54,7 +54,7 @@ public ItemData translateToBedrock(ItemStack itemStack, ItemEntry itemEntry) {
     public ItemStack translateToJava(ItemData itemData, ItemEntry itemEntry) {
         if (itemData == null) return null;
         if (itemData.getTag() == null) {
-            return new ItemStack(itemEntry.getJavaId(), itemData.getCount());
+            return new ItemStack(itemEntry.getJavaId(), itemData.getCount(), new com.github.steveice10.opennbt.tag.builtin.CompoundTag(""));
         }
         return new ItemStack(itemEntry.getJavaId(), itemData.getCount(), this.translateToJavaNBT(itemData.getTag()));
     }

File: connector/src/main/java/org/geysermc/connector/command/defaults/ReloadCommand.java
Patch:
@@ -48,7 +48,7 @@ public void execute(CommandSender sender, String[] args) {
         }
         sender.sendMessage(ChatColor.YELLOW + "Reloading Geyser configurations... all connected bedrock clients will be kicked.");
         for (GeyserSession session : connector.getPlayers().values()) {
-            session.getUpstream().disconnect("Geyser has been reloaded... sorry for the inconvenience!");
+            session.disconnect("Geyser has been reloaded... sorry for the inconvenience!");
         }
         connector.reload();
     }

File: connector/src/main/java/org/geysermc/connector/network/UpstreamPacketHandler.java
Patch:
@@ -47,10 +47,10 @@ private boolean translateAndDefault(BedrockPacket packet) {
     @Override
     public boolean handle(LoginPacket loginPacket) {
         if (loginPacket.getProtocolVersion() > GeyserConnector.BEDROCK_PACKET_CODEC.getProtocolVersion()) {
-            session.getUpstream().disconnect("Outdated Geyser proxy! I'm still on " + GeyserConnector.BEDROCK_PACKET_CODEC.getMinecraftVersion());
+            session.disconnect("Outdated Geyser proxy! I'm still on " + GeyserConnector.BEDROCK_PACKET_CODEC.getMinecraftVersion());
             return true;
         } else if (loginPacket.getProtocolVersion() < GeyserConnector.BEDROCK_PACKET_CODEC.getProtocolVersion()) {
-            session.getUpstream().disconnect("Outdated Bedrock client! Please use " + GeyserConnector.BEDROCK_PACKET_CODEC.getMinecraftVersion());
+            session.disconnect("Outdated Bedrock client! Please use " + GeyserConnector.BEDROCK_PACKET_CODEC.getMinecraftVersion());
             return true;
         }
 
@@ -80,7 +80,7 @@ public boolean handle(ResourcePackClientResponsePacket packet) {
                 session.getUpstream().sendPacket(stack);
                 break;
             default:
-                session.getUpstream().disconnect("disconnectionScreen.resourcePack");
+                session.disconnect("disconnectionScreen.resourcePack");
                 break;
         }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockMovePlayerTranslator.java
Patch:
@@ -67,8 +67,10 @@ public void translate(MovePlayerPacket packet, GeyserSession session) {
 
         double javaY = packet.getPosition().getY() - EntityType.PLAYER.getOffset();
         if (packet.isOnGround()) javaY = Math.ceil(javaY * 2) / 2;
+        // We need to parse the float as a string since casting a float to a double causes us to
+        // lose precision and thus, causes players to get stuck when walking near walls
         ClientPlayerPositionRotationPacket playerPositionRotationPacket = new ClientPlayerPositionRotationPacket(
-                packet.isOnGround(), GenericMath.round(packet.getPosition().getX(), 4), javaY, GenericMath.round(packet.getPosition().getZ(), 4), packet.getRotation().getY(), packet.getRotation().getX()
+                packet.isOnGround(), Double.parseDouble(Float.toString(packet.getPosition().getX())), javaY, Double.parseDouble(Float.toString(packet.getPosition().getZ())), packet.getRotation().getY(), packet.getRotation().getX()
         );
 
         // head yaw, pitch, head yaw

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemTranslator.java
Patch:
@@ -45,6 +45,9 @@ public class ItemTranslator {
     private Int2ObjectMap<ItemStackTranslator> itemTranslators = new Int2ObjectOpenHashMap();
     private List<NbtItemStackTranslator> nbtItemTranslators;
     private Map<String, ItemEntry> javaIdentifierMap = new HashMap<>();
+	
+	// Shield ID, used in Entity.java
+    public static final int SHIELD = 829;
 
     public void init() {
         Reflections ref = new Reflections("org.geysermc.connector.network.translators.item");

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaMapDataTranslator.java
Patch:
@@ -51,13 +51,12 @@ public void translate(ServerMapDataPacket packet, GeyserSession session) {
             mapItemDataPacket.setWidth(data.getColumns());
             mapItemDataPacket.setHeight(data.getRows());
 
-            // Every int entry is an ARGB color
+            // Every int entry is an ABGR color
             int[] colors = new int[data.getData().length];
 
             int idx = 0;
             for (byte colorId : data.getData()) {
-                colors[idx] = MapColor.fromId(colorId).toARGB();
-                idx++;
+                colors[idx++] = MapColor.fromId(colorId & 0xFF).toABGR();
             }
 
             mapItemDataPacket.setColors(colors);

File: connector/src/main/java/org/geysermc/connector/utils/SoundUtils.java
Patch:
@@ -84,7 +84,7 @@ public static SoundMapping fromJava(String java) {
     public static SoundEvent toSoundEvent(String sound) {
         try {
             return SoundEvent.valueOf(sound.toUpperCase().replaceAll("\\.", "_"));
-        } catch (IllegalArgumentException ex) {
+        } catch (Exception ex) {
             return null;
         }
     }

File: connector/src/main/java/org/geysermc/connector/command/defaults/ReloadCommand.java
Patch:
@@ -48,7 +48,7 @@ public void execute(CommandSender sender, String[] args) {
         }
         sender.sendMessage(ChatColor.YELLOW + "Reloading Geyser configurations... all connected bedrock clients will be kicked.");
         for (GeyserSession session : connector.getPlayers().values()) {
-            session.getUpstream().disconnect("Geyser has been reloaded... sorry for the inconvenience!");
+            session.disconnect("Geyser has been reloaded... sorry for the inconvenience!");
         }
         connector.reload();
     }

File: connector/src/main/java/org/geysermc/connector/network/UpstreamPacketHandler.java
Patch:
@@ -47,10 +47,10 @@ private boolean translateAndDefault(BedrockPacket packet) {
     @Override
     public boolean handle(LoginPacket loginPacket) {
         if (loginPacket.getProtocolVersion() > GeyserConnector.BEDROCK_PACKET_CODEC.getProtocolVersion()) {
-            session.getUpstream().disconnect("Outdated Geyser proxy! I'm still on " + GeyserConnector.BEDROCK_PACKET_CODEC.getMinecraftVersion());
+            session.disconnect("Outdated Geyser proxy! I'm still on " + GeyserConnector.BEDROCK_PACKET_CODEC.getMinecraftVersion());
             return true;
         } else if (loginPacket.getProtocolVersion() < GeyserConnector.BEDROCK_PACKET_CODEC.getProtocolVersion()) {
-            session.getUpstream().disconnect("Outdated Bedrock client! Please use " + GeyserConnector.BEDROCK_PACKET_CODEC.getMinecraftVersion());
+            session.disconnect("Outdated Bedrock client! Please use " + GeyserConnector.BEDROCK_PACKET_CODEC.getMinecraftVersion());
             return true;
         }
 
@@ -80,7 +80,7 @@ public boolean handle(ResourcePackClientResponsePacket packet) {
                 session.getUpstream().sendPacket(stack);
                 break;
             default:
-                session.getUpstream().disconnect("disconnectionScreen.resourcePack");
+                session.disconnect("disconnectionScreen.resourcePack");
                 break;
         }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaMapDataTranslator.java
Patch:
@@ -51,13 +51,12 @@ public void translate(ServerMapDataPacket packet, GeyserSession session) {
             mapItemDataPacket.setWidth(data.getColumns());
             mapItemDataPacket.setHeight(data.getRows());
 
-            // Every int entry is an ARGB color
+            // Every int entry is an ABGR color
             int[] colors = new int[data.getData().length];
 
             int idx = 0;
             for (byte colorId : data.getData()) {
-                colors[idx] = MapColor.fromId(colorId).toARGB();
-                idx++;
+                colors[idx++] = MapColor.fromId(colorId & 0xFF).toABGR();
             }
 
             mapItemDataPacket.setColors(colors);

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockMovePlayerTranslator.java
Patch:
@@ -67,8 +67,10 @@ public void translate(MovePlayerPacket packet, GeyserSession session) {
 
         double javaY = packet.getPosition().getY() - EntityType.PLAYER.getOffset();
         if (packet.isOnGround()) javaY = Math.ceil(javaY * 2) / 2;
+        // We need to parse the float as a string since casting a float to a double causes us to
+        // lose precision and thus, causes players to get stuck when walking near walls
         ClientPlayerPositionRotationPacket playerPositionRotationPacket = new ClientPlayerPositionRotationPacket(
-                packet.isOnGround(), GenericMath.round(packet.getPosition().getX(), 4), javaY, GenericMath.round(packet.getPosition().getZ(), 4), packet.getRotation().getY(), packet.getRotation().getX()
+                packet.isOnGround(), Double.parseDouble(Float.toString(packet.getPosition().getX())), javaY, Double.parseDouble(Float.toString(packet.getPosition().getZ())), packet.getRotation().getY(), packet.getRotation().getX()
         );
 
         // head yaw, pitch, head yaw

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemTranslator.java
Patch:
@@ -45,6 +45,9 @@ public class ItemTranslator {
     private Int2ObjectMap<ItemStackTranslator> itemTranslators = new Int2ObjectOpenHashMap();
     private List<NbtItemStackTranslator> nbtItemTranslators;
     private Map<String, ItemEntry> javaIdentifierMap = new HashMap<>();
+	
+	// Shield ID, used in Entity.java
+    public static final int SHIELD = 829;
 
     public void init() {
         Reflections ref = new Reflections("org.geysermc.connector.network.translators.item");

File: connector/src/main/java/org/geysermc/connector/entity/ItemEntity.java
Patch:
@@ -49,7 +49,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
             itemPacket.setUniqueEntityId(geyserId);
             itemPacket.setFromFishing(false);
             itemPacket.getMetadata().putAll(metadata);
-            itemPacket.setItemInHand(Translators.getItemTranslator().translateToBedrock((ItemStack) entityMetadata.getValue()));
+            itemPacket.setItemInHand(Translators.getItemTranslator().translateToBedrock(session, (ItemStack) entityMetadata.getValue()));
             session.getUpstream().sendPacket(itemPacket);
         }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/Translators.java
Patch:
@@ -109,6 +109,7 @@ public static void start() {
         }
         
         itemTranslator = new ItemTranslator();
+        itemTranslator.init();
         BlockTranslator.init();
 
         registerBlockEntityTranslators();

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/action/InventoryActionDataTranslator.java
Patch:
@@ -61,13 +61,13 @@ public static void translate(InventoryTranslator translator, GeyserSession sessi
                 worldAction = action;
             } else if (action.getSource().getContainerId() == ContainerId.CURSOR && action.getSlot() == 0) {
                 cursorAction = action;
-                ItemData translatedCursor = Translators.getItemTranslator().translateToBedrock(session.getInventory().getCursor());
+                ItemData translatedCursor = Translators.getItemTranslator().translateToBedrock(session, session.getInventory().getCursor());
                 if (!translatedCursor.equals(action.getFromItem())) {
                     refresh = true;
                 }
             } else {
                 containerAction = action;
-                ItemData translatedItem = Translators.getItemTranslator().translateToBedrock(inventory.getItem(translator.bedrockSlotToJava(action)));
+                ItemData translatedItem = Translators.getItemTranslator().translateToBedrock(session, inventory.getItem(translator.bedrockSlotToJava(action)));
                 if (!translatedItem.equals(action.getFromItem())) {
                     refresh = true;
                 }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/updater/ChestInventoryUpdater.java
Patch:
@@ -45,7 +45,7 @@ public void updateInventory(InventoryTranslator translator, GeyserSession sessio
         ItemData[] bedrockItems = new ItemData[paddedSize];
         for (int i = 0; i < bedrockItems.length; i++) {
             if (i <= translator.size) {
-                bedrockItems[i] = Translators.getItemTranslator().translateToBedrock(inventory.getItem(i));
+                bedrockItems[i] = Translators.getItemTranslator().translateToBedrock(session, inventory.getItem(i));
             } else {
                 bedrockItems[i] = ItemData.AIR;
             }
@@ -65,7 +65,7 @@ public boolean updateSlot(InventoryTranslator translator, GeyserSession session,
         InventorySlotPacket slotPacket = new InventorySlotPacket();
         slotPacket.setContainerId(inventory.getId());
         slotPacket.setSlot(translator.javaSlotToBedrock(javaSlot));
-        slotPacket.setItem(Translators.getItemTranslator().translateToBedrock(inventory.getItem(javaSlot)));
+        slotPacket.setItem(Translators.getItemTranslator().translateToBedrock(session, inventory.getItem(javaSlot)));
         session.getUpstream().sendPacket(slotPacket);
         return true;
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/updater/ContainerInventoryUpdater.java
Patch:
@@ -40,7 +40,7 @@ public void updateInventory(InventoryTranslator translator, GeyserSession sessio
 
         ItemData[] bedrockItems = new ItemData[translator.size];
         for (int i = 0; i < bedrockItems.length; i++) {
-            bedrockItems[translator.javaSlotToBedrock(i)] = Translators.getItemTranslator().translateToBedrock(inventory.getItem(i));
+            bedrockItems[translator.javaSlotToBedrock(i)] = Translators.getItemTranslator().translateToBedrock(session, inventory.getItem(i));
         }
 
         InventoryContentPacket contentPacket = new InventoryContentPacket();
@@ -57,7 +57,7 @@ public boolean updateSlot(InventoryTranslator translator, GeyserSession session,
         InventorySlotPacket slotPacket = new InventorySlotPacket();
         slotPacket.setContainerId(inventory.getId());
         slotPacket.setSlot(translator.javaSlotToBedrock(javaSlot));
-        slotPacket.setItem(Translators.getItemTranslator().translateToBedrock(inventory.getItem(javaSlot)));
+        slotPacket.setItem(Translators.getItemTranslator().translateToBedrock(session, inventory.getItem(javaSlot)));
         session.getUpstream().sendPacket(slotPacket);
         return true;
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/updater/CursorInventoryUpdater.java
Patch:
@@ -44,7 +44,7 @@ public void updateInventory(InventoryTranslator translator, GeyserSession sessio
             InventorySlotPacket slotPacket = new InventorySlotPacket();
             slotPacket.setContainerId(ContainerId.CURSOR);
             slotPacket.setSlot(bedrockSlot);
-            slotPacket.setItem(Translators.getItemTranslator().translateToBedrock(inventory.getItem(i)));
+            slotPacket.setItem(Translators.getItemTranslator().translateToBedrock(session, inventory.getItem(i)));
             session.getUpstream().sendPacket(slotPacket);
         }
     }
@@ -57,7 +57,7 @@ public boolean updateSlot(InventoryTranslator translator, GeyserSession session,
         InventorySlotPacket slotPacket = new InventorySlotPacket();
         slotPacket.setContainerId(ContainerId.CURSOR);
         slotPacket.setSlot(translator.javaSlotToBedrock(javaSlot));
-        slotPacket.setItem(Translators.getItemTranslator().translateToBedrock(inventory.getItem(javaSlot)));
+        slotPacket.setItem(Translators.getItemTranslator().translateToBedrock(session, inventory.getItem(javaSlot)));
         session.getUpstream().sendPacket(slotPacket);
         return true;
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/updater/InventoryUpdater.java
Patch:
@@ -39,7 +39,7 @@ public void updateInventory(InventoryTranslator translator, GeyserSession sessio
         ItemData[] bedrockItems = new ItemData[36];
         for (int i = 0; i < 36; i++) {
             final int offset = i < 9 ? 27 : -9;
-            bedrockItems[i] = Translators.getItemTranslator().translateToBedrock(inventory.getItem(translator.size + i + offset));
+            bedrockItems[i] = Translators.getItemTranslator().translateToBedrock(session, inventory.getItem(translator.size + i + offset));
         }
         InventoryContentPacket contentPacket = new InventoryContentPacket();
         contentPacket.setContainerId(ContainerId.INVENTORY);
@@ -52,7 +52,7 @@ public boolean updateSlot(InventoryTranslator translator, GeyserSession session,
             InventorySlotPacket slotPacket = new InventorySlotPacket();
             slotPacket.setContainerId(ContainerId.INVENTORY);
             slotPacket.setSlot(translator.javaSlotToBedrock(javaSlot));
-            slotPacket.setItem(Translators.getItemTranslator().translateToBedrock(inventory.getItem(javaSlot)));
+            slotPacket.setItem(Translators.getItemTranslator().translateToBedrock(session, inventory.getItem(javaSlot)));
             session.getUpstream().sendPacket(slotPacket);
             return true;
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/item/Enchantment.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.Locale;
 
 @Getter
-enum Enchantment {
+public enum Enchantment {
     PROTECTION,
     FIRE_PROTECTION,
     FEATHER_FALLING,

File: connector/src/main/java/org/geysermc/connector/network/translators/item/Potion.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.Locale;
 
 @Getter
-enum Potion {
+public enum Potion {
     WATER(0),
     MUNDANE(1),
     THICK(3),

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityEquipmentTranslator.java
Patch:
@@ -55,7 +55,7 @@ public void translate(ServerEntityEquipmentPacket packet, GeyserSession session)
         }
 
         LivingEntity livingEntity = (LivingEntity) entity;
-        ItemData item = Translators.getItemTranslator().translateToBedrock(packet.getItem());
+        ItemData item = Translators.getItemTranslator().translateToBedrock(session, packet.getItem());
         switch (packet.getSlot()) {
             case HELMET:
                 livingEntity.setHelmet(item);

File: connector/src/main/java/org/geysermc/connector/utils/InventoryUtils.java
Patch:
@@ -83,7 +83,7 @@ public static void updateCursor(GeyserSession session) {
         InventorySlotPacket cursorPacket = new InventorySlotPacket();
         cursorPacket.setContainerId(ContainerId.CURSOR);
         cursorPacket.setSlot(0);
-        cursorPacket.setItem(Translators.getItemTranslator().translateToBedrock(session.getInventory().getCursor()));
+        cursorPacket.setItem(Translators.getItemTranslator().translateToBedrock(session, session.getInventory().getCursor()));
         session.getUpstream().sendPacket(cursorPacket);
     }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/block/BlockStateValues.java
Patch:
@@ -46,7 +46,7 @@ public class BlockStateValues {
 
     /**
      * Determines if the block state contains Bedrock block information
-     * @param entry The String -> JsonNode map used in BlockTranslator
+     * @param entry The String to JsonNode map used in BlockTranslator
      * @param javaBlockState the Java Block State of the block
      */
     public static void storeBlockStateValues(Map.Entry<String, JsonNode> entry, BlockState javaBlockState) {

File: connector/src/main/java/org/geysermc/connector/scoreboard/Objective.java
Patch:
@@ -54,6 +54,8 @@ private Objective(Scoreboard scoreboard) {
 
     /**
      * /!\ This method is made for temporary objectives until the real objective is received
+     * @param scoreboard the scoreboard
+     * @param objectiveName the name of the objective
      */
     public Objective(Scoreboard scoreboard, String objectiveName) {
         this(scoreboard);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerAbilitiesTranslator.java
Patch:
@@ -27,6 +27,7 @@
 
 import java.util.Set;
 
+import com.nukkitx.protocol.bedrock.data.CommandPermission;
 import org.geysermc.connector.entity.Entity;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
@@ -68,6 +69,8 @@ public void translate(ServerPlayerAbilitiesPacket packet, GeyserSession session)
 
         AdventureSettingsPacket adventureSettingsPacket = new AdventureSettingsPacket();
         adventureSettingsPacket.setPlayerPermission(PlayerPermission.MEMBER);
+        // Required or the packet simply is not sent
+        adventureSettingsPacket.setCommandPermission(CommandPermission.NORMAL);
         adventureSettingsPacket.setUniqueEntityId(entity.getGeyserId());
         adventureSettingsPacket.getFlags().addAll(playerFlags);
         session.getUpstream().sendPacket(adventureSettingsPacket);

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -140,10 +140,10 @@ public enum EntityType {
     VEX(MonsterEntity.class, 105, 0f),
     ICE_BOMB(Entity.class, 106, 0f),
     BALLOON(Entity.class, 107, 0f), //TODO
-    PUFFERFISH(AbstractFishEntity.class, 108, 0.7f, 0.7f),
+    PUFFERFISH(PufferFishEntity.class, 108, 0.7f, 0.7f),
     SALMON(AbstractFishEntity.class, 109, 0.5f, 0.7f),
     DROWNED(ZombieEntity.class, 110, 1.95f, 0.6f),
-    TROPICAL_FISH(AbstractFishEntity.class, 111, 0.6f, 0.6f),
+    TROPICAL_FISH(TropicalFishEntity.class, 111, 0.6f, 0.6f),
     COD(AbstractFishEntity.class, 112, 0.25f, 0.5f),
     PANDA(PandaEntity.class, 113, 1.25f, 1.125f, 1.825f),
     FOX(FoxEntity.class, 121, 0.5f, 1.25f),

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockActionTranslator.java
Patch:
@@ -123,6 +123,7 @@ public void translate(PlayerActionPacket packet, GeyserSession session) {
                     spawnPacket.setStatus(PlayStatusPacket.Status.PLAYER_SPAWN);
                     session.getUpstream().sendPacket(spawnPacket);
                     entity.updateBedrockAttributes(session);
+                    session.getEntityCache().updateBossBars();
                 }
                 break;
             case JUMP:

File: connector/src/main/java/org/geysermc/connector/network/translators/block/BlockTranslator.java
Patch:
@@ -285,14 +285,14 @@ public static byte getSkullVariant(BlockState state) {
         if (SKULL_VARIANTS.containsKey(state)) {
             return SKULL_VARIANTS.getByte(state);
         }
-        return 0;
+        return -1;
     }
 
     public static byte getSkullRotation(BlockState state) {
         if (SKULL_ROTATIONS.containsKey(state)) {
             return SKULL_ROTATIONS.getByte(state);
         }
-        return 0;
+        return -1;
     }
 
     public static BlockState getJavaWaterloggedState(int bedrockId) {

File: connector/src/main/java/org/geysermc/connector/network/translators/block/BlockTranslator.java
Patch:
@@ -285,14 +285,14 @@ public static byte getSkullVariant(BlockState state) {
         if (SKULL_VARIANTS.containsKey(state)) {
             return SKULL_VARIANTS.getByte(state);
         }
-        return 0;
+        return -1;
     }
 
     public static byte getSkullRotation(BlockState state) {
         if (SKULL_ROTATIONS.containsKey(state)) {
             return SKULL_ROTATIONS.getByte(state);
         }
-        return 0;
+        return -1;
     }
 
     public static BlockState getJavaWaterloggedState(int bedrockId) {

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockActionTranslator.java
Patch:
@@ -123,6 +123,7 @@ public void translate(PlayerActionPacket packet, GeyserSession session) {
                     spawnPacket.setStatus(PlayStatusPacket.Status.PLAYER_SPAWN);
                     session.getUpstream().sendPacket(spawnPacket);
                     entity.updateBedrockAttributes(session);
+                    session.getEntityCache().updateBossBars();
                 }
                 break;
             case JUMP:

File: connector/src/main/java/org/geysermc/connector/entity/living/monster/ShulkerEntity.java
Patch:
@@ -49,7 +49,9 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
         }
         if (entityMetadata.getId() == 16) {
             Position position = (Position) entityMetadata.getValue();
-            metadata.put(EntityData.SHULKER_ATTACH_POS, Vector3i.from(position.getX(), position.getY(), position.getZ()));
+            if (position != null) {
+                metadata.put(EntityData.SHULKER_ATTACH_POS, Vector3i.from(position.getX(), position.getY(), position.getZ()));
+            }
         }
         //TODO Outdated metadata flag SHULKER_PEAK_HEIGHT
 //        if (entityMetadata.getId() == 17) {

File: connector/src/main/java/org/geysermc/connector/entity/living/monster/ShulkerEntity.java
Patch:
@@ -49,7 +49,9 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
         }
         if (entityMetadata.getId() == 16) {
             Position position = (Position) entityMetadata.getValue();
-            metadata.put(EntityData.SHULKER_ATTACH_POS, Vector3i.from(position.getX(), position.getY(), position.getZ()));
+            if(position != null){
+                metadata.put(EntityData.SHULKER_ATTACH_POS, Vector3i.from(position.getX(), position.getY(), position.getZ()));
+            }
         }
         //TODO Outdated metadata flag SHULKER_PEAK_HEIGHT
 //        if (entityMetadata.getId() == 17) {

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -300,7 +300,7 @@ public void packetReceived(PacketReceivedEvent event) {
 
                 downstream.getSession().connect();
                 connector.addPlayer(this);
-            } catch (InvalidCredentialsException e) {
+            } catch (InvalidCredentialsException | IllegalArgumentException e) {
                 connector.getLogger().info("User '" + username + "' entered invalid login info, kicking.");
                 disconnect("Invalid/incorrect login info");
             } catch (RequestException ex) {

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -300,7 +300,7 @@ public void packetReceived(PacketReceivedEvent event) {
 
                 downstream.getSession().connect();
                 connector.addPlayer(this);
-            } catch (InvalidCredentialsException e) {
+            } catch (InvalidCredentialsException | IllegalArgumentException e) {
                 connector.getLogger().info("User '" + username + "' entered invalid login info, kicking.");
                 disconnect("Invalid/incorrect login info");
             } catch (RequestException ex) {

File: connector/src/main/java/org/geysermc/connector/utils/MessageUtils.java
Patch:
@@ -300,9 +300,9 @@ public static boolean isTooLong(String message, GeyserSession session) {
         if (message.length() > 256) {
             // TODO: Add Geyser localization and translate this based on language
             session.sendMessage("Your message is bigger than 256 characters (" + message.length() + ") so it has not been sent.");
-            return false;
+            return true;
         }
 
-        return true;
+        return false;
     }
 }

File: connector/src/main/java/org/geysermc/connector/utils/MessageUtils.java
Patch:
@@ -300,9 +300,9 @@ public static boolean isTooLong(String message, GeyserSession session) {
         if (message.length() > 256) {
             // TODO: Add Geyser localization and translate this based on language
             session.sendMessage("Your message is bigger than 256 characters (" + message.length() + ") so it has not been sent.");
-            return false;
+            return true;
         }
 
-        return true;
+        return false;
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockAnimateTranslator.java
Patch:
@@ -41,7 +41,9 @@ public class BedrockAnimateTranslator extends PacketTranslator<AnimatePacket> {
     @Override
     public void translate(AnimatePacket packet, GeyserSession session) {
         // Stop the player sending animations before they have fully spawned into the server
-        if (!session.isSpawned()) { return; }
+        if (!session.isSpawned()) {
+            return;
+        }
 
         switch (packet.getAction()) {
             case SWING_ARM:

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockCommandRequestTranslator.java
Patch:
@@ -48,7 +48,9 @@ public void translate(CommandRequestPacket packet, GeyserSession session) {
         } else {
             String message = packet.getCommand().trim();
 
-            if (MessageUtils.isTooLong(message, session)) { return; }
+            if (MessageUtils.isTooLong(message, session)) {
+                return;
+            }
 
             ClientChatPacket chatPacket = new ClientChatPacket(message);
             session.getDownstream().getSession().send(chatPacket);

File: connector/src/main/java/org/geysermc/connector/utils/MapColor.java
Patch:
@@ -227,7 +227,7 @@ int getId() {
     }
 
     public static MapColor fromId(int id) {
-        return Arrays.stream(values()).filter(color -> color.getId() == id).findFirst().get();
+        return Arrays.stream(values()).filter(color -> color.getId() == id).findFirst().orElse(COLOR_0);
     }
 
     public int toARGB() {

File: connector/src/main/java/org/geysermc/connector/entity/living/monster/EnderDragonEntity.java
Patch:
@@ -19,7 +19,6 @@ public EnderDragonEntity(long entityId, long geyserId, EntityType entityType, Ve
 
     @Override
     public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession session) {
-        System.out.println("Ender Dragon ID: " + entityMetadata.getId() + " Value: " + entityMetadata.getValue());
         if (entityMetadata.getId() == 15) {
             metadata.getFlags().setFlag(EntityFlag.FIRE_IMMUNE, true);
             switch ((int) entityMetadata.getValue()) {

File: connector/src/main/java/org/geysermc/connector/utils/ChunkUtils.java
Patch:
@@ -89,8 +89,7 @@ public static ChunkData translateToBedrock(Column column) {
                             chunkData.beds.put(pos, blockState);
                         } else if (BlockTranslator.getSkullVariant(blockState) > 0) {
                             Position pos = new ChunkPosition(column.getX(), column.getZ()).getBlock(x, (chunkY << 4) + y, z);
-                            // Beds need to be updated separately to add the bed color tag
-                            // Previously this was done by matching block state but this resulted in only one bed per color+orientation showing
+                            //Doing the same stuff as beds
                             chunkData.skulls.put(pos, blockState);
                         } else {
                             section.getBlockStorageArray()[0].setFullBlock(ChunkSection.blockPosition(x, y, z), id);

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -69,7 +69,7 @@ public enum EntityType {
     SPIDER(SpiderEntity.class, 35, 0.9f, 1.4f, 1.4f, 1f),
     ZOMBIE_PIGMAN(MonsterEntity.class, 36, 1.8f, 0.6f, 0.6f, 1.62f),
     SLIME(InsentientEntity.class, 37, 0.51f),
-    ENDERMAN(MonsterEntity.class, 38, 2.9f, 0.6f),
+    ENDERMAN(EndermanEntity.class, 38, 2.9f, 0.6f),
     SILVERFISH(MonsterEntity.class, 39, 0.3f, 0.4f),
     CAVE_SPIDER(MonsterEntity.class, 40, 0.5f, 0.7f),
     GHAST(FlyingEntity.class, 41, 4.0f),

File: connector/src/main/java/org/geysermc/connector/network/translators/Registry.java
Patch:
@@ -55,6 +55,8 @@ public <P extends T> boolean translate(Class<? extends P> clazz, P packet, Geyse
                 if (MAP.containsKey(clazz)) {
                     ((PacketTranslator<P>) MAP.get(clazz)).translate(packet, session);
                     return true;
+                } else {
+                    GeyserConnector.getInstance().getLogger().debug("Could not find packet for " + (packet.toString().length() > 25 ? packet.getClass().getSimpleName() : packet));
                 }
             } catch (Throwable ex) {
                 GeyserConnector.getInstance().getLogger().error("Could not translate packet " + packet.getClass().getSimpleName(), ex);

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemTranslator.java
Patch:
@@ -77,8 +77,10 @@ public ItemData translateToBedrock(ItemStack stack) {
         CompoundTag tag = stack.getNbt();
         IntTag mapId = tag.get("map");
 
-        if (mapId != null)
+        if (mapId != null) {
             tag.put(new StringTag("map_uuid", mapId.getValue().toString()));
+            tag.put(new IntTag("map_name_index", mapId.getValue()));
+        }
 
 
         return ItemData.of(bedrockItem.getBedrockId(), (short) bedrockItem.getBedrockData(), stack.getAmount(), translateToBedrockNBT(tag));

File: connector/src/main/java/org/geysermc/connector/network/translators/Registry.java
Patch:
@@ -55,6 +55,8 @@ public <P extends T> boolean translate(Class<? extends P> clazz, P packet, Geyse
                 if (MAP.containsKey(clazz)) {
                     ((PacketTranslator<P>) MAP.get(clazz)).translate(packet, session);
                     return true;
+                } else {
+                    GeyserConnector.getInstance().getLogger().debug("Could not find packet for " + (packet.toString().length() > 25 ? packet.getClass().getSimpleName() : packet));
                 }
             } catch (Throwable ex) {
                 GeyserConnector.getInstance().getLogger().error("Could not translate packet " + packet.getClass().getSimpleName(), ex);

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemTranslator.java
Patch:
@@ -77,8 +77,10 @@ public ItemData translateToBedrock(ItemStack stack) {
         CompoundTag tag = stack.getNbt();
         IntTag mapId = tag.get("map");
 
-        if (mapId != null)
+        if (mapId != null) {
             tag.put(new StringTag("map_uuid", mapId.getValue().toString()));
+            tag.put(new IntTag("map_name_index", mapId.getValue()));
+        }
 
 
         return ItemData.of(bedrockItem.getBedrockId(), (short) bedrockItem.getBedrockData(), stack.getAmount(), translateToBedrockNBT(tag));

File: connector/src/main/java/org/geysermc/connector/network/UpstreamPacketHandler.java
Patch:
@@ -27,6 +27,7 @@
 
 import com.nukkitx.protocol.bedrock.BedrockPacket;
 import com.nukkitx.protocol.bedrock.packet.*;
+import org.geysermc.common.AuthType;
 import org.geysermc.common.IGeyserConfiguration;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.network.session.GeyserSession;
@@ -107,7 +108,7 @@ private boolean couldLoginUserByName(String bedrockUsername) {
 
     @Override
     public boolean handle(MovePlayerPacket packet) {
-        if (!session.isLoggedIn() && !session.isLoggingIn()) {
+        if (!session.isLoggedIn() && !session.isLoggingIn() && session.getConnector().getAuthType() == AuthType.ONLINE) {
             // TODO it is safer to key authentication on something that won't change (UUID, not username)
             if (!couldLoginUserByName(session.getAuthData().getName())) {
                 LoginEncryptionUtils.showLoginWindow(session);

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockSetLocalPlayerAsInitializedTranslator.java
Patch:
@@ -40,6 +40,7 @@ public void translate(SetLocalPlayerAsInitializedPacket packet, GeyserSession se
         if (session.getPlayerEntity().getGeyserId() == packet.getRuntimeEntityId()) {
             if (!session.getUpstream().isInitialized()) {
                 session.getUpstream().setInitialized(true);
+                session.login();
 
                 for (PlayerEntity entity : session.getEntityCache().getEntitiesByType(PlayerEntity.class)) {
                     if (!entity.isValid()) {

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaJoinGameTranslator.java
Patch:
@@ -29,7 +29,6 @@
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;
-import org.geysermc.connector.utils.ChunkUtils;
 import org.geysermc.connector.utils.DimensionUtils;
 
 import com.github.steveice10.mc.protocol.packet.ingame.server.ServerJoinGamePacket;
@@ -69,7 +68,6 @@ public void translate(ServerJoinGamePacket packet, GeyserSession session) {
         session.setRenderDistance(packet.getViewDistance());
 
         if (DimensionUtils.javaToBedrock(packet.getDimension()) != entity.getDimension()) {
-            ChunkUtils.sendEmptyChunks(session, entity.getPosition().toInt(), 3, true);
             DimensionUtils.switchDimension(session, packet.getDimension());
         }
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/block/BlockTranslator.java
Patch:
@@ -103,7 +103,8 @@ public class BlockTranslator {
             if ("minecraft:water[level=0]".equals(javaId)) {
                 waterRuntimeId = bedrockRuntimeId;
             }
-            boolean waterlogged = entry.getValue().has("waterlogged") && entry.getValue().get("waterlogged").booleanValue();
+            boolean waterlogged = entry.getKey().contains("waterlogged=true")
+                    || javaId.contains("minecraft:bubble_column") || javaId.contains("minecraft:kelp") || javaId.contains("seagrass");
 
             if (waterlogged) {
                 BEDROCK_TO_JAVA_BLOCK_MAP.putIfAbsent(bedrockRuntimeId | 1 << 31, new BlockState(javaRuntimeId));

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaBossBarTranslator.java
Patch:
@@ -51,15 +51,15 @@ public void translate(ServerBossBarPacket packet, GeyserSession session) {
 
                 bossEventPacket.setAction(BossEventPacket.Action.SHOW);
                 bossEventPacket.setBossUniqueEntityId(entityId);
-                bossEventPacket.setTitle(MessageUtils.getBedrockMessage(packet.getTitle()));
+                bossEventPacket.setTitle(MessageUtils.getTranslatedBedrockMessage(packet.getTitle(), session.getClientData().getLanguageCode()));
                 bossEventPacket.setHealthPercentage(packet.getHealth());
                 bossEventPacket.setColor(0); //ignored by client
                 bossEventPacket.setOverlay(1);
                 bossEventPacket.setDarkenSky(0);
                 break;
             case UPDATE_TITLE:
                 bossEventPacket.setAction(BossEventPacket.Action.TITLE);
-                bossEventPacket.setTitle(MessageUtils.getBedrockMessage(packet.getTitle()));
+                bossEventPacket.setTitle(MessageUtils.getTranslatedBedrockMessage(packet.getTitle(), session.getClientData().getLanguageCode()));
                 break;
             case UPDATE_HEALTH:
                 bossEventPacket.setAction(BossEventPacket.Action.HEALTH_PERCENTAGE);

File: connector/src/main/java/org/geysermc/connector/network/translators/block/BlockTranslator.java
Patch:
@@ -103,7 +103,8 @@ public class BlockTranslator {
             if ("minecraft:water[level=0]".equals(javaId)) {
                 waterRuntimeId = bedrockRuntimeId;
             }
-            boolean waterlogged = entry.getValue().has("waterlogged") && entry.getValue().get("waterlogged").booleanValue();
+            boolean waterlogged = entry.getKey().contains("waterlogged=true")
+                    || javaId.contains("minecraft:bubble_column") || javaId.contains("minecraft:kelp") || javaId.contains("seagrass");
 
             if (waterlogged) {
                 BEDROCK_TO_JAVA_BLOCK_MAP.putIfAbsent(bedrockRuntimeId | 1 << 31, new BlockState(javaRuntimeId));

File: connector/src/main/java/org/geysermc/connector/network/UpstreamPacketHandler.java
Patch:
@@ -27,6 +27,7 @@
 
 import com.nukkitx.protocol.bedrock.BedrockPacket;
 import com.nukkitx.protocol.bedrock.packet.*;
+import org.geysermc.common.AuthType;
 import org.geysermc.common.IGeyserConfiguration;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.network.session.GeyserSession;
@@ -107,7 +108,7 @@ private boolean couldLoginUserByName(String bedrockUsername) {
 
     @Override
     public boolean handle(MovePlayerPacket packet) {
-        if (!session.isLoggedIn() && !session.isLoggingIn()) {
+        if (!session.isLoggedIn() && !session.isLoggingIn() && session.getConnector().getAuthType() == AuthType.ONLINE) {
             // TODO it is safer to key authentication on something that won't change (UUID, not username)
             if (!couldLoginUserByName(session.getAuthData().getName())) {
                 LoginEncryptionUtils.showLoginWindow(session);

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -187,7 +187,7 @@ public void authenticate(String username, String password) {
             return;
         }
 
-        loggedIn = true;
+        loggingIn = true;
         // new thread so clients don't timeout
         new Thread(() -> {
             try {

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockSetLocalPlayerAsInitializedTranslator.java
Patch:
@@ -40,6 +40,7 @@ public void translate(SetLocalPlayerAsInitializedPacket packet, GeyserSession se
         if (session.getPlayerEntity().getGeyserId() == packet.getRuntimeEntityId()) {
             if (!session.getUpstream().isInitialized()) {
                 session.getUpstream().setInitialized(true);
+                session.login();
 
                 for (PlayerEntity entity : session.getEntityCache().getEntitiesByType(PlayerEntity.class)) {
                     if (!entity.isValid()) {

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaJoinGameTranslator.java
Patch:
@@ -29,7 +29,6 @@
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;
-import org.geysermc.connector.utils.ChunkUtils;
 import org.geysermc.connector.utils.DimensionUtils;
 
 import com.github.steveice10.mc.protocol.packet.ingame.server.ServerJoinGamePacket;
@@ -69,7 +68,6 @@ public void translate(ServerJoinGamePacket packet, GeyserSession session) {
         session.setRenderDistance(packet.getViewDistance());
 
         if (DimensionUtils.javaToBedrock(packet.getDimension()) != entity.getDimension()) {
-            ChunkUtils.sendEmptyChunks(session, entity.getPosition().toInt(), 3, true);
             DimensionUtils.switchDimension(session, packet.getDimension());
         }
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaChatTranslator.java
Patch:
@@ -69,7 +69,7 @@ public void translate(ServerChatPacket packet, GeyserSession session) {
             List<String> paramsTranslated = MessageUtils.getTranslationParams(((TranslationMessage) packet.getMessage()).getTranslationParams(), locale);
             textPacket.setParameters(paramsTranslated);
 
-            textPacket.setMessage(MessageUtils.insertParams(MessageUtils.getTranslatedBedrockMessage(packet.getMessage(), locale, false), paramsTranslated));
+            textPacket.setMessage(MessageUtils.insertParams(MessageUtils.getTranslatedBedrockMessage(packet.getMessage(), locale, true), paramsTranslated));
         } else {
             textPacket.setNeedsTranslation(false);
 

File: connector/src/main/java/org/geysermc/connector/entity/living/merchant/AbstractMerchantEntity.java
Patch:
@@ -23,9 +23,10 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.entity.living;
+package org.geysermc.connector.entity.living.merchant;
 
 import com.nukkitx.math.vector.Vector3f;
+import org.geysermc.connector.entity.living.AgeableEntity;
 import org.geysermc.connector.entity.type.EntityType;
 
 public class AbstractMerchantEntity extends AgeableEntity {

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -33,6 +33,7 @@
 import org.geysermc.connector.entity.living.animal.tameable.TameableEntity;
 import org.geysermc.connector.entity.living.animal.horse.*;
 import org.geysermc.connector.entity.living.animal.tameable.WolfEntity;
+import org.geysermc.connector.entity.living.merchant.*;
 import org.geysermc.connector.entity.living.monster.*;
 import org.geysermc.connector.entity.living.monster.raid.AbstractIllagerEntity;
 import org.geysermc.connector.entity.living.monster.raid.RaidParticipantEntity;
@@ -46,7 +47,7 @@ public enum EntityType {
     PIG(PigEntity.class, 12, 0.9f),
     SHEEP(SheepEntity.class, 13, 1.3f, 0.9f),
     WOLF(WolfEntity.class, 14, 0.85f, 0.6f),
-    VILLAGER(AbstractMerchantEntity.class, 15, 1.8f, 0.6f, 0.6f, 1.62f),
+    VILLAGER(VillagerEntity.class, 15, 1.8f, 0.6f, 0.6f, 1.62f),
     MOOSHROOM(AnimalEntity.class, 16, 1.4f, 0.9f),
     SQUID(WaterEntity.class, 17, 0.8f),
     RABBIT(RabbitEntity.class, 18, 0.5f, 0.4f),

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/tameable/CatEntity.java
Patch:
@@ -53,7 +53,6 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
             } else {
                 metadata.put(EntityData.VARIANT, (int) entityMetadata.getValue());
             }
-            System.out.println("Variant: " + entityMetadata.getValue());
         }
         if (entityMetadata.getId() == 21) {
             // Needed or else wild cats are a red color

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaChatTranslator.java
Patch:
@@ -69,7 +69,7 @@ public void translate(ServerChatPacket packet, GeyserSession session) {
             List<String> paramsTranslated = MessageUtils.getTranslationParams(((TranslationMessage) packet.getMessage()).getTranslationParams(), locale);
             textPacket.setParameters(paramsTranslated);
 
-            textPacket.setMessage(MessageUtils.insertParams(MessageUtils.getTranslatedBedrockMessage(packet.getMessage(), locale, false), paramsTranslated));
+            textPacket.setMessage(MessageUtils.insertParams(MessageUtils.getTranslatedBedrockMessage(packet.getMessage(), locale, true), paramsTranslated));
         } else {
             textPacket.setNeedsTranslation(false);
 

File: connector/src/main/java/org/geysermc/connector/utils/MessageUtils.java
Patch:
@@ -188,7 +188,6 @@ private static String getColor(ChatColor color) {
                 base += "f";
                 break;
             case RESET:
-            case NONE:
                 base += "r";
                 break;
             default:

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -259,7 +259,6 @@ public void connected(ConnectedEvent event) {
                         // Let the user know there locale may take some time to download
                         // as it has to be extracted from a JAR
                         if (locale.toLowerCase().equals("en_us") && !LocaleUtils.LOCALE_MAPPINGS.containsKey("en_us")) {
-                            connector.getLogger().info("warning user");
                             sendMessage("Downloading your locale (en_us) this may take some time");
                         }
 

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -63,7 +63,7 @@ public class GeyserConnector {
     public static final String NAME = "Geyser";
     public static final String VERSION = "1.0-SNAPSHOT";
 
-    private final Map<UUID, GeyserSession> players = new HashMap<>();
+    private final Map<InetSocketAddress, GeyserSession> players = new HashMap<>();
 
     private static GeyserConnector instance;
 
@@ -189,11 +189,11 @@ public void run() {
     }
 
     public void addPlayer(GeyserSession player) {
-        players.put(player.getAuthData().getUUID(), player);
+        players.put(player.getSocketAddress(), player);
     }
 
     public void removePlayer(GeyserSession player) {
-        players.remove(player.getAuthData().getUUID());
+        players.remove(player.getSocketAddress());
     }
 
     public static GeyserConnector start(PlatformType platformType, IGeyserBootstrap bootstrap) {

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -63,7 +63,7 @@ public class GeyserConnector {
     public static final String NAME = "Geyser";
     public static final String VERSION = "1.0-SNAPSHOT";
 
-    private final Map<UUID, GeyserSession> players = new HashMap<>();
+    private final Map<InetSocketAddress, GeyserSession> players = new HashMap<>();
 
     private static GeyserConnector instance;
 
@@ -189,11 +189,11 @@ public void run() {
     }
 
     public void addPlayer(GeyserSession player) {
-        players.put(player.getAuthData().getUUID(), player);
+        players.put(player.getSocketAddress(), player);
     }
 
     public void removePlayer(GeyserSession player) {
-        players.remove(player.getAuthData().getUUID());
+        players.remove(player.getSocketAddress());
     }
 
     public static GeyserConnector start(PlatformType platformType, IGeyserBootstrap bootstrap) {

File: bootstrap/standalone/src/main/java/org/geysermc/platform/standalone/console/GeyserLogger.java
Patch:
@@ -52,7 +52,7 @@ protected void runCommand(String line) {
 
     @Override
     protected void shutdown() {
-        GeyserConnector.getInstance().shutdown();
+        GeyserConnector.getInstance().getBootstrap().onDisable();
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaMapDataTranslator.java
Patch:
@@ -40,7 +40,7 @@ public void translate(ServerMapDataPacket packet, GeyserSession session) {
         ClientboundMapItemDataPacket mapItemDataPacket = new ClientboundMapItemDataPacket();
 
         mapItemDataPacket.setUniqueMapId(packet.getMapId());
-        mapItemDataPacket.setDimensionId(session.getLastDimPacket().getDimension());
+        mapItemDataPacket.setDimensionId(session.getPlayerEntity().getDimension());
         mapItemDataPacket.setLocked(packet.isLocked());
         mapItemDataPacket.setScale(packet.getScale());
 

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/horse/LlamaEntity.java
Patch:
@@ -54,13 +54,13 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
             // -1 means no armor
             if ((int) entityMetadata.getValue() != -1) {
                 // The damage value is the dye color that Java sends us
-                // Always going to be a carpet so we can hardcode 171
+                // Always going to be a carpet so we can hardcode 171 in BlockTranslator
                 // The int then short conversion is required or we get a ClassCastException
-                equipmentPacket.setChestplate(ItemData.of(BlockTranslator.LLAMA_ARMOR_ID, (short)((int) entityMetadata.getValue()), 1));
+                equipmentPacket.setChestplate(ItemData.of(BlockTranslator.CARPET, (short)((int) entityMetadata.getValue()), 1));
             } else {
                 equipmentPacket.setChestplate(ItemData.AIR);
             }
-            // Required to fill out the rest of the equipment or Bedrock ignores it
+            // Required to fill out the rest of the equipment or Bedrock ignores it, including above else statement if removing armor
             equipmentPacket.setBoots(ItemData.AIR);
             equipmentPacket.setHelmet(ItemData.AIR);
             equipmentPacket.setLeggings(ItemData.AIR);

File: connector/src/main/java/org/geysermc/connector/network/translators/block/BlockTranslator.java
Patch:
@@ -55,8 +55,8 @@ public class BlockTranslator {
     private static final Int2ObjectMap<BlockState> BEDROCK_TO_JAVA_BLOCK_MAP = new Int2ObjectOpenHashMap<>();
     private static final IntSet WATERLOGGED = new IntOpenHashSet();
 
-    // Carpet ID, used in LlamaEntity.java
-    public static final int LLAMA_ARMOR_ID = 171;
+    // Bedrock carpet ID, used in LlamaEntity.java for decoration
+    public static final int CARPET = 171;
 
     private static final int BLOCK_STATE_VERSION = 17760256;
 

File: connector/src/main/java/org/geysermc/connector/network/translators/block/BlockTranslator.java
Patch:
@@ -55,6 +55,9 @@ public class BlockTranslator {
     private static final Int2ObjectMap<BlockState> BEDROCK_TO_JAVA_BLOCK_MAP = new Int2ObjectOpenHashMap<>();
     private static final IntSet WATERLOGGED = new IntOpenHashSet();
 
+    // Carpet ID, used in LlamaEntity.java
+    public static final int LLAMA_ARMOR_ID = 171;
+
     private static final int BLOCK_STATE_VERSION = 17760256;
 
     static {

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaMapDataTranslator.java
Patch:
@@ -40,7 +40,7 @@ public void translate(ServerMapDataPacket packet, GeyserSession session) {
         ClientboundMapItemDataPacket mapItemDataPacket = new ClientboundMapItemDataPacket();
 
         mapItemDataPacket.setUniqueMapId(packet.getMapId());
-        mapItemDataPacket.setDimensionId(session.getLastDimPacket().getDimension());
+        mapItemDataPacket.setDimensionId(session.getPlayerEntity().getDimension());
         mapItemDataPacket.setLocked(packet.isLocked());
         mapItemDataPacket.setScale(packet.getScale());
 

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/horse/LlamaEntity.java
Patch:
@@ -48,7 +48,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
             metadata.put(EntityData.STRENGTH, entityMetadata.getValue());
         }
         // Color of the llama
-        else if (entityMetadata.getId() == 21) {
+        if (entityMetadata.getId() == 21) {
             metadata.put(EntityData.VARIANT, entityMetadata.getValue());
         }
         super.updateBedrockMetadata(entityMetadata, session);

File: bootstrap/standalone/src/main/java/org/geysermc/platform/standalone/console/GeyserLogger.java
Patch:
@@ -52,7 +52,7 @@ protected void runCommand(String line) {
 
     @Override
     protected void shutdown() {
-        GeyserConnector.getInstance().shutdown();
+        GeyserConnector.getInstance().getBootstrap().onDisable();
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -143,7 +143,7 @@ public void shutdown() {
         shuttingDown = true;
 
         if (players.size() >= 1) {
-            bootstrap.getGeyserLogger().info("Kicking " + players.size() + " players");
+            bootstrap.getGeyserLogger().info("Kicking " + (players.size() / 3) + " players");
 
             for (GeyserSession playerSession : players.values()) {
                 playerSession.disconnect("Geyser Proxy shutting down.");
@@ -155,7 +155,6 @@ public void run() {
                     // Simulate a long-running Job
                     try {
                         while (true) {
-                            bootstrap.getGeyserLogger().info("Current entries: " + players.size());
                             if (players.size() == 0) {
                                 return;
                             }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockSetLocalPlayerAsInitializedTranslator.java
Patch:
@@ -34,7 +34,7 @@
 import com.nukkitx.protocol.bedrock.packet.SetLocalPlayerAsInitializedPacket;
 
 @Translator(packet = SetLocalPlayerAsInitializedPacket.class)
-public class BedrockPlayerInitializedTranslator extends PacketTranslator<SetLocalPlayerAsInitializedPacket> {
+public class BedrockSetLocalPlayerAsInitializedTranslator extends PacketTranslator<SetLocalPlayerAsInitializedPacket> {
     @Override
     public void translate(SetLocalPlayerAsInitializedPacket packet, GeyserSession session) {
         if (session.getPlayerEntity().getGeyserId() == packet.getRuntimeEntityId()) {

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockSetLocalPlayerAsInitializedTranslator.java
Patch:
@@ -34,7 +34,7 @@
 import com.nukkitx.protocol.bedrock.packet.SetLocalPlayerAsInitializedPacket;
 
 @Translator(packet = SetLocalPlayerAsInitializedPacket.class)
-public class BedrockPlayerInitializedTranslator extends PacketTranslator<SetLocalPlayerAsInitializedPacket> {
+public class BedrockSetLocalPlayerAsInitializedTranslator extends PacketTranslator<SetLocalPlayerAsInitializedPacket> {
     @Override
     public void translate(SetLocalPlayerAsInitializedPacket packet, GeyserSession session) {
         if (session.getPlayerEntity().getGeyserId() == packet.getRuntimeEntityId()) {

File: bootstrap/bukkit/src/main/java/org/geysermc/platform/bukkit/GeyserBukkitConfiguration.java
Patch:
@@ -101,6 +101,9 @@ public boolean isAllowThirdPartyCapes() {
         return config.getBoolean("allow-third-party-capes", true);
     }
 
+    @Override
+    public String getDefaultLocale() { return config.getString("default-locale", "en_us"); }
+
     @Override
     public Path getFloodgateKeyFile() {
         return Paths.get(dataFolder.toString(), config.getString("floodgate-key-file", "public-key.pem"));

File: bootstrap/bungeecord/src/main/java/org/geysermc/platform/bungeecord/GeyserBungeeConfiguration.java
Patch:
@@ -102,6 +102,9 @@ public boolean isAllowThirdPartyCapes() {
         return config.getBoolean("allow-third-party-capes", true);
     }
 
+    @Override
+    public String getDefaultLocale() { return config.getString("default-locale", "en_us"); }
+
     @Override
     public Path getFloodgateKeyFile() {
         return Paths.get(dataFolder.toString(), config.getString("floodgate-key-file", "public-key.pem"));

File: bootstrap/sponge/src/main/java/org/geysermc/platform/sponge/GeyserSpongeConfiguration.java
Patch:
@@ -105,6 +105,9 @@ public boolean isAllowThirdPartyCapes() {
         return node.getNode("allow-third-party-capes").getBoolean(true);
     }
 
+    @Override
+    public String getDefaultLocale() { return node.getNode("default-locale").getString("en_us"); }
+
     @Override
     public Path getFloodgateKeyFile() {
         return Paths.get(dataFolder.toString(), node.getNode("floodgate-key-file").getString("public-key.pem"));

File: bootstrap/standalone/src/main/java/org/geysermc/platform/standalone/GeyserConfiguration.java
Patch:
@@ -63,6 +63,9 @@ public class GeyserConfiguration implements IGeyserConfiguration {
     @JsonProperty("allow-third-party-capes")
     private boolean allowThirdPartyCapes;
 
+    @JsonProperty("default-locale")
+    private String defaultLocale;
+
     private MetricsInfo metrics;
 
     @Override

File: bootstrap/velocity/src/main/java/org/geysermc/platform/velocity/GeyserVelocityConfiguration.java
Patch:
@@ -63,6 +63,9 @@ public class GeyserVelocityConfiguration implements IGeyserConfiguration {
     @JsonProperty("allow-third-party-capes")
     private boolean allowThirdPartyCapes;
 
+    @JsonProperty("default-locale")
+    private String defaultLocale;
+
     private MetricsInfo metrics;
 
     @Override

File: common/src/main/java/org/geysermc/common/IGeyserConfiguration.java
Patch:
@@ -46,6 +46,8 @@ public interface IGeyserConfiguration {
 
     boolean isAllowThirdPartyCapes();
 
+    String getDefaultLocale();
+
     Path getFloodgateKeyFile();
 
     IMetricsInfo getMetrics();

File: connector/src/main/java/org/geysermc/connector/network/translators/block/entity/BlockEntityTranslator.java
Patch:
@@ -44,13 +44,12 @@ public abstract class BlockEntityTranslator {
 
     public abstract com.nukkitx.nbt.tag.CompoundTag getDefaultBedrockTag(String bedrockId, int x, int y, int z);
 
-    public com.nukkitx.nbt.tag.CompoundTag getBlockEntityTag(CompoundTag tag) {
+    public com.nukkitx.nbt.tag.CompoundTag getBlockEntityTag(String id, CompoundTag tag) {
         int x = Integer.parseInt(String.valueOf(tag.getValue().get("x").getValue()));
         int y = Integer.parseInt(String.valueOf(tag.getValue().get("y").getValue()));
         int z = Integer.parseInt(String.valueOf(tag.getValue().get("z").getValue()));
 
-        CompoundTagBuilder tagBuilder = getConstantBedrockTag(BlockEntityUtils.getBedrockBlockEntityId(
-                String.valueOf(tag.get("id").getValue())), x, y, z).toBuilder();
+        CompoundTagBuilder tagBuilder = getConstantBedrockTag(BlockEntityUtils.getBedrockBlockEntityId(id), x, y, z).toBuilder();
         translateTag(tag).forEach(tagBuilder::tag);
         return tagBuilder.buildRootTag();
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaUpdateTileEntityTranslator.java
Patch:
@@ -45,12 +45,12 @@ public void translate(ServerUpdateTileEntityPacket packet, GeyserSession session
         if (id.equalsIgnoreCase("Sign")) {
             // Delay so chunks can finish sending
             session.getConnector().getGeneralThreadPool().schedule(() ->
-                    BlockEntityUtils.updateBlockEntity(session, translator.getBlockEntityTag(packet.getNbt()), packet.getPosition()),
+                    BlockEntityUtils.updateBlockEntity(session, translator.getBlockEntityTag("Sign", packet.getNbt()), packet.getPosition()),
                     5,
                     TimeUnit.SECONDS
             );
         } else {
-            BlockEntityUtils.updateBlockEntity(session, translator.getBlockEntityTag(packet.getNbt()), packet.getPosition());
+            BlockEntityUtils.updateBlockEntity(session, translator.getBlockEntityTag(id, packet.getNbt()), packet.getPosition());
         }
     }
 }

File: connector/src/main/java/org/geysermc/connector/utils/ChunkUtils.java
Patch:
@@ -103,7 +103,7 @@ public static ChunkData translateToBedrock(Column column) {
 
             String id = BlockEntityUtils.getBedrockBlockEntityId(tagName);
             BlockEntityTranslator blockEntityTranslator = BlockEntityUtils.getBlockEntityTranslator(id);
-            bedrockBlockEntities[i] = blockEntityTranslator.getBlockEntityTag(tag);
+            bedrockBlockEntities[i] = blockEntityTranslator.getBlockEntityTag(tagName, tag);
         }
 
         chunkData.blockEntities = bedrockBlockEntities;

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -38,6 +38,7 @@
 import com.nukkitx.math.GenericMath;
 import com.nukkitx.math.TrigMath;
 import com.nukkitx.math.vector.Vector2f;
+import com.nukkitx.math.vector.Vector2i;
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.math.vector.Vector3i;
 import com.nukkitx.nbt.tag.CompoundTag;
@@ -96,6 +97,8 @@ public class GeyserSession implements CommandSender {
 
     private DataCache<Packet> javaPacketCache;
 
+    @Setter
+    private Vector2i lastChunkPosition = null;
     private int renderDistance;
 
     private boolean loggedIn;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerPositionRotationTranslator.java
Patch:
@@ -30,6 +30,7 @@
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.Translator;
+import org.geysermc.connector.utils.ChunkUtils;
 
 import com.github.steveice10.mc.protocol.packet.ingame.client.world.ClientTeleportConfirmPacket;
 import com.github.steveice10.mc.protocol.packet.ingame.server.entity.player.ServerPlayerPositionRotationPacket;
@@ -86,6 +87,8 @@ public void translate(ServerPlayerPositionRotationPacket packet, GeyserSession s
             ClientTeleportConfirmPacket teleportConfirmPacket = new ClientTeleportConfirmPacket(packet.getTeleportId());
             session.getDownstream().getSession().send(teleportConfirmPacket);
 
+            ChunkUtils.updateChunkPosition(session, pos.toInt());
+
             session.getConnector().getLogger().info("Spawned player at " + packet.getX() + " " + packet.getY() + " " + packet.getZ());
             return;
         }

File: connector/src/main/java/org/geysermc/connector/utils/DimensionUtils.java
Patch:
@@ -52,6 +52,7 @@ public static void switchDimension(GeyserSession session, int javaDimension) {
         player.setDimension(bedrockDimension);
         player.setPosition(pos.toFloat());
         session.setSpawned(false);
+        session.setLastChunkPosition(null);
 
         //let java server handle portal travel sound
         StopSoundPacket stopSoundPacket = new StopSoundPacket();

File: common/src/main/java/org/geysermc/floodgate/util/BedrockData.java
Patch:
@@ -3,6 +3,8 @@
 import lombok.AllArgsConstructor;
 import lombok.Getter;
 
+import java.util.UUID;
+
 @AllArgsConstructor
 @Getter
 public class BedrockData {

File: connector/src/main/java/org/geysermc/connector/entity/ItemEntity.java
Patch:
@@ -31,7 +31,7 @@
 import com.nukkitx.protocol.bedrock.packet.AddItemEntityPacket;
 import org.geysermc.connector.entity.type.EntityType;
 import org.geysermc.connector.network.session.GeyserSession;
-import org.geysermc.connector.network.translators.TranslatorsInit;
+import org.geysermc.connector.network.translators.Translators;
 
 public class ItemEntity extends Entity {
 
@@ -49,7 +49,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
             itemPacket.setUniqueEntityId(geyserId);
             itemPacket.setFromFishing(false);
             itemPacket.getMetadata().putAll(metadata);
-            itemPacket.setItemInHand(TranslatorsInit.getItemTranslator().translateToBedrock((ItemStack) entityMetadata.getValue()));
+            itemPacket.setItemInHand(Translators.getItemTranslator().translateToBedrock((ItemStack) entityMetadata.getValue()));
             session.getUpstream().sendPacket(itemPacket);
         }
 

File: connector/src/main/java/org/geysermc/connector/entity/LivingEntity.java
Patch:
@@ -64,7 +64,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
                 metadata.put(EntityData.POTION_COLOR, (int) entityMetadata.getValue());
                 break;
             case 10:
-                // metadata.put(EntityData.POTION_AMBIENT, (boolean) entityMetadata.getValue());
+                metadata.put(EntityData.POTION_AMBIENT, (byte) ((boolean) entityMetadata.getValue() ? 1 : 0));
                 break;
         }
 

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/horse/ChestedHorseEntity.java
Patch:
@@ -39,9 +39,9 @@ public ChestedHorseEntity(long entityId, long geyserId, EntityType entityType, V
 
     @Override
     public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession session) {
-        // https://wiki.vg/Entity_metadata#Horse
-        metadata.getFlags().setFlag(EntityFlag.CHESTED, chestplate != null && chestplate.getId() != 0);
-
+        if (entityMetadata.getId() == 18) {
+            metadata.getFlags().setFlag(EntityFlag.CHESTED, (boolean) entityMetadata.getValue());
+        }
         super.updateBedrockMetadata(entityMetadata, session);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -384,7 +384,7 @@ private void startGame() {
         startGamePacket.setBonusChestEnabled(false);
         startGamePacket.setStartingWithMap(false);
         startGamePacket.setTrustingPlayers(true);
-        startGamePacket.setDefaultPlayerPermission(PlayerPermission.OPERATOR);
+        startGamePacket.setDefaultPlayerPermission(PlayerPermission.MEMBER);
         startGamePacket.setServerChunkTickRange(4);
         startGamePacket.setBehaviorPackLocked(false);
         startGamePacket.setResourcePackLocked(false);

File: connector/src/main/java/org/geysermc/connector/network/session/cache/ChunkCache.java
Patch:
@@ -32,7 +32,7 @@
 import com.nukkitx.protocol.bedrock.packet.LevelChunkPacket;
 import lombok.Getter;
 import org.geysermc.connector.network.session.GeyserSession;
-import org.geysermc.connector.network.translators.TranslatorsInit;
+import org.geysermc.connector.network.translators.Translators;
 import org.geysermc.connector.network.translators.block.BlockTranslator;
 import org.geysermc.connector.world.chunk.ChunkPosition;
 
@@ -102,7 +102,7 @@ public void sendEmptyChunk(ChunkPosition position, boolean force) {
         levelChunkPacket.setChunkZ(position.getZ());
         levelChunkPacket.setCachingEnabled(false);
         levelChunkPacket.setSubChunksLength(0);
-        levelChunkPacket.setData(TranslatorsInit.EMPTY_LEVEL_CHUNK_DATA);
+        levelChunkPacket.setData(Translators.EMPTY_LEVEL_CHUNK_DATA);
         session.getUpstream().sendPacket(levelChunkPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/GenericInventoryTranslator.java
Patch:
@@ -32,7 +32,7 @@
 import com.nukkitx.protocol.bedrock.packet.InventorySlotPacket;
 import org.geysermc.connector.inventory.Inventory;
 import org.geysermc.connector.network.session.GeyserSession;
-import org.geysermc.connector.network.translators.TranslatorsInit;
+import org.geysermc.connector.network.translators.Translators;
 
 public class GenericInventoryTranslator extends InventoryTranslator {
 
@@ -54,7 +54,7 @@ public void openInventory(GeyserSession session, Inventory inventory) {
     public void updateInventory(GeyserSession session, Inventory inventory) {
         ItemData[] bedrockItems = new ItemData[inventory.getItems().length];
         for (int i = 0; i < bedrockItems.length; i++) {
-            bedrockItems[i] = TranslatorsInit.getItemTranslator().translateToBedrock(inventory.getItems()[i]);
+            bedrockItems[i] = Translators.getItemTranslator().translateToBedrock(inventory.getItems()[i]);
         }
 
         InventoryContentPacket contentPacket = new InventoryContentPacket();
@@ -67,7 +67,7 @@ public void updateInventory(GeyserSession session, Inventory inventory) {
     public void updateSlot(GeyserSession session, Inventory inventory, int slot) {
         InventorySlotPacket slotPacket = new InventorySlotPacket();
         slotPacket.setContainerId(inventory.getId());
-        slotPacket.setItem(TranslatorsInit.getItemTranslator().translateToBedrock(inventory.getItems()[slot]));
+        slotPacket.setItem(Translators.getItemTranslator().translateToBedrock(inventory.getItems()[slot]));
         slotPacket.setSlot(slot);
         session.getUpstream().sendPacket(slotPacket);
     }

File: connector/src/main/java/org/geysermc/connector/scoreboard/Scoreboard.java
Patch:
@@ -30,6 +30,7 @@
 import com.nukkitx.protocol.bedrock.packet.RemoveObjectivePacket;
 import com.nukkitx.protocol.bedrock.packet.SetDisplayObjectivePacket;
 import com.nukkitx.protocol.bedrock.packet.SetScorePacket;
+import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import lombok.Getter;
 
 import org.geysermc.connector.network.session.GeyserSession;
@@ -113,7 +114,7 @@ public void removeTeam(String teamName) {
     }
 
     public void onUpdate() {
-        Set<Objective> changedObjectives = new HashSet<>();
+        Set<Objective> changedObjectives = new ObjectOpenHashSet<>();
         List<ScoreInfo> addScores = new ArrayList<>();
         List<ScoreInfo> removeScores = new ArrayList<>();
 
@@ -133,7 +134,7 @@ public void onUpdate() {
             boolean hasUpdate = globalUpdate;
 
             List<Score> handledScores = new ArrayList<>();
-            for (String identifier : new HashSet<>(objective.getScores().keySet())) {
+            for (String identifier : new ObjectOpenHashSet<>(objective.getScores().keySet())) {
                 Score score = objective.getScores().get(identifier);
                 Team team = score.getTeam();
 

File: connector/src/main/java/org/geysermc/connector/utils/ChunkUtils.java
Patch:
@@ -35,7 +35,7 @@
 import com.nukkitx.protocol.bedrock.packet.NetworkChunkPublisherUpdatePacket;
 import com.nukkitx.protocol.bedrock.packet.UpdateBlockPacket;
 import org.geysermc.connector.network.session.GeyserSession;
-import org.geysermc.connector.network.translators.TranslatorsInit;
+import org.geysermc.connector.network.translators.Translators;
 import org.geysermc.connector.network.translators.block.BlockTranslator;
 import org.geysermc.connector.world.chunk.ChunkSection;
 
@@ -125,7 +125,7 @@ public static void sendEmptyChunks(GeyserSession session, Vector3i position, int
                 data.setChunkX(chunkX + x);
                 data.setChunkZ(chunkZ + z);
                 data.setSubChunksLength(0);
-                data.setData(TranslatorsInit.EMPTY_LEVEL_CHUNK_DATA);
+                data.setData(Translators.EMPTY_LEVEL_CHUNK_DATA);
                 data.setCachingEnabled(false);
                 session.getUpstream().sendPacket(data);
 

File: connector/src/main/java/org/geysermc/connector/utils/Toolbox.java
Patch:
@@ -48,7 +48,7 @@ public class Toolbox {
     public static final ObjectMapper JSON_MAPPER = new ObjectMapper().disable(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);
     public static final CompoundTag BIOMES;
 
-    public static final Collection<StartGamePacket.ItemEntry> ITEMS = new ArrayList<>();
+    public static final List<StartGamePacket.ItemEntry> ITEMS = new ArrayList<>();
 
     public static final Int2ObjectMap<ItemEntry> ITEM_ENTRIES = new Int2ObjectOpenHashMap<>();
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/scoreboard/JavaTeamTranslator.java
Patch:
@@ -52,12 +52,14 @@ public void translate(ServerTeamPacket packet, GeyserSession session) {
             case CREATE:
                 scoreboard.registerNewTeam(packet.getTeamName(), toPlayerSet(packet.getPlayers()))
                         .setName(MessageUtils.getBedrockMessage(packet.getDisplayName()))
+                        .setColor(packet.getColor())
                         .setPrefix(MessageUtils.getBedrockMessage(packet.getPrefix()))
                         .setSuffix(MessageUtils.getBedrockMessage(packet.getSuffix()));
                 break;
             case UPDATE:
                 scoreboard.getTeam(packet.getTeamName())
                         .setName(MessageUtils.getBedrockMessage(packet.getDisplayName()))
+                        .setColor(packet.getColor())
                         .setPrefix(MessageUtils.getBedrockMessage(packet.getPrefix()))
                         .setSuffix(MessageUtils.getBedrockMessage(packet.getSuffix()))
                         .setUpdateType(UpdateType.UPDATE);

File: connector/src/main/java/org/geysermc/connector/scoreboard/Team.java
Patch:
@@ -25,6 +25,7 @@
 
 package org.geysermc.connector.scoreboard;
 
+import com.github.steveice10.mc.protocol.data.game.scoreboard.TeamColor;
 import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import lombok.Getter;
 import lombok.Setter;
@@ -44,10 +45,10 @@ public class Team {
     private UpdateType updateType = UpdateType.ADD;
     private String name;
     private String prefix;
+    private TeamColor color;
     private String suffix;
     private Set<String> entities = new ObjectOpenHashSet<>();
 
-
     public Team(Scoreboard scoreboard, String id) {
         this.scoreboard = scoreboard;
         this.id = id;

File: connector/src/main/java/org/geysermc/connector/network/translators/block/BlockTranslator.java
Patch:
@@ -114,7 +114,8 @@ public class BlockTranslator {
             if ("minecraft:water[level=0]".equals(javaId)) {
                 waterRuntimeId = bedrockRuntimeId;
             }
-            boolean waterlogged = entry.getValue().has("waterlogged") && entry.getValue().get("waterlogged").booleanValue();
+            boolean waterlogged = entry.getKey().contains("waterlogged=true")
+                    || javaId.contains("minecraft:bubble_column") || javaId.contains("minecraft:kelp") || javaId.contains("seagrass");
 
             if (waterlogged) {
                 BEDROCK_TO_JAVA_BLOCK_MAP.putIfAbsent(bedrockRuntimeId | 1 << 31, javaBlockState);

File: connector/src/main/java/org/geysermc/connector/network/translators/block/BlockTranslator.java
Patch:
@@ -104,7 +104,8 @@ public class BlockTranslator {
             if ("minecraft:water[level=0]".equals(javaId)) {
                 waterRuntimeId = bedrockRuntimeId;
             }
-            boolean waterlogged = entry.getValue().has("waterlogged") && entry.getValue().get("waterlogged").booleanValue();
+            boolean waterlogged = entry.getKey().contains("waterlogged=true")
+                    || javaId.contains("minecraft:bubble_column") || javaId.contains("minecraft:kelp") || javaId.contains("seagrass");
 
             if (waterlogged) {
                 BEDROCK_TO_JAVA_BLOCK_MAP.putIfAbsent(bedrockRuntimeId | 1 << 31, javaBlockState);

File: connector/src/main/java/org/geysermc/connector/network/translators/block/BlockTranslator.java
Patch:
@@ -107,7 +107,6 @@ public class BlockTranslator {
             // The color is in the namespace ID in Java Edition but it's a tag in Bedrock.
             JsonNode bedColor = entry.getValue().get("bed_color");
             if (bedColor != null) {
-                System.out.println(bedColor.intValue());
                 // Converting to byte because the final tag value is a byte. bedColor.binaryValue() returns an array
                 BEDCOLORS.put(javaBlockState, (byte) bedColor.intValue());
             }

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -123,7 +123,7 @@ public enum EntityType {
     PAINTING(PaintingEntity.class, 83, 0f),
     MINECART(MinecartEntity.class, 84, 0f),
     FIREBALL(ItemedFireballEntity.class, 85, 0f),
-    SPLASH_POTION(ThrowableEntity.class, 86, 0f),
+    POTION(ThrowableEntity.class, 86, 0f),
     ENDER_PEARL(ThrowableEntity.class, 87, 0f),
     LEASH_KNOT(Entity.class, 88, 0f),
     WITHER_SKULL(Entity.class, 89, 0f),

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -381,7 +381,7 @@ private void startGame() {
         startGamePacket.setBonusChestEnabled(false);
         startGamePacket.setStartingWithMap(false);
         startGamePacket.setTrustingPlayers(true);
-        startGamePacket.setDefaultPlayerPermission(PlayerPermission.OPERATOR);
+        startGamePacket.setDefaultPlayerPermission(PlayerPermission.MEMBER);
         startGamePacket.setServerChunkTickRange(4);
         startGamePacket.setBehaviorPackLocked(false);
         startGamePacket.setResourcePackLocked(false);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaJoinGameTranslator.java
Patch:
@@ -49,7 +49,7 @@ public void translate(ServerJoinGamePacket packet, GeyserSession session) {
 
         AdventureSettingsPacket bedrockPacket = new AdventureSettingsPacket();
         bedrockPacket.setUniqueEntityId(session.getPlayerEntity().getGeyserId());
-        bedrockPacket.setPlayerPermission(PlayerPermission.OPERATOR);
+        bedrockPacket.setPlayerPermission(PlayerPermission.MEMBER);
         session.getUpstream().sendPacket(bedrockPacket);
 
         PlayStatusPacket playStatus = new PlayStatusPacket();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerAbilitiesTranslator.java
Patch:
@@ -67,7 +67,7 @@ public void translate(ServerPlayerAbilitiesPacket packet, GeyserSession session)
             playerFlags.add(AdventureSettingsPacket.Flag.FLYING);
 
         AdventureSettingsPacket adventureSettingsPacket = new AdventureSettingsPacket();
-        adventureSettingsPacket.setPlayerPermission(PlayerPermission.OPERATOR);
+        adventureSettingsPacket.setPlayerPermission(PlayerPermission.MEMBER);
         adventureSettingsPacket.setUniqueEntityId(entity.getGeyserId());
         adventureSettingsPacket.getFlags().addAll(playerFlags);
         session.getUpstream().sendPacket(adventureSettingsPacket);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaNotifyClientTranslator.java
Patch:
@@ -98,7 +98,7 @@ public void translate(ServerNotifyClientPacket packet, GeyserSession session) {
                 session.setGameMode(gameMode);
 
                 AdventureSettingsPacket adventureSettingsPacket = new AdventureSettingsPacket();
-                adventureSettingsPacket.setPlayerPermission(PlayerPermission.OPERATOR);
+                adventureSettingsPacket.setPlayerPermission(PlayerPermission.MEMBER);
                 adventureSettingsPacket.setUniqueEntityId(entity.getGeyserId());
                 adventureSettingsPacket.getFlags().addAll(playerFlags);
                 session.getUpstream().sendPacket(adventureSettingsPacket);

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -395,7 +395,7 @@ private void startGame() {
         startGamePacket.setBonusChestEnabled(false);
         startGamePacket.setStartingWithMap(false);
         startGamePacket.setTrustingPlayers(true);
-        startGamePacket.setDefaultPlayerPermission(PlayerPermission.OPERATOR);
+        startGamePacket.setDefaultPlayerPermission(PlayerPermission.MEMBER);
         startGamePacket.setServerChunkTickRange(4);
         startGamePacket.setBehaviorPackLocked(false);
         startGamePacket.setResourcePackLocked(false);

File: connector/src/main/java/org/geysermc/connector/entity/PlayerEntity.java
Patch:
@@ -39,6 +39,7 @@
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.entity.type.EntityType;
 import org.geysermc.connector.network.session.GeyserSession;
+import org.geysermc.connector.network.session.cache.EntityEffectCache;
 import org.geysermc.connector.utils.SkinUtils;
 
 import java.util.UUID;
@@ -50,13 +51,15 @@ public class PlayerEntity extends LivingEntity {
     private String username;
     private long lastSkinUpdate = -1;
     private boolean playerList = true;
+    private final EntityEffectCache effectCache;
 
     public PlayerEntity(GameProfile gameProfile, long entityId, long geyserId, Vector3f position, Vector3f motion, Vector3f rotation) {
         super(entityId, geyserId, EntityType.PLAYER, position, motion, rotation);
 
         profile = gameProfile;
         uuid = gameProfile.getId();
         username = gameProfile.getName();
+        effectCache = new EntityEffectCache();
         if (geyserId == 1) valid = true;
     }
 

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -395,7 +395,7 @@ private void startGame() {
         startGamePacket.setBonusChestEnabled(false);
         startGamePacket.setStartingWithMap(false);
         startGamePacket.setTrustingPlayers(true);
-        startGamePacket.setDefaultPlayerPermission(PlayerPermission.OPERATOR);
+        startGamePacket.setDefaultPlayerPermission(PlayerPermission.MEMBER);
         startGamePacket.setServerChunkTickRange(4);
         startGamePacket.setBehaviorPackLocked(false);
         startGamePacket.setResourcePackLocked(false);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityEffectTranslator.java
Patch:
@@ -28,6 +28,7 @@
 import com.github.steveice10.mc.protocol.packet.ingame.server.entity.ServerEntityEffectPacket;
 import com.nukkitx.protocol.bedrock.packet.MobEffectPacket;
 import org.geysermc.connector.entity.Entity;
+import org.geysermc.connector.entity.PlayerEntity;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.utils.EntityUtils;
@@ -39,6 +40,7 @@ public void translate(ServerEntityEffectPacket packet, GeyserSession session) {
         Entity entity = session.getEntityCache().getEntityByJavaId(packet.getEntityId());
         if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {
             entity = session.getPlayerEntity();
+            ((PlayerEntity) entity).getEffectCache().addEffect(packet.getEffect(), packet.getAmplifier());
         }
         if (entity == null)
             return;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityRemoveEffectTranslator.java
Patch:
@@ -28,6 +28,7 @@
 import com.github.steveice10.mc.protocol.packet.ingame.server.entity.ServerEntityRemoveEffectPacket;
 import com.nukkitx.protocol.bedrock.packet.MobEffectPacket;
 import org.geysermc.connector.entity.Entity;
+import org.geysermc.connector.entity.PlayerEntity;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.utils.EntityUtils;
@@ -39,6 +40,7 @@ public void translate(ServerEntityRemoveEffectPacket packet, GeyserSession sessi
         Entity entity = session.getEntityCache().getEntityByJavaId(packet.getEntityId());
         if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {
             entity = session.getPlayerEntity();
+            ((PlayerEntity) entity).getEffectCache().removeEffect(packet.getEffect());
         }
         if (entity == null)
             return;

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -395,7 +395,7 @@ private void startGame() {
         startGamePacket.setBonusChestEnabled(false);
         startGamePacket.setStartingWithMap(false);
         startGamePacket.setTrustingPlayers(true);
-        startGamePacket.setDefaultPlayerPermission(PlayerPermission.OPERATOR);
+        startGamePacket.setDefaultPlayerPermission(PlayerPermission.MEMBER);
         startGamePacket.setServerChunkTickRange(4);
         startGamePacket.setBehaviorPackLocked(false);
         startGamePacket.setResourcePackLocked(false);

File: connector/src/main/java/org/geysermc/connector/network/session/auth/BedrockClientData.java
Patch:
@@ -71,6 +71,7 @@ public enum InputMode {
         UNKNOWN,
         KEYBOARD_MOUSE,
         TOUCH, // I guess Touch?
-        CONTROLLER
+        CONTROLLER,
+        VR
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaUpdateTimeTranslator.java
Patch:
@@ -34,9 +34,9 @@ public class JavaUpdateTimeTranslator extends PacketTranslator<ServerUpdateTimeP
 
     @Override
     public void translate(ServerUpdateTimePacket packet, GeyserSession session) {
+        // https://minecraft.gamepedia.com/Day-night_cycle#24-hour_Minecraft_day
         SetTimePacket setTimePacket = new SetTimePacket();
-        setTimePacket.setTime((int) Math.abs(packet.getTime()));
-
+        setTimePacket.setTime((int) Math.abs(packet.getTime()) % 24000);
         session.getUpstream().sendPacket(setTimePacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/entity/living/monster/CreeperEntity.java
Patch:
@@ -39,6 +39,9 @@ public CreeperEntity(long entityId, long geyserId, EntityType entityType, Vector
 
     @Override
     public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession session) {
+        if (entityMetadata.getId() == 15 && (int) entityMetadata.getValue() > 0) {
+            metadata.getFlags().setFlag(EntityFlag.IGNITED, true);
+        }
         if (entityMetadata.getId() == 16) {
             metadata.getFlags().setFlag(EntityFlag.POWERED, (boolean) entityMetadata.getValue());
         }

File: connector/src/main/java/org/geysermc/connector/entity/LivingEntity.java
Patch:
@@ -64,7 +64,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
                 metadata.put(EntityData.POTION_COLOR, (int) entityMetadata.getValue());
                 break;
             case 10:
-                // metadata.put(EntityData.POTION_AMBIENT, (boolean) entityMetadata.getValue());
+                metadata.put(EntityData.POTION_AMBIENT, (boolean) entityMetadata.getValue());
                 break;
         }
 

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -165,9 +165,9 @@ public void connect(RemoteServer remoteServer) {
 
         ChunkUtils.sendEmptyChunks(this, playerEntity.getPosition().toInt(), 0, false);
 
-        BiomeDefinitionListPacket biomePacket = new BiomeDefinitionListPacket();
-        biomePacket.setTag(CompoundTag.EMPTY);
-        upstream.sendPacket(biomePacket);
+        BiomeDefinitionListPacket biomeDefinitionListPacket = new BiomeDefinitionListPacket();
+        biomeDefinitionListPacket.setTag(Toolbox.BIOMES);
+        upstream.sendPacket(biomeDefinitionListPacket);
 
         AvailableEntityIdentifiersPacket entityPacket = new AvailableEntityIdentifiersPacket();
         entityPacket.setTag(CompoundTag.EMPTY);

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -38,6 +38,7 @@
 import com.nukkitx.math.GenericMath;
 import com.nukkitx.math.TrigMath;
 import com.nukkitx.math.vector.Vector2f;
+import com.nukkitx.math.vector.Vector2i;
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.math.vector.Vector3i;
 import com.nukkitx.nbt.tag.CompoundTag;
@@ -96,6 +97,8 @@ public class GeyserSession implements CommandSender {
 
     private DataCache<Packet> javaPacketCache;
 
+    @Setter
+    private Vector2i lastChunkPosition = null;
     private int renderDistance;
 
     private boolean loggedIn;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerPositionRotationTranslator.java
Patch:
@@ -38,6 +38,7 @@
 import org.geysermc.connector.entity.type.EntityType;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
+import org.geysermc.connector.utils.ChunkUtils;
 
 public class JavaPlayerPositionRotationTranslator extends PacketTranslator<ServerPlayerPositionRotationPacket> {
 
@@ -84,6 +85,8 @@ public void translate(ServerPlayerPositionRotationPacket packet, GeyserSession s
             ClientTeleportConfirmPacket teleportConfirmPacket = new ClientTeleportConfirmPacket(packet.getTeleportId());
             session.getDownstream().getSession().send(teleportConfirmPacket);
 
+            ChunkUtils.updateChunkPosition(session, pos.toInt());
+
             session.getConnector().getLogger().info("Spawned player at " + packet.getX() + " " + packet.getY() + " " + packet.getZ());
             return;
         }

File: connector/src/main/java/org/geysermc/connector/utils/DimensionUtils.java
Patch:
@@ -52,6 +52,7 @@ public static void switchDimension(GeyserSession session, int javaDimension) {
         player.setDimension(bedrockDimension);
         player.setPosition(pos.toFloat());
         session.setSpawned(false);
+        session.setLastChunkPosition(null);
 
         //let java server handle portal travel sound
         StopSoundPacket stopSoundPacket = new StopSoundPacket();

File: connector/src/main/java/org/geysermc/connector/command/GeyserCommandMap.java
Patch:
@@ -61,7 +61,7 @@ public void registerCommand(GeyserCommand command) {
     }
 
     public void runCommand(CommandSender sender, String command) {
-        if (!command.startsWith("/geyser "))
+        if (!command.startsWith("geyser "))
             return;
 
         command = command.trim();
@@ -80,7 +80,7 @@ public void runCommand(CommandSender sender, String command) {
 
         GeyserCommand cmd = commandMap.get(label);
         if (cmd == null) {
-            connector.getLogger().warning("Invalid Command! Try /help for a list of commands.");
+            connector.getLogger().error("Invalid Command! Try /geyser help for a list of commands.");
             return;
         }
 

File: connector/src/main/java/org/geysermc/connector/command/defaults/HelpCommand.java
Patch:
@@ -52,7 +52,7 @@ public void execute(CommandSender sender, String[] args) {
         Collections.sort(commands);
 
         for (String cmd : commands) {
-            sender.sendMessage(ChatColor.YELLOW + "/" + cmd + ChatColor.WHITE + ": " + cmds.get(cmd).getDescription());
+            sender.sendMessage(ChatColor.YELLOW + "/geyser " + cmd + ChatColor.WHITE + ": " + cmds.get(cmd).getDescription());
         }
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/BrewingInventoryTranslator.java
Patch:
@@ -26,7 +26,7 @@
 package org.geysermc.connector.network.translators.inventory;
 
 import com.nukkitx.protocol.bedrock.data.ContainerType;
-import com.nukkitx.protocol.bedrock.data.InventoryAction;
+import com.nukkitx.protocol.bedrock.data.InventoryActionData;
 import com.nukkitx.protocol.bedrock.packet.ContainerSetDataPacket;
 import org.geysermc.connector.inventory.Inventory;
 import org.geysermc.connector.network.session.GeyserSession;
@@ -66,7 +66,7 @@ public void updateProperty(GeyserSession session, Inventory inventory, int key,
     }
 
     @Override
-    public int bedrockSlotToJava(InventoryAction action) {
+    public int bedrockSlotToJava(InventoryActionData action) {
         final int slot = super.bedrockSlotToJava(action);
         switch (slot) {
             case 0:

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/InventoryTranslator.java
Patch:
@@ -25,7 +25,7 @@
 
 package org.geysermc.connector.network.translators.inventory;
 
-import com.nukkitx.protocol.bedrock.data.InventoryAction;
+import com.nukkitx.protocol.bedrock.data.InventoryActionData;
 import lombok.AllArgsConstructor;
 import org.geysermc.connector.inventory.Inventory;
 import org.geysermc.connector.network.session.GeyserSession;
@@ -42,8 +42,8 @@ public abstract class InventoryTranslator {
     public abstract void updateProperty(GeyserSession session, Inventory inventory, int key, int value);
     public abstract void updateInventory(GeyserSession session, Inventory inventory);
     public abstract void updateSlot(GeyserSession session, Inventory inventory, int slot);
-    public abstract int bedrockSlotToJava(InventoryAction action);
+    public abstract int bedrockSlotToJava(InventoryActionData action);
     public abstract int javaSlotToBedrock(int slot);
     public abstract SlotType getSlotType(int javaSlot);
-    public abstract void translateActions(GeyserSession session, Inventory inventory, List<InventoryAction> actions);
+    public abstract void translateActions(GeyserSession session, Inventory inventory, List<InventoryActionData> actions);
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/updater/ChestInventoryUpdater.java
Patch:
@@ -64,8 +64,8 @@ public boolean updateSlot(InventoryTranslator translator, GeyserSession session,
 
         InventorySlotPacket slotPacket = new InventorySlotPacket();
         slotPacket.setContainerId(inventory.getId());
-        slotPacket.setInventorySlot(translator.javaSlotToBedrock(javaSlot));
-        slotPacket.setSlot(TranslatorsInit.getItemTranslator().translateToBedrock(inventory.getItem(javaSlot)));
+        slotPacket.setSlot(translator.javaSlotToBedrock(javaSlot));
+        slotPacket.setItem(TranslatorsInit.getItemTranslator().translateToBedrock(inventory.getItem(javaSlot)));
         session.getUpstream().sendPacket(slotPacket);
         return true;
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/updater/ContainerInventoryUpdater.java
Patch:
@@ -56,8 +56,8 @@ public boolean updateSlot(InventoryTranslator translator, GeyserSession session,
 
         InventorySlotPacket slotPacket = new InventorySlotPacket();
         slotPacket.setContainerId(inventory.getId());
-        slotPacket.setInventorySlot(translator.javaSlotToBedrock(javaSlot));
-        slotPacket.setSlot(TranslatorsInit.getItemTranslator().translateToBedrock(inventory.getItem(javaSlot)));
+        slotPacket.setSlot(translator.javaSlotToBedrock(javaSlot));
+        slotPacket.setItem(TranslatorsInit.getItemTranslator().translateToBedrock(inventory.getItem(javaSlot)));
         session.getUpstream().sendPacket(slotPacket);
         return true;
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/updater/InventoryUpdater.java
Patch:
@@ -51,8 +51,8 @@ public boolean updateSlot(InventoryTranslator translator, GeyserSession session,
         if (javaSlot >= translator.size) {
             InventorySlotPacket slotPacket = new InventorySlotPacket();
             slotPacket.setContainerId(ContainerId.INVENTORY);
-            slotPacket.setInventorySlot(translator.javaSlotToBedrock(javaSlot));
-            slotPacket.setSlot(TranslatorsInit.getItemTranslator().translateToBedrock(inventory.getItem(javaSlot)));
+            slotPacket.setSlot(translator.javaSlotToBedrock(javaSlot));
+            slotPacket.setItem(TranslatorsInit.getItemTranslator().translateToBedrock(inventory.getItem(javaSlot)));
             session.getUpstream().sendPacket(slotPacket);
             return true;
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemTranslator.java
Patch:
@@ -189,13 +189,13 @@ private Tag translateToJavaNBT(com.nukkitx.nbt.tag.Tag tag) {
                         continue;
 
                     com.nukkitx.nbt.tag.CompoundTag tagValue = (com.nukkitx.nbt.tag.CompoundTag) value;
-                    int bedrockId = tagValue.getAsShort("id", (short) -1);
+                    int bedrockId = tagValue.getShort("id", (short) -1);
                     Enchantment enchantment = Enchantment.getByBedrockId(bedrockId);
                     if (enchantment != null) {
                         CompoundTag javaTag = new CompoundTag("");
                         Map<String, Tag> javaValue = javaTag.getValue();
                         javaValue.put("id", new StringTag("id", enchantment.getJavaIdentifier()));
-                        javaValue.put("lvl", new IntTag("lvl", tagValue.getAsShort("lvl", (short) 1)));
+                        javaValue.put("lvl", new IntTag("lvl", tagValue.getShort("lvl", (short) 1)));
                         javaTag.setValue(javaValue);
                         tags.add(javaTag);
                     } else {

File: connector/src/main/java/org/geysermc/connector/utils/InventoryUtils.java
Patch:
@@ -82,8 +82,8 @@ public static void closeInventory(GeyserSession session, int windowId) {
     public static void updateCursor(GeyserSession session) {
         InventorySlotPacket cursorPacket = new InventorySlotPacket();
         cursorPacket.setContainerId(ContainerId.CURSOR);
-        cursorPacket.setInventorySlot(0);
-        cursorPacket.setSlot(TranslatorsInit.getItemTranslator().translateToBedrock(session.getInventory().getCursor()));
+        cursorPacket.setSlot(0);
+        cursorPacket.setItem(TranslatorsInit.getItemTranslator().translateToBedrock(session.getInventory().getCursor()));
         session.getUpstream().sendPacket(cursorPacket);
     }
 

File: connector/src/main/java/org/geysermc/connector/network/session/cache/EntityCache.java
Patch:
@@ -55,7 +55,6 @@ public EntityCache(GeyserSession session) {
     }
 
     public void spawnEntity(Entity entity) {
-        entity.moveAbsolute(entity.getPosition(), entity.getRotation().getX(), entity.getRotation().getY());
         cacheEntity(entity);
         entity.spawnEntity(session);
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockInteractTranslator.java
Patch:
@@ -44,12 +44,12 @@ public void translate(InteractPacket packet, GeyserSession session) {
             return;
 
         switch (packet.getAction()) {
-            case 1:
+            case INTERACT:
                 ClientPlayerInteractEntityPacket interactPacket = new ClientPlayerInteractEntityPacket((int) entity.getEntityId(),
                         InteractAction.INTERACT, Hand.MAIN_HAND);
                 session.getDownstream().getSession().send(interactPacket);
                 break;
-            case 2:
+            case DAMAGE:
                 ClientPlayerInteractEntityPacket attackPacket = new ClientPlayerInteractEntityPacket((int) entity.getEntityId(),
                         InteractAction.ATTACK, Hand.MAIN_HAND);
                 session.getDownstream().getSession().send(attackPacket);

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockRespawnTranslator.java
Patch:
@@ -36,11 +36,11 @@ public class BedrockRespawnTranslator extends PacketTranslator<RespawnPacket> {
 
     @Override
     public void translate(RespawnPacket packet, GeyserSession session) {
-        if (packet.getSpawnState() == RespawnPacket.State.CLIENT_READY) {
+        if (packet.getState() == RespawnPacket.State.CLIENT_READY) {
             RespawnPacket respawnPacket = new RespawnPacket();
             respawnPacket.setRuntimeEntityId(0);
             respawnPacket.setPosition(Vector3f.ZERO);
-            respawnPacket.setSpawnState(RespawnPacket.State.SERVER_SEARCHING);
+            respawnPacket.setState(RespawnPacket.State.SERVER_SEARCHING);
             session.getUpstream().sendPacket(respawnPacket);
 
             ClientRequestPacket javaRespawnPacket = new ClientRequestPacket(ClientRequest.RESPAWN);

File: connector/src/main/java/org/geysermc/connector/network/translators/block/BlockTranslator.java
Patch:
@@ -66,7 +66,7 @@ public class BlockTranslator {
         Map<CompoundTag, CompoundTag> blockStateMap = new HashMap<>();
 
         for (CompoundTag tag : blocksTag.getValue()) {
-            if (blockStateMap.putIfAbsent(tag.getAsCompound("block"), tag) != null) {
+            if (blockStateMap.putIfAbsent(tag.getCompound("block"), tag) != null) {
                 throw new AssertionError("Duplicate block states in Bedrock palette");
             }
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/GenericInventoryTranslator.java
Patch:
@@ -67,8 +67,8 @@ public void updateInventory(GeyserSession session, Inventory inventory) {
     public void updateSlot(GeyserSession session, Inventory inventory, int slot) {
         InventorySlotPacket slotPacket = new InventorySlotPacket();
         slotPacket.setContainerId(inventory.getId());
-        slotPacket.setSlot(TranslatorsInit.getItemTranslator().translateToBedrock(inventory.getItems()[slot]));
-        slotPacket.setInventorySlot(slot);
+        slotPacket.setItem(TranslatorsInit.getItemTranslator().translateToBedrock(inventory.getItems()[slot]));
+        slotPacket.setSlot(slot);
         session.getUpstream().sendPacket(slotPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaJoinGameTranslator.java
Patch:
@@ -27,6 +27,7 @@
 
 import com.github.steveice10.mc.protocol.packet.ingame.server.ServerJoinGamePacket;
 
+import com.nukkitx.protocol.bedrock.data.PlayerPermission;
 import com.nukkitx.protocol.bedrock.packet.*;
 import org.geysermc.connector.entity.PlayerEntity;
 import org.geysermc.connector.network.session.GeyserSession;
@@ -43,7 +44,7 @@ public void translate(ServerJoinGamePacket packet, GeyserSession session) {
 
         AdventureSettingsPacket bedrockPacket = new AdventureSettingsPacket();
         bedrockPacket.setUniqueEntityId(session.getPlayerEntity().getGeyserId());
-        bedrockPacket.setPlayerPermission(1);
+        bedrockPacket.setPlayerPermission(PlayerPermission.OPERATOR);
         session.getUpstream().sendPacket(bedrockPacket);
 
         PlayStatusPacket playStatus = new PlayStatusPacket();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerListEntryTranslator.java
Patch:
@@ -41,7 +41,7 @@ public void translate(ServerPlayerListEntryPacket packet, GeyserSession session)
         if (packet.getAction() != PlayerListEntryAction.ADD_PLAYER && packet.getAction() != PlayerListEntryAction.REMOVE_PLAYER) return;
 
         PlayerListPacket translate = new PlayerListPacket();
-        translate.setType(packet.getAction() == PlayerListEntryAction.ADD_PLAYER ? PlayerListPacket.Type.ADD : PlayerListPacket.Type.REMOVE);
+        translate.setAction(packet.getAction() == PlayerListEntryAction.ADD_PLAYER ? PlayerListPacket.Action.ADD : PlayerListPacket.Action.REMOVE);
 
         for (PlayerListEntry entry : packet.getEntries()) {
             if (packet.getAction() == PlayerListEntryAction.ADD_PLAYER) {

File: connector/src/main/java/org/geysermc/connector/utils/SkinUtils.java
Patch:
@@ -165,12 +165,12 @@ public static void requestAndHandleSkinAndCape(PlayerEntity entity, GeyserSessio
                                     );
 
                                     PlayerListPacket playerRemovePacket = new PlayerListPacket();
-                                    playerRemovePacket.setType(PlayerListPacket.Type.REMOVE);
+                                    playerRemovePacket.setAction(PlayerListPacket.Action.REMOVE);
                                     playerRemovePacket.getEntries().add(updatedEntry);
                                     session.getUpstream().sendPacket(playerRemovePacket);
 
                                     PlayerListPacket playerAddPacket = new PlayerListPacket();
-                                    playerAddPacket.setType(PlayerListPacket.Type.ADD);
+                                    playerAddPacket.setAction(PlayerListPacket.Action.ADD);
                                     playerAddPacket.getEntries().add(updatedEntry);
                                     session.getUpstream().sendPacket(playerAddPacket);
                                 }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockMovePlayerTranslator.java
Patch:
@@ -26,6 +26,7 @@
 package org.geysermc.connector.network.translators.bedrock;
 
 import com.github.steveice10.mc.protocol.packet.ingame.client.player.ClientPlayerPositionRotationPacket;
+import com.nukkitx.math.GenericMath;
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.packet.MoveEntityAbsolutePacket;
 import com.nukkitx.protocol.bedrock.packet.MovePlayerPacket;
@@ -63,8 +64,7 @@ public void translate(MovePlayerPacket packet, GeyserSession session) {
 
         double javaY = Math.ceil((packet.getPosition().getY() - EntityType.PLAYER.getOffset()) * 2) / 2;
         ClientPlayerPositionRotationPacket playerPositionRotationPacket = new ClientPlayerPositionRotationPacket(
-                packet.isOnGround(), packet.getPosition().getX(), javaY,
-                packet.getPosition().getZ(), packet.getRotation().getY(), packet.getRotation().getX()
+                packet.isOnGround(), GenericMath.round(packet.getPosition().getX(), 4), javaY, GenericMath.round(packet.getPosition().getZ(), 4), packet.getRotation().getY(), packet.getRotation().getX()
         );
 
         // head yaw, pitch, head yaw

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerPositionRotationTranslator.java
Patch:
@@ -92,7 +92,7 @@ public void translate(ServerPlayerPositionRotationPacket packet, GeyserSession s
             float zDis = Math.abs(entity.getPosition().getZ() - (float) packet.getZ());
 
             if (xDis > 1.5 || (yDis < 1.45 || yDis > (session.isJumping() ? 4.3 : (session.isSprinting() ? 2.5 : 1.9))) || zDis > 1.5) {
-                entity.moveAbsolute(session, Vector3f.from(packet.getX(), packet.getY() + 0.6f, packet.getZ()), packet.getYaw(), packet.getPitch(), true);
+                entity.moveAbsolute(session, Vector3f.from(packet.getX(), packet.getY(), packet.getZ()), packet.getYaw(), packet.getPitch(), true);
             }
         }
 

File: connector/src/main/java/org/geysermc/connector/entity/Entity.java
Patch:
@@ -96,7 +96,7 @@ public Entity(long entityId, long geyserId, EntityType entityType, Vector3f posi
         flags.setFlag(EntityFlag.HAS_GRAVITY, true);
         flags.setFlag(EntityFlag.HAS_COLLISION, true);
         flags.setFlag(EntityFlag.CAN_SHOW_NAME, true);
-        flags.setFlag(EntityFlag.CAN_CLIMB, false);
+        flags.setFlag(EntityFlag.CAN_CLIMB, true);
         metadata.putFlags(flags);
     }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/TranslatorsInit.java
Patch:
@@ -146,6 +146,9 @@ public static void start() {
         Registry.registerJava(ServerMultiBlockChangePacket.class, new JavaMultiBlockChangeTranslator());
         Registry.registerJava(ServerUnloadChunkPacket.class, new JavaUnloadChunkTranslator());
 
+        Registry.registerJava(ServerUpdateViewPositionPacket.class, new JavaUpdateViewPositionTranslator());
+        Registry.registerJava(ServerUpdateViewDistancePacket.class, new JavaUpdateViewDistanceTranslator());
+
         Registry.registerJava(ServerOpenWindowPacket.class, new OpenWindowPacketTranslator());
 
         Registry.registerBedrock(AnimatePacket.class, new BedrockAnimateTranslator());

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockMovePlayerTranslator.java
Patch:
@@ -42,7 +42,7 @@ public class BedrockMovePlayerTranslator extends PacketTranslator<MovePlayerPack
     @Override
     public void translate(MovePlayerPacket packet, GeyserSession session) {
         PlayerEntity entity = session.getPlayerEntity();
-        if (entity == null || !session.isSpawned() || session.isSwitchingDimension()) return;
+        if (entity == null || !session.isSpawned() || session.getPendingDimSwitches().get() > 0) return;
 
         if (!session.getUpstream().isInitialized()) {
             MoveEntityAbsolutePacket moveEntityBack = new MoveEntityAbsolutePacket();

File: connector/src/main/java/org/geysermc/connector/entity/Entity.java
Patch:
@@ -182,7 +182,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
                     metadata.getFlags().setFlag(EntityFlag.GLIDING, (xd & 0x80) == 0x80);
                     // metadata.getFlags().setFlag(EntityFlag.INVISIBLE, (xd & 0x20) == 0x20);
                     if ((xd & 0x20) == 0x20)
-                        metadata.put(EntityData.SCALE, 0.01f);
+                        metadata.put(EntityData.SCALE, 0.0f);
                     else
                         metadata.put(EntityData.SCALE, scale);
                 }

File: connector/src/main/java/org/geysermc/connector/entity/living/ArmorStandEntity.java
Patch:
@@ -43,7 +43,7 @@ public ArmorStandEntity(long entityId, long geyserId, EntityType entityType, Vec
     public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession session) {
         if (entityMetadata.getType() == MetadataType.BYTE) {
             byte xd = (byte) entityMetadata.getValue();
-            if((xd & 0x01) == 0x01) {
+            if((xd & 0x01) == 0x01 && !(metadata.get(EntityData.SCALE).equals(0.0f))) {
                 metadata.put(EntityData.SCALE, .55f);
             }
         }

File: connector/src/main/java/org/geysermc/connector/entity/Entity.java
Patch:
@@ -182,7 +182,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
                     metadata.getFlags().setFlag(EntityFlag.GLIDING, (xd & 0x80) == 0x80);
                     // metadata.getFlags().setFlag(EntityFlag.INVISIBLE, (xd & 0x20) == 0x20);
                     if ((xd & 0x20) == 0x20)
-                        metadata.put(EntityData.SCALE, 0.01f);
+                        metadata.put(EntityData.SCALE, 0.0f);
                     else
                         metadata.put(EntityData.SCALE, scale);
                 }

File: connector/src/main/java/org/geysermc/connector/entity/living/ArmorStandEntity.java
Patch:
@@ -43,7 +43,7 @@ public ArmorStandEntity(long entityId, long geyserId, EntityType entityType, Vec
     public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession session) {
         if (entityMetadata.getType() == MetadataType.BYTE) {
             byte xd = (byte) entityMetadata.getValue();
-            if((xd & 0x01) == 0x01) {
+            if((xd & 0x01) == 0x01 && !(metadata.get(EntityData.SCALE).equals(0.0f))) {
                 metadata.put(EntityData.SCALE, .55f);
             }
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityPositionRotationTranslator.java
Patch:
@@ -26,7 +26,6 @@
 package org.geysermc.connector.network.translators.java.entity;
 
 import com.github.steveice10.mc.protocol.packet.ingame.server.entity.ServerEntityPositionRotationPacket;
-import com.nukkitx.protocol.bedrock.packet.MoveEntityAbsolutePacket;
 import org.geysermc.connector.entity.Entity;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerPositionRotationTranslator.java
Patch:
@@ -83,6 +83,7 @@ public void translate(ServerPlayerPositionRotationPacket packet, GeyserSession s
         }
 
         session.setSpawned(true);
+        entity.moveAbsolute(session, Vector3f.from(packet.getX(), packet.getY() + EntityType.PLAYER.getOffset() + 0.1f, packet.getZ()), packet.getYaw(), packet.getPitch(), true);
 
         ClientTeleportConfirmPacket teleportConfirmPacket = new ClientTeleportConfirmPacket(packet.getTeleportId());
         session.getDownstream().getSession().send(teleportConfirmPacket);

File: connector/src/main/java/org/geysermc/connector/network/session/cache/EntityCache.java
Patch:
@@ -55,7 +55,6 @@ public EntityCache(GeyserSession session) {
     }
 
     public void spawnEntity(Entity entity) {
-        entity.moveAbsolute(entity.getPosition(), entity.getRotation().getX(), entity.getRotation().getY());
         cacheEntity(entity);
         entity.spawnEntity(session);
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockInteractTranslator.java
Patch:
@@ -44,12 +44,12 @@ public void translate(InteractPacket packet, GeyserSession session) {
             return;
 
         switch (packet.getAction()) {
-            case NONE:
+            case UNKNOWN_1: // interact
                 ClientPlayerInteractEntityPacket interactPacket = new ClientPlayerInteractEntityPacket((int) entity.getEntityId(),
                         InteractAction.INTERACT, Hand.MAIN_HAND);
                 session.getDownstream().getSession().send(interactPacket);
                 break;
-            case UNKNOWN_1:
+            case DAMAGE:
                 ClientPlayerInteractEntityPacket attackPacket = new ClientPlayerInteractEntityPacket((int) entity.getEntityId(),
                         InteractAction.ATTACK, Hand.MAIN_HAND);
                 session.getDownstream().getSession().send(attackPacket);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityEquipmentTranslator.java
Patch:
@@ -70,7 +70,7 @@ public void translate(ServerEntityEquipmentPacket packet, GeyserSession session)
                 livingEntity.setHand(item);
                 break;
             case OFF_HAND:
-                // TODO: livingEntity.setOffHand(item);
+                livingEntity.setOffHand(item);
                 break;
         }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityPropertiesTranslator.java
Patch:
@@ -41,7 +41,7 @@ public void translate(ServerEntityPropertiesPacket packet, GeyserSession session
         if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {
             entity = session.getPlayerEntity();
         }
-        if (entity == null || !entity.isValid()) return;
+        if (entity == null) return;
 
         for (Attribute attribute : packet.getAttributes()) {
             switch (attribute.getType()) {

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/spawn/JavaSpawnPlayerTranslator.java
Patch:
@@ -50,6 +50,7 @@ public void translate(ServerSpawnPlayerPacket packet, GeyserSession session) {
         entity.setEntityId(packet.getEntityId());
         entity.setPosition(position);
         entity.setRotation(rotation);
+        session.getEntityCache().cacheEntity(entity);
 
         // async skin loading
         if (session.getUpstream().isInitialized()) {

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityPropertiesTranslator.java
Patch:
@@ -41,7 +41,7 @@ public void translate(ServerEntityPropertiesPacket packet, GeyserSession session
         if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {
             entity = session.getPlayerEntity();
         }
-        if (entity == null || !entity.isValid()) return;
+        if (entity == null) return;
 
         for (Attribute attribute : packet.getAttributes()) {
             switch (attribute.getType()) {

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/spawn/JavaSpawnPlayerTranslator.java
Patch:
@@ -50,6 +50,7 @@ public void translate(ServerSpawnPlayerPacket packet, GeyserSession session) {
         entity.setEntityId(packet.getEntityId());
         entity.setPosition(position);
         entity.setRotation(rotation);
+        session.getEntityCache().cacheEntity(entity);
 
         // async skin loading
         if (session.getUpstream().isInitialized()) {

File: connector/src/main/java/org/geysermc/connector/entity/LivingEntity.java
Patch:
@@ -83,6 +83,7 @@ public void updateEquipment(GeyserSession session) {
         MobEquipmentPacket mobEquipmentPacket = new MobEquipmentPacket();
         mobEquipmentPacket.setRuntimeEntityId(geyserId);
         mobEquipmentPacket.setItem(hand);
+        mobEquipmentPacket.setHotbarSlot(-1);
 
         session.getUpstream().sendPacket(armorEquipmentPacket);
         session.getUpstream().sendPacket(mobEquipmentPacket);

File: connector/src/main/java/org/geysermc/connector/network/translators/TranslatorsInit.java
Patch:
@@ -146,6 +146,9 @@ public static void start() {
         Registry.registerJava(ServerMultiBlockChangePacket.class, new JavaMultiBlockChangeTranslator());
         Registry.registerJava(ServerUnloadChunkPacket.class, new JavaUnloadChunkTranslator());
 
+        Registry.registerJava(ServerUpdateViewPositionPacket.class, new JavaUpdateViewPositionTranslator());
+        Registry.registerJava(ServerUpdateViewDistancePacket.class, new JavaUpdateViewDistanceTranslator());
+
         Registry.registerJava(ServerOpenWindowPacket.class, new OpenWindowPacketTranslator());
 
         Registry.registerBedrock(AnimatePacket.class, new BedrockAnimateTranslator());

File: connector/src/main/java/org/geysermc/connector/utils/Toolbox.java
Patch:
@@ -50,6 +50,7 @@ public class Toolbox {
 
     public static final Int2ObjectMap<ItemEntry> ITEM_ENTRIES = new Int2ObjectOpenHashMap<>();
     public static final Int2ObjectMap<BlockEntry> BLOCK_ENTRIES = new Int2ObjectOpenHashMap<>();
+    public static final Map<String, BlockEntry> JAVA_IDENTIFIER_TO_ENTRY = new HashMap<>();
 
     public static void init() {
         InputStream stream = GeyserConnector.class.getClassLoader().getResourceAsStream("bedrock/runtime_block_states.dat");
@@ -140,6 +141,7 @@ public static void init() {
                     }
                     BlockEntry blockEntry = new BlockEntry(javaEntry.getKey(), javaIndex, bedrockIndex);
                     BLOCK_ENTRIES.put(javaIndex, blockEntry);
+                    JAVA_IDENTIFIER_TO_ENTRY.put(javaEntry.getKey(), blockEntry);
                     continue javaLoop;
                 }
             }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockMovePlayerTranslator.java
Patch:
@@ -42,7 +42,7 @@ public class BedrockMovePlayerTranslator extends PacketTranslator<MovePlayerPack
     @Override
     public void translate(MovePlayerPacket packet, GeyserSession session) {
         PlayerEntity entity = session.getPlayerEntity();
-        if (entity == null || !session.isSpawned() || session.isSwitchingDimension()) return;
+        if (entity == null || !session.isSpawned() || session.getPendingDimSwitches().get() > 0) return;
 
         if (!session.getUpstream().isInitialized()) {
             MoveEntityAbsolutePacket moveEntityBack = new MoveEntityAbsolutePacket();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaJoinGameTranslator.java
Patch:
@@ -31,6 +31,7 @@
 import org.geysermc.connector.entity.PlayerEntity;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
+import org.geysermc.connector.utils.ChunkUtils;
 import org.geysermc.connector.utils.DimensionUtils;
 
 public class JavaJoinGameTranslator extends PacketTranslator<ServerJoinGamePacket> {
@@ -67,7 +68,8 @@ public void translate(ServerJoinGamePacket packet, GeyserSession session) {
         session.getUpstream().sendPacket(chunkRadiusPacket);
 
         if (DimensionUtils.javaToBedrock(packet.getDimension()) != entity.getDimension()) {
-            DimensionUtils.switchDimension(session, packet.getDimension(), false);
+            ChunkUtils.sendEmptyChunks(session, entity.getPosition().toInt(), 3, true);
+            DimensionUtils.switchDimension(session, packet.getDimension());
         }
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/PlayerInventoryTranslator.java
Patch:
@@ -182,7 +182,7 @@ public void translateActions(GeyserSession session, Inventory inventory, List<In
                         } else {
                             javaItem = TranslatorsInit.getItemTranslator().translateToJava(action.getToItem());
                         }
-                        ClientCreativeInventoryActionPacket creativePacket = new ClientCreativeInventoryActionPacket(javaSlot, InventoryUtils.fixStack(javaItem));
+                        ClientCreativeInventoryActionPacket creativePacket = new ClientCreativeInventoryActionPacket(javaSlot, javaItem);
                         session.getDownstream().getSession().send(creativePacket);
                         inventory.setItem(javaSlot, javaItem);
                         break;
@@ -195,7 +195,7 @@ public void translateActions(GeyserSession session, Inventory inventory, List<In
                         if (action.getSource().getType() == InventorySource.Type.WORLD_INTERACTION
                                 && action.getSource().getFlag() == InventorySource.Flag.DROP_ITEM) {
                             javaItem = TranslatorsInit.getItemTranslator().translateToJava(action.getToItem());
-                            ClientCreativeInventoryActionPacket creativeDropPacket = new ClientCreativeInventoryActionPacket(-1, InventoryUtils.fixStack(javaItem));
+                            ClientCreativeInventoryActionPacket creativeDropPacket = new ClientCreativeInventoryActionPacket(-1, javaItem);
                             session.getDownstream().getSession().send(creativeDropPacket);
                         }
                         break;

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/action/ClickPlan.java
Patch:
@@ -61,7 +61,7 @@ public void execute(GeyserSession session, InventoryTranslator translator, Inven
                 refresh = true;
 
             ClientWindowActionPacket clickPacket = new ClientWindowActionPacket(inventory.getId(),
-                    actionId, action.slot, !planIter.hasNext() && refresh ? InventoryUtils.REFRESH_ITEM : InventoryUtils.fixStack(clickedItem),
+                    actionId, action.slot, !planIter.hasNext() && refresh ? InventoryUtils.REFRESH_ITEM : clickedItem,
                     WindowAction.CLICK_ITEM, action.click.actionParam);
 
             if (translator.getSlotType(action.slot) == SlotType.OUTPUT) {

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/EnchantmentInventoryTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -28,10 +28,11 @@
 import com.nukkitx.protocol.bedrock.data.ContainerType;
 import org.geysermc.connector.inventory.Inventory;
 import org.geysermc.connector.network.session.GeyserSession;
+import org.geysermc.connector.network.translators.inventory.updater.ContainerInventoryUpdater;
 
 public class EnchantmentInventoryTranslator extends BlockInventoryTranslator {
     public EnchantmentInventoryTranslator() {
-        super(2, "minecraft:enchanting_table", ContainerType.ENCHANTMENT);
+        super(2, "minecraft:enchanting_table", ContainerType.ENCHANTMENT, new ContainerInventoryUpdater());
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/FurnaceInventoryTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -30,10 +30,11 @@
 import com.nukkitx.protocol.bedrock.packet.ContainerSetDataPacket;
 import org.geysermc.connector.inventory.Inventory;
 import org.geysermc.connector.network.session.GeyserSession;
+import org.geysermc.connector.network.translators.inventory.updater.ContainerInventoryUpdater;
 
 public class FurnaceInventoryTranslator extends BlockInventoryTranslator {
     public FurnaceInventoryTranslator() {
-        super(3, "minecraft:furnace[facing=north,lit=false]", ContainerType.FURNACE);
+        super(3, "minecraft:furnace[facing=north,lit=false]", ContainerType.FURNACE, new ContainerInventoryUpdater());
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/SlotType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/item/Enchantment.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemTranslator.java
Patch:
@@ -74,9 +74,8 @@ public ItemStack translateToJava(ItemData data) {
     }
 
     public ItemData translateToBedrock(ItemStack stack) {
-        // Most likely dirt if null
         if (stack == null) {
-            return ItemData.of(3, (short)0, 0);
+            return ItemData.AIR;
         }
 
         ItemEntry bedrockItem = getItem(stack);

File: connector/src/main/java/org/geysermc/connector/network/translators/item/Potion.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaCloseWindowTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaConfirmTransactionTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaOpenWindowTranslator.java
Patch:
@@ -80,7 +80,7 @@ public void translate(ServerOpenWindowPacket packet, GeyserSession session) {
             InventoryTranslator openTranslator = TranslatorsInit.getInventoryTranslators().get(openInventory.getWindowType());
             if (!openTranslator.getClass().equals(newTranslator.getClass())) {
                 InventoryUtils.closeInventory(session, openInventory.getId());
-                Geyser.getGeneralThreadPool().schedule(() -> InventoryUtils.openInventory(session, newInventory), 350, TimeUnit.MILLISECONDS);
+                Geyser.getGeneralThreadPool().schedule(() -> InventoryUtils.openInventory(session, newInventory), 500, TimeUnit.MILLISECONDS);
                 return;
             }
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaSetSlotTranslator.java
Patch:
@@ -31,6 +31,7 @@
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.network.translators.TranslatorsInit;
 import org.geysermc.connector.network.translators.inventory.InventoryTranslator;
+import org.geysermc.connector.utils.InventoryUtils;
 
 import java.util.Objects;
 
@@ -43,8 +44,9 @@ public void translate(ServerSetSlotPacket packet, GeyserSession session) {
                 return;
             if (session.getCraftSlot() != 0)
                 return;
-            //bedrock client is bugged when changing the cursor. do not send slot update packet
+
             session.getInventory().setCursor(packet.getItem());
+            InventoryUtils.updateCursor(session);
             return;
         }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaWindowPropertyTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: common/src/main/java/org/geysermc/common/IGeyserConfiguration.java
Patch:
@@ -25,7 +25,7 @@
 
 package org.geysermc.common;
 
-import java.io.File;
+import java.nio.file.Path;
 import java.util.Map;
 
 public interface IGeyserConfiguration {
@@ -46,7 +46,7 @@ public interface IGeyserConfiguration {
 
     boolean isAllowThirdPartyCapes();
 
-    File getFloodgateKeyFile();
+    Path getFloodgateKeyFile();
 
     IMetricsInfo getMetrics();
 

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -66,7 +66,6 @@
 
 import java.io.IOException;
 import java.net.InetSocketAddress;
-import java.nio.file.Paths;
 import java.security.NoSuchAlgorithmException;
 import java.security.PublicKey;
 import java.security.spec.InvalidKeySpecException;
@@ -190,7 +189,7 @@ public void authenticate(String username, String password) {
                     PublicKey key = null;
                     try {
                         key = EncryptionUtil.getKeyFromFile(
-                                Paths.get(connector.getConfig().getFloodgateKeyFile().getPath()),
+                                connector.getConfig().getFloodgateKeyFile(),
                                 PublicKey.class
                         );
                     } catch (IOException | InvalidKeySpecException | NoSuchAlgorithmException e) {

File: connector/src/main/java/org/geysermc/connector/entity/Entity.java
Patch:
@@ -191,7 +191,7 @@ public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession s
                     metadata.put(EntityData.NAMETAG, MessageUtils.getBedrockMessage(name));
                 break;
             case 3: // is custom name visible
-                metadata.getFlags().setFlag(EntityFlag.ALWAYS_SHOW_NAME, (boolean) entityMetadata.getValue());
+                metadata.put(EntityData.ALWAYS_SHOW_NAMETAG, (byte) ((boolean) entityMetadata.getValue() ? 1 : 0));
                 break;
             case 4: // silent
                 metadata.getFlags().setFlag(EntityFlag.SILENT, (boolean) entityMetadata.getValue());

File: connector/src/main/java/org/geysermc/connector/utils/BlockEntityUtils.java
Patch:
@@ -10,6 +10,8 @@
 
 public class BlockEntityUtils {
 
+    private static final BlockEntityTranslator EMPTY_TRANSLATOR = TranslatorsInit.getBlockEntityTranslators().get("Empty");
+
     public static String getBedrockBlockEntityId(String id) {
         // This is the only exception when it comes to block entity ids
         if (id.contains("piston_head"))
@@ -30,7 +32,7 @@ public static String getBedrockBlockEntityId(String id) {
     public static BlockEntityTranslator getBlockEntityTranslator(String name) {
         BlockEntityTranslator blockEntityTranslator = TranslatorsInit.getBlockEntityTranslators().get(name);
         if (blockEntityTranslator == null) {
-            return TranslatorsInit.getBlockEntityTranslators().get("Empty");
+            return EMPTY_TRANSLATOR;
         }
 
         return blockEntityTranslator;

File: connector/src/main/java/org/geysermc/connector/utils/ChunkUtils.java
Patch:
@@ -69,7 +69,7 @@ public static ChunkData translateToBedrock(Column column) {
                         BlockEntry block = TranslatorsInit.getBlockTranslator().getBlockEntry(blockState);
                         if (block.getJavaIdentifier().contains("sign[")) {
                             Position pos = new ChunkPosition(column.getX(), column.getZ()).getBlock(x, (chunkY << 4) + y, z);
-                            chunkData.signs.put(block.getJavaId(), TranslatorsInit.getBlockEntityTranslators().get("Sign").getDefaultBedrockTag(pos.getX(), pos.getY(), pos.getZ()));
+                            chunkData.signs.put(block.getJavaId(), TranslatorsInit.getBlockEntityTranslators().get("Sign").getDefaultBedrockTag("Sign", pos.getX(), pos.getY(), pos.getZ()));
                         } else {
                             section.getBlockStorageArray()[0].setFullBlock(ChunkSection.blockPosition(x, y, z), block.getBedrockRuntimeId());
                         }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockPlayerInitializedTranslator.java
Patch:
@@ -26,6 +26,8 @@
 package org.geysermc.connector.network.translators.bedrock;
 
 import com.nukkitx.protocol.bedrock.packet.SetLocalPlayerAsInitializedPacket;
+
+import org.geysermc.common.AuthType;
 import org.geysermc.connector.entity.PlayerEntity;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
@@ -38,7 +40,7 @@ public void translate(SetLocalPlayerAsInitializedPacket packet, GeyserSession se
             if (!session.getUpstream().isInitialized()) {
                 session.getUpstream().setInitialized(true);
 
-                if (!(session.getConnector().getConfig().getRemote().getAuthType().hashCode() == "online".hashCode())) {
+                if (!(session.getConnector().getAuthType() == AuthType.OFFLINE)) {
                     session.getConnector().getLogger().info("Attempting to login using offline mode... authentication is disabled.");
                     session.authenticate(session.getAuthData().getName());
                 }

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockPlayerInitializedTranslator.java
Patch:
@@ -40,7 +40,7 @@ public void translate(SetLocalPlayerAsInitializedPacket packet, GeyserSession se
 
                 if (!(session.getConnector().getConfig().getRemote().getAuthType().hashCode() == "online".hashCode())) {
                     session.getConnector().getLogger().info("Attempting to login using offline mode... authentication is disabled.");
-                    session.authenticate(session.getAuthenticationData().getName());
+                    session.authenticate(session.getAuthData().getName());
                 }
 
                 for (PlayerEntity entity : session.getEntityCache().getEntitiesByType(PlayerEntity.class)) {

File: bootstrap/standalone/src/main/java/org/geysermc/platform/standalone/console/ConsoleCommandReader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: bootstrap/standalone/src/main/java/org/geysermc/platform/standalone/console/GeyserLogger.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/command/GeyserCommand.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/command/GeyserCommandMap.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/command/GeyserConsoleCommandSender.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/command/defaults/HelpCommand.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/command/defaults/StopCommand.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/entity/ArrowEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/entity/Entity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/entity/ExpOrbEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/entity/ItemEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/entity/ItemedFireballEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/entity/MinecartEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/entity/PaintingEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/entity/PlayerEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/entity/ThrowableEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/entity/attribute/Attribute.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/entity/attribute/AttributeType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/entity/living/AbstractFishEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/entity/living/AbstractMerchantEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/entity/living/AmbientEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/entity/living/CreatureEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/entity/living/FlyingEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/entity/living/GolemEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/entity/living/InsentientEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/entity/living/WaterEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/AnimalEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -23,9 +23,10 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.entity.living;
+package org.geysermc.connector.entity.living.animal;
 
 import com.nukkitx.math.vector.Vector3f;
+import org.geysermc.connector.entity.living.AgeableEntity;
 import org.geysermc.connector.entity.type.EntityType;
 
 public class AnimalEntity extends AgeableEntity {

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/TameableEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -23,9 +23,10 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.entity.living;
+package org.geysermc.connector.entity.living.animal;
 
 import com.nukkitx.math.vector.Vector3f;
+import org.geysermc.connector.entity.living.animal.AnimalEntity;
 import org.geysermc.connector.entity.type.EntityType;
 
 public class TameableEntity extends AnimalEntity {

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/horse/AbstractHorseEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -23,10 +23,11 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.entity.living;
+package org.geysermc.connector.entity.living.animal.horse;
 
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.EntityMetadata;
 import com.nukkitx.math.vector.Vector3f;
+import org.geysermc.connector.entity.living.animal.AnimalEntity;
 import org.geysermc.connector.entity.type.EntityType;
 import org.geysermc.connector.network.session.GeyserSession;
 

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/horse/ChestedHorseEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.entity.living;
+package org.geysermc.connector.entity.living.animal.horse;
 
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.EntityMetadata;
 import com.nukkitx.math.vector.Vector3f;

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/horse/HorseEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -23,12 +23,11 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.entity.living.horse;
+package org.geysermc.connector.entity.living.animal.horse;
 
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.EntityMetadata;
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.data.EntityData;
-import org.geysermc.connector.entity.living.AbstractHorseEntity;
 import org.geysermc.connector.entity.type.EntityType;
 import org.geysermc.connector.network.session.GeyserSession;
 

File: connector/src/main/java/org/geysermc/connector/entity/living/animal/horse/LlamaEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -23,10 +23,9 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.entity.living.horse;
+package org.geysermc.connector.entity.living.animal.horse;
 
 import com.nukkitx.math.vector.Vector3f;
-import org.geysermc.connector.entity.living.ChestedHorseEntity;
 import org.geysermc.connector.entity.type.EntityType;
 
 public class LlamaEntity extends ChestedHorseEntity {

File: connector/src/main/java/org/geysermc/connector/entity/living/monster/AbstractSkeletonEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.entity.living;
+package org.geysermc.connector.entity.living.monster;
 
 import com.nukkitx.math.vector.Vector3f;
 import org.geysermc.connector.entity.type.EntityType;

File: connector/src/main/java/org/geysermc/connector/entity/living/monster/GuardianEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -29,7 +29,6 @@
 import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.data.EntityData;
 import org.geysermc.connector.entity.Entity;
-import org.geysermc.connector.entity.living.MonsterEntity;
 import org.geysermc.connector.entity.type.EntityType;
 import org.geysermc.connector.network.session.GeyserSession;
 

File: connector/src/main/java/org/geysermc/connector/entity/living/monster/MonsterEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -23,9 +23,10 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.entity.living;
+package org.geysermc.connector.entity.living.monster;
 
 import com.nukkitx.math.vector.Vector3f;
+import org.geysermc.connector.entity.living.CreatureEntity;
 import org.geysermc.connector.entity.type.EntityType;
 
 public class MonsterEntity extends CreatureEntity {

File: connector/src/main/java/org/geysermc/connector/entity/living/monster/raid/AbstractIllagerEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.entity.living;
+package org.geysermc.connector.entity.living.monster.raid;
 
 import com.nukkitx.math.vector.Vector3f;
 import org.geysermc.connector.entity.type.EntityType;

File: connector/src/main/java/org/geysermc/connector/entity/living/monster/raid/RaidParticipantEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -23,9 +23,10 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.entity.living;
+package org.geysermc.connector.entity.living.monster.raid;
 
 import com.nukkitx.math.vector.Vector3f;
+import org.geysermc.connector.entity.living.monster.MonsterEntity;
 import org.geysermc.connector.entity.type.EntityType;
 
 public class RaidParticipantEntity extends MonsterEntity {

File: connector/src/main/java/org/geysermc/connector/entity/living/monster/raid/SpellcasterIllagerEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -23,9 +23,10 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.entity.living;
+package org.geysermc.connector.entity.living.monster.raid;
 
 import com.nukkitx.math.vector.Vector3f;
+import org.geysermc.connector.entity.living.monster.raid.AbstractIllagerEntity;
 import org.geysermc.connector.entity.type.EntityType;
 
 public class SpellcasterIllagerEntity extends AbstractIllagerEntity {

File: connector/src/main/java/org/geysermc/connector/network/ConnectorServerEventHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/LoggingPacketHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/UpstreamPacketHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/remote/RemoteServer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/session/cache/ChunkCache.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/session/cache/DataCache.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/session/cache/InventoryCache.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/session/cache/ScoreboardCache.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/session/cache/WindowCache.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/PacketTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/Registry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockAnimateTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockCommandRequestTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockInteractTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockInventoryTransactionTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockMobEquipmentTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockMovePlayerTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -43,7 +43,7 @@ public class BedrockMovePlayerTranslator extends PacketTranslator<MovePlayerPack
     @Override
     public void translate(MovePlayerPacket packet, GeyserSession session) {
         PlayerEntity entity = session.getPlayerEntity();
-        if (entity == null || !session.isSpawned()) return;
+        if (entity == null || !session.isSpawned() || session.isSwitchingDimension()) return;
 
         if (!session.getUpstream().isInitialized()) {
             MoveEntityAbsolutePacket moveEntityBack = new MoveEntityAbsolutePacket();

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockTextTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/block/BlockEntry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/GenericInventoryTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/InventoryTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemEntry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaChatTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaDifficultyTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaTitleTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityAnimationTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityDestroyTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityEquipmentTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityHeadLookTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityMetadataTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityPositionRotationTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityPositionTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityPropertiesTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityRotationTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityStatusTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityTeleportTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityVelocityTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerAbilitiesTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerActionAckTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerSetExperienceTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/spawn/JavaSpawnExpOrbTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/spawn/JavaSpawnGlobalEntityTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/spawn/JavaSpawnMobTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/spawn/JavaSpawnObjectTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/spawn/JavaSpawnPaintingTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/spawn/JavaSpawnPlayerTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/scoreboard/JavaDisplayScoreboardTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/scoreboard/JavaScoreboardObjectiveTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/scoreboard/JavaTeamTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/scoreboard/JavaUpdateScoreTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaOpenWindowTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaSetSlotTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaWindowItemsTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaMultiBlockChangeTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaSpawnPositionTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -38,7 +38,7 @@ public void translate(ServerSpawnPositionPacket packet, GeyserSession session) {
         SetSpawnPositionPacket spawnPositionPacket = new SetSpawnPositionPacket();
         spawnPositionPacket.setBlockPosition(Vector3i.from(packet.getPosition().getX(), packet.getPosition().getY(), packet.getPosition().getZ()));
         spawnPositionPacket.setSpawnForced(true);
-        spawnPositionPacket.setSpawnType(SetSpawnPositionPacket.Type.PLAYER_SPAWN);
+        spawnPositionPacket.setSpawnType(SetSpawnPositionPacket.Type.WORLD_SPAWN);
         session.getUpstream().sendPacket(spawnPositionPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaUnloadChunkTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaUpdateTimeTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/scoreboard/Objective.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/scoreboard/Score.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/scoreboard/Scoreboard.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 GeyserMC. http://geysermc.org
+ * Copyright (c) 2019-2020 GeyserMC. http://geysermc.org
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: connector/src/main/java/org/geysermc/connector/utils/Toolbox.java
Patch:
@@ -133,7 +133,7 @@ public static void init() {
                                 continue bedrockLoop;
                             Object bedrockStateValue = bedrockStateTag.getValue();
                             if (bedrockStateValue instanceof Byte)
-                                bedrockStateValue = ((Byte) bedrockStateValue).intValue();
+                                bedrockStateValue = ((Byte) bedrockStateValue) != 0;
                             if (!stateEntry.getValue().equals(bedrockStateValue))
                                 continue bedrockLoop;
                         }

File: connector/src/main/java/org/geysermc/connector/utils/Toolbox.java
Patch:
@@ -133,7 +133,7 @@ public static void init() {
                                 continue bedrockLoop;
                             Object bedrockStateValue = bedrockStateTag.getValue();
                             if (bedrockStateValue instanceof Byte)
-                                bedrockStateValue = ((Byte) bedrockStateValue).intValue();
+                                bedrockStateValue = ((Byte) bedrockStateValue) != 0;
                             if (!stateEntry.getValue().equals(bedrockStateValue))
                                 continue bedrockLoop;
                         }

File: connector/src/main/java/org/geysermc/connector/network/ConnectorServerEventHandler.java
Patch:
@@ -65,7 +65,7 @@ public BedrockPong onQuery(InetSocketAddress inetSocketAddress) {
         pong.setProtocolVersion(GeyserConnector.BEDROCK_1_14_PROTOCOL_VERSION);
         pong.setVersion(GeyserConnector.BEDROCK_PACKET_CODEC.getMinecraftVersion());
         pong.setIpv4Port(config.getBedrock().getPort());
-        if (connector.getConfig().isPingPassthrough()) {
+        if (connector.getConfig().isPingPassthrough() && serverInfo != null) {
             pong.setMotd(MessageUtils.getBedrockMessage(serverInfo.getDescription()));
             pong.setSubMotd(config.getBedrock().getMotd2());
             pong.setPlayerCount(serverInfo.getPlayerInfo().getOnlinePlayers());

File: connector/src/main/java/org/geysermc/connector/network/translators/TranslatorsInit.java
Patch:
@@ -157,6 +157,7 @@ public static void start() {
         Registry.registerBedrock(InteractPacket.class, new BedrockInteractTranslator());
         Registry.registerBedrock(TextPacket.class, new BedrockTextTranslator());
         Registry.registerBedrock(RespawnPacket.class, new BedrockRespawnTranslator());
+        Registry.registerBedrock(ShowCreditsPacket.class, new BedrockShowCreditsTranslator());
 
         itemTranslator = new ItemTranslator();
         blockTranslator = new BlockTranslator();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaSpawnPositionTranslator.java
Patch:
@@ -38,7 +38,7 @@ public void translate(ServerSpawnPositionPacket packet, GeyserSession session) {
         SetSpawnPositionPacket spawnPositionPacket = new SetSpawnPositionPacket();
         spawnPositionPacket.setBlockPosition(Vector3i.from(packet.getPosition().getX(), packet.getPosition().getY(), packet.getPosition().getZ()));
         spawnPositionPacket.setSpawnForced(true);
-        spawnPositionPacket.setSpawnType(SetSpawnPositionPacket.Type.PLAYER_SPAWN);
+        spawnPositionPacket.setSpawnType(SetSpawnPositionPacket.Type.WORLD_SPAWN);
         session.getUpstream().sendPacket(spawnPositionPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaSpawnPositionTranslator.java
Patch:
@@ -38,7 +38,7 @@ public void translate(ServerSpawnPositionPacket packet, GeyserSession session) {
         SetSpawnPositionPacket spawnPositionPacket = new SetSpawnPositionPacket();
         spawnPositionPacket.setBlockPosition(Vector3i.from(packet.getPosition().getX(), packet.getPosition().getY(), packet.getPosition().getZ()));
         spawnPositionPacket.setSpawnForced(true);
-        spawnPositionPacket.setSpawnType(SetSpawnPositionPacket.Type.PLAYER_SPAWN);
+        spawnPositionPacket.setSpawnType(SetSpawnPositionPacket.Type.WORLD_SPAWN);
         session.getUpstream().sendPacket(spawnPositionPacket);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerHealthTranslator.java
Patch:
@@ -40,8 +40,9 @@ public void translate(ServerPlayerHealthPacket packet, GeyserSession session) {
         if (entity == null)
             return;
 
+        int health = (int) Math.ceil(packet.getHealth());
         SetHealthPacket setHealthPacket = new SetHealthPacket();
-        setHealthPacket.setHealth((int) Math.ceil(packet.getHealth()));
+        setHealthPacket.setHealth(health);
         session.getUpstream().sendPacket(setHealthPacket);
 
         float maxHealth = entity.getAttributes().containsKey(AttributeType.MAX_HEALTH) ? entity.getAttributes().get(AttributeType.MAX_HEALTH).getValue() : 20f;
@@ -50,7 +51,7 @@ public void translate(ServerPlayerHealthPacket packet, GeyserSession session) {
             maxHealth += 1;
         }
 
-        entity.getAttributes().put(AttributeType.HEALTH, AttributeType.HEALTH.getAttribute(packet.getHealth(), maxHealth));
+        entity.getAttributes().put(AttributeType.HEALTH, AttributeType.HEALTH.getAttribute(health, maxHealth));
         entity.getAttributes().put(AttributeType.HUNGER, AttributeType.HUNGER.getAttribute(packet.getFood()));
         entity.getAttributes().put(AttributeType.SATURATION, AttributeType.SATURATION.getAttribute(packet.getSaturation()));
         entity.updateBedrockAttributes(session);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaJoinGameTranslator.java
Patch:
@@ -67,7 +67,7 @@ public void translate(ServerJoinGamePacket packet, GeyserSession session) {
         session.getUpstream().sendPacket(chunkRadiusPacket);
 
         if (DimensionUtils.javaToBedrock(packet.getDimension()) != entity.getDimension()) {
-            DimensionUtils.switchDimension(session, packet.getDimension());
+            DimensionUtils.switchDimension(session, packet.getDimension(), false);
         }
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -128,7 +128,7 @@ public void connect(RemoteServer remoteServer) {
         startGame();
         this.remoteServer = remoteServer;
 
-        ChunkUtils.sendEmptyChunks(this, playerEntity.getPosition().toInt(), 5);
+        ChunkUtils.sendEmptyChunks(this, playerEntity.getPosition().toInt(), 0, false);
 
         BiomeDefinitionListPacket biomePacket = new BiomeDefinitionListPacket();
         biomePacket.setTag(CompoundTag.EMPTY);

File: connector/src/main/java/org/geysermc/connector/network/translators/TranslatorsInit.java
Patch:
@@ -156,6 +156,7 @@ public static void start() {
         Registry.registerBedrock(SetLocalPlayerAsInitializedPacket.class, new BedrockPlayerInitializedTranslator());
         Registry.registerBedrock(InteractPacket.class, new BedrockInteractTranslator());
         Registry.registerBedrock(TextPacket.class, new BedrockTextTranslator());
+        Registry.registerBedrock(RespawnPacket.class, new BedrockRespawnTranslator());
 
         itemTranslator = new ItemTranslator();
         blockTranslator = new BlockTranslator();

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockMovePlayerTranslator.java
Patch:
@@ -42,7 +42,7 @@ public class BedrockMovePlayerTranslator extends PacketTranslator<MovePlayerPack
     @Override
     public void translate(MovePlayerPacket packet, GeyserSession session) {
         PlayerEntity entity = session.getPlayerEntity();
-        if (entity == null || !session.isSpawned()) return;
+        if (entity == null || !session.isSpawned() || session.isSwitchingDim()) return;
 
         if (!session.getUpstream().isInitialized()) {
             MoveEntityAbsolutePacket moveEntityBack = new MoveEntityAbsolutePacket();

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -44,7 +44,7 @@ public enum EntityType {
     VILLAGER(AbstractMerchantEntity.class, 15, 1.8f, 0.6f, 0.6f, 1.62f),
     MOOSHROOM(AnimalEntity.class, 16, 1.4f, 0.9f),
     SQUID(WaterEntity.class, 17, 0.8f),
-    RABBIT(AnimalEntity.class, 18, 0.5f, 0.4f),
+    RABBIT(RabbitEntity.class, 18, 0.5f, 0.4f),
     BAT(AmbientEntity.class, 19, 0.9f, 0.5f),
     IRON_GOLEM(GolemEntity.class, 20, 2.7f, 1.4f),
     SNOW_GOLEM(GolemEntity.class, 21, 1.9f, 0.7f),
@@ -90,7 +90,7 @@ public enum EntityType {
     PHANTOM(FlyingEntity.class, 58, 0.5f, 0.9f, 0.9f, 0.6f),
     RAVAGER(RaidParticipantEntity.class, 59, 1.9f, 1.2f),
 
-    ARMOR_STAND(LivingEntity.class, 61, 0f),
+    ARMOR_STAND(ArmorStandEntity.class, 61, 0f),
     TRIPOD_CAMERA(Entity.class, 62, 0f),
     PLAYER(PlayerEntity.class, 63, 1.8f, 0.6f, 0.6f, 1.62f),
     ITEM(ItemEntity.class, 64, 0.25f, 0.25f),

File: connector/src/main/java/org/geysermc/connector/entity/living/AgeableEntity.java
Patch:
@@ -41,11 +41,11 @@ public AgeableEntity(long entityId, long geyserId, EntityType entityType, Vector
 
     @Override
     public void updateBedrockMetadata(EntityMetadata entityMetadata, GeyserSession session) {
-        if (entityMetadata.getId() == 15 && entityType != EntityType.RABBIT) {
+        if (entityMetadata.getId() == 15) {
             boolean isBaby = (boolean) entityMetadata.getValue();
-            metadata.getFlags().setFlag(EntityFlag.BABY, isBaby);
             if (isBaby) {
                 metadata.put(EntityData.SCALE, .55f);
+                metadata.getFlags().setFlag(EntityFlag.BABY, true);
             }
         }
 

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -90,7 +90,7 @@ public enum EntityType {
     PHANTOM(FlyingEntity.class, 58, 0.5f, 0.9f, 0.9f, 0.6f),
     RAVAGER(RaidParticipantEntity.class, 59, 1.9f, 1.2f),
 
-    ARMOR_STAND(LivingEntity.class, 61, 0f),
+    ARMOR_STAND(ArmorStandEntity.class, 61, 0f),
     TRIPOD_CAMERA(Entity.class, 62, 0f),
     PLAYER(PlayerEntity.class, 63, 1.8f, 0.6f, 0.6f, 1.62f),
     ITEM(ItemEntity.class, 64, 0.25f, 0.25f),

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/AnvilInventoryTranslator.java
Patch:
@@ -31,7 +31,7 @@
 
 public class AnvilInventoryTranslator extends BlockInventoryTranslator {
     public AnvilInventoryTranslator() {
-        super(3, 145 << 4, ContainerType.ANVIL);
+        super(3, "minecraft:anvil[facing=north]", ContainerType.ANVIL);
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/BrewingStandInventoryTranslator.java
Patch:
@@ -33,7 +33,7 @@
 
 public class BrewingStandInventoryTranslator extends BlockInventoryTranslator {
     public BrewingStandInventoryTranslator() {
-        super(5, 117 << 4, ContainerType.BREWING_STAND);
+        super(5, "minecraft:brewing_stand[has_bottle_0=false,has_bottle_1=false,has_bottle_2=false]", ContainerType.BREWING_STAND);
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/EnchantmentInventoryTranslator.java
Patch:
@@ -31,7 +31,7 @@
 
 public class EnchantmentInventoryTranslator extends BlockInventoryTranslator {
     public EnchantmentInventoryTranslator() {
-        super(2, 116 << 4, ContainerType.ENCHANTMENT);
+        super(2, "minecraft:enchanting_table", ContainerType.ENCHANTMENT);
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/FurnaceInventoryTranslator.java
Patch:
@@ -33,7 +33,7 @@
 
 public class FurnaceInventoryTranslator extends BlockInventoryTranslator {
     public FurnaceInventoryTranslator() {
-        super(3, 61 << 4, ContainerType.FURNACE);
+        super(3, "minecraft:furnace[facing=north,lit=false]", ContainerType.FURNACE);
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/SingleChestInventoryTranslator.java
Patch:
@@ -34,7 +34,7 @@
 
 public class SingleChestInventoryTranslator extends BlockInventoryTranslator {
     public SingleChestInventoryTranslator(int size) {
-        super(size, 54 << 4, ContainerType.CONTAINER);
+        super(size, "minecraft:chest[facing=north,type=single,waterlogged=false]", ContainerType.CONTAINER);
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/network/UpstreamPacketHandler.java
Patch:
@@ -72,7 +72,7 @@ public boolean handle(ResourcePackClientResponsePacket packet) {
                 ResourcePackStackPacket stack = new ResourcePackStackPacket();
                 stack.setExperimental(false);
                 stack.setForcedToAccept(false);
-                stack.setGameVersion(GeyserConnector.BEDROCK_PACKET_CODEC.getMinecraftVersion());
+                stack.setGameVersion("*");
                 session.getUpstream().sendPacket(stack);
                 break;
             default:

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -322,7 +322,7 @@ private void startGame() {
         startGamePacket.setMultiplayerCorrelationId("");
         startGamePacket.setBlockPalette(Toolbox.BLOCKS);
         startGamePacket.setItemEntries(Toolbox.ITEMS);
-        startGamePacket.setVanillaVersion(GeyserConnector.BEDROCK_PACKET_CODEC.getMinecraftVersion());
+        startGamePacket.setVanillaVersion("*");
         // startGamePacket.setMovementServerAuthoritative(true);
         upstream.sendPacket(startGamePacket);
     }

File: connector/src/main/java/org/geysermc/connector/network/session/cache/ChunkCache.java
Patch:
@@ -79,7 +79,7 @@ public BlockEntry getBlockAt(Position position) {
         Position blockPosition = chunkPosition.getChunkBlock(position.getX(), position.getY(), position.getZ());
         if (chunk != null) {
             BlockState blockState = chunk.get(blockPosition.getX(), blockPosition.getY(), blockPosition.getZ());
-            return TranslatorsInit.getBlockTranslator().getBedrockBlock(blockState);
+            return TranslatorsInit.getBlockTranslator().getBlockEntry(blockState);
         }
 
         return BlockEntry.AIR;

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -27,7 +27,7 @@
 
 import com.nukkitx.protocol.bedrock.BedrockPacketCodec;
 import com.nukkitx.protocol.bedrock.BedrockServer;
-import com.nukkitx.protocol.bedrock.v388.Bedrock_v388;
+import com.nukkitx.protocol.bedrock.v389.Bedrock_v389;
 
 import lombok.Getter;
 import org.fusesource.jansi.AnsiConsole;
@@ -67,8 +67,7 @@
 @Getter
 public class GeyserConnector implements Connector {
 
-    public static final BedrockPacketCodec BEDROCK_PACKET_CODEC = Bedrock_v388.V388_CODEC;
-    public static final int BEDROCK_1_14_PROTOCOL_VERSION = 389;
+    public static final BedrockPacketCodec BEDROCK_PACKET_CODEC = Bedrock_v389.V389_CODEC;
 
     public static final String NAME = "Geyser";
     public static final String VERSION = "1.0-SNAPSHOT";

File: connector/src/main/java/org/geysermc/connector/network/UpstreamPacketHandler.java
Patch:
@@ -45,7 +45,7 @@ private boolean translateAndDefault(BedrockPacket packet) {
 
     @Override
     public boolean handle(LoginPacket loginPacket) {
-        if (loginPacket.getProtocolVersion() != GeyserConnector.BEDROCK_1_14_PROTOCOL_VERSION) {
+        if (loginPacket.getProtocolVersion() != GeyserConnector.BEDROCK_PACKET_CODEC.getProtocolVersion()) {
             session.getUpstream().disconnect("Unsupported Bedrock version. Are you running an outdated version?");
             return true;
         }
@@ -131,4 +131,4 @@ boolean defaultHandler(BedrockPacket packet) {
     public boolean handle(InventoryTransactionPacket packet) {
         return translateAndDefault(packet);
     }
-}
\ No newline at end of file
+}

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -44,7 +44,7 @@ public enum EntityType {
     VILLAGER(AbstractMerchantEntity.class, 15, 1.8f, 0.6f, 0.6f, 1.62f),
     MOOSHROOM(AnimalEntity.class, 16, 1.4f, 0.9f),
     SQUID(WaterEntity.class, 17, 0.8f),
-    RABBIT(AnimalEntity.class, 18, 0.5f, 0.4f),
+    RABBIT(RabbitEntity.class, 18, 0.5f, 0.4f),
     BAT(AmbientEntity.class, 19, 0.9f, 0.5f),
     IRON_GOLEM(GolemEntity.class, 20, 2.7f, 1.4f),
     SNOW_GOLEM(GolemEntity.class, 21, 1.9f, 0.7f),

File: bootstrap/bukkit/src/main/java/org/geysermc/platform/bukkit/GeyserBukkitPlugin.java
Patch:
@@ -26,6 +26,7 @@
 package org.geysermc.platform.bukkit;
 
 import org.bukkit.plugin.java.JavaPlugin;
+import org.geysermc.common.PlatformType;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.common.bootstrap.IGeyserBootstrap;
 
@@ -49,7 +50,7 @@ public void onEnable() {
 
         geyserLogger = new GeyserBukkitLogger(getLogger(), geyserConfig.isDebugMode());
 
-        GeyserConnector.start(this);
+        GeyserConnector.start(PlatformType.BUKKIT, this);
     }
 
     @Override

File: bootstrap/bungeecord/src/main/java/org/geysermc/platform/bungeecord/GeyserBungeePlugin.java
Patch:
@@ -30,6 +30,7 @@
 import net.md_5.bungee.config.ConfigurationProvider;
 import net.md_5.bungee.config.YamlConfiguration;
 
+import org.geysermc.common.PlatformType;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.common.bootstrap.IGeyserBootstrap;
 
@@ -86,7 +87,7 @@ public void onEnable() {
 
         geyserLogger = new GeyserBungeeLogger(getLogger(), geyserConfig.isDebugMode());
 
-        GeyserConnector.start(this);
+        GeyserConnector.start(PlatformType.BUNGEECORD, this);
     }
 
     @Override

File: bootstrap/standalone/src/main/java/org/geysermc/platform/standalone/GeyserBootstrap.java
Patch:
@@ -26,6 +26,7 @@
 package org.geysermc.platform.standalone;
 
 import org.fusesource.jansi.AnsiConsole;
+import org.geysermc.common.PlatformType;
 import org.geysermc.common.bootstrap.IGeyserBootstrap;
 import org.geysermc.connector.GeyserConnector;
 import org.geysermc.connector.utils.FileUtils;
@@ -62,7 +63,7 @@ public void onEnable() {
             System.exit(0);
         }
 
-        GeyserConnector connector = GeyserConnector.start(this);
+        GeyserConnector connector = GeyserConnector.start(PlatformType.STANDALONE, this);
 
         ConsoleCommandReader consoleReader = new ConsoleCommandReader(connector);
         consoleReader.startConsole();

File: connector/src/main/java/org/geysermc/connector/network/UpstreamPacketHandler.java
Patch:
@@ -72,7 +72,7 @@ public boolean handle(ResourcePackClientResponsePacket packet) {
                 ResourcePackStackPacket stack = new ResourcePackStackPacket();
                 stack.setExperimental(false);
                 stack.setForcedToAccept(false);
-                stack.setGameVersion(GeyserConnector.BEDROCK_PACKET_CODEC.getMinecraftVersion());
+                stack.setGameVersion("*");
                 session.getUpstream().sendPacket(stack);
                 break;
             default:

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -322,7 +322,7 @@ private void startGame() {
         startGamePacket.setMultiplayerCorrelationId("");
         startGamePacket.setBlockPalette(Toolbox.BLOCKS);
         startGamePacket.setItemEntries(Toolbox.ITEMS);
-        startGamePacket.setVanillaVersion(GeyserConnector.BEDROCK_PACKET_CODEC.getMinecraftVersion());
+        startGamePacket.setVanillaVersion("*");
         // startGamePacket.setMovementServerAuthoritative(true);
         upstream.sendPacket(startGamePacket);
     }

File: connector/src/main/java/org/geysermc/connector/network/session/cache/ChunkCache.java
Patch:
@@ -79,7 +79,7 @@ public BlockEntry getBlockAt(Position position) {
         Position blockPosition = chunkPosition.getChunkBlock(position.getX(), position.getY(), position.getZ());
         if (chunk != null) {
             BlockState blockState = chunk.get(blockPosition.getX(), blockPosition.getY(), blockPosition.getZ());
-            return TranslatorsInit.getBlockTranslator().getBedrockBlock(blockState);
+            return TranslatorsInit.getBlockTranslator().getBlockEntry(blockState);
         }
 
         return BlockEntry.AIR;

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -140,7 +140,8 @@ public enum EntityType {
     TROPICAL_FISH(AbstractFishEntity.class, 111, 0.6f, 0.6f),
     COD(AbstractFishEntity.class, 112, 0.25f, 0.5f),
     PANDA(AnimalEntity.class, 113, 1.25f, 1.125f, 1.825f),
-    FOX(AnimalEntity.class, 121, 0.5f, 1.25f);
+    FOX(AnimalEntity.class, 121, 0.5f, 1.25f),
+    BEE(InsentientEntity.class, 122, 0.6f, 0.6f);
 
     private Class<? extends Entity> entityClass;
     private final int type;

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockMovePlayerTranslator.java
Patch:
@@ -64,7 +64,7 @@ public void translate(MovePlayerPacket packet, GeyserSession session) {
         double javaY = packet.getPosition().getY() - EntityType.PLAYER.getOffset();
 
         ClientPlayerPositionRotationPacket playerPositionRotationPacket = new ClientPlayerPositionRotationPacket(
-                packet.isOnGround(), packet.getPosition().getX(), Math.ceil(javaY * 2) / 2,
+                packet.isOnGround(), packet.getPosition().getX(), javaY,
                 packet.getPosition().getZ(), packet.getRotation().getY(), packet.getRotation().getX()
         );
 

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -28,6 +28,7 @@
 import lombok.Getter;
 import org.geysermc.connector.entity.*;
 import org.geysermc.connector.entity.living.*;
+import org.geysermc.connector.entity.living.horse.HorseEntity;
 import org.geysermc.connector.entity.living.monster.GuardianEntity;
 import org.geysermc.connector.entity.living.monster.ZombieEntity;
 
@@ -47,7 +48,7 @@ public enum EntityType {
     IRON_GOLEM(GolemEntity.class, 20, 2.7f, 1.4f),
     SNOW_GOLEM(GolemEntity.class, 21, 1.9f, 0.7f),
     OCELOT(TameableEntity.class, 22, 0.35f, 0.3f),
-    HORSE(AbstractHorseEntity.class, 23, 1.6f, 1.3965f),
+    HORSE(HorseEntity.class, 23, 1.6f, 1.3965f),
     DONKEY(ChestedHorseEntity.class, 24, 1.6f, 1.3965f),
     MULE(ChestedHorseEntity.class, 25, 1.6f, 1.3965f),
     SKELETON_HORSE(AbstractHorseEntity.class, 26, 1.6f, 1.3965f),

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemTranslator.java
Patch:
@@ -196,7 +196,7 @@ private Tag translateToJavaNBT(com.nukkitx.nbt.tag.Tag tag) {
                         CompoundTag javaTag = new CompoundTag("");
                         Map<String, Tag> javaValue = javaTag.getValue();
                         javaValue.put("id", new StringTag("id", enchantment.getJavaIdentifier()));
-                        javaValue.put("lvl", new IntTag("lvl", tagValue.getAsShort("lvl")));
+                        javaValue.put("lvl", new IntTag("lvl", tagValue.getAsShort("lvl", (short) 1)));
                         javaTag.setValue(javaValue);
                         tags.add(javaTag);
                     } else {

File: connector/src/main/java/org/geysermc/connector/utils/Toolbox.java
Patch:
@@ -16,7 +16,6 @@
 import org.geysermc.connector.network.translators.item.ItemEntry;
 import org.geysermc.connector.world.GlobalBlockPalette;
 
-import javax.xml.bind.DatatypeConverter;
 import java.io.*;
 import java.util.*;
 
@@ -129,7 +128,7 @@ public static void init() {
                 damage = (short)(int) map.get("damage");
             }
             if (map.containsKey("nbt_b64")) {
-                byte[] bytes = DatatypeConverter.parseBase64Binary((String) map.get("nbt_b64"));
+                byte[] bytes = Base64.getDecoder().decode((String) map.get("nbt_b64"));
                 ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
                 try {
                     com.nukkitx.nbt.tag.CompoundTag tag = (com.nukkitx.nbt.tag.CompoundTag) NbtUtils.createReaderLE(bais).readTag();

File: bootstrap/bungeecord/src/main/java/org/geysermc/platform/bungeecord/GeyserBungeePlugin.java
Patch:
@@ -38,6 +38,7 @@
 import java.io.InputStream;
 import java.nio.file.Files;
 import java.util.UUID;
+import java.util.logging.Level;
 
 public class GeyserBungeePlugin extends Plugin implements IGeyserBootstrap {
 
@@ -57,7 +58,7 @@ public void onEnable() {
                 Files.copy(in, file.toPath());
                 configuration = ConfigurationProvider.getProvider(YamlConfiguration.class).load(new File(getDataFolder(), "config.yml"));
             } catch (IOException ex) {
-                getLogger().severe("Failed to read/create config.yml! Make sure it's up to date and/or readable+writable!", ex);
+                getLogger().log(Level.SEVERE, "Failed to read/create config.yml! Make sure it's up to date and/or readable+writable!", ex);
                 return;
             }
         }
@@ -74,7 +75,7 @@ public void onEnable() {
             try {
                 ConfigurationProvider.getProvider(YamlConfiguration.class).save(configuration, new File(getDataFolder(), "config.yml"));
             } catch (IOException ex) {
-                getLogger().severe("Failed to read/create config.yml! Make sure it's up to date and/or readable+writable!", ex);
+                getLogger().log(Level.SEVERE, "Failed to read/create config.yml! Make sure it's up to date and/or readable+writable!", ex);
                 return;
             }
         }

File: bootstrap/bungeecord/src/main/java/org/geysermc/platform/bungeecord/GeyserBungeePlugin.java
Patch:
@@ -57,13 +57,13 @@ public void onEnable() {
                 Files.copy(in, file.toPath());
                 configuration = ConfigurationProvider.getProvider(YamlConfiguration.class).load(new File(getDataFolder(), "config.yml"));
             } catch (IOException ex) {
-                geyserLogger.severe("Failed to read/create config.yml! Make sure it's up to date and/or readable+writable!", ex);
+                getLogger().severe("Failed to read/create config.yml! Make sure it's up to date and/or readable+writable!", ex);
                 return;
             }
         }
 
         if (configuration == null) {
-            geyserLogger.severe("Failed to read/create config.yml! Make sure it's up to date and/or readable+writable!");
+            getLogger().severe("Failed to read/create config.yml! Make sure it's up to date and/or readable+writable!");
             return;
         }
 
@@ -74,7 +74,7 @@ public void onEnable() {
             try {
                 ConfigurationProvider.getProvider(YamlConfiguration.class).save(configuration, new File(getDataFolder(), "config.yml"));
             } catch (IOException ex) {
-                geyserLogger.severe("Failed to read/create config.yml! Make sure it's up to date and/or readable+writable!", ex);
+                getLogger().severe("Failed to read/create config.yml! Make sure it's up to date and/or readable+writable!", ex);
                 return;
             }
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/BlockInventoryTranslator.java
Patch:
@@ -38,8 +38,8 @@
 import org.geysermc.connector.world.GlobalBlockPalette;
 
 public class BlockInventoryTranslator extends ContainerInventoryTranslator {
-    protected final int blockId;
-    protected final ContainerType containerType;
+    final int blockId;
+    private final ContainerType containerType;
 
     public BlockInventoryTranslator(int size, int blockId, ContainerType containerType) {
         super(size);

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/ContainerInventoryTranslator.java
Patch:
@@ -35,7 +35,7 @@
 import org.geysermc.connector.network.translators.TranslatorsInit;
 
 public abstract class ContainerInventoryTranslator extends InventoryTranslator {
-    public ContainerInventoryTranslator(int size) {
+    ContainerInventoryTranslator(int size) {
         super(size);
     }
 
@@ -97,7 +97,7 @@ public int javaSlotToBedrock(int slot) {
     }
 
     @Override
-    public boolean isOutputSlot(int slot) {
-        return false;
+    public SlotType getSlotType(int javaSlot) {
+        return SlotType.NORMAL;
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/InventoryTranslator.java
Patch:
@@ -44,5 +44,5 @@ public abstract class InventoryTranslator {
     public abstract void updateSlot(GeyserSession session, Inventory inventory, int slot);
     public abstract int bedrockSlotToJava(InventoryAction action);
     public abstract int javaSlotToBedrock(int slot);
-    public abstract boolean isOutputSlot(int slot);
+    public abstract SlotType getSlotType(int javaSlot);
 }

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -155,7 +155,7 @@ private GeyserConnector() {
         }).join();
 
         if (config.getMetrics().isEnabled()) {
-            metrics = new Metrics("GeyserMC", config.getMetrics().getUUID(), true, java.util.logging.Logger.getLogger(""));
+            metrics = new Metrics("GeyserMC", config.getMetrics().getUUID(), false, java.util.logging.Logger.getLogger(""));
             metrics.addCustomChart(new Metrics.SingleLineChart("servers", () -> 1));
             metrics.addCustomChart(new Metrics.SingleLineChart("players", Geyser::getPlayerCount));
             metrics.addCustomChart(new Metrics.SimplePie("authMode", config.getRemote()::getAuthType));

File: connector/src/main/java/org/geysermc/connector/network/translators/TranslatorsInit.java
Patch:
@@ -126,7 +126,9 @@ public static void start() {
         Registry.registerJava(ServerPlayerSetExperiencePacket.class, new JavaPlayerSetExperienceTranslator());
         Registry.registerJava(ServerPlayerHealthPacket.class, new JavaPlayerHealthTranslator());
         Registry.registerJava(ServerPlayerActionAckPacket.class, new JavaPlayerActionAckTranslator());
-        Registry.registerJava(ServerPlayerAbilitiesPacket.class, new JavaPlayerAbilitiesTranslator());
+
+        // FIXME: This translator messes with allowing flight in creative mode. Will need to be addressed later
+        // Registry.registerJava(ServerPlayerAbilitiesPacket.class, new JavaPlayerAbilitiesTranslator());
 
         Registry.registerJava(ServerNotifyClientPacket.class, new JavaNotifyClientTranslator());
         Registry.registerJava(ServerChunkDataPacket.class, new JavaChunkDataTranslator());

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -110,7 +110,7 @@ private GeyserConnector() {
 
         logger.info("******************************************");
         logger.info("");
-        logger.info("Loading " + NAME + " vesion " + VERSION);
+        logger.info("Loading " + NAME + " version " + VERSION);
         logger.info("");
         logger.info("******************************************");
 

File: connector/src/main/java/org/geysermc/connector/inventory/PlayerInventory.java
Patch:
@@ -44,7 +44,7 @@ public PlayerInventory() {
     }
 
     public void setCursor(ItemStack stack) {
-        if (stack != null && stack.getId() == 0)
+        if (stack != null && (stack.getId() == 0 || stack.getAmount() < 1))
             stack = null;
         cursor = stack;
     }

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -105,11 +105,9 @@ public class GeyserSession implements Player {
     @Setter
     private GameMode gameMode = GameMode.SURVIVAL;
 
-    @Getter
     @Setter
-    private int lastClickedSlot;
+    private int craftSlot = 0;
 
-    @Getter
     @Setter
     private int reopeningWindow = -1;
 

File: connector/src/main/java/org/geysermc/connector/network/translators/TranslatorsInit.java
Patch:
@@ -99,6 +99,7 @@ public static void start() {
         Registry.registerJava(ServerRespawnPacket.class, new JavaRespawnTranslator());
         Registry.registerJava(ServerSpawnPositionPacket.class, new JavaSpawnPositionTranslator());
         Registry.registerJava(ServerDifficultyPacket.class, new JavaDifficultyTranslator());
+        Registry.registerJava(ServerDeclareRecipesPacket.class, new JavaDeclareRecipesTranslator());
 
         Registry.registerJava(ServerEntityAnimationPacket.class, new JavaEntityAnimationTranslator());
         Registry.registerJava(ServerEntityPositionPacket.class, new JavaEntityPositionTranslator());
@@ -181,7 +182,7 @@ private static void registerInventoryTranslators() {
 
         inventoryTranslators.put(WindowType.GENERIC_3X3, new BlockInventoryTranslator(9, 23 << 4, ContainerType.DISPENSER));
         inventoryTranslators.put(WindowType.HOPPER, new BlockInventoryTranslator(5, 154 << 4, ContainerType.HOPPER));
-        inventoryTranslators.put(WindowType.SHULKER_BOX, new BlockInventoryTranslator(36, 205 << 4, ContainerType.CONTAINER));
+        inventoryTranslators.put(WindowType.SHULKER_BOX, new BlockInventoryTranslator(27, 205 << 4, ContainerType.CONTAINER));
         //inventoryTranslators.put(WindowType.BEACON, new BlockInventoryTranslator(1, 138 << 4, ContainerType.BEACON)); //TODO
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/AnvilInventoryTranslator.java
Patch:
@@ -54,7 +54,7 @@ public int bedrockSlotToJava(InventoryAction action) {
     }
 
     @Override
-    public boolean isOutputSlot(InventoryAction action) {
-        return action.getSource().getContainerId() == ContainerId.ANVIL_RESULT;
+    public boolean isOutputSlot(int slot) {
+        return slot == 2;
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/DoubleChestInventoryTranslator.java
Patch:
@@ -118,7 +118,7 @@ public void updateInventory(GeyserSession session, Inventory inventory) {
         ItemData[] bedrockItems = new ItemData[54];
         for (int i = 0; i < bedrockItems.length; i++) {
             if (i <= this.size) {
-                bedrockItems[i] = TranslatorsInit.getItemTranslator().translateToBedrock(inventory.getItems()[i]);
+                bedrockItems[i] = TranslatorsInit.getItemTranslator().translateToBedrock(inventory.getItem(i));
             } else {
                 bedrockItems[i] = ItemData.AIR;
             }
@@ -130,7 +130,7 @@ public void updateInventory(GeyserSession session, Inventory inventory) {
 
         Inventory playerInventory = session.getInventory();
         for (int i = 0; i < 36; i++) {
-            playerInventory.getItems()[i + 9] = inventory.getItems()[i + this.size];
+            playerInventory.setItem(i + 9, inventory.getItem(i + this.size));
         }
         TranslatorsInit.getInventoryTranslators().get(playerInventory.getWindowType()).updateInventory(session, playerInventory);
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/FurnaceInventoryTranslator.java
Patch:
@@ -59,7 +59,7 @@ public void updateProperty(GeyserSession session, Inventory inventory, int key,
     }
 
     @Override
-    public boolean isOutputSlot(InventoryAction action) {
-        return action.getSlot() == 2;
+    public boolean isOutputSlot(int slot) {
+        return slot == 2;
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/InventoryTranslator.java
Patch:
@@ -44,5 +44,5 @@ public abstract class InventoryTranslator {
     public abstract void updateSlot(GeyserSession session, Inventory inventory, int slot);
     public abstract int bedrockSlotToJava(InventoryAction action);
     public abstract int javaSlotToBedrock(int slot);
-    public abstract boolean isOutputSlot(InventoryAction action);
+    public abstract boolean isOutputSlot(int slot);
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/inventory/SingleChestInventoryTranslator.java
Patch:
@@ -43,7 +43,7 @@ public void updateInventory(GeyserSession session, Inventory inventory) {
         ItemData[] bedrockItems = new ItemData[27];
         for (int i = 0; i < bedrockItems.length; i++) {
             if (i <= this.size) {
-                bedrockItems[i] = TranslatorsInit.getItemTranslator().translateToBedrock(inventory.getItems()[i]);
+                bedrockItems[i] = TranslatorsInit.getItemTranslator().translateToBedrock(inventory.getItem(i));
             } else {
                 bedrockItems[i] = ItemData.AIR;
             }
@@ -55,7 +55,7 @@ public void updateInventory(GeyserSession session, Inventory inventory) {
 
         Inventory playerInventory = session.getInventory();
         for (int i = 0; i < 36; i++) {
-            playerInventory.getItems()[i + 9] = inventory.getItems()[i + this.size];
+            playerInventory.setItem(i + 9, inventory.getItem(i + this.size));
         }
         TranslatorsInit.getInventoryTranslators().get(playerInventory.getWindowType()).updateInventory(session, playerInventory);
     }

File: connector/src/main/java/org/geysermc/connector/utils/SkinUtils.java
Patch:
@@ -100,7 +100,7 @@ public static GameProfileData from(GameProfile profile) {
                     Geyser.getLogger().debug("Got invalid texture data for " + profile.getName() + " " + exception.getMessage());
                 }
                 // return default skin with default cape when texture data is invalid
-                return new GameProfileData("", "", false);
+                return new GameProfileData(SkinProvider.EMPTY_SKIN.getTextureUrl(), SkinProvider.EMPTY_CAPE.getTextureUrl(), false);
             }
         }
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerAbilitiesTranslator.java
Patch:
@@ -57,6 +57,7 @@ public void translate(ServerPlayerAbilitiesPacket packet, GeyserSession session)
         playerFlags = setPlayerFlag(0x200, packet.isFlying(), playerFlags); // is flying
 
         AdventureSettingsPacket adventureSettingsPacket = new AdventureSettingsPacket();
+        adventureSettingsPacket.setPlayerPermission(1);
         adventureSettingsPacket.setUniqueEntityId(entity.getGeyserId());
         adventureSettingsPacket.setPlayerFlags(playerFlags);
         session.getUpstream().sendPacket(adventureSettingsPacket);

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -93,7 +93,7 @@ public enum EntityType {
     EXPERIENCE_BOTTLE(68, 0.25f, 0.25f),
     EXPERIENCE_ORB(69, 0f),
     EYE_OF_ENDER(70, 0f),
-    ENDER_CRYSTAL(71, 0f),
+    END_CRYSTAL(71, 0f),
     FIREWORK_ROCKET(72, 0f),
     TRIDENT(73, 0f),
     TURTLE(74, 0.4f, 1.2f),

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockPlayerInitializedTranslator.java
Patch:
@@ -15,7 +15,6 @@ public void translate(SetLocalPlayerAsInitializedPacket packet, GeyserSession se
 
                 for (PlayerEntity entity : session.getEntityCache().getEntitiesByType(PlayerEntity.class)) {
                     if (!entity.isValid()) {
-                        entity.sendPlayer(session);
                         // async skin loading
                         SkinUtils.requestAndHandleSkinAndCape(entity, session, skinAndCape -> entity.sendPlayer(session));
                     }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/spawn/JavaSpawnPlayerTranslator.java
Patch:
@@ -51,8 +51,9 @@ public void translate(ServerSpawnPlayerPacket packet, GeyserSession session) {
         entity.setPosition(position);
         entity.setRotation(rotation);
 
-        entity.sendPlayer(session);
         // async skin loading
-        SkinUtils.requestAndHandleSkinAndCape(entity, session, skinAndCape -> entity.sendPlayer(session));
+        if (session.getUpstream().isInitialized()) {
+            SkinUtils.requestAndHandleSkinAndCape(entity, session, skinAndCape -> entity.sendPlayer(session));
+        }
     }
 }

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -87,7 +87,7 @@ public enum EntityType {
     TRIPOD_CAMERA(62, 0f),
     PLAYER(63, 1.8f, 0.6f, 0.6f, 1.62f),
     ITEM(64, 0.25f, 0.25f),
-    PRIMED_TNT(65, 0.98f, 0.98f),
+    TNT(65, 0.98f, 0.98f),
     FALLING_BLOCK(66, 0.98f, 0.98f),
     MOVING_BLOCK(67, 0f),
     EXPERIENCE_BOTTLE(68, 0.25f, 0.25f),
@@ -108,7 +108,7 @@ public enum EntityType {
     EGG(82, 0f),
     PAINTING(83, 0f),
     MINECART(84, 0f),
-    LARGE_FIREBALL(85, 0f),
+    FIREBALL(85, 0f),
     SPLASH_POTION(86, 0f),
     ENDER_PEARL(87, 0f),
     LEASH_KNOT(88, 0f),

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockPlayerInitializedTranslator.java
Patch:
@@ -15,7 +15,6 @@ public void translate(SetLocalPlayerAsInitializedPacket packet, GeyserSession se
 
                 for (PlayerEntity entity : session.getEntityCache().getEntitiesByType(PlayerEntity.class)) {
                     if (!entity.isValid()) {
-                        entity.sendPlayer(session);
                         // async skin loading
                         SkinUtils.requestAndHandleSkinAndCape(entity, session, skinAndCape -> entity.sendPlayer(session));
                     }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/spawn/JavaSpawnPlayerTranslator.java
Patch:
@@ -51,8 +51,9 @@ public void translate(ServerSpawnPlayerPacket packet, GeyserSession session) {
         entity.setPosition(position);
         entity.setRotation(rotation);
 
-        entity.sendPlayer(session);
         // async skin loading
-        SkinUtils.requestAndHandleSkinAndCape(entity, session, skinAndCape -> entity.sendPlayer(session));
+        if (session.getUpstream().isInitialized()) {
+            SkinUtils.requestAndHandleSkinAndCape(entity, session, skinAndCape -> entity.sendPlayer(session));
+        }
     }
 }

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -135,7 +135,8 @@ public enum EntityType {
     DROWNED(110, 1.95f, 0.6f),
     TROPICAL_FISH(111, 0.6f, 0.6f),
     COD(112, 0.25f, 0.5f),
-    PANDA(113, 1.25f, 1.125f, 1.825f);
+    PANDA(113, 1.25f, 1.125f, 1.825f),
+    FOX(121, 0.5f, 1.25f);
 
     private final int type;
     private final float height;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityMetadataTranslator.java
Patch:
@@ -53,11 +53,11 @@ public void translate(ServerEntityMetadataPacket packet, GeyserSession session)
             for (EntityMetadata metadata : packet.getMetadata()) {
                 if (metadata.getId() == 0 && metadata.getType() == MetadataType.BYTE) {
                     byte xd = (byte)metadata.getValue();
-		    entity.getMetadata().getFlags().setFlag(EntityFlag.SPRINTING, (xd & 0x08) == 0x08);
+                    entity.getMetadata().getFlags().setFlag(EntityFlag.SPRINTING, (xd & 0x08) == 0x08);
                     entity.getMetadata().getFlags().setFlag(EntityFlag.SNEAKING, (xd & 0x02) == 0x02);
                     entity.getMetadata().getFlags().setFlag(EntityFlag.SWIMMING, (xd & 0x10) == 0x10);
-	            entity.getMetadata().getFlags().setFlag(EntityFlag.GLIDING, (xd & 0x80) == 0x80);
-		    entity.getMetadata().getFlags().setFlag(EntityFlag.INVISIBLE, (xd & 0x20) == 0x20);
+                    entity.getMetadata().getFlags().setFlag(EntityFlag.GLIDING, (xd & 0x80) == 0x80);
+                    entity.getMetadata().getFlags().setFlag(EntityFlag.INVISIBLE, (xd & 0x20) == 0x20);
                 } else if (entity.getEntityType() == EntityType.ITEM && metadata.getId() == 7) {
                     AddItemEntityPacket itemPacket = new AddItemEntityPacket();
                     itemPacket.setRuntimeEntityId(entity.getGeyserId());

File: connector/src/main/java/org/geysermc/connector/network/session/UpstreamSession.java
Patch:
@@ -18,7 +18,7 @@ public class UpstreamSession {
     public void sendPacket(@NonNull BedrockPacket packet) {
         if (isClosed())
             return;
-        
+
         session.sendPacket(packet);
     }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaJoinGameTranslator.java
Patch:
@@ -49,7 +49,7 @@ public void translate(ServerJoinGamePacket packet, GeyserSession session) {
 
         PlayStatusPacket playStatus = new PlayStatusPacket();
         playStatus.setStatus(PlayStatusPacket.Status.LOGIN_SUCCESS);
-        session.getUpstream().sendPacket(playStatus);
+        // session.getUpstream().sendPacket(playStatus);
 
         PlayerEntity entity = session.getPlayerEntity();
         entity.setEntityId(packet.getEntityId());

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaRespawnTranslator.java
Patch:
@@ -57,9 +57,11 @@ public void translate(ServerRespawnPacket packet, GeyserSession session) {
         session.getUpstream().sendPacket(playerGameTypePacket);
         session.setGameMode(packet.getGamemode());
 
+        /*
         PlayStatusPacket playStatusPacket = new PlayStatusPacket();
         playStatusPacket.setStatus(PlayStatusPacket.Status.PLAYER_SPAWN);
         session.getUpstream().sendPacket(playStatusPacket);
+        */
     }
 
     private int getDimension(int javaDimension) {

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerHealthTranslator.java
Patch:
@@ -63,8 +63,8 @@ public void translate(ServerPlayerHealthPacket packet, GeyserSession session) {
             RespawnPacket respawnPacket = new RespawnPacket();
             respawnPacket.setRuntimeEntityId(entity.getGeyserId());
             respawnPacket.setPosition(Vector3f.from(0, 72, 0));
-            respawnPacket.setSpawnState(2); // client ready to respawn
-            session.getUpstream().sendPacket(new RespawnPacket());
+            respawnPacket.setSpawnState(0); // state searching for spawn
+            session.getUpstream().sendPacket(respawnPacket);
 
             ClientRequestPacket javaRespawnPacket = new ClientRequestPacket(ClientRequest.RESPAWN);
             session.getDownstream().getSession().send(javaRespawnPacket);

File: connector/src/main/java/org/geysermc/connector/utils/SkinUtils.java
Patch:
@@ -48,7 +48,7 @@ public static PlayerListPacket.Entry buildDefaultEntry(GameProfile profile, long
     public static PlayerListPacket.Entry buildEntryManually(UUID uuid, String username, long geyserId,
                                                             String skinId, byte[] skinData, byte[] capeData,
                                                             String geometryName, String geometryData) {
-        SerializedSkin serializedSkin = SerializedSkin.of(skinId, ImageData.of(32, 64, skinData), ImageData.of(32, 64, capeData), geometryName, geometryData, true);
+        SerializedSkin serializedSkin = SerializedSkin.of(skinId, ImageData.of(64, 64, skinData), ImageData.of(64, 32, capeData), geometryName, geometryData, true);
 
         PlayerListPacket.Entry entry = new PlayerListPacket.Entry(uuid);
         entry.setName(username);

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -50,7 +50,6 @@
 import org.geysermc.connector.plugin.GeyserPluginManager;
 import org.geysermc.connector.thread.PingPassthroughThread;
 import org.geysermc.connector.utils.FileUtils;
-import org.geysermc.connector.utils.Toolbox;
 
 import java.io.File;
 import java.io.IOException;
@@ -117,7 +116,6 @@ private GeyserConnector() {
 
         try {
             File configFile = FileUtils.fileOrCopiedFromResource("config.yml", (x) -> x.replaceAll("generateduuid", UUID.randomUUID().toString()));
-
             config = FileUtils.loadConfig(configFile, GeyserConfiguration.class);
         } catch (IOException ex) {
             logger.severe("Failed to read/create config.yml! Make sure it's up to date and/or readable+writable!", ex);

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -29,7 +29,6 @@
 import com.github.steveice10.mc.auth.exception.request.RequestException;
 import com.github.steveice10.mc.protocol.MinecraftProtocol;
 import com.github.steveice10.mc.protocol.data.game.entity.player.GameMode;
-import com.github.steveice10.mc.protocol.data.game.world.block.BlockFace;
 import com.github.steveice10.packetlib.Client;
 import com.github.steveice10.packetlib.event.session.ConnectedEvent;
 import com.github.steveice10.packetlib.event.session.DisconnectedEvent;
@@ -296,7 +295,7 @@ private void startGame() {
         startGamePacket.setCurrentTick(0);
         startGamePacket.setEnchantmentSeed(0);
         startGamePacket.setMultiplayerCorrelationId("");
-        startGamePacket.setBlockPalette(Toolbox.CACHED_PALLETE);
+        startGamePacket.setBlockPalette(Toolbox.BLOCKS);
         startGamePacket.setItemEntries(Toolbox.ITEMS);
         startGamePacket.setMovementServerAuthoritative(true);
         upstream.sendPacket(startGamePacket);

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -296,8 +296,9 @@ private void startGame() {
         startGamePacket.setCurrentTick(0);
         startGamePacket.setEnchantmentSeed(0);
         startGamePacket.setMultiplayerCorrelationId("");
-        startGamePacket.setCachedPalette(Toolbox.CACHED_PALLETE.retainedDuplicate());
+        startGamePacket.setBlockPalette(Toolbox.CACHED_PALLETE);
         startGamePacket.setItemEntries(Toolbox.ITEMS);
+        startGamePacket.setMovementServerAuthoritative(true);
         upstream.sendPacket(startGamePacket);
 
         PlayStatusPacket playStatusPacket = new PlayStatusPacket();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerHealthTranslator.java
Patch:
@@ -61,7 +61,9 @@ public void translate(ServerPlayerHealthPacket packet, GeyserSession session) {
 
         if (packet.getHealth() <= 0) {
             RespawnPacket respawnPacket = new RespawnPacket();
+            respawnPacket.setRuntimeEntityId(entity.getGeyserId());
             respawnPacket.setPosition(Vector3f.from(0, 72, 0));
+            respawnPacket.setSpawnState(2); // client ready to respawn
             session.getUpstream().sendPacket(new RespawnPacket());
 
             ClientRequestPacket javaRespawnPacket = new ClientRequestPacket(ClientRequest.RESPAWN);

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -28,6 +28,7 @@
 import com.github.steveice10.mc.auth.data.GameProfile;
 import com.github.steveice10.mc.auth.exception.request.RequestException;
 import com.github.steveice10.mc.protocol.MinecraftProtocol;
+import com.github.steveice10.mc.protocol.data.game.entity.player.GameMode;
 import com.github.steveice10.mc.protocol.data.game.world.block.BlockFace;
 import com.github.steveice10.packetlib.Client;
 import com.github.steveice10.packetlib.event.session.ConnectedEvent;
@@ -95,9 +96,7 @@ public class GeyserSession implements Player {
     private boolean closed;
 
     @Setter
-    private Vector3i blockDiggingPos = Vector3i.ZERO;
-    @Setter
-    private BlockFace blockDiggingFace = BlockFace.DOWN;
+    private GameMode gameMode = GameMode.SURVIVAL;
 
     public GeyserSession(GeyserConnector connector, BedrockServerSession bedrockServerSession) {
         this.connector = connector;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaJoinGameTranslator.java
Patch:
@@ -52,6 +52,7 @@ public void translate(ServerJoinGamePacket packet, GeyserSession session) {
         SetPlayerGameTypePacket playerGameTypePacket = new SetPlayerGameTypePacket();
         playerGameTypePacket.setGamemode(packet.getGameMode().ordinal());
         session.getUpstream().sendPacket(playerGameTypePacket);
+        session.setGameMode(packet.getGameMode());
 
         SetEntityDataPacket entityDataPacket = new SetEntityDataPacket();
         entityDataPacket.setRuntimeEntityId(entity.getGeyserId());

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaRespawnTranslator.java
Patch:
@@ -55,6 +55,7 @@ public void translate(ServerRespawnPacket packet, GeyserSession session) {
         SetPlayerGameTypePacket playerGameTypePacket = new SetPlayerGameTypePacket();
         playerGameTypePacket.setGamemode(packet.getGamemode().ordinal());
         session.getUpstream().sendPacket(playerGameTypePacket);
+        session.setGameMode(packet.getGamemode());
 
         PlayStatusPacket playStatusPacket = new PlayStatusPacket();
         playStatusPacket.setStatus(PlayStatusPacket.Status.PLAYER_SPAWN);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaNotifyClientTranslator.java
Patch:
@@ -57,10 +57,11 @@ public void translate(ServerNotifyClientPacket packet, GeyserSession session) {
                 session.getUpstream().sendPacket(stopRainPacket);
                 break;
             case CHANGE_GAMEMODE:
-                int gamemode = ((GameMode) packet.getValue()).ordinal();
+                GameMode gameMode = (GameMode) packet.getValue();
                 SetPlayerGameTypePacket playerGameTypePacket = new SetPlayerGameTypePacket();
-                playerGameTypePacket.setGamemode(gamemode);
+                playerGameTypePacket.setGamemode(gameMode.ordinal());
                 session.getUpstream().sendPacket(playerGameTypePacket);
+                session.setGameMode(gameMode);
                 break;
             case ENTER_CREDITS:
                 Entity entity = session.getPlayerEntity();

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -28,6 +28,7 @@
 import com.github.steveice10.mc.auth.data.GameProfile;
 import com.github.steveice10.mc.auth.exception.request.RequestException;
 import com.github.steveice10.mc.protocol.MinecraftProtocol;
+import com.github.steveice10.mc.protocol.data.game.entity.player.GameMode;
 import com.github.steveice10.mc.protocol.data.game.world.block.BlockFace;
 import com.github.steveice10.packetlib.Client;
 import com.github.steveice10.packetlib.event.session.ConnectedEvent;
@@ -95,9 +96,7 @@ public class GeyserSession implements Player {
     private boolean closed;
 
     @Setter
-    private Vector3i blockDiggingPos = Vector3i.ZERO;
-    @Setter
-    private BlockFace blockDiggingFace = BlockFace.DOWN;
+    private GameMode gameMode = GameMode.SURVIVAL;
 
     public GeyserSession(GeyserConnector connector, BedrockServerSession bedrockServerSession) {
         this.connector = connector;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaJoinGameTranslator.java
Patch:
@@ -52,6 +52,7 @@ public void translate(ServerJoinGamePacket packet, GeyserSession session) {
         SetPlayerGameTypePacket playerGameTypePacket = new SetPlayerGameTypePacket();
         playerGameTypePacket.setGamemode(packet.getGameMode().ordinal());
         session.getUpstream().sendPacket(playerGameTypePacket);
+        session.setGameMode(packet.getGameMode());
 
         SetEntityDataPacket entityDataPacket = new SetEntityDataPacket();
         entityDataPacket.setRuntimeEntityId(entity.getGeyserId());

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaRespawnTranslator.java
Patch:
@@ -55,6 +55,7 @@ public void translate(ServerRespawnPacket packet, GeyserSession session) {
         SetPlayerGameTypePacket playerGameTypePacket = new SetPlayerGameTypePacket();
         playerGameTypePacket.setGamemode(packet.getGamemode().ordinal());
         session.getUpstream().sendPacket(playerGameTypePacket);
+        session.setGameMode(packet.getGamemode());
 
         PlayStatusPacket playStatusPacket = new PlayStatusPacket();
         playStatusPacket.setStatus(PlayStatusPacket.Status.PLAYER_SPAWN);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaNotifyClientTranslator.java
Patch:
@@ -57,10 +57,11 @@ public void translate(ServerNotifyClientPacket packet, GeyserSession session) {
                 session.getUpstream().sendPacket(stopRainPacket);
                 break;
             case CHANGE_GAMEMODE:
-                int gamemode = ((GameMode) packet.getValue()).ordinal();
+                GameMode gameMode = (GameMode) packet.getValue();
                 SetPlayerGameTypePacket playerGameTypePacket = new SetPlayerGameTypePacket();
-                playerGameTypePacket.setGamemode(gamemode);
+                playerGameTypePacket.setGamemode(gameMode.ordinal());
                 session.getUpstream().sendPacket(playerGameTypePacket);
+                session.setGameMode(gameMode);
                 break;
             case ENTER_CREDITS:
                 Entity entity = session.getPlayerEntity();

File: connector/src/main/java/org/geysermc/connector/inventory/PlayerInventory.java
Patch:
@@ -39,9 +39,7 @@ public class PlayerInventory extends Inventory {
     private ItemStack cursor;
 
     public PlayerInventory() {
-        super(0, null);
-
-        items = new ItemStack[45];
+        super(0, null, 46);
         heldItemSlot = 0;
     }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaRespawnTranslator.java
Patch:
@@ -44,6 +44,7 @@ public void translate(ServerRespawnPacket packet, GeyserSession session) {
         if (entity.getDimension() == getDimension(packet.getDimension()))
             return;
 
+        session.getInventoryCache().setOpenInventory(null);
         session.getChunkCache().getChunks().clear();
         entity.setDimension(getDimension(packet.getDimension()));
 

File: connector/src/main/java/org/geysermc/connector/utils/InventoryUtils.java
Patch:
@@ -42,8 +42,8 @@ public static void closeInventory(GeyserSession session, int windowId) {
                 InventoryTranslator translator = TranslatorsInit.getInventoryTranslators().get(inventory.getWindowType());
                 translator.closeInventory(session, inventory);
                 session.getInventoryCache().uncacheInventory(windowId);
+                session.getInventoryCache().setOpenInventory(null);
             }
-            session.getInventoryCache().setOpenInventory(null);
         }
     }
 
@@ -55,8 +55,8 @@ public static boolean canCombine(ItemData stack1, ItemData stack2) {
     }
 
     //NPE if nbt tag is null
-    public static ItemStack fixNbt(ItemStack stack) {
-        if (stack == null)
+    public static ItemStack fixStack(ItemStack stack) {
+        if (stack == null || stack.getId() == 0)
             return null;
         return new ItemStack(stack.getId(), stack.getAmount(), stack.getNbt() == null ? new CompoundTag("") : stack.getNbt());
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/window/JavaConfirmTransactionTranslator.java
Patch:
@@ -37,7 +37,6 @@ public class JavaConfirmTransactionTranslator extends PacketTranslator<ServerCon
 
     @Override
     public void translate(ServerConfirmTransactionPacket packet, GeyserSession session) {
-        System.out.println(packet);
         if (!packet.isAccepted()) {
             ClientConfirmTransactionPacket confirmPacket = new ClientConfirmTransactionPacket(packet.getWindowId(), packet.getActionId(), true);
             session.getDownstream().getSession().send(confirmPacket);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerActionAckTranslator.java
Patch:
@@ -40,6 +40,7 @@ public class JavaPlayerActionAckTranslator extends PacketTranslator<ServerPlayer
     public void translate(ServerPlayerActionAckPacket packet, GeyserSession session) {
         switch (packet.getAction()) {
             case FINISH_DIGGING:
+                session.getChunkCache().updateBlock(packet.getPosition(), packet.getNewState());
                 UpdateBlockPacket updateBlockPacket = new UpdateBlockPacket();
                 updateBlockPacket.setDataLayer(0);
                 updateBlockPacket.setBlockPosition(Vector3i.from(

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaBlockChangeTranslator.java
Patch:
@@ -1,5 +1,6 @@
 package org.geysermc.connector.network.translators.java.world;
 
+import com.github.steveice10.mc.protocol.data.game.entity.metadata.Position;
 import com.github.steveice10.mc.protocol.data.game.world.block.BlockChangeRecord;
 import com.github.steveice10.mc.protocol.packet.ingame.server.world.ServerBlockChangePacket;
 import com.nukkitx.math.vector.Vector3i;
@@ -13,8 +14,9 @@
 public class JavaBlockChangeTranslator extends PacketTranslator<ServerBlockChangePacket> {
     @Override
     public void translate(ServerBlockChangePacket packet, GeyserSession session) {
-        UpdateBlockPacket updateBlockPacket = new UpdateBlockPacket();
         BlockChangeRecord record = packet.getRecord();
+        session.getChunkCache().updateBlock(record.getPosition(), record.getBlock());
+        UpdateBlockPacket updateBlockPacket = new UpdateBlockPacket();
         updateBlockPacket.setDataLayer(0);
         updateBlockPacket.setBlockPosition(Vector3i.from(
                 record.getPosition().getX(),

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaChunkDataTranslator.java
Patch:
@@ -18,6 +18,7 @@ public class JavaChunkDataTranslator extends PacketTranslator<ServerChunkDataPac
 
     @Override
     public void translate(ServerChunkDataPacket packet, GeyserSession session) {
+        session.getChunkCache().addToCache(packet.getColumn());
         // Not sure if this is safe or not, however without this the client usually times out
         Geyser.getConnector().getGeneralThreadPool().execute(() -> {
             Vector2i chunkPos = session.getLastChunkPosition();

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaMultiBlockChangeTranslator.java
Patch:
@@ -40,6 +40,7 @@ public class JavaMultiBlockChangeTranslator extends PacketTranslator<ServerMulti
     @Override
     public void translate(ServerMultiBlockChangePacket packet, GeyserSession session) {
         for (BlockChangeRecord record : packet.getRecords()) {
+            session.getChunkCache().updateBlock(record.getPosition(), record.getBlock());
             UpdateBlockPacket updateBlockPacket = new UpdateBlockPacket();
             updateBlockPacket.setDataLayer(0);
             updateBlockPacket.setBlockPosition(Vector3i.from(

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockActionTranslator.java
Patch:
@@ -43,7 +43,7 @@ public class BedrockActionTranslator extends PacketTranslator<PlayerActionPacket
 
     @Override
     public void translate(PlayerActionPacket packet, GeyserSession session) {
-        Entity entity = session.getEntityCache().getEntityByGeyserId(packet.getRuntimeEntityId());
+        Entity entity = session.getPlayerEntity();
         if (entity == null)
             return;
 

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockActionTranslator.java
Patch:
@@ -43,7 +43,7 @@ public class BedrockActionTranslator extends PacketTranslator<PlayerActionPacket
 
     @Override
     public void translate(PlayerActionPacket packet, GeyserSession session) {
-        Entity entity = session.getEntityCache().getEntityByGeyserId(packet.getRuntimeEntityId());
+        Entity entity = session.getPlayerEntity();
         if (entity == null)
             return;
 

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -100,7 +100,7 @@ public enum EntityType {
     // TODO CAT (need to figure out how to deal with baby cats) https://github.com/NukkitX/Nukkit/blob/master/src/main/java/cn/nukkit/entity/passive/EntityCat.java
 
     SHULKER_BULLET(76, 0f),
-    FISHING_HOOK(77, 0f),
+    FISHING_BOBBER(77, 0f),
     CHALKBOARD(78, 0f),
     DRAGON_FIREBALL(79, 0f),
     ARROW(80, 0.25f, 0.25f),

File: connector/src/main/java/org/geysermc/connector/network/translators/TranslatorsInit.java
Patch:
@@ -151,6 +151,7 @@ public static void start() {
         Registry.registerBedrock(MovePlayerPacket.class, new BedrockMovePlayerTranslator());
         Registry.registerBedrock(PlayerActionPacket.class, new BedrockActionTranslator());
         Registry.registerBedrock(SetLocalPlayerAsInitializedPacket.class, new BedrockPlayerInitializedTranslator());
+        Registry.registerBedrock(InteractPacket.class, new BedrockInteractTranslator());
         Registry.registerBedrock(TextPacket.class, new BedrockTextTranslator());
 
         itemTranslator = new ItemTranslator();

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockAnimateTranslator.java
Patch:
@@ -39,6 +39,7 @@ public void translate(AnimatePacket packet, GeyserSession session) {
             case SWING_ARM:
                 ClientPlayerSwingArmPacket swingArmPacket = new ClientPlayerSwingArmPacket(Hand.MAIN_HAND);
                 session.getDownstream().getSession().send(swingArmPacket);
+                break;
         }
     }
 }

File: api/src/main/java/org/geysermc/api/Connector.java
Patch:
@@ -67,7 +67,7 @@ public interface Connector {
      *
      * @return a collection of the connected players
      */
-    Collection<Player> getConnectedPlayers();
+    Collection<? extends Player> getConnectedPlayers();
 
     /**
      * Shuts down the connector

File: api/src/main/java/org/geysermc/api/Geyser.java
Patch:
@@ -97,7 +97,7 @@ public static int getPlayerCount() {
      *
      * @return a collection of the connected players
      */
-    public static Collection<Player> getConnectedPlayers() {
+    public static Collection<? extends Player> getConnectedPlayers() {
         return connector.getConnectedPlayers();
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -133,7 +133,6 @@ public void connect(RemoteServer remoteServer) {
 
     public void authenticate(String username) {
         authenticate(username, "");
-        connector.addPlayer(this);
     }
 
     public void authenticate(String username, String password) {
@@ -182,6 +181,7 @@ public void packetReceived(PacketReceivedEvent event) {
                 });
 
                 downstream.getSession().connect();
+                connector.addPlayer(this);
             } catch (RequestException ex) {
                 ex.printStackTrace();
             }

File: connector/src/main/java/org/geysermc/connector/entity/Entity.java
Patch:
@@ -82,6 +82,7 @@ public Entity(long entityId, long geyserId, EntityType entityType, Vector3f posi
 
         this.valid = false;
         this.movePending = false;
+        this.dimension = 0;
     }
 
     public void spawnEntity(GeyserSession session) {
@@ -132,6 +133,7 @@ public void moveAbsolute(Vector3f position, float yaw, float pitch) {
     public void moveAbsolute(Vector3f position, Vector3f rotation) {
         setPosition(position);
         setRotation(rotation);
+
         this.movePending = true;
     }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaJoinGameTranslator.java
Patch:
@@ -59,7 +59,6 @@ public void translate(ServerJoinGamePacket packet, GeyserSession session) {
         session.getUpstream().sendPacket(entityDataPacket);
 
         session.setRenderDistance(packet.getViewDistance() + 1); // +1 to be sure it includes every chunk
-        System.out.println(session.getRenderDistance());
         if (session.getRenderDistance() > 32) session.setRenderDistance(32); // <3 u ViaVersion but I don't like crashing clients x)
 
         ChunkRadiusUpdatedPacket packet1 = new ChunkRadiusUpdatedPacket();

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockInventoryTransactionTranslator.java
Patch:
@@ -25,7 +25,6 @@
 
 package org.geysermc.connector.network.translators.bedrock;
 
-import com.flowpowered.math.vector.Vector3f;
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.Position;
 import com.github.steveice10.mc.protocol.data.game.entity.player.Hand;
 import com.github.steveice10.mc.protocol.data.game.entity.player.InteractAction;
@@ -34,7 +33,7 @@
 import com.github.steveice10.mc.protocol.packet.ingame.client.player.ClientPlayerActionPacket;
 import com.github.steveice10.mc.protocol.packet.ingame.client.player.ClientPlayerInteractEntityPacket;
 import com.github.steveice10.mc.protocol.packet.ingame.client.player.ClientPlayerUseItemPacket;
-import com.nukkitx.protocol.bedrock.data.InventoryAction;
+import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.packet.InventoryTransactionPacket;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;

File: connector/src/main/java/org/geysermc/connector/configuration/GeyserConfiguration.java
Patch:
@@ -34,7 +34,6 @@
 @JsonIgnoreProperties(ignoreUnknown = true)
 @Getter
 public class GeyserConfiguration {
-
     private BedrockConfiguration bedrock;
     private RemoteConfiguration remote;
 
@@ -52,5 +51,8 @@ public class GeyserConfiguration {
     @JsonProperty("general-thread-pool")
     private int generalThreadPool;
 
+    @JsonProperty("allow-third-party-capes")
+    private boolean allowThirdPartyCapes;
+
     private MetricInfo metrics;
 }

File: connector/src/main/java/org/geysermc/connector/entity/ExpOrbEntity.java
Patch:
@@ -25,7 +25,7 @@
 
 package org.geysermc.connector.entity;
 
-import com.flowpowered.math.vector.Vector3f;
+import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.packet.SpawnExperienceOrbPacket;
 import org.geysermc.connector.entity.type.EntityType;
 import org.geysermc.connector.network.session.GeyserSession;

File: connector/src/main/java/org/geysermc/connector/entity/PaintingEntity.java
Patch:
@@ -1,6 +1,6 @@
 package org.geysermc.connector.entity;
 
-import com.flowpowered.math.vector.Vector3f;
+import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.packet.AddPaintingPacket;
 import lombok.Getter;
 import lombok.Setter;

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockActionTranslator.java
Patch:
@@ -25,7 +25,6 @@
 
 package org.geysermc.connector.network.translators.bedrock;
 
-import com.flowpowered.math.vector.Vector3i;
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.Position;
 import com.github.steveice10.mc.protocol.data.game.entity.player.Hand;
 import com.github.steveice10.mc.protocol.data.game.entity.player.PlayerAction;
@@ -34,6 +33,7 @@
 import com.github.steveice10.mc.protocol.packet.ingame.client.player.ClientPlayerActionPacket;
 import com.github.steveice10.mc.protocol.packet.ingame.client.player.ClientPlayerPlaceBlockPacket;
 import com.github.steveice10.mc.protocol.packet.ingame.client.player.ClientPlayerStatePacket;
+import com.nukkitx.math.vector.Vector3i;
 import com.nukkitx.protocol.bedrock.packet.PlayerActionPacket;
 import org.geysermc.connector.entity.Entity;
 import org.geysermc.connector.network.session.GeyserSession;

File: connector/src/main/java/org/geysermc/connector/network/translators/block/BlockTranslator.java
Patch:
@@ -12,7 +12,7 @@ public class BlockTranslator {
     public BedrockItem getBedrockBlock(BlockState state) {
         BedrockItem bedrockItem = Remapper.BLOCK_REMAPPER.convertToBedrockB(new ItemStack(state.getId()));
         if (bedrockItem == null) {
-            GeyserLogger.DEFAULT.debug("Missing mapping for java block " + state.getId() + "/nPlease report this to Geyser.");
+            GeyserLogger.DEFAULT.debug("Missing mapping for java block " + state.getId() + "\nPlease report this to Geyser.");
             return BedrockItem.DIRT; // so we can walk and not getting stuck x)
         }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityMetadataTranslator.java
Patch:
@@ -39,8 +39,7 @@ public void translate(ServerEntityMetadataPacket packet, GeyserSession session)
         if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {
             entity = session.getPlayerEntity();
         }
-        if (entity == null)
-            return;
+        if (entity == null) return;
 
         if (entity.isValid()) {
             // TODO: Make this actually useful lol

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityTeleportTranslator.java
Patch:
@@ -25,8 +25,8 @@
 
 package org.geysermc.connector.network.translators.java.entity;
 
-import com.flowpowered.math.vector.Vector3f;
 import com.github.steveice10.mc.protocol.packet.ingame.server.entity.ServerEntityTeleportPacket;
+import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.packet.MoveEntityAbsolutePacket;
 import org.geysermc.connector.entity.Entity;
 import org.geysermc.connector.network.session.GeyserSession;
@@ -42,13 +42,13 @@ public void translate(ServerEntityTeleportPacket packet, GeyserSession session)
         }
         if (entity == null) return;
 
-        entity.moveAbsolute(new Vector3f(packet.getX(), packet.getY(), packet.getZ()), packet.getPitch(), packet.getYaw());
+        entity.moveAbsolute(Vector3f.from(packet.getX(), packet.getY(), packet.getZ()), packet.getYaw(), packet.getPitch());
 
         if (entity.isMovePending()) {
             MoveEntityAbsolutePacket moveEntityPacket = new MoveEntityAbsolutePacket();
             moveEntityPacket.setRuntimeEntityId(entity.getGeyserId());
             moveEntityPacket.setPosition(entity.getPosition());
-            moveEntityPacket.setRotation(entity.getRotation());
+            moveEntityPacket.setRotation(entity.getBedrockRotation());
             moveEntityPacket.setOnGround(packet.isOnGround());
             moveEntityPacket.setTeleported(true);
             entity.setMovePending(false);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerActionAckTranslator.java
Patch:
@@ -25,8 +25,8 @@
 
 package org.geysermc.connector.network.translators.java.entity.player;
 
-import com.flowpowered.math.vector.Vector3i;
 import com.github.steveice10.mc.protocol.packet.ingame.server.entity.player.ServerPlayerActionAckPacket;
+import com.nukkitx.math.vector.Vector3i;
 import com.nukkitx.protocol.bedrock.packet.UpdateBlockPacket;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerHealthTranslator.java
Patch:
@@ -25,10 +25,10 @@
 
 package org.geysermc.connector.network.translators.java.entity.player;
 
-import com.flowpowered.math.vector.Vector3f;
 import com.github.steveice10.mc.protocol.data.game.ClientRequest;
 import com.github.steveice10.mc.protocol.packet.ingame.client.ClientRequestPacket;
 import com.github.steveice10.mc.protocol.packet.ingame.server.entity.player.ServerPlayerHealthPacket;
+import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.packet.RespawnPacket;
 import com.nukkitx.protocol.bedrock.packet.SetHealthPacket;
 import org.geysermc.connector.entity.Entity;
@@ -61,7 +61,7 @@ public void translate(ServerPlayerHealthPacket packet, GeyserSession session) {
 
         if (packet.getHealth() <= 0) {
             RespawnPacket respawnPacket = new RespawnPacket();
-            respawnPacket.setPosition(new Vector3f(0, 72, 0));
+            respawnPacket.setPosition(Vector3f.from(0, 72, 0));
             session.getUpstream().sendPacket(new RespawnPacket());
 
             ClientRequestPacket javaRespawnPacket = new ClientRequestPacket(ClientRequest.RESPAWN);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/spawn/JavaSpawnPaintingTranslator.java
Patch:
@@ -25,8 +25,8 @@
 
 package org.geysermc.connector.network.translators.java.entity.spawn;
 
-import com.flowpowered.math.vector.Vector3f;
 import com.github.steveice10.mc.protocol.packet.ingame.server.entity.spawn.ServerSpawnPaintingPacket;
+import com.nukkitx.math.vector.Vector3f;
 import org.geysermc.api.Geyser;
 import org.geysermc.connector.entity.PaintingEntity;
 import org.geysermc.connector.network.session.GeyserSession;
@@ -37,7 +37,7 @@ public class JavaSpawnPaintingTranslator extends PacketTranslator<ServerSpawnPai
 
     @Override
     public void translate(ServerSpawnPaintingPacket packet, GeyserSession session) {
-        Vector3f position = new Vector3f(packet.getPosition().getX(), packet.getPosition().getY(), packet.getPosition().getZ());
+        Vector3f position = Vector3f.from(packet.getPosition().getX(), packet.getPosition().getY(), packet.getPosition().getZ());
 
         Geyser.getGeneralThreadPool().execute(() -> { // #slowdownbrother, just don't execute it directly
             PaintingEntity entity = new PaintingEntity(

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaChunkDataTranslator.java
Patch:
@@ -1,8 +1,8 @@
 package org.geysermc.connector.network.translators.java.world;
 
-import com.flowpowered.math.vector.Vector2i;
-import com.flowpowered.math.vector.Vector3f;
 import com.github.steveice10.mc.protocol.packet.ingame.server.world.ServerChunkDataPacket;
+import com.nukkitx.math.vector.Vector2i;
+import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.network.VarInts;
 import com.nukkitx.protocol.bedrock.packet.LevelChunkPacket;
 import com.nukkitx.protocol.bedrock.packet.NetworkChunkPublisherUpdatePacket;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaNotifyClientTranslator.java
Patch:
@@ -25,9 +25,9 @@
 
 package org.geysermc.connector.network.translators.java.world;
 
-import com.flowpowered.math.vector.Vector3f;
 import com.github.steveice10.mc.protocol.data.game.entity.player.GameMode;
 import com.github.steveice10.mc.protocol.packet.ingame.server.world.ServerNotifyClientPacket;
+import com.nukkitx.math.vector.Vector3f;
 import com.nukkitx.protocol.bedrock.packet.LevelEventPacket;
 import com.nukkitx.protocol.bedrock.packet.SetPlayerGameTypePacket;
 import com.nukkitx.protocol.bedrock.packet.ShowCreditsPacket;
@@ -46,14 +46,14 @@ public void translate(ServerNotifyClientPacket packet, GeyserSession session) {
                 LevelEventPacket startRainPacket = new LevelEventPacket();
                 startRainPacket.setEvent(LevelEventPacket.Event.START_RAIN);
                 startRainPacket.setData(ThreadLocalRandom.current().nextInt(50000) + 10000);
-                startRainPacket.setPosition(new Vector3f(0, 0, 0));
+                startRainPacket.setPosition(Vector3f.ZERO);
                 session.getUpstream().sendPacket(startRainPacket);
                 break;
             case STOP_RAIN:
                 LevelEventPacket stopRainPacket = new LevelEventPacket();
                 stopRainPacket.setEvent(LevelEventPacket.Event.STOP_RAIN);
                 stopRainPacket.setData(ThreadLocalRandom.current().nextInt(50000) + 10000);
-                stopRainPacket.setPosition(new Vector3f(0, 0, 0));
+                stopRainPacket.setPosition(Vector3f.ZERO);
                 session.getUpstream().sendPacket(stopRainPacket);
                 break;
             case CHANGE_GAMEMODE:

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaSpawnPositionTranslator.java
Patch:
@@ -25,8 +25,8 @@
 
 package org.geysermc.connector.network.translators.java.world;
 
-import com.flowpowered.math.vector.Vector3i;
 import com.github.steveice10.mc.protocol.packet.ingame.server.world.ServerSpawnPositionPacket;
+import com.nukkitx.math.vector.Vector3i;
 import com.nukkitx.protocol.bedrock.packet.SetSpawnPositionPacket;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
@@ -36,7 +36,7 @@ public class JavaSpawnPositionTranslator extends PacketTranslator<ServerSpawnPos
     @Override
     public void translate(ServerSpawnPositionPacket packet, GeyserSession session) {
         SetSpawnPositionPacket spawnPositionPacket = new SetSpawnPositionPacket();
-        spawnPositionPacket.setBlockPosition(new Vector3i(packet.getPosition().getX(), packet.getPosition().getY(), packet.getPosition().getZ()));
+        spawnPositionPacket.setBlockPosition(Vector3i.from(packet.getPosition().getX(), packet.getPosition().getY(), packet.getPosition().getZ()));
         spawnPositionPacket.setSpawnForced(true);
         spawnPositionPacket.setSpawnType(SetSpawnPositionPacket.Type.PLAYER_SPAWN);
         session.getUpstream().sendPacket(spawnPositionPacket);

File: connector/src/main/java/org/geysermc/connector/utils/LoginEncryptionUtils.java
Patch:
@@ -112,7 +112,7 @@ private static void startEncryptionHandshake(GeyserSession session, PublicKey ke
 
         byte[] token = EncryptionUtils.generateRandomToken();
         SecretKey encryptionKey = EncryptionUtils.getSecretKey(serverKeyPair.getPrivate(), key, token);
-        session.getUpstream().enableEncryption(encryptionKey);
+        session.getUpstream().getSession().enableEncryption(encryptionKey);
 
         ServerToClientHandshakePacket packet = new ServerToClientHandshakePacket();
         packet.setJwt(EncryptionUtils.createHandshakeJwt(serverKeyPair, token).serialize());

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaBlockChangeTranslator.java
Patch:
@@ -21,8 +21,9 @@ public void translate(ServerBlockChangePacket packet, GeyserSession session) {
                 record.getPosition().getY(),
                 record.getPosition().getZ()));
 
-        BlockEntry bedrockItem = TranslatorsInit.getBlockTranslator().getBedrockBlock(record.getBlock());
-        updateBlockPacket.setRuntimeId(GlobalBlockPalette.getOrCreateRuntimeId(bedrockItem.hashCode()));
+        BlockEntry itemEntry = TranslatorsInit.getBlockTranslator().getBedrockBlock(record.getBlock());
+        updateBlockPacket.setRuntimeId(GlobalBlockPalette.getOrCreateRuntimeId(itemEntry.getBedrockId() << 4 | itemEntry.getBedrockData()));
+        updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.NEIGHBORS);
 
         session.getUpstream().sendPacket(updateBlockPacket);
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaMultiBlockChangeTranslator.java
Patch:
@@ -47,8 +47,9 @@ public void translate(ServerMultiBlockChangePacket packet, GeyserSession session
                     record.getPosition().getY(),
                     record.getPosition().getZ()));
 
-            BlockEntry bedrockItem = TranslatorsInit.getBlockTranslator().getBedrockBlock(record.getBlock());
-            updateBlockPacket.setRuntimeId(GlobalBlockPalette.getOrCreateRuntimeId(bedrockItem.hashCode()));
+            BlockEntry blockEntry = TranslatorsInit.getBlockTranslator().getBedrockBlock(record.getBlock());
+            updateBlockPacket.setRuntimeId(GlobalBlockPalette.getOrCreateRuntimeId(blockEntry.getBedrockId() << 4 | blockEntry.getBedrockData()));
+            updateBlockPacket.getFlags().add(UpdateBlockPacket.Flag.NEIGHBORS);
 
             session.getUpstream().sendPacket(updateBlockPacket);
         }

File: connector/src/main/java/org/geysermc/connector/entity/Entity.java
Patch:
@@ -137,7 +137,7 @@ public void moveAbsolute(Vector3f position, Vector3f rotation) {
 
     public EntityDataDictionary getMetadata() {
         EntityFlags flags = new EntityFlags();
-        flags.setFlag(EntityFlag.HAS_GRAVITY, true);
+        flags.setFlag(EntityFlag.HAS_GRAVITY, !is(PlayerEntity.class) || as(PlayerEntity.class).isGravity());
         flags.setFlag(EntityFlag.HAS_COLLISION, true);
         flags.setFlag(EntityFlag.CAN_SHOW_NAME, true);
         flags.setFlag(EntityFlag.CAN_CLIMB, true);

File: connector/src/main/java/org/geysermc/connector/network/translators/TranslatorsInit.java
Patch:
@@ -153,7 +153,7 @@ public static void start() {
         Registry.registerBedrock(MobEquipmentPacket.class, new BedrockMobEquipmentTranslator());
         Registry.registerBedrock(MovePlayerPacket.class, new BedrockMovePlayerTranslator());
         Registry.registerBedrock(PlayerActionPacket.class, new BedrockActionTranslator());
-        Registry.registerBedrock(SetLocalPlayerAsInitializedPacket.class, new BedrockPlayerInitialized());
+        Registry.registerBedrock(SetLocalPlayerAsInitializedPacket.class, new BedrockPlayerInitializedTranslator());
         Registry.registerBedrock(TextPacket.class, new BedrockTextTranslator());
 
         itemTranslator = new ItemTranslator();

File: connector/src/main/java/org/geysermc/connector/network/translators/bedrock/BedrockPlayerInitializedTranslator.java
Patch:
@@ -4,7 +4,7 @@
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 
-public class BedrockPlayerInitialized extends PacketTranslator<SetLocalPlayerAsInitializedPacket> {
+public class BedrockPlayerInitializedTranslator extends PacketTranslator<SetLocalPlayerAsInitializedPacket> {
     @Override
     public void translate(SetLocalPlayerAsInitializedPacket packet, GeyserSession session) {
         if (session.getPlayerEntity().getGeyserId() == packet.getRuntimeEntityId()) {

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaBossBarTranslator.java
Patch:
@@ -34,7 +34,7 @@ public void translate(ServerBossBarPacket packet, GeyserSession session) {
                 bossEventPacket.setTitle(MessageUtils.getBedrockMessage(packet.getTitle()));
                 break;
             case UPDATE_HEALTH:
-            bossEventPacket.setType(BossEventPacket.Type.HEALTH_PERCENTAGE);
+                bossEventPacket.setType(BossEventPacket.Type.HEALTH_PERCENTAGE);
                 bossEventPacket.setHealthPercentage(packet.getHealth());
                 break;
             case REMOVE:

File: connector/src/main/java/org/geysermc/connector/scoreboard/Scoreboard.java
Patch:
@@ -142,7 +142,7 @@ public void onUpdate() {
                 boolean teamAdd = team != null && (team.getUpdateType() == ADD || team.getUpdateType() == UPDATE);
                 boolean teamRemove = team != null && (team.getUpdateType() == REMOVE || team.getUpdateType() == UPDATE);
 
-                if (team != null && (team.getUpdateType() == REMOVE || inTeam)) score.setTeam(null);
+                if (team != null && (team.getUpdateType() == REMOVE || !inTeam)) score.setTeam(null);
 
                 boolean add = (hasUpdate || globalAdd || teamAdd || teamRemove || score.getUpdateType() == ADD || score.getUpdateType() == UPDATE) && (score.getUpdateType() != REMOVE);
                 boolean remove = hasUpdate || globalRemove || teamAdd || teamRemove || score.getUpdateType() == REMOVE || score.getUpdateType() == UPDATE;

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -297,7 +297,7 @@ private void startGame() {
         startGamePacket.setCurrentTick(0);
         startGamePacket.setEnchantmentSeed(0);
         startGamePacket.setMultiplayerCorrelationId("");
-        startGamePacket.setCachedPalette(Toolbox.CACHED_PALLETE.copy());
+        startGamePacket.setCachedPalette(Toolbox.CACHED_PALLETE.retainedDuplicate());
         startGamePacket.setItemEntries(Toolbox.ITEMS);
         upstream.sendPacket(startGamePacket);
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/spawn/JavaPlayerListEntryTranslator.java
Patch:
@@ -22,7 +22,7 @@ public void translate(ServerPlayerListEntryPacket packet, GeyserSession session)
             PlayerListPacket.Entry entry1 = new PlayerListPacket.Entry(entry.getProfile().getId());
 
             if (packet.getAction() == PlayerListEntryAction.ADD_PLAYER) {
-                boolean self = session.getPlayerEntity().getUuid().equals(entry.getProfile().getId());
+                boolean self = entry.getProfile().getId().equals(session.getPlayerEntity().getUuid());
 
                 PlayerEntity playerEntity = session.getPlayerEntity();
                 if (!self) {

File: connector/src/main/java/org/geysermc/connector/configuration/GeyserConfiguration.java
Patch:
@@ -32,7 +32,6 @@
 
 @Getter
 public class GeyserConfiguration {
-
     private BedrockConfiguration bedrock;
     private RemoteConfiguration remote;
 
@@ -50,5 +49,8 @@ public class GeyserConfiguration {
     @JsonProperty("general-thread-pool")
     private int generalThreadPool;
 
+    @JsonProperty("allow-third-party-capes")
+    private boolean allowThirdPartyCapes;
+
     private MetricInfo metrics;
 }
\ No newline at end of file

File: connector/src/main/java/org/geysermc/connector/network/translators/TranslatorsInit.java
Patch:
@@ -146,10 +146,11 @@ public static void start() {
 
         Registry.registerBedrock(AnimatePacket.class, new BedrockAnimateTranslator());
         Registry.registerBedrock(CommandRequestPacket.class, new BedrockCommandRequestTranslator());
-        Registry.registerBedrock(TextPacket.class, new BedrockTextTranslator());
         Registry.registerBedrock(MobEquipmentPacket.class, new BedrockMobEquipmentTranslator());
-        Registry.registerBedrock(PlayerActionPacket.class, new BedrockActionTranslator());
         Registry.registerBedrock(MovePlayerPacket.class, new BedrockMovePlayerTranslator());
+        Registry.registerBedrock(PlayerActionPacket.class, new BedrockActionTranslator());
+        Registry.registerBedrock(SetLocalPlayerAsInitializedPacket.class, new BedrockPlayerInitialized());
+        Registry.registerBedrock(TextPacket.class, new BedrockTextTranslator());
 
         itemTranslator = new ItemTranslator();
         blockTranslator = new BlockTranslator();

File: connector/src/main/java/org/geysermc/connector/network/translators/block/BlockTranslator.java
Patch:
@@ -12,7 +12,7 @@ public class BlockTranslator {
     public BedrockItem getBedrockBlock(BlockState state) {
         BedrockItem bedrockItem = Remapper.BLOCK_REMAPPER.convertToBedrockB(new ItemStack(state.getId()));
         if (bedrockItem == null) {
-            GeyserLogger.DEFAULT.debug("Missing mapping for java block " + state.getId() + "/nPlease report this to Geyser.");
+            GeyserLogger.DEFAULT.debug("Missing mapping for java block " + state.getId() + "\nPlease report this to Geyser.");
             return BedrockItem.DIRT; // so we can walk and not getting stuck x)
         }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityDestroyTranslator.java
Patch:
@@ -38,7 +38,7 @@ public void translate(ServerEntityDestroyPacket packet, GeyserSession session) {
             Entity entity = session.getEntityCache().getEntityByJavaId(entityId);
 
             if (entity != null) {
-                session.getEntityCache().removeEntity(entity);
+                session.getEntityCache().removeEntity(entity, false);
             }
         }
     }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityHeadLookTranslator.java
Patch:
@@ -47,8 +47,8 @@ public void translate(ServerEntityHeadLookPacket packet, GeyserSession session)
 
         MoveEntityAbsolutePacket moveEntityAbsolutePacket = new MoveEntityAbsolutePacket();
         moveEntityAbsolutePacket.setRuntimeEntityId(entity.getGeyserId());
-        moveEntityAbsolutePacket.setRotation(entity.getRotation());
         moveEntityAbsolutePacket.setPosition(entity.getPosition());
+        moveEntityAbsolutePacket.setRotation(entity.getBedrockRotation());
         moveEntityAbsolutePacket.setOnGround(true);
 
         session.getUpstream().sendPacket(moveEntityAbsolutePacket);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityPositionRotationTranslator.java
Patch:
@@ -41,13 +41,13 @@ public void translate(ServerEntityPositionRotationPacket packet, GeyserSession s
         }
         if (entity == null) return;
 
-        entity.moveRelative(packet.getMovementX(), packet.getMovementY(), packet.getMovementZ(), packet.getPitch(), packet.getYaw());
+        entity.moveRelative(packet.getMovementX(), packet.getMovementY(), packet.getMovementZ(), packet.getYaw(), packet.getPitch());
 
         if (entity.isMovePending()) {
             MoveEntityAbsolutePacket moveEntityPacket = new MoveEntityAbsolutePacket();
             moveEntityPacket.setRuntimeEntityId(entity.getGeyserId());
             moveEntityPacket.setPosition(entity.getPosition());
-            moveEntityPacket.setRotation(entity.getRotation());
+            moveEntityPacket.setRotation(entity.getBedrockRotation());
             moveEntityPacket.setOnGround(packet.isOnGround());
             moveEntityPacket.setTeleported(false);
             entity.setMovePending(false);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityPositionTranslator.java
Patch:
@@ -41,13 +41,13 @@ public void translate(ServerEntityPositionPacket packet, GeyserSession session)
         }
         if (entity == null) return;
 
-        entity.moveRelative(packet.getMovementX(), packet.getMovementY(), packet.getMovementZ(), packet.getPitch(), packet.getYaw());
+        entity.moveRelative(packet.getMovementX(), packet.getMovementY(), packet.getMovementZ(), entity.getRotation());
 
         if (entity.isMovePending()) {
             MoveEntityAbsolutePacket moveEntityPacket = new MoveEntityAbsolutePacket();
             moveEntityPacket.setRuntimeEntityId(entity.getGeyserId());
             moveEntityPacket.setPosition(entity.getPosition());
-            moveEntityPacket.setRotation(entity.getRotation());
+            moveEntityPacket.setRotation(entity.getBedrockRotation());
             moveEntityPacket.setOnGround(packet.isOnGround());
             moveEntityPacket.setTeleported(false);
             entity.setMovePending(false);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityTeleportTranslator.java
Patch:
@@ -42,13 +42,13 @@ public void translate(ServerEntityTeleportPacket packet, GeyserSession session)
         }
         if (entity == null) return;
 
-        entity.moveAbsolute(new Vector3f(packet.getX(), packet.getY(), packet.getZ()), packet.getPitch(), packet.getYaw());
+        entity.moveAbsolute(new Vector3f(packet.getX(), packet.getY(), packet.getZ()), packet.getYaw(), packet.getPitch());
 
         if (entity.isMovePending()) {
             MoveEntityAbsolutePacket moveEntityPacket = new MoveEntityAbsolutePacket();
             moveEntityPacket.setRuntimeEntityId(entity.getGeyserId());
             moveEntityPacket.setPosition(entity.getPosition());
-            moveEntityPacket.setRotation(entity.getRotation());
+            moveEntityPacket.setRotation(entity.getBedrockRotation());
             moveEntityPacket.setOnGround(packet.isOnGround());
             moveEntityPacket.setTeleported(true);
             entity.setMovePending(false);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/player/JavaPlayerPositionRotationTranslator.java
Patch:
@@ -48,7 +48,7 @@ public void translate(ServerPlayerPositionRotationPacket packet, GeyserSession s
             return;
 
         if (!session.isSpawned()) {
-            entity.moveAbsolute(new Vector3f(packet.getX(), packet.getY() + EntityType.PLAYER.getOffset() + 0.1f, packet.getZ()), packet.getPitch(), packet.getYaw());
+            entity.moveAbsolute(new Vector3f(packet.getX(), packet.getY() + EntityType.PLAYER.getOffset() + 0.1f, packet.getZ()), packet.getYaw(), packet.getPitch());
 
             SetEntityDataPacket entityDataPacket = new SetEntityDataPacket();
             entityDataPacket.setRuntimeEntityId(entity.getGeyserId());
@@ -70,7 +70,7 @@ public void translate(ServerPlayerPositionRotationPacket packet, GeyserSession s
             return;
         }
 
-        entity.moveAbsolute(new Vector3f(packet.getX(), packet.getY() + EntityType.PLAYER.getOffset() + 0.1f, packet.getZ()), packet.getPitch(), packet.getYaw());
+        entity.moveAbsolute(new Vector3f(packet.getX(), packet.getY() + EntityType.PLAYER.getOffset() + 0.1f, packet.getZ()), packet.getYaw(), packet.getPitch());
 
         MovePlayerPacket movePlayerPacket = new MovePlayerPacket();
         movePlayerPacket.setRuntimeEntityId(entity.getGeyserId());

File: connector/src/main/java/org/geysermc/connector/utils/LoginEncryptionUtils.java
Patch:
@@ -112,7 +112,7 @@ private static void startEncryptionHandshake(GeyserSession session, PublicKey ke
 
         byte[] token = EncryptionUtils.generateRandomToken();
         SecretKey encryptionKey = EncryptionUtils.getSecretKey(serverKeyPair.getPrivate(), key, token);
-        session.getUpstream().enableEncryption(encryptionKey);
+        session.getUpstream().getSession().enableEncryption(encryptionKey);
 
         ServerToClientHandshakePacket packet = new ServerToClientHandshakePacket();
         packet.setJwt(EncryptionUtils.createHandshakeJwt(serverKeyPair, token).serialize());

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -297,7 +297,7 @@ private void startGame() {
         startGamePacket.setCurrentTick(0);
         startGamePacket.setEnchantmentSeed(0);
         startGamePacket.setMultiplayerCorrelationId("");
-        startGamePacket.setCachedPalette(Toolbox.CACHED_PALLETE);
+        startGamePacket.setCachedPalette(Toolbox.CACHED_PALLETE.copy());
         startGamePacket.setItemEntries(Toolbox.ITEMS);
         upstream.sendPacket(startGamePacket);
 

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -297,7 +297,7 @@ private void startGame() {
         startGamePacket.setCurrentTick(0);
         startGamePacket.setEnchantmentSeed(0);
         startGamePacket.setMultiplayerCorrelationId("");
-        startGamePacket.setCachedPalette(Toolbox.CACHED_PALLETE);
+        startGamePacket.setCachedPalette(Toolbox.CACHED_PALLETE.copy());
         startGamePacket.setItemEntries(Toolbox.ITEMS);
         upstream.sendPacket(startGamePacket);
 

File: connector/src/main/java/org/geysermc/connector/network/translators/TranslatorsInit.java
Patch:
@@ -28,6 +28,7 @@
 import com.github.steveice10.mc.protocol.data.game.window.WindowType;
 import com.github.steveice10.mc.protocol.packet.ingame.server.*;
 import com.github.steveice10.mc.protocol.packet.ingame.server.entity.*;
+import com.github.steveice10.mc.protocol.packet.ingame.server.entity.player.ServerPlayerActionAckPacket;
 import com.github.steveice10.mc.protocol.packet.ingame.server.entity.player.ServerPlayerHealthPacket;
 import com.github.steveice10.mc.protocol.packet.ingame.server.entity.player.ServerPlayerPositionRotationPacket;
 import com.github.steveice10.mc.protocol.packet.ingame.server.entity.player.ServerPlayerSetExperiencePacket;
@@ -56,6 +57,7 @@
 import org.geysermc.connector.network.translators.java.JavaRespawnTranslator;
 import org.geysermc.connector.network.translators.java.JavaTitleTranslator;
 import org.geysermc.connector.network.translators.java.entity.*;
+import org.geysermc.connector.network.translators.java.entity.player.JavaPlayerActionAckTranslator;
 import org.geysermc.connector.network.translators.java.entity.player.JavaPlayerHealthTranslator;
 import org.geysermc.connector.network.translators.java.entity.player.JavaPlayerPositionRotationTranslator;
 import org.geysermc.connector.network.translators.java.entity.player.JavaPlayerSetExperienceTranslator;
@@ -131,6 +133,7 @@ public static void start() {
         Registry.registerJava(ServerPlayerPositionRotationPacket.class, new JavaPlayerPositionRotationTranslator());
         Registry.registerJava(ServerPlayerSetExperiencePacket.class, new JavaPlayerSetExperienceTranslator());
         Registry.registerJava(ServerPlayerHealthPacket.class, new JavaPlayerHealthTranslator());
+        Registry.registerJava(ServerPlayerActionAckPacket.class, new JavaPlayerActionAckTranslator());
 
         Registry.registerJava(ServerNotifyClientPacket.class, new JavaNotifyClientTranslator());
         Registry.registerJava(ServerChunkDataPacket.class, new JavaChunkDataTranslator());

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -96,6 +96,7 @@ public static void main(String[] args) {
     }
 
     private GeyserConnector() {
+
         long startupTime = System.currentTimeMillis();
 
         // Metric
@@ -159,6 +160,7 @@ private GeyserConnector() {
             metrics = new Metrics("GeyserMC", config.getMetrics().getUUID(), true, java.util.logging.Logger.getLogger(""));
             metrics.addCustomChart(new Metrics.SingleLineChart("servers", () -> 1));
             metrics.addCustomChart(new Metrics.SingleLineChart("players", Geyser::getPlayerCount));
+            metrics.addCustomChart(new Metrics.SimplePie("authMode", config.getRemote()::getAuthType));
         }
 
         double completeTime = (System.currentTimeMillis() - startupTime) / 1000D;

File: connector/src/main/java/org/geysermc/connector/metrics/Metrics.java
Patch:
@@ -81,7 +81,7 @@ public void addCustomChart(CustomChart chart) {
      * Starts the Scheduler which submits our data every 30 minutes.
      */
     private void startSubmitting() {
-        Geyser.getGeneralThreadPool().scheduleAtFixedRate(this::submitData, 5, 30, TimeUnit.MINUTES);
+        Geyser.getGeneralThreadPool().scheduleAtFixedRate(this::submitData, 1, 30, TimeUnit.MINUTES);
         // Submit the data every 30 minutes, first time after 5 minutes to give other plugins enough time to start
         // WARNING: Changing the frequency has no effect but your plugin WILL be blocked/deleted!
         // WARNING: Just don't do it!

File: connector/src/main/java/org/geysermc/connector/configuration/GeyserConfiguration.java
Patch:
@@ -25,11 +25,13 @@
 
 package org.geysermc.connector.configuration;
 
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import lombok.Getter;
 
 import java.util.Map;
 
+@JsonIgnoreProperties(ignoreUnknown = true)
 @Getter
 public class GeyserConfiguration {
 
@@ -51,4 +53,4 @@ public class GeyserConfiguration {
     private int generalThreadPool;
 
     private MetricInfo metrics;
-}
\ No newline at end of file
+}

File: connector/src/main/java/org/geysermc/connector/configuration/GeyserConfiguration.java
Patch:
@@ -25,11 +25,13 @@
 
 package org.geysermc.connector.configuration;
 
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import lombok.Getter;
 
 import java.util.Map;
 
+@JsonIgnoreProperties(ignoreUnknown = true)
 @Getter
 public class GeyserConfiguration {
 
@@ -51,4 +53,4 @@ public class GeyserConfiguration {
     private int generalThreadPool;
 
     private MetricInfo metrics;
-}
\ No newline at end of file
+}

File: connector/src/main/java/org/geysermc/connector/configuration/GeyserConfiguration.java
Patch:
@@ -47,6 +47,5 @@ public class GeyserConfiguration {
     @JsonProperty("debug-mode")
     private boolean debugMode;
 
-    @JsonProperty("uuid")
-    private String UUID;
+    private MetricInfo metrics;
 }
\ No newline at end of file

File: connector/src/main/java/org/geysermc/connector/network/UpstreamPacketHandler.java
Patch:
@@ -112,14 +112,15 @@ private boolean couldLoginUserByName(String bedrockUsername) {
     @Override
     public boolean handle(MovePlayerPacket packet) {
         connector.getLogger().debug("Handled packet: " + packet.getClass().getSimpleName());
-        if (!session.isLoggedIn()) {
+        if (!session.isLoggedIn() && !session.isLoggingIn()) {
             // TODO it is safer to key authentication on something that won't change (UUID, not username)
             if (!couldLoginUserByName(session.getAuthenticationData().getName())) {
                 LoginEncryptionUtils.showLoginWindow(session);
             }
             // else we were able to log the user in
-
             return true;
+        } else if (session.isLoggingIn()) {
+            session.sendMessage("Please wait until you are logged in...");
         }
 
         return translateAndDefault(packet);

File: connector/src/main/java/org/geysermc/connector/network/translators/block/BlockTranslator.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.ItemStack;
 import com.github.steveice10.mc.protocol.data.game.world.block.BlockState;
+import org.geysermc.connector.console.GeyserLogger;
 import org.geysermc.connector.network.translators.item.BedrockItem;
 import org.geysermc.connector.utils.Remapper;
 
@@ -11,8 +12,8 @@ public class BlockTranslator {
     public BedrockItem getBedrockBlock(BlockState state) {
         BedrockItem bedrockItem = Remapper.BLOCK_REMAPPER.convertToBedrockB(new ItemStack(state.getId()));
         if (bedrockItem == null) {
-            // GeyserLogger.DEFAULT.debug("Missing mapping for java block " + state.getId());
-            return BedrockItem.AIR;
+            GeyserLogger.DEFAULT.debug("Missing mapping for java block " + state.getId() + "/nPlease report this to Geyser.");
+            return BedrockItem.DIRT; // so we can walk and not getting stuck x)
         }
 
         return bedrockItem;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityTeleportTranslator.java
Patch:
@@ -40,8 +40,7 @@ public void translate(ServerEntityTeleportPacket packet, GeyserSession session)
         if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {
             entity = session.getPlayerEntity();
         }
-        if (entity == null)
-            return;
+        if (entity == null) return;
 
         entity.moveAbsolute(new Vector3f(packet.getX(), packet.getY(), packet.getZ()), packet.getPitch(), packet.getYaw());
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/spawn/JavaPlayerListEntryTranslator.java
Patch:
@@ -6,7 +6,6 @@
 import com.github.steveice10.mc.protocol.packet.ingame.server.ServerPlayerListEntryPacket;
 import com.nukkitx.protocol.bedrock.packet.PlayerListPacket;
 import org.geysermc.connector.entity.PlayerEntity;
-import org.geysermc.connector.entity.type.EntityType;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.utils.ProvidedSkin;
@@ -33,7 +32,6 @@ public void translate(ServerPlayerListEntryPacket packet, GeyserSession session)
                         entry.getProfile(),
                         -1,
                         geyserId,
-                        EntityType.PLAYER,
                         Vector3f.ZERO,
                         Vector3f.ZERO,
                         Vector3f.ZERO

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/spawn/JavaSpawnMobTranslator.java
Patch:
@@ -51,9 +51,6 @@ public void translate(ServerSpawnMobPacket packet, GeyserSession session) {
         Entity entity = new Entity(packet.getEntityId(), session.getEntityCache().getNextEntityId().incrementAndGet(),
                 type, position, motion, rotation);
 
-        if (entity == null)
-            return;
-
         session.getEntityCache().spawnEntity(entity);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaChunkDataTranslator.java
Patch:
@@ -9,7 +9,6 @@
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 import org.geysermc.api.Geyser;
-import org.geysermc.connector.console.GeyserLogger;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.utils.ChunkUtils;
@@ -28,7 +27,7 @@ public void translate(ServerChunkDataPacket packet, GeyserSession session) {
             if (chunkPos == null || !chunkPos.equals(newChunkPos)) {
                 NetworkChunkPublisherUpdatePacket chunkPublisherUpdatePacket = new NetworkChunkPublisherUpdatePacket();
                 chunkPublisherUpdatePacket.setPosition(position.toInt());
-                chunkPublisherUpdatePacket.setRadius(8 << 4);
+                chunkPublisherUpdatePacket.setRadius(session.getRenderDistance() << 4);
                 session.getUpstream().sendPacket(chunkPublisherUpdatePacket);
 
                 session.setLastChunkPosition(newChunkPos);

File: connector/src/main/java/org/geysermc/connector/network/UpstreamPacketHandler.java
Patch:
@@ -112,14 +112,15 @@ private boolean couldLoginUserByName(String bedrockUsername) {
     @Override
     public boolean handle(MovePlayerPacket packet) {
         connector.getLogger().debug("Handled packet: " + packet.getClass().getSimpleName());
-        if (!session.isLoggedIn()) {
+        if (!session.isLoggedIn() && !session.isLoggingIn()) {
             // TODO it is safer to key authentication on something that won't change (UUID, not username)
             if (!couldLoginUserByName(session.getAuthenticationData().getName())) {
                 LoginEncryptionUtils.showLoginWindow(session);
             }
             // else we were able to log the user in
-
             return true;
+        } else if (session.isLoggingIn()) {
+            session.sendMessage("Please wait until you are logged in...");
         }
 
         return translateAndDefault(packet);

File: connector/src/main/java/org/geysermc/connector/network/translators/block/BlockTranslator.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.github.steveice10.mc.protocol.data.game.entity.metadata.ItemStack;
 import com.github.steveice10.mc.protocol.data.game.world.block.BlockState;
+import org.geysermc.connector.console.GeyserLogger;
 import org.geysermc.connector.network.translators.item.BedrockItem;
 import org.geysermc.connector.utils.Remapper;
 
@@ -11,8 +12,8 @@ public class BlockTranslator {
     public BedrockItem getBedrockBlock(BlockState state) {
         BedrockItem bedrockItem = Remapper.BLOCK_REMAPPER.convertToBedrockB(new ItemStack(state.getId()));
         if (bedrockItem == null) {
-            // GeyserLogger.DEFAULT.debug("Missing mapping for java block " + state.getId());
-            return BedrockItem.AIR;
+            GeyserLogger.DEFAULT.debug("Missing mapping for java block " + state.getId() + "/nPlease report this to Geyser.");
+            return BedrockItem.DIRT; // so we can walk and not getting stuck x)
         }
 
         return bedrockItem;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityTeleportTranslator.java
Patch:
@@ -40,8 +40,7 @@ public void translate(ServerEntityTeleportPacket packet, GeyserSession session)
         if (packet.getEntityId() == session.getPlayerEntity().getEntityId()) {
             entity = session.getPlayerEntity();
         }
-        if (entity == null)
-            return;
+        if (entity == null) return;
 
         entity.moveAbsolute(new Vector3f(packet.getX(), packet.getY(), packet.getZ()), packet.getPitch(), packet.getYaw());
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/spawn/JavaPlayerListEntryTranslator.java
Patch:
@@ -6,7 +6,6 @@
 import com.github.steveice10.mc.protocol.packet.ingame.server.ServerPlayerListEntryPacket;
 import com.nukkitx.protocol.bedrock.packet.PlayerListPacket;
 import org.geysermc.connector.entity.PlayerEntity;
-import org.geysermc.connector.entity.type.EntityType;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.utils.ProvidedSkin;
@@ -33,7 +32,6 @@ public void translate(ServerPlayerListEntryPacket packet, GeyserSession session)
                         entry.getProfile(),
                         -1,
                         geyserId,
-                        EntityType.PLAYER,
                         Vector3f.ZERO,
                         Vector3f.ZERO,
                         Vector3f.ZERO

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/spawn/JavaSpawnMobTranslator.java
Patch:
@@ -51,9 +51,6 @@ public void translate(ServerSpawnMobPacket packet, GeyserSession session) {
         Entity entity = new Entity(packet.getEntityId(), session.getEntityCache().getNextEntityId().incrementAndGet(),
                 type, position, motion, rotation);
 
-        if (entity == null)
-            return;
-
         session.getEntityCache().spawnEntity(entity);
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaChunkDataTranslator.java
Patch:
@@ -9,7 +9,6 @@
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 import org.geysermc.api.Geyser;
-import org.geysermc.connector.console.GeyserLogger;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;
 import org.geysermc.connector.utils.ChunkUtils;
@@ -28,7 +27,7 @@ public void translate(ServerChunkDataPacket packet, GeyserSession session) {
             if (chunkPos == null || !chunkPos.equals(newChunkPos)) {
                 NetworkChunkPublisherUpdatePacket chunkPublisherUpdatePacket = new NetworkChunkPublisherUpdatePacket();
                 chunkPublisherUpdatePacket.setPosition(position.toInt());
-                chunkPublisherUpdatePacket.setRadius(8 << 4);
+                chunkPublisherUpdatePacket.setRadius(session.getRenderDistance() << 4);
                 session.getUpstream().sendPacket(chunkPublisherUpdatePacket);
 
                 session.setLastChunkPosition(newChunkPos);

File: connector/src/main/java/org/geysermc/connector/entity/Entity.java
Patch:
@@ -101,8 +101,7 @@ public void spawnEntity(GeyserSession session) {
     }
 
     public void despawnEntity(GeyserSession session) {
-        if (!valid)
-            return;
+        if (!valid) return;
 
         RemoveEntityPacket removeEntityPacket = new RemoveEntityPacket();
         removeEntityPacket.setUniqueEntityId(geyserId);
@@ -129,7 +128,7 @@ public void moveAbsolute(Vector3f position, float pitch, float yaw) {
     }
 
     public void moveAbsolute(Vector3f position, Vector3f rotation) {
-        if (position.getX() == 0 && position.getX() == 0 && position.getX() == 0 && rotation.getX() == 0 && rotation.getY() == 0)
+        if (position.getX() == 0 && position.getY() == 0 && position.getZ() == 0 && rotation.getX() == 0 && rotation.getY() == 0)
             return;
 
         this.position = position;

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -29,6 +29,7 @@
 import com.flowpowered.math.vector.Vector2i;
 import com.flowpowered.math.vector.Vector3f;
 import com.flowpowered.math.vector.Vector3i;
+import com.github.steveice10.mc.auth.data.GameProfile;
 import com.github.steveice10.mc.auth.exception.request.RequestException;
 import com.github.steveice10.mc.protocol.MinecraftProtocol;
 import com.github.steveice10.packetlib.Client;
@@ -103,7 +104,7 @@ public GeyserSession(GeyserConnector connector, BedrockServerSession bedrockServ
         this.scoreboardCache = new ScoreboardCache(this);
         this.windowCache = new WindowCache(this);
 
-        this.playerEntity = new PlayerEntity(UUID.randomUUID(), 1, 1, EntityType.PLAYER, new Vector3f(0, 0, 0), new Vector3f(0, 0, 0), new Vector3f(0, 0, 0));
+        this.playerEntity = new PlayerEntity(new GameProfile(UUID.randomUUID(), "Unknown"), 1, 1, EntityType.PLAYER, new Vector3f(0, 0, 0), new Vector3f(0, 0, 0), new Vector3f(0, 0, 0));
         this.inventory = new PlayerInventory();
 
         this.javaPacketCache = new DataCache<Packet>();
@@ -152,6 +153,7 @@ public void connected(ConnectedEvent event) {
                     loggedIn = true;
                     connector.getLogger().info(authenticationData.getName() + " (logged in as: " + protocol.getProfile().getName() + ")" + " has connected to remote java server on address " + remoteServer.getAddress());
                     playerEntity.setUuid(protocol.getProfile().getId());
+                    playerEntity.setUsername(protocol.getProfile().getName());
                 }
 
                 @Override

File: connector/src/main/java/org/geysermc/connector/entity/Entity.java
Patch:
@@ -97,7 +97,7 @@ public void spawnEntity(GeyserSession session) {
         valid = true;
         session.getUpstream().sendPacket(addEntityPacket);
 
-        GeyserLogger.DEFAULT.debug("Spawned entity " + entityType + " at location " + position + " with id " + geyserId + " (java id " + entityId + ")");
+        GeyserLogger.DEFAULT.info("Spawned entity " + entityType + " at location " + position + " with id " + geyserId + " (java id " + entityId + ")");
     }
 
     public void despawnEntity(GeyserSession session) {
@@ -125,11 +125,11 @@ public void moveRelative(double relX, double relY, double relZ, Vector3f rotatio
     }
 
     public void moveAbsolute(Vector3f position, float pitch, float yaw) {
-        moveAbsolute(position, new Vector3f(pitch, yaw, 0));
+        moveAbsolute(position, new Vector3f(pitch, yaw, yaw));
     }
 
     public void moveAbsolute(Vector3f position, Vector3f rotation) {
-        if (position.getX() == 0 && position.getX() == 0 && position.getX() == 0 && rotation.getX() == 0 && rotation.getY() == 0)
+        if (position.getX() == 0 && position.getY() == 0 && position.getZ() == 0 && rotation.getX() == 0 && rotation.getY() == 0)
             return;
 
         this.position = position;

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -29,6 +29,7 @@
 import com.flowpowered.math.vector.Vector2i;
 import com.flowpowered.math.vector.Vector3f;
 import com.flowpowered.math.vector.Vector3i;
+import com.github.steveice10.mc.auth.data.GameProfile;
 import com.github.steveice10.mc.auth.exception.request.RequestException;
 import com.github.steveice10.mc.protocol.MinecraftProtocol;
 import com.github.steveice10.packetlib.Client;
@@ -103,7 +104,7 @@ public GeyserSession(GeyserConnector connector, BedrockServerSession bedrockServ
         this.scoreboardCache = new ScoreboardCache(this);
         this.windowCache = new WindowCache(this);
 
-        this.playerEntity = new PlayerEntity(UUID.randomUUID(), 1, 1, EntityType.PLAYER, new Vector3f(0, 0, 0), new Vector3f(0, 0, 0), new Vector3f(0, 0, 0));
+        this.playerEntity = new PlayerEntity(new GameProfile(UUID.randomUUID(), "Unknown"), 1, 1, EntityType.PLAYER, new Vector3f(0, 0, 0), new Vector3f(0, 0, 0), new Vector3f(0, 0, 0));
         this.inventory = new PlayerInventory();
 
         this.javaPacketCache = new DataCache<Packet>();
@@ -152,6 +153,7 @@ public void connected(ConnectedEvent event) {
                     loggedIn = true;
                     connector.getLogger().info(authenticationData.getName() + " (logged in as: " + protocol.getProfile().getName() + ")" + " has connected to remote java server on address " + remoteServer.getAddress());
                     playerEntity.setUuid(protocol.getProfile().getId());
+                    playerEntity.setUsername(protocol.getProfile().getName());
                 }
 
                 @Override

File: connector/src/main/java/org/geysermc/connector/entity/type/EntityType.java
Patch:
@@ -79,7 +79,8 @@ public enum EntityType {
     AGENT(56, 0f),
     VINDICATOR(57, 1.8f, 0.6f, 0.6f, 1.62f),
     PILLAGER(114, 1.8f, 0.6f, 0.6f, 1.62f),
-    WANDERING_VILLAGER(118, 1.8f, 0.6f, 0.6f, 1.62f),
+    WANDERING_TRADER(118, 1.8f, 0.6f, 0.6f, 1.62f),
+    PHANTOM(58, 0.5f, 0.9f, 0.9f, 0.6f),
     RAVAGER(59, 1.9f, 1.2f),
 
     ARMOR_STAND(61, 0f),

File: connector/src/main/java/org/geysermc/connector/network/translators/TranslatorsInit.java
Patch:
@@ -30,6 +30,7 @@
 import com.github.steveice10.mc.protocol.packet.ingame.server.ServerJoinGamePacket;
 import com.github.steveice10.mc.protocol.packet.ingame.server.ServerRespawnPacket;
 import com.github.steveice10.mc.protocol.packet.ingame.server.ServerTitlePacket;
+import com.github.steveice10.mc.protocol.packet.ingame.server.entity.ServerEntityAnimationPacket;
 import com.github.steveice10.mc.protocol.packet.ingame.server.entity.ServerEntityDestroyPacket;
 import com.github.steveice10.mc.protocol.packet.ingame.server.entity.ServerEntityHeadLookPacket;
 import com.github.steveice10.mc.protocol.packet.ingame.server.entity.ServerEntityMetadataPacket;
@@ -78,6 +79,7 @@
 import org.geysermc.connector.network.translators.java.JavaChatTranslator;
 import org.geysermc.connector.network.translators.java.JavaJoinGameTranslator;
 import org.geysermc.connector.network.translators.java.JavaRespawnTranslator;
+import org.geysermc.connector.network.translators.java.entity.JavaEntityAnimationTranslator;
 import org.geysermc.connector.network.translators.java.entity.JavaEntityDestroyTranslator;
 import org.geysermc.connector.network.translators.java.entity.JavaEntityHeadLookTranslator;
 import org.geysermc.connector.network.translators.java.entity.JavaEntityMetadataTranslator;
@@ -143,6 +145,7 @@ public static void start() {
         Registry.registerJava(ServerRespawnPacket.class, new JavaRespawnTranslator());
         Registry.registerJava(ServerSpawnPositionPacket.class, new JavaSpawnPositionTranslator());
 
+        Registry.registerJava(ServerEntityAnimationPacket.class, new JavaEntityAnimationTranslator());
         Registry.registerJava(ServerEntityPositionPacket.class, new JavaEntityPositionTranslator());
         Registry.registerJava(ServerEntityPositionRotationPacket.class, new JavaEntityPositionRotationTranslator());
         Registry.registerJava(ServerEntityTeleportPacket.class, new JavaEntityTeleportTranslator());

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityDestroyTranslator.java
Patch:
@@ -26,7 +26,6 @@
 package org.geysermc.connector.network.translators.java.entity;
 
 import com.github.steveice10.mc.protocol.packet.ingame.server.entity.ServerEntityDestroyPacket;
-import com.nukkitx.protocol.bedrock.packet.RemoveEntityPacket;
 import org.geysermc.connector.entity.Entity;
 import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.PacketTranslator;

File: connector/src/main/java/org/geysermc/connector/entity/attribute/AttributeType.java
Patch:
@@ -35,7 +35,7 @@ public enum AttributeType {
     // Universal Attributes
     FOLLOW_RANGE("generic.followRange", "minecraft:follow_range", 0f, 2048f, 32f),
     KNOCKBACK_RESISTANCE("generic.knockbackResistance", "minecraft:knockback_resistance", 0f, 1f, 0f),
-    MOVEMENT_SPEED("generic.movementSpeed", "minecraft:movement", 0f, 1024f, 0.699999988079071f),
+    MOVEMENT_SPEED("generic.movementSpeed", "minecraft:movement", 0f, 1024f, 0.1f),
     FLYING_SPEED("generic.flyingSpeed", "minecraft:movement", 0.0f, 1024.0f, 0.4000000059604645f),
     ATTACK_DAMAGE("generic.attackDamage", "minecraft:attack_damage", 0f, 2048f, 1f),
 

File: connector/src/main/java/org/geysermc/connector/network/ConnectorServerEventHandler.java
Patch:
@@ -109,6 +109,7 @@ public void onSessionCreation(BedrockServerSession bedrockServerSession) {
             Player player = connector.getPlayers().get(bedrockServerSession.getAddress());
             if (player != null) {
                 player.disconnect(disconnectReason.name());
+                connector.removePlayer(player);
             }
         });
         bedrockServerSession.setPacketCodec(GeyserConnector.BEDROCK_PACKET_CODEC);

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaChunkDataTranslator.java
Patch:
@@ -40,7 +40,7 @@ public void translate(ServerChunkDataPacket packet, GeyserSession session) {
                 ChunkSection[] sections = chunkData.sections;
 
                 int sectionCount = sections.length - 1;
-                while (sections[sectionCount].isEmpty()) {
+                while (sectionCount >= 0 && sections[sectionCount].isEmpty()) {
                     sectionCount--;
                 }
                 sectionCount++;

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -91,6 +91,7 @@ public static void main(String[] args) {
     }
 
     private GeyserConnector() {
+        System.out.println(UUID.randomUUID().toString());
         //Metric
         if(!(System.console() == null) && System.getProperty("os.name", "Windows 10").toLowerCase().contains("windows")) {
             AnsiConsole.systemInstall();

File: connector/src/main/java/org/geysermc/connector/configuration/RemoteConfiguration.java
Patch:
@@ -37,6 +37,6 @@ public class RemoteConfiguration {
     private String motd1;
     private String motd2;
 
-    @JsonProperty("online-mode")
-    private boolean onlineMode;
+    @JsonProperty("auth-type")
+    private String authType;
 }
\ No newline at end of file

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -119,7 +119,7 @@ public void connect(RemoteServer remoteServer) {
         startGame();
 
         this.remoteServer = remoteServer;
-        if (!connector.getConfig().getRemote().isOnlineMode()) {
+        if (!(connector.getConfig().getRemote().getAuthType().hashCode() == "online".hashCode())) {
             connector.getLogger().info("Attempting to login using offline mode... authentication is disabled.");
             authenticate(authenticationData.getName());
         }

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemTranslator.java
Patch:
@@ -97,7 +97,7 @@ public JavaItem getJavaItem(ItemData data) {
     }
 
     public BedrockItem getBedrockBlock(BlockState state) {
-        BedrockItem bedrockItem = Remapper.BLOCK_REMAPPER.convertToBedrock(new ItemStack(state.getId()));
+        BedrockItem bedrockItem = Remapper.BLOCK_REMAPPER.convertToBedrockB(new ItemStack(state.getId()));
         if (bedrockItem == null) {
             // GeyserLogger.DEFAULT.debug("Missing mapping for java block " + state.getId());
             return BedrockItem.AIR;

File: connector/src/main/java/org/geysermc/connector/network/translators/item/JavaItem.java
Patch:
@@ -39,7 +39,7 @@ public class JavaItem {
 
     @Override
     public int hashCode() {
-        return id & identifier.hashCode();
+        return id;
     }
 
     @Override

File: connector/src/main/java/org/geysermc/connector/network/translators/TranslatorsInit.java
Patch:
@@ -100,7 +100,7 @@
 import org.geysermc.connector.network.translators.java.scoreboard.JavaDisplayScoreboardTranslator;
 import org.geysermc.connector.network.translators.java.scoreboard.JavaScoreboardObjectiveTranslator;
 import org.geysermc.connector.network.translators.java.scoreboard.JavaUpdateScoreTranslator;
-import org.geysermc.connector.network.translators.java.world.JavaChunkDataPacket;
+import org.geysermc.connector.network.translators.java.world.JavaChunkDataTranslator;
 import org.geysermc.connector.network.translators.java.world.JavaNotifyClientTranslator;
 import org.geysermc.connector.network.translators.java.window.JavaOpenWindowTranslator;
 import org.geysermc.connector.network.translators.java.window.JavaSetSlotTranslator;
@@ -168,7 +168,7 @@ public static void start() {
         Registry.registerJava(ServerPlayerHealthPacket.class, new JavaPlayerHealthTranslator());
 
         Registry.registerJava(ServerNotifyClientPacket.class, new JavaNotifyClientTranslator());
-        Registry.registerJava(ServerChunkDataPacket.class, new JavaChunkDataPacket());
+        Registry.registerJava(ServerChunkDataPacket.class, new JavaChunkDataTranslator());
         Registry.registerJava(ServerEntityDestroyPacket.class, new JavaEntityDestroyTranslator());
         Registry.registerJava(ServerWindowItemsPacket.class, new JavaWindowItemsTranslator());
         Registry.registerJava(ServerOpenWindowPacket.class, new JavaOpenWindowTranslator());

File: connector/src/main/java/org/geysermc/connector/utils/Toolbox.java
Patch:
@@ -40,7 +40,7 @@ public class Toolbox {
         ByteBuf b = Unpooled.buffer();
         VarInts.writeUnsignedInt(b, entries.size());
         for (Map<String, Object> e : entries) {
-            GlobalBlockPalette.registerMapping((int) e.get("id"));
+            GlobalBlockPalette.registerMapping((int) e.get("id") << 4 | (int) e.get("data"));
             BedrockUtils.writeString(b, (String) e.get("name"));
             b.writeShortLE((int) e.get("data"));
             b.writeShortLE((int) e.get("id"));

File: connector/src/main/java/org/geysermc/connector/GeyserConnector.java
Patch:
@@ -43,7 +43,6 @@
 import org.geysermc.connector.metrics.Metrics;
 import org.geysermc.connector.network.ConnectorServerEventHandler;
 import org.geysermc.connector.network.remote.RemoteJavaServer;
-import org.geysermc.connector.network.session.GeyserSession;
 import org.geysermc.connector.network.translators.TranslatorsInit;
 import org.geysermc.connector.plugin.GeyserPluginLoader;
 import org.geysermc.connector.plugin.GeyserPluginManager;

File: connector/src/main/java/org/geysermc/connector/entity/attribute/Attribute.java
Patch:
@@ -27,8 +27,10 @@
 
 import lombok.AllArgsConstructor;
 import lombok.Getter;
+import lombok.Setter;
 
 @Getter
+@Setter
 @AllArgsConstructor
 public class Attribute {
 

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemTranslator.java
Patch:
@@ -98,6 +98,9 @@ public static JavaItem getJavaItem(ItemData data) {
 
     public static BedrockItem getBedrockBlock(BlockState stack) {
         Map<String, Object> m = Remapper.JAVA_TO_BEDROCK_BLOCKS.get(stack.getId());
+        if (m == null)
+            return BedrockItem.AIR;
+
         return new BedrockItem((String) m.get("name"), (Integer) m.get("id"), (Integer) m.get("data"));
     }
 

File: connector/src/main/java/org/geysermc/connector/utils/Toolbox.java
Patch:
@@ -9,6 +9,7 @@
 import io.netty.buffer.Unpooled;
 import org.geysermc.connector.network.translators.item.BedrockItem;
 import org.geysermc.connector.network.translators.item.JavaItem;
+import org.geysermc.connector.world.GlobalBlockPalette;
 
 import java.io.InputStream;
 import java.util.*;
@@ -38,6 +39,7 @@ public class Toolbox {
         ByteBuf b = Unpooled.buffer();
         VarInts.writeUnsignedInt(b, entries.size());
         for (Map<String, Object> e : entries) {
+            GlobalBlockPalette.registerMapping((int) e.get("id"));
             BedrockUtils.writeString(b, (String) e.get("name"));
             b.writeShortLE((int) e.get("data"));
             b.writeShortLE((int) e.get("id"));

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -158,7 +158,7 @@ public void connected(ConnectedEvent event) {
                 public void disconnected(DisconnectedEvent event) {
                     loggedIn = false;
                     connector.getLogger().info(authenticationData.getName() + " has disconnected from remote java server on address " + remoteServer.getAddress() + " because of " + event.getReason());
-                    // upstream.disconnect(event.getReason());
+                    upstream.disconnect(event.getReason());
                 }
 
                 @Override
@@ -299,4 +299,4 @@ private void startGame() {
         playStatusPacket.setStatus(PlayStatusPacket.Status.PLAYER_SPAWN);
         upstream.sendPacket(playStatusPacket);
     }
-}
\ No newline at end of file
+}

File: connector/src/main/java/org/geysermc/connector/network/translators/item/BedrockItem.java
Patch:
@@ -32,6 +32,8 @@
 @AllArgsConstructor
 public class BedrockItem {
 
+    public static BedrockItem AIR = new BedrockItem("minecraft:air", 0, 0);
+
     private String identifier;
     private int id;
     private int data;

File: connector/src/main/java/org/geysermc/connector/network/translators/item/JavaItem.java
Patch:
@@ -32,6 +32,8 @@
 @AllArgsConstructor
 public class JavaItem {
 
+    public static JavaItem AIR = new JavaItem("minecraft:air", 0);
+
     private String identifier;
     private int id;
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/JavaJoinGameTranslator.java
Patch:
@@ -51,8 +51,8 @@ public void translate(ServerJoinGamePacket packet, GeyserSession session) {
         Vector3f pos = new Vector3f(0, 0, 0);
         int chunkX = pos.getFloorX() >> 4;
         int chunkZ = pos.getFloorZ() >> 4;
-        for (int x = -3; x < 3; x++) {
-            for (int z = -3; z < 3; z++) {
+        for (int x = -1; x < 1; x++) {
+            for (int z = -1; z < 1; z++) {
                 LevelChunkPacket data = new LevelChunkPacket();
                 data.setChunkX(chunkX + x);
                 data.setChunkZ(chunkZ + z);

File: connector/src/main/java/org/geysermc/connector/utils/RemapUtils.java
Patch:
@@ -21,7 +21,7 @@ static void start() {
                     .equalsIgnoreCase(x.getIdentifier()) && x.getData() == 0) {
 
                 for (DyeColor dyeColor : DyeColor.values()) {
-                    JavaItem j = new JavaItem(y.getIdentifier().replaceAll("white", dyeColor.getName()), y.getId());
+                    JavaItem j = new JavaItem(y.getIdentifier().replaceAll("white", dyeColor.getName()), y.getId() + dyeColor.getId());
                     Remapper.convertions.computeIfAbsent(j, (q) -> new ArrayList<>());
                     Remapper.convertions.get(j).add(new BedrockItem(x.getIdentifier(), x.getId(), dyeColor.getId()));
                 }
@@ -62,7 +62,7 @@ static void start() {
                     .equalsIgnoreCase(x.getIdentifier()) && x.getData() == 0) {
 
                 for (WoodType woodType : WoodType.values()) {
-                    JavaItem j = new JavaItem(y.getIdentifier().replaceAll("oak", woodType.getName()), y.getId());
+                    JavaItem j = new JavaItem(y.getIdentifier().replaceAll("oak", woodType.getName()), y.getId() + woodType.getId());
                     Remapper.convertions.computeIfAbsent(j, (q) -> new ArrayList<>());
                     Remapper.convertions.get(j).add(new BedrockItem(x.getIdentifier(), x.getId(), woodType.getId()));
                 }
@@ -80,6 +80,7 @@ private static boolean customColorIfNeeded(JavaItem j) {
     }
 
     private static boolean customWoodIfNeeded(JavaItem j) {
+        if(j.getIdentifier().contains("fence_gate")) return true;
         for(WoodType t : WoodType.values()) {
             if (j.getIdentifier().equalsIgnoreCase(MINECRAFT + "stripped_" + t.getName() +"_wood")) {
                 Remapper.convertions.put(j, Arrays.asList(new BedrockItem(MINECRAFT + "wood", 467, t.getId() + 8)));

File: connector/src/main/java/org/geysermc/connector/network/session/GeyserSession.java
Patch:
@@ -158,8 +158,7 @@ public void connected(ConnectedEvent event) {
                 public void disconnected(DisconnectedEvent event) {
                     loggedIn = false;
                     connector.getLogger().info(authenticationData.getName() + " has disconnected from remote java server on address " + remoteServer.getAddress() + " because of " + event.getReason());
-                    event.getCause().printStackTrace();
-                    disconnect(event.getReason());
+                    // upstream.disconnect(event.getReason());
                 }
 
                 @Override

File: connector/src/main/java/org/geysermc/connector/network/translators/TranslatorsInit.java
Patch:
@@ -95,14 +95,13 @@
 import org.geysermc.connector.network.translators.java.scoreboard.JavaDisplayScoreboardTranslator;
 import org.geysermc.connector.network.translators.java.scoreboard.JavaScoreboardObjectiveTranslator;
 import org.geysermc.connector.network.translators.java.scoreboard.JavaUpdateScoreTranslator;
-import org.geysermc.connector.network.translators.java.world.JavaChunk;
+import org.geysermc.connector.network.translators.java.world.JavaChunkDataPacket;
 import org.geysermc.connector.network.translators.java.world.JavaNotifyClientTranslator;
 import org.geysermc.connector.network.translators.java.window.JavaOpenWindowTranslator;
 import org.geysermc.connector.network.translators.java.window.JavaSetSlotTranslator;
 import org.geysermc.connector.network.translators.java.JavaTitleTranslator;
 import org.geysermc.connector.network.translators.java.world.JavaUpdateTimeTranslator;
 import org.geysermc.connector.network.translators.java.window.JavaWindowItemsTranslator;
-import org.geysermc.connector.utils.Chunks;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -161,7 +160,7 @@ public static void start() {
         Registry.registerJava(ServerPlayerHealthPacket.class, new JavaPlayerHealthTranslator());
 
         Registry.registerJava(ServerNotifyClientPacket.class, new JavaNotifyClientTranslator());
-        Registry.registerJava(ServerChunkDataPacket.class, new JavaChunk());
+        Registry.registerJava(ServerChunkDataPacket.class, new JavaChunkDataPacket());
         Registry.registerJava(ServerEntityDestroyPacket.class, new JavaEntityDestroyTranslator());
         Registry.registerJava(ServerWindowItemsPacket.class, new JavaWindowItemsTranslator());
         Registry.registerJava(ServerOpenWindowPacket.class, new JavaOpenWindowTranslator());

File: connector/src/main/java/org/geysermc/connector/network/translators/item/ItemTranslator.java
Patch:
@@ -78,7 +78,6 @@ public static ItemData translateToBedrock(ItemStack stack) {
 
     public static BedrockItem getBedrockItem(ItemStack stack) {
         Map<String, Object> m = Remapper.JAVA_TO_BEDROCK.get(stack.getId());
-        System.out.println(stack.getId());
         return new BedrockItem((String) m.get("name"), (Integer) m.get("id"), (Integer) m.get("data"));
     }
 
@@ -89,7 +88,6 @@ public static JavaItem getJavaItem(ItemData data) {
 
     public static BedrockItem getBedrockBlock(BlockState stack) {
         Map<String, Object> m = Remapper.JAVA_TO_BEDROCK_BLOCKS.get(stack.getId());
-        System.out.println(stack.getId());
         return new BedrockItem((String) m.get("name"), (Integer) m.get("id"), (Integer) m.get("data"));
     }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/spawn/JavaSpawnPlayerTranslator.java
Patch:
@@ -40,7 +40,7 @@ public void translate(ServerSpawnPlayerPacket packet, GeyserSession session) {
         Vector3f position = new Vector3f(packet.getX(), packet.getY(), packet.getZ());
         Vector3f rotation = new Vector3f(packet.getPitch(), packet.getYaw(), 0);
         Entity entity = new PlayerEntity(packet.getUUID(), packet.getEntityId(), session.getEntityCache().getNextEntityId().incrementAndGet(),
-                EntityType.EXPERIENCE_ORB, position, new Vector3f(0, 0, 0), rotation);
+                EntityType.PLAYER, position, new Vector3f(0, 0, 0), rotation);
 
         if (entity == null)
             return;

File: connector/src/main/java/org/geysermc/connector/utils/LoginEncryptionUtils.java
Patch:
@@ -69,7 +69,7 @@ public static void encryptPlayerConnection(GeyserConnector connector, GeyserSess
             throw new RuntimeException("Certificate data is not valid");
         }
 
-        encryptConnectionWithCert(connector, session, loginPacket.getSkinData().toString(), certData);
+        encryptConnectionWithCert(connector, session, loginPacket.getSkinData().toString(), certChainData);
     }
 
     private static void encryptConnectionWithCert(GeyserConnector connector, GeyserSession session, String playerSkin, JsonNode certChainData) {

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityPositionRotationTranslator.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.network.translators.java;
+package org.geysermc.connector.network.translators.java.entity;
 
 import com.flowpowered.math.vector.Vector3f;
 import com.github.steveice10.mc.protocol.packet.ingame.server.entity.ServerEntityPositionRotationPacket;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityPositionTranslator.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.network.translators.java;
+package org.geysermc.connector.network.translators.java.entity;
 
 import com.flowpowered.math.vector.Vector3f;
 import com.github.steveice10.mc.protocol.packet.ingame.server.entity.ServerEntityPositionPacket;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityTeleportTranslator.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.network.translators.java;
+package org.geysermc.connector.network.translators.java.entity;
 
 import com.flowpowered.math.vector.Vector3f;
 import com.github.steveice10.mc.protocol.packet.ingame.server.entity.ServerEntityTeleportPacket;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/entity/JavaEntityVelocityTranslator.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.network.translators.java;
+package org.geysermc.connector.network.translators.java.entity;
 
 import com.flowpowered.math.vector.Vector3f;
 import com.github.steveice10.mc.protocol.packet.ingame.server.entity.ServerEntityVelocityPacket;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaNotifyClientTranslator.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.network.translators.java;
+package org.geysermc.connector.network.translators.java.world;
 
 import com.flowpowered.math.vector.Vector3f;
 import com.github.steveice10.mc.protocol.packet.ingame.server.world.ServerNotifyClientPacket;

File: connector/src/main/java/org/geysermc/connector/network/translators/java/world/JavaUpdateTimeTranslator.java
Patch:
@@ -23,7 +23,7 @@
  * @link https://github.com/GeyserMC/Geyser
  */
 
-package org.geysermc.connector.network.translators.java;
+package org.geysermc.connector.network.translators.java.world;
 
 import com.github.steveice10.mc.protocol.packet.ingame.server.world.ServerUpdateTimePacket;
 import com.nukkitx.protocol.bedrock.packet.SetTimePacket;

File: connector/src/main/java/org/geysermc/connector/configuration/GeyserConfiguration.java
Patch:
@@ -39,4 +39,7 @@ public class GeyserConfiguration {
 
     @JsonProperty("max-players")
     private int maxPlayers;
+
+    @JsonProperty("debug-mode")
+    private boolean debugMode;
 }
\ No newline at end of file

File: connector/src/main/java/org/geysermc/connector/network/ConnectorServerEventHandler.java
Patch:
@@ -53,7 +53,7 @@ public boolean onConnectionRequest(InetSocketAddress inetSocketAddress) {
 
     @Override
     public BedrockPong onQuery(InetSocketAddress inetSocketAddress) {
-        GeyserLogger.DEFAULT.info(inetSocketAddress + " has pinged you!");
+        GeyserLogger.DEFAULT.debug(inetSocketAddress + " has pinged you!");
         GeyserConfiguration config = connector.getConfig();
         BedrockPong pong = new BedrockPong();
         pong.setEdition("MCPE");

File: connector/src/main/java/org/geysermc/connector/network/translators/Registry.java
Patch:
@@ -48,7 +48,7 @@ public <P extends T> void translate(Class<P> clazz, P p, GeyserSession s) {
         try {
             ((BiConsumer<P, GeyserSession>) JAVA.MAP.get(clazz)).accept(p, s);
         } catch (NullPointerException e) {
-            GeyserLogger.DEFAULT.warning("could not translate packet " + p.getClass().getSimpleName());
+            GeyserLogger.DEFAULT.debug("could not translate packet " + p.getClass().getSimpleName());
         }
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/translators/Registry.java
Patch:
@@ -27,6 +27,7 @@
 
 import com.github.steveice10.packetlib.packet.Packet;
 import org.geysermc.api.Geyser;
+import org.geysermc.connector.console.GeyserLogger;
 import org.geysermc.connector.network.session.GeyserSession;
 
 import java.util.HashMap;
@@ -47,7 +48,7 @@ public <P extends T> void translate(Class<P> clazz, P p, GeyserSession s) {
         try {
             ((BiConsumer<P, GeyserSession>) JAVA.MAP.get(clazz)).accept(p, s);
         } catch (NullPointerException e) {
-            System.err.println("could not translate packet" + p.getClass().getSimpleName());
+            GeyserLogger.DEFAULT.warning("could not translate packet " + p.getClass().getSimpleName());
         }
     }
 }

File: connector/src/main/java/org/geysermc/connector/network/ConnectorServerEventHandler.java
Patch:
@@ -47,7 +47,7 @@ public ConnectorServerEventHandler(GeyserConnector connector) {
 
     @Override
     public boolean onConnectionRequest(InetSocketAddress inetSocketAddress) {
-        System.out.println(inetSocketAddress + " tried to connect!");
+        GeyserLogger.DEFAULT.info(inetSocketAddress + " tried to connect!");
         return true;
     }
 
@@ -74,7 +74,7 @@ public BedrockPong onQuery(InetSocketAddress inetSocketAddress) {
     public void onSessionCreation(BedrockServerSession bedrockServerSession) {
         bedrockServerSession.setLogging(true);
         bedrockServerSession.setPacketHandler(new UpstreamPacketHandler(connector, new GeyserSession(connector, bedrockServerSession)));
-        bedrockServerSession.addDisconnectHandler((x) -> GeyserLogger.DEFAULT.warning("Bedrock user with ip: " + bedrockServerSession.getAddress().getAddress() + " has disconected for reason " + x));
+        bedrockServerSession.addDisconnectHandler((x) -> GeyserLogger.DEFAULT.warning("Bedrock user with ip: " + bedrockServerSession.getAddress().getAddress() + " has disconnected for reason " + x));
         bedrockServerSession.setPacketCodec(Bedrock_v361.V361_CODEC);
     }
 

File: connector/src/main/java/org/geysermc/connector/network/translators/Registry.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.github.steveice10.packetlib.packet.Packet;
 import org.geysermc.api.Geyser;
+import org.geysermc.connector.console.GeyserLogger;
 import org.geysermc.connector.network.session.GeyserSession;
 
 import java.util.HashMap;
@@ -22,7 +23,7 @@ public <P extends T> void translate(Class<P> clazz, P p, GeyserSession s) {
         try {
             ((BiConsumer<P, GeyserSession>) JAVA.MAP.get(clazz)).accept(p, s);
         } catch (NullPointerException e) {
-            System.err.println("could not translate packet" + p.getClass().getSimpleName());
+            GeyserLogger.DEFAULT.warning("could not translate packet " + p.getClass().getSimpleName());
         }
     }
 

