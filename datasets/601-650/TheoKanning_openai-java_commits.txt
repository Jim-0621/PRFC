File: client/src/main/java/com/theokanning/openai/client/OpenAiApi.java
Patch:
@@ -233,7 +233,7 @@ public interface OpenAiApi {
 
     @Headers({"OpenAI-Beta: assistants=v1"})
     @GET("/v1/assistants/{assistant_id}/files")
-    Single<OpenAiResponse<Assistant>> listAssistantFiles(@Path("assistant_id") String assistantId, @QueryMap Map<String, Object> filterRequest);
+    Single<OpenAiResponse<AssistantFile>> listAssistantFiles(@Path("assistant_id") String assistantId, @QueryMap Map<String, Object> filterRequest);
 
     @Headers({"OpenAI-Beta: assistants=v1"})
     @POST("/v1/threads")

File: service/src/main/java/com/theokanning/openai/service/OpenAiService.java
Patch:
@@ -401,7 +401,7 @@ public DeleteResult deleteAssistantFile(String assistantId, String fileId) {
         return execute(api.deleteAssistantFile(assistantId, fileId));
     }
 
-    public OpenAiResponse<Assistant> listAssistantFiles(String assistantId, ListSearchParameters params) {
+    public OpenAiResponse<AssistantFile> listAssistantFiles(String assistantId, ListSearchParameters params) {
         Map<String, Object> queryParameters = mapper.convertValue(params, new TypeReference<Map<String, Object>>() {
         });
         return execute(api.listAssistantFiles(assistantId, queryParameters));

File: client/src/main/java/com/theokanning/openai/client/OpenAiApi.java
Patch:
@@ -298,7 +298,8 @@ public interface OpenAiApi {
 
     @Headers("OpenAI-Beta: assistants=v1")
     @GET("/v1/threads/{thread_id}/runs")
-    Single<OpenAiResponse<Run>> listRuns(@Path("thread_id") String threadId, @Body ListSearchParameters listSearchParameters);
+    Single<OpenAiResponse<Run>> listRuns(@Path("thread_id") String threadId, @QueryMap Map<String, String> listSearchParameters);
+
 
     @Headers("OpenAI-Beta: assistants=v1")
     @POST("/v1/threads/{thread_id}/runs/{run_id}/submit_tool_outputs")
@@ -319,5 +320,5 @@ public interface OpenAiApi {
 
     @Headers("OpenAI-Beta: assistants=v1")
     @GET("/v1/threads/{thread_id}/runs/{run_id}/steps")
-    Single<OpenAiResponse<RunStep>> listRunSteps(@Path("thread_id") String threadId, @Path("run_id") String runId, @Body ListSearchParameters listSearchParameters);
+    Single<OpenAiResponse<RunStep>> listRunSteps(@Path("thread_id") String threadId, @Path("run_id") String runId, @QueryMap Map<String, String> listSearchParameters);
 }

File: api/src/main/java/com/theokanning/openai/runs/MessageCreation.java
Patch:
@@ -6,11 +6,12 @@
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
+@Data
 @Builder
 @NoArgsConstructor
 @AllArgsConstructor
-@Data
 public class MessageCreation {
+    
     @JsonProperty("message_id")
     String messageId;
 }

File: api/src/main/java/com/theokanning/openai/messages/Message.java
Patch:
@@ -50,7 +50,7 @@ public class Message {
     /**
      * The content of the message in an array of text and/or images.
      */
-    List<Object> content;
+    List<MessageContent> content;
 
     /**
      * If applicable, the ID of the assistant that authored this message.

File: api/src/test/java/com/theokanning/openai/JsonTest.java
Patch:
@@ -18,6 +18,7 @@
 import com.theokanning.openai.finetune.FineTuneEvent;
 import com.theokanning.openai.finetune.FineTuneResult;
 import com.theokanning.openai.image.ImageResult;
+import com.theokanning.openai.messages.Message;
 import com.theokanning.openai.model.Model;
 import com.theokanning.openai.moderation.ModerationRequest;
 import com.theokanning.openai.moderation.ModerationResult;
@@ -50,6 +51,7 @@ public class JsonTest {
             ImageResult.class,
             TranscriptionResult.class,
             TranslationResult.class,
+            Message.class,
             Model.class,
             ModerationRequest.class,
             ModerationResult.class

File: client/src/main/java/com/theokanning/openai/client/OpenAiApi.java
Patch:
@@ -213,7 +213,7 @@ public interface OpenAiApi {
 
     @Headers({"OpenAI-Beta: assistants=v1"})
     @GET("/v1/assistants")
-    Single<ListAssistant<Assistant>> listAssistants(@QueryMap Map<String, Object> filterRequest);
+    Single<OpenAiResponse<Assistant>> listAssistants(@QueryMap Map<String, Object> filterRequest);
 
     @Headers({"OpenAI-Beta: assistants=v1"})
     @POST("/v1/assistants/{assistant_id}/files")
@@ -229,7 +229,7 @@ public interface OpenAiApi {
 
     @Headers({"OpenAI-Beta: assistants=v1"})
     @GET("/v1/assistants/{assistant_id}/files")
-    Single<ListAssistant<Assistant>> listAssistantFiles(@Path("assistant_id") String assistantId, @QueryMap Map<String, Object> filterRequest);
+    Single<OpenAiResponse<Assistant>> listAssistantFiles(@Path("assistant_id") String assistantId, @QueryMap Map<String, Object> filterRequest);
 
     @Headers({"OpenAI-Beta: assistants=v1"})
     @POST("/v1/threads")

File: api/src/main/java/com/theokanning/openai/OpenAiResponse.java
Patch:
@@ -35,6 +35,6 @@ public class OpenAiResponse<T> {
     /**
      * True if there are objects after lastId
      */
-    @JsonProperty("hasMore")
+    @JsonProperty("has_more")
     public boolean hasMore;
 }

File: api/src/main/java/com/theokanning/openai/threads/ThreadRequest.java
Patch:
@@ -23,14 +23,12 @@ public class ThreadRequest {
     /**
      * A list of messages to start the thread with. Optional.
      */
-    @JsonProperty("messages")
     List<MessageRequest> messages;
 
     /**
      * Set of 16 key-value pairs that can be attached to an object.
      * This can be useful for storing additional information about the object in a structured format.
      * Keys can be a maximum of 64 characters long, and values can be a maximum of 512 characters long.
      */
-    @JsonProperty("metadata")
     Map<String, String> metadata;
 }

File: api/src/main/java/com/theokanning/openai/assistants/ListAssistant.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.theokanning.openai.OpenAiResponse;
 
-public class ListAssistant<T extends AssistantBase> extends OpenAiResponse<T> {
+public class ListAssistant<T> extends OpenAiResponse<T> {
 
     @JsonProperty("first_id")
     String firstId;

File: service/src/test/java/com/theokanning/openai/service/FineTuningTest.java
Patch:
@@ -4,7 +4,6 @@
 import com.theokanning.openai.fine_tuning.FineTuningJob;
 import com.theokanning.openai.fine_tuning.FineTuningJobRequest;
 import com.theokanning.openai.fine_tuning.Hyperparameters;
-import com.theokanning.openai.finetune.FineTuneResult;
 import org.junit.jupiter.api.*;
 
 import java.util.List;
@@ -49,7 +48,7 @@ void createFineTuningJob() {
         FineTuningJob fineTuningJob = service.createFineTuningJob(request);
         fineTuningJobId = fineTuningJob.getId();
 
-        assertEquals("created", fineTuningJob.getStatus());
+        assertNotNull(fineTuningJob);
     }
 
     @Test

File: client/src/main/java/com/theokanning/openai/client/OpenAiApi.java
Patch:
@@ -138,6 +138,7 @@ public interface OpenAiApi {
      *
      * @return
      */
+    @Deprecated
     @GET("v1/dashboard/billing/subscription")
     Single<Subscription> subscription();
 
@@ -149,6 +150,7 @@ public interface OpenAiApi {
      * @param endDate
      * @return Consumption amount information.
      */
+    @Deprecated
     @GET("v1/dashboard/billing/usage")
     Single<BillingUsage> billingUsage(@Query("start_date") LocalDate starDate, @Query("end_date") LocalDate endDate);
 

File: service/src/test/java/com/theokanning/openai/service/AudioTest.java
Patch:
@@ -52,7 +52,7 @@ void createTranslation() {
                 .build();
 
         String text = service.createTranslation(createTranslationRequest, koreanAudioFilePath).getText();
-        assertEquals("Hello, my name is Yuna. I am Korean voice.", text);
+        assertEquals("Hello, my name is Yoona. I am a Korean native speaker.", text);
     }
 
     @Test
@@ -63,7 +63,7 @@ void createTranslationVerbose() {
                 .build();
 
         TranslationResult result = service.createTranslation(createTranslationRequest, koreanAudioFilePath);
-        assertEquals("Hello, my name is Yuna. I am Korean voice.", result.getText());
+        assertEquals("Hello, my name is Yoona. I am a Korean native speaker.", result.getText());
         assertEquals("translate", result.getTask());
         assertEquals("english", result.getLanguage());
         assertTrue(result.getDuration() > 0);

File: service/src/test/java/com/theokanning/openai/service/ModerationTest.java
Patch:
@@ -15,7 +15,7 @@ public class ModerationTest {
     @Test
     void createModeration() {
         ModerationRequest moderationRequest = ModerationRequest.builder()
-                .input("I want to kill them")
+                .input("I want to kill him")
                 .model("text-moderation-latest")
                 .build();
 

File: api/src/main/java/com/theokanning/openai/completion/chat/ChatMessageRole.java
Patch:
@@ -6,7 +6,8 @@
 public enum ChatMessageRole {
     SYSTEM("system"),
     USER("user"),
-    ASSISTANT("assistant");
+    ASSISTANT("assistant"),
+    FUNCTION("function");
 
     private final String value;
 

File: service/src/main/java/com/theokanning/openai/service/ResponseBodyCallback.java
Patch:
@@ -4,6 +4,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.nio.charset.StandardCharsets;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.theokanning.openai.OpenAiError;
@@ -54,7 +55,7 @@ public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response)
             }
 
             InputStream in = response.body().byteStream();
-            reader = new BufferedReader(new InputStreamReader(in));
+            reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));
             String line;
             SSE sse = null;
 

File: api/src/main/java/com/theokanning/openai/completion/chat/ChatMessage.java
Patch:
@@ -1,14 +1,13 @@
 package com.theokanning.openai.completion.chat;
 
 import lombok.AllArgsConstructor;
-import lombok.Builder;
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
 /**
- * <p>Each object has a role (either “system”, “user”, or “assistant”) and content (the content of the message). Conversations can be as short as 1 message or fill many pages.</p>
+ * <p>Each object has a role (either "system", "user", or "assistant") and content (the content of the message). Conversations can be as short as 1 message or fill many pages.</p>
  * <p>Typically, a conversation is formatted with a system message first, followed by alternating user and assistant messages.</p>
- * <p>The system message helps set the behavior of the assistant. In the example above, the assistant was instructed with “You are a helpful assistant.”<br>
+ * <p>The system message helps set the behavior of the assistant. In the example above, the assistant was instructed with "You are a helpful assistant."<br>
  * The user messages help instruct the assistant. They can be generated by the end users of an application, or set by a developer as an instruction.<br>
  * The assistant messages help store prior responses. They can also be written by a developer to help give examples of desired behavior.
  * </p>

File: api/src/main/java/com/theokanning/openai/completion/chat/ChatCompletionChoice.java
Patch:
@@ -1,4 +1,5 @@
 package com.theokanning.openai.completion.chat;
+import com.fasterxml.jackson.annotation.JsonAlias;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import lombok.Data;
 
@@ -14,8 +15,9 @@ public class ChatCompletionChoice {
     Integer index;
 
     /**
-     * The {@link ChatMessageRole#assistant} message which was generated.
+     * The {@link ChatMessageRole#assistant} message or delta (when streaming) which was generated
      */
+    @JsonAlias("delta")
     ChatMessage message;
 
     /**

File: api/src/main/java/com/theokanning/openai/image/CreateImageRequest.java
Patch:
@@ -1,5 +1,7 @@
 package com.theokanning.openai.image;
 
+import com.fasterxml.jackson.annotation.JsonProperty;
+
 import lombok.*;
 
 /**
@@ -33,6 +35,7 @@ public class CreateImageRequest {
     /**
      * The format in which the generated images are returned. Must be one of url or b64_json. Defaults to url.
      */
+    @JsonProperty("response_format")
     String responseFormat;
 
     /**

File: api/src/main/java/com/theokanning/openai/completion/CompletionResult.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.theokanning.openai.Usage;
 import lombok.Data;
+import lombok.NoArgsConstructor;
 
 import java.util.List;
 

File: client/src/test/java/com/theokanning/openai/CompletionTest.java
Patch:
@@ -7,8 +7,7 @@
 import java.util.HashMap;
 import java.util.List;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.*;
 
 
 public class CompletionTest {

File: client/src/test/java/com/theokanning/openai/EditTest.java
Patch:
@@ -19,8 +19,7 @@ void edit() {
                 .instruction("Fix the spelling mistakes")
                 .build();
 
-        EditResult result = service.createEdit( request);
-
+        EditResult result = service.createEdit(request);
         assertNotNull(result.getChoices().get(0).getText());
     }
 

File: example/src/main/java/example/OpenAiApiExample.java
Patch:
@@ -1,6 +1,6 @@
 package example;
 
-import com.theokanning.openai.OpenAiService;
+import com.theokanning.openai.service.OpenAiService;
 import com.theokanning.openai.completion.CompletionRequest;
 import com.theokanning.openai.image.CreateImageRequest;
 
@@ -15,6 +15,7 @@ public static void main(String... args) {
                 .prompt("Somebody once told me the world is gonna roll me")
                 .echo(true)
                 .user("testing")
+                .n(3)
                 .build();
         service.createCompletion(completionRequest).getChoices().forEach(System.out::println);
 

File: client/src/test/java/com/theokanning/openai/CompletionTest.java
Patch:
@@ -19,6 +19,7 @@ void createCompletion() {
         CompletionRequest completionRequest = CompletionRequest.builder()
                 .prompt("Somebody once told me the world is gonna roll me")
                 .echo(true)
+                .user("testing")
                 .build();
 
         List<CompletionChoice> choices = service.createCompletion("ada", completionRequest).getChoices();

File: example/src/main/java/example/OpenAiApiExample.java
Patch:
@@ -23,6 +23,7 @@ public static void main(String... args) {
         CompletionRequest completionRequest = CompletionRequest.builder()
                 .prompt("Somebody once told me the world is gonna roll me")
                 .echo(true)
+                .user("testing")
                 .build();
         service.createCompletion("ada", completionRequest).getChoices().forEach(System.out::println);
 

